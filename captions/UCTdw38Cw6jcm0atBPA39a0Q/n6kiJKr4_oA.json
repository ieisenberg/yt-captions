[
  {
    "text": "good afternoon everyone I'm really happy we added this session last minute looks like everyone's happy",
    "start": "240",
    "end": "7680"
  },
  {
    "text": "about that as well I hope you're all excited to learn about async and awaiting JavaScript",
    "start": "7680",
    "end": "13620"
  },
  {
    "text": "I'm joking",
    "start": "13620",
    "end": "16519"
  },
  {
    "text": "took a few seconds I hope no one left on the way in now we're going to be talking about async and await and using",
    "start": "19619",
    "end": "26460"
  },
  {
    "text": "that in c-sharp and Dot net of course and we're going to focus on efficiency and talking about how to efficiently use",
    "start": "26460",
    "end": "31920"
  },
  {
    "text": "async and await the task para Library what this means to our applications how to break applications and why that might",
    "start": "31920",
    "end": "39120"
  },
  {
    "text": "occur and how to fix it so this is going to be an interesting session hopefully all of you are going",
    "start": "39120",
    "end": "45000"
  },
  {
    "text": "to go out of this session with a little bit of a headache but don't worry I've got some paddle if you need that",
    "start": "45000",
    "end": "52260"
  },
  {
    "text": "joking my name is Philip I did a session earlier today on all the things in c-sharp I quickly showed some things",
    "start": "52260",
    "end": "58260"
  },
  {
    "text": "that are new to.net in terms of async and await but now we're going to focus on really getting into exactly what the",
    "start": "58260",
    "end": "65400"
  },
  {
    "text": "task parallel libraries how to use that and if you have any questions afterwards because we're going to cover quite a lot",
    "start": "65400",
    "end": "72420"
  },
  {
    "text": "of things in just one hour feel free to send me an email I I happily talk to",
    "start": "72420",
    "end": "77460"
  },
  {
    "text": "developers about async and await c-sharp.net and all of that so do email",
    "start": "77460",
    "end": "82799"
  },
  {
    "text": "me if you have any questions so the first thing that we want to answer is why would we even bother in",
    "start": "82799",
    "end": "88020"
  },
  {
    "text": "producing asynchronous principles parallelism and doing things on another thread than the UI thread",
    "start": "88020",
    "end": "94740"
  },
  {
    "text": "quite the obvious reason is to avoid unreliable applications in this case here I have a application running on",
    "start": "94740",
    "end": "101759"
  },
  {
    "text": "Android and it's not the fact that we're going to solve Android that's a different problem this here is showing",
    "start": "101759",
    "end": "107220"
  },
  {
    "text": "me that I'm doing way too much work on the UI thread the operating system is telling me that you should probably",
    "start": "107220",
    "end": "112320"
  },
  {
    "text": "offload some work to somewhere else so we're going to solve this with by introducing the task parallel Library",
    "start": "112320",
    "end": "118500"
  },
  {
    "text": "this is a xamarinore.net Maui application doesn't really matter all that we're going to talk about here",
    "start": "118500",
    "end": "124079"
  },
  {
    "text": "today is applicable in any.net application it's a little bit different if you're doing asp.net asp.net core",
    "start": "124079",
    "end": "130819"
  },
  {
    "text": "c-sharp for console applications WPF winforms but we're going to try and cover some of that as well",
    "start": "130819",
    "end": "137700"
  },
  {
    "text": "so we want to improve the user experience and we want to efficiently consume apis and all the data available",
    "start": "137700",
    "end": "143700"
  },
  {
    "text": "to us so what it really boils down to is that sometimes we have really powerful",
    "start": "143700",
    "end": "149040"
  },
  {
    "text": "machines this here is a screenshot of my task manager of my desktop at home sometimes you run on applications or",
    "start": "149040",
    "end": "155459"
  },
  {
    "text": "systems that are not as powerful so it's quite nice that.net will take care of",
    "start": "155459",
    "end": "161340"
  },
  {
    "text": "optimizing some of the things for us to make use of the available resources",
    "start": "161340",
    "end": "166500"
  },
  {
    "text": "efficiently I have CPU I have memory Network and all of this that I want to",
    "start": "166500",
    "end": "172440"
  },
  {
    "text": "use in my application and it's quite nice that we can do this with the the built-in types as long as we know",
    "start": "172440",
    "end": "178620"
  },
  {
    "text": "exactly how to use it efficiently it really boils down to two things it's CPU and IO",
    "start": "178620",
    "end": "185459"
  },
  {
    "text": "one of the things that I often talk about is that we have CPU bound offer operations that are are you you normally",
    "start": "185459",
    "end": "192120"
  },
  {
    "text": "want to divide a problem into smaller pieces you want to parallelize a problem that is very much CPU bound you want to",
    "start": "192120",
    "end": "198540"
  },
  {
    "text": "solve something as quickly as possible and then you have i o bound operations which you also want to be happening in",
    "start": "198540",
    "end": "205080"
  },
  {
    "text": "parallel or just somewhere else rather than blocking the application but you also want to be able to get a",
    "start": "205080",
    "end": "210959"
  },
  {
    "text": "notification without this done traditionally you were able to do this using events so you could use an event",
    "start": "210959",
    "end": "216900"
  },
  {
    "text": "based asynchronous pattern but that's not very nice instead they're building things into the language to make it",
    "start": "216900",
    "end": "223019"
  },
  {
    "text": "easier to consume asynchronous apis and this is of course what we're going to be looking at",
    "start": "223019",
    "end": "228180"
  },
  {
    "text": "so ideally we're going to go from a blocking application to non-blocking code this means avoid heavy lifting on the UI",
    "start": "228180",
    "end": "235560"
  },
  {
    "text": "or main thread off the application in terms of asp.net if there's an asp.net developers in here you're",
    "start": "235560",
    "end": "242640"
  },
  {
    "text": "probably wondering how this is going to benefit you there's no UI thread per se but you can",
    "start": "242640",
    "end": "248640"
  },
  {
    "text": "still let the server consume that thread to process more requests if you block a",
    "start": "248640",
    "end": "253920"
  },
  {
    "text": "thread in asp.net that thread will not be able to go ahead and handle some other requests",
    "start": "253920",
    "end": "259979"
  },
  {
    "text": "so we want to avoid that this means that if we do consume asynchronous apis for",
    "start": "259979",
    "end": "265080"
  },
  {
    "text": "example storing something in a database using the HTTP client reading something from a disk you don't want to block that",
    "start": "265080",
    "end": "272280"
  },
  {
    "text": "operation I quite often see developers do dot result on any tasks",
    "start": "272280",
    "end": "277860"
  },
  {
    "text": "sometimes that's okay as long as you can guarantee that the task has completed which can be a little bit tricky to know",
    "start": "277860",
    "end": "285540"
  },
  {
    "text": "now in terms of the the Android application to make this a little bit better go from blocking to non-blocking",
    "start": "285540",
    "end": "290699"
  },
  {
    "text": "ideally I don't just want to block the UI in a different way but at least in this term I tell the user that something",
    "start": "290699",
    "end": "297540"
  },
  {
    "text": "is going on you're less likely to kill the application in this in this case here a",
    "start": "297540",
    "end": "302820"
  },
  {
    "text": "little bit of a better user experience so how do we do this we introduce a",
    "start": "302820",
    "end": "307979"
  },
  {
    "text": "thing called a task the task was introduced to simplify concurrent and",
    "start": "307979",
    "end": "313139"
  },
  {
    "text": "asynchronous code it means that we can do two things which normally are fundamentally different asynchronous",
    "start": "313139",
    "end": "319740"
  },
  {
    "text": "programming is not the same as parallel programming parallel programming is about taking a large problem dividing",
    "start": "319740",
    "end": "326460"
  },
  {
    "text": "that into maybe evening if even chunks and solving that problem as quickly as",
    "start": "326460",
    "end": "331919"
  },
  {
    "text": "possible whereas a synchronous programming is about also doing something in parallel but you expect to",
    "start": "331919",
    "end": "337919"
  },
  {
    "text": "get a result it will tell you when it has some data available for you to process now the task will do that for us and in",
    "start": "337919",
    "end": "345300"
  },
  {
    "text": "fact using task.run it will do quite a lot of things so what it will do it it",
    "start": "345300",
    "end": "350639"
  },
  {
    "text": "will tell our dot net runtime that I have some work that I want to distribute somewhere else",
    "start": "350639",
    "end": "356060"
  },
  {
    "text": "go ahead and put this somewhere else in my in my runtime and just run it on a different thread don't block my current",
    "start": "356060",
    "end": "362699"
  },
  {
    "text": "UI thread now the problem is of course if there are no threads available this is going",
    "start": "362699",
    "end": "368340"
  },
  {
    "text": "to be put on a queue and the.net runtime will take care of all of this for you so you don't have to care too much about",
    "start": "368340",
    "end": "374699"
  },
  {
    "text": "where this is executing or what's going on behind the scenes it helps to understand exactly what's Happening Here",
    "start": "374699",
    "end": "381539"
  },
  {
    "text": "but it's not a requirement but of course we're going to dig into exactly what's going to happen so",
    "start": "381539",
    "end": "387419"
  },
  {
    "text": "what happens is that it's going to find a thread now it doesn't necessarily have to be a threat in terms of now you now",
    "start": "387419",
    "end": "394080"
  },
  {
    "text": "you when you normally start a new thread or when you have an operating system thread it will use a managed thread",
    "start": "394080",
    "end": "400139"
  },
  {
    "text": "these threads can be reused that also means that it might reuse some data",
    "start": "400139",
    "end": "406380"
  },
  {
    "text": "available on that thread to speed things up it won't clear data across the different managed threads that means",
    "start": "406380",
    "end": "413460"
  },
  {
    "text": "that you can leak data across your synchronous operations which can be fine but you shouldn't rely on static data",
    "start": "413460",
    "end": "420300"
  },
  {
    "text": "you might have noticed this if you've ever done asp.net older versions where you can no longer use the HTTP context",
    "start": "420300",
    "end": "427259"
  },
  {
    "text": "which is a static property if you swap between different asynchronous contexts so so the solution to this is to try to",
    "start": "427259",
    "end": "434220"
  },
  {
    "text": "avoid static data because it's unreliable in this case here",
    "start": "434220",
    "end": "439440"
  },
  {
    "text": "what it also allows me to do when I do task.ron this will return an instance of a task that I can subscribe to to tell",
    "start": "439440",
    "end": "446220"
  },
  {
    "text": "me if the work is completed or not which is great I could say run some work",
    "start": "446220",
    "end": "451560"
  },
  {
    "text": "it doesn't really matter how long that takes just let me know when that is completed",
    "start": "451560",
    "end": "457020"
  },
  {
    "text": "now doing task.run on a WPF application or Windows forms application works",
    "start": "457020",
    "end": "462539"
  },
  {
    "text": "really well you won't run into many issues with that but when you do this on for example a mobile the operating",
    "start": "462539",
    "end": "468780"
  },
  {
    "text": "system might say hey you're running way too much in the background without the user giving consent to this so they",
    "start": "468780",
    "end": "475020"
  },
  {
    "text": "might terminate the the application or the thread or you'll run into some really odd issues",
    "start": "475020",
    "end": "480120"
  },
  {
    "text": "and in the case of asp.net if we do task.run that will consume a thread on",
    "start": "480120",
    "end": "486300"
  },
  {
    "text": "the thread pool which could have been used to process another request so effectively if we do task.run you're",
    "start": "486300",
    "end": "493259"
  },
  {
    "text": "going to half the amount of requests that your application can handle which could be a little bit problematic",
    "start": "493259",
    "end": "499860"
  },
  {
    "text": "so with that being said you should never do task.run in asp.net yourself but",
    "start": "499860",
    "end": "504900"
  },
  {
    "text": "rather consume apis that rely on the operating systems implementation of the",
    "start": "504900",
    "end": "510240"
  },
  {
    "text": "asynchronous principles for example I can ask the file system to give me all the contents of a file and",
    "start": "510240",
    "end": "516659"
  },
  {
    "text": "the operating system handles all of that interaction for me and I'm no longer blocking my",
    "start": "516659",
    "end": "521760"
  },
  {
    "text": "application from from processing more requests first there are two different versions",
    "start": "521760",
    "end": "527220"
  },
  {
    "text": "of the task either we have some work that just works or just does something somewhere else and I still want to be",
    "start": "527220",
    "end": "533459"
  },
  {
    "text": "able to know when that is done or the second example here is indicating that I have some operation that's running on a",
    "start": "533459",
    "end": "540420"
  },
  {
    "text": "different thread that will yield some data both of them will allow me to subscribe to when they are completed to",
    "start": "540420",
    "end": "547680"
  },
  {
    "text": "know if they are done or not so let's jump into Visual Studio and have a little bit of a look at an",
    "start": "547680",
    "end": "554399"
  },
  {
    "text": "application I normally do this in WPF because it's easy for everyone to see exactly what's happening",
    "start": "554399",
    "end": "560519"
  },
  {
    "text": "so this is a very simple application I only have a button that I can click which runs a method when I do this the",
    "start": "560519",
    "end": "566940"
  },
  {
    "text": "application is going to freeze up and it's hopefully not going to work because this is doing something on the UI which",
    "start": "566940",
    "end": "573420"
  },
  {
    "text": "it should not after two seconds it relieves my my it's not no longer locking my UI thread and I",
    "start": "573420",
    "end": "580080"
  },
  {
    "text": "can get the result populated in the UI what I normally see people do in this case here and sometimes it works but",
    "start": "580080",
    "end": "586800"
  },
  {
    "text": "they simply wrap this method called in a task.run",
    "start": "586800",
    "end": "591620"
  },
  {
    "text": "what I'm doing now is I'm passing this delegate or I'm passing My Method into a task to run to tell it to run this",
    "start": "592320",
    "end": "597899"
  },
  {
    "text": "method on a separate thread it will go ahead and try to schedule this work somewhere else",
    "start": "597899",
    "end": "604380"
  },
  {
    "text": "which will of course improve the experience of the application I can move everything around and the application is",
    "start": "604380",
    "end": "610620"
  },
  {
    "text": "no longer freezing but I've introduced a bug this is the first problem with introducing a task that you try to wrap",
    "start": "610620",
    "end": "617880"
  },
  {
    "text": "things and just think that it will magically work better and while the user experience was in one way better the",
    "start": "617880",
    "end": "624959"
  },
  {
    "text": "application is is no longer performing as it did before so the problem here if I run this with a",
    "start": "624959",
    "end": "630120"
  },
  {
    "text": "debugger it's going to tell me that you are trying to update the UI from a thread",
    "start": "630120",
    "end": "636000"
  },
  {
    "text": "that does not own that thread which you're not allowed to do so to fix this we're going to revert the",
    "start": "636000",
    "end": "642839"
  },
  {
    "text": "code back to just call this method because this here wasn't really where the problem was the problem is inside this",
    "start": "642839",
    "end": "648300"
  },
  {
    "text": "implementation and I'm doing thread.sleep here I know some developers use thread.sleep",
    "start": "648300",
    "end": "654660"
  },
  {
    "text": "to solve race conditions it's never a good idea this here is to illustrate that I'm",
    "start": "654660",
    "end": "660899"
  },
  {
    "text": "running some heavy computation could have been something else",
    "start": "660899",
    "end": "666000"
  },
  {
    "text": "now what we could do is that I can instead say that okay so how about we just wrap this portion of the code",
    "start": "666000",
    "end": "672240"
  },
  {
    "text": "inside a task.run which now means that I've offloaded this work to somewhere else",
    "start": "672240",
    "end": "679920"
  },
  {
    "text": "and of course if I do this it's immediately going to update the UI but that's not really what I want what I",
    "start": "679920",
    "end": "686579"
  },
  {
    "text": "want is to say that you can upgrade the UI once you enter the method I'm going to start off in a synchronous operation",
    "start": "686579",
    "end": "692220"
  },
  {
    "text": "and then after that is completed I might want to update the UI this is where we",
    "start": "692220",
    "end": "697260"
  },
  {
    "text": "introduce a concept called a continuation task at run returns a task so I could",
    "start": "697260",
    "end": "702660"
  },
  {
    "text": "say run task for example could probably give it a better name but you know naming things is really hard",
    "start": "702660",
    "end": "708839"
  },
  {
    "text": "so now I want to say that all of this code should be only executed once I can",
    "start": "708839",
    "end": "715320"
  },
  {
    "text": "continue from this task I'm then going to say that all right so once run task completes I'm going to continue with",
    "start": "715320",
    "end": "722220"
  },
  {
    "text": "some code this here takes an action of a task which means that it passes the task that",
    "start": "722220",
    "end": "727620"
  },
  {
    "text": "just completed into its Anonymous method I could say that I don't care about the",
    "start": "727620",
    "end": "732839"
  },
  {
    "text": "task and then introduce an anonymous method and we're going to try to move this code",
    "start": "732839",
    "end": "738480"
  },
  {
    "text": "into this block here so now what I've done is to say that",
    "start": "738480",
    "end": "744240"
  },
  {
    "text": "after this heavy work is done I'm going to continue with some other work and when we run this",
    "start": "744240",
    "end": "750839"
  },
  {
    "text": "it's only going to say hello NDC and again I'm going to get an exception and why is that",
    "start": "750839",
    "end": "756720"
  },
  {
    "text": "because the continuation will execute on a different thread it will try to schedule this work ideally it will run",
    "start": "756720",
    "end": "764639"
  },
  {
    "text": "inline where this code executed so that it doesn't have to perform any context",
    "start": "764639",
    "end": "770100"
  },
  {
    "text": "switches because in heavy applications or or applications with a heavy load",
    "start": "770100",
    "end": "775500"
  },
  {
    "text": "switching with between threads can be quite time consuming as well as an expensive operation so it would be",
    "start": "775500",
    "end": "781560"
  },
  {
    "text": "clever if it could just execute this portion of the code right after it performed this this tasks operation",
    "start": "781560",
    "end": "788940"
  },
  {
    "text": "but that also means that I cannot update the UI but it didn't",
    "start": "788940",
    "end": "794220"
  },
  {
    "text": "tell me anything just like before the application didn't crash I didn't get an exception that is because when you have",
    "start": "794220",
    "end": "800760"
  },
  {
    "text": "a task that gets an exception inside of it it's going to capture that it's going to wrap the exception inside the task so",
    "start": "800760",
    "end": "808200"
  },
  {
    "text": "how would we get this we could ask and this is where the the older task",
    "start": "808200",
    "end": "813779"
  },
  {
    "text": "parallel Library I shouldn't say older because I use this a lot still even though we have the async and Away keywords",
    "start": "813779",
    "end": "819959"
  },
  {
    "text": "but continue with also returns a task so I could say that okay I want to know",
    "start": "819959",
    "end": "825600"
  },
  {
    "text": "why this failed so I could say VAR continue task",
    "start": "825600",
    "end": "831120"
  },
  {
    "text": "or continuation is probably better if I can spell that continue",
    "start": "831120",
    "end": "837899"
  },
  {
    "text": "Haitian whatever you get the idea right",
    "start": "837959",
    "end": "844139"
  },
  {
    "text": "see so that word here we go so when C completes I'm going to continue with",
    "start": "844139",
    "end": "849959"
  },
  {
    "text": "something else I'm going to pass the task that just completed the continuation task CT for example and now",
    "start": "849959",
    "end": "857639"
  },
  {
    "text": "I can ask if this is faulted or not so I could now say that if c t dot is",
    "start": "857639",
    "end": "863579"
  },
  {
    "text": "faulted I could then go ahead and do something maybe log something maybe check the",
    "start": "863579",
    "end": "868920"
  },
  {
    "text": "exception because there's also a an exception property here so I could get the exception of the task",
    "start": "868920",
    "end": "874740"
  },
  {
    "text": "that I'm continuing from all right so that would be great if I",
    "start": "874740",
    "end": "879839"
  },
  {
    "text": "can do that I could do some logging here but what if I'm going to try to log but my log",
    "start": "879839",
    "end": "885300"
  },
  {
    "text": "storage doesn't respond and there's an exception this continuation then throws an exception",
    "start": "885300",
    "end": "891480"
  },
  {
    "text": "we'll have to continue and ask for that as well get the idea right this is going to get",
    "start": "891480",
    "end": "897300"
  },
  {
    "text": "messy so we're not going to do this if that fails you can continue as well",
    "start": "897300",
    "end": "903920"
  },
  {
    "text": "so async in a way it will solve this and make it a little bit better and fluent for us but we're going to leave this here so we can see how this is going to",
    "start": "904620",
    "end": "910860"
  },
  {
    "text": "be better what to take from this is that the continuation also executes somewhere else it's going to wrap this in a task",
    "start": "910860",
    "end": "918000"
  },
  {
    "text": "so that you can then ask if this completed or not the the base problem",
    "start": "918000",
    "end": "923040"
  },
  {
    "text": "here is that I'm trying to update the UI and I can fix this quite easily to say",
    "start": "923040",
    "end": "928260"
  },
  {
    "text": "that I want to capture the UI thread or the context that owns the UI thread",
    "start": "928260",
    "end": "934019"
  },
  {
    "text": "there's an object in different types of UI applications such as Maui xamarine",
    "start": "934019",
    "end": "940320"
  },
  {
    "text": "avalonian WPF winforms and whatnot in winforms this synchronization context is",
    "start": "940320",
    "end": "946380"
  },
  {
    "text": "called the dispatcher the dispatcher is a let's call it a way for me to communicate with the UI I can now say",
    "start": "946380",
    "end": "953399"
  },
  {
    "text": "that I want to post some work or invoke the UI rather I'm going to schedule some work to run on my UI",
    "start": "953399",
    "end": "961579"
  },
  {
    "text": "and what I'm doing now is that I'm saying I'm going to run some code somewhere else on a different thread I am then going to talk to the UI to",
    "start": "961620",
    "end": "968880"
  },
  {
    "text": "schedule some work and hopefully after two seconds this application is now working as intended I can move the",
    "start": "968880",
    "end": "975899"
  },
  {
    "text": "window around and after two seconds it's going to update the UI yay however",
    "start": "975899",
    "end": "982019"
  },
  {
    "text": "if you check this into my git repository you're going to fail the code review because this doesn't look very nice it's",
    "start": "982019",
    "end": "988199"
  },
  {
    "text": "not very maintainable even though I've fixed some of my performance issues maintaining this code is is not the best",
    "start": "988199",
    "end": "996660"
  },
  {
    "text": "but there's many things to take away from this one is that the tasks wrap or capture the exceptions or they swallow",
    "start": "996660",
    "end": "1003500"
  },
  {
    "text": "the exceptions or whatever you want to call it you have to validate that the task completed properly",
    "start": "1003500",
    "end": "1008600"
  },
  {
    "text": "and the way that we do that is by either appending a continuation we would also get a uh an exception if",
    "start": "1008600",
    "end": "1016820"
  },
  {
    "text": "we asked for the result if I know so I'll show you this here if I know",
    "start": "1016820",
    "end": "1022339"
  },
  {
    "text": "that this task has completed I could inside the continuation say runtask.result",
    "start": "1022339",
    "end": "1030319"
  },
  {
    "text": "if it returned a result so if the task returns a result I could",
    "start": "1030319",
    "end": "1036260"
  },
  {
    "text": "ask for the result in here and if that task has an exception calling this property will throw it back and you're",
    "start": "1036260",
    "end": "1042740"
  },
  {
    "text": "only ever allowed to use this property inside a continuation or after you have a weighted a task",
    "start": "1042740",
    "end": "1048860"
  },
  {
    "text": "but we're going to get to the await keyword in just a moment so this is the basics of how to use the",
    "start": "1048860",
    "end": "1053900"
  },
  {
    "text": "TPL and the task parallel Library it's not very nice to have to always append these continuations but you can still do",
    "start": "1053900",
    "end": "1061460"
  },
  {
    "text": "this to intercept when a task is done so let's jump over to uh to PowerPoint",
    "start": "1061460",
    "end": "1067880"
  },
  {
    "text": "again and talk about some considerations so one of the things is that we should be really careful about wrapping code in",
    "start": "1067880",
    "end": "1074960"
  },
  {
    "text": "task.1 because as we saw here if I have some UI interactions or something that",
    "start": "1074960",
    "end": "1080299"
  },
  {
    "text": "relies on static data just wrapping that in a task.run might break both my",
    "start": "1080299",
    "end": "1085640"
  },
  {
    "text": "application and some of the logic which is not really good",
    "start": "1085640",
    "end": "1090860"
  },
  {
    "text": "and again I can't reiterate reiterate this enough thread static data is unreliable there's another type called",
    "start": "1090860",
    "end": "1096860"
  },
  {
    "text": "asynclocal that you could use if you want to use static data but it's a specific type used to flow across their",
    "start": "1096860",
    "end": "1104480"
  },
  {
    "text": "synchronous context and we always want to validate our tasks so how do we do that we add a continue",
    "start": "1104480",
    "end": "1111200"
  },
  {
    "text": "with or we introduce the async and Away keywords which is what we're going to do next but before we do that I do want to",
    "start": "1111200",
    "end": "1117919"
  },
  {
    "text": "to mention that there's this extension to the task parallel Library called a parallel extensions this method called",
    "start": "1117919",
    "end": "1124760"
  },
  {
    "text": "parallel 4 is a way for you to distribute work introduce parallel programming so in this case here I'm",
    "start": "1124760",
    "end": "1131360"
  },
  {
    "text": "saying that I want to do some work it's a from 0 to 100 distribute this across",
    "start": "1131360",
    "end": "1137480"
  },
  {
    "text": "all my available threads and cores and whatnot it will ask the.net runtime to do this evenly so if you're running this",
    "start": "1137480",
    "end": "1144740"
  },
  {
    "text": "on a two core machine it's going to run two things at a time on my workstation it's going to run 32 things at a time",
    "start": "1144740",
    "end": "1150380"
  },
  {
    "text": "which is really good but this is a blocking call so as soon as you do parallel.4 it will block the current",
    "start": "1150380",
    "end": "1156200"
  },
  {
    "text": "thread so that it can use all the other available threads to do the work on so",
    "start": "1156200",
    "end": "1161299"
  },
  {
    "text": "we can combine the asynchronous principles and parallel programming by simply wrapping this in a task",
    "start": "1161299",
    "end": "1167240"
  },
  {
    "text": "the problem with this is that you are then consuming a thread to just wait for that work to be done",
    "start": "1167240",
    "end": "1172820"
  },
  {
    "text": "all right so now that we have a little bit of an idea of the task parallel Library we're going to introduce the",
    "start": "1172820",
    "end": "1178580"
  },
  {
    "text": "async innovate keywords which is purely a contextual keyword or two contextual",
    "start": "1178580",
    "end": "1183620"
  },
  {
    "text": "keywords that means that they really don't have a an impact on the IL that is",
    "start": "1183620",
    "end": "1189260"
  },
  {
    "text": "generated by the compiler the compiler is only using Code available also in older versions of c-sharp it's relying",
    "start": "1189260",
    "end": "1196880"
  },
  {
    "text": "on some types in.net such as the task parallel library to be able to context",
    "start": "1196880",
    "end": "1202160"
  },
  {
    "text": "switch between threads to offload work to the correct place and to validate that the tasks are completed",
    "start": "1202160",
    "end": "1208400"
  },
  {
    "text": "so the async network keyword the the whole purpose of this is to hide complexity all of the code that I just",
    "start": "1208400",
    "end": "1214820"
  },
  {
    "text": "wrote with the continue with appending another continue with and so forth you want to get rid of all of that",
    "start": "1214820",
    "end": "1221539"
  },
  {
    "text": "it's also then a way for us to increase the readability but you know hiding complexity making something more",
    "start": "1221539",
    "end": "1227240"
  },
  {
    "text": "readable means it's more error prone so if we don't understand exactly what happens it's gonna get ugly and it's",
    "start": "1227240",
    "end": "1234200"
  },
  {
    "text": "gonna get us into situations where we get bugs so take a look at this example here we",
    "start": "1234200",
    "end": "1241340"
  },
  {
    "text": "have a very simple method it's marked as being async it always returns a task so as soon as you see the async keyword you",
    "start": "1241340",
    "end": "1247640"
  },
  {
    "text": "should always return a task that is a way for you to add validation to this",
    "start": "1247640",
    "end": "1253760"
  },
  {
    "text": "and then I have the await keyword and these two should always be used together it doesn't make sense to have the async",
    "start": "1253760",
    "end": "1260179"
  },
  {
    "text": "keyword without also using a weight for some reason the compiler allows you to",
    "start": "1260179",
    "end": "1265700"
  },
  {
    "text": "there's a reason for that and it's because how the compiler looks at this and how it generates code but really it",
    "start": "1265700",
    "end": "1271520"
  },
  {
    "text": "should have looked at your code and said hey you're not using that so basically here I have a variable",
    "start": "1271520",
    "end": "1276860"
  },
  {
    "text": "declaration I do something asynchronously and say that I want to run some work somewhere and then I don't want to run",
    "start": "1276860",
    "end": "1283700"
  },
  {
    "text": "the the line at the bottom until we have a result the await keyword will do quite a few",
    "start": "1283700",
    "end": "1288980"
  },
  {
    "text": "things it will in produce one of these continuations very much like the continue with method but slightly",
    "start": "1288980",
    "end": "1295400"
  },
  {
    "text": "different it will also make sure that it returns back to the original context",
    "start": "1295400",
    "end": "1300440"
  },
  {
    "text": "it will also validate if there is a success or failure so it will check so that there's no",
    "start": "1300440",
    "end": "1306799"
  },
  {
    "text": "exceptions so if we use async and await all the way we won't we won't swallow any exceptions",
    "start": "1306799",
    "end": "1313159"
  },
  {
    "text": "at least that's the hope and it also this is a little bit of a tricky one it also returns to whoever is",
    "start": "1313159",
    "end": "1318679"
  },
  {
    "text": "calling this method as soon as you have the await keyword do you see the await keyword that's going to return to every",
    "start": "1318679",
    "end": "1324320"
  },
  {
    "text": "caller method so that it can wait for it we'll take a look at an example of that",
    "start": "1324320",
    "end": "1329539"
  },
  {
    "text": "so what does this mean for asp.net and the thread pool that's used in asp.net",
    "start": "1329539",
    "end": "1335659"
  },
  {
    "text": "if we use async and await all the way through our asp.net core apis it will be",
    "start": "1335659",
    "end": "1341960"
  },
  {
    "text": "a lot more performant because what it does is that even though you have a request that's waiting for a response",
    "start": "1341960",
    "end": "1348140"
  },
  {
    "text": "that request is just tied into IIs or Tiding to the web server so you can still go ahead and ask other web",
    "start": "1348140",
    "end": "1354860"
  },
  {
    "text": "services or the disk for some file and be able to handle more requests at the",
    "start": "1354860",
    "end": "1360020"
  },
  {
    "text": "time you can release the thread back onto the thread pool so that asp.net can go ahead and handle some more things",
    "start": "1360020",
    "end": "1366860"
  },
  {
    "text": "so by introducing async and await all the way through our application it's going to be better at scaling and much",
    "start": "1366860",
    "end": "1373460"
  },
  {
    "text": "more performance so then how do we validate a task I mentioned that we can introduce the",
    "start": "1373460",
    "end": "1378799"
  },
  {
    "text": "await keyword and we can also use the the continue with method all right and we should always use these",
    "start": "1378799",
    "end": "1385159"
  },
  {
    "text": "together let's go into Visual Studio again and I'm going to try and change this application into using the async and",
    "start": "1385159",
    "end": "1391580"
  },
  {
    "text": "avoid keywords instead I don't particularly like this code that I have at the bottom here for some",
    "start": "1391580",
    "end": "1397400"
  },
  {
    "text": "obvious reasons so instead instead of having to add this entire chain of of",
    "start": "1397400",
    "end": "1402679"
  },
  {
    "text": "checks I could only say oh wait C for example this will now validate that there's no",
    "start": "1402679",
    "end": "1409400"
  },
  {
    "text": "exceptions and if this task returns some text I I no longer have to um",
    "start": "1409400",
    "end": "1416659"
  },
  {
    "text": "I I can get get that as well so let's change this up a little bit here too in fact return some text so I",
    "start": "1416659",
    "end": "1423740"
  },
  {
    "text": "have this this continuation I can still combine these Concepts together I have a task that I'm running after that task is",
    "start": "1423740",
    "end": "1430700"
  },
  {
    "text": "done I might want to manipulate some data or do something so instead I'm going to return some data",
    "start": "1430700",
    "end": "1437539"
  },
  {
    "text": "so now this here turned into a task of a string I'm gonna grab this",
    "start": "1437539",
    "end": "1444080"
  },
  {
    "text": "and what I want to do is that I want to get the result out of this operation",
    "start": "1444080",
    "end": "1451400"
  },
  {
    "text": "so you can even spell result and now this is going to give me the string so not only is it going to validate that",
    "start": "1451400",
    "end": "1456559"
  },
  {
    "text": "the task completed properly that there was no exceptions it's also going to give me the result",
    "start": "1456559",
    "end": "1462440"
  },
  {
    "text": "so then I no longer have to use the dispatcher because what's also going to happen here",
    "start": "1462440",
    "end": "1468380"
  },
  {
    "text": "when it sees the await keyword it's going to make sure that all the code after is going to be executing on the",
    "start": "1468380",
    "end": "1475820"
  },
  {
    "text": "original thread which is quite awesome so if we look at this code from top to",
    "start": "1475820",
    "end": "1482419"
  },
  {
    "text": "bottom there's one more thing we're going to fix in here but basically we're going to",
    "start": "1482419",
    "end": "1487460"
  },
  {
    "text": "come into this method we're going to be on the UI thread and we can see here that task.run is",
    "start": "1487460",
    "end": "1494240"
  },
  {
    "text": "going to execute some code elsewhere so therefore this here that line is going",
    "start": "1494240",
    "end": "1499520"
  },
  {
    "text": "to be thread X and then this is also going to be",
    "start": "1499520",
    "end": "1505039"
  },
  {
    "text": "running somewhere else we could say that the the continuation is running on thread y we don't know it could be in",
    "start": "1505039",
    "end": "1510080"
  },
  {
    "text": "line with red X or thread white it doesn't really matter but as soon as we get back here we're going to be back on",
    "start": "1510080",
    "end": "1516500"
  },
  {
    "text": "the UI thread and this is the power of whatever's happening inside this generated State",
    "start": "1516500",
    "end": "1523039"
  },
  {
    "text": "machine and all the generated code that's this is doing internally so there's quite a lot of things going",
    "start": "1523039",
    "end": "1528380"
  },
  {
    "text": "on here and also things that could go wrong all right so I want to show you another",
    "start": "1528380",
    "end": "1533900"
  },
  {
    "text": "another thing that's really important normally I said that wrapping wrapping calls inside a task that run is a bad",
    "start": "1533900",
    "end": "1540440"
  },
  {
    "text": "idea what's better is to use the available asynchronous apis",
    "start": "1540440",
    "end": "1545720"
  },
  {
    "text": "in our case instead of doing thread.sleep there's a task.delay",
    "start": "1545720",
    "end": "1552140"
  },
  {
    "text": "if you have a file dot read all lines there's a file.read alllines async so",
    "start": "1552140",
    "end": "1557720"
  },
  {
    "text": "you want to refactor your code instead of just wrapping things in the task.run refactor the code make sure that you use",
    "start": "1557720",
    "end": "1564620"
  },
  {
    "text": "the appropriate asynchronous apis so now with this set here",
    "start": "1564620",
    "end": "1571120"
  },
  {
    "text": "what we can do is that we are retrieving the result we are having have some delay I'm going to put some break points in",
    "start": "1571120",
    "end": "1577340"
  },
  {
    "text": "here so that you can see the flow of how this application is going to work",
    "start": "1577340",
    "end": "1582580"
  },
  {
    "text": "so the first thing that's going to happen I'm going to run this I'm going to click the button",
    "start": "1583220",
    "end": "1588559"
  },
  {
    "text": "it's going to call this this method it's going to to update my UI it is then",
    "start": "1588559",
    "end": "1594500"
  },
  {
    "text": "after two seconds it's going to come back into this application again so let me run this a little bit slower or",
    "start": "1594500",
    "end": "1599600"
  },
  {
    "text": "actually increase this to 10 seconds talk too much that's why it's",
    "start": "1599600",
    "end": "1606380"
  },
  {
    "text": "there we go after 10 seconds we're going to come back and it's going to run the code after this I can move my UI around I can do some other work and then after",
    "start": "1606380",
    "end": "1613580"
  },
  {
    "text": "all of those all that delay is done it's going to come back and run the code exactly where we took off",
    "start": "1613580",
    "end": "1619820"
  },
  {
    "text": "which is why the async and Away keywords are so powerful now if we happen so we don't have to use",
    "start": "1619820",
    "end": "1626419"
  },
  {
    "text": "the continue with this is just a way to show you that you can return data out of that as well and that would give you a",
    "start": "1626419",
    "end": "1631940"
  },
  {
    "text": "task of a generic type so of course I want to show you this as well that if we now have this",
    "start": "1631940",
    "end": "1638480"
  },
  {
    "text": "asynchronous method this was also have to be in async task because I want to",
    "start": "1638480",
    "end": "1644840"
  },
  {
    "text": "say that when you click the button you have to validate that the operation that you are running is also appropriate that",
    "start": "1644840",
    "end": "1651440"
  },
  {
    "text": "is also didn't have any problems again we have to add the await keyword",
    "start": "1651440",
    "end": "1656779"
  },
  {
    "text": "this would then have to be marked as async so a little bit of an interesting approach here would be if we have some",
    "start": "1656779",
    "end": "1664100"
  },
  {
    "text": "code that updates the UI let's say that I'm going to say starting",
    "start": "1664100",
    "end": "1670640"
  },
  {
    "text": "and then at the end we're going to say that it's completing",
    "start": "1670940",
    "end": "1675760"
  },
  {
    "text": "you'll notice that if I put a breakpoint in here and here I'm going to decrease this to five seconds instead",
    "start": "1677900",
    "end": "1685240"
  },
  {
    "text": "I'm going to click run starting I'm going to go into this method",
    "start": "1687500",
    "end": "1692720"
  },
  {
    "text": "it's going to release the the the control back to the UI and then after five seconds we're going to be back",
    "start": "1692720",
    "end": "1698120"
  },
  {
    "text": "inside this method and afterwards we're going to run the code after their weight inside our run click what's interesting",
    "start": "1698120",
    "end": "1705380"
  },
  {
    "text": "is if I capture this as a task instead",
    "start": "1705380",
    "end": "1709720"
  },
  {
    "text": "and update the UI and then add this equator at the bottom here",
    "start": "1711140",
    "end": "1717380"
  },
  {
    "text": "what's going to happen I said this briefly that it's going to return back to whoever called the method we're going",
    "start": "1717380",
    "end": "1722960"
  },
  {
    "text": "to go into do something run some code it's going to take five seconds and then it's going to immediately return back to",
    "start": "1722960",
    "end": "1728240"
  },
  {
    "text": "this click event Taylor to run some code so you can run this code as long as there's no await keyword it's just going",
    "start": "1728240",
    "end": "1734419"
  },
  {
    "text": "to continue the execution all right and then",
    "start": "1734419",
    "end": "1742100"
  },
  {
    "text": "I want to show you this as well what happens if we actually throw an exception if we throw an exception",
    "start": "1742100",
    "end": "1750140"
  },
  {
    "text": "actually I'm going to do down here instead if we're inside the continuation and the continuation throws an exception",
    "start": "1750140",
    "end": "1758320"
  },
  {
    "text": "we're going to be able to capture that here",
    "start": "1758840",
    "end": "1763059"
  },
  {
    "text": "so do this try",
    "start": "1763940",
    "end": "1768039"
  },
  {
    "text": "I'm going to catch the exception let's do some Pokemon programming catch them all",
    "start": "1769039",
    "end": "1774700"
  },
  {
    "text": "I keep it a break point in here of course",
    "start": "1775220",
    "end": "1779020"
  },
  {
    "text": "I didn't like that obviously didn't like that there we go",
    "start": "1781760",
    "end": "1789200"
  },
  {
    "text": "so now that my continuation throws an exception we'll be able to capture that so after",
    "start": "1789200",
    "end": "1794899"
  },
  {
    "text": "the two seconds are up it's going to continue with something that throws an exception which I'm awaiting so",
    "start": "1794899",
    "end": "1800120"
  },
  {
    "text": "hopefully I'll be able to capture that exception and get that inside this this tri-cat block now I'm rethrowing this",
    "start": "1800120",
    "end": "1807200"
  },
  {
    "text": "back to ever calls this method and as long as they are also as long as they are also awaiting this",
    "start": "1807200",
    "end": "1814520"
  },
  {
    "text": "we would capture this exception but what happens if we are simply looking at this method",
    "start": "1814520",
    "end": "1820460"
  },
  {
    "text": "saying hey I I don't care about awaiting this sometimes I see developers doing something like this",
    "start": "1820460",
    "end": "1826700"
  },
  {
    "text": "I just want to call this method and I'm going to discard the task that we are executing the problem here is that if I",
    "start": "1826700",
    "end": "1833539"
  },
  {
    "text": "run this without the debugger attached and click run after five seconds",
    "start": "1833539",
    "end": "1841159"
  },
  {
    "text": "let's see what happens nothing happens because I forgot to await this so I did",
    "start": "1841159",
    "end": "1846860"
  },
  {
    "text": "a fire and forget I got an exception inside the task without the await keyword",
    "start": "1846860",
    "end": "1853700"
  },
  {
    "text": "I haven't validated that it's executed properly so it's really important that we always",
    "start": "1853700",
    "end": "1859279"
  },
  {
    "text": "do async and awaits together and that we await them properly because this was",
    "start": "1859279",
    "end": "1864320"
  },
  {
    "text": "marked as being an async task it would capture this exception and put it internally in that task",
    "start": "1864320",
    "end": "1871658"
  },
  {
    "text": "so what are really the implications of adding the async keyword there's a lot that happens to be able to control this",
    "start": "1875120",
    "end": "1880940"
  },
  {
    "text": "to find the the thread you're going back to to jump between these different contexts",
    "start": "1880940",
    "end": "1886520"
  },
  {
    "text": "this here introduces a state machine and a state machine is simply like a child in the back seat of the car asking you",
    "start": "1886520",
    "end": "1893120"
  },
  {
    "text": "if you're there yet can be quite annoying but it works doesn't really work like this it's not a",
    "start": "1893120",
    "end": "1900020"
  },
  {
    "text": "wild true Loop that keeps nagging you if you're done what it's done doing is much more clever",
    "start": "1900020",
    "end": "1905179"
  },
  {
    "text": "so if it figures out that your work is not done it's going to schedule its own",
    "start": "1905179",
    "end": "1910220"
  },
  {
    "text": "code to execute when that operation is done so it's doing a lot of heavy lifting",
    "start": "1910220",
    "end": "1916039"
  },
  {
    "text": "internally and the stake machine is what handles the potential results or potential errors and make sure that",
    "start": "1916039",
    "end": "1921980"
  },
  {
    "text": "they're set on the correct place or communicate it back to whoever's using the asynchronous apis",
    "start": "1921980",
    "end": "1928279"
  },
  {
    "text": "it also executes all the code after the await keyword",
    "start": "1928279",
    "end": "1933100"
  },
  {
    "text": "so the async keyword just to reiterate it generates a state machine but it also what you'll notice soon is that it moves",
    "start": "1933320",
    "end": "1939740"
  },
  {
    "text": "all of your code inside your method body into somewhere else now that doesn't necessarily sound like",
    "start": "1939740",
    "end": "1946399"
  },
  {
    "text": "a bad idea but if you don't understand exactly what's happening sometimes when you look at a stack Trace especially in",
    "start": "1946399",
    "end": "1952760"
  },
  {
    "text": "older versions of c-sharpon.net it can be quite confusing to understand exactly what's happening",
    "start": "1952760",
    "end": "1959120"
  },
  {
    "text": "again if we have this very simple method that's not doing a lot it just marks async task it's declaring a variable it",
    "start": "1959120",
    "end": "1967100"
  },
  {
    "text": "has a task at delay which is just representing in a synchronous operation and then does something afterwards when",
    "start": "1967100",
    "end": "1972860"
  },
  {
    "text": "we compile this the code is no longer going to look anything like what we had earlier this",
    "start": "1972860",
    "end": "1978799"
  },
  {
    "text": "has now replaced all of the code inside our method moved it into a generated",
    "start": "1978799",
    "end": "1983840"
  },
  {
    "text": "class and this isn't always going to be a problem but as you'll see here at the",
    "start": "1983840",
    "end": "1989779"
  },
  {
    "text": "bottom this is what Returns the task now if if I just go back here you'll see",
    "start": "1989779",
    "end": "1994820"
  },
  {
    "text": "that this is marked async task when I compile it there's no longer an async keyword because the IL or or CLI doesn't",
    "start": "1994820",
    "end": "2002440"
  },
  {
    "text": "know anything about the async keyword it knows about tasks but it doesn't know anything about the async keyword",
    "start": "2002440",
    "end": "2008799"
  },
  {
    "text": "but what it will do and that's why you don't have to return a task manually the state machine will have a task that",
    "start": "2008799",
    "end": "2015100"
  },
  {
    "text": "represents the work that's going on and if there's a result available if there's any exceptions cancellations and so",
    "start": "2015100",
    "end": "2020980"
  },
  {
    "text": "forth so that's what what is returning automatically here if we drill into the state machine",
    "start": "2020980",
    "end": "2027220"
  },
  {
    "text": "that's compiled we can see that there's a little bit of code that we might recognize this is just inside a little",
    "start": "2027220",
    "end": "2034240"
  },
  {
    "text": "bit of the state machine we're not going to spend too much time looking at this here I love looking in the state machine",
    "start": "2034240",
    "end": "2039820"
  },
  {
    "text": "but that's just me because I'm a little bit weird but we have the variable declaration",
    "start": "2039820",
    "end": "2045519"
  },
  {
    "text": "we have the task delay which could be our asynchronous operation it's getting the a waiter for this to",
    "start": "2045519",
    "end": "2052118"
  },
  {
    "text": "check if it's completed or not if it's not completed it's going to return out of this state machine in this check and",
    "start": "2052119",
    "end": "2058898"
  },
  {
    "text": "then the outer thing that executed the state machine will schedule this work on the tasks continuation",
    "start": "2058899",
    "end": "2065560"
  },
  {
    "text": "so it's using the task parallel library and doing some very clever things internally and then",
    "start": "2065560",
    "end": "2072220"
  },
  {
    "text": "all of this code here inside the state machine is being executed on your UI thread or the main thread or the calling",
    "start": "2072220",
    "end": "2078520"
  },
  {
    "text": "thread depends on where you call this from that is why the final portion of this code will be then executed on the",
    "start": "2078520",
    "end": "2085118"
  },
  {
    "text": "UI thread which is quite amazing so with that being said I've all I've said now that",
    "start": "2085119",
    "end": "2091060"
  },
  {
    "text": "we have to use async task but what happens if we use async void",
    "start": "2091060",
    "end": "2097020"
  },
  {
    "text": "I would be much more sad than than just dropping an ice cream so is it really that bad obviously otherwise I wouldn't",
    "start": "2097900",
    "end": "2104440"
  },
  {
    "text": "have brought it up the question is what happens internally if we Mark something as async void",
    "start": "2104440",
    "end": "2110980"
  },
  {
    "text": "this is here the only difference here between the other code sample is that I don't have task as a return type I",
    "start": "2110980",
    "end": "2118000"
  },
  {
    "text": "change it to void My Method doesn't have to do anything other than just changing the return type to task or void but if I",
    "start": "2118000",
    "end": "2125260"
  },
  {
    "text": "look at the decompiled code there's no way for me to track the internal State of the State machine this",
    "start": "2125260",
    "end": "2131380"
  },
  {
    "text": "is no longer returning anything from this generated code and that's problematic because how would I know if",
    "start": "2131380",
    "end": "2138280"
  },
  {
    "text": "there's an exception how would I know if it completed how would I know if there's something",
    "start": "2138280",
    "end": "2143320"
  },
  {
    "text": "that didn't work as situative I say this sometimes like if I ever see a car written in C sharp that's using",
    "start": "2143320",
    "end": "2149680"
  },
  {
    "text": "async void I'm not driving that so how do we fix this",
    "start": "2149680",
    "end": "2155380"
  },
  {
    "text": "it's quite simple and subtle we change void to task and everything should just",
    "start": "2155380",
    "end": "2160780"
  },
  {
    "text": "work question is will it let's jump over to visual studio again",
    "start": "2160780",
    "end": "2167140"
  },
  {
    "text": "and this here I know that if we await this it's gonna throw an exception",
    "start": "2167140",
    "end": "2173099"
  },
  {
    "text": "because if we are wrapping this in a try catch",
    "start": "2173099",
    "end": "2178560"
  },
  {
    "text": "like this here if I wrap it on try catch I know that",
    "start": "2179200",
    "end": "2185680"
  },
  {
    "text": "it's going to catch an exception because we threw one earlier I can then set a breakpoint in here",
    "start": "2185680",
    "end": "2191859"
  },
  {
    "text": "if I run this with a debugger attached I'm going to remove some of the breakpoints because they're a little bit",
    "start": "2191859",
    "end": "2197560"
  },
  {
    "text": "unnecessary for now am I still running the application doesn't like that",
    "start": "2197560",
    "end": "2202660"
  },
  {
    "text": "here we go click run and after a little while",
    "start": "2202660",
    "end": "2208420"
  },
  {
    "text": "I think there's still going to be an exception here we go can capture this it's going to rethrow",
    "start": "2208420",
    "end": "2214180"
  },
  {
    "text": "it and whoever's awaiting that call is now capable of capturing this which is great",
    "start": "2214180",
    "end": "2220839"
  },
  {
    "text": "but the problem is what happens if I cannot await this I know that do",
    "start": "2220839",
    "end": "2226480"
  },
  {
    "text": "something is in reality do something async but um",
    "start": "2226480",
    "end": "2232420"
  },
  {
    "text": "if it's async void the consumer of this method has no idea that this is running something else",
    "start": "2232420",
    "end": "2238900"
  },
  {
    "text": "we're running semi-synchronous code except for the naming Convention of the method so what happens now",
    "start": "2238900",
    "end": "2245980"
  },
  {
    "text": "I'm going to try catch this like it's similar to before I'm going to run the application without",
    "start": "2245980",
    "end": "2251140"
  },
  {
    "text": "the debugger attached I know that this is still going to throw an exception I'm going to try and move this around and",
    "start": "2251140",
    "end": "2256300"
  },
  {
    "text": "after five seconds the application crashes so for some reason",
    "start": "2256300",
    "end": "2262780"
  },
  {
    "text": "I was not able to capture this exception the problem here is that if we just look",
    "start": "2262780",
    "end": "2270940"
  },
  {
    "text": "at the code from top to bottom and think about what's going on here I'm going to run do something",
    "start": "2270940",
    "end": "2277420"
  },
  {
    "text": "this here is an asynchronous method right it has an await keyword somewhere in here here we go Gotta Wait here that",
    "start": "2277420",
    "end": "2284740"
  },
  {
    "text": "means it's going to return back to whoever is calling this method right",
    "start": "2284740",
    "end": "2289680"
  },
  {
    "text": "which would be the next line in our click event handler so we've already exited the try catch",
    "start": "2289839",
    "end": "2297520"
  },
  {
    "text": "block when that asynchronous operation is done which means I don't I haven't wrapped anything in a try catch block",
    "start": "2297520",
    "end": "2303700"
  },
  {
    "text": "because that asynchronous operation is running somewhere else so I guess the the designers of this",
    "start": "2303700",
    "end": "2310420"
  },
  {
    "text": "language feature figured that well if you cannot add a try catch block around this method because because of the",
    "start": "2310420",
    "end": "2316480"
  },
  {
    "text": "internal implementations the best thing that we can do is just kill the application",
    "start": "2316480",
    "end": "2322680"
  },
  {
    "text": "don't know if I agree it would have been nice to have any way from recovering from this but there's not",
    "start": "2323020",
    "end": "2329440"
  },
  {
    "text": "and I guess the the best approach here would have been to not mark this as async void",
    "start": "2329440",
    "end": "2335619"
  },
  {
    "text": "because there's more problems with async void I have no way of tracking the work I",
    "start": "2335619",
    "end": "2341859"
  },
  {
    "text": "have no way of ensuring that it completed successfully I can't capture any exceptions",
    "start": "2341859",
    "end": "2348280"
  },
  {
    "text": "but with that being said it's quite confusing that my click event handler has to be async void",
    "start": "2348280",
    "end": "2353980"
  },
  {
    "text": "this is because delegates that require it such as click event handlers you can't really change this to async task",
    "start": "2353980",
    "end": "2359859"
  },
  {
    "text": "because then it doesn't correspond with the delegate so they have to also support async void but it's solely",
    "start": "2359859",
    "end": "2366700"
  },
  {
    "text": "purpose is for event handlers and all of this is similar in other",
    "start": "2366700",
    "end": "2372040"
  },
  {
    "text": "types of applications as well not just WPF so what's the fix to this how do we make",
    "start": "2372040",
    "end": "2378220"
  },
  {
    "text": "sure that our applications don't just crash when we have async void it's a very simple fix",
    "start": "2378220",
    "end": "2384700"
  },
  {
    "text": "don't write code that cause exceptions easier said than done right",
    "start": "2384700",
    "end": "2391300"
  },
  {
    "text": "all right so another problem when we come when we talk about asynchronous programming is",
    "start": "2391300",
    "end": "2397540"
  },
  {
    "text": "often that we we reach places where we cannot recover from such as deadlocks a",
    "start": "2397540",
    "end": "2403240"
  },
  {
    "text": "deadlock is a pretty bad experience it means that the application is no longer responding a lot of cases the operating",
    "start": "2403240",
    "end": "2409300"
  },
  {
    "text": "system doesn't even know that it's not responding anymore so you can't even kill the application without going into",
    "start": "2409300",
    "end": "2414579"
  },
  {
    "text": "the task manager a little bit problematic I have an example here that looks complex but if",
    "start": "2414579",
    "end": "2421300"
  },
  {
    "text": "we if we pull it apart and talk about the different pieces here it's really not that very complex I have some code",
    "start": "2421300",
    "end": "2427960"
  },
  {
    "text": "that runs asynchronously inside the continuation of that I want to communicate with the UI",
    "start": "2427960",
    "end": "2434859"
  },
  {
    "text": "but I'm going to block the UI call wait or call Dot result this here will cause a Deadlock",
    "start": "2434859",
    "end": "2442300"
  },
  {
    "text": "now this looks very complex but I promise you that this happens very often and this is also a problem as I",
    "start": "2442300",
    "end": "2449020"
  },
  {
    "text": "mentioned earlier most of this is also affected in in WPF winforms asp.net so",
    "start": "2449020",
    "end": "2455140"
  },
  {
    "text": "no matter which type of framework you're using or type of application you can reach a Deadlock which is not very good because if you",
    "start": "2455140",
    "end": "2461740"
  },
  {
    "text": "keep deadlocking in asp.net eventually you're going to run out of threads to respond to your resources or your",
    "start": "2461740",
    "end": "2468640"
  },
  {
    "text": "requests and then what many people do as I see it they just scale up their application and",
    "start": "2468640",
    "end": "2475300"
  },
  {
    "text": "just get more and more and more expensive it's better to not block now this here looks complex as I've said a few times",
    "start": "2475300",
    "end": "2481839"
  },
  {
    "text": "now A more interesting way of do performing a deadlock is to apply dot",
    "start": "2481839",
    "end": "2487540"
  },
  {
    "text": "weight to an asynchronous operation so let's uh let's do this let's have a",
    "start": "2487540",
    "end": "2493420"
  },
  {
    "text": "look at how to to perform this really bad experience I'm going to clear out this this method a little bit it's",
    "start": "2493420",
    "end": "2499180"
  },
  {
    "text": "getting a little bit noisy so instead what I'm going to do here this is called this is now marked as async task I want",
    "start": "2499180",
    "end": "2506800"
  },
  {
    "text": "to do await task.delay and I want to dla for two seconds after which I want to do",
    "start": "2506800",
    "end": "2511839"
  },
  {
    "text": "debug dot text which is something in my UI now if I call this method",
    "start": "2511839",
    "end": "2519640"
  },
  {
    "text": "and block the operation or block whatever this is doing actually I'm going to copy this as well",
    "start": "2519640",
    "end": "2526540"
  },
  {
    "text": "here we go if I call do something do something",
    "start": "2526540",
    "end": "2532420"
  },
  {
    "text": "and then I wanted to wait I want to force this to wait because I don't want to bother making my",
    "start": "2532420",
    "end": "2538660"
  },
  {
    "text": "entire application asynchronous the problem here is that when I create",
    "start": "2538660",
    "end": "2543940"
  },
  {
    "text": "do something this generates a state machine the state machine runs on the UI",
    "start": "2543940",
    "end": "2549339"
  },
  {
    "text": "that means that surely enough the first line is going to execute then it's going to run on asynchronous operation it",
    "start": "2549339",
    "end": "2555339"
  },
  {
    "text": "could be an HTTP call right we all know that by now when that is done",
    "start": "2555339",
    "end": "2561339"
  },
  {
    "text": "the rest of the state machine needs to execute on the UI thread it needs to come back to the original thread but how",
    "start": "2561339",
    "end": "2568180"
  },
  {
    "text": "can this line execute if we are blocking the UI from more execution therefore we have a Deadlock",
    "start": "2568180",
    "end": "2576359"
  },
  {
    "text": "if we really want to to introduce blocking code I've got you there's a way",
    "start": "2576579",
    "end": "2582040"
  },
  {
    "text": "to do this as well or we can do is that we can we can wrap the call",
    "start": "2582040",
    "end": "2587859"
  },
  {
    "text": "to do something in a new task and block the UI",
    "start": "2587859",
    "end": "2593680"
  },
  {
    "text": "so why will this work there's going to be more bugs in here but we're going to fix that for now this",
    "start": "2593680",
    "end": "2599619"
  },
  {
    "text": "here will solve one problem it allows me to block this to introduce synchronous code",
    "start": "2599619",
    "end": "2604660"
  },
  {
    "text": "don't repeat that I said that this is a good idea so what actually happens now is that we",
    "start": "2604660",
    "end": "2610060"
  },
  {
    "text": "move the state machine of do something to a different thread I'm going to block the UI but since the thread that owns",
    "start": "2610060",
    "end": "2617619"
  },
  {
    "text": "the state machine is not blocked it can say that it's done and the weight operation will then also know that the",
    "start": "2617619",
    "end": "2624819"
  },
  {
    "text": "state machine is done and then we can come back and execute whatever's next a better approach is of course",
    "start": "2624819",
    "end": "2631660"
  },
  {
    "text": "to do a weight to do something much better",
    "start": "2631660",
    "end": "2638520"
  },
  {
    "text": "so I guess the most important part here is to never block anything the same goes for DOT result",
    "start": "2639220",
    "end": "2644800"
  },
  {
    "text": "don't do that So to avoid Deadlocks what we want to do is that we want to avoid result weight",
    "start": "2644800",
    "end": "2651280"
  },
  {
    "text": "we do not want to confuse using weight all with weight any or when when all",
    "start": "2651280",
    "end": "2657460"
  },
  {
    "text": "because this is also the same thing as blocking which is problematic",
    "start": "2657460",
    "end": "2662520"
  },
  {
    "text": "a little bit more of an advanced scenario we don't want to share locks",
    "start": "2662520",
    "end": "2667599"
  },
  {
    "text": "basically or have nested locks because that's also a very easy way to get a Deadlock",
    "start": "2667599",
    "end": "2673599"
  },
  {
    "text": "now there's one thing that I do also want to say here that we can avoid introducing unnecessary amounts of State",
    "start": "2673599",
    "end": "2679660"
  },
  {
    "text": "machines because this is code that's executing somewhere and it's a little bit unnecessary to introduce code if we",
    "start": "2679660",
    "end": "2685720"
  },
  {
    "text": "don't need to there's complexity that we don't need some others might say different but look",
    "start": "2685720",
    "end": "2692440"
  },
  {
    "text": "at this code snippet here for example I have a method called run async this is calling run internal async and again",
    "start": "2692440",
    "end": "2699160"
  },
  {
    "text": "naming methods is not my best thing that's not what I do it's simply a chain of asynchronous",
    "start": "2699160",
    "end": "2705760"
  },
  {
    "text": "operations the problem here is that there's nothing happening inside the continuations of",
    "start": "2705760",
    "end": "2711940"
  },
  {
    "text": "these different methods and I'd like to say that if there's nothing inside the continuation you",
    "start": "2711940",
    "end": "2718420"
  },
  {
    "text": "might not actually have to await that I know that someone has probably read",
    "start": "2718420",
    "end": "2724660"
  },
  {
    "text": "David Fowler's best practices of asynchronous programming where it says that you should always await everything",
    "start": "2724660",
    "end": "2730200"
  },
  {
    "text": "which is true because it's it's the best way to always ensure that you don't run into any problems",
    "start": "2730200",
    "end": "2736480"
  },
  {
    "text": "but for more advanced scenarios and where you want to have really high performance it might be a bad idea to",
    "start": "2736480",
    "end": "2742780"
  },
  {
    "text": "always introduce async and await if you don't need to but then someone is also going to say",
    "start": "2742780",
    "end": "2748240"
  },
  {
    "text": "I've heard that you need to do async all the way but that doesn't mean that we can't avoid introducing unnecessary",
    "start": "2748240",
    "end": "2753760"
  },
  {
    "text": "async methods I see people always appending the async",
    "start": "2753760",
    "end": "2759160"
  },
  {
    "text": "keyword when there's a task return from a method you don't have to just because you see the task you don't have to make",
    "start": "2759160",
    "end": "2765220"
  },
  {
    "text": "it async but you should always await everything at the top level",
    "start": "2765220",
    "end": "2771400"
  },
  {
    "text": "so what does that actually mean let's have a look at some of the code that I've written here",
    "start": "2771400",
    "end": "2777520"
  },
  {
    "text": "I've already prepared a little bit of a solution that's going to let us to experiment with this so",
    "start": "2777520",
    "end": "2785200"
  },
  {
    "text": "this here is a very simple application main method which can be async now you start a new program run async call some",
    "start": "2785200",
    "end": "2792819"
  },
  {
    "text": "internal thing has a con continue with to it and it's just a normal simple chain of",
    "start": "2792819",
    "end": "2798700"
  },
  {
    "text": "asynchronous operations now the the final portion here is actually starting two-way sequence",
    "start": "2798700",
    "end": "2804819"
  },
  {
    "text": "operations and I can improve this since they are both independent of each other like ideally I could say that I want to",
    "start": "2804819",
    "end": "2812500"
  },
  {
    "text": "await task dot when all instead which lets me now start these operations",
    "start": "2812500",
    "end": "2818200"
  },
  {
    "text": "at the same time so that's a little bit of a performance Improvement if it's okay to do that",
    "start": "2818200",
    "end": "2823480"
  },
  {
    "text": "sometimes you want to have to awaits that's totally fine as well but honestly if I'm not doing anything",
    "start": "2823480",
    "end": "2830020"
  },
  {
    "text": "inside my continuation down here and this here doesn't require me to come back to a certain thread it doesn't",
    "start": "2830020",
    "end": "2836319"
  },
  {
    "text": "require me to not be disposed if I remove the async keyword and simply",
    "start": "2836319",
    "end": "2842319"
  },
  {
    "text": "return this the contract or the method signature is going to be the same",
    "start": "2842319",
    "end": "2848260"
  },
  {
    "text": "so as soon as you create a task that run for example if you do that in WPF or win forms or console apps you don't always",
    "start": "2848260",
    "end": "2855280"
  },
  {
    "text": "have to await it in the same method that is only true for things like HTTP",
    "start": "2855280",
    "end": "2860560"
  },
  {
    "text": "client or database operations there is also a little gotcha here this",
    "start": "2860560",
    "end": "2867400"
  },
  {
    "text": "might mess up your stack Trace but honestly the stack Trace with async",
    "start": "2867400",
    "end": "2872500"
  },
  {
    "text": "and await is already a little bit messed up so it might actually not make a huge difference it depends so I could go",
    "start": "2872500",
    "end": "2879579"
  },
  {
    "text": "ahead and refactor my entire application to remove async and awaits",
    "start": "2879579",
    "end": "2885940"
  },
  {
    "text": "and to return this I could even do that up here where I'm appending a continuation so what this is",
    "start": "2885940",
    "end": "2893319"
  },
  {
    "text": "doing is that I'm running my internal method which I'm then appending a continuation to that means that the",
    "start": "2893319",
    "end": "2899200"
  },
  {
    "text": "tasks that are returned from this method is going to be the last task added to this chain",
    "start": "2899200",
    "end": "2905020"
  },
  {
    "text": "it's going to be only executing then once all of the tasks are completed so",
    "start": "2905020",
    "end": "2910839"
  },
  {
    "text": "this is a small Improvement to the generated code but it's only good in the",
    "start": "2910839",
    "end": "2916780"
  },
  {
    "text": "scenarios where you can really trust that you don't need um things like the HTTP client for",
    "start": "2916780",
    "end": "2921940"
  },
  {
    "text": "example or rely on the stack Trace all right",
    "start": "2921940",
    "end": "2927579"
  },
  {
    "text": "let's go ahead and talk about the next big thing which is cancellations now I just want to briefly mention this",
    "start": "2927579",
    "end": "2933280"
  },
  {
    "text": "because I get this question quite often what happens if I introduce a cancellation token",
    "start": "2933280",
    "end": "2938920"
  },
  {
    "text": "this is what you use to cancel an ongoing operation I can start an ongoing operation and passing a cancellation",
    "start": "2938920",
    "end": "2944980"
  },
  {
    "text": "token and this should be disposed properly and you so you don't have any",
    "start": "2944980",
    "end": "2950020"
  },
  {
    "text": "memory leaks different topic now what happens if we are then calling",
    "start": "2950020",
    "end": "2956079"
  },
  {
    "text": "this long running operation as you'll see here I'm calling this long-running operation and to the task that's",
    "start": "2956079",
    "end": "2961839"
  },
  {
    "text": "executing this I'm passing in the cancellation token this the implementation of this method",
    "start": "2961839",
    "end": "2967180"
  },
  {
    "text": "has a wild true Loop doesn't do anything fancy what happens if I try to cancel my",
    "start": "2967180",
    "end": "2973900"
  },
  {
    "text": "ongoing operation will it cancel this method how would it know where to cancel it",
    "start": "2973900",
    "end": "2979480"
  },
  {
    "text": "actually if you call cancellation token dot cancel nothing is actually going to happen",
    "start": "2979480",
    "end": "2984700"
  },
  {
    "text": "because how would it know where in the code to stop you would have to monitor for that",
    "start": "2984700",
    "end": "2989980"
  },
  {
    "text": "yourself by introducing for example in this case I'm throwing an exception",
    "start": "2989980",
    "end": "2995800"
  },
  {
    "text": "to say that I want to throw if a cancellation has been requested",
    "start": "2995800",
    "end": "3000559"
  },
  {
    "text": "this is Handy and it's useful in many different types of situations where you might want to cancel an ongoing",
    "start": "3000839",
    "end": "3005880"
  },
  {
    "text": "operation in asp.net core you can you can subscribe to the cancellation token of the request so you could say that if",
    "start": "3005880",
    "end": "3012300"
  },
  {
    "text": "they request terminates determined all the the requests that are you've currently started because of that",
    "start": "3012300",
    "end": "3018359"
  },
  {
    "text": "request which is quite handy and when it comes to asynchronous database operations I just want to leave you here",
    "start": "3018359",
    "end": "3024660"
  },
  {
    "text": "with a warning to say that if core doesn't support multiple parallel operations on the same context that's",
    "start": "3024660",
    "end": "3031380"
  },
  {
    "text": "why you couldn't just return the task for example from save save async or save changes async you have to always await",
    "start": "3031380",
    "end": "3038880"
  },
  {
    "text": "that to make sure that it works properly so in some situations you can return a task and in some situations you have to",
    "start": "3038880",
    "end": "3045180"
  },
  {
    "text": "await it there's also also another interesting",
    "start": "3045180",
    "end": "3050640"
  },
  {
    "text": "concept that is quite new and that's streaming data asynchronous streams was introduced in in c-sharp 8 and allows",
    "start": "3050640",
    "end": "3057540"
  },
  {
    "text": "you to define something called an iasync enumerable let's say that I want to stream all this",
    "start": "3057540",
    "end": "3064380"
  },
  {
    "text": "data I am indicating that I'm going to stream strings it could be messages that",
    "start": "3064380",
    "end": "3069420"
  },
  {
    "text": "I have on an Azure message queue it could be anything this here is the producer side of things so what I do",
    "start": "3069420",
    "end": "3076140"
  },
  {
    "text": "here is that I'm going to say that this method produces streams of a stream of of strings I don't know how many it",
    "start": "3076140",
    "end": "3083940"
  },
  {
    "text": "could be in infinite to consume this I could say that I want",
    "start": "3083940",
    "end": "3090119"
  },
  {
    "text": "to await for each element that I can get out of this so I have a sample of this as well so we",
    "start": "3090119",
    "end": "3096000"
  },
  {
    "text": "can go and break this down and look at this in Visual Studio so I have a again a Windows application",
    "start": "3096000",
    "end": "3103079"
  },
  {
    "text": "fairly similar to what we've just looked at it has this method called get lyrics it",
    "start": "3103079",
    "end": "3109500"
  },
  {
    "text": "Returns on iasink enumerable of a string this just indicates that this will produce strings on the Fly",
    "start": "3109500",
    "end": "3116339"
  },
  {
    "text": "I'm using a using declaration to open a stream to a file on disk I have a while loop that will say that",
    "start": "3116339",
    "end": "3122940"
  },
  {
    "text": "I'm going to read a line from the disk and then I'm going to use pattern matching to say that I want to ensure",
    "start": "3122940",
    "end": "3128400"
  },
  {
    "text": "that this has been set to an instance of a string if I say VAR here it would also",
    "start": "3128400",
    "end": "3134520"
  },
  {
    "text": "capture nulls which is a little bit problematic because then I'm never going to to exit this while loop so it has to",
    "start": "3134520",
    "end": "3141480"
  },
  {
    "text": "be an instance of a string not null and then I can simply do a weight",
    "start": "3141480",
    "end": "3147540"
  },
  {
    "text": "task.delay again just to simulate that I'm processing some data here this could have been a message from from Azure who",
    "start": "3147540",
    "end": "3153300"
  },
  {
    "text": "knows to tell this innumerable or the iterator that's iterating through my elements",
    "start": "3153300",
    "end": "3159180"
  },
  {
    "text": "that there's a some data available I can now use yield Return To indicate to whoever is listening that there's now a",
    "start": "3159180",
    "end": "3166740"
  },
  {
    "text": "new string available I'm going to put some break points in here",
    "start": "3166740",
    "end": "3172700"
  },
  {
    "text": "and then we're going to consume this method I have a a run async method here",
    "start": "3173880",
    "end": "3178920"
  },
  {
    "text": "it's marked as async because we have the await keyword and normally before we look at the",
    "start": "3178920",
    "end": "3185400"
  },
  {
    "text": "implementation normally what you see is that you have the await in front of the method call that would have indicated",
    "start": "3185400",
    "end": "3190920"
  },
  {
    "text": "that I want this entire chunk of data in this case I want to say that I'm going to retrieve",
    "start": "3190920",
    "end": "3197460"
  },
  {
    "text": "each line inside this stream of data I don't know how many which is why you couldn't say to array",
    "start": "3197460",
    "end": "3205140"
  },
  {
    "text": "for example because what would that have indicated give me everything if it's indefinite",
    "start": "3205140",
    "end": "3210780"
  },
  {
    "text": "let's run out of memory not a good idea so instead",
    "start": "3210780",
    "end": "3216480"
  },
  {
    "text": "I'm going to process each element as I want and for example if I want to break out of this I could do that as well as",
    "start": "3216480",
    "end": "3223559"
  },
  {
    "text": "you'll see here I can actually cancel this operation and say that if you've pressed cancel in the application I'm",
    "start": "3223559",
    "end": "3229079"
  },
  {
    "text": "going to throw an exception I could also say that if token dot is",
    "start": "3229079",
    "end": "3235260"
  },
  {
    "text": "what was it CTS if let's go back if cts.token dot is cancellation",
    "start": "3235260",
    "end": "3243180"
  },
  {
    "text": "requested break I could do that as well if I wanted to",
    "start": "3243180",
    "end": "3248240"
  },
  {
    "text": "but I like to throw exceptions so let's do that throw wave cancellation is requested now",
    "start": "3249119",
    "end": "3256440"
  },
  {
    "text": "if I put a breakpoint here and press and start the application with",
    "start": "3256440",
    "end": "3261660"
  },
  {
    "text": "the debugger I'm going to click run and this will then try to iterate through this this",
    "start": "3261660",
    "end": "3267660"
  },
  {
    "text": "stream of data so I could then go ahead and read each line it's easier way it's going to return to the UI yield return",
    "start": "3267660",
    "end": "3274020"
  },
  {
    "text": "will be able to then use this inside my for each Loop then it's going to go",
    "start": "3274020",
    "end": "3279480"
  },
  {
    "text": "ahead and read the next line which is quite nice I will also show you this that since",
    "start": "3279480",
    "end": "3285839"
  },
  {
    "text": "this is an iasync enumerable what if we are simply calling the method without iterating through it what would",
    "start": "3285839",
    "end": "3292619"
  },
  {
    "text": "that entail I can take this and say VAR enumerable",
    "start": "3292619",
    "end": "3299599"
  },
  {
    "text": "and if I don't do this what is that going to happen",
    "start": "3299760",
    "end": "3306540"
  },
  {
    "text": "is it going to read anything from my file press F5",
    "start": "3306540",
    "end": "3313140"
  },
  {
    "text": "didn't do anything so just by calling the method it won't",
    "start": "3313140",
    "end": "3318359"
  },
  {
    "text": "even start start up the stream to the file on disk it won't even start reading",
    "start": "3318359",
    "end": "3323640"
  },
  {
    "text": "anything so you have to then iterate through this",
    "start": "3323640",
    "end": "3329760"
  },
  {
    "text": "and the good thing is that I don't have to do the method called inline with my for each loop I could say for each line",
    "start": "3329760",
    "end": "3335520"
  },
  {
    "text": "in the innumerable like you can with any eye normable or any array of data so I'm going to run this again without",
    "start": "3335520",
    "end": "3341700"
  },
  {
    "text": "the debugger hopefully that's going to work",
    "start": "3341700",
    "end": "3347119"
  },
  {
    "text": "or Visual Studio crashes whichever whatever it wants",
    "start": "3348359",
    "end": "3355319"
  },
  {
    "text": "come on I don't think it liked me doing this",
    "start": "3355319",
    "end": "3361440"
  },
  {
    "text": "so let's see here",
    "start": "3361440",
    "end": "3367700"
  },
  {
    "text": "now run this and here we go perfect it's now streaming data into my",
    "start": "3371640",
    "end": "3378000"
  },
  {
    "text": "WPF application it's using all of those principles of the task parallel Library switching back and forth to the UI each",
    "start": "3378000",
    "end": "3386099"
  },
  {
    "text": "time it reads this text and processes that on the other thread like it's going to relieve the the control back to the",
    "start": "3386099",
    "end": "3392880"
  },
  {
    "text": "UI which is very powerful so without understanding all of the internals of the async and avoid keywords the task",
    "start": "3392880",
    "end": "3398880"
  },
  {
    "text": "parallel library and how all of this works together this could have been very confusing maybe it's still but you know",
    "start": "3398880",
    "end": "3406200"
  },
  {
    "text": "you have my email it is a complex topic",
    "start": "3406200",
    "end": "3412079"
  },
  {
    "text": "and I also want to to leave you on the note of saying that there's this thing called a configure await",
    "start": "3412079",
    "end": "3418260"
  },
  {
    "text": "some sometime back in the day everyone was told to always append configure away",
    "start": "3418260",
    "end": "3423420"
  },
  {
    "text": "it falls to all your asynchronous operations because that's the best practice and it",
    "start": "3423420",
    "end": "3428880"
  },
  {
    "text": "used to be like that because in asp.net previously not in asp.net core it tried",
    "start": "3428880",
    "end": "3435599"
  },
  {
    "text": "to always come back to the original thread to do everything inside the",
    "start": "3435599",
    "end": "3440760"
  },
  {
    "text": "continuation I've mentioned this right so when we inside our application",
    "start": "3440760",
    "end": "3448440"
  },
  {
    "text": "if we are doing um like a way to task a delay for example",
    "start": "3448440",
    "end": "3455760"
  },
  {
    "text": "it's going to come back to the UI thread here at the bottom which is exactly what we want to but if I say configure await",
    "start": "3455760",
    "end": "3462480"
  },
  {
    "text": "false this is now going to execute this on thread y or thread X or whatever it's",
    "start": "3462480",
    "end": "3469380"
  },
  {
    "text": "going to execute this continuation somewhere else and in asp.net that meant that it was very much more performant",
    "start": "3469380",
    "end": "3475380"
  },
  {
    "text": "because you didn't have to ask for the original thread on the thread pool that originally worked on your response",
    "start": "3475380",
    "end": "3482220"
  },
  {
    "text": "now the problem of course is that if you relied on HTTP context it wouldn't be",
    "start": "3482220",
    "end": "3487740"
  },
  {
    "text": "available down here so you might have the HTTP context here at the top but then at the bottom here that would be",
    "start": "3487740",
    "end": "3494099"
  },
  {
    "text": "null because it's not available on another thread a little bit problematic but they've",
    "start": "3494099",
    "end": "3499800"
  },
  {
    "text": "fixed this so in newer versions of asp.net in asp.net core there's no longer a concept of a",
    "start": "3499800",
    "end": "3506520"
  },
  {
    "text": "synchronization context so it doesn't have to come back to anywhere so by default it will always just execute",
    "start": "3506520",
    "end": "3513359"
  },
  {
    "text": "whatever code is after a weight on the current thread and it just works everything just flows across the new",
    "start": "3513359",
    "end": "3520140"
  },
  {
    "text": "HTTP context flows across properly all the data that you would expect to be available is available in your",
    "start": "3520140",
    "end": "3526020"
  },
  {
    "text": "asynchronous context so there's quite a lot happening with both the async and 08 keywords and I",
    "start": "3526020",
    "end": "3532980"
  },
  {
    "text": "have like five to ten hours of content on pluralsight on all of this where you",
    "start": "3532980",
    "end": "3538020"
  },
  {
    "text": "can dig into a lot more in depth and more samples and learn more about this because honestly an hour is is just",
    "start": "3538020",
    "end": "3544799"
  },
  {
    "text": "enough to understand a little bit about the problems that we can have with the async and Away keywords in the task",
    "start": "3544799",
    "end": "3550920"
  },
  {
    "text": "parallel Library there's quite a lot happening behind the hoods and it's good to get a little bit of an inspiration as",
    "start": "3550920",
    "end": "3556799"
  },
  {
    "text": "to where to go next so check out my courses and I hope you've enjoyed this and do send me an email if you have any",
    "start": "3556799",
    "end": "3563400"
  },
  {
    "text": "problems in your work or any issues with async in a weight or c-sharp feel free to send me an email and don't forget to",
    "start": "3563400",
    "end": "3569700"
  },
  {
    "text": "leave a card on the way out thank you so much for coming [Applause]",
    "start": "3569700",
    "end": "3582159"
  },
  {
    "text": "thank you",
    "start": "3584280",
    "end": "3586760"
  }
]