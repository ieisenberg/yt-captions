[
  {
    "text": "good morning everyone how is everyone doing this morning well good had a good conference",
    "start": "5759",
    "end": "11400"
  },
  {
    "text": "so far last day lot of knowledge to sip in and just enjoy this last day of um",
    "start": "11400",
    "end": "17279"
  },
  {
    "text": "great topics before we get started I really love NDC and and and appreciate",
    "start": "17279",
    "end": "22439"
  },
  {
    "text": "the organizers could we give a round of applause to all the",
    "start": "22439",
    "end": "26840"
  },
  {
    "text": "organizers excellent that's going to confuse everyone else outside as well they thought this talk",
    "start": "27960",
    "end": "35040"
  },
  {
    "text": "was very short um we're going to be talking about what's new in net 8 and C2 there's quite",
    "start": "35040",
    "end": "42440"
  },
  {
    "text": "a lot happening in both net with the entire ecosystem in visal studio in c as a programming language can be pretty",
    "start": "42440",
    "end": "49239"
  },
  {
    "text": "hard to keep track of exactly what's going on I'm Philip eberg I've been here a couple of times before if it's your",
    "start": "49239",
    "end": "55760"
  },
  {
    "text": "first time seeing one of my talks feel free to send me an email afterwards and ask any questions that you might have",
    "start": "55760",
    "end": "62039"
  },
  {
    "text": "I've been telling people for years to send me emails but no one ever sent me any questions you know why I forgot to",
    "start": "62039",
    "end": "69080"
  },
  {
    "text": "put my email on the slide so I thought I was super clear with everything I covered but you know",
    "start": "69080",
    "end": "75159"
  },
  {
    "text": "if you have any questions afterwards feel free to send me an email or just graide me in the hallways so we're going to be talking about everything about C",
    "start": "75159",
    "end": "82360"
  },
  {
    "text": "andn Net and how this language and how net as a runtime framework and all of",
    "start": "82360",
    "end": "87400"
  },
  {
    "text": "that has changed and why you would like to to upgrade to the latest version of net is anyone here using",
    "start": "87400",
    "end": "94720"
  },
  {
    "text": "net8 oh but half is anyone still using NET Framework oh about as many it's time to",
    "start": "94720",
    "end": "103280"
  },
  {
    "text": "upgrade I know that sounds easier um than it is I have a lot of customers that work in NET Framework and trying to",
    "start": "103280",
    "end": "109520"
  },
  {
    "text": "get a reason to jump over to the new net I still want to call it a framework but that gets very confusing but there's a",
    "start": "109520",
    "end": "116159"
  },
  {
    "text": "lot of good reasons as to why you want to jump over to net and especially with net 8 we're going to try and cover some",
    "start": "116159",
    "end": "121960"
  },
  {
    "text": "things there's these this is a tie cloud of all the features added to C and we're going to cover some of the new ones that",
    "start": "121960",
    "end": "127960"
  },
  {
    "text": "I'm not listing here so we'll start off with net 8 which is the latest version of net and what's changed with this",
    "start": "127960",
    "end": "134680"
  },
  {
    "text": "there's helpers to work with dates and times there's improvements to system. text. Json there's a lot of performance",
    "start": "134680",
    "end": "141040"
  },
  {
    "text": "improvements there's many things that we're going to be covering here today what's interesting withn net is that",
    "start": "141040",
    "end": "147080"
  },
  {
    "text": "they follow this very specific release cycle so every year there's a new version in November they always release",
    "start": "147080",
    "end": "153800"
  },
  {
    "text": "a new version during net com at least that's been the case for for the past few years so now in November last year",
    "start": "153800",
    "end": "161280"
  },
  {
    "text": "they released net 8 which is now the latest version and it's the longtime support version which means that it's",
    "start": "161280",
    "end": "167280"
  },
  {
    "text": "going to have support for up to 36 months which is quite a long time if",
    "start": "167280",
    "end": "172519"
  },
  {
    "text": "you're on Net 7 anyone on Net 7 still you know what support for do Net 7",
    "start": "172519",
    "end": "178680"
  },
  {
    "text": "ends in May this year so it's a good time to actually upgrade doesn't mean it's not going to work anymore it just",
    "start": "178680",
    "end": "183959"
  },
  {
    "text": "means that there's not going to be any more support fixes for it or any updates to it so you might as well just upgrade",
    "start": "183959",
    "end": "190560"
  },
  {
    "text": "and the idea is that it should be super simple to go from Net 5 6 7 up to the",
    "start": "190560",
    "end": "196319"
  },
  {
    "text": "new version you just toggle a switch in your project file and rebuild the application and everything works does",
    "start": "196319",
    "end": "202480"
  },
  {
    "text": "that ever happen probably not Microsoft has a really good track record of being",
    "start": "202480",
    "end": "207680"
  },
  {
    "text": "backwards compatible and that's true for most of the types of applications but if you're doing for for example net Maui or",
    "start": "207680",
    "end": "214920"
  },
  {
    "text": "Blazer or other UI tied applications then it's not really true it gets a",
    "start": "214920",
    "end": "220080"
  },
  {
    "text": "little bit more tricky and especially with dependencies on other projects as well but I guess the idea has always",
    "start": "220080",
    "end": "225760"
  },
  {
    "text": "buil to build anything with net and that's even more true with the latest version of net finally there's I would",
    "start": "225760",
    "end": "233079"
  },
  {
    "text": "say complete support for building crossplatform mobile apps that story is",
    "start": "233079",
    "end": "238480"
  },
  {
    "text": "a totally different talk but now we can use Maui to build applications Fort net uh for iOS Android and Mac OS and",
    "start": "238480",
    "end": "245799"
  },
  {
    "text": "windows and do that with one platform so the idea is still to be able to build anything with net even though this was",
    "start": "245799",
    "end": "252319"
  },
  {
    "text": "initially the idea with NET Framework if anyone in here it's a net developer and started out with net one for example NET",
    "start": "252319",
    "end": "259799"
  },
  {
    "text": "Framework one you know that the idea was that if you have a platform that has a runtime for net it should be able to run",
    "start": "259799",
    "end": "265880"
  },
  {
    "text": "your C and VB applications but Microsoft didn't build a run time for any other platforms but now they do and now we can",
    "start": "265880",
    "end": "272960"
  },
  {
    "text": "run the net apps for for Linux Mac OS and windows and so forth so with that being said of course",
    "start": "272960",
    "end": "279240"
  },
  {
    "text": "we want to be looking at what's new in net 8 there's a lot of performance improvements I'm going to be talking a",
    "start": "279240",
    "end": "285360"
  },
  {
    "text": "lot about how they do this internally what tips and tricks you can use to do the same in your applications while I've",
    "start": "285360",
    "end": "292520"
  },
  {
    "text": "said performance performance performance I'm not going to jump around like Steve Balmer screaming that here on stage but",
    "start": "292520",
    "end": "298560"
  },
  {
    "text": "it is really an important aspect of net if you were to upgrade from Net 5 to net",
    "start": "298560",
    "end": "304199"
  },
  {
    "text": "8 you've had a tremendous amount of performance fixes which is also",
    "start": "304199",
    "end": "309320"
  },
  {
    "text": "including less allocations uh optimized code paths and everything's just going to run faster and they've done this",
    "start": "309320",
    "end": "316160"
  },
  {
    "text": "because they've introduced improvements in the language as well as in the runtime they gradually add this to their",
    "start": "316160",
    "end": "322160"
  },
  {
    "text": "internal components to make everything faster so the idea is that if you just toggle over to net 8 rebuild the",
    "start": "322160",
    "end": "328240"
  },
  {
    "text": "application you will make use of all those new performance improvements they've also introduced what's known as a Time abstraction which",
    "start": "328240",
    "end": "334720"
  },
  {
    "text": "is making testing better for if you're using dates and times for example we'll look at that in just a moment a lot of",
    "start": "334720",
    "end": "340919"
  },
  {
    "text": "improvements of system. text. Json is anyone using newtonsoft Json or json.net",
    "start": "340919",
    "end": "347360"
  },
  {
    "text": "oh wow almost all of you are using json.net is anyone using system of Tex",
    "start": "347360",
    "end": "353000"
  },
  {
    "text": "at Json about as many that's great the idea was never for system. text adjacent to",
    "start": "353000",
    "end": "359600"
  },
  {
    "text": "to replace Newton soft at Json even though Microsoft hired the guy who built Newton soft at Json it's still being",
    "start": "359600",
    "end": "366639"
  },
  {
    "text": "maintained but it's good to have an out-of-the-box experience in net that focuses on performance it's not meant to",
    "start": "366639",
    "end": "373599"
  },
  {
    "text": "be exactly the same as Newton soft. Json Newton soft. Json works with Json",
    "start": "373599",
    "end": "379360"
  },
  {
    "text": "documents that aren't super well formatted it has is it is very uh forgiving for the Json data you pass",
    "start": "379360",
    "end": "385919"
  },
  {
    "text": "into it which also means that it's not as performant as it could be so the builtin support now for for Json is",
    "start": "385919",
    "end": "393039"
  },
  {
    "text": "focusing on making everything faster when serializing and deserializing data there's also improvements to asp.net",
    "start": "393039",
    "end": "399400"
  },
  {
    "text": "core which includes again performance improvements it also includes support for Blazer applications and changing how",
    "start": "399400",
    "end": "407080"
  },
  {
    "text": "we build full stack web applications and of course we have net Maui now if you want to use all of this",
    "start": "407080",
    "end": "414240"
  },
  {
    "text": "and we want to build a net application using the latest version of C or the latest version of V Studio or if you're",
    "start": "414240",
    "end": "420879"
  },
  {
    "text": "working on an older project and want to figure out can I do this in my project knowing exactly which version goes with",
    "start": "420879",
    "end": "427240"
  },
  {
    "text": "which version of C can be a little bit tricky so if you want to use net 8 you",
    "start": "427240",
    "end": "433160"
  },
  {
    "text": "can use C 12 if you want to use C 11 you could only do that on Net 7 and so forth",
    "start": "433160",
    "end": "438960"
  },
  {
    "text": "so there's um they try to tie the language into the runtime or the release",
    "start": "438960",
    "end": "444000"
  },
  {
    "text": "of net the reason for this is because they can then focus on building fixes",
    "start": "444000",
    "end": "449080"
  },
  {
    "text": "for the line language or improvements for example in net 9 which we're really not going to cover here today but",
    "start": "449080",
    "end": "454919"
  },
  {
    "text": "they're investigating how to rewrite everything for async and A8 how could they build support in the runtime for",
    "start": "454919",
    "end": "461440"
  },
  {
    "text": "async and await instead of having the TPL fake a stake machine and build all of that using the compiler why wouldn't",
    "start": "461440",
    "end": "469000"
  },
  {
    "text": "they be able to do that in the runtime instead it's a really interesting GitHub issue discussing how they could approach",
    "start": "469000",
    "end": "474520"
  },
  {
    "text": "this but that wouldn't work if you were to then use C 15 or whatever they do",
    "start": "474520",
    "end": "479759"
  },
  {
    "text": "that in with an older version of doet because there's not runtime support so I",
    "start": "479759",
    "end": "485199"
  },
  {
    "text": "had a client that worked in doet framework 4.8 and they wanted to reduce the amount of repetitive code meaning",
    "start": "485199",
    "end": "492120"
  },
  {
    "text": "that they would like to use primary Constructors and use other types of language features in C that allows you",
    "start": "492120",
    "end": "498520"
  },
  {
    "text": "to write cleaner and better code but they couldn't just upgrade to a later version of net but what you can actually",
    "start": "498520",
    "end": "504800"
  },
  {
    "text": "do which is unsupported is to go into the project file and set the Lang version to 12",
    "start": "504800",
    "end": "509960"
  },
  {
    "text": "which means that if you stay away from runtime required language features you can use C 12 with doet framework",
    "start": "509960",
    "end": "517839"
  },
  {
    "text": "2.0 pretty cool but it's unsupported for Microsoft so you do that on your own but",
    "start": "517839",
    "end": "523680"
  },
  {
    "text": "I did mention that once we've decided that we're going to use the latest version of Visual Studio we're going to use net 8 we're going to use C2 the idea",
    "start": "523680",
    "end": "530560"
  },
  {
    "text": "is that we're now going to go from something that's I hope no one's here from Microsoft because calling the older",
    "start": "530560",
    "end": "536440"
  },
  {
    "text": "versions of net Rusty is probably not very popular but they've done a lot of improvements they polished all the",
    "start": "536440",
    "end": "541959"
  },
  {
    "text": "internal pieces they've gone from this older Kong that's a little bit older and",
    "start": "541959",
    "end": "548600"
  },
  {
    "text": "made it a little bit better run faster be more in line with what you'd expect in 2024 2025 right so it's a lot more",
    "start": "548600",
    "end": "556480"
  },
  {
    "text": "performance and the reason that I'm talking about this is because they build this on top of language features and",
    "start": "556480",
    "end": "562600"
  },
  {
    "text": "runtime support that has been added in older versions as well so let's say that they introduced a language feature in C",
    "start": "562600",
    "end": "569120"
  },
  {
    "text": "10 it takes a little while to adopt that and across Microsoft which is a pretty",
    "start": "569120",
    "end": "574399"
  },
  {
    "text": "big company it takes a little bit of time to educate the developers of the different pieces or the different",
    "start": "574399",
    "end": "579680"
  },
  {
    "text": "components how to use this more effectively and what they do quite a lot is to use a couple of principles or",
    "start": "579680",
    "end": "587200"
  },
  {
    "text": "concepts to make this a lot more performant they're using a type called a",
    "start": "587200",
    "end": "592320"
  },
  {
    "text": "span which is a new type in net not in net 8 it was released a couple of",
    "start": "592320",
    "end": "597519"
  },
  {
    "text": "versions ago I believe net 6 and this span type allows you to look at any type of memory you can represent managed on",
    "start": "597519",
    "end": "605200"
  },
  {
    "text": "memory memory allocated on the stack on the Heap whatever you have this one generic type that can reference any type",
    "start": "605200",
    "end": "611240"
  },
  {
    "text": "of memory and all the operations that you do on this stack or array of data is",
    "start": "611240",
    "end": "617279"
  },
  {
    "text": "super fast it doesn't do any extra allocations it doesn't have to do a lot of extra operations when you're copying",
    "start": "617279",
    "end": "623839"
  },
  {
    "text": "or slicing things this together with a language feature called ranges both equal performance",
    "start": "623839",
    "end": "629959"
  },
  {
    "text": "so a range is a way for us to provide a Syntax for accessing one element or a",
    "start": "629959",
    "end": "635880"
  },
  {
    "text": "array of different elements or a range of elements if you've done python for example you've probably seen this before",
    "start": "635880",
    "end": "641600"
  },
  {
    "text": "I can skip the two first elements and give give me the rest of the list I can get everything except the last element",
    "start": "641600",
    "end": "647040"
  },
  {
    "text": "in the list or I can get the two last elements of my list it's a very nice syntax to be able to access things where",
    "start": "647040",
    "end": "654040"
  },
  {
    "text": "I know exactly where they are I can also use this if I know the index of a certain element and slice it",
    "start": "654040",
    "end": "660600"
  },
  {
    "text": "off and this together with the spans is a way for me to write zero allocation code so let's imagine that I'm getting a",
    "start": "660600",
    "end": "667639"
  },
  {
    "text": "payload here we could say that this is coming in from a Bluetooth Beacon or whatever I do a bit of work with",
    "start": "667639",
    "end": "672760"
  },
  {
    "text": "Hardware as well so I get um bite arrays like this here now this bite array I",
    "start": "672760",
    "end": "678240"
  },
  {
    "text": "want to look at this as a span instead so on the second line I'm taking this bite array and I'm implicitly converting",
    "start": "678240",
    "end": "684360"
  },
  {
    "text": "that into a span of btes which means that on the last line when I want to",
    "start": "684360",
    "end": "689519"
  },
  {
    "text": "select a subset which means give me the two last bytes this doesn't have to do any extra",
    "start": "689519",
    "end": "695720"
  },
  {
    "text": "allocations the alternative in older versions would have been to at least personally I would probably use Link to",
    "start": "695720",
    "end": "701839"
  },
  {
    "text": "say hey I want to skip until this element and take these two uh write some code that's much less",
    "start": "701839",
    "end": "708560"
  },
  {
    "text": "performance now I have another example of this here to write CRA allocation code and that's to for example say that",
    "start": "708560",
    "end": "714320"
  },
  {
    "text": "I'm declaring a utf8 string literal which is my name a c 11 feature",
    "start": "714320",
    "end": "719880"
  },
  {
    "text": "that allows me to use utf8 strings directly in my language as constant strings someone's probably asking why",
    "start": "719880",
    "end": "725959"
  },
  {
    "text": "you wouldn't want to do that it's because everything on the web is utf8 and everything in CP and.net is by",
    "start": "725959",
    "end": "732720"
  },
  {
    "text": "default utf16 making the conversion between utf8 and utf16 is a little bit",
    "start": "732720",
    "end": "738440"
  },
  {
    "text": "timeconsuming like a couple of CPU Cycles require some extra memory allocations so being able to Define this",
    "start": "738440",
    "end": "744880"
  },
  {
    "text": "using UTF ring lit rol is a lot more performance if I know the data that is",
    "start": "744880",
    "end": "750720"
  },
  {
    "text": "so what I'm doing here is I'm declaring a read only span which is pointing to this um utfa string L roll in memory I'm",
    "start": "750720",
    "end": "758000"
  },
  {
    "text": "locating the space in the middle and then slicing everything off from the start until the first space and then I'm",
    "start": "758000",
    "end": "763720"
  },
  {
    "text": "grabbing my my second name as well and putting that in a second span this here doesn't do any extra memory allocations",
    "start": "763720",
    "end": "770240"
  },
  {
    "text": "in terms of working with that array of data of course it does two allocations or three allocations on the stack to put",
    "start": "770240",
    "end": "777600"
  },
  {
    "text": "the references to the different um variables but it doesn't do any more allocations than that traditionally",
    "start": "777600",
    "end": "783519"
  },
  {
    "text": "you'd have to copy the array over and do a lot of extra CPU Cycles to do that and",
    "start": "783519",
    "end": "788600"
  },
  {
    "text": "for mobile for example extra CPU Cycles means draining extra battery again being",
    "start": "788600",
    "end": "793959"
  },
  {
    "text": "more performant in terms of both memory battery wise CPU Cycles we're going to",
    "start": "793959",
    "end": "799480"
  },
  {
    "text": "save the environment by using net 8 I'm kidding so what also comes hand in",
    "start": "799480",
    "end": "806160"
  },
  {
    "text": "hand with this is native aot which is also a concept that they've worked on quite a lot for quite some time native",
    "start": "806160",
    "end": "813320"
  },
  {
    "text": "aot has been a concept available if you on samarin for example you've natively compiled your iOS applications you take",
    "start": "813320",
    "end": "820600"
  },
  {
    "text": "your net application and you compile that and then it's natively executed on the platform this is now possible for",
    "start": "820600",
    "end": "826880"
  },
  {
    "text": "any type of net application you can take an asp.net core application and natively compile that for AAC natively compile it",
    "start": "826880",
    "end": "834079"
  },
  {
    "text": "for a Linux machine and doing this will reduce the startup time it will reduce",
    "start": "834079",
    "end": "839680"
  },
  {
    "text": "the the the time it takes to do certain executions or all the operations because everything executes natively you can",
    "start": "839680",
    "end": "847079"
  },
  {
    "text": "also bundle the parts of the runtime that are necessary to execute the application if you so like to so I can",
    "start": "847079",
    "end": "853399"
  },
  {
    "text": "say I have my Windows application written in WPF natively compile that for Windows and bundle the pieces with the",
    "start": "853399",
    "end": "859720"
  },
  {
    "text": "runtime that are necessary to execute this sounds like it's going to be quite a huge binary but in fact comparing net",
    "start": "859720",
    "end": "866759"
  },
  {
    "text": "6 with net 8 for example they red used that from let's say 100 Megs to 20 Megs",
    "start": "866759",
    "end": "872279"
  },
  {
    "text": "so the binary sizes are much smaller not that it matters here we have a lot of",
    "start": "872279",
    "end": "877519"
  },
  {
    "text": "dis space and fast internet so it doesn't matter too much but doing this is going to make the applications a",
    "start": "877519",
    "end": "883399"
  },
  {
    "text": "little bit faster and it's good for things like mobile applications they've also done some",
    "start": "883399",
    "end": "889079"
  },
  {
    "text": "improvements internally in the library by introducing what's known as a performance focused type now they've",
    "start": "889079",
    "end": "894759"
  },
  {
    "text": "introduced a new collection or a new namespace called system. collections. Frozen has nothing to do with",
    "start": "894759",
    "end": "901720"
  },
  {
    "text": "Disney so when you take a dictionary you fill that with let's say millions of records and you want to be able to to",
    "start": "901720",
    "end": "908480"
  },
  {
    "text": "very quickly execute that you know you've set up your dictionary with with keys and values and you know that it's",
    "start": "908480",
    "end": "914480"
  },
  {
    "text": "no longer going to change if you change that to be a frozen dictionary it's then",
    "start": "914480",
    "end": "920399"
  },
  {
    "text": "going to be optimized for accessing and reading elements which is again a lot more performant so the idea is that you",
    "start": "920399",
    "end": "927360"
  },
  {
    "text": "take your source and you convert that into into something that is then Frozen and is optimized for accessing those",
    "start": "927360",
    "end": "934639"
  },
  {
    "text": "elements now we're going to jump over to visual studio and we're going to talk a little bit about serialization using",
    "start": "935319",
    "end": "940440"
  },
  {
    "text": "system. tex. Json they've added support for for working with required members",
    "start": "940440",
    "end": "946440"
  },
  {
    "text": "and in it only properties they've done improvements to inheritance inet 7 they",
    "start": "946440",
    "end": "951600"
  },
  {
    "text": "introduced support for inheritance in system. tex. Json and continuously improve that with",
    "start": "951600",
    "end": "957720"
  },
  {
    "text": "net8 I'm I'm going to show you a couple of interesting things when working with system. tex. Json so we're inside visual",
    "start": "957720",
    "end": "964839"
  },
  {
    "text": "studio and the first thing that I'm going to show you here is that I've set up a Json um or def find some Json here",
    "start": "964839",
    "end": "971000"
  },
  {
    "text": "using a RW string literal it's a nice thing or feature in Visual Studio as well that it's actually highlights the",
    "start": "971000",
    "end": "976240"
  },
  {
    "text": "syntax in the Json that I've uh defined inside this raw string literal using the three double quotes beside the point",
    "start": "976240",
    "end": "983120"
  },
  {
    "text": "that's an older feature now I'm setting my username here and I have a collection of phone numbers I'm going to",
    "start": "983120",
    "end": "989639"
  },
  {
    "text": "deserialize this into a type called user if I go into my user not into that",
    "start": "989639",
    "end": "996800"
  },
  {
    "text": "one let's go back if we go into the",
    "start": "996800",
    "end": "1002680"
  },
  {
    "text": "user you can see here that the username is required it's an init only Auto property that says this simply defines",
    "start": "1002680",
    "end": "1010279"
  },
  {
    "text": "that you have to set this when you create an instance and once you've set it you cannot change it so either you",
    "start": "1010279",
    "end": "1016720"
  },
  {
    "text": "set it using the object initializer um and once you've done that you can't change it now for the second one is a",
    "start": "1016720",
    "end": "1022839"
  },
  {
    "text": "little bit more interesting if you look at the list of phone numbers this here is in fact being set to an instance it's",
    "start": "1022839",
    "end": "1029640"
  },
  {
    "text": "a readon property right so it's exposing a I list or a list of strings but you",
    "start": "1029640",
    "end": "1034959"
  },
  {
    "text": "can't change that once you've set it to an instance so how come I would be then be able to populate this with elements",
    "start": "1034959",
    "end": "1042240"
  },
  {
    "text": "if I run my application again that's the wrong key if I run this it's going to say uh",
    "start": "1042240",
    "end": "1050679"
  },
  {
    "text": "numbers for Phillip and actually print out the number that I have so at the bottom here I'm saying the username is f",
    "start": "1050679",
    "end": "1057240"
  },
  {
    "text": "name and then I'm iterating through all the phone numbers so it did actually populate this list with some information",
    "start": "1057240",
    "end": "1063160"
  },
  {
    "text": "and this is all done by having this uh decorating this with an attribute called uh Json object creation handling what",
    "start": "1063160",
    "end": "1070080"
  },
  {
    "text": "this does is it allows me to populate this list with elements from the Json so",
    "start": "1070080",
    "end": "1075360"
  },
  {
    "text": "it parses the Json data and sees that here's a readon property I can out populate this with",
    "start": "1075360",
    "end": "1081159"
  },
  {
    "text": "elements when experimenting with this prior to the release of net 8 about 2 weeks before um I found a bug so when",
    "start": "1081159",
    "end": "1090559"
  },
  {
    "text": "you add a Constructor to the type let's say that I'm going to add just a property here this here is using the",
    "start": "1090559",
    "end": "1097080"
  },
  {
    "text": "primary Constructor on my record if I do this it's not going to work you can't",
    "start": "1097080",
    "end": "1103000"
  },
  {
    "text": "have a primary Constructor and also use this um J object Json object creation",
    "start": "1103000",
    "end": "1108440"
  },
  {
    "text": "handling so finding this two weeks before net8 I reported the bike to Microsoft and the",
    "start": "1108440",
    "end": "1114520"
  },
  {
    "text": "alternative was either we throw an exception telling you that this is unsupported or we have to rewrite the entire parser for",
    "start": "1114520",
    "end": "1120960"
  },
  {
    "text": "Jason obviously two weeks before like if it was me I would rewrite everything uh",
    "start": "1120960",
    "end": "1126440"
  },
  {
    "text": "but then again I don't work for Microsoft so probably a reason um so now if I run this again it's GNA throw an",
    "start": "1126440",
    "end": "1131799"
  },
  {
    "text": "exception having support for uh required members means that if I don't set that in my Json document it's going to throw",
    "start": "1131799",
    "end": "1138400"
  },
  {
    "text": "an ex ction so let me show you that if I remove my username from the Json if I rerun the application that's going to",
    "start": "1138400",
    "end": "1144919"
  },
  {
    "text": "blow up because it has to set that it's probably because I'm running this already let's stop that look at that",
    "start": "1144919",
    "end": "1152039"
  },
  {
    "text": "it's thrown an exception telling me that I'm not setting this required property all right so that's an very",
    "start": "1152039",
    "end": "1160159"
  },
  {
    "text": "good change to system. text adjacent again making it more complete the next thing they've introduced is some",
    "start": "1160159",
    "end": "1166120"
  },
  {
    "text": "extension methods for HTTP client called extensions for the IIA sync",
    "start": "1166120",
    "end": "1171880"
  },
  {
    "text": "innumerable what this is doing here is I'm setting up a URL that I want to fetch from the website for where the",
    "start": "1171880",
    "end": "1177480"
  },
  {
    "text": "website I want to fetch data from I'm setting up an HTTP client and then I'm saying from this client I'm going to get",
    "start": "1177480",
    "end": "1183400"
  },
  {
    "text": "Json data you're going to parse that as an i inumerable or an inumerable as a stock price meaning that it's going to",
    "start": "1183400",
    "end": "1189280"
  },
  {
    "text": "feed me elements into my system what's interesting though that if I were to execute this endpoint it would just give",
    "start": "1189280",
    "end": "1195640"
  },
  {
    "text": "me a flat list or an array of elements so what happens is that this internally",
    "start": "1195640",
    "end": "1200840"
  },
  {
    "text": "does quite a few interesting things first it starts off a stream to my website or the API in this case here it",
    "start": "1200840",
    "end": "1207720"
  },
  {
    "text": "tries to buffer load some data it feeds that into the Json serializer and then I can use this async innumerable to",
    "start": "1207720",
    "end": "1214360"
  },
  {
    "text": "consume that data as it becomes available it doesn't make the entire like it doesn't fit one element at a",
    "start": "1214360",
    "end": "1220799"
  },
  {
    "text": "time from a flat list of elements but it's using streams internally to avoid extra allocations meaning that if it's a",
    "start": "1220799",
    "end": "1227880"
  },
  {
    "text": "really large response it could cancel in the middle and you'd still be able to process a couple of those different",
    "start": "1227880",
    "end": "1233520"
  },
  {
    "text": "elements and being an async innumerable means that I can use a weight for each to consume them very nicely in the",
    "start": "1233520",
    "end": "1240360"
  },
  {
    "text": "application I don't have to fetch the entire response as a string in memory you know traditionally You' do read all",
    "start": "1240360",
    "end": "1246720"
  },
  {
    "text": "the content as string store that in a in a temporary string in memory and then you parse that into adjacent data and",
    "start": "1246720",
    "end": "1253000"
  },
  {
    "text": "then you reiterate over that extra allocations completely unnecessary if we have a stream open to the server let's",
    "start": "1253000",
    "end": "1259320"
  },
  {
    "text": "just feed that into the Json sterilizer and it does that internally now um also I said that",
    "start": "1259320",
    "end": "1266799"
  },
  {
    "text": "they've done some changes to um the the um polymorphic or inheritance you can",
    "start": "1266799",
    "end": "1272120"
  },
  {
    "text": "now have uh inheritance in Json that support was added in Net 7 so you could",
    "start": "1272120",
    "end": "1277360"
  },
  {
    "text": "say for example that I have this record of a user which has a couple of sub classes you can decorate Jason derived",
    "start": "1277360",
    "end": "1283559"
  },
  {
    "text": "type on your classes or your records to say that this has a couple of subclasses",
    "start": "1283559",
    "end": "1289520"
  },
  {
    "text": "the change they've done in net is to also support interfaces if your types were to inherit from a certain interface",
    "start": "1289520",
    "end": "1296200"
  },
  {
    "text": "you could DLS into that which didn't work inet 7 so while they're not trying to be",
    "start": "1296200",
    "end": "1302919"
  },
  {
    "text": "feature U like on par with the feature with with newtonsoft at Json it's still",
    "start": "1302919",
    "end": "1308080"
  },
  {
    "text": "a very viable serializer and it's very performant and if you own both ends like",
    "start": "1308080",
    "end": "1313159"
  },
  {
    "text": "the API and the application this is a perfect match",
    "start": "1313159",
    "end": "1318640"
  },
  {
    "text": "all right so the next thing I want to talk about is the time abstraction which is also a new thing added in net 8 I've",
    "start": "1318640",
    "end": "1325720"
  },
  {
    "text": "had an issue writing tests for code that uses dates and times I I know quite a",
    "start": "1325720",
    "end": "1331880"
  },
  {
    "text": "bit about dates and times I have a whole course on the subject but writing tests for it and getting developers to use",
    "start": "1331880",
    "end": "1337320"
  },
  {
    "text": "something that's not a part of of net when it comes to working with dates and times can sometimes be a little bit",
    "start": "1337320",
    "end": "1342919"
  },
  {
    "text": "tricky so I worked in in a company that delivered an app for public transport so",
    "start": "1342919",
    "end": "1349039"
  },
  {
    "text": "back in Sweden where I live you can go on the bus and you buy a ticket for the bus using this app that I built and we",
    "start": "1349039",
    "end": "1355320"
  },
  {
    "text": "had an issue that when it when the clock turns over to Daylight savings your",
    "start": "1355320",
    "end": "1360960"
  },
  {
    "text": "ticket would immediately expire which is a problematic it only happens twice a year though or actually",
    "start": "1360960",
    "end": "1367200"
  },
  {
    "text": "once a year when it moves to the the incorrect side of your expiry date on that ticket and I mean two we change the",
    "start": "1367200",
    "end": "1375120"
  },
  {
    "text": "clock at 2: a.m. at night if that happens to be on a Saturday when people have gone to the pub then it might be a",
    "start": "1375120",
    "end": "1381200"
  },
  {
    "text": "little bit of an issue but that you know happens every seven or so years so we",
    "start": "1381200",
    "end": "1386320"
  },
  {
    "text": "ignored it which is the best way to uh solve time bugs if it just happens like",
    "start": "1386320",
    "end": "1391360"
  },
  {
    "text": "rarely like let's not care about it so I guess the the problem is that even though I'm following some of the best",
    "start": "1391360",
    "end": "1397400"
  },
  {
    "text": "practices in this code block here I'm using daytime offset because that's the best thing to use but I've coupled",
    "start": "1397400",
    "end": "1403600"
  },
  {
    "text": "myself to this it's really difficult to write a test for this and of course I could abstract this I could have a class",
    "start": "1403600",
    "end": "1409919"
  },
  {
    "text": "on my own that I build that wraps a daytime offset I could have injected an interf or an action I could have used",
    "start": "1409919",
    "end": "1417039"
  },
  {
    "text": "Nota time there's Endless Possibilities but if it's not a part of net by default",
    "start": "1417039",
    "end": "1422400"
  },
  {
    "text": "a lot of developers tend to just skip it uh especially when it comes to date times like pulling in packages for Json",
    "start": "1422400",
    "end": "1428320"
  },
  {
    "text": "and everything else like that no problem but when it comes to dates and times there's something that um makes it more",
    "start": "1428320",
    "end": "1436159"
  },
  {
    "text": "difficult so in net 8 they've introduced support for something called a Time provider so instead of calling daytime",
    "start": "1436159",
    "end": "1443159"
  },
  {
    "text": "offset UTC now let's say that I want to inject something into my Constructor I'm",
    "start": "1443159",
    "end": "1448720"
  },
  {
    "text": "going to inject something called a Time provider actually going to do some",
    "start": "1448720",
    "end": "1454720"
  },
  {
    "text": "proper naming as well I'm going to store this in a local",
    "start": "1454720",
    "end": "1460200"
  },
  {
    "text": "field and then I can use this instead of doing daytime offset UTC now I can call",
    "start": "1460200",
    "end": "1466760"
  },
  {
    "text": "time provider Dot get UTC now and the benefit here is that now I'm",
    "start": "1466760",
    "end": "1473679"
  },
  {
    "text": "no longer coupled to exactly the implementation of that static uh date time offset class the time provider is",
    "start": "1473679",
    "end": "1482600"
  },
  {
    "text": "an abstract class which means that I can inherit from this and create my own implementation I can create a fake implementation and everything on this is",
    "start": "1482600",
    "end": "1490080"
  },
  {
    "text": "also virtual so I could override what happens when we call get youut to see now by default the implementation is",
    "start": "1490080",
    "end": "1496720"
  },
  {
    "text": "simply using datetime offset but we don't have to so we could for example create a",
    "start": "1496720",
    "end": "1505440"
  },
  {
    "text": "custom time provider that implements or inherits from time provider where I simply return datetime offset UTC now or",
    "start": "1505440",
    "end": "1512039"
  },
  {
    "text": "datetime offset do now probably don't want to do that that doesn't make a lot of sense but what we can do is that we can",
    "start": "1512039",
    "end": "1519200"
  },
  {
    "text": "use a type called a fake time provider that comes with this um new package or this new functionality in net 8 the fake",
    "start": "1519200",
    "end": "1526320"
  },
  {
    "text": "time provider uh allows me to to say that every time you call get UTC now it's going to automatically Advance a",
    "start": "1526320",
    "end": "1533000"
  },
  {
    "text": "certain amount of time it's a really cool thing by default it doesn't do that at all so every time you call get UTC",
    "start": "1533000",
    "end": "1539600"
  },
  {
    "text": "now it will give you the same date but I could for instance say that the start time is going to be 2 a.m. at the night",
    "start": "1539600",
    "end": "1546919"
  },
  {
    "text": "where we going to change to Daylight savings and then the next time you call it it's going to advance by half an hour",
    "start": "1546919",
    "end": "1552880"
  },
  {
    "text": "because this here takes a time span so I could do 1 second 1 hour 30 minutes make",
    "start": "1552880",
    "end": "1558320"
  },
  {
    "text": "makes it super easy to write tests for this I could also of course say that",
    "start": "1558320",
    "end": "1564840"
  },
  {
    "text": "well I'm going to use this system time provider so uh I don't have to pass in a custom implementation don't have to use",
    "start": "1564840",
    "end": "1571640"
  },
  {
    "text": "the um my own provider if I don't want to this here is the target type new",
    "start": "1571640",
    "end": "1576799"
  },
  {
    "text": "expression introduced in C 10 all right so that's the time provider makes it easier to write tests for at",
    "start": "1576799",
    "end": "1582960"
  },
  {
    "text": "least for dates and times we should all use this I longing",
    "start": "1582960",
    "end": "1588640"
  },
  {
    "text": "for that feature and I think it's a great addition the next thing is that they've improved how to work with random",
    "start": "1588640",
    "end": "1593960"
  },
  {
    "text": "data there's helpers for Randomness so we can do random. shared and that gives",
    "start": "1593960",
    "end": "1599279"
  },
  {
    "text": "us an instance of a random class with a proper seat we don't have to create our own static random anymore and pass a",
    "start": "1599279",
    "end": "1606000"
  },
  {
    "text": "proper seed to get through Randomness now I'm not a security expert so I'm not going to say that this here is",
    "start": "1606000",
    "end": "1611559"
  },
  {
    "text": "cryptographically secure random data but it's good enough for for my use cases",
    "start": "1611559",
    "end": "1617200"
  },
  {
    "text": "and what I can do here this is an example I'm saying I have this array of elements give me three random elements I",
    "start": "1617200",
    "end": "1624200"
  },
  {
    "text": "could also pass an array to say Shuffle this it will give me a new instance with a shuffled data I could say give me the",
    "start": "1624200",
    "end": "1629840"
  },
  {
    "text": "next bite or next decimal or next integer in in a certain range as well",
    "start": "1629840",
    "end": "1635039"
  },
  {
    "text": "use it just as you would use with a random class just a little bit better next up we have asp.net core",
    "start": "1635039",
    "end": "1642200"
  },
  {
    "text": "which has also gotten a lot of updates now Blazer is a part of everything that's been updated in asp.net core",
    "start": "1642200",
    "end": "1648880"
  },
  {
    "text": "we're not going to spend I have one slide where I'm just mentioning something about Blazer but talking about",
    "start": "1648880",
    "end": "1654480"
  },
  {
    "text": "Blazer right now is it's like in a middle ground of in Net 7 it worked a certain way now they've changed",
    "start": "1654480",
    "end": "1660679"
  },
  {
    "text": "everything and by net 9 comes out they've going to change it again so next year if I'm allowed to come back I can",
    "start": "1660679",
    "end": "1667200"
  },
  {
    "text": "have more slides on Blazer but right now it's a great way to do full stack web development but expect that it's going",
    "start": "1667200",
    "end": "1673159"
  },
  {
    "text": "to change quite a bit going forward so the changes with asp.net core in general is that they now have support",
    "start": "1673159",
    "end": "1679480"
  },
  {
    "text": "for HTTP 3 again performance improvements as well Net 7 introduce rate limiting and",
    "start": "1679480",
    "end": "1686440"
  },
  {
    "text": "output caching support there's a lot that's happening internally as well support for metrics and complex binding",
    "start": "1686440",
    "end": "1692640"
  },
  {
    "text": "and quite a lot of of great things so again let's jump over to visual studio I have a project that's using",
    "start": "1692640",
    "end": "1700320"
  },
  {
    "text": "asp.net core and the first thing that I want to show you is a New Concept called a key",
    "start": "1700320",
    "end": "1706840"
  },
  {
    "text": "service a ke service is a way for me to to register the same interface multiple",
    "start": "1706840",
    "end": "1712640"
  },
  {
    "text": "times with my services collection so I can say that I have an I cache if you",
    "start": "1712640",
    "end": "1717919"
  },
  {
    "text": "ask for that I'm going to give you an in-memory cache but if you happen to say that you'd like to get a distributed",
    "start": "1717919",
    "end": "1724919"
  },
  {
    "text": "cache if that's available I've added a named one or a keyed service to say that hey I'd like to get the distributed",
    "start": "1724919",
    "end": "1731480"
  },
  {
    "text": "cache if it's not available or if you pass something else that's fine as well it's just to indicate to the service",
    "start": "1731480",
    "end": "1738120"
  },
  {
    "text": "provider service collection that you'd like to get something uh if that's available so I can use this inside for",
    "start": "1738120",
    "end": "1744880"
  },
  {
    "text": "example I have a map get here this here is a top level statement using minimal apis which is the new thing to build",
    "start": "1744880",
    "end": "1751960"
  },
  {
    "text": "really small services using asp.net core simply map mapping the root of my application to um to return some data I",
    "start": "1751960",
    "end": "1760679"
  },
  {
    "text": "have this um injected thing here so every property that you add to a map get",
    "start": "1760679",
    "end": "1766480"
  },
  {
    "text": "if that doesn't come in from the requ the service collection will try to to pass that instance for you in this case",
    "start": "1766480",
    "end": "1773559"
  },
  {
    "text": "I'm saying I want an iach preferably I'd like to get the key service memory or",
    "start": "1773559",
    "end": "1779600"
  },
  {
    "text": "I'd like to get distributed and if you misspell that you might have a problem might always give",
    "start": "1779600",
    "end": "1786200"
  },
  {
    "text": "you the default one so this here is a good alternative to allow you to choose what you want because previously to this",
    "start": "1786200",
    "end": "1793080"
  },
  {
    "text": "you had to write um an extra interface to register the same thing or sometimes you had a little bit of a problem uh was",
    "start": "1793080",
    "end": "1799279"
  },
  {
    "text": "a bit random next thing um I mentioned this quite briefly they added rate limiting",
    "start": "1799279",
    "end": "1805039"
  },
  {
    "text": "in Net 7 if you haven't seen this you can simply append rate limiting to your minimal API so say that I want this to",
    "start": "1805039",
    "end": "1811480"
  },
  {
    "text": "be rate limited now this is a per service right so if I say you're only allowed to call this endpoint once every",
    "start": "1811480",
    "end": "1818039"
  },
  {
    "text": "second and you can QE one request for a fixed window uh then that would only be",
    "start": "1818039",
    "end": "1823480"
  },
  {
    "text": "viable for this instance if you have a distributed system that would be per service right ideally you'd have rate",
    "start": "1823480",
    "end": "1830000"
  },
  {
    "text": "limiting on you know a load balancer but in this case here if you have a very small service you might be running your",
    "start": "1830000",
    "end": "1835480"
  },
  {
    "text": "thing in your basement like then this is a good addition they've also improved uh on the",
    "start": "1835480",
    "end": "1841840"
  },
  {
    "text": "debugging experience so let me show you actually before I do that let's scroll down a little bit here and talk about",
    "start": "1841840",
    "end": "1847399"
  },
  {
    "text": "one more thing before I show you the debugger experience there's a concept called short circuiting routes so imagine that",
    "start": "1847399",
    "end": "1854640"
  },
  {
    "text": "I have a huge amount of middlewares registered that request has to go through and I want to add a robots.txt",
    "start": "1854640",
    "end": "1861760"
  },
  {
    "text": "or add an endpoint that just returns some static data it's quite unnecessary",
    "start": "1861760",
    "end": "1867720"
  },
  {
    "text": "that I have to go through all the middlewares in the entire pipeline that way you can Skip by it by just short",
    "start": "1867720",
    "end": "1873559"
  },
  {
    "text": "circuiting to say I want to execute immediately by adding dot short circuit to your endpoints it's going to skip all",
    "start": "1873559",
    "end": "1880240"
  },
  {
    "text": "the middlewares all the cores all the authentication all of the all of",
    "start": "1880240",
    "end": "1886440"
  },
  {
    "text": "that next up they've done support for complex bindings and support for the",
    "start": "1886440",
    "end": "1892360"
  },
  {
    "text": "anti foru token so in this case here I have an a map get again where I expect",
    "start": "1892360",
    "end": "1897919"
  },
  {
    "text": "an i antiforgery to be passed into this action I can create an antiforgery token",
    "start": "1897919",
    "end": "1903480"
  },
  {
    "text": "and I can add this to my form and then I can say that I want to post this into another action again I'm using the raw",
    "start": "1903480",
    "end": "1910159"
  },
  {
    "text": "string literals to code my HTML inline here starting to feel like PHP like I",
    "start": "1910159",
    "end": "1915320"
  },
  {
    "text": "did 25 years ago again sorry all right should probably",
    "start": "1915320",
    "end": "1922159"
  },
  {
    "text": "have this in a separate file anyways so the um the consumer side of things of",
    "start": "1922159",
    "end": "1927840"
  },
  {
    "text": "that uh that post that gets this passed into it I have a map post called upload that accepts an I form file so this",
    "start": "1927840",
    "end": "1935240"
  },
  {
    "text": "complex binding allows me to get a form file passed into this action as well as",
    "start": "1935240",
    "end": "1940360"
  },
  {
    "text": "the I antiforgery obviously we have to validate the request for that anti forgy",
    "start": "1940360",
    "end": "1946120"
  },
  {
    "text": "otherwise you're going to have a problem that's outside of scope of this talk here but just want to mention it um if I",
    "start": "1946120",
    "end": "1951919"
  },
  {
    "text": "run this with a debugger attached and I'm going to post a file into this endpoint and just show you the um the",
    "start": "1951919",
    "end": "1959760"
  },
  {
    "text": "debugger experience it's quite a subtle change they've done to make it better but if we",
    "start": "1959760",
    "end": "1965720"
  },
  {
    "text": "hover the context hopefully this is big enough for you all to see um everything here is a",
    "start": "1965720",
    "end": "1973240"
  },
  {
    "text": "little bit better than it used to be it they've added information right right here when I just expand the context",
    "start": "1973240",
    "end": "1980320"
  },
  {
    "text": "previously you had to drill down into all of these different properties to get more information a little thing that",
    "start": "1980320",
    "end": "1986279"
  },
  {
    "text": "just reduces the amount of time that I have to spend to find my my information all right so that's the",
    "start": "1986279",
    "end": "1992519"
  },
  {
    "text": "changes in asp.net together with all the performance improvements internally in net they've also done that same type of",
    "start": "1992519",
    "end": "1998799"
  },
  {
    "text": "work in internal of asp.net core to make it even faster and use less",
    "start": "1998799",
    "end": "2003840"
  },
  {
    "text": "allocations so to be honest like minimal apis is probably the way going forward if you want to build small services in a",
    "start": "2003840",
    "end": "2010919"
  },
  {
    "text": "microservice architecture I still do MVC projects for really large Enterprise",
    "start": "2010919",
    "end": "2017080"
  },
  {
    "text": "projects where you still have to use MVC but for smaller things where I have an backin for an app for example I try to",
    "start": "2017080",
    "end": "2023399"
  },
  {
    "text": "build minimal apis all right so to summarize that we saw these shortcircuit routes which",
    "start": "2023399",
    "end": "2030200"
  },
  {
    "text": "executes immediately bypasses that entire request pipeline key Services",
    "start": "2030200",
    "end": "2035279"
  },
  {
    "text": "allows me to say hey I want to get a specific service if that's available you're also allowed to pass in whatever",
    "start": "2035279",
    "end": "2041519"
  },
  {
    "text": "you want this is a nice addition I really like this and of course the complex bindings allows us to pass in",
    "start": "2041519",
    "end": "2048320"
  },
  {
    "text": "really complex things like a form file now I did promise that I I was going to mention Blazer I don't have a demo for",
    "start": "2048320",
    "end": "2054878"
  },
  {
    "text": "Blazer but it is the um with net8 it is the a full stack web UI experience it's",
    "start": "2054879",
    "end": "2061878"
  },
  {
    "text": "now really the thing that you want to use if you're building full stack web development on net at least for the web",
    "start": "2061879",
    "end": "2068919"
  },
  {
    "text": "right but it may change with the next version of net as well so I'm going to add a little bit of a uh a note there",
    "start": "2068919",
    "end": "2075440"
  },
  {
    "text": "saying that this could actually change quite a bit uh it's still quite new they're still doing a lot of work on Blazer but it's a very interesting time",
    "start": "2075440",
    "end": "2082800"
  },
  {
    "text": "to be a net developer if you're doing full stack web UI speaking of UI they have also done a",
    "start": "2082800",
    "end": "2088960"
  },
  {
    "text": "lot of work on Maui anyone here building mobile apps on net no one oh wow oh wow all right",
    "start": "2088960",
    "end": "2099880"
  },
  {
    "text": "bye I'm kidding um I do understand why again sorry to anyone from Microsoft",
    "start": "2099880",
    "end": "2105440"
  },
  {
    "text": "here um so with net 6 that they didn't really make the deadline so net Maui is",
    "start": "2105440",
    "end": "2111359"
  },
  {
    "text": "the cross crossplatform mobile experience for net it's really saming",
    "start": "2111359",
    "end": "2116520"
  },
  {
    "text": "where they've done a lot of improvements to it with net 6 they kind of missed the deadline to get it released they weren't really done with Net 7 they they pretty",
    "start": "2116520",
    "end": "2124440"
  },
  {
    "text": "much forced it out they made it GA it's it work worked but being Net 7 which now",
    "start": "2124440",
    "end": "2130240"
  },
  {
    "text": "ends support um in May this year no one really want to jump on for for a",
    "start": "2130240",
    "end": "2137000"
  },
  {
    "text": "shortterm support version to you know move their entire app if they have one",
    "start": "2137000",
    "end": "2142560"
  },
  {
    "text": "so with net8 it becomes a little bit more of an important release so really a more fair comparison",
    "start": "2142560",
    "end": "2148920"
  },
  {
    "text": "would probably be that in Net 7 the picture wasn't really complete with net Maui but now with net 8 the idea is that",
    "start": "2148920",
    "end": "2156000"
  },
  {
    "text": "everything is just going to work and be very nice nice there's a lot of problems but they're going to work on that and",
    "start": "2156000",
    "end": "2161800"
  },
  {
    "text": "and fix all the the small issues that keep arising but to be honest comparing the experience of building a mobile app",
    "start": "2161800",
    "end": "2168560"
  },
  {
    "text": "right now to what it used to be four or five years ago the experience is actually getting very good and it works",
    "start": "2168560",
    "end": "2174680"
  },
  {
    "text": "quite well the idea is of course that we build one application and Target all the different",
    "start": "2174680",
    "end": "2180520"
  },
  {
    "text": "platforms it often works very well unless you have to use very specific um",
    "start": "2180520",
    "end": "2186839"
  },
  {
    "text": "stuff for this spefic platform now we have our app code we have a layer of net Mau we we it targets different like iOS",
    "start": "2186839",
    "end": "2193680"
  },
  {
    "text": "Android and so forth and you can build this on all the different net pieces and",
    "start": "2193680",
    "end": "2199160"
  },
  {
    "text": "again being built on net a internally it makes use of all the improvements to aot",
    "start": "2199160",
    "end": "2204640"
  },
  {
    "text": "to um all the performance improvements using all of those different smart things internally all right so we're not going",
    "start": "2204640",
    "end": "2210760"
  },
  {
    "text": "to spend more time talking about net Mau since no one in here is doing mobile uh let's talk about C 12 instead",
    "start": "2210760",
    "end": "2218760"
  },
  {
    "text": "C 12 introduces quite a lot of small features but are that are going to",
    "start": "2218760",
    "end": "2225599"
  },
  {
    "text": "change how we build our applications and traditionally with C I've done what's",
    "start": "2225599",
    "end": "2231280"
  },
  {
    "text": "new in C talks for the past many years and it's interesting because every year",
    "start": "2231280",
    "end": "2236839"
  },
  {
    "text": "they keep adding more and more and more and more and if you compare C today with",
    "start": "2236839",
    "end": "2242280"
  },
  {
    "text": "what it used to be with c 2 or three or four for example it's very different but",
    "start": "2242280",
    "end": "2247680"
  },
  {
    "text": "it changes with the times and with the the types of applications that we build I mean when c 1 came out like there was",
    "start": "2247680",
    "end": "2254440"
  },
  {
    "text": "no reason for async and a weight the idea around even using async and a weight and building mobile apps using C",
    "start": "2254440",
    "end": "2261560"
  },
  {
    "text": "was really out of the question back then we still used Symbian OS and built C++",
    "start": "2261560",
    "end": "2268040"
  },
  {
    "text": "applications um so with that being said there's so much in C it can be quite hard to follow along with all the",
    "start": "2268040",
    "end": "2274520"
  },
  {
    "text": "features that have been added c 7 introduced pattern matching and a lot of",
    "start": "2274520",
    "end": "2279800"
  },
  {
    "text": "more patterns came in C 8 9 and 10 and 11 fortunately enough we don't have more",
    "start": "2279800",
    "end": "2286160"
  },
  {
    "text": "patterns to cover now maybe the next version of C will have more patterns added to it so let's actually look at",
    "start": "2286160",
    "end": "2292000"
  },
  {
    "text": "what's new in C 12 there's um something called a primary",
    "start": "2292000",
    "end": "2297280"
  },
  {
    "text": "Constructor I briefly showed you this on the record type it's very different though if we look at primary",
    "start": "2297280",
    "end": "2303200"
  },
  {
    "text": "Constructors on records work very different uh from the primary Constructor on a class the record has U",
    "start": "2303200",
    "end": "2310880"
  },
  {
    "text": "the primary Constructors if you define a property on that it actually creates a backing field it creates a publicly",
    "start": "2310880",
    "end": "2316880"
  },
  {
    "text": "exposed property it gives you value based equality and gives you a whole lot of things if you use primary",
    "start": "2316880",
    "end": "2322640"
  },
  {
    "text": "Constructors on a class that looks very similar to on the on the record all it",
    "start": "2322640",
    "end": "2327880"
  },
  {
    "text": "does is create a backing field in the Constructor doesn't create anything that publicly exposes that that's both good",
    "start": "2327880",
    "end": "2335160"
  },
  {
    "text": "and bad if you know why it's probably good I don't think that I would like all my private fields to be exposed publicly",
    "start": "2335160",
    "end": "2341760"
  },
  {
    "text": "at least not if I'm doing good design we're going to take a look at that in just a second now they also introduce",
    "start": "2341760",
    "end": "2348040"
  },
  {
    "text": "collection Expressions I've showed this quite a few times now but I haven't really highlighted that this is a c 12",
    "start": "2348040",
    "end": "2353960"
  },
  {
    "text": "feature This Together what's known as a spread operator is supposed to make it easier to work with collections of",
    "start": "2353960",
    "end": "2361000"
  },
  {
    "text": "data there's also something called an Interceptor um which is a way to replace",
    "start": "2361000",
    "end": "2366800"
  },
  {
    "text": "code when you're compiling your application can be quite dangerous I'm going to show an example of that as well",
    "start": "2366800",
    "end": "2372200"
  },
  {
    "text": "there's optional parameters in lambdas LS any type inline arrays ref read only",
    "start": "2372200",
    "end": "2377760"
  },
  {
    "text": "parameters and an attribute to Define that you're building something that's experimental so you have to go into your",
    "start": "2377760",
    "end": "2384640"
  },
  {
    "text": "application and say Hey I want to enable experimental uh features so that you can internally build things that will give",
    "start": "2384640",
    "end": "2391119"
  },
  {
    "text": "you a compiler warning if someone's using something that you determine to be experimental don't use this for",
    "start": "2391119",
    "end": "2396680"
  },
  {
    "text": "everything you build that's going to make co-workers",
    "start": "2396680",
    "end": "2402599"
  },
  {
    "text": "angry all right so let's jump over to visual studio and look at",
    "start": "2402599",
    "end": "2407839"
  },
  {
    "text": "C2 so the first thing that I want to look at is the collection expressions and the spread",
    "start": "2407839",
    "end": "2414240"
  },
  {
    "text": "operator here we go so this here is a new syntax I don't have to new up a new",
    "start": "2414240",
    "end": "2420200"
  },
  {
    "text": "array I don't have to use a an object or a collection initializer this in",
    "start": "2420200",
    "end": "2425440"
  },
  {
    "text": "comparison to what the amount of code that you had to write before it's uh less few fewer characters right but it's",
    "start": "2425440",
    "end": "2432720"
  },
  {
    "text": "actually doing a lot more than just that I'm saying that I want this to be a list of a bite but the collection expression is in",
    "start": "2432720",
    "end": "2440400"
  },
  {
    "text": "fact smart enough to look at the left hand side of my equal sign as well so I could change this to be a bite array",
    "start": "2440400",
    "end": "2448119"
  },
  {
    "text": "instead and it would still work so I could change this to pretty much anything that's related to what I",
    "start": "2448119",
    "end": "2455760"
  },
  {
    "text": "have on the right hand side I could say that well how about I want this as a span of",
    "start": "2455760",
    "end": "2461160"
  },
  {
    "text": "bite and then this would be that performance type pointing to that arbitrary amount of",
    "start": "2461160",
    "end": "2466880"
  },
  {
    "text": "memory so this is a very nice addition and you can even use this to then combine multiple different different",
    "start": "2466880",
    "end": "2473720"
  },
  {
    "text": "types of arrays and create a new one so let's just revert this back to make it a little bit more interesting I have this",
    "start": "2473720",
    "end": "2479560"
  },
  {
    "text": "list of bytes here that I'm initializing with my four bytes I then want to say",
    "start": "2479560",
    "end": "2484599"
  },
  {
    "text": "hey I want to calculate a check sum for this this data I've just made up some check",
    "start": "2484599",
    "end": "2489880"
  },
  {
    "text": "some data here at the end normally you get them in two separate pieces right I'd like to combine them in one array",
    "start": "2489880",
    "end": "2495640"
  },
  {
    "text": "there are multiple different ways to do this but with C 12 we get this spread operator which looks very much like a",
    "start": "2495640",
    "end": "2502079"
  },
  {
    "text": "range but a dot dot followed by the array will take this entire this entire",
    "start": "2502079",
    "end": "2508240"
  },
  {
    "text": "array here and pretty much just put it in here super smart and do the same thing",
    "start": "2508240",
    "end": "2514240"
  },
  {
    "text": "for the rest as well and as you see here we can even use the spread operator and combine it with actually defining the",
    "start": "2514240",
    "end": "2520760"
  },
  {
    "text": "elements um so it's pretty much doing this but this syntax here is a little bit more concise and it doesn't require",
    "start": "2520760",
    "end": "2527359"
  },
  {
    "text": "me to repeat myself and what I'm doing here is that I'm in fact now combining a list of",
    "start": "2527359",
    "end": "2533160"
  },
  {
    "text": "bites as well as a bite array they're to two totally different things right the list I can add elements to the bite",
    "start": "2533160",
    "end": "2538839"
  },
  {
    "text": "array I cannot obviously but I'm saying that hey I want this to be a span of a bite which means that it's this super",
    "start": "2538839",
    "end": "2545200"
  },
  {
    "text": "performant type which underly array or structure or whatever it's using internally to represent this data",
    "start": "2545200",
    "end": "2552040"
  },
  {
    "text": "it doesn't matter really as long as I know that this is really performant to work with I could also if I wanted to",
    "start": "2552040",
    "end": "2558400"
  },
  {
    "text": "say that well combine these two and put them into a list of a bite making it possible for me to add more elements or",
    "start": "2558400",
    "end": "2565440"
  },
  {
    "text": "just use a normal biter so again the uh collection Expressions is really powerful and allows us to kind of",
    "start": "2565440",
    "end": "2571839"
  },
  {
    "text": "configure exactly how we want that to be represented all right so the next thing",
    "start": "2571839",
    "end": "2577240"
  },
  {
    "text": "that they've added is primary Constructors or support for primary Constructors so I have a class called",
    "start": "2577240",
    "end": "2583880"
  },
  {
    "text": "user I guess would it make sense if I used a primary Constructor on my user to",
    "start": "2583880",
    "end": "2589599"
  },
  {
    "text": "say hey I require a Constructor of uh that accepts the username I would probably say that I",
    "start": "2589599",
    "end": "2596400"
  },
  {
    "text": "would prefer this to include uh or use a record instead because it's a dto or a data class so I would very much say that",
    "start": "2596400",
    "end": "2603440"
  },
  {
    "text": "hey this is a record instead which would make this very different I can't even spell a record if I say hey I want a",
    "start": "2603440",
    "end": "2610440"
  },
  {
    "text": "record and I want that to be a username and you can only set it once like I've reduced the amount of code that I had to",
    "start": "2610440",
    "end": "2615880"
  },
  {
    "text": "write but I also got the benefit of this being using value based equality which",
    "start": "2615880",
    "end": "2621240"
  },
  {
    "text": "means that if I have two instances of this user and compare them to each other it's going to compare the usernames",
    "start": "2621240",
    "end": "2626800"
  },
  {
    "text": "values instead of the references and that doesn't work with en",
    "start": "2626800",
    "end": "2631880"
  },
  {
    "text": "framework so you'd have to go back to use a normal dto but for anything else like that your EXP exposing over a",
    "start": "2631880",
    "end": "2637839"
  },
  {
    "text": "domain object or something that you're exposing over the web this makes a lot of sense I'm going to revert that just to",
    "start": "2637839",
    "end": "2645960"
  },
  {
    "text": "compare it with what I actually think this is viable for and actually how you could use that private field so",
    "start": "2645960",
    "end": "2651760"
  },
  {
    "text": "internally this just creates a Constructor that sets a private field if you want to use that anywhere inside",
    "start": "2651760",
    "end": "2656960"
  },
  {
    "text": "your your class you'd have to then actually access it where it makes sense to use this is",
    "start": "2656960",
    "end": "2662800"
  },
  {
    "text": "probably for classes like an order controller where I can now remove The Constructor from my controller class",
    "start": "2662800",
    "end": "2669880"
  },
  {
    "text": "like if you're doing MVC for example I do that quite a lot and I say hey I want these 15 interfaces injected into my",
    "start": "2669880",
    "end": "2676000"
  },
  {
    "text": "controller I know that's probably not the best practice but you know I like to to tightly couple my controllers to",
    "start": "2676000",
    "end": "2681359"
  },
  {
    "text": "everything in the application so it does everything then I can at least reduce the amount of code that I write in my",
    "start": "2681359",
    "end": "2687640"
  },
  {
    "text": "class so I can say that hey this here uh once and I use repository injected to it",
    "start": "2687640",
    "end": "2692880"
  },
  {
    "text": "it's going to store this as a private field in my class and we can then access access it anywhere inside any methods",
    "start": "2692880",
    "end": "2699960"
  },
  {
    "text": "inside this application if you haven't seen this this before this here is in",
    "start": "2699960",
    "end": "2705079"
  },
  {
    "text": "fact returning multiple values from the same method it's using a topple or Tuple or whatever you want to call it",
    "start": "2705079",
    "end": "2710520"
  },
  {
    "text": "introducing c 7 just a fancy way of skipping having to introduce a separate structure or class",
    "start": "2710520",
    "end": "2717440"
  },
  {
    "text": "to return this data and in here I can access that repository it's not going to be publicly exposed or anything like",
    "start": "2717440",
    "end": "2723720"
  },
  {
    "text": "that so a little bit of a nice way to reduce the amount of code I also now want to show you the the",
    "start": "2723720",
    "end": "2730960"
  },
  {
    "text": "last thing of C2 that's um quite an interesting language feature to be",
    "start": "2730960",
    "end": "2736240"
  },
  {
    "text": "honest now there's this concept of an Interceptor an Interceptor allows me to",
    "start": "2736240",
    "end": "2742680"
  },
  {
    "text": "intercept code kind of obvious by its naming right I've created a class called",
    "start": "2742680",
    "end": "2747720"
  },
  {
    "text": "a logger the logger itself doesn't do a lot it has a method called log on line",
    "start": "2747720",
    "end": "2754520"
  },
  {
    "text": "seven it calls log internal if if I press F12 we can see that it's going to throw an",
    "start": "2754520",
    "end": "2760400"
  },
  {
    "text": "exception right super simple and then I call logger.log with some text this will",
    "start": "2760400",
    "end": "2766839"
  },
  {
    "text": "call this method and then throw an exception if we run this with the debugger",
    "start": "2766839",
    "end": "2773040"
  },
  {
    "text": "attached anyone think this is going to throw an exception it would be so funny if that",
    "start": "2773040",
    "end": "2778480"
  },
  {
    "text": "was a trick question and if it actually through an exception let's see what happens I'm",
    "start": "2778480",
    "end": "2783839"
  },
  {
    "text": "going to step into the logger and we can see here that it's it's actually going to try and call log internal but if I",
    "start": "2783839",
    "end": "2790200"
  },
  {
    "text": "try to step into that it actually just steps over it it didn't do anything and if I rerun the application",
    "start": "2790200",
    "end": "2797240"
  },
  {
    "text": "without the debuger attached we can see that it actually prints hello world to my console so what's going on here",
    "start": "2797240",
    "end": "2804079"
  },
  {
    "text": "what's actually happening in the application well let me show you I've",
    "start": "2804079",
    "end": "2809240"
  },
  {
    "text": "introduced a separate class actually if I do logger dot you can see that",
    "start": "2809240",
    "end": "2815640"
  },
  {
    "text": "there's I I'm going to try and zoom in here there's a debug log which is an",
    "start": "2815640",
    "end": "2820760"
  },
  {
    "text": "extension method on the logger itself so where is that coming from the",
    "start": "2820760",
    "end": "2827440"
  },
  {
    "text": "logger doesn't have that on its on its own right so that has to be defined somewhere else extension methods have",
    "start": "2827440",
    "end": "2833680"
  },
  {
    "text": "been around for a very long time I've introduced a file called Interceptor",
    "start": "2833680",
    "end": "2839520"
  },
  {
    "text": "docs this here is defining a um an extension method for that particular",
    "start": "2839520",
    "end": "2845640"
  },
  {
    "text": "code piece that I want to replace I'm then saying I'm going to intercept",
    "start": "2845640",
    "end": "2851000"
  },
  {
    "text": "whatever is inside this code file on line seven",
    "start": "2851000",
    "end": "2856800"
  },
  {
    "text": "right on line seven which is this call here I'm going to replace this code with",
    "start": "2856800",
    "end": "2862720"
  },
  {
    "text": "this call to this method instead and then what I also did I added the attribute debugger",
    "start": "2862720",
    "end": "2869680"
  },
  {
    "text": "hidden this is the best prank to pull on a coworker I love it um",
    "start": "2869680",
    "end": "2877359"
  },
  {
    "text": "you can actually see that say external code inside the uh the stack Trace but it gets so hard to actually figure out",
    "start": "2877359",
    "end": "2883920"
  },
  {
    "text": "what's going on uh it's a lot of fun so what actually happens here is that it calls this extension method obviously",
    "start": "2883920",
    "end": "2890920"
  },
  {
    "text": "you have to know the exact line in the file as well as which which character it starts at for it to know what to",
    "start": "2890920",
    "end": "2897800"
  },
  {
    "text": "replace so why would this be useful well imagine pulling down a nug",
    "start": "2897800",
    "end": "2904520"
  },
  {
    "text": "package that has a source generator that will generate source for your application it can inspect your current",
    "start": "2904520",
    "end": "2910200"
  },
  {
    "text": "code by Def looking at um the code structure it has access to all your files it can then create one of these",
    "start": "2910200",
    "end": "2917440"
  },
  {
    "text": "interceptors when you compile your application to replace that very much like IL weaving to to use fodi for",
    "start": "2917440",
    "end": "2924040"
  },
  {
    "text": "example to replace code that that makes your application more performant this is used quite heavily internally asp.net",
    "start": "2924040",
    "end": "2931599"
  },
  {
    "text": "core uses this especially when you're do using ahead of time compilation to generate faster um code for your",
    "start": "2931599",
    "end": "2939040"
  },
  {
    "text": "specific actions so it is quite useful um but I use it to prank my",
    "start": "2939040",
    "end": "2946040"
  },
  {
    "text": "co-workers uh which is quite fun I mean you wouldn't write this yourself if you have access to the code base I mean go",
    "start": "2946040",
    "end": "2952240"
  },
  {
    "text": "in and change the code because this has to be a part of the actual compilation so um but it is great for Source",
    "start": "2952240",
    "end": "2959319"
  },
  {
    "text": "generation which is a quite complex topic on its own but it's used a lot with ahead of time compilation so that",
    "start": "2959319",
    "end": "2965839"
  },
  {
    "text": "being said that's kind of the things inside C 12 and I do reckon that the most useful thing that you're going to",
    "start": "2965839",
    "end": "2971559"
  },
  {
    "text": "see a lot is the collection Expressions this is something that's going to change how you access your elements how you",
    "start": "2971559",
    "end": "2977640"
  },
  {
    "text": "work with ar race of data and together with using this span uh this is going to make anything working with arrays and",
    "start": "2977640",
    "end": "2984480"
  },
  {
    "text": "collections of data a lot more performant I will say though because this is something that's quite confusing",
    "start": "2984480",
    "end": "2990720"
  },
  {
    "text": "the span itself while it's been around for for a while is anyone here using spans regularly",
    "start": "2990720",
    "end": "2996799"
  },
  {
    "text": "okay a handful um it can be quite tricky to find a use case for this everywhere",
    "start": "2996799",
    "end": "3003200"
  },
  {
    "text": "where you use a span it has to be in a context where you're not using async A8",
    "start": "3003200",
    "end": "3009839"
  },
  {
    "text": "you can't use it with yield and there's a couple of more places where you can't use this because it's using the stack to",
    "start": "3009839",
    "end": "3015960"
  },
  {
    "text": "be very performant which means that when you leave the stack frame all the data is going to be lost so that's why you",
    "start": "3015960",
    "end": "3022160"
  },
  {
    "text": "can't use this with the async no8 there's also a thing called a memory of",
    "start": "3022160",
    "end": "3027720"
  },
  {
    "text": "T which is going to not that memory uh there's memory of t as well",
    "start": "3027720",
    "end": "3034799"
  },
  {
    "text": "you'd have to then write a little bit more code to convert that span into the memory of T but it's working quite",
    "start": "3034799",
    "end": "3040680"
  },
  {
    "text": "similarly except it's stored on the Heap you have to move it back to the stack to do all the performance operations but at",
    "start": "3040680",
    "end": "3046920"
  },
  {
    "text": "least you have a similar structure to work with it so if you find yourself wanting to use a span and that doesn't",
    "start": "3046920",
    "end": "3052799"
  },
  {
    "text": "work see if you can use the memory of te instead again this is something that use",
    "start": "3052799",
    "end": "3058000"
  },
  {
    "text": "quite heavily inside the um The NET Framework or net sorry um I would also",
    "start": "3058000",
    "end": "3064400"
  },
  {
    "text": "suggest like if you want to learn more about all of this all of the performance improvements there's uh Stephen to on",
    "start": "3064400",
    "end": "3070680"
  },
  {
    "text": "Microsoft he wrote writes a blog post every year when they release the new versions ofn net I'm not really going to",
    "start": "3070680",
    "end": "3077240"
  },
  {
    "text": "call it a blog post because you need two weeks vacation to read through it it's like 450 pages long um but that just",
    "start": "3077240",
    "end": "3085040"
  },
  {
    "text": "shows how much goes into to making do net more performant with every release there's performance comparisons on how",
    "start": "3085040",
    "end": "3090799"
  },
  {
    "text": "to make it better and and and why it's faster allocation wise why it's better and also of course making the debugger",
    "start": "3090799",
    "end": "3097839"
  },
  {
    "text": "experience a lot better to kind of to summarize exactly what's going on here we have the collection Expressions that",
    "start": "3097839",
    "end": "3104599"
  },
  {
    "text": "are going to make it a little bit different working with this we can use this with the span the arrays the lists",
    "start": "3104599",
    "end": "3110400"
  },
  {
    "text": "um one thing that I'm going to say here is that while that looks like it's using the range to slice up the syntax the",
    "start": "3110400",
    "end": "3116000"
  },
  {
    "text": "spread op operator is different if you'd like to say I only want to get a little piece of the payload you'd have to do",
    "start": "3116000",
    "end": "3122440"
  },
  {
    "text": "that first to slice it off and then say that that is what you want to spread onto your array hopefully that makes",
    "start": "3122440",
    "end": "3128280"
  },
  {
    "text": "sense and then of course for the primary Constructors we want to use that for classes where it makes sense I would use",
    "start": "3128280",
    "end": "3134160"
  },
  {
    "text": "it for an order controller for example instead of using it for uh a normal dto or something stored in my",
    "start": "3134160",
    "end": "3141119"
  },
  {
    "text": "database because if I take this primary Constructor on my user here which takes",
    "start": "3141119",
    "end": "3146319"
  },
  {
    "text": "a name and as well as the daytime offset also notice how I'm using lowercase here to indicate that this is actually a",
    "start": "3146319",
    "end": "3152799"
  },
  {
    "text": "private field I'm not going to prefix my private Fields with an underscore let's",
    "start": "3152799",
    "end": "3158240"
  },
  {
    "text": "stop doing Hungarian notation but this here is in fact a private field and I can see that by looking at what's",
    "start": "3158240",
    "end": "3164599"
  },
  {
    "text": "decompiled so it actually introduced this backing field it introduced The Constructor and while it does provide me",
    "start": "3164599",
    "end": "3170920"
  },
  {
    "text": "with a nice two string implementation as well this is quite limiting I would prefer to rather use a record Ty for my",
    "start": "3170920",
    "end": "3177559"
  },
  {
    "text": "data objects they also introduced this optional parameters in the Lambda",
    "start": "3177559",
    "end": "3182680"
  },
  {
    "text": "Expressions which is quite useful if you're doing minimal apis I used this in the minimal API that I used earlier",
    "start": "3182680",
    "end": "3188680"
  },
  {
    "text": "which means that with the primary or the the default parameter or optional parameters in my Lambda I can call this",
    "start": "3188680",
    "end": "3194559"
  },
  {
    "text": "Lambda without actually having to specify that just like any optional parameters on any",
    "start": "3194559",
    "end": "3200200"
  },
  {
    "text": "method they're also introducing something called Alias any type so why I",
    "start": "3200200",
    "end": "3205559"
  },
  {
    "text": "could say that I want want to say I have a point and that is this topple or Tuple",
    "start": "3205559",
    "end": "3211000"
  },
  {
    "text": "I don't I don't then have to repeat myself all over the place which is quite handy it's all really about reducing the",
    "start": "3211000",
    "end": "3218240"
  },
  {
    "text": "amount of code that we have to write get the compiler to figure things out for us and generate as much code as possible my",
    "start": "3218240",
    "end": "3225240"
  },
  {
    "text": "goal is to you know write better code that runs faster and has less bugs in it",
    "start": "3225240",
    "end": "3230319"
  },
  {
    "text": "so far C and net makes it a little bit easier and finally they're introducing",
    "start": "3230319",
    "end": "3235720"
  },
  {
    "text": "the interceptors which is heavily used within Source generators and simply you point to the method that you want to",
    "start": "3235720",
    "end": "3241799"
  },
  {
    "text": "intercept it doesn't you have to say the exact path to the file but again a",
    "start": "3241799",
    "end": "3247400"
  },
  {
    "text": "source generator or something that runs as a part of the compilation can easily figure this out now I'm also going to",
    "start": "3247400",
    "end": "3254119"
  },
  {
    "text": "say this that this the the interceptors you have to opt in to using the interceptors so if you uh if you're",
    "start": "3254119",
    "end": "3261359"
  },
  {
    "text": "pulling down an you package for example it can't just blindly intercept all of your operations because that would be",
    "start": "3261359",
    "end": "3267559"
  },
  {
    "text": "dangerous so you have to say exactly or explicitly Define which namespaces are allowed to replace um my",
    "start": "3267559",
    "end": "3275319"
  },
  {
    "text": "code uh this is heavily used internally in asp.net core so they're doing this to again improve performance they request",
    "start": "3275319",
    "end": "3281960"
  },
  {
    "text": "delegate generator uses this and we're probably going to see a lot more internally using all of the features of",
    "start": "3281960",
    "end": "3287440"
  },
  {
    "text": "C 12 and 11 and 10 to make things run faster and have optimized code paths",
    "start": "3287440",
    "end": "3293160"
  },
  {
    "text": "less allocations and all of that so again what's next in C there's this uh",
    "start": "3293160",
    "end": "3300200"
  },
  {
    "text": "language featur status page I think they've just announced one feature so far of what's coming in C 13 but knowing",
    "start": "3300200",
    "end": "3307920"
  },
  {
    "text": "exactly knowing Microsoft let's not yet talk about what's coming in C 13 because",
    "start": "3307920",
    "end": "3313520"
  },
  {
    "text": "it's going to change a lot until November when they release that as I mentioned earlier as well there's some",
    "start": "3313520",
    "end": "3319680"
  },
  {
    "text": "discussions on how to improve the internals of async and A8 in net itself",
    "start": "3319680",
    "end": "3325079"
  },
  {
    "text": "in the core Library you can follow that on GitHub it's a really interesting discussion on how to make threads better",
    "start": "3325079",
    "end": "3332200"
  },
  {
    "text": "how to do context switching faster and really how to again optimize the",
    "start": "3332200",
    "end": "3337319"
  },
  {
    "text": "performance of the applications even though that we can optimize by doing ahead of time",
    "start": "3337319",
    "end": "3342440"
  },
  {
    "text": "compilation and we can use all of these tricks to be more memory efficient it's not really as fast as a C++ application",
    "start": "3342440",
    "end": "3349640"
  },
  {
    "text": "optimized for a particular architecture but it's really good enough for most use",
    "start": "3349640",
    "end": "3355079"
  },
  {
    "text": "cases if you have a web application with millions of requests a lot of these will",
    "start": "3355079",
    "end": "3360640"
  },
  {
    "text": "these performance improvements especially allocation wise will make the uh hopefully the running the application",
    "start": "3360640",
    "end": "3367359"
  },
  {
    "text": "cheaper as you need less memory it's going to be faster you'll need less CPU power and so forth makes it easier to",
    "start": "3367359",
    "end": "3373839"
  },
  {
    "text": "scale the applications so really they're doing heavily work on all of the internals of",
    "start": "3373839",
    "end": "3379400"
  },
  {
    "text": "both C and dotnet if you like to listen to me I have about 25 courses on plural site",
    "start": "3379400",
    "end": "3385960"
  },
  {
    "text": "cover a lot about C and net in general and again if you have any questions like I'm happy to get emails sent to me",
    "start": "3385960",
    "end": "3393240"
  },
  {
    "text": "afterwards I always like talking about what's coming in C what's new in the language itself how net keeps evolving",
    "start": "3393240",
    "end": "3401760"
  },
  {
    "text": "there's so much happening in that space and it can be quite tricky to keep up I know by myself like I spend most of my",
    "start": "3401760",
    "end": "3408400"
  },
  {
    "text": "time trying to keep up with what happens in net what happens with C where is the language going and I said this earlier",
    "start": "3408400",
    "end": "3415640"
  },
  {
    "text": "that if if you are coming into CP and.net and haven't been around for a long time it can be a little bit",
    "start": "3415640",
    "end": "3422119"
  },
  {
    "text": "puzzling knowing exactly where do my old knowledge fit into this newer style of",
    "start": "3422119",
    "end": "3427680"
  },
  {
    "text": "application has anyone been out of the game for a while and like this is the first version of C that you see in like",
    "start": "3427680",
    "end": "3433920"
  },
  {
    "text": "two years yeah a couple yeah so this is probably a few of these things are probably very confusing and that's",
    "start": "3433920",
    "end": "3440200"
  },
  {
    "text": "totally fine and I'm not saying that everyone should now go back to their office and refactor their entire appli",
    "start": "3440200",
    "end": "3446160"
  },
  {
    "text": "apption to use C2 and just update to net 8 if it's possible that you can just",
    "start": "3446160",
    "end": "3452039"
  },
  {
    "text": "change your minimal apis or whatever type of application you're using to use the newest version that's great but",
    "start": "3452039",
    "end": "3458680"
  },
  {
    "text": "don't do it blindly don't just rewrite your applications to use the latest stuff that's rarely a good idea if",
    "start": "3458680",
    "end": "3465400"
  },
  {
    "text": "Visual Studio hints you that this can be optimized you can write less code by using this new language feature by all",
    "start": "3465400",
    "end": "3471520"
  },
  {
    "text": "means refactor that code piece but again just like when they introduce Nel reference typ",
    "start": "3471520",
    "end": "3476720"
  },
  {
    "text": "don't just enable things and just go on vacation and hope that it works when you get back there's um there should be a",
    "start": "3476720",
    "end": "3483079"
  },
  {
    "text": "little bit more thought going into it while this will help us write less code and more performant code it should with",
    "start": "3483079",
    "end": "3489599"
  },
  {
    "text": "like with anything be used with um with caution right we should exactly know where we want this to be um to be used",
    "start": "3489599",
    "end": "3496160"
  },
  {
    "text": "in our applications I hope you found this useful there's a lot happening in net and C this has been a roller coaster",
    "start": "3496160",
    "end": "3502400"
  },
  {
    "text": "of of a ride going through all of the features all of the stuff that's been added to it and I I hope to see you",
    "start": "3502400",
    "end": "3508880"
  },
  {
    "text": "again next year thank you so much for coming on the way out please remember to vote if you like this put a green thing",
    "start": "3508880",
    "end": "3514160"
  },
  {
    "text": "in the box if you didn't like it there's an exit over there without a box I'm kidding thank you so much",
    "start": "3514160",
    "end": "3522798"
  },
  {
    "text": "[Applause]",
    "start": "3523530",
    "end": "3529389"
  }
]