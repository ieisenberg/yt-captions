[
  {
    "text": "all right thank you for coming to this presentation uh Care Friendly data plus",
    "start": "8120",
    "end": "13280"
  },
  {
    "text": "functional plus ranges equals love it's the mic is not on okay",
    "start": "13280",
    "end": "21400"
  },
  {
    "text": "okay do we hear do you hear me now no no I can",
    "start": "30199",
    "end": "36960"
  },
  {
    "text": "shout it was very careful in telling me to be punctual",
    "start": "44680",
    "end": "51280"
  },
  {
    "text": "okay better no",
    "start": "61519",
    "end": "66720"
  },
  {
    "text": "no",
    "start": "66720",
    "end": "69720"
  },
  {
    "text": "ah one of the great joys of speaking at events like",
    "start": "73400",
    "end": "80118"
  },
  {
    "text": "this try now and see do you hear me now yeah I hear an echo okay good so thank",
    "start": "83840",
    "end": "89439"
  },
  {
    "text": "you all for com coming and welcome to this presentation cash friendly data plus functional plus ranges equals love",
    "start": "89439",
    "end": "96479"
  },
  {
    "text": "um I should say right away that if you are the kind of programmer who is intimidated by angle brackets and",
    "start": "96479",
    "end": "102840"
  },
  {
    "text": "parameter packs and IND directions oh so many IND directions you probably want to be another",
    "start": "102840",
    "end": "108479"
  },
  {
    "text": "talk uh otherwise enjoy uh a little bit about me",
    "start": "108479",
    "end": "113520"
  },
  {
    "text": "I'm B fer I live in Sweden I I'm fairly new to this programming thing I I've been doing it fulltime since 94",
    "start": "113520",
    "end": "120840"
  },
  {
    "text": "uh most of this in C plus I currently work for a net Insight",
    "start": "120840",
    "end": "126840"
  },
  {
    "text": "in in Sweden we do Network things like these machines they are used for example",
    "start": "126840",
    "end": "133319"
  },
  {
    "text": "to keep time in 5G networks 5G networks require extremely precise time and we",
    "start": "133319",
    "end": "139959"
  },
  {
    "text": "keep nation state size networks within a handful of nanc so ntp but a million",
    "start": "139959",
    "end": "146000"
  },
  {
    "text": "times better or media Networks you have a huge one here in Norway actually uh",
    "start": "146000",
    "end": "152879"
  },
  {
    "text": "broadcaster media broadcasters love these if you have watched any live televised event in the last 10 15 years",
    "start": "152879",
    "end": "158680"
  },
  {
    "text": "you have probably indirectly used our equipment so that is the kind of stuff that I tend to work",
    "start": "158680",
    "end": "166840"
  },
  {
    "text": "with daytime but let's go into the topic for",
    "start": "166840",
    "end": "173519"
  },
  {
    "text": "today the inspiration from this was primarily a talk by",
    "start": "173519",
    "end": "178560"
  },
  {
    "text": "mat uh about about the data oriented data oriented design and entity",
    "start": "178560",
    "end": "184040"
  },
  {
    "text": "component system where he he talks about how you lay out your data and how you",
    "start": "184040",
    "end": "190840"
  },
  {
    "text": "access your data and and implications it it has and that talk in its turn was",
    "start": "190840",
    "end": "197920"
  },
  {
    "text": "very much inspired by Mike Acton's amazing keynote from CP peon 2014 so 10",
    "start": "197920",
    "end": "204840"
  },
  {
    "text": "years ago uh I had at that time actually not watched Mike Acton's key not so I",
    "start": "204840",
    "end": "210599"
  },
  {
    "text": "did and he has some really really interesting thoughts about how how you",
    "start": "210599",
    "end": "217519"
  },
  {
    "text": "let your knowledge about how you access your data Drive Your Design so that your",
    "start": "217519",
    "end": "223599"
  },
  {
    "text": "program has efficient data accesses so that it's",
    "start": "223599",
    "end": "228840"
  },
  {
    "text": "fast the code he shows in that presentation however is a crime um but",
    "start": "228840",
    "end": "235239"
  },
  {
    "text": "the ideas are good so if you haven't watched it do you will learn from it it's it's really good but as I was",
    "start": "235239",
    "end": "243560"
  },
  {
    "text": "watching these I couldn't help thinking it should be possible to do",
    "start": "243560",
    "end": "249760"
  },
  {
    "text": "better it should be possible to make something that is easier so the basic idea with this say",
    "start": "249760",
    "end": "256199"
  },
  {
    "text": "that I have this struct s with some some",
    "start": "256199",
    "end": "261720"
  },
  {
    "text": "members x y z and d and I have a vector of them and I want to search for a struct where",
    "start": "261720",
    "end": "270400"
  },
  {
    "text": "D has some specific value so the way it does that we do a memory read and this",
    "start": "270400",
    "end": "277479"
  },
  {
    "text": "is about how the hardware works you you never read individual bytes of memory you you read a cach line so typically on",
    "start": "277479",
    "end": "284680"
  },
  {
    "text": "today's CP that is 64 bytes you read 64 bytes at a time and then you look at the first D no",
    "start": "284680",
    "end": "292240"
  },
  {
    "text": "it's it's not that one maybe this one no it's not that one do another",
    "start": "292240",
    "end": "297440"
  },
  {
    "text": "read look at the now no okay another read look at this D yeah",
    "start": "297440",
    "end": "303960"
  },
  {
    "text": "that that is the one now we can access the other data members the problem with this is that",
    "start": "303960",
    "end": "312199"
  },
  {
    "text": "memory bandwidth is a limited resource and in this toy example with just a handful of accesses it really doesn't",
    "start": "312199",
    "end": "318600"
  },
  {
    "text": "matter but imagine that the search was a few hundred maybe a few thousand elements then we have utilized about one",
    "start": "318600",
    "end": "325600"
  },
  {
    "text": "quarter of our available memory bandwidth and what's worse every time you read",
    "start": "325600",
    "end": "331759"
  },
  {
    "text": "from from memory into a cach line it means that that cach line hel held some",
    "start": "331759",
    "end": "336880"
  },
  {
    "text": "data it will be evicted which means that the rest of the program will have less",
    "start": "336880",
    "end": "341960"
  },
  {
    "text": "of its data in hot cache so your program will be slower compare that with",
    "start": "341960",
    "end": "348919"
  },
  {
    "text": "having a struct of vectors instead so I have a vector of x's or vector of y's or",
    "start": "348919",
    "end": "354280"
  },
  {
    "text": "vector of Zeds or vector of D's and I do the same thing I do a read check is it",
    "start": "354280",
    "end": "360440"
  },
  {
    "text": "this one no no no no no no no no another",
    "start": "360440",
    "end": "366120"
  },
  {
    "text": "read this one no no no yeah think that and then we access the other",
    "start": "366120",
    "end": "372560"
  },
  {
    "text": "ones again in this tiny toy example it doesn't matter but if if we had to search for several hundred",
    "start": "372560",
    "end": "378919"
  },
  {
    "text": "DS it would make a difference because we are essentially not wasting any of our",
    "start": "378919",
    "end": "384720"
  },
  {
    "text": "memory bandwidth we every bite red is used",
    "start": "384720",
    "end": "389880"
  },
  {
    "text": "except for the the last one where we actually found what we were looking for",
    "start": "389880",
    "end": "395599"
  },
  {
    "text": "so let's have a look at this so I have",
    "start": "395599",
    "end": "401599"
  },
  {
    "text": "a toy example here",
    "start": "401599",
    "end": "405880"
  },
  {
    "text": "uh so I have I have a vector with object I",
    "start": "407479",
    "end": "413639"
  },
  {
    "text": "populated with a million objects that is kind of excessive but it it means that I",
    "start": "413639",
    "end": "418680"
  },
  {
    "text": "will get number numbers that makes a difference visibly so so I populate with",
    "start": "418680",
    "end": "424919"
  },
  {
    "text": "a large number of of values and then I check I just run this Loop where I call",
    "start": "424919",
    "end": "433360"
  },
  {
    "text": "drop drop everything where Z is less than start and I begin with 100 and then",
    "start": "433360",
    "end": "438800"
  },
  {
    "text": "I increment these and drop if this function it calls the the predicate and",
    "start": "438800",
    "end": "446360"
  },
  {
    "text": "if we find it then we take the topmost element move it to this slot that we're",
    "start": "446360",
    "end": "451840"
  },
  {
    "text": "not interested in anymore because we we want to remove it otherwise increment the the index to search for so go",
    "start": "451840",
    "end": "459120"
  },
  {
    "text": "upwards upwards upwards okay drop this one upwards upwards upwards drop this one etc",
    "start": "459120",
    "end": "466319"
  },
  {
    "text": "etc",
    "start": "466520",
    "end": "469520"
  },
  {
    "text": "so I can build this and uh for these examples I'm using uh clang 18 and I'm",
    "start": "474199",
    "end": "481440"
  },
  {
    "text": "using C plus 23 uh it's the comp the compiler is",
    "start": "481440",
    "end": "487720"
  },
  {
    "text": "pretty picky about the compilation Flags so uh I'm building with uh",
    "start": "487720",
    "end": "496520"
  },
  {
    "text": "vectorize and setting the architecture to Native which is probably not what you want to do in production but that is to",
    "start": "496520",
    "end": "502840"
  },
  {
    "text": "ensure that the code is generated for this actual machine that I'm running on otherwise the compiler is very",
    "start": "502840",
    "end": "508319"
  },
  {
    "text": "conservative about what it is allowed to do and since I'm a",
    "start": "508319",
    "end": "514880"
  },
  {
    "text": "a Linux person I use per for",
    "start": "514880",
    "end": "520800"
  },
  {
    "text": "these so I run this program and we see some numbers that",
    "start": "522120",
    "end": "528279"
  },
  {
    "text": "doesn't mean anything yet but this is a",
    "start": "528279",
    "end": "531880"
  },
  {
    "text": "Baseline and then I have another program that uses struct of vectors so we have our struct s here with",
    "start": "533360",
    "end": "541440"
  },
  {
    "text": "with all the X's y's Zs and D's and the logic here pretty much the",
    "start": "542720",
    "end": "549560"
  },
  {
    "text": "same drop if the value of x at the index is less than start uh this becomes a little bit more",
    "start": "549560",
    "end": "557079"
  },
  {
    "text": "convoluted because I don't have access to an object so I have to give the",
    "start": "557079",
    "end": "563720"
  },
  {
    "text": "predicate the the S the structure that has all the ve vectors and which in IND",
    "start": "563720",
    "end": "569600"
  },
  {
    "text": "to look into and of course we can see that the drop if",
    "start": "569600",
    "end": "575959"
  },
  {
    "text": "is I wouldn't say it's very nice code uh but yeah if if the predicate",
    "start": "575959",
    "end": "582120"
  },
  {
    "text": "hits then we again move move the last element move the last element move the last element vector by Vector so the",
    "start": "582120",
    "end": "589120"
  },
  {
    "text": "logic is the same so if we build this",
    "start": "589120",
    "end": "598040"
  },
  {
    "text": "and run it now we can compare some numbers",
    "start": "602600",
    "end": "608920"
  },
  {
    "text": "so Vector of structs 2 and a half billion cash references compared to 641",
    "start": "609399",
    "end": "615000"
  },
  {
    "text": "million okay that is a substantial Improvement uh cash misses less than",
    "start": "615000",
    "end": "621720"
  },
  {
    "text": "half uh instructions fewer CPU Cycles a little bit fewer",
    "start": "621720",
    "end": "628640"
  },
  {
    "text": "branches is roughly the same time well it's faster isn't it 2.2",
    "start": "628640",
    "end": "636440"
  },
  {
    "text": "seconds instead of 2.6 seconds it's",
    "start": "636440",
    "end": "641000"
  },
  {
    "text": "faster so what we can see here is that structure vectors has way fewer",
    "start": "642200",
    "end": "649200"
  },
  {
    "text": "memory axises way way way fewer fewer cash Mees that is",
    "start": "649200",
    "end": "656320"
  },
  {
    "text": "important slightly fewer instructions not not a huge difference is",
    "start": "656320",
    "end": "662480"
  },
  {
    "text": "faster I would actually have expected the speed up to be more given the reduction in memory accesses and and",
    "start": "662480",
    "end": "669639"
  },
  {
    "text": "cach mes but there you go but but it is faster and it's absolutely horrible",
    "start": "669639",
    "end": "677319"
  },
  {
    "text": "code I don't know about you but I don't want to work with code like that I I",
    "start": "677760",
    "end": "683279"
  },
  {
    "text": "just don't so I really had to think can we make",
    "start": "683279",
    "end": "688360"
  },
  {
    "text": "this easier to work with and keep the performance should be",
    "start": "688360",
    "end": "694480"
  },
  {
    "text": "possible so I made an experiment I I use tup so I create a table type a",
    "start": "694480",
    "end": "702560"
  },
  {
    "text": "table of T's and it has this Tuple of a vector of T's",
    "start": "702560",
    "end": "709600"
  },
  {
    "text": "so that is way we we get all the columns of data and I use a row type that is a tupal of",
    "start": "709600",
    "end": "717560"
  },
  {
    "text": "of references so when you use operator angle brackets",
    "start": "717560",
    "end": "722839"
  },
  {
    "text": "to to get a a a row you you populate it with references to the cell in each of",
    "start": "722839",
    "end": "731440"
  },
  {
    "text": "the columns and by then adding some more we",
    "start": "731440",
    "end": "738760"
  },
  {
    "text": "we need a push back pop back get the last one Reserve is good to",
    "start": "738760",
    "end": "743880"
  },
  {
    "text": "have check if it's empty and the size and then we can write a drop if that",
    "start": "743880",
    "end": "750519"
  },
  {
    "text": "looks like fairly reasonable code just Loop over the elements call the predicate on",
    "start": "750519",
    "end": "758199"
  },
  {
    "text": "on the element at the index I if it's found then move the topmost element into",
    "start": "758199",
    "end": "765000"
  },
  {
    "text": "where we are and and pop it pop the uh vectors all of them pop the last element",
    "start": "765000",
    "end": "771959"
  },
  {
    "text": "otherwise go up so now we're doing pretty much the same as before but we have four in parallel like this this",
    "start": "771959",
    "end": "779839"
  },
  {
    "text": "okay move that one in like",
    "start": "779839",
    "end": "785680"
  },
  {
    "text": "so and the drop IF function can then look like this I can use um",
    "start": "786519",
    "end": "794000"
  },
  {
    "text": "destructuring to get the XY z and d members to to write logic in a way that",
    "start": "794000",
    "end": "799560"
  },
  {
    "text": "is humanly",
    "start": "799560",
    "end": "802279"
  },
  {
    "text": "readable so let's have a look at this the templated solution",
    "start": "804680",
    "end": "811120"
  },
  {
    "text": "so here is the table as I showed you with uh how to store the",
    "start": "813720",
    "end": "820639"
  },
  {
    "text": "elements uh pop back the operator angle brackets uh get the last",
    "start": "820639",
    "end": "827480"
  },
  {
    "text": "one Reserve Etc so you just call",
    "start": "827480",
    "end": "832320"
  },
  {
    "text": "the every operation on the table is expanded to the similar operation for",
    "start": "832800",
    "end": "838839"
  },
  {
    "text": "each each of the vectors and then the logic looks like",
    "start": "838839",
    "end": "845920"
  },
  {
    "text": "this which it's pretty okay I",
    "start": "845920",
    "end": "850360"
  },
  {
    "text": "think so let's have a",
    "start": "854320",
    "end": "858079"
  },
  {
    "text": "look 640 million 11,",
    "start": "866920",
    "end": "872079"
  },
  {
    "text": "330 a bit fewer instructions good good good many fewer Cycles",
    "start": "872079",
    "end": "880880"
  },
  {
    "text": "H Brown is roughly the same now bronches is actually quite a",
    "start": "881639",
    "end": "888160"
  },
  {
    "text": "lot lower sorry brunch Miss is roughly the same but the time is curious this is",
    "start": "888160",
    "end": "894120"
  },
  {
    "text": "curious I don't understand this to me these two examples the",
    "start": "894120",
    "end": "899199"
  },
  {
    "text": "previous two they they are in every way equivalent but for some reason the previous one was 2.2 seconds and this",
    "start": "899199",
    "end": "905639"
  },
  {
    "text": "one is 1.6 seconds I know sort of why the compiler",
    "start": "905639",
    "end": "911839"
  },
  {
    "text": "generates more vectorized Vector instructions but I don't know why it generates more Vector instructions this",
    "start": "911839",
    "end": "918279"
  },
  {
    "text": "is curious I'm I'm not complaining by any means I'm really not complaining this is good but it's",
    "start": "918279",
    "end": "925720"
  },
  {
    "text": "surprising so what we can see is definitely that the the ergonomics of",
    "start": "927040",
    "end": "933319"
  },
  {
    "text": "using this very simple toy table it's roughly the same as working with with a",
    "start": "933319",
    "end": "939839"
  },
  {
    "text": "vector of struct but the performance is quite a lot",
    "start": "939839",
    "end": "946560"
  },
  {
    "text": "better so when I when I had reached this point I felt that I'm on to something I",
    "start": "947480",
    "end": "955880"
  },
  {
    "text": "can do something so I wrote a uh an abstract for a conference presentation",
    "start": "955880",
    "end": "961199"
  },
  {
    "text": "and a very cocky title and here we",
    "start": "961199",
    "end": "965360"
  },
  {
    "text": "are so but to be happy with this what what we also need is we we we need a",
    "start": "966399",
    "end": "972839"
  },
  {
    "text": "stable row ID because we that is one of the things with the entity control system you you want to be able to store",
    "start": "972839",
    "end": "979000"
  },
  {
    "text": "an object and you want to be able to get an object by some sort of stable handle",
    "start": "979000",
    "end": "986440"
  },
  {
    "text": "again uh this can be done in several ways one way you can do this",
    "start": "986440",
    "end": "991480"
  },
  {
    "text": "is to keep track of which slots so to speak",
    "start": "991480",
    "end": "998440"
  },
  {
    "text": "which indexes in your tables there are used for data and which are not so when",
    "start": "998440",
    "end": "1003600"
  },
  {
    "text": "you erase something you just Mark a row as free it's available and when you insert something you see if is anything",
    "start": "1003600",
    "end": "1010399"
  },
  {
    "text": "free and then you drop it there otherwise you grow it uh",
    "start": "1010399",
    "end": "1016839"
  },
  {
    "text": "the advantage of this is that insertion and removal are really fast but the",
    "start": "1016839",
    "end": "1023759"
  },
  {
    "text": "disadvantage is that you can essentially not really use Vector instructions for for anything",
    "start": "1023759",
    "end": "1029959"
  },
  {
    "text": "because you you have to as you iterate over your columns you you you can see",
    "start": "1029959",
    "end": "1035360"
  },
  {
    "text": "okay here's data I want to use it here's data I want to use it no this is a free index I'm not using that and then you go to the next and next can I use this no",
    "start": "1035360",
    "end": "1042480"
  },
  {
    "text": "can I use this yes Etc uh another way of doing this is",
    "start": "1042480",
    "end": "1049640"
  },
  {
    "text": "to store all data like like I showed you in these examples now where removing",
    "start": "1049640",
    "end": "1055360"
  },
  {
    "text": "something we we take the last element and pop it into the remote row uh this has the advantage of keeping",
    "start": "1055360",
    "end": "1062880"
  },
  {
    "text": "everything in contiguous memory you can use vectorization but the disadvantage is that your as you remove elements your",
    "start": "1062880",
    "end": "1071360"
  },
  {
    "text": "data becomes jumbl the the iteration order is not the same anymore plus as we",
    "start": "1071360",
    "end": "1076640"
  },
  {
    "text": "will see soon the there will be an overhead on how do you how do you translate the",
    "start": "1076640",
    "end": "1082960"
  },
  {
    "text": "object ID to where it actually is located since the elements move around with with the previous example where we",
    "start": "1082960",
    "end": "1090080"
  },
  {
    "text": "just Mark a row as available then the row ID is the",
    "start": "1090080",
    "end": "1097320"
  },
  {
    "text": "offset we'll get back to that soon definitely want an iterator",
    "start": "1097840",
    "end": "1104280"
  },
  {
    "text": "interface so so that we can work with standard algorithms and ranges so that we can express our logic in",
    "start": "1104280",
    "end": "1110880"
  },
  {
    "text": "terms of what we want to do instead of in Terms of the mechanisms used to achieve",
    "start": "1110880",
    "end": "1116880"
  },
  {
    "text": "it but also to be happy I want more I want a convenient way to look at only",
    "start": "1116880",
    "end": "1124840"
  },
  {
    "text": "some of the columns not all Expressions will will use all of it like we saw the",
    "start": "1124840",
    "end": "1130640"
  },
  {
    "text": "searches for just the D or just the Z I don't want to bother with the",
    "start": "1130640",
    "end": "1137200"
  },
  {
    "text": "others and I want to convenient way to call functions with the elements of a",
    "start": "1137200",
    "end": "1144000"
  },
  {
    "text": "row or rather with the selected subset of elements of a",
    "start": "1144000",
    "end": "1151760"
  },
  {
    "text": "row that would be cool to get but this is good enough the the success ometer is",
    "start": "1151960",
    "end": "1157480"
  },
  {
    "text": "on a smile so let's see what we can do so",
    "start": "1157480",
    "end": "1163640"
  },
  {
    "text": "stable row ID like I said I I've chosen to go with",
    "start": "1163640",
    "end": "1169720"
  },
  {
    "text": "compacted storage by moving elements to the to the end therefore I need an extra column I need the index so for example",
    "start": "1169720",
    "end": "1177600"
  },
  {
    "text": "if I want to erase the D's here what we do",
    "start": "1177600",
    "end": "1183120"
  },
  {
    "text": "is we see that offset three is now free I can plop the eyes into there but",
    "start": "1183120",
    "end": "1191200"
  },
  {
    "text": "now we used to know that the eyes were on offset 8 so we see that on offset 8",
    "start": "1191200",
    "end": "1197760"
  },
  {
    "text": "in the index we can write a three so that when you want to access we can skip that for now when I",
    "start": "1197760",
    "end": "1205880"
  },
  {
    "text": "want to access row ID3 we follow AIS row ID 8 sorry we we see that",
    "start": "1205880",
    "end": "1212240"
  },
  {
    "text": "on Row id8 the index says it's on offset 3 so we follow that and then we find the",
    "start": "1212240",
    "end": "1217559"
  },
  {
    "text": "eyes and then I also need a reverse index because if I had done some searching and found here are the eyes",
    "start": "1217559",
    "end": "1224159"
  },
  {
    "text": "what's the row ID for that then we can see that it says the reverse indexes it's on it's number",
    "start": "1224159",
    "end": "1231840"
  },
  {
    "text": "eight the on the stable row ID is eight so the index and the reverse index are",
    "start": "1231840",
    "end": "1238159"
  },
  {
    "text": "always pointing to each",
    "start": "1238159",
    "end": "1241440"
  },
  {
    "text": "other so if I now want to add more data I want to add",
    "start": "1243240",
    "end": "1248400"
  },
  {
    "text": "case insertion is sort of simple you always add the data at the end so and I",
    "start": "1248400",
    "end": "1255400"
  },
  {
    "text": "know that it should be on St row ID 3 because that was the first one that was",
    "start": "1255400",
    "end": "1261840"
  },
  {
    "text": "available so I can now write eight in the index and I keep",
    "start": "1261840",
    "end": "1270039"
  },
  {
    "text": "track of where is the first free index to use currently there is none in this picture so it's it needs to grow the",
    "start": "1270039",
    "end": "1276960"
  },
  {
    "text": "index to to store something more because it's number nine and again index and reverse index",
    "start": "1276960",
    "end": "1284640"
  },
  {
    "text": "are pointing to each other so you can now",
    "start": "1284640",
    "end": "1290320"
  },
  {
    "text": "write like this the operator angle brackets we need to go from a row ID to",
    "start": "1290320",
    "end": "1297840"
  },
  {
    "text": "a storage offset by by looking at the at the index and the rest is exactly as",
    "start": "1297840",
    "end": "1306799"
  },
  {
    "text": "before and now I can change the API a little bit so push back gives me a row ID have operator angle brackets with row",
    "start": "1308480",
    "end": "1315440"
  },
  {
    "text": "ID I can erase with a row ID and I can ask do we have this R ID",
    "start": "1315440",
    "end": "1324000"
  },
  {
    "text": "actually so I can then write things like this push a number of values I have the",
    "start": "1324559",
    "end": "1330000"
  },
  {
    "text": "row IDs i1 2 3 4 uh eras I2 and I3 I can look up i1 and I4 and see that",
    "start": "1330000",
    "end": "1338400"
  },
  {
    "text": "they are indeed the expected values even though they have been moved around in memory and I can check that I2 and I3",
    "start": "1338400",
    "end": "1345360"
  },
  {
    "text": "are not valid row IDs because if you you try to look at those indices you see that they do not point at each other so",
    "start": "1345360",
    "end": "1351840"
  },
  {
    "text": "it's not valid so let's have a look at",
    "start": "1351840",
    "end": "1359520"
  },
  {
    "text": "this so now I have my insert here where I store all",
    "start": "1365080",
    "end": "1372200"
  },
  {
    "text": "the data the insertion is always add the data columns at the end so that is a a",
    "start": "1372200",
    "end": "1377679"
  },
  {
    "text": "push back and then I have to update the index and the reverse index and you have different",
    "start": "1377679",
    "end": "1382760"
  },
  {
    "text": "logic depending on whether the index is full or if there are free slots in",
    "start": "1382760",
    "end": "1388960"
  },
  {
    "text": "it this logic was damn difficult to get",
    "start": "1388960",
    "end": "1394799"
  },
  {
    "text": "right I would not have succeeded without fuzzing uh it",
    "start": "1394799",
    "end": "1401360"
  },
  {
    "text": "was challenging let's say uh same with arrays all this work to",
    "start": "1401360",
    "end": "1409120"
  },
  {
    "text": "keep index and reverse index in in sync uh but the rest is fairly",
    "start": "1409120",
    "end": "1415919"
  },
  {
    "text": "straightforward uh you as I showed you you get",
    "start": "1415919",
    "end": "1422600"
  },
  {
    "text": "the from the row ID you get the offset and I have a separate angle brackets",
    "start": "1423120",
    "end": "1428360"
  },
  {
    "text": "operator for for just a pure offset also and asking if if a row ID is available",
    "start": "1428360",
    "end": "1436200"
  },
  {
    "text": "uh the rest is exactly the same as before",
    "start": "1436200",
    "end": "1440440"
  },
  {
    "text": "so if we run",
    "start": "1446240",
    "end": "1449720"
  },
  {
    "text": "this we see oh 1.66 seconds 1.56 seconds 653",
    "start": "1452960",
    "end": "1461919"
  },
  {
    "text": "million cash reference is 640 okay this is a this is worse why",
    "start": "1461919",
    "end": "1469000"
  },
  {
    "text": "why is this worse too much time in index too much",
    "start": "1469000",
    "end": "1474440"
  },
  {
    "text": "time in indexes yes working on updating keep keeping the index and the reverse index up to date is is work and this uh",
    "start": "1474440",
    "end": "1483799"
  },
  {
    "text": "this artificial workload that I'm giving it does a lot of removal of elements which means that we move things to a free slot",
    "start": "1483799",
    "end": "1492520"
  },
  {
    "text": "which we did before but we need to update the index and the reverse index and that is work and that is what we're",
    "start": "1492520",
    "end": "1497640"
  },
  {
    "text": "seeing here in in terms of performance or drop in performance uh what I did then",
    "start": "1497640",
    "end": "1507120"
  },
  {
    "text": "was which was a template I did another thing it's it's",
    "start": "1507480",
    "end": "1512880"
  },
  {
    "text": "exactly the same except it I have a workload that just involves iteration I'm not",
    "start": "1512880",
    "end": "1522559"
  },
  {
    "text": "jumbling data around just to to see what is the cost of having this when",
    "start": "1522559",
    "end": "1529039"
  },
  {
    "text": "I'm not actually using it",
    "start": "1529039",
    "end": "1535440"
  },
  {
    "text": "so and this is intimidating because I made a the logic be a little bit too",
    "start": "1547960",
    "end": "1555000"
  },
  {
    "text": "long so it takes time so now I can walk around on the stage and be really nervous about what we will",
    "start": "1555000",
    "end": "1561519"
  },
  {
    "text": "see but it's also better for showing actual differences less",
    "start": "1561760",
    "end": "1567159"
  },
  {
    "text": "noise in the results oh I found a lot of stuff okay so roughly 22 seconds for",
    "start": "1567159",
    "end": "1572880"
  },
  {
    "text": "that one",
    "start": "1572880",
    "end": "1575679"
  },
  {
    "text": "and oh I need to build it first",
    "start": "1578159",
    "end": "1583320"
  },
  {
    "text": "okay is this the one time that it actually fails on me that would be super interesting now okay 22 that was a",
    "start": "1608360",
    "end": "1615760"
  },
  {
    "text": "little bit more than I expected but it's uh 22 out 2 I believe that this is",
    "start": "1615760",
    "end": "1621799"
  },
  {
    "text": "still measurement noise in most most of my runs have been",
    "start": "1621799",
    "end": "1627679"
  },
  {
    "text": "more or less identical values um we we get a little bit more when",
    "start": "1627679",
    "end": "1634640"
  },
  {
    "text": "populating the the structure since we need to add things to the index and the reverse index but then the iterations",
    "start": "1634640",
    "end": "1640840"
  },
  {
    "text": "should be should be very similar so",
    "start": "1640840",
    "end": "1649080"
  },
  {
    "text": "we have a row ID we can store something but and get a key get a row row ID we",
    "start": "1651000",
    "end": "1657039"
  },
  {
    "text": "can look up the element by row ID and I I think I think that that that is good that that makes me smile so let's crank",
    "start": "1657039",
    "end": "1662840"
  },
  {
    "text": "up the success ometer a little bit this is is good we're on to something but I really need an iterator",
    "start": "1662840",
    "end": "1670200"
  },
  {
    "text": "interface otherwise it's not fun so we have to have to go into doing that and",
    "start": "1670200",
    "end": "1676840"
  },
  {
    "text": "one of the things that are important here is that even though we have a row ID here we we really really want to",
    "start": "1676840",
    "end": "1683240"
  },
  {
    "text": "iterate in in storage order order otherwise the memory accesses will be jumbled all over the",
    "start": "1683240",
    "end": "1689200"
  },
  {
    "text": "place so we we iterate in storage order this is good for locality of referen but",
    "start": "1689200",
    "end": "1695679"
  },
  {
    "text": "also because the CPUs prefetcher absolutely loves predictable access",
    "start": "1695679",
    "end": "1701720"
  },
  {
    "text": "patterns uh so this is good uh so let's let's write an iterator",
    "start": "1701720",
    "end": "1708440"
  },
  {
    "text": "the the value type of the iterator can be the the Tuple of references that we",
    "start": "1708440",
    "end": "1714360"
  },
  {
    "text": "saw earlier used as a row with with the operator angle bracket and this is",
    "start": "1714360",
    "end": "1719720"
  },
  {
    "text": "actually what's also used for if you use ranges the zip view has the same same ID so there is a precedent in",
    "start": "1719720",
    "end": "1728039"
  },
  {
    "text": "the standard library for using such a value value type for for",
    "start": "1728039",
    "end": "1735200"
  },
  {
    "text": "iterators so I can write iterators like this I I have a sentinel type that is just the marker of you have reached the",
    "start": "1735200",
    "end": "1742519"
  },
  {
    "text": "end and it's an empty type it's it's nothing but it exists as a",
    "start": "1742519",
    "end": "1747880"
  },
  {
    "text": "type and then the iterator the the value type of the iterator is the",
    "start": "1747880",
    "end": "1754039"
  },
  {
    "text": "row and I'm storing the table and the offset in the table so the the naive implementation",
    "start": "1754039",
    "end": "1760600"
  },
  {
    "text": "would be to have a plethora of index of iterators here one iterator for every column but that would make the iterator",
    "start": "1760600",
    "end": "1768120"
  },
  {
    "text": "unnecessarily large and make computations that aren't",
    "start": "1768120",
    "end": "1773760"
  },
  {
    "text": "necessary because you maybe you only look at some of the columns but you're still incremented each of the iterators",
    "start": "1773760",
    "end": "1781559"
  },
  {
    "text": "so it's better to keep a pointer to the table or a reference to the table uh and",
    "start": "1781559",
    "end": "1788279"
  },
  {
    "text": "an offset because then operator Plus+ is just increment the",
    "start": "1788279",
    "end": "1794000"
  },
  {
    "text": "offset and our operator store to get the the",
    "start": "1794000",
    "end": "1799240"
  },
  {
    "text": "value is sorry is very similar to how we had",
    "start": "1799240",
    "end": "1805000"
  },
  {
    "text": "operator angle brackets before so but with only the offset here I don't have to look at the indices they are",
    "start": "1805000",
    "end": "1813320"
  },
  {
    "text": "unimportant so get populate this Tuple of references with each of the cells at",
    "start": "1813320",
    "end": "1821080"
  },
  {
    "text": "that offset in in every data column and the",
    "start": "1821080",
    "end": "1828480"
  },
  {
    "text": "equality comparison with The Sentinel is just to check is this offset the same as the size of the table this has an",
    "start": "1828480",
    "end": "1836480"
  },
  {
    "text": "additional advantage that this iterator is safe to use in use",
    "start": "1836480",
    "end": "1842600"
  },
  {
    "text": "cases where the vector grows even if it reallocates the data",
    "start": "1842600",
    "end": "1847919"
  },
  {
    "text": "because you're you're doing lookup by",
    "start": "1847919",
    "end": "1852799"
  },
  {
    "text": "index and of course as if you didn't know this from simple plus 20 and later",
    "start": "1855519",
    "end": "1860919"
  },
  {
    "text": "if you do write operator equal equal in this case with with the Sentinel then you have them in the reverse order also",
    "start": "1860919",
    "end": "1867399"
  },
  {
    "text": "you have operator equal equal Sentinel comma iterator and you also have",
    "start": "1867399",
    "end": "1872639"
  },
  {
    "text": "operator not equal you get them for free by the compiler so that is",
    "start": "1872639",
    "end": "1877880"
  },
  {
    "text": "cool so then our table the addition to the table is almost loveably simple we we create",
    "start": "1878200",
    "end": "1885360"
  },
  {
    "text": "begin and end begin returns and iterate to this table with offset zero because",
    "start": "1885360",
    "end": "1890720"
  },
  {
    "text": "that's where we start and end just Returns the Sentinel that is",
    "start": "1890720",
    "end": "1897080"
  },
  {
    "text": "nothing so let's have a look at",
    "start": "1897080",
    "end": "1900919"
  },
  {
    "text": "this so how would the r with the iterators as I showed you the operator Plus+ increment the offset uh and that",
    "start": "1913080",
    "end": "1920760"
  },
  {
    "text": "is just it and beginning and end and the horrible index",
    "start": "1920760",
    "end": "1926559"
  },
  {
    "text": "juggling but here look so I have a predicate get a row de",
    "start": "1926559",
    "end": "1934240"
  },
  {
    "text": "reference it check if starter and z are what we want them to be the fun values",
    "start": "1934240",
    "end": "1939399"
  },
  {
    "text": "are the values piped through the filter of the predicate and then we Loop over the F values and print",
    "start": "1939399",
    "end": "1946000"
  },
  {
    "text": "them nice",
    "start": "1946000",
    "end": "1949840"
  },
  {
    "text": "this is mindboggling why is it twice as fast",
    "start": "1973080",
    "end": "1979080"
  },
  {
    "text": "6.3 billion cash reference is 73 million cash misses compared to 63",
    "start": "1982080",
    "end": "1989519"
  },
  {
    "text": "now cannot possibly be that that is not enough uh prefetch is roughly the same",
    "start": "1989519",
    "end": "1995000"
  },
  {
    "text": "500 billion instructions 250 billion instructions",
    "start": "1995000",
    "end": "2000360"
  },
  {
    "text": "okay CPU Cycles 100 billion 50 billion all right",
    "start": "2001000",
    "end": "2009398"
  },
  {
    "text": "I think these are equivalent but to the compiler it's obviously different it it",
    "start": "2012600",
    "end": "2019760"
  },
  {
    "text": "it seems better suited to optimize code that follows patterns that uses uh uh",
    "start": "2019760",
    "end": "2026440"
  },
  {
    "text": "Loops over iterators which the uh which the ranges filter",
    "start": "2026440",
    "end": "2033200"
  },
  {
    "text": "does again I I'm definitely not complaining that I got twice as much",
    "start": "2034399",
    "end": "2040039"
  },
  {
    "text": "performance by adding not a huge amount of code that made it easier to",
    "start": "2040039",
    "end": "2046919"
  },
  {
    "text": "use but I am confused I'm not",
    "start": "2046919",
    "end": "2054599"
  },
  {
    "text": "complaining so we're almost there the one thing I showed you earlier though was that it",
    "start": "2054599",
    "end": "2061200"
  },
  {
    "text": "would be nice to if I do a find find an element so I",
    "start": "2061200",
    "end": "2066878"
  },
  {
    "text": "I'm at an iterator and I want to know how which row ID is this object that I",
    "start": "2066879",
    "end": "2073280"
  },
  {
    "text": "found and a tuple of references does not really work for that particularly",
    "start": "2073280",
    "end": "2080398"
  },
  {
    "text": "well so what you can do is of course you can create a row type that inherits from",
    "start": "2080399",
    "end": "2085679"
  },
  {
    "text": "stupo but then we don't really get access to the",
    "start": "2085679",
    "end": "2093000"
  },
  {
    "text": "destructuring which is a bummer that we want that that is good",
    "start": "2093000",
    "end": "2098320"
  },
  {
    "text": "but the standard Library offers ways to implement the structuring from your for",
    "start": "2098320",
    "end": "2104280"
  },
  {
    "text": "your own types so what you need to do is you need to specialize the Tuple size for your type so Tuple size says how",
    "start": "2104280",
    "end": "2111599"
  },
  {
    "text": "many elements does it hold and you need to specialize Tuple element of an index",
    "start": "2111599",
    "end": "2118680"
  },
  {
    "text": "andt and that is get the type of the idx type of T try to say that uh and you need to",
    "start": "2118680",
    "end": "2127320"
  },
  {
    "text": "implement your own get so get get the idx",
    "start": "2127320",
    "end": "2133320"
  },
  {
    "text": "value from your type and when you have done that then",
    "start": "2133320",
    "end": "2138760"
  },
  {
    "text": "you get D structuring for for your own type so let's let's roll a row",
    "start": "2138760",
    "end": "2147079"
  },
  {
    "text": "type again it looks remarkably similar to how the iterator look like doesn't it",
    "start": "2147079",
    "end": "2154040"
  },
  {
    "text": "point it to the table and the offset Where We Are and now operator angle brackets gives us",
    "start": "2154040",
    "end": "2162240"
  },
  {
    "text": "the row and the row has a row ID type member",
    "start": "2162240",
    "end": "2168920"
  },
  {
    "text": "function that looks it up in in the reverse index from the offset and the get function gets the I",
    "start": "2168920",
    "end": "2180480"
  },
  {
    "text": "member uh of of the data columns look it up at the the stor offet and the type is",
    "start": "2180480",
    "end": "2189720"
  },
  {
    "text": "the indexing of of the all the all the t's that is a really cool thing in C 26",
    "start": "2189720",
    "end": "2196440"
  },
  {
    "text": "that you can do parameter pack indexing it's very neat it's also not very available I'm sorry but but it's very",
    "start": "2196440",
    "end": "2206240"
  },
  {
    "text": "neat and then we create the the specializations for Tuple element so the",
    "start": "2207920",
    "end": "2213560"
  },
  {
    "text": "tupal element get the I type of my teeth uh and Tuple size is just the number of",
    "start": "2213560",
    "end": "2220720"
  },
  {
    "text": "T's that there are so",
    "start": "2220720",
    "end": "2226160"
  },
  {
    "text": "now now we can look at something",
    "start": "2226280",
    "end": "2230640"
  },
  {
    "text": "U yeah clang 14 does not have the uh parameter pack indexing",
    "start": "2235280",
    "end": "2241720"
  },
  {
    "text": "unfortunately so I had to do an an nth type to recursive construction to to look it",
    "start": "2241720",
    "end": "2249079"
  },
  {
    "text": "up but whatever soon real soon it's actually on the on the main branch for",
    "start": "2249079",
    "end": "2256160"
  },
  {
    "text": "clang but it's not in in clang 18 uh the row type with all these",
    "start": "2256160",
    "end": "2265160"
  },
  {
    "text": "goodies and the rest is the",
    "start": "2265160",
    "end": "2269720"
  },
  {
    "text": "same row",
    "start": "2275280",
    "end": "2279280"
  },
  {
    "text": "now in this in this workload I'm actually not",
    "start": "2281079",
    "end": "2288079"
  },
  {
    "text": "making use of looking up the ID",
    "start": "2288079",
    "end": "2293720"
  },
  {
    "text": "so this demo is only interesting in the sense of seeing what's the performance",
    "start": "2293720",
    "end": "2299280"
  },
  {
    "text": "penalty for having this available and it's nothing but you have the ability",
    "start": "2299280",
    "end": "2308560"
  },
  {
    "text": "so that is nice check one more goodie so we're sort",
    "start": "2309319",
    "end": "2316319"
  },
  {
    "text": "of we're we're definitely home dry with the essentials this is what we what we",
    "start": "2316319",
    "end": "2321920"
  },
  {
    "text": "need for something to be nice to use has good ergonomics and",
    "start": "2321920",
    "end": "2328319"
  },
  {
    "text": "good performance but I want more I I want a way to look at only a subset of the columns I don't",
    "start": "2328319",
    "end": "2336200"
  },
  {
    "text": "always want to look at all of them so how can we select",
    "start": "2336200",
    "end": "2345200"
  },
  {
    "text": "columns so with the Cent we can actually do that already by by calling get instead of",
    "start": "2345200",
    "end": "2352640"
  },
  {
    "text": "doing destructuring so I can write a function that takes a table and loop",
    "start": "2352640",
    "end": "2357800"
  },
  {
    "text": "over all the elements and I call get of zero and get of three like so so it's",
    "start": "2357800",
    "end": "2365319"
  },
  {
    "text": "there but it's not very convenient is it I don't think it",
    "start": "2365319",
    "end": "2372000"
  },
  {
    "text": "is but that shows a way actually we can we can create a different row type can",
    "start": "2372079",
    "end": "2377560"
  },
  {
    "text": "have a row type that says I'm a row of a table of T's and The",
    "start": "2377560",
    "end": "2384400"
  },
  {
    "text": "Columns of that table that I'm referring to are the C's like so these are the",
    "start": "2384400",
    "end": "2389640"
  },
  {
    "text": "columns the subset so with that the intention of",
    "start": "2389640",
    "end": "2396720"
  },
  {
    "text": "that is if I have I have this row of a table of in or",
    "start": "2396720",
    "end": "2403119"
  },
  {
    "text": "double and long with indexes 0 two and three the 0 two and three are the int the double and",
    "start": "2403119",
    "end": "2410200"
  },
  {
    "text": "the long and then I'm calling get one one",
    "start": "2410200",
    "end": "2417599"
  },
  {
    "text": "is the one in the uh set of columns or the array of columns I guess we can",
    "start": "2417599",
    "end": "2424800"
  },
  {
    "text": "say which is the double so with with this it's it it becomes",
    "start": "2424800",
    "end": "2431000"
  },
  {
    "text": "possible to select a subset so I need an",
    "start": "2431000",
    "end": "2436119"
  },
  {
    "text": "extra IND Direction here so I get I have an array",
    "start": "2436119",
    "end": "2441160"
  },
  {
    "text": "columns all the C's and I call get on Columns of",
    "start": "2441160",
    "end": "2447599"
  },
  {
    "text": "I to to get the subset get the I of the",
    "start": "2447599",
    "end": "2453680"
  },
  {
    "text": "Cs I told you there would be in directions",
    "start": "2453680",
    "end": "2458640"
  },
  {
    "text": "so then the Tuple size and Tuple index becomes a little bit different the Tuple",
    "start": "2458720",
    "end": "2464920"
  },
  {
    "text": "size will be the number of C's not the number of columns in the table and Tuple",
    "start": "2464920",
    "end": "2472160"
  },
  {
    "text": "element will be exactly the same as we saw with uh with get that we use this",
    "start": "2472160",
    "end": "2477720"
  },
  {
    "text": "extra IND direction to get the E of the C's and get that type",
    "start": "2477720",
    "end": "2485520"
  },
  {
    "text": "like so so now I can write something like",
    "start": "2488440",
    "end": "2493880"
  },
  {
    "text": "this I want to select column's eyes from a",
    "start": "2493880",
    "end": "2500640"
  },
  {
    "text": "row the row that uh has C's",
    "start": "2500720",
    "end": "2506960"
  },
  {
    "text": "columns and we we do that by creating a new",
    "start": "2506960",
    "end": "2512560"
  },
  {
    "text": "row uh referring to the same table but a subset of columns",
    "start": "2512560",
    "end": "2519240"
  },
  {
    "text": "so we can then write code like like this where it would say drop if x and z",
    "start": "2519760",
    "end": "2525079"
  },
  {
    "text": "select zero and two because those are the ones I'm interested in return X is less than",
    "start": "2525079",
    "end": "2531680"
  },
  {
    "text": "Z so I don't have to figure out names for the columns that I'm not going to",
    "start": "2533520",
    "end": "2541079"
  },
  {
    "text": "use and I think that's kind of cool actually",
    "start": "2542520",
    "end": "2549119"
  },
  {
    "text": "and what more I want to be able to select columns in a",
    "start": "2550240",
    "end": "2555559"
  },
  {
    "text": "full iteration a loop I want to be able to write four Auto angle brackets X",
    "start": "2555559",
    "end": "2562319"
  },
  {
    "text": "comma Z colon my table select zero and two of my",
    "start": "2562319",
    "end": "2570280"
  },
  {
    "text": "table so we can do this by creating a range selector uh template that refers",
    "start": "2570280",
    "end": "2576160"
  },
  {
    "text": "to some range r and a column set of column",
    "start": "2576160",
    "end": "2581359"
  },
  {
    "text": "C and begin returns and iterated to using the begin of the underlying range",
    "start": "2581359",
    "end": "2588240"
  },
  {
    "text": "and end is just whatever the range is end is and we keep a reference to the",
    "start": "2588240",
    "end": "2595760"
  },
  {
    "text": "range and to be able to do this we we need to know the underlying iterator the",
    "start": "2595760",
    "end": "2601280"
  },
  {
    "text": "range iterator r iterator that we I can get that by calling begin on the",
    "start": "2601280",
    "end": "2606480"
  },
  {
    "text": "underlying range and then I can create my own iterator by publicly inheriting from that iterator",
    "start": "2606480",
    "end": "2612559"
  },
  {
    "text": "because then I get operator equals equals and operator Plus+ etc for free I don't have to worry about",
    "start": "2612559",
    "end": "2618599"
  },
  {
    "text": "that and my own value type is we already saw how to do select on a row and we",
    "start": "2618599",
    "end": "2624640"
  },
  {
    "text": "know that the referencing the underlying iterator is a row so I just say h whatever the result of Callum select",
    "start": "2624640",
    "end": "2632520"
  },
  {
    "text": "these columns on that row that is my value type and and operator",
    "start": "2632520",
    "end": "2638880"
  },
  {
    "text": "store then becomes get the underlying iterator call",
    "start": "2638880",
    "end": "2645359"
  },
  {
    "text": "Select on its value type I'm standing here talking as if",
    "start": "2645359",
    "end": "2651880"
  },
  {
    "text": "this was simple you don't know how many gray hairs I got writing this and how many pages of compilation",
    "start": "2651880",
    "end": "2658280"
  },
  {
    "text": "errors I looked at but having having iterated over this a number of times it sort of becomes yeah sure you just do",
    "start": "2658280",
    "end": "2664240"
  },
  {
    "text": "this you just do that it's simple it wasn't it was absolutely not but it's",
    "start": "2664240",
    "end": "2671400"
  },
  {
    "text": "kind of neat so then uh to be able to get there we we need some more dummy",
    "start": "2671400",
    "end": "2677680"
  },
  {
    "text": "extra types so the range selector maker is it's just there to be able to have",
    "start": "2677680",
    "end": "2683280"
  },
  {
    "text": "the pipe operator so if you have operate a pipe between a range and a range selector maker you create this range",
    "start": "2683280",
    "end": "2690040"
  },
  {
    "text": "selector that I just show you and then below that you have the actual function",
    "start": "2690040",
    "end": "2695640"
  },
  {
    "text": "template select that just Returns the selector maker which is kind of icky but",
    "start": "2695640",
    "end": "2702079"
  },
  {
    "text": "it's not the end of the world so now I can write exactly that what I said I want to write for Auto X",
    "start": "2702079",
    "end": "2709240"
  },
  {
    "text": "comma D column values pipe select 0 comma 3 and print",
    "start": "2709240",
    "end": "2715640"
  },
  {
    "text": "them this is cool really cool",
    "start": "2715640",
    "end": "2723400"
  },
  {
    "text": "so the yeah have the range selector with",
    "start": "2730839",
    "end": "2737240"
  },
  {
    "text": "its iterator the selector maker and the select function",
    "start": "2737240",
    "end": "2744000"
  },
  {
    "text": "template and this logic here that I just showed you this this loop everything",
    "start": "2744000",
    "end": "2750880"
  },
  {
    "text": "else is the same as before",
    "start": "2750880",
    "end": "2755160"
  },
  {
    "text": "and and it's still 11 seconds yes",
    "start": "2774640",
    "end": "2782680"
  },
  {
    "text": "cool so yeah check one more success ometer goes to",
    "start": "2784359",
    "end": "2791400"
  },
  {
    "text": "cool I'm I'm getting quite happy with this this is neat this is really neat",
    "start": "2791400",
    "end": "2797720"
  },
  {
    "text": "so but what I want as I mentioned earlier I want a way to call functions with the selected",
    "start": "2797720",
    "end": "2805359"
  },
  {
    "text": "elements that currently requires",
    "start": "2805359",
    "end": "2810920"
  },
  {
    "text": "destructuring which is it's not the end of the world but it's a bit unnecessary",
    "start": "2811119",
    "end": "2817960"
  },
  {
    "text": "so here I have this destructuring x of Z from select of R it's okay uh but what",
    "start": "2820160",
    "end": "2828839"
  },
  {
    "text": "if I had a function a higher order function select that takes some function f and a number of columns",
    "start": "2828839",
    "end": "2835400"
  },
  {
    "text": "and that returns something that when called calls a function with the selected Columns of a",
    "start": "2835400",
    "end": "2844520"
  },
  {
    "text": "row that will be NE but this",
    "start": "2844520",
    "end": "2850720"
  },
  {
    "text": "conflicts with the function template select that takes a row",
    "start": "2850720",
    "end": "2856480"
  },
  {
    "text": "like man what have I done what have I done what have I done what have I",
    "start": "2856480",
    "end": "2863520"
  },
  {
    "text": "done uh the compile compilation error message from this is really",
    "start": "2865160",
    "end": "2872079"
  },
  {
    "text": "funny uh you normally get like 10,000 lines of absolute",
    "start": "2872079",
    "end": "2877520"
  },
  {
    "text": "gibberish you don't you get like eight lines that says something completely",
    "start": "2877520",
    "end": "2883160"
  },
  {
    "text": "irrelevant it doesn't give it the slightest hint of where the problem is and that was a fun",
    "start": "2883160",
    "end": "2889800"
  },
  {
    "text": "afternoon uh but it don't on me one thing what what we can do we we we",
    "start": "2889800",
    "end": "2895280"
  },
  {
    "text": "should be able to resolve this conflict so I can check",
    "start": "2895280",
    "end": "2901520"
  },
  {
    "text": "do a compile sign check is is something Road type so I have a a",
    "start": "2901520",
    "end": "2907440"
  },
  {
    "text": "a variable variable template is row type that it's false by default and then I",
    "start": "2907440",
    "end": "2913960"
  },
  {
    "text": "can have a specialization oops sorry specialization for row",
    "start": "2913960",
    "end": "2920559"
  },
  {
    "text": "types and say that it's true Did did you know that you can do specialization on template variables this is neat and then",
    "start": "2920559",
    "end": "2928280"
  },
  {
    "text": "we create a concept row type that is true for T's types T",
    "start": "2928280",
    "end": "2933720"
  },
  {
    "text": "that fulfills the predicate it is r type so now I can write this so this",
    "start": "2933720",
    "end": "2942000"
  },
  {
    "text": "function is only valid to be called for for f that are not",
    "start": "2942000",
    "end": "2947440"
  },
  {
    "text": "rows I'm not happy with this I'm not happy with this at all because this is",
    "start": "2949240",
    "end": "2954720"
  },
  {
    "text": "I'm I'm using I'm using a concept in a negative I'm not saying call this for",
    "start": "2954720",
    "end": "2962720"
  },
  {
    "text": "functions that are callable with rows and I've scratched my head a lot",
    "start": "2962720",
    "end": "2969359"
  },
  {
    "text": "trying to solve that and I have failed completely and I'm I I think it's",
    "start": "2969359",
    "end": "2975040"
  },
  {
    "text": "actually not possible but please prove me wrong so I have to make do with this for",
    "start": "2975040",
    "end": "2982960"
  },
  {
    "text": "now now given that I actually have the row type I may as well",
    "start": "2982960",
    "end": "2989440"
  },
  {
    "text": "change the the signature of the uh of the Lambda that is returned to say",
    "start": "2989440",
    "end": "2996799"
  },
  {
    "text": "that it is callable with a row type so that makes the Cod a little bit easier to read and now we can write the",
    "start": "2996799",
    "end": "3004640"
  },
  {
    "text": "logic in a slightly different way you you you see what the difference is compared to",
    "start": "3007280",
    "end": "3013599"
  },
  {
    "text": "before select 0 comma 2 of the function and when which returns",
    "start": "3013680",
    "end": "3020160"
  },
  {
    "text": "something that is callable by a row and we get just column zero and",
    "start": "3020160",
    "end": "3025400"
  },
  {
    "text": "two as uh as the row for for this Lambda so",
    "start": "3025400",
    "end": "3034319"
  },
  {
    "text": "this is nice but it's not quite there to be useful yet I think",
    "start": "3034319",
    "end": "3041480"
  },
  {
    "text": "so you you know stood apply from the standard Library it takes a something",
    "start": "3041480",
    "end": "3047319"
  },
  {
    "text": "invocable and a tuple and it calls the invocable with the members of the T so",
    "start": "3047319",
    "end": "3053680"
  },
  {
    "text": "this is sort of the same idea but it's a higher order version that you call apply with a function and what it returns is",
    "start": "3053680",
    "end": "3061040"
  },
  {
    "text": "something that is callable with a row and then it calls a function with each of the elements of of",
    "start": "3061040",
    "end": "3067359"
  },
  {
    "text": "of that row so we keep the keep the",
    "start": "3067359",
    "end": "3073640"
  },
  {
    "text": "function return a Lambda it is callable with a row and when it's called we we",
    "start": "3073640",
    "end": "3079640"
  },
  {
    "text": "call the function with each of the columns of the row",
    "start": "3079640",
    "end": "3086480"
  },
  {
    "text": "and then I can write drop if value select 0a 2 or apply",
    "start": "3087280",
    "end": "3093000"
  },
  {
    "text": "this function oo x and z returns X less than Z which is kind of",
    "start": "3093000",
    "end": "3099319"
  },
  {
    "text": "nice you recognize this thing I think it has a",
    "start": "3101119",
    "end": "3108640"
  },
  {
    "text": "name it's called the Les and I think this is awesome I'm",
    "start": "3108640",
    "end": "3116000"
  },
  {
    "text": "getting all sorry I here this is super cool so yeah drop if select Z and two",
    "start": "3116000",
    "end": "3123680"
  },
  {
    "text": "with less that is if the element of column zero is less than the the value",
    "start": "3123680",
    "end": "3129599"
  },
  {
    "text": "in column two then we drop the values so we can have a look at",
    "start": "3129599",
    "end": "3136839"
  },
  {
    "text": "this so they only really new things yeah the this select the text function and",
    "start": "3144599",
    "end": "3151000"
  },
  {
    "text": "this apply that I just showed you and then then I can say I have this",
    "start": "3151000",
    "end": "3158480"
  },
  {
    "text": "predicate that just takes an X and a z i don't have to do any destructuring takes two values and I say the fun values are",
    "start": "3158480",
    "end": "3166720"
  },
  {
    "text": "the values that filtered on columns two and three",
    "start": "3166720",
    "end": "3171880"
  },
  {
    "text": "with applied to this predicate and then the loop as",
    "start": "3171880",
    "end": "3179200"
  },
  {
    "text": "before the tension yeah still 11 seconds okay so good so this didn't cost",
    "start": "3201920",
    "end": "3207200"
  },
  {
    "text": "anything in runtime performance",
    "start": "3207200",
    "end": "3212200"
  },
  {
    "text": "nice so yeah check another one we have that",
    "start": "3213000",
    "end": "3218200"
  },
  {
    "text": "and stomer is all story story eyed here this is nice this is",
    "start": "3218200",
    "end": "3225000"
  },
  {
    "text": "nice and that is pretty much what I wanted to talk about today uh if if you",
    "start": "3225160",
    "end": "3231079"
  },
  {
    "text": "find this interesting you can go to this GitHub repo it's a a library that I'm",
    "start": "3231079",
    "end": "3238640"
  },
  {
    "text": "playing with columnist because you're manipulating Columns of data uh it is",
    "start": "3238640",
    "end": "3244119"
  },
  {
    "text": "based on the IDS on this one it is more sophisticated it has for example you can",
    "start": "3244119",
    "end": "3249480"
  },
  {
    "text": "do select on types so if you're using strong types say mat push uh uh MP units",
    "start": "3249480",
    "end": "3257720"
  },
  {
    "text": "Library you can say select Exposition comma X acceleration apply function",
    "start": "3257720",
    "end": "3265200"
  },
  {
    "text": "whatever uh and it respect cost just such a small little",
    "start": "3265200",
    "end": "3270520"
  },
  {
    "text": "detail um and there are a few other things there's",
    "start": "3270520",
    "end": "3276000"
  },
  {
    "text": "also I have an experimental I have a branch that is not",
    "start": "3276000",
    "end": "3282359"
  },
  {
    "text": "yet at all finished it's an embryo to what I believe will be an optimization",
    "start": "3282359",
    "end": "3287640"
  },
  {
    "text": "where instead of having a stood Vector for every column I just have one",
    "start": "3287640",
    "end": "3293119"
  },
  {
    "text": "contiguous uh allocation which should be faster when when you grow the uh grow",
    "start": "3293119",
    "end": "3300200"
  },
  {
    "text": "the table but uh I only just got it to actually at all work yesterday so and",
    "start": "3300200",
    "end": "3306760"
  },
  {
    "text": "it's not it's it's faster with with clang using stent lib plus but it's",
    "start": "3306760",
    "end": "3312680"
  },
  {
    "text": "actually ever so slightly slower with GCC and I haven't had time to even try",
    "start": "3312680",
    "end": "3319079"
  },
  {
    "text": "to look at why yet but I think we'll get there uh if you have the time and the",
    "start": "3319079",
    "end": "3325400"
  },
  {
    "text": "ability please please have a look see if you can help out out with something there there are things I want help with",
    "start": "3325400",
    "end": "3331039"
  },
  {
    "text": "for just discussing the API is the API actually good is this the way we want it",
    "start": "3331039",
    "end": "3336720"
  },
  {
    "text": "uh I have some Basics like I would really like to have a some benchmarking",
    "start": "3336720",
    "end": "3342960"
  },
  {
    "text": "done in the CI so that I can immediately catch if I make a a performance regression if someone could help me with",
    "start": "3342960",
    "end": "3349200"
  },
  {
    "text": "that it would be awesome uh there also missing functionality so if you if you have the",
    "start": "3349200",
    "end": "3355920"
  },
  {
    "text": "time the ability please have a look and uh come with suggestions or",
    "start": "3355920",
    "end": "3361839"
  },
  {
    "text": "questions uh if you want to have a look at the code examples that I use in this presentation they are",
    "start": "3361839",
    "end": "3368720"
  },
  {
    "text": "there it's important that you look at the correct Branch because the main branch is for another conference which",
    "start": "3368720",
    "end": "3375960"
  },
  {
    "text": "had issues um but it's there you can use",
    "start": "3375960",
    "end": "3381680"
  },
  {
    "text": "it and uh yeah that is all I had to say thank you",
    "start": "3381680",
    "end": "3388240"
  },
  {
    "text": "three and a half minutes for questions I'll go back to this one if",
    "start": "3392839",
    "end": "3398200"
  },
  {
    "text": "you want to take photos no one dares to ask anything okay",
    "start": "3398200",
    "end": "3407839"
  },
  {
    "text": "yes have I tried this with any production system no this is experimental I have not uh I I wish to",
    "start": "3409400",
    "end": "3416880"
  },
  {
    "text": "get there I I have used these kinds of IDs but not not exactly",
    "start": "3416880",
    "end": "3423440"
  },
  {
    "text": "this uh other",
    "start": "3423440",
    "end": "3427000"
  },
  {
    "text": "questions all right thank you",
    "start": "3429359",
    "end": "3434798"
  }
]