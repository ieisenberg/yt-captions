[
  {
    "text": "good morning okay so I'm here to talk to",
    "start": "2570",
    "end": "11010"
  },
  {
    "text": "you about s trace the idea of s trace",
    "start": "11010",
    "end": "18750"
  },
  {
    "text": "it's it's a kind of tool that you can use to monitor the conversations going",
    "start": "18750",
    "end": "25199"
  },
  {
    "text": "on between a user space application and the kernel unless you watch all the",
    "start": "25199",
    "end": "31019"
  },
  {
    "text": "system calls that a process is making when you're communicated with with with the Linux kernel underneath its",
    "start": "31019",
    "end": "37500"
  },
  {
    "text": "implement using a system call called P trace and the point is it's a kind of",
    "start": "37500",
    "end": "42960"
  },
  {
    "text": "debugging tool that you can use to monitor the complete conversation that",
    "start": "42960",
    "end": "48450"
  },
  {
    "text": "happens between the application and the users base all the system calls that are being made and obviously you can answer",
    "start": "48450",
    "end": "55440"
  },
  {
    "text": "questions like what sort of system calls is the application making what files is",
    "start": "55440",
    "end": "60510"
  },
  {
    "text": "the application touching what are the arguments being passed to each system",
    "start": "60510",
    "end": "66030"
  },
  {
    "text": "call did the system call succeed or not and if it failed why did it fail I just",
    "start": "66030",
    "end": "73680"
  },
  {
    "text": "mentioned passing there's a loosely related command called L trace and L trace is about tracing calls through",
    "start": "73680",
    "end": "81540"
  },
  {
    "text": "shared libraries and so it's it's an analogous tool you can use to watch what's going on with the shared",
    "start": "81540",
    "end": "87600"
  },
  {
    "text": "libraries through your applications using I'm not going to talk about it at all I just mentioned it because it's a",
    "start": "87600",
    "end": "93150"
  },
  {
    "text": "range tool it actually has quite a similar interface and you might also find that useful to learn about okay the",
    "start": "93150",
    "end": "102780"
  },
  {
    "text": "beauty of s trace is it gives you everything in symbolic form okay you get",
    "start": "102780",
    "end": "108869"
  },
  {
    "text": "system call system calls being displayed to you by name when there are signals",
    "start": "108869",
    "end": "114420"
  },
  {
    "text": "involved you see the names of the signals and signal numbers when strings are being used as arguments you see the",
    "start": "114420",
    "end": "121409"
  },
  {
    "text": "strings being printed out by default up to a certain limit 32 bytes but you can't ask you get more of each string",
    "start": "121409",
    "end": "128250"
  },
  {
    "text": "being displayed things like bit masks for certain system calls those bit masks",
    "start": "128250",
    "end": "135249"
  },
  {
    "text": "are displayed symbolically in other words s trace has built-in logic where",
    "start": "135249",
    "end": "141189"
  },
  {
    "text": "it understands each different system call and what the flags arguments of those system calls mean and it it has",
    "start": "141189",
    "end": "148870"
  },
  {
    "text": "the bits decoded into symbolic form for every different system call when it",
    "start": "148870",
    "end": "156250"
  },
  {
    "text": "displays structures to you it displays the structures in a nice sort of C format braces and each field",
    "start": "156250",
    "end": "163060"
  },
  {
    "text": "is shown with its name by default and when when system calls fail and you get",
    "start": "163060",
    "end": "171010"
  },
  {
    "text": "an error in the global urn over it variable you see the name of that error",
    "start": "171010",
    "end": "176500"
  },
  {
    "text": "in symbolic form and you see the textual description of that error and by default",
    "start": "176500",
    "end": "183099"
  },
  {
    "text": "large arguments and structures are breviary by default but you can't ask",
    "start": "183099",
    "end": "188980"
  },
  {
    "text": "for the full format of those structures the full display of those structures so here's an example of the kind of output",
    "start": "188980",
    "end": "195790"
  },
  {
    "text": "you might see when using that expanded output from air stress where we've got a",
    "start": "195790",
    "end": "200889"
  },
  {
    "text": "call to a system call here called F stat if state takes two arguments one of the",
    "start": "200889",
    "end": "206259"
  },
  {
    "text": "arguments is a file descriptor which is just an integer but the other argument is a structure that's returned by the",
    "start": "206259",
    "end": "212769"
  },
  {
    "text": "system call and what we see here is an opening brace for the structure a closing brace for the structure and then",
    "start": "212769",
    "end": "218889"
  },
  {
    "text": "each one of the fields is displayed to us in a labeled with its value and all",
    "start": "218889",
    "end": "225609"
  },
  {
    "text": "of the fields that are should be displayed symbolically are displayed",
    "start": "225609",
    "end": "231310"
  },
  {
    "text": "symbolically so to take one example here's a time stamp field and the time",
    "start": "231310",
    "end": "238030"
  },
  {
    "text": "stamp field gets shown to us as a date and a time taking another example here",
    "start": "238030",
    "end": "244989"
  },
  {
    "text": "this st mode field the st mode field gives us two pieces of information about",
    "start": "244989",
    "end": "250719"
  },
  {
    "text": "the file its permissions mode and also the file type now the permissions mode",
    "start": "250719",
    "end": "256120"
  },
  {
    "text": "here is displayed in octal because most people understand octal permissions masks on on unix linux systems but the",
    "start": "256120",
    "end": "263169"
  },
  {
    "text": "file type is shown to us using the standard constant used in the",
    "start": "263169",
    "end": "268389"
  },
  {
    "text": "header files for this particular file type so it's not displayed to us numerically instead we see s I F reg",
    "start": "268389",
    "end": "274510"
  },
  {
    "text": "this is a regular file another example",
    "start": "274510",
    "end": "279820"
  },
  {
    "text": "the first field here s T dev this is telling us what device this file lives",
    "start": "279820",
    "end": "286389"
  },
  {
    "text": "on okay yes that is giving us information to back about a file this is the device that this file lives on now",
    "start": "286389",
    "end": "292270"
  },
  {
    "text": "devices on Unix Linux systems are identified by a combination of a major",
    "start": "292270",
    "end": "297310"
  },
  {
    "text": "and a minor ID the major IDE ID tells us what kind of device it is the minor IDs",
    "start": "297310",
    "end": "302889"
  },
  {
    "text": "is which particular instance of the device it is and there's a standard macro in the header files called make",
    "start": "302889",
    "end": "309490"
  },
  {
    "text": "dev that takes those two numbers combines them to make a bigger number and that macro is used to display to us",
    "start": "309490",
    "end": "317139"
  },
  {
    "text": "the the the device ID okay another",
    "start": "317139",
    "end": "325270"
  },
  {
    "text": "example here we've got open open takes a path name and a Flags argument again the",
    "start": "325270",
    "end": "332560"
  },
  {
    "text": "flags argument is displayed symbolically open returns to us a file descriptor",
    "start": "332560",
    "end": "337750"
  },
  {
    "text": "assuming it succeeds and we see the file descriptor number being displayed there its file descriptor number 3 so let's",
    "start": "337750",
    "end": "347500"
  },
  {
    "text": "take a very simple C program all it does is write out a string and terminate and",
    "start": "347500",
    "end": "353770"
  },
  {
    "text": "then we'll run s trace on that program by default s trace sends its output to",
    "start": "353770",
    "end": "360580"
  },
  {
    "text": "standard error but we can ask it to send the output to a tour to a file instead so here I'm saying send the output to a",
    "start": "360580",
    "end": "367000"
  },
  {
    "text": "log file I run the program the program produces some output and oh there's a",
    "start": "367000",
    "end": "374410"
  },
  {
    "text": "little step I need to mention a long way well look at that log file in just a moment on some Linux systems there's a",
    "start": "374410",
    "end": "381190"
  },
  {
    "text": "security module that's installed which by default disables the use of the P",
    "start": "381190",
    "end": "387100"
  },
  {
    "text": "trace system call except in limited cases so if you find that you try and S trace something on your system and it",
    "start": "387100",
    "end": "393160"
  },
  {
    "text": "doesn't work what you might need to do is check do you have this file on your system",
    "start": "393160",
    "end": "398840"
  },
  {
    "text": "and doesn't have the value zero inside and if it doesn't they need to put zero",
    "start": "398840",
    "end": "404150"
  },
  {
    "text": "in that file and then you can use s trace otherwise there's an unprivileged user you can't use s trace okay so when",
    "start": "404150",
    "end": "414800"
  },
  {
    "text": "we look inside that file we see a whole bunch of output so I've edited the",
    "start": "414800",
    "end": "420169"
  },
  {
    "text": "output here quite a bit it was actually about 25 lines or so in this particular",
    "start": "420169",
    "end": "426889"
  },
  {
    "text": "case a lot of those lines were to do as loading of shared libraries that happened at the start of the execution",
    "start": "426889",
    "end": "432740"
  },
  {
    "text": "of the program so we will see lines like",
    "start": "432740",
    "end": "438590"
  },
  {
    "text": "this where we're a fire certain files being opened in this case it's the cache file being used by the dynamic dynamic",
    "start": "438590",
    "end": "444020"
  },
  {
    "text": "linker and in map calls are being the in met pool here is probably to do I was",
    "start": "444020",
    "end": "453710"
  },
  {
    "text": "gonna say it's to do with mapping some shared library but maybe the cache library the cache file is being mapped",
    "start": "453710",
    "end": "459110"
  },
  {
    "text": "in as well but what we see down towards the end is information about the system calls that",
    "start": "459110",
    "end": "465470"
  },
  {
    "text": "were actually in our C code there's a whole lot of calls that happen at the start to do with C runtime start up",
    "start": "465470",
    "end": "470570"
  },
  {
    "text": "dynamic linking and so on but then towards the end we see the system calls that we actually explicitly made in our",
    "start": "470570",
    "end": "477169"
  },
  {
    "text": "program and here's the right call it had we wrote on the file descriptor one",
    "start": "477169",
    "end": "482960"
  },
  {
    "text": "standard output a string a certain length the return value of right was 12",
    "start": "482960",
    "end": "488570"
  },
  {
    "text": "right tells us how many bytes is written then we see something that's a little bit surprising because going back here",
    "start": "488570",
    "end": "495620"
  },
  {
    "text": "this was a call to the exit library function now if you if you know how UNIX",
    "start": "495620",
    "end": "504229"
  },
  {
    "text": "systems work you know that the exit library function called an an underlying",
    "start": "504229",
    "end": "509539"
  },
  {
    "text": "system call called underscore exit and so that's what you might expect to see in the s trace log instead we're seeing",
    "start": "509539",
    "end": "517789"
  },
  {
    "text": "a call to something else exit group now",
    "start": "517789",
    "end": "523839"
  },
  {
    "text": "jump for they're a little bit if you go and look in the manual pages",
    "start": "524290",
    "end": "530540"
  },
  {
    "text": "closely enough you'll find a lot of annotations these days that looked like",
    "start": "530540",
    "end": "535579"
  },
  {
    "text": "this see library colonel differences and you go and read through and you see Angie Lipsy since version 2.3 the",
    "start": "535579",
    "end": "543290"
  },
  {
    "text": "underscore exits API is actually a wrapper function in the C library that",
    "start": "543290",
    "end": "548779"
  },
  {
    "text": "instead calls exit group so sometimes you have to do a bit of detective work",
    "start": "548779",
    "end": "554600"
  },
  {
    "text": "to understand what you're seeing in the S trace outputs okay so I sort of",
    "start": "554600",
    "end": "567860"
  },
  {
    "text": "covered a lot of this already but the point is gained in the symbolic output we're seeing the names of system calls",
    "start": "567860",
    "end": "572869"
  },
  {
    "text": "we're seeing the values passed in as arguments we're seeing for each system call a return value some system calls",
    "start": "572869",
    "end": "581360"
  },
  {
    "text": "don't return a value so exit group for instance doesn't return so we see a question mark there and in the case of",
    "start": "581360",
    "end": "589009"
  },
  {
    "text": "system calls that fail like this access system called here we see the return value as minus one Ino int is the",
    "start": "589009",
    "end": "596929"
  },
  {
    "text": "symbolic value or the symbolic name of the value that appears in the ER no",
    "start": "596929",
    "end": "602509"
  },
  {
    "text": "variable telling us what kind of error this was and in this case it's telling us no entry in the files and this this",
    "start": "602509",
    "end": "609799"
  },
  {
    "text": "path name doesn't exist and also on the",
    "start": "609799",
    "end": "615230"
  },
  {
    "text": "next line we see the standard textual description of that error no such file",
    "start": "615230",
    "end": "620480"
  },
  {
    "text": "or directory okay now by default we'll use s trace if",
    "start": "620480",
    "end": "629449"
  },
  {
    "text": "we try and trace us a program what we'll see is the system calls that are made by",
    "start": "629449",
    "end": "634759"
  },
  {
    "text": "the process that executes that program if that process or that program creates child processes by default we don't see",
    "start": "634759",
    "end": "642860"
  },
  {
    "text": "the trace output for those child processes but we can ask to do so we can",
    "start": "642860",
    "end": "648290"
  },
  {
    "text": "say it's trace - F and then we see not only the program that we wanted that we",
    "start": "648290",
    "end": "654709"
  },
  {
    "text": "started getting traced but also the child processes that it creates now",
    "start": "654709",
    "end": "660439"
  },
  {
    "text": "every line of output in the S Trace out is prefixed by a PID this even works",
    "start": "660439",
    "end": "666950"
  },
  {
    "text": "with programs that use threads by the way POSIX threads for example in this case each line gets prefixed by the",
    "start": "666950",
    "end": "673780"
  },
  {
    "text": "kernel thread IDE that is used underneath to implement the POSIX thread",
    "start": "673780",
    "end": "678980"
  },
  {
    "text": "and so again a little example here I've got a program that creates a child",
    "start": "678980",
    "end": "686720"
  },
  {
    "text": "process using fork fork returns 0 if",
    "start": "686720",
    "end": "691870"
  },
  {
    "text": "when the child returns and the child prints out a message and maybe if it was",
    "start": "691870",
    "end": "696950"
  },
  {
    "text": "a command-line argument the child will try an exec command unless you're gonna try and do that in the demonstration",
    "start": "696950",
    "end": "702800"
  },
  {
    "text": "that we'll see in just a moment the parent meanwhile waits for the child",
    "start": "702800",
    "end": "707810"
  },
  {
    "text": "to terminate and I run the program here no argument so it doesn't try and exec",
    "start": "707810",
    "end": "713570"
  },
  {
    "text": "any other program so there's going to be a fork to create a child process the Choppers is going to print a message and",
    "start": "713570",
    "end": "719810"
  },
  {
    "text": "then terminate meanwhile the parent is going to wait for the child to terminate and then the parent terminates as well",
    "start": "719810",
    "end": "728020"
  },
  {
    "text": "helpfully my program the two processes print out their pids so we can match",
    "start": "728020",
    "end": "734930"
  },
  {
    "text": "that up in the s trace log so when we do",
    "start": "734930",
    "end": "740270"
  },
  {
    "text": "that now what we see is every line begins with a a PID telling us which",
    "start": "740270",
    "end": "746000"
  },
  {
    "text": "process is producing the trace output and so we can see which of the parent",
    "start": "746000",
    "end": "753860"
  },
  {
    "text": "and the child the parent was 1 9 3 9 the child was 1 9 4 0 which parent which",
    "start": "753860",
    "end": "759440"
  },
  {
    "text": "process is producing the trace output what we're seeing very first they're the",
    "start": "759440",
    "end": "766850"
  },
  {
    "text": "exact ve call that was used to actually launch the program now further down",
    "start": "766850",
    "end": "772880"
  },
  {
    "text": "there's a call here to clone and again this is where you need to do a bit of",
    "start": "772880",
    "end": "778700"
  },
  {
    "text": "detective work but we had a program that called fork to create a child process but there's actually no call to fork",
    "start": "778700",
    "end": "786020"
  },
  {
    "text": "here and that's because these days I don't have forgot it on a slide I haven't but these days clones",
    "start": "786020",
    "end": "793430"
  },
  {
    "text": "sorry Fork is actually a wrapper Fung action in the sea library that instead calls the clone system called clone",
    "start": "793430",
    "end": "800720"
  },
  {
    "text": "provides a sort of superset of the functionality of fork and so what we",
    "start": "800720",
    "end": "806510"
  },
  {
    "text": "thought was a fork system for actually underneath is really a clone system call",
    "start": "806510",
    "end": "812440"
  },
  {
    "text": "so that was a clone system call being made by the parents and then you can see the parent is calling wait to wait for",
    "start": "812440",
    "end": "820430"
  },
  {
    "text": "the child again we see here there's a call to wait for we call something named",
    "start": "820430",
    "end": "827510"
  },
  {
    "text": "wait but actually this is a wrapper function again that underneath calls a",
    "start": "827510",
    "end": "832910"
  },
  {
    "text": "system call called wait for again you'll find all these details and these little pieces and the main pages about the",
    "start": "832910",
    "end": "839210"
  },
  {
    "text": "differences between see library and kernel interfaces so Anderson Lee",
    "start": "839210",
    "end": "849110"
  },
  {
    "text": "happens just here we call wait for we've asked the minus one here says wait for",
    "start": "849110",
    "end": "854360"
  },
  {
    "text": "any child and the wait for call blocked it hasn't finished yet",
    "start": "854360",
    "end": "860330"
  },
  {
    "text": "yes trace works this out and that the splice to us that this call is not yet",
    "start": "860330",
    "end": "866360"
  },
  {
    "text": "finished now here's the child the child writes a string okay a write system for",
    "start": "866360",
    "end": "873200"
  },
  {
    "text": "the printf underneath was using a write system call and then the child",
    "start": "873200",
    "end": "878990"
  },
  {
    "text": "terminates by calling the exit library function and by now we know that underneath the system call that is being",
    "start": "878990",
    "end": "884750"
  },
  {
    "text": "used is exit group now at that point the child process terminates yes trace notices that and so we see",
    "start": "884750",
    "end": "893870"
  },
  {
    "text": "that s trace tells us that process terminated with exit status zero and at",
    "start": "893870",
    "end": "899240"
  },
  {
    "text": "this point the parent wakes up again because now it gets informed that the",
    "start": "899240",
    "end": "905420"
  },
  {
    "text": "child processes are now terminated and the white for call now unblocks and we",
    "start": "905420",
    "end": "912410"
  },
  {
    "text": "see the rest of the arguments that are being returned by the wait for call and wait for as well it's return value is",
    "start": "912410",
    "end": "920390"
  },
  {
    "text": "the PID of the child whose status is being reported what also happens for the",
    "start": "920390",
    "end": "926990"
  },
  {
    "text": "parent in the scenario is it gets a signal the talent that the child process terminated and his trace",
    "start": "926990",
    "end": "933370"
  },
  {
    "text": "also can tell us about signals that are flying around inside our application and",
    "start": "933370",
    "end": "939700"
  },
  {
    "text": "the signal signal that's involved here is sig child okay the death of a child",
    "start": "939700",
    "end": "945250"
  },
  {
    "text": "process and signals on on Linux systems",
    "start": "945250",
    "end": "951220"
  },
  {
    "text": "and on a lot of other UNIX implementations as well can be accompanied with a bunch of other data",
    "start": "951220",
    "end": "957130"
  },
  {
    "text": "that tells us about the origin of the signal and so we see things like the",
    "start": "957130",
    "end": "964870"
  },
  {
    "text": "information here si code CL the accident this is telling us that the cause of the",
    "start": "964870",
    "end": "970480"
  },
  {
    "text": "generation of the signal was child termination and we even see the PID of",
    "start": "970480",
    "end": "976210"
  },
  {
    "text": "the child that terminated the user ID of that process some other information as",
    "start": "976210",
    "end": "981460"
  },
  {
    "text": "well then the parent terminates and s trace sees that okay so if you use s",
    "start": "981460",
    "end": "992620"
  },
  {
    "text": "trace to look at any interesting program what you find is any interesting program",
    "start": "992620",
    "end": "999790"
  },
  {
    "text": "makes thousands of system calls tens of thousands of system calls so you get this enormous quantity of output and so",
    "start": "999790",
    "end": "1007890"
  },
  {
    "text": "one of these you didn't want to do is say I want less output you want to",
    "start": "1007890",
    "end": "1013230"
  },
  {
    "text": "filter the output that you're getting and there's a few different kinds of filtering that you can do first of all",
    "start": "1013230",
    "end": "1020010"
  },
  {
    "text": "there's an S trace - iakh ssin which allows you what's your my other things can be used",
    "start": "1020010",
    "end": "1025890"
  },
  {
    "text": "to select the system calls that you want to trace so maybe you want to only want",
    "start": "1025890",
    "end": "1031260"
  },
  {
    "text": "to trace certain system calls to your applications making then you can say s trace - e trace equals and then names of",
    "start": "1031260",
    "end": "1040589"
  },
  {
    "text": "system calls one by one separated by commas so here we're saying run the",
    "start": "1040589",
    "end": "1045870"
  },
  {
    "text": "program LS and just trace the open and close system calls opening and closing",
    "start": "1045870",
    "end": "1052080"
  },
  {
    "text": "files sometimes or conversely you have",
    "start": "1052080",
    "end": "1058140"
  },
  {
    "text": "applications that make a lot of system calls but they make a lot of this system calls and you actually don't want",
    "start": "1058140",
    "end": "1065410"
  },
  {
    "text": "to know about those system calls a classic example is there are some applications out there that do things",
    "start": "1065410",
    "end": "1070810"
  },
  {
    "text": "like call and get time of day thousands of times a second get time of day just",
    "start": "1070810",
    "end": "1075970"
  },
  {
    "text": "returns the current time kind of strange thing to do but some applications want",
    "start": "1075970",
    "end": "1081880"
  },
  {
    "text": "to do it and maybe you don't want to see all those calls to get time of day in",
    "start": "1081880",
    "end": "1087640"
  },
  {
    "text": "your S trace output because they're cluttering up the output and they're not terribly interesting information for you",
    "start": "1087640",
    "end": "1093250"
  },
  {
    "text": "so then what you can say is s trace - e trace equals shriek has a not system",
    "start": "1093250",
    "end": "1100960"
  },
  {
    "text": "call commerce system call comma system call one thing you've got to watch out for here that shriek carries that",
    "start": "1100960",
    "end": "1108010"
  },
  {
    "text": "exclamation mark is often in two of me she'll interpret that character with a",
    "start": "1108010",
    "end": "1114700"
  },
  {
    "text": "special meaning so quite probably you want to put this piece in single quotes I don't know",
    "start": "1114700",
    "end": "1128350"
  },
  {
    "text": "more recently someone had the bright idea that an S trace you could say",
    "start": "1128350",
    "end": "1133870"
  },
  {
    "text": "Estrella XI equals trace slash regular expression so you actually write a",
    "start": "1133870",
    "end": "1139660"
  },
  {
    "text": "regular expression to select your system rules it seems kind of excessive to me there's only a few hundred system calls",
    "start": "1139660",
    "end": "1146380"
  },
  {
    "text": "and I don't know if I really want to write regular expressions to select system calls it seems more than I need",
    "start": "1146380",
    "end": "1152140"
  },
  {
    "text": "anyway it's a feature that was recently added one other feature that is",
    "start": "1152140",
    "end": "1159610"
  },
  {
    "text": "sometimes useful instead of specifying individual system calls you can say",
    "start": "1159610",
    "end": "1164830"
  },
  {
    "text": "estrellas - EE tres and then a system call category and there are a number of",
    "start": "1164830",
    "end": "1171870"
  },
  {
    "text": "predefined categories that you can choose yes trace - e trace equals % file",
    "start": "1171870",
    "end": "1178810"
  },
  {
    "text": "show me all the system calls that take a file name as an argument or show me all",
    "start": "1178810",
    "end": "1184930"
  },
  {
    "text": "the system calls that use file descriptors or the system calls that do sort of process management tasks things",
    "start": "1184930",
    "end": "1191740"
  },
  {
    "text": "like process creation with fork or clone process to terminate exit group execute a new program wait",
    "start": "1191740",
    "end": "1199040"
  },
  {
    "text": "for child processes or network related",
    "start": "1199040",
    "end": "1204170"
  },
  {
    "text": "system calls all the stuff to do with the socket API socket bind listen and so on",
    "start": "1204170",
    "end": "1209240"
  },
  {
    "text": "and signal rated system pulls memory related system calls there's a few other categories as well sometimes this is a",
    "start": "1209240",
    "end": "1217400"
  },
  {
    "text": "convenient shorthand of course rather than listing a bunch of system calls",
    "start": "1217400",
    "end": "1223960"
  },
  {
    "text": "individually yourself one of the other",
    "start": "1223960",
    "end": "1229160"
  },
  {
    "text": "things you can do is you can say maybe there's a lot of signals flying about as your application executes and you don't",
    "start": "1229160",
    "end": "1236300"
  },
  {
    "text": "want to see all of the signals in the trace output again you can use this",
    "start": "1236300",
    "end": "1242060"
  },
  {
    "text": "Dashie filter option to select which signals are being displayed and you say s trace - e signal equals and then a set",
    "start": "1242060",
    "end": "1249920"
  },
  {
    "text": "of signals and the set of signals is just listed by name optionally the names",
    "start": "1249920",
    "end": "1256010"
  },
  {
    "text": "of the signals can include the sig prefix but they don't have to and so here we're saying I want to trace the",
    "start": "1256010",
    "end": "1262940"
  },
  {
    "text": "sigil and Sigyn signals that happen during the execution of this application",
    "start": "1262940",
    "end": "1269030"
  },
  {
    "text": "and again there's a are not functionality because maybe there's a",
    "start": "1269030",
    "end": "1274310"
  },
  {
    "text": "certain thing what happens a lot and you don't want to see the output to do with that signal so you can say yes trace -",
    "start": "1274310",
    "end": "1280430"
  },
  {
    "text": "II signal equals not search one other",
    "start": "1280430",
    "end": "1288530"
  },
  {
    "text": "thing that you can do in terms of filtering is filtering by path name you",
    "start": "1288530",
    "end": "1296090"
  },
  {
    "text": "want to find out if your application is touching a certain path name and win and",
    "start": "1296090",
    "end": "1303130"
  },
  {
    "text": "with what system calls so you can say s trace - P path name and you'll see all",
    "start": "1303130",
    "end": "1310130"
  },
  {
    "text": "the system calls the relate to that path name and there's some some cleverness",
    "start": "1310130",
    "end": "1316100"
  },
  {
    "text": "that goes on here so first of all here I'm saying s trace - P Lib 64 Lib C dot",
    "start": "1316100",
    "end": "1323780"
  },
  {
    "text": "ISO dot six ideas about which one that is what file it is",
    "start": "1323780",
    "end": "1329220"
  },
  {
    "text": "a seed library okay and I'm just saying four LS send the actual output of LS to",
    "start": "1329220",
    "end": "1336390"
  },
  {
    "text": "slash dev slash Knowles who don't actually see us one of the things this trace works out along the way is that",
    "start": "1336390",
    "end": "1341789"
  },
  {
    "text": "actually this thing's a symbolic link that points to another file and so it tells us what the actual file is that",
    "start": "1341789",
    "end": "1349200"
  },
  {
    "text": "the symbolic link resolves to and then we go on the the the logged output and",
    "start": "1349200",
    "end": "1358289"
  },
  {
    "text": "we see here a call to open that open that path name certain flags and we got",
    "start": "1358289",
    "end": "1364559"
  },
  {
    "text": "back a certain file descriptor now s trace gets a bit clever here it says ah",
    "start": "1364559",
    "end": "1369679"
  },
  {
    "text": "that file was opened on that file descriptor everything that happens with that file description now I'd better",
    "start": "1369679",
    "end": "1375780"
  },
  {
    "text": "tell the user about it because the user is interested in what happens to that file and so now there's a whole bunch of",
    "start": "1375780",
    "end": "1381840"
  },
  {
    "text": "system calls later on that all use file descriptor number three okay we're reading from that file that we opened",
    "start": "1381840",
    "end": "1388799"
  },
  {
    "text": "we're doing an if stat on that file that we opened we're doing an M map from that",
    "start": "1388799",
    "end": "1394380"
  },
  {
    "text": "file that we opened and so on and so on and eventually the file gets closed file",
    "start": "1394380",
    "end": "1399929"
  },
  {
    "text": "destroy the file descriptor gets closed and at that point s trace of course",
    "start": "1399929",
    "end": "1406980"
  },
  {
    "text": "works out that hey this file descriptor is no longer interesting and even if it's reused later on with another open",
    "start": "1406980",
    "end": "1412559"
  },
  {
    "text": "on a different file of course it doesn't show us the system calls that use that file descriptor there's a few other sort",
    "start": "1412559",
    "end": "1425340"
  },
  {
    "text": "of related options that you can use in terms of path names there's an option -",
    "start": "1425340",
    "end": "1431070"
  },
  {
    "text": "why and when use the - why option then when file descriptors are displayed it",
    "start": "1431070",
    "end": "1437880"
  },
  {
    "text": "also displays extra information about the file descriptor for example the path name of the associated file so this just",
    "start": "1437880",
    "end": "1445620"
  },
  {
    "text": "makes it a bit easier for you to read the s trace output if you read the S trace output if you didn't use - Y and",
    "start": "1445620",
    "end": "1451980"
  },
  {
    "text": "you read the s trace output carefully enough you could always work out what files drippler 3 refers to but this is a",
    "start": "1451980",
    "end": "1458880"
  },
  {
    "text": "I kind of aid to make understanding this trace output even easier so here we're seeing file",
    "start": "1458880",
    "end": "1465779"
  },
  {
    "text": "descriptor 3 refers to the path slash",
    "start": "1465779",
    "end": "1471330"
  },
  {
    "text": "home slash Greece and and so on Oh hmm",
    "start": "1471330",
    "end": "1479580"
  },
  {
    "text": "I've made a little it mess up editing that slide that last part name there should say home MDK breach I tried to",
    "start": "1479580",
    "end": "1488369"
  },
  {
    "text": "shorten my slides but I failed to me out of that piece ok",
    "start": "1488369",
    "end": "1495769"
  },
  {
    "text": "there's also a - YY option okay so it's tres - why shows you information not",
    "start": "1495769",
    "end": "1502049"
  },
  {
    "text": "just her files but things like sockets and pipes as well as some useful information being displayed there and for for sockets in particular there's",
    "start": "1502049",
    "end": "1509850"
  },
  {
    "text": "also an option you can use called - YY which is give me even more information",
    "start": "1509850",
    "end": "1515039"
  },
  {
    "text": "about sockets and you get various protocol rated information being displayed so here we're seeing file",
    "start": "1515039",
    "end": "1521009"
  },
  {
    "text": "descriptor 3 it's a TCP socket there's an IP address associated with that",
    "start": "1521009",
    "end": "1526679"
  },
  {
    "text": "socket there's a port number and there's a peer associated with a soft because",
    "start": "1526679",
    "end": "1531720"
  },
  {
    "text": "this is a stream socket connection so we see the address the IP address and the",
    "start": "1531720",
    "end": "1538200"
  },
  {
    "text": "port number of the peer socket as well",
    "start": "1538200",
    "end": "1542898"
  },
  {
    "text": "one of the features that has been added more recently to s trace is system call",
    "start": "1544580",
    "end": "1551489"
  },
  {
    "text": "tampering they used to me you can just use s trace to trace the execution of",
    "start": "1551489",
    "end": "1558149"
  },
  {
    "text": "the process you can now use this trace to interfere with the execution of a",
    "start": "1558149",
    "end": "1563190"
  },
  {
    "text": "program you can cause certain system calls to change their behavior in various ways and this feature in general",
    "start": "1563190",
    "end": "1570929"
  },
  {
    "text": "is called system called tampering there's a bunch of different things you",
    "start": "1570929",
    "end": "1576299"
  },
  {
    "text": "can do you can add a delay before or after a system fall you can say when a certain system call is made generate a",
    "start": "1576299",
    "end": "1583200"
  },
  {
    "text": "signal you can bypass the execution of a system call so that when that system",
    "start": "1583200",
    "end": "1588600"
  },
  {
    "text": "call is is is attempted the system call doesn't actually get executed and there's various possibilities that you",
    "start": "1588600",
    "end": "1595619"
  },
  {
    "text": "can do there you can either bypass the system call and make it look like it's succeeded so it returns a set it looks",
    "start": "1595619",
    "end": "1602490"
  },
  {
    "text": "like it returns a success status or you can make that make things look like the",
    "start": "1602490",
    "end": "1607860"
  },
  {
    "text": "system Paul failed with a certain error number",
    "start": "1607860",
    "end": "1612320"
  },
  {
    "text": "there's even when it comes to doing the sort of tampering there's even a sort of limited facility to say which instance",
    "start": "1613049",
    "end": "1620520"
  },
  {
    "text": "of this system call should be tampered with",
    "start": "1620520",
    "end": "1625730"
  },
  {
    "text": "I'll check my time okay",
    "start": "1625730",
    "end": "1631220"
  },
  {
    "text": "now the way that you use this tampering option you say s trace - e inject and",
    "start": "1634790",
    "end": "1643020"
  },
  {
    "text": "then you list a set of system calls and then some option one of that says which one of these things do you want to do to",
    "start": "1643020",
    "end": "1650340"
  },
  {
    "text": "that system call and there's various possibilities that these are syntaxes",
    "start": "1650340",
    "end": "1655350"
  },
  {
    "text": "just correspond to those options you can say I want to make that system pool fail with a certain error number you know no",
    "start": "1655350",
    "end": "1662520"
  },
  {
    "text": "or I want to make it I want to bypass the system call and make it look like it",
    "start": "1662520",
    "end": "1670559"
  },
  {
    "text": "returned a certain return value so that it looks like the system calls succeeded somehow returning a certain value these",
    "start": "1670559",
    "end": "1678480"
  },
  {
    "text": "two options just by the by are mutually exclusive you can't make a system call succeed and fail ok tell the system",
    "start": "1678480",
    "end": "1687630"
  },
  {
    "text": "quartet make a deliver a signal when that system calls attempted or when the",
    "start": "1687630",
    "end": "1692820"
  },
  {
    "text": "system calls attempted have a delay before the system calls actually executes and or a delay after the system",
    "start": "1692820",
    "end": "1699870"
  },
  {
    "text": "call is executed or both so when a certain system call happens you can have things slow right down so that perhaps",
    "start": "1699870",
    "end": "1707520"
  },
  {
    "text": "while the delay is happening you might you couldn't be an arbitrarily long delay then you might do some inspection",
    "start": "1707520",
    "end": "1713520"
  },
  {
    "text": "of the rest of the environment that the process is running in because you want to see how do things look just at the",
    "start": "1713520",
    "end": "1720000"
  },
  {
    "text": "moment that the process makes that system call and then as I said there's a",
    "start": "1720000",
    "end": "1725880"
  },
  {
    "text": "sort of limited facility to choose which system call you want to interfere",
    "start": "1725880",
    "end": "1731960"
  },
  {
    "text": "with and you can say : win and then some sort of expression for instance when",
    "start": "1731960",
    "end": "1737450"
  },
  {
    "text": "equals in says tamper with the int in invocation of a certain system call or",
    "start": "1737450",
    "end": "1744879"
  },
  {
    "text": "tamper with all in invitations starting at the end call and everyone there",
    "start": "1744879",
    "end": "1750350"
  },
  {
    "text": "afterwards or every starting a tenth and then every s yes",
    "start": "1750350",
    "end": "1755600"
  },
  {
    "text": "step every yes instance of a notification to that system call okay",
    "start": "1755600",
    "end": "1768398"
  },
  {
    "text": "it's a very limited form of choosing I'm",
    "start": "1774909",
    "end": "1781490"
  },
  {
    "text": "sure many people would like what you like but that doesn't exist yet in this race it's a start and this feature was",
    "start": "1781490",
    "end": "1790249"
  },
  {
    "text": "only added you know sort of less than two years ago for a long time the",
    "start": "1790249",
    "end": "1796039"
  },
  {
    "text": "development of s tres was fairly fairly sedate but in the last two or three",
    "start": "1796039",
    "end": "1801470"
  },
  {
    "text": "years there's been a whole lot of development work going on a whole lot of new features being added so who knows",
    "start": "1801470",
    "end": "1808190"
  },
  {
    "text": "maybe you'll get what you want in the not-too-distant future",
    "start": "1808190",
    "end": "1813220"
  },
  {
    "text": "okay so here's an example in where I'm saying s tres - why why to get him for",
    "start": "1813220",
    "end": "1824570"
  },
  {
    "text": "extra information about file descriptors trace the close close calls okay this is",
    "start": "1824570",
    "end": "1829669"
  },
  {
    "text": "a shorthand here by the way I've said - e close I could have said - e trace equals clothes but you can't actually do",
    "start": "1829669",
    "end": "1837499"
  },
  {
    "text": "it shorter in some cases and then - e inject for the close calls make them",
    "start": "1837499",
    "end": "1845149"
  },
  {
    "text": "fail for the with the Erno value 22 but only make the third close call fail and",
    "start": "1845149",
    "end": "1852850"
  },
  {
    "text": "so we see here that the program is making a series of close calls the first",
    "start": "1852850",
    "end": "1859700"
  },
  {
    "text": "two close calls succeeded again the program was running over here is LS we see the first two",
    "start": "1859700",
    "end": "1866200"
  },
  {
    "text": "close calls do something but then the third close call looks like it fails",
    "start": "1866200",
    "end": "1871570"
  },
  {
    "text": "with an error Ian Val and we see the corresponding",
    "start": "1871570",
    "end": "1876610"
  },
  {
    "text": "error text for Ian Bell and we also get an indication from s trace actually this",
    "start": "1876610",
    "end": "1882130"
  },
  {
    "text": "was an injected error now after this",
    "start": "1882130",
    "end": "1887650"
  },
  {
    "text": "because Elias tried to use a certain file and the open failed after alias got",
    "start": "1887650",
    "end": "1894250"
  },
  {
    "text": "kind of sad and things started to go things started to go bad okay so Elias",
    "start": "1894250",
    "end": "1902140"
  },
  {
    "text": "eventually decided hmm I can't go any further",
    "start": "1902140",
    "end": "1906570"
  },
  {
    "text": "yes yep oh sorry yes you it's a it's a",
    "start": "1909360",
    "end": "1919870"
  },
  {
    "text": "good guy sorry y'all do have it here yes I don't have it here but 22 is the numeric value of the Ian Valero",
    "start": "1919870",
    "end": "1927180"
  },
  {
    "text": "unfortunately if to specify the numbers numerically at least as far as I know so",
    "start": "1927180",
    "end": "1933310"
  },
  {
    "text": "the roots by the way a little program around nowadays it's it's a quite useful",
    "start": "1933310",
    "end": "1938620"
  },
  {
    "text": "little program that is not so well known and I just show it to you",
    "start": "1938620",
    "end": "1944590"
  },
  {
    "text": "it's a program called Erno now Mike might not be just installed by default on your system but there's a package",
    "start": "1944590",
    "end": "1951220"
  },
  {
    "text": "called more you tools that is available for most distributions and it gives you this little tool and it's really useful",
    "start": "1951220",
    "end": "1957490"
  },
  {
    "text": "because I can say ernõ 22 en Val or I can say oh no Ian",
    "start": "1957490",
    "end": "1964420"
  },
  {
    "text": "Val go the reverse direction this is quite useful as well when you using the",
    "start": "1964420",
    "end": "1970150"
  },
  {
    "text": "manual pages because in the manual pages the errors are listed symbolically but",
    "start": "1970150",
    "end": "1975390"
  },
  {
    "text": "the error that the errors are actually numbers and sometimes you actually just see numbers being output from programs",
    "start": "1975390",
    "end": "1981430"
  },
  {
    "text": "and you want to say well why I know I've got a certain error number and I can see their error names than the manual pages",
    "start": "1981430",
    "end": "1987750"
  },
  {
    "text": "what does that number mean you could go and look in the header files that's kind of painful though this program give you",
    "start": "1987750",
    "end": "1995470"
  },
  {
    "text": "easy way of doing it okay minus one so",
    "start": "1995470",
    "end": "2007140"
  },
  {
    "text": "when a system call fails what's happening is it has a return status which is typically zero on success or",
    "start": "2007140",
    "end": "2015360"
  },
  {
    "text": "minus one on fan yeah some system calls return of some sort of positive value on fan on success as well but the point is",
    "start": "2015360",
    "end": "2023309"
  },
  {
    "text": "minus one is return on value and then there's an additional channel for giving you further information about the error",
    "start": "2023309",
    "end": "2028770"
  },
  {
    "text": "which is the Erno global variable and the Ian velvet a value is what's landing",
    "start": "2028770",
    "end": "2034320"
  },
  {
    "text": "in the ER no global throw a no-no is a special variable dedicated to the",
    "start": "2034320",
    "end": "2040110"
  },
  {
    "text": "purpose of error reporting and s trace knows this so it's telling you what when",
    "start": "2040110",
    "end": "2045360"
  },
  {
    "text": "it s Tracie's o minus 1 return o that means there's going to be something",
    "start": "2045360",
    "end": "2050510"
  },
  {
    "text": "useful in ernõ and it shows you the value of Erno okay I just very briefly",
    "start": "2050510",
    "end": "2060450"
  },
  {
    "text": "mentioned then there are a number of other options that are potentially",
    "start": "2060450",
    "end": "2068070"
  },
  {
    "text": "useful from time to time it's trace - see this says give me a summary of the system calls that my",
    "start": "2068070",
    "end": "2075000"
  },
  {
    "text": "program made and what you see here is the number of system calls that were",
    "start": "2075000",
    "end": "2080280"
  },
  {
    "text": "made to alarm this is a system call called alarm and you can see for each",
    "start": "2080280",
    "end": "2086580"
  },
  {
    "text": "system call if there were system call instances that failed you can see the number of system corns invitations that",
    "start": "2086580",
    "end": "2093148"
  },
  {
    "text": "failed what you also get is some timing estimates where you you see there's an",
    "start": "2093149",
    "end": "2104550"
  },
  {
    "text": "estimate here in seconds of how long it took to make that system fool I I would",
    "start": "2104550",
    "end": "2109680"
  },
  {
    "text": "totally take this with a grain of salt because the way s trace works it uses the pea tray system call and the wipey",
    "start": "2109680",
    "end": "2116190"
  },
  {
    "text": "trace works when it's monitoring another process is it stops that process every",
    "start": "2116190",
    "end": "2121560"
  },
  {
    "text": "time I make it a system called just before it makes the system call and just after the system call returns for every",
    "start": "2121560",
    "end": "2128980"
  },
  {
    "text": "cool so just by the way this trace can slow a program down quite significantly because of all of these stops and starts",
    "start": "2128980",
    "end": "2137280"
  },
  {
    "text": "I can refer got a slide here about it but one of things you want to be you can",
    "start": "2137280",
    "end": "2142930"
  },
  {
    "text": "use s trace to trace a live process in production you can say s trace - P maybe",
    "start": "2142930",
    "end": "2148900"
  },
  {
    "text": "I've ice I have it here on the next slide s trace - P - trace are a running",
    "start": "2148900",
    "end": "2154359"
  },
  {
    "text": "process with a specified p ID and then you start seeing live tracing of that",
    "start": "2154359",
    "end": "2159700"
  },
  {
    "text": "process you can use even use that - lowercase P option multiple times to",
    "start": "2159700",
    "end": "2165640"
  },
  {
    "text": "trace several processes at once when you don't want to try to trace any more you",
    "start": "2165640",
    "end": "2171070"
  },
  {
    "text": "type ctrl C that stops the tracing generally you can only trace the",
    "start": "2171070",
    "end": "2177130"
  },
  {
    "text": "processes you write your own and this you're a privileged user when you do this you can really heavily impact the",
    "start": "2177130",
    "end": "2184750"
  },
  {
    "text": "performance of your application because every system call results in to stop",
    "start": "2184750",
    "end": "2189790"
  },
  {
    "text": "starts so if two orders of magnitude",
    "start": "2189790",
    "end": "2195720"
  },
  {
    "text": "slowed down and system calls is probably what you can expect think twice before",
    "start": "2195720",
    "end": "2203650"
  },
  {
    "text": "you do it in a production environment if you use s trace - P - F then you can",
    "start": "2203650",
    "end": "2210730"
  },
  {
    "text": "trace all the threads in a multi-threaded process okay there's a",
    "start": "2210730",
    "end": "2218680"
  },
  {
    "text": "few other options as well which I'll just mention very briefly - V says be verbose don't abbreviate structures and",
    "start": "2218680",
    "end": "2226119"
  },
  {
    "text": "arguments that are shown to us because by default its traces if you've got a very large structure it only displays to",
    "start": "2226119",
    "end": "2231790"
  },
  {
    "text": "you part of the structure but perhaps you want to see all the structure you can use - V by default strings when",
    "start": "2231790",
    "end": "2239470"
  },
  {
    "text": "they're displayed are limited to 32 bytes of the first 32 bytes of the",
    "start": "2239470",
    "end": "2244540"
  },
  {
    "text": "string again you can change this as an option s trace - yes and then string",
    "start": "2244540",
    "end": "2250180"
  },
  {
    "text": "size just by the way path names s trace",
    "start": "2250180",
    "end": "2255190"
  },
  {
    "text": "knows that path names are special regardless of this option would always displays a complete",
    "start": "2255190",
    "end": "2261590"
  },
  {
    "text": "the complete path name string when it's displaying to you information from a system call there's various options to",
    "start": "2261590",
    "end": "2269750"
  },
  {
    "text": "show you the start time and duration of system calls again I would treat this",
    "start": "2269750",
    "end": "2275990"
  },
  {
    "text": "with a bit of skepticism because of the way s trace works but they can give you a flavor of where your program is",
    "start": "2275990",
    "end": "2282170"
  },
  {
    "text": "spending time in its system calls so - t + - TT are options that you can use to",
    "start": "2282170",
    "end": "2289700"
  },
  {
    "text": "add the wall clock time so you see what time the system call was made - TT",
    "start": "2289700",
    "end": "2295490"
  },
  {
    "text": "includes the microseconds as well - capital T how much time was spent in",
    "start": "2295490",
    "end": "2302330"
  },
  {
    "text": "each system call one other option that is occasionally useful S trace - I show",
    "start": "2302330",
    "end": "2310220"
  },
  {
    "text": "the value of the instruction pointer at the point where the system call was made",
    "start": "2310220",
    "end": "2315920"
  },
  {
    "text": "so you can see which part of the code was making that particular system call",
    "start": "2315920",
    "end": "2321290"
  },
  {
    "text": "and I'm done ok just in time there's even time for",
    "start": "2321290",
    "end": "2329690"
  },
  {
    "text": "one or two questions",
    "start": "2329690",
    "end": "2332079"
  },
  {
    "text": "yes yes can you also trace a single",
    "start": "2334730",
    "end": "2343490"
  },
  {
    "text": "thread yes I think you can do that just by specifying just the thread ID I've",
    "start": "2343490",
    "end": "2349820"
  },
  {
    "text": "actually never tried that I've always wanted to trace either the just the the the main thread or all the threads but",
    "start": "2349820",
    "end": "2357230"
  },
  {
    "text": "I'm I'd be reasonably sure that you can just say yes trace - lowercase P and then the thread ID itself we could",
    "start": "2357230",
    "end": "2368570"
  },
  {
    "text": "answer that question very very quickly afterwards okay other questions yes I",
    "start": "2368570",
    "end": "2399740"
  },
  {
    "text": "think that's the intention the the you could do this but I think in the what",
    "start": "2399740",
    "end": "2407930"
  },
  {
    "text": "well I think it's interesting they've added this it's it's it's not clear to me that what the real use case is",
    "start": "2407930",
    "end": "2413569"
  },
  {
    "text": "because there are other ways to do this better okay in particular you can do",
    "start": "2413569",
    "end": "2418849"
  },
  {
    "text": "things like LD preload techniques with shared libraries where you intercept calls the system calls and have the",
    "start": "2418849",
    "end": "2426200"
  },
  {
    "text": "preload wrapper make it look like the",
    "start": "2426200",
    "end": "2431270"
  },
  {
    "text": "system calls succeeded or fail or even just does something else completely or you can use sick comp and set comp is a",
    "start": "2431270",
    "end": "2439250"
  },
  {
    "text": "technique for preventing an application making certain system calls and one of the options you've got to say make that",
    "start": "2439250",
    "end": "2445490"
  },
  {
    "text": "system call look like it failed I'm going to talk about sitcom actually tomorrow so yeah it's there as a feature",
    "start": "2445490",
    "end": "2454579"
  },
  {
    "text": "but it's not the tool I would reach for first I would be looking at the other tools first just cuz they offer more",
    "start": "2454579",
    "end": "2461089"
  },
  {
    "text": "flexibility but maybe the intention is with s Trace to add no bill on this",
    "start": "2461089",
    "end": "2466339"
  },
  {
    "text": "functionality so maybe you can do more powerful things in the future Patricia",
    "start": "2466339",
    "end": "2473740"
  },
  {
    "text": "sure but I would think about game set comp probably for doing my blackbox",
    "start": "2480280",
    "end": "2485810"
  },
  {
    "text": "testing in that case having a a set comp wrapper that sort of been loads the",
    "start": "2485810",
    "end": "2492050"
  },
  {
    "text": "program that I want a black box test just because I like sitcom it's fun but",
    "start": "2492050",
    "end": "2499280"
  },
  {
    "text": "it is all it is it is also much more powerful in terms of what you can do it is I guess the the the one the one thing",
    "start": "2499280",
    "end": "2507650"
  },
  {
    "text": "I would say in the favor of the inject take me Forrest race is it is really simple it's easy to do okay doing set",
    "start": "2507650",
    "end": "2515570"
  },
  {
    "text": "comp is take some effort doing LD preload takes some effort",
    "start": "2515570",
    "end": "2521570"
  },
  {
    "text": "so if perhaps if you want to just do a quick test what happens if I make that system pool fail now what does my",
    "start": "2521570",
    "end": "2527750"
  },
  {
    "text": "application doom so it could be a quick first shot at seeing you know I do that",
    "start": "2527750",
    "end": "2535040"
  },
  {
    "text": "black box testing the system call fails what did my application did it gracefully handle the error but if I",
    "start": "2535040",
    "end": "2541970"
  },
  {
    "text": "want to do more sophisticated testing in terms of black box testing failure mode",
    "start": "2541970",
    "end": "2546980"
  },
  {
    "text": "testing I would be thinking about the other tools",
    "start": "2546980",
    "end": "2551920"
  },
  {
    "text": "okay ah I'm moved allow you to instrument so can you",
    "start": "2555040",
    "end": "2569450"
  },
  {
    "text": "instrument a system call value to make it return a value that wasn't that",
    "start": "2569450",
    "end": "2574640"
  },
  {
    "text": "should that should never happen sure it's just a number you know there's",
    "start": "2574640",
    "end": "2581570"
  },
  {
    "text": "there's no limitation on the oh no value that you could well practically speaking",
    "start": "2581570",
    "end": "2589190"
  },
  {
    "text": "there's no limitation there's there is actually a limitation to do with the way system court well actually not bet",
    "start": "2589190",
    "end": "2596030"
  },
  {
    "text": "that's not really limitation in this case system core error numbers on the Linux kernel or the g-dub C expects them",
    "start": "2596030",
    "end": "2603170"
  },
  {
    "text": "what the C loggers expect them to be in the range 1 to 4 thousand 95 and they have certain rules around interpreting",
    "start": "2603170",
    "end": "2610310"
  },
  {
    "text": "the return values of system pools that are based on that assumption now the actual error numbers 1 up to a",
    "start": "2610310",
    "end": "2617390"
  },
  {
    "text": "few hundred so we're no lis nowhere near that limit of 4095 but I suppose when you're doing injection with s trace yeah you could",
    "start": "2617390",
    "end": "2624170"
  },
  {
    "text": "put any over your nono could be above 4,000 95 because this is this is a level sort of you can create this yes yeah",
    "start": "2624170",
    "end": "2645770"
  },
  {
    "text": "that just numbers yes",
    "start": "2645770",
    "end": "2652090"
  },
  {
    "text": "how does estrous handle context switching well underneath I don't know",
    "start": "2653490",
    "end": "2661720"
  },
  {
    "text": "the details really but I mean underneath what's the what's going on here is a certain system call called P trace and P",
    "start": "2661720",
    "end": "2668860"
  },
  {
    "text": "trace is just being used to monitor the process and the way that P traits works is interfacing to the kernel and the",
    "start": "2668860",
    "end": "2676300"
  },
  {
    "text": "kernel informs the user of s trace sorry P trace every time something happens",
    "start": "2676300",
    "end": "2682840"
  },
  {
    "text": "with that process that a system call relators so yes it's all been the colonel knows that a certain process is",
    "start": "2682840",
    "end": "2690280"
  },
  {
    "text": "being traced it knows the identity of the tracing process and so when some",
    "start": "2690280",
    "end": "2697420"
  },
  {
    "text": "trace relevant event happens it just causes the P trace call in the tracing",
    "start": "2697420",
    "end": "2705100"
  },
  {
    "text": "process to get informed is that a question also no no no just",
    "start": "2705100",
    "end": "2711880"
  },
  {
    "text": "stretching okay alrighty thank you very much",
    "start": "2711880",
    "end": "2717090"
  },
  {
    "text": "[Applause]",
    "start": "2717090",
    "end": "2722320"
  }
]