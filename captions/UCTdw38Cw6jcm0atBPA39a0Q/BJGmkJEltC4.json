[
  {
    "start": "0",
    "end": "162000"
  },
  {
    "text": "all righty so yeah I think I'll go all right I think perhaps a lot and enough time",
    "start": "4020",
    "end": "13500"
  },
  {
    "text": "for folks to find their way over here so I suppose all begin hello everybody hi",
    "start": "13500",
    "end": "20849"
  },
  {
    "text": "my name is Phillip Carter you can see on the slide I work on f-sharp for",
    "start": "20849",
    "end": "27180"
  },
  {
    "text": "Microsoft and I'm here to talk about some cool stuff coming in F sharp 5.0",
    "start": "27180",
    "end": "32279"
  },
  {
    "text": "which we hope to deliver sometime later this year in alignment with c-sharp 8.0",
    "start": "32279",
    "end": "37350"
  },
  {
    "text": "and dotnet core 3.0 so lots of Microsoft version numbers just kind of floating",
    "start": "37350",
    "end": "42449"
  },
  {
    "text": "around and um well anyways this one's 5.0 so anyways this is sort of the main",
    "start": "42449",
    "end": "47609"
  },
  {
    "text": "the main feature and this talk is gonna be a lot less about sort of how you use the feature and I'm a lot more about",
    "start": "47609",
    "end": "53910"
  },
  {
    "text": "just the design itself because to be frank we're still kind of in the middle of figuring out some of the more",
    "start": "53910",
    "end": "60030"
  },
  {
    "text": "difficult design decisions and so I think it's quite interesting to just sort of go through like you know from",
    "start": "60030",
    "end": "66000"
  },
  {
    "text": "syntax all the way to like you know dealing with backwards compatibility how a feature like this can actually get",
    "start": "66000",
    "end": "72329"
  },
  {
    "text": "designed so we're talking about a few things kind of in order so first I want",
    "start": "72329",
    "end": "77640"
  },
  {
    "text": "to give a little bit of context on Knolls as they are today in F sharp",
    "start": "77640",
    "end": "83810"
  },
  {
    "text": "hopefully to give you a bit of you know understanding sort of the motivations behind doing this for are sharp then",
    "start": "83810",
    "end": "90570"
  },
  {
    "text": "I'll sort of go through the design kind of the the bigger kind of high-level pieces there's a lot of smaller details",
    "start": "90570",
    "end": "96659"
  },
  {
    "text": "like the spec is like almost 10,000 words long so I'm not going to go through that entire thing that would be",
    "start": "96659",
    "end": "102420"
  },
  {
    "text": "far too much to go through in just an hour but hopefully you'll have sort of a good idea of sort of what the the thinking is behind the major design",
    "start": "102420",
    "end": "108899"
  },
  {
    "text": "points when I'm diving into a few things kind of a little bit deeper then I'm",
    "start": "108899",
    "end": "114509"
  },
  {
    "text": "going to talk about the representation of the metadata itself which is like you know we have this beautiful world and F",
    "start": "114509",
    "end": "120990"
  },
  {
    "text": "sharp but there's actually has to be represented somehow so that other compilers can interpret what we emit and",
    "start": "120990",
    "end": "126000"
  },
  {
    "text": "we can read what other compilers emit and sort of figuring out how that actually all works together and that",
    "start": "126000",
    "end": "132180"
  },
  {
    "text": "sort of leads into these things called knowability assumptions which is sort of our way of the compiler interprets certain things",
    "start": "132180",
    "end": "138460"
  },
  {
    "text": "that it sees and then there's just sort of a small little grab-bag of kind of",
    "start": "138460",
    "end": "143910"
  },
  {
    "text": "fun or perhaps not so fun little problems related to backwards compatibility and making sure that we",
    "start": "143910",
    "end": "151240"
  },
  {
    "text": "don't break existing code but somehow still try to fit this concept of no ability into something which creates a",
    "start": "151240",
    "end": "158860"
  },
  {
    "text": "lot of interesting little problems to solve so get started so contacts on",
    "start": "158860",
    "end": "165070"
  },
  {
    "start": "162000",
    "end": "193000"
  },
  {
    "text": "knows what's where they all about well if you're familiar with C sharp or Java",
    "start": "165070",
    "end": "170680"
  },
  {
    "text": "or something like that you're probably quite familiar with nulls and having to check for them and there's there's a lot",
    "start": "170680",
    "end": "176080"
  },
  {
    "text": "of that going on in that space but a lot of f-sharp programmers say well I don't really worry that much about nulls",
    "start": "176080",
    "end": "181150"
  },
  {
    "text": "because I have additional tools for dealing with them and so long as I use those tools I don't really have to think about them that much so I want to talk",
    "start": "181150",
    "end": "188230"
  },
  {
    "text": "sort of about that and sort of how Noel's can also kind of creep in even in light of some of those things that you have right so no Liz I'm actually gonna",
    "start": "188230",
    "end": "197830"
  },
  {
    "start": "193000",
    "end": "219000"
  },
  {
    "text": "make the claim that Noah is actually just fine by itself right you need you",
    "start": "197830",
    "end": "203620"
  },
  {
    "text": "need to be able to represent nothing in a programming language that's just a thing you have to be able to do and null",
    "start": "203620",
    "end": "208900"
  },
  {
    "text": "is a way that you can do that I'm sure we can all agree that the concept of nothing is perfectly handled by null",
    "start": "208900",
    "end": "216990"
  },
  {
    "text": "it's just the the problem is is that it's implicit it's not it's not sort of in-your-face right like if you have a",
    "start": "216990",
    "end": "223120"
  },
  {
    "start": "219000",
    "end": "648000"
  },
  {
    "text": "string it said like the type system says that's a string but it's not actually a strength it's either a string or no but",
    "start": "223120",
    "end": "229990"
  },
  {
    "text": "there there's no indication you've got that's actually true right so you can have code that looks like this where",
    "start": "229990",
    "end": "235560"
  },
  {
    "text": "it's just a very simple just valid F sharp program takes in a number and",
    "start": "235560",
    "end": "241150"
  },
  {
    "text": "turns it into a string sometimes but if you execute this program you always get",
    "start": "241150",
    "end": "246520"
  },
  {
    "text": "an exception at runtime it always fails and there's there's zero help from the compiler that you get from this we like",
    "start": "246520",
    "end": "254050"
  },
  {
    "text": "to think that F sharp sort of has this tradition of letting you know that oh something is not going to work at runtime or you know these things are not",
    "start": "254050",
    "end": "260950"
  },
  {
    "text": "consistent or something like that but if you pop if you take this code you read",
    "start": "260950",
    "end": "266080"
  },
  {
    "text": "it in your editor doesn't matter which F sharp editor you have you'll get no warning as to the fact",
    "start": "266080",
    "end": "271310"
  },
  {
    "text": "that this is always going to crash at runtime so you know this is a very contrived example but I'm sure plenty of",
    "start": "271310",
    "end": "277340"
  },
  {
    "text": "you have run into this problem in the past right so to deal with this f-sharp is not without tools right most",
    "start": "277340",
    "end": "285590"
  },
  {
    "text": "people are probably familiar with options so rather than dealing with nulls here if I want to represent nothing in this case like if I want to",
    "start": "285590",
    "end": "293420"
  },
  {
    "text": "try to parse an INT from a string I can just wrap the value that I've parsed into an optional and I can use the",
    "start": "293420",
    "end": "300410"
  },
  {
    "text": "options none case to represent you know oh it couldn't parse and this is sort of a much better strongly typed sort of",
    "start": "300410",
    "end": "307010"
  },
  {
    "text": "thing in terms of dealing with the concept of nothing because then you have to pattern match to get the actual value out and if you fail to account for all",
    "start": "307010",
    "end": "314690"
  },
  {
    "text": "possible cases with a pattern match then the compiler complains because it could fail at runtime and so on and this is",
    "start": "314690",
    "end": "320180"
  },
  {
    "text": "just something that once you learn how to do it and and sort of place options everywhere in your code base you can",
    "start": "320180",
    "end": "325670"
  },
  {
    "text": "sort of eliminate certain aspects of null and and not really have to worry about it and the compiler is always",
    "start": "325670",
    "end": "331370"
  },
  {
    "text": "there to sort of help you deal with the fact that something may not necessarily exist so this is definitely a tool for",
    "start": "331370",
    "end": "340100"
  },
  {
    "text": "dealing with Nowell that's pretty good another one is we are immutable by default with half-shark so you know I",
    "start": "340100",
    "end": "347240"
  },
  {
    "text": "could assign something to be a you know an actual string value and at no point in the program's lifetime will it change",
    "start": "347240",
    "end": "353590"
  },
  {
    "text": "so long as I remain immutable and that's by default I have to be actually explicit about mutability and by doing",
    "start": "353590",
    "end": "360920"
  },
  {
    "text": "that you know it's it's almost sort of like a code smell that f start",
    "start": "360920",
    "end": "365990"
  },
  {
    "text": "programmers are sort of used to dealing with oh I had to make this mutable it could change out from under me at any",
    "start": "365990",
    "end": "371450"
  },
  {
    "text": "point in time I need to be really careful with this or maybe they may even say oh well I should perhaps rethink how",
    "start": "371450",
    "end": "377240"
  },
  {
    "text": "I'm actually constructing things around here so that things can't change out from under me whereas you know if you",
    "start": "377240",
    "end": "383300"
  },
  {
    "text": "compare that with c-sharp for example things can always change out from under you kind of by default and so that's this is something that does make the",
    "start": "383300",
    "end": "389930"
  },
  {
    "text": "problem a lot better an f-sharp and then also speaking of reference types if you",
    "start": "389930",
    "end": "395660"
  },
  {
    "text": "declare a reference type in F sharp and then you try to do something like null check on it well you can actually get a",
    "start": "395660",
    "end": "400970"
  },
  {
    "text": "compile error saying that this thing such as my class here does not have Knoll as a proper value that's",
    "start": "400970",
    "end": "407600"
  },
  {
    "text": "because F sharp declared reference types by default do not support Noll as a value so you know again so long as",
    "start": "407600",
    "end": "415190"
  },
  {
    "text": "you're just sort of in this nice little F sharp world you can construct you know various various things and use different",
    "start": "415190",
    "end": "421789"
  },
  {
    "text": "tools in the language to sort of not really have to worry about Knowles that much but the world's a little bit more",
    "start": "421789",
    "end": "427490"
  },
  {
    "text": "complicated than that and you don't always get to live in a nice little world that you construct for yourself",
    "start": "427490",
    "end": "434830"
  },
  {
    "text": "one example is using the exact same code as before you can apply this attribute",
    "start": "434830",
    "end": "440840"
  },
  {
    "text": "called allow no literal to a class that you declare this is if you need to work",
    "start": "440840",
    "end": "446180"
  },
  {
    "text": "with an API that actually accepts null as a proper value well you couldn't do that in the previous case but you can do",
    "start": "446180",
    "end": "452479"
  },
  {
    "text": "that here however at least in this little contrived example I only needed",
    "start": "452479",
    "end": "458150"
  },
  {
    "text": "null ability in one spot but I actually kind of got it everywhere now because",
    "start": "458150",
    "end": "463460"
  },
  {
    "text": "instead of being able to say oh here's just this one place where I need a null to exist but I don't want Noel's",
    "start": "463460",
    "end": "468800"
  },
  {
    "text": "anywhere else so I'm gonna put this attribute on there now anywhere that I define an instance of this class",
    "start": "468800",
    "end": "474770"
  },
  {
    "text": "especially if it's a mutable instance I can modify it and assign it to null anywhere there so nodes can sort of",
    "start": "474770",
    "end": "479990"
  },
  {
    "text": "creep in and kind of a subtle ways like that another interesting one is the CLI mutable attribute this is something that",
    "start": "479990",
    "end": "486889"
  },
  {
    "text": "plenty of people use with F sharp records if they're using them to work with like an object relational mapper or",
    "start": "486889",
    "end": "493159"
  },
  {
    "text": "something like that well an object relational mapper needs to be able to change the values of something all the",
    "start": "493159",
    "end": "498800"
  },
  {
    "text": "time and straying today can certainly be assigned null so you know it's",
    "start": "498800",
    "end": "505310"
  },
  {
    "text": "throughout your applications lifetime you could have an actual value inside a string you could do something like call dot length on it and be totally happy",
    "start": "505310",
    "end": "511580"
  },
  {
    "text": "because you're saying I yes I'm using an f-sharp record type the whole thing has been you know there everything is",
    "start": "511580",
    "end": "517190"
  },
  {
    "text": "immutable of course of course I can be totally safe with this well if you see li immutable you can't use that",
    "start": "517190",
    "end": "522469"
  },
  {
    "text": "assumption anymore but the problem is if you're used to using record types all over the place and you sort of make these assumptions that you know oh this",
    "start": "522469",
    "end": "529130"
  },
  {
    "text": "thing's not going to be a no like an just dot right into it that's not going to hold true if you do this sort of thing",
    "start": "529130",
    "end": "534510"
  },
  {
    "text": "and so again that's sort of like a little subtle way that things can get in there but then finally there's just just",
    "start": "534510",
    "end": "539790"
  },
  {
    "text": "the general problem of dotnet Interop I would probably say that the majority of F chart programmers that I know have to",
    "start": "539790",
    "end": "545850"
  },
  {
    "text": "interoperate with some other dotnet library or the.net bcl or something like that so this is code from the F sharp",
    "start": "545850",
    "end": "554570"
  },
  {
    "text": "tools for Visual Studio this is just a little routine that colorized as a document makes a bunch of API calls so",
    "start": "554570",
    "end": "561600"
  },
  {
    "text": "there's much code there but what's interesting here is we're mixing dotnet reference types with f-sharp declared",
    "start": "561600",
    "end": "567960"
  },
  {
    "text": "reference types right because we have classes that we've defined in our own code base and we use those like you know this thing called the F sharp checker",
    "start": "567960",
    "end": "574200"
  },
  {
    "text": "and and things like that well the F sharp declared ones are not null but the dotnet ones can certainly",
    "start": "574200",
    "end": "582030"
  },
  {
    "text": "be null right so there's actually two places in here where there might actually be a null reference except and",
    "start": "582030",
    "end": "587400"
  },
  {
    "text": "just waiting for us and we haven't accounted for it now we haven't actually encountered one of those yet because we",
    "start": "587400",
    "end": "592470"
  },
  {
    "text": "happen to know that the underlying system never passes us one of these null documents but there's nothing in the type system that prevents that from",
    "start": "592470",
    "end": "598680"
  },
  {
    "text": "happening yet we're sort of rolled into this false sense of security where yes we're working with all this nice nominal",
    "start": "598680",
    "end": "605190"
  },
  {
    "text": "stuff in F sharp but it's mixed together with things that could absolutely be null and you know like in this case this",
    "start": "605190",
    "end": "611490"
  },
  {
    "text": "is well tested code but we never tested the if checks for you know what what if",
    "start": "611490",
    "end": "616500"
  },
  {
    "text": "something is no now you know we could certainly add some unit tests for that and say yes we accomplished the problem but you know the next time we write",
    "start": "616500",
    "end": "622290"
  },
  {
    "text": "something like this we may not account for an OLE again and so things could potentially blow up so nulls still exist",
    "start": "622290",
    "end": "630300"
  },
  {
    "text": "in F sharp I would say that we certainly have more tools to deal with them today but they can still creep in and",
    "start": "630300",
    "end": "636450"
  },
  {
    "text": "oftentimes very subtle ways and those can be very frustrating because you're like well I'm supposed to be using the safer language why am I not getting this",
    "start": "636450",
    "end": "643350"
  },
  {
    "text": "null safety that I get in some cases but not other cases so hopefully it gives a",
    "start": "643350",
    "end": "648990"
  },
  {
    "start": "648000",
    "end": "1025000"
  },
  {
    "text": "little bit of motivation for why we want to do this there's actually more motivations that I'll talk about later but this in particular is just sort of",
    "start": "648990",
    "end": "656010"
  },
  {
    "text": "from the the f-chart perspective so without in mind I want to talk a little",
    "start": "656010",
    "end": "661050"
  },
  {
    "text": "bit about the design itself sort of you know saying okay there's all these little places where nulls can come in",
    "start": "661050",
    "end": "666360"
  },
  {
    "text": "how do we address that in a way that place that the strengths the language so as a slide says due to time constraints",
    "start": "666360",
    "end": "673020"
  },
  {
    "text": "this is absolutely not comprehensive the spec is very very big I'll have a link to it at the end you could take a look",
    "start": "673020",
    "end": "678450"
  },
  {
    "text": "if you're very interested in that sort of stuff but I will cover some of the major points so there's a few goals with this",
    "start": "678450",
    "end": "685830"
  },
  {
    "text": "so first we want to distinguish very strongly between a knowable reference type and a non-local reference type",
    "start": "685830",
    "end": "692340"
  },
  {
    "text": "right a string versus a string that could be null and we want to say as far as the F chart type system is concerned",
    "start": "692340",
    "end": "697590"
  },
  {
    "text": "these are kind of distinct things now for backwards compatibility reasons that's not true right you need to be",
    "start": "697590",
    "end": "703020"
  },
  {
    "text": "able to compile code and run code that that you you know with the F chart 5.0 compiler that you could with the F chart",
    "start": "703020",
    "end": "708360"
  },
  {
    "text": "4.5 4.6 compiler 4.1 or something like that that's just basic backwards",
    "start": "708360",
    "end": "713520"
  },
  {
    "text": "compatibility stuff but we do want to be able to distinguish in a way that we can warn you similarly we want to we want to keep",
    "start": "713520",
    "end": "720690"
  },
  {
    "text": "existing code going but we do want to sort of discourage you from using knowable reference types because it is",
    "start": "720690",
    "end": "726390"
  },
  {
    "text": "sort of thing that can just put nulls there and if if warnings are emitted in all sorts of little places then you'll",
    "start": "726390",
    "end": "732660"
  },
  {
    "text": "perhaps be discouraged from doing that and sort of say oh I'm gonna rethink what I'm what I'm doing right now and",
    "start": "732660",
    "end": "738300"
  },
  {
    "text": "try to find a way to make things non null there's a few helper functions and patterns for pattern matching that will",
    "start": "738300",
    "end": "743580"
  },
  {
    "text": "provide as well that kind of make makes the transition from knowable than unknowable a little bit easier and",
    "start": "743580",
    "end": "748920"
  },
  {
    "text": "there's various degrees of compiler analysis that'll that'll exist therefore",
    "start": "748920",
    "end": "755100"
  },
  {
    "text": "when you are working with mobile reference types and you just want to make sure that you're accessing them correctly so code is usually the best",
    "start": "755100",
    "end": "763560"
  },
  {
    "text": "way to understand stuff so there's a little bit of different syntax here I so",
    "start": "763560",
    "end": "769230"
  },
  {
    "text": "the first 3 values that are declared here are explicitly annotated as two of",
    "start": "769230",
    "end": "774750"
  },
  {
    "text": "them as an illiberal string and the other as a non knowable string and so the first two worked fine right you can assign Noll to a know little string and",
    "start": "774750",
    "end": "780570"
  },
  {
    "text": "you can assign a string to a know little string but the third one you try to assign null to a non knowable string",
    "start": "780570",
    "end": "788010"
  },
  {
    "text": "type you'll get a warning now this will actually compile and run just fine because you can do that today and we",
    "start": "788010",
    "end": "793350"
  },
  {
    "text": "don't want to break the code that runs today but we still want to admit a warning similarly if you try to just dot",
    "start": "793350",
    "end": "799170"
  },
  {
    "text": "into something that is a noble string without infernal then you'll get a warning and",
    "start": "799170",
    "end": "804770"
  },
  {
    "text": "so if you want to have sort of an alternative to that here's you know at the very bottom there's pattern matching where you know we have this this pattern",
    "start": "804770",
    "end": "812370"
  },
  {
    "text": "called the non-null pattern that basically binds what you have there to a non knowable string it actually succeeds",
    "start": "812370",
    "end": "818899"
  },
  {
    "text": "then you can dot into it and it could be totally fine so there's a few more things that are",
    "start": "818899",
    "end": "825060"
  },
  {
    "text": "here so kind of the first example is using pattern matching to bind a non null value and then be able to dot into",
    "start": "825060",
    "end": "831390"
  },
  {
    "text": "it in this case you could just have a function called no art check given an audible string produce a non knowable",
    "start": "831390",
    "end": "837540"
  },
  {
    "text": "string and then if you dot into that it's totally fine whatever that function does who knows right it just works with",
    "start": "837540",
    "end": "844440"
  },
  {
    "text": "the actual type system itself another interesting thing to note the array",
    "start": "844440",
    "end": "849600"
  },
  {
    "text": "signature here is kind of interesting it's it's kind of kind of ugly and",
    "start": "849600",
    "end": "855170"
  },
  {
    "text": "that's honestly that's just intentional right if you have if you have a bunch of",
    "start": "855170",
    "end": "860970"
  },
  {
    "text": "non knowable sorry you have a bunch of knowable stuff it's it it's not really that nice to you know annotate",
    "start": "860970",
    "end": "867180"
  },
  {
    "text": "everything with all these question marks and stuff like this question mark bracket bracket thing it's much nicer to just have string bracket bracket and so",
    "start": "867180",
    "end": "873779"
  },
  {
    "text": "if you can read you know sort of say oh well I actually don't need knowles here I don't know why I'm doing this then",
    "start": "873779",
    "end": "879600"
  },
  {
    "text": "that's sort of a benefit there and so this last example is kind of what some",
    "start": "879600",
    "end": "885209"
  },
  {
    "text": "more highly generic code could look like if you want to be generic over certain knowable types and sort well non",
    "start": "885209",
    "end": "892440"
  },
  {
    "text": "knowable and producing knowable types and so there's a bit of stuff there but you know it'll sort of come naturally to",
    "start": "892440",
    "end": "898620"
  },
  {
    "text": "you as you start working with it so as I",
    "start": "898620",
    "end": "903839"
  },
  {
    "text": "mentioned there's going to be some helper functions and patterns that can sort of help out with this some basic functions like you know is something",
    "start": "903839",
    "end": "910290"
  },
  {
    "text": "Knoll you can sort of assert that something is non null and you know it'll probably throw an exception at that",
    "start": "910290",
    "end": "916230"
  },
  {
    "text": "point in time but this is something that comes in handy later and then there's some active patterns that we have that",
    "start": "916230",
    "end": "922020"
  },
  {
    "text": "you can use in pattern matching because pattern matching is sort of the main control flow that most F chart programmers have you work in terms of",
    "start": "922020",
    "end": "927839"
  },
  {
    "text": "types you determine the shape of the types you dispatch certain functionality based on the shape of the types well we",
    "start": "927839",
    "end": "933209"
  },
  {
    "text": "want to play into that so we can use active patterns to be able to figure out if",
    "start": "933209",
    "end": "938220"
  },
  {
    "text": "something is going to be Nolan on mall and that actually works out quite elegantly with code today so another",
    "start": "938220",
    "end": "947759"
  },
  {
    "text": "another interesting thing that needs to be happened because F chart programmers and well frankly all programmers want to be generic over stuff there's a new",
    "start": "947759",
    "end": "954239"
  },
  {
    "text": "generic constraint that's being added because we already have the you know when T is null constraint the when T is",
    "start": "954239",
    "end": "959609"
  },
  {
    "text": "a struct meaning a value type when T is not a struct meaning a reference type those exist today just fine but we need",
    "start": "959609",
    "end": "965790"
  },
  {
    "text": "to be able to say oh well there's now a notion of reference types and non knowable reference types so you it's",
    "start": "965790",
    "end": "971429"
  },
  {
    "text": "nice to be able to have a generic constraint of saying oh this thing is not knowable so the semantics of that",
    "start": "971429",
    "end": "978149"
  },
  {
    "text": "are fairly straightforward there's just a little distinction between something that is f sharp declared versus",
    "start": "978149",
    "end": "983609"
  },
  {
    "text": "something that is not F sharp declared because F sharp today as sorta I talked about you can declare a reference type",
    "start": "983609",
    "end": "989129"
  },
  {
    "text": "that does not have null as a proper value and if you try to use it as if it does it's a compile error today so we",
    "start": "989129",
    "end": "995579"
  },
  {
    "text": "can actually afford to have a compile error for similar things if you try to instantiate an F sharp type that does",
    "start": "995579",
    "end": "1001879"
  },
  {
    "text": "have nulls a proper value with this not null constraint that is a compile error and that will be consistent with the way",
    "start": "1001879",
    "end": "1009049"
  },
  {
    "text": "that you do things today however if you do it with just a regular ol reference type like string or something like that",
    "start": "1009049",
    "end": "1014149"
  },
  {
    "text": "it's a warning rather than an error and that's just for backwards compatibility reasons no you could certainly tune that",
    "start": "1014149",
    "end": "1019609"
  },
  {
    "text": "warning to be an error if you'd like but that will not be the default because we don't want to break people so speaking",
    "start": "1019609",
    "end": "1027048"
  },
  {
    "start": "1025000",
    "end": "1198000"
  },
  {
    "text": "of pattern matching there's sort of a slight change to the way that you'll do stuff here so there's this this example",
    "start": "1027049",
    "end": "1039079"
  },
  {
    "text": "right here trying to take the length of a string you know you have the null pattern and in the case of it's and all",
    "start": "1039079",
    "end": "1044209"
  },
  {
    "text": "we return negative one then we have this non null pattern that you sort of saw before you can actually use that",
    "start": "1044209",
    "end": "1050240"
  },
  {
    "text": "anywhere not just at the end I just kind of have it at the end because most def stret programmers kind of tend to do that it's a bit more of an extensible",
    "start": "1050240",
    "end": "1056960"
  },
  {
    "text": "option which is why I show it first it's the sort of thing that we're still kind of noodling on the design on a little",
    "start": "1056960",
    "end": "1062570"
  },
  {
    "text": "bit but we think this may be sort of a preferred way to express that something is not no aldea pattern matching now in",
    "start": "1062570",
    "end": "1069860"
  },
  {
    "text": "this case you actually don't need to do that if the null pattern is the first in",
    "start": "1069860",
    "end": "1075440"
  },
  {
    "text": "pattern matching then you can actually just bind to a variable pattern as you have there with s and then we know that",
    "start": "1075440",
    "end": "1080510"
  },
  {
    "text": "s is actually just a string instead of a string question mark and this is consistent with existing pattern",
    "start": "1080510",
    "end": "1086840"
  },
  {
    "text": "matching rules but it gets a little bit more complicated if you do column based",
    "start": "1086840",
    "end": "1092750"
  },
  {
    "text": "pattern matching meaning pattern matching over tuples so in this case right here you might think that this",
    "start": "1092750",
    "end": "1100039"
  },
  {
    "text": "particular function is fine but it's it's actually not it'll produce warnings on s 1 and s 2 and that's",
    "start": "1100039",
    "end": "1107809"
  },
  {
    "text": "because the analysis of sort of you know the columns themselves is done after we",
    "start": "1107809",
    "end": "1113000"
  },
  {
    "text": "have performed our you know basically the type algebra right before we've finished type checking sorry we finished",
    "start": "1113000",
    "end": "1121490"
  },
  {
    "text": "type checking and then we do a column analysis and so mixing those two things",
    "start": "1121490",
    "end": "1127159"
  },
  {
    "text": "together we basically say oh well s 1 and s 2 we don't really we can't really guarantee at this point that they are",
    "start": "1127159",
    "end": "1133820"
  },
  {
    "text": "non knowable so we have to assume that they are knowable and this is just sort of a quirk in the existing language",
    "start": "1133820",
    "end": "1140419"
  },
  {
    "text": "design that we may find a way to work around but it's quite an invasive change and doing that has the potential to",
    "start": "1140419",
    "end": "1148010"
  },
  {
    "text": "break a lot of scenarios that were kind of not really willing to take the risk",
    "start": "1148010",
    "end": "1153710"
  },
  {
    "text": "on at this point this is really just kind of going to depend on feedback that",
    "start": "1153710",
    "end": "1159110"
  },
  {
    "text": "we get and you know as we use the feature more ourselves and try to figure out that works we think the ergonomics",
    "start": "1159110",
    "end": "1165260"
  },
  {
    "text": "of using the non null pattern are still fairly consistent with the F airplane was designed and this does allow us to",
    "start": "1165260",
    "end": "1171590"
  },
  {
    "text": "not have to completely reconstruct the compiler to be able to do this sort of thing but so if your pattern matching",
    "start": "1171590",
    "end": "1177679"
  },
  {
    "text": "over tuples you will have to use the nominal pattern today and so yeah this",
    "start": "1177679",
    "end": "1183889"
  },
  {
    "text": "is one of these things that is kind of half set in stone in the sense that it's risky to change but at the same time",
    "start": "1183889",
    "end": "1190029"
  },
  {
    "text": "we're kind of aware that it's it's kind of not ideal so we'd like it to be",
    "start": "1190029",
    "end": "1195260"
  },
  {
    "text": "different but I guess we'll see so playing into the F sharp type system",
    "start": "1195260",
    "end": "1202460"
  },
  {
    "start": "1198000",
    "end": "1525000"
  },
  {
    "text": "with no ability is actually based off of just a few simple rules there's some fancy words",
    "start": "1202460",
    "end": "1208580"
  },
  {
    "text": "here but they're actually pretty straightforward right there's this notion of type equivalence where we",
    "start": "1208580",
    "end": "1214700"
  },
  {
    "text": "actually determine if like you know a if I pass an INT to this thing that takes in a string well today that obviously",
    "start": "1214700",
    "end": "1219710"
  },
  {
    "text": "doesn't work right that's because int and string you're not the same type that that relation is defined in the compiler",
    "start": "1219710",
    "end": "1225110"
  },
  {
    "text": "right so we need to have type relations now for distinguishing knowable and non knowable reference types so for",
    "start": "1225110",
    "end": "1233090"
  },
  {
    "text": "backwards compatibility reasons you'll see there's a fairly straightforward pattern here where no less is ignored for most things actually it's basically",
    "start": "1233090",
    "end": "1240830"
  },
  {
    "text": "completely ignored but we do emit a warning on certain mismatches so if x and y are you know notable string and",
    "start": "1240830",
    "end": "1247400"
  },
  {
    "text": "non knowable string well that's you're still mixing things that are kind of different so we want to warn but what's still a lot of code run types of",
    "start": "1247400",
    "end": "1254120"
  },
  {
    "text": "sumption is basically just the object-oriented you know as something a subclass of another thing and you know a",
    "start": "1254120",
    "end": "1261650"
  },
  {
    "text": "a knowable thing is not necessarily a subclass of a non knowable thing no today that works but tomorrow we do want",
    "start": "1261650",
    "end": "1269809"
  },
  {
    "text": "to emit a warning on that for method overload resolution is fairly straightforward if you if you pass in something just takes in a string and you",
    "start": "1269809",
    "end": "1276679"
  },
  {
    "text": "pass in a nullable string will emit a warning on that but you know it's still fairly ignored abstracts lot inferences",
    "start": "1276679",
    "end": "1283659"
  },
  {
    "text": "that's just determining like if we satisfy an abstract member like something to find in an interface or",
    "start": "1283659",
    "end": "1289370"
  },
  {
    "text": "something like that and so all fairly straightforward and then duplicate method checking we just ignore it all together if you declare duplicate",
    "start": "1289370",
    "end": "1296419"
  },
  {
    "text": "methods that just doesn't work so we're not really going to touch that but this these these sets of rules",
    "start": "1296419",
    "end": "1303740"
  },
  {
    "text": "actually drive all of the semantics for how the F sharp type system sort of",
    "start": "1303740",
    "end": "1310970"
  },
  {
    "text": "treats null ability right so for example if you want to mix knowable and non",
    "start": "1310970",
    "end": "1317510"
  },
  {
    "text": "knowable things get a little bit complicated so for example this X is wise and ZZZ bindings that we have here",
    "start": "1317510",
    "end": "1324500"
  },
  {
    "text": "for an array a list and a sequence you might think oh well these are going to be you know a notable string or a noble",
    "start": "1324500",
    "end": "1330350"
  },
  {
    "text": "string list noble string sequence that's actually not the case because the first",
    "start": "1330350",
    "end": "1335900"
  },
  {
    "text": "element in the collection is the one that actually determines what the type of the collection is and so an empty string is",
    "start": "1335900",
    "end": "1341750"
  },
  {
    "text": "a string right it's not a knowable string it is just a string but then we throw an OL in there and we say oh well",
    "start": "1341750",
    "end": "1347600"
  },
  {
    "text": "but the type of this collection is a non knowable string now you're putting an OL in there those things don't match up",
    "start": "1347600",
    "end": "1353150"
  },
  {
    "text": "now the code will still run because it runs today and we're not going to break that but we will emit a warning because",
    "start": "1353150",
    "end": "1359240"
  },
  {
    "text": "of that so the solution to that is to just add type annotations and it's kind",
    "start": "1359240",
    "end": "1364310"
  },
  {
    "text": "of ugly but that kind of does get to that point of you know do you really need to have nulls in there and if you",
    "start": "1364310",
    "end": "1370040"
  },
  {
    "text": "do then you're still going to have to do this but often times at least we found in running this version of the compiler",
    "start": "1370040",
    "end": "1376400"
  },
  {
    "text": "against our own code base we had plenty of cases where we were inserting Knolls into things that we just didn't even",
    "start": "1376400",
    "end": "1381950"
  },
  {
    "text": "need in the first place and so it was actually kind of nice to see that and say oh we can actually simplify our",
    "start": "1381950",
    "end": "1387380"
  },
  {
    "text": "stuff so that's sort of the the algebra of the types that we have there plays",
    "start": "1387380",
    "end": "1392750"
  },
  {
    "text": "into this and this is one of the cases that you'll likely run into very quickly so additionally knowability assertions",
    "start": "1392750",
    "end": "1401510"
  },
  {
    "text": "which I had mentioned a little bit before come into play here because we can't associate just sort of arbitrary",
    "start": "1401510",
    "end": "1408920"
  },
  {
    "text": "functions that return you know true or false depending on if something was checked for a null with the enormous of",
    "start": "1408920",
    "end": "1414890"
  },
  {
    "text": "something that's you know the compiler could do a little bit of tracing if we wanted to but that quickly and uh you",
    "start": "1414890",
    "end": "1421040"
  },
  {
    "text": "know enters the realm of sort of like potentially infinite compile times and we're gonna take the assumption that",
    "start": "1421040",
    "end": "1427070"
  },
  {
    "text": "most people don't want you know significantly increased compile times as a result of this feature so one of the",
    "start": "1427070",
    "end": "1434240"
  },
  {
    "text": "things that we'll do is there's the non null function here that you'll have to call and sort of say no I'm sort of asserting that this is actually not null",
    "start": "1434240",
    "end": "1440090"
  },
  {
    "text": "if you wanted to check for things like this and then you would say okay now",
    "start": "1440090",
    "end": "1446600"
  },
  {
    "text": "this is kind of redundant right because we know that this my is null function actually does check for null and yet we",
    "start": "1446600",
    "end": "1452210"
  },
  {
    "text": "still have to a certain on all and so that would say okay well could I use something else like maybe perhaps pattern matching with the nominal",
    "start": "1452210",
    "end": "1458180"
  },
  {
    "text": "pattern and and simplify this in the first place so another interesting one",
    "start": "1458180",
    "end": "1463520"
  },
  {
    "text": "is the obj type which it's kind of interesting we actually decided we're",
    "start": "1463520",
    "end": "1468770"
  },
  {
    "text": "going to just ignore null ability for it altogether and the reason is because whenever you get in obj in F sharp you've thrown out",
    "start": "1468770",
    "end": "1475409"
  },
  {
    "text": "just all type information anyways it's it's the like just the most basic thing that you can have and so I'm sure plenty",
    "start": "1475409",
    "end": "1482549"
  },
  {
    "text": "of you have encountered you know type inference inferring something to be obj and then warning you saying like hey you're trying to use this stuff as if it",
    "start": "1482549",
    "end": "1489870"
  },
  {
    "text": "has a type but you gave this thing is actually obj and if so has no type so",
    "start": "1489870",
    "end": "1495330"
  },
  {
    "text": "maybe you want to rewrite this so it's kind of pointless to you know add no",
    "start": "1495330",
    "end": "1501029"
  },
  {
    "text": "lability semantics to this thing because there's since there's no type information for us to really do anything",
    "start": "1501029",
    "end": "1506370"
  },
  {
    "text": "with distinguishing between obj and knowable obj is kind of a moot point so",
    "start": "1506370",
    "end": "1511890"
  },
  {
    "text": "that's that was an interesting finding like we sort of actually initially thought oh yeah we're totally gonna have to do that but then when we sat down and",
    "start": "1511890",
    "end": "1517799"
  },
  {
    "text": "said okay how is this actually going to work out well there's this written not really any null analysis to do once you",
    "start": "1517799",
    "end": "1523470"
  },
  {
    "text": "have obj so that's kind of a little fun little quirk and then finally another",
    "start": "1523470",
    "end": "1529919"
  },
  {
    "start": "1525000",
    "end": "1578000"
  },
  {
    "text": "one you can you can have noble value types in f-sharp today and there's no special syntax for them so we figure",
    "start": "1529919",
    "end": "1536850"
  },
  {
    "text": "this is perhaps a decent opportunity to try to align the way that we handle",
    "start": "1536850",
    "end": "1542010"
  },
  {
    "text": "nullable value types with the way that we handle double reference types and so it's fairly likely that we'll be able to",
    "start": "1542010",
    "end": "1548399"
  },
  {
    "text": "have a syntax like this similar to the existing c-sharp syntax you know int question mark and you could pattern",
    "start": "1548399",
    "end": "1553830"
  },
  {
    "text": "match on it and sort of have the same the same sets of rules applied to novel reference types except they're their",
    "start": "1553830",
    "end": "1559320"
  },
  {
    "text": "value types and so this is something that isn't quite locked down on and the",
    "start": "1559320",
    "end": "1565230"
  },
  {
    "text": "design yet but you will probably get to it at some point I'm sure there's going to be a few little dragons along the way",
    "start": "1565230",
    "end": "1570779"
  },
  {
    "text": "and so we'll have to revisit you know what we thought we were going to do but this is sort of what we're thinking",
    "start": "1570779",
    "end": "1575850"
  },
  {
    "text": "things could potentially look like so that's sort of a whole you know from the",
    "start": "1575850",
    "end": "1582510"
  },
  {
    "start": "1578000",
    "end": "1640000"
  },
  {
    "text": "F sharp world you know okay this is how the type system is gonna be a little different these are the type relations",
    "start": "1582510",
    "end": "1587760"
  },
  {
    "text": "this is we're gonna have some function some patterns all that sort of stuff but that's that's all just you know sort of",
    "start": "1587760",
    "end": "1592860"
  },
  {
    "text": "trying to be consistent from F sharp to F sharp but you know there's another language doing this too called C sharp",
    "start": "1592860",
    "end": "1598470"
  },
  {
    "text": "and it's it would be nice if F sharp could produce metadata that C sharp",
    "start": "1598470",
    "end": "1604139"
  },
  {
    "text": "could consume and it's certainly nice if CTR produces metadata that f sharp can consume and so",
    "start": "1604139",
    "end": "1609590"
  },
  {
    "text": "that's exactly how this happens actually and the way that it's done actually you",
    "start": "1609590",
    "end": "1616010"
  },
  {
    "text": "know under the covers is all just these attributes that are applied to everything and so that allows it to be",
    "start": "1616010",
    "end": "1623030"
  },
  {
    "text": "backwards compatible because older compilers will see that metadata that they don't understand and will just say",
    "start": "1623030",
    "end": "1628100"
  },
  {
    "text": "oh I'm just gonna throw this away so it allows you to represent something like a knowable string but an older",
    "start": "1628100",
    "end": "1633440"
  },
  {
    "text": "compiler would just see a regular string in there there's no there's no crazy stuff under the covers so so some of",
    "start": "1633440",
    "end": "1640789"
  },
  {
    "start": "1640000",
    "end": "1723000"
  },
  {
    "text": "those attributes are rather interesting the first is the knowable attribute itself this is this is the one that the",
    "start": "1640789",
    "end": "1647510"
  },
  {
    "text": "compiler inserts for everything so you know you saw those little string question marks things like that there's",
    "start": "1647510",
    "end": "1652730"
  },
  {
    "text": "no notion of a string question mark in il for example it's actually just an attribute applied to a string and so the",
    "start": "1652730",
    "end": "1658850"
  },
  {
    "text": "compiler knows what to do when it sees that so this attribute looks like this it takes two constructors one is the",
    "start": "1658850",
    "end": "1664850"
  },
  {
    "text": "empty constructor for you know kind of most things and then the other is a constructor that takes bool array and this is used to represent nested types",
    "start": "1664850",
    "end": "1672039"
  },
  {
    "text": "so what I mean by that is say you have a resize array of noble string right so",
    "start": "1672039",
    "end": "1678409"
  },
  {
    "text": "the resize array is non knowable because there's no question mark there but the string is knowable so there is a question mark so as far as what that get",
    "start": "1678409",
    "end": "1685669"
  },
  {
    "text": "translated into there's actually an array where the first element is false representing you know the outer type and",
    "start": "1685669",
    "end": "1691130"
  },
  {
    "text": "then the second one is true representing the inner one and so you know for arbitrary nesting that you have going on",
    "start": "1691130",
    "end": "1696440"
  },
  {
    "text": "inside of there you just sort of have that same size of array with you know true/false through you know kind of",
    "start": "1696440",
    "end": "1702590"
  },
  {
    "text": "whatever it actually ends up being so the F sharp compiler will see this and",
    "start": "1702590",
    "end": "1708169"
  },
  {
    "text": "then it will say okay I know that I will assume that resize array is non knowable",
    "start": "1708169",
    "end": "1715370"
  },
  {
    "text": "and then I will treat the underlying types inside of it as nullable so sort",
    "start": "1715370",
    "end": "1721220"
  },
  {
    "text": "of how that stuff all gets encoded under the covers so I mentioned you know compiler",
    "start": "1721220",
    "end": "1727880"
  },
  {
    "start": "1723000",
    "end": "1820000"
  },
  {
    "text": "analysis and there's this sort of this function where you may have to assert the non null ability of something and",
    "start": "1727880",
    "end": "1733789"
  },
  {
    "text": "how we said oh well we can't associate an arbitrary you know in returning function with the null",
    "start": "1733789",
    "end": "1740330"
  },
  {
    "text": "ability of something because that could just be too complex for the compiler to trace everything however you can",
    "start": "1740330",
    "end": "1747769"
  },
  {
    "text": "actually apply certain attributes to affect compiler analysis to basically allow it to make a certain assumption so",
    "start": "1747769",
    "end": "1753620"
  },
  {
    "text": "that same function could have say the not null when true attribute applied to",
    "start": "1753620",
    "end": "1758749"
  },
  {
    "text": "the top of it and then the compiler could read that and then say oh ok well I know that if this succeeds then",
    "start": "1758749",
    "end": "1765559"
  },
  {
    "text": "whatever was passed in is not going to be null so I can assume it's non null from that point forward that's sort of a",
    "start": "1765559",
    "end": "1771169"
  },
  {
    "text": "way that we can get around that and so this is something that's going to be helpful for library authors you know a framework authors that sort of stuff",
    "start": "1771169",
    "end": "1777440"
  },
  {
    "text": "ensures not null is sort of the same thing as these not no one true not no one false except it's about assertion so",
    "start": "1777440",
    "end": "1784039"
  },
  {
    "text": "if you have a function or method or something that asserts something throws an exception sorry ensures not know if",
    "start": "1784039",
    "end": "1791899"
  },
  {
    "text": "it throws an exception under the covers then well you know that that's the appropriate attribute to apply to it and",
    "start": "1791899",
    "end": "1797869"
  },
  {
    "text": "then the asserts true and asserts false I personally think gonna be most useful for test frameworks so if you want to",
    "start": "1797869",
    "end": "1803299"
  },
  {
    "text": "assert the null ability or non null ability of something and you don't want to get a warning with that well the test framework can just judiciously apply",
    "start": "1803299",
    "end": "1809419"
  },
  {
    "text": "this to the appropriate pieces of that framework and that will make sure the",
    "start": "1809419",
    "end": "1814970"
  },
  {
    "text": "compiler doesn't throw a bunch of warnings at you so those are also pretty",
    "start": "1814970",
    "end": "1820249"
  },
  {
    "start": "1820000",
    "end": "1905000"
  },
  {
    "text": "neat but this one is my favorite one the nominal types attribute which is",
    "start": "1820249",
    "end": "1825320"
  },
  {
    "text": "kind of big there's a lot of different places it can be used one of the most",
    "start": "1825320",
    "end": "1830509"
  },
  {
    "text": "important ones is the module level so you can apply that to a particular assembly this basically says for a given",
    "start": "1830509",
    "end": "1836960"
  },
  {
    "text": "scope no ability is either a concept or not a concept for that scope and so what",
    "start": "1836960",
    "end": "1845509"
  },
  {
    "text": "I mean by that is there there's actually three cases here but so there's no ability as a concept as a way of saying",
    "start": "1845509",
    "end": "1851119"
  },
  {
    "text": "hey we distinguish between nullable and non knowable reference types for this scope and if it's set to false we",
    "start": "1851119",
    "end": "1857899"
  },
  {
    "text": "explicitly do not distinguish between the two just like it is today but the interesting case is actually if there's",
    "start": "1857899",
    "end": "1864169"
  },
  {
    "text": "no attribute whatsoever that's what are known as no oblivious semantics and so that that's kind of",
    "start": "1864169",
    "end": "1870259"
  },
  {
    "text": "kind of an interesting thing that leads in these things called knowability assumptions because I had said the word",
    "start": "1870259",
    "end": "1876470"
  },
  {
    "text": "assumption a few times right oh you know based on this attribute that's applied here the compiler can assume whenever",
    "start": "1876470",
    "end": "1881929"
  },
  {
    "text": "right well you know if you if you have",
    "start": "1881929",
    "end": "1887119"
  },
  {
    "text": "nominal types true we can assume okay well for that scope we can assume that there's a distinguish you know we're",
    "start": "1887119",
    "end": "1893029"
  },
  {
    "text": "going to distinguish between string and on the label string and this is just something that people will be happy with",
    "start": "1893029",
    "end": "1899899"
  },
  {
    "text": "because you know that's actually there but what if there's no attribute at all that's that's where things get a little",
    "start": "1899899",
    "end": "1905179"
  },
  {
    "start": "1905000",
    "end": "1925000"
  },
  {
    "text": "tricky right so there's the three choices distinguish or choose not to distinguish and then there's a third",
    "start": "1905179",
    "end": "1910609"
  },
  {
    "text": "which is make no assumption in either direction right so you might think that that's equivalent to not distinguishing",
    "start": "1910609",
    "end": "1918009"
  },
  {
    "text": "but it's it's it's subtly different which is where I think it's a little",
    "start": "1918009",
    "end": "1923470"
  },
  {
    "text": "kind of fun to think about right so what that means for f-sharp is",
    "start": "1923470",
    "end": "1928879"
  },
  {
    "start": "1925000",
    "end": "1945000"
  },
  {
    "text": "if we have no information whatsoever that means if we have a value and we",
    "start": "1928879",
    "end": "1935779"
  },
  {
    "text": "assign it to something that is a knowable reference type we consider it to be knowable but if we assign it to",
    "start": "1935779",
    "end": "1942019"
  },
  {
    "text": "something that is a non knowable reference type we consider it to be non notable right so you could have code",
    "start": "1942019",
    "end": "1947090"
  },
  {
    "start": "1945000",
    "end": "1993000"
  },
  {
    "text": "that kind of looks like this you get an oblivious string if it's assigned to a knowable string then we say okay well",
    "start": "1947090",
    "end": "1952970"
  },
  {
    "text": "we'll treat it as if it's a knowable reference I'd from there and if you assign it to just a string we'll treat it as if it's a string but there's an",
    "start": "1952970",
    "end": "1960409"
  },
  {
    "text": "interesting question that arises from this because most def start programmers don't annotate values like this they use",
    "start": "1960409",
    "end": "1967100"
  },
  {
    "text": "type inference and so what if s is not annotated right if I say let s equals",
    "start": "1967100",
    "end": "1972409"
  },
  {
    "text": "oblivious call then what is s actually is it knowable is it non knowable from a",
    "start": "1972409",
    "end": "1978200"
  },
  {
    "text": "safety standpoint you might say oh well it should be non knowable oh sorry it should be knowable right because you",
    "start": "1978200",
    "end": "1984559"
  },
  {
    "text": "can't assume that it is non knowable and we we should err on the side of safety well it's a little bit more complicated",
    "start": "1984559",
    "end": "1990769"
  },
  {
    "text": "than that actually this is where a kind of difficult design choice comes in so there's actually a case for being null",
    "start": "1990769",
    "end": "1997220"
  },
  {
    "start": "1993000",
    "end": "2002000"
  },
  {
    "text": "oblivious in a case for being inaudible right so in the biggest case",
    "start": "1997220",
    "end": "2005440"
  },
  {
    "start": "2002000",
    "end": "2043000"
  },
  {
    "text": "even though this this feature is sort of in a way meant to give you warnings if you're porting a bunch of code that you",
    "start": "2005440",
    "end": "2011210"
  },
  {
    "text": "just you know is littered with this stuff and you don't really want to and and it's these older assemblies that",
    "start": "2011210",
    "end": "2017060"
  },
  {
    "text": "don't have you know the attributes all that all that fancy stuff it's just things that are coming in some people",
    "start": "2017060",
    "end": "2023000"
  },
  {
    "text": "may say oh well I don't want to deal with that right now I know how it works today I will slowly piece away you know",
    "start": "2023000",
    "end": "2029300"
  },
  {
    "text": "the problems with it and if we go with Knoll oblivious semantics we actually",
    "start": "2029300",
    "end": "2035000"
  },
  {
    "text": "are consistent in the sense that if there's no indicator you know in the metadata then we can't make an",
    "start": "2035000",
    "end": "2040640"
  },
  {
    "text": "assumption so it just kind of is what it is but the downside is well you do get less warnings and you can get more",
    "start": "2040640",
    "end": "2045950"
  },
  {
    "start": "2043000",
    "end": "2072000"
  },
  {
    "text": "potential no reference exceptions and actually kind of you can write entire programs that are oblivious to - type",
    "start": "2045950",
    "end": "2052250"
  },
  {
    "text": "inference right if you just have nothing but values that are generated from oblivious calls and you know as you know",
    "start": "2052250",
    "end": "2059270"
  },
  {
    "text": "an F sharp lots of things are just sort of figured out by the type system and then they don't they don't actually get sort of assigned to you know unknowable",
    "start": "2059270",
    "end": "2065929"
  },
  {
    "text": "or a non knowable type then that's kind of a weird State for the program on the",
    "start": "2065929",
    "end": "2072919"
  },
  {
    "start": "2072000",
    "end": "2123000"
  },
  {
    "text": "other side of it you don't you don't have that problem if you assume that something is going to be knowable and you can get more warnings and if that if",
    "start": "2072919",
    "end": "2079700"
  },
  {
    "text": "that's the thing you truly want you'll definitely get more warnings with this sort of stuff and if you account for them you won't get as many no reference",
    "start": "2079700",
    "end": "2085970"
  },
  {
    "text": "exceptions or at least possible law reference exceptions but the downside is if you're inundated with hundreds",
    "start": "2085970",
    "end": "2092300"
  },
  {
    "text": "perhaps even thousands of warnings that's kind of a little overwhelming like yeah I think most of us when we see",
    "start": "2092300",
    "end": "2097820"
  },
  {
    "text": "a warning we know we want to squash it out but if we see a thousand warnings that's a little bit more different it's",
    "start": "2097820",
    "end": "2103700"
  },
  {
    "text": "it's uh it's it can be a little overwhelming sometimes and sometimes people don't want that and and it is not",
    "start": "2103700",
    "end": "2109700"
  },
  {
    "text": "actually logically consistent because if no information means we can't make an",
    "start": "2109700",
    "end": "2114710"
  },
  {
    "text": "assumption in either direction if we go with sort of a knowable assumption well that that's making an assumption about",
    "start": "2114710",
    "end": "2120680"
  },
  {
    "text": "something so there's not really a perfect approach to this in my mind and",
    "start": "2120680",
    "end": "2127100"
  },
  {
    "start": "2123000",
    "end": "2207000"
  },
  {
    "text": "I think this sort of gets to the core of language design is is you you end up in this in this sort of situation where",
    "start": "2127100",
    "end": "2132620"
  },
  {
    "text": "there's there's two paths you can go and there there's no there's no obvious one to take",
    "start": "2132620",
    "end": "2137940"
  },
  {
    "text": "right you know some people are gonna say oh yes it needs to be oblivious you know I'm personally in the camp of",
    "start": "2137940",
    "end": "2143550"
  },
  {
    "text": "saying hey we should probably assume that is knowable and I imagine a lot of f-sharp programmers will probably feel that way and so although we currently do",
    "start": "2143550",
    "end": "2151950"
  },
  {
    "text": "have oblivious semantics implemented right now it's still very sort of early in the design phase we're still figuring",
    "start": "2151950",
    "end": "2157740"
  },
  {
    "text": "out how this thing feels on our own code bases and we're looking to get a lot more feedback from people on this",
    "start": "2157740",
    "end": "2165740"
  },
  {
    "text": "because if a lot of people say hey you know this this doesn't make any sense to",
    "start": "2165740",
    "end": "2170910"
  },
  {
    "text": "believe be oblivious I like more warnings because I want to squash those warnings because I'm an F chart programmer who wants to know when",
    "start": "2170910",
    "end": "2176880"
  },
  {
    "text": "something's not going to work and if it's not going to work well I'm gonna fix that right now and I'm not going to",
    "start": "2176880",
    "end": "2182280"
  },
  {
    "text": "progress until I can do that so the so the current design is not set in stone yet it's but it's it's it's something",
    "start": "2182280",
    "end": "2188850"
  },
  {
    "text": "that we wanted to explore and sort of see how it how it worked so that's sort",
    "start": "2188850",
    "end": "2195300"
  },
  {
    "text": "of one of the interesting pieces that I think is definitely up for discussion and also up for redesign really just",
    "start": "2195300",
    "end": "2203369"
  },
  {
    "text": "sort of depending on how people use it and how they feel about the feature so",
    "start": "2203369",
    "end": "2209420"
  },
  {
    "start": "2207000",
    "end": "2244000"
  },
  {
    "text": "kind of one of the last pieces of this is you know we sort of we adjusted the F",
    "start": "2209420",
    "end": "2215280"
  },
  {
    "text": "sharp type system we've added all these little helper functions and patterns and",
    "start": "2215280",
    "end": "2220350"
  },
  {
    "text": "we have this weird semantics with oblivious versus maybe not oblivious and maybe we're not really sure but there's",
    "start": "2220350",
    "end": "2227250"
  },
  {
    "text": "still a bucket of just all this existing F sharp code that does stuff that is a",
    "start": "2227250",
    "end": "2232830"
  },
  {
    "text": "little bit different with noble reference types in there and these are just things that we sort of discover",
    "start": "2232830",
    "end": "2238560"
  },
  {
    "text": "over time as we as we think about this feature and sort of design it and test it out on more and more code so if",
    "start": "2238560",
    "end": "2245190"
  },
  {
    "start": "2244000",
    "end": "2298000"
  },
  {
    "text": "you've ever used default values in F sharp you could certainly do something like this right I have a default value",
    "start": "2245190",
    "end": "2251369"
  },
  {
    "text": "of string we know that today the default value of string is null right well there's",
    "start": "2251369",
    "end": "2257280"
  },
  {
    "text": "actually a contradiction because default value implies null ability but the",
    "start": "2257280",
    "end": "2263040"
  },
  {
    "text": "string type says that this is not knowable so this is perfectly valid pre",
    "start": "2263040",
    "end": "2268200"
  },
  {
    "text": "F sharp 5.0 code today that has to generate a warning there's there's there's no way to be",
    "start": "2268200",
    "end": "2273420"
  },
  {
    "text": "correct with the feature and not generate a warning so this is kind of an unfortunate side effect if you will",
    "start": "2273420",
    "end": "2279150"
  },
  {
    "text": "because this is this is something that you know this isn't new code that that you're done this is existing code that we can't really we can't really fail to",
    "start": "2279150",
    "end": "2286410"
  },
  {
    "text": "warn in this case because then you know we're sort of lying and we're saying oh this type signature that you have here",
    "start": "2286410",
    "end": "2291420"
  },
  {
    "text": "means nothing that's sort of strange you know we may revisit that decision but",
    "start": "2291420",
    "end": "2296519"
  },
  {
    "text": "it's still just this little quirk similarly the C line mutable attribute that I'd shown earlier does the exact",
    "start": "2296519",
    "end": "2303269"
  },
  {
    "start": "2298000",
    "end": "2358000"
  },
  {
    "text": "same thing the C line mutable attribute implies no ability for things that are underneath right an object relational",
    "start": "2303269",
    "end": "2309119"
  },
  {
    "text": "mapper may be saying oh the database values null so I'm going to set this value to null because that's just what",
    "start": "2309119",
    "end": "2314519"
  },
  {
    "text": "the database value is at this point in time but the type string says that it's not knowable so it's again this is",
    "start": "2314519",
    "end": "2321719"
  },
  {
    "text": "perfectly valid code today there's absolutely nothing wrong with writing code like this today you may have to",
    "start": "2321719",
    "end": "2327569"
  },
  {
    "text": "have a few more anole checks if you want to be truly safe but that's now going to produce a warning and there's there's we",
    "start": "2327569",
    "end": "2333719"
  },
  {
    "text": "can add a producer warning or not produce a warning if we produce one then there's well this was valid code that is",
    "start": "2333719",
    "end": "2341429"
  },
  {
    "text": "now saying black can't do it anymore but if we don't produce a warning then we're sort of lying to you so it's sort",
    "start": "2341429",
    "end": "2346769"
  },
  {
    "text": "of this weird sort of quirk that you can't can't really get around past",
    "start": "2346769",
    "end": "2353459"
  },
  {
    "text": "decisions that you have to live with if you care about backwards compatibility which we do and then the last one this",
    "start": "2353459",
    "end": "2359489"
  },
  {
    "start": "2358000",
    "end": "2494000"
  },
  {
    "text": "one is truly great I love this one absolutely to death so you're probably",
    "start": "2359489",
    "end": "2365369"
  },
  {
    "text": "all familiar with option types you know here's just a very simple routine that produces an option based on a flag gives",
    "start": "2365369",
    "end": "2372299"
  },
  {
    "text": "it you know a string value otherwise it gives it none this actually compiles into this this routine here this is sort",
    "start": "2372299",
    "end": "2378809"
  },
  {
    "text": "of the equivalent c-sharp you'll notice or return null at the very end this is",
    "start": "2378809",
    "end": "2385469"
  },
  {
    "text": "the great irony of F sharp options is they're actually implemented such that the none case emits is null so the F",
    "start": "2385469",
    "end": "2394079"
  },
  {
    "text": "sharp option type which is designed to deal with the case of nothing has to be a nullable reference type but if you",
    "start": "2394079",
    "end": "2402150"
  },
  {
    "text": "read it from C sharp but if we change that it's an massively breaking change right because if it's there's there's we don't really",
    "start": "2402150",
    "end": "2410550"
  },
  {
    "text": "have a great resolution for this right now so that's just this is this",
    "start": "2410550",
    "end": "2415890"
  },
  {
    "text": "incredible quirk that we just when we thought about it we said we just rolled",
    "start": "2415890",
    "end": "2421200"
  },
  {
    "text": "up into a ball and just started crying because we're like ah we built this thing that is like this sound system for",
    "start": "2421200",
    "end": "2428550"
  },
  {
    "text": "dealing with the concept of nothing and now it is emitting as the thing that we're telling people to avoid and you",
    "start": "2428550",
    "end": "2436590"
  },
  {
    "text": "know I I imagine the majority of f-sharp programmers who do c-sharp Interop or not particularly going to be flummoxed",
    "start": "2436590",
    "end": "2444120"
  },
  {
    "text": "by you know all these options coming back as possibly no line and I think most most people are fairly common with",
    "start": "2444120",
    "end": "2449880"
  },
  {
    "text": "the idea that you sort of have your f sharp type stuff and then and then you you create in a little C sharp easy to",
    "start": "2449880",
    "end": "2456240"
  },
  {
    "text": "consume wrappers so that C sharp consume it and you could probably get around this but yeah this is just a real wart",
    "start": "2456240",
    "end": "2463620"
  },
  {
    "text": "that is probably just gonna have to exist in the language and again if we",
    "start": "2463620",
    "end": "2468840"
  },
  {
    "text": "change this this would be a breaking change and we just we simply can't do that because that's sort of one of the core tenants that we have as a language",
    "start": "2468840",
    "end": "2474960"
  },
  {
    "text": "so so that kind of makes you think like okay so why even do this if if something",
    "start": "2474960",
    "end": "2482790"
  },
  {
    "text": "as fundamental is the F sharp option type for dealing with this sort of stuff",
    "start": "2482790",
    "end": "2487830"
  },
  {
    "text": "is going to emit as unknowable reference type like that's just that's just silly well it's it really is all about trying",
    "start": "2487830",
    "end": "2495840"
  },
  {
    "start": "2494000",
    "end": "2631000"
  },
  {
    "text": "to make dotnet a better place like it's the the knowable reference types feature",
    "start": "2495840",
    "end": "2501240"
  },
  {
    "text": "for F sharp and for C sharp is it's not perfect it's one of those things that it'd be great if it could have been at",
    "start": "2501240",
    "end": "2506880"
  },
  {
    "text": "all implemented in both languages at the same time at the 1.0 version and then we'd all be happy we'd have this",
    "start": "2506880",
    "end": "2512010"
  },
  {
    "text": "perfectly sound way to deal with it but you know here we are 15 years later and it's trying to get it in there",
    "start": "2512010",
    "end": "2518700"
  },
  {
    "text": "but it's it's I guess you could say it's all in service to a greater cause because I truly think that you know even",
    "start": "2518700",
    "end": "2526620"
  },
  {
    "text": "though that you you know it's warnings instead of errors backwards-compatibility there's these weird little things that you kind of",
    "start": "2526620",
    "end": "2532050"
  },
  {
    "text": "have to deal with I mean fundamentally you're gonna want to get rid of all these warnings and by doing that you're gonna have less nulls flowing through",
    "start": "2532050",
    "end": "2538320"
  },
  {
    "text": "your code library developers are going to stop accepting Knowles in certain parts of their api's and they're going to stop",
    "start": "2538320",
    "end": "2543930"
  },
  {
    "text": "emitting knowles that you have to deal with and i can imagine after this feature has been out for C sharp and F",
    "start": "2543930",
    "end": "2550170"
  },
  {
    "text": "sharp five years after that I can imagine a world where a large trunk if",
    "start": "2550170",
    "end": "2556140"
  },
  {
    "text": "not the majority of dotnet programmers just stop really worrying about Knowles that much the the notion of oh the",
    "start": "2556140",
    "end": "2564210"
  },
  {
    "text": "application crashed again Oh what is it oh no reference exception that you know junior developer who didn't really know",
    "start": "2564210",
    "end": "2570090"
  },
  {
    "text": "to check for a null in this weird little edge case or something like that it just won't really be a thing and it's it's",
    "start": "2570090",
    "end": "2575910"
  },
  {
    "text": "sort of this I mean it's a feature kind of a non feature in a way like where you know the notion of Knowles is just kind",
    "start": "2575910",
    "end": "2581490"
  },
  {
    "text": "of being tucked away in a little corner that you know it's very visible when you have to deal with it but it's not something that's forever present in your",
    "start": "2581490",
    "end": "2587220"
  },
  {
    "text": "world this is something that to be a part of this after our past also",
    "start": "2587220",
    "end": "2592830"
  },
  {
    "text": "implement this feature because there are a lot of components and a lot of libraries written by f-sharp developers that you know can deem it Knowles and",
    "start": "2592830",
    "end": "2599310"
  },
  {
    "text": "can accept Knowles today if they have c-sharp consumers and so we we want to just push dotnet into this this this",
    "start": "2599310",
    "end": "2606810"
  },
  {
    "text": "newer place where your everything is just safer and you're just not worrying about these little edge cases as much anymore",
    "start": "2606810",
    "end": "2612690"
  },
  {
    "text": "and to be a part of that you know you have to sacrifice a few things like you",
    "start": "2612690",
    "end": "2618180"
  },
  {
    "text": "know there's these little imperfections with you know the option type that I just mentioned and things like that but",
    "start": "2618180",
    "end": "2623850"
  },
  {
    "text": "at the end of the day there will just be less Knowles in general and so we think",
    "start": "2623850",
    "end": "2630000"
  },
  {
    "text": "it'll work out pretty well least we hope so so if if you're interested in this",
    "start": "2630000",
    "end": "2635640"
  },
  {
    "start": "2631000",
    "end": "2813000"
  },
  {
    "text": "sort of stuff certainly on the Noles feature there's a few links here the first this effort Knowles link takes you",
    "start": "2635640",
    "end": "2641760"
  },
  {
    "text": "to our spec today which so I'd said it's about 10,000 words there's a lot to read there's a lot of code samples there's a",
    "start": "2641760",
    "end": "2648480"
  },
  {
    "text": "lot of fine the little details there's a lot of stuff where things are not quite figured out where you can look at it and",
    "start": "2648480",
    "end": "2653580"
  },
  {
    "text": "you can say oh you know here are like three different approaches that we might take we're not quite sure which one we're going to do yet",
    "start": "2653580",
    "end": "2659310"
  },
  {
    "text": "the prototype does X but we could also do Y or Z that's just sort of the the almost sort of messy nature of language",
    "start": "2659310",
    "end": "2665820"
  },
  {
    "text": "designs just working out all these little kinks and trying to figure it out if",
    "start": "2665820",
    "end": "2671130"
  },
  {
    "text": "you're perhaps not interested in reading a 10,000 word spec but you are interested in language design in general",
    "start": "2671130",
    "end": "2676319"
  },
  {
    "text": "there are the f-sharp language design repos repo and the c-sharp language design repo where there's a lot of",
    "start": "2676319",
    "end": "2683819"
  },
  {
    "text": "discussion oftentimes intense discussion about potential things that could be",
    "start": "2683819",
    "end": "2689039"
  },
  {
    "text": "implemented in the future or about things that are on the docket to be implemented but there's still some open design questions and there's also a lot",
    "start": "2689039",
    "end": "2696029"
  },
  {
    "text": "of things where you know a certain feature you may you may read about it you may read the spec and you say oh I'm not really sure if this accounts for",
    "start": "2696029",
    "end": "2702539"
  },
  {
    "text": "this particular thing and you could submit a pull request and say hey here's here's an edge case that may not be accounted for on the spec and I think",
    "start": "2702539",
    "end": "2708809"
  },
  {
    "text": "this is really important to get and that that is sort of the heart of language design right there is just thinking",
    "start": "2708809",
    "end": "2714569"
  },
  {
    "text": "about something working out all the little problems before it actually gets implemented and so hopefully this this",
    "start": "2714569",
    "end": "2721680"
  },
  {
    "text": "talk gave you a little a little bit of insight into sort of what that all means certainly from the f-chart perspective I",
    "start": "2721680",
    "end": "2728849"
  },
  {
    "text": "I know that the c-sharp side it's a little different but it's still sort of the core set of problems you know here's",
    "start": "2728849",
    "end": "2734039"
  },
  {
    "text": "this abstract thing we want to do now let's piece that together you know pull that out into the million little details",
    "start": "2734039",
    "end": "2739650"
  },
  {
    "text": "that it actually means and try to figure out a way to keep it all consistent so",
    "start": "2739650",
    "end": "2745940"
  },
  {
    "text": "yeah thank you very much and I encourage you all to go check out this stuff and",
    "start": "2745940",
    "end": "2751079"
  },
  {
    "text": "hopefully you'll submit your own RFC to one of these repositories at some point and yeah have a good rest of the day",
    "start": "2751079",
    "end": "2759690"
  },
  {
    "text": "[Applause]",
    "start": "2759690",
    "end": "2765959"
  },
  {
    "text": "I think today those attributes are in",
    "start": "2777480",
    "end": "2805070"
  },
  {
    "text": "system compiler services Interop it's a particular namespace I think I actually",
    "start": "2805070",
    "end": "2810420"
  },
  {
    "text": "had it there's like an interrupt namespace that we that we add things yes",
    "start": "2810420",
    "end": "2817640"
  },
  {
    "start": "2813000",
    "end": "2824000"
  },
  {
    "text": "at least that's the current idea I just want to I just want to find it so I can",
    "start": "2817640",
    "end": "2822930"
  },
  {
    "text": "bring it up for you yeah system run time compiler services so there's you know like for example",
    "start": "2822930",
    "end": "2829230"
  },
  {
    "start": "2824000",
    "end": "2891000"
  },
  {
    "text": "with the the span work there was um there were some attributes that were put",
    "start": "2829230",
    "end": "2834810"
  },
  {
    "text": "in there for these things known as by ref like and so yeah yeah yeah they'll",
    "start": "2834810",
    "end": "2841500"
  },
  {
    "text": "likely be there when this thing ships at least at least currently I expect that to actually happen that yes",
    "start": "2841500",
    "end": "2849410"
  },
  {
    "text": "[Music]",
    "start": "2866870",
    "end": "2869980"
  },
  {
    "text": "so we thought about it quite a bit in fact we actually wanted to do that I'll",
    "start": "2880950",
    "end": "2886479"
  },
  {
    "text": "go all the way back actually to that bigger code sample from our code base we actually got spooked when we looked",
    "start": "2886479",
    "end": "2894609"
  },
  {
    "start": "2891000",
    "end": "3236000"
  },
  {
    "text": "at our own code base so basically like this routine is what like maybe 14 lines",
    "start": "2894609",
    "end": "2901839"
  },
  {
    "text": "of code or something if we were to if we were to sort of coerce say this document",
    "start": "2901839",
    "end": "2907239"
  },
  {
    "text": "type into an optional sort of say oh well you know this document type is a",
    "start": "2907239",
    "end": "2913979"
  },
  {
    "text": "nullable document type for example and say oh that's actually an option so you have to account for it as if it weren't an option that would actually be a",
    "start": "2913979",
    "end": "2920499"
  },
  {
    "text": "source breaking change in two places here we have other code samples whereas it's up to like 50 sorts breaking",
    "start": "2920499",
    "end": "2927099"
  },
  {
    "text": "changes for a given file it's it's actually kind of kind of crazy it actually made us quite sad actually",
    "start": "2927099",
    "end": "2933009"
  },
  {
    "text": "because we have I would say a rather consistent system for dealing with nothing with options unfortunately it",
    "start": "2933009",
    "end": "2940869"
  },
  {
    "text": "would be just too massive of a change and so we thought about something like maybe a code fixer that could try to you",
    "start": "2940869",
    "end": "2948940"
  },
  {
    "text": "know sort of sort of add pattern matching in in places and things like that but I think it ended up it it ended",
    "start": "2948940",
    "end": "2957819"
  },
  {
    "text": "up being something that we couldn't really account for all all possible cases and we just have sort of this bug tale of people saying oh I tried to",
    "start": "2957819",
    "end": "2964599"
  },
  {
    "text": "compile my code now it doesn't compile anymore thanks Microsoft and yeah we",
    "start": "2964599",
    "end": "2970569"
  },
  {
    "text": "sort of got spooked by that and we said okay well at the same time it's still from a backwards-compatible it's still",
    "start": "2970569",
    "end": "2977079"
  },
  {
    "text": "not sound right like you know if you have reflection involved and you have",
    "start": "2977079",
    "end": "2982979"
  },
  {
    "text": "you know you just suppress warnings instead of actually dealing with them you know the code still continues to run",
    "start": "2982979",
    "end": "2990190"
  },
  {
    "text": "today we're sort of kind of hedging our bets on people dealing with warnings but",
    "start": "2990190",
    "end": "2995319"
  },
  {
    "text": "I would say that we haven't formulated guidance on this yet my initial thoughts",
    "start": "2995319",
    "end": "3000989"
  },
  {
    "text": "on guidance would be that for f-sharp programmers you should just continue to try to use options as much as you can so",
    "start": "3000989",
    "end": "3007920"
  },
  {
    "text": "maybe you get a no ability warning for something but instead of using the knowable stuff you may actually just say",
    "start": "3007920",
    "end": "3013619"
  },
  {
    "text": "oh I'm just gonna actually construct an option to other things right I think",
    "start": "3013619",
    "end": "3019859"
  },
  {
    "text": "we're still at the point where we want the community to try to lead us towards what the guidance needs to be now we",
    "start": "3019859",
    "end": "3026430"
  },
  {
    "text": "have our own thoughts on how to you know what what you should use and and all that sort of stuff but you know we don't",
    "start": "3026430",
    "end": "3032069"
  },
  {
    "text": "we only have a limited number of code bases where things may feel right and so we're we're gonna lean a lot on the",
    "start": "3032069",
    "end": "3039119"
  },
  {
    "text": "community when we have a preview of this feature coming out to really say oh I",
    "start": "3039119",
    "end": "3044339"
  },
  {
    "text": "deal with it in these ways you should consider you know documenting these ways to deal with it and that sort of stuff",
    "start": "3044339",
    "end": "3049559"
  },
  {
    "text": "so yeah it's it's it's imperfect and it made us sad that we couldn't you know treat them to be the same but yeah",
    "start": "3049559",
    "end": "3056789"
  },
  {
    "text": "unfortunately that was sort of what happened in a way so well I mean I guess",
    "start": "3056789",
    "end": "3067470"
  },
  {
    "text": "the thing is the way that things are being handled in c-sharp is honestly I",
    "start": "3067470",
    "end": "3072900"
  },
  {
    "text": "think really the only way that you could do it for c-sharp for it to work and so interoperation with c-sharp I mean we",
    "start": "3072900",
    "end": "3079140"
  },
  {
    "text": "could sort of do anything we want at the Interop layer but just keeping things",
    "start": "3079140",
    "end": "3085109"
  },
  {
    "text": "consistent from the F sharp side and making sure we don't break things was too big of a risk and then there was",
    "start": "3085109",
    "end": "3090450"
  },
  {
    "text": "also the problem of oh we we interoperate and we transform into our own system then we need to somehow translate that back into what C sharp",
    "start": "3090450",
    "end": "3097019"
  },
  {
    "text": "has and so I think we just sort of said okay well for better for worse we're net",
    "start": "3097019",
    "end": "3102809"
  },
  {
    "text": "language we might as well just play with the system that's being built up and being tested by a larger group of people",
    "start": "3102809",
    "end": "3107819"
  },
  {
    "text": "and and you know that that system itself is going to be improved over time and",
    "start": "3107819",
    "end": "3113039"
  },
  {
    "text": "there's going to be little learnings that are that are that we get from a very wide number of developers and we can apply those tests sharp as well like",
    "start": "3113039",
    "end": "3118950"
  },
  {
    "text": "with subsequent updates and things like that so yeah see any other questions",
    "start": "3118950",
    "end": "3128790"
  },
  {
    "text": "no I guess I will say as sort of a little final thing well it's I guess",
    "start": "3128790",
    "end": "3135180"
  },
  {
    "text": "slightly unrelated after at 4.6 the one coming before 5.0 is going to be coming out soon and it it won't actually have",
    "start": "3135180",
    "end": "3141810"
  },
  {
    "text": "any of this but we do sort of encourage you to look at that if you can as well that'll have it the anonymous record",
    "start": "3141810",
    "end": "3148200"
  },
  {
    "text": "types inside of it that oh do have a date the well the date is gonna be when",
    "start": "3148200",
    "end": "3154830"
  },
  {
    "text": "Visual Studio 2019 ships as a ga so it certainly be this year yes it'll",
    "start": "3154830",
    "end": "3165480"
  },
  {
    "text": "definitely be there it's fairly baked there's there's I think I managed to log",
    "start": "3165480",
    "end": "3170610"
  },
  {
    "text": "like one bug on it that was it so it was it was to deal with type abbreviations and anonymous records which is kind of a",
    "start": "3170610",
    "end": "3176970"
  },
  {
    "text": "weird thing but we we don't have a plan yet like a concrete plan for shipping",
    "start": "3176970",
    "end": "3184230"
  },
  {
    "text": "this as a preview now there certainly you can build the compiler from the repository and it all works but we do",
    "start": "3184230",
    "end": "3191580"
  },
  {
    "text": "want to you know ship a preview of this inside of a preview of a dotnet core SDK",
    "start": "3191580",
    "end": "3197340"
  },
  {
    "text": "and give people a chance to really try to bang on it and see how that goes so",
    "start": "3197340",
    "end": "3202670"
  },
  {
    "text": "yeah well that's about it thank you very much I'll be around sort of for the rest",
    "start": "3202670",
    "end": "3210180"
  },
  {
    "text": "of the day and the rest of you know the conference if you want to ask questions about f-sharp and this feature other",
    "start": "3210180",
    "end": "3216570"
  },
  {
    "text": "features things like that hopefully I'll be able to give you good answers cool thanks",
    "start": "3216570",
    "end": "3223440"
  },
  {
    "text": "[Applause]",
    "start": "3223440",
    "end": "3227659"
  }
]