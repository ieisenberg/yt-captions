[
  {
    "text": "all right everyone I think we're ready to get started so thank you for coming",
    "start": "4300",
    "end": "10000"
  },
  {
    "text": "out so early in the morning after a party I appreciate it this talk I hope",
    "start": "10000",
    "end": "16840"
  },
  {
    "text": "will be interesting and all you can always fall asleep if you find it too boring it's called four languages and 40",
    "start": "16840",
    "end": "25030"
  },
  {
    "text": "years ago I'm stop Russian all so what",
    "start": "25030",
    "end": "31060"
  },
  {
    "text": "can we learn from the 1970s 1970s a long time ago in this still some interesting",
    "start": "31060",
    "end": "36880"
  },
  {
    "text": "things that we haven't really caught up with them I have a web shop when a website f-sharp fun and profit comm so",
    "start": "36880",
    "end": "43660"
  },
  {
    "text": "all of our F sharp but I'm also interested in all sorts of other languages and I will hope to explain why",
    "start": "43660",
    "end": "50340"
  },
  {
    "text": "so this is the 1970s this is a photo taken back then as you can see it was a",
    "start": "50340",
    "end": "56920"
  },
  {
    "text": "very ancient period and amazingly I am so old that I was actually alive in the",
    "start": "56920",
    "end": "62680"
  },
  {
    "text": "1970s that's me down in the corner there so yes there's",
    "start": "62680",
    "end": "69069"
  },
  {
    "text": "a family photo right here so 40 years ago it's a long time ago but I think",
    "start": "69069",
    "end": "75759"
  },
  {
    "text": "there's a lot a lot of things we can learn from them so I'm going to talk about four maybe five languages I'm",
    "start": "75759",
    "end": "81789"
  },
  {
    "text": "going to start with a brief history of programming languages and then I'm going to talk about hammers and toolkits and why not everything is a hammer and then",
    "start": "81789",
    "end": "90189"
  },
  {
    "text": "I'm going to talk about my four languages and maybe my fifth name which X from 1979 and you'll have to guess",
    "start": "90189",
    "end": "96999"
  },
  {
    "text": "where that is okay so let's start with a brief history this is one of my favorite",
    "start": "96999",
    "end": "102310"
  },
  {
    "text": "quotes a language that doesn't affect the way you think about programming is not worth knowing and as I talked about",
    "start": "102310",
    "end": "110229"
  },
  {
    "text": "various languages I'm going to give them the galaxy brain seal of approval and that means that this language if you",
    "start": "110229",
    "end": "116229"
  },
  {
    "text": "learn this language it will make your head explode so that's good learning a language that doesn't make your head",
    "start": "116229",
    "end": "121840"
  },
  {
    "text": "explode is a waste of time basically right so back in the 1950s the",
    "start": "121840",
    "end": "128229"
  },
  {
    "text": "Precambrian era there weren't even dinosaurs there we had nothing but assembly languages and then towards the",
    "start": "128229",
    "end": "134980"
  },
  {
    "text": "end of the 50s thought-trend sort of called down to the water and made its appearance and it was",
    "start": "134980",
    "end": "141280"
  },
  {
    "text": "the first high-level language and so it gets the galaxies brain because it completely changed the way people thought about programming you didn't",
    "start": "141280",
    "end": "147850"
  },
  {
    "text": "have to use per machine assembly code and then cobol came out after that that",
    "start": "147850",
    "end": "153250"
  },
  {
    "text": "was the first enterprise language as we all know lisp came out after that and this gets a galaxy brain just for",
    "start": "153250",
    "end": "159070"
  },
  {
    "text": "existing because Lisp is the perfect language we all know that this P is the perfect language and has always been the",
    "start": "159070",
    "end": "164560"
  },
  {
    "text": "perfect language for ever and ever and if you're interested in Y in knowing why",
    "start": "164560",
    "end": "170200"
  },
  {
    "text": "Lisp is not the dominant language today you might read a very excellent essay called worse it's better you can you",
    "start": "170200",
    "end": "177340"
  },
  {
    "text": "find that on the internet so ok in the 60s it was all about IBM and the seven",
    "start": "177340",
    "end": "184120"
  },
  {
    "text": "dwarfs which were the seven other tiny companies can be an IBM and the first important language of the 60s was",
    "start": "184120",
    "end": "189940"
  },
  {
    "text": "alcohol and alcohol was incredibly important language it's basically the foundation of all modern imperative",
    "start": "189940",
    "end": "196780"
  },
  {
    "text": "languages so if you use C or Pascal or any of them modern languages you can thank angle for that very very",
    "start": "196780",
    "end": "203590"
  },
  {
    "text": "influential basic came along the idea of beginner's water concepts Pier one came",
    "start": "203590",
    "end": "210430"
  },
  {
    "text": "along this is meant to be the kind of bastard child of Fortran and Algol and",
    "start": "210430",
    "end": "216489"
  },
  {
    "text": "it's meant to be the only language you'll ever need so that's famous last words of course because people don't use",
    "start": "216489",
    "end": "221560"
  },
  {
    "text": "Pier one except your parent Lee you can actually get a dotnet and implementation of Pier one if you need it so I swam",
    "start": "221560",
    "end": "227650"
  },
  {
    "text": "1966 this is it was never actually implemented it was written up in a paper",
    "start": "227650",
    "end": "233370"
  },
  {
    "text": "but it's the most influential language that was never actually implement it's sort of like a Velvet Underground album",
    "start": "233370",
    "end": "238810"
  },
  {
    "text": "you know nobody read the paper but the people who did me the paper went away and created their own programming languages it's the parent of all",
    "start": "238810",
    "end": "247000"
  },
  {
    "text": "functional programming languages and it's the first language to use indentation their scope so if you use Python or Haskell or F sharp you can",
    "start": "247000",
    "end": "254470"
  },
  {
    "text": "thank her this language for that APL 1966 a long time ago is the first right",
    "start": "254470",
    "end": "262840"
  },
  {
    "text": "only language famous for that and actually seriously the point of the",
    "start": "262840",
    "end": "268770"
  },
  {
    "text": "language was the idea is you think in symbols if you're a mathematician you think in symbols so you should write the code in symbols and the notation was",
    "start": "268770",
    "end": "275880"
  },
  {
    "text": "actually as an aid to thought it was a very well thought out language and he actually got a Turing Award for",
    "start": "275880",
    "end": "282930"
  },
  {
    "text": "inventing it so it's actually we shouldn't dump on APL is actually a very important language so I'm going to give",
    "start": "282930",
    "end": "287940"
  },
  {
    "text": "it a galaxy brain if you could learn a PL you definitely going to have your mind blown I'm similar 67 first language with",
    "start": "287940",
    "end": "295440"
  },
  {
    "text": "classes and inheritance Matz was talking about this in his keynote so that will",
    "start": "295440",
    "end": "301260"
  },
  {
    "text": "also change the way people thought about programming it broadly wouldn't blow your galaxy brain today because you are",
    "start": "301260",
    "end": "307530"
  },
  {
    "text": "used to this kind of stuff but the time was pretty impressive BCPL is important because it's the first language of curly",
    "start": "307530",
    "end": "313770"
  },
  {
    "text": "braces so you can blame you can blame BCPL for everything else and it's the grandparent of C so that's a long time",
    "start": "313770",
    "end": "321240"
  },
  {
    "text": "ago it's 1937 that's 50 years something like that logos so logo was amazing because the",
    "start": "321240",
    "end": "328890"
  },
  {
    "text": "idea is you should have a programming language for children to use now this is when people still have mainframes so the",
    "start": "328890",
    "end": "334200"
  },
  {
    "text": "idea that you'd have young children programming a computer was really a pretty profound idea very very",
    "start": "334200",
    "end": "341420"
  },
  {
    "text": "insightful alcohol 68 the successor to Algol another influential language very",
    "start": "341420",
    "end": "348510"
  },
  {
    "text": "very complex never really took off that was very influential and that brings us to the 70s which is the decade I'm",
    "start": "348510",
    "end": "354450"
  },
  {
    "text": "really gonna be talking about and then the 70s a lot of things happened pretty much everything that we can think of as",
    "start": "354450",
    "end": "359880"
  },
  {
    "text": "modern programming happened in the 1970s so I call this the Cambrian explosion lots of new programming languages lots",
    "start": "359880",
    "end": "366210"
  },
  {
    "text": "of new programming paradigms starting with fourth so forth is the first in",
    "start": "366210",
    "end": "371460"
  },
  {
    "text": "captive language that definitely blows your mind if you've ever used fourth galaxies brain for fourth and there's a",
    "start": "371460",
    "end": "378870"
  },
  {
    "text": "book called of thinking fourth which I highly recommend reading it's all about designing programs in a modular way and",
    "start": "378870",
    "end": "385020"
  },
  {
    "text": "that's where the word factoring as in refactoring came from Pascal 1970 that",
    "start": "385020",
    "end": "391320"
  },
  {
    "text": "was really Al Gore a nicer version of alcohol for the rest of us see came out",
    "start": "391320",
    "end": "396660"
  },
  {
    "text": "in 1972 you've probably heard of that one still going strong prologue so this is",
    "start": "396660",
    "end": "401850"
  },
  {
    "text": "I'm going to talk about prologue a new paradigm logic programming mind blowing okay",
    "start": "401850",
    "end": "407520"
  },
  {
    "text": "1972 and it still still hasn't really most people aren't really aware of it",
    "start": "407520",
    "end": "413000"
  },
  {
    "text": "email came out in 1973 another new paradigm functional programming another",
    "start": "413000",
    "end": "418320"
  },
  {
    "text": "mind blowing a way of thinking about programming sequel came out in 1974",
    "start": "418320",
    "end": "423680"
  },
  {
    "text": "another new paradigm relational database programming and that's mind-blowing again completely different way of",
    "start": "423680",
    "end": "429780"
  },
  {
    "text": "thinking about how you might interact with a computer that people hadn't really ever thought about before CLU is",
    "start": "429780",
    "end": "437010"
  },
  {
    "text": "worth a mention they introduced abstract data types and so on very influential written by Barbara Liskov and her team",
    "start": "437010",
    "end": "444060"
  },
  {
    "text": "and so if you've heard of the Liskov substitution principle that is named after her scheme came out there's",
    "start": "444060",
    "end": "452040"
  },
  {
    "text": "another list for the rest of us people who don't like Common Lisp like scheme myself basic came out and that was",
    "start": "452040",
    "end": "458700"
  },
  {
    "text": "amazing because you could actually program a personal computer you'd like the original I'll tear you had a flipped little switches and with basic you could",
    "start": "458700",
    "end": "465000"
  },
  {
    "text": "actually do some your programming which is amazing small talk came out and that's a another mind-blowing layer",
    "start": "465000",
    "end": "472200"
  },
  {
    "text": "along with Lisp and small talk about C's the two most influential languages I would say all sorts of stuff came out",
    "start": "472200",
    "end": "478620"
  },
  {
    "text": "small talk and I will be spending a lot of time on small talk a lot of people say it's a real our language not not",
    "start": "478620",
    "end": "485040"
  },
  {
    "text": "like Simula and not like in Java and so on we will see I will talk about oo in a",
    "start": "485040",
    "end": "490290"
  },
  {
    "text": "minute the other interesting thing about small talk is the X practitioners of",
    "start": "490290",
    "end": "495990"
  },
  {
    "text": "small talk on a further influential gang of four patents book have small talk as",
    "start": "495990",
    "end": "501450"
  },
  {
    "text": "one of the languages Kent Beck from XP was it X small talk er the law the agile people with X small talkers Martin",
    "start": "501450",
    "end": "508410"
  },
  {
    "text": "Fowler of refactoring Fame was an XML talker so they really have infiltrated the modern world of programming module 2",
    "start": "508410",
    "end": "516960"
  },
  {
    "text": "I'm just going to give this an honorable mention it's sort of golang of the 1970s it had a great module system had a great",
    "start": "516960",
    "end": "523979"
  },
  {
    "text": "covert eens I had all sorts of cool stuff but never really took off unfortunate but it was a very cool",
    "start": "523979",
    "end": "529170"
  },
  {
    "text": "language still still riku language today and it was designed for doing operating systems not just",
    "start": "529170",
    "end": "535100"
  },
  {
    "text": "high-level stuff in language x from november 79 I think just squeaks under",
    "start": "535100",
    "end": "542330"
  },
  {
    "text": "the wire and I'm not really going to tell you what it is except that it's the grandparent of the most popular",
    "start": "542330",
    "end": "548420"
  },
  {
    "text": "programming language ever so that gives you a clue and you can think about what that is so and that definitely changed",
    "start": "548420",
    "end": "556160"
  },
  {
    "text": "the way people thought about programming too right so if you look at the most important programming paradigms you have",
    "start": "556160",
    "end": "563720"
  },
  {
    "text": "the imperative thing really implemented by Al Gore and not really changed much since object-oriented similar and small",
    "start": "563720",
    "end": "570529"
  },
  {
    "text": "talk functional programming started with ml symbolic programming started with lists' but really kind of took off in",
    "start": "570529",
    "end": "576620"
  },
  {
    "text": "the 70s with Mac Lisp and scheme and so on logic programming Prolog in the 1970s",
    "start": "576620",
    "end": "582380"
  },
  {
    "text": "snack based programming fourth and 1970s what's interesting is all these paradigms really solidified by the late",
    "start": "582380",
    "end": "589760"
  },
  {
    "text": "70s and early 80s and these are the paradigms we still use today and we",
    "start": "589760",
    "end": "595040"
  },
  {
    "text": "really haven't progressed that much I mean there are some new things in in programming technology as things like",
    "start": "595040",
    "end": "601040"
  },
  {
    "text": "pure functional programming like Haskell and Erlang and so on but you know most",
    "start": "601040",
    "end": "607370"
  },
  {
    "text": "of us don't even understand this set of paradigms let alone you know so I would just encourage people to catch up with",
    "start": "607370",
    "end": "612860"
  },
  {
    "text": "the 1980s ok catch up with a 1980 state of the art programming that would be a",
    "start": "612860",
    "end": "618410"
  },
  {
    "text": "fantastically useful thing just right there so here's a toolkit if you do some",
    "start": "618410",
    "end": "623600"
  },
  {
    "text": "crafts frost mischief around the house you know you obviously have a hammer for",
    "start": "623600",
    "end": "629120"
  },
  {
    "text": "having nails for screwing things in you probably use a hammer for cutting wood",
    "start": "629120",
    "end": "634130"
  },
  {
    "text": "you probably want to use a hammer for that and for tightening bolts you want to use a hammer right is that true no of",
    "start": "634130",
    "end": "640850"
  },
  {
    "text": "course it's not true so think about programming ok you know you have lots of different things you do",
    "start": "640850",
    "end": "646310"
  },
  {
    "text": "when you do programming you do domain modeling and you maybe use a hammer and then to implement complex business rules",
    "start": "646310",
    "end": "652579"
  },
  {
    "text": "maybe you want to use a hammer and for doing complex data queries you want to use a hammer and for doing live coding",
    "start": "652579",
    "end": "658880"
  },
  {
    "text": "and stuff you want either hammer know exactly the same thing applies you should be using the right two",
    "start": "658880",
    "end": "664730"
  },
  {
    "text": "for the job and many of us only know one tool we only have hammers and I'm just",
    "start": "664730",
    "end": "670250"
  },
  {
    "text": "wanting this talk I really want to encourage you to go out and figure out how to use a screwdriver and a saw and a",
    "start": "670250",
    "end": "675980"
  },
  {
    "text": "wrench you know so if you look at the most popular programming languages all right these are all the ones that you've",
    "start": "675980",
    "end": "681949"
  },
  {
    "text": "all heard of they're all basically the same language and this is you know you",
    "start": "681949",
    "end": "687380"
  },
  {
    "text": "think all they're slightly different they're subtly different but you don't get a galaxy brain for learning Java if you know C sharp or go or Visual Basic",
    "start": "687380",
    "end": "695060"
  },
  {
    "text": "they're really all the same language I mean it's like if I said oh I speak three languages I'm a real polyglot you",
    "start": "695060",
    "end": "700790"
  },
  {
    "text": "know I speak British English and I speak American English and I speak Australian English no I don't speak three languages",
    "start": "700790",
    "end": "706610"
  },
  {
    "text": "I mean yeah they're slightly different there they're dialects you know but you don't get a galaxy brain for speaking",
    "start": "706610",
    "end": "712970"
  },
  {
    "text": "three dialects of English you know if you really want to make your head hurt you know go and learn an African",
    "start": "712970",
    "end": "718279"
  },
  {
    "text": "language or an Asian language or a Native American language they will make your head explode learning different",
    "start": "718279",
    "end": "723380"
  },
  {
    "text": "dialects of British is not going to make your head explode so it's a big world out there please go",
    "start": "723380",
    "end": "728959"
  },
  {
    "text": "and explore it not every language has to look like C C sharp Java and JavaScript",
    "start": "728959",
    "end": "735910"
  },
  {
    "text": "right so let's go exploring let's start with our first language is just sequel now most people are very familiar with",
    "start": "735910",
    "end": "741829"
  },
  {
    "text": "sequel it seems really boring but I think there's some cool things that we can get from sequel if we look at it",
    "start": "741829",
    "end": "748010"
  },
  {
    "text": "with some fresh eyes you know so first of all it is actually originally perhaps",
    "start": "748010",
    "end": "753050"
  },
  {
    "text": "sequel not SQL and it was part of the first relational database it was sort of",
    "start": "753050",
    "end": "759199"
  },
  {
    "text": "a proof of concept relational database systems now before you had sequel you had a dark ages where everyone had an",
    "start": "759199",
    "end": "766310"
  },
  {
    "text": "entire tree API and all the databases had different ways of talking to them and you had to use different things each time very complicated and sequel really",
    "start": "766310",
    "end": "775190"
  },
  {
    "text": "got rid of this I mean the idea of you know having different database API and",
    "start": "775190",
    "end": "780440"
  },
  {
    "text": "they know was crazy and sadly and whistle from them going back to that a little bit but you know sequel is a",
    "start": "780440",
    "end": "786019"
  },
  {
    "text": "fantastic step forward so what can we learn from sequel well the first thing is it's got a consistent model",
    "start": "786019",
    "end": "792230"
  },
  {
    "text": "everything is relation so we've got tables which is a set of rows here's some people with ages and here's",
    "start": "792230",
    "end": "798440"
  },
  {
    "text": "some parent-child relationships everything is a relation everything is a well a set of rows so when you do",
    "start": "798440",
    "end": "804620"
  },
  {
    "text": "something like select the name from a table that's a projection and that gives you back another set or if you do a",
    "start": "804620",
    "end": "812389"
  },
  {
    "text": "filter and you filter by age that gives you back another set so no matter what",
    "start": "812389",
    "end": "817490"
  },
  {
    "text": "you do whether you project to your projection or you do a filter whatever you're always getting another set of",
    "start": "817490",
    "end": "823339"
  },
  {
    "text": "rows so it's absolutely consistent model and what's cool about a consistent model is its predictable so if we solve it if",
    "start": "823339",
    "end": "831500"
  },
  {
    "text": "you tell me that this system uses set based operations and it's like oh yeah you can do this kind of thing you can do",
    "start": "831500",
    "end": "837529"
  },
  {
    "text": "this kind of thing and I say well that's interesting you since there's a set based thing I bet they can do Cartesian products right and then you say yeah",
    "start": "837529",
    "end": "844519"
  },
  {
    "text": "here you go join so even without knowing anything about sequel the fact that they can you",
    "start": "844519",
    "end": "851569"
  },
  {
    "text": "know fact this is set based thing charters are they have something to do Cartesian products because it's",
    "start": "851569",
    "end": "857209"
  },
  {
    "text": "predictable I would predict just the fact they have a consistent model that they'll do that so anytime we don't have",
    "start": "857209",
    "end": "862759"
  },
  {
    "text": "consistency it makes it really hard to predict what's going on so if you ever design the system try and make the",
    "start": "862759",
    "end": "868370"
  },
  {
    "text": "system consistent and makes it easier for the people going to use it now another thing about sequel which is not",
    "start": "868370",
    "end": "874399"
  },
  {
    "text": "necessarily obvious to people is it's an expression based language so what do I mean by an expression what I mean is",
    "start": "874399",
    "end": "880910"
  },
  {
    "text": "that everything you everything you do return something so when you do a query like this it returns a set right now",
    "start": "880910",
    "end": "887269"
  },
  {
    "text": "because it returns something you can embed it as a sub query in a bigger one",
    "start": "887269",
    "end": "892339"
  },
  {
    "text": "and you can take this query and embed it in a bigger sub query so because it",
    "start": "892339",
    "end": "898250"
  },
  {
    "text": "returns things the expression based languages are composable kind of like Lego you can take two pieces of Lego and",
    "start": "898250",
    "end": "904189"
  },
  {
    "text": "leave them to make a bigger piece of Lego you can take to sequel statements and glue them together to make a bigger",
    "start": "904189",
    "end": "909230"
  },
  {
    "text": "sequel expressions so expressions are great expression based languages you can do this in a statement based language",
    "start": "909230",
    "end": "915559"
  },
  {
    "text": "like C sharp and Java you can't do this that they're not composable there's",
    "start": "915559",
    "end": "921439"
  },
  {
    "text": "another reason which expressions are really nice and that is because they",
    "start": "921439",
    "end": "926660"
  },
  {
    "text": "don't have as many problems not as many potential as statement based languages so I'm",
    "start": "926660",
    "end": "932130"
  },
  {
    "text": "going to switch to this kind of a see like language to demonstrate here's some see like code what kinds of things can",
    "start": "932130",
    "end": "939450"
  },
  {
    "text": "go wrong with this okay so we have a results variable and the thing is it's",
    "start": "939450",
    "end": "945720"
  },
  {
    "text": "initialized before it's actually assigned to so we have to decide what are we going to neutralize it to or",
    "start": "945720",
    "end": "951030"
  },
  {
    "text": "maybe we forget to initialize it you know that's a problem and what about if we forget to assign it in the middle of",
    "start": "951030",
    "end": "956370"
  },
  {
    "text": "the if statement so one of the branches now obviously is pretty clear here but if you have a very long branch a lot of",
    "start": "956370",
    "end": "961590"
  },
  {
    "text": "ifs and stuff it's quite easy to forget to assign to it and that can cause a bug in fact it probably has caused in",
    "start": "961590",
    "end": "967410"
  },
  {
    "text": "foreign bugs and then what happens if there's an else brush you haven't even thought about that right what happens to",
    "start": "967410",
    "end": "973020"
  },
  {
    "text": "the value of result on the ailes case and then finally because results outside the if statement it's a side-effect and",
    "start": "973020",
    "end": "981030"
  },
  {
    "text": "you can't means you can't take this if statement and refactor it you can't pull it out as an extract method so that's a",
    "start": "981030",
    "end": "987780"
  },
  {
    "text": "problem now if you write the same thing using the ternary operator which C has it's one of the few kind of expression",
    "start": "987780",
    "end": "993810"
  },
  {
    "text": "things that C languages have the result variables assigned after I don't have to",
    "start": "993810",
    "end": "999900"
  },
  {
    "text": "kind of declare it first and assign after it is assigned and declared at the same time and so I never have to worry",
    "start": "999900",
    "end": "1006380"
  },
  {
    "text": "about what is the default what is the initial value when I haven't assigned it because it can't happen similarly I",
    "start": "1006380",
    "end": "1011510"
  },
  {
    "text": "can't forget to assign it because all the branches return something and I just assign the whole thing to the turn monie",
    "start": "1011510",
    "end": "1016960"
  },
  {
    "text": "and in a ternary expression you have to have an else case you can't say well if",
    "start": "1016960",
    "end": "1022400"
  },
  {
    "text": "it's true do this but if it's false I don't know you always have to handle both cases so you're never going to forget something and because there's no",
    "start": "1022400",
    "end": "1029689"
  },
  {
    "text": "side-effects in that little like the ternary expression I can take that turn expression and literally refactor it I can pull it out into its own little sub",
    "start": "1029690",
    "end": "1036650"
  },
  {
    "text": "expression like that now obviously this is a super trivial case but in",
    "start": "1036650",
    "end": "1041920"
  },
  {
    "text": "expression based languages which most functional languages are and sequel is",
    "start": "1041920",
    "end": "1047260"
  },
  {
    "text": "this kind of refactoring this kind of not having to worry about things that can go wrong is really natural and it's",
    "start": "1047260",
    "end": "1053900"
  },
  {
    "text": "a shame that it's not more common in other languages so expressions are great because they reduce bugs and they make",
    "start": "1053900",
    "end": "1059840"
  },
  {
    "text": "refactoring easier so another tick another important thing about sequel as",
    "start": "1059840",
    "end": "1065540"
  },
  {
    "text": "a sort of design lesson is its declarative you don't tell Segal how to do something you tell it what you want",
    "start": "1065540",
    "end": "1070970"
  },
  {
    "text": "to do so let's say I want to find all the people older than 50 or whatever now",
    "start": "1070970",
    "end": "1076970"
  },
  {
    "text": "if you do the whole program you're going to have to like open a file read through all the rows you try to find the thing there's a lot of stuff you know that",
    "start": "1076970",
    "end": "1084620"
  },
  {
    "text": "buries what you're actually trying to do now if you look at the sequel equivalent you just say you know selects people",
    "start": "1084620",
    "end": "1090320"
  },
  {
    "text": "where the age is greater than 50 I don't care whether you have to open a file to do that I don't really know I don't want",
    "start": "1090320",
    "end": "1095360"
  },
  {
    "text": "to know how you do it behind the scenes I just want to know you know what I want to do I'm telling you what I want to do",
    "start": "1095360",
    "end": "1100670"
  },
  {
    "text": "and one bonus about this approach is that performance is independent of the",
    "start": "1100670",
    "end": "1106880"
  },
  {
    "text": "query so if this is a slow query I can just add an index I can tune it without having to rewrite my code if I go back",
    "start": "1106880",
    "end": "1114560"
  },
  {
    "text": "to the C kind of code and I say well this is slow if I want to tune it I have to rewrite this code and I have to start",
    "start": "1114560",
    "end": "1120530"
  },
  {
    "text": "you know maybe inline the loops or do some things I have to change what I do in order to get performance so my code",
    "start": "1120530",
    "end": "1126170"
  },
  {
    "text": "has to change which is a chance for it to break with sequel you know the is orthogonal the that what you want to do",
    "start": "1126170",
    "end": "1132500"
  },
  {
    "text": "and how you do it are completely separately that's a really good design lesson if you ever designing api's make",
    "start": "1132500",
    "end": "1138530"
  },
  {
    "text": "sure you focus on the what are not the how and finally sequel has separation of",
    "start": "1138530",
    "end": "1144800"
  },
  {
    "text": "concerns we're always told don't mix different things together sequel is a great example of that because it's a",
    "start": "1144800",
    "end": "1150890"
  },
  {
    "text": "query language right so it does select and it has where right now if you want",
    "start": "1150890",
    "end": "1156650"
  },
  {
    "text": "to do an insert an update that's a different language that's the data manipulation language and they're",
    "start": "1156650",
    "end": "1162530"
  },
  {
    "text": "different languages I mean they they look like they're all in one pile but they're actually you know different",
    "start": "1162530",
    "end": "1168560"
  },
  {
    "text": "languages they're defined differently and then if you want to define tables and stuff that's another language now we",
    "start": "1168560",
    "end": "1174560"
  },
  {
    "text": "do think of sequel meaning all these things together but technically they are different things and the first one the data query language is the one that's an",
    "start": "1174560",
    "end": "1180710"
  },
  {
    "text": "expression based language so keep your concerns separate don't try and mix them up it makes it it makes implementation",
    "start": "1180710",
    "end": "1186800"
  },
  {
    "text": "easy and you get a lot of benefits from doing that okay so be particular if you",
    "start": "1186800",
    "end": "1192110"
  },
  {
    "text": "ever designing a lot of these things obviously you're not designing a program but if you're designing an API you're designing interfaces you're designing",
    "start": "1192110",
    "end": "1198420"
  },
  {
    "text": "just the concept of a system these are good guidelines be predictable use a",
    "start": "1198420",
    "end": "1203910"
  },
  {
    "text": "consistent model if you are using a language try and use an expression based language it makes your code more",
    "start": "1203910",
    "end": "1209150"
  },
  {
    "text": "composable and if you're exposing an API focus on exposing the what not how and",
    "start": "1209150",
    "end": "1217860"
  },
  {
    "text": "in all your coding please try and separate your concerns don't mix you",
    "start": "1217860",
    "end": "1223350"
  },
  {
    "text": "know different things together and finally sequel is an interactive language you don't you know when you want a sequel cuy you don't compile it",
    "start": "1223350",
    "end": "1229860"
  },
  {
    "text": "and wait 10 minutes and then see what happens right you can try things out you can play you can experiment that's",
    "start": "1229860",
    "end": "1236460"
  },
  {
    "text": "really really important that makes the language much more attractive to people so interactivity is something we really in as humans we love to play with things",
    "start": "1236460",
    "end": "1243120"
  },
  {
    "text": "so interactivity is really really important so this is all the stuff we can learn from a boring language like sequel only so who thought that sequel",
    "start": "1243120",
    "end": "1250650"
  },
  {
    "text": "be so interesting well there you go and especially the expression based stuff it's really sad that you know the 1970s",
    "start": "1250650",
    "end": "1257930"
  },
  {
    "text": "we had this figured out and even today most popular languages are not expression based and most popular",
    "start": "1257930",
    "end": "1265290"
  },
  {
    "text": "language do not separate concerns and most proper languages do not have a decorative interface and so on and a lot",
    "start": "1265290",
    "end": "1270810"
  },
  {
    "text": "of them are kitchen-sink languages they don't have a predictable model it's kind of sad that we really haven't progressed that much since the 70s all right now",
    "start": "1270810",
    "end": "1279150"
  },
  {
    "text": "for the first sort of mind-blowing one for people who are not familiar with this as a prologue was the first",
    "start": "1279150",
    "end": "1285480"
  },
  {
    "text": "mainstream logic programming language as design in France and it stands for programming in logic and it was very big",
    "start": "1285480",
    "end": "1294450"
  },
  {
    "text": "in Europe during the days when AI was very big in the 70s it was the European arts Lisp and it's also big in Japan",
    "start": "1294450",
    "end": "1301590"
  },
  {
    "text": "it's like those pop stars so what can we learn from Prolog well again Prolog has",
    "start": "1301590",
    "end": "1307890"
  },
  {
    "text": "a very very consistent model everything is the fact or a rule and that's pretty much it so what I mean by a fact so",
    "start": "1307890",
    "end": "1315720"
  },
  {
    "text": "here's some facts liz is 92 Charles is 69 and so on and Charles is the parent of wills and",
    "start": "1315720",
    "end": "1320940"
  },
  {
    "text": "Liz as a parent of Charles so those are facts they're just like a sequel table with relationships between the tables",
    "start": "1320940",
    "end": "1328080"
  },
  {
    "text": "now unlike sequels prologue has rules which makes relationships so you can say",
    "start": "1328080",
    "end": "1335500"
  },
  {
    "text": "somebody a person is older than a particular age if the person has an age and that age is greater than the age you",
    "start": "1335500",
    "end": "1342190"
  },
  {
    "text": "pass in and one person is older on another person if that person first",
    "start": "1342190",
    "end": "1347440"
  },
  {
    "text": "person has an age the second person has an age and the first age is bigger than the second age so those are kinds of",
    "start": "1347440",
    "end": "1353559"
  },
  {
    "text": "rules you know within prologue that's part of the database the rules are part of the database unlike sequel where you'd have to write",
    "start": "1353559",
    "end": "1360130"
  },
  {
    "text": "a separate kind of stored product something this is actually part of the database so prologue can exploit this",
    "start": "1360130",
    "end": "1366220"
  },
  {
    "text": "and again prologue is the decorative thing when I want to do a query I say",
    "start": "1366220",
    "end": "1374320"
  },
  {
    "text": "you know I can just say what is the age of this and if it's 92 that's true and",
    "start": "1374320",
    "end": "1379750"
  },
  {
    "text": "if I say if I say who has the who which person has age 92 it will basically go",
    "start": "1379750",
    "end": "1386679"
  },
  {
    "text": "through the list of facts and try and find someone who has that age and then it will since I've got this variable P",
    "start": "1386679",
    "end": "1392320"
  },
  {
    "text": "which is kind of unbound it's a kind of free variable it will say oh P must be Liz and that all it will return that",
    "start": "1392320",
    "end": "1400330"
  },
  {
    "text": "and if I do it backwards if I say what is the age of Liz and I leave the age variable kind of unbound it will go",
    "start": "1400330",
    "end": "1406450"
  },
  {
    "text": "through the list of facts and I say all this fact matches and we know sine a has to be 92 so this is it's not a query",
    "start": "1406450",
    "end": "1414940"
  },
  {
    "text": "it's what they call unification it's like you've got one thing over here you've got another thing over here they",
    "start": "1414940",
    "end": "1420040"
  },
  {
    "text": "must be the same so I will make this thing be the same as this other thing over here unifying the two and what's cool is it",
    "start": "1420040",
    "end": "1427270"
  },
  {
    "text": "works in both directions and we'll see an example of them so it's a bi-directional kind of you don't have to",
    "start": "1427270",
    "end": "1432970"
  },
  {
    "text": "have queries for this thing and a different kind of query with this thing it's the same model all the way through",
    "start": "1432970",
    "end": "1438480"
  },
  {
    "text": "here's another example is Liz that my own partner Harry yes because it uses",
    "start": "1438480",
    "end": "1444130"
  },
  {
    "text": "the rule that I had if someone's a parent and they're the parents parent here's another one if IP is unbound it",
    "start": "1444130",
    "end": "1450910"
  },
  {
    "text": "will figure out who the grandparent is so this is an example of using the list of rule facts but it's also using the",
    "start": "1450910",
    "end": "1457450"
  },
  {
    "text": "rule that I said that the grandparent is the parent of a parent and so on so",
    "start": "1457450",
    "end": "1464690"
  },
  {
    "text": "forth okay so a lot of people would say you know this is kind of cool this is kind of my sequel they could do kind of query language like this and the answer",
    "start": "1464690",
    "end": "1471710"
  },
  {
    "text": "is yes in fact there is a query language based on Prolog and it's called data log and let me give you an example so here's",
    "start": "1471710",
    "end": "1480920"
  },
  {
    "text": "a kind of really complex query get me the names and addresses of employees who work for at least one project located in Houston but whose Department does not",
    "start": "1480920",
    "end": "1487190"
  },
  {
    "text": "have a location in Houston now you better set up the wall say that if a",
    "start": "1487190",
    "end": "1492590"
  },
  {
    "text": "manager works on a project and the project is based in Houston then that's one thing and then if a manager has a",
    "start": "1492590",
    "end": "1498770"
  },
  {
    "text": "department and the department is not in Houston that's another thing and then finally you see it hit me the first",
    "start": "1498770",
    "end": "1505760"
  },
  {
    "text": "middle last and address of an employee who has a manager and the manager works on this project and the managers know in",
    "start": "1505760",
    "end": "1511010"
  },
  {
    "text": "Houston so this is actually a database query and it looks very much like Prolog",
    "start": "1511010",
    "end": "1517360"
  },
  {
    "text": "you're basically filling in various slots so you don't have to write any",
    "start": "1517360",
    "end": "1522620"
  },
  {
    "text": "joins I mean if you try to write this in sequel that'll be a lot of really complicated joins going on behind the scenes and you wouldn't really be sure",
    "start": "1522620",
    "end": "1529580"
  },
  {
    "text": "that you've got it right the either with the with the Prolog style you just fill in the slots or the things and you say",
    "start": "1529580",
    "end": "1535940"
  },
  {
    "text": "well this thing this manager over here has to be the same as this manager over here and that unifies and together and",
    "start": "1535940",
    "end": "1541250"
  },
  {
    "text": "therefore the two things are the same that's kind of cool all right let's look",
    "start": "1541250",
    "end": "1547460"
  },
  {
    "text": "at bi-directional unification so Prolog has a function called append which takes",
    "start": "1547460",
    "end": "1555950"
  },
  {
    "text": "a list and another list that makes a new list so if I say what if you take the list one and you take the list of two and three and you append them what you",
    "start": "1555950",
    "end": "1563060"
  },
  {
    "text": "get where you get one two three okay so that's kind of like a regular function but what's cool is you can put it",
    "start": "1563060",
    "end": "1569570"
  },
  {
    "text": "backwards you can say I don't know what X is if I said that X is something and",
    "start": "1569570",
    "end": "1574820"
  },
  {
    "text": "you append two and three to it you get the list one two three what is X and it",
    "start": "1574820",
    "end": "1579860"
  },
  {
    "text": "says what X must be one so it will work backwards the same thing it will actually work backwards and tell you",
    "start": "1579860",
    "end": "1586070"
  },
  {
    "text": "what you need to do to make this thing happen or you can be even",
    "start": "1586070",
    "end": "1591710"
  },
  {
    "text": "ever and you can say well I have two things X&Y and when I get concatenate them I want to make a new list one two",
    "start": "1591710",
    "end": "1598010"
  },
  {
    "text": "three what are x and y well Prolog will say well X could be an empty list and Y",
    "start": "1598010",
    "end": "1605180"
  },
  {
    "text": "could be the list 1 2 3 that would work and then it will go to the next thing I said well you could also have X be the",
    "start": "1605180",
    "end": "1610910"
  },
  {
    "text": "list 1 and Y could be 2 & 3 or X could be 1 & 2 and y could be 3 or X could be",
    "start": "1610910",
    "end": "1616700"
  },
  {
    "text": "1 2 & 3 Froelich will actually find all the different solutions so this same function can be used in three different",
    "start": "1616700",
    "end": "1624110"
  },
  {
    "text": "ways it can be used to like to find the answer there's something would wait how do I append to lists but it can also be",
    "start": "1624110",
    "end": "1629120"
  },
  {
    "text": "fine what do I have to do in order to get this particular result so it's kind of backtracking its goal seeking so if",
    "start": "1629120",
    "end": "1636410"
  },
  {
    "text": "you ever used something like in excel or they have a kind of goal scenario thing it's exactly that it's like what do I",
    "start": "1636410",
    "end": "1641750"
  },
  {
    "text": "have to make this to be to match this thing over here that's really really an awesome feature so let me quickly demo",
    "start": "1641750",
    "end": "1650230"
  },
  {
    "text": "throw a log here so this is his mental",
    "start": "1650230",
    "end": "1656300"
  },
  {
    "text": "database here and I can say there we go",
    "start": "1656300",
    "end": "1662080"
  },
  {
    "text": "who is the grandparent of Lear's and the artist wills and if I say is",
    "start": "1662080",
    "end": "1672370"
  },
  {
    "text": "wills the grand plan that's true whoops it's a bit of thing so I think really",
    "start": "1672370",
    "end": "1678440"
  },
  {
    "text": "here and then I say who is the",
    "start": "1678440",
    "end": "1686240"
  },
  {
    "text": "grandparent of we'll say and it will say",
    "start": "1686240",
    "end": "1691310"
  },
  {
    "text": "this so well it works in all sorts of directions now obviously that's a trivial example but a great example of",
    "start": "1691310",
    "end": "1697910"
  },
  {
    "text": "how you can do this is something like Sudoku so Sudoku is a good example of constraint based programming you have a",
    "start": "1697910",
    "end": "1705650"
  },
  {
    "text": "system there's certain rules you have to follow and you're trying to find something that matches all the rules you",
    "start": "1705650",
    "end": "1711200"
  },
  {
    "text": "want to find the best answer and this is obviously Sudoku is arcane but in a lot",
    "start": "1711200",
    "end": "1716510"
  },
  {
    "text": "of business situations you have exactly this thing you want to find you know given this constraint in this constraint what is the best price that I should",
    "start": "1716510",
    "end": "1722510"
  },
  {
    "text": "give you know if I have this special offer and this special offer which that I sit to be really kind of complicated logic now this is Sudoku in Prolog in eight",
    "start": "1722510",
    "end": "1732409"
  },
  {
    "text": "lines of code okay so you don't tell it how to solve the problem you say what is the problem you say okay there there's",
    "start": "1732409",
    "end": "1739340"
  },
  {
    "text": "an array of rows and there's nine of them and then each row has the same length and it also has to be line and",
    "start": "1739340",
    "end": "1745730"
  },
  {
    "text": "then each row has a set of values and the values have to be in the set 1 to 9",
    "start": "1745730",
    "end": "1750950"
  },
  {
    "text": "and then each row all the values in each row have to be distinct and if you",
    "start": "1750950",
    "end": "1758090"
  },
  {
    "text": "transpose the rows you get a set of columns and all the numbers in the",
    "start": "1758090",
    "end": "1763190"
  },
  {
    "text": "columns have to be distinct and the final thing is the little squares the",
    "start": "1763190",
    "end": "1768590"
  },
  {
    "text": "nine little blocks so we're going to give them names are going to say row is ABCDE and we're going to say that the",
    "start": "1768590",
    "end": "1774740"
  },
  {
    "text": "the blocks in the first three rows ABC have to be different and the blocks in the third in the second three rows have",
    "start": "1774740",
    "end": "1781070"
  },
  {
    "text": "to be different in the blocks in the third row tetrahedral and that is it so I haven't told Prolog how to solve for",
    "start": "1781070",
    "end": "1790070"
  },
  {
    "text": "my just set up what the rules are for the game I know if I go over here and I",
    "start": "1790070",
    "end": "1799250"
  },
  {
    "text": "say can you solve this problem Prolog and there it is it sold it so it's",
    "start": "1799250",
    "end": "1808789"
  },
  {
    "text": "basically applied all those rules and solve Sudoku for us so and that's really",
    "start": "1808789",
    "end": "1814309"
  },
  {
    "text": "really cool you know trying to imagine writing a Sudoku sofa in another language is very painful and you're not",
    "start": "1814309",
    "end": "1819710"
  },
  {
    "text": "never going to be sure you've got it right all you have to do in Prolog is what to write down the definition of what of",
    "start": "1819710",
    "end": "1824720"
  },
  {
    "text": "Sudoku is and they will figure out the rest and if you have a bad situation",
    "start": "1824720",
    "end": "1829880"
  },
  {
    "text": "like here in the second one I've got to ace in the same well okay so that's not possible that's going to be a bad answer",
    "start": "1829880",
    "end": "1837049"
  },
  {
    "text": "so I go to Prolog and I say can you solve problem 2 and it says false ok",
    "start": "1837049",
    "end": "1844220"
  },
  {
    "text": "there is no solution to that because it's constraint based so I think you",
    "start": "1844220",
    "end": "1849500"
  },
  {
    "text": "know this is an example obviously the Sudoku is is you know a trivial example but you people use Prolog for things",
    "start": "1849500",
    "end": "1855260"
  },
  {
    "text": "like medical databases for natural language processing but also this was if you have these kinds of",
    "start": "1855260",
    "end": "1860460"
  },
  {
    "text": "problems any kind of constraint based solving Prolog that's awesome for that one so what can we learn about Prolog",
    "start": "1860460",
    "end": "1869130"
  },
  {
    "text": "well again it's consistent there's only one way of doing things and further do you have facts and rules you know you have a completely predictable Milley you",
    "start": "1869130",
    "end": "1875100"
  },
  {
    "text": "don't have special edge cases you don't have weird is all kitchen sink things is very very straightforward again it's",
    "start": "1875100",
    "end": "1881130"
  },
  {
    "text": "very decorative you don't tell Prolog what to do you set up the rules and it",
    "start": "1881130",
    "end": "1886560"
  },
  {
    "text": "figures it out which is really really a great way of solving problems unification is really awesome the fact",
    "start": "1886560",
    "end": "1895080"
  },
  {
    "text": "you can do bi-directional queries you can ask you know is this problem solvable and you know it's the Sudoku so",
    "start": "1895080",
    "end": "1902220"
  },
  {
    "text": "problem solvable I could ask is it true or false and also if I if I have some left things back I can say well which",
    "start": "1902220",
    "end": "1907560"
  },
  {
    "text": "things match these slots in order to make everything work again and again",
    "start": "1907560",
    "end": "1912690"
  },
  {
    "text": "it's interactive I can play with it interactively I can experiment so if you",
    "start": "1912690",
    "end": "1918480"
  },
  {
    "text": "ever write a rules engine don't if you ever do any complex business rules you",
    "start": "1918480",
    "end": "1924000"
  },
  {
    "text": "know consider using Prolog you can slot it in it's got an API you can call it from other languages definitely worth",
    "start": "1924000",
    "end": "1929940"
  },
  {
    "text": "checking out all right and now next one ml so M L stands for meta language",
    "start": "1929940",
    "end": "1939030"
  },
  {
    "text": "written in 1973 or so or started all these states are very fuzzy you know",
    "start": "1939030",
    "end": "1945390"
  },
  {
    "text": "they kind of start writing it and then it doesn't really take the world to become stable so I don't think it was really stable unto the end of the 70s",
    "start": "1945390",
    "end": "1951840"
  },
  {
    "text": "but designed as part of a theorem proving system so it's got this kind of logic thing again not to be confused as",
    "start": "1951840",
    "end": "1958680"
  },
  {
    "text": "machine learning obviously it's an impure function language pretty much the first mainstream function language and",
    "start": "1958680",
    "end": "1965070"
  },
  {
    "text": "it's the parent of a whole branch of function languages including standard ml Oh Carolyn F sharp there's another",
    "start": "1965070",
    "end": "1971010"
  },
  {
    "text": "branch represented by Haskell which comes from Aranda which is a slightly different kind of history there all",
    "start": "1971010",
    "end": "1978210"
  },
  {
    "text": "right now ml is a functional programming language I'm not going to talk about functional programming because we've already talked enough about fashion for",
    "start": "1978210",
    "end": "1983760"
  },
  {
    "text": "a moment so I'm going to talk about other things that ml and teachers which is nothing to do with functional",
    "start": "1983760",
    "end": "1989400"
  },
  {
    "text": "programming so the first things that ml had which is really cool is type influence so let me explain how type inference",
    "start": "1989400",
    "end": "1996880"
  },
  {
    "text": "works for people who aren't familiar with it and it's type of emphasis uses pretty much the same router with as",
    "start": "1996880",
    "end": "2002700"
  },
  {
    "text": "prologues unification it's like I have this thing has been int and I don't know what this thing is therefore this thing",
    "start": "2002700",
    "end": "2008309"
  },
  {
    "text": "has to be in it so it's kind of making them be the same thing so let's look at example here's a function does something",
    "start": "2008309",
    "end": "2015900"
  },
  {
    "text": "I don't care what there were two parameters f of X and I haven't told you",
    "start": "2015900",
    "end": "2021150"
  },
  {
    "text": "what type they are I haven't got any types in there whatsoever so can the type inference the thing figure out what",
    "start": "2021150",
    "end": "2028950"
  },
  {
    "text": "those types are without me saying what they are well the answer is yes you can and the first thing it does is it says",
    "start": "2028950",
    "end": "2035039"
  },
  {
    "text": "well X must be an int because you're adding it to one and one's an int X mice or subunits okay and then it says the",
    "start": "2035039",
    "end": "2043500"
  },
  {
    "text": "same thing if you're adding Y to hello then y must be a string so now we know",
    "start": "2043500",
    "end": "2049888"
  },
  {
    "text": "that X is an int and Y is a string and then we look at this function and the",
    "start": "2049889",
    "end": "2055858"
  },
  {
    "text": "input of this function is now an integer we know that because it's X and the output of this function is y so it must",
    "start": "2055859",
    "end": "2062398"
  },
  {
    "text": "be a string so this function must be something that turns integers into strings so now we know what that",
    "start": "2062399",
    "end": "2068190"
  },
  {
    "text": "function is and now we know everything about the the type we can say there's a",
    "start": "2068190",
    "end": "2074700"
  },
  {
    "text": "function parameter which is an int string function the X parameter is going to be an integer and the final return",
    "start": "2074700",
    "end": "2081450"
  },
  {
    "text": "value is going to be hello plus y and we know that's a string so the type inference algum has figured all this",
    "start": "2081450",
    "end": "2087148"
  },
  {
    "text": "stuff out without us having to tell it and so this kind of this code up there",
    "start": "2087149",
    "end": "2093599"
  },
  {
    "text": "kind of looks like a scripting language it looks like Python or Ruby or something but it's actually statically typed you don't have to you know you get",
    "start": "2093599",
    "end": "2101880"
  },
  {
    "text": "all the benefits of type checking without all the overhead of having to tell the compiler all the time now you think it was just okay this is a",
    "start": "2101880",
    "end": "2108420"
  },
  {
    "text": "trivial example why is it really important here's a more complex version this is C sharp for the link methods",
    "start": "2108420",
    "end": "2116820"
  },
  {
    "text": "called route by now I challenge you to understand what",
    "start": "2116820",
    "end": "2122549"
  },
  {
    "text": "is going on you have an enumerable which contains a grouping which contains a tiki and a tea sauce and so on could you",
    "start": "2122549",
    "end": "2129450"
  },
  {
    "text": "write this type signature yourself I mean maybe some people could but you know it's complicated now in F sharp the",
    "start": "2129450",
    "end": "2136410"
  },
  {
    "text": "same code looks like this you've grouped by you know you have a source and you have a key select another F sharp",
    "start": "2136410",
    "end": "2142069"
  },
  {
    "text": "compiler will do type inference and it will fill all this stuff out for you so you know you don't have to try and",
    "start": "2142069",
    "end": "2148530"
  },
  {
    "text": "figure this stuff out so the thing about type inference is it's obviously it's less typing you don't have to type all",
    "start": "2148530",
    "end": "2154319"
  },
  {
    "text": "the the words in but more importantly is less noise there's more more focus on",
    "start": "2154319",
    "end": "2160530"
  },
  {
    "text": "logic and less focus on kind of fluff all this type stuff kind of gets in the way I don't really care what the types",
    "start": "2160530",
    "end": "2166890"
  },
  {
    "text": "are I just want it to work the type checker will make sure that I don't make a mistake okay another important thing",
    "start": "2166890",
    "end": "2174750"
  },
  {
    "text": "about ml which is kind of a little minor thing but I think it's actually not so minor different defaults so in ml based",
    "start": "2174750",
    "end": "2183750"
  },
  {
    "text": "languages things that are mutable by default and if you want mutability as a special case now that's the completely",
    "start": "2183750",
    "end": "2189420"
  },
  {
    "text": "opposite of most kind of see like languages where mutability is that default and if you want immutability you have to do a lot of extra work things",
    "start": "2189420",
    "end": "2196740"
  },
  {
    "text": "are non null by default and if you want null ability that's a special case that's again the exact opposite of most",
    "start": "2196740",
    "end": "2203490"
  },
  {
    "text": "c-like languages you get structural equality by default if you have two data structures they're going to be equal by",
    "start": "2203490",
    "end": "2209490"
  },
  {
    "text": "default if they have the same values so all that all that time we've written you know get your overwriting equals and",
    "start": "2209490",
    "end": "2216000"
  },
  {
    "text": "overwriting hash code and stuff you don't have to do that if you want reference equality you can do that",
    "start": "2216000",
    "end": "2221460"
  },
  {
    "text": "that's a special case and all the data structures have to be initialized you can never have uninitialized values",
    "start": "2221460",
    "end": "2227069"
  },
  {
    "text": "that's the default again so you never have accidentally no you know very accidental things that you forgot to",
    "start": "2227069",
    "end": "2233400"
  },
  {
    "text": "handle so even these simple defaults actually can make a really really big difference in and how useful the",
    "start": "2233400",
    "end": "2238920"
  },
  {
    "text": "programming languages right number three algebraic type system and as I prefer to",
    "start": "2238920",
    "end": "2246420"
  },
  {
    "text": "call it a composable type system and if you went to my talk earlier on the power of composition this is the",
    "start": "2246420",
    "end": "2252870"
  },
  {
    "text": "same little bit I'm going to repeat here so what I mean by a composable time system in ml languages the types are",
    "start": "2252870",
    "end": "2261030"
  },
  {
    "text": "don't have behavior it's a function language there's no behavior with the types it's just data so the good thing",
    "start": "2261030",
    "end": "2267660"
  },
  {
    "text": "about that is because they're just data you can glue them together because you don't have to worry about or the behaviorism and you can glue them",
    "start": "2267660",
    "end": "2273510"
  },
  {
    "text": "together in two different ways you can add them together and you can or them together and what do I mean by that okay",
    "start": "2273510",
    "end": "2280920"
  },
  {
    "text": "well anding is something we're all familiar with oh if I say I want a fruit salad it's an apple and a banana and a",
    "start": "2280920",
    "end": "2287430"
  },
  {
    "text": "cherry that is basically a record type or a pair or a tuple you know things",
    "start": "2287430",
    "end": "2292890"
  },
  {
    "text": "you're very familiar with in F sharp it looks like this this is very similar to how you do it in c-sharp or JavaScript",
    "start": "2292890",
    "end": "2298770"
  },
  {
    "text": "or something it's just basically a record structure or any you know the rule for any width so nothing special there but the other thing which is ml",
    "start": "2298770",
    "end": "2308070"
  },
  {
    "text": "languages have is composing with aw so if I say a snack is an apple or a banana",
    "start": "2308070",
    "end": "2314280"
  },
  {
    "text": "or cherry this is the kind of thing that's not so easily available in most",
    "start": "2314280",
    "end": "2320820"
  },
  {
    "text": "modern languages in f-sharp you do I fact this you say it's an apple or",
    "start": "2320820",
    "end": "2327000"
  },
  {
    "text": "banana or a cherry now it's sort of like an enum sort of or sort of like sub",
    "start": "2327000",
    "end": "2332250"
  },
  {
    "text": "classing sort of normally it's a different concept and it's a really",
    "start": "2332250",
    "end": "2337830"
  },
  {
    "text": "fantastic concept and we'll see in a minute these are called I like to call them the choice types because the choice of different things",
    "start": "2337830",
    "end": "2343520"
  },
  {
    "text": "they're called discriminated unions they were also called some types lost doesn't words for these things but really really",
    "start": "2343520",
    "end": "2348750"
  },
  {
    "text": "a valuable thing once you have this thing in your toolkit it's really hard to go to a language which doesn't have it so let's look at a real world example",
    "start": "2348750",
    "end": "2358580"
  },
  {
    "text": "let's say that we have three forms a payment we want to take cash checking",
    "start": "2359150",
    "end": "2364770"
  },
  {
    "text": "cards and for cheques we need extra information and for cards we need some extra information so how would you",
    "start": "2364770",
    "end": "2370350"
  },
  {
    "text": "implement this well in our way you might have an interface and subclasses and so on in an algebraic tie system you build",
    "start": "2370350",
    "end": "2378000"
  },
  {
    "text": "up the model using types by building smaller types and bigger type building",
    "start": "2378000",
    "end": "2384000"
  },
  {
    "text": "bigger types as well just like Lego so you start off with some small primitive type like this check number and a card number okay",
    "start": "2384000",
    "end": "2390650"
  },
  {
    "text": "they're primitives and then you say okay the card type is a choice between Visa and MasterCard and credit card",
    "start": "2390650",
    "end": "2397460"
  },
  {
    "text": "information is an and it's a credit it's a car type and the card number okay so",
    "start": "2397460",
    "end": "2402619"
  },
  {
    "text": "it's a record structure so we've got a choice using or and we've got a record using hand okay now we've built up some",
    "start": "2402619",
    "end": "2409580"
  },
  {
    "text": "more types let's use those we can say okay payment method is a choice it's either cash or cheque and if it is a",
    "start": "2409580",
    "end": "2415339"
  },
  {
    "text": "check we have the check number or it's a card and if it's a card we have some extra card information that's a choice",
    "start": "2415339",
    "end": "2421070"
  },
  {
    "text": "type and then we can build on that and we can say okay we need a payment amount that's a decimal a currency as a choice",
    "start": "2421070",
    "end": "2427609"
  },
  {
    "text": "so another primitive another choice and then we can build on that and we can say a payment is an amount and it's a",
    "start": "2427609",
    "end": "2434540"
  },
  {
    "text": "currency and it's a method so we've actually built quite a big domain in a",
    "start": "2434540",
    "end": "2440150"
  },
  {
    "text": "few lines of code right there's the final ones of record type this thing of building bigger types and small types",
    "start": "2440150",
    "end": "2445849"
  },
  {
    "text": "really really powerful concepts and this is one of the really nice things about algebraic type system and if you do this",
    "start": "2445849",
    "end": "2452540"
  },
  {
    "text": "you get this kind of thing as types as documentation something we're always trying to go for right types as",
    "start": "2452540",
    "end": "2457760"
  },
  {
    "text": "executable documentation so this is a bunch of types and I think you can",
    "start": "2457760",
    "end": "2463250"
  },
  {
    "text": "understand you know what this is about there's nothing to have playing a cards is a card game right just from that just",
    "start": "2463250",
    "end": "2468560"
  },
  {
    "text": "from the way the types look you can guess what it does and types can be nouns but they can also be verbs you can",
    "start": "2468560",
    "end": "2474470"
  },
  {
    "text": "have function types say this is how you deal this is how you pick up a card so",
    "start": "2474470",
    "end": "2479570"
  },
  {
    "text": "you've basically got the entire domain on one screen you don't have to go to 20 different files into 20 different classes try and figure out what the",
    "start": "2479570",
    "end": "2485750"
  },
  {
    "text": "domain is in a functional language you typically have this as the first file in your program and all the rest of server uses",
    "start": "2485750",
    "end": "2491630"
  },
  {
    "text": "this as the basis of its implementation and what's nice about this is that even",
    "start": "2491630",
    "end": "2498410"
  },
  {
    "text": "a non-technical developer can look at this code and understand it so if I show this to a non-technical person I say",
    "start": "2498410",
    "end": "2504040"
  },
  {
    "text": "what payment methods are accepted you know they don't have to be a programmer they can probably look at this and tell",
    "start": "2504040",
    "end": "2510740"
  },
  {
    "text": "me and if they say well you forgot to handle PayPal or something they can look at this and give me some feedback that's",
    "start": "2510740",
    "end": "2516050"
  },
  {
    "text": "really nice if you're doing domain driven design or something like this you're working with domain experts this is a fantastic way of work doing this so",
    "start": "2516050",
    "end": "2523039"
  },
  {
    "text": "obviously a massive topic I have a whole talk about this and I have a whole book about this so if you want more about",
    "start": "2523039",
    "end": "2529279"
  },
  {
    "text": "this going with my book alright I'm not going to do a demo of ml because there's",
    "start": "2529279",
    "end": "2535010"
  },
  {
    "text": "been a lot of F sharp demos at this conference I highly recommend Thomas better checks demo of how to build Excel",
    "start": "2535010",
    "end": "2541190"
  },
  {
    "text": "in an hour and there's a lot of other good toss there this conference that you can see right what can we learn from ml",
    "start": "2541190",
    "end": "2548799"
  },
  {
    "text": "its expression based again everything is composable you can take ml expressions",
    "start": "2548799",
    "end": "2554329"
  },
  {
    "text": "and build big expressions from small ones this composability thing hop on over and over again we've got composable",
    "start": "2554329",
    "end": "2560420"
  },
  {
    "text": "expressions we've got composable types building bigger things some small things like Lego is a really really powerful",
    "start": "2560420",
    "end": "2565460"
  },
  {
    "text": "principle type inference is absolutely awesome and any language that doesn't",
    "start": "2565460",
    "end": "2570619"
  },
  {
    "text": "have type inference is a loser seriously",
    "start": "2570619",
    "end": "2579349"
  },
  {
    "text": "just making the defaults different if you can and they kind of surprise obviously you're not writing programming",
    "start": "2579349",
    "end": "2584450"
  },
  {
    "text": "languages but if you're ever designing anything think about what the defaults are makes make sure the defaults make it",
    "start": "2584450",
    "end": "2591289"
  },
  {
    "text": "hard to do bad things so make sure that the false you know always work so if we",
    "start": "2591289",
    "end": "2597859"
  },
  {
    "text": "stop having a mutability by default it's really helpful if you want mutability fine you can answer it but it's not the",
    "start": "2597859",
    "end": "2602900"
  },
  {
    "text": "default thing make the default thing the good thing ml was the first language to",
    "start": "2602900",
    "end": "2608599"
  },
  {
    "text": "juice parametric polymorphism which we call generics and incredibly even in the",
    "start": "2608599",
    "end": "2614619"
  },
  {
    "text": "current era we have some language we do not have generics mentioning their names",
    "start": "2614619",
    "end": "2619960"
  },
  {
    "text": "algebraic types are awesome yeah going back to type refers you know Java developers just got var right very very",
    "start": "2619960",
    "end": "2627140"
  },
  {
    "text": "simple type emphasis and people are freaking out over it that dude this has been around for 40 years okay and",
    "start": "2627140",
    "end": "2633369"
  },
  {
    "text": "algebraic types been around for 40 years and people don't even have them know most languages it's like what are we",
    "start": "2633369",
    "end": "2639079"
  },
  {
    "text": "what are we even doing right and now small talk so I heart small talk I love",
    "start": "2639079",
    "end": "2646039"
  },
  {
    "text": "small talk it was my first love as it were and I've still lost a lot",
    "start": "2646039",
    "end": "2651220"
  },
  {
    "text": "very much develop a desert spark so it's part where they did everything",
    "start": "2651220",
    "end": "2657250"
  },
  {
    "text": "they invented the PC the first GUI the first laser printer they invented the Ethernet they did everything they're",
    "start": "2657250",
    "end": "2662680"
  },
  {
    "text": "pretty amazing and when they introduced small talk it was the first message based our it they",
    "start": "2662680",
    "end": "2668080"
  },
  {
    "text": "introduced model-view-controller they had a full IDE on a graphical user interface back in the 1970s it had a",
    "start": "2668080",
    "end": "2675490"
  },
  {
    "text": "virtual machine and had a generational garbage collector really incredible so galaxy bring many many galaxy brains to",
    "start": "2675490",
    "end": "2682390"
  },
  {
    "text": "small talk for being awesome this is what the Smalltalk user interface looked like back in the 80s",
    "start": "2682390",
    "end": "2689460"
  },
  {
    "text": "no sorry back in yeah back in the natives with a Mac anybody hasn't changed since then and you'll see in a",
    "start": "2689460",
    "end": "2695380"
  },
  {
    "text": "minute that is pretty much the same interface so I'm going to do a small to demo because I can't really no point",
    "start": "2695380",
    "end": "2701530"
  },
  {
    "text": "even showing you the code but small talk has a consistent model like all the other ones we talked about everything's an object everything is an object",
    "start": "2701530",
    "end": "2707200"
  },
  {
    "text": "everything isn't objects I cannot stress this highly enough everything everything isn't objects",
    "start": "2707200",
    "end": "2712590"
  },
  {
    "text": "it's got minimal syntax it has three key words and it has three kinds of messages",
    "start": "2712590",
    "end": "2718570"
  },
  {
    "text": "and that is it so everything is done through the language so for example there's no if statements and there's no",
    "start": "2718570",
    "end": "2725020"
  },
  {
    "text": "for loops in small talk everything has done through messages now if you put",
    "start": "2725020",
    "end": "2730660"
  },
  {
    "text": "example at a modern example this is how a sync was done in c-sharp versus f-sharp so in c-sharp they just added a",
    "start": "2730660",
    "end": "2735910"
  },
  {
    "text": "sync a while ago and they had an add a new keyword for a sync I had to change the language to do a sync an F sharp F",
    "start": "2735910",
    "end": "2743440"
  },
  {
    "text": "sharp that's a facility for doing things like that and they could just add it as a library the language is already",
    "start": "2743440",
    "end": "2749320"
  },
  {
    "text": "powerful enough to add a sync as a sort of library and that's one of the differences between making a powerful language and a language where you have",
    "start": "2749320",
    "end": "2755830"
  },
  {
    "text": "to keep changing the syntax all the time the other thing about small talk people aren't really used to either which is",
    "start": "2755830",
    "end": "2761500"
  },
  {
    "text": "the whole kinds of late binding so late binding means that you don't really do anything to the very very last minute",
    "start": "2761500",
    "end": "2766570"
  },
  {
    "text": "and you can intercept a message at any point up to the last point and like work with it change it route it so you're",
    "start": "2766570",
    "end": "2772990"
  },
  {
    "text": "going to be a dynamic language like Python or Ruby be a really dynamic language I mean really go whole hog and be as dynamic as",
    "start": "2772990",
    "end": "2779650"
  },
  {
    "text": "you possibly can and small talk is really the ultimate language and another interesting about",
    "start": "2779650",
    "end": "2785240"
  },
  {
    "text": "small talk no text files everything is in memory all the time and which means",
    "start": "2785240",
    "end": "2792740"
  },
  {
    "text": "that everything is already there every single file at me every single class every single objects always in memory all the time and you might think well",
    "start": "2792740",
    "end": "2799220"
  },
  {
    "text": "that's a lot of memory it's like no it's a lot less memory than a tab in chrome you know it's tiny 2 gigabytes",
    "start": "2799220",
    "end": "2805819"
  },
  {
    "text": "maybe I mean I worked on a small to image that was 2 megabytes back in the 80s you know it hasn't changed that much",
    "start": "2805819",
    "end": "2811450"
  },
  {
    "text": "so let's do a small talk demo and here",
    "start": "2811450",
    "end": "2817130"
  },
  {
    "text": "we go right so here is an integer",
    "start": "2817130",
    "end": "2824500"
  },
  {
    "text": "42 and maybe a bit bigger and you can send it messages like hex what is your X",
    "start": "2824500",
    "end": "2832510"
  },
  {
    "text": "well it's 2a and then I can say you know add yourself to a float view point to",
    "start": "2832510",
    "end": "2842319"
  },
  {
    "text": "when it prints out 45 so you can see that it's all very interactive the",
    "start": "2842319",
    "end": "2848059"
  },
  {
    "text": "answers actually show on the screen right next to this so I can actually use the answers so it prints the answers",
    "start": "2848059",
    "end": "2855140"
  },
  {
    "text": "right next to what you're doing so this is what you call the keyword message where you have a parameter something",
    "start": "2855140",
    "end": "2860150"
  },
  {
    "text": "like X is a as a as a you know a message with no parameters and then of course you can have binary messages and that is",
    "start": "2860150",
    "end": "2866839"
  },
  {
    "text": "it that's the entire small-tooth message passing system small talk is kind of",
    "start": "2866839",
    "end": "2874099"
  },
  {
    "text": "cool there's no surprises and small talk if I say what is 1/2 small top says it's 1/2 if I say what is 1/2 plus 1/3 it",
    "start": "2874099",
    "end": "2884839"
  },
  {
    "text": "says 5/6 ok so fractions are built in the idea is you don't don't have to know",
    "start": "2884839",
    "end": "2890329"
  },
  {
    "text": "about floating-point and you don't have to know about what the max inches I mean here's another good example if I say 42",
    "start": "2890329",
    "end": "2896869"
  },
  {
    "text": "factorial and we're going to get a over flow no I'm going to get a very large",
    "start": "2896869",
    "end": "2902180"
  },
  {
    "text": "number back so you know it doesn't the whole point it hides it's an interface",
    "start": "2902180",
    "end": "2908119"
  },
  {
    "text": "you white why should you know I want you to care what the max inches you know it's not relevant to your programming",
    "start": "2908119",
    "end": "2913460"
  },
  {
    "text": "you focus on what the bill is so everything everything is an object",
    "start": "2913460",
    "end": "2918600"
  },
  {
    "text": "now if I want to do this Lake binding thing if I say hello to 42 it will say",
    "start": "2918600",
    "end": "2925880"
  },
  {
    "text": "small integer does not understand hello right now I could say okay maybe I made",
    "start": "2925880",
    "end": "2931110"
  },
  {
    "text": "a mistake well maybe I do want to make you know so what I go is I go into the debugger and rather than saying oh I",
    "start": "2931110",
    "end": "2937890"
  },
  {
    "text": "made a mistake I'm just going to define a new method right now hello okay and",
    "start": "2937890",
    "end": "2948390"
  },
  {
    "text": "I've saved it now I'm in the debugger I just edited some code this is this Lake binding thing the code hasn't finished",
    "start": "2948390",
    "end": "2955080"
  },
  {
    "text": "executing yet so now I can carry on executing with my new method and now it works so I've actually interrupted the",
    "start": "2955080",
    "end": "2962610"
  },
  {
    "text": "code written some new code and kept going all the same time and it's actually really common in small talk to",
    "start": "2962610",
    "end": "2968550"
  },
  {
    "text": "write code in the debugger you basically might have methods it doesn't work you just type it in until it does work find",
    "start": "2968550",
    "end": "2975750"
  },
  {
    "text": "go to the next thing where it doesn't work and you keep typing so you literally can code in the debugger you don't because there's no files it's like",
    "start": "2975750",
    "end": "2982380"
  },
  {
    "text": "which file did I have to put this in I know I don't care it's not a file based system I didn't have to define you know",
    "start": "2982380",
    "end": "2988350"
  },
  {
    "text": "a new file for this particular method or anything um if I want to create a new",
    "start": "2988350",
    "end": "2994350"
  },
  {
    "text": "thing let's say I have an animal I want",
    "start": "2994350",
    "end": "2999870"
  },
  {
    "text": "to create a new animal in a in a object onto language you know you might say something like this right there's no",
    "start": "2999870",
    "end": "3007600"
  },
  {
    "text": "constructors in small talk how do you do how do you make a new object in small talk you send a methods",
    "start": "3007600",
    "end": "3013490"
  },
  {
    "text": "you mean you send a message so I have to send a message animal as a thing it's a class I send it a message if I want a",
    "start": "3013490",
    "end": "3019910"
  },
  {
    "text": "new animal I say cat and now it says I",
    "start": "3019910",
    "end": "3026660"
  },
  {
    "text": "can't all right so everything everything is an object so classes object so if I",
    "start": "3026660",
    "end": "3033020"
  },
  {
    "text": "say 42 what is your class it says I'm a small integer okay now in c-sharp and",
    "start": "3033020",
    "end": "3040850"
  },
  {
    "text": "Java classes are not the same thing you know there's no you have things like static methods there's no static methods",
    "start": "3040850",
    "end": "3046880"
  },
  {
    "text": "in Smalltalk everything is an object so the class is an object and you can talk to the class you can say hello",
    "start": "3046880",
    "end": "3051920"
  },
  {
    "text": "class what is your class and says I'm the class of small integer so that's the the",
    "start": "3051920",
    "end": "3057109"
  },
  {
    "text": "kind of static the methods you know the parent class the small integer okay hello small integer class what is your",
    "start": "3057109",
    "end": "3063140"
  },
  {
    "text": "class and class metaclass hello magic floss what is your class I'm at a class class",
    "start": "3063140",
    "end": "3070309"
  },
  {
    "text": "and so on and so forth and actually at that point you get in to leave the class of metaclass is is a squirrel skin but",
    "start": "3070309",
    "end": "3078079"
  },
  {
    "text": "the thing is that everything isn't object and I can just browse it there's a browser everywhere I can go straight",
    "start": "3078079",
    "end": "3083900"
  },
  {
    "text": "to a particular browser and now browsing metaclass if I go to a 42 class here and",
    "start": "3083900",
    "end": "3090380"
  },
  {
    "text": "I browse it and I'm looking at small integer which is a subclass of integer which is a subclass of floats which is",
    "start": "3090380",
    "end": "3096170"
  },
  {
    "text": "some type of arithmetic value and so on here's all the methods down here so this is a full IDE and at any point there's",
    "start": "3096170",
    "end": "3105650"
  },
  {
    "text": "no sir you know this is the source code there's no text file so I literally I can I can just change this code right",
    "start": "3105650",
    "end": "3111650"
  },
  {
    "text": "now and save it and you know I don't have to worry about this all the stuff gets in the way the whole thing of text files that's nothing through the",
    "start": "3111650",
    "end": "3117200"
  },
  {
    "text": "programming that's just overheads if I want to do programming and just type some stuff and it works that's programming okay so if you want object",
    "start": "3117200",
    "end": "3125450"
  },
  {
    "text": "or engine program now here's another question for you let's go to the animal class now let's",
    "start": "3125450",
    "end": "3136430"
  },
  {
    "text": "say I don't like animal I want to create a new kind of animal how do I create a new kind of animal do wage create a",
    "start": "3136430",
    "end": "3142190"
  },
  {
    "text": "class definition somewhere no I send a message to somebody everything is sending the message who do",
    "start": "3142190",
    "end": "3148190"
  },
  {
    "text": "I send a message to and I send a message to object so this actually is a message it's a message with five different",
    "start": "3148190",
    "end": "3155420"
  },
  {
    "text": "parameters so this is the name of the sub class this is what the instant variables are class variables and so on",
    "start": "3155420",
    "end": "3161049"
  },
  {
    "text": "if I send a message to object and I say actually I want to I want to send this",
    "start": "3161049",
    "end": "3166520"
  },
  {
    "text": "message sub class anymore - okay and I'm gonna do it and all of a sudden there it",
    "start": "3166520",
    "end": "3172309"
  },
  {
    "text": "is I've got a new [Music] I've got a new class right there and if",
    "start": "3172309",
    "end": "3179500"
  },
  {
    "text": "I want to add a new instance variable I just send the same message again and",
    "start": "3179500",
    "end": "3184770"
  },
  {
    "text": "then we just uh there you go so now I've got a name and an age so everything is",
    "start": "3184770",
    "end": "3191410"
  },
  {
    "text": "sending messages like I say everything is an object there's nothing which is not an object the compiler is an object the stack traces an object the entire",
    "start": "3191410",
    "end": "3198880"
  },
  {
    "text": "thing isn't object in fact if I just if I do the debugger is an object everything is an object really really is",
    "start": "3198880",
    "end": "3203890"
  },
  {
    "text": "object-oriented in the most literal sense one final thing is let's look at if true and if false I said there were",
    "start": "3203890",
    "end": "3210970"
  },
  {
    "text": "no control statements so how do I do if",
    "start": "3210970",
    "end": "3216220"
  },
  {
    "text": "true false if there's no control statements in the language well I send it a message of course that's the right",
    "start": "3216220",
    "end": "3222490"
  },
  {
    "text": "answer to everything so let's say one equals one that's going to be true and I send it a message and I say if true or",
    "start": "3222490",
    "end": "3228910"
  },
  {
    "text": "false and like this so these things this",
    "start": "3228910",
    "end": "3237970"
  },
  {
    "text": "is a message with two parameters that's the first private there's the first part of the message there's a second part message and these parameters are blocks",
    "start": "3237970",
    "end": "3244030"
  },
  {
    "text": "you can think of them almost like lambdas in in in other languages it's",
    "start": "3244030",
    "end": "3250000"
  },
  {
    "text": "basically a thing to run so if I say if I do that it says yes and if I say is 2",
    "start": "3250000",
    "end": "3255070"
  },
  {
    "text": "equal to 1 and I said you know now it lets me look let's look up the",
    "start": "3255070",
    "end": "3260340"
  },
  {
    "text": "implementation of if true if both and it",
    "start": "3260340",
    "end": "3265930"
  },
  {
    "text": "turns out there were three in from our three implementations of it whether we notice that I can I'd have to worry about you know you talk about browsing",
    "start": "3265930",
    "end": "3273640"
  },
  {
    "text": "source files and stuff and finding things in an ID small source had this",
    "start": "3273640",
    "end": "3278650"
  },
  {
    "text": "again since the 80s you just go straight to the definition straight to the references so there are three",
    "start": "3278650",
    "end": "3284560"
  },
  {
    "text": "definitions one is for boolean and the billion definition says subclass",
    "start": "3284560",
    "end": "3290500"
  },
  {
    "text": "responsibility meaning I don't care not my problem there are then other ways not it was is",
    "start": "3290500",
    "end": "3296530"
  },
  {
    "text": "there a there's a class called true and there's a class called false and they",
    "start": "3296530",
    "end": "3301960"
  },
  {
    "text": "are separate classes so the true the false class it implements this",
    "start": "3301960",
    "end": "3308000"
  },
  {
    "text": "how does it implements it it just takes the false part the lambda that sort passed in the blocks the faster and it",
    "start": "3308000",
    "end": "3313820"
  },
  {
    "text": "just runs it and if you go to the information of true it just takes the true thing that's passed in and runs it",
    "start": "3313820",
    "end": "3321400"
  },
  {
    "text": "so this is just a message like I say there is no true false statement",
    "start": "3321400",
    "end": "3328010"
  },
  {
    "text": "everything is done through messages so you don't that is why the syntax are so normal literally only three keywords and",
    "start": "3328010",
    "end": "3334390"
  },
  {
    "text": "everything behave if you have a very very powerful concept and you you really",
    "start": "3334390",
    "end": "3339440"
  },
  {
    "text": "take it to the max you can do incredible things right that is enough small talk",
    "start": "3339440",
    "end": "3345140"
  },
  {
    "text": "lets me go back to my presentation okay",
    "start": "3345140",
    "end": "3350480"
  },
  {
    "text": "so what can we learn from small talk a really really consistent model everything is an object everything is a",
    "start": "3350480",
    "end": "3356210"
  },
  {
    "text": "message you know that's it once you understand that everything is an object",
    "start": "3356210",
    "end": "3361760"
  },
  {
    "text": "and everything is a message you can you understand everything that's not oh really that's it very very minimal",
    "start": "3361760",
    "end": "3367850"
  },
  {
    "text": "syntax making the powerful language so rather than hacking around with special edge cases like we need there so we",
    "start": "3367850",
    "end": "3373640"
  },
  {
    "text": "dislike no you design it so you can do anything in the language and be awesome",
    "start": "3373640",
    "end": "3379250"
  },
  {
    "text": "the people I mean this is not a joke the people who design small talk were trying to make it awesome and they were trying",
    "start": "3379250",
    "end": "3385190"
  },
  {
    "text": "to make people fall in love with it they spend a lot of time with this kind of stuff same thing like the early people who did the Mac you know they spent a",
    "start": "3385190",
    "end": "3391910"
  },
  {
    "text": "lot of time making cute icons and stuff they really really cared about the user experience which is why people did fall",
    "start": "3391910",
    "end": "3399020"
  },
  {
    "text": "another some talking people did fall in love with the Mac it's really important this kind of stuff you know making",
    "start": "3399020",
    "end": "3404870"
  },
  {
    "text": "people fall in love is actually a very important goal all right so a small talk is a lot of people say well small",
    "start": "3404870",
    "end": "3411080"
  },
  {
    "text": "thought was cool it's kind of a dead end it's all kind of interactive thing no text files",
    "start": "3411080",
    "end": "3416330"
  },
  {
    "text": "you know it's interactive it's self-contained it doesn't talk to the outside well what kind of you know that's really a dead end for Pokemon",
    "start": "3416330",
    "end": "3422390"
  },
  {
    "text": "languages so let's talk about language X which squeak tendinitis mu9 so in the",
    "start": "3422390",
    "end": "3429560"
  },
  {
    "text": "1980s people would literally pay thousands of dollars to use this language all right",
    "start": "3429560",
    "end": "3434770"
  },
  {
    "text": "literally thousands of dollars and the descendants of this language have been incredibly",
    "start": "3434770",
    "end": "3440850"
  },
  {
    "text": "they really at the heart of the dominant software fellows okay any ideas what I'm talking about and its grandchild I would",
    "start": "3440850",
    "end": "3448380"
  },
  {
    "text": "say is the most popular programming language in the world yes the answer is",
    "start": "3448380",
    "end": "3453780"
  },
  {
    "text": "what language am I talking about I'm talking about VisiCalc okay visicalc",
    "start": "3453780",
    "end": "3458960"
  },
  {
    "text": "basically drove the PC industry people would spend $5,000 to buy an apple an",
    "start": "3458960",
    "end": "3465000"
  },
  {
    "text": "apple - so they could run this account and then VisiCalc forget Lotus 1-2-3 which is the most popular software of",
    "start": "3465000",
    "end": "3471390"
  },
  {
    "text": "the 80s and then Lotus 1-2-3 began Excel which is the most popular software of the 90s and the 2000s on this is really",
    "start": "3471390",
    "end": "3477870"
  },
  {
    "text": "incredibly powerful okay and what is so important about visicalc is it's got a",
    "start": "3477870",
    "end": "3483930"
  },
  {
    "text": "consistent model okay it's a programming language it's not just so you it's not just an application as a programming language it's got a consistent model",
    "start": "3483930",
    "end": "3490170"
  },
  {
    "text": "like Smalltalk it's got a highly interactive environment and it's got a pro language and they all fit together really nicely now if you took away the",
    "start": "3490170",
    "end": "3496200"
  },
  {
    "text": "programming language it wouldn't work the whole thing is you can program formulas there little tiny formulas but",
    "start": "3496200",
    "end": "3502470"
  },
  {
    "text": "they're still formulas it's a program language it's a very domain-specific programming language it's all about one",
    "start": "3502470",
    "end": "3508590"
  },
  {
    "text": "thing how do you work with a spreadsheet it's expression based okay everything returns every form returns and you think",
    "start": "3508590",
    "end": "3514620"
  },
  {
    "text": "it doesn't set variables and it's something that non-programmers going to understand they can understand a 1 plus B 2 ok anyone could write that it's",
    "start": "3514620",
    "end": "3522870"
  },
  {
    "text": "functional you can do these things like sum all the numbers from this to this as these functions built-in and there's you",
    "start": "3522870",
    "end": "3530010"
  },
  {
    "text": "program by filling in slots you don't think you're programming you're filling in this formula here in this formula",
    "start": "3530010",
    "end": "3535170"
  },
  {
    "text": "here there's no text files you don't have to write this text file you basically fill in all the slots and like Prolog you kind of map they magically",
    "start": "3535170",
    "end": "3541320"
  },
  {
    "text": "kind of unify this like you put this one here this one here this one gets filled in automatically so there's a lot of",
    "start": "3541320",
    "end": "3547230"
  },
  {
    "text": "things that visicalc kind of took from these other previous languages which is really you know very useful so what can",
    "start": "3547230",
    "end": "3553230"
  },
  {
    "text": "we learn from VisiCalc um programming is not just writing text files in in C like",
    "start": "3553230",
    "end": "3561150"
  },
  {
    "text": "language there's more to programming their programming is getting computer to do what you want and Excel is a phat",
    "start": "3561150",
    "end": "3567330"
  },
  {
    "text": "example there's more people using a cell than right any kind of regular programming language",
    "start": "3567330",
    "end": "3572660"
  },
  {
    "text": "so it's not just programmers people love to interact and explore okay this whole",
    "start": "3572660",
    "end": "3577680"
  },
  {
    "text": "thing of making people wait making people comprise life interactivity is really fantastic way and programming of a specific domain is",
    "start": "3577680",
    "end": "3585150"
  },
  {
    "text": "actually much more important than for a general-purpose programming okay you know Excel it isn't he trying to",
    "start": "3585150",
    "end": "3590730"
  },
  {
    "text": "write if you try to do Excel kind of stuff in a general pattern language it would be horrible the very fact is it's very specifically designed for that one",
    "start": "3590730",
    "end": "3596849"
  },
  {
    "text": "particular purpose and that was that's what's making it great so use the right tool for the job don't use a hammer",
    "start": "3596849",
    "end": "3601859"
  },
  {
    "text": "you know oh we do use a hammer if it's the right tool job but don't always use a hammer for everything so there are",
    "start": "3601859",
    "end": "3608490"
  },
  {
    "text": "many different approaches to solving problems it's a good idea to have a big tool boss okay",
    "start": "3608490",
    "end": "3613890"
  },
  {
    "text": "don't just think I know c-sharp I know Java I know JavaScript go and learn APL don't learn Prolog go alone something",
    "start": "3613890",
    "end": "3620220"
  },
  {
    "text": "you'll help your mind expand and also please see style syntax is not the only",
    "start": "3620220",
    "end": "3625920"
  },
  {
    "text": "syntax in the world I hear people say I can't read a language doesn't have curly braces okay all these languages know",
    "start": "3625920",
    "end": "3631680"
  },
  {
    "text": "these languages have curly braces they all had by the way they all had periods at the end of a sentence like proper grammar okay",
    "start": "3631680",
    "end": "3637500"
  },
  {
    "text": "small talk uses periods Prolog uses periods this whole thing of using semicolons to end a sentence you know",
    "start": "3637500",
    "end": "3643589"
  },
  {
    "text": "English teacher would be very upset with you know curly braces anywhere and no dot syntax so small talk the object in",
    "start": "3643589",
    "end": "3650069"
  },
  {
    "text": "our language doesn't have dot syntax okay it says it has messages so going",
    "start": "3650069",
    "end": "3655529"
  },
  {
    "text": "back to this quote a language that doesn't affect the way you think about program is not worth knowing so go forth",
    "start": "3655529",
    "end": "3660779"
  },
  {
    "text": "and expand your galaxy brain don't learn some new languages and have fun all",
    "start": "3660779",
    "end": "3665849"
  },
  {
    "text": "right thanks very much",
    "start": "3665849",
    "end": "3668539"
  },
  {
    "text": "and I'll put these slides are my website on for 4:40 and there's more functional programming in this room the rest of the",
    "start": "3674240",
    "end": "3680599"
  },
  {
    "text": "conference so have fun thanks very much",
    "start": "3680599",
    "end": "3684009"
  }
]