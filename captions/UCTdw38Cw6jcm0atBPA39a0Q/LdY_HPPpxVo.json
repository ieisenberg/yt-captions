[
  {
    "start": "0",
    "end": "81000"
  },
  {
    "text": "okay i guess it's three o'clock let's let's get started so welcome back",
    "start": "1120",
    "end": "6799"
  },
  {
    "text": "this is the the second part uh logically um at least um of of the two o of talks",
    "start": "6799",
    "end": "13120"
  },
  {
    "text": "um for today so you know the first one isn't the prerequisite for for the second one but",
    "start": "13120",
    "end": "19680"
  },
  {
    "text": "you know they both kind of tell tell a story so in the first one we looked at the current security best",
    "start": "19680",
    "end": "25840"
  },
  {
    "text": "practices and for this one we want to look more into the you know the future maybe",
    "start": "25840",
    "end": "33360"
  },
  {
    "text": "um to see what what else is out there um some of the new techniques uh some of",
    "start": "33360",
    "end": "38960"
  },
  {
    "text": "the coming soon techniques to to make oauth more more secure okay so this time i'm i'm",
    "start": "38960",
    "end": "45760"
  },
  {
    "text": "better prepared actually um the the slide decks is already uploaded to to speakerdeck.com",
    "start": "45760",
    "end": "53520"
  },
  {
    "text": "privilege i just posted a link to the slack channel as well so you can get both slide decks right",
    "start": "53520",
    "end": "59120"
  },
  {
    "text": "now um oh yeah and if you have any questions you know at the end um",
    "start": "59120",
    "end": "64960"
  },
  {
    "text": "i'm you know i'm we can do a q a with audio and video if you want to or just audio",
    "start": "64960",
    "end": "70240"
  },
  {
    "text": "um or if you have any questions you want to cue at some point just put them into the",
    "start": "70240",
    "end": "75520"
  },
  {
    "text": "slack channel and i will i will get to them okay cool so um for those who haven't",
    "start": "75520",
    "end": "81520"
  },
  {
    "start": "81000",
    "end": "81000"
  },
  {
    "text": "been um present for the first part this uh this this this talk and the material and so",
    "start": "81520",
    "end": "88960"
  },
  {
    "text": "on is all part of a um a bigger effort around uh um",
    "start": "88960",
    "end": "94079"
  },
  {
    "text": "you know like a high security over profile so multiple industries have started taking",
    "start": "94079",
    "end": "99840"
  },
  {
    "text": "the original oauth and added additional specs to it additional you know constraints or",
    "start": "99840",
    "end": "105840"
  },
  {
    "text": "um profiles as they call them to make it more secure for you know for for certain situations so one is the",
    "start": "105840",
    "end": "113759"
  },
  {
    "text": "most common or the most popular one definitely is the um the financial space uh psd2 the payment",
    "start": "113759",
    "end": "119520"
  },
  {
    "text": "service directive too uh is based on on oauth and openly connect for doing um you know",
    "start": "119520",
    "end": "125439"
  },
  {
    "text": "um payment uh initiation and and things like that so the the frp working group at the open",
    "start": "125439",
    "end": "132720"
  },
  {
    "text": "muddy foundation um created uh a more secure profile for oauth and old money connect",
    "start": "132720",
    "end": "139760"
  },
  {
    "text": "now i am myself involved in a similar work for the norwegian health net um same idea right that we",
    "start": "139760",
    "end": "147360"
  },
  {
    "text": "are applying over an operating connect for the health care sector and certain requirements",
    "start": "147360",
    "end": "154319"
  },
  {
    "text": "because we need more security than what you can find in the plane specs um and similar things are",
    "start": "154319",
    "end": "160400"
  },
  {
    "text": "happening in the states with the enterprise mission tailored off profile so yeah so um",
    "start": "160400",
    "end": "166080"
  },
  {
    "text": "hopefully we will be able to converge them um there is some work going on in this thing called sap2 which",
    "start": "166080",
    "end": "172480"
  },
  {
    "text": "will be more like a general purpose high security over thing not tailored specifically to the",
    "start": "172480",
    "end": "178560"
  },
  {
    "text": "financial api market um but yeah but you know the the ideas are all the same and um",
    "start": "178560",
    "end": "186640"
  },
  {
    "text": "i'm gonna show you a couple of those things now okay so that is but you know these two talks",
    "start": "186640",
    "end": "193440"
  },
  {
    "text": "i did are basically excerpts of of uh of a full day training i'm doing right now um but",
    "start": "193440",
    "end": "198959"
  },
  {
    "text": "obviously that's too much content yeah so basically um i'm i basically took that that um that",
    "start": "198959",
    "end": "204879"
  },
  {
    "text": "training material and turn it into a little bit more like a 60 minute chunk i guess so um we're gonna start with",
    "start": "204879",
    "end": "212319"
  },
  {
    "text": "basically what's the difference between over 2.0 and 2.1 and then we're gonna look at the next",
    "start": "212319",
    "end": "217760"
  },
  {
    "text": "steps uh basically the three big things i guess that are actionable today um is improving front channel",
    "start": "217760",
    "end": "226000"
  },
  {
    "text": "security improving back channel security and approved possession access tokens okay so in my first talk",
    "start": "226000",
    "end": "233439"
  },
  {
    "start": "233000",
    "end": "233000"
  },
  {
    "text": "this morning i looked at the various what they call bcps best current practices",
    "start": "233439",
    "end": "238560"
  },
  {
    "text": "and there are a couple of them out there you know the threat model uh json web token bcp web apps",
    "start": "238560",
    "end": "244959"
  },
  {
    "text": "native apps and so on so the question is now what is o of 2.1",
    "start": "244959",
    "end": "251040"
  },
  {
    "text": "so basically you can think of of 2.1 as basically all of these documents together um",
    "start": "251040",
    "end": "258400"
  },
  {
    "text": "become one new baseline of specification called o of 2.1",
    "start": "258400",
    "end": "265680"
  },
  {
    "start": "259000",
    "end": "259000"
  },
  {
    "text": "and i mentioned these things earlier but i want to basically point out the most important changes between",
    "start": "265680",
    "end": "272560"
  },
  {
    "text": "2.0 and 2.1 and that is that the implicit grant is gone the password grant",
    "start": "272560",
    "end": "278000"
  },
  {
    "text": "is gone when you're using authorization code grant you must use pixi to protect yourself against code",
    "start": "278000",
    "end": "283919"
  },
  {
    "text": "injection and cross-site request forgery and other types of leakage attacks of the authorization code",
    "start": "283919",
    "end": "291280"
  },
  {
    "text": "there are strict requirements for how to validate the redirect uris we've seen many attacks around",
    "start": "291280",
    "end": "296800"
  },
  {
    "text": "redirect uri validation or flawed validation rather so redirect your eyes must be compared",
    "start": "296800",
    "end": "303039"
  },
  {
    "text": "as exact strings no no you know variables or you know",
    "start": "303039",
    "end": "311039"
  },
  {
    "text": "uh regular expressions things like that which which you know it's very hard to validate urls um",
    "start": "311039",
    "end": "317759"
  },
  {
    "text": "refresh tokens um we basically you know since the since the implicit crime",
    "start": "317759",
    "end": "325280"
  },
  {
    "text": "is gone um there are actually public clients that can legally from a",
    "start": "325280",
    "end": "331039"
  },
  {
    "text": "protocol point of view use refresh tokens i mean that is uh there are certain risks attached to that",
    "start": "331039",
    "end": "338720"
  },
  {
    "text": "so um there's a pretty simple statement here if you are a confidential client",
    "start": "338720",
    "end": "344000"
  },
  {
    "text": "you must use a client secret to send a constrained refresh tokens if you are a public line and want to use",
    "start": "344000",
    "end": "349520"
  },
  {
    "text": "them then you should use refresh token rotation meaning you should only use the refresh token once",
    "start": "349520",
    "end": "355199"
  },
  {
    "text": "and then the next time you get a new refresh token this allows you to detect replay attacks",
    "start": "355199",
    "end": "360720"
  },
  {
    "text": "and this also allows you to act on these replay attacks by for example revoking the refresh token automatically",
    "start": "360720",
    "end": "366800"
  },
  {
    "text": "if you think that is uh malicious right and the last thing is a it's a small one but basically uh oauth",
    "start": "366800",
    "end": "373680"
  },
  {
    "text": "or rather rfc 6750 allowed um to send better tokens over a query",
    "start": "373680",
    "end": "380000"
  },
  {
    "text": "string that is not allowed anymore you must either use the authorization header",
    "start": "380000",
    "end": "385758"
  },
  {
    "text": "and or the post body okay so that's our starting point and",
    "start": "386319",
    "end": "391919"
  },
  {
    "text": "now we want to look at additional specifications that sit on top of ovals um to improve the security so the first",
    "start": "391919",
    "end": "398960"
  },
  {
    "text": "part the first complex will be around front channel um improvement so you know uh basically a",
    "start": "398960",
    "end": "406400"
  },
  {
    "text": "typical overall overflow for an interactive application consists of two channels one we call the front channel which is",
    "start": "406400",
    "end": "412720"
  },
  {
    "text": "over the browser yeah where the the interactive ui happens and then this",
    "start": "412720",
    "end": "418160"
  },
  {
    "text": "returns an authorization code and then the back channel takes over where the client opens a back channel",
    "start": "418160",
    "end": "423440"
  },
  {
    "text": "communication to turn that code into tokens so it turns out um the front channel is the most vulnerable one",
    "start": "423440",
    "end": "430720"
  },
  {
    "text": "because it happens in the browser it happens on the user's machine right and um",
    "start": "430720",
    "end": "436720"
  },
  {
    "text": "that's why you know like modifying urls or even you know leaking data from there is is a",
    "start": "436720",
    "end": "442960"
  },
  {
    "text": "concern okay um so let me introduce you to raja and par yeah which i not a reggae band",
    "start": "442960",
    "end": "450880"
  },
  {
    "text": "or something that there are three three independent specs that uh target in hardening the front channel",
    "start": "450880",
    "end": "458560"
  },
  {
    "text": "in oauth so let's start with raw so um",
    "start": "458560",
    "end": "465840"
  },
  {
    "start": "462000",
    "end": "462000"
  },
  {
    "text": "ra stands for rich authorization requests and um the reason it exists is that more and",
    "start": "465840",
    "end": "471759"
  },
  {
    "text": "more o of uh protocols or specifications um have the",
    "start": "471759",
    "end": "479280"
  },
  {
    "text": "need of um transmitting structured data from the client to the authorization",
    "start": "479280",
    "end": "486879"
  },
  {
    "text": "server for example in the in the banking industry where you know like you wanna make the user consent to a banking",
    "start": "486879",
    "end": "494400"
  },
  {
    "text": "transaction like basically uh do you allow sending 50 euros to the pizza show",
    "start": "494400",
    "end": "500080"
  },
  {
    "text": "things like that um this is around transaction ids or um there's another speck in the",
    "start": "500080",
    "end": "505520"
  },
  {
    "text": "healthcare world which is called smart on fire that for example says do you want to allow this client to reach the",
    "start": "505520",
    "end": "511919"
  },
  {
    "text": "the electronic health record of patient five okay but only patient five even if",
    "start": "511919",
    "end": "517599"
  },
  {
    "text": "the user the doctor has access to more patients we want to only allow that client to get",
    "start": "517599",
    "end": "522880"
  },
  {
    "text": "access to this single single patient right and um since oauth itself does not have a",
    "start": "522880",
    "end": "529120"
  },
  {
    "text": "concept of structured scopes many people just came up with their own little format yeah for",
    "start": "529120",
    "end": "535600"
  },
  {
    "text": "example here um something like uh scope colon parameter right transaction colon id or",
    "start": "535600",
    "end": "542800"
  },
  {
    "text": "patient colon something okay so um this is you know i mean the the original of spec",
    "start": "542800",
    "end": "550160"
  },
  {
    "text": "does not mandate any format here but you know most implementations just say okay",
    "start": "550160",
    "end": "555519"
  },
  {
    "text": "there were some scopes and there is no no features built in for um",
    "start": "555519",
    "end": "563040"
  },
  {
    "text": "for parameterizing those scopes yeah so i can show you for example um in the latest version of identity server",
    "start": "563040",
    "end": "569760"
  },
  {
    "text": "how how we implemented this requirement right so basically here is um a scope called",
    "start": "569760",
    "end": "575680"
  },
  {
    "text": "transaction and now um the idea is that a client can now basically ask for a scope called",
    "start": "575680",
    "end": "581920"
  },
  {
    "text": "transaction colon one two three this scope does is not registered right you're the only thing",
    "start": "581920",
    "end": "587600"
  },
  {
    "text": "you want to register with that scope is the the base name and then at run time",
    "start": "587600",
    "end": "592720"
  },
  {
    "text": "that thing that comes after the dot should become the you know the variable part if you like",
    "start": "592720",
    "end": "599040"
  },
  {
    "text": "so um we have introduced a new feature in identity server for example that is called um a resource validator",
    "start": "599040",
    "end": "606240"
  },
  {
    "text": "and here you can basically at runtime look at the scope values and see is does the scope have a format that you",
    "start": "606240",
    "end": "613760"
  },
  {
    "text": "know right then it allows you basically to pass that scope name and then you know",
    "start": "613760",
    "end": "621440"
  },
  {
    "text": "take it apart basically that's the name of the scope and that is the variable part and then you have the variable",
    "start": "621440",
    "end": "627440"
  },
  {
    "text": "available to the rest of the pipeline okay so um actually let's um",
    "start": "627440",
    "end": "634160"
  },
  {
    "text": "let's run this and then um when you have a client then that asks",
    "start": "634160",
    "end": "639519"
  },
  {
    "text": "for such a scope um let's see here",
    "start": "639519",
    "end": "644839"
  },
  {
    "text": "um so he has a client that asks for a scope transaction colon one two three then basically at runtime",
    "start": "644839",
    "end": "651920"
  },
  {
    "text": "we know okay the scope is actually transaction but there's a variable part to that yeah um and then you can basically you know",
    "start": "651920",
    "end": "659040"
  },
  {
    "text": "cram such a scope or even derive other claims from that scope um but to be honest with you that is",
    "start": "659040",
    "end": "665040"
  },
  {
    "text": "really just a workaround for the fact that oauth itself does not have the concept",
    "start": "665040",
    "end": "670959"
  },
  {
    "text": "of uh structured scopes right i mean this works for many situations but",
    "start": "670959",
    "end": "677200"
  },
  {
    "text": "[Music] it's not what rich authorization requests are they go",
    "start": "677200",
    "end": "683200"
  },
  {
    "text": "much further so rich authorization requests introduce a new parameter called authorization detail",
    "start": "683200",
    "end": "689760"
  },
  {
    "text": "um and and that replaces the scope parameter right so maybe you want to say like allow the",
    "start": "689760",
    "end": "695519"
  },
  {
    "text": "client to make a payment of 45 euros or allow the client to read a folder and write a file things like that yeah um",
    "start": "695519",
    "end": "702560"
  },
  {
    "text": "instead of coming up now with your own arbitrary complex structured scope string",
    "start": "702560",
    "end": "708000"
  },
  {
    "text": "um the rich authorization requests goes basically further in the way of that basically you are sending a structure",
    "start": "708000",
    "end": "714800"
  },
  {
    "text": "structured object along with the authorized request which has a schema",
    "start": "714800",
    "end": "719839"
  },
  {
    "text": "so it's strongly typed yeah it has the concept of the data type you want to access and",
    "start": "719839",
    "end": "727680"
  },
  {
    "text": "maybe even an identifier for a specific data type right so maybe",
    "start": "727680",
    "end": "733040"
  },
  {
    "text": "you want to say like hey allow this uh company to print picture number one but only number one",
    "start": "733040",
    "end": "739440"
  },
  {
    "text": "they should not be able to access picture two three and five on your google drive or whatever",
    "start": "739440",
    "end": "745680"
  },
  {
    "text": "um and as i said instead of like coming up with your own custom data format they are basically saying yeah just use",
    "start": "745680",
    "end": "752560"
  },
  {
    "text": "a an object so we can describe this uh properly right um that is um",
    "start": "752560",
    "end": "760160"
  },
  {
    "start": "760000",
    "end": "760000"
  },
  {
    "text": "another example yeah of another schema which is basically modeling file system",
    "start": "760160",
    "end": "765839"
  },
  {
    "text": "permissions right so you know like have read access to this style have right access to this file for example and then the idea is as i",
    "start": "765839",
    "end": "772800"
  },
  {
    "text": "said that this this thing um replaces the scope parameter and basically can be",
    "start": "772800",
    "end": "779519"
  },
  {
    "start": "778000",
    "end": "778000"
  },
  {
    "text": "used wherever else you would use the scope parameter okay so for example that is an example of the authorized request",
    "start": "779519",
    "end": "786000"
  },
  {
    "text": "you know you have your normal parameters here like response type and and so on and then you have this thing called",
    "start": "786000",
    "end": "791680"
  },
  {
    "text": "authorization details here and that is the encoded json object that is the structured",
    "start": "791680",
    "end": "798160"
  },
  {
    "text": "scope okay and that obviously gives you far more expressiveness than you know like having",
    "start": "798160",
    "end": "803920"
  },
  {
    "text": "a little string that now you know becomes uh ultimately complex",
    "start": "803920",
    "end": "809839"
  },
  {
    "text": "um also by introducing a schema this allows authorization servers to look at",
    "start": "809839",
    "end": "815279"
  },
  {
    "text": "the schema and then present a consent screen that is optimized for that situation",
    "start": "815279",
    "end": "820720"
  },
  {
    "text": "instead of trying to come up with a general consent screen that can show all kinds of different things you can say oh that's a payment uh",
    "start": "820720",
    "end": "828079"
  },
  {
    "text": "initiation let's show them a consent screen that like it says okay who is the initiator what's the target account you know",
    "start": "828079",
    "end": "833760"
  },
  {
    "text": "what's the amount what's the currency you know all these things basically okay and then",
    "start": "833760",
    "end": "839120"
  },
  {
    "text": "if the you know um and same as the scopes if the user consents uh or um um",
    "start": "839120",
    "end": "846240"
  },
  {
    "text": "it is the decline is allowed to ask for that uh scope of access uh authorization",
    "start": "846240",
    "end": "852320"
  },
  {
    "text": "detail will get embedded into the access token this access token will flow to the api",
    "start": "852320",
    "end": "859120"
  },
  {
    "text": "and the api can then say okay this you know in this case subject id one two three",
    "start": "859120",
    "end": "865120"
  },
  {
    "text": "authorized client four five six to transfer 45 euros from bank account a to bank",
    "start": "865120",
    "end": "871360"
  },
  {
    "text": "account b okay so so that's rich authorization requests",
    "start": "871360",
    "end": "877440"
  },
  {
    "text": "now you might uh ask yourself huh um this probably is a it is a bit of a",
    "start": "877440",
    "end": "884560"
  },
  {
    "text": "sensitive string right i mean uh if you could modify that string you could change maybe bank account",
    "start": "884560",
    "end": "889760"
  },
  {
    "text": "numbers and and amounts and so on and maybe there is no consent or consent did the",
    "start": "889760",
    "end": "895760"
  },
  {
    "text": "user you know consents by accident things like that so it would be nice to be able to",
    "start": "895760",
    "end": "902000"
  },
  {
    "text": "protect the data i mean generally speaking it would be nice in oauth that to protect the whole authorization request",
    "start": "902000",
    "end": "908480"
  },
  {
    "text": "right um because as i said there is potential for for misuse here and that is another spec",
    "start": "908480",
    "end": "915279"
  },
  {
    "start": "915000",
    "end": "915000"
  },
  {
    "text": "that is uh almost done it's like in the last stages of being finalized it's called the shot secured",
    "start": "915279",
    "end": "922399"
  },
  {
    "text": "authorization requests spec or char as many say and the idea is",
    "start": "922399",
    "end": "927440"
  },
  {
    "text": "really um as i just said um instead of passing unprotected query string claim you know",
    "start": "927440",
    "end": "934320"
  },
  {
    "text": "a name value pairs over the authorized request you sign the query string okay and and",
    "start": "934320",
    "end": "941440"
  },
  {
    "text": "the easiest way to sign a piece of data these days is basically by wrapping it into a json object",
    "start": "941440",
    "end": "946639"
  },
  {
    "text": "signing that json object and that is called a json web token yeah which means an attacker could not",
    "start": "946639",
    "end": "954959"
  },
  {
    "text": "change the values of the parameters after the after the the chart has been created you can",
    "start": "954959",
    "end": "961680"
  },
  {
    "text": "which is pretty cool uh authenticate the client already on the front channel and don't have to wait",
    "start": "961680",
    "end": "967680"
  },
  {
    "text": "until the back channel um and if you know if confidentiality is",
    "start": "967680",
    "end": "972800"
  },
  {
    "text": "is a thing then you can also encrypt these tokens if you want and then you know um basically uh avoid a whole class of",
    "start": "972800",
    "end": "980079"
  },
  {
    "text": "attacks that deal with leaking data rewriting urls or mixed up",
    "start": "980079",
    "end": "985920"
  },
  {
    "text": "attacks things like this so the way this works is basically imagine that is your your",
    "start": "985920",
    "end": "993600"
  },
  {
    "text": "your authorization request and then basically instead of transmitting this to the token service",
    "start": "993600",
    "end": "999279"
  },
  {
    "text": "you are transmitting this okay so the only two parameters that are",
    "start": "999279",
    "end": "1004639"
  },
  {
    "text": "left here is the client id which is mandatory still and then everything else is replaced",
    "start": "1004639",
    "end": "1010959"
  },
  {
    "text": "with this parameter called request and this here is a json web token okay so if we look inside the json web token",
    "start": "1010959",
    "end": "1017120"
  },
  {
    "text": "you see that's how it looks like it basically has the the things that used to be on the",
    "start": "1017120",
    "end": "1024400"
  },
  {
    "text": "query string has is now key value pairs inside the json web token and that is pretty",
    "start": "1024400",
    "end": "1031038"
  },
  {
    "text": "cool yeah as i said it's it's not hard to implement this it it gives you nice security properties",
    "start": "1031039",
    "end": "1039199"
  },
  {
    "text": "here and again if you want to see an example of how that's implemented so in identity server you know all you need to do basically is",
    "start": "1039199",
    "end": "1045438"
  },
  {
    "start": "1043000",
    "end": "1043000"
  },
  {
    "text": "you associate um an asymmetric key with the with the client",
    "start": "1045439",
    "end": "1050799"
  },
  {
    "text": "and we'll see later on when we talk about client authentication that the same key can be reused also for the back channel",
    "start": "1050799",
    "end": "1056480"
  },
  {
    "text": "authentication bit and then um that's it right so once you have that key associated",
    "start": "1056480",
    "end": "1062720"
  },
  {
    "text": "the uh in this case identity server is able to validate the incoming job token turn it",
    "start": "1062720",
    "end": "1068960"
  },
  {
    "text": "back into you know an authorized request and just use it and if you even want to force the client",
    "start": "1068960",
    "end": "1075600"
  },
  {
    "text": "to use this new technique because it's more secure then you can say require request object",
    "start": "1075600",
    "end": "1081679"
  },
  {
    "text": "and then for this particular client identifier will not accept anymore",
    "start": "1081679",
    "end": "1087120"
  },
  {
    "text": "uh and not a non-signed authorized request okay so i can show",
    "start": "1087120",
    "end": "1093200"
  },
  {
    "text": "you that uh basically um",
    "start": "1093200",
    "end": "1098480"
  },
  {
    "text": "uh that is running already so here's the config um let's have a look at my um",
    "start": "1098559",
    "end": "1106080"
  },
  {
    "text": "char client it's here that's pretty much what you just saw on the slides here's that client here's the json web",
    "start": "1106080",
    "end": "1112400"
  },
  {
    "text": "key that is an rsa um public key i require the usage of",
    "start": "1112400",
    "end": "1118160"
  },
  {
    "text": "signatures and the rest is just you know normal normal business",
    "start": "1118160",
    "end": "1123840"
  },
  {
    "text": "and when i run this here's an mvc client",
    "start": "1123840",
    "end": "1130399"
  },
  {
    "text": "and when i add you know open the network trace and say you know login you can see that",
    "start": "1131840",
    "end": "1139200"
  },
  {
    "text": "basically here's my authorized request going from the mbc client to the server and you can see that",
    "start": "1139200",
    "end": "1145120"
  },
  {
    "text": "basically all parameters have been replaced by this one request",
    "start": "1145120",
    "end": "1150480"
  },
  {
    "text": "parameter the only parameter that is present is the client id and and that's an unfortunate uh",
    "start": "1150480",
    "end": "1157919"
  },
  {
    "text": "problem in nbc i cannot remove the redirect uri because mvc needs that internally um but",
    "start": "1157919",
    "end": "1164480"
  },
  {
    "text": "it's being ignored because everything that's inside the chart takes precedence over what's outside the chart and since the redirect",
    "start": "1164480",
    "end": "1171360"
  },
  {
    "text": "uri is inside the chart it will be overwritten basically by um",
    "start": "1171360",
    "end": "1176559"
  },
  {
    "text": "you know or even to be honest even if there would be a mismatch between the two what's inside what's outside",
    "start": "1176559",
    "end": "1183360"
  },
  {
    "text": "in the case of identity server we would actually throw an exception okay so that's cool um that makes your",
    "start": "1183360",
    "end": "1190160"
  },
  {
    "text": "authorized request much more secure so i can log in just as normal you know everything else stays the same",
    "start": "1190160",
    "end": "1197440"
  },
  {
    "text": "um if you are interested in how that works in asp.net core it's actually pretty cool that it's",
    "start": "1197440",
    "end": "1202880"
  },
  {
    "text": "possible to do that without microsoft you know when they created the",
    "start": "1202880",
    "end": "1208080"
  },
  {
    "text": "feature didn't know about that this will be a thing some someday yeah um so um let's",
    "start": "1208080",
    "end": "1215840"
  },
  {
    "text": "get rid of that um you basically see that you can in the openly connect hand like an expert core you can plug in into",
    "start": "1215840",
    "end": "1222400"
  },
  {
    "text": "the various events that are getting emitted yeah and the one that we are particularly interested in",
    "start": "1222400",
    "end": "1227840"
  },
  {
    "text": "is the event that gets fired before we go to the authorization",
    "start": "1227840",
    "end": "1234799"
  },
  {
    "text": "server yeah and when we go to our dc events thing you can see that there's an event called",
    "start": "1234799",
    "end": "1240640"
  },
  {
    "text": "redirect to identity provider and then you see what i'm basically doing is i'm taking the protocol message",
    "start": "1240640",
    "end": "1247039"
  },
  {
    "text": "from the context i'm signing it that's what this is doing that gives me this json that object",
    "start": "1247039",
    "end": "1252400"
  },
  {
    "text": "json web token that contains the parameters then i'm removing all the parameters",
    "start": "1252400",
    "end": "1258960"
  },
  {
    "text": "from the request i i set back client id i have to set back redirect uri and i'm",
    "start": "1258960",
    "end": "1264320"
  },
  {
    "text": "adding the rest as this additional parameter and that's that's all you have to do and then",
    "start": "1264320",
    "end": "1269840"
  },
  {
    "text": "you're running on signed authorized requests which is pretty cool okay",
    "start": "1269840",
    "end": "1277360"
  },
  {
    "text": "so that's char um one concern with char right so one leads",
    "start": "1277360",
    "end": "1283919"
  },
  {
    "text": "to the other if we have a look back here is is that this becomes a pretty long",
    "start": "1283919",
    "end": "1289039"
  },
  {
    "text": "url okay so if you imagine now your char contains a raw right the authorization details",
    "start": "1289039",
    "end": "1296080"
  },
  {
    "text": "this json web token will get bigger and bigger and this might be a problem for certain browsers",
    "start": "1296080",
    "end": "1301120"
  },
  {
    "text": "especially on mobile devices and um might be also a performance thing",
    "start": "1301120",
    "end": "1307919"
  },
  {
    "text": "uh maybe the client does not have the crypto libraries to create that json web token i mean in",
    "start": "1307919",
    "end": "1315600"
  },
  {
    "text": "the dot net space it's all pretty easy but what in other you know places",
    "start": "1315600",
    "end": "1320640"
  },
  {
    "text": "um so the next spec think of it as a a complementary",
    "start": "1320640",
    "end": "1328080"
  },
  {
    "start": "1324000",
    "end": "1324000"
  },
  {
    "text": "spec on top of char is called power which is stands for pushed authorization requests and the idea is",
    "start": "1328080",
    "end": "1334960"
  },
  {
    "text": "is that instead that the client creates the shot and sends it over the the front channel basically what the",
    "start": "1334960",
    "end": "1342799"
  },
  {
    "text": "client is doing it first opens the back channel communication and pushes all those parameters what it wants to use over a back channel",
    "start": "1342799",
    "end": "1349600"
  },
  {
    "text": "um back channel which means a we can authenticate the client again even before they open the front channel",
    "start": "1349600",
    "end": "1357039"
  },
  {
    "text": "yeah and basically and and you'll see what happens here is is that what the client is doing it",
    "start": "1357039",
    "end": "1362960"
  },
  {
    "start": "1362000",
    "end": "1362000"
  },
  {
    "text": "pushes all those parameters and then the authorization will store these parameters for the client for a",
    "start": "1362960",
    "end": "1369760"
  },
  {
    "text": "limited amount of time and it will return back to the client a reference",
    "start": "1369760",
    "end": "1375360"
  },
  {
    "text": "to these pushed parameters which they call a request uri and you see that they say lucky and this",
    "start": "1375360",
    "end": "1381360"
  },
  {
    "text": "will be valid for for 90 seconds so that's basically before even the client opens the front channel it first",
    "start": "1381360",
    "end": "1387679"
  },
  {
    "text": "does the back channel communication and if it's a confidential client we can combine that with client",
    "start": "1387679",
    "end": "1394640"
  },
  {
    "text": "authentication right you could even also push a request object basically not just plain text variables",
    "start": "1394640",
    "end": "1400960"
  },
  {
    "text": "but a json web token for example if you need a signature for more regulation purposes in banking for",
    "start": "1400960",
    "end": "1406799"
  },
  {
    "text": "example or healthcare and then when the client has this thing back all the client needs to transmit",
    "start": "1406799",
    "end": "1413120"
  },
  {
    "text": "over the front channel is pretty much only the client id and this new parameter called request",
    "start": "1413120",
    "end": "1419520"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "uri which then points to this uh previously pushed authorization",
    "start": "1419520",
    "end": "1426159"
  },
  {
    "text": "parameters and that's pretty neat i think right because that makes the url super short",
    "start": "1426159",
    "end": "1431919"
  },
  {
    "text": "there's nothing anymore that can be manipulated this is a random thing with a lot of entropy that no one can",
    "start": "1431919",
    "end": "1437760"
  },
  {
    "text": "play around with um and you know that is um",
    "start": "1437760",
    "end": "1444080"
  },
  {
    "text": "probably even easier to implement than creating the json that token on the on the client side okay",
    "start": "1444080",
    "end": "1452240"
  },
  {
    "text": "so that is uh from my point of view the free the free big um",
    "start": "1452240",
    "end": "1460159"
  },
  {
    "text": "the three big uh new things coming um for for the front channel um",
    "start": "1460159",
    "end": "1467600"
  },
  {
    "text": "rich authorization requests will take a while until this will be finalized that's a pretty new spec uh char",
    "start": "1467600",
    "end": "1474880"
  },
  {
    "text": "the the json web token authorization requests they um that one is pretty much done",
    "start": "1474880",
    "end": "1481520"
  },
  {
    "text": "and par is so simple as a spec basically the the authorization server",
    "start": "1481520",
    "end": "1487120"
  },
  {
    "text": "creates this endpoint to receive parameters gives back a an identifier i'm expecting this to be",
    "start": "1487120",
    "end": "1493840"
  },
  {
    "text": "uh available as a finalized spec pretty soon it's definitely something we are working on for the the",
    "start": "1493840",
    "end": "1500400"
  },
  {
    "text": "next version of identity server okay so just to summarize that ra is a",
    "start": "1500400",
    "end": "1507279"
  },
  {
    "text": "replacement for the scope parameter char allows for signed and authenticated",
    "start": "1507279",
    "end": "1512480"
  },
  {
    "text": "authorization requests and if if needed encrypted also another thing i didn't mention explicitly is",
    "start": "1512480",
    "end": "1519200"
  },
  {
    "text": "if using the char approach you can also transmit additional data over the front channel",
    "start": "1519200",
    "end": "1524559"
  },
  {
    "text": "and since it's in that signed json web token that data becomes trusted from an authorization server",
    "start": "1524559",
    "end": "1530159"
  },
  {
    "text": "point of view and that might be interesting if the client has to transmit additional data and power really is a refinement of char",
    "start": "1530159",
    "end": "1538559"
  },
  {
    "text": "if you like which provides a dedicated endpoint to push the authorization request data up front",
    "start": "1538559",
    "end": "1544400"
  },
  {
    "text": "and then it can be used over the front channel okay so that's that's the the front",
    "start": "1544400",
    "end": "1551279"
  },
  {
    "text": "channel improvement if you like um the back channel is basically then",
    "start": "1551279",
    "end": "1557760"
  },
  {
    "text": "uh the thing that takes over once the authorization code has been transmitted",
    "start": "1557760",
    "end": "1562799"
  },
  {
    "text": "um back to the client or if you are in a in a non-interactive flow like client",
    "start": "1562799",
    "end": "1568480"
  },
  {
    "text": "credentials for example whenever the client basically wants to um request a token right so",
    "start": "1568480",
    "end": "1575919"
  },
  {
    "text": "um if it's a confidential client yeah which you know for most cases it is",
    "start": "1575919",
    "end": "1583200"
  },
  {
    "start": "1576000",
    "end": "1576000"
  },
  {
    "text": "the client has to authenticate with the authorization server and the most prevalent",
    "start": "1583200",
    "end": "1588720"
  },
  {
    "text": "authentication method these days is shared secrets basically right i mean i i mentioned it this morning it",
    "start": "1588720",
    "end": "1595919"
  },
  {
    "text": "is easy to get started with right you just have a string you share that string and yeah it's work it's working yeah um",
    "start": "1595919",
    "end": "1602880"
  },
  {
    "text": "for everyone who deployed his authentication method at a larger scale knows that there are some challenges right i mean",
    "start": "1602880",
    "end": "1608640"
  },
  {
    "text": "you need to store them somewhere on the server side you want to store them hash on the client side you need",
    "start": "1608640",
    "end": "1615039"
  },
  {
    "text": "them back in its original form so you can't hash them uh the configuration system must",
    "start": "1615039",
    "end": "1620480"
  },
  {
    "text": "distribute these things somehow securely um",
    "start": "1620480",
    "end": "1626559"
  },
  {
    "text": "and um yeah so long story short shared secrets are a",
    "start": "1626559",
    "end": "1633440"
  },
  {
    "text": "bit of a pain because also you know how good is the secret when it's shared",
    "start": "1633440",
    "end": "1638960"
  },
  {
    "text": "generally speaking the recommendation is to get get away from shared secrets um also you know like one one thing that",
    "start": "1638960",
    "end": "1645520"
  },
  {
    "text": "is a big concern is that share secrets are getting transmitted over the network yeah so um you know i just had a customer last",
    "start": "1645520",
    "end": "1652240"
  },
  {
    "text": "week where you know they have deployed software in in the company or a hospital in their",
    "start": "1652240",
    "end": "1657919"
  },
  {
    "text": "case and the the services they want to access are in the cloud right so even if they can",
    "start": "1657919",
    "end": "1664799"
  },
  {
    "text": "protect those secrets effectively on the machines because they control the hardware",
    "start": "1664799",
    "end": "1669919"
  },
  {
    "text": "and the the secrets travel over the network right and um since they are not controlling the",
    "start": "1669919",
    "end": "1675200"
  },
  {
    "text": "network infrastructure they are you know they go over reverse proxies and so on um you know that those secrets are",
    "start": "1675200",
    "end": "1681279"
  },
  {
    "text": "exposed yeah it would be nice to have something uh more robust and that basically is",
    "start": "1681279",
    "end": "1687679"
  },
  {
    "start": "1687000",
    "end": "1687000"
  },
  {
    "text": "secrets based on asymmetric keys okay so the idea is simple instead of having a",
    "start": "1687679",
    "end": "1693760"
  },
  {
    "text": "shared secret or a symmetric key yeah on both ends um the the authorization",
    "start": "1693760",
    "end": "1699760"
  },
  {
    "text": "tab only has the public key the the client has the private key which also means um the authorization",
    "start": "1699760",
    "end": "1706880"
  },
  {
    "text": "server does not have to store that secret in any special protection mode right",
    "start": "1706880",
    "end": "1713039"
  },
  {
    "text": "because it's not a secret it's a public key um the client yes the client needs to",
    "start": "1713039",
    "end": "1718240"
  },
  {
    "text": "store that secret securely there's no way around that regardless how you do it yeah um and then because",
    "start": "1718240",
    "end": "1726159"
  },
  {
    "text": "you can then prove knowledge of that private key by using a signature instead of",
    "start": "1726159",
    "end": "1733600"
  },
  {
    "text": "transmitting the key itself that secret is never exposed over the wire so the whole",
    "start": "1733600",
    "end": "1739279"
  },
  {
    "text": "network leakage eavesdropping thing concern is um is is not existing",
    "start": "1739279",
    "end": "1746000"
  },
  {
    "text": "um there are two ways of of you know leveraging well there are many ways but",
    "start": "1746000",
    "end": "1751520"
  },
  {
    "text": "there are two official ways of of leveraging um asymmetric keys",
    "start": "1751520",
    "end": "1756799"
  },
  {
    "text": "for for client authentication um one is called private key chart and",
    "start": "1756799",
    "end": "1761840"
  },
  {
    "text": "it's more like an application level solution where you are writing explicitly code to to to sign something and then use",
    "start": "1761840",
    "end": "1769200"
  },
  {
    "text": "that as an authentic authenticator um the other one is using good old mutual tls you know like",
    "start": "1769200",
    "end": "1775039"
  },
  {
    "text": "x509 certificates where the transport channel takes care of the crypto um",
    "start": "1775039",
    "end": "1782080"
  },
  {
    "text": "and does you know allows that the client proves he knows a certain secret of the server and and vice versa",
    "start": "1782080",
    "end": "1788720"
  },
  {
    "text": "um and you can combine both methods which we'll see is an interesting technique later in in the talk okay",
    "start": "1788720",
    "end": "1796960"
  },
  {
    "text": "let's have a look at private key chat the private key chart basically the idea is um instead of",
    "start": "1796960",
    "end": "1803679"
  },
  {
    "text": "um sending the shared secret over the wire what you what the client is doing",
    "start": "1803679",
    "end": "1808799"
  },
  {
    "text": "similar to the idea with um with char like the signed authorized requests",
    "start": "1808799",
    "end": "1814720"
  },
  {
    "text": "um the client creates the json web token and signs it with the private key okay",
    "start": "1814720",
    "end": "1821600"
  },
  {
    "text": "and then um this is basically used as a replacement for the secret because now the client has a",
    "start": "1821600",
    "end": "1828399"
  },
  {
    "text": "piece of data that proves that he knows the client key that did a private key sorry um what's",
    "start": "1828399",
    "end": "1834399"
  },
  {
    "text": "inside of that json web token well there are a couple of claims that must be in there like the issuer claim and the subject id claim they they",
    "start": "1834399",
    "end": "1841039"
  },
  {
    "text": "contain the client id of the oauth client the audience claim must point to the token endpoint",
    "start": "1841039",
    "end": "1846559"
  },
  {
    "text": "of the authorization server jti is um is a unique identifier like a guid for",
    "start": "1846559",
    "end": "1852320"
  },
  {
    "text": "example that allows us to do replay detection which is another nice feature of this authentication method",
    "start": "1852320",
    "end": "1858320"
  },
  {
    "text": "since we can detect uh replayed requests because the jti you would",
    "start": "1858320",
    "end": "1865039"
  },
  {
    "text": "you you would see it twice right and you see oh so somebody used that token twice um expiration man which is basically",
    "start": "1865039",
    "end": "1872559"
  },
  {
    "text": "um trimming down how long your replay cache must be and then issue that tells you how how",
    "start": "1872559",
    "end": "1877600"
  },
  {
    "text": "old the token is or when when it was issued yeah so basically the top of the client is now to basically",
    "start": "1877600",
    "end": "1883919"
  },
  {
    "text": "create such a json lab token and instead of transmitting the client id client secret um the client basically sets a client",
    "start": "1883919",
    "end": "1891600"
  },
  {
    "start": "1890000",
    "end": "1890000"
  },
  {
    "text": "assertion which is the json lab token and then there's an an official client assertion type okay",
    "start": "1891600",
    "end": "1899360"
  },
  {
    "text": "so um all the code that's necessary for doing that is on the slide but i think it's more exciting to show it to you",
    "start": "1899360",
    "end": "1906559"
  },
  {
    "text": "in a real example so again let's have a look at the server configuration first",
    "start": "1906559",
    "end": "1911679"
  },
  {
    "text": "how would you how would you um configure such a client well and guess what",
    "start": "1911679",
    "end": "1917440"
  },
  {
    "text": "it is exactly the same as you would do with the signed authorized request in other words you can use the same",
    "start": "1917440",
    "end": "1923120"
  },
  {
    "text": "credential now to do authentication on both the front and the back channel",
    "start": "1923120",
    "end": "1928159"
  },
  {
    "text": "okay um there's another client which has a little bit more options here there's this guy so",
    "start": "1928159",
    "end": "1934480"
  },
  {
    "text": "you know in in identity server generally speaking you can leverage this using and and i",
    "start": "1934480",
    "end": "1940159"
  },
  {
    "text": "mentioned it earlier x509 certificates yeah which that is just an x59 third as its base64",
    "start": "1940159",
    "end": "1946320"
  },
  {
    "text": "form or a chasing that key and the json lab key is a more general purpose data structure because",
    "start": "1946320",
    "end": "1952320"
  },
  {
    "text": "you can format any type of key with that um i mean you could even use symmetric keys if if you want to but",
    "start": "1952320",
    "end": "1958880"
  },
  {
    "text": "i i wouldn't recommend it yeah i would say stick with an asymmetric one use rsa or elliptic curves okay",
    "start": "1958880",
    "end": "1966480"
  },
  {
    "text": "and that's it basically from an identical point of view um almost at least you plug in",
    "start": "1966480",
    "end": "1975200"
  },
  {
    "text": "the correct uh secret validator and uh parser type in here",
    "start": "1975200",
    "end": "1981279"
  },
  {
    "text": "and then um basically what happens is when you go to the",
    "start": "1981279",
    "end": "1988480"
  },
  {
    "text": "open idconnect provider and you go to the discovery document you will see that it has an",
    "start": "1988480",
    "end": "1994880"
  },
  {
    "text": "authentication method that it supports where is it [Music]",
    "start": "1994880",
    "end": "2002320"
  },
  {
    "text": "runtime response times response oh yeah token endpoint authentication method and it says uh private key chart that tells you okay",
    "start": "2002320",
    "end": "2010159"
  },
  {
    "text": "this is supported by the op money connect provider so now that that's the server",
    "start": "2010159",
    "end": "2018159"
  },
  {
    "text": "setup and now let's have a look at the private key chart client side so that that's a console",
    "start": "2018159",
    "end": "2023679"
  },
  {
    "text": "sample here um and the idea is pretty simple",
    "start": "2023679",
    "end": "2028799"
  },
  {
    "text": "um you are creating the json web token that happens create here so you see that",
    "start": "2028799",
    "end": "2036240"
  },
  {
    "text": "basically here we are creating a json web token using the private key here are the claims that must be in",
    "start": "2036240",
    "end": "2041919"
  },
  {
    "text": "there the client id the audience the json web token id um",
    "start": "2041919",
    "end": "2048079"
  },
  {
    "text": "the issuance time the not before like when is the token valid and when does it expire right that creates a string",
    "start": "2048079",
    "end": "2055760"
  },
  {
    "text": "now which is basically your credential yeah and then you can",
    "start": "2055760",
    "end": "2062158"
  },
  {
    "text": "request the token right and instead of passing in a client id and the client",
    "start": "2062159",
    "end": "2067200"
  },
  {
    "text": "secret we are passing in a client assertion as they call it the type of the assertion is a constant",
    "start": "2067200",
    "end": "2074079"
  },
  {
    "text": "which comes from the spec and that is the json web token we just created okay and that returns basically an",
    "start": "2074079",
    "end": "2080878"
  },
  {
    "text": "access token and from that point on you just call your apis um as normal okay so um",
    "start": "2080879",
    "end": "2089599"
  },
  {
    "text": "when i run this you know um here's my private key chart console",
    "start": "2089599",
    "end": "2096639"
  },
  {
    "text": "so basically you see here um that's the the token response coming from the server and you know it's just a normal token",
    "start": "2100960",
    "end": "2107040"
  },
  {
    "text": "just that for accessing that token we haven't used a shared secret it's now using a private public key pair",
    "start": "2107040",
    "end": "2114640"
  },
  {
    "text": "and that's it okay",
    "start": "2114640",
    "end": "2118400"
  },
  {
    "text": "oh yeah and the same i guess i should show you the same for mvc that is also um always a good exercise",
    "start": "2120079",
    "end": "2126800"
  },
  {
    "text": "to see how that would work in a real application so i will keep short here's my mvc",
    "start": "2126800",
    "end": "2134640"
  },
  {
    "text": "guy and i'm basically using the same technique as before i'm i'm hooking in those events",
    "start": "2134640",
    "end": "2140400"
  },
  {
    "text": "yeah um the oidc events and when we have a look at that you can see that microsoft kind of",
    "start": "2140400",
    "end": "2147839"
  },
  {
    "text": "prepared for the scenario where you don't use a shared secret they don't have a built-in implementation for doing",
    "start": "2147839",
    "end": "2154320"
  },
  {
    "text": "you know like all of the token creation and so on but when you are basically hooking this event here authorization",
    "start": "2154320",
    "end": "2160000"
  },
  {
    "text": "code received that is happening after you receive the authorization code but before",
    "start": "2160000",
    "end": "2165280"
  },
  {
    "text": "you redeem the code and turn it back into a token you see that basically on this context",
    "start": "2165280",
    "end": "2170720"
  },
  {
    "text": "they are passing in here there's a token endpoint request then you can set the client assertion type and the client assertion and then",
    "start": "2170720",
    "end": "2177680"
  },
  {
    "text": "this is used instead of a client secret okay so actually when we look at",
    "start": "2177680",
    "end": "2183119"
  },
  {
    "text": "my startup here you can see that um i haven't even you know",
    "start": "2183119",
    "end": "2188320"
  },
  {
    "text": "there is no client secret configured here because this is the json web token that gets um generated on the fly",
    "start": "2188320",
    "end": "2196400"
  },
  {
    "text": "okay so that is cool as well um oh yeah and again i i should",
    "start": "2196400",
    "end": "2204240"
  },
  {
    "text": "mention since we are creating the json depth token we can add more content to it if we want",
    "start": "2204240",
    "end": "2209680"
  },
  {
    "text": "to right additional claims that would flow to the authorization server and maybe you want to try",
    "start": "2209680",
    "end": "2214720"
  },
  {
    "text": "some custom logic um on that you know on the fact that you have",
    "start": "2214720",
    "end": "2220160"
  },
  {
    "text": "additional data being transported from the client to the to the token endpoint",
    "start": "2220160",
    "end": "2225920"
  },
  {
    "text": "okay so here is all the code i just showed you um we don't need to do that again",
    "start": "2225920",
    "end": "2232640"
  },
  {
    "text": "cool um so to be honest with you um um",
    "start": "2232640",
    "end": "2238800"
  },
  {
    "start": "2233000",
    "end": "2233000"
  },
  {
    "text": "that's that's you know that's what i would do yeah i would um i would go away from",
    "start": "2238800",
    "end": "2245520"
  },
  {
    "text": "pub from from shared secrets right deploy a public line key pair instead for my",
    "start": "2245520",
    "end": "2250800"
  },
  {
    "text": "clients and then switch both on the front channel and on the back channel",
    "start": "2250800",
    "end": "2256240"
  },
  {
    "text": "to signed you know uh artifacts right on the front channel sign my authorized",
    "start": "2256240",
    "end": "2262079"
  },
  {
    "text": "request on the back channel use the the the private key shot instead of my client secret you can use the same key",
    "start": "2262079",
    "end": "2268640"
  },
  {
    "text": "material yeah and that's great and that basically um gives you",
    "start": "2268640",
    "end": "2275599"
  },
  {
    "text": "better security now that is only about the client to token service",
    "start": "2275599",
    "end": "2282320"
  },
  {
    "text": "communication another thing that is a you know a real security concern is",
    "start": "2282320",
    "end": "2287920"
  },
  {
    "text": "um what happens if you're leaking the access token right now now now we used all of these new bells and whistles",
    "start": "2287920",
    "end": "2294160"
  },
  {
    "text": "to to to make the token request more secure but what if you are leaking or the the",
    "start": "2294160",
    "end": "2300320"
  },
  {
    "text": "token right so once the attacker has stolen a token uh it doesn't matter",
    "start": "2300320",
    "end": "2307040"
  },
  {
    "text": "anymore how secure your authentication method was the token is gone and can be used right that is the whole",
    "start": "2307040",
    "end": "2312960"
  },
  {
    "text": "crux of the the bearer token concept in olaf that there is no binding from the token",
    "start": "2312960",
    "end": "2319839"
  },
  {
    "text": "to the client that requested the token in the first place so if the client is leaking the token it",
    "start": "2319839",
    "end": "2325599"
  },
  {
    "text": "can be used by an attacker to impersonate the client or impersonate",
    "start": "2325599",
    "end": "2330960"
  },
  {
    "text": "the user okay um so the opposite of bearer tokens is called",
    "start": "2330960",
    "end": "2336000"
  },
  {
    "text": "proof of procession tokens right where basically you find a way to cryptography",
    "start": "2336000",
    "end": "2341520"
  },
  {
    "text": "cryptographically bind the access token to the owner to the client and if an attacker would",
    "start": "2341520",
    "end": "2347839"
  },
  {
    "text": "now be able to steal that access token um the attacker could not use the access token because it's missing",
    "start": "2347839",
    "end": "2354079"
  },
  {
    "text": "the last secret so to speak to prove that he owns the token as well okay that is",
    "start": "2354079",
    "end": "2361040"
  },
  {
    "text": "to be honest with you not very easy to accomplish i mean there are there have been many many attempts to",
    "start": "2361040",
    "end": "2366800"
  },
  {
    "text": "solve the problem um either you are you are introducing heavy crypto",
    "start": "2366800",
    "end": "2372640"
  },
  {
    "text": "at the application level because basically you need to somehow bind that token to the client",
    "start": "2372640",
    "end": "2378400"
  },
  {
    "text": "and the client now needs to prove to the api that he knows the private key by signing the http request for example",
    "start": "2378400",
    "end": "2385040"
  },
  {
    "text": "um this has been proven to work but has never really gotten any traction",
    "start": "2385040",
    "end": "2391040"
  },
  {
    "text": "because it's it's pretty complicated and also there are some unsolved problems with application level",
    "start": "2391040",
    "end": "2396720"
  },
  {
    "text": "um token binding like for example streaming right i mean um the whole signature thing requires",
    "start": "2396720",
    "end": "2402560"
  },
  {
    "text": "you to have a chunk of data uh to be able to run a hash over that but a stream of data",
    "start": "2402560",
    "end": "2408160"
  },
  {
    "text": "you know that's harder to do um many people thought maybe the the",
    "start": "2408160",
    "end": "2413680"
  },
  {
    "text": "transport layer can save us and there was a stack in the in the working called um token binding",
    "start": "2413680",
    "end": "2419520"
  },
  {
    "text": "um but that never also never got really a lot of traction so we were basically back to square one and thought like",
    "start": "2419520",
    "end": "2426560"
  },
  {
    "text": "how can we introduce a disproved possession semantics yeah so just to summarize this",
    "start": "2426560",
    "end": "2432079"
  },
  {
    "text": "this is the real problem right you are sending a token from the client to the api an attacker is able to steal that token",
    "start": "2432079",
    "end": "2438960"
  },
  {
    "start": "2433000",
    "end": "2433000"
  },
  {
    "text": "somehow yeah the attacker can replay the token and and impersonate the decline",
    "start": "2438960",
    "end": "2447280"
  },
  {
    "text": "so um after many years of trying to find solutions we we are we are basically",
    "start": "2447280",
    "end": "2453520"
  },
  {
    "text": "coming back to uh technology which has been around for many many years and it's called mutual",
    "start": "2453520",
    "end": "2458720"
  },
  {
    "start": "2454000",
    "end": "2454000"
  },
  {
    "text": "tls yeah um or some people call it client certificates yeah for for tls so you know that um",
    "start": "2458720",
    "end": "2466940"
  },
  {
    "text": "[Music] normally when you do https yeah what you're doing is you are authenticating the server right",
    "start": "2466940",
    "end": "2473839"
  },
  {
    "start": "2472000",
    "end": "2472000"
  },
  {
    "text": "so you know many people think tls is all about encryption and stuff well it does",
    "start": "2473839",
    "end": "2479200"
  },
  {
    "text": "encryption as well but first and foremost that the the biggest benefit of tls is",
    "start": "2479200",
    "end": "2484880"
  },
  {
    "text": "is that it authenticates the server right because um you know before you send confidential",
    "start": "2484880",
    "end": "2491040"
  },
  {
    "text": "stuff to the server you want to know you're in the right place ma'am there's an extension to tls",
    "start": "2491040",
    "end": "2497599"
  },
  {
    "text": "for client side authentication which is not used that often because historically there have been",
    "start": "2497599",
    "end": "2503839"
  },
  {
    "text": "problems with that and when people hear mutual tls they think of pki and cas and so on but to be honest with",
    "start": "2503839",
    "end": "2510240"
  },
  {
    "text": "you it's gotten there's a renaissance around mutual tls it's gotten easier to use",
    "start": "2510240",
    "end": "2516560"
  },
  {
    "text": "um and maybe you maybe you don't need all that pki stuff as i'll show you in a second right",
    "start": "2516560",
    "end": "2522319"
  },
  {
    "text": "so if you employ certificates on both ends of the tls",
    "start": "2522319",
    "end": "2527760"
  },
  {
    "text": "tunnel you can authenticate both sides okay and in essence what that means is",
    "start": "2527760",
    "end": "2533040"
  },
  {
    "text": "is that both sides can prove they know a certain private well they they both",
    "start": "2533040",
    "end": "2538400"
  },
  {
    "text": "sides can prove they know a secret okay and once both sides are",
    "start": "2538400",
    "end": "2543440"
  },
  {
    "text": "happy with the other one saying i know the secret and that's how i prove it to you and that's very complicated yeah in reality",
    "start": "2543440",
    "end": "2550079"
  },
  {
    "text": "we can be very sure that you know we know the identity of each other now",
    "start": "2550079",
    "end": "2558000"
  },
  {
    "text": "with that level of approval what the token service can do actually is is embed inside",
    "start": "2558000",
    "end": "2566640"
  },
  {
    "start": "2561000",
    "end": "2561000"
  },
  {
    "text": "the access token um an identifier that represents the secret that the",
    "start": "2566640",
    "end": "2573200"
  },
  {
    "text": "client has proven to know during the token request",
    "start": "2573200",
    "end": "2578319"
  },
  {
    "text": "okay so in other words um only this particular client here",
    "start": "2578319",
    "end": "2585280"
  },
  {
    "text": "can prove that he knows a secret and the secret identifier is what we call",
    "start": "2585280",
    "end": "2590400"
  },
  {
    "text": "a thumb or and you know which is technically the hash of the public portion of the",
    "start": "2590400",
    "end": "2596880"
  },
  {
    "text": "x509 certificate in this case with sha256 so that's why it's called x5gs256",
    "start": "2596880",
    "end": "2603040"
  },
  {
    "text": "and the special claim for that is called the cnf claim it's the confirmation claim so in other words this cnf claim binds",
    "start": "2603040",
    "end": "2610640"
  },
  {
    "text": "the access token to the client okay cool so now how does that work i mean",
    "start": "2610640",
    "end": "2618800"
  },
  {
    "text": "how do we make it work so what about this what if um you know a client when it starts up just",
    "start": "2618800",
    "end": "2624400"
  },
  {
    "text": "creates a public private key pair an x 509 certificate basically and then",
    "start": "2624400",
    "end": "2629599"
  },
  {
    "text": "uses that x59 certificate to to basically",
    "start": "2629599",
    "end": "2634720"
  },
  {
    "text": "start the tls handshake with the token service right now the token service would embed",
    "start": "2634720",
    "end": "2640160"
  },
  {
    "text": "that some print in there and then the client would use the same certificate to open the tls channel to",
    "start": "2640160",
    "end": "2646319"
  },
  {
    "text": "the api now the api once the tls handshake is done successfully",
    "start": "2646319",
    "end": "2651839"
  },
  {
    "text": "he will also see on the tls channel this value here so all the client now",
    "start": "2651839",
    "end": "2657200"
  },
  {
    "text": "needs to do is is compare the value he got from the tls channel with the value that's inside the access",
    "start": "2657200",
    "end": "2663119"
  },
  {
    "text": "token and if they match he knows that this is actually the client that asked for the token in the",
    "start": "2663119",
    "end": "2668880"
  },
  {
    "text": "first place or in other words the client proved possession okay sounds complicated",
    "start": "2668880",
    "end": "2676960"
  },
  {
    "text": "yeah well security is hard right but but it's not undoable right so the good",
    "start": "2676960",
    "end": "2683359"
  },
  {
    "text": "news is starting with net core two point something we can actually encode create x 509",
    "start": "2683359",
    "end": "2691040"
  },
  {
    "start": "2689000",
    "end": "2689000"
  },
  {
    "text": "certificates on the fly okay that's all the code you need and you know",
    "start": "2691040",
    "end": "2696079"
  },
  {
    "text": "there are some magic things in there that don't you know whatever it works yeah what this creates or",
    "start": "2696079",
    "end": "2703440"
  },
  {
    "text": "yeah does is it generates me an x 509 certificate on the fly that i can use um for opening",
    "start": "2703440",
    "end": "2710800"
  },
  {
    "text": "a tls channel and for opening the tls channel all you need to do is you assign that certificate that we just",
    "start": "2710800",
    "end": "2717119"
  },
  {
    "start": "2714000",
    "end": "2714000"
  },
  {
    "text": "created to the handler that you use to open your http",
    "start": "2717119",
    "end": "2722319"
  },
  {
    "text": "client okay and then basically all you need to do is request",
    "start": "2722319",
    "end": "2729119"
  },
  {
    "start": "2728000",
    "end": "2728000"
  },
  {
    "text": "the token create the hp client assign the certificate to it and then do your",
    "start": "2729119",
    "end": "2735760"
  },
  {
    "text": "token request okay and from that point on that certificate will be used to to um you know to to",
    "start": "2735760",
    "end": "2743920"
  },
  {
    "text": "authenticate in quote-unquote the client um and that can be used then for the uh",
    "start": "2743920",
    "end": "2750400"
  },
  {
    "text": "by the token server to um to embed this um this uh thumbprint into the access",
    "start": "2750400",
    "end": "2757040"
  },
  {
    "text": "token yeah this this certificate is not usefully for authentication right it's just an additional secret that the",
    "start": "2757040",
    "end": "2765200"
  },
  {
    "text": "client provides that allows the token service to bind the token to that secret yeah and as",
    "start": "2765200",
    "end": "2770960"
  },
  {
    "text": "long as the attacker does not know that additional secret it cannot use the token because and",
    "start": "2770960",
    "end": "2776560"
  },
  {
    "text": "since the secret never went over the wire just the public key part that's how that works okay so let me",
    "start": "2776560",
    "end": "2783040"
  },
  {
    "text": "just show you first how this works in action and then we can have a look at some",
    "start": "2783040",
    "end": "2789680"
  },
  {
    "text": "considerations around it okay so here's my um let's see where is my",
    "start": "2789680",
    "end": "2796960"
  },
  {
    "text": "mtls guy",
    "start": "2796960",
    "end": "2802480"
  },
  {
    "text": "so here you see here we are generating the certificate and then we",
    "start": "2802480",
    "end": "2807760"
  },
  {
    "text": "are requesting the token and then you know i will just output",
    "start": "2807760",
    "end": "2813520"
  },
  {
    "text": "the token on the screen so let's do that and then you'll see that the token will",
    "start": "2813520",
    "end": "2818800"
  },
  {
    "text": "contain this thumb print okay so here you see that's the",
    "start": "2818800",
    "end": "2825520"
  },
  {
    "text": "resulting access token and here's an additional claim now and that's exactly the thumbprint okay so now basically",
    "start": "2825520",
    "end": "2831359"
  },
  {
    "text": "what i what i need to do is in my api um",
    "start": "2831359",
    "end": "2836720"
  },
  {
    "text": "in my api i've written an additional middleware",
    "start": "2836720",
    "end": "2843760"
  },
  {
    "text": "and what this middleware is doing basically is it does does exactly what i what i mentioned earlier it it gets",
    "start": "2843760",
    "end": "2850720"
  },
  {
    "text": "the client certificate from the transport channel it gets the thumbprint for that",
    "start": "2850720",
    "end": "2856400"
  },
  {
    "text": "certificate which is basically the basics before url version of the sha256",
    "start": "2856400",
    "end": "2862640"
  },
  {
    "text": "hash of the certificate right and then it extracts the value of this",
    "start": "2862640",
    "end": "2868000"
  },
  {
    "text": "x5t claim from the json web token and if they match all is good if they don't match then",
    "start": "2868000",
    "end": "2875280"
  },
  {
    "text": "well you know we reject the request and that means um and that means that",
    "start": "2875280",
    "end": "2882559"
  },
  {
    "text": "that the client has not proven to know that secret okay",
    "start": "2882559",
    "end": "2889040"
  },
  {
    "text": "so that's how that works um now setting up mutual tls is a bit more",
    "start": "2889040",
    "end": "2896319"
  },
  {
    "text": "involved yeah i i mean i i i totally have to admit that yeah but you only have to have to do that",
    "start": "2896319",
    "end": "2901839"
  },
  {
    "text": "once yeah so first of all you have to think about um basically um it doesn't work really",
    "start": "2901839",
    "end": "2908000"
  },
  {
    "start": "2903000",
    "end": "2903000"
  },
  {
    "text": "well um to to share both non-mutual tls and mutual tls",
    "start": "2908000",
    "end": "2915760"
  },
  {
    "text": "um endpoints uh on the same connection right so iis done does that historically",
    "start": "2915760",
    "end": "2923280"
  },
  {
    "text": "uh with uh dedicated paths here that is not going forward with http 2",
    "start": "2923280",
    "end": "2928880"
  },
  {
    "text": "and beyond um so basically what you have to do is separate them maybe on the domain name",
    "start": "2928880",
    "end": "2934240"
  },
  {
    "text": "so it could be a separate domain name could be a sub domain for example yeah that's my preferred",
    "start": "2934240",
    "end": "2941599"
  },
  {
    "text": "version yeah i'm putting them on the sub domain and regardless which method you're",
    "start": "2941599",
    "end": "2948240"
  },
  {
    "text": "choosing when you look at the metadata of your token service",
    "start": "2948240",
    "end": "2953760"
  },
  {
    "start": "2950000",
    "end": "2950000"
  },
  {
    "text": "there will be a new element called mtls endpoint aliases and that basically says okay if you're",
    "start": "2953760",
    "end": "2959200"
  },
  {
    "text": "looking for the mtls version of the token endpoint that is the one to look for and not the",
    "start": "2959200",
    "end": "2964720"
  },
  {
    "text": "other one okay so once you have that you have to deploy",
    "start": "2964720",
    "end": "2970960"
  },
  {
    "text": "this somewhere or host it um i i had a look at a couple of web server choices um and you know iis",
    "start": "2970960",
    "end": "2979760"
  },
  {
    "start": "2971000",
    "end": "2971000"
  },
  {
    "text": "as i said does only path based azure does path-based as well but",
    "start": "2979760",
    "end": "2984880"
  },
  {
    "text": "in a weird way kestrel does well castrol does not support the isolation out of the box they are working on that for the",
    "start": "2984880",
    "end": "2991040"
  },
  {
    "text": "next version the one that i had the best results with is nginx to be honest that is super super flexible how to host",
    "start": "2991040",
    "end": "2998000"
  },
  {
    "text": "your endpoints and the tls settings and so on um and i'm pretty sure there are other other",
    "start": "2998000",
    "end": "3003440"
  },
  {
    "text": "options here as well but if you're using nginx basically the idea is pretty simple",
    "start": "3003440",
    "end": "3009359"
  },
  {
    "start": "3006000",
    "end": "3006000"
  },
  {
    "text": "you host your application here on your normal domain right and that's all of the headers you're passing through so when a request",
    "start": "3009359",
    "end": "3015839"
  },
  {
    "text": "comes in um you are forwarding that to the internal",
    "start": "3015839",
    "end": "3021040"
  },
  {
    "text": "server you know your localhost 5000 whatever and then you're setting up a separate server here which is the the sub domain",
    "start": "3021040",
    "end": "3028079"
  },
  {
    "text": "which does mtls and then you said okay i i want mtls here and then you can you know have some",
    "start": "3028079",
    "end": "3033839"
  },
  {
    "text": "options about do i require pki or not i didn't require that and then basically",
    "start": "3033839",
    "end": "3039680"
  },
  {
    "text": "you're telling nginx to forward the tls certificate as a header to asp.net core",
    "start": "3039680",
    "end": "3047760"
  },
  {
    "text": "okay um and then on the asp.net core side you need to turn that header back",
    "start": "3047760",
    "end": "3054079"
  },
  {
    "text": "into an x59 certificate there's a built-in middleware for that it's the certificate forwarding middleware and",
    "start": "3054079",
    "end": "3061040"
  },
  {
    "start": "3056000",
    "end": "3056000"
  },
  {
    "text": "you basically have to tell that middleware how to turn that header back into an x509",
    "start": "3061040",
    "end": "3067040"
  },
  {
    "text": "certificate in the case of nginx you basically um url",
    "start": "3067040",
    "end": "3072720"
  },
  {
    "text": "decode the header and that basically is the byte array and that is your x5493 so",
    "start": "3072720",
    "end": "3078000"
  },
  {
    "text": "that's easy enough and then you wire up support for x509 and again that this is all built in it's",
    "start": "3078000",
    "end": "3085119"
  },
  {
    "start": "3082000",
    "end": "3082000"
  },
  {
    "text": "nothing that i added to action core it is um it is all um you know built in since",
    "start": "3085119",
    "end": "3092079"
  },
  {
    "text": "version 3.0 and then the last thing i did was i actually enabled mutual tls",
    "start": "3092079",
    "end": "3098079"
  },
  {
    "start": "3095000",
    "end": "3095000"
  },
  {
    "text": "on identity server and that is how i uh how i uh you know validate that",
    "start": "3098079",
    "end": "3105680"
  },
  {
    "text": "that and then can embed the cnf claim into the access token okay um that is uh",
    "start": "3105680",
    "end": "3112319"
  },
  {
    "start": "3112000",
    "end": "3112000"
  },
  {
    "text": "how i did it at the api i showed you that already that that's my my um my validation",
    "start": "3112319",
    "end": "3119200"
  },
  {
    "start": "3115000",
    "end": "3115000"
  },
  {
    "text": "um middleware so just to prove that it works let's actually um run the api as well",
    "start": "3119200",
    "end": "3125760"
  },
  {
    "text": "okay so here's my api um and here is my",
    "start": "3125760",
    "end": "3132480"
  },
  {
    "text": "[Music] client",
    "start": "3132480",
    "end": "3139599"
  },
  {
    "text": "so that is now my token request when i hit enter i call my api so the api was happy with my token which means that",
    "start": "3139599",
    "end": "3146319"
  },
  {
    "text": "it was able to match the thumbprint okay uh oh yeah very last thing maybe to show",
    "start": "3146319",
    "end": "3151839"
  },
  {
    "text": "you how that works in spirit core uh as a client yeah um so there is",
    "start": "3151839",
    "end": "3158319"
  },
  {
    "text": "uh an mtls mvc app so that is a bit of a funny",
    "start": "3158319",
    "end": "3164400"
  },
  {
    "text": "story so microsoft has half of half of the support uh we",
    "start": "3164400",
    "end": "3171680"
  },
  {
    "text": "need man um so first of all i'm making use of the fact that in",
    "start": "3171680",
    "end": "3176960"
  },
  {
    "text": "in action core in the openly connect handler you can replace the back channel http client",
    "start": "3176960",
    "end": "3183280"
  },
  {
    "text": "basically all i'm doing here really is i'm replacing the http client and i'm i'm inserting my my certificate okay",
    "start": "3183280",
    "end": "3191359"
  },
  {
    "text": "the other complication you will run into is that they don't know anything about these mtls endpoint aliases yeah so you",
    "start": "3191359",
    "end": "3198160"
  },
  {
    "text": "have to tell them to use different endpoints when they are opening the the back channel yeah i've i haven't",
    "start": "3198160",
    "end": "3204880"
  },
  {
    "text": "found a good way of doing that um besides replacing their complete open",
    "start": "3204880",
    "end": "3211520"
  },
  {
    "text": "money connect discovery document plumbing man which sounds worse than it is",
    "start": "3211520",
    "end": "3218240"
  },
  {
    "text": "um basically what i was able to do is i i wrote my own i configuration manager i i'm using",
    "start": "3218240",
    "end": "3225920"
  },
  {
    "text": "internally that's the standard one they have yeah and then basically whenever they want to get my configuration i'm first",
    "start": "3225920",
    "end": "3232720"
  },
  {
    "text": "calling the built-in configuration manager and then i'm fixing up on the fly the endpoint urls for the",
    "start": "3232720",
    "end": "3239680"
  },
  {
    "text": "token endpoint and in this case also for the revocation endpoint then from an from an asp.net core point",
    "start": "3239680",
    "end": "3245040"
  },
  {
    "text": "of view you know they don't know about this they're using mtls and it and it works okay so",
    "start": "3245040",
    "end": "3252240"
  },
  {
    "text": "um you can tell that hp and core was not written for many of these advanced features in mind but",
    "start": "3252240",
    "end": "3258559"
  },
  {
    "text": "i think it's a good sign that the extensibility model that they have allows you to do all the",
    "start": "3258559",
    "end": "3263680"
  },
  {
    "text": "things okay without you know major surgery i guess to the",
    "start": "3263680",
    "end": "3269520"
  },
  {
    "text": "framework okay um so that's that's it yeah um obviously",
    "start": "3269520",
    "end": "3275920"
  },
  {
    "start": "3270000",
    "end": "3270000"
  },
  {
    "text": "there's more there's more to learn here but these are the you know my my main key takeaways yeah",
    "start": "3275920",
    "end": "3282160"
  },
  {
    "text": "the secure the front channel um use asymmetric keys yeah use the private key shot mechanism",
    "start": "3282160",
    "end": "3288960"
  },
  {
    "text": "for the back channel and then you can if if if you are interested in this proof of procession feature",
    "start": "3288960",
    "end": "3294400"
  },
  {
    "text": "you can layer on top tls client certificates yeah um you don't need a ca for that",
    "start": "3294400",
    "end": "3301520"
  },
  {
    "text": "you don't need a pki for that you can just generate them yourself the client the client doesn't even need",
    "start": "3301520",
    "end": "3307280"
  },
  {
    "text": "to be a confidential client yeah i mean imagine uh i think where this is a really compelling feature it is for",
    "start": "3307280",
    "end": "3314000"
  },
  {
    "text": "native mobile applications right because these are the types of applications which are typically exposed to",
    "start": "3314000",
    "end": "3320079"
  },
  {
    "text": "untrusted networks yeah and if this mute you know your your mobile app generates this",
    "start": "3320079",
    "end": "3326319"
  },
  {
    "text": "session certificate when it asks for the token then it can you know use the access token and even if the",
    "start": "3326319",
    "end": "3332559"
  },
  {
    "text": "token gets leaked over you know um maybe the maybe this this app at this access point at the airport called",
    "start": "3332559",
    "end": "3339119"
  },
  {
    "text": "free wi-fi is not as secure as you think right um so even if if that token gets leaked",
    "start": "3339119",
    "end": "3344559"
  },
  {
    "text": "over there the attacker cannot use it because it is missing the private key of the session certificate",
    "start": "3344559",
    "end": "3350079"
  },
  {
    "text": "so i think that is without too much effort a way to",
    "start": "3350079",
    "end": "3355119"
  },
  {
    "text": "tremendously increase the security of your own deployment",
    "start": "3355119",
    "end": "3360400"
  },
  {
    "text": "okay so that's it from my point of view um if you have any questions please",
    "start": "3360400",
    "end": "3366960"
  },
  {
    "text": "speak up uh now with audio otherwise put them into the slack channel",
    "start": "3366960",
    "end": "3372000"
  },
  {
    "text": "and i will get to them or maybe i will get to them right now um so",
    "start": "3372000",
    "end": "3378240"
  },
  {
    "text": "there's one question do you generate the mtls certificate for each client for each request or something else",
    "start": "3378240",
    "end": "3383920"
  },
  {
    "text": "basically um it is for each token request well it depends right so um",
    "start": "3383920",
    "end": "3390880"
  },
  {
    "text": "it's a so-called session certificate right and you define what that means what a",
    "start": "3390880",
    "end": "3396079"
  },
  {
    "text": "session is for you maybe it is per application startup maybe you do it per token request right",
    "start": "3396079",
    "end": "3402319"
  },
  {
    "text": "um the point is you have to use the same tls certificate for both the request to the token service and the request to the",
    "start": "3402319",
    "end": "3409280"
  },
  {
    "text": "api so they logically belong together right um but besides that um",
    "start": "3409280",
    "end": "3418400"
  },
  {
    "text": "you know you can mix and match any way you want the next question is um the next question is how about load",
    "start": "3418400",
    "end": "3426160"
  },
  {
    "text": "balance clients do they need to synchronize mg lessons no they don't right um that's the nice thing about it yeah",
    "start": "3426160",
    "end": "3431839"
  },
  {
    "text": "it's just an additional an additional key that you are transmitting alongside the token request",
    "start": "3431839",
    "end": "3438559"
  },
  {
    "text": "there is no registration for that necessary nothing it's just imagine you're doing a normal token",
    "start": "3438559",
    "end": "3444480"
  },
  {
    "text": "request but provide an additional secret that the token service can bind",
    "start": "3444480",
    "end": "3450480"
  },
  {
    "text": "to to the token that's that's about it",
    "start": "3450480",
    "end": "3457760"
  }
]