[
  {
    "text": "right hello everyone in this session I want to look at something called gradual",
    "start": "2399",
    "end": "9170"
  },
  {
    "text": "my name is Sandeep and I'm a software consultant based out of England just before we get into this session has",
    "start": "9170",
    "end": "16710"
  },
  {
    "text": "anyone heard of graph QL before come to this talk that's pretty good anyone",
    "start": "16710",
    "end": "22710"
  },
  {
    "text": "using it in production ok maybe not so good ok awesome so it gives me a point now",
    "start": "22710",
    "end": "29910"
  },
  {
    "text": "where we can go this talk so let's have a look at the agenda this is what I want to cover today so the first thing I want",
    "start": "29910",
    "end": "35910"
  },
  {
    "text": "to look at is the considerations and challenges that we have when we create a px today don't have a look at what",
    "start": "35910",
    "end": "43170"
  },
  {
    "text": "gradual is what is not and what aims to solve then we'll take a deeper look into",
    "start": "43170",
    "end": "49589"
  },
  {
    "text": "what graph drill it's called concepts and principles and then it's going to be a demo where we'll",
    "start": "49589",
    "end": "55319"
  },
  {
    "text": "build a graph QL server as well as hook up to a single page application it can give you a real world example of how you",
    "start": "55319",
    "end": "61800"
  },
  {
    "text": "could use it then finally I want to go through some considerations around when",
    "start": "61800",
    "end": "67050"
  },
  {
    "text": "to use graph QL and some of the not so good things about crack cool right so",
    "start": "67050",
    "end": "74640"
  },
  {
    "text": "there's various technologies that facilitate server to client communication here's a list of some of",
    "start": "74640",
    "end": "81030"
  },
  {
    "text": "them that you might have been seen before or used press soap RPC and/or",
    "start": "81030",
    "end": "86940"
  },
  {
    "text": "data and dispose of the ones that you haven't put on but the whole point in this talk is we're going to compare how",
    "start": "86940",
    "end": "93270"
  },
  {
    "text": "rest is the graph QL now it's got to give a bit of a disclaimer this is not",
    "start": "93270",
    "end": "98940"
  },
  {
    "text": "going to be a talk about saying rest is poor and graphic URL is the best thing since sliced bread it's not to be like",
    "start": "98940",
    "end": "104370"
  },
  {
    "text": "that I'm going to try to give you an informative and unbiased opinion about the goods and Bad's of both technologies",
    "start": "104370",
    "end": "110630"
  },
  {
    "text": "does want to say that first right so",
    "start": "110630",
    "end": "115830"
  },
  {
    "text": "that's going to quickly recap on some of the core concepts of rest so rest is an architectural style it's a pad it's not",
    "start": "115830",
    "end": "122610"
  },
  {
    "text": "a framework or a library space songs concept of resources and we name our",
    "start": "122610",
    "end": "128129"
  },
  {
    "text": "resources using nouns so for example for API patients and paste it to their",
    "start": "128129",
    "end": "133230"
  },
  {
    "text": "resource and because we use over HTTP we have these HTTP verbs and",
    "start": "133230",
    "end": "139890"
  },
  {
    "text": "operations which allow us to mutate our resources so we can basically manipulate",
    "start": "139890",
    "end": "146250"
  },
  {
    "text": "we can get called delete post and one of the most important things about rest is",
    "start": "146250",
    "end": "152520"
  },
  {
    "text": "which is argued quite a lot is a hypermedia constraint and the hypermedia constraint is ultimately about having",
    "start": "152520",
    "end": "158610"
  },
  {
    "text": "links your resource representation that provide links to other related resources it's kinda like transitioning from state",
    "start": "158610",
    "end": "165150"
  },
  {
    "text": "to state so for example if we had the api patients and point forward slash",
    "start": "165150",
    "end": "170640"
  },
  {
    "text": "with an ID say one in that representation we get back now response we might have links which are hit press",
    "start": "170640",
    "end": "177959"
  },
  {
    "text": "to things like medications allergies and very other things related to a patient so this is what I mean by resting this",
    "start": "177959",
    "end": "185190"
  },
  {
    "text": "is what we mean roughly by a rest throughout this talk so it's just a little bit of context right so what we",
    "start": "185190",
    "end": "192420"
  },
  {
    "text": "build if you guys today there's various things that we have to think about some challenges and some considerations one",
    "start": "192420",
    "end": "198959"
  },
  {
    "text": "of them it's around efficiency how efficient is our data retrieval how many",
    "start": "198959",
    "end": "204870"
  },
  {
    "text": "requests do we make to a server to get all of our data requirements back next is around predictability do we get the",
    "start": "204870",
    "end": "211830"
  },
  {
    "text": "response from the server that we expect and there's an interesting topic around versioning those things one of these",
    "start": "211830",
    "end": "218310"
  },
  {
    "text": "things that has kind of had various implementations and ways of doing it some are more correct nor more",
    "start": "218310",
    "end": "223590"
  },
  {
    "text": "restaurants or not so how we doing versioning how we evolve in our API are we using things like version numbers in",
    "start": "223590",
    "end": "230070"
  },
  {
    "text": "the URI or sending stuff in D headers then this things around caching how",
    "start": "230070",
    "end": "235680"
  },
  {
    "text": "utilizing network caching have you got cash on the app server do attacks on the client there's various things around",
    "start": "235680",
    "end": "241680"
  },
  {
    "text": "security tooling platforms and documentation so now I'll have a look at an example don't wanna do is I want to",
    "start": "241680",
    "end": "248070"
  },
  {
    "text": "walk through this example which is a very simple view it's a single patient",
    "start": "248070",
    "end": "253200"
  },
  {
    "text": "view for a patient in a medical system so it's composed of three parts",
    "start": "253200",
    "end": "259220"
  },
  {
    "text": "so there's a summary which kind gives your name their birth and identifiers",
    "start": "259220",
    "end": "265320"
  },
  {
    "text": "and basic information like them then we have medications medications its patients on there we",
    "start": "265320",
    "end": "272820"
  },
  {
    "text": "have allergies so things that the patient is allergic to so I want to do",
    "start": "272820",
    "end": "278280"
  },
  {
    "text": "is on a walk through this example and see how it affected it for this and some of the challenges we face we're going to",
    "start": "278280",
    "end": "284070"
  },
  {
    "text": "fix it if we're using rest so the first thing is if I was to request the patient",
    "start": "284070",
    "end": "290039"
  },
  {
    "text": "to a point I would technically get back if I were implanted hypermedia concentrate correctly I would get linked",
    "start": "290039",
    "end": "295710"
  },
  {
    "text": "to other resources and these will be medications and allergies and that's great but I have to go off and fetch the data",
    "start": "295710",
    "end": "302130"
  },
  {
    "text": "again it doesn't come back in the first request which is not good if you're trying to build efficient and perform an",
    "start": "302130",
    "end": "307979"
  },
  {
    "text": "API that can work with multiple clients and especially over mobile so this is called under fetching as it's common",
    "start": "307979",
    "end": "314849"
  },
  {
    "text": "terminology especially when you get good at the hypermedia concentrated ever restful api under fetching becomes a lot",
    "start": "314849",
    "end": "320550"
  },
  {
    "text": "more common so there's a few ways you can fix this so one way potentially",
    "start": "320550",
    "end": "326039"
  },
  {
    "text": "would be we could put an e cludes on our URL it's a query parameter and include these",
    "start": "326039",
    "end": "332340"
  },
  {
    "text": "in our first request now this technically is a little bit annoying kind of breaks wrist because you've",
    "start": "332340",
    "end": "338070"
  },
  {
    "text": "added state to our URI well for this purpose it works it solves a problem and",
    "start": "338070",
    "end": "343919"
  },
  {
    "text": "we can get the data back that we need but it is a problem with it and that",
    "start": "343919",
    "end": "349229"
  },
  {
    "text": "problem is something called over fetching now we've got the information that we need back but we've got way too",
    "start": "349229",
    "end": "355169"
  },
  {
    "text": "much information than we need if we think back to our example there's not",
    "start": "355169",
    "end": "360180"
  },
  {
    "text": "that much information on the screen really there's only a couple of properties for the patient summary but",
    "start": "360180",
    "end": "365430"
  },
  {
    "text": "yet if we have a look at the Jason in the bottom right that's only part of the responses to come back and the three",
    "start": "365430",
    "end": "371250"
  },
  {
    "text": "dots at the bottom mean there's a lot more information so we have this concept of over fetching data and getting more",
    "start": "371250",
    "end": "376259"
  },
  {
    "text": "debt than we actually need and again this is not great for mobile networks ultimately the smaller the payload of a",
    "start": "376259",
    "end": "382440"
  },
  {
    "text": "HTTP the better especially if you want to build a fishing API so we can solve",
    "start": "382440",
    "end": "388860"
  },
  {
    "text": "this in a few ways we could technically add a field query prior to a URI and",
    "start": "388860",
    "end": "394620"
  },
  {
    "text": "then we can dictate which feels we want to bring back now there's no real standard way of doing this there's no",
    "start": "394620",
    "end": "399630"
  },
  {
    "text": "real good convention about it there's various tools that you can use but when you're multiple objects and nested associations",
    "start": "399630",
    "end": "406150"
  },
  {
    "text": "and lots of properties your your eyes going to get quite big and ultimately how do you handle it for other resource",
    "start": "406150",
    "end": "412180"
  },
  {
    "text": "types this is just for the patients that were interested in but what about other endpoints that we have it's kind of hard",
    "start": "412180",
    "end": "417280"
  },
  {
    "text": "to maintain and sit overhead so something that we could do and I'll hold my hand up and I've done many times",
    "start": "417280",
    "end": "423160"
  },
  {
    "text": "create an ad hoc endpoint and this is not the most ideal thing but what allows us to do is we can get only the data we",
    "start": "423160",
    "end": "429430"
  },
  {
    "text": "need back in a single request but we've kind of limited now the scope of this endpoint that we've created because this",
    "start": "429430",
    "end": "437199"
  },
  {
    "text": "is just for that specific view now if we had another client so our initial",
    "start": "437199",
    "end": "442690"
  },
  {
    "text": "application was a desktop application or web application now we've got a mobile application how we're going to handle",
    "start": "442690",
    "end": "449710"
  },
  {
    "text": "the fact that they have a slightly different need for the way they ask for data do we create another ad hoc",
    "start": "449710",
    "end": "455229"
  },
  {
    "text": "endpoint could do it's not ideal there's an overhead in actually additionally adding you are is a maintenance or could",
    "start": "455229",
    "end": "463090"
  },
  {
    "text": "we create a separate API altogether now Netflix do this but next 16 because I",
    "start": "463090",
    "end": "468550"
  },
  {
    "text": "have a very big team and they have a lot of money behind them ultimately and they can afford to do these sorts of things this is not always the case with smaller",
    "start": "468550",
    "end": "475330"
  },
  {
    "text": "companies so building api's today it's",
    "start": "475330",
    "end": "481570"
  },
  {
    "text": "kind of difficult as we've seen there's quite a few challenges that we need to that kind of phases and we can't I need",
    "start": "481570",
    "end": "488260"
  },
  {
    "text": "to overcome those so how does graphic UL fit into this equation that's a good",
    "start": "488260",
    "end": "493330"
  },
  {
    "text": "question so gradual is a query language it's hot and this is a fundamental",
    "start": "493330",
    "end": "500770"
  },
  {
    "text": "difference between what grass glow and rest is rest is an architectural style and it's a way that we can build api's",
    "start": "500770",
    "end": "508120"
  },
  {
    "text": "but this is a query language it's a fundamental difference of two different things but what graphical are allowed",
    "start": "508120",
    "end": "513729"
  },
  {
    "text": "you to do has a building type system so with this type system you can define type save queries where you only request",
    "start": "513729",
    "end": "521200"
  },
  {
    "text": "the data that you want in the share performer and your response will mimic them and that all happens in one single",
    "start": "521200",
    "end": "527380"
  },
  {
    "text": "Network request between the client and the graphical server so let's have a look so on the left is basically how we",
    "start": "527380",
    "end": "534880"
  },
  {
    "text": "define a type cool so we have a patient type and tank so how we describe the dater in our",
    "start": "534880",
    "end": "540630"
  },
  {
    "text": "application our API and that's what we want to kind of expose next we have a",
    "start": "540630",
    "end": "545910"
  },
  {
    "text": "query is what a query looks like in graphically and it's basically asking for a patient with an identifier of",
    "start": "545910",
    "end": "552410"
  },
  {
    "text": "identifier that's provided and we want this name property back and if we look",
    "start": "552410",
    "end": "558180"
  },
  {
    "text": "at the response response fought back adjacent and it's kind of in the same shape as we asked for it many",
    "start": "558180",
    "end": "564810"
  },
  {
    "text": "differences some commas so that's what technically graticule is if this query",
    "start": "564810",
    "end": "570750"
  },
  {
    "text": "languages allows to specify queries in any shape and format which are exposed by a basically a data object and we can",
    "start": "570750",
    "end": "577920"
  },
  {
    "text": "do that in a single request so grassville is a specification under",
    "start": "577920",
    "end": "583380"
  },
  {
    "text": "standard it is created by Facebook I think in Bali 2011 and they've been",
    "start": "583380",
    "end": "588720"
  },
  {
    "text": "using it ever since and they open sourced it back in 2015 it's high-rise film in the sense that it's a graph and",
    "start": "588720",
    "end": "595710"
  },
  {
    "text": "you have objects and nested associations gradual kind of gives the power to the",
    "start": "595710",
    "end": "601530"
  },
  {
    "text": "clients ultimately clients specify their daily needs and it's strongly typed each",
    "start": "601530",
    "end": "608430"
  },
  {
    "text": "graph your server has an application specific type system we saw one of the",
    "start": "608430",
    "end": "613710"
  },
  {
    "text": "types in the last example now we'll talk about what graphical isn't because it's",
    "start": "613710",
    "end": "619470"
  },
  {
    "text": "quite a lot of misconception around for it is and what isn't it's not about graph databases even",
    "start": "619470",
    "end": "625410"
  },
  {
    "text": "though it's got QL in extending it's not about graph databases all it doesn't care where your transport protocol",
    "start": "625410",
    "end": "630720"
  },
  {
    "text": "leader is we can use that with HTTP and we tend to use it over HTTP rates agnostics it's in the spec it doesn't",
    "start": "630720",
    "end": "638100"
  },
  {
    "text": "care about your data storage you could use any data storage opposite since you want it can use a no sequel debt versus",
    "start": "638100",
    "end": "643830"
  },
  {
    "text": "sequel database it's all backed by albick record and we'll see in the example a little bit later how that",
    "start": "643830",
    "end": "649590"
  },
  {
    "text": "makes sense more and it's not limited to JavaScript Facebook's implementation is",
    "start": "649590",
    "end": "655680"
  },
  {
    "text": "a Java Script and that's what I'm going to demonstrate today but there's reference implementations in pretty much",
    "start": "655680",
    "end": "661110"
  },
  {
    "text": "all major languages now and some are very very very polished like sangria which is Skylar's version has a lot of",
    "start": "661110",
    "end": "668250"
  },
  {
    "text": "extra features but the dark version of the Java version Python this goal is rust there's various",
    "start": "668250",
    "end": "673620"
  },
  {
    "text": "implementations it's just suspect at the end of the day so now we can to know what graphical is",
    "start": "673620",
    "end": "679560"
  },
  {
    "text": "kind of how it had works roughly what problems does it help us solve now if we",
    "start": "679560",
    "end": "686699"
  },
  {
    "text": "think back to our example one of the main problems we had was around efficiency this concept of under",
    "start": "686699",
    "end": "691980"
  },
  {
    "text": "fetching and over fetching graph QL can avoid this because we scripture the day",
    "start": "691980",
    "end": "698639"
  },
  {
    "text": "are in a way that we bring back all the relevant data we need in the scripture and shape that we want so this is the",
    "start": "698639",
    "end": "704579"
  },
  {
    "text": "same query that we would have got in the rest of world but this is what it looks like in gradual so we have a patient and",
    "start": "704579",
    "end": "711600"
  },
  {
    "text": "we have some field which is like ID first name third and bit birth then we have some nested objects like",
    "start": "711600",
    "end": "716639"
  },
  {
    "text": "medications analogies but this is all brought back in single question and we can write the query on the left to give",
    "start": "716639",
    "end": "722130"
  },
  {
    "text": "us the shape of the data that we like and it becomes really powerful when you have multiple clients so if you had a",
    "start": "722130",
    "end": "728430"
  },
  {
    "text": "mobile application or you had a desktop or a web application they can all requested it in the shape and form that",
    "start": "728430",
    "end": "734699"
  },
  {
    "text": "you need you don't have to on the backend develop any extra work to do this whereas it a rest world you might",
    "start": "734699",
    "end": "740100"
  },
  {
    "text": "have to go see the back engage and say okay can I have some more in my resources for patients can you add a few more fields the Long's exposed in graph",
    "start": "740100",
    "end": "746850"
  },
  {
    "text": "collecting query however they feel see fit and there's a another fundamental difference where the graph clearly have",
    "start": "746850",
    "end": "752880"
  },
  {
    "text": "one endpoint its bulbs last usually graph QL it's the only important you really have where st have multiple",
    "start": "752880",
    "end": "758759"
  },
  {
    "text": "endpoints for all your resources with the graph clearly add objects to your graphs and then expose them by off what",
    "start": "758759",
    "end": "765540"
  },
  {
    "text": "the single endpoint it's a fundamental difference in the way the work ultimately and comes to maintenance and",
    "start": "765540",
    "end": "770939"
  },
  {
    "text": "developments well in the developer experience is a little bit different and we'll see more about that in a bit",
    "start": "770939",
    "end": "776240"
  },
  {
    "text": "so what about versioning and it's quite funny this actually because if you go onto the marketing website of graph QL",
    "start": "776240",
    "end": "782730"
  },
  {
    "text": "it's really really nice it's very polished but it says you don't really need to version and that's technically a bit of a life because you still have to",
    "start": "782730",
    "end": "789000"
  },
  {
    "text": "version but versioning with a graphical it forces you to think about backwards",
    "start": "789000",
    "end": "795120"
  },
  {
    "text": "compatibility compatibility and forward versioning strategies and it kind of",
    "start": "795120",
    "end": "801000"
  },
  {
    "text": "follows this principle what rests technically should follow its evolution and so what I mean by evolution is we're",
    "start": "801000",
    "end": "808230"
  },
  {
    "text": "supposed to really evolve our api's we can add new fields over time and then we can deprecated fields we don't use then",
    "start": "808230",
    "end": "815430"
  },
  {
    "text": "we can monitor the usage of these deprecated fields and then remove them when we see fit and graphically Isle has",
    "start": "815430",
    "end": "820980"
  },
  {
    "text": "two really cool features that help us with us one of them is a deprecated property so",
    "start": "820980",
    "end": "829829"
  },
  {
    "text": "there's some types that's going to kind of roll across the screen this image basically you can see into the director",
    "start": "829829",
    "end": "836639"
  },
  {
    "text": "and so it's deprecated what that actually means is for all old clients",
    "start": "836639",
    "end": "842130"
  },
  {
    "text": "which are consuming the same point they are able to still query that and get the",
    "start": "842130",
    "end": "847139"
  },
  {
    "text": "data back they need but any new clients will come on they will not see that in any documentation or any of the",
    "start": "847139",
    "end": "853079"
  },
  {
    "text": "intellisense because it's deprecated so that's a really nice way that you can to",
    "start": "853079",
    "end": "858510"
  },
  {
    "text": "handle this for you and the second part of grass URL conversion feature is that",
    "start": "858510",
    "end": "865709"
  },
  {
    "text": "because you send a query over the wire you kinda know the share from the structure and the fields that people",
    "start": "865709",
    "end": "871680"
  },
  {
    "text": "care about and what they're using so you can easily monitor field usage and then",
    "start": "871680",
    "end": "876839"
  },
  {
    "text": "you can say okay you've been using this field for like the last six months we're going to get rid of it now you might want to look at using this other one so",
    "start": "876839",
    "end": "883320"
  },
  {
    "text": "to track field usage compared to from a retrospective where you just get this whole chunk of JSON back and you don't",
    "start": "883320",
    "end": "889680"
  },
  {
    "text": "know what fields are actually using it's kind of a lot nicer and easier to deal with so that's kind of handled how it",
    "start": "889680",
    "end": "895800"
  },
  {
    "text": "handles versioning so introspection now this is probably one of my favorite",
    "start": "895800",
    "end": "901350"
  },
  {
    "text": "things about craft cool what graph kill means but introspection it's kind of like reflection for your API so with",
    "start": "901350",
    "end": "911190"
  },
  {
    "text": "graph QL you can actually query the schema types and the fields and you can see what operations you can actually do",
    "start": "911190",
    "end": "917040"
  },
  {
    "text": "on this request to a lend point without actually having to do anything other",
    "start": "917040",
    "end": "923310"
  },
  {
    "text": "than query the actual schema and this really lends itself to kinda like building tools so for instance if you",
    "start": "923310",
    "end": "930779"
  },
  {
    "text": "could query the whole of a schema you could get intellisense and autocomplete because you know what fields are",
    "start": "930779",
    "end": "936449"
  },
  {
    "text": "available you know operations are available so telephones kinda comes for free you can",
    "start": "936449",
    "end": "941699"
  },
  {
    "text": "do things like cogeneration because you know the types and we've defined a type say with that patient type you could",
    "start": "941699",
    "end": "947910"
  },
  {
    "text": "generate cold off the back of that by just clearing the scheme and saying okay I know the types of string I know what name is and I can kind of ultra generate",
    "start": "947910",
    "end": "954629"
  },
  {
    "text": "classes in any language that you can see fit so it's pretty cool for cogeneration it also gives you this concept of",
    "start": "954629",
    "end": "961980"
  },
  {
    "text": "documentation now again the marketing kind of field says that it's free",
    "start": "961980",
    "end": "967050"
  },
  {
    "text": "documentation and this is a documentation need for your OPI it's kind of a lie again it gives you this",
    "start": "967050",
    "end": "972360"
  },
  {
    "text": "ultra documentation about your types and your schemas and your operations but it doesn't take away from the point that you need documentation for your API",
    "start": "972360",
    "end": "979759"
  },
  {
    "text": "because the consumers at the end of this is great for developers that consumes every our API might need more",
    "start": "979759",
    "end": "985619"
  },
  {
    "text": "information things that aren't blatant like around great limits and some of the complexities around your API and how to",
    "start": "985619",
    "end": "991709"
  },
  {
    "text": "use it but this is a tool called graphical and this comes with every",
    "start": "991709",
    "end": "997920"
  },
  {
    "text": "graph QL server and basically this is built on introspection so this example",
    "start": "997920",
    "end": "1004490"
  },
  {
    "text": "will keep playing around in a loop but ultimately if you have a look at some of it like there's intelligence telling is",
    "start": "1004490",
    "end": "1010819"
  },
  {
    "text": "that is the first thing as we now go look at the documentation we can have a look at what's on that type and then",
    "start": "1010819",
    "end": "1017569"
  },
  {
    "text": "have a look at the surname and we can have that in and within query so this is",
    "start": "1017569",
    "end": "1023809"
  },
  {
    "text": "what we mean by auto documentation it gives you this types and these kind of",
    "start": "1023809",
    "end": "1028909"
  },
  {
    "text": "like query operations when I first saw this this kind of what made me really",
    "start": "1028909",
    "end": "1034760"
  },
  {
    "text": "think about graphical because it's not many of the tools allow you to have introspection the same sort of way when",
    "start": "1034760",
    "end": "1040520"
  },
  {
    "text": "I first saw it as kind of like damn that is super cool at least some people",
    "start": "1040520",
    "end": "1047839"
  },
  {
    "text": "laughed if everyone seen Friday they they'll get that reference so now we've",
    "start": "1047839",
    "end": "1054260"
  },
  {
    "text": "kind of seen how it works for is what problems aims to solve for us how does",
    "start": "1054260",
    "end": "1060679"
  },
  {
    "text": "it fit in the technical stack it says some people say it's a one tool mapping of a bit of your database now",
    "start": "1060679",
    "end": "1065990"
  },
  {
    "text": "technically that's not wrong you could use it as that but that's really not use case crash girl sits generally between a",
    "start": "1065990",
    "end": "1072740"
  },
  {
    "text": "transport protocol and the business logic as you can see I've got rest by",
    "start": "1072740",
    "end": "1078080"
  },
  {
    "text": "gradual it's not a replacement for rest it can work side by side rest you can",
    "start": "1078080",
    "end": "1083420"
  },
  {
    "text": "not use rest if you want anymore but it's not really a replacement it's an alternative for building a POS and the",
    "start": "1083420",
    "end": "1090110"
  },
  {
    "text": "two important parts about this diagram is the authentication and authorization these are not concerns handle by",
    "start": "1090110",
    "end": "1096560"
  },
  {
    "text": "graticule now you'll see blog posts about people saying I can do authentication graphic will and that's",
    "start": "1096560",
    "end": "1101570"
  },
  {
    "text": "fine but generally the best practice not to do that should happen further upstream if you use to anything net like",
    "start": "1101570",
    "end": "1108680"
  },
  {
    "text": "the ID server you have an open ID connect middleware you kind of handle most of that information they need to",
    "start": "1108680",
    "end": "1114200"
  },
  {
    "text": "pass down the relevant pieces of information to graticule because it is a global kind of context",
    "start": "1114200",
    "end": "1119720"
  },
  {
    "text": "object which we'll have a look at most and get that information back again further down to the authorization and what we mean by authorization is what",
    "start": "1119720",
    "end": "1127370"
  },
  {
    "text": "can they use to do what fields can the see and again that kind of lives with your business logic is specific to your",
    "start": "1127370",
    "end": "1132800"
  },
  {
    "text": "domain it doesn't really need to be in graphical and ultimately if it was in graphical and you had a business logic",
    "start": "1132800",
    "end": "1139430"
  },
  {
    "text": "in your REST API as well and you're trying to share this logic and you might have discrepancies between them so",
    "start": "1139430",
    "end": "1145430"
  },
  {
    "text": "generally kind of it sits as a kind of a thin wrapper of your API that's the way",
    "start": "1145430",
    "end": "1150440"
  },
  {
    "text": "I see Quester land that's where I see used in many places and I can see persistence is at the bottom persistence",
    "start": "1150440",
    "end": "1156980"
  },
  {
    "text": "it doesn't really matter like I said early it's backed by AB record and that will make more sense when we go through",
    "start": "1156980",
    "end": "1162260"
  },
  {
    "text": "the demo the ultimately persistence is just part of your business logic whatever you choose to use so now I want",
    "start": "1162260",
    "end": "1170660"
  },
  {
    "text": "to do a quick comparison between graphical and rest now this comparison is not which one's better or which one's",
    "start": "1170660",
    "end": "1177380"
  },
  {
    "text": "worse and it's not we'll get some logs tick boxes in which box it's ultimately to define and illustrate the differences",
    "start": "1177380",
    "end": "1184250"
  },
  {
    "text": "between the two technologies so if we have a think about the conceptual model",
    "start": "1184250",
    "end": "1190120"
  },
  {
    "text": "rest is based on this abstract concept of resources graph girls ultimately a",
    "start": "1190120",
    "end": "1195590"
  },
  {
    "text": "graph of objects and nested associations related operations what I mean by",
    "start": "1195590",
    "end": "1203050"
  },
  {
    "text": "related operations is if you is to add endpoint to a REST API you kinda know",
    "start": "1203050",
    "end": "1209290"
  },
  {
    "text": "because we use HTTP verbs in a standard way what you're going to get when you do a get or post or a pull with graticule",
    "start": "1209290",
    "end": "1215710"
  },
  {
    "text": "when you add an object to our graph or you add attack to the schema there's no real way that you could kind of guess",
    "start": "1215710",
    "end": "1222040"
  },
  {
    "text": "that you'd have to look by introspection to see what kind of like what can we do with that type come we insert delete you",
    "start": "1222040",
    "end": "1228880"
  },
  {
    "text": "can query it so that's a fundamental difference between the two so",
    "start": "1228880",
    "end": "1234160"
  },
  {
    "text": "introspection which I talked about previously graph QL is built on inspection ultimately rest didn't really",
    "start": "1234160",
    "end": "1240760"
  },
  {
    "text": "have a standard way of doing this you can kind of things like tools like swagger for your rest api our open api",
    "start": "1240760",
    "end": "1247510"
  },
  {
    "text": "might have some features around this but there's no real standard way of doing this and it's not really mentioned in the constraints either for rest so data",
    "start": "1247510",
    "end": "1255430"
  },
  {
    "text": "typing so graph QL has a type system and it's strongly typed in terms of inputs and outputs rest is weak in that sense",
    "start": "1255430",
    "end": "1263530"
  },
  {
    "text": "and it's loosely covered and disconnected between the client and the server and then real-time so what I mean",
    "start": "1263530",
    "end": "1270070"
  },
  {
    "text": "by real time is push-based api's rest really doesn't have a way to deal with",
    "start": "1270070",
    "end": "1275860"
  },
  {
    "text": "push birthday P X is stateless and you generally wouldn't use rest to the Critical based API anyway but graph QL",
    "start": "1275860",
    "end": "1282790"
  },
  {
    "text": "has something called subscriptions which allow you to curate these stateful subscriptions like push notification",
    "start": "1282790",
    "end": "1288850"
  },
  {
    "text": "style patterns in your application that's technically not really in the RFC",
    "start": "1288850",
    "end": "1294580"
  },
  {
    "text": "spec yet it's been flowed in and out but it's supported by some of the external",
    "start": "1294580",
    "end": "1299740"
  },
  {
    "text": "libraries but it's not supported in the one that I'm going to demonstrate with the Facebook's graph QL implementation",
    "start": "1299740",
    "end": "1305320"
  },
  {
    "text": "well not yet it's supposed to come probably the next month or so but it's not here yet so now we've got",
    "start": "1305320",
    "end": "1313030"
  },
  {
    "text": "understanding of what graphical is where does what does it do kind of a look at",
    "start": "1313030",
    "end": "1319000"
  },
  {
    "text": "some of the core concepts of what graphical is and a little bit more depth so I've broken it into three different",
    "start": "1319000",
    "end": "1326680"
  },
  {
    "text": "areas so the first in the tax system the type system generally defines all our objects",
    "start": "1326680",
    "end": "1333080"
  },
  {
    "text": "that we can query on in our API then we have operations graphically our logic",
    "start": "1333080",
    "end": "1339529"
  },
  {
    "text": "query data also allows you mutate there we can do inserts deletes and routes sorry and writes and also it has",
    "start": "1339529",
    "end": "1347210"
  },
  {
    "text": "descriptions and then the schema is a kind of the glue that holds all this stuff together it's kinda like the entry point into",
    "start": "1347210",
    "end": "1353390"
  },
  {
    "text": "your graph of how you can query the STEM fields on what when you do through these fields what happens and what response do",
    "start": "1353390",
    "end": "1359390"
  },
  {
    "text": "you get back in terms of the type so types are on the right we have a",
    "start": "1359390",
    "end": "1364700"
  },
  {
    "text": "medication type and a patient type and we call these object types and most of your graphical API implementation will",
    "start": "1364700",
    "end": "1372620"
  },
  {
    "text": "generally be around object types so we've got some properties or they're called in the graphical world fields",
    "start": "1372620",
    "end": "1378679"
  },
  {
    "text": "which are like ID identifiers first name and surname and this is we have these",
    "start": "1378679",
    "end": "1383690"
  },
  {
    "text": "back-to-back scalar types so your integers strings balloons and floats and",
    "start": "1383690",
    "end": "1388940"
  },
  {
    "text": "you can create your own scalar types so the extensions for that the tax system supports enums so if you've used enums",
    "start": "1388940",
    "end": "1394760"
  },
  {
    "text": "in any major language it's technically the same supports lists so as you can see medications field and the",
    "start": "1394760",
    "end": "1400970"
  },
  {
    "text": "medications is basically donated by an array so the square brackets around it there's actually an exclamation mark on",
    "start": "1400970",
    "end": "1407389"
  },
  {
    "text": "the identifier next to the string as want to point out that means it's non nillable and also type support is",
    "start": "1407389",
    "end": "1413600"
  },
  {
    "text": "concept of interfaces so interfaces are just like you used in c-sharp or Java",
    "start": "1413600",
    "end": "1418970"
  },
  {
    "text": "it's allows you to share common fields between types and unions are kind of",
    "start": "1418970",
    "end": "1424190"
  },
  {
    "text": "like interfaces but they don't share any common functionality in terms of fields",
    "start": "1424190",
    "end": "1429850"
  },
  {
    "text": "so the resolve function now technically this is where all the magic happens",
    "start": "1429909",
    "end": "1435139"
  },
  {
    "text": "so only less we see is how you implement the actual type in JavaScript using the",
    "start": "1435139",
    "end": "1442130"
  },
  {
    "text": "Facebook implementation so we have an object type which has a name of patient and description and we have some fields",
    "start": "1442130",
    "end": "1448220"
  },
  {
    "text": "I'm going to name field but the most important thing about this is that all the fields in our type have a resolved",
    "start": "1448220",
    "end": "1455570"
  },
  {
    "text": "function and the result function is where we call arbitrary code to actually resolve that field",
    "start": "1455570",
    "end": "1461620"
  },
  {
    "text": "so for instance name is just returning a hard-coded string tongue stud but in the",
    "start": "1461620",
    "end": "1468760"
  },
  {
    "text": "real world example you might have this mapping to another object you could call",
    "start": "1468760",
    "end": "1474429"
  },
  {
    "text": "your business logic could call an existing rest api you could pretty much",
    "start": "1474429",
    "end": "1480520"
  },
  {
    "text": "do anything that you want in a normal it's a normal function so anything you can think of returning static there it",
    "start": "1480520",
    "end": "1485740"
  },
  {
    "text": "can do that and then here generally where the magic happens are gradual what happens if you extend a query it's",
    "start": "1485740",
    "end": "1491559"
  },
  {
    "text": "ultimately gets executed and it goes through and recursively looks at all the fields and looks at all the results on",
    "start": "1491559",
    "end": "1497350"
  },
  {
    "text": "shion's and then it basically execute each is also function in power so this is where kind of our logic lives so",
    "start": "1497350",
    "end": "1505750"
  },
  {
    "text": "operations so we've talked about love about query just want to kind of go through another example with queries so",
    "start": "1505750",
    "end": "1511570"
  },
  {
    "text": "queries allow us to retrieve death so this is graphical and I've got an example of the query so we to create a",
    "start": "1511570",
    "end": "1517750"
  },
  {
    "text": "query we use the keyword query and then we have a name which is optional we don't have to have the name we can pass",
    "start": "1517750",
    "end": "1523600"
  },
  {
    "text": "arguments to queries and the brackets between the ID and the closing bracket",
    "start": "1523600",
    "end": "1528970"
  },
  {
    "text": "is basically called a selection set and inside of selection set of the fields that we care about and then we've got medications which is a nested object so",
    "start": "1528970",
    "end": "1537039"
  },
  {
    "text": "that's generally how we're going to write queries in that side kind of script refused going to call it from an external source like postman I'll make a",
    "start": "1537039",
    "end": "1543460"
  },
  {
    "text": "HTTP request over to your graph to your server so mutations so graphical is not only about",
    "start": "1543460",
    "end": "1550299"
  },
  {
    "text": "reads a lot of apologies for reads only and it's very good at that but you can actually mutate a cancer delete and",
    "start": "1550299",
    "end": "1557350"
  },
  {
    "text": "remove but mutations are kind of like it's like a bolt on I always see them as",
    "start": "1557350",
    "end": "1563679"
  },
  {
    "text": "they're not they don't feel as natural as queries but the kind of an RPC style in terms of their naming so grow a",
    "start": "1563679",
    "end": "1569950"
  },
  {
    "text": "mutation hit with the mutation keyword and then give it a mutation a name and again that's optional but you can see",
    "start": "1569950",
    "end": "1576580"
  },
  {
    "text": "the input now is actually an object and this is a special thing about mutations you can feed in a complex object which",
    "start": "1576580",
    "end": "1583390"
  },
  {
    "text": "is different to the type you're returning so it's a concept called an input object so if you are debt restructuring in a different way than",
    "start": "1583390",
    "end": "1588669"
  },
  {
    "text": "you return it it allows you to have this clear separation between the two mutations always have to return some",
    "start": "1588669",
    "end": "1595100"
  },
  {
    "text": "Lefter return type so in this scenario telling the patient we just add to the system and that's useful for when you",
    "start": "1595100",
    "end": "1602070"
  },
  {
    "text": "could doing any further pre-processing so the schema so as I said previously",
    "start": "1602070",
    "end": "1608190"
  },
  {
    "text": "the scheme is kinda like the entry points into the graph and it's basically how we can see which fields we can query",
    "start": "1608190",
    "end": "1614070"
  },
  {
    "text": "on and what they return so this is how you define a query it's already schema",
    "start": "1614070",
    "end": "1619370"
  },
  {
    "text": "so it has three properties this query mutation subscription queries are",
    "start": "1619370",
    "end": "1625260"
  },
  {
    "text": "mandatory in any graphical schema you have to have a query mutation subscriptions and now you don't have to",
    "start": "1625260",
    "end": "1630750"
  },
  {
    "text": "implement them staged extras ultimately so what we have here is your aquarium with object tab and if we look at the",
    "start": "1630750",
    "end": "1637049"
  },
  {
    "text": "fields which is the most important bit we have this patient and the patient is what we're actually going to query on so",
    "start": "1637049",
    "end": "1642720"
  },
  {
    "text": "if you think back to what was in the previous example who is quitting on patient and the arguments was the NHS",
    "start": "1642720",
    "end": "1647909"
  },
  {
    "text": "number the HS number just a unique identifier for people in the UK who are in hospitals and you get it when you a",
    "start": "1647909",
    "end": "1654120"
  },
  {
    "text": "child but you see the result function here is actually calling a database and",
    "start": "1654120",
    "end": "1661649"
  },
  {
    "text": "getting a patient if you look at the type is the patient type we've created earlier so ultimately what's is what's",
    "start": "1661649",
    "end": "1668520"
  },
  {
    "text": "going to happen is if I search for patient and passion and his number and pick the field of the patient that",
    "start": "1668520",
    "end": "1673830"
  },
  {
    "text": "resolved function is going to get cold and that's what God who makes a deck with called I could make an API call but",
    "start": "1673830",
    "end": "1678840"
  },
  {
    "text": "in this instance it basically goes and gets a patient information so we've kind",
    "start": "1678840",
    "end": "1685080"
  },
  {
    "text": "of had a look at all of the core concepts and what graphical isn't and what not now on kind of jump into a demo",
    "start": "1685080",
    "end": "1690690"
  },
  {
    "text": "and kind of go a little bit deeper with it and kind of show you how to create like a graph you'll if you have some",
    "start": "1690690",
    "end": "1696809"
  },
  {
    "text": "scratch so first thing you want to do is we have there's two parts to this",
    "start": "1696809",
    "end": "1703010"
  },
  {
    "text": "there's a single page application which I'll show you now so we have this very",
    "start": "1703010",
    "end": "1710070"
  },
  {
    "text": "simple angular application it's built with asp.net cores its host and it's using angular to a type script I think",
    "start": "1710070",
    "end": "1716190"
  },
  {
    "text": "and it's web pack is going to be doing all the bundling and kind of the all refreshing you'll see hot module",
    "start": "1716190",
    "end": "1721860"
  },
  {
    "text": "replacement it's called so we have this whole screen and we have some patients this is kinda like the demo that we saw",
    "start": "1721860",
    "end": "1728640"
  },
  {
    "text": "right to start and with our mock-up well have the list of patients and then we can drill down to these patients to kinda see a patient summary and then we",
    "start": "1728640",
    "end": "1736380"
  },
  {
    "text": "have our graph QL server which currently is a simple web server and this is just basically an old case web server so",
    "start": "1736380",
    "end": "1743040"
  },
  {
    "text": "Express server but it runs on not yet so the first thing we want to do is I'll",
    "start": "1743040",
    "end": "1750210"
  },
  {
    "text": "have a show you around the structure so the client is just basically very simple of a client app and inside app we have a",
    "start": "1750210",
    "end": "1756480"
  },
  {
    "text": "bunch of components and there's nothing really particularly special about this then if we have a look at the server the",
    "start": "1756480",
    "end": "1765420"
  },
  {
    "text": "server is our graphic QL endpoint so we have the server GS file which is kind of like our entry point and we have this",
    "start": "1765420",
    "end": "1771780"
  },
  {
    "text": "schema folder we're kind of broken things up into mutations queries and types and we have this schema tiers we",
    "start": "1771780",
    "end": "1778410"
  },
  {
    "text": "have kind of a debt-based context which is comparative and I'll just show you the database that we're going to use so",
    "start": "1778410",
    "end": "1784050"
  },
  {
    "text": "the database is a null sequel a sorry a sequel like one I can actually zoom any further into this because this",
    "start": "1784050",
    "end": "1789480"
  },
  {
    "text": "supplication doesn't Columbia to do it and so there's two tables patient and patient medication ultimately it's a",
    "start": "1789480",
    "end": "1795090"
  },
  {
    "text": "very small base so if we go back the first thing I want to do have a look at",
    "start": "1795090",
    "end": "1800550"
  },
  {
    "text": "the server that's wrong file so basically this is a very simple expressive I've imported all the things",
    "start": "1800550",
    "end": "1808200"
  },
  {
    "text": "that we're going to use because I didn't want to download and kind of install the packages because that's kind of a waste of time it's not really what I want to",
    "start": "1808200",
    "end": "1814170"
  },
  {
    "text": "show you so currently as you can see any quest that comes in is just going to turn simple web server",
    "start": "1814170",
    "end": "1819570"
  },
  {
    "text": "I've actually installed the Express graph QL which is our basically our middleware and the reference",
    "start": "1819570",
    "end": "1824910"
  },
  {
    "text": "implementation for graticule in JavaScript and it's written by Facebook so the first thing we want to",
    "start": "1824910",
    "end": "1830100"
  },
  {
    "text": "do is we want to add our graphical endpoint so we feed in the schema which",
    "start": "1830100",
    "end": "1837030"
  },
  {
    "text": "is currently empty but we've set graphical to true and graphical was what I was saying before was this tool that",
    "start": "1837030",
    "end": "1843180"
  },
  {
    "text": "used built on introspection and you've probably seen in some of the examples so the next thing we want to do is want to",
    "start": "1843180",
    "end": "1848910"
  },
  {
    "text": "kind of define the type because currently that this graphical servers useless and it'll just throw an error because nothing in the schema so we want",
    "start": "1848910",
    "end": "1855570"
  },
  {
    "text": "to firstly find out kind of a structure and our system is around patient sorry medical it's a medical API so it's",
    "start": "1855570",
    "end": "1861510"
  },
  {
    "text": "around patients and medications analogy so if we have a look into our patient we can add a",
    "start": "1861510",
    "end": "1869480"
  },
  {
    "text": "patient type in so basically I've imported all the types I'm going to use of the strings integers boolean slopes",
    "start": "1869480",
    "end": "1876330"
  },
  {
    "text": "lace enums and object types and all we have done here is define our object type and this is basically very",
    "start": "1876330",
    "end": "1882770"
  },
  {
    "text": "run-of-the-mill object that we've got some fields IV first name surname their birth and then chest number so that",
    "start": "1882770",
    "end": "1889680"
  },
  {
    "text": "gives us our describes the idea but how can we actually query that what we want to get back when we want to return this type so what we're going to do then is",
    "start": "1889680",
    "end": "1898650"
  },
  {
    "text": "we're going to actually add in the resolve function so I've imported a",
    "start": "1898650",
    "end": "1904230"
  },
  {
    "text": "patient and this is basically gives to that patient type and we are basically added some description which we'll see",
    "start": "1904230",
    "end": "1909690"
  },
  {
    "text": "in the graphical document editor and then hazily the most important is this",
    "start": "1909690",
    "end": "1914730"
  },
  {
    "text": "resolved function so this is all from so currently I'm just returning some arbitrary day it is basically just with",
    "start": "1914730",
    "end": "1920160"
  },
  {
    "text": "object so now if we implement our schema",
    "start": "1920160",
    "end": "1925400"
  },
  {
    "text": "so all I've done is say okay when we search these fields patient then we're",
    "start": "1929210",
    "end": "1934860"
  },
  {
    "text": "going to basically go back to our patient query we prayed and it's of a patient type and this is what happens in",
    "start": "1934860",
    "end": "1940830"
  },
  {
    "text": "resolve it so I've got node monitoring in the background so it's kind of like rebuilding server all the time and when",
    "start": "1940830",
    "end": "1946860"
  },
  {
    "text": "I change the file or save a file so technically if we go back to here and have a look we should see the graticule",
    "start": "1946860",
    "end": "1953850"
  },
  {
    "text": "endpoint we'll get rid of this and we have a look in our documentation we have",
    "start": "1953850",
    "end": "1959280"
  },
  {
    "text": "this root query tab which we prayed a patient have a patient type and now if",
    "start": "1959280",
    "end": "1964350"
  },
  {
    "text": "we use to write the query against this patient we can see we get a tell isense",
    "start": "1964350",
    "end": "1969870"
  },
  {
    "text": "have to be the NHS Cambrian but I can put in anything because I'm not using that in the backend currently let's type",
    "start": "1969870",
    "end": "1976770"
  },
  {
    "text": "in first-name we should see the static date that we get back so this is a test patient now this that's basically it",
    "start": "1976770",
    "end": "1983610"
  },
  {
    "text": "that's graphed well summed up in the tea in terms of its query language and how to set up regress to your server",
    "start": "1983610",
    "end": "1989340"
  },
  {
    "text": "everything else now is just flexing and embellishing the book the kind of structure that we've made but ultimately",
    "start": "1989340",
    "end": "1996210"
  },
  {
    "text": "- you have a schema for your entry point you say how you're going to resolve this and that's generally just rinse and",
    "start": "1996210",
    "end": "2002210"
  },
  {
    "text": "repeat that's the kind of pattern that's used so next what I want to do is I want to add actually in an enum because",
    "start": "2002210",
    "end": "2009730"
  },
  {
    "text": "patient we need to know gender so if I go to types for it this separately we",
    "start": "2009730",
    "end": "2019970"
  },
  {
    "text": "have this graph QL enum type and basically this value and value 1 2 & 3 what it generally means is it's just",
    "start": "2019970",
    "end": "2026210"
  },
  {
    "text": "mapping in the database it might vary several one two or three is my kind of indicator sort of enum type so what we",
    "start": "2026210",
    "end": "2032900"
  },
  {
    "text": "can do then is we're going to port it into this file so we can actually use it as a type and then we can add this to",
    "start": "2032900",
    "end": "2040820"
  },
  {
    "text": "our loops so we've added the gender in",
    "start": "2040820",
    "end": "2047480"
  },
  {
    "text": "and use our gender enum now if we go back let's refresh this if we look at",
    "start": "2047480",
    "end": "2054409"
  },
  {
    "text": "here should see now we have gender if I was to put gender in it's hard-coded to",
    "start": "2054410",
    "end": "2061159"
  },
  {
    "text": "one so we'll see male so now we've kind of enriched our data model a little bit",
    "start": "2061160",
    "end": "2067040"
  },
  {
    "text": "more what I'm going to do now a little bit further and we're actually going to",
    "start": "2067040",
    "end": "2073190"
  },
  {
    "text": "connect now to a database and actually show you something a little bit more meaningful than other than an arbitrary code back resolve function so the first",
    "start": "2073190",
    "end": "2083360"
  },
  {
    "text": "thing we need to do is go to the server",
    "start": "2083360",
    "end": "2089350"
  },
  {
    "text": "and I've create this kind of like concept of a dbcontext I've used to entry framework or anything I can Oh",
    "start": "2092360",
    "end": "2098460"
  },
  {
    "text": "aroma I've kind of just mopped my old version of it and what i'm doing here is passing in this sequel like library",
    "start": "2098460",
    "end": "2105500"
  },
  {
    "text": "which is basically how we communicate with the sequel like database that we have so inside ivv context the currently",
    "start": "2105500",
    "end": "2112800"
  },
  {
    "text": "empty so what I need to do is I will need to add in the query so this is how",
    "start": "2112800",
    "end": "2119220"
  },
  {
    "text": "a query to get a patient it's very simple it's just a simple D we get patent DHS number and just return back",
    "start": "2119220",
    "end": "2126120"
  },
  {
    "text": "certain set of bills so now we actually need to return change our result function but before we can do that we",
    "start": "2126120",
    "end": "2131910"
  },
  {
    "text": "have to add some boilerplate coding because we currently don't know about this DB context anywhere so we have to",
    "start": "2131910",
    "end": "2138900"
  },
  {
    "text": "kind of pass it around or pass it to graph QL to pass on to our result field",
    "start": "2138900",
    "end": "2144320"
  },
  {
    "text": "so what I've done here is is a DB context the parameter and this context",
    "start": "2144320",
    "end": "2150660"
  },
  {
    "text": "obviously the special object it's a global object that you can pass information to every time you run a query you can pass the state of your",
    "start": "2150660",
    "end": "2157650"
  },
  {
    "text": "environment at that point to this object so you can have things like authentication viewers and things like",
    "start": "2157650",
    "end": "2163500"
  },
  {
    "text": "that so you can read about their permissions and so on and so forth some spies on the DB context every time we do",
    "start": "2163500",
    "end": "2169110"
  },
  {
    "text": "this so now what we need to do is just quickly bootstrap the application",
    "start": "2169110",
    "end": "2174420"
  },
  {
    "text": "because we're using sequel lights all",
    "start": "2174420",
    "end": "2179610"
  },
  {
    "text": "we're doing is opening a database connection once a application runs we're kind of setting a trace on the queries they're coming sorry that we're",
    "start": "2179610",
    "end": "2186330"
  },
  {
    "text": "executing any errors and then if it's all good we kind of launch application clear so now the kind of implant",
    "start": "2186330",
    "end": "2192390"
  },
  {
    "text": "involves things we have to change our resolve function so currently we have",
    "start": "2192390",
    "end": "2198390"
  },
  {
    "text": "this arbitrary code returns back an object now we'll actually want to call that database method it's ultimately",
    "start": "2198390",
    "end": "2207090"
  },
  {
    "text": "passed this context through and it wants dbcontext get patient get a chest number so now if we go back and I was to",
    "start": "2207090",
    "end": "2214890"
  },
  {
    "text": "refresh this try query it comes back as no it is now actually calling DuBose we're not using",
    "start": "2214890",
    "end": "2221480"
  },
  {
    "text": "that test data files to go to steal an ID and put this in its place then we",
    "start": "2221480",
    "end": "2233390"
  },
  {
    "text": "have basically a connection now to the database and that's how you can pass information around so now we've got the",
    "start": "2233390",
    "end": "2239029"
  },
  {
    "text": "basics and we've got our connection to the database established I want to do is add in the medications which is kind of",
    "start": "2239029",
    "end": "2246259"
  },
  {
    "text": "like what we've seen before we first have to add in a tight so our medication",
    "start": "2246259",
    "end": "2251720"
  },
  {
    "text": "types this is basically got a couple of fields on and then we have to have a way",
    "start": "2251720",
    "end": "2257480"
  },
  {
    "text": "of how we're going to query this from the database so it's just a simple view",
    "start": "2257480",
    "end": "2263599"
  },
  {
    "text": "and get back all the medications by patient ID and it sets expose this as",
    "start": "2263599",
    "end": "2270650"
  },
  {
    "text": "our data structure we actually need to add this type on to our patient it's actually a nested Association so we'll",
    "start": "2270650",
    "end": "2279289"
  },
  {
    "text": "import that scroll down",
    "start": "2279289",
    "end": "2283690"
  },
  {
    "text": "so now we have these medications and interesting that we're resolving these on this type not resolved into patient",
    "start": "2288469",
    "end": "2296130"
  },
  {
    "text": "query because you can resolve fields at any level as we see every field has a result function so now as it's actually",
    "start": "2296130",
    "end": "2303779"
  },
  {
    "text": "worked and I go back hours to fresh this fires two types of medications now we",
    "start": "2303779",
    "end": "2309900"
  },
  {
    "text": "have a nested Association I can type in sir the name of the medication if we",
    "start": "2309900",
    "end": "2315630"
  },
  {
    "text": "close this we've kind of got now our association so that's kind of how you",
    "start": "2315630",
    "end": "2322109"
  },
  {
    "text": "build up your kind of data source or the date that you want to expose to the",
    "start": "2322109",
    "end": "2327809"
  },
  {
    "text": "server territory to the end client who's consuming your graphical endpoint so now",
    "start": "2327809",
    "end": "2333779"
  },
  {
    "text": "we can look to queries I want to look at mutations so I've already created an ad mutation file so the first thing I want",
    "start": "2333779",
    "end": "2341729"
  },
  {
    "text": "to do is to actually add in the input type that we care about so as I",
    "start": "2341729",
    "end": "2348450"
  },
  {
    "text": "discussed previously you can have a separate graphical input object type usually you see the object type in the",
    "start": "2348450",
    "end": "2353579"
  },
  {
    "text": "info object type is a complex type that you can use with capacity mutations I didn't have to marry up with your",
    "start": "2353579",
    "end": "2359460"
  },
  {
    "text": "patient type so basically I'll edit that and what's gonna happen here is this is",
    "start": "2359460",
    "end": "2364890"
  },
  {
    "text": "how we're going to query I also added a mutation in it's going to return the patient type and the result",
    "start": "2364890",
    "end": "2370769"
  },
  {
    "text": "forms is going to actually add this patient this patient when we add it which to return back the one we've",
    "start": "2370769",
    "end": "2376289"
  },
  {
    "text": "inserted because our arguments input takes into patient input type above so",
    "start": "2376289",
    "end": "2382109"
  },
  {
    "text": "if I was to change the database context to actually have a real implementation",
    "start": "2382109",
    "end": "2390349"
  },
  {
    "text": "so if i can format this",
    "start": "2390349",
    "end": "2394190"
  },
  {
    "text": "kind of did something but basically we're inserting patient and we're returning the patient back we just",
    "start": "2395750",
    "end": "2401810"
  },
  {
    "text": "inserted so now we need to add that to our schema currently the schema doesn't know anything about mutations it only",
    "start": "2401810",
    "end": "2408290"
  },
  {
    "text": "knows about queries so anything if it's like an entry point so as you can see",
    "start": "2408290",
    "end": "2415819"
  },
  {
    "text": "now we've got this add mutation which is imported and similar to have the root query tap we have our root mutation type",
    "start": "2415819",
    "end": "2421310"
  },
  {
    "text": "and when we search for add patient it's going to run the mutation that we've actually just created so now if we go",
    "start": "2421310",
    "end": "2428930"
  },
  {
    "text": "back as refresh this to remove it at mutation I can do add patient and you'll",
    "start": "2428930",
    "end": "2437329"
  },
  {
    "text": "see now this is actually a complex type of had a first name I have to fill all this in what surname",
    "start": "2437329",
    "end": "2446890"
  },
  {
    "text": "so actually this is interesting so I've just filled these in now and it's still got red squiggles under it this is what",
    "start": "2456940",
    "end": "2463460"
  },
  {
    "text": "I was referring to himself a validation it basically says the first name surname test it says it's an HS field which we",
    "start": "2463460",
    "end": "2471530"
  },
  {
    "text": "need to supply and it's expected cuz it's not knowable so if I supply this",
    "start": "2471530",
    "end": "2478930"
  },
  {
    "text": "one two three four and now I can change the first name because we have to have",
    "start": "2479380",
    "end": "2485150"
  },
  {
    "text": "return time excuse that we have that so let's just show it's not smoke and mirrors and at the bottom we've got a",
    "start": "2485150",
    "end": "2492560"
  },
  {
    "text": "nine fluency test test too so that's the only how you handle mutations so we've",
    "start": "2492560",
    "end": "2498410"
  },
  {
    "text": "kind of nearly come to the conclusion without graphical end point but we have one last query that we need to run if we",
    "start": "2498410",
    "end": "2506090"
  },
  {
    "text": "think back to our application then we have this patients list we currently",
    "start": "2506090",
    "end": "2511460"
  },
  {
    "text": "have another query to kind of give us that information back they're all there but because we've defined the type I'm",
    "start": "2511460",
    "end": "2519440"
  },
  {
    "text": "doing a lot of boilerplate it's fairly easy to add in so the first thing we do is just add a query of how",
    "start": "2519440",
    "end": "2526700"
  },
  {
    "text": "we get this information from the database so all we have here is get all",
    "start": "2526700",
    "end": "2535010"
  },
  {
    "text": "patients and basically it's a DB all I'll return everything now if we come",
    "start": "2535010",
    "end": "2541760"
  },
  {
    "text": "across have a look at our queries we can add a query to actually handle this",
    "start": "2541760",
    "end": "2549010"
  },
  {
    "text": "so what we're saying is when we type all patients in our query we want a list of the patient types which we've already",
    "start": "2551080",
    "end": "2556610"
  },
  {
    "text": "defined and then willing to call our database context so if we go back and we",
    "start": "2556610",
    "end": "2563930"
  },
  {
    "text": "refresh this",
    "start": "2563930",
    "end": "2566589"
  },
  {
    "text": "700 interesting right so as you've seen this",
    "start": "2569460",
    "end": "2575290"
  },
  {
    "text": "is highlight something you can add associations and you can add types in keynote stereo stuff but he ultimately",
    "start": "2575290",
    "end": "2581110"
  },
  {
    "text": "still has to define in the schema because I didn't I don't actually add this into the schema the schema has no",
    "start": "2581110",
    "end": "2586480"
  },
  {
    "text": "way currently all it cares about its patients in the root query type I've defined everything else but I haven't added it actually to the schema so",
    "start": "2586480",
    "end": "2592360"
  },
  {
    "text": "that's why when I Skyped me I didn't see all patients and see anything so what we have to do we have to add this into the",
    "start": "2592360",
    "end": "2598540"
  },
  {
    "text": "schema and now it's exposed to basically our consumers our API so now for us to",
    "start": "2598540",
    "end": "2604180"
  },
  {
    "text": "do this and all patients we can see all the patients certainly first name and",
    "start": "2604180",
    "end": "2609340"
  },
  {
    "text": "then I can do said to get the medications illa name of them and that's",
    "start": "2609340",
    "end": "2616420"
  },
  {
    "text": "kind of fulfilled everything that we need to do for our UI but there's one problem here and some of you might have noticed",
    "start": "2616420",
    "end": "2623170"
  },
  {
    "text": "that you might not if I just bring up the console I'm actually log in the sequel queries and if you look what's",
    "start": "2623170",
    "end": "2630760"
  },
  {
    "text": "happened is it runs one query to get all the patients but then it runs each resolve function individually for its",
    "start": "2630760",
    "end": "2637690"
  },
  {
    "text": "medications that's not good my baby is really small so it looks fast and quick",
    "start": "2637690",
    "end": "2642820"
  },
  {
    "text": "in the real world you'll get punished for that unfortunately and get away with it here but it's not really performant",
    "start": "2642820",
    "end": "2649600"
  },
  {
    "text": "way of doing it so there's something called data loader and a lot allows to back up basically a bunch of IDs and run",
    "start": "2649600",
    "end": "2656500"
  },
  {
    "text": "all those IDs in one request instead of adding them individually and running them against each resolve so I'm going",
    "start": "2656500",
    "end": "2663610"
  },
  {
    "text": "to do is we're going to fix this so it's fairly trivial to fix so the first thing",
    "start": "2663610",
    "end": "2670210"
  },
  {
    "text": "I need to do is I need to add in load S which is a utility library because I'm going to do a group by and I'm not going",
    "start": "2670210",
    "end": "2675730"
  },
  {
    "text": "to write that myself",
    "start": "2675730",
    "end": "2678150"
  },
  {
    "text": "and so what we need to do is because our query it's by ID I need to change it to kind of and any aura need so what we've",
    "start": "2682150",
    "end": "2693339"
  },
  {
    "text": "got here is I've changes query so it'll take in like a comma separated listener and all the scope queries it's going to",
    "start": "2693339",
    "end": "2700630"
  },
  {
    "text": "group by some fields or the patient ID and marry up the patient's medications with the correct patient if it doesn't",
    "start": "2700630",
    "end": "2705640"
  },
  {
    "text": "have any medications it will create an empty array so that's pretty much a query interpret done but we need to",
    "start": "2705640",
    "end": "2711730"
  },
  {
    "text": "change the service slightly which says data loaders we've run her request so basically when",
    "start": "2711730",
    "end": "2724269"
  },
  {
    "text": "we make a query request it's going to come in to the same point and we're going to create this new loader every time we do it and it's called pressure medications and it's going to state log",
    "start": "2724269",
    "end": "2731289"
  },
  {
    "text": "is going to execute our get patient medications that's ultimately what it's going to do and that's the query that",
    "start": "2731289",
    "end": "2736720"
  },
  {
    "text": "we've kind of changing that date with context as you can see in the context objects delivering further down we actually now passing these loaders",
    "start": "2736720",
    "end": "2742089"
  },
  {
    "text": "through so capacity is loaded through to any resolve function now that we need to do clog available so that's kind of the",
    "start": "2742089",
    "end": "2749829"
  },
  {
    "text": "boiler plate done so in the patient query instead of sorry in the type for the patient instead of resolving them",
    "start": "2749829",
    "end": "2761430"
  },
  {
    "text": "individually we can these our loader and",
    "start": "2761730",
    "end": "2768400"
  },
  {
    "text": "called a load function and basically it's going to batch up all the patient IDs so now for us to go back where you",
    "start": "2768400",
    "end": "2776140"
  },
  {
    "text": "run this query still works so what the same data but now if we have a look at",
    "start": "2776140",
    "end": "2782170"
  },
  {
    "text": "our query oops I wouldn't have to now we",
    "start": "2782170",
    "end": "2787930"
  },
  {
    "text": "don't have the same I think just nine before and you can see it's got it's actually got an incident with all the",
    "start": "2787930",
    "end": "2793059"
  },
  {
    "text": "IDS so this is one of the kind of things that when one of the considerations a little bit further on around has to be",
    "start": "2793059",
    "end": "2798970"
  },
  {
    "text": "careful about optimizing queries because you can't get burned quite easily with the simple resolve functions are",
    "start": "2798970",
    "end": "2804220"
  },
  {
    "text": "available because it they executed all the time so as you saw if you had nested",
    "start": "2804220",
    "end": "2809380"
  },
  {
    "text": "lists and you didn't have a loader you would basically execute that every time that you're calling is parent so you've got M plus one problem",
    "start": "2809380",
    "end": "2815589"
  },
  {
    "text": "but that's generally our in point created we could do mutations we've looked at schemas we looked at types we",
    "start": "2815589",
    "end": "2820749"
  },
  {
    "text": "looked at queries now how do we actually hook that changing this event value other than postman so in our client I'm",
    "start": "2820749",
    "end": "2829119"
  },
  {
    "text": "actually using a graphic UL client called Apollo client to kind of handle the calls for me so I actually imported",
    "start": "2829119",
    "end": "2836589"
  },
  {
    "text": "over and it's basically this library called Apollo angular so what article II",
    "start": "2836589",
    "end": "2841960"
  },
  {
    "text": "does it gives you a lot of stuff around batching and caching to adapt employment himself and so if I was to change this",
    "start": "2841960",
    "end": "2849039"
  },
  {
    "text": "so what we're doing now is we have basically a query to our Paulo client we",
    "start": "2849039",
    "end": "2855430"
  },
  {
    "text": "stuck to our query which is passing in the query that we've seen in the graphical and basically get the object",
    "start": "2855430",
    "end": "2860739"
  },
  {
    "text": "back and we're going to assign it to one of our patients it's just the basically attacked that it's grade so now technically this actually does work and",
    "start": "2860739",
    "end": "2868299"
  },
  {
    "text": "I go back you should see it automatically populate with some patients so that's basically made a call",
    "start": "2868299",
    "end": "2875079"
  },
  {
    "text": "to our graphical endpoint and we've got the date that we need him there's no objection there's no under fetching",
    "start": "2875079",
    "end": "2880299"
  },
  {
    "text": "literally specified all the information that we want so now if we click through because we defined all the descriptor",
    "start": "2880299",
    "end": "2887079"
  },
  {
    "text": "for a patient we can actually fill this patient story quite easily so if we come",
    "start": "2887079",
    "end": "2892989"
  },
  {
    "text": "across and have a look at our component for patient summary",
    "start": "2892989",
    "end": "2897450"
  },
  {
    "text": "all I'm doing again is I'm taking the ID from the URL and I'm structuring this query passing the ID for the NHS number",
    "start": "2904230",
    "end": "2912030"
  },
  {
    "text": "and I'm getting back all information of the medications and basically assigning it to our patient object so I pass the",
    "start": "2912030",
    "end": "2919619"
  },
  {
    "text": "medications down actually make the call for it in its parent I pass it down to patient medications component so",
    "start": "2919619",
    "end": "2929490"
  },
  {
    "text": "basically it's using the inter input tab which basically passed it from its parent so I've got to uncomment some",
    "start": "2929490",
    "end": "2935820"
  },
  {
    "text": "markup now if we go back technically we should see that we've got basically",
    "start": "2935820",
    "end": "2943170"
  },
  {
    "text": "summary and we've got medication just to prove it actually does work we can click on any of these and this is actually all",
    "start": "2943170",
    "end": "2949830"
  },
  {
    "text": "cash now because we're using something like an Apollo client it caches the data and it's very clever things that you can",
    "start": "2949830",
    "end": "2954930"
  },
  {
    "text": "do attaching the batches and where you an ID but that's ultimately the demo so",
    "start": "2954930",
    "end": "2962430"
  },
  {
    "text": "we've seen all the core concepts in action kind of at a deep dive how great query paddling mutations what schema was",
    "start": "2962430",
    "end": "2968520"
  },
  {
    "text": "- typed and kind of seen how we can use it with a real world application now",
    "start": "2968520",
    "end": "2973680"
  },
  {
    "text": "bear in mind the application is very very simple but the actual implementation is kind of we will be kind of what you do anywhere it's just",
    "start": "2973680",
    "end": "2980160"
  },
  {
    "text": "the basics now have a look at some of the considerations of graph QL because graph QL is not a silver bullet",
    "start": "2980160",
    "end": "2985560"
  },
  {
    "text": "as you've seen previously with the performance issue there's other issues that you need to be aware of if you want",
    "start": "2985560",
    "end": "2990600"
  },
  {
    "text": "to use graph tool so first ones around caching with a graphic you can only",
    "start": "2990600",
    "end": "2998580"
  },
  {
    "text": "cache in two places the application server which is your SQL endpoint or the",
    "start": "2998580",
    "end": "3004580"
  },
  {
    "text": "client and you're hoping the client caches but that's not mandatory you can't use network caching anymore like",
    "start": "3004580",
    "end": "3010220"
  },
  {
    "text": "you could do is rest if you guys because what you haven't seen is when we're actually making requests to our",
    "start": "3010220",
    "end": "3015380"
  },
  {
    "text": "graphical endpoint we're posting the body to our graphical endpoint I request a no longer idempotent we tack cache it",
    "start": "3015380",
    "end": "3021800"
  },
  {
    "text": "we can't use network Ashi it's not a get request or anything so we kind of have two options here we have to",
    "start": "3021800",
    "end": "3027950"
  },
  {
    "text": "implement a cache in a back-end which were between our business logic and persistence which would weekends like",
    "start": "3027950",
    "end": "3033740"
  },
  {
    "text": "read through proxy so we check that first and then we would have this not then we'd go get from the database but",
    "start": "3033740",
    "end": "3040280"
  },
  {
    "text": "on the client we create something called a normalized cash and the normalized cash is created by the Apollo client and",
    "start": "3040280",
    "end": "3045770"
  },
  {
    "text": "it's acquitted by relay which is another library but if you want to roll your own ultimately what the normalized cash does",
    "start": "3045770",
    "end": "3050960"
  },
  {
    "text": "is instead of saving the response that we get back as is it flattens the structure of it it normalizes it into a",
    "start": "3050960",
    "end": "3057589"
  },
  {
    "text": "collection of rows and it gives each row unique ID so then you don't have data duplication of the same patient in the",
    "start": "3057589",
    "end": "3063109"
  },
  {
    "text": "cache and so on and so forth and you have this single solve the truth so that's what I mean by an online cache and if you use something like Apollo",
    "start": "3063109",
    "end": "3068720"
  },
  {
    "text": "client I'll relay that's something you want to look into because they kind of give you that for free otherwise you're going to have to write that and I've",
    "start": "3068720",
    "end": "3074690"
  },
  {
    "text": "seen I think support if I wrote their own version of it in Python to kind of",
    "start": "3074690",
    "end": "3080119"
  },
  {
    "text": "help with some of this stuff those do McGrath ql but you have to kind of roll your own so another consideration is",
    "start": "3080119",
    "end": "3086930"
  },
  {
    "text": "around form that's what we saw it has to be careful of your queries and mutations and how to optimize these things because",
    "start": "3086930",
    "end": "3093920"
  },
  {
    "text": "ultimately as you saw with the drinking problem n plus 1 and unlike with the rest API where we have this URI and we",
    "start": "3093920",
    "end": "3100280"
  },
  {
    "text": "have endpoint it's much easy to track down where our poor queries are you can kind of look at the endpoint trace it",
    "start": "3100280",
    "end": "3105650"
  },
  {
    "text": "through and say ok see the queries run because these fields resolve us all running parallel and you can have",
    "start": "3105650",
    "end": "3111980"
  },
  {
    "text": "resolvers nested within resolvers tracing the query is a little bit more difficult you have to plan your debt",
    "start": "3111980",
    "end": "3117380"
  },
  {
    "text": "structure up front so you can see wound solutions for this is loaders and loaders exist in pretty much all",
    "start": "3117380",
    "end": "3124190"
  },
  {
    "text": "languages now it's not typical of just the JavaScript world I've seen a net one",
    "start": "3124190",
    "end": "3129260"
  },
  {
    "text": "I've seen a Java one so security",
    "start": "3129260",
    "end": "3134619"
  },
  {
    "text": "basically that secures dogs cause anything that you don't want to be public ultimately that's the premise of",
    "start": "3134619",
    "end": "3140390"
  },
  {
    "text": "it but because we have this endpoint where people can query in any shape and form and it can do nested queries and so",
    "start": "3140390",
    "end": "3146059"
  },
  {
    "text": "on it kind of opens us up to a world of malicious queries so there's a couple of ways to handle this a very simple ways",
    "start": "3146059",
    "end": "3152569"
  },
  {
    "text": "to use timeouts if the query takes too long and you know roughly how long your query takes you can kill it and said to",
    "start": "3152569",
    "end": "3157849"
  },
  {
    "text": "talk to anything else and return an error back or more in depth ways without hitting the database would be because we",
    "start": "3157849",
    "end": "3164180"
  },
  {
    "text": "know the query instructor that sent to the graticule server we can do some analysis and query depth analysis basically we kinda look at the query and",
    "start": "3164180",
    "end": "3170690"
  },
  {
    "text": "see if we've got medication yes it twice we can't do that and we can return in a validation layer so it's",
    "start": "3170690",
    "end": "3175789"
  },
  {
    "text": "much further up in the execution chain and that's a little bit more involved but it's generally more bangle then",
    "start": "3175789",
    "end": "3182839"
  },
  {
    "text": "error handling if you used to rest api's you can't release HP status codes with",
    "start": "3182839",
    "end": "3188630"
  },
  {
    "text": "graph drill it does it gives you back a 200 for an error because gradual errors",
    "start": "3188630",
    "end": "3193880"
  },
  {
    "text": "are actually inside the resolve function and it's a property that it gives you back the response will be error so if we",
    "start": "3193880",
    "end": "3200960"
  },
  {
    "text": "quickly look at our graph QL server you",
    "start": "3200960",
    "end": "3206299"
  },
  {
    "text": "see exactly what I mean so if I have to type some rubbish you get errors back a",
    "start": "3206299",
    "end": "3212589"
  },
  {
    "text": "lot of times you'll get that back into 200 there's scenarios where you might get it back as a 400 but you can't rely",
    "start": "3212589",
    "end": "3219829"
  },
  {
    "text": "on status codes anymore so what you have to do is inside the resolve functions you can throw a graticule error and then",
    "start": "3219829",
    "end": "3225980"
  },
  {
    "text": "you kind of just structure your error in a certain format and you display it using that so they have to check the inner response object you can't rely on",
    "start": "3225980",
    "end": "3232430"
  },
  {
    "text": "stairs clubs anymore so when do you want",
    "start": "3232430",
    "end": "3238400"
  },
  {
    "text": "to use graticule and this is probably the ultimate question that I asked why is it and this comes down to like any other technology",
    "start": "3238400",
    "end": "3244789"
  },
  {
    "text": "you kind of have to have a specific use case for it if you have a really high",
    "start": "3244789",
    "end": "3250519"
  },
  {
    "text": "queryable API that has a lot of different clients have different data structures and they want to kind of have",
    "start": "3250519",
    "end": "3256130"
  },
  {
    "text": "it all in a single endpoint it works well with them but if you've got a REST API which folders good practices it's",
    "start": "3256130",
    "end": "3262579"
  },
  {
    "text": "not case of just jumping and moving from one to the other you kind of have to find the middle ground and I could",
    "start": "3262579",
    "end": "3267920"
  },
  {
    "text": "anything like I have to test it and see if it's going to work with your business and your data structure so now it's got",
    "start": "3267920",
    "end": "3276950"
  },
  {
    "text": "some resources so these resources are generally the graphic your website is really really useful in terms of its",
    "start": "3276950",
    "end": "3282259"
  },
  {
    "text": "marketing spiel but the documentation behind it in specs really cool awesome graphic well just a link a set of links",
    "start": "3282259",
    "end": "3288579"
  },
  {
    "text": "Apollo client is what we kind of inflate the client with and then I've got an application let's look at but the most",
    "start": "3288579",
    "end": "3294109"
  },
  {
    "text": "important one is if anyone's interested in play with graphical and doesn't want a standard for server the bottom one is",
    "start": "3294109",
    "end": "3299390"
  },
  {
    "text": "printed by Facebook it's a Star Wars API and it basically gives you graphical and you can kind of do some queries and",
    "start": "3299390",
    "end": "3305760"
  },
  {
    "text": "I can put a front end on it you can do pretty much whatever you want with it and it's definitely works you don't want to get involved in curriculum so that's",
    "start": "3305760",
    "end": "3314070"
  },
  {
    "text": "basically it thanks very much for your time have you any questions just come up Natalie yes",
    "start": "3314070",
    "end": "3334280"
  },
  {
    "text": "right so there's a couple of ways to handle this there's something called sequel join monster which will take your",
    "start": "3338000",
    "end": "3344190"
  },
  {
    "text": "query and it will basically right in sequel so if you specify the only cons",
    "start": "3344190",
    "end": "3349710"
  },
  {
    "text": "you're interested in you'll do select say first name and surname you will get the whole object back so there's ways to handle this but ultimately for my naive",
    "start": "3349710",
    "end": "3355890"
  },
  {
    "text": "example yes I returned the whole dataset but you generally have to kind of limit that based off the query that you have",
    "start": "3355890",
    "end": "3361800"
  },
  {
    "text": "either using a tool like sequel join monster as will propose Chris or you can't have to roll your own but yeah",
    "start": "3361800",
    "end": "3367800"
  },
  {
    "text": "generally you kind of you've moved over fetching in that sense that your basic moves adjust to the server so yes yeah",
    "start": "3367800",
    "end": "3387960"
  },
  {
    "text": "okay so sequel join monster literally this name will allow you to but it is a less John and everything that it thinks",
    "start": "3387960",
    "end": "3394050"
  },
  {
    "text": "is a nested object I'll try and Mario pids but yes Maya is a very simple example I had a view that wraps",
    "start": "3394050",
    "end": "3399300"
  },
  {
    "text": "everything up so it's white as a single statement paging well paging for graph",
    "start": "3399300",
    "end": "3405930"
  },
  {
    "text": "Club doesn't exist this is another caveat unfortunately you don't get paging like with older you get paging",
    "start": "3405930",
    "end": "3411450"
  },
  {
    "text": "you don't get with graphic Y so you see I passing arguments you basically passing like say top five and you handle",
    "start": "3411450",
    "end": "3417750"
  },
  {
    "text": "let yourself on the other end the recommender using slicing but you have to write all the logic yourself it's in their best practices as well the dull",
    "start": "3417750",
    "end": "3423900"
  },
  {
    "text": "they don't have anything built into the support paging now this is really baseball actually do do paging but they",
    "start": "3423900",
    "end": "3429390"
  },
  {
    "text": "have not open sourced their paging aspect of it so you have to manually how you wanna do paging if I have to be and",
    "start": "3429390",
    "end": "3435270"
  },
  {
    "text": "say we've been to argument saying skip and take 10 then you basically have to",
    "start": "3435270",
    "end": "3440380"
  },
  {
    "text": "manually pass it to your arbitrary card at the back to handle it and you handle that yourself there's nothing graph field says okay all you do paging let's",
    "start": "3440380",
    "end": "3447070"
  },
  {
    "text": "help yep now unfortunately there's no yep yes so so Thomas Cook the flight",
    "start": "3447070",
    "end": "3464800"
  },
  {
    "text": "company use graph QL as an aggregator of their server list stuff so they have graph QL and like lambdas as well but a",
    "start": "3464800",
    "end": "3470800"
  },
  {
    "text": "general scenario that you'll see is if you have a lot of micro services and if you I get with it sits in front you can",
    "start": "3470800",
    "end": "3476290"
  },
  {
    "text": "put graphical in front of that have your den scripture call all the API endpoint t1 and basically the client is only",
    "start": "3476290",
    "end": "3481869"
  },
  {
    "text": "caring about the graphical implementation but at the back edge is resolving each sold separately that's used in a lot of places in aggregate you",
    "start": "3481869",
    "end": "3492850"
  },
  {
    "text": "technically don't have to have an FBI gateway yi so you can bypass that a new result function call your lambda function separately if you want I'll",
    "start": "3492850",
    "end": "3498760"
  },
  {
    "text": "call your REST API where information lives and just return the single endpoint so you don't have to have the area gateway some people put the API",
    "start": "3498760",
    "end": "3504760"
  },
  {
    "text": "going but the rings around authorization clear don't to handle it so they do that much further layer but yeah that's a an",
    "start": "3504760",
    "end": "3510700"
  },
  {
    "text": "aggregator is a very valid use case of it and it's quite a few companies which have not come to the kind of like table",
    "start": "3510700",
    "end": "3517390"
  },
  {
    "text": "said they're using it but in the background I know people have using it like like Thomas cooks a good example they use it you're all free to go then",
    "start": "3517390",
    "end": "3528290"
  },
  {
    "text": "you",
    "start": "3528290",
    "end": "3530350"
  }
]