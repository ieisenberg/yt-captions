[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "awesome can everyone hear me properly perfect well welcome to the graveyard",
    "start": "5799",
    "end": "12260"
  },
  {
    "text": "shifts of the first day of NDC thanks for being here really appreciate it it's",
    "start": "12260",
    "end": "18039"
  },
  {
    "text": "for me coming from Belgium it's quite later quite early I actually have no idea what time it is but it's always",
    "start": "18039",
    "end": "25220"
  },
  {
    "text": "nice to have people at the last session slot of the day especially in this session I think it's a nice one nice",
    "start": "25220",
    "end": "31820"
  },
  {
    "text": "title to its Sherlock homepage I detective story about running large-scale web services",
    "start": "31820",
    "end": "38230"
  },
  {
    "text": "it's kind of a disguise title for a war story on stuff we did on the nougat",
    "start": "38230",
    "end": "44809"
  },
  {
    "text": "server last year when we had a lot of trouble with frequent downtime frequent slowdowns of",
    "start": "44809",
    "end": "51920"
  },
  {
    "text": "the application frequent errors that you may have been seen and this is basically a talk on fixing those bugs and then",
    "start": "51920",
    "end": "58609"
  },
  {
    "text": "falling into the next bug in fixing that and going into the next bug and fixing that again so let's let's see if we can",
    "start": "58609",
    "end": "65720"
  },
  {
    "start": "64000",
    "end": "396000"
  },
  {
    "text": "dive in this site is unavailable this was one of the first items that we had",
    "start": "65720",
    "end": "71439"
  },
  {
    "text": "when when when the site didn't really want to work so the site wasn't available and we were saying that our",
    "start": "71439",
    "end": "78560"
  },
  {
    "text": "primary location where we were hosted in Azure was unavailable so no servers were",
    "start": "78560",
    "end": "84020"
  },
  {
    "text": "responding there and we could not it's the public weapon points of the server in that data center so that's not ideal",
    "start": "84020",
    "end": "90439"
  },
  {
    "text": "and kind of scary as well but luckily we are smart and we have two locations so",
    "start": "90439",
    "end": "96590"
  },
  {
    "text": "we had a secondary location as well which we load balance to using traffic",
    "start": "96590",
    "end": "102560"
  },
  {
    "text": "manager a measure which means if the primary goes down the secondary you should take over based on dns change it",
    "start": "102560",
    "end": "109310"
  },
  {
    "text": "will basically fail for 30 seconds or something like that where it will fail over to the secondary location at least",
    "start": "109310",
    "end": "115219"
  },
  {
    "text": "we thought because we saw that the secondary location also was away so our",
    "start": "115219",
    "end": "120859"
  },
  {
    "text": "website was gone from the internet and that is really really really scary if you have a lot of users so as an end",
    "start": "120859",
    "end": "128690"
  },
  {
    "text": "result our website was down now we started looking into it and starting to investigate why or what could be",
    "start": "128690",
    "end": "135050"
  },
  {
    "text": "happening and we thought things so the public endpoint of the website was",
    "start": "135050",
    "end": "140220"
  },
  {
    "text": "unavailable dns worked but we just could not hit hit the website true the load",
    "start": "140220",
    "end": "145440"
  },
  {
    "text": "balancers in each of these locations on azure the funny thing was that the machines were available individually so",
    "start": "145440",
    "end": "152970"
  },
  {
    "text": "if he would hit the specific tcp port where we expose every single machine on",
    "start": "152970",
    "end": "158280"
  },
  {
    "text": "to the public internet we would see that the website would respond normally and we could generate traffic on it and",
    "start": "158280",
    "end": "163950"
  },
  {
    "text": "everything was working so that was really really weird the azure load balancer didn't seem to be flowing",
    "start": "163950",
    "end": "170760"
  },
  {
    "text": "traffic true and we were not seeing results for typical users that were not",
    "start": "170760",
    "end": "176190"
  },
  {
    "text": "using these special tcp ports so what could have been going on well turns out",
    "start": "176190",
    "end": "181890"
  },
  {
    "text": "we were using a custom load balancer probe in Azure so what you can do is basically tell a sure where to query",
    "start": "181890",
    "end": "189269"
  },
  {
    "text": "every couple of seconds to see if the website is up and running and if that endpoint returns a 200 okay status codes",
    "start": "189269",
    "end": "196290"
  },
  {
    "text": "then I sure will think everything is fine and the load balancer will keep the machine in the whole balancer rotation",
    "start": "196290",
    "end": "202590"
  },
  {
    "text": "the fun thing is if you start returning a different error codes or different status codes like a error 500 or",
    "start": "202590",
    "end": "209430"
  },
  {
    "text": "something I sure will take your machine out of the load balancer which is interesting and awesome because you",
    "start": "209430",
    "end": "215459"
  },
  {
    "text": "actually want to do that you don't want to keep our faulty machines in the load balancer rotation the fun thing happens",
    "start": "215459",
    "end": "221970"
  },
  {
    "text": "when all the machines start responding with an error code 500s and all the machines disappear from the load",
    "start": "221970",
    "end": "228359"
  },
  {
    "text": "balancer rotation which basically means that your status check is taking all the machines out of rotation and making sure",
    "start": "228359",
    "end": "234989"
  },
  {
    "text": "that the website has just gone if you hit it through the load balancer so that was what we were seeing",
    "start": "234989",
    "end": "241370"
  },
  {
    "text": "we looked into that and we removed the probe because we saw that all the different machines were responding",
    "start": "241370",
    "end": "246739"
  },
  {
    "text": "individually so we removed this check to basically have a quick fix in getting a website up and running and the downtime",
    "start": "246739",
    "end": "253500"
  },
  {
    "text": "didn't really last long but we yeah we found out that there was some service not responding properly and some service",
    "start": "253500",
    "end": "260609"
  },
  {
    "text": "was basically causing this error 500 to happen and taking the machines out of the load so this is the implementation",
    "start": "260609",
    "end": "267900"
  },
  {
    "text": "of that status service that we were hitting and we saw that one of these services would be down and causing this",
    "start": "267900",
    "end": "275190"
  },
  {
    "text": "error so I'd rate was our gallery itself which was gone either it was our sequel",
    "start": "275190",
    "end": "281009"
  },
  {
    "text": "database could have been our storage system could have been our search service and could have been our metric",
    "start": "281009",
    "end": "287280"
  },
  {
    "text": "service so one of these services was down but we decided to not look into it",
    "start": "287280",
    "end": "292349"
  },
  {
    "text": "at the moment the website was done and gone from the load balancer we decided to fix the load balancer probe and just",
    "start": "292349",
    "end": "298620"
  },
  {
    "text": "make sure that we were up and running again and we were happy because it got fixed the website got running again and",
    "start": "298620",
    "end": "305610"
  },
  {
    "text": "we were happy our users were happy and the fire that was raging on Twitter at that time I was cooling down again which",
    "start": "305610",
    "end": "312780"
  },
  {
    "text": "is an awesome thing now how did we find the issue why did we come up with oh we",
    "start": "312780",
    "end": "318509"
  },
  {
    "text": "have to maybe check the load balancer probe there well there's actually a great website called heights high",
    "start": "318509",
    "end": "324270"
  },
  {
    "text": "scalability calm and I like reading that one because it has technical articles on the big websites out there but it also",
    "start": "324270",
    "end": "330360"
  },
  {
    "text": "has fun parallels with other industries and other disciplines like for example",
    "start": "330360",
    "end": "335400"
  },
  {
    "text": "FBI profilers and there's actually a quote from a book",
    "start": "335400",
    "end": "340740"
  },
  {
    "text": "that the guys reviewed and it says that if you have a crime scene going on you have to put yourself into the shoes of",
    "start": "340740",
    "end": "347810"
  },
  {
    "text": "of the victim you have to know what is going on you have to learn and and feel",
    "start": "347810",
    "end": "352919"
  },
  {
    "text": "what is going on with the server or with with the service and know what it was like and try to build on that experience",
    "start": "352919",
    "end": "360210"
  },
  {
    "text": "to find whatever was the issue so we did that and thankfully we knew our service so we",
    "start": "360210",
    "end": "367529"
  },
  {
    "text": "work on the service so we knew what's happening there but even then each one of our team members had a lot of",
    "start": "367529",
    "end": "372810"
  },
  {
    "text": "experience with Azure so we immediately thought that if the website was available on the single instances but",
    "start": "372810",
    "end": "379139"
  },
  {
    "text": "not truly load balancer the only thing that could be wrong is the load balancer so you have to know your system you also",
    "start": "379139",
    "end": "384750"
  },
  {
    "text": "have to have some logging and telemetry of course but it's the combination of all those things that makes you",
    "start": "384750",
    "end": "390330"
  },
  {
    "text": "appreciate your system know your system and fix whatever when is wrong with your system so with that thanks for being",
    "start": "390330",
    "end": "398860"
  },
  {
    "text": "here and thanks for joining this presentation as i said i'm from belgium I just took a nap before the session",
    "start": "398860",
    "end": "404860"
  },
  {
    "text": "which is awesome but I don't think it's a good idea to have done that because I",
    "start": "404860",
    "end": "410199"
  },
  {
    "text": "know I don't know what time it is right now if you look on the map I'm from Antwerp which is a nice city in the",
    "start": "410199",
    "end": "416169"
  },
  {
    "text": "north of Belgium we have awesome chocolate we have lots of years and it's",
    "start": "416169",
    "end": "421509"
  },
  {
    "text": "a great place to live I work in the microsoft and the nougat team so I'm a developer on the server site there and",
    "start": "421509",
    "end": "427839"
  },
  {
    "text": "as I said in the introduction this talk is going to be mostly about how we fixed",
    "start": "427839",
    "end": "433599"
  },
  {
    "text": "the nougat websites so let's give you a bit of history and context on our application so you also have the",
    "start": "433599",
    "end": "439449"
  },
  {
    "start": "435000",
    "end": "706000"
  },
  {
    "text": "knowledge of how we how our application was built and structured at the time we had all these issues happening so the",
    "start": "439449",
    "end": "446919"
  },
  {
    "text": "nougat websites if you don't know a  to doesn't know when you get okay good we serve dependencies for net",
    "start": "446919",
    "end": "453969"
  },
  {
    "text": "developers worldwide and pretty much every developer is using us continuously during their day-to-day job installing",
    "start": "453969",
    "end": "461019"
  },
  {
    "text": "packages updating their dependencies and so on so we get a lot of requests and at the time all these things happens we",
    "start": "461019",
    "end": "467379"
  },
  {
    "text": "served around eight million to 10 million requests per day on our computer notes alone because we also have a lot",
    "start": "467379",
    "end": "472990"
  },
  {
    "text": "of things that are just served by storage and CDN so we have quite quite a number of users",
    "start": "472990",
    "end": "478839"
  },
  {
    "text": "on computes during the day nougat was built for 25 years ago and at that time",
    "start": "478839",
    "end": "485469"
  },
  {
    "text": "it was really hip to expose your data as as an odata service and o data is",
    "start": "485469",
    "end": "491499"
  },
  {
    "text": "basically an HTTP protocol that allows you to expose agreeable interface over HTTP and as Microsoft's released Oh data",
    "start": "491499",
    "end": "500079"
  },
  {
    "text": "they started to do a lot of samples and all those samples were basically just exposing the raw sequel database over",
    "start": "500079",
    "end": "506139"
  },
  {
    "text": "HTTP and nougat of course did that as well because it was a nice sample and a nice showcase of the technology problem",
    "start": "506139",
    "end": "512888"
  },
  {
    "text": "with that was new get started to grow and a lot of things have to happen over the years to make it make it perform",
    "start": "512889",
    "end": "519159"
  },
  {
    "text": "because pretty much every developer was just hitting our database and running queries on our database so that's not",
    "start": "519159",
    "end": "524649"
  },
  {
    "text": "the best technology to work with it's a monolithic sites back then we had our",
    "start": "524649",
    "end": "530760"
  },
  {
    "text": "web application so if you go to negative dork I want to publish a package or search in your browser that's the exact",
    "start": "530760",
    "end": "536610"
  },
  {
    "text": "same application as the application that is serving the 0 data queries that visual studio is using to to install the",
    "start": "536610",
    "end": "542730"
  },
  {
    "text": "packages in Visual Studio some improvements have been made so the",
    "start": "542730",
    "end": "547830"
  },
  {
    "text": "sequel database is no longer it for every single query that you are making to this or data endpoint but yeah we had",
    "start": "547830",
    "end": "554610"
  },
  {
    "text": "some rough times transitioning from that period of time to where we are right now",
    "start": "554610",
    "end": "559770"
  },
  {
    "text": "and that's this session so the architecture back then was we had some",
    "start": "559770",
    "end": "565230"
  },
  {
    "text": "front-end servers into regions to Azure data center regions and that front end web site is hosting the MVC application",
    "start": "565230",
    "end": "571800"
  },
  {
    "text": "as well as the odata service which is a WCF WCF service those front end servers",
    "start": "571800",
    "end": "579360"
  },
  {
    "text": "are backed by a sequel database and a database contains all the package metadata so if you search for a specific",
    "start": "579360",
    "end": "585660"
  },
  {
    "text": "package the package I did a package description tags and things like that would come from this database the",
    "start": "585660",
    "end": "591960"
  },
  {
    "text": "database is also used to track it down load counts so whenever you do it download when you get package nougats",
    "start": "591960",
    "end": "598050"
  },
  {
    "text": "woods rights to the database saying okay just a package has been downloaded one time it was this specific client version",
    "start": "598050",
    "end": "605130"
  },
  {
    "text": "was this user agents this was the IP address in the geo location of the user just have some metrics on who is",
    "start": "605130",
    "end": "611940"
  },
  {
    "text": "downloading everything so that means that if you would do a download you would query the database to find that",
    "start": "611940",
    "end": "617850"
  },
  {
    "text": "metadata and serve that metadata but you would also push an update into the database because you were increasing the",
    "start": "617850",
    "end": "623870"
  },
  {
    "text": "download counter there now we did some improvements because searching on the database for every",
    "start": "623870",
    "end": "630750"
  },
  {
    "text": "single query on nougats was not that performance so we built a search service which is a leucine based search service",
    "start": "630750",
    "end": "636900"
  },
  {
    "text": "that contains all the metadata of the packages and if you use visual studio to search for a package you're actually",
    "start": "636900",
    "end": "643140"
  },
  {
    "text": "hitting that search service directly with visual studio 2015 indirectly with",
    "start": "643140",
    "end": "649110"
  },
  {
    "text": "visuals to you 2013 because we basically linked the dub CF odata service to this",
    "start": "649110",
    "end": "655410"
  },
  {
    "text": "search service so that whenever you you would hit the search service on the websites you will actually hit this",
    "start": "655410",
    "end": "661790"
  },
  {
    "text": "loosening next to take the load off of the database now of course the search service has to get its data as well and",
    "start": "661790",
    "end": "668270"
  },
  {
    "text": "that data is on azure storage just raw blob storage we have the leucine index",
    "start": "668270",
    "end": "673370"
  },
  {
    "text": "running there and that thing just uses that to search to serve the search results and serve things like download",
    "start": "673370",
    "end": "680270"
  },
  {
    "text": "cans and so on now of course the data has to flow between those things and we have a number of background jobs as well",
    "start": "680270",
    "end": "686780"
  },
  {
    "text": "and these background jobs basically read the database build an index whenever you publish a package for example the",
    "start": "686780",
    "end": "693380"
  },
  {
    "text": "package gets attitude is index and just flows through that entire system to this search service so that's roughly the",
    "start": "693380",
    "end": "700760"
  },
  {
    "text": "architecture back then last year around March to May time frame",
    "start": "700760",
    "end": "706000"
  },
  {
    "start": "706000",
    "end": "891000"
  },
  {
    "text": "so did we solve the crime did we actually solve this issue we had with the load balancer in the beginning of",
    "start": "706000",
    "end": "712190"
  },
  {
    "text": "this session well we didn't really do it we removed the load balancer probe to get the servers back into rotation but",
    "start": "712190",
    "end": "718880"
  },
  {
    "text": "we didn't actually fix or find the root cause of what was happening here so flash back to our issue we had the load",
    "start": "718880",
    "end": "726440"
  },
  {
    "text": "balancer was taking each server out of rotation because our status service was",
    "start": "726440",
    "end": "731510"
  },
  {
    "text": "responding with a error 500 status codes and that status codes was there because",
    "start": "731510",
    "end": "737570"
  },
  {
    "text": "of one of these services now we could rule out one of them because the status",
    "start": "737570",
    "end": "743030"
  },
  {
    "text": "service was also checking itself and if it could check itself that means that the status service is up so it's a",
    "start": "743030",
    "end": "749000"
  },
  {
    "text": "stupid redundant check but we we basically found four possible root",
    "start": "749000",
    "end": "754160"
  },
  {
    "text": "causes of this issue where the status service was returning an error 500 so it",
    "start": "754160",
    "end": "759710"
  },
  {
    "text": "could have been sequel could have been a database could have been storage it could have been our search service or",
    "start": "759710",
    "end": "766220"
  },
  {
    "text": "could have been our metric service which basically takes all the download counts and does this increments by one whenever",
    "start": "766220",
    "end": "772610"
  },
  {
    "text": "you download a package on you get so one of these services was causing this issue so we looked at all our logs for example",
    "start": "772610",
    "end": "780920"
  },
  {
    "text": "the sequel database locks and we found the database had just been running perfectly fine we think because we",
    "start": "780920",
    "end": "787040"
  },
  {
    "text": "didn't have all the logs back then so that's that's another nice thing to discover when searching for the issue we",
    "start": "787040",
    "end": "793780"
  },
  {
    "text": "found we have not no detailed logs on whatever was happening on the database back then so we fix that along the way",
    "start": "793780",
    "end": "800500"
  },
  {
    "text": "but we were fairly confident that the sequel database had not been acting up and had not been causing trouble",
    "start": "800500",
    "end": "806520"
  },
  {
    "text": "especially because all the different individual machines were still reachable and we could run queries on them so that",
    "start": "806520",
    "end": "812800"
  },
  {
    "text": "basically meant that the database was fine and just returning results as we were expecting storage since table as",
    "start": "812800",
    "end": "820300"
  },
  {
    "text": "well we had lots of log in there as well and we saw a hundred percent up time no latency issues no dropped requests or",
    "start": "820300",
    "end": "827290"
  },
  {
    "text": "whatsoever so unless our logs were lying to us Storch was not the issue there we",
    "start": "827290",
    "end": "832930"
  },
  {
    "text": "looked at search and search had just been running for a couple of months just fine no issues with it and in the logs",
    "start": "832930",
    "end": "839920"
  },
  {
    "text": "there we also didn't really discover anything significant that would explain the status service to be down we looked",
    "start": "839920",
    "end": "846880"
  },
  {
    "text": "into our metric service which is like the steam the simplest REST API you could have it's just posting data to an",
    "start": "846880",
    "end": "853390"
  },
  {
    "text": "HTTP endpoints and let the HDP endpoint would increment the download counts in the database so nothing really special",
    "start": "853390",
    "end": "860350"
  },
  {
    "text": "going on there and we didn't really find anything obvious in any of the locks of these different for services that we",
    "start": "860350",
    "end": "867490"
  },
  {
    "text": "were calling so we started looking around at the crime scene itself we started pulling is locks we started",
    "start": "867490",
    "end": "873880"
  },
  {
    "text": "looking into Event Viewer we started looking into a lot of things we even started profiling on our production",
    "start": "873880",
    "end": "880030"
  },
  {
    "text": "servers because we were stunned that there was no information in any of the locks and we just wanted to find out",
    "start": "880030",
    "end": "886060"
  },
  {
    "text": "what could have been the cost and could have cost his down time so we started profiling the website and",
    "start": "886060",
    "end": "893940"
  },
  {
    "start": "891000",
    "end": "986000"
  },
  {
    "text": "we did that as I said on production which is something you probably don't want to do but it was our last resorts",
    "start": "893940",
    "end": "900820"
  },
  {
    "text": "and we had to dive into that so we did some profiling there and",
    "start": "900820",
    "end": "905970"
  },
  {
    "text": "we saw a couple of things first of all let me start zoom its",
    "start": "905970",
    "end": "912390"
  },
  {
    "text": "first of all we saw that there was a little bit of blocking garbage collection like two percent of the time",
    "start": "912390",
    "end": "918670"
  },
  {
    "text": "we had blocking garbage collection it's not too bad it's not good either but nothing special going on there",
    "start": "918670",
    "end": "925810"
  },
  {
    "text": "we saw a couple of methods there we saw that the consuming to there we saw that the",
    "start": "925810",
    "end": "933529"
  },
  {
    "text": "hijack method here I was hit nine percent of the time so it turned out that our are hijacked that we do when",
    "start": "933529",
    "end": "941240"
  },
  {
    "text": "when you hit the OData endpoint and we redirect you basically to the search service nine percent of the time was",
    "start": "941240",
    "end": "947300"
  },
  {
    "text": "spent in this hijack and we started taking in there and we saw that hijack was called quite a lot of times which is",
    "start": "947300",
    "end": "953570"
  },
  {
    "text": "as expected because we we redirect to the search service because we wanted to",
    "start": "953570",
    "end": "959029"
  },
  {
    "text": "offload the database and we didn't really find out anything interesting here yeah there's this garbage",
    "start": "959029",
    "end": "964370"
  },
  {
    "text": "collection that's happening but it's it's not out of the ordinary and it's not something really really special so",
    "start": "964370",
    "end": "970100"
  },
  {
    "text": "our gallery was definitely not the cost there was some room for improvement we actually went into this profiling",
    "start": "970100",
    "end": "976250"
  },
  {
    "text": "reports and we found a couple of things that could be optimized but nothing that would explain the down time that we saw",
    "start": "976250",
    "end": "982300"
  },
  {
    "text": "so yeah that's nice but we were still left with nothing because we didn't know",
    "start": "982300",
    "end": "987980"
  },
  {
    "start": "986000",
    "end": "1166000"
  },
  {
    "text": "why our website was down the previous day so it could have been searched because we saw all of this traffic going",
    "start": "987980",
    "end": "994700"
  },
  {
    "text": "to this hijack methods which would redirect to the search service but again the logs didn't show anything and this",
    "start": "994700",
    "end": "1001089"
  },
  {
    "text": "gallery profiling on the web servers in front of its didn't really show anything special either so yeah we continue to",
    "start": "1001089",
    "end": "1010240"
  },
  {
    "text": "chain and start profiling our search service as well and our search service proved a little more",
    "start": "1010240",
    "end": "1017110"
  },
  {
    "text": "interesting if you look at these things lock contention for example we had sixteen",
    "start": "1017110",
    "end": "1023650"
  },
  {
    "text": "percent of the time our search service was waiting for Lux to be released that's something you don't really want",
    "start": "1023650",
    "end": "1030520"
  },
  {
    "text": "to have in your application because it means your users are waiting a lot of the time for Lux to be released if this",
    "start": "1030520",
    "end": "1036400"
  },
  {
    "text": "is in a request path for example another interesting thing was that we had fifty-eight percent of the time",
    "start": "1036400",
    "end": "1043170"
  },
  {
    "text": "blocking garbage collection which means that our server was doing more work in",
    "start": "1043170",
    "end": "1049450"
  },
  {
    "text": "garbage collection than in serving requests and responses back to our users that's not something you want to have in",
    "start": "1049450",
    "end": "1056279"
  },
  {
    "text": "so let's dive in there and select this lock contention and see what's happening",
    "start": "1056279",
    "end": "1062080"
  },
  {
    "text": "so an interesting thing we see here in this chart is that the lock contention",
    "start": "1062080",
    "end": "1067169"
  },
  {
    "text": "basically happens when we are not garbage collection are collecting so this this brown charts is the garbage",
    "start": "1067169",
    "end": "1073720"
  },
  {
    "text": "collection happening and it happens here as well so either we are garbage collecting or either we were waiting for",
    "start": "1073720",
    "end": "1079539"
  },
  {
    "text": "something to happen or waiting for luck to be released so this is not a healthy application and we got really worried",
    "start": "1079539",
    "end": "1085899"
  },
  {
    "text": "about this because the search service looked like the culprits and the thing that was actually causing this issue",
    "start": "1085899",
    "end": "1092019"
  },
  {
    "text": "that we had previously so we went in there and looking at the top methods",
    "start": "1092019",
    "end": "1098409"
  },
  {
    "text": "that were being called we saw this searcher manager gets and I can't sue to",
    "start": "1098409",
    "end": "1104019"
  },
  {
    "text": "that corner of the screen which is really really funny but I'll do it like this so we saw that these get methods",
    "start": "1104019",
    "end": "1110769"
  },
  {
    "text": "was being called a fifty nine percent of the time and a release method was called thirty-eight percent of the time",
    "start": "1110769",
    "end": "1116850"
  },
  {
    "text": "interesting because those two methods were basically whatever our search",
    "start": "1116850",
    "end": "1122080"
  },
  {
    "text": "service is doing so whenever we do an index reload whenever we load the search index again from storage these two",
    "start": "1122080",
    "end": "1128559"
  },
  {
    "text": "methods would be called the gates would be called two loads the index and release would be whenever the index has",
    "start": "1128559",
    "end": "1134889"
  },
  {
    "text": "a newer version and we release the old version back to back to the system so these two",
    "start": "1134889",
    "end": "1141639"
  },
  {
    "text": "methods were actually causing either garbage collection or waiting for locks to be released so we started looking",
    "start": "1141639",
    "end": "1149289"
  },
  {
    "text": "into the codes and we this was a deployment that",
    "start": "1149289",
    "end": "1154419"
  },
  {
    "text": "happens a long long time ago and we didn't really have the codes anymore so we had to download a decompiler to look",
    "start": "1154419",
    "end": "1160749"
  },
  {
    "text": "at our actual production code that was deployed at a time and we started digging into that and we found a couple",
    "start": "1160749",
    "end": "1166659"
  },
  {
    "start": "1166000",
    "end": "1293000"
  },
  {
    "text": "of interesting things the searcher manager that we use which calls these get methods to load the index and",
    "start": "1166659",
    "end": "1173109"
  },
  {
    "text": "release the index afterwards was checking lusine index freshness which is",
    "start": "1173109",
    "end": "1178239"
  },
  {
    "text": "perfectly fine you want to check if your index has been updated and if it has been updated you want to reload it so",
    "start": "1178239",
    "end": "1183789"
  },
  {
    "text": "you can search the new results that are in that index the the big issue we had there is that",
    "start": "1183789",
    "end": "1190550"
  },
  {
    "text": "in the stark reopen method we had when when you would start reopening the index from storage",
    "start": "1190550",
    "end": "1195910"
  },
  {
    "text": "and actually have a link to get up from that time we had this happening so we",
    "start": "1195910",
    "end": "1201500"
  },
  {
    "text": "had a lock there and while the reopen was happening we would just wait until the index was reloaded and then continue",
    "start": "1201500",
    "end": "1208309"
  },
  {
    "text": "and free this luck and make it available to the search service so this thing was",
    "start": "1208309",
    "end": "1213320"
  },
  {
    "text": "actually causing our downtime because loading our index would take around two minutes at that time because it was",
    "start": "1213320",
    "end": "1220010"
  },
  {
    "text": "quite fragmented and stuff like that so we would just wait for two minutes in a request pots for this luck to be freed",
    "start": "1220010",
    "end": "1227179"
  },
  {
    "text": "and I was that was horrible so we fixed that we took this guy out of the out of",
    "start": "1227179",
    "end": "1233300"
  },
  {
    "text": "the request part so we we created a background job that would reload the index and swap the index that was being",
    "start": "1233300",
    "end": "1240050"
  },
  {
    "text": "used to serve searches but we learned the hard way that this is not something you want to do in your request box now",
    "start": "1240050",
    "end": "1247550"
  },
  {
    "text": "was this in the request but for every user that was hitting the search service know where we were doing this where we were",
    "start": "1247550",
    "end": "1254420"
  },
  {
    "text": "checking if the index was still fresh was in our monitoring so our monitoring would call a specific end point on the",
    "start": "1254420",
    "end": "1260840"
  },
  {
    "text": "search service the search service would then check if the index was to be reloaded it will start to reload wait",
    "start": "1260840",
    "end": "1267290"
  },
  {
    "text": "for two minutes and then free the lock problem is that same luck was checked in the request pot so if our monitoring",
    "start": "1267290",
    "end": "1273170"
  },
  {
    "text": "would take long request because the lock was not being freed and people just have",
    "start": "1273170",
    "end": "1278570"
  },
  {
    "text": "to wait for another luck to be freed again so we fixed that we took that out of out of the request part and move it",
    "start": "1278570",
    "end": "1284390"
  },
  {
    "text": "into a background job so that the lock would never never hurts production traffic or never would hurts any HTTP",
    "start": "1284390",
    "end": "1292010"
  },
  {
    "text": "requests coming in so awesome now back to the profiler we also saw this garbage",
    "start": "1292010",
    "end": "1299120"
  },
  {
    "start": "1293000",
    "end": "1569000"
  },
  {
    "text": "collection issue we found out a lot of this garbage collection was costs by loading the leucine index it would just",
    "start": "1299120",
    "end": "1305710"
  },
  {
    "text": "reserve a big chunk of memory in our net run time and then free it again but we",
    "start": "1305710",
    "end": "1312170"
  },
  {
    "text": "also saw that Newton softs Jason Jason botnets was actually causing a lot of",
    "start": "1312170",
    "end": "1317960"
  },
  {
    "text": "this memory traffic yeah yeah we had a lot of objects that were",
    "start": "1317960",
    "end": "1324550"
  },
  {
    "text": "really causing an issue here so what would happen if we did an index reloads",
    "start": "1324550",
    "end": "1329830"
  },
  {
    "text": "was that we would also reload the number of downloads packages hat because the package download can actually influences",
    "start": "1329830",
    "end": "1336550"
  },
  {
    "text": "the search results so we have to know how many times your package has been downloaded now if we would increment",
    "start": "1336550",
    "end": "1342850"
  },
  {
    "text": "this number in the index that would mean we had we would have a really high index churn because you would actually have to",
    "start": "1342850",
    "end": "1349570"
  },
  {
    "text": "delete and reinsert the documents into this search index and you don't want to do that for every download or every 10",
    "start": "1349570",
    "end": "1356260"
  },
  {
    "text": "downloads or even every hundred downloads so what we did was instead have a background process created a big",
    "start": "1356260",
    "end": "1363190"
  },
  {
    "text": "twelve megabyte JSON blob which contains package ID package version and the",
    "start": "1363190",
    "end": "1368620"
  },
  {
    "text": "download counts and whenever the index would be reloaded we would also reload that specific blob and loaded into",
    "start": "1368620",
    "end": "1375460"
  },
  {
    "text": "memory and make sure that we could use it problem was as we saw later in a",
    "start": "1375460",
    "end": "1381190"
  },
  {
    "text": "memory trace that's this loading of these download counts was actually causing a lot of memory traffic it was",
    "start": "1381190",
    "end": "1388090"
  },
  {
    "text": "causing the garbage collector to have a lot of work garbage collector had to do a lot of work and why was that well",
    "start": "1388090",
    "end": "1394900"
  },
  {
    "text": "turns out we were loading all this data into two dictionaries so we had a",
    "start": "1394900",
    "end": "1400390"
  },
  {
    "text": "dictionary that had a key of the package ID and value of the list of versions and",
    "start": "1400390",
    "end": "1406870"
  },
  {
    "text": "their download counts but we would whenever we loaded stats that JSON blob we would recreate that entire dictionary",
    "start": "1406870",
    "end": "1414220"
  },
  {
    "text": "in memory and just to start the old one basically give it back to the dotnet",
    "start": "1414220",
    "end": "1419680"
  },
  {
    "text": "runtime so the net would have to reclaim a couple of million objects in memory",
    "start": "1419680",
    "end": "1425080"
  },
  {
    "text": "every time we did that reloads and that was causing this garbage collection traffic memory traffic in the garbage",
    "start": "1425080",
    "end": "1431050"
  },
  {
    "text": "collection issue so what we did was we were we started reusing that dictionary",
    "start": "1431050",
    "end": "1436600"
  },
  {
    "text": "so instead of recreating the dictionary whenever you would DC utilize the JSON data we would just reuse the dictionary",
    "start": "1436600",
    "end": "1444100"
  },
  {
    "text": "and update all the existing values in the existing dictionary because the package IDs typically don't really",
    "start": "1444100",
    "end": "1450670"
  },
  {
    "text": "change the only data that changes the download guns and even that doesn't change that often for most of our",
    "start": "1450670",
    "end": "1457300"
  },
  {
    "text": "packages so we basically decided to stream the entire JSON blob and just",
    "start": "1457300",
    "end": "1462700"
  },
  {
    "text": "update the download counts in the existing dictionary if the package was already in there if not we would just",
    "start": "1462700",
    "end": "1467980"
  },
  {
    "text": "add it and not cause a lot of a lot of memory traffic another interesting thing",
    "start": "1467980",
    "end": "1473470"
  },
  {
    "text": "we saw was that there were a lot of strings loaded in memory as well reason for that was that we were also using J",
    "start": "1473470",
    "end": "1479350"
  },
  {
    "text": "object up bars which means you load the entire string the entire block into a string then this utilize the entire",
    "start": "1479350",
    "end": "1486700"
  },
  {
    "text": "thing into a j object and then use that to populate a dictionary well turns out",
    "start": "1486700",
    "end": "1491980"
  },
  {
    "text": "that's also not a good good thing to do if you have this 12 megabytes blob containing json data better thing is to",
    "start": "1491980",
    "end": "1498550"
  },
  {
    "text": "just stream over the entire file and just loads basically package per package package version by package version and",
    "start": "1498550",
    "end": "1504610"
  },
  {
    "text": "reuse these objects and not instantiates objects all the time I in there so we",
    "start": "1504610",
    "end": "1510550"
  },
  {
    "text": "fixed that and we were happy because we found a really nasty bug in our search service and we thought okay we're good",
    "start": "1510550",
    "end": "1516850"
  },
  {
    "text": "to go for a for another year well turns out that was the case but not for a year",
    "start": "1516850",
    "end": "1523120"
  },
  {
    "text": "but for a couple of weeks in those weeks we did a couple of things because we discovered we didn't have all the",
    "start": "1523120",
    "end": "1529060"
  },
  {
    "text": "logging we really wanted to have so we added additional monitoring additional tracing we started looking into a pin",
    "start": "1529060",
    "end": "1535240"
  },
  {
    "text": "sites as well I don't know if you're familiar with that product it's basically sort of like a mini continuous",
    "start": "1535240",
    "end": "1541540"
  },
  {
    "text": "profiler on your application that collects request data couples it to to",
    "start": "1541540",
    "end": "1547180"
  },
  {
    "text": "stack traces couples into exceptions and so on so you can search in it and basically troubleshoot your application",
    "start": "1547180",
    "end": "1553600"
  },
  {
    "text": "more easily so we started investing in debts they'll have changes there and we're confident that whenever something",
    "start": "1553600",
    "end": "1559600"
  },
  {
    "text": "would happen we would have the data to investigate it and we did we would no longer have to recite to profiling on",
    "start": "1559600",
    "end": "1567280"
  },
  {
    "text": "the on the production system so as I said a couple of weeks later we",
    "start": "1567280",
    "end": "1573370"
  },
  {
    "start": "1569000",
    "end": "1741000"
  },
  {
    "text": "started seeing another issue on our services we were starting to see internal server error so whenever people",
    "start": "1573370",
    "end": "1579580"
  },
  {
    "text": "would do packet restores search was working fine if you had existing packages and would just want to check",
    "start": "1579580",
    "end": "1585700"
  },
  {
    "text": "for updates example that would work perfectly fine the only thing that was not working was if you open up a",
    "start": "1585700",
    "end": "1592119"
  },
  {
    "text": "solution and you don't have the packages on your system and you would want to download all those packages to your system that would fail with an error 500",
    "start": "1592119",
    "end": "1600340"
  },
  {
    "text": "as well what we were seeing in app insights was",
    "start": "1600340",
    "end": "1605679"
  },
  {
    "text": "that the response time would go up the number of requests would actually be",
    "start": "1605679",
    "end": "1611440"
  },
  {
    "text": "stable or go down even a little the exception rate would not really go up it was just the response time that was",
    "start": "1611440",
    "end": "1618399"
  },
  {
    "text": "going up so yeah that's an issue so what we did was we looked into the",
    "start": "1618399",
    "end": "1625960"
  },
  {
    "text": "traces we had in epping sites we started looking into the events that were being logged in Windows Event log and we saw",
    "start": "1625960",
    "end": "1632919"
  },
  {
    "text": "that is was crashing during these time frames so whenever this response time would go up we would see at least one of",
    "start": "1632919",
    "end": "1639489"
  },
  {
    "text": "our servers having an is crash restarting the application pool and",
    "start": "1639489",
    "end": "1644499"
  },
  {
    "text": "returning error 500 for a couple of seconds so that was what we were seeing",
    "start": "1644499",
    "end": "1649539"
  },
  {
    "text": "there but what was the cause of that so we started looking into all of our",
    "start": "1649539",
    "end": "1655509"
  },
  {
    "text": "logs and we didn't really find anything significant except for the fact that we saw that is was crashing on us",
    "start": "1655509",
    "end": "1662340"
  },
  {
    "text": "we saw that on our starch accounts we saw the crash terms of is being written",
    "start": "1662340",
    "end": "1667539"
  },
  {
    "text": "so I saw quite a number of of crash dumps on there so that confirmed that is",
    "start": "1667539",
    "end": "1672789"
  },
  {
    "text": "was crashing but didn't really tell us what the cause of that crash was we also started looking into the HTTP",
    "start": "1672789",
    "end": "1679989"
  },
  {
    "text": "dot sis locks on our web server HTTP dots this is basically the HTTP",
    "start": "1679989",
    "end": "1685419"
  },
  {
    "text": "subsystem you have in your windows machines so whenever you use is or even",
    "start": "1685419",
    "end": "1691210"
  },
  {
    "text": "a self hosted web application you're actually using HTTP dot sis as the web server and is is just a fancy expensive",
    "start": "1691210",
    "end": "1699059"
  },
  {
    "text": "nice wrapper around this HTTP Nazis now is has logs but HTTP dot sis itself is",
    "start": "1699059",
    "end": "1705609"
  },
  {
    "text": "kernel module handling HTTP traffic also has logging and we looked into that one",
    "start": "1705609",
    "end": "1710619"
  },
  {
    "text": "and we saw a tremendous amount of connection abandoned by request queue a type errors so if you look up that error",
    "start": "1710619",
    "end": "1717799"
  },
  {
    "text": "you will see that it actually means that the application pool just stopped working and expectedly which typically",
    "start": "1717799",
    "end": "1724519"
  },
  {
    "text": "denotes a crash has happens so all those things combined told us well the the",
    "start": "1724519",
    "end": "1729979"
  },
  {
    "text": "root cause of this thing is going to be is crashing out on us and we wanted to",
    "start": "1729979",
    "end": "1735200"
  },
  {
    "text": "start looking into those crash dumps so we loaded those crash dumps on to our machines and started looking into them",
    "start": "1735200",
    "end": "1741669"
  },
  {
    "start": "1741000",
    "end": "2099000"
  },
  {
    "text": "now hardcore debuggers will typically use something like windy bug or",
    "start": "1741669",
    "end": "1746869"
  },
  {
    "text": "something but if you have a crash dump you can actually open that crash dump in visual studio as well and that's a nice",
    "start": "1746869",
    "end": "1753830"
  },
  {
    "text": "thing because it gives you a number of things in terms of information I don't",
    "start": "1753830",
    "end": "1759830"
  },
  {
    "text": "know if you're familiar with crash dumps you basically have two different types of crash dumps one of them is a full",
    "start": "1759830",
    "end": "1765200"
  },
  {
    "text": "dump that contains stack traces exceptions and whatever is happening at the time the crash dump is created the",
    "start": "1765200",
    "end": "1771379"
  },
  {
    "text": "other one is a mini dump which just contains the stack traces but not whatever is in memory at a time Asher",
    "start": "1771379",
    "end": "1777799"
  },
  {
    "text": "for us was creating mini dumps so it meant that we had stack traces we knew which threads were running which methods",
    "start": "1777799",
    "end": "1784519"
  },
  {
    "text": "were running and things like that but we didn't have the actual values of the variables in memory still quite",
    "start": "1784519",
    "end": "1790460"
  },
  {
    "text": "interesting because when we open this crash dump we saw that the treads tried to read from or write to a virtual",
    "start": "1790460",
    "end": "1796249"
  },
  {
    "text": "address for which it does not have the appropriate access that's a nice error I don't know if",
    "start": "1796249",
    "end": "1802639"
  },
  {
    "text": "you've ever seen this one I hadn't seen this one before and turns out it's quite",
    "start": "1802639",
    "end": "1807649"
  },
  {
    "text": "an interesting one to debug as well now if you open a crash dump in Visual Studio you can actually tell visual",
    "start": "1807649",
    "end": "1814099"
  },
  {
    "text": "studio to act like it is debugging connected to the process that is running",
    "start": "1814099",
    "end": "1819259"
  },
  {
    "text": "this thing at the time this crash dump was happening so let's debug with managed only and",
    "start": "1819259",
    "end": "1824469"
  },
  {
    "text": "if we do that we will typically wait for symbols to be loaded and",
    "start": "1824469",
    "end": "1831369"
  },
  {
    "text": "i found out that australia apparently is a far as far away from the microsoft",
    "start": "1831369",
    "end": "1836779"
  },
  {
    "text": "simple server so let's see how fast this goes this is ask this is actually not that I did this in",
    "start": "1836779",
    "end": "1843739"
  },
  {
    "text": "the room before and that was that was terrible so this is quite ok won't be long",
    "start": "1843739",
    "end": "1851140"
  },
  {
    "text": "should not be long the thing we will see is that the",
    "start": "1851140",
    "end": "1856430"
  },
  {
    "text": "exception that happens at the time the Crashdown postmates will just open into our face and show and show the cause of",
    "start": "1856430",
    "end": "1863390"
  },
  {
    "text": "the error on the server so let's wait for symbols to be loaded there we are we",
    "start": "1863390",
    "end": "1870440"
  },
  {
    "text": "see the exception this time we see the exception with both the message as well as the physical address where this",
    "start": "1870440",
    "end": "1876830"
  },
  {
    "text": "happen happens the module in which this happened happened and so on so let's break and if we break we can actually",
    "start": "1876830",
    "end": "1885970"
  },
  {
    "text": "close the traits window we can actually look at the disassembly",
    "start": "1885970",
    "end": "1892100"
  },
  {
    "text": "of this of this code so let's disable just my codes and let's look at the",
    "start": "1892100",
    "end": "1898760"
  },
  {
    "text": "disassembly and apparently the issue was this move statements in memory awesome",
    "start": "1898760",
    "end": "1905260"
  },
  {
    "text": "but here what was going on in the application so an interesting you can do is if you have a crash dump and you have",
    "start": "1905260",
    "end": "1912410"
  },
  {
    "text": "the symbols of the application and the Assemblies of the application like it",
    "start": "1912410",
    "end": "1918050"
  },
  {
    "text": "was built on your CI system for example you can actually load those symbols and look at the source codes of of his",
    "start": "1918050",
    "end": "1924650"
  },
  {
    "text": "entire thing now the problem was that at this point in time we discovered our build server was not storing symbols",
    "start": "1924650",
    "end": "1932030"
  },
  {
    "text": "which meant that this deployment we had crashing on us we did of course have the",
    "start": "1932030",
    "end": "1937130"
  },
  {
    "text": "assemblies because the assemblies were serving the application on the server but we did not have the debugger symbols",
    "start": "1937130",
    "end": "1942590"
  },
  {
    "text": "on our build server which means that the only thing we were left with was this disassembly and that didn't really tell",
    "start": "1942590",
    "end": "1949640"
  },
  {
    "text": "us a lot so luckily for us we still had the Assemblies of course and JetBrains has",
    "start": "1949640",
    "end": "1955970"
  },
  {
    "text": "an awesome decompiler and you can load the assemblies in there and look at the code so for example I loaded the",
    "start": "1955970",
    "end": "1962600"
  },
  {
    "text": "assembly which crashed on us and we can look at whatever is in there we can look at all the different MVC areas we can",
    "start": "1962600",
    "end": "1970280"
  },
  {
    "text": "look at the controllers and search to debts but a more interesting thing is that the peak also comes with a simple",
    "start": "1970280",
    "end": "1976610"
  },
  {
    "text": "server so if I enable this little button there it will host a simple server for",
    "start": "1976610",
    "end": "1982590"
  },
  {
    "text": "us and actually mimic the Microsoft symbol servers or whatever symbol server",
    "start": "1982590",
    "end": "1987840"
  },
  {
    "text": "you would have decompile everything on the fly and serve that data to visual studio essentially giving us the source",
    "start": "1987840",
    "end": "1994500"
  },
  {
    "text": "code of the application that was running at the time so let's do that let's dive back into visual studio and this time",
    "start": "1994500",
    "end": "2001850"
  },
  {
    "text": "set the cymbal pads includes our dot peak as as a decompiler",
    "start": "2001850",
    "end": "2008530"
  },
  {
    "text": "also that one was disabled and if we do this we can",
    "start": "2008530",
    "end": "2014380"
  },
  {
    "text": "debug again and this time we will get much much more information because visual studio will reach out to the peak",
    "start": "2014380",
    "end": "2021170"
  },
  {
    "text": "which will be compile the actual assemblies that we had back then and will show us the source codes of the",
    "start": "2021170",
    "end": "2026660"
  },
  {
    "text": "application as it was when this error happens so here we are we see the exception and we actually see the line",
    "start": "2026660",
    "end": "2033020"
  },
  {
    "text": "of code where this happens now be warned this is not the actual codes that you wrote and that God compelled into the",
    "start": "2033020",
    "end": "2039260"
  },
  {
    "text": "application this is of course d compelled codes and it's compiler optimized and it's not exactly what you",
    "start": "2039260",
    "end": "2045800"
  },
  {
    "text": "wrote but it should give you a good idea of what was happening in the application and apparently our post download",
    "start": "2045800",
    "end": "2051919"
  },
  {
    "text": "statistics methods which would track a downloads whenever you would install a package was failing us now as I said",
    "start": "2051919",
    "end": "2059419"
  },
  {
    "text": "before this is the metric service and that metric services really really stupid it's the simplest service you've",
    "start": "2059419",
    "end": "2065330"
  },
  {
    "text": "ever seen so we were kind of surprised that this method was crashing on us even",
    "start": "2065330",
    "end": "2070730"
  },
  {
    "text": "more you see that we do a task dot run and just fire-and-forget basically to",
    "start": "2070730",
    "end": "2075800"
  },
  {
    "text": "increment the download counter so you were not expecting that at ascot run would actually cause ious to crash",
    "start": "2075800",
    "end": "2082610"
  },
  {
    "text": "because we would simply fire and forget and even if the download count wasn't really tracked we don't really care that",
    "start": "2082610",
    "end": "2089330"
  },
  {
    "text": "much about those download counts at those moments in time so we would expect this to just work and never never never",
    "start": "2089330",
    "end": "2096350"
  },
  {
    "text": "never crash our is in production but turns out it did crash is in production",
    "start": "2096350",
    "end": "2101650"
  },
  {
    "start": "2099000",
    "end": "2224000"
  },
  {
    "text": "so we started searching the internet being didn't find a lot of things because",
    "start": "2101650",
    "end": "2109090"
  },
  {
    "text": "yeah being is an awesome search engine for some things but for technical topics it's not always the best turns out",
    "start": "2109090",
    "end": "2116260"
  },
  {
    "text": "google was also not really helpful because we didn't find a lot of information in there as well we searched",
    "start": "2116260",
    "end": "2121570"
  },
  {
    "text": "on the error message where we had this the actual error message that gave a lot",
    "start": "2121570",
    "end": "2127630"
  },
  {
    "text": "of results but nothing that related to our codes nothing that related to the center the scenario that we were seeing",
    "start": "2127630",
    "end": "2133840"
  },
  {
    "text": "until somewhere on page 50 of some search engine we found another person",
    "start": "2133840",
    "end": "2139360"
  },
  {
    "text": "with who had an unobserved task exception when doing this fire and forgets type of operation in his",
    "start": "2139360",
    "end": "2145570"
  },
  {
    "text": "application so we looked at that link and we started reading and basically",
    "start": "2145570",
    "end": "2151510"
  },
  {
    "text": "what the guy was saying was that if you do a task but run and just fire and forget the operation in there and that",
    "start": "2151510",
    "end": "2158470"
  },
  {
    "text": "operation crashes the exception will actually bubble up and if no one catches the exception your process will die and",
    "start": "2158470",
    "end": "2165730"
  },
  {
    "text": "that was what was happening we did not really catch that exception because we were just expecting it to always work",
    "start": "2165730",
    "end": "2172060"
  },
  {
    "text": "and even if it would not work we did not expect that the exception would bubble up yet it bubbled up and basically",
    "start": "2172060",
    "end": "2177520"
  },
  {
    "text": "crashed is whenever updating the download count went wrong so turns out",
    "start": "2177520",
    "end": "2183460"
  },
  {
    "text": "the fix is quite easy all you have to do is tell the task scheduler what's to do",
    "start": "2183460",
    "end": "2188740"
  },
  {
    "text": "whenever you have an unobserved asked exception and tell it's that the exception was handled so we added this",
    "start": "2188740",
    "end": "2195070"
  },
  {
    "text": "portion of codes handle the unobserved asked exception we log it we track the",
    "start": "2195070",
    "end": "2200440"
  },
  {
    "text": "metrics in it and then set it observed and IOUs was perfectly fine with that and with no langer would no longer crash",
    "start": "2200440",
    "end": "2208270"
  },
  {
    "text": "on us awesome case closed another issue down and we thought were good for",
    "start": "2208270",
    "end": "2213790"
  },
  {
    "text": "another year there was that was a colleague of mine",
    "start": "2213790",
    "end": "2219010"
  },
  {
    "text": "by the way who had a funny witty remark on that anyway",
    "start": "2219010",
    "end": "2224580"
  },
  {
    "start": "2224000",
    "end": "2281000"
  },
  {
    "text": "so we thought we were good for another year but apparently a couple of weeks",
    "start": "2224580",
    "end": "2230050"
  },
  {
    "text": "later we saw another issue arise on our services we saw high response times on the web server in general so basically",
    "start": "2230050",
    "end": "2236680"
  },
  {
    "text": "any requests that would happen which would have really high response times so",
    "start": "2236680",
    "end": "2242119"
  },
  {
    "text": "what we were seeing was high response times lots of CPU usage on the servers we saw",
    "start": "2242119",
    "end": "2249230"
  },
  {
    "text": "that Asher was auto scaling so back then we had a sure auto scaling enabled based on this on on the cpu percentage which",
    "start": "2249230",
    "end": "2256700"
  },
  {
    "text": "would mean if the cpu would max out we would just add more instances hoping that this would be able to serve or",
    "start": "2256700",
    "end": "2263330"
  },
  {
    "text": "handle all the traffic of course it didn't it would just spin up new new service and also makes their CPU out so",
    "start": "2263330",
    "end": "2271340"
  },
  {
    "text": "we were seeing that and when profiling it using App insights we did not really she see the root cause of what was",
    "start": "2271340",
    "end": "2278930"
  },
  {
    "text": "causing these high response types so we basically started looking into our",
    "start": "2278930",
    "end": "2284780"
  },
  {
    "start": "2281000",
    "end": "2523000"
  },
  {
    "text": "locks we started looking into F insights we started looking into all the logging we had we started doing Google searches",
    "start": "2284780",
    "end": "2290690"
  },
  {
    "text": "on whatever could be causing unexpected rises in response times and what we",
    "start": "2290690",
    "end": "2298010"
  },
  {
    "text": "found was what we thought the root cause of this issue and it turns out it",
    "start": "2298010",
    "end": "2303109"
  },
  {
    "text": "actually was a root cause of this issue turns out that if you are using is to serve your traffic and you have lots of",
    "start": "2303109",
    "end": "2311060"
  },
  {
    "text": "requests coming in is will handle them just fine ious does have an issue which",
    "start": "2311060",
    "end": "2316670"
  },
  {
    "text": "is that if you have burst requests coming in which means you have a low usage of the service at one point in",
    "start": "2316670",
    "end": "2323300"
  },
  {
    "text": "time and then all of a sudden the hordes would come in and start hammering your server ious does not really like having",
    "start": "2323300",
    "end": "2330920"
  },
  {
    "text": "that reason for that is is has this concept of worker threads which do which",
    "start": "2330920",
    "end": "2336320"
  },
  {
    "text": "end all the requests that are coming in but also io treads which do things like communicate with the database or",
    "start": "2336320",
    "end": "2342470"
  },
  {
    "text": "communicate with the storage system and stuff like that whenever is starts your application pool",
    "start": "2342470",
    "end": "2348470"
  },
  {
    "text": "it will fire up a number of worker threads to handle HTTP traffic coming in",
    "start": "2348470",
    "end": "2354470"
  },
  {
    "text": "and by default it will start I think to i/o trips per CPU in your server to",
    "start": "2354470",
    "end": "2360290"
  },
  {
    "text": "handle things like database communication and Men storage ins and things like that whenever traffic comes in and traffic",
    "start": "2360290",
    "end": "2367190"
  },
  {
    "text": "increases ious will dynamically detect that it needs more threats to handle all the traffic and it will for example",
    "start": "2367190",
    "end": "2373070"
  },
  {
    "text": "scale 210 I otras to do data based communication and stuff like that the",
    "start": "2373070",
    "end": "2378270"
  },
  {
    "text": "only issue is that is has to learn about what is happening and it has to see that the traffic is slightly increasing and",
    "start": "2378270",
    "end": "2384990"
  },
  {
    "text": "slightly going up but if all of a sudden you get this burst of traffic ious will simply add one treads or two traits but",
    "start": "2384990",
    "end": "2392070"
  },
  {
    "text": "not the 10th rates or the hundred threats you would actually need at that point in time so I asst would eventually",
    "start": "2392070",
    "end": "2397290"
  },
  {
    "text": "scale up to the point that you wanted to scale up to but not immediately and that was actually causing these high response",
    "start": "2397290",
    "end": "2404370"
  },
  {
    "text": "times that we had there and turns out the fix was actually quite easy we would just have to change the default settings",
    "start": "2404370",
    "end": "2410250"
  },
  {
    "text": "in is to spin up more work effects in your backgrounds so that even if we would have burst traffic bursts coming",
    "start": "2410250",
    "end": "2417000"
  },
  {
    "text": "in in the requests ious would have enough threats to handle a database and storage and stuff like that so the",
    "start": "2417000",
    "end": "2424620"
  },
  {
    "text": "results we had up inside and you would see that the application with spike in requests times we turn down this setting",
    "start": "2424620",
    "end": "2432090"
  },
  {
    "text": "and immediately you see the drop to something that's almost a flat line in response times and you can really see",
    "start": "2432090",
    "end": "2438720"
  },
  {
    "text": "where we did a change and where we optimize this is minimum I oh dress nice side effect was that our server response",
    "start": "2438720",
    "end": "2445530"
  },
  {
    "text": "time went down in general as well why well we had auto scaling we had a number of servers so not all servers added the",
    "start": "2445530",
    "end": "2453120"
  },
  {
    "text": "exact same amount of i/o traits so you would always have a couple of servers that would be slower or responding a",
    "start": "2453120",
    "end": "2459180"
  },
  {
    "text": "little bit slower but by changing this setting all the servers were on the same page whenever they start at the",
    "start": "2459180",
    "end": "2464400"
  },
  {
    "text": "application pool and we immediately basically saw that response times would drop to a constant level on all machines",
    "start": "2464400",
    "end": "2470910"
  },
  {
    "text": "at all time awesome now Asher is quite nice if you",
    "start": "2470910",
    "end": "2476820"
  },
  {
    "text": "are hosting on web roles you can actually RDP into the machine and make changes to is to for example change this",
    "start": "2476820",
    "end": "2483360"
  },
  {
    "text": "mean io traits setting problem is if you do that the next time you do a deployment or the next time Asher",
    "start": "2483360",
    "end": "2489870"
  },
  {
    "text": "decides to kill your machine and reboot it's on a different host those changes will be gone so you have to somehow make",
    "start": "2489870",
    "end": "2496710"
  },
  {
    "text": "it permanent and the way to do that in Azure is by creating a startup script so what we did was add a few lines of",
    "start": "2496710",
    "end": "2503600"
  },
  {
    "text": "command-line codes to our application so that on every deployment it would call into the command line is configuration",
    "start": "2503600",
    "end": "2511019"
  },
  {
    "text": "through and set these worker threads to to a reasonable number instead of the default",
    "start": "2511019",
    "end": "2517849"
  },
  {
    "text": "awesome case closed we're good for another year well turns out we were not good for",
    "start": "2517849",
    "end": "2524849"
  },
  {
    "text": "another year it turned out we were good for another four hours and after that's a little more but still it turned out",
    "start": "2524849",
    "end": "2532259"
  },
  {
    "text": "that we were seeing package restore timeouts so we optimize the number of things we were seeing that response",
    "start": "2532259",
    "end": "2538019"
  },
  {
    "text": "times would drop to a pretty much constant level yet we were seeing that package free stores were timing out and",
    "start": "2538019",
    "end": "2544109"
  },
  {
    "text": "again only package restore so bringing down the packages whenever you don't have them on disc everything else would",
    "start": "2544109",
    "end": "2550109"
  },
  {
    "text": "be just working fine so here's what we were seeing on the v2",
    "start": "2550109",
    "end": "2555149"
  },
  {
    "text": "based feet so basically Visual Studio 2003 2013 and the first versions of 2015",
    "start": "2555149",
    "end": "2563119"
  },
  {
    "text": "they would hit our dub CF odata service that one would hit the get method where",
    "start": "2563119",
    "end": "2569519"
  },
  {
    "text": "you would get by ID inversion to get the metadata to see if you can actually install the package and get the download",
    "start": "2569519",
    "end": "2575009"
  },
  {
    "text": "URL to the package and what we were seeing is packaged restores on that",
    "start": "2575009",
    "end": "2580109"
  },
  {
    "text": "specific call in the service we were seeing this every 7 to 15 hours so not",
    "start": "2580109",
    "end": "2586259"
  },
  {
    "text": "continuously every 7 to 15 hours and it would last for 10 to 15 minutes and",
    "start": "2586259",
    "end": "2591569"
  },
  {
    "text": "afterwards everything would work just fine again so very temporal very yep not",
    "start": "2591569",
    "end": "2597899"
  },
  {
    "text": "really easy to debug and not really easy to trap what was going on nice screenshot from app insights if you",
    "start": "2597899",
    "end": "2604589"
  },
  {
    "text": "were doing package resource we actually had requests take up 21 minutes to serve a package which is insane for something",
    "start": "2604589",
    "end": "2611549"
  },
  {
    "text": "that just fetches meta data from the database by ID in version so primary key look up and would give you a URL to",
    "start": "2611549",
    "end": "2618689"
  },
  {
    "text": "where you would actually download the package so one minute for that operation is just crazy",
    "start": "2618689",
    "end": "2624409"
  },
  {
    "text": "we didn't really see an easy way to reproduce this issue it was happening",
    "start": "2624409",
    "end": "2630209"
  },
  {
    "text": "only on production we did our best to reproduce this issue on our development in our staging environments we weren't",
    "start": "2630209",
    "end": "2636839"
  },
  {
    "text": "able to do it why because we weren't really sure what was happening it would only happen for a couple of minutes",
    "start": "2636839",
    "end": "2642510"
  },
  {
    "text": "every couple of hours so it was really hard to reproduce and we already beat",
    "start": "2642510",
    "end": "2648329"
  },
  {
    "text": "into our production systems and we basically had someone on the team look",
    "start": "2648329",
    "end": "2653369"
  },
  {
    "text": "at this at the task limiter for the entire day looking at when the cpu would",
    "start": "2653369",
    "end": "2659160"
  },
  {
    "text": "spike to trap the issue and try and get some information about what was happening in the process at the time and",
    "start": "2659160",
    "end": "2665190"
  },
  {
    "text": "what we were seeing was high cpu load whenever this would happen but we had no",
    "start": "2665190",
    "end": "2671579"
  },
  {
    "text": "way to continuously profile this because profiling generates a lot of data so it was really difficult to trap whatever",
    "start": "2671579",
    "end": "2678900"
  },
  {
    "text": "was going on there so we looked at what we did recently to fix things and we",
    "start": "2678900",
    "end": "2684660"
  },
  {
    "text": "thought okay so we change this min I otras value to make sure that's whenever requests would come in ious would have",
    "start": "2684660",
    "end": "2690990"
  },
  {
    "text": "enough dreads available to handle things like database and storage communication and the slow code path is fine packages",
    "start": "2690990",
    "end": "2698550"
  },
  {
    "text": "by ID so we started looking into what this method actually does finding packages by ID and what it does is it",
    "start": "2698550",
    "end": "2705510"
  },
  {
    "text": "reaches out to the search service which is a rest based service over HTTP to",
    "start": "2705510",
    "end": "2711210"
  },
  {
    "text": "basically fetch the metadata of that specific package and serve it back to the user so what could mean I owe treads",
    "start": "2711210",
    "end": "2718319"
  },
  {
    "text": "and Max I'll traits in is have in common with HTTP calls being made in the",
    "start": "2718319",
    "end": "2724500"
  },
  {
    "text": "application to a different service we did a lot of searching again in a lot",
    "start": "2724500",
    "end": "2730470"
  },
  {
    "text": "of research again and we found an interesting article that basically benchmarks HTTP clients or the dotnet",
    "start": "2730470",
    "end": "2737400"
  },
  {
    "text": "HTTP client that you can use to call into any service out there and we found",
    "start": "2737400",
    "end": "2743010"
  },
  {
    "text": "out that if you use HTTP clients and it's a sink model of programming that's",
    "start": "2743010",
    "end": "2748920"
  },
  {
    "text": "HTTP client doesn't really limit the number of concurrent requests it makes on your server so what we were seeing",
    "start": "2748920",
    "end": "2756329"
  },
  {
    "text": "was if people would start doing package tree stars there's typically a lot of requests coming in because every package",
    "start": "2756329",
    "end": "2762599"
  },
  {
    "text": "in your solution would be checked if it's still on yigit's and where it could be downloaded and typically whenever the",
    "start": "2762599",
    "end": "2769290"
  },
  {
    "text": "u.s. wakes up for example you would see a lot of traffic coming into the service and evidently this service would make a",
    "start": "2769290",
    "end": "2777059"
  },
  {
    "text": "lot of calls to our search service in the back so what we were seeing we thought was that dhcp client would just",
    "start": "2777059",
    "end": "2785130"
  },
  {
    "text": "hammer our search service our search service would be perfectly happy with that and surf traffic but still somehow",
    "start": "2785130",
    "end": "2791789"
  },
  {
    "text": "it would block on making those requests at a certain point in time reason is",
    "start": "2791789",
    "end": "2798059"
  },
  {
    "text": "that HTTP client does not limit the number of concurrent requests it makes to an upstream service",
    "start": "2798059",
    "end": "2804440"
  },
  {
    "text": "combine that with the fact that the number of TCP ports you have on a machine is limited",
    "start": "2804440",
    "end": "2810950"
  },
  {
    "text": "and combine that with the fact that you are running on a web server which means that you have TCP ports in use to serve",
    "start": "2810950",
    "end": "2817079"
  },
  {
    "text": "your clients and you have TCP ports in used to basically fetch data from this upstream service makes that you are",
    "start": "2817079",
    "end": "2823619"
  },
  {
    "text": "actually using a lot of TCP ports on the system you would think those requests",
    "start": "2823619",
    "end": "2830039"
  },
  {
    "text": "are quite fast and they would free up again after the TCP port has been used by the operating system or by little net",
    "start": "2830039",
    "end": "2836849"
  },
  {
    "text": "rotten time well turns out that's every TCP ports that you used to make an",
    "start": "2836849",
    "end": "2842039"
  },
  {
    "text": "upstream connection on a downstream connection is being held for about four minutes by the operating system to make",
    "start": "2842039",
    "end": "2848670"
  },
  {
    "text": "sure that whenever a request still returns or there's traffic returning to your service to make sure that doesn't",
    "start": "2848670",
    "end": "2854579"
  },
  {
    "text": "confuse the run time because the request was already handled and some router in between is",
    "start": "2854579",
    "end": "2860059"
  },
  {
    "text": "resending packages that have already been received so combine all that",
    "start": "2860059",
    "end": "2865349"
  },
  {
    "text": "information and if you do a quick calculation you will find that you can pretty fast you can starve the number of",
    "start": "2865349",
    "end": "2872700"
  },
  {
    "text": "pcp ports you have on a server pretty fast actually so we looked into widest",
    "start": "2872700",
    "end": "2877710"
  },
  {
    "text": "what's happening and what we could do to limit the number of concurrent requests this HTTP client could make to upstream",
    "start": "2877710",
    "end": "2884279"
  },
  {
    "text": "services and we found that if you don't set the service point manager dots default connection limits to a",
    "start": "2884279",
    "end": "2891059"
  },
  {
    "text": "reasonable value you would just starve your tcp ports on your system so all we had to do basically to fix this issue",
    "start": "2891059",
    "end": "2897299"
  },
  {
    "text": "was set a value to that thing and the net would simply respect whatever value we sit there and have more than enough",
    "start": "2897299",
    "end": "2903749"
  },
  {
    "text": "TCP ports and reuse them and bourke fine so that's what we did we changed a few",
    "start": "2903749",
    "end": "2910500"
  },
  {
    "text": "things in our coats and we set the maximum number of concurrent requests that could be mates now when reading all",
    "start": "2910500",
    "end": "2917160"
  },
  {
    "text": "these blogs and articles and internal documentation we also found out there's",
    "start": "2917160",
    "end": "2922260"
  },
  {
    "text": "a couple of other optimizations that dotnet does for you that you typically don't want to have if you have a",
    "start": "2922260",
    "end": "2927960"
  },
  {
    "text": "server-side application that makes upstream calls to a really tiny service that returns yeah small small amounts of",
    "start": "2927960",
    "end": "2935160"
  },
  {
    "text": "data so another thing we disabled was neg Ling an eggling is an optimization",
    "start": "2935160",
    "end": "2940200"
  },
  {
    "text": "in the tcp/ip protocol that basically combines several smaller requests into",
    "start": "2940200",
    "end": "2945480"
  },
  {
    "text": "one tcp packet so that you would not be flooding the network with small packets and instead would just put a lower",
    "start": "2945480",
    "end": "2953310"
  },
  {
    "text": "number of packets on on the network so we disabled that because it didn't make sense to do that because all of our",
    "start": "2953310",
    "end": "2959190"
  },
  {
    "text": "requests would typically be smaller than then a number of TCP packets so we",
    "start": "2959190",
    "end": "2965010"
  },
  {
    "text": "disabled it to make sure that yes the network would be flooded a little more but traffic would flow faster back and",
    "start": "2965010",
    "end": "2972090"
  },
  {
    "text": "forth between our search service and the gallery so we did that and we also",
    "start": "2972090",
    "end": "2977310"
  },
  {
    "text": "disabled expect 100 continue on this thing to basically make sure that the",
    "start": "2977310",
    "end": "2983400"
  },
  {
    "text": "TCP connections or the connection would be freed up faster on the server there",
    "start": "2983400",
    "end": "2989150"
  },
  {
    "text": "some charts after optimizing this so remember that we had one minute of",
    "start": "2989150",
    "end": "2994740"
  },
  {
    "text": "response time for a package restore well when we enable these changes you could",
    "start": "2994740",
    "end": "3000620"
  },
  {
    "text": "really see a drop in a response time back to a normal level you could see the number of requests actually go up a",
    "start": "3000620",
    "end": "3006770"
  },
  {
    "text": "little bit so the server was able to handle more traffic by making this change and response times would drop to",
    "start": "3006770",
    "end": "3012560"
  },
  {
    "text": "their normal levels around three seconds for some or at least the highest number",
    "start": "3012560",
    "end": "3019160"
  },
  {
    "text": "of the highest response time in there still not really really good but much much better than one minutes of course",
    "start": "3019160",
    "end": "3026050"
  },
  {
    "text": "awesome case closed good for another year",
    "start": "3026050",
    "end": "3031140"
  },
  {
    "start": "3031000",
    "end": "3137000"
  },
  {
    "text": "yeah so we thought that again and we started thinking like okay good for another few weeks probably and yet again",
    "start": "3031140",
    "end": "3038530"
  },
  {
    "text": "by fixing a bug we actually uncovered another bug in the system so we were",
    "start": "3038530",
    "end": "3043990"
  },
  {
    "text": "seeing memory pressure what we were seeing was on all the different servers",
    "start": "3043990",
    "end": "3049510"
  },
  {
    "text": "we were running we would see one hundred percent cpu usage being developers and",
    "start": "3049510",
    "end": "3055060"
  },
  {
    "text": "being being developers using a cloud service we thought okay we are",
    "start": "3055060",
    "end": "3060400"
  },
  {
    "text": "Microsoft's we actually pay these services internally at internal rates so let's go for bigger VMs so we increase",
    "start": "3060400",
    "end": "3068050"
  },
  {
    "text": "the size of the vm and what we saw was that the bigger vm was also spending one hundred percent of its time one hundred",
    "start": "3068050",
    "end": "3075280"
  },
  {
    "text": "percent of CPU of memory awesome maybe we don't have enough",
    "start": "3075280",
    "end": "3080980"
  },
  {
    "text": "memory in those bigger machines so you end up another level of machines so we basically did our memory on each",
    "start": "3080980",
    "end": "3087220"
  },
  {
    "text": "instance but times for and what we saw was again one or a percent of sleep of",
    "start": "3087220",
    "end": "3092650"
  },
  {
    "text": "memory usage in there so if you do that a couple of times and you keep on doing",
    "start": "3092650",
    "end": "3098140"
  },
  {
    "text": "that that's just stupid so we thought okay we did it twice and we saw the same result again so probably the application",
    "start": "3098140",
    "end": "3105190"
  },
  {
    "text": "is misbehaving here so what is eating that memory so to",
    "start": "3105190",
    "end": "3111700"
  },
  {
    "text": "discover that you actually have to do some memory profiling and you have two places where you can do this on",
    "start": "3111700",
    "end": "3116940"
  },
  {
    "text": "production which we did not really want to do again or try and reproduce it on a",
    "start": "3116940",
    "end": "3122380"
  },
  {
    "text": "test server and profile on that test server so we decided on the letter and downloads all our power is locks and",
    "start": "3122380",
    "end": "3129610"
  },
  {
    "text": "replay traffic onto a server that are onto a spare server and attach a profiler on that machine",
    "start": "3129610",
    "end": "3136230"
  },
  {
    "text": "so we did that and we downloaded all of our is locks and our is locks",
    "start": "3136230",
    "end": "3144270"
  },
  {
    "start": "3137000",
    "end": "3193000"
  },
  {
    "text": "where do we have it you can actually load those into a nice tool called called jmeter it's an open",
    "start": "3144270",
    "end": "3152200"
  },
  {
    "text": "source tool which is written in Java and it's very high DPI friendly as you can see",
    "start": "3152200",
    "end": "3157770"
  },
  {
    "text": "but it's actually an awesome tool because it allows you to read web server",
    "start": "3157770",
    "end": "3162839"
  },
  {
    "text": "log specify a number of threats to cycle through that entire lock and replay",
    "start": "3162839",
    "end": "3168749"
  },
  {
    "text": "traffic onto a different server so what we were able to do is just take actual",
    "start": "3168749",
    "end": "3174269"
  },
  {
    "text": "HTTP locks from our production machines and replay it using jmeter you can actually have multiple agents putting",
    "start": "3174269",
    "end": "3180589"
  },
  {
    "text": "traffic onto your server so we were actually able to reproduce the exact",
    "start": "3180589",
    "end": "3185640"
  },
  {
    "text": "amount of traffic in the exact traffic flow that we had on production on to our onto our development server so we did",
    "start": "3185640",
    "end": "3193200"
  },
  {
    "start": "3193000",
    "end": "3599000"
  },
  {
    "text": "that and attached a memory profiler now before we",
    "start": "3193200",
    "end": "3198660"
  },
  {
    "text": "dive into the actual profiling of memory I just want to give you a quick introduction into memory management in",
    "start": "3198660",
    "end": "3203880"
  },
  {
    "text": "Nets who have you dare say they are really familiar with how the net does its memory management's",
    "start": "3203880",
    "end": "3211220"
  },
  {
    "text": "like I guess no one really everyone knows a little bit and I also know a",
    "start": "3211220",
    "end": "3216329"
  },
  {
    "text": "little bit so let's let's yeah put out a baseline there so when you allocate",
    "start": "3216329",
    "end": "3221549"
  },
  {
    "text": "memory in.net what is happening is that you are not doing something like C++",
    "start": "3221549",
    "end": "3227430"
  },
  {
    "text": "would do ask the operating system for a portion of memory in in its address space and use that what you do is",
    "start": "3227430",
    "end": "3234989"
  },
  {
    "text": "actually you start the application and the net will reserve massive chunk of memory for your application and not net",
    "start": "3234989",
    "end": "3241619"
  },
  {
    "text": "will simply allocate your variables in that block it gets from the operating system and we're not using that that",
    "start": "3241619",
    "end": "3248759"
  },
  {
    "text": "memory anymore the net will free that memory for you that thing is called the managed heap so whenever you allocate a",
    "start": "3248759",
    "end": "3256109"
  },
  {
    "text": "new object whenever you create a string or create a new object or a person or an address or whatever objects that you are",
    "start": "3256109",
    "end": "3262200"
  },
  {
    "text": "using you're actually allocating that objects in this manage to keep this dot net memory memory space now it's really",
    "start": "3262200",
    "end": "3270329"
  },
  {
    "text": "fast to do that because the net doesn't have to go to the US to ask for",
    "start": "3270329",
    "end": "3275489"
  },
  {
    "text": "additional memory it just has a block and it's can freely allocate itself of course that metal so you use some",
    "start": "3275489",
    "end": "3281970"
  },
  {
    "text": "unmanaged memory for for doing things like you're hosting its own memory hosting the garbage collector and things",
    "start": "3281970",
    "end": "3287759"
  },
  {
    "text": "like that but generally you have this managed heap and all your stuff goes in there of course all your stuff has to go out",
    "start": "3287759",
    "end": "3295570"
  },
  {
    "text": "of there as well if it's no longer being used in C++ for example if you ask",
    "start": "3295570",
    "end": "3300730"
  },
  {
    "text": "memory from the operating system and you no longer need it you would give it back to the operating system so it knows it",
    "start": "3300730",
    "end": "3306730"
  },
  {
    "text": "can distribute it to another application or maybe again to your air same application dotnet does not do that",
    "start": "3306730",
    "end": "3313480"
  },
  {
    "text": "stuff net has its own memory space that it's freely distribute san delegates for your objects in the.net space and it has",
    "start": "3313480",
    "end": "3320830"
  },
  {
    "text": "a garbage collector instance so what will happen is if your variable is no longer being used that net will simply",
    "start": "3320830",
    "end": "3327010"
  },
  {
    "text": "scan the entire managed heap look at the objects that are in there and if it finds something that is no longer being",
    "start": "3327010",
    "end": "3332770"
  },
  {
    "text": "used it will kill it and update it in its own index basically to to be able to",
    "start": "3332770",
    "end": "3339010"
  },
  {
    "text": "allocate that memory for new variables in your application again now this",
    "start": "3339010",
    "end": "3344140"
  },
  {
    "text": "managed heap is divided into multiple generations you may have seen Jen 0 gen",
    "start": "3344140",
    "end": "3350050"
  },
  {
    "text": "one gen 2 and stuff like that reason for that is a lot of objects are really short lived typically you have a methods",
    "start": "3350050",
    "end": "3356860"
  },
  {
    "text": "you allocate a variable and at the end of the methods the variable is no longer being used so there's no point in",
    "start": "3356860",
    "end": "3363250"
  },
  {
    "text": "keeping that variable around or keeping the memory space around and Jen 0 is basically we're all objects are",
    "start": "3363250",
    "end": "3369640"
  },
  {
    "text": "allocated whenever you allocate something in the dotnet memory typically garbage collection is really fast",
    "start": "3369640",
    "end": "3375850"
  },
  {
    "text": "because if the net wants to free up some memory it will simply scan that Chang 0 space and remove everything that's no",
    "start": "3375850",
    "end": "3382480"
  },
  {
    "text": "longer being used if something is still in use whenever that garbage collection cycle happens dotnet moves the objects",
    "start": "3382480",
    "end": "3389290"
  },
  {
    "text": "into gen 1 and same thing happens there it's the net will scan jan-14 objects",
    "start": "3389290",
    "end": "3395530"
  },
  {
    "text": "that are no longer being used and if that's the case it will remove the objects if it's still being used it will",
    "start": "3395530",
    "end": "3401080"
  },
  {
    "text": "go to Jenn to where it will just keep on living or eventually be cleaned up again if it's no longer being used",
    "start": "3401080",
    "end": "3408180"
  },
  {
    "text": "now why these generations and why this moving of objects between those generations well the reason for that is",
    "start": "3408180",
    "end": "3415480"
  },
  {
    "text": "typically if you have short-lived objects they don't have a lot of pointers to them they are being used in",
    "start": "3415480",
    "end": "3422860"
  },
  {
    "text": "one methods and there's only one pointer so it's really easy to free it up by the garbage collector in the garbage collect",
    "start": "3422860",
    "end": "3428600"
  },
  {
    "text": "can simply scan the entire thing and free up the the memory there now of course if you have an object that lives",
    "start": "3428600",
    "end": "3434090"
  },
  {
    "text": "longer in this manner cheap then there may be more pointers to this specific",
    "start": "3434090",
    "end": "3440120"
  },
  {
    "text": "object and the garbage collector may have to do much more work to find out who is actually using that specific",
    "start": "3440120",
    "end": "3446060"
  },
  {
    "text": "objects and to see if it can actually free up the memory or not same thing with gin too if you if you end up in",
    "start": "3446060",
    "end": "3452510"
  },
  {
    "text": "gentoo you actually have an object that lists quite long and the garbage collector has more work to check if that",
    "start": "3452510",
    "end": "3459230"
  },
  {
    "text": "object is still being used or not so what that dotnet does is it keeps these generations long-lived objects go into",
    "start": "3459230",
    "end": "3466640"
  },
  {
    "text": "Jen to medium leave the objects go into gen 1 and short-lived objects just remain in jan 08 get cleaned up in there",
    "start": "3466640",
    "end": "3475180"
  },
  {
    "text": "that's one thing to basically partition the memory like that the the second",
    "start": "3475180",
    "end": "3481160"
  },
  {
    "text": "reason for that is the garbage collector has a lot of work to basically check all these pointers and it checks gen 0 more",
    "start": "3481160",
    "end": "3488120"
  },
  {
    "text": "often than jen too because dotnet is smart enough to know that's in gentoo if your object ends up in there it's longer",
    "start": "3488120",
    "end": "3495380"
  },
  {
    "text": "lift and it will not have to check that every couple of milliseconds or every couple of seconds it's usually good to",
    "start": "3495380",
    "end": "3501200"
  },
  {
    "text": "check it less often to see if those objects can be freed or not so that's what happens there so in a nice diagram",
    "start": "3501200",
    "end": "3509390"
  },
  {
    "text": "you basically allocate an object in jan 08 still being used it moves gen 1 if",
    "start": "3509390",
    "end": "3514760"
  },
  {
    "text": "not it should it gets freed in gen 1 garbage collection cycle may happen and",
    "start": "3514760",
    "end": "3520520"
  },
  {
    "text": "the object may move to Gentoo if it's still in use if not it gets freed and",
    "start": "3520520",
    "end": "3525550"
  },
  {
    "text": "perfectly fine if your object is in gen 2 and a garbage collection cycle happens",
    "start": "3525550",
    "end": "3530570"
  },
  {
    "text": "there in the object is still in use it will just stay in gentoo if not the garbage collector will free it up now",
    "start": "3530570",
    "end": "3538820"
  },
  {
    "text": "when does the garbage collected run there's some documentation but not all",
    "start": "3538820",
    "end": "3544070"
  },
  {
    "text": "the documentation is as clear as you would like it to be generally when does",
    "start": "3544070",
    "end": "3550070"
  },
  {
    "text": "the garbage collector run typically when you have an out of memory situation where you have memory pressure and your",
    "start": "3550070",
    "end": "3556640"
  },
  {
    "text": "net runtime needs additional memory to host application to allocate variables",
    "start": "3556640",
    "end": "3561900"
  },
  {
    "text": "that's typically when garbage collection would run after you do a lot of allocations the garbage collector will",
    "start": "3561900",
    "end": "3567750"
  },
  {
    "text": "typically run as well remember where we were reading all this JSON data and making sure that we could deserialize it",
    "start": "3567750",
    "end": "3574470"
  },
  {
    "text": "into a dictionary well that was a significant allocation because we were allocating millions of objects in memory",
    "start": "3574470",
    "end": "3581300"
  },
  {
    "text": "typically the garbage collector would run on such a situation you can attach a",
    "start": "3581300",
    "end": "3587400"
  },
  {
    "text": "profiler and tell the garbage collector to run you can have the garbage collector run",
    "start": "3587400",
    "end": "3593220"
  },
  {
    "text": "when the application moves to the background so there's a number of reasons why the garbage collector may run what I'm saying may run because the",
    "start": "3593220",
    "end": "3600330"
  },
  {
    "text": "garbage collector is not guaranteed to run so it may well be that you just",
    "start": "3600330",
    "end": "3605460"
  },
  {
    "text": "allocate memory and if there's memory enough or none of these conditions happens dotnet will simply not run the",
    "start": "3605460",
    "end": "3612060"
  },
  {
    "text": "garbage collector and not free up memory because it's not considered necessary why not well the garbage collector takes",
    "start": "3612060",
    "end": "3619080"
  },
  {
    "text": "some time it pauses your application it actually causes a small slow down whenever it runs so when it decides it",
    "start": "3619080",
    "end": "3625620"
  },
  {
    "text": "should not run it does not run just not have that boss in the application so with that knowledge let's dive into our",
    "start": "3625620",
    "end": "3632820"
  },
  {
    "text": "memory pressure we were where we were seeing one hundred percent memory usage on a small server and on a larger",
    "start": "3632820",
    "end": "3639980"
  },
  {
    "text": "so what we did was profile reproduce traffic on a development server and",
    "start": "3639980",
    "end": "3646320"
  },
  {
    "text": "attach a memory profiler to its and we took several snapshots during that process now I'm going to open this",
    "start": "3646320",
    "end": "3653130"
  },
  {
    "text": "specific snapshot snapshot number six reason for that is that it turns out",
    "start": "3653130",
    "end": "3658650"
  },
  {
    "text": "that the garbage collector ran here so we see that this snapshot has two million objects less than the",
    "start": "3658650",
    "end": "3665970"
  },
  {
    "text": "previous snapshot which means somewhere in between the garbage collector has run has done its thing and this snapshot",
    "start": "3665970",
    "end": "3673590"
  },
  {
    "text": "would contain the objects that were not being freed and that's what we were interested in because we saw memory",
    "start": "3673590",
    "end": "3679560"
  },
  {
    "text": "pressure which means something sticks in memory and it's not being freed up so we want to know what that is so let's dive",
    "start": "3679560",
    "end": "3686400"
  },
  {
    "text": "into that one and we can see a number of things like the largest size of objects",
    "start": "3686400",
    "end": "3692070"
  },
  {
    "text": "that is in memory we see a lot of strings in there see a lot of string duplicates and things like that but",
    "start": "3692070",
    "end": "3698680"
  },
  {
    "text": "nothing out of the ordinary and this profiler doesn't really give us a clear indication immediately on some common",
    "start": "3698680",
    "end": "3704680"
  },
  {
    "text": "things like if antenna lyrics and stuff like that what we can see though is that",
    "start": "3704680",
    "end": "3711300"
  },
  {
    "text": "if my zoo it works properly what we can see is that gentoo is",
    "start": "3711300",
    "end": "3718750"
  },
  {
    "text": "actually quite full there's a lot of objects in gentoo which means that we have a lot of objects that are not being",
    "start": "3718750",
    "end": "3724540"
  },
  {
    "text": "garbage collected so let's dive in there and look into what is happening in there",
    "start": "3724540",
    "end": "3730380"
  },
  {
    "text": "so gentoo awesome let's dive into that one and see which objects are in there",
    "start": "3730380",
    "end": "3736420"
  },
  {
    "text": "and what we can see is that there's this ninja dots activation not cashing that",
    "start": "3736420",
    "end": "3741730"
  },
  {
    "text": "cash which has its really annoying that so it doesn't really work properly stri",
    "start": "3741730",
    "end": "3748240"
  },
  {
    "text": "it like that what we can see is one of those objects small objects but it's the",
    "start": "3748240",
    "end": "3754000"
  },
  {
    "text": "object retaining the most memory in our dot net memory space this thing has some",
    "start": "3754000",
    "end": "3760089"
  },
  {
    "text": "other things but yeah we're using a dependency injection container so it's probably fine that we are doing this an",
    "start": "3760089",
    "end": "3765220"
  },
  {
    "text": "interest a more interesting thing is that our entity framework contexts is",
    "start": "3765220",
    "end": "3770410"
  },
  {
    "text": "around in memory for eight hundred and twenty seven times that's not too bad",
    "start": "3770410",
    "end": "3775420"
  },
  {
    "text": "because we have a lot of traffic on the server what is bad though is that we are looking at gen 2 so this means that our",
    "start": "3775420",
    "end": "3782800"
  },
  {
    "text": "entity framework contexts are long-lived and are not being collected by the garbage collector that also is not that",
    "start": "3782800",
    "end": "3789940"
  },
  {
    "text": "much of a problem but keep in mind if you are using entity framework that entity framework is tracking changes to",
    "start": "3789940",
    "end": "3796180"
  },
  {
    "text": "the objects that have been loaded so this basically means that all these entity framework contexts are dragging",
    "start": "3796180",
    "end": "3801640"
  },
  {
    "text": "along domain objects from our application because it still has a change tracking enabled for all those",
    "start": "3801640",
    "end": "3807160"
  },
  {
    "text": "things so this means that we're using quite a large number of",
    "start": "3807160",
    "end": "3812740"
  },
  {
    "text": "memory in gen 2 by just having objects that are probably no longer being used because we have a request response cycle",
    "start": "3812740",
    "end": "3819010"
  },
  {
    "text": "and you typically don't end up engine to during that so let's let's dive into the",
    "start": "3819010",
    "end": "3825010"
  },
  {
    "text": "entity framework context and what we want to see is which object is holding",
    "start": "3825010",
    "end": "3830140"
  },
  {
    "text": "on to this entity framework context so what we can do is",
    "start": "3830140",
    "end": "3835200"
  },
  {
    "text": "group by similar retention and we can actually get a nice diagram telling us",
    "start": "3835200",
    "end": "3840880"
  },
  {
    "text": "where the entity framework context is being held in memory and if we look at that diagram",
    "start": "3840880",
    "end": "3847830"
  },
  {
    "text": "you can't really zoom in properly let's try again using this one if we look at",
    "start": "3848040",
    "end": "3854050"
  },
  {
    "text": "the diagram we can see that it's being held in memory in a dictionary somewhere and that dictionary comes from a cache",
    "start": "3854050",
    "end": "3860920"
  },
  {
    "text": "and that cash if we dive into that one is our dependency injection container",
    "start": "3860920",
    "end": "3867000"
  },
  {
    "text": "awkwards our dependency injection container is keeping around entity",
    "start": "3867000",
    "end": "3872140"
  },
  {
    "text": "framework context for a long period of time and they don't get collected and memory simply fills up",
    "start": "3872140",
    "end": "3877830"
  },
  {
    "text": "interesting so at the time we were using ninja taz our di container and we",
    "start": "3877830",
    "end": "3885340"
  },
  {
    "text": "started looking into the source codes of ninja to see why see if we could",
    "start": "3885340",
    "end": "3891010"
  },
  {
    "text": "actually find an explanation why these entity framework context were being held in memory so we found out that there was",
    "start": "3891010",
    "end": "3897040"
  },
  {
    "text": "this garbage collection cash pruner object which is actually the object",
    "start": "3897040",
    "end": "3902320"
  },
  {
    "text": "responsible for freeing up the memory that's ninja is using and if you look at",
    "start": "3902320",
    "end": "3907840"
  },
  {
    "text": "the code of that thing it's actually quite clever or at least the implementation needed is quite clever",
    "start": "3907840",
    "end": "3914290"
  },
  {
    "text": "they have a weak reference in there and indicate the reference which is a simple object and they use this indicator",
    "start": "3914290",
    "end": "3920890"
  },
  {
    "text": "objects to see if the garbage collector random or didn't run how does that work well you have a weak reference and if",
    "start": "3920890",
    "end": "3927400"
  },
  {
    "text": "the garbage collector runs it will simply disappear from memory so you know if this object is gone the garbage",
    "start": "3927400",
    "end": "3933250"
  },
  {
    "text": "collector has run and then you can reallocate it and wait for it to be deallocated again and see the garbage",
    "start": "3933250",
    "end": "3939160"
  },
  {
    "text": "collector run now ninja is actually checking nets using a timer and every i",
    "start": "3939160",
    "end": "3944890"
  },
  {
    "text": "think it was 30 seconds it's actually checking if the garbage collector ran and if the garbage collector rent it",
    "start": "3944890",
    "end": "3951550"
  },
  {
    "text": "would prune its internal object cache and basically free up the memory that it was holding on to and free of the cached",
    "start": "3951550",
    "end": "3958750"
  },
  {
    "text": "objects that it's instantiated previously now remember when we looked at how the garbage collector works it's",
    "start": "3958750",
    "end": "3965589"
  },
  {
    "text": "not guaranteed to run which means the week objects or the weak reference we have in inject here would never be freed",
    "start": "3965589",
    "end": "3972820"
  },
  {
    "text": "and inject will simply keep the dictionary of cached entity framework context around forever until the garbage",
    "start": "3972820",
    "end": "3979150"
  },
  {
    "text": "collector runs damn so we basically found out that",
    "start": "3979150",
    "end": "3984460"
  },
  {
    "text": "ninja was holding on to all of our entity framework context and there was no really good solution we found a",
    "start": "3984460",
    "end": "3990910"
  },
  {
    "text": "couple of other people having the same issue so we decided to get rid of this one for our application and switch to a",
    "start": "3990910",
    "end": "3997960"
  },
  {
    "text": "different one we did that and we found that memory usage dropped to a",
    "start": "3997960",
    "end": "4003630"
  },
  {
    "text": "normal level and we actually fix the issue there so by changing the DI container not to blame the DI container",
    "start": "4003630",
    "end": "4011070"
  },
  {
    "text": "but just to blame the way it's its cycles and garbage collected memory we",
    "start": "4011070",
    "end": "4016530"
  },
  {
    "text": "found out that by simply changing that and changing the way it behaves we could actually drop the memory pressure again",
    "start": "4016530",
    "end": "4022080"
  },
  {
    "text": "and we are now still stable at around four gigabytes of memory on our web servers so yeah nice and this time we",
    "start": "4022080",
    "end": "4031140"
  },
  {
    "text": "close the case and this time we we're actually good for a year and two",
    "start": "4031140",
    "end": "4036240"
  },
  {
    "text": "months now so awesome so in conclusion",
    "start": "4036240",
    "end": "4041480"
  },
  {
    "text": "there's a couple of things you have to do you have to know your system when you have a system running you have to know",
    "start": "4041480",
    "end": "4048089"
  },
  {
    "text": "your runtime you have to know all of the different components that you are using and I really like the reference that's I",
    "start": "4048089",
    "end": "4054839"
  },
  {
    "text": "scalability thumb gave us where they told like profiling and debugging an",
    "start": "4054839",
    "end": "4060570"
  },
  {
    "text": "application is typically similar to the work that an FBI profiler would do on an actual crime scene you have to sort of",
    "start": "4060570",
    "end": "4068250"
  },
  {
    "text": "gain insight into whatever is happening in your service get to know it get to know the life of your service to find",
    "start": "4068250",
    "end": "4074700"
  },
  {
    "text": "out what may have happens in a specific case and I used to not really like",
    "start": "4074700",
    "end": "4081930"
  },
  {
    "text": "debugging and finding out what was happening with a service but by doing this I",
    "start": "4081930",
    "end": "4087350"
  },
  {
    "text": "I found out that I learned a lot of things about the dotnet runtime about our own application and things like that",
    "start": "4087350",
    "end": "4092900"
  },
  {
    "text": "and it's actually a good thing to do so if you have a service running and you are like me not really liking debugging",
    "start": "4092900",
    "end": "4100160"
  },
  {
    "text": "it and doing things like that dude I've in because you will build experience and you will gain insights into finding the",
    "start": "4100160",
    "end": "4107000"
  },
  {
    "text": "source of of an issue the next time much much much faster with debts thank you",
    "start": "4107000",
    "end": "4113870"
  },
  {
    "text": "for being here and thanks for joining me in this sacrilege [Applause]",
    "start": "4113870",
    "end": "4123350"
  }
]