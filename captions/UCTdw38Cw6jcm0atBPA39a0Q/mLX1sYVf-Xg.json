[
  {
    "text": "good morning everyone well done on making it to the 9:00 a.m.",
    "start": "10670",
    "end": "15809"
  },
  {
    "text": "session I'm still them on Perth time so for me it's 7 a.m. so the main reason",
    "start": "15809",
    "end": "24020"
  },
  {
    "text": "I'm at this session is because I'm giving it I said I set three alarms this",
    "start": "24020",
    "end": "31710"
  },
  {
    "text": "morning you know just just to be sure so I set my iPhone and I set my wife's",
    "start": "31710",
    "end": "38700"
  },
  {
    "text": "my phone alarm and then just to be really sure I had a third alarm so for",
    "start": "38700",
    "end": "44820"
  },
  {
    "text": "that I run a limp a link pad script hang",
    "start": "44820",
    "end": "52080"
  },
  {
    "text": "on it's not working here it is there is",
    "start": "52080",
    "end": "57210"
  },
  {
    "text": "I ran this link pad script to wake me up in the morning just in case the iPhone alarm didn't work I have once had an",
    "start": "57210",
    "end": "64470"
  },
  {
    "text": "iPhone alarm fail on me I missed a flight and what had happened is of setting the minutes on it you know with",
    "start": "64470",
    "end": "70740"
  },
  {
    "text": "your thumb you flick it down and I fat-fingered the am/pm so I flipped it to p.m. and it didn't wake me up so this",
    "start": "70740",
    "end": "77670"
  },
  {
    "text": "is my backup and I thought this was pretty pretty foolproof because I tested it and it worked when I tested it but",
    "start": "77670",
    "end": "84120"
  },
  {
    "text": "this didn't work this morning there's nothing happened and it's not what you think the laptop didn't go to sleep",
    "start": "84120",
    "end": "92280"
  },
  {
    "text": "because I disabled that right that would have been a rookie error but what had",
    "start": "92280",
    "end": "97320"
  },
  {
    "text": "happened was when I looked at the laptop this morning the the media player had",
    "start": "97320",
    "end": "102510"
  },
  {
    "text": "opened but instead of playing that song it had popped up a dialog asking if I",
    "start": "102510",
    "end": "107940"
  },
  {
    "text": "wanted to try a groove music I'm past unlimited for one month before",
    "start": "107940",
    "end": "114170"
  },
  {
    "text": "proceeding so yesterday so I gave us I gave it a",
    "start": "114170",
    "end": "123119"
  },
  {
    "text": "soft talk and some people asked me if I would make up for it by giving an extra",
    "start": "123119",
    "end": "128879"
  },
  {
    "text": "hard talk today and the answer is yes so",
    "start": "128879",
    "end": "134489"
  },
  {
    "text": "I'm going to talk about a problem I had a couple of years ago writing a new",
    "start": "134489",
    "end": "140370"
  },
  {
    "text": "feature for link pad and how I solved it and start with I made some soft slides",
    "start": "140370",
    "end": "147390"
  },
  {
    "text": "which we won't spend too long with but I had made some slides on and you know why",
    "start": "147390",
    "end": "153450"
  },
  {
    "text": "I think she shops liquid language and the slide on the reach we've got now for",
    "start": "153450",
    "end": "160740"
  },
  {
    "text": "for c-sharp on the cross platform and so on but this is probably the thing I want",
    "start": "160740",
    "end": "168270"
  },
  {
    "text": "to spend a bit more time on which is what which is what makes c-sharp quite unusual in that most languages say that",
    "start": "168270",
    "end": "175230"
  },
  {
    "text": "they tend to be either kind of low level or high level or medium level but the C shops it's got quite a broad reach so",
    "start": "175230",
    "end": "182190"
  },
  {
    "text": "you most people when I start programming that they'll use loops variables methods",
    "start": "182190",
    "end": "187350"
  },
  {
    "text": "most kind of basic possible constructs and then the other thing which is pretty",
    "start": "187350",
    "end": "193170"
  },
  {
    "text": "much the bread and butter of c-sharp and also of java is classes object",
    "start": "193170",
    "end": "198420"
  },
  {
    "text": "orientation so this is the level that most people were really comfortable at and they work at but C sharps also over",
    "start": "198420",
    "end": "206100"
  },
  {
    "text": "the years it's shifted somewhat towards the right because we have all these other things - which are very expressive",
    "start": "206100",
    "end": "211380"
  },
  {
    "text": "features so they let you achieve a lot with a little bit of code right it takes a while to learn really get comfortable",
    "start": "211380",
    "end": "217950"
  },
  {
    "text": "with using these features but they do an awful lot with a small amount of code now most people I would say that they",
    "start": "217950",
    "end": "224519"
  },
  {
    "text": "use some of that there's somewhat comfortable with that people though have that come from a functional programming",
    "start": "224519",
    "end": "231150"
  },
  {
    "text": "background if they go to C shap they'll straightaway start with all that stuff on the right they'll reluctantly use a little bit of",
    "start": "231150",
    "end": "237930"
  },
  {
    "text": "the stuff in the middle classes object orientation and they will really try and avoid loops mutable variables now this",
    "start": "237930",
    "end": "246030"
  },
  {
    "text": "is not the end of the story there because sous-chefs also got something wrong there on that on the edge there which is ability to do direct memory",
    "start": "246030",
    "end": "253350"
  },
  {
    "text": "manipulation with pointers and that that kind of raises a question like why did",
    "start": "253350",
    "end": "260220"
  },
  {
    "text": "they have that in there do we still need it is that is that important and if you're going to use that are you also",
    "start": "260220",
    "end": "265229"
  },
  {
    "text": "going to use that stuff on the right hand side and this this comes back to to",
    "start": "265229",
    "end": "270390"
  },
  {
    "text": "this session which is that you know I had a problem and I ended up needing this whole range point us and",
    "start": "270390",
    "end": "277610"
  },
  {
    "text": "direct memory manipulation you don't often need it but when you do it's",
    "start": "277610",
    "end": "282860"
  },
  {
    "text": "really really useful to have and the great thing about having it in c-sharp is you don't have to go to another",
    "start": "282860",
    "end": "288650"
  },
  {
    "text": "language to do that because how many of you are confident using C++ nowadays you",
    "start": "288650",
    "end": "295250"
  },
  {
    "text": "could bring up you know not many honey a few people right and the problem is that you it's you know you've if you're",
    "start": "295250",
    "end": "301790"
  },
  {
    "text": "working in another foreign language you're very unproductive and then you don't have all the good stuff on the",
    "start": "301790",
    "end": "307340"
  },
  {
    "text": "right so having that in c-sharp is great so we're going to start with this this",
    "start": "307340",
    "end": "313910"
  },
  {
    "text": "problem I had and this is a link pad writing link pad so if you're not familiar with it I'll close that down",
    "start": "313910",
    "end": "320630"
  },
  {
    "text": "we'll start with something like him one plus one probably all use link pad so",
    "start": "320630",
    "end": "326540"
  },
  {
    "text": "it's it it's like code scratch pad bring up another query and we can put a loop in there we'll write 100 dump that out",
    "start": "326540",
    "end": "335410"
  },
  {
    "text": "now the way that link pad used to work is everything ran in one process and so",
    "start": "335410",
    "end": "343460"
  },
  {
    "text": "the way it would keep you queries isolated is it would put them into separate application domains and that",
    "start": "343460",
    "end": "349400"
  },
  {
    "text": "actually works surprisingly well because the separation you get through app domain boundaries is quite good but a",
    "start": "349400",
    "end": "356540"
  },
  {
    "text": "couple of years ago I wrote a feature which required that I isolate every",
    "start": "356540",
    "end": "361790"
  },
  {
    "text": "query into a separate process and that feature was the integrated debugger so",
    "start": "361790",
    "end": "367250"
  },
  {
    "text": "now you can you can single step through your code and watch your variables change but that means that it has to be",
    "start": "367250",
    "end": "373130"
  },
  {
    "text": "running your code has to be running in its own process and you have a look at that and see go to task manager will see",
    "start": "373130",
    "end": "383090"
  },
  {
    "text": "it running in there",
    "start": "383090",
    "end": "385870"
  },
  {
    "text": "maybe we go to details now to say you do it here we are so there yeah you've got",
    "start": "388639",
    "end": "395069"
  },
  {
    "text": "link pad host process and then you've got a user query for each of the queries that are running in there right and the",
    "start": "395069",
    "end": "401069"
  },
  {
    "text": "reason there's three and not two is that link pad creates it speculatively",
    "start": "401069",
    "end": "406590"
  },
  {
    "text": "creates another container all warmed up and ready to go so if I create a new query that it avoids the startup cost so",
    "start": "406590",
    "end": "414930"
  },
  {
    "text": "that this created a problem because when I move from app domain isolation to process isolation I need a way that the",
    "start": "414930",
    "end": "423690"
  },
  {
    "text": "domain queries the process of your that your codes running can talk to the link",
    "start": "423690",
    "end": "430319"
  },
  {
    "text": "pad host process and vice-versa there is some lot of elaborate communication that",
    "start": "430319",
    "end": "435389"
  },
  {
    "text": "goes on to make link pad work because it's quite a rich environment so before I was using technology called dotnet",
    "start": "435389",
    "end": "442830"
  },
  {
    "text": "remoting and and that works has been around since the beginning of c-sharp it works incredibly well when you're",
    "start": "442830",
    "end": "448919"
  },
  {
    "text": "talking between application domains in the same process incredibly fast rich robust reliable no problems at all but",
    "start": "448919",
    "end": "455909"
  },
  {
    "text": "once you start using it to try and talk between processes it doesn't work so well because you now you need to create",
    "start": "455909",
    "end": "462180"
  },
  {
    "text": "a communications channel and until you can use an inter process channel or a",
    "start": "462180",
    "end": "467340"
  },
  {
    "text": "TCP Channel and it's a process Channel uses dotnet pipes TCP uses tcp/ip if you",
    "start": "467340",
    "end": "475650"
  },
  {
    "text": "want you can even use this to talk to processes on a different machine on the other side of the world in fact this is",
    "start": "475650",
    "end": "481289"
  },
  {
    "text": "what people did before we had WCF you would either use remoting or web services as a as a way to talk between",
    "start": "481289",
    "end": "488099"
  },
  {
    "text": "processes but what I found was that when I switched to doing that the performance went down and it would periodically",
    "start": "488099",
    "end": "496639"
  },
  {
    "text": "disconnect and I could not get to the bottom of why that there seemed to be some bug in the RPC channel so I thought",
    "start": "496639",
    "end": "503699"
  },
  {
    "text": "well maybe what I need to do is write my own remoting from scratch how about that",
    "start": "503699",
    "end": "509639"
  },
  {
    "text": "now how hard can that possibly be now when it comes to writing your own libraries it's a bit sometimes it's a",
    "start": "509639",
    "end": "516448"
  },
  {
    "text": "bit easier than it sounds because you only need to write the features that you need I didn't there's a lot of stuff in",
    "start": "516449",
    "end": "522140"
  },
  {
    "text": "remoting I didn't need so I thought about what I did need to be able to call a method in a class in another process",
    "start": "522140",
    "end": "529610"
  },
  {
    "text": "right and I don't there's a lot of other stuff I don't need so I started doing that and then I thought well what am I",
    "start": "529610",
    "end": "535310"
  },
  {
    "text": "going to build on top of what's the basic weighted from one process to talk to another and that in Windows you've",
    "start": "535310",
    "end": "541790"
  },
  {
    "text": "got something called pipes which is a low-level way of doing that and so I started using pipes and what I found",
    "start": "541790",
    "end": "547760"
  },
  {
    "text": "pipes if you use it in a simple way it works really well it's fast reliable but I was needing to use it in a fairly",
    "start": "547760",
    "end": "554510"
  },
  {
    "text": "complicated asynchronous way and I could not get it to work at all the way I wanted so I realized what if I write my",
    "start": "554510",
    "end": "562700"
  },
  {
    "text": "own pipes from scratch how hard can that be so I thought let's do it let's so",
    "start": "562700",
    "end": "567980"
  },
  {
    "text": "let's start by writing our own pipes and then on top of that we're going to write her and remoting and it won't be that",
    "start": "567980",
    "end": "573530"
  },
  {
    "text": "many that much code either we're going to do it in a simplest way so to do to write the pipes we need something even",
    "start": "573530",
    "end": "579500"
  },
  {
    "text": "lower level and how to work with and the thing we're going to use you can't get lower than this is shared memory and",
    "start": "579500",
    "end": "585830"
  },
  {
    "text": "we're going to allocate shared memory between two processes where you can both read and write that same memory that's",
    "start": "585830",
    "end": "591290"
  },
  {
    "text": "how we're going to do it so what I'll do first is we'll go back to PowerPoint and I'll show you how how",
    "start": "591290",
    "end": "599150"
  },
  {
    "text": "we're going to do this so that's the basic architecture so we're going to design our own remoting channel and",
    "start": "599150",
    "end": "604910"
  },
  {
    "text": "proxy on top underneath we're going to make our own pipe using shared memory so",
    "start": "604910",
    "end": "610220"
  },
  {
    "text": "they'll be an abstract pipe class or than input pipe and output pipe so",
    "start": "610220",
    "end": "615500"
  },
  {
    "text": "here's the requirements now got four pipes we need to descend byte arrays to another process that's it",
    "start": "615500",
    "end": "621320"
  },
  {
    "text": "send byte or another process has to be I want it to be extremely low latency",
    "start": "621320",
    "end": "627320"
  },
  {
    "text": "right for performance I but I don't need high throughput so I need lots of messages per second I don't need a lot",
    "start": "627320",
    "end": "634280"
  },
  {
    "text": "of megabytes per second it has to be completely asynchronous because if it",
    "start": "634280",
    "end": "639440"
  },
  {
    "text": "crashes for some reason like your process crashes I don't want the link pad UI to crash and the fourth direction",
    "start": "639440",
    "end": "647840"
  },
  {
    "text": "the fourth requirement it needs to be bi-directional but then I thought well that's a really silly requirement",
    "start": "647840",
    "end": "653270"
  },
  {
    "text": "because that would make it way more complicated and we can easily create a bi-directional pipe by",
    "start": "653270",
    "end": "658590"
  },
  {
    "text": "creating two pipes on each way which is what we're going to do so let's design it so here's a block of shared memory so",
    "start": "658590",
    "end": "666990"
  },
  {
    "text": "we've got a I've nominated the first five bytes as a header four bytes",
    "start": "666990",
    "end": "672330"
  },
  {
    "text": "represent an integer 32-bit integer and this is fifth one represents a boolean",
    "start": "672330",
    "end": "677340"
  },
  {
    "text": "value so the first thing we're going to do we're going to send a message now into this into this buffer and a writer",
    "start": "677340",
    "end": "683430"
  },
  {
    "text": "message to the buffer so the message we want to writes three bytes long so I'm gonna first length prefix three bytes",
    "start": "683430",
    "end": "690000"
  },
  {
    "text": "I'm doing this big endian but just to make it a little clearer so you know",
    "start": "690000",
    "end": "695280"
  },
  {
    "text": "this the least significant byte comes last so we write the the length prefix and",
    "start": "695280",
    "end": "700740"
  },
  {
    "text": "the message is two bytes one two three we write that next thing we do is",
    "start": "700740",
    "end": "706500"
  },
  {
    "text": "increment that that number at the top so that now that that shows we've written a message and then we flash the",
    "start": "706500",
    "end": "713430"
  },
  {
    "text": "inter-process signal so this the other now the other process is reading this it's waiting on that signal so it gets",
    "start": "713430",
    "end": "719820"
  },
  {
    "text": "that signal it's gonna then read the header it's gonna go back it's going to read that header it's going to see that",
    "start": "719820",
    "end": "725970"
  },
  {
    "text": "there's a 1 there which is greater than what it's all before which was a 0 so now it's going to read the length prefix",
    "start": "725970",
    "end": "732510"
  },
  {
    "text": "3 and we'll read the 3 bytes and we'll basically sent the message 1 2 3 to the other process right the next thing you",
    "start": "732510",
    "end": "739470"
  },
  {
    "text": "to do is sort of go back and read this again say is this now - no we're still 1",
    "start": "739470",
    "end": "745560"
  },
  {
    "text": "it'll would go back again it'll spin a thousand times waiting for that to go up in case there's a series of messages",
    "start": "745560",
    "end": "752130"
  },
  {
    "text": "right now if there's nothing else after a thousand spins it will wait again on the interprocess signal right then we",
    "start": "752130",
    "end": "759450"
  },
  {
    "text": "want to write another message we want to write a second one so what it does is will now write a five point messages",
    "start": "759450",
    "end": "765450"
  },
  {
    "text": "time so write the length of prefix will write the 5 bytes will increment the header now so that one now will become 2",
    "start": "765450",
    "end": "773420"
  },
  {
    "text": "and will flash the inter-process signal we'll set it so now what we'll keep",
    "start": "773420",
    "end": "779460"
  },
  {
    "text": "doing this the other process will read it and eventually we're going to run out of space in that buffer right so at this",
    "start": "779460",
    "end": "786510"
  },
  {
    "text": "point what do we do now you'll notice that what we're doing there are no locks here we're not using",
    "start": "786510",
    "end": "793680"
  },
  {
    "text": "any locks now normally if you've got two processors or two threads sharing memory",
    "start": "793680",
    "end": "799830"
  },
  {
    "text": "you would always use locks to synchronize that but remember we want to make this super low latency so I'm",
    "start": "799830",
    "end": "805950"
  },
  {
    "text": "designing this completely lock free right now that means we have to be really careful",
    "start": "805950",
    "end": "812040"
  },
  {
    "text": "because if when you're doing lock free stuff you want to keep it really really simple because it's so easy to trip up",
    "start": "812040",
    "end": "818850"
  },
  {
    "text": "so one thing we cannot do is reuse that buffer not easily because we need some",
    "start": "818850",
    "end": "824010"
  },
  {
    "text": "coordination then with the other process so what we're going to do is very simple when we run out of space for the next",
    "start": "824010",
    "end": "830220"
  },
  {
    "text": "message we're going to set up a protocol where we're going to simply create a new buffer right so we'll abandon the old",
    "start": "830220",
    "end": "837930"
  },
  {
    "text": "buffer create a new one so that buffer had a suffix of dot 0 the next one will be dot 1 the next one be bot dot 2 so we",
    "start": "837930",
    "end": "845280"
  },
  {
    "text": "always know how to find the next buffer so all we do if the message won't fit is we write 0 4 zeros in there that",
    "start": "845280",
    "end": "852270"
  },
  {
    "text": "indicates now we'll finish with that buffer were gone to the next one so one",
    "start": "852270",
    "end": "858480"
  },
  {
    "text": "more problem that we've got we've got to deal with is that eventually we're going to use up all the memory because we need",
    "start": "858480",
    "end": "864270"
  },
  {
    "text": "some way of releasing these buffers so that the process that's reading this the input pipe that's reading this and see",
    "start": "864270",
    "end": "870990"
  },
  {
    "text": "that yellow that yellow square in the header when it's finished reading it it will set that to one and that means now",
    "start": "870990",
    "end": "878520"
  },
  {
    "text": "that periodically the other process of writing to it keeps track of all these old ones and when it sees that that's",
    "start": "878520",
    "end": "884970"
  },
  {
    "text": "changed to one it knows that the other process is finished with it so it can release the the buffer when both",
    "start": "884970",
    "end": "890970"
  },
  {
    "text": "processes release the buffer then windows will release the shared memory sounds simple",
    "start": "890970",
    "end": "897470"
  },
  {
    "text": "so the next thing we'll do is is we'll write that so the first what I'll do is I'll show",
    "start": "897470",
    "end": "903240"
  },
  {
    "text": "you how shared memory works first how you access it because dot necks actually got a wrapper for this an API so what",
    "start": "903240",
    "end": "910410"
  },
  {
    "text": "you do is you use this static method creating you to create a shared memory",
    "start": "910410",
    "end": "916380"
  },
  {
    "text": "buffer thousand bytes give it a name and if two processes correct one with the same name",
    "start": "916380",
    "end": "921570"
  },
  {
    "text": "they can talk to each other so this creates a called a view excess so which lets us read and write to it so what",
    "start": "921570",
    "end": "927690"
  },
  {
    "text": "that does it writes that the 500 index writes the byte 1 2 3 so let's run that",
    "start": "927690",
    "end": "933300"
  },
  {
    "text": "now and then another process what we'll do is we'll do the same thing we'll",
    "start": "933300",
    "end": "940020"
  },
  {
    "text": "create one with the same name and now we'll read will put reading 32 at the 500th offset so we should get one two",
    "start": "940020",
    "end": "946890"
  },
  {
    "text": "three at this works which it does right now the only problem was doing it like that is it's it's really slow to do it",
    "start": "946890",
    "end": "953370"
  },
  {
    "text": "fast we need to use pointers is where the pointers come in so this is how I would go back to the first one let's",
    "start": "953370",
    "end": "959520"
  },
  {
    "text": "stop that this is how I would do that this at pointers instead of using these",
    "start": "959520",
    "end": "964680"
  },
  {
    "text": "this right method which is slow what we can do is get a pointer and we are you",
    "start": "964680",
    "end": "973110"
  },
  {
    "text": "call accessor dot safe memory map view handle dangerous get handle to pointer",
    "start": "973110",
    "end": "978420"
  },
  {
    "text": "that incantation gives you a void star a pointer to the unknown so we can cast",
    "start": "978420",
    "end": "985410"
  },
  {
    "text": "that to a pointer to anything we like so I'm first casting it to a byte pointer and then we can do pointer arithmetic by",
    "start": "985410",
    "end": "993120"
  },
  {
    "text": "adding 500 we're moving jumping 500 bytes ahead then I can cast it to an int",
    "start": "993120",
    "end": "998400"
  },
  {
    "text": "pointer so now I can write an integer the one two three so that'll write four",
    "start": "998400",
    "end": "1003590"
  },
  {
    "text": "bytes one two three zero zero zero we will be a little endian and so we'll run",
    "start": "1003590",
    "end": "1011030"
  },
  {
    "text": "that and I'll go back to the the one that reads it this one does still does it the slow way and that still works so",
    "start": "1011030",
    "end": "1020690"
  },
  {
    "text": "that's that's the basics on on using shared memory so let's go ahead and write the pipe now so here's the pipe",
    "start": "1020690",
    "end": "1028100"
  },
  {
    "text": "now the first thing we need to do we I've written a class called safe disposable because one thing you need to",
    "start": "1028100",
    "end": "1033740"
  },
  {
    "text": "be really careful of with pointers is not getting dandling pointers dangling",
    "start": "1033740",
    "end": "1039230"
  },
  {
    "text": "pointer is when you release the underlying memory resource by disposing your object and you still got a copy of",
    "start": "1039230",
    "end": "1047540"
  },
  {
    "text": "that pointer around if you write to that pointer you'll crash the process the problem is it can be very very hard to",
    "start": "1047540",
    "end": "1053690"
  },
  {
    "text": "like knows that kind of bug because sometimes the it doesn't show up till later so we're going to that there's a",
    "start": "1053690",
    "end": "1061129"
  },
  {
    "text": "lot of different ways of doing this with various degrees of robustness but I've chosen a nice compromise which is this",
    "start": "1061129",
    "end": "1067070"
  },
  {
    "text": "safe disposable class it's a fairly simple way of making it much more",
    "start": "1067070",
    "end": "1072500"
  },
  {
    "text": "reliable not 100% but more reliable so we have a public object dispose lock so",
    "start": "1072500",
    "end": "1078350"
  },
  {
    "text": "we're always going to look around this object whenever we access the pointer",
    "start": "1078350",
    "end": "1083960"
  },
  {
    "text": "and I've got a dispose method gain which locks around that and cause their",
    "start": "1083960",
    "end": "1090500"
  },
  {
    "text": "dispose call which is the one will override and I've got a search safe method which locks it and says if I'm",
    "start": "1090500",
    "end": "1096679"
  },
  {
    "text": "disposed throw an object disposed exception so the pattern to use it is you'll obtain that disposed lock and",
    "start": "1096679",
    "end": "1103639"
  },
  {
    "text": "you'll call a search safe and at that point you will know that that buffer that that pointer is safe to use so it's",
    "start": "1103639",
    "end": "1111289"
  },
  {
    "text": "the first thing we do now next thing is I've created a wrapper for the memory",
    "start": "1111289",
    "end": "1117049"
  },
  {
    "text": "mapped file which is that shared memory it's called a memory mapped file without a file right so it has a there are",
    "start": "1117049",
    "end": "1123350"
  },
  {
    "text": "fields for the file for the accessor and the pointer which I'm also buffering now",
    "start": "1123350",
    "end": "1128840"
  },
  {
    "text": "this is the constructor so we're setting all this up there dispose call we clear",
    "start": "1128840",
    "end": "1135500"
  },
  {
    "text": "all those things to dispose them fairly straightforward so this is the abstract now base class for the pipe so what I'm",
    "start": "1135500",
    "end": "1144710"
  },
  {
    "text": "doing is creating a that's the minimum",
    "start": "1144710",
    "end": "1150110"
  },
  {
    "text": "buffer size so what we'll do is is you can make this that the size of the buffer dynamics so it can look at the",
    "start": "1150110",
    "end": "1156799"
  },
  {
    "text": "history of how big the buffers were in the past and automatically size it which",
    "start": "1156799",
    "end": "1162500"
  },
  {
    "text": "is what I've done in link path this one's a little bit simpler so it just comes up with a fairly simple heuristic from working out the length of the",
    "start": "1162500",
    "end": "1168769"
  },
  {
    "text": "buffer that's the the inter-process signal and this is where we create it we",
    "start": "1168769",
    "end": "1175279"
  },
  {
    "text": "create the buffer so one of the parties throughout both of them open the buffer one creates it and then the other",
    "start": "1175279",
    "end": "1180950"
  },
  {
    "text": "connects to the existing buffer that's the proof that the the suffix of dot 0",
    "start": "1180950",
    "end": "1186870"
  },
  {
    "text": "for the first buffer the second one's a dot 1 then it's a dot 2 and so on and that the event we correct the event wait",
    "start": "1186870",
    "end": "1194040"
  },
  {
    "text": "handle as a signal and that's pretty much it for the for the common base class so we look at the output pipe now",
    "start": "1194040",
    "end": "1201020"
  },
  {
    "text": "that's we keep a list of all of the old buffers right these are the ones that haven't yet been read and this is how we",
    "start": "1201020",
    "end": "1209670"
  },
  {
    "text": "write a byte array out we lock that dispose lock assert safe protect against",
    "start": "1209670",
    "end": "1215730"
  },
  {
    "text": "the dangling pointers and then we see if there's enough space to write that message if there's not we do a",
    "start": "1215730",
    "end": "1221340"
  },
  {
    "text": "continuation with quite the new buffer otherwise write the message and signal the cross process signal so this is how",
    "start": "1221340",
    "end": "1230280"
  },
  {
    "text": "we write the message now since we're we given to the pointers right so till we do the point arithmetic to take up the",
    "start": "1230280",
    "end": "1236910"
  },
  {
    "text": "running off set add that to the pointer we cast it to an int star and then we",
    "start": "1236910",
    "end": "1242700"
  },
  {
    "text": "write in the message length the brenth prefix and this is how you do a",
    "start": "1242700",
    "end": "1249660"
  },
  {
    "text": "low-level blit right in in the CLR this does a low-level memory blip very very fast much faster than doing it using the",
    "start": "1249660",
    "end": "1256920"
  },
  {
    "text": "view accessor using this is just that you've with pointers and then we write the latest message number to the start",
    "start": "1256920",
    "end": "1263130"
  },
  {
    "text": "of the buffer that's to that blue bit at the top so then at this bit here",
    "start": "1263130",
    "end": "1269490"
  },
  {
    "text": "it seems we don't have enough space to do it so allocates a new buffer in there it writes zero message to the old one to",
    "start": "1269490",
    "end": "1278340"
  },
  {
    "text": "indicate its it's not there anymore and it also adds the old buffer to a net",
    "start": "1278340",
    "end": "1285150"
  },
  {
    "text": "to that list so that we can monitor it to make sure it's we don't delete it before it's been read and that cleans up",
    "start": "1285150",
    "end": "1292650"
  },
  {
    "text": "the old buffers that one looks so that looks reads that that boolean flag and says if that's set to one then we're",
    "start": "1292650",
    "end": "1299100"
  },
  {
    "text": "going to remove and dispose that old buffer so let's look at the input piping",
    "start": "1299100",
    "end": "1305100"
  },
  {
    "text": "at the other end so this is asynchronous so it runs it on another thread and what",
    "start": "1305100",
    "end": "1311850"
  },
  {
    "text": "we're doing is the constructor takes an action of byte array",
    "start": "1311850",
    "end": "1318090"
  },
  {
    "text": "so is this is this tells it what to do whenever it receives a message it's kind",
    "start": "1318090",
    "end": "1323130"
  },
  {
    "text": "of like an event but a lot less verbose than an event right you could also do this with an eye observable so here's",
    "start": "1323130",
    "end": "1332100"
  },
  {
    "text": "the loop it does spin cycles to zero does a while true gets the latest",
    "start": "1332100",
    "end": "1337860"
  },
  {
    "text": "message ID guess this reads the message ID again locks locks to dispose lock and",
    "start": "1337860",
    "end": "1346050"
  },
  {
    "text": "if everything's good it returns it takes the that the pointer to the buffer and",
    "start": "1346050",
    "end": "1352650"
  },
  {
    "text": "then casts it to an int star and dereferences it so that reads the reads",
    "start": "1352650",
    "end": "1358800"
  },
  {
    "text": "that blue that blue header that number there reset number and then we look is this greater than the last message ID so",
    "start": "1358800",
    "end": "1366480"
  },
  {
    "text": "if it's greater than the last one received then we then read that message",
    "start": "1366480",
    "end": "1371690"
  },
  {
    "text": "okay I'll tell you what this does in a moment so then if we've got a non zero",
    "start": "1371690",
    "end": "1378600"
  },
  {
    "text": "length message it will then call that function on messages like the event so fire that event whenever we get that",
    "start": "1378600",
    "end": "1385470"
  },
  {
    "text": "message and then it sets the spin cycles to spin a thousand times so we're going to and the reason we do this is that the",
    "start": "1385470",
    "end": "1392370"
  },
  {
    "text": "ODE that there's an overhead on waiting on an inter process wait handle right into process signals a way way way",
    "start": "1392370",
    "end": "1399300"
  },
  {
    "text": "slower than ones you use inside your application so for instance a lock as well a lock",
    "start": "1399300",
    "end": "1404430"
  },
  {
    "text": "and a lock that you use in c-sharp is very quick whereas an inter process lock",
    "start": "1404430",
    "end": "1409650"
  },
  {
    "text": "a mutex very slow so signals not quite as bad but we still want to avoid using",
    "start": "1409650",
    "end": "1415110"
  },
  {
    "text": "it if we can sir so while we spin a thousand times so if the spin cycles gets down to zero well then only then do",
    "start": "1415110",
    "end": "1421800"
  },
  {
    "text": "we wait on that sig inter-process signal otherwise we increment we decrement the",
    "start": "1421800",
    "end": "1426990"
  },
  {
    "text": "spin cycles so that's pretty much the the interesting part of the pipe so the",
    "start": "1426990",
    "end": "1433980"
  },
  {
    "text": "only other thing I need to point out is that because we're doing a lot free implementation we've got to be really",
    "start": "1433980",
    "end": "1440640"
  },
  {
    "text": "careful because the way that most computers work nowadays the processes is",
    "start": "1440640",
    "end": "1445890"
  },
  {
    "text": "they do lots of really cool optimizations to make things run faster take advantage of the fact you",
    "start": "1445890",
    "end": "1451900"
  },
  {
    "text": "multiple calls and one of the things that can do is it can literally reorder reads right so that means that we could",
    "start": "1451900",
    "end": "1460960"
  },
  {
    "text": "run into trouble we could end up reading stale data so there's two places that we",
    "start": "1460960",
    "end": "1466870"
  },
  {
    "text": "need to put a memory barrier in here it's basically it's that it's that optimization where we're reading the",
    "start": "1466870",
    "end": "1476490"
  },
  {
    "text": "so it's in here where we're we're finished reading the go back a bit we're",
    "start": "1485250",
    "end": "1492000"
  },
  {
    "text": "finished reading a message and now we go straight back and check that header again to see if there's another message",
    "start": "1492000",
    "end": "1497970"
  },
  {
    "text": "we spin right at that point there we need a memory barrier to ensure that that reads can't be reordered around",
    "start": "1497970",
    "end": "1504630"
  },
  {
    "text": "that point so we don't read the header the root of the header and the read to the data block aren't switched around so",
    "start": "1504630",
    "end": "1511650"
  },
  {
    "text": "that's why we've got we've got the we've got two memory barriers one in here and one in here so that makes our lock free",
    "start": "1511650",
    "end": "1518880"
  },
  {
    "text": "implementation now safe so let's test it now and see how it works so first thing",
    "start": "1518880",
    "end": "1524909"
  },
  {
    "text": "I'll do is run a demo in this demo we'll create a new pipe called test and a number after it create an input and an",
    "start": "1524909",
    "end": "1532049"
  },
  {
    "text": "output pipe with the same name and I'm telling the input pipe whatever you receive a message I want you to dump the",
    "start": "1532049",
    "end": "1538320"
  },
  {
    "text": "message out that dose and then I'm going to write two messages the numbers 1 2 3",
    "start": "1538320",
    "end": "1544740"
  },
  {
    "text": "and then the numbers 1 2 5 so run that now and there it is they come through",
    "start": "1544740",
    "end": "1551280"
  },
  {
    "text": "there that numbers 1 2 3 the numbers 1 2 3 4 5 so that's that's fine that's it",
    "start": "1551280",
    "end": "1557700"
  },
  {
    "text": "that works in a simple case let's run a more rigorous stress test the stress test now this context sends a constant",
    "start": "1557700",
    "end": "1565200"
  },
  {
    "text": "stream of messages between twenty and a hundred bytes long which is how link pad",
    "start": "1565200",
    "end": "1571080"
  },
  {
    "text": "will be using it so we're going to now um go to that current stress test and",
    "start": "1571080",
    "end": "1576890"
  },
  {
    "text": "this now it does a comparison to make sure that the messages are identical on",
    "start": "1576890",
    "end": "1583380"
  },
  {
    "text": "both ends so we're getting now hundred and forty thousand messages per second",
    "start": "1583380",
    "end": "1588419"
  },
  {
    "text": "but most of the the overhead there is actually interest testing to make sure",
    "start": "1588419",
    "end": "1593970"
  },
  {
    "text": "the message is correctly transmitted and sent so what we want to do is just we'll",
    "start": "1593970",
    "end": "1599700"
  },
  {
    "text": "get rid of of the of the test so what one that I'm going to do is get rid of",
    "start": "1599700",
    "end": "1605760"
  },
  {
    "text": "here where we're creating a hash let's get rid of that and get rid of this so",
    "start": "1605760",
    "end": "1613890"
  },
  {
    "text": "we'll just assume it succeeds that stress has received press to send",
    "start": "1613890",
    "end": "1619220"
  },
  {
    "text": "again I'm gonna get rid of the hash there yeah so let's run this now and now",
    "start": "1619220",
    "end": "1628610"
  },
  {
    "text": "we're getting five hundred and almost six hundred thousand messages per second",
    "start": "1628610",
    "end": "1633740"
  },
  {
    "text": "on the laptop so we've got very low overhead very low per message overhead doing this by virtue of being locked",
    "start": "1633740",
    "end": "1639770"
  },
  {
    "text": "free so we've done it we've created our",
    "start": "1639770",
    "end": "1646070"
  },
  {
    "text": "own pipes in just a few pages of code so the next the next challenge is to create",
    "start": "1646070",
    "end": "1659000"
  },
  {
    "text": "the top level we need to create a channel and a proxy so what this is to remember we want to be able to not just",
    "start": "1659000",
    "end": "1664130"
  },
  {
    "text": "send by to another process I want to call methods I want to instantiate objects in another",
    "start": "1664130",
    "end": "1670880"
  },
  {
    "text": "process and call methods on the other process so just like you can with remoting so we're going to do that by",
    "start": "1670880",
    "end": "1677330"
  },
  {
    "text": "creating a channel I'm gonna call it fast Channel and that we're going to create proxies a proxy of T is the way",
    "start": "1677330",
    "end": "1684590"
  },
  {
    "text": "that we're going to do the remoting that's it that's a proxy for the remote object we want to access so these are",
    "start": "1684590",
    "end": "1691429"
  },
  {
    "text": "the requirements I want client activation right that's a really really good feature of remoting that I was the",
    "start": "1691429",
    "end": "1697220"
  },
  {
    "text": "only person that liked right so it used to be considered a dirty word client activation client activated objects and",
    "start": "1697220",
    "end": "1704510"
  },
  {
    "text": "remoting the reason is that people were using remoting mostly for things like web services right for loosely coupled",
    "start": "1704510",
    "end": "1712210"
  },
  {
    "text": "applications you're talking to your thousands of clients talking to a server you're a scale to thousands of clients",
    "start": "1712210",
    "end": "1718370"
  },
  {
    "text": "now in that situation client activation is inappropriate this situation is absolutely perfect for a tightly coupled",
    "start": "1718370",
    "end": "1725240"
  },
  {
    "text": "system same assemblies on both ends so what is client activation it's that it's",
    "start": "1725240",
    "end": "1730520"
  },
  {
    "text": "that the one process will instantiate an object in another process and that",
    "start": "1730520",
    "end": "1735710"
  },
  {
    "text": "object will stay alive as long as either process as a reference to it when both",
    "start": "1735710",
    "end": "1741799"
  },
  {
    "text": "processes drop the reference then it gets GCD right now the reason it can go",
    "start": "1741799",
    "end": "1747860"
  },
  {
    "text": "wrong is if one of the Crash's right this the the process that sponsoring it crashes it's going to stay",
    "start": "1747860",
    "end": "1755090"
  },
  {
    "text": "alive potentially forever on the other process but and they came up with some",
    "start": "1755090",
    "end": "1760820"
  },
  {
    "text": "really complicated nasty ways of dealing with this and remoting but we won't have this problem because in link pad if the",
    "start": "1760820",
    "end": "1767810"
  },
  {
    "text": "process crashes what we're going to do is we're going to scope all of the proxies to the channel itself right",
    "start": "1767810",
    "end": "1775640"
  },
  {
    "text": "we're not going to be static they're going to be an instance of the channel",
    "start": "1775640",
    "end": "1780680"
  },
  {
    "text": "so all we do is we recreate a new channel new process new channel and all of those old proxies die with the",
    "start": "1780680",
    "end": "1787070"
  },
  {
    "text": "channel right we don't have to code anything at all it's all automatic so client activation will work brilliantly",
    "start": "1787070",
    "end": "1793310"
  },
  {
    "text": "if as long as we scope the proxies to the channel now when you do to call methods with parameters and get a return",
    "start": "1793310",
    "end": "1799400"
  },
  {
    "text": "value back we're not going to support refs and outs that's way too complicated we're not going to let you create generic types",
    "start": "1799400",
    "end": "1806110"
  },
  {
    "text": "and we we do need to support complex types I do want to be able to to",
    "start": "1806110",
    "end": "1812330"
  },
  {
    "text": "serialize complex types and what exceptions to be propagated transparently again that's quite easy",
    "start": "1812330",
    "end": "1818360"
  },
  {
    "text": "because exception is just a return value that you throw I want it to be",
    "start": "1818360",
    "end": "1823580"
  },
  {
    "text": "absolutely fully asynchronous and I want automatic marshalling and unmarshal",
    "start": "1823580",
    "end": "1829340"
  },
  {
    "text": "right that's a really cool feature remoting so what that is if I'm if I'm calling a method in another process I",
    "start": "1829340",
    "end": "1835370"
  },
  {
    "text": "can pass a reference to an object in my process right I'm Wendy and then the",
    "start": "1835370",
    "end": "1841580"
  },
  {
    "text": "other process can call methods on that and it will automatically call back to my process right that's automatic",
    "start": "1841580",
    "end": "1849200"
  },
  {
    "text": "marshalling it's really cool and then even that even more callers are marshalling right so then you can send",
    "start": "1849200",
    "end": "1856100"
  },
  {
    "text": "an object from your domain to the other domain and then it can set that object back to you and then you can call",
    "start": "1856100",
    "end": "1862880"
  },
  {
    "text": "methods on that but it realizes that that's a reference to an object on another domain which is a reference back",
    "start": "1862880",
    "end": "1868970"
  },
  {
    "text": "to your domain so to automatically unwrap it to a local object right that's some marshaling so I thought be really",
    "start": "1868970",
    "end": "1875000"
  },
  {
    "text": "cool it's not essential but if I get that working it's gonna make it really really smooth to use I want it really",
    "start": "1875000",
    "end": "1881660"
  },
  {
    "text": "super fast and it didn't write it in less than a week so there's some things that that",
    "start": "1881660",
    "end": "1886830"
  },
  {
    "text": "kind of contradict each other they're like being able to be fast and being able to serialize complex types I don't",
    "start": "1886830",
    "end": "1892830"
  },
  {
    "text": "have the time to write a full serialization engine that's gonna take a year that right to do that so I've come up with it with a really good way to",
    "start": "1892830",
    "end": "1898680"
  },
  {
    "text": "compromise on that though so let's let's",
    "start": "1898680",
    "end": "1905310"
  },
  {
    "text": "sermon let's start with it so what the first challenge we've got is in being",
    "start": "1905310",
    "end": "1915000"
  },
  {
    "text": "able to call a method on an in another domain what does that look like in the code like one way to do it is we could",
    "start": "1915000",
    "end": "1922800"
  },
  {
    "text": "just describe the method and the object we want to call in a string and all the parameters in a string but that's",
    "start": "1922800",
    "end": "1929280"
  },
  {
    "text": "incredibly error-prone and clumsy but we're in c-sharp there's a much nicer way we can do this so in this example",
    "start": "1929280",
    "end": "1935570"
  },
  {
    "text": "I'm good a method foo which takes an action it's a delegate so we can call",
    "start": "1935570",
    "end": "1942150"
  },
  {
    "text": "foo with a bit of code I can say foo I want you to execute console dot write",
    "start": "1942150",
    "end": "1947310"
  },
  {
    "text": "line hello world right and when we call this it's going to execute hello world right line hello world right so that's",
    "start": "1947310",
    "end": "1954810"
  },
  {
    "text": "that's how we can use it a delegate for interaction but we can change that action into an expression of action and",
    "start": "1954810",
    "end": "1964950"
  },
  {
    "text": "now that's slightly different so instead of now getting a delegate we see shot",
    "start": "1964950",
    "end": "1971580"
  },
  {
    "text": "builds us an expression tree which describes this code so this now a is now",
    "start": "1971580",
    "end": "1977790"
  },
  {
    "text": "a description of that code there so when I dump out that a that expression of",
    "start": "1977790",
    "end": "1983220"
  },
  {
    "text": "action what I get is a description saying this is a lambda expression the",
    "start": "1983220",
    "end": "1991350"
  },
  {
    "text": "body of it is right line hello world it's a method call and these are the",
    "start": "1991350",
    "end": "1997110"
  },
  {
    "text": "arguments to that so this allows us to this is really powerful so we can expand this a bit so what I'm doing now I'm",
    "start": "1997110",
    "end": "2003800"
  },
  {
    "text": "saying if a body don't know type is a call a method call then cast it to a method call expression dump out the",
    "start": "2003800",
    "end": "2010760"
  },
  {
    "text": "method and dump out the arguments so I'll run that now and now we've got here we are that's the",
    "start": "2010760",
    "end": "2017560"
  },
  {
    "text": "console.writeline and now that's the parameter hello world in there so this",
    "start": "2017560",
    "end": "2024130"
  },
  {
    "text": "is the basis we can use for being able to execute something in another domain so let's just flush that up a little bit",
    "start": "2024130",
    "end": "2030640"
  },
  {
    "text": "more so what it looks like now we're invoking the remote method so I'm going",
    "start": "2030640",
    "end": "2036100"
  },
  {
    "text": "to create a class called fast channel that's that manages the communication give it a name and then we're going to",
    "start": "2036100",
    "end": "2042280"
  },
  {
    "text": "have this class proxy which is a generic class of remote class remote classes",
    "start": "2042280",
    "end": "2047890"
  },
  {
    "text": "something is an example of a class that we want to remote so here it is this is the class I want to instantiate on",
    "start": "2047890",
    "end": "2054520"
  },
  {
    "text": "another domain and I've got a method called some remote method I'm gonna call which takes it in turn string so I call",
    "start": "2054520",
    "end": "2061690"
  },
  {
    "text": "channel don't activate all right that's that's the method I'm going to use to create an object in the other domain so",
    "start": "2061690",
    "end": "2067419"
  },
  {
    "text": "I want to I want you to instantiate an instance of remote class in the other domain and then I want you to run on",
    "start": "2067419",
    "end": "2075190"
  },
  {
    "text": "that remote damat on that object some remote method with these parameters so",
    "start": "2075190",
    "end": "2081760"
  },
  {
    "text": "this is that this is a shell of what we're doing so the the fast channel will have two pipes input output pipes that's",
    "start": "2081760",
    "end": "2088600"
  },
  {
    "text": "bi-directional that's the method to do the activation so it will create a new",
    "start": "2088600",
    "end": "2095050"
  },
  {
    "text": "proxy for us which is the handle we can use to call methods on it and then it will we need to write code to serialize",
    "start": "2095050",
    "end": "2101800"
  },
  {
    "text": "that instantiation to describe it we want to stand state the object and send it to the out pipe so let's have a look",
    "start": "2101800",
    "end": "2109360"
  },
  {
    "text": "again in that proxy we need to write a run method in there so that run method will take an expression of action of T",
    "start": "2109360",
    "end": "2117370"
  },
  {
    "text": "remote so this describes the remote method that we want to run so we'll say if it's not an expression call we'll",
    "start": "2117370",
    "end": "2124330"
  },
  {
    "text": "just throw an exception saying I don't know how to do that so we're only going to allow you to call simple methods I'm",
    "start": "2124330",
    "end": "2130810"
  },
  {
    "text": "also going to allow you to get properties as well we're going to allow set properties we won't allow other",
    "start": "2130810",
    "end": "2135850"
  },
  {
    "text": "things like you know custom operators and things like that so now we can dump",
    "start": "2135850",
    "end": "2141130"
  },
  {
    "text": "out the method and dump out the arguments and then what we the other thing when you would need to do is to serialize that method call",
    "start": "2141130",
    "end": "2148140"
  },
  {
    "text": "into some payload binary payload and then send it down the wire so that's",
    "start": "2148140",
    "end": "2153690"
  },
  {
    "text": "pretty much what we need and I can run that now and we should it should just get as far as just describing this is",
    "start": "2153690",
    "end": "2161370"
  },
  {
    "text": "what we're trying to do we're trying to run this remote method with these arguments so here we are running that from some remote method int 32 string s",
    "start": "2161370",
    "end": "2168780"
  },
  {
    "text": "and these are the arguments that we passed in so already halfway there really right few more things minis one",
    "start": "2168780",
    "end": "2177750"
  },
  {
    "text": "is we need not just a run but an eval we need to be able to call a method and get",
    "start": "2177750",
    "end": "2183570"
  },
  {
    "text": "a return value back that's very very similar to what we already did in there",
    "start": "2183570",
    "end": "2188940"
  },
  {
    "text": "so except that it's we now have a Tia results as well we have a T result eval",
    "start": "2188940",
    "end": "2194010"
  },
  {
    "text": "T result and the it's the type is an expression of a func of t remote comma t",
    "start": "2194010",
    "end": "2200580"
  },
  {
    "text": "results so it takes the t remote that's the object on the other domain and the t result is the return value would get",
    "start": "2200580",
    "end": "2206760"
  },
  {
    "text": "from there the other thing we need to do is we need to provide an asynchronous version of that because I want to be",
    "start": "2206760",
    "end": "2215160"
  },
  {
    "text": "able to call asynchronous methods on the remote domain as well so asynchronous methods return a task alright so here's",
    "start": "2215160",
    "end": "2222750"
  },
  {
    "text": "what that what it with the signature will look like some mouse is not very",
    "start": "2222750",
    "end": "2227910"
  },
  {
    "text": "good on this surface so here we are so it would sort of taking a T result it",
    "start": "2227910",
    "end": "2233250"
  },
  {
    "text": "would take a T a task of T result that's the return type and it returns a task of",
    "start": "2233250",
    "end": "2239880"
  },
  {
    "text": "T result that's gonna require a little bit more wiring up it's not synchronous so it has to keep track of that remote",
    "start": "2239880",
    "end": "2246330"
  },
  {
    "text": "method when it's complete and send the result back so as it turns out when we",
    "start": "2246330",
    "end": "2252150"
  },
  {
    "text": "actually implement this this one here the synchronous one will also return a",
    "start": "2252150",
    "end": "2258780"
  },
  {
    "text": "task of T result even the activate method will return a task everything",
    "start": "2258780",
    "end": "2264930"
  },
  {
    "text": "will return a task the reason for this is it's possible that the remote process",
    "start": "2264930",
    "end": "2270390"
  },
  {
    "text": "is crashed in which case even synchronous our methods will never return I don't want link pad UI to crash",
    "start": "2270390",
    "end": "2278100"
  },
  {
    "text": "into fries because a process we're processes crashed so I've actually",
    "start": "2278100",
    "end": "2283120"
  },
  {
    "text": "going to make everything return tasks so we can now go to the to the actual",
    "start": "2283120",
    "end": "2291930"
  },
  {
    "text": "program this will go now to the fast channel this is all of the code now by the way if you want if you want to get",
    "start": "2291930",
    "end": "2299470"
  },
  {
    "text": "download this code go to link pad samples and hit download input more samples and if you go out to the end you",
    "start": "2299470",
    "end": "2308410"
  },
  {
    "text": "hear the samples for NDC Sydney so if there's nothing if you have understood absolutely nothing in here you can",
    "start": "2308410",
    "end": "2314080"
  },
  {
    "text": "download the sample i've kept off stripped everything I possibly can out of it that isn't essential for this so",
    "start": "2314080",
    "end": "2320980"
  },
  {
    "text": "it's simple enough that you can sort of figure out how it works and you can hack it and change it and you can use this as",
    "start": "2320980",
    "end": "2327940"
  },
  {
    "text": "a basis for any other communications library you want to write very high-speed communications library",
    "start": "2327940",
    "end": "2334090"
  },
  {
    "text": "between processes so I'm gonna run through it now how it works this is a",
    "start": "2334090",
    "end": "2339670"
  },
  {
    "text": "little bit bigger than the last one so it's the demo we're going to look at I'm",
    "start": "2339670",
    "end": "2347980"
  },
  {
    "text": "going to look first at the fast channel itself and things I'm going to point out",
    "start": "2347980",
    "end": "2355780"
  },
  {
    "text": "here is he rolled the proxy's these the client activated objects so we need to keep track of them in a dictionary right",
    "start": "2355780",
    "end": "2362770"
  },
  {
    "text": "this is not a static dictionary it's an instance of the proxy so that we avoid the memory leaks by doing that so that's",
    "start": "2362770",
    "end": "2369820"
  },
  {
    "text": "the dictionary and this here this dictionary is whenever we send a message",
    "start": "2369820",
    "end": "2374980"
  },
  {
    "text": "to the other room to the other domain we need to get a response at some point so we need to keep track of what to do when",
    "start": "2374980",
    "end": "2383740"
  },
  {
    "text": "we get a response if I you know call a method on the other domain it's going to send a return value or an exception at",
    "start": "2383740",
    "end": "2389170"
  },
  {
    "text": "some point so what do I do when I get the return message so the way we do this is every message has a number we keep",
    "start": "2389170",
    "end": "2395980"
  },
  {
    "text": "incrementing the number so unique number so what I do is I create a dictionary and the key is the number of the message",
    "start": "2395980",
    "end": "2402640"
  },
  {
    "text": "and this tells itting what to do right so rather than putting the information",
    "start": "2402640",
    "end": "2407740"
  },
  {
    "text": "in there what I'm putting in is I can actually put the code and I can say do this when you get the reply you",
    "start": "2407740",
    "end": "2414599"
  },
  {
    "text": "replies so these are the different kinds of messages right that activation means",
    "start": "2414599",
    "end": "2420479"
  },
  {
    "text": "instantiating an object on the other domain deactivation is when the GC catches up with it and we want to pass",
    "start": "2420479",
    "end": "2427019"
  },
  {
    "text": "that message on method called simple method call that's the return value from a method and that's the return exception",
    "start": "2427019",
    "end": "2434789"
  },
  {
    "text": "so if it if the method that you called through those are the only kinds of messages so we create we start by",
    "start": "2434789",
    "end": "2442410"
  },
  {
    "text": "creating the two pipes right so this is bi-directional so there's one impart one out pipe and let's have a look at the",
    "start": "2442410",
    "end": "2454170"
  },
  {
    "text": "send messages probably activate here's how we do an activation so how you activate or instantiate a message on the",
    "start": "2454170",
    "end": "2461609"
  },
  {
    "text": "other domain so this creates in increments the message number and then",
    "start": "2461609",
    "end": "2467819"
  },
  {
    "text": "to serialize that to describe the activation I'm using a memory stream with a binary writer",
    "start": "2467819",
    "end": "2473880"
  },
  {
    "text": "that's quite a fast way of doing it so we can just write some byte series of bytes in there the first thing we do is",
    "start": "2473880",
    "end": "2480479"
  },
  {
    "text": "we write the kind of message which is an activation and then we write the message number and then we need to write the",
    "start": "2480479",
    "end": "2487950"
  },
  {
    "text": "type of the object that we want to instantiate so I've got a method called serialized type which does that and",
    "start": "2487950",
    "end": "2494609"
  },
  {
    "text": "we'll look at that later flush the writer and now we want to know we're going to have to wait oh wait until we",
    "start": "2494609",
    "end": "2501660"
  },
  {
    "text": "get a response all right so what we do is to call this method here get response future that returns a task right which",
    "start": "2501660",
    "end": "2509249"
  },
  {
    "text": "we return to the caller so we'll have a look at get response future all right so",
    "start": "2509249",
    "end": "2516749"
  },
  {
    "text": "what this does it creates a task completion source which lets us drive a task and then it locks a pending replies",
    "start": "2516749",
    "end": "2523979"
  },
  {
    "text": "right that's that dictionary that contains integer comma delegate right so",
    "start": "2523979",
    "end": "2530599"
  },
  {
    "text": "one of the things that you do when you start getting more comfortable with with functional styles of programming is",
    "start": "2530599",
    "end": "2536969"
  },
  {
    "text": "you're willing to use functions pretty much everywhere you would use objects so we use you know objects in lists and",
    "start": "2536969",
    "end": "2545130"
  },
  {
    "text": "dictionary so why not use func anna-san dictionary so this is a dictionary that contains in Tacoma",
    "start": "2545130",
    "end": "2550960"
  },
  {
    "text": "function so this pending reply so we're adding to that we're saying when you when we see a reply with that message",
    "start": "2550960",
    "end": "2558340"
  },
  {
    "text": "number run this code here right and it's fairly simple what's in here there's two",
    "start": "2558340",
    "end": "2564340"
  },
  {
    "text": "kinds of things we're going to get back it's either going to give us a return value in which case we just set the",
    "start": "2564340",
    "end": "2569800"
  },
  {
    "text": "result to that value of the task or it's going to give us a fault and exception in which case we need to throw that",
    "start": "2569800",
    "end": "2576040"
  },
  {
    "text": "exception by calling set exception in here all right that this code above here",
    "start": "2576040",
    "end": "2581200"
  },
  {
    "text": "this help preserves the stack trace right that's a little trick you can do to preserve the stack trace the original",
    "start": "2581200",
    "end": "2588430"
  },
  {
    "text": "one so it looks like it was thrown locally now the other thing like what I",
    "start": "2588430",
    "end": "2593560"
  },
  {
    "text": "did was serialize the we needed to serialize the here the type so how do we",
    "start": "2593560",
    "end": "2600940"
  },
  {
    "text": "serialize the type okay this is again fairly simple there's two paths a fast",
    "start": "2600940",
    "end": "2606880"
  },
  {
    "text": "path and a slow path so this is a slow path where this will work for anything",
    "start": "2606880",
    "end": "2611980"
  },
  {
    "text": "it writes rights either one or two one for fast two for slow the slow one it simply writes out the fully qualified",
    "start": "2611980",
    "end": "2618430"
  },
  {
    "text": "name of the type very simple this is a thoughts about that long right puts the assembly name and then comma in the full",
    "start": "2618430",
    "end": "2624340"
  },
  {
    "text": "type net but I want it to be really fast so what I said as a compromise is is I'm",
    "start": "2624340",
    "end": "2629410"
  },
  {
    "text": "going to we're going to nominate we can nominate one assembly as being the assembly which contains all the types",
    "start": "2629410",
    "end": "2635890"
  },
  {
    "text": "I want to serialize really fast that works for link bad there's only one assembly that contains everything that I",
    "start": "2635890",
    "end": "2640930"
  },
  {
    "text": "need that fast serialization on so if it happens to be that assembly then I write",
    "start": "2640930",
    "end": "2646450"
  },
  {
    "text": "the called the method artha toke and that's integer and as long as the assembly is identical on both sides",
    "start": "2646450",
    "end": "2652360"
  },
  {
    "text": "that's a really fast way to communicate which particular type you want to activate so what we can we can activate",
    "start": "2652360",
    "end": "2661600"
  },
  {
    "text": "objects now so the other thing I'm were to look at now is how we how we call",
    "start": "2661600",
    "end": "2666850"
  },
  {
    "text": "methods so let's have a look at that so we'll go to the know BM they'll be in a",
    "start": "2666850",
    "end": "2672460"
  },
  {
    "text": "method on here to send method call here it is so this is a send method call",
    "start": "2672460",
    "end": "2681060"
  },
  {
    "text": "let's find that",
    "start": "2691240",
    "end": "2694230"
  },
  {
    "text": "like I did I closed it and that yes till",
    "start": "2699730",
    "end": "2707560"
  },
  {
    "text": "early in the day for me okay here we are",
    "start": "2707560",
    "end": "2714310"
  },
  {
    "text": "synthetic or so food we do the normal thing of getting the lock and asserting",
    "start": "2714310",
    "end": "2719859"
  },
  {
    "text": "safe we get the unique message number we serialize the method called and get a",
    "start": "2719859",
    "end": "2727000"
  },
  {
    "text": "response future so pretty simple really so let's have a look at what's in there",
    "start": "2727000",
    "end": "2732310"
  },
  {
    "text": "because that's that that's the interesting stuff is that it's serialized method call so in here this is where we this is the",
    "start": "2732310",
    "end": "2741970"
  },
  {
    "text": "expression tree that we need to serialize so we look to see whether this is a method call expression because",
    "start": "2741970",
    "end": "2748630"
  },
  {
    "text": "there's really only two ones that we're going to serialize a method call or a simple property get accessor so though",
    "start": "2748630",
    "end": "2755410"
  },
  {
    "text": "that extracts the method and the arguments from the method call expression and this one here gets the",
    "start": "2755410",
    "end": "2761920"
  },
  {
    "text": "details that the method from the property that we want to get otherwise as only method calls of property reads",
    "start": "2761920",
    "end": "2766990"
  },
  {
    "text": "can be serialized now this is what the message looks like we first write a",
    "start": "2766990",
    "end": "2772660"
  },
  {
    "text": "method we like to indicate that it's a method call then write the message number then we write the object ID so",
    "start": "2772660",
    "end": "2780430"
  },
  {
    "text": "I'll look into this in a moment so the prot every proxy again has a number but keep incrementing for all the proxy so",
    "start": "2780430",
    "end": "2786190"
  },
  {
    "text": "you have a proxy number to identify the proxy this indicates whether it's asynchronous or not the method were",
    "start": "2786190",
    "end": "2792310"
  },
  {
    "text": "calling then we serialize the method and in the arguments okay so we'll look at",
    "start": "2792310",
    "end": "2797500"
  },
  {
    "text": "serializing the method first again that's the fast path right if it's the",
    "start": "2797500",
    "end": "2803560"
  },
  {
    "text": "recognized assembly it will just write the method data token otherwise writes",
    "start": "2803560",
    "end": "2808810"
  },
  {
    "text": "the assembly qualified name and then the method metadata token now we'll go back",
    "start": "2808810",
    "end": "2815380"
  },
  {
    "text": "and look at how your serial I see arguments alright because this is a challenging thing we need to be able to",
    "start": "2815380",
    "end": "2820930"
  },
  {
    "text": "serialize absolutely anything I mean needs to be really quick alright so I came up with a really easy way to do",
    "start": "2820930",
    "end": "2826630"
  },
  {
    "text": "this so cool we serialize each one in turn see realized value",
    "start": "2826630",
    "end": "2832580"
  },
  {
    "text": "and what we do is we check is it know is it bull is it bite is it char so we have",
    "start": "2832580",
    "end": "2838690"
  },
  {
    "text": "these are the types I need to be able to serialize really quickly to link that",
    "start": "2838690",
    "end": "2845150"
  },
  {
    "text": "simple type so we can obviously add to that list if you want but these are the simple types so we have a fast path if",
    "start": "2845150",
    "end": "2851060"
  },
  {
    "text": "it happens to be a simple type we're just going to do this very simple code write out the the type code and then",
    "start": "2851060",
    "end": "2858200"
  },
  {
    "text": "we'll write the object out using binary writer simple and fast but the thing is what if it's a complicated object",
    "start": "2858200",
    "end": "2865310"
  },
  {
    "text": "complex object how do we do that well we do down here is we use the the binary",
    "start": "2865310",
    "end": "2872480"
  },
  {
    "text": "serialization engine we thunk down to that now that's kind of slow but it doesn't matter because what I do is it's",
    "start": "2872480",
    "end": "2879470"
  },
  {
    "text": "very simple if if I need performance I'll make sure all the parameters are simple types but if I happen to need a",
    "start": "2879470",
    "end": "2886190"
  },
  {
    "text": "rich object serialized and I performance it's not critical then it still works so",
    "start": "2886190",
    "end": "2891380"
  },
  {
    "text": "we get so we get the flexibility and we get performance you don't get the both at the same time but that's not really a",
    "start": "2891380",
    "end": "2897350"
  },
  {
    "text": "problem very easy to work around that so the only other thing we need to be able to serialize are proxies so remember",
    "start": "2897350",
    "end": "2904610"
  },
  {
    "text": "when I talked about automatic marshalling and I'm marshalling it's one of those things is easier to code than",
    "start": "2904610",
    "end": "2910010"
  },
  {
    "text": "describe so this is the code automatically Marshall and this is the",
    "start": "2910010",
    "end": "2915440"
  },
  {
    "text": "code automatically unmarshal so it's really not too bad it's it's probably easier easier to write than describe so",
    "start": "2915440",
    "end": "2924080"
  },
  {
    "text": "that's pretty much pretty much it for the interesting stuff I should probably look at these and do the proxies as well",
    "start": "2924080",
    "end": "2932710"
  },
  {
    "text": "there's a few more things that we need so with these proxies and because they",
    "start": "2932710",
    "end": "2938060"
  },
  {
    "text": "automatically unmarshal it's possible that a proxy might actually refer to an object in your own domain so then you",
    "start": "2938060",
    "end": "2945920"
  },
  {
    "text": "need to be able to invoke that as well so again I've got a fast path for doing",
    "start": "2945920",
    "end": "2951530"
  },
  {
    "text": "that so this is the fast devourer and so I check is it a simple a very simple",
    "start": "2951530",
    "end": "2956720"
  },
  {
    "text": "kind of method call I've got a shortcut for doing that otherwise I call the M",
    "start": "2956720",
    "end": "2962150"
  },
  {
    "text": "the invoke method on the on the the reflection object which is a",
    "start": "2962150",
    "end": "2967700"
  },
  {
    "text": "bit slower so with that let's I think",
    "start": "2967700",
    "end": "2973160"
  },
  {
    "text": "that's enough for showing of code now because I will go across side soon for 9:00 in the morning so we're gonna demo",
    "start": "2973160",
    "end": "2979400"
  },
  {
    "text": "it now so here's the demo that I've got demo server and demo client so the demo",
    "start": "2979400",
    "end": "2984860"
  },
  {
    "text": "server sets up a fast channel name of test true so it owns it and demo client",
    "start": "2984860",
    "end": "2991640"
  },
  {
    "text": "sets above channel with the same name it's not the owner so this is the one one party is the owner which creates the",
    "start": "2991640",
    "end": "2998750"
  },
  {
    "text": "buffers and the other ones not the owner but they're both client-server really there's no such thing as client-server",
    "start": "2998750",
    "end": "3003970"
  },
  {
    "text": "because that's really peer-to-peer they can call each other so we're going to wait channel to activate folks we're",
    "start": "3003970",
    "end": "3010810"
  },
  {
    "text": "going to instantiate a remote object called foo on the other domain and here's this is the remote object we're",
    "start": "3010810",
    "end": "3017830"
  },
  {
    "text": "going to instantiate we've got a property to get the process ID we've got an ADD method adds two numbers together",
    "start": "3017830",
    "end": "3023560"
  },
  {
    "text": "and an asynchronous version of that that awaits for a second and then answer",
    "start": "3023560",
    "end": "3029530"
  },
  {
    "text": "numbers together so listen we're going to demo that so first we'll activate the through object we're going to ask for",
    "start": "3029530",
    "end": "3036400"
  },
  {
    "text": "its process ID and then we're going to add two numbers together I'm going to",
    "start": "3036400",
    "end": "3043150"
  },
  {
    "text": "call the remote add method foo add two and two and then I'm going to do the",
    "start": "3043150",
    "end": "3048280"
  },
  {
    "text": "async version of that right you notice they both returned tasks they're both async so we have to await each of them",
    "start": "3048280",
    "end": "3054220"
  },
  {
    "text": "and then we'll run that now and one thing I want to point out is that this is actually pretty much ideal when it",
    "start": "3054220",
    "end": "3060970"
  },
  {
    "text": "comes to the extra ceremony we got in here because in order to call the remote",
    "start": "3060970",
    "end": "3066760"
  },
  {
    "text": "method we have to call we have to add this extra stuff here onto there rather than just calling food or add I've got",
    "start": "3066760",
    "end": "3073390"
  },
  {
    "text": "to put a weight through proxy eval foo alpha Tara that's a bit of extra clutter but it's extremely welcome clutter",
    "start": "3073390",
    "end": "3080050"
  },
  {
    "text": "because I remembered the problem I had with remoting which was where there's no clutter at all is it so it's so",
    "start": "3080050",
    "end": "3086440"
  },
  {
    "text": "transparent you don't know whether your remoting or your locally right and I've had I've had problems accidental",
    "start": "3086440",
    "end": "3093160"
  },
  {
    "text": "remoting right where I thought I was locally and I'm actually remoting with this it can't",
    "start": "3093160",
    "end": "3098920"
  },
  {
    "text": "this is really important because this tells you everywhere in your program where there is a potential remote method",
    "start": "3098920",
    "end": "3104979"
  },
  {
    "text": "call where you're crossing a boundary and so this is actually a blessing to have this bit of extra clutter in here",
    "start": "3104979",
    "end": "3110400"
  },
  {
    "text": "let's run this now see what we get and it works a remote process ID is same as",
    "start": "3110400",
    "end": "3116920"
  },
  {
    "text": "our process ID because we're running on the same process at the moment the sum we're adding a two and two together and",
    "start": "3116920",
    "end": "3123940"
  },
  {
    "text": "then three and three to get that all works so and that that's the code that's",
    "start": "3123940",
    "end": "3129099"
  },
  {
    "text": "running on the other end the other process ID so to really test this properly we kind of need to run it in",
    "start": "3129099",
    "end": "3134619"
  },
  {
    "text": "separate processes so let's let's clone this a couple of times",
    "start": "3134619",
    "end": "3139839"
  },
  {
    "text": "so the first clone I'm going to just demo the the demo server all we need to",
    "start": "3139839",
    "end": "3153880"
  },
  {
    "text": "do is put a console dot read line in here let's do that so that's going to",
    "start": "3153880",
    "end": "3161559"
  },
  {
    "text": "run the server and then in the other process now we're going to them at the",
    "start": "3161559",
    "end": "3168130"
  },
  {
    "text": "client and here we are so that all works in the same way now so it's running now on a different process ID write Fu's",
    "start": "3168130",
    "end": "3175719"
  },
  {
    "text": "process they've got to process IDs happening now so good that all works and",
    "start": "3175719",
    "end": "3184029"
  },
  {
    "text": "final thing I want to show you is the automatic marshalling and I'm",
    "start": "3184029",
    "end": "3189400"
  },
  {
    "text": "marshalling in there so now I've created not just a foo but a bar as well right",
    "start": "3189400",
    "end": "3195940"
  },
  {
    "text": "so we've got class foo and we've got class bar all right so the the bar the",
    "start": "3195940",
    "end": "3203559"
  },
  {
    "text": "bar class has a method that returns a foo proxy right this is automatic",
    "start": "3203559",
    "end": "3210759"
  },
  {
    "text": "marshaling so all we need to do is put new foo in here and it will automatically convert it to a proxy of",
    "start": "3210759",
    "end": "3216549"
  },
  {
    "text": "food or Marsha it for us and I've got a through print foo method takes a proxy of foo",
    "start": "3216549",
    "end": "3223469"
  },
  {
    "text": "and we can call these methods seamlessly now using this here is Marsha Lee so I'm",
    "start": "3225920",
    "end": "3232260"
  },
  {
    "text": "going to activate now Abbar and then I'm going to call the method on the bar to get a foo so I'm going to end up with",
    "start": "3232260",
    "end": "3237540"
  },
  {
    "text": "another food proxy and then I'm going to call the add method on there all right",
    "start": "3237540",
    "end": "3242730"
  },
  {
    "text": "so we're going to go back to ourselves so let's run all that and make sure that runs to automatic marshalling and I'm",
    "start": "3242730",
    "end": "3250590"
  },
  {
    "text": "marshalling and that all works fine yet this that's that code here so that all",
    "start": "3250590",
    "end": "3256470"
  },
  {
    "text": "works fine so here it is so you got all the code you can download it it's not",
    "start": "3256470",
    "end": "3262290"
  },
  {
    "text": "too big and complicated and hopefully I haven't I haven't you scared you too much for a 9:00 a.m. talk so any",
    "start": "3262290",
    "end": "3269670"
  },
  {
    "text": "questions on that",
    "start": "3269670",
    "end": "3272299"
  },
  {
    "text": "okay the performance improvement was over remoting was it was several times",
    "start": "3278450",
    "end": "3286640"
  },
  {
    "text": "oh somewhere five to ten times faster in terms of latency which is the one I",
    "start": "3286640",
    "end": "3293539"
  },
  {
    "text": "wanted so I programmed entirely I wasn't trying to make it fast through plus four make fast late it's you know someone got five",
    "start": "3293539",
    "end": "3299930"
  },
  {
    "text": "to ten times because of that underlying lock-free pipe that I'm using and the",
    "start": "3299930",
    "end": "3307099"
  },
  {
    "text": "fact that there's a fast path in the in remoting code but simple simple",
    "start": "3307099",
    "end": "3312950"
  },
  {
    "text": "scenarios if you're is returning a task",
    "start": "3312950",
    "end": "3319339"
  },
  {
    "text": "why bother having a synchronous version at all because the difference is between the synchronous and the async is that",
    "start": "3319339",
    "end": "3326390"
  },
  {
    "text": "you still need to be able to call the different there's a difference between calling a synchronous method on the",
    "start": "3326390",
    "end": "3333260"
  },
  {
    "text": "remote and an asynchronous method on the remote end so the async method it has to",
    "start": "3333260",
    "end": "3341769"
  },
  {
    "text": "handle the reply differently so the row at the remote end the synchronous one it",
    "start": "3341769",
    "end": "3347960"
  },
  {
    "text": "will get the reply straightaway whereas the async one it will come back when the task completes",
    "start": "3347960",
    "end": "3354880"
  },
  {
    "text": "just for the for the pipe is everything",
    "start": "3366580",
    "end": "3372160"
  },
  {
    "text": "you destroyed memory instead of reusing it after it's done okay that's a very",
    "start": "3372160",
    "end": "3378670"
  },
  {
    "text": "good question so what you're suggesting is that you could like have a pool of yes you",
    "start": "3378670",
    "end": "3387550"
  },
  {
    "text": "definitely could so if you were very careful on how you coded it the lock free stuff will make that challenging",
    "start": "3387550",
    "end": "3393850"
  },
  {
    "text": "but you could certainly have a pool of buffers that you recycle and that was",
    "start": "3393850",
    "end": "3398950"
  },
  {
    "text": "something I thought about but because the design criteria was for low latency and not high throughput that",
    "start": "3398950",
    "end": "3407530"
  },
  {
    "text": "wasn't a design criteria so I never had I never got around to doing that because it wasn't necessary for the performance",
    "start": "3407530",
    "end": "3413020"
  },
  {
    "text": "criteria but if it was if you wanted high throughput as well then that would be an excellent way to go is look at a",
    "start": "3413020",
    "end": "3419530"
  },
  {
    "text": "strategy for recycling the buffers rather than creating new ones all the time",
    "start": "3419530",
    "end": "3425190"
  },
  {
    "text": "okay well that's all the questions so thank you all for coming [Applause]",
    "start": "3434860",
    "end": "3445670"
  }
]