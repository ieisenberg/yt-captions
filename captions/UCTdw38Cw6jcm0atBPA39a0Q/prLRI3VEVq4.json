[
  {
    "start": "0",
    "end": "171000"
  },
  {
    "text": "um this talk just in case you're in the wrong room we're talking about building operable software with tdd",
    "start": "1020",
    "end": "6480"
  },
  {
    "text": "um and the obviously a hook of not the way you think so hopefully there'll be some surprises in there",
    "start": "6480",
    "end": "13380"
  },
  {
    "text": "okay so my name is Martin Thwaites I go by martin.net in everywhere",
    "start": "13380",
    "end": "19140"
  },
  {
    "text": "um I am first and foremost an observability evangelist I'm also a developer advocate for a company called",
    "start": "19140",
    "end": "25080"
  },
  {
    "text": "honeycomb um socials are there we have a booth just outside the door come see us blah",
    "start": "25080",
    "end": "30900"
  },
  {
    "text": "blah blah they paid me to be here so come see us um awesome",
    "start": "30900",
    "end": "36180"
  },
  {
    "text": "so what we're going to talk about today we're going to talk about operable software",
    "start": "36180",
    "end": "42600"
  },
  {
    "text": "um we're going to talk about what my definition of operable software is more specifically because that's all that matters we're going to talk about how we",
    "start": "42600",
    "end": "49079"
  },
  {
    "text": "test software as developers we're going to look at what's something called outside in testing",
    "start": "49079",
    "end": "54480"
  },
  {
    "text": "um what that looks like and we're going to talk about how we can use observability and how does that fit in to that operable software life cycle",
    "start": "54480",
    "end": "63000"
  },
  {
    "text": "now before we get to that I want to talk a little bit about the motivations for this talk before I started working with honeycomb",
    "start": "63000",
    "end": "70260"
  },
  {
    "text": "I spent a couple of years working for a UK Bank building a new banking software",
    "start": "70260",
    "end": "77640"
  },
  {
    "text": "and one of the things about banking software is it needs to be accurate and correct apparently giving somebody the",
    "start": "77640",
    "end": "83700"
  },
  {
    "text": "wrong balance and approving things when they shouldn't be approved is a bad thing um so basically being able to say that",
    "start": "83700",
    "end": "91439"
  },
  {
    "text": "my code is correct on the bottom layer isn't good enough because a system is bigger than your",
    "start": "91439",
    "end": "97140"
  },
  {
    "text": "class and we had to spend a lot of time thinking about how we test software we",
    "start": "97140",
    "end": "102720"
  },
  {
    "text": "wanted to go full CI CD we wanted to have really continuous release cycles",
    "start": "102720",
    "end": "108540"
  },
  {
    "text": "and a lot of that goes against the idea of resilient software the idea of software that doesn't change you know",
    "start": "108540",
    "end": "115560"
  },
  {
    "text": "banking industry is we'll do three releases every Century um and that was a bad thing in agile",
    "start": "115560",
    "end": "123060"
  },
  {
    "text": "software in building software that is resistant to change all that kind of",
    "start": "123060",
    "end": "128160"
  },
  {
    "text": "stuff it just isn't a thing in banking so we spent a lot of time building out approaches and that kind of stuff so",
    "start": "128160",
    "end": "133379"
  },
  {
    "text": "what I'm going to talk about today is not theoretical it is something that we spent two years",
    "start": "133379",
    "end": "138599"
  },
  {
    "text": "building and is running in a production environment well production-like environment they're not actually taking",
    "start": "138599",
    "end": "144180"
  },
  {
    "text": "payments yet but it is running an environment and it is running cycles and it is something that works so hopefully",
    "start": "144180",
    "end": "151319"
  },
  {
    "text": "I've I'm not going to say dumbed this down but what I've done is I've tried to simplify this into some of the component",
    "start": "151319",
    "end": "158099"
  },
  {
    "text": "parts but do take away from this that it is something that works",
    "start": "158099",
    "end": "163140"
  },
  {
    "text": "okay so what do we mean by operable software or more specifically what do I mean by operable software first and",
    "start": "163140",
    "end": "170519"
  },
  {
    "text": "foremost it's software that's built for production now I hate to say this I don't care whether it works on your",
    "start": "170519",
    "end": "176879"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "machine it's not where customers are going to be using it when we build software we build",
    "start": "176879",
    "end": "183420"
  },
  {
    "text": "it to be run in production that's the thing that we're thinking about we're not thinking about how we can run an",
    "start": "183420",
    "end": "188640"
  },
  {
    "text": "emulator locally and it doesn't matter what matters is does it run in the",
    "start": "188640",
    "end": "194280"
  },
  {
    "text": "production environment when customers are using it so what does that mean built to run in production it's built to",
    "start": "194280",
    "end": "200940"
  },
  {
    "text": "run on production servers it's built to run in a production environment it's built to run with multiple regions it's",
    "start": "200940",
    "end": "206280"
  },
  {
    "text": "built those are things that you're building your software for it's also built with live operations in",
    "start": "206280",
    "end": "213300"
  },
  {
    "text": "mind now some of you may come from the environments in the past where you'd write your code you'd throw it over and",
    "start": "213300",
    "end": "219599"
  },
  {
    "text": "somebody else would then have to deal with it because that's not your job they do with it unfortunately everybody's Ops",
    "start": "219599",
    "end": "225540"
  },
  {
    "text": "now everybody is Ops um we are working in a devops culture where developers and operations teams",
    "start": "225540",
    "end": "231840"
  },
  {
    "text": "come together you need to build your software with the people who are going to run it in mind sometimes that's yourself",
    "start": "231840",
    "end": "238739"
  },
  {
    "text": "be kind to your future self because",
    "start": "238739",
    "end": "244379"
  },
  {
    "text": "past Martin is let's be honest a little bit of an because he put a lot of problems my way and future mine we",
    "start": "244379",
    "end": "251280"
  },
  {
    "text": "can leave this off of him because you know he's fine um okay now the other thing is built for",
    "start": "251280",
    "end": "256680"
  },
  {
    "text": "fast recoverability there are things called the Dora metrics which Google built on the devops reports",
    "start": "256680",
    "end": "261720"
  },
  {
    "text": "um which it mentions something called mttr it's falling a little bit out of favor right now but it doesn't mean that",
    "start": "261720",
    "end": "266880"
  },
  {
    "text": "it's not something you should be working to which is the idea of how do I build things that recover fast from failures",
    "start": "266880",
    "end": "274680"
  },
  {
    "text": "and all of that leads to the idea that my application needs to emit robust Telemetry signals whether that's metrics",
    "start": "274680",
    "end": "282660"
  },
  {
    "text": "or traces or God forbid using logs but that is something that you need to be",
    "start": "282660",
    "end": "288540"
  },
  {
    "text": "thinking about because in production you can't attach a debugger has anybody tried to attach a bugger a debugger to a",
    "start": "288540",
    "end": "295259"
  },
  {
    "text": "live running IIs instance yeah did it go well",
    "start": "295259",
    "end": "301220"
  },
  {
    "text": "yes for those that don't know um whenever you attach a debugger to a",
    "start": "301220",
    "end": "306240"
  },
  {
    "text": "live running process it stops all the threads every request just holds it's not a pleasant day okay",
    "start": "306240",
    "end": "312900"
  },
  {
    "text": "so when we talk about operable software what do we mean by software",
    "start": "312900",
    "end": "318180"
  },
  {
    "text": "now the traditional definition is the code that you write that does the thing that the business wanted unfortunately",
    "start": "318180",
    "end": "323820"
  },
  {
    "text": "that isn't the case it's everything it's the application you write it's the",
    "start": "323820",
    "end": "328919"
  },
  {
    "text": "test that are part of your code it's the pipelines that you've built that test",
    "start": "328919",
    "end": "334740"
  },
  {
    "text": "do security analysis and deploy your code into production it's also the infrastructure that's been",
    "start": "334740",
    "end": "340259"
  },
  {
    "text": "built for it that might not be you who's built that infrastructure but it's still part of the software because the production environment is",
    "start": "340259",
    "end": "346680"
  },
  {
    "text": "part of your team that delivers value into your customers that is part of it",
    "start": "346680",
    "end": "352320"
  },
  {
    "text": "you can't host your application without infrastructure I mean that's just shipping your own",
    "start": "352320",
    "end": "357539"
  },
  {
    "text": "machine and that never works so but the other thing is it's your observability tooling it's the live operations team",
    "start": "357539",
    "end": "363060"
  },
  {
    "text": "that need to know whether your system is up whether it's functioning all of that is part of the software that you're building",
    "start": "363060",
    "end": "369539"
  },
  {
    "text": "so when you're building software if you're not considering these things you're missing out",
    "start": "369539",
    "end": "375840"
  },
  {
    "text": "you're neglecting part of your software okay",
    "start": "375840",
    "end": "381240"
  },
  {
    "text": "so let's talk a little bit about testing let's talk a little bit specifically about tdd",
    "start": "381240",
    "end": "388699"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "so what do we mean by tdd um tdd has been completed over the years I",
    "start": "390360",
    "end": "395699"
  },
  {
    "text": "mean it's it's very abnormal we don't take terms in I.T and use them for different things ever do we no that's not we don't take a well-known term like",
    "start": "395699",
    "end": "403380"
  },
  {
    "text": "you know I don't know devops and distort it into another thing tdd was a very very basic concept",
    "start": "403380",
    "end": "411600"
  },
  {
    "text": "contract First Development develop your contract develop your tests do the thing",
    "start": "411600",
    "end": "417720"
  },
  {
    "text": "it's also Red Green refactor is the idea that you write a test that fails you make the test pass you can",
    "start": "417720",
    "end": "424259"
  },
  {
    "text": "refactor your code and then it fails and then there's a big cycle that goes through",
    "start": "424259",
    "end": "429960"
  },
  {
    "text": "but the main basis of tdd is you write tests first and then you",
    "start": "429960",
    "end": "435240"
  },
  {
    "text": "write the implementation unfortunately tdd has not meant that to a lot of",
    "start": "435240",
    "end": "442020"
  },
  {
    "text": "people and one of the things that we found while writing this approach was people didn't like tdd they said",
    "start": "442020",
    "end": "449039"
  },
  {
    "text": "they thought it didn't work it's it takes too long and when you dig into it it's because",
    "start": "449039",
    "end": "454560"
  },
  {
    "text": "what they're doing is they're mocking all the things um",
    "start": "454560",
    "end": "460340"
  },
  {
    "text": "the.net developers among you will get the reference there um but they will mock",
    "start": "460340",
    "end": "466500"
  },
  {
    "text": "everything they will have a class with 17 dependencies all of them with mock",
    "start": "466500",
    "end": "473220"
  },
  {
    "text": "and they will test individual methods I've got a method that I've mocked out",
    "start": "473220",
    "end": "479039"
  },
  {
    "text": "all the dependencies for I will test that method to death now nobody cares about your 4 000 unit",
    "start": "479039",
    "end": "486479"
  },
  {
    "text": "tests I know you like them I know you spent a lot of time on them but nobody cares about the level of your",
    "start": "486479",
    "end": "494160"
  },
  {
    "text": "unit tests what they care about is your system as a whole",
    "start": "494160",
    "end": "499160"
  },
  {
    "start": "499000",
    "end": "499000"
  },
  {
    "text": "so what does why do we do tdd because if it has so many constraints and it's so bad why is it that we're",
    "start": "499560",
    "end": "506220"
  },
  {
    "text": "doing it what are the benefits that we're trying to get out of tdd now tdd is known to improve the design",
    "start": "506220",
    "end": "513899"
  },
  {
    "text": "of contracts I put methods on there might not be methods it might be API",
    "start": "513899",
    "end": "519180"
  },
  {
    "text": "contracts for your SDK it might be API contracts for your HD http apis",
    "start": "519180",
    "end": "527279"
  },
  {
    "text": "but it's based on improving the design of your method contracts because you write a test and it passes",
    "start": "527279",
    "end": "533760"
  },
  {
    "text": "that test you should do the smallest thing that makes it past that test which means your interfaces evolve your classes evolve",
    "start": "533760",
    "end": "541140"
  },
  {
    "text": "it also helps under you improve your understanding of the code base because you're using these methods",
    "start": "541140",
    "end": "547500"
  },
  {
    "text": "you're not writing a test that does a very very small thing you're writing something that's actually using",
    "start": "547500",
    "end": "552600"
  },
  {
    "text": "these apis in the way that other people are going to be using them it also documents your code if you're",
    "start": "552600",
    "end": "559200"
  },
  {
    "text": "writing these tests well your tests are going to actually be documenting your code as you go",
    "start": "559200",
    "end": "565320"
  },
  {
    "text": "because you've wrote a test for a business outcome or a particular class",
    "start": "565320",
    "end": "571140"
  },
  {
    "text": "that you wanted to do something if you've wrote your test properly you've actually got documentation already which means you never need to go into",
    "start": "571140",
    "end": "577920"
  },
  {
    "text": "Confluence again okay but what's the Bad and the bad here",
    "start": "577920",
    "end": "583200"
  },
  {
    "text": "comes from what I believe is the the way that a lot of people run tdd in their teams",
    "start": "583200",
    "end": "589320"
  },
  {
    "text": "so it's normally written these tests are normally written in the absence of any consumers of this application",
    "start": "589320",
    "end": "596459"
  },
  {
    "text": "you'll get a business requirement that says let's do a transaction and what you'll do is you'll write a transaction",
    "start": "596459",
    "end": "603000"
  },
  {
    "text": "class and then you'll write some methods on your transaction class like add amount",
    "start": "603000",
    "end": "608160"
  },
  {
    "text": "that's not what your consumers have asked for what you're doing is you're assuming what that class needs to do and then",
    "start": "608160",
    "end": "613560"
  },
  {
    "text": "assuming what you're going to use that in and then assuming assuming assuming okay",
    "start": "613560",
    "end": "618899"
  },
  {
    "text": "and because of that all of those tests become quite brittle to change",
    "start": "618899",
    "end": "624959"
  },
  {
    "text": "I've added a new parameter I've changed the parameter well I'll just delete all those tests and write some new ones",
    "start": "624959",
    "end": "632480"
  },
  {
    "text": "um that's bad because now all of a sudden you don't know whether your system still works because you've deleted all the",
    "start": "633420",
    "end": "639240"
  },
  {
    "text": "tests and stats on new ones which means that you then end up with manual testing from the outside in and all of that kind",
    "start": "639240",
    "end": "645540"
  },
  {
    "text": "of stuff okay let's talk a little bit about component",
    "start": "645540",
    "end": "651480"
  },
  {
    "start": "649000",
    "end": "649000"
  },
  {
    "text": "testing everybody's seen this meme I assume where what we end up with is lots and",
    "start": "651480",
    "end": "657720"
  },
  {
    "text": "lots of unit tests four thousand unit tests on a single class and it's bulletproof that class",
    "start": "657720",
    "end": "663120"
  },
  {
    "text": "absolutely that draw was probably the smoothest opening draw that you've ever seen",
    "start": "663120",
    "end": "669360"
  },
  {
    "text": "for about 25 percent um but that's where integration tests come",
    "start": "669360",
    "end": "675600"
  },
  {
    "text": "in now integration tests over the many many years like with all the other things we've been talking about have",
    "start": "675600",
    "end": "680820"
  },
  {
    "text": "been misconstrued and changed and they mean 17 different things to 17 different",
    "start": "680820",
    "end": "685860"
  },
  {
    "text": "people um so what I like to call these that I'm talking about is component tests",
    "start": "685860",
    "end": "692700"
  },
  {
    "text": "um they all fall under a banner of something called developer tests which is something that Ian Cooper's been",
    "start": "692700",
    "end": "698940"
  },
  {
    "text": "pushing for quite a while which is the idea that these are tests that the developers write to ensure the completeness of their code",
    "start": "698940",
    "end": "705360"
  },
  {
    "text": "the completeness being correct Acura does the right thing these are tests that you write",
    "start": "705360",
    "end": "711480"
  },
  {
    "text": "to make sure that your code works so outside in testing is part of what I",
    "start": "711480",
    "end": "719339"
  },
  {
    "text": "consider the component testing workflow and what that means is we're working from the outside of our application we're working from where consumers live",
    "start": "719339",
    "end": "726839"
  },
  {
    "text": "that could be your HTTP API it could be your SDK that you've built but where are",
    "start": "726839",
    "end": "734700"
  },
  {
    "text": "your consumers the thing that you deliver as a package as a thing how do",
    "start": "734700",
    "end": "739740"
  },
  {
    "text": "your consumers use it so we're working right from the outside all the way to the inside",
    "start": "739740",
    "end": "745079"
  },
  {
    "text": "now what what I found is the majority of time you can actually stay 100 on the outside which is great because you don't",
    "start": "745079",
    "end": "751019"
  },
  {
    "text": "need to be on the internals what we're doing is we're testing the inputs and outputs and I'm obviously",
    "start": "751019",
    "end": "757260"
  },
  {
    "text": "using the HTTP vernacular here because I'm guessing that I would say over 50",
    "start": "757260",
    "end": "764160"
  },
  {
    "text": "here write web applications whether it's apis all that kind of stuff",
    "start": "764160",
    "end": "769200"
  },
  {
    "text": "but that could be just using your apis for the inbound and outbound your sdks",
    "start": "769200",
    "end": "776300"
  },
  {
    "text": "what it means is we're testing from our consumers or users we're testing what our users will do",
    "start": "777000",
    "end": "783360"
  },
  {
    "text": "they will add something via a post they will go and get something fire get well",
    "start": "783360",
    "end": "788459"
  },
  {
    "text": "let's do the post and do the get then and make sure that works",
    "start": "788459",
    "end": "793519"
  },
  {
    "text": "but we're also testing specifically what the businesses are asked us for our users to be able to do",
    "start": "794160",
    "end": "799740"
  },
  {
    "text": "which means that we're really close to only delivering what we need to do now you might have delivered this this",
    "start": "799740",
    "end": "806279"
  },
  {
    "text": "class with 4 000 unit tests that has 15 methods on it and those methods are a",
    "start": "806279",
    "end": "811620"
  },
  {
    "text": "thing of beauty um and then you look at the actual usage in your application there's only one of",
    "start": "811620",
    "end": "817500"
  },
  {
    "text": "them used and they use one property from that object you've done too much running from the outside in means that",
    "start": "817500",
    "end": "823860"
  },
  {
    "text": "you're only doing the things that you need to actually build which means you go faster",
    "start": "823860",
    "end": "829399"
  },
  {
    "start": "829000",
    "end": "829000"
  },
  {
    "text": "so benefits business requirements first all of a sudden you've built you've",
    "start": "830100",
    "end": "836040"
  },
  {
    "text": "designed all your business requirements you've satisfied all your business requirements there's no need for that further layer of testing",
    "start": "836040",
    "end": "842160"
  },
  {
    "text": "if you've got tests that prove each individual step of your application you've done your business requirements",
    "start": "842160",
    "end": "849560"
  },
  {
    "text": "you end up with better readability because you're not using your internal business knowledge",
    "start": "849959",
    "end": "856380"
  },
  {
    "text": "you're not using a test that says transaction service returns approved",
    "start": "856380",
    "end": "862440"
  },
  {
    "text": "now what you're saying is the transaction was approved the transaction was cleared",
    "start": "862440",
    "end": "868019"
  },
  {
    "text": "authorization was failed you're using the business terms inside",
    "start": "868019",
    "end": "873120"
  },
  {
    "text": "of your test which means that they are more readable use English language and we'll go through how we can actually",
    "start": "873120",
    "end": "879240"
  },
  {
    "text": "write some of these tests using some business language",
    "start": "879240",
    "end": "883699"
  },
  {
    "text": "but we're also testing the whole application all of it",
    "start": "884279",
    "end": "890420"
  },
  {
    "text": "we're testing our serialization we're testing the way that our startup works",
    "start": "891000",
    "end": "896760"
  },
  {
    "text": "all of that stuff is being tested when we test from the outside all the way in",
    "start": "896760",
    "end": "903440"
  },
  {
    "text": "one of my favorites no stubs or mocks we don't need them because we're testing the real thing",
    "start": "903839",
    "end": "910639"
  },
  {
    "text": "my absolute favorite though you get 100 co-co coverage I know it's a vanity metric I do",
    "start": "912180",
    "end": "918300"
  },
  {
    "text": "but what's great about testing from the outside in and testing for your business requirements is if that code isn't",
    "start": "918300",
    "end": "923699"
  },
  {
    "text": "covered by any tests you can delete it because it's not used",
    "start": "923699",
    "end": "929579"
  },
  {
    "text": "if it if it is supposed to be used guess what you're missing a test and you need to add a test",
    "start": "929579",
    "end": "934980"
  },
  {
    "text": "so you get 100 code coverage it's awesome okay",
    "start": "934980",
    "end": "941220"
  },
  {
    "text": "a key part around using this approach for me and the teams that I've worked",
    "start": "941220",
    "end": "946320"
  },
  {
    "text": "with is making tests readable",
    "start": "946320",
    "end": "950660"
  },
  {
    "text": "now what do we mean by readable tests I mean test names that are descriptive",
    "start": "951720",
    "end": "957060"
  },
  {
    "text": "your compiler does not care how long your method name is",
    "start": "957060",
    "end": "963000"
  },
  {
    "text": "it really doesn't put actual English in there",
    "start": "963000",
    "end": "968220"
  },
  {
    "text": "tell me what that test is actually doing so that when I'm looking through those tests I can actually look at the test",
    "start": "968220",
    "end": "973800"
  },
  {
    "text": "name and say yeah that's what it's doing however you do that there's no hard and fast rule I'm not",
    "start": "973800",
    "end": "979500"
  },
  {
    "text": "going to say you need to segment it into three sections with an underscore generally how I do it but that doesn't matter as long as I read this about the",
    "start": "979500",
    "end": "986639"
  },
  {
    "text": "method name and it makes sense to me let's do that",
    "start": "986639",
    "end": "991860"
  },
  {
    "text": "we build things that are reusable we abstract context into reusable methods",
    "start": "991860",
    "end": "997139"
  },
  {
    "text": "in our tests that's something that I see every single person miss that I work with",
    "start": "997139",
    "end": "1004100"
  },
  {
    "text": "if you're writing tests you don't have to write a test that's 72 lines long and does everything",
    "start": "1004100",
    "end": "1009800"
  },
  {
    "text": "against the raw objects you don't need to do that abstract that away give it context give it a name say that I'm",
    "start": "1009800",
    "end": "1015860"
  },
  {
    "text": "going to go and get this thing not go to the object and grab that thing out",
    "start": "1015860",
    "end": "1021880"
  },
  {
    "text": "so we're abstracting away implementation that doesn't matter to us in our tests",
    "start": "1022399",
    "end": "1029418"
  },
  {
    "text": "it matters that we do it but it doesn't matter that somebody sees the 17 different lines of code that do that",
    "start": "1029419",
    "end": "1035360"
  },
  {
    "text": "particular thing maybe in one test it might be useful but it's not useful in all of them",
    "start": "1035360",
    "end": "1041000"
  },
  {
    "text": "foreign but we also use our domain language what the business understands what you're",
    "start": "1041000",
    "end": "1047720"
  },
  {
    "text": "understanding from your business requirements because if you think about what the business is doing you can then actually look at somebody goes it fails",
    "start": "1047720",
    "end": "1055220"
  },
  {
    "text": "when we do an authorization you don't have to understand how an authorization works in the system you can go through the tests and say where are the",
    "start": "1055220",
    "end": "1061039"
  },
  {
    "text": "authorization tests here with the authorization test oh and it fails under this scenario well this test says that",
    "start": "1061039",
    "end": "1066080"
  },
  {
    "text": "that's a specific thing great I can get right to the test I can write more tests and then I can bit fix it",
    "start": "1066080",
    "end": "1073400"
  },
  {
    "text": "the other thing is more tests not more asserts this is probably the most controversial part of it",
    "start": "1073400",
    "end": "1080539"
  },
  {
    "text": "people like to add 17 different asserts equivalent to should not be used ever",
    "start": "1080539",
    "end": "1085880"
  },
  {
    "text": "I'm sorry you should be writing more tests because then your test names are giving you the",
    "start": "1085880",
    "end": "1091340"
  },
  {
    "text": "context you've got specific tests that are failing that give you that context of why that thing failed",
    "start": "1091340",
    "end": "1096980"
  },
  {
    "text": "when you've got one test that has 17 asserts on the bottom of it guess what it stops at the top one",
    "start": "1096980",
    "end": "1103640"
  },
  {
    "text": "yes you can make it work with lots of money now but generally stops at the top one and you don't get all the other ones it'd be better if you saw all the tests",
    "start": "1103640",
    "end": "1110480"
  },
  {
    "text": "that are failing foreign and that's the elephant in the",
    "start": "1110480",
    "end": "1116600"
  },
  {
    "text": "room isn't this just right in bdd yes it is",
    "start": "1116600",
    "end": "1122780"
  },
  {
    "text": "it's not writing cucumber tests it's not right inspectful but yes we are defining Behavior",
    "start": "1122780",
    "end": "1128480"
  },
  {
    "text": "and the behavior is what's driving our design of our application but we're not writing given when lens",
    "start": "1128480",
    "end": "1135740"
  },
  {
    "text": "we're not building out a spec flow framework with steps that are only used once",
    "start": "1135740",
    "end": "1142059"
  },
  {
    "text": "what we're doing is the original definition of what bdd was about we're talking about the behavior of our",
    "start": "1142220",
    "end": "1147320"
  },
  {
    "text": "system and we're having that drive the design and drive the development so yes",
    "start": "1147320",
    "end": "1152539"
  },
  {
    "text": "yes it's bdd but not that bdd I have opinions about cucumber and spec",
    "start": "1152539",
    "end": "1159559"
  },
  {
    "start": "1157000",
    "end": "1157000"
  },
  {
    "text": "flow come around the booth afterwards we can rant okay",
    "start": "1159559",
    "end": "1164780"
  },
  {
    "text": "so we'll look at a bit of code now this is using.net",
    "start": "1164780",
    "end": "1170059"
  },
  {
    "text": "the same approach works with majority of languages that can run up an in-memory web server for your application",
    "start": "1170059",
    "end": "1177380"
  },
  {
    "text": "in this one we're using something called the web application Factory it's built into.net and allows you to",
    "start": "1177380",
    "end": "1183320"
  },
  {
    "text": "spin up your entire asp.net core site um and be able to hit the apis correctly",
    "start": "1183320",
    "end": "1192080"
  },
  {
    "text": "this is a test you might write which it's pretty simple it adds us to",
    "start": "1192080",
    "end": "1197600"
  },
  {
    "text": "do and make sure we get a valid request back so I send a valid to do item over",
    "start": "1197600",
    "end": "1203660"
  },
  {
    "text": "and I get an okay response pretty simple but what I've done here is I've defined",
    "start": "1203660",
    "end": "1209360"
  },
  {
    "text": "here there's a business requirement I need to add to this to our system great okay what does a to-do look like well",
    "start": "1209360",
    "end": "1214460"
  },
  {
    "text": "it's got title and description great I've wrote a test that will actually compile",
    "start": "1214460",
    "end": "1221419"
  },
  {
    "text": "whereas if you write this against actual typed code it's not going to compile first time",
    "start": "1221419",
    "end": "1226520"
  },
  {
    "text": "because those things don't exist and what we're doing is what we're doing is asserting that we get an okay back",
    "start": "1226520",
    "end": "1234260"
  },
  {
    "text": "because that's what the business requirement said I need to be able to add it to do they've not said they need to be able to get it one of my favorite",
    "start": "1234260",
    "end": "1240020"
  },
  {
    "text": "things about this approach is you can be really really pedantic with your BAS when they go I need to add a to-do it's",
    "start": "1240020",
    "end": "1245660"
  },
  {
    "text": "like great better to do that actually proves you can add it to do",
    "start": "1245660",
    "end": "1250760"
  },
  {
    "text": "I don't need a database don't need to store it I've got an endpoint that allows them to",
    "start": "1250760",
    "end": "1257059"
  },
  {
    "text": "add it's great which means that your Ba's start to get into this idea of thinking about exactly what it is that",
    "start": "1257059",
    "end": "1263299"
  },
  {
    "text": "they need and over time you build up that relationship with your Bas where they",
    "start": "1263299",
    "end": "1268400"
  },
  {
    "text": "actually think about what it is that they need so how do we make that a little bit",
    "start": "1268400",
    "end": "1274520"
  },
  {
    "start": "1273000",
    "end": "1273000"
  },
  {
    "text": "better well the first thing I talked about was removing implementation for that test I",
    "start": "1274520",
    "end": "1279620"
  },
  {
    "text": "don't care that there's a web application Factory that's pointless to my test",
    "start": "1279620",
    "end": "1285820"
  },
  {
    "text": "this is called evident testing so everything in that test should be relevant to the test",
    "start": "1285860",
    "end": "1293539"
  },
  {
    "text": "everything else should be abstracted away so obviously what I've done here is in",
    "start": "1293539",
    "end": "1299000"
  },
  {
    "text": "the background I've created the web application Factory and just made it accessible under a variable called API",
    "start": "1299000",
    "end": "1306080"
  },
  {
    "text": "which means that my test now if I say add to do with valid request well it just hits the API with a valid request",
    "start": "1306080",
    "end": "1314799"
  },
  {
    "text": "so that's already a little bit cleaner because there's a lot of implementation details that are not relevant so that's an easier test to read",
    "start": "1315620",
    "end": "1323059"
  },
  {
    "text": "but we can do better I'm sure I'm assuming that the majority",
    "start": "1323059",
    "end": "1328159"
  },
  {
    "text": "of people have heard of AAA testing arrange actor sir well let's spread this out a little bit",
    "start": "1328159",
    "end": "1334520"
  },
  {
    "text": "well we'll create a to-do item that's our arrange and then we'll act so",
    "start": "1334520",
    "end": "1340580"
  },
  {
    "text": "we'll throw the to-do item against the API and then we'll",
    "start": "1340580",
    "end": "1345620"
  },
  {
    "text": "assert so that's again making this just a little bit more readable but we can go",
    "start": "1345620",
    "end": "1351080"
  },
  {
    "text": "even further because for this test I don't need to",
    "start": "1351080",
    "end": "1357140"
  },
  {
    "start": "1353000",
    "end": "1353000"
  },
  {
    "text": "know what the parameters are of that to do item what I care about is I've got valid to",
    "start": "1357140",
    "end": "1363679"
  },
  {
    "text": "do item so I can abstract that away and give it an actual context of a name",
    "start": "1363679",
    "end": "1369860"
  },
  {
    "text": "that says go and get me a valid to do item because again the shape of that to-do",
    "start": "1369860",
    "end": "1374960"
  },
  {
    "text": "item isn't relevant to the test which means that all I'm doing is don't get a value to the item throw the value",
    "start": "1374960",
    "end": "1381020"
  },
  {
    "text": "to do item against that that's now something reusable so reusable action",
    "start": "1381020",
    "end": "1387159"
  },
  {
    "text": "because now I've got another test so now the Ba's come to me and said well",
    "start": "1387260",
    "end": "1393679"
  },
  {
    "start": "1388000",
    "end": "1388000"
  },
  {
    "text": "when I add the to-do I need a unique ID for it and that it needs to give me a valid ID back like great okay I've got",
    "start": "1393679",
    "end": "1400400"
  },
  {
    "text": "another requirement but you can see those first two lines are exactly the same",
    "start": "1400400",
    "end": "1405860"
  },
  {
    "text": "all I've done is I've got a different test name which tells me exactly what it is I'm trying to test",
    "start": "1405860",
    "end": "1411380"
  },
  {
    "text": "and I've got some different asserts does better ways to do this obviously",
    "start": "1411380",
    "end": "1416539"
  },
  {
    "text": "you could then start to abstract some of your asserts out of that make those asserts a little bit more and context",
    "start": "1416539",
    "end": "1422120"
  },
  {
    "text": "driven but what we're ending up with is something that's just a little bit",
    "start": "1422120",
    "end": "1429080"
  },
  {
    "text": "more easy to read a little bit more separated so that we can start to act on",
    "start": "1429080",
    "end": "1435260"
  },
  {
    "text": "individual tests and we can just add more tests we got so many times people saying I",
    "start": "1435260",
    "end": "1442039"
  },
  {
    "text": "don't want to add more tests because it's more work you know I've got to copy 70 lines of code well that's the wrong reason not to",
    "start": "1442039",
    "end": "1448760"
  },
  {
    "text": "write tests what you want to do is make it easy to write new tests what these approaches",
    "start": "1448760",
    "end": "1454760"
  },
  {
    "text": "give you is something really really easy in a framework that somebody says there's a bug in production",
    "start": "1454760",
    "end": "1459860"
  },
  {
    "text": "and what you've got is a Lego set of different tests that they go oh this is broken it's like right grab one",
    "start": "1459860",
    "end": "1466400"
  },
  {
    "text": "let's grab one oh yeah it's broken oh yeah oh I can fix that great fixed",
    "start": "1466400",
    "end": "1471799"
  },
  {
    "text": "job done and now I've got a test for it guess what you've done you've wrote a test first",
    "start": "1471799",
    "end": "1477440"
  },
  {
    "text": "and it failed and then you fixed it guess what that is it's tdd",
    "start": "1477440",
    "end": "1484539"
  },
  {
    "text": "okay so then we can go for persistent check so",
    "start": "1484760",
    "end": "1491120"
  },
  {
    "start": "1488000",
    "end": "1488000"
  },
  {
    "text": "now they've come back to us and said well when I add the to do I need to be able to get it back like great okay now I need a database",
    "start": "1491120",
    "end": "1497659"
  },
  {
    "text": "um but up until this point I didn't um like I say I love being pedantic um so this is now right we need to add a",
    "start": "1497659",
    "end": "1505280"
  },
  {
    "text": "database to this but again what we've done",
    "start": "1505280",
    "end": "1510320"
  },
  {
    "text": "is we've abstracted away context now if you read what this test does it",
    "start": "1510320",
    "end": "1515720"
  },
  {
    "text": "should be self-evident it says create a valid to do item",
    "start": "1515720",
    "end": "1521240"
  },
  {
    "text": "now you could say add a valid to do item to the API whatever makes context important to you",
    "start": "1521240",
    "end": "1527720"
  },
  {
    "text": "whatever makes that understandable to people but we've gone and created a to-do in the API",
    "start": "1527720",
    "end": "1534020"
  },
  {
    "text": "we've not gone to the database we're not understanding the scheme of the database and injecting something into the database we're using the API",
    "start": "1534020",
    "end": "1541159"
  },
  {
    "text": "here we're essentially calling into the previous tests that create a valid to do item",
    "start": "1541159",
    "end": "1548779"
  },
  {
    "text": "and what that's going to do is give us a valid to do item back and then we're going to go and get it from the API",
    "start": "1548779",
    "end": "1555380"
  },
  {
    "text": "now at no point here am I touching the database I'm not reaching into the bowels of my application and",
    "start": "1555380",
    "end": "1561200"
  },
  {
    "text": "understanding what columns exist in the database I don't need to",
    "start": "1561200",
    "end": "1566360"
  },
  {
    "text": "I can run this against the API because that's what my users are going to do if you've got users that are going into",
    "start": "1566360",
    "end": "1572779"
  },
  {
    "text": "your database and inserting to do items into your database you need to have a real think about your applications and",
    "start": "1572779",
    "end": "1577880"
  },
  {
    "text": "your users that isn't what they're doing so why is that what you're doing in your tests nobody cares when there's a bug in",
    "start": "1577880",
    "end": "1584659"
  },
  {
    "text": "production and you say well I've got a test that inserts into the database and make sure it comes back I just didn't test that I post it through the API and",
    "start": "1584659",
    "end": "1590900"
  },
  {
    "text": "it comes back nobody's going to take that as a valid excuse so why don't we have tests for that",
    "start": "1590900",
    "end": "1598419"
  },
  {
    "text": "okay recap a little bit about what we've tested there",
    "start": "1598700",
    "end": "1604159"
  },
  {
    "start": "1599000",
    "end": "1599000"
  },
  {
    "text": "was testing our Startup configuration how many people have created a service",
    "start": "1604159",
    "end": "1609380"
  },
  {
    "text": "class in.net and had their 4 000 unit tests against their service class and then forgot to",
    "start": "1609380",
    "end": "1615799"
  },
  {
    "text": "add it to dependency injection before it went into production you're all liars",
    "start": "1615799",
    "end": "1623679"
  },
  {
    "text": "at least in Oslo they were about 50 of truthful people um but that's what happens people will",
    "start": "1624320",
    "end": "1630380"
  },
  {
    "text": "write these tests and their unit tests pass great ship it and then it fails to",
    "start": "1630380",
    "end": "1635600"
  },
  {
    "text": "start in production and you're like you need to surpassing and what you've actually forgot to do is",
    "start": "1635600",
    "end": "1641299"
  },
  {
    "text": "just register that implementation against your service collection the other thing with testing is routing",
    "start": "1641299",
    "end": "1647600"
  },
  {
    "text": "we're testing that the API routes that you've put in there are correct",
    "start": "1647600",
    "end": "1653559"
  },
  {
    "text": "because that happens as well you get people who forget to put a guide identifier a good qualifier on some of",
    "start": "1653779",
    "end": "1661640"
  },
  {
    "text": "their names so the routing looks like it should work but it doesn't because another route takes priority over it",
    "start": "1661640",
    "end": "1669580"
  },
  {
    "text": "we're also testing serialization and deserialization because when you push stuff into your",
    "start": "1670400",
    "end": "1676940"
  },
  {
    "text": "application via the API it's going to do your Json serialization deserialization",
    "start": "1676940",
    "end": "1683120"
  },
  {
    "text": "now Pro tip on this one is when you're using this approach rewrite all of your classes in your test",
    "start": "1683120",
    "end": "1689360"
  },
  {
    "text": "assembly do not reuse the classes in your main assembly because what that gives you is if you",
    "start": "1689360",
    "end": "1696679"
  },
  {
    "text": "have to change the classes in your test assembly because of something that's breaking in your main assembly all of",
    "start": "1696679",
    "end": "1703100"
  },
  {
    "text": "your consumers are going to have to do the same and what you can actually do is put path approval checks inside of your commits",
    "start": "1703100",
    "end": "1710600"
  },
  {
    "text": "that says if somebody's changed this somebody else needs to look at it so what you've actually got is contract",
    "start": "1710600",
    "end": "1716480"
  },
  {
    "text": "testing built in to your application if somebody changes the serialization",
    "start": "1716480",
    "end": "1722539"
  },
  {
    "text": "method from camel case to Pascal case on the Json objects all your tests are",
    "start": "1722539",
    "end": "1727880"
  },
  {
    "text": "going to fail but if you use the same serialization classes then you've got a problem",
    "start": "1727880",
    "end": "1735260"
  },
  {
    "text": "we're also testing model validation required parameters regexes",
    "start": "1735260",
    "end": "1740539"
  },
  {
    "text": "because we're going through the full HTTP pipeline when we do it",
    "start": "1740539",
    "end": "1746120"
  },
  {
    "text": "we're testing things like database interaction if you're using Entity framework which this is an example that's up on GitHub",
    "start": "1746120",
    "end": "1753080"
  },
  {
    "text": "that you can go and have a look at it's using Entity Framework it's using SQL Lite don't use the",
    "start": "1753080",
    "end": "1758240"
  },
  {
    "text": "in-memory database because constraints don't work but if you're using sqlite you've got a database that you can use",
    "start": "1758240",
    "end": "1764539"
  },
  {
    "text": "so you're actually testing that the database interaction Works your foreign Keys work",
    "start": "1764539",
    "end": "1770860"
  },
  {
    "text": "we're testing selecting of columns from the database properly making sure that you're actually using",
    "start": "1771140",
    "end": "1776539"
  },
  {
    "text": "the right column names in your tests so in your code",
    "start": "1776539",
    "end": "1782980"
  },
  {
    "text": "but we're also testing the customer apis we're not testing our classes right down below we're not testing those",
    "start": "1783500",
    "end": "1789679"
  },
  {
    "text": "we're testing our apis the things our customers are going to use which means we're testing the business requirements",
    "start": "1789679",
    "end": "1796820"
  },
  {
    "text": "which means that we're testing only what needs to be tested I don't care that your class returns an",
    "start": "1796820",
    "end": "1802820"
  },
  {
    "text": "object with 17 properties on it if I only need one of them and we're testing all of that",
    "start": "1802820",
    "end": "1809779"
  },
  {
    "text": "and like I say if you do that you end up getting 100 Cook over it",
    "start": "1809779",
    "end": "1815740"
  },
  {
    "text": "now just before we move on to that one one of the main objections that I get",
    "start": "1816440",
    "end": "1822140"
  },
  {
    "text": "for this is it takes too long to run the tests because I'm running up an application so",
    "start": "1822140",
    "end": "1827960"
  },
  {
    "text": "it's going to take too long um normally that's people who haven't tried",
    "start": "1827960",
    "end": "1833299"
  },
  {
    "text": "it we have around two and a half thousand tests in that framework that run in",
    "start": "1833299",
    "end": "1839120"
  },
  {
    "text": "eight seconds so anybody who says this takes too long has not tried it and done it properly it",
    "start": "1839120",
    "end": "1846320"
  },
  {
    "text": "takes time to build Frameworks around it yes it will work out the box a lot of the",
    "start": "1846320",
    "end": "1852799"
  },
  {
    "text": "time you can reuse the web application from Factory you can use different contexts for your database so that you",
    "start": "1852799",
    "end": "1859340"
  },
  {
    "text": "get clean tests yes it takes a little bit of work it's not too slow though",
    "start": "1859340",
    "end": "1864679"
  },
  {
    "text": "if you're worried about your test taking eight seconds I'd ask you how long you deploy is taking",
    "start": "1864679",
    "end": "1870320"
  },
  {
    "text": "because I guarantee you it's not less than eight seconds but what can't we test this way",
    "start": "1870320",
    "end": "1878360"
  },
  {
    "start": "1875000",
    "end": "1875000"
  },
  {
    "text": "you know I've sold you the dream I'm sure you're all going to go away tomorrow or Monday and do all of this",
    "start": "1878360",
    "end": "1883399"
  },
  {
    "text": "stuff which is great but what can we test so we can't test things like how the",
    "start": "1883399",
    "end": "1890059"
  },
  {
    "text": "back end changes but the front end doesn't to the user cashing being one of the big examples of that if I'm doing a get",
    "start": "1890059",
    "end": "1896600"
  },
  {
    "text": "against my API how do I test that caching works because I get the same result no matter",
    "start": "1896600",
    "end": "1901700"
  },
  {
    "text": "what if I'm not getting the same result then my Test's broken I should get the same result",
    "start": "1901700",
    "end": "1907898"
  },
  {
    "text": "we can't test things like internal State changes like audit logs things like that",
    "start": "1908240",
    "end": "1915020"
  },
  {
    "text": "we can't test performance anybody who thinks they can test performance locally",
    "start": "1915020",
    "end": "1921679"
  },
  {
    "text": "come and see me I've got a sticker",
    "start": "1921679",
    "end": "1925059"
  },
  {
    "text": "you're also not testing integration with cloud services so you're not testing integration with Cosmos you're not into date the",
    "start": "1927020",
    "end": "1934640"
  },
  {
    "text": "integration with Dynamo things like that you can do that with this approach because you're working from the outside",
    "start": "1934640",
    "end": "1939980"
  },
  {
    "text": "in what you can do is you can switch out the implementation with the live implementation and rerun the tests",
    "start": "1939980",
    "end": "1946220"
  },
  {
    "text": "maybe if you've got branching structure something like that you run that test on your main branch when it's on when it's actually merged in but you don't run it",
    "start": "1946220",
    "end": "1953000"
  },
  {
    "text": "on every feature Branch maybe or the other way around but because you're running from the outside in it's literally a case of in",
    "start": "1953000",
    "end": "1959480"
  },
  {
    "text": "your service collection just replacing your implementation for I don't know Entity framework to something else",
    "start": "1959480",
    "end": "1968980"
  },
  {
    "text": "the other thing you can't test is configuration so you can't test that your deployment pipelines have put the right key Vault ID into the config so",
    "start": "1969559",
    "end": "1977000"
  },
  {
    "text": "that it can access the right keyboard ID or can we",
    "start": "1977000",
    "end": "1984100"
  },
  {
    "text": "and this is where we start to talk a little bit about observability",
    "start": "1984380",
    "end": "1989419"
  },
  {
    "text": "so all those things yes you can't really test them with the approach that we just talked about",
    "start": "1989419",
    "end": "1994880"
  },
  {
    "text": "but we can augment it a little bit in order to get some of those techniques in there",
    "start": "1994880",
    "end": "2000460"
  },
  {
    "text": "so I'm gonna have to talk a little bit about what observability is and this is the definition from our",
    "start": "2000460",
    "end": "2006880"
  },
  {
    "text": "co-founder who first coined the term observability in the context of software about six years ago",
    "start": "2006880",
    "end": "2012220"
  },
  {
    "text": "so it's about understanding and debugging on no no knowns it's about the ability to understand the inner state of",
    "start": "2012220",
    "end": "2019659"
  },
  {
    "text": "our system by asking questions from the outside that's the statement that I'm more",
    "start": "2019659",
    "end": "2025240"
  },
  {
    "text": "interested in we're writing observability into our applications",
    "start": "2025240",
    "end": "2031299"
  },
  {
    "text": "writing those Telemetry things so that we can understand our internal State when we're in production",
    "start": "2031299",
    "end": "2037240"
  },
  {
    "text": "if we're writing operable software in a way that means that we can use it in production well can we not do the same",
    "start": "2037240",
    "end": "2043240"
  },
  {
    "text": "thing with observability in our local environments and that's what I set out investigating",
    "start": "2043240",
    "end": "2049540"
  },
  {
    "text": "about a year ago and we came up with this concept I hate the fact that we use the term odd",
    "start": "2049540",
    "end": "2056800"
  },
  {
    "text": "um because what we actually turned it was observability during development which is just really confusing but the idea is",
    "start": "2056800",
    "end": "2063460"
  },
  {
    "text": "how do we use observability or more specifically tracing I wanted to call it tracing during development but",
    "start": "2063460",
    "end": "2068500"
  },
  {
    "text": "apparently tdd's taken and we're not allowed to just augment names and use them for something else",
    "start": "2068500",
    "end": "2073780"
  },
  {
    "text": "um but this whole Concepts don't call it odd call it whatever you want but it's the",
    "start": "2073780",
    "end": "2079540"
  },
  {
    "text": "idea of how do we bring observability into our applications and our local development folks",
    "start": "2079540",
    "end": "2084658"
  },
  {
    "text": "observability is an output it's a side effect of our application it's something that our application does",
    "start": "2084659",
    "end": "2091118"
  },
  {
    "text": "so why aren't we testing it if it's important to us why aren't we testing it",
    "start": "2091119",
    "end": "2097559"
  },
  {
    "text": "observability can detect things like parallelization you can know whether two things run in",
    "start": "2097900",
    "end": "2105099"
  },
  {
    "text": "parallel or run in series that's important in some scenarios",
    "start": "2105099",
    "end": "2111040"
  },
  {
    "text": "I have a few anecdotes that I can share offline but one that I can share online",
    "start": "2111040",
    "end": "2116440"
  },
  {
    "text": "is a friend of mine went into an organization and they had a problem that the startup",
    "start": "2116440",
    "end": "2124119"
  },
  {
    "text": "of their desktop application was taking 30 seconds and he went in put some open Telemetry",
    "start": "2124119",
    "end": "2132040"
  },
  {
    "text": "and tracing data in there and said well when you do this grpc call you're",
    "start": "2132040",
    "end": "2138520"
  },
  {
    "text": "initiating the connection for everyone so it's initiating the connection 20 000 times it's like no no it opens the",
    "start": "2138520",
    "end": "2144640"
  },
  {
    "text": "connection once and then just sends all the data over he's like it doesn't that's not what it does it's like no no",
    "start": "2144640",
    "end": "2149920"
  },
  {
    "text": "it absolutely does and it's like but the computer's telling me that it doesn't and computers don't lie they only tell you exactly what they're doing",
    "start": "2149920",
    "end": "2157300"
  },
  {
    "text": "um and then they went in and went oh oh yeah it's not um and turned 20 seconds into 200",
    "start": "2157300",
    "end": "2163720"
  },
  {
    "text": "milliseconds um just by three lines of code of reuse the connection so observability can tell you these",
    "start": "2163720",
    "end": "2170380"
  },
  {
    "text": "things and they're important in a lot of applications the other thing it can do is detect code",
    "start": "2170380",
    "end": "2176800"
  },
  {
    "text": "paths it can detect if you go through say caching if the caching code is called",
    "start": "2176800",
    "end": "2183700"
  },
  {
    "text": "you can tell if this was a cached version or a not cache version",
    "start": "2183700",
    "end": "2189040"
  },
  {
    "text": "but the key is if it's important to you locally for you to be able to write a test on your class about it it's likely",
    "start": "2189040",
    "end": "2196180"
  },
  {
    "text": "going to be important when it gets onto production and it goes wrong it's likely going to be important that",
    "start": "2196180",
    "end": "2202180"
  },
  {
    "text": "you know that that's where it went wrong in your application what you really want is when somebody sends you a book",
    "start": "2202180",
    "end": "2208660"
  },
  {
    "text": "what you want them to do is say it was on this line here and it sent the wrong information all right I'll change that",
    "start": "2208660",
    "end": "2214119"
  },
  {
    "text": "line there and commit it and push it like that that's a really good QA who can come to you and say it's this line",
    "start": "2214119",
    "end": "2219940"
  },
  {
    "text": "of code can you fix this line of code observability done properly with tracing",
    "start": "2219940",
    "end": "2225339"
  },
  {
    "text": "causality all of those kind of things can really show you internally in the application what it does",
    "start": "2225339",
    "end": "2231280"
  },
  {
    "text": "so if that's important why aren't we bringing that into our testing why aren't we bringing that into our",
    "start": "2231280",
    "end": "2236440"
  },
  {
    "text": "application flows so let's take a look at some caching",
    "start": "2236440",
    "end": "2242619"
  },
  {
    "start": "2239000",
    "end": "2239000"
  },
  {
    "text": "code for any future employers out there that may look at hiring me I don't write",
    "start": "2242619",
    "end": "2249579"
  },
  {
    "text": "caching code like this this is an example it's very basic I wouldn't write it like",
    "start": "2249579",
    "end": "2256540"
  },
  {
    "text": "this um so to give me an idea of what this is doing for those that don't read c-sharp",
    "start": "2256540",
    "end": "2261880"
  },
  {
    "text": "which I'm hoping is a minority what we're doing is we're setting a cache key",
    "start": "2261880",
    "end": "2267839"
  },
  {
    "text": "we're using a memory cache here to try and get a list of items list of to-do",
    "start": "2267839",
    "end": "2274599"
  },
  {
    "text": "items using that cache key if that didn't return anything then we're going",
    "start": "2274599",
    "end": "2280420"
  },
  {
    "text": "to go to the database and go and get the to-do items and then we're going to return the ones from the database",
    "start": "2280420",
    "end": "2285579"
  },
  {
    "text": "instead the methodology there is pretty sound that's how you do a lot of things in",
    "start": "2285579",
    "end": "2291280"
  },
  {
    "text": "applications you'd have sliding expirations all that kind of stuff but that's pretty much what a cash code",
    "start": "2291280",
    "end": "2297700"
  },
  {
    "text": "would do now the thing is both the line that says return to-do list",
    "start": "2297700",
    "end": "2303520"
  },
  {
    "text": "and the one that says return all to do's they're both returning the same information",
    "start": "2303520",
    "end": "2309640"
  },
  {
    "text": "so external to the application I don't know whether it's actually got the data from the cache or I've got it from the",
    "start": "2309640",
    "end": "2315820"
  },
  {
    "text": "database so when I write my test",
    "start": "2315820",
    "end": "2321940"
  },
  {
    "text": "and write my test that says well the first call needs to come from the database I don't know how to write that because",
    "start": "2321940",
    "end": "2328599"
  },
  {
    "text": "I've got nothing to assert against whether it comes from the database or it",
    "start": "2328599",
    "end": "2333820"
  },
  {
    "text": "comes from the cache it's going to be the same so how do I do it yes I could write headers to it but those can be messed up",
    "start": "2333820",
    "end": "2340900"
  },
  {
    "start": "2340000",
    "end": "2340000"
  },
  {
    "text": "and this is where something called open Telemetry comes in so open Telemetry is the number two",
    "start": "2340900",
    "end": "2346900"
  },
  {
    "text": "projects to come out of the cloud compute native Cloud native compute Foundation behind this little small project they",
    "start": "2346900",
    "end": "2354160"
  },
  {
    "text": "did called kubernetes don't know whether you've heard of it um but it's the number two projects come",
    "start": "2354160",
    "end": "2359740"
  },
  {
    "text": "out there it's becoming the de facto standard in How We Do Telemetry signaling Telemetry signaling being at",
    "start": "2359740",
    "end": "2365740"
  },
  {
    "text": "the moment tracing metrics and logs",
    "start": "2365740",
    "end": "2370859"
  },
  {
    "text": "it's completely open source it's run by a lot of the vendors the vendors have been building this as an",
    "start": "2371140",
    "end": "2377320"
  },
  {
    "text": "open source project but one of the really interesting things about it is something called the in-memory exporter now what that means",
    "start": "2377320",
    "end": "2384040"
  },
  {
    "text": "is and especially in the.net world your production application does not need to depend on open telemetry",
    "start": "2384040",
    "end": "2390880"
  },
  {
    "text": "in order to get Telemetry out because a lot of organizations will go",
    "start": "2390880",
    "end": "2395980"
  },
  {
    "text": "we're not we're not ready to take open Telemetry into our production application yeah there's some problems we don't really want to do that yet",
    "start": "2395980",
    "end": "2404400"
  },
  {
    "text": "but because net uses something called activity activity has been built into.net since",
    "start": "2404619",
    "end": "2411099"
  },
  {
    "text": "it's either done at 2 or 3.5 and it's changed a little bit since but it's part of the BCL",
    "start": "2411099",
    "end": "2416680"
  },
  {
    "text": "so you can instrument your code with activity without thinking about open telemetry",
    "start": "2416680",
    "end": "2424599"
  },
  {
    "text": "and then you can actually bring open Telemetry into your test because largely organizations don't care what Frameworks",
    "start": "2424599",
    "end": "2430000"
  },
  {
    "text": "you bring into tests they care about what's deployed to production and what we're doing here is we're",
    "start": "2430000",
    "end": "2435579"
  },
  {
    "text": "creating a tracer provider inside of our web application Factory",
    "start": "2435579",
    "end": "2441700"
  },
  {
    "text": "not inside of our code not touching the production code here but in all we're doing here is saying",
    "start": "2441700",
    "end": "2448960"
  },
  {
    "text": "listen to this particular activity source bringing the asp.net core",
    "start": "2448960",
    "end": "2454300"
  },
  {
    "text": "instrumentation which will give us spans for requests and any spans that are created any",
    "start": "2454300",
    "end": "2460119"
  },
  {
    "text": "activities that are emitted from your application stick them in this list",
    "start": "2460119",
    "end": "2465520"
  },
  {
    "text": "so we've got a list now got a list of individual spans that have",
    "start": "2465520",
    "end": "2470680"
  },
  {
    "text": "been created as part of our test pretty cool and then what we do",
    "start": "2470680",
    "end": "2477880"
  },
  {
    "text": "is we add it to our services because when you're using the custom web application Factory",
    "start": "2477880",
    "end": "2484720"
  },
  {
    "text": "you can add additional things to your service collection that are only present when your tests wrong",
    "start": "2484720",
    "end": "2490900"
  },
  {
    "text": "now because I've added this as a signaltern like that that means it's going to start listening to all of the activities that are run",
    "start": "2490900",
    "end": "2497140"
  },
  {
    "text": "and created during my tests so that's pretty interesting we can do that another Pro tip when you're writing",
    "start": "2497140",
    "end": "2504220"
  },
  {
    "text": "your custom web application tests run this clear providers it'll save you a ton of time in your",
    "start": "2504220",
    "end": "2511060"
  },
  {
    "text": "tests because if you don't and you've accidentally enabled console logging your tests take a hell of a lot longer",
    "start": "2511060",
    "end": "2516460"
  },
  {
    "text": "because it outputs all of your logs to the console which takes a lot more time",
    "start": "2516460",
    "end": "2521740"
  },
  {
    "text": "a bonus nothing to do with what we're talking here I don't charge extra for that just to be",
    "start": "2521740",
    "end": "2527140"
  },
  {
    "text": "clear so what does our code look like now well we wrap",
    "start": "2527140",
    "end": "2532720"
  },
  {
    "text": "our database call inside of a span we get the added",
    "start": "2532720",
    "end": "2537880"
  },
  {
    "text": "benefit that we now get to know how long it takes to get things from the database that's something that's interesting in",
    "start": "2537880",
    "end": "2543280"
  },
  {
    "text": "our application it's not something we're going to test against because we can't test performance locally it's pointless",
    "start": "2543280",
    "end": "2549220"
  },
  {
    "text": "because we're running against an in-memory SQL and SQL light will be a lot faster or slower depending on what you're doing",
    "start": "2549220",
    "end": "2555460"
  },
  {
    "text": "we're going to wrap it in there and give it a specific name that's it it's not particularly complicated but",
    "start": "2555460",
    "end": "2561579"
  },
  {
    "text": "now what we can do is in our test we can say",
    "start": "2561579",
    "end": "2568180"
  },
  {
    "text": "well find all of those collected spans that have been created",
    "start": "2568180",
    "end": "2573280"
  },
  {
    "text": "and tell me did it contain one that had get to do this from the DB well this",
    "start": "2573280",
    "end": "2578619"
  },
  {
    "text": "test is making sure that the first cold calls the database I actually wouldn't write this test because that's pointless",
    "start": "2578619",
    "end": "2585160"
  },
  {
    "text": "because we know that the first test can will only pass if it's got data so kind of pointless test this one",
    "start": "2585160",
    "end": "2592000"
  },
  {
    "text": "the second test though is the inverse of that well what we want to do is make sure",
    "start": "2592000",
    "end": "2598300"
  },
  {
    "text": "that the second cold does not touch the database and what we can do there is we'll run",
    "start": "2598300",
    "end": "2605140"
  },
  {
    "text": "our first get clear out all the spans run our second get and make sure we",
    "start": "2605140",
    "end": "2610960"
  },
  {
    "text": "don't have something called that so now what we've got is a really",
    "start": "2610960",
    "end": "2617619"
  },
  {
    "text": "actually useful test that tells us whether it's going to go to the cache or not or is whether it's more specifically",
    "start": "2617619",
    "end": "2623020"
  },
  {
    "text": "whether it's going to call the database or not to get that data obviously very very simplistic test here",
    "start": "2623020",
    "end": "2630280"
  },
  {
    "text": "there's a lot of nuance that will be in your application that you'll need to throw into that do you use I distributed cash and you",
    "start": "2630280",
    "end": "2637119"
  },
  {
    "text": "have to use the in-memory version of distributed cache you have to make sure those things are serializable",
    "start": "2637119",
    "end": "2642339"
  },
  {
    "text": "that's another thing that people miss when they try and use I distributed cash which needs serializable entities",
    "start": "2642339",
    "end": "2647740"
  },
  {
    "text": "whereas in-memory cache does not and that fails when you put the actual real reddish cache in place but it",
    "start": "2647740",
    "end": "2654640"
  },
  {
    "text": "worked fine in the unit tests okay",
    "start": "2654640",
    "end": "2660520"
  },
  {
    "start": "2659000",
    "end": "2659000"
  },
  {
    "text": "now the other ones that we did we started to refactor for readability",
    "start": "2660520",
    "end": "2665818"
  },
  {
    "text": "so now I can take that first test where it calls the database I can make sure well Collective spans",
    "start": "2666460",
    "end": "2673540"
  },
  {
    "text": "has span with name I've got a really readable test that tells me that I could even go",
    "start": "2673540",
    "end": "2680260"
  },
  {
    "text": "further and have a static list a constants of all my spam names",
    "start": "2680260",
    "end": "2686560"
  },
  {
    "text": "because that might be important that they remain consistent throughout releases you can have them in shared",
    "start": "2686560",
    "end": "2691720"
  },
  {
    "text": "libraries for instance that you can use and that could actually be referenced in a constant there's lots of stuff that",
    "start": "2691720",
    "end": "2698079"
  },
  {
    "text": "you can do but the main thing is look at your tests make sure they're readable make sure they're testing the things that are important",
    "start": "2698079",
    "end": "2705539"
  },
  {
    "start": "2704000",
    "end": "2704000"
  },
  {
    "text": "now the other thing I said is we could talk about parallel processing we can make sure that these things are run in parallel",
    "start": "2706119",
    "end": "2712720"
  },
  {
    "text": "that's something that you can test with observability much much harder to test when you're running actual code even",
    "start": "2712720",
    "end": "2719740"
  },
  {
    "text": "when you're running code inside of a unit test where you're just test in a class it's still hard to test parallelization",
    "start": "2719740",
    "end": "2726099"
  },
  {
    "text": "but what we can do with this is say well get me the spans with this name so start",
    "start": "2726099",
    "end": "2731200"
  },
  {
    "text": "get bad name but hey ho and then get me all of the spans that",
    "start": "2731200",
    "end": "2737680"
  },
  {
    "text": "say get from DB so maybe in this example what we've got is it's actually doing seven or eight calls to the database but",
    "start": "2737680",
    "end": "2743380"
  },
  {
    "text": "we don't want to run them in series we want to make sure that it runs all five of them at the same time because that's quicker",
    "start": "2743380",
    "end": "2749260"
  },
  {
    "text": "and then we can say well make sure that every single one of our processing spans has a parent ID of our new span you",
    "start": "2749260",
    "end": "2756099"
  },
  {
    "text": "could do things like make sure that none of the spans start after the other spans",
    "start": "2756099",
    "end": "2762040"
  },
  {
    "text": "there's lots of ways to do this that allow you to be able to see into",
    "start": "2762040",
    "end": "2767920"
  },
  {
    "text": "your code and see what it's doing so a couple of do's and don'ts",
    "start": "2767920",
    "end": "2776800"
  },
  {
    "text": "use it for things you care about in production use it to test things that are important",
    "start": "2776800",
    "end": "2783520"
  },
  {
    "text": "don't use it to test things that are not important",
    "start": "2783520",
    "end": "2788338"
  },
  {
    "text": "do make sure that you're thinking about the data on your spans that might be important to you take the",
    "start": "2790660",
    "end": "2796900"
  },
  {
    "text": "first two into account but you can test against some decent data in your spans",
    "start": "2796900",
    "end": "2802180"
  },
  {
    "text": "don't check the database was called directly don't test your query don't",
    "start": "2802180",
    "end": "2807700"
  },
  {
    "text": "test that it hit the database with select star from users that's not what it's for that's abusing",
    "start": "2807700",
    "end": "2814480"
  },
  {
    "text": "the system don't abuse the system don't check that an individual method",
    "start": "2814480",
    "end": "2820420"
  },
  {
    "text": "was called don't create a span for every method and then go in and say did it cull this",
    "start": "2820420",
    "end": "2826599"
  },
  {
    "text": "particular algorithm method that's not important to your test that's how we make things brittle",
    "start": "2826599",
    "end": "2834240"
  },
  {
    "text": "now the other thing that we can do once we've got all of this in place we're using open Telemetry in our tests",
    "start": "2835060",
    "end": "2842319"
  },
  {
    "text": "we're using activities in our code what we can then do is we can use",
    "start": "2842319",
    "end": "2848740"
  },
  {
    "text": "tracing tools to start to understand our applications better during our test Cycles",
    "start": "2848740",
    "end": "2855700"
  },
  {
    "text": "so what we can do is we can take all of our test runs and we can send them into something like",
    "start": "2855700",
    "end": "2861339"
  },
  {
    "text": "honeycomb it's not specific to Honeycomb but you can we can send all of those in and we can say well how many spans were created",
    "start": "2861339",
    "end": "2868060"
  },
  {
    "text": "during that test how many spans were created during the next test over that whole run how long did the whole run",
    "start": "2868060",
    "end": "2873819"
  },
  {
    "text": "take what was the average time for the test things that you used to get out of the box when you were using things like team",
    "start": "2873819",
    "end": "2880060"
  },
  {
    "text": "City and things like that when you move into using say GitHub a lot of those tools are lost",
    "start": "2880060",
    "end": "2885579"
  },
  {
    "text": "but you can use that now the other thing is that because we're producing traces",
    "start": "2885579",
    "end": "2890800"
  },
  {
    "text": "inside of our application now and we're using open telemetry we can actually see the traces and visualize",
    "start": "2890800",
    "end": "2897099"
  },
  {
    "text": "the traces in your Trace tool so this is an example of that does not",
    "start": "2897099",
    "end": "2903819"
  },
  {
    "text": "call database test what I can do is I can look at that and say well what is the shape of the trace",
    "start": "2903819",
    "end": "2911980"
  },
  {
    "text": "for that particular thing when I ran the test now if you're using these when you go to production",
    "start": "2911980",
    "end": "2919240"
  },
  {
    "text": "if you use the same tools in production for tracing your production application as you are using",
    "start": "2919240",
    "end": "2925480"
  },
  {
    "text": "locally you can start to see what that should look like in production and when you look at it and go well no no no that's",
    "start": "2925480",
    "end": "2932560"
  },
  {
    "text": "that's not how it should work you're getting more knowledge about how your system works",
    "start": "2932560",
    "end": "2940200"
  },
  {
    "start": "2942000",
    "end": "2942000"
  },
  {
    "text": "so some some interesting reading on stuff",
    "start": "2943119",
    "end": "2948540"
  },
  {
    "text": "the repository is there Martin JT to do odd",
    "start": "2948540",
    "end": "2954160"
  },
  {
    "text": "a couple of interesting other talks to follow on tdd Revisited is a talk that in Cooper",
    "start": "2954160",
    "end": "2961839"
  },
  {
    "text": "did for the first virtual NDC back in 2021",
    "start": "2961839",
    "end": "2967599"
  },
  {
    "text": "um which a lot of the concepts that I've come up with about how we decompose tdd into something that's useful come from",
    "start": "2967599",
    "end": "2973119"
  },
  {
    "text": "talking to Ian and that talk it's a really really interesting talk about what tdd is and is not",
    "start": "2973119",
    "end": "2980200"
  },
  {
    "text": "the other one is David Whitney talking about writing tests that don't suck which is a really interesting talk about",
    "start": "2980200",
    "end": "2986740"
  },
  {
    "text": "the refactoring and naming stuff that we're talking about and extracting context run from a JavaScript context",
    "start": "2986740",
    "end": "2993099"
  },
  {
    "text": "but it's exactly the same context me and David worked on this for the last two years so all of those concepts are very",
    "start": "2993099",
    "end": "2999160"
  },
  {
    "text": "very the same um okay sales spiel",
    "start": "2999160",
    "end": "3005280"
  },
  {
    "text": "we have a free forever account with honeycomb so the things that we were talking about where you put open Telemetry in the end of your application",
    "start": "3005280",
    "end": "3012060"
  },
  {
    "text": "you can actually send all of that to Honeycomb for free for yourself locally if you want to",
    "start": "3012060",
    "end": "3017880"
  },
  {
    "text": "we allow 20 million events to come through US per month for free forever if you're writing more than 20 million",
    "start": "3017880",
    "end": "3024720"
  },
  {
    "text": "spans in your tests per month let's talk because I'd like to know what you're doing",
    "start": "3024720",
    "end": "3030060"
  },
  {
    "text": "um we also have we wrote the book on observability engineering it's free to download which you can get on the",
    "start": "3030060",
    "end": "3036359"
  },
  {
    "text": "website which is not honeycomb at all this is all about how observability",
    "start": "3036359",
    "end": "3041640"
  },
  {
    "text": "Works what observability is and there is a full chapter on odd in there",
    "start": "3041640",
    "end": "3048119"
  },
  {
    "text": "but yeah that's me I'm happy to take questions um we have a ton of stickers",
    "start": "3048119",
    "end": "3054119"
  },
  {
    "text": "um we had a thing where people said oh we'll do a sticker exchange and see whose stickers are best and my response",
    "start": "3054119",
    "end": "3059400"
  },
  {
    "text": "was what's it like to lose um all the best stickers are on our booth out there come and take some",
    "start": "3059400",
    "end": "3064559"
  },
  {
    "text": "stickers or come talk to me you don't have to talk to me just take the stickers that's fine um but yeah I'll take questions now but",
    "start": "3064559",
    "end": "3071280"
  },
  {
    "text": "come by the booth come say hello if you want to demo if honeycomb well happy to do it [Applause]",
    "start": "3071280",
    "end": "3081040"
  },
  {
    "text": "oh and also please do do the ratings outside it really helps me if there's specific feedback of stuff you wanted to",
    "start": "3083220",
    "end": "3089339"
  },
  {
    "text": "see on and didn't that kind of stuff do tell me ping me on Twitter it all helps other people who are seeing these",
    "start": "3089339",
    "end": "3095040"
  },
  {
    "text": "presentations to make them better do it for me do it for all the other speakers that you're going to go and see as well",
    "start": "3095040",
    "end": "3101599"
  }
]