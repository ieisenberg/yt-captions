[
  {
    "start": "0",
    "end": "11000"
  },
  {
    "text": "I are gonna start good morning everybody thank you very much for coming along my",
    "start": "9809",
    "end": "15360"
  },
  {
    "start": "11000",
    "end": "11000"
  },
  {
    "text": "name is Brian Hogan can I get a little show of hands of people who have heard",
    "start": "15360",
    "end": "20970"
  },
  {
    "text": "of poly before this is so much better than previous conferences I've been to",
    "start": "20970",
    "end": "26610"
  },
  {
    "text": "and then of you that have heard of it how many are using it okay a few less",
    "start": "26610",
    "end": "32099"
  },
  {
    "text": "and then I'm who's using retries fallbacks fewer circuit breakers one Ian",
    "start": "32099",
    "end": "43370"
  },
  {
    "text": "bulkhead isolation no hands yeah so that's kind of what we see it's",
    "start": "43370",
    "end": "48960"
  },
  {
    "text": "mostly retries in fallbacks that's good to know I'm going to have my",
    "start": "48960",
    "end": "54179"
  },
  {
    "text": "Twitter handle up here if there's time at the end I'm very happy to take questions from the audience or if you",
    "start": "54179",
    "end": "59969"
  },
  {
    "text": "don't feel like it you can tweet them at me if I can't answer them during the session I will happily look at it later",
    "start": "59969",
    "end": "65010"
  },
  {
    "text": "in the day so poly for most of you who",
    "start": "65010",
    "end": "71550"
  },
  {
    "text": "are aware of it is an answer to a problem that you have but those of you that haven't heard of poly it may well",
    "start": "71550",
    "end": "77159"
  },
  {
    "text": "be the solution to a problem you're not aware of so failures happen that can",
    "start": "77159",
    "end": "85860"
  },
  {
    "text": "happen to any application at any time and they will happen to your application",
    "start": "85860",
    "end": "90979"
  },
  {
    "text": "so what do you do when something goes wrong many of us are working on applications that rely on connectivity",
    "start": "90979",
    "end": "97380"
  },
  {
    "text": "but connectivity has never ever been a guarantee the old adage the network is not reliable we also have to deal with",
    "start": "97380",
    "end": "104729"
  },
  {
    "text": "software errors some of us have to deal with things like local network outages",
    "start": "104729",
    "end": "109740"
  },
  {
    "text": "and of course applications are now spread out across the internet and you",
    "start": "109740",
    "end": "115560"
  },
  {
    "text": "have to deal again with unreliable connections around the world any problem",
    "start": "115560",
    "end": "121109"
  },
  {
    "text": "along the way could lead to your request failing if you're working on mobile applications this is especially true so",
    "start": "121109",
    "end": "130710"
  },
  {
    "text": "what can you do if there's transient fault or a longer outage in our system that you rely on you could do this you",
    "start": "130710",
    "end": "140190"
  },
  {
    "start": "137000",
    "end": "137000"
  },
  {
    "text": "could drop a yellow screen and death this might be okay if your application if it doesn't matter to application that",
    "start": "140190",
    "end": "146510"
  },
  {
    "text": "you lose one request this might be unacceptable if you're working in a banking scenario but this might also",
    "start": "146510",
    "end": "152840"
  },
  {
    "text": "lead to cascading failures if you have more and more failures question becomes",
    "start": "152840",
    "end": "160010"
  },
  {
    "text": "what can you do about a failure a trapper to give you a transient fault and retrying is the usual answer if",
    "start": "160010",
    "end": "169430"
  },
  {
    "text": "let's say you're building your own little application and it depends on a remote application retrying would look a",
    "start": "169430",
    "end": "176330"
  },
  {
    "text": "little like this you make your first request and you got to fail your back or",
    "start": "176330",
    "end": "182000"
  },
  {
    "text": "you don't get a response so you retry and you get another failure",
    "start": "182000",
    "end": "187550"
  },
  {
    "text": "and you retry and you get another failure and then finally you get back",
    "start": "187550",
    "end": "196280"
  },
  {
    "text": "the response you were hoping for you could keep at that an infinite number of times but usually you are limited so how",
    "start": "196280",
    "end": "205700"
  },
  {
    "text": "would you program something like that and I've asked this is this is a good audience you're all using poly so you",
    "start": "205700",
    "end": "211340"
  },
  {
    "text": "know how to do it but when I've asked this at conferences where people are not using poly the answer usually looks",
    "start": "211340",
    "end": "217100"
  },
  {
    "text": "something like this if you're making a request with a HTTP client you do it as normal you put a for loop around us",
    "start": "217100",
    "end": "226180"
  },
  {
    "text": "retrying two three four five times whatever suits you but you might get",
    "start": "226180",
    "end": "232280"
  },
  {
    "text": "exceptions so you need a try-catch along the way you may have to catch multiple types of exceptions or you might do a",
    "start": "232280",
    "end": "238820"
  },
  {
    "text": "catch-all with plain old exception and then you have to break out of that loop",
    "start": "238820",
    "end": "243830"
  },
  {
    "text": "if you get a successful response people have tried to convince me that this is",
    "start": "243830",
    "end": "249530"
  },
  {
    "text": "good enough and this is usable and they're happy to do it but it's fragile it's very very hard to use in multiple",
    "start": "249530",
    "end": "256459"
  },
  {
    "text": "locations it's difficult to change it's hard to customize and of course it's not",
    "start": "256459",
    "end": "263870"
  },
  {
    "text": "what I would recommend and here's the answer Pali Pali is a",
    "start": "263870",
    "end": "270490"
  },
  {
    "text": "resilience framework for dotnet and if you are using Microsoft technologies it is the only game in town if any of you",
    "start": "270490",
    "end": "278259"
  },
  {
    "text": "have worked in the Java world you may have come across history history has some of the features that Polly has and",
    "start": "278259",
    "end": "284469"
  },
  {
    "text": "has a few extra ones and Polly has some more features that history does not have",
    "start": "284469",
    "end": "290490"
  },
  {
    "text": "Polly helps protect your applications from failure but this has a knock-on effect on downstream applications that",
    "start": "290490",
    "end": "297400"
  },
  {
    "text": "are calling you and on upstream applications that you depend on it helps",
    "start": "297400",
    "end": "303219"
  },
  {
    "text": "all of them to remain stable when faced with transient faults longer outages excess load or other problems",
    "start": "303219",
    "end": "312300"
  },
  {
    "text": "Polly is able to do this true things like retries wait and retries circuit",
    "start": "312509",
    "end": "318009"
  },
  {
    "text": "breakers I mentioned and a few other features Polly was started in 2013 by",
    "start": "318009",
    "end": "324430"
  },
  {
    "text": "Michael Wolff Dhin Dhin but more recently has been taken over by the app-v next group and I think a few of",
    "start": "324430",
    "end": "329949"
  },
  {
    "text": "you saw how frankenz presentation yesterday so Carol is part of that in the last few years an English gentleman",
    "start": "329949",
    "end": "336159"
  },
  {
    "text": "team named Dylan Rison Berger has been leading the project and doing an enormous amount of development the Polly",
    "start": "336159",
    "end": "343779"
  },
  {
    "text": "project is active on github slack they have their own blog and Dylan has been on both my own podcast and a little more",
    "start": "343779",
    "end": "350649"
  },
  {
    "text": "recently on the dotnet rocks podcast",
    "start": "350649",
    "end": "354810"
  },
  {
    "text": "Polly works in all platform to dotnet works on so think of how this might",
    "start": "355889",
    "end": "361180"
  },
  {
    "text": "applic help you up in mobile applications embedded applications or IOT for connectivity is more difficult",
    "start": "361180",
    "end": "368580"
  },
  {
    "text": "I'm going to show you all the code that you need at the point of making a",
    "start": "369539",
    "end": "375159"
  },
  {
    "text": "request with Polly so forget about that for loop forget about the try-catch",
    "start": "375159",
    "end": "380529"
  },
  {
    "text": "forget about the break this is all you need to make a reliable request I'm",
    "start": "380529",
    "end": "388569"
  },
  {
    "text": "gonna use my little pointer so you have your HTTP client making a request to remote endpoint and you make the call",
    "start": "388569",
    "end": "394409"
  },
  {
    "text": "inside a policy that you've defined and the policy is a Polly",
    "start": "394409",
    "end": "399950"
  },
  {
    "text": "try policy again at the point of the request that is all the extra code you",
    "start": "399950",
    "end": "405080"
  },
  {
    "text": "need if you are pre dotnet core 2.1 you do need to define the policy ahead of",
    "start": "405080",
    "end": "411860"
  },
  {
    "text": "time but you do that once for your application what this policy says is",
    "start": "411860",
    "end": "417170"
  },
  {
    "text": "that it works with HTTP response messages and if the status code you get",
    "start": "417170",
    "end": "423890"
  },
  {
    "text": "back is anything other than a success code or there was an exception",
    "start": "423890",
    "end": "429980"
  },
  {
    "text": "you read throught retry up to three times you still get back at HTTP",
    "start": "429980",
    "end": "436820"
  },
  {
    "text": "response message it doesn't interfere with what you're getting back you don't have to unwrap anything unbox anything",
    "start": "436820",
    "end": "442700"
  },
  {
    "text": "this is easy to reuse and it's very easy to change and pass around but if you're",
    "start": "442700",
    "end": "451040"
  },
  {
    "text": "on dotnet core 2.1 that's all you need at the point of making a request notice",
    "start": "451040",
    "end": "458870"
  },
  {
    "text": "how there is no reference to poly there's no execute async you user HTTP client as though poly wasn't there you",
    "start": "458870",
    "end": "466220"
  },
  {
    "text": "don't even have a using statement in that class you don't have to pass the",
    "start": "466220",
    "end": "473300"
  },
  {
    "text": "policies around and this is all thanks to HTTP client Factory I'm gonna have a",
    "start": "473300",
    "end": "478510"
  },
  {
    "text": "few slides on that a little bit later a few years ago when I started work on a",
    "start": "478510",
    "end": "486410"
  },
  {
    "start": "484000",
    "end": "484000"
  },
  {
    "text": "plural side course on poly I couldn't find any definitions of what a resilience framework was so when you're",
    "start": "486410",
    "end": "492860"
  },
  {
    "text": "in that kind of position you come up with your own and I have three points the resilience framework actively",
    "start": "492860",
    "end": "499100"
  },
  {
    "text": "protects resources and restricts the amount of memory threads sockets in use and it makes use of caching and other",
    "start": "499100",
    "end": "505900"
  },
  {
    "text": "capabilities when possible it would let you recover from a failure so things",
    "start": "505900",
    "end": "512780"
  },
  {
    "text": "like retrying weight and retrying but if recovery is not possible it will",
    "start": "512780",
    "end": "518570"
  },
  {
    "text": "facilitate graceful degradation that could mean failing quickly rotted and",
    "start": "518570",
    "end": "523820"
  },
  {
    "text": "slowly depending on your application it might be in reducing the load on yourself or an upstream application or",
    "start": "523820",
    "end": "530330"
  },
  {
    "text": "shedding load or turning some sort of default it's very context dependent on your own",
    "start": "530330",
    "end": "535340"
  },
  {
    "text": "application so what graceful degradation means is for you to decide but again",
    "start": "535340",
    "end": "542720"
  },
  {
    "text": "think of how this might have upstream and downstream effects I'm going to repeat this a few times throughout the",
    "start": "542720",
    "end": "548690"
  },
  {
    "text": "talk as I want to kinda drill it in because you make your own application resilient you are helping those that",
    "start": "548690",
    "end": "555200"
  },
  {
    "text": "call you and the ones that you're calling and you'll see examples as we go true poly is broken into two broad",
    "start": "555200",
    "end": "564410"
  },
  {
    "start": "562000",
    "end": "562000"
  },
  {
    "text": "categories called resilience as arts we call strategies there are reactive",
    "start": "564410",
    "end": "570200"
  },
  {
    "text": "strategies and proactive the reactive strategies are the ones that most people",
    "start": "570200",
    "end": "576110"
  },
  {
    "text": "have used here to retry where you a request make a request it failed and you",
    "start": "576110",
    "end": "582230"
  },
  {
    "text": "retry immediately a wait and retry which as a name implies puts in a little bit",
    "start": "582230",
    "end": "589700"
  },
  {
    "text": "of a pause before the retry occurs a circuit breaker this one cuts the",
    "start": "589700",
    "end": "596390"
  },
  {
    "text": "connection between your application and a remote application that may be struggling and a fallback this will",
    "start": "596390",
    "end": "605840"
  },
  {
    "text": "return something when everything else has failed or it will take some action that is of use to you",
    "start": "605840",
    "end": "612170"
  },
  {
    "text": "that could be paging someone sending an email scaling out a system rebooting a",
    "start": "612170",
    "end": "617810"
  },
  {
    "text": "computer that's entirely up to you and of course dependent on the context that you're in",
    "start": "617810",
    "end": "624220"
  },
  {
    "text": "on the proactive side these ones monitor ongoing events and attempt to prevent",
    "start": "626259",
    "end": "633489"
  },
  {
    "text": "problems before they occur they'll try to stabilize your system and allow it to",
    "start": "633489",
    "end": "638679"
  },
  {
    "text": "fail more gracefully the first one to use is a timeout this one lets you",
    "start": "638679",
    "end": "644589"
  },
  {
    "text": "decide when a request should not continue you want it to stop after five",
    "start": "644589",
    "end": "649689"
  },
  {
    "text": "seconds instead of 20 seconds which would be the default say for some applications or for some libraries",
    "start": "649689",
    "end": "655689"
  },
  {
    "text": "you're using caching will store a response for a period and then if",
    "start": "655689",
    "end": "663160"
  },
  {
    "text": "another request of the same kind with the same parameters comes in Pali will",
    "start": "663160",
    "end": "668470"
  },
  {
    "text": "read from its cache return that rather than make an outbound request and then",
    "start": "668470",
    "end": "675129"
  },
  {
    "text": "bulkhead isolation this one protects resources so a failing part of your",
    "start": "675129",
    "end": "680199"
  },
  {
    "text": "application or a part that struggling won't consume all the resources of your application it won't consume all the",
    "start": "680199",
    "end": "686470"
  },
  {
    "text": "threads memory sockets database connections file i/o whatever it happens",
    "start": "686470",
    "end": "692350"
  },
  {
    "text": "to be at the heart of Pali",
    "start": "692350",
    "end": "699489"
  },
  {
    "start": "697000",
    "end": "697000"
  },
  {
    "text": "are policies so the things that we've been talking about retry timeouts circuit breakers they're all policies a",
    "start": "699489",
    "end": "708269"
  },
  {
    "text": "policy is made up of two parts a handles clause and a behavior clause so just to",
    "start": "708269",
    "end": "716139"
  },
  {
    "text": "remind you that's what the policy looks like this is the handles clause it",
    "start": "716139",
    "end": "721899"
  },
  {
    "text": "specifies the conditions under which the policy becomes active so in this case if",
    "start": "721899",
    "end": "727389"
  },
  {
    "text": "you get anything other than a success code the policy is active and this is to",
    "start": "727389",
    "end": "734589"
  },
  {
    "text": "behavior clause so if I get back a 500 I'm going to retry up to three times we",
    "start": "734589",
    "end": "741669"
  },
  {
    "text": "want to retry more than that and I won't retry if I get back a success code on the first retry or the second retry as",
    "start": "741669",
    "end": "750429"
  },
  {
    "text": "you can see they are written in a fluent style policies are also reusable a",
    "start": "750429",
    "end": "757059"
  },
  {
    "text": "single policy can be used in many parts of your app occasion you could pass it into controllers with dependency injection",
    "start": "757059",
    "end": "762930"
  },
  {
    "text": "there's also a thing called a policy registry which I will cover in a few slides or with dotnet core 2.1 you can",
    "start": "762930",
    "end": "770650"
  },
  {
    "text": "pass it around via HTTP clients that come out of a HTTP client factory",
    "start": "770650",
    "end": "777120"
  },
  {
    "text": "policies are thread safe so a single policy can be used at multiple places at",
    "start": "779370",
    "end": "786670"
  },
  {
    "text": "the same time so if I've got a retry making a request to github and I have a retry making a request to Google the",
    "start": "786670",
    "end": "793450"
  },
  {
    "text": "counts are independent they don't interfere with each other you can use a single policy simultaneously in a",
    "start": "793450",
    "end": "799780"
  },
  {
    "text": "hundred places all policies support the",
    "start": "799780",
    "end": "805330"
  },
  {
    "text": "execution of delegates retry has an on retry fallback has a non fallback which",
    "start": "805330",
    "end": "812170"
  },
  {
    "text": "allows you to perform another action just before the retry executes so this",
    "start": "812170",
    "end": "819550"
  },
  {
    "text": "is very useful free authorization so imagine you make a request you get back on authorized there is very little point",
    "start": "819550",
    "end": "825850"
  },
  {
    "text": "in making the identical request three more times you want to perform some sort of reauthorization and I'll show you an",
    "start": "825850",
    "end": "831970"
  },
  {
    "text": "example of that shortly you can use policies with both synchronous and",
    "start": "831970",
    "end": "837370"
  },
  {
    "text": "asynchronous code they come in two flavors and policies can be wrapped what",
    "start": "837370",
    "end": "844600"
  },
  {
    "text": "this means is you could have a policy inside a policy inside a policy which then finally execute something like an",
    "start": "844600",
    "end": "850390"
  },
  {
    "text": "HTTP client request so an example might be a retry which is retrying an HTTP",
    "start": "850390",
    "end": "855850"
  },
  {
    "text": "request the retry is wrapped by a circuit breaker and the circuit breaker is wrapped by a fallback so in a case",
    "start": "855850",
    "end": "861850"
  },
  {
    "text": "like that you'd make your request if it fails you to retry a bunch of times if they all fail the circuit breaker will",
    "start": "861850",
    "end": "868210"
  },
  {
    "text": "consider cutting the connection it may not do so but then the fallback will return some default for you for the rest",
    "start": "868210",
    "end": "879040"
  },
  {
    "text": "of the talk I'm going to be coming back to this particular slide so this little green piece of code is my representation",
    "start": "879040",
    "end": "885730"
  },
  {
    "text": "of our application that we're going to be building for the next 40 minutes or so",
    "start": "885730",
    "end": "891620"
  },
  {
    "text": "and I'm gonna try to build a picture of a fault-tolerant application that can stand up to the kind of failure as we",
    "start": "891620",
    "end": "897230"
  },
  {
    "text": "talked about it start the first thing I think we need is the ability to make",
    "start": "897230",
    "end": "903920"
  },
  {
    "text": "robust requests so in the event of a problem with a remote system my application should retry I may want to",
    "start": "903920",
    "end": "912770"
  },
  {
    "text": "be guaranteed to get a response even when there's a failure that isn't always",
    "start": "912770",
    "end": "918470"
  },
  {
    "text": "the case but I want the ability to do that I want to be able to cut the",
    "start": "918470",
    "end": "924230"
  },
  {
    "text": "connection to a remote system that's failing or responding too slowly because",
    "start": "924230",
    "end": "930560"
  },
  {
    "text": "I'm gonna reduce load on it and help it and I'm also going to help myself I would prefer to fail quickly rather",
    "start": "930560",
    "end": "939710"
  },
  {
    "text": "than slowly why take a hundred seconds to fail when you know you're gonna fail after one second again I'm going to",
    "start": "939710",
    "end": "946640"
  },
  {
    "text": "reduce local resource use I'm gonna help my downstream system that's calling me and I may help in upstream system if I",
    "start": "946640",
    "end": "956330"
  },
  {
    "text": "can use a cache for requests that are the same within a short period again I'm going to help myself and help all the",
    "start": "956330",
    "end": "963589"
  },
  {
    "text": "applications around me and then I should",
    "start": "963589",
    "end": "969470"
  },
  {
    "text": "also protect my own resources so that one part of my application can't do",
    "start": "969470",
    "end": "974720"
  },
  {
    "text": "damage to other parts of my application so an example might be you're getting",
    "start": "974720",
    "end": "979880"
  },
  {
    "text": "incoming requests that you need to make outbound requests for and you're getting thousands and thousands of them and that",
    "start": "979880",
    "end": "986209"
  },
  {
    "text": "part of your application is now going to suck up all your sockets and you won't have any sockets left for a different",
    "start": "986209",
    "end": "991580"
  },
  {
    "text": "part of your application we can prevent that with poly I this slide is going to",
    "start": "991580",
    "end": "998060"
  },
  {
    "start": "996000",
    "end": "996000"
  },
  {
    "text": "be a quick overview of how a general request works yeah most of this is HTTP",
    "start": "998060",
    "end": "1004209"
  },
  {
    "text": "clients oriented but it applies to other types of things to make a request check",
    "start": "1004209",
    "end": "1012010"
  },
  {
    "text": "if it's a success if it is you return your nice response if it's a failure you",
    "start": "1012010",
    "end": "1018279"
  },
  {
    "text": "still return a response and you may have to handle it in some fashion maybe you do maybe you don't",
    "start": "1018279",
    "end": "1023620"
  },
  {
    "text": "maybe you're happy to return to 5-under to your caller with Polly it'll change",
    "start": "1023620",
    "end": "1030918"
  },
  {
    "start": "1027000",
    "end": "1027000"
  },
  {
    "text": "slightly so we make our request as normal we check its response Polly will",
    "start": "1030919",
    "end": "1037910"
  },
  {
    "text": "kick in if it's a failure Polly will then determine whether or not you should perform a retry so I might say I'm only",
    "start": "1037910",
    "end": "1045798"
  },
  {
    "text": "gonna retry five hundreds I'm not gonna retry unauthorized if I am going to",
    "start": "1045799",
    "end": "1051380"
  },
  {
    "text": "retry then I'm gonna make a request again if that one happens to be a",
    "start": "1051380",
    "end": "1058070"
  },
  {
    "text": "success I return my response if the retry fails I come back to Polly I check",
    "start": "1058070",
    "end": "1066140"
  },
  {
    "text": "again whether or not I should perform a retry you may because again the failure might be one that you're handling or you",
    "start": "1066140",
    "end": "1072950"
  },
  {
    "text": "may not because you might have already hit the limit of retries and you're going to give up and you return a",
    "start": "1072950",
    "end": "1078169"
  },
  {
    "text": "response Polly doesn't interfere with the flow of a request when it succeeds",
    "start": "1078169",
    "end": "1084470"
  },
  {
    "text": "or when it fails it's only when it's a condition under which it should be",
    "start": "1084470",
    "end": "1089900"
  },
  {
    "text": "active but having said that it interferes it doesn't do anything to the response it doesn't change it in any",
    "start": "1089900",
    "end": "1095870"
  },
  {
    "text": "fashion it's only that it will retry it in the fashion in in some form and as I",
    "start": "1095870",
    "end": "1101659"
  },
  {
    "text": "said earlier you can use a single policy to concurrently make hundreds and hundreds of requests and it don't",
    "start": "1101659",
    "end": "1108350"
  },
  {
    "text": "interfere with each other in any way but there's a problem with retrials and it's",
    "start": "1108350",
    "end": "1115760"
  },
  {
    "start": "1111000",
    "end": "1111000"
  },
  {
    "text": "this if the system you're calling is failing because it's already overloaded",
    "start": "1115760",
    "end": "1121820"
  },
  {
    "text": "and you're going retry retry retry retry retry you're not helping you're not",
    "start": "1121820",
    "end": "1128059"
  },
  {
    "text": "giving it any chance to recover and you're gonna overload it even more and it's gonna take longer for that that",
    "start": "1128059",
    "end": "1134360"
  },
  {
    "text": "system to to get to a point of responding to you",
    "start": "1134360",
    "end": "1139030"
  },
  {
    "text": "but you're also making life worse for yourself you've got lots of open sockets lots of threads lots of memory in use a",
    "start": "1139670",
    "end": "1148029"
  },
  {
    "start": "1148000",
    "end": "1148000"
  },
  {
    "text": "slightly better solution is to use the wait and we wait and retry policy you",
    "start": "1148090",
    "end": "1156530"
  },
  {
    "text": "make your request and you pause if it's a failure you pause that say for two",
    "start": "1156530",
    "end": "1162860"
  },
  {
    "text": "seconds and you retry if that's a failure you pause for four seconds now",
    "start": "1162860",
    "end": "1172640"
  },
  {
    "text": "you're giving that remote system a chance to recover and you're also not in any way using up your resources at a",
    "start": "1172640",
    "end": "1179510"
  },
  {
    "text": "very high rate and then you might wait eight seconds and then finally sixteen",
    "start": "1179510",
    "end": "1185810"
  },
  {
    "text": "seconds you can choose any algorithm you want for that delay it's a little lamb'",
    "start": "1185810",
    "end": "1191000"
  },
  {
    "text": "that which I'll show you in a moment so you can do it as one second two seconds three seconds some to ^ that I use in",
    "start": "1191000",
    "end": "1198440"
  },
  {
    "text": "this case and as I said this gives the remote system a chance to recover if any of you have done networking you might",
    "start": "1198440",
    "end": "1205250"
  },
  {
    "text": "know Ethernet uses something like this when packet collisions occur there's a",
    "start": "1205250",
    "end": "1211370"
  },
  {
    "text": "small problem with this if you are making thousands of outbound requests to our mote system or hundreds even and",
    "start": "1211370",
    "end": "1218590"
  },
  {
    "text": "they're all suddenly failing and then all your requests are waiting and",
    "start": "1218590",
    "end": "1224630"
  },
  {
    "text": "retrying at the exact same rate then you're going to be sending out hundreds",
    "start": "1224630",
    "end": "1229820"
  },
  {
    "text": "requests at zero seconds and at two seconds and at four and it whatever it is 816 but what you can do is in little",
    "start": "1229820",
    "end": "1237560"
  },
  {
    "text": "lambda to determine how long you should pause before making a retry you can put jitter in so you could say two seconds",
    "start": "1237560",
    "end": "1247460"
  },
  {
    "text": "four seconds eight seconds plus or minus random number no greater than 300",
    "start": "1247460",
    "end": "1253040"
  },
  {
    "text": "milliseconds and now all of them are going to back off at slightly different rates so the likelihood of you hammering",
    "start": "1253040",
    "end": "1259250"
  },
  {
    "text": "that remote system is reduced",
    "start": "1259250",
    "end": "1263410"
  },
  {
    "text": "I want to show you a little bit on how the two of them look so we looked at a basic retry earlier this one is one less",
    "start": "1264560",
    "end": "1271370"
  },
  {
    "text": "line so it's a retry policy and its handling HTTP response messages if the",
    "start": "1271370",
    "end": "1279170"
  },
  {
    "text": "status code I get back is not a success code I retry up to three times the",
    "start": "1279170",
    "end": "1285170"
  },
  {
    "text": "weight and retry looks almost identical same condition if it's not a success",
    "start": "1285170",
    "end": "1291530"
  },
  {
    "text": "code I wait and retry up to three times and in this case I'm going to delay and",
    "start": "1291530",
    "end": "1299180"
  },
  {
    "text": "this is my little piece of code for my delay so you can see you could choose any algorithm you want for the weight",
    "start": "1299180",
    "end": "1305840"
  },
  {
    "text": "and retry if you're on deck or 2.1 and",
    "start": "1305840",
    "end": "1314000"
  },
  {
    "text": "beyond you're probably going to use HTTP client factory in dependency injection so you're probably gonna define your",
    "start": "1314000",
    "end": "1320780"
  },
  {
    "text": "policies with ia sync policy as opposed to the named type but for the rest of",
    "start": "1320780",
    "end": "1329210"
  },
  {
    "text": "the presentation to make it easier to read so isn't IA sync when you're looking at it I'm gonna stick with the",
    "start": "1329210",
    "end": "1334700"
  },
  {
    "text": "the Defiant type so I'm gonna use retries instead of IA syncs but you know",
    "start": "1334700",
    "end": "1340040"
  },
  {
    "text": "it would be the slightly better approach for a real program I mentioned earlier",
    "start": "1340040",
    "end": "1345950"
  },
  {
    "text": "that reauthorization is a particular case with retries you don't want to",
    "start": "1345950",
    "end": "1353960"
  },
  {
    "start": "1351000",
    "end": "1351000"
  },
  {
    "text": "retry if you guess 401 back you need to do something and this is where the on",
    "start": "1353960",
    "end": "1360170"
  },
  {
    "text": "retry delegate comes in so the start of it is the same I'm checking if it's not",
    "start": "1360170",
    "end": "1365570"
  },
  {
    "text": "a success code I'm gonna retry three times but this is my own retry delegate",
    "start": "1365570",
    "end": "1370910"
  },
  {
    "text": "and I can get a little bit more granular now the on retry delegate this",
    "start": "1370910",
    "end": "1376250"
  },
  {
    "text": "particular one requires me to pass in the response and the retry count I'm not going to use to retry count in this case",
    "start": "1376250",
    "end": "1382880"
  },
  {
    "text": "but I check the status code of the response and if it is unauthorized I",
    "start": "1382880",
    "end": "1388610"
  },
  {
    "text": "perform some retry lot sorry give me some reauthorization logic",
    "start": "1388610",
    "end": "1395480"
  },
  {
    "text": "of course it's up to you to decide what that is it could be getting a new cookie renewing a jar grabbing something from a",
    "start": "1395480",
    "end": "1401299"
  },
  {
    "text": "database but then your next request will now hopefully be reauthorized performing",
    "start": "1401299",
    "end": "1409929"
  },
  {
    "text": "reauthorization when you're using HTTP client factory is more complicated I have an example on my blog and they'll",
    "start": "1409929",
    "end": "1416539"
  },
  {
    "text": "be links at the end or you can quite easily find them on Twitter I'm gonna",
    "start": "1416539",
    "end": "1423679"
  },
  {
    "start": "1423000",
    "end": "1423000"
  },
  {
    "text": "give a very quick overview of how the general policies work and Emery I won't be showing these kind of slides again as",
    "start": "1423679",
    "end": "1431899"
  },
  {
    "text": "we saw Polly only gets involved when there's a failure it will determine",
    "start": "1431899",
    "end": "1436940"
  },
  {
    "text": "whether or not it should perform some action and if it should it takes that",
    "start": "1436940",
    "end": "1442730"
  },
  {
    "text": "action in most cases like we've talked about it would be a retry bin other cases it could be cutting a circuit it",
    "start": "1442730",
    "end": "1448820"
  },
  {
    "text": "could be sending a fallback it could be cutting communications shedding load those kind of things so request checks",
    "start": "1448820",
    "end": "1456799"
  },
  {
    "text": "the success code should I get involved should my policy get involved no let the",
    "start": "1456799",
    "end": "1462200"
  },
  {
    "text": "request continue returning to failure yes my policy should get involved take",
    "start": "1462200",
    "end": "1467269"
  },
  {
    "text": "some action at some conferences people",
    "start": "1467269",
    "end": "1473179"
  },
  {
    "text": "have asked me can I use poly for other things and I hadn't I hadn't included a",
    "start": "1473179",
    "end": "1478460"
  },
  {
    "text": "slide like this up until a few months ago and yes you can you can use poly for any type of code you execute you can",
    "start": "1478460",
    "end": "1486200"
  },
  {
    "text": "execute any method you want with it in this case I'm executing some error-prone",
    "start": "1486200",
    "end": "1495889"
  },
  {
    "text": "code that returns a number I'm executing it inside retry policy and the retry",
    "start": "1495889",
    "end": "1503450"
  },
  {
    "text": "policy says that it's going to expect an INT if the int is not zero or a / 0",
    "start": "1503450",
    "end": "1511340"
  },
  {
    "text": "exception occurs retry three times so you can use poly for any type of",
    "start": "1511340",
    "end": "1517490"
  },
  {
    "text": "execution you want another little example in this case I'm going to look",
    "start": "1517490",
    "end": "1523700"
  },
  {
    "text": "for some sort of job status I expect an enum back if my enum isn't valid",
    "start": "1523700",
    "end": "1529440"
  },
  {
    "text": "then I wait and retry and then a final one would be I'm going to execute some",
    "start": "1529440",
    "end": "1537210"
  },
  {
    "text": "code that's going to an exception probably and all I have to do is handle an exception and I'll retry it three",
    "start": "1537210",
    "end": "1542760"
  },
  {
    "text": "times you can use poly with database requests with file IO with connections",
    "start": "1542760",
    "end": "1548010"
  },
  {
    "text": "to the cloud anything you want I'm airily use it for HTTP requests",
    "start": "1548010",
    "end": "1554040"
  },
  {
    "text": "because that's what I work on mainly API to API communication but it will work with anything alright back to our little",
    "start": "1554040",
    "end": "1565620"
  },
  {
    "text": "application so we've achieved what I would say is robust requests so our",
    "start": "1565620",
    "end": "1571980"
  },
  {
    "text": "applications getting a little bit more fault tolerant on to the next one so",
    "start": "1571980",
    "end": "1577830"
  },
  {
    "text": "fall backs are the policy that you're probably going to use last if you're",
    "start": "1577830",
    "end": "1582990"
  },
  {
    "text": "using them in a wrap especially are gonna be at the outside you could use",
    "start": "1582990",
    "end": "1589260"
  },
  {
    "text": "them with retries you could use them with caches you can use them with circuit breakers you can use them pretty much with anything but it's almost",
    "start": "1589260",
    "end": "1594810"
  },
  {
    "text": "always going to be the very last policy you use it can be used to return a",
    "start": "1594810",
    "end": "1600330"
  },
  {
    "text": "default it can be used to return a cached value but poly has its own cache so that's probably not the vesting but",
    "start": "1600330",
    "end": "1607860"
  },
  {
    "text": "it can as I said earlier it can be used to perform an arbitrary function Trudy on fallback delegate so you could paid",
    "start": "1607860",
    "end": "1614790"
  },
  {
    "text": "someone scalar system reboot a system scale up a database anything of that",
    "start": "1614790",
    "end": "1621120"
  },
  {
    "text": "nature you aren't limited to just returning some default or some sort of response it's code",
    "start": "1621120",
    "end": "1628590"
  },
  {
    "text": "it's very simple I've changed the condition on the poly clause here so I",
    "start": "1628590",
    "end": "1635340"
  },
  {
    "text": "remember I used to have if it's not a success code you can say if it's not an internal if it's an internal server",
    "start": "1635340",
    "end": "1640500"
  },
  {
    "text": "error you could take any type of condition you want under which the policy becomes active the policy is",
    "start": "1640500",
    "end": "1648210"
  },
  {
    "text": "named here and in this case what I'm doing is I'm creating a HTTP response",
    "start": "1648210",
    "end": "1653220"
  },
  {
    "text": "message and I'm using a little bit of cached data to return so I build the",
    "start": "1653220",
    "end": "1658740"
  },
  {
    "text": "HTTP response subject hype okay put some content into it and I return it so if I make an if I execute a request",
    "start": "1658740",
    "end": "1665850"
  },
  {
    "text": "with the fallback and I get a failure then instead I'm returning my own HTTP",
    "start": "1665850",
    "end": "1671430"
  },
  {
    "text": "response broader than the 500 or the 404 or whatever I got back from the remote",
    "start": "1671430",
    "end": "1676800"
  },
  {
    "text": "system that's all there is to the",
    "start": "1676800",
    "end": "1682170"
  },
  {
    "text": "fallback circuit breaker I circuit",
    "start": "1682170",
    "end": "1689160"
  },
  {
    "text": "breaker is in the US it's like what we call circuit breakers in our homes in Ireland and Britain that they're",
    "start": "1689160",
    "end": "1694680"
  },
  {
    "text": "referred to as trip switches I don't know what to refer to us here but it's a thing that would cut electricity in your",
    "start": "1694680",
    "end": "1701100"
  },
  {
    "text": "home if there's a short-circuit or something like that so in the same way",
    "start": "1701100",
    "end": "1706460"
  },
  {
    "text": "this has a closed condition closed is the condition you want that is like an",
    "start": "1706460",
    "end": "1713760"
  },
  {
    "text": "electrical circuit current flows when it's closed or like a pipe if there's no holes in the pipe the water flows but",
    "start": "1713760",
    "end": "1721020"
  },
  {
    "text": "it's easier to stick with the electric analogy when the circuit is open no",
    "start": "1721020",
    "end": "1726510"
  },
  {
    "text": "requests flow again if if you have two wires and are not connected and no electricity will flow but this has a",
    "start": "1726510",
    "end": "1735330"
  },
  {
    "text": "half-open stage and this is a test stage",
    "start": "1735330",
    "end": "1740870"
  },
  {
    "text": "after a circuit has been opened for a period it will move to half open and",
    "start": "1740870",
    "end": "1746550"
  },
  {
    "text": "that is then when a test is performed we have two kinds of circuit breaker an original circuit breaker and an advanced",
    "start": "1746550",
    "end": "1754110"
  },
  {
    "text": "circuit breaker the original circuit breaker is a simple sum of the",
    "start": "1754110",
    "end": "1759630"
  },
  {
    "text": "consecutive failures so if you get two exceptions or two 404s",
    "start": "1759630",
    "end": "1764940"
  },
  {
    "text": "then it breaks a circuit no minimum true put required nothing like that the",
    "start": "1764940",
    "end": "1770280"
  },
  {
    "text": "advanced circuit breaker looks at a percentage of failures excuse me over time and it has a minimum",
    "start": "1770280",
    "end": "1776760"
  },
  {
    "text": "threshold that needs to be met before it becomes active circuit breaker has a way",
    "start": "1776760",
    "end": "1784530"
  },
  {
    "start": "1782000",
    "end": "1782000"
  },
  {
    "text": "of moving around itself it starts as closed if you get a significant number",
    "start": "1784530",
    "end": "1791400"
  },
  {
    "text": "of failures or the required number of failures it becomes open and no more requests are allowed true",
    "start": "1791400",
    "end": "1797160"
  },
  {
    "text": "the circuit breaker the circuit breaker will immediately an exception to the caller so again its immediate the",
    "start": "1797160",
    "end": "1803550"
  },
  {
    "text": "caller doesn't have to wait around to find out there's a problem from the open",
    "start": "1803550",
    "end": "1809550"
  },
  {
    "text": "state the circuit breaker can move to half open as I said that's a test stage",
    "start": "1809550",
    "end": "1815090"
  },
  {
    "text": "the first request true to half open if it works the circuit will move to closed",
    "start": "1815090",
    "end": "1822690"
  },
  {
    "text": "but if it fails the circuit goes back to open for another period if it's been",
    "start": "1822690",
    "end": "1829530"
  },
  {
    "text": "open for a period the circuit will move back to half open and that our test would be performed and then finally the",
    "start": "1829530",
    "end": "1837240"
  },
  {
    "text": "move to closed and your your uh your your request will flow as normal if I",
    "start": "1837240",
    "end": "1845970"
  },
  {
    "text": "have let's say an application that's using poly and it's connected to multiple remote applications and each of",
    "start": "1845970",
    "end": "1851970"
  },
  {
    "text": "those has remote multiple endpoints I can use a circuit breaker to protect a",
    "start": "1851970",
    "end": "1858090"
  },
  {
    "text": "single endpoint a group of endpoints or potentially all outbound requests from",
    "start": "1858090",
    "end": "1864630"
  },
  {
    "text": "my application but that would be unusual that would mean you have some serious network problems it would be better to",
    "start": "1864630",
    "end": "1870180"
  },
  {
    "text": "deal with",
    "start": "1870180",
    "end": "1872570"
  },
  {
    "text": "circuit breaker policies work a little differently than all the others so with a retry as I said you can make hundreds",
    "start": "1875660",
    "end": "1881690"
  },
  {
    "text": "of requests using a single policy and they won't interfere with each other or share any states but that is not what",
    "start": "1881690",
    "end": "1887840"
  },
  {
    "text": "you want with a circuit breaker you want circuit breaker to share State across multiple requests so it can track the",
    "start": "1887840",
    "end": "1894470"
  },
  {
    "text": "failures across all of them if you get that aggregate number of failures across all those requests then you want to cut",
    "start": "1894470",
    "end": "1901250"
  },
  {
    "text": "the circuit this is easy to do with a",
    "start": "1901250",
    "end": "1906770"
  },
  {
    "text": "single application because it's running in process I can go or there's been one failure two failures three failures cut",
    "start": "1906770",
    "end": "1912050"
  },
  {
    "text": "the circuit but many of us are using multiple instances of an application that's running on containers and they",
    "start": "1912050",
    "end": "1918770"
  },
  {
    "text": "somehow need to track those failures also I'll come to that in a moment but",
    "start": "1918770",
    "end": "1924290"
  },
  {
    "text": "I'm going to show you briefly how to write the policy as I said there were",
    "start": "1924290",
    "end": "1929360"
  },
  {
    "text": "two types of circuit breaker an original circuit breaker and what the first one",
    "start": "1929360",
    "end": "1934520"
  },
  {
    "text": "says is that if I get two consecutive failures in a 60 second window I'm going",
    "start": "1934520",
    "end": "1942770"
  },
  {
    "text": "to cut my circuit then I have three delegates on break on reset and a half",
    "start": "1942770",
    "end": "1948290"
  },
  {
    "text": "open which I can use to perform arbitrary logic or do some logging send",
    "start": "1948290",
    "end": "1953570"
  },
  {
    "text": "some telemetry or anything you like the advanced circuit breaker says that",
    "start": "1953570",
    "end": "1961700"
  },
  {
    "text": "if 50% of my requests in a 30-second window with a minimum true put of seven",
    "start": "1961700",
    "end": "1968810"
  },
  {
    "text": "requests in that 30 second window are failure so half my requests are failures in a 30-second window with a minimum",
    "start": "1968810",
    "end": "1975770"
  },
  {
    "text": "true put then I cut the circuit so it's a little more fine-tuned probably a little bit more usable for arcing that",
    "start": "1975770",
    "end": "1982280"
  },
  {
    "text": "for most people scenarios and it also supports on break on reset and on half",
    "start": "1982280",
    "end": "1987380"
  },
  {
    "text": "open it's your choice to pick whichever one is more suitable and very much",
    "start": "1987380",
    "end": "1992750"
  },
  {
    "text": "depends on your scenarios I mentioned a moment ago that you could also have a",
    "start": "1992750",
    "end": "1999560"
  },
  {
    "start": "1999000",
    "end": "1999000"
  },
  {
    "text": "distributed circuit breaker so this was what we looked at with a single process",
    "start": "1999560",
    "end": "2006400"
  },
  {
    "text": "making requests but if you had something like this multiple instances of your application",
    "start": "2006400",
    "end": "2013309"
  },
  {
    "text": "running on containers running an AWS for the circuit breaker to function",
    "start": "2013309",
    "end": "2018859"
  },
  {
    "text": "correctly all the instances of your application need to share data how many",
    "start": "2018859",
    "end": "2023899"
  },
  {
    "text": "times is an endpoint failed in the last minute what's the total number of failures have I had enough true put you",
    "start": "2023899",
    "end": "2030529"
  },
  {
    "text": "need somewhere to store that information this feature is either been released",
    "start": "2030529",
    "end": "2037099"
  },
  {
    "text": "this week or it's coming very very soon and it uses what's called Azure durable functions it lets you store state",
    "start": "2037099",
    "end": "2044089"
  },
  {
    "text": "increment a number that could be read by all instances of Pali so think of it as a very trivial method that's got a an",
    "start": "2044089",
    "end": "2051019"
  },
  {
    "text": "add one or something like that and then you can read so you can increment the count any of the instances of your",
    "start": "2051019",
    "end": "2056450"
  },
  {
    "text": "application can say I've had a failure in current apply one I've had a failure incremented by one they all are aware of",
    "start": "2056450",
    "end": "2062388"
  },
  {
    "text": "the total number of failures and then they can all cut the circuit it's not much use if only one or two of them are",
    "start": "2062389",
    "end": "2068210"
  },
  {
    "text": "cutting the circuit our rights our application now is able to isolate",
    "start": "2068210",
    "end": "2075169"
  },
  {
    "text": "itself from faulty upstream applications the circuit breaker prevents you from",
    "start": "2075169",
    "end": "2080720"
  },
  {
    "text": "making requests a struggling remote systems but it also immediately informs the callers that their request can't be",
    "start": "2080720",
    "end": "2086960"
  },
  {
    "text": "completed when the circuits cut so again Polly is having an effect on upstream and downstream applications quick",
    "start": "2086960",
    "end": "2096319"
  },
  {
    "start": "2095000",
    "end": "2095000"
  },
  {
    "text": "summary of our reactive strategies we had retry we fries immediately wait and retry puts opposing circuit record cuts",
    "start": "2096319",
    "end": "2103039"
  },
  {
    "text": "the connection and fallback returns some sort of default I mentioned that you can",
    "start": "2103039",
    "end": "2108980"
  },
  {
    "start": "2107000",
    "end": "2107000"
  },
  {
    "text": "combine these if you would have let's say an HTTP request at the center you",
    "start": "2108980",
    "end": "2117109"
  },
  {
    "text": "could perform three retries in the event of a failure",
    "start": "2117109",
    "end": "2121690"
  },
  {
    "text": "you could outside that have a circuit breaker and if all that fails you could",
    "start": "2122319",
    "end": "2128539"
  },
  {
    "text": "return a retry so Polly allows you to build up policies based off of other",
    "start": "2128539",
    "end": "2134569"
  },
  {
    "text": "policies I'm going to do a little demo it's quite",
    "start": "2134569",
    "end": "2142450"
  },
  {
    "text": "trivial I'm gonna have two screens up on the left is gonna be my local",
    "start": "2142450",
    "end": "2148090"
  },
  {
    "text": "application which is making requests to my remote application my remote",
    "start": "2148090",
    "end": "2154270"
  },
  {
    "text": "application is unstable from most of the things I'm going to request it's going",
    "start": "2154270",
    "end": "2159850"
  },
  {
    "text": "to fail three-quarters of the time now we're going to see some printouts on the screen showing what happens so I'll talk",
    "start": "2159850",
    "end": "2166900"
  },
  {
    "text": "you through it as I do it okay I hope that text is legible but I'll talk you",
    "start": "2166900",
    "end": "2173530"
  },
  {
    "text": "through it again on the left is my local application it's using Holley on the",
    "start": "2173530",
    "end": "2181810"
  },
  {
    "text": "right is a damaged application which fails a lot so I'm gonna make a request",
    "start": "2181810",
    "end": "2187120"
  },
  {
    "text": "to my local application so what happened here was the remote application receives",
    "start": "2187120",
    "end": "2196210"
  },
  {
    "text": "a request from the local failed the local application retried remote remote",
    "start": "2196210",
    "end": "2201760"
  },
  {
    "text": "application failed back and forth back and forth back and forth until the fort request worked and about a response I'll",
    "start": "2201760",
    "end": "2208450"
  },
  {
    "text": "show that to you again because the speed of it is quite quick happens very very",
    "start": "2208450",
    "end": "2214030"
  },
  {
    "text": "fast so again it's a remote application needs time to recover that will not help you instead I'm now going to do a wait",
    "start": "2214030",
    "end": "2223480"
  },
  {
    "text": "and retry so my local application makes a request to the remote if it works I'd",
    "start": "2223480",
    "end": "2229930"
  },
  {
    "text": "get a response if it failed I'm gonna retry the delays are getting a little",
    "start": "2229930",
    "end": "2237190"
  },
  {
    "text": "bit longer with each retry so the first retry waited two seconds the second waited for the sorry waited eight",
    "start": "2237190",
    "end": "2245549"
  },
  {
    "text": "this one uses a fallback the remote application is going to fail a hundred percent of the time this one in this one",
    "start": "2253140",
    "end": "2259550"
  },
  {
    "text": "so now we're making our third retry in a moment it's gonna fail again but I got",
    "start": "2259550",
    "end": "2266550"
  },
  {
    "text": "back a useful okay I chose zero as my default fallback response so my application can continue",
    "start": "2266550",
    "end": "2273450"
  },
  {
    "text": "it doesn't have to deal with a failure I'm saying zero in my case is a useful",
    "start": "2273450",
    "end": "2279270"
  },
  {
    "text": "response it's up to you to figure out if that works for you and then one final",
    "start": "2279270",
    "end": "2285330"
  },
  {
    "text": "one which is just to show you that for loops and tri caches work so this is one",
    "start": "2285330",
    "end": "2292440"
  },
  {
    "text": "where I had a for loop to try catch and it works very quickly but it's brittle and hard to use is my demo right oh yes",
    "start": "2292440",
    "end": "2309390"
  },
  {
    "text": "a couple of other things before we move on to reactive strategies poly has a",
    "start": "2309390",
    "end": "2315990"
  },
  {
    "text": "thing called a registry we've seen a few policies so far retry way to retry",
    "start": "2315990",
    "end": "2322080"
  },
  {
    "text": "fallback and circuit breaker if you don't want to define them every time you can put them inside a registry it's",
    "start": "2322080",
    "end": "2328680"
  },
  {
    "text": "effectively a store for those policies it is a dictionary so it has all the",
    "start": "2328680",
    "end": "2334320"
  },
  {
    "text": "methods and features of a dictionary you can pass it around through dependency",
    "start": "2334320",
    "end": "2339990"
  },
  {
    "text": "injection so you could create 1012 policies in your startup put them into the policy registry put that into your",
    "start": "2339990",
    "end": "2347070"
  },
  {
    "text": "service collection and then send that around your application as needed they",
    "start": "2347070",
    "end": "2352860"
  },
  {
    "text": "are reusable the registries and they work with HTTP client factory which is",
    "start": "2352860",
    "end": "2359970"
  },
  {
    "text": "quite important as I will show you in a moment this is what a policy registry looks",
    "start": "2359970",
    "end": "2366390"
  },
  {
    "text": "like it can be individual policies or wraps policies and they all get names string names so you named your retry or",
    "start": "2366390",
    "end": "2373590"
  },
  {
    "text": "maybe your easy to be retry how many of you are using HTTP client",
    "start": "2373590",
    "end": "2380920"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "factory very oh maybe a quarter of the",
    "start": "2380920",
    "end": "2386140"
  },
  {
    "text": "audience HTTP client factory came out I",
    "start": "2386140",
    "end": "2391780"
  },
  {
    "text": "think about a year and a half ago in dotnet core 2.1 it was spring of 2018",
    "start": "2391780",
    "end": "2398040"
  },
  {
    "text": "what it provides is better lifetime management if you're using HTTP client",
    "start": "2398040",
    "end": "2405460"
  },
  {
    "text": "by itself you've got two problems that you face you if you're using a single",
    "start": "2405460",
    "end": "2412300"
  },
  {
    "text": "HTTP client for all your requests which you can do you can end up with DNS problems because if an IP address of a",
    "start": "2412300",
    "end": "2419200"
  },
  {
    "text": "remote host fitted changes your single HTTP client won't know about it but you",
    "start": "2419200",
    "end": "2426220"
  },
  {
    "text": "can also end up with socket exhaustion sorry to me that's if you're using a single HTTP client but if you're using a",
    "start": "2426220",
    "end": "2431950"
  },
  {
    "text": "new HTTP client for every single request you can end up with socket exhaustion so imagine you've got hundreds of quests",
    "start": "2431950",
    "end": "2437110"
  },
  {
    "text": "coming in you're making hundred requests going out new HTTP client new HTTP client you can end up with the problem",
    "start": "2437110",
    "end": "2443860"
  },
  {
    "text": "with sake exhaustion it has happened that my company on a couple of occasions I mentioned a DNS renewal the other",
    "start": "2443860",
    "end": "2452620"
  },
  {
    "text": "wonderful thing about HTTP client factory is that it integrates very very tightly with poly you can use a policy",
    "start": "2452620",
    "end": "2463510"
  },
  {
    "text": "registry as I just showed you and then you can use an arbitrary piece of code like a function which could be made up",
    "start": "2463510",
    "end": "2469240"
  },
  {
    "text": "of if else's are scarce switches to pull the policy from that registry based on the request you're making and there's",
    "start": "2469240",
    "end": "2478630"
  },
  {
    "start": "2478000",
    "end": "2478000"
  },
  {
    "text": "there are two ways to use the history be fine factory with poly you would start off with your service",
    "start": "2478630",
    "end": "2485080"
  },
  {
    "text": "collection I hate you to be kind factory it's only a few lines of code you could add a single retry policy to your HTTP",
    "start": "2485080",
    "end": "2492460"
  },
  {
    "text": "client factory but if you're adding just a retry policy that's fine if you're doing nothing but gets if you're doing",
    "start": "2492460",
    "end": "2499360"
  },
  {
    "text": "posts puts you may have problems if your retrying posts especially because of",
    "start": "2499360",
    "end": "2504970"
  },
  {
    "text": "idempotent concerns but you can use httpclient factory with",
    "start": "2504970",
    "end": "2515750"
  },
  {
    "start": "2509000",
    "end": "2509000"
  },
  {
    "text": "a policy registry so you could put in three four five ten policies and then a",
    "start": "2515750",
    "end": "2521960"
  },
  {
    "text": "little piece of code to pull out the right policy based on the request and you can base it on the URL or the verb",
    "start": "2521960",
    "end": "2528980"
  },
  {
    "text": "or some combination of those or any other arbitrary condition you want quite",
    "start": "2528980",
    "end": "2535970"
  },
  {
    "text": "often you'd use a retry forgets maybe a wait and retry four puts and you might use what's called a no op policy for",
    "start": "2535970",
    "end": "2542480"
  },
  {
    "text": "posts no op is a pass through it does nothing to the request the code would",
    "start": "2542480",
    "end": "2549530"
  },
  {
    "text": "look something like this configure services in your startup class in dotnet",
    "start": "2549530",
    "end": "2554930"
  },
  {
    "text": "core you would add your policies I'm not going to show them here you'd add them to the registry you'd register the",
    "start": "2554930",
    "end": "2560690"
  },
  {
    "text": "registry with your service collection and then this is all you need for a HTTP",
    "start": "2560690",
    "end": "2565910"
  },
  {
    "text": "client factory so if it was you that haven't used it I'm naming this factory as the remote server factory I'm giving it a base",
    "start": "2565910",
    "end": "2572810"
  },
  {
    "text": "address and a default header and then I'm saying use a policy selector method",
    "start": "2572810",
    "end": "2580130"
  },
  {
    "text": "to pick policies from a registry and this is what the policy selector looks",
    "start": "2580130",
    "end": "2585800"
  },
  {
    "text": "like it gets passed in the registry and the request is occurring at that moment",
    "start": "2585800",
    "end": "2593710"
  },
  {
    "text": "so every time you make a request it'll pass true here everything to make HTTP client",
    "start": "2593710",
    "end": "2599480"
  },
  {
    "text": "requests it'll pass through here if I'm making a get request it's gonna pull that names policy from my registry if",
    "start": "2599480",
    "end": "2607820"
  },
  {
    "text": "I'm making a post it's going to pull them know up from my registry and if I'm using if it's any other type of request",
    "start": "2607820",
    "end": "2614030"
  },
  {
    "text": "I'm gonna pull the wait and retry so this gives you great flexibility for",
    "start": "2614030",
    "end": "2619250"
  },
  {
    "text": "pulling the right policy for the right type of request but you define it in",
    "start": "2619250",
    "end": "2624290"
  },
  {
    "text": "your startup you don't need to do it at the point that you're making the request and then you can change it as you see",
    "start": "2624290",
    "end": "2629810"
  },
  {
    "text": "fit that is all I have on here be kind of",
    "start": "2629810",
    "end": "2634830"
  },
  {
    "text": "factory another topic that comes up is testing people ask of course that's a",
    "start": "2634830",
    "end": "2645930"
  },
  {
    "start": "2637000",
    "end": "2637000"
  },
  {
    "text": "different type of problem and I have a blog post about us it isn't to do with",
    "start": "2645930",
    "end": "2651540"
  },
  {
    "text": "poly as such but take a look at my broader blog and it's something that came up recently it's relatively",
    "start": "2651540",
    "end": "2658920"
  },
  {
    "text": "straightforward the questions are if you didn't hear it was how would you change the headers in HTTP for a request using",
    "start": "2658920",
    "end": "2669180"
  },
  {
    "text": "HTTP client factory if you wanted to do it dynamically then there is a way for",
    "start": "2669180",
    "end": "2674280"
  },
  {
    "text": "for testing testing has two general scenarios you may want to test your code",
    "start": "2674280",
    "end": "2680130"
  },
  {
    "text": "as though you're not excuse me as a no policy exists in that case you would",
    "start": "2680130",
    "end": "2685560"
  },
  {
    "text": "inject and no op so you can do your unit tests but instead of using a retry you would inject a no op if you're using a",
    "start": "2685560",
    "end": "2691170"
  },
  {
    "text": "registry you would swap you put in no ops instead of retries wait retries and so on the other thing you want to test",
    "start": "2691170",
    "end": "2697500"
  },
  {
    "text": "is how does your code react if polly chose one of its exceptions like a",
    "start": "2697500",
    "end": "2702870"
  },
  {
    "text": "broken circuit exception or a timeout rejected exception and to do that you",
    "start": "2702870",
    "end": "2708120"
  },
  {
    "text": "would use mocking this is a talk about",
    "start": "2708120",
    "end": "2713940"
  },
  {
    "text": "building resiliency but in the last week or two Polly the Pali team have released",
    "start": "2713940",
    "end": "2719180"
  },
  {
    "start": "2719000",
    "end": "2719000"
  },
  {
    "text": "what is called a chaos engine and I'm going to very very quickly show you that",
    "start": "2719180",
    "end": "2724440"
  },
  {
    "text": "it now supports fault policies which allow you to inject exceptions at a",
    "start": "2724440",
    "end": "2730020"
  },
  {
    "text": "particular rate and you can turn them on and off you can inject latency again at",
    "start": "2730020",
    "end": "2736530"
  },
  {
    "text": "a rate and turn them on or off you have to fight you know I need any duration you want or you can inject any behavior",
    "start": "2736530",
    "end": "2742680"
  },
  {
    "text": "so you could drop a database leave the table cut a connection it is called Simmi",
    "start": "2742680",
    "end": "2748580"
  },
  {
    "text": "you can do if you have access to your own business logic you can put this code",
    "start": "2748580",
    "end": "2753930"
  },
  {
    "text": "into the business logic if you don't let's say you're calling github and you want to simulate failures you can use",
    "start": "2753930",
    "end": "2761100"
  },
  {
    "text": "these policies inside your HTTP requests so that they would into fear with the inbound responsive would",
    "start": "2761100",
    "end": "2767850"
  },
  {
    "text": "fail a certain number of times but this talk is not about breaking stuff all",
    "start": "2767850",
    "end": "2773820"
  },
  {
    "text": "right let's move on to proactive strategies to provide the strategies",
    "start": "2773820",
    "end": "2779310"
  },
  {
    "text": "monitor ongoing offense screaming events attempt to prevent problems before they occur",
    "start": "2779310",
    "end": "2784770"
  },
  {
    "text": "are they stabilizer system or they let it fail gracefully and that varies depending on your scenario there is a",
    "start": "2784770",
    "end": "2792420"
  },
  {
    "text": "timeout which lets you decide when a request should end rather than whatever the default of the tool you're using is",
    "start": "2792420",
    "end": "2799670"
  },
  {
    "text": "caching which would store a response for a period and it returns that response rather than making the external outbound",
    "start": "2799670",
    "end": "2806880"
  },
  {
    "text": "requests and then finally bulkhead isolation which protects your resources",
    "start": "2806880",
    "end": "2812340"
  },
  {
    "text": "so one part of your own application can't bring down the rest the timeout",
    "start": "2812340",
    "end": "2818970"
  },
  {
    "start": "2818000",
    "end": "2818000"
  },
  {
    "text": "policy so if your request goes unanswered it will timeout the choice is up to you",
    "start": "2818970",
    "end": "2825630"
  },
  {
    "text": "how that happens with HTTP client client the timer could be as long as 100 seconds but most of us know if you don't",
    "start": "2825630",
    "end": "2833100"
  },
  {
    "text": "get a response within you know half a second a second it's probably never going to respond but if you're holding",
    "start": "2833100",
    "end": "2840300"
  },
  {
    "text": "on to that request for 100 seconds you're holding memory holding the sockets you're holding threads and of",
    "start": "2840300",
    "end": "2847410"
  },
  {
    "text": "potentially a downstream system is waiting for you to respond because they might not be using poly timers the",
    "start": "2847410",
    "end": "2853800"
  },
  {
    "text": "solution is the timeout policy this lets you specify how long your request will",
    "start": "2853800",
    "end": "2859590"
  },
  {
    "text": "wait if no response is received and if no response is received within the period you define poly chose a time out",
    "start": "2859590",
    "end": "2867240"
  },
  {
    "text": "rejected exception this can be wrapped inside other policies or outside them as",
    "start": "2867240",
    "end": "2872340"
  },
  {
    "text": "you see fit like a retry policy it also supports a cancellation token which will help you",
    "start": "2872340",
    "end": "2878100"
  },
  {
    "text": "clean up resources that you wonder why I would try that are in use also timing",
    "start": "2878100",
    "end": "2884490"
  },
  {
    "text": "out quickly means your application isn't wasting resources it's a it's a very",
    "start": "2884490",
    "end": "2890130"
  },
  {
    "text": "easy to use one and quite often overlooked and this is how easy it is to use",
    "start": "2890130",
    "end": "2895470"
  },
  {
    "text": "this says that if you're using this policy and you don't get a response",
    "start": "2895470",
    "end": "2900599"
  },
  {
    "text": "within one second time it out all right",
    "start": "2900599",
    "end": "2908040"
  },
  {
    "text": "that is failing quickly I do have a little bit of code that demonstrates to",
    "start": "2908040",
    "end": "2913200"
  },
  {
    "text": "us so in this case my application will",
    "start": "2913200",
    "end": "2920069"
  },
  {
    "text": "again make four requests to the remote application the remote application will respond but very slowly my application",
    "start": "2920069",
    "end": "2927930"
  },
  {
    "text": "is set to timeout I think after one second so you're going to see on the left side my application timing out on",
    "start": "2927930",
    "end": "2934470"
  },
  {
    "text": "the right side you're going to see the remote application pausing thinking about what to do eventually responding",
    "start": "2934470",
    "end": "2941069"
  },
  {
    "text": "but I don't get those responses so on the left side you see it's delaying but",
    "start": "2941069",
    "end": "2946619"
  },
  {
    "text": "on the right side I'm performing my retries but the retries are only allowed to take a second and nothing ever comes",
    "start": "2946619",
    "end": "2953490"
  },
  {
    "text": "back so as far as I'm concerned the requests failed but you can see on the",
    "start": "2953490",
    "end": "2958920"
  },
  {
    "text": "right side the responses were eventually sent so you have to pick a timeout that",
    "start": "2958920",
    "end": "2964290"
  },
  {
    "text": "is appropriate one second was too short because I set the remote server to pause",
    "start": "2964290",
    "end": "2969869"
  },
  {
    "text": "I think for five seconds and what you get then is timeout rejected exception",
    "start": "2969869",
    "end": "2977510"
  },
  {
    "text": "okay our application is getting more and more robust cashing a cash policy can be",
    "start": "2980040",
    "end": "2988540"
  },
  {
    "start": "2985000",
    "end": "2985000"
  },
  {
    "text": "wrapped around any other policy that you're using or it can be used by itself The Clash's store values can be used in",
    "start": "2988540",
    "end": "2995980"
  },
  {
    "text": "multiple places not just at the point you make the initial request so you may make a remote request remote server to",
    "start": "2995980",
    "end": "3001319"
  },
  {
    "text": "get some data but you can use that cash elsewhere in your application you can choose to cash the full HTTP response or",
    "start": "3001319",
    "end": "3009300"
  },
  {
    "text": "adjust a business data that's up to you and I have a bunch of examples on the blog about that how it works is a little",
    "start": "3009300",
    "end": "3018900"
  },
  {
    "text": "bit more complicated so in configure services you define the cash in this",
    "start": "3018900",
    "end": "3024240"
  },
  {
    "text": "case it's a memory cache you set a relative time to live in this case I've",
    "start": "3024240",
    "end": "3031349"
  },
  {
    "text": "set 30 seconds you can choose different types of timeout you can have absolute",
    "start": "3031349",
    "end": "3038520"
  },
  {
    "text": "timeout sliding-window result TTL so result TTL is great if you're using",
    "start": "3038520",
    "end": "3043559"
  },
  {
    "text": "something like a jot and it comes with a HTTP response header that has a timeout",
    "start": "3043559",
    "end": "3051260"
  },
  {
    "text": "you define poly context and what you'll notice here is that I'm saying I've got",
    "start": "3052040",
    "end": "3058980"
  },
  {
    "text": "a static part of it defined and then I've got a dynamic part so I'm storing something in my cache which is a",
    "start": "3058980",
    "end": "3065010"
  },
  {
    "text": "combination of these two names so it'll be get by inventory ID number five ten",
    "start": "3065010",
    "end": "3070230"
  },
  {
    "text": "fifteen so if I get a request for the same one I'll read from the cache if it's not in the cache I'll go to the",
    "start": "3070230",
    "end": "3076680"
  },
  {
    "text": "outside service and then this is how you use it you say cache policy that",
    "start": "3076680",
    "end": "3083970"
  },
  {
    "text": "executes a sync and then you do the HTTP client request it's difficult to use the",
    "start": "3083970",
    "end": "3090960"
  },
  {
    "text": "cache with HTTP client factory this is",
    "start": "3090960",
    "end": "3096480"
  },
  {
    "text": "something that I've taught with Dylan about and they're probably not going to change it so if you want to use cache",
    "start": "3096480",
    "end": "3101609"
  },
  {
    "text": "you're better off to use policy registry put it into that house the registry into",
    "start": "3101609",
    "end": "3107099"
  },
  {
    "text": "your controller or whatever code and then raft call to your httpclient just like that",
    "start": "3107099",
    "end": "3114200"
  },
  {
    "text": "this example shows the caching of the whole HTTP response you can as I said",
    "start": "3114200",
    "end": "3121320"
  },
  {
    "text": "cache just a business data it's a little more complicated but I wrote a three-part series on my blog on how to",
    "start": "3121320",
    "end": "3127170"
  },
  {
    "text": "do that and also how to selectively cache so this will cache if you get a",
    "start": "3127170",
    "end": "3134160"
  },
  {
    "text": "failure to but it's not trivial to do it to only cache if you get to hundreds as",
    "start": "3134160",
    "end": "3141660"
  },
  {
    "text": "I said I have an exam I have a bunch of examples on how to do the selective caching and how to cache business data",
    "start": "3141660",
    "end": "3147150"
  },
  {
    "text": "only so please take a look at that because it's a cache it has all the standard methods you would expect from a",
    "start": "3147150",
    "end": "3153150"
  },
  {
    "text": "cache like on cache get on cache miss put error and so on okay we're getting",
    "start": "3153150",
    "end": "3162570"
  },
  {
    "text": "more and more resilience with our application and we're down to the final",
    "start": "3162570",
    "end": "3168870"
  },
  {
    "text": "thing on protecting resources but this is what happens if your application",
    "start": "3168870",
    "end": "3174360"
  },
  {
    "text": "can't handle all the incoming requests memory will be used up threads and",
    "start": "3174360",
    "end": "3181140"
  },
  {
    "text": "sockets are going to be held and this can bring down your whole application",
    "start": "3181140",
    "end": "3186390"
  },
  {
    "text": "but it could also affect downstream applications because they're making requests to you they're expecting you to",
    "start": "3186390",
    "end": "3192510"
  },
  {
    "text": "respond you're not responding they're holding on to memory they're holding on to sockets and that can have as I say a",
    "start": "3192510",
    "end": "3199140"
  },
  {
    "text": "broader effect the term bulkhead",
    "start": "3199140",
    "end": "3206220"
  },
  {
    "start": "3204000",
    "end": "3204000"
  },
  {
    "text": "isolation comes from the nautical world so if any of you have sailed boats or",
    "start": "3206220",
    "end": "3212670"
  },
  {
    "text": "done work on large ships you'll know that they're broken into bulkheads that are isolated so if I was to puncture a",
    "start": "3212670",
    "end": "3219810"
  },
  {
    "text": "part of the ship here this would flood but hopefully the other parts wouldn't",
    "start": "3219810",
    "end": "3225420"
  },
  {
    "text": "flood so the same analogy if one part of my application is having trouble hopefully I can protect the other parts",
    "start": "3225420",
    "end": "3232500"
  },
  {
    "text": "of the application from getting into trouble and my whole application or my ship will not sink",
    "start": "3232500",
    "end": "3240230"
  },
  {
    "text": "how it would look I'm gonna go back to this little local and remote example if",
    "start": "3240980",
    "end": "3246119"
  },
  {
    "text": "I have a local application that's calling a remote application making",
    "start": "3246119",
    "end": "3252180"
  },
  {
    "text": "requests one request two requests no responses yet I get one response it's",
    "start": "3252180",
    "end": "3259470"
  },
  {
    "text": "good I never get the second response now I have one request hanging out holding",
    "start": "3259470",
    "end": "3266309"
  },
  {
    "text": "on to memory holding on to threads I make a couple of more requests I only get one response now I have two",
    "start": "3266309",
    "end": "3272940"
  },
  {
    "text": "outstanding requests I make a couple more requests I only get one response",
    "start": "3272940",
    "end": "3279809"
  },
  {
    "text": "now I have three so imagine this continuing on and on and I'm holding on to these resources and I'm only getting",
    "start": "3279809",
    "end": "3286079"
  },
  {
    "text": "some of my responses back eventually my application will fail if you're doing",
    "start": "3286079",
    "end": "3292260"
  },
  {
    "text": "this as a high-enough wait there's not much else that will happen it will bring",
    "start": "3292260",
    "end": "3297599"
  },
  {
    "text": "down your application so this is what the Pali bulkhead looks like it's made",
    "start": "3297599",
    "end": "3306299"
  },
  {
    "start": "3300000",
    "end": "3300000"
  },
  {
    "text": "up of two parts execution slots and queue slots as an implies execution",
    "start": "3306299",
    "end": "3313440"
  },
  {
    "text": "slots are where requests are executed and queue slots are where you store the next requests that are going to be",
    "start": "3313440",
    "end": "3319770"
  },
  {
    "text": "executed let's say I get three incoming requests there were nothing there with",
    "start": "3319770",
    "end": "3327059"
  },
  {
    "text": "none of the slots were in use those incoming requests are immediately put into execution slots and start executing",
    "start": "3327059",
    "end": "3333859"
  },
  {
    "text": "now let's say before those three or any of those three complete I get six more",
    "start": "3333859",
    "end": "3340589"
  },
  {
    "text": "requests they cannot go into execution slots so they go into the queue slots",
    "start": "3340589",
    "end": "3347270"
  },
  {
    "text": "now I've got three ongoing requests and six queued requests I cannot take any",
    "start": "3347270",
    "end": "3353579"
  },
  {
    "text": "more requests but one comes in anyway that will be rejected with an exception",
    "start": "3353579",
    "end": "3361109"
  },
  {
    "text": "immediately the system that calls me will get a bulkhead exception",
    "start": "3361109",
    "end": "3367670"
  },
  {
    "text": "immediately it'll no I cannot handle another request so it can do whatever",
    "start": "3367670",
    "end": "3372960"
  },
  {
    "text": "throttling that it needs to perform and my application doesn't suck up more",
    "start": "3372960",
    "end": "3378999"
  },
  {
    "text": "resources because I'm never going to",
    "start": "3378999",
    "end": "3384130"
  },
  {
    "text": "have more than some specified number of execution spots I'm probably helping the upstream system too by not overloading",
    "start": "3384130",
    "end": "3390880"
  },
  {
    "text": "it so again I'm helping my own application the downstream application gets errors immediately and the upstream",
    "start": "3390880",
    "end": "3397720"
  },
  {
    "text": "application is being I'm throttling my requests to the option application so again resiliency is at wire across the",
    "start": "3397720",
    "end": "3405849"
  },
  {
    "text": "spectrum let's say one of my execution",
    "start": "3405849",
    "end": "3411640"
  },
  {
    "text": "starts freeze up great one of my queued",
    "start": "3411640",
    "end": "3416910"
  },
  {
    "text": "requests again one of my queued requests",
    "start": "3416910",
    "end": "3428049"
  },
  {
    "text": "we'll move to the execution slot and now I can take another incoming request and the same process continues I'll only",
    "start": "3428049",
    "end": "3435279"
  },
  {
    "text": "execute a certain number I'll only queue a certain number I'm only going to take up a certain amount of resources and",
    "start": "3435279",
    "end": "3441420"
  },
  {
    "text": "nothing more bizarrely for a complicated thing it's",
    "start": "3441420",
    "end": "3446680"
  },
  {
    "text": "written extremely simply I'm saying that this handles HTTP responses I've got",
    "start": "3446680",
    "end": "3453039"
  },
  {
    "text": "three execution spots six cute slots and then this is a delegate that I can use",
    "start": "3453039",
    "end": "3458440"
  },
  {
    "text": "in the event that everything is full and you can use that for logging for scaling",
    "start": "3458440",
    "end": "3463450"
  },
  {
    "text": "for anything you want how this would look across a whole application would be",
    "start": "3463450",
    "end": "3470349"
  },
  {
    "start": "3467000",
    "end": "3467000"
  },
  {
    "text": "something like this let's say your applications up and running and let's pretend that whatever amount of memory",
    "start": "3470349",
    "end": "3477089"
  },
  {
    "text": "threads and sockets we have left is a hundred percent in a way obviously it won't be that or the whole computer but",
    "start": "3477089",
    "end": "3482769"
  },
  {
    "text": "let's say it's a hundred percent of what will be available and let's say I've got 12 different bulkheads it would look",
    "start": "3482769",
    "end": "3492969"
  },
  {
    "text": "something like this as you're getting requests coming in to",
    "start": "3492969",
    "end": "3498700"
  },
  {
    "text": "various parts of your application you're going to limit how much of the overall memory threads sockets any part of that",
    "start": "3498700",
    "end": "3506740"
  },
  {
    "text": "application is going to use so no matter what happens within your application you",
    "start": "3506740",
    "end": "3512380"
  },
  {
    "text": "should be able to contain the amount of memory and the amount of resources so that you'll never run out and hopefully",
    "start": "3512380",
    "end": "3522730"
  },
  {
    "text": "your application remains stable all right that is the last thing that we",
    "start": "3522730",
    "end": "3529119"
  },
  {
    "text": "needed for our little application so hopefully we have a fault tolerant",
    "start": "3529119",
    "end": "3535450"
  },
  {
    "text": "resilient application if you want more",
    "start": "3535450",
    "end": "3540460"
  },
  {
    "start": "3539000",
    "end": "3539000"
  },
  {
    "text": "information I have a plural side course on this I updated it eight or nine",
    "start": "3540460",
    "end": "3546730"
  },
  {
    "text": "months ago to include information on HTTP client Factory it has examples of all of these I have a",
    "start": "3546730",
    "end": "3555850"
  },
  {
    "text": "blog with far more examples and more more and slightly newer stuff",
    "start": "3555850",
    "end": "3561130"
  },
  {
    "text": "particularly the caching one is something a lot of people that was asking me about there is an active slack",
    "start": "3561130",
    "end": "3567670"
  },
  {
    "text": "channel I'm on it from time to time Dylan is on it all the time Dylan the gentleman who is running the project at",
    "start": "3567670",
    "end": "3573850"
  },
  {
    "text": "the moment from the code perspective Steve Gordon and a few other people I some of you may know Steve he does a lot",
    "start": "3573850",
    "end": "3579609"
  },
  {
    "text": "of writing on HTTP client Factory there is a github that you can raise issues on",
    "start": "3579609",
    "end": "3584859"
  },
  {
    "text": "you can contribute if you can that would be wonderful they're always looking for contributors",
    "start": "3584859",
    "end": "3590680"
  },
  {
    "text": "and then they have a blog as well I'll",
    "start": "3590680",
    "end": "3595930"
  },
  {
    "text": "put this slide up again in a moment for you",
    "start": "3595930",
    "end": "3599700"
  },
  {
    "text": "I want to thank you all for coming out I will stick around for questions or",
    "start": "3604880",
    "end": "3610039"
  },
  {
    "text": "anyone wants to know anything else but other than that it is a wrap thank you",
    "start": "3610039",
    "end": "3618559"
  },
  {
    "text": "very much thank you",
    "start": "3618559",
    "end": "3622930"
  }
]