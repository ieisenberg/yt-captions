[
  {
    "text": "all right hello everyone how you enjoying NDC PTO so",
    "start": "3360",
    "end": "9280"
  },
  {
    "text": "far yeah good so my name is Dennis I'm a manager at Phoenix contact don't worry",
    "start": "9280",
    "end": "16560"
  },
  {
    "text": "I'm a manager now I used to be a software engineer and I thank you Jody and I'm actually leading a software",
    "start": "16560",
    "end": "24359"
  },
  {
    "text": "uh development team in the industrial cabinet Solutions business unit at Phoenix contact and welcome to my talk",
    "start": "24359",
    "end": "31840"
  },
  {
    "text": "introduction to on saafe C or alternatively and more accurately calling native code and crashing in",
    "start": "31840",
    "end": "38559"
  },
  {
    "text": "entirely new ways you won't believe how you'll be able to crash when I'm done with you to crash and burn but before we",
    "start": "38559",
    "end": "45280"
  },
  {
    "text": "go into this and we got a lot to cover the talk focuses very very much on the",
    "start": "45280",
    "end": "50680"
  },
  {
    "text": "uh what and the how to do it but I talk only a little bit about the why because the the what and the how that",
    "start": "50680",
    "end": "58199"
  },
  {
    "text": "already takes a lot of time so really there are three main scenarios I can think of why this will be useful one in",
    "start": "58199",
    "end": "65080"
  },
  {
    "text": "your quest to avoid not invented tear syndrome I hope you try to avoid that you'll find a library out there that",
    "start": "65080",
    "end": "70520"
  },
  {
    "text": "does exactly what you need to do but it's native and there is no manag rapper",
    "start": "70520",
    "end": "76759"
  },
  {
    "text": "now for anything that's popular this is kind of unlikely at this point that net has been around for a long time but this",
    "start": "76759",
    "end": "82799"
  },
  {
    "text": "might happen if it's more Niche or maybe something developed internally secondly uh in your quest to",
    "start": "82799",
    "end": "89439"
  },
  {
    "text": "avoid inventor te syndrome you find a library that does exactly what it needed to do there is a managed rapper it's",
    "start": "89439",
    "end": "95079"
  },
  {
    "text": "stable it's great but the rapper doesn't work the way you need it to work and this equal light example I have in the",
    "start": "95079",
    "end": "100920"
  },
  {
    "text": "talk it's a real world example that falls in that category and third I just want to mention it totally out of scope",
    "start": "100920",
    "end": "106799"
  },
  {
    "text": "here uh you're starting a brand new Green Field project and you want to do something that is not fast enough or",
    "start": "106799",
    "end": "113520"
  },
  {
    "text": "impossible to do in managed code and you need to create a mixed native and",
    "start": "113520",
    "end": "118680"
  },
  {
    "text": "managed solution so that's what this is really all",
    "start": "118680",
    "end": "124039"
  },
  {
    "text": "about so what we're going to cover is first we need to understand what is unsafe code in the first place it's an",
    "start": "124399",
    "end": "129959"
  },
  {
    "text": "introduction so to probably explain what that actually means uh what unsafe C features are",
    "start": "129959",
    "end": "136519"
  },
  {
    "text": "there because once we opt into unsafe uh code there's a whole new language features that are now all of a sudden",
    "start": "136519",
    "end": "142519"
  },
  {
    "text": "available to us memory layout is going to be interesting it's one of these things you",
    "start": "142519",
    "end": "147800"
  },
  {
    "text": "had not to worry about until you hit This Strange New World of uh unsafe C",
    "start": "147800",
    "end": "154959"
  },
  {
    "text": "and then platform invoke this is where it gets interesting in a sense this is why you need all the stuff I talk about",
    "start": "154959",
    "end": "160640"
  },
  {
    "text": "until this point this is what we actually want to need this is this calling native code and crashing in cool",
    "start": "160640",
    "end": "166680"
  },
  {
    "text": "ways and then when we have unmanaged resources we need to manage them somehow we talk about the the uh management of",
    "start": "166680",
    "end": "175480"
  },
  {
    "text": "resources the lifetime callbacks that is something we will probably you know",
    "start": "175480",
    "end": "180879"
  },
  {
    "text": "encounter at one point or another in native code and then there's a couple more pointers and hints pointers no pun",
    "start": "180879",
    "end": "187879"
  },
  {
    "text": "intended about what else you should probably know so what is unsafe code and",
    "start": "187879",
    "end": "193840"
  },
  {
    "text": "I start this with this little example here now consider this there is a string",
    "start": "193840",
    "end": "201319"
  },
  {
    "text": "and we initializing this with hello world so far so good and then this piece of code says okay now we're calling an",
    "start": "201319",
    "end": "207400"
  },
  {
    "text": "extension method on that string called asking to Upper and then I print this to the",
    "start": "207400",
    "end": "213360"
  },
  {
    "text": "console and the commenter claims at that point all of a sudden this string is now all",
    "start": "213360",
    "end": "219480"
  },
  {
    "text": "uppercase who here thinks this is actually possible okay a",
    "start": "219480",
    "end": "226159"
  },
  {
    "text": "few so I guess everybody who didn't raise their hand probably thinks but strings are immutable and immutable",
    "start": "226159",
    "end": "232120"
  },
  {
    "text": "means I create them I can't change them I change them by creating a new one with whatever change I",
    "start": "232120",
    "end": "238280"
  },
  {
    "text": "want so yes this is possible and yes this is a very bad idea",
    "start": "238280",
    "end": "245280"
  },
  {
    "text": "because everybody assumes that your strings are immutable so if you start now mutating immutable strings you're",
    "start": "245280",
    "end": "252360"
  },
  {
    "text": "you're asking for trouble uh maybe there's some some Niche um scenario where it's a",
    "start": "252360",
    "end": "258959"
  },
  {
    "text": "new string nobody else has a reference to it and you want want to do something like this but generally just don't the",
    "start": "258959",
    "end": "264160"
  },
  {
    "text": "reason I'm starting with this anyway is simply you can forget most of what you",
    "start": "264160",
    "end": "269280"
  },
  {
    "text": "hear to today you may remember some terms and you you know my presentation and what you look up in the",
    "start": "269280",
    "end": "274360"
  },
  {
    "text": "documentation but this you need to remember unsafe code is to be taken very literally it means the type and memory",
    "start": "274360",
    "end": "281440"
  },
  {
    "text": "safety guarantees you are very used to and very attached to they go out of the window there's just memory and we can do",
    "start": "281440",
    "end": "287639"
  },
  {
    "text": "whatever we want with it now what does the specification say",
    "start": "287639",
    "end": "293919"
  },
  {
    "text": "it kind of says the same thing but in more elaborate nicer terms so it talks about that we know can declare and",
    "start": "293919",
    "end": "300360"
  },
  {
    "text": "operate on pointers and we can convert pointers to ins and so forth the last",
    "start": "300360",
    "end": "306120"
  },
  {
    "text": "sentence of this little paragraph is interesting though it says in a sense writing unsafe code is much like writing",
    "start": "306120",
    "end": "311600"
  },
  {
    "text": "C code within a c program and that is true in two ways one is this you now",
    "start": "311600",
    "end": "317360"
  },
  {
    "text": "have pointers you have memory you can do whatever you want with this memory but also syntactically if you've dabbled in",
    "start": "317360",
    "end": "322600"
  },
  {
    "text": "C a little bit before then you'll recognize most of the syntax and of course all the problems I'm going to",
    "start": "322600",
    "end": "328360"
  },
  {
    "text": "talk about that unsafe code has so going to the crashing part it's",
    "start": "328360",
    "end": "335639"
  },
  {
    "text": "my favorite part so unsafe code means new kinds of bugs so for once now we can",
    "start": "335639",
    "end": "341000"
  },
  {
    "text": "have buffer overflow you know these things that we see vulnerabilities because it's a buffer overflow and then we can eject code guess what we can have",
    "start": "341000",
    "end": "347639"
  },
  {
    "text": "this in our net application too it's great we don't need c C++ we can do this ourselves so I have a pointer to some",
    "start": "347639",
    "end": "354680"
  },
  {
    "text": "buffer and I can't read past the limit of this buffer or I can and write even",
    "start": "354680",
    "end": "361759"
  },
  {
    "text": "worse um if I'm lucky I get an excess violation and I say this this is really",
    "start": "361759",
    "end": "367960"
  },
  {
    "text": "the good case because now you know there's a problem it crashed you can debug and see what you're doing wrong",
    "start": "367960",
    "end": "373960"
  },
  {
    "text": "with your pointers because it might actually run it might run for a long time there might be difference in Behavior between debug and Retail builds",
    "start": "373960",
    "end": "381319"
  },
  {
    "text": "and going back right there is sometimes literally decade old vulnerabilities in",
    "start": "381319",
    "end": "386680"
  },
  {
    "text": "what was a case bash I think for example uh this might actually go unnoticed for a long time and be",
    "start": "386680",
    "end": "392400"
  },
  {
    "text": "exploitable speaking of exploits there is stack and Heap corruption so yeah reading is bad enough but if I'm writing",
    "start": "392400",
    "end": "398599"
  },
  {
    "text": "and Reading Writing past a uh buffer boundary then I'm going to overwrite",
    "start": "398599",
    "end": "403800"
  },
  {
    "text": "something that's there maybe it's not in use this time you run the application",
    "start": "403800",
    "end": "409280"
  },
  {
    "text": "but maybe you will override something important yeah",
    "start": "409280",
    "end": "415319"
  },
  {
    "text": "okay so that's a that's an",
    "start": "415319",
    "end": "421160"
  },
  {
    "text": "it's very unsafe yes I I don't feel safe at all right now so we",
    "start": "421160",
    "end": "426560"
  },
  {
    "text": "back okay yeah this new bux see even even this is affected somehow I can't",
    "start": "426560",
    "end": "432319"
  },
  {
    "text": "explain that so you have to ask the AV crew uh so yeah we can corrupt stuff we might in you know introduce your",
    "start": "432319",
    "end": "438639"
  },
  {
    "text": "vulnerabilities we can have dangling pointers U this is a classic in cc++ land but good news we have two",
    "start": "438639",
    "end": "445479"
  },
  {
    "text": "variations of this so the classic classic is the use after free I have a",
    "start": "445479",
    "end": "450599"
  },
  {
    "text": "pointer to an object it's all good I free this object but I still have",
    "start": "450599",
    "end": "455919"
  },
  {
    "text": "this pointer and I still de reference it so bad things can happen it's an",
    "start": "455919",
    "end": "461720"
  },
  {
    "text": "undefined State maybe I'll just read some old data maybe somebody else has written already there and read garbage",
    "start": "461720",
    "end": "467560"
  },
  {
    "text": "again if you're lucky you get an access violation because the page is gone but since we're done n for us it's",
    "start": "467560",
    "end": "473680"
  },
  {
    "text": "even worse they can also be used after relocation so the garbage collector if you remember the there two things it",
    "start": "473680",
    "end": "480560"
  },
  {
    "text": "collects garbage as in okay these objects are not reachable we're going to free them but it also compacts the Heap",
    "start": "480560",
    "end": "486159"
  },
  {
    "text": "it moves objects around the memory so what can happen I can get a a pointer to",
    "start": "486159",
    "end": "493120"
  },
  {
    "text": "a field of an object and that object could move around after I got this pointer then I D",
    "start": "493120",
    "end": "498919"
  },
  {
    "text": "reference and again who knows what I got and memory leaks and I like to call",
    "start": "498919",
    "end": "506400"
  },
  {
    "text": "this true memory leaks so yes you can you can leak memory in.net in that",
    "start": "506400",
    "end": "511720"
  },
  {
    "text": "typically you know you have references that you didn't mean to keep but you keep them anyway and delegates are a nice way to do this right some event",
    "start": "511720",
    "end": "517760"
  },
  {
    "text": "handlers that you need to clean up but you forget they accumulate but often times they're somewhat easy",
    "start": "517760",
    "end": "524240"
  },
  {
    "text": "than to spot you know you know you have a leak you create a memory dump you look at the Heap and you know okay these are",
    "start": "524240",
    "end": "530320"
  },
  {
    "text": "all these objects I didn't expect you can see where they're coming from here this means I have unmanaged Heap",
    "start": "530320",
    "end": "537120"
  },
  {
    "text": "allocations and at some point I have an allocation for which I don't have a pointer anymore at all there is no way",
    "start": "537120",
    "end": "543000"
  },
  {
    "text": "to free this short of restarting my process and there's also tools to then",
    "start": "543000",
    "end": "548519"
  },
  {
    "text": "debug this and analyze it but while your process is running really there's nothing you can do about Li memory you have to exit the process to free it all",
    "start": "548519",
    "end": "556360"
  },
  {
    "text": "right so unsafe C features let's break down this example I start with again",
    "start": "556360",
    "end": "561760"
  },
  {
    "text": "please don't do that it's a bad idea it's a very very bad idea but yeah it's a great starter so first of all you know",
    "start": "561760",
    "end": "568120"
  },
  {
    "text": "the Declaration of the this method it says it's unsafe so we're telling the compiler that we want to do something",
    "start": "568120",
    "end": "574200"
  },
  {
    "text": "with pointers with memory addresses other than that is just a normal extension method nothing too",
    "start": "574200",
    "end": "579600"
  },
  {
    "text": "fancy but then the first line of the body as a fixed CHP pointer P equals",
    "start": "579600",
    "end": "584680"
  },
  {
    "text": "s so got a pointer already and what this does it pins this string s and gets the",
    "start": "584680",
    "end": "590720"
  },
  {
    "text": "address now pinning this is a mechanism in the GC where can say please do not move this object that's an option I have",
    "start": "590720",
    "end": "598040"
  },
  {
    "text": "this would actually also then or not would this does then prevent the uh dangling pointer because an object was",
    "start": "598040",
    "end": "603279"
  },
  {
    "text": "relocated the problem is I should not do this for too long for any object because obviously this is not then subject to",
    "start": "603279",
    "end": "610120"
  },
  {
    "text": "compaction right it's it stays there the GC can compact around this but it can't move whatever I pinned so we do this as",
    "start": "610120",
    "end": "617399"
  },
  {
    "text": "short as possible um but I have to do this when I would get the address for example here",
    "start": "617399",
    "end": "622839"
  },
  {
    "text": "of the first element of my string so once I got this I iterate over my string",
    "start": "622839",
    "end": "628160"
  },
  {
    "text": "which really is a character array and then for each element here I got this",
    "start": "628160",
    "end": "634200"
  },
  {
    "text": "little if statement where I look at the current element so Pi I got pointer element",
    "start": "634200",
    "end": "640120"
  },
  {
    "text": "access which looks a lot like an array access because this is where the C comes in again see pointer and arrays there's",
    "start": "640120",
    "end": "647000"
  },
  {
    "text": "a very blurry line between those two so it's basically indexed access I look at this this in a certain value",
    "start": "647000",
    "end": "653279"
  },
  {
    "text": "range and if if yes so it's the read then I write to it I change it from lower to uppercase",
    "start": "653279",
    "end": "661040"
  },
  {
    "text": "and this is opt in not only in the code that I have to use the unsafe keyword also I have to say to the compile that I",
    "start": "661240",
    "end": "667440"
  },
  {
    "text": "really really want to do this so if you use the default um build targets for example this is not set you would have",
    "start": "667440",
    "end": "673639"
  },
  {
    "text": "to set it in your project settings or you can also set this um as a flag if",
    "start": "673639",
    "end": "679160"
  },
  {
    "text": "you invoke CSC directly and if you not you get this nice CS 0227 says okay it",
    "start": "679160",
    "end": "685519"
  },
  {
    "text": "has unsafe code in it but you didn't tell me that that's okay it's actually compiled",
    "start": "685519",
    "end": "691760"
  },
  {
    "text": "error so what else can we do with addresses so there's a whole bunch of things I can get addresses off you",
    "start": "691760",
    "end": "698040"
  },
  {
    "text": "already saw one example there's another one where uh I have a managed bite arate",
    "start": "698040",
    "end": "703560"
  },
  {
    "text": "and again I can say fixed I want to pin this this array and then say bite",
    "start": "703560",
    "end": "709399"
  },
  {
    "text": "pointer bite pointer equals manage bite array that gives me the address of the first element what's interesting in the",
    "start": "709399",
    "end": "715360"
  },
  {
    "text": "first line you don't need to use any operator in this case you just give the name of the array again goes back to how",
    "start": "715360",
    "end": "721800"
  },
  {
    "text": "array SL pointers are handled in C then the second example I want to get a pointer to a field of an object in this",
    "start": "721800",
    "end": "729000"
  },
  {
    "text": "case again I pin it I say fixed and I say in pointer in pointer equals address",
    "start": "729000",
    "end": "734320"
  },
  {
    "text": "of underscore integer now I've an address of this um of this field and fix",
    "start": "734320",
    "end": "741320"
  },
  {
    "text": "that is also a a a scope but if I now copy this address out and keep it and",
    "start": "741320",
    "end": "747680"
  },
  {
    "text": "pass where my fix end then I might have one of these dangling pointers going back to that um I can get",
    "start": "747680",
    "end": "753279"
  },
  {
    "text": "the address for example of an argument or local they're kind of similar anyway so I get my address of double parameter",
    "start": "753279",
    "end": "758920"
  },
  {
    "text": "double um address of character and then of course I can dreference the pointer is an address right some address in",
    "start": "758920",
    "end": "765880"
  },
  {
    "text": "memory and I can say asteris double pointer I de de D reference it God damn",
    "start": "765880",
    "end": "771000"
  },
  {
    "text": "it and that gives me the value at that address strs are a bit special in that I",
    "start": "771000",
    "end": "777600"
  },
  {
    "text": "can also get addresses of structs and in this case there is the D reference pointer and acccess member which is just",
    "start": "777600",
    "end": "784399"
  },
  {
    "text": "a shortcut I don't have to dreference the struct pointer first and then access",
    "start": "784399",
    "end": "789440"
  },
  {
    "text": "the element I can do this in one operation with minus greater than and again I can set elements I can read",
    "start": "789440",
    "end": "798519"
  },
  {
    "text": "them and finally dealing with pointers and this is very important I re I've Rewritten ask key to Upper in this way",
    "start": "798519",
    "end": "805360"
  },
  {
    "text": "which is longer and harder to read this is just to illust tra pointer arithmetic",
    "start": "805360",
    "end": "810720"
  },
  {
    "text": "basically so in the first one I had a for Loop and here I say okay again I",
    "start": "810720",
    "end": "816040"
  },
  {
    "text": "need to pin my my string and get the address of the first character in there",
    "start": "816040",
    "end": "822920"
  },
  {
    "text": "but then first I do a copy as a CH pointer pointer equals P the reason I do",
    "start": "822920",
    "end": "828040"
  },
  {
    "text": "this P here is one of the very rare CA I'm not sure it's the only one but it's definitely very rare case where you have",
    "start": "828040",
    "end": "833720"
  },
  {
    "text": "a local Inc shop that's actually read only you cannot change P so if you want to do anything with that you have to",
    "start": "833720",
    "end": "839800"
  },
  {
    "text": "copy it first so this is my inclusive start address of the string I want to do something with and then I calculate the",
    "start": "839800",
    "end": "848519"
  },
  {
    "text": "exclusive uh end address so say Char pointer end equals pointer plus s do",
    "start": "848519",
    "end": "854000"
  },
  {
    "text": "length and this is poter arithmetic so this is adding a an integer to a pointer",
    "start": "854000",
    "end": "860040"
  },
  {
    "text": "what does that mean so it doesn't actually add those two numbers as is as if they were both integer it does",
    "start": "860040",
    "end": "866800"
  },
  {
    "text": "consider the type so let's say the string is 10 characters",
    "start": "866800",
    "end": "872519"
  },
  {
    "text": "long a character in net is 2 bytes long so it's the number 10 times the",
    "start": "872519",
    "end": "881000"
  },
  {
    "text": "size of the type in this case character two bytes so we adding 20 the actual",
    "start": "881000",
    "end": "886399"
  },
  {
    "text": "number 20 to this address so Point arithmetic always considers the type so",
    "start": "886399",
    "end": "892720"
  },
  {
    "text": "now I have my end address and now I'm just doing a while loop which also shows you pointer comparison that's probably not too exciting I mean they are numbers",
    "start": "892720",
    "end": "900560"
  },
  {
    "text": "in the end so I can compare them is it the same is it larger than or less",
    "start": "900560",
    "end": "906279"
  },
  {
    "text": "than and then also more for the sake of completeness in this case I didn't use the element access here I explicitly de",
    "start": "906279",
    "end": "913480"
  },
  {
    "text": "reference and and say is it in my value range and if so then change it from lower to uppercase and then again the",
    "start": "913480",
    "end": "920800"
  },
  {
    "text": "last one the pointer increment works the same way so it's my pointer plus one but meaning one times the size of that type",
    "start": "920800",
    "end": "928199"
  },
  {
    "text": "so in this case one * two so adding to the to the address to get to the next",
    "start": "928199",
    "end": "934160"
  },
  {
    "text": "item now I showed you a whole bunch of um examples of getting addresses of",
    "start": "934160",
    "end": "939319"
  },
  {
    "text": "stuff but in terms of actual rules what can I get addresses of so basically you",
    "start": "939319",
    "end": "944360"
  },
  {
    "text": "can get addresses of anything that is a value type so your Primitives your Longs",
    "start": "944360",
    "end": "950240"
  },
  {
    "text": "your doubles uh that includes structs also if they're generic it's all good as",
    "start": "950240",
    "end": "955319"
  },
  {
    "text": "long as there's no object efferences in there so this is is where the compiler draws the line and sees oh there's an",
    "start": "955319",
    "end": "961120"
  },
  {
    "text": "object reference in there you can't get the address not allowed so and arrays of value type are",
    "start": "961120",
    "end": "968759"
  },
  {
    "text": "an exception because the array is a reference type but um you know you're",
    "start": "968759",
    "end": "974120"
  },
  {
    "text": "getting the address of the first element so what's in the array needs to be a value type following these rules then I",
    "start": "974120",
    "end": "980240"
  },
  {
    "text": "can get the address of the array being the address of the first element and then strings we've seen this in the",
    "start": "980240",
    "end": "985759"
  },
  {
    "text": "example they're just a fancy character array anyway so getting address of string is the same basically as getting",
    "start": "985759",
    "end": "992000"
  },
  {
    "text": "the address of a character array then if you violate this and is say new object",
    "start": "992000",
    "end": "997240"
  },
  {
    "text": "and you want to get address of this then you get a nice compiler error here cs28",
    "start": "997240",
    "end": "1002440"
  },
  {
    "text": "said you can't do this unless you're on C 11 so had this talk all polish you",
    "start": "1002440",
    "end": "1008560"
  },
  {
    "text": "can't do this I was used to not being able to do this for 20 years and then Microsoft could now now we make it possible now this comes with some uh",
    "start": "1008560",
    "end": "1017199"
  },
  {
    "text": "restrictions though so it is now possible in C 11 you get a warning though so in a sense the compiler still",
    "start": "1017199",
    "end": "1023440"
  },
  {
    "text": "doesn't like you doing this but you're allowed to now but what does this",
    "start": "1023440",
    "end": "1028678"
  },
  {
    "text": "mean so in so in order to demonstrate this and quite frankly when there was",
    "start": "1028679",
    "end": "1033918"
  },
  {
    "text": "new also just to try it out myself I created my little example here so I have a manage type it has a single U short",
    "start": "1033919",
    "end": "1040798"
  },
  {
    "text": "field I initialize it with beef because that joke has never been done",
    "start": "1040799",
    "end": "1046038"
  },
  {
    "text": "before so I knew up an instance of this so I got managed an object reference to",
    "start": "1046039",
    "end": "1051799"
  },
  {
    "text": "an instance of managed type so then I pin it and I got some addresses here I got the address of that one field and",
    "start": "1051799",
    "end": "1058960"
  },
  {
    "text": "then I'm getting because I can now I'm getting the address of that",
    "start": "1058960",
    "end": "1065240"
  },
  {
    "text": "reference and you have to keep this in mind so references conceptually they're opaque handles right they they allow you",
    "start": "1065240",
    "end": "1072559"
  },
  {
    "text": "to access an object but how you don't really worry about implementation wise",
    "start": "1072559",
    "end": "1078520"
  },
  {
    "text": "it is actually a pointer so that means if I get a pointer to an object reference I have a pointer",
    "start": "1078520",
    "end": "1085039"
  },
  {
    "text": "to a pointer there two levels of interaction already so this is pretty nasty but it gets better so I'm printing",
    "start": "1085039",
    "end": "1091600"
  },
  {
    "text": "out all these addresses I'm printing out the address of the reference the address of what this points to the actual object",
    "start": "1091600",
    "end": "1099039"
  },
  {
    "text": "the field address and the offset if any and you'll find something like this okay the ref address boring it's something on",
    "start": "1099039",
    "end": "1105960"
  },
  {
    "text": "the stack great then we got the object on the Heap and we got the address of",
    "start": "1105960",
    "end": "1111400"
  },
  {
    "text": "the single field here and you see there's an offset of eight on 64",
    "start": "1111400",
    "end": "1118440"
  },
  {
    "text": "bit and those two statements combined probably also already make you think",
    "start": "1118440",
    "end": "1123480"
  },
  {
    "text": "this is probably a pointer of some sort yes it is it's the pointed to the method table so for p invoke it's completely",
    "start": "1123480",
    "end": "1129799"
  },
  {
    "text": "useless um I should really try at some point if you can write to those addresses because if you can you can",
    "start": "1129799",
    "end": "1136280"
  },
  {
    "text": "then destroy the um the method table um pointer that this instance has and if",
    "start": "1136280",
    "end": "1141799"
  },
  {
    "text": "you then dreference this you can destroy that table entirely theoretically I I hope that's read only but the bigger",
    "start": "1141799",
    "end": "1148280"
  },
  {
    "text": "point is here the object the object address is not that useful for p invoke because as what am I now giving this out",
    "start": "1148280",
    "end": "1155480"
  },
  {
    "text": "could say void pointer so a pointer that is actually not typed it's usually not that useful because the first field is",
    "start": "1155480",
    "end": "1162880"
  },
  {
    "text": "then pointing to My Method table so I kind of have to add this these eight bytes or four B on",
    "start": "1162880",
    "end": "1169880"
  },
  {
    "text": "32bit if anybody can think of a reason why you want to do this and to be fair as far as I know there is a reason for",
    "start": "1169880",
    "end": "1176280"
  },
  {
    "text": "some edge cases maybe in the runtime they didn't do this just for fun but for what I'm talking about you have some",
    "start": "1176280",
    "end": "1182440"
  },
  {
    "text": "native library that you want to use or maybe you have to create your own it can be done now but I don't think it's all",
    "start": "1182440",
    "end": "1188679"
  },
  {
    "text": "that useful but you should understand that it's a thing and how it works so going back to uh the more",
    "start": "1188679",
    "end": "1196159"
  },
  {
    "text": "useful C language features if you will um if it is small and the lifetime is",
    "start": "1196159",
    "end": "1202200"
  },
  {
    "text": "limited I can have fixed size buffers inside structs and this is a common pattern you'll find in Native apis U",
    "start": "1202200",
    "end": "1209679"
  },
  {
    "text": "that you have a struct there it's input or output and it has a bunch of you know primitive Fields ins and whatnot and",
    "start": "1209679",
    "end": "1215280"
  },
  {
    "text": "then maybe like a 128 byte buffer for a string or whatever often it's a",
    "start": "1215280",
    "end": "1221000"
  },
  {
    "text": "string um the limitation here is the type of those fix siiz Buffs in a struck",
    "start": "1221000",
    "end": "1227159"
  },
  {
    "text": "they can only be of primitive so I can't have other structs in there so it has to be your your bite short Longs float",
    "start": "1227159",
    "end": "1234200"
  },
  {
    "text": "doubles um buol okay see the other thing I can do is I can do a stack alloc so that",
    "start": "1234200",
    "end": "1241280"
  },
  {
    "text": "literally allocates memory on the stack and here I'm again free to use any kind",
    "start": "1241280",
    "end": "1246520"
  },
  {
    "text": "of value type that I want those strs are are possible again but that is also not suitable for",
    "start": "1246520",
    "end": "1252760"
  },
  {
    "text": "all cases so for one it's on the stack and um it used to be I think it's still the case that the default stack size on",
    "start": "1252760",
    "end": "1258919"
  },
  {
    "text": "Windows is one megabyte so if you need a 2 megabyte buffer and you try to",
    "start": "1258919",
    "end": "1264080"
  },
  {
    "text": "allocate this yeah well you got a stuck overflow not good um and of course then maybe you",
    "start": "1264080",
    "end": "1270240"
  },
  {
    "text": "wonder what's going on and you stack overflow stack overflows on stack overflows and it's stack Overflow",
    "start": "1270240",
    "end": "1276159"
  },
  {
    "text": "Inception so size but also Lifetime right so it's on the stack so as soon as",
    "start": "1276159",
    "end": "1281840"
  },
  {
    "text": "whatever method performed the stack Alo returns this is gone or if you keep a pointer you got a dangling pointer",
    "start": "1281840",
    "end": "1288679"
  },
  {
    "text": "so we'll talk about what else you can do a bit later but those are some things",
    "start": "1288679",
    "end": "1294400"
  },
  {
    "text": "you can do for these buffers but before we go to that let's talk about memory",
    "start": "1294400",
    "end": "1299840"
  },
  {
    "text": "layout this is interesting because so far if you're new to unsafe C and native",
    "start": "1299840",
    "end": "1305120"
  },
  {
    "text": "code you don't have to worry about this right you load assemblies they're full of Il and the runtime makes sure that",
    "start": "1305120",
    "end": "1311400"
  },
  {
    "text": "everything just works it's great I like it but of course it's not true as soon as uh Native Cod is involved and one",
    "start": "1311400",
    "end": "1318520"
  },
  {
    "text": "thing you need to know about is packing size and that literally uh is one",
    "start": "1318520",
    "end": "1324520"
  },
  {
    "text": "mechanism that plays into how fields are exactly put onto which offsets the",
    "start": "1324520",
    "end": "1329799"
  },
  {
    "text": "memory so I'm starting here with my default packing size meaning I don't specify anything which in C sh is",
    "start": "1329799",
    "end": "1337000"
  },
  {
    "text": "actually equivalent to me saying struct layout sequential Peg size zero meaning default of the platform and in this case",
    "start": "1337000",
    "end": "1344440"
  },
  {
    "text": "I just have two bytes and I have a long and the overal size is 60 why because the runtime likes to align",
    "start": "1344440",
    "end": "1351520"
  },
  {
    "text": "fields on natural boundaries so your character your short they're two byte",
    "start": "1351520",
    "end": "1357320"
  },
  {
    "text": "they supposed to be aligned on two bite boundaries your ins and your onside ins",
    "start": "1357320",
    "end": "1362520"
  },
  {
    "text": "they're four bytes so they are supposed to be aligned on four bite boundaries and so on so B1 starts at zero then B2",
    "start": "1362520",
    "end": "1371200"
  },
  {
    "text": "followers at offs one but then long needs to be aligned on this 8 by boundary hence 16 and what I can do now",
    "start": "1371200",
    "end": "1379039"
  },
  {
    "text": "is I can say Okay I want a different packing size meaning I basically specify a different maximum if you will so again",
    "start": "1379039",
    "end": "1386720"
  },
  {
    "text": "the runtime will look at all the fields and their types and for the bytes it doesn't matter but then for the long it goes okay the long is 8 B but you told",
    "start": "1386720",
    "end": "1393679"
  },
  {
    "text": "me packing size four four is smaller than eight so I'm going to pick that so in this case I end up with 12 now first",
    "start": "1393679",
    "end": "1401120"
  },
  {
    "text": "of all obviously this has to match between your structs and the native structs otherwise things won't work so",
    "start": "1401120",
    "end": "1407279"
  },
  {
    "text": "as a general if you got your um your DL Imports and",
    "start": "1407279",
    "end": "1412320"
  },
  {
    "text": "your structs all the stuff we're still going to get to defined in manage code and you're sure the types match",
    "start": "1412320",
    "end": "1417840"
  },
  {
    "text": "correctly but it still won't work this might be a reason why and a reason also why you might mess",
    "start": "1417840",
    "end": "1425720"
  },
  {
    "text": "with this generally speaking but especially with the on the native Library side so for for your RAM for",
    "start": "1425720",
    "end": "1431640"
  },
  {
    "text": "running locally it probably doesn't matter all this much but what if you use your strug to send data over Network or",
    "start": "1431640",
    "end": "1437919"
  },
  {
    "text": "write it to disk so in the first example we have six bytes of padding this is",
    "start": "1437919",
    "end": "1443520"
  },
  {
    "text": "never going to be useful it's waste so if we sent this over the network or we write it dis we have these six bytes um",
    "start": "1443520",
    "end": "1450480"
  },
  {
    "text": "wasted every time probably not that much of a deal for once or twice but what if I have a million of these things",
    "start": "1450480",
    "end": "1456960"
  },
  {
    "text": "so might actually want to want to do this for certain use cases it gets better though this is not",
    "start": "1456960",
    "end": "1463640"
  },
  {
    "text": "enough so in C there's a thing called a union um and I need to come up with",
    "start": "1463640",
    "end": "1468679"
  },
  {
    "text": "better names so this is strictly speaking not a union because in a union all fields are at offset zero they don't",
    "start": "1468679",
    "end": "1474200"
  },
  {
    "text": "have to be all the same size but they all start at the same address but it's still a nice um example",
    "start": "1474200",
    "end": "1481039"
  },
  {
    "text": "to talk about explicit layout and you can take this literally so when I say",
    "start": "1481039",
    "end": "1486240"
  },
  {
    "text": "explicit I'm telling the WR time I'm telling you for every single field what the offset is and I actually then have",
    "start": "1486240",
    "end": "1492440"
  },
  {
    "text": "to tell it what the offsets are so if I omit one of those field offset attributes I'm going to get compile time",
    "start": "1492440",
    "end": "1498799"
  },
  {
    "text": "error because what compiler says well you said you're going to be explicit and you're not being explicit make up your mind I don't know what to do",
    "start": "1498799",
    "end": "1506240"
  },
  {
    "text": "here and this is interesting in that it's also a harmless example so I have a short value at zero and then assuming",
    "start": "1506240",
    "end": "1513799"
  },
  {
    "text": "it's a little endian system I got the low bite at zero and the high bite at one which is the definition of short and",
    "start": "1513799",
    "end": "1520279"
  },
  {
    "text": "I can read and write them now independently if I choose to and there might actually be use cases for that",
    "start": "1520279",
    "end": "1525799"
  },
  {
    "text": "that maybe not this EXA Maybe this even exactly but you have an INT or long you want to read certain btes of it there's",
    "start": "1525799",
    "end": "1531880"
  },
  {
    "text": "a way to do it and notice what's not there there is no unsafe in here as a keyword as far as the type system is",
    "start": "1531880",
    "end": "1538880"
  },
  {
    "text": "concerned this is perfectly fine um and how this is used in native",
    "start": "1538880",
    "end": "1545320"
  },
  {
    "text": "code is it's a way to basically be able to return different types of data back to a caller or into a caller right goes",
    "start": "1545320",
    "end": "1551840"
  },
  {
    "text": "both ways it's certain arguments might be an in or along depending on certain",
    "start": "1551840",
    "end": "1557320"
  },
  {
    "text": "other arguments or some State um and of",
    "start": "1557320",
    "end": "1563520"
  },
  {
    "text": "course it should be then clear what the correct one is to actually use because I",
    "start": "1563520",
    "end": "1569240"
  },
  {
    "text": "could do something like this can throw a pointer in here and also more more generally",
    "start": "1569240",
    "end": "1575799"
  },
  {
    "text": "speaking one thing that allows me to do that otherwise not possible the net I can have a uh sorry I should say in C is",
    "start": "1575799",
    "end": "1582760"
  },
  {
    "text": "a reinterpret cast meaning normally when you cast from a long long to an in sorry",
    "start": "1582760",
    "end": "1588799"
  },
  {
    "text": "from long to a double or the other way around it retains the value as far as possible so the value ranges are not the",
    "start": "1588799",
    "end": "1595440"
  },
  {
    "text": "same so you might lose Precision uh you might get an overflow but that aside right it's keeping the",
    "start": "1595440",
    "end": "1602000"
  },
  {
    "text": "actual value here it's just keeping the bit array what's in memory it's just interpreting it different ways so I say",
    "start": "1602000",
    "end": "1609960"
  },
  {
    "text": "okay I create a new struct here I say long 47 so I got",
    "start": "1609960",
    "end": "1615919"
  },
  {
    "text": "47 as in coded for along in memory but then I read it as a double Again",
    "start": "1615919",
    "end": "1621200"
  },
  {
    "text": "reinterpret cast the bits don't change at all I just read them now as if I had written a double and it prints this it's",
    "start": "1621200",
    "end": "1628399"
  },
  {
    "text": "a slightly different number than the one I wrote slight slightly slightly and then of course if I now have interpret",
    "start": "1628399",
    "end": "1634880"
  },
  {
    "text": "the same bit pattern as a pointer yeah good luck so yeah this is something that",
    "start": "1634880",
    "end": "1641640"
  },
  {
    "text": "you'll find um it should be clear what to read and write depending on what call you're making what state you're in and",
    "start": "1641640",
    "end": "1647600"
  },
  {
    "text": "hopefully it's documented but this is important to get right one more thing before we before we",
    "start": "1647600",
    "end": "1652919"
  },
  {
    "text": "move on there is a hint in the documentation about explicit uh layout and how it relates to the packing size",
    "start": "1652919",
    "end": "1660919"
  },
  {
    "text": "and I read this and I got confused I'm not a native speaker so I thought okay maybe it's just me but I thought this could be read as in certain cases the",
    "start": "1660919",
    "end": "1669720"
  },
  {
    "text": "offset are not honored that didn't sound right though so what did I do I just tried",
    "start": "1669720",
    "end": "1676320"
  },
  {
    "text": "it so so again a simple example here I got a bite an INT and along uh explicit",
    "start": "1676320",
    "end": "1682960"
  },
  {
    "text": "layout the offsets are picked so that there is no overlap and no",
    "start": "1682960",
    "end": "1688120"
  },
  {
    "text": "gaps and in one case I don't specify anything so whatever the platform default is I'll get and in the other",
    "start": "1688120",
    "end": "1695360"
  },
  {
    "text": "case I say one so bite aligned and so the good news is no so",
    "start": "1695360",
    "end": "1701640"
  },
  {
    "text": "the offsets are actually honored so you say wanted at 0 one and five this is what you get",
    "start": "1701640",
    "end": "1708159"
  },
  {
    "text": "but there is a difference the size here it's not 13 it's not what I need it's 16",
    "start": "1708159",
    "end": "1714480"
  },
  {
    "text": "so for the overall size of the struct the runtime still looks at and says now we got long in here so normally I would",
    "start": "1714480",
    "end": "1722200"
  },
  {
    "text": "align this and then this would go from offset 8 to 15 giving you a total set of",
    "start": "1722200",
    "end": "1727279"
  },
  {
    "text": "16 so it adds three bytes of uh padding at the end now if all you want to do is pass",
    "start": "1727279",
    "end": "1735080"
  },
  {
    "text": "around a single struck like that it probably doesn't matter matter because the offsets are correct and if your",
    "start": "1735080",
    "end": "1740799"
  },
  {
    "text": "Calli reads past the last field then that's arguably a bu in the Callie but",
    "start": "1740799",
    "end": "1745919"
  },
  {
    "text": "what if you have an array of these or what if this array is a member of uh",
    "start": "1745919",
    "end": "1751240"
  },
  {
    "text": "this sorry this struct is a member of another struct and there's something after it then it might become all very",
    "start": "1751240",
    "end": "1757159"
  },
  {
    "text": "important that it's actually the 13 bytes or actually the 16 one of the whatever is the correct one for your use case but in those cases you have to",
    "start": "1757159",
    "end": "1763960"
  },
  {
    "text": "worry about this so the offsets are always honored but the overall size of the struct May differ depending on the",
    "start": "1763960",
    "end": "1771039"
  },
  {
    "text": "exact layout and how the packing size specified okay this was all very boring",
    "start": "1771039",
    "end": "1776080"
  },
  {
    "text": "what do you need this for this is what I need this for p invoke this is where it gets interesting and P invoke is a bit",
    "start": "1776080",
    "end": "1782039"
  },
  {
    "text": "of a unfortunate naming as far as I understand it it goes back to the very",
    "start": "1782039",
    "end": "1787279"
  },
  {
    "text": "very early days of net I don't know who who's been around for net",
    "start": "1787279",
    "end": "1792799"
  },
  {
    "text": "one11 anyone okay a few so you remember a lot of stuff stuff that you wanted",
    "start": "1792799",
    "end": "1798039"
  },
  {
    "text": "wasn't there so you know stuff that you need for your application and by no means a",
    "start": "1798039",
    "end": "1804360"
  },
  {
    "text": "very complicated thing was not there yet in the BCL but of course it was there in win 32 so you need a way to invoke win",
    "start": "1804360",
    "end": "1811640"
  },
  {
    "text": "32 and I think this is basically what the naming come from because and what it does it's your gateway into native code",
    "start": "1811640",
    "end": "1819559"
  },
  {
    "text": "so just like the the jni so the Java native interface in the Java world or",
    "start": "1819559",
    "end": "1824600"
  },
  {
    "text": "jvm world this lets you interact with anything that has a cstyle ABI",
    "start": "1824600",
    "end": "1830320"
  },
  {
    "text": "application binary interface that can be win32 but can be anything else and of course also the platform and what that",
    "start": "1830320",
    "end": "1836399"
  },
  {
    "text": "is has changed it used to be Windows Windows Windows but now we could also have Mac OS or",
    "start": "1836399",
    "end": "1842880"
  },
  {
    "text": "Linux and as a little bit of a detour slw exercise um let's click quickly fill",
    "start": "1843080",
    "end": "1850000"
  },
  {
    "text": "this Gap about yeah what if I need memory that can't be on the stack because of Lifetime or of size issues so",
    "start": "1850000",
    "end": "1855960"
  },
  {
    "text": "I can just go to the um to the native unmanaged Heap and say I want some",
    "start": "1855960",
    "end": "1861279"
  },
  {
    "text": "memory and one way to do this is there is this native memory class and it has",
    "start": "1861279",
    "end": "1866320"
  },
  {
    "text": "an alloc and a free method and they just wrap the C standard library maloc and free functions very simple so I say",
    "start": "1866320",
    "end": "1872840"
  },
  {
    "text": "alloc I say how many bites I will I want I get a pointer back for an allocation of at least that size and when I'm done",
    "start": "1872840",
    "end": "1878840"
  },
  {
    "text": "with it I say free and it goes away only problem is this is only available in net",
    "start": "1878840",
    "end": "1883960"
  },
  {
    "text": "6 and later so what if you still on NET Framework well not to worry the operating system",
    "start": "1883960",
    "end": "1889480"
  },
  {
    "text": "can do this too you just ask Windows itself I need some memory it's a little bit more involved",
    "start": "1889480",
    "end": "1896240"
  },
  {
    "text": "because a processing windows can have more uh can have more than one Heap obviously it has to have at least one",
    "start": "1896240",
    "end": "1902039"
  },
  {
    "text": "Heap but you can have additional ones as far as I know it's an advanced scenario probably um won't actually hit but",
    "start": "1902039",
    "end": "1909639"
  },
  {
    "text": "because of this the first thing I need to do I need to say get process Heap to get a handle to the default Heap and",
    "start": "1909639",
    "end": "1915399"
  },
  {
    "text": "once I I have that very similar I can say Heap alloc this the Heap there's",
    "start": "1915399",
    "end": "1920880"
  },
  {
    "text": "some Flags I have some control about how allocations and and uh deallocations are performed exactly we're going to ignore",
    "start": "1920880",
    "end": "1927039"
  },
  {
    "text": "this for this talk and then the size again how many bytes I want at least and similar you can free this now this looks",
    "start": "1927039",
    "end": "1933360"
  },
  {
    "text": "a bit strange right this is weird C because it's not so this is strange from the C header files from the windows",
    "start": "1933360",
    "end": "1940679"
  },
  {
    "text": "SDK so if if I just copy and paste this into my C file I get get errors how do I actually use this well P invoke SL dll",
    "start": "1940679",
    "end": "1950880"
  },
  {
    "text": "Imports so what I can do on the Menor side I can say I have these static extern methods so extern just means okay",
    "start": "1950880",
    "end": "1959519"
  },
  {
    "text": "I have a function that is not implemented in this assembly that's implemented somewhere else and in this",
    "start": "1959519",
    "end": "1965279"
  },
  {
    "text": "case I'm slapping on a dll import attribute saying well this somewhere else is a native dll with this name so",
    "start": "1965279",
    "end": "1972799"
  },
  {
    "text": "please load this and it's going to have a get process Heap function and it's going to have a heap allocation and Heap",
    "start": "1972799",
    "end": "1978720"
  },
  {
    "text": "free function and these are the signatures that's pretty much it I mean",
    "start": "1978720",
    "end": "1986039"
  },
  {
    "text": "yeah we have pointers so we can avoid pointer back from PE and we have to put it back into Heap free obviously but",
    "start": "1986039",
    "end": "1992399"
  },
  {
    "text": "that's the basic idea and then calling this is no different than any other method to in net so from the caller s",
    "start": "1992399",
    "end": "1998480"
  },
  {
    "text": "other than pointers being involved it's just regular stuff but how do I get from one to the other and I guess it's a bit",
    "start": "1998480",
    "end": "2005880"
  },
  {
    "text": "of a good news bad news thing so the the bad news is you have to deal with header",
    "start": "2005880",
    "end": "2011240"
  },
  {
    "text": "files they have all the details in there um the good news part is you don't have to become a c programmer but you have to",
    "start": "2011240",
    "end": "2018440"
  },
  {
    "text": "understand enough to make sense of these header files and they can get a bit involved at times you also have to",
    "start": "2018440",
    "end": "2023799"
  },
  {
    "text": "understand the value ranges of data types in C C++ because your ins your Longs often",
    "start": "2023799",
    "end": "2031240"
  },
  {
    "text": "times they have the same value ranges both in the managed and the unmanaged side but it's not always the case so you want to send those and more specifically",
    "start": "2031240",
    "end": "2037519"
  },
  {
    "text": "for win32 uh there's documentation about common types like handle pool all sorts",
    "start": "2037519",
    "end": "2045960"
  },
  {
    "text": "of string types um that's a piece of documentation you want to reference but",
    "start": "2045960",
    "end": "2051960"
  },
  {
    "text": "you might ask okay but this should we should be able to generate this right I mean it's code it's C code we can parse",
    "start": "2051960",
    "end": "2059118"
  },
  {
    "text": "this we can make sense of it and the answer is somewhat so for win 32",
    "start": "2059119",
    "end": "2065398"
  },
  {
    "text": "specifically there is this C win32 project that does generate dll Imports",
    "start": "2065399",
    "end": "2071480"
  },
  {
    "text": "and structs based on whatever is you want to call but this doesn't actually go to the header files there is a",
    "start": "2071480",
    "end": "2077320"
  },
  {
    "text": "dedicated metadata uh database that this is generated from but still if you're on",
    "start": "2077320",
    "end": "2084000"
  },
  {
    "text": "well again net 6 and later and this is what you want then this helps there's also the swiig Swig I don't know how",
    "start": "2084000",
    "end": "2091200"
  },
  {
    "text": "what is pronounced but there's a project that actually does what I just described that says okay it's head a file and it's",
    "start": "2091200",
    "end": "2096599"
  },
  {
    "text": "a reports a a host of languages including uh C and I say okay based on",
    "start": "2096599",
    "end": "2102760"
  },
  {
    "text": "this and this header file pleas generate me my imports so I haven't tried either",
    "start": "2102760",
    "end": "2108440"
  },
  {
    "text": "so if you do I would be very interested and hear about your experience but I I",
    "start": "2108440",
    "end": "2113560"
  },
  {
    "text": "know about this caveat so do not expect this to always work it cannot and I have",
    "start": "2113560",
    "end": "2119480"
  },
  {
    "text": "this little this little quote from Brett Abrams so the the ones have been there for net 1011 they might remember him so",
    "start": "2119480",
    "end": "2126400"
  },
  {
    "text": "he blocked about this back in 2004 cuz people were asking why can just generate it and the problem is ambiguity now this",
    "start": "2126400",
    "end": "2134720"
  },
  {
    "text": "might change with AI maybe AI can then help and figure out the semantics of the r the",
    "start": "2134720",
    "end": "2140640"
  },
  {
    "text": "parameters but without that the problem he outlines here is um say you on the",
    "start": "2140640",
    "end": "2146599"
  },
  {
    "text": "negative side you got a CH pointer okay what do you map this as you can map this",
    "start": "2146599",
    "end": "2152599"
  },
  {
    "text": "as a string or a string Builder or rchar or a charay or an outre he didn't even",
    "start": "2152599",
    "end": "2159160"
  },
  {
    "text": "list those one the point is you have multiple options some are clearly wrong for use cases others are viable which",
    "start": "2159160",
    "end": "2165920"
  },
  {
    "text": "one the best one is you have to figure out based on the semantics and your use case which a tool obviously will not",
    "start": "2165920",
    "end": "2173680"
  },
  {
    "text": "know so you can experiment with with the",
    "start": "2173680",
    "end": "2178800"
  },
  {
    "text": "tooling but expect that you will have to do some manual overhaul with whatever that spits",
    "start": "2178800",
    "end": "2184400"
  },
  {
    "text": "out now calling conventions there fun thing similar to memory layout that",
    "start": "2184400",
    "end": "2189480"
  },
  {
    "text": "you you could ignore until now so how calls actually works so this is part of this application binary interface",
    "start": "2189480",
    "end": "2196960"
  },
  {
    "text": "doesn't matter you got your CP code it's compined to Il and you know you don't care about the rest it just",
    "start": "2196960",
    "end": "2203319"
  },
  {
    "text": "works but now we call native code so uh what this entails is just a few examples",
    "start": "2203319",
    "end": "2209599"
  },
  {
    "text": "it's a bit more involved but so how are arguments actually passed to a colleag do they go on the registers do they go",
    "start": "2209599",
    "end": "2215720"
  },
  {
    "text": "on the stack combination of both similarly then how does a return value make it back to the caller to be passed",
    "start": "2215720",
    "end": "2222720"
  },
  {
    "text": "somehow and for anything we putting on the stack particularly arguments right somebody has to clean them up they have",
    "start": "2222720",
    "end": "2228599"
  },
  {
    "text": "to be popped by somebody well this might be the caller or the collee and the calling convention specifies all of",
    "start": "2228599",
    "end": "2235319"
  },
  {
    "text": "this and so dll import actually has a whole bunch of more properties you can set to tell exactly how the Imports are",
    "start": "2235319",
    "end": "2242599"
  },
  {
    "text": "supposed to work calling convention is one of them so if you have to specify it the dll import is way you do that the",
    "start": "2242599",
    "end": "2249280"
  },
  {
    "text": "good news is I think for the most common platforms I think you'll encounter this",
    "start": "2249280",
    "end": "2254359"
  },
  {
    "text": "is not going to be an issue so Windows 64-bit Intel there's basically one",
    "start": "2254359",
    "end": "2259520"
  },
  {
    "text": "standard calling convention well there is one standard calling convention but there's also an extension to the standard which is the vector calls they",
    "start": "2259520",
    "end": "2266359"
  },
  {
    "text": "use simd registers in addition to regular registers and stack but they're also not supported by",
    "start": "2266359",
    "end": "2273359"
  },
  {
    "text": "net so if you want to do a vector call well you can't you you have to have a native wrapper for that in the first",
    "start": "2273359",
    "end": "2279440"
  },
  {
    "text": "place and turn it into a standard call basically Mac OS on uh Apple silicon and",
    "start": "2279440",
    "end": "2285040"
  },
  {
    "text": "arm 64 there is literally only one convention it's based on the standard 4 arm 64 and similarly Linux x 64 64-bit",
    "start": "2285040",
    "end": "2294079"
  },
  {
    "text": "Intel there's one convention but if you still need to support 32-bit Intel",
    "start": "2294079",
    "end": "2300000"
  },
  {
    "text": "windows or anything I haven't listed make sure that you understand what the",
    "start": "2300000",
    "end": "2305119"
  },
  {
    "text": "if there is multiple conventions if there's only one then it will use the one convention but if there's multiple",
    "start": "2305119",
    "end": "2310359"
  },
  {
    "text": "which ones you need to use and when but again it probably should not affect you most of the time so not going into",
    "start": "2310359",
    "end": "2316800"
  },
  {
    "text": "detail here lifetime so at some point we have",
    "start": "2316800",
    "end": "2322480"
  },
  {
    "text": "some unmanaged resource in my example now it's going to be a sqlite database for example and when I'm done with this",
    "start": "2322480",
    "end": "2328839"
  },
  {
    "text": "I need to clean this up somehow so how do I do this so the sample here is",
    "start": "2328839",
    "end": "2334000"
  },
  {
    "text": "fairly simple what I want to end up with I want to have a database class and I knew this up with a",
    "start": "2334000",
    "end": "2339680"
  },
  {
    "text": "database file name of that sqlite database and then I want to be able to just execute scripts arbitrary sqlite",
    "start": "2339680",
    "end": "2347119"
  },
  {
    "text": "scripts of course this of limited use but this fits in the slides and then I have a script that just creates a table",
    "start": "2347119",
    "end": "2352319"
  },
  {
    "text": "this two inserts just to demo this on slides so when I when I finally done and",
    "start": "2352319",
    "end": "2358319"
  },
  {
    "text": "I run this then when I open the database I will have this table with two columns and two rows so now you might say yeah",
    "start": "2358319",
    "end": "2365160"
  },
  {
    "text": "but there's an OT that provid right why would you want to mess around with native code here and by the way",
    "start": "2365160",
    "end": "2370800"
  },
  {
    "text": "there's also a EF provider based on the adet provider that you can use so you didn't have to do anything here so a",
    "start": "2370800",
    "end": "2377560"
  },
  {
    "text": "little bit of context I was on a project where we wanted an embedded data base",
    "start": "2377560",
    "end": "2383440"
  },
  {
    "text": "and what matter at was speed so industrial computers in case you have never looked into that the cheapest one",
    "start": "2383440",
    "end": "2390520"
  },
  {
    "text": "are already extremely expensive and very slow and we needed to be able to read",
    "start": "2390520",
    "end": "2395720"
  },
  {
    "text": "and write entire row mostly as quickly as possible only very simple filtering",
    "start": "2395720",
    "end": "2401839"
  },
  {
    "text": "don't even remember if we identified any joints we needed to do so this is why we said okay we are going to use the",
    "start": "2401839",
    "end": "2409359"
  },
  {
    "text": "library directly and so for the limited example for this talk what we need is this a",
    "start": "2409359",
    "end": "2415640"
  },
  {
    "text": "delicate call back we come back to this but three functions open close nexi so",
    "start": "2415640",
    "end": "2421240"
  },
  {
    "text": "can open database we can execute scripts we can close it and a few things about the D",
    "start": "2421240",
    "end": "2427280"
  },
  {
    "text": "ports so you see entry point here so before I did not specify this because I",
    "start": "2427280",
    "end": "2434640"
  },
  {
    "text": "I guess liked the actual function name so I had to match but they don't have to",
    "start": "2434640",
    "end": "2440880"
  },
  {
    "text": "so if I want my ex turn function the dll UT to have a different method name than",
    "start": "2440880",
    "end": "2446440"
  },
  {
    "text": "the original function I can pick whatever I want and then in the DL import I say entry point and give it the actual name of the Native",
    "start": "2446440",
    "end": "2453319"
  },
  {
    "text": "function another thing Marshall s and we could probably do an entire talk",
    "start": "2453319",
    "end": "2459000"
  },
  {
    "text": "just about marshalling so it's basically changing data formats on call and return",
    "start": "2459000",
    "end": "2465000"
  },
  {
    "text": "in this case for example strings in net they're utf16 and they're not null",
    "start": "2465000",
    "end": "2471599"
  },
  {
    "text": "terminated but sqlite expects utf8 null terminated so I can do the conversion",
    "start": "2471599",
    "end": "2476760"
  },
  {
    "text": "myself and maybe strings I use over and over again that might make sense to do it manually and buffer it but the",
    "start": "2476760",
    "end": "2482520"
  },
  {
    "text": "easiest thing I can do I can just say hey this file name converts this before you pass it into native",
    "start": "2482520",
    "end": "2489000"
  },
  {
    "text": "codee and then I have the safe database handle so",
    "start": "2489000",
    "end": "2494720"
  },
  {
    "text": "for out I have an out safe database handle instead of an actual pointer H",
    "start": "2494720",
    "end": "2499880"
  },
  {
    "text": "what's that about so safe handles they help us",
    "start": "2499880",
    "end": "2506240"
  },
  {
    "text": "manage lifetime so what's interesting if you go to the documentation it will tell you",
    "start": "2506240",
    "end": "2511839"
  },
  {
    "text": "that a safe handle represents a rapper class for operating system handles and while",
    "start": "2511839",
    "end": "2516920"
  },
  {
    "text": "true not exclusively so a handle that is an integer of the size of your platform",
    "start": "2516920",
    "end": "2523280"
  },
  {
    "text": "so four bytes on 32 bit and 8 bytes on 64 so you can just cram a pointer in",
    "start": "2523280",
    "end": "2528640"
  },
  {
    "text": "there safe handle doesn't care works just fine so this is what we're going to",
    "start": "2528640",
    "end": "2534119"
  },
  {
    "text": "do but we get another interesting benefit and that is reference counting so obviously as you make your",
    "start": "2534119",
    "end": "2542640"
  },
  {
    "text": "uh your calls you don't want this UNM resource to be read before your last",
    "start": "2542640",
    "end": "2548119"
  },
  {
    "text": "call returns and I'm not talk about call backs yet because that makes it more complicated synchronous calls right you",
    "start": "2548119",
    "end": "2554800"
  },
  {
    "text": "want to make sure that you don't free your un uh your native unmanaged",
    "start": "2554800",
    "end": "2559960"
  },
  {
    "text": "resource until the last call cops in and the runtime does reference counting every time you make a call into this",
    "start": "2559960",
    "end": "2565520"
  },
  {
    "text": "native library with this safe handle it increments a counter and when it comes back at",
    "start": "2565520",
    "end": "2571800"
  },
  {
    "text": "decrements and if there now comes a dispose call or finalize call it will not actually do this until reference",
    "start": "2571800",
    "end": "2577960"
  },
  {
    "text": "count is down to zero it's a very neat feature and I mean maybe you can guess",
    "start": "2577960",
    "end": "2583680"
  },
  {
    "text": "this but it's also threat safe there are very very straightforward",
    "start": "2583680",
    "end": "2588880"
  },
  {
    "text": "to implement so there's a base class safe handle you just inherit from that",
    "start": "2588880",
    "end": "2594400"
  },
  {
    "text": "then you have to overwrite is invalid they specified it like this so This",
    "start": "2594400",
    "end": "2600119"
  },
  {
    "text": "compares the car they handle to a known invalid handle or handles and then gives",
    "start": "2600119",
    "end": "2605640"
  },
  {
    "text": "it back to fa we have to have a Constructor obviously so we have a default Constructor and we have to call",
    "start": "2605640",
    "end": "2611160"
  },
  {
    "text": "the base Constructor that we pass in an invalid handle in poter zero and true",
    "start": "2611160",
    "end": "2617040"
  },
  {
    "text": "true meaning this safe handle instance owns this unmanaged resource whatever",
    "start": "2617040",
    "end": "2622760"
  },
  {
    "text": "that is and it's interesting yes you can pass in false it's a bull but documentation says don't do that so I",
    "start": "2622760",
    "end": "2629319"
  },
  {
    "text": "don't know why this isn't by the same option so it is your invalid handle and true end of story and then you also have",
    "start": "2629319",
    "end": "2635880"
  },
  {
    "text": "to to override release handle that releases whatever that resource is so it's a sqlite database we",
    "start": "2635880",
    "end": "2641680"
  },
  {
    "text": "just say close and then we just return a Bool if it worked or not that's it and",
    "start": "2641680",
    "end": "2646880"
  },
  {
    "text": "then based with this we can then start create our database class that will do",
    "start": "2646880",
    "end": "2652520"
  },
  {
    "text": "what I showed you earlier where I want to end up and for rappers like this you might get away with saying okay it's",
    "start": "2652520",
    "end": "2658800"
  },
  {
    "text": "sealed so certain problems you don't have because of this and we implement idisposable we have a readon safe",
    "start": "2658800",
    "end": "2666040"
  },
  {
    "text": "database handled in there and then in the Constructor we take the file name we call",
    "start": "2666040",
    "end": "2671760"
  },
  {
    "text": "open of course we pass on the file name but also pass out database",
    "start": "2671760",
    "end": "2678160"
  },
  {
    "text": "handle so I mean what sqlite gives me back is a pointer basically pointing at",
    "start": "2678160",
    "end": "2683400"
  },
  {
    "text": "a data structure describing my or somehow identifying my database but I'm going to wrap this in a handle now of",
    "start": "2683400",
    "end": "2689520"
  },
  {
    "text": "course check if it worked for exception obviously If This Were Real code you use a more meaningful exception type and no",
    "start": "2689520",
    "end": "2696760"
  },
  {
    "text": "finalizer this doesn't need a finalizer because the safe handle has a finalizer and you shouldn't learn this anyway but",
    "start": "2696760",
    "end": "2703319"
  },
  {
    "text": "it's good to have there's a chance it will get evoked so you have that already for free because using safe",
    "start": "2703319",
    "end": "2709960"
  },
  {
    "text": "handles similarly in the execute so we call SQL execute we pass",
    "start": "2709960",
    "end": "2715680"
  },
  {
    "text": "in that safe handle and the script and optionally the call back we don't need a dispos check because the safe handle has",
    "start": "2715680",
    "end": "2722599"
  },
  {
    "text": "a disposed check so if the safe handle is already disposed you will get you object dispose exception as you'd expect",
    "start": "2722599",
    "end": "2729680"
  },
  {
    "text": "because the safe handle does it for you less code on your side that's great and then of course it this post also is very",
    "start": "2729680",
    "end": "2735280"
  },
  {
    "text": "simple you just have to check that the safe handle is not invalid so that's",
    "start": "2735280",
    "end": "2741839"
  },
  {
    "text": "valid um and then you just dispose it done that's our",
    "start": "2741839",
    "end": "2747160"
  },
  {
    "text": "rapper this brings me two call backs so I said ignore it first now we",
    "start": "2747160",
    "end": "2752280"
  },
  {
    "text": "get back to this so you have this delegate here call back it takes a void point columns and to uh pointers to pointers",
    "start": "2752280",
    "end": "2759920"
  },
  {
    "text": "to bites so what this allows me to do if I use it it allows me to get a call back",
    "start": "2759920",
    "end": "2766760"
  },
  {
    "text": "for every row of every result set of my script and then do something with that",
    "start": "2766760",
    "end": "2772440"
  },
  {
    "text": "information so the first parameter void pointer we're ignoring I can basically",
    "start": "2772440",
    "end": "2778280"
  },
  {
    "text": "give a sqlite a void pointer that it gives back to me but we're not using this in this demo on that I get the",
    "start": "2778280",
    "end": "2785880"
  },
  {
    "text": "number of columns for this row and then I get to uh pointers to pointers it's",
    "start": "2785880",
    "end": "2791520"
  },
  {
    "text": "basically an array of strings so again an array of strings of the values and the column",
    "start": "2791520",
    "end": "2797559"
  },
  {
    "text": "names and this is also like the examples uh I had with how do you get to the dll",
    "start": "2797880",
    "end": "2803480"
  },
  {
    "text": "Imports in general right so you go to the actual header files look at the the Declaration map this to Native uh sorry",
    "start": "2803480",
    "end": "2810400"
  },
  {
    "text": "to manage it's the same basic idea uh then just to recap that's the",
    "start": "2810400",
    "end": "2815800"
  },
  {
    "text": "the execute you already had so we can then call this with a call back like so",
    "start": "2815800",
    "end": "2821440"
  },
  {
    "text": "for example so again the void pointer at the beginning we don't care we just say underscore so I just try iterate through",
    "start": "2821440",
    "end": "2829240"
  },
  {
    "text": "all the columns and for each one get the name and the value convert it back from utf8 in this case I'm doing this",
    "start": "2829240",
    "end": "2836119"
  },
  {
    "text": "explicitly and throw in a new line when appropriate and let's just say result",
    "start": "2836119",
    "end": "2841160"
  },
  {
    "text": "okay or error because this result goes back into native code so I should not throw an exception here native code does",
    "start": "2841160",
    "end": "2846800"
  },
  {
    "text": "not know what to do with that and that works that's great but so what's a uh",
    "start": "2846800",
    "end": "2852960"
  },
  {
    "text": "what's a delegate well it's a reference type it's an object it's somewhere on the Heap it's subject to garbage",
    "start": "2852960",
    "end": "2859960"
  },
  {
    "text": "collection so into demo then what happens when we are not careful with",
    "start": "2859960",
    "end": "2865800"
  },
  {
    "text": "this I created what I think is the world's most pointless sea Library it's this here so what this does is we have a",
    "start": "2865800",
    "end": "2873079"
  },
  {
    "text": "global variable called callback pointer so it's a pointer to a uh function pointer that is uh parameterless and",
    "start": "2873079",
    "end": "2881079"
  },
  {
    "text": "void returning so it just does something and then I have set callback",
    "start": "2881079",
    "end": "2886240"
  },
  {
    "text": "and call me maybe you'll see how the maybe where the maybe comes in but yeah this has something to do",
    "start": "2886240",
    "end": "2893119"
  },
  {
    "text": "with the lifetime so and then we call set call back we get the function pointer pass and we just remember this",
    "start": "2893119",
    "end": "2899319"
  },
  {
    "text": "and then call me maybe we try to invoke this function pointer and that better be valid because otherwise",
    "start": "2899319",
    "end": "2907400"
  },
  {
    "text": "so on the native side here I admitted not the the dll Imports they're pretty straightforward and boring but I have a",
    "start": "2907400",
    "end": "2913640"
  },
  {
    "text": "static setup and Trigger native callback that has a uh nested function",
    "start": "2913640",
    "end": "2921000"
  },
  {
    "text": "say hello it just writes hello. net to the console pretty straightforward and I say set call back say hello so I'm",
    "start": "2921000",
    "end": "2929000"
  },
  {
    "text": "passing a callback du native code um so this this creates a delegate implicitly",
    "start": "2929000",
    "end": "2935119"
  },
  {
    "text": "has to and then I say Call Me Maybe when I'm saying native code okay try to invoke whatever I give you and then I call this",
    "start": "2935119",
    "end": "2942960"
  },
  {
    "text": "setup and Trigger native callback and that works just fine okay but now I want you to remember this state that I set up",
    "start": "2942960",
    "end": "2950119"
  },
  {
    "text": "and it is convoluted like this because when we're done when we're here the",
    "start": "2950119",
    "end": "2955720"
  },
  {
    "text": "delegate that I used to call set call back it's out of scope nobody's referencing it any anymore it can't get",
    "start": "2955720",
    "end": "2962319"
  },
  {
    "text": "collected now so let's do that let's say GC collect and also run the",
    "start": "2962319",
    "end": "2969880"
  },
  {
    "text": "finalizers or they're going to run but let's wait for the finalizers and then try again to Call Me",
    "start": "2969880",
    "end": "2976559"
  },
  {
    "text": "Maybe maybe and catch if there's an exception now you would probably expect",
    "start": "2976559",
    "end": "2981599"
  },
  {
    "text": "that there an exception because I already you know I already said there's a delegate it's out of scope it's not",
    "start": "2981599",
    "end": "2987240"
  },
  {
    "text": "referenced by anything we should get collected so it should be an exception except for not what you're",
    "start": "2987240",
    "end": "2993920"
  },
  {
    "text": "thinking of you process actually dies so it's exception of some sort but nothing",
    "start": "2993920",
    "end": "3000200"
  },
  {
    "text": "you can catch because now we have to think about now what's what's happening here so you",
    "start": "3000200",
    "end": "3005559"
  },
  {
    "text": "can't pass a delegate directly to native code in the first place can't be done it's an it's an optic on the Heap so",
    "start": "3005559",
    "end": "3011760"
  },
  {
    "text": "what the runtime does it actually creates a thunk it creates a little piece of code that is callable from",
    "start": "3011760",
    "end": "3017240"
  },
  {
    "text": "native code and that then invokes your delegate but you have to have this little piece in between the",
    "start": "3017240",
    "end": "3024440"
  },
  {
    "text": "two but this is gone now the delegate is gone and when the delegate is gone also",
    "start": "3024440",
    "end": "3029960"
  },
  {
    "text": "my thunk is gone so basically what's happening here now the native code is now trying to dreference a function",
    "start": "3029960",
    "end": "3035319"
  },
  {
    "text": "pointer not pointing at anything valid it's dangling and the runtime now says okay this is a fault and native code",
    "start": "3035319",
    "end": "3042440"
  },
  {
    "text": "we're done but it gets better so let's do this again so we say set up and Trigger",
    "start": "3042440",
    "end": "3049280"
  },
  {
    "text": "native call back we come back to the state and now we collect but don't wait for the finalizer so and so so your mileage may",
    "start": "3049280",
    "end": "3056520"
  },
  {
    "text": "vary if you try this yourself I'm trying to get a a race condition here so I'm",
    "start": "3056520",
    "end": "3061640"
  },
  {
    "text": "trying to keep going before the finalize do their thing and if I pull this off",
    "start": "3061640",
    "end": "3066920"
  },
  {
    "text": "now I have another refer exception so the point here the exact Behavior will depend on",
    "start": "3066920",
    "end": "3074000"
  },
  {
    "text": "the exact timing now I probably need to dig in the code at some point but I think the only plausible explanation",
    "start": "3074000",
    "end": "3079440"
  },
  {
    "text": "here is if I do this uh the finalize is actually the one that cleans up the thunk the finalizer has not run the fun",
    "start": "3079440",
    "end": "3085760"
  },
  {
    "text": "is still there and it runs and then it tries to access that delegate but the delegate is gone",
    "start": "3085760",
    "end": "3092920"
  },
  {
    "text": "so long story short you want to get the lifetime of delegates to you hand out to native to native code right otherwise",
    "start": "3092920",
    "end": "3099400"
  },
  {
    "text": "you have to deal with this which kind of backs the question is there a better way a more straightforward easier way and if",
    "start": "3099400",
    "end": "3105960"
  },
  {
    "text": "you're on that net five or higher then yes if you are okay with your call back",
    "start": "3105960",
    "end": "3112559"
  },
  {
    "text": "method being static and being only for um for callbacks for native code so what",
    "start": "3112559",
    "end": "3121200"
  },
  {
    "text": "I can do this I can change my third parameter to this and I don't know how",
    "start": "3121200",
    "end": "3126839"
  },
  {
    "text": "you feel about seeing this when I first saw this like what the hell is this so it's there a delicate pointer but also",
    "start": "3126839",
    "end": "3133720"
  },
  {
    "text": "looks like there's generics in there no this is an actual function pointer in",
    "start": "3133720",
    "end": "3139720"
  },
  {
    "text": "net in well say in C uh despite the funky uh syntax here so delicate star",
    "start": "3139720",
    "end": "3149040"
  },
  {
    "text": "this means as a function pointer then I specify the calling convention I have to do this here because it has a default",
    "start": "3149040",
    "end": "3156079"
  },
  {
    "text": "but the default is managed actually that's not useful for p invoke and then what looks like generics",
    "start": "3156079",
    "end": "3163680"
  },
  {
    "text": "you have to read this like your funks so the last one that is the type of your",
    "start": "3163680",
    "end": "3169880"
  },
  {
    "text": "return value and the other that is the types of your of your parameters",
    "start": "3169880",
    "end": "3176280"
  },
  {
    "text": "okay so I can do this and then of course my execute changes accordingly nothing",
    "start": "3176280",
    "end": "3182680"
  },
  {
    "text": "else and then I can rewrite how I use this like this so I grade out the body",
    "start": "3182680",
    "end": "3189640"
  },
  {
    "text": "because that is the same I'm still doing my form my try none of this has changed but now I'm saying okay I want",
    "start": "3189640",
    "end": "3197680"
  },
  {
    "text": "to have a method that is unmanaged callers only and this is enforced if I",
    "start": "3197680",
    "end": "3202880"
  },
  {
    "text": "now try to call Print roll from your C code that's a compile time error also I",
    "start": "3202880",
    "end": "3208839"
  },
  {
    "text": "have to specify the calling convention here how this is supposed to be called and then now I have the way the",
    "start": "3208839",
    "end": "3214880"
  },
  {
    "text": "option to say address of print row I'm actually getting a pointer so yeah it",
    "start": "3214880",
    "end": "3220760"
  },
  {
    "text": "does have it has fancy Syntax for how you specify the uh function point at",
    "start": "3220760",
    "end": "3225960"
  },
  {
    "text": "types and you have to have separate entry points now in addition that are",
    "start": "3225960",
    "end": "3231359"
  },
  {
    "text": "not callable from managed code but this is a viable alternative and then you definitely don't have this delegate",
    "start": "3231359",
    "end": "3237359"
  },
  {
    "text": "problem because there's no delegates anymore all right almost done so what you should check out next",
    "start": "3237359",
    "end": "3245040"
  },
  {
    "text": "and basically I say fur the resources but it's all Microsoft docs actually and they're really well written and I really",
    "start": "3245040",
    "end": "3252280"
  },
  {
    "text": "mean this no sarcasm in there um I use a lot to prepare this talk too I think I had one or two links ear on earlier",
    "start": "3252280",
    "end": "3258720"
  },
  {
    "text": "slides as well so one is the unsafe code pointer type function types documentation so that the describes",
    "start": "3258720",
    "end": "3265520"
  },
  {
    "text": "unsafe and all the things that you can do that I showed you pointers and address of and stack aloc and fix",
    "start": "3265520",
    "end": "3271760"
  },
  {
    "text": "buffers and all this good stuff I also want to point out the actual specification that is very verbose and",
    "start": "3271760",
    "end": "3278799"
  },
  {
    "text": "it's written in a very almost academic style because it's an actual standard document but to really understand maybe",
    "start": "3278799",
    "end": "3285720"
  },
  {
    "text": "parts of how unsafe work or if you just out of curiosity want to drill deeper into a particular area of unsafe this is",
    "start": "3285720",
    "end": "3292559"
  },
  {
    "text": "a great resource and then finally there's a ative interop operability guide this is not just a page this has",
    "start": "3292559",
    "end": "3299640"
  },
  {
    "text": "pages and pages on how to call native code how to call Comm objects",
    "start": "3299640",
    "end": "3304799"
  },
  {
    "text": "marshalling so uh probably not necessary for triv examples but at some point you want to",
    "start": "3304799",
    "end": "3311319"
  },
  {
    "text": "look at that now um for the most part I kind of",
    "start": "3311319",
    "end": "3318319"
  },
  {
    "text": "assume you're on detet six at least but a few words if you just on the framework",
    "start": "3318319",
    "end": "3323880"
  },
  {
    "text": "so actually who is the doing NET Framework development here yeah a few so",
    "start": "3323880",
    "end": "3330119"
  },
  {
    "text": "it's not much here that I really want to point out that's important one is um I already showed you Heap aloc and",
    "start": "3330119",
    "end": "3336799"
  },
  {
    "text": "Heap free from win32 please do use those do not use marshall. alloc H Global and",
    "start": "3336799",
    "end": "3342720"
  },
  {
    "text": "marshall. free Global they work but they actually map to Legacy win32 apis and",
    "start": "3342720",
    "end": "3350160"
  },
  {
    "text": "when I say win 32 actually those functions that they map to have been run since Windows 16",
    "start": "3350160",
    "end": "3355720"
  },
  {
    "text": "and the documentation also discouraged you from using them and lastly we're not going to go into what that means I mean",
    "start": "3355720",
    "end": "3361760"
  },
  {
    "text": "if you know what this means you probably gring cringing already if not read up on your own time the save Handles in NET",
    "start": "3361760",
    "end": "3369119"
  },
  {
    "text": "Framework are CS so there's limits to what you're allowed to do in those and",
    "start": "3369119",
    "end": "3374319"
  },
  {
    "text": "so you need to be aware of those rules and follow them with that said Thank you",
    "start": "3374319",
    "end": "3379359"
  },
  {
    "text": "any questions okay",
    "start": "3379359",
    "end": "3386920"
  },
  {
    "text": "yes so um oh microphone all right yeah thank you very",
    "start": "3391520",
    "end": "3398599"
  },
  {
    "text": "much so the difference between managed code and unmanaged code in the",
    "start": "3398599",
    "end": "3403839"
  },
  {
    "text": "Intermediate Language is there any will the unmanaged or the unsafe code be",
    "start": "3403839",
    "end": "3409760"
  },
  {
    "text": "directly compiled into native code or is there an intermediate step now it has",
    "start": "3409760",
    "end": "3415440"
  },
  {
    "text": "nothing to do with how compilation works okay so unsafe codes just means in so in terms of how the runtime looks at it is",
    "start": "3415440",
    "end": "3422640"
  },
  {
    "text": "unverifiable verification in a sense where when you have when you don't have unsafe code um the compiler checks all",
    "start": "3422640",
    "end": "3429520"
  },
  {
    "text": "sort of things in terms of memory and type safety and those are then guaranteed certain things just can't",
    "start": "3429520",
    "end": "3434960"
  },
  {
    "text": "happen you can't have a type mismatch you can't read past array boundaries these kind of things when you say unsa",
    "start": "3434960",
    "end": "3441880"
  },
  {
    "text": "basically additional features even in iil become available to you that mean that the result is not verifiable",
    "start": "3441880",
    "end": "3448160"
  },
  {
    "text": "anymore but the compilation is exactly the same all the unsafe code is compiled to I and then to native code at runtime",
    "start": "3448160",
    "end": "3456039"
  },
  {
    "text": "just as the rest two no difference okay so the I code for a basic for for Loop",
    "start": "3456039",
    "end": "3463119"
  },
  {
    "text": "would be the same for unsafe Y and safe coding yeah all right thanks so so the difference in I are basically now the",
    "start": "3463119",
    "end": "3469839"
  },
  {
    "text": "same as in C now in the ilil I can have a um a pointer type right so because I",
    "start": "3469839",
    "end": "3476359"
  },
  {
    "text": "supports all this I don't know who knows a bit or has dabbled in C++ CLI so this",
    "start": "3476359",
    "end": "3482160"
  },
  {
    "text": "a version of a dialect of C++ that supports both native and manage code",
    "start": "3482160",
    "end": "3487520"
  },
  {
    "text": "where you can miss and match but even in this case anything where you said this is managed code that's then typically",
    "start": "3487520",
    "end": "3492839"
  },
  {
    "text": "also unsafe uh that's compiled all into IL and only Parts where you says this is native code is compiled to native code",
    "start": "3492839",
    "end": "3499920"
  },
  {
    "text": "so it does not make a difference it makes a difference in terms of what il/ runtime feat are available to you that's",
    "start": "3499920",
    "end": "3508799"
  },
  {
    "text": "it any more questions well then thank you so much",
    "start": "3508799",
    "end": "3515760"
  },
  {
    "text": "and I know it's a bit of information overload a lot to take in in in 60 minutes I'm still around at the conference um the slide deck is on",
    "start": "3515760",
    "end": "3523960"
  },
  {
    "text": "GitHub you can download it there also can hit me up on LinkedIn or Master on so again thanks for attending",
    "start": "3523960",
    "end": "3530640"
  },
  {
    "text": "today have a good day have a great NDC portal [Applause]",
    "start": "3530640",
    "end": "3539920"
  },
  {
    "text": "so what I'm even I'm even in time I'm",
    "start": "3541599",
    "end": "3547799"
  }
]