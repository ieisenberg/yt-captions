[
  {
    "text": "so my name is Nicholas Otis I'm talking",
    "start": "4120",
    "end": "11180"
  },
  {
    "text": "about C++ 17 the interesting thing as C++ 17 is just a bunch of a lot of new",
    "start": "11180",
    "end": "17990"
  },
  {
    "text": "little features but the real power comes from combining them and I want to show",
    "start": "17990",
    "end": "23060"
  },
  {
    "text": "you that by for examples as you probably",
    "start": "23060",
    "end": "30919"
  },
  {
    "text": "know see purple 17 is one step further or in the evolution of C++ we now have a",
    "start": "30919",
    "end": "38239"
  },
  {
    "text": "three year cycle so the three year cycle means whatever feature is ready on time",
    "start": "38239",
    "end": "44210"
  },
  {
    "text": "will be delivered as in this time box driven software project the next",
    "start": "44210",
    "end": "49640"
  },
  {
    "text": "delivery will be C++ 20 but she now has feature freeze and yes so there's a big",
    "start": "49640",
    "end": "56839"
  },
  {
    "text": "history and some of my books cover it so before I start I have to start with the",
    "start": "56839",
    "end": "64040"
  },
  {
    "text": "first slide I always have to start now I have to talk about the way of initialization and object initializing",
    "start": "64040",
    "end": "70490"
  },
  {
    "text": "an object so we had the C way the C++ way in the old C past was way the new",
    "start": "70490",
    "end": "76340"
  },
  {
    "text": "C++ by using curly braces so the question is what do I use and I use",
    "start": "76340",
    "end": "82040"
  },
  {
    "text": "curly braces and sometimes I use in equal sign and I just want to just have",
    "start": "82040",
    "end": "88729"
  },
  {
    "text": "one minute to explain why it always works to initialize an object if you",
    "start": "88729",
    "end": "94189"
  },
  {
    "text": "pass no argument it detects narrowing it is self explanatory it is works in areas",
    "start": "94189",
    "end": "102860"
  },
  {
    "text": "where all other or some other pieces of initialization know that do not work for",
    "start": "102860",
    "end": "109100"
  },
  {
    "text": "example to initialize member in a class",
    "start": "109100",
    "end": "114110"
  },
  {
    "text": "you can't use parentheses and there's no other ways to initialize an enum other",
    "start": "114110",
    "end": "119630"
  },
  {
    "text": "than using braces and it's a way a grits are being initialized so don't be",
    "start": "119630",
    "end": "127310"
  },
  {
    "text": "surprised that I use braces in all my examples so this is by the way not the",
    "start": "127310",
    "end": "134510"
  },
  {
    "text": "recommended way of the community the community is Hydra the worst and the way how we should",
    "start": "134510",
    "end": "140810"
  },
  {
    "text": "initialize an object one of the nightmares we have now in C++ so let's",
    "start": "140810",
    "end": "146870"
  },
  {
    "text": "start with the first example let's talk about if and if and trades and guards",
    "start": "146870",
    "end": "152319"
  },
  {
    "text": "here's an example of a function you can question whether it's very useful but",
    "start": "152319",
    "end": "157370"
  },
  {
    "text": "it's more that I demo with some issues of the C++ 17 here and the example is I",
    "start": "157370",
    "end": "164989"
  },
  {
    "text": "want to insert in a generic function an element in a collection so the first argument is a generic element and the",
    "start": "164989",
    "end": "172489"
  },
  {
    "text": "second one is the genic a generic collection however I use pushback so",
    "start": "172489",
    "end": "178160"
  },
  {
    "text": "this essentially only works and vector and in a deck and in a list and so let's",
    "start": "178160",
    "end": "188090"
  },
  {
    "text": "use it let's for example create a vector and in this vector of strings we want to insert",
    "start": "188090",
    "end": "194959"
  },
  {
    "text": "a string ok compiled fine great can I do",
    "start": "194959",
    "end": "200140"
  },
  {
    "text": "something more interesting here oh yeah I want to insert an int in this",
    "start": "200140",
    "end": "207430"
  },
  {
    "text": "collection so what would I have to do or what can I do well I can say well",
    "start": "209019",
    "end": "215419"
  },
  {
    "text": "there's a special there's an overload of this function of this function template",
    "start": "215419",
    "end": "220489"
  },
  {
    "text": "saying I taken in the problem though is that this will work nicely for an int so",
    "start": "220489",
    "end": "229040"
  },
  {
    "text": "for this end we now call two strings but it will not work for a double because",
    "start": "229040",
    "end": "236590"
  },
  {
    "text": "for double the first function is a better match than the second and also if",
    "start": "236590",
    "end": "243980"
  },
  {
    "text": "we convert it to an end we lose some value so we need another overload to",
    "start": "243980",
    "end": "250010"
  },
  {
    "text": "insert a string and that might apply to a couple of overloads we have so can we",
    "start": "250010",
    "end": "256760"
  },
  {
    "text": "do it better well yes let's use an if inside the function and that's using the zip the",
    "start": "256760",
    "end": "263990"
  },
  {
    "text": "question is is my past object of an arithmetic type",
    "start": "263990",
    "end": "269550"
  },
  {
    "text": "and if it is we convert this arithmetic type to a string otherwise we just try",
    "start": "269550",
    "end": "278310"
  },
  {
    "text": "to push it back so does it work unfortunately not if you try to use this",
    "start": "278310",
    "end": "287490"
  },
  {
    "text": "function you get compile time errors whatever you try because what you're",
    "start": "287490",
    "end": "294479"
  },
  {
    "text": "using here is a compile time F and runtime F excuse me thank you and the",
    "start": "294479",
    "end": "301919"
  },
  {
    "text": "runtime if is only used at runtime so at compile time all the statements have to",
    "start": "301919",
    "end": "309990"
  },
  {
    "text": "be valid when we instantiate this thank you so for example if you try the first",
    "start": "309990",
    "end": "316020"
  },
  {
    "text": "to compile the first example you get a small error message and in the small",
    "start": "316020",
    "end": "323849"
  },
  {
    "text": "error message they essentially say we tried all a couple of things but nothing worked so what's in your first new",
    "start": "323849",
    "end": "331500"
  },
  {
    "text": "feature here a compile time F with this compile time if you can say ok let's",
    "start": "331500",
    "end": "338009"
  },
  {
    "text": "insert that's called pushback or with two string if it's an arithmetic type",
    "start": "338009",
    "end": "344099"
  },
  {
    "text": "and otherwise use pushback fine trust problem soft since the paths are",
    "start": "344099",
    "end": "350969"
  },
  {
    "text": "seventeen you can write the expression saying a type trait saying is this",
    "start": "350969",
    "end": "356460"
  },
  {
    "text": "arithmetic then then the type and then colon colon value a little bit shorter to say is there at mythic underscore V",
    "start": "356460",
    "end": "365750"
  },
  {
    "text": "okay let's improve this a little bit and let's use mutexes because we have a",
    "start": "366169",
    "end": "372960"
  },
  {
    "text": "multi-threaded environment so let's do it by the vector is locked okay",
    "start": "372960",
    "end": "380279"
  },
  {
    "text": "so we might have a mutex introduce mutex where we get access to the vector and",
    "start": "380279",
    "end": "386669"
  },
  {
    "text": "then we might use a la carte to say before we try all these insertions let's",
    "start": "386669",
    "end": "391860"
  },
  {
    "text": "lock it so the next thing we can do better in C++ 17 so we no longer have to",
    "start": "391860",
    "end": "400289"
  },
  {
    "text": "specify once again the type of the new tax when we declare the locker that's",
    "start": "400289",
    "end": "407560"
  },
  {
    "text": "called class template argument deduction and it means that even in class",
    "start": "407560",
    "end": "412750"
  },
  {
    "text": "templates you can now deduce the type of template parameters in this case it's a",
    "start": "412750",
    "end": "419170"
  },
  {
    "text": "type of the mutex used so that you can just write what you want okay however it",
    "start": "419170",
    "end": "426790"
  },
  {
    "text": "might happen it might be that we have other things to do in inside a string so",
    "start": "426790",
    "end": "434110"
  },
  {
    "text": "the piece of code you see in insert a string is only some piece of code and we",
    "start": "434110",
    "end": "439180"
  },
  {
    "text": "might do something in from then we might be do something behind inserting the",
    "start": "439180",
    "end": "444400"
  },
  {
    "text": "element and then it's not it the best strategy to use mutex that locks a",
    "start": "444400",
    "end": "450060"
  },
  {
    "text": "vector for the whole time so let's lock the mutex inside the function so we",
    "start": "450060",
    "end": "458350"
  },
  {
    "text": "might extend the API of this insert a string function and say okay let's add",
    "start": "458350",
    "end": "463660"
  },
  {
    "text": "an additional argument which is the mutex to lock so that the collar can",
    "start": "463660",
    "end": "469150"
  },
  {
    "text": "pass a mutex for the vector and then inside the function just for the if",
    "start": "469150",
    "end": "475630"
  },
  {
    "text": "statement during either pushing back the element converted to string or the other",
    "start": "475630",
    "end": "481330"
  },
  {
    "text": "push back let's then use the lock up so that it's the vectors only look at this",
    "start": "481330",
    "end": "487060"
  },
  {
    "text": "little piece of moment at this protected reel so don't forget to put a braces",
    "start": "487060",
    "end": "498040"
  },
  {
    "text": "here because we want to make sure that right after the pushback because the",
    "start": "498040",
    "end": "503140"
  },
  {
    "text": "lifetime of the lock guard has entered the mutex is unlocked can we do it",
    "start": "503140",
    "end": "509350"
  },
  {
    "text": "better now with c++ 17 yes we can we can use and if constructs a compile time if",
    "start": "509350",
    "end": "516539"
  },
  {
    "text": "you just saw so we can say we have a compile time F but this if looks",
    "start": "516540",
    "end": "523780"
  },
  {
    "text": "different than the one before look at that it has a semicolon in the middle and this is a new way of that is",
    "start": "523780",
    "end": "532600"
  },
  {
    "text": "supported now in C++ 17 if with initialization we can also add",
    "start": "532600",
    "end": "540490"
  },
  {
    "text": "an initialization to switch now for those who ask me can you also have an",
    "start": "540490",
    "end": "545620"
  },
  {
    "text": "initialization and wire now yes we have that for years it's called fall and yeah",
    "start": "545620",
    "end": "553120"
  },
  {
    "text": "so we have that now and it even works with at compile time and now this is",
    "start": "553120",
    "end": "559180"
  },
  {
    "text": "tricky look at that at compile time we evaluate the condition but the",
    "start": "559180",
    "end": "565660"
  },
  {
    "text": "initialization is done at compile at run time that's okay that's allowed this is",
    "start": "565660",
    "end": "571150"
  },
  {
    "text": "a compile time is in both cases in design and the elds case we have a run",
    "start": "571150",
    "end": "576400"
  },
  {
    "text": "time initialization of the Lockhart but we decided compile time whether we",
    "start": "576400",
    "end": "581710"
  },
  {
    "text": "compile these then or the else case that's support so that's in UF with",
    "start": "581710",
    "end": "588640"
  },
  {
    "text": "initialization we worry a little bit first of all can we improve that even",
    "start": "588640",
    "end": "594400"
  },
  {
    "text": "better yes there might be an issue that we might not need a lot mutex or that we",
    "start": "594400",
    "end": "602350"
  },
  {
    "text": "might multiple need multiple new Texas for whatever reason so we have a new very attic lock out now and it is called",
    "start": "602350",
    "end": "611250"
  },
  {
    "text": "scope lock and what you can now even improve here you can say let's pass an",
    "start": "611250",
    "end": "617140"
  },
  {
    "text": "arbitrary number of mutexes to this function that might be lock why we call",
    "start": "617140",
    "end": "623740"
  },
  {
    "text": "pushback so you might still pass one mutex but you might also pass two",
    "start": "623740",
    "end": "630910"
  },
  {
    "text": "mutexes note that these mutexes might have different types because this is a very attic template oh you might and by",
    "start": "630910",
    "end": "639100"
  },
  {
    "text": "the way if we have multiple mutexes here then the scope lock that locks mutexes",
    "start": "639100",
    "end": "645430"
  },
  {
    "text": "uses the standard function STD lock which has a deadlock avoidance mechanism",
    "start": "645430",
    "end": "651540"
  },
  {
    "text": "so that we try to avoid deadlocks here only here not in general you can still",
    "start": "651540",
    "end": "657730"
  },
  {
    "text": "create that locks yourself and so that that we that we are has better safety",
    "start": "657730",
    "end": "665950"
  },
  {
    "text": "here in in our code and you can pass no mutex at all and that's also supported by a scope block",
    "start": "665950",
    "end": "673150"
  },
  {
    "text": "if there is no mutex passed then it will not lock anything so this code is",
    "start": "673150",
    "end": "679200"
  },
  {
    "text": "essentially now generic in a way that we might even not lock a mutex at all and",
    "start": "679200",
    "end": "686200"
  },
  {
    "text": "that gives us some flexibility you might be happy about in your code okay so look",
    "start": "686200",
    "end": "694510"
  },
  {
    "text": "at this the next step look at that the initialization you might say we can",
    "start": "694510",
    "end": "699940"
  },
  {
    "text": "improve the initialization of the scope block here in the if constructs fix",
    "start": "699940",
    "end": "705940"
  },
  {
    "text": "expression that's LG LG is initialized by a couple of mutexes and that performs",
    "start": "705940",
    "end": "713350"
  },
  {
    "text": "the lock for all the past mutexes so do I need the name of the Lord God Bo no in",
    "start": "713350",
    "end": "723360"
  },
  {
    "text": "from a Paramus perceptive I don't need the name so let's improve this version",
    "start": "723360",
    "end": "729940"
  },
  {
    "text": "and remove the name so let's create a temporary lock here well or multiple",
    "start": "729940",
    "end": "737050"
  },
  {
    "text": "temporary locks on depending on how much mutexes we passed unfortunately this is",
    "start": "737050",
    "end": "743350"
  },
  {
    "text": "not an improvement because what we have done here you have created a temporary",
    "start": "743350",
    "end": "749620"
  },
  {
    "text": "block object Alaka the lifetime of this",
    "start": "749620",
    "end": "755020"
  },
  {
    "text": "locked object is not until the end of the control structure its until you find",
    "start": "755020",
    "end": "761680"
  },
  {
    "text": "the semicolon so even before the condition this lock will be unlocked",
    "start": "761680",
    "end": "766870"
  },
  {
    "text": "again so and there's no compile time error on that will it will just not lock",
    "start": "766870",
    "end": "773890"
  },
  {
    "text": "and probably at runtime in production create some interesting issues so don't",
    "start": "773890",
    "end": "779560"
  },
  {
    "text": "do that that's a fatal runtime error please give it a name and that's it",
    "start": "779560",
    "end": "787110"
  },
  {
    "text": "that's more or less every combination I I want to introduce here so you have",
    "start": "787110",
    "end": "793780"
  },
  {
    "text": "seen here I think five or six different new features just in this one line in the if context for line so we're using a",
    "start": "793780",
    "end": "801160"
  },
  {
    "text": "compiler if you are using a knife with an initialization you are using a scope",
    "start": "801160",
    "end": "807190"
  },
  {
    "text": "lock you are using its arithmetic we as a shortcut and you're using class",
    "start": "807190",
    "end": "812770"
  },
  {
    "text": "template argument to the action because you don't have to specify the type of the mutexes when you declare that the",
    "start": "812770",
    "end": "820690"
  },
  {
    "text": "class template object scope block so that's nice that's a little improvement",
    "start": "820690",
    "end": "827290"
  },
  {
    "text": "and by the way yes C++ would not be in C++ it was a new feature we wouldn't",
    "start": "827290",
    "end": "833110"
  },
  {
    "text": "introduce new traps and that's all here by the way this is not a new trap if you",
    "start": "833110",
    "end": "838330"
  },
  {
    "text": "do the same in a for loop you would run into the same problem so if you use the",
    "start": "838330",
    "end": "843550"
  },
  {
    "text": "initialization in the follow having no name for the lock you haven't",
    "start": "843550",
    "end": "848800"
  },
  {
    "text": "locked via mutexes during the follow so don't do that okay um there are other",
    "start": "848800",
    "end": "857380"
  },
  {
    "text": "traps so we have to talk about so class template argument deduction is a little bit funny it can be used very well like",
    "start": "857380",
    "end": "866440"
  },
  {
    "text": "in the example of these locks and la carte but beware if initialization",
    "start": "866440",
    "end": "873400"
  },
  {
    "text": "becomes complicated and follows complicated rules so yes if you declare",
    "start": "873400",
    "end": "880360"
  },
  {
    "text": "a vector of yeah you don't say what it is and you pass some curly braces here",
    "start": "880360",
    "end": "886300"
  },
  {
    "text": "saying this vector is initialized by 2 inch class argument deduction class",
    "start": "886300",
    "end": "893530"
  },
  {
    "text": "template argument deduction will deduce that this is a vector of int and that also works for one element if you don't",
    "start": "893530",
    "end": "901090"
  },
  {
    "text": "use curly braces here then the initializer list constructor is not used so we will still deduce a vector of int",
    "start": "901090",
    "end": "908680"
  },
  {
    "text": "but the int has 8 elements of the value 15 and if you have last value not passed",
    "start": "908680",
    "end": "916840"
  },
  {
    "text": "with curly braces this will not compile because overload resolution will find the",
    "start": "916840",
    "end": "924420"
  },
  {
    "text": "constructor that is marked with the error now and in this constructor from this constructor oh no the one before",
    "start": "924420",
    "end": "931450"
  },
  {
    "text": "and the one before the error Eero constructor that cannot be used to",
    "start": "931450",
    "end": "938959"
  },
  {
    "text": "the use type t so this will not compile um but you can initialize you can try to",
    "start": "938959",
    "end": "947779"
  },
  {
    "text": "initialize eight elements of the string literal so that's this work if anything",
    "start": "947779",
    "end": "953600"
  },
  {
    "text": "is here it works when we consider deduction so we will deduce the type of",
    "start": "953600",
    "end": "959629"
  },
  {
    "text": "T we will find out that the type of an element is yeah what is the type of this",
    "start": "959629",
    "end": "966220"
  },
  {
    "text": "empty string little it's a constant array it's an area of constant",
    "start": "966220",
    "end": "973489"
  },
  {
    "text": "characters and there it has a size of 1 because we only have the null terminator here and now it's important that the",
    "start": "973489",
    "end": "982039"
  },
  {
    "text": "constructor takes this argument by reference and because it takes it by reference it does not decay so this type",
    "start": "982039",
    "end": "989899"
  },
  {
    "text": "has not decayed to become a contra pointer it has a type as I just said so",
    "start": "989899",
    "end": "995809"
  },
  {
    "text": "type T is deduced to be a charity uh-oh the concerts wrong here by the way because the concerts in front of the T",
    "start": "995809",
    "end": "1003249"
  },
  {
    "text": "anyway so T is deduce to be just an an array of one character and that's",
    "start": "1003249",
    "end": "1009789"
  },
  {
    "text": "unfortunately will be deduced but it will not compile because you can't instantiate a vector with an array",
    "start": "1009789",
    "end": "1017079"
  },
  {
    "text": "that's it ok other examples here I skip",
    "start": "1017079",
    "end": "1023499"
  },
  {
    "text": "that it's good enough there are more problems to show but we already run out",
    "start": "1023499",
    "end": "1028750"
  },
  {
    "text": "of time to demo all the eggs of the problems next problem",
    "start": "1028750",
    "end": "1034350"
  },
  {
    "text": "every problem has 15 minutes roughly every example did I say problem no",
    "start": "1034350",
    "end": "1041230"
  },
  {
    "text": "feature cool feature okay next example very Eric templates let's use very Eric",
    "start": "1041230",
    "end": "1050049"
  },
  {
    "text": "templates variadic templates were introduced in C++ 11 so that you could",
    "start": "1050049",
    "end": "1057009"
  },
  {
    "text": "write functions like this you can say I have a print function on the bottom here and the print version takes one argument",
    "start": "1057009",
    "end": "1062470"
  },
  {
    "text": "or an arbitrary number of additional arguments and so we can pass",
    "start": "1062470",
    "end": "1068750"
  },
  {
    "text": "arguments the first argument is always printed and the next one is passed to recursively be passed to print again to",
    "start": "1068750",
    "end": "1076460"
  },
  {
    "text": "print it out and that we recursively instantiate so at the end we essentially",
    "start": "1076460",
    "end": "1082630"
  },
  {
    "text": "have to compile or create assembler code for printing out all the arguments we",
    "start": "1082630",
    "end": "1088580"
  },
  {
    "text": "passed to print that's nothing new in C++ seventeen-year but we have a problem here in C++",
    "start": "1088580",
    "end": "1094610"
  },
  {
    "text": "and the problem is recursive instantiation because of instantiation takes a lot of resources and the",
    "start": "1094610",
    "end": "1102320"
  },
  {
    "text": "compiler takes time and is something we try to avoid so can we do it better yes",
    "start": "1102320",
    "end": "1108440"
  },
  {
    "text": "we have something new out first of all the first question might be for the end criterion which is here an empty print",
    "start": "1108440",
    "end": "1115760"
  },
  {
    "text": "can be used around time if no that's not",
    "start": "1115760",
    "end": "1121100"
  },
  {
    "text": "allowed but you can use the compile time if you find the compile time if here to end this recursion so that you don't",
    "start": "1121100",
    "end": "1127370"
  },
  {
    "text": "have to need in print have an empty printf at the end however can we do it",
    "start": "1127370",
    "end": "1133940"
  },
  {
    "text": "better than this then recursively instantiating templates plus a function",
    "start": "1133940",
    "end": "1140480"
  },
  {
    "text": "templates and yes we have a new feature called a fold expression you can say if",
    "start": "1140480",
    "end": "1146360"
  },
  {
    "text": "I have a gender as if I have a very attic number of arguments or what we call a parameter pack this you can say",
    "start": "1146360",
    "end": "1154820"
  },
  {
    "text": "that we apply a certain operator to all of the arguments like here saying all of",
    "start": "1154820",
    "end": "1160490"
  },
  {
    "text": "the arguments should be combined with the operator plus and that means you can't pass a different number of",
    "start": "1160490",
    "end": "1166700"
  },
  {
    "text": "arguments of different types as long as pluses allowed to call this will compile",
    "start": "1166700",
    "end": "1172370"
  },
  {
    "text": "and concatenate or add all the values here the problem here is if you don't",
    "start": "1172370",
    "end": "1178430"
  },
  {
    "text": "pass no argument then we have no value here but for that reason you can say I",
    "start": "1178430",
    "end": "1183740"
  },
  {
    "text": "have an initial value like zero so that even works then for the case that we",
    "start": "1183740",
    "end": "1190490"
  },
  {
    "text": "don't have any value in the parameter pack good so that new feature can be",
    "start": "1190490",
    "end": "1198380"
  },
  {
    "text": "applied to our print function and we can we replace a whole recursive",
    "start": "1198380",
    "end": "1205249"
  },
  {
    "text": "instantiation by just this saying okay this is trend all for all the arguments",
    "start": "1205249",
    "end": "1212989"
  },
  {
    "text": "we print them out to see out that's it the syntax is parentheses dot out dot",
    "start": "1212989",
    "end": "1221090"
  },
  {
    "text": "and in the middle on the left way of the initialization on the right of parameter Peck and then you have to pass which",
    "start": "1221090",
    "end": "1227690"
  },
  {
    "text": "operation to a bush operator to call it has to be the same on both sides so we essentially compile and say let's",
    "start": "1227690",
    "end": "1236779"
  },
  {
    "text": "print out all the values we don't recursively instantiate that that",
    "start": "1236779",
    "end": "1241970"
  },
  {
    "text": "complies a lot faster way faster than before and yeah we have our output oh",
    "start": "1241970",
    "end": "1248749"
  },
  {
    "text": "wait a minute there's a space meeting missing between these arguments so how",
    "start": "1248749",
    "end": "1255109"
  },
  {
    "text": "can we fix the space well we can easily",
    "start": "1255109",
    "end": "1260869"
  },
  {
    "text": "extend this expression you can say at the end of this there should still be a newline that's fine but you can't put",
    "start": "1260869",
    "end": "1268059"
  },
  {
    "text": "extend the syntax or change the syntax of this operation it needs a syntax braces initializer two",
    "start": "1268059",
    "end": "1276049"
  },
  {
    "text": "times the operator daughter dot in the middle and I'm going to write the parameter pack well but the parameter",
    "start": "1276049",
    "end": "1281570"
  },
  {
    "text": "pair can be an expression so you can say something like this let's print out all",
    "start": "1281570",
    "end": "1287749"
  },
  {
    "text": "the arguments and for the arguments but I call a helper function that prints out",
    "start": "1287749",
    "end": "1293749"
  },
  {
    "text": "a space before the argument the next argument well and we don't want to do",
    "start": "1293749",
    "end": "1298789"
  },
  {
    "text": "that for the first argument of course so we now introduce the special handling saying the first argument if it comes is",
    "start": "1298789",
    "end": "1305239"
  },
  {
    "text": "printed out and for all remaining arguments we print them also all by",
    "start": "1305239",
    "end": "1311600"
  },
  {
    "text": "calling a helper function space before which prints out the space returns our",
    "start": "1311600",
    "end": "1317690"
  },
  {
    "text": "argument and then we print out the argument okay don't take a picture of this we are not done",
    "start": "1317690",
    "end": "1326980"
  },
  {
    "text": "so yes this works because this effectively compiles something like this",
    "start": "1327070",
    "end": "1334279"
  },
  {
    "text": "we print out the first argument and we print out then for the further argument",
    "start": "1334279",
    "end": "1339940"
  },
  {
    "text": "that we called space before but wait a minute there's an issue if you that the",
    "start": "1339940",
    "end": "1348529"
  },
  {
    "text": "yellow box here if you would have implemented that just as a piece of code",
    "start": "1348529",
    "end": "1354200"
  },
  {
    "text": "in C++ 11 or 14 you have two different possible outputs here there is you might",
    "start": "1354200",
    "end": "1361820"
  },
  {
    "text": "either print hi space 7.5 space well or",
    "start": "1361820",
    "end": "1367190"
  },
  {
    "text": "you might have the output hi tube spaces 7.5 world without of space in between",
    "start": "1367190",
    "end": "1374110"
  },
  {
    "text": "because we have no guaranteed evaluation order here in regarding the effect when",
    "start": "1374110",
    "end": "1381409"
  },
  {
    "text": "an upper rent here is evaluated so the evaluation of space before printing out",
    "start": "1381409",
    "end": "1387769"
  },
  {
    "text": "the space might happen for both arguments before we start actually to",
    "start": "1387769",
    "end": "1393860"
  },
  {
    "text": "print out the rest so the R as the results of what was printed out what was",
    "start": "1393860",
    "end": "1400010"
  },
  {
    "text": "returned by space before however this is fixed with C++ 17 yeah we have for this",
    "start": "1400010",
    "end": "1406340"
  },
  {
    "text": "reason to make this compile not for this example but there are other example we",
    "start": "1406340",
    "end": "1412460"
  },
  {
    "text": "have introduced now some constraints on the operators we have already so you see",
    "start": "1412460",
    "end": "1418610"
  },
  {
    "text": "in red here so the changes we made we have now a guaranteed evaluation order",
    "start": "1418610",
    "end": "1424159"
  },
  {
    "text": "for some operators some operators here like dot and arrow from left to right",
    "start": "1424159",
    "end": "1431860"
  },
  {
    "text": "function calls no guarantee that the left side of the function so the name of the function is evaluated before its",
    "start": "1431860",
    "end": "1438649"
  },
  {
    "text": "arguments the argument order is still undefined and then we have evaluation or",
    "start": "1438649",
    "end": "1444559"
  },
  {
    "text": "are also for the output operator and input operator which we just use and also for the assignment operator we",
    "start": "1444559",
    "end": "1452510"
  },
  {
    "text": "didn't define an evaluation arrow for audio other operators that there was a",
    "start": "1452510",
    "end": "1458480"
  },
  {
    "text": "big fight and for those who like fast compilers they said oh that's too much and we because",
    "start": "1458480",
    "end": "1465049"
  },
  {
    "text": "we pay a price not using the ideal way to evaluate expressions so that means",
    "start": "1465049",
    "end": "1473390"
  },
  {
    "text": "this is now guaranteed to work by the way note that we still don't have a guaranteed evaluation order in function",
    "start": "1473390",
    "end": "1479900"
  },
  {
    "text": "arguments so if you pass them as arguments to a function call you might",
    "start": "1479900",
    "end": "1485659"
  },
  {
    "text": "still get two spaces in ahead okay that's it let's use it however can we",
    "start": "1485659",
    "end": "1496070"
  },
  {
    "text": "make it better yes we can but we have to solve a problem and the problem is we are you",
    "start": "1496070",
    "end": "1504799"
  },
  {
    "text": "can as you just saw use expressions to parameter pecks and then this expression",
    "start": "1504799",
    "end": "1510620"
  },
  {
    "text": "is is used for all the arguments so besides saying if I take an arbitrary",
    "start": "1510620",
    "end": "1516200"
  },
  {
    "text": "number of arguments I pass them all to fool you can say something works rather",
    "start": "1516200",
    "end": "1521929"
  },
  {
    "text": "like this you can say I passed to foo a teacher for each argument added to",
    "start": "1521929",
    "end": "1529309"
  },
  {
    "text": "itself as a comma-separated list that's not nothing new in C++ 17 that's already",
    "start": "1529309",
    "end": "1536690"
  },
  {
    "text": "supported in C++ 11 however what a lot",
    "start": "1536690",
    "end": "1543799"
  },
  {
    "text": "of people tried out this let's call foo for each argument and the problem is",
    "start": "1543799",
    "end": "1550700"
  },
  {
    "text": "this does not compile and can we do it",
    "start": "1550700",
    "end": "1556250"
  },
  {
    "text": "now in C++ 17 yes you can this is a way to do it you say you use a fault",
    "start": "1556250",
    "end": "1563870"
  },
  {
    "text": "expression and you use it with a comma operator so you create a sequence of",
    "start": "1563870",
    "end": "1569990"
  },
  {
    "text": "comma operator calls to call for each argument to call foo and that's the way",
    "start": "1569990",
    "end": "1575780"
  },
  {
    "text": "you can do it now please note that this strange feature that we can overload the collaborator might create trouble so",
    "start": "1575780",
    "end": "1583190"
  },
  {
    "text": "each time you call a function where you don't know whether what it returns you",
    "start": "1583190",
    "end": "1588830"
  },
  {
    "text": "should cast it to avoid it by the way I learned in the meantime there",
    "start": "1588830",
    "end": "1593990"
  },
  {
    "text": "also workaround before si plus by 17 it looked like this so you could take the",
    "start": "1593990",
    "end": "1600590"
  },
  {
    "text": "guaranteed evaluation opener of initializing an initializer list to",
    "start": "1600590",
    "end": "1606640"
  },
  {
    "text": "extend that's an initialization for a list to call all the few arguments you",
    "start": "1606640",
    "end": "1613370"
  },
  {
    "text": "need it at the comma there because at the end you had to initialize a initialize and initialize a list of Ind",
    "start": "1613370",
    "end": "1619640"
  },
  {
    "text": "just to throw it away so that was a workaround that did work even in C++ 11",
    "start": "1619640",
    "end": "1625940"
  },
  {
    "text": "I think the new way is a little bit more readable than before and of course the",
    "start": "1625940",
    "end": "1631550"
  },
  {
    "text": "new way we can use this move semantics then it looks like this so what does it",
    "start": "1631550",
    "end": "1637130"
  },
  {
    "text": "mean in our example print all the arguments but have spaces between them",
    "start": "1637130",
    "end": "1642520"
  },
  {
    "text": "use a comma operator use a lambda that prints out a space and the argument and",
    "start": "1642520",
    "end": "1649480"
  },
  {
    "text": "do that good can we do it better",
    "start": "1649480",
    "end": "1656420"
  },
  {
    "text": "yes here we have a space we have between the arguments we want to be more",
    "start": "1656420",
    "end": "1662840"
  },
  {
    "text": "flexible here so let's introduce a new template argument saying let's have a",
    "start": "1662840",
    "end": "1668090"
  },
  {
    "text": "character here and the default values of space so we can call print by default",
    "start": "1668090",
    "end": "1674390"
  },
  {
    "text": "having a space between the between the",
    "start": "1674390",
    "end": "1679660"
  },
  {
    "text": "arguments but we can change this and now a new feature is called Auto here so you",
    "start": "1679660",
    "end": "1686510"
  },
  {
    "text": "can have different types here we have now a new feature saying that the template and non type template argument",
    "start": "1686510",
    "end": "1693170"
  },
  {
    "text": "can be declared without all which means that you can decide as a color what is",
    "start": "1693170",
    "end": "1698270"
  },
  {
    "text": "printed beside this so you could now pass to print as a template parameter 42",
    "start": "1698270",
    "end": "1704929"
  },
  {
    "text": "so between each argument there would be written 42 which might not be very",
    "start": "1704929",
    "end": "1711260"
  },
  {
    "text": "useful here but we have another feature which is you can now have local strings",
    "start": "1711260",
    "end": "1718610"
  },
  {
    "text": "defined with no linkage and pass them directly to a template and that way you",
    "start": "1718610",
    "end": "1726860"
  },
  {
    "text": "can say let's all the arguments with even a string literal in between and that works now we",
    "start": "1726860",
    "end": "1734419"
  },
  {
    "text": "are still waiting for that you can directly pass in the template argument the string literal that will probably",
    "start": "1734419",
    "end": "1741139"
  },
  {
    "text": "come as far as I know in C++ 20 okay and for those who hate semicolons or",
    "start": "1741139",
    "end": "1747470"
  },
  {
    "text": "having something in two statements instead of one you can do it in one",
    "start": "1747470",
    "end": "1752929"
  },
  {
    "text": "statement define the lambda and use it in the Foley expression to call apply",
    "start": "1752929",
    "end": "1759289"
  },
  {
    "text": "this lambda to all the arguments in print okay that's one comment here we",
    "start": "1759289",
    "end": "1767090"
  },
  {
    "text": "use this feature also in the standard for argumented action for example we",
    "start": "1767090",
    "end": "1772639"
  },
  {
    "text": "have what we call so-called a deduction guide specifying if you have an area of an arbitrary number of values not",
    "start": "1772639",
    "end": "1779779"
  },
  {
    "text": "specifying the type of the elements we did use that's a new feature also we",
    "start": "1779779",
    "end": "1785269"
  },
  {
    "text": "have we did use that all the elements in the array have the type of the first argument so we have a special name for",
    "start": "1785269",
    "end": "1792769"
  },
  {
    "text": "the first argument and then we also deduce that we have nine elements",
    "start": "1792769",
    "end": "1798379"
  },
  {
    "text": "because it's a number of further arguments plus the first argument however to avoid that we have used this",
    "start": "1798379",
    "end": "1807889"
  },
  {
    "text": "feature when we initialize with different data types we have here say we",
    "start": "1807889",
    "end": "1814730"
  },
  {
    "text": "we disable this deduction guide so we disable this automatic deduction if all",
    "start": "1814730",
    "end": "1821779"
  },
  {
    "text": "the elements don't have the same value and what we use here is a fold expression saying well for all the",
    "start": "1821779",
    "end": "1828980"
  },
  {
    "text": "template arguments we have to check whether all the later arguments have the same type as a first argument and if",
    "start": "1828980",
    "end": "1836090"
  },
  {
    "text": "it's not the case we disable this deduction okay time is good third",
    "start": "1836090",
    "end": "1844460"
  },
  {
    "text": "example let's use a vector of strings and let's",
    "start": "1844460",
    "end": "1850800"
  },
  {
    "text": "initialize a vector of strings with some IDs well with some strings where we have",
    "start": "1850800",
    "end": "1856650"
  },
  {
    "text": "prefix either being a lowercase ID or capital case ID and then a value and",
    "start": "1856650",
    "end": "1863250"
  },
  {
    "text": "integral value converted to a string so we get a sequence of values like you see here on the right in the bubble let's",
    "start": "1863250",
    "end": "1871620"
  },
  {
    "text": "sort that so that's fine works fine you",
    "start": "1871620",
    "end": "1878310"
  },
  {
    "text": "will get a result that's not the point let's sort them ignoring the first two",
    "start": "1878310",
    "end": "1884940"
  },
  {
    "text": "characters because we want to ignore the prefix which would give different results and this takes significant time",
    "start": "1884940",
    "end": "1894650"
  },
  {
    "text": "here you will see why or you will see how it takes this significant type we would say let's use",
    "start": "1894650",
    "end": "1901980"
  },
  {
    "text": "a substring of the string the problem is the substring function for string",
    "start": "1901980",
    "end": "1908700"
  },
  {
    "text": "creates a new temporary string and even if you have short string optimisation so",
    "start": "1908700",
    "end": "1914580"
  },
  {
    "text": "that no heap memory is involved that is that is complicated that takes too much",
    "start": "1914580",
    "end": "1920580"
  },
  {
    "text": "time and effort so that we more than double the speed of this sorting by just",
    "start": "1920580",
    "end": "1928170"
  },
  {
    "text": "ignoring the first two characters so can we improve that yes we have a new beast",
    "start": "1928170",
    "end": "1935250"
  },
  {
    "text": "called string view spring view creates just the view to the spring and this",
    "start": "1935250",
    "end": "1941520"
  },
  {
    "text": "view does not create a new string because it does only refer to the",
    "start": "1941520",
    "end": "1947250"
  },
  {
    "text": "characters of the underlying string and if we then in this view take a substring",
    "start": "1947250",
    "end": "1953460"
  },
  {
    "text": "we make it faster because we don't create a new string we only reduce of",
    "start": "1953460",
    "end": "1958980"
  },
  {
    "text": "view to the string so let's see and you see that we roughly have around the the",
    "start": "1958980",
    "end": "1966680"
  },
  {
    "text": "time the performance we had in the original sort not dealing with sub",
    "start": "1966680",
    "end": "1972660"
  },
  {
    "text": "strings I have to say something about string view here before we continue with",
    "start": "1972660",
    "end": "1979740"
  },
  {
    "text": "this example let's have a break and go to string you this is how string U is working if you",
    "start": "1979740",
    "end": "1986369"
  },
  {
    "text": "have some value in your system a spring at all you can create a string which",
    "start": "1986369",
    "end": "1992279"
  },
  {
    "text": "means the string creates a copy of the value because it owns the whole value it's a value type or you can now have a",
    "start": "1992279",
    "end": "1999779"
  },
  {
    "text": "string view saying I don't own the value I only refer to it which is fast but",
    "start": "1999779",
    "end": "2004849"
  },
  {
    "text": "dangerous so it's string view is like a raw pointer if you see the world the word",
    "start": "2004849",
    "end": "2014659"
  },
  {
    "text": "underscore view in a program you have to get scary that's a smell that's a smell like using",
    "start": "2014659",
    "end": "2021859"
  },
  {
    "text": "pointers you run into the same danger yes once for your life learn that please",
    "start": "2021859",
    "end": "2027589"
  },
  {
    "text": "and however they are safe use it risk",
    "start": "2027589",
    "end": "2033109"
  },
  {
    "text": "but you have to be very careful with that you can even implicitly create a string view from a spring please note that the",
    "start": "2033109",
    "end": "2040789"
  },
  {
    "text": "thing on the top a spring me from a spring lateral is safe because as this",
    "start": "2040789",
    "end": "2046070"
  },
  {
    "text": "string literal has a lifetime for the whole program you will never refer to",
    "start": "2046070",
    "end": "2051980"
  },
  {
    "text": "something that is not owned by you by the spring due to the string depends on the lifetime of the string you refer to",
    "start": "2051980",
    "end": "2058579"
  },
  {
    "text": "and that's a some danger that you make mistakes here's a nice piece of code that",
    "start": "2058579",
    "end": "2066289"
  },
  {
    "text": "demonstrates how easily you can fall into traps now let's create a string",
    "start": "2066289",
    "end": "2072079"
  },
  {
    "text": "view referring to the string little high",
    "start": "2072079",
    "end": "2077020"
  },
  {
    "text": "and then somebody in your team in your project has written these three lines of",
    "start": "2077139",
    "end": "2082730"
  },
  {
    "text": "code which say let's add a string due to its to another string view well the guy",
    "start": "2082730",
    "end": "2089898"
  },
  {
    "text": "who wrote this function made everything right don't return a string view here that would be wrong because we have now",
    "start": "2089899",
    "end": "2097039"
  },
  {
    "text": "created a new string that has to refer to new memory we create a string an sed",
    "start": "2097039",
    "end": "2104329"
  },
  {
    "text": "string so we convert the two string views to a string concatenate them and return the string a temporary object",
    "start": "2104329",
    "end": "2111500"
  },
  {
    "text": "that is a string and let's find so far now",
    "start": "2111500",
    "end": "2117140"
  },
  {
    "text": "the third guy in your project has written a cool temptation template let's",
    "start": "2117140",
    "end": "2122809"
  },
  {
    "text": "add two elements of a type and return the Sun yeah this looks safe add two",
    "start": "2122809",
    "end": "2130640"
  },
  {
    "text": "inch you get an int add two strengths you get a string what's the problem so",
    "start": "2130640",
    "end": "2136309"
  },
  {
    "text": "the problem is let's use this template for my string view and so my string",
    "start": "2136309",
    "end": "2143750"
  },
  {
    "text": "Mutai is passed twice to this function sum which calls the plus operator the",
    "start": "2143750",
    "end": "2150980"
  },
  {
    "text": "plus operator will create a temporary string and the temporary string is the",
    "start": "2150980",
    "end": "2157760"
  },
  {
    "text": "outcome of the expression X plus y and the template and return it to the caller",
    "start": "2157760",
    "end": "2164380"
  },
  {
    "text": "however the return type is T and T is a",
    "start": "2164380",
    "end": "2169789"
  },
  {
    "text": "type we passed in and the type we passed in was a string view so what do we",
    "start": "2169789",
    "end": "2176539"
  },
  {
    "text": "return we return a string view to this temporary string and then the temporary",
    "start": "2176539",
    "end": "2183470"
  },
  {
    "text": "string is destroyed so that's what we return that's not fine",
    "start": "2183470",
    "end": "2189140"
  },
  {
    "text": "if you use it if you are lucky you get a quorum so who made a mistake here well",
    "start": "2189140",
    "end": "2195920"
  },
  {
    "text": "beside you B can argue whether an implicit type conversion from string to string three is a good thing who made a",
    "start": "2195920",
    "end": "2203990"
  },
  {
    "text": "mistake here it's clearly it's clearly",
    "start": "2203990",
    "end": "2209809"
  },
  {
    "text": "the guy in the middle because he made an assumption which was wrong the",
    "start": "2209809",
    "end": "2216020"
  },
  {
    "text": "assumption was that if you concatenate two objects of type T the outcome is a T",
    "start": "2216020",
    "end": "2222829"
  },
  {
    "text": "and that assumption is wrong and dangerous so please don't make it that's",
    "start": "2222829",
    "end": "2230960"
  },
  {
    "text": "a compiler find out about the real it'll try this and this is also one of my slides I always demonstrate when I",
    "start": "2230960",
    "end": "2237230"
  },
  {
    "text": "explain to people why it's so important to use outer end function templates it's",
    "start": "2237230",
    "end": "2243039"
  },
  {
    "text": "correct maybe not that readable but it's right and that's more important and even",
    "start": "2243039",
    "end": "2250849"
  },
  {
    "text": "if inside you you will have a temporary object for the some use out of there",
    "start": "2250849",
    "end": "2257119"
  },
  {
    "text": "so Auto is your friend and templates even as a return type so don't if you have a star guy to void",
    "start": "2257119",
    "end": "2264829"
  },
  {
    "text": "out all it's wrong if you implement templates good by the way we have we",
    "start": "2264829",
    "end": "2273079"
  },
  {
    "text": "know this problem we are getting a lot more problems like this in the standard because we introduce a lot more types",
    "start": "2273079",
    "end": "2280339"
  },
  {
    "text": "now that have no value semantics that have reference semantics like string",
    "start": "2280339",
    "end": "2285890"
  },
  {
    "text": "view span if you read the suffix underscore span and see plus 20 that's a",
    "start": "2285890",
    "end": "2292760"
  },
  {
    "text": "stain juris as underscore view so they're all dangerous so and we have a",
    "start": "2292760",
    "end": "2298609"
  },
  {
    "text": "problem now because we will run and we will run into these problems we have seen that already people fall falling",
    "start": "2298609",
    "end": "2305150"
  },
  {
    "text": "into this trap so we thought about how to solve that the only way we can solve",
    "start": "2305150",
    "end": "2311420"
  },
  {
    "text": "that is that we in an interface of a function we can express lifetime",
    "start": "2311420",
    "end": "2316609"
  },
  {
    "text": "dependencies so in the function that would convert a string to a string wheel",
    "start": "2316609",
    "end": "2323780"
  },
  {
    "text": "we have to specify that the resulting string you the the lifetime of that",
    "start": "2323780",
    "end": "2329660"
  },
  {
    "text": "depends on the lifetime of the string you pass there and when we can do that and I hope we soon can do that in C++",
    "start": "2329660",
    "end": "2337339"
  },
  {
    "text": "then we can detect this problem at compile time not using valgrind ourselves at compile time we could",
    "start": "2337339",
    "end": "2344240"
  },
  {
    "text": "detect this problem well there are different proposals to build that path one proposal both by halves at another",
    "start": "2344240",
    "end": "2351859"
  },
  {
    "text": "bath by which that smooth and me have Sarah's team implemented already an",
    "start": "2351859",
    "end": "2357190"
  },
  {
    "text": "experimental solution of this if you haven't heard about that please look at",
    "start": "2357190",
    "end": "2362480"
  },
  {
    "text": "it let's have Sarah's lifetime profile this is a tool that implements the way that",
    "start": "2362480",
    "end": "2368900"
  },
  {
    "text": "you can specify lifetime dependencies in function calls and that way you can",
    "start": "2368900",
    "end": "2374480"
  },
  {
    "text": "detect the problem I just demoed to you here on the left there's a god bold",
    "start": "2374480",
    "end": "2379569"
  },
  {
    "text": "implementation with this extension and we see exactly what the problem is if we turn on - W lifetime so",
    "start": "2379569",
    "end": "2387780"
  },
  {
    "text": "you get the warning about what I just explained to you and I think this is a",
    "start": "2387780",
    "end": "2393090"
  },
  {
    "text": "very very important tool for your quality gates before you deliver",
    "start": "2393090",
    "end": "2398820"
  },
  {
    "text": "software because it will be very cheap because you don't need to complete test",
    "start": "2398820",
    "end": "2404490"
  },
  {
    "text": "coverage with well grind and run time it's a compile time feature that detects",
    "start": "2404490",
    "end": "2409590"
  },
  {
    "text": "several bugs in your program in your programming code good so coming back to",
    "start": "2409590",
    "end": "2417570"
  },
  {
    "text": "our example we learned string U is your friend if you use it wisely and that's",
    "start": "2417570",
    "end": "2424710"
  },
  {
    "text": "fine here because we only create a temporary string view for the strings we sought and all the strings exist until",
    "start": "2424710",
    "end": "2431280"
  },
  {
    "text": "the end of the sort algorithm so that's fine here can we improve this even",
    "start": "2431280",
    "end": "2436290"
  },
  {
    "text": "better yes we can use parallel algorithms so we",
    "start": "2436290",
    "end": "2441420"
  },
  {
    "text": "have a new extension now in C++ everything team that says you can prioritize algorithms so this is",
    "start": "2441420",
    "end": "2449100"
  },
  {
    "text": "essentially calling the sequential model but we can now switch to parallel",
    "start": "2449100",
    "end": "2454560"
  },
  {
    "text": "execution of this sort and now look at the numbers which are not representative",
    "start": "2454560",
    "end": "2461880"
  },
  {
    "text": "which are not precise it's on my laptop my numbers having run it at several times but you see there is significant",
    "start": "2461880",
    "end": "2469440"
  },
  {
    "text": "speed-up in this even in this small example only having I don't know 1",
    "start": "2469440",
    "end": "2476550"
  },
  {
    "text": "million elements you see that you are even better than the initial version by",
    "start": "2476550",
    "end": "2485550"
  },
  {
    "text": "a factor of 2.5 better than the initial sort without the substring feature so",
    "start": "2485550",
    "end": "2492600"
  },
  {
    "text": "yeah we have something the boss the bad thing is that when you can't specify how",
    "start": "2492600",
    "end": "2499440"
  },
  {
    "text": "many threads are used and which constraints are there it all depends on the implementers of this library things",
    "start": "2499440",
    "end": "2506070"
  },
  {
    "text": "like that will come later and later C++ standards it's just it's there so the",
    "start": "2506070",
    "end": "2511170"
  },
  {
    "text": "only way to validate whether it's worth it to power Isis or not measure on the platform you",
    "start": "2511170",
    "end": "2517950"
  },
  {
    "text": "use with the typical scenario you have when I learned about parallel algorithm",
    "start": "2517950",
    "end": "2525720"
  },
  {
    "text": "I raised one question I said why the hell do we have a parallel partial sum",
    "start": "2525720",
    "end": "2531770"
  },
  {
    "text": "function now because here's the partial Fang it's a partial sum algorithm it",
    "start": "2531770",
    "end": "2538859"
  },
  {
    "text": "says let's compute for sequence of values all the partial sums so the first",
    "start": "2538859",
    "end": "2546900"
  },
  {
    "text": "result is 3 the next is 3 plus 1 the next is 3 plus 1 plus 7 etc that way we",
    "start": "2546900",
    "end": "2554190"
  },
  {
    "text": "convert relative values for example to absolute values or so which is pretty common to need because we might try to",
    "start": "2554190",
    "end": "2561780"
  },
  {
    "text": "find a threshold where we where the bar was too high when we had added different",
    "start": "2561780",
    "end": "2569010"
  },
  {
    "text": "values so that's an algorithm that's widely often used and we have a parallel",
    "start": "2569010",
    "end": "2574230"
  },
  {
    "text": "version of it in C++ 17 that's a new it has a new name because we guarantee",
    "start": "2574230",
    "end": "2580500"
  },
  {
    "text": "evaluation from left to right before partial sum which would rule out parallelization at all but I would say",
    "start": "2580500",
    "end": "2588660"
  },
  {
    "text": "we also rule out parallelization because we have to start from left to right because we have to start with the first",
    "start": "2588660",
    "end": "2594599"
  },
  {
    "text": "and second we need all these results but what I learned is that prioritization is",
    "start": "2594599",
    "end": "2601580"
  },
  {
    "text": "nice because sometimes you can invent better algorithms than before and",
    "start": "2601580",
    "end": "2607140"
  },
  {
    "text": "there's a way to parallelize this I'll show you how if you have this sequence I",
    "start": "2607140",
    "end": "2613619"
  },
  {
    "text": "extended the sequence by another 8 elements and the way you parallel eyes",
    "start": "2613619",
    "end": "2618960"
  },
  {
    "text": "to compute all the partial sums is not to start with the first partial sum then",
    "start": "2618960",
    "end": "2624119"
  },
  {
    "text": "the second etc you do the following you sum up all the all the intermediate sums",
    "start": "2624119",
    "end": "2631410"
  },
  {
    "text": "first of the of all two elements then of all four elements and of all eight elements etc so you compute a binary",
    "start": "2631410",
    "end": "2639359"
  },
  {
    "text": "tree of all the sums and then you go down and use this information to compute",
    "start": "2639359",
    "end": "2646470"
  },
  {
    "text": "the final values and as you see in all the steps here",
    "start": "2646470",
    "end": "2651480"
  },
  {
    "text": "everywhere where we use here on the same level multiple computations they all can be",
    "start": "2651480",
    "end": "2657480"
  },
  {
    "text": "computed in prowl so we have to change the algorithm to come from 1/8 naive",
    "start": "2657480",
    "end": "2663360"
  },
  {
    "text": "implementation to something interesting but the result is that the computing of",
    "start": "2663360",
    "end": "2668490"
  },
  {
    "text": "a partial sum can be 10 times faster if you have I don't know a CPU with 30 Kos",
    "start": "2668490",
    "end": "2675210"
  },
  {
    "text": "or so and we see that in practice and so that's that I found interesting so",
    "start": "2675210",
    "end": "2682280"
  },
  {
    "text": "there's more than just a naive thinking of this can't be parallelized",
    "start": "2682280",
    "end": "2688110"
  },
  {
    "text": "so we can benefit from this knowledge and please note we don't need any additional memory here we don't have to",
    "start": "2688110",
    "end": "2695310"
  },
  {
    "text": "compute allocate memory to get the result we just we use the memory we have",
    "start": "2695310",
    "end": "2702650"
  },
  {
    "text": "ok last example unions polymorphism",
    "start": "2702650",
    "end": "2708090"
  },
  {
    "text": "overloading lambdas that's one of my favorite and it solves the problem forming problem if we have polymorphism",
    "start": "2708090",
    "end": "2715410"
  },
  {
    "text": "the classical way we would implement this with inheritance saying I have a base class geometric objects and to",
    "start": "2715410",
    "end": "2721890"
  },
  {
    "text": "concrete class circle inline so let's create the an object and the problem is",
    "start": "2721890",
    "end": "2728160"
  },
  {
    "text": "to have polymorphism you need a vector of pointers and because it's pointers",
    "start": "2728160",
    "end": "2733710"
  },
  {
    "text": "you need you because otherwise after the creation of the vector the element might",
    "start": "2733710",
    "end": "2739380"
  },
  {
    "text": "be destroyed but you still use the pointer so you come up with something like this you might initialize the",
    "start": "2739380",
    "end": "2745680"
  },
  {
    "text": "figure of different geometric objects calling new everywhere and then push it",
    "start": "2745680",
    "end": "2751110"
  },
  {
    "text": "back return it and then you use it and then at the end don't forget before you",
    "start": "2751110",
    "end": "2757290"
  },
  {
    "text": "clean remove all the elements and the vector that you call delete because otherwise you have a memory leak and yes",
    "start": "2757290",
    "end": "2764460"
  },
  {
    "text": "you can improve that a little bit by using shared pointers and unique pointers which have their own problems",
    "start": "2764460",
    "end": "2770840"
  },
  {
    "text": "so you can replace this problem by another problem which might be less but",
    "start": "2770840",
    "end": "2776730"
  },
  {
    "text": "there are significant problems shared pointer have a performance problem and the unique point",
    "start": "2776730",
    "end": "2783030"
  },
  {
    "text": "have some restrictions regarding what you can do for example you can't do a down cast dynamic cast on a unique",
    "start": "2783030",
    "end": "2790530"
  },
  {
    "text": "pointer so it's an alternative and the alternative surprisingly comes with C++",
    "start": "2790530",
    "end": "2798090"
  },
  {
    "text": "17 with a new data type and the new data type is called variant and this is a",
    "start": "2798090",
    "end": "2804270"
  },
  {
    "text": "kind of a new type for Union so a variant is I am also I am either and in",
    "start": "2804270",
    "end": "2811290"
  },
  {
    "text": "all long all string now you might say wait a minute wait a minute we have a union already and C and C++ with a",
    "start": "2811290",
    "end": "2818580"
  },
  {
    "text": "keyboard Union so what's a cool thing here the cool thing here is this Union",
    "start": "2818580",
    "end": "2824160"
  },
  {
    "text": "knows what it holds and it has a slightly improved API so instead of",
    "start": "2824160",
    "end": "2830340"
  },
  {
    "text": "saying let's set the value as an end or as a long you just say assign a string",
    "start": "2830340",
    "end": "2835500"
  },
  {
    "text": "assign 40 to assign along and automatically the assignment will find",
    "start": "2835500",
    "end": "2842100"
  },
  {
    "text": "the best match here and use this value and the Union and the variant then knows",
    "start": "2842100",
    "end": "2847920"
  },
  {
    "text": "what it holds so if you ask now the variant what are you holding it will",
    "start": "2847920",
    "end": "2853680"
  },
  {
    "text": "give you the index of this information and say I'm holding a spring or I'm",
    "start": "2853680",
    "end": "2859200"
  },
  {
    "text": "holding a long etc and by the way you see that even implicit type conversions are possible you assign a string literal",
    "start": "2859200",
    "end": "2865950"
  },
  {
    "text": "and the best match for spring level is STDs ring so this is used and then if",
    "start": "2865950",
    "end": "2872580"
  },
  {
    "text": "you know that you can access a value by different ways one is calling get and if",
    "start": "2872580",
    "end": "2878040"
  },
  {
    "text": "you then use the wrong index on invalid index you either get a runtime or compile time error that's it so how can",
    "start": "2878040",
    "end": "2885720"
  },
  {
    "text": "this help us our example our fourth example saying let's use polymorphism",
    "start": "2885720",
    "end": "2892220"
  },
  {
    "text": "well we have a variant here we can say in my vector I have elements that are",
    "start": "2892220",
    "end": "2901260"
  },
  {
    "text": "either a circle all lines that's all",
    "start": "2901260",
    "end": "2906510"
  },
  {
    "text": "what we say so we introduce a helper type called I'm either a circle or line",
    "start": "2906510",
    "end": "2911520"
  },
  {
    "text": "and I use that as the element type of a vector the interesting thing is a variant has",
    "start": "2911520",
    "end": "2919050"
  },
  {
    "text": "value semantics so if you put it in a",
    "start": "2919050",
    "end": "2924270"
  },
  {
    "text": "vector the vector creates a copy if you put in a line the vector creates a copy",
    "start": "2924270",
    "end": "2929520"
  },
  {
    "text": "of the line if you put in a variant that as a circle it will create a copy of the",
    "start": "2929520",
    "end": "2934710"
  },
  {
    "text": "circle so you don't run into the problems of lifetime issues because you",
    "start": "2934710",
    "end": "2939780"
  },
  {
    "text": "use references or pointers and that also means you don't have to deal with new and delete you just create the things on",
    "start": "2939780",
    "end": "2946800"
  },
  {
    "text": "the stack push them into the vector and that's it and return the vector and then",
    "start": "2946800",
    "end": "2952200"
  },
  {
    "text": "later on you use it and now the problem is how can we bring polymorphism into",
    "start": "2952200",
    "end": "2958140"
  },
  {
    "text": "this saying while I'm iterating over all the geometric objects I have either to",
    "start": "2958140",
    "end": "2964080"
  },
  {
    "text": "call draw for an object or draw for line so essentially something the kind of",
    "start": "2964080",
    "end": "2970200"
  },
  {
    "text": "code you have to write is if the variant holds the circle call draw of a circle",
    "start": "2970200",
    "end": "2975660"
  },
  {
    "text": "if the variant holds a line called row of a line that kind of thing and you should have a good performance you",
    "start": "2975660",
    "end": "2981930"
  },
  {
    "text": "should not have it in if-else Shane you had should have smarter things to do",
    "start": "2981930",
    "end": "2987000"
  },
  {
    "text": "that like in a virtual function table and here's a way you do that it's a called visit so with with it you can say",
    "start": "2987000",
    "end": "2995010"
  },
  {
    "text": "hey my dear variant for each and every value if you take the value please use",
    "start": "2995010",
    "end": "3001490"
  },
  {
    "text": "this function or you can pass a function object with multiple functions there and call this code and this is a generic",
    "start": "3001490",
    "end": "3009530"
  },
  {
    "text": "lambda so this is a function template that is instantiated for all the types",
    "start": "3009530",
    "end": "3014780"
  },
  {
    "text": "we have so this generic lambda will be complied once for circle once for line",
    "start": "3014780",
    "end": "3020060"
  },
  {
    "text": "and both will be available in this visitor at compile time this visit function checks that all the",
    "start": "3020060",
    "end": "3026119"
  },
  {
    "text": "instance ages are valid so that each type has a draw function and then the",
    "start": "3026119",
    "end": "3031280"
  },
  {
    "text": "code will be generated that depending on the index of the alternative you jump to",
    "start": "3031280",
    "end": "3036920"
  },
  {
    "text": "the right function in sensation of this lambda and this instantiation was then",
    "start": "3036920",
    "end": "3042890"
  },
  {
    "text": "called draw that's it that's a local virtual function table generated by",
    "start": "3042890",
    "end": "3049040"
  },
  {
    "text": "visit for you and that's it that way you have your",
    "start": "3049040",
    "end": "3054440"
  },
  {
    "text": "polymorphic solutions no reason to worry",
    "start": "3054440",
    "end": "3059450"
  },
  {
    "text": "about memory leaks everything is on the stack there's no need for pointers no",
    "start": "3059450",
    "end": "3067640"
  },
  {
    "text": "new delete and note that there's another benefit all the elements in the vector are now located next to each other so",
    "start": "3067640",
    "end": "3074810"
  },
  {
    "text": "regarding caching good caching this works better than before because the alternative using pointers",
    "start": "3074810",
    "end": "3081050"
  },
  {
    "text": "means we have pointers which might refer to different locations in your program so that you have two that the likely",
    "start": "3081050",
    "end": "3088220"
  },
  {
    "text": "that is more probable that you get cache page faults and have to wait for getting",
    "start": "3088220",
    "end": "3094250"
  },
  {
    "text": "the corresponding data into your CPU and wait a minute we are not using the base",
    "start": "3094250",
    "end": "3102230"
  },
  {
    "text": "term we are not using polymorphous and using rato so forget it you can still have a base class if you",
    "start": "3102230",
    "end": "3109040"
  },
  {
    "text": "have some common information but you don't need the base class as an interface that is used in your",
    "start": "3109040",
    "end": "3115700"
  },
  {
    "text": "implementation so you can just have a type called circle a type called",
    "start": "3115700",
    "end": "3120770"
  },
  {
    "text": "line and that's it the third alternative here could be a string and a CD string",
    "start": "3120770",
    "end": "3126800"
  },
  {
    "text": "and it would also work as long as the string has the s draw we call a common",
    "start": "3126800",
    "end": "3132860"
  },
  {
    "text": "API okay two questions usually come here",
    "start": "3132860",
    "end": "3140330"
  },
  {
    "text": "first of all do we have something how do we do a Down cast here so let's assume",
    "start": "3140330",
    "end": "3145850"
  },
  {
    "text": "circle has a center a special function called get center so normally in",
    "start": "3145850",
    "end": "3151190"
  },
  {
    "text": "polymorphism we use dynamic casts in SharePoint us we use dynamic pointer",
    "start": "3151190",
    "end": "3156410"
  },
  {
    "text": "cast and in unique pointers we have to convert the unique pointer to a row",
    "start": "3156410",
    "end": "3161420"
  },
  {
    "text": "pointer and called dynamic cast and so here we have now a different approach the approach is call a function called",
    "start": "3161420",
    "end": "3168500"
  },
  {
    "text": "get is get if is the dynamic cast of a variant it says let's take the address of this variant because we don't have",
    "start": "3168500",
    "end": "3175540"
  },
  {
    "text": "pointers and then let's try to convert this to a circle pointer if this works",
    "start": "3175540",
    "end": "3181960"
  },
  {
    "text": "we are fine and then we can get a pointer a valid",
    "start": "3181960",
    "end": "3187670"
  },
  {
    "text": "point to address otherwise we get the null pointer so we use the new if within a civilization to double check whether",
    "start": "3187670",
    "end": "3194300"
  },
  {
    "text": "we have a pointer and if we have a point that we use it to call gate Center that's it",
    "start": "3194300",
    "end": "3199370"
  },
  {
    "text": "and that's very fast that's usually faster I measured that then the",
    "start": "3199370",
    "end": "3204440"
  },
  {
    "text": "polymorphic approach in using a visitor's for example here's by the way",
    "start": "3204440",
    "end": "3211970"
  },
  {
    "text": "another way to do that you could come up with by what you just saw you could",
    "start": "3211970",
    "end": "3217850"
  },
  {
    "text": "inside the lambda have a compile time if expression double checking when you currently have the implementation that",
    "start": "3217850",
    "end": "3224990"
  },
  {
    "text": "you're Auto type is in fact a circle type which means that your object is a con circle reference",
    "start": "3224990",
    "end": "3231560"
  },
  {
    "text": "don't forget constant reference there then you can here directly do something",
    "start": "3231560",
    "end": "3237080"
  },
  {
    "text": "this is decided at compile time whether this piece of code printing out get center should be compiled or not",
    "start": "3237080",
    "end": "3243830"
  },
  {
    "text": "depending on which in sensation of this lambda is used so there's another",
    "start": "3243830",
    "end": "3250460"
  },
  {
    "text": "interesting way over to overload this out to implement downcast this is this",
    "start": "3250460",
    "end": "3257330"
  },
  {
    "text": "you can overload lambdas and this overload of lambdas even works is one of",
    "start": "3257330",
    "end": "3264590"
  },
  {
    "text": "the lambdas generic and the other is a circle we might run into some issues because we have the best problem of the",
    "start": "3264590",
    "end": "3272390"
  },
  {
    "text": "best match when we have overload resolutions so be very careful if you do that for example that all the",
    "start": "3272390",
    "end": "3277490"
  },
  {
    "text": "declarations have all cons and all reference because otherwise interesting",
    "start": "3277490",
    "end": "3282700"
  },
  {
    "text": "surprises might happen but you can do it and you can say for all the elements in normal elements I call draw but for",
    "start": "3282700",
    "end": "3290390"
  },
  {
    "text": "circles I call center and that way you could say if my variant holds an STD string I do something totally different",
    "start": "3290390",
    "end": "3298270"
  },
  {
    "text": "now the question is what is what the hell is this overload well this is a",
    "start": "3298270",
    "end": "3304430"
  },
  {
    "text": "combination of a couple of new C++ 17 features it's it's not standardized it's",
    "start": "3304430",
    "end": "3309710"
  },
  {
    "text": "something you have to implement but you can easy implement and this is the way it is implemented it's essentially four",
    "start": "3309710",
    "end": "3315860"
  },
  {
    "text": "lines of code what you say here is I have here a data",
    "start": "3315860",
    "end": "3322590"
  },
  {
    "text": "structure overload that is derived from a couple of factors and these factors",
    "start": "3322590",
    "end": "3328230"
  },
  {
    "text": "are coming from argument deduction in the last line you say whatever you pass",
    "start": "3328230",
    "end": "3334140"
  },
  {
    "text": "as a template as an argument to this overload function please deduce that you",
    "start": "3334140",
    "end": "3339360"
  },
  {
    "text": "take the type of these things you pass as an argument as template parameters so",
    "start": "3339360",
    "end": "3345540"
  },
  {
    "text": "that says and that essentially we are saying I have I passed two lambdas these",
    "start": "3345540",
    "end": "3351750"
  },
  {
    "text": "two lambdas are passed to the overload constructor this overload constructor",
    "start": "3351750",
    "end": "3358410"
  },
  {
    "text": "says oh yeah so these are my two template parameters and the two template parameters are my base types so we",
    "start": "3358410",
    "end": "3365790"
  },
  {
    "text": "derive from all types of all lambdas we have here in this overload without",
    "start": "3365790",
    "end": "3371220"
  },
  {
    "text": "specifying their types and then you have to because each overload implements",
    "start": "3371220",
    "end": "3376500"
  },
  {
    "text": "operator perón which means which is a problem if you derive from multiple",
    "start": "3376500",
    "end": "3382890"
  },
  {
    "text": "classes the same operator it is invalidated it's not inherited but you",
    "start": "3382890",
    "end": "3389040"
  },
  {
    "text": "can use a using declaration to still make it available and we do that and this is a very attic using declaration",
    "start": "3389040",
    "end": "3395460"
  },
  {
    "text": "which is also something new and C++ 17 so by having all these features you essentially have the effect you just saw",
    "start": "3395460",
    "end": "3403700"
  },
  {
    "text": "okay we're thinking about to standardizing it but we're also thinking there are some",
    "start": "3403700",
    "end": "3409140"
  },
  {
    "text": "things where this doesn't work perfectly so we are also thinking whether overloading of a lambda shouldn't be a",
    "start": "3409140",
    "end": "3415800"
  },
  {
    "text": "language feature so that that's one reason why this will not come and C++ 20",
    "start": "3415800",
    "end": "3422360"
  },
  {
    "text": "so this is using SD variant and by the way what is this also using it's what",
    "start": "3422360",
    "end": "3429600"
  },
  {
    "text": "you initialize here is an aggregate that's not a class that's an aggregate aggregates in C++ can now have base",
    "start": "3429600",
    "end": "3436140"
  },
  {
    "text": "classes and that feature is used here and we have deduction guides and we have",
    "start": "3436140",
    "end": "3443010"
  },
  {
    "text": "very added using all these features are used to have this",
    "start": "3443010",
    "end": "3448280"
  },
  {
    "text": "and I have to say that he only curly",
    "start": "3448800",
    "end": "3454140"
  },
  {
    "text": "braces work don't use parentheses here because that's the initialization of an",
    "start": "3454140",
    "end": "3459750"
  },
  {
    "text": "aggregate but I told you already you should always use phrases for initialization and you're fine you don't",
    "start": "3459750",
    "end": "3466080"
  },
  {
    "text": "worry about very strange compiler errors messages if you use parents here that's",
    "start": "3466080",
    "end": "3473370"
  },
  {
    "text": "it so we have seen several several new features of C++ 17 and they examples in",
    "start": "3473370",
    "end": "3481800"
  },
  {
    "text": "for examples each and every example used combined at the end several features of",
    "start": "3481800",
    "end": "3490050"
  },
  {
    "text": "what were introduced all each and every feature as well is very very small to",
    "start": "3490050",
    "end": "3495360"
  },
  {
    "text": "some extent but together we create an interesting amount of power in C++ 17",
    "start": "3495360",
    "end": "3501960"
  },
  {
    "text": "and that's my message combining these features is the key especially that",
    "start": "3501960",
    "end": "3506970"
  },
  {
    "text": "makes C++ 70 much more powerful than we thought initially just reading a list of",
    "start": "3506970",
    "end": "3512970"
  },
  {
    "text": "the features and yes we introduced new traps and that's a good reason you buy",
    "start": "3512970",
    "end": "3518910"
  },
  {
    "text": "my book haha about C++ 17 to read all about about all traps I at least know about",
    "start": "3518910",
    "end": "3526560"
  },
  {
    "text": "yet it is now being published close in three weeks it will be published at",
    "start": "3526560",
    "end": "3532080"
  },
  {
    "text": "Amazon as a printing ROG now the electronic version was already available for two years because it was updated",
    "start": "3532080",
    "end": "3538440"
  },
  {
    "text": "regularly for free for those who bought it so you might be interested to see these and other details there and that's",
    "start": "3538440",
    "end": "3547980"
  },
  {
    "text": "the end of my talk thankee thank you very much for your attention [Applause]",
    "start": "3547980",
    "end": "3563739"
  }
]