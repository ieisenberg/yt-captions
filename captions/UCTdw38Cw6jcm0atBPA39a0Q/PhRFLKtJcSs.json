[
  {
    "text": "so good afternoon so I am bill Wagner I'm a senior content developer",
    "start": "8900",
    "end": "15940"
  },
  {
    "text": "Microsoft which means I write a lot of the documentation and learning materials for C sharp and dotnet core so a lot of",
    "start": "15940",
    "end": "24789"
  },
  {
    "text": "what we're going to do with this particular discussion is I want to talk about some of the language design decisions that generate the most",
    "start": "24789",
    "end": "31570"
  },
  {
    "text": "questions that I get why did they do it this way and that's usually immediately",
    "start": "31570",
    "end": "37030"
  },
  {
    "text": "followed with a because it was wrong and they should have done something else instead so I want to dive into some of",
    "start": "37030",
    "end": "43180"
  },
  {
    "text": "those decisions that were made and why as John pointed out a couple times in",
    "start": "43180",
    "end": "48489"
  },
  {
    "text": "his previous talk he had still not perfect there's mistakes which there always is but now let's talk a little",
    "start": "48489",
    "end": "56679"
  },
  {
    "text": "bit about language design in general and one of things we're trying to do with computer language design is we want to",
    "start": "56679",
    "end": "61809"
  },
  {
    "text": "do two different goals one is you have to be very very precise in terms of how",
    "start": "61809",
    "end": "67720"
  },
  {
    "text": "its interpreted by the computer whether it's a compiler interpreter runtime or what have you because we want it to run",
    "start": "67720",
    "end": "74260"
  },
  {
    "text": "exactly the same all the time and we also want a very rich vocabulary for",
    "start": "74260",
    "end": "80440"
  },
  {
    "text": "other developers so that when they read the code that we write it's intuitive and obvious what we met but they're also",
    "start": "80440",
    "end": "89830"
  },
  {
    "text": "just reading it and they'll pick up a lot of human-like cues which computers can't which is one of the reasons for",
    "start": "89830",
    "end": "96370"
  },
  {
    "text": "some of the design decisions we make so if you think about the richness of human language if I were to say that's our new",
    "start": "96370",
    "end": "104200"
  },
  {
    "text": "French teacher or if I were to say that's our new French teacher I said the",
    "start": "104200",
    "end": "110560"
  },
  {
    "text": "exact same words the inflection was just a little different and for most native",
    "start": "110560",
    "end": "115960"
  },
  {
    "text": "English speaker speakers you interpreted those two sentences slightly different in the one case I said that's the new",
    "start": "115960",
    "end": "122080"
  },
  {
    "text": "teacher who teaches the French language you're the one I said that's the new teacher who happens to be French just",
    "start": "122080",
    "end": "130420"
  },
  {
    "text": "that inflection makes a difference and that's one of the difficulties in computer language design is computers",
    "start": "130420",
    "end": "136390"
  },
  {
    "text": "don't get that kind of inflection you have to be very careful with our symbols one of the big goals of c-sharp is to",
    "start": "136390",
    "end": "143620"
  },
  {
    "text": "make it easy to do the right thing and hopefully make it hard to write but",
    "start": "143620",
    "end": "149740"
  },
  {
    "text": "okay so one of the decisions they had was we're not going to fall through in a switcher case statement every case block",
    "start": "149740",
    "end": "157490"
  },
  {
    "text": "has to end in a go to a return or a break or a throw would be the other way",
    "start": "157490",
    "end": "163130"
  },
  {
    "text": "to terminate one you cannot fall through from one to another like you could in a classic C style switch statement when",
    "start": "163130",
    "end": "171500"
  },
  {
    "text": "that first came out a lot of people said you know this just allows a lot of things that we could do where maybe for",
    "start": "171500",
    "end": "177860"
  },
  {
    "text": "one case we do some things and then fall through to the next case and do some further processing and it flows",
    "start": "177860",
    "end": "184310"
  },
  {
    "text": "naturally okay that was always the critique we got for that why would you do this you're just making me type more",
    "start": "184310",
    "end": "189770"
  },
  {
    "text": "adding more characters well first one of the most common",
    "start": "189770",
    "end": "195170"
  },
  {
    "text": "reasons for doing it is it makes it explicit you have to say what you mean after this block ends if you want to",
    "start": "195170",
    "end": "202070"
  },
  {
    "text": "fall through to them to the next one you go to that next label so you can still",
    "start": "202070",
    "end": "207470"
  },
  {
    "text": "write the same code but you have to be explicit about what you meant someone else reviewing that code can't look at",
    "start": "207470",
    "end": "214459"
  },
  {
    "text": "it and say I wonder if they forgot a break there because you had to write something about exactly where you wanted",
    "start": "214459",
    "end": "220790"
  },
  {
    "text": "to go this is a hidden benefit that comes up for any given value when you",
    "start": "220790",
    "end": "227780"
  },
  {
    "text": "look at code if you want to refactor it and move things around at most one case",
    "start": "227780",
    "end": "232790"
  },
  {
    "text": "block gets executed that helps us when we added the pattern matching switch",
    "start": "232790",
    "end": "238370"
  },
  {
    "text": "expressions because there's the semantics of such that the first pattern that matches gets execute it and then it",
    "start": "238370",
    "end": "245060"
  },
  {
    "text": "will exit so the fact that that was already baked into switch makes it a little easier to add pattern matching",
    "start": "245060",
    "end": "252260"
  },
  {
    "text": "into the language and there's a hidden gem that happens is that in general case",
    "start": "252260",
    "end": "259850"
  },
  {
    "text": "blocks inside a switch statement can be rearranged any way you want and the",
    "start": "259850",
    "end": "265490"
  },
  {
    "text": "runtime behavior will always be the same almost always I'll show you what we mean",
    "start": "265490",
    "end": "271310"
  },
  {
    "text": "by that so if I look at a little bit of a switch demo here in terms of some of",
    "start": "271310",
    "end": "277130"
  },
  {
    "text": "the things that we can do in the statement if I were to write some things in terms of just a switch statement looking at",
    "start": "277130",
    "end": "283310"
  },
  {
    "text": "how many points you score for doing things in different points or different sports you can see there's a few bits",
    "start": "283310",
    "end": "289340"
  },
  {
    "text": "where everything has to happen in any case could only occur at once if I were",
    "start": "289340",
    "end": "294530"
  },
  {
    "text": "to comment out the second block for the third case statement we get compiler",
    "start": "294530",
    "end": "303140"
  },
  {
    "text": "errors on that because it will tell me that we can't have a second copy of the same consonant I could rearrange these",
    "start": "303140",
    "end": "315890"
  },
  {
    "text": "in any order and everything still works correctly I can put this one down further",
    "start": "315890",
    "end": "323650"
  },
  {
    "text": "and so on the only way you can't necessarily do that is if I were to introduce a variable in in one of these",
    "start": "329530",
    "end": "339970"
  },
  {
    "text": "statements I could use it later I would",
    "start": "339970",
    "end": "350290"
  },
  {
    "text": "get a warning or an error that its unassigned if I just assigned it in this I would",
    "start": "350290",
    "end": "358810"
  },
  {
    "text": "get rid of that error but now if I rearrange them and move that block above the declaration now I get an error but",
    "start": "358810",
    "end": "365560"
  },
  {
    "text": "don't do that anyway because it's really weird for scoping rules which we'll get into it a little bit later so I did that",
    "start": "365560",
    "end": "372910"
  },
  {
    "text": "one kind of as a preview for one of the decisions that we talked about and we'll go into more depth in the house the switch statement is really changing on",
    "start": "372910",
    "end": "379510"
  },
  {
    "text": "Friday when I talk a lot about the pattern matching features that are being added in c-sharp seven so what are the",
    "start": "379510",
    "end": "387010"
  },
  {
    "text": "next ones that's coming in c-sharp seven is a feature called local functions local functions enable the definition of",
    "start": "387010",
    "end": "393850"
  },
  {
    "text": "functions inside other functions okay seems simple but if we look at that that",
    "start": "393850",
    "end": "399490"
  },
  {
    "text": "feature in general what a lot of people have said is you know if I really look",
    "start": "399490",
    "end": "406479"
  },
  {
    "text": "at what I'm trying to do with local functions I can do the same thing with a lambda expression I can simply define a",
    "start": "406479",
    "end": "413350"
  },
  {
    "text": "lambda expression as a local function why did we add new language features in",
    "start": "413350",
    "end": "418690"
  },
  {
    "text": "order to put local functions into the language well it turns out there's three",
    "start": "418690",
    "end": "424240"
  },
  {
    "text": "very very good reasons for that the first one has to do with how lambda",
    "start": "424240",
    "end": "429700"
  },
  {
    "text": "expressions and functions are defined so if I wanted to do a factorial expression",
    "start": "429700",
    "end": "435669"
  },
  {
    "text": "using lambda expressions the way I would have to do it recursively is I have to first create a lambda",
    "start": "435669",
    "end": "445840"
  },
  {
    "text": "expression and assign it to null okay that's totally useless but I have to do",
    "start": "445840",
    "end": "452860"
  },
  {
    "text": "that because of the rules of the language because now later when I want to actually assign that variable for",
    "start": "452860",
    "end": "459640"
  },
  {
    "text": "that expression in order to use it in side in terms of this recursive algorithm here it has to have already",
    "start": "459640",
    "end": "466899"
  },
  {
    "text": "been both declared and initialized at least once so I have to assign it to",
    "start": "466899",
    "end": "472539"
  },
  {
    "text": "null and then I can declare I've reassigned it it's different and now I can use this land expression as a local",
    "start": "472539",
    "end": "480550"
  },
  {
    "text": "function okay that's a lot of extra work and just in terms of typing if I use",
    "start": "480550",
    "end": "487059"
  },
  {
    "text": "that same implementation as a local function I get something noticeably simpler the red squigglies",
    "start": "487059",
    "end": "493330"
  },
  {
    "text": "that are going on here is because my machine has got a mixture of newer and older bits in order to run some things",
    "start": "493330",
    "end": "499059"
  },
  {
    "text": "on the Mac so it's balking at any of the C sharp 7 syntax in CS code if I want to",
    "start": "499059",
    "end": "506080"
  },
  {
    "text": "declare it as a local function I have a couple different advantages first you notice the first statement is a return",
    "start": "506080",
    "end": "511419"
  },
  {
    "text": "statement I can call this function before I've declared it or to find it because the compiler will do it single",
    "start": "511419",
    "end": "517479"
  },
  {
    "text": "pass like it does today anything can be used as long as it's a member and then I define that local function same basic",
    "start": "517479",
    "end": "526079"
  },
  {
    "text": "syntax if you look i've defined it as a it's a lambda expression but i've",
    "start": "526079",
    "end": "534189"
  },
  {
    "text": "defined that local function it calls itself definitely simpler to read i",
    "start": "534189",
    "end": "542019"
  },
  {
    "text": "don't have some of the extra generics in there to do the func of whatever i don't have some of that extra work so it's",
    "start": "542019",
    "end": "548410"
  },
  {
    "text": "simpler cleaner syntax so that's why we liked it that's why local functions were added that's one of the main single",
    "start": "548410",
    "end": "555100"
  },
  {
    "text": "purpose reasons there's a couple other interesting ones that came out the first",
    "start": "555100",
    "end": "563350"
  },
  {
    "text": "one is that local functions don't require allocating a delegate object so in terms of performance and in terms of",
    "start": "563350",
    "end": "569860"
  },
  {
    "text": "if what you're really trying to do is simply scope something and make it so",
    "start": "569860",
    "end": "575589"
  },
  {
    "text": "you can't call that function from other places inside your code well local",
    "start": "575589",
    "end": "581740"
  },
  {
    "text": "functions are better in that first implementation I have to allocate a delegate object that's a memory",
    "start": "581740",
    "end": "587139"
  },
  {
    "text": "allocation I call it through invoking that delegate it's a little bit more expensive than calling a function",
    "start": "587139",
    "end": "595450"
  },
  {
    "text": "not a lot but in a hot past those kinds of things will matter especially the memory allocations it turns out one of",
    "start": "595450",
    "end": "605080"
  },
  {
    "text": "the very nice things with local functions is that what we actually do in generating the il for a local function",
    "start": "605080",
    "end": "611320"
  },
  {
    "text": "is we just generate a private method so the il is the same as what you would do",
    "start": "611320",
    "end": "617680"
  },
  {
    "text": "today prior to C sharp 6 we just made a private method but the compiler enforces",
    "start": "617680",
    "end": "624310"
  },
  {
    "text": "at compile time that you can't call this local function from any other place",
    "start": "624310",
    "end": "629320"
  },
  {
    "text": "inside of class so we can nest them inside there you get the scoping benefits that you want this method can",
    "start": "629320",
    "end": "635770"
  },
  {
    "text": "only be called from inside the method where it's declared can only be seen",
    "start": "635770",
    "end": "641620"
  },
  {
    "text": "from inside where it's declared so I could declare another local function or another member with the same name",
    "start": "641620",
    "end": "647470"
  },
  {
    "text": "somewhere else and they would not collide but the compiler generates just",
    "start": "647470",
    "end": "652480"
  },
  {
    "text": "a normal private internal or private function and runs through it in the same",
    "start": "652480",
    "end": "657820"
  },
  {
    "text": "way ok so that's why we added that lambdas effectively are different than",
    "start": "657820",
    "end": "664030"
  },
  {
    "text": "local functions so even though there was a way you could do it we find that what we've added is a much cleaner syntax",
    "start": "664030",
    "end": "672330"
  },
  {
    "text": "questions on that so far ok those are the only ones that have",
    "start": "672900",
    "end": "678460"
  },
  {
    "text": "features that are somewhat new in the language the rest of these are generally pretty evergreen this is the one that",
    "start": "678460",
    "end": "686080"
  },
  {
    "text": "still we get questions on so I don't have a demo for this because we can't",
    "start": "686080",
    "end": "692110"
  },
  {
    "text": "demo the feature that doesn't exist c-sharp doesn't do xml literals our joke",
    "start": "692110",
    "end": "697420"
  },
  {
    "text": "about this is that VB in raisin and storage is one based so they made this",
    "start": "697420",
    "end": "703090"
  },
  {
    "text": "mistake one time c-sharp is zero based and we made that mistake zero times so why wouldn't we do xml",
    "start": "703090",
    "end": "711460"
  },
  {
    "text": "literals VB developers love xml literals they just have XML inside put some text",
    "start": "711460",
    "end": "717370"
  },
  {
    "text": "inside with variables it substitutes that generate XML it's awesome well the",
    "start": "717370",
    "end": "722800"
  },
  {
    "text": "first thing we think about this is ok fine that's easy to do but we can use library",
    "start": "722800",
    "end": "728830"
  },
  {
    "text": "calls too pretty much get the same effect why add a whole new construct to the language",
    "start": "728830",
    "end": "734020"
  },
  {
    "text": "itself in order to support an external data format that's a lot of extra work",
    "start": "734020",
    "end": "740880"
  },
  {
    "text": "that's the kind of thing really hasn't happened with libraries because even when this feature first came out",
    "start": "740880",
    "end": "747870"
  },
  {
    "text": "well we didn't weren't necessarily certain what would replace XML over time",
    "start": "747870",
    "end": "754180"
  },
  {
    "text": "we were pretty sure that XML wasn't going to be the permanent data format for all time so why tie yourselves to an external",
    "start": "754180",
    "end": "761410"
  },
  {
    "text": "format that's a library type of problem if we look at a little deeper you know",
    "start": "761410",
    "end": "767830"
  },
  {
    "text": "XML in 2016 as 2017 is a little less important jason is certainly a more",
    "start": "767830",
    "end": "773710"
  },
  {
    "text": "common format for a lot of web communication other formats are on disk and so on so within one time the",
    "start": "773710",
    "end": "780610"
  },
  {
    "text": "language to a format John scan here is convening the Exmouth c-sharp committee",
    "start": "780610",
    "end": "785760"
  },
  {
    "text": "we have enough work right now without tying the c-sharp language to changes in",
    "start": "785760",
    "end": "791350"
  },
  {
    "text": "another external format right now the c-sharp language in our standardization efforts is tied to the CLR and the CLI",
    "start": "791350",
    "end": "800830"
  },
  {
    "text": "and the B field types okay beyond that the language doesn't have",
    "start": "800830",
    "end": "806850"
  },
  {
    "text": "firm ties to some other external standard okay sure Unicode I Triple E",
    "start": "806850",
    "end": "815440"
  },
  {
    "text": "numeric formats there's a few others that yes we are tied to because that are pretty universal okay I don't know how",
    "start": "815440",
    "end": "822880"
  },
  {
    "text": "much your Unicode is going to change coming tomorrow just John's of using",
    "start": "822880",
    "end": "830080"
  },
  {
    "text": "c-sharp talk that will be fine but the",
    "start": "830080",
    "end": "836620"
  },
  {
    "text": "big concern was that if we were to try to add xml literals into the language the standardization efforts gets harder",
    "start": "836620",
    "end": "842700"
  },
  {
    "text": "now we are tied to which version of c-sharp is tied to which version of xml",
    "start": "842700",
    "end": "848230"
  },
  {
    "text": "if the xml standard evolves in any way in order to support those things we had to we would have to take that on that",
    "start": "848230",
    "end": "855670"
  },
  {
    "text": "becomes a much harder problem and one that really doesn't have a lot of value and overall the standards work on",
    "start": "855670",
    "end": "862470"
  },
  {
    "text": "c-sharp has really helped the language grow in adoption in a lot of different",
    "start": "862470",
    "end": "868559"
  },
  {
    "text": "ways because C sharp is an ex- standard xamarin could implement it samer and in",
    "start": "868559",
    "end": "876179"
  },
  {
    "text": "mono could implement it c-sharp already had some roots in other platforms outside of Windows we had dotnet core we",
    "start": "876179",
    "end": "883799"
  },
  {
    "text": "implement that standard as well it makes it easier to run on multiple platforms without it being taken away some of the",
    "start": "883799",
    "end": "891869"
  },
  {
    "text": "rules for ECLA standards because c-sharp is a necklace and 'red if Microsoft decided they weren't going to continue",
    "start": "891869",
    "end": "899069"
  },
  {
    "text": "to evolve c-sharp no there's no plans of that there's a lot of plans to continue",
    "start": "899069",
    "end": "904529"
  },
  {
    "text": "working on things other someone else could pick it up as a standard so the",
    "start": "904529",
    "end": "910410"
  },
  {
    "text": "standardization effort was much more important than adding one feature for XML ok last one was no demo now this is",
    "start": "910410",
    "end": "919139"
  },
  {
    "text": "the one we have a lot of fun with and we still get things there were arguments about this feature to the point of",
    "start": "919139",
    "end": "925069"
  },
  {
    "text": "screaming matches when fire was added to the c-sharp language because it was",
    "start": "925069",
    "end": "932699"
  },
  {
    "text": "added around the time of length and it was added as a necessary feature to support anonymous sites right if we",
    "start": "932699",
    "end": "939779"
  },
  {
    "text": "don't have a name for a type well we have to somehow declare it so we'll say it's var and whatever type the compiler",
    "start": "939779",
    "end": "946439"
  },
  {
    "text": "give us that that's the type of the thing so the type of the variable is determined by the right-hand side of any",
    "start": "946439",
    "end": "952649"
  },
  {
    "text": "assignment statement if I want to declare and assign a local variable I can use var different people at",
    "start": "952649",
    "end": "960779"
  },
  {
    "text": "different times wrote guidance that said you should only use var with anonymous types because with anything else you",
    "start": "960779",
    "end": "968429"
  },
  {
    "text": "should type the full thing out there were people who said var is awesome we're going to use it anytime we",
    "start": "968429",
    "end": "974039"
  },
  {
    "text": "possibly plant can thankfully we won",
    "start": "974039",
    "end": "979160"
  },
  {
    "text": "so the critique is it's hard to know what a local variable is it's var could be anything all variables should be",
    "start": "979459",
    "end": "986639"
  },
  {
    "text": "declared with the type that's the history of c-sharp typing keystrokes is not the same as",
    "start": "986639",
    "end": "993290"
  },
  {
    "text": "adding type information any of our initialization is still strongly typed",
    "start": "993290",
    "end": "998620"
  },
  {
    "text": "so it gets a sight from the right-hand side well named methods well named",
    "start": "998620",
    "end": "1004090"
  },
  {
    "text": "functions obviously constructors tell you what that type is initializations of",
    "start": "1004090",
    "end": "1009670"
  },
  {
    "text": "other types tell you what that type is var works extremely well not with tuples",
    "start": "1009670",
    "end": "1015700"
  },
  {
    "text": "in c-sharp 7 which kathleen will go into in a lot of detail tomorrow where i can declare a tuple is just a few different",
    "start": "1015700",
    "end": "1023170"
  },
  {
    "text": "fields doesn't have a name it's the tuples unnamed type those fields have names and we put those with our works",
    "start": "1023170",
    "end": "1030730"
  },
  {
    "text": "just awesomely so there's still strongly typed you still get all the same benefits you just don't have to type the",
    "start": "1030730",
    "end": "1036670"
  },
  {
    "text": "keystrokes and it reads fairly fairly simply so there's a few things that we",
    "start": "1036670",
    "end": "1043360"
  },
  {
    "text": "are really really important in terms of working with VAR in terms of local functions primarily working with",
    "start": "1043360",
    "end": "1050730"
  },
  {
    "text": "different types that do queryable so to",
    "start": "1050730",
    "end": "1056650"
  },
  {
    "text": "turn this and this and if we look at a",
    "start": "1056650",
    "end": "1063940"
  },
  {
    "text": "couple things with bar so as i said the",
    "start": "1063940",
    "end": "1069640"
  },
  {
    "text": "first two pretty obvious eyes an integer is a stringbuilder the third next three",
    "start": "1069640",
    "end": "1075730"
  },
  {
    "text": "are interesting and the reason they are interesting they are all the same query but i've declared the variables",
    "start": "1075730",
    "end": "1082270"
  },
  {
    "text": "difference in the first case i've declared sequence with far in the second",
    "start": "1082270",
    "end": "1087910"
  },
  {
    "text": "case i've declared it to be a system that linked out iqueryable of int and in",
    "start": "1087910",
    "end": "1093040"
  },
  {
    "text": "the third case I've declared it to be a system's collections generic ienumerable event now with that first one with var",
    "start": "1093040",
    "end": "1100780"
  },
  {
    "text": "remember these are the exact same queries someone decides John what do you",
    "start": "1100780",
    "end": "1105880"
  },
  {
    "text": "think that type is for sequence",
    "start": "1105880",
    "end": "1109770"
  },
  {
    "text": "and I queryable event anybody think it might be ienumerable event depends on",
    "start": "1111710",
    "end": "1118910"
  },
  {
    "text": "the source sequence okay and in one sense you're right where he's looking a",
    "start": "1118910",
    "end": "1124430"
  },
  {
    "text": "little bit deeper it is an eye queryable event and the reason that would be true that you can tell from all three of",
    "start": "1124430",
    "end": "1130940"
  },
  {
    "text": "these statements together is if the query returned an ienumerable event the",
    "start": "1130940",
    "end": "1136580"
  },
  {
    "text": "second statement would not compile because I would be trying to assign an ienumerable an object that is an",
    "start": "1136580",
    "end": "1143270"
  },
  {
    "text": "ienumerable of key to a variable declared as an that queryable and that would not compile however going",
    "start": "1143270",
    "end": "1149900"
  },
  {
    "text": "the other way does because there is an implicit conversion from iqueryable to ienumerable okay and that's actually",
    "start": "1149900",
    "end": "1157970"
  },
  {
    "text": "very dangerous in code that works with iqueryable data sources again somebody",
    "start": "1157970",
    "end": "1165020"
  },
  {
    "text": "besides John what happens if i take an iqueryable and i cast it to an ienumerable and then i continue to work",
    "start": "1165020",
    "end": "1171440"
  },
  {
    "text": "with that sequence it all gets loaded into memory right",
    "start": "1171440",
    "end": "1177980"
  },
  {
    "text": "remember for working with something like entity framework or link to Amazon or link to some other data source that",
    "start": "1177980",
    "end": "1183440"
  },
  {
    "text": "supports iqueryable when I compose queries with different statements I end",
    "start": "1183440",
    "end": "1189170"
  },
  {
    "text": "up composing the query and it's only when I enumerate that sequence that I",
    "start": "1189170",
    "end": "1194180"
  },
  {
    "text": "make the call to the remote data source parse what it should be returned the",
    "start": "1194180",
    "end": "1199670"
  },
  {
    "text": "data set that I want coming back and then enumerate the actual items that come back once I cast it to an",
    "start": "1199670",
    "end": "1207080"
  },
  {
    "text": "ienumerable that round trip happens I will get back all that data put it in",
    "start": "1207080",
    "end": "1212750"
  },
  {
    "text": "memory and all further work on that sequence would happen in memory now well",
    "start": "1212750",
    "end": "1220820"
  },
  {
    "text": "that gets really dangerous and why that can show up easily if you're not using var is notice that iqueryable and",
    "start": "1220820",
    "end": "1226250"
  },
  {
    "text": "ienumerable are in two different namespaces so if you weren't thinking carefully you might naturally just",
    "start": "1226250",
    "end": "1233780"
  },
  {
    "text": "gravitate toward ienumerable declare that as the type because you",
    "start": "1233780",
    "end": "1239330"
  },
  {
    "text": "know that all linked queries work on ienumerable they come back that way and then",
    "start": "1239330",
    "end": "1245090"
  },
  {
    "text": "everything happens in memory if you compose a database query out of multiple statements using ienumerable",
    "start": "1245090",
    "end": "1251360"
  },
  {
    "text": "everyone likely makes a database trip so instead of one trip to your remote database and back you might make four or",
    "start": "1251360",
    "end": "1257809"
  },
  {
    "text": "five and when those later ones are doing filtering with where clauses instead of",
    "start": "1257809",
    "end": "1263389"
  },
  {
    "text": "making one trip that brings back five records you might make the first trip that brings back 10,000 and then start",
    "start": "1263389",
    "end": "1269629"
  },
  {
    "text": "filtering and end up with five much much less in less efficient much more painful",
    "start": "1269629",
    "end": "1276940"
  },
  {
    "text": "so because of that I would regardless of what you think about how code reads",
    "start": "1278139",
    "end": "1283340"
  },
  {
    "text": "I would make sure that anytime you're using link and data sources make absolutely certain to work with var",
    "start": "1283340",
    "end": "1290899"
  },
  {
    "text": "rather than explicitly declaring what kind of variable it is okay questions on",
    "start": "1290899",
    "end": "1298610"
  },
  {
    "text": "that one so go tell all your friends use var immediately that's better",
    "start": "1298610",
    "end": "1305200"
  },
  {
    "text": "alright one of the other decisions that",
    "start": "1305200",
    "end": "1311480"
  },
  {
    "text": "come through in c-sharp that tends to drive people crazy occasionally especially if they've ever used C or C++",
    "start": "1311480",
    "end": "1317600"
  },
  {
    "text": "is it C sharp defined scopes rather",
    "start": "1317600",
    "end": "1323029"
  },
  {
    "text": "generously anytime you open up new statements we'll try to define a new scope it defines new sets of variables",
    "start": "1323029",
    "end": "1329360"
  },
  {
    "text": "and even though that the compiler knows that a variable with the same name declared in a child scope is different",
    "start": "1329360",
    "end": "1336230"
  },
  {
    "text": "than a variable of the same name and a parent scope it doesn't let you do that with one exception you can in",
    "start": "1336230",
    "end": "1344049"
  },
  {
    "text": "constructors you can have arguments that match the name of fields or properties",
    "start": "1344049",
    "end": "1349669"
  },
  {
    "text": "but otherwise if you have a parent scope you cannot use a name it's sort of",
    "start": "1349669",
    "end": "1355399"
  },
  {
    "text": "excuse me unique child scope you cannot declare a variable with a name that's in a parent scope even though the compiler",
    "start": "1355399",
    "end": "1362480"
  },
  {
    "text": "knows it just knows so for instance",
    "start": "1362480",
    "end": "1368830"
  },
  {
    "text": "if we were to look at this if I were to you I now have this scope I've declared",
    "start": "1371840",
    "end": "1377040"
  },
  {
    "text": "a variable X is in a child scope here in",
    "start": "1377040",
    "end": "1383690"
  },
  {
    "text": "inside an else I tried to declare this lambda expression and then use an argument X which is clearly in a",
    "start": "1386870",
    "end": "1393809"
  },
  {
    "text": "different scope it's the argument to that lambda inside that else Clause the compiler tells me I can't do that",
    "start": "1393809",
    "end": "1399809"
  },
  {
    "text": "because I have declared x up above and I cannot declare variable with the same",
    "start": "1399809",
    "end": "1405330"
  },
  {
    "text": "scope",
    "start": "1405330",
    "end": "1407570"
  },
  {
    "text": "now I also what's interesting if I",
    "start": "1412580",
    "end": "1417929"
  },
  {
    "text": "declare up there if we end up with the same error and now where this plays in",
    "start": "1417929",
    "end": "1428730"
  },
  {
    "text": "and sometimes gives people confused in terms of the compiler errors that you generate is this code is also clearly",
    "start": "1428730",
    "end": "1434100"
  },
  {
    "text": "invalid I'm assigning X before I've declared it but the compiler knows what it is and just simply says that because",
    "start": "1434100",
    "end": "1442260"
  },
  {
    "text": "it's in the same scope it says that I'm using that variable before I've declared it okay even though it's in the same",
    "start": "1442260",
    "end": "1447990"
  },
  {
    "text": "scope now why do we care about some of",
    "start": "1447990",
    "end": "1453420"
  },
  {
    "text": "these areas okay first of all the critique we often get is you know naming",
    "start": "1453420",
    "end": "1458880"
  },
  {
    "text": "things is hard I'm using the same concept or from using these temporary indexes to different loops why can't I",
    "start": "1458880",
    "end": "1464700"
  },
  {
    "text": "just use the same the same variable I mean index should be index wherever I",
    "start": "1464700",
    "end": "1470640"
  },
  {
    "text": "use it and so on well first of all you can't substitute variables with the same name because you",
    "start": "1470640",
    "end": "1478130"
  },
  {
    "text": "can't accidentally refer to the wrong thing everything's got to have a unique",
    "start": "1478130",
    "end": "1483660"
  },
  {
    "text": "name that parent scope is there I can't declare something else with the same name anywhere in it it turns out",
    "start": "1483660",
    "end": "1490050"
  },
  {
    "text": "this makes it easier to refactor c-sharp for some of the tools because if I pull a block out and move it to somewhere",
    "start": "1490050",
    "end": "1496530"
  },
  {
    "text": "else that child scope has to have names that all matter I can put it somewhere else",
    "start": "1496530",
    "end": "1502080"
  },
  {
    "text": "generally speaking if I put it somewhere else inside a parent scope that has a name you",
    "start": "1502080",
    "end": "1507850"
  },
  {
    "text": "immediately get the errors and how to fix them it turns out it's also easier",
    "start": "1507850",
    "end": "1513730"
  },
  {
    "text": "to support lam disclosures and local functions that way because they all introduced their own scopes as well a",
    "start": "1513730",
    "end": "1519929"
  },
  {
    "text": "lambda expression has the scope with its argument and the scope for the body of",
    "start": "1519929",
    "end": "1525520"
  },
  {
    "text": "the land expression local functions have a scope that includes the arguments and the body of",
    "start": "1525520",
    "end": "1530980"
  },
  {
    "text": "the local function and another scope that includes locals declared inside the local function so if it does pull in",
    "start": "1530980",
    "end": "1538630"
  },
  {
    "text": "those extra variables from outside you know it's coming in as a closure and you know it's the variable and the storage",
    "start": "1538630",
    "end": "1545350"
  },
  {
    "text": "from the parent scope so the decision was made to make those scopes matter and",
    "start": "1545350",
    "end": "1551080"
  },
  {
    "text": "make everything named unique because then anytime you look at a symbol it should be very obvious where that symbol",
    "start": "1551080",
    "end": "1559179"
  },
  {
    "text": "is used and other places where the name has the same name okay yes right that is",
    "start": "1559179",
    "end": "1574240"
  },
  {
    "text": "historical remnants from C because no no",
    "start": "1574240",
    "end": "1586000"
  },
  {
    "text": "yes yes it it's a mistaken C that we",
    "start": "1586000",
    "end": "1591490"
  },
  {
    "text": "wanted to carry forward because it was comparable to the reason would be this is if we look at the switch statement",
    "start": "1591490",
    "end": "1599549"
  },
  {
    "text": "which I hand up here is a switch statement doesn't require you to have the brackets around the blocks",
    "start": "1600990",
    "end": "1607809"
  },
  {
    "text": "okay so switches define if we look at for instance if I look at the code that",
    "start": "1607809",
    "end": "1613809"
  },
  {
    "text": "we used on the scope demo where I'm using if and else underneath it if is a",
    "start": "1613809",
    "end": "1619780"
  },
  {
    "text": "single statement which may be a block and if it is a block it must be surrounded by braces underneath else is",
    "start": "1619780",
    "end": "1627700"
  },
  {
    "text": "a single block or a single statement which may be a block if we look at the",
    "start": "1627700",
    "end": "1634540"
  },
  {
    "text": "switch well the rules are different under each",
    "start": "1634540",
    "end": "1639690"
  },
  {
    "text": "case is a block of statements since it is a block of statements in that a",
    "start": "1639690",
    "end": "1645630"
  },
  {
    "text": "single statement it doesn't introduce a scope you know i if you if it and if it",
    "start": "1645630",
    "end": "1658950"
  },
  {
    "text": "wouldn't break so much code I think we ought to enforce braces there honestly",
    "start": "1658950",
    "end": "1663990"
  },
  {
    "text": "if you want to have more than one statement but that's it is what it is",
    "start": "1663990",
    "end": "1672740"
  },
  {
    "text": "yeah I knew there'd be something like that from you okay",
    "start": "1674330",
    "end": "1680540"
  },
  {
    "text": "now we get to overloads and base classes so c-sharp and a lot of modern languages",
    "start": "1680540",
    "end": "1689760"
  },
  {
    "text": "have a lot of very interesting rules in terms of overload resolution so me I'll",
    "start": "1689760",
    "end": "1698400"
  },
  {
    "text": "fit this to run the right one we need that for that now",
    "start": "1698400",
    "end": "1708740"
  },
  {
    "text": "here we have a base class a derived class with two different methods that",
    "start": "1711810",
    "end": "1717930"
  },
  {
    "text": "have the same name if we notice in the base class the argument is integer and",
    "start": "1717930",
    "end": "1723870"
  },
  {
    "text": "the derived class the argument is a log if I create a new derived object and I",
    "start": "1723870",
    "end": "1729330"
  },
  {
    "text": "call the message with an integer argument which method gets called so",
    "start": "1729330",
    "end": "1735570"
  },
  {
    "text": "John you don't raise your hand at all because we know he's on the size Standards Committee he knows this all",
    "start": "1735570",
    "end": "1741180"
  },
  {
    "text": "right so who thinks that the method that is in the derived class gets called who",
    "start": "1741180",
    "end": "1748740"
  },
  {
    "text": "thinks the method in the base class gets called okay this should have been more",
    "start": "1748740",
    "end": "1754740"
  },
  {
    "text": "hands somewhere around there who just isn't sure okay so isn't sure is clearly",
    "start": "1754740",
    "end": "1762150"
  },
  {
    "text": "wrong because the compiler always has to make the same choice every time right that would otherwise break that first",
    "start": "1762150",
    "end": "1767850"
  },
  {
    "text": "rule where we don't really know what a language does now for those that thoughts of derived method would be",
    "start": "1767850",
    "end": "1773670"
  },
  {
    "text": "called the one with that takes a long why would you think that and sorry it's",
    "start": "1773670",
    "end": "1786390"
  },
  {
    "text": "an implicit conversion from int along okay but why wouldn't it picked a better",
    "start": "1786390",
    "end": "1794940"
  },
  {
    "text": "one that's in the base class that has an int okay so who of the people who",
    "start": "1794940",
    "end": "1800700"
  },
  {
    "text": "thought it would pick the base class why would it do that because there's no",
    "start": "1800700",
    "end": "1807960"
  },
  {
    "text": "conversion okay let's go ahead and run and if we run it",
    "start": "1807960",
    "end": "1817850"
  },
  {
    "text": "did you thing bring up a console app that we can see how fine I left that",
    "start": "1819370",
    "end": "1826070"
  },
  {
    "text": "code that doesn't file sitting there",
    "start": "1826070",
    "end": "1829539"
  },
  {
    "text": "there we go so what it does is a call to drive class version okay now the reason",
    "start": "1837120",
    "end": "1846059"
  },
  {
    "text": "it calls the drives class version is the",
    "start": "1846059",
    "end": "1851309"
  },
  {
    "text": "language accessibility rules say that it's better to go for the closest class possible rather than pick the best match",
    "start": "1851309",
    "end": "1858690"
  },
  {
    "text": "on any arguments so effectively what the compiler is going to do is it's going to look in type D which is a static type",
    "start": "1858690",
    "end": "1865230"
  },
  {
    "text": "for that object and it will immediately say I've got a message that works you",
    "start": "1865230",
    "end": "1871200"
  },
  {
    "text": "are corrected part of why it can do that is because it's an implicit conversion and then say let's just do this it",
    "start": "1871200",
    "end": "1878730"
  },
  {
    "text": "doesn't even look in the base class for a different method so let's do a couple weird things to make this just so if I",
    "start": "1878730",
    "end": "1885960"
  },
  {
    "text": "were to change this we go to the D but",
    "start": "1885960",
    "end": "1891600"
  },
  {
    "text": "it's like you Claire this is a type B now what method gets called",
    "start": "1891600",
    "end": "1898340"
  },
  {
    "text": "the one in the base class so if we run that and they're still there we go and",
    "start": "1903630",
    "end": "1915330"
  },
  {
    "text": "now it calls a version in the base class because the static type of that variable is a base class object okay what we can",
    "start": "1915330",
    "end": "1926880"
  },
  {
    "text": "have a little bit more fun this is where this part is hard and maybe there were",
    "start": "1926880",
    "end": "1932490"
  },
  {
    "text": "some mistakes here huh change us back to bar let's make this let's leave that",
    "start": "1932490",
    "end": "1945450"
  },
  {
    "text": "there we'll add an overload here it",
    "start": "1945450",
    "end": "1951630"
  },
  {
    "text": "takes an int",
    "start": "1951630",
    "end": "1954230"
  },
  {
    "text": "okay so now you see I get a warning here and I should introduce the new member",
    "start": "1966229",
    "end": "1971299"
  },
  {
    "text": "because I'm overriding a non-virtual method in the base class it's okay so",
    "start": "1971299",
    "end": "1977070"
  },
  {
    "text": "now we should do we should go ahead and call the derived class version again",
    "start": "1977070",
    "end": "1983249"
  },
  {
    "text": "because now I've created one in the drive class that has the right version and now it's going to call the version",
    "start": "1983249",
    "end": "1988440"
  },
  {
    "text": "that takes an int parameter because that argument is better okay cool we think we",
    "start": "1988440",
    "end": "1993479"
  },
  {
    "text": "know these rules now let's change this now to make this virtual and then this",
    "start": "1993479",
    "end": "2002720"
  },
  {
    "text": "becomes an override not new I want it",
    "start": "2002720",
    "end": "2009919"
  },
  {
    "text": "needed to change the other keyword sorry",
    "start": "2009919",
    "end": "2018580"
  },
  {
    "text": "NB thank you",
    "start": "2018580",
    "end": "2022090"
  },
  {
    "text": "and now when we run it it does call it",
    "start": "2030740",
    "end": "2036840"
  },
  {
    "text": "calls the overwritten version in the drive class which we have a version in",
    "start": "2036840",
    "end": "2041850"
  },
  {
    "text": "there yeah all right now excuse me calls the version that takes",
    "start": "2041850",
    "end": "2046980"
  },
  {
    "text": "the lawn this is the one that could be a bit of a mistake still and the reason is",
    "start": "2046980",
    "end": "2054720"
  },
  {
    "text": "the rule thing that the message that takes a long is newly declared in the",
    "start": "2054720",
    "end": "2061138"
  },
  {
    "text": "derived class the override is actually declared in the base class so it's still",
    "start": "2061139",
    "end": "2066300"
  },
  {
    "text": "declared in the base class whether you override it or not so it resolves the same way so why are these rules in here",
    "start": "2066300",
    "end": "2073340"
  },
  {
    "text": "first of all don't do this okay let's just start with that",
    "start": "2073340",
    "end": "2078960"
  },
  {
    "text": "but the reason these rules are here is the idea behind this for the c-sharp",
    "start": "2078960",
    "end": "2084388"
  },
  {
    "text": "language designers is to try to do what they could to make it a component",
    "start": "2084389",
    "end": "2089610"
  },
  {
    "text": "oriented language yes what if it was",
    "start": "2089610",
    "end": "2097920"
  },
  {
    "text": "from an interface enough from a face so",
    "start": "2097920",
    "end": "2105869"
  },
  {
    "text": "if I change the class VIII to an interface that if it was an implicit",
    "start": "2105869",
    "end": "2112380"
  },
  {
    "text": "implementation would call the version in the drive class if it was an explicit interface implementation it would only",
    "start": "2112380",
    "end": "2118440"
  },
  {
    "text": "do it if it was cast to the interface okay so to go through the rules here",
    "start": "2118440",
    "end": "2123540"
  },
  {
    "text": "what the language team was trying to do and the reason for a lot of these rules is to try to make a component oriented",
    "start": "2123540",
    "end": "2131190"
  },
  {
    "text": "language so in addition to being object oriented light language constructs the goal is that",
    "start": "2131190",
    "end": "2137070"
  },
  {
    "text": "base assemblies should be able to be updated without breaking derived classes",
    "start": "2137070",
    "end": "2144240"
  },
  {
    "text": "that are in your assemblies that are part of your application so BCL and",
    "start": "2144240",
    "end": "2150090"
  },
  {
    "text": "others can update underneath or running application and you should not have things break so",
    "start": "2150090",
    "end": "2158170"
  },
  {
    "text": "that gets to some of these rules if a later version of the VCL introduces a",
    "start": "2158170",
    "end": "2163300"
  },
  {
    "text": "new method that happens to be a better argument match for one you have it",
    "start": "2163300",
    "end": "2168640"
  },
  {
    "text": "should still call the one you knew about right if you didn't recompile things that should still call the version you",
    "start": "2168640",
    "end": "2175030"
  },
  {
    "text": "thought was there so new methods can be added to a base class without breaking",
    "start": "2175030",
    "end": "2180130"
  },
  {
    "text": "overload resolution derived classes win always the declaration one is well if",
    "start": "2180130",
    "end": "2187420"
  },
  {
    "text": "you think about it a virtual method is declared in the base class so even if it",
    "start": "2187420",
    "end": "2192490"
  },
  {
    "text": "is overridden in a number of derived classes the declaration space for it is",
    "start": "2192490",
    "end": "2197500"
  },
  {
    "text": "that base class so that was the reason why they went there is that those should in fact always come in that one spot now",
    "start": "2197500",
    "end": "2207100"
  },
  {
    "text": "this being a fairly small demo and a small set of code so we can see it on screen and analyze it this feels wrong",
    "start": "2207100",
    "end": "2214860"
  },
  {
    "text": "in really large applications where you may be two three or four levels deep if",
    "start": "2214860",
    "end": "2220180"
  },
  {
    "text": "you use asp net MVC where you may be five six or eight levels deep in an inheritance hierarchy it really helps to",
    "start": "2220180",
    "end": "2226630"
  },
  {
    "text": "have the methods that you actually see be the ones that get resolved rather than ones that you don't see so that's a",
    "start": "2226630",
    "end": "2234310"
  },
  {
    "text": "lot of the reasons for these rules okay now you can amaze your friends and write",
    "start": "2234310",
    "end": "2239320"
  },
  {
    "text": "code that John will have to answer questions on Stack Overflow",
    "start": "2239320",
    "end": "2244920"
  },
  {
    "text": "all right and again the main thing we're trying to do is look at the derived",
    "start": "2248559",
    "end": "2253670"
  },
  {
    "text": "class should enable you to determine the best method immediately if you don't find any match there then you have to",
    "start": "2253670",
    "end": "2259490"
  },
  {
    "text": "dig deeper new classes can be updated and new overall is changed without",
    "start": "2259490",
    "end": "2264769"
  },
  {
    "text": "changing anything in terms of what it resolves to so if you get a new version of the BCL any methods that were in your",
    "start": "2264769",
    "end": "2271910"
  },
  {
    "text": "class should still be the ones that get called also turns out the static analysis for overload resolution is a",
    "start": "2271910",
    "end": "2278420"
  },
  {
    "text": "little simpler if we were following along in the Rosalind repo we had a feature in c-sharp six that was added",
    "start": "2278420",
    "end": "2286519"
  },
  {
    "text": "that was called better better Ness where all these rules are in terms of picking",
    "start": "2286519",
    "end": "2291680"
  },
  {
    "text": "the better method that code got really old and ugly and now it's better so we",
    "start": "2291680",
    "end": "2297559"
  },
  {
    "text": "have better bitterness we found a bug and in c-sharp seven you'll see a feature for even better better nuts",
    "start": "2297559",
    "end": "2304849"
  },
  {
    "text": "okay last big interesting one that we get a lot of questions on what's a nice",
    "start": "2304849",
    "end": "2310190"
  },
  {
    "text": "tip in it is partial classes so you're probably familiar with tools that",
    "start": "2310190",
    "end": "2315950"
  },
  {
    "text": "generate classes for you and when they do that they almost always generate that class with the partial class keyword so",
    "start": "2315950",
    "end": "2323630"
  },
  {
    "text": "that you can add your own implementation of some methods and add methods to that existing class okay",
    "start": "2323630",
    "end": "2331279"
  },
  {
    "text": "now the rules for this suddenly become a little complicated because what we have to do now is because c-sharp is single",
    "start": "2331279",
    "end": "2337849"
  },
  {
    "text": "inheritance there can only be one base class described for that partial class",
    "start": "2337849",
    "end": "2343809"
  },
  {
    "text": "so either every file that declares part",
    "start": "2343809",
    "end": "2349190"
  },
  {
    "text": "of that partial class must declare the exact same base class or it can omit any",
    "start": "2349190",
    "end": "2354470"
  },
  {
    "text": "base class I would recommend omitting the base class because then if the tools changes it uses a new base class it",
    "start": "2354470",
    "end": "2361819"
  },
  {
    "text": "doesn't break your code the interfaces",
    "start": "2361819",
    "end": "2366829"
  },
  {
    "text": "are very interesting and different in that because interfaces you can have multiple interfaces",
    "start": "2366829",
    "end": "2372339"
  },
  {
    "text": "any text file that adds to a partial class can declare new interfaces that",
    "start": "2372339",
    "end": "2379130"
  },
  {
    "text": "that class must support and this becomes a really interesting feature but the critique we get is you",
    "start": "2379130",
    "end": "2386910"
  },
  {
    "text": "know this can be really confusing I look at the declaration of a class I can't tell for sure what interfaces that",
    "start": "2386910",
    "end": "2392400"
  },
  {
    "text": "implements I'm not even really sure what base class it is because it may not declare it and it's just hard you should",
    "start": "2392400",
    "end": "2399720"
  },
  {
    "text": "make them all the same well no first of all we're not going to do that so what",
    "start": "2399720",
    "end": "2405210"
  },
  {
    "text": "we should say is well maybe we want everything to be in the same if you want to go right ahead you can read eclair",
    "start": "2405210",
    "end": "2411510"
  },
  {
    "text": "interfaces to your heart's content",
    "start": "2411510",
    "end": "2415430"
  },
  {
    "text": "the first thing I would recommend is don't declare the base class on your implementation for a partial class",
    "start": "2416690",
    "end": "2422580"
  },
  {
    "text": "because tools can change the hidden one that I really like is because your",
    "start": "2422580",
    "end": "2428430"
  },
  {
    "text": "additions to a partial class can implement new interfaces it provides a",
    "start": "2428430",
    "end": "2433890"
  },
  {
    "text": "much much easier way to build test harnesses around tool generated classes",
    "start": "2433890",
    "end": "2439490"
  },
  {
    "text": "so let me show you what I mean so the last demo that we put together if I look",
    "start": "2439490",
    "end": "2446340"
  },
  {
    "text": "at partial classes one of the most common places that you'll run into it is using a tool like entity framework so I",
    "start": "2446340",
    "end": "2454260"
  },
  {
    "text": "took this code right out of an entity framework for demo so it's a blogging context so it's an in any framework",
    "start": "2454260",
    "end": "2459660"
  },
  {
    "text": "class designed to work with the blog engine so if we look at the context it's",
    "start": "2459660",
    "end": "2466620"
  },
  {
    "text": "going to have a DB set for blogs maybe you have more than one blog on the site and a DB set for posts individual blog",
    "start": "2466620",
    "end": "2474270"
  },
  {
    "text": "posts has the override that configures it I'm running on net core so this would",
    "start": "2474270",
    "end": "2480180"
  },
  {
    "text": "be using sequel Lite if we ran a full demo on this and you can see that we have the model classes for a blog which",
    "start": "2480180",
    "end": "2486750"
  },
  {
    "text": "would include a list of posts and for a post which would have an ID a title content and so on and so forth now this",
    "start": "2486750",
    "end": "2493860"
  },
  {
    "text": "is incredibly hard to mock if I want to write unit tests around all the code that's using this it's truly painful",
    "start": "2493860",
    "end": "2500360"
  },
  {
    "text": "because the base class is dbcontext has a lot of methods it has a lot of things",
    "start": "2500360",
    "end": "2505680"
  },
  {
    "text": "that are tied to a database implementation a lot of them aren't virtual it's hard to override them it",
    "start": "2505680",
    "end": "2511290"
  },
  {
    "text": "wasn't designed to be able to be mocked out in fact even the DB set really isn't",
    "start": "2511290",
    "end": "2517740"
  },
  {
    "text": "designed to be mocked out so what a lot of companies end up doing is they'll take something like this and they'll say",
    "start": "2517740",
    "end": "2524069"
  },
  {
    "text": "I'm going to write a wrapper around the blogging context which implements some interface I want and then I can defer",
    "start": "2524069",
    "end": "2531779"
  },
  {
    "text": "everything and call the methods inside the context and I can mock that and do all that that's a lot of work for one",
    "start": "2531779",
    "end": "2538640"
  },
  {
    "text": "it's also a rather leaky abstraction right I can still probably get around it",
    "start": "2538640",
    "end": "2544740"
  },
  {
    "text": "and do something that I want and then suddenly I'm writing untestable code so",
    "start": "2544740",
    "end": "2549809"
  },
  {
    "text": "let's think of an easier way to do it well what I'm going to do is I'm going",
    "start": "2549809",
    "end": "2555569"
  },
  {
    "text": "to make my own interface that I'm just going to attach to that partial class so",
    "start": "2555569",
    "end": "2560910"
  },
  {
    "text": "I define in my application context and I have a couple different examples here the one is with the DB set I'm returning",
    "start": "2560910",
    "end": "2570480"
  },
  {
    "text": "it as an eye queryable of blog which is one of the interfaces that's implemented",
    "start": "2570480",
    "end": "2575789"
  },
  {
    "text": "by DB set because DB set itself is also very very hard to mock and it's not partial so we can't do the same trick so",
    "start": "2575789",
    "end": "2583079"
  },
  {
    "text": "I'm going to declare that to be an iqueryable and the other one I'm going to do is I'm just going to as an example",
    "start": "2583079",
    "end": "2588630"
  },
  {
    "text": "add the Save Changes method Save Changes is one of the messages in DB context so",
    "start": "2588630",
    "end": "2594750"
  },
  {
    "text": "I can add that to my interface now if you note I add my partial class here for",
    "start": "2594750",
    "end": "2601500"
  },
  {
    "text": "my blogging context I don't have to even have an implementation for Save Changes because that's already in the tool",
    "start": "2601500",
    "end": "2607440"
  },
  {
    "text": "generated code in production I'll just call the version that's in blogging context and if I wanted to for a but I",
    "start": "2607440",
    "end": "2619289"
  },
  {
    "text": "do have to do a little bit of work on the posts and Z blogs because DB set is",
    "start": "2619289",
    "end": "2626720"
  },
  {
    "text": "different than iqueryable so I'd have to and I have to massage the return type there so I've written a method in the",
    "start": "2626720",
    "end": "2632490"
  },
  {
    "text": "interface then what I want to do is if I take DB I can write my own mocking class",
    "start": "2632490",
    "end": "2639539"
  },
  {
    "text": "or use some mocking framework and I'm going to declare that I'm just going to implement that interface and I can",
    "start": "2639539",
    "end": "2645569"
  },
  {
    "text": "expand this to be anything I use in DB context as those are the things that I would have to put together in terms of mocking",
    "start": "2645569",
    "end": "2652470"
  },
  {
    "text": "out this class so any tool that generates a partial class I can define",
    "start": "2652470",
    "end": "2658920"
  },
  {
    "text": "the interface that I want as long as the return values of anything in that",
    "start": "2658920",
    "end": "2664230"
  },
  {
    "text": "interface are something I can also mock it becomes very very easy to work around and just to add that capability for",
    "start": "2664230",
    "end": "2671880"
  },
  {
    "text": "classes that may not have been designed with testing in mind and it ends up being a lot simpler than wrapping it and",
    "start": "2671880",
    "end": "2678740"
  },
  {
    "text": "writing a whole lot of one-line message and making sure that you never touch the",
    "start": "2678740",
    "end": "2683820"
  },
  {
    "text": "actual tool generated class anywhere in your code questions okay and was that",
    "start": "2683820",
    "end": "2693840"
  },
  {
    "text": "we're getting reasonably close to the end these are some of the most common things that I've seen in terms of questions on c-sharp where people really",
    "start": "2693840",
    "end": "2701790"
  },
  {
    "text": "wonder why did they design it that way and I'm curious about what any of yours are what things do you think are just",
    "start": "2701790",
    "end": "2707790"
  },
  {
    "text": "like why did they do that yes",
    "start": "2707790",
    "end": "2716060"
  },
  {
    "text": "I'm sorry",
    "start": "2717380",
    "end": "2721250"
  },
  {
    "text": "why do both read-only dictionary and dictionary implement I dictionary I",
    "start": "2722840",
    "end": "2730010"
  },
  {
    "text": "don't know the answer to that one I think that's more in the framework itself other than for historical reasons",
    "start": "2734150",
    "end": "2742440"
  },
  {
    "text": "because the non read-only ones came first this is really the the biggest one",
    "start": "2742440",
    "end": "2748170"
  },
  {
    "text": "there yes I see question over here yeah",
    "start": "2748170",
    "end": "2755940"
  },
  {
    "text": "yeah okay yes why am I allowed to set an enum",
    "start": "2755940",
    "end": "2769890"
  },
  {
    "text": "value to a number that isn't in the enum set that was defined for that I take the",
    "start": "2769890",
    "end": "2786380"
  },
  {
    "text": "lot of the original designs for that was due in part for performance because it's",
    "start": "2786380",
    "end": "2792570"
  },
  {
    "text": "underlying data storage is an int you know or a byte or whatever you declare it to be so it's underlying storage is",
    "start": "2792570",
    "end": "2798780"
  },
  {
    "text": "that and in order to restrict it to those values the compiler would have to inject code to check each assignment in",
    "start": "2798780",
    "end": "2807090"
  },
  {
    "text": "order to make that happen okay so that would get rather expensive over time",
    "start": "2807090",
    "end": "2813410"
  },
  {
    "text": "that's probably the biggest single reason I think serialization was a bit of a consideration as well but I think",
    "start": "2813410",
    "end": "2819780"
  },
  {
    "text": "the biggest one was the performance in terms of making sure that enums are actually efficient to use",
    "start": "2819780",
    "end": "2826820"
  },
  {
    "text": "right but that's that's still a closed set so you could animate yeah right but",
    "start": "2835290",
    "end": "2847450"
  },
  {
    "text": "if the compiler knows it's a if the compiler knows that it's a flag enum it",
    "start": "2847450",
    "end": "2853330"
  },
  {
    "text": "knows that it still has a closed set of the values that it could take from that yeah do you want to answer that one then",
    "start": "2853330",
    "end": "2866980"
  },
  {
    "text": "yeah I don't know the answer to that one",
    "start": "2866980",
    "end": "2889150"
  },
  {
    "text": "I is it that's not Arctic it doesn't",
    "start": "2889150",
    "end": "2897580"
  },
  {
    "text": "yeah I don't think it's in there",
    "start": "2897580",
    "end": "2903030"
  },
  {
    "text": "no well no I don't think it does you're right okay I bet you can do that yeah I",
    "start": "2903030",
    "end": "2921210"
  },
  {
    "text": "trust you okay",
    "start": "2921210",
    "end": "2924810"
  },
  {
    "text": "okay others yes why don't we have",
    "start": "2926420",
    "end": "2937200"
  },
  {
    "text": "extension properties why don't we have extension properties it has come up as",
    "start": "2937200",
    "end": "2943920"
  },
  {
    "text": "an idea a few times what's that I know",
    "start": "2943920",
    "end": "2949650"
  },
  {
    "text": "it has from a release standpoint it's come up as an idea a few times one of",
    "start": "2949650",
    "end": "2956880"
  },
  {
    "text": "the harder things to solve there is where to store that and to keep track of",
    "start": "2956880",
    "end": "2962010"
  },
  {
    "text": "that that would be the primary reason is",
    "start": "2962010",
    "end": "2968569"
  },
  {
    "text": "to try to figure out exactly where that storage goes for an extension property is and it has come up and it continues",
    "start": "2968569",
    "end": "2976829"
  },
  {
    "text": "to come up it hasn't bubbled up to the top of the list where it has been implemented and the same thing is true with extension",
    "start": "2976829",
    "end": "2983700"
  },
  {
    "text": "indexers which is kind of cool the syntax proposed for extension indexers",
    "start": "2983700",
    "end": "2989270"
  },
  {
    "text": "lets you type this more times in a row than you would ever want to because I",
    "start": "2989270",
    "end": "2996059"
  },
  {
    "text": "could say see",
    "start": "2996059",
    "end": "3002799"
  },
  {
    "text": "I just make this",
    "start": "3003900",
    "end": "3007760"
  },
  {
    "text": "there which would be the how you would extend righted a an extension indexer so",
    "start": "3017950",
    "end": "3029020"
  },
  {
    "text": "you get to write this a few times in wrong that's yeah it has been it has",
    "start": "3029020",
    "end": "3035980"
  },
  {
    "text": "been looked at and it still is on the table I believe there is a Rosslyn issue related to extension properties if you",
    "start": "3035980",
    "end": "3042369"
  },
  {
    "text": "wanted to comment on it and add your voice there C sharp seven is coming to",
    "start": "3042369",
    "end": "3048820"
  },
  {
    "text": "release so discussions are starting on what will happen in c-sharp eight and",
    "start": "3048820",
    "end": "3054099"
  },
  {
    "text": "I'm sure that feature will come up again other questions yes why did they include",
    "start": "3054099",
    "end": "3064869"
  },
  {
    "text": "the appalling backslash X in string literals historical there's um you know",
    "start": "3064869",
    "end": "3078400"
  },
  {
    "text": "there's there's an interesting thing there and I think and this is more my opinion than knowing everything about",
    "start": "3078400",
    "end": "3084099"
  },
  {
    "text": "all the design meetings if you look at the languages that are getting a lot of adoption a lot of them the the curly",
    "start": "3084099",
    "end": "3093099"
  },
  {
    "text": "brace languages are getting art generally get more adoption whether that be C C++ C sharp Java JavaScript and so",
    "start": "3093099",
    "end": "3102130"
  },
  {
    "text": "on because for a large large number of programmers at any of the times when",
    "start": "3102130",
    "end": "3108220"
  },
  {
    "text": "those languages were introduced could read them and despite warts be",
    "start": "3108220",
    "end": "3114010"
  },
  {
    "text": "productive in them relatively quickly so I think with all of those languages beyond C there was a fair amount of",
    "start": "3114010",
    "end": "3120609"
  },
  {
    "text": "designs that went into saying I want this to be familiar to the people we're trying to attract to this language okay",
    "start": "3120609",
    "end": "3133380"
  },
  {
    "text": "go right ahead I'm sure where you're going to on this one so this is the Mac",
    "start": "3133380",
    "end": "3139710"
  },
  {
    "text": "though - that's all right have you got a brushing full no I haven't right so if I have 3x equals x /",
    "start": "3139710",
    "end": "3148680"
  },
  {
    "text": "x 0 9 good ok string y equals and back",
    "start": "3148680",
    "end": "3159779"
  },
  {
    "text": "slash X 0 9 bad those look like they're both tab",
    "start": "3159779",
    "end": "3166109"
  },
  {
    "text": "followed by good and tab fully by bad yeah more than that no they're not because b and a happen to be hex",
    "start": "3166109",
    "end": "3173339"
  },
  {
    "text": "characters and G and Oh ant so this the second one is two characters long it's",
    "start": "3173339",
    "end": "3181519"
  },
  {
    "text": "equivalent to u + 0-9 VA followed by D",
    "start": "3181519",
    "end": "3189109"
  },
  {
    "text": "whereas this is for equivalent to u + 0-9 and sorry 0 0 0 9 good right I'll I",
    "start": "3189109",
    "end": "3199650"
  },
  {
    "text": "don't think that's intuitive no it's not but it has a bit intuitive in any of the other languages that did it either",
    "start": "3199650",
    "end": "3206719"
  },
  {
    "text": "what's up and see it was probably always",
    "start": "3207229",
    "end": "3213599"
  },
  {
    "text": "two hex digits right yeah",
    "start": "3213599",
    "end": "3217160"
  },
  {
    "text": "you would be the one to find us okay any other question did you write an",
    "start": "3222170",
    "end": "3230490"
  },
  {
    "text": "issue about that though yes yes yeah so",
    "start": "3230490",
    "end": "3244200"
  },
  {
    "text": "there are two reasons for this the question was sort of post as a statement the new tuples are immutable value types",
    "start": "3244200",
    "end": "3252680"
  },
  {
    "text": "yes yes they are so the new pupils are first of all the value types because we",
    "start": "3252680",
    "end": "3258870"
  },
  {
    "text": "avoid allocations okay which is also why there are a lot more generic classes for",
    "start": "3258870",
    "end": "3264090"
  },
  {
    "text": "those she looked at the system tuple that went up to nine and then the tenth",
    "start": "3264090",
    "end": "3270720"
  },
  {
    "text": "one was another tuple to add more it's really bizarre and the new value tuple",
    "start": "3270720",
    "end": "3276300"
  },
  {
    "text": "there's I believe it goes up to 22 right",
    "start": "3276300",
    "end": "3282030"
  },
  {
    "text": "I think I haven't I haven't I haven't stress it yet I think it's it's either",
    "start": "3282030",
    "end": "3287940"
  },
  {
    "text": "15 or 20 but there there's a lot so that's why they are and they are value",
    "start": "3287940",
    "end": "3293610"
  },
  {
    "text": "types because then they can be worked as value types we don't have allocations",
    "start": "3293610",
    "end": "3298830"
  },
  {
    "text": "okay why are they immutable because we've always said value types shouldn't be mutable or should be immutable the",
    "start": "3298830",
    "end": "3306450"
  },
  {
    "text": "reason they're mutable is as John says just think of it as a bag of variables the problem tuples are really trying to",
    "start": "3306450",
    "end": "3312180"
  },
  {
    "text": "solve is I want to return more than one thing from a method right because we already can pass more than one argument",
    "start": "3312180",
    "end": "3318120"
  },
  {
    "text": "to a method I don't need to apples there I want to return more than one thing and it doesn't have a name it doesn't have",
    "start": "3318120",
    "end": "3324390"
  },
  {
    "text": "structure it just has more than one thing okay by making them mutable value",
    "start": "3324390",
    "end": "3331080"
  },
  {
    "text": "types a lot of syntax gets easier and more natural and that I can declare the individual variables I can work with",
    "start": "3331080",
    "end": "3338310"
  },
  {
    "text": "those individual variables which well they're not mutable they're copied in place with integers and such and then I",
    "start": "3338310",
    "end": "3345750"
  },
  {
    "text": "can return the tuple I can deconstruct it the copying is generally simpler we",
    "start": "3345750",
    "end": "3351900"
  },
  {
    "text": "don't have to copy references and as long as you don't use a tuple as a key for a hash set or a dictionary or",
    "start": "3351900",
    "end": "3358810"
  },
  {
    "text": "a hash based container she's going to be fine the chances that you would really",
    "start": "3358810",
    "end": "3365230"
  },
  {
    "text": "want to do that because they're an unnamed type is really pretty low as what we're thinking and I would say the",
    "start": "3365230",
    "end": "3371500"
  },
  {
    "text": "prescriptive guidance for tuples is that I wouldn't make them part of the public interface for classes it's certainly",
    "start": "3371500",
    "end": "3378010"
  },
  {
    "text": "legal not sure it's a good idea okay and I almost certain canceling will cover",
    "start": "3378010",
    "end": "3385210"
  },
  {
    "text": "this tomorrow the names that you get with value tuples only get added to",
    "start": "3385210",
    "end": "3391360"
  },
  {
    "text": "metadata if they're public otherwise it's just compiler magic that takes your",
    "start": "3391360",
    "end": "3396700"
  },
  {
    "text": "semantic name and maps it to item one and item two okay so they've become very very lightweight and as John says if you",
    "start": "3396700",
    "end": "3403960"
  },
  {
    "text": "really just think of it as just I'm returning more than one thing it's super simple does that mean they break dynamic",
    "start": "3403960",
    "end": "3412420"
  },
  {
    "text": "typing no they shouldn't because you do",
    "start": "3412420",
    "end": "3420820"
  },
  {
    "text": "have the metadata on them for when they're public yeah right yep",
    "start": "3420820",
    "end": "3439080"
  },
  {
    "text": "it would silly it would yeah it would still work well once you once it's",
    "start": "3439170",
    "end": "3444580"
  },
  {
    "text": "dynamic you're not going to get the intellisense on the type anyway right well it works let's try that one yeah",
    "start": "3444580",
    "end": "3454110"
  },
  {
    "text": "I'd have to try that I haven't looked it I haven't looked at the spec on that part yet don't do that but and I might",
    "start": "3454110",
    "end": "3463060"
  },
  {
    "text": "not because the storage is still item1 item2 and so on yeah okay thanks for",
    "start": "3463060",
    "end": "3470050"
  },
  {
    "text": "probably one more question okay John",
    "start": "3470050",
    "end": "3476470"
  },
  {
    "text": "oh yeah why is the default literal sites for 0.5",
    "start": "3476470",
    "end": "3483930"
  },
  {
    "text": "why is that do you mean 0.5 as a specific number in general any literal",
    "start": "3495510",
    "end": "3503220"
  },
  {
    "text": "right the the general case was meant to",
    "start": "3503220",
    "end": "3509290"
  },
  {
    "text": "be that it was more going to be for floating point math and use double precision rather than specific ranges",
    "start": "3509290",
    "end": "3514900"
  },
  {
    "text": "and currency and such for decimals so given the community at the time the fact",
    "start": "3514900",
    "end": "3523360"
  },
  {
    "text": "that scientific competing was probably more likely than the decimal and",
    "start": "3523360",
    "end": "3529030"
  },
  {
    "text": "currency and that the decimal and currency was going to be the more",
    "start": "3529030",
    "end": "3534720"
  },
  {
    "text": "special case they went with double yes",
    "start": "3534720",
    "end": "3542910"
  },
  {
    "text": "well it is one thing I would change if I could yes in height what I actually",
    "start": "3544080",
    "end": "3558640"
  },
  {
    "text": "disagree with that but that's just me the one thing I would change John's",
    "start": "3558640",
    "end": "3564160"
  },
  {
    "text": "John's would be sealed by default the one thing I would change is in hindsight I don't think I would have added dynamic",
    "start": "3564160",
    "end": "3570240"
  },
  {
    "text": "it's a lot of heavyweight stuff and as it turns out it's been used a lot less",
    "start": "3570240",
    "end": "3578020"
  },
  {
    "text": "than I probably thought it would have at the time but that's only with hindsight",
    "start": "3578020",
    "end": "3585460"
  },
  {
    "text": "honestly yeah that's probably the one that I'm looking and with that thank you",
    "start": "3585460",
    "end": "3597130"
  },
  {
    "text": "very much I'll take any more questions up here as we go description",
    "start": "3597130",
    "end": "3602700"
  }
]