[
  {
    "start": "0",
    "end": "185000"
  },
  {
    "text": "all right let's see um I think this is the time where I'm supposed to start I think",
    "start": "7000",
    "end": "12080"
  },
  {
    "text": "I was supposed to start two minutes ago um but then you know you just get a chance to get everyone into the room",
    "start": "12080",
    "end": "18920"
  },
  {
    "text": "that's my excuse and I'm sticking with that um my name is Mark Sean and if you want to know more about me there's",
    "start": "18920",
    "end": "24320"
  },
  {
    "text": "information there on blog that pl. DK I'm not going to Tire you with that also on Twitter at plur um so um apart from",
    "start": "24320",
    "end": "32040"
  },
  {
    "text": "being a freelance um software developer I also give conference talks like this one so a couple of months ago I was in",
    "start": "32040",
    "end": "38559"
  },
  {
    "text": "um KF in Ukraine giving a conference talk there and I was talking about um",
    "start": "38559",
    "end": "44600"
  },
  {
    "text": "what we can learn about dependence injection from functional programming languages like if Shar and Haskell it's",
    "start": "44600",
    "end": "50280"
  },
  {
    "text": "not that it's not the talk that I'm giving today it was another one and um after the talk people came to me and",
    "start": "50280",
    "end": "56800"
  },
  {
    "text": "started talking to me which is a perfectly normal thing you're welcome to do that as well um and one of the common",
    "start": "56800",
    "end": "62399"
  },
  {
    "text": "questions that I you know kept getting was okay so you showed us all those cool things in the sharpen in has schol um",
    "start": "62399",
    "end": "69600"
  },
  {
    "text": "how do you apply those things in G I'm sort of thinking a little bit",
    "start": "69600",
    "end": "74680"
  },
  {
    "text": "about the the answer to this problem or to the question and um basically",
    "start": "74680",
    "end": "80360"
  },
  {
    "text": "beginning to arrive at the conclusion that it's fine that c is getting some of the functional language features like",
    "start": "80360",
    "end": "87119"
  },
  {
    "text": "Lambda expressions and stuff like that um but trying to turn C into a you know",
    "start": "87119",
    "end": "94079"
  },
  {
    "text": "strictly statically typed functional programming language is not really going to take your code base to a place where",
    "start": "94079",
    "end": "100960"
  },
  {
    "text": "you want to be um people weren't really happy with that answer uh because you often you",
    "start": "100960",
    "end": "108159"
  },
  {
    "text": "obviously You' like to get an answer that you know you can do these things um",
    "start": "108159",
    "end": "113200"
  },
  {
    "text": "but okay that's what that's the best I could come up with at that time um so I gave another talk I actually repeated",
    "start": "113200",
    "end": "119680"
  },
  {
    "text": "the talk in Moscow um a month later on and afterwards people came and uh asked",
    "start": "119680",
    "end": "124759"
  },
  {
    "text": "me various questions and one of the questions that kept coming up was you know how do you apply all those cool techniques to CH you can sort of see a",
    "start": "124759",
    "end": "130520"
  },
  {
    "text": "pattern this is a an a question that I get asked over and over again um and",
    "start": "130520",
    "end": "136360"
  },
  {
    "text": "again you know I I answered that well you can do some things but you know really trying to go fully functional in",
    "start": "136360",
    "end": "142879"
  },
  {
    "text": "C is not going to make it's not you can't you can't harvest the benefits of functional programming by doing that",
    "start": "142879",
    "end": "150040"
  },
  {
    "text": "sharp because it's going to make your code look absolutely horrible and people",
    "start": "150040",
    "end": "155120"
  },
  {
    "text": "they they didn't really believe me so I decided okay I will now show the world just how horrible it can be and that's",
    "start": "155120",
    "end": "162920"
  },
  {
    "text": "the talk today I kid you not that's that's my",
    "start": "162920",
    "end": "168159"
  },
  {
    "text": "plan I will show you the most horrible shishak quote you have seen no you've probably seen the horrible Shar code but",
    "start": "168159",
    "end": "174400"
  },
  {
    "text": "I will show you horrible Shar code in a completely different way of horror if you will um so um in order to do that we",
    "start": "174400",
    "end": "182519"
  },
  {
    "text": "need to look at some example code so I always like to use the same scenario for my examples if I can and that of an",
    "start": "182519",
    "end": "189760"
  },
  {
    "text": "online restaurant reservation system this I always use this scenario if at all possible but I keep you know re",
    "start": "189760",
    "end": "195799"
  },
  {
    "text": "remixing and changing the code examples so just to make sure everyone understands what we're talking about you want to make a restaurant reservation",
    "start": "195799",
    "end": "202640"
  },
  {
    "text": "you go to a you find a form you fill in the dates and the your details and so on this is my real em address email address",
    "start": "202640",
    "end": "208840"
  },
  {
    "text": "all the spammers already have have it so you're welcome to use it as well um so you fill in the form you click submit uh",
    "start": "208840",
    "end": "214799"
  },
  {
    "text": "it creates some sort of Json document um that gets posted to some sort of web server and the thing that we have to do",
    "start": "214799",
    "end": "221400"
  },
  {
    "text": "is we have to figure out how to implement the web server and we're just going to look at a small snippet of the",
    "start": "221400",
    "end": "226519"
  },
  {
    "text": "business logic there not even the entire web server stack and we just see what's going to happen if we try to make it",
    "start": "226519",
    "end": "232640"
  },
  {
    "text": "fully functional and sticking in sharp now um since we're doing independent",
    "start": "232640",
    "end": "239959"
  },
  {
    "start": "237000",
    "end": "342000"
  },
  {
    "text": "injection I think this is a good you know thing to to see if we can turn that into a fully functional thing um we will",
    "start": "239959",
    "end": "246680"
  },
  {
    "text": "define an interface because that's what you do when you do dependen injection you could use an abstract Base Class as well it's not really important so we we",
    "start": "246680",
    "end": "253680"
  },
  {
    "text": "really have a database with some reservations inside of them but in order to um comply with various Enterprise",
    "start": "253680",
    "end": "260919"
  },
  {
    "text": "things we call it repository even though everyone knows it's a database um so here's our database with the",
    "start": "260919",
    "end": "267680"
  },
  {
    "text": "reservations inside of them and there's a couple couple of things we can do we can um query the database read all the",
    "start": "267680",
    "end": "273360"
  },
  {
    "text": "reservations that already registered in that database for a particular date gives us a collection of reservations",
    "start": "273360",
    "end": "279080"
  },
  {
    "text": "back we can create a new row in the database uh you'll notice I'm using the create read update and delete",
    "start": "279080",
    "end": "284759"
  },
  {
    "text": "terminology here I'll just stick with those two methods though the reservation method or the create method returns an",
    "start": "284759",
    "end": "290240"
  },
  {
    "text": "integer that is the ID of the row that it you know that you just created in the database so this violates the command",
    "start": "290240",
    "end": "295600"
  },
  {
    "text": "query separation principle uh but it's a common thing that people do so I'm just keeping the example here",
    "start": "295600",
    "end": "301240"
  },
  {
    "text": "realistic now I want to add a third method just to make things a little bit more interesting and the third one is",
    "start": "301240",
    "end": "306880"
  },
  {
    "text": "not really doesn't really belong here but let's let's add it anyway so we want to be able to figure out whether a",
    "start": "306880",
    "end": "312199"
  },
  {
    "text": "reservation is in the future or in the past because we can't it doesn't make sense to accept a reservation for a date",
    "start": "312199",
    "end": "317919"
  },
  {
    "text": "in the past now um this really belongs this method really belongs on a different interface a different",
    "start": "317919",
    "end": "323560"
  },
  {
    "text": "abstraction um but we'll just put it on on this reservation repository for the sake of the example uh otherwise going",
    "start": "323560",
    "end": "330199"
  },
  {
    "text": "to get way too complicated okay so if we if we um",
    "start": "330199",
    "end": "335880"
  },
  {
    "text": "assume that we're going to take that you know repository and inject into some sort of class we can now try to make a",
    "start": "335880",
    "end": "342639"
  },
  {
    "start": "342000",
    "end": "713000"
  },
  {
    "text": "little bit of a business decision of whether we can accept the reservation or not so we'll have an incoming",
    "start": "342639",
    "end": "348440"
  },
  {
    "text": "reservation and we'll try to figure out whether we can accept it so it we will return a nullable int and the contract",
    "start": "348440",
    "end": "354919"
  },
  {
    "text": "here is BAS the idea is that um if we accept the reservation we will have created a new row in the database and",
    "start": "354919",
    "end": "361000"
  },
  {
    "text": "that row has an ID and that becomes the ID of the reservation and we'll just return that if for some reason we have",
    "start": "361000",
    "end": "366039"
  },
  {
    "text": "to reject the reservation will return null so the first thing we could do if we have a a if we injected this",
    "start": "366039",
    "end": "373520"
  },
  {
    "text": "repository from before into the class you know via the Constructor um",
    "start": "373520",
    "end": "379199"
  },
  {
    "text": "then we could access it and we could say um is reservation in the future that return to PO if that pool is false we'll",
    "start": "379199",
    "end": "386000"
  },
  {
    "text": "return null immediately we know that we can't accept that that was some sort of input validation error that that failed there otherwise we can move on we can",
    "start": "386000",
    "end": "392680"
  },
  {
    "text": "Creer the database we can say read reservations with the reservation date that gives us a collection of",
    "start": "392680",
    "end": "398319"
  },
  {
    "text": "reservations we'll just do a sum over the quantities that gives me an integer that is the number of reserved seeds for",
    "start": "398319",
    "end": "405160"
  },
  {
    "text": "that particular date so I'm sort of ignoring that there may be tables that are not completely filled so you can imagine this is one of those fancy",
    "start": "405160",
    "end": "410800"
  },
  {
    "text": "restaurants that just has one big table and everyone has to you know dine communally together um it's probably in",
    "start": "410800",
    "end": "416280"
  },
  {
    "text": "New York somewhere um right so um we have a number we need to",
    "start": "416280",
    "end": "423120"
  },
  {
    "text": "figure out whether we have enough remaining capacity so if we know the capacity of the restaurant that's another number we can make our business",
    "start": "423120",
    "end": "429560"
  },
  {
    "text": "decision we can say if we if we um have too little remaining capacity or if the capacity that we have is uh less than",
    "start": "429560",
    "end": "436360"
  },
  {
    "text": "the number of reserved seeds plus the requested quantity there uh we also reject the reservation and we do that by",
    "start": "436360",
    "end": "442919"
  },
  {
    "text": "returning null but otherwise we can move on we can set is accepted to True we'll call uh the create method on the repos",
    "start": "442919",
    "end": "449599"
  },
  {
    "text": "repository um that creates a row in the database it returns an ID we just return that ID C has an implicit invers",
    "start": "449599",
    "end": "457160"
  },
  {
    "text": "conversion between int and a nullable of int so this compiles this works and gets the job done there's nothing wrong with",
    "start": "457160",
    "end": "463400"
  },
  {
    "text": "with this at all so um in in um in an effort to make things more",
    "start": "463400",
    "end": "470400"
  },
  {
    "text": "complicated that they can be uh someone would then say but how do we do this with functional programming so let's",
    "start": "470400",
    "end": "476560"
  },
  {
    "text": "let's have a look at that before I launch into this whole thing I want to make a little detour because the detour",
    "start": "476560",
    "end": "483720"
  },
  {
    "text": "will hopefully be instructive so here's the reservation repository interface",
    "start": "483720",
    "end": "488919"
  },
  {
    "text": "again I reordered the methods a little bit I put reservation in the future on top because this is the order that we",
    "start": "488919",
    "end": "494360"
  },
  {
    "text": "actually end up using him so maybe this is a little bit more intuitive I hope um",
    "start": "494360",
    "end": "500199"
  },
  {
    "text": "when you're interacting with the database what you really need doing is IO so you might want to say um let's",
    "start": "500199",
    "end": "506199"
  },
  {
    "text": "make it async this is not really what I want to do for the rest of the talk but this will be you know instructive I hope",
    "start": "506199",
    "end": "512560"
  },
  {
    "text": "so we can see what happens if we make it async basically what you need to do to make it async is that you just instead of returning you know normal values you",
    "start": "512560",
    "end": "520599"
  },
  {
    "text": "just return tasks of those things so task of bull task of a reservation collection task of int so with modern C",
    "start": "520599",
    "end": "528800"
  },
  {
    "text": "you know that's not really a big change because you just take your Tri accept method from before and you just sprinkle",
    "start": "528800",
    "end": "534760"
  },
  {
    "text": "asyn and await keywords in in the right places and then it still works there's a magical you",
    "start": "534760",
    "end": "541120"
  },
  {
    "text": "know language feature there but the thing is the TPL you know the task parallel library that technology existed",
    "start": "541120",
    "end": "548240"
  },
  {
    "text": "before the async and a weade keyword um were introduced into the language so before you had async and a",
    "start": "548240",
    "end": "554800"
  },
  {
    "text": "weade you could still write this code but it wouldn't look like this it would look something like this so what you",
    "start": "554800",
    "end": "560360"
  },
  {
    "text": "would need to do is you would say well okay let's call these reservations in future with the reservation now that's going to return a task of BU so that's",
    "start": "560360",
    "end": "568240"
  },
  {
    "text": "not what what we want we want the task of Noble in so we can't really move on until that task has completed processing",
    "start": "568240",
    "end": "577160"
  },
  {
    "text": "so what you need to do is you need to call a method called continue with and you can see it happens three three times",
    "start": "577160",
    "end": "583040"
  },
  {
    "text": "here and continue with the idea here is that you now have to you know Supply a code block that you know tells you know",
    "start": "583040",
    "end": "590360"
  },
  {
    "text": "your code what happens when that task has completed so you get a task in its",
    "start": "590360",
    "end": "596720"
  },
  {
    "text": "completed State as input into the code BL that you supply so T1 T2 and T3 there",
    "start": "596720",
    "end": "602720"
  },
  {
    "text": "uh those are completed tasks so what you can do is and what I've done here is you I continue with a code Block in the form",
    "start": "602720",
    "end": "609279"
  },
  {
    "text": "of a Lambda expression um so T1 for example is the completed task that um",
    "start": "609279",
    "end": "615640"
  },
  {
    "text": "that come back comes back when is reservation in future has evaluated so um what you can do then you",
    "start": "615640",
    "end": "622000"
  },
  {
    "text": "can say t1. result that's a Boolean value and then you can do normal if things on that one and the t2. resolve",
    "start": "622000",
    "end": "629040"
  },
  {
    "text": "further on down for example uh that's a task of of reservation collection so you",
    "start": "629040",
    "end": "634760"
  },
  {
    "text": "know taking the result out of that will just give you the reservations and so forth so this idea about having a step a",
    "start": "634760",
    "end": "641839"
  },
  {
    "text": "task and then you know after the task is completed you tell the code what needs",
    "start": "641839",
    "end": "647959"
  },
  {
    "text": "to happen next and the way you do that is you supply a function or a you know a",
    "start": "647959",
    "end": "653639"
  },
  {
    "text": "piece of code that that sort of handles you know what happens next so you'll notice one thing the output of the task",
    "start": "653639",
    "end": "660639"
  },
  {
    "text": "becomes the input to the continuation so T1 for example is the completed task the",
    "start": "660639",
    "end": "666320"
  },
  {
    "text": "result of that is a Boolean value so the output of of you know figuring out what the time is or whether the reservation",
    "start": "666320",
    "end": "672920"
  },
  {
    "text": "is the future becomes the input to the continuation and that's the P same pattern that goes on you know in all",
    "start": "672920",
    "end": "678720"
  },
  {
    "text": "three cases here so the code becomes more complicated but this is basically what we need to do when we want to shift",
    "start": "678720",
    "end": "685720"
  },
  {
    "text": "into doing something in a functional style uh so we will have not task of T but you know something of T and we will",
    "start": "685720",
    "end": "692440"
  },
  {
    "text": "sort of need to do continuation U passing style in this way where we say we'll start something and then when that",
    "start": "692440",
    "end": "699120"
  },
  {
    "text": "completes we will have a continuation function that takes the result of the previous steps as input and then",
    "start": "699120",
    "end": "705000"
  },
  {
    "text": "continues with that so that's sort of the intuition so this is just what I why I wanted to show you this um before we",
    "start": "705000",
    "end": "711920"
  },
  {
    "text": "got started with the real functional stuff now how do I do dependency injection in hcll well you don't because",
    "start": "711920",
    "end": "718120"
  },
  {
    "text": "hcll is a functional language language fine it's functional how do I inject dependencies well you use a free monad",
    "start": "718120",
    "end": "724720"
  },
  {
    "text": "which allows you to build a monad from any funter did you just tell me to go  myself leave I dead",
    "start": "724720",
    "end": "732800"
  },
  {
    "text": "B so apart from being funny there's a there's quite a bit of Truth in this",
    "start": "733240",
    "end": "738959"
  },
  {
    "text": "little comic here um because first of all it's true that if you ask a certain category of functional programmers they",
    "start": "738959",
    "end": "745920"
  },
  {
    "text": "will give you that answer and they will just expect you to understand what they say they will expect you to understand what",
    "start": "745920",
    "end": "751399"
  },
  {
    "text": "is a free monad what is a fun um so on that level that answer is",
    "start": "751399",
    "end": "756920"
  },
  {
    "text": "usually not particularly useful but another thing about this is that it's actually true this is how you do",
    "start": "756920",
    "end": "763760"
  },
  {
    "text": "dependency injection in Hask what's one of them there's a couple of of different alternative options there but it's one",
    "start": "763760",
    "end": "770160"
  },
  {
    "text": "of them so you can absolutely use a free Monet in order to model you know how that works so um I'm just going to be",
    "start": "770160",
    "end": "777839"
  },
  {
    "text": "that guy and just laun into do free monets in C how about that it's not going to be fun um so I'm not expecting",
    "start": "777839",
    "end": "785240"
  },
  {
    "text": "you to know what a free Monet is I'm not expecting you to really know what a functor is although that's pretty easy",
    "start": "785240",
    "end": "790639"
  },
  {
    "text": "we'll get to that in a in a moment um what my really what my agenda here is",
    "start": "790639",
    "end": "795800"
  },
  {
    "text": "I'm I'm trying to show you know what it'll actually what will happen if you um try to go all the way to functional",
    "start": "795800",
    "end": "802880"
  },
  {
    "text": "programming in a language like C so let's see what we can do here so we",
    "start": "802880",
    "end": "808440"
  },
  {
    "text": "have this repos repository interface there and um we want to figure out how",
    "start": "808440",
    "end": "813720"
  },
  {
    "text": "to do this in the functional style so if we want to turn it into a free monad there's actually a recipe so I'm not",
    "start": "813720",
    "end": "820519"
  },
  {
    "text": "really going to try to explain to you what a free monad is um I'm just going to show you that there is a an",
    "start": "820519",
    "end": "826519"
  },
  {
    "text": "automatable process for translating a c interface like this one into a free",
    "start": "826519",
    "end": "832240"
  },
  {
    "text": "Monet and it goes in a lot of steps so if you if you really want to know all the details I have a blog post that",
    "start": "832240",
    "end": "837279"
  },
  {
    "text": "walks you through this in very elaborate details um but basically what you need to do is you have to start",
    "start": "837279",
    "end": "845240"
  },
  {
    "text": "trying to figure out how to turn and you know an interface like this into a funter so what's a funter well you",
    "start": "845240",
    "end": "850959"
  },
  {
    "text": "probably know Link in C already you have you know a a list of integers and you",
    "start": "850959",
    "end": "857279"
  },
  {
    "text": "know you can call you know select on that and then if if you say you know for each of the integers inside of that list",
    "start": "857279",
    "end": "863040"
  },
  {
    "text": "of Ines I'm just going to turn that into a string now you have a list of strings instead of a list of in so that ability",
    "start": "863040",
    "end": "868839"
  },
  {
    "text": "to take a container of something and turn it into a container of some other generic type that is basically what a",
    "start": "868839",
    "end": "874040"
  },
  {
    "text": "fun means it doesn't have to be much more complicated than that and gar already have the Lang has the language",
    "start": "874040",
    "end": "879639"
  },
  {
    "text": "feature to do that because link was built around this idea about you know funus and monad um so um so the select method is",
    "start": "879639",
    "end": "887600"
  },
  {
    "text": "the what we call the structure preserving translation of the stuff inside of the container so um so we need to figure out",
    "start": "887600",
    "end": "894720"
  },
  {
    "text": "how to do that this is not a fun at the moment so the trick is to say",
    "start": "894720",
    "end": "900079"
  },
  {
    "text": "the three methods defined by this interface we're going to turn those into a little domain specific language and",
    "start": "900079",
    "end": "906959"
  },
  {
    "text": "the the vocabulary of that language will be those three methods so it's not going to be a tour incomplete language it's",
    "start": "906959",
    "end": "912360"
  },
  {
    "text": "going to be a very little limited small domain specific language that just consists of three",
    "start": "912360",
    "end": "918720"
  },
  {
    "text": "instructions so the first thing we do what I'm going to do now is I'm going to translate I'm going to follow my recipe",
    "start": "918720",
    "end": "924560"
  },
  {
    "text": "for translating this into F and again I'm not assuming that you can necessarily read the sh f um but the",
    "start": "924560",
    "end": "930639"
  },
  {
    "text": "syntax here I'm just going to use some type declaration syntax I'm actually not going to write you know functions so",
    "start": "930639",
    "end": "935880"
  },
  {
    "text": "that's that's going to be okay I hope I'll I'll talk you through it now following the recipe this is almost like",
    "start": "935880",
    "end": "941920"
  },
  {
    "text": "an automatable recipe what we do is we say we'll need to create a new type this new type should be generic um we'll not",
    "start": "941920",
    "end": "949000"
  },
  {
    "text": "we'll call it something a little bit different because we'll typically call it something instruction in this case I decided to call it reservations",
    "start": "949000",
    "end": "954639"
  },
  {
    "text": "instructions and this prime a this is just the F sh Syntax for writing a generic type argument so in gsh this",
    "start": "954639",
    "end": "961519"
  },
  {
    "text": "would have been capital letter T but here's here is a now the next step in in this recipe",
    "start": "961519",
    "end": "968279"
  },
  {
    "text": "that you can follow and you can probably write a program that did this for you if you wanted to is to say well for each of",
    "start": "968279",
    "end": "973319"
  },
  {
    "text": "the methods in the interface you create a case so what you're starting to do here is what we",
    "start": "973319",
    "end": "980120"
  },
  {
    "text": "call a discriminated Union something that can be one of multiple mutually exclusive cases so the first case we",
    "start": "980120",
    "end": "986959"
  },
  {
    "text": "just take the first method and turn that into a case and the name of the case is just the name of the method so we just",
    "start": "986959",
    "end": "993000"
  },
  {
    "text": "call that case is Preservation in the future and when you creating when you're trying to turn an interface like this",
    "start": "993000",
    "end": "999800"
  },
  {
    "text": "into a little DSL which has to be a funter um the contents of the each case",
    "start": "999800",
    "end": "1006519"
  },
  {
    "text": "will always have to be a tubble so this is how you create tubles I left some space there so that we can you know have",
    "start": "1006519",
    "end": "1012600"
  },
  {
    "text": "some some type annotations there but it's just the brackets just say here comes a tubal and the star in the middle",
    "start": "1012600",
    "end": "1018600"
  },
  {
    "text": "just means that that's the delimiter between the types in the tle and the recipe then says that the input value or",
    "start": "1018600",
    "end": "1025280"
  },
  {
    "text": "the input type of the method that we are mapping at the moment should be the first Tuple so we'll just say the it's",
    "start": "1025280",
    "end": "1030798"
  },
  {
    "text": "going to be Tuple where the first element is a reservation and then the um second element in the Tuple should be a",
    "start": "1030799",
    "end": "1037520"
  },
  {
    "text": "continuation function so remember I I showed you this TPL example with",
    "start": "1037520",
    "end": "1042678"
  },
  {
    "text": "continue with before where you know after you've completed One Step you continue with something else so the idea",
    "start": "1042679",
    "end": "1048640"
  },
  {
    "text": "here is that we have sort of abstracted away the idea of of figuring out whether a reservation is in the future and we",
    "start": "1048640",
    "end": "1054280"
  },
  {
    "text": "can delegate that to some sort of interpreter of our little domain specific language later on and then when The Interpreter you know is done",
    "start": "1054280",
    "end": "1060760"
  },
  {
    "text": "interpreting it'll call our continuation function with the result of what it figured out so that means that just like",
    "start": "1060760",
    "end": "1068080"
  },
  {
    "text": "in the TPL example the output of our our little operation there is reservation in the future becomes the input to the",
    "start": "1068080",
    "end": "1074919"
  },
  {
    "text": "continuation function and then the continuation function should take that as input and return a value of the",
    "start": "1074919",
    "end": "1080039"
  },
  {
    "text": "generic type A now if you didn't get all of this this is perfectly okay I'm just trying to demonstrate to you that I'm",
    "start": "1080039",
    "end": "1086200"
  },
  {
    "text": "following a recipe here there's you don't have to think in order to do this you can basically just write a program that did that if you wanted to so we'll",
    "start": "1086200",
    "end": "1093159"
  },
  {
    "text": "just continue on with the next one I'll I'll move a little faster now so we know that read reservations also has to be a",
    "start": "1093159",
    "end": "1098559"
  },
  {
    "text": "tle and the second element has to be a function that takes that Returns the generic type A so we'll take the um",
    "start": "1098559",
    "end": "1105080"
  },
  {
    "text": "datetime offset which is the input to the method and we'll make that the first element of the tle and then we'll say",
    "start": "1105080",
    "end": "1111000"
  },
  {
    "text": "the output um the read only collection of reservation there we'll just turn that into reservation list and that will",
    "start": "1111000",
    "end": "1117159"
  },
  {
    "text": "be the input to the continuation function and we'll map the create um",
    "start": "1117159",
    "end": "1122200"
  },
  {
    "text": "method in the same way there's a case called the create it takes a tuple or the content inside of that is a tuple of",
    "start": "1122200",
    "end": "1128840"
  },
  {
    "text": "create of reservation and a continuation function that goes from int to a so again you know if you don't if you're",
    "start": "1128840",
    "end": "1134039"
  },
  {
    "text": "not entirely following this it's okay the the real point is to show you that",
    "start": "1134039",
    "end": "1139159"
  },
  {
    "text": "this is actually translatable back into G and I'll show you how to do this in a moment um but you're not going to like",
    "start": "1139159",
    "end": "1144799"
  },
  {
    "text": "the result so um let's remove the interface",
    "start": "1144799",
    "end": "1150640"
  },
  {
    "start": "1149000",
    "end": "1303000"
  },
  {
    "text": "there and see what we have so far now in if SHP this is called a discriminated",
    "start": "1150640",
    "end": "1155960"
  },
  {
    "text": "Union so the idea of a discriminated Union is it's a type that statically is",
    "start": "1155960",
    "end": "1162159"
  },
  {
    "text": "known to have in this case three um mutually exclusive subcases or subtypes",
    "start": "1162159",
    "end": "1168919"
  },
  {
    "text": "if you will so you can think of it a little bit like an object hierarchy but the difference is that it's not extensible it is very deliberately not",
    "start": "1168919",
    "end": "1176120"
  },
  {
    "text": "extensible so we know that there's only going to be those three cases and not only do we know that the compiler knows",
    "start": "1176120",
    "end": "1182480"
  },
  {
    "text": "that as well so whenever we whenever we have a value of that type you know if we",
    "start": "1182480",
    "end": "1187880"
  },
  {
    "text": "call a function and we get that as a return value in order to do anything with with a type of that nature uh we",
    "start": "1187880",
    "end": "1195039"
  },
  {
    "text": "have to deal with all of the three cases we sort of have to handle all three cases uh and if we don't do that the compiler",
    "start": "1195039",
    "end": "1201240"
  },
  {
    "text": "will tell us and you can actually make the compiler you know not you know refuse to compile if you haven't handled",
    "start": "1201240",
    "end": "1206720"
  },
  {
    "text": "all three things so it enables us to be really we can write some really robust code uh because we can have compile time",
    "start": "1206720",
    "end": "1213919"
  },
  {
    "text": "checking of whether we've dealt with all all the edge cases as well so in general this is known as a sum type um and",
    "start": "1213919",
    "end": "1220760"
  },
  {
    "text": "functional programmers really love this because it enables them to make States on legal states unrepresentable this is",
    "start": "1220760",
    "end": "1226960"
  },
  {
    "text": "a catchphrase that you will hear function of program I say talk about over and over it was coined by yarin",
    "start": "1226960",
    "end": "1232200"
  },
  {
    "text": "Minsky who writes in O camel in other you know statically Ty functional programming language but we do it in if",
    "start": "1232200",
    "end": "1237840"
  },
  {
    "text": "Shar all the time um in the next time slot I believe Scott blashin will be talking about something maybe you'll",
    "start": "1237840",
    "end": "1243440"
  },
  {
    "text": "hear him say it he often says that um with good reason hll will do the same thing as well so",
    "start": "1243440",
    "end": "1250520"
  },
  {
    "text": "um you may also you know Scott blash in in the next talk will never be smug but",
    "start": "1250520",
    "end": "1256480"
  },
  {
    "text": "you may you know sometimes you know encoun those functional programmers that can be a little overbearing and say well",
    "start": "1256480",
    "end": "1261960"
  },
  {
    "text": "we can make a legal state of representable what about you object-oriented programmers can you do that um and and then you say because",
    "start": "1261960",
    "end": "1270400"
  },
  {
    "text": "you've been to this talk you say well yes we can because we can just use Church encoding all right okay um so",
    "start": "1270400",
    "end": "1277840"
  },
  {
    "text": "this is alono church he's the inventor of the Lambda calculus and he didn't come up with this idea of church",
    "start": "1277840",
    "end": "1283400"
  },
  {
    "text": "encoding himself but he came up with a way to encode or describe mutually exclusive things as functions and then",
    "start": "1283400",
    "end": "1290440"
  },
  {
    "text": "later on programmer sort of figured out that the way they could do that in Lambda calculus actually translates pretty well into code and therefore we",
    "start": "1290440",
    "end": "1296840"
  },
  {
    "text": "call it Church en coding after him but he was a mathematician he was not a programmer um so let's see how that",
    "start": "1296840",
    "end": "1303159"
  },
  {
    "text": "works so we have this thing we we sort of started on the work of doing a fre",
    "start": "1303159",
    "end": "1308880"
  },
  {
    "text": "Monet now I'm going to pause that recipe I'm going to put it aside a little while I'm going to pick up another recipe and",
    "start": "1308880",
    "end": "1314360"
  },
  {
    "text": "this is the recipe for turning discriminated unions into church in Co g",
    "start": "1314360",
    "end": "1319559"
  },
  {
    "text": "code so there's a recipe for that as well and you can basically just you know think of it as a paper and you just",
    "start": "1319559",
    "end": "1325039"
  },
  {
    "text": "follow the recipe so how do we do that well we'll take the name of the type and we'll turn it into an interface and here",
    "start": "1325039",
    "end": "1331039"
  },
  {
    "text": "you can see that it's an IR reservation instruction of T so that you know prime a up there just becomes capital letter T",
    "start": "1331039",
    "end": "1338000"
  },
  {
    "text": "so that's the generic type argument and then you take each of the cases oh I need to do something first the next",
    "start": "1338000",
    "end": "1343919"
  },
  {
    "text": "thing you do is you all that interface always has one method and it's you could call it match it doesn't really matter",
    "start": "1343919",
    "end": "1349720"
  },
  {
    "text": "you know exactly what it's called but there are reasons why it might be a good idea to call it match and you'll notice that this this is generic as well but",
    "start": "1349720",
    "end": "1356240"
  },
  {
    "text": "it's generic on the on the method level not on the type level so there's already two different generic types involved",
    "start": "1356240",
    "end": "1361799"
  },
  {
    "text": "here t on the type and T result on the method itself so match must return a t",
    "start": "1361799",
    "end": "1368320"
  },
  {
    "text": "result value so what you do now is you for each of the cases in your",
    "start": "1368320",
    "end": "1374159"
  },
  {
    "text": "discriminated Union you add an argument to this method so so what we do first is",
    "start": "1374159",
    "end": "1379960"
  },
  {
    "text": "that we take is preservations in future and we add that as an argument and the recipe says that the argument should be",
    "start": "1379960",
    "end": "1385360"
  },
  {
    "text": "a function that takes something and returns a t result value so we do that",
    "start": "1385360",
    "end": "1390640"
  },
  {
    "text": "for is reservation in future you'll notice that I've lowercase the the ey there so that looks like an argument and",
    "start": "1390640",
    "end": "1396320"
  },
  {
    "text": "not and not a a case anymore um so we do that for the other two things read",
    "start": "1396320",
    "end": "1401840"
  },
  {
    "text": "reservation should be a function from something to T result and crate should be a function from something to T result",
    "start": "1401840",
    "end": "1408000"
  },
  {
    "text": "so the idea here is that when you have um an object of that interface you don't",
    "start": "1408000",
    "end": "1414640"
  },
  {
    "text": "know which of the three cases it actually is and in order to do anything",
    "start": "1414640",
    "end": "1419760"
  },
  {
    "text": "with it you have to supply three functions that will handle each of the three cases now only one of those three",
    "start": "1419760",
    "end": "1425400"
  },
  {
    "text": "functions are ever going to be executed but you don't know which one it is so you have to supply all three so that you",
    "start": "1425400",
    "end": "1430520"
  },
  {
    "text": "cover all all the cases so all of those functions you will notice returns T results so this is how you can sort of",
    "start": "1430520",
    "end": "1436360"
  },
  {
    "text": "pull you know data out of um of a discriminated Union in C and still have",
    "start": "1436360",
    "end": "1441799"
  },
  {
    "text": "compiled time support so what what should go into those you can see that sort of left a",
    "start": "1441799",
    "end": "1447640"
  },
  {
    "text": "placeholder there for you know the input into those functions so what what needs to go there well what needs to go there",
    "start": "1447640",
    "end": "1454720"
  },
  {
    "text": "is the data that is contained inside of each of those cases um so we actually",
    "start": "1454720",
    "end": "1461360"
  },
  {
    "text": "need more it turns out we need more room so I'm just ordering things around a little bit and you'll notice that the is",
    "start": "1461360",
    "end": "1467480"
  },
  {
    "text": "read reservations actually overflows to the right so you can't even see all of it it's okay it's going to be horrible",
    "start": "1467480",
    "end": "1473200"
  },
  {
    "text": "and you you know this you don't need to see all of it to see just horrible it's going to be um so what's going to be the",
    "start": "1473200",
    "end": "1480320"
  },
  {
    "text": "input things well in all three cases up there we have tubs so we can say all of",
    "start": "1480320",
    "end": "1485520"
  },
  {
    "text": "all of them are going to be tbal and the first element of the first tupal is a reservation value so we can",
    "start": "1485520",
    "end": "1491600"
  },
  {
    "text": "just you know map that over the second one is a daytime offset value and the third one is a reservation value so",
    "start": "1491600",
    "end": "1497840"
  },
  {
    "text": "again you can see I'm following a mechanical process I'm not really I don't really have to think and I was really happy when I did this because I",
    "start": "1497840",
    "end": "1504240"
  },
  {
    "text": "actually couldn't understand what was going on so I just said I'll just take this one and put it there and okay that compiles okay fine um so um so that's",
    "start": "1504240",
    "end": "1513200"
  },
  {
    "text": "that's there um but then the second element of the tual we need to figure out how what to do about that as well so you notice that they're all functions so",
    "start": "1513200",
    "end": "1519760"
  },
  {
    "text": "we'll say this needs to be a funk and then all three of them are functions that return the generic type A it's you",
    "start": "1519760",
    "end": "1527440"
  },
  {
    "text": "know down in our sharp code we call that t so we'll just set say that's going to be the return type and again you can't",
    "start": "1527440",
    "end": "1533440"
  },
  {
    "text": "see the middle T because it's sitting out here towards the right um but it doesn't really it's not really that",
    "start": "1533440",
    "end": "1538960"
  },
  {
    "text": "important so now we not just need to figure out what's got to be the input to those continuation functions well in the",
    "start": "1538960",
    "end": "1544640"
  },
  {
    "text": "first case it's a bull in the second it's an I read only collection of reservation and then in the third case",
    "start": "1544640",
    "end": "1550159"
  },
  {
    "text": "it's an in so that's the first step of doing",
    "start": "1550159",
    "end": "1555760"
  },
  {
    "text": "Church encoding and if you think already that this looks horrible I agree I mean this",
    "start": "1555760",
    "end": "1563559"
  },
  {
    "text": "is not something when you know if you just show people to this to if you just",
    "start": "1563559",
    "end": "1568600"
  },
  {
    "text": "show this to someone and says well you a sharp developer can you tell me what's going on here what no I that makes no",
    "start": "1568600",
    "end": "1575640"
  },
  {
    "text": "sense it's a funk of a Tule of something and then inside of that F Funk there's another thing or what um so we maybe we",
    "start": "1575640",
    "end": "1583720"
  },
  {
    "text": "should you know Shield ourselves a little bit and just sort of block them out and sort of just think about them as",
    "start": "1583720",
    "end": "1588960"
  },
  {
    "text": "you know Blobs of data um so I'll just block them out with three colors and don't put any don't try to interpret",
    "start": "1588960",
    "end": "1596000"
  },
  {
    "text": "anything from those colors you know it doesn't mean that red one is bad and the green one is good it's just so that we can distinguish them from from each",
    "start": "1596000",
    "end": "1602279"
  },
  {
    "text": "other um so we sort of hiding the details there and just sort of try to figure out what we can do so we have",
    "start": "1602279",
    "end": "1609440"
  },
  {
    "text": "three functions that go from either the red Red Data blob or the yellow data",
    "start": "1609440",
    "end": "1615240"
  },
  {
    "text": "type or the green data type to T result so so the next thing we do we need to do when we want to do Church en coding is",
    "start": "1615240",
    "end": "1621600"
  },
  {
    "text": "that we have to create an implementation of this interface for each of the three cases so we'll just start with the first",
    "start": "1621600",
    "end": "1628720"
  },
  {
    "text": "one and say let's create a class called is reservation in future it has to implement the interface now what it'll do is it'll",
    "start": "1628720",
    "end": "1636559"
  },
  {
    "text": "take a Tule of reservation and fun and blah blah okay that's the red one there this is basically an adapter over the",
    "start": "1636559",
    "end": "1643000"
  },
  {
    "text": "red data type you know an adapter that you know design pattern from the gang of four book it says well if you have an",
    "start": "1643000",
    "end": "1649240"
  },
  {
    "text": "object of one type and you want to make it look like an object of a different type you can create a little rer class",
    "start": "1649240",
    "end": "1654960"
  },
  {
    "text": "that you know makes makes it look like it's the other thing this is basically what we're doing here we have this",
    "start": "1654960",
    "end": "1660159"
  },
  {
    "text": "whatever that red blob is and we just make it look like it's an ey reservation instruction of T so in order to",
    "start": "1660159",
    "end": "1666200"
  },
  {
    "text": "implement the interface we have to implement this horrible looking match method there and again we'll block the",
    "start": "1666200",
    "end": "1671399"
  },
  {
    "text": "things out so that we don't have to think about exactly what's going on and um then we'll have to figure out okay so",
    "start": "1671399",
    "end": "1676440"
  },
  {
    "text": "how do we implement this now we have to return a value of T result and we have",
    "start": "1676440",
    "end": "1682399"
  },
  {
    "text": "three functions um to choose from and and a red and a value of the red data",
    "start": "1682399",
    "end": "1687760"
  },
  {
    "text": "type so we have a function that goes from the red data type to T result we have another function that goes from the",
    "start": "1687760",
    "end": "1693440"
  },
  {
    "text": "yellow data type to T result and one that goes from the green data type to T result now the only thing we can really",
    "start": "1693440",
    "end": "1699279"
  },
  {
    "text": "do here is just to say well the function that goes from the reow the red data",
    "start": "1699279",
    "end": "1704480"
  },
  {
    "text": "type inty resolved is reservation in future that will work work you know if we call that if we dispatch you",
    "start": "1704480",
    "end": "1711919"
  },
  {
    "text": "know execution back to that one by just passing in the twool um then it's going",
    "start": "1711919",
    "end": "1717679"
  },
  {
    "text": "to return a t result and this is going to type check uh so that's probably okay when you do generic programming like",
    "start": "1717679",
    "end": "1723200"
  },
  {
    "text": "this it's basically you know when it type checks uh it's usually also correct",
    "start": "1723200",
    "end": "1728240"
  },
  {
    "text": "so we do that with this with the same uh we do the same thing with the other two in this case I'm just always dispatching",
    "start": "1728240",
    "end": "1734279"
  },
  {
    "text": "back into is reservation in future this is the function that the call provides",
    "start": "1734279",
    "end": "1739440"
  },
  {
    "text": "that will handle that particular case of those three cases and we do the same thing with the other two here's an",
    "start": "1739440",
    "end": "1745159"
  },
  {
    "text": "adapter over the yellow data you'll notice that it always you know calls or always dispatches back to read",
    "start": "1745159",
    "end": "1750919"
  },
  {
    "text": "reservations and um the third class uh is an adapter over the green data and it",
    "start": "1750919",
    "end": "1756159"
  },
  {
    "text": "always dispatches back into the create function that handle there so we can",
    "start": "1756159",
    "end": "1761600"
  },
  {
    "text": "unmask this again if you think that's helpful I don't think it's helpful um but it compiles and um it it gets us to",
    "start": "1761600",
    "end": "1768080"
  },
  {
    "text": "towards where we want to go but pretty it isn't now what we have",
    "start": "1768080",
    "end": "1773960"
  },
  {
    "text": "at so far here is we have a generic type now what the um overbearing um",
    "start": "1773960",
    "end": "1782000"
  },
  {
    "text": "character there said is that we needed to create a free monad from a funter so um is this a funter well a funter this",
    "start": "1782000",
    "end": "1789840"
  },
  {
    "text": "the idea of a fun is just like a numerable that you can sort of map over it so basically the idea is that if you",
    "start": "1789840",
    "end": "1795360"
  },
  {
    "text": "have an i IR reservation instruction of T can we turn it into an i reservation instruction of T result well if we have",
    "start": "1795360",
    "end": "1803200"
  },
  {
    "text": "a function that takes that turns T values into T result values that is now if we can do that that's then it's",
    "start": "1803200",
    "end": "1809000"
  },
  {
    "text": "probably a funter turns out that we can um so the way that we need to do that is we have to create a select method this",
    "start": "1809000",
    "end": "1815039"
  },
  {
    "text": "is just like the select methods that are defined by for I mobile of T um and we",
    "start": "1815039",
    "end": "1821760"
  },
  {
    "text": "make it a um an extension method on I reservation instruction of of T and then",
    "start": "1821760",
    "end": "1827399"
  },
  {
    "text": "we just by convention we call that function the third AR the second argument there we just call that the",
    "start": "1827399",
    "end": "1832880"
  },
  {
    "text": "selector all right so how do we Implement something like this so again you know functional programmers will",
    "start": "1832880",
    "end": "1838960"
  },
  {
    "text": "basically tell you that um when you when you're working with statically type functional programming like this you",
    "start": "1838960",
    "end": "1844320"
  },
  {
    "text": "just what they say follow the types you sort of just look at the generic types and have if you can figure out how to",
    "start": "1844320",
    "end": "1851640"
  },
  {
    "text": "connect things so that the compiler that all everything type checks you've probably done it right so let's see what",
    "start": "1851640",
    "end": "1858240"
  },
  {
    "text": "we can do first of all we have Source the only thing we can do with source is we can call match because that interface",
    "start": "1858240",
    "end": "1864080"
  },
  {
    "text": "only defines that single method so we don't really have any choice that's what we need to do and um because this is",
    "start": "1864080",
    "end": "1870399"
  },
  {
    "text": "sharp compiler can't really figure out what it is that we're trying to do we have to you know put this type annotation on and say we we want to",
    "start": "1870399",
    "end": "1877080"
  },
  {
    "text": "return an i reservation instruction of cheap result all right so when you're calling the match method there you have",
    "start": "1877080",
    "end": "1884000"
  },
  {
    "text": "to supply a function that would handle each of the three cases um so we can do",
    "start": "1884000",
    "end": "1889039"
  },
  {
    "text": "that as a Lambda expression so that's what I'm going to do so the first one handles the is reservation in future",
    "start": "1889039",
    "end": "1894840"
  },
  {
    "text": "case and I'm just starting the Lambda expression here so again the t is um is",
    "start": "1894840",
    "end": "1901000"
  },
  {
    "text": "what's inside that case this is a that tubal that red tubal that we looked at",
    "start": "1901000",
    "end": "1906159"
  },
  {
    "text": "before um that isn't particularly easy to think about but but that's what it is",
    "start": "1906159",
    "end": "1911720"
  },
  {
    "text": "so you get a toess input and what you have to do is you have to produce an i reservation instruction of T result",
    "start": "1911720",
    "end": "1919559"
  },
  {
    "text": "so um so how do we do that well you have three classes that implements that interface and when we're talking about",
    "start": "1919559",
    "end": "1926360"
  },
  {
    "text": "functors we have to do what we call a structure preserving translation and that means that you you know you can't",
    "start": "1926360",
    "end": "1932399"
  },
  {
    "text": "jump between the cases if you're already in this case that's called is reservation in the future you have to",
    "start": "1932399",
    "end": "1937480"
  },
  {
    "text": "stay in that case so that's that basically limits our options quite a bit",
    "start": "1937480",
    "end": "1942679"
  },
  {
    "text": "so we'll just create a new is reservation in the future of T result and then you know if you just try to",
    "start": "1942679",
    "end": "1947960"
  },
  {
    "text": "type this out in in Visual Studio it that Constructor will say but if you want to have one of those you know you",
    "start": "1947960",
    "end": "1953840"
  },
  {
    "text": "have you must Supply a tuple where the first one is a reservation and the second one is a function that you can't",
    "start": "1953840",
    "end": "1959720"
  },
  {
    "text": "see because it's overflowing we'll get back to that in a moment now the tuble again requires you to fill some data",
    "start": "1959720",
    "end": "1966519"
  },
  {
    "text": "into the Tuple and the First Data you have to put uh in is a reservation value and we can do that by just call saying",
    "start": "1966519",
    "end": "1973360"
  },
  {
    "text": "t. item one because T is a tubble the first item in the tubble is a reservation value so you just copy that",
    "start": "1973360",
    "end": "1980320"
  },
  {
    "text": "over um that was easy now the second one is a little bit harder what needs to go",
    "start": "1980320",
    "end": "1985399"
  },
  {
    "text": "here is a funk from po to T result so how how can we produce one of those well",
    "start": "1985399",
    "end": "1992480"
  },
  {
    "text": "we could write a Lambda expression so I know that we're writing a Lambda expression inside of a Lambda expression yeah that's what you sort of end up",
    "start": "1992480",
    "end": "1998840"
  },
  {
    "text": "doing um so we could write a Lambda expression that starts with a Boolean value so B here would be a Boolean value",
    "start": "1998840",
    "end": "2005440"
  },
  {
    "text": "so at least this is a fun from Bo so now we're not just need to figure out how we produce a t result from bu so what can",
    "start": "2005440",
    "end": "2011760"
  },
  {
    "text": "we do with Boolean values here well we have a funk from Bo to T that's called T",
    "start": "2011760",
    "end": "2016799"
  },
  {
    "text": "item 2 this is a function so if we call that function with the B the Boolean",
    "start": "2016799",
    "end": "2022320"
  },
  {
    "text": "value we get a value of the type T so that's not quite what we need we need a value of type T result can we somehow",
    "start": "2022320",
    "end": "2029480"
  },
  {
    "text": "translate a t to a t result oh it's up there in the selector so we can just call the selector and now we get a t",
    "start": "2029480",
    "end": "2035480"
  },
  {
    "text": "result from the T so that entire Lambda expression there is a fun from bu to T",
    "start": "2035480",
    "end": "2041000"
  },
  {
    "text": "from bu to T result and um it it looks absolutely",
    "start": "2041000",
    "end": "2046440"
  },
  {
    "text": "horrible but it gets the job done this is actually also how you do it in a Shaban and haskal um and basically you",
    "start": "2046440",
    "end": "2054118"
  },
  {
    "text": "know there you don't have to think this is just this is how it's always done there's a recipe for that you just follow the recipe and you do that for",
    "start": "2054119",
    "end": "2060839"
  },
  {
    "text": "the two other cases and it just looks like this so that that went that made",
    "start": "2060839",
    "end": "2066040"
  },
  {
    "text": "everything look even worse um but again you know if you don't if you're not understanding all of this the",
    "start": "2066040",
    "end": "2073000"
  },
  {
    "text": "point I'm trying to make is just that this is what your codes going to look like if you want to do functional programming in in C that is all right so",
    "start": "2073000",
    "end": "2081720"
  },
  {
    "start": "2080000",
    "end": "2320000"
  },
  {
    "text": "um let's see how much time do we have okay um so what we've done now we've",
    "start": "2081720",
    "end": "2087440"
  },
  {
    "text": "actually created a funter so we know that if we have a funter we can use a free Monet to turn any fun into a free",
    "start": "2087440",
    "end": "2093520"
  },
  {
    "text": "Monet uh so how does that work so now I'm putting away the church coding recipe and I'm picking up my um you know",
    "start": "2093520",
    "end": "2100480"
  },
  {
    "text": "free monad recipe again and we'll try to to look at you know how does that work so um um in",
    "start": "2100480",
    "end": "2108599"
  },
  {
    "text": "FSH you have to then begin to type to to define a type called the reservations program so what we've defined so far is",
    "start": "2108599",
    "end": "2115320"
  },
  {
    "text": "an instruction set so we said there you know our DSL has three small verbs or",
    "start": "2115320",
    "end": "2121000"
  },
  {
    "text": "three small instructions um but now we would like to create small programs using that that DSL so we'll Define a",
    "start": "2121000",
    "end": "2129280"
  },
  {
    "text": "type called reservations program of a and it always follows the same structure",
    "start": "2129280",
    "end": "2134599"
  },
  {
    "text": "it's it has two cases so it's a discriminative union and the first one is called free and in this case the type",
    "start": "2134599",
    "end": "2141520"
  },
  {
    "text": "is of reservation instruction that's the one you just seen the function that we just created of a reservation program of",
    "start": "2141520",
    "end": "2148920"
  },
  {
    "text": "a but and then you say but but wait a minute reservation program of a that's what you're defining right now yeah this",
    "start": "2148920",
    "end": "2155040"
  },
  {
    "text": "is a recursive data definition um so get used to working with recursion if you want to do functional",
    "start": "2155040",
    "end": "2161680"
  },
  {
    "text": "programming um all right so how would you ever create a value like this you say well you use the free data",
    "start": "2161680",
    "end": "2168040"
  },
  {
    "text": "Constructor and then you say well I need to create one of those instructions um in order to do that I'll need to create a program in order to create a program",
    "start": "2168040",
    "end": "2174520"
  },
  {
    "text": "I'll need to use the free free data Constructor and then you'll just you know keep on forever so you need a you",
    "start": "2174520",
    "end": "2180240"
  },
  {
    "text": "know a way out so there's another case here called Pure and that means if you want to create a program you can also",
    "start": "2180240",
    "end": "2185520"
  },
  {
    "text": "just say pure of int for example you know cure of 42 and that would give you a program of of end um so you can mix",
    "start": "2185520",
    "end": "2191720"
  },
  {
    "text": "those so you can say Well they're free and then you can create an instruction that inside of that has a pure so you",
    "start": "2191720",
    "end": "2196880"
  },
  {
    "text": "need you need those Leaf nodes uh in in sort of that recursive Dart structure in order to you know make it stop at some",
    "start": "2196880",
    "end": "2203480"
  },
  {
    "text": "point um but this data type we can turn into a mo into a monad in a moment but",
    "start": "2203480",
    "end": "2209319"
  },
  {
    "text": "first of all we need to figure out okay so how do we encode that in sh so again I'm going to put away my free Monet",
    "start": "2209319",
    "end": "2215160"
  },
  {
    "text": "recipe I'm going to go back and pick up my church en coding recipe and say oh we know how to church encode this because",
    "start": "2215160",
    "end": "2220800"
  },
  {
    "text": "we've already seen how to do that so we create an IR reservations program of T we add a single match method and now I",
    "start": "2220800",
    "end": "2227800"
  },
  {
    "text": "need to add two arguments one for each case and the first one should be a funk from IR reservation instruction from IR",
    "start": "2227800",
    "end": "2233599"
  },
  {
    "text": "reservation program to T into T result and we call that free and the other one should be a fun from T to T result and",
    "start": "2233599",
    "end": "2239640"
  },
  {
    "text": "we call that pure okay first sa Church in encoding",
    "start": "2239640",
    "end": "2245079"
  },
  {
    "text": "the second one is create the classes that implement the interface in this case we just need two I'll start with",
    "start": "2245079",
    "end": "2250440"
  },
  {
    "text": "the simple simplest one the pure one so pure implements the interface it's just an adapter over the",
    "start": "2250440",
    "end": "2257359"
  },
  {
    "text": "generic type T so we just have any value of the generic type T and we make it look like",
    "start": "2257359",
    "end": "2263720"
  },
  {
    "text": "an is reservation program of T how do we do that well we implement the interface there's this match method and we always",
    "start": "2263720",
    "end": "2269760"
  },
  {
    "text": "just call Pure because pure is a function that goes from T to T result we already have a t that's X so if we call",
    "start": "2269760",
    "end": "2276240"
  },
  {
    "text": "that with X we get a t result back so that that type checks so that's that's what we what we need and you notice we",
    "start": "2276240",
    "end": "2281640"
  },
  {
    "text": "completely ignore the other argument there so we just dispatch to that Handler now in the other case it's",
    "start": "2281640",
    "end": "2287920"
  },
  {
    "text": "basically the same thing we call it free of T the um data inside of it is much",
    "start": "2287920",
    "end": "2293400"
  },
  {
    "text": "more complicated but again you can sort of just imagine that it's you don't really have to understand what it is we're just having adapter over that",
    "start": "2293400",
    "end": "2299920"
  },
  {
    "text": "horrible looking thing there and um then we implement the match method again and we do that by always calling free",
    "start": "2299920",
    "end": "2305520"
  },
  {
    "text": "because that's the only thing that will take that type of data and return a t resoles so we just dispatch to the free",
    "start": "2305520",
    "end": "2311160"
  },
  {
    "text": "function and always ignore the pure function right so that's how we do the",
    "start": "2311160",
    "end": "2316280"
  },
  {
    "text": "church encoding of of the um of the program um type so now we have a reservation program of T now we're",
    "start": "2316280",
    "end": "2323720"
  },
  {
    "start": "2320000",
    "end": "2582000"
  },
  {
    "text": "trying to figure out whether we can turn that into a free Monet so how can we turn this into a Monet what does that mean well basically it means if we have",
    "start": "2323720",
    "end": "2330839"
  },
  {
    "text": "a reservations program of T we want to be able to turn it into an ey reservation program of T result you sort",
    "start": "2330839",
    "end": "2337160"
  },
  {
    "text": "of heard that this before saying well isn't that just a functor yeah but the translation function is going to be a little bit different if you have a fun",
    "start": "2337160",
    "end": "2344200"
  },
  {
    "text": "from T to I reservations program of T Sal if you can make that work then you have yourself a",
    "start": "2344200",
    "end": "2350280"
  },
  {
    "text": "monad so um in order to implement that we'll create a method called select many so you'll notice that you know the the",
    "start": "2350280",
    "end": "2357400"
  },
  {
    "text": "type of this thing and the name of of it is actually given by the sh compiler already C knows about these things uh if",
    "start": "2357400",
    "end": "2365240"
  },
  {
    "text": "you if you do it right you actually get query tax support for your note type here um so select many is the name we",
    "start": "2365240",
    "end": "2373119"
  },
  {
    "text": "make it an extension method on reservation program of T and we call the function there selector just like before",
    "start": "2373119",
    "end": "2380119"
  },
  {
    "text": "and basically what we need to do is follow the types the first thing the only thing we can do with the source is just called",
    "start": "2380119",
    "end": "2386280"
  },
  {
    "text": "match so you see sort of we just go this is very mechanical we just go through the same things over and over again now",
    "start": "2386280",
    "end": "2392480"
  },
  {
    "text": "the match method takes two arguments and a function that will handle each of the cases so we'll start by writing a Lambda",
    "start": "2392480",
    "end": "2399680"
  },
  {
    "text": "expression that handles the free case um and the free case the Lambda expression",
    "start": "2399680",
    "end": "2404839"
  },
  {
    "text": "takes us input an i reservation instruction of an ey reservation program of T now it begins it gets a little bit",
    "start": "2404839",
    "end": "2411040"
  },
  {
    "text": "hairy now um what we need to do is we need to return an ey reservations program of T results and we need to make",
    "start": "2411040",
    "end": "2417720"
  },
  {
    "text": "it structure preserving so we need to translate the free case into another free case so we say new free of T",
    "start": "2417720",
    "end": "2423280"
  },
  {
    "text": "results so if you do that the um the the um Visual Studio or you know your ID",
    "start": "2423280",
    "end": "2430440"
  },
  {
    "text": "will tell you that what you need to put into that free of T result is an IR reservation instruction of an i",
    "start": "2430440",
    "end": "2436359"
  },
  {
    "text": "reservation program of T result so you somehow need to you know translate one into the other the of t to the of T",
    "start": "2436359",
    "end": "2444240"
  },
  {
    "text": "result um now you have this I reservation instruction already and it's a functor so we know if that the select",
    "start": "2444240",
    "end": "2452280"
  },
  {
    "text": "method can actually be used to translate the thing inside to another thing so we call select on that that's the extension",
    "start": "2452280",
    "end": "2458599"
  },
  {
    "text": "method that we just created before so inside of that is a program an ey reservations program of of T so how do",
    "start": "2458599",
    "end": "2466000"
  },
  {
    "text": "you get an IR reservations program of T result out of that well you will notice that the method that we are writing at",
    "start": "2466000",
    "end": "2472480"
  },
  {
    "text": "the moment takes as input an i reservations program of T and it outputs",
    "start": "2472480",
    "end": "2477920"
  },
  {
    "text": "an i reservations program of T result which is exactly what we need so we're just going to call the selector um we're",
    "start": "2477920",
    "end": "2484200"
  },
  {
    "text": "just going to call Select manyu with the selector and that's it so you go",
    "start": "2484200",
    "end": "2491200"
  },
  {
    "text": "where doesn't it call itself yeah it calls itself it calls itself recursively",
    "start": "2491920",
    "end": "2497440"
  },
  {
    "text": "so but how is that ever going to end well it's going to end because sooner or later it's going to run into that pure",
    "start": "2497440",
    "end": "2502480"
  },
  {
    "text": "thing there and then it's just going to call say pure is a t value and we just turn that into an eye reservation",
    "start": "2502480",
    "end": "2507839"
  },
  {
    "text": "program of T result by calling the selector and that you know at that point um the stack can unwind and it can go",
    "start": "2507839",
    "end": "2514440"
  },
  {
    "text": "back to all those recursive Calles to select many so you say well but still",
    "start": "2514440",
    "end": "2519720"
  },
  {
    "text": "doesn't it mean that all of that recursion couldn't you blow the stack yep you could blow the stack but",
    "start": "2519720",
    "end": "2528359"
  },
  {
    "text": "that's not nice I know it's not nice this is why you don't want to do functional programming in c because eventually you will have to deal with",
    "start": "2528359",
    "end": "2535000"
  },
  {
    "text": "recursion which is a normal thing in functional programming languages and languages like Haskell and FP they have",
    "start": "2535000",
    "end": "2541280"
  },
  {
    "text": "langu they have a language feature called tail recursion so that if you write your recursive algorithms in the",
    "start": "2541280",
    "end": "2547200"
  },
  {
    "text": "appropriate way they never blow the stack but G sh doesn't have that feature so you even if you do all the things",
    "start": "2547200",
    "end": "2553559"
  },
  {
    "text": "right you could still blow the stack U so that's another reason why you don't want to do functional programming",
    "start": "2553559",
    "end": "2559160"
  },
  {
    "text": "in c but still okay in this case you know when you're doing free monets the Stag is tends not to get that deep",
    "start": "2559160",
    "end": "2566359"
  },
  {
    "text": "anyway and not not in this example anyway uh so we can just you know push on and see uh if we can get things done",
    "start": "2566359",
    "end": "2572440"
  },
  {
    "text": "but select many is now implemented and then this means this is a Monet this basically what a Monet means",
    "start": "2572440",
    "end": "2578000"
  },
  {
    "text": "we don't have to make it you know particularly magic this this is basically what we need to do right so um the last few things that",
    "start": "2578000",
    "end": "2586559"
  },
  {
    "start": "2582000",
    "end": "2680000"
  },
  {
    "text": "I need to do in order to you know be able to complete all of this stuff is I'm just going to add a few hel of",
    "start": "2586559",
    "end": "2592880"
  },
  {
    "text": "helper methods so before when we used dependency injection we had you know",
    "start": "2592880",
    "end": "2597960"
  },
  {
    "text": "normal methods that we could call like is reservation in the future um you pass a reservation to that and that would",
    "start": "2597960",
    "end": "2603319"
  },
  {
    "text": "have returned a Boolean value now what we want to do instead is we want to say we want to be able to create Small",
    "start": "2603319",
    "end": "2609720"
  },
  {
    "text": "Program Snippets of this little DSL that we're creating at the moment so we're creating a little helper function here",
    "start": "2609720",
    "end": "2615079"
  },
  {
    "text": "that says you know when I call is reservation in future with a reservation I get get one of those program Snippets",
    "start": "2615079",
    "end": "2621680"
  },
  {
    "text": "and then I can compose those with other program Snippets because it's a Monet and monets compos um so if we were to do this in F",
    "start": "2621680",
    "end": "2630599"
  },
  {
    "text": "it would be a oneliner you know this is basically what that what that function looks like in F you know translating",
    "start": "2630599",
    "end": "2636720"
  },
  {
    "text": "this fun fun to C looks like this it this is the same but because C",
    "start": "2636720",
    "end": "2643240"
  },
  {
    "text": "is not really you know designed to do all of the fancy type inferences that",
    "start": "2643240",
    "end": "2648599"
  },
  {
    "text": "that the Shar compiler can do you have to do all of that type annotation with all the generics um so that one liner",
    "start": "2648599",
    "end": "2655200"
  },
  {
    "text": "turns into all of that thing um and the same thing goes",
    "start": "2655200",
    "end": "2660240"
  },
  {
    "text": "for the other ones if you want to create static helper methods for the other two cases it read reservations tend to look",
    "start": "2660240",
    "end": "2666240"
  },
  {
    "text": "like this I'm not even going to walk you through this and create looks like this so you know this as you may have noticed",
    "start": "2666240",
    "end": "2673640"
  },
  {
    "text": "so far creates quite a lot of boilerplate code but we can now rewrite Tri accept",
    "start": "2673640",
    "end": "2682480"
  },
  {
    "start": "2680000",
    "end": "2825000"
  },
  {
    "text": "as a pure function so the idea here is now that it text a reservation is input that's a pure value but instead of just",
    "start": "2682480",
    "end": "2689160"
  },
  {
    "text": "returning a nullable in it returns an program of nullable end and that means",
    "start": "2689160",
    "end": "2695119"
  },
  {
    "text": "you know that's actually a little um abstract syntax tree that describes what you want um to happen in various",
    "start": "2695119",
    "end": "2701800"
  },
  {
    "text": "different cases and then you can have you can run an interpreter over that you know little abstract syntax tree and",
    "start": "2701800",
    "end": "2707520"
  },
  {
    "text": "then whenever you encounter one of those instructions you can go and query the database or query the system clock or",
    "start": "2707520",
    "end": "2714200"
  },
  {
    "text": "whatever and that's sort of how it how it works so this is a fairly normal thing to do in hll this allows you to",
    "start": "2714200",
    "end": "2720680"
  },
  {
    "text": "sort of push all your impure you know IO to the boundary of the system now the",
    "start": "2720680",
    "end": "2727280"
  },
  {
    "text": "way that it ends up looking in in sh then is you say well let's start by figuring out whether the reservation is",
    "start": "2727280",
    "end": "2733160"
  },
  {
    "text": "in the future so we call is reservation in the future that new static helper method that um that I just defined and",
    "start": "2733160",
    "end": "2739839"
  },
  {
    "text": "that is not enough you know we need to do more because this just returns an eye reservations program a fool but what you",
    "start": "2739839",
    "end": "2745839"
  },
  {
    "text": "can do now is you can just like in the TPL example that I showed you before you can now say well when this is done with",
    "start": "2745839",
    "end": "2752720"
  },
  {
    "text": "that evaluation is done and the Boolean value has been produced I can now provide a continuation so in the TPL",
    "start": "2752720",
    "end": "2760040"
  },
  {
    "text": "example that continuation was called continue with uh but now since this is a monad uh we can call Select many instead",
    "start": "2760040",
    "end": "2767480"
  },
  {
    "text": "and the input to the continuation is the output from the previous step that's just a Boolean value and that means we",
    "start": "2767480",
    "end": "2773400"
  },
  {
    "text": "can now switch on that or we can you know do an if evaluation on that and say if that's",
    "start": "2773400",
    "end": "2779200"
  },
  {
    "text": "false we'll return a new pure of nullable in because pure implements I reservation program of of T so this is",
    "start": "2779200",
    "end": "2786400"
  },
  {
    "text": "an i res ation program of n end pure is that is now otherwise we can continue and say",
    "start": "2786400",
    "end": "2794200"
  },
  {
    "text": "well if if we are not exited at this point um we can return uh we can",
    "start": "2794200",
    "end": "2799280"
  },
  {
    "text": "continue with the next thing we can call read reservations another one of those small static helper methods that I um",
    "start": "2799280",
    "end": "2804800"
  },
  {
    "text": "that I wrote and this will then create a program of collection of reservations",
    "start": "2804800",
    "end": "2811280"
  },
  {
    "text": "and then you can do a continuation of that as well and that's going to be RS I'm not I'm not even going to try to",
    "start": "2811280",
    "end": "2816480"
  },
  {
    "text": "attempt to talk you through this it looks horrible and that's the point all right um we're we're basically",
    "start": "2816480",
    "end": "2824960"
  },
  {
    "text": "done U but I want to say a few more things before we wrap up now you may say",
    "start": "2824960",
    "end": "2830880"
  },
  {
    "start": "2825000",
    "end": "2892000"
  },
  {
    "text": "that um this is an eye reservation instruction this is a church encoded",
    "start": "2830880",
    "end": "2836440"
  },
  {
    "text": "discriminated Union um you could say that I'm building up a little bit of a strawman argument",
    "start": "2836440",
    "end": "2842359"
  },
  {
    "text": "here because I've made it unnecessarily functional and it's not properly object oriented I can actually refactor this",
    "start": "2842359",
    "end": "2849200"
  },
  {
    "text": "into something that's more object oriented um so it turns out that this is really just um a disguise of a very",
    "start": "2849200",
    "end": "2856200"
  },
  {
    "text": "well-known design pattern you may have noticed that I said dispatched quite a few times all that's going on here is",
    "start": "2856200",
    "end": "2863119"
  },
  {
    "text": "double dispatching so you can refactor this to the visitor design pattern so what you end up having then is you have",
    "start": "2863119",
    "end": "2868640"
  },
  {
    "text": "I reservation instruction of T um that just has a single method called accept it's no longer called matched it's",
    "start": "2868640",
    "end": "2875160"
  },
  {
    "text": "called accept and then you have that auxiliary interface definition that defines the visitor and it has three",
    "start": "2875160",
    "end": "2881760"
  },
  {
    "text": "methods that are handers for all of those three cases there's still some inline functions there um but um we've",
    "start": "2881760",
    "end": "2888400"
  },
  {
    "text": "actually made it more object oriented if you will and we can do the same thing",
    "start": "2888400",
    "end": "2893680"
  },
  {
    "start": "2892000",
    "end": "2990000"
  },
  {
    "text": "with the program we can refactor that into a visitor um and we can also do it",
    "start": "2893680",
    "end": "2899640"
  },
  {
    "text": "the other way so this is what we call an isomorphism you can always take a church encoded discriminated Union turn that",
    "start": "2899640",
    "end": "2905880"
  },
  {
    "text": "into a visitor you can always take a visitor and turn it into a church and code to discriminated Union it sort of goes both way there's no loss of",
    "start": "2905880",
    "end": "2911559"
  },
  {
    "text": "information going back and forth there so this is basically why I called the talk here dependency injection Revisited",
    "start": "2911559",
    "end": "2918599"
  },
  {
    "text": "the point is that you can refactor your dependency injection based code to just",
    "start": "2918599",
    "end": "2924200"
  },
  {
    "text": "return something that is a visitor where the visitor walks over a little abstract syntax",
    "start": "2924200",
    "end": "2929400"
  },
  {
    "text": "tree why would want to do that I'm I I don't know I mean that would be",
    "start": "2929400",
    "end": "2934640"
  },
  {
    "text": "absolutely crazy stuff I think um I just did it because I I I I can um the um the",
    "start": "2934640",
    "end": "2942559"
  },
  {
    "text": "tri accept method here doesn't change whether you use the church encoding or whether you use the visitor variation it",
    "start": "2942559",
    "end": "2949400"
  },
  {
    "text": "doesn't change um so that just Remains the Same so you may say now well but",
    "start": "2949400",
    "end": "2955400"
  },
  {
    "text": "this this seems really difficult is functional programming is is it really like that is it that hard and it's no",
    "start": "2955400",
    "end": "2962559"
  },
  {
    "text": "it's not you know in high school it would look like this but this would be it you know there would be no boiler",
    "start": "2962559",
    "end": "2968799"
  },
  {
    "text": "plate in hasal this would just be the function that I write all the things that I pull in all the data types and so",
    "start": "2968799",
    "end": "2974079"
  },
  {
    "text": "on they just there's a few of my own you know like a reservation for example is still you know my own domain type and",
    "start": "2974079",
    "end": "2980200"
  },
  {
    "text": "but apart from that turning that into a freem monad is just one line of Declaration saying here I have something",
    "start": "2980200",
    "end": "2985319"
  },
  {
    "text": "I'll turn it into freem Monet bang it's done and I can write code against that there's no boiler plate there and you",
    "start": "2985319",
    "end": "2990920"
  },
  {
    "start": "2990000",
    "end": "3137000"
  },
  {
    "text": "can do the same thing in in F that requires a little bit more boiler plate because there are things you know you can't automatically do in F sh that you",
    "start": "2990920",
    "end": "2997359"
  },
  {
    "text": "can do in high schol but it still looks fairly pretty I think now I did say that",
    "start": "2997359",
    "end": "3004359"
  },
  {
    "text": "in Shar you know by writing select many in the appropriate way you could use Query syntax uh this is basically what",
    "start": "3004359",
    "end": "3011119"
  },
  {
    "text": "we're doing here we're sort of letting the Monet you know Fade Into the background because we have some you know syntactic sugar in Haskell and in F sh",
    "start": "3011119",
    "end": "3019000"
  },
  {
    "text": "so we can say well but we do have syntactic sugar in C as well uh we can use it we can use Query syntax so we",
    "start": "3019000",
    "end": "3025520"
  },
  {
    "text": "could rewrite the Trix step function to look something like this um so this this uses you know um query syntax you'll",
    "start": "3025520",
    "end": "3032319"
  },
  {
    "text": "notice that all of these return blah blah blah from return from blah blah blah in blah blah blah from blah blah",
    "start": "3032319",
    "end": "3038200"
  },
  {
    "text": "blah in blah blah blah and so on so this works um but it's not pretty and you",
    "start": "3038200",
    "end": "3043319"
  },
  {
    "text": "know I had to stack monads in order to make it work because one limitation of the C query syntax um support is that it",
    "start": "3043319",
    "end": "3050280"
  },
  {
    "text": "doesn't allow arbitrary branching inside of the you know the query syntax so in order to deal with branching I had had",
    "start": "3050280",
    "end": "3056799"
  },
  {
    "text": "to you know turn the nullable in into a maybe which is a monad in its own right and then I had to define a stack of you",
    "start": "3056799",
    "end": "3062880"
  },
  {
    "text": "know those two monads which return you know um resulted an even more boilerplate code so it just grows and",
    "start": "3062880",
    "end": "3069559"
  },
  {
    "text": "grows and grows and grows and then even so it's not really pretty because you have to resort to using those",
    "start": "3069559",
    "end": "3075319"
  },
  {
    "text": "underscores and double underscores and so on in order to get the code to compile so",
    "start": "3075319",
    "end": "3080839"
  },
  {
    "text": "um I would say that this works it it executes it compiles it it is the way",
    "start": "3080839",
    "end": "3088480"
  },
  {
    "text": "you can do it um but I you know if if you if you hire a new developer and your",
    "start": "3088480",
    "end": "3093760"
  },
  {
    "text": "your manager says well I've hired this new developer um she or he has you know",
    "start": "3093760",
    "end": "3098799"
  },
  {
    "text": "10 years experience with C so um she or he's going to fit right in and you say",
    "start": "3098799",
    "end": "3103920"
  },
  {
    "text": "well okay here's the code this is our code base you know go figure you know it's not you know it's not the syntax",
    "start": "3103920",
    "end": "3109240"
  },
  {
    "text": "the syntax doesn't really help you knowing the C syntax because the abstractions are completely alien to uh",
    "start": "3109240",
    "end": "3116319"
  },
  {
    "text": "you compared to what most people are used to so how do I do functional programming in c well you don't because",
    "start": "3116319",
    "end": "3122200"
  },
  {
    "text": "C is an object oriented language find it's object oriented but it has lambas",
    "start": "3122200",
    "end": "3127280"
  },
  {
    "text": "how do I write strictly functional code well you use Church en coding to make a legal states on representable well did",
    "start": "3127280",
    "end": "3132680"
  },
  {
    "text": "you just tell me to go myself believe I did F so um the point that I'm",
    "start": "3132680",
    "end": "3139680"
  },
  {
    "start": "3137000",
    "end": "3254000"
  },
  {
    "text": "trying to make here is not you know C has many good features and some of them were inspired by functional programming",
    "start": "3139680",
    "end": "3146319"
  },
  {
    "text": "like Lambda and like link and things like that and I'm not saying you shouldn't use those features the C",
    "start": "3146319",
    "end": "3152960"
  },
  {
    "text": "language design team very carefully picks those features that that they",
    "start": "3152960",
    "end": "3158599"
  },
  {
    "text": "think fits into the C language and they P those things over and there are other things they sort of leaving um over on",
    "start": "3158599",
    "end": "3166200"
  },
  {
    "text": "the sharp side or the hll side because it doesn't really fit the language so using the things that are there you know",
    "start": "3166200",
    "end": "3172160"
  },
  {
    "text": "in Shar I think is perfectly fine as I'm not trying to say that you shouldn't adopt sort of hybrid approach but if you",
    "start": "3172160",
    "end": "3178440"
  },
  {
    "text": "really want to do functional programming you you have to realize that c is not the environment for that because it's",
    "start": "3178440",
    "end": "3184559"
  },
  {
    "text": "not designed to do that if you really want to do functional programming you should really use a proper language for",
    "start": "3184559",
    "end": "3191000"
  },
  {
    "text": "that and I understand that it can be difficult because you you in an organ organization and you have managers and",
    "start": "3191000",
    "end": "3197520"
  },
  {
    "text": "so on but still um I think it makes it makes no sense to try to do it in C it",
    "start": "3197520",
    "end": "3203000"
  },
  {
    "text": "would make sense to do it in other languages I would I really love functional programming uh but it needs to be in the right language so I'll stop",
    "start": "3203000",
    "end": "3211640"
  },
  {
    "text": "talking if you have questions I'll be happy to answer the questions I think um",
    "start": "3211640",
    "end": "3217160"
  },
  {
    "text": "you can just come and talk to me if if you have and those of you who want to get lunch a little bit earlier than anyone else um you should just you know",
    "start": "3217160",
    "end": "3223960"
  },
  {
    "text": "rush out of the door now uh but please remember to fill in or you put the evaluation things in when you leave so",
    "start": "3223960",
    "end": "3229760"
  },
  {
    "text": "thank you for coming and um have a great conference in today and tomorrow",
    "start": "3229760",
    "end": "3236119"
  },
  {
    "text": "very beginning why did why did you turn the interface into a du not just us um you can ab",
    "start": "3247359",
    "end": "3257000"
  }
]