[
  {
    "text": "okay just testing the sound is it fine",
    "start": "5200",
    "end": "9200"
  },
  {
    "text": "yeah so apologies here i i um i got told i had this talk 10 minutes",
    "start": "10400",
    "end": "16640"
  },
  {
    "text": "ago so it's a bit of a rush um",
    "start": "16640",
    "end": "22960"
  },
  {
    "text": "i was scheduled towards the end of the day originally um okay so the risk five microprocessor so",
    "start": "23680",
    "end": "32000"
  },
  {
    "text": "how many of you um actually have used it or any familiar with um",
    "start": "32000",
    "end": "38000"
  },
  {
    "text": "assembly coding okay it's quite and how many",
    "start": "38000",
    "end": "43200"
  },
  {
    "text": "how many have um used any risk five before",
    "start": "43200",
    "end": "48239"
  },
  {
    "text": "okay so that's good um",
    "start": "48239",
    "end": "53360"
  },
  {
    "text": "so my name is eric enghheim i work for a company called 60 north we do consulting",
    "start": "53360",
    "end": "59199"
  },
  {
    "text": "work and actually what i normally do is create educational content for a programming language called",
    "start": "59199",
    "end": "65439"
  },
  {
    "text": "julia which is a new language for machine learning",
    "start": "65439",
    "end": "71520"
  },
  {
    "text": "data science high performance computing so that's a bit different from what i'm",
    "start": "71520",
    "end": "76560"
  },
  {
    "text": "going to be talking about here which is more about sort of a hobby interest of mine for for a long time i started",
    "start": "76560",
    "end": "83759"
  },
  {
    "text": "programming assembly codes on the 68k motorola 68000 back in",
    "start": "83759",
    "end": "92000"
  },
  {
    "text": "the late 18 the late 1980s um on amiga thousand",
    "start": "92000",
    "end": "98000"
  },
  {
    "text": "um not quite that probably long ago so i tried it different architectures and",
    "start": "98000",
    "end": "104079"
  },
  {
    "text": "i think risk five is a kind of it's quite exciting new architecture",
    "start": "104079",
    "end": "109360"
  },
  {
    "text": "to work on",
    "start": "109360",
    "end": "113079"
  },
  {
    "text": "so um what exactly is risk five so one thing",
    "start": "115600",
    "end": "121040"
  },
  {
    "text": "that is important to keep in mind when uh when thinking about risk five is that",
    "start": "121040",
    "end": "126560"
  },
  {
    "text": "it's unlike x86 and um",
    "start": "126560",
    "end": "131760"
  },
  {
    "text": "arm it's not an architecture that was primarily made for industry so those other",
    "start": "131760",
    "end": "138000"
  },
  {
    "text": "architectures are typically used by and made for industry",
    "start": "138000",
    "end": "143760"
  },
  {
    "text": "um risk five in contrast comes out of university from",
    "start": "143760",
    "end": "148959"
  },
  {
    "text": "berkeley and it's actually the fifth generation of the very first risk processor risk one",
    "start": "148959",
    "end": "155200"
  },
  {
    "text": "that was created by a group um i'm not sure if he was led by but david",
    "start": "155200",
    "end": "160480"
  },
  {
    "text": "patterson is a pretty important name in this history he was the one that coined the term risk reduced instruction set um",
    "start": "160480",
    "end": "167280"
  },
  {
    "text": "computer so this was back in 1981 and this has been going through several generations",
    "start": "167280",
    "end": "173760"
  },
  {
    "text": "um until they got to risk five um and then with risk five they wanted",
    "start": "173760",
    "end": "179440"
  },
  {
    "text": "to create something that was usable um both for academic purposes and also for",
    "start": "179440",
    "end": "186080"
  },
  {
    "text": "industry so it should be something that you can implement that gives you high performance in a realistic setting",
    "start": "186080",
    "end": "193440"
  },
  {
    "text": "but it can also meet goals like for students who don't want it too complex architecture that is hard to",
    "start": "193440",
    "end": "199440"
  },
  {
    "text": "learn you want something where students can realistically implement a simple risk processor in the first",
    "start": "199440",
    "end": "205280"
  },
  {
    "text": "semester so for me as a hobbyist this is kind of an interesting thing with risk five it's something that if you're interested in",
    "start": "205280",
    "end": "214159"
  },
  {
    "text": "playing around with microprocessors as on a sort of hobby basis this is a very interesting architecture to develop",
    "start": "214400",
    "end": "223040"
  },
  {
    "text": "you often see risk 5 pitched as a sort of linux for",
    "start": "225040",
    "end": "231920"
  },
  {
    "text": "microprocessors and i think that this is actually a little bit a bad kind of",
    "start": "232400",
    "end": "238239"
  },
  {
    "text": "characterization for me that was actually what made me not care that much about looking at",
    "start": "238239",
    "end": "243680"
  },
  {
    "text": "risk five uh initially um because it sounded like it was just a kind of a",
    "start": "243680",
    "end": "249599"
  },
  {
    "text": "me too microprocessor where",
    "start": "249599",
    "end": "254760"
  },
  {
    "text": "it was just open source but just did everything else like um like everybody else",
    "start": "255040",
    "end": "260799"
  },
  {
    "text": "i think a more important part of risk five is actually that it's a modular design which is not common in the",
    "start": "260799",
    "end": "266800"
  },
  {
    "text": "industry so risk five is composable extensions unlike what you find with x86",
    "start": "266800",
    "end": "274320"
  },
  {
    "text": "and arm so i'm going to use a bit of a silly analogy tear to try to explain what we mean by that we can",
    "start": "274320",
    "end": "280960"
  },
  {
    "text": "imagine something like x86 that started back in 1978 with sort of one menu here you've got 80",
    "start": "280960",
    "end": "287759"
  },
  {
    "text": "instructions and then customers want more so they're adding more to this",
    "start": "287759",
    "end": "293360"
  },
  {
    "text": "buffet of instructions and they keep adding and adding and adding",
    "start": "293360",
    "end": "298960"
  },
  {
    "text": "and so eventually they have 1300 instructions",
    "start": "298960",
    "end": "306800"
  },
  {
    "text": "so they've been adding three instructions roughly every month since 1978 and actually this",
    "start": "306960",
    "end": "312720"
  },
  {
    "text": "is a low number because this is for 32-bit for 64-bit is around 1500 instructions now",
    "start": "312720",
    "end": "320000"
  },
  {
    "text": "and it isn't actually all that much better for arm microprocessors",
    "start": "320000",
    "end": "325120"
  },
  {
    "text": "32-bit is about 500 instructions depending a bit on how you count it for 64-bit",
    "start": "325120",
    "end": "331680"
  },
  {
    "text": "it's about a thousand now you can contrast that with risk five",
    "start": "331680",
    "end": "336800"
  },
  {
    "text": "which is just 47 instructions that you have to implement just reading the specification would",
    "start": "336800",
    "end": "342639"
  },
  {
    "text": "take you about six hours",
    "start": "342639",
    "end": "347520"
  },
  {
    "text": "so what is the difference why so few instructions not because risk",
    "start": "349520",
    "end": "354880"
  },
  {
    "text": "five is more like a menu you get to choose i just want to buy the fries",
    "start": "354880",
    "end": "360400"
  },
  {
    "text": "and the apple cake and you only pay for that and what do i mean by pay well i mean in terms of transistors",
    "start": "360400",
    "end": "366800"
  },
  {
    "text": "you're only paying for the features that you're using and you don't have to pay for all the other stuff that is accumulated over time",
    "start": "366800",
    "end": "375280"
  },
  {
    "text": "so these two sheets let me see if i have this",
    "start": "376720",
    "end": "381840"
  },
  {
    "text": "sheet here",
    "start": "382000",
    "end": "384639"
  },
  {
    "text": "so this is kind of most of what you need to know about risk five the instructions here",
    "start": "388880",
    "end": "394639"
  },
  {
    "text": "um you need a quite a thick book to do that with x86",
    "start": "394639",
    "end": "400080"
  },
  {
    "text": "um so the first part here this other standard instructions that you have to implement and most of",
    "start": "400080",
    "end": "406240"
  },
  {
    "text": "the other stuff here that is those are just common extensions",
    "start": "406240",
    "end": "411360"
  },
  {
    "text": "that you don't have to and why does all this matter was because",
    "start": "411360",
    "end": "416880"
  },
  {
    "text": "complexity costs money so each of these little squares right is",
    "start": "416880",
    "end": "422000"
  },
  {
    "text": "a chip and you would think that if i make a chip that's twice as large",
    "start": "422000",
    "end": "427520"
  },
  {
    "text": "well the cost will increase with twice i'm having twice as many transistors but no it actually grows with the square",
    "start": "427520",
    "end": "434319"
  },
  {
    "text": "of the area it's a quadratic equation and the reason for that is that you get these random um",
    "start": "434319",
    "end": "440850"
  },
  {
    "text": "[Music] faults at random points on a chip so if you have a very",
    "start": "440850",
    "end": "446160"
  },
  {
    "text": "a larger area it's a bigger chance that there's going to be a flaw in that area and that's kind of why",
    "start": "446160",
    "end": "452080"
  },
  {
    "text": "it's quite expensive to have large chips compared to small ones",
    "start": "452080",
    "end": "457360"
  },
  {
    "text": "so if you compare the risk 5 rockets it's one of the simpler risk fi designs",
    "start": "459120",
    "end": "464639"
  },
  {
    "text": "with an arm cortex a5 and they have kind of similar capability similar amount of cache memory",
    "start": "464639",
    "end": "472240"
  },
  {
    "text": "you will find that the die size size of the chips is about half on the risk 5.",
    "start": "472240",
    "end": "478400"
  },
  {
    "text": "but this translates into a price that's one fourth of the arm cortex a5 so that's a big",
    "start": "478400",
    "end": "485360"
  },
  {
    "text": "difference now you shouldn't exaggerate this implication because",
    "start": "485360",
    "end": "490720"
  },
  {
    "text": "when you get the desktop style chips like say the m1 um that apple has released at 16 billion",
    "start": "490720",
    "end": "497520"
  },
  {
    "text": "transistors and a lot of what's on there has nothing to do with decoding um instructions it's a lot of other types",
    "start": "497520",
    "end": "504960"
  },
  {
    "text": "of features so for desktop class chip the chips that you",
    "start": "504960",
    "end": "510800"
  },
  {
    "text": "the transistors you need for decoding instructions is going to be dwarfed by other things",
    "start": "510800",
    "end": "516000"
  },
  {
    "text": "but when you're working in the embedded space this matters a lot so we can imagine that uh for embedded type of",
    "start": "516000",
    "end": "523120"
  },
  {
    "text": "hardware maybe low end um phones you're gonna start seeing risk five",
    "start": "523120",
    "end": "528880"
  },
  {
    "text": "um entering the market because they're gonna have such a cost advantage",
    "start": "528880",
    "end": "534800"
  },
  {
    "text": "and also for specialized hardware where you typically want to make for instance small cores it's hard to make small",
    "start": "536959",
    "end": "542640"
  },
  {
    "text": "course if you have a lot of instructions",
    "start": "542640",
    "end": "547480"
  },
  {
    "text": "but of course this is for the same volume right now um you will typically find that the risk five chips that you",
    "start": "548000",
    "end": "554959"
  },
  {
    "text": "might or boards you might want to buy those are probably going to be more expensive than arm simply because",
    "start": "554959",
    "end": "560800"
  },
  {
    "text": "they're not produced in the same volume but when volumes are equal you're gonna see the cost advantage",
    "start": "560800",
    "end": "567920"
  },
  {
    "text": "so what are these risk five extensions well they're given names from adz",
    "start": "567920",
    "end": "573839"
  },
  {
    "text": "and then that makes you it's easier to kind of specify the compilers and so on what",
    "start": "573839",
    "end": "580480"
  },
  {
    "text": "architecture you're working on so this first part here rv 32 that's risk 5 32 bits could be 64",
    "start": "580480",
    "end": "586640"
  },
  {
    "text": "or even 1828 actually and then this essay we have the m a",
    "start": "586640",
    "end": "592480"
  },
  {
    "text": "f d extension so m is multiply and divide this is for atomic",
    "start": "592480",
    "end": "599519"
  },
  {
    "text": "instructions and so on because this is kind of a standard set of instructions that you might want to use for general",
    "start": "599519",
    "end": "605440"
  },
  {
    "text": "purpose operating system such as linux these are abbreviated to a g so when you",
    "start": "605440",
    "end": "610720"
  },
  {
    "text": "see a g it means sort of the standard instructions you might want to have on a sort of desktop class",
    "start": "610720",
    "end": "616320"
  },
  {
    "text": "machine the way you deal with this at runtime is that",
    "start": "616320",
    "end": "621920"
  },
  {
    "text": "all risk 5 processors have to implement this command status register and where you",
    "start": "621920",
    "end": "628320"
  },
  {
    "text": "have a bunch of special um functions that you can read so on the",
    "start": "628320",
    "end": "634240"
  },
  {
    "text": "sheet you have this section here that explains the instructions that you can use",
    "start": "634240",
    "end": "640560"
  },
  {
    "text": "to read and check what extensions does the chip i'm currently running on actually support",
    "start": "640560",
    "end": "648560"
  },
  {
    "text": "you don't have to necessarily do this it is practical say",
    "start": "650399",
    "end": "655440"
  },
  {
    "text": "you are doing a lots of matrix multiplications maybe you're doing something machine learning task",
    "start": "655440",
    "end": "660880"
  },
  {
    "text": "and then you can check do i have the vector extension for instance if i have that i can take a different code path",
    "start": "660880",
    "end": "667279"
  },
  {
    "text": "and i can compute those matrix multiplications a lot faster",
    "start": "667279",
    "end": "672720"
  },
  {
    "text": "but you don't necessarily need to set that up because all the instructions that are now supported get trapped",
    "start": "672720",
    "end": "679920"
  },
  {
    "text": "so that is sort of like an interrupt you will jump to somewhere else in the code in the operating system and you can",
    "start": "679920",
    "end": "685920"
  },
  {
    "text": "simulate those instructions that are not supported that means that",
    "start": "685920",
    "end": "691600"
  },
  {
    "text": "given you have operating system set up for this you can your program can in principle run on any risk",
    "start": "691600",
    "end": "698000"
  },
  {
    "text": "fire microprocessor regardless of the extensions that it supports",
    "start": "698000",
    "end": "703440"
  },
  {
    "text": "uh final thing to to note about sentience is that they're frozen that means that once it's been ratified which",
    "start": "703440",
    "end": "709440"
  },
  {
    "text": "instructions are going to be an extension and how they're going to work this is never going to change",
    "start": "709440",
    "end": "717639"
  },
  {
    "text": "so you can't so this is good for backwards compatibility right if you've written",
    "start": "720240",
    "end": "726399"
  },
  {
    "text": "code to work with one particular set of extensions that's going to continue working for a",
    "start": "726399",
    "end": "731839"
  },
  {
    "text": "long time this is also an important goal for risk five when universities use other",
    "start": "731839",
    "end": "738160"
  },
  {
    "text": "instruction sets in the past they found that it was",
    "start": "738160",
    "end": "743519"
  },
  {
    "text": "hard for long-term use because they often have particular instructions that",
    "start": "743519",
    "end": "749360"
  },
  {
    "text": "really only made sense in that area you know for particular optimization risk is particularly risk five is particularly",
    "start": "749360",
    "end": "755600"
  },
  {
    "text": "made to have a very long-term view that this architecture should exist for a very long time",
    "start": "755600",
    "end": "762160"
  },
  {
    "text": "let's contrast this with x86 and x86 and arm what if they decided to say arm that we",
    "start": "762160",
    "end": "768959"
  },
  {
    "text": "want to be competitive with risk five in the sort of low end um embedded space so we're",
    "start": "768959",
    "end": "775600"
  },
  {
    "text": "gonna cut up our in our huge instruction set about a thousand instructions into",
    "start": "775600",
    "end": "780959"
  },
  {
    "text": "lots of different extensions like risk five could they do that well not really",
    "start": "780959",
    "end": "787120"
  },
  {
    "text": "because you have all this legacy software which is not written to take that into",
    "start": "787120",
    "end": "792800"
  },
  {
    "text": "consideration so if they reduce a new chip with just a few extensions",
    "start": "792800",
    "end": "798079"
  },
  {
    "text": "the existing software wouldn't run right because it doesn't know to check any kind of status register so",
    "start": "798079",
    "end": "804320"
  },
  {
    "text": "it will just crash and you don't have an operating system",
    "start": "804320",
    "end": "810720"
  },
  {
    "text": "existing operating systems are not set up to to trap and simulate other instructions",
    "start": "810720",
    "end": "816880"
  },
  {
    "text": "so unlike risk you don't have the risk five you don't have the um",
    "start": "816880",
    "end": "822800"
  },
  {
    "text": "the ecosystem the tools and the practices and so on to support this on risk five there's a suit of tools to verify that you're",
    "start": "822800",
    "end": "829920"
  },
  {
    "text": "following the specification that you're checking extensions and so on",
    "start": "829920",
    "end": "835199"
  },
  {
    "text": "now you could do it to the existing instruction set architectures",
    "start": "835199",
    "end": "840720"
  },
  {
    "text": "but it's not very much value to say okay we're going to have an extension for these 20 new instructions and you",
    "start": "840880",
    "end": "846959"
  },
  {
    "text": "already have 1500 instructions that you have to implement",
    "start": "846959",
    "end": "853360"
  },
  {
    "text": "so just to clarify some of the the terminology that i used here um",
    "start": "855760",
    "end": "862720"
  },
  {
    "text": "we gotta separate between instruction set architecture and the micro architecture risk five is primarily a",
    "start": "862880",
    "end": "870320"
  },
  {
    "text": "instruction set architecture that's what it defines that's in it's an open instruction set architecture and that's",
    "start": "870320",
    "end": "876240"
  },
  {
    "text": "sort of like the interface to your microchip whereas the microchip",
    "start": "876240",
    "end": "882079"
  },
  {
    "text": "the micro architecture is how it actually works internally so as an example um",
    "start": "882079",
    "end": "888240"
  },
  {
    "text": "an amd and an intel chip right they can both run the same code even though they have completely different micro",
    "start": "888240",
    "end": "894800"
  },
  {
    "text": "architectures and that's because they have the same instruction set architecture so the isa",
    "start": "894800",
    "end": "900800"
  },
  {
    "text": "that is what you see as an assembly programmer or as a compiler writer",
    "start": "900800",
    "end": "906639"
  },
  {
    "text": "so where is risk five used so you can see there is um already a bunch of different kinds of",
    "start": "907760",
    "end": "914720"
  },
  {
    "text": "styles of boards that exist to use risk five processors",
    "start": "914720",
    "end": "920639"
  },
  {
    "text": "people talk about that with all these extensions that you can optionally add and companies can add their own",
    "start": "922000",
    "end": "928320"
  },
  {
    "text": "custom extensions will we just not end up with this kind of jungle where with incompatibilities and",
    "start": "928320",
    "end": "936399"
  },
  {
    "text": "a mess it's important to understand that",
    "start": "936399",
    "end": "942000"
  },
  {
    "text": "that makes that makes no sense for",
    "start": "942000",
    "end": "947600"
  },
  {
    "text": "if you're making something like more like a personal computer but those boards are probably going to standardize on the g",
    "start": "947600",
    "end": "954560"
  },
  {
    "text": "extensions but for a lot of other things is specialized hardware",
    "start": "954560",
    "end": "960720"
  },
  {
    "text": "such as accelerators and you're not going to be running all sorts of software on those so compatibility is",
    "start": "960720",
    "end": "968000"
  },
  {
    "text": "not as important there so you might still in the future have x86",
    "start": "968000",
    "end": "975040"
  },
  {
    "text": "and um arm sort of where that's the main system",
    "start": "975040",
    "end": "980480"
  },
  {
    "text": "but you might have all sorts of extra hardware accelerators that are actually risk five processors",
    "start": "980480",
    "end": "989120"
  },
  {
    "text": "another thing where you're starting to see risk five up here is for the internet of things so this is one example",
    "start": "989920",
    "end": "998240"
  },
  {
    "text": "speedmex duino it has neural network processor machine vision you can connect cameras and so on",
    "start": "998240",
    "end": "1006720"
  },
  {
    "text": "i think this one is quite interesting this is from esperanto technologies",
    "start": "1007199",
    "end": "1012880"
  },
  {
    "text": "so they have this system on a chip this one here 28 billion transistors",
    "start": "1012880",
    "end": "1020639"
  },
  {
    "text": "and it has four maxian general purpose",
    "start": "1021440",
    "end": "1026640"
  },
  {
    "text": "processor risk five 64-bit um and on these you can run basically like a linux operating system",
    "start": "1026640",
    "end": "1034319"
  },
  {
    "text": "um general purpose operating system and there you can prepare for instance machine learning tasks um",
    "start": "1034319",
    "end": "1041438"
  },
  {
    "text": "maybe heavy matrix multiplications and the maxims can dish that out to",
    "start": "1041439",
    "end": "1046959"
  },
  {
    "text": "their minions so that's a 1088 course",
    "start": "1046959",
    "end": "1052160"
  },
  {
    "text": "that each have implemented a a vector processing instruction set so those are",
    "start": "1052160",
    "end": "1057600"
  },
  {
    "text": "very very small um course",
    "start": "1057600",
    "end": "1063760"
  },
  {
    "text": "so they are quite simple but they do want one particular thing very fast like vector processing and that's why this",
    "start": "1063840",
    "end": "1069760"
  },
  {
    "text": "manages to have really high performance 100 to 200 um operations at less than 20 watts",
    "start": "1069760",
    "end": "1078160"
  },
  {
    "text": "so just these minions 1000 the 1088 i think they are less than 10 watts",
    "start": "1078160",
    "end": "1086720"
  },
  {
    "text": "um so comparison the m1 that apple released that was about 15 watts i think",
    "start": "1086720",
    "end": "1094519"
  },
  {
    "text": "so to understand a little bit more of this kind of technical details i want to go through i'm going to",
    "start": "1096240",
    "end": "1101280"
  },
  {
    "text": "go a bit through risk 5 assembly code",
    "start": "1101280",
    "end": "1106400"
  },
  {
    "text": "if you want to get into this this cornell risk by simulator is a kind of easy one to get into it doesn't support",
    "start": "1106400",
    "end": "1112799"
  },
  {
    "text": "all that many instructions you can see them down here um you got all the registers here the code that we're",
    "start": "1112799",
    "end": "1118400"
  },
  {
    "text": "pasting in and here you can see the code execute",
    "start": "1118400",
    "end": "1123240"
  },
  {
    "text": "so if you're interested in trying this you can use this link take a photo or that or something",
    "start": "1125520",
    "end": "1132640"
  },
  {
    "text": "so what i'm going to go through to try to explain is this simple counter program it takes a value",
    "start": "1134559",
    "end": "1141760"
  },
  {
    "text": "in the this x1 register that you will have to set yourself and then it starts counting",
    "start": "1141760",
    "end": "1148640"
  },
  {
    "text": "down the instructions for",
    "start": "1148640",
    "end": "1153679"
  },
  {
    "text": "assembly code tends to use these kind of abbreviated words like at add i which is add immediate",
    "start": "1153679",
    "end": "1160640"
  },
  {
    "text": "sw store word and so on but we're going to go through these in more detail",
    "start": "1160640",
    "end": "1168080"
  },
  {
    "text": "you also have in risk five a number of pseudo instructions and one of the reasons for that is that",
    "start": "1169440",
    "end": "1176080"
  },
  {
    "text": "because instruction set is so compressed and small they try to be clever about it and so in each instruction can be kind",
    "start": "1176080",
    "end": "1182960"
  },
  {
    "text": "of used in different ways that can hurt readability a bit so you have",
    "start": "1182960",
    "end": "1188480"
  },
  {
    "text": "pseudo instructions without just really just translates into actual essa instructions that kind of convey better what they're",
    "start": "1188480",
    "end": "1194960"
  },
  {
    "text": "for so this is load immediate which is actually what you intend with the the",
    "start": "1194960",
    "end": "1200080"
  },
  {
    "text": "ads that you saw earlier so",
    "start": "1200080",
    "end": "1205760"
  },
  {
    "text": "central comp uh central thing for um microprocessors to",
    "start": "1205760",
    "end": "1212240"
  },
  {
    "text": "understand is registers and registers is i think this is kind of interesting from a historical perspective this is a very",
    "start": "1212240",
    "end": "1218480"
  },
  {
    "text": "old idea this is an old mechanical calculator a so-called arithmometer",
    "start": "1218480",
    "end": "1224559"
  },
  {
    "text": "actually a russian one and this has three registers here",
    "start": "1224559",
    "end": "1230000"
  },
  {
    "text": "it works but you're pulling down these different dials here to select digits to get a number and then you crank here and",
    "start": "1230000",
    "end": "1237039"
  },
  {
    "text": "it adds to the accumulator down here and you can actually move this whole",
    "start": "1237039",
    "end": "1244320"
  },
  {
    "text": "thing [Music] left and right a number of digits and when you're adding it puts the numbers",
    "start": "1244320",
    "end": "1250880"
  },
  {
    "text": "down on shifted over so this essentially lets you multiply by 10 100",
    "start": "1250880",
    "end": "1258080"
  },
  {
    "text": "1000 and so on so this one doesn't directly support",
    "start": "1258080",
    "end": "1264320"
  },
  {
    "text": "multiplication but you can you can kind of achieve it by um doing these shift operations and additions and you can i",
    "start": "1264320",
    "end": "1270480"
  },
  {
    "text": "think you can subtract by just cranking the other way and what's interesting is that this is exactly what the arithmetic logic unit",
    "start": "1270480",
    "end": "1278720"
  },
  {
    "text": "in a microprocessor does it only does those same operations at this old mechanical device it can add",
    "start": "1278720",
    "end": "1285919"
  },
  {
    "text": "subtract and shift to the left and right of course this uses binary number systems so it's it's going to shift in 2",
    "start": "1285919",
    "end": "1293280"
  },
  {
    "text": "4 8 16 and so on rather than 10 100 and so on",
    "start": "1293280",
    "end": "1299520"
  },
  {
    "text": "and of course for registers we have a lot more registers than on a mechanical device on risk 5 we have",
    "start": "1299520",
    "end": "1306320"
  },
  {
    "text": "32 registers one of them is",
    "start": "1306320",
    "end": "1313280"
  },
  {
    "text": "a bit special because it's always zero it means whatever i write into it",
    "start": "1313280",
    "end": "1319039"
  },
  {
    "text": "i'm always going to read um zero out now this sounds maybe a bit nonsensical but it's",
    "start": "1319039",
    "end": "1325520"
  },
  {
    "text": "actually if you start playing around with risk five assembly you will find that this is actually very practical that you have a register that you always",
    "start": "1325520",
    "end": "1331760"
  },
  {
    "text": "know is zero i wish that was actually in a lot of other architectures",
    "start": "1331760",
    "end": "1339280"
  },
  {
    "text": "when you're programming risk five you typically don't use those x names",
    "start": "1340400",
    "end": "1346480"
  },
  {
    "text": "for the registers you tend to use these aliases for the same registers and that's",
    "start": "1346480",
    "end": "1352960"
  },
  {
    "text": "because when you're when you're programming for instance i make implement a function that's going",
    "start": "1352960",
    "end": "1359600"
  },
  {
    "text": "to be called from a high level programming language and i want to be able to pass",
    "start": "1359600",
    "end": "1366159"
  },
  {
    "text": "arguments how do i do that well you follow typically conventions there's a binary",
    "start": "1366159",
    "end": "1373440"
  },
  {
    "text": "api and this says that these registers from a0",
    "start": "1373440",
    "end": "1380240"
  },
  {
    "text": "to a7 that's where you pass your arguments and the return values is in this a 0",
    "start": "1380240",
    "end": "1388480"
  },
  {
    "text": "that you can see here now when you",
    "start": "1388480",
    "end": "1392960"
  },
  {
    "text": "call a function you are responsible for restoring or making sure you don't",
    "start": "1393760",
    "end": "1399280"
  },
  {
    "text": "overwrite registers that the calling program might be using to do different calculations",
    "start": "1399280",
    "end": "1405679"
  },
  {
    "text": "this can be cumbersome to have to do that for just simple calculations so there's a convention where these t0",
    "start": "1405679",
    "end": "1414400"
  },
  {
    "text": "to t5 are used for uh um you don't have to preserve",
    "start": "1414400",
    "end": "1420960"
  },
  {
    "text": "those i'm just gonna take some water to clear my throat here",
    "start": "1420960",
    "end": "1428919"
  },
  {
    "text": "um",
    "start": "1436480",
    "end": "1439480"
  },
  {
    "text": "um yeah and then you have other registers like ra which turns the return address",
    "start": "1444559",
    "end": "1450320"
  },
  {
    "text": "so when i call a function before it gets called i store where i'm currently at in the ra register so i can easily get",
    "start": "1450320",
    "end": "1456640"
  },
  {
    "text": "back and then you have sp which is a stack pointer",
    "start": "1456640",
    "end": "1461760"
  },
  {
    "text": "so this is how a typical assembly instruction looks and if you use the high level languages this is a",
    "start": "1462320",
    "end": "1468480"
  },
  {
    "text": "bit different we don't call these arguments we call those operands in assembly code",
    "start": "1468480",
    "end": "1476159"
  },
  {
    "text": "this is the destination register this is where the results get put as you can see in the kind of comments here",
    "start": "1476159",
    "end": "1483679"
  },
  {
    "text": "in assembly code of course the operation you do is actually a number it's an op code but instead of remembering a number",
    "start": "1483679",
    "end": "1489279"
  },
  {
    "text": "each time we're using a mnemonic that makes it easier to remember those",
    "start": "1489279",
    "end": "1496559"
  },
  {
    "text": "and you don't you can't typically have sort of free number of arguments the way you have in high-level language",
    "start": "1496880",
    "end": "1503440"
  },
  {
    "text": "and the reason for that is that these instructions have to be encoded into binary form into 32-bit",
    "start": "1503440",
    "end": "1510240"
  },
  {
    "text": "word so the instruction you're performing the mnemonic is turned into an up code which is stored in these",
    "start": "1510240",
    "end": "1516799"
  },
  {
    "text": "seven bits here um and then the arguments say the rd",
    "start": "1516799",
    "end": "1522480"
  },
  {
    "text": "register requires five registers so you can see here if i just had arbitrary number of arguments i would run out of",
    "start": "1522480",
    "end": "1528559"
  },
  {
    "text": "space and this also tells you why typically all most of the risk 5 instructions they",
    "start": "1528559",
    "end": "1535120"
  },
  {
    "text": "take three arguments so that you can have the standard encoding format and there's five bits for each of these",
    "start": "1535120",
    "end": "1542720"
  },
  {
    "text": "operands so if you know binary that explains you why",
    "start": "1542720",
    "end": "1548159"
  },
  {
    "text": "you can have 32 registers",
    "start": "1548159",
    "end": "1551679"
  },
  {
    "text": "so it's not actually a problem to in principle have enough transistors to have more registers uh what limits the number of",
    "start": "1553919",
    "end": "1560400"
  },
  {
    "text": "registers that you can have in a cpu is actually this you know how many bits do i have available",
    "start": "1560400",
    "end": "1566159"
  },
  {
    "text": "to encode them so there are other alternatives but encodings but i'm not going to cover",
    "start": "1566159",
    "end": "1572240"
  },
  {
    "text": "that here so what happens when you actually run an instruction in a microprocessor so i'm",
    "start": "1572240",
    "end": "1578559"
  },
  {
    "text": "going to show you how it basically works in a risk processor and this illustration that i",
    "start": "1578559",
    "end": "1584480"
  },
  {
    "text": "made here is a of course a major simplification of how a microprocessor works a bunch of stuff",
    "start": "1584480",
    "end": "1590720"
  },
  {
    "text": "has been thrown out but just to be able to illustrate the",
    "start": "1590720",
    "end": "1597039"
  },
  {
    "text": "things that i'm going to talk about here so there's four clock cycles required to perform an",
    "start": "1597039",
    "end": "1604000"
  },
  {
    "text": "instruction because it happens in four separate steps for something like a cis processor like",
    "start": "1604000",
    "end": "1609600"
  },
  {
    "text": "x86 the way it traditionally worked this would be a lot more complex but risk has",
    "start": "1609600",
    "end": "1614640"
  },
  {
    "text": "tried to standardize into four uh clearly defined steps in how an instruction is performed and that has to",
    "start": "1614640",
    "end": "1621679"
  },
  {
    "text": "do with a concept that was kind of pioneered with risk processor which is pipelining",
    "start": "1621679",
    "end": "1627039"
  },
  {
    "text": "but i'm not going to have time to cover that here so the first step is fetch",
    "start": "1627039",
    "end": "1635279"
  },
  {
    "text": "and what happens then is it's the decoder that's the boss that's",
    "start": "1635279",
    "end": "1640720"
  },
  {
    "text": "in charge and it's using these control lines to toggle on other computational",
    "start": "1640720",
    "end": "1645760"
  },
  {
    "text": "units so it's it's here it's toggling on the program counter it says okay you can release your um",
    "start": "1645760",
    "end": "1652080"
  },
  {
    "text": "your current position in memory where the the first instruction is and that is sent out here",
    "start": "1652080",
    "end": "1658960"
  },
  {
    "text": "to the memory to pick a memory cell and from the memory cell you send the actual instruction into the instruction",
    "start": "1658960",
    "end": "1664720"
  },
  {
    "text": "register",
    "start": "1664720",
    "end": "1667720"
  },
  {
    "text": "next step is the code and here um the instruction goes into the decoder",
    "start": "1670640",
    "end": "1677200"
  },
  {
    "text": "and based on what it finds in the instruction it's going to toggle on different control lines it says what",
    "start": "1677200",
    "end": "1684480"
  },
  {
    "text": "what pieces inside the cpu is going to be enabled so this is going to say what are the two registers i'm going to pick",
    "start": "1684480",
    "end": "1690960"
  },
  {
    "text": "as input to the alu and what operations i'm going to enable am i going to do an",
    "start": "1690960",
    "end": "1696880"
  },
  {
    "text": "add or a shift and so on",
    "start": "1696880",
    "end": "1701200"
  },
  {
    "text": "so it's only a third step where you're actually executing and doing the thing you want so say we're doing an addition",
    "start": "1702399",
    "end": "1708559"
  },
  {
    "text": "at this point we're selecting the where the data from the two registers we have selected goes into the alu",
    "start": "1708559",
    "end": "1715520"
  },
  {
    "text": "um and the result comes out and gets stored in the results register",
    "start": "1715520",
    "end": "1723159"
  },
  {
    "text": "and the last step is the right back step this is where the decoder is",
    "start": "1726399",
    "end": "1733279"
  },
  {
    "text": "selecting which outputs this is what we call a multiplexer so you can kind of choose you know which outputs",
    "start": "1733279",
    "end": "1739840"
  },
  {
    "text": "am i sending data to is similar here you can choose what what",
    "start": "1739840",
    "end": "1745039"
  },
  {
    "text": "input am i taking this or this one so here i'm selecting that it's going to go back to a register that i selected",
    "start": "1745039",
    "end": "1751679"
  },
  {
    "text": "here so say the third register",
    "start": "1751679",
    "end": "1755360"
  },
  {
    "text": "so that will help maybe understand a bit more how this program works given some comments here i can kind of see what",
    "start": "1757440",
    "end": "1763919"
  },
  {
    "text": "operations it's doing so the add-i",
    "start": "1763919",
    "end": "1768158"
  },
  {
    "text": "you can see that it's um it adds a one to x zero but x zero is always zero",
    "start": "1769200",
    "end": "1776559"
  },
  {
    "text": "so that the result is that you're loading a one into x two",
    "start": "1776559",
    "end": "1783600"
  },
  {
    "text": "so this is used here in the subtract to allow you to kind of loop through and on each each loop through you're",
    "start": "1784799",
    "end": "1790960"
  },
  {
    "text": "subtracting one uh one from x1 so you're always going x1",
    "start": "1790960",
    "end": "1797279"
  },
  {
    "text": "is going down and when you're done with that you're storing the results into this",
    "start": "1797279",
    "end": "1803600"
  },
  {
    "text": "memory address so that is x0 which is also always zero so it's the fourth memory address where",
    "start": "1803600",
    "end": "1809919"
  },
  {
    "text": "we're storing the results and then blt is a branch",
    "start": "1809919",
    "end": "1815840"
  },
  {
    "text": "if less than so if x0 is less than x1 then you're going to the beginning",
    "start": "1815840",
    "end": "1822640"
  },
  {
    "text": "and the last one is halt stops execution",
    "start": "1822640",
    "end": "1826880"
  },
  {
    "text": "so you wouldn't necessarily have to write it like this um the reason i did that was because",
    "start": "1828880",
    "end": "1834559"
  },
  {
    "text": "there's no subtract immediate so immediate is when you have encoded some of the data inside the instruction",
    "start": "1834559",
    "end": "1841039"
  },
  {
    "text": "itself such as one and the reason there is no subtract immediate is that you could do",
    "start": "1841039",
    "end": "1848000"
  },
  {
    "text": "this with add immediate instead right because i can just put a minus one there",
    "start": "1848000",
    "end": "1853360"
  },
  {
    "text": "so there's actually no need so this is kind of how they try to think about keeping the number instructions minimal",
    "start": "1853360",
    "end": "1860640"
  },
  {
    "text": "um you could also written it with the pseudo instructions to make it more clear what your",
    "start": "1861440",
    "end": "1866720"
  },
  {
    "text": "intentions are a little bit so",
    "start": "1866720",
    "end": "1872000"
  },
  {
    "text": "i just want to explain the when we went through this the first time i used the example of",
    "start": "1872000",
    "end": "1879840"
  },
  {
    "text": "um these non-immediate ones where using two registers as input if you're using add i then one of the arguments is not a",
    "start": "1879840",
    "end": "1886640"
  },
  {
    "text": "register it's an actual number which is encoded in with the instruction",
    "start": "1886640",
    "end": "1892559"
  },
  {
    "text": "and then uh we're turning the multiplex around to say that we want to get this this one",
    "start": "1892559",
    "end": "1897919"
  },
  {
    "text": "number in from the decoder actually and that's what's coming into the alu and the x0 comes from here but of course",
    "start": "1897919",
    "end": "1904480"
  },
  {
    "text": "this is always zero and then we get a result here",
    "start": "1904480",
    "end": "1909519"
  },
  {
    "text": "store word is a little bit different also if we look at the the right back step",
    "start": "1909519",
    "end": "1915120"
  },
  {
    "text": "so you have to imagine that now there's been a sort of immediate calculation we got in a result into",
    "start": "1915120",
    "end": "1921440"
  },
  {
    "text": "our multiplexer here or result register but rather than sending it back into a",
    "start": "1921440",
    "end": "1926640"
  },
  {
    "text": "register we're toggling the multiplexer and saying we want to use that on the address bus",
    "start": "1926640",
    "end": "1932080"
  },
  {
    "text": "so this 4 plus x0 is used to pick a memory cell here where",
    "start": "1932080",
    "end": "1938399"
  },
  {
    "text": "we're storing the x the x1 register gets stored into that memory location",
    "start": "1938399",
    "end": "1945600"
  },
  {
    "text": "so with this background we can talk a bit about micro operations which",
    "start": "1947440",
    "end": "1954399"
  },
  {
    "text": "it's kind of useful background information to kind of cover the thing that i think is most important with risk file which is",
    "start": "1954399",
    "end": "1960880"
  },
  {
    "text": "how it deals with compressed instructions and macro operations",
    "start": "1960880",
    "end": "1966080"
  },
  {
    "text": "so micro operation then you can imagine the architecture is changed a little bit",
    "start": "1966080",
    "end": "1972130"
  },
  {
    "text": "[Music] it's do one thing typically in one clock cycle",
    "start": "1972130",
    "end": "1978159"
  },
  {
    "text": "and typically have one instruction turns into multiple micro operations or just one and risk architecture will",
    "start": "1978159",
    "end": "1984320"
  },
  {
    "text": "turn typically to one micro operations on cisc hardware like",
    "start": "1984320",
    "end": "1990000"
  },
  {
    "text": "an x86 this can turn into many micro operations and an interesting thing despite the",
    "start": "1990000",
    "end": "1996480"
  },
  {
    "text": "fact that they're called micro they're actually not the instructions are not small actually quite",
    "start": "1996480",
    "end": "2002159"
  },
  {
    "text": "large in terms of bits it can be 100 bits or something one micro operation",
    "start": "2002159",
    "end": "2008240"
  },
  {
    "text": "so you can think of micro operations as sort of the interface no sorry the the part of the implementation they're specific to the",
    "start": "2008240",
    "end": "2015519"
  },
  {
    "text": "uh micro architecture so even though you have the same instructions supported for different",
    "start": "2015519",
    "end": "2021679"
  },
  {
    "text": "chips you can have different micro operations and you have",
    "start": "2021679",
    "end": "2027519"
  },
  {
    "text": "arm chips for instance with the same instruction set architecture that",
    "start": "2027519",
    "end": "2034720"
  },
  {
    "text": "uh don't use micro operations at all and then you have high end arm chips with the same",
    "start": "2034720",
    "end": "2040399"
  },
  {
    "text": "isa but which actually has micro operations internally",
    "start": "2040399",
    "end": "2046080"
  },
  {
    "text": "so what they actually do is normally these these control lines right you're you're toggling on these normally uh",
    "start": "2046080",
    "end": "2052000"
  },
  {
    "text": "when you're decoding an instruction you are",
    "start": "2052000",
    "end": "2057598"
  },
  {
    "text": "um you know figuring out which of these bits to to flip to to toggle on",
    "start": "2058839",
    "end": "2065919"
  },
  {
    "text": "and with micro operations you use a decoder to kind of can all these uh control",
    "start": "2065919",
    "end": "2073200"
  },
  {
    "text": "lines that you're toggling on so you know you have a one when you toggle it zero when you're not toggling and that's why it adds up to being all these number",
    "start": "2073200",
    "end": "2079919"
  },
  {
    "text": "of bits you know that you can end up with a 100 bits because there's so many different parts you're going to toggle",
    "start": "2079919",
    "end": "2085280"
  },
  {
    "text": "on and off inside the processor depending on how complex the micro architecture is",
    "start": "2085280",
    "end": "2092158"
  },
  {
    "text": "now it doesn't make very much sense with the architecture i just showed you at least for for risk to have micro",
    "start": "2094720",
    "end": "2100160"
  },
  {
    "text": "operations it does make sense for a cisc processor because it allows you to make a cisc act a bit like a risk processor",
    "start": "2100160",
    "end": "2106960"
  },
  {
    "text": "internally for things like pipelining but for this to make sense for a risk processor",
    "start": "2106960",
    "end": "2113839"
  },
  {
    "text": "you have to have a super scalar microprocessor and that means that you have multiple decoders that are running at",
    "start": "2113839",
    "end": "2120640"
  },
  {
    "text": "the same time that are decoding",
    "start": "2120640",
    "end": "2125359"
  },
  {
    "text": "several operations in parallel and this gets put in the",
    "start": "2127200",
    "end": "2132560"
  },
  {
    "text": "micro operations buffer and you're doing some kind of analysis where you're checking instructions that",
    "start": "2132560",
    "end": "2138160"
  },
  {
    "text": "come after each other are the results related to each other",
    "start": "2138160",
    "end": "2143359"
  },
  {
    "text": "if they're not so you have a multiply and an addition",
    "start": "2143359",
    "end": "2148560"
  },
  {
    "text": "then i can run the multiply instruction in parallel with the addition",
    "start": "2148560",
    "end": "2154880"
  },
  {
    "text": "and so i can get more than one instruction carried out each clock cycle",
    "start": "2155119",
    "end": "2160320"
  },
  {
    "text": "now how is this different from having multiple cores well you've had multiple cores you as a programmer have to see",
    "start": "2160320",
    "end": "2165920"
  },
  {
    "text": "okay you have to handle multiple threads right to get the extra performance with the superscalar microprocessor you",
    "start": "2165920",
    "end": "2172160"
  },
  {
    "text": "don't see multiple threads you just see one thread that's just running faster",
    "start": "2172160",
    "end": "2177599"
  },
  {
    "text": "and this is made even faster if you have what's called an out of order superscalar maker processor where",
    "start": "2177599",
    "end": "2185680"
  },
  {
    "text": "you can rearrange the instructions so that you can run them more easily in parallel",
    "start": "2185680",
    "end": "2192800"
  },
  {
    "text": "the problem that this requires a lot of extra silicon because you have to",
    "start": "2192800",
    "end": "2198320"
  },
  {
    "text": "arrange the instruction results back afterwards to make sure it's not in the wrong order",
    "start": "2198320",
    "end": "2204560"
  },
  {
    "text": "so here is the the key thing that i think is",
    "start": "2206079",
    "end": "2211520"
  },
  {
    "text": "interesting with risk five",
    "start": "2211520",
    "end": "2215480"
  },
  {
    "text": "compressed instructions and what we call macro up fusion is something that has been developed",
    "start": "2217920",
    "end": "2223520"
  },
  {
    "text": "over time and has been added to x86 processors over time",
    "start": "2223520",
    "end": "2229280"
  },
  {
    "text": "the benefit when designing risk 5 is that they knew about these things already",
    "start": "2229280",
    "end": "2234480"
  },
  {
    "text": "and can take that into account when designing the microprocessor",
    "start": "2234480",
    "end": "2240440"
  },
  {
    "text": "so if we if we take a step back and consider uh cisc processors like x86 complex instruction",
    "start": "2242000",
    "end": "2250079"
  },
  {
    "text": "set computers that have variable length instructions um",
    "start": "2250079",
    "end": "2256480"
  },
  {
    "text": "they started using micro operations",
    "start": "2256480",
    "end": "2260800"
  },
  {
    "text": "um as a way to deal with the fact that they were getting out competed in the",
    "start": "2261599",
    "end": "2267520"
  },
  {
    "text": "90s by risk processors and by using micro-ops",
    "start": "2267520",
    "end": "2273280"
  },
  {
    "text": "they can kind of simulate a risk processor internally because they they cut up their complex instructions into",
    "start": "2273280",
    "end": "2279599"
  },
  {
    "text": "all these simple risk-like instructions they take that can then easily be put into a",
    "start": "2279599",
    "end": "2286800"
  },
  {
    "text": "pipeline which is really only possible if you're dealing with instructions that have kind of",
    "start": "2286800",
    "end": "2292320"
  },
  {
    "text": "the same number of clock cycles well there are exceptions to to",
    "start": "2292320",
    "end": "2298560"
  },
  {
    "text": "everything but in general most of your instructions should be similar or clock cycles for this to work well",
    "start": "2298560",
    "end": "2305440"
  },
  {
    "text": "so you can see you get well variable number of instructions coming out and then you get some number",
    "start": "2307119",
    "end": "2312560"
  },
  {
    "text": "of micro operations coming out so",
    "start": "2312560",
    "end": "2318240"
  },
  {
    "text": "this meant that for a while cisc actually got the upper hand",
    "start": "2318240",
    "end": "2323280"
  },
  {
    "text": "on risk processor using micro-ops because variable length instructions enable them",
    "start": "2323280",
    "end": "2329920"
  },
  {
    "text": "to have programs that took less space in memory",
    "start": "2329920",
    "end": "2335680"
  },
  {
    "text": "so this means that your cache you can utilize cache more efficiently gives you better performance",
    "start": "2336160",
    "end": "2343040"
  },
  {
    "text": "so what's the risk counter move to this well that is compressed instructions so",
    "start": "2343040",
    "end": "2348240"
  },
  {
    "text": "that means that you have two instructions compressed into a 32-bit word",
    "start": "2348240",
    "end": "2356640"
  },
  {
    "text": "so if you know the arm architecture there is two compressed instruction sets",
    "start": "2357119",
    "end": "2363119"
  },
  {
    "text": "thumb and thumb two um this had to be bolted onto arm",
    "start": "2363119",
    "end": "2368160"
  },
  {
    "text": "after the fact so arm actually has to do a mode switch and have to have separate decoders it treats compressed",
    "start": "2368160",
    "end": "2374560"
  },
  {
    "text": "instructions as a sort of separate instruction set architecture um with risk five you have the benefits",
    "start": "2374560",
    "end": "2381359"
  },
  {
    "text": "that this could be designed in from the start so the the format and the instructions",
    "start": "2381359",
    "end": "2387680"
  },
  {
    "text": "and so on has taken that into consideration that they should support compressed instructions it's just an",
    "start": "2387680",
    "end": "2392960"
  },
  {
    "text": "extension if you have that extension you can support it and it's actually very cheap to implement it's only 400 logical",
    "start": "2392960",
    "end": "2399520"
  },
  {
    "text": "gates like ands or nand and so on gates that you need to implement compressed",
    "start": "2399520",
    "end": "2404560"
  },
  {
    "text": "instructions and it's not like a sip operation this is the decompression is very fast",
    "start": "2404560",
    "end": "2413119"
  },
  {
    "text": "but of course it's not it's not magic you can't take every possible instruction you have and compress them",
    "start": "2414880",
    "end": "2422640"
  },
  {
    "text": "so instead of how it works is you take the most commonly used instructions that most affect your performance",
    "start": "2422640",
    "end": "2428960"
  },
  {
    "text": "and you have compressed versions of them but only if you have two operands",
    "start": "2428960",
    "end": "2434960"
  },
  {
    "text": "why can't you have why can't you have three operands when uh you have a 16-bit instruction",
    "start": "2434960",
    "end": "2443119"
  },
  {
    "text": "can you think about that so with three operands because there's five",
    "start": "2443119",
    "end": "2449839"
  },
  {
    "text": "bits per operand you would consume 15 bits just to specify the operands",
    "start": "2449839",
    "end": "2456160"
  },
  {
    "text": "and you only have 16 bits so that would leave you one bit to say what operation you're doing so that's not going to be enough",
    "start": "2456160",
    "end": "2462480"
  },
  {
    "text": "here's something that seems a bit counterintuitive and that is macro operation fusion",
    "start": "2464480",
    "end": "2472240"
  },
  {
    "text": "this is sort of the opposite of what microops is about you're taking in uh fairly simple instructions and you're",
    "start": "2472319",
    "end": "2479040"
  },
  {
    "text": "getting more complex ones out so it's kind of like taking risk instructions in and you're getting cis constructions out",
    "start": "2479040",
    "end": "2484720"
  },
  {
    "text": "how does that make any sense why do you want to do that well it's actually intel that discover this that",
    "start": "2484720",
    "end": "2491760"
  },
  {
    "text": "some of the instructions are just so simple that they're just kind of wasting resources that you can actually see that",
    "start": "2491760",
    "end": "2498960"
  },
  {
    "text": "is actually a possibility to encode more functionality within one micro operation",
    "start": "2498960",
    "end": "2505440"
  },
  {
    "text": "so the idea with micro up fusion is that you take instructions that are just too",
    "start": "2505440",
    "end": "2510480"
  },
  {
    "text": "simple and turn them into instructions that are more complex but not so complex",
    "start": "2510480",
    "end": "2515520"
  },
  {
    "text": "that they are like a cyst construction so the benefit of that is of course what",
    "start": "2515520",
    "end": "2522720"
  },
  {
    "text": "the size performance is you know how many micro operations that you do so by having fewer micro operations",
    "start": "2522720",
    "end": "2529119"
  },
  {
    "text": "uh you can get better performance so yeah to clarify these macro operations they do get",
    "start": "2529119",
    "end": "2535920"
  },
  {
    "text": "turned into micro operations later just to show you here so this is what i think is sort of the risk 5",
    "start": "2535920",
    "end": "2543119"
  },
  {
    "text": "genius so instead of having all these complex instructions supported",
    "start": "2543119",
    "end": "2548640"
  },
  {
    "text": "you can just put together two simple instructions in any kind of combination and those two",
    "start": "2548640",
    "end": "2554079"
  },
  {
    "text": "simple instructions are kind of like um a complex instruction so you have two",
    "start": "2554079",
    "end": "2560800"
  },
  {
    "text": "compressed uh so four instructions here that are just compressed it looks like there's three instructions coming in",
    "start": "2560800",
    "end": "2566400"
  },
  {
    "text": "they get decompressed into five instructions and then you do macro up fusion and you get three macro",
    "start": "2566400",
    "end": "2573760"
  },
  {
    "text": "operations and these micro these macro operations can then be decoded and turned into",
    "start": "2573760",
    "end": "2579599"
  },
  {
    "text": "micro operations so the end effect here is for you're just",
    "start": "2579599",
    "end": "2585200"
  },
  {
    "text": "in terms of memory usage in the cache you're only paying as if it was three instructions and in terms of execution",
    "start": "2585200",
    "end": "2591760"
  },
  {
    "text": "you're only paying as if it was three instructions to execute even if it's five that went in",
    "start": "2591760",
    "end": "2598960"
  },
  {
    "text": "so to give a concrete example of how this works",
    "start": "2602720",
    "end": "2607839"
  },
  {
    "text": "um here's a",
    "start": "2607839",
    "end": "2612880"
  },
  {
    "text": "[Music] some c code very simple thing",
    "start": "2612880",
    "end": "2618079"
  },
  {
    "text": "get index you're getting an element at index i in an array",
    "start": "2618079",
    "end": "2624400"
  },
  {
    "text": "and this is used often as an example of why you should have complex addressing modes",
    "start": "2624400",
    "end": "2631519"
  },
  {
    "text": "which is kind of used as a criticism typically against risk five because they don't have that",
    "start": "2631920",
    "end": "2637680"
  },
  {
    "text": "so if you want to perform this with intel um x86 the code would look something like",
    "start": "2637680",
    "end": "2643520"
  },
  {
    "text": "this i'm not going to cover that one i'll i'll talk more about the r one instead so an arm",
    "start": "2643520",
    "end": "2650480"
  },
  {
    "text": "arm is not sort of as risk as something like risk five arm has instructions that",
    "start": "2651520",
    "end": "2657040"
  },
  {
    "text": "look a bit risk-like and one example is kind of addressing modes this is ldr's load",
    "start": "2657040",
    "end": "2663839"
  },
  {
    "text": "register and it takes all this to compute an address in memory",
    "start": "2663839",
    "end": "2670000"
  },
  {
    "text": "to load you can see an explanation of it here so lsl is logical shift left so you're",
    "start": "2670000",
    "end": "2676480"
  },
  {
    "text": "shifting two bits to the left so you're the same as multiply by four and why is that well it's because",
    "start": "2676480",
    "end": "2683440"
  },
  {
    "text": "r1 that is the second argument this one r0 that is the first argument",
    "start": "2683440",
    "end": "2690400"
  },
  {
    "text": "so because this is an integer integers are in 4 byte boundaries so that's why you're multiplying with a 4.",
    "start": "2690400",
    "end": "2698079"
  },
  {
    "text": "so you're you're taking the the offset for the index and you're adding that to the base address of the array and then you get",
    "start": "2698079",
    "end": "2704960"
  },
  {
    "text": "and then you're looking that up in memory and storing r0 r0 is where you return values for a function",
    "start": "2704960",
    "end": "2712800"
  },
  {
    "text": "and then find your bx is branch and link and then the lr is the link register the register that stores",
    "start": "2712800",
    "end": "2718319"
  },
  {
    "text": "the return address now we can compare this with risk five",
    "start": "2718319",
    "end": "2723680"
  },
  {
    "text": "this doesn't look so good for risk five it's twice as many instructions because you only have these very simple",
    "start": "2723680",
    "end": "2728720"
  },
  {
    "text": "instructions so you're going to take twice the memory it's going to uh twice the sort of the",
    "start": "2728720",
    "end": "2734880"
  },
  {
    "text": "time to execute in theory so the first thing we're going to do",
    "start": "2734880",
    "end": "2740640"
  },
  {
    "text": "here is shift left logical immediate that's this operation shifts the a1",
    "start": "2740640",
    "end": "2746800"
  },
  {
    "text": "register so the a1 if you remember that's the second argument of function a0 is the",
    "start": "2746800",
    "end": "2752640"
  },
  {
    "text": "first argument so that this is the the i we're multiplying that by four",
    "start": "2752640",
    "end": "2758480"
  },
  {
    "text": "then we're adding that to um the the array pointer address",
    "start": "2758560",
    "end": "2766000"
  },
  {
    "text": "then when we have this new address we're using that with a load operation load word",
    "start": "2766000",
    "end": "2771440"
  },
  {
    "text": "where we're using that as input and then finally we're returning red is actually a",
    "start": "2771440",
    "end": "2777440"
  },
  {
    "text": "pseudo instruction so it's actually short for this jump and link register",
    "start": "2777440",
    "end": "2783440"
  },
  {
    "text": "it actually does two operations the first is a no operation because it goes to x0 so only care about the second part",
    "start": "2783440",
    "end": "2789520"
  },
  {
    "text": "which is to take the the ra register plus the offset there 0 and put that into the",
    "start": "2789520",
    "end": "2798000"
  },
  {
    "text": "program counter and that has the effect of jumping in your program",
    "start": "2798000",
    "end": "2803560"
  },
  {
    "text": "but here is where the solution for risk five",
    "start": "2810319",
    "end": "2817359"
  },
  {
    "text": "because let's see it now what you'll notice here is that they use",
    "start": "2817359",
    "end": "2823200"
  },
  {
    "text": "two of the arguments are the same or two of the operands are the same that gives an opportunity to compress",
    "start": "2823200",
    "end": "2828480"
  },
  {
    "text": "these instructions and that's what you can do now you wouldn't have to put this this c dot",
    "start": "2828480",
    "end": "2834000"
  },
  {
    "text": "is typically just written as to indicate this is a compressed instruction when you're actually writing assembly you",
    "start": "2834000",
    "end": "2839119"
  },
  {
    "text": "don't have to do this the assembler will able to figure that out for you but that means that you can compress all",
    "start": "2839119",
    "end": "2845440"
  },
  {
    "text": "of these instructions because you really only need two operands",
    "start": "2845440",
    "end": "2851599"
  },
  {
    "text": "so you can think about it the operations are happening as you can see described here in the comments",
    "start": "2851680",
    "end": "2856960"
  },
  {
    "text": "um so this means that it's uh",
    "start": "2856960",
    "end": "2862160"
  },
  {
    "text": "the the amount of memory it's going to take is going to be exactly the same as for arm and intel",
    "start": "2862160",
    "end": "2868000"
  },
  {
    "text": "but it's still for instructions to execute so how do we deal with that",
    "start": "2868000",
    "end": "2874319"
  },
  {
    "text": "or we can do macro fusion so with macrofusion you have the rule for this to work the destination",
    "start": "2874319",
    "end": "2880960"
  },
  {
    "text": "register of two consecutive instructions",
    "start": "2880960",
    "end": "2886000"
  },
  {
    "text": "these two they have to be the same and so that is possible with add and load word",
    "start": "2886000",
    "end": "2894640"
  },
  {
    "text": "so we can fuse those together now adds lw that's just a made up name it does",
    "start": "2894640",
    "end": "2899760"
  },
  {
    "text": "there's no instruction called that it's just to represent a fused a macro",
    "start": "2899760",
    "end": "2904800"
  },
  {
    "text": "operation so you can see now that that operation does",
    "start": "2904800",
    "end": "2910559"
  },
  {
    "text": "all of these things and at this point we we now have only three micro operations",
    "start": "2910559",
    "end": "2918240"
  },
  {
    "text": "inside the architecture that we actually have to um execute",
    "start": "2918240",
    "end": "2924240"
  },
  {
    "text": "uh so that's only one more than on x86 and",
    "start": "2924240",
    "end": "2929359"
  },
  {
    "text": "arm but can we do better um we can from a",
    "start": "2929359",
    "end": "2936160"
  },
  {
    "text": "from the point of view of micro operations so if we rearrange this and we're using um the t0 register it's not the t0 is",
    "start": "2936160",
    "end": "2944480"
  },
  {
    "text": "important but i just rearranged it a bit so that we have three instructions that are using the same destination",
    "start": "2944480",
    "end": "2951200"
  },
  {
    "text": "address and that allows us to do a macro of",
    "start": "2951200",
    "end": "2957440"
  },
  {
    "text": "fusion of three of three instructions the downside of doing this approach is",
    "start": "2957440",
    "end": "2963200"
  },
  {
    "text": "that you can see that we only have those three instructions which we can use to compress form because now we're having a different",
    "start": "2963200",
    "end": "2969680"
  },
  {
    "text": "operand for all three so this gives us",
    "start": "2969680",
    "end": "2975760"
  },
  {
    "text": "again i'm just made up a name um slli add lw as a the macro",
    "start": "2975760",
    "end": "2982640"
  },
  {
    "text": "the fused macro operation but it's interesting if you compare that",
    "start": "2982640",
    "end": "2987920"
  },
  {
    "text": "to arm it's essentially doing exactly the same as this arm ldr at this point",
    "start": "2987920",
    "end": "2994319"
  },
  {
    "text": "it's doing the um multiplying to get the the index base offset it's adding the um",
    "start": "2994319",
    "end": "3001520"
  },
  {
    "text": "the base address and doing the memory lookup all in one instruction",
    "start": "3001520",
    "end": "3007200"
  },
  {
    "text": "so with this we have the same number of micro ops but of course we require 10",
    "start": "3007200",
    "end": "3014000"
  },
  {
    "text": "bytes rather than 8. so that is very close",
    "start": "3014000",
    "end": "3020880"
  },
  {
    "text": "but of course this is just one example what if you're looking at a more more",
    "start": "3021839",
    "end": "3027200"
  },
  {
    "text": "realistic programs where this is hap where there's a lot of different instructions like this",
    "start": "3027200",
    "end": "3032559"
  },
  {
    "text": "what is the end result can actually risk 5 match arm and x86 in terms of a density of",
    "start": "3032559",
    "end": "3041119"
  },
  {
    "text": "instructions and the numeral instructions that have to be executed",
    "start": "3041119",
    "end": "3046400"
  },
  {
    "text": "and there are some guys that actually investigated this there's a paper the title is written down here it's",
    "start": "3046400",
    "end": "3051839"
  },
  {
    "text": "belong the renewed case for reduced instruction set computer avoiding",
    "start": "3051839",
    "end": "3057280"
  },
  {
    "text": "isa bloat with macro fusion for risk five",
    "start": "3057280",
    "end": "3062559"
  },
  {
    "text": "so what this has done is it's normalized on the number of instructions for",
    "start": "3063920",
    "end": "3069640"
  },
  {
    "text": "x8664 that has to be computed for all these different programs that you see underneath here",
    "start": "3069640",
    "end": "3078000"
  },
  {
    "text": "and then they compare it with the number of instructions for other architectures and with the number of macro ops",
    "start": "3078000",
    "end": "3085599"
  },
  {
    "text": "for when using compressed instructions on macro fusion for risk five and the number of micro ops in x60",
    "start": "3085599",
    "end": "3092160"
  },
  {
    "text": "x 86",
    "start": "3092160",
    "end": "3097800"
  },
  {
    "text": "so the reason you can find the micro operations is actually that um x86 processors have these micro up",
    "start": "3098240",
    "end": "3105280"
  },
  {
    "text": "counters internally so you can actually uh count that",
    "start": "3105280",
    "end": "3110960"
  },
  {
    "text": "so this is not a totally great comparison because um",
    "start": "3110960",
    "end": "3117119"
  },
  {
    "text": "the arm numbers right are not the actual micro operations but you can already see here that if you",
    "start": "3117119",
    "end": "3123280"
  },
  {
    "text": "compare the the purple and the yellow that's um",
    "start": "3123280",
    "end": "3128480"
  },
  {
    "text": "that are most comparable that risk five is actually looking pretty good here",
    "start": "3128480",
    "end": "3133680"
  },
  {
    "text": "and what about the size of the programs you can see here with compressed instructions risk is",
    "start": "3135680",
    "end": "3143040"
  },
  {
    "text": "in most cases actually be eating the other architectures it's spending less memory despite having",
    "start": "3143040",
    "end": "3148400"
  },
  {
    "text": "so much simpler instruction sets than the others despite the others having a lot more complex instructions they can",
    "start": "3148400",
    "end": "3154640"
  },
  {
    "text": "do more they still end up using more space",
    "start": "3154640",
    "end": "3159599"
  },
  {
    "text": "and to be able to make a more accurate comparison",
    "start": "3160720",
    "end": "3166720"
  },
  {
    "text": "um what the people that wrote this paper here did was they",
    "start": "3166720",
    "end": "3173599"
  },
  {
    "text": "um they looked they analyzed they use tools to run over the",
    "start": "3173599",
    "end": "3179040"
  },
  {
    "text": "arm code and they made some heuristics or guesses about the number of micro operations",
    "start": "3179040",
    "end": "3186000"
  },
  {
    "text": "that each instruction would uh turn into and that's because there are kind of rules of what you minimum",
    "start": "3186000",
    "end": "3192319"
  },
  {
    "text": "will have to do if you're doing an operation that causes rights to multiple registers",
    "start": "3192319",
    "end": "3197839"
  },
  {
    "text": "it's going to have to be a micro operation for every register right",
    "start": "3197839",
    "end": "3205040"
  },
  {
    "text": "so by using that as a kind of heuristic they compare them that you can see here",
    "start": "3205040",
    "end": "3210720"
  },
  {
    "text": "in the graphs that are highlighted that risk actually narrowly has fewer",
    "start": "3210720",
    "end": "3218319"
  },
  {
    "text": "micro operations that it has to perform than the competitors",
    "start": "3218319",
    "end": "3224160"
  },
  {
    "text": "a little bit caveat here is that um",
    "start": "3224160",
    "end": "3229440"
  },
  {
    "text": "i'm not sure whether they have taken into account the fact that you can do macro up fusion",
    "start": "3229920",
    "end": "3236319"
  },
  {
    "text": "on x86 and possibly an arm i'm not quite sure but this looks very promising",
    "start": "3236319",
    "end": "3243599"
  },
  {
    "text": "for risk five so so in total um",
    "start": "3243599",
    "end": "3251359"
  },
  {
    "text": "what i think is great about this is that you can see you can have these sort of you can have a",
    "start": "3251359",
    "end": "3258400"
  },
  {
    "text": "cake and eat it too you can have a simple instruction set that you can easily learn but you're not actually",
    "start": "3258400",
    "end": "3265280"
  },
  {
    "text": "sacrificing performance to do that and this has only been possible because they",
    "start": "3265280",
    "end": "3270640"
  },
  {
    "text": "could design this knowing that you can have compressed instructions and macro fusion",
    "start": "3270640",
    "end": "3278040"
  },
  {
    "text": "okay so thank you let's see what is the time like do we have time for some",
    "start": "3279200",
    "end": "3285760"
  },
  {
    "text": "questions",
    "start": "3285760",
    "end": "3288160"
  },
  {
    "text": "yes",
    "start": "3291359",
    "end": "3293838"
  },
  {
    "text": "is",
    "start": "3307040",
    "end": "3310040"
  },
  {
    "text": "um",
    "start": "3323359",
    "end": "3325680"
  },
  {
    "text": "yeah well um i mean they've always been able to do that right um",
    "start": "3330400",
    "end": "3335520"
  },
  {
    "text": "but intel has found this to be useful they were the ones who started doing it",
    "start": "3335520",
    "end": "3340559"
  },
  {
    "text": "um",
    "start": "3340559",
    "end": "3343559"
  },
  {
    "text": "um yes but i mean in principle they could have they could have added instructions that com that are similar to um",
    "start": "3349280",
    "end": "3357200"
  },
  {
    "text": "uh to these fusion operations um i think the",
    "start": "3357200",
    "end": "3362640"
  },
  {
    "text": "the downside with uh adding lots of ins because you can imagine this you create a an explosion",
    "start": "3362640",
    "end": "3368720"
  },
  {
    "text": "of permutations if you know every two or three instructions that you can put together in different ways",
    "start": "3368720",
    "end": "3375520"
  },
  {
    "text": "that's going to require quite a lot of different instructions to",
    "start": "3375520",
    "end": "3380880"
  },
  {
    "text": "the code so you're you're spending a lot of your encoding space and this is one of the things that",
    "start": "3380880",
    "end": "3386000"
  },
  {
    "text": "risk five designers consider it important is not to paint yourself into a corner by",
    "start": "3386000",
    "end": "3393040"
  },
  {
    "text": "by using up all your encoding space that's what arm did for instance uh originally with their 32-bit",
    "start": "3393040",
    "end": "3398640"
  },
  {
    "text": "architecture so they couldn't add um compressed instructions after the fact",
    "start": "3398640",
    "end": "3403839"
  },
  {
    "text": "that they spent their encoding space and they want this to be a long-lived",
    "start": "3403839",
    "end": "3408960"
  },
  {
    "text": "instruction set architecture what is going to be efficient in 10 years to do we don't know maybe macro",
    "start": "3408960",
    "end": "3415760"
  },
  {
    "text": "fusion is replaced with something else we don't know so if we kind of",
    "start": "3415760",
    "end": "3421760"
  },
  {
    "text": "preemptively try to be smart about this and add lots of instructions uh we might have add instructions that",
    "start": "3421760",
    "end": "3427680"
  },
  {
    "text": "are not going to have value in the future so that's why they're they're trying to do as much as possible with",
    "start": "3427680",
    "end": "3433040"
  },
  {
    "text": "this few instructions to be future proof so for an architecture that's mainly",
    "start": "3433040",
    "end": "3439200"
  },
  {
    "text": "meant for industry like x86 and arm i can agree that's",
    "start": "3439200",
    "end": "3445119"
  },
  {
    "text": "what you're suggesting is probably would make sense but it might not make sense for something",
    "start": "3445119",
    "end": "3450720"
  },
  {
    "text": "that is meant to be more academic and longer term existence",
    "start": "3450720",
    "end": "3456400"
  },
  {
    "text": "yeah okay",
    "start": "3456400",
    "end": "3460920"
  },
  {
    "text": "yeah so you can add the extra instructions and that can just be with the whole",
    "start": "3476000",
    "end": "3481119"
  },
  {
    "text": "processor so",
    "start": "3481119",
    "end": "3485319"
  },
  {
    "text": "uh yeah well if you take for instance um",
    "start": "3489359",
    "end": "3495440"
  },
  {
    "text": "if you take the vector instructions extension that adds a bunch of special",
    "start": "3495760",
    "end": "3501440"
  },
  {
    "text": "vector registers and then there's regis there's instructions for moving things between the vector instructions",
    "start": "3501440",
    "end": "3507680"
  },
  {
    "text": "and the general purpose registers and possibly you can have",
    "start": "3507680",
    "end": "3512799"
  },
  {
    "text": "i mean i know that on arm for instance that the lower part of the vector registers",
    "start": "3512799",
    "end": "3518319"
  },
  {
    "text": "are the same as your um floating point registers you could possibly do something like",
    "start": "3518319",
    "end": "3523359"
  },
  {
    "text": "that um so this is actually part of the benefit that people",
    "start": "3523359",
    "end": "3528559"
  },
  {
    "text": "see i think with this is that you can kind of merge the accelerator",
    "start": "3528559",
    "end": "3533839"
  },
  {
    "text": "part with a more sort of general purpose",
    "start": "3533839",
    "end": "3538480"
  },
  {
    "text": "kind of cpu um yeah so that that's that's they're quite",
    "start": "3540400",
    "end": "3546880"
  },
  {
    "text": "flexible i mean if you look at the um this minion and maxine",
    "start": "3546880",
    "end": "3553839"
  },
  {
    "text": "chips you have the maxims which are quite general purpose but those minion ones right they have just",
    "start": "3553839",
    "end": "3559040"
  },
  {
    "text": "um you know the base the base instruction set implemented and the rest are kind of these",
    "start": "3559040",
    "end": "3565520"
  },
  {
    "text": "uh vector extensions and that's all in one chip so it's a very it isn't",
    "start": "3565520",
    "end": "3572000"
  },
  {
    "text": "even though it has these risk processors it's not really a general purpose cpu those minions they're special purpose chips",
    "start": "3572000",
    "end": "3578720"
  },
  {
    "text": "but when um esperanto was designing this they they started those miniatures where",
    "start": "3578720",
    "end": "3583839"
  },
  {
    "text": "originally were just special purpose instructions",
    "start": "3583839",
    "end": "3589200"
  },
  {
    "text": "but they found that actually creating you have to do these kind of general purpose things even when you're doing specialized hardware",
    "start": "3589200",
    "end": "3595280"
  },
  {
    "text": "and they found that it was actually quite a lot of work to get that right and you",
    "start": "3595280",
    "end": "3600319"
  },
  {
    "text": "didn't have the tools and so on and so they they tested risk five and they saw hey they've done a lot of the work for",
    "start": "3600319",
    "end": "3605440"
  },
  {
    "text": "us we're just gonna build on that so i think that's probably what many hardware makers are gonna",
    "start": "3605440",
    "end": "3611599"
  },
  {
    "text": "increasingly see any uh other questions",
    "start": "3611599",
    "end": "3619359"
  },
  {
    "text": "okay well thank you [Applause]",
    "start": "3622480",
    "end": "3630849"
  },
  {
    "text": "you",
    "start": "3634799",
    "end": "3636880"
  }
]