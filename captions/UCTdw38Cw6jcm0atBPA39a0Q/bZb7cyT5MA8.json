[
  {
    "text": "is it yes okay thank you hi Oslo hello world",
    "start": "0",
    "end": "5880"
  },
  {
    "text": "welcome and welcome to the.net 7 API diff I am super excited to be here uh",
    "start": "5880",
    "end": "12960"
  },
  {
    "text": "being back in Norway being back in Oslo at the NDC and in this talk in the next 60 Minutes",
    "start": "12960",
    "end": "19560"
  },
  {
    "text": "I would like to show you what new apis that is all the new types and all the",
    "start": "19560",
    "end": "26400"
  },
  {
    "text": "new members that we get when we upgrade our Target framework from.net 6. 2.net",
    "start": "26400",
    "end": "34260"
  },
  {
    "text": "7. now there is a lot of new apis in in",
    "start": "34260",
    "end": "39719"
  },
  {
    "text": "the in the BCL The Base Class library that comes in box with with.net",
    "start": "39719",
    "end": "45660"
  },
  {
    "text": "we won't be able to go through all of them I hope that I've selected a slice",
    "start": "45660",
    "end": "50940"
  },
  {
    "text": "that fits for for all of you I'm using the word slice with intent because there",
    "start": "50940",
    "end": "57120"
  },
  {
    "text": "will be spans and I am not going through other",
    "start": "57120",
    "end": "62940"
  },
  {
    "text": "libraries or and and programming models such as espn.com or Entity framework",
    "start": "62940",
    "end": "68760"
  },
  {
    "text": "they all have also a full year of new changes but since the time we only have",
    "start": "68760",
    "end": "75119"
  },
  {
    "text": "so much time I will be focusing entirely on the BCL that you can use anything anywhere with the targets.net 7.",
    "start": "75119",
    "end": "84439"
  },
  {
    "text": "my name is Stefan pertz I'm from Austria I am a chat Queen's Community",
    "start": "89280",
    "end": "95640"
  },
  {
    "text": "contributor in Microsoft MVP and the co-organizer of the.net Meetup in Vienna",
    "start": "95640",
    "end": "102060"
  },
  {
    "text": "I'm also semi-regularly streaming on on Twitch and YouTube and I'm putting my my",
    "start": "102060",
    "end": "108659"
  },
  {
    "text": "social stem I can give at the end I have a slide for that if you if you wanna if you have any follow-up questions that",
    "start": "108659",
    "end": "114479"
  },
  {
    "text": "I'm not able to answer today",
    "start": "114479",
    "end": "118219"
  },
  {
    "text": "all right dot net 7. where do we start I",
    "start": "120840",
    "end": "126719"
  },
  {
    "text": "need to go cheating yes",
    "start": "126719",
    "end": "129680"
  },
  {
    "text": "who has visited Philip's talk about the new c-sharp eight nine and or is it 910",
    "start": "141440",
    "end": "148680"
  },
  {
    "text": "and the 11 features wow wow a lot of hands I see a lot of c-sharp Internet developers here",
    "start": "148680",
    "end": "155480"
  },
  {
    "text": "and um I think he covered briefly static abstract members and there is this thing",
    "start": "155480",
    "end": "162360"
  },
  {
    "text": "called generic math it has been previewed in.net6 with c-sharp 10 you had to you could you were able to turn",
    "start": "162360",
    "end": "168540"
  },
  {
    "text": "it on with a preach with a preview flag um that is if you happen to",
    "start": "168540",
    "end": "175519"
  },
  {
    "text": "say enable preview features but now it's fully released and",
    "start": "176220",
    "end": "181560"
  },
  {
    "text": "supported in with C sharp 11 and Dot net 7. what generic math is is a term it's not",
    "start": "181560",
    "end": "189120"
  },
  {
    "text": "really a feature per se It's a combination of features that then the PCL uses to to produce generic math so",
    "start": "189120",
    "end": "196800"
  },
  {
    "text": "what with C sharp 11 we can have static virtual members on interfaces and static",
    "start": "196800",
    "end": "203340"
  },
  {
    "text": "abstract members on interfaces we can also Define our own checked",
    "start": "203340",
    "end": "209640"
  },
  {
    "text": "operators previously you have a default everything is unchecked unless you you set the you",
    "start": "209640",
    "end": "217860"
  },
  {
    "text": "make the operations in a chat scope was set on your project level",
    "start": "217860",
    "end": "223220"
  },
  {
    "text": "the uh where is it",
    "start": "223860",
    "end": "228900"
  },
  {
    "text": "overflow underflow there it is check for overflow underflow",
    "start": "228900",
    "end": "234599"
  },
  {
    "text": "then per default in the entire project unless you have an unchecked scope every operation is checked that is if it",
    "start": "234599",
    "end": "240659"
  },
  {
    "text": "overflows it will throw an arithmetic overflow exception and now we can with",
    "start": "240659",
    "end": "248239"
  },
  {
    "text": "checked operators we can Define both unchecked and checked operators",
    "start": "249560",
    "end": "254640"
  },
  {
    "text": "depending on the context the unsigned shift operator is new and",
    "start": "254640",
    "end": "259680"
  },
  {
    "text": "also shift shift operators in general have been relaxed so what does this all mean",
    "start": "259680",
    "end": "266160"
  },
  {
    "text": "we can write an interface is the font size good enough for the people in the back as",
    "start": "266160",
    "end": "272160"
  },
  {
    "text": "well thumbs up thank you very much so I can Define my own interface I call",
    "start": "272160",
    "end": "277560"
  },
  {
    "text": "it the I my number interface and then I constraint the generic type",
    "start": "277560",
    "end": "283139"
  },
  {
    "text": "basically to itself this is called the curiously recursive pattern",
    "start": "283139",
    "end": "291180"
  },
  {
    "text": "and now I can Define some static members on it so I have some static abstract",
    "start": "291180",
    "end": "296580"
  },
  {
    "text": "members I Define 0 1 and -1 can also have static operators so they find the",
    "start": "296580",
    "end": "303600"
  },
  {
    "text": "plus Operator by default that's the unchecked operator is abstract and they also Define the checked operator here's",
    "start": "303600",
    "end": "311040"
  },
  {
    "text": "the new keyword got old keyword but now repurposed but a virtual member",
    "start": "311040",
    "end": "316860"
  },
  {
    "text": "so now if I have a type in that case a struct which implements this interface",
    "start": "316860",
    "end": "323280"
  },
  {
    "text": "we need to implement all of the abstracts so if I were to remove to",
    "start": "323280",
    "end": "328800"
  },
  {
    "text": "comment out the implementation of this of the minus one now we would get on compiler",
    "start": "328800",
    "end": "334979"
  },
  {
    "text": "that says -1 is not implemented",
    "start": "334979",
    "end": "340080"
  },
  {
    "text": "but with virtuals since we Supply a default implementation here it's optional to implement them",
    "start": "340080",
    "end": "348000"
  },
  {
    "text": "we also implement the both the left and the white shift operator these walls have been relaxed",
    "start": "348000",
    "end": "354960"
  },
  {
    "text": "previously the amount the shift amount had always",
    "start": "354960",
    "end": "361100"
  },
  {
    "text": "had to be of type integer or anything that is implicitly convertible to an",
    "start": "361199",
    "end": "366240"
  },
  {
    "text": "integer now you can have any type and also declaring the unsite distant",
    "start": "366240",
    "end": "373919"
  },
  {
    "text": "new wedge shift unsigned unsigned white shift operator and so what we can the big benefit now",
    "start": "373919",
    "end": "382860"
  },
  {
    "text": "with having those static members on this interface is that I can this is where",
    "start": "382860",
    "end": "388500"
  },
  {
    "text": "the name generic math is coming from I can write algorithms that are not",
    "start": "388500",
    "end": "394440"
  },
  {
    "text": "depending on a specific type such as int or double but on this interface and then any type",
    "start": "394440",
    "end": "400740"
  },
  {
    "text": "which implements this interface could run this algorithm so I'm having here a sum algorithm",
    "start": "400740",
    "end": "408240"
  },
  {
    "text": "the thing is what doesn't work now anymore so the input is a read-only span and",
    "start": "408240",
    "end": "415740"
  },
  {
    "text": "again we see this we see this pattern that the generic type is basically constrained to this I number",
    "start": "415740",
    "end": "422039"
  },
  {
    "text": "and where do I start I want to sum up all the numbers in this span but I need to start at 0 but 0 is an integer but we",
    "start": "422039",
    "end": "429539"
  },
  {
    "text": "don't know if this whoever implements this interface is actually having an",
    "start": "429539",
    "end": "434759"
  },
  {
    "text": "implicit conversion from interface so this is why we declared the zero here",
    "start": "434759",
    "end": "441660"
  },
  {
    "text": "or in the interface we know any type that implements this supplies a zero so",
    "start": "441660",
    "end": "447720"
  },
  {
    "text": "this is how we can start so on this interface this is basically this interface type that we have",
    "start": "447720",
    "end": "453479"
  },
  {
    "text": "constrained to we say hey I want to start with a zero and then sum up all the values we are leaving here in a oops",
    "start": "453479",
    "end": "461880"
  },
  {
    "text": "sorry we'll be we're being here in an in a checked context that means that we",
    "start": "461880",
    "end": "467639"
  },
  {
    "text": "actually invoke the check to operate sorry the checked",
    "start": "467639",
    "end": "472680"
  },
  {
    "text": "operator of course here if you're wearing an unchecked context it was the unchecked operator",
    "start": "472680",
    "end": "477780"
  },
  {
    "text": "and now we can have our algorithm I'm allocating three of my numbers on the",
    "start": "477780",
    "end": "484080"
  },
  {
    "text": "stack and using now this generic algorithm to sum them up since we're in a check context and",
    "start": "484080",
    "end": "490139"
  },
  {
    "text": "actually this is my number it's backed by an by assigned byte that is for minus 128",
    "start": "490139",
    "end": "496919"
  },
  {
    "text": "to plus 127. so if I were to overflow this",
    "start": "496919",
    "end": "502879"
  },
  {
    "text": "we will get",
    "start": "504780",
    "end": "507620"
  },
  {
    "text": "indeed the Overflow exception that this arithmic operation has overflown now if",
    "start": "510419",
    "end": "516779"
  },
  {
    "text": "it would change this algorithm to the unchecked here it now doesn't throw on overflow",
    "start": "516779",
    "end": "523740"
  },
  {
    "text": "but it actually yeah webs around and another result is negative 128.",
    "start": "523740",
    "end": "532440"
  },
  {
    "text": "and I'm also having a little example with the white shift operator so I'm printing this number having 120 shift",
    "start": "533220",
    "end": "540300"
  },
  {
    "text": "shifting it to unsigned white disabled times and we see the representation here and this is all now this would work with",
    "start": "540300",
    "end": "547500"
  },
  {
    "text": "any type that implements this this my interface that I've defined so",
    "start": "547500",
    "end": "553320"
  },
  {
    "text": "the big benefit is that we can have types",
    "start": "553320",
    "end": "559019"
  },
  {
    "text": "that Implement specific interfaces and then we all need to write algorithms",
    "start": "559019",
    "end": "564060"
  },
  {
    "text": "once and the.net team has already made big use of that so let's have a look at one little",
    "start": "564060",
    "end": "569820"
  },
  {
    "text": "example I'm having here I'm doing some some",
    "start": "569820",
    "end": "575640"
  },
  {
    "text": "timing and some GC allocation check metrics and then I the arguments that",
    "start": "575640",
    "end": "583140"
  },
  {
    "text": "the user passes into this command line application I power stem all to an integer",
    "start": "583140",
    "end": "590399"
  },
  {
    "text": "and then call my sum method on that now not Mason method but this is the link some method",
    "start": "590399",
    "end": "596700"
  },
  {
    "text": "so let's run this test oops I should have a white screen there",
    "start": "596700",
    "end": "602540"
  },
  {
    "text": "so we have um how did I call it",
    "start": "602540",
    "end": "610339"
  },
  {
    "text": "come on coded some",
    "start": "611459",
    "end": "617040"
  },
  {
    "text": "so we can now say sum and let's add 223 and 7 which should be 2030.",
    "start": "617040",
    "end": "624899"
  },
  {
    "text": "and indeed it's 2030 and we do allocate some bytes because this is reconverting all the strings to",
    "start": "624899",
    "end": "633600"
  },
  {
    "text": "an integer and there is some some intermediate allocations in there and it takes like three milliseconds",
    "start": "633600",
    "end": "641040"
  },
  {
    "text": "now I want to switch to a generic math algorithm so let me briefly change this",
    "start": "641040",
    "end": "646800"
  },
  {
    "text": "to using span instead",
    "start": "646800",
    "end": "650420"
  },
  {
    "text": "um and",
    "start": "652500",
    "end": "657839"
  },
  {
    "text": "now we according to this genetic version of it which is way more code than the",
    "start": "661800",
    "end": "668880"
  },
  {
    "text": "link implementation that we had but it's highly optimized so what we're doing here is we allocate",
    "start": "668880",
    "end": "677880"
  },
  {
    "text": "um a contiguous set of memory on the stack if",
    "start": "677880",
    "end": "684300"
  },
  {
    "text": "the input size if the input length of the of the string we give in of those of",
    "start": "684300",
    "end": "689880"
  },
  {
    "text": "those string numbers isn't too big because with stack space you need to be very careful don't allocate too much on the stack because otherwise we run in a",
    "start": "689880",
    "end": "696420"
  },
  {
    "text": "stack Overflow exception and we can't recall from that the application is gone now we want to parse those numbers to",
    "start": "696420",
    "end": "704459"
  },
  {
    "text": "whatever which um version of the algorithm we want to use currently we're using int",
    "start": "704459",
    "end": "710760"
  },
  {
    "text": "and now what we see here is I'm not using a different interface I'm using the I",
    "start": "710760",
    "end": "717899"
  },
  {
    "text": "number interface and this is actually coming from the BCL and they have been added.net6's preview now with.net7 S4",
    "start": "717899",
    "end": "725540"
  },
  {
    "text": "and there is this basically a the the interface I showed previously is a very",
    "start": "725540",
    "end": "731820"
  },
  {
    "text": "small version of that so we see there is we now have clamp on this I number",
    "start": "731820",
    "end": "737040"
  },
  {
    "text": "defines a static virtual method clamp so every number that implements interface is clampable",
    "start": "737040",
    "end": "743579"
  },
  {
    "text": "and we will also copy sign there is a lot for example Max so we we see a lot",
    "start": "743579",
    "end": "748920"
  },
  {
    "text": "of methods that we previously had on math on system math and system math F now in this generic interface",
    "start": "748920",
    "end": "756420"
  },
  {
    "text": "and implementations and for example we also have a number base",
    "start": "756420",
    "end": "761700"
  },
  {
    "text": "in the number base we see again and one and the zero there's also a Radix this",
    "start": "761700",
    "end": "767040"
  },
  {
    "text": "is basically the base of the number all binary numbers such as int long float",
    "start": "767040",
    "end": "773940"
  },
  {
    "text": "and double are binary numbers so the Radix is two decimal internet is a",
    "start": "773940",
    "end": "781139"
  },
  {
    "text": "decimal number so the Radix is 10. and there is a lot of interfaces which",
    "start": "781139",
    "end": "786779"
  },
  {
    "text": "implement or which force the implementer to implement",
    "start": "786779",
    "end": "792260"
  },
  {
    "text": "operators such as the I subtraction operators and this includes",
    "start": "792260",
    "end": "798120"
  },
  {
    "text": "it unchecked in the checked version of the subtraction operator and we have this for plus division modulo all of the",
    "start": "798120",
    "end": "805260"
  },
  {
    "text": "operators so this is a lot of interfaces and for example",
    "start": "805260",
    "end": "811920"
  },
  {
    "text": "the algorithm version that we are using here is we're using integer so that's in32 and if I look if this at this this",
    "start": "811920",
    "end": "820200"
  },
  {
    "text": "implements now those interfaces it implements I by binary integer I mean",
    "start": "820200",
    "end": "825660"
  },
  {
    "text": "Max so we know how to get a Min or maximum value and also a signed number",
    "start": "825660",
    "end": "832019"
  },
  {
    "text": "and all of the Primitive types long float decimal also the big integer",
    "start": "832019",
    "end": "837600"
  },
  {
    "text": "in.net they now Implement these interfaces so I can write one algorithm one single time and I can use it with",
    "start": "837600",
    "end": "843839"
  },
  {
    "text": "every type from the every numeric type from the PCL and also any user type from",
    "start": "843839",
    "end": "849300"
  },
  {
    "text": "from a library that I consumed via nougat if they have implemented this I",
    "start": "849300",
    "end": "854459"
  },
  {
    "text": "number or any of the interface and so we now need to write an algorithm",
    "start": "854459",
    "end": "860519"
  },
  {
    "text": "only one single time that means we can heavily optimize this algorithm",
    "start": "860519",
    "end": "867240"
  },
  {
    "text": "so again this is now a bit of an optimized sum version where we also do some vectorization",
    "start": "867240",
    "end": "874079"
  },
  {
    "text": "um this Vector I think this has been added into a free this is related to hardware intrinsics and simd that is a",
    "start": "874079",
    "end": "881880"
  },
  {
    "text": "single instruction multiple data where we can actually write with one instruction",
    "start": "881880",
    "end": "887820"
  },
  {
    "text": "um well multiple data into into this vector and then sum it up very fast and",
    "start": "887820",
    "end": "892980"
  },
  {
    "text": "we see now this sum is way more code but it will end up more way more efficiently",
    "start": "892980",
    "end": "898320"
  },
  {
    "text": "so if we briefly want that",
    "start": "898320",
    "end": "902000"
  },
  {
    "text": "[Music] if I have saved",
    "start": "903550",
    "end": "907880"
  },
  {
    "text": "um what am I doing well uh yeah there we go I should save the program file",
    "start": "910500",
    "end": "917300"
  },
  {
    "text": "and now we see that we allocate significantly less bytes because we are now distal",
    "start": "918000",
    "end": "924779"
  },
  {
    "text": "stringification is not happening on the stack mostly no longer on the Heap and we also don't use Link because link",
    "start": "924779",
    "end": "930480"
  },
  {
    "text": "usually involves a lot of allocations on the on the Heap and it's also sits significantly faster this is for this",
    "start": "930480",
    "end": "937199"
  },
  {
    "text": "very small input set of two numbers all tested it with up to 10 numbers when it's more like a thousand numbers then",
    "start": "937199",
    "end": "942959"
  },
  {
    "text": "actually this algorithm falls off a cliff at some point and the link version is is faster again",
    "start": "942959",
    "end": "949199"
  },
  {
    "text": "because now the.net team is also using this generic math and has significantly improved the performance of Link",
    "start": "949199",
    "end": "957079"
  },
  {
    "text": "so it's time well not link per se but but some specific implementations",
    "start": "958139",
    "end": "963779"
  },
  {
    "text": "some having a benchmark having an iron numerable we actually",
    "start": "963779",
    "end": "969000"
  },
  {
    "text": "fill it as an but we will fill it is an array with size 4 and 1024",
    "start": "969000",
    "end": "976500"
  },
  {
    "text": "and we will be using min Max sum and average",
    "start": "976500",
    "end": "983420"
  },
  {
    "text": "so let's take a look at these benchmarks",
    "start": "984839",
    "end": "988820"
  },
  {
    "text": "the fast link",
    "start": "991260",
    "end": "995540"
  },
  {
    "text": "we see that on.net 6 for example Min on.net6 took",
    "start": "996300",
    "end": "1001519"
  },
  {
    "text": "like 32 nanoseconds and allocated 32 bytes that's the link related allocations of the of the enumerator in",
    "start": "1001519",
    "end": "1008540"
  },
  {
    "text": "the iterator button.net7 we have Co allocation and it only takes five nanoseconds and we see",
    "start": "1008540",
    "end": "1015079"
  },
  {
    "text": "this for Max sum and average as well so how did the BCL team improve the",
    "start": "1015079",
    "end": "1020480"
  },
  {
    "text": "performance so significantly if we take a look at implementation",
    "start": "1020480",
    "end": "1026058"
  },
  {
    "text": "we will see that there is a lot of generics going on this is an indicator that they have implemented this with a",
    "start": "1026059",
    "end": "1032418"
  },
  {
    "text": "generic math and if you have a look at this some implementation now there's only one implementation of",
    "start": "1032419",
    "end": "1038178"
  },
  {
    "text": "some previously there was many implementations for for INT for a byte",
    "start": "1038179",
    "end": "1043339"
  },
  {
    "text": "for float for a double and so on now there is only one which is generically reused",
    "start": "1043339",
    "end": "1049220"
  },
  {
    "text": "and the.net time twice to get a span out of this numerable that is if it's backed",
    "start": "1049220",
    "end": "1056720"
  },
  {
    "text": "by for example in a way so if this if the enumerable respect by an array we can get this and just do a very quick",
    "start": "1056720",
    "end": "1065000"
  },
  {
    "text": "some algorithms so we just iterates through the span and sum them up is very similar what we saw from from the",
    "start": "1065000",
    "end": "1071780"
  },
  {
    "text": "previous example but if it's not in a way",
    "start": "1071780",
    "end": "1077200"
  },
  {
    "text": "if it's an actual if it's a lazily enumerated or a deferred enumerated",
    "start": "1077660",
    "end": "1083419"
  },
  {
    "text": "enumerable then we fall back to the Classic Link style allocation and this will now",
    "start": "1083419",
    "end": "1089980"
  },
  {
    "text": "involve the the heapa location for the numerator and there is a lot of code now updated",
    "start": "1089980",
    "end": "1097539"
  },
  {
    "text": "in.net to use to use generic math to reduce a lot of code and then have those",
    "start": "1097539",
    "end": "1103400"
  },
  {
    "text": "code paths optimized because there's only one code path that they now need to maintain and can heavily optimize it",
    "start": "1103400",
    "end": "1111700"
  },
  {
    "text": "and this is the generic math feature and how it's used now we talked about the link",
    "start": "1112880",
    "end": "1120799"
  },
  {
    "text": "there is also more link related improvements",
    "start": "1120799",
    "end": "1126580"
  },
  {
    "text": "and again having a very similar Benchmark here but no actually let's get to the test",
    "start": "1131480",
    "end": "1137120"
  },
  {
    "text": "first should be",
    "start": "1137120",
    "end": "1142899"
  },
  {
    "text": "no there it is",
    "start": "1143840",
    "end": "1151640"
  },
  {
    "text": "so I'm having an I know mobile here and what we now have is an order method",
    "start": "1151640",
    "end": "1156980"
  },
  {
    "text": "previously we only had order buy methods so what we would previously is order by",
    "start": "1156980",
    "end": "1162620"
  },
  {
    "text": "and if I don't want to select a specific value but the value itself should be",
    "start": "1162620",
    "end": "1167840"
  },
  {
    "text": "should be ordered then I would write something like this oops",
    "start": "1167840",
    "end": "1174020"
  },
  {
    "text": "X goes to X which is um so-called identity function so it's selecting itself and then giving",
    "start": "1174020",
    "end": "1180380"
  },
  {
    "text": "it to the to the to link um to the enumerator implemented",
    "start": "1180380",
    "end": "1186260"
  },
  {
    "text": "but if I want to just Swatch by the element itself there is now this new version of the of the method it's just",
    "start": "1186260",
    "end": "1192919"
  },
  {
    "text": "order and there's also a version where you can pass a an equality operator equality",
    "start": "1192919",
    "end": "1200480"
  },
  {
    "text": "comparer and the same is also for water descending and again this gives a little bit of a",
    "start": "1200480",
    "end": "1207679"
  },
  {
    "text": "performance boost so taking a look at taking a look at the benchmarks",
    "start": "1207679",
    "end": "1213940"
  },
  {
    "text": "comparing order to the classical order buy which does a selection via the",
    "start": "1213940",
    "end": "1219559"
  },
  {
    "text": "identity function and the same with order by descending",
    "start": "1219559",
    "end": "1224559"
  },
  {
    "text": "and we will see a bit of a performance Improvement",
    "start": "1224720",
    "end": "1230200"
  },
  {
    "text": "uh so if we order and order by there is a smaller Improvement and on",
    "start": "1231820",
    "end": "1239120"
  },
  {
    "text": "larger sets it's a little bit more noticeable but on larger sets we also have less",
    "start": "1239120",
    "end": "1246100"
  },
  {
    "text": "allocation on on the stack so on the Heap so we will cause less pressure to",
    "start": "1246100",
    "end": "1251900"
  },
  {
    "text": "the to the garbage collector",
    "start": "1251900",
    "end": "1255100"
  },
  {
    "text": "now let's go to Siri uh to system text Json",
    "start": "1263660",
    "end": "1271120"
  },
  {
    "text": "system text Json now allows",
    "start": "1276919",
    "end": "1281960"
  },
  {
    "text": "um in the in the Json reader so let's say that's a struct that is very heavily optimized we have a new method a new",
    "start": "1282799",
    "end": "1290720"
  },
  {
    "text": "member where we can say if if a value is escaped so what I'm having here is a Json",
    "start": "1290720",
    "end": "1297500"
  },
  {
    "text": "string have you seen this this uh this way of writing a string the wall string",
    "start": "1297500",
    "end": "1302960"
  },
  {
    "text": "literal have you have you seen this already no hands so this is also a new c-sharp",
    "start": "1302960",
    "end": "1310039"
  },
  {
    "text": "11 feature where you can write three so the so-called Wallings wall string literal which means now everything",
    "start": "1310039",
    "end": "1316340"
  },
  {
    "text": "within this string is actually a yeah it's taken literally so we have single",
    "start": "1316340",
    "end": "1322460"
  },
  {
    "text": "quotes they're actually interpreted as clothes they are not terminating the string and",
    "start": "1322460",
    "end": "1327740"
  },
  {
    "text": "um we can also like format it nicely so we see that the the Terminator here",
    "start": "1327740",
    "end": "1334780"
  },
  {
    "text": "um is on this line which means that there is no intention for that string if I want to have this string indented",
    "start": "1335000",
    "end": "1342080"
  },
  {
    "text": "now it's intended by one level because the Terminator is basically this height here so what we can't do is outstand it",
    "start": "1342080",
    "end": "1349220"
  },
  {
    "text": "more than the Terminator here because we can't outstand it well indented by -1",
    "start": "1349220",
    "end": "1354860"
  },
  {
    "text": "this doesn't work so we get a compiler error now and I really like this to yeah white uh Json json-based tests because",
    "start": "1354860",
    "end": "1363679"
  },
  {
    "text": "now what the ID is also doing it's it's formatting it's recognizing okay this is Json and it's formatting it nicely so I",
    "start": "1363679",
    "end": "1369919"
  },
  {
    "text": "can I can have nice inline Json from a unit test I'm having here a an escaped string",
    "start": "1369919",
    "end": "1377419"
  },
  {
    "text": "and this new Json feature now can detect okay is this value actually escaped",
    "start": "1377419",
    "end": "1383059"
  },
  {
    "text": "and there is a new method copy string which",
    "start": "1383059",
    "end": "1388900"
  },
  {
    "text": "takes a span so if the span is backed by an actual stack allocation we can now allocation",
    "start": "1391220",
    "end": "1398059"
  },
  {
    "text": "free copy copy a string out of this reader and this the team is also using",
    "start": "1398059",
    "end": "1404419"
  },
  {
    "text": "this and this is how they make um system text Json so fast",
    "start": "1404419",
    "end": "1409820"
  },
  {
    "text": "and we can also now have polymorphic serialization with system text Json",
    "start": "1409820",
    "end": "1416299"
  },
  {
    "text": "so I'm having here a base type which is using the date only type I'm also",
    "start": "1416299",
    "end": "1422659"
  },
  {
    "text": "marking it as Json required there's also a new property which forces the serializer if this doesn't exist it will",
    "start": "1422659",
    "end": "1428120"
  },
  {
    "text": "for an exception and I'm deriving two types from it which is using one is using time only and one",
    "start": "1428120",
    "end": "1435440"
  },
  {
    "text": "is just a string then we go create now a derived version",
    "start": "1435440",
    "end": "1443480"
  },
  {
    "text": "of of this type so which has both the date and also the time",
    "start": "1443480",
    "end": "1448880"
  },
  {
    "text": "we civilize we civilize it and then destivilize it back so we do a round",
    "start": "1448880",
    "end": "1454640"
  },
  {
    "text": "trip now I want to do an assertion on it and this test is failing because",
    "start": "1454640",
    "end": "1462580"
  },
  {
    "text": "it only contains the base version the the round trip didn't contain the",
    "start": "1463940",
    "end": "1470960"
  },
  {
    "text": "whether the civilization didn't contain the the derived version because this index Json previously couldn't handle",
    "start": "1470960",
    "end": "1476960"
  },
  {
    "text": "polymorphism notes can so if we",
    "start": "1476960",
    "end": "1482919"
  },
  {
    "text": "turn on Place those new attributes the Json derived types those are new",
    "start": "1484340",
    "end": "1489740"
  },
  {
    "text": "attributes and we are saying okay we can also declare a discriminator",
    "start": "1489740",
    "end": "1496760"
  },
  {
    "text": "so I'm saying that the base type has to discriminate the base and the derive types derived one and derived two",
    "start": "1496760",
    "end": "1503120"
  },
  {
    "text": "and so now we teach the civilizer that this is a",
    "start": "1503120",
    "end": "1508159"
  },
  {
    "text": "polymorphic type and in the in the serialization",
    "start": "1508159",
    "end": "1514100"
  },
  {
    "text": "we actually get now at the top this dollar type discriminator so the",
    "start": "1514100",
    "end": "1519440"
  },
  {
    "text": "civilizer emits okay this is not derived one so in the round trip now the serializer",
    "start": "1519440",
    "end": "1525740"
  },
  {
    "text": "knows okay I need to civilize the round one version of this although although I'm statically typing it to the",
    "start": "1525740",
    "end": "1533240"
  },
  {
    "text": "base version at one time it's still the dynamic direct type so we can also assert it",
    "start": "1533240",
    "end": "1539600"
  },
  {
    "text": "that it is the the one tripped version of it we can also set our own discriminator by",
    "start": "1539600",
    "end": "1547039"
  },
  {
    "text": "default its type so we can use another new attribute the",
    "start": "1547039",
    "end": "1552799"
  },
  {
    "text": "Json polymorphic attribute and with that we can pass our own discriminator name",
    "start": "1552799",
    "end": "1559159"
  },
  {
    "text": "so I'm calling this dollar discriminator and not a test fails because it is no",
    "start": "1559159",
    "end": "1566059"
  },
  {
    "text": "longer called dollar type but dollar discriminator the",
    "start": "1566059",
    "end": "1571940"
  },
  {
    "text": "is failing because oops sorry",
    "start": "1571940",
    "end": "1577778"
  },
  {
    "text": "um oh yes because I also we can also give a",
    "start": "1582919",
    "end": "1588559"
  },
  {
    "text": "discriminator can be either a string or a number so I'm now giving this discriminator the number one so it's not",
    "start": "1588559",
    "end": "1595340"
  },
  {
    "text": "just one here oops and",
    "start": "1595340",
    "end": "1600440"
  },
  {
    "text": "now this test will pass shortly and it's green so the discriminator on",
    "start": "1600440",
    "end": "1606140"
  },
  {
    "text": "Json should always be the first element because this is how the civilizer works behind the scenes it looks at the first",
    "start": "1606140",
    "end": "1611299"
  },
  {
    "text": "element sees is this a discriminator then checks the type hierarchy can I match this and then tries to tries to",
    "start": "1611299",
    "end": "1618860"
  },
  {
    "text": "serialize and visualize it accordingly and we can also Define behavior if we",
    "start": "1618860",
    "end": "1626419"
  },
  {
    "text": "if we if we don't know if the series doesn't know which to serialize it to this could be if I'm getting a type",
    "start": "1626419",
    "end": "1633320"
  },
  {
    "text": "that's from a different assembly and I may not have annotated this different type so perhaps it doesn't work and we",
    "start": "1633320",
    "end": "1639140"
  },
  {
    "text": "can have different um three different strategies we either fail or for example could fall back to the",
    "start": "1639140",
    "end": "1645200"
  },
  {
    "text": "base type that is actually known and this also works for the contract",
    "start": "1645200",
    "end": "1653179"
  },
  {
    "text": "based model so you can also do this without the attributes with a more with regular C sharp code where you define",
    "start": "1653179",
    "end": "1659779"
  },
  {
    "text": "your um I forgot the name of the type but in the",
    "start": "1659779",
    "end": "1664820"
  },
  {
    "text": "Json type provider but you can also do this um declaratively if you don't own",
    "start": "1664820",
    "end": "1670039"
  },
  {
    "text": "the type and can't place attributes on it foreign",
    "start": "1670039",
    "end": "1676419"
  },
  {
    "text": "and more in the text World regex got a major major overhaul",
    "start": "1677440",
    "end": "1685000"
  },
  {
    "text": "we now have two new big features in vergex both",
    "start": "1692500",
    "end": "1698900"
  },
  {
    "text": "um a non-backtracking version of the engine which in some cases doesn't fall",
    "start": "1698900",
    "end": "1704779"
  },
  {
    "text": "in some recursive Loop and we also have a source generator",
    "start": "1704779",
    "end": "1710600"
  },
  {
    "text": "so we can in the in the regular version of the regex I'm defining here this is the new enum",
    "start": "1710600",
    "end": "1717380"
  },
  {
    "text": "member reject options options the non-back tracking engine I'm also using the source generated",
    "start": "1717380",
    "end": "1722720"
  },
  {
    "text": "version of it um so we have here this red checks this generated vergex attribute we can place",
    "start": "1722720",
    "end": "1729919"
  },
  {
    "text": "this on any partial method so we see this part this map this method is partial",
    "start": "1729919",
    "end": "1736400"
  },
  {
    "text": "um but it but it still compiles so it's not us that actually is implementing this partial method but a source",
    "start": "1736400",
    "end": "1741740"
  },
  {
    "text": "generator so the source generator via this attribute sees okay we want to create a regex for this this is",
    "start": "1741740",
    "end": "1748159"
  },
  {
    "text": "basically trying to find all the versions of my of my internet personas and we are not using the the",
    "start": "1748159",
    "end": "1755960"
  },
  {
    "text": "backtracking the non-back tracking version here because that is not supported for regex for the generated vergex yet and if you want to have a",
    "start": "1755960",
    "end": "1762740"
  },
  {
    "text": "look at the implementation we see that we are now in a generated",
    "start": "1762740",
    "end": "1768080"
  },
  {
    "text": "file and the.net team",
    "start": "1768080",
    "end": "1773899"
  },
  {
    "text": "um actually added a lot of comments to the source generator which is generating this c-sharp code also adds a lot of",
    "start": "1773899",
    "end": "1779360"
  },
  {
    "text": "comments so you can actually see what what the what the regex is actually",
    "start": "1779360",
    "end": "1784640"
  },
  {
    "text": "checking for the cool thing about Source generators we can also set breakpoints and debug",
    "start": "1784640",
    "end": "1791659"
  },
  {
    "text": "the code that the source generator has produced and Source Innovation is very",
    "start": "1791659",
    "end": "1797240"
  },
  {
    "text": "interesting in scenarios such as aot or when or where we don't or we are not",
    "start": "1797240",
    "end": "1802700"
  },
  {
    "text": "allowed to emit um Dynamic code for example reflection dot emit this is not allowed on on Apple",
    "start": "1802700",
    "end": "1809000"
  },
  {
    "text": "devices so on an iPhone we can't do reflection emit because in cold Pages it's only allowed to either write code",
    "start": "1809000",
    "end": "1815539"
  },
  {
    "text": "or one code but reflection with white codes that is then at one time which is",
    "start": "1815539",
    "end": "1820700"
  },
  {
    "text": "then executed so this is permitted it's a security feature so we couldn't use on such systems which which prevent cold",
    "start": "1820700",
    "end": "1828200"
  },
  {
    "text": "emission we couldn't use this the compiled version of the regex",
    "start": "1828200",
    "end": "1835460"
  },
  {
    "text": "of the of the standard Matrix because actually what's happening at one time the first time this metric is executed",
    "start": "1835460",
    "end": "1840679"
  },
  {
    "text": "IL code is emitted to the assembly once which will take some time so the startup performance of the first metric Max is",
    "start": "1840679",
    "end": "1847460"
  },
  {
    "text": "which regex match isn't great every subsequent one however will then be",
    "start": "1847460",
    "end": "1852740"
  },
  {
    "text": "faster but we can't do this on on restricted scenarios also with with alt that's",
    "start": "1852740",
    "end": "1859580"
  },
  {
    "text": "ahead of time compilation this is coming this com came in in.7 as well and this",
    "start": "1859580",
    "end": "1865279"
  },
  {
    "text": "further expanded in.net 8 or will be expanded.net8 where there is no there is",
    "start": "1865279",
    "end": "1871399"
  },
  {
    "text": "no chit not just in time compiler anymore so the code is compiled at compile time for this target machine for",
    "start": "1871399",
    "end": "1877100"
  },
  {
    "text": "example windows 64 and then once on Windows exist for four machines without the chit compiler",
    "start": "1877100",
    "end": "1883460"
  },
  {
    "text": "which means the startup performance is superb because no code needs to be compiled at one time to to the to the",
    "start": "1883460",
    "end": "1890720"
  },
  {
    "text": "machine byte code and now the source generated version",
    "start": "1890720",
    "end": "1895820"
  },
  {
    "text": "actually would work in the OT scenarios because there is no code emitted at compile time",
    "start": "1895820",
    "end": "1901700"
  },
  {
    "text": "this is all at one time this is all at compile time and this is why Microsoft is pushing in.net 6 and.net7 we now have",
    "start": "1901700",
    "end": "1909559"
  },
  {
    "text": "like five or six Source generators and there will be more in in the future if you want to know more about Source",
    "start": "1909559",
    "end": "1915860"
  },
  {
    "text": "generators I'm doing a talk on the last day of the conference and",
    "start": "1915860",
    "end": "1921440"
  },
  {
    "text": "now we have some tests here basically doing some some rejects matching and the",
    "start": "1921440",
    "end": "1926659"
  },
  {
    "text": "result is both from the generated from the compiled version and also the source generated version",
    "start": "1926659",
    "end": "1931940"
  },
  {
    "text": "um is the same and we also got new methods on vertex we",
    "start": "1931940",
    "end": "1938000"
  },
  {
    "text": "have a count method if in scenarios where we",
    "start": "1938000",
    "end": "1943460"
  },
  {
    "text": "where we only want to know how many counts there are but don't want to know more information about it we just need",
    "start": "1943460",
    "end": "1948799"
  },
  {
    "text": "to count how many meters did we have so this count is now the fastest version to do that",
    "start": "1948799",
    "end": "1954320"
  },
  {
    "text": "and we can also set a start at so in this case I want to start it's the",
    "start": "1954320",
    "end": "1960620"
  },
  {
    "text": "first semicolon I am regexing those streams of mine so we will now only find",
    "start": "1960620",
    "end": "1966980"
  },
  {
    "text": "the second version so the count is not one there's also a new",
    "start": "1966980",
    "end": "1972980"
  },
  {
    "text": "enumerate matches method on it which returns a new type the value match",
    "start": "1972980",
    "end": "1979340"
  },
  {
    "text": "enumerator which is yeah an enumerator so that means it has a get enumerator method",
    "start": "1979340",
    "end": "1989059"
  },
  {
    "text": "and it has the the move next method and the current property so we can do",
    "start": "1989059",
    "end": "1995120"
  },
  {
    "text": "this is basically what what the for each Loop would do under the under the hook under the hood",
    "start": "1995120",
    "end": "2001480"
  },
  {
    "text": "um basically move to the next element get get our matches we can get the the index of the match or at the begin index",
    "start": "2001480",
    "end": "2009100"
  },
  {
    "text": "of this match and also the length of this match then we move to the next match we actually found two matches do the same",
    "start": "2009100",
    "end": "2015279"
  },
  {
    "text": "again and at the end if you're at the end at this numerator it will return false",
    "start": "2015279",
    "end": "2021898"
  },
  {
    "text": "and this is the news in text Bay in the text-based apis now there's also big Advantage",
    "start": "2022960",
    "end": "2030240"
  },
  {
    "text": "improvements in interop I guess you can guess it though now is",
    "start": "2030240",
    "end": "2036880"
  },
  {
    "text": "also a source generator for interop having here example where I'm invoking a",
    "start": "2036880",
    "end": "2043960"
  },
  {
    "text": "Windows API to show a message box in both the classical way with the dll input attribute which is",
    "start": "2043960",
    "end": "2052658"
  },
  {
    "text": "again under the hood it's emitting IL code that is then cheated just in time compiled and then executed by one time",
    "start": "2052659",
    "end": "2059378"
  },
  {
    "text": "which again wouldn't work in restricted scenarios or an iot uh aot scenarios",
    "start": "2059379",
    "end": "2065158"
  },
  {
    "text": "and so now there is a new attribute the library import attribute which is a",
    "start": "2065159",
    "end": "2071800"
  },
  {
    "text": "generator so again it's a partial method that now that Source generator is implementing we can have a look at the",
    "start": "2071800",
    "end": "2077560"
  },
  {
    "text": "implementation set breakpoints and it's now the assortioner which does the",
    "start": "2077560",
    "end": "2083200"
  },
  {
    "text": "marshalling as efficient as possible so when they come cannot use a library",
    "start": "2083200",
    "end": "2089800"
  },
  {
    "text": "Import in aot scenarios as well let's show a brief demo",
    "start": "2089800",
    "end": "2096780"
  },
  {
    "text": "so the",
    "start": "2100839",
    "end": "2103680"
  },
  {
    "text": "so first the Dil version or the chit version of it it emits IL code and which",
    "start": "2109240",
    "end": "2114940"
  },
  {
    "text": "is then cheated so it says hi Oslo via the dll attribute and the",
    "start": "2114940",
    "end": "2121060"
  },
  {
    "text": "same works for the source generator as well if we want it",
    "start": "2121060",
    "end": "2127720"
  },
  {
    "text": "with the other command that will see high from the",
    "start": "2127720",
    "end": "2133180"
  },
  {
    "text": "Library input version and ALT I forgot to mention the aot is",
    "start": "2133180",
    "end": "2140800"
  },
  {
    "text": "very interesting in in short in application deployment models which are",
    "start": "2140800",
    "end": "2146560"
  },
  {
    "text": "short-lived such as Azure functions or um AWS Lambda where duplication On",
    "start": "2146560",
    "end": "2155320"
  },
  {
    "text": "Demand is fired up and then it may not be running for for hours maybe just once for minutes so everyone in the classic",
    "start": "2155320",
    "end": "2162220"
  },
  {
    "text": "deployment would invoke a lot of chit compilation and it would be a lot of time that we actually have to pay now if",
    "start": "2162220",
    "end": "2168400"
  },
  {
    "text": "aot we can get rid of this jit compile time and have a faster setup startup and",
    "start": "2168400",
    "end": "2174820"
  },
  {
    "text": "to also save a lot of money and there is one last very interesting",
    "start": "2174820",
    "end": "2183460"
  },
  {
    "text": "interop on the source generator in.net which is the JavaScript interop",
    "start": "2183460",
    "end": "2189940"
  },
  {
    "text": "generator this only works within the browser",
    "start": "2189940",
    "end": "2195520"
  },
  {
    "text": "but I'm having you a Blazer application but it isn't restricted to Blazer it's",
    "start": "2195520",
    "end": "2200859"
  },
  {
    "text": "just restricted to we need a resume one time for example or we can write it either",
    "start": "2200859",
    "end": "2208060"
  },
  {
    "text": "either one time or we want it via the browser it's not necessarily restricted to to",
    "start": "2208060",
    "end": "2214240"
  },
  {
    "text": "Blazer which was previously the case with the with the 2.6 and before JavaScript interop",
    "start": "2214240",
    "end": "2221980"
  },
  {
    "text": "now if the new interrupt I'm having a couple of couple of buttons",
    "start": "2221980",
    "end": "2227400"
  },
  {
    "text": "and some texts and let's take a look at the implementation in the callbacks we call the methods",
    "start": "2227740",
    "end": "2234820"
  },
  {
    "text": "which now again we have a partial class and slapped the JS import attribute on",
    "start": "2234820",
    "end": "2241960"
  },
  {
    "text": "which now does Source generator Source generated marshalling to the JavaScript behind",
    "start": "2241960",
    "end": "2247900"
  },
  {
    "text": "and we wanna we wanna",
    "start": "2247900",
    "end": "2251700"
  },
  {
    "text": "we want to show a message box we want to write to the console to the browser's console we want to to read we want to",
    "start": "2253119",
    "end": "2260920"
  },
  {
    "text": "prompt some value now if we take a look at the JavaScript we basically call into win this Windows",
    "start": "2260920",
    "end": "2267160"
  },
  {
    "text": "alert console info and the prompt and when we want this application",
    "start": "2267160",
    "end": "2275220"
  },
  {
    "text": "I do not",
    "start": "2283140",
    "end": "2286619"
  },
  {
    "text": "so basically it's now yeah running uh loading the.net the basm.net one time into the browser",
    "start": "2301660",
    "end": "2307720"
  },
  {
    "text": "you can go to our page and now we have this wonderful design buttons we can let's say hi Oslo and we had a show we",
    "start": "2307720",
    "end": "2314859"
  },
  {
    "text": "now enter up into the JavaScript which puts this alert box into our browser",
    "start": "2314859",
    "end": "2320859"
  },
  {
    "text": "we can also write to the console so let's clear our console here and say",
    "start": "2320859",
    "end": "2327400"
  },
  {
    "text": "I don't know um hello world and we get it printed to the console",
    "start": "2327400",
    "end": "2336119"
  },
  {
    "text": "via VIA the JavaScript and we can also for example prompt get this value and now what the user",
    "start": "2337000",
    "end": "2344740"
  },
  {
    "text": "enters here some number one two three four five six seven eight nine basically feedback to our to our page",
    "start": "2344740",
    "end": "2353260"
  },
  {
    "text": "and print it to the console if we if we want to do that and I'm having a callback button here",
    "start": "2353260",
    "end": "2359079"
  },
  {
    "text": "this is now the other direction what we now had is Javascript import so we imported basically JavaScript or we",
    "start": "2359079",
    "end": "2365380"
  },
  {
    "text": "called into JavaScript now we can also reoposit we can have JavaScript call into our.net into our c-sharp code",
    "start": "2365380",
    "end": "2373240"
  },
  {
    "text": "this is not working in the other direction via the JS export attribute I have one more import which calls into",
    "start": "2373240",
    "end": "2379839"
  },
  {
    "text": "this callback method and then in this export I say from.net with an incremented counter pair invocation",
    "start": "2379839",
    "end": "2387460"
  },
  {
    "text": "taking a look at the JavaScript behind the scenes we have the callbook that is callback",
    "start": "2387460",
    "end": "2394180"
  },
  {
    "text": "that is invoked first we basically get the.net runtime",
    "start": "2394180",
    "end": "2400839"
  },
  {
    "text": "then import or we get an export to our to our dll",
    "start": "2400839",
    "end": "2406960"
  },
  {
    "text": "which is here and then with this exports we can call into our method the get message the get",
    "start": "2406960",
    "end": "2414760"
  },
  {
    "text": "meth the get message method that we declared so we say exports then the",
    "start": "2414760",
    "end": "2420460"
  },
  {
    "text": "namespace fcu.page is not the assembly name but the namespace then we have here the name of our Blazer",
    "start": "2420460",
    "end": "2427960"
  },
  {
    "text": "component recording to the get message member and then find an element in the",
    "start": "2427960",
    "end": "2433300"
  },
  {
    "text": "Dom tree which is called result and print that to there so if we now call into the Callback",
    "start": "2433300",
    "end": "2440980"
  },
  {
    "text": "JavaScript is invoking hour.net code and this works both ways and again it's",
    "start": "2440980",
    "end": "2447460"
  },
  {
    "text": "Source generated so there is no marshalling done or compilation cheat competition done at one time",
    "start": "2447460",
    "end": "2454119"
  },
  {
    "text": "all the overhead is done at compile time so that the runtime is always faster is no performance impact at the first one",
    "start": "2454119",
    "end": "2462119"
  },
  {
    "text": "now let's have a look what has changed in the in the bare system namespace",
    "start": "2465820",
    "end": "2474539"
  },
  {
    "text": "previously if we want via the app context we could only get some ambient",
    "start": "2476500",
    "end": "2481720"
  },
  {
    "text": "data we couldn't set data before well indirectly via the app domain so now",
    "start": "2481720",
    "end": "2488380"
  },
  {
    "text": "there is a new method the app context sets data so that we can set data comfortably with the app context",
    "start": "2488380",
    "end": "2497099"
  },
  {
    "text": "see a new new exception a new fro helper in the argument",
    "start": "2498040",
    "end": "2503619"
  },
  {
    "text": "exception so what was added in.net 6 is argument",
    "start": "2503619",
    "end": "2508720"
  },
  {
    "text": "null exception dot fro if now",
    "start": "2508720",
    "end": "2514500"
  },
  {
    "text": "this is a method added in.net6 this was originally related to the double bang",
    "start": "2514599",
    "end": "2520480"
  },
  {
    "text": "operator if you can recall this this was this was a design proposal for c-sharp 11.",
    "start": "2520480",
    "end": "2528339"
  },
  {
    "text": "which means for any member if we say string Arc",
    "start": "2528339",
    "end": "2534040"
  },
  {
    "text": "um Exclamation point Exclamation points not a compilable generate code that null checks this Arc basically at the first",
    "start": "2534040",
    "end": "2540220"
  },
  {
    "text": "line um of the of the code here but this feature then got stripped out",
    "start": "2540220",
    "end": "2546160"
  },
  {
    "text": "and what was left is the idea of those show helpers for example throw if no and what we now",
    "start": "2546160",
    "end": "2553240"
  },
  {
    "text": "now have is a new one on the argument exception the flow if another empty which takes in the string and checks if",
    "start": "2553240",
    "end": "2560440"
  },
  {
    "text": "the student Nano empty and throws and this pattern is particularly interesting because we actually hide the throw so we",
    "start": "2560440",
    "end": "2567579"
  },
  {
    "text": "have here the ink if you have in the if check and this is a very small method so this is quite",
    "start": "2567579",
    "end": "2572800"
  },
  {
    "text": "likely that it gets inlined which will then basically omit one method call",
    "start": "2572800",
    "end": "2578740"
  },
  {
    "text": "every method call creates a new stack frame it's very very tiny but in very hot very hot Loops this",
    "start": "2578740",
    "end": "2587560"
  },
  {
    "text": "could I add up slightly so this is interesting to have this have this version of throw pattern and then there",
    "start": "2587560",
    "end": "2593260"
  },
  {
    "text": "is this one method which actually does nothing else but the throwing",
    "start": "2593260",
    "end": "2599099"
  },
  {
    "text": "and we can now just call through if now or empty and we don't need to write this",
    "start": "2599099",
    "end": "2604960"
  },
  {
    "text": "repetitive flow pattern all over the place",
    "start": "2604960",
    "end": "2609539"
  },
  {
    "text": "and this exists so having here a test if you pass in now we get the null exception we can",
    "start": "2610780",
    "end": "2618640"
  },
  {
    "text": "actually argument null exception and with the perineum with the parameter name set to this argument",
    "start": "2618640",
    "end": "2624579"
  },
  {
    "text": "this is although I don't pass it here this is because also of a C sharp 10 and.net 6 feature the caller argument",
    "start": "2624579",
    "end": "2632020"
  },
  {
    "text": "expression which basically automatically at compile time sees what's the name of the arguments that we call this method",
    "start": "2632020",
    "end": "2637660"
  },
  {
    "text": "with in this case argument so if I were to rename this to my arc",
    "start": "2637660",
    "end": "2646240"
  },
  {
    "text": "in the equal check doing here again name off and it still passes because that's that's done by the compiler",
    "start": "2646240",
    "end": "2653260"
  },
  {
    "text": "if we pass in empty we get the argument exception so that's the string is empty",
    "start": "2653260",
    "end": "2659260"
  },
  {
    "text": "and if it's neither null or empty it will not throw",
    "start": "2659260",
    "end": "2665160"
  },
  {
    "text": "there is another fuel helper on the argument null exception so previously we had",
    "start": "2665740",
    "end": "2672700"
  },
  {
    "text": "the flow if now this one we got in.net6 another is also",
    "start": "2672700",
    "end": "2678339"
  },
  {
    "text": "a pointer version of it I guess you need this really but perhaps perhaps if you",
    "start": "2678339",
    "end": "2685780"
  },
  {
    "text": "need it you can make use of this very nice flow pattern here and this works the same but with with as",
    "start": "2685780",
    "end": "2693280"
  },
  {
    "text": "with regular objects with regular managed references but not also with unmanaged",
    "start": "2693280",
    "end": "2699460"
  },
  {
    "text": "pointers we have a performance Improvement in",
    "start": "2699460",
    "end": "2706839"
  },
  {
    "text": "enum not per se but if we want to consume you know so if we want to oh sorry mixing up",
    "start": "2706839",
    "end": "2713740"
  },
  {
    "text": "um so in enums if you wanted to get a collection of the enum values as the",
    "start": "2713740",
    "end": "2719260"
  },
  {
    "text": "underlying type that means in our case we have here the",
    "start": "2719260",
    "end": "2724900"
  },
  {
    "text": "string split options where the underlying type would be the",
    "start": "2724900",
    "end": "2731500"
  },
  {
    "text": "underlying type is actually an integer but default on enum is an integer and we have 0 1 and 2. if we want to get the",
    "start": "2731500",
    "end": "2737380"
  },
  {
    "text": "collection of this previously it wasn't that easily possible nowadays with this new method get values as underlying",
    "start": "2737380",
    "end": "2745000"
  },
  {
    "text": "types which returns an array with this context constants we have a look at test",
    "start": "2745000",
    "end": "2750040"
  },
  {
    "text": "we can now check okay those are those three constants and at those positions",
    "start": "2750040",
    "end": "2755619"
  },
  {
    "text": "they are 0 1 2 and they actually type this integers not as the enum type",
    "start": "2755619",
    "end": "2761020"
  },
  {
    "text": "itself and if we this also now exists as an",
    "start": "2761020",
    "end": "2768040"
  },
  {
    "text": "extension method on type I'm having here my enum I implemented",
    "start": "2768040",
    "end": "2773319"
  },
  {
    "text": "this as a byte and we see now in these tests this is actually",
    "start": "2773319",
    "end": "2778780"
  },
  {
    "text": "um this is actually the bytes that we get so it's depending on the underlying type of this enum",
    "start": "2778780",
    "end": "2785040"
  },
  {
    "text": "we got some improvements in memory extensions which again is very spand",
    "start": "2787180",
    "end": "2792400"
  },
  {
    "text": "related who of you has used span already span of t or with only span of t",
    "start": "2792400",
    "end": "2799660"
  },
  {
    "text": "a couple of hands um a span is a have I mentioned this before a span is a representation a view",
    "start": "2799660",
    "end": "2807579"
  },
  {
    "text": "of a contiguous amount of arbitrary array arbitrary it could be backed by an actual array which is on the on the Heap",
    "start": "2807579",
    "end": "2814540"
  },
  {
    "text": "it could be also stack allocated but I'll show you an example earlier which is on the stack it could also be some",
    "start": "2814540",
    "end": "2819880"
  },
  {
    "text": "unmanaged memory for example provided by one of our interop scenarios that we showed earlier",
    "start": "2819880",
    "end": "2825760"
  },
  {
    "text": "and the span is now this view of this arbitrary memory and it's very efficient because it's span",
    "start": "2825760",
    "end": "2832560"
  },
  {
    "text": "is a structure and it's only a view of this memory it",
    "start": "2833020",
    "end": "2838359"
  },
  {
    "text": "points to the beginning of an element of this of this arbitrary memory",
    "start": "2838359",
    "end": "2844800"
  },
  {
    "text": "contiguous arbitrary memory and and the length again could be away could be",
    "start": "2844800",
    "end": "2850420"
  },
  {
    "text": "stack allocated could be native memory and we can do a slicing on that which",
    "start": "2850420",
    "end": "2855819"
  },
  {
    "text": "means if we would slice well basically if we have an array of five elements",
    "start": "2855819",
    "end": "2861099"
  },
  {
    "text": "let's draw a quick example if we have an in a way of five elements",
    "start": "2861099",
    "end": "2866140"
  },
  {
    "text": "and I want to get the middle three elements out of that I would need to allocate a new array with the size of",
    "start": "2866140",
    "end": "2873640"
  },
  {
    "text": "three and then copy those values over so we have Heap allocations which puts pressure on the on the garbage collector",
    "start": "2873640",
    "end": "2880660"
  },
  {
    "text": "now with a span um still back pain away now we've spent if we converted to a span we could",
    "start": "2880660",
    "end": "2886660"
  },
  {
    "text": "actually get a span few of this which is now basically just pointing to this",
    "start": "2886660",
    "end": "2892000"
  },
  {
    "text": "first element with a length of three one two and three",
    "start": "2892000",
    "end": "2897339"
  },
  {
    "text": "so the actual array is not changing it's still there it's just the span is now pointing to a few a smaller view of this",
    "start": "2897339",
    "end": "2904780"
  },
  {
    "text": "and this is called slicing and what else we can do now with once we",
    "start": "2904780",
    "end": "2911020"
  },
  {
    "text": "once we have a span of of contiguous memory in a way for example is",
    "start": "2911020",
    "end": "2916480"
  },
  {
    "text": "implicitly castable to a span we can do optimized operations on this and in.net 8 we got",
    "start": "2916480",
    "end": "2924760"
  },
  {
    "text": "for example the common prefix length method where in our case we have NTC",
    "start": "2924760",
    "end": "2932740"
  },
  {
    "text": "London and NDC Oslo and the common prefix length is four and the C and the",
    "start": "2932740",
    "end": "2940660"
  },
  {
    "text": "space and we can also use the same method within with an equality comparer for in",
    "start": "2940660",
    "end": "2948040"
  },
  {
    "text": "our case we ignore the case so it works for both if it now works um case",
    "start": "2948040",
    "end": "2954460"
  },
  {
    "text": "uh irrelevant there's also new methods like index of",
    "start": "2954460",
    "end": "2959560"
  },
  {
    "text": "any except so if you have a span of of of charge a span of chars basically a",
    "start": "2959560",
    "end": "2967900"
  },
  {
    "text": "string is in.net backed by a Char so each character that's a 16-bit 16-bit char",
    "start": "2967900",
    "end": "2976839"
  },
  {
    "text": "so we can convert the string away to a read-only span of char now of course",
    "start": "2976839",
    "end": "2981940"
  },
  {
    "text": "it's read only because the strings are immutable we can't have a mutable span",
    "start": "2981940",
    "end": "2987220"
  },
  {
    "text": "of charm over string because then we could mutate the original string which would be quite unsafe",
    "start": "2987220",
    "end": "2993099"
  },
  {
    "text": "well our applications wouldn't wouldn't be wouldn't rely on that because there's also string in turning and if we would",
    "start": "2993099",
    "end": "2998980"
  },
  {
    "text": "change this internal representations that will break loose and we could now ask via the index of",
    "start": "2998980",
    "end": "3005700"
  },
  {
    "text": "any except gets the first index of any characters except n or D or C which in",
    "start": "3005700",
    "end": "3011640"
  },
  {
    "text": "our case is the index 3 the space",
    "start": "3011640",
    "end": "3017539"
  },
  {
    "text": "there's also the invert um there's also a version [Music]",
    "start": "3018480",
    "end": "3029400"
  },
  {
    "text": "so yeah so this is basically a parent's version of it so we can pass multiple characters there's also a spanned",
    "start": "3029400",
    "end": "3036119"
  },
  {
    "text": "version of it where we pass in a span of this element have you seen the u8",
    "start": "3036119",
    "end": "3041760"
  },
  {
    "text": "already I see notes in a couple of hands this is",
    "start": "3041760",
    "end": "3046859"
  },
  {
    "text": "the new utf-8 string literal which also came in C sharp 11 where we can now",
    "start": "3046859",
    "end": "3052740"
  },
  {
    "text": "basically have a string but represent it not as a byte as a span of char but it's",
    "start": "3052740",
    "end": "3058079"
  },
  {
    "text": "a span of byte Json for example is the definition of Json is the specification",
    "start": "3058079",
    "end": "3064079"
  },
  {
    "text": "of Json is in utf-8 and the all the Json methods that we have with system text",
    "start": "3064079",
    "end": "3069180"
  },
  {
    "text": "Json they are utf-8 based and now with that we can actually have very efficient and very nice operability with with",
    "start": "3069180",
    "end": "3077280"
  },
  {
    "text": "those types and with Json Percy now we also have this in the other",
    "start": "3077280",
    "end": "3082559"
  },
  {
    "text": "direction so not index of any but last index of any which now goes the other range so we want the last index of any",
    "start": "3082559",
    "end": "3090059"
  },
  {
    "text": "except zero two or three which will be this space here and again this also",
    "start": "3090059",
    "end": "3096720"
  },
  {
    "text": "exists as a span overload uh yes memory extensions",
    "start": "3096720",
    "end": "3105020"
  },
  {
    "text": "there is more memory",
    "start": "3105660",
    "end": "3108680"
  },
  {
    "text": "again coming to the span I'm talking a lot about spam because there is a lot of a lot of new",
    "start": "3110880",
    "end": "3116339"
  },
  {
    "text": "methods in.net7 coming that are span related and this will not get less I",
    "start": "3116339",
    "end": "3122040"
  },
  {
    "text": "think Stephen Tope wrote an article about net quad 2.1 when spam got released",
    "start": "3122040",
    "end": "3129740"
  },
  {
    "text": "span the new Mainstay in.net so sooner or later you will you will get you will",
    "start": "3129740",
    "end": "3136140"
  },
  {
    "text": "get some some collision with span and this is a lot of apis will be will be",
    "start": "3136140",
    "end": "3143579"
  },
  {
    "text": "taking spans and we can now vary",
    "start": "3143579",
    "end": "3148800"
  },
  {
    "text": "nicely create spans if they only have one element in it",
    "start": "3148800",
    "end": "3153839"
  },
  {
    "text": "so there is no new Constructor overloads that take just an element as a reference",
    "start": "3153839",
    "end": "3160140"
  },
  {
    "text": "now this is so that we don't occur any any copying",
    "start": "3160140",
    "end": "3167040"
  },
  {
    "text": "and the span actually refers to a um to the reference and the length",
    "start": "3167040",
    "end": "3174200"
  },
  {
    "text": "uh this is now the performance operation that I made earlier we have I'm having here struct which is",
    "start": "3175619",
    "end": "3182460"
  },
  {
    "text": "fairly large it has I think it's 24 bytes or something",
    "start": "3182460",
    "end": "3188300"
  },
  {
    "text": "I have a test yeah so it's 24 bytes which means that as a struct to act are",
    "start": "3188520",
    "end": "3194160"
  },
  {
    "text": "copied by value so every time we copy the value to a method or to another to",
    "start": "3194160",
    "end": "3200040"
  },
  {
    "text": "another local variable we would copy those 24 bytes on the stack now on the",
    "start": "3200040",
    "end": "3205500"
  },
  {
    "text": "machine I'm running on 64 bits a reference is 8 bit size so this is",
    "start": "3205500",
    "end": "3211079"
  },
  {
    "text": "significantly slower and if I have high performance scenarios where I want to pass the",
    "start": "3211079",
    "end": "3217500"
  },
  {
    "text": "we want to get a value from this struct now as a reference we can we can save",
    "start": "3217500",
    "end": "3223319"
  },
  {
    "text": "some time and some copying on the stack so this is now where the new if we have now have a nullable version of this",
    "start": "3223319",
    "end": "3230940"
  },
  {
    "text": "previously we had the method get value or default but now with this fairly large struct",
    "start": "3230940",
    "end": "3236640"
  },
  {
    "text": "this would copy those 24 bytes on the stack but we can get a reference on it so we only get those eight bytes and",
    "start": "3236640",
    "end": "3243240"
  },
  {
    "text": "this is where the new method comes in the get value with or default ref so there is a lot of refs coming on",
    "start": "3243240",
    "end": "3249300"
  },
  {
    "text": "which is and the weft is a managed a managed reference",
    "start": "3249300",
    "end": "3255260"
  },
  {
    "text": "and there is several overloads to that so we can get a reference out of this um",
    "start": "3256500",
    "end": "3261720"
  },
  {
    "text": "default value and since it's a reference we can now actually",
    "start": "3261720",
    "end": "3269099"
  },
  {
    "text": "do have this example no I don't have the example",
    "start": "3269099",
    "end": "3273500"
  },
  {
    "text": "all right and one more flow helper that we have is on the object is post",
    "start": "3274440",
    "end": "3279480"
  },
  {
    "text": "exception so we can now just say I'm having here a disposable that",
    "start": "3279480",
    "end": "3285380"
  },
  {
    "text": "if I dispose it setting that is supposed to true and if",
    "start": "3285380",
    "end": "3290579"
  },
  {
    "text": "I call this method previously I had to say if this post throw new object is",
    "start": "3290579",
    "end": "3295920"
  },
  {
    "text": "post exception and again this would prohibit inlining in some scenarios but there is now this nice throw if through",
    "start": "3295920",
    "end": "3302579"
  },
  {
    "text": "helper which has passed in the Boolean condition and this instance so that this",
    "start": "3302579",
    "end": "3308220"
  },
  {
    "text": "exception gets filmed nicely all right and now let's have a look at",
    "start": "3308220",
    "end": "3315599"
  },
  {
    "text": "two more improvements I'm looking at what is the most",
    "start": "3315599",
    "end": "3321319"
  },
  {
    "text": "interesting stopwatch so I'm having a test here where we",
    "start": "3321319",
    "end": "3330420"
  },
  {
    "text": "if I want to measure time between two places previously I had to create a new",
    "start": "3330420",
    "end": "3337140"
  },
  {
    "text": "a new stopwatch and then get an elapsed on it but a stopwatch I think that um creating a new type stopwatch is I think",
    "start": "3337140",
    "end": "3345720"
  },
  {
    "text": "the default overhead of a reference type of a class is 24 byte bits and it has a",
    "start": "3345720",
    "end": "3351780"
  },
  {
    "text": "long so that's then adding up to something like 40 bits and if I wanna if I'm in a fast endurance but still want to get timing",
    "start": "3351780",
    "end": "3358079"
  },
  {
    "text": "between two points we can get we could previously get this already the timestamp now we have a new method the",
    "start": "3358079",
    "end": "3364619"
  },
  {
    "text": "get elapsed time where we pass in the previous start point and can now nicely get time between those instances rather",
    "start": "3364619",
    "end": "3372240"
  },
  {
    "text": "than using stopwatch new and this improves performance a little bit",
    "start": "3372240",
    "end": "3377880"
  },
  {
    "text": "so in the test I'm now having both versions stopwatch.new getting the elapsed and the new version",
    "start": "3377880",
    "end": "3384960"
  },
  {
    "text": "via get elapsed time from the previous timestamp and that",
    "start": "3384960",
    "end": "3392660"
  },
  {
    "text": "stopwatch saves us those 40 byte of allocations",
    "start": "3393000",
    "end": "3398280"
  },
  {
    "text": "and it's also a tiny little bit faster and let me select one last thing from",
    "start": "3398280",
    "end": "3405599"
  },
  {
    "text": "the list time is short we all you know also have",
    "start": "3405599",
    "end": "3413220"
  },
  {
    "text": "tar support in.net I'm not showing this example",
    "start": "3413220",
    "end": "3418859"
  },
  {
    "text": "there is also a new abstraction the DB data source and ado.net abstraction",
    "start": "3418859",
    "end": "3425460"
  },
  {
    "text": "which incurs the which creates connection strings for us and the final feature I want to show is",
    "start": "3425460",
    "end": "3436380"
  },
  {
    "text": "a little bit of i o so if I wanted to create a temporary",
    "start": "3440160",
    "end": "3446220"
  },
  {
    "text": "file previously what was the method called I think get temp path but this",
    "start": "3446220",
    "end": "3452280"
  },
  {
    "text": "would only get the path to this temporary file I still would need to create it but in the meantime somebody else could have created it so it wasn't",
    "start": "3452280",
    "end": "3458160"
  },
  {
    "text": "100 safe now there is a new method which actually creates a new temporary directory so in",
    "start": "3458160",
    "end": "3465839"
  },
  {
    "text": "for example Windows it would be somewhere in user slash temp and create it directly so I get a",
    "start": "3465839",
    "end": "3470940"
  },
  {
    "text": "reference I get a hold to this to this directory but it's also created already so I can use it immediately",
    "start": "3470940",
    "end": "3475980"
  },
  {
    "text": "and we also get Unix file modes now this isn't supported on Windows this is why I",
    "start": "3475980",
    "end": "3481920"
  },
  {
    "text": "have a guard here but on Unix systems we can now set the Unix file modes such as user read user right and so on",
    "start": "3481920",
    "end": "3491160"
  },
  {
    "text": "and for the final thing we now have a new nice helper method",
    "start": "3491160",
    "end": "3498180"
  },
  {
    "text": "so if we want to get",
    "start": "3498180",
    "end": "3502520"
  },
  {
    "text": "and where is it there it is if you want to get the",
    "start": "3504839",
    "end": "3510119"
  },
  {
    "text": "contents of a file as an async enumerable we can now do",
    "start": "3510119",
    "end": "3515280"
  },
  {
    "text": "this via the read lines is sync and now this isn't a numerable we could asynchronously enumerate via a weight",
    "start": "3515280",
    "end": "3523079"
  },
  {
    "text": "for each bar line in those lines",
    "start": "3523079",
    "end": "3528299"
  },
  {
    "text": "and this is another nice accelerator how to access files in.net",
    "start": "3528299",
    "end": "3535079"
  },
  {
    "text": "and with that I want to link to some documentation",
    "start": "3535079",
    "end": "3540839"
  },
  {
    "text": "so I'm having here some links that talk about all the API changes there is actually a repository",
    "start": "3540839",
    "end": "3548359"
  },
  {
    "text": "which links all those changes so we can for example have a look at the let's",
    "start": "3548660",
    "end": "3554220"
  },
  {
    "text": "have a look at system and we see all those changes we see that all this primitive types the byte now",
    "start": "3554220",
    "end": "3562079"
  },
  {
    "text": "has all the interface the generic math additions so there is a lot of changes",
    "start": "3562079",
    "end": "3567500"
  },
  {
    "text": "in.net I'm afraid we couldn't get a look at all of them today there is way too",
    "start": "3567500",
    "end": "3573000"
  },
  {
    "text": "many I'm also linking some further some further blog posts for example they",
    "start": "3573000",
    "end": "3579900"
  },
  {
    "text": "put what has improved in performance in.net 7 and also linking to the API",
    "start": "3579900",
    "end": "3585480"
  },
  {
    "text": "reviews so they're happening the API reviews actually happening they're playing twice",
    "start": "3585480",
    "end": "3591180"
  },
  {
    "text": "per week not this week because it's also um and the CNM is built but twice per week",
    "start": "3591180",
    "end": "3598440"
  },
  {
    "text": "that.net team is reviewing those pcls I'm streaming this on on YouTube so you can if you want join this session and",
    "start": "3598440",
    "end": "3603839"
  },
  {
    "text": "get a look at how the how the team is actually deciding on designing and implementing new apis into",
    "start": "3603839",
    "end": "3611220"
  },
  {
    "text": "the.net BCL oh and",
    "start": "3611220",
    "end": "3618119"
  },
  {
    "text": "this is it this is what's new and improved in the.net 7 BCL if you go to all of the",
    "start": "3618119",
    "end": "3625920"
  },
  {
    "text": "code that you saw is and more is published on GitHub you can go to this Repository or if you go to flashover.net NDC Oslo",
    "start": "3625920",
    "end": "3633540"
  },
  {
    "text": "2023 API you get to the previous slide but also my contacts listed if you have any questions that I'm afraid I can't",
    "start": "3633540",
    "end": "3640740"
  },
  {
    "text": "answer now because time is running short maybe one",
    "start": "3640740",
    "end": "3645839"
  },
  {
    "text": "is there one question perhaps I guess it's lunchtime isn't it then",
    "start": "3645839",
    "end": "3655260"
  },
  {
    "text": "thank you very much [Applause] thank you",
    "start": "3655559",
    "end": "3662180"
  }
]