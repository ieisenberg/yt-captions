[
  {
    "text": "john mccarthy this gentleman could indeed be the software developer look at that beard uh developer of",
    "start": "1920",
    "end": "10080"
  },
  {
    "text": "arguably the first functional programming language in the world lisp this is an example of it over",
    "start": "10080",
    "end": "15200"
  },
  {
    "text": "the side over here don't ask me what that does i don't know lisp apparently it's very cool i",
    "start": "15200",
    "end": "20400"
  },
  {
    "text": "understand it's still used today very nice but anyway",
    "start": "20400",
    "end": "26000"
  },
  {
    "text": "so what is functional programming not well the point of the last few slides was that it's nothing new",
    "start": "26000",
    "end": "32160"
  },
  {
    "text": "it's been around for absolutely ages most of those gentlemen did their work in the 1950s and 1960s",
    "start": "32160",
    "end": "39120"
  },
  {
    "text": "and the origins of functional programming date back to the late 1800s i have indeed dug out some of those",
    "start": "39120",
    "end": "45520"
  },
  {
    "text": "papers but again not a mathematician so they caused my eyes to sort of steam over",
    "start": "45520",
    "end": "51680"
  },
  {
    "text": "and some sort of strange liquid to start pouring out my ears it was hard going because i don't understand it",
    "start": "51680",
    "end": "58239"
  },
  {
    "text": "but anyway it's nothing new uh it's not like the latest trendy",
    "start": "58239",
    "end": "64239"
  },
  {
    "text": "framework coming out of react or angular or whatever",
    "start": "64239",
    "end": "70640"
  },
  {
    "text": "it's not a language it's a paradigm and if you want a metaphor for a paradigm if you want to think of",
    "start": "70640",
    "end": "77680"
  },
  {
    "text": "a musical instrument as being a programming language then the genre of music you play is the",
    "start": "77680",
    "end": "84640"
  },
  {
    "text": "paradigm you can take your guitar and you may play pop music you may play rock music you may play country in western if you",
    "start": "84640",
    "end": "90320"
  },
  {
    "text": "have no soul but the point is that you may play many styles of music with your same",
    "start": "90320",
    "end": "96400"
  },
  {
    "text": "instrument similarly with a programming language you may program in many styles of programming",
    "start": "96400",
    "end": "103520"
  },
  {
    "text": "and it is not imperative or object orientated those being the other two um dominant",
    "start": "103520",
    "end": "110000"
  },
  {
    "text": "paradigms uh most of the people that i've come across who've struggled with the concepts of functional programming",
    "start": "110000",
    "end": "116320"
  },
  {
    "text": "tend to be those like a lot of us here i would imagine who've been doing object orientated for upwards of 10 years",
    "start": "116320",
    "end": "122719"
  },
  {
    "text": "and find it a little harder to adjust to a slightly well new way of working but most of the",
    "start": "122719",
    "end": "129200"
  },
  {
    "text": "people i've come across who picked it up almost instantly tended to be students straight out of university",
    "start": "129200",
    "end": "134319"
  },
  {
    "text": "in fact when i was in minnesota giving this talk uh i got chatting with the interns at lunch",
    "start": "134319",
    "end": "140239"
  },
  {
    "text": "and some of those said that actually this is what they're teaching in universities now as the way of",
    "start": "140239",
    "end": "146560"
  },
  {
    "text": "programming so to a degree if we're not getting into functional we might be left behind in five to ten years who",
    "start": "146560",
    "end": "153200"
  },
  {
    "text": "knows it's not the solution to all of your problems but i would argue is the solution to",
    "start": "153200",
    "end": "158720"
  },
  {
    "text": "many of them hopefully some or all of you will agree by the end of this and it's not difficult it's not",
    "start": "158720",
    "end": "165040"
  },
  {
    "text": "difficult at all it is a little bit of a conceptual leap for anyone that's not already gotten into it",
    "start": "165040",
    "end": "170319"
  },
  {
    "text": "but it's not actually hard so what is it what actually characterizes a functional language a",
    "start": "170319",
    "end": "177360"
  },
  {
    "text": "functional code so important concept is immutability and this is fairly common functional",
    "start": "177360",
    "end": "184800"
  },
  {
    "text": "programming we've got a funky word for something that's not terribly hard to explain uh immutability is just that once a",
    "start": "184800",
    "end": "191200"
  },
  {
    "text": "variable has been set you may not change its value again no matter what you can't really do",
    "start": "191200",
    "end": "197519"
  },
  {
    "text": "this in c sharp but i kind of proceed as if this was the case f sharp absolutely but we'll get a whole",
    "start": "197519",
    "end": "204400"
  },
  {
    "text": "other topic higher order functions again funky word something that we've been probably doing",
    "start": "204400",
    "end": "210640"
  },
  {
    "text": "for years this is functions passed around as a variable either as a parameter to a",
    "start": "210640",
    "end": "217920"
  },
  {
    "text": "function or as a return value out of a function but that's all it is if you've been doing link there you go",
    "start": "217920",
    "end": "225440"
  },
  {
    "text": "it emphasizes functions not statements what's a statement a statement is an if a while for",
    "start": "225440",
    "end": "233200"
  },
  {
    "text": "all of those guys there are other ways of doing this stuff in functional programming",
    "start": "233200",
    "end": "238400"
  },
  {
    "text": "referential transparency who actually just means that um a function",
    "start": "238400",
    "end": "244799"
  },
  {
    "text": "shouldn't rely on anything other than its own parameters seems simple but it has some marvelous",
    "start": "244799",
    "end": "251840"
  },
  {
    "text": "consequences so the whole idea is that the function should become completely predictable it shouldn't rely",
    "start": "251840",
    "end": "258959"
  },
  {
    "text": "on any external state or any anything else anywhere except for the things coming in",
    "start": "258959",
    "end": "264160"
  },
  {
    "text": "so it means that given the same parameters you will always get the same answer out of that",
    "start": "264160",
    "end": "270800"
  },
  {
    "text": "function no matter what no matter what state the rest of the system is in no matter the life of the",
    "start": "270800",
    "end": "276800"
  },
  {
    "text": "universe no matter anything i suppose you could turn the computer off but other than that pretty much",
    "start": "276800",
    "end": "282720"
  },
  {
    "text": "these same inputs give the same output it's often called a pure function",
    "start": "282720",
    "end": "288320"
  },
  {
    "text": "uh recursion i'm assuming we're all good with recursion anyone who's not speak now",
    "start": "288320",
    "end": "296400"
  },
  {
    "text": "recognition i'll kind of get onto that in a bit this is basically uh switch statements with knobs on",
    "start": "296400",
    "end": "303600"
  },
  {
    "text": "stateless so referring back to uh reference transparency the the pure functions there is no state in",
    "start": "303600",
    "end": "310080"
  },
  {
    "text": "functional programming as such there's no it's not like the object-orientated world where you have this object which",
    "start": "310080",
    "end": "315680"
  },
  {
    "text": "contains the state we modify the state we track the state this concept doesn't exactly exist in functional programming again",
    "start": "315680",
    "end": "321440"
  },
  {
    "text": "other ways of doing it monadz ah so according to douglas crockford the",
    "start": "321440",
    "end": "327600"
  },
  {
    "text": "curse of the moan ad is that once you gain the ability to understand it you lose the ability to",
    "start": "327600",
    "end": "333120"
  },
  {
    "text": "explain it so i shout and it's not difficult as hopefully we'll agree",
    "start": "333120",
    "end": "341280"
  },
  {
    "text": "shortly where is it so where can you find it of course there are the pure functional",
    "start": "341280",
    "end": "346880"
  },
  {
    "text": "languages haskell erlang there are others i know there's a whole load out there i've heard great things i've never",
    "start": "346880",
    "end": "352800"
  },
  {
    "text": "personally used them i've heard air lang has been having a lot of success recently i believe rabbit mq is airline",
    "start": "352800",
    "end": "359280"
  },
  {
    "text": "so i've heard they're great if you want to do them go for it have fun enjoy",
    "start": "359280",
    "end": "365680"
  },
  {
    "text": "but not something i've touched on myself probably should at some point i've also got some friends that swear by",
    "start": "365680",
    "end": "370960"
  },
  {
    "text": "haskell so i think i'm going to copy the book around here somewhere javascript would you believe javascript",
    "start": "370960",
    "end": "376479"
  },
  {
    "text": "supports functional to a crazy extent that c sharp doesn't i have another talk on that subject if anyone's",
    "start": "376479",
    "end": "381919"
  },
  {
    "text": "ever demented enough to want to hear it and see which is why we're here so when is it",
    "start": "381919",
    "end": "389039"
  },
  {
    "text": "it's not that it can't do other things but this is generally speaking where functional programming is happiest where it's most",
    "start": "389039",
    "end": "395520"
  },
  {
    "text": "uh effective so data processing again thinking back to your your pure functions",
    "start": "395520",
    "end": "401120"
  },
  {
    "text": "then just this data comes in this data goes out functional does that stuff really really well so if you've got like",
    "start": "401120",
    "end": "407600"
  },
  {
    "text": "a rules engine or something like that something that just chunks data from one form to another functional does that",
    "start": "407600",
    "end": "413120"
  },
  {
    "text": "perfectly i will probably do it better than nearly any other paradigm concurrent systems so this is",
    "start": "413120",
    "end": "421120"
  },
  {
    "text": "where you want to speed up a whole load of processes running in parallel doing roughly the same task functional supports that really well",
    "start": "421120",
    "end": "428000"
  },
  {
    "text": "because no state because most of the problems that you run into with uh async",
    "start": "428000",
    "end": "433039"
  },
  {
    "text": "is things like uh resource contention uh changes in shared state between threads",
    "start": "433039",
    "end": "438720"
  },
  {
    "text": "stuff like that generally speaking doesn't happen with functional high criticality systems because a",
    "start": "438720",
    "end": "445599"
  },
  {
    "text": "functional program tends to be more stable than the alternatives it tends to be more robust",
    "start": "445599",
    "end": "451360"
  },
  {
    "text": "um i think airline's claim is something like once their program is actually compiled",
    "start": "451360",
    "end": "456880"
  },
  {
    "text": "and executed it's nearly impossible to kill and i don't doubt that i don't doubt that at all",
    "start": "456880",
    "end": "462639"
  },
  {
    "text": "and serverless referring back to the concurrent systems if you're interested in something like as your functions or anything of that",
    "start": "462639",
    "end": "470000"
  },
  {
    "text": "ilk then again functional programming is probably one of the things that's going to",
    "start": "470000",
    "end": "475120"
  },
  {
    "text": "support that so when is it not oh sorry mentioned aws",
    "start": "475120",
    "end": "481919"
  },
  {
    "text": "lambdas thank you yes same exact thing except that's in the aws world so absolutely aws lambdas i'm pretty",
    "start": "481919",
    "end": "489360"
  },
  {
    "text": "sure there's other instances of that serverless technology thumbs up to you as well okay when is it",
    "start": "489360",
    "end": "496160"
  },
  {
    "text": "not so it can do these things but this is where you have to make your compromises",
    "start": "496160",
    "end": "501440"
  },
  {
    "text": "so functional likes predictability it like stability uh but these things are inherently not so",
    "start": "501440",
    "end": "508800"
  },
  {
    "text": "ui dealing with files dealing with uh input and output devices external interactions with other systems",
    "start": "508800",
    "end": "515680"
  },
  {
    "text": "third-party systems and io you know there is nothing more impure than a human being let's face it so",
    "start": "515680",
    "end": "523839"
  },
  {
    "text": "this is where compromises have to be made and the various functional or non-functional languages",
    "start": "523839",
    "end": "529200"
  },
  {
    "text": "are made their own efforts to deal with this problem but the image i",
    "start": "529200",
    "end": "534399"
  },
  {
    "text": "keep in my head is that of a shadow shadow has two parts the dark center",
    "start": "534399",
    "end": "540160"
  },
  {
    "text": "that's the umbra and then the gray fuzzy bit around the outside that's the penumbra",
    "start": "540160",
    "end": "545600"
  },
  {
    "text": "and what i like to think of is that we want to keep the umbra the dark bit the pure functional bit as big as possible and then push the",
    "start": "545600",
    "end": "552480"
  },
  {
    "text": "non-functional fuzzy bits on the outside as far back as we can to increase the amount of functional",
    "start": "552480",
    "end": "557920"
  },
  {
    "text": "that we have and decrease everything else so at least we can maximize the amount of awesome code that we end up with in",
    "start": "557920",
    "end": "564000"
  },
  {
    "text": "our system so why is it why on earth should we be",
    "start": "564000",
    "end": "569519"
  },
  {
    "text": "interested certainly these are my answers it's concise and that is not a small thing to me you",
    "start": "569519",
    "end": "576240"
  },
  {
    "text": "go from about this much code often to something a little like this which is marvelous because i am a very",
    "start": "576240",
    "end": "584080"
  },
  {
    "text": "lazy developer i don't like typing a lot of code i like to just get on with my job as fast as possible and functional is",
    "start": "584080",
    "end": "590320"
  },
  {
    "text": "brilliant for that it's readable in part because of the uh concision",
    "start": "590320",
    "end": "596320"
  },
  {
    "text": "it's much easier to read what we've done plus it tends to lay things out in a",
    "start": "596320",
    "end": "601680"
  },
  {
    "text": "nice logical fashion uh i'll get on to examples in a bit extremely testable i know for a lot of",
    "start": "601680",
    "end": "607279"
  },
  {
    "text": "people the testability is one of the huge draws of this uh thinking back again to the concept of",
    "start": "607279",
    "end": "612720"
  },
  {
    "text": "your your pure functions uh it means that all the functions that you write tend to be extremely testable",
    "start": "612720",
    "end": "618720"
  },
  {
    "text": "because they're predictable they always give the same results for the same input so throwing together unit tests is a",
    "start": "618720",
    "end": "624560"
  },
  {
    "text": "doddle enables concurrency touched on that robust i've touched on that and fun i think it's fun uh it's an",
    "start": "624560",
    "end": "631839"
  },
  {
    "text": "awful lot more fun than typing out long calendars i now tend to think of the alternatives as being so",
    "start": "631839",
    "end": "638720"
  },
  {
    "text": "moving on to the how of it which is going to take up the majority of the rest of this talk",
    "start": "638720",
    "end": "643839"
  },
  {
    "text": "so this is a bit of non-functional code this is the sort of thing that we've well certainly people like myself who've been in this game a long time",
    "start": "643839",
    "end": "650240"
  },
  {
    "text": "have tended to write a lot over the years uh incidentally anyone who can guess what the uh titles over here in",
    "start": "650240",
    "end": "657920"
  },
  {
    "text": "the corner are automatic is automatically one of my friends um but i will give you like five seconds",
    "start": "657920",
    "end": "664640"
  },
  {
    "text": "to work out what on earth this is doing and i bet it would take an awful lot longer some of those folks have been",
    "start": "664640",
    "end": "670000"
  },
  {
    "text": "doing this longer than i have will probably get there quicker because we've done it so many flipping times but my point is that",
    "start": "670000",
    "end": "678000"
  },
  {
    "text": "we've got an awful lot of code here to do something that's relatively simple the logic is split in many places um",
    "start": "678000",
    "end": "685360"
  },
  {
    "text": "it might take a bit of staring to work out precisely what it is doing or could rewrite it like this",
    "start": "685360",
    "end": "693360"
  },
  {
    "text": "incidentally for anyone who's playing along with home those are the episode titles of the very first season",
    "start": "693360",
    "end": "699120"
  },
  {
    "text": "of doctor who from 1963 uh doctor who for those not aware is the greatest",
    "start": "699120",
    "end": "704560"
  },
  {
    "text": "tv series in the entire world and i will fight anyone that tells says otherwise",
    "start": "704560",
    "end": "711040"
  },
  {
    "text": "right but my point is this is functional programming now if",
    "start": "711360",
    "end": "718560"
  },
  {
    "text": "anyone is about to think at this point well that's just a bit of link yeah it's totally a bit of link",
    "start": "718560",
    "end": "724240"
  },
  {
    "text": "that's link is functional programming and that's a deliberate choice on the",
    "start": "724240",
    "end": "729600"
  },
  {
    "text": "part of microsoft i was here well i say here i was over here in from",
    "start": "729600",
    "end": "735120"
  },
  {
    "text": "the real here ndc oslo about two years ago and there was a talk there from the head",
    "start": "735120",
    "end": "741279"
  },
  {
    "text": "developer of um c sharp uh he keynoted",
    "start": "741279",
    "end": "746399"
  },
  {
    "text": "and i asked what's the intention with the functional content in c sharp and his answer was what are you doing in",
    "start": "746399",
    "end": "752560"
  },
  {
    "text": "my room but after i had been tied up and beaten and the police had been called",
    "start": "752560",
    "end": "759839"
  },
  {
    "text": "then the explanation was that the intention is that my c-sharp is a hybrid",
    "start": "759839",
    "end": "766880"
  },
  {
    "text": "language it is absolutely going to support functional programming going forward",
    "start": "766880",
    "end": "772079"
  },
  {
    "text": "and every iteration of c sharp going on is going to contain more functional content than the one",
    "start": "772079",
    "end": "778240"
  },
  {
    "text": "before it uh the f sharp guys and the c sharp guys are",
    "start": "778240",
    "end": "783519"
  },
  {
    "text": "mutually uh benefiting from this increased functional content so",
    "start": "783519",
    "end": "790160"
  },
  {
    "text": "it is absolutely the way that they're they're moving the language so",
    "start": "790160",
    "end": "795519"
  },
  {
    "text": "here if we look at these these of course are shorthands for functions these are",
    "start": "795519",
    "end": "800880"
  },
  {
    "text": "functions being passed as a parameter that's functional programming that's how it works",
    "start": "800880",
    "end": "807040"
  },
  {
    "text": "and that's all all of this does so if you're comfortable with link then hopefully there's not going to",
    "start": "807040",
    "end": "812240"
  },
  {
    "text": "be anything in the rest of the talk that will boggle your mind too much uh we've got a couple of questions",
    "start": "812240",
    "end": "820240"
  },
  {
    "text": "okay stern says he's interested in game programming unity is his tool of choice they've been lately focusing on a new paradigm d-o-t-s",
    "start": "821199",
    "end": "828399"
  },
  {
    "text": "data orientated tech stack i have never heard of this i think i might have to hit google once",
    "start": "828399",
    "end": "834880"
  },
  {
    "text": "i get back but he says what i've said this is functional that's cool might be don't know that might have to",
    "start": "834880",
    "end": "840959"
  },
  {
    "text": "be something i look up later um and someone has asked if i could",
    "start": "840959",
    "end": "846079"
  },
  {
    "text": "see if how one should think differently when you're testing functional code versus o good question i'm not exactly going to",
    "start": "846079",
    "end": "852880"
  },
  {
    "text": "touch on that but maybe bring that up again at the end and i'll see if i can put together some thoughts okay so",
    "start": "852880",
    "end": "858959"
  },
  {
    "text": "uh you could even go a step further on my comment on my previous uh slide and you could start throwing in",
    "start": "858959",
    "end": "864800"
  },
  {
    "text": "some things like this if you wanted so i'm just storing some funks i'm guessing that everyone is okay",
    "start": "864800",
    "end": "870000"
  },
  {
    "text": "with funks if you're not it's going to be a tough lecture for you sorry but you can store your functions as",
    "start": "870000",
    "end": "877920"
  },
  {
    "text": "variables here and then you could quickly and easily define each piece",
    "start": "877920",
    "end": "883360"
  },
  {
    "text": "separately of your program so a split on comma here which literally does that and nothing else",
    "start": "883360",
    "end": "888639"
  },
  {
    "text": "a parse data which just does that and nothing else and then you can stuff this all together into something that reads like this",
    "start": "888639",
    "end": "896399"
  },
  {
    "text": "so and then another function is just placing it all together so now that reads almost like natural language",
    "start": "896399",
    "end": "902560"
  },
  {
    "text": "i could probably show this to my manager and now they might not be able to modify this or",
    "start": "902560",
    "end": "909279"
  },
  {
    "text": "entirely understand it but roughly speaking you can understand what this does even if you're not all",
    "start": "909279",
    "end": "915199"
  },
  {
    "text": "that technical because it's not it's fundamentally all that different what you're seeing here and it's got lovely descriptive words so",
    "start": "915199",
    "end": "922560"
  },
  {
    "text": "this for me is a huge benefit of functional you tend to end up with stuff that looks like what you're trying to do",
    "start": "922560",
    "end": "930160"
  },
  {
    "text": "whereas your old for loop with a list view for me it's probably more what's happening",
    "start": "930160",
    "end": "935759"
  },
  {
    "text": "behind the scenes once the compiler's messed with it but i'm not interested in that i don't really care how it works",
    "start": "935759",
    "end": "942160"
  },
  {
    "text": "i want to know what it does so this is a big old block of code",
    "start": "942160",
    "end": "949920"
  },
  {
    "text": "which might be familiar to some people in the uk these are the validation rules for what's called a nina",
    "start": "949920",
    "end": "955680"
  },
  {
    "text": "now i used to do work for hmrc that is the tax revenue people for the uk so i am very",
    "start": "955680",
    "end": "961519"
  },
  {
    "text": "familiar with the national insurance number uh don't even get me started on what those",
    "start": "961519",
    "end": "967759"
  },
  {
    "text": "things are but there's a whole long list of rules which define whether a nino and national insurance number is",
    "start": "967759",
    "end": "973839"
  },
  {
    "text": "valid it's down to which characters go in which space within the number which are letters which are numbers",
    "start": "973839",
    "end": "981279"
  },
  {
    "text": "which letters you may have there's a whole load of uh rules and in this case i am",
    "start": "981279",
    "end": "989279"
  },
  {
    "text": "the structure of this code is that i am checking each rule if a rule fails as in that rule isn't",
    "start": "989279",
    "end": "995279"
  },
  {
    "text": "true then i'm returning false early and then it's kind of missing off the back of the screen at the moment that's",
    "start": "995279",
    "end": "1001440"
  },
  {
    "text": "rubbish um otherwise if i go to the end of all these rules then i return true awesome or i could",
    "start": "1001440",
    "end": "1010240"
  },
  {
    "text": "write something like this so you don't have to actually separate",
    "start": "1010240",
    "end": "1015600"
  },
  {
    "text": "out everything like this like i have but i just kind of like to do that sort of thing because it makes it an awful lot easier",
    "start": "1015600",
    "end": "1022079"
  },
  {
    "text": "to uh to read what's going on but all i've done is i have separated out each rule into",
    "start": "1022079",
    "end": "1029678"
  },
  {
    "text": "um a line here so it must have length of nine there we go a nice simple definition of",
    "start": "1029679",
    "end": "1035199"
  },
  {
    "text": "a string having a definition of a length of nine you could you could blend this all together i",
    "start": "1035199",
    "end": "1040319"
  },
  {
    "text": "don't really mind uh let's start with an alphanumeric and so on you could you could see it's",
    "start": "1040319",
    "end": "1045438"
  },
  {
    "text": "pretty clear what we're doing here but i have stuck all of these functions",
    "start": "1045439",
    "end": "1050720"
  },
  {
    "text": "into an array which is a subtly powerful thing to do because",
    "start": "1050720",
    "end": "1056160"
  },
  {
    "text": "you start finding all sorts of fun ways to play with it once you've done that because you can apply link to the array",
    "start": "1056160",
    "end": "1063200"
  },
  {
    "text": "of functions and here we've got an all so what does all do all is a link feature",
    "start": "1063200",
    "end": "1068880"
  },
  {
    "text": "what all does is go through each item in the array run this and if",
    "start": "1068880",
    "end": "1075360"
  },
  {
    "text": "every single one returns true that's good will return the whole thing true if at any point any of these individual",
    "start": "1075360",
    "end": "1081840"
  },
  {
    "text": "things return false then we just terminate the whole",
    "start": "1081840",
    "end": "1087280"
  },
  {
    "text": "process early and return false so all i'm doing inside the all lambda",
    "start": "1087280",
    "end": "1093440"
  },
  {
    "text": "expression is feeding it the nino spring uh with any spaces replay uh someone's just asked for a link to",
    "start": "1093440",
    "end": "1099520"
  },
  {
    "text": "the slides i will absolutely put a link at the end to the slides no worries uh i think there's plenty if",
    "start": "1099520",
    "end": "1105360"
  },
  {
    "text": "you have a dig around on twitter you'll find a million copies of um",
    "start": "1105360",
    "end": "1110480"
  },
  {
    "text": "of my slides around there too but don't worry i will make sure that everyone gets the slider wants them so my point is that this all",
    "start": "1110640",
    "end": "1118320"
  },
  {
    "text": "has um completely replicated all of the structure of code on the",
    "start": "1118320",
    "end": "1124000"
  },
  {
    "text": "previous slide which was about this jupiter long only i'm doing it in this little statement",
    "start": "1124000",
    "end": "1130400"
  },
  {
    "text": "here my return early my final return true at the end all of that",
    "start": "1130400",
    "end": "1135520"
  },
  {
    "text": "easy peasy and if you wanted to get rid of all these guys you could you could just merge all these into here",
    "start": "1135520",
    "end": "1141120"
  },
  {
    "text": "jobs are good um so yeah why make things hard",
    "start": "1141120",
    "end": "1147919"
  },
  {
    "text": "why write all those lines of code when you just don't have to and in fact i could do something like",
    "start": "1147919",
    "end": "1154799"
  },
  {
    "text": "this if i wanted to now i'm assuming that everyone is good with extension methods",
    "start": "1154799",
    "end": "1159840"
  },
  {
    "text": "because once again if you're not good with extension methods gonna be a tough hour for you so i like extension methods",
    "start": "1159840",
    "end": "1167360"
  },
  {
    "text": "i think they get a bad rap there are ways of using them and there are ways definitely i'm not using them but i keep them small simple and generic",
    "start": "1167360",
    "end": "1175039"
  },
  {
    "text": "and that's what i'm doing here so i've created a validate extension method which attaches to a t i've called it t",
    "start": "1175039",
    "end": "1181440"
  },
  {
    "text": "input because i like clarity and but that's still a t so attaching to a t means it attaches to",
    "start": "1181440",
    "end": "1188400"
  },
  {
    "text": "everything in the whole of c sharp with no exceptions and i'm taking a params i love params",
    "start": "1188400",
    "end": "1193679"
  },
  {
    "text": "params is awesome if you don't use params you should and so what i'm saying is give me",
    "start": "1193679",
    "end": "1199840"
  },
  {
    "text": "a whole list of predicates that is validation for rules uh taking t as the",
    "start": "1199840",
    "end": "1206159"
  },
  {
    "text": "input and bool is the output to tell me whether it's right or not and then you could just do this so i'll",
    "start": "1206159",
    "end": "1212400"
  },
  {
    "text": "do my replace just once i'll call validate and then i'll feed it each rule so once again we've compacted down the code",
    "start": "1212400",
    "end": "1220320"
  },
  {
    "text": "a little bit smaller we've got a reusable set of um validate function",
    "start": "1220320",
    "end": "1227760"
  },
  {
    "text": "features here which we can apply all over the place so just made for me at least c-sharp a",
    "start": "1227760",
    "end": "1233360"
  },
  {
    "text": "little bit friendlier and easy to use if you really wanted to and i'm not",
    "start": "1233360",
    "end": "1238559"
  },
  {
    "text": "going to dwell too much on this slide but you could go and break down each of those rules into",
    "start": "1238559",
    "end": "1243600"
  },
  {
    "text": "little sub-bits of rules so you've got all these sorts of reusable pieces like you could have a generic has lengths off",
    "start": "1243600",
    "end": "1249440"
  },
  {
    "text": "and you could feed a nine into that if you wanted is all yeah there's all sorts there's all sorts of ways you could",
    "start": "1249440",
    "end": "1254960"
  },
  {
    "text": "break this down but in principle what we're doing is turning functions into lego bricks and we're breaking them",
    "start": "1254960",
    "end": "1262240"
  },
  {
    "text": "as small as possible and allowing us to stuff them all together to build up our little lego castle or whatever we",
    "start": "1262240",
    "end": "1268559"
  },
  {
    "text": "want to make and then you'd end up with something like this does that suit you better than the",
    "start": "1268559",
    "end": "1274559"
  },
  {
    "text": "previous guy i don't know it's certainly very generic and very readable and if you wanted to maintain this thing",
    "start": "1274559",
    "end": "1281200"
  },
  {
    "text": "it would be very simple to throw in an extra rule if you wanted to take a rule out again just delete a line drops a",
    "start": "1281200",
    "end": "1286640"
  },
  {
    "text": "gooden it's clear what the rules do if someone comes back and says the rules aren't right you could just literally show them",
    "start": "1286640",
    "end": "1291919"
  },
  {
    "text": "this code and say what's wrong in this description and they could they the non-technical person could probably tell you oh",
    "start": "1291919",
    "end": "1297919"
  },
  {
    "text": "hang about it's actually the character between two and seven not two and six but bang jobs are good right",
    "start": "1297919",
    "end": "1304960"
  },
  {
    "text": "moving on to the uh the sort of programming exercise we may have seen before i'm going with bank accounts so",
    "start": "1304960",
    "end": "1311200"
  },
  {
    "text": "i've got my standard bank account with a balance and an interest rate i'll imagine that we inherit off that",
    "start": "1311200",
    "end": "1317039"
  },
  {
    "text": "with a super duper bank account she's got ballot the bonus interest rate and the the dodgy bank account which has got a",
    "start": "1317039",
    "end": "1322240"
  },
  {
    "text": "brown paper bag stuffed with money probably left in a car park now i usually make some sort of comment",
    "start": "1322240",
    "end": "1328480"
  },
  {
    "text": "about um a certain politician in the news whoever happens to be in the news at the",
    "start": "1328480",
    "end": "1333679"
  },
  {
    "text": "time but these days take a pic i give up",
    "start": "1333679",
    "end": "1339200"
  },
  {
    "text": "right now this is the sort of functional way of handling uh applying the interest now",
    "start": "1339200",
    "end": "1345039"
  },
  {
    "text": "obviously this is a grossly simplified version of applying interest but this is just out of the box c sharp",
    "start": "1345039",
    "end": "1352159"
  },
  {
    "text": "eight i believe it is where we are casing on the type",
    "start": "1352159",
    "end": "1357679"
  },
  {
    "text": "we're actually casing on which type it is based on this ba is referenced previously as",
    "start": "1357679",
    "end": "1364080"
  },
  {
    "text": "being the the sub to the uh the master the parent class which is the standard bank account",
    "start": "1364080",
    "end": "1369360"
  },
  {
    "text": "uh but if you case it based on it's a dodgy bank account here then it will actually be automatically",
    "start": "1369360",
    "end": "1375840"
  },
  {
    "text": "wrapped converted into a dodgy bank account here if it is in fact one and then we can run our rule here",
    "start": "1375840",
    "end": "1381360"
  },
  {
    "text": "referencing this local variable um without any worrying about checking edge types or anything like that we've",
    "start": "1381360",
    "end": "1387039"
  },
  {
    "text": "done an awful lot of if type of equals blah blah all sorted compressed into this and again here if",
    "start": "1387039",
    "end": "1393520"
  },
  {
    "text": "it's the super duper and i could even put a when in here to say if it has this particular balance so",
    "start": "1393520",
    "end": "1399520"
  },
  {
    "text": "this again is out of the box c sharp in fact i think this may be slightly out of date now but um my",
    "start": "1399520",
    "end": "1405760"
  },
  {
    "text": "point is that this is functional programming again this is pattern recognition this is",
    "start": "1405760",
    "end": "1410799"
  },
  {
    "text": "kind of what it looks like uh oh someone says if this doesn't turn into a c sharp eight switch i would just pointed sorry",
    "start": "1410799",
    "end": "1417280"
  },
  {
    "text": "stan you're gonna have to be disappointed i think this slide is that you'd be slightly out of date do look up city sharp eight switch",
    "start": "1417280",
    "end": "1423360"
  },
  {
    "text": "patterns because they're even more powerful than this stuff but this is all that pattern recognition is so um",
    "start": "1423360",
    "end": "1430159"
  },
  {
    "text": "yeah do do look into this stuff and i do believe that their intention is",
    "start": "1430159",
    "end": "1435200"
  },
  {
    "text": "to take inspiration from pure functional languages and add further uh content to this type as we go",
    "start": "1435200",
    "end": "1440720"
  },
  {
    "text": "along so another bit of fun with arrays of",
    "start": "1440720",
    "end": "1445840"
  },
  {
    "text": "functions you know now this is a super stupidly simplified version of",
    "start": "1445840",
    "end": "1452320"
  },
  {
    "text": "applying tax to salary it never really works like this in the real world but it is loosely based",
    "start": "1452320",
    "end": "1458159"
  },
  {
    "text": "on the uk tax system and what i have is a series of rules and",
    "start": "1458159",
    "end": "1464880"
  },
  {
    "text": "based on what your salary is i decide which rule to apply",
    "start": "1464880",
    "end": "1470480"
  },
  {
    "text": "now this would probably involve an awful lot of if statements if i had to write this out longhand but here what i've got is um",
    "start": "1470480",
    "end": "1478159"
  },
  {
    "text": "an array of tuples each of which contains a funct two functions i'm again assuming",
    "start": "1478159",
    "end": "1483520"
  },
  {
    "text": "that everyone is good with tuples but on the left hand side we've got our",
    "start": "1483520",
    "end": "1488720"
  },
  {
    "text": "conditioned a condition selector and on the right hand side we've got the actual rule to apply",
    "start": "1488720",
    "end": "1496640"
  },
  {
    "text": "uh so that's just a tuple where we've got decimal ball and decimal decibel here and down here i'm doing a bit of link to",
    "start": "1496640",
    "end": "1504000"
  },
  {
    "text": "say do dot first and dot first is saying get me the first where uh the condition",
    "start": "1504000",
    "end": "1510480"
  },
  {
    "text": "that is the left-hand one when you feed it the salary returns true",
    "start": "1510480",
    "end": "1515760"
  },
  {
    "text": "so what that will mean is it will go through these one at a time until it finds one that returns true so",
    "start": "1515760",
    "end": "1521760"
  },
  {
    "text": "if you have a salary less than 11 850 then it'll select this one out or if",
    "start": "1521760",
    "end": "1528799"
  },
  {
    "text": "you've got a whopping great salary over 150 000 because wouldn't that be a lovely thing",
    "start": "1528799",
    "end": "1534559"
  },
  {
    "text": "then it would select this one out but it's selecting out at this point the whole row so then what you have to",
    "start": "1534559",
    "end": "1541039"
  },
  {
    "text": "do is call the calculator i've called it calculated which is the second half of the tuple and then",
    "start": "1541039",
    "end": "1546559"
  },
  {
    "text": "feed salary into that that took me an awfully long time to explain",
    "start": "1546559",
    "end": "1552799"
  },
  {
    "text": "but actually once you've got that concept in your head understanding this looking at it is not",
    "start": "1552799",
    "end": "1558559"
  },
  {
    "text": "all that complicated we've got a set of rules we've got the transformation to apply and it's not all that complicated to",
    "start": "1558559",
    "end": "1565279"
  },
  {
    "text": "write excuse me so",
    "start": "1565279",
    "end": "1570799"
  },
  {
    "text": "moving on to some excuse me some other functional structures so let's imagine for a mode that we've",
    "start": "1570799",
    "end": "1576960"
  },
  {
    "text": "got um two different sources of data we've got a hypothetical database operation that",
    "start": "1576960",
    "end": "1583200"
  },
  {
    "text": "returns some data and we've got one that returns a null for example",
    "start": "1583200",
    "end": "1589039"
  },
  {
    "text": "uh a load of it says very cool tacticality to thank you very much",
    "start": "1589039",
    "end": "1594720"
  },
  {
    "text": "so i don't know what these could represent anything maybe one of them's an xml maybe one of them's",
    "start": "1594799",
    "end": "1599840"
  },
  {
    "text": "a a web api lookup doesn't really matter i don't really care use some imagination so i am saying that",
    "start": "1599840",
    "end": "1605840"
  },
  {
    "text": "i want to feed in let's say my name and then i",
    "start": "1605840",
    "end": "1610960"
  },
  {
    "text": "i want to get out some data and this structure here will allow me to try",
    "start": "1610960",
    "end": "1618080"
  },
  {
    "text": "each one in turn and then actually return out the one that works so normally i would have to do things",
    "start": "1618080",
    "end": "1625600"
  },
  {
    "text": "like null checking and stuff like that and this is a way of getting around all of that sort of annoying",
    "start": "1625600",
    "end": "1631600"
  },
  {
    "text": "code bump that you have to put up with so i'm saying here are two functions i don't know which one's going to work",
    "start": "1631600",
    "end": "1638159"
  },
  {
    "text": "try each one in turn and then bring me back whichever one works into here",
    "start": "1638159",
    "end": "1643440"
  },
  {
    "text": "and i don't really care except that i will now assume that it works and how does this actually work it's",
    "start": "1643440",
    "end": "1650799"
  },
  {
    "text": "kind of like this alt is as good a name as any for this i've heard now something you may hear me saying quite a bit over the next uh",
    "start": "1650799",
    "end": "1657760"
  },
  {
    "text": "next few slides is a lot of these things have got many names i've gone with one name that seemed like",
    "start": "1657760",
    "end": "1663039"
  },
  {
    "text": "a good name to me feel free to call it what you wish but i've heard this called alt i believe the proper name for this sort of structure",
    "start": "1663039",
    "end": "1669360"
  },
  {
    "text": "is a functor i think so this is an extension method i'm taking a t input again that's everything and then",
    "start": "1669360",
    "end": "1676720"
  },
  {
    "text": "i'm saying here's some funcs i've got f1 and f2 and i've also created another structure down",
    "start": "1676720",
    "end": "1683440"
  },
  {
    "text": "here called if default do now this takes uh this this takes the func which is the else",
    "start": "1683440",
    "end": "1690320"
  },
  {
    "text": "and it takes an input so what it does it says this by the way",
    "start": "1690320",
    "end": "1695919"
  },
  {
    "text": "is the slightly terrifying generic way of checking against null because",
    "start": "1695919",
    "end": "1701200"
  },
  {
    "text": "once you go into generics of course not everything is null by default if it's an integer or a",
    "start": "1701200",
    "end": "1707120"
  },
  {
    "text": "boolean or whatever they default to different things so this is checking against zero if it's an",
    "start": "1707120",
    "end": "1712480"
  },
  {
    "text": "int and so on so forth so i'm saying that if this thing is null then take the else",
    "start": "1712480",
    "end": "1719120"
  },
  {
    "text": "function and run it with the input otherwise just return whatever it was the thing that wasn't null",
    "start": "1719120",
    "end": "1724799"
  },
  {
    "text": "shove it back again so that means that i will now say function one run function one pass it",
    "start": "1724799",
    "end": "1730240"
  },
  {
    "text": "the input if default do so if function one executes and we get out",
    "start": "1730240",
    "end": "1735279"
  },
  {
    "text": "a null value or equivalent then execute function two passing in this",
    "start": "1735279",
    "end": "1740960"
  },
  {
    "text": "if this came out with a value do not execute function two and whatever the result of this guy was",
    "start": "1740960",
    "end": "1748080"
  },
  {
    "text": "return it again took me a long time to explain it pretty simple in practice",
    "start": "1748080",
    "end": "1754640"
  },
  {
    "text": "this is another similar structure this is a fork i could make some sort of rude joke here but i shan't i'm better than that",
    "start": "1755200",
    "end": "1762000"
  },
  {
    "text": "um and hypothetically this is an input and i have chosen a",
    "start": "1762000",
    "end": "1768720"
  },
  {
    "text": "deliberately stupidly simple example i don't know why you never want to do this in the real world but again i don't",
    "start": "1768720",
    "end": "1774559"
  },
  {
    "text": "want to get bogged down in the logic of what i'm trying to accomplish i'm just trying to illustrate",
    "start": "1774559",
    "end": "1779600"
  },
  {
    "text": "a technique so hypothetically i want to go and count how many a's how many b's and",
    "start": "1779600",
    "end": "1785120"
  },
  {
    "text": "how many c's are in this input string and i want those all to be done",
    "start": "1785120",
    "end": "1790559"
  },
  {
    "text": "separately so i am going to do dot fork so a fork is kind of like you know",
    "start": "1790559",
    "end": "1796320"
  },
  {
    "text": "it's got prongs and a thing linking them together so each prong of the fork",
    "start": "1796320",
    "end": "1801600"
  },
  {
    "text": "is um is a different function which is doing a different operation on the source input the same input each",
    "start": "1801600",
    "end": "1808799"
  },
  {
    "text": "one of these prongs is acting on the same input and doing a different thing and then this function here sticks them",
    "start": "1808799",
    "end": "1815840"
  },
  {
    "text": "all together so because i'm using a params and stuff i've had to put the sticker together",
    "start": "1815840",
    "end": "1821600"
  },
  {
    "text": "thing at the beginning but that's just how we have to do it uh you could do all sorts of alternatives if you wished and what i'm",
    "start": "1821600",
    "end": "1828880"
  },
  {
    "text": "doing is just summing them i mean maybe you wouldn't really sum them you could do all sorts of other complicated",
    "start": "1828880",
    "end": "1834240"
  },
  {
    "text": "operations it doesn't really matter but you get the idea single input split it into multiple functions which",
    "start": "1834240",
    "end": "1840240"
  },
  {
    "text": "run separately back into a final output at the end",
    "start": "1840240",
    "end": "1846480"
  },
  {
    "text": "and how you do it is something like this uh map incidentally is one of the greatest little tools in c-sharp that",
    "start": "1846720",
    "end": "1852559"
  },
  {
    "text": "you never knew that you missed and all it does is attach to everything and then",
    "start": "1852559",
    "end": "1858080"
  },
  {
    "text": "take a function which converts whatever this is to the next thing just means that you can basically do link",
    "start": "1858080",
    "end": "1864799"
  },
  {
    "text": "but instead of selecting and applying to each item in the array you're selecting base and transforming",
    "start": "1864799",
    "end": "1870240"
  },
  {
    "text": "the whole object i just find it means you can compact a code an awful lot tighter",
    "start": "1870240",
    "end": "1875279"
  },
  {
    "text": "so i'm saying that the prongs are a params taking function of input to output",
    "start": "1875279",
    "end": "1880880"
  },
  {
    "text": "and we're selecting them based on whatever the transformation function is",
    "start": "1880880",
    "end": "1885919"
  },
  {
    "text": "and then mapping with a join function so oh sorry passing in the parameter sorry and then using the join function to",
    "start": "1885919",
    "end": "1892559"
  },
  {
    "text": "stick them all together again now you could go as complicated as like this stuff i have written fork functions",
    "start": "1892559",
    "end": "1897840"
  },
  {
    "text": "which had multiple stages because i wanted to convert from type to type to type you could do all that sort of thing but",
    "start": "1897840",
    "end": "1903519"
  },
  {
    "text": "this is the simplest possible explanation version of of this structure",
    "start": "1903519",
    "end": "1910000"
  },
  {
    "text": "so i mentioned currying briefly but i'm good right currying korean uh someone just",
    "start": "1910480",
    "end": "1916720"
  },
  {
    "text": "asked how async can await with playing with his forking it would play very well indeed uh i haven't actually",
    "start": "1916720",
    "end": "1922000"
  },
  {
    "text": "written an async version of it but i would imagine that you'd probably just put in a weight uh inside the extension method and have",
    "start": "1922000",
    "end": "1928960"
  },
  {
    "text": "that wait for each of the prongs to um to complete and then return the result at the end",
    "start": "1928960",
    "end": "1934960"
  },
  {
    "text": "and you'd make the whole thing async i mentioned right back at the beginning but uh things like async are very well",
    "start": "1934960",
    "end": "1941039"
  },
  {
    "text": "supported by functional programming so it plays very very well with that sort of thing",
    "start": "1941039",
    "end": "1946799"
  },
  {
    "text": "carrying so this is a hypothetical normal function this is an add a plus b",
    "start": "1946799",
    "end": "1952640"
  },
  {
    "text": "wow that's simple give it 10 give it 20 we get back at 30. but let's imagine that this was a",
    "start": "1952640",
    "end": "1960399"
  },
  {
    "text": "curried add function and i only give it a single parameter what do i get out of this if i've only",
    "start": "1960399",
    "end": "1967039"
  },
  {
    "text": "given it two per one parameter when it takes two the answer",
    "start": "1967039",
    "end": "1972960"
  },
  {
    "text": "is and by the way this is a rule of thumb with functional programming if there is a question the answer is",
    "start": "1972960",
    "end": "1978240"
  },
  {
    "text": "functions mostly works and yes the answer is you get out",
    "start": "1978240",
    "end": "1984559"
  },
  {
    "text": "nothing because my there we go we get a function so we give it one parameter out of the",
    "start": "1984559",
    "end": "1992240"
  },
  {
    "text": "two what we get back is a function which represents the base function but where one of the",
    "start": "1992240",
    "end": "1998320"
  },
  {
    "text": "parameters is now filled in so by giving it a 10 it has now become an add 10 function",
    "start": "1998320",
    "end": "2005120"
  },
  {
    "text": "if i give it a 20 it would now be an add 20 function and so on and we could store that locally it means that you can take a great big",
    "start": "2005120",
    "end": "2010880"
  },
  {
    "text": "long function with loads of parameters and apply them piece by piece and reuse each piece of it multiple times if you wish",
    "start": "2010880",
    "end": "2016960"
  },
  {
    "text": "without writing a whole load of similar but not quite the same code to uh accomplish various different means",
    "start": "2016960",
    "end": "2024480"
  },
  {
    "text": "so question on everybody's lips i am sure is can you do this in c sharp bit",
    "start": "2024480",
    "end": "2030960"
  },
  {
    "text": "sorter this is probably the most effective way i've found to do it um that is",
    "start": "2030960",
    "end": "2040960"
  },
  {
    "text": "what you notice here is that there are two arrows so this is an arrow function returning",
    "start": "2040960",
    "end": "2047039"
  },
  {
    "text": "another arrow function so this does indeed do roughly what you saw on the other page um",
    "start": "2047039",
    "end": "2054480"
  },
  {
    "text": "if you pass a 10 in to this what you will get is this arrow function back where this x",
    "start": "2054480",
    "end": "2060480"
  },
  {
    "text": "has now been filled in with a 10 and so long as wherever you've stored the call to this",
    "start": "2060480",
    "end": "2065919"
  },
  {
    "text": "is still in scope this whole thing remains in scope as well so excuse me do watch out if you're writing",
    "start": "2065919",
    "end": "2072720"
  },
  {
    "text": "this sort of thing the order of operations is important so that of course has to be a y minus x",
    "start": "2072720",
    "end": "2077760"
  },
  {
    "text": "so you absolutely can that's the easy way does this have its uses it does it",
    "start": "2077760",
    "end": "2084000"
  },
  {
    "text": "can kind of prettify some of the code that you might write elsewhere uh",
    "start": "2084000",
    "end": "2090158"
  },
  {
    "text": "to maya to add in more sort of descriptive language i have seen other ways of doing this in",
    "start": "2090159",
    "end": "2095599"
  },
  {
    "text": "c sharp with extension methods but i can recommend a book which talks about that sort of thing it looks",
    "start": "2095599",
    "end": "2101520"
  },
  {
    "text": "pretty ugly behind the scenes but it does work so it is possible but it requires an awful",
    "start": "2101520",
    "end": "2107040"
  },
  {
    "text": "lot of malforming of c-sharp to make it happen so this is a plaza",
    "start": "2107040",
    "end": "2114880"
  },
  {
    "text": "back to our doctor who uh in fact anyone to talk about some of this stuff in a minute so this is excuse me a funk which is",
    "start": "2114880",
    "end": "2122240"
  },
  {
    "text": "parsing these doctor who stories what i'm doing is taking a b c and d so",
    "start": "2122240",
    "end": "2127359"
  },
  {
    "text": "a is i believe the whole string b is which character do i split on",
    "start": "2127359",
    "end": "2133599"
  },
  {
    "text": "in bc is which of these three fields do i actually wish to extract and d is the source data itself",
    "start": "2133599",
    "end": "2141760"
  },
  {
    "text": "i think yes d is the actual source data so the spring itself",
    "start": "2141760",
    "end": "2147760"
  },
  {
    "text": "so excuse me how can i actually partially apply this",
    "start": "2147760",
    "end": "2152880"
  },
  {
    "text": "stuff do something like this i have created an",
    "start": "2152880",
    "end": "2158400"
  },
  {
    "text": "extension method called apply so first off i am calling the funk",
    "start": "2158400",
    "end": "2164000"
  },
  {
    "text": "and i'm calling dot apply how apply works i'll get to in a minute i'll show you but i am passing in two parameters out",
    "start": "2164000",
    "end": "2171359"
  },
  {
    "text": "of the four this means that this parse here has now",
    "start": "2171359",
    "end": "2176400"
  },
  {
    "text": "become a parser which given any amount of string any strings at all will split on new line then split on comma to",
    "start": "2176400",
    "end": "2184000"
  },
  {
    "text": "create an array of arrays a two-dimensional array and i can reuse this one as many times as i want if i've got a whole load of um",
    "start": "2184000",
    "end": "2191839"
  },
  {
    "text": "other stuff to you know to be processed elsewhere i can just reuse this same exact thing and i don't have to write separate",
    "start": "2191839",
    "end": "2197760"
  },
  {
    "text": "functions to do it this handles all of it for me then i'm going to write a function here",
    "start": "2197760",
    "end": "2204000"
  },
  {
    "text": "which is taking the pars and then just passing in one function with the apply",
    "start": "2204000",
    "end": "2209280"
  },
  {
    "text": "and it's saying 0 0 being the 0th position out of the array which is the story",
    "start": "2209280",
    "end": "2215040"
  },
  {
    "text": "codes and then if you pass in this string into here these new lines are just here for the",
    "start": "2215040",
    "end": "2220880"
  },
  {
    "text": "sake of making this readable uh then you get back abcd and so on basically",
    "start": "2220880",
    "end": "2226400"
  },
  {
    "text": "piece by piece i've created separate reusable functions which i have partially applied to and i",
    "start": "2226400",
    "end": "2232880"
  },
  {
    "text": "get back a list of the story codes here i've referenced pars again",
    "start": "2232880",
    "end": "2238720"
  },
  {
    "text": "so without having to write another parser or write another block of parsing code this time i've partially applied but",
    "start": "2238720",
    "end": "2243760"
  },
  {
    "text": "giving it one so without writing any of the code i've now got a function which will blast through this",
    "start": "2243760",
    "end": "2249520"
  },
  {
    "text": "break it into lines break it into fields select out the warmth position which is the story title and then return it",
    "start": "2249520",
    "end": "2257359"
  },
  {
    "text": "so it means that you can write one function which does everything and then use something like apply to",
    "start": "2257359",
    "end": "2263520"
  },
  {
    "text": "apply in the parameters piece by piece and then reuse each of those pieces wherever you wish",
    "start": "2263520",
    "end": "2268640"
  },
  {
    "text": "without writing an awful lot of vaguely duplicated code what apply looks like is something like",
    "start": "2268640",
    "end": "2274000"
  },
  {
    "text": "this now i did say it was ugly and it is uh yeah i'm not gonna dwell an awful lot",
    "start": "2274000",
    "end": "2279760"
  },
  {
    "text": "on this but basically you're saying given a pr um a funk with this many",
    "start": "2279760",
    "end": "2285119"
  },
  {
    "text": "parameters i'm going to return back a funk with fewer parameters and i'm going to stitch",
    "start": "2285119",
    "end": "2290480"
  },
  {
    "text": "in the uh the appropriate bits myself when i return it it means that if you wanted to do this",
    "start": "2290480",
    "end": "2296240"
  },
  {
    "text": "method and by all means do it it means that for every combination of how many parameters",
    "start": "2296240",
    "end": "2302079"
  },
  {
    "text": "in to how many parameters out you're going to have to write one of these extension methods",
    "start": "2302079",
    "end": "2307520"
  },
  {
    "text": "so potentially an awful lot of writing i don't think it's necessarily a useless endeavor it can mean that your code can",
    "start": "2307520",
    "end": "2315119"
  },
  {
    "text": "become an awful lot nicer it's just that i would probably shove this in a code file somewhere way at the back",
    "start": "2315119",
    "end": "2320320"
  },
  {
    "text": "of the code base and try and pretend it doesn't exist but why not so last",
    "start": "2320320",
    "end": "2326800"
  },
  {
    "text": "phase of a functional flow this is a typical functional flow we start off with a string or whatever",
    "start": "2326800",
    "end": "2331839"
  },
  {
    "text": "it doesn't really matter we start off with one thing and then typically the first instance you can you split it up into many things",
    "start": "2331839",
    "end": "2339200"
  },
  {
    "text": "functional programming works in many ways more like tsql or symbol aware we're applying list based operations",
    "start": "2339200",
    "end": "2345680"
  },
  {
    "text": "to a whole load of data in one go so we'll do some where's we'll do some selects we're converting types we're doing all",
    "start": "2345680",
    "end": "2351839"
  },
  {
    "text": "sorts of stuff and then the final method is aggregate so we're aggregating",
    "start": "2351839",
    "end": "2357200"
  },
  {
    "text": "many things down to one thing and the traditional method of course is",
    "start": "2357200",
    "end": "2362400"
  },
  {
    "text": "to have uh something like a list which we're appending to or here this is a um a string builder same principle",
    "start": "2362400",
    "end": "2370800"
  },
  {
    "text": "loop through append loop through append i'll just do a string.join which is the",
    "start": "2370800",
    "end": "2376320"
  },
  {
    "text": "really nice simple way of doing it and this is more the functional way of of thinking",
    "start": "2376320",
    "end": "2383838"
  },
  {
    "text": "this is a whole load of story data again for doctor who because doctor who is the best and i've",
    "start": "2384079",
    "end": "2390079"
  },
  {
    "text": "got here things like the ratings the number of episodes in that story because back in the old days doctor who was",
    "start": "2390079",
    "end": "2396000"
  },
  {
    "text": "always multiple episodes for each story and the number of missing episodes because tragedy tragedy",
    "start": "2396000",
    "end": "2401359"
  },
  {
    "text": "there are missing episodes of doctor who there are i believe 97 missing episodes if anyone's got them hand them over i want them",
    "start": "2401359",
    "end": "2407040"
  },
  {
    "text": "but there we go that's the way it is so what if i wanted to aggregate a whole load of data out of",
    "start": "2407040",
    "end": "2412079"
  },
  {
    "text": "this i feel like i'm almost telling you something that's simple here but i have been astonished by how many people don't",
    "start": "2412079",
    "end": "2417920"
  },
  {
    "text": "know about this but obviously you've got your extremely simple basic aggregators we've got",
    "start": "2417920",
    "end": "2424079"
  },
  {
    "text": "some passing and a function to tell it what to sum similarly i've got average passing a",
    "start": "2424079",
    "end": "2429760"
  },
  {
    "text": "function to tell it what to average and then we've got our more complicated aggregator and again",
    "start": "2429760",
    "end": "2435680"
  },
  {
    "text": "i'm astonished how many people don't know about this but it is i think one of the coolest things in c",
    "start": "2435680",
    "end": "2441119"
  },
  {
    "text": "sharp next to dictionaries dictionaries are actually my favorite thing at c sharp i love dictionaries so what is this aggregate",
    "start": "2441119",
    "end": "2449280"
  },
  {
    "text": "doing well first we give it a seed value now in my case i'm giving it a tuple",
    "start": "2449280",
    "end": "2454960"
  },
  {
    "text": "and not a notch so two integers with zero and zero as the um the starting values and then i am",
    "start": "2454960",
    "end": "2462240"
  },
  {
    "text": "passing in a function with two parameters the accumulator and the current value call these as you wish this is what i",
    "start": "2462240",
    "end": "2467359"
  },
  {
    "text": "tend to go with the current value is just like your x in a normal link expression in a select or",
    "start": "2467359",
    "end": "2473040"
  },
  {
    "text": "whatever that's the current value coming out that's each item in the array one after the other and the accumulator is the running total",
    "start": "2473040",
    "end": "2480400"
  },
  {
    "text": "so far so the first time this operates on the first item in the array it's zero of",
    "start": "2480400",
    "end": "2485520"
  },
  {
    "text": "zero this function then tells the accumulate the next accumulator what the value",
    "start": "2485520",
    "end": "2491520"
  },
  {
    "text": "should be so we take in the accumulator item one and then add to it the current number of",
    "start": "2491520",
    "end": "2498000"
  },
  {
    "text": "missing episodes and again on item two and then add in the number of episodes so piece by piece what we're doing is",
    "start": "2498000",
    "end": "2503839"
  },
  {
    "text": "blasting through this and creating a running total of how many episodes in the story versus how many missing episodes",
    "start": "2503839",
    "end": "2511200"
  },
  {
    "text": "by the way around there and then we can do a percentage at the end this is ridiculously simple stuff and you might",
    "start": "2511200",
    "end": "2517680"
  },
  {
    "text": "possibly not entirely want to do something so simple with aggregation but again i'm keeping this simple just to",
    "start": "2517680",
    "end": "2524160"
  },
  {
    "text": "demonstrate the technique you could imagine passing this all sorts of complex objects and then doing operations on them",
    "start": "2524160",
    "end": "2529760"
  },
  {
    "text": "to reduce them down into an answer at the end and i would probably not let this get",
    "start": "2529760",
    "end": "2535359"
  },
  {
    "text": "too complicated without breaking it off into sub functions anyway but you get the idea so this is",
    "start": "2535359",
    "end": "2542079"
  },
  {
    "text": "incredibly powerful it means that you don't have to generally speaking you don't have to do that",
    "start": "2542079",
    "end": "2547520"
  },
  {
    "text": "for each with a list or anything like that again you could probably do something like this",
    "start": "2547520",
    "end": "2552640"
  },
  {
    "text": "uh i've used this a great deal certainly in the in my day job and in things like if anyone's familiar with the advent of",
    "start": "2552640",
    "end": "2558640"
  },
  {
    "text": "code i do love the advent of code and i use this sort of thing an awful lot in that",
    "start": "2558640",
    "end": "2565838"
  },
  {
    "text": "so uh i don't really have time for this this is a bit of head-meltingly complicated code and i saved this for",
    "start": "2566560",
    "end": "2572160"
  },
  {
    "text": "user groups when i have to talk for longer so if anyone's interested in seeing a bit of insanely complicated code talk to me",
    "start": "2572160",
    "end": "2577520"
  },
  {
    "text": "afterwards right uh last piece i believe and then we can all rest because i believe we're running out of time",
    "start": "2577520",
    "end": "2582880"
  },
  {
    "text": "right fahrenheit to celsius i used to work for an american company and one of the things we often used to",
    "start": "2582880",
    "end": "2589440"
  },
  {
    "text": "talk about because i am british is the weather uh it is not a cliche we really do talk about the weather a lot",
    "start": "2589440",
    "end": "2596319"
  },
  {
    "text": "uh mostly because it's so flipping uh unpredictable over here so they would say to me and i'm not",
    "start": "2596319",
    "end": "2602640"
  },
  {
    "text": "doing the accent i can't do it it's embarrassing uh how bad my accent is that is right they would say to me things like it's",
    "start": "2602640",
    "end": "2608319"
  },
  {
    "text": "100 degrees outside and i think whoa 100 degrees outside that sounds like you should be dead",
    "start": "2608319",
    "end": "2614160"
  },
  {
    "text": "but no that's in fahrenheit working on celsius i think something like 32 which",
    "start": "2614160",
    "end": "2619280"
  },
  {
    "text": "is yeah it's quite nice right what is the process for converting fahrenheit",
    "start": "2619280",
    "end": "2624319"
  },
  {
    "text": "into celsius well it's deduct 32 multiplied by 5 divided by 9.",
    "start": "2624319",
    "end": "2630240"
  },
  {
    "text": "course it is wow so then i'm doing some rounding because i",
    "start": "2630240",
    "end": "2635760"
  },
  {
    "text": "don't want a great big long amazing uh super detailed decimal and",
    "start": "2635760",
    "end": "2641520"
  },
  {
    "text": "then i'm formatting it here nicely into something with a degree centigrade on the end",
    "start": "2641520",
    "end": "2647520"
  },
  {
    "text": "so what's a nicer way of rendering all of this lot this is a structure called an identity",
    "start": "2647520",
    "end": "2654319"
  },
  {
    "text": "let's not dwell too much on why it's called that it's got lots of names or too much about the detail but what",
    "start": "2654319",
    "end": "2660960"
  },
  {
    "text": "you have to bear in mind here is this is an identity of t so this is of tybena thing doesn't really matter what and inside here",
    "start": "2660960",
    "end": "2668000"
  },
  {
    "text": "is a value it's a t it's a dirty and it's called value so it's a thing in a box that's the only thing",
    "start": "2668000",
    "end": "2675119"
  },
  {
    "text": "we need to worry about think in a box we got a box inside of the thing the thing is our value",
    "start": "2675119",
    "end": "2680319"
  },
  {
    "text": "easy i got a couple of little bits of syntactic sugar down here some implicit operators it's just",
    "start": "2680319",
    "end": "2685839"
  },
  {
    "text": "because i'm far too lazy to do all that typing and i have got because i'm being a",
    "start": "2685839",
    "end": "2692079"
  },
  {
    "text": "functional programmer i'm not letting you change it this does not have a setter the only way that you can set it",
    "start": "2692079",
    "end": "2697680"
  },
  {
    "text": "is in the uh constructor so a couple of extension methods i'm",
    "start": "2697680",
    "end": "2703920"
  },
  {
    "text": "creating one called two identity and this is attaching to everything and all it does is",
    "start": "2703920",
    "end": "2709440"
  },
  {
    "text": "whatever the thing that you just called to identity on it takes that value whatever it was and stuffs it in the box so you've got the",
    "start": "2709440",
    "end": "2715839"
  },
  {
    "text": "thing in the box and then bind this is where the magic happens bind is not all that different to the map function i referenced earlier",
    "start": "2715839",
    "end": "2723040"
  },
  {
    "text": "so this again attaches to uh all identities so once you're in identity this bind will now attach",
    "start": "2723040",
    "end": "2730160"
  },
  {
    "text": "and all i want from you is a function which takes the old one and turns it into the new one so that's",
    "start": "2730160",
    "end": "2736000"
  },
  {
    "text": "my multiply nine my divide whatever that's the thing but the process and then whatever that function is i'm going to run it",
    "start": "2736000",
    "end": "2742079"
  },
  {
    "text": "and then whatever it comes out of it i'll stuff it inside another identity so take your function take my thing out of",
    "start": "2742079",
    "end": "2747599"
  },
  {
    "text": "the box run it into your function pull out the new thing stuff into a new box give it your back",
    "start": "2747599",
    "end": "2755119"
  },
  {
    "text": "and now my fahrenheit to celsius looks like this it's a nice orderly chain of operations",
    "start": "2757200",
    "end": "2764079"
  },
  {
    "text": "so i have also used i did mention that they have their uses my um my curried adds and subtracts and",
    "start": "2764079",
    "end": "2770400"
  },
  {
    "text": "all that sort of thing from earlier i've used them here now if you wanted to you could do something like x arrow",
    "start": "2770400",
    "end": "2775839"
  },
  {
    "text": "x minus 32 but i don't know i kind of like to make my code very descriptive so each bind",
    "start": "2775839",
    "end": "2783839"
  },
  {
    "text": "is running the function opacity so these are functions these are functions these are exactly the same as arrow functions",
    "start": "2783839",
    "end": "2789119"
  },
  {
    "text": "i'm just writing it in a descriptive way so this bind says take whatever the input is run this function which is a subtract",
    "start": "2789119",
    "end": "2795119"
  },
  {
    "text": "32 function take that whatever it is if i started with 100 then what does that make it oh",
    "start": "2795119",
    "end": "2800880"
  },
  {
    "text": "god my mental rights would take it's so bad 68 i think and then stuff that inside another identity",
    "start": "2800880",
    "end": "2806400"
  },
  {
    "text": "which can then be called with another bind and we do another operation and because uh i've made it a t input to",
    "start": "2806400",
    "end": "2812880"
  },
  {
    "text": "t output um you can convert type to type as you go through this chain",
    "start": "2812880",
    "end": "2818480"
  },
  {
    "text": "otherwise we might have to add an awful lot of sort of little local variables with different uh with the different values in as we go",
    "start": "2818480",
    "end": "2825839"
  },
  {
    "text": "along and you'd end up with all these little local variables that you'd have to just chuck away someone says more sound effects",
    "start": "2825839",
    "end": "2834000"
  },
  {
    "text": "right the name for this kind of structure is a monad i said i would not explain",
    "start": "2834720",
    "end": "2841040"
  },
  {
    "text": "what they were i lied this is a monad this is just about the simplest stupidest monad that",
    "start": "2841040",
    "end": "2847359"
  },
  {
    "text": "you can imagine but it is in fact a monad so what is a monad someone just said this is the equivalent",
    "start": "2847359",
    "end": "2853119"
  },
  {
    "text": "of piping in a command prompt absolutely exactly the same concept if you understand piping in the",
    "start": "2853119",
    "end": "2858960"
  },
  {
    "text": "command prompt basically you understand moan ads to a degree but that's all the monad is it's like a",
    "start": "2858960",
    "end": "2864480"
  },
  {
    "text": "relay race you've got each person passing the baton to the next except that each person's not just",
    "start": "2864480",
    "end": "2870720"
  },
  {
    "text": "literally passing unchanged they're doing an operation they're multiplying they're dividing their i don't know chunking it up whatever it",
    "start": "2870720",
    "end": "2876000"
  },
  {
    "text": "was you want to do and then passing the new version to the next person and then so on that's",
    "start": "2876000",
    "end": "2881119"
  },
  {
    "text": "what a monad is it's not that hard is it i think that's quite easy",
    "start": "2881119",
    "end": "2887838"
  },
  {
    "text": "and this is something else that you might possibly want to do if like me you grew up in the 90s and",
    "start": "2888800",
    "end": "2894880"
  },
  {
    "text": "you think you are cool you might want to replace various letters from your name with letters to",
    "start": "2894880",
    "end": "2901359"
  },
  {
    "text": "make it leap because leetspeak's still cool isn't it isn't it cool it's cool yeah still cool so",
    "start": "2901359",
    "end": "2909119"
  },
  {
    "text": "i've created another moan ad called maybe i'll get onto it in a minute but uh same",
    "start": "2909119",
    "end": "2915119"
  },
  {
    "text": "principle though i'm binding um with all my various functions my first bind is take the id here which",
    "start": "2915119",
    "end": "2922559"
  },
  {
    "text": "is for the sake of argument uh an integer probably doesn't want to be an integer in real life",
    "start": "2922559",
    "end": "2928160"
  },
  {
    "text": "but i'm that's going away to a hypothetical database and coming back with the value and then we're like taking some uh",
    "start": "2928160",
    "end": "2935599"
  },
  {
    "text": "details first name last name and age and then i'm replacing a's with fours with threes ice with ones",
    "start": "2935599",
    "end": "2941280"
  },
  {
    "text": "there's probably a function here that will take your baseball cap put it backwards too just to be even more cool",
    "start": "2941280",
    "end": "2947119"
  },
  {
    "text": "but the problem is that get person two here might not necessarily actually return a",
    "start": "2947119",
    "end": "2953520"
  },
  {
    "text": "value person id12 might not exist this might come back as null",
    "start": "2953520",
    "end": "2959680"
  },
  {
    "text": "so if that would happen well what happens in this bind when this operates if x here is null",
    "start": "2959680",
    "end": "2966400"
  },
  {
    "text": "someone says missing t to seven yes you're right i need a t to seven darn it right but if this comes",
    "start": "2966400",
    "end": "2972720"
  },
  {
    "text": "back as null then um this is null this is null",
    "start": "2972720",
    "end": "2978400"
  },
  {
    "text": "this explodes in flames so that's not good so says how will we",
    "start": "2978400",
    "end": "2986880"
  },
  {
    "text": "know if we're leak yay you can't you're just exploded pull up you right but how can monads rescue us from",
    "start": "2986880",
    "end": "2993760"
  },
  {
    "text": "this scenario it can with the baby so this is the maybe",
    "start": "2993760",
    "end": "3000240"
  },
  {
    "text": "so we've got an ab now we've got this here is the equivalent of our identity before",
    "start": "3000240",
    "end": "3005599"
  },
  {
    "text": "thing in a box in a box and this is called baby it's an abstract",
    "start": "3005599",
    "end": "3011280"
  },
  {
    "text": "though i do not ever want you to actually instantiate a maybe not direct and i've",
    "start": "3011280",
    "end": "3016640"
  },
  {
    "text": "got an abstract t value here another implicit operator because i'm just lazy",
    "start": "3016640",
    "end": "3021680"
  },
  {
    "text": "and i have implemented it out into two subclasses now i've heard these called",
    "start": "3021680",
    "end": "3027359"
  },
  {
    "text": "all sorts of things i've heard maybe also called option i've heard so just also called something nothing's",
    "start": "3027359",
    "end": "3035119"
  },
  {
    "text": "pretty consistently called nothing though fine but anyway you may find these under different names it's all the same",
    "start": "3035119",
    "end": "3040720"
  },
  {
    "text": "concept but this means this just is an instance",
    "start": "3040720",
    "end": "3046000"
  },
  {
    "text": "of the maybe where the operation worked and this is an instance of it where it didn't work the just here is",
    "start": "3046000",
    "end": "3053839"
  },
  {
    "text": "exactly the same as an identity it's just thing in a box carry on like normal but nothing on the other hand here",
    "start": "3053839",
    "end": "3059839"
  },
  {
    "text": "this overrides it and so if you can see for me my video is blocking that but that's default",
    "start": "3059839",
    "end": "3065760"
  },
  {
    "text": "so i'm overriding t value and i'm saying that is just the default that it's zero if it's an int it's null if it's",
    "start": "3065760",
    "end": "3071359"
  },
  {
    "text": "anything else you get the idea and those are the two possible states that my monad can exist in",
    "start": "3071359",
    "end": "3078000"
  },
  {
    "text": "something or nothing just or nothing whatever call them what you watch",
    "start": "3078000",
    "end": "3083839"
  },
  {
    "text": "and this is how i actually implement it so i've still got my two maybe which is exactly the same as my two identity",
    "start": "3084240",
    "end": "3089359"
  },
  {
    "text": "that's just take this thing turn it into a thing in a box easy but i've got a more complicated",
    "start": "3089359",
    "end": "3095280"
  },
  {
    "text": "maybe now the parameters the same a thunk that takes old type to new type",
    "start": "3095280",
    "end": "3100880"
  },
  {
    "text": "and the maybe which is the this and i'm switching on it i'm switching on this the maybe and",
    "start": "3100880",
    "end": "3107040"
  },
  {
    "text": "first i'm casing that i am saying that i'm casing that is adjust that is it does contain a value",
    "start": "3107040",
    "end": "3112559"
  },
  {
    "text": "currently when and this is again the the default check i'm saying that it's not null so this",
    "start": "3112559",
    "end": "3119040"
  },
  {
    "text": "case is assuming that the previous operation worked and that we got um",
    "start": "3119040",
    "end": "3124480"
  },
  {
    "text": "a not null value out of it if that's true we'll go into a try catch statement and",
    "start": "3124480",
    "end": "3131119"
  },
  {
    "text": "we'll actually run the function if it explodes then we'll return a nothing",
    "start": "3131119",
    "end": "3138800"
  },
  {
    "text": "if it succeeds we'll return out something but it might be that it contained null in",
    "start": "3138800",
    "end": "3144240"
  },
  {
    "text": "which case the next time that we execute this we'll check it and if it's null or if it's already in",
    "start": "3144240",
    "end": "3150800"
  },
  {
    "text": "nothing then we just do no operations at all and go straight to nothing so the best explanation i",
    "start": "3150800",
    "end": "3159040"
  },
  {
    "text": "ever heard of this was from the website f sharp for fun and profit marvellous website not just ref sharp",
    "start": "3159040",
    "end": "3166000"
  },
  {
    "text": "developers there's some very nice conceptual articles it's scott flashing i believe his name is and he described this as something like",
    "start": "3166000",
    "end": "3172640"
  },
  {
    "text": "railway orientated architecture now this is a metaphor i love a lot and i'd recommend that website",
    "start": "3172640",
    "end": "3177920"
  },
  {
    "text": "but imagine that you've got uh imagine you've got uh two sets of train lines you've got",
    "start": "3177920",
    "end": "3183760"
  },
  {
    "text": "the the something line and the nothing line and every function is a set of points",
    "start": "3183760",
    "end": "3189520"
  },
  {
    "text": "along the line and at every set of points we check is this still working is this still working",
    "start": "3189520",
    "end": "3194640"
  },
  {
    "text": "if at any point it doesn't work for anyone in any way we switch we switch from the happy line",
    "start": "3194640",
    "end": "3201520"
  },
  {
    "text": "the just line the something line over to the nothing line and we just coast all the way to the end",
    "start": "3201520",
    "end": "3208160"
  },
  {
    "text": "so that means any functions after that point are not executed",
    "start": "3208160",
    "end": "3213920"
  },
  {
    "text": "it packs in an awful lot of functionality but doesn't actually require much thought once you understand it and",
    "start": "3213920",
    "end": "3220559"
  },
  {
    "text": "gives you um an awful lot more uh i want to just put the f sharp fun and profit",
    "start": "3220559",
    "end": "3225920"
  },
  {
    "text": "link in the um uh oh uh in the chat there i'll probably try",
    "start": "3225920",
    "end": "3232400"
  },
  {
    "text": "and share those in my notes afterwards it's a very good website but yeah so the point is that things like",
    "start": "3232400",
    "end": "3238319"
  },
  {
    "text": "try catching is now baked into the data into the structure of our code checking",
    "start": "3238319",
    "end": "3243599"
  },
  {
    "text": "against null is now baked into the structure i code those are two things that normally we'd",
    "start": "3243599",
    "end": "3248960"
  },
  {
    "text": "have to do time after time after time in order to make sure that our code stays robust but now it's just here we don't need to",
    "start": "3248960",
    "end": "3255599"
  },
  {
    "text": "anymore turn it into a maybe call bind the null check and the the try catch are just",
    "start": "3255599",
    "end": "3262559"
  },
  {
    "text": "fundamentally provided for you and in theory you shouldn't ever be having",
    "start": "3262559",
    "end": "3267680"
  },
  {
    "text": "any more exceptions ever again which is nice",
    "start": "3267680",
    "end": "3273440"
  },
  {
    "text": "uh how are we doing oh that's time okay i'll just blast through this really quickly because we're about out of time",
    "start": "3274160",
    "end": "3279520"
  },
  {
    "text": "but this is a slightly more complicated version again this is either and roughly the same idea except we've got a left",
    "start": "3279520",
    "end": "3285359"
  },
  {
    "text": "and a right uh i've heard these again called all sorts of things uh your your right is your happy path",
    "start": "3285359",
    "end": "3291839"
  },
  {
    "text": "your right hand of justice your left your left hand of evil left hand of darkness that's it didn't work",
    "start": "3291839",
    "end": "3297200"
  },
  {
    "text": "but the diff it's roughly the same concept as the maybe except in both cases i'm catching the value i'm",
    "start": "3297200",
    "end": "3302480"
  },
  {
    "text": "still maintaining oh no don't turn that into a default except with the left hand path i am also",
    "start": "3302480",
    "end": "3308240"
  },
  {
    "text": "capturing the exception so i am saying that if an exception occurred we'll shift from the right hand path of",
    "start": "3308240",
    "end": "3315040"
  },
  {
    "text": "true justice to the left-hand path of evil we'll grab that exception whatever it was",
    "start": "3315040",
    "end": "3320400"
  },
  {
    "text": "we'll glide down to the end and then you will have the exception captured and it's all just there at the end for",
    "start": "3320400",
    "end": "3327599"
  },
  {
    "text": "you in a single value that's what it looks like it's roughly the same i can think of all sorts of ways to make this a little bit more",
    "start": "3327599",
    "end": "3333280"
  },
  {
    "text": "interesting and capture some more useful data but i'm just keeping things simple",
    "start": "3333280",
    "end": "3338559"
  },
  {
    "text": "and um i would probably uh have this returned as the return",
    "start": "3338559",
    "end": "3344400"
  },
  {
    "text": "value of a function as in i'd probably have a function return and either or a maybe or whatever to signal the fact that there is some",
    "start": "3344400",
    "end": "3350240"
  },
  {
    "text": "uncertainty as to whether this will work and then i probably use something like your uh your switch statements to",
    "start": "3350240",
    "end": "3356640"
  },
  {
    "text": "to switch on type to determine like okay now i know what to do if it worked or if it didn't",
    "start": "3356640",
    "end": "3362319"
  },
  {
    "text": "oops someone has asked in the past whether there are any libraries out there that already implement a lot of",
    "start": "3362319",
    "end": "3367680"
  },
  {
    "text": "these structures there are languagex is the only one i'm aware of at the mo i think there are might well be others i",
    "start": "3367680",
    "end": "3374480"
  },
  {
    "text": "had a little play around with language x seems pretty good some of my examples",
    "start": "3374480",
    "end": "3379520"
  },
  {
    "text": "reworked into languagex they call uh bind map that's the same basic concept",
    "start": "3379520",
    "end": "3385680"
  },
  {
    "text": "and uh they have a match at the end so it's like you have to go into them the map world of doing the binds and",
    "start": "3385680",
    "end": "3391119"
  },
  {
    "text": "then you call out of that world by you're defining a match which collapses based on which of these functions are",
    "start": "3391119",
    "end": "3396960"
  },
  {
    "text": "called into a real value all seems pretty good i've had a bit of fun playing around with that i",
    "start": "3396960",
    "end": "3403280"
  },
  {
    "text": "personally like to just implement it myself might be a little bit extra work for me",
    "start": "3403280",
    "end": "3409119"
  },
  {
    "text": "but i like to understand what's going on and since functional is relatively new to me although i've been",
    "start": "3409119",
    "end": "3414400"
  },
  {
    "text": "doing for a few years now um i'd like to actually get my hands dirty and implement it myself to make sure i",
    "start": "3414400",
    "end": "3419839"
  },
  {
    "text": "understand what's happening further reading and i promise you this",
    "start": "3419839",
    "end": "3426559"
  },
  {
    "text": "is the last slide you can all breathe right functional programming in c sharp by",
    "start": "3426559",
    "end": "3432000"
  },
  {
    "text": "enrico buenano this is one of my favorite programming books of all time",
    "start": "3432000",
    "end": "3437280"
  },
  {
    "text": "it's certainly one of the best that i've read in years uh some of the examples that i've given were based on some of",
    "start": "3437280",
    "end": "3442640"
  },
  {
    "text": "the material in this book i love this book i have been occasionally badgering him on twitter to try and respond to me but",
    "start": "3442640",
    "end": "3448160"
  },
  {
    "text": "he never has curse you when we go by that oh but it's a marvelous book",
    "start": "3448160",
    "end": "3453440"
  },
  {
    "text": "and if anything that you've seen here seemed interesting or fun to you i thoroughly recommend this book if",
    "start": "3453440",
    "end": "3460480"
  },
  {
    "text": "nothing else i loved it uh functional she sharper vishnu angoro",
    "start": "3460480",
    "end": "3465760"
  },
  {
    "text": "apologies to him if i'm mispronouncing his name it's pretty good i like the buenano book better but this one's nice as well",
    "start": "3465760",
    "end": "3471839"
  },
  {
    "text": "there was a youtube video which kind of started me down this path uh well i would say youtube video this was a",
    "start": "3471839",
    "end": "3477040"
  },
  {
    "text": "talk at ndc oslo many years ago which i was actually present at kathleen dallard this is a nice one as well",
    "start": "3477040",
    "end": "3483599"
  },
  {
    "text": "and uh um she catches on some ideas i haven't like having say",
    "start": "3483599",
    "end": "3489200"
  },
  {
    "text": "one global try catch for the whole application that's lots of other nice ideas i",
    "start": "3489200",
    "end": "3494240"
  },
  {
    "text": "recommend this one as another starting point there's a couple of pluralsight courses they're not bad you could go on to f",
    "start": "3494240",
    "end": "3500240"
  },
  {
    "text": "sharp fun and profit scott vlashin absolutely i like the website uh if you really want to go hardcore go all the",
    "start": "3500240",
    "end": "3506559"
  },
  {
    "text": "way stick pick up a book like learn your haskell for great good i have a friend or so that swears on",
    "start": "3506559",
    "end": "3512559"
  },
  {
    "text": "this thing go for it now",
    "start": "3512559",
    "end": "3518960"
  },
  {
    "text": "any questions silence oh someone's put a review for",
    "start": "3520160",
    "end": "3527520"
  },
  {
    "text": "that book functional programming can make your head explode this book stitches it back together i like that that's quite nice oh fantastic",
    "start": "3527520",
    "end": "3534640"
  },
  {
    "text": "thank you ryan oh and yes malika has just prompted me that uh",
    "start": "3534640",
    "end": "3543040"
  },
  {
    "text": "i didn't ask about unit testing okay my brief thinks thoughts about unit testing um because functional programming when",
    "start": "3543040",
    "end": "3549760"
  },
  {
    "text": "it's done properly relies entirely on pure functions that being a function which may not rely on",
    "start": "3549760",
    "end": "3556079"
  },
  {
    "text": "anything except for its own parameters you could basically do a whole load of unit testing without actually",
    "start": "3556079",
    "end": "3561599"
  },
  {
    "text": "doing any uh mocking potentially you just pass it in some values which you just",
    "start": "3561599",
    "end": "3566880"
  },
  {
    "text": "feed it directly and then get back out the answer the whole idea of passing in mocks to go",
    "start": "3566880",
    "end": "3572880"
  },
  {
    "text": "and get data which are executed by the function that would be anathema to the functional process so the more that you write your",
    "start": "3572880",
    "end": "3580559"
  },
  {
    "text": "functions based on this idea this idea of purity the easier it'll be to just unit test",
    "start": "3580559",
    "end": "3586960"
  },
  {
    "text": "everything so try and stick more to that try and think more in terms of splitting down your",
    "start": "3586960",
    "end": "3594160"
  },
  {
    "text": "functions into smaller pieces because again functional programming tends to look better when you've got small pieces rather than a lot of the",
    "start": "3594160",
    "end": "3600319"
  },
  {
    "text": "stuff i've seen in the object orientated world where you tend to um like functions are",
    "start": "3600319",
    "end": "3606319"
  },
  {
    "text": "thousands of lines long and i've seen some of those guys and have gigantic messes of uh ifs and ifs",
    "start": "3606319",
    "end": "3612799"
  },
  {
    "text": "and ifs that look like family trees because in functional programming you're sort of writing these nice little flows",
    "start": "3612799",
    "end": "3620079"
  },
  {
    "text": "you tend not to get into that mess and you tend to end up with nice clean small easy to understand",
    "start": "3620079",
    "end": "3625680"
  },
  {
    "text": "functions that are easy to test because they've got often a single um a single",
    "start": "3625680",
    "end": "3630880"
  },
  {
    "text": "purpose so just by following this paradigm it tends to push you",
    "start": "3630880",
    "end": "3636400"
  },
  {
    "text": "down a direction of easier testing uh someone has oh what we got",
    "start": "3636400",
    "end": "3643760"
  },
  {
    "text": "oh someone said what about the complicated part well i hope i hope everyone feels that this is not too complicated",
    "start": "3643760",
    "end": "3649680"
  },
  {
    "text": "the uh the stuff that i've been saying i i don't think it is uh of course you",
    "start": "3649680",
    "end": "3654799"
  },
  {
    "text": "know yeah it's it's quite easy to go down some strange rabbit holes sometimes with this stuff as always but",
    "start": "3654799",
    "end": "3661040"
  },
  {
    "text": "uh oh someone asked about the bit i skipped over sorry yeah maybe not while we're on the recording",
    "start": "3661040",
    "end": "3666480"
  },
  {
    "text": "um but if anyone's interested grab me and i'll i'll give a quick talk about that it's a sort of head-meltingly",
    "start": "3666480",
    "end": "3671839"
  },
  {
    "text": "nasty bit of code i wrote that does some strange things but yeah it's a sort of example put it all together is there a git repo with these",
    "start": "3671839",
    "end": "3678240"
  },
  {
    "text": "examples uh git repo there might be but certainly the slides",
    "start": "3678240",
    "end": "3683359"
  },
  {
    "text": "yes i will put up a link to the slides uh i've got it on dropbox i'll uh i'll probably pop it on this",
    "start": "3683359",
    "end": "3690079"
  },
  {
    "text": "conference room also i am on twitter mad simon j uh grab me there you'll probably find",
    "start": "3690079",
    "end": "3696240"
  },
  {
    "text": "copies of my slides around and i shall probably put the link there too so uh so what else do i mix and match",
    "start": "3696240",
    "end": "3701359"
  },
  {
    "text": "pyrogramming paradigms in the same project solution if it's c-sharp yeah probably i try to",
    "start": "3701359",
    "end": "3708319"
  },
  {
    "text": "maximize the amount of functional that i do but c sharp b c sharp sometimes you have",
    "start": "3708319",
    "end": "3714720"
  },
  {
    "text": "to make compromises and it's just inevitable but to be honest by and large you could write an entire",
    "start": "3714720",
    "end": "3721680"
  },
  {
    "text": "application in exclusively in functional in c sharp if you wished",
    "start": "3721680",
    "end": "3726960"
  },
  {
    "text": "does mean writing a load of extension methods and jumping through some hoops and i'm not sure if it's always going to be optimal",
    "start": "3726960",
    "end": "3732000"
  },
  {
    "text": "c sharp's not necessarily optimized for functional in the same the way that f sharp is but you could do",
    "start": "3732000",
    "end": "3738559"
  },
  {
    "text": "it you absolutely could um in fact as a challenge to yourself try doing something like i have which is",
    "start": "3738559",
    "end": "3744960"
  },
  {
    "text": "take on the advent of code and write the entire thing in arrow",
    "start": "3744960",
    "end": "3750079"
  },
  {
    "text": "functions only in pure arrow functions it can be done and if nothing else gets your head",
    "start": "3750079",
    "end": "3756960"
  },
  {
    "text": "around functional programming that will uh okay uh it's time to so okay uh if",
    "start": "3756960",
    "end": "3763359"
  },
  {
    "text": "i've got time for the last one uh someone asked about big o complexity er in c sharp probably it might well be",
    "start": "3763359",
    "end": "3769440"
  },
  {
    "text": "pushing up the big o a little bit but that's not necessarily my end goal my end goal is not necessarily only",
    "start": "3769440",
    "end": "3775280"
  },
  {
    "text": "towards uh efficiency and speed my goal is maintain ability and ease of ease of",
    "start": "3775280",
    "end": "3781280"
  },
  {
    "text": "reading ease of maintenance so those are more important to me than anything else so sorry anyway",
    "start": "3781280",
    "end": "3786559"
  },
  {
    "text": "uh grab me on slack uh or any way you would like and i will answer as many questions as anyone has but i think we need to uh to wrap up now",
    "start": "3786559",
    "end": "3793760"
  },
  {
    "text": "oh someone says that's fantastic twice very kind of you thank you michael okay thank you very much folks",
    "start": "3793760",
    "end": "3802240"
  }
]