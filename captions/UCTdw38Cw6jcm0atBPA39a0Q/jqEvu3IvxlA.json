[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "before we get started how many of you actually write angular anybody writing",
    "start": "9650",
    "end": "15410"
  },
  {
    "text": "angularjs it's okay I won't make fun of you okay I know but there that's gonna",
    "start": "15410",
    "end": "20810"
  },
  {
    "text": "be okay all right so this must be like the lone angular developers at the conference",
    "start": "20810",
    "end": "26570"
  },
  {
    "text": "very dotnet heavy place and when I say you write JavaScript out loud so today",
    "start": "26570",
    "end": "34220"
  },
  {
    "text": "we're going to talk about angular forms and how to manage them and I wrote this talk after kind of getting pissed off at",
    "start": "34220",
    "end": "41360"
  },
  {
    "text": "a situation where I was trying to implement a type-ahead who's like it's 20 freaking 19 I should not spend more",
    "start": "41360",
    "end": "46940"
  },
  {
    "text": "than five minutes of my life trying to implement a type-ahead and was running into a lot of stupid problems and so I kind of went down this",
    "start": "46940",
    "end": "53630"
  },
  {
    "text": "pathway to discover a lot of things that are hidden inside of the angular framework that you might not know about",
    "start": "53630",
    "end": "58969"
  },
  {
    "text": "so hopefully this content will be helpful I'm open for questions so if you",
    "start": "58969",
    "end": "64190"
  },
  {
    "text": "have questions as we go when I come talk to me afterwards totally kill whatever floats your canoe a little bit about me",
    "start": "64190",
    "end": "71990"
  },
  {
    "start": "70000",
    "end": "95000"
  },
  {
    "text": "my name is Jennifer Adela you can follow me on twitter at like OMG at study I'm the lead angular developer at a",
    "start": "71990",
    "end": "77990"
  },
  {
    "text": "consulting company called bateau B so I know everything from working on client projects and helping them write better",
    "start": "77990",
    "end": "83149"
  },
  {
    "text": "code to doing trainings and coaching all over the world I'm a big club brucha",
    "start": "83149",
    "end": "88459"
  },
  {
    "text": "brewer when I'm at home is anybody drink kombucha yeah compute your people it's awesome I am from the United States if",
    "start": "88459",
    "end": "96979"
  },
  {
    "start": "95000",
    "end": "116000"
  },
  {
    "text": "you could not tell by my accent and that little star is where I'm from because when I say Kansas City people are like",
    "start": "96979",
    "end": "102380"
  },
  {
    "text": "Oh where's that and then I have to explain and it's a whole big thing it's literally in the middle of the country everybody just flies over us between LA",
    "start": "102380",
    "end": "107869"
  },
  {
    "text": "New York City but there was one really important thing to know about Kansas City and that's our most valuable export Paul Rudd so talking about forms forms",
    "start": "107869",
    "end": "120110"
  },
  {
    "start": "116000",
    "end": "146000"
  },
  {
    "text": "are how we get data on the web so like why the hell are they so damn complicated it's completely obnoxious at",
    "start": "120110",
    "end": "126080"
  },
  {
    "text": "times when you actually think about like the way a web application should work and just submitting data or figuring out",
    "start": "126080",
    "end": "131930"
  },
  {
    "text": "ways to display ways to submit data to the user should not be that damn complicated so the goal of this talk",
    "start": "131930",
    "end": "137629"
  },
  {
    "text": "will it be to make it a little less complicated complicated hopefully give you some nice little tricks",
    "start": "137629",
    "end": "143060"
  },
  {
    "text": "and tips to manage angular forms better so when we talk about angular forms we've got two options today you've got",
    "start": "143060",
    "end": "150200"
  },
  {
    "start": "146000",
    "end": "254000"
  },
  {
    "text": "template driven forms or you've got reactive forms if you came from an angularjs background like I did template",
    "start": "150200",
    "end": "155239"
  },
  {
    "text": "forms are gonna feel really really familiar with you because that's all that we're their template driven forms",
    "start": "155239",
    "end": "160489"
  },
  {
    "text": "are gonna use just the the core forms module we're gonna use ng model to bind our inputs should feel really really",
    "start": "160489",
    "end": "167000"
  },
  {
    "text": "familiar most of your logic resides in the template syntax which can be",
    "start": "167000",
    "end": "173209"
  },
  {
    "text": "readable until you get into any sort of scenario where you need complex logic or dependency and then it can get pretty",
    "start": "173209",
    "end": "178549"
  },
  {
    "text": "ugly in a quick hurry they're also asynchronous so they're gonna look something like this where we",
    "start": "178549",
    "end": "183620"
  },
  {
    "text": "might have a model we might have a couple properties on that model and we're using the ng model directive to",
    "start": "183620",
    "end": "189200"
  },
  {
    "text": "bind and get our information that way temple driven forms are great for a lot",
    "start": "189200",
    "end": "194540"
  },
  {
    "text": "of very basic scenarios maybe you've got a simple login form you've got an email you've got a password you've got a",
    "start": "194540",
    "end": "199610"
  },
  {
    "text": "little bit of validation to let you use it or know what's going on not not a big deal like template driven forms perfectly fine to use for those",
    "start": "199610",
    "end": "206360"
  },
  {
    "text": "really basic form scenarios the second you get into anything a little bit more",
    "start": "206360",
    "end": "211700"
  },
  {
    "text": "complex it's just they get messy they get nasty and I find reactive forms to",
    "start": "211700",
    "end": "216950"
  },
  {
    "text": "be a much more manageable approach so when we talk about reactive forms we're going to be using the reactive forms",
    "start": "216950",
    "end": "222980"
  },
  {
    "text": "module so it's a it's a different module that you need to make sure you're importing we're going to use the form control directive or a couple different",
    "start": "222980",
    "end": "229130"
  },
  {
    "text": "variants variations of it to bind to our inputs a lot of our logic we will have in our controller where we can start to",
    "start": "229130",
    "end": "236000"
  },
  {
    "text": "take a little bit more of a reactive programming approach and they tend to be synchronous so it's gonna look something",
    "start": "236000",
    "end": "242060"
  },
  {
    "text": "like this we've got a form we've got an input we've got that foreign control directive that is getting bound to our",
    "start": "242060",
    "end": "248420"
  },
  {
    "text": "name property and in there we've just instantiate Adana new form control using the reactive forms API so big fan of",
    "start": "248420",
    "end": "255980"
  },
  {
    "start": "254000",
    "end": "324000"
  },
  {
    "text": "reactive forms I deal with a lot of complicated awkward form situations all the time and reactive forms make me very",
    "start": "255980",
    "end": "261919"
  },
  {
    "text": "very happy so is everybody familiar is anybody familiar with reactive programming conceptually okay",
    "start": "261919",
    "end": "270260"
  },
  {
    "text": "he's already like just fighting with typescript in rxjs trying to get through their day-to-day life as an angular developer my people it's gonna be",
    "start": "270260",
    "end": "278360"
  },
  {
    "text": "this is no shame room by the way no shaming so let's talk because for me I",
    "start": "278360",
    "end": "284159"
  },
  {
    "text": "felt like I really struggled with rxjs for a long time and it's angular it's built on it and and you can kind of get",
    "start": "284159",
    "end": "290519"
  },
  {
    "text": "away but you can get into some ugly situations but as soon as I really started to at a fundamental level understand reactive programming things",
    "start": "290519",
    "end": "297539"
  },
  {
    "text": "started to make a lot more sense to me because before I was kind of like why do I have to use ArcGIS why can't I just use lodash and so just understanding in",
    "start": "297539",
    "end": "307259"
  },
  {
    "text": "a more conceptual level really really helped me a lot so I like to do quick crash course just to get a really someone on the same page so when we're",
    "start": "307259",
    "end": "313379"
  },
  {
    "text": "talking about reactive programming as a concept in the way we're managing things it makes a little bit more sense so we",
    "start": "313379",
    "end": "319079"
  },
  {
    "text": "kind of have two styles of program we've got declarative programming we've gotten parroted programming so imperative is",
    "start": "319079",
    "end": "324569"
  },
  {
    "start": "324000",
    "end": "423000"
  },
  {
    "text": "what you're probably used to especially if you were a JavaScript developer who came up with the jQuery days a user",
    "start": "324569",
    "end": "331079"
  },
  {
    "text": "would interact with the Dom you'd you'd call a function something would happen and things be that must be really really",
    "start": "331079",
    "end": "336929"
  },
  {
    "text": "quick and all the sudden you're like why the is the CSS class being applied where is that coming from so imperative",
    "start": "336929",
    "end": "342059"
  },
  {
    "text": "programming is where some sort of event occurs and then we run code that's going to change the state of the program so",
    "start": "342059",
    "end": "347909"
  },
  {
    "text": "user clicks on a button we write some code it's going to make a thing happen that may change the state of the program",
    "start": "347909",
    "end": "353249"
  },
  {
    "text": "but the problem is when we have all these different things happening changing the state it can be very hard",
    "start": "353249",
    "end": "358319"
  },
  {
    "text": "to track what's going on and it can be difficult to debug declarative on the other hand specifies how a value should",
    "start": "358319",
    "end": "364949"
  },
  {
    "text": "be generated so when we talk about the state of an application we want to say how a state should change and have kind",
    "start": "364949",
    "end": "372269"
  },
  {
    "text": "of that as a single source of truth so that way we're working with different inputs from the user or maybe logic on our end there's one starting point where",
    "start": "372269",
    "end": "378959"
  },
  {
    "text": "we're saying how state should be specified based on all these different things that may happen so reactive",
    "start": "378959",
    "end": "384599"
  },
  {
    "text": "programming is a style of declarative program that's more concerned with data streams and propagation of change as",
    "start": "384599",
    "end": "390929"
  },
  {
    "text": "friend of developers and in angular world we're dealing with two scenarios a lot of times maybe we're fetching",
    "start": "390929",
    "end": "396360"
  },
  {
    "text": "frenching data from an API or something like that so we might be waiting on on that call to complete and we're also",
    "start": "396360",
    "end": "402209"
  },
  {
    "text": "dealing with user interaction whether a user is entering information in a form or some sort of thing so when you when",
    "start": "402209",
    "end": "408659"
  },
  {
    "text": "you just think about the nature of what we're doing by reactive programming starts to make a little more sense and then rxjs is just",
    "start": "408659",
    "end": "415090"
  },
  {
    "text": "a reactive programming javascript library so a library written to help us",
    "start": "415090",
    "end": "420750"
  },
  {
    "text": "reactively program better so key concepts with reactive programming kind",
    "start": "420750",
    "end": "428080"
  },
  {
    "start": "423000",
    "end": "504000"
  },
  {
    "text": "of like our base thing is we have an observable which is a lazy push collection of multiple values over time",
    "start": "428080",
    "end": "433450"
  },
  {
    "text": "so the idea here is it's something that we are going to create that we know will",
    "start": "433450",
    "end": "440230"
  },
  {
    "text": "will change or emit values over time in order to get any of that information we",
    "start": "440230",
    "end": "445390"
  },
  {
    "text": "need to go ahead and subscribe to our observable and I'll talk through a couple different ways that we do this in angular but it's important to know that",
    "start": "445390",
    "end": "451030"
  },
  {
    "text": "until that subscription is created you're not going to get any information from your observable we also have a",
    "start": "451030",
    "end": "456550"
  },
  {
    "text": "subject especially kind of observable it can be multi casted to many observers so",
    "start": "456550",
    "end": "461890"
  },
  {
    "text": "there are times the dealing in a form situation maybe we've got a couple different input fields and they're all",
    "start": "461890",
    "end": "467260"
  },
  {
    "text": "going to be dependent on another input field and in some specific kind of information so that's where subjects can",
    "start": "467260",
    "end": "473050"
  },
  {
    "text": "come into play they can be multicast to all these different observers and we can also publish and subscribe to them we",
    "start": "473050",
    "end": "480040"
  },
  {
    "text": "have a behavior subject which is like a subject but it will remit the last emitted value so again as we're dealing",
    "start": "480040",
    "end": "486370"
  },
  {
    "text": "with form situations and we've got a bunch of logic happening where things are changing based on on values or",
    "start": "486370",
    "end": "491380"
  },
  {
    "text": "validation that might be happening it can be really important to make sure that when we are creating a new subject",
    "start": "491380",
    "end": "497530"
  },
  {
    "text": "that we're gonna get the last emitted value so it's not just sitting there null and we're like okay what's going on why why am I not getting any information",
    "start": "497530",
    "end": "504750"
  },
  {
    "start": "504000",
    "end": "539000"
  },
  {
    "text": "and then we have operators and so these are what we use to transform our observables so if you are having to map",
    "start": "504750",
    "end": "511419"
  },
  {
    "text": "through or filter through data something like that or maybe we are combining multiple sources of information a",
    "start": "511419",
    "end": "516880"
  },
  {
    "text": "pattern I end up using a lot is maybe I have a select drop-down and I am waiting",
    "start": "516880",
    "end": "523690"
  },
  {
    "text": "I have a service written and I'm going to return an observable from that but then I also want to make sure that I'm getting interaction from a user to",
    "start": "523690",
    "end": "529900"
  },
  {
    "text": "change that if needed so we can start to deal with these multiple streams and merge them together and again have that",
    "start": "529900",
    "end": "535180"
  },
  {
    "text": "one source of truth to define what we're working with with our state so we can",
    "start": "535180",
    "end": "543329"
  },
  {
    "start": "539000",
    "end": "589000"
  },
  {
    "text": "observe well I'm got kind of like a stupid little demo app setup I'm very into there's a drag race API based on",
    "start": "543329",
    "end": "550350"
  },
  {
    "text": "RuPaul's Drag Race so if you see random stuff like displayed Queens I'm talking about drag queens that's that's the theme of this",
    "start": "550350",
    "end": "555809"
  },
  {
    "text": "little application creating a profile is a drag race super fan but we're gonna have a service it's gonna basically",
    "start": "555809",
    "end": "562079"
  },
  {
    "text": "fetch a list of all drag queens and that's going to return an observable to",
    "start": "562079",
    "end": "567449"
  },
  {
    "text": "get this information we are going to subscribe to that my preferred method is to use the async pipe so if you're not",
    "start": "567449",
    "end": "574259"
  },
  {
    "text": "familiar this is a a pipe and angular that essentially is going to subscribe to that observable and then it's also",
    "start": "574259",
    "end": "580829"
  },
  {
    "text": "going to handle the cleanup the unsubscription when your component is torn down so you don't have to worry about it and subscribing it yourself and",
    "start": "580829",
    "end": "586799"
  },
  {
    "text": "create memory leaks also using operators",
    "start": "586799",
    "end": "592199"
  },
  {
    "text": "so here's an example where maybe I have a list of seasons of drag race that I'm",
    "start": "592199",
    "end": "598829"
  },
  {
    "text": "getting and I want to get a certain season based on and I an ID that I'm",
    "start": "598829",
    "end": "604170"
  },
  {
    "text": "getting from an input seasons I select a certain season want to get that idea and want to return that these are kind of",
    "start": "604170",
    "end": "610589"
  },
  {
    "text": "ways that we can use the merge map operator to to combine these streams and in return the results we want alright",
    "start": "610589",
    "end": "617579"
  },
  {
    "start": "616000",
    "end": "795000"
  },
  {
    "text": "crash course over field okay nobody traumatized yet sweet all right",
    "start": "617579",
    "end": "622860"
  },
  {
    "text": "minimum trauma okay so reactive forms",
    "start": "622860",
    "end": "628428"
  },
  {
    "text": "pretty basic API of course if you're familiar with the angular ecosystem you",
    "start": "628759",
    "end": "634230"
  },
  {
    "text": "know how big it is and sometimes the documentation is not always the best inside of this ecosystem so it can be",
    "start": "634230",
    "end": "641519"
  },
  {
    "text": "hard to understand these very basic building blocks so I like to go over because a lot of times I'll see people searching for something on Stack",
    "start": "641519",
    "end": "647549"
  },
  {
    "text": "Overflow and they're like how do I do this and they're not quite paying attention enough to these building blocks and then they're running into",
    "start": "647549",
    "end": "652679"
  },
  {
    "text": "errors and not figuring out because they haven't figured out Oh a form control class versus a form group class so like",
    "start": "652679",
    "end": "658709"
  },
  {
    "text": "to break down the basics because I feel like it makes everything way easier to",
    "start": "658709",
    "end": "663779"
  },
  {
    "text": "handle so basic building block is our form control so this is what we use to create a radio select whatever it does",
    "start": "663779",
    "end": "669869"
  },
  {
    "text": "not care this is simply going to take a piece of information that you know we presumably want to submit",
    "start": "669869",
    "end": "675830"
  },
  {
    "text": "inside of a forum you know post to an API whatever the forum control is going to track not only the value whatever",
    "start": "675830",
    "end": "682190"
  },
  {
    "text": "that piece of information is but the validation status as well this is a very",
    "start": "682190",
    "end": "687440"
  },
  {
    "text": "holistic talk I'm not just talking about how to do forms but how to also display",
    "start": "687440",
    "end": "692870"
  },
  {
    "text": "them in a way that's very friendly and usable for our user we're front-end developers we care about the logic but we also care about what",
    "start": "692870",
    "end": "699200"
  },
  {
    "text": "the user is experiencing so a form control basic element let's say you are",
    "start": "699200",
    "end": "704360"
  },
  {
    "text": "trying to build some sort of data structure that you want to submit you can use a form group which is",
    "start": "704360",
    "end": "710540"
  },
  {
    "text": "essentially going to create an object of values so we can have a form control we can have form controls nested inside of",
    "start": "710540",
    "end": "716330"
  },
  {
    "text": "a form group that will create our object we also have a form array so I see a lot",
    "start": "716330",
    "end": "721910"
  },
  {
    "text": "of people running into scenarios where they are dealing with very dynamic forms and they have a need to be dynamically",
    "start": "721910",
    "end": "730040"
  },
  {
    "text": "adding controls or removing controls especially like repetitive ones if you manage a slack team for instance and you",
    "start": "730040",
    "end": "736340"
  },
  {
    "text": "go to invite a bunch of different users you might be giving in their name and email and you want to add more users",
    "start": "736340",
    "end": "741800"
  },
  {
    "text": "that kind of situation how do we begin to dynamically add and remove form",
    "start": "741800",
    "end": "747020"
  },
  {
    "text": "controls or form groups so our form array will give us an array that we can push and pull from just like you would a",
    "start": "747020",
    "end": "754340"
  },
  {
    "text": "normal array we also have a form control name this is a specific directive that",
    "start": "754340",
    "end": "759440"
  },
  {
    "text": "ties to a form control inside of a form group it's a getter syntax so if we've got a",
    "start": "759440",
    "end": "765010"
  },
  {
    "text": "group object and we want to call a nested key inside of there we can use",
    "start": "765010",
    "end": "770240"
  },
  {
    "text": "form control name don't want anybody to that's a 31 I use it all the time so just want you to be familiar and then we",
    "start": "770240",
    "end": "777260"
  },
  {
    "text": "also have form builder and so this is a shorthand syntax for creating groups and arrays normally if you were to create a",
    "start": "777260",
    "end": "783410"
  },
  {
    "text": "form control you'd say you know Kant's name equals new form control and you did Stan she ate it that way form builder",
    "start": "783410",
    "end": "789950"
  },
  {
    "text": "allows us to just have a shorthand syntax I that just makes writing a lot faster hmm so form control is gonna look",
    "start": "789950",
    "end": "799310"
  },
  {
    "start": "795000",
    "end": "815000"
  },
  {
    "text": "something like this I've got my form which I have named I'm instantiating a new form control I'm",
    "start": "799310",
    "end": "805220"
  },
  {
    "text": "passing in an initial value and then I am binding it with this just basic form call control directive so",
    "start": "805220",
    "end": "812200"
  },
  {
    "text": "we'll see this a lot that is creating a basic form control form group is going",
    "start": "812200",
    "end": "817480"
  },
  {
    "start": "815000",
    "end": "851000"
  },
  {
    "text": "to look something like this where we using the form Group directive to pass in our form group that I have created",
    "start": "817480",
    "end": "822490"
  },
  {
    "text": "here so I've got a new form group and so inside of here I've got three different form controls so that's going to",
    "start": "822490",
    "end": "828370"
  },
  {
    "text": "represent an object with the keys first name last name email so inside here this",
    "start": "828370",
    "end": "834130"
  },
  {
    "text": "is where I can start to use that form control directive name that I mentioned instead of you may have seen this before",
    "start": "834130",
    "end": "840160"
  },
  {
    "text": "where you're calling form control and then you do my form doc controls dot my name or first name or whatever control",
    "start": "840160",
    "end": "845890"
  },
  {
    "text": "you're looking for a form control name is just a nice readable shorthand syntax that I like form array so we might have",
    "start": "845890",
    "end": "855520"
  },
  {
    "start": "851000",
    "end": "936000"
  },
  {
    "text": "something like this where we maybe are creating a form that is going to take an invariable amount or a variable amount",
    "start": "855520",
    "end": "861910"
  },
  {
    "text": "of users so I'm instantiating a new form array and then I'm passing it a form",
    "start": "861910",
    "end": "867070"
  },
  {
    "text": "group object inside of here first name last name email second one here and so I can continue to add form groups as much",
    "start": "867070",
    "end": "873850"
  },
  {
    "text": "as I need to create that kind of situation the tricky thing that you may warrant into is figuring out how to iterate",
    "start": "873850",
    "end": "880000"
  },
  {
    "text": "through these because obviously you don't know how many how many groups you might have so here I'm using the form",
    "start": "880000",
    "end": "886240"
  },
  {
    "text": "Group directive to bind my main user form so my next thing is it's going to be an array so I'm going to go into the",
    "start": "886240",
    "end": "892990"
  },
  {
    "text": "controls of that user form and that's going to allow me to interact through each of those form groups so it's",
    "start": "892990",
    "end": "899920"
  },
  {
    "text": "important to understand like what that that control structure looks like so we've got our user form it's gonna have a list of controls each one of those",
    "start": "899920",
    "end": "905620"
  },
  {
    "text": "controls in this scenario is a form group so I've named this user form group so somebody coming behind me can read my",
    "start": "905620",
    "end": "911800"
  },
  {
    "text": "code understand what the is going on the important thing to remember here is we need to make sure that we're",
    "start": "911800",
    "end": "917589"
  },
  {
    "text": "binding this this nested form group again using our form Group directive and then we can use our form control name",
    "start": "917589",
    "end": "923740"
  },
  {
    "text": "directive as as intended to get our R",
    "start": "923740",
    "end": "929230"
  },
  {
    "text": "keys or our form controls inside of that group okay",
    "start": "929230",
    "end": "935780"
  },
  {
    "text": "oh just alright and then finally form builder just so",
    "start": "935780",
    "end": "941150"
  },
  {
    "start": "936000",
    "end": "998000"
  },
  {
    "text": "you are familiar with the syntax so if ever you're you're debugging you're running into problems because you copy pasted some Stack Overflow code because",
    "start": "941150",
    "end": "947810"
  },
  {
    "text": "we've all been there we've all done that you you will understand what's going on so basically we can inject the form",
    "start": "947810",
    "end": "957380"
  },
  {
    "text": "builder class and then we can just have a shorthand where we type this that form builder dot array instead of that new",
    "start": "957380",
    "end": "962890"
  },
  {
    "text": "form array and then pass in some things and then the real power here is you'll",
    "start": "962890",
    "end": "968540"
  },
  {
    "text": "notice we're not even calling a new form control if we have a form group we can automatically just pass in a key and",
    "start": "968540",
    "end": "974450"
  },
  {
    "text": "it's going to assume okay you're creating a form control passed it in the Ray that's going to take some stuff a",
    "start": "974450",
    "end": "980750"
  },
  {
    "text": "tricky thing to know is you do need to make sure that you're not only passing a value but the disabled status or you can",
    "start": "980750",
    "end": "988880"
  },
  {
    "text": "just run into some problematic behavior so make sure you're instantiate in your form controls with disabled set to false",
    "start": "988880",
    "end": "994850"
  },
  {
    "text": "or or true regardless of whether you think you need it or not okay so complicated problems let's talk",
    "start": "994850",
    "end": "1002080"
  },
  {
    "start": "998000",
    "end": "1046000"
  },
  {
    "text": "through some things that you may have run into in the past or might run into in the future first one I need dynamic",
    "start": "1002080",
    "end": "1008920"
  },
  {
    "text": "required fields pretty common scenario where we've got dependent logic going on and we're not quite sure how to handle",
    "start": "1008920",
    "end": "1014560"
  },
  {
    "text": "marking those fields is required or not if you're coming from a template there were there have been background you'll",
    "start": "1014560",
    "end": "1020230"
  },
  {
    "text": "remember like kind of putting that little required attribute on the HTML but that can get really messy and really ugly to try and nest a bunch of if",
    "start": "1020230",
    "end": "1026890"
  },
  {
    "text": "statements to table that logic so we'll we'll handle that much more elegantly in my opinion using reactive forms needing",
    "start": "1026890",
    "end": "1035380"
  },
  {
    "text": "custom validation rules you're a bit above and beyond required you need something to be required based on maybe",
    "start": "1035380",
    "end": "1043180"
  },
  {
    "text": "the length or the amount or something like that how do we going to do that maybe you'll run into a scenario where",
    "start": "1043180",
    "end": "1049690"
  },
  {
    "text": "you're using a reactive form but the problem is you want to display something in the UI that is not necessarily the",
    "start": "1049690",
    "end": "1055390"
  },
  {
    "text": "same thing you want to submit is a value for your form so how do we begin to handle that I talked earlier about",
    "start": "1055390",
    "end": "1062590"
  },
  {
    "text": "having to dynamically create remove form controls so we'll look through how to handle that and finally if you",
    "start": "1062590",
    "end": "1068900"
  },
  {
    "text": "ever had a very complex robust form that you've wanted to nest across multiple components or maybe you've got different",
    "start": "1068900",
    "end": "1075860"
  },
  {
    "text": "routes that are kind of a step through process of one whole cohesive form what are some ways we can use to manage that",
    "start": "1075860",
    "end": "1083470"
  },
  {
    "text": "because why'd we have to go and make things so complicated it's just a damn form if you want demo code I've got this",
    "start": "1083470",
    "end": "1091550"
  },
  {
    "start": "1089000",
    "end": "1105000"
  },
  {
    "text": "just working repo available here a bunch of weird scattered scenarios going on in there so if you ever just want something",
    "start": "1091550",
    "end": "1098480"
  },
  {
    "text": "to look at like I'm the kind of person that I'd like to download something that works and play with it and figure out what's going on that's available for you",
    "start": "1098480",
    "end": "1104570"
  },
  {
    "text": "there okay so let's talk about dynamic required fields and we'll look at my",
    "start": "1104570",
    "end": "1110000"
  },
  {
    "start": "1105000",
    "end": "1179000"
  },
  {
    "text": "stupid app that I've built real quick okay so this is my my super drag race",
    "start": "1110000",
    "end": "1115580"
  },
  {
    "text": "fan application like myspace for drag race fans so I might have some sort of sign-up process um is that readable okay",
    "start": "1115580",
    "end": "1126200"
  },
  {
    "text": "so let's say this is the the eventual data that I'm going to end up submitting it's gonna be a structure that looks a",
    "start": "1126200",
    "end": "1131810"
  },
  {
    "text": "little bit like that per frame of reference got some information I've got a nested object address object that's",
    "start": "1131810",
    "end": "1138800"
  },
  {
    "text": "got street city and state inside of in it I've got some random things I've got a favorite lip-synchs which is an array",
    "start": "1138800",
    "end": "1145550"
  },
  {
    "text": "that might take a variable amount of my favorite lip-sync songs that have happened on drag race so that's what we",
    "start": "1145550",
    "end": "1153620"
  },
  {
    "text": "have going on here and one of the first situations is dealing with if we want",
    "start": "1153620",
    "end": "1159200"
  },
  {
    "text": "one field to be required dependent on another field so in this case that is",
    "start": "1159200",
    "end": "1164800"
  },
  {
    "text": "this step where I've got some dropdowns here and I only want my episode",
    "start": "1164800",
    "end": "1170360"
  },
  {
    "text": "drop-down to be required if my season has a value so how would I make that happen",
    "start": "1170360",
    "end": "1176320"
  },
  {
    "text": "tracking yeah okay dry race knowledge is",
    "start": "1176320",
    "end": "1181670"
  },
  {
    "start": "1179000",
    "end": "1183000"
  },
  {
    "text": "not required for this demo all right so I might have a form control or a form",
    "start": "1181670",
    "end": "1186770"
  },
  {
    "start": "1183000",
    "end": "1206000"
  },
  {
    "text": "group that looks like this where I have my select that has a form control tied",
    "start": "1186770",
    "end": "1192440"
  },
  {
    "text": "to it which is going to be favorite season and then I've got my episode and this is the form control that I want to",
    "start": "1192440",
    "end": "1197840"
  },
  {
    "text": "be dependent so I only want this form control to be required if my season my favourite season form control",
    "start": "1197840",
    "end": "1204519"
  },
  {
    "text": "has a value okay so we initially have a",
    "start": "1204519",
    "end": "1209740"
  },
  {
    "start": "1206000",
    "end": "1218000"
  },
  {
    "text": "form control that is unrequired so we've got favorite episode here I don't have any validator set on it so this is kind",
    "start": "1209740",
    "end": "1215110"
  },
  {
    "text": "of our starting point where I've built my my form so the first thing I want to do is I'm going to go ahead and",
    "start": "1215110",
    "end": "1221500"
  },
  {
    "start": "1218000",
    "end": "1249000"
  },
  {
    "text": "subscribe to the value changes on my favourite season form control so essentially I want to know any time the",
    "start": "1221500",
    "end": "1226629"
  },
  {
    "text": "users interacted with that form control value changes is going to return an observable so I'm going ahead and just",
    "start": "1226629",
    "end": "1232570"
  },
  {
    "text": "subscribing to it in my component in this instance and this is going to log out whatever that new value is that's",
    "start": "1232570",
    "end": "1237850"
  },
  {
    "text": "been selected by that drop-down so again it's creating a subscription and that means when you are tearing down your",
    "start": "1237850",
    "end": "1244090"
  },
  {
    "text": "component you need to make sure that your unsubscribing to these value changes so you don't create memory leaks the next thing I'm going to do is I'm",
    "start": "1244090",
    "end": "1251320"
  },
  {
    "start": "1249000",
    "end": "1308000"
  },
  {
    "text": "going to figure out whatever for figure out how to get the form control that I know I want to change and then I'm going",
    "start": "1251320",
    "end": "1256929"
  },
  {
    "text": "to use the set mallet validators method on it so here again I'm listening to my favorite season form control when that",
    "start": "1256929",
    "end": "1262960"
  },
  {
    "text": "changes I want to say okay let me go get my my favorite episode form control and",
    "start": "1262960",
    "end": "1267970"
  },
  {
    "text": "I'm gonna have that and that's what I'm gonna make changes to so I can take that form control and I can use the set",
    "start": "1267970",
    "end": "1273970"
  },
  {
    "text": "validators method on it and then go ahead and add validators not required which is just the basic required validator set validators you can set any",
    "start": "1273970",
    "end": "1282519"
  },
  {
    "text": "number of validators you want you can set validators to null one of the drawbacks to the reactive forms api",
    "start": "1282519",
    "end": "1287860"
  },
  {
    "text": "right now is there's actually no way to get validators so I've seen situations before that maybe your try you don't",
    "start": "1287860",
    "end": "1294429"
  },
  {
    "text": "want to just wipe out all the validators you want to figure out what's going on with those current validators and move on from there there are a couple tricky",
    "start": "1294429",
    "end": "1300730"
  },
  {
    "text": "workarounds but no you're not crazy there's just literally not again validators option in the reactive forms",
    "start": "1300730",
    "end": "1307210"
  },
  {
    "text": "api right now so back to this the situation at hand I'm gonna say okay if",
    "start": "1307210",
    "end": "1313360"
  },
  {
    "start": "1308000",
    "end": "1330000"
  },
  {
    "text": "there's a value I want to go ahead and set my validators to be required if there's not a value like let's say the",
    "start": "1313360",
    "end": "1318610"
  },
  {
    "text": "users remove that I want to make sure that I'm clearing out that validator as well because if the control the",
    "start": "1318610",
    "end": "1326049"
  },
  {
    "text": "favorites using control its dependent on no longer has a value I want to wipe that out another thing that people",
    "start": "1326049",
    "end": "1332440"
  },
  {
    "start": "1330000",
    "end": "1398000"
  },
  {
    "text": "sometimes miss are for some state and so they have a valid",
    "start": "1332440",
    "end": "1337980"
  },
  {
    "text": "state and angular's doing all this work under the hood to track the the validity and update appropriate classes whether",
    "start": "1337980",
    "end": "1343620"
  },
  {
    "text": "it's been touched whether its pristine whether its dirty that kind of thing so it's important for us to make sure we're",
    "start": "1343620",
    "end": "1349050"
  },
  {
    "text": "keeping everything in sync and so there's this method called update value and validity so basically that is going",
    "start": "1349050",
    "end": "1355050"
  },
  {
    "text": "to assess the current state of the form control it's going to be looking for if",
    "start": "1355050",
    "end": "1360060"
  },
  {
    "text": "it has a value whether it's required or not and then do whatever changes it needs to make on the Dom so let's say",
    "start": "1360060",
    "end": "1367440"
  },
  {
    "text": "for instance that we had a form control and it was required and we had no content in there and then we set content",
    "start": "1367440",
    "end": "1374490"
  },
  {
    "text": "in there what we would need to do is we need to call update value in validity to remove maybe that class that was styling",
    "start": "1374490",
    "end": "1380610"
  },
  {
    "text": "to show that that form control was invalid so if you ever get bored like",
    "start": "1380610",
    "end": "1386190"
  },
  {
    "text": "you know sit down a glass of wine dig through the abstract control API of reactive forms you can find all this",
    "start": "1386190",
    "end": "1391800"
  },
  {
    "text": "information I spend way too much time on that page but a whole bunch of methods that will blow your mind okay what if",
    "start": "1391800",
    "end": "1400470"
  },
  {
    "start": "1398000",
    "end": "1460000"
  },
  {
    "text": "you had a situation where maybe you've got this dependent form control right and you are selecting a city from a",
    "start": "1400470",
    "end": "1407220"
  },
  {
    "text": "state you might want to go ahead and pre populate information based on whatever that that that previous form control was",
    "start": "1407220",
    "end": "1414690"
  },
  {
    "text": "so we can use a set value method on our form control and pass in some sort of value this is where you might be looking",
    "start": "1414690",
    "end": "1422580"
  },
  {
    "text": "at this immediately well Jennifer that seems like that could cause some side effects that's not really reactive programming is it no unfortunately it is",
    "start": "1422580",
    "end": "1429900"
  },
  {
    "text": "not reactive forms aren't 100% reactive programming so you do need to be aware that you can't be calling these methods",
    "start": "1429900",
    "end": "1436740"
  },
  {
    "text": "and making this stuff happen and that's much more hard to track down but it's",
    "start": "1436740",
    "end": "1442800"
  },
  {
    "text": "what we have for now and if you follow the angular community there will be a new reactive forms API at some point but",
    "start": "1442800",
    "end": "1449970"
  },
  {
    "text": "there's not a list of date for that right now but this is way this is a way that you can programmatically set values",
    "start": "1449970",
    "end": "1455850"
  },
  {
    "text": "or make changes to a form control all",
    "start": "1455850",
    "end": "1461850"
  },
  {
    "start": "1460000",
    "end": "1517000"
  },
  {
    "text": "right so let's talk about validation because this is something that I feel like a lot of people mess up angular",
    "start": "1461850",
    "end": "1467760"
  },
  {
    "text": "provide so much good support under the hood you probably don't even realize what's going on so first of all it's important to",
    "start": "1467760",
    "end": "1474120"
  },
  {
    "text": "know that as angular Trax the state of form controls it sets all these different classes based on user",
    "start": "1474120",
    "end": "1480150"
  },
  {
    "text": "interaction so we've got a valid or invalid class and so that's going to you know show the validity of the form",
    "start": "1480150",
    "end": "1486450"
  },
  {
    "text": "control so we'll talk about styling that we also have dirty touched and untouched",
    "start": "1486450",
    "end": "1492140"
  },
  {
    "text": "so if you are dealing with a form control a lot of times you'll not",
    "start": "1492140",
    "end": "1497580"
  },
  {
    "text": "necessarily want to display something is invalid to the user until they've interacted with it right like if you've",
    "start": "1497580",
    "end": "1503549"
  },
  {
    "text": "ever logged into a 4 or like on to start a forum and they're all like blurring Brydon you're like shut up for me I haven't even filled anything out yet",
    "start": "1503549",
    "end": "1509250"
  },
  {
    "text": "leave me alone I think it's poor user experience and you want to let the user know as they proceed through the form when something",
    "start": "1509250",
    "end": "1516330"
  },
  {
    "text": "is invalid so we can let annular do the heavy lifting just by providing a couple",
    "start": "1516330",
    "end": "1522120"
  },
  {
    "start": "1517000",
    "end": "1558000"
  },
  {
    "text": "Styles here basically what I tend to do is use the ng valid class if it's",
    "start": "1522120",
    "end": "1528179"
  },
  {
    "text": "required and then light that up is green when it's valid and then if it's touched",
    "start": "1528179",
    "end": "1533460"
  },
  {
    "text": "and it is invalid then I want to go ahead and light it up as red so meaning it will not show up until the user is",
    "start": "1533460",
    "end": "1540150"
  },
  {
    "text": "touched or interacted with it that touch class is going to come from interacting with an input they have blur events",
    "start": "1540150",
    "end": "1546179"
  },
  {
    "text": "built-in we'll look at an example in a minute where I'm kind of going to have to fake the blur event because it's",
    "start": "1546179",
    "end": "1552150"
  },
  {
    "text": "really important if you're building custom form controls to make sure they they act as a way that a user would expect ok so this also means if we're",
    "start": "1552150",
    "end": "1561900"
  },
  {
    "start": "1558000",
    "end": "1630000"
  },
  {
    "text": "approaching this method where we only want to show form controls at show form controls as invalid when they've been",
    "start": "1561900",
    "end": "1568169"
  },
  {
    "text": "touch what happens if the user hasn't touched anything and then try to save the form what do we do one of the things",
    "start": "1568169",
    "end": "1573630"
  },
  {
    "text": "we can do is basically mark all those fields as touched on save so a couple",
    "start": "1573630",
    "end": "1580169"
  },
  {
    "text": "cool things angular 8 if you're on that version they actually added a new method called marquales touched and so you can",
    "start": "1580169",
    "end": "1585690"
  },
  {
    "text": "pass in a form group and it'll go through all those child controls and mark them as touched so yeah if you're",
    "start": "1585690",
    "end": "1591660"
  },
  {
    "text": "using angular 8 if you're using anything below you've got a little more work to do you can basically just take your form",
    "start": "1591660",
    "end": "1598050"
  },
  {
    "text": "get all the controls iterate through each of those controls and each control by itself you can call Marquez touched so we're",
    "start": "1598050",
    "end": "1606720"
  },
  {
    "text": "just skimming the surface of all the different methods that are available on the form control they all inherit from",
    "start": "1606720",
    "end": "1612960"
  },
  {
    "text": "the abstract control class and I have these different methods that you can use to manage pretty much any form situation",
    "start": "1612960",
    "end": "1619100"
  },
  {
    "text": "if it's not in there if what you want to do is not in there take a step back and think about if that's the way a form",
    "start": "1619100",
    "end": "1625050"
  },
  {
    "text": "control should function or you're gonna create an accessibility nightmare and I will hunt you down and scold you okay so",
    "start": "1625050",
    "end": "1632610"
  },
  {
    "start": "1630000",
    "end": "1685000"
  },
  {
    "text": "now that we've had a little crash course about validation and styling let's talk about custom validation rules I've seen",
    "start": "1632610",
    "end": "1638910"
  },
  {
    "text": "a lot of people come in not realize that angular has as much available and then rewrite validation from scratch and I'm",
    "start": "1638910",
    "end": "1644880"
  },
  {
    "text": "like oh my god angular does almost everything you could possibly ever need",
    "start": "1644880",
    "end": "1649920"
  },
  {
    "text": "so we have a basic validation where we can import validators and we've got several built in at our disposal so",
    "start": "1649920",
    "end": "1656550"
  },
  {
    "text": "required is the basic one you're gonna use a lot but we've got some other ones like email because who doesn't love",
    "start": "1656550",
    "end": "1661920"
  },
  {
    "text": "writing their own email regex we've got min lengths max length min and Max",
    "start": "1661920",
    "end": "1667890"
  },
  {
    "text": "required true and then pattern which I'll talk about so all these different validators that are already there and",
    "start": "1667890",
    "end": "1673590"
  },
  {
    "text": "ready for you use so if you are walking into a situation you know you need some sort of validation scenario double check",
    "start": "1673590",
    "end": "1680370"
  },
  {
    "text": "the docs make sure they haven't already done it because that team is probably smarter than you or me okay pattern",
    "start": "1680370",
    "end": "1687210"
  },
  {
    "start": "1685000",
    "end": "1730000"
  },
  {
    "text": "validation is really helpful to know how to do this is where if you need a regex let's say I want to test for a zip code",
    "start": "1687210",
    "end": "1693510"
  },
  {
    "text": "and I want to make sure that it's only alphanumeric and five characters I can pass in a pattern validator so meaning",
    "start": "1693510",
    "end": "1699990"
  },
  {
    "text": "if I type in ABC on this form control it's gonna be marked as valid until I give it five numbers if you want to be a",
    "start": "1699990",
    "end": "1708510"
  },
  {
    "text": "nice developer to your team who doesn't like reg X's as much as you do you can name them very politely and then pass",
    "start": "1708510",
    "end": "1715050"
  },
  {
    "text": "that to your validator pattern so people know what's going on without crying themselves to sleep at night protip your",
    "start": "1715050",
    "end": "1720600"
  },
  {
    "text": "team will love you so different ways that we can handle creating validation",
    "start": "1720600",
    "end": "1726240"
  },
  {
    "text": "in patterns and reg axis so I use those quite a bit and then if you are like",
    "start": "1726240",
    "end": "1732630"
  },
  {
    "start": "1730000",
    "end": "1788000"
  },
  {
    "text": "alright Jennifer what the is going on I always like to tell people about chicks crossword games it's actually this really addicting puzzle that you",
    "start": "1732630",
    "end": "1738690"
  },
  {
    "text": "can go and play and learn how to do regex is better so it gives you these little sorry that's hard to see these",
    "start": "1738690",
    "end": "1745920"
  },
  {
    "text": "little scenarios that you can figure out what's going on i distracted an entire team for like a good two hours one day",
    "start": "1745920",
    "end": "1752100"
  },
  {
    "text": "at work showing him that fun times alright and finally we have function of validation and so maybe you want to",
    "start": "1752100",
    "end": "1758780"
  },
  {
    "text": "control your own logic where you have some sort of complex scenario maybe you have some sort of slider or range that",
    "start": "1758780",
    "end": "1765900"
  },
  {
    "text": "you're wanting to set and then you're wanting to get the value of that range and making sure your next input is inside of that range or something like",
    "start": "1765900",
    "end": "1772560"
  },
  {
    "text": "that that's how we can begin to write custom function validation and then pass that into our validators array the same",
    "start": "1772560",
    "end": "1780090"
  },
  {
    "text": "we would from one of the validators already provided by angular sweet",
    "start": "1780090",
    "end": "1788900"
  },
  {
    "start": "1788000",
    "end": "1974000"
  },
  {
    "text": "alright so problem number three I need to display one thing in an input field",
    "start": "1788900",
    "end": "1795240"
  },
  {
    "text": "for the user but submit somebody something else a very likely use case",
    "start": "1795240",
    "end": "1801990"
  },
  {
    "text": "this is where I've run into it the most is maybe you have reactive forms you're using some sort of component library",
    "start": "1801990",
    "end": "1807120"
  },
  {
    "text": "that has not been updated appropriately to interact with with reactive forms it's expecting an NG model or something",
    "start": "1807120",
    "end": "1812760"
  },
  {
    "text": "like that so how do we begin to deal with that has anybody heard of the control value access or interface couple",
    "start": "1812760",
    "end": "1820800"
  },
  {
    "text": "of hands yeah so he's scared by it I'm gonna unscary you that's my favorite",
    "start": "1820800",
    "end": "1827520"
  },
  {
    "text": "thing ever alright so angular has something called the control value access or interface",
    "start": "1827520",
    "end": "1833660"
  },
  {
    "text": "and so this defines an interface that acts as a bridge between the angular forms API in a native element in the Dom",
    "start": "1833660",
    "end": "1839760"
  },
  {
    "text": "so essentially it's a way to create custom inputs that we want to act just as regular form controls it's important",
    "start": "1839760",
    "end": "1848310"
  },
  {
    "text": "to know that it's an interface and so if you think back to interfaces on typescript any methods or any members on",
    "start": "1848310",
    "end": "1855180"
  },
  {
    "text": "a an interface that are defined must be implemented and whatever is extending it and then if it's marked by a question",
    "start": "1855180",
    "end": "1862680"
  },
  {
    "text": "mark that means it's optional so we've got a couple things going on here that I'll talk through the first thing to know is is the right value method",
    "start": "1862680",
    "end": "1869320"
  },
  {
    "text": "so this is the method that is going to be called in two different scenarios one when we instantiate our form control so",
    "start": "1869320",
    "end": "1875800"
  },
  {
    "text": "before when I was typing new form control and passing in a value write value will be called then with whatever that value is and then as we modify our",
    "start": "1875800",
    "end": "1883120"
  },
  {
    "text": "form control if we call set value or patch value and give it a new and give it a new value write value will be",
    "start": "1883120",
    "end": "1888820"
  },
  {
    "text": "called again so we're using this to find out when our form control has been instantiated or changed and then if we",
    "start": "1888820",
    "end": "1895540"
  },
  {
    "text": "need to do something to reflect that change to the UI that's what that is for register unchanged does that change",
    "start": "1895540",
    "end": "1901090"
  },
  {
    "text": "event so as we're tracking a user interacting with this custom component that we're going to be creating when they've",
    "start": "1901090",
    "end": "1907000"
  },
  {
    "text": "selected a value or the data or whatever information that we want to transmit to the form we're going to call this",
    "start": "1907000",
    "end": "1912700"
  },
  {
    "text": "register on change function we also have our register on touch function so we want to know when a user is interacted",
    "start": "1912700",
    "end": "1919180"
  },
  {
    "text": "with form control so if they click on it or blur out of it we want to go ahead and admit that event so the form is going to behave as expected and then our",
    "start": "1919180",
    "end": "1926590"
  },
  {
    "text": "optional method is set disabled state and this is going to be similar to the right value this is going to be called",
    "start": "1926590",
    "end": "1932290"
  },
  {
    "text": "when a form control is instantiated with a disabled state and then it's going to",
    "start": "1932290",
    "end": "1937600"
  },
  {
    "text": "be called if that disabled state changes so if we call dot naval or dock disabled on our form control this method will be",
    "start": "1937600",
    "end": "1943990"
  },
  {
    "text": "called so if you're creating a custom form control and you want to handle a scenario where it has a disabled",
    "start": "1943990",
    "end": "1950110"
  },
  {
    "text": "disabled' state and a user cannot interact with it that's how you will",
    "start": "1950110",
    "end": "1955330"
  },
  {
    "text": "manage that okay so the the basic thing to understand here is is the control",
    "start": "1955330",
    "end": "1962020"
  },
  {
    "text": "value access or interface is good for creating a custom component where you want really granular control of displaying one thing to the user in the",
    "start": "1962020",
    "end": "1968590"
  },
  {
    "text": "in the user interface but communicating something separate with your forms API",
    "start": "1968590",
    "end": "1974400"
  },
  {
    "start": "1974000",
    "end": "2002000"
  },
  {
    "text": "so a couple things that I see people struggle with they don't know where to put their validation or with where they",
    "start": "1974400",
    "end": "1979870"
  },
  {
    "text": "want to put their logic just think to yourself all you're doing is creating a custom form control and a form control",
    "start": "1979870",
    "end": "1985420"
  },
  {
    "text": "has no knowledge about specific validation other than the validator that is passed to it you just want to input",
    "start": "1985420",
    "end": "1991000"
  },
  {
    "text": "and output form values and make sure that your validation logic and everything is going to behave as",
    "start": "1991000",
    "end": "1996340"
  },
  {
    "text": "expected from the parent component or wherever that that form is being created",
    "start": "1996340",
    "end": "2002650"
  },
  {
    "start": "2002000",
    "end": "2023000"
  },
  {
    "text": "okay so if we go back to an example problem you might have seen this before we have some sort of drop-down and it's",
    "start": "2002650",
    "end": "2009760"
  },
  {
    "text": "going to have an array of objects we might want to display the name to the user that's Cuban readable but we want",
    "start": "2009760",
    "end": "2015550"
  },
  {
    "text": "to submit the ID to our API so how do we handle a situation when the library",
    "start": "2015550",
    "end": "2021310"
  },
  {
    "text": "doesn't allow for that I knew for this one I'm using an index bootstrap which",
    "start": "2021310",
    "end": "2027730"
  },
  {
    "start": "2023000",
    "end": "2031000"
  },
  {
    "text": "is where I first ran into this and so if you're not familiar it's just a basic",
    "start": "2027730",
    "end": "2033880"
  },
  {
    "start": "2031000",
    "end": "2066000"
  },
  {
    "text": "component library because who wants to rewrite all that stuff so they've got a",
    "start": "2033880",
    "end": "2039580"
  },
  {
    "text": "type a head here and basically it is not set up to work with reactive forms it's",
    "start": "2039580",
    "end": "2046390"
  },
  {
    "text": "just using the old ng-model syntax so what we're going to be doing is we're gonna wrap this input let it function as",
    "start": "2046390",
    "end": "2053530"
  },
  {
    "text": "expected with that with that ng model but then use the control value access or interface to then make it behave like a",
    "start": "2053530",
    "end": "2060700"
  },
  {
    "text": "reactive or a form control that can operate in reactive forms all right so",
    "start": "2060700",
    "end": "2068080"
  },
  {
    "start": "2066000",
    "end": "2092000"
  },
  {
    "text": "the first thing we need to do is is do a bit of setup code and so we're gonna create this custom component I'm calling",
    "start": "2068080",
    "end": "2073240"
  },
  {
    "text": "it my type-ahead component and I'm going to provide the energy value access so",
    "start": "2073240",
    "end": "2078760"
  },
  {
    "text": "this is going to register this this component that we're creating as a value access or an angular and use the forward",
    "start": "2078760",
    "end": "2085929"
  },
  {
    "text": "ref to refer to the component itself so it'll be ready for us to use so some setup code there the next thing",
    "start": "2085929",
    "end": "2093550"
  },
  {
    "start": "2092000",
    "end": "2124000"
  },
  {
    "text": "we're gonna do is when we implement the interface again because these different methods are required we need to make",
    "start": "2093550",
    "end": "2099490"
  },
  {
    "text": "sure that we're going to use them so I am just setting up my change events and then the right value event is going to",
    "start": "2099490",
    "end": "2106780"
  },
  {
    "text": "be called when that form control is initialized or when the value of it changes and so in this case if you think",
    "start": "2106780",
    "end": "2113530"
  },
  {
    "text": "about a form that maybe already has a value in a drop-down we want to make sure that we're going to go ahead and select that drop-down again in the UI so",
    "start": "2113530",
    "end": "2120070"
  },
  {
    "text": "it displays appropriately to the user okay so our template is gonna look",
    "start": "2120070",
    "end": "2126640"
  },
  {
    "start": "2124000",
    "end": "2185000"
  },
  {
    "text": "something like this where I can basically use whatever third-party component as expected inside of this",
    "start": "2126640",
    "end": "2132790"
  },
  {
    "text": "component I can use the entry model to to bind the this form control inside",
    "start": "2132790",
    "end": "2139600"
  },
  {
    "text": "of there because it's just gonna do its own thing and then it's not going to care about the eventual value that I'm emitting so this is just a basic set up",
    "start": "2139600",
    "end": "2146740"
  },
  {
    "text": "code where I am piping in so that that list of drag queens to this type a head",
    "start": "2146740",
    "end": "2153490"
  },
  {
    "text": "to list all those items I've got my selected model which is going to track whatever model I've chosen and I've just",
    "start": "2153490",
    "end": "2159730"
  },
  {
    "text": "got a template because instead of displaying object object I want to make sure I'm displaying the drag-queen name but then getting the value of the ID",
    "start": "2159730",
    "end": "2165460"
  },
  {
    "text": "which is what I care about submitting I have a custom on select event here and",
    "start": "2165460",
    "end": "2171100"
  },
  {
    "text": "then I have a custom onblur event here and again these are important because we want our form to be aware of when a form",
    "start": "2171100",
    "end": "2178600"
  },
  {
    "text": "control has changed and when it's been touched or and interacted with so we can have all that state management done",
    "start": "2178600",
    "end": "2184210"
  },
  {
    "text": "appropriately when it comes to using this in our form the cool thing is we're",
    "start": "2184210",
    "end": "2189730"
  },
  {
    "start": "2185000",
    "end": "2325000"
  },
  {
    "text": "not dealing with inputs or outputs or anything messy like that we're just using the form control named directive",
    "start": "2189730",
    "end": "2194830"
  },
  {
    "text": "because as far as angular is concerned at this point this is no different than a regular input so really nice really",
    "start": "2194830",
    "end": "2201940"
  },
  {
    "text": "clean way to create forms so if we look at kind of what this looks like in my",
    "start": "2201940",
    "end": "2208930"
  },
  {
    "text": "very random messy okay so here I'm",
    "start": "2208930",
    "end": "2220900"
  },
  {
    "text": "switching themes back and forth um so here you can see I have got my form",
    "start": "2220900",
    "end": "2226120"
  },
  {
    "text": "group here's a basic input that I have that's just taking the form control name directive or whatever that might be here",
    "start": "2226120",
    "end": "2233770"
  },
  {
    "text": "where I'm using my type-ahead I'm using it the exact same way where I'm just using that that form control name",
    "start": "2233770",
    "end": "2239050"
  },
  {
    "text": "directive to buy to bind my form control and just place in my form like that so",
    "start": "2239050",
    "end": "2244210"
  },
  {
    "text": "really nice really clean really elegant",
    "start": "2244210",
    "end": "2248339"
  },
  {
    "text": "alright so the cool thing about this is you can use the control value access or",
    "start": "2249780",
    "end": "2255520"
  },
  {
    "text": "a decree reusable form elements instead of having to do the same input-output event binding over and over and over",
    "start": "2255520",
    "end": "2261250"
  },
  {
    "text": "again so you can have really nice if you're having to wrap a bunch of different third-party components you can",
    "start": "2261250",
    "end": "2267430"
  },
  {
    "text": "use those over and over and over again and it's going exactly as a form control all right",
    "start": "2267430",
    "end": "2273849"
  },
  {
    "text": "problem number four I need to dynamically add and remove form controls and form groups so we've got a situation",
    "start": "2273849",
    "end": "2282519"
  },
  {
    "text": "here where I'll show you my little application where I want to select a few",
    "start": "2282519",
    "end": "2288549"
  },
  {
    "text": "different lip syncs to list in my drag race super fan profile so I want to be able to dynamically add as many lip",
    "start": "2288549",
    "end": "2295059"
  },
  {
    "text": "syncs as I want but also remove in case I get a little to lip sync happy so this",
    "start": "2295059",
    "end": "2300220"
  },
  {
    "text": "is the kind of behavior that we're creating dynamically adding and removing form controls if we look at our data",
    "start": "2300220",
    "end": "2307779"
  },
  {
    "text": "over here if you can see that okay this is basically I'm just outputting the the current form value and in the validity",
    "start": "2307779",
    "end": "2313539"
  },
  {
    "text": "stage just so it's visual for y'all but you can see as I'm adding these form",
    "start": "2313539",
    "end": "2319329"
  },
  {
    "text": "groups it's getting added to my form value so we know what's going on so the",
    "start": "2319329",
    "end": "2326289"
  },
  {
    "start": "2325000",
    "end": "2355000"
  },
  {
    "text": "first thing we need to know is what our former looks like and so I'm using the form builder syntax again so I have a",
    "start": "2326289",
    "end": "2334059"
  },
  {
    "text": "favorite lip syncs form control that is a form array and inside of that array",
    "start": "2334059",
    "end": "2339130"
  },
  {
    "text": "I'm going to have any number of form groups in each of those groups is gonna",
    "start": "2339130",
    "end": "2344469"
  },
  {
    "text": "have two keys it's gonna have a lip sticking and it's gonna have a lip sync excuse me he and a ranking key so",
    "start": "2344469",
    "end": "2349900"
  },
  {
    "text": "whatever that lip sync is that I love and my personal ranking for how awesome I think it is for iterating through this",
    "start": "2349900",
    "end": "2358390"
  },
  {
    "text": "in our markup we're going to iterate it iterate through it the same way we looked at our form controls but we need",
    "start": "2358390",
    "end": "2364390"
  },
  {
    "text": "a couple things here one we need to track the index of the form control which we will use for our removal method",
    "start": "2364390",
    "end": "2371339"
  },
  {
    "text": "so that's important know but again this should feel familiar where we are using our forum group directive to buy into",
    "start": "2371339",
    "end": "2377499"
  },
  {
    "text": "that nested form group inside that form array and then we are able to use our",
    "start": "2377499",
    "end": "2384219"
  },
  {
    "text": "form control name to get that form control and this I'm just reusing that",
    "start": "2384219",
    "end": "2389920"
  },
  {
    "text": "app type-ahead component I showed you that I built for that other scenario to pull in my list of links lip-synchs and",
    "start": "2389920",
    "end": "2397089"
  },
  {
    "text": "then i've got two buttons here one I've got my add lip-synchs button and so a neat I want to add another form group to that",
    "start": "2397089",
    "end": "2402650"
  },
  {
    "text": "form array click that button but then I also have a button to remove that lip-sync and I'm also passing it in the",
    "start": "2402650",
    "end": "2408470"
  },
  {
    "text": "index of the form control that's all we need for removing that so if we're",
    "start": "2408470",
    "end": "2413480"
  },
  {
    "start": "2412000",
    "end": "2453000"
  },
  {
    "text": "adding to the form there on the former way there is an insert method and so that is going to take basically an",
    "start": "2413480",
    "end": "2420080"
  },
  {
    "text": "insert index so wherever inside of that array the index at which you want to insert it and then whatever you want to",
    "start": "2420080",
    "end": "2425840"
  },
  {
    "text": "insert whether that's a form group whether that's just a form control or whether that's an array depending on how",
    "start": "2425840",
    "end": "2431300"
  },
  {
    "text": "crazy you're feeling that day so I've seen people like try and maybe like just",
    "start": "2431300",
    "end": "2436700"
  },
  {
    "text": "call it dot push because they think it's you know essentially just a JavaScript array but the appropriate thing to do is",
    "start": "2436700",
    "end": "2443750"
  },
  {
    "text": "to use the methods available on the form array class because that way your form",
    "start": "2443750",
    "end": "2449090"
  },
  {
    "text": "will make sure that it's handling its validity and everything correctly for removing from the forum we have a remove",
    "start": "2449090",
    "end": "2456380"
  },
  {
    "start": "2453000",
    "end": "2471000"
  },
  {
    "text": "@ method that's just going to take the index of whatever that item is that we want to remove so pretty basic on how to",
    "start": "2456380",
    "end": "2465020"
  },
  {
    "text": "use that and so that's how you can begin to create those dynamic form controls",
    "start": "2465020",
    "end": "2470710"
  },
  {
    "text": "all right problem number five this is a",
    "start": "2470710",
    "end": "2476060"
  },
  {
    "start": "2471000",
    "end": "2486000"
  },
  {
    "text": "tricky one that I have gotten a lot of questions about lately and heard some interesting scenarios so maybe you want",
    "start": "2476060",
    "end": "2482330"
  },
  {
    "text": "parts of a form nest and across components or routes so if you look at",
    "start": "2482330",
    "end": "2488119"
  },
  {
    "text": "my little signup form that I have here I've kind of highlighted in ugly colors for you to see I have this address that",
    "start": "2488119",
    "end": "2495950"
  },
  {
    "text": "is a form group and it's got these properties inside of here but maybe I'm going to have several different rooms throughout my",
    "start": "2495950",
    "end": "2501230"
  },
  {
    "text": "application and I want to reuse this kind of pattern where I have a group of form controls making up an address",
    "start": "2501230",
    "end": "2506660"
  },
  {
    "text": "pretty common scenario right so what I am going to do is use something called a",
    "start": "2506660",
    "end": "2513830"
  },
  {
    "start": "2510000",
    "end": "2530000"
  },
  {
    "text": "control container class and this is a way to basically access multiple insert",
    "start": "2513830",
    "end": "2520940"
  },
  {
    "text": "instances of ng control and so we can use that to basically walk up our our component tree and get access to those",
    "start": "2520940",
    "end": "2527810"
  },
  {
    "text": "different forms so in here I have a sample form that I've",
    "start": "2527810",
    "end": "2534540"
  },
  {
    "start": "2530000",
    "end": "2631000"
  },
  {
    "text": "first name in a last name and then I have just a subcomponent called app address and this is where I want to go",
    "start": "2534540",
    "end": "2541620"
  },
  {
    "text": "ahead and be able to put my my form controls for like street and city and state and zip but I don't want to have",
    "start": "2541620",
    "end": "2548580"
  },
  {
    "text": "to rewrite that I want to just be able to use this one app address component over and over and over again well if you",
    "start": "2548580",
    "end": "2554220"
  },
  {
    "text": "were to try to do this with just having those form controls inside of that app",
    "start": "2554220",
    "end": "2559380"
  },
  {
    "text": "address you'll probably get an error like form control instance is not registered or something like that so",
    "start": "2559380",
    "end": "2565830"
  },
  {
    "text": "what you're going to want to do is you're going to want to inject the control container class so here's what",
    "start": "2565830",
    "end": "2571050"
  },
  {
    "text": "this markup might look like where we have our our address our street city",
    "start": "2571050",
    "end": "2576990"
  },
  {
    "text": "state zip form control names we've got all that there so if you were to do this as is just like this it's going to be",
    "start": "2576990",
    "end": "2583920"
  },
  {
    "text": "trying to find this form or this state form control and not able to find it because it doesn't know what that",
    "start": "2583920",
    "end": "2589740"
  },
  {
    "text": "initial form is so we need to tell it what that is so we can inject control container and that's gonna look for up",
    "start": "2589740",
    "end": "2596220"
  },
  {
    "text": "for our control instances and so we can actually get what our original form group is and then we can use that in our",
    "start": "2596220",
    "end": "2602970"
  },
  {
    "text": "form Group directive and say all right angular this is this is my form now you can go and you can look for these",
    "start": "2602970",
    "end": "2608610"
  },
  {
    "text": "specific form controls inside of that form group so this will work across the",
    "start": "2608610",
    "end": "2614700"
  },
  {
    "text": "nested components this will work across route it's a whole lot of different scenarios and situations for when you",
    "start": "2614700",
    "end": "2622710"
  },
  {
    "text": "might have forms broken up across different ways but you want one cohesive piece of information that you want to",
    "start": "2622710",
    "end": "2628050"
  },
  {
    "text": "submit all right so a couple little tics",
    "start": "2628050",
    "end": "2633660"
  },
  {
    "start": "2631000",
    "end": "2640000"
  },
  {
    "text": "tips and tricks that aren't very easy to find or figure out but they can like cause some serious issues there is if",
    "start": "2633660",
    "end": "2641970"
  },
  {
    "start": "2640000",
    "end": "2696000"
  },
  {
    "text": "you're essentially wanting to update a value on a form control and you're also subscribing to a value on the form",
    "start": "2641970",
    "end": "2648120"
  },
  {
    "text": "control what do you think will happen if you're doing changes that are dependent based on on that value updating it can",
    "start": "2648120",
    "end": "2655380"
  },
  {
    "text": "get really really gross because if you're setting the value well it's gonna call that's gonna create an observable",
    "start": "2655380",
    "end": "2660570"
  },
  {
    "text": "for a new it's gonna call next on that observable and so you're gonna keep",
    "start": "2660570",
    "end": "2666690"
  },
  {
    "text": "subscribing and then keep emitting new Val it can get really really bad so you can actually when you're calling modification method it's like patch",
    "start": "2666690",
    "end": "2673440"
  },
  {
    "text": "value or set value you can pass in an option called event and you can pass that in as false",
    "start": "2673440",
    "end": "2678720"
  },
  {
    "text": "so that will basically update the form value but it won't dispatch an event that anything's listening for so when",
    "start": "2678720",
    "end": "2685020"
  },
  {
    "text": "I'm subscribing to value changes that would not be called with with the new",
    "start": "2685020",
    "end": "2690930"
  },
  {
    "text": "value if you use a min of nth so a little little tidbit for you there yep",
    "start": "2690930",
    "end": "2698370"
  },
  {
    "start": "2696000",
    "end": "2711000"
  },
  {
    "text": "and then I mentioned already when you're initializing form controls using the form builder syntax you need to make sure to pass in the disabled status",
    "start": "2698370",
    "end": "2705240"
  },
  {
    "text": "regardless of its enabled or disabled to make sure the form control behaves properly so kind of summarizing",
    "start": "2705240",
    "end": "2713220"
  },
  {
    "start": "2711000",
    "end": "2760000"
  },
  {
    "text": "everything that we talked about reactive forms yeah hopefully not so scary and hopefully if you didn't have a good",
    "start": "2713220",
    "end": "2718740"
  },
  {
    "text": "understanding of reactive programming you have a little bit a little bit clearer of a picture of that approach",
    "start": "2718740",
    "end": "2724460"
  },
  {
    "text": "custom required miss and validation is actually kind of a breeze there's a lot",
    "start": "2724460",
    "end": "2729570"
  },
  {
    "text": "of really great built in stuff to angular already if you know how to use it properly there's very little code you",
    "start": "2729570",
    "end": "2734730"
  },
  {
    "text": "should have to write the control value accessors solves any kind of form issue",
    "start": "2734730",
    "end": "2739920"
  },
  {
    "text": "where you want to display something to a user and submit something else you can have really good granular control over",
    "start": "2739920",
    "end": "2745110"
  },
  {
    "text": "that you can use the control container class to manage complex forms across components and across routes so maybe",
    "start": "2745110",
    "end": "2752460"
  },
  {
    "text": "forms aren't that complicated after this presentation that's my hope anyway also avril lavigne",
    "start": "2752460",
    "end": "2758190"
  },
  {
    "text": "is timeless again if you did not get it earlier demo codes here just watching",
    "start": "2758190",
    "end": "2769290"
  },
  {
    "start": "2760000",
    "end": "2775000"
  },
  {
    "text": "for cameras okay",
    "start": "2769290",
    "end": "2776130"
  },
  {
    "start": "2775000",
    "end": "2880000"
  },
  {
    "text": "and if you have any questions raised a hand here's if you want the slides for",
    "start": "2776130",
    "end": "2782769"
  },
  {
    "text": "this you can take a photo of that as well but any questions any complicated",
    "start": "2782769",
    "end": "2790690"
  },
  {
    "text": "situations I did not cover",
    "start": "2790690",
    "end": "2793798"
  },
  {
    "text": "all right well I hope you have a lovely rest of the conference view wonderful humans if you have nog on your PubCon",
    "start": "2798880",
    "end": "2806080"
  },
  {
    "text": "tickets for Friday night I would highly recommend going it is a blasted as a",
    "start": "2806080",
    "end": "2811180"
  },
  {
    "text": "speaker competition it is pretty off-the-wall inappropriate and hilarious",
    "start": "2811180",
    "end": "2816490"
  },
  {
    "text": "and all fun is to be had especially because I was a champion from last year so sorry",
    "start": "2816490",
    "end": "2825450"
  }
]