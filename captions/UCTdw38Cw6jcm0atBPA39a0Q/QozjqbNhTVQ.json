[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "welcome to this installment of fun with algorithms",
    "start": "120",
    "end": "5220"
  },
  {
    "text": "I am Tess I'm a developer at Microsoft and I might be a little bit more excited about algorithms than the average Joe I",
    "start": "5220",
    "end": "12179"
  },
  {
    "text": "hope you are too because um that's going to mean we're going to have fun for the next hour or so",
    "start": "12179",
    "end": "18300"
  },
  {
    "text": "um about two years ago actually this uh this guy over here Dylan introduced me",
    "start": "18300",
    "end": "23820"
  },
  {
    "text": "to this site called Advent of code which has like super fun",
    "start": "23820",
    "end": "29340"
  },
  {
    "text": "um algorithm puzzles throughout the and the month of December and that led to a",
    "start": "29340",
    "end": "35880"
  },
  {
    "text": "series of events that led to me doing competitive programming and a couple of things like that but",
    "start": "35880",
    "end": "41340"
  },
  {
    "text": "um yeah generally getting even more interested in algorithms I think they've gotten a little bit of a",
    "start": "41340",
    "end": "47940"
  },
  {
    "start": "45000",
    "end": "183000"
  },
  {
    "text": "bad rep as something that's only used during interviews",
    "start": "47940",
    "end": "53520"
  },
  {
    "text": "because um let's face it maybe not all of our days look like this at least not mine I",
    "start": "53520",
    "end": "60000"
  },
  {
    "text": "wish they did I honestly wish they did but um they do look a little bit like this",
    "start": "60000",
    "end": "66659"
  },
  {
    "text": "like a lot of pre-processing of data and things like that and all of those build on the",
    "start": "66659",
    "end": "73680"
  },
  {
    "text": "algorithms that we're going to talk about today but today we're going to talk about a little bit more basic fun",
    "start": "73680",
    "end": "79759"
  },
  {
    "text": "algorithms so did I say they were fun I hope you think they are too because that's that's the reason I hope you're",
    "start": "79759",
    "end": "87420"
  },
  {
    "text": "here so we're going to start off with and we're going to go through a series of like big blocks of algorithms that you",
    "start": "87420",
    "end": "94439"
  },
  {
    "text": "can use as the basis and then kind of use them as Lego pieces to build up bigger algorithms we're going to start",
    "start": "94439",
    "end": "101520"
  },
  {
    "text": "off with a game and this game is I'm thinking about a number between one and a hundred and",
    "start": "101520",
    "end": "108060"
  },
  {
    "text": "you're gonna guess which number it is in the most optimal way so that you have",
    "start": "108060",
    "end": "113579"
  },
  {
    "text": "to perform the least guesses as possible you with me so what would your first guess be what",
    "start": "113579",
    "end": "120600"
  },
  {
    "text": "would your first optimal guest be anyone 50. everyone knows yeah",
    "start": "120600",
    "end": "127259"
  },
  {
    "text": "so 50 is definitely the optimal guess why because it even it evenly divides",
    "start": "127259",
    "end": "134459"
  },
  {
    "text": "the problem space into two pieces so when I say",
    "start": "134459",
    "end": "139739"
  },
  {
    "text": "um when you say 50 I say higher we've already eliminated number 1 through 50",
    "start": "139739",
    "end": "145200"
  },
  {
    "text": "right and then we can go through and follow up with this and we say you know we divide",
    "start": "145200",
    "end": "150959"
  },
  {
    "text": "it again in the middle say 75 I say higher 88 I say lower 81 higher 84",
    "start": "150959",
    "end": "159000"
  },
  {
    "text": "higher 86 and so on until we find like the perfect match which is 85 in this",
    "start": "159000",
    "end": "165540"
  },
  {
    "text": "case that's the number I was thinking about now this took seven guesses this turns",
    "start": "165540",
    "end": "171720"
  },
  {
    "text": "out to be the maximum number of guesses that you will ever have to guess if someone is thinking about a number",
    "start": "171720",
    "end": "178620"
  },
  {
    "text": "between one and a hundred but we'll get there in a second this algorithm that we used kind of invented",
    "start": "178620",
    "end": "185459"
  },
  {
    "start": "183000",
    "end": "347000"
  },
  {
    "text": "or that we've known from when we were children almost it's an algorithm called binary search",
    "start": "185459",
    "end": "191099"
  },
  {
    "text": "and it's a very very powerful algorithm that can be used in many ways",
    "start": "191099",
    "end": "196739"
  },
  {
    "text": "um why is it so powerful well if we would have done what is called the linear search of the data if you would",
    "start": "196739",
    "end": "203580"
  },
  {
    "text": "have said one and I would have said higher and then two and then higher you",
    "start": "203580",
    "end": "208739"
  },
  {
    "text": "would have attached to ask me 86 times or 85 times before I got the number right right",
    "start": "208739",
    "end": "214620"
  },
  {
    "text": "in fact the worst case scenario you would have had to to ask me a hundred times",
    "start": "214620",
    "end": "219840"
  },
  {
    "text": "because this is something called an O of n algorithm it's like whatever the",
    "start": "219840",
    "end": "225540"
  },
  {
    "text": "number space it is is the maximum number of questions you have to ask me however in the case of the binary search",
    "start": "225540",
    "end": "233159"
  },
  {
    "text": "way where we guessed 50 and then 75 and everything we have to guess the maximum",
    "start": "233159",
    "end": "238680"
  },
  {
    "text": "number of seven because um if we look at how we divide the space",
    "start": "238680",
    "end": "244140"
  },
  {
    "text": "and look at like 2 to the power of 6 is 64. to the to the power of 70 or 7 is",
    "start": "244140",
    "end": "250260"
  },
  {
    "text": "128. somewhere in between there like seven or a life state number that will",
    "start": "250260",
    "end": "256320"
  },
  {
    "text": "will be the actual maximum number um 664. but we can't guess 664 times so",
    "start": "256320",
    "end": "264300"
  },
  {
    "text": "we have to guess seven so this is our maximum number of things now we think okay so 7 versus 86 or",
    "start": "264300",
    "end": "273240"
  },
  {
    "text": "actually 100 computers are fast why do we care this is",
    "start": "273240",
    "end": "278759"
  },
  {
    "text": "um I mean they can equally easily process seven versus hundred but what if",
    "start": "278759",
    "end": "284580"
  },
  {
    "text": "it's a million then it turns out that it's a difference between a million",
    "start": "284580",
    "end": "289919"
  },
  {
    "text": "and log two of um a million which is 20. and if it's 10",
    "start": "289919",
    "end": "295199"
  },
  {
    "text": "million it turns out the log 2 the the maximum number of guesses I have to make",
    "start": "295199",
    "end": "300300"
  },
  {
    "text": "is 29. so 10 million versus 29 now we're talking right so this matters in the big",
    "start": "300300",
    "end": "307680"
  },
  {
    "text": "scale when we have big big numbers to guess from so this binary search thing is something",
    "start": "307680",
    "end": "314160"
  },
  {
    "text": "that you can use in any kind of sorted space like you want to see if a number",
    "start": "314160",
    "end": "319259"
  },
  {
    "text": "exists in a sorted array we do the same thing and we take the you know the lowest and",
    "start": "319259",
    "end": "325919"
  },
  {
    "text": "highest index we take somewhere in the middle and then we say is it lower or higher slower so we now change our search space",
    "start": "325919",
    "end": "334560"
  },
  {
    "text": "and finally we end up quickly at the right number just like interesting but a little bit",
    "start": "334560",
    "end": "341880"
  },
  {
    "text": "boring so now how can we apply this to some really interesting problems like this",
    "start": "341880",
    "end": "348240"
  },
  {
    "text": "lead code problem and don't feel like you have to read all this we're going to go through this with pictures and things",
    "start": "348240",
    "end": "354479"
  },
  {
    "text": "um but this is a medium lead code question already in the first five minutes of of the talk",
    "start": "354479",
    "end": "360600"
  },
  {
    "text": "so we have our friend Coco the monkey she likes bananas surprise surprise and she gets a",
    "start": "360600",
    "end": "369600"
  },
  {
    "text": "pile or a number of piles of bananas from her keepers at the zoo",
    "start": "369600",
    "end": "374880"
  },
  {
    "text": "um these piles contain some number of bananas each and they say we're going to be back in",
    "start": "374880",
    "end": "382139"
  },
  {
    "text": "eight hours and you need to eat the bananas okay now",
    "start": "382139",
    "end": "387240"
  },
  {
    "text": "she likes to savor her bananas so she likes to eat them very very slowly but",
    "start": "387240",
    "end": "392400"
  },
  {
    "text": "fast enough that she can eat all of them before the the guards come back",
    "start": "392400",
    "end": "398160"
  },
  {
    "text": "she also has another quirk she'll only eat bananas from one pile at",
    "start": "398160",
    "end": "403259"
  },
  {
    "text": "a time so we can't just take you know whatever the sum of the numbers and divide it by",
    "start": "403259",
    "end": "408960"
  },
  {
    "text": "um by your hours so let's say for example she eats at two bananas per hour",
    "start": "408960",
    "end": "414300"
  },
  {
    "text": "then it will take her a total of 15 hours to eat a bananas right",
    "start": "414300",
    "end": "419940"
  },
  {
    "text": "clear so far um if she were to eat at Three Bananas per hour we can sum it up and we can",
    "start": "419940",
    "end": "426479"
  },
  {
    "text": "find out the chicken eat them in 10 hours still not good enough or four",
    "start": "426479",
    "end": "431639"
  },
  {
    "text": "and now finally we get to a number this is like the lowest number that we can get to where she can eat the bananas",
    "start": "431639",
    "end": "438240"
  },
  {
    "text": "like this is the slowest speed where she can eat a bananas and still still get here",
    "start": "438240",
    "end": "444360"
  },
  {
    "text": "um so this is us doing linear search through the uh through the speeds",
    "start": "444360",
    "end": "450840"
  },
  {
    "text": "well it turns out that Coco is a little bit out there she has",
    "start": "450840",
    "end": "457020"
  },
  {
    "start": "451000",
    "end": "557000"
  },
  {
    "text": "um she'll get like up to 10 000 piles of bananas and each pile of bananas can contain a",
    "start": "457020",
    "end": "464819"
  },
  {
    "text": "billion bananas that's bananas",
    "start": "464819",
    "end": "470419"
  },
  {
    "text": "um I'm thinking like at this point this might not be about cocoa and the bananas",
    "start": "470880",
    "end": "476639"
  },
  {
    "text": "this might be about you know running tasks on Azure batch but we'll keep it to the to the cocoa",
    "start": "476639",
    "end": "484560"
  },
  {
    "text": "and the bananas because that's a little bit more fun so how do we deal with this because now",
    "start": "484560",
    "end": "490199"
  },
  {
    "text": "if we go through this and we look at this how many actual operations do we have to make here this is going to be horrendous",
    "start": "490199",
    "end": "497940"
  },
  {
    "text": "like every cut every sum that we're doing we're summing over like a maximum",
    "start": "497940",
    "end": "503520"
  },
  {
    "text": "of 10 000 piles and the maximum speed that we could",
    "start": "503520",
    "end": "510720"
  },
  {
    "text": "foresee is actually at the maximum number of bananas in a given pile because in this example if we",
    "start": "510720",
    "end": "519000"
  },
  {
    "text": "were to go anywhere over 11 bananas per hour we could still only eat bananas we",
    "start": "519000",
    "end": "524700"
  },
  {
    "text": "could still only eat one of the pilots in in one hour so so we know that lowest is one the",
    "start": "524700",
    "end": "532320"
  },
  {
    "text": "highest is one billion and we have to iterate over ten thousand so if we would do it the normal way we",
    "start": "532320",
    "end": "541080"
  },
  {
    "text": "would end up with a potential of like 10 bazillion calculations I don't even know",
    "start": "541080",
    "end": "547140"
  },
  {
    "text": "how to how to write how to say that number but ten thousand by a billion",
    "start": "547140",
    "end": "553800"
  },
  {
    "text": "but what if we did it with binary search now it becomes a little bit interesting",
    "start": "553800",
    "end": "559800"
  },
  {
    "start": "557000",
    "end": "638000"
  },
  {
    "text": "so what we do here is this is summing up the",
    "start": "559800",
    "end": "564839"
  },
  {
    "text": "um the hours over the piles and then we use this binary search",
    "start": "564839",
    "end": "570720"
  },
  {
    "text": "pattern of if we find the speed that's you know",
    "start": "570720",
    "end": "576240"
  },
  {
    "text": "that doesn't take us there we have to increase the speed or if we found a speed that's good enough then we know",
    "start": "576240",
    "end": "583080"
  },
  {
    "text": "that the speed that we're looking for is between one and that number",
    "start": "583080",
    "end": "588240"
  },
  {
    "text": "so we can use the same technique that we use when guessing the numbers to narrow down",
    "start": "588240",
    "end": "593660"
  },
  {
    "text": "the speed that coca needs to use here and this now takes us to what",
    "start": "593660",
    "end": "600779"
  },
  {
    "text": "it takes us to um a calculation of like a maximum",
    "start": "600779",
    "end": "606180"
  },
  {
    "text": "calculation of 10 000 by 29 versus 10 000 by actually it's going to be a lot",
    "start": "606180",
    "end": "612540"
  },
  {
    "text": "more because a billion would have been it would be more than 29 sorry I calculated that wrong but literally it",
    "start": "612540",
    "end": "619620"
  },
  {
    "text": "will be like a huge huge improvement over like doing it the linear search way",
    "start": "619620",
    "end": "625620"
  },
  {
    "text": "so this is where binary search becomes interesting when you have like when you're looking through large spaces but",
    "start": "625620",
    "end": "633300"
  },
  {
    "text": "it doesn't have to be as boring as a sort of array",
    "start": "633300",
    "end": "638300"
  },
  {
    "start": "638000",
    "end": "825000"
  },
  {
    "text": "you see in in the pictures that I've used this o of something and I'm sure a",
    "start": "638880",
    "end": "644700"
  },
  {
    "text": "lot of you know what this is and that this is called Big O notation",
    "start": "644700",
    "end": "650519"
  },
  {
    "text": "so I'm not going to go through a full course of like what a Big O notation is but Big O is a way for us to compare",
    "start": "650519",
    "end": "657500"
  },
  {
    "text": "algorithms compare is roughly compare whether one algorithm is better than the",
    "start": "657500",
    "end": "663300"
  },
  {
    "text": "other yes by how many iterations we have to make through the data so if we have",
    "start": "663300",
    "end": "669899"
  },
  {
    "text": "a list of fruits um and we go through the fruits you know we have a loop that goes through the",
    "start": "669899",
    "end": "676320"
  },
  {
    "text": "fruit this is called oweven because it's linearly um related to the input size that will",
    "start": "676320",
    "end": "683640"
  },
  {
    "text": "that means that if we have a hundred items we do 100 iterations if we have a",
    "start": "683640",
    "end": "689940"
  },
  {
    "text": "thousand items we do a thousand iterations and so on if we do a double loop it's going to be",
    "start": "689940",
    "end": "695579"
  },
  {
    "text": "N squared it's very easy to understand I think but this is very rough and this is",
    "start": "695579",
    "end": "701940"
  },
  {
    "text": "talking about like the worst case scenario now if we do something like this we just print fruit salad that has",
    "start": "701940",
    "end": "707940"
  },
  {
    "text": "nothing to do with the fruits in the in the thing that's called a constant so",
    "start": "707940",
    "end": "713940"
  },
  {
    "text": "it's it's constant it's not related to the the number of items in the list even",
    "start": "713940",
    "end": "719820"
  },
  {
    "text": "if we print like five things it doesn't matter it's still constant because we",
    "start": "719820",
    "end": "726360"
  },
  {
    "text": "don't care about coefficients and things like that we already know that if this was a",
    "start": "726360",
    "end": "733140"
  },
  {
    "text": "sorted array and we wanted to binary search through it we have log of n which is",
    "start": "733140",
    "end": "738360"
  },
  {
    "text": "very useful um would it be better if we sorted the array and then did binary search if we",
    "start": "738360",
    "end": "744779"
  },
  {
    "text": "had a non-assorted array the answer is no because sorting also takes a lot of",
    "start": "744779",
    "end": "750540"
  },
  {
    "text": "time in fact it takes more than you're searching through the array this is just for you to know",
    "start": "750540",
    "end": "757019"
  },
  {
    "text": "that even like built-ins have a cost um",
    "start": "757019",
    "end": "762899"
  },
  {
    "text": "so yes for a comparison this is like what you're looking for if you're looking for an algorithm that performs a",
    "start": "762899",
    "end": "770279"
  },
  {
    "text": "log of n versus then to basically if you find an algorithm that is at n that's a pretty good algorithm",
    "start": "770279",
    "end": "778019"
  },
  {
    "text": "in most cases if we did something like this if we want",
    "start": "778019",
    "end": "783720"
  },
  {
    "text": "to know if Peach is in fruit then this is actually an O of n",
    "start": "783720",
    "end": "790200"
  },
  {
    "text": "operation we have to go through the whole list to figure it out if we're using a list",
    "start": "790200",
    "end": "796019"
  },
  {
    "text": "however is there something we can do here anyone",
    "start": "796019",
    "end": "801600"
  },
  {
    "text": "yeah using a set or a hash table or a dictionary or anything like that we",
    "start": "801600",
    "end": "808139"
  },
  {
    "text": "would have a constant lookup so whenever you have a situation where you want to be able to quickly look something up",
    "start": "808139",
    "end": "814139"
  },
  {
    "text": "then using a set is million times better than using a list especially if you have",
    "start": "814139",
    "end": "820440"
  },
  {
    "text": "a large list if you have a small list it doesn't really matter",
    "start": "820440",
    "end": "825440"
  },
  {
    "start": "825000",
    "end": "945000"
  },
  {
    "text": "um which brings us to data structures which is one of the biggest things to",
    "start": "825899",
    "end": "831600"
  },
  {
    "text": "look at when and like one of the biggest choices that you can make when you want to optimize something",
    "start": "831600",
    "end": "837000"
  },
  {
    "text": "so if we have a dictionary or a set that has a constant lookup",
    "start": "837000",
    "end": "842180"
  },
  {
    "text": "meaning that they're super good for when you want to throw something in and find out if if an item is in the list or if",
    "start": "842180",
    "end": "849720"
  },
  {
    "text": "or sorry in the set or in the dictionary however why don't we always use",
    "start": "849720",
    "end": "855740"
  },
  {
    "text": "dictionary Source sets because dictionaries or sets don't allow",
    "start": "855740",
    "end": "861839"
  },
  {
    "text": "us to have an ordered number of elements so a dictionary or set doesn't have an order and oftentimes we want an order it",
    "start": "861839",
    "end": "869760"
  },
  {
    "text": "matters to us which one comes first and last it also doesn't allow us to have",
    "start": "869760",
    "end": "874980"
  },
  {
    "text": "duplicate items which is another reason why we would have a list and it requires us to have something",
    "start": "874980",
    "end": "881639"
  },
  {
    "text": "called hashable items which means integers or strings or things like that",
    "start": "881639",
    "end": "887760"
  },
  {
    "text": "that we can create a hash off not an object that is not something that we can",
    "start": "887760",
    "end": "893760"
  },
  {
    "text": "have in a dictionary an array or a list can also become a",
    "start": "893760",
    "end": "900420"
  },
  {
    "text": "stack it it's in fact a stack by default um if we pop from the back I am I'm saying",
    "start": "900420",
    "end": "907680"
  },
  {
    "text": "this because oftentimes we want to have something else where we want first in first out situations and then we can use",
    "start": "907680",
    "end": "915420"
  },
  {
    "text": "a neighbor of the list which is called a q or a double Eden ended queue",
    "start": "915420",
    "end": "921360"
  },
  {
    "text": "um or Heap and by the way the pop left and pop right are usually a constant",
    "start": "921360",
    "end": "926899"
  },
  {
    "text": "operation as well or a heap where we can get like the minimum or the maximum value fairly cheap",
    "start": "926899",
    "end": "933899"
  },
  {
    "text": "um or we can do like a sorted array which is quite expensive compared to",
    "start": "933899",
    "end": "939300"
  },
  {
    "text": "everything else because it needs to keep sorted and therefore it also needs to",
    "start": "939300",
    "end": "944399"
  },
  {
    "text": "to do a lot of work to keep sorted and then we have a very very special kind of",
    "start": "944399",
    "end": "950160"
  },
  {
    "start": "945000",
    "end": "1126000"
  },
  {
    "text": "um data set or sorry data structure that's called a graph and this brings us into the next big set of algorithms and",
    "start": "950160",
    "end": "958260"
  },
  {
    "text": "and I think the ones that are my favorite to be honest so we've all we're only using graphs",
    "start": "958260",
    "end": "965880"
  },
  {
    "text": "somehow in in our applications I think um one example of the graph might be",
    "start": "965880",
    "end": "971220"
  },
  {
    "text": "friends on Facebook this is called an undirected graph because we don't have sort of like if",
    "start": "971220",
    "end": "978180"
  },
  {
    "text": "I'm friends with you you're friends with me there is no direction to this or or",
    "start": "978180",
    "end": "983519"
  },
  {
    "text": "at least there's two directions basically it's it goes both ways",
    "start": "983519",
    "end": "989160"
  },
  {
    "text": "whereas for example if we have something like a Twitter group of friends then",
    "start": "989160",
    "end": "994620"
  },
  {
    "text": "this is a directed graph because we might all be following Beyonce but she",
    "start": "994620",
    "end": "1000680"
  },
  {
    "text": "ain't following following none of us well I don't know maybe someone in at the top but not me she's not following",
    "start": "1000680",
    "end": "1007339"
  },
  {
    "text": "me um so this is a directed graph and we can also have a graph for example",
    "start": "1007339",
    "end": "1013600"
  },
  {
    "text": "in this case a graph of cities where the nodes and these are called the nodes",
    "start": "1013600",
    "end": "1019399"
  },
  {
    "text": "um are the cities and then the roads are the edges in the graph and this is a",
    "start": "1019399",
    "end": "1025280"
  },
  {
    "text": "special graph because it has weights so the steps between two nodes are not",
    "start": "1025280",
    "end": "1031339"
  },
  {
    "text": "equal instead they have different lengths and this is important for when we go through and find like shortest",
    "start": "1031339",
    "end": "1037160"
  },
  {
    "text": "paths and things like that and this one also has a cycle so",
    "start": "1037160",
    "end": "1043100"
  },
  {
    "text": "um here for example if someone says take me from here to to here we might get",
    "start": "1043100",
    "end": "1049400"
  },
  {
    "text": "stuck in this cycle um actually get stuck there forever if we don't take care and and check our",
    "start": "1049400",
    "end": "1056360"
  },
  {
    "text": "like and remember what we visited and things like that um yes another set of",
    "start": "1056360",
    "end": "1063260"
  },
  {
    "text": "um weighted items so this is like a set of tasks in this case and this is called",
    "start": "1063260",
    "end": "1068539"
  },
  {
    "text": "a disjoint set because it has like two groups so not all of the items are",
    "start": "1068539",
    "end": "1074720"
  },
  {
    "text": "connected and we can have other things that don't look like graphs but there are graphs so",
    "start": "1074720",
    "end": "1079940"
  },
  {
    "text": "this is a typical thing that doesn't look like graph but it's a graph where every path that you can walk in this",
    "start": "1079940",
    "end": "1087140"
  },
  {
    "text": "maze is a node and every neighbor is every other uh every other square that",
    "start": "1087140",
    "end": "1093980"
  },
  {
    "text": "you can get to is um like has one connection between them",
    "start": "1093980",
    "end": "1099020"
  },
  {
    "text": "but you wouldn't necessarily build this up and write like okay so there's connection between zero zero and zero",
    "start": "1099020",
    "end": "1105620"
  },
  {
    "text": "one like those indices instead you would kind of like figure that out on the Fly",
    "start": "1105620",
    "end": "1110900"
  },
  {
    "text": "and then you might have something like a chess board with a horse where its",
    "start": "1110900",
    "end": "1116240"
  },
  {
    "text": "neighbors are not the neighboring squares but the other squares that it can get to so this is",
    "start": "1116240",
    "end": "1123860"
  },
  {
    "text": "also a graph um some special graphs trees",
    "start": "1123860",
    "end": "1129559"
  },
  {
    "start": "1126000",
    "end": "1215000"
  },
  {
    "text": "um an even more special trees buying a research trees so these are super useful",
    "start": "1129559",
    "end": "1136400"
  },
  {
    "text": "for example if we want to be able to sort a set and quickly figure out when",
    "start": "1136400",
    "end": "1141679"
  },
  {
    "text": "something is slower or higher so in this case we can see that everything to the left of the eight is lower and",
    "start": "1141679",
    "end": "1148400"
  },
  {
    "text": "everything to the right of the eight is higher than the eight or if you see someone on Twitter it says",
    "start": "1148400",
    "end": "1155840"
  },
  {
    "text": "you're I'm not interested in algorithms I've never used to try they might have",
    "start": "1155840",
    "end": "1160880"
  },
  {
    "text": "because a try is a very special tree that's used when you do for example asp.net routing so a try is is a tree",
    "start": "1160880",
    "end": "1169820"
  },
  {
    "text": "where you start typing something in in this case and the only options that we",
    "start": "1169820",
    "end": "1175640"
  },
  {
    "text": "have are a or b um those are the only valid starts of our route",
    "start": "1175640",
    "end": "1181340"
  },
  {
    "text": "and then from if you've typed in a the only valid next option is p else it's",
    "start": "1181340",
    "end": "1188059"
  },
  {
    "text": "not in your dictionary and finally if you type in a p again like it's listing it as a valid word so",
    "start": "1188059",
    "end": "1195860"
  },
  {
    "text": "this is like a valid path or a valid dictionary word so this is a super super",
    "start": "1195860",
    "end": "1202039"
  },
  {
    "text": "quick data structure to use for these kind of like pattern matching or or",
    "start": "1202039",
    "end": "1208580"
  },
  {
    "text": "route equation and then a linked list is um",
    "start": "1208580",
    "end": "1214039"
  },
  {
    "text": "is another good one so you might think okay so they look good on paper but how do I actually you",
    "start": "1214039",
    "end": "1220880"
  },
  {
    "text": "know represent them in anything that's useful for a computer and one way of representing them is",
    "start": "1220880",
    "end": "1226940"
  },
  {
    "text": "through an edge list so this is used listing the the edges that there is like",
    "start": "1226940",
    "end": "1232940"
  },
  {
    "text": "you know a Road between Arsenal and Stockholm and one between Australia and Copenhagen",
    "start": "1232940",
    "end": "1238580"
  },
  {
    "text": "um you could even add and don't worry about like the kilometers they are not correct I know that but uh I just drew",
    "start": "1238580",
    "end": "1245240"
  },
  {
    "text": "something super fast um and then but you can put in an edge",
    "start": "1245240",
    "end": "1250280"
  },
  {
    "text": "list also the weight of the rows between them this is useful because it's very compact",
    "start": "1250280",
    "end": "1257840"
  },
  {
    "text": "but it's not useful for iterating through and the graph in any way because it's hard and it's costly to go through",
    "start": "1257840",
    "end": "1265220"
  },
  {
    "text": "and say what are the possible other cities I can reach from Oslo for example",
    "start": "1265220",
    "end": "1271039"
  },
  {
    "text": "so then you build something called an adjacency list that looks like this so this is just",
    "start": "1271039",
    "end": "1276440"
  },
  {
    "text": "basically a dictionary that has for every node which other nodes that you can get to",
    "start": "1276440",
    "end": "1283400"
  },
  {
    "text": "and um similarly if you want to add weight you could do this",
    "start": "1283400",
    "end": "1289039"
  },
  {
    "text": "okay enough about data structures let's get into some algorithms again so one of the most important algorithms",
    "start": "1289039",
    "end": "1296900"
  },
  {
    "text": "when it comes to graphs and I will is reiterate this graphs are like everywhere you'll use them all the time",
    "start": "1296900",
    "end": "1303260"
  },
  {
    "text": "so it's quite uh for me at least I think it's it's quite interesting to know these graph",
    "start": "1303260",
    "end": "1309679"
  },
  {
    "start": "1309000",
    "end": "1428000"
  },
  {
    "text": "algorithms the first one is depth first search I'm sure",
    "start": "1309679",
    "end": "1314960"
  },
  {
    "text": "Evol at some point written a depth first search whether or not you know that it was a depth first search so what we do",
    "start": "1314960",
    "end": "1321799"
  },
  {
    "text": "in this case is we go from the start and then go to a neighbor or a child and",
    "start": "1321799",
    "end": "1329360"
  },
  {
    "text": "then we go to its child and its child and each child and each child and so on",
    "start": "1329360",
    "end": "1334820"
  },
  {
    "text": "until we reach our goal so it's like you go the Deep Way first this is a good way",
    "start": "1334820",
    "end": "1342320"
  },
  {
    "text": "of iterating through through a graph and if you find a dead end or or something you can then",
    "start": "1342320",
    "end": "1349640"
  },
  {
    "text": "backtrack to where um where you found like a bend in the",
    "start": "1349640",
    "end": "1354740"
  },
  {
    "text": "road we can quickly make this into another maybe even more useful algorithm by",
    "start": "1354740",
    "end": "1362780"
  },
  {
    "text": "changing the stack into a queue so in this case first in",
    "start": "1362780",
    "end": "1370460"
  },
  {
    "text": "first out um I want to also mentioned that we're keeping a list of visited nodes here",
    "start": "1370460",
    "end": "1378500"
  },
  {
    "text": "um ESO we don't end up doing a loop but the breadth first search has a very",
    "start": "1378500",
    "end": "1385580"
  },
  {
    "text": "very nice Advantage so what it does is instead of going deep child child child",
    "start": "1385580",
    "end": "1391360"
  },
  {
    "text": "it says I want to see all your children all its children all",
    "start": "1391360",
    "end": "1397640"
  },
  {
    "text": "its children and all their children and the neat effect of this is that it",
    "start": "1397640",
    "end": "1404000"
  },
  {
    "text": "will quickly find the shortest way the shortest path to your destination so",
    "start": "1404000",
    "end": "1410120"
  },
  {
    "text": "it will always find the shortest path to your destination and it's a very very easy to",
    "start": "1410120",
    "end": "1415580"
  },
  {
    "text": "conceptualize algorithm I think so if you ever have a situation where you",
    "start": "1415580",
    "end": "1422240"
  },
  {
    "text": "need to find like the shortest number of steps or you know the shortest path or whatever breath first search is your",
    "start": "1422240",
    "end": "1428900"
  },
  {
    "text": "friend especially if you don't have weights um",
    "start": "1428900",
    "end": "1434360"
  },
  {
    "text": "now you might have a variation of this if you're trying to solve a maze like like this one where you have a key that",
    "start": "1434360",
    "end": "1441860"
  },
  {
    "text": "you need to get to before or like so you can unlock the door in this case you",
    "start": "1441860",
    "end": "1446960"
  },
  {
    "text": "just think about nodes not only as coordinates but s coordinates plus whether or not it",
    "start": "1446960",
    "end": "1453679"
  },
  {
    "text": "has the key or not so every every square is actually two nodes in this graph",
    "start": "1453679",
    "end": "1462279"
  },
  {
    "text": "and then finally if we have um costs or if we have weights we'll",
    "start": "1462380",
    "end": "1467960"
  },
  {
    "text": "need to use other types of algorithms I'm not going to go through these but they're also",
    "start": "1467960",
    "end": "1473120"
  },
  {
    "text": "like Wikipedia um a Wikipedia search away and and very",
    "start": "1473120",
    "end": "1479419"
  },
  {
    "text": "easy to implement jxtra and a star so Jigster is a greedy algorithm that",
    "start": "1479419",
    "end": "1485179"
  },
  {
    "text": "quickly finds the the fastest or the shortest path the least costly path from",
    "start": "1485179",
    "end": "1491480"
  },
  {
    "text": "one node to all other nodes um a star is an algorithm similar to it",
    "start": "1491480",
    "end": "1497659"
  },
  {
    "text": "but that has some kind of heuristics so in this case for for example for the roads that might know that to go from",
    "start": "1497659",
    "end": "1504860"
  },
  {
    "text": "Stockholm to Copenhagen it needs to go south so it'll favor the roads that go south",
    "start": "1504860",
    "end": "1511039"
  },
  {
    "text": "for example so you you add in your own um heuristics to figure that out so",
    "start": "1511039",
    "end": "1516559"
  },
  {
    "text": "that's the speed up or an optimization of jigstra and then if you have negative",
    "start": "1516559",
    "end": "1522080"
  },
  {
    "text": "um if you have negative weights then you need to use another algorithm like Parliament forward",
    "start": "1522080",
    "end": "1527539"
  },
  {
    "text": "but let's have a look at um again this breath first or depth first",
    "start": "1527539",
    "end": "1533779"
  },
  {
    "text": "search and how we can use this for other type of problems than the fastest path or a shortest path",
    "start": "1533779",
    "end": "1539419"
  },
  {
    "text": "so in this case we want to know um how many sets do we have or maybe the",
    "start": "1539419",
    "end": "1546080"
  },
  {
    "text": "the size of the sets and the way we do this is we start off at one node",
    "start": "1546080",
    "end": "1552140"
  },
  {
    "text": "and we go through and do a full depth first search to like until our queue is",
    "start": "1552140",
    "end": "1559700"
  },
  {
    "text": "empty and we put them in a visited set so this now becomes one set next time we",
    "start": "1559700",
    "end": "1567980"
  },
  {
    "text": "look at another node this is already in the visited set so we ignore it this is already in the visit it says we",
    "start": "1567980",
    "end": "1574820"
  },
  {
    "text": "ignore it this is already in the visit set we ignore it we get to a new one now",
    "start": "1574820",
    "end": "1580039"
  },
  {
    "text": "we have two and this is like a very simple way to use DFS to figure out how many groups we",
    "start": "1580039",
    "end": "1587419"
  },
  {
    "text": "have so this is something we can use for example if we have a set of cities and we want to know should we build a road",
    "start": "1587419",
    "end": "1594440"
  },
  {
    "text": "between them or should we um you know have an airline route between them to be able to connect and",
    "start": "1594440",
    "end": "1600440"
  },
  {
    "text": "get to all the different cities here",
    "start": "1600440",
    "end": "1605620"
  },
  {
    "text": "um another interesting base algorithm for graphs is called Union find so Union",
    "start": "1606080",
    "end": "1613520"
  },
  {
    "text": "find Works in in the way that we start off and with all the nodes as separate so",
    "start": "1613520",
    "end": "1620840"
  },
  {
    "text": "even if they have connections we start them out as separate and with themselves as roots",
    "start": "1620840",
    "end": "1626779"
  },
  {
    "text": "and then we take one and we'll look at its neighbors and then we say we try to",
    "start": "1626779",
    "end": "1632900"
  },
  {
    "text": "connect them so in this case we say that these zero oh sorry one and two now gets the",
    "start": "1632900",
    "end": "1640400"
  },
  {
    "text": "same root as zero and then we go through it",
    "start": "1640400",
    "end": "1645679"
  },
  {
    "text": "um its neighbors and we do the same and if this neighbor already turns out to be a part of another set We join the set so",
    "start": "1645679",
    "end": "1653720"
  },
  {
    "text": "we change like the root of all the items in the set this is um a good algorithm",
    "start": "1653720",
    "end": "1660559"
  },
  {
    "text": "for sort of figuring out both how many sets do you have and you can go through for",
    "start": "1660559",
    "end": "1666919"
  },
  {
    "text": "example like this table now at the bottom and see you know quickly see how",
    "start": "1666919",
    "end": "1672020"
  },
  {
    "text": "many of the items have the root zero and how many items have the root four because that will tell you how big the",
    "start": "1672020",
    "end": "1677419"
  },
  {
    "text": "sets are so there are a lot of different questions that will come up that will basically come down to count the number",
    "start": "1677419",
    "end": "1684980"
  },
  {
    "text": "of sets or counter sizes of the sets um and finally one final graph algorithm",
    "start": "1684980",
    "end": "1692779"
  },
  {
    "text": "is a topological sort so a topological sort works like this let's say you have",
    "start": "1692779",
    "end": "1699799"
  },
  {
    "text": "a set of steps that you have to do in in a recipe or a set of classes that you",
    "start": "1699799",
    "end": "1705140"
  },
  {
    "text": "have to do where this one is prerequisite for this one and we want to know in which order do",
    "start": "1705140",
    "end": "1712220"
  },
  {
    "text": "you have to take all these or in which order do we have to take perform all these tasks in order for this to work",
    "start": "1712220",
    "end": "1718159"
  },
  {
    "text": "out so that's sort of like the question we ask and this one works like this we take any",
    "start": "1718159",
    "end": "1726380"
  },
  {
    "text": "of the notes that don't have any neighbors and we write them out",
    "start": "1726380",
    "end": "1731659"
  },
  {
    "text": "then we kill the links to them and find out what nodes do now not have any neighbors",
    "start": "1731659",
    "end": "1737900"
  },
  {
    "text": "will write them out kill the links and then we take this",
    "start": "1737900",
    "end": "1743299"
  },
  {
    "text": "last one that didn't have any neighbors and we'll write this out and this now becomes a reverse",
    "start": "1743299",
    "end": "1749799"
  },
  {
    "text": "topological sort so you can see that all of these algorithms are fairly intuitive",
    "start": "1749799",
    "end": "1757340"
  },
  {
    "text": "and simple once you start thinking about it like in fact once you start doing",
    "start": "1757340",
    "end": "1762980"
  },
  {
    "text": "them a few times it's they become a lot less um wow the guy came up with topological",
    "start": "1762980",
    "end": "1771080"
  },
  {
    "text": "so now it makes total sense how you do this once you start doing this",
    "start": "1771080",
    "end": "1776960"
  },
  {
    "text": "um okay so that was all about graphs now we're going to go into another topic",
    "start": "1776960",
    "end": "1782299"
  },
  {
    "start": "1780000",
    "end": "2185000"
  },
  {
    "text": "that's one of the favorites of like these Twitter people like well I haven't",
    "start": "1782299",
    "end": "1787340"
  },
  {
    "text": "used dynamic programming in any of my coding well guess what you have because",
    "start": "1787340",
    "end": "1793279"
  },
  {
    "text": "dynamic programming is just another way of saying caching it is a fancy way of saying caching that",
    "start": "1793279",
    "end": "1799520"
  },
  {
    "text": "makes you feel like a little bit better than other people but nonetheless",
    "start": "1799520",
    "end": "1805940"
  },
  {
    "text": "um the way dynamic programming works is like this we have everyone knows what",
    "start": "1805940",
    "end": "1811580"
  },
  {
    "text": "Fibonacci is yeah okay great so at some point you've made so",
    "start": "1811580",
    "end": "1817220"
  },
  {
    "text": "you've done some recursion um so the way Fibonacci works and then is",
    "start": "1817220",
    "end": "1823340"
  },
  {
    "text": "obviously you take the previous number and the previous previous number sum",
    "start": "1823340",
    "end": "1828500"
  },
  {
    "text": "them up this becomes your number your Fibonacci number um and it looks like this and it's the",
    "start": "1828500",
    "end": "1834260"
  },
  {
    "text": "first recursion question you'll probably ever get now a little problem with Fibonacci is",
    "start": "1834260",
    "end": "1840679"
  },
  {
    "text": "that if you want to calculate Fibonacci F5 and then you have to calculate fibonaccio 4 and fibrinage of three",
    "start": "1840679",
    "end": "1847940"
  },
  {
    "text": "and then it goes like this and you'll see that there is a lot of repeated calculations in here",
    "start": "1847940",
    "end": "1854840"
  },
  {
    "text": "in fact if you go to fibonaccio 50 you'll have so many repeated calculations that you can end up",
    "start": "1854840",
    "end": "1860240"
  },
  {
    "text": "spending a full day doing this before you're calculating the number",
    "start": "1860240",
    "end": "1866299"
  },
  {
    "text": "so obviously we don't like repetition um and the way we can get around this is",
    "start": "1866299",
    "end": "1872480"
  },
  {
    "text": "by caching these values and this is what dynamic programming is so we call this memoization because we",
    "start": "1872480",
    "end": "1880220"
  },
  {
    "text": "need another fancy word for caching um so this is the original and this is",
    "start": "1880220",
    "end": "1886580"
  },
  {
    "text": "the memoized version you know so the only thing we do is we",
    "start": "1886580",
    "end": "1891799"
  },
  {
    "text": "say hey have I seen this end before then just take it out of the cache if not",
    "start": "1891799",
    "end": "1897740"
  },
  {
    "text": "and use it now if we're doing this in Python",
    "start": "1897740",
    "end": "1903260"
  },
  {
    "text": "we can even just do this like you put on a cache directive",
    "start": "1903260",
    "end": "1909140"
  },
  {
    "text": "obviously there is a memory trade-off here like it's going to store all the",
    "start": "1909140",
    "end": "1915140"
  },
  {
    "text": "results in in memory but this is a very useful way to even like in any apis you",
    "start": "1915140",
    "end": "1920779"
  },
  {
    "text": "might have or anything like that do you save yourself a lot of computing if you're doing a lot of repeated tasks",
    "start": "1920779",
    "end": "1928520"
  },
  {
    "text": "um and um there's another",
    "start": "1928520",
    "end": "1933620"
  },
  {
    "text": "another fancy word for this for doing this slightly differently it's called tabulation and in tabulation instead of",
    "start": "1933620",
    "end": "1941360"
  },
  {
    "text": "doing it sort of like the Cashway like putting the cash directive and",
    "start": "1941360",
    "end": "1946820"
  },
  {
    "text": "everything what we do in status we're doing the iterative way without recursion but we start off with you know",
    "start": "1946820",
    "end": "1954080"
  },
  {
    "text": "creating a list of the things we know and then adding on to the list like the next number and the next number and the",
    "start": "1954080",
    "end": "1960380"
  },
  {
    "text": "next number we can also optimize this a little bit because we're now we're only using like",
    "start": "1960380",
    "end": "1965480"
  },
  {
    "text": "the last and next to last number but you know the idea is anyways that you start",
    "start": "1965480",
    "end": "1970760"
  },
  {
    "text": "building up um a set of a set of results",
    "start": "1970760",
    "end": "1976640"
  },
  {
    "text": "so let's use this in in a little bit more interesting problem",
    "start": "1976640",
    "end": "1982520"
  },
  {
    "text": "um or we have a House robber so this is again a medium lead code question",
    "start": "1982520",
    "end": "1988580"
  },
  {
    "text": "um and the way this works is the House robber robs houses and he gets loot so",
    "start": "1988580",
    "end": "1994880"
  },
  {
    "text": "the first house here has two Loot and then the second one has seven and so on and he wants to maximum maximize the the",
    "start": "1994880",
    "end": "2003760"
  },
  {
    "text": "amount of stuff that he gets um he has a caveat that he cannot Rob",
    "start": "2003760",
    "end": "2010240"
  },
  {
    "text": "two adjacent houses because then they will call the police or something",
    "start": "2010240",
    "end": "2016659"
  },
  {
    "text": "normal stuff like there's a lot of this stuff going on in lead code questions they have to say but I think that's also",
    "start": "2016659",
    "end": "2022840"
  },
  {
    "text": "what makes them a little bit fun so one way we could solve this is Brute",
    "start": "2022840",
    "end": "2028120"
  },
  {
    "text": "Force we could say what are all the combinations and I didn't have time to write out all the combinations for five",
    "start": "2028120",
    "end": "2034600"
  },
  {
    "text": "so I wrote out all the combinations for four but I hope you kind of like stay with me",
    "start": "2034600",
    "end": "2039760"
  },
  {
    "text": "and understand so now one is I Rob the house serious I don't",
    "start": "2039760",
    "end": "2045399"
  },
  {
    "text": "drop the house so these are all the combinations that we could take we can exclude the ones that have adjacent",
    "start": "2045399",
    "end": "2051760"
  },
  {
    "text": "houses that's fine and we can now sum up all the um all the loot from all the houses",
    "start": "2051760",
    "end": "2058480"
  },
  {
    "text": "that we we picked great um this will take us",
    "start": "2058480",
    "end": "2064839"
  },
  {
    "text": "for a hundred houses 1.27 by 10 to the power of 32 operations",
    "start": "2064839",
    "end": "2073000"
  },
  {
    "text": "that's a little fresh I think so maybe we can do better than that because that's that's not really viable I don't",
    "start": "2073000",
    "end": "2080020"
  },
  {
    "text": "think so let's think about this a little bit um when we come to house number one we",
    "start": "2080020",
    "end": "2086679"
  },
  {
    "text": "have two choices we can either rob it and then we can't Rob until house two",
    "start": "2086679",
    "end": "2095020"
  },
  {
    "text": "or we can not rob it and then we can robot house one right ruin it so that means that",
    "start": "2095020",
    "end": "2104560"
  },
  {
    "text": "if we think about it our Max loot means take the loot at zero",
    "start": "2104560",
    "end": "2110740"
  },
  {
    "text": "plus whatever Max loot from two on or take the max loot at one",
    "start": "2110740",
    "end": "2118119"
  },
  {
    "text": "and this will be your maximum amount and now if we look at this",
    "start": "2118119",
    "end": "2124060"
  },
  {
    "text": "doesn't this look a little bit like Fibonacci in fact very much like Fibonacci I would",
    "start": "2124060",
    "end": "2130180"
  },
  {
    "text": "say so um we can simply do some dynamic",
    "start": "2130180",
    "end": "2136119"
  },
  {
    "text": "programming on this and in fact if you can turn anything into a recursive function",
    "start": "2136119",
    "end": "2141880"
  },
  {
    "text": "that where where the input value like in this case or the input values are",
    "start": "2141880",
    "end": "2147220"
  },
  {
    "text": "hashable you can use dynamic programming to solve this",
    "start": "2147220",
    "end": "2152920"
  },
  {
    "text": "and remember when we had like the 127 to the power like times 10 to the power 32.",
    "start": "2152920",
    "end": "2159700"
  },
  {
    "text": "this is a hundred for a hundred houses instead now that's a pretty nice and sweet",
    "start": "2159700",
    "end": "2166960"
  },
  {
    "text": "Improvement so even in your apis and everything I think that that dynamic",
    "start": "2166960",
    "end": "2173619"
  },
  {
    "text": "programming and caching of this in this way has um has a place",
    "start": "2173619",
    "end": "2180700"
  },
  {
    "text": "now the last uh type of algorithms I want to go through is a subset of",
    "start": "2180700",
    "end": "2186040"
  },
  {
    "start": "2185000",
    "end": "2328000"
  },
  {
    "text": "dynamic programming that are called sliding windows and these are also super common in",
    "start": "2186040",
    "end": "2193480"
  },
  {
    "text": "um especially like in competitive programming and and Lead coding and things but also kind of in real life",
    "start": "2193480",
    "end": "2199420"
  },
  {
    "text": "so we have an array and we want to find out the maximum",
    "start": "2199420",
    "end": "2205619"
  },
  {
    "text": "sub array sum like if we take sub arrays of size K let's say k is 4",
    "start": "2205619",
    "end": "2212740"
  },
  {
    "text": "um which for a number sub array has the maximum",
    "start": "2212740",
    "end": "2218320"
  },
  {
    "text": "sum so we can do this in a Brute Force way like this we take",
    "start": "2218320",
    "end": "2224560"
  },
  {
    "text": "a computer sum um certain two and we move one step forward compute the",
    "start": "2224560",
    "end": "2231040"
  },
  {
    "text": "sum one step forward compute the sum and so on and so on right easy we know",
    "start": "2231040",
    "end": "2239500"
  },
  {
    "text": "how to do this now can someone figure out where we have an overlapping sub problem here",
    "start": "2239500",
    "end": "2247660"
  },
  {
    "text": "like where could we cache this say what",
    "start": "2247660",
    "end": "2255180"
  },
  {
    "text": "yeah exactly so you see here where there is a lot of yellow that indicates that we're",
    "start": "2255460",
    "end": "2262660"
  },
  {
    "text": "doing that a lot of times like we're calculating we're summing that up a lot of times like you're saying",
    "start": "2262660",
    "end": "2268420"
  },
  {
    "text": "so instead of n times K we can actually",
    "start": "2268420",
    "end": "2273520"
  },
  {
    "text": "speed this up a lot and especially if we have a large large size of the sub array",
    "start": "2273520",
    "end": "2280300"
  },
  {
    "text": "so what we do is like this we get the sum of the first one and then to get the next one",
    "start": "2280300",
    "end": "2286300"
  },
  {
    "text": "we don't sum all the elements up but we take the last sum and remove in this",
    "start": "2286300",
    "end": "2292000"
  },
  {
    "text": "case the one we left off and add on the one we picked up right",
    "start": "2292000",
    "end": "2298480"
  },
  {
    "text": "so we go through this like this and suddenly we've saved ourselves a lot of",
    "start": "2298480",
    "end": "2305020"
  },
  {
    "text": "time because now we have an algorithm that's only going to be as many",
    "start": "2305020",
    "end": "2310119"
  },
  {
    "text": "operations as the size of the of the array",
    "start": "2310119",
    "end": "2316180"
  },
  {
    "text": "super super common and this is like fairly easy to understand because we have a fixed size array that we're going",
    "start": "2316180",
    "end": "2324460"
  },
  {
    "text": "through but this is a very useful technique for many many problems so let's look at a problem where we can use",
    "start": "2324460",
    "end": "2330520"
  },
  {
    "start": "2328000",
    "end": "2683000"
  },
  {
    "text": "this and this is a grumpy bookstore owner a classic to um to the lead code",
    "start": "2330520",
    "end": "2336160"
  },
  {
    "text": "problems it's like a little bit of a story um this guy has some people coming into his",
    "start": "2336160",
    "end": "2344079"
  },
  {
    "text": "bookstore every minute there's a different number of people sometimes he's happy sometimes he's sad",
    "start": "2344079",
    "end": "2351640"
  },
  {
    "text": "when he's happy then the patrons are happy and we want to maximize sort of",
    "start": "2351640",
    "end": "2359200"
  },
  {
    "text": "like the amount of happy people we have so we can say these people will always be happy they're",
    "start": "2359200",
    "end": "2365680"
  },
  {
    "text": "um they're happy because he's happy now he has a trick that will make him happy",
    "start": "2365680",
    "end": "2370780"
  },
  {
    "text": "for a certain number of minutes we're not judging we all kind of like can",
    "start": "2370780",
    "end": "2376119"
  },
  {
    "text": "figure out what what it is but we're not judging um so let's say they can make him happy for",
    "start": "2376119",
    "end": "2382240"
  },
  {
    "text": "three minutes uh and he needs to optimize when he uses",
    "start": "2382240",
    "end": "2387339"
  },
  {
    "text": "this happiness to maximize the the number of happy patrons he's going",
    "start": "2387339",
    "end": "2392500"
  },
  {
    "text": "to have now sorry I'm I'm doing like an Asher batch job right now so I'm",
    "start": "2392500",
    "end": "2398320"
  },
  {
    "text": "thinking a lot about Azure batch but this would kind of equate to we have a rebate for an hour when can we put in",
    "start": "2398320",
    "end": "2405640"
  },
  {
    "text": "that rebate you know to to make sure we're we're cramming the most out of our",
    "start": "2405640",
    "end": "2411520"
  },
  {
    "text": "a rebate or something but anyway so what do we do here um",
    "start": "2411520",
    "end": "2416980"
  },
  {
    "text": "well we can take away the ones that we're always happy",
    "start": "2416980",
    "end": "2422920"
  },
  {
    "text": "and then we can make this into a maximum sum problem right because we have this now we can just",
    "start": "2422920",
    "end": "2430900"
  },
  {
    "text": "figure out like the same technique that we used last time to just figure out which sub",
    "start": "2430900",
    "end": "2436900"
  },
  {
    "text": "array or which um which window will make us happiest",
    "start": "2436900",
    "end": "2442960"
  },
  {
    "text": "using the exact same technique means different storyline cool so that's with a fixed window",
    "start": "2442960",
    "end": "2451119"
  },
  {
    "text": "and we're going to take two more one um",
    "start": "2451119",
    "end": "2456280"
  },
  {
    "text": "with um with a window that's um growing and shrinking so in this case",
    "start": "2456280",
    "end": "2462040"
  },
  {
    "text": "we have Amy she likes fruit she puts fruits into baskets she goes around and",
    "start": "2462040",
    "end": "2467380"
  },
  {
    "text": "nurtured like in she can pick and like she picks from every single tree but she has this limitation where she can only",
    "start": "2467380",
    "end": "2473980"
  },
  {
    "text": "have two types of fruits in her basket at the same time I don't know she's picky like that",
    "start": "2473980",
    "end": "2481599"
  },
  {
    "text": "so the question is how many fruits can she pick maximum",
    "start": "2481599",
    "end": "2486700"
  },
  {
    "text": "so the way you would go through this is in a similar way where we go through we start off",
    "start": "2486700",
    "end": "2493180"
  },
  {
    "text": "um with one apple we expand the window until we reach a",
    "start": "2493180",
    "end": "2499540"
  },
  {
    "text": "point where our premise is not valid anymore so in this case we have three fruits in",
    "start": "2499540",
    "end": "2506800"
  },
  {
    "text": "our basket so this is not a valid window instead we go through and Shrink until our window is valid",
    "start": "2506800",
    "end": "2513460"
  },
  {
    "text": "and we expand it until it's invalid and Shrink until it's valid again and we",
    "start": "2513460",
    "end": "2519820"
  },
  {
    "text": "just calculate like the maximum and this is again an O of n of something",
    "start": "2519820",
    "end": "2525339"
  },
  {
    "text": "that can be like a very very very tricky problem otherwise to to figure out where we would have to go through you know",
    "start": "2525339",
    "end": "2532180"
  },
  {
    "text": "like all the combinations of pick this pick that um finally",
    "start": "2532180",
    "end": "2539200"
  },
  {
    "text": "the last one I want to talk about is like a two-pointer algorithm which is also a sliding window",
    "start": "2539200",
    "end": "2546160"
  },
  {
    "text": "thing so in this case we have these walls and we have water and our goal is to",
    "start": "2546160",
    "end": "2554560"
  },
  {
    "text": "maximize the amount of water that we can we can have in this container",
    "start": "2554560",
    "end": "2560560"
  },
  {
    "text": "and the walls um you see the First wall is like one meter high",
    "start": "2560560",
    "end": "2565599"
  },
  {
    "text": "and the last wall is seven meters high but we can only have water until like",
    "start": "2565599",
    "end": "2571300"
  },
  {
    "text": "the lowest wall That's otherwise it will fill lower um so question is which walls should we",
    "start": "2571300",
    "end": "2579640"
  },
  {
    "text": "use to maximize the uh the amount of water we can use now we can start off like this we know",
    "start": "2579640",
    "end": "2587619"
  },
  {
    "text": "that the the widest we can make it is this and this turns out to be you know",
    "start": "2587619",
    "end": "2593740"
  },
  {
    "text": "give us like one by eight um square meters or Square cubic meters",
    "start": "2593740",
    "end": "2598900"
  },
  {
    "text": "maybe of water and depending on how deep I guess um the only way we can",
    "start": "2598900",
    "end": "2605680"
  },
  {
    "text": "make this any better is if we make it higher right yeah and the only way we can make it any",
    "start": "2605680",
    "end": "2612460"
  },
  {
    "text": "higher is if we move in you know like if we",
    "start": "2612460",
    "end": "2618420"
  },
  {
    "text": "um instead of this we move in to the next one that's actually making it",
    "start": "2618460",
    "end": "2624160"
  },
  {
    "text": "higher so now we have seven by seven which is 49 and the only way we could possibly make this better",
    "start": "2624160",
    "end": "2631660"
  },
  {
    "text": "is by moving the other one in now it turned out it didn't make it better but",
    "start": "2631660",
    "end": "2637240"
  },
  {
    "text": "that was the only way we could possibly have made it better right and then in this last set the only way",
    "start": "2637240",
    "end": "2643900"
  },
  {
    "text": "we can make it better is again taking the lowest one and and finding like a better option for",
    "start": "2643900",
    "end": "2651099"
  },
  {
    "text": "it um and this is like a very simple way now to wait again our event to figure",
    "start": "2651099",
    "end": "2658599"
  },
  {
    "text": "out what the the water is so um some of these might think might come to",
    "start": "2658599",
    "end": "2665560"
  },
  {
    "text": "you in my I would come in and say well how did you figure that out well yeah it's not like totally obvious that you",
    "start": "2665560",
    "end": "2672220"
  },
  {
    "text": "should do this but if you've had if you've seen enough problems and you you've seen enough sort of like",
    "start": "2672220",
    "end": "2678220"
  },
  {
    "text": "different kind of variations you can then use those and put them together so",
    "start": "2678220",
    "end": "2684640"
  },
  {
    "start": "2683000",
    "end": "2951000"
  },
  {
    "text": "um before we leave I want to kind of like quickly talk about how I think about algorithms and how I think about",
    "start": "2684640",
    "end": "2691420"
  },
  {
    "text": "coming upward with these weird Solutions so",
    "start": "2691420",
    "end": "2696940"
  },
  {
    "text": "the first thing that that I do is I ask a lot of questions I ask a lot of",
    "start": "2696940",
    "end": "2702700"
  },
  {
    "text": "questions about the problem and obviously when when we have a lead code problem or like a competition problem",
    "start": "2702700",
    "end": "2709380"
  },
  {
    "text": "the only information that's there is is whatever information is written in the text but there is usually a lot of",
    "start": "2709380",
    "end": "2716800"
  },
  {
    "text": "information there a lot of information about like how many piles and and you",
    "start": "2716800",
    "end": "2721960"
  },
  {
    "text": "know what what the different things are so and and also ask yourself questions",
    "start": "2721960",
    "end": "2727359"
  },
  {
    "text": "like do I need to actually simulate and know all the paths in the graph",
    "start": "2727359",
    "end": "2733839"
  },
  {
    "text": "or do I just need to know sort of like the number of paths because those two are two completely different questions",
    "start": "2733839",
    "end": "2740460"
  },
  {
    "text": "one might be one where you find a pattern and you can answer it and one might be where you have to go through",
    "start": "2740460",
    "end": "2746440"
  },
  {
    "text": "and do a lot of work they're completely different and then",
    "start": "2746440",
    "end": "2751480"
  },
  {
    "text": "the limits so the limits for example if you see something like 10 million or",
    "start": "2751480",
    "end": "2757180"
  },
  {
    "text": "like 10 billion um um bananas you know it's going to be a",
    "start": "2757180",
    "end": "2763839"
  },
  {
    "text": "binary search problem there is no way you can create an algorithm that will like effectively go through 10 billion",
    "start": "2763839",
    "end": "2772119"
  },
  {
    "text": "bananas um and then I like to grock the problem so",
    "start": "2772119",
    "end": "2778540"
  },
  {
    "text": "I can find another word for G I'm sorry um but what I mean by this is like I'm",
    "start": "2778540",
    "end": "2785079"
  },
  {
    "text": "trying to be the algorithm I I draw a lot on paper like I draw all the",
    "start": "2785079",
    "end": "2790839"
  },
  {
    "text": "examples I can in all the different ways I can I try to sort of like mentally think how do I in the small cases",
    "start": "2790839",
    "end": "2798359"
  },
  {
    "text": "actually solve the problem if I go through and like what do I do",
    "start": "2798359",
    "end": "2803560"
  },
  {
    "text": "when I when I think like do I automatically pick the highest number for example then I need to figure out",
    "start": "2803560",
    "end": "2808660"
  },
  {
    "text": "how to pick the highest number these kind of things and then usually when you draw them out",
    "start": "2808660",
    "end": "2814420"
  },
  {
    "text": "and when you kind of like gone through a lot of examples you get like this oh my",
    "start": "2814420",
    "end": "2820000"
  },
  {
    "text": "God yeah I understand like there is like this key moment in time when you realize",
    "start": "2820000",
    "end": "2825040"
  },
  {
    "text": "that yeah the only way to make this water any higher is by you know",
    "start": "2825040",
    "end": "2830680"
  },
  {
    "text": "increasing the lowest wall then I try to reduce",
    "start": "2830680",
    "end": "2837700"
  },
  {
    "text": "um the problem into its core pieces which might be okay so first I need to",
    "start": "2837700",
    "end": "2842920"
  },
  {
    "text": "sort the array for this to work or and then I need to find out like the highest number in 92",
    "start": "2842920",
    "end": "2849760"
  },
  {
    "text": "do X Y and Z and only then do I start to implement I found like in the beginning",
    "start": "2849760",
    "end": "2856720"
  },
  {
    "text": "when I was doing especially when I was doing competitions I would go through and I",
    "start": "2856720",
    "end": "2863079"
  },
  {
    "text": "would immediately sit down and code and it would take me so long because I",
    "start": "2863079",
    "end": "2868599"
  },
  {
    "text": "didn't have like I wasn't actually thinking through the problem before I I started and and the same thing",
    "start": "2868599",
    "end": "2875140"
  },
  {
    "text": "actually goes for when I'm at work like oftentimes I find that like if I code",
    "start": "2875140",
    "end": "2880180"
  },
  {
    "text": "fast without you know because I think oh this is an easy problem I'll",
    "start": "2880180",
    "end": "2885400"
  },
  {
    "text": "at least started like I'll end up spending a lot of time on the back end because I didn't design it first",
    "start": "2885400",
    "end": "2892780"
  },
  {
    "text": "and and then adding tests so for example like for especially for these competitions they usually have a bunch",
    "start": "2892780",
    "end": "2899859"
  },
  {
    "text": "of test cases and it's very useful to just add in you know",
    "start": "2899859",
    "end": "2905859"
  },
  {
    "text": "um like a few tests so you can kind of like iterate over a given like a number",
    "start": "2905859",
    "end": "2911140"
  },
  {
    "text": "of solutions and see if it is still uh passing all those tests",
    "start": "2911140",
    "end": "2917079"
  },
  {
    "text": "and then you go around and be happy and then what I usually do is I go through a lot",
    "start": "2917079",
    "end": "2924220"
  },
  {
    "text": "of other people's Solutions afterwards to figure out how could I have done this",
    "start": "2924220",
    "end": "2929260"
  },
  {
    "text": "even better or what other options would I could I have um taken or or even tried to limit",
    "start": "2929260",
    "end": "2936220"
  },
  {
    "text": "myself a little bit more what if I didn't have a chance to sort the array what if I what if I can't do this",
    "start": "2936220",
    "end": "2945160"
  },
  {
    "text": "um so that's how I go about and kind of like coming up with an algorithm",
    "start": "2945160",
    "end": "2952619"
  },
  {
    "start": "2951000",
    "end": "3083000"
  },
  {
    "text": "um and just for sort of like what what can you",
    "start": "2952780",
    "end": "2958420"
  },
  {
    "text": "do from here um I've talked about lead code a lot lead code and there's a lot of sites",
    "start": "2958420",
    "end": "2964359"
  },
  {
    "text": "like this so there's like code Forge and a lot of these um different algorithm",
    "start": "2964359",
    "end": "2969520"
  },
  {
    "text": "sites that give you an algorithm a day to to work on or or like have these",
    "start": "2969520",
    "end": "2976000"
  },
  {
    "text": "um a lot of interesting problems with interesting like with uh where you can actually type in code and then get it",
    "start": "2976000",
    "end": "2983020"
  },
  {
    "text": "tested like so it runs through all their tests and everything and you can also go in here and",
    "start": "2983020",
    "end": "2989020"
  },
  {
    "text": "and do competitions and competitions on lead code for example they are on a",
    "start": "2989020",
    "end": "2994420"
  },
  {
    "text": "weekly basis they have competition in U.S time zone and then bi-weekly they have a European Time Zone competition",
    "start": "2994420",
    "end": "3001260"
  },
  {
    "text": "and no one else is going to know if you enter or if you end up last or or",
    "start": "3001260",
    "end": "3006359"
  },
  {
    "text": "whatever it's a one and a half hour of your time in your private home on your private you know like on your computer",
    "start": "3006359",
    "end": "3012680"
  },
  {
    "text": "who cares where you end up you know but for me it's like a fun way to see if I'm",
    "start": "3012680",
    "end": "3018720"
  },
  {
    "text": "improving or not and then um yeah this is Dylan's moment because I",
    "start": "3018720",
    "end": "3025680"
  },
  {
    "text": "think this side whether it's Christmas or not this is a fantastic site so this",
    "start": "3025680",
    "end": "3031619"
  },
  {
    "text": "is advent of code um and in December every year and this guy Eric puts up like two",
    "start": "3031619",
    "end": "3039780"
  },
  {
    "text": "challenges per day um with a lot of fun backstories of needs",
    "start": "3039780",
    "end": "3046560"
  },
  {
    "text": "to solve algorithm problems so if you don't want to do it the whole year then at least in December have some fun",
    "start": "3046560",
    "end": "3052859"
  },
  {
    "text": "and if you're more inclined to do math there is a project Euler for",
    "start": "3052859",
    "end": "3058740"
  },
  {
    "text": "for math questions um but yeah that was a lot of algorithms in one hour",
    "start": "3058740",
    "end": "3066359"
  },
  {
    "text": "so um we have about 10 minutes or so um before I have to give up the mic so",
    "start": "3066359",
    "end": "3073440"
  },
  {
    "text": "if you have any questions I'm here but thank you so much for coming",
    "start": "3073440",
    "end": "3080059"
  }
]