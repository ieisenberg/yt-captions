[
  {
    "text": "all right it is now 20 minutes past the hour and it is time to go for sql server hates you and i i'm",
    "start": "240",
    "end": "8480"
  },
  {
    "text": "so happy that you've chosen this specific session in competition with some seriously heavy",
    "start": "8480",
    "end": "14639"
  },
  {
    "text": "hitters and i'm equally happy that you're eager to find out just how evil sql server can be",
    "start": "14639",
    "end": "22800"
  },
  {
    "text": "so this story it started with a phone call and i was sitting in my office many",
    "start": "22800",
    "end": "30000"
  },
  {
    "text": "many years ago and the phone rang so why i recognized the number to to be",
    "start": "30000",
    "end": "35520"
  },
  {
    "text": "a developer friend of mine and i answered with the usual hello",
    "start": "35520",
    "end": "40640"
  },
  {
    "text": "and i was met with complete silence you know the kind of silence that makes",
    "start": "40640",
    "end": "46320"
  },
  {
    "text": "you question if the phone is actually working and just as i was about to say something again",
    "start": "46320",
    "end": "54399"
  },
  {
    "text": "my friend said sql server hates me i thought about it for a second and then",
    "start": "54399",
    "end": "61120"
  },
  {
    "text": "realized that no no sql server does not hate you specifically it hates everyone in equal measures",
    "start": "61120",
    "end": "69040"
  },
  {
    "text": "and that was kind of the inspiration to create this session because as with any profession it's it's",
    "start": "69040",
    "end": "75920"
  },
  {
    "text": "so easy to get stuck within our own boxes so we're going to cover among other things",
    "start": "75920",
    "end": "82799"
  },
  {
    "text": "some weird default settings in in sql server and some unintended consequences with",
    "start": "82799",
    "end": "89680"
  },
  {
    "text": "sql and how isolation levels can and will bite you in the posterior because",
    "start": "89680",
    "end": "98479"
  },
  {
    "text": "most of the time we think that a developer doesn't really need to think about how the",
    "start": "98479",
    "end": "104320"
  },
  {
    "text": "database does stuff as long as it compiles right one of the classic opinions from from",
    "start": "104320",
    "end": "109920"
  },
  {
    "text": "developers well it compiles it must run it's it's good stuff wrong knowing a bit more about how the",
    "start": "109920",
    "end": "116640"
  },
  {
    "text": "database actually works and and how it it it",
    "start": "116640",
    "end": "121920"
  },
  {
    "text": "accepts and handles queries that is what's going to bring you from a mere",
    "start": "121920",
    "end": "127520"
  },
  {
    "text": "programmer to some kind of a developer dem i got ish and in order to move skywards you need",
    "start": "127520",
    "end": "134000"
  },
  {
    "text": "to dig deeper you need to get a better grasp of how the engine behaves",
    "start": "134000",
    "end": "139680"
  },
  {
    "text": "and you're gonna kind of appreciate why some techniques come with a pretty hefty",
    "start": "139680",
    "end": "145200"
  },
  {
    "text": "price tag this hour is but a taste of all the weird stuff out there",
    "start": "145200",
    "end": "151760"
  },
  {
    "text": "you need to know more you want to know more and you will know more in an hour",
    "start": "151760",
    "end": "158160"
  },
  {
    "text": "everything has consequences especially with the database",
    "start": "158160",
    "end": "164720"
  },
  {
    "text": "my name is alexander i am from leadership in sweden i have 23 years in it",
    "start": "164800",
    "end": "172480"
  },
  {
    "text": "pretty much all of it spent with data databases and infrastructure in some way shape or",
    "start": "172480",
    "end": "178239"
  },
  {
    "text": "form i started working as a developer i did a year and a half as a developer i",
    "start": "178239",
    "end": "185120"
  },
  {
    "text": "am no longer a developer and i think the world is in agreement that it is a good thing",
    "start": "185120",
    "end": "190480"
  },
  {
    "text": "that i am no longer a developer yeah these days i worked for a theater",
    "start": "190480",
    "end": "196879"
  },
  {
    "text": "in sweden and i have the best title ever principal solutions architect because nobody knows what i do but it's",
    "start": "196879",
    "end": "203920"
  },
  {
    "text": "easy to explain because i make data matter because only data that matters can can actually change anything",
    "start": "203920",
    "end": "211040"
  },
  {
    "text": "i do this by going all over the world i used to do this by going all over the world to speak at conferences um teach courses",
    "start": "211040",
    "end": "218480"
  },
  {
    "text": "and do consulting then the world ended so i have been stuck inside of my study for the last i don't",
    "start": "218480",
    "end": "225680"
  },
  {
    "text": "know eight or ten weeks i know exactly what my study looks like",
    "start": "225680",
    "end": "231840"
  },
  {
    "text": "i am one of six data platform mvps in sweden i co-host a podcast called need even tech and yep",
    "start": "232159",
    "end": "237920"
  },
  {
    "text": "that is the dome logo for you that are slightly older",
    "start": "237920",
    "end": "243840"
  },
  {
    "text": "but back to the database stuff first of all let's talk about memory sql",
    "start": "243840",
    "end": "250959"
  },
  {
    "text": "server has the same relation to memory as my cats do to food as in give me all",
    "start": "250959",
    "end": "256880"
  },
  {
    "text": "food now that has some consequences",
    "start": "256880",
    "end": "261919"
  },
  {
    "text": "i'm gonna give you a number anybody ever seen this well what if i tell you",
    "start": "261919",
    "end": "268240"
  },
  {
    "text": "that this is in megabytes yeah so this is the default amount of memory",
    "start": "268240",
    "end": "273440"
  },
  {
    "text": "that sql server is allowed to consume now i don't know about use or your",
    "start": "273440",
    "end": "279199"
  },
  {
    "text": "systems but very few of my clients has this amount of ram",
    "start": "279199",
    "end": "285600"
  },
  {
    "text": "so this is indeed a bit of an issue because it turns out that there are going to be",
    "start": "285600",
    "end": "291040"
  },
  {
    "text": "more than one thing on on a server these days i mean we most often talk about the sql",
    "start": "291040",
    "end": "298160"
  },
  {
    "text": "server but we also have stuff like the sql server analysis services or sql server",
    "start": "298160",
    "end": "303919"
  },
  {
    "text": "integration services or sql server reporting services or why don't we throw in some other",
    "start": "303919",
    "end": "308960"
  },
  {
    "text": "software on the server as well all of this software requires memory",
    "start": "308960",
    "end": "314240"
  },
  {
    "text": "and we haven't even talked about the fact that the operating system requires memory as well by the way do",
    "start": "314240",
    "end": "321280"
  },
  {
    "text": "you know what a server with all the components of sql server in install this called yeah",
    "start": "321280",
    "end": "328560"
  },
  {
    "text": "it's called the clown car because it is a bad bad idea the only reason",
    "start": "328560",
    "end": "337280"
  },
  {
    "text": "why you would ever want to put everything on the same box is if you're strapped for cash when it comes to licensing",
    "start": "337280",
    "end": "344720"
  },
  {
    "text": "otherwise it's it's it's a horrible idea",
    "start": "344720",
    "end": "348880"
  },
  {
    "text": "so it turns out that the different editions of sql server have different limitations unless you're",
    "start": "350560",
    "end": "357440"
  },
  {
    "text": "running the expensive edition or as it's colloquially known the enterprise edition",
    "start": "357440",
    "end": "362800"
  },
  {
    "text": "where you have no limitations at all back where i come from most of my",
    "start": "362800",
    "end": "367840"
  },
  {
    "text": "clients unfortunately run sql service standard edition and that means that i have to",
    "start": "367840",
    "end": "374080"
  },
  {
    "text": "work with or i should say work around the limitations of that product the main one",
    "start": "374080",
    "end": "380880"
  },
  {
    "text": "is that sql server standard edition can only handle 128 gigs of ram or",
    "start": "380880",
    "end": "387280"
  },
  {
    "text": "64 gigs of ram if you're unfortunate enough to still be on 2012 or earlier",
    "start": "387280",
    "end": "394560"
  },
  {
    "text": "but let's look at what that really means when you're talking memory in sql server",
    "start": "394560",
    "end": "400720"
  },
  {
    "text": "most often people refer to the buffer cache the buffer cache is where the actual data",
    "start": "400720",
    "end": "406319"
  },
  {
    "text": "blocks end up when we query and manipulate data right but there's more",
    "start": "406319",
    "end": "414240"
  },
  {
    "text": "there's a lot of other stuff going on inside of sql server and these are just a few of them so we have",
    "start": "414240",
    "end": "420080"
  },
  {
    "text": "the procedure cache we have the log cache we have the system level data structures connection context god only knows what",
    "start": "420080",
    "end": "426240"
  },
  {
    "text": "again this is just a small fraction of everything that's going on inside of sql server",
    "start": "426240",
    "end": "432479"
  },
  {
    "text": "and here's the font surprisingly little known fact still to this day",
    "start": "432479",
    "end": "439120"
  },
  {
    "text": "the addition limitation of 128 or 64 gigs only applies to the buffer cache",
    "start": "439120",
    "end": "448160"
  },
  {
    "text": "it only applies to the barf cache let's let's let that sink in for a second we",
    "start": "448880",
    "end": "454880"
  },
  {
    "text": "can thus have more memory in a server and have sql server actually use it",
    "start": "454880",
    "end": "460800"
  },
  {
    "text": "just not for the buffer cache so let's put in 192",
    "start": "460800",
    "end": "467680"
  },
  {
    "text": "gigs inside of the server and set the max server memory to 166 gigs it's going to look like this",
    "start": "467680",
    "end": "477440"
  },
  {
    "text": "why would i want to do this well again here's what what it's going to look like",
    "start": "477440",
    "end": "483360"
  },
  {
    "text": "we have 192 gigs of memory on this box we need to leave",
    "start": "483360",
    "end": "488720"
  },
  {
    "text": "some of the memory to the operating system and whatever stuff we have on the box",
    "start": "488720",
    "end": "493840"
  },
  {
    "text": "that is not sql server per se because especially if you've been at this for a while and did some",
    "start": "493840",
    "end": "499759"
  },
  {
    "text": "some stuff with windows server 2003 and you inadvertently took away memory from the",
    "start": "499759",
    "end": "506080"
  },
  {
    "text": "operating system it behaved pretty badly because the server just fell over and died",
    "start": "506080",
    "end": "511840"
  },
  {
    "text": "now 20 going from 20 to 2003 to 2008 and 2012 and so on and so",
    "start": "511840",
    "end": "519039"
  },
  {
    "text": "forth it's become better but windows does not look kindly on you taking away memory form from it",
    "start": "519039",
    "end": "526000"
  },
  {
    "text": "it does not like that so you need to leave some for the the operating system so back to",
    "start": "526000",
    "end": "531440"
  },
  {
    "text": "mac server memory mac server memory is going to cover all of these things it's not just going to cover the buffer",
    "start": "531440",
    "end": "538080"
  },
  {
    "text": "cache so in fact by putting in more memory in the box",
    "start": "538080",
    "end": "543360"
  },
  {
    "text": "and setting max memory higher than the addition memory limit it's the only way",
    "start": "543360",
    "end": "549279"
  },
  {
    "text": "to really really really use your entire memory allocation",
    "start": "549279",
    "end": "556720"
  },
  {
    "text": "i mean if you actually paid for your your server why not use it to to the max right so in short",
    "start": "557120",
    "end": "565279"
  },
  {
    "text": "do not put everything on the same box i will find you if you do",
    "start": "565279",
    "end": "570399"
  },
  {
    "text": "understand the memory limits work with them and always",
    "start": "570399",
    "end": "577839"
  },
  {
    "text": "always set a hard limit on memory because otherwise you will have a lot of processes that",
    "start": "577839",
    "end": "584080"
  },
  {
    "text": "want to eat up your memory and fight between them for for memory and you don't want to",
    "start": "584080",
    "end": "590480"
  },
  {
    "text": "find yourself in a situation where secret server has a lot of memory the operating system",
    "start": "590480",
    "end": "596240"
  },
  {
    "text": "wants that memory and boots sql server out of the memory space it's going to be a while to get that",
    "start": "596240",
    "end": "603920"
  },
  {
    "text": "memory back or get that data back into working memory so danger will rub us in danger",
    "start": "603920",
    "end": "612399"
  },
  {
    "text": "so my friend called me up again and this time he explained that his",
    "start": "613279",
    "end": "618480"
  },
  {
    "text": "performance sucked again but he'd been on the internet",
    "start": "618480",
    "end": "624880"
  },
  {
    "text": "and he had found the issue and he also found the solution to the issue and he",
    "start": "624880",
    "end": "629920"
  },
  {
    "text": "just wanted to make sure that i knew just how easy it was to fix this weight",
    "start": "629920",
    "end": "635680"
  },
  {
    "text": "called cx packet thingy oh dear let's unpack that a bit so what",
    "start": "635680",
    "end": "642399"
  },
  {
    "text": "is parallelism well for starters parallelism is a pretty difficult word if you're not",
    "start": "642399",
    "end": "648160"
  },
  {
    "text": "a native speaker",
    "start": "648160",
    "end": "651440"
  },
  {
    "text": "and what parallelism is it's it's the the",
    "start": "654480",
    "end": "660000"
  },
  {
    "text": "the ability to cut something into small bits and pieces you have seen parallelism",
    "start": "660000",
    "end": "665120"
  },
  {
    "text": "in in query plans like this it says parallelism distributes stream and over",
    "start": "665120",
    "end": "670320"
  },
  {
    "text": "there it says gather stream and a lot of people still to this day see this as an issue",
    "start": "670320",
    "end": "678079"
  },
  {
    "text": "but this is not an issue per se this is the this is kind of the shadow that a",
    "start": "678079",
    "end": "683680"
  },
  {
    "text": "potential issue throws and up until 2019 sql server 2019",
    "start": "683680",
    "end": "689680"
  },
  {
    "text": "it is somewhat difficult to figure out why and how stuff are going in in",
    "start": "689680",
    "end": "696640"
  },
  {
    "text": "parallel it's easier in 2019 and onwards but we're staying with primarily 2012 to",
    "start": "696640",
    "end": "702800"
  },
  {
    "text": "2016 uh in this this session so what if we took a huge query",
    "start": "702800",
    "end": "711120"
  },
  {
    "text": "i mean we we did a huge query in this case a select count from a product table either i can",
    "start": "711120",
    "end": "718560"
  },
  {
    "text": "just throw this on one cpu and burn that basically to the ground",
    "start": "718560",
    "end": "725839"
  },
  {
    "text": "and the other cpus are just going to go me where you don't have anything to do",
    "start": "725839",
    "end": "730959"
  },
  {
    "text": "or i can add parallelism to this now this is generally not something you",
    "start": "730959",
    "end": "737920"
  },
  {
    "text": "explicitly do this is something that the engine is going to",
    "start": "737920",
    "end": "743360"
  },
  {
    "text": "think about depending on the different settings so what's going to happen is we're going",
    "start": "743360",
    "end": "748639"
  },
  {
    "text": "to take this pretty big query and we're going to chop it into small bits and pieces and that's that's pretty easy um",
    "start": "748639",
    "end": "757440"
  },
  {
    "text": "let's let's take an example say that i have a bowl of skittles",
    "start": "757440",
    "end": "762720"
  },
  {
    "text": "you know the the multi-colored candies and i want to sort this into different piles",
    "start": "762720",
    "end": "770320"
  },
  {
    "text": "depending on the color so i can either go blue blue blue red red green over here and",
    "start": "770320",
    "end": "777040"
  },
  {
    "text": "yeah you're going to be bored within 15 seconds or i can take this and make small",
    "start": "777040",
    "end": "784480"
  },
  {
    "text": "piles and give each and every one of you your own pile that you can sort on your",
    "start": "784480",
    "end": "790320"
  },
  {
    "text": "own and when you're done you bring me back the whole result so the whole bringing back our results that's what co",
    "start": "790320",
    "end": "798399"
  },
  {
    "text": "that's called the the gather streams the issue is that at least",
    "start": "798399",
    "end": "805680"
  },
  {
    "text": "one of you is not going to care about my skills at all because you're busy watching uh cat videos on youtube or",
    "start": "805680",
    "end": "813200"
  },
  {
    "text": "looking at that facebook or tech talk or whatever is the new fad i'm i'm getting old so i don't know what",
    "start": "813200",
    "end": "819760"
  },
  {
    "text": "tik tok is and it doesn't matter what you're doing you're just not sorting my skittles and",
    "start": "819760",
    "end": "825839"
  },
  {
    "text": "thus you're holding up everybody else because i cannot count the number of different colored",
    "start": "825839",
    "end": "832000"
  },
  {
    "text": "skills until i have everything back and that is exactly",
    "start": "832000",
    "end": "838000"
  },
  {
    "text": "what tends to happen with most not always but with most oltp workloads online",
    "start": "838000",
    "end": "845839"
  },
  {
    "text": "transaction processing workloads because it is not very good at pre paralyzing that is an",
    "start": "845839",
    "end": "851440"
  },
  {
    "text": "even harder word so how is this an issue well",
    "start": "851440",
    "end": "857360"
  },
  {
    "text": "let me just say it's about to get worse much worse",
    "start": "857360",
    "end": "864480"
  },
  {
    "text": "this is a computer yes it is an old computer because this",
    "start": "865199",
    "end": "870560"
  },
  {
    "text": "is a dell optiplex pentium 2 266 megahertz",
    "start": "870560",
    "end": "876639"
  },
  {
    "text": "oh yeah megahertz not gigahertz megahertz old school stuff and this specific",
    "start": "876639",
    "end": "884160"
  },
  {
    "text": "machine um and this picture is taking from a talk by connor cunningham uh",
    "start": "884160",
    "end": "889279"
  },
  {
    "text": "at sql bits a couple years back this specific machine was the machine of gene amdahl",
    "start": "889279",
    "end": "894560"
  },
  {
    "text": "and gene used to work for microsoft and he wrote a lot of the code for the optimizer cost",
    "start": "894560",
    "end": "902079"
  },
  {
    "text": "estimation algorithm in in sql server so everything has a cost",
    "start": "902079",
    "end": "907760"
  },
  {
    "text": "in sql server every query that you run gets assigned a cost and that means that",
    "start": "907760",
    "end": "914880"
  },
  {
    "text": "a cost of 5 means that it took 5 seconds",
    "start": "914880",
    "end": "921760"
  },
  {
    "text": "on this thing to run now here's the funny part this code is",
    "start": "921760",
    "end": "928880"
  },
  {
    "text": "still in there but there has been some small",
    "start": "928880",
    "end": "934240"
  },
  {
    "text": "increases in computing power since then so a cost of five does not take five",
    "start": "934240",
    "end": "941519"
  },
  {
    "text": "seconds to run anymore and it's even worse than that because if i have",
    "start": "941519",
    "end": "946720"
  },
  {
    "text": "a intel cpu and you have another intel cpu well if your query is gonna cost five",
    "start": "946720",
    "end": "953519"
  },
  {
    "text": "and my query is going to cost five we don't know if it's going to be equally fast or slow",
    "start": "953519",
    "end": "959120"
  },
  {
    "text": "because we can't compare them you can only compare to an identical",
    "start": "959120",
    "end": "964480"
  },
  {
    "text": "system and that means that you can only compare before and after tuning pretty much",
    "start": "964480",
    "end": "969600"
  },
  {
    "text": "right so back to five seconds and a query cost of five",
    "start": "969600",
    "end": "975440"
  },
  {
    "text": "here is the dirty secrets the cost threshold for parallelism i.e the cost",
    "start": "975440",
    "end": "982160"
  },
  {
    "text": "of a query if you go above this number sql server will look at that query and go",
    "start": "982160",
    "end": "989360"
  },
  {
    "text": "i'm pretty sure that i can throw you in in parallel and this means that 5 is an extremely",
    "start": "989360",
    "end": "996079"
  },
  {
    "text": "low number and subsequently sql server thinks that it could throw any query in parallel and it",
    "start": "996079",
    "end": "1003279"
  },
  {
    "text": "doesn't only think that it can it will do it and this is where you end up with spending more time",
    "start": "1003279",
    "end": "1010399"
  },
  {
    "text": "bringing back the skills than if i had just bit the bullet and encountered the",
    "start": "1010399",
    "end": "1015759"
  },
  {
    "text": "skills on my own this is called parallelism skew",
    "start": "1015759",
    "end": "1021440"
  },
  {
    "text": "now we also have the max dop or the max degrees of parallelism how many",
    "start": "1021839",
    "end": "1029199"
  },
  {
    "text": "cpus will we rope in for this specific task and the worst number you could have",
    "start": "1029199",
    "end": "1038319"
  },
  {
    "text": "is is running on all cpus because i that's that's the the only way that i",
    "start": "1038319",
    "end": "1044720"
  },
  {
    "text": "can see that we can actually make a parallel situation even worse that would be if we run it on all the cpus",
    "start": "1044720",
    "end": "1051200"
  },
  {
    "text": "say for instance we have 24 cpus it's going to take a lot longer in most cases to gather the",
    "start": "1051200",
    "end": "1058240"
  },
  {
    "text": "skills from 24 people than if i had just done it on one cpu or a smaller number",
    "start": "1058240",
    "end": "1063840"
  },
  {
    "text": "of cpus so what is the default the default is zero which means yeah every cpu there is",
    "start": "1063840",
    "end": "1073279"
  },
  {
    "text": "sorry but it is what it is so we actually have a pretty much a perfect storm when it comes to really",
    "start": "1073840",
    "end": "1080640"
  },
  {
    "text": "really bad default settings is this still the case",
    "start": "1080640",
    "end": "1085919"
  },
  {
    "text": "for sql server 2017 and 2019 well 2017 yes 2019 is actually going to go",
    "start": "1085919",
    "end": "1095280"
  },
  {
    "text": "i have an idea for you when you install it it's going to give you a ballpark figure it's still not going to be ironclad but",
    "start": "1095280",
    "end": "1102000"
  },
  {
    "text": "it's going to be a better ballpark figure so how do you calculate this well up",
    "start": "1102000",
    "end": "1108640"
  },
  {
    "text": "until pretty recently there was no way to really calculate it um but there has",
    "start": "1108640",
    "end": "1115039"
  },
  {
    "text": "been some some advances with um queries but i i use a pretty",
    "start": "1115039",
    "end": "1120840"
  },
  {
    "text": "simple rule of thumb because this works for most cases",
    "start": "1120840",
    "end": "1126080"
  },
  {
    "text": "i'm going to set the max stop depending on the number of cpus that i have to one two or four for instance and",
    "start": "1126080",
    "end": "1132799"
  },
  {
    "text": "up until an up up up until the number of eight i'm gonna",
    "start": "1132799",
    "end": "1138000"
  },
  {
    "text": "stay with the same um i'm not gonna go higher than the number of cpus that i have and",
    "start": "1138000",
    "end": "1143840"
  },
  {
    "text": "if i have eight cpus i'm probably gonna be roughly around two maybe four depending on my workload",
    "start": "1143840",
    "end": "1151440"
  },
  {
    "text": "if you are unfortunate enough to run stuff like oh i don't know sharepoint that requires",
    "start": "1151440",
    "end": "1157919"
  },
  {
    "text": "you to set the max drop of one i.e it will never do anything in parallel well i feel for you but",
    "start": "1157919",
    "end": "1164000"
  },
  {
    "text": "that's the case in in some uh sharepoint it is the case of some dynamics workloads as well",
    "start": "1164000",
    "end": "1173200"
  },
  {
    "text": "then i set the cost threshold for parallelism to 50 and 50 is a good starting number because 5 is",
    "start": "1173840",
    "end": "1180960"
  },
  {
    "text": "way too low and there is another rule of thumb that says maybe you want to parallelize 20 to 30",
    "start": "1180960",
    "end": "1187280"
  },
  {
    "text": "percent of your workload so what i do is i set this to and then i",
    "start": "1187280",
    "end": "1192400"
  },
  {
    "text": "let stuff run for a bit then i go back into the cache and see how many of my plans are going in",
    "start": "1192400",
    "end": "1198799"
  },
  {
    "text": "parallel and if it is more than 50 then i increase this number 50 or if it's lower than 30",
    "start": "1198799",
    "end": "1206480"
  },
  {
    "text": "well then i decrease this number in order to find a reasonable number where i have",
    "start": "1206480",
    "end": "1212960"
  },
  {
    "text": "about 30 of my queries running in parallel and again this your your mileage may vary in you need",
    "start": "1212960",
    "end": "1219440"
  },
  {
    "text": "to know your workload but this is the way you do it so the good thing is",
    "start": "1219440",
    "end": "1224640"
  },
  {
    "text": "you can do these changes on your own on your own in on the run you can do",
    "start": "1224640",
    "end": "1231760"
  },
  {
    "text": "this on the fly you can do this with the database running and you can also from 2016 and upwards set this per",
    "start": "1231760",
    "end": "1239760"
  },
  {
    "text": "database because otherwise you're going to be stuck in doing this on the server level",
    "start": "1239760",
    "end": "1244880"
  },
  {
    "text": "however if you decide to change mac stop or cost threshold for",
    "start": "1244880",
    "end": "1250080"
  },
  {
    "text": "parallelism be aware that that you're you're going to be able to do it on the fly but it's going",
    "start": "1250080",
    "end": "1256640"
  },
  {
    "text": "to blow out your cash it is going to have the same effect as",
    "start": "1256640",
    "end": "1261760"
  },
  {
    "text": "actually restarting sql server just be aware of it because when you push the button you",
    "start": "1261760",
    "end": "1268799"
  },
  {
    "text": "might hear this stream from the user somewhere and that is never a comfortable thing",
    "start": "1268799",
    "end": "1275600"
  },
  {
    "text": "that's why i have my door closed and pretty decent sound protection",
    "start": "1275600",
    "end": "1281760"
  },
  {
    "text": "so in summary for this part understand your workload as a dba and",
    "start": "1283039",
    "end": "1289280"
  },
  {
    "text": "i would argue as as a developer database developer you need to understand the workload and so many",
    "start": "1289280",
    "end": "1296240"
  },
  {
    "text": "people just focus on the code the code works well sure it works but it",
    "start": "1296240",
    "end": "1302000"
  },
  {
    "text": "sucks so you need to understand why is it doing what it's doing and why do you want it to do what it's",
    "start": "1302000",
    "end": "1308640"
  },
  {
    "text": "doing so it's all about the the intersection between the users the business and the actual code",
    "start": "1308640",
    "end": "1316080"
  },
  {
    "text": "you need to understand the consequences of everything before you do anything the the old adage",
    "start": "1316080",
    "end": "1322559"
  },
  {
    "text": "that when you pull the pin mr grenade is no longer your friend is very applicable because if you were",
    "start": "1322559",
    "end": "1327919"
  },
  {
    "text": "to set this number on a running database you will blow out the cache and if you're looking at 192 gigs of",
    "start": "1327919",
    "end": "1335360"
  },
  {
    "text": "memory on that machine that's going to be 166 gigs of cash that it's just going to go the way",
    "start": "1335360",
    "end": "1341120"
  },
  {
    "text": "of the dodo not a good thing and always always",
    "start": "1341120",
    "end": "1348159"
  },
  {
    "text": "test test everything and test it again because at the end of the day it is your",
    "start": "1348159",
    "end": "1354960"
  },
  {
    "text": "posterior on the line if something goes wrong",
    "start": "1354960",
    "end": "1361200"
  },
  {
    "text": "all right my friend called me up again and this time he said what",
    "start": "1361200",
    "end": "1367679"
  },
  {
    "text": "what wait come on man how can code be bad or good i mean if the code works",
    "start": "1367679",
    "end": "1376159"
  },
  {
    "text": "it must be good right really does it let's look at that",
    "start": "1376159",
    "end": "1384720"
  },
  {
    "text": "so this is the way that humans work well no not",
    "start": "1384720",
    "end": "1392240"
  },
  {
    "text": "in t sql well maybe some minds do but now this is the way of",
    "start": "1392240",
    "end": "1397360"
  },
  {
    "text": "attacking a problem that's called role by agonizing row we tend to look at a data set from",
    "start": "1397360",
    "end": "1405120"
  },
  {
    "text": "the first row and then we go to the second row then we go to the third row and so on and so forth",
    "start": "1405120",
    "end": "1410159"
  },
  {
    "text": "this is r bar row by agonizing row opposed to that is set theory",
    "start": "1410159",
    "end": "1417280"
  },
  {
    "text": "another example i'm going to go ahead and guess that most of you have done laundry i used to",
    "start": "1417280",
    "end": "1423360"
  },
  {
    "text": "ask people or i used to say that everybody has done laundry but it turns out that not everybody has",
    "start": "1423360",
    "end": "1428880"
  },
  {
    "text": "anyways most of you have and there are a couple of ways of doing this but picture that you're",
    "start": "1428880",
    "end": "1435039"
  },
  {
    "text": "taking the laundry out of the the washer and putting it in for the dryer and then putting it",
    "start": "1435039",
    "end": "1440720"
  },
  {
    "text": "into uh your cupboard your storage so if you were to take a garment you fold the",
    "start": "1440720",
    "end": "1446400"
  },
  {
    "text": "garment and you put it in the the cabinet and then you take another garment you fold",
    "start": "1446400",
    "end": "1451919"
  },
  {
    "text": "the garment and you put it in the cupboard that's row by agonizing row if i were to tell you",
    "start": "1451919",
    "end": "1460159"
  },
  {
    "text": "take this stuff out of the dryer and put it into the cupboard that's",
    "start": "1460159",
    "end": "1467360"
  },
  {
    "text": "set theory and that's imperative sorry declarative instead of imperative",
    "start": "1467360",
    "end": "1475919"
  },
  {
    "text": "ways of looking at things and the trouble is the human mind is not very good at this",
    "start": "1475919",
    "end": "1481440"
  },
  {
    "text": "whole set thing but this is going to be dead slow we can do this",
    "start": "1481440",
    "end": "1490320"
  },
  {
    "text": "in another way and in secret server it looks like this",
    "start": "1490320",
    "end": "1496320"
  },
  {
    "text": "from a database admin perspective this is obvious and assumption is the mother",
    "start": "1497679",
    "end": "1504960"
  },
  {
    "text": "of all you know what it's called and this is a pretty bad thing as a dba this is the way that",
    "start": "1504960",
    "end": "1511919"
  },
  {
    "text": "i expect people to behave because i am not a developer but if you come to",
    "start": "1511919",
    "end": "1517600"
  },
  {
    "text": "this from the either from a a normal",
    "start": "1517600",
    "end": "1522640"
  },
  {
    "text": "programming background or even worse if you're using some kind of framework then you might not neither know nor have",
    "start": "1522640",
    "end": "1530080"
  },
  {
    "text": "control over what the the framework or the code that you're creating is doing",
    "start": "1530080",
    "end": "1535360"
  },
  {
    "text": "but be aware that this is going to be extremely fast and the other one is going to be",
    "start": "1535360",
    "end": "1540640"
  },
  {
    "text": "pretty slow i'm going to give you another example so as you can very very clearly see here",
    "start": "1540640",
    "end": "1547200"
  },
  {
    "text": "we have two examples of code this code does the same thing",
    "start": "1547200",
    "end": "1552720"
  },
  {
    "text": "it was part of the the fill factor speed freak competition many many years back",
    "start": "1552720",
    "end": "1557760"
  },
  {
    "text": "and the task was to produce a report by month listing the number of new subscribers the number of subscribers who had left",
    "start": "1557760",
    "end": "1564320"
  },
  {
    "text": "ie churn and a running total of current subscribers the the left example is using a row by row",
    "start": "1564320",
    "end": "1572559"
  },
  {
    "text": "approach with a temporary table and the right one is using a cte a common table expression",
    "start": "1572559",
    "end": "1579919"
  },
  {
    "text": "and some pretty clever set-based trickery now you can't see this and it's it's fine",
    "start": "1579919",
    "end": "1586640"
  },
  {
    "text": "you don't need to crawl all the way up to the screen because it is it's font size fly spec",
    "start": "1586640",
    "end": "1591760"
  },
  {
    "text": "that's not the point the point is there are two ways of approaching this one is",
    "start": "1591760",
    "end": "1596799"
  },
  {
    "text": "the row by organizing row one is the set-based way of doing things",
    "start": "1596799",
    "end": "1602559"
  },
  {
    "text": "so do you think there was any difference in speeds this is over",
    "start": "1602559",
    "end": "1609039"
  },
  {
    "text": "i think it was a hundred thousand rows and ten plus years ago so a hundred thousand",
    "start": "1609039",
    "end": "1615440"
  },
  {
    "text": "rows was a bigger thing then than it is now but the difference in speed is pretty",
    "start": "1615440",
    "end": "1622400"
  },
  {
    "text": "staggering the set paste was one second the row by agonizing row was 126 seconds",
    "start": "1622400",
    "end": "1630559"
  },
  {
    "text": "and this is the kind of performance gains that you can see if you stop explaining to sql server",
    "start": "1630559",
    "end": "1638320"
  },
  {
    "text": "how it should do things and simply just tell it what to do",
    "start": "1638320",
    "end": "1644320"
  },
  {
    "text": "keep that in mind we can keep going when it comes to creative coding",
    "start": "1645120",
    "end": "1653600"
  },
  {
    "text": "so here we have two select statements they're they're doing the exact same",
    "start": "1653600",
    "end": "1658799"
  },
  {
    "text": "thing but the problem is the human mind",
    "start": "1658799",
    "end": "1664159"
  },
  {
    "text": "really does not like unordered lists i mean if i were to give",
    "start": "1664159",
    "end": "1670799"
  },
  {
    "text": "you a phone book that had no sorting in it well it's gonna be a while before you found my",
    "start": "1670799",
    "end": "1677279"
  },
  {
    "text": "phone number yeah but as soon as we sort the thing",
    "start": "1677279",
    "end": "1683279"
  },
  {
    "text": "um in an alphabetical order well it's easy to find my phone number that's the whole idea of",
    "start": "1683279",
    "end": "1689200"
  },
  {
    "text": "of sorting and that's also the whole idea of an index now the trouble with sort is that it is",
    "start": "1689200",
    "end": "1695240"
  },
  {
    "text": "extremely expensive from a computing standpoint not only is it expensive it is also",
    "start": "1695240",
    "end": "1702880"
  },
  {
    "text": "what's known as a locking operator you cannot do a sort in parallel",
    "start": "1702880",
    "end": "1711440"
  },
  {
    "text": "so here we have an example the one down here is no sort",
    "start": "1711440",
    "end": "1717840"
  },
  {
    "text": "the one over there is a sort and there are a few really really really",
    "start": "1717840",
    "end": "1724640"
  },
  {
    "text": "bad things here so remember the query cost i can't say anything of a an absolute number",
    "start": "1724640",
    "end": "1732799"
  },
  {
    "text": "if your query costs 2 or 32 i don't know what that means i can only",
    "start": "1732799",
    "end": "1738320"
  },
  {
    "text": "say that your query costs whatever number you set but if we were to compare the numbers like this",
    "start": "1738320",
    "end": "1747200"
  },
  {
    "text": "then it turns out that the first query with the sword is kind of uh i don't know eight times more",
    "start": "1747200",
    "end": "1753039"
  },
  {
    "text": "expensive no it's even worse than that it's about 16 times more expensive than not running a sort",
    "start": "1753039",
    "end": "1761120"
  },
  {
    "text": "already here we can see kind of a pattern but it gets worse funny that",
    "start": "1761600",
    "end": "1768480"
  },
  {
    "text": "because there's an exclamation mark and that means in this case that tempdb was used to to spill the data too",
    "start": "1768480",
    "end": "1775520"
  },
  {
    "text": "what does this mean well up until sql server 20",
    "start": "1775520",
    "end": "1781760"
  },
  {
    "text": "the one of the first things that happen when sql server is looking at a query is that it estimates the",
    "start": "1781760",
    "end": "1787679"
  },
  {
    "text": "amount of memory it will need to fulfill the query and this is pretty much locked in stone",
    "start": "1787679",
    "end": "1794240"
  },
  {
    "text": "you cannot under any circumstances change this number for subsequent query runs or",
    "start": "1794240",
    "end": "1801919"
  },
  {
    "text": "for this query run this is not true for 2017 and it's",
    "start": "1801919",
    "end": "1807039"
  },
  {
    "text": "definitely not true for 2019 but for the sake of the argument it you",
    "start": "1807039",
    "end": "1812960"
  },
  {
    "text": "can change it so this means that sql server is going to come up with a number",
    "start": "1812960",
    "end": "1818000"
  },
  {
    "text": "and then it's going to run the query realize that holy crap it had the completely wrong numbers going",
    "start": "1818000",
    "end": "1825120"
  },
  {
    "text": "in the estimation was off the charts so what does it do how can it get access",
    "start": "1825120",
    "end": "1831120"
  },
  {
    "text": "to more memory well it's going to start eyeing tempdb and tempdb is also known as the public",
    "start": "1831120",
    "end": "1836559"
  },
  {
    "text": "toilet of sql server because all  ends up there and that means that",
    "start": "1836559",
    "end": "1841840"
  },
  {
    "text": "you're going to see a lot of action on temp tv which in turn is going to be much much much slower",
    "start": "1841840",
    "end": "1850000"
  },
  {
    "text": "so spills is a really really bad thing from a performance standpoint you",
    "start": "1850000",
    "end": "1855520"
  },
  {
    "text": "do not want to see this 2017 and 2019 is better at",
    "start": "1855520",
    "end": "1861200"
  },
  {
    "text": "re-evaluating a query after the fact but it's it's it's not",
    "start": "1861200",
    "end": "1867600"
  },
  {
    "text": "foolproof at all then we have a few ways of writing",
    "start": "1867600",
    "end": "1874320"
  },
  {
    "text": "functions and this is where most developers go huh wait a second i know functions",
    "start": "1874320",
    "end": "1879760"
  },
  {
    "text": "this is interesting and this is relevant to my interests well there are a few ways of writing",
    "start": "1879760",
    "end": "1885360"
  },
  {
    "text": "functions there there are three kinds three main kinds of udfs or user defined functions",
    "start": "1885360",
    "end": "1891600"
  },
  {
    "text": "we have the scalar function which gives you exactly one result you have a table valued or an inline",
    "start": "1891600",
    "end": "1899200"
  },
  {
    "text": "table valued function which is going to give you a an object that is a table",
    "start": "1899200",
    "end": "1904960"
  },
  {
    "text": "or you have a multi-statement table valued function or an mstdf",
    "start": "1904960",
    "end": "1910640"
  },
  {
    "text": "a multi-statement table valued function means that you have some statements and you're going to return a",
    "start": "1910640",
    "end": "1917519"
  },
  {
    "text": "table the scalars are easy they're going to return one variable of a scalar type the other two",
    "start": "1917519",
    "end": "1924960"
  },
  {
    "text": "well let's look at that so here we have a function get people by",
    "start": "1924960",
    "end": "1931440"
  },
  {
    "text": "state and we are giving it a parameter in this case it's going to be state and",
    "start": "1931440",
    "end": "1937679"
  },
  {
    "text": "we're going to return people by state which is a virtual table that contains first name and and last",
    "start": "1937679",
    "end": "1944559"
  },
  {
    "text": "name inside of this function we're going to put",
    "start": "1944559",
    "end": "1950159"
  },
  {
    "text": "stuff into this variable people buy states we're going to select that from the state and so on and so forth but we also have",
    "start": "1950159",
    "end": "1957039"
  },
  {
    "text": "a an if row count a kind of a catch thingy to see if we have zero then",
    "start": "1957039",
    "end": "1964960"
  },
  {
    "text": "we're gonna put in no people found this is a multi-statement table valued",
    "start": "1964960",
    "end": "1970960"
  },
  {
    "text": "function so when we run this over there",
    "start": "1970960",
    "end": "1976799"
  },
  {
    "text": "we're going to see six to seven logical reads and 125 milliseconds of cpu time is that a lot well in this",
    "start": "1976799",
    "end": "1984559"
  },
  {
    "text": "case it's unreasonably uh high i'm going to show you why in a second",
    "start": "1984559",
    "end": "1991840"
  },
  {
    "text": "so the problem is sql server does not have any statistics",
    "start": "1991919",
    "end": "2000320"
  },
  {
    "text": "on the number of rows that this query will hit because it cannot see inside of this",
    "start": "2000320",
    "end": "2006480"
  },
  {
    "text": "statement tdf so it's going to go ahead and guess",
    "start": "2006480",
    "end": "2012159"
  },
  {
    "text": "and up until 2014 it's going to guess that you will receive",
    "start": "2012159",
    "end": "2017200"
  },
  {
    "text": "exactly one row and that is going to have some issues if",
    "start": "2017200",
    "end": "2023360"
  },
  {
    "text": "you're getting back oh i don't know 150 000 rows your your query plan is going to",
    "start": "2023360",
    "end": "2029279"
  },
  {
    "text": "suck in the highest order but it's okay because in in 2014 they",
    "start": "2029279",
    "end": "2035760"
  },
  {
    "text": "fixed it because in 2014 it will expect to get",
    "start": "2035760",
    "end": "2041600"
  },
  {
    "text": "a hundred rows back yeah but it's okay because in 2017 and",
    "start": "2041600",
    "end": "2048398"
  },
  {
    "text": "2019 they really fixed it and they kind of did because 2019",
    "start": "2048399",
    "end": "2054158"
  },
  {
    "text": "is much much better at doing something called inlining or interleaving so it kind of",
    "start": "2054159",
    "end": "2061760"
  },
  {
    "text": "runs this query and peaks ahead and sees oh we're going to get a lot of numbers so",
    "start": "2061760",
    "end": "2066960"
  },
  {
    "text": "it can do a lot of trickery on the fly so 2019 is much better handling this but",
    "start": "2066960",
    "end": "2073599"
  },
  {
    "text": "be aware that again it's still not foolproof what if we were to do something like",
    "start": "2073599",
    "end": "2080320"
  },
  {
    "text": "this instead we turn our multi-statement tdf",
    "start": "2080320",
    "end": "2085520"
  },
  {
    "text": "into a single statement tvf it returns the same thing the only thing that we are not doing now",
    "start": "2085520",
    "end": "2091440"
  },
  {
    "text": "is the whole if statement so it becomes a single statement and thus sql server can see inside of it",
    "start": "2091440",
    "end": "2099200"
  },
  {
    "text": "and inline this as it's called and it basically rewrites this into a normal sql",
    "start": "2099200",
    "end": "2105599"
  },
  {
    "text": "statement that the engine can handle and here we can use all the the uh the statistics that we ever",
    "start": "2105599",
    "end": "2112240"
  },
  {
    "text": "needed and this one is going to be blazingly fast because we're doing three logical reads and we don't even have a a number",
    "start": "2112240",
    "end": "2119680"
  },
  {
    "text": "cpu time is zero milliseconds and that kind of is is better than 125.",
    "start": "2119680",
    "end": "2125200"
  },
  {
    "text": "so these are the weirder things that you're gonna hit as a developer because",
    "start": "2125200",
    "end": "2131359"
  },
  {
    "text": "functions are great everybody uses functions but yes they come with a bit of a cost if you",
    "start": "2131359",
    "end": "2136880"
  },
  {
    "text": "don't know exactly how the engine works and speaking of queries and and how the",
    "start": "2136880",
    "end": "2143040"
  },
  {
    "text": "engine works there's something called sargable or search argument able",
    "start": "2143040",
    "end": "2149440"
  },
  {
    "text": "and sargable means that sql server can perform an index seek using your search predicates",
    "start": "2149440",
    "end": "2155359"
  },
  {
    "text": "and this was said by brent ozar one of the the the really really heavy hitters in the",
    "start": "2155359",
    "end": "2161040"
  },
  {
    "text": "square server community let's look at a few examples if i were",
    "start": "2161040",
    "end": "2167119"
  },
  {
    "text": "to do this i'm going to select registration id date left registrations",
    "start": "2167119",
    "end": "2172720"
  },
  {
    "text": "date left and from registrations where the year of datejoint is 1953. so i'm looking at",
    "start": "2172720",
    "end": "2179280"
  },
  {
    "text": "the year part of a date and i'm throwing this query to sql",
    "start": "2179280",
    "end": "2184320"
  },
  {
    "text": "server this cannot use an index because what we're going to see is this we're going",
    "start": "2184320",
    "end": "2189359"
  },
  {
    "text": "to see an index scan and scan means that we start at the top and we go all the way to the bottom",
    "start": "2189359",
    "end": "2194640"
  },
  {
    "text": "an index scan or a table scan is often not always but often a sign of a",
    "start": "2194640",
    "end": "2201440"
  },
  {
    "text": "bad plan so here we have a 98 cost pretty much everything every",
    "start": "2201440",
    "end": "2209119"
  },
  {
    "text": "everything in the query that costed anything was was due to this and it's kind of a small picture but the",
    "start": "2209119",
    "end": "2215839"
  },
  {
    "text": "number of rows that we read was a million incidentally that's the number of rows",
    "start": "2215839",
    "end": "2221040"
  },
  {
    "text": "that we have in the table but we only wanted 18 000 rows so the estimation is wrong",
    "start": "2221040",
    "end": "2229680"
  },
  {
    "text": "because we can't do an estimation because we cannot use an index so if we can't use an index we're forced",
    "start": "2229680",
    "end": "2236640"
  },
  {
    "text": "to just go in and read all the rows if you're coming from an oracle",
    "start": "2236640",
    "end": "2242400"
  },
  {
    "text": "background there's something called a function based index where you can actually index based on",
    "start": "2242400",
    "end": "2249040"
  },
  {
    "text": "the outcome of a function so that would mean in that specific case you could have run this",
    "start": "2249040",
    "end": "2254560"
  },
  {
    "text": "and had to hit an index now you can't because the index which is on",
    "start": "2254560",
    "end": "2261599"
  },
  {
    "text": "let me go back to it's on datejoint and datejoint is a date i.e it contains both in the year",
    "start": "2261599",
    "end": "2269520"
  },
  {
    "text": "and the the month and the day the index is on that it's not on only the year part so that's",
    "start": "2269520",
    "end": "2276480"
  },
  {
    "text": "why sql server cannot just use the year part and look that up",
    "start": "2276480",
    "end": "2282000"
  },
  {
    "text": "for a human that's stupid that is unbelievably stupid but that's the way the engine works",
    "start": "2282000",
    "end": "2288560"
  },
  {
    "text": "um and there there's a lot of interesting talks on the subject by for instance joe sack who is one of the the i think he's",
    "start": "2288560",
    "end": "2296480"
  },
  {
    "text": "one of the principal program managers for for sql server engineering and what he does not know about the",
    "start": "2296480",
    "end": "2301839"
  },
  {
    "text": "the optimizer you don't want to know so we keep going with this what if we",
    "start": "2301839",
    "end": "2308720"
  },
  {
    "text": "were to move the function to the right side of the equality mark in this case we're going",
    "start": "2308720",
    "end": "2315359"
  },
  {
    "text": "to do select yada yada where datejoined equals convert and now we're just converting a string to a date time so we have",
    "start": "2315359",
    "end": "2321680"
  },
  {
    "text": "something to compare with and keep in mind that the index is on datejoint",
    "start": "2321680",
    "end": "2327440"
  },
  {
    "text": "and now we are comparing apples to apples and suddenly we have an index seek",
    "start": "2327440",
    "end": "2332560"
  },
  {
    "text": "which means that we are like a torpedo going straight to the rows in the table and then we see",
    "start": "2332560",
    "end": "2339599"
  },
  {
    "text": "action number rows one expected number rows one voila much much faster",
    "start": "2339599",
    "end": "2347200"
  },
  {
    "text": "this is what we want to see when it comes to dates",
    "start": "2347200",
    "end": "2353359"
  },
  {
    "text": "there's something called between be very very very very very wary with between this",
    "start": "2353359",
    "end": "2361359"
  },
  {
    "text": "is the right way to do a comparison between two dates why",
    "start": "2361359",
    "end": "2367359"
  },
  {
    "text": "wouldn't i just use between well between can be very inclusive",
    "start": "2367359",
    "end": "2373200"
  },
  {
    "text": "it can come back and haunt you with dates that you were not expecting it to have",
    "start": "2373200",
    "end": "2379280"
  },
  {
    "text": "this way i know exactly what it's going to return between can be or between is inclusive",
    "start": "2379280",
    "end": "2386240"
  },
  {
    "text": "so you might actually get more dates on the ants that you expected and if there is one thing that",
    "start": "2386240",
    "end": "2393520"
  },
  {
    "text": "sql server people hates it surprises i want to have my database to be as boring as physically",
    "start": "2393520",
    "end": "2399280"
  },
  {
    "text": "possible i have another session that i do it's called boring is stable stable is good and yeah",
    "start": "2399280",
    "end": "2405599"
  },
  {
    "text": "so do this instead of using between",
    "start": "2405599",
    "end": "2410720"
  },
  {
    "text": "we can keep going with this because this between it's going to do an index",
    "start": "2410720",
    "end": "2416160"
  },
  {
    "text": "seek we are looking at 380 000 rows which is still much better than a",
    "start": "2416160",
    "end": "2423119"
  },
  {
    "text": "million rows so apparently we can do an index hit despite doing a between that's kind of",
    "start": "2423119",
    "end": "2430319"
  },
  {
    "text": "useful and then we have the whole use the tools",
    "start": "2430319",
    "end": "2436560"
  },
  {
    "text": "you're given one of the the big things back in the 90s when i started working with with computers were",
    "start": "2436560",
    "end": "2442240"
  },
  {
    "text": "that you should create your database code to be agnostic it should be able to run on any",
    "start": "2442240",
    "end": "2449359"
  },
  {
    "text": "database and that is beyond stupid in my view because we pay a lot of money to get access to",
    "start": "2449359",
    "end": "2456319"
  },
  {
    "text": "sql server or oracle or db2 or whatever we're using so why don't we learn the intricacies of",
    "start": "2456319",
    "end": "2463680"
  },
  {
    "text": "this specific implementation in order to really really get stuff running fast",
    "start": "2463680",
    "end": "2470079"
  },
  {
    "text": "i mean this is a fully valid query but we could do it like this as well",
    "start": "2470079",
    "end": "2477680"
  },
  {
    "text": "so just by knowing how the engine works use the tools you're given use them read",
    "start": "2477680",
    "end": "2483680"
  },
  {
    "text": "up on it read the manual i know it's not the male thing to do and like a lot of other things that are not",
    "start": "2483680",
    "end": "2489760"
  },
  {
    "text": "considered male it's stupid so read the manual and really figure out how your code is going to impact",
    "start": "2489760",
    "end": "2496960"
  },
  {
    "text": "the query engine so in summary for this part dehumanize your",
    "start": "2496960",
    "end": "2502960"
  },
  {
    "text": "code there is no point in having your code acting like a human because it's probably going to",
    "start": "2502960",
    "end": "2508240"
  },
  {
    "text": "be a lot slower learn the tool i.e read the manual and",
    "start": "2508240",
    "end": "2513760"
  },
  {
    "text": "always remember that nothing in life is free everything you do will have consequences when it comes to",
    "start": "2513760",
    "end": "2520839"
  },
  {
    "text": "performance my friend was on the phone again and he was positively furious with sql server",
    "start": "2520839",
    "end": "2528000"
  },
  {
    "text": "as it was mocking him even more than usual he swore that he had a query that",
    "start": "2528000",
    "end": "2533599"
  },
  {
    "text": "sometimes performed good and sometimes performed impossibly bad",
    "start": "2533599",
    "end": "2539520"
  },
  {
    "text": "and he was sure that he had found a bug in the date of his engine he might have but let's look at a more",
    "start": "2539520",
    "end": "2545920"
  },
  {
    "text": "likely scenario first here we have two queries and we're going",
    "start": "2545920",
    "end": "2552160"
  },
  {
    "text": "to be looking at a number of rows from a table and we're",
    "start": "2552160",
    "end": "2557520"
  },
  {
    "text": "going to have different customer ids because different customers have a different number of",
    "start": "2557520",
    "end": "2562839"
  },
  {
    "text": "transactions and if we just run these two queries we're going to see that the top one was",
    "start": "2562839",
    "end": "2570240"
  },
  {
    "text": "a lot of rows so sql server opted to do a",
    "start": "2570240",
    "end": "2575359"
  },
  {
    "text": "table scan which in this case were in index and this is which is going to give us a better",
    "start": "2575359",
    "end": "2580800"
  },
  {
    "text": "performance when it comes to a huge number of rows but the second one when we put in um the",
    "start": "2580800",
    "end": "2588720"
  },
  {
    "text": "the lower number or the the other number for um for um customer id 976",
    "start": "2588720",
    "end": "2597839"
  },
  {
    "text": "then it was a comparatively small number of rows that we're gonna hit so that's",
    "start": "2597839",
    "end": "2603520"
  },
  {
    "text": "mean that means it's it's more efficient to go into the index find that address and then go into",
    "start": "2603520",
    "end": "2610480"
  },
  {
    "text": "the table and then keep keep jumping that's that's called an index seek",
    "start": "2610480",
    "end": "2615920"
  },
  {
    "text": "but if we were to parameterize this query because that's going to give us two completely different query plans",
    "start": "2615920",
    "end": "2622560"
  },
  {
    "text": "and it's going to go into the cache but if we were to parameterize this query and do it like this",
    "start": "2622560",
    "end": "2629839"
  },
  {
    "text": "so we're going to instead of specifically stating or explicitly stating the the um the number",
    "start": "2629839",
    "end": "2636720"
  },
  {
    "text": "we're going to do a variable this means that we are deferring the query uh running we are we're only",
    "start": "2636720",
    "end": "2644400"
  },
  {
    "text": "going to cash this we're not going to cash for number 125 or 976 or whatever it's it's going to be",
    "start": "2644400",
    "end": "2651839"
  },
  {
    "text": "cached in a more general way the issue here is that sql server does not know",
    "start": "2651839",
    "end": "2657760"
  },
  {
    "text": "what numbers we're going to be throwing at it so again we kind of took away a lot of the",
    "start": "2657760",
    "end": "2663520"
  },
  {
    "text": "information that the optimizer uses to um to figure out how to best attack a query",
    "start": "2663520",
    "end": "2669680"
  },
  {
    "text": "but the thing is the first time we run this",
    "start": "2669680",
    "end": "2674720"
  },
  {
    "text": "that query will be cached that query will be used for all",
    "start": "2674720",
    "end": "2681680"
  },
  {
    "text": "the subsequent runs of this function so that means that the first",
    "start": "2681680",
    "end": "2688160"
  },
  {
    "text": "time we run this and we show with number 401 this is where parameter sniffing comes into play",
    "start": "2688160",
    "end": "2693680"
  },
  {
    "text": "it's going to sniff the parameter go okay this is the the um the query plan that i",
    "start": "2693680",
    "end": "2699839"
  },
  {
    "text": "think is the best choice for this because we're going to give you back a lot of data so we're going to lock this",
    "start": "2699839",
    "end": "2705040"
  },
  {
    "text": "in as the best query plan however what happens if we do this",
    "start": "2705040",
    "end": "2713599"
  },
  {
    "text": "remember that 976 gave us a whole different parameter a whole different career plan",
    "start": "2713599",
    "end": "2719440"
  },
  {
    "text": "previously yeah that's going to be an issue because we're going to be seeing this we're",
    "start": "2719440",
    "end": "2726960"
  },
  {
    "text": "looking at the estimated number of rows it's going to be 23 000 rows",
    "start": "2726960",
    "end": "2732480"
  },
  {
    "text": "but the actual number rows over there is going to be 250.",
    "start": "2732480",
    "end": "2738079"
  },
  {
    "text": "so what is happening is we started by showing the query engine 401",
    "start": "2738079",
    "end": "2745760"
  },
  {
    "text": "and 401 means that it's going to find a lot of row so it's opting for a table scan",
    "start": "2745760",
    "end": "2753200"
  },
  {
    "text": "but if we then show it 976 well",
    "start": "2753200",
    "end": "2760319"
  },
  {
    "text": "there is 976 so",
    "start": "2760319",
    "end": "2765119"
  },
  {
    "text": "this is parameter sniffing and this is a serious issue so how do you deal with this",
    "start": "2766560",
    "end": "2774480"
  },
  {
    "text": "well there are there are basically three ways because the engine cannot help you here it's",
    "start": "2774480",
    "end": "2781599"
  },
  {
    "text": "doing exactly what you asked it for either you can go and add with recompile",
    "start": "2781599",
    "end": "2789119"
  },
  {
    "text": "on all your queries that is effectively you're going to destroy all",
    "start": "2789119",
    "end": "2794960"
  },
  {
    "text": "the winnings of cashing it in the first place so that",
    "start": "2794960",
    "end": "2800079"
  },
  {
    "text": "kind of sucks or if you know your data you might be",
    "start": "2800079",
    "end": "2806240"
  },
  {
    "text": "able to use optimize for and using optimize for means that you're telling the optimizer",
    "start": "2806240",
    "end": "2812480"
  },
  {
    "text": "that you might be expecting to see these kinds of numbers",
    "start": "2812480",
    "end": "2817599"
  },
  {
    "text": "so it it guides the optimizer somewhat or if you know exactly how your",
    "start": "2817599",
    "end": "2824400"
  },
  {
    "text": "data works and you know exactly your your use cases and you have a fairly static set of numbers then you can do an if",
    "start": "2824400",
    "end": "2832400"
  },
  {
    "text": "then else tree style thing and go for different places to do",
    "start": "2832400",
    "end": "2839680"
  },
  {
    "text": "different query plans that is a lot of work to keep up",
    "start": "2840160",
    "end": "2846640"
  },
  {
    "text": "and the the yeah the the upkeep is just phenomenal for that one but it is the fastest way of doing",
    "start": "2846640",
    "end": "2853359"
  },
  {
    "text": "things that that i can think of",
    "start": "2853359",
    "end": "2859040"
  },
  {
    "text": "my friend call me again this is starting to become a bit of a pattern and this time he had some",
    "start": "2859040",
    "end": "2866000"
  },
  {
    "text": "serious issues with blocking because everything was blocking everything else he said and this time",
    "start": "2866000",
    "end": "2872000"
  },
  {
    "text": "he wanted to check with me first before he implemented his newest brightest idea that he had gotten from",
    "start": "2872000",
    "end": "2878880"
  },
  {
    "text": "internet and that was putting no luck on everything so",
    "start": "2878880",
    "end": "2885040"
  },
  {
    "text": "there there are two main locking strategies that you can implement in in a database it could either be a",
    "start": "2885040",
    "end": "2891920"
  },
  {
    "text": "pessimistic or an optimistic locking scheme sql server still defaults to a",
    "start": "2891920",
    "end": "2898079"
  },
  {
    "text": "pessimistic locking strategy known as read committed where readers blocked",
    "start": "2898079",
    "end": "2903599"
  },
  {
    "text": "writers by default so we have the read uncommitted which means",
    "start": "2903599",
    "end": "2908640"
  },
  {
    "text": "that yeah we're not going to be bothering with looking at if anything",
    "start": "2908640",
    "end": "2915359"
  },
  {
    "text": "is is committed before we read it as soon as i read it i'm going to read the the number but if it's not committed",
    "start": "2915359",
    "end": "2921760"
  },
  {
    "text": "i i don't care we're going to have the read committed which is the the normal isolation lab that we are",
    "start": "2921760",
    "end": "2928480"
  },
  {
    "text": "running on in sql server we have the repeatable read and serializable and as you keep going upwards in these it's",
    "start": "2928480",
    "end": "2935359"
  },
  {
    "text": "going to get slower and slower and slower because you can only do one thing at a time in serializable so serializable is",
    "start": "2935359",
    "end": "2942079"
  },
  {
    "text": "basically having this huge database database engine but you can only have one person in the store at any given",
    "start": "2942079",
    "end": "2949200"
  },
  {
    "text": "time and read uncommitted means that you can have a whole darn",
    "start": "2949200",
    "end": "2954480"
  },
  {
    "text": "school bus in there and they can do pretty much whatever they want but you can't really trust what",
    "start": "2954800",
    "end": "2961040"
  },
  {
    "text": "they're they're seeing so we have the other way of doing things the the",
    "start": "2961040",
    "end": "2966960"
  },
  {
    "text": "optimistic locking this is where you have the read committed snapshot and snapshot and this",
    "start": "2966960",
    "end": "2972480"
  },
  {
    "text": "means instead that you are using tempdb to cache a a row as you keep going",
    "start": "2972480",
    "end": "2982640"
  },
  {
    "text": "this is generally a good idea the read committed snapshot um because it's it's pretty much",
    "start": "2982640",
    "end": "2988000"
  },
  {
    "text": "transparent to the user the snapshot means that you need to change your code a bit so what",
    "start": "2988000",
    "end": "2995760"
  },
  {
    "text": "does this mean i'm going to give you an example um my parents they're old",
    "start": "2995760",
    "end": "3002720"
  },
  {
    "text": "and they decided that they wanted to go on a trip with their their other uh friends so they descended on",
    "start": "3002720",
    "end": "3009839"
  },
  {
    "text": "moss on a um what's it called um a travel agent that's the world i'm",
    "start": "3009839",
    "end": "3017920"
  },
  {
    "text": "looking for a travel agent i don't know if there's gonna be any more travel agents",
    "start": "3017920",
    "end": "3023520"
  },
  {
    "text": "still alive after the pandemic but anyways so they they walked through the door and like 20",
    "start": "3023520",
    "end": "3028880"
  },
  {
    "text": "people going we want to go to mallyarka um or we're going to want to go to spain or whatever and the",
    "start": "3028880",
    "end": "3035680"
  },
  {
    "text": "the the travel agent he went oh yes this is going to be awesome and that's what they they were starting",
    "start": "3035680",
    "end": "3040720"
  },
  {
    "text": "to talk about which flight they want to do and how do they want to get there he started to pre-book the seats for the",
    "start": "3040720",
    "end": "3047040"
  },
  {
    "text": "flights he was locking the seats for the flights",
    "start": "3047040",
    "end": "3053040"
  },
  {
    "text": "after roughly 20 minutes they looked at each other and go okay now i don't think we're going to go to",
    "start": "3053040",
    "end": "3058079"
  },
  {
    "text": "spain maybe maybe maybe italy is better uh we're going to be thinking about this we'll come back after lunch and then",
    "start": "3058079",
    "end": "3063520"
  },
  {
    "text": "they left and the travel agent was stuck with a lot of pre-booked seats that he",
    "start": "3063520",
    "end": "3069200"
  },
  {
    "text": "didn't need so he released them and that's what pessimistic locking is all about",
    "start": "3069200",
    "end": "3074880"
  },
  {
    "text": "if there were another set of people that wanted to go to spain well they couldn't because there was no",
    "start": "3074880",
    "end": "3080720"
  },
  {
    "text": "seats left on the plane but now there is the issue so when they came back after",
    "start": "3080720",
    "end": "3089119"
  },
  {
    "text": "lunch he was he had learned from his mistakes so he did not touch",
    "start": "3089119",
    "end": "3094160"
  },
  {
    "text": "any of the the um the stuff until they said yes okay we want to go to spain",
    "start": "3094160",
    "end": "3100079"
  },
  {
    "text": "on these dates on this flight that's when he went in to book the seats unfortunately",
    "start": "3100079",
    "end": "3107280"
  },
  {
    "text": "there were no seats and that's optimistic locking",
    "start": "3107280",
    "end": "3112640"
  },
  {
    "text": "with one thing that you could do is use",
    "start": "3113040",
    "end": "3119119"
  },
  {
    "text": "no lock to increase performance and no lock means pretty much",
    "start": "3119119",
    "end": "3126720"
  },
  {
    "text": "read uncommitted so only use no lock if you a really know what you're doing",
    "start": "3126720",
    "end": "3133920"
  },
  {
    "text": "or b really hate your data because it's going to have some consequences it might be fast",
    "start": "3133920",
    "end": "3140880"
  },
  {
    "text": "but it's like an american car it goes very very fast in a straight line but do not try to turn because",
    "start": "3140880",
    "end": "3146319"
  },
  {
    "text": "you're going to end up in a wall and it's the same thing with no lock be extremely",
    "start": "3146319",
    "end": "3151440"
  },
  {
    "text": "careful with no luck you might end up with stuff like dirty",
    "start": "3151440",
    "end": "3158000"
  },
  {
    "text": "reads this is the thing that most people are aware of because you can read data that has not been committed",
    "start": "3158000",
    "end": "3163680"
  },
  {
    "text": "and it could be rolled back sometime after you've read it meaning you've read data that",
    "start": "3163680",
    "end": "3169040"
  },
  {
    "text": "technically never existed you might see missing rows or you might see",
    "start": "3169040",
    "end": "3174720"
  },
  {
    "text": "rows twice uh why not read multiple versions of the same row which is",
    "start": "3174720",
    "end": "3182319"
  },
  {
    "text": "a risk due to how the the way the an allocation scan works",
    "start": "3182319",
    "end": "3189359"
  },
  {
    "text": "or um if well a reader is kind of sucky but if you were to put on",
    "start": "3189359",
    "end": "3195040"
  },
  {
    "text": "no lock on insert update and deletes don't ever do that because you might end up with index",
    "start": "3195040",
    "end": "3202160"
  },
  {
    "text": "corruption and that is a bad bad bad thing so",
    "start": "3202160",
    "end": "3208960"
  },
  {
    "text": "keep in mind read committed snapshot isolation or rcsi which is generally a better way of doing",
    "start": "3208960",
    "end": "3215680"
  },
  {
    "text": "things because you're not blocking in anywhere near the same way as you do in just in normal read",
    "start": "3215680",
    "end": "3222000"
  },
  {
    "text": "committed you will have schema locks i.e when you do a read you cannot change",
    "start": "3222000",
    "end": "3228400"
  },
  {
    "text": "the structure of the table kind of goes without saying but people still get surprised",
    "start": "3228400",
    "end": "3235280"
  },
  {
    "text": "there will be row versioning in tempdb and what this means is that for every",
    "start": "3235280",
    "end": "3242079"
  },
  {
    "text": "row you're reading there it will be a copy of it inside of tempdb",
    "start": "3242079",
    "end": "3247119"
  },
  {
    "text": "so tempdb will be pulling double duty if you will to be a bit of an cash so this is the",
    "start": "3247119",
    "end": "3254559"
  },
  {
    "text": "way that you can actually manipulate data and read the old data at the same time this means that you",
    "start": "3254559",
    "end": "3261760"
  },
  {
    "text": "will be putting a lot more pressure on tempdb and given the choice of a hard drive if",
    "start": "3261760",
    "end": "3269040"
  },
  {
    "text": "you have just one ssd drive or solid state drive and you can put whatever you want on on",
    "start": "3269040",
    "end": "3276640"
  },
  {
    "text": "on it from sql server most people are going to go yeah i want to put indexes on that never do that always make sure that temp",
    "start": "3276640",
    "end": "3283359"
  },
  {
    "text": "db has the fastest storage that you can find if you have an nvme drive or or a pci express or whatever make",
    "start": "3283359",
    "end": "3290799"
  },
  {
    "text": "sure that tempdb is on the fastest drive possible that's going to give you the",
    "start": "3290799",
    "end": "3296960"
  },
  {
    "text": "best performance and if you're interested in in learning more about these things",
    "start": "3296960",
    "end": "3302640"
  },
  {
    "text": "i can highly or i cannot recommend this blog high enough kendra little",
    "start": "3302640",
    "end": "3309520"
  },
  {
    "text": "works out of red gate in in the uk these days she's done a ton of work she does a lot",
    "start": "3309520",
    "end": "3315440"
  },
  {
    "text": "of speaking on locking blocking indexes programming in general she is",
    "start": "3315440",
    "end": "3321440"
  },
  {
    "text": "super good at what she does and she's written a lot of the good stuff on the internet about",
    "start": "3321440",
    "end": "3327280"
  },
  {
    "text": "this so in in summary for this one consider",
    "start": "3327280",
    "end": "3333119"
  },
  {
    "text": "optimistic locking because it will probably give you better performance due to not blocking everything in sight keep in",
    "start": "3333119",
    "end": "3340799"
  },
  {
    "text": "mind the temp db will be affected as in it's going to be",
    "start": "3340799",
    "end": "3346079"
  },
  {
    "text": "under a lot of pressure and be very very wary of no luck as in",
    "start": "3346079",
    "end": "3352960"
  },
  {
    "text": "don't so in summary do not fall for the idea that the",
    "start": "3352960",
    "end": "3359760"
  },
  {
    "text": "developer don't need any insight into the database and just a few small changes to your",
    "start": "3359760",
    "end": "3366400"
  },
  {
    "text": "database solution can increase performance several times and always",
    "start": "3366400",
    "end": "3371440"
  },
  {
    "text": "use the tools you're given there are dbas and there are developers",
    "start": "3371440",
    "end": "3379760"
  },
  {
    "text": "some say they don't mix and there's um there indeed plenty of examples where",
    "start": "3379760",
    "end": "3385599"
  },
  {
    "text": "they do not get along i mean some people claim that that this is the result of a fallout from a",
    "start": "3385599",
    "end": "3394559"
  },
  {
    "text": "especially vicious argument between the dba and the developer take my friend for example there's only",
    "start": "3394559",
    "end": "3400559"
  },
  {
    "text": "so much that you can do on your own working together with invariably gets",
    "start": "3400559",
    "end": "3406160"
  },
  {
    "text": "you better results and with dbas and developers working",
    "start": "3406160",
    "end": "3411200"
  },
  {
    "text": "side by side the tools available can be used in the intended way for maximum performance and profit",
    "start": "3411200",
    "end": "3418640"
  },
  {
    "text": "often new ideas spawned from the collaboration itself can result in basically a quantum leap",
    "start": "3418640",
    "end": "3425920"
  },
  {
    "text": "take this new knowledge and use it to better your code and better your relation with your dba",
    "start": "3425920",
    "end": "3433599"
  },
  {
    "text": "together we can do so much more and a bright future awaits thank you so much",
    "start": "3433599",
    "end": "3441280"
  },
  {
    "text": "my name is alexander and i thank you for your time",
    "start": "3441280",
    "end": "3446000"
  }
]