[
  {
    "text": "hello and welcome everyone to an hour of dotnet debugging this is going to be fun",
    "start": "7820",
    "end": "16529"
  },
  {
    "text": "it's been a long time since since I've presented but not bugging actually and but the things that we're going to be",
    "start": "16529",
    "end": "23490"
  },
  {
    "text": "looking at well starts good let's see",
    "start": "23490",
    "end": "30170"
  },
  {
    "text": "okay let's debug that for a moment since the slideshow um",
    "start": "33379",
    "end": "40579"
  },
  {
    "text": "don't use percent reviews okay oh okay",
    "start": "40579",
    "end": "51750"
  },
  {
    "text": "hey thanks for debugging that for me whoa okay so we're starting over",
    "start": "51750",
    "end": "59039"
  },
  {
    "text": "welcome to an hour of dotnet debugging we're going to be debugging those kind",
    "start": "59039",
    "end": "64500"
  },
  {
    "text": "of issues that you can't really step-by-step debug so essentially crashes performance issues and memory",
    "start": "64500",
    "end": "71610"
  },
  {
    "text": "leaks and when you can't step-by-step debug you have to resort to something",
    "start": "71610",
    "end": "76709"
  },
  {
    "text": "else and that something else is generally either profiling which we'll",
    "start": "76709",
    "end": "81899"
  },
  {
    "text": "be looking at a little bit Andy in the performance section but also mostly",
    "start": "81899",
    "end": "87630"
  },
  {
    "text": "memory dumps and many of you use memory dumps okay oh I see so for those of you",
    "start": "87630",
    "end": "95399"
  },
  {
    "text": "who don't know memory dumps come in two flavors they're either user mode dumps",
    "start": "95399",
    "end": "100500"
  },
  {
    "text": "or kernel mode dumps so user mode dump is a snapshot of a process at a given",
    "start": "100500",
    "end": "107130"
  },
  {
    "text": "time and everything that it like all the",
    "start": "107130",
    "end": "112140"
  },
  {
    "text": "memory that it addresses as it's kind of like taking a picture or stopping at a breakpoint you can see whatever is there",
    "start": "112140",
    "end": "119729"
  },
  {
    "text": "right now but you can't move forward you can't move backward but you can investigate traces of what has happened",
    "start": "119729",
    "end": "126539"
  },
  {
    "text": "already and if we look at the memory",
    "start": "126539",
    "end": "131670"
  },
  {
    "text": "dump and we're going to look at it in window buddy first I'm not actually going to use window cheat all that much",
    "start": "131670",
    "end": "137820"
  },
  {
    "text": "throughout the presentation but yes for those cases where you actually",
    "start": "137820",
    "end": "143620"
  },
  {
    "text": "want to go really deep down when the Vitesse is a great tool so when GG comes",
    "start": "143620",
    "end": "148689"
  },
  {
    "text": "with the debugging tools for Windows or the drivers SDKs are really pretty much",
    "start": "148689",
    "end": "153879"
  },
  {
    "text": "any windows vista case so you probably already have it on your machine even if you've never seen it before and what",
    "start": "153879",
    "end": "161560"
  },
  {
    "text": "we're going to do is we're going to go ahead and open up the crash dub that I get earlier and and I put a few commands",
    "start": "161560",
    "end": "169450"
  },
  {
    "text": "here on the right-hand side or left hand side and can you see them in the back",
    "start": "169450",
    "end": "174510"
  },
  {
    "text": "perfect so this is you so that you can follow along what I'm going through what",
    "start": "174510",
    "end": "180159"
  },
  {
    "text": "you can see in a memory dump so a memory dump has a few things when you start up",
    "start": "180159",
    "end": "185620"
  },
  {
    "text": "like it tells you how long the process has been up how long the system has been up so in this case the process has been",
    "start": "185620",
    "end": "192069"
  },
  {
    "text": "up for 25 seconds and the system has been up for 2 2 hours it also tells us",
    "start": "192069",
    "end": "198819"
  },
  {
    "text": "that the memory dump was taking with something called proc them which is a tool for gathering them and it tells us",
    "start": "198819",
    "end": "206049"
  },
  {
    "text": "that we through the CLR exception so we crashed due to an unhandled dotnet",
    "start": "206049",
    "end": "212530"
  },
  {
    "text": "exception and then some things that we can do are for example tilde star KB",
    "start": "212530",
    "end": "219549"
  },
  {
    "text": "where tilde means thread star means all so all threads run the command KB which",
    "start": "219549",
    "end": "227019"
  },
  {
    "text": "means show stack so what we're doing here is we're basically displaying all the stacks of all the threads in the",
    "start": "227019",
    "end": "232780"
  },
  {
    "text": "process and if you disregard this piece which is used addresses or some",
    "start": "232780",
    "end": "239169"
  },
  {
    "text": "parameters in this piece on the right hand side should look pretty familiar to you if you've ever debate anything in",
    "start": "239169",
    "end": "245919"
  },
  {
    "text": "Visual Studio or any other tool so this way you can kind of investigate and see",
    "start": "245919",
    "end": "251949"
  },
  {
    "text": "what the process is doing we'll see a few things that are specific to dotnet",
    "start": "251949",
    "end": "257979"
  },
  {
    "text": "processes like the finalizer thread which is the thread that goes through",
    "start": "257979",
    "end": "263949"
  },
  {
    "text": "and calls all your destructors so if you have a class in dotnet but has a",
    "start": "263949",
    "end": "270880"
  },
  {
    "text": "destructor that will get called on that particular thread that means that for example since there",
    "start": "270880",
    "end": "276260"
  },
  {
    "text": "is only one and that if you're blocking the finalized thread you're going to",
    "start": "276260",
    "end": "281570"
  },
  {
    "text": "cause a problem you're going to cause a memory leak because nothing else can get released and also if you is it so an",
    "start": "281570",
    "end": "290450"
  },
  {
    "text": "exception in in a destructor it will crash your process and we have a few",
    "start": "290450",
    "end": "298040"
  },
  {
    "text": "elsewhere so this thread has some weird function names on it",
    "start": "298040",
    "end": "303280"
  },
  {
    "text": "presentation core something something not readable and this is because dust a",
    "start": "303280",
    "end": "308930"
  },
  {
    "text": "window which he doesn't understand dotnet it is the native debugger this thread actually happened to be the",
    "start": "308930",
    "end": "316520"
  },
  {
    "text": "thread that caused the crash so we're kind of interested in what went on there",
    "start": "316520",
    "end": "321620"
  },
  {
    "text": "and in order to be able to read dotnet code you have to load in an extension so",
    "start": "321620",
    "end": "327260"
  },
  {
    "text": "we're going to load in something called SOS and we do that by calling low load",
    "start": "327260",
    "end": "332720"
  },
  {
    "text": "by SS CLR which means that we're going to load in the expansion CLR or SOS from",
    "start": "332720",
    "end": "339020"
  },
  {
    "text": "the same place where it found see a large of yellow which is main dll in in the.net framework so if we go in and",
    "start": "339020",
    "end": "346160"
  },
  {
    "text": "look at shame used to see the extensions we have will see that it loads it from",
    "start": "346160",
    "end": "352160"
  },
  {
    "text": "the framework which is important because it tells you that you will always have SOS you don't have to download it from",
    "start": "352160",
    "end": "359480"
  },
  {
    "text": "anywhere else as long as you have the framework installed so we have that",
    "start": "359480",
    "end": "365480"
  },
  {
    "text": "actually now we can run commands like CLR stack and it will always throw an",
    "start": "365480",
    "end": "371450"
  },
  {
    "text": "exception in this case on the first one but ignore that and now we'll see",
    "start": "371450",
    "end": "377030"
  },
  {
    "text": "something that looks a lot more than what we're a lot more like what we're used to so a dotnet function but next",
    "start": "377030",
    "end": "384560"
  },
  {
    "text": "button onclick calls into view model like a function called go to another on",
    "start": "384560",
    "end": "390020"
  },
  {
    "text": "a view model and that in turn throws an argument out of range exceptions so",
    "start": "390020",
    "end": "395360"
  },
  {
    "text": "right now we're already done investigating this crash essentially we found out but this particular stack cost",
    "start": "395360",
    "end": "402260"
  },
  {
    "text": "the crashed through a argument range exception and we'll look at the code and we're done",
    "start": "402260",
    "end": "407510"
  },
  {
    "text": "but we could do more things so we could for example run dump that garbage or for",
    "start": "407510",
    "end": "413150"
  },
  {
    "text": "short DSL and that will give us the objects on the stacks so pretty much",
    "start": "413150",
    "end": "418700"
  },
  {
    "text": "like when you stopped in window G you'll see all the objects on the stack in this",
    "start": "418700",
    "end": "424010"
  },
  {
    "text": "case we'll see a five argument out of range exceptions that seems kind of like",
    "start": "424010",
    "end": "429710"
  },
  {
    "text": "a bit excessive but it turns out this is the same one we can see that because it",
    "start": "429710",
    "end": "436520"
  },
  {
    "text": "has the same address but it shows up in multiple frames in the stack like multiple stack frames and therefore it",
    "start": "436520",
    "end": "442940"
  },
  {
    "text": "shows up multiple times on the stack but we can go ahead and and dub this out",
    "start": "442940",
    "end": "448010"
  },
  {
    "text": "with dump Bob it does that automatically when you click on it and and it will",
    "start": "448010",
    "end": "454100"
  },
  {
    "text": "show you the the actual object so you can go ahead and investigate it and find out what's in it it also tells us a",
    "start": "454100",
    "end": "460580"
  },
  {
    "text": "little bit more about the object like it's 92 bytes big these 92 bytes is used",
    "start": "460580",
    "end": "468620"
  },
  {
    "text": "for the structure of this this object not for the member variables and if we",
    "start": "468620",
    "end": "474830"
  },
  {
    "text": "want to know the actual size of the object itself and all the member",
    "start": "474830",
    "end": "480890"
  },
  {
    "text": "variables we'll run something called herbs herbs slice and we'll find out",
    "start": "480890",
    "end": "488150"
  },
  {
    "text": "that including the member variables it's 6000 right and then we can go in and",
    "start": "488150",
    "end": "495800"
  },
  {
    "text": "dump out like the message for example and find out the actual string of the",
    "start": "495800",
    "end": "501170"
  },
  {
    "text": "message so why would you want to write that for example the herb sighs well it's useful for if you want to go",
    "start": "501170",
    "end": "507890"
  },
  {
    "text": "through an ace to nest ohms and find out how much is in cash then you would do objects lies on the cash object and you",
    "start": "507890",
    "end": "513560"
  },
  {
    "text": "will find everything that's in cash and so on and sometimes you might want to",
    "start": "513560",
    "end": "518900"
  },
  {
    "text": "know why an audit is not being garbage collected and in that case you just take",
    "start": "518900",
    "end": "524090"
  },
  {
    "text": "the address of the object and you'll run a command called GC root and that will",
    "start": "524090",
    "end": "531020"
  },
  {
    "text": "tell you basically the roots of the object so why is still sticking around so this particular string is a member",
    "start": "531020",
    "end": "538580"
  },
  {
    "text": "variable of an hour argument at a range exception we already knew that and it's part of",
    "start": "538580",
    "end": "544820"
  },
  {
    "text": "like a try/catch on a thread so that is white sticking around so as long as",
    "start": "544820",
    "end": "550730"
  },
  {
    "text": "that's alive it will be there and when that's dead then it can garbage collected and then we can find a few",
    "start": "550730",
    "end": "558470"
  },
  {
    "text": "more things like so these are all things that you would find in visual studios you you start it at that exception but",
    "start": "558470",
    "end": "566060"
  },
  {
    "text": "we'll find a few more things like LM which lists out the modules in the process so this will list any DLLs or eh",
    "start": "566060",
    "end": "574880"
  },
  {
    "text": "C's in the process and a useful thing with this is for example if you click on",
    "start": "574880",
    "end": "580940"
  },
  {
    "text": "this which happens to be the name of the process we can find out the version numbers of the dll's and stuff like that",
    "start": "580940",
    "end": "587899"
  },
  {
    "text": "so if you get a memory dump of a customer's machine you'll know what they are running the same version that you're",
    "start": "587899",
    "end": "593360"
  },
  {
    "text": "running or the partes or what happened and finally when you're debugging memory",
    "start": "593360",
    "end": "601339"
  },
  {
    "text": "issues you might want to look at the heat so what's on like all the darknet",
    "start": "601339",
    "end": "607069"
  },
  {
    "text": "Hobbiton in the process so you don't run for example a heap - GC which will give",
    "start": "607069",
    "end": "613160"
  },
  {
    "text": "you information about here we have three",
    "start": "613160",
    "end": "618560"
  },
  {
    "text": "Meg's of dotnet objects super small but it was only up for 25 seconds and and",
    "start": "618560",
    "end": "625029"
  },
  {
    "text": "then you can also run things like dub heap that start and this is kind of",
    "start": "625029",
    "end": "631940"
  },
  {
    "text": "where it gets a little bit very interesting because now you can enumerate every single object on the",
    "start": "631940",
    "end": "640279"
  },
  {
    "text": "heap so every single object that's in the process which means that you can go in in a processor you don't actually",
    "start": "640279",
    "end": "646850"
  },
  {
    "text": "have to own this process you can be running for example office take a memory dump and you can go in and look at every",
    "start": "646850",
    "end": "653389"
  },
  {
    "text": "single string that is in the process office including if they have API keys",
    "start": "653389",
    "end": "659870"
  },
  {
    "text": "to the distance store in there to to do API calls be a bit careful if you don't",
    "start": "659870",
    "end": "667389"
  },
  {
    "text": "encrypt your API keys and stuff like that because you can find out a lot from",
    "start": "667389",
    "end": "673220"
  },
  {
    "text": "memory if you're interested so this is like a",
    "start": "673220",
    "end": "679600"
  },
  {
    "text": "little bit about what you can find out sometimes so where did we go so you can",
    "start": "679600",
    "end": "687819"
  },
  {
    "text": "find out threads call stack stack object modules like the dll's and it sees and",
    "start": "687819",
    "end": "693160"
  },
  {
    "text": "the darknet heap and basically anything that's in the process so how would you",
    "start": "693160",
    "end": "700300"
  },
  {
    "text": "gather these memorandums well a couple of different ways and the easiest way is",
    "start": "700300",
    "end": "705670"
  },
  {
    "text": "to just use task manager right click and choose create user and this is useful if",
    "start": "705670",
    "end": "714730"
  },
  {
    "text": "you have a process that's hanging or a process that has a memory leak and you",
    "start": "714730",
    "end": "720759"
  },
  {
    "text": "just go in and do this and it's a perfectly valid memory DOM and the only few carrots amazed is that if you run a",
    "start": "720759",
    "end": "728649"
  },
  {
    "text": "32-bit process on a 64-bit system it will gather a 64-bit dump which is a bit",
    "start": "728649",
    "end": "734380"
  },
  {
    "text": "harder to debug and if you if you want to debug something like a crash the task",
    "start": "734380",
    "end": "741670"
  },
  {
    "text": "manager doesn't allow you to like wait for a crash to happen and then created momentum but then you can use Proctor",
    "start": "741670",
    "end": "749610"
  },
  {
    "text": "programs is a free tool from sysinternals and the best thing about it is that it's",
    "start": "749610",
    "end": "755139"
  },
  {
    "text": "super lightweight so it's just a small exe you can take it copied over to your",
    "start": "755139",
    "end": "760750"
  },
  {
    "text": "server and run it there and you don't have to install it so you don't have to get permissions to do like to do big",
    "start": "760750",
    "end": "767470"
  },
  {
    "text": "installs or whatever used run it there and this is actually fairly fast and even capturing super large domes and the",
    "start": "767470",
    "end": "775839"
  },
  {
    "text": "thing about it is that you can also configure it to do certain things like over here you can see - H means that it",
    "start": "775839",
    "end": "783250"
  },
  {
    "text": "will wait for a window to stop responding and - see you means that it",
    "start": "783250",
    "end": "789699"
  },
  {
    "text": "will wait for the CPU to go up in this case over 90% or - EU means that it will",
    "start": "789699",
    "end": "795579"
  },
  {
    "text": "wait for the process to crash and then you have a debug diet which um is both a",
    "start": "795579",
    "end": "803559"
  },
  {
    "text": "crash gather anima analyzer so something that I worked on for well",
    "start": "803559",
    "end": "810160"
  },
  {
    "text": "quite a long time ago when I got tired of writing or CLR saggin all these",
    "start": "810160",
    "end": "815999"
  },
  {
    "text": "windbg sessions and I decided that automation was king and I wanted to",
    "start": "815999",
    "end": "821800"
  },
  {
    "text": "please have machine do it form instead and I basically automate them myself out",
    "start": "821800",
    "end": "827829"
  },
  {
    "text": "of a job but that's cool but debug diag is pretty powerful both for capturing",
    "start": "827829",
    "end": "834160"
  },
  {
    "text": "dumps and for analyzing dumps so for capturing dumps it has like a lot of nice UI as things for setting up like",
    "start": "834160",
    "end": "843100"
  },
  {
    "text": "gather done but this specific exception are whenever dispersed counter hits this",
    "start": "843100",
    "end": "849249"
  },
  {
    "text": "value or whatever it might be and it's also good for native leaks which we",
    "start": "849249",
    "end": "854889"
  },
  {
    "text": "won't talk about here but if you have a native leak that's good and for",
    "start": "854889",
    "end": "861069"
  },
  {
    "text": "analyzing memory dumps we've seen how you can do it in window beachy and but",
    "start": "861069",
    "end": "866199"
  },
  {
    "text": "you can also do it in D by diagram we'll use that a lot it has a lot of analysis scripts already written you can write",
    "start": "866199",
    "end": "873189"
  },
  {
    "text": "your own analysis scripts if you have a specific issue that happens over and over again you just want to verify that",
    "start": "873189",
    "end": "879269"
  },
  {
    "text": "the 104 stubs that comes from your customer also has the same problem yeah go ahead and write the script for that",
    "start": "879269",
    "end": "885970"
  },
  {
    "text": "and it will report it will generate reports like this HTML report telling",
    "start": "885970",
    "end": "892929"
  },
  {
    "text": "you pretty much exactly what's going on in 80% of the cases and then we have",
    "start": "892929",
    "end": "898959"
  },
  {
    "text": "Visual Studio so Visual Studio is got an insanely good at reading memory dumps as",
    "start": "898959",
    "end": "904449"
  },
  {
    "text": "well and we'll be looking at how you use that so we'll start off with a crash",
    "start": "904449",
    "end": "913678"
  },
  {
    "text": "so if you're lucky someone comes in and",
    "start": "918240",
    "end": "923710"
  },
  {
    "text": "says something like this well maybe so like if someone's or something like this but and at least if someone gives you an",
    "start": "923710",
    "end": "930970"
  },
  {
    "text": "error message like this you have something to work with like you have a repro scenario and you",
    "start": "930970",
    "end": "937060"
  },
  {
    "text": "can probably start figuring out what's going on but more than often and the",
    "start": "937060",
    "end": "945070"
  },
  {
    "text": "person the app is crashing for is like my mom who comes in with this message",
    "start": "945070",
    "end": "950320"
  },
  {
    "text": "saying hey Tess the internet ething is not working anymore they're going okay",
    "start": "950320",
    "end": "955779"
  },
  {
    "text": "so does that mean it's not serving pages or it's that mean it's just going away hmm so then you ask",
    "start": "955779",
    "end": "962770"
  },
  {
    "text": "so mom what what were you doing it's just like I didn't do anything so if she",
    "start": "962770",
    "end": "971110"
  },
  {
    "text": "didn't do it then who did it well for a crash particularly there are only a few",
    "start": "971110",
    "end": "978220"
  },
  {
    "text": "different things that could happen with kosta crash the most common one is unhandled",
    "start": "978220",
    "end": "985720"
  },
  {
    "text": "exceptions so first you have the exception occurs you have a chance to",
    "start": "985720",
    "end": "990760"
  },
  {
    "text": "put it in a try-catch block if you do that nothing will happen but then if we",
    "start": "990760",
    "end": "996070"
  },
  {
    "text": "don't do that and you let it just go up the stack then it will cost it'll be a second chance exception and it will",
    "start": "996070",
    "end": "1003600"
  },
  {
    "text": "crash your process in cases like asp.net you'll have an unhandled exception",
    "start": "1003600",
    "end": "1009029"
  },
  {
    "text": "handler that released output like the white screen of death and/or if you do",
    "start": "1009029",
    "end": "1015209"
  },
  {
    "text": "it on the finalizer it will still crash but in WPS or in other processes the",
    "start": "1015209",
    "end": "1022260"
  },
  {
    "text": "second chance will kill your process and then you have a few other exceptions",
    "start": "1022260",
    "end": "1028558"
  },
  {
    "text": "like Stack Overflow out of memory and safe little execution and an exception",
    "start": "1028559",
    "end": "1034020"
  },
  {
    "text": "that will never go to second chance and the reason for that is because if you're",
    "start": "1034020",
    "end": "1039270"
  },
  {
    "text": "in a stack overflow exception so if you if you're in a case where you're in a",
    "start": "1039270",
    "end": "1044579"
  },
  {
    "text": "recursive loop and there is no more stack space to be had then you can't really have another",
    "start": "1044579",
    "end": "1050330"
  },
  {
    "text": "function handle the exception so there's no way to handle a sec overflow",
    "start": "1050330",
    "end": "1055340"
  },
  {
    "text": "exception same thing would an out of memory exception if you're running out of memory you don't have any memory to",
    "start": "1055340",
    "end": "1061159"
  },
  {
    "text": "do the handling itself and the execution engine exception is basically when there",
    "start": "1061159",
    "end": "1066440"
  },
  {
    "text": "is a bug in the framework somewhere so something that causes like a native heap or a.net heap corruption or or something",
    "start": "1066440",
    "end": "1073730"
  },
  {
    "text": "like that and finally um um this might come as a",
    "start": "1073730",
    "end": "1079820"
  },
  {
    "text": "surprise as florists like a class but and you'll often also see when when you have what you think is a crash it's",
    "start": "1079820",
    "end": "1086750"
  },
  {
    "text": "actually like someone trying to recycle the process due to them is reset or some",
    "start": "1086750",
    "end": "1093529"
  },
  {
    "text": "recycling mechanism for example in expert net and so when you go through a",
    "start": "1093529",
    "end": "1100010"
  },
  {
    "text": "crash this is like I put together is the one two three of what you do because it's really that simple",
    "start": "1100010",
    "end": "1107690"
  },
  {
    "text": "first and you should always do this check the Event Viewer and then capture",
    "start": "1107690",
    "end": "1113960"
  },
  {
    "text": "dump on crash and look at the faulting stack and crashes are extremely simple",
    "start": "1113960",
    "end": "1121399"
  },
  {
    "text": "in that case because once you've captured the number in the crash you will know that whatever cost it was",
    "start": "1121399",
    "end": "1128559"
  },
  {
    "text": "essentially what caused the crash whatever triggered the dump it could of course be that it is for example another",
    "start": "1128559",
    "end": "1135320"
  },
  {
    "text": "memory exception in which case you would have to investigate like a memory leak or something but in most cases it will",
    "start": "1135320",
    "end": "1141679"
  },
  {
    "text": "be a second chance exception so we're going to look at that and and we'll have",
    "start": "1141679",
    "end": "1148600"
  },
  {
    "text": "this app here she's listing out all the precedents as of right now this will be",
    "start": "1148600",
    "end": "1156350"
  },
  {
    "text": "old by lunch but um and I got this error",
    "start": "1156350",
    "end": "1164840"
  },
  {
    "text": "for saying that whenever it's like next like this it just stops like it exits",
    "start": "1164840",
    "end": "1171530"
  },
  {
    "text": "and what we're going to do is we're going to go ahead and and grab a memory",
    "start": "1171530",
    "end": "1176600"
  },
  {
    "text": "dump using proc dump for this so we'll do prop dumb - ma ma means mini",
    "start": "1176600",
    "end": "1184700"
  },
  {
    "text": "dump with all all options which is most often what we'll want some then dump",
    "start": "1184700",
    "end": "1191179"
  },
  {
    "text": "with all options is actually a pretty victim and then we'll say the name of",
    "start": "1191179",
    "end": "1197750"
  },
  {
    "text": "the of the process so the proceed and study XE or we can give it to pay",
    "start": "1197750",
    "end": "1205280"
  },
  {
    "text": "difficult multiple and I call the same thing and then we say let's wait for an",
    "start": "1205280",
    "end": "1211010"
  },
  {
    "text": "exception and I hope to start this so there's something to attach to and now",
    "start": "1211010",
    "end": "1218330"
  },
  {
    "text": "it's waiting for the crash to occur so we'll reproduce it again and there we go",
    "start": "1218330",
    "end": "1227650"
  },
  {
    "text": "so notice how easy it is to gather one of these domes so we've already seen",
    "start": "1227650",
    "end": "1233960"
  },
  {
    "text": "this in windbg now if you troubleshoot it you're going to run to the star KB",
    "start": "1233960",
    "end": "1239630"
  },
  {
    "text": "you're going to run CLR stack you're going to look at the dumpster garbage would be so and so we're going to look",
    "start": "1239630",
    "end": "1245570"
  },
  {
    "text": "at this instead in debug guides and this is it lift the same dumb but",
    "start": "1245570",
    "end": "1253360"
  },
  {
    "text": "pre-prepared um unless debug daya do its",
    "start": "1253360",
    "end": "1259669"
  },
  {
    "text": "default analysis which is a crash hang analysis and it will then output this",
    "start": "1259669",
    "end": "1267760"
  },
  {
    "text": "which is pretty much like without having to know all those commands you can still",
    "start": "1267760",
    "end": "1273080"
  },
  {
    "text": "get really useful information like we had a system argument are the range",
    "start": "1273080",
    "end": "1278750"
  },
  {
    "text": "exceptional threat zero now we'll go in and look here here is the stack again and we can go ahead and",
    "start": "1278750",
    "end": "1285409"
  },
  {
    "text": "investigate like they go to another",
    "start": "1285409",
    "end": "1290539"
  },
  {
    "text": "method and actually it also says that it",
    "start": "1290539",
    "end": "1295640"
  },
  {
    "text": "had some previous stuff net exceptions as it will list like any exceptions that",
    "start": "1295640",
    "end": "1300950"
  },
  {
    "text": "are actually in the in the process that might be useful for further troubleshooting and here again we have",
    "start": "1300950",
    "end": "1308300"
  },
  {
    "text": "the argument out of range exception I wanted to point out here that it also",
    "start": "1308300",
    "end": "1313460"
  },
  {
    "text": "lists that we have these three exceptions that I was talking about like the out of memory exception the stack",
    "start": "1313460",
    "end": "1319880"
  },
  {
    "text": "overflow and the execution engine exception I want to point this out because this does not mean that these",
    "start": "1319880",
    "end": "1325550"
  },
  {
    "text": "exceptions actually occurred this means like these are in hair always because they can't be generated when they",
    "start": "1325550",
    "end": "1332180"
  },
  {
    "text": "actually occur so they're pre created at the startup of the process so that needs",
    "start": "1332180",
    "end": "1337490"
  },
  {
    "text": "to be thrown when needed now there is an",
    "start": "1337490",
    "end": "1342650"
  },
  {
    "text": "even simpler way to look at this issue if if you have the symbols lined up with",
    "start": "1342650",
    "end": "1348470"
  },
  {
    "text": "your source code and the way to do that is by opening the dump file in a visual",
    "start": "1348470",
    "end": "1356000"
  },
  {
    "text": "studio inside and it will come up and will say it was the dotnet exception",
    "start": "1356000",
    "end": "1362440"
  },
  {
    "text": "here are the modules that you see with alum by the way and we can go ahead and",
    "start": "1362440",
    "end": "1367850"
  },
  {
    "text": "click on debug lid managed we can choose debug would manage tor debug would mixed if we also want to know the native",
    "start": "1367850",
    "end": "1374330"
  },
  {
    "text": "stacks but we're going to do debug okay",
    "start": "1374330",
    "end": "1379880"
  },
  {
    "text": "did I okay let's do this instead I think",
    "start": "1379880",
    "end": "1385340"
  },
  {
    "text": "I must have recompile or something so I'm going to open up the actual dumpster tweeter",
    "start": "1385340",
    "end": "1392230"
  },
  {
    "text": "because if you have everything lined up it will actually point you to the exact place where it failed so I think this is",
    "start": "1401790",
    "end": "1409470"
  },
  {
    "text": "super cool it also gives you like the stack it gives you the local variables",
    "start": "1409470",
    "end": "1415590"
  },
  {
    "text": "so you can go in and inspect them yes TAS if you were stopped at the breakpoint and this is even if the dump",
    "start": "1415590",
    "end": "1421290"
  },
  {
    "text": "was taken on another person's machine as long as you have the proper symbols that match up with a code so check the event",
    "start": "1421290",
    "end": "1436290"
  },
  {
    "text": "for your open we didn't do that and so if we would have checked the Event Viewer we would have actually seen this",
    "start": "1436290",
    "end": "1443630"
  },
  {
    "text": "which means that we wouldn't have had to debug at all but what's the fun in that",
    "start": "1443630",
    "end": "1448800"
  },
  {
    "text": "so don't check the Event Viewer and once you haven't checked the Event",
    "start": "1448800",
    "end": "1456090"
  },
  {
    "text": "Viewer then capture dump and crash and look at defaulting stacks let's go on to",
    "start": "1456090",
    "end": "1462510"
  },
  {
    "text": "performance issues so performance issues come in the form of like the app is not",
    "start": "1462510",
    "end": "1468750"
  },
  {
    "text": "responding or a request take too long if you have a request that takes too long it's very important before you start",
    "start": "1468750",
    "end": "1475020"
  },
  {
    "text": "troubleshooting that you actually figure out what the actual response time should be so you know when you're done with",
    "start": "1475020",
    "end": "1480690"
  },
  {
    "text": "your investigations and and then it can also be something like the CPU is going",
    "start": "1480690",
    "end": "1487500"
  },
  {
    "text": "haywire so you might notice in in task manager that the CPU is going bad and",
    "start": "1487500",
    "end": "1494300"
  },
  {
    "text": "again who did it well we have two kinds",
    "start": "1494300",
    "end": "1500040"
  },
  {
    "text": "of performance issues low CPU and high CPU so low CPU are when you're waiting",
    "start": "1500040",
    "end": "1506460"
  },
  {
    "text": "for an external resource like a database or a web server or something or if",
    "start": "1506460",
    "end": "1512760"
  },
  {
    "text": "you're in a deadlock and then high CPU is if you're in a busy or tight loop obviously and or if you manage to get",
    "start": "1512760",
    "end": "1520740"
  },
  {
    "text": "high CPU and GC so something that gets your high CPU and GC will be for example",
    "start": "1520740",
    "end": "1526230"
  },
  {
    "text": "allocating a lot of large objects because if you're allocating a lot of large objects you'll generate like so",
    "start": "1526230",
    "end": "1532710"
  },
  {
    "text": "you've trigger a full garbage collection every time you you create a large object so that means",
    "start": "1532710",
    "end": "1541020"
  },
  {
    "text": "that for example if your concatenate in large strings which are immutable so you create new strings all the time then",
    "start": "1541020",
    "end": "1547500"
  },
  {
    "text": "you'll get into a you'll easily get into a high CPU and GC issue and again how do",
    "start": "1547500",
    "end": "1554880"
  },
  {
    "text": "you how do you fix these will you determine if it's high or low CPU this is more to target your solve and kind of",
    "start": "1554880",
    "end": "1561390"
  },
  {
    "text": "have an idea of what you're looking for and then you capture one or more dumps",
    "start": "1561390",
    "end": "1566630"
  },
  {
    "text": "preferably more because then you can compare and see did we actually make in a progress between these like or are we",
    "start": "1566630",
    "end": "1573419"
  },
  {
    "text": "stuck in the same place or even if it's a high CPU issue you might want to see if if you're if you're stuck in like",
    "start": "1573419",
    "end": "1583620"
  },
  {
    "text": "similar places all the time so we're going to look at one of these and we'll",
    "start": "1583620",
    "end": "1591240"
  },
  {
    "text": "have this one so I'm going to click on this product and it takes about two",
    "start": "1591240",
    "end": "1597240"
  },
  {
    "text": "seconds for it to stop spinning or 2.8 seconds for it to stop spinning so I think that is a bit of an issue and I",
    "start": "1597240",
    "end": "1605340"
  },
  {
    "text": "want to find out what's going on so I'm going to use this thing called Mettling",
    "start": "1605340",
    "end": "1610860"
  },
  {
    "text": "which is something I found on github it's a load tester of sorts and like",
    "start": "1610860",
    "end": "1616860"
  },
  {
    "text": "basically spin sauce a number of threads and it makes a few requests so it's a",
    "start": "1616860",
    "end": "1623370"
  },
  {
    "text": "very cheap and easy load test Erb not very sophisticated but still it's",
    "start": "1623370",
    "end": "1630410"
  },
  {
    "text": "perfect for this so while we're doing that we're also going to look in task manager to see if it is a high or low",
    "start": "1630410",
    "end": "1637169"
  },
  {
    "text": "CPU issue and if you can't see this in the back then basically narrate it for",
    "start": "1637169",
    "end": "1642600"
  },
  {
    "text": "you so I'm going to run this and the CPU",
    "start": "1642600",
    "end": "1647610"
  },
  {
    "text": "here is somewhere between zero and two percent off we're looking at 2 W 3 WP",
    "start": "1647610",
    "end": "1654630"
  },
  {
    "text": "process so very low CPU issue so we're waiting on under an external process",
    "start": "1654630",
    "end": "1661110"
  },
  {
    "text": "probably so we're going to run that one more time",
    "start": "1661110",
    "end": "1666620"
  },
  {
    "text": "but this time we're going to grab a memory dump when this is happening and",
    "start": "1666620",
    "end": "1673510"
  },
  {
    "text": "we can open this up again we could have opened up on window BG but we're going to open it up is that in deep idea three",
    "start": "1673510",
    "end": "1683870"
  },
  {
    "text": "and run a crash hang analysis to see what I don't have more files to see",
    "start": "1683870",
    "end": "1690470"
  },
  {
    "text": "what's going on and this will now check for a few known",
    "start": "1690470",
    "end": "1698480"
  },
  {
    "text": "issues that didn't make high CPU issues and low CPU issues and then it will",
    "start": "1698480",
    "end": "1704330"
  },
  {
    "text": "report back and say that we have eight threads sitting in a wait so we're",
    "start": "1704330",
    "end": "1709550"
  },
  {
    "text": "waiting for something else to happen and then a few threads sitting in garbage",
    "start": "1709550",
    "end": "1714950"
  },
  {
    "text": "collection and then it gives us a whole lot of other useful stuff like it tells",
    "start": "1714950",
    "end": "1720740"
  },
  {
    "text": "us what the threats were that used up most of the CPUs so this was a CPU bound",
    "start": "1720740",
    "end": "1726830"
  },
  {
    "text": "issue you might be looking at what's on thread 20 in this case it's not so we",
    "start": "1726830",
    "end": "1733190"
  },
  {
    "text": "see it's been using a minimal amount of CPU but if it was this was where he would look for it and it tells us bit",
    "start": "1733190",
    "end": "1740330"
  },
  {
    "text": "about the threads and then it also gives us some information about the HTTP context so what it actually does here is",
    "start": "1740330",
    "end": "1747080"
  },
  {
    "text": "it is does a dumpy stat or a dumpy empty or like all the HTTP context and it then",
    "start": "1747080",
    "end": "1756110"
  },
  {
    "text": "prints it out print out some important information like how long is this man running and what is the URL and so on",
    "start": "1756110",
    "end": "1764059"
  },
  {
    "text": "and what thread is it running on so this seems like one of the culprits because",
    "start": "1764059",
    "end": "1770150"
  },
  {
    "text": "it's been running for two seconds still running and we want to look at thread 28",
    "start": "1770150",
    "end": "1775220"
  },
  {
    "text": "to see what's going on and here we get the call stack but we also get",
    "start": "1775220",
    "end": "1782210"
  },
  {
    "text": "information like eight threads are running the exact same stack which means that obviously that is an issue that we",
    "start": "1782210",
    "end": "1790970"
  },
  {
    "text": "need to investigate but here we get the calls back again and we see products",
    "start": "1790970",
    "end": "1796760"
  },
  {
    "text": "controller so we did slash product that calls into data service get all",
    "start": "1796760",
    "end": "1801769"
  },
  {
    "text": "products and that's reason sits in a wait so this time to go in and look at",
    "start": "1801769",
    "end": "1808249"
  },
  {
    "text": "the code in the mesquite or if we want to take it one step further we can go in",
    "start": "1808249",
    "end": "1813950"
  },
  {
    "text": "and open it in window BG so we grabbed",
    "start": "1813950",
    "end": "1821960"
  },
  {
    "text": "from here and again I can do managed or",
    "start": "1821960",
    "end": "1828889"
  },
  {
    "text": "mixed I'll do mix just for fun and but this time it doesn't stop it and show us",
    "start": "1828889",
    "end": "1836749"
  },
  {
    "text": "the code and the reason for this is because there was no active thread when this was taken because we didn't get it",
    "start": "1836749",
    "end": "1843379"
  },
  {
    "text": "on a crash so we didn't get it on something that actually triggered um we just took a dump as if so what we're",
    "start": "1843379",
    "end": "1850609"
  },
  {
    "text": "going to do then is because we're interested in looking at the stacks of all the threats so we'll go in in debug",
    "start": "1850609",
    "end": "1857239"
  },
  {
    "text": "windows and parallel stacks this is something that you can use even when you're normally debugging doesn't hurt",
    "start": "1857239",
    "end": "1864019"
  },
  {
    "text": "to be from a memory dump and and it will then tell us that eight threads are",
    "start": "1864019",
    "end": "1870979"
  },
  {
    "text": "sitting in this and get all product and sitting in a wait and if I actually",
    "start": "1870979",
    "end": "1876679"
  },
  {
    "text": "click on this it will take me exactly to the line that has the issue so very",
    "start": "1876679",
    "end": "1884419"
  },
  {
    "text": "powerful stuff right and some time so if",
    "start": "1884419",
    "end": "1893690"
  },
  {
    "text": "it will go back to this first so determine if it's a high or low CPU capture one or more dumps look at all",
    "start": "1893690",
    "end": "1900259"
  },
  {
    "text": "the threads and what they are doing and basically go from there but sometimes and you can't capture it closely enough",
    "start": "1900259",
    "end": "1910309"
  },
  {
    "text": "because it's such a small performance issue but if you can reap road and test in that case you can use profiling",
    "start": "1910309",
    "end": "1917659"
  },
  {
    "text": "instead so we're going to look at one of those issues and and it's going to be in",
    "start": "1917659",
    "end": "1924649"
  },
  {
    "text": "the precedent app again see I just want to make sure that it has shut this down",
    "start": "1924649",
    "end": "1931159"
  },
  {
    "text": "because otherwise I'm holding on to the symbols and so what we're going to do is we're",
    "start": "1931159",
    "end": "1937190"
  },
  {
    "text": "going to troubleshoot an issue that goes something like this when I click Next you see sometimes it kind of stops on",
    "start": "1937190",
    "end": "1944600"
  },
  {
    "text": "the leg and doesn't move forward for a little while so what if figure out what is causing that delays and the way to do this is to",
    "start": "1944600",
    "end": "1954740"
  },
  {
    "text": "go into the analyze performance profiler window in visual studio tests a lot of",
    "start": "1954740",
    "end": "1962570"
  },
  {
    "text": "different profilers and specifically for this issue we're going to use the",
    "start": "1962570",
    "end": "1968420"
  },
  {
    "text": "performance wizard so here we can actually go in and and like profiles",
    "start": "1968420",
    "end": "1974360"
  },
  {
    "text": "anything with an profiler running or installed app that we don't necessarily",
    "start": "1974360",
    "end": "1980300"
  },
  {
    "text": "need to own it but if we own it and have these symbols and source we're going to get a lot better results but we can put",
    "start": "1980300",
    "end": "1989180"
  },
  {
    "text": "a good profile a spin attached to here and you don't actually have to launch them from here so we're going to start",
    "start": "1989180",
    "end": "1995720"
  },
  {
    "text": "up and you get a few options for how you want a profile in this case we have a",
    "start": "1995720",
    "end": "2002470"
  },
  {
    "text": "low CPU profiler a low CPU performance issue and but you have CPU sampling or",
    "start": "2002470",
    "end": "2010870"
  },
  {
    "text": "instrumentation for performance issues so CPU sampling what it does is it goes",
    "start": "2010870",
    "end": "2017200"
  },
  {
    "text": "in from time to time and slices and to see what's on the stack what's on the stack what's on the stack with some",
    "start": "2017200",
    "end": "2022570"
  },
  {
    "text": "stack and based on that it determines how much time you're spending on the CPU the instrumentation one injects like a",
    "start": "2022570",
    "end": "2031450"
  },
  {
    "text": "call before like every time you make a call it injects marker you called it you exited you called it",
    "start": "2031450",
    "end": "2037210"
  },
  {
    "text": "you exited and that way we can get what we called elapsed time so not CPU time but the actual clock time of the of",
    "start": "2037210",
    "end": "2045660"
  },
  {
    "text": "what's going on so we're going to run this and and once it launches or we'll",
    "start": "2045660",
    "end": "2054700"
  },
  {
    "text": "just reproduce the issue a little bit and then we're going to start profiling",
    "start": "2054700",
    "end": "2060370"
  },
  {
    "text": "I profile this a number of times you see",
    "start": "2060370",
    "end": "2065590"
  },
  {
    "text": "and then it tells us something to do what what did things be the problem is",
    "start": "2065590",
    "end": "2073060"
  },
  {
    "text": "so let me see because it looks a little bit different than it used to it gives",
    "start": "2073060",
    "end": "2079330"
  },
  {
    "text": "me a bit more information than I actually wanted to let's go in and look",
    "start": "2079330",
    "end": "2085750"
  },
  {
    "text": "at this in a way so we spend most of our time in with many pretty much all of our",
    "start": "2085750",
    "end": "2091750"
  },
  {
    "text": "time in Maine because that's obviously used to running the passes and out of",
    "start": "2091750",
    "end": "2097060"
  },
  {
    "text": "that we spend 57% can you see this in the back a little bit yeah 57% we spend",
    "start": "2097060",
    "end": "2105190"
  },
  {
    "text": "in next button click and that's actually the time we're interested in because that's where the issue happens out of",
    "start": "2105190",
    "end": "2112600"
  },
  {
    "text": "that time pretty much all of that like all 57 something is in this go to",
    "start": "2112600",
    "end": "2118300"
  },
  {
    "text": "another function you can see how my code down here actually follows the law and",
    "start": "2118300",
    "end": "2123400"
  },
  {
    "text": "when I click on that out of that we spend most of our time in this Sutter",
    "start": "2123400",
    "end": "2128440"
  },
  {
    "text": "for this property and in the race property changed and Indian bulk and",
    "start": "2128440",
    "end": "2134380"
  },
  {
    "text": "then we come into something that looks a little bit weird but if you're doing WPF",
    "start": "2134380",
    "end": "2139780"
  },
  {
    "text": "for uwp you know that it's like it's a value converter so you have something in the view model and then you want to",
    "start": "2139780",
    "end": "2145870"
  },
  {
    "text": "display it in sam'l to use a converter so in this case it was I took the",
    "start": "2145870",
    "end": "2151000"
  },
  {
    "text": "president's party and converted it to a color display and then most of that time",
    "start": "2151000",
    "end": "2156940"
  },
  {
    "text": "was spent in get color and then most of the time was spent in a wait so most of",
    "start": "2156940",
    "end": "2163150"
  },
  {
    "text": "the time was spent here and now we've been able to narrow down and find out the exact sources of this performance",
    "start": "2163150",
    "end": "2170410"
  },
  {
    "text": "issue in just a matter of minute so use",
    "start": "2170410",
    "end": "2177970"
  },
  {
    "text": "profiling is you if you have issues that you don't feel like that are large",
    "start": "2177970",
    "end": "2183730"
  },
  {
    "text": "enough for you to actually go in and do a minute and do a dump on okay so the",
    "start": "2183730",
    "end": "2192610"
  },
  {
    "text": "last type of issue memory leaks",
    "start": "2192610",
    "end": "2197040"
  },
  {
    "text": "same thing in there you can might see out of memory exceptions slow response times due to GC activity if you have a",
    "start": "2197869",
    "end": "2206089"
  },
  {
    "text": "lot of allocations and such and you might also see something like the memory",
    "start": "2206089",
    "end": "2212099"
  },
  {
    "text": "increase in task manager that's usually the and the most common reason that you",
    "start": "2212099",
    "end": "2219480"
  },
  {
    "text": "go in and try to troubleshoot a definite memory leak so you might think that",
    "start": "2219480",
    "end": "2226819"
  },
  {
    "text": "since we're running with a garbage collector like the memory should automatically be garbage collected and",
    "start": "2226819",
    "end": "2232170"
  },
  {
    "text": "that is true except for it will only garbage collect whatever you tell it to",
    "start": "2232170",
    "end": "2238380"
  },
  {
    "text": "garbage collect or rather whatever you don't tell it to not garbage collect so a few things that it won't garbage",
    "start": "2238380",
    "end": "2244980"
  },
  {
    "text": "collect obviously is things that are in cache or session state if you told it to cache it or if you told it to keep it in",
    "start": "2244980",
    "end": "2251250"
  },
  {
    "text": "session state it doesn't doesn't collect it until it's it's supposed to go out there or if you have a static or pinned",
    "start": "2251250",
    "end": "2258710"
  },
  {
    "text": "object or if you block your finalizer and you could also have issues like",
    "start": "2258710",
    "end": "2264799"
  },
  {
    "text": "assembly leaks so some constructs and does not like a regular expression for",
    "start": "2264799",
    "end": "2270750"
  },
  {
    "text": "the XML serializable use anymore but",
    "start": "2270750",
    "end": "2276140"
  },
  {
    "text": "those will generate dynamic assemblies and so be careful and look at we have",
    "start": "2276140",
    "end": "2284039"
  },
  {
    "text": "like what LM you'll see if you have a lot of assemblies in there and then it",
    "start": "2284039",
    "end": "2289440"
  },
  {
    "text": "might be a native leak and in that case you want to do leak tracking with debug",
    "start": "2289440",
    "end": "2294750"
  },
  {
    "text": "tags but again pretty simple three-step process you can capture mini domes",
    "start": "2294750",
    "end": "2301950"
  },
  {
    "text": "capture multiple dumps and the reason why I want to capture multiple dumps is because then you have a better chance of",
    "start": "2301950",
    "end": "2308579"
  },
  {
    "text": "comparing two dumps and seeing what it is that you leaked people so one for example when when you start the process",
    "start": "2308579",
    "end": "2316109"
  },
  {
    "text": "one when you leaked a little bit and one when you leaked a little bit more and then you compare with dump heap stat for",
    "start": "2316109",
    "end": "2323220"
  },
  {
    "text": "example to see what objects you're leaking so basically what where the",
    "start": "2323220",
    "end": "2328890"
  },
  {
    "text": "number is growing the most and then you use GC root to figure out why they are still around so again a",
    "start": "2328890",
    "end": "2335280"
  },
  {
    "text": "fairly simple process enough for native leaks use leak tracking in debug so in",
    "start": "2335280",
    "end": "2343320"
  },
  {
    "text": "this case I'm actually going to go in first with window or nothing with window cute would Visual Studio and I'm",
    "start": "2343320",
    "end": "2351780"
  },
  {
    "text": "going to open up a memory leak dumpster-dive generating form it's one",
    "start": "2351780",
    "end": "2358020"
  },
  {
    "text": "point four gigs of addressable memories of probably around seven or eight",
    "start": "2358020",
    "end": "2363180"
  },
  {
    "text": "hundred Meg's of actual memory just using so I'm going to open that up and",
    "start": "2363180",
    "end": "2369320"
  },
  {
    "text": "there is an option here to debug a managed memory so what this will do is",
    "start": "2369320",
    "end": "2375150"
  },
  {
    "text": "it will take a look at the memory dump and it will look at all the objects enumerate them would dump it start and",
    "start": "2375150",
    "end": "2381800"
  },
  {
    "text": "well equivalents and then it will look at all the routes it will look at all the statics all the pins or the threads",
    "start": "2381800",
    "end": "2389060"
  },
  {
    "text": "anything that could be holding on to an object and it will generate graphs for",
    "start": "2389060",
    "end": "2394560"
  },
  {
    "text": "for those this is actually something that you can do when you're step-by-step",
    "start": "2394560",
    "end": "2400590"
  },
  {
    "text": "debugging too if you're opening at the DIA in Diagnostics window in the visual studio there is a take snapshot and you",
    "start": "2400590",
    "end": "2407340"
  },
  {
    "text": "can take a snapshot of the manage teeth and you can look at the heap like this",
    "start": "2407340",
    "end": "2412880"
  },
  {
    "text": "so I'm actually going to go ahead and insert a mother memory dump that is my",
    "start": "2412880",
    "end": "2419730"
  },
  {
    "text": "base memory dump so this was the one that was taken before the memory leak",
    "start": "2419730",
    "end": "2425160"
  },
  {
    "text": "occurred and then I can go in here and I can sort by inclusive size so this is by",
    "start": "2425160",
    "end": "2433860"
  },
  {
    "text": "taking off size for the size including all the sub object and say okay so it",
    "start": "2433860",
    "end": "2441000"
  },
  {
    "text": "seems like this news controller so when",
    "start": "2441000",
    "end": "2446820"
  },
  {
    "text": "someone went to slash News we're leaking 31,000 of those and that's",
    "start": "2446820",
    "end": "2453360"
  },
  {
    "text": "taking out a total of like 368 Meg's of memory so that's definitely an",
    "start": "2453360",
    "end": "2459000"
  },
  {
    "text": "interesting character and we can also see that we're leaking like a similar amount of HTTP context",
    "start": "2459000",
    "end": "2465900"
  },
  {
    "text": "the response or request so probably what's going to happen this will sticks to one leak we're going to fix the other",
    "start": "2465900",
    "end": "2472380"
  },
  {
    "text": "ones too because they they're kind of members of one another so to speak so",
    "start": "2472380",
    "end": "2478170"
  },
  {
    "text": "then the visual studio will give us this neat little thing which is GC root the visual version and that tells us that",
    "start": "2478170",
    "end": "2485759"
  },
  {
    "text": "this news controller like 31,000 of them is held in like this view data recovery",
    "start": "2485759",
    "end": "2492720"
  },
  {
    "text": "I don't know what that is but this thing I do recognize like a cache item removed callback so what this is is like by now",
    "start": "2492720",
    "end": "2502859"
  },
  {
    "text": "you start like googling okay cache item remove callback if you don't recognize what that is and you'll figure out",
    "start": "2502859",
    "end": "2509509"
  },
  {
    "text": "what's going on but what is happening right here is this and I'm cashing",
    "start": "2509509",
    "end": "2519329"
  },
  {
    "text": "something and then I'm saying when the cache is removed like when this item is",
    "start": "2519329",
    "end": "2525809"
  },
  {
    "text": "removed from cache go ahead and call this function because I want to clean up some stuff and this function belongs to",
    "start": "2525809",
    "end": "2533309"
  },
  {
    "text": "the news controller and since we're using an instance function rather than a static function this news controller has",
    "start": "2533309",
    "end": "2540119"
  },
  {
    "text": "to be around as long as that other object is cached which is why we're",
    "start": "2540119",
    "end": "2545309"
  },
  {
    "text": "leaking in the news controller so the answer here would be to use a static function but what I really wanted to",
    "start": "2545309",
    "end": "2551880"
  },
  {
    "text": "show is like how you find the route the routes are kind of irrelevant because",
    "start": "2551880",
    "end": "2558329"
  },
  {
    "text": "the the issue will always look the same independently of what the routes are you",
    "start": "2558329",
    "end": "2564539"
  },
  {
    "text": "can also go in and troubleshoot this in and debug DAGs",
    "start": "2564539",
    "end": "2569910"
  },
  {
    "text": "and we'll go ahead and see them Adams",
    "start": "2569910",
    "end": "2575869"
  },
  {
    "text": "and the league too sometimes you might want just a little bit more information",
    "start": "2575869",
    "end": "2582539"
  },
  {
    "text": "than you don't done you don't remember all the commands and everything so in",
    "start": "2582539",
    "end": "2589589"
  },
  {
    "text": "that case I always run with debug dag yes because in he forgot something then debugged I've",
    "start": "2589589",
    "end": "2596380"
  },
  {
    "text": "usually always picked something new up that I can use as a clue it takes a",
    "start": "2596380",
    "end": "2604690"
  },
  {
    "text": "little bit longer for Dubai dagger to troubleshoot one of these because it was so big and I have to click this for",
    "start": "2604690",
    "end": "2615269"
  },
  {
    "text": "number of times okay so it has different",
    "start": "2615269",
    "end": "2624039"
  },
  {
    "text": "things that it displays and the like hang and crash analysis case versus the",
    "start": "2624039",
    "end": "2629880"
  },
  {
    "text": "memory case so in a memory case it will tell us how many things are ready for finalization if you have a lot of these",
    "start": "2629880",
    "end": "2637029"
  },
  {
    "text": "you might oblige finalizar but it gives you like a whole set of links to what is",
    "start": "2637029",
    "end": "2643569"
  },
  {
    "text": "this issue about like how should I be troubleshooting this most of these links happen to go to my blog but but mainly",
    "start": "2643569",
    "end": "2650559"
  },
  {
    "text": "because I wrote this script and there can be useful information anyways and",
    "start": "2650559",
    "end": "2658509"
  },
  {
    "text": "then we have information about how big the darknet heap was in case you missed",
    "start": "2658509",
    "end": "2664779"
  },
  {
    "text": "that and it does a few other things like display the AH beeps like the dump path",
    "start": "2664779",
    "end": "2671109"
  },
  {
    "text": "dumpee results in a more visual way and it also color Rises you might not be",
    "start": "2671109",
    "end": "2678430"
  },
  {
    "text": "able to see this in the back but this news controller is actually purple and that's because it found that to be a",
    "start": "2678430",
    "end": "2684670"
  },
  {
    "text": "custom object so something that's not in system web or in some Microsoft",
    "start": "2684670",
    "end": "2690779"
  },
  {
    "text": "namespace so that sees there to visually tell you that this might be something",
    "start": "2690779",
    "end": "2696190"
  },
  {
    "text": "that you're looking for because it's not common that custom objects show up this",
    "start": "2696190",
    "end": "2702640"
  },
  {
    "text": "high in stack or high in the heap and then shows you the finalizer in this",
    "start": "2702640",
    "end": "2708009"
  },
  {
    "text": "case the finalizer is not blocked as he's waiting for a finalizer event and it will also display like everything",
    "start": "2708009",
    "end": "2715180"
  },
  {
    "text": "that's in cache so in this case we can see that we start a whole lot in cache which is also partly a memory leak but",
    "start": "2715180",
    "end": "2724299"
  },
  {
    "text": "it gives a lot of useful information and all of the debug DAGs grapes have like a table of contents",
    "start": "2724299",
    "end": "2729950"
  },
  {
    "text": "like like this you can switch back and forth so um let's see here so capture",
    "start": "2729950",
    "end": "2740660"
  },
  {
    "text": "multiple Dom's compare to see what they're leaking and find out why the objects are still around so with all of",
    "start": "2740660",
    "end": "2747410"
  },
  {
    "text": "these three issues you see and we can do this and windbg if we want to really fine grained control and want to damp",
    "start": "2747410",
    "end": "2753410"
  },
  {
    "text": "out individual objects or we can do this in debug diag if we want a quickly see",
    "start": "2753410",
    "end": "2758450"
  },
  {
    "text": "what do you think it is and in 80% of the cases it will be fine and if we have",
    "start": "2758450",
    "end": "2763880"
  },
  {
    "text": "symbols and everything we can go the in the route of visual studio even with the heat thing you don't actually have to",
    "start": "2763880",
    "end": "2770450"
  },
  {
    "text": "have any symbols and anything to for the heat thing to work and so I'm going to",
    "start": "2770450",
    "end": "2779480"
  },
  {
    "text": "see and so once you've started doing this for a long time then you start",
    "start": "2779480",
    "end": "2787190"
  },
  {
    "text": "getting into wanting to actually automate things and you start doing this",
    "start": "2787190",
    "end": "2792560"
  },
  {
    "text": "pretty fast if you start doing a lot of dump debugging and specifically if you try to recognize the same issue over and",
    "start": "2792560",
    "end": "2798980"
  },
  {
    "text": "over and over so I just wanted to tell you about something that I must come out",
    "start": "2798980",
    "end": "2805250"
  },
  {
    "text": "recently that's pretty cool and that's something else CLR MD and so this is the",
    "start": "2805250",
    "end": "2811580"
  },
  {
    "text": "there's a nougat package that you can download it's still in like an unstable version or whatever school it's like if",
    "start": "2811580",
    "end": "2819380"
  },
  {
    "text": "you got a new guess you have to don't only install the stable do so but you",
    "start": "2819380",
    "end": "2827660"
  },
  {
    "text": "can download this and then you can do things like this and so you can either",
    "start": "2827660",
    "end": "2833390"
  },
  {
    "text": "load up a crash dump in your process so you can reiterate over X amount of dumps",
    "start": "2833390",
    "end": "2840350"
  },
  {
    "text": "that you have stored in like some dump container and or you can attach to",
    "start": "2840350",
    "end": "2845390"
  },
  {
    "text": "another process if you want to you can attach live clip process and you load up",
    "start": "2845390",
    "end": "2850520"
  },
  {
    "text": "symbols the symbols is essentially what translates from addresses to functioning",
    "start": "2850520",
    "end": "2856700"
  },
  {
    "text": "and msel with Microsoft comm it's not misspelled supposed to be an owl",
    "start": "2856700",
    "end": "2861839"
  },
  {
    "text": "and slash download slash symbols is where you get all the Microsoft symbols from and then you create a runtime and",
    "start": "2861839",
    "end": "2870479"
  },
  {
    "text": "from here you can get to things like how many heaps did we have how many threads did we have and that kind of stuff or",
    "start": "2870479",
    "end": "2877319"
  },
  {
    "text": "you can go in and iterate over all the threads and find out what's there an",
    "start": "2877319",
    "end": "2883799"
  },
  {
    "text": "exception on the thread and if there was an exception I print out the thread name",
    "start": "2883799",
    "end": "2888869"
  },
  {
    "text": "number and print out the exception message name and then print out like all",
    "start": "2888869",
    "end": "2895769"
  },
  {
    "text": "the stacks or you could do something like enumerate all the objects under heat and use dump out your specific",
    "start": "2895769",
    "end": "2902609"
  },
  {
    "text": "configuration object that might have some important information that you want",
    "start": "2902609",
    "end": "2907619"
  },
  {
    "text": "to know if this customer had this configuration sector or not and in that case you can do that so there's lots of",
    "start": "2907619",
    "end": "2914339"
  },
  {
    "text": "stuff that you can do with these that are not necessarily even dumped debugging but it's finding out quick",
    "start": "2914339",
    "end": "2919440"
  },
  {
    "text": "information to know it's a issue that you're troubleshooting has certain criteria so it looks like this I hope",
    "start": "2919440",
    "end": "2934979"
  },
  {
    "text": "this will work now because I always saw these symbols were kind of off but let's",
    "start": "2934979",
    "end": "2940619"
  },
  {
    "text": "do this okay so yes in this case I just brought up that first dump that we're",
    "start": "2940619",
    "end": "2947039"
  },
  {
    "text": "looking at spawn that one thread had a argument at the range exception and this",
    "start": "2947039",
    "end": "2952289"
  },
  {
    "text": "is the stack for it so pretty pretty easy to use and you can do anything that",
    "start": "2952289",
    "end": "2959130"
  },
  {
    "text": "you can do pretty much in when the BG that I showed earlier you can do would see it RMD too so with that I'm going to",
    "start": "2959130",
    "end": "2970710"
  },
  {
    "text": "leave like left minute for questions and then I'll be up out here to add words",
    "start": "2970710",
    "end": "2977599"
  },
  {
    "text": "yes is it possible to use on a strike wood",
    "start": "2977599",
    "end": "2984840"
  },
  {
    "text": "core CLR no because it's not luxurious and sometimes dry compile wood core",
    "start": "2984840",
    "end": "2991440"
  },
  {
    "text": "sealer but I was talking to and I'm not sure if Sasha is here today but I was talking to Sasha who's and doing a lot",
    "start": "2991440",
    "end": "2998370"
  },
  {
    "text": "of stuff with the CLR MD for example and he was saying that a lot of people have come recompiled SOS and then you can use",
    "start": "2998370",
    "end": "3009290"
  },
  {
    "text": "it with course healers in that case it would have to recompile it yourself but there is no compiled version that comes",
    "start": "3009290",
    "end": "3015110"
  },
  {
    "text": "with a CR quite yet so the other",
    "start": "3015110",
    "end": "3025700"
  },
  {
    "text": "question is is Microsoft doing some tools like windbg for Linux and the",
    "start": "3025700",
    "end": "3031070"
  },
  {
    "text": "answer is I don't know but again sasha was talking about that too because he's been doing a lot on debugging with the",
    "start": "3031070",
    "end": "3037610"
  },
  {
    "text": "corset and he was saying that you can get some debugging working like that but",
    "start": "3037610",
    "end": "3043850"
  },
  {
    "text": "you have to kind of compile everything yourself which is like back to the old Linux basement so sorry about that",
    "start": "3043850",
    "end": "3050270"
  },
  {
    "text": "answer but yes so can I recommend any",
    "start": "3050270",
    "end": "3059810"
  },
  {
    "text": "good resources for learning this stuff yes my blog so and I say that I'm kind",
    "start": "3059810",
    "end": "3070820"
  },
  {
    "text": "of but I'm one of the few people who have actually delved into writing a lot",
    "start": "3070820",
    "end": "3076520"
  },
  {
    "text": "of stuff about this so it's blog stuff msdn.microsoft.com slash tests you search for my name or go",
    "start": "3076520",
    "end": "3083630"
  },
  {
    "text": "to my Twitter handle and there is a link to the blog or if you debug in a thing with debug diag",
    "start": "3083630",
    "end": "3089030"
  },
  {
    "text": "you'll get to my blog and I have a lot of debug labs they're pretty old by this",
    "start": "3089030",
    "end": "3095450"
  },
  {
    "text": "stage but this will work and they still show how you do things so they have labs",
    "start": "3095450",
    "end": "3100880"
  },
  {
    "text": "for pretty much all of these issues and I'm going to be updating and putting this plus the demo so I'm going to be",
    "start": "3100880",
    "end": "3107840"
  },
  {
    "text": "using I'm going to write a blog after this and put this on there so thank you for that",
    "start": "3107840",
    "end": "3114060"
  },
  {
    "text": "question that was perfect and is there a",
    "start": "3114060",
    "end": "3122310"
  },
  {
    "text": "way to automate a d-bag diet analysis thing from the command line I do not",
    "start": "3122310",
    "end": "3130680"
  },
  {
    "text": "know but if you find I'm going to give you a name Wade musk yeah that MAF CIA",
    "start": "3130680",
    "end": "3139230"
  },
  {
    "text": "and he's on the internet and he is one",
    "start": "3139230",
    "end": "3144540"
  },
  {
    "text": "who has actually maintained named d-bag dag right now and he was the one who actually worked from beginning he would",
    "start": "3144540",
    "end": "3149940"
  },
  {
    "text": "know definitely for sure and if he is it's not if there isn't a way because I haven't used it like that",
    "start": "3149940",
    "end": "3156150"
  },
  {
    "text": "I've added cdb and stuff like that but not do you back diagur self but if there",
    "start": "3156150",
    "end": "3162330"
  },
  {
    "text": "isn't a way he might be interested in making sure there's a ways okay thank",
    "start": "3162330",
    "end": "3168720"
  },
  {
    "text": "you guys [Applause]",
    "start": "3168720",
    "end": "3173099"
  }
]