[
  {
    "start": "0",
    "end": "125000"
  },
  {
    "text": "thank you all right thanks everyone uh this is 13 ways of looking at a turtle",
    "start": "6240",
    "end": "12719"
  },
  {
    "text": "and um I'm Scott bosan um this is uh a",
    "start": "12719",
    "end": "18199"
  },
  {
    "text": "bit of a crazy talk actually um rather than doing a deep dive into one topic",
    "start": "18199",
    "end": "23800"
  },
  {
    "text": "I'm going to do 13 very very shallow Dives in uh using the same uh model",
    "start": "23800",
    "end": "30119"
  },
  {
    "text": "which is turtles so this is um we're going to do partial application most of",
    "start": "30119",
    "end": "35920"
  },
  {
    "text": "these techniques will be sort of functional techniques so we talk about partial application uh functional error",
    "start": "35920",
    "end": "41200"
  },
  {
    "text": "handling State Mo ad actor model event sourcing dependency injection",
    "start": "41200",
    "end": "47039"
  },
  {
    "text": "interpreter capability based design so 13 different Turtle designs uh that",
    "start": "47039",
    "end": "52920"
  },
  {
    "text": "we're going to look at and I'm already out of time because uh we have an hour to do this and it's about 4 minutes per",
    "start": "52920",
    "end": "59559"
  },
  {
    "text": "topic so that's this is how I feel right now it's crazy um if you like these kind of",
    "start": "59559",
    "end": "66240"
  },
  {
    "text": "crazy talks why we do a lot of things in one hour I have another talk on functional programming patterns also",
    "start": "66240",
    "end": "73000"
  },
  {
    "text": "very fast and uh crazy so I'm going to be using f for the code examples but this is actually a concept talk and uh",
    "start": "73000",
    "end": "80439"
  },
  {
    "text": "these Concepts will work in pretty much any programming language so if you're not familiar with Turtle Graphics you",
    "start": "80439",
    "end": "87200"
  },
  {
    "text": "have a turtle and it moves and then then it changes Direction and it moves and",
    "start": "87200",
    "end": "93000"
  },
  {
    "text": "then it changes Direction and it moves so that is it and there's a pen which draws lines and the pen can be up or",
    "start": "93000",
    "end": "99479"
  },
  {
    "text": "down so it's a really really simple model how many different ways how complicated can we make this very simple",
    "start": "99479",
    "end": "105399"
  },
  {
    "text": "model we're going to make it really complicated because that's what we like to do so here's our API uh there's four",
    "start": "105399",
    "end": "111360"
  },
  {
    "text": "different operations moving a distance turning an angle moving the putting the",
    "start": "111360",
    "end": "116479"
  },
  {
    "text": "pen up and putting the pen down so that's our four operations which we will Implement in many many many different",
    "start": "116479",
    "end": "123759"
  },
  {
    "text": "ways so let's start with the object oriented Turtle the O Turtle which is",
    "start": "123759",
    "end": "129399"
  },
  {
    "start": "125000",
    "end": "125000"
  },
  {
    "text": "also called a tutle so this is a uh how a turtle Works in an oo style we have",
    "start": "129399",
    "end": "136239"
  },
  {
    "text": "some sort of client that wants to run the turtle talk to the turtle and we have a turtle class and the turtle class",
    "start": "136239",
    "end": "142400"
  },
  {
    "text": "is encapsulated uh and so the client does not know anything about the internal",
    "start": "142400",
    "end": "147640"
  },
  {
    "text": "states of the class so that this is classic oo encapsulated mutable state so",
    "start": "147640",
    "end": "153239"
  },
  {
    "text": "the client calls the Turtle says or it actually sends it a message in true o send a message here you go can you",
    "start": "153239",
    "end": "158879"
  },
  {
    "text": "please move here can you please move here and I don't get any response back uh I just say okay it just did it and",
    "start": "158879",
    "end": "166319"
  },
  {
    "text": "the internal state of the turtle is not accessible to me so let's look at the code this is the",
    "start": "166319",
    "end": "171920"
  },
  {
    "text": "F version of object oriented code I have a turtle class and there are three different fields in the class and in F",
    "start": "171920",
    "end": "179920"
  },
  {
    "text": "up uh mutability is something you have to ask for everything is immutable by default so you have to use a special",
    "start": "179920",
    "end": "186239"
  },
  {
    "text": "mutable keyword if you want to modify the fields and the other thing I should point out is I'm using uh a nice F",
    "start": "186239",
    "end": "193120"
  },
  {
    "text": "feature called uh units of measure so I saying here that the angle is measured in degrees uh rather than radians so",
    "start": "193120",
    "end": "201799"
  },
  {
    "text": "this is a uh a nice documentation thing and it's also a nice type safe thing so I can't mix up degrees and radians",
    "start": "201799",
    "end": "208280"
  },
  {
    "text": "accidentally in my code right so let's look at a method uh",
    "start": "208280",
    "end": "213360"
  },
  {
    "text": "here's the move method in F style I'm going to just log that I moved uh I'm",
    "start": "213360",
    "end": "218680"
  },
  {
    "text": "going to keep track of the current position I'm going to calculate a new position using some logic that I don't",
    "start": "218680",
    "end": "223760"
  },
  {
    "text": "care about uh and then I'm going to draw a line if the pen is down I will draw a line on the",
    "start": "223760",
    "end": "230239"
  },
  {
    "text": "canvas and then I will update the states I will update the current position to be the new end position and um we have a",
    "start": "230239",
    "end": "236879"
  },
  {
    "text": "dependency on the logger and we have a dependency on the canvas um so I will",
    "start": "236879",
    "end": "242200"
  },
  {
    "text": "talk about later on I'll talk about how to get rid of those dependencies but for now we just hardcode there is a canvas and there is a loger this backward arrow",
    "start": "242200",
    "end": "250200"
  },
  {
    "text": "is F's version of assignment um it doesn't it's not using equal it uses a backwards arrow for assignment because",
    "start": "250200",
    "end": "256359"
  },
  {
    "text": "most things rarely use assignments so let's look at the turn method again I'm",
    "start": "256359",
    "end": "262759"
  },
  {
    "text": "just going to log it I'm going to calculate the new angle using some sort of formula and then I'm going to update",
    "start": "262759",
    "end": "268400"
  },
  {
    "text": "the angle now I'm not actually going to move move the turtle I just like I'm just rotating the turtle to point in a different",
    "start": "268400",
    "end": "273759"
  },
  {
    "text": "direction and to uh change the pen State I just update the pen State up and down",
    "start": "273759",
    "end": "279759"
  },
  {
    "text": "depending so those methods are really really simple right now how do I call",
    "start": "279759",
    "end": "285160"
  },
  {
    "text": "this turtle from as a as a user of this Turtle so let's say I want to draw a",
    "start": "285160",
    "end": "290199"
  },
  {
    "text": "triangle well I'd say Okay create a turtle construct a turtle and then ask the turtle to move a certain distance",
    "start": "290199",
    "end": "296560"
  },
  {
    "text": "and then ask the turtle to turn and move and turn and move move and turn and at this point the turtle should be back",
    "start": "296560",
    "end": "302759"
  },
  {
    "text": "home again and I should have drawn a turtle I should have drawn a triangle",
    "start": "302759",
    "end": "307880"
  },
  {
    "text": "onto the canvas so let me actually demonstrate that this is a real thing so",
    "start": "307880",
    "end": "315680"
  },
  {
    "text": "I have a uh L Turtle right here just going to load it up and I'm using F",
    "start": "315680",
    "end": "322280"
  },
  {
    "text": "interactive which is nice you can kind interactively play with f shop code um so here's my canvas I'm going to open up",
    "start": "322280",
    "end": "329199"
  },
  {
    "text": "a canvas with a little bit of luck all right my",
    "start": "329199",
    "end": "334919"
  },
  {
    "text": "my loom is a bit slow here you go right I'm going to create a turtle going to",
    "start": "334919",
    "end": "340120"
  },
  {
    "text": "move a certain distance turn an angle move a distance maybe move",
    "start": "340120",
    "end": "346400"
  },
  {
    "text": "again uh move another angle move move move and so on and so",
    "start": "346400",
    "end": "352360"
  },
  {
    "text": "forth so here is the triangle logic that I just showed you so I can clear the canvas",
    "start": "352360",
    "end": "360160"
  },
  {
    "text": "dra a triangle and here's the polygon logic and I can draw a polygon and I can",
    "start": "360160",
    "end": "369319"
  },
  {
    "text": "draw Pentagon and hexagon and so on so there you go that's very simple this",
    "start": "369319",
    "end": "374800"
  },
  {
    "text": "logic very looks very object oriented you probably have seen this kind of code milons of times before um but there you",
    "start": "374800",
    "end": "381560"
  },
  {
    "text": "go object oriented Turtle not much to say about it really so what are the pros and cons of",
    "start": "381560",
    "end": "388120"
  },
  {
    "text": "an object oriented turtle well the advantag is is it's really familiar uh everyone nowadays everyone",
    "start": "388120",
    "end": "395639"
  },
  {
    "text": "understands object oriented programming so it's sort of nothing special the downside is that it's a stateful system",
    "start": "395639",
    "end": "403639"
  },
  {
    "text": "it mutates State inside and it's a black box which is sort of deliberate I mean it's meant to encapsulate the state it's",
    "start": "403639",
    "end": "409280"
  },
  {
    "text": "not supposed to expose the states to the outside world but that doesn't mean it's hard to test because I can't really",
    "start": "409280",
    "end": "414599"
  },
  {
    "text": "directly poke inside the turtle and change it State I have to like ask it to do a bunch of things if I want to move",
    "start": "414599",
    "end": "420479"
  },
  {
    "text": "it to the corner in order to test it I have to send it a bunch of messages I can't just like say start off in the",
    "start": "420479",
    "end": "425919"
  },
  {
    "text": "corner depending on how well the API is designed but in general it's hard to test mutation code is",
    "start": "425919",
    "end": "432599"
  },
  {
    "text": "mutation and it's hard to compose it's hard to make two turtles you know do",
    "start": "432599",
    "end": "437960"
  },
  {
    "text": "stuff at the same time I'd have to create a special double Turtle class and and proxy the methods or something not",
    "start": "437960",
    "end": "443680"
  },
  {
    "text": "so easy um and right now we've got these hardcoded dependencies on the logger and",
    "start": "443680",
    "end": "448800"
  },
  {
    "text": "the canvas and later on I'll talk about how to do dependency injection in the O",
    "start": "448800",
    "end": "454080"
  },
  {
    "text": "style and then also in a functional style right so that is the object oriented Turtle I have a little bell",
    "start": "454080",
    "end": "460400"
  },
  {
    "start": "458000",
    "end": "458000"
  },
  {
    "text": "which I'm going to Ring to show that I'm in a hurry like service please next up",
    "start": "460400",
    "end": "465759"
  },
  {
    "text": "okay next is abstract data Turtle so abstract data turtle is where the data",
    "start": "465759",
    "end": "471440"
  },
  {
    "text": "is separated from the behavior so we have a data structure which is very much like the turtle one um everything is",
    "start": "471440",
    "end": "478639"
  },
  {
    "text": "still mutable but this is private so the idea is that nobody else can can touch",
    "start": "478639",
    "end": "484919"
  },
  {
    "text": "this data and and get it wrong the only people who can touch this data is the turtle functions which we",
    "start": "484919",
    "end": "492159"
  },
  {
    "text": "provide so we have a bunch of turtle functions and these total functions are very much like the object oriented ones",
    "start": "492159",
    "end": "499479"
  },
  {
    "text": "except these are sort of static methods as it were and I have to pass the state in as a parameter each time so when I",
    "start": "499479",
    "end": "506400"
  },
  {
    "text": "move I pass in the state and the state will get updated it will be mutated to",
    "start": "506400",
    "end": "512000"
  },
  {
    "text": "the new thing um so it's very similar to object ored but it's it's not it's a",
    "start": "512000",
    "end": "517880"
  },
  {
    "text": "abstract data total so um this thing of passing in the the current state as the",
    "start": "517880",
    "end": "523919"
  },
  {
    "text": "first parameter to a function is actually has kind of uh you can see this in languages like python where you pass",
    "start": "523919",
    "end": "530440"
  },
  {
    "text": "a self parameter in that's pretty much how a lot of languages did it before object oriented sort of took off and and",
    "start": "530440",
    "end": "536360"
  },
  {
    "text": "python was not originally an object-oriented language so um it's kind of interesting how that works right uh",
    "start": "536360",
    "end": "543000"
  },
  {
    "text": "to use it again if I want to draw a triangle very similar code I construct a turtle and I keep passing the state in",
    "start": "543000",
    "end": "549920"
  },
  {
    "text": "to every single function and at the end the turtle state by passing the turtle State around it keeps track of where the",
    "start": "549920",
    "end": "555720"
  },
  {
    "text": "turtle is okay pros and cons of this well it's",
    "start": "555720",
    "end": "561440"
  },
  {
    "text": "very simple it's even simpler than o uh and compared to O you can't do",
    "start": "561440",
    "end": "566600"
  },
  {
    "text": "inheritance so if you if you think inheritances are kind of code smell um this approach forces you to do",
    "start": "566600",
    "end": "573160"
  },
  {
    "text": "composition um downside is it's just like object oriented programming it's got this m mutable State uh which is",
    "start": "573160",
    "end": "580000"
  },
  {
    "text": "encapsulated so you can't really see what's going on inside it so again it's a bit harder to test",
    "start": "580000",
    "end": "586040"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "next functional Turtle right what about functional Turtles well the difference between functional stuff in general is",
    "start": "586040",
    "end": "593040"
  },
  {
    "text": "that in functional programming everything is immutable so when I call my turtle the turtle itself does not",
    "start": "593040",
    "end": "600200"
  },
  {
    "text": "keep track of its state and so it will it won't mutate the state that you give me it will actually create a new state",
    "start": "600200",
    "end": "607200"
  },
  {
    "text": "and give it back to the client and then the client has to pass that state in the turtle will change it and give it back",
    "start": "607200",
    "end": "612640"
  },
  {
    "text": "again so the client has to keep track of the state of the turtle so from a coding point of view we",
    "start": "612640",
    "end": "619760"
  },
  {
    "text": "have a turtle State object just like we did before but this time it's public uh",
    "start": "619760",
    "end": "625360"
  },
  {
    "text": "because it's immutable we don't have to worry about people messing with it and um you know corrupting it somehow um we",
    "start": "625360",
    "end": "633079"
  },
  {
    "text": "can make it public they can reach inside and have a look at what's going on um on the behavior side of things we again we",
    "start": "633079",
    "end": "639240"
  },
  {
    "start": "637000",
    "end": "637000"
  },
  {
    "text": "have these functions um but unlike the uh the abstract data Turtle we pass in a",
    "start": "639240",
    "end": "646200"
  },
  {
    "text": "state and we return a new state we don't just like mutate the state that you pass in we have to return a new state which",
    "start": "646200",
    "end": "652600"
  },
  {
    "text": "is the updated state that keeps track of where it is and what the angle is and what the pen is and all that",
    "start": "652600",
    "end": "657800"
  },
  {
    "text": "stuff so this passing state in and out is a very common thing with functional programming so let's write some code we",
    "start": "657800",
    "end": "666600"
  },
  {
    "text": "get the initial State we call the move function and now we get a new state and now we call it again and we have a",
    "start": "666600",
    "end": "673120"
  },
  {
    "text": "second state and a third state and a fourth state so this is nice in the sense that everything's very explicit",
    "start": "673120",
    "end": "679120"
  },
  {
    "text": "everything's very transparent I can examine the state at any point the downside is it's kind of ugly so um it's",
    "start": "679120",
    "end": "687040"
  },
  {
    "text": "kind of annoying to have to write code like this can we make this code cleaner and the answer is yes we can so if we",
    "start": "687040",
    "end": "694360"
  },
  {
    "text": "think of these Turtle functions they have an input and an output where each one Returns the new turtle State and",
    "start": "694360",
    "end": "700560"
  },
  {
    "text": "then the next function has a turtle State as input and it returns a turtle state so if we want to chain these",
    "start": "700560",
    "end": "706480"
  },
  {
    "text": "functions together we can take the output of the first function and feed it into the input of the second function",
    "start": "706480",
    "end": "713959"
  },
  {
    "text": "and in F we do that using piping and the piping we do is if you're familiar with",
    "start": "713959",
    "end": "719560"
  },
  {
    "text": "piping in the Unix command line or console something like that it's exactly the same we take the output of one thing",
    "start": "719560",
    "end": "725120"
  },
  {
    "text": "and feed it as the input to the next thing so if we take that code we can rewrite it uh like this we can say take",
    "start": "725120",
    "end": "733000"
  },
  {
    "text": "get the initial input the initial State Pipe it into the move function take the",
    "start": "733000",
    "end": "738560"
  },
  {
    "text": "output of the move function pipe it into the turn function take the output of the turn function pipe it into the move",
    "start": "738560",
    "end": "743760"
  },
  {
    "text": "function and so on and so forth so this vertical bar with the angle bracket is f",
    "start": "743760",
    "end": "749199"
  },
  {
    "text": "sh's pipe operator uh and it's in Unix it would just be this plain vertical bar but in F it's slightly different and",
    "start": "749199",
    "end": "756079"
  },
  {
    "text": "this is a really nice way of doing things and lots of other languages are using a pipe operator too because it's",
    "start": "756079",
    "end": "761399"
  },
  {
    "text": "just it makes code look much nicer so that's the functional version pros and",
    "start": "761399",
    "end": "767120"
  },
  {
    "text": "cons uh because it's immutable it's a lot easier to reason about I can I can",
    "start": "767120",
    "end": "772519"
  },
  {
    "text": "if I wanted to start in the corner I can just create the state in a corner and pass it into the turtle um it's a lot",
    "start": "772519",
    "end": "777800"
  },
  {
    "text": "easier to test because I pass in a state and I get a state out and I can just make sure that it's doing what it's supposed to do and it's composable these",
    "start": "777800",
    "end": "785000"
  },
  {
    "text": "functions are nice and composable downside is the client has to keep track of all the states so that's a bit of a",
    "start": "785000",
    "end": "791160"
  },
  {
    "text": "pain but things like piping make it a lot easier uh and again even in the functional one we still have these",
    "start": "791160",
    "end": "797360"
  },
  {
    "text": "hardcoded dependencies on the canvas and the logger and so on but we'll fix that",
    "start": "797360",
    "end": "804120"
  },
  {
    "start": "804000",
    "end": "804000"
  },
  {
    "text": "next state mod ads so um let's say that we're moving",
    "start": "804120",
    "end": "811360"
  },
  {
    "text": "our turtle and we hit the wall and we can't go any further so what we're going to do is we're going to return something",
    "start": "811360",
    "end": "818440"
  },
  {
    "text": "we're going to return the actual amount moved so our move function is now going to return a pair of things it's going to",
    "start": "818440",
    "end": "824920"
  },
  {
    "text": "return the state and it's Al it's also going to return the actual distance moved so if we look at our code okay",
    "start": "824920",
    "end": "831480"
  },
  {
    "text": "is's the initial State and then we pass that in and now we get a pair and then if the distance uh is less than we",
    "start": "831480",
    "end": "837639"
  },
  {
    "text": "thought it should be uh okay we'll try turning and then we'll try get another state and then we'll try moving again",
    "start": "837639",
    "end": "844279"
  },
  {
    "text": "and that will return um another distance and so on and so forth and you can get",
    "start": "844279",
    "end": "849639"
  },
  {
    "text": "an idea that this is looking really ugly again so we keep adding things and every",
    "start": "849639",
    "end": "855320"
  },
  {
    "text": "time we add things the code gets ugly but we manage to save the day by adding you know making the code look nice again",
    "start": "855320",
    "end": "861079"
  },
  {
    "text": "and that's exactly what we're going to do now what we can't do is um use piping",
    "start": "861079",
    "end": "867720"
  },
  {
    "text": "and the reason is because we're now not returning one thing we're returning a pair so we just can't pipe the state all",
    "start": "867720",
    "end": "873320"
  },
  {
    "text": "the way through because we have this distance as well so that's not going to work we're going to have to try another",
    "start": "873320",
    "end": "878800"
  },
  {
    "text": "trick so this is yucky it's horrible let's fix it so what we're going to do",
    "start": "878800",
    "end": "885600"
  },
  {
    "text": "is we're going to do another functional trick which is we're going to transform the function into a different shape so",
    "start": "885600",
    "end": "892279"
  },
  {
    "text": "our Turtle function now has two inputs right we have the turtle State and then and then the input with the distance to",
    "start": "892279",
    "end": "898320"
  },
  {
    "text": "move or the angle angle to turn or something like that and the output of the turtle function is now a pair of things it's the new turtle State and you",
    "start": "898320",
    "end": "905720"
  },
  {
    "text": "know the actual distance mov or the actual distance turned or whatever it is so what can we do to make this more",
    "start": "905720",
    "end": "912440"
  },
  {
    "text": "tractable more easy to work with we're going to use a trick called currying and",
    "start": "912440",
    "end": "917920"
  },
  {
    "text": "what that does is allow you to turn a two parameter function into a series of one parameter functions so instead of a",
    "start": "917920",
    "end": "924040"
  },
  {
    "text": "two parameter function it's going to be a one parameter function that returns another one parameter function and that's what this is so if we go back to",
    "start": "924040",
    "end": "931160"
  },
  {
    "text": "our Turtle function we can actually think of it as you give me one input and I give you back a function and this",
    "start": "931160",
    "end": "938160"
  },
  {
    "text": "thing of a function that returns another function is a really common uh thing that happens in functional programming",
    "start": "938160",
    "end": "943680"
  },
  {
    "text": "functions that return functions it's just like all everywhere so now we have",
    "start": "943680",
    "end": "948880"
  },
  {
    "text": "a we pass in the distance we want to move and instead of getting the actual distance we get this function uh and we're not finished yet",
    "start": "948880",
    "end": "955560"
  },
  {
    "text": "so what we're going to do is take this function and we're going to wrap it we're going to give a name we're going to call it",
    "start": "955560",
    "end": "961240"
  },
  {
    "text": "state so we you pass me in an input and you get back a state thing now you have to believe me that",
    "start": "961240",
    "end": "969079"
  },
  {
    "text": "there's a way this is now a one input function as a one output and there's actually a way to compose these",
    "start": "969079",
    "end": "974440"
  },
  {
    "text": "functions uh you can chain them together and there's a trick for doing that now you just have to believe me or what that",
    "start": "974440",
    "end": "979880"
  },
  {
    "text": "trick is because I don't have time to explain it but I actually had a whole talk about it called the mon adster so",
    "start": "979880",
    "end": "986399"
  },
  {
    "text": "uh if you Google Mon adster you will find my talk on the state modad so given that we can do this we can actually",
    "start": "986399",
    "end": "994040"
  },
  {
    "text": "rewrite this thing in F to look much nicer using something called a state expression so a state expression is a",
    "start": "994040",
    "end": "1000800"
  },
  {
    "text": "block of code where the state is running through behind the scenes and not visible on the surface so I would write",
    "start": "1000800",
    "end": "1008160"
  },
  {
    "text": "a piece of code like this I say move 80 now the move function has one input and",
    "start": "1008160",
    "end": "1013560"
  },
  {
    "text": "there's the state thing going on but that's Now hidden it just Returns the distance and if the distance is less 80",
    "start": "1013560",
    "end": "1019880"
  },
  {
    "text": "I can turn and again the turn returns this state thing but that's hidden behind the scenes and so I can write",
    "start": "1019880",
    "end": "1025918"
  },
  {
    "text": "code that looks very much like the imperative code even though there's this state object being uh passed around",
    "start": "1025919",
    "end": "1033360"
  },
  {
    "text": "behind the scenes so that's very nice these State expressions are very cool and we will see more of these very",
    "start": "1033360",
    "end": "1041360"
  },
  {
    "text": "shortly so um this is not special to F has schol most functional languages have",
    "start": "1041360",
    "end": "1047880"
  },
  {
    "text": "something like this has schol has do notation Scala has something called four comprehensions it's a way of threading",
    "start": "1047880",
    "end": "1053679"
  },
  {
    "text": "data through right now so if we compare the oo style this is the kind of oo",
    "start": "1053679",
    "end": "1059160"
  },
  {
    "text": "imperative style moving and then checking the distance then turning whatever and the state expression style",
    "start": "1059160",
    "end": "1065799"
  },
  {
    "text": "the state expression looks very similar to the O expression almost identical the",
    "start": "1065799",
    "end": "1071080"
  },
  {
    "text": "difference is that in the O version this move function is working with the hidden",
    "start": "1071080",
    "end": "1077080"
  },
  {
    "text": "mutable state so it's not transparent par I can't really see what the inputs and the outputs are um so it's not very",
    "start": "1077080",
    "end": "1083600"
  },
  {
    "text": "testable now this one this function is working with immutable State and the",
    "start": "1083600",
    "end": "1089880"
  },
  {
    "text": "data is being passed in and passed out so if I want to test this function in isolation is very very easy to do it's",
    "start": "1089880",
    "end": "1096919"
  },
  {
    "text": "just that when you put it together in a pile of other functions it becomes complicated so we use this state expression but individually the",
    "start": "1096919",
    "end": "1103320"
  },
  {
    "text": "functions are much more transparent right",
    "start": "1103320",
    "end": "1109280"
  },
  {
    "text": "let me see is there any I'm just seeing a question on",
    "start": "1109280",
    "end": "1115158"
  },
  {
    "text": "[Music] slack",
    "start": "1116010",
    "end": "1120840"
  },
  {
    "text": "okay right so what's the advantages and disadvantages of the uh State expression",
    "start": "1121640",
    "end": "1129280"
  },
  {
    "text": "well it looks imperative but it's actually got imut immutability all the way through it um we've got these",
    "start": "1129280",
    "end": "1134840"
  },
  {
    "text": "composable functions all the functions are still easy to test the sides is much harder to implement and you in order to",
    "start": "1134840",
    "end": "1141360"
  },
  {
    "text": "use it you sort of understand what's going on so you have to be pretty experienced functional programmer to",
    "start": "1141360",
    "end": "1146520"
  },
  {
    "text": "understand what's going on right next error handling so let's say that rather than",
    "start": "1146520",
    "end": "1154600"
  },
  {
    "start": "1148000",
    "end": "1148000"
  },
  {
    "text": "uh telling me the actual distance moved I'm just going to give you an error so you're going to pass me in my two",
    "start": "1154600",
    "end": "1159960"
  },
  {
    "text": "parameters and I will say yes you successfully moved that distance or you",
    "start": "1159960",
    "end": "1165120"
  },
  {
    "text": "failed to move that distance you hit the wall and I will give you an error message to telling you why so uh how can",
    "start": "1165120",
    "end": "1171480"
  },
  {
    "text": "we work with these kinds of functions so every time we see something like this a success or a failure uh in functional",
    "start": "1171480",
    "end": "1178720"
  },
  {
    "text": "programming we can use a choice type so in this case we'll use something called results and it's either okay or it's an",
    "start": "1178720",
    "end": "1186559"
  },
  {
    "text": "error it's success or failure so you can think of this as like an enum or you can",
    "start": "1186559",
    "end": "1192360"
  },
  {
    "text": "think of it is like two different kind of subclasses lots of different ways of thinking about it but basically you have",
    "start": "1192360",
    "end": "1197440"
  },
  {
    "text": "two choices they're mutually exclusive right it's not both of them it's one or the other one so I call these Choice types uh",
    "start": "1197440",
    "end": "1205760"
  },
  {
    "text": "people call them the whe word for these is sum types and F calls and discriminated unions lots of different",
    "start": "1205760",
    "end": "1210840"
  },
  {
    "text": "words for these things very very useful things right so let's look at the F codes uh to implement things using a",
    "start": "1210840",
    "end": "1218440"
  },
  {
    "text": "results so if I want to move um and I can't actually move that distance I will",
    "start": "1218440",
    "end": "1223720"
  },
  {
    "text": "return an error saying you moved out of bounds but if it could work then I'm just going to update states with the new",
    "start": "1223720",
    "end": "1230679"
  },
  {
    "text": "uh position that you moved in so either you won't move at all and you get an error or you will move and here's the new state so there's the error choice",
    "start": "1230679",
    "end": "1238400"
  },
  {
    "text": "and the okay choice so again you could sort of implement this in in O using subclasses",
    "start": "1238400",
    "end": "1245880"
  },
  {
    "text": "maybe uh it's really easy in function languages this is standard technique so",
    "start": "1245880",
    "end": "1251919"
  },
  {
    "text": "now let's write the code that uses the results so I move something and I get a result back now is it success or failure",
    "start": "1251919",
    "end": "1258120"
  },
  {
    "text": "I don't know I'm going to have to do pattern matching so I have to check each possible case is it an error okay it",
    "start": "1258120",
    "end": "1265360"
  },
  {
    "text": "failed is it successful okay then I'll try moving again now I get another",
    "start": "1265360",
    "end": "1270480"
  },
  {
    "text": "result back is that a success or a failure I don't know I have to patent match either it's an error or it's a",
    "start": "1270480",
    "end": "1277120"
  },
  {
    "text": "success and I keep going and going like this and as you can see it's going to be",
    "start": "1277120",
    "end": "1282480"
  },
  {
    "text": "ugly yucky yuck again every time we do this we make really really ugly codes is",
    "start": "1282480",
    "end": "1288159"
  },
  {
    "text": "there a way to make this code cleaner yes there is so we'll use the same approach we did with the state what",
    "start": "1288159",
    "end": "1295279"
  },
  {
    "text": "we're going to do is create a result expression and in a result expression uh",
    "start": "1295279",
    "end": "1301960"
  },
  {
    "text": "on the surface is the happy path and behind the scenes is the failure so when",
    "start": "1301960",
    "end": "1307440"
  },
  {
    "text": "we move if if that succeeds we can do the next thing and if it fails it's do not pass go and drop down to the bottom",
    "start": "1307440",
    "end": "1314480"
  },
  {
    "text": "of the block uh so again we try moving and if that succeeds the next thing happens and if it fails do not pass go",
    "start": "1314480",
    "end": "1322559"
  },
  {
    "text": "waight down to the end so we can actually write our code as if everything is succeeding all the time and again it",
    "start": "1322559",
    "end": "1328600"
  },
  {
    "text": "makes the code much cleaner to write so result expression just like a",
    "start": "1328600",
    "end": "1334200"
  },
  {
    "text": "state expression um and the errors handling behind the scenes and if you're",
    "start": "1334200",
    "end": "1339520"
  },
  {
    "text": "interested in this I have a whole talk on this raway oriented programming uh famously uh on this whole",
    "start": "1339520",
    "end": "1347080"
  },
  {
    "text": "thing of doing error handling using result now you notice that we still have all these ugly States everywhere but can",
    "start": "1347080",
    "end": "1354240"
  },
  {
    "text": "we get rid of that yes we can we can combine the result expression and the state expression to have a result State",
    "start": "1354240",
    "end": "1361480"
  },
  {
    "text": "expression and now we've got the state being run through the back and we've got the result uh the error handling being",
    "start": "1361480",
    "end": "1368120"
  },
  {
    "text": "done through the back and our main kind of the front end code the Su superficial code is very clean again it looks just",
    "start": "1368120",
    "end": "1375200"
  },
  {
    "text": "slightly impera code so we can combine comine these different kinds of things",
    "start": "1375200",
    "end": "1380279"
  },
  {
    "text": "State and result together in a really nice way okay pros and cons of results",
    "start": "1380279",
    "end": "1385360"
  },
  {
    "text": "well the nice thing about using a result is it's explicit we're not throwing any exceptions we're not throwing exceptions",
    "start": "1385360",
    "end": "1391279"
  },
  {
    "text": "say oh you know you must able to catch this we literally turning like an error code like old school error",
    "start": "1391279",
    "end": "1397159"
  },
  {
    "text": "codes um what's nice is it looks like happy path code but the errors are being handled very nicely behind the scenes",
    "start": "1397159",
    "end": "1403679"
  },
  {
    "text": "downside is yeah more hard harder to use harder to implement",
    "start": "1403679",
    "end": "1409080"
  },
  {
    "text": "and um it's just a whole new way of working okay next is async",
    "start": "1409080",
    "end": "1417559"
  },
  {
    "text": "Turtle so what if the turtle was a real physical turtle and you were talking to it over Wi-Fi or Bluetooth or radio",
    "start": "1417559",
    "end": "1425360"
  },
  {
    "text": "waves or something um it wouldn't respond straight away so if you were talking to it you'd have to use an",
    "start": "1425360",
    "end": "1431159"
  },
  {
    "text": "asynchronous call so our code would look something like this we asked the turtle",
    "start": "1431159",
    "end": "1436760"
  },
  {
    "text": "to move asynchronously and we would have to have a call back we would have to wait for the call when the turtle",
    "start": "1436760",
    "end": "1443200"
  },
  {
    "text": "finished moving it would call us back and say okay here's my new state what do you want to do with it and I say okay I",
    "start": "1443200",
    "end": "1448559"
  },
  {
    "text": "want you to move again and I have to wait for the call back to complete and then the come the call back comes back",
    "start": "1448559",
    "end": "1453840"
  },
  {
    "text": "and say okay here's my new state what do you want to do okay I want you to move again and so on and so forth and this is",
    "start": "1453840",
    "end": "1461960"
  },
  {
    "text": "very typical of async calls when there's lots and lots of callbacks chained together like this and it even has name",
    "start": "1461960",
    "end": "1469120"
  },
  {
    "text": "which is the Pyramid of Doom because you get this kind of triangular shape on the sides and if you have lots and lots of",
    "start": "1469120",
    "end": "1474840"
  },
  {
    "text": "callbacks it goes very very deeply nested uh and um these callbacks are",
    "start": "1474840",
    "end": "1481760"
  },
  {
    "text": "very annoying it would be nice if we could hide these callbacks and not have to be explicit with them not see them is",
    "start": "1481760",
    "end": "1488480"
  },
  {
    "text": "there a way to do that yes there is funny you should ask because we can use another expression so this yuck to yuck",
    "start": "1488480",
    "end": "1496399"
  },
  {
    "text": "uh chaining of callbacks is is uh again really annoying and we can hide this",
    "start": "1496399",
    "end": "1502000"
  },
  {
    "text": "using an async expression so um in the async expression the callbacks are",
    "start": "1502000",
    "end": "1507600"
  },
  {
    "text": "hidden behind the in the middle of the expression so when I say move um that",
    "start": "1507600",
    "end": "1513640"
  },
  {
    "text": "thing on the left hand side where it says let bang state that is exactly like C's a weight so it's like async a weight",
    "start": "1513640",
    "end": "1520640"
  },
  {
    "text": "in C same idea so we're waiting for the turtle to finish moving and that gives us the new state and then we can call",
    "start": "1520640",
    "end": "1527159"
  },
  {
    "text": "the turtle again and then we await the next date and then we can call the turtle again so we basically async await",
    "start": "1527159",
    "end": "1534880"
  },
  {
    "text": "um same thing using the F equivalent which is the async expression",
    "start": "1534880",
    "end": "1540159"
  },
  {
    "text": "block and you might notice that uh this is good we've got another async",
    "start": "1540159",
    "end": "1545840"
  },
  {
    "text": "expression um so the callbacks are managed behind the scenes but the state",
    "start": "1545840",
    "end": "1550880"
  },
  {
    "text": "is still very obvious how are we going to deal with that I think you know where we're going we are going to combine the",
    "start": "1550880",
    "end": "1558720"
  },
  {
    "text": "async expression and the state expression into an async State expression and now our code looks like",
    "start": "1558720",
    "end": "1565440"
  },
  {
    "text": "this and again the the everything here it looks like imperative code but it's",
    "start": "1565440",
    "end": "1570799"
  },
  {
    "text": "in fact completely asynchronous and the state is being passed around immutable state is being passed around but it",
    "start": "1570799",
    "end": "1576520"
  },
  {
    "text": "doesn't even look like it so that's really nice right what else do we have um yeah",
    "start": "1576520",
    "end": "1584120"
  },
  {
    "text": "what is the pattern here notice that we're creating all these Expressions we've done this for State we've done this for results we've done this for",
    "start": "1584120",
    "end": "1591480"
  },
  {
    "text": "async um the pattern here is the dreaded nword monads so all these things are an",
    "start": "1591480",
    "end": "1598640"
  },
  {
    "text": "example of a way of chaining uh effects together in you know in a nice way and",
    "start": "1598640",
    "end": "1604480"
  },
  {
    "text": "hiding kind of how it works and monads is the kind of generic name for that pattern in functional programming and",
    "start": "1604480",
    "end": "1611799"
  },
  {
    "text": "again I'm not really going to go into it but you can see there's a lot of commonality between these three ways of doing things where we're basically",
    "start": "1611799",
    "end": "1617399"
  },
  {
    "text": "managing things behind the scenes without making it obvious to the front end of the code here so the common",
    "start": "1617399",
    "end": "1624640"
  },
  {
    "text": "patterns we've done so far we've done composition everything has been composition chaining things together um",
    "start": "1624640",
    "end": "1630440"
  },
  {
    "text": "and in the functional code we have this explicit State Management we don't have any secret mutation going on behind the",
    "start": "1630440",
    "end": "1636640"
  },
  {
    "text": "scenes we're always passing the state around explicitly which makes it very very transparent and very very easy to",
    "start": "1636640",
    "end": "1642480"
  },
  {
    "text": "test um we've got explicit errors we don't use exceptions we use errors which show up in the function signature and",
    "start": "1642480",
    "end": "1649440"
  },
  {
    "text": "this is a general principle of functional programming I would say is we prefer things to be explicit we we don't like hidden things we don't like magic",
    "start": "1649440",
    "end": "1655840"
  },
  {
    "text": "things we like everything to be really obvious uh and that does make the code look kind of complicated but then we",
    "start": "1655840",
    "end": "1662240"
  },
  {
    "text": "have these techniques to sort of hide it again so that's what the nword is right",
    "start": "1662240",
    "end": "1668600"
  },
  {
    "text": "next batch commands so let's say that I don't want to manage the state on the caller side",
    "start": "1668600",
    "end": "1676559"
  },
  {
    "start": "1669000",
    "end": "1669000"
  },
  {
    "text": "because the caller is lazy how can the caller avoid managing State well one way",
    "start": "1676559",
    "end": "1682000"
  },
  {
    "text": "is to have an intermediary who's going to manage the state for me so what I'm going to do is going to send a bunch of",
    "start": "1682000",
    "end": "1687840"
  },
  {
    "text": "commands to a batch Runner which is going to run the commands for me so I now have a new intermediary between me",
    "start": "1687840",
    "end": "1695000"
  },
  {
    "text": "and the turtle and I'm going to send a bunch of commands to the batch Runner and the",
    "start": "1695000",
    "end": "1700960"
  },
  {
    "text": "batch Runner is going to run them and it's going to talk to the turtle and it's going to keep track of the state of",
    "start": "1700960",
    "end": "1706240"
  },
  {
    "text": "the turtle not me so how am I going to send what are these",
    "start": "1706240",
    "end": "1713039"
  },
  {
    "text": "commands going to look like what what exactly am I going to send to the batch Runner well if I was talking to the",
    "start": "1713039",
    "end": "1718159"
  },
  {
    "text": "turtle directly I would have a bunch of functions I could call but if I'm talking to a batch process I can't just",
    "start": "1718159",
    "end": "1725799"
  },
  {
    "text": "call a function I have to like send stuff down the wire right so I need to actually have data structure that I can",
    "start": "1725799",
    "end": "1731760"
  },
  {
    "text": "send so I need to turn every single function into a corresponding data structure that I can send now how can I",
    "start": "1731760",
    "end": "1737880"
  },
  {
    "text": "do do that well I will just create a choice and for each function I want I will create a choice uh which represents",
    "start": "1737880",
    "end": "1745080"
  },
  {
    "text": "that function so if I instead of calling the move function I will say I'll create a data a choice of the data structure",
    "start": "1745080",
    "end": "1751760"
  },
  {
    "text": "and in that choice there will be some distance that I want to move and I'll have a turn option and in that turn",
    "start": "1751760",
    "end": "1758480"
  },
  {
    "text": "there will be an angle I wanted to move so there'll be four different choices in my data structure and that is what I'm",
    "start": "1758480",
    "end": "1764080"
  },
  {
    "text": "going to use as a command so uh as a from a usage point of",
    "start": "1764080",
    "end": "1769360"
  },
  {
    "text": "view I will basically create a whole bunch of commands and I will send them to the turtle batch Runner to run them",
    "start": "1769360",
    "end": "1776240"
  },
  {
    "text": "so again these are this is data this is not commands this is a bunch of objects",
    "start": "1776240",
    "end": "1781519"
  },
  {
    "text": "as it were uh and each object represents a function an action that I want to call later",
    "start": "1781519",
    "end": "1787039"
  },
  {
    "text": "on so how does the batch Runner actually run these commands well it does it just",
    "start": "1787039",
    "end": "1792799"
  },
  {
    "text": "kind of reverses it it looks at the the pattern the pattern matches and says well if it's a move command I'll call",
    "start": "1792799",
    "end": "1799279"
  },
  {
    "text": "the move function and if it's the turn command I'll call the turn function and the penup function I'll call the pen you",
    "start": "1799279",
    "end": "1805200"
  },
  {
    "text": "know the penup state the penup choice I'll call the penup function pen down Choice I'll call the pen down function",
    "start": "1805200",
    "end": "1811320"
  },
  {
    "text": "so it's literally pattern matching there's a oneto one correspondence between the choice in the data structure",
    "start": "1811320",
    "end": "1818559"
  },
  {
    "text": "and the function to call this has actually got a name this is called defunctionalization and uh it's a common",
    "start": "1818559",
    "end": "1824840"
  },
  {
    "text": "technique in functional programming now if I want to run all these commands in a row what I would do",
    "start": "1824840",
    "end": "1831799"
  },
  {
    "text": "then is basically set up some mutable State uh for each command in the list commands I would execute that command",
    "start": "1831799",
    "end": "1838480"
  },
  {
    "text": "that would create me a new State uh and then I keep mutating that state and finally I have the final state after",
    "start": "1838480",
    "end": "1844960"
  },
  {
    "text": "running all those commands so that's the kind of imperative way where I loop I just have a for Loop um functional",
    "start": "1844960",
    "end": "1853039"
  },
  {
    "text": "programmer would probably not do that they'd probably use the fold function which is exactly the same thing but just",
    "start": "1853039",
    "end": "1858600"
  },
  {
    "text": "one line of code without any reable state so fold or a loop same thing",
    "start": "1858600",
    "end": "1864120"
  },
  {
    "text": "really inside but uh if you are doing functional programming I do recommend",
    "start": "1864120",
    "end": "1869399"
  },
  {
    "text": "that you learn the collection Library there's a lot of really interesting um functions like fold and um things that",
    "start": "1869399",
    "end": "1876880"
  },
  {
    "text": "you that will make your life easier when you're working with collections right next up oh no we",
    "start": "1876880",
    "end": "1882519"
  },
  {
    "text": "haven't finished yet decoupled that is one of the big advantages I am sending data I do not know how the turtle",
    "start": "1882519",
    "end": "1888559"
  },
  {
    "text": "actually works because I am just sending you some data for you to interpret and",
    "start": "1888559",
    "end": "1893880"
  },
  {
    "text": "this idea of interpreting the data is going to be is very a cool technique and we'll actually see a bunch of uses a",
    "start": "1893880",
    "end": "1900200"
  },
  {
    "text": "bunch of uses of this in the next few examples it's a lot simpler than monads",
    "start": "1900200",
    "end": "1905720"
  },
  {
    "text": "to keep track of the state this way um so you know you don't have to learn too much downside of this particular one the",
    "start": "1905720",
    "end": "1912120"
  },
  {
    "text": "batch one is it's batch oriented which means that I can't send a single command",
    "start": "1912120",
    "end": "1917559"
  },
  {
    "text": "there's no control flow I can't say do a command and then if it's fails or something try something else it's",
    "start": "1917559",
    "end": "1922840"
  },
  {
    "text": "literally I have a bunch of commands it's fine for drawing a triangle or or a square or something but it's not good to",
    "start": "1922840",
    "end": "1928760"
  },
  {
    "text": "try and navigate your way around the surface of the canvas but the control flow thing will",
    "start": "1928760",
    "end": "1935480"
  },
  {
    "text": "be fixed with The Interpreter pattern which we'll be using at the end of the talk right so next actor model so the",
    "start": "1935480",
    "end": "1944799"
  },
  {
    "start": "1943000",
    "end": "1943000"
  },
  {
    "text": "actor model is very much like the batch model except it's real time so rather than sending a whole bunch of commands I",
    "start": "1944799",
    "end": "1950120"
  },
  {
    "text": "will send one single command which will be interpreted as I send it so I'm sending a command and putting",
    "start": "1950120",
    "end": "1957679"
  },
  {
    "text": "on a que and the actor is going to pull messages off the queue and process them",
    "start": "1957679",
    "end": "1962880"
  },
  {
    "text": "straight away it's not going to wait for me to say okay here's the last message so there's a message processing Loop in",
    "start": "1962880",
    "end": "1969240"
  },
  {
    "text": "the actor uh it pulls a command it processes it and it keeps track of the",
    "start": "1969240",
    "end": "1974519"
  },
  {
    "text": "state again in the same way that we did before so let's look at the code for an actor",
    "start": "1974519",
    "end": "1982039"
  },
  {
    "text": "and an actor basically just has a big loop it just keeps looping round and round and the first thing it does is try",
    "start": "1982039",
    "end": "1987960"
  },
  {
    "text": "to read a command from the message CU and if it doesn't if there's nothing on the message queue it blocks so it just",
    "start": "1987960",
    "end": "1993120"
  },
  {
    "text": "stops but if there is a command it reads it and then it updates its states by doing the same thing we did before you",
    "start": "1993120",
    "end": "1999279"
  },
  {
    "text": "know matching the command with move and moving the turtle and then with this new",
    "start": "1999279",
    "end": "2004799"
  },
  {
    "text": "state it just goes back to the top and recursively Loop again so we don't need",
    "start": "2004799",
    "end": "2009960"
  },
  {
    "text": "to have mutable State we just like loop again and wait for another command to come through and just Loop and loop and loop so the actor model is basically a",
    "start": "2009960",
    "end": "2016600"
  },
  {
    "text": "giant uh loop listening for events on the cube so the logic inside is basically",
    "start": "2016600",
    "end": "2023360"
  },
  {
    "text": "the same as the batch logic accepts one at a time right what else do we have oh yeah",
    "start": "2023360",
    "end": "2030480"
  },
  {
    "text": "so as a as a user of an actor um I'll create an actor and I will send a",
    "start": "2030480",
    "end": "2036120"
  },
  {
    "text": "message and I'm going to use the word post post because I'm posting it onto a message CU so I'm going to post the move",
    "start": "2036120",
    "end": "2042440"
  },
  {
    "text": "command post the turn command post the move command post the turn command every time I post it should react pretty much",
    "start": "2042440",
    "end": "2049720"
  },
  {
    "text": "straight away depending on how how the queue is backed up or not uh and again I'm posting data what I'm putting on the",
    "start": "2049720",
    "end": "2056240"
  },
  {
    "text": "Queue is data I'm not actually passing functions down the queue so um actor model just like the",
    "start": "2056240",
    "end": "2064158"
  },
  {
    "text": "batch model it's nice and decoupled it's also simpler than the state man management downside is a lot more extra",
    "start": "2064159",
    "end": "2070720"
  },
  {
    "text": "boiler plate to build actors I mean a lot of a lot of languages haven't built in or there's libraries like AO and so",
    "start": "2070720",
    "end": "2076638"
  },
  {
    "text": "on that do it um what else yeah that's it okay event sourcing I need to hurry",
    "start": "2076639",
    "end": "2083000"
  },
  {
    "start": "2079000",
    "end": "2079000"
  },
  {
    "text": "because I'm running out of time I'm only halfway through event sourcing um now in so far in the actor",
    "start": "2083000",
    "end": "2090720"
  },
  {
    "text": "model and the batch model the state was sort of kept in memory what happens if we want to persist the state between",
    "start": "2090720",
    "end": "2098200"
  },
  {
    "text": "transactions right so I you know I'm going to close this down and start up and start up where I left off now if you",
    "start": "2098200",
    "end": "2104920"
  },
  {
    "text": "have a physical Turtle that's not a problem but if you have a like a logical Turtle that's tricky so how are we going to persist the state well one thing we",
    "start": "2104920",
    "end": "2111359"
  },
  {
    "text": "can do is just stick it in a database you know but let's make it more complicated than that let's look at",
    "start": "2111359",
    "end": "2117480"
  },
  {
    "text": "event sourcing so in the event sourcing model I have another intermediary which this time I'm calling",
    "start": "2117480",
    "end": "2124200"
  },
  {
    "text": "a command Handler and I send it a command and what it does is rather than having",
    "start": "2124200",
    "end": "2130720"
  },
  {
    "text": "loading the current state off the database it's actually going to rebuild the state by repaying all the previous",
    "start": "2130720",
    "end": "2136800"
  },
  {
    "text": "events so if I moved and turned and moved and turned rather than just saying I'm at this position it will say it will",
    "start": "2136800",
    "end": "2143960"
  },
  {
    "text": "replay the move and the turn and move turn to get back to rebuild the state of what I'm currently doing um so it's just",
    "start": "2143960",
    "end": "2151520"
  },
  {
    "text": "a different way of thinking but you we know we can store the events in the event store rather than the actual current state so I recreate the state by",
    "start": "2151520",
    "end": "2159480"
  },
  {
    "text": "replaying the vents and now now that the state is sort of in memory I can go back and do exactly the same logic I did",
    "start": "2159480",
    "end": "2165240"
  },
  {
    "text": "before which is executing command uh talking to the turtle and doing stuff now after the command is executed I will",
    "start": "2165240",
    "end": "2172040"
  },
  {
    "text": "want to create an event that represented what happened and write that back to the",
    "start": "2172040",
    "end": "2177760"
  },
  {
    "text": "event store so if I added another move command I will now say okay I just moved",
    "start": "2177760",
    "end": "2183680"
  },
  {
    "text": "you know a few meters or whatever and I'll put that back in the vent store so now there are events if there were four",
    "start": "2183680",
    "end": "2188800"
  },
  {
    "text": "events before maybe there's five events now so next time when I replay all the events I will replay this new one as",
    "start": "2188800",
    "end": "2194280"
  },
  {
    "text": "well and it will move it you'll move the logical Turtle to where it is so command versus event they sound",
    "start": "2194280",
    "end": "2201520"
  },
  {
    "text": "like the same thing um but a command is an imperative it's an order I want you",
    "start": "2201520",
    "end": "2206560"
  },
  {
    "text": "to move this distance I want you to turn this angle but an event is something that actually happened I actually moved",
    "start": "2206560",
    "end": "2213359"
  },
  {
    "text": "this distance I actually turned this angle I actually changed my pen St and it doesn't have to match the command",
    "start": "2213359",
    "end": "2219880"
  },
  {
    "text": "one for one and it's the events uh is are what get stored in the event store",
    "start": "2219880",
    "end": "2226880"
  },
  {
    "text": "storage so let's look at how you might apply an event like when you're replaying the events so it's very",
    "start": "2226880",
    "end": "2233359"
  },
  {
    "text": "similar to the other ones I basically match what it is if it's a moved event I update the states if it's a turned event",
    "start": "2233359",
    "end": "2239319"
  },
  {
    "text": "I update the states if it's a pen changed event I update the state now all these update the States they're not",
    "start": "2239319",
    "end": "2245680"
  },
  {
    "text": "actually moving the turtle right I just updating the state in memory and I'm remembering how it will get there to get",
    "start": "2245680",
    "end": "2252400"
  },
  {
    "text": "to the kind of final state of before we start the next bit so these are not doing anything outside they're just like",
    "start": "2252400",
    "end": "2258480"
  },
  {
    "text": "updating an internal State uh in memory now when I want to actually",
    "start": "2258480",
    "end": "2264400"
  },
  {
    "text": "handle the command the overall thing is load up all the events replay all the events to get the state before the",
    "start": "2264400",
    "end": "2271400"
  },
  {
    "text": "command happens and then you execute the command and that gives you a new event which you then store back into the event",
    "start": "2271400",
    "end": "2277920"
  },
  {
    "text": "store for the next time so next time there'll be some extra events that you load up to",
    "start": "2277920",
    "end": "2283040"
  },
  {
    "text": "replay so when you when you replay the events in memory you're not actually doing anything with the turtle this is",
    "start": "2283040",
    "end": "2288960"
  },
  {
    "text": "very important you're just kind of updating The Logical State it's only when you do the actual execute them on",
    "start": "2288960",
    "end": "2295319"
  },
  {
    "text": "that's when you actually talk to the turtle and actually move the turtle",
    "start": "2295319",
    "end": "2300480"
  },
  {
    "text": "around so pros and cons it's another one which is decoupled because I'm sending",
    "start": "2300720",
    "end": "2306680"
  },
  {
    "text": "um data um it's stateless again uh the state is rebuilt every single time the the the",
    "start": "2306680",
    "end": "2313800"
  },
  {
    "text": "the uh system does not store any state in memory that it needs to keep track of if it crashes it can reload itself",
    "start": "2313800",
    "end": "2319720"
  },
  {
    "text": "without problems and it's very nice to support replay of events in some systems this is actually very critical I mean if",
    "start": "2319720",
    "end": "2325680"
  },
  {
    "text": "you think about financial systems you your bank does not just keep track of your current balance it keeps track of",
    "start": "2325680",
    "end": "2331920"
  },
  {
    "text": "every single transaction you know how much money you put in how much money you took out and it replays all that stuff",
    "start": "2331920",
    "end": "2337440"
  },
  {
    "text": "to calculate what your current balance is it doesn't just keep track of your balance as as a number so in systems",
    "start": "2337440",
    "end": "2343480"
  },
  {
    "text": "where you need that that's a really really useful thing to have downside is it's more complex and uh doing replays events can",
    "start": "2343480",
    "end": "2352240"
  },
  {
    "text": "can be quite tricky in particular uh if you need to version the events like you have new versions of events and old",
    "start": "2352240",
    "end": "2357680"
  },
  {
    "text": "versions of the events that can be tricky as well so pros and cons uh I",
    "start": "2357680",
    "end": "2362800"
  },
  {
    "text": "wouldn't reach for it it's kind of trendy right now but personally I probably wouldn't it wouldn't be my first choice for doing things unless I",
    "start": "2362800",
    "end": "2368480"
  },
  {
    "text": "really really needed that replay facility next stream",
    "start": "2368480",
    "end": "2375920"
  },
  {
    "text": "processing okay so now we're going to expand our universe and include not just",
    "start": "2375920",
    "end": "2381400"
  },
  {
    "text": "one uh system but a whole bunch of other systems and we're going to call these stream processors and they are going to",
    "start": "2381400",
    "end": "2387280"
  },
  {
    "text": "have event streams as input and event streams as output so we have let's take one of our event processes and event",
    "start": "2387280",
    "end": "2394520"
  },
  {
    "text": "stream comes in like things happen in the outside world um and what I'm going to do is I'm going to select them filter",
    "start": "2394520",
    "end": "2400760"
  },
  {
    "text": "them transform them like most events I probably don't care about but maybe a couple I do uh I'm going to then do the",
    "start": "2400760",
    "end": "2407240"
  },
  {
    "text": "same thing where I turn them into a command I'm going to run the command Handler and that is going to generate",
    "start": "2407240",
    "end": "2413440"
  },
  {
    "text": "more events just like we did before now this time the events are then broadcast",
    "start": "2413440",
    "end": "2419160"
  },
  {
    "text": "to other people so other people might say hey you just moved the turtle I might be interested in that event",
    "start": "2419160",
    "end": "2425720"
  },
  {
    "text": "because I need to do something you know or you just uh put the pen up or the pen down or whatever so uh this is a very",
    "start": "2425720",
    "end": "2431640"
  },
  {
    "text": "good way for doing data analytics there's quite a few systems where they they have these streams of data and you",
    "start": "2431640",
    "end": "2437319"
  },
  {
    "text": "have different processes listening to them it's very very decoupled um it's quite nice for certain situations and of",
    "start": "2437319",
    "end": "2444000"
  },
  {
    "text": "course the these stream process can generate new events which go down to other systems and so on and so",
    "start": "2444000",
    "end": "2449359"
  },
  {
    "text": "forth so let's look at a specific example for our turtle um I am going to have a turtle",
    "start": "2449359",
    "end": "2456319"
  },
  {
    "text": "State process and what it's going to do is just update The Logical state of the turtle so it's",
    "start": "2456319",
    "end": "2462119"
  },
  {
    "text": "going to keep track of where it is on the board but it's not actually going to move the turtle so I'm going to it's",
    "start": "2462119",
    "end": "2467880"
  },
  {
    "text": "going to generate a series of events like I moved the turtle I you know I I I changed the direction of the turtle all",
    "start": "2467880",
    "end": "2474240"
  },
  {
    "text": "these kinds of things and I'm going to generate events and I'm going to have three different systems lessened to",
    "start": "2474240",
    "end": "2479280"
  },
  {
    "text": "those events so the first system is the auditing system it's just going to log everything that happened the second one",
    "start": "2479280",
    "end": "2485960"
  },
  {
    "text": "is the canvas system that is going to say oh you moved I'm actually going to physically I'm going to translate that",
    "start": "2485960",
    "end": "2491240"
  },
  {
    "text": "event into a physical movement on the canvas and the third processor is going to be something that calculates the",
    "start": "2491240",
    "end": "2497119"
  },
  {
    "text": "total distance moves uh and maybe I'm going to run out of ink in my turtle so it's like if you've moved after you've",
    "start": "2497119",
    "end": "2503040"
  },
  {
    "text": "moved a certain amount I need to have a warning that you might run out of ink so it doesn't it doesn't care about where you actually are on the canvas it just",
    "start": "2503040",
    "end": "2509560"
  },
  {
    "text": "says oh you've moved how many meters and it's like time to keep track of all that stuff so let me actually do a demo of",
    "start": "2509560",
    "end": "2516920"
  },
  {
    "text": "this where is my stream pressing",
    "start": "2516920",
    "end": "2524960"
  },
  {
    "text": "okay and I will move down here this is real",
    "start": "2524960",
    "end": "2531160"
  },
  {
    "text": "code right so I'll move down here and highlight this one so the auditing processor is",
    "start": "2531160",
    "end": "2538720"
  },
  {
    "text": "basically going to handle the various events and it says if you've moved I'm just going to log that you moved and if",
    "start": "2538720",
    "end": "2545000"
  },
  {
    "text": "you turned I'm am going to log that you turned and if you change your pen state I'm just going to log that so that's all",
    "start": "2545000",
    "end": "2551040"
  },
  {
    "text": "it does it doesn't do anything it just kind of Wis it out now the next one is the canvas",
    "start": "2551040",
    "end": "2558319"
  },
  {
    "text": "processor and the canvas processor only cares about moves because it doesn't",
    "start": "2558319",
    "end": "2563800"
  },
  {
    "text": "really care about angles so it's just going to filter out everything other than moved events and if you did get a",
    "start": "2563800",
    "end": "2569920"
  },
  {
    "text": "move event it's just going to draw it from the beginning to the end so uh there is a subtle bug there",
    "start": "2569920",
    "end": "2575839"
  },
  {
    "text": "but I'm not going to do you what it is next is the distance travel processor",
    "start": "2575839",
    "end": "2582599"
  },
  {
    "text": "and again all it cares about is moved events it's going to filter everything else out and all it does is every time",
    "start": "2582599",
    "end": "2589319"
  },
  {
    "text": "it gets a moved event it just adds the distance so it just accumulates the distance over time uh and then it prints it out on the",
    "start": "2589319",
    "end": "2596559"
  },
  {
    "text": "screen so that's all that one does so we have three different processes all",
    "start": "2596559",
    "end": "2602000"
  },
  {
    "text": "listening they're all listening to this uh obser observable which is a stream of event",
    "start": "2602000",
    "end": "2609119"
  },
  {
    "text": "right so here's our event stream we're going to register our three",
    "start": "2609640",
    "end": "2614760"
  },
  {
    "text": "processes and then let's initialize the canvas now so when I",
    "start": "2614760",
    "end": "2621480"
  },
  {
    "text": "move uh three things happen so the state gets updated and that generates an event",
    "start": "2621480",
    "end": "2627400"
  },
  {
    "text": "a move event the audit thing is interested in that move event the distance traveled says oh you've traveled 100 and the canvas is",
    "start": "2627400",
    "end": "2634119"
  },
  {
    "text": "interested and it draws a line now when I do the event um the only person that's",
    "start": "2634119",
    "end": "2640200"
  },
  {
    "text": "interested in that is the auditor the distance travel person doesn't care canvas person doesn't care uh if I move",
    "start": "2640200",
    "end": "2647359"
  },
  {
    "text": "again uh the udor cares the distance traveled is now 200 it's accumulated the distance and the canvas obviously has",
    "start": "2647359",
    "end": "2654920"
  },
  {
    "text": "drawn the new angle so that's um how the processes",
    "start": "2654920",
    "end": "2660160"
  },
  {
    "text": "work so if I have a triangle it's overall I've moved 300s the order just went and the triangle is up to date",
    "start": "2660160",
    "end": "2667319"
  },
  {
    "text": "that's how stream processing Works obviously in a real system the stream processing would be a lot more",
    "start": "2667319",
    "end": "2673640"
  },
  {
    "start": "2672000",
    "end": "2672000"
  },
  {
    "text": "complicated but uh it it's a great way to decouple the various uh it decouples",
    "start": "2673640",
    "end": "2680119"
  },
  {
    "text": "the kind of State Management from the um physical activities that you take right",
    "start": "2680119",
    "end": "2685880"
  },
  {
    "text": "so it's like event sourcing but uh sometimes managing the state is one thing and then physically acting on that",
    "start": "2685880",
    "end": "2691800"
  },
  {
    "text": "or or making deductions from that is different so in this thing is decoupling those two things separate State",
    "start": "2691800",
    "end": "2697480"
  },
  {
    "text": "Management from the actions based on that state so this is very microservice friendly a lot of microservices use this",
    "start": "2697480",
    "end": "2703599"
  },
  {
    "text": "kind of approach downside is it's more complex we're going to see how complex",
    "start": "2703599",
    "end": "2708760"
  },
  {
    "text": "can we make a four a turtle with four methods like you thought that the object or turtle was complex no this is really",
    "start": "2708760",
    "end": "2715960"
  },
  {
    "text": "really complex so but we can make it we can make it even worse we're not finished yet so in the last few Turtles the batch",
    "start": "2715960",
    "end": "2724040"
  },
  {
    "text": "turtle and the actor Turtle the event sourcing turtle we've done this conscious decoupling we're passing data",
    "start": "2724040",
    "end": "2730440"
  },
  {
    "text": "instead of calling functions and that's like I say it's a very useful technique in function programming and in the event",
    "start": "2730440",
    "end": "2737040"
  },
  {
    "text": "sourcing one we're using these immutable data stores so rather than kind of mutating a database record and updating",
    "start": "2737040",
    "end": "2742680"
  },
  {
    "text": "a database record we a pending for the event history we never mutate anything",
    "start": "2742680",
    "end": "2748040"
  },
  {
    "text": "on disk we just add to it and that has you know from an auditing point of view that's got a lot of nice uh",
    "start": "2748040",
    "end": "2755240"
  },
  {
    "text": "properties next up number 10 o style dependency injection so here",
    "start": "2755240",
    "end": "2763240"
  },
  {
    "text": "is our Turtle class with a move and a turn and a pen up function and I'm not",
    "start": "2763240",
    "end": "2768359"
  },
  {
    "text": "going to put the pen down method now the move method has two dependencies on the",
    "start": "2768359",
    "end": "2773800"
  },
  {
    "text": "Cannabis and the logger the turn method has a dependency on the logger and the penup has a dependency on the logger so",
    "start": "2773800",
    "end": "2781440"
  },
  {
    "text": "if I wanted to use a different logger or a different canvas what I'd probably do is hide them behind interface so I'd",
    "start": "2781440",
    "end": "2788520"
  },
  {
    "text": "have an interface which actually has the moves you know the the logging operations or the canvas draw operations",
    "start": "2788520",
    "end": "2794000"
  },
  {
    "text": "whatever so rather than working with a specific canvas and a specific logger I",
    "start": "2794000",
    "end": "2799119"
  },
  {
    "text": "would create interfaces for these things and then I would inject those interfaces typically in the Constructor with",
    "start": "2799119",
    "end": "2804280"
  },
  {
    "text": "Constructor injection and again if I wanted to hide the implementation of a turtle uh I want",
    "start": "2804280",
    "end": "2811240"
  },
  {
    "text": "a client that draws triangles and squares I would probably have a turtle interface with the four methods being",
    "start": "2811240",
    "end": "2816960"
  },
  {
    "text": "abstract methods rather than concrete methods right so I'd have an interface for a turtle and then I would inject",
    "start": "2816960",
    "end": "2823440"
  },
  {
    "text": "that interface into the client so that's kind of object oriented dependency",
    "start": "2823440",
    "end": "2828640"
  },
  {
    "text": "injection and I'm sure you're all familiar with this um it's very well understood people probably been doing it",
    "start": "2828640",
    "end": "2834200"
  },
  {
    "text": "for a long time uh Constructor injection is actually required by many Frameworks",
    "start": "2834200",
    "end": "2839280"
  },
  {
    "text": "if you're trying to do something else that's kind of painful they really like you to do that um downside is you can",
    "start": "2839280",
    "end": "2845640"
  },
  {
    "text": "easily get unintentional dependencies because in this case for example I'm injecting the canvas but the",
    "start": "2845640",
    "end": "2852559"
  },
  {
    "text": "only person who cares about the canvas is the move U method the turn method does not care about the canvas and yet",
    "start": "2852559",
    "end": "2858839"
  },
  {
    "text": "it has access to the canvas so if I had a bug I could accidentally change the canvas or I could accidentally take a",
    "start": "2858839",
    "end": "2865520"
  },
  {
    "text": "dependency on the canvas which would make it really hard to refactor um the",
    "start": "2865520",
    "end": "2870640"
  },
  {
    "text": "other thing about these interfaces is it's very easy to add more and more methods onto interface in the interface",
    "start": "2870640",
    "end": "2876920"
  },
  {
    "text": "gets bigger and bigger and bigger and sometimes I've seen interfaces with 30 or 40 methods on it because it's like",
    "start": "2876920",
    "end": "2882280"
  },
  {
    "text": "well it just exists I'll just add another one onto it rather than changing all the other stuff and uh so they're",
    "start": "2882280",
    "end": "2888559"
  },
  {
    "text": "not very fine grains now we have um uh recommendations like interface",
    "start": "2888559",
    "end": "2894960"
  },
  {
    "text": "segregation principle and you know single responsibility principle and stuff but these are recommendations and",
    "start": "2894960",
    "end": "2900480"
  },
  {
    "text": "the the there's a force in programming which kind of makes us want to add more",
    "start": "2900480",
    "end": "2905680"
  },
  {
    "text": "methods to an object to interface so even though we're not supposed to it's just easier uh and often you need a library",
    "start": "2905680",
    "end": "2912480"
  },
  {
    "text": "to work with it if you're doing lots of construct injection it's nice to just use a library to help you do it so",
    "start": "2912480",
    "end": "2918319"
  },
  {
    "text": "that's a downside okay next up functional style dependency injection so how is that",
    "start": "2918319",
    "end": "2925079"
  },
  {
    "text": "different from o style so here we have our Turtle module it's not a class it's",
    "start": "2925079",
    "end": "2930640"
  },
  {
    "text": "just a bunch of uh functions and the move function needs to log information",
    "start": "2930640",
    "end": "2936960"
  },
  {
    "text": "and it needs to draw and the turn function needs to log and the penup function needs to log now in a",
    "start": "2936960",
    "end": "2944520"
  },
  {
    "text": "functional dependency we just pass in the dependencies for that particular function so the turn function does not",
    "start": "2944520",
    "end": "2951880"
  },
  {
    "text": "need to know how to draw anything and therefore we do not pass anything in and the other thing to point out is that we",
    "start": "2951880",
    "end": "2958160"
  },
  {
    "text": "are passing in functions not interfaces so I will pass in a draw function I will",
    "start": "2958160",
    "end": "2963760"
  },
  {
    "text": "not pass in a canvas interface I will say this is a function that if",
    "start": "2963760",
    "end": "2969440"
  },
  {
    "text": "you call it it will draw something and you do not need to know about the canvas or anything like that so we're passing",
    "start": "2969440",
    "end": "2974799"
  },
  {
    "text": "in functions and um notice that we only need to we only pass in the functions that it actually needs so there's no",
    "start": "2974799",
    "end": "2981920"
  },
  {
    "text": "accidental dependencies so how can we uh you know",
    "start": "2981920",
    "end": "2987920"
  },
  {
    "text": "passing in all these extra parameters all the time is kind of painful right I it's not it's it's explicit again but is",
    "start": "2987920",
    "end": "2994000"
  },
  {
    "text": "there a way to make it easier uh well yes yes there is so let's pass let's",
    "start": "2994000",
    "end": "2999160"
  },
  {
    "text": "take these um uh function parameters that we're passing in in addition to the main parameter and what we're going to",
    "start": "2999160",
    "end": "3005839"
  },
  {
    "text": "do is instead of having a three parameter function we're going to have a two parameter function that returns a",
    "start": "3005839",
    "end": "3012720"
  },
  {
    "text": "one parameter function so what when we do this kind of thing what we're doing is we've now in that one parameter",
    "start": "3012720",
    "end": "3018599"
  },
  {
    "text": "function we've now sort of baked in um the parameters that we want so this is",
    "start": "3018599",
    "end": "3023680"
  },
  {
    "text": "called partial application you're passing in some of the parameters but not all of them so this one parameter",
    "start": "3023680",
    "end": "3029440"
  },
  {
    "text": "function looks like this the the log info and the draw functions sort of baked into it and it from the outside",
    "start": "3029440",
    "end": "3034760"
  },
  {
    "text": "world it just looks like a normal function um I can just call it by",
    "start": "3034760",
    "end": "3039839"
  },
  {
    "text": "passing in the distance I don't need to do anything special so if I actually look at the implementation here is my move",
    "start": "3039839",
    "end": "3046520"
  },
  {
    "text": "implementation and again I now have a whole bunch of parameters but the the dependencies are passed in as functions",
    "start": "3046520",
    "end": "3052520"
  },
  {
    "text": "so I'm just going to call the log info function and if I want to draw a line I call the draw",
    "start": "3052520",
    "end": "3058119"
  },
  {
    "text": "function and um if I want to do like say these are function parameters they're not interfaces if I want to do turning",
    "start": "3058119",
    "end": "3065599"
  },
  {
    "text": "again I have a logging function that I pass in and I just call this function with the string that I want to",
    "start": "3065599",
    "end": "3071599"
  },
  {
    "text": "log and so from a usage point of view uh what I do is I probably at the top of my",
    "start": "3071599",
    "end": "3077280"
  },
  {
    "text": "code I would set up these variant functions or these alternative functions which have the the logger and the canvas",
    "start": "3077280",
    "end": "3084319"
  },
  {
    "text": "baked into them right so I'm going to bake in these two parameters I'm going to bake in these two parameters and",
    "start": "3084319",
    "end": "3090160"
  },
  {
    "text": "using partial application and what's left is a function with one parameter so",
    "start": "3090160",
    "end": "3095200"
  },
  {
    "text": "now in my main code I can say move and I can say turn and I can say move and this",
    "start": "3095200",
    "end": "3101000"
  },
  {
    "text": "move function has those things baked in so the original move function was didn't have any uh baked in dependencies but I",
    "start": "3101000",
    "end": "3108640"
  },
  {
    "text": "can just bake them in for this particular system for this particular workflow I can breake them in so that's typically how you do things in",
    "start": "3108640",
    "end": "3114640"
  },
  {
    "text": "functional programms partial application so pros and cons um the nice thing is",
    "start": "3114640",
    "end": "3121920"
  },
  {
    "text": "that the original functions are completely explicit about what the dependencies are there's no hidden like",
    "start": "3121920",
    "end": "3127440"
  },
  {
    "text": "in a in an object you can have dependencies on fields that you you know that are not really obvious um we're",
    "start": "3127440",
    "end": "3132920"
  },
  {
    "text": "passing in functions not interfaces if we possibly can um and it's a counterforce to having too many",
    "start": "3132920",
    "end": "3138520"
  },
  {
    "text": "dependencies I mean if I started passing in 13 you know 20 different functions",
    "start": "3138520",
    "end": "3143720"
  },
  {
    "text": "for this one function um that would feel ugly and so I'd have there's a natural",
    "start": "3143720",
    "end": "3149760"
  },
  {
    "text": "tendency not to do that so you kind of get this interface segregation principle for free you really it just doesn't feel",
    "start": "3149760",
    "end": "3156599"
  },
  {
    "text": "right to do that it's fine having an interface with 20 methods you can just pass it in it's just one parameter but",
    "start": "3156599",
    "end": "3162680"
  },
  {
    "text": "passing in 20 different uh dependencies seems really ugly and so there's a natural tendency not to do that and to",
    "start": "3162680",
    "end": "3169040"
  },
  {
    "text": "refactor your code so you don't do that and this is a built-in function a built-in thing of all function languages",
    "start": "3169040",
    "end": "3175319"
  },
  {
    "text": "you don't need any kind of special ioc LI or anything like that downside is it's easy to overuse uh",
    "start": "3175319",
    "end": "3183520"
  },
  {
    "text": "and I would definitely use it in conjunction with moving IO to the edges like you should be really you should be",
    "start": "3183520",
    "end": "3189040"
  },
  {
    "text": "using the onion architecture or the quartz and adapters architecture hexagonal AR one of those things where the io is all at the edges so your pure",
    "start": "3189040",
    "end": "3196319"
  },
  {
    "text": "code in fact does not need to have any dependencies it's not actually talking to the outside world it's not actually",
    "start": "3196319",
    "end": "3201839"
  },
  {
    "text": "you know doing stuff so if you can do that that's great because then you don't need to do inject the at",
    "start": "3201839",
    "end": "3208040"
  },
  {
    "text": "all next interpreter pattern right so um when we design an",
    "start": "3208040",
    "end": "3217000"
  },
  {
    "start": "3209000",
    "end": "3209000"
  },
  {
    "text": "API we are actually creating a coupling in quite in in in in terms of exactly",
    "start": "3217000",
    "end": "3223119"
  },
  {
    "text": "what's going on let let me kind of give you an example it's harder to to talk about so here's the move function and I",
    "start": "3223119",
    "end": "3229280"
  },
  {
    "text": "pass in a distance and the current state and I get back the actual distance moved and the updated State and if I turn I",
    "start": "3229280",
    "end": "3236720"
  },
  {
    "text": "pass in the angle and the current state and I get back the updated States and and so on and so forth so that's like",
    "start": "3236720",
    "end": "3242599"
  },
  {
    "text": "the kind of original API I would have had for a functional version and then I say yeah but you know I want to do error",
    "start": "3242599",
    "end": "3249240"
  },
  {
    "text": "handling I don't want to throw exceptions so I'm going to put results on top of everything so now I completely",
    "start": "3249240",
    "end": "3255240"
  },
  {
    "text": "changed the API I've broken everybody who uses this a API is now the code doesn't compile anym and okay so people",
    "start": "3255240",
    "end": "3262000"
  },
  {
    "text": "fix up their code and then I change my mind again and I say actually you know I really need these things to be async as",
    "start": "3262000",
    "end": "3267880"
  },
  {
    "text": "well and now I've broken the API again and everyone is getting very annoyed with me because I keep changing my mind",
    "start": "3267880",
    "end": "3274760"
  },
  {
    "text": "um is there a way to write an API that does not break when we change between",
    "start": "3274760",
    "end": "3279960"
  },
  {
    "text": "these different ways of returning results so could async versus is there an API we can write that does not care",
    "start": "3279960",
    "end": "3285480"
  },
  {
    "text": "whether it's async or sync so and it turns out yes there is",
    "start": "3285480",
    "end": "3291680"
  },
  {
    "text": "and the answer is to decouple the data decouple the API again using data rather",
    "start": "3291680",
    "end": "3298079"
  },
  {
    "text": "than functions and this is again defunctionalization and we're going to",
    "start": "3298079",
    "end": "3303559"
  },
  {
    "text": "do a much more sophisticated one we saw this with the batch commands and the actor model we're going to do a much",
    "start": "3303559",
    "end": "3309440"
  },
  {
    "text": "more sophisticated one um using The Interpreter patter so uh then the",
    "start": "3309440",
    "end": "3315680"
  },
  {
    "text": "advantage of this particular one is we can do control flow we can actually change what we're going to do based on the result from the previous",
    "start": "3315680",
    "end": "3322319"
  },
  {
    "text": "step so here's how's it going to work I'm going to send a message instruction to The Interpreter and",
    "start": "3322319",
    "end": "3328559"
  },
  {
    "text": "that's going to be some data and The Interpreter is going to run it and then it's going to come back to us with",
    "start": "3328559",
    "end": "3334119"
  },
  {
    "text": "response now when I send the original instruction I don't know what the response is going to be so along with",
    "start": "3334119",
    "end": "3340359"
  },
  {
    "text": "the original instruction I'm also going to send a Lambda which says when you have finished processing do this next",
    "start": "3340359",
    "end": "3346760"
  },
  {
    "text": "thing so it's almost like a call back I'm going to say do this thing and then when you're finished do this next thing",
    "start": "3346760",
    "end": "3353599"
  },
  {
    "text": "with the result or the response and then I'm going to send another instruction and then it's going to interpret it and",
    "start": "3353599",
    "end": "3359359"
  },
  {
    "text": "then I'm going to pass in a Lambda that says okay when did I get this response to this so it's actually not really a",
    "start": "3359359",
    "end": "3365160"
  },
  {
    "text": "back and forth I'm actually sending the entire program at once it's actually like writing a little program and having",
    "start": "3365160",
    "end": "3371280"
  },
  {
    "text": "The Interpreter inter program so let's look at the code for this and this is where it kind",
    "start": "3371280",
    "end": "3378160"
  },
  {
    "text": "of gets tricky so I'm going to call this thing a program it's a set of instructions how am I going to model a",
    "start": "3378160",
    "end": "3384240"
  },
  {
    "text": "set of different instructions of choice between different instructions well I'm going to use a choice type just like I did before and I'm going to say move a",
    "start": "3384240",
    "end": "3392160"
  },
  {
    "text": "certain distance so the input to the uh interpreter is the distance and then the",
    "start": "3392160",
    "end": "3397720"
  },
  {
    "text": "the response from The Interpreter is the actual distance moved and at that point I'm going to say okay for this distance",
    "start": "3397720",
    "end": "3404599"
  },
  {
    "text": "I want you to run this Turtle program so I'm going to pass in a a Lambda rather than just passing in um you know a",
    "start": "3404599",
    "end": "3411440"
  },
  {
    "text": "single operation I'm going to pass in a l as well which is how to respond when when the interpretor is finished and",
    "start": "3411440",
    "end": "3418079"
  },
  {
    "text": "similarly when I make a turn I'm going to pass in a Lambda as well as the instruction to the interpretor I'm going",
    "start": "3418079",
    "end": "3423160"
  },
  {
    "text": "to pass in a Lambda which says how to respond when the interpret is finished and same thing for all the other ones so",
    "start": "3423160",
    "end": "3429359"
  },
  {
    "text": "it's much more complicated setup every single uh piece of data that every",
    "start": "3429359",
    "end": "3434799"
  },
  {
    "text": "single instruction has the input to The Interpreter but also the Lambda that's going to be run after the interpreter's",
    "start": "3434799",
    "end": "3441400"
  },
  {
    "text": "finished so that's the input to The Interpreter that is the respon for The",
    "start": "3441400",
    "end": "3446599"
  },
  {
    "text": "Interpreter and then that whole thing this is the whole thing is the Lambda it's like given this response here's the",
    "start": "3446599",
    "end": "3452480"
  },
  {
    "text": "program you need to run so that's The Interpreter pattern as a data structure right again this this",
    "start": "3452480",
    "end": "3459200"
  },
  {
    "text": "is all data and the The Interpreter needs an extra instruction it needs to stop right",
    "start": "3459200",
    "end": "3466839"
  },
  {
    "text": "because it just keeps going on and on and it's like when does The Interpreter stop running well I need to say okay we're done we can stop now so we need a",
    "start": "3466839",
    "end": "3473880"
  },
  {
    "text": "thir a fifth instruction which is the stop instruction",
    "start": "3473880",
    "end": "3478119"
  },
  {
    "text": "right so that's our now say don't worry about understanding this like I'm I'm literally whizzing through this faster",
    "start": "3478920",
    "end": "3484599"
  },
  {
    "text": "than you can imagine so let's how see how we draw a triangle",
    "start": "3484599",
    "end": "3489760"
  },
  {
    "text": "so I'm going to ask you to move and then I'm going to give you this call back or this continuation when you've moved with",
    "start": "3489760",
    "end": "3496880"
  },
  {
    "text": "this distance I want you to do this next thing so I'm giving you a lamba uh when youve finished turning I want you to",
    "start": "3496880",
    "end": "3503319"
  },
  {
    "text": "call this next function when you have finished moving I want you to call this next function and so on so every single",
    "start": "3503319",
    "end": "3509400"
  },
  {
    "text": "step has a call back or a Lambda for you to run the next time you do something",
    "start": "3509400",
    "end": "3514720"
  },
  {
    "text": "continuation so again we have this code uh which is very very explicit um and",
    "start": "3514720",
    "end": "3521440"
  },
  {
    "text": "then finally we have this stop at the very bottom right that was that was a new thing it's ugly how are we going to",
    "start": "3521440",
    "end": "3528039"
  },
  {
    "text": "fix it we're going to hide the cont uh the continuations behind the scenes with",
    "start": "3528039",
    "end": "3533359"
  },
  {
    "text": "a expression like a computation expression so we're going to call something an interpreter or a turtle",
    "start": "3533359",
    "end": "3539480"
  },
  {
    "text": "program and now we can write our code like this and what's going on behind the",
    "start": "3539480",
    "end": "3545119"
  },
  {
    "text": "scenes is the the these callbacks these continuations are being managed behind the scenes for us just like the async",
    "start": "3545119",
    "end": "3551680"
  },
  {
    "text": "callbacks are managed so what's nice about The Interpreter pan is you can create a set",
    "start": "3551680",
    "end": "3559359"
  },
  {
    "text": "of instructions and interpret it in many many different ways so I can interpret it as moving something on a canvas I can",
    "start": "3559359",
    "end": "3566319"
  },
  {
    "text": "interpret it as you know calculating the distance the same program can be interpreted in different ways um so",
    "start": "3566319",
    "end": "3573839"
  },
  {
    "text": "here's interpreting as a turtle so you know when I get the move instruction I actually move the turtle and then I loop",
    "start": "3573839",
    "end": "3580520"
  },
  {
    "text": "again and try again if I get the turn instruction I actually move the turtle I actually turn the turtle so that's the",
    "start": "3580520",
    "end": "3587240"
  },
  {
    "text": "kind of interpretive version of moving the physical Turtle but I could also do",
    "start": "3587240",
    "end": "3592480"
  },
  {
    "text": "something like uh calculate the distance so here's the distance interpreter and again for moving all I do is update the",
    "start": "3592480",
    "end": "3599520"
  },
  {
    "text": "distance and start again and if it's a turn I don't care so I don't need to update the distance and if it's an async",
    "start": "3599520",
    "end": "3607200"
  },
  {
    "text": "the nice thing about this is the the whole logic of how the physical Turtle works is completely hidden from me",
    "start": "3607200",
    "end": "3612960"
  },
  {
    "text": "whether it's an async turtle or a synchronous turtle um I don't care",
    "start": "3612960",
    "end": "3618400"
  },
  {
    "text": "because that's inside The Interpreter as a caller as a creator of the program I",
    "start": "3618400",
    "end": "3623440"
  },
  {
    "text": "don't care how these things work I'm literally creating a bunch of instructions to be interpreted so I think I have a quick",
    "start": "3623440",
    "end": "3631280"
  },
  {
    "text": "thing for interpreter and then I got one more one more and then I'm sorry I'm running a bit over hopefully this is so",
    "start": "3631280",
    "end": "3637480"
  },
  {
    "text": "exciting that we will stay on for a little bit so there's my uh instructions that I just showed you on the",
    "start": "3637480",
    "end": "3643119"
  },
  {
    "text": "slides uh here is a a program this is the kind of version with the um",
    "start": "3643119",
    "end": "3649359"
  },
  {
    "text": "callbacks which is kind of ugly um but let's go down to the",
    "start": "3649359",
    "end": "3656279"
  },
  {
    "text": "different way so here's my program um I'm going to interpret as a turtle um and let me start the canvas so",
    "start": "3658599",
    "end": "3667760"
  },
  {
    "text": "this is a program that draws a triangle and I'm going to interpret it by drawing things on on this",
    "start": "3667760",
    "end": "3673720"
  },
  {
    "text": "campus now if I take the same program and I interpret it as interpreting by",
    "start": "3673720",
    "end": "3680400"
  },
  {
    "text": "distance I can then interpret the same program as a distance and it says say",
    "start": "3680400",
    "end": "3686079"
  },
  {
    "text": "you move to 300 so the same exactly the same program can be interpreted many different",
    "start": "3686079",
    "end": "3692400"
  },
  {
    "text": "ways right last one oh no not yet um decoupled pure API",
    "start": "3692400",
    "end": "3700599"
  },
  {
    "text": "and optimization I just point out you can optimize things let's say I move the turtle twice in a row um I can merge",
    "start": "3700599",
    "end": "3707000"
  },
  {
    "text": "that into a single operation so if I'm doing a lot of things uh it's a bit like",
    "start": "3707000",
    "end": "3712079"
  },
  {
    "text": "a compiler authorization you you can compile if you have three instructions in a row you can merge them into a single instruction exactly the same",
    "start": "3712079",
    "end": "3718279"
  },
  {
    "text": "thing for the interpretate pattern much much more complex of course much much more complex so it's best if you have a",
    "start": "3718279",
    "end": "3725480"
  },
  {
    "text": "limited set of operations if you have hundreds of operations it's going to be painful uh Twitter and Facebook have",
    "start": "3725480",
    "end": "3731760"
  },
  {
    "text": "liaries that do this for their own internal use they use exactly the the same technique finally okay finally",
    "start": "3731760",
    "end": "3740599"
  },
  {
    "text": "capabilities so um what happens often is I make a call",
    "start": "3740599",
    "end": "3746039"
  },
  {
    "text": "and the uh API says actually you can't do that sorry um I make another call and",
    "start": "3746039",
    "end": "3752200"
  },
  {
    "text": "it says sorry Dave I can't do that um this is really kind of annoying um",
    "start": "3752200",
    "end": "3759440"
  },
  {
    "text": "rather than you know it's very common you call the API and says you can't do that what about rather than saying you",
    "start": "3759440",
    "end": "3764520"
  },
  {
    "text": "can't do that what about telling me what I can do rather than rather than let me do something and and and complaining",
    "start": "3764520",
    "end": "3770520"
  },
  {
    "text": "about it just tell me what you can do and and don't let me do what you won't let me do so this this is a capability",
    "start": "3770520",
    "end": "3776839"
  },
  {
    "text": "based API and a capability is kind of like a key like if I have a key I can open this",
    "start": "3776839",
    "end": "3782920"
  },
  {
    "text": "lock so what happens is I make a call to the API and it gives me back a bunch of",
    "start": "3782920",
    "end": "3788359"
  },
  {
    "text": "capabilities and each capability is the capability to do something like move the turtle or turn the turtle whatever and",
    "start": "3788359",
    "end": "3794319"
  },
  {
    "text": "if it doesn't give me the capability I can't do it so um you know each time",
    "start": "3794319",
    "end": "3800200"
  },
  {
    "text": "there a different set of capability I use a let's say I use the move capability and I get back some more",
    "start": "3800200",
    "end": "3805359"
  },
  {
    "text": "capability so okay I can't move anymore I can only turn or I can only do something else I run out of ink I can't",
    "start": "3805359",
    "end": "3810680"
  },
  {
    "text": "put the pen down anymore so it's very very explicit about what I can do and what I can't do so for example I make a",
    "start": "3810680",
    "end": "3817720"
  },
  {
    "text": "move and I get back the capabilities that I can move and I can turn and I can put the pen down okay so I make another",
    "start": "3817720",
    "end": "3824000"
  },
  {
    "text": "move and I hit the edge and now I can't move anymore so the capabilities come back I only get two capabilities coming",
    "start": "3824000",
    "end": "3830760"
  },
  {
    "text": "back it's like the move capability is not there anymore so that's you know it's very nice literally cannot move the",
    "start": "3830760",
    "end": "3836839"
  },
  {
    "text": "turtle because I do not have a way to do that so the code looks like something",
    "start": "3836839",
    "end": "3844599"
  },
  {
    "text": "instead of having a data structure I have a bunch of um functions that I can call from the client I can can I call",
    "start": "3844599",
    "end": "3850119"
  },
  {
    "text": "the move function can I call the turn function in this case the move function is optional it may not let me make a",
    "start": "3850119",
    "end": "3855680"
  },
  {
    "text": "move if that is not if that's missing um I won't be able to make a move so these",
    "start": "3855680",
    "end": "3861520"
  },
  {
    "text": "are all the different keys I could get to the turtle and uh I won't show you the code so as a",
    "start": "3861520",
    "end": "3868720"
  },
  {
    "text": "as a um as a user I would say do I have the move capability if I do I can move",
    "start": "3868720",
    "end": "3876760"
  },
  {
    "text": "uh and that gives me some more capability say now I might have different capabilities than I had at the beginning so I I need to check that",
    "start": "3876760",
    "end": "3883319"
  },
  {
    "text": "again can I still move and if I can't move then I can't do the second move and but can I can I turn yes I can turn but",
    "start": "3883319",
    "end": "3890839"
  },
  {
    "text": "if I can move I try again so at each point I have to check my capabilities and see can I move them you know can I",
    "start": "3890839",
    "end": "3897720"
  },
  {
    "text": "do this thing or can I not do this thing so it's a bit it's a very different way of working but it is a lot safer um I'm",
    "start": "3897720",
    "end": "3904680"
  },
  {
    "text": "not going to give the demo since I'm running over late so the advantage of this is the client doesn't need to understand the business logic like have",
    "start": "3904680",
    "end": "3910599"
  },
  {
    "text": "I hit the wall or not that logic is on the server side all I all I need to know is can I do something or can't I do",
    "start": "3910599",
    "end": "3917319"
  },
  {
    "text": "something I don't need to understand the rules of the game and it's much more from a security point of",
    "start": "3917319",
    "end": "3922520"
  },
  {
    "text": "view it's much better because I can't accidentally I don't I can't even try to do something that I'm not allowed to do",
    "start": "3922520",
    "end": "3929079"
  },
  {
    "text": "and you can transform them let's say this capability is only available between 9 to 5 on workday or maybe this",
    "start": "3929079",
    "end": "3935480"
  },
  {
    "text": "capability is only available to this person at this time you can these are just functions so you can transform them",
    "start": "3935480",
    "end": "3941279"
  },
  {
    "text": "in lots of different ways now the downside is yes it's complex to implement um and the client has to",
    "start": "3941279",
    "end": "3948520"
  },
  {
    "text": "change the way it thinks the client rather than just having an API that you call and you know I'm just going to call",
    "start": "3948520",
    "end": "3954559"
  },
  {
    "text": "the API and see if it fails the client has to look at all the capabilities that came back and see can I call them or not",
    "start": "3954559",
    "end": "3962440"
  },
  {
    "text": "um and so the client the way of coding a client is very very different um but an",
    "start": "3962440",
    "end": "3968640"
  },
  {
    "text": "example of this is hybrid media as the engine of application state which is a lot of browser based capability things",
    "start": "3968640",
    "end": "3976240"
  },
  {
    "text": "like if I return a web page that has a bunch of links if that Link's not there I can't click on it right that is uh web",
    "start": "3976240",
    "end": "3982599"
  },
  {
    "text": "websites are exactly this thing capability based design so again I have",
    "start": "3982599",
    "end": "3987720"
  },
  {
    "text": "a whole talk about this if you're interested but it's a very interesting uh approach to doing things very different from most other ways of",
    "start": "3987720",
    "end": "3994520"
  },
  {
    "text": "programming I I recommend you check it out because and it's fun right that is",
    "start": "3994520",
    "end": "4000039"
  },
  {
    "text": "it I'm done thank you for staying around um I have slides and videos on my",
    "start": "4000039",
    "end": "4007359"
  },
  {
    "text": "website uh and thank you very much",
    "start": "4007359",
    "end": "4012838"
  }
]