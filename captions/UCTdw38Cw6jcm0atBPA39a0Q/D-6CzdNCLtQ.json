[
  {
    "text": "thank you all for coming my name is Matt wer I'm from Kansas City Missouri and today we're going to talk about",
    "start": "280",
    "end": "7040"
  },
  {
    "text": "typescript and graphql and how they can help you create Rock Solid components",
    "start": "7040",
    "end": "12799"
  },
  {
    "text": "for your applications uh first a little background a quick one uh to tell a",
    "start": "12799",
    "end": "19600"
  },
  {
    "text": "little bit about where I got started um I started off mainly as a service side",
    "start": "19600",
    "end": "25640"
  },
  {
    "text": "developer doing Java um for those who aren't aware Java is a strongly typed",
    "start": "25640",
    "end": "31279"
  },
  {
    "text": "language it's open source uh and it was my first language",
    "start": "31279",
    "end": "36600"
  },
  {
    "text": "introduction um you have to make types for all of your objects uh and that was",
    "start": "36600",
    "end": "42280"
  },
  {
    "text": "what I first learned uh soon after that I move",
    "start": "42280",
    "end": "49199"
  },
  {
    "text": "toet this is also strongly typed and where I'm from this is kind of the",
    "start": "49199",
    "end": "54359"
  },
  {
    "text": "darling of the Enterprise if you work in a larger organization you're probably at",
    "start": "54359",
    "end": "60199"
  },
  {
    "text": "least familiar with net and Microsoft the Microsoft stack this was where I was introduced to",
    "start": "60199",
    "end": "67159"
  },
  {
    "text": "MVC and the pattern of model view controller where the UI you're writing",
    "start": "67159",
    "end": "73600"
  },
  {
    "text": "is server rendered and all of the objects you're interacting with are",
    "start": "73600",
    "end": "79520"
  },
  {
    "text": "strongly typed uh so you know what they are while you're writing your",
    "start": "79520",
    "end": "85320"
  },
  {
    "text": "app moving ahead I started to get introduced to to the experience of",
    "start": "85320",
    "end": "92040"
  },
  {
    "text": "writing with front end and it started off with jQuery um",
    "start": "92040",
    "end": "98520"
  },
  {
    "text": "sure many people are familiar with jQuery like it or hate it uh but that was where I got started sprinkling",
    "start": "98520",
    "end": "104600"
  },
  {
    "text": "little bits of JavaScript uh in myet applications I moved on",
    "start": "104600",
    "end": "111240"
  },
  {
    "text": "to uh angular the first one um where I was introduced to the same sort of bits",
    "start": "111240",
    "end": "119399"
  },
  {
    "text": "I was using used to in the NVC world but this time all as a single page",
    "start": "119399",
    "end": "126118"
  },
  {
    "text": "application from there um I touched on a little bit of knockout uh knockout is a",
    "start": "126399",
    "end": "133400"
  },
  {
    "text": "templating language for allowing you to um write uh bits of components that can",
    "start": "133400",
    "end": "142280"
  },
  {
    "text": "show data and you can interact with those uh through events U this was my",
    "start": "142280",
    "end": "147720"
  },
  {
    "text": "first real chance at writing component-based uh single page",
    "start": "147720",
    "end": "154280"
  },
  {
    "text": "applications um and then I moved on to kind of the",
    "start": "154280",
    "end": "160000"
  },
  {
    "text": "two or bigger ones and that was angular this time the second one and that was",
    "start": "160000",
    "end": "166040"
  },
  {
    "text": "where I really was introduced to typescript for the first time",
    "start": "166040",
    "end": "172440"
  },
  {
    "text": "um I liked angular uh to begin with and I've used it a lot and I've shipped it",
    "start": "172440",
    "end": "177760"
  },
  {
    "text": "to production uh but when I was introduced to react that's where I",
    "start": "177760",
    "end": "183360"
  },
  {
    "text": "really fell in love with the single page applications the component architecture",
    "start": "183360",
    "end": "189760"
  },
  {
    "text": "all the cool fun things you can do with a modern framework um but as I started exploring",
    "start": "189760",
    "end": "197840"
  },
  {
    "text": "that I I was missing a bit of what I was used to before and that is server rended",
    "start": "197840",
    "end": "204400"
  },
  {
    "text": "Pages where the data that you're interacting with the things you're showing are strongly typed and therefore",
    "start": "204400",
    "end": "211159"
  },
  {
    "text": "uh the tools are vastly helpful for letting you know that the app that",
    "start": "211159",
    "end": "216400"
  },
  {
    "text": "you're writing is going to show up the way you expect and I'm sure we've all seen",
    "start": "216400",
    "end": "223080"
  },
  {
    "text": "this right up top there is undefined it's not an object if you've written front page or C front end applications",
    "start": "223080",
    "end": "231280"
  },
  {
    "text": "uh you run into this and it's kind of annoying after a while you start to",
    "start": "231280",
    "end": "237480"
  },
  {
    "text": "realize that the problems you're facing uh kind of",
    "start": "237480",
    "end": "243879"
  },
  {
    "text": "follow a curve and in this example you you might have some initial qualms with",
    "start": "243879",
    "end": "249959"
  },
  {
    "text": "what you're what business logic you're trying to worry about right and so how hard the problem actually is kind of",
    "start": "249959",
    "end": "256280"
  },
  {
    "text": "follows a curve like this but as time continues you realize that the problems",
    "start": "256280",
    "end": "262479"
  },
  {
    "text": "you're facing are pretty difficult but if it goes long enough you realize it's not",
    "start": "262479",
    "end": "269320"
  },
  {
    "text": "really that hard it's probably something silly probably something that in a",
    "start": "269320",
    "end": "274639"
  },
  {
    "text": "modern application a a type system could help you with and",
    "start": "274639",
    "end": "281360"
  },
  {
    "text": "that's uh kind of the the root of the problem that I see where this happens in your mind",
    "start": "281360",
    "end": "289479"
  },
  {
    "text": "where you are going insane trying to figure out how this one error could be",
    "start": "289479",
    "end": "295880"
  },
  {
    "text": "ca could be causing all of my problems these same types of errors coming up again and",
    "start": "295880",
    "end": "301800"
  },
  {
    "text": "again so I want to talk about kind of DNA of your application and the two",
    "start": "301800",
    "end": "310000"
  },
  {
    "text": "main parts that we have to deal with are your app and your data these two things",
    "start": "310000",
    "end": "316120"
  },
  {
    "text": "commingle together right this is your business logic um this is your",
    "start": "316120",
    "end": "325039"
  },
  {
    "text": "API this is your um your other your other Serv service calls all of the",
    "start": "325039",
    "end": "330960"
  },
  {
    "text": "things that you have to do day to-day and the one thing that I found at",
    "start": "330960",
    "end": "337520"
  },
  {
    "text": "the middle of all of this has been typescript and we're going to talk about how that can help you build better",
    "start": "337520",
    "end": "343840"
  },
  {
    "text": "applications that you can depend",
    "start": "343840",
    "end": "347479"
  },
  {
    "text": "on so first off we're going to talk about why types",
    "start": "349120",
    "end": "355639"
  },
  {
    "text": "and why typescript and graphy well so let's start with types so why types like I said it's kind",
    "start": "355639",
    "end": "364160"
  },
  {
    "text": "of like the DNA of your application it can describe it in ways that are helpful",
    "start": "364160",
    "end": "369319"
  },
  {
    "text": "to you and DNA ends up being a somewhat",
    "start": "369319",
    "end": "374599"
  },
  {
    "text": "good analogy because it's a bunch of random characters and if you were to look hard",
    "start": "374599",
    "end": "381800"
  },
  {
    "text": "enough in here you could start to pick out the patterns but it's not that",
    "start": "381800",
    "end": "386880"
  },
  {
    "text": "descriptive you can start to add descriptions that you may get from other libraries and when you start up a",
    "start": "386880",
    "end": "393639"
  },
  {
    "text": "project a single page application with typescript some of those libraries start to come in and give you some help start",
    "start": "393639",
    "end": "399919"
  },
  {
    "text": "to describe your components describe the things you're working with and then you start to type things",
    "start": "399919",
    "end": "406240"
  },
  {
    "text": "and it really turns it into a description that is helpful for you but",
    "start": "406240",
    "end": "411280"
  },
  {
    "text": "as we'll discover it's a lot more helpful for the tools you use and you",
    "start": "411280",
    "end": "417199"
  },
  {
    "text": "kind of get a compounding effect by using the system together it kind of serves as",
    "start": "417199",
    "end": "424039"
  },
  {
    "text": "documentation for you and your machine that enables you to work better and",
    "start": "424039",
    "end": "430199"
  },
  {
    "text": "create Dependable applications it makes your editor better",
    "start": "430199",
    "end": "437000"
  },
  {
    "text": "you may be using intell or vs code or atom um any any number of",
    "start": "437000",
    "end": "442680"
  },
  {
    "text": "editors but when your tools can lean on these descriptions these",
    "start": "442680",
    "end": "448240"
  },
  {
    "text": "types uh it makes everything",
    "start": "448240",
    "end": "453039"
  },
  {
    "text": "better so for there let's go with why typescript so I've picked typescript",
    "start": "454039",
    "end": "461319"
  },
  {
    "text": "specifically I work with it every day I enjoy it um but that doesn't mean that I",
    "start": "461319",
    "end": "467319"
  },
  {
    "text": "haven't looked at other options there are some it's kind of a",
    "start": "467319",
    "end": "472960"
  },
  {
    "text": "spectrum you can head from one direction to the other you can use just Js vanilla",
    "start": "472960",
    "end": "480840"
  },
  {
    "text": "JavaScript uh as long as you know the types of objects you're working with how",
    "start": "480840",
    "end": "487159"
  },
  {
    "text": "you've describe them uh it works fine you could go and use something like flow",
    "start": "487159",
    "end": "493720"
  },
  {
    "text": "typed this is a way to still write JavaScript but annotate it with types um",
    "start": "493720",
    "end": "500360"
  },
  {
    "text": "this has been fairly popular at Facebook where it was invented um but I found the",
    "start": "500360",
    "end": "505720"
  },
  {
    "text": "the tooling to be lack to be lacking the the community isn't all there um they're",
    "start": "505720",
    "end": "511320"
  },
  {
    "text": "supposedly uh working on this uh trying to make it better um but maybe that'll",
    "start": "511320",
    "end": "517599"
  },
  {
    "text": "bear fruit at some point the other end of the spectrum you have things like Elm Elm is a frontend",
    "start": "517599",
    "end": "523518"
  },
  {
    "text": "framework that purports to not have the ability to give you runtime errors because everything is strongly typed um",
    "start": "523519",
    "end": "531080"
  },
  {
    "text": "everything returns something even if it's nothing or an error you can look at reason this is",
    "start": "531080",
    "end": "538839"
  },
  {
    "text": "probably going to you know we'll probably have to reart all our apps and reason in the next six months right",
    "start": "538839",
    "end": "544079"
  },
  {
    "text": "because that's how fast things are changing but in the mean time I think typescript provides the best balance of",
    "start": "544079",
    "end": "553279"
  },
  {
    "text": "community uh documentation there are many popular projects um that have",
    "start": "553279",
    "end": "559120"
  },
  {
    "text": "started to adopt typescript um because that interoperability between different libraries when everyone's using types uh",
    "start": "559120",
    "end": "566959"
  },
  {
    "text": "really starts to show its Merit so what is",
    "start": "566959",
    "end": "574360"
  },
  {
    "text": "typescript so it's typed it's in the name uh this means that you can annotate",
    "start": "575959",
    "end": "582480"
  },
  {
    "text": "sections of your code objects or functions variables whatever with types",
    "start": "582480",
    "end": "588880"
  },
  {
    "text": "that describe what the shape of the object or the type of the variable is",
    "start": "588880",
    "end": "595600"
  },
  {
    "text": "and we'll look at examples of this so it's also a superet of JavaScript what this means is that the",
    "start": "595600",
    "end": "602920"
  },
  {
    "text": "intention is that all JavaScript is um",
    "start": "602920",
    "end": "608000"
  },
  {
    "text": "interoperable with uh typescript so you can write a Javascript file and it will work with a",
    "start": "608000",
    "end": "614839"
  },
  {
    "text": "typescript tooling and compiler uh so that you don't have to have all",
    "start": "614839",
    "end": "621279"
  },
  {
    "text": "typescript you can still have some JavaScript sprinkled in there um and this helps because this means that this",
    "start": "621279",
    "end": "627360"
  },
  {
    "text": "approach is incrementally adoptable you don't have to rewrite your applications um and there's some other",
    "start": "627360",
    "end": "633600"
  },
  {
    "text": "benefits to that we'll look at um also there's Advanced features so these are language features that uh",
    "start": "633600",
    "end": "641920"
  },
  {
    "text": "haven't yet or can't be implemented in",
    "start": "641920",
    "end": "647399"
  },
  {
    "text": "uh strict emman script um things like uh",
    "start": "647399",
    "end": "653200"
  },
  {
    "text": "there there are some different proposals um one of the one of the more advanced features that we'll look at is generics",
    "start": "653200",
    "end": "659480"
  },
  {
    "text": "um if you've worked with a strongly typed language like Java or C you may be used to these um but it's something that",
    "start": "659480",
    "end": "665639"
  },
  {
    "text": "you can use in typescript and we'll see example of that uh of a you know react component provides some great",
    "start": "665639",
    "end": "673120"
  },
  {
    "text": "flexibility so start off um this is a basic type so we have a",
    "start": "673680",
    "end": "680399"
  },
  {
    "text": "name and here we can annotate it uh as a string",
    "start": "680399",
    "end": "687800"
  },
  {
    "text": "change my color so this string with the colon just",
    "start": "689480",
    "end": "697360"
  },
  {
    "text": "annotates what the type is that you expect it to be if you were to try to",
    "start": "697360",
    "end": "702440"
  },
  {
    "text": "assign a number to this it would fail um it would put a little red squiggly under it we'll see plenty of examples of those",
    "start": "702440",
    "end": "709320"
  },
  {
    "text": "uh that help describe your app so here's a game type slightly more complex you",
    "start": "709320",
    "end": "717880"
  },
  {
    "text": "you can annotate your objects by saying that it's going to be an object with a",
    "start": "717880",
    "end": "723079"
  },
  {
    "text": "name and a score so you have a string and a",
    "start": "723079",
    "end": "727399"
  },
  {
    "text": "number and you can keep going right here's an array we know what our game",
    "start": "728440",
    "end": "734320"
  },
  {
    "text": "type was it has a name and a score and we want the array to actually be an",
    "start": "734320",
    "end": "741639"
  },
  {
    "text": "array of game so changing these properties we'll know that the array",
    "start": "741639",
    "end": "747120"
  },
  {
    "text": "will contain that it cannot contain an array with a game and a and a review or",
    "start": "747120",
    "end": "754320"
  },
  {
    "text": "whatnot like you would be able to do otherwise as array you could just have it contain anything you want",
    "start": "754320",
    "end": "763279"
  },
  {
    "text": "um based on those types you can also do nice tricks and one of those is using",
    "start": "764279",
    "end": "770480"
  },
  {
    "text": "the type of keyword this becomes helpful um once you get into uh wanting to take",
    "start": "770480",
    "end": "778360"
  },
  {
    "text": "data that you're using and infer types based on the description so in this case",
    "start": "778360",
    "end": "786040"
  },
  {
    "text": "you can define an object we defined uh rocket league as a game has the name and",
    "start": "786040",
    "end": "792120"
  },
  {
    "text": "the score it has the same type as before but we haven't declared it as that type",
    "start": "792120",
    "end": "797519"
  },
  {
    "text": "what we want to do in this case is infer the type based",
    "start": "797519",
    "end": "803639"
  },
  {
    "text": "on the actual object so we'll end up taking Ty typescript will go ahead and",
    "start": "803639",
    "end": "810560"
  },
  {
    "text": "and introspect this object and know that it's going to have a name of type string",
    "start": "810560",
    "end": "816240"
  },
  {
    "text": "and a number and then we can use that type to make sure that any following",
    "start": "816240",
    "end": "823560"
  },
  {
    "text": "objects are recognized as the same right you",
    "start": "823560",
    "end": "829360"
  },
  {
    "text": "basically get to declare type and then you can use one based on any information this works particularly well with",
    "start": "829360",
    "end": "836440"
  },
  {
    "text": "primitive types like strings and numbers and what not um and if you get really",
    "start": "836440",
    "end": "842240"
  },
  {
    "text": "crazy you can start to types script your CSS which is a pretty powerful feature when you have objects that are",
    "start": "842240",
    "end": "848360"
  },
  {
    "text": "essentially keys and values uh solves a lot of",
    "start": "848360",
    "end": "854759"
  },
  {
    "text": "problems so here's an example of type inference um",
    "start": "855040",
    "end": "863720"
  },
  {
    "text": "video is not working well in this case uh if you were to um allow the tool to",
    "start": "869639",
    "end": "876959"
  },
  {
    "text": "infer types it would end up allowing you to place uh the actual type of the",
    "start": "876959",
    "end": "885519"
  },
  {
    "text": "function based on the name so you end up with type string and a",
    "start": "885519",
    "end": "893800"
  },
  {
    "text": "number of age and it gets that by actually using",
    "start": "894399",
    "end": "899959"
  },
  {
    "text": "the types of the function itself to infer that for you and that's a benefit of the tools and how um in",
    "start": "899959",
    "end": "908199"
  },
  {
    "text": "this particular case vs code can use typescript and the flag that we've put",
    "start": "908199",
    "end": "915560"
  },
  {
    "text": "here as uh kind of a we can flag it to",
    "start": "915560",
    "end": "920720"
  },
  {
    "text": "essentially allow uh vs code to know I want to look in there and figure out what the types are for me um and this is",
    "start": "920720",
    "end": "928079"
  },
  {
    "text": "nice because this is under a uh quick action in vs code so you can get away",
    "start": "928079",
    "end": "933399"
  },
  {
    "text": "with not having to type as much so this also provides inline",
    "start": "933399",
    "end": "942720"
  },
  {
    "text": "documentation so in this case video is not",
    "start": "944639",
    "end": "950240"
  },
  {
    "text": "working uh in this case if you have a thirdparty library the uh ability of typescript to",
    "start": "950240",
    "end": "958600"
  },
  {
    "text": "provide types either for your components or other components would allow you to uh view uh",
    "start": "958600",
    "end": "967319"
  },
  {
    "text": "documentation that's either pulled in through the uh vs code editor or the uh other components that",
    "start": "967319",
    "end": "976040"
  },
  {
    "text": "you have where you've already declared",
    "start": "976040",
    "end": "979440"
  },
  {
    "text": "types so then you also have autoc correction suggestion in this case typescript has decided that uh it thinks",
    "start": "983160",
    "end": "991440"
  },
  {
    "text": "I have an error and indeed I do I've spelled children incorrectly and it's going to pop up a",
    "start": "991440",
    "end": "997959"
  },
  {
    "text": "little light bulb that will let me autocorrect the uh",
    "start": "997959",
    "end": "1003720"
  },
  {
    "text": "name uh and spot common errors because it's looking into the code that I'm writing my components and providing me",
    "start": "1003720",
    "end": "1012920"
  },
  {
    "text": "help and then renaming cross files apologize the is not working um in",
    "start": "1013720",
    "end": "1021199"
  },
  {
    "text": "this case something that you can do with typescript that you cannot do in normal JavaScript is that once it knows about",
    "start": "1021199",
    "end": "1027720"
  },
  {
    "text": "the modules that you have and the files you have you can uh refactor in a way",
    "start": "1027720",
    "end": "1033600"
  },
  {
    "text": "that you can accomplish with JavaScript um if you rename this custom button",
    "start": "1033600",
    "end": "1039640"
  },
  {
    "text": "props to something else it's going to change it",
    "start": "1039640",
    "end": "1045918"
  },
  {
    "text": "here and it will actually change it over here in a completely different file uh",
    "start": "1045919",
    "end": "1052880"
  },
  {
    "text": "and let and Mark it all across all of the different files and any actual",
    "start": "1052880",
    "end": "1058000"
  },
  {
    "text": "reference because it's not just a smart find and replace it's actually it actually knows specifically what modules",
    "start": "1058000",
    "end": "1065520"
  },
  {
    "text": "you're working with and that's something that you get with typescript that uh is actually not possible currently with",
    "start": "1065520",
    "end": "1071880"
  },
  {
    "text": "regular",
    "start": "1071880",
    "end": "1074320"
  },
  {
    "text": "JavaScript so if you use use vs code you may have seen this hovering at the",
    "start": "1076960",
    "end": "1082200"
  },
  {
    "text": "bottom when you boot it up and this is the JavaScript and typescript language",
    "start": "1082200",
    "end": "1087840"
  },
  {
    "text": "service so if you're writing JavaScript you may experience some of these",
    "start": "1087840",
    "end": "1093280"
  },
  {
    "text": "benefits simply by using a smart editor like vs code uh this is super helpful if",
    "start": "1093280",
    "end": "1099840"
  },
  {
    "text": "you don't have typescript in a project yet you can still get a little help um you can put in that TS check flag in",
    "start": "1099840",
    "end": "1107400"
  },
  {
    "text": "some of your JavaScript files if you'd like and provide a little more help now you don't get as much as if you were to",
    "start": "1107400",
    "end": "1114720"
  },
  {
    "text": "use uh typescript uh specifically um but",
    "start": "1114720",
    "end": "1119960"
  },
  {
    "text": "you can it can be part of your migration strategy if you're starting to adopt",
    "start": "1119960",
    "end": "1126440"
  },
  {
    "text": "it so let's look at generics at the risk of going too much",
    "start": "1128480",
    "end": "1135400"
  },
  {
    "text": "in the weeds we're going to cover this because I find it a really powerful way to provide uh flexible components but",
    "start": "1135400",
    "end": "1143880"
  },
  {
    "text": "then type them and make them specific to what you want when you need to so we'll",
    "start": "1143880",
    "end": "1150600"
  },
  {
    "text": "look at an example in this case imagine that we have a list of",
    "start": "1150600",
    "end": "1156000"
  },
  {
    "text": "games and imagine that we have a component here that is a header pretend",
    "start": "1156000",
    "end": "1163440"
  },
  {
    "text": "you provided a list and when you click on this it sorts it based on some key in",
    "start": "1163440",
    "end": "1169400"
  },
  {
    "text": "this case we have a games array we have a function that we've passed to it and",
    "start": "1169400",
    "end": "1175159"
  },
  {
    "text": "then we have uh the sort key so this in react is declared as a",
    "start": "1175159",
    "end": "1183240"
  },
  {
    "text": "component and at this point we have all of those all of those props that we",
    "start": "1183240",
    "end": "1188760"
  },
  {
    "text": "passed in but we also have",
    "start": "1188760",
    "end": "1194960"
  },
  {
    "text": "this this is just a convention T can stand for for whatever you want uh it is",
    "start": "1194960",
    "end": "1200720"
  },
  {
    "text": "the type that we've passed in so in this case we have uh",
    "start": "1200720",
    "end": "1205960"
  },
  {
    "text": "game and we can tell the component the sort",
    "start": "1205960",
    "end": "1211919"
  },
  {
    "text": "header of the type that we're expecting and all of these types can relate to one",
    "start": "1211919",
    "end": "1217640"
  },
  {
    "text": "another you can kind of pass them around almost like variables and reference them",
    "start": "1217640",
    "end": "1223200"
  },
  {
    "text": "so we know that this T is going to go here and we say that it's a game so so",
    "start": "1223200",
    "end": "1229039"
  },
  {
    "text": "this list those things will match up and this will ensure that when we use the sort",
    "start": "1229039",
    "end": "1236159"
  },
  {
    "text": "header and we tell it the type is game that the list that we provide to it is",
    "start": "1236159",
    "end": "1241400"
  },
  {
    "text": "in forc that it must be a list of games in the same way the sort",
    "start": "1241400",
    "end": "1248640"
  },
  {
    "text": "function will be enforced as a function that can operate on games the sort",
    "start": "1248799",
    "end": "1256840"
  },
  {
    "text": "key has to be a property a key of game so if a game has a name and a",
    "start": "1256840",
    "end": "1265799"
  },
  {
    "text": "score you can't attempt to use um ID as the sort",
    "start": "1265799",
    "end": "1271919"
  },
  {
    "text": "key typescript will prevent you from doing this and your code will not compile when you use",
    "start": "1271919",
    "end": "1278679"
  },
  {
    "text": "this in the same way we can take that same type pass it here and we pass it to",
    "start": "1278679",
    "end": "1284880"
  },
  {
    "text": "another object you can keep kind of chaining these along to guarantee that the functions and keys",
    "start": "1284880",
    "end": "1291799"
  },
  {
    "text": "that you're operating on the different variables are all interrelated in the correct way so you can have a completely",
    "start": "1291799",
    "end": "1299520"
  },
  {
    "text": "generic sort header that can operate on any object you want but you know that",
    "start": "1299520",
    "end": "1304760"
  },
  {
    "text": "all of the little bits that you're interrelating with like this sort function are going to work in this case",
    "start": "1304760",
    "end": "1311000"
  },
  {
    "text": "you've told it that even this function is going to take a list of games and a",
    "start": "1311000",
    "end": "1316200"
  },
  {
    "text": "key that has to be a part game and it's going to return an array of",
    "start": "1316200",
    "end": "1323039"
  },
  {
    "text": "games so here's the real question how do you get started",
    "start": "1326080",
    "end": "1331840"
  },
  {
    "text": "now all of the major JavaScript food groups currently have some variation of",
    "start": "1331840",
    "end": "1337200"
  },
  {
    "text": "typescript support uh vli has it in the uh builtin you pick it an optional when",
    "start": "1337200",
    "end": "1344559"
  },
  {
    "text": "you start up a new project um angular um for those who use angular already",
    "start": "1344559",
    "end": "1351880"
  },
  {
    "text": "know that it's kind of built in they started it that way it was a good decision on their part my opinion react just launched uh support",
    "start": "1351880",
    "end": "1360400"
  },
  {
    "text": "in create react app for providing typescript support and at least in that case you name a JS file a TSX and you're",
    "start": "1360400",
    "end": "1367520"
  },
  {
    "text": "done it's pretty nice um the way the tool ecosystem has",
    "start": "1367520",
    "end": "1375279"
  },
  {
    "text": "improved over the past number of months has been really impressive",
    "start": "1375279",
    "end": "1380440"
  },
  {
    "text": "so that's kind of your app right we've kind of handled your app your local state your",
    "start": "1382600",
    "end": "1390760"
  },
  {
    "text": "props you can type all of that stuff using typescript but then it gets to your data and these things need to be",
    "start": "1390760",
    "end": "1397600"
  },
  {
    "text": "able to communicate with one another and you need to be able to use your data in a Dependable way and it would be nice if",
    "start": "1397600",
    "end": "1404159"
  },
  {
    "text": "you could do that with typescript luckily you can",
    "start": "1404159",
    "end": "1410440"
  },
  {
    "text": "and that starts with graphql so why",
    "start": "1410960",
    "end": "1416760"
  },
  {
    "text": "graphql um let's start with what",
    "start": "1416760",
    "end": "1422200"
  },
  {
    "text": "first straight off the website this is a great description it's a query language for your",
    "start": "1422200",
    "end": "1429159"
  },
  {
    "text": "API it's a runtime for fulfilling those queries with your existing",
    "start": "1429159",
    "end": "1434320"
  },
  {
    "text": "data that means it's adaptable that means you can use data sources you already already",
    "start": "1434320",
    "end": "1439799"
  },
  {
    "text": "have graphql provides a complete and understandable description of the data in your",
    "start": "1439799",
    "end": "1446000"
  },
  {
    "text": "API that's based on the schema that we write to tell our API what our types are",
    "start": "1446000",
    "end": "1452919"
  },
  {
    "text": "it gives the clients the power to ask for exactly what they need and nothing more this solves the problem of over",
    "start": "1452919",
    "end": "1459080"
  },
  {
    "text": "fetching and under fetching if you've researched graphql at all um by the way",
    "start": "1459080",
    "end": "1464360"
  },
  {
    "text": "who who has used graphql cple people who's heard of",
    "start": "1464360",
    "end": "1470840"
  },
  {
    "text": "graphql okay a lot more people that's good uh over fetching and under fetching",
    "start": "1470840",
    "end": "1477960"
  },
  {
    "text": "are a couple big ones uh under fetching refers to the term where you uh have to",
    "start": "1477960",
    "end": "1484799"
  },
  {
    "text": "go back to the server for more information you might get a list of things in a master detail view for",
    "start": "1484799",
    "end": "1490919"
  },
  {
    "text": "example and once you uh have each of the items IDs maybe you have to go back to",
    "start": "1490919",
    "end": "1496960"
  },
  {
    "text": "the server and request a certain set of data for each ID um it creates a lot of",
    "start": "1496960",
    "end": "1502480"
  },
  {
    "text": "requests and makes your app really chatty over the network over fetching is the problem",
    "start": "1502480",
    "end": "1507960"
  },
  {
    "text": "where you may have a restful endpoint that returns uh a certain set of data um",
    "start": "1507960",
    "end": "1515120"
  },
  {
    "text": "but that particular view in your app only needs a little bit of it right so you essentially are sending extra data",
    "start": "1515120",
    "end": "1521279"
  },
  {
    "text": "you're over fetching and you throw half of it away when it gets to the client uh",
    "start": "1521279",
    "end": "1526559"
  },
  {
    "text": "this costs users data uh and is you know hopefully avoidable",
    "start": "1526559",
    "end": "1533320"
  },
  {
    "text": "uh and it is with graphql it's one of the strong bits of it uh makes it easier to evolve apis",
    "start": "1533320",
    "end": "1539880"
  },
  {
    "text": "over the time that's also a great feature uh enables powerful developer",
    "start": "1539880",
    "end": "1545559"
  },
  {
    "text": "tools now this is all awesome and to talk through all of this would literally",
    "start": "1545559",
    "end": "1551440"
  },
  {
    "text": "take a day in any amount of detail um and that's why we're not going to do that uh I don't really care about any of",
    "start": "1551440",
    "end": "1559440"
  },
  {
    "text": "this right now the developer tools part is what really interests me I really",
    "start": "1559440",
    "end": "1565039"
  },
  {
    "text": "think they kind of bury the lead by putting it at the end there uh I think it's a probably the most important",
    "start": "1565039",
    "end": "1570559"
  },
  {
    "text": "aspect of the spec and the tools that come with using",
    "start": "1570559",
    "end": "1575880"
  },
  {
    "text": "graphql so here's some basic types like we looked at basic type script types",
    "start": "1576840",
    "end": "1583640"
  },
  {
    "text": "we'll look at basic graphql types actually start at the bottom",
    "start": "1583640",
    "end": "1589080"
  },
  {
    "text": "with query query can get game can get popular",
    "start": "1589080",
    "end": "1596640"
  },
  {
    "text": "games you can pass arguments to this you can",
    "start": "1596640",
    "end": "1602799"
  },
  {
    "text": "return game and brackets any guess to what the brackets",
    "start": "1602799",
    "end": "1607960"
  },
  {
    "text": "mean it's an array yes so this game refers to the game that",
    "start": "1608080",
    "end": "1615279"
  },
  {
    "text": "we just declared here it's got an ID name URL L summary it's got a cover which is an",
    "start": "1615279",
    "end": "1621760"
  },
  {
    "text": "image and that refers to this guy up here that also has some properties these",
    "start": "1621760",
    "end": "1627880"
  },
  {
    "text": "can relate to each other they can be composed inside of each other just like typescript",
    "start": "1627880",
    "end": "1634158"
  },
  {
    "text": "types when you start working with this you start running queries so",
    "start": "1634919",
    "end": "1642399"
  },
  {
    "text": "queries are how you fetch data we're not going to go into necessarily how that data is is uh",
    "start": "1642399",
    "end": "1650279"
  },
  {
    "text": "gotten you know it could be a service it could be database another API another",
    "start": "1650279",
    "end": "1655919"
  },
  {
    "text": "restful API another graphic API doesn't matter but when you do you end up",
    "start": "1655919",
    "end": "1661320"
  },
  {
    "text": "structuring an object that you send over HTTP and it looks like",
    "start": "1661320",
    "end": "1666559"
  },
  {
    "text": "this in this case I am calling that same get game query I'm saying I want to get",
    "start": "1666559",
    "end": "1672600"
  },
  {
    "text": "a certain ID and I want to get these properties out of it",
    "start": "1672600",
    "end": "1679799"
  },
  {
    "text": "and that turns into this so the nice part is that the shape of the data is",
    "start": "1679799",
    "end": "1687000"
  },
  {
    "text": "the same if you notice there's an analogous structure to my game and my",
    "start": "1687000",
    "end": "1694640"
  },
  {
    "text": "game an ID and name and summary this cover an image is nested just like this",
    "start": "1694640",
    "end": "1702320"
  },
  {
    "text": "structure here so this is the way where you your",
    "start": "1702320",
    "end": "1707799"
  },
  {
    "text": "data data can be predictable and dependable so when you look at the the",
    "start": "1707799",
    "end": "1715720"
  },
  {
    "text": "types you can end up uh with types that you can use in your",
    "start": "1715720",
    "end": "1721720"
  },
  {
    "text": "application and so these follow the same structure now",
    "start": "1721720",
    "end": "1726760"
  },
  {
    "text": "this is typescript that is based off the same types in graphql and that's pretty powerful",
    "start": "1726760",
    "end": "1734120"
  },
  {
    "text": "because now the data you're fetching in your app can be used and interpreted by",
    "start": "1734120",
    "end": "1741120"
  },
  {
    "text": "the same tools that you're already using to develop your app in",
    "start": "1741120",
    "end": "1745640"
  },
  {
    "text": "typescript but what if your schema gets larger now it starts up to that end and",
    "start": "1747440",
    "end": "1754120"
  },
  {
    "text": "and overlaps a bit but as you start adding different bits to your",
    "start": "1754120",
    "end": "1760760"
  },
  {
    "text": "game and by the way this is the internet games database API adapted to graphql",
    "start": "1760760",
    "end": "1769600"
  },
  {
    "text": "as you start adding reviews achievements platforms you start adding more types and it would be pretty frustrating",
    "start": "1769600",
    "end": "1778440"
  },
  {
    "text": "to have to worry about all those types as part of your development",
    "start": "1778440",
    "end": "1784399"
  },
  {
    "text": "workflow you can end up with queries that are fairly long",
    "start": "1784399",
    "end": "1791480"
  },
  {
    "text": "or not quite as long but the different variations that you have to deal",
    "start": "1791480",
    "end": "1797039"
  },
  {
    "text": "with can be problematic when you start to develop any sort of real world",
    "start": "1797039",
    "end": "1802200"
  },
  {
    "text": "application that goes beyond a simple demo so tooling is another win here right and",
    "start": "1802200",
    "end": "1810000"
  },
  {
    "text": "the types that you use enable different tools along the way we've looked at the",
    "start": "1810000",
    "end": "1817278"
  },
  {
    "text": "editor and over time these queries and mutations and other operations you do",
    "start": "1817840",
    "end": "1824240"
  },
  {
    "text": "with graphql the types you're using those will change and having to update",
    "start": "1824240",
    "end": "1829360"
  },
  {
    "text": "the types all the time would probably be frustrating uh luckily there's tools for",
    "start": "1829360",
    "end": "1835039"
  },
  {
    "text": "that too so what does that look",
    "start": "1835039",
    "end": "1839960"
  },
  {
    "text": "like looks like this these are three examples of how to",
    "start": "1840399",
    "end": "1845799"
  },
  {
    "text": "generate types from your graphql schema this is what really clicked for",
    "start": "1845799",
    "end": "1851640"
  },
  {
    "text": "me when I when I I realize that I can have that same dependability",
    "start": "1851640",
    "end": "1858559"
  },
  {
    "text": "that I kind of missed from netland with all the fun of using typescript and",
    "start": "1858559",
    "end": "1866080"
  },
  {
    "text": "react the top one is probably the most popular this is Apollo um they have a",
    "start": "1866080",
    "end": "1871159"
  },
  {
    "text": "whole Suite of tools they have a an environment that you can host graphql",
    "start": "1871159",
    "end": "1876360"
  },
  {
    "text": "implementations they have a server library for multiple languages they have client libraries it's fantastic amplify",
    "start": "1876360",
    "end": "1883639"
  },
  {
    "text": "is also great I've actually shipped a product with this and it's fantastic uh graphql gen is a relatively new one",
    "start": "1883639",
    "end": "1890399"
  },
  {
    "text": "it's kind of not related to any big organization so if you're kind of Indie I guess you could go with that one they",
    "start": "1890399",
    "end": "1896880"
  },
  {
    "text": "all accomplish the same thing though and that is to take the schema and queries that you're using to operate on your",
    "start": "1896880",
    "end": "1903080"
  },
  {
    "text": "data and generate types that you can use in your",
    "start": "1903080",
    "end": "1907840"
  },
  {
    "text": "application the workflow is essentially you have a graphql file you run whatever the generate",
    "start": "1908840",
    "end": "1916440"
  },
  {
    "text": "command is some of them have a watch mode so you don't have to keep running it you can just let it sit there and",
    "start": "1916440",
    "end": "1922880"
  },
  {
    "text": "it's going to generate typescript files for you if you want to use flow it can generate flow for you I wouldn't",
    "start": "1922880",
    "end": "1928760"
  },
  {
    "text": "recommend it use typescript and over over that's kind of",
    "start": "1928760",
    "end": "1934919"
  },
  {
    "text": "the workflow it ends up being pretty simple but what the tools make for you is pretty",
    "start": "1934919",
    "end": "1942000"
  },
  {
    "text": "powerful so remember we have these two queries and",
    "start": "1942000",
    "end": "1948720"
  },
  {
    "text": "the great thing about graphql obviously when we talked about the bit about the over and under fetching is that you can",
    "start": "1948720",
    "end": "1954960"
  },
  {
    "text": "have large queries that return a lot of data so it ends up looking like this",
    "start": "1954960",
    "end": "1961159"
  },
  {
    "text": "once it's all generated and I don't know about you but I do not want to write that so",
    "start": "1961159",
    "end": "1967639"
  },
  {
    "text": "generating it is awesome you will know based on",
    "start": "1967639",
    "end": "1973519"
  },
  {
    "text": "your schema and all of the types involved what the shape shape of your",
    "start": "1973519",
    "end": "1978600"
  },
  {
    "text": "objects are whether things are null I mean that that's probably like 80% of it",
    "start": "1978600",
    "end": "1984200"
  },
  {
    "text": "right there just to know if something's not going to exist all the problems millions of dollars wasted when that",
    "start": "1984200",
    "end": "1991279"
  },
  {
    "text": "happens these things Nest inside of one another they all reference each other kind of big one down here in the end",
    "start": "1991279",
    "end": "1998279"
  },
  {
    "text": "it's the get game so what does that look",
    "start": "1998279",
    "end": "2003480"
  },
  {
    "text": "like well here's an example of doing a query using a follow in a react",
    "start": "2003480",
    "end": "2009799"
  },
  {
    "text": "component so we've used our query here we have the data that comes back",
    "start": "2009799",
    "end": "2015480"
  },
  {
    "text": "and a loading so just as Basics right if if loading is there we'll just load and",
    "start": "2015480",
    "end": "2021039"
  },
  {
    "text": "then once that's not loading anymore we'll have our data so when we reference this you know",
    "start": "2021039",
    "end": "2029399"
  },
  {
    "text": "that data. myy game. reviews is there and for the sake of Simplicity we're",
    "start": "2029399",
    "end": "2034799"
  },
  {
    "text": "just going to spit it out on the page and that's great uh that works fairly",
    "start": "2034799",
    "end": "2041039"
  },
  {
    "text": "well but if you notice we aren't actually referencing any types",
    "start": "2041039",
    "end": "2046518"
  },
  {
    "text": "here we want to make sure that our data access is safe so at this",
    "start": "2048079",
    "end": "2053520"
  },
  {
    "text": "point you've probably done something like this which is kind of stepping",
    "start": "2053520",
    "end": "2058800"
  },
  {
    "text": "through the nested objects and this is necessary obviously because depending on how you work with the schema nested",
    "start": "2058800",
    "end": "2067240"
  },
  {
    "text": "stuff is is totally cool it's going to happen because that's the nature of",
    "start": "2067240",
    "end": "2074158"
  },
  {
    "text": "graphql but do we know if this is right turns out anyone can Spot the",
    "start": "2074599",
    "end": "2081800"
  },
  {
    "text": "Difference way up there at the top nice thing about typescript especially when using with jsx is that many libraries",
    "start": "2081800",
    "end": "2089240"
  },
  {
    "text": "have started to provide generic implementations so in the same way we looked at generics before and we know",
    "start": "2089240",
    "end": "2097760"
  },
  {
    "text": "that we can pass in types to other components that way the component can be",
    "start": "2097760",
    "end": "2105240"
  },
  {
    "text": "smart about what it returns to us in this case Apollo is returning this data",
    "start": "2105240",
    "end": "2112560"
  },
  {
    "text": "and we suddenly have a red squiggle under our",
    "start": "2112560",
    "end": "2118040"
  },
  {
    "text": "reviews so something we're doing here isn't quite right because the only thing",
    "start": "2118040",
    "end": "2124320"
  },
  {
    "text": "we did was add this get games at the top",
    "start": "2124320",
    "end": "2129640"
  },
  {
    "text": "now remember that of down here at the bottom is get game so it's going to look at the",
    "start": "2130359",
    "end": "2139880"
  },
  {
    "text": "game that we typed for our query that get game interface and it's going to know the",
    "start": "2139880",
    "end": "2147000"
  },
  {
    "text": "shape that's going to happen uh when we actually start to access our data and",
    "start": "2147000",
    "end": "2152319"
  },
  {
    "text": "when we look over at reviews it says that it's possibly null or undefined and",
    "start": "2152319",
    "end": "2157440"
  },
  {
    "text": "it knows this because it's looked at the type vs code is uh very very good with",
    "start": "2157440",
    "end": "2163720"
  },
  {
    "text": "introspecting and it's very fast when working with typescript um I've been very impressed with the little amount of",
    "start": "2163720",
    "end": "2169960"
  },
  {
    "text": "overhead that's actually occurred uh or that I've noticed when dealing with",
    "start": "2169960",
    "end": "2176760"
  },
  {
    "text": "this so what this allows us to do is is",
    "start": "2178880",
    "end": "2184240"
  },
  {
    "text": "notice when we're possibly going to be shipping something that can",
    "start": "2184240",
    "end": "2189800"
  },
  {
    "text": "break uh and that's the big thing um so a couple tools and tips uh related",
    "start": "2189800",
    "end": "2198880"
  },
  {
    "text": "to this when you start messing with nested data I found this utility to be",
    "start": "2198880",
    "end": "2204680"
  },
  {
    "text": "super powerful and you can see the example of it right here you import this and this is based",
    "start": "2204680",
    "end": "2212359"
  },
  {
    "text": "on the optional chaining operator um I believe groovy has this uh some other",
    "start": "2212359",
    "end": "2220599"
  },
  {
    "text": "languages have something like it um it basically allows s safe access of nested",
    "start": "2220599",
    "end": "2227240"
  },
  {
    "text": "objects so in this case you can wrap the initial one here this",
    "start": "2227240",
    "end": "2233680"
  },
  {
    "text": "data and allow you to safely say my game. reviews and then you can give it a",
    "start": "2233680",
    "end": "2240440"
  },
  {
    "text": "default as an empty array so you don't have to do that logical and chaining all",
    "start": "2240440",
    "end": "2247640"
  },
  {
    "text": "the way down through nested objects but you can safely provide a default where",
    "start": "2247640",
    "end": "2252880"
  },
  {
    "text": "now all you have to check is there a link there if it's true then we want to show",
    "start": "2252880",
    "end": "2258960"
  },
  {
    "text": "the reviews otherwise no reviews and that's also pretty",
    "start": "2258960",
    "end": "2266160"
  },
  {
    "text": "great so the next part I want to talk about is fragments and so just like we have types",
    "start": "2266160",
    "end": "2273240"
  },
  {
    "text": "composed of other types um graphql can do the same thing and it's really helpful when you use a",
    "start": "2273240",
    "end": "2281240"
  },
  {
    "text": "certain bit of information multiple times in your application in different places so this reviews might be a good",
    "start": "2281240",
    "end": "2289040"
  },
  {
    "text": "example because we might want what is essentially a review um not in this list",
    "start": "2289040",
    "end": "2294960"
  },
  {
    "text": "but uh you know in a in a different game or in a summary view detail view",
    "start": "2294960",
    "end": "2302960"
  },
  {
    "text": "whatever and so we can extract these like we make uh more complex types in in",
    "start": "2302960",
    "end": "2309839"
  },
  {
    "text": "typescript and in graphql you call it fragment you can give it a name and you tell it what type it's a fragment of in",
    "start": "2309839",
    "end": "2318560"
  },
  {
    "text": "this case on review so that same little bit that we had",
    "start": "2318560",
    "end": "2324640"
  },
  {
    "text": "there is what we use here and now we can use",
    "start": "2324640",
    "end": "2333599"
  },
  {
    "text": "it in our schema in that",
    "start": "2333599",
    "end": "2340440"
  },
  {
    "text": "case and it will generate us a type that we can use here and if anyone noticed I",
    "start": "2340440",
    "end": "2347160"
  },
  {
    "text": "declare this as any uh really shouldn't do this but for the",
    "start": "2347160",
    "end": "2353319"
  },
  {
    "text": "sake of example it's here uh if you can at all invoid it don't type your stuff",
    "start": "2353319",
    "end": "2358359"
  },
  {
    "text": "as any uh use these types that are generated for you so in that",
    "start": "2358359",
    "end": "2364720"
  },
  {
    "text": "case when we've extracted a component out we can use this",
    "start": "2364720",
    "end": "2369760"
  },
  {
    "text": "review that was generated for us by Apollo or any of the other libraries and",
    "start": "2369760",
    "end": "2376839"
  },
  {
    "text": "type a component uh type a component to um iterate in a list or",
    "start": "2376839",
    "end": "2385160"
  },
  {
    "text": "show another bit that where it knows uh its type in the same way that you would",
    "start": "2385160",
    "end": "2390760"
  },
  {
    "text": "declare it if you had written the type",
    "start": "2390760",
    "end": "2394280"
  },
  {
    "text": "yourself so how do you get started with this",
    "start": "2396319",
    "end": "2402400"
  },
  {
    "text": "um you can start by wrapping a current",
    "start": "2402400",
    "end": "2408119"
  },
  {
    "text": "API this is super helpful for uh taking",
    "start": "2408119",
    "end": "2413400"
  },
  {
    "text": "a bite out of little sections of probably what is a current restful",
    "start": "2413400",
    "end": "2419960"
  },
  {
    "text": "API and adopting it to typescript that way maybe uh if you're if you're",
    "start": "2419960",
    "end": "2425520"
  },
  {
    "text": "starting a green field application um I really contend that you should probably go ahead and start it as a",
    "start": "2425520",
    "end": "2432240"
  },
  {
    "text": "graphql API um the benefits of it I",
    "start": "2432240",
    "end": "2438160"
  },
  {
    "text": "think really outweigh any sorts of costs um I believe maybe Edge caching is the",
    "start": "2438160",
    "end": "2444359"
  },
  {
    "text": "only thing that you could really do with rest that you couldn't do with graphql",
    "start": "2444359",
    "end": "2451079"
  },
  {
    "text": "um but it's you know truly unless you're unless you're just an absolutely massive",
    "start": "2451079",
    "end": "2457520"
  },
  {
    "text": "company uh you may not really it may be worth it it may be totally worth it you may not need uh that small bit of",
    "start": "2457520",
    "end": "2464640"
  },
  {
    "text": "performance but overall uh getting these tools and how typescript and graphql can",
    "start": "2464640",
    "end": "2471560"
  },
  {
    "text": "interact with each other and save you developer time is uh is absolutely worth",
    "start": "2471560",
    "end": "2476720"
  },
  {
    "text": "it in my opinion so to forgive the corny clip",
    "start": "2476720",
    "end": "2484560"
  },
  {
    "text": "part the point is to move the power power from the third party or",
    "start": "2484560",
    "end": "2491480"
  },
  {
    "text": "you whoever and whatever data you're accessing and move it to you in",
    "start": "2491480",
    "end": "2497440"
  },
  {
    "text": "typescript because regardless of if that API is under your control or not if",
    "start": "2497440",
    "end": "2503680"
  },
  {
    "text": "something changes the objects that you've coded to in your applications",
    "start": "2503680",
    "end": "2509760"
  },
  {
    "text": "will be the same and most client libraries including Apollo provide for",
    "start": "2509760",
    "end": "2515640"
  },
  {
    "text": "uh very nice error handling where you can gracefully show errors but your",
    "start": "2515640",
    "end": "2522440"
  },
  {
    "text": "actual object structure remains intact uh in case um that way your",
    "start": "2522440",
    "end": "2529280"
  },
  {
    "text": "components do not you know Redbox your users because that's really what we want to avoid at the end of the day it's",
    "start": "2529280",
    "end": "2535560"
  },
  {
    "text": "great to have tools that help us as developers um but not having something",
    "start": "2535560",
    "end": "2540640"
  },
  {
    "text": "blow up in a user's face because one thing was there one day and not the next",
    "start": "2540640",
    "end": "2546359"
  },
  {
    "text": "um is is you know definitely a",
    "start": "2546359",
    "end": "2552200"
  },
  {
    "text": "win so the point is to shed light on what your data looks like right that way",
    "start": "2555079",
    "end": "2560760"
  },
  {
    "text": "you know and your tools know how they can help you um I found this interesting uh this",
    "start": "2560760",
    "end": "2569160"
  },
  {
    "text": "is from rbar um they put out a bunch of projects uh they kind of do crash",
    "start": "2569160",
    "end": "2574760"
  },
  {
    "text": "analytics and monitoring um this was their list of the top 10 JavaScript errors I found this really",
    "start": "2574760",
    "end": "2582000"
  },
  {
    "text": "interesting because if you notice a lot of them are type errors and really up at the top of quite",
    "start": "2582000",
    "end": "2590200"
  },
  {
    "text": "a bit of them and this is a lot so if you do type your components and type your objects you know we can get rid of",
    "start": "2590200",
    "end": "2597280"
  },
  {
    "text": "that one and that one no it's not an object we can get rid of that one uh object doesn't support it that won't",
    "start": "2597280",
    "end": "2603480"
  },
  {
    "text": "happen anymore undefined no nope no nope so the vast majority of the errors",
    "start": "2603480",
    "end": "2611760"
  },
  {
    "text": "that you will face on a day-to-day basis on average will be solvable by",
    "start": "2611760",
    "end": "2617960"
  },
  {
    "text": "typing your components and the main point I like to make is",
    "start": "2617960",
    "end": "2623720"
  },
  {
    "text": "once these tools are in place and all they're they're all incrementally adoptable you don't have to rewrite your",
    "start": "2623720",
    "end": "2630599"
  },
  {
    "text": "whole app to use typescript you don't have to rewrite your whole API to use graphql you can start to bite these off",
    "start": "2630599",
    "end": "2636040"
  },
  {
    "text": "in pieces and give yourself small wins until eventually your entire app is",
    "start": "2636040",
    "end": "2642319"
  },
  {
    "text": "typed so when you have types you can generate code with them",
    "start": "2642319",
    "end": "2647640"
  },
  {
    "text": "you can generate your documentation your queries are based off types you can go",
    "start": "2647640",
    "end": "2652680"
  },
  {
    "text": "even so far as to um generate types or databases or vice",
    "start": "2652680",
    "end": "2659240"
  },
  {
    "text": "versa excuse me uh your services um they can they can int",
    "start": "2659240",
    "end": "2665680"
  },
  {
    "text": "introspect your types and and utilize them you can generate code for your services all of these things can all be",
    "start": "2665680",
    "end": "2671960"
  },
  {
    "text": "inter relatable once you have an endtoend uh type safety for your",
    "start": "2671960",
    "end": "2679640"
  },
  {
    "text": "applications and again the main point is that of all the other benefits types",
    "start": "2683160",
    "end": "2689920"
  },
  {
    "text": "equal tools and that's the most powerful bit that is that is really uh I've",
    "start": "2689920",
    "end": "2696599"
  },
  {
    "text": "really enjoyed the past months learning about this and working with it been able",
    "start": "2696599",
    "end": "2702319"
  },
  {
    "text": "to ship products that I can go back and change and not worry I can change my API",
    "start": "2702319",
    "end": "2708520"
  },
  {
    "text": "and the second I regenerate types I know where it's going to break and the the most important part is once that happens",
    "start": "2708520",
    "end": "2715200"
  },
  {
    "text": "you cannot ship broken code your code won't compile unless you",
    "start": "2715200",
    "end": "2720800"
  },
  {
    "text": "make the red squiggles go away the red squiggles show up when anything changes that can potentially break your your",
    "start": "2720800",
    "end": "2727119"
  },
  {
    "text": "users will not get you know red boxes of death showing up on their",
    "start": "2727119",
    "end": "2732640"
  },
  {
    "text": "screens uh it's it's an Absol absolutely like mental overhead just goes away",
    "start": "2732640",
    "end": "2738240"
  },
  {
    "text": "because you don't have to worry about did I forget this thing what is that object again I don't remember if this if",
    "start": "2738240",
    "end": "2744000"
  },
  {
    "text": "this API was this way you have all of that and your editor does too and that's",
    "start": "2744000",
    "end": "2750760"
  },
  {
    "text": "the most uh that's it's the greatest it's the greatest feeling ever to have",
    "start": "2750760",
    "end": "2755839"
  },
  {
    "text": "have this workflow uh down so here's some resources uh start",
    "start": "2755839",
    "end": "2763000"
  },
  {
    "text": "at the top um obviously typ script Lang graphql Apollo it's a fantastic",
    "start": "2763000",
    "end": "2769960"
  },
  {
    "text": "library and kind of whole ecosystem um amplify like I said earlier",
    "start": "2769960",
    "end": "2775319"
  },
  {
    "text": "I've used that extensively uh it's an absolutely great tool chain um if you",
    "start": "2775319",
    "end": "2781000"
  },
  {
    "text": "want to know more know more about that or any of these things um come talk to me after the session I'd be more than",
    "start": "2781000",
    "end": "2787400"
  },
  {
    "text": "happy to talk your ear off about it and thank you for listening",
    "start": "2787400",
    "end": "2794500"
  },
  {
    "text": "[Applause]",
    "start": "2794500",
    "end": "2801860"
  }
]