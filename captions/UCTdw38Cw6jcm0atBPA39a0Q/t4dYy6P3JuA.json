[
  {
    "start": "0",
    "end": "69000"
  },
  {
    "text": "all right hey welcome everybody I'm Nick",
    "start": "5550",
    "end": "10590"
  },
  {
    "text": "I've wanted to give this talk for really long time this is a session about pausing little languages in c-sharp so",
    "start": "10590",
    "end": "17789"
  },
  {
    "text": "you might call them to me specific languages maybe but really we're talking about any kind of little language that",
    "start": "17789",
    "end": "24930"
  },
  {
    "text": "you could embed into your own applications and I really want by the end of this talk for you to feel like",
    "start": "24930",
    "end": "30060"
  },
  {
    "text": "you not only could but that you might actually consider giving this sort of",
    "start": "30060",
    "end": "35550"
  },
  {
    "text": "thing a try and real-world projects so unfortunately if you read too quickly",
    "start": "35550",
    "end": "41040"
  },
  {
    "text": "and you got pausing c-sharp and you're expecting a Roseland talk the door is still open but I can't really think of",
    "start": "41040",
    "end": "49140"
  },
  {
    "text": "anything that I've that any programming technique that I've learned that has had a bigger impact on the kind of software",
    "start": "49140",
    "end": "54360"
  },
  {
    "text": "that I could consider writing than this so even if you were expecting Rosslyn you still probably might get something",
    "start": "54360",
    "end": "60120"
  },
  {
    "text": "out of this this hour so let's get stuck in let's pay a clicker so Eric Maya who",
    "start": "60120",
    "end": "73740"
  },
  {
    "start": "69000",
    "end": "234000"
  },
  {
    "text": "I think you'd probably recognize for his work in c-sharp on the link language",
    "start": "73740",
    "end": "79770"
  },
  {
    "text": "features particularly he once quipped that dependency injection is for",
    "start": "79770",
    "end": "87209"
  },
  {
    "text": "programmers who don't know maths he's got a good sense of humor I think but so",
    "start": "87209",
    "end": "96270"
  },
  {
    "text": "sometime back in 2008-2009 I was sitting at my desk hey my boss is really interested in this",
    "start": "96270",
    "end": "104999"
  },
  {
    "text": "dependency injection stuff we're just down in the cafe could you come down and maybe answer a few questions for us I",
    "start": "104999",
    "end": "111380"
  },
  {
    "text": "show up at cafe Eric Meyer okay so the",
    "start": "111380",
    "end": "116639"
  },
  {
    "text": "first time I publicly admitted this but I feel some kind of responsibility is that I might have failed to really get",
    "start": "116639",
    "end": "123179"
  },
  {
    "text": "the beauty and joy of composition using IRC and dependency injection across him",
    "start": "123179",
    "end": "129119"
  },
  {
    "text": "but at the same time it came down to I came to write this talk and there's",
    "start": "129119",
    "end": "135270"
  },
  {
    "text": "those words again and I thought yeah well I've got an hour to deliver the talk and",
    "start": "135270",
    "end": "142890"
  },
  {
    "text": "I won't get all the content into an hour surely so we'll save ten minutes for the questions at the end and then I need at",
    "start": "142890",
    "end": "150810"
  },
  {
    "text": "least 30 slides so how long have I got to present each slide and if we all tab",
    "start": "150810",
    "end": "158820"
  },
  {
    "text": "across thought well I don't learn math obviously but I know a few things about",
    "start": "158820",
    "end": "165060"
  },
  {
    "text": "computers so could I come up with a scheme to get a computer to solve this problem for me so here you go at",
    "start": "165060",
    "end": "172440"
  },
  {
    "text": "something like one hour - 10 minutes for questions oh hang on oh and we need some parens",
    "start": "172440",
    "end": "180870"
  },
  {
    "text": "because I know nothing else about that why the hell are - 10 minutes and how",
    "start": "180870",
    "end": "188430"
  },
  {
    "text": "many 30 slides ok so we've got 1 minute",
    "start": "188430",
    "end": "193680"
  },
  {
    "text": "and 40 seconds for each slide I can just about squeeze it into that if we've got",
    "start": "193680",
    "end": "199350"
  },
  {
    "text": "10 minutes for questions at the end and I'll probably need 30 seconds for every question ten minutes divided by 30",
    "start": "199350",
    "end": "208200"
  },
  {
    "text": "seconds per question okay I probably could have worked that out in my head",
    "start": "208200",
    "end": "214010"
  },
  {
    "text": "still and lots of domains it's really nice to be able to express a problem in",
    "start": "214010",
    "end": "220019"
  },
  {
    "text": "a natural way and as programmers we really intuitively know that languages have the optimal vehicle for this just",
    "start": "220019",
    "end": "230010"
  },
  {
    "text": "switch back across sorry you it's a",
    "start": "230010",
    "end": "236489"
  },
  {
    "start": "234000",
    "end": "325000"
  },
  {
    "text": "little bit like if you remember when you first encounter the database the the way that you queried it was probably with something like a visual query designer",
    "start": "236489",
    "end": "242850"
  },
  {
    "text": "where you dragged on tables and join them up and and now that's a that's a",
    "start": "242850",
    "end": "248880"
  },
  {
    "text": "good experience if you have no if you have no knowledge of databases and you need to get data out but if you spend",
    "start": "248880",
    "end": "254070"
  },
  {
    "text": "all day every day dealing with an application the way that the people who use the software that all of us write do",
    "start": "254070",
    "end": "261390"
  },
  {
    "text": "then you know that often like being able to express a query in sequel is a must",
    "start": "261390",
    "end": "266729"
  },
  {
    "text": "there's no way you could imagine being a programmer and working with a query design in there and it's very much the same for",
    "start": "266729",
    "end": "272380"
  },
  {
    "text": "lots of lots of our users as well but historically at least with the teams",
    "start": "272380",
    "end": "279280"
  },
  {
    "text": "I've worked with we're really really hesitant to embark on adding languages into up into our projects I'm not sure",
    "start": "279280",
    "end": "285910"
  },
  {
    "text": "if it's because we're afraid that there's some specific knowledge that means the next program are down the line",
    "start": "285910",
    "end": "292840"
  },
  {
    "text": "won't be able to maintain it I kind of suspect that when we first encounter",
    "start": "292840",
    "end": "298450"
  },
  {
    "text": "languages it's in an academic setting and there's a huge and really interesting field to explore there and",
    "start": "298450",
    "end": "305490"
  },
  {
    "text": "all the really sophisticated techniques that you might use if you're if you're implementing something like a",
    "start": "305490",
    "end": "312760"
  },
  {
    "text": "programming language day to day it how easy it is to use very simple techniques to approach these problems in languages",
    "start": "312760",
    "end": "321340"
  },
  {
    "text": "like C sharp doing things like writing business apps so once I discovered what",
    "start": "321340",
    "end": "328240"
  },
  {
    "start": "325000",
    "end": "440000"
  },
  {
    "text": "I was what what I want to show to you today it was like having four loops in",
    "start": "328240",
    "end": "334210"
  },
  {
    "text": "the tool box or learning object-oriented programming I mean there was just a whole host of ways of approaching",
    "start": "334210",
    "end": "340180"
  },
  {
    "text": "software and ways of tackling problems that all of a sudden became open to me like when I started working on octopus",
    "start": "340180",
    "end": "347050"
  },
  {
    "text": "deploy right back with poster ville there was a feature where you could substitute variables into your",
    "start": "347050",
    "end": "352930"
  },
  {
    "text": "configuration files but you can generate configuration files or conditionally construct those and so a little language",
    "start": "352930",
    "end": "359650"
  },
  {
    "text": "was born in there for conditionally for flow control and and looping that let",
    "start": "359650",
    "end": "364960"
  },
  {
    "text": "you do a lot more I'm sure some of you probably have used those sorts of techniques today and I can't imagine",
    "start": "364960",
    "end": "370930"
  },
  {
    "text": "octopus without it myself I worked with a hospital who had a an admission system for expecting expectant",
    "start": "370930",
    "end": "380800"
  },
  {
    "text": "mothers coming in to give birth and there was this legislated list of questions that had to be asked in a",
    "start": "380800",
    "end": "386230"
  },
  {
    "text": "particular way and it would they the questions would change every month sorry every year that they had to answer and",
    "start": "386230",
    "end": "392590"
  },
  {
    "text": "deliver back to the health department unfortunately because this was implemented as a large web performance",
    "start": "392590",
    "end": "399340"
  },
  {
    "text": "application it took something like 18 months to go and grind through that list of quest turned into an app that you could",
    "start": "399340",
    "end": "405220"
  },
  {
    "text": "actually enter data into so there's obviously a problem there and once we came back to taking the questions as",
    "start": "405220",
    "end": "412659"
  },
  {
    "text": "they were delivered and using a small language to conditionally show or hide",
    "start": "412659",
    "end": "418020"
  },
  {
    "text": "those questions based on previous answers we took that whole process down from 18 months to a matter of hours",
    "start": "418020",
    "end": "426240"
  },
  {
    "text": "unfortunately we build it in a Silverlight and and literally one month",
    "start": "426240",
    "end": "432849"
  },
  {
    "text": "after we finished the project the hospital I believe standard that has some iPads and that was the end of that",
    "start": "432849",
    "end": "438569"
  },
  {
    "text": "so he went some you lose some I also when I when I hit the problem of",
    "start": "438569",
    "end": "444550"
  },
  {
    "start": "440000",
    "end": "643000"
  },
  {
    "text": "getting better diagnostics out of dotnet apps spotted a chance for using the",
    "start": "444550",
    "end": "449949"
  },
  {
    "text": "languages in logging which might have encountered in stereo log and Sarah logs",
    "start": "449949",
    "end": "455469"
  },
  {
    "text": "got a filtering filtering language built into it too which is something that like that's also indispensable in this kind",
    "start": "455469",
    "end": "461560"
  },
  {
    "text": "of software but these are things that I wouldn't have I wouldn't have imagined attempting to write hadn't had I'm not I",
    "start": "461560",
    "end": "468729"
  },
  {
    "text": "kind of ripped the bandage often and learned how to deal with tech pausing text so if we go back and have a look at",
    "start": "468729",
    "end": "482229"
  },
  {
    "text": "the little duration calculated that we ran earlier most of you can probably see",
    "start": "482229",
    "end": "488169"
  },
  {
    "text": "the essence of the the problem just straight off the straight off the bat like that when we want to evaluate",
    "start": "488169",
    "end": "496569"
  },
  {
    "text": "something like one hour - 10 minutes divided by 30 we kind of intuitively",
    "start": "496569",
    "end": "502060"
  },
  {
    "text": "know that that the shade of the problem is a tree and irrespective of the",
    "start": "502060",
    "end": "508630"
  },
  {
    "text": "programming language it's pretty normal to represent these sorts of structures in trees for example we might have",
    "start": "508630",
    "end": "517020"
  },
  {
    "text": "abstract hierarchy where there's expression duration value numeric value",
    "start": "517020",
    "end": "523270"
  },
  {
    "text": "and some kind of binary expression though that can have a left and a right expression and operator most of us are",
    "start": "523270",
    "end": "530740"
  },
  {
    "text": "fairly comfortable with working with trees because we do that every day so",
    "start": "530740",
    "end": "536550"
  },
  {
    "text": "why is it that oh and of course here's is I think just case in point that the",
    "start": "536550",
    "end": "544320"
  },
  {
    "text": "code to evaluate this particular language once you have kind of kind of",
    "start": "544320",
    "end": "549779"
  },
  {
    "text": "gotten your problem into the shape of a tree is very short II you could sweat away over over switch statements or and",
    "start": "549779",
    "end": "557370"
  },
  {
    "text": "recursion in the afternoon and and be able to compute a result so everyone's",
    "start": "557370",
    "end": "562860"
  },
  {
    "text": "fairly comfortable I guess with recursion with yeah everyone will be quite happy with a tree and writing a",
    "start": "562860",
    "end": "569850"
  },
  {
    "text": "procedure to go through and evaluate this but be comfortable with writing a positive to get to the tree this was",
    "start": "569850",
    "end": "577380"
  },
  {
    "text": "this was my pretty common as well so we've got the input language and it's a",
    "start": "577380",
    "end": "585480"
  },
  {
    "text": "string of characters and we want to somehow just bunch those up in just the",
    "start": "585480",
    "end": "592110"
  },
  {
    "text": "right way that once we've processed those and walked through them we'll have a tree that we can then go and use for a",
    "start": "592110",
    "end": "598980"
  },
  {
    "text": "regular programming to to evaluate the",
    "start": "598980",
    "end": "604350"
  },
  {
    "text": "nice thing is that this is just programming but unfortunately the the",
    "start": "604350",
    "end": "613200"
  },
  {
    "text": "techniques are kind of distinctive to this space so we've all seen our regular expressions can can be used to chop up a",
    "start": "613200",
    "end": "620910"
  },
  {
    "text": "string into into components that are all linear but if you want to produce a tree",
    "start": "620910",
    "end": "626880"
  },
  {
    "text": "from that output you have to reuse a parser there's no recursion in regular expressions and there's no or there's no",
    "start": "626880",
    "end": "634020"
  },
  {
    "text": "stack I guess and trying to use one where you need the other is obviously",
    "start": "634020",
    "end": "639589"
  },
  {
    "text": "world of pain so what is a passer",
    "start": "639589",
    "end": "647660"
  },
  {
    "start": "643000",
    "end": "734000"
  },
  {
    "text": "so deep no a parser is just a function that takes a string as input essentially",
    "start": "647750",
    "end": "654720"
  },
  {
    "text": "and gives you a value as an output that's kind of everything and nothing",
    "start": "654720",
    "end": "660180"
  },
  {
    "text": "about the problem right to make useful parsers that can manage",
    "start": "660180",
    "end": "668449"
  },
  {
    "text": "sophisticated languages that we have to be a little bit more prescriptive and although our positive functions are",
    "start": "668449",
    "end": "675029"
  },
  {
    "text": "going to have very much that shape of taking it and take your string as an input produce the result is an output I",
    "start": "675029",
    "end": "680489"
  },
  {
    "text": "want to introduce you to two little structs that will appear through the code that we're going to write input",
    "start": "680489",
    "end": "687539"
  },
  {
    "text": "wraps the source string and it gives you a position into that string so where",
    "start": "687539",
    "end": "693539"
  },
  {
    "text": "you're up to as far as having consumed the the characters to produce that value and a result tells you whether you",
    "start": "693539",
    "end": "702359"
  },
  {
    "text": "whether you successfully passed a value or not and in both cases either what was",
    "start": "702359",
    "end": "707909"
  },
  {
    "text": "the remainder after passing the value or where did you hit the error and there's",
    "start": "707909",
    "end": "713579"
  },
  {
    "text": "not really a way to kind of just continue these are both immutable so you don't kind of go around and push the",
    "start": "713579",
    "end": "719669"
  },
  {
    "text": "position of an input along so together you get a new input you have to consume",
    "start": "719669",
    "end": "725069"
  },
  {
    "text": "a character from an existing input and then using next char and that will give you a value and the remainder so how's",
    "start": "725069",
    "end": "736559"
  },
  {
    "start": "734000",
    "end": "819000"
  },
  {
    "text": "this going to work this is a very it's a very simple parsing problem it's not the",
    "start": "736559",
    "end": "741839"
  },
  {
    "text": "most simple but let's take natural numbers for example the algorithm for",
    "start": "741839",
    "end": "746909"
  },
  {
    "text": "parsing a natural number if you think about working through this one character at a time is that we see at one if we're",
    "start": "746909",
    "end": "755759"
  },
  {
    "text": "sparse 123 and then we move on and is the next character also a number and if",
    "start": "755759",
    "end": "762449"
  },
  {
    "text": "it is we'll multiply that first one that we saw by 10 to shift it up a place and then tack on the next thing that we saw",
    "start": "762449",
    "end": "768059"
  },
  {
    "text": "which is that too as we keep working through this through that string at each time we find another character we'll",
    "start": "768059",
    "end": "774239"
  },
  {
    "text": "multiply whatever we've got it got by 10 and then take that last one I'm so mad I",
    "start": "774239",
    "end": "779659"
  },
  {
    "text": "can get that by now it's a little bit noisy once you include input and result",
    "start": "779659",
    "end": "786899"
  },
  {
    "text": "into into the equation but here's here's a reasonably defensible part of the",
    "start": "786899",
    "end": "792299"
  },
  {
    "text": "parser for working through an input and parsing off the natural number and",
    "start": "792299",
    "end": "797729"
  },
  {
    "text": "giving the remainder whatever whatever input has not yet been parsed and it's not code that I like it's fairly ugly but",
    "start": "797729",
    "end": "808130"
  },
  {
    "text": "it's code that anyone given some some time to think about the problem could obviously put together so parses being",
    "start": "808130",
    "end": "822630"
  },
  {
    "start": "819000",
    "end": "968000"
  },
  {
    "text": "functions we can write functions to do all kinds of parsing tasks and we don't necessarily have to write an a function",
    "start": "822630",
    "end": "828990"
  },
  {
    "text": "if we just want to parse the letter A or a B function to pass the letter B the",
    "start": "828990",
    "end": "834120"
  },
  {
    "text": "char function here is a parameterised parser where you can tell it which part which character you want to match so it",
    "start": "834120",
    "end": "840810"
  },
  {
    "text": "might be in a b c and then the result of that that char function will be a the",
    "start": "840810",
    "end": "848820"
  },
  {
    "text": "character if that was the first thing that was seen the input or it might be an empty result if that if that",
    "start": "848820",
    "end": "854760"
  },
  {
    "text": "character didn't appear so if you've got",
    "start": "854760",
    "end": "863370"
  },
  {
    "text": "a character positive for parsing natural numbers which there wasn't any magic in and once or any magic or char that char",
    "start": "863370",
    "end": "872490"
  },
  {
    "text": "unicode info docket digit value is probably magic I don't know how that works there's got to be something shifting involved in that but if you can",
    "start": "872490",
    "end": "880410"
  },
  {
    "text": "pass natural numbers and you can parse characters you can imagine writing another positive for fractional parts",
    "start": "880410",
    "end": "886020"
  },
  {
    "text": "which is very much like natural except that instead of multiplying by 10 each time we move out of place",
    "start": "886020",
    "end": "891840"
  },
  {
    "text": "every time we move off into those fractional digits which is that way for you then we would divide the the next",
    "start": "891840",
    "end": "899850"
  },
  {
    "text": "number by 10 to add it on so given three fairly simple fairly simple parses we",
    "start": "899850",
    "end": "906330"
  },
  {
    "text": "can then go and write another function and it's also got that same signature where we're taking an input and provided",
    "start": "906330",
    "end": "912270"
  },
  {
    "text": "producing a result and this one's going to parse decimal numbers in this case we",
    "start": "912270",
    "end": "918030"
  },
  {
    "text": "apply the natural positive the whole part if we failed then we bail out if we",
    "start": "918030",
    "end": "926370"
  },
  {
    "text": "can then pass a dot we move on we don't really do anything with that value",
    "start": "926370",
    "end": "931520"
  },
  {
    "text": "and then we apply the fraction Pazza and if the fraction part has a value then we're able to add the whole in",
    "start": "931520",
    "end": "936980"
  },
  {
    "text": "fractional parts and there we go we have a double what do you think of this code",
    "start": "936980",
    "end": "945410"
  },
  {
    "text": "I hate it I can't imagine I can't imagine trying to maintain any kind of a",
    "start": "945410",
    "end": "951290"
  },
  {
    "text": "giant code base that's written in that style that's probably why you wouldn't",
    "start": "951290",
    "end": "956300"
  },
  {
    "text": "imagine being able to scale from some sort of simple little parser that looks at numbers up to being able to really pass a whole programming language with",
    "start": "956300",
    "end": "962510"
  },
  {
    "text": "these techniques but let's tear it all down reset and start again",
    "start": "962510",
    "end": "968319"
  },
  {
    "start": "968000",
    "end": "1038000"
  },
  {
    "text": "so because pauses are functions that there are some tools in c-sharp for",
    "start": "968380",
    "end": "973730"
  },
  {
    "text": "dealing with functions that we can apply to make working with pauses a lot easier and much more pleasant the term might",
    "start": "973730",
    "end": "983000"
  },
  {
    "text": "kind of be higher-order functions but we don't want to get too technical right not getting into maths or anything like",
    "start": "983000",
    "end": "988250"
  },
  {
    "text": "that either this Pazza so to declare a parser we",
    "start": "988250",
    "end": "995090"
  },
  {
    "text": "first needed a delegate type to work with passes as functions we need a delegate type the the positive t",
    "start": "995090",
    "end": "1000520"
  },
  {
    "text": "delegate is just capturing that signature where we've got an input and we're returning a result with value once",
    "start": "1000520",
    "end": "1006550"
  },
  {
    "text": "we have that delegate type though we can start to write other functions that will process parses into new passes and many",
    "start": "1006550",
    "end": "1013180"
  },
  {
    "text": "is a really really a really neat little example here where we have a positive",
    "start": "1013180",
    "end": "1018340"
  },
  {
    "text": "for an item and you can imagine that being something that turns Smiley's into the unicode equivalence and then we have",
    "start": "1018340",
    "end": "1024610"
  },
  {
    "text": "this function many and if we call many with the smiley parser passed in we get",
    "start": "1024610",
    "end": "1030490"
  },
  {
    "text": "a new positive that can give us lists of spy Smiley's that's really powerful",
    "start": "1030490",
    "end": "1036550"
  },
  {
    "text": "concept but to fit that model of course we then have to go back and revise",
    "start": "1036550",
    "end": "1042670"
  },
  {
    "start": "1038000",
    "end": "1124000"
  },
  {
    "text": "things like char and char now tin in this version of the code is a function",
    "start": "1042670",
    "end": "1048520"
  },
  {
    "text": "that doesn't actually do the parsing but will take the input and we're sorry that",
    "start": "1048520",
    "end": "1054610"
  },
  {
    "text": "would that would take the character and then close over that and give us a new positive that that will match that",
    "start": "1054610",
    "end": "1059770"
  },
  {
    "text": "character so back to the problem of parsing",
    "start": "1059770",
    "end": "1066970"
  },
  {
    "text": "decimal numbers the repeated code that we saw in there was that apply one",
    "start": "1066970",
    "end": "1072160"
  },
  {
    "text": "parser check whether the result had a value if it didn't return an empty value with a particular remainder and if it",
    "start": "1072160",
    "end": "1078940"
  },
  {
    "text": "did move on to the next part so given that we can work on parses this way this",
    "start": "1078940",
    "end": "1084370"
  },
  {
    "text": "this function then is a sequencing operator that will take the deposit",
    "start": "1084370",
    "end": "1089679"
  },
  {
    "text": "which is the first thing that we're going to try to match and then return the new parser that are in the second",
    "start": "1089679",
    "end": "1095950"
  },
  {
    "text": "part we're going to try to match and then return new positive that's going to apply the first and then apply the second and inside the body of that",
    "start": "1095950",
    "end": "1101830"
  },
  {
    "text": "little lamda there you can see the same pattern that repeated three times in parsing decimal the return function is a",
    "start": "1101830",
    "end": "1111790"
  },
  {
    "text": "helper that will see used in the next little slide and it just is a simple",
    "start": "1111790",
    "end": "1117030"
  },
  {
    "text": "simple puzzle that always returns a value regardless of the input and doesn't consume anything but with these",
    "start": "1117030",
    "end": "1123340"
  },
  {
    "text": "two ingredients we can take a much better swing at building a maintainable",
    "start": "1123340",
    "end": "1130110"
  },
  {
    "start": "1124000",
    "end": "1216000"
  },
  {
    "text": "parser out of those component passes that we've already constructed so you",
    "start": "1130110",
    "end": "1137140"
  },
  {
    "text": "can see here the nice thing about this is it as well that it reads like English or reads like the grammar that describes",
    "start": "1137140",
    "end": "1143380"
  },
  {
    "text": "the language so to pass a double we pass an opossum natural type Oh didn't spot",
    "start": "1143380",
    "end": "1148870"
  },
  {
    "text": "that then we we take that whole part that was passed and we construct a char",
    "start": "1148870",
    "end": "1155530"
  },
  {
    "text": "parser and if that matches then we take the dot and ignore it and then we apply",
    "start": "1155530",
    "end": "1161230"
  },
  {
    "text": "the fractional part and then if those have all succeeded we return the whole number plus the fraction so this",
    "start": "1161230",
    "end": "1169390"
  },
  {
    "text": "technique is really is really interesting not just because it's succinct but also because it's kind of",
    "start": "1169390",
    "end": "1174670"
  },
  {
    "text": "fractal you can take a simple parser and build a more complex parser and with",
    "start": "1174670",
    "end": "1179770"
  },
  {
    "text": "just these few building blocks you can you can build passes for really arbitrarily complex languages that all",
    "start": "1179770",
    "end": "1185920"
  },
  {
    "text": "have the same kind of structure at each level and this techniques been known for quite a long time as I think at least",
    "start": "1185920",
    "end": "1192490"
  },
  {
    "text": "not since the 60s but quite another people have worked on it",
    "start": "1192490",
    "end": "1198500"
  },
  {
    "text": "and two computer science researchers cemented its popularity I think with an",
    "start": "1198500",
    "end": "1205070"
  },
  {
    "text": "article in 1996 about it and one of those of course happens to be Eric Amaya",
    "start": "1205070",
    "end": "1210280"
  },
  {
    "text": "and so given that dr. Meyers had something to do with this it's probably",
    "start": "1210280",
    "end": "1216170"
  },
  {
    "start": "1216000",
    "end": "1265000"
  },
  {
    "text": "no surprise at all that the c-sharp language has some really good facilities for doing this kind of functional",
    "start": "1216170",
    "end": "1222290"
  },
  {
    "text": "programming and this kind of combination of pausing big things from small things",
    "start": "1222290",
    "end": "1228490"
  },
  {
    "text": "so with the c-sharp query comprehensions we can create a function called select",
    "start": "1228490",
    "end": "1234260"
  },
  {
    "text": "many which fits into that from instructure and it behaves very much",
    "start": "1234260",
    "end": "1239270"
  },
  {
    "text": "like then and so now we not only have a composable way of building parsers but",
    "start": "1239270",
    "end": "1245750"
  },
  {
    "text": "we have a little domain-specific language that lets us express things like from well we take the whole but we",
    "start": "1245750",
    "end": "1251780"
  },
  {
    "text": "take the the dot and then we take the fraction and all of the features of link like let and we're going there to give",
    "start": "1251780",
    "end": "1258830"
  },
  {
    "text": "us a really a really succinct and powerful language for writing passes so I think that's really awesome then of",
    "start": "1258830",
    "end": "1267530"
  },
  {
    "start": "1265000",
    "end": "1297000"
  },
  {
    "text": "course and return and not the only games in town once you've got this capability",
    "start": "1267530",
    "end": "1273470"
  },
  {
    "text": "there are all sorts of things that you can cook up to tackle different kinds of syntactic structures like if you are",
    "start": "1273470",
    "end": "1280220"
  },
  {
    "text": "positing a list then you can write a Combinator called many and it will take an item parser or many delimited by will",
    "start": "1280220",
    "end": "1286340"
  },
  {
    "text": "take those items and look for another parser in between them like the comma that you'd find between items in a java",
    "start": "1286340",
    "end": "1291950"
  },
  {
    "text": "script list for example so the even",
    "start": "1291950",
    "end": "1300470"
  },
  {
    "start": "1297000",
    "end": "1384000"
  },
  {
    "text": "better news is that you don't have to go and write all of this yourself if you",
    "start": "1300470",
    "end": "1307160"
  },
  {
    "text": "were really itching though to get back in back back to the hotel room and crack open an ID and start writing parsers",
    "start": "1307160",
    "end": "1312560"
  },
  {
    "text": "that's totally cool and I don't wanted to tell you but there are some libraries",
    "start": "1312560",
    "end": "1317900"
  },
  {
    "text": "already available in c-sharp and done that for doing this the one that we're",
    "start": "1317900",
    "end": "1322910"
  },
  {
    "text": "going to look at through some some further examples is called super power is this is the second attempt that I've",
    "start": "1322910",
    "end": "1328970"
  },
  {
    "text": "trying to write a parser combinator library for c-sharp and this one comes",
    "start": "1328970",
    "end": "1334070"
  },
  {
    "text": "with of course a set of Combinator's like then and and many and or and it",
    "start": "1334070",
    "end": "1340460"
  },
  {
    "text": "also comes with a very large library of pre-built pauses like the numeric pauses and pauses for decimal syntax and those",
    "start": "1340460",
    "end": "1348740"
  },
  {
    "text": "kinds of things so it can take a lot of that nitty-gritty out of trying to build a parser for a new language it's still",
    "start": "1348740",
    "end": "1356000"
  },
  {
    "text": "good to know though how all of those little individual unit passes are working because the nice thing about",
    "start": "1356000",
    "end": "1361970"
  },
  {
    "text": "working with positive combinators is they still are just code and they run like programs and if you can write code",
    "start": "1361970",
    "end": "1368240"
  },
  {
    "text": "you you can debug code you can you can try writing a positive for a particular kind of language and then you can you",
    "start": "1368240",
    "end": "1374060"
  },
  {
    "text": "can debug your way through that which is which is a big difference from if you're trying to express something in an e BN f",
    "start": "1374060",
    "end": "1379580"
  },
  {
    "text": "grammar and use the language workbench and yeah of course there's some there's",
    "start": "1379580",
    "end": "1386300"
  },
  {
    "start": "1384000",
    "end": "1584000"
  },
  {
    "text": "a whole lot more to it to that we're gonna have a look at so the first part will look at this built of superpower is",
    "start": "1386300",
    "end": "1392540"
  },
  {
    "text": "this one called magnitude if you recall we have a little domain-specific language for computing durations and the",
    "start": "1392540",
    "end": "1401180"
  },
  {
    "text": "unique thing I think about that language is just the duration syntax I say unique it appears in a few places but it's not",
    "start": "1401180",
    "end": "1408560"
  },
  {
    "text": "something you typically find in in day-to-day programming languages and this parser is called magnitude because",
    "start": "1408560",
    "end": "1416330"
  },
  {
    "text": "it's what we're going to use to pass that little trailing piece of tech stuff and the number to decide how big that",
    "start": "1416330",
    "end": "1423110"
  },
  {
    "text": "duration is it's not called duration because we've already a library passive",
    "start": "1423110",
    "end": "1428390"
  },
  {
    "text": "for passing numbers okay so when we want to pass ten minutes we just need to find the minutes bit and then we'll multiply",
    "start": "1428390",
    "end": "1434210"
  },
  {
    "text": "that by ten to get ten minutes written here it's quite verbose and being a",
    "start": "1434210",
    "end": "1441530"
  },
  {
    "text": "being a program it could be refactored I haven't done that just because I think the structure is nice and clear",
    "start": "1441530",
    "end": "1448310"
  },
  {
    "text": "and you if you read your way through it you can see that we'll try to match a character D and if that's if that",
    "start": "1448310",
    "end": "1454610"
  },
  {
    "text": "matches the value is one day or we'll try to match the character H and that'll",
    "start": "1454610",
    "end": "1460190"
  },
  {
    "text": "be it with the value of an hour",
    "start": "1460190",
    "end": "1463090"
  },
  {
    "text": "things get a little bit interesting around M&Ms now if we were to put",
    "start": "1465730",
    "end": "1471429"
  },
  {
    "text": "minutes ahead just following that sequence that we have been working",
    "start": "1471429",
    "end": "1476600"
  },
  {
    "text": "through and we encountered an M in the input then that empowers would succeed",
    "start": "1476600",
    "end": "1482899"
  },
  {
    "text": "and we never looked to see whether there's a trailing s to decide whether it's minutes or milliseconds this is",
    "start": "1482899",
    "end": "1488450"
  },
  {
    "text": "kind of one of the consequences of writing a part of like a dumb program but it's also one of the benefits",
    "start": "1488450",
    "end": "1493879"
  },
  {
    "text": "because the way that you resolve these sorts of ambiguities is really straightforward if you're used to sequencing programs it's like well of",
    "start": "1493879",
    "end": "1499610"
  },
  {
    "text": "course we'll just try the MS bit first before we try and match the M in that way if we could chomp up that whole MS",
    "start": "1499610",
    "end": "1507019"
  },
  {
    "text": "then we don't don't need to try the M and if we fail we'll just backtrack and",
    "start": "1507019",
    "end": "1512480"
  },
  {
    "text": "the M power will kick in try stuck in the middle there I should say character",
    "start": "1512480",
    "end": "1517700"
  },
  {
    "text": "equal to D or character equal to H is exactly the char parser that we saw a few minutes ago it's just that it's",
    "start": "1517700",
    "end": "1523580"
  },
  {
    "text": "organized alongside a whole lot of other kinds of char passes like letter and digit and those sorts of things under",
    "start": "1523580",
    "end": "1528830"
  },
  {
    "text": "that character class if we parse our way through something with the superpower and we fail partway through the input",
    "start": "1528830",
    "end": "1536450"
  },
  {
    "text": "then that will generally completely fail the whole parsing the whole parsing a",
    "start": "1536450",
    "end": "1542990"
  },
  {
    "text": "job because reporting errors really really relies on giving back information",
    "start": "1542990",
    "end": "1548629"
  },
  {
    "text": "that's really specific so if we if we parse our way through some input and we fail that's it or doesn't actually try",
    "start": "1548629",
    "end": "1555139"
  },
  {
    "text": "to pick up another another parser and try the next one in the sequence and so",
    "start": "1555139",
    "end": "1561919"
  },
  {
    "text": "the try Combinator is in there that causes this one to backtrack because we do want to continue if we partially mash",
    "start": "1561919",
    "end": "1567379"
  },
  {
    "text": "EMS I didn't I didn't say this was all going to be super super super easy",
    "start": "1567379",
    "end": "1574119"
  },
  {
    "text": "only that it's coded and that it's understandable from that perspective of working through an algorithm rather than",
    "start": "1574119",
    "end": "1580940"
  },
  {
    "text": "trying to understand a grammar once we have magnitude we can start to pass",
    "start": "1580940",
    "end": "1588440"
  },
  {
    "start": "1584000",
    "end": "1657000"
  },
  {
    "text": "durations and in this instance we used the decimal double parser",
    "start": "1588440",
    "end": "1596259"
  },
  {
    "text": "and it matches the numeric part and the name is awful but the name comes about",
    "start": "1596299",
    "end": "1601679"
  },
  {
    "text": "because the library of parsers were using has pauses that simply match a span of text with names like decimal and",
    "start": "1601679",
    "end": "1609000"
  },
  {
    "text": "then they have there's a vet there's a lot of variants for some of them for efficiently turning that span of text",
    "start": "1609000",
    "end": "1615570"
  },
  {
    "text": "into a particulate on that type there is decimal there's decimal double there's also a decimal decimal token just tells us that",
    "start": "1615570",
    "end": "1624330"
  },
  {
    "text": "it's okay to surround that with white space so it's another puzzle that goes and tries to chomp through as much white",
    "start": "1624330",
    "end": "1629520"
  },
  {
    "text": "spaces it finds before applying the positive that it wraps and then we see",
    "start": "1629520",
    "end": "1635039"
  },
  {
    "text": "them as we did in that in the earlier one where we try and apply magnitude and if we succeed on both then we can pop",
    "start": "1635039",
    "end": "1641909"
  },
  {
    "text": "back out a duration a duration that that captures that time span that that the",
    "start": "1641909",
    "end": "1648059"
  },
  {
    "text": "expression or the token has isn't encoded",
    "start": "1648059",
    "end": "1653360"
  },
  {
    "start": "1657000",
    "end": "1766000"
  },
  {
    "text": "so one of the strong benefits of this parsers being code and passes being the",
    "start": "1658059",
    "end": "1666049"
  },
  {
    "text": "same at all levels is that you don't just test the overall grammar for the whole programming language or justment",
    "start": "1666049",
    "end": "1672499"
  },
  {
    "text": "domain-specific language that you're building here we've got a test that's just for gr8 parsing durations and we",
    "start": "1672499",
    "end": "1678139"
  },
  {
    "text": "can use a little help a function called test pass a sorry try parcel which we'll",
    "start": "1678139",
    "end": "1683509"
  },
  {
    "text": "just go and apply that part we've passed through she's the one we're testing give it some input and then we can assert",
    "start": "1683509",
    "end": "1689059"
  },
  {
    "text": "different things about what we've got out of that and that works whether we're talking about pausing a duration pausing",
    "start": "1689059",
    "end": "1696049"
  },
  {
    "text": "some kind of binary operation or pausing the entire expression and these are these are also highly amenable to",
    "start": "1696049",
    "end": "1702799"
  },
  {
    "text": "data-driven testing where we take a whole list of possible inputs and we loop through and and put them through a",
    "start": "1702799",
    "end": "1708440"
  },
  {
    "text": "function like this and test them against their list of possible outputs so to counter anyone who tells you that you",
    "start": "1708440",
    "end": "1714229"
  },
  {
    "text": "shouldn't write parses in your biz apps or whatever it is that you're that you're doing for real parses are so much",
    "start": "1714229",
    "end": "1721729"
  },
  {
    "text": "more regular and and so much more testable and modular than anything like a web form that they're really they're",
    "start": "1721729",
    "end": "1728509"
  },
  {
    "text": "really much more controllable when you when you're doing things like testing and changing them I mean I can imagine",
    "start": "1728509",
    "end": "1734719"
  },
  {
    "text": "there's some really colossal web forms out there that that no one would think twice about writing but which is",
    "start": "1734719",
    "end": "1740149"
  },
  {
    "text": "certainly not anywhere near as testable as a parser I can also imagine somebody",
    "start": "1740149",
    "end": "1745190"
  },
  {
    "text": "right now sitting behind their cubicle monitor in some colossal MBC form like",
    "start": "1745190",
    "end": "1752569"
  },
  {
    "text": "and Entering durations and checking them with checkboxes and grouping them up and applying operators like yeah the",
    "start": "1752569",
    "end": "1759319"
  },
  {
    "text": "alternative of writing things without a parser is often a lot messier than if you're if you're going to use these techniques so given that we can pass",
    "start": "1759319",
    "end": "1771379"
  },
  {
    "start": "1766000",
    "end": "1806000"
  },
  {
    "text": "durations and passing operators is pretty simple here I have factored things a bit the OP",
    "start": "1771379",
    "end": "1779239"
  },
  {
    "text": "function takes the symbol and then the parser that represents but the sorry",
    "start": "1779239",
    "end": "1784759"
  },
  {
    "text": "takes the symbol and then the enum member that represents the operator and so we have plus gives this operator ad and um- gives us",
    "start": "1784759",
    "end": "1794760"
  },
  {
    "text": "subtract and so on and so again it's just programming so we can get those",
    "start": "1794760",
    "end": "1800850"
  },
  {
    "text": "four for the price of kind of one and a half we won't do too many more slides of",
    "start": "1800850",
    "end": "1811110"
  },
  {
    "text": "just kind of like piles of piles of pausing code but this one is the meat of",
    "start": "1811110",
    "end": "1816560"
  },
  {
    "text": "the duration language that we've been looking at and we probably need to spend",
    "start": "1816560",
    "end": "1823290"
  },
  {
    "text": "a little bit of time looking closely at it because this is I think the the one that captures the difference between the",
    "start": "1823290",
    "end": "1829950"
  },
  {
    "text": "really linear parsing that we've been doing and being able to kind of recursively construct those those",
    "start": "1829950",
    "end": "1835860"
  },
  {
    "text": "expressions that are that we're going to represent as trees so literal is pretty",
    "start": "1835860",
    "end": "1841050"
  },
  {
    "text": "simple it's the the lowest level kind of node in the language so literal is",
    "start": "1841050",
    "end": "1849960"
  },
  {
    "text": "either a duration or a number and we see because durations start with numbers we have to backtrack potentially using try",
    "start": "1849960",
    "end": "1856770"
  },
  {
    "text": "so that we don't fail having seen just the numeric part factor as has an",
    "start": "1856770",
    "end": "1862110"
  },
  {
    "text": "interesting name and the names may be a little off-putting but factor is the the",
    "start": "1862110",
    "end": "1868440"
  },
  {
    "text": "part of this language where it might be what you would find on the left left or",
    "start": "1868440",
    "end": "1873690"
  },
  {
    "text": "right hand side of a multiplication or a division because we're dealing with operator precedence the things that kind",
    "start": "1873690",
    "end": "1880500"
  },
  {
    "text": "of bound more tightly wrapped up towards the top of these little parses and the",
    "start": "1880500",
    "end": "1885690"
  },
  {
    "text": "things that are bound more loose they're down the bottom so a factor we have a left paren and then we recursively pass",
    "start": "1885690",
    "end": "1892470"
  },
  {
    "text": "an expression and then a right paren and so this is how that how you apply the",
    "start": "1892470",
    "end": "1897570"
  },
  {
    "text": "language to sorry this is how you applied the positive to something like at 100 - 10 minutes in brackets so that",
    "start": "1897570",
    "end": "1905120"
  },
  {
    "text": "so that that's grouped up and can be multiplied by another value and if",
    "start": "1905120",
    "end": "1915920"
  },
  {
    "text": "otherwise the the literal is the kind of tightest unit and if we go up a little bit further on we've got two",
    "start": "1915920",
    "end": "1922570"
  },
  {
    "text": "which is something that you might add to something else and it uses a helper function called chain because pausing",
    "start": "1922570",
    "end": "1929190"
  },
  {
    "text": "left associative Graham expression grammars like this one is a really",
    "start": "1929190",
    "end": "1934270"
  },
  {
    "text": "common task and so there's lots of little library helpers to make that easier and chain will just take take",
    "start": "1934270",
    "end": "1940480"
  },
  {
    "text": "deposit for the value and then whatever the the auto sorry it will take the",
    "start": "1940480",
    "end": "1948160"
  },
  {
    "text": "operator and the operands and you and use that to construct some kind of binary expression node term and",
    "start": "1948160",
    "end": "1955540"
  },
  {
    "text": "expression are really very similar in that one is applying more flower divide",
    "start": "1955540",
    "end": "1960940"
  },
  {
    "text": "Dylan applying add or subtract this could be a little bit it could be a",
    "start": "1960940",
    "end": "1966970"
  },
  {
    "text": "little bit horrific still to look at and I think this is one of the other points that's important to realize when you set",
    "start": "1966970",
    "end": "1975130"
  },
  {
    "text": "out to build a positive or a language that you've concocted for your own purposes when you when you set out to",
    "start": "1975130",
    "end": "1983500"
  },
  {
    "text": "write a language to solve a problem it's very rare that the language is the interesting thing it's usually the",
    "start": "1983500",
    "end": "1988840"
  },
  {
    "text": "problem that's the interesting thing the the model of your domain is where",
    "start": "1988840",
    "end": "1994360"
  },
  {
    "text": "everything that's unique to your language is going to be so I can write 1 plus 1 in JavaScript or sequel or sequel",
    "start": "1994360",
    "end": "2002220"
  },
  {
    "text": "query or probably in XSLT if I encode it right and that looks the same in all of",
    "start": "2002220",
    "end": "2010200"
  },
  {
    "text": "those since in taxes but the the semantics of I've actually executing that is very different so if you put",
    "start": "2010200",
    "end": "2017820"
  },
  {
    "start": "2014000",
    "end": "2078000"
  },
  {
    "text": "your x-ray goggles on you can see that there's a whole lot of commonality between most of the languages that we",
    "start": "2017820",
    "end": "2023820"
  },
  {
    "text": "that we as programmers were designed to solve problems we have you might have",
    "start": "2023820",
    "end": "2029220"
  },
  {
    "text": "expressions there's there's data types like strings and lists and numbers and",
    "start": "2029220",
    "end": "2034950"
  },
  {
    "text": "no one no one goes out to invent their own decimal syntax or and if you've got to encode strings then you probably",
    "start": "2034950",
    "end": "2040410"
  },
  {
    "text": "adopt something like JavaScript strings or sequel strings and so because of this",
    "start": "2040410",
    "end": "2046640"
  },
  {
    "text": "there are there are only really a few sort of skeletons for most of the kinds",
    "start": "2046640",
    "end": "2052260"
  },
  {
    "text": "of languages that you might write and I can't sit and write the correct code for a parser like that",
    "start": "2052260",
    "end": "2060419"
  },
  {
    "text": "expression one we were just looking out on the first pop off the top of my head however I don't need to because I open",
    "start": "2060419",
    "end": "2065908"
  },
  {
    "text": "up any example expression positive written with super power or otherwise and I that structure is kind of there",
    "start": "2065909",
    "end": "2073799"
  },
  {
    "text": "and documented and somebody else has solved that problem before so you don't",
    "start": "2073799",
    "end": "2079108"
  },
  {
    "text": "think that yet I don't think you really have to go back and really understand every every single approach to every parsing problem to be able to be",
    "start": "2079109",
    "end": "2084868"
  },
  {
    "text": "effective with this stuff take a little bit of the pain sometimes and things like constructing an expression tree and",
    "start": "2084869",
    "end": "2090358"
  },
  {
    "text": "then and then adding in those elements like different kinds of values and different kinds of operations is where",
    "start": "2090359",
    "end": "2096118"
  },
  {
    "text": "your language will become interesting so before we can run the deposit that we",
    "start": "2096119",
    "end": "2102089"
  },
  {
    "text": "have written for expressions it's important to check that the part of the",
    "start": "2102089",
    "end": "2109079"
  },
  {
    "text": "string that we're trying to parse is actually the complete input so you can see there's one one little helper they're called source which takes the",
    "start": "2109079",
    "end": "2115200"
  },
  {
    "text": "expression uses a Combinator called at end just to assert that the result of that pass has consumed everything and",
    "start": "2115200",
    "end": "2122420"
  },
  {
    "text": "then try pars is just a little wrapper that that goes and constructs the source",
    "start": "2122420",
    "end": "2127890"
  },
  {
    "text": "object and cause the parser and returns a result out but so that all adds up to",
    "start": "2127890",
    "end": "2134039"
  },
  {
    "text": "give us what we've been looking at a few minutes ago so if we have a look at how",
    "start": "2134039",
    "end": "2140970"
  },
  {
    "text": "it behaves you see it does work I think",
    "start": "2140970",
    "end": "2146328"
  },
  {
    "text": "oh yes I should probably um hey I can't",
    "start": "2149100",
    "end": "2156390"
  },
  {
    "text": "we probably need some brackets there for what that would make any sense so that that red arrow there is one that you get",
    "start": "2156390",
    "end": "2162210"
  },
  {
    "text": "when the expression syntactically makes sense but that's in the evaluator as said well you've got a a time value when",
    "start": "2162210",
    "end": "2169680"
  },
  {
    "text": "you're trying to a subtraction number but there are other kinds of mistakes that we can make when we're when we're",
    "start": "2169680",
    "end": "2176190"
  },
  {
    "text": "working with the languages and most of the time because this is built with a",
    "start": "2176190",
    "end": "2181590"
  },
  {
    "text": "framework that has a whole lot of code for dealing with producing good error messages from from broken parses you'll",
    "start": "2181590",
    "end": "2191010"
  },
  {
    "text": "get a message that makes some sense yeah there might not be enough input there",
    "start": "2191010",
    "end": "2199950"
  },
  {
    "text": "might be something like I channeled my German heritage 45 tug there we go an",
    "start": "2199950",
    "end": "2205740"
  },
  {
    "text": "unexpected T or something that just doesn't make any sense at all now but",
    "start": "2205740",
    "end": "2212520"
  },
  {
    "text": "this is where the difference between different approaches to parsing start to",
    "start": "2212520",
    "end": "2217820"
  },
  {
    "text": "really make it really make themselves felt because an error message like",
    "start": "2217820",
    "end": "2223650"
  },
  {
    "text": "unexpected one when you're looking at an input like 10 10 makes sense to a",
    "start": "2223650",
    "end": "2229620"
  },
  {
    "text": "developer if that was in the exception message if that was an exception message",
    "start": "2229620",
    "end": "2238400"
  },
  {
    "text": "and I knew that I was pausing some kind of expression that I'd be perfectly fine with going and tracking that down",
    "start": "2238400",
    "end": "2245060"
  },
  {
    "text": "however little languages will crop up that that make it easier to write",
    "start": "2245060",
    "end": "2251160"
  },
  {
    "text": "programs but they're mostly for the benefit of users so if we were going into to actually ship something like",
    "start": "2251160",
    "end": "2257700"
  },
  {
    "text": "this in in a replacement for a giant a giant web form oh hang on I can't f5",
    "start": "2257700",
    "end": "2265530"
  },
  {
    "text": "that I might want it to look a little bit a little bit more like this okay so",
    "start": "2265530",
    "end": "2271530"
  },
  {
    "text": "here we have our old inputs a 10 plus 45",
    "start": "2271530",
    "end": "2278060"
  },
  {
    "text": "okay so this is this is telling I've got an invalid duration I've got an unexpected T if I have ten ten again an",
    "start": "2278060",
    "end": "2287790"
  },
  {
    "text": "error that's an unexpected number ten so these are these are starting to approach",
    "start": "2287790",
    "end": "2294180"
  },
  {
    "text": "the kinds of error messages that you could show to a to a human user and maybe this could be another reason for the trepidation that people feel when",
    "start": "2294180",
    "end": "2300119"
  },
  {
    "text": "they're going to add a parser into a real-world project because producing good error messages for users that make",
    "start": "2300119",
    "end": "2305550"
  },
  {
    "text": "sense and don't result in you know emails and support calls is a little bit",
    "start": "2305550",
    "end": "2311250"
  },
  {
    "text": "trickier but I think it's important to understand where that lines drawn so",
    "start": "2311250",
    "end": "2316440"
  },
  {
    "text": "that if you are in one of the one of the boats or the other whether you're writing a parser that's going to be used",
    "start": "2316440",
    "end": "2322530"
  },
  {
    "text": "by developers probably yourself or your in team versus if you're going to have third party users you you're probably",
    "start": "2322530",
    "end": "2329460"
  },
  {
    "text": "better off setting setting off down the right path from the very beginning and so to produce better error messages like",
    "start": "2329460",
    "end": "2335790"
  },
  {
    "text": "these ones we need to go just a little bit further so the technique that that",
    "start": "2335790",
    "end": "2344820"
  },
  {
    "start": "2342000",
    "end": "2362000"
  },
  {
    "text": "produces messages like unexpected duration expected operator it is made",
    "start": "2344820",
    "end": "2352560"
  },
  {
    "text": "much easier by an approach called token driven passing and I think that the",
    "start": "2352560",
    "end": "2359130"
  },
  {
    "text": "techniques were sorry I skipped ahead but if you take a cat the character",
    "start": "2359130",
    "end": "2365880"
  },
  {
    "start": "2362000",
    "end": "2386000"
  },
  {
    "text": "stream we've been passing like a simple little operator like that we're looking at everything a character at a time and that's very useful for our understanding",
    "start": "2365880",
    "end": "2373859"
  },
  {
    "text": "of that task because the person makes a lot of it makes a simple algorithm",
    "start": "2373859",
    "end": "2379440"
  },
  {
    "text": "working through the cat those characters and everything sort of at the same the same at every level but to a user",
    "start": "2379440",
    "end": "2387720"
  },
  {
    "start": "2386000",
    "end": "2461000"
  },
  {
    "text": "there's a lot of higher order structure in their users are typically going to be",
    "start": "2387720",
    "end": "2393030"
  },
  {
    "text": "thinking of those as as whole tokens like 10m is a is a duration I'm not",
    "start": "2393030",
    "end": "2399060"
  },
  {
    "text": "really looking at a 1 a 0 and M when I'm a user and so the job of a tokenizer",
    "start": "2399060",
    "end": "2404520"
  },
  {
    "text": "which is a kind of a just offense a glorified preprocessor for for input like this is to go through in group",
    "start": "2404520",
    "end": "2411440"
  },
  {
    "text": "those tokens and discard all of that trivia that you don't need in order to",
    "start": "2411440",
    "end": "2416630"
  },
  {
    "text": "successfully pass the thing by doing that we can attach a whole lot of",
    "start": "2416630",
    "end": "2421700"
  },
  {
    "text": "information to those in the process it's not the same it's not the same as just doing some parsing first because",
    "start": "2421700",
    "end": "2428860"
  },
  {
    "text": "tokenization is really is still a bit",
    "start": "2428860",
    "end": "2435050"
  },
  {
    "text": "much more like what you would do with string dots little regular expressions is it's a simple process that's not particularly intelligent it doesn't tell",
    "start": "2435050",
    "end": "2441230"
  },
  {
    "text": "you what the role of one of those structures is it will just tell you what they are so left paren is a left paren",
    "start": "2441230",
    "end": "2447640"
  },
  {
    "text": "the divide operator might be a divided operator or it could be the start of a comment so it's just a slash and when we",
    "start": "2447640",
    "end": "2454130"
  },
  {
    "text": "tagged those tokens that were found in the token string with their kind we just come along and chomp them up exactly the",
    "start": "2454130",
    "end": "2459800"
  },
  {
    "text": "same way as that week as we did the other the other characters in our first first version so to convert the paths",
    "start": "2459800",
    "end": "2467090"
  },
  {
    "text": "that we've already got to a token parser we have to start with a declaration of what kinds of tokens are in there if you",
    "start": "2467090",
    "end": "2474890"
  },
  {
    "text": "open up the Roslyn sauce you find something pretty similar to for all of the is quite mind-boggling looking at all the tokens that are used to pass",
    "start": "2474890",
    "end": "2481220"
  },
  {
    "text": "c-sharp but in this case we've got expression token I tried to keep the",
    "start": "2481220",
    "end": "2487280"
  },
  {
    "text": "names really short so they fit on slides this is using just simple members of a",
    "start": "2487280",
    "end": "2492290"
  },
  {
    "text": "number and duration when you see those in a message that's just the name of the token example the example there just",
    "start": "2492290",
    "end": "2499160"
  },
  {
    "text": "makes it possible to say expected l / expected l / n rather than the word l /",
    "start": "2499160",
    "end": "2506150"
  },
  {
    "text": "n now taking the input and processing it",
    "start": "2506150",
    "end": "2511910"
  },
  {
    "start": "2508000",
    "end": "2665000"
  },
  {
    "text": "into a list of tokens is a job for a tokenizer which you can write by hand if you really want a fast",
    "start": "2511910",
    "end": "2518980"
  },
  {
    "text": "industrial-strength kind of tokenizer or if you're using superpower that we look at we're looking at you can use a",
    "start": "2518980",
    "end": "2525290"
  },
  {
    "text": "shortcut method called tokenizer builder and that is is really just a list of",
    "start": "2525290",
    "end": "2531260"
  },
  {
    "text": "rules that you will apply one by one through the input and as soon as one of those matches then produce a particular",
    "start": "2531260",
    "end": "2536690"
  },
  {
    "text": "kind of token and add that to the stream that were going to parse later on it",
    "start": "2536690",
    "end": "2541910"
  },
  {
    "text": "really reads top to bottom and when you see match character equal to plus that's the same kind of",
    "start": "2541910",
    "end": "2548700"
  },
  {
    "text": "character positive that we were just looking at in the simple text parts or example again we've got a little bit of",
    "start": "2548700",
    "end": "2556200"
  },
  {
    "text": "a little bit of ordering and ambiguity to deal with and at the end we have a span dot whitespace to discard all of",
    "start": "2556200",
    "end": "2562950"
  },
  {
    "text": "the stuff that we want to ignore you'll see duration is tucked in there and that",
    "start": "2562950",
    "end": "2568860"
  },
  {
    "text": "that duration is not from the library of pauses that super power provides it's",
    "start": "2568860",
    "end": "2574980"
  },
  {
    "text": "just the text parser that we wrote that turns durations in time spans it doesn't matter what kind of output the other",
    "start": "2574980",
    "end": "2581670"
  },
  {
    "text": "parts of producers to use it in a tokenizer like this so you can build tokenize this really quickly some",
    "start": "2581670",
    "end": "2586980"
  },
  {
    "text": "subtleties there's a little example in the bottom left corner corner depending",
    "start": "2586980",
    "end": "2592650"
  },
  {
    "text": "on how you want to structure your language you might not be comfortable with 4/4 5d6",
    "start": "2592650",
    "end": "2597690"
  },
  {
    "text": "being a duration 45 days and then the number 6 in that instance if we have a",
    "start": "2597690",
    "end": "2605580"
  },
  {
    "text": "duration or a number we might want to require that some other tokens appear around them so they're delimited and",
    "start": "2605580",
    "end": "2610620"
  },
  {
    "text": "that's what that extra flag that's getting passed through to those rules is if we go through the passes that we",
    "start": "2610620",
    "end": "2617700"
  },
  {
    "text": "already have declared and see how they get transformed by this process the",
    "start": "2617700",
    "end": "2622830"
  },
  {
    "text": "structure stays very much the same and that's this is something that it took a long time for me really to really",
    "start": "2622830",
    "end": "2629370"
  },
  {
    "text": "realize the technique even though you're working on tokens instead of characters it's just the same you work through and you want to match some particular thing",
    "start": "2629370",
    "end": "2635610"
  },
  {
    "text": "it's not a another character a character equal to something here we go and match",
    "start": "2635610",
    "end": "2640680"
  },
  {
    "text": "that a token of the kind expression token dot number and then we take that",
    "start": "2640680",
    "end": "2645960"
  },
  {
    "text": "value apply some kind of text parser to it to generate some strongly type thing and then we turn that into the node",
    "start": "2645960",
    "end": "2652650"
  },
  {
    "text": "that's going to go into expression tree but the transformation is pretty mechanical and you can really start out",
    "start": "2652650",
    "end": "2658740"
  },
  {
    "text": "with the text parser and move to a token parser or I'd imagine you'd want to go the other way but factor is another",
    "start": "2658740",
    "end": "2666780"
  },
  {
    "start": "2665000",
    "end": "2702000"
  },
  {
    "text": "example that just shows how the structure is very much the same we have we're passing a left paren first instead",
    "start": "2666780",
    "end": "2674340"
  },
  {
    "text": "of that being the character is the token and then we go back and recurse over the expression or we end up trying to pass",
    "start": "2674340",
    "end": "2681990"
  },
  {
    "text": "the literal rule if we don't see a left paren and the parser the Combinator",
    "start": "2681990",
    "end": "2688530"
  },
  {
    "text": "names are all very similar as well for working with tokens are working with characters in super power so it's a",
    "start": "2688530",
    "end": "2694320"
  },
  {
    "text": "little bit of a Swiss Army knife luck library in that it has facilities that kind of match for both of these things I",
    "start": "2694320",
    "end": "2702740"
  },
  {
    "start": "2702000",
    "end": "2818000"
  },
  {
    "text": "ended up writing it mostly because I was doing a lot of character based parsing but getting frustrated and not being",
    "start": "2702740",
    "end": "2708330"
  },
  {
    "text": "able to produce error messages that people can understand and then having to answer questions about why something was broken okay so a little bit of an",
    "start": "2708330",
    "end": "2722640"
  },
  {
    "text": "example now though of one of the other benefits of of having a tokenizer instead of just writing the parser",
    "start": "2722640",
    "end": "2728790"
  },
  {
    "text": "straight out as a text parser now if we want to put some sort of commenting",
    "start": "2728790",
    "end": "2734000"
  },
  {
    "text": "capability into our into our particularly throat today sorry into",
    "start": "2734000",
    "end": "2741840"
  },
  {
    "text": "this language so so everyone be able say one plus I have no idea three you know",
    "start": "2741840",
    "end": "2755210"
  },
  {
    "text": "then we can just go and apply another add another ignore rule to this list in",
    "start": "2755210",
    "end": "2760290"
  },
  {
    "text": "the tokenizer and we can knock that out but those comments out before it even gets down to the pausing stage and we don't need to",
    "start": "2760290",
    "end": "2766860"
  },
  {
    "text": "go through and examine every rule in that parser we're going to write where we're dealing with this with the",
    "start": "2766860",
    "end": "2772920"
  },
  {
    "text": "structure of the grammar and worry about say I want to pause the duration or I might have to pass the start of a",
    "start": "2772920",
    "end": "2778350"
  },
  {
    "text": "comment so ordering matters because comments and and division begin with the",
    "start": "2778350",
    "end": "2785970"
  },
  {
    "text": "same character and this is a comment C",
    "start": "2785970",
    "end": "2793530"
  },
  {
    "text": "style and if we add that one little rule then we can say one class and then comment",
    "start": "2793530",
    "end": "2802180"
  },
  {
    "text": "something in there and we get four so",
    "start": "2802180",
    "end": "2807730"
  },
  {
    "text": "token parsing despite having a little bit more overhead has a lot has a lot of flexibility that gives that gives you a",
    "start": "2807730",
    "end": "2814030"
  },
  {
    "text": "chance to I'm really you can't you've got a whole exit extra hole extra stage",
    "start": "2814030",
    "end": "2820150"
  },
  {
    "start": "2818000",
    "end": "2890000"
  },
  {
    "text": "in that process that you can use to deal with these kinds of annoying source",
    "start": "2820150",
    "end": "2826060"
  },
  {
    "text": "processing tasks that otherwise make the pies are a lot harder to right now we",
    "start": "2826060",
    "end": "2831220"
  },
  {
    "text": "might have we might have time to have a look at a little bit more of an example",
    "start": "2831220",
    "end": "2836550"
  },
  {
    "text": "another thing that how are we going yes we have ten minutes to go just short job",
    "start": "2836550",
    "end": "2845620"
  },
  {
    "text": "merits all right um I'm also I'm also doing in another session upstairs on",
    "start": "2845620",
    "end": "2851980"
  },
  {
    "text": "level four after this which is an AMA so if we ran out of but run out of time I'll be you hanging around up somewhere up there as well too",
    "start": "2851980",
    "end": "2857680"
  },
  {
    "text": "later in the afternoon if you really want to go and like crackly crack this solution open and start tinkering with",
    "start": "2857680",
    "end": "2863200"
  },
  {
    "text": "puzzles or if you've got other questions that we don't get time to talk about but",
    "start": "2863200",
    "end": "2868830"
  },
  {
    "text": "given that we had a two we've got a two-minute budget let's imagine that we",
    "start": "2868830",
    "end": "2874780"
  },
  {
    "text": "want to start to say what was the time what's the time seven days ago",
    "start": "2874780",
    "end": "2880770"
  },
  {
    "text": "the way I would tackle that is we might say now - seven days and just to prove",
    "start": "2880770",
    "end": "2889390"
  },
  {
    "text": "that there's no now in there I want to show you what it takes to extend this this grammar to just take do that one",
    "start": "2889390",
    "end": "2895540"
  },
  {
    "start": "2890000",
    "end": "2951000"
  },
  {
    "text": "more interesting thing and we'll do it by adding an hour token and we could",
    "start": "2895540",
    "end": "2902590"
  },
  {
    "text": "call an hour keyword to choosing tokens to be more specific rather than rather",
    "start": "2902590",
    "end": "2909040"
  },
  {
    "text": "than generic makes it easier to write a really precise parser so we have so we",
    "start": "2909040",
    "end": "2914110"
  },
  {
    "text": "add our token there and the tokenizer will have to produce those tokens when it sees one in the input stream so we look at the tokenizer and if we if we",
    "start": "2914110",
    "end": "2922600"
  },
  {
    "text": "see",
    "start": "2922600",
    "end": "2924930"
  },
  {
    "text": "if we see that span then we will yield expression to again dot no yeah and",
    "start": "2928700",
    "end": "2938400"
  },
  {
    "text": "actually get us to now - seven days we",
    "start": "2938400",
    "end": "2944070"
  },
  {
    "text": "we got an unexpected now on now no we won't we won't worry too much about how to make that message clearer we expected",
    "start": "2944070",
    "end": "2950520"
  },
  {
    "text": "the duration a number so the problem there is that there's nowhere in our parser it has a rule that will match",
    "start": "2950520",
    "end": "2956930"
  },
  {
    "start": "2951000",
    "end": "3162000"
  },
  {
    "text": "that will match now and so we might have to say a duration or number or now and",
    "start": "2956930",
    "end": "2966620"
  },
  {
    "text": "now it's going to be like these puzzles",
    "start": "2966620",
    "end": "2974460"
  },
  {
    "text": "that we've got for duration and for number and but it's going to match a",
    "start": "2974460",
    "end": "2983880"
  },
  {
    "text": "token equal to now no expression token",
    "start": "2983880",
    "end": "2990180"
  },
  {
    "text": "now and it's going to have the value you",
    "start": "2990180",
    "end": "3000880"
  },
  {
    "text": "know expression no let's go up now value",
    "start": "3000970",
    "end": "3007120"
  },
  {
    "text": "typing his own okay",
    "start": "3007120",
    "end": "3012390"
  },
  {
    "text": "and they're always gonna he's gonna have the same value because now will always",
    "start": "3012390",
    "end": "3019680"
  },
  {
    "text": "be something that we evaluate and rather we don't have to have different kinds of nails so we can just drop a Google Doc",
    "start": "3019680",
    "end": "3028019"
  },
  {
    "text": "ctrl C we can drop a node into the expression tree it doesn't really matter",
    "start": "3028019",
    "end": "3037680"
  },
  {
    "text": "what it does oh no I don't do that no",
    "start": "3037680",
    "end": "3044749"
  },
  {
    "text": "okay now I can move it and now if we run the program hopefully that will work no",
    "start": "3044749",
    "end": "3052519"
  },
  {
    "text": "there's no covariance unfortunately we",
    "start": "3052519",
    "end": "3058019"
  },
  {
    "text": "have to cast it to an expression for reasons of struct and and other things being involved that c-sharp won't let us",
    "start": "3058019",
    "end": "3064980"
  },
  {
    "text": "use their hands for so now a - seven days okay so now we're getting somewhere",
    "start": "3064980",
    "end": "3071460"
  },
  {
    "text": "so so once we evaluate once we evaluate",
    "start": "3071460",
    "end": "3077759"
  },
  {
    "text": "that expression we're going to need another elements in our switch statement",
    "start": "3077759",
    "end": "3082859"
  },
  {
    "text": "here yeah and that's going to be we're going to match a nail value and the",
    "start": "3082859",
    "end": "3092430"
  },
  {
    "text": "result is going to be a new date time result and that can just be dead time",
    "start": "3092430",
    "end": "3101970"
  },
  {
    "text": "but now I would always use UTC did you see by the way okay yep",
    "start": "3101970",
    "end": "3112590"
  },
  {
    "text": "and all right we have to implement to",
    "start": "3112590",
    "end": "3119160"
  },
  {
    "text": "string just so we can show this in the output or just to say okay",
    "start": "3119160",
    "end": "3130640"
  },
  {
    "text": "we're getting close",
    "start": "3132390",
    "end": "3135380"
  },
  {
    "text": "you me that's my test let's just turn these tests yeah okay now we've worked",
    "start": "3141390",
    "end": "3153780"
  },
  {
    "text": "our way through so we can accept now - seven days and we have value seven days",
    "start": "3153780",
    "end": "3159120"
  },
  {
    "text": "can't be subtracted from right now okay we go the chat would take the challenge",
    "start": "3159120",
    "end": "3164550"
  },
  {
    "start": "3162000",
    "end": "3260000"
  },
  {
    "text": "in the evaluator we're going to dispatch a subtract so if the left is a duration",
    "start": "3164550",
    "end": "3172710"
  },
  {
    "text": "result no if the left is a it's going to",
    "start": "3172710",
    "end": "3177840"
  },
  {
    "text": "be a date time result DT and right is",
    "start": "3177840",
    "end": "3186050"
  },
  {
    "text": "duration and result will say de then we",
    "start": "3186050",
    "end": "3192870"
  },
  {
    "text": "can take so if we have a if I have a date time and we subtract a duration we have another date time and that's going",
    "start": "3192870",
    "end": "3199560"
  },
  {
    "text": "to be the date time value look let's say",
    "start": "3199560",
    "end": "3205350"
  },
  {
    "text": "- the okay and that's going to be de we better actually add something to that",
    "start": "3205350",
    "end": "3210770"
  },
  {
    "text": "okay property value I shouldn't have called it now should i okay",
    "start": "3210770",
    "end": "3217820"
  },
  {
    "text": "let's say value was now and then we can",
    "start": "3217820",
    "end": "3224970"
  },
  {
    "text": "just do Lu Chi string",
    "start": "3224970",
    "end": "3229670"
  },
  {
    "text": "hmm why do we not get that right I guess",
    "start": "3230300",
    "end": "3235940"
  },
  {
    "text": "we have to dispatch that let's see if we get it let's see if we get a syntax error we didn't so now - seven days I",
    "start": "3235940",
    "end": "3243590"
  },
  {
    "text": "hope you could follow all of that but just on the fly I suppose right there's",
    "start": "3243590",
    "end": "3249170"
  },
  {
    "text": "not this is again you can just take an existing take an existing grammar and bunk thing is in and hack away until it",
    "start": "3249170",
    "end": "3255860"
  },
  {
    "text": "works and impress all of your colleagues with fun little languages in your",
    "start": "3255860",
    "end": "3261470"
  },
  {
    "start": "3260000",
    "end": "3297000"
  },
  {
    "text": "programs so we talked a bit about text parsers which means use to the start and",
    "start": "3261470",
    "end": "3266510"
  },
  {
    "text": "we really show you how text parsers are just programs that chomp through strings and return results and we've got",
    "start": "3266510",
    "end": "3271970"
  },
  {
    "text": "Combinator's to do all sorts of fancy things and make real sophisticated parses out of those and then we've got",
    "start": "3271970",
    "end": "3277940"
  },
  {
    "text": "token parsers which take a bit more machinery and they're not so they're not so quick to write or understand but what",
    "start": "3277940",
    "end": "3284330"
  },
  {
    "text": "I really think if you are going to show this language to a to an end-user then you should consider taking that approach",
    "start": "3284330",
    "end": "3290270"
  },
  {
    "text": "and there's tools out there to do that without a whole lot more effort than if you were working with just the plain text so quick recap languages really do",
    "start": "3290270",
    "end": "3300710"
  },
  {
    "start": "3297000",
    "end": "3337000"
  },
  {
    "text": "Rock I would hate to be living in the access query designer all day and you would - pauses the pauses of programs",
    "start": "3300710",
    "end": "3306560"
  },
  {
    "text": "you can all write programs you can write parsers and you probably should you",
    "start": "3306560",
    "end": "3311930"
  },
  {
    "text": "should at least consider where these things could make the software that you build better because the hopefully torn",
    "start": "3311930",
    "end": "3319310"
  },
  {
    "text": "away the the veil and there's no magic in there that you're not capable of just getting in there and hacking out with",
    "start": "3319310",
    "end": "3324680"
  },
  {
    "text": "the debugger and unit tests and all the usual tools that you use to to write the software that you're already shipping so",
    "start": "3324680",
    "end": "3331040"
  },
  {
    "text": "I hope that you will give it a shot thanks very much for coming along I",
    "start": "3331040",
    "end": "3336730"
  },
  {
    "text": "think I did I did want to call out so we're looking at superpower there's",
    "start": "3336730",
    "end": "3341780"
  },
  {
    "start": "3337000",
    "end": "3382000"
  },
  {
    "text": "another language in c-sharp called that's written in c-sharp sorry another library in c-sharp called Sbrocco",
    "start": "3341780",
    "end": "3348140"
  },
  {
    "text": "which is similar but only deals with text parsers that was my first attempt it's still quite widely used and it's",
    "start": "3348140",
    "end": "3353750"
  },
  {
    "text": "probably a also a useful place to find lots of examples if you want to pass different kinds of languages because",
    "start": "3353750",
    "end": "3359030"
  },
  {
    "text": "there's JSON parsers and XML parsers and all sorts of thing is written for that there's a part of some folks at Stack",
    "start": "3359030",
    "end": "3365800"
  },
  {
    "text": "Overflow called pigeon and pigeon is um pigeon is a performance-oriented kind of",
    "start": "3365800",
    "end": "3372100"
  },
  {
    "text": "pose a positive Combinator library versus superpower is much more oriented towards those good and user error",
    "start": "3372100",
    "end": "3378730"
  },
  {
    "text": "messages so that might also be worth looking at if you've got a lot of data to process sadly it's not ten minutes",
    "start": "3378730",
    "end": "3384430"
  },
  {
    "start": "3382000",
    "end": "3454000"
  },
  {
    "text": "and so the joke is the Joker's gonna fall on its face but we might have a few",
    "start": "3384430",
    "end": "3389470"
  },
  {
    "text": "minutes for some questions if anybody has anything they'd like to ask Michael",
    "start": "3389470",
    "end": "3396930"
  },
  {
    "text": "are there limits to what can be passed with Combinator's I'm really not the",
    "start": "3398640",
    "end": "3403990"
  },
  {
    "text": "person to answer that definitively I think any sane language that you're likely to want to pass yourself can be",
    "start": "3403990",
    "end": "3410530"
  },
  {
    "text": "it can be attacked this way so even context sensitive languages where you've got to carry some state down that tree",
    "start": "3410530",
    "end": "3416410"
  },
  {
    "text": "you might have to do a little bit of acrobatics but yeah Combinator's can definitely be used to attach to any",
    "start": "3416410",
    "end": "3423520"
  },
  {
    "text": "language that you'd see day-to-day accommodators are really just a nicer implementation of recursive descent",
    "start": "3423520",
    "end": "3428710"
  },
  {
    "text": "parsing which which has no one sort of capabilities and it's it's used for most",
    "start": "3428710",
    "end": "3434140"
  },
  {
    "text": "of the programming languages that we already work with so chances are pretty good that whatever you're plugging into",
    "start": "3434140",
    "end": "3439630"
  },
  {
    "text": "your ID is getting passed with something at least partially using these same techniques any other ones that were",
    "start": "3439630",
    "end": "3445690"
  },
  {
    "text": "going to squeeze in okay thank you very much for coming along it was lovely bye",
    "start": "3445690",
    "end": "3454710"
  }
]