[
  {
    "text": "let's take it easy we can introduce ourselves they won't care who we are so",
    "start": "4590",
    "end": "10470"
  },
  {
    "text": "I said who are you so I'm bill Wagner if you read docs on",
    "start": "10470",
    "end": "15660"
  },
  {
    "text": "docs on Microsoft comm under C sharp that's what I'm responsible for a lot of",
    "start": "15660",
    "end": "21390"
  },
  {
    "text": "the newer ones since I've only been with the company about two and a half years I've been writing and I try to explain",
    "start": "21390",
    "end": "27240"
  },
  {
    "text": "the company seeing things he comes up with so who are you I'm master Gerson and I'm a program manager on the on",
    "start": "27240",
    "end": "35640"
  },
  {
    "text": "the.net team and I'm the lead designer for C sharp so I come up with the crazy",
    "start": "35640",
    "end": "40890"
  },
  {
    "text": "things and then he makes him sound like you know they were planned and and",
    "start": "40890",
    "end": "46140"
  },
  {
    "text": "thought-out so it's a good partnership and we couldn't we couldn't resist the",
    "start": "46140",
    "end": "51980"
  },
  {
    "text": "the opportunity to grab a Shakespearean title here since so honestly what",
    "start": "51980",
    "end": "59190"
  },
  {
    "text": "happened again let's start a little slow people still coming in so what happened was these new features are about to come",
    "start": "59190",
    "end": "65909"
  },
  {
    "text": "out and see sharp and a lot of people interested in them lots of Microsoft people apparently said yes to come here",
    "start": "65909",
    "end": "71280"
  },
  {
    "text": "at the same time and so we all submitted the same talks with the same titles and the same abstracts and then when we",
    "start": "71280",
    "end": "78390"
  },
  {
    "text": "realized that we were about to do the same things we're like Oh to talks about nullable reference types why don't we",
    "start": "78390",
    "end": "84719"
  },
  {
    "text": "join up and then make it like a two-hour tour de force about essentially about",
    "start": "84719",
    "end": "90810"
  },
  {
    "text": "nothing figured Seinfeld succeeded so two hours about nothing sure yeah so so",
    "start": "90810",
    "end": "98399"
  },
  {
    "text": "this is much ado about nothing Act one in which I'm the hero and a meaning that",
    "start": "98399",
    "end": "106740"
  },
  {
    "text": "I will do most of the talking and I got the keys and then I'll try to be nice to build because in the second act which is",
    "start": "106740",
    "end": "113219"
  },
  {
    "text": "after the break he will have the keys and you will have the power and whatever I do to him he will do to me 100 fold",
    "start": "113219",
    "end": "119280"
  },
  {
    "text": "which is you know all Shakespearean English talk is tomorrow yes so we",
    "start": "119280",
    "end": "127829"
  },
  {
    "text": "should be nice to John as well John skeet is here on the front row he also submitted the same talks so so sorry",
    "start": "127829",
    "end": "134190"
  },
  {
    "text": "about that so we will start out by sort of",
    "start": "134190",
    "end": "140090"
  },
  {
    "text": "exploring the general the the history and and nature of the null references",
    "start": "140090",
    "end": "151519"
  },
  {
    "text": "and also the what we've tried to do about it what we're trying to do about",
    "start": "151519",
    "end": "156650"
  },
  {
    "text": "it in c-sharp so that sort of language design aspect of what we're calling nullable reference types so the history",
    "start": "156650",
    "end": "162319"
  },
  {
    "text": "of nothing the history of nothing yes we can make this joke a lot of times it doesn't get",
    "start": "162319",
    "end": "167780"
  },
  {
    "text": "any funnier no it's it's essentially vacuous so and then so that's sort of",
    "start": "167780",
    "end": "175370"
  },
  {
    "text": "like the language to signee stuff like maybe the Computer Sciences stuff a little bit and then there's like okay",
    "start": "175370",
    "end": "181519"
  },
  {
    "text": "how do I actually use this what does it mean for me in source code and that may",
    "start": "181519",
    "end": "187819"
  },
  {
    "text": "be a little more C sharp specific there's going to be more code in bills section but also you know much more",
    "start": "187819",
    "end": "194540"
  },
  {
    "text": "practical and you know we're about C sharp but I think that a lot of what",
    "start": "194540",
    "end": "200030"
  },
  {
    "text": "we're doing with this feature is relevant to pretty much any object-oriented language on the planet so and maybe more so even if you're not",
    "start": "200030",
    "end": "209030"
  },
  {
    "text": "a c-sharp developer how many people in here are sheesh up developers okay let's just get that out of the way okay how",
    "start": "209030",
    "end": "214189"
  },
  {
    "text": "many are not alright okay well there we go",
    "start": "214189",
    "end": "221260"
  },
  {
    "text": "so so I think people stopped filing in now so let's let's dive into the",
    "start": "221260",
    "end": "226620"
  },
  {
    "text": "substance here so we all know that truth is found in in Nursery Rhymes I'm",
    "start": "226620",
    "end": "233769"
  },
  {
    "text": "particular the British ones I love the British ones because they are you know they're all about gently introducing",
    "start": "233769",
    "end": "241500"
  },
  {
    "text": "unsuspecting kids to the the violence and death that surrounds us in society",
    "start": "241500",
    "end": "247090"
  },
  {
    "text": "like the pretty gruesome and so this is this is no exception here and this particular one is about nulls",
    "start": "247090",
    "end": "253330"
  },
  {
    "text": "right they're all these ships that are missing the null sheep as it were that just leaves empty shapes left and you",
    "start": "253330",
    "end": "260260"
  },
  {
    "text": "know there's a goes little bow beef has lost her sheep and doesn't know where to find them leave them alone and they'll",
    "start": "260260",
    "end": "266139"
  },
  {
    "text": "explode throwing exceptions behind them so that pretty much six expresses what",
    "start": "266139",
    "end": "273190"
  },
  {
    "text": "we all know and feel and have for the last many centuries of object-oriented programming so there's a villain in this",
    "start": "273190",
    "end": "281020"
  },
  {
    "text": "story you see this villainous evil grin here this is Sir Tony Hoare he's one of",
    "start": "281020",
    "end": "290919"
  },
  {
    "text": "the grandfather's of computer science he's still around",
    "start": "290919",
    "end": "295960"
  },
  {
    "text": "he joined Microsoft research in Cambridge right around the time when I was interning there two decades ago and",
    "start": "295960",
    "end": "302639"
  },
  {
    "text": "he's retired now but he still comes in on Thursdays because he just um you know can't help himself now he's helping Don",
    "start": "302639",
    "end": "309340"
  },
  {
    "text": "Syme introduce nulls to f-sharp I think yes that's probably true so he so he",
    "start": "309340",
    "end": "317650"
  },
  {
    "text": "once famously claimed that that null references were his billion dollar mistake like he he gave a very quoted",
    "start": "317650",
    "end": "324940"
  },
  {
    "text": "talk where he essentially sort of tongue-in-cheek took responsibility for all the billions of dollars that have",
    "start": "324940",
    "end": "330520"
  },
  {
    "text": "been wasted on null reference exceptions over the course of history because he",
    "start": "330520",
    "end": "335530"
  },
  {
    "text": "actually invented null references and it's pretty amazing that something like that was ever invented right but",
    "start": "335530",
    "end": "341110"
  },
  {
    "text": "actually they were like he was there along with Nicklaus weird Liat trying to",
    "start": "341110",
    "end": "347470"
  },
  {
    "text": "come up with a proposed successor to al Ghul",
    "start": "347470",
    "end": "352490"
  },
  {
    "text": "they're like you know there's been these have been these advances in computer science let's let's try to propose a new",
    "start": "352490",
    "end": "359570"
  },
  {
    "text": "version of this very popular imperative language called Al Gore and they call it so it's been referenced Algol W so they",
    "start": "359570",
    "end": "367400"
  },
  {
    "text": "came up with really great things like reference types ok so you can point to other things and that can all be typed",
    "start": "367400",
    "end": "373850"
  },
  {
    "text": "and expressed in a type system and at the end of the day",
    "start": "373850",
    "end": "379070"
  },
  {
    "text": "Algol W was rejected by the algo committee they had much more important things on their mind and they went and",
    "start": "379070",
    "end": "384320"
  },
  {
    "text": "took Algol 68 in completely different direction and it totally tanked right instead Niklaus Tony's partner in crime",
    "start": "384320",
    "end": "392180"
  },
  {
    "text": "went and came up with this thing called Pascal okay taking these ideas from olw and turning",
    "start": "392180",
    "end": "397250"
  },
  {
    "text": "them into a different programming language which of course became the you know essentially the lingua franca of",
    "start": "397250",
    "end": "402530"
  },
  {
    "text": "high-level imperative programming for decades after that so so even though",
    "start": "402530",
    "end": "407990"
  },
  {
    "text": "algal W never really became anything in and of itself it had a massive impact on",
    "start": "407990",
    "end": "414500"
  },
  {
    "text": "history of programming language math and the other thing that it influenced with",
    "start": "414500",
    "end": "419630"
  },
  {
    "text": "the reference types was the first object going to programming language so here's",
    "start": "419630",
    "end": "425420"
  },
  {
    "text": "sort of a like it's a quick genealogy of programming languages algal W here never",
    "start": "425420",
    "end": "430520"
  },
  {
    "text": "really was released nobody wrote code in it ever except for Tony and and Nicholas themselves but it has had this massive",
    "start": "430520",
    "end": "438680"
  },
  {
    "text": "influence including on similar 67 which was the first object on a programming language and and then of course all this",
    "start": "438680",
    "end": "447440"
  },
  {
    "text": "all of the languages that followed and essentially not only did reference types make it across to object on your",
    "start": "447440",
    "end": "453740"
  },
  {
    "text": "programming our central concept in object-oriented programming when you think about it but the null reference is",
    "start": "453740",
    "end": "459500"
  },
  {
    "text": "sort of came along this disease vector as well and they in fact it all about you're going to programming through these arrows here so I mean when you",
    "start": "459500",
    "end": "467300"
  },
  {
    "text": "think about it objects really can't the object program can't exist without this",
    "start": "467300",
    "end": "472460"
  },
  {
    "text": "notion of reference type so that similarly introduced the notion of inheritance and you have these different",
    "start": "472460",
    "end": "477800"
  },
  {
    "text": "classes that are abstracted over by that by a shared base class or a superclass",
    "start": "477800",
    "end": "484850"
  },
  {
    "text": "and that can only really work if you're sort of in directed through a reference they have different shape different sizes and shapes right there has to be",
    "start": "484850",
    "end": "491930"
  },
  {
    "text": "this indirection in order for that to even work and the references themselves become object identities so which is a",
    "start": "491930",
    "end": "499070"
  },
  {
    "text": "central concept in OP January programming so al ghul table you really opened up that whole thing and made similar 67 click together with these",
    "start": "499070",
    "end": "506900"
  },
  {
    "text": "notions of inheritance and so on that that they had it just because NDC is",
    "start": "506900",
    "end": "513200"
  },
  {
    "text": "rooted in Norway I want to put the two Norwegian inventors of up you're going to programming up here in a slide as",
    "start": "513200",
    "end": "518479"
  },
  {
    "text": "well very cool people so but from there",
    "start": "518479",
    "end": "524390"
  },
  {
    "text": "I'm really gonna that's sort of gentle introduction to the topic but I'm really just gonna flip into Visual Studio now",
    "start": "524390",
    "end": "531560"
  },
  {
    "text": "and do the rest of the talk in encode codes good yeah right yeah so and I",
    "start": "531560",
    "end": "541130"
  },
  {
    "text": "don't think people I think people will appreciate having live explosions",
    "start": "541130",
    "end": "546860"
  },
  {
    "text": "instead of ones and slides so so let's go and make some live explosions so one of the things so I want to start by",
    "start": "546860",
    "end": "553480"
  },
  {
    "text": "talking about you know sort of intuiting what might have happened in so Tony's head you know one of the things that you",
    "start": "553480",
    "end": "560600"
  },
  {
    "text": "can do with reference types is that it's really good for expressing recursive types right so let's say he's writing",
    "start": "560600",
    "end": "566360"
  },
  {
    "text": "he's implementing linked lists in Algol W back in in 1965 and he's there he came",
    "start": "566360",
    "end": "572540"
  },
  {
    "text": "up with this recursive I'm writing it as a class here in c-sharp but he came with this recursive type that's sort of a",
    "start": "572540",
    "end": "578810"
  },
  {
    "text": "linked list okay and so he's like okay what does the linked list have it has a some content in the node and then it has",
    "start": "578810",
    "end": "585380"
  },
  {
    "text": "a link to the next one and a constructor okay that's that's good so let's let's",
    "start": "585380",
    "end": "592610"
  },
  {
    "text": "create ourselves a any link here okay we can and I just made one of strings here",
    "start": "592610",
    "end": "599330"
  },
  {
    "text": "to make it easy that you don't think they had generic types back then so you know we can say new link of hello and",
    "start": "599330",
    "end": "608590"
  },
  {
    "text": "then we need another link there okay so I can create another link it's a new link world and",
    "start": "608590",
    "end": "617350"
  },
  {
    "text": "then I need another link and I so at some point you know this has got to stop I can't keep creating new links and",
    "start": "617840",
    "end": "623330"
  },
  {
    "text": "passing to it so at some point I have to pass it something other than a new link okay and you've made like it's like 3",
    "start": "623330",
    "end": "631820"
  },
  {
    "text": "a.m. now and his tie and he's like alright then okay let's let's put this",
    "start": "631820",
    "end": "638510"
  },
  {
    "text": "thing in here okay let's add that to the language so that I can stop creating new objects and and you know um and my and",
    "start": "638510",
    "end": "647029"
  },
  {
    "text": "my statement here and sonal is introduced it's the thing that you use",
    "start": "647029",
    "end": "652070"
  },
  {
    "text": "when you have no more things and look at ons it and it looks innocent right it's",
    "start": "652070",
    "end": "657980"
  },
  {
    "text": "kind of almost necessary you can it's it's pretty well it's pretty well motivated alright now the next morning",
    "start": "657980",
    "end": "664820"
  },
  {
    "text": "Niklaus comes in and and you know I Tony's fast asleep he didn't even show",
    "start": "664820",
    "end": "670010"
  },
  {
    "text": "up until after after lunch that day but Niklaus is like hey he put in recursive",
    "start": "670010",
    "end": "677420"
  },
  {
    "text": "types I'm not going to do the German accent and she's like hey let me let me",
    "start": "677420",
    "end": "683420"
  },
  {
    "text": "write this out to screen you know static void I'm just totally pretending this is",
    "start": "683420",
    "end": "688640"
  },
  {
    "text": "alcohol w I'm just doing it in c-sharp okay static void French let's take a",
    "start": "688640",
    "end": "694160"
  },
  {
    "text": "link and that's print it out how hard can that be so let's see what does it have I can",
    "start": "694160",
    "end": "702440"
  },
  {
    "text": "write line the links content so there's",
    "start": "702440",
    "end": "707810"
  },
  {
    "text": "a value in there great I printed that first one out and then we can recur it's",
    "start": "707810",
    "end": "713089"
  },
  {
    "text": "a recursive data structure we can just recursively print out the rest link the next done you know great wonderful and",
    "start": "713089",
    "end": "724480"
  },
  {
    "text": "we compile and we run and you're not actually calling it I'm not calling you",
    "start": "724480",
    "end": "730820"
  },
  {
    "text": "that's a good observation okay let's actually call it so they'll print",
    "start": "730820",
    "end": "737900"
  },
  {
    "text": "of that thing I just created okay now [Music]",
    "start": "737900",
    "end": "743950"
  },
  {
    "text": "you know I think we compile it before I called it",
    "start": "743950",
    "end": "752149"
  },
  {
    "text": "and boom we have an exception the world's first not reference exception",
    "start": "753410",
    "end": "758790"
  },
  {
    "text": "has occurred so that's what I mean by live explosions so we printed hell over",
    "start": "758790",
    "end": "764280"
  },
  {
    "text": "into the world and we ran over the edge and we died and and of course this has been with us ever since because we never",
    "start": "764280",
    "end": "772110"
  },
  {
    "text": "really dealt with this it was like okay back then we had bigger fish to fry so",
    "start": "772110",
    "end": "778710"
  },
  {
    "text": "but we never really recovered from this and we still so this is C sharp today perfectly legal program runs over the",
    "start": "778710",
    "end": "784260"
  },
  {
    "text": "edge just like in algal W 54 years ago and that's not entirely good you know I",
    "start": "784260",
    "end": "793200"
  },
  {
    "text": "love you so Tony's right he's kind of tongue-in-cheek when he says you know I'm sorry for ever having invented the",
    "start": "793200",
    "end": "798750"
  },
  {
    "text": "null reference because what else would you do what else would you have done right how else would you have solved the",
    "start": "798750",
    "end": "804570"
  },
  {
    "text": "oh I made it to the edge kind of problem but you know what what he what he means",
    "start": "804570",
    "end": "811440"
  },
  {
    "text": "is you know we just introduced this thing completely outside of the type system and we're not even trying to deal",
    "start": "811440",
    "end": "817950"
  },
  {
    "text": "with it in a and we're not even trying to introduce the kind of type safety that we apply to everything else so so",
    "start": "817950",
    "end": "826590"
  },
  {
    "text": "the question of what else could we do that has you know getting riddling us ever since the the functional folks they",
    "start": "826590",
    "end": "832890"
  },
  {
    "text": "have it figured out okay so if you go to look at functional programming languages they actually the dealt with this pretty",
    "start": "832890",
    "end": "838800"
  },
  {
    "text": "neatly and what they said is so they have a very reasonable line of thinking about this which is saying okay there's",
    "start": "838800",
    "end": "845010"
  },
  {
    "text": "not we shouldn't be talking about just the link type here there's links and",
    "start": "845010",
    "end": "851060"
  },
  {
    "text": "then there's not links there's two different kinds of things there's I have one and I don't have one and those are",
    "start": "851060",
    "end": "857040"
  },
  {
    "text": "two different kinds of values so there are two different types and we can have a union type between them that says this",
    "start": "857040",
    "end": "864480"
  },
  {
    "text": "particular field or parameter or whatever is either that or the other okay so they have this notion of Union",
    "start": "864480",
    "end": "870690"
  },
  {
    "text": "types and based on Union types we can express as a special case things that",
    "start": "870690",
    "end": "876090"
  },
  {
    "text": "are either there or not and we don't have union types in c-sharp but",
    "start": "876090",
    "end": "881670"
  },
  {
    "text": "you can you can model eight pretty well using inheritance right so so actually",
    "start": "881670",
    "end": "888720"
  },
  {
    "text": "starting with similar they'd had no excuse they could have done this but you know you can we can say this an option",
    "start": "888720",
    "end": "894569"
  },
  {
    "text": "of see I made a generic here you know an option of T which you know has Drive classes none or some which is either",
    "start": "894569",
    "end": "901290"
  },
  {
    "text": "there was nothing so there's this empty empty class here for when there's",
    "start": "901290",
    "end": "906629"
  },
  {
    "text": "nothing and there's another subclass when there's something and they're all options of T's so I can abstract over",
    "start": "906629",
    "end": "913050"
  },
  {
    "text": "whether it's nothing or something I know the the something has a value inside and",
    "start": "913050",
    "end": "918269"
  },
  {
    "text": "it can be constructed and it can be deconstructed like in you know we do in modern c-sharp so we could go and solve",
    "start": "918269",
    "end": "925740"
  },
  {
    "text": "the problem and sort of put the nulls in the type system so let's do that quickly",
    "start": "925740",
    "end": "930899"
  },
  {
    "text": "here and it gets a little more tedious but that's mostly because the language",
    "start": "930899",
    "end": "937800"
  },
  {
    "text": "isn't completely it's not completely native to the language so instead of having just a link next year and and and",
    "start": "937800",
    "end": "944550"
  },
  {
    "text": "relying on the ability of that to be secretly null we're going to be explicit and say this is actually an option of",
    "start": "944550",
    "end": "950910"
  },
  {
    "text": "link either is a link or there isn't if I could hit the keys here so it's option",
    "start": "950910",
    "end": "957449"
  },
  {
    "text": "of link next okay and now of course I need to adjust my my",
    "start": "957449",
    "end": "965519"
  },
  {
    "text": "constructor a little bit but that's that's that's pretty much it for the",
    "start": "965519",
    "end": "970559"
  },
  {
    "text": "implementation and and but now we see a warning show up to place first of all my",
    "start": "970559",
    "end": "976439"
  },
  {
    "text": "constructor changed I need to do some more constructing here in order to get those option types in but I also but",
    "start": "976439",
    "end": "984149"
  },
  {
    "text": "this this warning down here is that this arrow down here is what I want to get to in a minute but let's let's make it happy by creating a instead of passing a",
    "start": "984149",
    "end": "990929"
  },
  {
    "text": "link to the constructor I have to create a some link that has the link inside and",
    "start": "990929",
    "end": "998240"
  },
  {
    "text": "instead of C and keep my friends straight here in it instead of passing a",
    "start": "998240",
    "end": "1003290"
  },
  {
    "text": "link now I think the type needs to be careful there careful oh oh yeah it's just pure programming it's all good",
    "start": "1003290",
    "end": "1009350"
  },
  {
    "text": "that's great and now that goes away I can still pass a null here but I",
    "start": "1009350",
    "end": "1014449"
  },
  {
    "text": "really shouldn't I should be passing a new none uplink and and and put the safe",
    "start": "1014449",
    "end": "1023089"
  },
  {
    "text": "null in there okay so I'm create so I have a nun at the bottom and then I have somes clapped around it so now we made a",
    "start": "1023089",
    "end": "1030589"
  },
  {
    "text": "types a version of the linked list and what we have down here is it shows that it's type safe we have the linked up",
    "start": "1030589",
    "end": "1037370"
  },
  {
    "text": "next here is no longer allowed because",
    "start": "1037370",
    "end": "1043089"
  },
  {
    "text": "well first of all it's not allowed because I can't print an option of link",
    "start": "1043089",
    "end": "1048140"
  },
  {
    "text": "I can only print a link right the print method isn't recursively calling itself yet well how do I get to the next link",
    "start": "1048140",
    "end": "1053600"
  },
  {
    "text": "so I can print it I have to fish it out of the of the option but I can only do",
    "start": "1053600",
    "end": "1058970"
  },
  {
    "text": "that if the option is a sum and not a nun so I have to do it conditionally okay so it's forcing me to say if linked",
    "start": "1058970",
    "end": "1067730"
  },
  {
    "text": "up next is a sum of link then",
    "start": "1067730",
    "end": "1078520"
  },
  {
    "text": "deconstructed and get the next link out okay and now we can in the in this if",
    "start": "1078520",
    "end": "1089120"
  },
  {
    "text": "statement here that so I get a fresh variable with a link but only if it was",
    "start": "1089120",
    "end": "1094370"
  },
  {
    "text": "there only if the thing was a sum and then in the inside of the if statement I have that next variable that actually",
    "start": "1094370",
    "end": "1100610"
  },
  {
    "text": "refers to a link in that I can recursively print out and so now I have the safe printing that I think we should",
    "start": "1100610",
    "end": "1106520"
  },
  {
    "text": "even try to compile and run and see that it does the right thing now okay so it",
    "start": "1106520",
    "end": "1111830"
  },
  {
    "text": "forces me to check for null the type system forces me to check in right I",
    "start": "1111830",
    "end": "1116899"
  },
  {
    "text": "like that so that's the kind of thing that we want have the type system helpers realize that we have a null",
    "start": "1116899",
    "end": "1123529"
  },
  {
    "text": "problem and now this particular way of going about it it's it's fine you know",
    "start": "1123529",
    "end": "1129820"
  },
  {
    "text": "we can just have a language without native nulls in it and we can just build",
    "start": "1129820",
    "end": "1135260"
  },
  {
    "text": "our own nulls with using discriminated unions it does have some limitations",
    "start": "1135260",
    "end": "1141470"
  },
  {
    "text": "right one of the this is one way of using nulls where you really want a null you really want in the finished data structure you want",
    "start": "1141470",
    "end": "1148229"
  },
  {
    "text": "there to be an end you want it to be and there's no more here but sometimes",
    "start": "1148229",
    "end": "1153299"
  },
  {
    "text": "that's not what nulls are for sometimes you're you sort of have as you're building up your object graph you have",
    "start": "1153299",
    "end": "1159090"
  },
  {
    "text": "temporary nulls right this is all in front this is all from functional programming which you know you construct values from other",
    "start": "1159090",
    "end": "1165299"
  },
  {
    "text": "values always and you're in principle",
    "start": "1165299",
    "end": "1170429"
  },
  {
    "text": "you're never mutating them right you're just so you can never actually build a cyclic data structure you can because",
    "start": "1170429",
    "end": "1177509"
  },
  {
    "text": "you always have to have the thing that the next thing is constructed from so if you have a you've want to build a cyclic",
    "start": "1177509",
    "end": "1183210"
  },
  {
    "text": "data structure well I can't create this object before I created the one that it points to all the way around like in the",
    "start": "1183210",
    "end": "1188789"
  },
  {
    "text": "whole cycle yes somebody has to be first and and you know okay so if we have a mutable programming language how do you",
    "start": "1188789",
    "end": "1194460"
  },
  {
    "text": "create a cyclic data structure well you have to create one of the objects first and then you can create all the other",
    "start": "1194460",
    "end": "1200279"
  },
  {
    "text": "ones that point to it but at some point only you at some point did you create",
    "start": "1200279",
    "end": "1205440"
  },
  {
    "text": "the one that the first object is pointing to and so in the meantime what was it what was in there before it",
    "start": "1205440",
    "end": "1211169"
  },
  {
    "text": "pointed to the thing it should eventually point to so even if you have a finished data structure that has no nulls in it there's this whole",
    "start": "1211169",
    "end": "1216599"
  },
  {
    "text": "initialization problem of well what was it until you were able to assign it the",
    "start": "1216599",
    "end": "1221899"
  },
  {
    "text": "reference and sort of more in general many of our most of our mutation",
    "start": "1221899",
    "end": "1232289"
  },
  {
    "text": "oriented programming languages they have more dynamic ways of creating data like in in c-sharp and Java you can create a",
    "start": "1232289",
    "end": "1237629"
  },
  {
    "text": "race great an array of string yes and I don't want it like pay for all those constructor calls right that would take",
    "start": "1237629",
    "end": "1243899"
  },
  {
    "text": "time yeah so it's fine to type so we kind of need this idea of default values",
    "start": "1243899",
    "end": "1249830"
  },
  {
    "text": "create an array you even computed its size at runtime you're creating array of",
    "start": "1249830",
    "end": "1254849"
  },
  {
    "text": "string well it's it'll just feel full of nulls because null is the only sensible default value of string even if strings",
    "start": "1254849",
    "end": "1261119"
  },
  {
    "text": "were not supposed to be now like what else would you use as a default value and the notion of default value of sort",
    "start": "1261119",
    "end": "1267149"
  },
  {
    "text": "of a zero value is deeply entrenched in most normal languages and for a reason",
    "start": "1267149",
    "end": "1272309"
  },
  {
    "text": "right it's really hard to create a programming language that's statically safe and does not have a notion of the",
    "start": "1272309",
    "end": "1279190"
  },
  {
    "text": "all value of a given type so in practice this runs out of steam in a in a more",
    "start": "1279190",
    "end": "1285790"
  },
  {
    "text": "mutation oriented more object-oriented programming language this approach but it has some really really good",
    "start": "1285790",
    "end": "1291970"
  },
  {
    "text": "properties that we want to and we want to latch on to if we're trying to solve this problem for an object on a",
    "start": "1291970",
    "end": "1297670"
  },
  {
    "text": "programming language the key property that I think is the most important one here is that it's explicit about intent",
    "start": "1297670",
    "end": "1305860"
  },
  {
    "text": "this link and there's option of link okay and there are two different types",
    "start": "1305860",
    "end": "1311260"
  },
  {
    "text": "one can be null over here and the other one can't okay so you explicit in the",
    "start": "1311260",
    "end": "1316450"
  },
  {
    "text": "type system about your intent and then the second thing is that there's enforcement of this intent I cannot",
    "start": "1316450",
    "end": "1322590"
  },
  {
    "text": "possibly well I would have to contort myself badly in order to circumvent the",
    "start": "1322590",
    "end": "1328450"
  },
  {
    "text": "type system and get at something that isn't there it's really hard for me to accidentally get a null reference",
    "start": "1328450",
    "end": "1333820"
  },
  {
    "text": "exception here right essentially have to cast and do unsafe things so so yeah the way I've said that when we were",
    "start": "1333820",
    "end": "1339700"
  },
  {
    "text": "explaining these concepts is our type system protects against Murphy not Machiavelli yes yes so so if you really",
    "start": "1339700",
    "end": "1348430"
  },
  {
    "text": "want yes you can get into trouble but you kind of have to ask for trouble more and so the ideal here is you know",
    "start": "1348430",
    "end": "1355050"
  },
  {
    "text": "enhance the type system to allow expressing whether null is intended or not in a given place where you use a",
    "start": "1355050",
    "end": "1361450"
  },
  {
    "text": "type and as much as possible enhance the type system to enforce that knowing that",
    "start": "1361450",
    "end": "1367450"
  },
  {
    "text": "we can't get all the way there because of these initialization problems you",
    "start": "1367450",
    "end": "1374890"
  },
  {
    "text": "know because of default values and stuff we can't get all the way there to making it a hundred percent safe and there are other reasons why we can't get all the",
    "start": "1374890",
    "end": "1381010"
  },
  {
    "text": "way to make it 100 percent safe one of the reasons being that it's one thing to create a new programming language today",
    "start": "1381010",
    "end": "1387280"
  },
  {
    "text": "and deal with nulls in it from scratch but we're actually creating an old programming language today right we have",
    "start": "1387280",
    "end": "1393310"
  },
  {
    "text": "C sharp already lying around had it for 20 years and now we want to go and fix the type",
    "start": "1393310",
    "end": "1399100"
  },
  {
    "text": "system and so that limits us so much more in terms of how we can approach this we're gonna try it's good and this",
    "start": "1399100",
    "end": "1406450"
  },
  {
    "text": "is one of the things I'm really interested in especially when we get later when I want to further my grades come some code I have to use this",
    "start": "1406450",
    "end": "1412480"
  },
  {
    "text": "and see you know how much benefit do I get in and how much does it hurt yeah I'm worried about the pain yes um I I",
    "start": "1412480",
    "end": "1420070"
  },
  {
    "text": "don't like pain either okay um so I don't really know why I have this job but I guess yeah I guess that's Murphy",
    "start": "1420070",
    "end": "1431919"
  },
  {
    "text": "but so I think now's a good time to actually start circling in on okay so",
    "start": "1431919",
    "end": "1439570"
  },
  {
    "text": "what did we do in c-sharp so the first thing is this expression of intent so I",
    "start": "1439570",
    "end": "1446200"
  },
  {
    "text": "think we have a couple of options given that we're adding this to a an existing language the first sort of knee-jerk",
    "start": "1446200",
    "end": "1453330"
  },
  {
    "text": "idea is well okay he wants these two expressions of intent this is definitely",
    "start": "1453330",
    "end": "1459160"
  },
  {
    "text": "not null and this might be null but it's protected against unauthorized access",
    "start": "1459160",
    "end": "1464190"
  },
  {
    "text": "okay the reference types you haven't seen sharp today on either of those they're the worst of both worlds right",
    "start": "1464190",
    "end": "1470140"
  },
  {
    "text": "they're like oh I can shove null in there and then immediately I can go and and include and you know dot into it in",
    "start": "1470140",
    "end": "1476620"
  },
  {
    "text": "the next line literally yeah so there's some clean stuff there at least it doesn't it doesn't make me change any of",
    "start": "1476620",
    "end": "1482440"
  },
  {
    "text": "my code now right so you have that pain if you do went that way right so but",
    "start": "1482440",
    "end": "1487780"
  },
  {
    "text": "sort of the this there's definitely a notion of cleanliness that we've operated on or under for twenty years",
    "start": "1487780",
    "end": "1494260"
  },
  {
    "text": "which is add new stuff don't change the old stuff right okay so we have these two new concepts neither of which we",
    "start": "1494260",
    "end": "1500440"
  },
  {
    "text": "have in the language today oh we should go and add a new kind of nun nullable reference type and a new kind of",
    "start": "1500440",
    "end": "1505960"
  },
  {
    "text": "knowledge I reference type to security and then people can a new code they can party with those and they can be safe",
    "start": "1505960",
    "end": "1511270"
  },
  {
    "text": "all over and too bad with what's already in there that sort of becomes the legacy reference type that you should maybe try",
    "start": "1511270",
    "end": "1517360"
  },
  {
    "text": "to avoid right so the idea would be something like you know this one here we would call that and that will be none",
    "start": "1517360",
    "end": "1523450"
  },
  {
    "text": "nullable okay so we annotate it like that and well actually you know let's",
    "start": "1523450",
    "end": "1528490"
  },
  {
    "text": "let's move back to where we don't have the options in there and it's a little easier to explain this so for a lot of",
    "start": "1528490",
    "end": "1536169"
  },
  {
    "text": "undo here the undo buffer luckily is large there we go I think we're back",
    "start": "1536169",
    "end": "1543549"
  },
  {
    "text": "okay so we could say that you know this drink should be none no but the link should be null and we haven't new",
    "start": "1543549",
    "end": "1549970"
  },
  {
    "text": "annotation for both and that's just a new world that's the new world of c-sharp okay and then okay and then bill",
    "start": "1549970",
    "end": "1557500"
  },
  {
    "text": "asks me but but I've got code I've gotta maintain that's exactly what he asks me and I yes okay so I think it's four",
    "start": "1557500",
    "end": "1564760"
  },
  {
    "text": "years if you want if you want you if we'll hopefully you tested it I can't",
    "start": "1564760",
    "end": "1569980"
  },
  {
    "text": "really help you if you really want to help what you should do we should probably have like it Roslin analyzer or",
    "start": "1569980",
    "end": "1575500"
  },
  {
    "text": "something and we should have a mode and the compiler that punishes you for all the legacy references types that you",
    "start": "1575500",
    "end": "1581110"
  },
  {
    "text": "have in there and makes you put either bangs or question marks all over your code so there will be no like uh Nana",
    "start": "1581110",
    "end": "1588010"
  },
  {
    "text": "tative reference types left in your code it sounds like pain that sounds like pain yes and and once you're done your",
    "start": "1588010",
    "end": "1594880"
  },
  {
    "text": "code will be swearing at you there'll be banks and question marks everything so",
    "start": "1594880",
    "end": "1600490"
  },
  {
    "text": "essentially if we try to go that route immediately people be like well give me a mode that makes me do the safe thing",
    "start": "1600490",
    "end": "1607169"
  },
  {
    "text": "break me please essentially punish me for the code I have now and and make me",
    "start": "1607169",
    "end": "1613390"
  },
  {
    "text": "do something else well if we're gonna break you anyway then we've kind of lost",
    "start": "1613390",
    "end": "1619450"
  },
  {
    "text": "the the benefit of adding these two new concepts we might as well break you by",
    "start": "1619450",
    "end": "1624820"
  },
  {
    "text": "taking the existing syntax and reinterpreting it giving you a mode",
    "start": "1624820",
    "end": "1630640"
  },
  {
    "text": "where that is reinterpreted as something else and that's the path we're gonna go down because now existing code already",
    "start": "1630640",
    "end": "1638230"
  },
  {
    "text": "means something safe it's either we have to decide okay do on annotated when I",
    "start": "1638230",
    "end": "1645220"
  },
  {
    "text": "just say string here do I mean nullable but now safe nullable or do I mean none nullable either way I kind of have to",
    "start": "1645220",
    "end": "1652780"
  },
  {
    "text": "I'm guessing that if I declared a variable I probably want to put something in it yeah yeah so it's",
    "start": "1652780",
    "end": "1659020"
  },
  {
    "text": "probably not no most of the time yes because I probably wanted something that right so we could so we could you could",
    "start": "1659020",
    "end": "1665830"
  },
  {
    "text": "reason either way like some people a lot of people say to us well obviously types today can have nulls in them so they're",
    "start": "1665830",
    "end": "1672340"
  },
  {
    "text": "not able so the new things should be none nullable right so it should be that link here is doesn't need annotation but",
    "start": "1672340",
    "end": "1679179"
  },
  {
    "text": "this one here needs an annotation saying it's not null and then the new thing that the way we break link here is that we start",
    "start": "1679179",
    "end": "1686770"
  },
  {
    "text": "checking when you dereference things that are knowable we start checking that",
    "start": "1686770",
    "end": "1691840"
  },
  {
    "text": "you actually knew that they weren't not like we started enforcing the conditional checking so so but yeah I'm",
    "start": "1691840",
    "end": "1700150"
  },
  {
    "text": "trying to think through my code bases and I'm going I'm gonna add a lot of bangs yeah because in most of my designs",
    "start": "1700150",
    "end": "1706510"
  },
  {
    "text": "I would be trying to say that this shouldn't be null yeah because of those I've got if this",
    "start": "1706510",
    "end": "1711700"
  },
  {
    "text": "isn't null or Elvis operator everywhere here they're they're all over the place so I probably try when I can that in my",
    "start": "1711700",
    "end": "1718780"
  },
  {
    "text": "constructor I'm going to initialize something to not null and then I'm gonna use it and it's always safe and then try",
    "start": "1718780",
    "end": "1726280"
  },
  {
    "text": "and avoid those checks and try to only put the tracks where somebody might be trying to set it to no that makes sense to me so say so the so none all is a",
    "start": "1726280",
    "end": "1734500"
  },
  {
    "text": "good default right if I want null that's an extra thing it's like the option of T",
    "start": "1734500",
    "end": "1740020"
  },
  {
    "text": "that we had before that's the extra thing that you have to opt into oh I want to be able to express a null here and I want to take the extra hurdle of",
    "start": "1740020",
    "end": "1747070"
  },
  {
    "text": "then doing the checking around it that should be the opt-in I'm glad you said that because that's what we actually did",
    "start": "1747070",
    "end": "1753450"
  },
  {
    "text": "so like I knew the script yeah it's like you've been here before it's like you wrote the documentation for this just",
    "start": "1753450",
    "end": "1759100"
  },
  {
    "text": "yeah okay so this is what we actually ended up with okay so but but this is weird like we now have a feature that is",
    "start": "1759100",
    "end": "1768150"
  },
  {
    "text": "that is a breaking change we've never had a breaking change in c-sharp before we have a feature that takes your",
    "start": "1768150",
    "end": "1773740"
  },
  {
    "text": "existing reference types and makes them mean something else a feature that starts punishing you if you put null",
    "start": "1773740",
    "end": "1780040"
  },
  {
    "text": "into your reference types which is the only place you could ever put them before so that's a bit drastic",
    "start": "1780040",
    "end": "1785950"
  },
  {
    "text": "and of course that has to be under a switch some kind of an opt-in mechanism so I'm gonna go and opt-in now which I",
    "start": "1785950",
    "end": "1791800"
  },
  {
    "text": "can do in my in my project file for the whole project I'm gonna say enable to this feature Noble reference types and",
    "start": "1791800",
    "end": "1798820"
  },
  {
    "text": "save that and go back to my program and see what happens what happens",
    "start": "1798820",
    "end": "1804310"
  },
  {
    "text": "oh I start getting warnings so the feature is doing something it's warning me about things I didn't add any and it",
    "start": "1804310",
    "end": "1811780"
  },
  {
    "text": "well actually I did I have an annotation let's take that away and just see like just in the vanilla code like if you",
    "start": "1811780",
    "end": "1817030"
  },
  {
    "text": "went and turned this on when on vanilla code that you hadn't done anything to what would happen well you start getting",
    "start": "1817030",
    "end": "1822580"
  },
  {
    "text": "warnings here and there and the warnings you'd get should be that you we were trying to prevent you from putting nulls",
    "start": "1822580",
    "end": "1828549"
  },
  {
    "text": "into the things that into your reference types because they're now not nullable and sure enough here I'm getting a",
    "start": "1828549",
    "end": "1835450"
  },
  {
    "text": "warning why isn't in an error by the way why are we just giving you warnings well I tried",
    "start": "1835450",
    "end": "1842260"
  },
  {
    "text": "turning it on once mm-hmm and I set warnings to errors and I turned it off yeah well you might get a lot of them so",
    "start": "1842260",
    "end": "1850480"
  },
  {
    "text": "it might be one reason another thing is that errors actually have semantic meaning and c-sharp we actually decided",
    "start": "1850480",
    "end": "1856390"
  },
  {
    "text": "that this feature in order to because we we are adding this null these inaudible reference types too you know billions of",
    "start": "1856390",
    "end": "1864760"
  },
  {
    "text": "lines of source code out there and in hoping for adoption of it it there has",
    "start": "1864760",
    "end": "1869980"
  },
  {
    "text": "to be as little impact as possible so this is a compile time only feature okay",
    "start": "1869980",
    "end": "1875169"
  },
  {
    "text": "it does not in any way shape or form change the semantics of the language at runtime so I think this is this is",
    "start": "1875169",
    "end": "1881799"
  },
  {
    "text": "something that I think if I understand exactly what you said I think this makes me feel a lot better about turning it",
    "start": "1881799",
    "end": "1887049"
  },
  {
    "text": "out on my existing things so if I turn it on I don't change any of the source code anywhere I'm gonna get some",
    "start": "1887049",
    "end": "1893140"
  },
  {
    "text": "warnings I've got warnings as errors okay I'm gonna have to do something maybe turn it off maybe do something hopefully you've",
    "start": "1893140",
    "end": "1898750"
  },
  {
    "text": "got a solution there but if I compile it and I get a neck see its behavior will",
    "start": "1898750",
    "end": "1903760"
  },
  {
    "text": "be exactly the same as before this feature can yes so you're only breaking me at compile time yes if I if I no",
    "start": "1903760",
    "end": "1911679"
  },
  {
    "text": "matter what I do my X C is going to be the same so as long as it's been tested I'm probably",
    "start": "1911679",
    "end": "1918760"
  },
  {
    "text": "okay as I was before yeah okay that's exactly the idea so still skeptical but",
    "start": "1918760",
    "end": "1926140"
  },
  {
    "text": "I'm feeling better I'm glad okay let's see we have we still have half an hour left hopefully I can get you all the way there and you'll",
    "start": "1926140",
    "end": "1932470"
  },
  {
    "text": "walk out before you do your part of the talk so so warnings only because air is",
    "start": "1932470",
    "end": "1938679"
  },
  {
    "text": "actually in c-sharp errors in weird ways actually have semantic impact it has to",
    "start": "1938679",
    "end": "1944350"
  },
  {
    "text": "do with overload resolution and lambda and stuff but actually if you put new errors into the language you changing",
    "start": "1944350",
    "end": "1949389"
  },
  {
    "text": "semantics so it's just warnings you can train on warning 1az errors and that's not impacting the semantics of the",
    "start": "1949389",
    "end": "1955269"
  },
  {
    "text": "language so if you really want your errors you can get them but we're not making the marriage we're just making the mornings because you your code still",
    "start": "1955269",
    "end": "1961239"
  },
  {
    "text": "means the same you should still be able to compile and run it deal with the warnings later so that's that's the",
    "start": "1961239",
    "end": "1967599"
  },
  {
    "text": "reason for that now let's go and chase down these one let's see what's happening here so sure enough the thing that's getting a warning is a null so",
    "start": "1967599",
    "end": "1973359"
  },
  {
    "text": "that's good it says I cannot convert there's no literal to an unknowable reference okay so I'm calling the",
    "start": "1973359",
    "end": "1979179"
  },
  {
    "text": "constructor down here and sure enough it says link which means now means the nun null so if I want to be able to pass",
    "start": "1979179",
    "end": "1985389"
  },
  {
    "text": "nulls in there which I do I think I do yeah we need those and someday we need them in there then I should I should",
    "start": "1985389",
    "end": "1991179"
  },
  {
    "text": "enter Tait this okay so the warning is making me improve my signature here okay",
    "start": "1991179",
    "end": "1996669"
  },
  {
    "text": "now I can't assign it into the into the property well I can make that one nullable as well great okay great now we",
    "start": "1996669",
    "end": "2003299"
  },
  {
    "text": "back to custody there's oh but now I got another warning why does this one saying it's saying hey it looks like you maybe",
    "start": "2003299",
    "end": "2010079"
  },
  {
    "text": "dereferencing a null reference a possible non reference here and we're back to getting what was the error",
    "start": "2010079",
    "end": "2015749"
  },
  {
    "text": "before when we use the option type we're back to the point in the code where it's telling us you should probably check",
    "start": "2015749",
    "end": "2021569"
  },
  {
    "text": "whether this thing is know before you using it so how can I check for null I would do question mark that before next",
    "start": "2021569",
    "end": "2027719"
  },
  {
    "text": "or is that gonna be wrong what will happen if I do oh no that's not gonna",
    "start": "2027719",
    "end": "2032819"
  },
  {
    "text": "help us at all is it no you're right that doesn't help and well now I get it yeah yeah then I'm passing a null to",
    "start": "2032819",
    "end": "2041399"
  },
  {
    "text": "this yeah and you know and then I could make that one nullable these Mel's do",
    "start": "2041399",
    "end": "2048569"
  },
  {
    "text": "get in the way a lot yeah now I get a warning here right okay possible do you",
    "start": "2048569",
    "end": "2053970"
  },
  {
    "text": "ever so either way it's we can't get away from this we have to do something conditional it will not let us recurse",
    "start": "2053970",
    "end": "2059940"
  },
  {
    "text": "forever right which is you know great so we have to decide we could we could certainly",
    "start": "2059940",
    "end": "2065730"
  },
  {
    "text": "make it so it prints link a link a question mark and maybe we should maybe",
    "start": "2065730",
    "end": "2070769"
  },
  {
    "text": "we should keep the signature like this but we can't get away with just you know conditionally passing null here like the",
    "start": "2070769",
    "end": "2078898"
  },
  {
    "text": "signature is a link yeah what we should know you wanted to do it unlink we can do it either way yeah so now here comes another thing",
    "start": "2078899",
    "end": "2086050"
  },
  {
    "text": "like what we what you saw in the in the option version of it was that they used pattern matching and there's sort of",
    "start": "2086050",
    "end": "2092408"
  },
  {
    "text": "like it correct by construction thing where if the thing was not null I got",
    "start": "2092409",
    "end": "2098349"
  },
  {
    "text": "the null value in a fresh variable and and I could just use that one and there",
    "start": "2098349",
    "end": "2103359"
  },
  {
    "text": "was no way I could do it wrong and we can attempt the same thing here",
    "start": "2103359",
    "end": "2108640"
  },
  {
    "text": "using pattern matching so we can say if link is if it is actually a link and",
    "start": "2108640",
    "end": "2120609"
  },
  {
    "text": "call it no sorry if linked our next sorry is actually a link because that checks",
    "start": "2120609",
    "end": "2128349"
  },
  {
    "text": "that there that is that only fires when it's none all right then call it next",
    "start": "2128349",
    "end": "2134140"
  },
  {
    "text": "and then do those things okay so I want",
    "start": "2134140",
    "end": "2140170"
  },
  {
    "text": "to do that on the next line here let me move that down then you know print next",
    "start": "2140170",
    "end": "2145270"
  },
  {
    "text": "now I'm doing exactly the same thing pretty much exactly pretty much the same thing as I did before when we had the",
    "start": "2145270",
    "end": "2151300"
  },
  {
    "text": "other types a first you know a then I can print that name okay so I'm only so I'm conditionally doing the recursive",
    "start": "2151300",
    "end": "2157420"
  },
  {
    "text": "call but that but but okay so but that's not how I used to check for now right",
    "start": "2157420",
    "end": "2162430"
  },
  {
    "text": "that's new like pattern matching is kind of newfangled and it's correct by construction that's great but I have all",
    "start": "2162430",
    "end": "2168670"
  },
  {
    "text": "these you have all this source code you have all these millions of lines that's not how you did it you probably remember to check for L",
    "start": "2168670",
    "end": "2174099"
  },
  {
    "text": "equal to angle and you had tests and you you know a lot of your code is actually not safe and it didn't look like this so",
    "start": "2174099",
    "end": "2180880"
  },
  {
    "text": "we can't just say oh okay okay we're using the old null but you have it you have to have a new way of checking for now that that's no good either so we",
    "start": "2180880",
    "end": "2188230"
  },
  {
    "text": "have to be able to recognize your existing ways of checking for now that's another way of sort of because we you",
    "start": "2188230",
    "end": "2194410"
  },
  {
    "text": "want to use this feature to check that your existing code is null safe and point out where it isn't it's no good if it ones every place you're not using",
    "start": "2194410",
    "end": "2200530"
  },
  {
    "text": "pattern matching I'm sorry I mean that's just not yeah there's like pattern matching in 0.3% of all the C sharp code",
    "start": "2200530",
    "end": "2206680"
  },
  {
    "text": "out there today I'm just making that up I'm trying I'm writing about it yeah I'm regular yeah I mean so so that's",
    "start": "2206680",
    "end": "2213580"
  },
  {
    "text": "fair either so what we so what we want to do is we want to actually recognize",
    "start": "2213580",
    "end": "2219790"
  },
  {
    "text": "your your existing old-fashioned null safe code so let's say that I said if",
    "start": "2219790",
    "end": "2225360"
  },
  {
    "text": "linked up next let's try this one if linked up next equals null return that's",
    "start": "2225360",
    "end": "2238750"
  },
  {
    "text": "a different way of doing it I might have done that in the past and then if I get",
    "start": "2238750",
    "end": "2246610"
  },
  {
    "text": "here I will print linked up next and now you notice I'm not getting a warning if",
    "start": "2246610",
    "end": "2252760"
  },
  {
    "text": "I didn't do the check I got a warning",
    "start": "2252760",
    "end": "2258060"
  },
  {
    "text": "but if I do the check I don't get a warning so magic that's magic or to",
    "start": "2258060",
    "end": "2264610"
  },
  {
    "text": "choose a different turn it's it's its flow analysis so so we're actually going",
    "start": "2264610",
    "end": "2271240"
  },
  {
    "text": "to length to track your variables through the flow of the code and see where do we think they can be known so",
    "start": "2271240",
    "end": "2277570"
  },
  {
    "text": "that's the way that we're trying to accommodate the fact that you're not you didn't write code that was correct by",
    "start": "2277570",
    "end": "2282850"
  },
  {
    "text": "construction in the past in fact you couldn't but you were still null safe all right so we will track the value of",
    "start": "2282850",
    "end": "2288400"
  },
  {
    "text": "variables and whether the compiler thinks it can be null at a given point and it knows that if it gets down here",
    "start": "2288400",
    "end": "2293700"
  },
  {
    "text": "linked up next was can't be null because if it was then we would have retained",
    "start": "2293700",
    "end": "2300870"
  },
  {
    "text": "this is completely safe right yeah anybody see a problem with this yes",
    "start": "2300870",
    "end": "2310140"
  },
  {
    "text": "another thread could have modified it in the meantime that's correct yeah or you know some I'm not calling a",
    "start": "2310230",
    "end": "2320920"
  },
  {
    "text": "whole lot of things here but you know some call that I have could secretly have accessed the object through some",
    "start": "2320920",
    "end": "2326560"
  },
  {
    "text": "other alias and changed it you know then you don't even need multiple threads just because it's null up here doesn't",
    "start": "2326560",
    "end": "2333370"
  },
  {
    "text": "necessarily mean that it's null down here and so as sort of a courtesy to existing code we we allow this to go",
    "start": "2333370",
    "end": "2341050"
  },
  {
    "text": "through anyway which shows an important point that there's a trade-off between the amount of pain we want",
    "start": "2341050",
    "end": "2346690"
  },
  {
    "text": "to inflict on you and the accuracy that we can do this with if we wanted to be more accurate we would only track local",
    "start": "2346690",
    "end": "2352780"
  },
  {
    "text": "variables and only if no lambda had captured them and you know somebody else could execute and something that mutates",
    "start": "2352780",
    "end": "2359020"
  },
  {
    "text": "them and so that would be the safest thing to do but then more of your there's lots of existing code like this",
    "start": "2359020",
    "end": "2365680"
  },
  {
    "text": "right and more of your existing code would then generate warnings even though it when you wrote it that it was safe",
    "start": "2365680",
    "end": "2371859"
  },
  {
    "text": "enough like you so but but okay we are missing the opportunity to tell you",
    "start": "2371859",
    "end": "2377260"
  },
  {
    "text": "about maybe a risking there's gonna be evil okay you gotta be Machiavelli I'm gonna be evil okay tell me what you're",
    "start": "2377260",
    "end": "2395440"
  },
  {
    "text": "doing I'm just going to show how you can be evil here okay that's what next year",
    "start": "2395440",
    "end": "2405569"
  },
  {
    "text": "okay Oh see you you're gonna use an evil null check you're not evil enough I'm",
    "start": "2414349",
    "end": "2424230"
  },
  {
    "text": "afraid it's not evil enough we're still",
    "start": "2424230",
    "end": "2435150"
  },
  {
    "text": "catching it because it doesn't know that you are it doesn't know that you're pretending to do a null check yes you",
    "start": "2435150",
    "end": "2447270"
  },
  {
    "text": "could so the implementation of next it so how's that did you design oh I did an Evo mall track there so I just added an",
    "start": "2447270",
    "end": "2454890"
  },
  {
    "text": "exclamation point oh we have talked about exclamation okay we'll do that thing so there are definitely ways that",
    "start": "2454890",
    "end": "2464760"
  },
  {
    "text": "you can trick it right and even if you're not Machiavelli but you just",
    "start": "2464760",
    "end": "2471000"
  },
  {
    "text": "Murphy mm-hmm there will be places where this will not catch your no reference exceptions this is not going to",
    "start": "2471000",
    "end": "2476580"
  },
  {
    "text": "guarantee that null reference exceptions go away it's just going to take care of the vast majority of them but we want to",
    "start": "2476580",
    "end": "2482040"
  },
  {
    "text": "hit that probably not 80/20 but more like in ninety ten trade-off where we get almost all of them but we really don't want to",
    "start": "2482040",
    "end": "2488400"
  },
  {
    "text": "cost you too much pain on your existing code and so that's essentially the design rationale here we're not in a black and white situation we're we're",
    "start": "2488400",
    "end": "2494970"
  },
  {
    "text": "trying to find the right place in the gray zone between reasonable convenience",
    "start": "2494970",
    "end": "2501930"
  },
  {
    "text": "and upgrading existing code versus reasonable safety around nulls so that",
    "start": "2501930",
    "end": "2509070"
  },
  {
    "text": "feels a little dirty but the extremes we've tried one extreme of it which is",
    "start": "2509070",
    "end": "2514950"
  },
  {
    "text": "not to check anything it's extremely convenient you never get new errors new compile time errors an existing code and",
    "start": "2514950",
    "end": "2521810"
  },
  {
    "text": "we've seen sort of the functional other extreme of it and it's unwieldy and in",
    "start": "2521810",
    "end": "2527940"
  },
  {
    "text": "and practically impossible in an object-oriented language so we have to put ourselves somewhere in the middle and that somewhere is different because",
    "start": "2527940",
    "end": "2535920"
  },
  {
    "text": "c-sharp is an existing language with existing code then it might be in a new language where you can take it a little further probably to the",
    "start": "2535920",
    "end": "2542040"
  },
  {
    "text": "correct side because you can make everybody use pattern matching always in a new language for instance or other",
    "start": "2542040",
    "end": "2547830"
  },
  {
    "text": "correct by construed by construction and features now you you kind of broke us",
    "start": "2547830",
    "end": "2554040"
  },
  {
    "text": "into a little extra feature that we have this they're these these places where you know better okay like here let's say",
    "start": "2554040",
    "end": "2562110"
  },
  {
    "text": "it wasn't evil null check but it was just null check okay so I'm just gonna rename it for now I'm not actually gonna",
    "start": "2562110",
    "end": "2568020"
  },
  {
    "text": "make it not evil but let's say I know that after this you know I check for null but the compiler doesn't know well",
    "start": "2568020",
    "end": "2575400"
  },
  {
    "text": "there are several things that that could happen here actually we use several",
    "start": "2575400",
    "end": "2580610"
  },
  {
    "text": "utility methods have special null semantics this string that is null or empty and stuff like that and and we're",
    "start": "2580610",
    "end": "2587400"
  },
  {
    "text": "coming up with this little attribute language that we're gonna let you attribute some methods as having special",
    "start": "2587400",
    "end": "2592950"
  },
  {
    "text": "null behavior and the compiler is gonna recognize those that gets into the gnarly z' but that even then there's",
    "start": "2592950",
    "end": "2598020"
  },
  {
    "text": "going to be situations where you know better than the compiler and that's what we have until recently called the damage",
    "start": "2598020",
    "end": "2605490"
  },
  {
    "text": "operator which is like I know what I'm doing shut up and we can't call it that",
    "start": "2605490",
    "end": "2611010"
  },
  {
    "text": "for various reasons so we're gonna probably call it the the suppression operator or something like that which is",
    "start": "2611010",
    "end": "2617190"
  },
  {
    "text": "a postfix bang so it kind of looks like damnit you know asserting this is alright",
    "start": "2617190",
    "end": "2622560"
  },
  {
    "text": "don't give me warnings on this particular conversion and and it makes",
    "start": "2622560",
    "end": "2628740"
  },
  {
    "text": "the morning go away but now you use it's like a cast you sort of took responsibility that you know if an",
    "start": "2628740",
    "end": "2634800"
  },
  {
    "text": "exception occurs here you kind of ask for it if you weren't right that you knew what you were doing it takes you",
    "start": "2634800",
    "end": "2641820"
  },
  {
    "text": "back into the old world temporarily so",
    "start": "2641820",
    "end": "2648620"
  },
  {
    "text": "John asks how bad do I feel when used in production code and I I would be very",
    "start": "2648620",
    "end": "2656940"
  },
  {
    "text": "wary of it generally if you need to use it in order to interact with another API",
    "start": "2656940",
    "end": "2662030"
  },
  {
    "text": "then something's probably wrong if if you have an implementation detail where",
    "start": "2662030",
    "end": "2667800"
  },
  {
    "text": "say there's an invariant that when this field this boolean is false and that",
    "start": "2667800",
    "end": "2674460"
  },
  {
    "text": "thing is net all right um we have lots of those cases waiting our little implementation types",
    "start": "2674460",
    "end": "2680850"
  },
  {
    "text": "in in the in the core libraries for instance then you know that's this",
    "start": "2680850",
    "end": "2686010"
  },
  {
    "text": "invariant you put it in a comment you say there is this invariant and essentially every bang in your code",
    "start": "2686010",
    "end": "2691500"
  },
  {
    "text": "should be accompanied by a comment saying why you think it's okay to have it there that would be my guidance and",
    "start": "2691500",
    "end": "2697230"
  },
  {
    "text": "make sure that it's very locally scoped there's a few other places where I've seen it as I've been starting to work through Docs where we're going to talk",
    "start": "2697230",
    "end": "2703830"
  },
  {
    "text": "about migrating code bases if you think of your average dto object pulling data",
    "start": "2703830",
    "end": "2709770"
  },
  {
    "text": "out of a database and stuffing fields in most of those have public getters and setters because serialization is really",
    "start": "2709770",
    "end": "2715650"
  },
  {
    "text": "hard on an immutable object so those properties are going to be initialized to null and then the but before you ever",
    "start": "2715650",
    "end": "2723119"
  },
  {
    "text": "actually see it because we're going to deserialize something into it then they become not null those properties the",
    "start": "2723119",
    "end": "2729540"
  },
  {
    "text": "compilers going to complain about because hey you can construct this by default that's going to all be null these are all bad and then there's some",
    "start": "2729540",
    "end": "2736619"
  },
  {
    "text": "idioms I'll show in the in the next hour to say here's how I can say I know this doesn't happen because of the semantics",
    "start": "2736619",
    "end": "2742020"
  },
  {
    "text": "of the object and like matt says though you if I'm just hitting bang I probably",
    "start": "2742020",
    "end": "2748290"
  },
  {
    "text": "feel really bad but if it's like okay I know how this thing was designed it was designed not to be null in some other",
    "start": "2748290",
    "end": "2754980"
  },
  {
    "text": "way that flow analysis won't help then I can turn it on and I can say why I did",
    "start": "2754980",
    "end": "2759990"
  },
  {
    "text": "turn it on yeah so don't be Tony Hoare at 3:00 a.m. be like oh nobody's gonna",
    "start": "2759990",
    "end": "2765090"
  },
  {
    "text": "care yeah so but but you that's a good segue to talk about how does this",
    "start": "2765090",
    "end": "2771240"
  },
  {
    "text": "feature work in in connection with initialization we talked about initialization it can be hard to you",
    "start": "2771240",
    "end": "2778530"
  },
  {
    "text": "know it can be hard to manage but we try so here's the here's a class where it's",
    "start": "2778530",
    "end": "2784890"
  },
  {
    "text": "a person class it has first name middle name and last name and it has a convenience constructor that only takes",
    "start": "2784890",
    "end": "2790080"
  },
  {
    "text": "the first and last name and assigns those in and I'm getting a warning on it by the feature here which is saying that",
    "start": "2790080",
    "end": "2796830"
  },
  {
    "text": "there's an unknowable property that I'm not initializing so it so essentially",
    "start": "2796830",
    "end": "2802590"
  },
  {
    "text": "the compiler tries to make you initialize all the non null things in the constructor",
    "start": "2802590",
    "end": "2808840"
  },
  {
    "text": "and that's how you're gonna discover many of the places that this type you",
    "start": "2808840",
    "end": "2813850"
  },
  {
    "text": "know that your type should should actually put question marks in that they should actually advertise nail ability so sure enough if I you know I can try",
    "start": "2813850",
    "end": "2820720"
  },
  {
    "text": "to circumvent this in various ways I can say okay I'm gonna it says it's not initialized while I'm gonna initialize it let me show you and you know I've",
    "start": "2820720",
    "end": "2827740"
  },
  {
    "text": "initialized it there you go and the warning goes away but I get another one saying hey you can't assign null to that",
    "start": "2827740",
    "end": "2833050"
  },
  {
    "text": "none no thing and of course this is where you know if it's if it's 3 a.m. I",
    "start": "2833050",
    "end": "2838360"
  },
  {
    "text": "would just do this and then go back walk away and and sometimes if you're in a",
    "start": "2838360",
    "end": "2844060"
  },
  {
    "text": "situation where you really know that it's going to be initialized through other means or it's okay for some reason",
    "start": "2844060",
    "end": "2850330"
  },
  {
    "text": "yeah you can you can put the bang there or you can you can put an initializer alright with null bang and that's how",
    "start": "2850330",
    "end": "2855850"
  },
  {
    "text": "you opt out saying okay I know better you know that you have this factory method that's actually calling the",
    "start": "2855850",
    "end": "2861340"
  },
  {
    "text": "constructor and filling in the remaining fields whatever it is but what we really",
    "start": "2861340",
    "end": "2866650"
  },
  {
    "text": "should do in this case is just just be honest and say okay middle names in this model here probably in reality all names",
    "start": "2866650",
    "end": "2873910"
  },
  {
    "text": "can probably be no like nobody it's not everyone who has a first name or a last name or a middle name I do for",
    "start": "2873910",
    "end": "2879820"
  },
  {
    "text": "simplicity let's just say the middle name here I mean just just be honest it",
    "start": "2879820",
    "end": "2886300"
  },
  {
    "text": "can sometimes be now now now everything's happy here but of course if",
    "start": "2886300",
    "end": "2891880"
  },
  {
    "text": "I go and if I go and use it if I go and write the print method for for four",
    "start": "2891880",
    "end": "2899470"
  },
  {
    "text": "persons you know static Corinne this is all print method set is only tested on",
    "start": "2899470",
    "end": "2904750"
  },
  {
    "text": "print methods and person person what else is there right um and who you know",
    "start": "2904750",
    "end": "2912100"
  },
  {
    "text": "with debugging these days even the person yes print that's pretty much what we write so if so an hour if I say come",
    "start": "2912100",
    "end": "2917740"
  },
  {
    "text": "to all the right line let's just say right line you know let's do a an",
    "start": "2917740",
    "end": "2927160"
  },
  {
    "text": "interpolator string and we say that's called this person is too long let's see",
    "start": "2927160",
    "end": "2933730"
  },
  {
    "text": "P dot P dot first name we can say P dat middle",
    "start": "2933730",
    "end": "2943550"
  },
  {
    "text": "name here but if I could eat men middle",
    "start": "2943550",
    "end": "2950720"
  },
  {
    "text": "name and so on right but and I'm allowed",
    "start": "2950720",
    "end": "2956300"
  },
  {
    "text": "to do that I can print null but let's say that I want to abbreviate the middle name so I'm gonna do this here okay I'm",
    "start": "2956300",
    "end": "2963470"
  },
  {
    "text": "just gonna print the first letter of the middle name you know now I actually get a warning saying hey you're do",
    "start": "2963470",
    "end": "2968990"
  },
  {
    "text": "referencing something that might be no and so it's helping you here which so so",
    "start": "2968990",
    "end": "2975920"
  },
  {
    "text": "I really should like do a conditional here and print print it differently or here I could use the question mark I",
    "start": "2975920",
    "end": "2982370"
  },
  {
    "text": "could so I could use things the question right now P dot middle name question",
    "start": "2982370",
    "end": "2987500"
  },
  {
    "text": "mark zero after middle name right there",
    "start": "2987500",
    "end": "2993650"
  },
  {
    "text": "I could then I would get null if right but it's ok to print nulls we just said",
    "start": "2993650",
    "end": "2999950"
  },
  {
    "text": "that yeah yeah yeah that's right I could do that yeah let's say so but it but it",
    "start": "2999950",
    "end": "3007120"
  },
  {
    "text": "helps me realize the problem is there and so actually one thing that you shouldn't let this feature do to you and",
    "start": "3007120",
    "end": "3013270"
  },
  {
    "text": "and I think many people have the just because none all is the default now many",
    "start": "3013270",
    "end": "3018400"
  },
  {
    "text": "people sort of have the there we go there we go many people sort of have the okay we should actually be avoiding",
    "start": "3018400",
    "end": "3025270"
  },
  {
    "text": "nulls now to be null safe we should avoid null and either you can easily go too far on the null avoidance they avoid",
    "start": "3025270",
    "end": "3031420"
  },
  {
    "text": "avoiding null is sort of what I would say and if null is warranted better to use null than to try to substitute some",
    "start": "3031420",
    "end": "3038080"
  },
  {
    "text": "other default value so let's say that okay I wanted to in I wanted to deal",
    "start": "3038080",
    "end": "3043090"
  },
  {
    "text": "with this problem by by assigning the empty string to middle name okay and that's not null so everything's",
    "start": "3043090",
    "end": "3051670"
  },
  {
    "text": "fine i circumvented the problem but now you know this is still going to crash at",
    "start": "3051670",
    "end": "3058300"
  },
  {
    "text": "runtime because it doesn't have a first element or cirith element because it's empty right so I just in fact I should",
    "start": "3058300",
    "end": "3065350"
  },
  {
    "text": "probably have a check in my constructor that you don't put an olive oyl string would strings in any of the name fields so you",
    "start": "3065350",
    "end": "3072960"
  },
  {
    "text": "just chased it out of the area that we just learned how to reason about a compile time and give you warnings about",
    "start": "3072960",
    "end": "3078690"
  },
  {
    "text": "it's better to use the actual null and the actual not about type and then get the warnings when you're not doing it",
    "start": "3078690",
    "end": "3084900"
  },
  {
    "text": "right don't shy away from using nulls and use",
    "start": "3084900",
    "end": "3090119"
  },
  {
    "text": "them whenever they make sense so I think that was an important point to get yeah",
    "start": "3090119",
    "end": "3095569"
  },
  {
    "text": "there's a few more places so we talked about this is there holes in this one of the big holes that I do feel bad about",
    "start": "3095569",
    "end": "3101690"
  },
  {
    "text": "is that is a race so there's a lot of",
    "start": "3101690",
    "end": "3110819"
  },
  {
    "text": "arrays in the world probably like scientifically around 50% of them are a",
    "start": "3110819",
    "end": "3116609"
  },
  {
    "text": "race of reference types I'm just making up okay so all over the world there'll",
    "start": "3116609",
    "end": "3123540"
  },
  {
    "text": "be people saying var array equals new string 10 okay that nowhere in the world",
    "start": "3123540",
    "end": "3135300"
  },
  {
    "text": "is anyone yet saying you string question mark 10 because they can't it's only",
    "start": "3135300",
    "end": "3143130"
  },
  {
    "text": "teach our age it's not out yet John skeet will have some code that does it but that's only because he's using",
    "start": "3143130",
    "end": "3149069"
  },
  {
    "text": "the preview okay so this is what's going to be there all",
    "start": "3149069",
    "end": "3155040"
  },
  {
    "text": "over the place millions and millions of millions of lines of creating a race that will now be interpreted as a race",
    "start": "3155040",
    "end": "3160770"
  },
  {
    "text": "of an unknowable reference type and it's full of nulls right there's ten nulls in",
    "start": "3160770",
    "end": "3166200"
  },
  {
    "text": "there should we give it warning on that",
    "start": "3166200",
    "end": "3170960"
  },
  {
    "text": "yeah we probably should for correctness sake but we'd be like and all that code",
    "start": "3171410",
    "end": "3178160"
  },
  {
    "text": "which is probably like the next thing it does is probably to initialize the array with proper proper and good not null",
    "start": "3178160",
    "end": "3184079"
  },
  {
    "text": "values right and in all the cases where it with you don't mean for null to be in there like when you mean for null to be",
    "start": "3184079",
    "end": "3190500"
  },
  {
    "text": "in there of course yes you should go and put the question why again but when you don't mean for null to be in there that's just what you were able to say",
    "start": "3190500",
    "end": "3195540"
  },
  {
    "text": "and then you the next three lines will be initializing it in a for loop or whatever what what can you do about a",
    "start": "3195540",
    "end": "3201690"
  },
  {
    "text": "warning that says you couldn't if you shouldn't create this array of null I mean it three lines",
    "start": "3201690",
    "end": "3208770"
  },
  {
    "text": "down it's gonna be fine you knew what you were doing how could you silence that warning how could you possibly make it shut up makes",
    "start": "3208770",
    "end": "3216119"
  },
  {
    "text": "tracks what's that these drug trucks all the time yeah circum so then the struct has what",
    "start": "3216119",
    "end": "3222810"
  },
  {
    "text": "inside and no yeah so yeah I mean so it",
    "start": "3222810",
    "end": "3228119"
  },
  {
    "text": "this is one of those difficult ones so we've we've opted to not give you a warning on that we've we talked about",
    "start": "3228119",
    "end": "3233130"
  },
  {
    "text": "there so there are these places where we don't go and we we don't favor",
    "start": "3233130",
    "end": "3238500"
  },
  {
    "text": "correctness we talked about having sort of a ludicrous mode where you know you tell the compiler not only should you",
    "start": "3238500",
    "end": "3244410"
  },
  {
    "text": "turn on in all ability in inaudible reference types but you should like go all the way correct by construction",
    "start": "3244410",
    "end": "3250250"
  },
  {
    "text": "don't let me build anything that has and like these unwanted nulls inside I go",
    "start": "3250250",
    "end": "3255600"
  },
  {
    "text": "all the way as far as we can and probably there'll be tiny little errors or a whole set that just you know",
    "start": "3255600",
    "end": "3262850"
  },
  {
    "text": "constructors calling virtual methods doing something in a in a drive class we",
    "start": "3262850",
    "end": "3269070"
  },
  {
    "text": "don't know about I get there'll be places where we can't go that we can't figure out it's just not doable at compile time but you know anything other",
    "start": "3269070",
    "end": "3276150"
  },
  {
    "text": "than that or maybe we've worn on constructors calling virtual methods of any kind you know make the ludicrous mode that will",
    "start": "3276150",
    "end": "3282119"
  },
  {
    "text": "not let any of this seep through and maybe some people want that in particular for new code or if they they have security crew who code so we're",
    "start": "3282119",
    "end": "3288359"
  },
  {
    "text": "talking about in if we don't make the ludicrous mode they'll be you know somebody like John or whoever will write the analyzer that does it like that adds",
    "start": "3288359",
    "end": "3295170"
  },
  {
    "text": "the extra warnings and so I think there will be that mode as well out there and the fact that you have the ability to to",
    "start": "3295170",
    "end": "3301109"
  },
  {
    "text": "express the intent to put the question marks or not that means that we can now have these analyzers and we can have",
    "start": "3301109",
    "end": "3306810"
  },
  {
    "text": "different levels that can exist out there different levels of rigor around how we how we then enforce it okay yeah",
    "start": "3306810",
    "end": "3315980"
  },
  {
    "text": "there's a few that you went pretty quick here since this this is your last demo",
    "start": "3315980",
    "end": "3321480"
  },
  {
    "text": "part right I think so because that that bit of empty string and such is one that I think we're going to I'm already",
    "start": "3321480",
    "end": "3327570"
  },
  {
    "text": "seeing questions and and discussions about this because you know we already had the empty string forever which was",
    "start": "3327570",
    "end": "3333090"
  },
  {
    "text": "how you represent there isn't a string here but it's almost like this extends to",
    "start": "3333090",
    "end": "3338530"
  },
  {
    "text": "other reference types more importantly and that right now the only way you represent there isn't anything here is null so string is kind of special",
    "start": "3338530",
    "end": "3346990"
  },
  {
    "text": "because we're maybe using it just to print so it might be right just to make it the empty string but this whole",
    "start": "3346990",
    "end": "3352300"
  },
  {
    "text": "redefining to have a different meaning for null I think that's going to be an interesting way for people to really",
    "start": "3352300",
    "end": "3359800"
  },
  {
    "text": "have to question what is the right way to fix code that uses that that type at least yeah I mean the empty string isn't",
    "start": "3359800",
    "end": "3367750"
  },
  {
    "text": "isn't a very good solution here no it's not just that we can't index into it hey",
    "start": "3367750",
    "end": "3372940"
  },
  {
    "text": "if we if we're actually like if we if we output the last name here as well and",
    "start": "3372940",
    "end": "3378190"
  },
  {
    "text": "you know full middle name even if it's null and nothing comes out you're gonna have two spaces between the first name",
    "start": "3378190",
    "end": "3383650"
  },
  {
    "text": "and the last name it's just like you do it's just not good no you want a special case whether it's there or not and",
    "start": "3383650",
    "end": "3390670"
  },
  {
    "text": "something one way or another but yeah I mean we're solving the null problem but all of the lengths related problems say",
    "start": "3390670",
    "end": "3399490"
  },
  {
    "text": "I mean null reference exceptions are probably by far like by orders of magnitude the most common exception but",
    "start": "3399490",
    "end": "3405579"
  },
  {
    "text": "the next one down is probably index out of range exception all right that's or or similar like you're you're indexing into a string or",
    "start": "3405579",
    "end": "3412180"
  },
  {
    "text": "an array or something and you and you got it wrong right and so there's that next level down of you know is there",
    "start": "3412180",
    "end": "3418750"
  },
  {
    "text": "some static analysis that could help you always stay within range well that's a much harder problem still that's like",
    "start": "3418750",
    "end": "3426119"
  },
  {
    "text": "hard and it's not I I don't personally",
    "start": "3426119",
    "end": "3431890"
  },
  {
    "text": "believe you could probably ever add that to an existing language you need a language that has safer constructs to begin with and then dynamically",
    "start": "3431890",
    "end": "3438760"
  },
  {
    "text": "allocated arrays and so on it will probably be restrictive and very annoying ways no but I like this I think",
    "start": "3438760",
    "end": "3443920"
  },
  {
    "text": "I'm starting to see some things where as we start to modify some code in the next session I'm starting to see the plan my",
    "start": "3443920",
    "end": "3449890"
  },
  {
    "text": "idea here is if I'm looking something is not just to get rid of warnings anyway I can it's to look at those warnings and ask",
    "start": "3449890",
    "end": "3456640"
  },
  {
    "text": "myself what's that expressing about what my design was yes how my design isn't really expressed in my code and then",
    "start": "3456640",
    "end": "3463390"
  },
  {
    "text": "modify my code to go okay now the compiler agrees with me about what my design",
    "start": "3463390",
    "end": "3469000"
  },
  {
    "text": "and if I fix it that way I probably have less to do because I had a design intent",
    "start": "3469000",
    "end": "3474250"
  },
  {
    "text": "and if I fix it by getting it that way then the compiler is helping me make sure that the code I wrote expresses the",
    "start": "3474250",
    "end": "3481720"
  },
  {
    "text": "design intent I had right I like this good good just in time you",
    "start": "3481720",
    "end": "3487060"
  },
  {
    "text": "have a we have a minute left so I want you over now I just have to be careful and last minute not to say something",
    "start": "3487060",
    "end": "3493000"
  },
  {
    "text": "that will turn you around again yeah so I think we've pretty much covered",
    "start": "3493000",
    "end": "3499060"
  },
  {
    "text": "everything here in terms of the language to sign there are little details that",
    "start": "3499060",
    "end": "3505770"
  },
  {
    "text": "may become bigger details when we get into bills talk I opted the whole project in to like the heart of the new",
    "start": "3505770",
    "end": "3513069"
  },
  {
    "text": "heart a cement I said please break all my code in this project by changing some setting on the product at the project",
    "start": "3513069",
    "end": "3518829"
  },
  {
    "text": "level and you might wonder as you migrate code is that the right",
    "start": "3518829",
    "end": "3524050"
  },
  {
    "text": "granularity to opt into this new world and that's something that you will there are ways of doing it in a more granular",
    "start": "3524050",
    "end": "3529599"
  },
  {
    "text": "fashion that I didn't show and that's something I think we will see in Bill's part in the next next generation so",
    "start": "3529599",
    "end": "3535060"
  },
  {
    "text": "there we will look at both like how sure think about it when I write new code and how should I and by example",
    "start": "3535060",
    "end": "3540849"
  },
  {
    "text": "Bill's going to upgrade some code onstage and take us through the steps of becoming null safe with your existing",
    "start": "3540849",
    "end": "3548829"
  },
  {
    "text": "code so that's pretty much it go have a",
    "start": "3548829",
    "end": "3554710"
  },
  {
    "text": "break and if you want to hear the second part of act 2 where Bill's the hero then",
    "start": "3554710",
    "end": "3560230"
  },
  {
    "text": "please come back in 20 minutes it's healing thank you [Applause]",
    "start": "3560230",
    "end": "3568059"
  }
]