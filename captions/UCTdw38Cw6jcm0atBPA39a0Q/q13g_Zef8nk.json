[
  {
    "text": "okay I think folks are still streaming in I suspect a lot of talks have run",
    "start": "1530",
    "end": "6549"
  },
  {
    "text": "slightly late so that's fine we will actually make a proper start in a couple of minutes those of you who are in",
    "start": "6549",
    "end": "11740"
  },
  {
    "text": "Kevin's talk just now he mentioned legacy a few times I now have a fairly",
    "start": "11740",
    "end": "17200"
  },
  {
    "text": "new appreciation of the word legacy since becoming a Hamilton fan part of",
    "start": "17200",
    "end": "23169"
  },
  {
    "text": "Hamilton is him saying legacy legacy what is a legacy it's planting seeds in the garden you never get to see from",
    "start": "23169",
    "end": "29919"
  },
  {
    "text": "which we understand that Hamilton was a consultant so he was writing all this code and then riding off into the sunset",
    "start": "29919",
    "end": "35949"
  },
  {
    "text": "and letting other people manage the mess that he'd left okay on your agendas you",
    "start": "35949",
    "end": "43809"
  },
  {
    "text": "will have seen that this talk is notionally by me and in an hour and 20",
    "start": "43809",
    "end": "50050"
  },
  {
    "text": "minutes there's another talk by Bill we noticed this and thought this is silly",
    "start": "50050",
    "end": "56859"
  },
  {
    "text": "a c-sharp 7.0 talk followed by a 7.1 and 7.2 and maybe more talk we thought it",
    "start": "56859",
    "end": "64510"
  },
  {
    "text": "would be much better if we presented together so the format that we've sort of discussed this morning is I will",
    "start": "64510",
    "end": "72159"
  },
  {
    "text": "present most of the code for this talk and occasionally bill will ask me questions as if he were you do not let",
    "start": "72159",
    "end": "81670"
  },
  {
    "text": "this stop you from asking questions as well okay you were me yeah and one thing",
    "start": "81670",
    "end": "87939"
  },
  {
    "text": "that bill can do is while I am looking at the keyboard so I will be sat for most of the time while I'm looking at",
    "start": "87939",
    "end": "94180"
  },
  {
    "text": "the keyboard bill can see any hands but if bill hasn't seen a hand within a few seconds just shout okay we're all",
    "start": "94180",
    "end": "100479"
  },
  {
    "text": "friends it's all fine no one will can so that consider that rude so please do",
    "start": "100479",
    "end": "106359"
  },
  {
    "text": "shout if you have any questions because chances are someone else is thinking the same thing but hopefully bill will ask",
    "start": "106359",
    "end": "113200"
  },
  {
    "text": "you questions and I will ask bill questions of sort of motivational things that you know what's a typical use case",
    "start": "113200",
    "end": "119500"
  },
  {
    "text": "how does this affect bat compat etc etc hopefully most of you have all of you",
    "start": "119500",
    "end": "127240"
  },
  {
    "text": "used c-sharp six or let's make it easier has anyone and I don't mean to cause any",
    "start": "127240",
    "end": "133510"
  },
  {
    "text": "embarrassment not reasonably familiar with c-sharp 6 because you may get confused if we use",
    "start": "133510",
    "end": "139690"
  },
  {
    "text": "some of the examples use string interpolation and things I've been",
    "start": "139690",
    "end": "145269"
  },
  {
    "text": "writing about c-sharp 6 and 7 together for sufficiently long that sometimes I get confused as to what's which features",
    "start": "145269",
    "end": "151450"
  },
  {
    "text": "are in in which version however we have an agenda here this is a slightly more",
    "start": "151450",
    "end": "158250"
  },
  {
    "text": "detailed version that I normally have because it was going into each feature",
    "start": "158250",
    "end": "164470"
  },
  {
    "text": "with the order to do things I was putting this together in a separate text file and then thought there's nothing desperately secret here you know it's",
    "start": "164470",
    "end": "171310"
  },
  {
    "text": "not Bills social security number or anything so I just keep it here because it's simpler okay I think that's all and",
    "start": "171310",
    "end": "181840"
  },
  {
    "text": "we're good to go so tuples are the first secret first feature of C sharp 7 and normally when I",
    "start": "181840",
    "end": "188410"
  },
  {
    "text": "would introduce a new version of C sharp 7 sorry new version of C sharp like with 3 & 4 & 5 it would be really easy to say",
    "start": "188410",
    "end": "196540"
  },
  {
    "text": "C sharp version X is all about this big idea and really can't do that about C",
    "start": "196540",
    "end": "204459"
  },
  {
    "text": "sharp 6 or 7 and it sounds like probably not with 8 although there are at least be a few big ideas C sharp both 6 and 7",
    "start": "204459",
    "end": "213430"
  },
  {
    "text": "have a bunch of smaller ideas they're mostly to do with making code easier to",
    "start": "213430",
    "end": "220180"
  },
  {
    "text": "write easier to read and a few bits and pieces in between so we'll start with",
    "start": "220180",
    "end": "225669"
  },
  {
    "text": "tuples and I'll show you some code to start with this uses tuples in a variety",
    "start": "225669",
    "end": "233109"
  },
  {
    "text": "of ways so we have at the top of our top of one equals and then what's called a",
    "start": "233109",
    "end": "239019"
  },
  {
    "text": "tuple literal and you can see we're pulling things out as item 1 and item 2 then we can see on the second section",
    "start": "239019",
    "end": "247329"
  },
  {
    "text": "that we can also construct it with value tuples and pull out item 1 and item 2 we",
    "start": "247329",
    "end": "255489"
  },
  {
    "text": "can use the same syntax as the first part and then pull them out as a and B",
    "start": "255489",
    "end": "261630"
  },
  {
    "text": "we don't have to use var we can specify the type and the element names in",
    "start": "261630",
    "end": "268460"
  },
  {
    "text": "in the type declaration sorry the variable declaration and then the topple literal doesn't have to have them a note",
    "start": "268460",
    "end": "275000"
  },
  {
    "text": "that this is assigning to a tuple with a long first element and an int and we can",
    "start": "275000",
    "end": "283250"
  },
  {
    "text": "infer them as we did in the in topple three okay so that's showing you some of",
    "start": "283250",
    "end": "292430"
  },
  {
    "text": "the syntax but what is it supple think of a tuple as an unincorporated form of",
    "start": "292430",
    "end": "299180"
  },
  {
    "text": "composition so out of interest how many of you were in my talk this morning loads of good talks is not a problem if",
    "start": "299180",
    "end": "305060"
  },
  {
    "text": "you weren't so I talked about composition and how it adds value and that there are lots of different levels",
    "start": "305060",
    "end": "311120"
  },
  {
    "text": "of composition there's just I want to shove these two values together then",
    "start": "311120",
    "end": "317900"
  },
  {
    "text": "there's I'm going to shove these two values together and give them names that imply some kind of greater meaning and",
    "start": "317900",
    "end": "324979"
  },
  {
    "text": "then there's I'm going to shove these two values together and indicate other",
    "start": "324979",
    "end": "330139"
  },
  {
    "text": "operations that you could do and that's called writing a class or a struct okay",
    "start": "330139",
    "end": "335960"
  },
  {
    "text": "and tuples have nothing to do with that but these first two around I want to",
    "start": "335960",
    "end": "341659"
  },
  {
    "text": "just shove a couple of things together in a completely uninhabited way I'm not saying anything about the values really",
    "start": "341659",
    "end": "347419"
  },
  {
    "text": "if I give them names they're more suggestions than fully validated",
    "start": "347419",
    "end": "356440"
  },
  {
    "text": "requirements and tuples allow you to do that really easily you may have seen",
    "start": "356440",
    "end": "364130"
  },
  {
    "text": "couple of T t1 t2 t3 etc in.net for",
    "start": "364130",
    "end": "370720"
  },
  {
    "text": "dotnet 4.7 introduced value tupple and it's available as a separate nougat",
    "start": "370720",
    "end": "376039"
  },
  {
    "text": "package 4.7 for alright okay well actually can I can i interject something",
    "start": "376039",
    "end": "382610"
  },
  {
    "text": "it's close there's a there's a dotnet core versus that net framework thing okay so dotnet framework it's delivered",
    "start": "382610",
    "end": "389479"
  },
  {
    "text": "as a Windows Update so you may have heard we do things like the spring update and the fall update",
    "start": "389479",
    "end": "395300"
  },
  {
    "text": "that's when they've gotten it framework I'm windows gets updated dotnet core it's delivered whenever dotnet core",
    "start": "395300",
    "end": "402230"
  },
  {
    "text": "wants to sew system that value tuple went in the fall creators update for",
    "start": "402230",
    "end": "410150"
  },
  {
    "text": "Windows which is four seven one that was the next Windows release it could be it on the.net core side its in.net core 2.0",
    "start": "410150",
    "end": "417190"
  },
  {
    "text": "so if you're building down in core apps you don't need the extra nougat package once you're on - on Windows if you're on",
    "start": "417190",
    "end": "425030"
  },
  {
    "text": "a machine that has four seven one then you don't need the extra nougat package",
    "start": "425030",
    "end": "430430"
  },
  {
    "text": "for any language feature that relies on a type will always have a new good package with that type so we're not",
    "start": "430430",
    "end": "437600"
  },
  {
    "text": "going to get you that way okay okay cool thank you I'm so system topple in dot f4",
    "start": "437600",
    "end": "447140"
  },
  {
    "text": "is a reference type and I think it's immutable I hardly ever used it I think so I think",
    "start": "447140",
    "end": "454340"
  },
  {
    "text": "it is system dot value topple or value tuple is a struct and it's mutable and",
    "start": "454340",
    "end": "462590"
  },
  {
    "text": "it has public fields are you feeling scared yet okay these are things that",
    "start": "462590",
    "end": "468740"
  },
  {
    "text": "are generally designed to make you run away screaming when you're writing an encapsulated type you don't have mutable",
    "start": "468740",
    "end": "475880"
  },
  {
    "text": "structs and you don't have public fields and in fact if either of those have been",
    "start": "475880",
    "end": "481790"
  },
  {
    "text": "true without the other it would have been a problem but the way to think of",
    "start": "481790",
    "end": "486860"
  },
  {
    "text": "values at value tupple is that it is unincorporated all its being is a",
    "start": "486860",
    "end": "492200"
  },
  {
    "text": "container a bag so when you have a tuple variable like tuple one here well let's",
    "start": "492200",
    "end": "500000"
  },
  {
    "text": "let's go for tuple 3 because it's got nicer names that's just a bag of fields it's got an e field and it's got to be",
    "start": "500000",
    "end": "506210"
  },
  {
    "text": "filled so it's fine for us to do that if",
    "start": "506210",
    "end": "514550"
  },
  {
    "text": "you have if you're passing a value you should think of it as a bag of values so",
    "start": "514550",
    "end": "520610"
  },
  {
    "text": "if you have a parameter everything will have been copied by value so it's fine",
    "start": "520610",
    "end": "526490"
  },
  {
    "text": "for you to modify that and that won't change the caller if you have a",
    "start": "526490",
    "end": "531620"
  },
  {
    "text": "read-only field that is a value tuple that's effectively a bag of read-only",
    "start": "531620",
    "end": "538570"
  },
  {
    "text": "fields a bag of values and it took me a while to be comfortable with this but I",
    "start": "538570",
    "end": "545560"
  },
  {
    "text": "am now so the reason that tuples were horrible",
    "start": "545560",
    "end": "551920"
  },
  {
    "text": "back in net for with couple of T were a few big reasons firstly no language",
    "start": "551920",
    "end": "558070"
  },
  {
    "text": "support you do not want to be writing this all over the place when you can",
    "start": "558070",
    "end": "564130"
  },
  {
    "text": "write this okay it makes a big difference secondly being able to assign names no",
    "start": "564130",
    "end": "575260"
  },
  {
    "text": "one wants to write item 1 and item 2 in particular if you ever use tuples with",
    "start": "575260",
    "end": "581649"
  },
  {
    "text": "two types that are the same or very similar if they are in turn int who's",
    "start": "581649",
    "end": "586839"
  },
  {
    "text": "gonna know which is which yeah my favorite example for doing named arguments in c-sharp fall was messagebox",
    "start": "586839",
    "end": "594310"
  },
  {
    "text": "show which has title and content or something like that title and text and I",
    "start": "594310",
    "end": "599740"
  },
  {
    "text": "could never remember I didn't want to have to remember which way around they went so use named arguments and you're",
    "start": "599740",
    "end": "606160"
  },
  {
    "text": "good to go likewise use name couple elements and you suddenly provide a lot more context",
    "start": "606160",
    "end": "612790"
  },
  {
    "text": "to anyone reading the code the computer doesn't care at all doesn't care about",
    "start": "612790",
    "end": "617949"
  },
  {
    "text": "the names more so than ever before as we'll see in a minute being value types it means that they're",
    "start": "617949",
    "end": "626860"
  },
  {
    "text": "cheaper to pass around if you want to return to values from a method say you want you've got you want to introduce a",
    "start": "626860",
    "end": "634480"
  },
  {
    "text": "new link operator of min/max it returns you both the minimum and maximum of a sequence at the same time that's fine",
    "start": "634480",
    "end": "641260"
  },
  {
    "text": "just return a tuple no heap allocation it's all good being value types and the",
    "start": "641260",
    "end": "647110"
  },
  {
    "text": "mutability sounds awful but it works really well for you to take existing",
    "start": "647110",
    "end": "652240"
  },
  {
    "text": "code that has a bunch of fields and just say gee oh I seem to have address 1",
    "start": "652240",
    "end": "658149"
  },
  {
    "text": "address to address 3 and you know name one name too that's clearly two different sets of",
    "start": "658149",
    "end": "665380"
  },
  {
    "text": "fields I don't want to bother writing an address that properly encapsulate things but it",
    "start": "665380",
    "end": "672129"
  },
  {
    "text": "would be helpful to have just two fields name and address that are then composed",
    "start": "672129",
    "end": "678189"
  },
  {
    "text": "so it's lightweight composition for times when you don't want to bother with encapsulation it's not saying that",
    "start": "678189",
    "end": "685149"
  },
  {
    "text": "encapsulation is bad but you don't always need it and this is why I'm not",
    "start": "685149",
    "end": "690730"
  },
  {
    "text": "sure whether I've got an agenda item for times that you shouldn't use tuples I would generally not recommend returning",
    "start": "690730",
    "end": "698139"
  },
  {
    "text": "tuples from public api's or accepting tuples in most cases it's going to be simpler to encapsulate this is what my",
    "start": "698139",
    "end": "707139"
  },
  {
    "text": "composed value means if it's something that is widely applicable so you want it to be public this is something we talked",
    "start": "707139",
    "end": "712930"
  },
  {
    "text": "about this morning is deciding when to use a topple and when to use to create a class or a struct and one of the",
    "start": "712930",
    "end": "720069"
  },
  {
    "text": "guidelines that I often give is think of someone coming to your code base and reading it for the first time they're",
    "start": "720069",
    "end": "725949"
  },
  {
    "text": "gonna look at the names of types you've defined the classes and structs and think those are important things and",
    "start": "725949",
    "end": "731589"
  },
  {
    "text": "concepts I should understand where I'm passing around a tuple I don't think",
    "start": "731589",
    "end": "737949"
  },
  {
    "text": "that's an important concept it's just values that happen to travel together so as you're trying to figure",
    "start": "737949",
    "end": "743379"
  },
  {
    "text": "out which one do I choose I'll often look at that is this a concept I want a reader to understand later when they",
    "start": "743379",
    "end": "750970"
  },
  {
    "text": "read this code or is this just values that happen to travel along together and for something like min max it would be",
    "start": "750970",
    "end": "758069"
  },
  {
    "text": "reasonable to write a public extension that did return tuples a topple of the",
    "start": "758069",
    "end": "764199"
  },
  {
    "text": "min and the max because you're not trying to encapsulate anything but if you find yourself returning a date time",
    "start": "764199",
    "end": "770470"
  },
  {
    "text": "and a string then a use noter time instead of date/time and B you think",
    "start": "770470",
    "end": "776559"
  },
  {
    "text": "about well what's the relationship between this date and time and the string and doesn't that deserve a more",
    "start": "776559",
    "end": "781990"
  },
  {
    "text": "first-class approach than just as bill says things that happen to go too long go along together",
    "start": "781990",
    "end": "787889"
  },
  {
    "text": "okay I'm gonna whistle on because it's really easy to spend and I know from nd",
    "start": "787889",
    "end": "794230"
  },
  {
    "text": "seals though to spend half an hour discussing tuples one important thing though is what they look like in CLR so",
    "start": "794230",
    "end": "803030"
  },
  {
    "text": "how many of you are familiar with anonymous types okay we introduced them in c-sharp 3 the fundamental to link",
    "start": "803030",
    "end": "810910"
  },
  {
    "text": "because they let you do lightweight projections with named elements tuples",
    "start": "810910",
    "end": "816770"
  },
  {
    "text": "are really different to anonymous types every time you use an anonymous type in",
    "start": "816770",
    "end": "823520"
  },
  {
    "text": "c-sharp the compiler will generate a new class for you internally modulo same",
    "start": "823520",
    "end": "832850"
  },
  {
    "text": "properties in the same order regardless of types because it uses generics but with tuples that doesn't happen there",
    "start": "832850",
    "end": "841550"
  },
  {
    "text": "are the value tuple types structs and those are the only ones that will ever be used so if I do var topple 3 B equals",
    "start": "841550",
    "end": "853660"
  },
  {
    "text": "foo 5 bar 20 then tuple 3 and tuple 3b",
    "start": "853660",
    "end": "863510"
  },
  {
    "text": "will have the same execution time type okay the compiler is using those names",
    "start": "863510",
    "end": "871030"
  },
  {
    "text": "for our benefit not for execution time benefit it's a little bit like if you've",
    "start": "871030",
    "end": "878570"
  },
  {
    "text": "used Java the type erasure in Java with generics where there's only one real",
    "start": "878570",
    "end": "883970"
  },
  {
    "text": "type and it's just useful at compile time to be able to restrict things that's very similar with types here in",
    "start": "883970",
    "end": "891680"
  },
  {
    "text": "c-sharp the language they are regarded as different types but with identity",
    "start": "891680",
    "end": "897860"
  },
  {
    "text": "conversions between tuple types that have the same element types in the same",
    "start": "897860",
    "end": "902960"
  },
  {
    "text": "order regardless of the names one downside of this compared with anonymous",
    "start": "902960",
    "end": "909200"
  },
  {
    "text": "types is that if you call to string on it it can't show you the the names so",
    "start": "909200",
    "end": "919010"
  },
  {
    "text": "let me do an on equals nu equals 1 equals 2 and then if we right",
    "start": "919010",
    "end": "928090"
  },
  {
    "text": "that's explicitly called a string okay so I will run this code and then we'll",
    "start": "930940",
    "end": "937860"
  },
  {
    "text": "can't remember their white background sorry so double numbers so our three",
    "start": "937860",
    "end": "943990"
  },
  {
    "text": "console dot write line statements print 1 comma 2 which is this T 1 so that's",
    "start": "943990",
    "end": "951550"
  },
  {
    "text": "the X Y true for t1 equals t2 even",
    "start": "951550",
    "end": "956680"
  },
  {
    "text": "though they've got different names and an on to string the anonymous type preserves the names which it can do",
    "start": "956680",
    "end": "962980"
  },
  {
    "text": "because precisely because the compiler has generated a new type each time ok so",
    "start": "962980",
    "end": "968920"
  },
  {
    "text": "there are there is that downside to tuples versus anonymous types but in",
    "start": "968920",
    "end": "974710"
  },
  {
    "text": "general they work how you want them to you can pass them as parameters you can have them as fields you can have them as",
    "start": "974710",
    "end": "980800"
  },
  {
    "text": "return values so here's an example if we",
    "start": "980800",
    "end": "985810"
  },
  {
    "text": "had lots of counters within within a type just have one tupple that keeps all",
    "start": "985810",
    "end": "992110"
  },
  {
    "text": "of them and then we can increment one of them or the other and obviously when you've only got one field yeah maybe it",
    "start": "992110",
    "end": "999040"
  },
  {
    "text": "would be worth having two fields instead but by the time this is a sort of mini encapsulation within an implementation",
    "start": "999040",
    "end": "1006030"
  },
  {
    "text": "that these things happen to travel around together then it's really useful",
    "start": "1006030",
    "end": "1012080"
  },
  {
    "text": "right I want to move on what do I miss bill that's I think we covered most of",
    "start": "1013670",
    "end": "1019440"
  },
  {
    "text": "it ok I think we're up to deconstruction oh there may be to add in the element names element names yes with element",
    "start": "1019440",
    "end": "1025829"
  },
  {
    "text": "names they are burned in in metadata with attributes so they are available publicly and they are available if you",
    "start": "1025830",
    "end": "1032699"
  },
  {
    "text": "wanted to use reflection to get at them yep although getting at them with reflection is interesting so one of the",
    "start": "1032700",
    "end": "1039180"
  },
  {
    "text": "one of the tricks that the compiler does is you can have as many tupple elements",
    "start": "1039180",
    "end": "1045689"
  },
  {
    "text": "as you like here hundreds if you want or at least I haven't run against a limit don't but you can and you could easily",
    "start": "1045690",
    "end": "1053340"
  },
  {
    "text": "have 12 value topple only goes up to 8 I think the compiler magically uses",
    "start": "1053340",
    "end": "1061320"
  },
  {
    "text": "another value tupple when it gets to item 8 and so if you have 12 elements that will",
    "start": "1061320",
    "end": "1068200"
  },
  {
    "text": "be a value tupple of t1 t2 t3 t4 t5 t6 t7 value T'Pol t1 t2 t3 t4 t5 and the",
    "start": "1068200",
    "end": "1076450"
  },
  {
    "text": "compiler just manages all of that and it manages how the element names are worked out within that and it's relatively",
    "start": "1076450",
    "end": "1083590"
  },
  {
    "text": "tricky so I think if you're dealing with reflection and tupple names expect it to",
    "start": "1083590",
    "end": "1088779"
  },
  {
    "text": "be a slightly rough ride unless there are helper functions available no the more the more important part about that",
    "start": "1088779",
    "end": "1094029"
  },
  {
    "text": "is if you've got if you do have tuples as a public part of your interface you deliver that dll visual studio and other",
    "start": "1094029",
    "end": "1100779"
  },
  {
    "text": "tools will read it right yes yes so you can expose element names in one assembly",
    "start": "1100779",
    "end": "1106240"
  },
  {
    "text": "and consume them in another that works ok let's segue into sorry any questions",
    "start": "1106240",
    "end": "1115360"
  },
  {
    "text": "on tuples it is a huge topic and it's kind of tricky to cover adequately I'm",
    "start": "1115360",
    "end": "1120759"
  },
  {
    "text": "aware of all the things that I haven't covered but think of them as bags don't be scared about them being mutable value",
    "start": "1120759",
    "end": "1127720"
  },
  {
    "text": "types but be aware that they are and those are kind of the big they don't generally expose them in public api's",
    "start": "1127720",
    "end": "1133480"
  },
  {
    "text": "are the key things and be aware that you do have values there sorry compiler",
    "start": "1133480",
    "end": "1140379"
  },
  {
    "text": "support for tupple literals you almost never want to be explicitly constructing",
    "start": "1140379",
    "end": "1146860"
  },
  {
    "text": "things like that ok let's look at deconstruction so tuples help you quickly compose things there are two",
    "start": "1146860",
    "end": "1155379"
  },
  {
    "text": "language features in c-sharp 7.0 that help you decompose things and one is just deconstruction and the other is",
    "start": "1155379",
    "end": "1162639"
  },
  {
    "text": "pattern matching so i'm pattern matching maybe more decomposed e in the future",
    "start": "1162639",
    "end": "1171899"
  },
  {
    "text": "anyone following along in the Rosslyn repo may have seen a load of language",
    "start": "1171899",
    "end": "1177190"
  },
  {
    "text": "designs because it's great that the C chart team mostly works in public now so we can see a lot of what pattern matching might look like way down the",
    "start": "1177190",
    "end": "1184960"
  },
  {
    "text": "track when we've also got record types and who knows what but will will stick to what we've got for at least this talk",
    "start": "1184960",
    "end": "1191519"
  },
  {
    "text": "so if I've got a tupple suppose I've got a method that",
    "start": "1191519",
    "end": "1197200"
  },
  {
    "text": "creates the minimum and maximum so I'm going to pass in a sequence and I will",
    "start": "1197200",
    "end": "1202630"
  },
  {
    "text": "get back a tupple that's all very well but maybe I want separate variables",
    "start": "1202630",
    "end": "1209950"
  },
  {
    "text": "because I'm gonna use the min and Max quite often wouldn't it be useful if I could just",
    "start": "1209950",
    "end": "1215460"
  },
  {
    "text": "decompose deconstruct it to two separate variables rather than one variable that",
    "start": "1215460",
    "end": "1221470"
  },
  {
    "text": "is a composition of fields well for some",
    "start": "1221470",
    "end": "1228340"
  },
  {
    "text": "reason visual studio thinks I want to keep seeing system console maybe our hovervan oh don't go away come",
    "start": "1228340",
    "end": "1237430"
  },
  {
    "text": "back yeah right so composition sorry",
    "start": "1237430",
    "end": "1244900"
  },
  {
    "text": "deconstruction allows you to declare several variables with something that sort of looks like declaring a tuple",
    "start": "1244900",
    "end": "1253060"
  },
  {
    "text": "variable but this isn't this is declaring three different fields sorry",
    "start": "1253060",
    "end": "1258550"
  },
  {
    "text": "three different local variables in one go so I'm calling this create couple that does whatever it needs to do and",
    "start": "1258550",
    "end": "1264780"
  },
  {
    "text": "then we have a B and C so if if we did",
    "start": "1264780",
    "end": "1277030"
  },
  {
    "text": "write our enumerable int source okay I'm not going to implement it now but if we",
    "start": "1277030",
    "end": "1289420"
  },
  {
    "text": "had mean of zero max of 100 it keeps removing Mike : bill would like you to",
    "start": "1289420",
    "end": "1297490"
  },
  {
    "text": "fix that I'm not even touching their keyboard no no fix Visual Studio you're",
    "start": "1297490",
    "end": "1303100"
  },
  {
    "text": "as the Microsoft employee on stage you're there for a it's will for every bug in Visual Studio",
    "start": "1303100",
    "end": "1310169"
  },
  {
    "text": "so using our min max example that I mentioned but didn't have coded up",
    "start": "1318200",
    "end": "1325309"
  },
  {
    "text": "sometimes you want to have things separately and all you've got to do is just say var min Max and if you want to",
    "start": "1326450",
    "end": "1333539"
  },
  {
    "text": "explicitly type things you can even mix",
    "start": "1333539",
    "end": "1339659"
  },
  {
    "text": "and match and say I I'll make some of it var in inside that up all sorry inside the local variable declarations but I'm",
    "start": "1339659",
    "end": "1346620"
  },
  {
    "text": "still declaring two local variables so that's a really handy thing to be able",
    "start": "1346620",
    "end": "1351750"
  },
  {
    "text": "to do take a composite value that's returned from a method or obtained in",
    "start": "1351750",
    "end": "1357779"
  },
  {
    "text": "any other way maybe it's a parameter mate who knows and extract separate variables from it so if that's a useful",
    "start": "1357779",
    "end": "1364799"
  },
  {
    "text": "thing to do but we've said well if you if you want to start encapsulating things properly then hey maybe you",
    "start": "1364799",
    "end": "1372029"
  },
  {
    "text": "should be creating a struct or a class well we don't want doing the right thing",
    "start": "1372029",
    "end": "1378929"
  },
  {
    "text": "there to take away functionality later if deconstruction is a useful thing in general why would we restrict it to",
    "start": "1378929",
    "end": "1385080"
  },
  {
    "text": "toughen well yeah so what if I only wanted them in ooh",
    "start": "1385080",
    "end": "1391679"
  },
  {
    "text": "and and don't just make me call min I want to just like throw away displaying a wonderful amount of faith in my memory",
    "start": "1391679",
    "end": "1400350"
  },
  {
    "text": "of c-sharp I haven't mentioned discards let's let's make this min Max boggled",
    "start": "1400350",
    "end": "1410720"
  },
  {
    "text": "where boggle is some bizarre thing that no one really wants at all and okay we",
    "start": "1410720",
    "end": "1424529"
  },
  {
    "text": "call min max boggle and all we wanted was the min so this underscore is what's",
    "start": "1424529",
    "end": "1432779"
  },
  {
    "text": "called a discard and interesting things happen if you already have a variable",
    "start": "1432779",
    "end": "1438899"
  },
  {
    "text": "called underscore which is valid but at this point it's trying to deconstruct to",
    "start": "1438899",
    "end": "1444840"
  },
  {
    "text": "two things so this is trying to assign to the existing variable",
    "start": "1444840",
    "end": "1450149"
  },
  {
    "text": "twice and declare a new one and I should have mentioned that it would have been fine if we'd had in May an equals 10 in",
    "start": "1450149",
    "end": "1461009"
  },
  {
    "text": "max equals 20 and these don't have to be called this yeah they could be 2 1 2 2 2",
    "start": "1461009",
    "end": "1467719"
  },
  {
    "text": "3 30 it's fine to do deconstruction this is an assignment instead of a",
    "start": "1467719",
    "end": "1473969"
  },
  {
    "text": "declaration ok hour 10 20 30 I've gone away now",
    "start": "1473969",
    "end": "1479339"
  },
  {
    "text": "we've assigned to three things at the same time and obviously min no longer",
    "start": "1479339",
    "end": "1485369"
  },
  {
    "text": "works however before we get to that before we got to that I was showing int",
    "start": "1485369",
    "end": "1490709"
  },
  {
    "text": "min and then underscore underscore where underscore just means I don't care and",
    "start": "1490709",
    "end": "1495989"
  },
  {
    "text": "this was already a convention that I certainly had if I had a lambda expression and I didn't care about the",
    "start": "1495989",
    "end": "1502409"
  },
  {
    "text": "parameters so say it was going to return a random number whatever then I would",
    "start": "1502409",
    "end": "1509399"
  },
  {
    "text": "use underscore as the parameter name to mean clear don't care so this codifies that into a discard and you can see I've",
    "start": "1509399",
    "end": "1517199"
  },
  {
    "text": "got two different discards both called the same thing I can't do int ignore int",
    "start": "1517199",
    "end": "1525049"
  },
  {
    "text": "ignore because that would be declaring two local variables with the same name",
    "start": "1525049",
    "end": "1530609"
  },
  {
    "text": "these discards really are discarded and I can't even get at them and that's why",
    "start": "1530609",
    "end": "1536129"
  },
  {
    "text": "there's no type specified this has not",
    "start": "1536129",
    "end": "1542149"
  },
  {
    "text": "created declared a local variable that was what you're getting at I see yes",
    "start": "1542149",
    "end": "1547349"
  },
  {
    "text": "good so what do you do if you don't want",
    "start": "1547349",
    "end": "1554249"
  },
  {
    "text": "to be using a couple for this so obviously I'm going to use date and time as the example so what if you've got a",
    "start": "1554249",
    "end": "1561269"
  },
  {
    "text": "date and we've mentioned at some talk",
    "start": "1561269",
    "end": "1566459"
  },
  {
    "text": "this morning Gary it wasn't my son line talk you know how would you represent a date and someone said with a year month",
    "start": "1566459",
    "end": "1572849"
  },
  {
    "text": "and day so naturally if you want to deconstruct a date you would deconstruct it into the Year month and day and maybe",
    "start": "1572849",
    "end": "1578909"
  },
  {
    "text": "calendar system well you can do that",
    "start": "1578909",
    "end": "1584280"
  },
  {
    "text": "with did I do have an extension method somewhere sorry extinction method",
    "start": "1584280",
    "end": "1589320"
  },
  {
    "text": "deconstruction so this is a version of node of time before I put this into Noda",
    "start": "1589320",
    "end": "1596100"
  },
  {
    "text": "time itself so I have this local date and so long as I have an extension",
    "start": "1596100",
    "end": "1602309"
  },
  {
    "text": "method or an instance method called deconstruct so deconstruct becomes a magic name as far as the c-sharp",
    "start": "1602309",
    "end": "1610049"
  },
  {
    "text": "compiler is concerned that takes a date and has three l parameters then I can do",
    "start": "1610049",
    "end": "1619040"
  },
  {
    "text": "get the current date from our system clock which does implement I clock Kevin",
    "start": "1619040",
    "end": "1626000"
  },
  {
    "text": "and then I can just assign to ymd",
    "start": "1626000",
    "end": "1631400"
  },
  {
    "text": "declaring variables called ymd and obviously I'd normally write year-month-day but I want to observe",
    "start": "1631400",
    "end": "1637559"
  },
  {
    "text": "that you don't have to call them that and that just deconstruct and it's not",
    "start": "1637559",
    "end": "1643290"
  },
  {
    "text": "just extension methods if you have a regular instance method that can be",
    "start": "1643290",
    "end": "1650490"
  },
  {
    "text": "internal it could be private if you're only using it through the same within",
    "start": "1650490",
    "end": "1658230"
  },
  {
    "text": "the same type you can just do that assignment and it will deconstruct for you I want to point out one nifty thing",
    "start": "1658230",
    "end": "1666150"
  },
  {
    "text": "here so this is the this is an",
    "start": "1666150",
    "end": "1672360"
  },
  {
    "text": "assignment to X and message that our parameters from exome message so that",
    "start": "1672360",
    "end": "1680000"
  },
  {
    "text": "this is something that is incredibly cool and probably our most loved use of",
    "start": "1680000",
    "end": "1686640"
  },
  {
    "text": "this feature is let's say you have yeah",
    "start": "1686640",
    "end": "1695580"
  },
  {
    "text": "but you're in the less talk we wanted to do immutability here right yeah there we",
    "start": "1695580",
    "end": "1701190"
  },
  {
    "text": "go so you got all this and and now I can assign that to the local fields in one",
    "start": "1701190",
    "end": "1707370"
  },
  {
    "text": "statement because it's a deconstruction assignment of three different variables",
    "start": "1707370",
    "end": "1713730"
  },
  {
    "text": "and I think that will work even should work even if they're immutable yes yeah so now that that makes writing",
    "start": "1713730",
    "end": "1722249"
  },
  {
    "text": "constructors especially clear take all the things that came in as arguments assign into all these fields but just",
    "start": "1722249",
    "end": "1728850"
  },
  {
    "text": "just do it in one statement please I really don't want to write brackets and extra stuff for this at the moment I",
    "start": "1728850",
    "end": "1735990"
  },
  {
    "text": "believe it will construct a value tupple of t1 t2 t3 and then deconstruct it",
    "start": "1735990",
    "end": "1742549"
  },
  {
    "text": "tuples don't use a deconstruct method for complex reasons that I do go into in",
    "start": "1742549",
    "end": "1748620"
  },
  {
    "text": "this fourth edition of c-sharp in depth but I don't intend to do here mostly because I can't remember them right now",
    "start": "1748620",
    "end": "1755210"
  },
  {
    "text": "well for one thing because there can be tuples as I mentioned tuples of more elements than value tuples supports so",
    "start": "1755240",
    "end": "1763289"
  },
  {
    "text": "it can't possibly support you can support it just through deconstruct so if you're not going to need deconstruct",
    "start": "1763289",
    "end": "1769049"
  },
  {
    "text": "why bother so at the moment that may be slightly less efficient than assigning",
    "start": "1769049",
    "end": "1776759"
  },
  {
    "text": "it through three statements but I bet if we all start using that and then complain about the performance",
    "start": "1776759",
    "end": "1782940"
  },
  {
    "text": "they'll just fix it I will point out that the team's using that the seizure of compiler teams using that all the time right",
    "start": "1782940",
    "end": "1788820"
  },
  {
    "text": "so yeah if it's if it's not already a pattern spotted by the JIT compiler I",
    "start": "1788820",
    "end": "1794249"
  },
  {
    "text": "would really expect it to be in the future because it's really sweet and the",
    "start": "1794249",
    "end": "1799379"
  },
  {
    "text": "fact that it's one statement makes it very obvious that that's all that the constructor is doing is copying from",
    "start": "1799379",
    "end": "1806100"
  },
  {
    "text": "there to there there's no other work in the constructor and sometimes constructors could do with doing some",
    "start": "1806100",
    "end": "1811619"
  },
  {
    "text": "actual work and in that case let's make that obvious so that's deconstruction",
    "start": "1811619",
    "end": "1819659"
  },
  {
    "text": "and you may be wondering why deconstruct uses out parameters instead of returning",
    "start": "1819659",
    "end": "1826259"
  },
  {
    "text": "a tuple of things that it can then deconstruct or whatever it's the way",
    "start": "1826259",
    "end": "1834869"
  },
  {
    "text": "that overload resolution works so imagine that imagine and public whatever",
    "start": "1834869",
    "end": "1845669"
  },
  {
    "text": "int Intex string message deconstruct and",
    "start": "1845669",
    "end": "1852320"
  },
  {
    "text": "parameters okay so this would have been a different design that's saying we can",
    "start": "1852320",
    "end": "1858179"
  },
  {
    "text": "deconstruct this to a tuple with int and whatever but in this case I've got two",
    "start": "1858179",
    "end": "1863850"
  },
  {
    "text": "different deconstruct methods one that will deconstruct the int and the message",
    "start": "1863850",
    "end": "1869640"
  },
  {
    "text": "and another that deconstructs to the int the message and the exception okay well",
    "start": "1869640",
    "end": "1875730"
  },
  {
    "text": "let's see what that would look like let's just copy it and exception",
    "start": "1875730",
    "end": "1882050"
  },
  {
    "text": "exception can you see the problem we have two parameter less methods that",
    "start": "1882050",
    "end": "1888000"
  },
  {
    "text": "differ only in return type c-sharp does not like that using out parameters it's",
    "start": "1888000",
    "end": "1894360"
  },
  {
    "text": "fine we we have all those out parameters which means that in no design to point you can deconstruct a local date to",
    "start": "1894360",
    "end": "1902010"
  },
  {
    "text": "either year month day or year month day in calendar and it just depends on how",
    "start": "1902010",
    "end": "1907410"
  },
  {
    "text": "you're trying to use the deconstruction that determines which overload is used",
    "start": "1907410",
    "end": "1913940"
  },
  {
    "text": "deconstruct cannot be generic for reasons of type inference gets really",
    "start": "1913940",
    "end": "1919200"
  },
  {
    "text": "really confused even if even if it feels like you should be able to do it you",
    "start": "1919200",
    "end": "1927690"
  },
  {
    "text": "just can't and it is it does make sense when you look at exactly how it's",
    "start": "1927690",
    "end": "1933059"
  },
  {
    "text": "represented in the language spec for well it's equivalent to calling exactly this and that wouldn't have type",
    "start": "1933059",
    "end": "1939150"
  },
  {
    "text": "inference applied I'm sorry about that it's just kind of annoying in a very",
    "start": "1939150",
    "end": "1945090"
  },
  {
    "text": "very few cases but it doesn't hurt the normal use case you know you said we",
    "start": "1945090",
    "end": "1950190"
  },
  {
    "text": "could go on for tuples for a half an hour yep we did yeah oh well we've done all of the construction that's good yeah",
    "start": "1950190",
    "end": "1957480"
  },
  {
    "text": "okay pattern matching so there are two",
    "start": "1957480",
    "end": "1966809"
  },
  {
    "text": "aspects to pattern matching that are worth separating out mentally because",
    "start": "1966809",
    "end": "1973140"
  },
  {
    "text": "each may expand in the future in c-sharp and it's worth knowing oh this is just a",
    "start": "1973140",
    "end": "1978690"
  },
  {
    "text": "new pattern or this is just a new place can use patterns I think there are less likely to be very many new ways of using",
    "start": "1978690",
    "end": "1985330"
  },
  {
    "text": "patterns but there may well be new patterns coming up there are three",
    "start": "1985330",
    "end": "1990520"
  },
  {
    "text": "patterns in c-sharp seven across all versions I think there is a constant",
    "start": "1990520",
    "end": "1995680"
  },
  {
    "text": "pattern there is a type pattern and there is the VAR pattern and patterns",
    "start": "1995680",
    "end": "2001350"
  },
  {
    "text": "look like this a value on the left and is and then the bit on the right that is",
    "start": "2001350",
    "end": "2008820"
  },
  {
    "text": "the pattern and you can tell the difference between this and the regular is operator because it's got more than",
    "start": "2008820",
    "end": "2016890"
  },
  {
    "text": "just a type so this is a tight pattern",
    "start": "2016890",
    "end": "2021990"
  },
  {
    "text": "that matches if X is an integer and it declares a pattern variable this I you",
    "start": "2021990",
    "end": "2032760"
  },
  {
    "text": "can also recognize that because you can't use the regular is statement with value types that's true in this",
    "start": "2032760",
    "end": "2038190"
  },
  {
    "text": "particular case you can you can tell the difference because it's int and you couldn't use X is int yeah I know it's",
    "start": "2038190",
    "end": "2048810"
  },
  {
    "text": "ears you can't use yeah yeah okay you can check that for boxed ones yeah for",
    "start": "2048810",
    "end": "2055530"
  },
  {
    "text": "non nullable value types you can't use as okay so the the interesting point and",
    "start": "2055530",
    "end": "2063270"
  },
  {
    "text": "that's interesting from a language nerd kind of perspective in that I believe",
    "start": "2063270",
    "end": "2068370"
  },
  {
    "text": "this is what caused the most discussion well Bill's trying to get right a few years",
    "start": "2068370",
    "end": "2074850"
  },
  {
    "text": "ago at a conference bill and I presented together and I started editing the code just before he presented it and this is",
    "start": "2074850",
    "end": "2080340"
  },
  {
    "text": "clearly his time for getting revenge on me and but the interesting bit about I is what the scope is in particular can I",
    "start": "2080340",
    "end": "2089790"
  },
  {
    "text": "use I outside the if statement so we can see here you know red squigglies i can",
    "start": "2089790",
    "end": "2096929"
  },
  {
    "text": "use i and this is where you would normally before pattern matching you'd",
    "start": "2096929",
    "end": "2102090"
  },
  {
    "text": "have to do if x is int then int I equals and then a cast from X to int okay this",
    "start": "2102090",
    "end": "2110820"
  },
  {
    "text": "gets rid of that you are very unlikely to have to need kind of casting ever again it's",
    "start": "2110820",
    "end": "2116130"
  },
  {
    "text": "wonderful so we can clearly use I inside",
    "start": "2116130",
    "end": "2121820"
  },
  {
    "text": "the F block however predict as I type",
    "start": "2121820",
    "end": "2127290"
  },
  {
    "text": "but before rosin catch it up to present squiggles or not whether I'll get an",
    "start": "2127290",
    "end": "2134250"
  },
  {
    "text": "error for this and if so what the error is okay there is an error hands up who",
    "start": "2134250",
    "end": "2143490"
  },
  {
    "text": "thinks that the error is that it's out of scope hands up those who think it's",
    "start": "2143490",
    "end": "2149820"
  },
  {
    "text": "another error and would be willing to say what that error is anyone yeah it's",
    "start": "2149820",
    "end": "2157320"
  },
  {
    "text": "not definitely assigned yeah use of",
    "start": "2157320",
    "end": "2162900"
  },
  {
    "text": "unassigned local variable I so we can't",
    "start": "2162900",
    "end": "2170760"
  },
  {
    "text": "use it there but it is in scope if I try to do int I equals 10 then that creates",
    "start": "2170760",
    "end": "2178590"
  },
  {
    "text": "an error a local variable or function named I is already defined in this scope",
    "start": "2178590",
    "end": "2185269"
  },
  {
    "text": "so I mentioned three types of patterns the type check pattern that says is this",
    "start": "2190610",
    "end": "2199410"
  },
  {
    "text": "value X a value of the type named here and if so please assign it to this newly",
    "start": "2199410",
    "end": "2204990"
  },
  {
    "text": "declared variable and it becomes definitely assigned if we can only get",
    "start": "2204990",
    "end": "2211200"
  },
  {
    "text": "into the because we can only get into this if block by that being true that's fine so I can do and X is long and other okay",
    "start": "2211200",
    "end": "2222030"
  },
  {
    "text": "this is now valid but useless code because something can't be both a long and a linked but is definitely assigned",
    "start": "2222030",
    "end": "2229290"
  },
  {
    "text": "if I try to do or here then I can't use",
    "start": "2229290",
    "end": "2234930"
  },
  {
    "text": "I because that's not definitely assigned because maybe I is assigned and maybe other is assigned Kevin why what",
    "start": "2234930",
    "end": "2244130"
  },
  {
    "text": "it's because it's an if is the problem is that I could write something up at",
    "start": "2250000",
    "end": "2255039"
  },
  {
    "text": "the top that goes if not X's int I and I need i to be in scope in the off clause",
    "start": "2255039",
    "end": "2260680"
  },
  {
    "text": "else clause oh I think so it's different",
    "start": "2260680",
    "end": "2271750"
  },
  {
    "text": "than yes yeah so the awkwardness that Kevin is",
    "start": "2271750",
    "end": "2277180"
  },
  {
    "text": "describing right so ugly because you need that variable in the else class in",
    "start": "2277180",
    "end": "2283329"
  },
  {
    "text": "scope for object J is null if J is int",
    "start": "2283329",
    "end": "2293130"
  },
  {
    "text": "kefflin no nothing in there then we",
    "start": "2293130",
    "end": "2299170"
  },
  {
    "text": "can't declare oh no do you know yeah",
    "start": "2299170",
    "end": "2311710"
  },
  {
    "text": "that's interesting because yeah we're allowed to declare Kevin higher whereas earlier on it was complaining about the",
    "start": "2311710",
    "end": "2318220"
  },
  {
    "text": "later declaration so you can't do it um but but but for well for the different",
    "start": "2318220",
    "end": "2324579"
  },
  {
    "text": "reason that the the compilers decided that the earlier declaration is the invalid one well okay so there's a",
    "start": "2324579",
    "end": "2330700"
  },
  {
    "text": "reason for that and this gets to the the whole the idea of seizure of helping you write correct code so first scope is a",
    "start": "2330700",
    "end": "2337359"
  },
  {
    "text": "compile time construct right and initialization is a runtime concept so I",
    "start": "2337359",
    "end": "2342549"
  },
  {
    "text": "need you to move the cursor just a bit so the scope of Kevin here is the entire method right because it's declared in",
    "start": "2342549",
    "end": "2348369"
  },
  {
    "text": "the method anyplace above this declaration it is uninitialized right",
    "start": "2348369",
    "end": "2354369"
  },
  {
    "text": "because we haven't gotten there yet but it's declared its scope is the whole method because of where it isn't braces",
    "start": "2354369",
    "end": "2359740"
  },
  {
    "text": "that sounds great but but the scope of ie is the whole method and it's one",
    "start": "2359740",
    "end": "2365319"
  },
  {
    "text": "that's complaining yes the scope of the other eye is the whole method as well ah",
    "start": "2365319",
    "end": "2370349"
  },
  {
    "text": "right okay yeah",
    "start": "2370349",
    "end": "2375450"
  },
  {
    "text": "yes I know right c-sharp is getting it useful yeah that's",
    "start": "2377330",
    "end": "2384210"
  },
  {
    "text": "a different um I I would love to give an example I I have used a counter example",
    "start": "2384210",
    "end": "2389990"
  },
  {
    "text": "but I can't remember it right now and that makes me very very sad I would I would like to move on I think",
    "start": "2389990",
    "end": "2395940"
  },
  {
    "text": "this is a deep rattle but it does it's right so that's what it is",
    "start": "2395940",
    "end": "2402420"
  },
  {
    "text": "yeah if I were to have an else clause here I really want things declared in that if to be available in the else no",
    "start": "2402420",
    "end": "2410099"
  },
  {
    "text": "it's not it's a different if it's a different sculpt because that one is",
    "start": "2410099",
    "end": "2415380"
  },
  {
    "text": "only true and that's why you have to move it out of the if statement and actually I've got the example now throw",
    "start": "2415380",
    "end": "2423210"
  },
  {
    "text": "new exception you can only pass int and then okay that's where it's useful yep I",
    "start": "2423210",
    "end": "2435020"
  },
  {
    "text": "want to be able to test for something and use the result of that test later and it could be that the if is a",
    "start": "2435020",
    "end": "2442380"
  },
  {
    "text": "different one and I want to be used able to use it for from the negative case",
    "start": "2442380",
    "end": "2448490"
  },
  {
    "text": "yeah it would be annoying to not be able to do that but don't feel bad about you",
    "start": "2448490",
    "end": "2455099"
  },
  {
    "text": "the C sharp team spent months trying to work out whether this should work or not",
    "start": "2455099",
    "end": "2461720"
  },
  {
    "text": "yes we are yeah we already have yeah okay but let's look at one example I",
    "start": "2461720",
    "end": "2470220"
  },
  {
    "text": "brought up Oh yep just a bit which which won't this line 16 and 17 right what",
    "start": "2470220",
    "end": "2476970"
  },
  {
    "text": "should happen there so um I'm gonna",
    "start": "2476970",
    "end": "2484050"
  },
  {
    "text": "guess so when when we get to object X this doesn't know that it was originally",
    "start": "2484050",
    "end": "2490230"
  },
  {
    "text": "via a nullable int because nullable int is just boxed as an int so yes it will",
    "start": "2490230",
    "end": "2497190"
  },
  {
    "text": "print hey you passed me 12 what's",
    "start": "2497190",
    "end": "2503570"
  },
  {
    "text": "interesting is what what if we do that that's still valid yeah",
    "start": "2503570",
    "end": "2509000"
  },
  {
    "text": "and that can detect that's basically saying did you pass null or not and that's a really bad way of saying did",
    "start": "2509000",
    "end": "2514820"
  },
  {
    "text": "you pass no way to do it Yeah right equals null speaking of really bad ways of passing things and checking things",
    "start": "2514820",
    "end": "2521030"
  },
  {
    "text": "let's look at the next kind of pattern this is the constant pattern so we still",
    "start": "2521030",
    "end": "2526160"
  },
  {
    "text": "have is but it's saying if X is 5",
    "start": "2526160",
    "end": "2531220"
  },
  {
    "text": "okay no one should ever write that code unless they're demonstrating the constant pattern in this case because",
    "start": "2531220",
    "end": "2537890"
  },
  {
    "text": "you know we know that X is an int so this is exactly equivalent to that that's yeah that's the better way of",
    "start": "2537890",
    "end": "2544790"
  },
  {
    "text": "doing that there is a reason for using this this kind of pattern which I'll",
    "start": "2544790",
    "end": "2550910"
  },
  {
    "text": "show you when we talk about switching case here's a slightly less pointless",
    "start": "2550910",
    "end": "2556400"
  },
  {
    "text": "version where we're passing in an object or reference and now we're saying is it",
    "start": "2556400",
    "end": "2562610"
  },
  {
    "text": "5 and now the question is under what situations and what circumstances is",
    "start": "2562610",
    "end": "2568790"
  },
  {
    "text": "that true so here are some examples we're going to call it with 10 don't",
    "start": "2568790",
    "end": "2575810"
  },
  {
    "text": "expect that to print that you passed in 5 5 would expect that to say you've",
    "start": "2575810",
    "end": "2582050"
  },
  {
    "text": "passed in 5 5 l the long 5 or and",
    "start": "2582050",
    "end": "2588110"
  },
  {
    "text": "passing in a string no that's not equal to 5 and let's let's just give us one",
    "start": "2588110",
    "end": "2593120"
  },
  {
    "text": "more just to if we're gonna do a string let's try the string 5 oh good man",
    "start": "2593120",
    "end": "2600650"
  },
  {
    "text": "you're writing JavaScript yeah exactly so this is I don't know what the VB version of pattern matching does it who",
    "start": "2600650",
    "end": "2607130"
  },
  {
    "text": "knows so the the interesting one here is",
    "start": "2607130",
    "end": "2612650"
  },
  {
    "text": "5 l and without wishing to this is for",
    "start": "2612650",
    "end": "2617660"
  },
  {
    "text": "my interest how many of you think that this should say yep that's 5 okay and",
    "start": "2617660",
    "end": "2624080"
  },
  {
    "text": "how many of you think it shouldn't be 5 okay and about 1/4 of you didn't put up",
    "start": "2624080",
    "end": "2631520"
  },
  {
    "text": "your hands fine that's fine so we've got 5 things here oh there bill",
    "start": "2631520",
    "end": "2636920"
  },
  {
    "text": "there is all that's because I've done all kinds of",
    "start": "2636920",
    "end": "2642239"
  },
  {
    "text": "let's just remove all our undo everything from there I love change",
    "start": "2642239",
    "end": "2648519"
  },
  {
    "text": "control okay we are now building so if",
    "start": "2648519",
    "end": "2653650"
  },
  {
    "text": "we do pattern matching one oh okay we screwed up our pattern matching things",
    "start": "2653650",
    "end": "2660970"
  },
  {
    "text": "for Kevin's sake of course good thank you it's always good to have",
    "start": "2660970",
    "end": "2669369"
  },
  {
    "text": "a helpful audience right pattern matching one okay so we previously did a",
    "start": "2669369",
    "end": "2676539"
  },
  {
    "text": "few checks before fire ten isn't five five as an int really as five but five",
    "start": "2676539",
    "end": "2685029"
  },
  {
    "text": "long isn't five so it really is checking both the type and the value and if we made it X is five L then it it would be",
    "start": "2685029",
    "end": "2693430"
  },
  {
    "text": "those two would be reversed and no a string value five really isn't an integer 5 which I think we can all be",
    "start": "2693430",
    "end": "2700420"
  },
  {
    "text": "grateful for okay so the third kind of I",
    "start": "2700420",
    "end": "2707170"
  },
  {
    "text": "haven't got a nick we need to comment okay yeah so var will will help more so",
    "start": "2707170",
    "end": "2713589"
  },
  {
    "text": "we've seen that you can use patterns remember kinds of pattern you can use places you can use patterns you've seen",
    "start": "2713589",
    "end": "2720130"
  },
  {
    "text": "the places you can use patterns as if statements and I think you can just do",
    "start": "2720130",
    "end": "2727089"
  },
  {
    "text": "boolean x' as well just the boolean it is expression yeah you can also use them",
    "start": "2727089",
    "end": "2734979"
  },
  {
    "text": "for switch case and we've currently seen type and constant patterns switch cases",
    "start": "2734979",
    "end": "2740859"
  },
  {
    "text": "where constant patterns become more useful and where the third kind of pattern of var comes along so previously",
    "start": "2740859",
    "end": "2750759"
  },
  {
    "text": "switch statements have always had to have cases that are constants and those",
    "start": "2750759",
    "end": "2757210"
  },
  {
    "text": "constants have had to be distinct so there has never been any opportunity for more than one case to match okay unless",
    "start": "2757210",
    "end": "2765789"
  },
  {
    "text": "you consider default as always match and it will sometimes match other things as",
    "start": "2765789",
    "end": "2770859"
  },
  {
    "text": "well now switch statements the order matters so",
    "start": "2770859",
    "end": "2777920"
  },
  {
    "text": "we're taking some object in and we're saying if we were given five which we've already seen will be only when it's five",
    "start": "2777920",
    "end": "2785390"
  },
  {
    "text": "as an integer will return fives never blend if we're given these are the same",
    "start": "2785390",
    "end": "2793160"
  },
  {
    "text": "condition twice for the sake of the comment basically so two case labels for",
    "start": "2793160",
    "end": "2800690"
  },
  {
    "text": "the same case block that's as normal but there's an interesting thing here which",
    "start": "2800690",
    "end": "2806570"
  },
  {
    "text": "is I can't use Y or Z if we only have",
    "start": "2806570",
    "end": "2813440"
  },
  {
    "text": "one passim variable or other one case",
    "start": "2813440",
    "end": "2820340"
  },
  {
    "text": "statement so there's only one case label that can have matched so Y is definitely",
    "start": "2820340",
    "end": "2826670"
  },
  {
    "text": "assigned then Y is introduced really",
    "start": "2826670",
    "end": "2831770"
  },
  {
    "text": "interestingly we can have another case table for Y or rather that introduces a",
    "start": "2831770",
    "end": "2838700"
  },
  {
    "text": "pattern match for Y just for any int and the scope of that the scope of any",
    "start": "2838700",
    "end": "2844940"
  },
  {
    "text": "pattern variable introduced by a case label is that case block this is not the",
    "start": "2844940",
    "end": "2853580"
  },
  {
    "text": "same as if we declare a variable so we",
    "start": "2853580",
    "end": "2860210"
  },
  {
    "text": "have no let's not call it X let's call it local if in some completely different",
    "start": "2860210",
    "end": "2866990"
  },
  {
    "text": "case label we try to write the value of local it will say it's not definitely",
    "start": "2866990",
    "end": "2872030"
  },
  {
    "text": "assigned it is in scope this is bizarre and basically I think a failure in the",
    "start": "2872030",
    "end": "2878960"
  },
  {
    "text": "the c-sharp specification but it's far too late to fix okay there's no good way",
    "start": "2878960",
    "end": "2887090"
  },
  {
    "text": "to fix it now basically case case labels should have required braces all the time",
    "start": "2887090",
    "end": "2892730"
  },
  {
    "text": "at which point it would have just been solved by all the regular rules early",
    "start": "2892730",
    "end": "2898310"
  },
  {
    "text": "versions in fact I think currently the MS spec claims that you can reorder case labels so however you like you couldn't",
    "start": "2898310",
    "end": "2906740"
  },
  {
    "text": "before because of this and you definitely definitely can't from c-sharp 7 because of patterns so these take",
    "start": "2906740",
    "end": "2913100"
  },
  {
    "text": "precedence in an order so literally the generated code will sorry",
    "start": "2913100",
    "end": "2921850"
  },
  {
    "text": "you can put curly braces if you want absolutely yeah so first it will check",
    "start": "2921850",
    "end": "2930500"
  },
  {
    "text": "whether it's 5 then it will check whether it's divisible by 5 then it will check whether it's an odd number then it",
    "start": "2930500",
    "end": "2938510"
  },
  {
    "text": "will check whether it's an integer so if you pass in 5 then every single one of",
    "start": "2938510",
    "end": "2944780"
  },
  {
    "text": "these case statements these case labels will match but it's the first one that takes priority there's one exception to",
    "start": "2944780",
    "end": "2953480"
  },
  {
    "text": "that if you give a default that default",
    "start": "2953480",
    "end": "2963080"
  },
  {
    "text": "is always effectively at the bottom now it's not compiling because of the the",
    "start": "2963080",
    "end": "2970250"
  },
  {
    "text": "VAR case which I will explain in a minute but the fact that this is at the",
    "start": "2970250",
    "end": "2977600"
  },
  {
    "text": "top is irrelevant and therefore I would strongly recommend that you always put it at the bottom so you don't need to",
    "start": "2977600",
    "end": "2983780"
  },
  {
    "text": "remember this okay if your convention is it's always at the bottom then it's obvious that it will only happen if",
    "start": "2983780",
    "end": "2990230"
  },
  {
    "text": "nothing else matches the final kind of",
    "start": "2990230",
    "end": "2995990"
  },
  {
    "text": "pattern and the one that's more useful in switch case that in if statements and",
    "start": "2995990",
    "end": "3002800"
  },
  {
    "text": "things is this VAR which is kind of like a tight pattern except it matches",
    "start": "3002800",
    "end": "3008290"
  },
  {
    "text": "everything so it ends up with a static type which is the same as the thing that",
    "start": "3008290",
    "end": "3014350"
  },
  {
    "text": "you are switching on so if you are switching on an iPhone the type of oh",
    "start": "3014350",
    "end": "3019510"
  },
  {
    "text": "would be I foo because it will definitely be at least that good in this",
    "start": "3019510",
    "end": "3030040"
  },
  {
    "text": "case it's object but we could we could make it I comparable in this case and",
    "start": "3030040",
    "end": "3036040"
  },
  {
    "text": "it's still fine for those various intz and then Oh we'll be I can you won't be able to see",
    "start": "3036040",
    "end": "3042480"
  },
  {
    "text": "this but that really does say local variable I comparable oh so this is like",
    "start": "3042480",
    "end": "3047790"
  },
  {
    "text": "a default case except you get to use the variable afterwards which isn't terribly",
    "start": "3047790",
    "end": "3055170"
  },
  {
    "text": "useful if you're just switching on X but if you are switching on some large expression then you don't want to have",
    "start": "3055170",
    "end": "3061620"
  },
  {
    "text": "to evaluate that expression earlier sorry twice or have a declared local",
    "start": "3061620",
    "end": "3067620"
  },
  {
    "text": "variable above it just lets you say match something and capture it okay yeah",
    "start": "3067620",
    "end": "3073740"
  },
  {
    "text": "you further I think you can put a one clause there yes so I didn't even",
    "start": "3073740",
    "end": "3079050"
  },
  {
    "text": "introduce the when clauses these are what are called guard clauses when date",
    "start": "3079050",
    "end": "3086520"
  },
  {
    "text": "time dot now dot our minute less than 14",
    "start": "3086520",
    "end": "3093090"
  },
  {
    "text": "because we really need to move on before it gets to 514 so yes you can",
    "start": "3093090",
    "end": "3098460"
  },
  {
    "text": "a var close without any guard will always match even if it's null unlike",
    "start": "3098460",
    "end": "3106200"
  },
  {
    "text": "anything else that does type matches but you can put these guard pauses and that",
    "start": "3106200",
    "end": "3112290"
  },
  {
    "text": "can be an arbitrary expression that can also have more pattern matching in which",
    "start": "3112290",
    "end": "3119400"
  },
  {
    "text": "will declare more which can declare more pattern variables so you can capture more than one pattern variable in one",
    "start": "3119400",
    "end": "3125700"
  },
  {
    "text": "case label you did actually gloss over something really really important if you",
    "start": "3125700",
    "end": "3130740"
  },
  {
    "text": "look at this case string name when named out links is greater than 5 we don't need to check against null there okay",
    "start": "3130740",
    "end": "3138030"
  },
  {
    "text": "even if the type up at the top that we passed in was a string this pattern only matches if it is not null there must",
    "start": "3138030",
    "end": "3144720"
  },
  {
    "text": "actually be storage there which is just like the is statement as you'd expect",
    "start": "3144720",
    "end": "3150120"
  },
  {
    "text": "you know if o is string checks that I'll is that o is not null as well okay we're",
    "start": "3150120",
    "end": "3156570"
  },
  {
    "text": "rapidly running out of time this is fine it is well that's the trouble it's always fun local functions basically you",
    "start": "3156570",
    "end": "3166740"
  },
  {
    "text": "can now use declare functions inside or declare methods inside other math",
    "start": "3166740",
    "end": "3174650"
  },
  {
    "text": "so here we have a way of doing the Fibonacci sequence I should have done a Fibonacci version that uses tupple",
    "start": "3174650",
    "end": "3181320"
  },
  {
    "text": "deconstruction and assignment because that's a really nice way of doing it but",
    "start": "3181320",
    "end": "3187230"
  },
  {
    "text": "this is just calling fib from within main outside main fib does not exist and",
    "start": "3187230",
    "end": "3193190"
  },
  {
    "text": "you can sort of mock that up a little bit with delegates but it's really annoying",
    "start": "3193190",
    "end": "3199910"
  },
  {
    "text": "it gets more than annoying when it comes to capture variables though so a local",
    "start": "3199910",
    "end": "3206160"
  },
  {
    "text": "very local method is allowed to capture variables just like a lambda expression can but the difference is that generated",
    "start": "3206160",
    "end": "3214380"
  },
  {
    "text": "code if you capture variables and you don't do anything with the local method",
    "start": "3214380",
    "end": "3221760"
  },
  {
    "text": "that would potentially prolong the lifetime of those capture variables like",
    "start": "3221760",
    "end": "3227700"
  },
  {
    "text": "converting it into a delegate or something like that then the compiler can do cool stuff to make it really",
    "start": "3227700",
    "end": "3234119"
  },
  {
    "text": "efficient instead of generating a class with all the capture variables it generates a struct that it keeps on the",
    "start": "3234119",
    "end": "3240990"
  },
  {
    "text": "stack and then passes that by reference to the method instead of anything else I",
    "start": "3240990",
    "end": "3246470"
  },
  {
    "text": "have used local functions successfully within code to break what would probably",
    "start": "3246470",
    "end": "3253980"
  },
  {
    "text": "be far too long a method to be one method and would be annoying if I'd had",
    "start": "3253980",
    "end": "3259650"
  },
  {
    "text": "to create private methods because they would only be called by another method by this one other method I've moved",
    "start": "3259650",
    "end": "3266460"
  },
  {
    "text": "those private methods into the method as local methods so you end up with something that yeah looks like it is",
    "start": "3266460",
    "end": "3273510"
  },
  {
    "text": "overall quite a long method but it's it's really nicely broken down within that um I'll give two or two examples of",
    "start": "3273510",
    "end": "3282450"
  },
  {
    "text": "the same kind of usage which is another really useful thing which is for anything with an iterator block so",
    "start": "3282450",
    "end": "3289260"
  },
  {
    "text": "anytime you're using yield return or probably more likely these days if you're writing an async method",
    "start": "3289260",
    "end": "3296030"
  },
  {
    "text": "do I have an async example no and both its race blocks and async methods",
    "start": "3296270",
    "end": "3302710"
  },
  {
    "text": "have a problem with validation if you call foo async no and the first line of",
    "start": "3302710",
    "end": "3309580"
  },
  {
    "text": "the way sink is if the parameter is null throw new argument null exception what",
    "start": "3309580",
    "end": "3317230"
  },
  {
    "text": "will happen it will return a failed task it will not throw an exception and that",
    "start": "3317230",
    "end": "3323800"
  },
  {
    "text": "may be okay but I like validation exceptions the you've done something",
    "start": "3323800",
    "end": "3328990"
  },
  {
    "text": "stupid when you were calling me exception to happen as early as possible there's no no reason to wait for that to",
    "start": "3328990",
    "end": "3336190"
  },
  {
    "text": "complete to wait for someone to wait for that to complete before finding the error because by that point you may have",
    "start": "3336190",
    "end": "3343600"
  },
  {
    "text": "lost some of the context of where things went wrong likewise exactly the same kind of",
    "start": "3343600",
    "end": "3349630"
  },
  {
    "text": "validation with yield return if no one evaluates the sequence then we never",
    "start": "3349630",
    "end": "3357280"
  },
  {
    "text": "even execute any of the code this is an example of what it's like when it's broken previously the way to fix this",
    "start": "3357280",
    "end": "3365140"
  },
  {
    "text": "would be to write something that doesn't have any yield return or a non async",
    "start": "3365140",
    "end": "3371620"
  },
  {
    "text": "method that still returns tasks of T do all your validation and then return the",
    "start": "3371620",
    "end": "3377770"
  },
  {
    "text": "result of calling and implementation method and the point of using local",
    "start": "3377770",
    "end": "3383260"
  },
  {
    "text": "functions is you still do that but it's your local function that is the iterator block or the async method so you get to",
    "start": "3383260",
    "end": "3391150"
  },
  {
    "text": "hide it you're not polluting your scope even with private methods that nothing else is ever going to need to call okay",
    "start": "3391150",
    "end": "3398860"
  },
  {
    "text": "given the time Bill anything else on local methods that's about it okay",
    "start": "3398860",
    "end": "3404580"
  },
  {
    "text": "yes question there though sorry do you",
    "start": "3404580",
    "end": "3411010"
  },
  {
    "text": "have to declare local methods no don't write so you can declare local methods",
    "start": "3411010",
    "end": "3416740"
  },
  {
    "text": "you can declare local methods within a for each block you know void print item",
    "start": "3416740",
    "end": "3425490"
  },
  {
    "text": "console dot write line item this is just using a method",
    "start": "3425490",
    "end": "3432369"
  },
  {
    "text": "the expression body method for simplicity so you can do this don't",
    "start": "3432369",
    "end": "3438499"
  },
  {
    "text": "please don't you've got to declare it within here otherwise you don't have access to item",
    "start": "3438499",
    "end": "3444670"
  },
  {
    "text": "but it looks really weird and painful so I would try not to do that one",
    "start": "3444670",
    "end": "3451940"
  },
  {
    "text": "restriction that I hope to persuade the team to fix at some point is local",
    "start": "3451940",
    "end": "3459709"
  },
  {
    "text": "methods have to be unique by name so there is no overloading before now I",
    "start": "3459709",
    "end": "3465319"
  },
  {
    "text": "have wanted to write two different overloads of the same method name as local methods that's not allowed they",
    "start": "3465319",
    "end": "3472819"
  },
  {
    "text": "contribute to the same declaration space as local variables and each other so",
    "start": "3472819",
    "end": "3480859"
  },
  {
    "text": "everything has to be unique and that's kind of annoying occasionally okay so I",
    "start": "3480859",
    "end": "3488569"
  },
  {
    "text": "think we're about halfway through the agenda now actually I will leave ref",
    "start": "3488569",
    "end": "3497509"
  },
  {
    "text": "local and referee tone entirely I will okay because I can cover the last three",
    "start": "3497509",
    "end": "3503119"
  },
  {
    "text": "in about two minutes which is good because I have one minute so custom async return types in c-sharp 7 you can",
    "start": "3503119",
    "end": "3508910"
  },
  {
    "text": "write your own task types that can do all kinds of funky things you will never need to do this should I have a question",
    "start": "3508910",
    "end": "3515630"
  },
  {
    "text": "does anybody think they do good ok so this is a instead of returning tasks of",
    "start": "3515630",
    "end": "3522829"
  },
  {
    "text": "tea from an eating thing you could return bill tasks of tea so long as you have a bill task factory that does all",
    "start": "3522829",
    "end": "3528739"
  },
  {
    "text": "kinds of cunning stuff that's really complicated to get rice and thread-safe or you can use the 99.999% case of value",
    "start": "3528739",
    "end": "3538489"
  },
  {
    "text": "task of tea which is a struct which is stack allocated unless it's actually not",
    "start": "3538489",
    "end": "3545420"
  },
  {
    "text": "completed it was basically built for asp.net core it will be useful outside",
    "start": "3545420",
    "end": "3550459"
  },
  {
    "text": "asp.net core as well the crucial thing is if you're fetching a value from a",
    "start": "3550459",
    "end": "3556009"
  },
  {
    "text": "cache and most of the time you will hit but just occasionally you need to make",
    "start": "3556009",
    "end": "3561289"
  },
  {
    "text": "an async call you've got to return something that is away table because it's fun intially asynchronous but you don't want",
    "start": "3561289",
    "end": "3567910"
  },
  {
    "text": "to take the hit of allocating a task on the heap on every one of those calls if",
    "start": "3567910",
    "end": "3573280"
  },
  {
    "text": "it's just returning hey I've got the value oh you've put me into a state machine okay now I need to do a state machine dance and it all gets very",
    "start": "3573280",
    "end": "3579220"
  },
  {
    "text": "complicated so value task of T is purely an optimization aspect and it is",
    "start": "3579220",
    "end": "3585880"
  },
  {
    "text": "basically the only implementation of Tarr space types that we'll ever need I",
    "start": "3585880",
    "end": "3591610"
  },
  {
    "text": "may try to come up with some weird and dangerous ways of doing things but I don't expect anyone to do it in prod",
    "start": "3591610",
    "end": "3598240"
  },
  {
    "text": "code through our expressions throw is now an expression in some cases but not",
    "start": "3598240",
    "end": "3604270"
  },
  {
    "text": "all there are two reasons you may wish to do this one is this exact code so",
    "start": "3604270",
    "end": "3614010"
  },
  {
    "text": "basically I have preconditions doc check not null all over the place in various",
    "start": "3614010",
    "end": "3620110"
  },
  {
    "text": "libraries you could do if value not equal to null return value and then",
    "start": "3620110",
    "end": "3625690"
  },
  {
    "text": "throw new argument null exception but hey we've got the null condition sorry the null coalescing operator so let's",
    "start": "3625690",
    "end": "3631930"
  },
  {
    "text": "just use it likewise a lot of people",
    "start": "3631930",
    "end": "3637330"
  },
  {
    "text": "don't like this code so if you don't you're in good company but I find this sort of nested conditional operator",
    "start": "3637330",
    "end": "3643860"
  },
  {
    "text": "ternary operator it's a conditional operator and I find this really readable",
    "start": "3643860",
    "end": "3649300"
  },
  {
    "text": "so condition if the condition is met return this value if that conditions met return that value it's sort of a poor",
    "start": "3649300",
    "end": "3656110"
  },
  {
    "text": "man switch case and yes you could use pattern matching but sometimes you",
    "start": "3656110",
    "end": "3663160"
  },
  {
    "text": "really don't need to and being able to throw at the end that relies on throw",
    "start": "3663160",
    "end": "3669460"
  },
  {
    "text": "being an expression what I would really like instead of doing this is to have a",
    "start": "3669460",
    "end": "3675220"
  },
  {
    "text": "simple way of expressing pattern matching as the return type the return",
    "start": "3675220",
    "end": "3680410"
  },
  {
    "text": "value from this method is the result of matching this pattern because then I can pretend I'm writing f-sharp and finally",
    "start": "3680410",
    "end": "3690430"
  },
  {
    "text": "you merit literals you can now write binary you can now use underscores those",
    "start": "3690430",
    "end": "3698260"
  },
  {
    "text": "underscores go anywhere you can even have multiple ones together and when I say anywhere I",
    "start": "3698260",
    "end": "3704380"
  },
  {
    "text": "mean of course anywhere apart from the useful place so wouldn't it be nice to be able to separate the Oh X part which",
    "start": "3704380",
    "end": "3711670"
  },
  {
    "text": "has nothing to do with the value it's just the the base from the number itself like they got a sample for you yeah wait",
    "start": "3711670",
    "end": "3719230"
  },
  {
    "text": "a few minutes okay I won't spoil the surprise then so",
    "start": "3719230",
    "end": "3724770"
  },
  {
    "text": "numeric literals you can write literals that are slightly more readable that was the incredibly rushed version",
    "start": "3724770",
    "end": "3731860"
  },
  {
    "text": "of what's in c-sharp 7.0 hang around for 20 minutes or grab a coffee and then",
    "start": "3731860",
    "end": "3737980"
  },
  {
    "text": "hang around for 20 minutes for what's in 7.1 and 7.2 and rather than taking questions now and ever on feeling guilty",
    "start": "3737980",
    "end": "3743770"
  },
  {
    "text": "for sort of getting up come and see us on the stage thank you [Applause]",
    "start": "3743770",
    "end": "3752909"
  }
]