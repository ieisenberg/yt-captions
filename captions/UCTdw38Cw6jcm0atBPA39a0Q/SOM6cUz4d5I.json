[
  {
    "text": "okay everyone thank you for coming to this talk I think it's 5:40 now so we can",
    "start": "3399",
    "end": "9000"
  },
  {
    "text": "begin my name is Anam foran and for the next 60 minutes we are going to talk a little bit about basic designs and the",
    "start": "9000",
    "end": "15280"
  },
  {
    "text": "things how we broke them in the software engineering in software design in programming languages in platforms be it",
    "start": "15280",
    "end": "22600"
  },
  {
    "text": "net or whatever else we are going to see how things are broken why they are broken and we are going to sometimes",
    "start": "22600",
    "end": "29000"
  },
  {
    "text": "dive deep into like technical details sometimes go through like solid principles etc etc but before we begin",
    "start": "29000",
    "end": "35360"
  },
  {
    "text": "there is one important caveat here after this talk you are not going to change",
    "start": "35360",
    "end": "40399"
  },
  {
    "text": "how you do stuff this is the important part I'm not going to I'm not trying to convince you to do things differently",
    "start": "40399",
    "end": "47239"
  },
  {
    "text": "I'm not trying to explain that things are broken and from tomorrow you implement your code differently nothing",
    "start": "47239",
    "end": "53440"
  },
  {
    "text": "of that sort actually during this talk I will show you and I'll try to convince you that some of the things that you",
    "start": "53440",
    "end": "59640"
  },
  {
    "text": "believe belied are wrong and then I ask you to continue believing in those wrong",
    "start": "59640",
    "end": "64680"
  },
  {
    "text": "things so pay attention to those but anyway we are not going to change how we do stuff we are just going to understand",
    "start": "64680",
    "end": "71439"
  },
  {
    "text": "why those things look out the the way they do and we are going to understand why they are broken that's it couple",
    "start": "71439",
    "end": "78119"
  },
  {
    "text": "words about myself I'm a software D engineer with something like 15 years of experience now ranging from Big tech and",
    "start": "78119",
    "end": "85280"
  },
  {
    "text": "and startups from various domains etc etc blogger public speaker drop me line on email Twitter I also wrote those two",
    "start": "85280",
    "end": "92399"
  },
  {
    "text": "books one about maths the other one about net visit my blog at blog. Adam for man. and let's move on agenda for",
    "start": "92399",
    "end": "100200"
  },
  {
    "text": "today so we are going to bash various principles in the programming World we'll start with solid especially with",
    "start": "100200",
    "end": "106840"
  },
  {
    "text": "Lisk of substitution principle hands up if you ever heard about this principle lovely hands up if you know how you",
    "start": "106840",
    "end": "113320"
  },
  {
    "text": "broke it last week oh there is one there is one oh okay another one lovely so we",
    "start": "113320",
    "end": "119399"
  },
  {
    "text": "are going to see why Lisk of substitution principle actually applies to the Enterprise world even though we",
    "start": "119399",
    "end": "125039"
  },
  {
    "text": "typically explain it with fruits or rectangles or other stuff that looks nice when we talk about inheritance but",
    "start": "125039",
    "end": "131840"
  },
  {
    "text": "actually is completely weird when we talk about the Enterprise ready code then we'll go through other principles",
    "start": "131840",
    "end": "137720"
  },
  {
    "text": "like dependency inversion inheritance exceptions etc etc we probably won't do all of that because this talk is planned",
    "start": "137720",
    "end": "144280"
  },
  {
    "text": "for something like 90 minutes so we'll do as much as possible and the rest will remain on slide so the very first thing",
    "start": "144280",
    "end": "150400"
  },
  {
    "text": "Lisk of substitution principle think to yourself for a couple of seconds how you would explain this principle to a 5",
    "start": "150400",
    "end": "157560"
  },
  {
    "text": "years old and then how you would explain where we can break Lisk of substitution principle in the Enterprise code that we",
    "start": "157560",
    "end": "164440"
  },
  {
    "text": "break every day and in order to understand how to do that we need to go back to basics and Lisk of substitution",
    "start": "164440",
    "end": "171400"
  },
  {
    "text": "principle is actually pretty old and pretty new at the same time it's part of solid principles as we call them",
    "start": "171400",
    "end": "177640"
  },
  {
    "text": "nowadays but it comes from 199 94 from the paper that you can find on the",
    "start": "177640",
    "end": "182879"
  },
  {
    "text": "internet actually computer science is great because we can easily read all the papers that build the foundation of our",
    "start": "182879",
    "end": "190040"
  },
  {
    "text": "industry it's not the same as with mathematicians it's hard to talk you know to Newton Libs etc etc but with",
    "start": "190040",
    "end": "197599"
  },
  {
    "text": "computer science you can still meet these people people that put those you know grounds in the computer science and",
    "start": "197599",
    "end": "203879"
  },
  {
    "text": "if you look for the paper up in 1994 you'll find it that the same thingy that you have on the right side of the screen",
    "start": "203879",
    "end": "209920"
  },
  {
    "text": "right so it is available we can take it and it's important to understand why we",
    "start": "209920",
    "end": "215000"
  },
  {
    "text": "even have Lisk of substitution principle right it's not like law of aerodynamics",
    "start": "215000",
    "end": "220080"
  },
  {
    "text": "or whatever it's not something that we found out it just is in the world no the",
    "start": "220080",
    "end": "226040"
  },
  {
    "text": "paper says that it they want to take position and explain how they believe",
    "start": "226040",
    "end": "231439"
  },
  {
    "text": "it's good to implement the software they simply say something hey we believe this",
    "start": "231439",
    "end": "237239"
  },
  {
    "text": "is what we should be doing so you may agree with them and disagree at the same time it's just that we decided to agree",
    "start": "237239",
    "end": "245040"
  },
  {
    "text": "because we Fel we feel like okay that makes sense what they say and what they say is that they want to ensure that",
    "start": "245040",
    "end": "251959"
  },
  {
    "text": "whenever we have a super type and we can tell something about the super type then objects of the subtype should meet",
    "start": "251959",
    "end": "259160"
  },
  {
    "text": "exactly the same that's the idea so what they are trying to say is if we have inheritance there is a base class and",
    "start": "259160",
    "end": "266199"
  },
  {
    "text": "Base Class does this or that then it's cool if the like inheritance like the",
    "start": "266199",
    "end": "271759"
  },
  {
    "text": "the child class does exactly the same this is cool right so let's go through",
    "start": "271759",
    "end": "276800"
  },
  {
    "text": "this through this example and let's understand why we are taught this principle wrong or actually in a very",
    "start": "276800",
    "end": "282960"
  },
  {
    "text": "misleading way if you ever go to Wikipedia and look for Lisk of substitution principle or if you took",
    "start": "282960",
    "end": "289479"
  },
  {
    "text": "like a course at Uni typical example explaining Lisk of substitution principle is with squares and rectangles",
    "start": "289479",
    "end": "296639"
  },
  {
    "text": "so the idea here is that we basically have a a square class that derives from",
    "start": "296639",
    "end": "303680"
  },
  {
    "text": "rectangle now the thing is if we try to try to use the square in place where we",
    "start": "303680",
    "end": "311080"
  },
  {
    "text": "expect rectangle it might be a little bit misleading because Square expects",
    "start": "311080",
    "end": "316520"
  },
  {
    "text": "that both sides are always equal right that's good definition of square but rectangle doesn't have this requirement",
    "start": "316520",
    "end": "323120"
  },
  {
    "text": "right so now when we try to write a method that accepts a parameter of type",
    "start": "323120",
    "end": "328160"
  },
  {
    "text": "rectangle and then then we call some Setter on this rectangle like set first",
    "start": "328160",
    "end": "334280"
  },
  {
    "text": "side then the other side will change at the same time because we want to have both of the sides equal right and now we",
    "start": "334280",
    "end": "341720"
  },
  {
    "text": "claim or we suggest that this breaks LSP why because rectangle allowed us to set",
    "start": "341720",
    "end": "348520"
  },
  {
    "text": "those sides to different values but Square doesn't let us to do so right we take it for granted this is how it's",
    "start": "348520",
    "end": "355199"
  },
  {
    "text": "explained in Wikipedia it does make sense right so let's take a different example what about ratio maintaining",
    "start": "355199",
    "end": "362360"
  },
  {
    "text": "component imagine that we are writing a widely popular framework for UI applications we call it short WPF and in",
    "start": "362360",
    "end": "370160"
  },
  {
    "text": "this WPF we would like to implement a component that keeps like the ratio of the image meaning that if we make it",
    "start": "370160",
    "end": "376960"
  },
  {
    "text": "taller it also needs to become wider okay because we maintain the ratio",
    "start": "376960",
    "end": "382120"
  },
  {
    "text": "obviously as with all the framework uh all the desktop Frameworks we typically have something like Bas class base",
    "start": "382120",
    "end": "389039"
  },
  {
    "text": "interface component pane whatever that we can put on the canva and then we inherit from it or we implement this",
    "start": "389039",
    "end": "395919"
  },
  {
    "text": "interface now okay so now I ask the question if we Implement a component that I called here what did I call it",
    "start": "395919",
    "end": "402520"
  },
  {
    "text": "fixed image that tries to maintain the ratio if I Implement such a component",
    "start": "402520",
    "end": "407560"
  },
  {
    "text": "and if I change one side of this image and I need to maintain the ratio so I need to change the other side at the",
    "start": "407560",
    "end": "414160"
  },
  {
    "text": "same time does it break LSP quick roll of hands do you think it does break LSP",
    "start": "414160",
    "end": "419800"
  },
  {
    "text": "hands up okay a couple of those who thinks it doesn't break",
    "start": "419800",
    "end": "425319"
  },
  {
    "text": "LSP and who has no idea what is this about okay gotcha so the thing is I am",
    "start": "425319",
    "end": "432879"
  },
  {
    "text": "referring to this example of square and rectangle because it's common example and you may have heard about that the",
    "start": "432879",
    "end": "438039"
  },
  {
    "text": "idea here is we have Setters for two sides of rectangle set with set cave",
    "start": "438039",
    "end": "444479"
  },
  {
    "text": "right and now those Setters are independent but then we inherit with",
    "start": "444479",
    "end": "449520"
  },
  {
    "text": "Square class and square class when you call set with it needs to adjust the",
    "start": "449520",
    "end": "454639"
  },
  {
    "text": "other side at the same time and the opposite right so we claim this breaks the LSP and this is what Wikipedia",
    "start": "454639",
    "end": "461080"
  },
  {
    "text": "claims and this is actually what others claim as well like anle Bob Martin however if we now think okay how would I",
    "start": "461080",
    "end": "468319"
  },
  {
    "text": "Implement a ratio preserving component I need to have this Behavior I change one side the other site changes as well so",
    "start": "468319",
    "end": "475800"
  },
  {
    "text": "if it breaks LSP and we know LSP is cool because it's part of solid principles so it's mantra for our programming",
    "start": "475800",
    "end": "481599"
  },
  {
    "text": "day-to-day activities right so we can't break it so how do I implement this stuff and if it doesn't break LSP then",
    "start": "481599",
    "end": "489520"
  },
  {
    "text": "why does this and the answer to that is this doesn't break LSP and the example",
    "start": "489520",
    "end": "495560"
  },
  {
    "text": "on Wikipedia is completely wrong but we need to understand the paper carefully so if we take a look at the paper and we",
    "start": "495560",
    "end": "502520"
  },
  {
    "text": "take a look at how LSP is defined we see that they are using mathematical notion",
    "start": "502520",
    "end": "507800"
  },
  {
    "text": "to say that there is a sub type requirement they propose they think it's",
    "start": "507800",
    "end": "512919"
  },
  {
    "text": "cool to have subtype requirement preserved in our software engineering so",
    "start": "512919",
    "end": "518200"
  },
  {
    "text": "if f of x is some property probable about the objects X of type T then it's",
    "start": "518200",
    "end": "525560"
  },
  {
    "text": "cool if F of Y for objects of the Cy type is preserved as well in other words",
    "start": "525560",
    "end": "531519"
  },
  {
    "text": "we have a property that we can prove for the base type okay and then we would",
    "start": "531519",
    "end": "536600"
  },
  {
    "text": "like the same property we would like to be able to prove it for the subtype for",
    "start": "536600",
    "end": "541760"
  },
  {
    "text": "the type that we inherit from with right so this is the idea now the question is",
    "start": "541760",
    "end": "548120"
  },
  {
    "text": "what is fi in this definition because if we allow fi to be more or less anything",
    "start": "548120",
    "end": "556160"
  },
  {
    "text": "then I can go to something like that how about I have a base type with virtual method f with console right line literal",
    "start": "556160",
    "end": "563399"
  },
  {
    "text": "and I claim my fi is that Intermediate Language implementation for this method",
    "start": "563399",
    "end": "569440"
  },
  {
    "text": "is this and I expect this fi to be preserved for every single subass",
    "start": "569440",
    "end": "575480"
  },
  {
    "text": "inheriting from this base type if I am allowed to do so then what effectively",
    "start": "575480",
    "end": "581279"
  },
  {
    "text": "happens is we don't have any polymorphism any anymore right because I",
    "start": "581279",
    "end": "586959"
  },
  {
    "text": "claim that I am able to prove that the Intermediate Language of the base type",
    "start": "586959",
    "end": "592640"
  },
  {
    "text": "method fu is this therefore I should be able to prove the same for the subtype",
    "start": "592640",
    "end": "598040"
  },
  {
    "text": "right but it doesn't make any sense right so if we read the paper in this way then LSP is useless just to say",
    "start": "598040",
    "end": "605839"
  },
  {
    "text": "right whatever we are talking about in LSP is about the contract so the",
    "start": "605839",
    "end": "611320"
  },
  {
    "text": "contract here is what dictates what properties we can consider for LSP the",
    "start": "611320",
    "end": "619440"
  },
  {
    "text": "contract is something that we need to pay attention to and what's more important and it's in red on this in",
    "start": "619440",
    "end": "626040"
  },
  {
    "text": "this slide is that it's explicit it must be an explicit contract so it must be",
    "start": "626040",
    "end": "632680"
  },
  {
    "text": "stated carefully and explicitly somewhere so according to Wikipedia and",
    "start": "632680",
    "end": "637760"
  },
  {
    "text": "notice that actually this is from 1986 so 8 years before LSP so when they were",
    "start": "637760",
    "end": "644720"
  },
  {
    "text": "writing the LSP paper they already knew about the contract so the contract is something that is here that is Prov",
    "start": "644720",
    "end": "652320"
  },
  {
    "text": "provided that is formal precise and verifiable meaning that we can't just wave our hands it must be something that",
    "start": "652320",
    "end": "660120"
  },
  {
    "text": "is very concrete so now going back to square and rectangle Revisited and I encourage you to take a look at like the",
    "start": "660120",
    "end": "666920"
  },
  {
    "text": "LSP article on Wikipedia just to make sure what's going on over there so according to Wikipedia we have the Base",
    "start": "666920",
    "end": "674399"
  },
  {
    "text": "Class rectangle we have square that inherits from rectangle and when we call",
    "start": "674399",
    "end": "679680"
  },
  {
    "text": "a Setter on Square it modifies two sides this breaks LSP and this is wrong",
    "start": "679680",
    "end": "684720"
  },
  {
    "text": "because we never said that we are not allowed to modify both sides with one",
    "start": "684720",
    "end": "690880"
  },
  {
    "text": "Setter call that is the important distinction we never said this is our property that we want to preserve and",
    "start": "690880",
    "end": "697839"
  },
  {
    "text": "properties as contracts they must be explicit and they cannot be just you",
    "start": "697839",
    "end": "702880"
  },
  {
    "text": "know hand waving just like that so now having that in mind think about when did",
    "start": "702880",
    "end": "709720"
  },
  {
    "text": "you break LSP in your Enterprise code recently and the thing for that is we",
    "start": "709720",
    "end": "716000"
  },
  {
    "text": "need to look for contracts that are explicit prec prise formal and verifiable and the problem is those",
    "start": "716000",
    "end": "722720"
  },
  {
    "text": "constructs are not only in the source code that is actually the worst part of LSP and everything else and you know",
    "start": "722720",
    "end": "729079"
  },
  {
    "text": "that stuff right when we have contract in the source code it's super cool because most of the times the compiler",
    "start": "729079",
    "end": "735040"
  },
  {
    "text": "takes care of proving that we didn't break it right we have the typing system we have things like number of parameters",
    "start": "735040",
    "end": "742160"
  },
  {
    "text": "assuming we write in some decent language right because if you go to python JavaScript whatever you don't even have the type system right net is",
    "start": "742160",
    "end": "749440"
  },
  {
    "text": "actually a little bit more civilized in here so we can rely on those things but at the same time net is still very weak",
    "start": "749440",
    "end": "756480"
  },
  {
    "text": "for instance think about how would you implement a method that proves that has",
    "start": "756480",
    "end": "761639"
  },
  {
    "text": "this contract that it accepts a list of integers and that list must not be empty",
    "start": "761639",
    "end": "767959"
  },
  {
    "text": "or we can make it even crazier like the list must must have at least five elements how do you implement something",
    "start": "767959",
    "end": "774240"
  },
  {
    "text": "like that in C well you probably would need to go to runtime checks and throw exception right so there's no security",
    "start": "774240",
    "end": "780839"
  },
  {
    "text": "and no safety at all however there are languages that let you define that for instance ID in one of them so if you",
    "start": "780839",
    "end": "787279"
  },
  {
    "text": "really want to have like language that really takes care of proving all the contracts you can think of there are",
    "start": "787279",
    "end": "792480"
  },
  {
    "text": "more powerful languages than C so take a look at idies or anything that is kind of ml based and husco based but anyway",
    "start": "792480",
    "end": "799560"
  },
  {
    "text": "we need to have contracts that then can they can be anywhere they can be in wikis in documentation they can be",
    "start": "799560",
    "end": "805800"
  },
  {
    "text": "decided over a phone with our clients or whatever and we need to make sure that we don't break them and this is the hard",
    "start": "805800",
    "end": "811959"
  },
  {
    "text": "part of LSP we don't necessarily know where those contracts are and it's easy",
    "start": "811959",
    "end": "817199"
  },
  {
    "text": "to break them if we don't pay attention to them because compiler can't protect us from that so the idea how we break",
    "start": "817199",
    "end": "823639"
  },
  {
    "text": "the LSP in the Enterprise world is on the slide now so let's go through a",
    "start": "823639",
    "end": "828880"
  },
  {
    "text": "really quick example showing how we break the LSP in the real life and this is actually a problem that I found over",
    "start": "828880",
    "end": "835759"
  },
  {
    "text": "two weeks in like five different projects in my company so I kind of guess it might have happened in your",
    "start": "835759",
    "end": "841680"
  },
  {
    "text": "case as well so what do we have here when do I have my Mor poter there it is so we have m method the business context",
    "start": "841680",
    "end": "848519"
  },
  {
    "text": "is imagine that we would like to download files from the internet from let's call it sree bucket and we have",
    "start": "848519",
    "end": "855880"
  },
  {
    "text": "like a Geor redundant storage okay so we try to download files from Copenhagen",
    "start": "855880",
    "end": "861639"
  },
  {
    "text": "data center if this Copenhagen data center is down for whatever reason we go to Berlin data center right so we have",
    "start": "861639",
    "end": "868560"
  },
  {
    "text": "Main connection and we have backup optional connection that we use if and only if the the main one breaks right or",
    "start": "868560",
    "end": "875759"
  },
  {
    "text": "we can even do load balancing ground drop in between those two connections or whatever so we have a method that is",
    "start": "875759",
    "end": "881800"
  },
  {
    "text": "basically provided by the like third Library third party Library so like helper method or whatever that takes",
    "start": "881800",
    "end": "889040"
  },
  {
    "text": "those two clients and then it takes the Lambda what we want to do with these",
    "start": "889040",
    "end": "894839"
  },
  {
    "text": "clients right so the Lambda would be basically client download file a ing or whatever else right so we have this",
    "start": "894839",
    "end": "901440"
  },
  {
    "text": "method it has some implementation that we actually don't care about here the only thing that we do care about here is",
    "start": "901440",
    "end": "907360"
  },
  {
    "text": "there is this method do internal that first tries to call this Lambda using the first client main connection to",
    "start": "907360",
    "end": "914399"
  },
  {
    "text": "Copenhagen and if it fails and frows the exception then we try to call the other",
    "start": "914399",
    "end": "919600"
  },
  {
    "text": "client so we go to Berlin or whatever else right now how do we use this well we use this in this way that we have our",
    "start": "919600",
    "end": "926759"
  },
  {
    "text": "code this is actually our business logic here so we try to download the first file the second file the third file and",
    "start": "926759",
    "end": "934160"
  },
  {
    "text": "then we concatenate them or whatever right how would we unit test something",
    "start": "934160",
    "end": "939360"
  },
  {
    "text": "like this so think about that for a second what the unit test would look like and you may come to something like",
    "start": "939360",
    "end": "946399"
  },
  {
    "text": "this how about we just call this method we pass a throwing client so client that always throws the exception always fails",
    "start": "946399",
    "end": "953639"
  },
  {
    "text": "and then we have working client that always succeeds right and then we just check whether we have some EXP Ed",
    "start": "953639",
    "end": "959240"
  },
  {
    "text": "literal or whatever else right we run this code we test it with unit test it's all green we deploy to production it's",
    "start": "959240",
    "end": "966360"
  },
  {
    "text": "perfect and then people start complaining why do they complain gosh because we download files one by one",
    "start": "966360",
    "end": "972920"
  },
  {
    "text": "okay we download them serially and here comes the part where we start breaking LSP because what do we do to make this",
    "start": "972920",
    "end": "981120"
  },
  {
    "text": "faster ideas parallelize that exactly and we",
    "start": "981120",
    "end": "986880"
  },
  {
    "text": "have C we have async how about we turned that to async notice that someone was actually pretty smart here they just",
    "start": "986880",
    "end": "993519"
  },
  {
    "text": "implemented the interface so we just need to change this interface to start returning something like task of string",
    "start": "993519",
    "end": "1000279"
  },
  {
    "text": "completable future of string promise of string or whatever we Implement a different client that is now returning",
    "start": "1000279",
    "end": "1006160"
  },
  {
    "text": "this promise of T and then we do something like first wait for res in C that would be await first plus a wait",
    "start": "1006160",
    "end": "1012240"
  },
  {
    "text": "second plus a weight F right we run the unit tests they are all green we deploy",
    "start": "1012240",
    "end": "1017600"
  },
  {
    "text": "to production and then everything fails it doesn't work anymore where did I",
    "start": "1017600",
    "end": "1022959"
  },
  {
    "text": "break LSP this is actually as I said this happened five times over two weeks in",
    "start": "1022959",
    "end": "1030079"
  },
  {
    "text": "five different projects and imagine that if you were given such a task like that you would probably give it to a junior",
    "start": "1030079",
    "end": "1035798"
  },
  {
    "text": "developer on your team because it's just put task over there aingle aw and that's it right where do we break the LSP we",
    "start": "1035799",
    "end": "1042959"
  },
  {
    "text": "break the LSP in this part actually in this line of code why because I said and",
    "start": "1042959",
    "end": "1050160"
  },
  {
    "text": "you may have missed that because I am speaking pretty fast I said that the contract of this is if this fails and",
    "start": "1050160",
    "end": "1057120"
  },
  {
    "text": "throws the exception then the other client is used okay when where does it",
    "start": "1057120",
    "end": "1062400"
  },
  {
    "text": "throw the exception it doesn't throw exception anymore in the downloading part it will capture the exception put",
    "start": "1062400",
    "end": "1069880"
  },
  {
    "text": "it on the task object and propagate when you do task result or await task or",
    "start": "1069880",
    "end": "1076000"
  },
  {
    "text": "whatever else right so this exception is not propagated in this line anymore so",
    "start": "1076000",
    "end": "1081280"
  },
  {
    "text": "we are not catching it here we are never calling this line of code so this is how we break LSP and the contract here is",
    "start": "1081280",
    "end": "1088200"
  },
  {
    "text": "not something that you can easily put in your code is not something that you can verify in the compiler and what's worse",
    "start": "1088200",
    "end": "1095320"
  },
  {
    "text": "if you were to verify this contract with unit tests you would need to implement a",
    "start": "1095320",
    "end": "1100840"
  },
  {
    "text": "unit test like this that you prepare the failing conditions for the client which",
    "start": "1100840",
    "end": "1106360"
  },
  {
    "text": "means it could be hey client go to the inter and use non-existing DNS or whatever and then you verify that it",
    "start": "1106360",
    "end": "1113480"
  },
  {
    "text": "does throw the exception this is how you need to verify the the LSP so the hard part about LSP is that that contracts",
    "start": "1113480",
    "end": "1121600"
  },
  {
    "text": "must be explicit and sometimes it's super hard to verify them and I also",
    "start": "1121600",
    "end": "1126880"
  },
  {
    "text": "mentioned that LSP or the contracts for LSP can be put in many places source",
    "start": "1126880",
    "end": "1132840"
  },
  {
    "text": "code wikis documentation yada yada if you go to Java let's bash Java for a bit",
    "start": "1132840",
    "end": "1138200"
  },
  {
    "text": "right if if you go to Java and you check collection ad in Java you will quickly",
    "start": "1138200",
    "end": "1144039"
  },
  {
    "text": "realize that this thingy can throw unsupported operation exception you would not expect that on your list right",
    "start": "1144039",
    "end": "1151520"
  },
  {
    "text": "you have list of strings you call add on this list and Bank unsupported operation",
    "start": "1151520",
    "end": "1156960"
  },
  {
    "text": "exception like you had just one job to do right and you don't support it what's the point of that the idea here is that",
    "start": "1156960",
    "end": "1163880"
  },
  {
    "text": "we would like to be able to implement immutable collections so collections that we can't modify so we can't add or",
    "start": "1163880",
    "end": "1172360"
  },
  {
    "text": "remove elements what happens if we have ADD method on the interface and we",
    "start": "1172360",
    "end": "1177400"
  },
  {
    "text": "really don't want that method to work we just throw the exception or we could pretend like it worked that would be",
    "start": "1177400",
    "end": "1183440"
  },
  {
    "text": "actually even worse so it's actually good that they throw the exception right but now let's ask them okay why did you",
    "start": "1183440",
    "end": "1189000"
  },
  {
    "text": "design this interface in this way because now we need to actually answer a",
    "start": "1189000",
    "end": "1195240"
  },
  {
    "text": "very tricky question we said that we would like to implement adding on a collection but we would like to support",
    "start": "1195240",
    "end": "1201880"
  },
  {
    "text": "immutable collections what does it mean immutable so actually there are two different definitions we could use for",
    "start": "1201880",
    "end": "1208280"
  },
  {
    "text": "immutability the first definition is we want modify the collection right so you",
    "start": "1208280",
    "end": "1214440"
  },
  {
    "text": "give us the collection we consider it immutable we won't modify it ever it's",
    "start": "1214440",
    "end": "1219679"
  },
  {
    "text": "much more like from our perspective this is read only collection right but immutability could also be something",
    "start": "1219679",
    "end": "1225559"
  },
  {
    "text": "different like nobody ever modifies this collection right it's remain in this",
    "start": "1225559",
    "end": "1231320"
  },
  {
    "text": "state forever and forever and ever and it's never modified right so generally",
    "start": "1231320",
    "end": "1236360"
  },
  {
    "text": "in the first case in which we consider the collection immutable it's easy to prove that we didn't break it right we",
    "start": "1236360",
    "end": "1243600"
  },
  {
    "text": "just show that hey we didn't modify it right we can verify that with unit test",
    "start": "1243600",
    "end": "1248760"
  },
  {
    "text": "we can like use a a sub interface that doesn't have the ad method etc etc but",
    "start": "1248760",
    "end": "1254200"
  },
  {
    "text": "how do we prove that no one ever can modify this collection this is something that we can't can't prove in the",
    "start": "1254200",
    "end": "1259320"
  },
  {
    "text": "computer science so now when we talk about immutability for our Collections and this is again LSP because contract",
    "start": "1259320",
    "end": "1265679"
  },
  {
    "text": "is the collection is immutable right we need to understand what we are talking about and now let's start digging into",
    "start": "1265679",
    "end": "1271840"
  },
  {
    "text": "okay what do people mean by immutable collections so if you ask Java this is",
    "start": "1271840",
    "end": "1277279"
  },
  {
    "text": "the wall of text you get and they explain why they put the ad method on the interface and why they throw",
    "start": "1277279",
    "end": "1282960"
  },
  {
    "text": "exceptions so if you ever wanted to understand why the except the exception is thrown this is the documentation have",
    "start": "1282960",
    "end": "1289520"
  },
  {
    "text": "you ever read your documentation of add method on your list of T Now list of T",
    "start": "1289520",
    "end": "1295880"
  },
  {
    "text": "in C copied from java they have exactly the same list of te c can throw the",
    "start": "1295880",
    "end": "1301320"
  },
  {
    "text": "exception on you for the same reasons as it explained here I encourage you to take a look at that but hey there are",
    "start": "1301320",
    "end": "1307320"
  },
  {
    "text": "other languages running on jvm for instance cotlin for instance Scala and they decided to implement things",
    "start": "1307320",
    "end": "1313640"
  },
  {
    "text": "differently for instance this is how cotlin implements immutability so you",
    "start": "1313640",
    "end": "1318919"
  },
  {
    "text": "can see that we have iterable at the top which is something like I enumerable in our case then we have collection then we",
    "start": "1318919",
    "end": "1326159"
  },
  {
    "text": "have least but at the same time we have mutable iterable and finally we have mutable list that inherits or kind of",
    "start": "1326159",
    "end": "1333200"
  },
  {
    "text": "implements two interfaces so mutable list is both list and mutable collection",
    "start": "1333200",
    "end": "1339240"
  },
  {
    "text": "so now if you receive an immutable collection in cotlin it's like it's read",
    "start": "1339240",
    "end": "1344840"
  },
  {
    "text": "only collection you don't modify it because you never know know whether you get a different implementation or",
    "start": "1344840",
    "end": "1350919"
  },
  {
    "text": "actually you get implementation that lets others modify this collection right however Scala took a completely",
    "start": "1350919",
    "end": "1357600"
  },
  {
    "text": "different stance on that and they designed two completely different inheritance classes so in Scala when you",
    "start": "1357600",
    "end": "1364520"
  },
  {
    "text": "receive immutable collection it comes from this thingy so it never has any",
    "start": "1364520",
    "end": "1371279"
  },
  {
    "text": "methods for adding or removing elements but if you receive mutable collection then it's qu kind of different class",
    "start": "1371279",
    "end": "1378520"
  },
  {
    "text": "hierarchy so you get completely different implementations and then whenever you want to juggle between these two you need to call to mutable",
    "start": "1378520",
    "end": "1385400"
  },
  {
    "text": "and to immutable etc etc right so when we talk about immutability it's worth",
    "start": "1385400",
    "end": "1390559"
  },
  {
    "text": "asking okay what does it mean because depending on the language we get completely different",
    "start": "1390559",
    "end": "1395640"
  },
  {
    "text": "thingies that would be it about Lisk of substitution principle let's bash another principle now okay so dependency",
    "start": "1395640",
    "end": "1402600"
  },
  {
    "text": "inversion another part of solid we know that solid is single responsibility H open close L of uh substitution",
    "start": "1402600",
    "end": "1409520"
  },
  {
    "text": "interface segregation and dependency inversion it's dependency inversion not",
    "start": "1409520",
    "end": "1415080"
  },
  {
    "text": "dependency injection sometimes people think that dependency injection is the principle no it's more of like",
    "start": "1415080",
    "end": "1420840"
  },
  {
    "text": "implementation of the principle so let's start with another um like thought experiment how would you replace a",
    "start": "1420840",
    "end": "1428760"
  },
  {
    "text": "string in C let's say that we have system. string we don't like it it's too",
    "start": "1428760",
    "end": "1434760"
  },
  {
    "text": "slow it doesn't work it doesn't support the things we would like to support how do we replace string with something else",
    "start": "1434760",
    "end": "1442520"
  },
  {
    "text": "and actually before answering this question we might consider like really is it like seriously someone would ever",
    "start": "1442520",
    "end": "1449279"
  },
  {
    "text": "consider replacing a string in C right so let's see what happened Java improved",
    "start": "1449279",
    "end": "1455039"
  },
  {
    "text": "their string implementation a couple of times they have the same implementation of string as we do in net or kind of",
    "start": "1455039",
    "end": "1462320"
  },
  {
    "text": "very similar however around Java 9 they decided that it's a waste of memory to",
    "start": "1462320",
    "end": "1468720"
  },
  {
    "text": "store strings as arrays of characters if you know character was supposed to",
    "start": "1468720",
    "end": "1474520"
  },
  {
    "text": "implement utf16 but it doesn't because utf16 is not 16 bits anymore it's something like",
    "start": "1474520",
    "end": "1481520"
  },
  {
    "text": "21 bits and character is 16 bits only so we can't Implement utf16 with character",
    "start": "1481520",
    "end": "1487640"
  },
  {
    "text": "anymore but that's minor thingy however we wanted to implement utf16 to hold all",
    "start": "1487640",
    "end": "1492760"
  },
  {
    "text": "the strings we could think of and that's why for most of the strings that we Implement in our application which are",
    "start": "1492760",
    "end": "1499000"
  },
  {
    "text": "like English based we waste a one bite for every character right Java decided",
    "start": "1499000",
    "end": "1504120"
  },
  {
    "text": "let's fix that so they changed the implementation to use bite arrays instead of character arrays to save the",
    "start": "1504120",
    "end": "1511039"
  },
  {
    "text": "memory another thingy is whenever you add two strings with the plus operator",
    "start": "1511039",
    "end": "1516880"
  },
  {
    "text": "they tell you don't do that use something like string buffer and call the methods to append yada yada right",
    "start": "1516880",
    "end": "1523720"
  },
  {
    "text": "however the plus operator work works just like that it is typically compiled to these things right but they wanted to",
    "start": "1523720",
    "end": "1530600"
  },
  {
    "text": "do it different because the like translation to string Builder append or",
    "start": "1530600",
    "end": "1535880"
  },
  {
    "text": "string buffer append Etc it's cool when we really add many strings but when when",
    "start": "1535880",
    "end": "1541279"
  },
  {
    "text": "we just want to add you know two short strings together it's completely waste of memory and of time because we need to",
    "start": "1541279",
    "end": "1547520"
  },
  {
    "text": "allocate the string buffer every single time so they implemented it dynamically so now depending on whatever you do in",
    "start": "1547520",
    "end": "1554720"
  },
  {
    "text": "Java you actually call an instruction that is called invoke Dynamic it's",
    "start": "1554720",
    "end": "1559799"
  },
  {
    "text": "something like Dynamic typing etc etc which gets compiled to a different",
    "start": "1559799",
    "end": "1565320"
  },
  {
    "text": "implementation depending on which jvm you use so this now can be changed in",
    "start": "1565320",
    "end": "1570799"
  },
  {
    "text": "runtime if you upgrade jvm to another version that's Java what else Facebook",
    "start": "1570799",
    "end": "1576799"
  },
  {
    "text": "they decided to implement their own string in C++ and they get something",
    "start": "1576799",
    "end": "1582000"
  },
  {
    "text": "like one performance Improvement both in like terms of speed and memory so you",
    "start": "1582000",
    "end": "1587640"
  },
  {
    "text": "may think to your yourself 1% what's that right we probably spend months on replacing the string with something else",
    "start": "1587640",
    "end": "1594440"
  },
  {
    "text": "and we get 1% in return but think about the scale Facebook runs on literally",
    "start": "1594440",
    "end": "1599720"
  },
  {
    "text": "millions of machines if you now can cut 1% of those machines imagine how much",
    "start": "1599720",
    "end": "1605559"
  },
  {
    "text": "money and resources that is and they did it by replacing the normal string with some other small string you can actually",
    "start": "1605559",
    "end": "1612559"
  },
  {
    "text": "find the talk on the internet explaining how they did it so Java did it C++ did",
    "start": "1612559",
    "end": "1617840"
  },
  {
    "text": "it moving to something else JavaScript right when we think about the typical",
    "start": "1617840",
    "end": "1622919"
  },
  {
    "text": "case in JavaScript everything is an object we typically think object means a dictionary in the javascripts world",
    "start": "1622919",
    "end": "1629279"
  },
  {
    "text": "right so basically key value pairs but they have something like five different implementations of objects depending on",
    "start": "1629279",
    "end": "1636600"
  },
  {
    "text": "what you do with objects because array strings everything else in JavaScript is an object so now depending on the case",
    "start": "1636600",
    "end": "1642880"
  },
  {
    "text": "you are dealing with you have different implementation and that happens dynamically and transparently behind the",
    "start": "1642880",
    "end": "1648799"
  },
  {
    "text": "so now coming back to C how do we replace a string to gain similar benefits and the answer is we cannot",
    "start": "1648799",
    "end": "1656360"
  },
  {
    "text": "that is because when we actually take a look at net a class string is a class",
    "start": "1656360",
    "end": "1661480"
  },
  {
    "text": "it's not an interface we can't inherit from it we can't provide different uh implementation of that what's worse in",
    "start": "1661480",
    "end": "1668399"
  },
  {
    "text": "Exposed on the Intermediate Language level meaning that whenever we actually use strings in the Intermediate Language",
    "start": "1668399",
    "end": "1675279"
  },
  {
    "text": "code they are kind of first type c meaning that they are so hardly encoded",
    "start": "1675279",
    "end": "1681760"
  },
  {
    "text": "so hard into in so in in the in the platform in everything in the instructions literals y yada that we",
    "start": "1681760",
    "end": "1688720"
  },
  {
    "text": "can't get rid of them not to mention that net is implemented in the native code and they rely on the strings being",
    "start": "1688720",
    "end": "1695799"
  },
  {
    "text": "just an AR aray so they take pointers and do black magic behind the scenes so",
    "start": "1695799",
    "end": "1701080"
  },
  {
    "text": "we can't replace the string and we can't get any performance improvements so this is how Microsoft decided to break",
    "start": "1701080",
    "end": "1707240"
  },
  {
    "text": "dependency Inver but we can take that further to many other examples date time now how many",
    "start": "1707240",
    "end": "1713720"
  },
  {
    "text": "times did you introduce an interface for date time now right why isn't there an",
    "start": "1713720",
    "end": "1719120"
  },
  {
    "text": "interface I mean there is now right but it wasn't there for so many years environment exit if you ever call",
    "start": "1719120",
    "end": "1726200"
  },
  {
    "text": "environment exit actually stop doing that introduce interface the same way because it will kill your application",
    "start": "1726200",
    "end": "1731600"
  },
  {
    "text": "and you have no idea why there are even libraries provided by Microsoft hey we broke the pendency inversion but no",
    "start": "1731600",
    "end": "1737360"
  },
  {
    "text": "worries there is a library for fixing that m is just one example power mock in Java another example anything that is",
    "start": "1737360",
    "end": "1743720"
  },
  {
    "text": "broken we can fix by yet using yet another Library okay but let's take a different example what would you say if",
    "start": "1743720",
    "end": "1750559"
  },
  {
    "text": "you learned that Adam fman created a new programming language and in this programming language we actually have",
    "start": "1750559",
    "end": "1756760"
  },
  {
    "text": "colors in functions so apart from function being static and instance public private y yada it's either green",
    "start": "1756760",
    "end": "1763440"
  },
  {
    "text": "or red and I need to define whether the function is green or red when I implement the function and the tricky",
    "start": "1763440",
    "end": "1770039"
  },
  {
    "text": "part here is if you call Green function from Green function all good if you call Red function from Red function all good",
    "start": "1770039",
    "end": "1777240"
  },
  {
    "text": "if you call Green function from Red One H we don't like it but okay let it be if you call Red function from green one",
    "start": "1777240",
    "end": "1785159"
  },
  {
    "text": "that's a big no no we don't like that in my language what would you think about that and does it resemble",
    "start": "1785159",
    "end": "1791519"
  },
  {
    "text": "anything acing exactly right so this is what we have with acing you now have",
    "start": "1791519",
    "end": "1796600"
  },
  {
    "text": "functions of two different color so you have green and red and you can't call async from non-async method because you",
    "start": "1796600",
    "end": "1802880"
  },
  {
    "text": "know it's going to be Deadlocks but it gets even further we broke the principle once why not breaking it another time",
    "start": "1802880",
    "end": "1809240"
  },
  {
    "text": "how about value task now so we actually have three different colors in dotnet language or in C language specifically",
    "start": "1809240",
    "end": "1816080"
  },
  {
    "text": "it's not dotl platform it's C so we have three different colors and we kind of shouldn't be calling those methods just",
    "start": "1816080",
    "end": "1822320"
  },
  {
    "text": "like that freely and this is what we have in our language this is the mess that we created other langu copied that",
    "start": "1822320",
    "end": "1829120"
  },
  {
    "text": "blindly including python JavaScript C++ only Java decided to do it differently",
    "start": "1829120",
    "end": "1835279"
  },
  {
    "text": "they decided to go with green threats instead of acing and it's actually way better and even net considered",
    "start": "1835279",
    "end": "1840640"
  },
  {
    "text": "introducing green threats but seems like they abandoned this idea for some time but that's a digression okay so we",
    "start": "1840640",
    "end": "1847000"
  },
  {
    "text": "bashed yet another principle how about we carry on with acing because it's so easy to bash acing and we now talk a",
    "start": "1847000",
    "end": "1854039"
  },
  {
    "text": "little bit about do not repeat yourself okay how would you Implement because imagine that you would like to provide a",
    "start": "1854039",
    "end": "1860919"
  },
  {
    "text": "method that is like both acing and non acing right we would like to provide two flavors why not how would we Implement",
    "start": "1860919",
    "end": "1868000"
  },
  {
    "text": "that in C well imagine that we are sorry for that imagine that we are implementing file read all text right",
    "start": "1868000",
    "end": "1876039"
  },
  {
    "text": "how hard can it be file read all text well we just take the stream reader and we just call read to end that's it this",
    "start": "1876039",
    "end": "1883159"
  },
  {
    "text": "is how file read all text has been implemented for years what do we do if",
    "start": "1883159",
    "end": "1888320"
  },
  {
    "text": "we introduce file read all text async can we call this code from an async method we can IT Tech it would work",
    "start": "1888320",
    "end": "1896480"
  },
  {
    "text": "technically but we don't like it because it misses the point of Asing so what do we do well this is the implementation of",
    "start": "1896480",
    "end": "1902279"
  },
  {
    "text": "read all text asnc so first it is way longer but the important part here is",
    "start": "1902279",
    "end": "1907840"
  },
  {
    "text": "you can't just reuse the implementation and if you were to return internal rol",
    "start": "1907840",
    "end": "1913519"
  },
  {
    "text": "text acing you would like to implement it for Value tasks you would have third impl mentation because you can't reuse",
    "start": "1913519",
    "end": "1919559"
  },
  {
    "text": "the implementation right so not to mention that this breaks so many things like single responsibility principle",
    "start": "1919559",
    "end": "1926440"
  },
  {
    "text": "because we just needed to reimplement the method depending on the return type which shouldn't be the case because it's business logic or wrapping the the",
    "start": "1926440",
    "end": "1933480"
  },
  {
    "text": "result but also we can't copy this code and we need to do it in completely different way so do not repeat yourself",
    "start": "1933480",
    "end": "1939679"
  },
  {
    "text": "is broken in C many times let us now move on to a yet another topic",
    "start": "1939679",
    "end": "1946320"
  },
  {
    "text": "inheritance and this is a actually a a great topic because I would like to start with a simple interview question",
    "start": "1946320",
    "end": "1952880"
  },
  {
    "text": "you may have heard that can do we have multiple inheritance if in C hands up if",
    "start": "1952880",
    "end": "1958480"
  },
  {
    "text": "you say no we don't okay hands up if you say yes we do",
    "start": "1958480",
    "end": "1965120"
  },
  {
    "text": "okay hands up if you actually don't know now so you probably might fail the interview if what was happening today",
    "start": "1965120",
    "end": "1970960"
  },
  {
    "text": "the typical answer is we don't right we have classes and we can inherit from one",
    "start": "1970960",
    "end": "1977080"
  },
  {
    "text": "class only right this is what we typically say so we do not have multiple inheritance so this is what we typically",
    "start": "1977080",
    "end": "1984159"
  },
  {
    "text": "say that we we only have single inheritance in C but it's kind of tricky",
    "start": "1984159",
    "end": "1990279"
  },
  {
    "text": "because we know we can in Implement multiple interfaces but we do not inherit from interfaces we Implement",
    "start": "1990279",
    "end": "1996720"
  },
  {
    "text": "interfaces so that's the difference in naming as we are going to see sometimes we can't even inherit at all structures",
    "start": "1996720",
    "end": "2004720"
  },
  {
    "text": "cannot inherit from each other why",
    "start": "2004720",
    "end": "2009760"
  },
  {
    "text": "no reason that was just a business decision there is no technical limitation for making structures",
    "start": "2010279",
    "end": "2016880"
  },
  {
    "text": "inherent from one another is just net or Microsoft team decided that we don't",
    "start": "2016880",
    "end": "2022159"
  },
  {
    "text": "allow for that so there is more no multiple inheritance in C there is no in Java or is there so the problem with",
    "start": "2022159",
    "end": "2030639"
  },
  {
    "text": "multiple inheritance or actually multiple inheritance is like a feature of object-oriented programming typically",
    "start": "2030639",
    "end": "2036799"
  },
  {
    "text": "when we can say that we can inherit from multiple base classes right C++",
    "start": "2036799",
    "end": "2042919"
  },
  {
    "text": "supported that that is like one of the most notable examples in here when Java was implemented they were sort of scared",
    "start": "2042919",
    "end": "2050679"
  },
  {
    "text": "of implementing that in their language because of the diamond problem and then C inherited them from java because C was",
    "start": "2050679",
    "end": "2058000"
  },
  {
    "text": "copying Java like crazy initially so that's why we don't have multiple inheritance in C because Diamond problem",
    "start": "2058000",
    "end": "2065440"
  },
  {
    "text": "so what is the diamond problem Diamond problem is when we have a Base Class A on this slide from which we inherit with",
    "start": "2065440",
    "end": "2072679"
  },
  {
    "text": "b and c and then D inherits from both B and C so if we now call something like d",
    "start": "2072679",
    "end": "2079280"
  },
  {
    "text": "method from a or D field from a then we actually don't know whether we should be",
    "start": "2079280",
    "end": "2084520"
  },
  {
    "text": "going through this route via B when it comes to overrides etc etc or via C it",
    "start": "2084520",
    "end": "2091919"
  },
  {
    "text": "makes sense right we have the same thing and we just don't know which to pick from we have two things one coming from",
    "start": "2091919",
    "end": "2098440"
  },
  {
    "text": "B one coming from C how do we choose this is a real problem right or is it a",
    "start": "2098440",
    "end": "2103839"
  },
  {
    "text": "problem at all and I'm going to show you that first we have Diamond problem in many places in C we already solved it in",
    "start": "2103839",
    "end": "2111359"
  },
  {
    "text": "many places what's more we are we still have multiple inheritance and actually we have new way of doing multiple",
    "start": "2111359",
    "end": "2118320"
  },
  {
    "text": "inheritance in C then I will show you the actual implementation of multiple inheritance and then we'll ask again if",
    "start": "2118320",
    "end": "2125520"
  },
  {
    "text": "there is multiple inheritance in C or not the important part is Diamond problem as we see it that we have one",
    "start": "2125520",
    "end": "2132280"
  },
  {
    "text": "thing that is or actually we have two things that are similar and we just",
    "start": "2132280",
    "end": "2137359"
  },
  {
    "text": "don't know which one to pick this is a problem that is prevalent in the computer science in software engineering",
    "start": "2137359",
    "end": "2143040"
  },
  {
    "text": "and we solved it many times let's start with a very tiny example let's say that we have two interfaces interface A and B",
    "start": "2143040",
    "end": "2150359"
  },
  {
    "text": "both provide method void Fu as you can see in here then we have class C that",
    "start": "2150359",
    "end": "2155760"
  },
  {
    "text": "implements both of those interfaces and implements method void f is it going",
    "start": "2155760",
    "end": "2160960"
  },
  {
    "text": "to work C riddle hands up if you think yes hands",
    "start": "2160960",
    "end": "2166319"
  },
  {
    "text": "up if you think no okay this is going to work why it seems like we are having",
    "start": "2166319",
    "end": "2172240"
  },
  {
    "text": "some naming Collision right is this Fu coming from interface a or from",
    "start": "2172240",
    "end": "2177400"
  },
  {
    "text": "interface B and actually this is going to work because our line of reasoning here is doesn't matter because it's the",
    "start": "2177400",
    "end": "2185000"
  },
  {
    "text": "same for both A and B right it's the same signal nothing can explode here nothing should",
    "start": "2185000",
    "end": "2191119"
  },
  {
    "text": "explode here we let it go so you may say there is no diamond problem at all in this case okay let's take it a little",
    "start": "2191119",
    "end": "2197960"
  },
  {
    "text": "bit further imagine that we have two methods full method accepting two integers and then we have method F",
    "start": "2197960",
    "end": "2205319"
  },
  {
    "text": "accepting params of integers so basically an array of integers so you can now call it a do Fu 1 comma 2 is it",
    "start": "2205319",
    "end": "2214079"
  },
  {
    "text": "going to work hands up is it going to fail hands up okay which method is going",
    "start": "2214079",
    "end": "2219960"
  },
  {
    "text": "to be called one at the top or one at the bottom the one at the top okay you're doing it right so the answer is",
    "start": "2219960",
    "end": "2227319"
  },
  {
    "text": "yes this is going to work even though this call like the way we call this method could match both of these we say",
    "start": "2227319",
    "end": "2234960"
  },
  {
    "text": "that yeah this one has two parameters the other one is actually you know obfuscating this with an array it makes",
    "start": "2234960",
    "end": "2241839"
  },
  {
    "text": "sense to call this one at the top right but notice you actually now break the compatibility because if there is no",
    "start": "2241839",
    "end": "2248560"
  },
  {
    "text": "method sorry if this method doesn't exist yet and we implement this method",
    "start": "2248560",
    "end": "2255040"
  },
  {
    "text": "then this line of code is going to work okay and then in another version of our",
    "start": "2255040",
    "end": "2260119"
  },
  {
    "text": "library we introduce this method this method so sorry this call site will now",
    "start": "2260119",
    "end": "2266440"
  },
  {
    "text": "start calling this one so we broke the compatibility and compiler didn't you",
    "start": "2266440",
    "end": "2271880"
  },
  {
    "text": "know say a word no warning nothing of that kind where can it happen many times",
    "start": "2271880",
    "end": "2277119"
  },
  {
    "text": "for inance if you get logging libraries logging libraries they need to be very generic accepting any number of",
    "start": "2277119",
    "end": "2283920"
  },
  {
    "text": "parameters right and then we would like to make logging libraries faster so we introduce another method that is being",
    "start": "2283920",
    "end": "2291119"
  },
  {
    "text": "code and optimizing this specific case but now comes the tricky part if you call or sorry if you compile your caller",
    "start": "2291119",
    "end": "2298800"
  },
  {
    "text": "with the new loging library then you will be calling this method if you deploy this to the production system",
    "start": "2298800",
    "end": "2305319"
  },
  {
    "text": "without updating the loging library is it's going to crash in runtime because there is no method like this and this is",
    "start": "2305319",
    "end": "2311240"
  },
  {
    "text": "actually what happens many times in like Legacy code or code that we migrate between versions but you might say okay",
    "start": "2311240",
    "end": "2317240"
  },
  {
    "text": "there is no diamond problem in here because clearly here we have two parameters and here we have only one so",
    "start": "2317240",
    "end": "2323079"
  },
  {
    "text": "it's just you know code juggling let's take it a bit further what about this case so we have method F that accepts",
    "start": "2323079",
    "end": "2329520"
  },
  {
    "text": "the long parameter and another method F that accepts double parameter and we",
    "start": "2329520",
    "end": "2334800"
  },
  {
    "text": "call it like this f one two three not notice that 1 2 3 is not a long value",
    "start": "2334800",
    "end": "2341319"
  },
  {
    "text": "it's an integer it's not a double value because it's an integer which method is",
    "start": "2341319",
    "end": "2347160"
  },
  {
    "text": "going to be called do you think it's going to compile heads up if yes okay does it break hands up if no sorry hands",
    "start": "2347160",
    "end": "2355160"
  },
  {
    "text": "up if yes it breaks okay which method is going to be called one at the top or one at the",
    "start": "2355160",
    "end": "2362040"
  },
  {
    "text": "bottom I can see people hesitating it's going to be the same the method at the",
    "start": "2362040",
    "end": "2367800"
  },
  {
    "text": "top is going to be Cod that is because we say that integer is converted to long and it's way better than converting it",
    "start": "2367800",
    "end": "2373800"
  },
  {
    "text": "to double you may say this makes sense you may argue this doesn't make sense",
    "start": "2373800",
    "end": "2379200"
  },
  {
    "text": "again we may have the problem with the with compatibility if this method doesn't exist and we introduce it later",
    "start": "2379200",
    "end": "2384960"
  },
  {
    "text": "on but okay you may say there is no diamond problem here because okay integers should be Longs not doubles",
    "start": "2384960",
    "end": "2391800"
  },
  {
    "text": "right so let's take it further what about this case we have the interface a that has method OB F and then interface",
    "start": "2391800",
    "end": "2399359"
  },
  {
    "text": "B that has method string F and we would like to implement it with public string F does it compile or not string is an",
    "start": "2399359",
    "end": "2407000"
  },
  {
    "text": "object isn't it should it compile well it does compile in Java it doesn't",
    "start": "2407000",
    "end": "2412119"
  },
  {
    "text": "compile in C why business decisions we just decided it doesn't compile in C",
    "start": "2412119",
    "end": "2418480"
  },
  {
    "text": "even though it should work and it works in Java but it doesn't work in C so now",
    "start": "2418480",
    "end": "2423560"
  },
  {
    "text": "we have an example where we kind of diverge from our base language callede Java but we decided to make a different",
    "start": "2423560",
    "end": "2429839"
  },
  {
    "text": "call and you might say okay this is again not a diamond problem because we have different signatures they only",
    "start": "2429839",
    "end": "2435720"
  },
  {
    "text": "similar but let's take another case what about default interface implementations",
    "start": "2435720",
    "end": "2441359"
  },
  {
    "text": "so we have interface a with method void Fu that does some Implement provides some implementation we have B with",
    "start": "2441359",
    "end": "2447400"
  },
  {
    "text": "another method void Fu with some implementation and then we create C and we call c. Fu does it compile yes hands",
    "start": "2447400",
    "end": "2456079"
  },
  {
    "text": "up no no hands up okay the answer is it",
    "start": "2456079",
    "end": "2461880"
  },
  {
    "text": "does not how do we make it",
    "start": "2461880",
    "end": "2465640"
  },
  {
    "text": "compile what come again exactly right if we specify the",
    "start": "2467400",
    "end": "2473400"
  },
  {
    "text": "interface in this place so we cast c to either interface a or interface B and",
    "start": "2473400",
    "end": "2480200"
  },
  {
    "text": "then we call Fu then it does compile it does work so you can Implement two",
    "start": "2480200",
    "end": "2486640"
  },
  {
    "text": "interfaces now you tell me does it look different than multiple inheritance and I'm trying",
    "start": "2486640",
    "end": "2493400"
  },
  {
    "text": "to show you obviously through all those examples Diamond problem is there and we",
    "start": "2493400",
    "end": "2498760"
  },
  {
    "text": "solved it many times in the programming language there are many ways to solve",
    "start": "2498760",
    "end": "2504160"
  },
  {
    "text": "the diamond problem one of the ways is nobody picks we simply ban the code that",
    "start": "2504160",
    "end": "2510839"
  },
  {
    "text": "tries to access the same thing from two different paths and we say no just reorganize your code so it never happens",
    "start": "2510839",
    "end": "2518119"
  },
  {
    "text": "so we effectively BN multiple inheritance the other approach we can take is there is just one pick so there",
    "start": "2518119",
    "end": "2524720"
  },
  {
    "text": "is nothing to pick from like just like we had the interface with void Fu method right even though there were two",
    "start": "2524720",
    "end": "2530640"
  },
  {
    "text": "interfaces they were very similar or actually the same so there was no actual",
    "start": "2530640",
    "end": "2536040"
  },
  {
    "text": "pick so we don't need to be bothered or another thingy is we just pick arbitrarily like the language designers",
    "start": "2536040",
    "end": "2542960"
  },
  {
    "text": "they decided that integers are long values not doubles they might have said",
    "start": "2542960",
    "end": "2548520"
  },
  {
    "text": "okay you need to specify which method to call right they just decided integers are Longs and it works and ultimately",
    "start": "2548520",
    "end": "2555720"
  },
  {
    "text": "the The One and Only Solution is we let the user pick just like we have on this",
    "start": "2555720",
    "end": "2560800"
  },
  {
    "text": "example we don't know which method to call but we decided not to ban multiple",
    "start": "2560800",
    "end": "2566559"
  },
  {
    "text": "inheritance from the default interfaces but we decided okay user you're are smart enough go figure what to do with",
    "start": "2566559",
    "end": "2573040"
  },
  {
    "text": "that so this is how we decided with the diamond problems in C and now coming back to multiple inheritance depending",
    "start": "2573040",
    "end": "2580319"
  },
  {
    "text": "on what we are talking about there are actually many types of inheritance whenever we started talking about",
    "start": "2580319",
    "end": "2586359"
  },
  {
    "text": "interface implementations it is because Java was scared to have true inheritance",
    "start": "2586359",
    "end": "2591839"
  },
  {
    "text": "multiple inheritance in their language right so they were so scared they decided to change naming inheritance is",
    "start": "2591839",
    "end": "2598800"
  },
  {
    "text": "now from Base Class implementation is when we Implement interfaces but when we",
    "start": "2598800",
    "end": "2604280"
  },
  {
    "text": "talk about types of inheritance there are actually many of them we can have interface or signature inheritance",
    "start": "2604280",
    "end": "2610079"
  },
  {
    "text": "implementation State identity etc etc so signature inheritance is what we",
    "start": "2610079",
    "end": "2615240"
  },
  {
    "text": "typically call interface implementation so we have a set of method signatures",
    "start": "2615240",
    "end": "2621079"
  },
  {
    "text": "that we incorporate into the class into the subtype right so this is signature",
    "start": "2621079",
    "end": "2627000"
  },
  {
    "text": "inheritance and there is multiple signature inheritance in C because we can inherit from multiple interfaces",
    "start": "2627000",
    "end": "2633960"
  },
  {
    "text": "they tell you there is no multiple inheritance but there is multi interface inheritance if we call it this way and",
    "start": "2633960",
    "end": "2639599"
  },
  {
    "text": "this is actually called in you know some theoretical book let's put it this way",
    "start": "2639599",
    "end": "2644680"
  },
  {
    "text": "when we talk about implementation inheritance it's when we actually get the implementation so the method body",
    "start": "2644680",
    "end": "2651800"
  },
  {
    "text": "not only the signature but also the body of the method and we do have multiple",
    "start": "2651800",
    "end": "2657000"
  },
  {
    "text": "implementation inheritance in C because we have default interface implementation",
    "start": "2657000",
    "end": "2662559"
  },
  {
    "text": "we can get method bodies from many base types when it comes to state inheritance",
    "start": "2662559",
    "end": "2667960"
  },
  {
    "text": "so basically inheriting Fields then we don't have that in C but we can emulate",
    "start": "2667960",
    "end": "2673880"
  },
  {
    "text": "that with default interface implementation Nothing Stops you from creating like a private static field in",
    "start": "2673880",
    "end": "2680040"
  },
  {
    "text": "the interface that would be a dictionary holding whatever you want and then you have Getters and Setters actually some",
    "start": "2680040",
    "end": "2686640"
  },
  {
    "text": "languages do not even have fields at all for instance Scala they don't have",
    "start": "2686640",
    "end": "2691720"
  },
  {
    "text": "fields at all they always change fields to Getters and Setters right so this is how you can pretend like you have",
    "start": "2691720",
    "end": "2698599"
  },
  {
    "text": "multiple inheritance but C doesn't support that like by the book let's call it this way and finally it's identity",
    "start": "2698599",
    "end": "2705800"
  },
  {
    "text": "inheritance so we can inherit the Constructor so basically something being",
    "start": "2705800",
    "end": "2711400"
  },
  {
    "text": "a type we can't Implement that in C we do not have multiple inher multiple identity inheritance however we can",
    "start": "2711400",
    "end": "2719079"
  },
  {
    "text": "Implement that in the hockey way so let's see a little bit of code that we",
    "start": "2719079",
    "end": "2724359"
  },
  {
    "text": "are going to examine here what we have in this source code let's make it slightly bigger we have Base Class",
    "start": "2724359",
    "end": "2730640"
  },
  {
    "text": "number one with some integer FEI Base Class number two with some bytes Base Class number three with doubles and Base",
    "start": "2730640",
    "end": "2737760"
  },
  {
    "text": "Class number four with strings okay what do we do next is we do some black magic",
    "start": "2737760",
    "end": "2743040"
  },
  {
    "text": "tricker just as we always do what we create is we create a multiple inheritance object that inherits from",
    "start": "2743040",
    "end": "2749920"
  },
  {
    "text": "all those base classes base 1 2 three and four okay what we do next is we take",
    "start": "2749920",
    "end": "2755920"
  },
  {
    "text": "the base we take this object we pretend that it's now base one and we assign it",
    "start": "2755920",
    "end": "2762800"
  },
  {
    "text": "to a field of type base one and we start doing something with Fields printing the",
    "start": "2762800",
    "end": "2767960"
  },
  {
    "text": "object address etc etc we do the same with base two with base three with base",
    "start": "2767960",
    "end": "2773480"
  },
  {
    "text": "four and whatnot and let's see if this works and you can see when I run this",
    "start": "2773480",
    "end": "2778559"
  },
  {
    "text": "application then you can see that object with multiple inheritance created is at this address and then it's pretending",
    "start": "2778559",
    "end": "2785359"
  },
  {
    "text": "that it's of this type of this this type and you can see this address is the same in all the Calles let's see the code",
    "start": "2785359",
    "end": "2791720"
  },
  {
    "text": "again in those methods I pretend that object is this object is base one I",
    "start": "2791720",
    "end": "2799280"
  },
  {
    "text": "initially printed the address of this object and then I check the address of",
    "start": "2799280",
    "end": "2804640"
  },
  {
    "text": "this base one object and I get the type sorry it's multiple inheritance object",
    "start": "2804640",
    "end": "2809920"
  },
  {
    "text": "here it probably it should be um it could be either base two or could be multiple inheritance object because hey",
    "start": "2809920",
    "end": "2816599"
  },
  {
    "text": "this is the same object and you can see that the the type changes with every single call but the address stays the",
    "start": "2816599",
    "end": "2823680"
  },
  {
    "text": "same so you can do this black magic in C now coming back to slides do you believe",
    "start": "2823680",
    "end": "2831640"
  },
  {
    "text": "there is a multiple inheritance in C hands up there are some of you do not",
    "start": "2831640",
    "end": "2837319"
  },
  {
    "text": "say that in the interviews right there is no multiple inheritance in C period",
    "start": "2837319",
    "end": "2842599"
  },
  {
    "text": "even though now you know moving moving forward probably the last topic for today is exceptions so now again C",
    "start": "2842599",
    "end": "2850839"
  },
  {
    "text": "riddles what happens with this piece of code so let's say that we throw the",
    "start": "2850839",
    "end": "2856960"
  },
  {
    "text": "exception then we have finally and then we throw another exception from finally",
    "start": "2856960",
    "end": "2862240"
  },
  {
    "text": "and we try to catch this exception here what happens hands hand exception number",
    "start": "2862240",
    "end": "2869440"
  },
  {
    "text": "two okay hands up if exception number two let's start with this one okay hands up if segmentation fold or other nasty",
    "start": "2869440",
    "end": "2877720"
  },
  {
    "text": "thingy nobody here ah there is one have you ever saw a CLR engine exception in",
    "start": "2877720",
    "end": "2885040"
  },
  {
    "text": "net okay many things ahead of you okay anyway the good answer here is yes it's",
    "start": "2885040",
    "end": "2891160"
  },
  {
    "text": "going to be exception too but with all what I'm saying here with those exceptions take it with a bit grain of",
    "start": "2891160",
    "end": "2896920"
  },
  {
    "text": "salt because really it gets messy and it will be Messier with every slide what happens here we do have a try block so",
    "start": "2896920",
    "end": "2904440"
  },
  {
    "text": "we throw the exception how does it work now we start looking if there is any",
    "start": "2904440",
    "end": "2910160"
  },
  {
    "text": "catch block around that if there is none no catch blocks at all then there may be",
    "start": "2910160",
    "end": "2918440"
  },
  {
    "text": "nothing meaning that it may just die net or specifically CP specification tells",
    "start": "2918440",
    "end": "2924640"
  },
  {
    "text": "you that if you do not have try catch then this finally may not be executed",
    "start": "2924640",
    "end": "2929960"
  },
  {
    "text": "ever and this is allowed by C this is what was happening in mono implementation this never happened in",
    "start": "2929960",
    "end": "2937000"
  },
  {
    "text": "NET Framework nor net core but I am not sure if it's going to change one day so",
    "start": "2937000",
    "end": "2942160"
  },
  {
    "text": "beware you always need to have TR catch per the language specification so we take a look at the code yes there is a",
    "start": "2942160",
    "end": "2948280"
  },
  {
    "text": "catch block let's start unwinding the stack what do we do when unwinding the",
    "start": "2948280",
    "end": "2953319"
  },
  {
    "text": "Stag we execute all the finely blocks right so we execute this finally block and there is this exception to throne",
    "start": "2953319",
    "end": "2960480"
  },
  {
    "text": "okay what happens with exception one it's gone it's gone so you lost the",
    "start": "2960480",
    "end": "2967000"
  },
  {
    "text": "exception and this heavily depends on the language you're dealing with so c",
    "start": "2967000",
    "end": "2972480"
  },
  {
    "text": "will lose the first exception python 2 should do the same Python 3 should store",
    "start": "2972480",
    "end": "2977799"
  },
  {
    "text": "the first exception preserve it python is actually good in this case that's very rare and another thing is Java that",
    "start": "2977799",
    "end": "2983799"
  },
  {
    "text": "depends on the exception type so now the same piece of code will work completely",
    "start": "2983799",
    "end": "2989319"
  },
  {
    "text": "differently in various languages that we are talking about okay what to do next",
    "start": "2989319",
    "end": "2994839"
  },
  {
    "text": "with this such an example so we know probably that never do a code like this one never put TR finely in try or",
    "start": "2994839",
    "end": "3002079"
  },
  {
    "text": "actually never throw in finally but we can actually do something better and sorry for being this being so pixelated",
    "start": "3002079",
    "end": "3008520"
  },
  {
    "text": "but anyway where does this I mean this code where do we spot this code in the",
    "start": "3008520",
    "end": "3014480"
  },
  {
    "text": "our programming language in C is there any case we would Implement something like this so imagine doing this thingy",
    "start": "3014480",
    "end": "3021319"
  },
  {
    "text": "so if you do using VAR resource equals new resource behind the scenes this is",
    "start": "3021319",
    "end": "3026720"
  },
  {
    "text": "filed to VAR resource equals new resource and then we have try finally if resource not equal to null resource",
    "start": "3026720",
    "end": "3034720"
  },
  {
    "text": "dispose okay so if anything happens in here like you throw the exception then",
    "start": "3034720",
    "end": "3040640"
  },
  {
    "text": "you call dispose and what happens now if this poose throw if this method thrown for whatever",
    "start": "3040640",
    "end": "3048040"
  },
  {
    "text": "reason then you lose the exception in here using is actually broken in C never",
    "start": "3048040",
    "end": "3053720"
  },
  {
    "text": "use it because you lose exceptions and another thing you to notice here if anything happens in this Constructor God",
    "start": "3053720",
    "end": "3060960"
  },
  {
    "text": "forbid froming exceptions in Constructor but remember there are people who do domain driven design and then they do it",
    "start": "3060960",
    "end": "3068280"
  },
  {
    "text": "in the way that they access databases from Constructors yes they do this thingy some of us love it because we",
    "start": "3068280",
    "end": "3075359"
  },
  {
    "text": "should never create an entity in an inconsistent State some of us says seriously calling databasing Constructor",
    "start": "3075359",
    "end": "3082319"
  },
  {
    "text": "yet they do it so the exception may be from here and your using will never catch that so you will never call",
    "start": "3082319",
    "end": "3088119"
  },
  {
    "text": "dispose the question is should we call dispose on this thingy right that's yet another problem we need to solve but",
    "start": "3088119",
    "end": "3094200"
  },
  {
    "text": "anyway how do we fix using if you ever wanted to know how do we Implement using",
    "start": "3094200",
    "end": "3099319"
  },
  {
    "text": "the right way the Blessed Way in C this is the shortest piece of code I ever came up with so what we do is we store",
    "start": "3099319",
    "end": "3106880"
  },
  {
    "text": "two exceptions at the beginning We call we create the resource before try just to maintain the same like contract we do",
    "start": "3106880",
    "end": "3114960"
  },
  {
    "text": "something then we catch the exeption we preserve it and then in finally we check",
    "start": "3114960",
    "end": "3120040"
  },
  {
    "text": "if the resource is not null in that case we just C dispose and we try to catch another exception and now we do the",
    "start": "3120040",
    "end": "3126599"
  },
  {
    "text": "iology here to understand whether it was just one exception or two of them and we aggregate them at together you may",
    "start": "3126599",
    "end": "3133760"
  },
  {
    "text": "notice yet another interesting thing there is exception this pin for capture throw why isn't this guy just using",
    "start": "3133760",
    "end": "3141480"
  },
  {
    "text": "throw okay someone raises their hand what's that",
    "start": "3141480",
    "end": "3148200"
  },
  {
    "text": "that is exactly the right answer so if you would like to rrow the exception imagine that you have a code like this",
    "start": "3151599",
    "end": "3158079"
  },
  {
    "text": "method throwing exception method throwing exception just like that if the exception is being thrown then the",
    "start": "3158079",
    "end": "3164040"
  },
  {
    "text": "question comes how do we rrow it here if we try doing throw e then we lose the",
    "start": "3164040",
    "end": "3170280"
  },
  {
    "text": "coack you probably know that because it's common by the way how do you do that in Java you do FR e how do you you",
    "start": "3170280",
    "end": "3176599"
  },
  {
    "text": "do that in many other languages you just do throw e it's just C that is so careful not to lose those exceptions",
    "start": "3176599",
    "end": "3183000"
  },
  {
    "text": "right however if you do throw e that actually loses important piece of in",
    "start": "3183000",
    "end": "3188440"
  },
  {
    "text": "sorry not even throw e you may let's wait with that you may use special instructions like throw so you just do",
    "start": "3188440",
    "end": "3195640"
  },
  {
    "text": "throw column and it should throw the exception or rrow the exception the right way but if you try doing that you",
    "start": "3195640",
    "end": "3201720"
  },
  {
    "text": "will notice especially if you use debugger behind the scenes that you lose the information whether it was thrown in",
    "start": "3201720",
    "end": "3207880"
  },
  {
    "text": "the first execution or in the second execution you lose this architectural Cod stack of what is happening now it's",
    "start": "3207880",
    "end": "3214720"
  },
  {
    "text": "even worse your C code if you just print this exception will Print Different",
    "start": "3214720",
    "end": "3220200"
  },
  {
    "text": "stack trays than your debugger is going to see so your Visual Studio or windbg",
    "start": "3220200",
    "end": "3225599"
  },
  {
    "text": "will report different Co stock than the the the the console will print to you",
    "start": "3225599",
    "end": "3230880"
  },
  {
    "text": "you can create new exception so you would just do new exception and you would pass this e as a parameter to this",
    "start": "3230880",
    "end": "3237680"
  },
  {
    "text": "thingy right that would work as well but then you change the exception type okay",
    "start": "3237680",
    "end": "3243480"
  },
  {
    "text": "so we know that frow breaks the co stack throwing new exception may do even worse",
    "start": "3243480",
    "end": "3248680"
  },
  {
    "text": "break the ways we handle exceptions aing may lose the state machine that's",
    "start": "3248680",
    "end": "3253720"
  },
  {
    "text": "another thingy what can we do well if we are old enough or born early enough and",
    "start": "3253720",
    "end": "3259119"
  },
  {
    "text": "still working in Net Framework then there is some tricker with remoting behind the scenes so you can actually",
    "start": "3259119",
    "end": "3265480"
  },
  {
    "text": "serialize the ception for the remote call overcome interfaces and then rethrow it just don't do it in now new C",
    "start": "3265480",
    "end": "3273359"
  },
  {
    "text": "starting with NET Framework 4.5 we have exception dispat info capture throw and",
    "start": "3273359",
    "end": "3278720"
  },
  {
    "text": "this is the way we ref exceptions this is the only blessed way I'm aware of to ref the exceptions and the important",
    "start": "3278720",
    "end": "3285880"
  },
  {
    "text": "thing is this was changed so many times that it may be that in Net 10 11 12 15",
    "start": "3285880",
    "end": "3292280"
  },
  {
    "text": "the frow will work actually properly so maybe one day this maybe even today this",
    "start": "3292280",
    "end": "3297400"
  },
  {
    "text": "slide is obsolete but I'm just recommending always go with exception disp info okay that would be it with one",
    "start": "3297400",
    "end": "3306079"
  },
  {
    "text": "thingy that we close with one remark when it comes to finally we claim that finally should be executed no matter",
    "start": "3306079",
    "end": "3312359"
  },
  {
    "text": "what right this is what we typically think about finally obviously if we plug the the plug you know then not nothing's",
    "start": "3312359",
    "end": "3319599"
  },
  {
    "text": "going to execute right but it's kind of logical right the thing is there so many other cases when finally is not executed",
    "start": "3319599",
    "end": "3326119"
  },
  {
    "text": "at at all it may not be executed when application dies that should be rather obvious if you go with task kill the",
    "start": "3326119",
    "end": "3333200"
  },
  {
    "text": "process it's going to die no fines at all this makes sense however it may be",
    "start": "3333200",
    "end": "3339039"
  },
  {
    "text": "skipped when application exits so if you call environment exit your finally may",
    "start": "3339039",
    "end": "3344720"
  },
  {
    "text": "not be executed and this becomes a problem why because you may be releasing",
    "start": "3344720",
    "end": "3350520"
  },
  {
    "text": "native resources in finally especially in this POS right that's the whole point of this post to release like Global",
    "start": "3350520",
    "end": "3357599"
  },
  {
    "text": "mutexes or things that are managed by operating system and owned by other processes as well so if we do not call",
    "start": "3357599",
    "end": "3364480"
  },
  {
    "text": "finally then for instance the operating system will simply take all the mutexes we have call them available now but",
    "start": "3364480",
    "end": "3372520"
  },
  {
    "text": "actually they will be abandoned so we have no idea whether the memory they are protecting is consistent or not so this",
    "start": "3372520",
    "end": "3379520"
  },
  {
    "text": "is actually a problem another thingy finally may not be called depending on the exception type you have now if you",
    "start": "3379520",
    "end": "3387799"
  },
  {
    "text": "are really nasty and cause some crazy methods then you get something like engine execution engine exception or",
    "start": "3387799",
    "end": "3395039"
  },
  {
    "text": "access violation actually there are different flavors of of access violation some some of those exceptions may not",
    "start": "3395039",
    "end": "3401839"
  },
  {
    "text": "trigger any finally blocks so finally won't be executed and also may be skipped on unhandled exceptions this is",
    "start": "3401839",
    "end": "3408039"
  },
  {
    "text": "what I already mentioned this is allowed by the C specification so whenever you start a new threet always put put try",
    "start": "3408039",
    "end": "3415240"
  },
  {
    "text": "catch on it or just generally have Tri catch everywhere otherwise your fin may not be executed however finally May",
    "start": "3415240",
    "end": "3421039"
  },
  {
    "text": "swallow exception as we already saw and general remark it's not only about C but",
    "start": "3421039",
    "end": "3426119"
  },
  {
    "text": "also about other languages never return in finely never throw exceptions in finally that's kind of asking for",
    "start": "3426119",
    "end": "3432119"
  },
  {
    "text": "troubles and filtering exceptions it's prone to the same issue so if you use this filter Syntax for for the when",
    "start": "3432119",
    "end": "3438720"
  },
  {
    "text": "Syntax for C uh exception filters generally it may break so be careful",
    "start": "3438720",
    "end": "3444559"
  },
  {
    "text": "with fin L and always make sure that you have your exceptions handled properly especially when we are talking about",
    "start": "3444559",
    "end": "3450680"
  },
  {
    "text": "refering exceptions and the using construct and because we have only 3 minutes left that would be basically it",
    "start": "3450680",
    "end": "3458280"
  },
  {
    "text": "so if you do happen to have any questions now is the right time to ask them at the very end of this slide that",
    "start": "3458280",
    "end": "3464559"
  },
  {
    "text": "there are references to couple of things for instance the LSP white paper that I recommend you take a look and read and",
    "start": "3464559",
    "end": "3471039"
  },
  {
    "text": "also I encourage you to take a look at my blog rate this session Etc and this QR code points to slides that would be",
    "start": "3471039",
    "end": "3477400"
  },
  {
    "text": "it if you happen to have any questions I'm happy to take",
    "start": "3477400",
    "end": "3481799"
  },
  {
    "text": "them okay thank you so much folks enjoy the rest of your day [Music]",
    "start": "3483640",
    "end": "3491670"
  }
]