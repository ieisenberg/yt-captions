[
  {
    "text": "welcome everyone to last talk of the day on this one CBS 11 optimization and",
    "start": "2799",
    "end": "8690"
  },
  {
    "text": "performance I usually start off with this question why why this talk I like",
    "start": "8690",
    "end": "15860"
  },
  {
    "text": "to say well what made me think I was going to talk about those stuff well I go around doing quite a bit of C++",
    "start": "15860",
    "end": "21740"
  },
  {
    "text": "training consulting talking to other people and people use C++ because they",
    "start": "21740",
    "end": "27109"
  },
  {
    "text": "want control they want optimization they want performance they want to get everything out of their machine and I've",
    "start": "27109",
    "end": "32750"
  },
  {
    "text": "seen a lot of people talking about things I think should I do this should I do that which is more efficient so what",
    "start": "32750",
    "end": "38900"
  },
  {
    "text": "they mean by efficiency what I mean by optimation optimization those are some interesting questions all the time but",
    "start": "38900",
    "end": "44780"
  },
  {
    "text": "I've seen a lot of advice and the times are going well it also appears to be a little bit of sort of kind of well a bit",
    "start": "44780",
    "end": "52129"
  },
  {
    "text": "of this and a bit of that so you'll get something so people asking should I do pre pre incremental post increment and",
    "start": "52129",
    "end": "58430"
  },
  {
    "text": "I'm thinking well actually most of the time that's gonna make absolutely no difference whatsoever on on integers if",
    "start": "58430",
    "end": "63769"
  },
  {
    "text": "it's your own iterative type possibly but apart from that really thinking my great deal different oh yeah well",
    "start": "63769",
    "end": "69620"
  },
  {
    "text": "when we when I was in college I was told I should be using shifts rather than divides and I'm going well yeah a compile it usually does that for you if",
    "start": "69620",
    "end": "76790"
  },
  {
    "text": "it's constant anyway and well yeah divides are a bit more expensive than than this ones out there probably quite",
    "start": "76790",
    "end": "82250"
  },
  {
    "text": "an expensive one altogether but really is that the limit of the advice that we're given Shirley's got a better way",
    "start": "82250",
    "end": "89180"
  },
  {
    "text": "so there has to be some way of doing this in a more structured way and then",
    "start": "89180",
    "end": "95330"
  },
  {
    "text": "you'll get some people who might say things like avoid array right this is one that and rounds and rescue says well",
    "start": "95330",
    "end": "100940"
  },
  {
    "text": "yes ray writes do have a problem because you have to do a read and a write and then you haven't got and you can't put",
    "start": "100940",
    "end": "107450"
  },
  {
    "text": "them into registers yes that's fine if you are if you're finding that's a",
    "start": "107450",
    "end": "113330"
  },
  {
    "text": "problem then probably then there's something else that you're dealing with what's the bigger picture here ah well move semantics they're gonna be",
    "start": "113330",
    "end": "120560"
  },
  {
    "text": "great big thing on C for us 11 yes there are performance advantage when why when",
    "start": "120560",
    "end": "127130"
  },
  {
    "text": "when the how they fit into this picture oh we should be doing cash for ng programming data oriented programming",
    "start": "127130",
    "end": "132770"
  },
  {
    "text": "you get my cat my customer is no with that I forgot his name doing games programming and data oriented",
    "start": "132770",
    "end": "139460"
  },
  {
    "text": "programming and pulling his hair out telling us we all don't rock what he's probably right but for a games programmer when you've",
    "start": "139460",
    "end": "145730"
  },
  {
    "text": "got 16 millisecond batches essentially there's a very different thing than if you're doing data lookup you're doing a",
    "start": "145730",
    "end": "151340"
  },
  {
    "text": "web service or you're doing some bulk calculations it's very different ah well multiple threads will save us",
    "start": "151340",
    "end": "157280"
  },
  {
    "text": "all for this one well the answer that one is definitely no it will probably create more problems than it will solve",
    "start": "157280",
    "end": "164170"
  },
  {
    "text": "so I've been trying to teach people about this one or getting to think about",
    "start": "164170",
    "end": "169550"
  },
  {
    "text": "this and they went well but well there's more of a kind of a story and it's there's a story that sort of kind of",
    "start": "169550",
    "end": "176030"
  },
  {
    "text": "goes like this so now this is what I try to get people think about so you start off and he says well your application is",
    "start": "176030",
    "end": "181190"
  },
  {
    "text": "too slow well yes fine if it's not too slow then that's the end of this one here and we're just all go to a bar",
    "start": "181190",
    "end": "187340"
  },
  {
    "text": "right now so start profiling you start timing it you go well what's going on and what I",
    "start": "187340",
    "end": "193340"
  },
  {
    "text": "usually find is that the first thing and that next level is you're doing something silly you're going like oh",
    "start": "193340",
    "end": "199790"
  },
  {
    "text": "dear it's the full the full facepalm at this point where you start thinking why are we calling the database every time",
    "start": "199790",
    "end": "206150"
  },
  {
    "text": "in the loop why are we doing this one why are we doing that why are we doing that so you find that there's usually some silly little thing that you've done",
    "start": "206150",
    "end": "212150"
  },
  {
    "text": "that's consuming a lot of time it may actually be a surprise to you that the thing that you're looking at takes a lot",
    "start": "212150",
    "end": "217550"
  },
  {
    "text": "of time but you can sort of kind of get quite a long way with that first part of there and that's not really about sort",
    "start": "217550",
    "end": "224030"
  },
  {
    "text": "of Superbus optimization or whatever that's just good programming right okay",
    "start": "224030",
    "end": "229400"
  },
  {
    "text": "so we get that one out of the way then the next step is right okay what we going to end up and then usually what I found is that then you're profiling is",
    "start": "229400",
    "end": "236030"
  },
  {
    "text": "going to tell you that malach or mem come or mem copy at the top that you're",
    "start": "236030",
    "end": "241040"
  },
  {
    "text": "spending a lot of time doing memory management this is really quite common and I've seen a number of people get to",
    "start": "241040",
    "end": "246920"
  },
  {
    "text": "this one and go oh you're at that stage of optimization are you this is a this is a process I've seen happen in number",
    "start": "246920",
    "end": "252799"
  },
  {
    "text": "of places so it's not about do I just do this or that the answer is no there's a story going on here we can get to",
    "start": "252799",
    "end": "259970"
  },
  {
    "text": "something faster why what do we do about that one okay well actually at that",
    "start": "259970",
    "end": "265310"
  },
  {
    "text": "point we then need to start dealing with things like temporaries we need to start thinking about our memory allocation pre allocating memory",
    "start": "265310",
    "end": "271580"
  },
  {
    "text": "rather than bits and pieces maybe you want to choose we using vector we're not using reserve those sort of kind of",
    "start": "271580",
    "end": "277639"
  },
  {
    "text": "things like that maybe we should be using move maybe you should be using in place rather than just creating stuff",
    "start": "277639",
    "end": "283580"
  },
  {
    "text": "how do we avoid the overhead of dynamic memory allocation we'll come back to some of those ones right so you somehow",
    "start": "283580",
    "end": "289460"
  },
  {
    "text": "get rid of that one and then you go oK we've stopped throwing cycles away we've stopped generating all these cache",
    "start": "289460",
    "end": "295819"
  },
  {
    "text": "misses and other things with thousands of cycles going on Melek and then you go right okay now at this",
    "start": "295819",
    "end": "300949"
  },
  {
    "text": "point it starts we can start looking at our algorithm is it order n order N",
    "start": "300949",
    "end": "306229"
  },
  {
    "text": "squared in order log n order 1 what does that mean and then we can start getting those benefits because we've stopped",
    "start": "306229",
    "end": "312590"
  },
  {
    "text": "throwing away stuff so stop doing silly things stop throwing away my time on",
    "start": "312590",
    "end": "320780"
  },
  {
    "text": "malloc and copying and then you get down to that one this then really starts you",
    "start": "320780",
    "end": "325880"
  },
  {
    "text": "start asking about operational profile and data access patterns have you got a read heavy or write heavy application it",
    "start": "325880",
    "end": "332630"
  },
  {
    "text": "makes a big difference as to where the caching makes a difference to your caching both at the application level",
    "start": "332630",
    "end": "338270"
  },
  {
    "text": "and at the hardware level and then right down at the bottom you're starting to view with then you're really getting",
    "start": "338270",
    "end": "343819"
  },
  {
    "text": "down to it which is like memory bandwidth and you're then starting say well actually how do I lay this one out",
    "start": "343819",
    "end": "349430"
  },
  {
    "text": "how do I use the cache in a better way but to start playing around with sort of trying to cache friendly stuff when",
    "start": "349430",
    "end": "355849"
  },
  {
    "text": "you're throwing things where you're on malloc is is you're starting the wrong point so my view is that you should be",
    "start": "355849",
    "end": "362840"
  },
  {
    "text": "thinking this in a more structured engineering approach top-down measuring it that way",
    "start": "362840",
    "end": "367880"
  },
  {
    "text": "we're going to go through some of these things I'm going to show you bits and pieces about this one but if there's one thing you take away from this one it's",
    "start": "367880",
    "end": "373069"
  },
  {
    "text": "that and you'll see that again at the end it's not a set of tweaks it's an",
    "start": "373069",
    "end": "379340"
  },
  {
    "text": "engineering process and we're going to have a look at a few things here it's a multi-level problem it's everything from",
    "start": "379340",
    "end": "384650"
  },
  {
    "text": "architecture and design one of the things I would like to stress is domain",
    "start": "384650",
    "end": "390080"
  },
  {
    "text": "knowledge domain knowledge is really useful you can't expect the compiler to",
    "start": "390080",
    "end": "395270"
  },
  {
    "text": "do stuff that you can't communicate to it there's a lot of things that we need to understand about what you",
    "start": "395270",
    "end": "401820"
  },
  {
    "text": "doing how you use it as to whether something is faster or not your access",
    "start": "401820",
    "end": "407280"
  },
  {
    "text": "patterns the SQL is great I like the STL yes it is good but we better use it in the right way there are alternatives to",
    "start": "407280",
    "end": "414480"
  },
  {
    "text": "it it's not always the right thing but where if well used in lot of cases it is",
    "start": "414480",
    "end": "420590"
  },
  {
    "text": "strings so fill mash has just been talking about string handling I'm going",
    "start": "420590",
    "end": "426180"
  },
  {
    "text": "to mention string handling so I will have a few things to say on that area about alternatives memory allocation",
    "start": "426180",
    "end": "433650"
  },
  {
    "text": "mentioned mu semantics and modern machines mod machines are quite different and they're surprisingly",
    "start": "433650",
    "end": "439860"
  },
  {
    "text": "different and compilers also surprising as what they can and can't do profiling",
    "start": "439860",
    "end": "445920"
  },
  {
    "text": "tools very useful they tell you where the problem is they don't tell you how",
    "start": "445920",
    "end": "452010"
  },
  {
    "text": "to solve the problem if you see mem copy at the top which I saw recently on one",
    "start": "452010",
    "end": "457970"
  },
  {
    "text": "well you could try optimizing that mem copy I mean going well if you notice that says mem copy SSE for one it's a",
    "start": "457970",
    "end": "465480"
  },
  {
    "text": "compiler intrinsic the answer is you're unlikely to improve that one stop calling them copy why are you calling",
    "start": "465480",
    "end": "474060"
  },
  {
    "text": "them copy and it's getting you to think about that one it's not just what's there but how do I get rid of it how do",
    "start": "474060",
    "end": "479700"
  },
  {
    "text": "I reduce the number of things I'm doing that so it's actually an engineering process rather than a series of tweaks",
    "start": "479700",
    "end": "486500"
  },
  {
    "text": "no doubt you're familiar with the Donalds North paper from 1974 that",
    "start": "486500",
    "end": "491910"
  },
  {
    "text": "everybody quotes and it says blah blah blah premature optimization blah blah blah we should forget about it 97% of",
    "start": "491910",
    "end": "497970"
  },
  {
    "text": "the time there's another section later on but I want to refer you to which is",
    "start": "497970",
    "end": "505050"
  },
  {
    "text": "this one so that's 1974 that's quite a long time goes 43 years and he's then saying even a few years before that so",
    "start": "505050",
    "end": "511230"
  },
  {
    "text": "we're into 45 years plus so a few years ago Stebbins looked at these Fortran",
    "start": "511230",
    "end": "517140"
  },
  {
    "text": "programs blah blah blah a bit that's important here is how do you produce hand up to something that's as good as",
    "start": "517140",
    "end": "522870"
  },
  {
    "text": "the hand optimized ones we found ourselves running to the same problem the compiler needs to mean the dialogue",
    "start": "522870",
    "end": "529500"
  },
  {
    "text": "with the compiler with the programmer it needs to know properties of the data and",
    "start": "529500",
    "end": "534779"
  },
  {
    "text": "the certain cases can arise etc we couldn't think of a good language in",
    "start": "534779",
    "end": "541170"
  },
  {
    "text": "which to have such a dialogue so back in 1974 he recognized that the domain",
    "start": "541170",
    "end": "549870"
  },
  {
    "text": "knowledge knowing properties of the data and how you use it is absolutely creaky",
    "start": "549870",
    "end": "556379"
  },
  {
    "text": "to this one and you can't put it into the compiled code in a way that the",
    "start": "556379",
    "end": "561720"
  },
  {
    "text": "compiler can do this for you it's your job so two main knowledge very important",
    "start": "561720",
    "end": "569149"
  },
  {
    "text": "modern CPUs are fantastic amazing pieces of kit they've got five billion transistors in them and Counting tiny",
    "start": "570110",
    "end": "577170"
  },
  {
    "text": "little things you know 14 nanometers and I'm just amazed at what they can do they have long pipe lines ten stages or so",
    "start": "577170",
    "end": "584339"
  },
  {
    "text": "because they're splitting things up into lots of sections because each one then can go as fast as possible it means that",
    "start": "584339",
    "end": "591899"
  },
  {
    "text": "pipeline stalls are expensive so a lot of efforts gone into reducing those ones",
    "start": "591899",
    "end": "596970"
  },
  {
    "text": "with branch prediction etc what's interesting is you can get four or even six instructions executing at once so",
    "start": "596970",
    "end": "604019"
  },
  {
    "text": "that's different to how you might think I'm actually really a modern CPU if you",
    "start": "604019",
    "end": "609360"
  },
  {
    "text": "look at the assembler code that's actually a high-level language so if you think EA X is a register it's not it's",
    "start": "609360",
    "end": "615449"
  },
  {
    "text": "actually a variable because it could be any one of a whole pile of pieces of silicon so a common to that one so what",
    "start": "615449",
    "end": "622139"
  },
  {
    "text": "you see in the assembler code is not what's happening inside the CPU and if you think oh well that's got more",
    "start": "622139",
    "end": "628110"
  },
  {
    "text": "instructions well it may be so but actually it depends they may happen in parallel you don't know and it's very",
    "start": "628110",
    "end": "635189"
  },
  {
    "text": "hard to to say so really you have to measure out of order execution it may",
    "start": "635189",
    "end": "640500"
  },
  {
    "text": "not do things in the order you expect it goes while I'm making for memory on that one I'm waiting I'm taught that one here I'll start that one because it doesn't",
    "start": "640500",
    "end": "646769"
  },
  {
    "text": "depend on that one that'll waiting the memory and I'll come back to that one okay so it waits for that it's doing whatever it can is",
    "start": "646769",
    "end": "653939"
  },
  {
    "text": "building a dependency graph in Hardware at runtime okay that's pretty pretty neat",
    "start": "653939",
    "end": "661620"
  },
  {
    "text": "branch prediction this is the the problem that you have a pipeline stalls its guessing where a job is going to go",
    "start": "661620",
    "end": "669330"
  },
  {
    "text": "if you say well I have all this code here and have a branch and you know executing these bits in the middle in",
    "start": "669330",
    "end": "674490"
  },
  {
    "text": "parallel you've reduced that so yeah we're getting lots of instructions here but we saw well that branch now that's",
    "start": "674490",
    "end": "679890"
  },
  {
    "text": "basically just a jump inside the hardware it's an if statement inside a",
    "start": "679890",
    "end": "685050"
  },
  {
    "text": "heart in the hardware and if you ever put an if statement inside the loop you'll know that that slows it down but you've now got one but it's in hardware",
    "start": "685050",
    "end": "691320"
  },
  {
    "text": "the branch predictors are really very good the AMD Rison chip now uses a",
    "start": "691320",
    "end": "697500"
  },
  {
    "text": "neural network for doing branch prediction I've tried to find out more details about that but they claimed some",
    "start": "697500",
    "end": "703800"
  },
  {
    "text": "fancy marketing speak on that so that's how far they're doing this one you know kind of machine learning inside the CPU",
    "start": "703800",
    "end": "709800"
  },
  {
    "text": "to the branch prediction it's that much of an issue speculative execution you can execute multiple things at once and",
    "start": "709800",
    "end": "716640"
  },
  {
    "text": "it picks the right answer hyper threading you can have multiple cores because you can say well actually I'm",
    "start": "716640",
    "end": "723300"
  },
  {
    "text": "waiting for memory but I'm going to just do more some more compute here whilst are waiting for that thing to arrive so it switches between the two you also",
    "start": "723300",
    "end": "731580"
  },
  {
    "text": "have things like vectorization that can go on and compilers can do vectorization for you so you can load things faster",
    "start": "731580",
    "end": "737400"
  },
  {
    "text": "and compute faster 120 800 256 or even up to 512 bits now here's the inside of",
    "start": "737400",
    "end": "746190"
  },
  {
    "text": "a has well nice intel chip just to give you an idea of sort of kind of things that are going on inside here 56 entry",
    "start": "746190",
    "end": "753420"
  },
  {
    "text": "instruction decode queue so the instructions that come in are decoded into simpler instructions and it's got",
    "start": "753420",
    "end": "759810"
  },
  {
    "text": "56 of those that's followed by 192 entry reorder buffer so it takes those simple",
    "start": "759810",
    "end": "765720"
  },
  {
    "text": "instructions those my crops and reorders them so if you thought you know what was going on the answer is you don't and",
    "start": "765720",
    "end": "772590"
  },
  {
    "text": "it's doing whatever it feels like it's then got this eight port 60 entry",
    "start": "772590",
    "end": "778680"
  },
  {
    "text": "unified reservation station thing okay a reservation station is basically like saying a piece of memory that can hold a",
    "start": "778680",
    "end": "786240"
  },
  {
    "text": "register at some point it's not register one register do read two three so EAX or",
    "start": "786240",
    "end": "791310"
  },
  {
    "text": "your register can be any one of these things if you do Zor EAX with vx all it does is go and pick one that's",
    "start": "791310",
    "end": "796800"
  },
  {
    "text": "already 0 so it's basically got up to 60 things it can do at once these can be storing and we've got",
    "start": "796800",
    "end": "804959"
  },
  {
    "text": "things here with shifts we've got brought to branch detectors we got divide we got vector logicals we've got",
    "start": "804959",
    "end": "810630"
  },
  {
    "text": "fuse multiply accumulates and two things for doing load and store addresses there's loads of things inside there the",
    "start": "810630",
    "end": "816660"
  },
  {
    "text": "answer is don't try and guess do measure because modern machines are really really rather important and clever",
    "start": "816660",
    "end": "823890"
  },
  {
    "text": "things much cleverer than I am one of the consequences is you can keep jamming",
    "start": "823890",
    "end": "830010"
  },
  {
    "text": "that silicon in there but there's a problem and the problem is that the memory is out there and the CPU is here",
    "start": "830010",
    "end": "835529"
  },
  {
    "text": "now CPU when it's 40 nanometers yeah you can do lots of stuff like this but trouble is if the memory is out there",
    "start": "835529",
    "end": "841110"
  },
  {
    "text": "you've kind of got to go off down this piece of wire up the other side so the one like nanosecond is about this in a",
    "start": "841110",
    "end": "847740"
  },
  {
    "text": "vacuum it's about that on a circuit board the trouble is you've got to sort of kind of push electrons into this",
    "start": "847740",
    "end": "852779"
  },
  {
    "text": "thing here to try and get this piece of copper to move up and then go down again then when you want to go the other way",
    "start": "852779",
    "end": "857850"
  },
  {
    "text": "up to pull them out so there's always pushing and pulling of electrons which is why it's slow and what this graph",
    "start": "857850",
    "end": "865200"
  },
  {
    "text": "shows you it's one of many doesn't particularly matter is that the red line is you can add CPU great what happens to",
    "start": "865200",
    "end": "872399"
  },
  {
    "text": "RAM speed it hardly has gone up at all as a jump at the end here but this is gigaflops that's gigabytes per second",
    "start": "872399",
    "end": "878250"
  },
  {
    "text": "which we're pretty much limited by memory these days not by CPU so trying",
    "start": "878250",
    "end": "883770"
  },
  {
    "text": "to save CPU instructions is not the way to get optimization make sure that you use the memory correctly is the way to",
    "start": "883770",
    "end": "890339"
  },
  {
    "text": "get optimization in most modern things the consequence of this is 80 or 90",
    "start": "890339",
    "end": "895649"
  },
  {
    "text": "percent of the time the CPU is actually waiting for memory it says on top or your thing as measures yeah I'm hundred",
    "start": "895649",
    "end": "901709"
  },
  {
    "text": "percent busy what it's actually doing is just waiting for the memory and if you've only got 10 or 20 percent of the",
    "start": "901709",
    "end": "907529"
  },
  {
    "text": "time is actually being spent with instructions if you apply all the compiler flags in the world you can't",
    "start": "907529",
    "end": "913470"
  },
  {
    "text": "only really you can only add a save little bit on that so your 10% might down to 9% you save 1% of your run time",
    "start": "913470",
    "end": "920670"
  },
  {
    "text": "by adding all those extra instructions in because you're dealing with a memory the compiler can only do with a bit that",
    "start": "920670",
    "end": "927510"
  },
  {
    "text": "10 to 20 the 89% of memory that's your job",
    "start": "927510",
    "end": "932560"
  },
  {
    "text": "in order to make these things go faster we have these wonderful cache things and we have lots of those so modern CPUs",
    "start": "932560",
    "end": "939290"
  },
  {
    "text": "have got lots of caches in here they're nice and fast at doing this vertical kind of stuff here they're very bad",
    "start": "939290",
    "end": "945980"
  },
  {
    "text": "actually at doing the horizontal thing so I'm not going to touch on multi-threading which is really the",
    "start": "945980",
    "end": "952520"
  },
  {
    "text": "horizontal cache thing because that's really a disaster from performance point of view but one two three cycles 100",
    "start": "952520",
    "end": "959000"
  },
  {
    "text": "three cycles you've got a factor of about a hundred two orders of magnitude between accessing l1 cache and accessing",
    "start": "959000",
    "end": "964760"
  },
  {
    "text": "main memory could be even worse than that if it's off port so this is why using the memory effectively is really",
    "start": "964760",
    "end": "971060"
  },
  {
    "text": "important here's a lovely picture from Sergei in that Japan the trimco this is",
    "start": "971060",
    "end": "979360"
  },
  {
    "text": "time across here and this is in orders of magnitude there are six orders of magnitude between 10 to the 0 and 10 to",
    "start": "979360",
    "end": "986390"
  },
  {
    "text": "the 6 here just one thing to point out to you is that concurrency can offer you",
    "start": "986390",
    "end": "994580"
  },
  {
    "text": "about one order of magnitude you've got a factor of 100 between here and here in",
    "start": "994580",
    "end": "1003850"
  },
  {
    "text": "order to try and make that up with extra CPUs you need 100 CPUs minimally and",
    "start": "1003850",
    "end": "1008890"
  },
  {
    "text": "that's before Amdahl's law comes and gets you so don't try and throw multiple threads out this to try and solve your",
    "start": "1008890",
    "end": "1014710"
  },
  {
    "text": "problem try and solve it by actually using the memory that you've got correctly so make a single thread go fast before you start having extra",
    "start": "1014710",
    "end": "1021130"
  },
  {
    "text": "threads we've got everything here from less than one cycle for simple register dredges",
    "start": "1021130",
    "end": "1027670"
  },
  {
    "text": "because you're running multiple ones I'm not going to go through all this one because there's lots of staff we got branch detection here one or two if you",
    "start": "1027670",
    "end": "1034870"
  },
  {
    "text": "get it right 10 to 20 if you don't the divide that we talked about here division it's in bits",
    "start": "1034870",
    "end": "1040870"
  },
  {
    "text": "it's kind of slow yeah you don't really want to do too many divisions if you want to go first if that's what you need to do that's what you need to do there",
    "start": "1040870",
    "end": "1047678"
  },
  {
    "text": "of the order is the same as a function call an indirect function call for a",
    "start": "1047679",
    "end": "1053230"
  },
  {
    "text": "pointer or virtual like this with extra parameters in it 30 to 60 that's about",
    "start": "1053230",
    "end": "1058390"
  },
  {
    "text": "the same as a reading from the l3 cache so function calls do hurt you from a",
    "start": "1058390",
    "end": "1065140"
  },
  {
    "text": "performance point of view so inlining is your friend at this point more important",
    "start": "1065140",
    "end": "1071380"
  },
  {
    "text": "main ram read here 100 hundred fifty three hundred whatever you feel like that notice here allocation and de-allocation",
    "start": "1071380",
    "end": "1078240"
  },
  {
    "text": "two hundred to five hundred cycles that's malik that's the direct cost of",
    "start": "1078240",
    "end": "1083710"
  },
  {
    "text": "malik that's the i'm going to go over there and going to go and look for some memory oh I found some actually Malek is",
    "start": "1083710",
    "end": "1090730"
  },
  {
    "text": "really a way of saying please go and find me something that's not in the cache so nobody's using it's not in the",
    "start": "1090730",
    "end": "1097210"
  },
  {
    "text": "cache as soon as you try using it bang what do you get oh you're going to get one of these you're going to start doing main Ram reads that you've not had",
    "start": "1097210",
    "end": "1103510"
  },
  {
    "text": "before because it's nice cold memory so malloc is nice and slow so let's see if",
    "start": "1103510",
    "end": "1110020"
  },
  {
    "text": "we can get rid of that kernel calls 300-500 context switch so this would be",
    "start": "1110020",
    "end": "1116920"
  },
  {
    "text": "on the concurrent one uh that's a thousand or so but that's just going into the kernel and doing the scheduling coming out again but the problem with",
    "start": "1116920",
    "end": "1123370"
  },
  {
    "text": "the with the switch is that as soon as the thread comes around it goes right okay now what was I doing bang",
    "start": "1123370",
    "end": "1128590"
  },
  {
    "text": "completely cold cash because it's all somebody else's stuff so you're then going miss miss miss miss miss so you",
    "start": "1128590",
    "end": "1134320"
  },
  {
    "text": "can end up with thousands of cycles if not tens of thousands of cycles for context switches so there's just an idea",
    "start": "1134320",
    "end": "1140500"
  },
  {
    "text": "to to give you an idea of the range of things that you can have measurement I",
    "start": "1140500",
    "end": "1146550"
  },
  {
    "text": "mentioned it being important so let's see if we can have measurement on our",
    "start": "1146550",
    "end": "1151630"
  },
  {
    "text": "big o-notation here's some wonderfully artistically drawn things like this you",
    "start": "1151630",
    "end": "1157000"
  },
  {
    "text": "may have order ends straight-line order N squared which is a really not nice",
    "start": "1157000",
    "end": "1163240"
  },
  {
    "text": "order log n which is sort of kind of flatter an order one remember these are",
    "start": "1163240",
    "end": "1168780"
  },
  {
    "text": "asymptotic as n gets very large and there's a multiplicative factor that's",
    "start": "1168780",
    "end": "1173860"
  },
  {
    "text": "involved in here as well what you may find is that for small numbers like this it doesn't matter linear search on ten",
    "start": "1173860",
    "end": "1182920"
  },
  {
    "text": "items is probably faster than binary search or as fast you're not going to notice the difference so dunno how big",
    "start": "1182920",
    "end": "1190360"
  },
  {
    "text": "your n is and also check see how big your K is you could say I do really really good hashing but by the",
    "start": "1190360",
    "end": "1196450"
  },
  {
    "text": "way my hash function takes me half an hour to calculate that's not a good use of your time also if you are going to",
    "start": "1196450",
    "end": "1204460"
  },
  {
    "text": "measure one of the things that I found and I have to keep in mind myself is that the optimizers oh three for",
    "start": "1204460",
    "end": "1210430"
  },
  {
    "text": "instance are really good at getting rid of your code so you end up benchmarking something you not think it's doing",
    "start": "1210430",
    "end": "1216520"
  },
  {
    "text": "because you calculate a result in it's throwing it away so so do do that so do make sure that",
    "start": "1216520",
    "end": "1222610"
  },
  {
    "text": "you don't throw that away use the result it'd be nice if you could have everything faster that we can't and what",
    "start": "1222610",
    "end": "1231520"
  },
  {
    "text": "you end up doing is making trade-offs and you make some things faster than others what's important and this means",
    "start": "1231520",
    "end": "1238600"
  },
  {
    "text": "knowing your operational profile this is part of that domain knowledge what do you want to be first and what are you",
    "start": "1238600",
    "end": "1244240"
  },
  {
    "text": "prepared to make slower to make that one faster usually 8020 kind of stuff comes",
    "start": "1244240",
    "end": "1249610"
  },
  {
    "text": "into this one and classic example making reads fast and write slow in a read",
    "start": "1249610",
    "end": "1255250"
  },
  {
    "text": "dominated system tools plenty of them",
    "start": "1255250",
    "end": "1260260"
  },
  {
    "text": "around I've mentioned mostly these are Linux ones there are some equivalent ones around on Windows stuff and it",
    "start": "1260260",
    "end": "1267280"
  },
  {
    "text": "depends you can say I have an unmodified application so I can take the the binary as it is and run that one so I can use",
    "start": "1267280",
    "end": "1272830"
  },
  {
    "text": "perf all the things like old profile top yes that's useful just to see roughly",
    "start": "1272830",
    "end": "1278620"
  },
  {
    "text": "what's going on io type I've used that quite often to see what's happening with input and output the usual vmstat io",
    "start": "1278620",
    "end": "1285460"
  },
  {
    "text": "stat force are all those kind of things or even just bash and just say just timeless and it's surprising surprising",
    "start": "1285460",
    "end": "1293320"
  },
  {
    "text": "useful just if I make a change does it go fast or not your Vantage it's full",
    "start": "1293320",
    "end": "1298600"
  },
  {
    "text": "speed it's often based on sampling you can usually use large loads with it or",
    "start": "1298600",
    "end": "1304120"
  },
  {
    "text": "something of reasonable size commercial ones Intel have some you can modify your",
    "start": "1304120",
    "end": "1309400"
  },
  {
    "text": "application you can say I'm going to put coverage or profiling in there I can write my own stuff I can put in chrono",
    "start": "1309400",
    "end": "1316810"
  },
  {
    "text": "high resolution clock for sections and if code that I'm trying to do that there boost has one you can write your own",
    "start": "1316810",
    "end": "1323520"
  },
  {
    "text": "benchmarking stuff Google benchmark allows you to do those once a micro benchmarks you can also use simulators so the",
    "start": "1323520",
    "end": "1330100"
  },
  {
    "text": "valgrind set of tools valgrind cashman's etc they slow it down by a factor of 10 but you get very very",
    "start": "1330100",
    "end": "1336670"
  },
  {
    "text": "good insight so an example with cash grins is that you can say all right okay I've simulated this one I can see",
    "start": "1336670",
    "end": "1343180"
  },
  {
    "text": "where the cache misses are come because it actually shows you which line they're on and whether it's an l1 cache miss or",
    "start": "1343180",
    "end": "1349240"
  },
  {
    "text": "l3 cache miss so it's well worth looking those to understand data layout and",
    "start": "1349240",
    "end": "1358380"
  },
  {
    "text": "performance so this is something you'll find the games industry they refer to this one as array of structs instruct to",
    "start": "1358380",
    "end": "1364060"
  },
  {
    "text": "the race and it actually comes up in lots of places do you say I basically have my objects like this and I have a",
    "start": "1364060",
    "end": "1369670"
  },
  {
    "text": "vector array of those ones like that do I store in rows or do I store them in columns well it depends and it may be",
    "start": "1369670",
    "end": "1379210"
  },
  {
    "text": "that you end up actually having to store both for performance you may have may have to duplicate your data and so there",
    "start": "1379210",
    "end": "1384850"
  },
  {
    "text": "are people doing memory analytics who have a row and a column store if you store it by row like this array of",
    "start": "1384850",
    "end": "1391630"
  },
  {
    "text": "struts and you go through and pull these ones out then actually you're just jumping around in the memory you're not",
    "start": "1391630",
    "end": "1396970"
  },
  {
    "text": "using very very well if on the other hand I just store in columns now I do this you'll find that is now we're",
    "start": "1396970",
    "end": "1403570"
  },
  {
    "text": "iterating through this in a dense linear fashion the first one has a thing called",
    "start": "1403570",
    "end": "1409720"
  },
  {
    "text": "read amplification because it says well I'm going to read this entire this entire row like this the memory is read",
    "start": "1409720",
    "end": "1415360"
  },
  {
    "text": "is 64 bytes at a time but actually if I'm only using four bytes out of 64 bytes I'm using 1/16 of the memory",
    "start": "1415360",
    "end": "1421990"
  },
  {
    "text": "bandwidth actually for what I'm really using this is called read amplification there's a similar thing for write",
    "start": "1421990",
    "end": "1427570"
  },
  {
    "text": "amplification when I have to read all things put one byte in to write it all back again that's you're just throwing",
    "start": "1427570",
    "end": "1433630"
  },
  {
    "text": "away memory bandwidth that's fine if you only do it occasionally but if that's what you're doing all the time you're wasting it if you go to this one here",
    "start": "1433630",
    "end": "1440140"
  },
  {
    "text": "now we're going to dense linear pattern like this the compiler goes through look I can vectorize this so we can use the",
    "start": "1440140",
    "end": "1446500"
  },
  {
    "text": "sse or AVX instructions so instead of picking them up add add add like this",
    "start": "1446500",
    "end": "1452050"
  },
  {
    "text": "four bytes at a time so these two bits it can say well actually look I can pick up four maybe even eight bytes at a time",
    "start": "1452050",
    "end": "1459360"
  },
  {
    "text": "so GCC will like this visual studio is similar it's",
    "start": "1459360",
    "end": "1465110"
  },
  {
    "text": "a dense linear access pattern so if you want performance a dense linear access",
    "start": "1465110",
    "end": "1470690"
  },
  {
    "text": "pattern is a really good way to go nice and fast the generated code for that",
    "start": "1470690",
    "end": "1476470"
  },
  {
    "text": "well if I do owe to on this one you'll see ad so just pull that one thing here",
    "start": "1476470",
    "end": "1483020"
  },
  {
    "text": "moves four bytes on and does the carries on going here with the vectorization it's doing it in the XML and doing",
    "start": "1483020",
    "end": "1490130"
  },
  {
    "text": "sixteen bytes at a time two and a half times faster online online little laptop",
    "start": "1490130",
    "end": "1495710"
  },
  {
    "text": "here the hardware may even be prefetching that for you so it may it",
    "start": "1495710",
    "end": "1501890"
  },
  {
    "text": "may go faster than you think not that one and that's now definitely memory bandwidth limited rows at a time columns",
    "start": "1501890",
    "end": "1511640"
  },
  {
    "text": "at a time hmm which do you choose well actually you may find that there is",
    "start": "1511640",
    "end": "1516710"
  },
  {
    "text": "a compromise between this one so one of the things you can do is say well actually look here I had all these",
    "start": "1516710",
    "end": "1522770"
  },
  {
    "text": "fields like this I had a and F and lots of other things like that if I'm actually only interested in one or two",
    "start": "1522770",
    "end": "1528860"
  },
  {
    "text": "of these fields the really common fields why don't I do store those one separately so if I do this I say well",
    "start": "1528860",
    "end": "1535400"
  },
  {
    "text": "actually look these are the most common fields like that I'll store those separately from these ones here have the",
    "start": "1535400",
    "end": "1541880"
  },
  {
    "text": "hot data and the cold data and now my hot data is much denser in memory and",
    "start": "1541880",
    "end": "1547240"
  },
  {
    "text": "not I have got my read amplification problems so the columns bit Hey well",
    "start": "1547240",
    "end": "1553970"
  },
  {
    "text": "that's me I get to do that I'm now the developer that I get to do that one because that's my domain knowledge the",
    "start": "1553970",
    "end": "1561050"
  },
  {
    "text": "rows on the other hand are done for you by the hardware because it says look I can do that in a cache line so it's",
    "start": "1561050",
    "end": "1567710"
  },
  {
    "text": "keeping things in memory that way so the hottest of the hot is now being you're",
    "start": "1567710",
    "end": "1572930"
  },
  {
    "text": "now concentrating on that because your cache is full of the hottest things and nothing else and this is halfway between",
    "start": "1572930",
    "end": "1579350"
  },
  {
    "text": "rows and columns which is sort of kind of like groups arose and groups of columns so you may not have to choose",
    "start": "1579350",
    "end": "1586640"
  },
  {
    "text": "one or the other but it can be worth splitting this one up to do that",
    "start": "1586640",
    "end": "1592570"
  },
  {
    "text": "one of the classic techniques strength reduction and I mentioned you've you've",
    "start": "1592570",
    "end": "1597890"
  },
  {
    "text": "got memory cut I've got mem copy in there well how do we eliminate it first",
    "start": "1597890",
    "end": "1603650"
  },
  {
    "text": "thing is do I actually need to make that call how could I get rid of that call if I can't get rid of that call maybe I can",
    "start": "1603650",
    "end": "1610070"
  },
  {
    "text": "reduce the number of times I can do it maybe I can cache things maybe I can just do bigger things I can roll them up",
    "start": "1610070",
    "end": "1615710"
  },
  {
    "text": "together as a batch and say well actually why am i allocating one by two that a 1 integer at a time sector for",
    "start": "1615710",
    "end": "1622280"
  },
  {
    "text": "instance puts them all together and says oh I'm going to allocate a chunk of these now I'm going to Kate twice as many next time so the overhead of memory",
    "start": "1622280",
    "end": "1629660"
  },
  {
    "text": "allocation and vector is amortized across that one loop unrolling is",
    "start": "1629660",
    "end": "1635390"
  },
  {
    "text": "another example of the overhead of the test on the loop how do you reduce these things they're classic ones the old",
    "start": "1635390",
    "end": "1642820"
  },
  {
    "text": "divider shifting and Ray likes this one so strength reduction is one of these",
    "start": "1642820",
    "end": "1649580"
  },
  {
    "text": "big ones and so I will mention that there move semantics",
    "start": "1649580",
    "end": "1655670"
  },
  {
    "text": "this is super Russell Evans stuff cheaper bus zero three couldn't tell the",
    "start": "1655670",
    "end": "1661010"
  },
  {
    "text": "difference in temporaries and non temporaries so what you got there is if you do string 1 plus string 2 plus",
    "start": "1661010",
    "end": "1667550"
  },
  {
    "text": "string 3 you're creating temporaries you're allocating memory potentially depending on the sso things like this",
    "start": "1667550",
    "end": "1674540"
  },
  {
    "text": "you may be allocating memory and then just changing his temporary changing his temporary you've got a lot of stuff going on there",
    "start": "1674540",
    "end": "1680870"
  },
  {
    "text": "and you couldn't say well actually I want to take this temporary and modify it you also then couldn't movie you had",
    "start": "1680870",
    "end": "1688640"
  },
  {
    "text": "to copy the temporary in the end so that was nice and slow C++ 11 introduced move",
    "start": "1688640",
    "end": "1696160"
  },
  {
    "text": "Auto pointer with something in zero 3 which was an attempt to do move semantics and language it didn't allow",
    "start": "1696160",
    "end": "1702440"
  },
  {
    "text": "you to do move semantics unique pointer is taken over from that and that does actually do move semantics yay",
    "start": "1702440",
    "end": "1709150"
  },
  {
    "text": "and we've added r-value references move constructors move operations just for a",
    "start": "1709150",
    "end": "1714650"
  },
  {
    "text": "basic kind of introduction to this one on the left here what we have to do",
    "start": "1714650",
    "end": "1720650"
  },
  {
    "text": "before with this one where this is a buffer here with a part so this an X with a pointer to an allocated",
    "start": "1720650",
    "end": "1727440"
  },
  {
    "text": "buffer if I wanted to move this one I couldn't I have to make a copy which",
    "start": "1727440",
    "end": "1732809"
  },
  {
    "text": "means allocate copy all the bytes across move the pointer and then delete the original so you end up with an allocate",
    "start": "1732809",
    "end": "1738690"
  },
  {
    "text": "in the copy and add er Kate this is a real waste whereas in the move world you",
    "start": "1738690",
    "end": "1744750"
  },
  {
    "text": "say take that one just move the pointer yay no allocations you just got essentially a couple of",
    "start": "1744750",
    "end": "1750780"
  },
  {
    "text": "assignments to do it so where does it happen well in in all of these ones here",
    "start": "1750780",
    "end": "1758010"
  },
  {
    "text": "if I'm returning by value all of these ones here are then going to be copies in C plus 11 this one here is a returning a",
    "start": "1758010",
    "end": "1764940"
  },
  {
    "text": "temporary therefore that's a move it's called the move constructor this is an l-value",
    "start": "1764940",
    "end": "1770190"
  },
  {
    "text": "so LHS here has got a name and therefore Streeters non-value won't move from this",
    "start": "1770190",
    "end": "1775590"
  },
  {
    "text": "one but you can be explicit and say please move from it here be dragons if you're not careful because you've moved",
    "start": "1775590",
    "end": "1781440"
  },
  {
    "text": "from it you now have an object which is in a state that you're not quite sure what it is it's a move from State move",
    "start": "1781440",
    "end": "1787800"
  },
  {
    "text": "semantics very useful how you implement them well notice that it's so these are",
    "start": "1787800",
    "end": "1794010"
  },
  {
    "text": "in this case what I've got here is just pointer assignments so just move the point copy the point across and all that",
    "start": "1794010",
    "end": "1799440"
  },
  {
    "text": "one out the move assignments has to clear the left-hand side first notice I've also done no except no",
    "start": "1799440",
    "end": "1807179"
  },
  {
    "text": "except here is important for libraries for things like making sure that your",
    "start": "1807179",
    "end": "1813120"
  },
  {
    "text": "vector can move things not actually in to copy them which leads us also onto",
    "start": "1813120",
    "end": "1820980"
  },
  {
    "text": "the subject of resource management so very briefly you may well have come across the rule of three which says okay",
    "start": "1820980",
    "end": "1827760"
  },
  {
    "text": "if I have any of the copy constructor the copy assignment or the destructor in",
    "start": "1827760",
    "end": "1833130"
  },
  {
    "text": "my class I need all three in order to make it work correctly C plus 11 we add",
    "start": "1833130",
    "end": "1839100"
  },
  {
    "text": "a then move constructor move Simon this became the rule of five this became really boring and it's meant that you",
    "start": "1839100",
    "end": "1845070"
  },
  {
    "text": "had did a lot of stuff and actually now the rule of zero is the way to go and also from the performance point of view",
    "start": "1845070",
    "end": "1850770"
  },
  {
    "text": "which is do not do any resource management in your classes use of standard library use things that copy",
    "start": "1850770",
    "end": "1856950"
  },
  {
    "text": "and move correctly and then you don't have to it saves you a lot of time and it saves",
    "start": "1856950",
    "end": "1863010"
  },
  {
    "text": "you a lot of heartache it also can mean that you end up having faster code",
    "start": "1863010",
    "end": "1868530"
  },
  {
    "text": "interesting thing a discussion was just having earlier is that if you have a class with the unique pointer inside it",
    "start": "1868530",
    "end": "1874380"
  },
  {
    "text": "just a unique pointer it then becomes move only which means that you can't go",
    "start": "1874380",
    "end": "1880110"
  },
  {
    "text": "around and just accidentally copying it and copying data using got pointers of megabyte of data you wanna copy that",
    "start": "1880110",
    "end": "1886140"
  },
  {
    "text": "accidentally so now move only you can now have to make an explicit copy so you've stopped the accidental copying a",
    "start": "1886140",
    "end": "1897660"
  },
  {
    "text": "quick example here of taking 10 million entry 10 million integers and putting",
    "start": "1897660",
    "end": "1902970"
  },
  {
    "text": "into a container essentially doing push back or insert into them in sorted order",
    "start": "1902970",
    "end": "1909830"
  },
  {
    "text": "vector without any form of optimization does 25 allocations because that's now",
    "start": "1909950",
    "end": "1916140"
  },
  {
    "text": "that's a 64 megabytes plus than the 32 that was before plus the 4 but all the way down to here so that's the 25",
    "start": "1916140",
    "end": "1922530"
  },
  {
    "text": "allocations Dec 78,000 because there's 512 byte pages but if you notice these",
    "start": "1922530",
    "end": "1928560"
  },
  {
    "text": "other ones list an order set and set it at 10 million or so the reason that unordered set is higher than that one",
    "start": "1928560",
    "end": "1934860"
  },
  {
    "text": "because it's got buckets and other things to allocate if there are thousands of cycles guess what the",
    "start": "1934860",
    "end": "1942300"
  },
  {
    "text": "performance of those is going to be you're not going to do very well with these ones if you do a lot of allocation",
    "start": "1942300",
    "end": "1947820"
  },
  {
    "text": "like this so be careful with the STL and how you might use that we can optimize",
    "start": "1947820",
    "end": "1953460"
  },
  {
    "text": "it vector instead of the 25 allocations I can reserve it and that now says right",
    "start": "1953460",
    "end": "1960720"
  },
  {
    "text": "ok I can reserve 10 million and I get one allocation and notice I get that improvement here and it just has exactly",
    "start": "1960720",
    "end": "1968400"
  },
  {
    "text": "the right amount of memory rather than 64 Meg's it's 40 Meg's so reserve one well well-known way to use vector it's",
    "start": "1968400",
    "end": "1975840"
  },
  {
    "text": "also safe safer than just saying it's an array of this size because if you now push an extra element it will still work",
    "start": "1975840",
    "end": "1981390"
  },
  {
    "text": "it just has to go and reallocate it just saves you the time getting there a set",
    "start": "1981390",
    "end": "1987840"
  },
  {
    "text": "if you're going to put things in here the domain knowledge I've got here is",
    "start": "1987840",
    "end": "1992940"
  },
  {
    "text": "I mean putting these in a 30 - order in sorted order so if I just insert them",
    "start": "1992940",
    "end": "1998760"
  },
  {
    "text": "it'll start the top it's a balanced binary tree so we'll have to go and find this one here there's ten million of",
    "start": "1998760",
    "end": "2003980"
  },
  {
    "text": "those then we've got log to base - which is what - twenty-three twenty-four",
    "start": "2003980",
    "end": "2009290"
  },
  {
    "text": "something around that things of how many comparisons I've gotta do to get there for the last ones number of allocations",
    "start": "2009290",
    "end": "2015910"
  },
  {
    "text": "etc well I could say well why don't I start somewhere else you can provide a",
    "start": "2015910",
    "end": "2020990"
  },
  {
    "text": "hint I can give it exactly the wrong hint and say why don't you start the beginning and put essentially I'm saying",
    "start": "2020990",
    "end": "2026510"
  },
  {
    "text": "you know that ten million why do you start at zero down here and see where you go and then how's it going go all",
    "start": "2026510",
    "end": "2032540"
  },
  {
    "text": "the way through the tree which is why it's lower if on the other hand you say insert at the end well here we go much",
    "start": "2032540",
    "end": "2038030"
  },
  {
    "text": "improved because it's now just at that one end you don't have you cut down all that search the 24 to go so watch out",
    "start": "2038030",
    "end": "2045290"
  },
  {
    "text": "for things like hints just a few things about standard containers that's for the rights remember that this was also about",
    "start": "2045290",
    "end": "2052580"
  },
  {
    "text": "trying to reduce the number of allocations because we know that allocations are will often dominate",
    "start": "2052580",
    "end": "2058570"
  },
  {
    "text": "finding items lots of stuff in in data structures here's a random look up into some of",
    "start": "2058570",
    "end": "2066470"
  },
  {
    "text": "these ones here what happens we use standard find whatever use the STL incorrectly and what happens if I use the containers correctly so I've got a",
    "start": "2066470",
    "end": "2072950"
  },
  {
    "text": "bunch of things like this I'm pulling out some random values and number out of that so I've got ten million I gotta do",
    "start": "2072950",
    "end": "2080330"
  },
  {
    "text": "100 finds generate 100 random values I'm gonna push back here's my timing loop",
    "start": "2080330",
    "end": "2087220"
  },
  {
    "text": "standard find this is the kelie optimizer not to eliminate this one here",
    "start": "2087220",
    "end": "2093409"
  },
  {
    "text": "because otherwise it just throws away the results of that that's what that's",
    "start": "2093410",
    "end": "2098960"
  },
  {
    "text": "for the linear find works well on vector and Dec list is relatively poor",
    "start": "2098960",
    "end": "2106640"
  },
  {
    "text": "performer I would and for exactly the same reasons that Phil Nash mentioned this is like pointer chasing it also",
    "start": "2106640",
    "end": "2113420"
  },
  {
    "text": "doesn't use the memory bandwidth very well because we've got 24 bytes per elements rather than 4 bytes per element",
    "start": "2113420",
    "end": "2120020"
  },
  {
    "text": "so it's eliminates memory bandwidth limited unordered set is actually quite good on this one because it's actually",
    "start": "2120020",
    "end": "2125720"
  },
  {
    "text": "in terminator singly-linked list set is not particularly good at all because it's got my out more pointers to each of us",
    "start": "2125720",
    "end": "2133030"
  },
  {
    "text": "so that's a linear search but we know really that an ordered set and set you shouldn't be doing that",
    "start": "2133030",
    "end": "2138380"
  },
  {
    "text": "really please don't do that so let's have a lot more of these ones here",
    "start": "2138380",
    "end": "2144010"
  },
  {
    "text": "four million lookups and let's actually use the Container one and now we're in the right sort of kind of place ten",
    "start": "2144010",
    "end": "2150770"
  },
  {
    "text": "thousand times faster excellent here so that's what we want in the first place domain knowledge comes up in the moment",
    "start": "2150770",
    "end": "2158839"
  },
  {
    "text": "which one will do with vector in a moment hashing hashing can be a lot of",
    "start": "2158839",
    "end": "2165380"
  },
  {
    "text": "fun there's some optimization about the hash function and hashing functions you",
    "start": "2165380",
    "end": "2171950"
  },
  {
    "text": "need to know about how well old is distributed how well that they they split things up",
    "start": "2171950",
    "end": "2176990"
  },
  {
    "text": "well the GCC library says if you give me an int it knows ah why do i I don't need",
    "start": "2176990",
    "end": "2182630"
  },
  {
    "text": "to ash against I'll just use the int so actually does no hashing at all on int and if I try to Prime in Tashia",
    "start": "2182630",
    "end": "2189080"
  },
  {
    "text": "myself that basically does the same thing it gives that result if I say a float instead it goes on r2 I don't know",
    "start": "2189080",
    "end": "2196790"
  },
  {
    "text": "about that so if I use float you can see it's know to be slower but if I go back to a float with a hash function that's",
    "start": "2196790",
    "end": "2202640"
  },
  {
    "text": "just the conversion of that one it we're back in the same thing so watch out for your hash function for doing a lot of",
    "start": "2202640",
    "end": "2207920"
  },
  {
    "text": "these things you can end up with a slower lookup table than you wanted that",
    "start": "2207920",
    "end": "2215089"
  },
  {
    "text": "hash by the way is an SMD one a hash that just takes the bytes one other time and does a an exclusive or and multiply",
    "start": "2215089",
    "end": "2221510"
  },
  {
    "text": "I mentioned how do we get faster on these things well vector and deck we",
    "start": "2221510",
    "end": "2226700"
  },
  {
    "text": "know domain knowledge tells us we put these in orders no now got a sorted vector ah maybe we can do binary lookup",
    "start": "2226700",
    "end": "2233810"
  },
  {
    "text": "so binary search or lower bound my research just gives you back true or false lower bound just gives you back an",
    "start": "2233810",
    "end": "2239900"
  },
  {
    "text": "iterator and notice that vector is actually faster than set for that particular one it's dense in memory deck",
    "start": "2239900",
    "end": "2247880"
  },
  {
    "text": "is not quite as fast because they're pages a memory you have to go through a vector of pointers to find it",
    "start": "2247880",
    "end": "2253700"
  },
  {
    "text": "so again this is just the use of domain knowledge which leads me on to this",
    "start": "2253700",
    "end": "2261670"
  },
  {
    "text": "there's a lot you probably know that you can't put directly into your code and",
    "start": "2261670",
    "end": "2268490"
  },
  {
    "text": "this is what real make the biggest difference so what are the relative probability of these operations how many reads how many writes what do you do",
    "start": "2268490",
    "end": "2274910"
  },
  {
    "text": "that thing you need to understand in order to say well these things need to go quickly",
    "start": "2274910",
    "end": "2280579"
  },
  {
    "text": "don't try make everything the same I had one one client that was trying to make",
    "start": "2280579",
    "end": "2285890"
  },
  {
    "text": "everything look the same they were tripling this was in telephony and they were trying to save everything so we're",
    "start": "2285890",
    "end": "2291829"
  },
  {
    "text": "trying to do a complete do a failover and duplication or everything else and and I went well guys there's a reason",
    "start": "2291829",
    "end": "2299059"
  },
  {
    "text": "that you can't go this fast is because you're trying to say to do the same level of safety on something here that",
    "start": "2299059",
    "end": "2307220"
  },
  {
    "text": "just says you've got an extra you've used an extra kilobyte of data on your mobile plan as to that 911 emergency",
    "start": "2307220",
    "end": "2313339"
  },
  {
    "text": "call over there that's really not the way to go fast what's the worst thing",
    "start": "2313339",
    "end": "2318530"
  },
  {
    "text": "that can happen if you lose this well somebody gets an extra kilobyte actually it's not worth trying to save that too",
    "start": "2318530",
    "end": "2323990"
  },
  {
    "text": "much 911 you stopped the entire world to to get that emergency call through so",
    "start": "2323990",
    "end": "2329780"
  },
  {
    "text": "don't treat everything the same what's good enough that's also something that",
    "start": "2329780",
    "end": "2334970"
  },
  {
    "text": "people seem to forget that faster is better well actually saving one millisecond off the startup time your program by optimizing your configuration",
    "start": "2334970",
    "end": "2342260"
  },
  {
    "text": "reading to do things in the right way with string views because you've saved a few allocations well probably not",
    "start": "2342260",
    "end": "2348170"
  },
  {
    "text": "necessary what do you know about the data the size how long are these how",
    "start": "2348170",
    "end": "2354109"
  },
  {
    "text": "long are your keys so you're going to be using strings that fit into SSO are they all variable length or a little all the",
    "start": "2354109",
    "end": "2360200"
  },
  {
    "text": "same size if you're using product codes at all six or eight long or your ISP ends you know what size they are why you",
    "start": "2360200",
    "end": "2366500"
  },
  {
    "text": "using dynamic data structures when you know how big they are what's the distribution in your data what are you",
    "start": "2366500",
    "end": "2371720"
  },
  {
    "text": "doing you do batch so LTP these are the things that will give you more games than just trying to use the STL",
    "start": "2371720",
    "end": "2377720"
  },
  {
    "text": "or compiler flags I've got six questions",
    "start": "2377720",
    "end": "2382940"
  },
  {
    "text": "that I'm going to or go through just to say well okay these are things which are very",
    "start": "2382940",
    "end": "2389000"
  },
  {
    "text": "important to understand from a performance point of view about the data the way you use it primary key lookup",
    "start": "2389000",
    "end": "2396920"
  },
  {
    "text": "non-primary Kugler key look up range scans rewrite working sets and",
    "start": "2396920",
    "end": "2401990"
  },
  {
    "text": "consistency so primary key access most common form of access database primary",
    "start": "2401990",
    "end": "2409190"
  },
  {
    "text": "key that's a classic example so inaudible map or map classic example",
    "start": "2409190",
    "end": "2414380"
  },
  {
    "text": "I'm just looking that thing up I'm looking up a financial instrument by a number I'm looking at the customer lots",
    "start": "2414380",
    "end": "2420260"
  },
  {
    "text": "of things like that you can use hashing so that's order one you can use binary search or linear search you really only",
    "start": "2420260",
    "end": "2426800"
  },
  {
    "text": "need an operator equals equals to do this there's no ordering you don't need anything else you can just say it's that",
    "start": "2426800",
    "end": "2432170"
  },
  {
    "text": "one or it's not that one it's very straightforward it allows you to partition things if you come to a",
    "start": "2432170",
    "end": "2437600"
  },
  {
    "text": "conference like this you may say well actually okay people with surnames a2l going to this",
    "start": "2437600",
    "end": "2444440"
  },
  {
    "text": "queue people with m20 here perfect partitioning fantastic don't need the two don't need to talk you get",
    "start": "2444440",
    "end": "2451460"
  },
  {
    "text": "almost perfect scalability so primary key lookup absolutely wonderful great",
    "start": "2451460",
    "end": "2456520"
  },
  {
    "text": "product catalog your typical even up products by individual numbers their",
    "start": "2456520",
    "end": "2461900"
  },
  {
    "text": "customer records and want that customer web sessions you don't want to go and",
    "start": "2461900",
    "end": "2467480"
  },
  {
    "text": "see anybody else's web sessions you're not iterating across them all no SQL kind of key value stores memcache for",
    "start": "2467480",
    "end": "2473060"
  },
  {
    "text": "instance doesn't even have a way of iterating across keys you can only look something up you can't find out all the keys or voice rate through them that's",
    "start": "2473060",
    "end": "2480860"
  },
  {
    "text": "the most common one non primary key access so what do you need in terms of",
    "start": "2480860",
    "end": "2489850"
  },
  {
    "text": "looking things up not by the primary key show me all accounts with a balance",
    "start": "2489850",
    "end": "2495800"
  },
  {
    "text": "greater than 100 so often looking at by value not by the key in the databases is",
    "start": "2495800",
    "end": "2501110"
  },
  {
    "text": "secondary index if you're building these in memory you may need some additional maps that point into other places like",
    "start": "2501110",
    "end": "2506630"
  },
  {
    "text": "this maybe you're looking at part of a record do you need to search on metadata so are you looking up oh when did this",
    "start": "2506630",
    "end": "2514400"
  },
  {
    "text": "happen who did this in certain cases you may actually need full-text search inside",
    "start": "2514400",
    "end": "2520640"
  },
  {
    "text": "it's substantially more work so on the web for instance primary key axis is a",
    "start": "2520640",
    "end": "2525920"
  },
  {
    "text": "URL this URL don't care about anything else that's really fast non primary key",
    "start": "2525920",
    "end": "2531290"
  },
  {
    "text": "axis is called Google it's a very very different kind of thing so you need to",
    "start": "2531290",
    "end": "2536720"
  },
  {
    "text": "understand whether you have this whether you need some not so it's almost always slower range scans sequential access",
    "start": "2536720",
    "end": "2546770"
  },
  {
    "text": "phil was talking about looking things up and you had his hash maps and ordering",
    "start": "2546770",
    "end": "2553100"
  },
  {
    "text": "so a binary map binary tree you're paying for the cost of knowing they come",
    "start": "2553100",
    "end": "2559130"
  },
  {
    "text": "in a particular order with a hash table you go I don't care what over there and you actually gain a significant amount",
    "start": "2559130",
    "end": "2565070"
  },
  {
    "text": "this is why an unordered map may well be a lot faster than an ordered map don't use a map if you don't need the ordering",
    "start": "2565070",
    "end": "2571870"
  },
  {
    "text": "because even paying a price for it this requires operator less than you're",
    "start": "2571870",
    "end": "2578780"
  },
  {
    "text": "probably going to need iterators you may need some sort of kind of traversal state there's a lot of things going on in this area you may need to do a seek",
    "start": "2578780",
    "end": "2585230"
  },
  {
    "text": "followed by a scan Hadoop is really good at this one you go oh go find that thing here's five milliseconds to find the",
    "start": "2585230",
    "end": "2591140"
  },
  {
    "text": "blocks and I've got 64 megabytes of data coming out that's a very nice gain dense",
    "start": "2591140",
    "end": "2596630"
  },
  {
    "text": "linear fashion watch out for things like the n plus 1 database problem if you're doing oo based programming or using an",
    "start": "2596630",
    "end": "2602990"
  },
  {
    "text": "ORM it's very easy to say Oh on that one I want this one I want that one I want this one you go backwards and forwards",
    "start": "2602990",
    "end": "2608660"
  },
  {
    "text": "to your database and you can make call thousand records each is maybe three milliseconds that's three seconds to do",
    "start": "2608660",
    "end": "2613820"
  },
  {
    "text": "those ones where it's actually one SQL bulk call might have done the whole thing in maybe 20 30 milliseconds so",
    "start": "2613820",
    "end": "2622760"
  },
  {
    "text": "watch out for bulk and see where you want to use that particularly in things",
    "start": "2622760",
    "end": "2628340"
  },
  {
    "text": "like distributed systems it makes quite a difference on your read to write ratios if you've got a lot of read",
    "start": "2628340",
    "end": "2636650"
  },
  {
    "text": "caching is your friend but you then have say well okay this is application caches",
    "start": "2636650",
    "end": "2641990"
  },
  {
    "text": "as well as some common memory caches in the hardware what do you do about write back what do you about eviction how do",
    "start": "2641990",
    "end": "2647780"
  },
  {
    "text": "you keep those up-to-date hmm what do I need about here you may well find that",
    "start": "2647780",
    "end": "2653030"
  },
  {
    "text": "actually the metadata there is worth cashing but the data itself is not worth cashing the index structures are very useful in certain",
    "start": "2653030",
    "end": "2659840"
  },
  {
    "text": "cases you're doing data logging and caching really doesn't help you much other than the metadata because you're",
    "start": "2659840",
    "end": "2665120"
  },
  {
    "text": "just writing and writing writing on the end so knowing this read/write ratio is a very important thing for performance",
    "start": "2665120",
    "end": "2670790"
  },
  {
    "text": "point of view working set how much data",
    "start": "2670790",
    "end": "2677210"
  },
  {
    "text": "have you got how big is it so these are pictures the bottom here if you have",
    "start": "2677210",
    "end": "2682850"
  },
  {
    "text": "something like a news website that's people are coming in here Moe starting",
    "start": "2682850",
    "end": "2688610"
  },
  {
    "text": "to look at this today's articles or yesterday's articles is very strongly biased towards a a small set if on the",
    "start": "2688610",
    "end": "2696170"
  },
  {
    "text": "other hand you go to the airport like this most people travel once or twice a year you will probably find that",
    "start": "2696170",
    "end": "2702530"
  },
  {
    "text": "actually that you've got a very flat kind of approach here there are a few",
    "start": "2702530",
    "end": "2708440"
  },
  {
    "text": "frequent fliers and crew at the top but the rest of it is very flat and you're dominated by i/o here on in the passport",
    "start": "2708440",
    "end": "2714770"
  },
  {
    "text": "case and the news case you're you can fit it all in RAM you get a very different answer I was speaking to",
    "start": "2714770",
    "end": "2722870"
  },
  {
    "text": "somebody yesterday he said well actually he was doing with publishing but it's it's scientific publishing and it's all",
    "start": "2722870",
    "end": "2729200"
  },
  {
    "text": "longtail the documents are all 40 or 50 megabytes of XML and there is there is",
    "start": "2729200",
    "end": "2734570"
  },
  {
    "text": "no peak out here it's all like that he's basically all that even though it's the same publishing thing because just",
    "start": "2734570",
    "end": "2740060"
  },
  {
    "text": "because of the access ones so this is then how much will fit - I need a bigger",
    "start": "2740060",
    "end": "2745250"
  },
  {
    "text": "machine can I actually fit this one here is it worth trying to do compression on my data to try and fit it in because that saves me the overhead going to the",
    "start": "2745250",
    "end": "2751760"
  },
  {
    "text": "disk all the things are very important to understand from an optimization point of view the last one is consistency acid",
    "start": "2751760",
    "end": "2760580"
  },
  {
    "text": "versus base transactions if you're doing airline booking it's like one seat there",
    "start": "2760580",
    "end": "2766730"
  },
  {
    "text": "on that aircraft you need to know whether you've got it or not and that's a very different matter from saying yeah",
    "start": "2766730",
    "end": "2773060"
  },
  {
    "text": "I've got a hotel here and I'll just say has the hotel got Wi-Fi or not doesn't",
    "start": "2773060",
    "end": "2778700"
  },
  {
    "text": "really matter if that happens now or a little bit later you need to understand that one because if it's if it's acid",
    "start": "2778700",
    "end": "2784370"
  },
  {
    "text": "this transactional you're probably gonna have it centralized you have lock two-face commits all those kind of",
    "start": "2784370",
    "end": "2790290"
  },
  {
    "text": "things which is a very different matter because you won't be able to speed that up anywhere near as much as you'd be",
    "start": "2790290",
    "end": "2795450"
  },
  {
    "text": "able to speed up the the base kind of stuff with copies and other things so understanding that is very different and",
    "start": "2795450",
    "end": "2802230"
  },
  {
    "text": "again it may be data versus metadata so your transactional data may well end up",
    "start": "2802230",
    "end": "2807810"
  },
  {
    "text": "being acid whereas or reference takers not so that's an idea of kind of that",
    "start": "2807810",
    "end": "2815820"
  },
  {
    "text": "middle section there once you've got rid of your man copy and some ideas about memory structures and other things down",
    "start": "2815820",
    "end": "2823590"
  },
  {
    "text": "there we may be also be looking at strings strings as mentioned just before",
    "start": "2823590",
    "end": "2828680"
  },
  {
    "text": "reference counted in in the 98 standard or specifically allowed to be the C",
    "start": "2828680",
    "end": "2835230"
  },
  {
    "text": "purpose 11 standard specifically said it was not allowed because you don't want hidden shared State inside the STL",
    "start": "2835230",
    "end": "2841350"
  },
  {
    "text": "because the memory model and concurrency issues GCC moved to that version 5 the visual studio has been using the SSO",
    "start": "2841350",
    "end": "2850430"
  },
  {
    "text": "non-shared version since about Visual Studio 2005 we've got the lovely string",
    "start": "2850430",
    "end": "2856050"
  },
  {
    "text": "view coming up boost string ref similarly you could use arrays of chars",
    "start": "2856050",
    "end": "2861900"
  },
  {
    "text": "or even C style child pointers and we end up with some choices and again I",
    "start": "2861900",
    "end": "2869820"
  },
  {
    "text": "can't really tell you which is the right one domain knowledge is the thing it's going to do this one if you have char star well its variable size and you",
    "start": "2869820",
    "end": "2876780"
  },
  {
    "text": "don't know about memory allocation maybe it's all Stephanie allocated I don't know you have all functionality as",
    "start": "2876780",
    "end": "2883110"
  },
  {
    "text": "external things like strikes and struck copy all those other things and there will be a null at the end which is good",
    "start": "2883110",
    "end": "2888470"
  },
  {
    "text": "but you have all this ownership problem you don't know if you're pointing at something whether it sound or not is it",
    "start": "2888470",
    "end": "2894900"
  },
  {
    "text": "going to go away or not and obviously there have been all the problems over the years with buffer overflow because",
    "start": "2894900",
    "end": "2900930"
  },
  {
    "text": "it forgets its length it's one of the reasons I really really don't like using Chester's with a raise so standard array",
    "start": "2900930",
    "end": "2908610"
  },
  {
    "text": "of char n 6 sighs there's no malloc you know what you're getting there you get",
    "start": "2908610",
    "end": "2913680"
  },
  {
    "text": "most of the stuff you from STL container including an operator less than by the way but it's a byte at a time so that is",
    "start": "2913680",
    "end": "2920100"
  },
  {
    "text": "where you get this will translate to mem Kemp up to you whether you have annul on the end",
    "start": "2920100",
    "end": "2925819"
  },
  {
    "text": "or not if it's fixed sighs you may not need it you have ownership nice and cash",
    "start": "2925819",
    "end": "2931220"
  },
  {
    "text": "friendly because it's I want one of those it's right there it's not dynamically allocated is right on your stack and the stack is almost always hot",
    "start": "2931220",
    "end": "2937480"
  },
  {
    "text": "because you're not suddenly look off into the heap but there's no move operations because it's fully owned",
    "start": "2937480",
    "end": "2944450"
  },
  {
    "text": "because there's no pointer to do so movie the same as copy version for string and version five string have",
    "start": "2944450",
    "end": "2950569"
  },
  {
    "text": "slightly different characteristics in terms of the size notice with the GCC one for instance is 32 bytes the",
    "start": "2950569",
    "end": "2957520"
  },
  {
    "text": "Microsoft one is 24 bytes from a brightly because it's three-pointers they haven't got this fourth pointer in",
    "start": "2957520",
    "end": "2963440"
  },
  {
    "text": "there lots of functionality lots of nulls etc you don't have to worry about ownership and you get the",
    "start": "2963440",
    "end": "2970280"
  },
  {
    "text": "SSO kind of stuff string view 16 bytes on 64-bit machine because it's a pointer",
    "start": "2970280",
    "end": "2975920"
  },
  {
    "text": "and length no malloc it's great it's basically constant string you don't have",
    "start": "2975920",
    "end": "2982970"
  },
  {
    "text": "a null at the end because it's pointer and length but that's again part of it so a big advantage you have got this",
    "start": "2982970",
    "end": "2989510"
  },
  {
    "text": "ownership now you've transferred you said right okay I have to know what I'm pointing you have to know where it's",
    "start": "2989510",
    "end": "2994819"
  },
  {
    "text": "still there and so that is a proof that you now have to take on it's basically a",
    "start": "2994819",
    "end": "3000190"
  },
  {
    "text": "fat pointer and the advice these day seem to be passing by value so just to",
    "start": "3000190",
    "end": "3006700"
  },
  {
    "text": "go through some of those ones again we start off at the top it's too slow you start profiling you get the silly kind",
    "start": "3006700",
    "end": "3014950"
  },
  {
    "text": "of oh why am i doing that one don't moments often this is about a",
    "start": "3014950",
    "end": "3020650"
  },
  {
    "text": "strength reduction how do I get rid of some of those ones here then I usually find that I find that you're into sort",
    "start": "3020650",
    "end": "3026410"
  },
  {
    "text": "of kind of malloc and memory allocation issues and memory copy and mem comp memory memory comparison for instance if",
    "start": "3026410",
    "end": "3032920"
  },
  {
    "text": "you're doing lots of stuff in maps because it's going to have to go through a big map and do all that memory comparison all the time",
    "start": "3032920",
    "end": "3037990"
  },
  {
    "text": "this is where having temporaries can hurts you so see we're just to go back",
    "start": "3037990",
    "end": "3044230"
  },
  {
    "text": "over this is where move can help you or pre allocation of your memory or saying reserves on my factor",
    "start": "3044230",
    "end": "3050110"
  },
  {
    "text": "because milwaukee's is not cash friendly at all and also our pointers in there",
    "start": "3050110",
    "end": "3055900"
  },
  {
    "text": "which is again taking away off your stack this point I were going to start looking at my the choice of MySQL",
    "start": "3055900",
    "end": "3062170"
  },
  {
    "text": "containers or other ways of doing it with say open interesting hash tables that point and I can start doing the",
    "start": "3062170",
    "end": "3068980"
  },
  {
    "text": "thing of saying well actually hot and cold coms and separating those ones out so that leads us into sort of kind of",
    "start": "3068980",
    "end": "3075160"
  },
  {
    "text": "the last few things about this one the strength reduction things like static if",
    "start": "3075160",
    "end": "3083740"
  },
  {
    "text": "you're creating an object in a function how often do you create it you're",
    "start": "3083740",
    "end": "3088900"
  },
  {
    "text": "creating every time we call that function is that oh is that constructor causing you too much trouble for",
    "start": "3088900",
    "end": "3094420"
  },
  {
    "text": "instance if it's a vector zero I allocate it in the dik-dik allocate DRK maybe you should use a static allocate",
    "start": "3094420",
    "end": "3100270"
  },
  {
    "text": "it once and call clear at the end or clear at the beginning so you to hold on",
    "start": "3100270",
    "end": "3106900"
  },
  {
    "text": "to the memory but basically get rid of the contents silly things I've seen",
    "start": "3106900",
    "end": "3113190"
  },
  {
    "text": "people doing log log all these arguments are well it's all right sister we haven't got logging turned on that",
    "start": "3113190",
    "end": "3119230"
  },
  {
    "text": "moment in any on that's a debug and we've got a set T to error level said yeah but you're actually calculating all",
    "start": "3119230",
    "end": "3125200"
  },
  {
    "text": "those arguments transferring and sewing through to the log thing that has an if statement inside that throws them all the way so basically is throwing all",
    "start": "3125200",
    "end": "3131740"
  },
  {
    "text": "that performance away creating these objects and doing nothing with them and so the advice there was fear or log",
    "start": "3131740",
    "end": "3137650"
  },
  {
    "text": "macros out if log level equals is greater than the debug or what I'm sorry",
    "start": "3137650",
    "end": "3143950"
  },
  {
    "text": "is less than debug do this so don't calculate all the arguments just a few",
    "start": "3143950",
    "end": "3149980"
  },
  {
    "text": "things I've seen you can do things like string interning if you've got lots of strings back to the immutable strings",
    "start": "3149980",
    "end": "3155500"
  },
  {
    "text": "you go I know what the strings are on this one I got an example which is looking up 5744 airports we know what",
    "start": "3155500",
    "end": "3161890"
  },
  {
    "text": "the IATA code are I got all those why am i storing these all do I need to what do",
    "start": "3161890",
    "end": "3167140"
  },
  {
    "text": "I need multiple copies of these ones do I need multiple copies of the name London has several airports do I need",
    "start": "3167140",
    "end": "3173650"
  },
  {
    "text": "London several times maybe I can actually put all those into one to reduce the size of my memory and then",
    "start": "3173650",
    "end": "3179860"
  },
  {
    "text": "use a string reference and so use a an India into a series of strings and if I have",
    "start": "3179860",
    "end": "3186460"
  },
  {
    "text": "that well if I've got my statistics I can now put all the common strings at the beginning and the less common strings at the end that's making me more",
    "start": "3186460",
    "end": "3192850"
  },
  {
    "text": "cash friendly instead of having an eight bike pointer I can now have a two or maybe even three byte index into this",
    "start": "3192850",
    "end": "3198940"
  },
  {
    "text": "one and I've then made my cash smaller don't use acid when bass will do because",
    "start": "3198940",
    "end": "3207010"
  },
  {
    "text": "that limits a load of stuff about me when you're getting it the locking and all the other things that they do that",
    "start": "3207010",
    "end": "3212080"
  },
  {
    "text": "one so this is overheads to doing am to do acid stuff I've seen people doing",
    "start": "3212080",
    "end": "3219640"
  },
  {
    "text": "stuff and like they calculating the time one more time and changing time into a string and a friend of mine who does",
    "start": "3219640",
    "end": "3227140"
  },
  {
    "text": "tuning on on IBM mainframe stuff he said he found that actually in one particular case the top lying there was converting",
    "start": "3227140",
    "end": "3234940"
  },
  {
    "text": "times and strings so be careful that one if you might as well just do it once per",
    "start": "3234940",
    "end": "3240100"
  },
  {
    "text": "second if that granularity is good enough do it once and there you go I'll give you that for all the hundred things",
    "start": "3240100",
    "end": "3246280"
  },
  {
    "text": "I'm logging after this do virtualization you can do virtual eyes your calls if",
    "start": "3246280",
    "end": "3252250"
  },
  {
    "text": "you I use the keyword final for instance if you have in c plus eleven you have",
    "start": "3252250",
    "end": "3258670"
  },
  {
    "text": "virtual calls you know finally of a point of that one if you say final then the compiler knows that there cannot be",
    "start": "3258670",
    "end": "3264040"
  },
  {
    "text": "anything below that so it doesn't have to it doesn't have to do the virtual so therefore can inline the call and that",
    "start": "3264040",
    "end": "3271660"
  },
  {
    "text": "then says in line here in line in there so final on the edges it's safe because",
    "start": "3271660",
    "end": "3277570"
  },
  {
    "text": "if you try to inherit from it it won't let you and you'll find out the compile time so use a final you can that can",
    "start": "3277570",
    "end": "3284080"
  },
  {
    "text": "help you there fast path and slow path if you know what the fast path is detect",
    "start": "3284080",
    "end": "3291160"
  },
  {
    "text": "that very quickly and cheaply and say right this is one of my 80% ones and do that one here if it's going to be and I",
    "start": "3291160",
    "end": "3297580"
  },
  {
    "text": "want to have something that doesn't have any false negatives it pushes me into the slow path occasionally when it",
    "start": "3297580",
    "end": "3303970"
  },
  {
    "text": "shouldn't do that's that's fine but want to be able to say is right in the fast path there's no memory allocation",
    "start": "3303970",
    "end": "3309700"
  },
  {
    "text": "there's no locks as there's nothing it likes straight in there straight back out again so again that's knowing you're right",
    "start": "3309700",
    "end": "3316950"
  },
  {
    "text": "8020 you can save yourself ten two thousand cycles with this one avoiding Malick's and copies so strings how do",
    "start": "3316950",
    "end": "3324700"
  },
  {
    "text": "you use those avoid temporary string string 1 plus King 2 per string 3 you may be used plus equals maybe you can",
    "start": "3324700",
    "end": "3330220"
  },
  {
    "text": "use string view instead watch out for conversions it's actually surprisingly slow to convert it into just two",
    "start": "3330220",
    "end": "3335950"
  },
  {
    "text": "floating points on the other way around at a low level use move a number of",
    "start": "3335950",
    "end": "3341740"
  },
  {
    "text": "people you'll now see using sink arguments on constructors you'll pass by value and then do a moving sight that",
    "start": "3341740",
    "end": "3347370"
  },
  {
    "text": "that is counter intuitive Lee faster on number of compilers these days pre-allocate your memory use return",
    "start": "3347370",
    "end": "3354730"
  },
  {
    "text": "value optimization so returning by value you'll find that actually the compiler doesn't even do that one in C over 17",
    "start": "3354730",
    "end": "3360460"
  },
  {
    "text": "it's mandated that that will that that optimization happens so use the rule of",
    "start": "3360460",
    "end": "3366130"
  },
  {
    "text": "zero preferably few use inheritance avoid deep inheritance hierarchies",
    "start": "3366130",
    "end": "3372010"
  },
  {
    "text": "because you've got a lot of constructors to call that's much less of a problem that used to be string to USS said avoid",
    "start": "3372010",
    "end": "3380110"
  },
  {
    "text": "allocations watch out for our own algorithms you may find that you can",
    "start": "3380110",
    "end": "3385420"
  },
  {
    "text": "that order n log N 1 going back to map unordered a nap or your own hash tables",
    "start": "3385420",
    "end": "3390640"
  },
  {
    "text": "very useful you'll need to know about your data access patterns and whether you require ordering or not and how you",
    "start": "3390640",
    "end": "3398530"
  },
  {
    "text": "want to handle those strings in terms of cache effects array of structs start to",
    "start": "3398530",
    "end": "3404080"
  },
  {
    "text": "raise maybe you can do hot cold separation to say here is these are the pieces of data I want most and then",
    "start": "3404080",
    "end": "3409900"
  },
  {
    "text": "crunch them up that way and then that the hardware do that one you have a choice of hole by point or a hole by",
    "start": "3409900",
    "end": "3415660"
  },
  {
    "text": "value holding by pointers this form of hot cold separation it allows you move",
    "start": "3415660",
    "end": "3421690"
  },
  {
    "text": "semantics but then you get this trade-off with it's being through a pointer so you have to do some",
    "start": "3421690",
    "end": "3427600"
  },
  {
    "text": "measurements to understand that ones a lot of these ones here this cash effect also depends upon the size of your data",
    "start": "3427600",
    "end": "3433470"
  },
  {
    "text": "because you've got even 32 kilobytes of data cache and there's other things like that watch out for read and write",
    "start": "3433470",
    "end": "3439030"
  },
  {
    "text": "amplification don't if you're going to read something make sure that you're using everything that's inside that",
    "start": "3439030",
    "end": "3444580"
  },
  {
    "text": "don't read a - you're not going to use playing around with the compiler optimizations is fun the vectorization",
    "start": "3444580",
    "end": "3450220"
  },
  {
    "text": "is a particularly fun and inlining inlining is definitely your friend on",
    "start": "3450220",
    "end": "3455350"
  },
  {
    "text": "this one so multi-level problem it's not",
    "start": "3455350",
    "end": "3461860"
  },
  {
    "text": "just set of tweaks so I'm trying to provide a way of the order which you might would look at those ones here and",
    "start": "3461860",
    "end": "3468190"
  },
  {
    "text": "stressing that domain knowledge is really a key to this one here Donald nothing new that long time ago",
    "start": "3468190",
    "end": "3473350"
  },
  {
    "text": "and we seem to forgotten it or actually if we do we just don't make it explicit that we know that we're doing we're",
    "start": "3473350",
    "end": "3478750"
  },
  {
    "text": "using it and that will beat your clever algorithms all the time go and find some",
    "start": "3478750",
    "end": "3484030"
  },
  {
    "text": "tools learn how to use them learn how to interpret them that is it any questions",
    "start": "3484030",
    "end": "3496680"
  }
]