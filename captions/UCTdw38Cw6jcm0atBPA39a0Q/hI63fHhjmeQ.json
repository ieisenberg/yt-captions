[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "all right cool thank you well hello everyone and welcome to this session on handling secrets in cloud-based",
    "start": "8320",
    "end": "13920"
  },
  {
    "text": "applications i'm steve roberts a developer advocate at amazon web services where i",
    "start": "13920",
    "end": "18960"
  },
  {
    "text": "specialize in net and powershell on aws so let's get right into it um nearly",
    "start": "18960",
    "end": "26400"
  },
  {
    "start": "24000",
    "end": "24000"
  },
  {
    "text": "every application developer build system whatever it is handle secrets of some form okay",
    "start": "26400",
    "end": "32160"
  },
  {
    "text": "multiple times a day usually 724 throughout the year and some typical ones that you might think of immediately",
    "start": "32160",
    "end": "38160"
  },
  {
    "text": "things like you know connection strings databases passwords encryption keys ssl",
    "start": "38160",
    "end": "43360"
  },
  {
    "text": "certificates third-party api keys now i also consider things like application and development credentials",
    "start": "43360",
    "end": "49840"
  },
  {
    "text": "as secrets i obviously don't want those to get out into the wild i just saw a hand get ready for somebody",
    "start": "49840",
    "end": "55120"
  },
  {
    "text": "have a question bill",
    "start": "55120",
    "end": "58600"
  },
  {
    "text": "no i'll carry on um i should add by the way my colleague bill is on as co-host so if you have any questions put them in",
    "start": "60559",
    "end": "66240"
  },
  {
    "text": "the chat and he'll answer them as we go along so anyway where was i so yes so i consider developing and runtime",
    "start": "66240",
    "end": "71520"
  },
  {
    "text": "credentials for my app as secrets um now for most workloads you know secrets vary by environment you know we have staging",
    "start": "71520",
    "end": "77439"
  },
  {
    "text": "environments production environments those secrets need to be deployed protected somehow locked down so only",
    "start": "77439",
    "end": "83360"
  },
  {
    "text": "the right applications environments systems and users can access them right and we need to obviously rotate them on",
    "start": "83360",
    "end": "88720"
  },
  {
    "text": "a regular basis now all of this leads to some fairly inconvenient ways of working so we need to find some convenient ways",
    "start": "88720",
    "end": "94079"
  },
  {
    "text": "of doing this otherwise we just let the secrets get stale and we're not going to bother to protect them",
    "start": "94079",
    "end": "99680"
  },
  {
    "text": "now in the session i'm not going to cover every kind of secret um there is um firstly we wouldn't have time and",
    "start": "99680",
    "end": "105920"
  },
  {
    "text": "secondly i just don't have expertise in all of them so i designed a session around a core set of questions that i get asked quite",
    "start": "105920",
    "end": "112479"
  },
  {
    "text": "frequently when i'm out presenting to user groups um you know a couple of detection disclaimers i work for amazon web",
    "start": "112479",
    "end": "118960"
  },
  {
    "text": "services so my focus is going to be on the aws cloud but overall the ideas are",
    "start": "118960",
    "end": "124000"
  },
  {
    "text": "applicable to other languages or the cloud providers etc in fact if you saw",
    "start": "124000",
    "end": "129920"
  },
  {
    "text": "i think it was rhian or ryan johnson's uh session yesterday uh he was showing how to protect secrecy in azure",
    "start": "129920",
    "end": "137120"
  },
  {
    "text": "i was also as it says on my bio a.net developer at aws so you know that's my tool set of",
    "start": "137120",
    "end": "143120"
  },
  {
    "text": "choice but again the ideas i'm presenting the apis the services are applicable no matter what language you",
    "start": "143120",
    "end": "148640"
  },
  {
    "text": "use on aws so what solutions have we used in the",
    "start": "148640",
    "end": "154000"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "past right why is this such a big deal well you know we used to hard code them in the source and configuration files",
    "start": "154000",
    "end": "159040"
  },
  {
    "text": "right we put secrets in there now you might think nobody does this but it still happens today you still see people",
    "start": "159040",
    "end": "164720"
  },
  {
    "text": "check uh credentials into github and it usually happens because we have the best of intentions right we're doing",
    "start": "164720",
    "end": "169920"
  },
  {
    "text": "a quick and dirty fix or we want to test something out or you start work on a new project you think you know i'll fix the i'll fix the",
    "start": "169920",
    "end": "176160"
  },
  {
    "text": "credentials later on i'll fix the secrets later the problem is they tend to stay there right you never",
    "start": "176160",
    "end": "181280"
  },
  {
    "text": "underestimate the power of human laziness and memory right so it's always best to start out the best principles if",
    "start": "181280",
    "end": "187840"
  },
  {
    "text": "you can now traditionally with net applications you know um we would store secrets in like app",
    "start": "187840",
    "end": "194239"
  },
  {
    "text": "settings and connection strings in the app config or web config files and we do transforms on them at build time so we",
    "start": "194239",
    "end": "199920"
  },
  {
    "text": "get different credentials or different secrets for different environments um we'd encrypt them using machine keys",
    "start": "199920",
    "end": "206799"
  },
  {
    "text": "fine that usually worked okay for to you know the traditional monoliths that are running on a limited number of servers",
    "start": "206799",
    "end": "212480"
  },
  {
    "text": "in a data center or your office the problem is though that those keys those secrets still end up in your",
    "start": "212480",
    "end": "218319"
  },
  {
    "text": "source code repository and then at some point you decide to open source and guess what happens",
    "start": "218319",
    "end": "223519"
  },
  {
    "text": "the other problem is that to update the secret you know you had to go in and hand edit all those files on the service",
    "start": "223519",
    "end": "229280"
  },
  {
    "text": "that's great if you have a limited number of servers but when you go to cloud scale that just that isn't feasible",
    "start": "229280",
    "end": "234799"
  },
  {
    "text": "and then what happens when you're using serverless where you don't have access to the host you can't get to the machine okay",
    "start": "234799",
    "end": "240480"
  },
  {
    "text": "so some other ideas people have used is environment variables okay it's better than putting them into your source code",
    "start": "240480",
    "end": "247280"
  },
  {
    "text": "but when you're running apps on vms or containers you know you might have to restart that app or the vm or respawn",
    "start": "247280",
    "end": "252560"
  },
  {
    "text": "the container so the new environment variables get picked up and you also mean you know you need to",
    "start": "252560",
    "end": "258400"
  },
  {
    "text": "have a build process to set those variables correctly that's somewhere else we're going to want to secure things",
    "start": "258400",
    "end": "263680"
  },
  {
    "text": "so you know in summary those traditional solutions and i put traditional in quotes is you know they they're either",
    "start": "263680",
    "end": "268720"
  },
  {
    "text": "not secure at all you know or they have operational overhead so how can we do things better",
    "start": "268720",
    "end": "275199"
  },
  {
    "text": "so let's start by going to absolute ground level and start protecting the credentials that we",
    "start": "275199",
    "end": "280800"
  },
  {
    "text": "use for our developers for our development processes and our apps in the cloud right let's keep those",
    "start": "280800",
    "end": "285840"
  },
  {
    "text": "credentials out of the source code config files but not put too much of an inconvenience in the way right i also",
    "start": "285840",
    "end": "292080"
  },
  {
    "text": "say security is one over convenience right so if we make things too hard our developers will probably potentially try",
    "start": "292080",
    "end": "298240"
  },
  {
    "text": "and work around things and then we start to get problems and leaks now i want to be clear that the credentials i'm talking about here are",
    "start": "298240",
    "end": "304720"
  },
  {
    "text": "aws access to secret keys these are programmatic keys like third-party api keys other providers have similar",
    "start": "304720",
    "end": "310960"
  },
  {
    "text": "notions so you know what i'm about to say still applies so before we begin let's sort of define",
    "start": "310960",
    "end": "317600"
  },
  {
    "start": "316000",
    "end": "316000"
  },
  {
    "text": "what i mean by application and development credentials so i'd like to distinguish the credentials that i use",
    "start": "317600",
    "end": "322960"
  },
  {
    "text": "to develop and deploy my application from those that the application needs when it's running",
    "start": "322960",
    "end": "329039"
  },
  {
    "text": "now on my laptop you know i store my developer credentials i use multiple sets of credentials for different",
    "start": "329039",
    "end": "334160"
  },
  {
    "text": "accounts and to be honest they pretty much all have admin permissions and the reason for this is that as a",
    "start": "334160",
    "end": "339919"
  },
  {
    "text": "developer advocate i never really know which services from aws i'm going to be working with on a day-to-day basis when",
    "start": "339919",
    "end": "345280"
  },
  {
    "text": "i'm developing samples or i'm talking about things or i'm writing news blog posts so i use admin credentials there",
    "start": "345280",
    "end": "352080"
  },
  {
    "text": "but when my applications or my samples run in the cloud they don't need such a wide scope right they only access a subset of aws",
    "start": "352080",
    "end": "359280"
  },
  {
    "text": "services or resources and it's generally a better practice anyway to use different sets of credentials scope to different sets of",
    "start": "359280",
    "end": "365600"
  },
  {
    "text": "permissions for your deployed apps now when i'm talking about development credentials i include those in the ci cd",
    "start": "365600",
    "end": "372880"
  },
  {
    "text": "or continuous integration continuous deployment development category some other developers they like to use",
    "start": "372880",
    "end": "378400"
  },
  {
    "text": "the same credentials like i do others prefer to use different credentials and i've heard some companies go so far as",
    "start": "378400",
    "end": "384000"
  },
  {
    "text": "to use completely different accounts for development production build systems you know",
    "start": "384000",
    "end": "389680"
  },
  {
    "text": "your mileage may vary the key thing is though you know we're not putting credentials into our files",
    "start": "389680",
    "end": "395840"
  },
  {
    "text": "right and obviously it's still a possible thing you still think you can do today otherwise i wouldn't be talking about it but you know i really can't",
    "start": "395840",
    "end": "401280"
  },
  {
    "text": "stress enough how bad of an idea this is bots are scanning public repos all the time they can spot credentials on a",
    "start": "401280",
    "end": "407600"
  },
  {
    "text": "commit very very quickly you might even even realize you've done it for some time right until the bill arrives or you",
    "start": "407600",
    "end": "413520"
  },
  {
    "text": "wonder what's going on something worse happens so let's get these things out of this code and the way we do it at aws is we",
    "start": "413520",
    "end": "420000"
  },
  {
    "text": "use something called credential profiles so a credential profile it's just simply a set of credential keys we call them",
    "start": "420000",
    "end": "426319"
  },
  {
    "text": "access keys and secret access keys that we associate with a name now all of the aws sdks and tools can",
    "start": "426319",
    "end": "432800"
  },
  {
    "text": "work with credential profiles they're just held in a file on your machine what we do is we can put the name of the",
    "start": "432800",
    "end": "438160"
  },
  {
    "text": "profile into our application configuration files or our source files doesn't matter",
    "start": "438160",
    "end": "443840"
  },
  {
    "text": "the thing is when we commit those changes that name it means nothing we're not betraying anything because the credentials are on my machine they're",
    "start": "443840",
    "end": "450240"
  },
  {
    "text": "not in the code and that's how we can safely and easily work with credentials",
    "start": "450240",
    "end": "455680"
  },
  {
    "text": "now as i mentioned those credential profiles let us work with creds during development without betraying the",
    "start": "455680",
    "end": "461120"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "secrets into our code base right and i may choose to use different credentials uh my ci cd setup i may use the same",
    "start": "461120",
    "end": "467199"
  },
  {
    "text": "ones but what happens when i deploy my app to the cloud and it then needs credentials to run right my application is going to",
    "start": "467199",
    "end": "472879"
  },
  {
    "text": "want to call aws services or some other third party where are credentials coming from then",
    "start": "472879",
    "end": "478560"
  },
  {
    "text": "so several years ago when i started aws i used to see frequent questions on forums from users asking okay i've got",
    "start": "478560",
    "end": "484400"
  },
  {
    "text": "my credentials locally and i'm deploying my application to say an amazon ec2 virtual machine",
    "start": "484400",
    "end": "489759"
  },
  {
    "text": "how do i put my credential file onto the machine right and you know this is a bad idea right um firstly when the app runs on",
    "start": "489759",
    "end": "496720"
  },
  {
    "text": "that host it's going to be running with your developer credentials which in my case would probably be admin and admin privileges",
    "start": "496720",
    "end": "502720"
  },
  {
    "text": "so a much wider scope than the app actually needs and secondly should the worst happen and the host get",
    "start": "502720",
    "end": "507840"
  },
  {
    "text": "compromised somehow your dev credentials are there in the world right and again you might not realize this for a while",
    "start": "507840",
    "end": "513760"
  },
  {
    "text": "so what we need instead is some way to deploy our apps right without any credential data at all and then at",
    "start": "513760",
    "end": "519599"
  },
  {
    "text": "runtime get credentials vended to it automatically so is there a better way the answer is yes otherwise i wouldn't",
    "start": "519599",
    "end": "524640"
  },
  {
    "text": "be here talking about it um i want to introduce you now to aws's identity and access management service which we call",
    "start": "524640",
    "end": "530320"
  },
  {
    "text": "i am iam so i am is a service it's free in your",
    "start": "530320",
    "end": "535839"
  },
  {
    "start": "533000",
    "end": "533000"
  },
  {
    "text": "aws account there's no extra charge to use this that enables you to manage access to other aws services and",
    "start": "535839",
    "end": "541760"
  },
  {
    "text": "resources right and it has the notion of users groups roles and policies",
    "start": "541760",
    "end": "547440"
  },
  {
    "text": "now i use several i am users uh with long term credentials on my local machine and i use those for my development i use them for my ci cd",
    "start": "547440",
    "end": "554000"
  },
  {
    "text": "setup etc groups as you might imagine allowing you to group users together for administrative",
    "start": "554000",
    "end": "559920"
  },
  {
    "text": "administrative convenience when applying permissions um so so far pretty standard stuff",
    "start": "559920",
    "end": "566480"
  },
  {
    "text": "and that leads me onto roles so roles can be associated with temporary credentials via something we",
    "start": "566480",
    "end": "573120"
  },
  {
    "start": "567000",
    "end": "567000"
  },
  {
    "text": "call a trust relationship now that trust relationship allows your application",
    "start": "573120",
    "end": "578800"
  },
  {
    "text": "when it's running on the trusted entity to obtain time limited temporary automatically rotating credentials right",
    "start": "578800",
    "end": "586080"
  },
  {
    "text": "and users can also assume roles this is not just for applications but that's what my focus is going to be on here how",
    "start": "586080",
    "end": "591519"
  },
  {
    "text": "to use a role to vend application credentials at runtime now inside application code we can also",
    "start": "591519",
    "end": "597920"
  },
  {
    "text": "request temporary credentials there's a service called secure security token service you can call to",
    "start": "597920",
    "end": "604640"
  },
  {
    "text": "say hey given this role give me some temporary credentials so you can do things like deploy your app with a role",
    "start": "604640",
    "end": "609920"
  },
  {
    "text": "and then temporarily grab other credentials when you need them you don't have you're not just stuck with what",
    "start": "609920",
    "end": "615040"
  },
  {
    "text": "you'd deploy your application with i mentioned that the credentials are temporary and when they expire or when they're",
    "start": "615040",
    "end": "621360"
  },
  {
    "text": "about to if you're using any of the aws sdks to communicate with aws",
    "start": "621360",
    "end": "626560"
  },
  {
    "text": "uh using that role and the credentials vended from that role they will automatically handle the refresh for you you don't have to worry about it you",
    "start": "626560",
    "end": "632640"
  },
  {
    "text": "just keep making your calls the sdks will do the heavy lifting",
    "start": "632640",
    "end": "637680"
  },
  {
    "text": "now to go with users groups and roles we have something called policies so aws has a very very fine grind access",
    "start": "637680",
    "end": "643920"
  },
  {
    "start": "638000",
    "end": "638000"
  },
  {
    "text": "control mechanism a policy controls what services can be accessed what apis",
    "start": "643920",
    "end": "649839"
  },
  {
    "text": "on those services can be accessed or denied what resources for that service can be accessed and potentially under what",
    "start": "649839",
    "end": "656880"
  },
  {
    "text": "conditions should those rules take effect by default nothing is permitted",
    "start": "656880",
    "end": "662240"
  },
  {
    "text": "instead you add access right then you can also denied if you want so if you haven't allow anything but this scenario",
    "start": "662240",
    "end": "668240"
  },
  {
    "text": "that's supported too now i consider the ability of starting from nothing and building up or adding",
    "start": "668240",
    "end": "673600"
  },
  {
    "text": "permissions safer than starting out from when anything goes and scoping down when",
    "start": "673600",
    "end": "678640"
  },
  {
    "text": "it comes on to belong to the cloud so you have control of opening the scope of your application",
    "start": "678640",
    "end": "684959"
  },
  {
    "text": "so let's put this together what does this look like when i'm developing locally and when i then deploy my",
    "start": "685760",
    "end": "690800"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "application to the cloud and this might look scary but it's actually quite simple so first for local",
    "start": "690800",
    "end": "696240"
  },
  {
    "text": "development we have our application i'm going to assume here is a net application so we have an application config file and inside that file i",
    "start": "696240",
    "end": "702959"
  },
  {
    "text": "declare a name of a profile that i want my application to use when running locally",
    "start": "702959",
    "end": "708160"
  },
  {
    "text": "that's a reference to a local file holding my programmatic development keys",
    "start": "708160",
    "end": "714480"
  },
  {
    "text": "these keys are stored i've said with the user they're sort of a local machine and attached that user is a policy or a",
    "start": "715120",
    "end": "721040"
  },
  {
    "text": "set of policies that control what that app can use when i'm deploying when i'm sorry running it on my machine now remember these these",
    "start": "721040",
    "end": "727760"
  },
  {
    "text": "roles these sorry these i am users can also be used inside my tooling so it controls what i can access from tools",
    "start": "727760",
    "end": "734399"
  },
  {
    "text": "but when i deploy my application to the cloud things change so here's my same application this time let's say it's",
    "start": "734399",
    "end": "739839"
  },
  {
    "text": "running on an amazon ec2 virtual machine this time the application has been deployed with a role",
    "start": "739839",
    "end": "745839"
  },
  {
    "text": "that role has a trust relationship onboard attached to it as well as policies controlling what it can access",
    "start": "745839",
    "end": "753200"
  },
  {
    "text": "the trust relationship vends temporary credentials onto the host that the application can automatically read and",
    "start": "753200",
    "end": "759600"
  },
  {
    "text": "consume to start calling aws services and of course the policies again what can the application access when it's",
    "start": "759600",
    "end": "765360"
  },
  {
    "text": "running and ideally those policies are more constricted than what my user in development has",
    "start": "765360",
    "end": "773600"
  },
  {
    "text": "so let's go and take a look at that slide in practice um i'm going to show you an application running locally then we're going to",
    "start": "773600",
    "end": "778880"
  },
  {
    "text": "deploy it i'm going to take a look at the roles that i'm using so i'm going to jump over to visual",
    "start": "778880",
    "end": "784720"
  },
  {
    "text": "studio and here's my very simple application here and if i go into my application settings file here you'll",
    "start": "784720",
    "end": "791839"
  },
  {
    "text": "see that i've got this aws section here and here's where i reference the profile",
    "start": "791839",
    "end": "797200"
  },
  {
    "text": "that i want to use for credentials now what do these credentials look like well i'm not going to show you real",
    "start": "797200",
    "end": "803200"
  },
  {
    "text": "credentials but i'll show you where they live so here's my profile location say i have a aws folder and here's my real",
    "start": "803200",
    "end": "809519"
  },
  {
    "text": "credentials let's take a look at an example file",
    "start": "809519",
    "end": "814560"
  },
  {
    "text": "that's what credentials look like in a profile it's just access key secret access key i can also specify roles you can see at line 10 um you can actually",
    "start": "814560",
    "end": "821680"
  },
  {
    "text": "assume role through through credential profiles i'll shut that window down so they're pretty simple let's go back to visual",
    "start": "821680",
    "end": "828639"
  },
  {
    "text": "studio so all i'm doing here is saying i want when this application runs locally i just want to use the credentials",
    "start": "828639",
    "end": "834079"
  },
  {
    "text": "associated with that steve demo uh profile i can check this file into github no one's going to be any otherwise what",
    "start": "834079",
    "end": "839519"
  },
  {
    "text": "those credentials are inside my app i've got so i've got a page here a very simple page and all it's doing is",
    "start": "839519",
    "end": "846000"
  },
  {
    "text": "calling aws services to just list some amazon s3 storage buckets and some",
    "start": "846000",
    "end": "852079"
  },
  {
    "text": "amazon ec2 virtual machines that i have running nothing uh particularly clever there so let's run this out",
    "start": "852079",
    "end": "859360"
  },
  {
    "text": "and when browser comes up we should see a list of storage buckets in amazon s3 there they are",
    "start": "864320",
    "end": "871600"
  },
  {
    "text": "and a couple of amazon ec2 virtual machines that are running okay again very simple app don't laugh at me",
    "start": "871600",
    "end": "877519"
  },
  {
    "text": "for my ui skills but what i'm going to do now is i'm going to change that profile",
    "start": "877519",
    "end": "882639"
  },
  {
    "text": "so i'm going to use another profile of it on my machine and over here i've got the aegis explorer from the ages toolkit for visual studio and you can see here",
    "start": "882639",
    "end": "889199"
  },
  {
    "text": "all actual my my real credentials uh referenced inside here so let's run that application again now this time i should",
    "start": "889199",
    "end": "895360"
  },
  {
    "text": "see different data because i'm using a different account",
    "start": "895360",
    "end": "899839"
  },
  {
    "text": "okay so here's my application and now you'll notice i've got many more amazon s3 storage boxes so we're definitely in a different account and this time i've",
    "start": "903760",
    "end": "910240"
  },
  {
    "text": "only got one ec2 image or 182 instance while they're running okay so different accounts i just changed the name of the",
    "start": "910240",
    "end": "915680"
  },
  {
    "text": "potential profile um inside the app so now let's deploy this app to the cloud now remember that both of those",
    "start": "915680",
    "end": "922399"
  },
  {
    "text": "profiles i was using locally have administrative privileges okay and i don't want that in the cloud i'm going to so i'm going to deploy it with a role",
    "start": "922399",
    "end": "928720"
  },
  {
    "text": "and what i'm going to do is deploy this app to a service called the elastic beanstalk it's hosting web applications",
    "start": "928720",
    "end": "935360"
  },
  {
    "text": "now i've already deployed a sample but um i'm going to walk you through the wizard again this comes from our toolkit",
    "start": "935360",
    "end": "940720"
  },
  {
    "text": "now there's a bit of a chicken and egg here in that i could go and create a role for this sample application",
    "start": "940720",
    "end": "947040"
  },
  {
    "text": "and deploy it but it takes a couple of minutes for the deployment to spin up so i'm going to deploy it using a role that",
    "start": "947040",
    "end": "952320"
  },
  {
    "text": "i've already created while it spins up the infrastructure i'm then going to go and take a look at that role and then",
    "start": "952320",
    "end": "957839"
  },
  {
    "text": "i'm going to walk you through how we would create that role um inside the console normally you would do this from infrastructure as code",
    "start": "957839",
    "end": "964720"
  },
  {
    "text": "because we don't want things to be repeatable and consistent etc but the visual through the console is a little bit easier to understand so let's get",
    "start": "964720",
    "end": "971600"
  },
  {
    "text": "started with deploying it and i'm just going to deploy it out to an environment in beanstalk which maps",
    "start": "971600",
    "end": "977440"
  },
  {
    "text": "to the ec2 virtual machines it's running on and here's the crux of the the deployment so you'll see i have two",
    "start": "977440",
    "end": "983519"
  },
  {
    "text": "roles in the top role here this is going to be the deployed app permissions",
    "start": "983519",
    "end": "988560"
  },
  {
    "text": "i work in the application access and the trust relationship that says when this is running on an ec2",
    "start": "988560",
    "end": "994800"
  },
  {
    "text": "host it can get temporary credentials and here's the role that i've already created",
    "start": "994800",
    "end": "999839"
  },
  {
    "text": "the second role here allows beanstalk elastic beanstalk to access your resources remember i said that aws is a",
    "start": "999839",
    "end": "1005279"
  },
  {
    "text": "lockdown environment by default nothing could be nothing happen here i'm giving i'm giving permission to the service to",
    "start": "1005279",
    "end": "1010959"
  },
  {
    "text": "say hey you can go and get my deployment bundles my deployment artifacts and do things for me",
    "start": "1010959",
    "end": "1017360"
  },
  {
    "text": "finish this wizard up click deploy",
    "start": "1018079",
    "end": "1022600"
  },
  {
    "text": "so the toolkit's going to build the project for me now deployed out to amazon s3 and then tell beanstalk hey go and stand up the infrastructure to take",
    "start": "1028079",
    "end": "1034798"
  },
  {
    "text": "this simple application and that's going to take us a couple of minutes so while that gets underway",
    "start": "1034799",
    "end": "1041120"
  },
  {
    "text": "let's go and take a look at that role so here i am in the age of aws management console and i'm going to go",
    "start": "1041120",
    "end": "1046880"
  },
  {
    "text": "to the identity access management uh subconsole if you like and you can see i've got groups users roles take a look",
    "start": "1046880",
    "end": "1053760"
  },
  {
    "text": "at some of these in a moment and take a look at roles and i have quite a few roles inside here but the one i'm interested in is this",
    "start": "1053760",
    "end": "1059760"
  },
  {
    "text": "secret sample role and you'll notice that it has some policies attached currently three",
    "start": "1059760",
    "end": "1065039"
  },
  {
    "text": "policies i'm going to come to this middle one in the last demo but you can see that i have a sample ec2 policy here which",
    "start": "1065039",
    "end": "1070960"
  },
  {
    "text": "allows my application to call describe instances so that's how we got the list of my running vms in ec2",
    "start": "1070960",
    "end": "1078559"
  },
  {
    "text": "and i have a sample s3 policy that allows it to list all my buckets right so this this app is really heavily locked down",
    "start": "1078559",
    "end": "1086000"
  },
  {
    "text": "i importantly have trust relationships so here's my trust relationship it says hey if this application is running on",
    "start": "1086240",
    "end": "1091520"
  },
  {
    "text": "ec2 then temporary credentials to it and i can also deploy this app to elastic",
    "start": "1091520",
    "end": "1096640"
  },
  {
    "text": "container service or as a serverless function in lambda so that's why i've got the additional trust relationships",
    "start": "1096640",
    "end": "1102000"
  },
  {
    "text": "on there so very simple role and how did i build it well let's go back to roles",
    "start": "1102000",
    "end": "1107120"
  },
  {
    "text": "and again normally you would do this from infrastructure as code templates or or actual code yourself or using our",
    "start": "1107120",
    "end": "1113200"
  },
  {
    "text": "sdks but let's use the console to do it so i want this app to run on i want my",
    "start": "1113200",
    "end": "1118880"
  },
  {
    "text": "applications using this role to run an aw service so let's say ec2 next i'm going to want to add",
    "start": "1118880",
    "end": "1124640"
  },
  {
    "text": "permissions now there's a couple ways of doing this i can search for things like ec2",
    "start": "1124640",
    "end": "1129840"
  },
  {
    "text": "read-only access if i take a look at this policy on my screen here which is shrunk you'll",
    "start": "1129840",
    "end": "1134880"
  },
  {
    "text": "see that it's got a few more apis uh allowed in it that than i had originally or i can do something like",
    "start": "1134880",
    "end": "1142320"
  },
  {
    "text": "adding an inline policy there let's go back to where i was ec2",
    "start": "1142320",
    "end": "1147360"
  },
  {
    "text": "add permissions okay so instead i'm going to create a policy",
    "start": "1147360",
    "end": "1154240"
  },
  {
    "text": "and i'm going to choose the service that my application is going to call so let's say ec2",
    "start": "1155600",
    "end": "1162000"
  },
  {
    "text": "choose ec2 here and then i have access to what apis can i call so in this case i only want to call describe instances",
    "start": "1162000",
    "end": "1168400"
  },
  {
    "text": "from my application but you can see here that i can call any of the i can select any of the ec2 apis to be applied in",
    "start": "1168400",
    "end": "1175039"
  },
  {
    "text": "this policy i can add additional permissions so let's say i want to also add on the",
    "start": "1175039",
    "end": "1180799"
  },
  {
    "text": "ability in s3 to list all my buckets",
    "start": "1180799",
    "end": "1186080"
  },
  {
    "text": "which is what we just saw in the policy i showed you so review that policy and we're going to",
    "start": "1186080",
    "end": "1192559"
  },
  {
    "text": "call it um demo policy create it",
    "start": "1192559",
    "end": "1199600"
  },
  {
    "text": "okay so that's been done so let's go back to my role now and start creating a role",
    "start": "1200640",
    "end": "1207360"
  },
  {
    "text": "again ec2 is going to be my trust relationship and let's search for my demo policy",
    "start": "1207360",
    "end": "1212880"
  },
  {
    "text": "there it is let's select that and attach it to the role view that and we'll just call it demo",
    "start": "1212880",
    "end": "1218080"
  },
  {
    "text": "roll now all that's done is created",
    "start": "1218080",
    "end": "1225039"
  },
  {
    "text": "effectively a json template that describes the role and the policies so again this is how i would normally do it",
    "start": "1225039",
    "end": "1230559"
  },
  {
    "text": "using iac techniques but in the consoles ui it's easy to understand",
    "start": "1230559",
    "end": "1236960"
  },
  {
    "text": "while we're here let's take a look at some users so you see here's my demo user that i was running with earlier and you'll notice it has administrator",
    "start": "1236960",
    "end": "1243120"
  },
  {
    "text": "access okay i don't have any groups otherwise i'd show you those so let's go back to",
    "start": "1243120",
    "end": "1248240"
  },
  {
    "text": "visual studio which the deployment should be done now it's finished okay so we'll click on the link start the app",
    "start": "1248240",
    "end": "1255520"
  },
  {
    "text": "and you can see that it's again it's listing my amazon s3 buckets and it's listing my ec2 instances in fact there's a new instance arrived here this is the",
    "start": "1255520",
    "end": "1261919"
  },
  {
    "text": "one that we've just launched okay so this is obviously running with credentials from my steve demo account",
    "start": "1261919",
    "end": "1268400"
  },
  {
    "text": "remember that in the code in visual studio on that last run i changed the actual app settings file to be steve",
    "start": "1268400",
    "end": "1274720"
  },
  {
    "text": "death which is a different account that had that gave me different data it doesn't matter that that's in the in",
    "start": "1274720",
    "end": "1280000"
  },
  {
    "text": "the profile sorry in the settings when i deployed the app the app is just going to determine hey that profile is not",
    "start": "1280000",
    "end": "1285440"
  },
  {
    "text": "available are there any credentials in my host environment and let's go from there so that's how we can protect our",
    "start": "1285440",
    "end": "1292000"
  },
  {
    "text": "credentials when we're working locally and then when we deploy to the to the cloud we're going to use a role that",
    "start": "1292000",
    "end": "1297440"
  },
  {
    "text": "role will will event credentials let's head back to the slides",
    "start": "1297440",
    "end": "1303200"
  },
  {
    "text": "so hopefully that clarifies exactly what happens between local development credential profiles",
    "start": "1303200",
    "end": "1309360"
  },
  {
    "text": "and deployed applications right we don't put credential keys in the code not even a works for now fix it later scenario",
    "start": "1309360",
    "end": "1316159"
  },
  {
    "text": "start out with the best of intentions it's really not hard to do um the profile name you put in that code",
    "start": "1316159",
    "end": "1321440"
  },
  {
    "text": "or configuration file doesn't matter check that indicator no one's gonna care um",
    "start": "1321440",
    "end": "1327039"
  },
  {
    "text": "but for deployed applications always use an iam role don't try and put your credential file on the host um because",
    "start": "1327039",
    "end": "1332320"
  },
  {
    "text": "in some cases service for example that's just not going to work you don't have access to the host as a best practice scope those role",
    "start": "1332320",
    "end": "1338799"
  },
  {
    "text": "permissions to what's needed uh and use the trust relationship to say that hey when this app is running on",
    "start": "1338799",
    "end": "1344159"
  },
  {
    "text": "this environment it can get credentials okay storing secrets in the cloud",
    "start": "1344159",
    "end": "1351840"
  },
  {
    "text": "so in this session i'm going to be looking particularly at the top two systems managers parameter store and secrets",
    "start": "1351840",
    "end": "1358559"
  },
  {
    "text": "manager now i'm not really going to cover key management service and certificate manager but they are security services of interest that you",
    "start": "1358559",
    "end": "1364880"
  },
  {
    "text": "might want to take a look at so kms um is a fully managed service it makes it really easy for you to create",
    "start": "1364880",
    "end": "1370640"
  },
  {
    "text": "and manage cryptographic keys and you can control their their use and their access using standard access control",
    "start": "1370640",
    "end": "1376080"
  },
  {
    "text": "policies um all the usage of the kms keys or the keys stored in kms i should say is",
    "start": "1376080",
    "end": "1382080"
  },
  {
    "text": "logged to aws cloud trail so you can see who used your key including aws services um",
    "start": "1382080",
    "end": "1388880"
  },
  {
    "text": "let me see what else i want to say it's integrated with various other services so you will see that when we come to look at parameter store and secrets",
    "start": "1388880",
    "end": "1394559"
  },
  {
    "text": "manage the kms actually surfaces in those consoles that's what's used to do the encryption of the data in those",
    "start": "1394559",
    "end": "1400840"
  },
  {
    "text": "services any keys that get created on your behalf by aws are",
    "start": "1400840",
    "end": "1406960"
  },
  {
    "text": "free but there is a charge for the keys that you create yourself certificate manager",
    "start": "1406960",
    "end": "1413120"
  },
  {
    "text": "this allows you to provision manage ssl certificates which you can then apply to other aws services such as elastic load",
    "start": "1413120",
    "end": "1419600"
  },
  {
    "text": "balancers uh platform distributions etc or even apis if you're using api gateway it",
    "start": "1419600",
    "end": "1426080"
  },
  {
    "text": "automatically handles certificate renewals and you can also provision your own certificates it doesn't have to go",
    "start": "1426080",
    "end": "1431360"
  },
  {
    "text": "through private certificates uh if you need to that's as much as i'm going to go into certificate manager i",
    "start": "1431360",
    "end": "1436799"
  },
  {
    "text": "am not a certificate expert in any way shape or form um but i have worked with parameter store and secrets manager a",
    "start": "1436799",
    "end": "1442480"
  },
  {
    "text": "lot and that's what i use to protect my secrets in the cloud for my applications so let's go take a",
    "start": "1442480",
    "end": "1449039"
  },
  {
    "text": "look at those so we'll start with parameter store so this is a subservice of the overall",
    "start": "1449039",
    "end": "1454400"
  },
  {
    "start": "1450000",
    "end": "1450000"
  },
  {
    "text": "systems manager service and it stores key value data um those values can be",
    "start": "1454400",
    "end": "1459919"
  },
  {
    "text": "plain text they can be a list of plain text strings or they can be secure strings which are",
    "start": "1459919",
    "end": "1465279"
  },
  {
    "text": "encrypted with the kms key so i just mentioned kms and again audit trails can track the parameter usage so you can see",
    "start": "1465279",
    "end": "1471919"
  },
  {
    "text": "who's using your secrets um the id the primary source is ideal just",
    "start": "1471919",
    "end": "1477600"
  },
  {
    "text": "for getting not just configuration data oh sorry i said not just your secrets but your configuration data out of your",
    "start": "1477600",
    "end": "1484159"
  },
  {
    "text": "code base and then recruit recovering it at runtime or build time um on the fly which also means of course",
    "start": "1484159",
    "end": "1491440"
  },
  {
    "text": "we've solved the problem now where we're working at scale and we need to change a particular setting or a particular",
    "start": "1491440",
    "end": "1497440"
  },
  {
    "text": "secret instead of having to go try and find all those ec2 virtual machines or all those containers",
    "start": "1497440",
    "end": "1503120"
  },
  {
    "text": "and changing the values there and redeploying we just change it in the service now we can also apply role-based access",
    "start": "1503120",
    "end": "1509520"
  },
  {
    "text": "control to these parameters we can create individual simple parameters we can create hierarchies parameters",
    "start": "1509520",
    "end": "1516159"
  },
  {
    "text": "um we can also as i mentioned role based control we can set things up so that if we're in a development environment maybe",
    "start": "1516159",
    "end": "1521919"
  },
  {
    "text": "everybody on the team can access a particular parameter that's holding a database password but in production",
    "start": "1521919",
    "end": "1526960"
  },
  {
    "text": "maybe only certain users or certain roles can access it so it's quite a useful service there but",
    "start": "1526960",
    "end": "1532240"
  },
  {
    "text": "remember it stores plain text data as well as secure string data",
    "start": "1532240",
    "end": "1537919"
  },
  {
    "text": "when we name our parameters we can use a simple name my parameter just a simple string",
    "start": "1538159",
    "end": "1543679"
  },
  {
    "text": "or we can create a hierarchy with a shared root key and we call that a path we separate the",
    "start": "1543679",
    "end": "1549200"
  },
  {
    "text": "path components with a slash forward slash there is a limit of five components or five segments in the path that gives you",
    "start": "1549200",
    "end": "1555360"
  },
  {
    "text": "a fair amount of flexibility and there's some use cases shown on this slide so you can see that a lot of users decide",
    "start": "1555360",
    "end": "1561200"
  },
  {
    "text": "that they're going to keep separate environments for their parameters and secrets so a dev environment a prod environment here we've got two",
    "start": "1561200",
    "end": "1568000"
  },
  {
    "text": "connection strings for two sql server instances um one in dev one in prod there's one",
    "start": "1568000",
    "end": "1573840"
  },
  {
    "text": "way you can do it secrets manager on the other hand is",
    "start": "1573840",
    "end": "1578960"
  },
  {
    "start": "1577000",
    "end": "1577000"
  },
  {
    "text": "designed for one thing only storing secrets but it adds some additional capabilities",
    "start": "1578960",
    "end": "1585039"
  },
  {
    "text": "so it can automatically rotate secrets so for example database credentials um",
    "start": "1585039",
    "end": "1590640"
  },
  {
    "text": "the rotation mechanism that it uses is extensible you can deploy serverless functions into lambda that actually uh",
    "start": "1590640",
    "end": "1596240"
  },
  {
    "text": "help control or they'll take part in the credential rotation process uh and it's integrated with amazon's",
    "start": "1596240",
    "end": "1601679"
  },
  {
    "text": "relational database service redshift and documentdb you don't have to do anything again the secrets are encrypted with kms",
    "start": "1601679",
    "end": "1608960"
  },
  {
    "text": "keys and again all access is logged so you can go and see who's taking a look at your your",
    "start": "1608960",
    "end": "1614400"
  },
  {
    "text": "secrets but it it is a chargeable service whereas parameter store has the notion of",
    "start": "1614400",
    "end": "1619760"
  },
  {
    "text": "standard parameters and standard throughput which are just free um with the option of additional payment",
    "start": "1619760",
    "end": "1625520"
  },
  {
    "text": "for a higher throughput with secrets manager it stores the secrets and the api calls to retrieve them so that's one",
    "start": "1625520",
    "end": "1632080"
  },
  {
    "text": "difference so and again the frequent question i get",
    "start": "1632080",
    "end": "1637919"
  },
  {
    "start": "1635000",
    "end": "1635000"
  },
  {
    "text": "when i'm out talking um is you know which one should i use um so for me there's three key differences right parameter store has the ability to store",
    "start": "1637919",
    "end": "1644960"
  },
  {
    "text": "plain text as well as secret data whereas in secrets manager everything's a secret",
    "start": "1644960",
    "end": "1650399"
  },
  {
    "text": "um parameter store is free if you use the standard parameters and throughput whereas secrets manager",
    "start": "1650399",
    "end": "1656720"
  },
  {
    "text": "does have a charge to it um and only secrets manager can rotate credentials and he can also",
    "start": "1656720",
    "end": "1662720"
  },
  {
    "text": "automatically generate random secrets which parameter store cannot they're also integrated though so",
    "start": "1662720",
    "end": "1670159"
  },
  {
    "start": "1668000",
    "end": "1668000"
  },
  {
    "text": "i can make calls to parameter store to retrieve secrets that are in secrets manager now there are some small",
    "start": "1670159",
    "end": "1675279"
  },
  {
    "text": "limitations one is i have to use a particular reserve path syntax to read that secret",
    "start": "1675279",
    "end": "1680720"
  },
  {
    "text": "um you're not allowed to modify secrets so you can't write new secrets through the parameter store api",
    "start": "1680720",
    "end": "1686399"
  },
  {
    "text": "um and there's no versioning but other than that uh it's fairly convenient access and we'll see that later on",
    "start": "1686399",
    "end": "1693840"
  },
  {
    "text": "so let's go take a quick look at what parameters store and secrets manager look like and then we're going to have a look at how we use them uh in outside",
    "start": "1694159",
    "end": "1700159"
  },
  {
    "text": "our applications i again i'm going to start with the management console because it's a visual thing to show in demos but then i'll also show you how",
    "start": "1700159",
    "end": "1706240"
  },
  {
    "text": "you can work with these from the command line and that'll become important when we start talking about build and build tools",
    "start": "1706240",
    "end": "1712399"
  },
  {
    "text": "so back to the management console and um closed and we jump to my console",
    "start": "1712399",
    "end": "1718799"
  },
  {
    "text": "here close this one off so i'm going to jump to parameter store which is in systems manager",
    "start": "1718799",
    "end": "1724960"
  },
  {
    "text": "manager there and here is parameter store",
    "start": "1724960",
    "end": "1731120"
  },
  {
    "text": "and what you'll see is i've created some parameters already so i've got a batch here for my secret sample application",
    "start": "1731120",
    "end": "1736880"
  },
  {
    "text": "i have some generated parameters that i'm going to use inside azure devops shortly and i've got some simple parameters here um",
    "start": "1736880",
    "end": "1743600"
  },
  {
    "text": "let's take a look at one of these so let's take a look at this plain text setting here you can see here's my value",
    "start": "1743600",
    "end": "1749120"
  },
  {
    "text": "associated with that that parameter if i go back to one of the secret uh",
    "start": "1749120",
    "end": "1754159"
  },
  {
    "text": "strings take my secret dbid you'll see that it's masked off automatically in the console",
    "start": "1754159",
    "end": "1759360"
  },
  {
    "text": "and i have to elect to decrypt that that value",
    "start": "1759360",
    "end": "1764640"
  },
  {
    "text": "so these at the top here these uh parameters at the top this is what we call a parameter hierarchy and later on",
    "start": "1765360",
    "end": "1771440"
  },
  {
    "text": "i'm going to read all those parameters with a single call similar for the build ones here",
    "start": "1771440",
    "end": "1777600"
  },
  {
    "text": "how do i create a parameter quite easily and again i can do this from infrastructure's code i can do it through any of the apis for the services",
    "start": "1777840",
    "end": "1784159"
  },
  {
    "text": "using our sdks it's very simple so i just give it a parameter name",
    "start": "1784159",
    "end": "1789760"
  },
  {
    "text": "my prompter name whether i want to standard which is the free or advanced which has charges for",
    "start": "1790720",
    "end": "1796720"
  },
  {
    "text": "it and i have the ability to create a string a string list or a secure string when i choose secure string notice that",
    "start": "1796720",
    "end": "1802720"
  },
  {
    "text": "kms knows surfaces right i can use a key that the service will create for me which is no charge or i can use a key",
    "start": "1802720",
    "end": "1809679"
  },
  {
    "text": "from another account like i said my key alias and here's a secret",
    "start": "1809679",
    "end": "1814960"
  },
  {
    "text": "i'm just going to store that and say create parameter so it's really easy to use",
    "start": "1814960",
    "end": "1820480"
  },
  {
    "text": "secrets manager is very similar um uh to look at so let's take a look at",
    "start": "1820480",
    "end": "1825679"
  },
  {
    "text": "secret manager here in the console so i have two secrets here",
    "start": "1825679",
    "end": "1831760"
  },
  {
    "text": "connection string connection um for password for a database it deeply gives you the sample",
    "start": "1831760",
    "end": "1837760"
  },
  {
    "text": "code by the way that lets you recover in the apis let's take a look at the secret",
    "start": "1837760",
    "end": "1843919"
  },
  {
    "text": "there's the secret values and i can edit in here as well it gives me a nice form to fill this out internally this is just",
    "start": "1844240",
    "end": "1849440"
  },
  {
    "text": "held as a blob of json it's encrypted so here's the plain text version of it",
    "start": "1849440",
    "end": "1854559"
  },
  {
    "text": "now when i create a secret in secrets manager again remember that everything in secret manager is a secret i don't get the",
    "start": "1854559",
    "end": "1860399"
  },
  {
    "text": "option to create a plain text field or anything i can actually wire up credentials for a database so i can go",
    "start": "1860399",
    "end": "1865760"
  },
  {
    "text": "off and choose my username and password for a database that i have uh i can go and choose the database this",
    "start": "1865760",
    "end": "1871360"
  },
  {
    "text": "will apply to that will then hook up to the database recover the endpoint the connection",
    "start": "1871360",
    "end": "1876399"
  },
  {
    "text": "string for the connection etc and store all of that in that consolidated secret for me",
    "start": "1876399",
    "end": "1882080"
  },
  {
    "text": "i'm going to do that here though what i'm going to do now is okay let's go to my console and remember i'm",
    "start": "1882080",
    "end": "1889120"
  },
  {
    "text": "a net and powershell da so powershell is my command line tool of choice um how can i work with this from my dev",
    "start": "1889120",
    "end": "1895919"
  },
  {
    "text": "machine or from my build system so firstly i can look at parameters",
    "start": "1895919",
    "end": "1902399"
  },
  {
    "text": "parameter store with a command link called get ssn parameter list now the for those who have not seen our agent's powershell",
    "start": "1902399",
    "end": "1908720"
  },
  {
    "text": "tools let me scroll up briefly for a second this three-letter prefix here is just how we",
    "start": "1908720",
    "end": "1914159"
  },
  {
    "text": "name space the commands because various ada services have the same api name this",
    "start": "1914159",
    "end": "1919600"
  },
  {
    "text": "just lets us have different commands for the same for different services that have the same api name you can see that",
    "start": "1919600",
    "end": "1924960"
  },
  {
    "text": "it's recovering the name of my secrets that we just saw inside the console",
    "start": "1924960",
    "end": "1930640"
  },
  {
    "text": "cool let's clear that how do i get a particular parameter well i can call get ssm parameter and give it",
    "start": "1930640",
    "end": "1936720"
  },
  {
    "text": "a name and let's call let's use one of my build um let's use a plain text setting i",
    "start": "1936720",
    "end": "1942399"
  },
  {
    "text": "think i had that one in there you can see it's retrieved the value here of that parameter",
    "start": "1942399",
    "end": "1949519"
  },
  {
    "text": "i can do the same thing for a secret so i should call secret one but notice",
    "start": "1949519",
    "end": "1956320"
  },
  {
    "text": "that the value is encrypted to actually get the value back i need to add a flag called with descript with",
    "start": "1956320",
    "end": "1962000"
  },
  {
    "text": "decryption and now i can see the actual value of the secret okay",
    "start": "1962000",
    "end": "1968000"
  },
  {
    "text": "now i mentioned that one of the cool things about parameter store is i can get a whole batch of parameters",
    "start": "1968000",
    "end": "1973360"
  },
  {
    "text": "get primary path i can get them all in a batch so here i just give it a path",
    "start": "1973360",
    "end": "1980159"
  },
  {
    "text": "not that one slash path slash build i don't think i actually had",
    "start": "1980159",
    "end": "1986000"
  },
  {
    "text": "any underneath here but just in case there were any deeper ones you'll see that what this is retrieved back is all",
    "start": "1986000",
    "end": "1992799"
  },
  {
    "text": "the parameters that are under the build um common key common shared root key",
    "start": "1992799",
    "end": "1999919"
  },
  {
    "text": "so that's working with parameter store from the command line and if you're using the aws cli it has exactly the same commands different names obviously",
    "start": "1999919",
    "end": "2006480"
  },
  {
    "text": "the aws ssm i think it is and then uh the actual api name but you can do the",
    "start": "2006480",
    "end": "2012960"
  },
  {
    "text": "same things i can work with secrets manager as well from powershell sec is the command line",
    "start": "2012960",
    "end": "2020080"
  },
  {
    "text": "here so or is the command line so get a cc secret list gives me back the two secrets that i have held",
    "start": "2020080",
    "end": "2027120"
  },
  {
    "text": "i can do a i can call and get a particular secret i give it the secret id so let's look at my example db secret",
    "start": "2027120",
    "end": "2034399"
  },
  {
    "text": "that i had and you'll see that this time the value doesn't come back",
    "start": "2034399",
    "end": "2039600"
  },
  {
    "text": "to do that i have to call a different command get ecc secret value and that brings me back the security",
    "start": "2039600",
    "end": "2045919"
  },
  {
    "text": "string that is my data okay so why am i showing you these commands",
    "start": "2045919",
    "end": "2051200"
  },
  {
    "text": "because when we come to our build system where we want to protect secrets there we're probably going to want to script",
    "start": "2051200",
    "end": "2056240"
  },
  {
    "text": "some solution to pull secrets down at runtime build time sorry and maybe inject them into the code that we're",
    "start": "2056240",
    "end": "2061358"
  },
  {
    "text": "building or use them to access resources or pieces of work so that's one way you can do this in ci cd systems where you",
    "start": "2061359",
    "end": "2068560"
  },
  {
    "text": "might not have pre-built tasks okay back to slides",
    "start": "2068560",
    "end": "2075200"
  },
  {
    "text": "so we like took a very quick look there using parameter store and secrets manager to put secrets and retrieve",
    "start": "2075200",
    "end": "2080800"
  },
  {
    "text": "secrets at run time or build time and we'll use the console just to have spelunk around take a look but more",
    "start": "2080800",
    "end": "2086800"
  },
  {
    "text": "commonly you're going to be using things like command line tools asus tools for powershell or the aws cli or you might",
    "start": "2086800",
    "end": "2092398"
  },
  {
    "text": "do this for inside your own application as we'll see later on",
    "start": "2092399",
    "end": "2097118"
  },
  {
    "text": "so now that we know how to work with secrets uh they're held in a credentials in in stores in the cloud let's go and",
    "start": "2098240",
    "end": "2104400"
  },
  {
    "text": "see how we can use this inside our build systems so here i'm talking about things like certificates for code and artifact",
    "start": "2104400",
    "end": "2110320"
  },
  {
    "start": "2107000",
    "end": "2107000"
  },
  {
    "text": "signing or generating new secrets maybe my build generates a new password for a database",
    "start": "2110320",
    "end": "2115760"
  },
  {
    "text": "and then wants to store it where is he going to put it the thing with this is though that one",
    "start": "2115760",
    "end": "2121119"
  },
  {
    "text": "person's okay is a plain string is another's critical secret all right there are multiple scenarios for example",
    "start": "2121119",
    "end": "2126800"
  },
  {
    "text": "when we're writing blog posts for aws some of the blog post developers think that their account id is a secret and",
    "start": "2126800",
    "end": "2134000"
  },
  {
    "text": "we'll blur it out screenshots others don't bother multiple different scenarios",
    "start": "2134000",
    "end": "2139680"
  },
  {
    "text": "the i mentioned about certificates here is another example from working on the sdk",
    "start": "2139680",
    "end": "2145119"
  },
  {
    "text": "team so we digitally sign our build artifacts so that's our msi installers",
    "start": "2145119",
    "end": "2150480"
  },
  {
    "text": "our powershell modules our visual studio and vs code extensions etc and we to do that we use a password protected",
    "start": "2150480",
    "end": "2156400"
  },
  {
    "text": "certificate file so what we do is we put the password into secrets manager",
    "start": "2156400",
    "end": "2162079"
  },
  {
    "text": "and then add build time on the build server the build host we retrieve that secret it allows us to rotate that",
    "start": "2162079",
    "end": "2167440"
  },
  {
    "text": "secret password if we need to or if the certificate changes it's quite easy we can also limit the credentials that",
    "start": "2167440",
    "end": "2173680"
  },
  {
    "text": "are allowed to access that that secret to get that password because we don't want anybody going to our builds build host and grabbing our password and then",
    "start": "2173680",
    "end": "2180640"
  },
  {
    "text": "passing off their work as ours um the pfx file we decided to leave on the build server",
    "start": "2180640",
    "end": "2186560"
  },
  {
    "text": "arguably we could have just put it into an amazon s3 bucket again with limited credentials and pulled it down at runtime",
    "start": "2186560",
    "end": "2192160"
  },
  {
    "text": "so you know when we're talking about builds we're talking not just consumption of secrets but creation of",
    "start": "2192160",
    "end": "2197359"
  },
  {
    "text": "secrets as well um so let's go and take a look at what we can do with that and in this",
    "start": "2197359",
    "end": "2204000"
  },
  {
    "text": "particular demo i've shown you the command line options for working with secrets from powershell and age with cli if you're",
    "start": "2204000",
    "end": "2210800"
  },
  {
    "text": "using that i'm going to take a specific example here the adwords tools for azure devops so if any of you are using azure",
    "start": "2210800",
    "end": "2216720"
  },
  {
    "text": "devops and you want to work with secrets in there um let's go take a look",
    "start": "2216720",
    "end": "2222000"
  },
  {
    "text": "we're back in the browser i have a very simple project serpent your devops here it has no code in it",
    "start": "2222000",
    "end": "2229040"
  },
  {
    "text": "but it does have a build pipeline so we're going to take a look at my pipelines",
    "start": "2229040",
    "end": "2234560"
  },
  {
    "text": "and here it is and i'm going to edit this now in this particular instance of azure",
    "start": "2234560",
    "end": "2239680"
  },
  {
    "text": "devops i've got the aws tools for azure devops installed and that gives me access to a whole load of tasks",
    "start": "2239680",
    "end": "2245920"
  },
  {
    "text": "for working with various aws services i can download content from s3 maybe i want to download that pfx that",
    "start": "2245920",
    "end": "2252240"
  },
  {
    "text": "certificate file at build time fetch the secret from somewhere else and then use that to do digital signing or",
    "start": "2252240",
    "end": "2257839"
  },
  {
    "text": "maybe i want to inject some content into my release builds that my developers don't have access to during on their",
    "start": "2257839",
    "end": "2263200"
  },
  {
    "text": "development machines that's another scenario there's a whole bunch of tests in here but i've added some into my pipeline",
    "start": "2263200",
    "end": "2269359"
  },
  {
    "text": "here where i'm replicating what i just did at the command line with those those commands so this for example is",
    "start": "2269359",
    "end": "2275680"
  },
  {
    "text": "retrieving all of the parameters under the build key and then what it does is i have the ability to then take those values",
    "start": "2275680",
    "end": "2283280"
  },
  {
    "text": "and inject them into my downstream tasks as build variables using the either the parameter names or",
    "start": "2283280",
    "end": "2289119"
  },
  {
    "text": "i can use custom names etc i can get value for a single parameter or an entire hierarchy",
    "start": "2289119",
    "end": "2295280"
  },
  {
    "text": "you'll notice i've got credentials set up here where are those coming from if i jump to new here this is how i can",
    "start": "2295280",
    "end": "2301440"
  },
  {
    "text": "set up a new service connection and remember my credential profile earlier i had the access key secret access key i",
    "start": "2301440",
    "end": "2306880"
  },
  {
    "text": "can also use roles so now i can use roles on my build servers as well in fact if i go and take a look at",
    "start": "2306880",
    "end": "2313760"
  },
  {
    "text": "i am on here and show you that for my build credentials",
    "start": "2313760",
    "end": "2321119"
  },
  {
    "text": "i go to my users here here's the credentials i'm using on my build server you'll notice that the policies only allow me access to",
    "start": "2321119",
    "end": "2328320"
  },
  {
    "text": "parameter store and secrets manager nothing else specifically for this demo",
    "start": "2328320",
    "end": "2333440"
  },
  {
    "text": "so that's one way i can scope down my build server i can equally get values from secrets",
    "start": "2333440",
    "end": "2340079"
  },
  {
    "text": "manager so i can pull the secret to that example db connection string data that i've got in there and again i can have",
    "start": "2340079",
    "end": "2345599"
  },
  {
    "text": "that injected into my build um as a name let's have a couple of powershell scripts that just echo this in the build",
    "start": "2345599",
    "end": "2352079"
  },
  {
    "text": "console we're going to take a look at in a minute uh i can retrieve secrets so this was an example of retrieving the secret in",
    "start": "2352079",
    "end": "2358720"
  },
  {
    "text": "secrets manager through parameter store this is an example of going directly to secrets manager to get the secret",
    "start": "2358720",
    "end": "2364960"
  },
  {
    "text": "and again i'm going to output that and then part of my build you know i might want to create new secrets and store them so there's",
    "start": "2364960",
    "end": "2370800"
  },
  {
    "text": "options to create secure string uh values in parameter store or i can create an update secrets in secrets in",
    "start": "2370800",
    "end": "2377520"
  },
  {
    "text": "secrets manager so let's run this pipeline",
    "start": "2377520",
    "end": "2382880"
  },
  {
    "text": "and just take a look at what happens",
    "start": "2382880",
    "end": "2386920"
  },
  {
    "text": "so we can see the tasks running now",
    "start": "2401760",
    "end": "2405280"
  },
  {
    "text": "okay cool so here was the first task to retrieve parameters from parameter store",
    "start": "2407200",
    "end": "2412240"
  },
  {
    "text": "and hopefully you can see this if i can jump this up a little bit in size you can see that it's reading a parameter",
    "start": "2412240",
    "end": "2417520"
  },
  {
    "text": "hierarchies pulling down all of those configuration keys that were underneath the common slash build root and then",
    "start": "2417520",
    "end": "2424400"
  },
  {
    "text": "it's transformed i elected to transform it so i've created parameters with these variable names",
    "start": "2424400",
    "end": "2431200"
  },
  {
    "text": "and notice this one here is secret is true the way this task works is it knows it's a secure string that it's",
    "start": "2431200",
    "end": "2436800"
  },
  {
    "text": "retrieving so it creates an automatically masked variable inside the azure devops environment so all the",
    "start": "2436800",
    "end": "2443040"
  },
  {
    "text": "console logging will be automatically masked it won't show the value so again another way of protecting my secrets",
    "start": "2443040",
    "end": "2450720"
  },
  {
    "text": "and i made a call to get the data from parameter store sorry from secrets manager using",
    "start": "2450880",
    "end": "2456560"
  },
  {
    "text": "sorry from secrets manager using the parameter store reference and then i put those those values and",
    "start": "2456560",
    "end": "2462880"
  },
  {
    "text": "notice a couple of things now i when i put this demo together the other day i looked at this and thought that's strange because i was expecting to see",
    "start": "2462880",
    "end": "2469760"
  },
  {
    "text": "this masking applied here and i think what i've done is i've uncovered a bug uh in the via in devops tools that i'm",
    "start": "2469760",
    "end": "2477280"
  },
  {
    "text": "following up with the with the service team but there's an important point to be made here and that is don't assume that your build",
    "start": "2477280",
    "end": "2483920"
  },
  {
    "text": "environment is secure okay treat it as though it's compromised and then work backwards from that as to",
    "start": "2483920",
    "end": "2490160"
  },
  {
    "text": "be do i really want to echo this to logs etc etc okay",
    "start": "2490160",
    "end": "2495920"
  },
  {
    "text": "again secrets manager you can see it's read back the value here i didn't echo anything out but in here i've echoed it",
    "start": "2495920",
    "end": "2502079"
  },
  {
    "text": "the value and you can see again it's it's open so i'm going to check into that and see if that's actually i don't",
    "start": "2502079",
    "end": "2507920"
  },
  {
    "text": "believe that's by design um i certainly don't feel that it should be doing it that way but",
    "start": "2507920",
    "end": "2514160"
  },
  {
    "text": "the way it is right now um here's where it created a secret so you'll see here i'm simulating creating",
    "start": "2514160",
    "end": "2519680"
  },
  {
    "text": "um a database password on the fly and then storing it into",
    "start": "2519680",
    "end": "2525119"
  },
  {
    "text": "the services and here i'm doing a create update in fact let's go and take a look at those two",
    "start": "2525119",
    "end": "2531599"
  },
  {
    "text": "values we should see two new versions or or secrets coming out so here's my",
    "start": "2531599",
    "end": "2537760"
  },
  {
    "text": "generated parameter of my build you can see it's updated uh i'm guessing it's midnight in the uk",
    "start": "2537760",
    "end": "2543599"
  },
  {
    "text": "right now late afternoon in seattle what i did was i put the build number on",
    "start": "2543599",
    "end": "2548800"
  },
  {
    "text": "the back end so there's my updated parameter so from my build i can generate secure strings",
    "start": "2548800",
    "end": "2554720"
  },
  {
    "text": "and store them or plain text in secrets manager we should see that the secret was updated",
    "start": "2554720",
    "end": "2561359"
  },
  {
    "text": "from the build and if i retrieve the secret value there's bill 23 so again",
    "start": "2561359",
    "end": "2566560"
  },
  {
    "text": "way of doing uh automatic generation of secrets now if this was a real database password i would probably want to make",
    "start": "2566560",
    "end": "2572720"
  },
  {
    "text": "use of secrets manager's ability to generate random passwords uh i could use either the agency li to do that or the",
    "start": "2572720",
    "end": "2579119"
  },
  {
    "text": "powershell tools get that value put it into a parameter and then send it",
    "start": "2579119",
    "end": "2584160"
  },
  {
    "text": "to the to the service so very very easy to use um sorry",
    "start": "2584160",
    "end": "2589920"
  },
  {
    "text": "recommend if you if you're using devops and you want to work with secrets on aws check those tasks out because they make",
    "start": "2589920",
    "end": "2595119"
  },
  {
    "text": "it very very easy to to store your secrets and work with secrets inside your builds",
    "start": "2595119",
    "end": "2600720"
  },
  {
    "text": "all right back to slides so as i just said use the command line tools um if you're using aws's own ci cd",
    "start": "2600720",
    "end": "2608240"
  },
  {
    "text": "services so uh code pipeline code build quick deploy you can use the command line tools",
    "start": "2608240",
    "end": "2614240"
  },
  {
    "text": "for azure devops we have specific tasks i just showed you and again to make the key point begin from the premise that",
    "start": "2614240",
    "end": "2620560"
  },
  {
    "text": "your build host is not a secure environment all right so lock down your access to those secrets",
    "start": "2620560",
    "end": "2626800"
  },
  {
    "text": "um and consider you know where do you need to show them how do i need to store them inside my my environment",
    "start": "2626800",
    "end": "2635400"
  },
  {
    "text": "so that brings me to the final set of secrets to cover which are runtime um secrets that my application wants so i",
    "start": "2635440",
    "end": "2641599"
  },
  {
    "text": "really want to show how easy this is because remember i said earlier on that we sometimes we start from we kind of",
    "start": "2641599",
    "end": "2647119"
  },
  {
    "text": "have the best intentions i'll fix it later i'll get this secret out of my code before i push it to get up",
    "start": "2647119",
    "end": "2652400"
  },
  {
    "text": "and then we forget um and then we're in trouble right so if it's really easy to do",
    "start": "2652400",
    "end": "2658079"
  },
  {
    "text": "we're more likely to start from a best best practice or best principles then we are to do the quick and dirty fix and",
    "start": "2658079",
    "end": "2664240"
  },
  {
    "text": "forget about it later and again i'm talking about common common secrets here database connection",
    "start": "2664240",
    "end": "2669760"
  },
  {
    "start": "2666000",
    "end": "2666000"
  },
  {
    "text": "strings passwords api keys encryption keys okay",
    "start": "2669760",
    "end": "2675119"
  },
  {
    "text": "should we put them in our code and config files i think you probably know my opinion right now uh it's a big fat no all right let's start from best",
    "start": "2675119",
    "end": "2681920"
  },
  {
    "text": "practices best principles now earlier on i showed you using parameter",
    "start": "2681920",
    "end": "2687520"
  },
  {
    "start": "2685000",
    "end": "2685000"
  },
  {
    "text": "store and secrets manager from the console and the command line tools you can also do this inside your application",
    "start": "2687520",
    "end": "2693760"
  },
  {
    "text": "code and i'm going to show you it shortly if you're a net developer though",
    "start": "2693760",
    "end": "2699680"
  },
  {
    "text": "now we have a couple of additional extension libraries that you can use that make this so so easy",
    "start": "2699680",
    "end": "2705520"
  },
  {
    "text": "um firstly we have a configuration provider for systems manager's parameter store there's a new get package listed",
    "start": "2705520",
    "end": "2711760"
  },
  {
    "text": "there and the source code is open source on github and then we also have a caching some",
    "start": "2711760",
    "end": "2717839"
  },
  {
    "text": "client-side caching for secrets manager now remember that one of the differences between secrets manager and parameter",
    "start": "2717839",
    "end": "2723359"
  },
  {
    "text": "store is that secrets manager does ch does have a charge associated with it to both retrieve and store so you not want",
    "start": "2723359",
    "end": "2729680"
  },
  {
    "text": "to be going to hitting secrets manager all the time to retrieve that secret and we want to probably be cashing it um",
    "start": "2729680",
    "end": "2736400"
  },
  {
    "text": "so we have a library for that as well all the languages though all the",
    "start": "2736400",
    "end": "2742400"
  },
  {
    "text": "language sdks the the aws events uh python javascript java",
    "start": "2742400",
    "end": "2748800"
  },
  {
    "text": "ruby you name it they can all access the aws uh service apis to do the work that",
    "start": "2748800",
    "end": "2754400"
  },
  {
    "text": "these libraries are doing so you can build this yourself um there's nothing in here that's a",
    "start": "2754400",
    "end": "2759760"
  },
  {
    "text": "secret which is kind of ironic um you could build these loaders yourself add them to your code or just call the",
    "start": "2759760",
    "end": "2765359"
  },
  {
    "text": "raw apis they're all available to you to use",
    "start": "2765359",
    "end": "2771279"
  },
  {
    "text": "so let's go and take a look at how easy this is and i think you might be a little bit surprised",
    "start": "2771520",
    "end": "2777119"
  },
  {
    "text": "so let's go back to my application here and remember that it's still looking at",
    "start": "2777119",
    "end": "2782400"
  },
  {
    "text": "my profile here i'm not going to change that but what i am going to do is inside the program file here",
    "start": "2782400",
    "end": "2790640"
  },
  {
    "text": "there's a couple of things i've done so firstly in my new package dependencies i've added a dependency",
    "start": "2790640",
    "end": "2797040"
  },
  {
    "text": "on the systems manager nuget package",
    "start": "2797040",
    "end": "2802400"
  },
  {
    "text": "then when i'm creating my host builder this is an asp.net core application",
    "start": "2802400",
    "end": "2808400"
  },
  {
    "text": "it's one line let's just comment that line out right now there we go that's it",
    "start": "2809839",
    "end": "2817440"
  },
  {
    "text": "add systems manager and then you give it the key the root key that you want the uh to fetch the",
    "start": "2817440",
    "end": "2822960"
  },
  {
    "text": "configuration and secrets from as it starts up and you can have this automatically",
    "start": "2822960",
    "end": "2829040"
  },
  {
    "text": "retrieve on a time basis if you want um he's just using a one-time",
    "start": "2829040",
    "end": "2834160"
  },
  {
    "text": "query and that will inject the values inside that",
    "start": "2834160",
    "end": "2839359"
  },
  {
    "text": "that live underneath that common route into the configuration system of asp.net core",
    "start": "2839359",
    "end": "2845040"
  },
  {
    "text": "so what i've done is i've added a class here now you wouldn't normally put",
    "start": "2845040",
    "end": "2850960"
  },
  {
    "text": "echo these to the screen but that's exactly what i'm going to do i've created a simple c-sharp class that",
    "start": "2850960",
    "end": "2856000"
  },
  {
    "text": "represents the settings that we're inside that sequence manager sorry parameter store okay in fact let's go",
    "start": "2856000",
    "end": "2862480"
  },
  {
    "text": "and refresh our memory of what those parameters look like",
    "start": "2862480",
    "end": "2869200"
  },
  {
    "text": "they'll go back to parameter store and here are the secrets",
    "start": "2869280",
    "end": "2874960"
  },
  {
    "text": "or and plain text configuration values that i'm going to read at runtime so these correspond to",
    "start": "2874960",
    "end": "2881359"
  },
  {
    "text": "the field nodes in this class if i then go to my index file here",
    "start": "2881359",
    "end": "2887599"
  },
  {
    "text": "and what i'm going to do is i'm going to take this section of code",
    "start": "2887599",
    "end": "2893520"
  },
  {
    "text": "and this is how i get pull the values from what's been retrieved um under the",
    "start": "2894240",
    "end": "2901119"
  },
  {
    "text": "the common root into that c sharp object that i can then go and work with right uh yeah just work with them individually",
    "start": "2901119",
    "end": "2906880"
  },
  {
    "text": "from configuration in this case i just put them all into a into a single class now remember that",
    "start": "2906880",
    "end": "2913040"
  },
  {
    "text": "to retrieve secrets in secrets manager through the parameter store api i need to use a specific",
    "start": "2913040",
    "end": "2918559"
  },
  {
    "text": "path slash aws reference secrets manager and then the secret id",
    "start": "2918559",
    "end": "2923920"
  },
  {
    "text": "so that's how i'm going to do it here and what i'm going to do is i'm actually going to retrieve the name of the secret from parameter store which in itself is",
    "start": "2923920",
    "end": "2930559"
  },
  {
    "text": "a is a secured string and i'm going to just create a service client to",
    "start": "2930559",
    "end": "2935839"
  },
  {
    "text": "systems manager um this will be familiar if you've used any of our sdks if you haven't i'm not",
    "start": "2935839",
    "end": "2941599"
  },
  {
    "text": "going to go into it here but it's very simple i'm just creating a net class that represents the service that class has methods on it that represent the",
    "start": "2941599",
    "end": "2948400"
  },
  {
    "text": "apis of that service and i'm going to call a particular api called getparameter",
    "start": "2948400",
    "end": "2953680"
  },
  {
    "text": "and that's going to retrieve for me the value of the secret it's going to forward that call through to secrets manager get the value of the secret and",
    "start": "2953680",
    "end": "2960079"
  },
  {
    "text": "then i'm going to echo it to the screen so on my my ui here as i scroll through to the",
    "start": "2960079",
    "end": "2966559"
  },
  {
    "text": "bottom here you'll see that i just have a section at the bottom here because the scrolling but i'm just going to echo all the parameters that i've",
    "start": "2966559",
    "end": "2972559"
  },
  {
    "text": "retrieved so let's deploy this and what i'm going to do is actually deploy this to",
    "start": "2972559",
    "end": "2978240"
  },
  {
    "text": "my test environment that i created earlier on",
    "start": "2978240",
    "end": "2983720"
  },
  {
    "text": "let's deploy that and then we're going to take a look at the role that i set up that i showed you at the very start of the talk and see",
    "start": "2985440",
    "end": "2991359"
  },
  {
    "text": "how it's able to call systems manager and secrets management",
    "start": "2991359",
    "end": "2996400"
  },
  {
    "text": "so let's deploy now there's now updating the deployed",
    "start": "2996400",
    "end": "3001839"
  },
  {
    "text": "application so let's go back to my management console go back into identity and access",
    "start": "3001839",
    "end": "3006880"
  },
  {
    "text": "management and take a look at the actual role that i'm using which is very similar to the",
    "start": "3006880",
    "end": "3012640"
  },
  {
    "text": "demo role i set up earlier here it is secret sample role and remember this is the one that has",
    "start": "3012640",
    "end": "3018640"
  },
  {
    "text": "the three trust relationships on it and three sets of three policy permissions so ec2 and s3 policy we saw those",
    "start": "3018640",
    "end": "3025520"
  },
  {
    "text": "earlier on i'm going to repeat those but here's my read secrets policy that i attached and if i scroll through you can see that",
    "start": "3025520",
    "end": "3032000"
  },
  {
    "text": "i'm allowing access to get secret value get parameters by path this one i",
    "start": "3032000",
    "end": "3037359"
  },
  {
    "text": "absolutely need to use that extension library and i also decided to get parameter just because i noticed that",
    "start": "3037359",
    "end": "3043760"
  },
  {
    "text": "i've scoped down my resources now in this particular case i'm allowing it to read any secret and any parameter",
    "start": "3043760",
    "end": "3049440"
  },
  {
    "text": "inside my account but i could scope this further i could say this policy only applies to my",
    "start": "3049440",
    "end": "3054640"
  },
  {
    "text": "sample secrets root or my particular secret in secrets manager okay depends on how how locked down you want",
    "start": "3054640",
    "end": "3061680"
  },
  {
    "text": "this to be in this particular case i'm just going to let it read any secret in any parameter that i have",
    "start": "3061680",
    "end": "3067760"
  },
  {
    "text": "so let's go back to visual studio and hopefully we've updated yep done so let's bring up the application",
    "start": "3067760",
    "end": "3074960"
  },
  {
    "text": "and there's my s3 buckets and instances that i had earlier on let's take a look at my runtime secrets and here they are",
    "start": "3074960",
    "end": "3081280"
  },
  {
    "text": "so you can see that it's pulled back so that call to that extension library of adding the slash secret sample root key",
    "start": "3081280",
    "end": "3087839"
  },
  {
    "text": "has pulled back setting one setting two and the two secrets and you can see here the value of the secrets now obviously",
    "start": "3087839",
    "end": "3093680"
  },
  {
    "text": "sorry you wouldn't do this in real life you wouldn't echo the secrets to screen but it'd be a very dull demo if i just",
    "start": "3093680",
    "end": "3099359"
  },
  {
    "text": "masked out the values and here's what it used get parameter to read the secret so it went it to",
    "start": "3099359",
    "end": "3105040"
  },
  {
    "text": "parameter store using the get parameter api using the key path that meant hey this is actually",
    "start": "3105040",
    "end": "3110319"
  },
  {
    "text": "in secrets manager read back the secret and there's my connection string data to my fake",
    "start": "3110319",
    "end": "3115680"
  },
  {
    "text": "database that i have inside amazon rds",
    "start": "3115680",
    "end": "3122640"
  },
  {
    "text": "okay so that's how we can work with secrets at runtime it does not have to be tedious right if you're a net developer",
    "start": "3122720",
    "end": "3129599"
  },
  {
    "text": "we can make use of extension libraries to do this it's like i just showed you it's a one-line call it's really really",
    "start": "3129599",
    "end": "3134960"
  },
  {
    "text": "easy um and again if convenient libraries don't exist for your particular language use the public apis or maybe contribute",
    "start": "3134960",
    "end": "3141680"
  },
  {
    "text": "a library in that particular language that everyone else can use some of you might be sitting thinking well that's all that's all great and",
    "start": "3141680",
    "end": "3148079"
  },
  {
    "text": "such but my app still uses asp.net well okay um",
    "start": "3148079",
    "end": "3154160"
  },
  {
    "text": "there is some code you can pick up it's not an aws official library by any means it",
    "start": "3154160",
    "end": "3159760"
  },
  {
    "text": "was a proof of concept by one of our other da's and solution architects kirk davis but he put this together there's a",
    "start": "3159760",
    "end": "3165839"
  },
  {
    "text": "link there too you can go and take a look at the code and that gives lets you to use the same techniques inside an asp.net",
    "start": "3165839",
    "end": "3171839"
  },
  {
    "text": "application so let's finish with a recap so we went",
    "start": "3171839",
    "end": "3177440"
  },
  {
    "start": "3177000",
    "end": "3177000"
  },
  {
    "text": "through protecting our credentials right not putting credentials inside our source files or config files use a",
    "start": "3177440",
    "end": "3182880"
  },
  {
    "text": "credential profile doesn't matter when you deploy if that profile name is inside the code nobody cares we're going",
    "start": "3182880",
    "end": "3188319"
  },
  {
    "text": "to use a role and that role with the trust relationship will then credentials temporary automatically rotating",
    "start": "3188319",
    "end": "3194000"
  },
  {
    "text": "credentials um you don't need to deploy credential files you don't need to put credentials inside your code",
    "start": "3194000",
    "end": "3199839"
  },
  {
    "text": "but then forget put them under github or any other public rebalance using parameter store from systems",
    "start": "3199839",
    "end": "3206160"
  },
  {
    "text": "manager and secrets managed to get secrets that i'm going to use maybe inside my tooling from the command",
    "start": "3206160",
    "end": "3211520"
  },
  {
    "text": "line and my build systems i'll add runtime with my application runs okay",
    "start": "3211520",
    "end": "3216960"
  },
  {
    "text": "um pull all that data in runtime it also means that i can easily share that across teams um you know i'm not running",
    "start": "3216960",
    "end": "3222400"
  },
  {
    "text": "around with a thumb drive with secrets on or hey just take this latest configuration data from me it makes that",
    "start": "3222400",
    "end": "3227839"
  },
  {
    "text": "super super easy i'll leave you with some useful links to",
    "start": "3227839",
    "end": "3233760"
  },
  {
    "text": "some of our homepages for net um the the second one is really important that's where you'll find all of our open",
    "start": "3233760",
    "end": "3239839"
  },
  {
    "text": "source extensions that's where you'll find that secrets manager caching library and parameter store extension library amongst other uh open source",
    "start": "3239839",
    "end": "3246880"
  },
  {
    "text": "libraries that we have for dot net developers and there's a couple of courses on there on aws again if you're a net developer",
    "start": "3246880",
    "end": "3253359"
  },
  {
    "text": "help you get up and running pretty quickly don't forget uh we are giving away a",
    "start": "3253359",
    "end": "3259200"
  },
  {
    "text": "star wars lego at the aws booth um so do come along and sign up um because if you",
    "start": "3259200",
    "end": "3264640"
  },
  {
    "text": "know if there are no winners bill and i get to fight over who gets to take the lego home and i suspect i'll win",
    "start": "3264640",
    "end": "3270319"
  },
  {
    "text": "um um but yeah come on come and sign up get yourself a lego set",
    "start": "3270319",
    "end": "3276640"
  },
  {
    "text": "if you win and with that thank you for coming along to the session i hope you picked up some",
    "start": "3276640",
    "end": "3281920"
  },
  {
    "text": "uh tips and techniques that you can use to protect your secrets um feel free to reach out to me there um if there were",
    "start": "3281920",
    "end": "3288720"
  },
  {
    "text": "any questions i think we only have a few minutes left anyway um and bill hasn't answered them then feel free to pop",
    "start": "3288720",
    "end": "3294319"
  },
  {
    "text": "along to the lounge and be hanging out there for a little while and happy to chat there",
    "start": "3294319",
    "end": "3300319"
  },
  {
    "text": "with that thanks for listening",
    "start": "3300319",
    "end": "3304759"
  },
  {
    "text": "you",
    "start": "3310319",
    "end": "3312400"
  }
]