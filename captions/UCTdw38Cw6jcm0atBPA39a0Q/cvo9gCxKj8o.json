[
  {
    "text": "all right so welcome to this talk about",
    "start": "5690",
    "end": "12510"
  },
  {
    "text": "crypto we have a narrow room for a narrower topic so that's good that's a good start",
    "start": "12510",
    "end": "19369"
  },
  {
    "text": "what I'm going to show you today is some of the ways that we can use crypto wrong and I'm going to show you that because",
    "start": "19440",
    "end": "26070"
  },
  {
    "text": "it's important and because people tend to do lots of crazy stuff with crypto",
    "start": "26070",
    "end": "31920"
  },
  {
    "text": "and it's harder than you might think so with crypto I mean cryptography not",
    "start": "31920",
    "end": "38520"
  },
  {
    "text": "crypto coins so no bitcoins or anything in this talk sorry if that's why okay my",
    "start": "38520",
    "end": "46620"
  },
  {
    "text": "name is Alan I am from a company called Blanc in Oslo in Norway I work as a",
    "start": "46620",
    "end": "52980"
  },
  {
    "text": "developer on my day job but I also do security testing and recently starting doing some bug bounty hunting as well",
    "start": "52980",
    "end": "59399"
  },
  {
    "text": "I'm also the creator and maintainer of retire jeaious if you ever used that and I'm head of the OS Norway chapter as",
    "start": "59399",
    "end": "65158"
  },
  {
    "text": "well and I'm not a crypto expert I'm a developer crypto experts they are a different breed and they know a lot",
    "start": "65159",
    "end": "71939"
  },
  {
    "text": "about this stuff a lot more about this stuff than I do but I thought I'd bring some of the stuff that I found during",
    "start": "71939",
    "end": "78479"
  },
  {
    "text": "both security tests and research to you guys and then hopefully you learned some",
    "start": "78479",
    "end": "83729"
  },
  {
    "text": "from it so why are we using crypto well basically for a confidentiality that's",
    "start": "83729",
    "end": "89700"
  },
  {
    "text": "the most common part like we want to protect something we don't want anyone else to be able to read it we might also",
    "start": "89700",
    "end": "95579"
  },
  {
    "text": "use it for authentication or integrity we want to protect something or show that this is the same thing that I sent",
    "start": "95579",
    "end": "101700"
  },
  {
    "text": "I'm the provider of this content we and we don't necessarily need to have both",
    "start": "101700",
    "end": "107759"
  },
  {
    "text": "confidentiality and integrity like we could sign a token and that could be a public token but it's signed by us so we",
    "start": "107759",
    "end": "114630"
  },
  {
    "text": "provide integrity as a part of it then we can use that for identification Bruce",
    "start": "114630",
    "end": "120899"
  },
  {
    "text": "Schneier is a wise man and he said that anyone from the most clueless amateurs the best cryptographer can create an",
    "start": "120899",
    "end": "126929"
  },
  {
    "text": "algorithm then that he himself can't break and this is important never ever invent your own crypto it's going to go",
    "start": "126929",
    "end": "134880"
  },
  {
    "text": "bad like proper cryptographers they will create an algorithm and then they send it to all their fellow researchers",
    "start": "134880",
    "end": "141150"
  },
  {
    "text": "and they will break it and then I'll go back and first them back and forth until they have something that works and for",
    "start": "141150",
    "end": "146280"
  },
  {
    "text": "most of us that means that we should never have even try some words I'm gonna use just sorry about the wall of text",
    "start": "146280",
    "end": "153420"
  },
  {
    "text": "but somewhere saying I am going to use here that we need to I'm gonna use them",
    "start": "153420",
    "end": "158520"
  },
  {
    "text": "so I need to explain the first about plain text that's the data we want to encrypt cipher text that's the encrypted data the key is of course the key that",
    "start": "158520",
    "end": "165239"
  },
  {
    "text": "we use to encrypt it or assign it an IV or an initialization vector that's",
    "start": "165239",
    "end": "170250"
  },
  {
    "text": "something we use as a random start value at sometimes a nonce is around the value to be used only once a symmetric and",
    "start": "170250",
    "end": "177989"
  },
  {
    "text": "asymmetric encryption that depends on whether we're using the same key for both encryption and decryption or if we",
    "start": "177989",
    "end": "183000"
  },
  {
    "text": "have a public private key system and the same thing holds for symmetric and asymmetric signing and then we have",
    "start": "183000",
    "end": "188730"
  },
  {
    "text": "hashing people tend to get these things wrong when we see these breaches in the papers people say well we had encrypted",
    "start": "188730",
    "end": "195989"
  },
  {
    "text": "the passwords in the breach well most of the time they actually hashed him and not encrypted them but and then we have",
    "start": "195989",
    "end": "202380"
  },
  {
    "text": "encoding which is not encryption but sometimes people tend to think that they've invented something clever if we",
    "start": "202380",
    "end": "208739"
  },
  {
    "text": "go back to the earlier the late 1800s August cursor he said that a crypto",
    "start": "208739",
    "end": "215100"
  },
  {
    "text": "system should be secure even if everything about the system except the key is public knowledge so that kind of",
    "start": "215100",
    "end": "220860"
  },
  {
    "text": "tells us that we need to have a key for something to be a crypto system if if there is no key it's probably an",
    "start": "220860",
    "end": "226260"
  },
  {
    "text": "encoding so that's also a way that you can figure that out so the first important part when we're using crypto",
    "start": "226260",
    "end": "231989"
  },
  {
    "text": "is to always have a secure cryptographic you secure random generator and this is",
    "start": "231989",
    "end": "237510"
  },
  {
    "text": "something that goes wrong from time to time so a couple of examples this is from some researches that we're looking",
    "start": "237510",
    "end": "243930"
  },
  {
    "text": "into self encrypting hard drives and they found some bugs in some of these drives one example they one of them had",
    "start": "243930",
    "end": "252810"
  },
  {
    "text": "a 32 byte key but it turned out that the 32 byte key was just a 4 byte key",
    "start": "252810",
    "end": "257940"
  },
  {
    "text": "repeated 8 times which means a set of 32 byte key you had a 32 bit key which is a",
    "start": "257940",
    "end": "263250"
  },
  {
    "text": "very very big difference when it comes to keys another one was a someone doing",
    "start": "263250",
    "end": "269849"
  },
  {
    "text": "a survey on or research into what kind of public keys that they could find online and",
    "start": "269849",
    "end": "274920"
  },
  {
    "text": "they found it 5.56 percent of all TLS hosts and 9.6 percent of all SSA chosed",
    "start": "274920",
    "end": "281730"
  },
  {
    "text": "had public keys that had either had insufficient randomness or they were in the device default keys which also tells",
    "start": "281730",
    "end": "288600"
  },
  {
    "text": "us we have a problem with the stuff that we're putting online some other",
    "start": "288600",
    "end": "293880"
  },
  {
    "text": "researchers were looking at Wi-Fi routers and they found it the only seat",
    "start": "293880",
    "end": "299820"
  },
  {
    "text": "that was taken into the randomness was the MAC address of the device itself so",
    "start": "299820",
    "end": "304890"
  },
  {
    "text": "you could basically from the MAC address you could calculate the Wi-Fi password which is not what you want I don't ever",
    "start": "304890",
    "end": "315000"
  },
  {
    "text": "use like system random or electing the normal random function that's provided by the framework there's easy ways to",
    "start": "315000",
    "end": "321480"
  },
  {
    "text": "break it this is just one way of breaking it with something called on twister which you can find on github and",
    "start": "321480",
    "end": "327920"
  },
  {
    "text": "there are also ways to where you can reverse engineer the state of the random function basically by looking at a small",
    "start": "327920",
    "end": "335340"
  },
  {
    "text": "set of random values from the generator this is what we often think when it",
    "start": "335340",
    "end": "342030"
  },
  {
    "text": "comes to security",
    "start": "342030",
    "end": "344990"
  },
  {
    "text": "so instead of breaking the actual crypto someone can try to grab the key",
    "start": "351850",
    "end": "357100"
  },
  {
    "text": "somewhere and where is the key well it's of course in github so this is from hacker one back bendy platform and",
    "start": "357100",
    "end": "364360"
  },
  {
    "text": "someone found a secret key on their own on the github repo grati pay which is one of the one of the company is hosting",
    "start": "364360",
    "end": "371440"
  },
  {
    "text": "a a bug bounty on hacker one and but like so we should never actually put our",
    "start": "371440",
    "end": "379030"
  },
  {
    "text": "keys in source code and this is more recent four hundred thousand websites",
    "start": "379030",
    "end": "384870"
  },
  {
    "text": "vulnerable through exposed get directories so people will write they're going to deploy their their new website",
    "start": "384870",
    "end": "390430"
  },
  {
    "text": "and they accidentally include the get directory and so we have all the all the history of the git repo on the website",
    "start": "390430",
    "end": "397960"
  },
  {
    "text": "itself and of course if there are keys and their people find so there are constantly monitoring things like github",
    "start": "397960",
    "end": "404680"
  },
  {
    "text": "and all other repos out there and looking for keys so over to encryption",
    "start": "404680",
    "end": "411310"
  },
  {
    "text": "so we now have we now have the graphically secure key it's generated in a proper way and we want to start doing",
    "start": "411310",
    "end": "417310"
  },
  {
    "text": "encryption so we're gonna start out easy we're gonna start out with a definition",
    "start": "417310",
    "end": "423400"
  },
  {
    "text": "so given a cipher text it should be impossible to find the plaintext so only the people with the keys should be able",
    "start": "423400",
    "end": "429760"
  },
  {
    "text": "to figure out what the plaintext was and the way people used to do this was with",
    "start": "429760",
    "end": "435490"
  },
  {
    "text": "what we call one-time pads which were just basically these big notes that you would pass around or a large like the",
    "start": "435490",
    "end": "441610"
  },
  {
    "text": "rolls of paper that you could pass around and you could use that to encrypt stuff of course we we don't we were",
    "start": "441610",
    "end": "447370"
  },
  {
    "text": "using computers now so we're not using the paper-based ones but we can generate a random key and we can exert a",
    "start": "447370",
    "end": "453460"
  },
  {
    "text": "plaintext with the key and get a ciphertext and the decryption is the",
    "start": "453460",
    "end": "458920"
  },
  {
    "text": "same thing we just exhort with the with the ciphertext instead and we get the plaintext back this is quite easy so if",
    "start": "458920",
    "end": "466150"
  },
  {
    "text": "we have a message and these are the bytes of that message then we have generator random key and we get the",
    "start": "466150",
    "end": "472390"
  },
  {
    "text": "cipher but just XOR um together and of course XOR is just we do it bit by bit so if we have the uppercase a",
    "start": "472390",
    "end": "480639"
  },
  {
    "text": "and a lowercase a and we x-ray them together we actually get the space character because that's the only different one between the two so that's",
    "start": "480639",
    "end": "488919"
  },
  {
    "text": "actually also an easy way to transfer between upper and lower case we have",
    "start": "488919",
    "end": "499000"
  },
  {
    "text": "some math here as well like were using X or if we X or something with a zero we get the same thing back if we exercise",
    "start": "499000",
    "end": "505000"
  },
  {
    "text": "itself we get a zero people using assembly they're used to this stuff if like the order of of the parts are they",
    "start": "505000",
    "end": "514328"
  },
  {
    "text": "don't really matter so we can we can have these large things like this we have a excerpt with C excerpt with ax or",
    "start": "514329",
    "end": "520870"
  },
  {
    "text": "it would be then we can switch them around so we we get a extra root a which is as we see on the second there it's",
    "start": "520870",
    "end": "527230"
  },
  {
    "text": "zero and then so the a just goes away basically and we're stuck with baby excerpt with C and we'll see why this is",
    "start": "527230",
    "end": "533890"
  },
  {
    "text": "important in a second so the weight one-time pad it's very secure for a",
    "start": "533890",
    "end": "539079"
  },
  {
    "text": "single message confidentiality wise but we can only use the key once which is",
    "start": "539079",
    "end": "545560"
  },
  {
    "text": "kind of annoying for a crypto key we can only use it once and how do we exchange",
    "start": "545560",
    "end": "550899"
  },
  {
    "text": "this key the key also has to be at least as long as the message we want to send",
    "start": "550899",
    "end": "556329"
  },
  {
    "text": "so now we if we want to pass a message we now have the problem of passing the key not which is basically the same",
    "start": "556329",
    "end": "563230"
  },
  {
    "text": "problem as passing the message but we can we can of course meet up front and",
    "start": "563230",
    "end": "570370"
  },
  {
    "text": "exchange this exergy at some point and use it later but the reason why we can use this key only once is if we have one",
    "start": "570370",
    "end": "577930"
  },
  {
    "text": "ciphertext that's exerted with this key and another one and we excerpt them together we get the same 8xo with B and",
    "start": "577930",
    "end": "585399"
  },
  {
    "text": "a so we would see like the key falls away and we're stuck with the plaintext XOR together so even if we don't know",
    "start": "585399",
    "end": "591579"
  },
  {
    "text": "the plaintext we can now get the XOR of the plaintext so if we have enough paint plain texts this actually allows us to",
    "start": "591579",
    "end": "598240"
  },
  {
    "text": "figure out what the contents are and if we know a single plain text we can exert",
    "start": "598240",
    "end": "604600"
  },
  {
    "text": "the ciphertext with the plaintext and we get the key so the system is kind of broken in a way we can only use it once",
    "start": "604600",
    "end": "611670"
  },
  {
    "text": "and the reason why the message length has to be smaller",
    "start": "611670",
    "end": "616959"
  },
  {
    "text": "than or equal to the key is if enough we'd have to wrap the key and then we essentially get the same problem that we",
    "start": "616959",
    "end": "622450"
  },
  {
    "text": "had earlier where we if we exerted parts together we we get the plaintext exert",
    "start": "622450",
    "end": "627670"
  },
  {
    "text": "together so an example of something using XOR this was NQ vault this was it",
    "start": "627670",
    "end": "634149"
  },
  {
    "text": "had over 10 million downloads from the Android app store and it was supposed to encrypt your images and videos and",
    "start": "634149",
    "end": "639910"
  },
  {
    "text": "everything but someone was looking into this app and figure out what it was actually doing and it to start with it",
    "start": "639910",
    "end": "646870"
  },
  {
    "text": "only encrypted the first 128 bytes of each file so if this was a video file",
    "start": "646870",
    "end": "652600"
  },
  {
    "text": "like the rest of the file was not encrypted and it says encrypted in quotes here because what they did was the key was",
    "start": "652600",
    "end": "658930"
  },
  {
    "text": "basically of the password and then they did the hashcode function on the password and then they basically",
    "start": "658930",
    "end": "664240"
  },
  {
    "text": "truncated it down to one byte so there are only 256 different keys",
    "start": "664240",
    "end": "670600"
  },
  {
    "text": "this is trivially reversible so we're gonna gonna improve on this and we're",
    "start": "670600",
    "end": "677589"
  },
  {
    "text": "gonna try to improve our definition here so given ciphertext it should be possible impossible to find the",
    "start": "677589",
    "end": "683380"
  },
  {
    "text": "plaintext and we want to have a reusable key so knowing a plaintext shouldn't reveal the key and also we want to be",
    "start": "683380",
    "end": "690220"
  },
  {
    "text": "able to encrypt stuff that's larger than the key so basically we have two types",
    "start": "690220",
    "end": "696040"
  },
  {
    "text": "of ciphers we have stream ciphers and block ciphers and a stream cipher we kind of stretch out the key we have a",
    "start": "696040",
    "end": "703360"
  },
  {
    "text": "generator that generates a key stream from the key and we basically just XOR",
    "start": "703360",
    "end": "709870"
  },
  {
    "text": "it together just like we we did with a normal a one-time pad one example of",
    "start": "709870",
    "end": "716350"
  },
  {
    "text": "such a cipher is rc4 but that's not something you should use anymore because it's it's considered broken but at least",
    "start": "716350",
    "end": "725019"
  },
  {
    "text": "now we can have plain text links that are larger than the key size but this accidentally also leaks the plaintext",
    "start": "725019",
    "end": "731320"
  },
  {
    "text": "length so if this is a table of votes we can clearly see who voted yes or no in",
    "start": "731320",
    "end": "737110"
  },
  {
    "text": "this case because one of them is shorter than the other so we could have padded them and then that wouldn't happen but",
    "start": "737110",
    "end": "743980"
  },
  {
    "text": "even if we kind of individually encrypt them with one key for each who can still see that the third one is shorter than the",
    "start": "743980",
    "end": "750200"
  },
  {
    "text": "others so we would have to path to to avoid this problem of leaking the plaintext length so we'll move on to",
    "start": "750200",
    "end": "758750"
  },
  {
    "text": "block ciphers what we do with block ciphers is basically we split the data into blocks at a given size and then we",
    "start": "758750",
    "end": "764300"
  },
  {
    "text": "encrypt each block separately and the most common way we do this is with AES some people still use deaths and they",
    "start": "764300",
    "end": "771590"
  },
  {
    "text": "should stop doing that because it's also considered broken so the easiest way to",
    "start": "771590",
    "end": "776870"
  },
  {
    "text": "do this is to take the take the plaintext that we have and use something called ECB so we have a plaintext which",
    "start": "776870",
    "end": "783830"
  },
  {
    "text": "we have the encryption function we split the plaintext into blocks we pad the last box because it needs to be at the",
    "start": "783830",
    "end": "790040"
  },
  {
    "text": "same length as the block size and then we encrypt each of these by running them through the encryption function and now",
    "start": "790040",
    "end": "795770"
  },
  {
    "text": "it comes to ciphertext and that's at some point later we want to decrypt it so we once again we split it into blocks",
    "start": "795770",
    "end": "801500"
  },
  {
    "text": "we run it through the decryption function and out comes the plaintext and then we have to remove the padding and",
    "start": "801500",
    "end": "808400"
  },
  {
    "text": "there are there so plaintext this thing has a problem though and that's a yes",
    "start": "808400",
    "end": "814760"
  },
  {
    "text": "for instance is a deterministic algorithm so if we have the same key and the same data the same block is going to",
    "start": "814760",
    "end": "821000"
  },
  {
    "text": "pop out of the other end and this is very well presented with this picture what we encrypted a picture with but we",
    "start": "821000",
    "end": "829100"
  },
  {
    "text": "can still see what the picture is all about because of the repeated box so we",
    "start": "829100",
    "end": "836870"
  },
  {
    "text": "have something called cipher block chaining and which cipher block chaining we're gonna introduce noise into the encryption and this is kind of like",
    "start": "836870",
    "end": "844190"
  },
  {
    "text": "using a salt when you're hashing passwords so what we start out the same way we split into blocks and weep at the",
    "start": "844190",
    "end": "850370"
  },
  {
    "text": "last blocks to make it the same size as the block size and then we add this initialization vector which is noise and",
    "start": "850370",
    "end": "857230"
  },
  {
    "text": "then what we do is we XOR the IV with the first block of plaintext before we",
    "start": "857230",
    "end": "863870"
  },
  {
    "text": "encrypt it so now we've introduced some noise so we by selecting a random IV each time we we we will ensure that we",
    "start": "863870",
    "end": "871610"
  },
  {
    "text": "get a different plaintext even though or a different size vertex even though we encrypt the same plaintext for the next",
    "start": "871610",
    "end": "877550"
  },
  {
    "text": "book we're going to use the previous ciphertext block as the IV so we make a copy of that we exert them together and run them through",
    "start": "877550",
    "end": "883920"
  },
  {
    "text": "and we keep going like this now we have the ciphertext and we have to include",
    "start": "883920",
    "end": "889470"
  },
  {
    "text": "the IV because to decrypt this you have to have the IV and what we normally do then is just put it in front of the",
    "start": "889470",
    "end": "896100"
  },
  {
    "text": "larger text so when we want to decrypt it we split it into blocks again we run",
    "start": "896100",
    "end": "902100"
  },
  {
    "text": "it through the decryption function and then we do the XOR and this is after the decryption function and this is this is",
    "start": "902100",
    "end": "908579"
  },
  {
    "text": "something we're gonna see might be a bit of a problem so we and then we take the the we use the previous ciphertext block",
    "start": "908579",
    "end": "915239"
  },
  {
    "text": "as the IV for the next block etc and we go through this like this we move the",
    "start": "915239",
    "end": "920249"
  },
  {
    "text": "padding and we have our plaintext back so if we want to attack CBC so on this",
    "start": "920249",
    "end": "928230"
  },
  {
    "text": "slide we have the eyes at the the left side of the screen that's the IV and C's",
    "start": "928230",
    "end": "934769"
  },
  {
    "text": "at the right side of the screen that's the ciphertext and then we have our decryption function and when we run",
    "start": "934769",
    "end": "940619"
  },
  {
    "text": "the ciphertext for the decryption function we get an intermediate value which is then excerpt with the IV which",
    "start": "940619",
    "end": "946259"
  },
  {
    "text": "goes outside of the decryption function and we get our get our plaintext now if",
    "start": "946259",
    "end": "951720"
  },
  {
    "text": "we were to modify a single bit up there in the ciphertext that would completely",
    "start": "951720",
    "end": "957529"
  },
  {
    "text": "garble the intermediate value which is an excerpt of a div and we would get a",
    "start": "957529",
    "end": "962970"
  },
  {
    "text": "completely garbled plaintext so we can't really mess with anything up there however if we were to change a single",
    "start": "962970",
    "end": "970949"
  },
  {
    "text": "bit up there in the ID it's gonna pass outside the decryption function and so",
    "start": "970949",
    "end": "976439"
  },
  {
    "text": "we're only gonna change a single bit down there and now we're seeing that there might be a kind of an issue here",
    "start": "976439",
    "end": "981959"
  },
  {
    "text": "we can mess with the IV and then that allows us to mess with the plaintext so",
    "start": "981959",
    "end": "988169"
  },
  {
    "text": "if if the plaintext was a JSON talking like this and we have a user ID here a",
    "start": "988169",
    "end": "993509"
  },
  {
    "text": "user ID v we could bring out our old extra mapped here and we know that a v",
    "start": "993509",
    "end": "1001249"
  },
  {
    "text": "that has the hex value of 35 which means that I 11 and exort with the 11 becomes",
    "start": "1001249",
    "end": "1009199"
  },
  {
    "text": "a 5 so if those privity decryption function we bring in the ID and comes to five what we want is reduce to",
    "start": "1009199",
    "end": "1016800"
  },
  {
    "text": "become a one because the Israeli one is usually admin so we want to become the admin so we have to calculate some kind",
    "start": "1016800",
    "end": "1023460"
  },
  {
    "text": "of new I 11 which exerted V 11 would give us a 1 there instead of a 5 and the",
    "start": "1023460",
    "end": "1030750"
  },
  {
    "text": "the way we do this you can just XOR it with the stuff that it was which is 35 which is the 5 and then we XOR with the",
    "start": "1030750",
    "end": "1039058"
  },
  {
    "text": "the thing that we want because if we exited 35 we're gonna it's gonna become a zero and then we exerted 3 1 it's",
    "start": "1039059",
    "end": "1044790"
  },
  {
    "text": "gonna become a 31 so we can actually by manipulating the IV we can manipulate",
    "start": "1044790",
    "end": "1050280"
  },
  {
    "text": "what was encrypted here without knowing the key and this can be kind of useful",
    "start": "1050280",
    "end": "1057450"
  },
  {
    "text": "for us so we change this one and we change end up changing this one so just",
    "start": "1057450",
    "end": "1065700"
  },
  {
    "text": "to show you an example of this here we have a tiny little application which",
    "start": "1065700",
    "end": "1071040"
  },
  {
    "text": "where we can download a paper and the URL here is really small so I'm just",
    "start": "1071040",
    "end": "1077309"
  },
  {
    "text": "gonna copy it out for you it looks something like this so we have a file name here and we have a signature here",
    "start": "1077309",
    "end": "1085740"
  },
  {
    "text": "and this looks a lot like something that's encrypted so what we're going to do is we're gon going to basically align",
    "start": "1085740",
    "end": "1094650"
  },
  {
    "text": "the file name with the IV because we",
    "start": "1094650",
    "end": "1102090"
  },
  {
    "text": "what we want to do is we want to change this URL so we can download paper to instead of paper 1 but if we just try to",
    "start": "1102090",
    "end": "1108960"
  },
  {
    "text": "change the URL and set it to paper - we're gonna get invalid signature so we",
    "start": "1108960",
    "end": "1113970"
  },
  {
    "text": "need to somehow miss with this signature so what we're going to do then is we're going to take this a 9 here and we're",
    "start": "1113970",
    "end": "1122010"
  },
  {
    "text": "going to change it so that the end result would become a 2 instead of a 1 so we can just we can just easily do",
    "start": "1122010",
    "end": "1129150"
  },
  {
    "text": "that by just taking so a 9x start with",
    "start": "1129150",
    "end": "1134670"
  },
  {
    "text": "yeah so you can see I've done this before we're gonna change it from a 1 in",
    "start": "1134670",
    "end": "1139770"
  },
  {
    "text": "- and we need to get this back into hex form and at the end so the value we want",
    "start": "1139770",
    "end": "1147870"
  },
  {
    "text": "instead of the a9 is AAA so just go up to the signature and change from a nine",
    "start": "1147870",
    "end": "1154050"
  },
  {
    "text": "to a a and we get the second paper so we kind of broke this by just messing",
    "start": "1154050",
    "end": "1160350"
  },
  {
    "text": "around with the IV so encryption is not signing encryption doesn't give us integrity it only gives us some kind of",
    "start": "1160350",
    "end": "1168300"
  },
  {
    "text": "confidentiality when we're patting",
    "start": "1168300",
    "end": "1174630"
  },
  {
    "text": "things things can go wrong as well like there are a lot of ways that we can pad we could pad with zeros we could pad",
    "start": "1174630",
    "end": "1181080"
  },
  {
    "text": "with random values or we could pad with something called pkcs1 map you can see a seven I mean and this is a very common",
    "start": "1181080",
    "end": "1187860"
  },
  {
    "text": "padding and what we do then is basically we we add padding bytes that where each",
    "start": "1187860",
    "end": "1195150"
  },
  {
    "text": "byte is the number of padding bytes so if we need to add 7 bytes all the padding bytes will have the number 7 in",
    "start": "1195150",
    "end": "1201270"
  },
  {
    "text": "them if we need to add 6 padding bytes all of them have the number number 6 or the value 6 and the reason why we're",
    "start": "1201270",
    "end": "1208140"
  },
  {
    "text": "doing this is that makes it easier to remove them later so we can check the we can check them and see how many of these",
    "start": "1208140",
    "end": "1213540"
  },
  {
    "text": "padding bytes are we supposed to remove and that's harder if you pad them with zeros if we pair them with random values",
    "start": "1213540",
    "end": "1219660"
  },
  {
    "text": "but now we know how many of them we should remove as you can see on the last part here if we have a message that",
    "start": "1219660",
    "end": "1226650"
  },
  {
    "text": "exactly at the block size we need to add an entire padding block because if not",
    "start": "1226650",
    "end": "1232020"
  },
  {
    "text": "we if this P 7 in this case was accidentally a 1 it would be removed and",
    "start": "1232020",
    "end": "1238740"
  },
  {
    "text": "it wasn't supposed to be removed in this case we need to add a full block of padding but what happens if the padding",
    "start": "1238740",
    "end": "1245670"
  },
  {
    "text": "is wrong like in this case it's just three but the the two next padding bytes turn up three stereo ten and a five this",
    "start": "1245670",
    "end": "1253680"
  },
  {
    "text": "seems wrong well what the programming languages we usually do then is to throw an exception so in Java you'll get a bad padding",
    "start": "1253680",
    "end": "1259980"
  },
  {
    "text": "exception in c-sharp you can get a cryptographic exception with padding is invalid and cannot be removed and in",
    "start": "1259980",
    "end": "1265800"
  },
  {
    "text": "HTTP you're usually like if this is a generic application you'll usually get a 500 because very rarely the developers",
    "start": "1265800",
    "end": "1272790"
  },
  {
    "text": "have this case and this is actually enough for us to decrypt the data which is kind",
    "start": "1272790",
    "end": "1279430"
  },
  {
    "text": "of strange I'm gonna show you why so if we send in any of these books we're",
    "start": "1279430",
    "end": "1286720"
  },
  {
    "text": "gonna get a correct cutting but the last block here if we send in that we're gonna get a padding error because likely",
    "start": "1286720",
    "end": "1292780"
  },
  {
    "text": "this is not gonna be one of the correct blocks here so we bring back our we have",
    "start": "1292780",
    "end": "1299820"
  },
  {
    "text": "cipher text and we have an IV and we don't know the plaintext and we don't know the intermediate value what we",
    "start": "1299820",
    "end": "1307420"
  },
  {
    "text": "first do is we take a copy of the ID and copy it down here and then we randomized",
    "start": "1307420",
    "end": "1312670"
  },
  {
    "text": "the IV up here this is going to create a padding error so if we send this this",
    "start": "1312670",
    "end": "1317680"
  },
  {
    "text": "text at the top here to the server it's going to respond with a 500 most likely it's going to respond with a padding",
    "start": "1317680",
    "end": "1323980"
  },
  {
    "text": "error what we're going to do then is we're going to take the least or the",
    "start": "1323980",
    "end": "1329790"
  },
  {
    "text": "rightmost byte of the IV and we're going to try all values from 0 to 255 and at",
    "start": "1329790",
    "end": "1338530"
  },
  {
    "text": "some point we're gonna hit a valid patty so we start out and we try different",
    "start": "1338530",
    "end": "1345070"
  },
  {
    "text": "values and already at 3 we found a valid padding which probably now means that we",
    "start": "1345070",
    "end": "1350860"
  },
  {
    "text": "found a block which has a 1 as the in the in the plaintext and now we can we",
    "start": "1350860",
    "end": "1358090"
  },
  {
    "text": "can figure out what the intermediate value was and we can figure out what the",
    "start": "1358090",
    "end": "1363670"
  },
  {
    "text": "original padding was down here because we can just XOR them together to figure that out and then we go ahead and we",
    "start": "1363670",
    "end": "1370030"
  },
  {
    "text": "change this to a two by changing the IV up there and then we try the next byte",
    "start": "1370030",
    "end": "1375730"
  },
  {
    "text": "so we kind of break break them one at a time so now we have a two there and we",
    "start": "1375730",
    "end": "1380860"
  },
  {
    "text": "try the second rightmost byte of the IV and we try all values from 0 to 255 like",
    "start": "1380860",
    "end": "1387130"
  },
  {
    "text": "this so we're gonna spin it up and then at some point we're gonna hit a valid padding where we get to two and then we",
    "start": "1387130",
    "end": "1394270"
  },
  {
    "text": "change them by changing the IV to three and then we kind of by doing this we can break the message one byte at a time",
    "start": "1394270",
    "end": "1400420"
  },
  {
    "text": "starting from the end and going to the this is what happens in movies right where you you they're kind of figuring",
    "start": "1400420",
    "end": "1406740"
  },
  {
    "text": "out one part of the password at the time this actually works that way and it's kind of strange so I'm speeding enough",
    "start": "1406740",
    "end": "1413100"
  },
  {
    "text": "now and you can see like it's breaking this by sending messages so at the left",
    "start": "1413100",
    "end": "1418500"
  },
  {
    "text": "side of the screen now you can see how many messages I would have to send to break this this ciphertext and I had to",
    "start": "1418500",
    "end": "1425850"
  },
  {
    "text": "send 2087 requests in this case and her per bytes I had to send an average of",
    "start": "1425850",
    "end": "1432500"
  },
  {
    "text": "131 requests but still I could steal the plane I could figure out the plaintext",
    "start": "1432500",
    "end": "1439620"
  },
  {
    "text": "and I can do this for multiple blocks it just it doesn't have to be just one block it just do one block at a time so",
    "start": "1439620",
    "end": "1445230"
  },
  {
    "text": "by doing this we can we can decrypt a ciphertext by using a padding Oracle and",
    "start": "1445230",
    "end": "1452370"
  },
  {
    "text": "this was actually a bug in in dotnet back in the day in 2010 they had this issue with something called Reb resource ax D which was often",
    "start": "1452370",
    "end": "1459600"
  },
  {
    "text": "used for Ajax stuff so you could there was a padding Oracle in there which you could then use to download like the web",
    "start": "1459600",
    "end": "1466049"
  },
  {
    "text": "config for instance which was kind of bad we've also had this problem in in open SSL many times so poodle is one",
    "start": "1466049",
    "end": "1473789"
  },
  {
    "text": "example poodle means padding Oracle on down grow that downgraded legacy encryption so we have the padding Oracle",
    "start": "1473789",
    "end": "1479909"
  },
  {
    "text": "in there and there's been others as well like Lucky thirteen and similar ones",
    "start": "1479909",
    "end": "1486559"
  },
  {
    "text": "this is one I found on on hacker one once again this is from fabricator which",
    "start": "1486559",
    "end": "1492480"
  },
  {
    "text": "is used by Facebook so that was a padding Oracle in there and how do we",
    "start": "1492480",
    "end": "1497880"
  },
  {
    "text": "stop this well we could try to catch this exception right we could try to we're gonna we're gonna stop it by",
    "start": "1497880",
    "end": "1503340"
  },
  {
    "text": "catching this exception I'm going to return the same error the same error as if let's say we we were able to decrypt",
    "start": "1503340",
    "end": "1509760"
  },
  {
    "text": "it but it was not what we expected so in this case we're going to do a we're",
    "start": "1509760",
    "end": "1515309"
  },
  {
    "text": "going to try to decrypt it and if it if it throws the padding exception we're gonna return not found and also we're",
    "start": "1515309",
    "end": "1521010"
  },
  {
    "text": "gonna do a database lookup if if we were able to decrypt it and see and if we find it in the database we're gonna",
    "start": "1521010",
    "end": "1526650"
  },
  {
    "text": "return okay and if not we're gonna return not found so in this case we're trying to be smart and we're gonna return not found regardless of it if it",
    "start": "1526650",
    "end": "1532620"
  },
  {
    "text": "was a padding exception or if it was just not found in the database the problem here is very likely the",
    "start": "1532620",
    "end": "1539010"
  },
  {
    "text": "database lookup is gonna take time so there's a side channel here if it jumps",
    "start": "1539010",
    "end": "1544350"
  },
  {
    "text": "from the decryption and down to the catch block that's going to go faster",
    "start": "1544350",
    "end": "1549360"
  },
  {
    "text": "than actually doing the database lookup so there's a side channel and we all often have all kinds of side channels in",
    "start": "1549360",
    "end": "1555120"
  },
  {
    "text": "these systems so it could be computation in response time it could be CPU usage if you're on a VM it could be power",
    "start": "1555120",
    "end": "1562380"
  },
  {
    "text": "consumption it could be electrical energy magnetic fields it could be the size we've seen examples of that and a",
    "start": "1562380",
    "end": "1568260"
  },
  {
    "text": "lot of other types of site of side channels and of course if it's a timing",
    "start": "1568260",
    "end": "1573690"
  },
  {
    "text": "side channel it has to be measurable like if this is over the Internet there's a lot of jitter and stuff going on so it would have to be measurable but",
    "start": "1573690",
    "end": "1580860"
  },
  {
    "text": "sometimes it is I found this example as well which I found to be quite scary",
    "start": "1580860",
    "end": "1586970"
  },
  {
    "text": "by measuring the targets electromagnetic emanations the attack extracts the secret decryption key within seconds",
    "start": "1586970",
    "end": "1592920"
  },
  {
    "text": "from a target located in an adjacent room across a wall so this is kind of a",
    "start": "1592920",
    "end": "1598700"
  },
  {
    "text": "dangerous side channel so for military equipment they usually use Hardware",
    "start": "1598700",
    "end": "1604620"
  },
  {
    "text": "crypto instead of software crypto because of these kinds of things we have",
    "start": "1604620",
    "end": "1610770"
  },
  {
    "text": "something called authenticated encryption and with authentication authenticated encryption we actually get",
    "start": "1610770",
    "end": "1615900"
  },
  {
    "text": "integrity included so we can get both confidentiality and authentication what",
    "start": "1615900",
    "end": "1623790"
  },
  {
    "text": "we're doing then is we add like a message authentication code and authentication tag as a part of the",
    "start": "1623790",
    "end": "1629040"
  },
  {
    "text": "encryption and some common examples of this are AES in GCM mode or CCM mode and",
    "start": "1629040",
    "end": "1636030"
  },
  {
    "text": "GCM and CCA mode they're both based on something called counter mode and counter mode works like this so we have",
    "start": "1636030",
    "end": "1642150"
  },
  {
    "text": "our plaintext once again and we have this nonce and we're gonna do something",
    "start": "1642150",
    "end": "1647880"
  },
  {
    "text": "weird instead of encrypting the plaintext we're going to take those notes and we're going to use it as a counter hence",
    "start": "1647880",
    "end": "1653070"
  },
  {
    "text": "the name counter mode so we add a counter to each of these books and then we're actually going to encrypt these",
    "start": "1653070",
    "end": "1659340"
  },
  {
    "text": "counter blocks using the encryption function which could be a s for instance",
    "start": "1659340",
    "end": "1664780"
  },
  {
    "text": "and out of that we get a key stream and then we can actually XOR our plain text",
    "start": "1664780",
    "end": "1670780"
  },
  {
    "text": "with that key stream to get the cipher text so we're kind of creating a stream cipher from a block cipher in this case",
    "start": "1670780",
    "end": "1676960"
  },
  {
    "text": "and we have to use the nonce when we want to decrypt it as well but the weird",
    "start": "1676960",
    "end": "1682420"
  },
  {
    "text": "thing here is when we want to decrypt something we're still gonna use the encryption function because we need to",
    "start": "1682420",
    "end": "1688090"
  },
  {
    "text": "get the same key stream that we had earlier because we're not actually encrypting the cipher text we're in Crete we're encrypting the the give the",
    "start": "1688090",
    "end": "1695230"
  },
  {
    "text": "counter blocks and then using that to encrypt the plaintext so once again we",
    "start": "1695230",
    "end": "1700870"
  },
  {
    "text": "create the key stream and we can truncate the parts of the key stream that we don't need and we exert together",
    "start": "1700870",
    "end": "1707410"
  },
  {
    "text": "to get the plaintext so this is what it actually looks like this GCM what you",
    "start": "1707410",
    "end": "1714370"
  },
  {
    "text": "see in the top right corner with the Box of there that's the count remote stuff",
    "start": "1714370",
    "end": "1719620"
  },
  {
    "text": "and then there's something else going on down here on the side which is creating this authentication tag which gives",
    "start": "1719620",
    "end": "1724810"
  },
  {
    "text": "integrity as well but the problem with GCM and CCM is we can only use the nonce",
    "start": "1724810",
    "end": "1731170"
  },
  {
    "text": "once if we use the same nonce and the same key we get the same key stream",
    "start": "1731170",
    "end": "1736810"
  },
  {
    "text": "hence we're back to the problem that we had with a one-time pad if we have the same key stream and we have X or",
    "start": "1736810",
    "end": "1743620"
  },
  {
    "text": "something with it and we exert two cipher texts together we get the XOR of the plaintext box and this was found to",
    "start": "1743620",
    "end": "1751240"
  },
  {
    "text": "be a problem in a lot of different devices that we're using GCM on HTTP because they would repeat the nonce at",
    "start": "1751240",
    "end": "1758800"
  },
  {
    "text": "certain intervals like if you reboot the device it would start up with a with a fresh thing and with repeat so actually",
    "start": "1758800",
    "end": "1764860"
  },
  {
    "text": "if we if we if we're using this mode we need to ensure that we never use the same nonce and if we've used up all the",
    "start": "1764860",
    "end": "1772660"
  },
  {
    "text": "nonces then we actually have to replace the key which is something we should do but that's not immediately clear to",
    "start": "1772660",
    "end": "1779530"
  },
  {
    "text": "everyone if we're going to do asymmetric encryption with something like RSA or",
    "start": "1779530",
    "end": "1785680"
  },
  {
    "text": "elliptic curve we have at least for RSA we have the same limitation as we had",
    "start": "1785680",
    "end": "1791590"
  },
  {
    "text": "for one-time pads that the message length actually has to be smaller than the key length so what we normally do",
    "start": "1791590",
    "end": "1798050"
  },
  {
    "text": "something something called we usually call hybrid encryption is instead of encrypting the data using the asymmetric",
    "start": "1798050",
    "end": "1804590"
  },
  {
    "text": "algorithm we generate a symmetric key we encrypt the data with that one and then we we just encrypt the symmetric key",
    "start": "1804590",
    "end": "1812270"
  },
  {
    "text": "using the asymmetric algorithm and we send the encrypted data and the encrypted key over to the other side so",
    "start": "1812270",
    "end": "1818450"
  },
  {
    "text": "this is what happens on HTTPS if you're going to use RSA there it comes in some",
    "start": "1818450",
    "end": "1825080"
  },
  {
    "text": "different kinds of modes something called RSA oae P that's the recommended",
    "start": "1825080",
    "end": "1831440"
  },
  {
    "text": "one but there's something called pkcs1 version 1.5 padding which is also kind",
    "start": "1831440",
    "end": "1838130"
  },
  {
    "text": "of broken so Matthew green who's a cryptid professor in the US he says that pika C is one version one five is",
    "start": "1838130",
    "end": "1845570"
  },
  {
    "text": "awesome if you're teaching a class on how to attack cryptographic protocols in all other circumstances it sucks so if",
    "start": "1845570",
    "end": "1853910"
  },
  {
    "text": "we we can actually have a padding organ just like we had for for for CBC mode we",
    "start": "1853910",
    "end": "1859280"
  },
  {
    "text": "can have that for RSA as well so with the way that we pad a message with when",
    "start": "1859280",
    "end": "1864290"
  },
  {
    "text": "we're using RSA is we add a zero byte and then we add a value of two and then",
    "start": "1864290",
    "end": "1869930"
  },
  {
    "text": "we have some random padding bytes and then once again a Sara byte and then the extra plaintext and the way we encrypt",
    "start": "1869930",
    "end": "1877700"
  },
  {
    "text": "stuff using RSA is with we have a public exponent and we erase the message to the",
    "start": "1877700",
    "end": "1884090"
  },
  {
    "text": "power of this exponent and then we take modulus and which is a part of the key",
    "start": "1884090",
    "end": "1889130"
  },
  {
    "text": "I'm not going to go into the details of this and in when we want to decrypt it we use we raise it to the power of the",
    "start": "1889130",
    "end": "1895880"
  },
  {
    "text": "private key which is the exponent D instead the problem in this case is we",
    "start": "1895880",
    "end": "1902260"
  },
  {
    "text": "with the way modulus works is weak if we add if we multiply the message that has",
    "start": "1902260",
    "end": "1910340"
  },
  {
    "text": "been encrypted with with some other integer S which we also raise to the power of the same public exponent it",
    "start": "1910340",
    "end": "1918710"
  },
  {
    "text": "can't really determine if they were first both raised to the to the exponent or if they were multiplied together and",
    "start": "1918710",
    "end": "1926120"
  },
  {
    "text": "then raised to the exponent so we can actually multiply a ciphertext that we",
    "start": "1926120",
    "end": "1931250"
  },
  {
    "text": "don't know so if we can multiply it with an integer s raised to the power of E and send it",
    "start": "1931250",
    "end": "1936629"
  },
  {
    "text": "to the server and the server will think that this was actually done in advance that this s was multiplied with M before",
    "start": "1936629",
    "end": "1943289"
  },
  {
    "text": "it was encrypted and if it now leaks the fact that the padding was correct or not",
    "start": "1943289",
    "end": "1948960"
  },
  {
    "text": "we can use this to attack it we know that all the valid messages because of",
    "start": "1948960",
    "end": "1954120"
  },
  {
    "text": "the padding here is going to start with zero zero two and I have to be less than zero zero three so there's there's a",
    "start": "1954120",
    "end": "1960149"
  },
  {
    "text": "span of valid messages and I've tried to figure out a way to visualize this because it's kind of hard to explain",
    "start": "1960149",
    "end": "1965759"
  },
  {
    "text": "this algorithm but I've found one way that might work and but a guy called",
    "start": "1965759",
    "end": "1973799"
  },
  {
    "text": "Daniel bike in Baja he figured out this in 1998 that this this way of padding was vulnerable with something called a",
    "start": "1973799",
    "end": "1980850"
  },
  {
    "text": "million message attack which was then later improved upon in 2012 oh where you can do the million message attack in",
    "start": "1980850",
    "end": "1986970"
  },
  {
    "text": "15,000 messages so the name the million message attack is because you need to send a lot of messages to the server to",
    "start": "1986970",
    "end": "1993539"
  },
  {
    "text": "try to break it but you tried to visualize this we can imagine modulus as",
    "start": "1993539",
    "end": "1998789"
  },
  {
    "text": "a circle which is not really all that visible here but anyway you have the",
    "start": "1998789",
    "end": "2003919"
  },
  {
    "text": "sector here the yellow sector that's the the set of valid pairings and on the",
    "start": "2003919",
    "end": "2010070"
  },
  {
    "text": "left-hand side we have a message at the start of the valley valley padding and on the right hand side we have this",
    "start": "2010070",
    "end": "2015440"
  },
  {
    "text": "green stripe here that's the green line that's that's we have a message at the",
    "start": "2015440",
    "end": "2020869"
  },
  {
    "text": "end of the valid padding's so we can think of modulus as a clock because when",
    "start": "2020869",
    "end": "2026360"
  },
  {
    "text": "we get to 12 o'clock it kind of wraps around and the same thing holds for modulus so if we if we take which we",
    "start": "2026360",
    "end": "2032840"
  },
  {
    "text": "take the ciphertext and we multiply it by some integer s with the first time we",
    "start": "2032840",
    "end": "2038509"
  },
  {
    "text": "do this we're going to hit outside of the ballot padding so we're going to get a padding error back but if we do this",
    "start": "2038509",
    "end": "2044179"
  },
  {
    "text": "enough times at some point we're gonna hit a message that actually has a valid padding and now we can go back and",
    "start": "2044179",
    "end": "2050599"
  },
  {
    "text": "calculate what that means for the original value which we don't know like in this case we got a valid padding at",
    "start": "2050599",
    "end": "2058280"
  },
  {
    "text": "an early stage which means that we probably were towards the end of the we can calculate this so we can",
    "start": "2058280",
    "end": "2064398"
  },
  {
    "text": "calculate now a range of possible values that would give us this on the on the left hand side we see we still haven't",
    "start": "2064399",
    "end": "2070579"
  },
  {
    "text": "reached a valid padding yet but at some time we're going to reach it and then we're narrowing down the the ranges of",
    "start": "2070579",
    "end": "2076460"
  },
  {
    "text": "these messages so in this case I have a huge sector but but if this was actually",
    "start": "2076460",
    "end": "2082669"
  },
  {
    "text": "RSA it would be so small that we couldn't see it but we can do this and it will keep narrowing down the possible",
    "start": "2082669",
    "end": "2089270"
  },
  {
    "text": "values and at some point we're going to be left with only one possible value and",
    "start": "2089270",
    "end": "2095299"
  },
  {
    "text": "at that point we've found the value and of course this was in hundred and three and not a million because I had a huge sector and a tiny end but in an actual",
    "start": "2095299",
    "end": "2105109"
  },
  {
    "text": "scenario you'd have to send a million message messages but I'm not gonna let you sit here and watch me click the",
    "start": "2105109",
    "end": "2110150"
  },
  {
    "text": "button a million times that we can afford so so this is kind of a way we",
    "start": "2110150",
    "end": "2116210"
  },
  {
    "text": "can buy by sending a lot of messages we can calculate what the original message was and that's how the way the algorithm",
    "start": "2116210",
    "end": "2122930"
  },
  {
    "text": "that was invented by Omaha that's the way it works Daniel black in Baja Nina works for",
    "start": "2122930",
    "end": "2130190"
  },
  {
    "text": "Google I think making like crypto verification tools which is kind of awesome because he's he's one of the",
    "start": "2130190",
    "end": "2135740"
  },
  {
    "text": "inventors of many attacks on crypto so if we're not going to use GCM we could",
    "start": "2135740",
    "end": "2141740"
  },
  {
    "text": "use something called encrypt than sign which basically mean we take our plaintext we encrypt it and we get the",
    "start": "2141740",
    "end": "2147770"
  },
  {
    "text": "cipher text and then we sign the ciphertext and we send that off to the to the server and then the server will",
    "start": "2147770",
    "end": "2155779"
  },
  {
    "text": "first verify the signature and then decrypt the plaintext and it's important that we do this in the correct order so",
    "start": "2155779",
    "end": "2161510"
  },
  {
    "text": "we don't reintroduce the padding Oracle but we could actually use this with CBC and it would be safe as long as we we",
    "start": "2161510",
    "end": "2168589"
  },
  {
    "text": "always check the signature first so signing we've now looked at encryption",
    "start": "2168589",
    "end": "2175010"
  },
  {
    "text": "and we've looked at some attempts of using encryption in the wrong way where we tried to do signing with encryption",
    "start": "2175010",
    "end": "2180319"
  },
  {
    "text": "and it didn't really hold so how do we actually sign stuff well a lot of people have tried to invent their own signing",
    "start": "2180319",
    "end": "2186980"
  },
  {
    "text": "as well so they've done stuff like this so we take md5 of a secret and then the message we want to sign and we calculate",
    "start": "2186980",
    "end": "2193369"
  },
  {
    "text": "a hash from that and we think that that's safe and the same thing is if it was sha-256 it",
    "start": "2193369",
    "end": "2199020"
  },
  {
    "text": "doesn't really matter which of these hash functions we use it's still broken and also if we put the secret at the end",
    "start": "2199020",
    "end": "2205290"
  },
  {
    "text": "that's still not something that we can do because it's broken an example of",
    "start": "2205290",
    "end": "2210540"
  },
  {
    "text": "this was Flickr they had an API signature back in 2009 and there were a",
    "start": "2210540",
    "end": "2215580"
  },
  {
    "text": "couple of researchers that found this flaw so what what Flickr would do they they would allow us to sign URLs and so",
    "start": "2215580",
    "end": "2223020"
  },
  {
    "text": "in this case we had these Ural parameters and the way that they would do the md5 was they would take a secret",
    "start": "2223020",
    "end": "2229440"
  },
  {
    "text": "and then they would take the URL parameters and they would remove the ampersand the equal signs and just stick",
    "start": "2229440",
    "end": "2234840"
  },
  {
    "text": "that at the end which was kind of a weird idea because that means you can",
    "start": "2234840",
    "end": "2239849"
  },
  {
    "text": "separate between the top one and the lowest one here they're gonna be the same but because md5 with secret",
    "start": "2239849",
    "end": "2247560"
  },
  {
    "text": "people's data is vulnerable to something called latent extension it means that we can add data to the end and this is",
    "start": "2247560",
    "end": "2253590"
  },
  {
    "text": "where the problem comes in because now we can add some stuff to the beginning which is a parameter that we're not",
    "start": "2253590",
    "end": "2259140"
  },
  {
    "text": "really using and then we can add new values for these parameters that we have to begin with so we can extend a valid",
    "start": "2259140",
    "end": "2264869"
  },
  {
    "text": "signature to now be valid for completely different data than what is what we",
    "start": "2264869",
    "end": "2271830"
  },
  {
    "text": "expected so this has broken never do this we have there's a reason why we have something called age marking and",
    "start": "2271830",
    "end": "2277410"
  },
  {
    "text": "that's because these are secure constructs and these are done in the right way if we're gonna sign with the",
    "start": "2277410",
    "end": "2284970"
  },
  {
    "text": "private key this is something we can do that also provides identification so we can sign a token and that proves that",
    "start": "2284970",
    "end": "2290040"
  },
  {
    "text": "yeah we are who we claim we are for instance we could use something called RSA PSS probabilistic signature scheme",
    "start": "2290040",
    "end": "2298440"
  },
  {
    "text": "or or we could use a lipstick curve but we should not use this case es5",
    "start": "2298440",
    "end": "2305580"
  },
  {
    "text": "because in one version 1.5 here either because we can use the same padding",
    "start": "2305580",
    "end": "2310859"
  },
  {
    "text": "vulnerability to forged signatures XML is interesting as well with XML we",
    "start": "2310859",
    "end": "2318720"
  },
  {
    "text": "introduced this large chunk of XML as a power of signature so if we have this as a so token in this case we have a",
    "start": "2318720",
    "end": "2325410"
  },
  {
    "text": "username with an ID and the name is Homer Simpson and we have this log in time that's in here so we're",
    "start": "2325410",
    "end": "2330839"
  },
  {
    "text": "gonna add us an XML signature to this we first add a signature element we then",
    "start": "2330839",
    "end": "2336690"
  },
  {
    "text": "add something called signed info and signed info basically says what part of this XML is",
    "start": "2336690",
    "end": "2342390"
  },
  {
    "text": "signed and we bring in something called the canonicalization method and the signature method so the Canon",
    "start": "2342390",
    "end": "2347549"
  },
  {
    "text": "canonicalization method it tells us how we should transform the XML before we sign it and the signature method in this",
    "start": "2347549",
    "end": "2354480"
  },
  {
    "text": "case says that we're going to use RSA and we're gonna use sha-1 now and then",
    "start": "2354480",
    "end": "2359730"
  },
  {
    "text": "the references the references are what is actually signed so in this case we have something that starts with a hash",
    "start": "2359730",
    "end": "2365849"
  },
  {
    "text": "and then underscore zero so that points to something with the ID underscore zero which in this case is this element like",
    "start": "2365849",
    "end": "2372930"
  },
  {
    "text": "because this has this ID so the radii the underscore zero with the hash in",
    "start": "2372930",
    "end": "2378119"
  },
  {
    "text": "front that points to this element so this is the only element in this XML that we're going to sign this is one",
    "start": "2378119",
    "end": "2384269"
  },
  {
    "text": "this is the flexibility of XML signatures we can sign individual element we can pick and choose which",
    "start": "2384269",
    "end": "2389369"
  },
  {
    "text": "elements we want to sign but this is also one of the big problems with it but",
    "start": "2389369",
    "end": "2394829"
  },
  {
    "text": "again for this reference we add a kind of canonicalization it here it's called a transform but it's the same function",
    "start": "2394829",
    "end": "2401700"
  },
  {
    "text": "that we used above and we're gonna say how we how are we going to canonicalize this XML and then we add a hash for that",
    "start": "2401700",
    "end": "2411509"
  },
  {
    "text": "so the reason why the canonicalization methods are important is that XML can be in many different forms like we can have",
    "start": "2411509",
    "end": "2417779"
  },
  {
    "text": "self closing tags we can have an open and close tags and we can have all sorts of stuff so by using a Canon",
    "start": "2417779",
    "end": "2423119"
  },
  {
    "text": "Equalization method we ensure that they are always on the same format before we calculate the hash now once we had done",
    "start": "2423119",
    "end": "2429779"
  },
  {
    "text": "this what we're going to sign is actually not the the thing that's on the",
    "start": "2429779",
    "end": "2435630"
  },
  {
    "text": "top there we're actually going to sign this signed info element so this part is what we're actually signing with this",
    "start": "2435630",
    "end": "2443150"
  },
  {
    "text": "signing method that's here and the signature values then actually covers",
    "start": "2443150",
    "end": "2448829"
  },
  {
    "text": "the signed info element which is kind of odd because we're then hashing something and then we're adding that to something",
    "start": "2448829",
    "end": "2454259"
  },
  {
    "text": "and then rehashing that and signing that again so it's kind of a double hashing thing going on there so if we're going",
    "start": "2454259",
    "end": "2462359"
  },
  {
    "text": "to validate this XML signature well we could have we could do a lot of things wrong so and first part here what's",
    "start": "2462359",
    "end": "2469410"
  },
  {
    "text": "wrong with this code well we have we're trying to validate a token so we bring in an XML document and we converted into",
    "start": "2469410",
    "end": "2477059"
  },
  {
    "text": "a signed XML or wrap it in a signed XML element and we pick out all the signatures because we could have many",
    "start": "2477059",
    "end": "2482329"
  },
  {
    "text": "and we validate them and if one of them fails we're going to throw a security exception",
    "start": "2482329",
    "end": "2487440"
  },
  {
    "text": "now the problem in this case is what if there are no signatures well it's going",
    "start": "2487440",
    "end": "2493829"
  },
  {
    "text": "to just skip the for loop and this sounds stupid but we'll get to so we're",
    "start": "2493829",
    "end": "2501960"
  },
  {
    "text": "gonna fix it like we were gonna add even with like an angry comment here we need to check that there's at least one",
    "start": "2501960",
    "end": "2508140"
  },
  {
    "text": "signature so in this case we're gonna check that there's at least one signature we're gonna validate all the",
    "start": "2508140",
    "end": "2514349"
  },
  {
    "text": "signatures that we find and then we're gonna grab using XPath we're gonna grab this this part here so SSI will talk in",
    "start": "2514349",
    "end": "2522839"
  },
  {
    "text": "slash username that's gonna be this part that's that's what we want from this the",
    "start": "2522839",
    "end": "2528030"
  },
  {
    "text": "problem in this case is are we using the",
    "start": "2528030",
    "end": "2533490"
  },
  {
    "text": "thing that was signed what happens if we move the element that was signed so in",
    "start": "2533490",
    "end": "2539040"
  },
  {
    "text": "this case we took the username element that was signed and we moved it in under some random other element called ignore",
    "start": "2539040",
    "end": "2545640"
  },
  {
    "text": "me and then we added a new username here this is still gonna validate the",
    "start": "2545640",
    "end": "2551549"
  },
  {
    "text": "signature because the reference down here is this I'm gonna find something",
    "start": "2551549",
    "end": "2557339"
  },
  {
    "text": "with an idea of underscore Sarah well that's up here I'm gonna calculate the hash of this yeah well this hash here",
    "start": "2557339",
    "end": "2563309"
  },
  {
    "text": "and it's the correct hash and then I'm gonna check that the signature of this matches rare is provided down here and",
    "start": "2563309",
    "end": "2570630"
  },
  {
    "text": "it matches so the problem is we're not where we still have something that's signed but we've moved the thing that",
    "start": "2570630",
    "end": "2577619"
  },
  {
    "text": "was signed and I'm gonna show you a quick demo of this because it's kind of",
    "start": "2577619",
    "end": "2582780"
  },
  {
    "text": "funny so we have in this case we have a token that we can post to a server and",
    "start": "2582780",
    "end": "2588500"
  },
  {
    "text": "we we have somehow managed to get hold of an expired okay so if you tried to send",
    "start": "2588500",
    "end": "2594110"
  },
  {
    "text": "that to the serve it's just gonna say error expire token so we're gonna look at this XML and it looks something like",
    "start": "2594110",
    "end": "2599540"
  },
  {
    "text": "this which is kind of hard to read so I'm gonna help us a little bit here so",
    "start": "2599540",
    "end": "2604970"
  },
  {
    "text": "we have something at the top that's a necessary token we have obviously some kind of a date here which is probably",
    "start": "2604970",
    "end": "2612290"
  },
  {
    "text": "why it was expired because this is a month ago and we have the signature and we have this piece here at the end so",
    "start": "2612290",
    "end": "2620510"
  },
  {
    "text": "what we can do now is we can we can move this a little bit so we take a copy of",
    "start": "2620510",
    "end": "2625550"
  },
  {
    "text": "this and we take a copy of this because that's what's actually been signed in",
    "start": "2625550",
    "end": "2630770"
  },
  {
    "text": "this case if we look at the reference which is here we see that what was",
    "start": "2630770",
    "end": "2635780"
  },
  {
    "text": "signed was the entire talk in not just the username so for our newly forged",
    "start": "2635780",
    "end": "2641000"
  },
  {
    "text": "token we're gonna remove the ID of the top-level element because the signature it's on this element down here and then",
    "start": "2641000",
    "end": "2648560"
  },
  {
    "text": "we're going to change the username to something different like this so now we",
    "start": "2648560",
    "end": "2653570"
  },
  {
    "text": "have a signature that's all over this element but we're hoping that the system",
    "start": "2653570",
    "end": "2659090"
  },
  {
    "text": "would instead use the outer element so we've wrapped the signature and we",
    "start": "2659090",
    "end": "2666980"
  },
  {
    "text": "forgot to change the date 2019 because why not and now I'm the admin like I've",
    "start": "2666980",
    "end": "2677000"
  },
  {
    "text": "just forged a signature here and this sounds kind of odd so missing signatures",
    "start": "2677000",
    "end": "2683090"
  },
  {
    "text": "and brass signatures that can't be a real problem right well it can because someone did a survey on sam'l validation",
    "start": "2683090",
    "end": "2689840"
  },
  {
    "text": "libraries and sam'l lists SSO token libraries basically so and they found it",
    "start": "2689840",
    "end": "2695740"
  },
  {
    "text": "out of the 14 major sam'l friend frameworks 11 of them including sage",
    "start": "2695740",
    "end": "2701240"
  },
  {
    "text": "Salesforce an IBM had critical XML signature wrapping vulnerabilities and for some of these libraries you can even",
    "start": "2701240",
    "end": "2708230"
  },
  {
    "text": "just remove the signature and they would still validate so you could be so then",
    "start": "2708230",
    "end": "2713240"
  },
  {
    "text": "the name of the papers be whoever you want to be because you could just Forge first the tokens",
    "start": "2713240",
    "end": "2719869"
  },
  {
    "text": "so moving on if we want to validate a",
    "start": "2719869",
    "end": "2726420"
  },
  {
    "text": "signature we could do something like this so we're going to bring in the signature we're going to check that they have the same",
    "start": "2726420",
    "end": "2731519"
  },
  {
    "text": "length and if they don't have the same same length we're going to return false and if not we're going to move into this",
    "start": "2731519",
    "end": "2736619"
  },
  {
    "text": "for loop where we check in one char at the time basically what an equals function would normally do and then if",
    "start": "2736619",
    "end": "2741930"
  },
  {
    "text": "we find something that's different we're gonna return false we're gonna return early that's the thing here and if not",
    "start": "2741930",
    "end": "2747690"
  },
  {
    "text": "we're gonna return true so in this case of course we have a timing problem because if it returns early it means",
    "start": "2747690",
    "end": "2753390"
  },
  {
    "text": "that the the mismatch in the signature was early so we can try a lot of different values and we can measure at a",
    "start": "2753390",
    "end": "2759599"
  },
  {
    "text": "time and we can use this side channel to figure out what the correct signature should have been and we can try to fix",
    "start": "2759599",
    "end": "2765329"
  },
  {
    "text": "it so we could do something like this so instead of returning early we have a boolean and we call that result equals",
    "start": "2765329",
    "end": "2771119"
  },
  {
    "text": "true and then if it finds something that's different we set result equals false and then we return the result the",
    "start": "2771119",
    "end": "2776940"
  },
  {
    "text": "problem in this case is we have something called JIT and jet is gonna figure out that we're setting it to true",
    "start": "2776940",
    "end": "2782309"
  },
  {
    "text": "up there we're setting it to false down there and there's no way it can be reset back to true and there are no side",
    "start": "2782309",
    "end": "2789210"
  },
  {
    "text": "effects so they just can just skip the rest of the comparisons because now we have separate for a return a result to",
    "start": "2789210",
    "end": "2794640"
  },
  {
    "text": "false and it's never going to be reset to true and again we have the timing problem so what we need to do is use",
    "start": "2794640",
    "end": "2801299"
  },
  {
    "text": "something called a constant time comparison function and this is usually provided by the framework so you don't have to actually implement this code but",
    "start": "2801299",
    "end": "2807900"
  },
  {
    "text": "what we're doing here is some X or N or stuff to make sure that it doesn't get",
    "start": "2807900",
    "end": "2812969"
  },
  {
    "text": "fixed fixed by JIT so if we're going to validate signatures",
    "start": "2812969",
    "end": "2819599"
  },
  {
    "text": "what we want to do is we want to verify the signature we want to verify that the elements we expect to be signed or in",
    "start": "2819599",
    "end": "2825839"
  },
  {
    "text": "fact signed and we want to verify that the elements that we expect to be signed",
    "start": "2825839",
    "end": "2832049"
  },
  {
    "text": "are signed in the way that we expect so they're not signed with a different function they're not signed in a",
    "start": "2832049",
    "end": "2837479"
  },
  {
    "text": "different way and then we have to make sure that we're actually using the data that was signed so in the wrapping",
    "start": "2837479",
    "end": "2842640"
  },
  {
    "text": "examples we saw that we didn't actually use the data that was signed we just moved that elsewhere so I'm going to end",
    "start": "2842640",
    "end": "2849029"
  },
  {
    "text": "off with some some examples from the Jerome from jobs or JSON web tokens because",
    "start": "2849029",
    "end": "2854740"
  },
  {
    "text": "there's a lot of stuff that has gone wrong there lately so a a JSON web",
    "start": "2854740",
    "end": "2860020"
  },
  {
    "text": "tokens looks something like you see at the top there so the first part in red that's the header which tells us which",
    "start": "2860020",
    "end": "2865900"
  },
  {
    "text": "function was used in this case H s 256 Dutch 8 that's H max sha 256 and the",
    "start": "2865900",
    "end": "2873460"
  },
  {
    "text": "green part it's that's the claims so in this case we have a subject with the name of Homer and we have a timestamp",
    "start": "2873460",
    "end": "2879820"
  },
  {
    "text": "when this was created and then we have the signature in blue which is created",
    "start": "2879820",
    "end": "2884950"
  },
  {
    "text": "by base64 URL encoding the header and then adding a dot and then base64 URL",
    "start": "2884950",
    "end": "2890770"
  },
  {
    "text": "encoding the payload and then signing that with the signing key using the method that's specified in the header so",
    "start": "2890770",
    "end": "2899380"
  },
  {
    "text": "implementation issue number one forgetting to check the signature when we're verifying the token this is quite",
    "start": "2899380",
    "end": "2905380"
  },
  {
    "text": "an easy thing to miss actually because a lot of time people would do something like this they will have some kind of",
    "start": "2905380",
    "end": "2910810"
  },
  {
    "text": "jvt library and it will call the decode function and rule they will think that it actually verifies the token as well",
    "start": "2910810",
    "end": "2916630"
  },
  {
    "text": "but it doesn't it just decodes it and brings you the data from the payload but it doesn't actually check the signature",
    "start": "2916630",
    "end": "2923730"
  },
  {
    "text": "implementation issue number two if we go to the RFC at the bottom there there's",
    "start": "2923730",
    "end": "2929530"
  },
  {
    "text": "something called there is a algorithm that we can use in header that's called none and none basically means as it says",
    "start": "2929530",
    "end": "2937390"
  },
  {
    "text": "in this in the center there no digital signature or Mac performed so we actually have a token that's unsigned",
    "start": "2937390",
    "end": "2943750"
  },
  {
    "text": "and this was actually supported by a lot of frameworks so we could take a balla token we could remove the signature we",
    "start": "2943750",
    "end": "2949750"
  },
  {
    "text": "could change the algorithms and on and then we could change the payload and we could once again become whoever we want to be implementation in issue 3 once",
    "start": "2949750",
    "end": "2959200"
  },
  {
    "text": "again we look at the RFC and we see this stuff and we already know that pkcs1",
    "start": "2959200",
    "end": "2964900"
  },
  {
    "text": "version 1.5 have some issues for some reason it's been included in the RFC for",
    "start": "2964900",
    "end": "2970900"
  },
  {
    "text": "JSON web tokens and here's an example and as you can see here it says in for",
    "start": "2970900",
    "end": "2977050"
  },
  {
    "text": "this library JW crypto the implementation of the RSA 1 underscore 5",
    "start": "2977050",
    "end": "2982119"
  },
  {
    "text": "algorithm was found to be vulnerable to the million message attack which was the one we talked about earlier implementation",
    "start": "2982119",
    "end": "2990130"
  },
  {
    "text": "issue number four we're reading in some key bytes from a file and then we're",
    "start": "2990130",
    "end": "2996430"
  },
  {
    "text": "going to verify a token that we're getting in and in this case it's it was",
    "start": "2996430",
    "end": "3002820"
  },
  {
    "text": "supposed to be signed asymmetrically and the the public key is of course",
    "start": "3002820",
    "end": "3008220"
  },
  {
    "text": "something that anyone can download because and anyone that's going to use these tokens they are supposed to be able to verify that these tokens were",
    "start": "3008220",
    "end": "3014760"
  },
  {
    "text": "signed by the entity that we're supposed to sign them so they can all access the public key but of course they don't have the private key but what an attacker can",
    "start": "3014760",
    "end": "3021690"
  },
  {
    "text": "do then if this is implemented in a wrong way he can take a token that signed asymmetrically and let's change",
    "start": "3021690",
    "end": "3028410"
  },
  {
    "text": "it to be signed symmetrically and then fool this algorithm on the top here to",
    "start": "3028410",
    "end": "3033840"
  },
  {
    "text": "think that the public key is an H Mac instead and the public key is known so",
    "start": "3033840",
    "end": "3038850"
  },
  {
    "text": "now you can forge a token by pretending that it was a symmetric token instead of an asymmetric token and a lot of",
    "start": "3038850",
    "end": "3045270"
  },
  {
    "text": "libraries actually had were vulnerable to this because they were doing something similar to what's written about at the top here they would read",
    "start": "3045270",
    "end": "3051780"
  },
  {
    "text": "some key material from a file and then they wouldn't care if that was a a symmetric key or an H Macke and it would",
    "start": "3051780",
    "end": "3058170"
  },
  {
    "text": "just use it and just use whatever came from the from the token to figure out",
    "start": "3058170",
    "end": "3063630"
  },
  {
    "text": "how it was signed so implementation issue number five weak RSA keys so we have weak randoms some",
    "start": "3063630",
    "end": "3071820"
  },
  {
    "text": "people think that well our tokens are so long so we're gonna use a shorter key because that makes the token smaller but",
    "start": "3071820",
    "end": "3078840"
  },
  {
    "text": "if you use a 512 bit RSA key you can trivially break it for 75 dollars on a",
    "start": "3078840",
    "end": "3084090"
  },
  {
    "text": "double yes and 768 bit RSA key is also not recommended anymore it's also",
    "start": "3084090",
    "end": "3089970"
  },
  {
    "text": "something you can break in quite short time we could also have a weak H Mac key",
    "start": "3089970",
    "end": "3096180"
  },
  {
    "text": "which is just a short text string that I see a lot of developers doing this they looked bringing in like the short text",
    "start": "3096180",
    "end": "3101430"
  },
  {
    "text": "ring and that's the Reg McKee and actually now hash code has support for JSON web tokens so that makes it a lot",
    "start": "3101430",
    "end": "3107280"
  },
  {
    "text": "easier to try to break them so we can have a file with some JS web tokens and we try to brute force the H Maki",
    "start": "3107280",
    "end": "3114329"
  },
  {
    "text": "in an easy way implementation issue number six using standard equals",
    "start": "3114329",
    "end": "3121859"
  },
  {
    "text": "functionality in the programming language which means we probably might or we might get a timing side-channel",
    "start": "3121859",
    "end": "3127859"
  },
  {
    "text": "because it might exit early an implementation issue number seven wrong",
    "start": "3127859",
    "end": "3133289"
  },
  {
    "text": "comparison so in this case we we calculate the h map and then we're going",
    "start": "3133289",
    "end": "3138329"
  },
  {
    "text": "to try to use like a timing safe equals function here but we're using the wrong length so instead of using the expected",
    "start": "3138329",
    "end": "3145289"
  },
  {
    "text": "signature length we're using the signature that we're getting in from the attacker we're using that length and",
    "start": "3145289",
    "end": "3151849"
  },
  {
    "text": "this was actually a problem that was in the identity model extension and like",
    "start": "3151849",
    "end": "3160410"
  },
  {
    "text": "this this blog post didn't really say all that much but on Twitter I found an explanation of what was wrong here if we",
    "start": "3160410",
    "end": "3166979"
  },
  {
    "text": "scroll all the way down it says which means you can truncate the JWT signature to force the comparison on the first",
    "start": "3166979",
    "end": "3172920"
  },
  {
    "text": "byte only a real disaster so you could just remove the entire signature except",
    "start": "3172920",
    "end": "3179999"
  },
  {
    "text": "for one byte and then you could just prove force it and it would be like like with the entry wolf like there would be",
    "start": "3179999",
    "end": "3185849"
  },
  {
    "text": "only 256 different possible values so",
    "start": "3185849",
    "end": "3191670"
  },
  {
    "text": "some recommendations towards the end turn never ever invent your own crypto or signing use cryptographically secure",
    "start": "3191670",
    "end": "3198719"
  },
  {
    "text": "randoms use affected crypto so if you're using dope net use data protection if",
    "start": "3198719",
    "end": "3205140"
  },
  {
    "text": "you're going to use something else use properly tested crypto libraries and preferably ones where you don't have to",
    "start": "3205140",
    "end": "3210959"
  },
  {
    "text": "add all kinds of stuff manually do not put the keys in source control as we saw",
    "start": "3210959",
    "end": "3219769"
  },
  {
    "text": "there is a really good presentation called everything you need to know about cryptography in one hour from a guy",
    "start": "3220400",
    "end": "3226190"
  },
  {
    "text": "called protocol and percival which is actually more than one hour but still a good talk and some recommended people",
    "start": "3226190",
    "end": "3232880"
  },
  {
    "text": "you could follow there's matcha green which which I mentioned with with the PICUs is one examples and then there's a",
    "start": "3232880",
    "end": "3241130"
  },
  {
    "text": "really good book called cryptography engineering design principles and practical applications which is among others written by Bruce Schneier but if",
    "start": "3241130",
    "end": "3248600"
  },
  {
    "text": "you really want to learn this stuff you should oh sorry there's a really great",
    "start": "3248600",
    "end": "3257120"
  },
  {
    "text": "website that that's called the most critical challenges and this is a set of",
    "start": "3257120",
    "end": "3262400"
  },
  {
    "text": "of their eight set sets of tasks and each set has a set of tasks that you can",
    "start": "3262400",
    "end": "3272210"
  },
  {
    "text": "do here so you have in for the first set you have eight different things that you can do and by doing these things you",
    "start": "3272210",
    "end": "3279020"
  },
  {
    "text": "learn all this stuff like how to break yeah X or one one-time pads and how to",
    "start": "3279020",
    "end": "3284930"
  },
  {
    "text": "break RSA and how to break CBC and things like that so they're really great",
    "start": "3284930",
    "end": "3290710"
  },
  {
    "text": "and you can find solutions for them and you can write your your solutions in any programming language and you can find",
    "start": "3290710",
    "end": "3296600"
  },
  {
    "text": "solutions and a lot of different programming languages if you're stuck if you're gonna do this I really recommend",
    "start": "3296600",
    "end": "3302480"
  },
  {
    "text": "that you follow the instructions because there are some really good recommendations on how you should write",
    "start": "3302480",
    "end": "3308000"
  },
  {
    "text": "your code so it can be reused and I didn't quite follow them the first time I did this and it was really annoying",
    "start": "3308000",
    "end": "3315020"
  },
  {
    "text": "later because we're gonna write bits of code and gonna reuse that code later and it gets really annoying if you do it the wrong way yeah that's it any questions",
    "start": "3315020",
    "end": "3329859"
  },
  {
    "text": "so if you didn't understand some of the attacks here don't feel bad I had to read this many many times to understand",
    "start": "3330490",
    "end": "3337160"
  },
  {
    "text": "like the padding Oracle stuff it's super hard to understand and it annoyed me for such a long time that I eventually went",
    "start": "3337160",
    "end": "3343970"
  },
  {
    "text": "back and read it enough times to understand how it works so so if it's kind of mind-bending don't worry and if",
    "start": "3343970",
    "end": "3351440"
  },
  {
    "text": "you have this if you're like me and you really want to understand it at some point you you're gonna understand it",
    "start": "3351440",
    "end": "3356599"
  },
  {
    "text": "actually yes",
    "start": "3356599",
    "end": "3362500"
  },
  {
    "text": "if there was any unit tests for these libraries I'm not sure",
    "start": "3380600",
    "end": "3386330"
  },
  {
    "text": "it should be but you have to know about it and that's the problem a lot of that",
    "start": "3399690",
    "end": "3404730"
  },
  {
    "text": "that's kind of the reason why I'm doing this talk is I want people to be aware of these things because it's easy to get",
    "start": "3404730",
    "end": "3409859"
  },
  {
    "text": "it wrong and if you don't know that you could like in an XML you could move the sign token somewhere else and then they",
    "start": "3409859",
    "end": "3415950"
  },
  {
    "text": "would still validate that's you wouldn't think of adding a a unit test for a",
    "start": "3415950",
    "end": "3422690"
  },
  {
    "text": "trick yeah very often unit tests only",
    "start": "3425089",
    "end": "3435300"
  },
  {
    "text": "cover the the happy paths which is also think that we should change we should",
    "start": "3435300",
    "end": "3440460"
  },
  {
    "text": "start adding unit tests that actually test unexpected behavior or stuff that we don't want to happen like signature",
    "start": "3440460",
    "end": "3446220"
  },
  {
    "text": "wrapping like signature truncation and things like that",
    "start": "3446220",
    "end": "3451670"
  },
  {
    "text": "the stuff that I've seen so far is people using math.random from JavaScript",
    "start": "3484990",
    "end": "3490900"
  },
  {
    "text": "that's the only thing I've seen so far because not now we know browsers you can do browsers now usually have something",
    "start": "3490900",
    "end": "3505570"
  },
  {
    "text": "called window dot crypto and in there",
    "start": "3505570",
    "end": "3512470"
  },
  {
    "text": "you actually have functions for doing like get random values so you have a",
    "start": "3512470",
    "end": "3517599"
  },
  {
    "text": "secure random right in there so you don't have to use math.random and it's",
    "start": "3517599",
    "end": "3523330"
  },
  {
    "text": "stupid random you actually have proper random in the browser I'm sorry probably going to add a lot more stuff there like hashing functions",
    "start": "3523330",
    "end": "3530260"
  },
  {
    "text": "and and cryptographic functions and things like that eventually but there isn't all that much there at the moment",
    "start": "3530260",
    "end": "3537839"
  },
  {
    "text": "there are some implementation notations though of cryptographic libraries for Java Script and of Stanford has some and",
    "start": "3537839",
    "end": "3545700"
  },
  {
    "text": "so you have to pick the ones that are vetted if you're going to do it and hopefully it will get included in the",
    "start": "3545700",
    "end": "3550810"
  },
  {
    "text": "browser's eventually natively but um I haven't been following the progress",
    "start": "3550810",
    "end": "3555849"
  },
  {
    "text": "there so yes",
    "start": "3555849",
    "end": "3560790"
  },
  {
    "text": "so the libraries that come out of Google they've been subject to black in Bauhaus",
    "start": "3568830",
    "end": "3576160"
  },
  {
    "text": "tested tools so they're usually good the stuff that it's in in the.net framework",
    "start": "3576160",
    "end": "3581440"
  },
  {
    "text": "is probably I would suspect now it's properly tested even though they've had some bugs earlier so it's I think as",
    "start": "3581440",
    "end": "3590140"
  },
  {
    "text": "long as you stick to something that's from a or that has been tested through",
    "start": "3590140",
    "end": "3597040"
  },
  {
    "text": "you could probably find pieces of it in the source code if it's been tested with",
    "start": "3597040",
    "end": "3602800"
  },
  {
    "text": "a proper testing librarian that actually checks for these things you there might be unit tests or integration tests or",
    "start": "3602800",
    "end": "3608260"
  },
  {
    "text": "things like that that actually test it I I think I have seen some recommended",
    "start": "3608260",
    "end": "3615460"
  },
  {
    "text": "libraries in Java you usually use like bouncy castle and in because that's been",
    "start": "3615460",
    "end": "3620620"
  },
  {
    "text": "tested a lot in in the.net space you usually use the built in stuff because the dotnet framework has or IES and all",
    "start": "3620620",
    "end": "3627160"
  },
  {
    "text": "kinds of cryptographic libraries in there which are probably implemented correctly if you're on node or some",
    "start": "3627160",
    "end": "3633280"
  },
  {
    "text": "other platform then I don't know",
    "start": "3633280",
    "end": "3637770"
  },
  {
    "text": "all right thank you [Applause]",
    "start": "3641280",
    "end": "3648020"
  }
]