[
  {
    "text": "good morning thank you very much for attending this talk I'm sure you are going to be the",
    "start": "1760",
    "end": "7759"
  },
  {
    "text": "very best audience I've ever had today's talk as you can see is about",
    "start": "7759",
    "end": "13880"
  },
  {
    "text": "first class commands which is a design pattern that goes right back to the original uh gang",
    "start": "13880",
    "end": "20800"
  },
  {
    "text": "of four design patterns book and uh I do find it to be a useful and Powerful pattern and I'll be talking about why I",
    "start": "20800",
    "end": "27320"
  },
  {
    "text": "feel that way but as you can see from the subtitle the thing that I find most interesting",
    "start": "27320",
    "end": "32758"
  },
  {
    "text": "about this particular pattern is that it's fertile and what I mean by fertile is",
    "start": "32759",
    "end": "40160"
  },
  {
    "text": "pretty much exactly what the word literally means it gives rise to other ideas it provokes other thoughts other",
    "start": "40160",
    "end": "46320"
  },
  {
    "text": "architectures even if they're not directly implementations of the first class command pattern so for those who",
    "start": "46320",
    "end": "53160"
  },
  {
    "text": "are not familiar with the pattern I am going to discuss the pattern of course and then I'd like to digress and discuss some of the things that implementing the",
    "start": "53160",
    "end": "60519"
  },
  {
    "text": "pattern or thinking about the pattern have provoked both in myself and in other software designers and I hope that",
    "start": "60519",
    "end": "68560"
  },
  {
    "text": "either this will remind you about why you find this pattern interesting if you've been using it or will make you",
    "start": "68560",
    "end": "74920"
  },
  {
    "text": "curious about other places you could take software",
    "start": "74920",
    "end": "79680"
  },
  {
    "text": "design now in software when we say something is first class we mean that it is a",
    "start": "82079",
    "end": "91399"
  },
  {
    "text": "full um a fully important entity in our software for example if we say that a",
    "start": "91399",
    "end": "98079"
  },
  {
    "text": "language like lisp has first class functions we mean that they can be passed to other functions as arguments",
    "start": "98079",
    "end": "104520"
  },
  {
    "text": "they can be assigned to variables they can be returned from functions they're just as uh fully featured as any other",
    "start": "104520",
    "end": "111399"
  },
  {
    "text": "value that you would have um in the programming language a",
    "start": "111399",
    "end": "117600"
  },
  {
    "text": "command is exactly what it sounds like if someone says rege be on stage at 1020",
    "start": "117600",
    "end": "123680"
  },
  {
    "text": "they're telling me what to do in software a command is the same thing it's an instruction to tell",
    "start": "123680",
    "end": "130879"
  },
  {
    "text": "something else to do something and when we say it's a first class command we mean that that instruction can be passed",
    "start": "130879",
    "end": "138120"
  },
  {
    "text": "to a function returned from a function stored in a",
    "start": "138120",
    "end": "143599"
  },
  {
    "text": "variable and the first part of this talk is going to be exactly what the screen says why do we care about commands and",
    "start": "143599",
    "end": "152720"
  },
  {
    "text": "from there what power do we get from making them first",
    "start": "152720",
    "end": "158000"
  },
  {
    "text": "class so uh let's get",
    "start": "160200",
    "end": "164800"
  },
  {
    "text": "started the canonical example of using commands is when you have some sort of mutable",
    "start": "166239",
    "end": "172080"
  },
  {
    "text": "data I myself am a big fan of the more immutable data functional uh programming",
    "start": "172080",
    "end": "178000"
  },
  {
    "text": "paradigms however somehow in 35 odd years of programming I've never quite been able to escape the fact that most",
    "start": "178000",
    "end": "184080"
  },
  {
    "text": "programs actually have to make something change or appear to change so we're going to talk about that today there are",
    "start": "184080",
    "end": "190760"
  },
  {
    "text": "ways to take everything that I'm going to talk about today into a more immutable data functional World we're",
    "start": "190760",
    "end": "196680"
  },
  {
    "text": "not going to discuss those here today but those of you who are functional programmers are are super excited about functional programming will no doubt",
    "start": "196680",
    "end": "202879"
  },
  {
    "text": "want to take these ideas and and to take them to a new place so here's an example",
    "start": "202879",
    "end": "211480"
  },
  {
    "text": "of a hypothetical mutable data structure it's just a buffer and I mean it in the sort of old",
    "start": "212239",
    "end": "219439"
  },
  {
    "text": "school Gray beard sense of some sort of string or other thing that we can edit like a buffer in uh in an editing",
    "start": "219439",
    "end": "225439"
  },
  {
    "text": "program as opposed to strictly a buffer in a signal processing uh",
    "start": "225439",
    "end": "230560"
  },
  {
    "text": "sense we have some way of constructing this data structure I happen to be using",
    "start": "230560",
    "end": "236280"
  },
  {
    "text": "JavaScript for the examples but uh this programming um this pattern goes back to Small Talk",
    "start": "236280",
    "end": "243360"
  },
  {
    "text": "C++ I originally learned it with something called object Pascal and those of you who um are getting a little",
    "start": "243360",
    "end": "250239"
  },
  {
    "text": "grease and Gray in your uh in your hair and beards will uh will remember that",
    "start": "250239",
    "end": "255959"
  },
  {
    "text": "from way back in the early early early Macintosh programming days we have um a",
    "start": "255959",
    "end": "262040"
  },
  {
    "text": "replace with method and we have some sort of way of turning it into a",
    "start": "262040",
    "end": "267680"
  },
  {
    "text": "string we've encapsuled ated some sort of data which looks like a string and",
    "start": "267960",
    "end": "273440"
  },
  {
    "text": "with some methods and this is the type of thing",
    "start": "273440",
    "end": "278880"
  },
  {
    "text": "that we might use when working with our buffer we make a new buffer we give it some contact some content of course we",
    "start": "278880",
    "end": "286240"
  },
  {
    "text": "could have a Constructor that takes content and so on not important for this example and we have an ability to",
    "start": "286240",
    "end": "291720"
  },
  {
    "text": "replace sections of the buffer with something new if we were making a really really",
    "start": "291720",
    "end": "298720"
  },
  {
    "text": "really Ultra simple uh text editor the kind of thing uh you might do",
    "start": "298720",
    "end": "304639"
  },
  {
    "text": "um say if you're teaching your children to program or something you might use a",
    "start": "304639",
    "end": "310039"
  },
  {
    "text": "a structure like this and in fact we're mostly going to talk about text editing here today",
    "start": "310039",
    "end": "315720"
  },
  {
    "text": "although there are many many many other applications besides this but this is a particularly easy one that I think",
    "start": "315720",
    "end": "320840"
  },
  {
    "text": "everyone can grasp so here we have a way of creating a buffer and then doing some edits on it",
    "start": "320840",
    "end": "327440"
  },
  {
    "text": "using the replacewith method now our buffer is an",
    "start": "327440",
    "end": "334680"
  },
  {
    "text": "object and somewhat conforming to the objectoriented pattern or Paradigm it",
    "start": "334680",
    "end": "342479"
  },
  {
    "text": "has methods that act upon it and it encapsulates inside of it all the ways",
    "start": "342479",
    "end": "348919"
  },
  {
    "text": "to implement the methods that we uh that we invoke on it in the objectoriented programming",
    "start": "348919",
    "end": "356840"
  },
  {
    "text": "Paradigm we treat objects as first class entities we assign objects to variables",
    "start": "356840",
    "end": "364039"
  },
  {
    "text": "we can pass them to functions or methods as arguments we can return them from",
    "start": "364039",
    "end": "369280"
  },
  {
    "text": "functions or or methods objects are just like ins or",
    "start": "369280",
    "end": "375680"
  },
  {
    "text": "strings some of you are old enough to remember when that was revolutionary but I hope everyone is nodding along and saying yes we get that it's 2017 not",
    "start": "375680",
    "end": "386199"
  },
  {
    "text": "1967 now we happen to have only one method of interest in this super toy simple example replac with but of course",
    "start": "387199",
    "end": "393360"
  },
  {
    "text": "we could have others but there's this idea of an object and a method that you invoke upon the",
    "start": "393360",
    "end": "401400"
  },
  {
    "text": "object but in most programming languages methods are not first class",
    "start": "402319",
    "end": "408840"
  },
  {
    "text": "entities you can for example in uh C++ get a reference to pointer to where the",
    "start": "408840",
    "end": "415759"
  },
  {
    "text": "method can be invoked but you actually don't have the method itself in languages like Ruby you can actually get",
    "start": "415759",
    "end": "421759"
  },
  {
    "text": "Unbound methods separately in JavaScript you can get functions which you think are bound to a prototype and so behave",
    "start": "421759",
    "end": "428080"
  },
  {
    "text": "like a method and we",
    "start": "428080",
    "end": "434680"
  },
  {
    "text": "can in some languages get methods as first CLI as entities and if not if",
    "start": "434680",
    "end": "440960"
  },
  {
    "text": "there's not a convenient way to do it we can make our own and let's take a look at an example",
    "start": "440960",
    "end": "447800"
  },
  {
    "text": "of how to do that here is an invocation of a",
    "start": "447800",
    "end": "453039"
  },
  {
    "text": "method so there's the method itself there is the",
    "start": "453039",
    "end": "458360"
  },
  {
    "text": "objects upon which the method is being invoked and then there are the arguments for the",
    "start": "458360",
    "end": "465120"
  },
  {
    "text": "method now invocations are not first class entities in JavaScript they're not",
    "start": "466199",
    "end": "472360"
  },
  {
    "text": "first class entities in small talk they're not first class entities in C++ Ruby allows you to get Unbound and",
    "start": "472360",
    "end": "479720"
  },
  {
    "text": "methods but they're not first class entities in Ruby they just happen ephemerally they just",
    "start": "479720",
    "end": "487919"
  },
  {
    "text": "happen but what if we wanted those to be first class entities notice not the",
    "start": "488280",
    "end": "494280"
  },
  {
    "text": "method but the invocation of the method what could we do with",
    "start": "494280",
    "end": "501360"
  },
  {
    "text": "that well if you think about an invocation we have a couple things that happen we have to know who the receiver",
    "start": "501680",
    "end": "508159"
  },
  {
    "text": "is we have to know the method it's self we have to know the arguments in a world full of mutable State it's a little bit",
    "start": "508159",
    "end": "513760"
  },
  {
    "text": "more complicated than that isn't it because the receiver was in some State before the method was was invoked and",
    "start": "513760",
    "end": "519640"
  },
  {
    "text": "then it'll be in some State afterwards and modern languages being as garbled as they are except for those people who are",
    "start": "519640",
    "end": "526320"
  },
  {
    "text": "in a room where hascal is being dis displayed or perhaps Elixir will tell you that a lot of other side effects",
    "start": "526320",
    "end": "531399"
  },
  {
    "text": "that can happen be outside of the object that's actually receiving the method so they're a little bit messy",
    "start": "531399",
    "end": "540440"
  },
  {
    "text": "but if we had some way of treating them as first class objects we'd be able to do some things with them I mentioned a",
    "start": "540480",
    "end": "546959"
  },
  {
    "text": "couple earlier multiple times we would be able to pass them as arguments to",
    "start": "546959",
    "end": "552320"
  },
  {
    "text": "another method or a function we would be able to receive them back as the result",
    "start": "552320",
    "end": "558000"
  },
  {
    "text": "of a method or function we'd be able to store them in",
    "start": "558000",
    "end": "563560"
  },
  {
    "text": "variables let's talk about that last one what could we do if we could save",
    "start": "563600",
    "end": "570760"
  },
  {
    "text": "invocations and again not methods but the invocations of",
    "start": "570760",
    "end": "576120"
  },
  {
    "text": "methods we could put them in a variable what kinds of variables do we have we have SIMPLE variables we have",
    "start": "578600",
    "end": "587839"
  },
  {
    "text": "Maps we have cues we have arrays we have properties of other",
    "start": "587839",
    "end": "594600"
  },
  {
    "text": "objects",
    "start": "594600",
    "end": "597600"
  },
  {
    "text": "here is an editing uh piece of editing software and this edit",
    "start": "601519",
    "end": "609200"
  },
  {
    "text": "class represents a method",
    "start": "609200",
    "end": "614000"
  },
  {
    "text": "invocation we give it everything that we want to invoke in our replace method on",
    "start": "614560",
    "end": "621000"
  },
  {
    "text": "a uh a buffer we construct it and then later",
    "start": "621000",
    "end": "626480"
  },
  {
    "text": "whenever we want to actually perform the invocation we call I'll do it this is a form of delayed",
    "start": "626480",
    "end": "634240"
  },
  {
    "text": "invocation here's our buffer object game but we've made a change notice what happens now with our",
    "start": "637720",
    "end": "646600"
  },
  {
    "text": "alleged replace with instead of mutating the buffer in",
    "start": "646600",
    "end": "652720"
  },
  {
    "text": "place it returns an edit object",
    "start": "652720",
    "end": "658800"
  },
  {
    "text": "and now whenever we call replace with on a buffer we can take what it returns and",
    "start": "665360",
    "end": "673720"
  },
  {
    "text": "we can push it onto a queue how many people here are doing",
    "start": "673720",
    "end": "678839"
  },
  {
    "text": "frontend JavaScript development either in a full stack or focused yeah I know asking nowadays",
    "start": "678839",
    "end": "685600"
  },
  {
    "text": "about front end JavaScript development is like asking about punch card development the 1960s everyone does it even if that isn't your thing um this",
    "start": "685600",
    "end": "693839"
  },
  {
    "text": "looks awfully familiar this looks a lot like getting a promise back from from performing a lot of asynchronous uh uh",
    "start": "693839",
    "end": "699839"
  },
  {
    "text": "invocations doesn't it and we're going to talk about that in a moment but what we're going to do is",
    "start": "699839",
    "end": "706720"
  },
  {
    "text": "every time we allegedly want to make a change to a buffer we're going to get this edit",
    "start": "706720",
    "end": "711760"
  },
  {
    "text": "object back and put it on a job queue this isn't the only thing we can do but this is a good example of one",
    "start": "711760",
    "end": "719680"
  },
  {
    "text": "and then after we've done that a bunch of times we can invoke them in this",
    "start": "719680",
    "end": "725600"
  },
  {
    "text": "particular case there's no difference between the old invoking the method which changed the buffer right away and",
    "start": "725600",
    "end": "730800"
  },
  {
    "text": "then sticking them all on a queue and then invoking them in a in a hurry but once we've got this job queue we can do",
    "start": "730800",
    "end": "737760"
  },
  {
    "text": "other things with the job queue this pattern is sometimes called uh manager",
    "start": "737760",
    "end": "743680"
  },
  {
    "text": "worker I think sometimes but it's related to the command pattern",
    "start": "743680",
    "end": "749600"
  },
  {
    "text": "job cues give us the ability to defer execution in the last bit of code that we just showed we didn't defer it for",
    "start": "751839",
    "end": "757160"
  },
  {
    "text": "very long we tried to execute them all right away but for example if part of that was",
    "start": "757160",
    "end": "764040"
  },
  {
    "text": "an asynchronous invocation we could wrap some code around it that handle promises maybe call RSVP library or something and",
    "start": "764040",
    "end": "771000"
  },
  {
    "text": "force them to be serialized something like",
    "start": "771000",
    "end": "776720"
  },
  {
    "text": "this now the fact that we have taken that invocation and put it into an object and",
    "start": "777839",
    "end": "784800"
  },
  {
    "text": "this is what promise pattern is about in a very specialized way and whereas the command pattern is more General is what",
    "start": "784800",
    "end": "791120"
  },
  {
    "text": "allows us to separate the issue of how we want to invoke things from those",
    "start": "791120",
    "end": "797199"
  },
  {
    "text": "things that need to do editing changing or whatever the buffer knows okay when",
    "start": "797199",
    "end": "803480"
  },
  {
    "text": "you want to replace something here's a com here's a command but the buffer doesn't have to know anything about whether commands need to be serialized",
    "start": "803480",
    "end": "810320"
  },
  {
    "text": "it doesn't know about whether they're asynchronous or not we separate concerns and later on in this talk when I'm",
    "start": "810320",
    "end": "815680"
  },
  {
    "text": "wrapping up there will be a slide that talks about separation of concerns we can this particular thing by",
    "start": "815680",
    "end": "823040"
  },
  {
    "text": "the way I stole from the Ember concurrency homepage because it's a nice diagram it shows about",
    "start": "823040",
    "end": "828600"
  },
  {
    "text": "serializing a bunch of a bunch of commands one of them has finished in this diagram one of them is currently",
    "start": "828600",
    "end": "834199"
  },
  {
    "text": "running and two others are waiting we have the ability to control this separately",
    "start": "834199",
    "end": "839839"
  },
  {
    "text": "because we've bundled up the invocations into into objects we have the ability to this",
    "start": "839839",
    "end": "845920"
  },
  {
    "text": "particular thing is a diagram that was shown to explain how Ember concurrency works but we could actually display this",
    "start": "845920",
    "end": "852440"
  },
  {
    "text": "type of thing to users in uh in our in our user exper in our user interface if",
    "start": "852440",
    "end": "859240"
  },
  {
    "text": "we wish to and we have the ability to look at the",
    "start": "859240",
    "end": "865560"
  },
  {
    "text": "state of one of these objects",
    "start": "865560",
    "end": "869920"
  },
  {
    "text": "if we add a new method to edit we can ask it questions now if things were",
    "start": "872399",
    "end": "878600"
  },
  {
    "text": "asynchronous and concurrent we could ask what is your state are you waiting are you running are you finished but we're",
    "start": "878600",
    "end": "883720"
  },
  {
    "text": "going to talk about another thing we could ask those things are all generic to all asynchronous objects but what's",
    "start": "883720",
    "end": "890360"
  },
  {
    "text": "interesting is when we have things that are specific to the particular command",
    "start": "890360",
    "end": "895519"
  },
  {
    "text": "in the case of an edit what how much of the text has changed that matters in the case of a",
    "start": "895519",
    "end": "902959"
  },
  {
    "text": "user experience we might want to know whether the string is going to get longer or",
    "start": "902959",
    "end": "907600"
  },
  {
    "text": "shorter so here's an example we do a replace with we get back an object and",
    "start": "911480",
    "end": "917759"
  },
  {
    "text": "then we ask it for its NE for its net change the first one adds",
    "start": "917759",
    "end": "922800"
  },
  {
    "text": "44 the second one subtracts one from the length seems like a very simple",
    "start": "922800",
    "end": "931440"
  },
  {
    "text": "idea as we said before with asynchronous um commands we might care very much",
    "start": "931959",
    "end": "937560"
  },
  {
    "text": "about their state this is useful in a lot of cases one from an actual production",
    "start": "937560",
    "end": "943720"
  },
  {
    "text": "application I happen to be very familiar with if something is currently running",
    "start": "943720",
    "end": "949199"
  },
  {
    "text": "you sometimes want to display a little progress indicator now you can do something like you can say okay set is",
    "start": "949199",
    "end": "955720"
  },
  {
    "text": "loading to be true fire off some asynchronous events and then in the promise on the dot then I want to uh set",
    "start": "955720",
    "end": "964160"
  },
  {
    "text": "is loading to false wait I have to also catch in case",
    "start": "964160",
    "end": "969399"
  },
  {
    "text": "it doesn't resolve and it's rejected so I have to set his loading in that case and then let me see now can it actually",
    "start": "969399",
    "end": "975880"
  },
  {
    "text": "throw an exception or will it always come back with the catch I think that depends upon exactly how the promise is",
    "start": "975880",
    "end": "981199"
  },
  {
    "text": "constructed so I might have to wrap it all under a try catch Handler very annoying much easier if the command",
    "start": "981199",
    "end": "986440"
  },
  {
    "text": "actually just simply exposes this current state and then you can set the is the the is loading or the the um",
    "start": "986440",
    "end": "993720"
  },
  {
    "text": "appearance of a button or whether it's disabled based on the state of the",
    "start": "993720",
    "end": "999040"
  },
  {
    "text": "object you can also do a similar thing if you want to debounce uh commands if",
    "start": "999040",
    "end": "1004160"
  },
  {
    "text": "you have a button that saves or submits a passport application online and",
    "start": "1004160",
    "end": "1010279"
  },
  {
    "text": "someone clicks it a bunch of times you don't actually want to to take all of those submissions at once so you usually have to have a little piece of code and",
    "start": "1010279",
    "end": "1016839"
  },
  {
    "text": "you can call you can wrap a Handler in a debounce function and if I were reading",
    "start": "1016839",
    "end": "1022079"
  },
  {
    "text": "a book about functions that wrap functions JavaScript along for example that might be what I what i' find really",
    "start": "1022079",
    "end": "1027959"
  },
  {
    "text": "exciting but it might also be exciting to Simply say to yourself okay what if",
    "start": "1027959",
    "end": "1034880"
  },
  {
    "text": "the thing the job queue or whatever that knows about managing these commands can",
    "start": "1034880",
    "end": "1040038"
  },
  {
    "text": "also handle the debouncing for us that way the piece of user experience code doesn't have to know about debouncing",
    "start": "1040039",
    "end": "1046558"
  },
  {
    "text": "that way the edit the um edit object not the edit object but the buffer object",
    "start": "1046559",
    "end": "1052080"
  },
  {
    "text": "doesn't have to know about debouncing my uh persistent store using whatever framework doesn't have to know about the",
    "start": "1052080",
    "end": "1058320"
  },
  {
    "text": "bouncing the que that's managing things knows that it can only execute one command at a",
    "start": "1058320",
    "end": "1065520"
  },
  {
    "text": "time again these are specific examples but the larger pattern is if we take the",
    "start": "1065679",
    "end": "1070799"
  },
  {
    "text": "method invocation out of the object that would otherwise manage its state the",
    "start": "1070799",
    "end": "1076760"
  },
  {
    "text": "buffer it gives us the ability to to take certain things like inspecting the state or serializing things that are",
    "start": "1076760",
    "end": "1083400"
  },
  {
    "text": "asynchronous or debouncing and put them somewhere else so that our concerns are neatly",
    "start": "1083400",
    "end": "1089000"
  },
  {
    "text": "separated and each particular thing that we're working with a buffer a q has a",
    "start": "1089000",
    "end": "1095080"
  },
  {
    "text": "clearly delineated set of responsibilities that are I'm sorry I use sometimes use",
    "start": "1095080",
    "end": "1100640"
  },
  {
    "text": "complicated words because it because it makes me seem smart responsibilities that are congruent",
    "start": "1100640",
    "end": "1107720"
  },
  {
    "text": "another thing that we get out of commands remember our job queue in the original example I won't go",
    "start": "1111080",
    "end": "1117679"
  },
  {
    "text": "back to the code we simply removed them from the queue but we could mark them as done for example we could have a",
    "start": "1117679",
    "end": "1123840"
  },
  {
    "text": "history most software applications have a history we call it a log and then you have to go and buy or rent or build a",
    "start": "1123840",
    "end": "1130400"
  },
  {
    "text": "whole bunch of tools to GP through the log and find things that you want and if you actually want to expose",
    "start": "1130400",
    "end": "1137240"
  },
  {
    "text": "that as a first class enti simple logs are not going to do I don't know about rails logger or Ember logger",
    "start": "1137240",
    "end": "1142880"
  },
  {
    "text": "or whatever but all those things are completely useless once you get to applications at scale there's entire Industries built",
    "start": "1142880",
    "end": "1149799"
  },
  {
    "text": "around being able to manage logs and it seems so silly when really what we'd",
    "start": "1149799",
    "end": "1155240"
  },
  {
    "text": "like to do is just have them as first class entities we already have tools for displaying lists of things sorting things searching things and whatnot they",
    "start": "1155240",
    "end": "1162120"
  },
  {
    "text": "just need to be models right and if we had commands we would have models now",
    "start": "1162120",
    "end": "1167320"
  },
  {
    "text": "this particular application that a g I'm quite familiar with and work on didn't do that when it was first designed so",
    "start": "1167320",
    "end": "1173039"
  },
  {
    "text": "believe it or not things happen and then another piece of code somewhere else looks at the",
    "start": "1173039",
    "end": "1178600"
  },
  {
    "text": "things that are happening and constructs these things called log entries as",
    "start": "1178600",
    "end": "1184679"
  },
  {
    "text": "models when it would would have been much simpler we know in hindsight to Simply construct commands in the first",
    "start": "1184679",
    "end": "1190159"
  },
  {
    "text": "place and save those as models and then you have useful things you can do like display this timeline to users",
    "start": "1190159",
    "end": "1196520"
  },
  {
    "text": "reflecting changes that have been made to an incident [Music] again the original command pattern is",
    "start": "1196520",
    "end": "1203039"
  },
  {
    "text": "very simple it's just instead of editing the buffer directly create an edit",
    "start": "1203039",
    "end": "1208880"
  },
  {
    "text": "object that you can invoke elsewhere or later but it's what makes this",
    "start": "1208880",
    "end": "1214280"
  },
  {
    "text": "interesting the fertility of the pattern is that once you separated these other things like managing asynch",
    "start": "1214280",
    "end": "1222720"
  },
  {
    "text": "asynchronicity or inspecting them for your user experience or treating them as first class objects not just internally",
    "start": "1222720",
    "end": "1229159"
  },
  {
    "text": "in the architecture but through to the user experience like the timeline they sort of follow naturally once you say",
    "start": "1229159",
    "end": "1234840"
  },
  {
    "text": "hey each and every one of these invocations is a first class entity it sort of provokes the mind to look for",
    "start": "1234840",
    "end": "1240000"
  },
  {
    "text": "other opportunities even if you don't have a requirement right in front of",
    "start": "1240000",
    "end": "1244600"
  },
  {
    "text": "you another example if you're working on anything non-trivial and certainly in a",
    "start": "1245559",
    "end": "1251840"
  },
  {
    "text": "in a consumer facing space you often have some sort of tracking things going on that keep track for example if you",
    "start": "1251840",
    "end": "1257520"
  },
  {
    "text": "build a new feature sometimes you you want to count how many people click on your new button or try your new feature and so on you might do be doing some AB",
    "start": "1257520",
    "end": "1266440"
  },
  {
    "text": "testing I've seen code bases that are simply littered all the way through the front-end code and so on with little",
    "start": "1267280",
    "end": "1273000"
  },
  {
    "text": "tracking things that fire off to somewhere else and again why would I look at some user experience code and",
    "start": "1273000",
    "end": "1278799"
  },
  {
    "text": "need to know that we're tracking that particular button click or something that's that's conflating",
    "start": "1278799",
    "end": "1283840"
  },
  {
    "text": "responsibilities but once you start thinking in terms of commands it's like oh yeah well really what we should be tracking is the command is invoked and",
    "start": "1283840",
    "end": "1290080"
  },
  {
    "text": "then the particular piece of code that handles the button clicking or whatever simply creates the command and sends it somewhere else to be invoked and then",
    "start": "1290080",
    "end": "1296559"
  },
  {
    "text": "tracking and so on happens somewhere else Dr Adel Goldberg who wrote one of",
    "start": "1296559",
    "end": "1302400"
  },
  {
    "text": "the uh Big Small Talk Bibles she said something that really applies to almost all object-oriented programming which is",
    "start": "1302400",
    "end": "1308640"
  },
  {
    "text": "in small talk everything happens somewhere else and it is sort of the annoyance of object-oriented programming",
    "start": "1308640",
    "end": "1313799"
  },
  {
    "text": "because you're always tracing to somewhere else but it's also the joy in that you can arrange for different things in different places to have",
    "start": "1313799",
    "end": "1320000"
  },
  {
    "text": "different responsibilities and yes one button click May in fact be a complicated chain of things that that",
    "start": "1320000",
    "end": "1325520"
  },
  {
    "text": "are handled by a whole bunch of people of people I am anthropomorphizing not",
    "start": "1325520",
    "end": "1330840"
  },
  {
    "text": "people but a whole bunch of different entities within the software and that can be",
    "start": "1330840",
    "end": "1336440"
  },
  {
    "text": "good now I did say that when something's a first class",
    "start": "1336440",
    "end": "1342640"
  },
  {
    "text": "entity we can pass it to a function I did say that we can return it",
    "start": "1342640",
    "end": "1349200"
  },
  {
    "text": "from a function or method we saw an example of that being able to call a buffer and then get back and edit",
    "start": "1349200",
    "end": "1355559"
  },
  {
    "text": "objects and one of the things that we often do with functional programming is we transform something we write",
    "start": "1355559",
    "end": "1361760"
  },
  {
    "text": "decorators for example a function that or we or we map an array we transform the array into a different array based",
    "start": "1361760",
    "end": "1368440"
  },
  {
    "text": "on passing it something this is kind of the combinatorial approach to programming and it does have a place in",
    "start": "1368440",
    "end": "1376080"
  },
  {
    "text": "objectoriented programming and it is especially has an interesting place with",
    "start": "1376080",
    "end": "1382200"
  },
  {
    "text": "invocations or commands let's take a",
    "start": "1382200",
    "end": "1388360"
  },
  {
    "text": "look you recall our edit when we called do it it would",
    "start": "1392039",
    "end": "1398240"
  },
  {
    "text": "actually perform the edit on the buffer now we're adding a new",
    "start": "1398240",
    "end": "1403320"
  },
  {
    "text": "method I know it's hard with a screen if I show the entire class with our method",
    "start": "1403320",
    "end": "1409000"
  },
  {
    "text": "then the text gets very small so we have to remember that it knows how to perform an edit in the first place and it has",
    "start": "1409000",
    "end": "1415720"
  },
  {
    "text": "this new method reversed what does this do well the edit actually encapsulated",
    "start": "1415720",
    "end": "1424320"
  },
  {
    "text": "what the old text looked like and the new text and so what it does when you call",
    "start": "1424320",
    "end": "1432279"
  },
  {
    "text": "reversed is it gives you back a new edit object that reverses the effect of the",
    "start": "1432279",
    "end": "1438159"
  },
  {
    "text": "first edit object so this is as",
    "start": "1438159",
    "end": "1444440"
  },
  {
    "text": "if if I had a wrecking ball and I knew how to wreck a house that I could ask",
    "start": "1444440",
    "end": "1450200"
  },
  {
    "text": "the wrecking ball and it would give me an un wrecking ball that would reassemble the house from",
    "start": "1450200",
    "end": "1456039"
  },
  {
    "text": "pieces being able to reverse an action very unlikely in the case of a wrecking ball in the house but it's very useful",
    "start": "1457240",
    "end": "1464960"
  },
  {
    "text": "when working with user experiences",
    "start": "1464960",
    "end": "1469520"
  },
  {
    "text": "unfortunately this is some sort of Arcane magic that seems to have been lost when we move to the web from desktop applications I don't know why",
    "start": "1471000",
    "end": "1478440"
  },
  {
    "text": "but here's an example of being able to reverse things we have a doer edit",
    "start": "1478440",
    "end": "1485320"
  },
  {
    "text": "object and then we can get an undoer by asking the doer for the reversal or the Reversed",
    "start": "1485320",
    "end": "1492679"
  },
  {
    "text": "version of itself and when we invoke do it on the doer it changes the buffer and",
    "start": "1492679",
    "end": "1498799"
  },
  {
    "text": "when we invoke do it on the Undo It reverses the Buffer's",
    "start": "1498799",
    "end": "1504960"
  },
  {
    "text": "change I hope everyone is nodding along and thinking I know exactly where he's going because of course this has been a",
    "start": "1505360",
    "end": "1513360"
  },
  {
    "text": "staple of desktop applications going back to about 1981 or so little bit",
    "start": "1513360",
    "end": "1519960"
  },
  {
    "text": "earlier if you look more in research projects but in terms of the public Consciousness being able to undo things",
    "start": "1519960",
    "end": "1525279"
  },
  {
    "text": "is has not exactly been revolutionary in any field field of endeavor except web",
    "start": "1525279",
    "end": "1531679"
  },
  {
    "text": "development so let's recap what we're able to do with our ability to reverse",
    "start": "1533480",
    "end": "1540360"
  },
  {
    "text": "commands we have a buffer we have a replace with",
    "start": "1540360",
    "end": "1549039"
  },
  {
    "text": "method and I've added something you recall when we talked about Job cues and so on the ability to have a history well",
    "start": "1549880",
    "end": "1558919"
  },
  {
    "text": "our buffer now has a history and a future as it turns",
    "start": "1558919",
    "end": "1564440"
  },
  {
    "text": "out and when you call replace with it creates a",
    "start": "1564440",
    "end": "1569840"
  },
  {
    "text": "doer it asks the doer for the for the undoer notice the buffer itself does not",
    "start": "1569840",
    "end": "1575039"
  },
  {
    "text": "know anything about how the reversal takes place that's left up to the up to the command itself after",
    "start": "1575039",
    "end": "1581279"
  },
  {
    "text": "all maybe the command has to persist a copy online somewhere the buffer shouldn't assume it knows exactly how to",
    "start": "1581279",
    "end": "1587480"
  },
  {
    "text": "undo something we push the undoer onto the history and then in this particular case",
    "start": "1587480",
    "end": "1595600"
  },
  {
    "text": "we invoke the doer and return",
    "start": "1595600",
    "end": "1599039"
  },
  {
    "text": "it how do we undo we can create a",
    "start": "1600799",
    "end": "1606480"
  },
  {
    "text": "method and what does it do it grabs the undoer off the history it creates a",
    "start": "1606480",
    "end": "1613000"
  },
  {
    "text": "redoer because of course if you reverse the reversal you're back to where you started",
    "start": "1613000",
    "end": "1620240"
  },
  {
    "text": "we stick the redoer onto the future and then we perform the",
    "start": "1620760",
    "end": "1627080"
  },
  {
    "text": "undo how many people here are nodding along and understanding exactly what we're doing with the",
    "start": "1628760",
    "end": "1634720"
  },
  {
    "text": "future and the rest of you are asleep I assume because I know you're all very intelligent and ahead of me by at least two",
    "start": "1634720",
    "end": "1641960"
  },
  {
    "text": "slides so here's an example we take our buffer we do two replace withs so now if",
    "start": "1643039",
    "end": "1649880"
  },
  {
    "text": "you're following along in your head we have two unders in our",
    "start": "1649880",
    "end": "1654559"
  },
  {
    "text": "history we can undo twice and and get back to the original",
    "start": "1655279",
    "end": "1661039"
  },
  {
    "text": "state and thanks to our future we can",
    "start": "1661039",
    "end": "1666279"
  },
  {
    "text": "redo here's our redo method which looks suspiciously like the",
    "start": "1666279",
    "end": "1671440"
  },
  {
    "text": "undo method and by hitting redo twice we move back to the first state",
    "start": "1671440",
    "end": "1679360"
  },
  {
    "text": "there is zero reason why a web application written in 2017 does this for everything",
    "start": "1679360",
    "end": "1685960"
  },
  {
    "text": "except uh well that's not the way the this other web application I saw does",
    "start": "1685960",
    "end": "1692200"
  },
  {
    "text": "it but we have the technology all we need is the",
    "start": "1692200",
    "end": "1698960"
  },
  {
    "text": "will so if we look at what we've talked about so far",
    "start": "1702120",
    "end": "1709399"
  },
  {
    "text": "taking a method invocation taking the implementation out of the basic data object or model and",
    "start": "1709399",
    "end": "1716720"
  },
  {
    "text": "putting it into a separate first class object with its own methods like red",
    "start": "1716720",
    "end": "1722600"
  },
  {
    "text": "like do it or reversed if",
    "start": "1722600",
    "end": "1727960"
  },
  {
    "text": "we look at the ability to manage those elsewhere now that we've separated them we got an example job cues we got",
    "start": "1727960",
    "end": "1734679"
  },
  {
    "text": "another example using histories and Futures to implement undo and redo we've really seen the basic command",
    "start": "1734679",
    "end": "1741559"
  },
  {
    "text": "pattern we see that there's lots of different things you can do whether it's managing asynchronicity or providing a",
    "start": "1741559",
    "end": "1749679"
  },
  {
    "text": "user experience that displays a timeline or introspecting asynchronous things so",
    "start": "1749679",
    "end": "1754960"
  },
  {
    "text": "you know what the state of an application is or managing the concurrency of them or undo redo all of",
    "start": "1754960",
    "end": "1760600"
  },
  {
    "text": "these things kind of flow naturally once you say huh invocations should be first class entities of themselves and these",
    "start": "1760600",
    "end": "1766919"
  },
  {
    "text": "are just a few examples each and every one of you is working in a domain where you're going to",
    "start": "1766919",
    "end": "1772760"
  },
  {
    "text": "say huh here's a thing we could do if we were using the command",
    "start": "1772760",
    "end": "1779000"
  },
  {
    "text": "pattern you saw that we stored our commands our invocations we queried them",
    "start": "1780200",
    "end": "1787720"
  },
  {
    "text": "and we even transformed them that was the magic of being able to ask a command how to reverse",
    "start": "1787720",
    "end": "1793840"
  },
  {
    "text": "itself and that's very interesting and it raises a question",
    "start": "1793840",
    "end": "1800039"
  },
  {
    "text": "with our buffer application when we push something onto the future we when we",
    "start": "1806360",
    "end": "1811720"
  },
  {
    "text": "sorry when we push something onto history we threw the future away does everyone see that I don't know what it is 1 2 3 4 5 6 7even eth line something",
    "start": "1811720",
    "end": "1820000"
  },
  {
    "text": "like that why did we do that",
    "start": "1820000",
    "end": "1827600"
  },
  {
    "text": "let's take a look at the anti pattern if we comment this line of code",
    "start": "1830679",
    "end": "1836440"
  },
  {
    "text": "out and do exactly what we did before actually sorry do something",
    "start": "1836440",
    "end": "1841799"
  },
  {
    "text": "slightly different we make a change to our buffer we",
    "start": "1841799",
    "end": "1846960"
  },
  {
    "text": "undo we do another",
    "start": "1846960",
    "end": "1850640"
  },
  {
    "text": "command what happens if we redo now",
    "start": "1852120",
    "end": "1857240"
  },
  {
    "text": "we we didn't throw the future away so it's still sitting there and in",
    "start": "1858399",
    "end": "1864320"
  },
  {
    "text": "fact we should be able to hit",
    "start": "1864320",
    "end": "1868360"
  },
  {
    "text": "redo I happen to know the answer we get some somewhat garbled",
    "start": "1869880",
    "end": "1876440"
  },
  {
    "text": "text the problem with the code that I've shared with you is that it's coupled to",
    "start": "1877559",
    "end": "1884200"
  },
  {
    "text": "some Emeral or implicit state of the buffer it's it doesn't actually store",
    "start": "1884200",
    "end": "1889519"
  },
  {
    "text": "the old state of the buffer and so on it just kind of assumes that the buffer must be in whatever condition it was when you first uh invoke",
    "start": "1889519",
    "end": "1897559"
  },
  {
    "text": "that by blowing away the ability to redo things once you do once once you uh",
    "start": "1897559",
    "end": "1903679"
  },
  {
    "text": "perform some new command we avoid this problem and that's how most applications",
    "start": "1903679",
    "end": "1909200"
  },
  {
    "text": "work but it's not necessary if you look here this is what",
    "start": "1909200",
    "end": "1916840"
  },
  {
    "text": "we do we had quick we replaced with fast and",
    "start": "1916840",
    "end": "1923120"
  },
  {
    "text": "it remembered the position that it was replacing however if you do that same",
    "start": "1923120",
    "end": "1931039"
  },
  {
    "text": "transformation in a different place in the text that is replacing it from four",
    "start": "1931039",
    "end": "1936440"
  },
  {
    "text": "to to eight as we did before but unfortunately because we changed the into my it's now no longer replacing the",
    "start": "1936440",
    "end": "1943399"
  },
  {
    "text": "word quick it's replacing part of quick in the space this is how we got the garble text cuz all it remembered was",
    "start": "1943399",
    "end": "1949840"
  },
  {
    "text": "what place to do is change but if we look at",
    "start": "1949840",
    "end": "1956080"
  },
  {
    "text": "commands and think about them when we had",
    "start": "1956080",
    "end": "1964360"
  },
  {
    "text": "our buffer we had a past and a future that was our history I should have",
    "start": "1964360",
    "end": "1969559"
  },
  {
    "text": "called that his history we had a history and we had a future in the initial State there are no actions",
    "start": "1969559",
    "end": "1976679"
  },
  {
    "text": "whatsoever the then we perform a command and we have a",
    "start": "1976679",
    "end": "1983600"
  },
  {
    "text": "past when we undo it moves into the future we've kind of moved back but that command is still",
    "start": "1985799",
    "end": "1992519"
  },
  {
    "text": "in the future if we want to do a redo weo is like moving forward in time undo is like moving backwards in",
    "start": "1992519",
    "end": "1998279"
  },
  {
    "text": "time if we then do something else it's in the new thing that we're doing",
    "start": "1998279",
    "end": "2003760"
  },
  {
    "text": "replacing the with my is in our past but the future is still there untouched because we",
    "start": "2003760",
    "end": "2009919"
  },
  {
    "text": "didn't throw the future away in this version of our code but now the future",
    "start": "2009919",
    "end": "2016559"
  },
  {
    "text": "command is no longer semantically correct we no longer really think I mean in our brain we were replacing the word",
    "start": "2016559",
    "end": "2022120"
  },
  {
    "text": "quick with fast but to the text buffer it's just replacing the characters between four and nine with",
    "start": "2022120",
    "end": "2030960"
  },
  {
    "text": "fast and when we hit redo we get this garbage and we move the replacement into",
    "start": "2032519",
    "end": "2039039"
  },
  {
    "text": "the past but unfortunately the text is wrong the problem is that every single",
    "start": "2039039",
    "end": "2047679"
  },
  {
    "text": "command is really dependent upon the state of the buffer when it was invoked",
    "start": "2047679",
    "end": "2053240"
  },
  {
    "text": "which means it's dependent upon the history of commands that happened before it how many people here if I say the",
    "start": "2053240",
    "end": "2059480"
  },
  {
    "text": "word or phrase event sourcing know what I'm talking about",
    "start": "2059480",
    "end": "2064679"
  },
  {
    "text": "naturally anything that is mutable can really be thought of",
    "start": "2064679",
    "end": "2070158"
  },
  {
    "text": "as an Ever longer increasing set of Transformations on an initial State",
    "start": "2070159",
    "end": "2077398"
  },
  {
    "text": "whether they come through events or commands and if you change that",
    "start": "2077399",
    "end": "2083919"
  },
  {
    "text": "order you get a different um",
    "start": "2083919",
    "end": "2089118"
  },
  {
    "text": "outcome if we stick a new command into a history all the things that follow are",
    "start": "2089960",
    "end": "2096440"
  },
  {
    "text": "now in really it Alters the effect that they're going to have because it's a different",
    "start": "2096440",
    "end": "2102160"
  },
  {
    "text": "history if you think in terms of a mutable object as a history moving back and forth in the",
    "start": "2102160",
    "end": "2109119"
  },
  {
    "text": "history without altering it is fine but changing the history is not",
    "start": "2109119",
    "end": "2115680"
  },
  {
    "text": "fine so here are the edits that we were",
    "start": "2120440",
    "end": "2127160"
  },
  {
    "text": "working with our fast edit and our my",
    "start": "2127160",
    "end": "2132359"
  },
  {
    "text": "edit one of the things we can do you recall we could inspect commands",
    "start": "2136880",
    "end": "2143160"
  },
  {
    "text": "we can ask whether one command is before or after another",
    "start": "2143160",
    "end": "2149320"
  },
  {
    "text": "command by this I mean lexically before after which of course is very specific",
    "start": "2151119",
    "end": "2156160"
  },
  {
    "text": "to an edit if we know",
    "start": "2156160",
    "end": "2162838"
  },
  {
    "text": "that we can ask whether a particular command what it looks like if it's",
    "start": "2163960",
    "end": "2170200"
  },
  {
    "text": "prepended with another command in other words if I take this command and say I know what you are but I want you to",
    "start": "2170200",
    "end": "2176359"
  },
  {
    "text": "imagine what you would be like if there was some other command in front of you and I can get get back a new",
    "start": "2176359",
    "end": "2183640"
  },
  {
    "text": "command that has the equivalent effect",
    "start": "2183640",
    "end": "2188760"
  },
  {
    "text": "now if we try to stick the Fast Change in front of my we actually get back the",
    "start": "2191280",
    "end": "2196720"
  },
  {
    "text": "exact same command because the Fast Change doesn't really change what our my change should look like because my",
    "start": "2196720",
    "end": "2202800"
  },
  {
    "text": "happens lexically before um the fast change but if we go the other way around if I say to the if I look at the fast",
    "start": "2202800",
    "end": "2209119"
  },
  {
    "text": "change and say what would you look like if I done this my change before you it's actually going to give me back",
    "start": "2209119",
    "end": "2216319"
  },
  {
    "text": "a different command this command produces the equivalent effect it moves it because it knows that",
    "start": "2216319",
    "end": "2223000"
  },
  {
    "text": "the net change of the my command means that it has to change where it edits in",
    "start": "2223000",
    "end": "2228079"
  },
  {
    "text": "the",
    "start": "2228079",
    "end": "2230240"
  },
  {
    "text": "text so now whenever we add a new",
    "start": "2234800",
    "end": "2241880"
  },
  {
    "text": "command we go into the future and we say we need to take every every single thing",
    "start": "2241880",
    "end": "2248200"
  },
  {
    "text": "that's already in our future and change them tell ask them give me back whatever",
    "start": "2248200",
    "end": "2253800"
  },
  {
    "text": "the equivalent command would be now that you know there's something else stuck in front of you if you're thinking in terms",
    "start": "2253800",
    "end": "2259240"
  },
  {
    "text": "of a mutable data structure as being a history the net effect of a history",
    "start": "2259240",
    "end": "2264760"
  },
  {
    "text": "we're essentially saying okay I know we're sticking something new in the history so now I need to know I need to",
    "start": "2264760",
    "end": "2270079"
  },
  {
    "text": "solve for the problem of what additional things after this would produce the same effect as the original history",
    "start": "2270079",
    "end": "2278720"
  },
  {
    "text": "so let's look at how this would work we can replace the word quick with",
    "start": "2280960",
    "end": "2289480"
  },
  {
    "text": "fast we can hit undo we can replace the word my with the and now",
    "start": "2289480",
    "end": "2296319"
  },
  {
    "text": "remember when we replace the word my with the the entire future has to be",
    "start": "2296319",
    "end": "2303000"
  },
  {
    "text": "transformed and in fact we get the correct response we have the ability to redo",
    "start": "2305520",
    "end": "2312040"
  },
  {
    "text": "commands even if we' stuck new ones in front all these math and changes are",
    "start": "2312040",
    "end": "2317520"
  },
  {
    "text": "possible because we are using the command pattern it gives us a type of",
    "start": "2317520",
    "end": "2322599"
  },
  {
    "text": "flexibility that goes beyond what most desktop applications do with undo and",
    "start": "2322599",
    "end": "2327920"
  },
  {
    "text": "redo so now so far this seems like a clever coding trick or something but",
    "start": "2331800",
    "end": "2337680"
  },
  {
    "text": "what's important about this is not aha now I know how to implement a redo that can handle doing additional uh",
    "start": "2337680",
    "end": "2344839"
  },
  {
    "text": "invocations what what does this provoke I said commands were fertile design",
    "start": "2346240",
    "end": "2352240"
  },
  {
    "text": "pattern what thinking does this",
    "start": "2352240",
    "end": "2355720"
  },
  {
    "text": "produce and this is what it tells me besides that doctor who is a fun show and the 10th doctor is pretty",
    "start": "2358800",
    "end": "2365760"
  },
  {
    "text": "awesome but that history and time are things we can manipulate as first class",
    "start": "2365760",
    "end": "2372040"
  },
  {
    "text": "entities we sort of got a a hint of that with the job queue We could decide whether things happen concurrently or",
    "start": "2372040",
    "end": "2377240"
  },
  {
    "text": "sequentially we can cancel things we can get their state and we can also rearrange",
    "start": "2377240",
    "end": "2383680"
  },
  {
    "text": "things we have the ability to alter the flow of time for entities in our",
    "start": "2383760",
    "end": "2392079"
  },
  {
    "text": "applications inserting a new command and being able to redo things doesn't seem like a big a big deal but once you get a",
    "start": "2392079",
    "end": "2398480"
  },
  {
    "text": "hold of this it's like crack cocaine for the designing",
    "start": "2398480",
    "end": "2403280"
  },
  {
    "text": "mind let us imagine that Alice and Bob are editing a",
    "start": "2404119",
    "end": "2410599"
  },
  {
    "text": "script how many people here know who these two people are excellent Alice B",
    "start": "2410599",
    "end": "2419119"
  },
  {
    "text": "tokas uh very famous as a compania to Gertrude Stein and she also wrote a",
    "start": "2419119",
    "end": "2424680"
  },
  {
    "text": "cookbook which contains I believe the first written reference to Hash",
    "start": "2424680",
    "end": "2430119"
  },
  {
    "text": "brownies the gentleman is Bob FY the only director to have won the Triple Crown he won an Emmy Tony and an Oscar",
    "start": "2430119",
    "end": "2438280"
  },
  {
    "text": "in one year as a director never done before never done since and he's a heck of a dancer or he",
    "start": "2438280",
    "end": "2447400"
  },
  {
    "text": "was Alice and Bob both have their own buffers",
    "start": "2447480",
    "end": "2454880"
  },
  {
    "text": "here's a simple version of the buffer that we can work with it has a",
    "start": "2457960",
    "end": "2464240"
  },
  {
    "text": "history Alice replaces the with my Bob replaces fast uh quick with",
    "start": "2464319",
    "end": "2472119"
  },
  {
    "text": "fast and our buffers have",
    "start": "2472880",
    "end": "2476920"
  },
  {
    "text": "diverged now if we want to merge them back back",
    "start": "2479880",
    "end": "2485640"
  },
  {
    "text": "together we have to take Alice's edit and apply it to Bob's buffer and we have",
    "start": "2485640",
    "end": "2491160"
  },
  {
    "text": "to take Bob's edit and apply it to Alice's",
    "start": "2491160",
    "end": "2495680"
  },
  {
    "text": "buffer let's do this remember the prepended width that",
    "start": "2496839",
    "end": "2503280"
  },
  {
    "text": "we used in order to be able to insert edits into our time frame for",
    "start": "2503280",
    "end": "2508400"
  },
  {
    "text": "redoing we can use that exact thing when merging Alice and Bob's",
    "start": "2508400",
    "end": "2515599"
  },
  {
    "text": "buffers we can even write a method that uh appends a whole bunch of things from",
    "start": "2516240",
    "end": "2521280"
  },
  {
    "text": "somebody else and treats them this is equivalent to uh we're going to mention get later",
    "start": "2521280",
    "end": "2527800"
  },
  {
    "text": "it's like",
    "start": "2527800",
    "end": "2530200"
  },
  {
    "text": "rebasing and when we use our append so that Alice gets Bob's edit and Bob gets",
    "start": "2533119",
    "end": "2539200"
  },
  {
    "text": "Alice's edit or edits only one in this particular case but there could be more",
    "start": "2539200",
    "end": "2544280"
  },
  {
    "text": "than one there are buffers that had diverse converge again to have the same",
    "start": "2544280",
    "end": "2550440"
  },
  {
    "text": "content how many people here use web applications that do this every",
    "start": "2550440",
    "end": "2556079"
  },
  {
    "text": "day oh come now Google",
    "start": "2556079",
    "end": "2560559"
  },
  {
    "text": "Docs now there is a little bug in my code okay a big",
    "start": "2562960",
    "end": "2571119"
  },
  {
    "text": "bug and the problem is that if we run a pend doall multiple times we're going to",
    "start": "2571800",
    "end": "2577440"
  },
  {
    "text": "garble all the text if every time we want to converge the buffers we say tell me all the edits you make and then try to apply them it's going to blow",
    "start": "2577440",
    "end": "2585240"
  },
  {
    "text": "up there's a saying that every successful technology creates problems that only it can solve objectoriented",
    "start": "2587280",
    "end": "2593839"
  },
  {
    "text": "programming is like this in Spades you promises use some wonderful things and then you run into some problems with it and then you have to learn more",
    "start": "2593839",
    "end": "2599280"
  },
  {
    "text": "object-oriented programming patterns to paper over the problems that the first set of patterns created and that's what",
    "start": "2599280",
    "end": "2604480"
  },
  {
    "text": "my talk is showing here so we're going to get complicated we're going to use",
    "start": "2604480",
    "end": "2609800"
  },
  {
    "text": "guids and we're going to apply them to edits so we can track which edits we've already uh",
    "start": "2609800",
    "end": "2615680"
  },
  {
    "text": "merged and then we're going to be able to get the diff and understand which bits of the history we haven't already",
    "start": "2615680",
    "end": "2623480"
  },
  {
    "text": "merged and it's a lot of work all of this by the way is online and you can",
    "start": "2626119",
    "end": "2631760"
  },
  {
    "text": "download it and play with it if you wish but now when we perform we're going to be going and looking for those bits",
    "start": "2631760",
    "end": "2639920"
  },
  {
    "text": "of somebody else's history that we haven't already applied that aren't already in our buffer so really the",
    "start": "2639920",
    "end": "2647599"
  },
  {
    "text": "actual buffer itself is just a convenience for showing things to a to a user what's really important all the",
    "start": "2647599",
    "end": "2653359"
  },
  {
    "text": "real manipulation the real work we do is in our history of",
    "start": "2653359",
    "end": "2658280"
  },
  {
    "text": "commands our new code simplifies are replac with a pend in a pendall",
    "start": "2660480",
    "end": "2667160"
  },
  {
    "text": "and here's a whole bunch of code and really what we ought to do is test it now there's a saying amongst testers",
    "start": "2675599",
    "end": "2683319"
  },
  {
    "text": "I got this in a Twitter thing and I can't I forgot to write a reference to it so please hit me up afterwards because I don't like to borrow other",
    "start": "2683319",
    "end": "2689720"
  },
  {
    "text": "people's saying without attribution but um someone tweeted a a a woman is a matter of fact",
    "start": "2689720",
    "end": "2698160"
  },
  {
    "text": "she tweeted I don't break your code I break your Illusions about your",
    "start": "2698160",
    "end": "2703640"
  },
  {
    "text": "code so we were trying to fix a problem between Alice and Bob when they tried to synchronize more than once we built all",
    "start": "2703640",
    "end": "2710079"
  },
  {
    "text": "these goids and so on we have the illusion that it works so if we're really going to try and stress test it",
    "start": "2710079",
    "end": "2716359"
  },
  {
    "text": "we'll introduce Carol so now we have Alice Bob and Carol and they're all going to edit the",
    "start": "2716359",
    "end": "2723440"
  },
  {
    "text": "script so Alice has a buffer she shares it with Bob she then makes a",
    "start": "2724440",
    "end": "2731640"
  },
  {
    "text": "change she shares the the changed buffer with Carol Bob makes a",
    "start": "2731640",
    "end": "2738760"
  },
  {
    "text": "change Alice incorporates Bob's Change Bob synchronizes with Alice Alice",
    "start": "2738760",
    "end": "2745520"
  },
  {
    "text": "makes another Change Bob gets Alice's change changes and then Carol gets Bob's",
    "start": "2745520",
    "end": "2753078"
  },
  {
    "text": "changes and if we run our code it stays synchronized the entire",
    "start": "2754119",
    "end": "2760079"
  },
  {
    "text": "time so perhaps we've got the right thing",
    "start": "2760079",
    "end": "2765640"
  },
  {
    "text": "going now the algorithm I've just given you for synchronizing is known as operational",
    "start": "2766359",
    "end": "2772960"
  },
  {
    "text": "transform and it looks really really good when you use buffers as a as as an",
    "start": "2772960",
    "end": "2781920"
  },
  {
    "text": "example but it gets really complicated once you start doing things like editing trees like if you want to write an",
    "start": "2781920",
    "end": "2787480"
  },
  {
    "text": "operational transform algorithm that works with any arbitrary Json tree or any",
    "start": "2787480",
    "end": "2793079"
  },
  {
    "text": "database then you get into all sorts of little uh problems and so on and it",
    "start": "2793079",
    "end": "2798920"
  },
  {
    "text": "becomes less simple we also have a problem that one of the beauties of the command pattern especially when working",
    "start": "2798920",
    "end": "2804640"
  },
  {
    "text": "with things that users do is that we can make semantic changes I'm doing an edit",
    "start": "2804640",
    "end": "2810920"
  },
  {
    "text": "you know I am uh I am acknowledging an incident I am par I'm speaking from my",
    "start": "2810920",
    "end": "2817680"
  },
  {
    "text": "own domain I am reassigning an incident to a team I am escalating but as you add more commands",
    "start": "2817680",
    "end": "2824440"
  },
  {
    "text": "you've got to sit down and start working out well what happens if you prepend and append with a resolved well sorry and",
    "start": "2824440",
    "end": "2830400"
  },
  {
    "text": "acknowledge with a resolved well that doesn't make sense because you can't acknowledge an incident that's already been resolved in page your duty so we've",
    "start": "2830400",
    "end": "2836000"
  },
  {
    "text": "got to somehow have an error state for that with buff reddits everything seems to work all the time so you start to get",
    "start": "2836000",
    "end": "2842200"
  },
  {
    "text": "really really complicated because you're basically building a matrix of all the different combinations and it's not that",
    "start": "2842200",
    "end": "2848079"
  },
  {
    "text": "simple so sometimes people say huh well maybe we should let go of the",
    "start": "2848079",
    "end": "2855200"
  },
  {
    "text": "semantics and what they'll do is they'll set up like if you've got say some big Json object or something we'll just scan",
    "start": "2856480",
    "end": "2862720"
  },
  {
    "text": "it periodically for changes collect all the changes into some sort of a diff object and then do a some sort of merge",
    "start": "2862720",
    "end": "2870920"
  },
  {
    "text": "operation with the dips this is called differential synchronization the original",
    "start": "2870920",
    "end": "2877400"
  },
  {
    "text": "um version of I forget which uh text editor collaborative text editor used uh",
    "start": "2877400",
    "end": "2883359"
  },
  {
    "text": "differential synchronization um electron does some synchroniza synchronizing using",
    "start": "2883359",
    "end": "2889440"
  },
  {
    "text": "differential synchronization um it is an effective algorithm but it's",
    "start": "2889440",
    "end": "2895240"
  },
  {
    "text": "a trade-off you lose some of the semantics so if you want to use the same thing for timelines that you did for synchronizing documents that's not going",
    "start": "2895240",
    "end": "2902240"
  },
  {
    "text": "to work so well",
    "start": "2902240",
    "end": "2905760"
  },
  {
    "text": "and here's an example from Google Docs you could just scan it and find all the",
    "start": "2908559",
    "end": "2914920"
  },
  {
    "text": "changes now as I said in passing when you use something like",
    "start": "2916720",
    "end": "2921760"
  },
  {
    "text": "differential synchronization you gain some mathematical Simplicity it is a little bit easier you don't you don't",
    "start": "2921760",
    "end": "2927520"
  },
  {
    "text": "have to necessarily worry so much about acknowledgements versus um resolves and",
    "start": "2927520",
    "end": "2933480"
  },
  {
    "text": "so on but you do lose the those exact same semantics that are useful to",
    "start": "2933480",
    "end": "2940480"
  },
  {
    "text": "you but you do gain some flexibility now differential synchronization is not the command",
    "start": "2940480",
    "end": "2946480"
  },
  {
    "text": "pattern but what I said was interesting about the command pattern is how it's fertile it leads us in New",
    "start": "2946480",
    "end": "2952880"
  },
  {
    "text": "Directions now this idea of synchronizing documents you know once you start thinking about it it's a",
    "start": "2953880",
    "end": "2959960"
  },
  {
    "text": "really big problem space isn't it how many people use software that merges changes to documents",
    "start": "2959960",
    "end": "2967720"
  },
  {
    "text": "okay a number of people are either too busy to raise their hands or asleep because of course if you're doing any kind of Version Control you are using",
    "start": "2967720",
    "end": "2975040"
  },
  {
    "text": "software that merges changes to",
    "start": "2975040",
    "end": "2978760"
  },
  {
    "text": "documents now there are only two hard problems in computer science right cash and validation and naming",
    "start": "2980599",
    "end": "2987359"
  },
  {
    "text": "things and if we look at this buffer and rename",
    "start": "2987359",
    "end": "2992480"
  },
  {
    "text": "things does this not look very familiar to you I used to work at a company called called the something Hub comes",
    "start": "2992480",
    "end": "2999240"
  },
  {
    "text": "the GitHub that's it and we cared about this stuff all the time git is a kind of differential",
    "start": "2999240",
    "end": "3006119"
  },
  {
    "text": "synchronization it doesn't actually know that you renamed a variable does it it just it just scans documents for",
    "start": "3006119",
    "end": "3015000"
  },
  {
    "text": "changes and distributed Version Control does allow you to make some",
    "start": "3015880",
    "end": "3021720"
  },
  {
    "text": "things that look semantically semanti I know this particular thing I don't know if you've ever used use this feature but",
    "start": "3021720",
    "end": "3027839"
  },
  {
    "text": "if you uh use GitHub and you look at changes to a human readable file like a",
    "start": "3027839",
    "end": "3033119"
  },
  {
    "text": "markdown file or an ask you do or something it has a mode where you can see this kind of edit that looks kind of",
    "start": "3033119",
    "end": "3039680"
  },
  {
    "text": "like what you might mark up if you someone gave you say their talk and said what do you think and they said oh change this word and change this word",
    "start": "3039680",
    "end": "3045440"
  },
  {
    "text": "and so on in order to make this look human readable the code actually has to",
    "start": "3045440",
    "end": "3050920"
  },
  {
    "text": "have a whole bunch of heris that look at the raw diffs and then try to back infer",
    "start": "3050920",
    "end": "3057040"
  },
  {
    "text": "what kinds of edits humans might have",
    "start": "3057040",
    "end": "3060799"
  },
  {
    "text": "made so you end up incorporating a lot of additional complexity I also confess",
    "start": "3062480",
    "end": "3067960"
  },
  {
    "text": "that pag Duty had this problem in that we want to have this nice timeline that is semantically Rich reg braith rate",
    "start": "3067960",
    "end": "3073839"
  },
  {
    "text": "acknowledge this and so on but we had to kind of back infer it by looking at at um at a bunch of changes that we've",
    "start": "3073839",
    "end": "3081640"
  },
  {
    "text": "made if we actually build things with commands right off the get-go we save ourselves a lot of these",
    "start": "3083359",
    "end": "3091680"
  },
  {
    "text": "annoyances and I think this is an important problem to solve when I first started in software when I really first",
    "start": "3092200",
    "end": "3098960"
  },
  {
    "text": "started in software computers were as big as a room now they fit in our hand users have a completely different",
    "start": "3098960",
    "end": "3105760"
  },
  {
    "text": "set of expectations about which things are live and which things are kind of",
    "start": "3105760",
    "end": "3110920"
  },
  {
    "text": "batch processing we read a lot of we read a lot of web applications as",
    "start": "3110920",
    "end": "3116799"
  },
  {
    "text": "if we're doing batch programming submitting punch card jobs you know you fill out a form and you click submit and so on however our users are texting each",
    "start": "3116799",
    "end": "3124799"
  },
  {
    "text": "other in real time they use things like Google docs to to keep track of how many people are in",
    "start": "3124799",
    "end": "3131200"
  },
  {
    "text": "on this vacation they're going to take to spring break or whatever it is that that that they do and then we build applications that don't keep up with the",
    "start": "3131200",
    "end": "3137599"
  },
  {
    "text": "stuff that they get on their phone for 30 cents and we charge like half a million dollars to build",
    "start": "3137599",
    "end": "3142640"
  },
  {
    "text": "them most web applications are kind of out of sync with the EXP expectations people get from using consumer",
    "start": "3142640",
    "end": "3150280"
  },
  {
    "text": "devices to me that's an opportunity it's not a criticism I'm",
    "start": "3150280",
    "end": "3155559"
  },
  {
    "text": "saying wow look at all this fertile landine that we can go and settle and do cool things",
    "start": "3155559",
    "end": "3161599"
  },
  {
    "text": "with for example here's some a user experience for a competitive",
    "start": "3162280",
    "end": "3168920"
  },
  {
    "text": "product Oh No actually that's PID your duty anyways one of the things that we do is we",
    "start": "3168920",
    "end": "3175160"
  },
  {
    "text": "manage SC schules for people being on call now do you suppose that three",
    "start": "3175160",
    "end": "3180880"
  },
  {
    "text": "people might get together and be able to each of them on their own computer collaboratively edit a",
    "start": "3180880",
    "end": "3185920"
  },
  {
    "text": "schedule no do you think pag your duty ought to know better than this I think",
    "start": "3185920",
    "end": "3191079"
  },
  {
    "text": "so because we use Google Docs to do all kinds of things collaboratively and then our own the software that we build using",
    "start": "3191079",
    "end": "3196960"
  },
  {
    "text": "Google Docs collaboratively isn't collaborative needless to say this is something I'm personally",
    "start": "3196960",
    "end": "3203319"
  },
  {
    "text": "championing but everything in the world I think ought to be collaborative most of it already",
    "start": "3203319",
    "end": "3210319"
  },
  {
    "text": "is we just need to get excited about this why can't I collaboratively edit",
    "start": "3210319",
    "end": "3215799"
  },
  {
    "text": "this why can't I make my own schedule and merge it into another schedule the way I can merge things why",
    "start": "3215799",
    "end": "3222960"
  },
  {
    "text": "can't I do Version Control of schedules why can't support help me fill",
    "start": "3222960",
    "end": "3229000"
  },
  {
    "text": "out a form online live just say oh yeah fill that out no no no not that click somewhere else what's up with that it's",
    "start": "3229000",
    "end": "3236079"
  },
  {
    "text": "not hard now it's very easy to stand on a",
    "start": "3236079",
    "end": "3242280"
  },
  {
    "text": "stage and exhort people to do these tremendous things that involve rewriting all of the code from the ground up or a",
    "start": "3242280",
    "end": "3247480"
  },
  {
    "text": "completely new paradigm of course actually going out and doing those things is completely different matter",
    "start": "3247480",
    "end": "3252920"
  },
  {
    "text": "and in fact I don't Advocate It software is best developed using a kind of experimental try a little thing get some",
    "start": "3252920",
    "end": "3258920"
  },
  {
    "text": "feedback make some changes learn from it you no doubt have seen other talks or read books or or discussed with with",
    "start": "3258920",
    "end": "3266440"
  },
  {
    "text": "your colleagues or are fervently following a philosophy where you build skateboards bicycles Motorcycles Cars",
    "start": "3266440",
    "end": "3272599"
  },
  {
    "text": "not try to invent the Tesla from scratch right off the get-go so anything that involves this",
    "start": "3272599",
    "end": "3278520"
  },
  {
    "text": "complete boil the ocean rewrite all of your code in a new paradigm is a little suspect and that's why I say the",
    "start": "3278520",
    "end": "3284400"
  },
  {
    "text": "interesting thing that I'm trying to share with you is not here's the command pattern go out and do it as much as",
    "start": "3284400",
    "end": "3289880"
  },
  {
    "text": "here's a pattern thinking about it is fertile and leads us to new to new directions but practically",
    "start": "3289880",
    "end": "3296920"
  },
  {
    "text": "what can we do modestly how can we get started well the first is to think about",
    "start": "3296920",
    "end": "3302720"
  },
  {
    "text": "separating concerns for example we happen to use Ember at pag your duty",
    "start": "3302720",
    "end": "3309480"
  },
  {
    "text": "and we we switched and started doing everything using a plugin called Ember concurrency which happens to have tasks",
    "start": "3309480",
    "end": "3318079"
  },
  {
    "text": "which are a heck of a lot like command invocations pardon me task instances",
    "start": "3318079",
    "end": "3323559"
  },
  {
    "text": "which are rolled into a task which looks a lot like a job queue and then once you start separating that you say to yourself well notification that the",
    "start": "3323559",
    "end": "3330200"
  },
  {
    "text": "command is succeeded maybe that shouldn't be in the user experience uh object that actually shows the widget or",
    "start": "3330200",
    "end": "3336200"
  },
  {
    "text": "the button it should be somewhere else so we can invoke those commands using a using a service object and so on you can",
    "start": "3336200",
    "end": "3342599"
  },
  {
    "text": "do little things one by one and move",
    "start": "3342599",
    "end": "3347760"
  },
  {
    "text": "towards a world in which the invocations are separate from the data objects you",
    "start": "3347760",
    "end": "3354200"
  },
  {
    "text": "have you have data stores that know how to save things but you don't necessarily",
    "start": "3354200",
    "end": "3359559"
  },
  {
    "text": "have to invoke them directly from the from a user experience object like a widget or a button putting something in",
    "start": "3359559",
    "end": "3364880"
  },
  {
    "text": "between might give you some additional flexibility you don't have to necessarily bloat your data store object",
    "start": "3364880",
    "end": "3371440"
  },
  {
    "text": "up but just once you start thinking about this you can start moving in these sort of new directions it just takes",
    "start": "3371440",
    "end": "3378520"
  },
  {
    "text": "being familiar with these patterns with knowing how they work so that you can",
    "start": "3378520",
    "end": "3384319"
  },
  {
    "text": "start to see the opportunities when they rise to do small things and make small",
    "start": "3384319",
    "end": "3389720"
  },
  {
    "text": "experiments so as I say the point of this talk is not go out and rewrite all",
    "start": "3389720",
    "end": "3394880"
  },
  {
    "text": "of your code the point of this talk is think about what some of these things are",
    "start": "3394880",
    "end": "3401960"
  },
  {
    "text": "think about where you'd like your software to be one day collaborative real time to have real",
    "start": "3401960",
    "end": "3408760"
  },
  {
    "text": "timelines to have undo to to basically give people The Experience they're already getting on their little device",
    "start": "3408760",
    "end": "3415520"
  },
  {
    "text": "that and find Opportunities to do little things little experiments that will get",
    "start": "3415520",
    "end": "3421240"
  },
  {
    "text": "you moving in that direction thank",
    "start": "3421240",
    "end": "3426440"
  },
  {
    "text": "you I think we have a little time if anyone has a question or you can race off and be first in line for the",
    "start": "3432039",
    "end": "3437720"
  },
  {
    "text": "espresso Mach",
    "start": "3437720",
    "end": "3440400"
  }
]