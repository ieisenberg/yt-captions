[
  {
    "text": "all right hello everyone uh so welcome to little red riding hood uh",
    "start": "320",
    "end": "6799"
  },
  {
    "text": "and the forest of kd trees uh this is actually a talk i've been wanting to do for a very long time try to",
    "start": "6799",
    "end": "12639"
  },
  {
    "text": "well steal inspiration from a lot of the other good talks that i've seen both here and in other places",
    "start": "12639",
    "end": "18800"
  },
  {
    "text": "and it's also on a topic which i find interesting it's it's kind of a mix of",
    "start": "18800",
    "end": "24800"
  },
  {
    "text": "uh it's a war story it's i've been trying to articulate the",
    "start": "24800",
    "end": "31359"
  },
  {
    "text": "the observations and learnings i have encountering a really new to me data structure and some of the code tricks",
    "start": "31359",
    "end": "37920"
  },
  {
    "text": "that you have to do once you start getting into the dirty details since my journey from from hearing about",
    "start": "37920",
    "end": "44239"
  },
  {
    "text": "it from getting curious until it just has and to me this has served as just a playing ground to",
    "start": "44239",
    "end": "51199"
  },
  {
    "text": "get the or to get into the sticky situations where you need to apply well good and bad code techniques in order to",
    "start": "51199",
    "end": "58160"
  },
  {
    "text": "get out right so what's in this talk that's that's really it it's it's my journey so it",
    "start": "58160",
    "end": "64239"
  },
  {
    "text": "started when i was asked a question um that i didn't know the answer to and",
    "start": "64239",
    "end": "70479"
  },
  {
    "text": "obviously there was an answer right um [Music] and um [Music]",
    "start": "70479",
    "end": "77439"
  },
  {
    "text": "uh because i thought about it for a long time and it stumped me there there it turns out there is an answer",
    "start": "77439",
    "end": "82720"
  },
  {
    "text": "and i wanted to just learn more about it so it's an arena for me to to play with",
    "start": "82720",
    "end": "88720"
  },
  {
    "text": "implementation and to play with code and i just call it my kd3 journey right",
    "start": "88720",
    "end": "93840"
  },
  {
    "text": "it's a nice point today i'll just get that away all right so why the odd title though",
    "start": "93840",
    "end": "100960"
  },
  {
    "text": "i find fairy tales deeply deeply fascinating it's um",
    "start": "100960",
    "end": "106399"
  },
  {
    "text": "it's one of the things that just everyone know right so whoever has",
    "start": "106399",
    "end": "112159"
  },
  {
    "text": "well lest it has heard of little red riding hood right that's about as many hands i expected to",
    "start": "112159",
    "end": "118399"
  },
  {
    "text": "see uh everyone knows him and they have this sort of collective ownership there is no",
    "start": "118399",
    "end": "124079"
  },
  {
    "text": "claire author um they come in many many variations i'm",
    "start": "124079",
    "end": "129520"
  },
  {
    "text": "pretty sure that if everyone here told their version of or red riding hood as they uh remember it we would have as many",
    "start": "129520",
    "end": "136959"
  },
  {
    "text": "versions as we have people right and they touch something very deeply human in us they tickle some curiosity",
    "start": "136959",
    "end": "143120"
  },
  {
    "text": "and i think there are a lot of parallels to how we well look at code",
    "start": "143120",
    "end": "149280"
  },
  {
    "text": "so yeah they're told and retold they've always been a vehicle for morale for learning for teaching the film",
    "start": "149360",
    "end": "156319"
  },
  {
    "text": "information for playing they transcend time and place so there are some disclaimers that we",
    "start": "156319",
    "end": "161760"
  },
  {
    "text": "have to go through first uh there will be a lot of code in this talk uh some of it has been modified to fit",
    "start": "161760",
    "end": "168160"
  },
  {
    "text": "on slides so if it doesn't compile or if it's you know a little bit dense then it's too fat",
    "start": "168160",
    "end": "174080"
  },
  {
    "text": "uh there will be some bad puns i'm hoping for at least one groan",
    "start": "174080",
    "end": "178879"
  },
  {
    "text": "and there will be some spoilers so if you don't want the ending ruined i suggest you leave",
    "start": "179120",
    "end": "185840"
  },
  {
    "text": "so hood this is her right i've seen her many times",
    "start": "185840",
    "end": "191750"
  },
  {
    "text": "[Music] she's this innocent girl who is tasked by her mother to go visit",
    "start": "191750",
    "end": "197599"
  },
  {
    "text": "her gran right in some versions she brings wine in others she brings cakes",
    "start": "197599",
    "end": "203200"
  },
  {
    "text": "i think the wine is the most popular in the south uh maybe cakes are more popular in",
    "start": "203200",
    "end": "209200"
  },
  {
    "text": "northern germany i don't know um on the way she meets the big bad wolf who tricks her",
    "start": "209200",
    "end": "215120"
  },
  {
    "text": "into telling her where she's going it's a big mistake and she also distracts her so you know",
    "start": "215120",
    "end": "220239"
  },
  {
    "text": "maybe it's a good idea to give her a bouquet of flowers and blue bells that'd be lovely with uh with the basket of treats",
    "start": "220239",
    "end": "226640"
  },
  {
    "text": "she ends up getting eaten and then to no credit of her own gets rescued",
    "start": "226640",
    "end": "232319"
  },
  {
    "text": "but there are a bunch of variations of these and some of them are a lot less savory than the pg-13 version right",
    "start": "232319",
    "end": "241159"
  },
  {
    "text": "themes from this story is found all over europe uh and being in norway of course you find it even in trims",
    "start": "241760",
    "end": "248319"
  },
  {
    "text": "when thor loses his hammer it gets stolen and he has to dress up like a bride uh and ends up punching a lot of",
    "start": "248319",
    "end": "255439"
  },
  {
    "text": "giants in the vice right but it's the same story of dressing up as something else to get close enough to",
    "start": "255439",
    "end": "262240"
  },
  {
    "text": "you know deliver the killing blow today i say the canonical story is",
    "start": "262240",
    "end": "269199"
  },
  {
    "text": "probably german it's the grimms right there is also a an earlier um [Music]",
    "start": "269199",
    "end": "275440"
  },
  {
    "text": "record that is also written down by a frenchman but i can't remember his name but historian theme is just found",
    "start": "275440",
    "end": "282080"
  },
  {
    "text": "everywhere one thing i find interesting about this is that it's always recognizable",
    "start": "282080",
    "end": "287680"
  },
  {
    "text": "this one is by dore he will show up a couple of times",
    "start": "287680",
    "end": "292560"
  },
  {
    "text": "these pictures will be i'll weave them in throughout the talk for no particular reason other than",
    "start": "293520",
    "end": "299040"
  },
  {
    "text": "they're beautiful we should take some time to admire the amazing array of beauty that",
    "start": "299040",
    "end": "305039"
  },
  {
    "text": "our world has to offer but not just that they all depict scenes from the same story",
    "start": "305039",
    "end": "311680"
  },
  {
    "text": "they do they look nothing alike but you instantly recognize exactly what is going on you get the full story right",
    "start": "311680",
    "end": "320000"
  },
  {
    "text": "um [Music] even though they're completely different you can tell they're kind of the same",
    "start": "320000",
    "end": "327440"
  },
  {
    "text": "we as programmers are always you know we're always telling ourselves to not reinvent the wheel the the wheel right",
    "start": "329120",
    "end": "336840"
  },
  {
    "text": "um but why do people keep making paintings and drawings of",
    "start": "336840",
    "end": "342080"
  },
  {
    "text": "red and it's not bad i think we should invent wheels more often",
    "start": "342080",
    "end": "347440"
  },
  {
    "text": "this is red",
    "start": "348080",
    "end": "351400"
  },
  {
    "text": "i think we should invent wheels more often because it allows us to play with with um [Music]",
    "start": "353280",
    "end": "359360"
  },
  {
    "text": "with layout with uh emphasis with new coding techniques and materials talk on",
    "start": "359360",
    "end": "365039"
  },
  {
    "text": "units is actually a good example because it's also this massive testing ground right for um",
    "start": "365039",
    "end": "371759"
  },
  {
    "text": "testing out super plus 20 features and just to emphasize the the the value",
    "start": "371759",
    "end": "376880"
  },
  {
    "text": "of storytelling this uh the collapse of the typing rebellion and my subsequent wanderings to avoid the",
    "start": "376880",
    "end": "383199"
  },
  {
    "text": "deadly clutches of the vengeful imperial agents form the basis of this narrative",
    "start": "383199",
    "end": "388560"
  },
  {
    "text": "the narratives whose very existence and use of the first person pretty much ruin any sense of suspense that might have",
    "start": "388560",
    "end": "393600"
  },
  {
    "text": "made it worth reading this is from the vulva listening competition i recommend",
    "start": "393600",
    "end": "399280"
  },
  {
    "text": "everyone to just go to that website and read through all the winning entries they're fabulous",
    "start": "399280",
    "end": "405360"
  },
  {
    "text": "okay so let's talk about trees this is um the japanese and probably also",
    "start": "406400",
    "end": "412319"
  },
  {
    "text": "chinese word for tree it's ki in japanese",
    "start": "412319",
    "end": "418400"
  },
  {
    "text": "so the problem i always post was given a set of points p",
    "start": "418720",
    "end": "424080"
  },
  {
    "text": "with a value so you have your xy coordinates and an associated value and the radius r",
    "start": "424080",
    "end": "430479"
  },
  {
    "text": "what's the average value of all the points within this radius r",
    "start": "430479",
    "end": "436240"
  },
  {
    "text": "that point for every point in p please solve it this is actually a pretty easy problem",
    "start": "436240",
    "end": "443680"
  },
  {
    "text": "it's actually even easier to state if you do it graphically i think it's just what's the average value of the points",
    "start": "444479",
    "end": "450160"
  },
  {
    "text": "in the circle right so how do you do that",
    "start": "450160",
    "end": "456240"
  },
  {
    "text": "so this is how you would do it in python right for current points",
    "start": "457120",
    "end": "462319"
  },
  {
    "text": "like you look at all the points you compute the distance if it's within you consider it and if not you throw it away right",
    "start": "462319",
    "end": "468479"
  },
  {
    "text": "if you put it into the bigger program it looks like this you just you know bring them along",
    "start": "468479",
    "end": "475199"
  },
  {
    "text": "so anyone want to take a stab at the performance and complexity of this this is not a trick question",
    "start": "475840",
    "end": "482879"
  },
  {
    "text": "anyone yeah all right so it's squared right",
    "start": "482879",
    "end": "488159"
  },
  {
    "text": "counter loops can you do better",
    "start": "491360",
    "end": "497120"
  },
  {
    "text": "right this is obviously a leading question yes you can do a lot better i didn't know how so this was new to me",
    "start": "497120",
    "end": "503039"
  },
  {
    "text": "it's very intriguing so it turns out there's a data structure it's called the kd tree has anyone ever",
    "start": "503039",
    "end": "509039"
  },
  {
    "text": "written one no there's one good anyone used to",
    "start": "509039",
    "end": "514479"
  },
  {
    "text": "you've written used iron i guess if you've written you've used right anyone ever used academy i think i think a lot of you",
    "start": "514479",
    "end": "521039"
  },
  {
    "text": "have you just don't know because his power is database engines and a lot of games use it",
    "start": "521039",
    "end": "526880"
  },
  {
    "text": "anyone ever heard of arcade tree before see a few more hands",
    "start": "526880",
    "end": "532320"
  },
  {
    "text": "okay well the rest of you are part of our lucky 10 000 today",
    "start": "532320",
    "end": "537440"
  },
  {
    "text": "because this is an amazing data structure so what do you do when you're completely stumped but you get this hint that you",
    "start": "537440",
    "end": "543040"
  },
  {
    "text": "can use a kd tree well you go to wikipedia and this is what you got so the kd tree",
    "start": "543040",
    "end": "548320"
  },
  {
    "text": "is a binary tree in which every node is a k dimensional point um okay",
    "start": "548320",
    "end": "553839"
  },
  {
    "text": "every non-leaf node can be thought of simplicity generating a splitting hyperplane that divides the space into",
    "start": "553839",
    "end": "559200"
  },
  {
    "text": "two parts known as half spaces points to the left of this hyperplane are represented by the left sub tree of that",
    "start": "559200",
    "end": "565680"
  },
  {
    "text": "node and points to the right hyperplane are represented by the right sub tree hyperplane direction is chosen the following way every node in the tree is",
    "start": "565680",
    "end": "572399"
  },
  {
    "text": "associated with one of the k dimensions with the hyperplay perpendicular to that dimensions access",
    "start": "572399",
    "end": "578720"
  },
  {
    "text": "thank you wiki so i read that i think i read this",
    "start": "578720",
    "end": "583839"
  },
  {
    "text": "section maybe 30 times and so you know what this reads like do you",
    "start": "583839",
    "end": "589200"
  },
  {
    "text": "know what this reminded me of a monad is just the monoid in the category of vendor functions what's the",
    "start": "589200",
    "end": "594640"
  },
  {
    "text": "problem i mean technically everything that that section said is true and it's",
    "start": "594640",
    "end": "601040"
  },
  {
    "text": "completely and utterly useless unless you're already familiar right so good on wiki i should actually probably fix that",
    "start": "601040",
    "end": "606959"
  },
  {
    "text": "but i haven't gotten around but what i learned is that it has some amazing features right so it's a space",
    "start": "606959",
    "end": "613680"
  },
  {
    "text": "partitioning data structure that much i think we got and it supports fast nearest neighbor",
    "start": "613680",
    "end": "618959"
  },
  {
    "text": "searches range searches or in particular in databases you do when you do searches on multiple keys",
    "start": "618959",
    "end": "624560"
  },
  {
    "text": "for instance give me um the the set of employees with this salary and age",
    "start": "624560",
    "end": "630160"
  },
  {
    "text": "combination right and especially the narrative name research in this machine learning clustering age is a pretty you know",
    "start": "630160",
    "end": "637279"
  },
  {
    "text": "appealing feature so then what do you do right so you have this interesting data structure that has",
    "start": "637279",
    "end": "643600"
  },
  {
    "text": "some other properties that you want so you start inventing the kd tree right",
    "start": "643600",
    "end": "649040"
  },
  {
    "text": "so i figured the best way to actually understand this is to implement it and i",
    "start": "649040",
    "end": "654079"
  },
  {
    "text": "found little i even looked up in corman corman doesn't have k2 at least in my edition so that was a bit disappointing",
    "start": "654079",
    "end": "662480"
  },
  {
    "text": "um but so what do we do so when when we're implementing something like this what do we do well we know it's a binary tree so",
    "start": "662959",
    "end": "669440"
  },
  {
    "text": "we start out with a binary tree right so if you look up in carmen",
    "start": "669440",
    "end": "674640"
  },
  {
    "text": "this is what a binary tree looks like so ignoring some of the mumbo jumbo you have three properties right or three",
    "start": "674640",
    "end": "682079"
  },
  {
    "text": "fields you have the point for this node and a left and right subtree and we don't want to make memories so we use",
    "start": "682079",
    "end": "687760"
  },
  {
    "text": "unique pointer right so this is the binary tree as you'd find in any computer science textbook and",
    "start": "687760",
    "end": "693519"
  },
  {
    "text": "this would be very good in the 80s um",
    "start": "693519",
    "end": "698880"
  },
  {
    "text": "so this is it's this is going to serve well this is where i started and i figured i need some tools so i need a way to check if two nodes are in",
    "start": "698880",
    "end": "705519"
  },
  {
    "text": "range right so i wrote this in range so this uses the trick where you square both sides",
    "start": "705519",
    "end": "711040"
  },
  {
    "text": "just check radius is faster than doing the square root",
    "start": "711040",
    "end": "716200"
  },
  {
    "text": "and then on wiki you actually get a pseudo code construction algorithm this doesn't really too bad right so you",
    "start": "717760",
    "end": "724399"
  },
  {
    "text": "pick your axis by doing depth mode k where k is the number of dimensions um you select a median and then you",
    "start": "724399",
    "end": "731600"
  },
  {
    "text": "recurse into oh and partition the set and then recurse left and right",
    "start": "731600",
    "end": "736800"
  },
  {
    "text": "depending on whether or not it's larger or smaller right",
    "start": "736800",
    "end": "741439"
  },
  {
    "text": "okay this is good because this is something we can implement so this is what i started out with",
    "start": "741839",
    "end": "747360"
  },
  {
    "text": "for this talk i have fixed k to be 2.",
    "start": "749279",
    "end": "755600"
  },
  {
    "text": "this could be k and it could be a template parameter it you can you can introduce it a lot of ways but for now",
    "start": "756560",
    "end": "761680"
  },
  {
    "text": "i'm just going to use two okay and now i have a comparison function that is axis aware right so",
    "start": "761680",
    "end": "767040"
  },
  {
    "text": "every time you recurse your depth is going to increase which means that you're going to alternate between the two axes and this",
    "start": "767040",
    "end": "772560"
  },
  {
    "text": "is a easy way to integrate that into standard sort so pick the median by sorting and just picking one in the",
    "start": "772560",
    "end": "778480"
  },
  {
    "text": "middle not being too concerned about being odd or even that doesn't really factor in for us",
    "start": "778480",
    "end": "784639"
  },
  {
    "text": "and then you recurse with make unique and repeat the process right so it's pretty standard recursive construction",
    "start": "784639",
    "end": "792320"
  },
  {
    "text": "and this is fine okay",
    "start": "796079",
    "end": "801240"
  },
  {
    "text": "so now we have the tree presumably and i did some testing where i tried to print it out and there was a nightmare to",
    "start": "803279",
    "end": "808959"
  },
  {
    "text": "follow because i still didn't really understand the tree at this point but i figured this is more or less a mechanical transformation of the pseudo",
    "start": "808959",
    "end": "815200"
  },
  {
    "text": "code so hopefully it works so i got into the nearest neighbors search",
    "start": "815200",
    "end": "821440"
  },
  {
    "text": "and it is very difficult it turns out through just google to find a pseudo code kind of implement our",
    "start": "821440",
    "end": "829040"
  },
  {
    "text": "notation denotation of daenerys neighbors search i managed to find some",
    "start": "829040",
    "end": "835920"
  },
  {
    "text": "lecture notes from i think university of portland where this is from and i think there's a",
    "start": "835920",
    "end": "842800"
  },
  {
    "text": "bug in it too because i think it only considers the leafs which has to be wrong right so this is what i find that this is what",
    "start": "842800",
    "end": "848720"
  },
  {
    "text": "looks and this is very much cleaned up from the notes that i stole them from",
    "start": "848720",
    "end": "854519"
  },
  {
    "text": "but we don't even want the nearest neighbors search in this case right we want the node in radius so we modify it",
    "start": "856240",
    "end": "861440"
  },
  {
    "text": "a bit and try and clean it up and now we have the node in radio search algorithm right",
    "start": "861440",
    "end": "867600"
  },
  {
    "text": "so i can say all right this is something that we can work with so pretty much you just you have at",
    "start": "867600",
    "end": "874399"
  },
  {
    "text": "whatever level you're at you you're checking your node against the one you're searching from and say are you within distance right",
    "start": "874399",
    "end": "882639"
  },
  {
    "text": "and if you are then yield it and if not if you're not a leaf you probably want to consider the the",
    "start": "882639",
    "end": "889199"
  },
  {
    "text": "surgery right or you need to consider the subtrees",
    "start": "889199",
    "end": "894000"
  },
  {
    "text": "so you check if you should go left or right first okay",
    "start": "894880",
    "end": "901199"
  },
  {
    "text": "and then you check some limits on the axis and this was just",
    "start": "901440",
    "end": "907040"
  },
  {
    "text": "i never really found a good intuition or explanation for what these checks are right",
    "start": "907040",
    "end": "913839"
  },
  {
    "text": "so i have to dig a bit deeper and do some drawings but if you notice you have two decisions",
    "start": "913839",
    "end": "919279"
  },
  {
    "text": "in this algorithm you have whether or not you should include node and whether or not you should walk",
    "start": "919279",
    "end": "925040"
  },
  {
    "text": "the subtree those are the two decisions that you need to make at every step",
    "start": "925040",
    "end": "929839"
  },
  {
    "text": "okay on the right there is",
    "start": "931839",
    "end": "938639"
  },
  {
    "text": "a kd tree for this point set that has been constructed with well i",
    "start": "938639",
    "end": "944320"
  },
  {
    "text": "mean the way we've just seen if you notice 7 2",
    "start": "944320",
    "end": "949440"
  },
  {
    "text": "almost at the bottom there if you count the number of nodes to the right of it you'll see two right",
    "start": "949440",
    "end": "955440"
  },
  {
    "text": "and if you count the number of nodes or points to the left of it you'll see three five four two three and",
    "start": "955440",
    "end": "961279"
  },
  {
    "text": "four seven",
    "start": "961279",
    "end": "963839"
  },
  {
    "text": "this is there's a common way of visualizing this which is this",
    "start": "966800",
    "end": "973519"
  },
  {
    "text": "this diagram is very difficult to get into if you don't have any experiences it's almost like the monad thing right",
    "start": "973759",
    "end": "981120"
  },
  {
    "text": "but you can see how the space is partitioned by some axis so you know then the the trick it turns out is that",
    "start": "981120",
    "end": "988399"
  },
  {
    "text": "within um any rectangle yeah in a rectangle that's",
    "start": "988399",
    "end": "994160"
  },
  {
    "text": "just the subspace of all the notes so you just you're kind of zooming in one thing you'll notice again is that it",
    "start": "994160",
    "end": "1000079"
  },
  {
    "text": "kind of grows outwards diagonally from the center",
    "start": "1000079",
    "end": "1004880"
  },
  {
    "text": "but you can find all the notes there and you can see almost if you try and trace it how",
    "start": "1005519",
    "end": "1010959"
  },
  {
    "text": "it works still not very good for the intuition though",
    "start": "1010959",
    "end": "1015839"
  },
  {
    "text": "so i just removed all the lines and this is still me just working on pen and paper right so i remove all the",
    "start": "1018240",
    "end": "1025120"
  },
  {
    "text": "lines and i just inserted three search points so that are in blue and this is just for",
    "start": "1025120",
    "end": "1031038"
  },
  {
    "text": "the first partition you can still see you have two nodes to the right of the red line and three nodes to the left",
    "start": "1031039",
    "end": "1037839"
  },
  {
    "text": "right the blues are just search points they're not actually nodes in the graph",
    "start": "1037839",
    "end": "1042720"
  },
  {
    "text": "okay so we have two decisions do we include the node or not and do we want the",
    "start": "1044400",
    "end": "1050080"
  },
  {
    "text": "subtree or not from this partitioning right so we're only considering this partitioning",
    "start": "1050080",
    "end": "1056960"
  },
  {
    "text": "you can draw that in because you just draw the radius around it",
    "start": "1057840",
    "end": "1062320"
  },
  {
    "text": "and this actually brings uh so in order whether or not you include the node you just see",
    "start": "1065760",
    "end": "1072000"
  },
  {
    "text": "just find the dots within the circle right that's pretty easy when you look at it like this i think",
    "start": "1072000",
    "end": "1077679"
  },
  {
    "text": "uh you also include the ones on the edge but you could include uh choose to just uh discard them",
    "start": "1077679",
    "end": "1084640"
  },
  {
    "text": "then there's a question when do you walk the sub journal and this is the one thing i wish someone had stated pretty clearly",
    "start": "1084640",
    "end": "1091520"
  },
  {
    "text": "is that when you're at either of these how do you choose whether or not",
    "start": "1091520",
    "end": "1096880"
  },
  {
    "text": "to go into sort of the the space partitioned on or the so let's actually take a very specific",
    "start": "1096880",
    "end": "1103440"
  },
  {
    "text": "example if you're at uh six one there right so you're considering that point and",
    "start": "1103440",
    "end": "1110320"
  },
  {
    "text": "you're you're partitioning the space do you need to go right right",
    "start": "1110320",
    "end": "1115600"
  },
  {
    "text": "yes you need to because the radius the circle cross the partitioning line at some point",
    "start": "1115600",
    "end": "1122160"
  },
  {
    "text": "right that that's it there's no magic but that is never really straight up stated unless in some hyper plane you know",
    "start": "1122160",
    "end": "1128880"
  },
  {
    "text": "mumbo jumbo okay so whenever",
    "start": "1128880",
    "end": "1135440"
  },
  {
    "text": "our radius our search perimeter crosses the partitioning line that's when we need to go into the let's quote unquote",
    "start": "1135440",
    "end": "1142160"
  },
  {
    "text": "other subtree or that subtree well okay but how do we figure that out",
    "start": "1142160",
    "end": "1149120"
  },
  {
    "text": "and then it hit me after a lot of thinking that you really only need to check one point",
    "start": "1149120",
    "end": "1155280"
  },
  {
    "text": "which is the most extreme point on the circle right",
    "start": "1155280",
    "end": "1160320"
  },
  {
    "text": "and where is that any immediate ideas probably figured it out much faster than i did",
    "start": "1160320",
    "end": "1167280"
  },
  {
    "text": "if you just follow the radius in the direction of the partitioning line right so in this case you just followed",
    "start": "1167280",
    "end": "1174559"
  },
  {
    "text": "them to the right if that x coordinate is higher than the",
    "start": "1174559",
    "end": "1181360"
  },
  {
    "text": "one your part or you the one that's the node you're considering which is seven two right",
    "start": "1181360",
    "end": "1187520"
  },
  {
    "text": "and then you go in there and that's just a simple arithmetic check is it larger than some value",
    "start": "1187520",
    "end": "1193840"
  },
  {
    "text": "that is actually what the wiki thing said all right so now that we have that",
    "start": "1193840",
    "end": "1199520"
  },
  {
    "text": "intuition we can go into z plus",
    "start": "1199520",
    "end": "1206080"
  },
  {
    "text": "so this is what i wrote okay so first you just get your left right",
    "start": "1206080",
    "end": "1211360"
  },
  {
    "text": "and axis just read out at every level and you consider is this in range or not",
    "start": "1211360",
    "end": "1216400"
  },
  {
    "text": "if it is you write it this is doing sort of output iterator style light to standard library which i think is a good",
    "start": "1216400",
    "end": "1221760"
  },
  {
    "text": "design but if you notice the pqr axis stuff",
    "start": "1221760",
    "end": "1227760"
  },
  {
    "text": "what's that line 12 maybe what it turns out you're able to do is",
    "start": "1227760",
    "end": "1233280"
  },
  {
    "text": "you can collapse all of these into two checks by using the directionality of the sign",
    "start": "1233280",
    "end": "1240080"
  },
  {
    "text": "integer regardless of dimension so i mean obviously if you're going x in the x",
    "start": "1240080",
    "end": "1247360"
  },
  {
    "text": "axis it would be left right but if you're partitioning in the y axis so you're you know horizontally slicing this base",
    "start": "1247360",
    "end": "1254320"
  },
  {
    "text": "then it would be up down and it would behave the same way and that means that you can just take",
    "start": "1254320",
    "end": "1260400"
  },
  {
    "text": "the point that you're at and you can look at the axis and you get the point",
    "start": "1260400",
    "end": "1267200"
  },
  {
    "text": "at the radius on in the right direction not left right but correct direction",
    "start": "1268080",
    "end": "1274480"
  },
  {
    "text": "by doing minus if you're going to check if you're going to the left subtree or plus if you're going to the right",
    "start": "1274480",
    "end": "1280960"
  },
  {
    "text": "subtree and that's it i think that's actually super elegant and you can see the symmetry between the",
    "start": "1280960",
    "end": "1286799"
  },
  {
    "text": "two sizes and that just gives us the radius check for nothing it's very fast",
    "start": "1286799",
    "end": "1292400"
  },
  {
    "text": "okay so now we actually had an implementation that worked i was very happy that worked",
    "start": "1292400",
    "end": "1298880"
  },
  {
    "text": "so now i had the kd tree and an implementation that worked",
    "start": "1300559",
    "end": "1306480"
  },
  {
    "text": "and i needed to fix it because the implementation works but it's not good",
    "start": "1306480",
    "end": "1311520"
  },
  {
    "text": "right so let's talk about abstractions and more specifically let's talk about effective abstractions",
    "start": "1311520",
    "end": "1319320"
  },
  {
    "text": "anyone know what this is not a trick question i promise yes",
    "start": "1320080",
    "end": "1326400"
  },
  {
    "text": "it's a ball very good specifically it's a",
    "start": "1326400",
    "end": "1332320"
  },
  {
    "text": "cartoon by picasso it's made in the mid 40s i think",
    "start": "1332320",
    "end": "1338640"
  },
  {
    "text": "um apparently it hangs on the wall of apple computers",
    "start": "1338640",
    "end": "1343440"
  },
  {
    "text": "but i find it pretty fascinating because it's just a few straight and some curved lines",
    "start": "1344960",
    "end": "1350320"
  },
  {
    "text": "and you can you can tell it's a ball and it looks nothing like a ball right but it still has",
    "start": "1350320",
    "end": "1355840"
  },
  {
    "text": "somehow managed to capture the abs the essence that's how i like to think about abstractions too is that you want just",
    "start": "1355840",
    "end": "1362159"
  },
  {
    "text": "to straighten simple lines that well in picasso's words maybe that even a child could draw",
    "start": "1362159",
    "end": "1368480"
  },
  {
    "text": "right but to capture the essence of something so i wrote this which is kind of inspired by the",
    "start": "1368480",
    "end": "1374559"
  },
  {
    "text": "standard iterators it's not quite an iterator but i'm going to use this the next time i'm doing a tree based structure that's for",
    "start": "1374559",
    "end": "1380480"
  },
  {
    "text": "sure i call it the view because it doesn't get to modify it's similar to the",
    "start": "1380480",
    "end": "1386880"
  },
  {
    "text": "zippers if you're familiar with those from functional programming but",
    "start": "1386880",
    "end": "1392320"
  },
  {
    "text": "we now have this it's technically a subclass but we have this auxiliary class right",
    "start": "1392320",
    "end": "1398880"
  },
  {
    "text": "with a dereference operator and two methods left and right and the",
    "start": "1398880",
    "end": "1404080"
  },
  {
    "text": "boolean conversion that just said is this essentially it",
    "start": "1404080",
    "end": "1409280"
  },
  {
    "text": "checks is this not a node anymore which is when you've gone past the tree",
    "start": "1409280",
    "end": "1414559"
  },
  {
    "text": "okay this is in the current implementation it's",
    "start": "1414559",
    "end": "1420720"
  },
  {
    "text": "actually pretty useless okay",
    "start": "1420720",
    "end": "1426158"
  },
  {
    "text": "do you know what this pretty much relates to the previous slide",
    "start": "1427039",
    "end": "1432559"
  },
  {
    "text": "it's uh it's a pointer in the top hat thank you",
    "start": "1432559",
    "end": "1439120"
  },
  {
    "text": "so because the the the structure now does nothing that the pointers don't already do",
    "start": "1439120",
    "end": "1445840"
  },
  {
    "text": "errors more of picasso's sketches and you can see he clearly knows how to draw a ball right",
    "start": "1450320",
    "end": "1455440"
  },
  {
    "text": "but is it more a bull than the well simple one",
    "start": "1455440",
    "end": "1462080"
  },
  {
    "text": "probably not so we use this and we can see the change isn't",
    "start": "1462080",
    "end": "1467919"
  },
  {
    "text": "remarkable from the point of the query right because pointers and trees or the tree edges as pointers it's a pretty",
    "start": "1467919",
    "end": "1475360"
  },
  {
    "text": "effective model already right especially if you can name your members left and right but the other problem is that they're",
    "start": "1475360",
    "end": "1481679"
  },
  {
    "text": "public and nasty and you also need to do gats because they're unique pointers",
    "start": "1481679",
    "end": "1487640"
  },
  {
    "text": "but overall it doesn't look too different so you get the left and right the",
    "start": "1490720",
    "end": "1496559"
  },
  {
    "text": "there's it feels like there's a temperature mismatch right because in here we have the mod 2",
    "start": "1496559",
    "end": "1502080"
  },
  {
    "text": "and when you you recurs you get the depth plus one right",
    "start": "1502080",
    "end": "1506799"
  },
  {
    "text": "what i find interesting is that this the view it models all of the",
    "start": "1508320",
    "end": "1513600"
  },
  {
    "text": "properties of the tree so when you're at any node in a tree you have a left a",
    "start": "1513600",
    "end": "1518960"
  },
  {
    "text": "binary tree specifically you have a left child and a right child right that's what that what makes it a tree",
    "start": "1518960",
    "end": "1525840"
  },
  {
    "text": "and you can descend there but you can't really go up okay",
    "start": "1526320",
    "end": "1532559"
  },
  {
    "text": "so i integrated the depth into the view",
    "start": "1532559",
    "end": "1537919"
  },
  {
    "text": "right which took out a parameter for the query query by the way is the just the name of",
    "start": "1537919",
    "end": "1543120"
  },
  {
    "text": "the neighbors in radius search i stole the name from scipy who have a kdt implementation and",
    "start": "1543120",
    "end": "1548880"
  },
  {
    "text": "they use the word query for this search this is actually much easier to use",
    "start": "1548880",
    "end": "1554720"
  },
  {
    "text": "because now you don't have to manually keep track of the depth which you really only use to get the axis anyway",
    "start": "1554720",
    "end": "1561200"
  },
  {
    "text": "and guess who forgot to forgot to implement depth once",
    "start": "1561200",
    "end": "1566880"
  },
  {
    "text": "that would be me yeah automation i don't think there's an abstraction by in",
    "start": "1566880",
    "end": "1572480"
  },
  {
    "text": "getting the depth in there but it is automation and automation can be very useful it gets a little bit better when you",
    "start": "1572480",
    "end": "1577840"
  },
  {
    "text": "integrate the axis in there right so i think this is pretty easy to follow",
    "start": "1577840",
    "end": "1585039"
  },
  {
    "text": "too it's pretty pretty neat",
    "start": "1585039",
    "end": "1589360"
  },
  {
    "text": "and more importantly i think it sufficiently well models the essence of what a tree is right",
    "start": "1590960",
    "end": "1598600"
  },
  {
    "text": "okay so begin and then mod well so just to really dry that point home on modeling the three properties you have",
    "start": "1600880",
    "end": "1607120"
  },
  {
    "text": "your left and right subtree you capture the depth somehow and you capture the fact that i know it is a leaf or not",
    "start": "1607120",
    "end": "1616240"
  },
  {
    "text": "okay so let's talk about its representation",
    "start": "1616720",
    "end": "1620399"
  },
  {
    "text": "oh yeah by the way this is actually a very effective abstraction because after i did that presentation or that",
    "start": "1622080",
    "end": "1627840"
  },
  {
    "text": "implementation i never touched query again through all of the redesigns okay so the query algorithm stayed unchanged",
    "start": "1627840",
    "end": "1635520"
  },
  {
    "text": "which is also very good for verifying and testing okay",
    "start": "1635520",
    "end": "1641520"
  },
  {
    "text": "so this is what it looks like now right with the unique pointer the left and right and some point",
    "start": "1641520",
    "end": "1647679"
  },
  {
    "text": "and you get the whole tree by chasing the pointers",
    "start": "1647679",
    "end": "1653240"
  },
  {
    "text": "is a problem here though because i mean it's very slow it's linear in the number of points in heap allocations",
    "start": "1654080",
    "end": "1660720"
  },
  {
    "text": "and it's just pointer chasing all over and it doesn't feel very cohesive even",
    "start": "1660720",
    "end": "1669279"
  },
  {
    "text": "so i managed to bond it onto the problem is that every node is treated individually",
    "start": "1669279",
    "end": "1676000"
  },
  {
    "text": "but and in carmen in computer science that is true and like any subtree is a valid subtree",
    "start": "1676000",
    "end": "1682720"
  },
  {
    "text": "you can in theory pull it out you right all of that in practice that isn't a very useful property when you're writing",
    "start": "1682720",
    "end": "1688720"
  },
  {
    "text": "programs and you should consider this kind of like a collection right a collection in the vector or map sense",
    "start": "1688720",
    "end": "1695919"
  },
  {
    "text": "set so point to base trees are good for a lot of reasons and when you need these",
    "start": "1695919",
    "end": "1701200"
  },
  {
    "text": "properties of course you go for the pointer base right because they support fast splicing so you just have two trees and you",
    "start": "1701200",
    "end": "1707760"
  },
  {
    "text": "chuck them together by having some leaf point now or make one of the",
    "start": "1707760",
    "end": "1714880"
  },
  {
    "text": "leafs children point to the root of the other tree or something but splicing would invalidate a variant",
    "start": "1714880",
    "end": "1721360"
  },
  {
    "text": "in a part of space partitioning tree like this right and it gives all kinds of live lifetime",
    "start": "1721360",
    "end": "1726960"
  },
  {
    "text": "issues because who now owns the sub tree can it still be used independently or not right the view by the way captures",
    "start": "1726960",
    "end": "1732720"
  },
  {
    "text": "that if you give someone a view to a subtree they will think it's the full tree and it will behave like in corman",
    "start": "1732720",
    "end": "1739679"
  },
  {
    "text": "and i would argue that three merges aren't very common like your point set is probably pretty static so you build",
    "start": "1739679",
    "end": "1746320"
  },
  {
    "text": "your tree once and then you do repeated queries on that and and it comes down to this treating",
    "start": "1746320",
    "end": "1752640"
  },
  {
    "text": "the nose as independent under part of the collection uh casey muratory of um handmade hero and molly rocket fame",
    "start": "1752640",
    "end": "1760559"
  },
  {
    "text": "uh can he rants for days on this and if you find that video i recommend you see it so i changed it to this right this is",
    "start": "1760559",
    "end": "1767919"
  },
  {
    "text": "the simplest mechan uh like simplest most obvious mechanical transformation that you can do",
    "start": "1767919",
    "end": "1773840"
  },
  {
    "text": "to make it into a collection right so you have to use the array unique pointer here",
    "start": "1773840",
    "end": "1780399"
  },
  {
    "text": "and this basically makes the kd tree thing a handle to some heap tree right",
    "start": "1780399",
    "end": "1786158"
  },
  {
    "text": "you have to use the unique pointer because this is not a fully specified type yet",
    "start": "1787600",
    "end": "1794440"
  },
  {
    "text": "and well and every node has your left and right subtree but now has raw pointers and not as owning pointers",
    "start": "1795200",
    "end": "1802080"
  },
  {
    "text": "and then you allocate an array that's big enough and you just store all the nodes in there",
    "start": "1802080",
    "end": "1808279"
  },
  {
    "text": "this goes a long way so construction cost just floored from that",
    "start": "1809840",
    "end": "1816000"
  },
  {
    "text": "it's still not very good but it's a huge improvement but once you're here you notice",
    "start": "1816000",
    "end": "1821440"
  },
  {
    "text": "that you can do more and i i think there is this idea that improvements enable new improvements so",
    "start": "1821440",
    "end": "1828159"
  },
  {
    "text": "even though something immediately doesn't make it better it can make it easier to make the next step which will make it significantly better and as i",
    "start": "1828159",
    "end": "1834799"
  },
  {
    "text": "you pull out the node type and really make the handle distinct from the node",
    "start": "1834799",
    "end": "1840000"
  },
  {
    "text": "so this node type actually now they're all known owning pointers because they know that they will be",
    "start": "1840000",
    "end": "1845679"
  },
  {
    "text": "backed by some proper storage right and then you store the node in",
    "start": "1845679",
    "end": "1853200"
  },
  {
    "text": "in the array instead so first of all this is a huge performance improvement on destruction",
    "start": "1853200",
    "end": "1858640"
  },
  {
    "text": "because now you don't need to check the storage pointer being null every time",
    "start": "1858640",
    "end": "1863679"
  },
  {
    "text": "and it's a 10 time performance in destruction which is pretty amazing",
    "start": "1863679",
    "end": "1869679"
  },
  {
    "text": "and it also actually makes the total memory pressure slightly lower because you're storing one less pointer in the",
    "start": "1869679",
    "end": "1875279"
  },
  {
    "text": "structure that is repeated right and now we're getting somewhere",
    "start": "1875279",
    "end": "1882080"
  },
  {
    "text": "okay but this still feels kind of off right because now we're seeing that we",
    "start": "1884720",
    "end": "1889919"
  },
  {
    "text": "have this handle and then the nodes the tree itself are they're distinct right it's not the same type anymore",
    "start": "1889919",
    "end": "1896320"
  },
  {
    "text": "really this is feeling more and more like a collection like vector",
    "start": "1896320",
    "end": "1902158"
  },
  {
    "text": "in the fairy tales all things come in tree right so uh hood she always asks three questions",
    "start": "1904720",
    "end": "1910799"
  },
  {
    "text": "right or she was given three directions rather and you come closer so i can see you",
    "start": "1910799",
    "end": "1917679"
  },
  {
    "text": "better and then she gets eaten um that applies in c plus plus two and i",
    "start": "1917679",
    "end": "1922799"
  },
  {
    "text": "think the fundamental problem with the previous implementation is that you can't copy it",
    "start": "1922799",
    "end": "1927840"
  },
  {
    "text": "because you want your containers your types really to be unless there is a",
    "start": "1927840",
    "end": "1934640"
  },
  {
    "text": "really really good reason not to to be the full constructable copy constructable and move constructable and",
    "start": "1934640",
    "end": "1939840"
  },
  {
    "text": "sometimes there are semantical reasons why that doesn't make sense that you want to actually prohibit some of these",
    "start": "1939840",
    "end": "1945039"
  },
  {
    "text": "operations but for the most part you want this to be true right and a good example why is that then you can put it into other containers again",
    "start": "1945039",
    "end": "1951440"
  },
  {
    "text": "you can have collections of them this is our situation now because the",
    "start": "1951440",
    "end": "1957120"
  },
  {
    "text": "unique pointer deletes the copy constructor because it's unique right",
    "start": "1957120",
    "end": "1963840"
  },
  {
    "text": "and that brings us to the rule of three this data study for class requires a user defined destructor user",
    "start": "1966159",
    "end": "1972559"
  },
  {
    "text": "defined copy constructor or user defined assignment copy assignment operator it almost certainly requires all three",
    "start": "1972559",
    "end": "1980000"
  },
  {
    "text": "okay well now we need our custom copy constructor",
    "start": "1980000",
    "end": "1986720"
  },
  {
    "text": "so we write one it's pretty okay counter nodes",
    "start": "1986720",
    "end": "1993440"
  },
  {
    "text": "in the copy you allocate a new array that's the right size and then you just copy the nodes",
    "start": "1993440",
    "end": "2002200"
  },
  {
    "text": "oops this doesn't work now this doesn't work because we have a",
    "start": "2005519",
    "end": "2012480"
  },
  {
    "text": "lot of pointers in the tree and all of these so this is what it",
    "start": "2012480",
    "end": "2017919"
  },
  {
    "text": "looks like if you just take the same tree but you don't consider all the values but you consider the left and right child slots pointers right this is",
    "start": "2017919",
    "end": "2025440"
  },
  {
    "text": "actually a much better representation of trees i don't know why the wiki doesn't use that again i should maybe actually contribute it",
    "start": "2025440",
    "end": "2031360"
  },
  {
    "text": "because it makes it much easier to follow",
    "start": "2031360",
    "end": "2034880"
  },
  {
    "text": "if you take that tree and you just basically stretch it out as it is represented now in memory which because it's just a contiguous array right it",
    "start": "2038240",
    "end": "2044559"
  },
  {
    "text": "looks like this and i've drawn in the pointers for convenience and if you copy this",
    "start": "2044559",
    "end": "2051358"
  },
  {
    "text": "where do the pointers go they still go back to the original structure right",
    "start": "2051359",
    "end": "2057440"
  },
  {
    "text": "so just copying something like that naively is tempting but it will crash hopefully",
    "start": "2057440",
    "end": "2063839"
  },
  {
    "text": "hopefully so you need to do something more and you get end up with this monstrosity right",
    "start": "2063839",
    "end": "2070638"
  },
  {
    "text": "so the first three lines are still the same but then you have to run this loop",
    "start": "2070639",
    "end": "2075679"
  },
  {
    "text": "through all the nodes to fix the pointers so they point into the copies that are in the new structure rather",
    "start": "2075679",
    "end": "2081679"
  },
  {
    "text": "than into the original right so make sense it is",
    "start": "2081679",
    "end": "2087520"
  },
  {
    "text": "very ugly it's very ugly and i didn't want to do that and this is",
    "start": "2087520",
    "end": "2094320"
  },
  {
    "text": "something this this feels wrong right if you if you have to write this this feels wrong it says something else is",
    "start": "2094320",
    "end": "2099839"
  },
  {
    "text": "triggering because right now it's required but we don't want to be in a situation where this is required right",
    "start": "2099839",
    "end": "2106160"
  },
  {
    "text": "i haven't mentioned anything about the assignment operator and destructor",
    "start": "2108160",
    "end": "2113200"
  },
  {
    "text": "but if you do this you don't really have to define them and the wording of the",
    "start": "2113200",
    "end": "2119599"
  },
  {
    "text": "rule of three is that it almost certainly require all three in this case you can still derive them",
    "start": "2120720",
    "end": "2126800"
  },
  {
    "text": "because we're really delegating all the memory work to unique pointer anyway right",
    "start": "2126800",
    "end": "2132559"
  },
  {
    "text": "so i think actually the rule of three and three in that sense is pretty outdated for practical purposes",
    "start": "2133520",
    "end": "2139359"
  },
  {
    "text": "we have the rule of zero and the rule is here says that classes that do have custom destructors copy",
    "start": "2139359",
    "end": "2145520"
  },
  {
    "text": "move constructors or copy move assignment operators they should deal exclusively with ownership",
    "start": "2145520",
    "end": "2151599"
  },
  {
    "text": "pretty much what's that means that if you have to if you have to do anything that deals",
    "start": "2153599",
    "end": "2158960"
  },
  {
    "text": "with ownership that's the only thing you should do you should factor it out and only deal with them unique pointer is an excellent example of a class that does",
    "start": "2158960",
    "end": "2166160"
  },
  {
    "text": "nothing but deal with ownership i have to embarrassingly admit that i",
    "start": "2166160",
    "end": "2172480"
  },
  {
    "text": "wrote that at some point now and it made me reflect a little bit because i realized that a lot of the",
    "start": "2172480",
    "end": "2179680"
  },
  {
    "text": "techniques and a lot of things that i did when i was experimenting and learning about this tree and using it as",
    "start": "2179680",
    "end": "2185200"
  },
  {
    "text": "playing around for um well experimentation",
    "start": "2185200",
    "end": "2191440"
  },
  {
    "text": "i wrote a lot of code as i would have done 10 years ago but with slightly slightly different",
    "start": "2191440",
    "end": "2197359"
  },
  {
    "text": "assumptions and it actually ended up not being so bad the kd3 is technically a binary tree but",
    "start": "2197359",
    "end": "2204240"
  },
  {
    "text": "it really stops there they don't have any operations in common and their you know external semantics are quite",
    "start": "2204240",
    "end": "2209520"
  },
  {
    "text": "different so i think the inheritance thing here is still nonsense don't worry about that",
    "start": "2209520",
    "end": "2215520"
  },
  {
    "text": "but you can design this generic binary tree storage thing that",
    "start": "2215520",
    "end": "2220640"
  },
  {
    "text": "works because the structure is then imposed on where do the edges actually go so in",
    "start": "2220640",
    "end": "2226079"
  },
  {
    "text": "what order right i ended up with something that looks like this right so instead of doing the",
    "start": "2226079",
    "end": "2232079"
  },
  {
    "text": "inheritance you do the composition right so i have to generally just tree storage to maybe binary storage",
    "start": "2232079",
    "end": "2238640"
  },
  {
    "text": "and i supply the node type okay i i'm not gonna go through the",
    "start": "2238640",
    "end": "2244000"
  },
  {
    "text": "implementation but it does the same fix up thing in the copy constructor so i just moved it out there",
    "start": "2244000",
    "end": "2251040"
  },
  {
    "text": "this is what it looks like now notice also i'm using vector of nodes rather than",
    "start": "2251040",
    "end": "2256800"
  },
  {
    "text": "the array unique pointer to array and then pretty much just delegating the",
    "start": "2256800",
    "end": "2262640"
  },
  {
    "text": "work of actually copying to the vector it's great so this works okay so now just generic",
    "start": "2262640",
    "end": "2269040"
  },
  {
    "text": "tree storage that does the fixing of the copies right",
    "start": "2269040",
    "end": "2275760"
  },
  {
    "text": "oh sorry the fixing of the pointer's post copy so let's talk about pointers",
    "start": "2277119",
    "end": "2283559"
  },
  {
    "text": "can anyone tell what that is it's not a trick question",
    "start": "2285119",
    "end": "2291200"
  },
  {
    "text": "okay so it's a ball right technically it's handle bars and a seat",
    "start": "2291200",
    "end": "2296720"
  },
  {
    "text": "from a bike but it's a bull it depicts a ball and you can tell and feel it's a bull even",
    "start": "2296720",
    "end": "2302240"
  },
  {
    "text": "though it looks nothing like a ball but it has managed to capture the",
    "start": "2302240",
    "end": "2308480"
  },
  {
    "text": "essence now what are the essential properties of a pointers right",
    "start": "2308480",
    "end": "2314880"
  },
  {
    "text": "well they're absolute addresses they have",
    "start": "2314880",
    "end": "2320000"
  },
  {
    "text": "support for arithmetic they carry some type information unless it's void which is also carrying type",
    "start": "2320000",
    "end": "2325839"
  },
  {
    "text": "information and you can mark them as sort of unset you have this special sentiment value",
    "start": "2325839",
    "end": "2330960"
  },
  {
    "text": "and then no point no pointer okay",
    "start": "2330960",
    "end": "2335920"
  },
  {
    "text": "which properties do we really use in this case well turns out we don't really use",
    "start": "2337520",
    "end": "2343920"
  },
  {
    "text": "anything um we don't oh sorry we don't use the",
    "start": "2343920",
    "end": "2349599"
  },
  {
    "text": "arithmetic support really we don't really use the type information we",
    "start": "2349599",
    "end": "2354640"
  },
  {
    "text": "do work because they're absolute addresses right",
    "start": "2354640",
    "end": "2360079"
  },
  {
    "text": "what we do use is the onset so i came up with this",
    "start": "2360079",
    "end": "2366560"
  },
  {
    "text": "what if you instead of storing pointers which are absolute addresses and has to be fixed up",
    "start": "2366560",
    "end": "2372160"
  },
  {
    "text": "you store offsets instead this is fortran right this is what you would do in fortran this is one of the reasons",
    "start": "2372160",
    "end": "2377520"
  },
  {
    "text": "why reading and dealing with fortran is absolutely miserable and it's a fantastic technique that is",
    "start": "2377520",
    "end": "2382720"
  },
  {
    "text": "making a comeback so what i did was i i allocated instead of",
    "start": "2382720",
    "end": "2388320"
  },
  {
    "text": "one array i allocated three arrays or vectors right so one for the points one for the left edges and one for the right",
    "start": "2388320",
    "end": "2394240"
  },
  {
    "text": "edges and now you see you have this nice column right so on top you have the tree but stretched out as it would be in",
    "start": "2394240",
    "end": "2400000"
  },
  {
    "text": "memory and then [Music] you can sort if you read the column so",
    "start": "2400000",
    "end": "2406640"
  },
  {
    "text": "you take the first one you see 72 has two children one is at index one one is at index four and you can see the",
    "start": "2406640",
    "end": "2414240"
  },
  {
    "text": "arrows at the bottom they're the left children the arrows on the top are the right children so in the same form the five four it",
    "start": "2414240",
    "end": "2421359"
  },
  {
    "text": "goes to two and three and minus one just means unset right",
    "start": "2421359",
    "end": "2426720"
  },
  {
    "text": "null pointer now what happens",
    "start": "2426720",
    "end": "2432640"
  },
  {
    "text": "to the copy copy disappears",
    "start": "2432640",
    "end": "2439040"
  },
  {
    "text": "because relative addresses are portable it doesn't matter where your structure",
    "start": "2439040",
    "end": "2444640"
  },
  {
    "text": "lives because all the addresses are relative so you don't even need the tree storage",
    "start": "2444640",
    "end": "2449680"
  },
  {
    "text": "which you know is reasonably okay but it was still a mess right so now you have three vectors left right",
    "start": "2449680",
    "end": "2456000"
  },
  {
    "text": "and storage and that's it it's super easy to copy",
    "start": "2456000",
    "end": "2461599"
  },
  {
    "text": "super easy to i mean it's relocatable it's cheap to copy and it's easy to serialize that too is a pretty underrated property because now you can",
    "start": "2461599",
    "end": "2468000"
  },
  {
    "text": "actually send your tree pre-computed on over the wire through just",
    "start": "2468000",
    "end": "2473040"
  },
  {
    "text": "any serialization mechanism you'd like because the addresses are relative",
    "start": "2473040",
    "end": "2478880"
  },
  {
    "text": "just for reference this is what now what the left implementation and right would be the same way looks like",
    "start": "2479119",
    "end": "2485920"
  },
  {
    "text": "in the view right you just look it up in the left array at whatever position you're at",
    "start": "2485920",
    "end": "2491040"
  },
  {
    "text": "and then you make a new view for that child pass it on",
    "start": "2491040",
    "end": "2497520"
  },
  {
    "text": "okay so this is what it looks like",
    "start": "2497520",
    "end": "2502078"
  },
  {
    "text": "it's um it has a default constructor it has the copy constructor and it has",
    "start": "2502560",
    "end": "2509200"
  },
  {
    "text": "the move constructor and they're all defaulted i actually you don't have to even specify them but i included them just to be clear",
    "start": "2509200",
    "end": "2515760"
  },
  {
    "text": "right okay",
    "start": "2515760",
    "end": "2520800"
  },
  {
    "text": "yay so let's start gazing into the abyss",
    "start": "2520800",
    "end": "2526880"
  },
  {
    "text": "i stole this quote from tony who should have been here but unfortunately isn't tony fanart he",
    "start": "2528000",
    "end": "2534640"
  },
  {
    "text": "made i think maybe this he did a talk two years ago called words of wisdom but",
    "start": "2534640",
    "end": "2539920"
  },
  {
    "text": "i don't think this is from that one but it's it's it's pretty good advice is the abstraction does not stop at the",
    "start": "2539920",
    "end": "2545359"
  },
  {
    "text": "class boundary so i figured yeah gotta get me some of that so i replaced uh this is still in",
    "start": "2545359",
    "end": "2552160"
  },
  {
    "text": "the construction i replaced the um axis less sort nonsense between new",
    "start": "2552160",
    "end": "2558640"
  },
  {
    "text": "private methods right select pivot and partition in place",
    "start": "2558640",
    "end": "2565040"
  },
  {
    "text": "partitioning place because i don't want to actually have to make the copy and you know shuffle about because there's a huge cost for no reason",
    "start": "2565040",
    "end": "2571599"
  },
  {
    "text": "and this is only done during construction anyway if you put all that together and you look at the method or the full",
    "start": "2571599",
    "end": "2578319"
  },
  {
    "text": "definition of the construction it looks like this right so you select",
    "start": "2578319",
    "end": "2583599"
  },
  {
    "text": "the pivot right and you partition it in place and then you populate the left and right subtree",
    "start": "2583599",
    "end": "2590160"
  },
  {
    "text": "based on whatever you have left in your input right",
    "start": "2590160",
    "end": "2594240"
  },
  {
    "text": "i think it's pretty good because it does communicate the intent first of all this looks almost exactly like the python",
    "start": "2596560",
    "end": "2601839"
  },
  {
    "text": "thing or sorry the pseudocode thing from wiki that we had 30 slides back",
    "start": "2601839",
    "end": "2608480"
  },
  {
    "text": "more importantly you really have the intent instead of you know creating a lambda with some sorting and",
    "start": "2608480",
    "end": "2614160"
  },
  {
    "text": "and then doing some sorting and just picking some random element now you actually get what we're trying to accomplish right on top of that what i",
    "start": "2614160",
    "end": "2621200"
  },
  {
    "text": "think is good is it makes it much easier to play with alternatives so i did this",
    "start": "2621200",
    "end": "2626960"
  },
  {
    "text": "i'm not very proud of it so you see what's going on here",
    "start": "2626960",
    "end": "2632400"
  },
  {
    "text": "so less is it's the same lambda but done manually",
    "start": "2632400",
    "end": "2638960"
  },
  {
    "text": "and the reason i do that is because of this disgusting array",
    "start": "2638960",
    "end": "2645359"
  },
  {
    "text": "um in init less so i basically i pre-compute the lambdas or the the",
    "start": "2645359",
    "end": "2650800"
  },
  {
    "text": "comparison functions that would give me the sort right and then i just pick the one by looking",
    "start": "2650800",
    "end": "2656319"
  },
  {
    "text": "up into the array on the second to last line right",
    "start": "2656319",
    "end": "2662520"
  },
  {
    "text": "but you still need to initialize this at compile time and that's not so pretty either",
    "start": "2663760",
    "end": "2669760"
  },
  {
    "text": "it looks like this i'm not i'm not very proud of that",
    "start": "2669760",
    "end": "2674880"
  },
  {
    "text": "so i measured it and this is a fascination it makes it slower",
    "start": "2675359",
    "end": "2680799"
  },
  {
    "text": "which makes me very happy because then i definitely don't have to do it um i can only guess that it's because now",
    "start": "2681520",
    "end": "2688000"
  },
  {
    "text": "the it has to look up the numbers from memory rather than just injecting them into the instruction stream",
    "start": "2688000",
    "end": "2695119"
  },
  {
    "text": "but it gets a little bit scarier because what you can do",
    "start": "2697280",
    "end": "2701279"
  },
  {
    "text": "is to move the axis parameter uh into a non-type template parameter",
    "start": "2702319",
    "end": "2710799"
  },
  {
    "text": "so this is sort of the compile time resolution of the same lambda there's a slight slight speed up in that but not",
    "start": "2712240",
    "end": "2718160"
  },
  {
    "text": "worth and also it increases the size of the binder a bit so probably not worth doing either",
    "start": "2718160",
    "end": "2725119"
  },
  {
    "text": "but now that you're here right you can start playing with more alternatives because you can do",
    "start": "2725680",
    "end": "2730880"
  },
  {
    "text": "dependency injection and strategies right so i made a strategy where the i",
    "start": "2730880",
    "end": "2737040"
  },
  {
    "text": "actually took the same select pivot and uh partition in place",
    "start": "2737040",
    "end": "2743440"
  },
  {
    "text": "and you pass this as a class a template parameter to the class so that you can basically from the outside",
    "start": "2744160",
    "end": "2750640"
  },
  {
    "text": "um you can do basically the wiring from the outside on how to select the pivot and how to partition you need both of them",
    "start": "2750640",
    "end": "2756960"
  },
  {
    "text": "to be in the same strategy because what you do with partitioning depends on whether or not for instance you sort",
    "start": "2756960",
    "end": "2762480"
  },
  {
    "text": "internally in the in the select so select can do it through sorting in which case",
    "start": "2762480",
    "end": "2768400"
  },
  {
    "text": "you don't want the partition to do any work",
    "start": "2768400",
    "end": "2773319"
  },
  {
    "text": "but i have to say i wouldn't recommend actually doing this because i started thinking about it and there are tons of variations on the kd",
    "start": "2774880",
    "end": "2781280"
  },
  {
    "text": "trees for instance what you can do is you can take a trick from the b plus tree and instead of in every node",
    "start": "2781280",
    "end": "2787040"
  },
  {
    "text": "storage is one point you can store a block of points right and there are many variations or you can",
    "start": "2787040",
    "end": "2793280"
  },
  {
    "text": "instead of just doing mods depth to get the axis you can if",
    "start": "2793280",
    "end": "2798800"
  },
  {
    "text": "you know that you for instance going to have much more like you're going to have a very flat but very you know wide",
    "start": "2798800",
    "end": "2805200"
  },
  {
    "text": "spread out set of points it might be an idea to partition twice on the x-axis and one on the y-axis",
    "start": "2805200",
    "end": "2812160"
  },
  {
    "text": "right but this is not much easier to do because you've",
    "start": "2812160",
    "end": "2818880"
  },
  {
    "text": "um you you pulled out and you so this was",
    "start": "2818880",
    "end": "2824000"
  },
  {
    "text": "i'm very this is i wouldn't have thought of doing that unless i already written the",
    "start": "2824000",
    "end": "2829119"
  },
  {
    "text": "selective one partition in place as helpers right so abstraction really does not stop at the class boundary also i",
    "start": "2829119",
    "end": "2835040"
  },
  {
    "text": "find that is a pretty good technique because once you get a collection of private methods that really only touch the same data and they are no they're",
    "start": "2835040",
    "end": "2841760"
  },
  {
    "text": "never touched outside of those that's a pretty good hint that you can take that and extract it out anyway",
    "start": "2841760",
    "end": "2848079"
  },
  {
    "text": "because it's almost independent of the rest of your class and you can treat it as a",
    "start": "2848079",
    "end": "2853760"
  },
  {
    "text": "non-private dependency rather right so that's a pretty cool trick for identifying",
    "start": "2853760",
    "end": "2860400"
  },
  {
    "text": "what to pull out of your big type and that's where i stopped",
    "start": "2860960",
    "end": "2867440"
  },
  {
    "text": "so you can go you can do many things from here but this is where i chose to stop",
    "start": "2867440",
    "end": "2873440"
  },
  {
    "text": "um but i'm very happy because i got to learn about the kd's kd tree it's a great structure you can use so many",
    "start": "2873440",
    "end": "2879520"
  },
  {
    "text": "things with it and just being aware of it has made me realize there are a lot of problems that",
    "start": "2879520",
    "end": "2885040"
  },
  {
    "text": "i can you know solve with it and figure out how to weave into",
    "start": "2885040",
    "end": "2890960"
  },
  {
    "text": "so overall it's been a very good experience for me it's been a very rewarding journey",
    "start": "2890960",
    "end": "2896240"
  },
  {
    "text": "and i've had a lot of fun playing with code right",
    "start": "2896240",
    "end": "2901838"
  },
  {
    "text": "there are some more fun experiments that i might figure out to do in the future actually i did one of those so what you",
    "start": "2902400",
    "end": "2907440"
  },
  {
    "text": "can do is you can do implicit edge representation so instead of keeping an array of left and right",
    "start": "2907440",
    "end": "2913119"
  },
  {
    "text": "you can if you if you carefully for instance left balance your tree you can do the implement uh the",
    "start": "2913119",
    "end": "2918720"
  },
  {
    "text": "the um indexing trick from heaps where your root is on index zero your left and right child are on one and two",
    "start": "2918720",
    "end": "2925839"
  },
  {
    "text": "the left's children are on three and four the right children are on five and six and so on right and you can use that",
    "start": "2925839",
    "end": "2933040"
  },
  {
    "text": "so i did that that makes it very easy to copy obviously because it's just one big array uh you",
    "start": "2933040",
    "end": "2938400"
  },
  {
    "text": "don't have to deal with double lookups anymore so it could be faster for some cases but now it forces you to have a",
    "start": "2938400",
    "end": "2943680"
  },
  {
    "text": "very specific balancing to work i would implement some more search",
    "start": "2943680",
    "end": "2949040"
  },
  {
    "text": "algorithms so obviously now i only did that in radius which also takes it down from being",
    "start": "2949040",
    "end": "2955359"
  },
  {
    "text": "squared to so every look up here is logarithmic obviously because it's binary tree which",
    "start": "2955359",
    "end": "2962319"
  },
  {
    "text": "assuming it's well balanced you can do more interesting pivot selections so one technique i know is",
    "start": "2962319",
    "end": "2968240"
  },
  {
    "text": "pretty common that gives reasonably balanced reading on average is to just sample a set amount",
    "start": "2968240",
    "end": "2973839"
  },
  {
    "text": "of nodes or values you picked a median of that",
    "start": "2973839",
    "end": "2979520"
  },
  {
    "text": "and now that's your partition key right uh and also other fun representations",
    "start": "2979520",
    "end": "2985280"
  },
  {
    "text": "like bigger block sizes um maybe even varying but you need to be careful because the view in in my case",
    "start": "2985280",
    "end": "2991920"
  },
  {
    "text": "has to match it has to be aware of how the tree is constructed right but that's the",
    "start": "2991920",
    "end": "2996960"
  },
  {
    "text": "relationship you need so i would like to end on this note is that as granny sewed the bloody wolf",
    "start": "2996960",
    "end": "3003680"
  },
  {
    "text": "pelt onto this stained red cape little red down another shot reminding",
    "start": "3003680",
    "end": "3009119"
  },
  {
    "text": "yourself that even alcohol has a better taste than a gastric acid or a wolf it's from the same competition",
    "start": "3009119",
    "end": "3015359"
  },
  {
    "text": "thank you [Applause]",
    "start": "3015359",
    "end": "3024960"
  },
  {
    "text": "i'm happy today questions if there are any if not we can go have some coffee",
    "start": "3024960",
    "end": "3030720"
  },
  {
    "text": "all right thank you",
    "start": "3031839",
    "end": "3036520"
  }
]