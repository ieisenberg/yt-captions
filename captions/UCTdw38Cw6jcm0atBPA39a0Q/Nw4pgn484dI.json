[
  {
    "text": "oh good well hello welcome to my talk secrets of",
    "start": "179",
    "end": "5339"
  },
  {
    "text": "building robust UI components first of all hello Oslo hey hey Oslo",
    "start": "5339",
    "end": "12000"
  },
  {
    "text": "how's it going who is from here actually wow it's about 40 who is from Euro",
    "start": "12000",
    "end": "21439"
  },
  {
    "text": "well the same who is from outside Europe oh it's amazing one one person",
    "start": "21840",
    "end": "29099"
  },
  {
    "text": "cool yeah thank you for being here um it's my second time actually in Oslo",
    "start": "29099",
    "end": "34920"
  },
  {
    "text": "so although I have to admit I have to leave just right after after this talk foreign company offset",
    "start": "34920",
    "end": "41040"
  },
  {
    "text": "um I'm excited still to be here and meet you here at the conference so before I start",
    "start": "41040",
    "end": "46559"
  },
  {
    "text": "um I'd like to quickly introduce myself my name is Glenn I'm based in Vienna",
    "start": "46559",
    "end": "51780"
  },
  {
    "text": "Austria I'm a developer relations engineer at Cadena which is a new york-based multi-chain blockchain",
    "start": "51780",
    "end": "58860"
  },
  {
    "text": "company so I'm super thrilled to be there uh to advance their front-end and",
    "start": "58860",
    "end": "63899"
  },
  {
    "text": "react ecosystem and uh yeah you can find me at Glen Reyes but without the Ease on on pretty",
    "start": "63899",
    "end": "70979"
  },
  {
    "text": "much all the social media channels including Twitter LinkedIn uh Instagram",
    "start": "70979",
    "end": "76020"
  },
  {
    "text": "wherever now yeah that's talk about",
    "start": "76020",
    "end": "81840"
  },
  {
    "text": "building uis so personally I've always found billing your eyes like a super super positive",
    "start": "81840",
    "end": "89100"
  },
  {
    "text": "and challenging task to do so for me building uis is super super",
    "start": "89100",
    "end": "94619"
  },
  {
    "text": "fun and enjoyable uh thing to work on",
    "start": "94619",
    "end": "99720"
  },
  {
    "text": "but at the same time like building robust uis is like hard right so and it's similar it's similar to things",
    "start": "99720",
    "end": "106079"
  },
  {
    "text": "where I'm like oh yeah I want to create this app and then I want to create that app and maybe uh maybe maybe create a",
    "start": "106079",
    "end": "112439"
  },
  {
    "text": "video out of that or maybe uh oh I I I I missed to play this I missed to play the",
    "start": "112439",
    "end": "117479"
  },
  {
    "text": "guitar and then maybe why not write a song like like creating a song is nice right so it's so beautiful everything",
    "start": "117479",
    "end": "123020"
  },
  {
    "text": "but you know once you are forced uh to give more thoughts and effort into",
    "start": "123020",
    "end": "128459"
  },
  {
    "text": "something um it's like it's like not just making uis but like like making thoughtfully",
    "start": "128459",
    "end": "134400"
  },
  {
    "text": "robust uis and then there's a bunch of you know of challenges to think of",
    "start": "134400",
    "end": "140340"
  },
  {
    "text": "so maybe let's take a step back and begin with the definition of robust so what is robust so first thing I did was",
    "start": "140340",
    "end": "147599"
  },
  {
    "text": "yeah let's ask Chaturbate what's what she said so yeah basically this",
    "start": "147599",
    "end": "153060"
  },
  {
    "text": "um but I thought it was a little bit too long so you don't have to read it right now but I highlight the key things out",
    "start": "153060",
    "end": "158879"
  },
  {
    "text": "of that um and so put it all together it's basically what makes using faces robust",
    "start": "158879",
    "end": "165420"
  },
  {
    "text": "are in fact reliability stability and both together under a wider range of",
    "start": "165420",
    "end": "171959"
  },
  {
    "text": "different conditions consistency of user experience and performance",
    "start": "171959",
    "end": "178340"
  },
  {
    "text": "so building you use interfaces come with like certain foundations so to me I think um what makes me feel really",
    "start": "178560",
    "end": "185400"
  },
  {
    "text": "comfortable and productive is to start to start building your eyes is",
    "start": "185400",
    "end": "190980"
  },
  {
    "text": "by getting first the right Tools in place and then uh you want to have the theming",
    "start": "190980",
    "end": "197340"
  },
  {
    "text": "and design system specified and then you want to have some key strategies and approaches of actually",
    "start": "197340",
    "end": "204239"
  },
  {
    "text": "building them now let's talk a bit about the tooling",
    "start": "204239",
    "end": "209340"
  },
  {
    "text": "first so before we start building something of course we need tools right and we don't we don't not we don't need",
    "start": "209340",
    "end": "216420"
  },
  {
    "text": "only just like you know just any tools but we need like good tools and we need the right tools",
    "start": "216420",
    "end": "221819"
  },
  {
    "text": "but ideally we have the best tools that we can ever get so the better the tools",
    "start": "221819",
    "end": "227340"
  },
  {
    "text": "are the better the developer experience will be and therefore the better quality output we will get so this is like the",
    "start": "227340",
    "end": "233519"
  },
  {
    "text": "really really Foundation that we want to have at the beginning before we start anything",
    "start": "233519",
    "end": "238680"
  },
  {
    "text": "so better tooling help us move faster and with the most uh reliability",
    "start": "238680",
    "end": "243780"
  },
  {
    "text": "possible and we don't only need tooling to help our code base um you know keep our code Base clean",
    "start": "243780",
    "end": "251340"
  },
  {
    "text": "but also keep our copies clean without much extra work from us developers",
    "start": "251340",
    "end": "256560"
  },
  {
    "text": "required so anything that can be automated or are fixed without us requiring to do anything are such like",
    "start": "256560",
    "end": "263520"
  },
  {
    "text": "super foundational things to help us achieve building more robust uh interfaces",
    "start": "263520",
    "end": "268860"
  },
  {
    "text": "so very very basic things like formatters all interns are for most like front-end",
    "start": "268860",
    "end": "274979"
  },
  {
    "text": "or like react projects like a no-brainer so personally for me for um formatters and Linda are super fundational tools",
    "start": "274979",
    "end": "281460"
  },
  {
    "text": "that are super you know indispensable for me personally there's no way I can work without them any any of you don't",
    "start": "281460",
    "end": "286500"
  },
  {
    "text": "use any of these tools everyone awesome that's great",
    "start": "286500",
    "end": "293400"
  },
  {
    "text": "so they aren't supposed to just set us guidelines and rules for certain things so more important in my opinion is that",
    "start": "293400",
    "end": "299520"
  },
  {
    "text": "they should they should find and fix any syntax uh or formatting problems in the code with no effort",
    "start": "299520",
    "end": "306479"
  },
  {
    "text": "so personally that I'd like to prefer um the code uh to be deterministic so",
    "start": "306479",
    "end": "312060"
  },
  {
    "text": "what do I mean by that so there is my favorite eslint rule that",
    "start": "312060",
    "end": "318840"
  },
  {
    "text": "I've only good experience with which is basically Auto sorting anyone doing that",
    "start": "318840",
    "end": "324539"
  },
  {
    "text": "as well free no one oh it's going to be a hot take so not",
    "start": "324539",
    "end": "331380"
  },
  {
    "text": "probably every one of us will agree with um but because it's some it's some it somehow enforces like a predefined",
    "start": "331380",
    "end": "337800"
  },
  {
    "text": "grouping that might work well with every use case so this is just like a very small example but imagine like a long",
    "start": "337800",
    "end": "343199"
  },
  {
    "text": "list and maintaining like a group of uh you know um you know maybe country codes or",
    "start": "343199",
    "end": "350880"
  },
  {
    "text": "um currencies or something like that it can be quickly a nightmare so deterministic code increases",
    "start": "350880",
    "end": "356820"
  },
  {
    "text": "maintainability and consistency in the code an example would be like sorting anything which can be assorted without problems like automatically by the",
    "start": "356820",
    "end": "363240"
  },
  {
    "text": "alphabet for example so this way you get like uh deterministic code which makes it more liable predictable and",
    "start": "363240",
    "end": "368699"
  },
  {
    "text": "consistent so think of you know um uh diffs in in GitHub that are like totally",
    "start": "368699",
    "end": "374340"
  },
  {
    "text": "unnecessary if you if you if you wouldn't have that so here's a quick linting config what I",
    "start": "374340",
    "end": "381000"
  },
  {
    "text": "like to use which is called eslint config banana and with this you get most",
    "start": "381000",
    "end": "386160"
  },
  {
    "text": "of my opinionated Auto fixable stuff here better included so yeah feel free",
    "start": "386160",
    "end": "391380"
  },
  {
    "text": "to check it out it's open source on GitHub and what's also worth the note is that enhancing linting type with type",
    "start": "391380",
    "end": "399120"
  },
  {
    "text": "information can be like super super useful for automatically getting types and orders in the way you want and this",
    "start": "399120",
    "end": "406800"
  },
  {
    "text": "only just needs like a like a really really short reference to your TS config.json by adding the path under",
    "start": "406800",
    "end": "413340"
  },
  {
    "text": "parser project a password options project two useful prettier plugins I have only",
    "start": "413340",
    "end": "420180"
  },
  {
    "text": "good experience with our first one uh prettier plug-in sort Imports by Trivago",
    "start": "420180",
    "end": "425900"
  },
  {
    "text": "and pretty up plug and Tailwind CSS so these both help me you know to not",
    "start": "425900",
    "end": "431819"
  },
  {
    "text": "um caring about your in our entire import statements anymore and with the",
    "start": "431819",
    "end": "436979"
  },
  {
    "text": "previous plugin television so for the for the people that use Tailwind these basically sorts or group",
    "start": "436979",
    "end": "443280"
  },
  {
    "text": "um CSS rules together you know to to um to to keep that terministic as well",
    "start": "443280",
    "end": "449639"
  },
  {
    "text": "so super need checked them out pretty sure they have saved me a lot a lot a lot of hours and development time",
    "start": "449639",
    "end": "455520"
  },
  {
    "text": "already out of your app because oftentimes there",
    "start": "455520",
    "end": "462599"
  },
  {
    "text": "can be like components that are deeply nested inside of States until you reach them so not to mention like uber rare or",
    "start": "462599",
    "end": "469259"
  },
  {
    "text": "complex states that are your value reach so make sure to build components in",
    "start": "469259",
    "end": "474419"
  },
  {
    "text": "isolation so here are some well established component explorers that help me to",
    "start": "474419",
    "end": "480000"
  },
  {
    "text": "build components in isolation very conveniently so personally I've worked with storybook the most and it helped me",
    "start": "480000",
    "end": "486240"
  },
  {
    "text": "to control the states and the knobs like very very conveniently and it's it's it's a super nice tool to document and",
    "start": "486240",
    "end": "493919"
  },
  {
    "text": "to collaborate even with your product managers or or designers",
    "start": "493919",
    "end": "499880"
  },
  {
    "text": "make sure you want to cover all of the different states and what I like to do is that to try um to show like all the",
    "start": "499919",
    "end": "507000"
  },
  {
    "text": "different states at once at in your component Explorer so you really want to make sure you cover all the different",
    "start": "507000",
    "end": "512820"
  },
  {
    "text": "states and you see all the mistakes at one glance and make sure they sit perfectly",
    "start": "512820",
    "end": "518959"
  },
  {
    "text": "um another thing automated tests are super valuable at uh on the component level so to keep the Integrity of your",
    "start": "519659",
    "end": "526980"
  },
  {
    "text": "interface and to keep the um the um to increase the confidence of of",
    "start": "526980",
    "end": "533279"
  },
  {
    "text": "reliability especially when adding like updates to the UI code base",
    "start": "533279",
    "end": "540120"
  },
  {
    "text": "now let's talk about theming so when theming apps there's absolutely",
    "start": "540120",
    "end": "546899"
  },
  {
    "text": "zero cases we are designing Pages or you know templates but we actually designed systems of components so how do you how",
    "start": "546899",
    "end": "554100"
  },
  {
    "text": "do you do that first of all um we need some some",
    "start": "554100",
    "end": "559200"
  },
  {
    "text": "attributes uh or our values so we call them also in the web um design tokens so the most common core",
    "start": "559200",
    "end": "566940"
  },
  {
    "text": "values on the web or uh you know on Native apps are typography color and",
    "start": "566940",
    "end": "573120"
  },
  {
    "text": "spacing so this core values work together to",
    "start": "573120",
    "end": "578339"
  },
  {
    "text": "create to uh you know to get a truly great and unique system as a result",
    "start": "578339",
    "end": "584399"
  },
  {
    "text": "so in practice you know applying the tokens on the button it will represent the button in a way how it's specified",
    "start": "584399",
    "end": "590580"
  },
  {
    "text": "in the system you know by its you know color topography and spacings",
    "start": "590580",
    "end": "596120"
  },
  {
    "text": "um one pattern actually what I totally encouraged to do is to create components that dictates the layout on and the",
    "start": "597120",
    "end": "604680"
  },
  {
    "text": "spacings so let's take a deep look into this",
    "start": "604680",
    "end": "609899"
  },
  {
    "text": "simple typographic blocks as an example so when you specify the spaces between",
    "start": "609899",
    "end": "615540"
  },
  {
    "text": "paragraphs for example it's super common that you specify them on a paragraph level and in this case I'm using the P",
    "start": "615540",
    "end": "622019"
  },
  {
    "text": "plus P selector to uh you know set the margin bottom but I've seen more often just a margin bottom on you know just on",
    "start": "622019",
    "end": "629580"
  },
  {
    "text": "the paragraph as well so to be honest I've only had nightmare experience with",
    "start": "629580",
    "end": "634800"
  },
  {
    "text": "them because you can you cannot really move it else where you cannot move it maybe I don't know you cannot move the",
    "start": "634800",
    "end": "640320"
  },
  {
    "text": "same paragraph on your footer or on a section elsewhere without having the the",
    "start": "640320",
    "end": "645600"
  },
  {
    "text": "correct spacing they're applied or probably you you uh yeah you just move the spacing also around there",
    "start": "645600",
    "end": "651480"
  },
  {
    "text": "so what we what you what we want instead is to have a layout component like wrappers or containers that control",
    "start": "651480",
    "end": "658079"
  },
  {
    "text": "spaces so between each child elements so this way you can still move them out of the box and move something else in here",
    "start": "658079",
    "end": "664260"
  },
  {
    "text": "and still have the correct Gap space in place and you can even Nest them and you",
    "start": "664260",
    "end": "669420"
  },
  {
    "text": "can even like have more complex spacings around them as long as you use um",
    "start": "669420",
    "end": "674519"
  },
  {
    "text": "spacings or as long as you control the spacings um from from its wrapper",
    "start": "674519",
    "end": "681019"
  },
  {
    "text": "now let's talk about building foreign so something worth a note is that even",
    "start": "681720",
    "end": "689040"
  },
  {
    "text": "if we don't know we're kind of using a Atomic design mostly as a methodology",
    "start": "689040",
    "end": "695339"
  },
  {
    "text": "for creating use interface designs and that you know that are both modular and",
    "start": "695339",
    "end": "700740"
  },
  {
    "text": "scalable so think of uis broken down into",
    "start": "700740",
    "end": "706040"
  },
  {
    "text": "atoms molecules organisms templates and Pages work together to create a effective interface design patterns",
    "start": "706040",
    "end": "713339"
  },
  {
    "text": "um so it's it's a it's a mental model to help us think of our user interfaces as both as a as a cohesive whole and a",
    "start": "713339",
    "end": "722100"
  },
  {
    "text": "collection of parts at the same time so atoms in practice are typically the",
    "start": "722100",
    "end": "728760"
  },
  {
    "text": "smallest pieces possible so things like Primitives you know such as buttons or",
    "start": "728760",
    "end": "735180"
  },
  {
    "text": "or an inputs or heading or just the body text or like a simple card",
    "start": "735180",
    "end": "740640"
  },
  {
    "text": "Etc now molecules are compositions of atoms",
    "start": "740640",
    "end": "748380"
  },
  {
    "text": "in its smallest fundamental units like like like a Search widget like like you",
    "start": "748380",
    "end": "753660"
  },
  {
    "text": "see here now if you group molecules um you get organisms that represents",
    "start": "753660",
    "end": "760079"
  },
  {
    "text": "bigger sections such as you know the entire app navigation bar like like you see here",
    "start": "760079",
    "end": "766860"
  },
  {
    "text": "and then stitching more and more organisms together you slowly get to create you know entire pages",
    "start": "766860",
    "end": "772920"
  },
  {
    "text": "so um so this one here basically represents one kind of a page which you would call a template",
    "start": "772920",
    "end": "781560"
  },
  {
    "text": "and then here um we distinct different templates from each other and even",
    "start": "781560",
    "end": "787139"
  },
  {
    "text": "putting them you know with real uh representative content to uh distinct them",
    "start": "787139",
    "end": "793740"
  },
  {
    "text": "so component driven development um you call them also sometimes CDD so it's",
    "start": "793740",
    "end": "801240"
  },
  {
    "text": "a common development process and strategy of building components so it's a development methodology that anchors",
    "start": "801240",
    "end": "807060"
  },
  {
    "text": "the build process around components so it's a process that builds uis from",
    "start": "807060",
    "end": "813060"
  },
  {
    "text": "the bottom up so by starting at the level of components and ending at the",
    "start": "813060",
    "end": "818339"
  },
  {
    "text": "level of pages and templates and in practice the same methodology can also be applied on a per component level",
    "start": "818339",
    "end": "825540"
  },
  {
    "text": "for example so let's take the search input so you build basically first the box and",
    "start": "825540",
    "end": "832019"
  },
  {
    "text": "then follow up with you know the value and then the placeholder that it sits inside and then you look into decorating",
    "start": "832019",
    "end": "837120"
  },
  {
    "text": "them with uh for example a glass icon or adding up more granular logic things",
    "start": "837120",
    "end": "843120"
  },
  {
    "text": "like you know animations or or a shadow on top of that",
    "start": "843120",
    "end": "848540"
  },
  {
    "text": "that's worth them though if you uh yeah if you're building uis now let's Deep dive into some code and",
    "start": "848700",
    "end": "856380"
  },
  {
    "text": "I'd like to show some super interesting things that I've learned over the past years when building uis of a mid to",
    "start": "856380",
    "end": "862800"
  },
  {
    "text": "large project basically this is how yeah my code looks like when I build anything without any system so basically I'm",
    "start": "862800",
    "end": "869519"
  },
  {
    "text": "there it's total mess and it's it's every time like that but before we get the deep um here are",
    "start": "869519",
    "end": "875639"
  },
  {
    "text": "some super quick wins if we uh keep this in Our Minds when we build UI so we first we want to keep you know dump and",
    "start": "875639",
    "end": "882839"
  },
  {
    "text": "smart or uh sometimes I think in the past we've called them also container and presentational components separated",
    "start": "882839",
    "end": "888720"
  },
  {
    "text": "so I still think that's a good practice um also collocate related code Parts",
    "start": "888720",
    "end": "894839"
  },
  {
    "text": "together so if you work with react I think react hooks is a great way to do that",
    "start": "894839",
    "end": "901320"
  },
  {
    "text": "um and uh another thing is you know you may want to build Uh custom hooks if applicable",
    "start": "901320",
    "end": "908760"
  },
  {
    "text": "um to to do that and you want to try to keep um the API um as sensible as possible it you try",
    "start": "908760",
    "end": "916199"
  },
  {
    "text": "not to um overload it with anything that is probably um you know not not the focus of your",
    "start": "916199",
    "end": "922920"
  },
  {
    "text": "components so you want to try to reduce the API surface to the bare minimum",
    "start": "922920",
    "end": "928260"
  },
  {
    "text": "now yeah let's talk about react component props patterns now this will be a little",
    "start": "928260",
    "end": "935579"
  },
  {
    "text": "bit react focused and but I'm sure um there is still um you know a ton to pick up um and take",
    "start": "935579",
    "end": "943019"
  },
  {
    "text": "to take away four other UI libraries so let's start with the bare Boolean",
    "start": "943019",
    "end": "948060"
  },
  {
    "text": "prop so here's an example of a button that this specif that is specified with",
    "start": "948060",
    "end": "953160"
  },
  {
    "text": "some primary styles and you'll quickly note that um by specifying that as a Boolean um it will",
    "start": "953160",
    "end": "959880"
  },
  {
    "text": "be become quickly odd when you try to you know add another Boolean so",
    "start": "959880",
    "end": "965820"
  },
  {
    "text": "of the same kind of like here you know it doesn't make sense you know so can't really do this",
    "start": "965820",
    "end": "971220"
  },
  {
    "text": "um but actually you actually you can and it's um you can do that by actually",
    "start": "971220",
    "end": "978000"
  },
  {
    "text": "doing uh by adding um function overloads or typing that via Union prop types and",
    "start": "978000",
    "end": "984180"
  },
  {
    "text": "by doing that correctly you should be able to see an error um by the TSS by the TS compiler when",
    "start": "984180",
    "end": "990300"
  },
  {
    "text": "using both Boolean simultaneously which is kind of smart right",
    "start": "990300",
    "end": "995600"
  },
  {
    "text": "alternatively and probably my favorite case to handle this is by directly specifying a prop as a union type of",
    "start": "995600",
    "end": "1002899"
  },
  {
    "text": "string levels um so here's a quick example of a button that uses exactly that as a string",
    "start": "1002899",
    "end": "1008839"
  },
  {
    "text": "literal Union and in the case of a button we have you know variance of of button appearances so the",
    "start": "1008839",
    "end": "1015199"
  },
  {
    "text": "good thing about separating unions as a separate type is that it can be easily",
    "start": "1015199",
    "end": "1020240"
  },
  {
    "text": "and directly exported as necessary so since both are kind of possible and",
    "start": "1020240",
    "end": "1026480"
  },
  {
    "text": "technically it's safe to do so so here's a comparison of some key differences so I think that Union type has less",
    "start": "1026480",
    "end": "1032120"
  },
  {
    "text": "boilerplate because you don't need to write complex you know Union types or overloads and it also has better",
    "start": "1032120",
    "end": "1038600"
  },
  {
    "text": "autocompletion in vs code now what about dedicated components like",
    "start": "1038600",
    "end": "1044839"
  },
  {
    "text": "this how do these come into place I've used them all I have to admit um and I put together here some uh um you",
    "start": "1044839",
    "end": "1052640"
  },
  {
    "text": "know the the pros and cons so for me um button primary um is I think the best when the when the",
    "start": "1052640",
    "end": "1059900"
  },
  {
    "text": "um button primary prop is being used to denote the primary action like like the of the button such as you want such as",
    "start": "1059900",
    "end": "1066799"
  },
  {
    "text": "you have in the form where the primer button is the one that submits uh the form",
    "start": "1066799",
    "end": "1072500"
  },
  {
    "text": "um versus button appearance primary syntax makes a lot of sense to use to",
    "start": "1072500",
    "end": "1077539"
  },
  {
    "text": "change like the visual appearance of the button such as to give it a different color or Style",
    "start": "1077539",
    "end": "1083840"
  },
  {
    "text": "and then the primary button component syntax can be used when you create a custom when creating a custom button",
    "start": "1083840",
    "end": "1091340"
  },
  {
    "text": "component that is specifically designed to always have a primary appearance such as like the button that is always red or",
    "start": "1091340",
    "end": "1099799"
  },
  {
    "text": "has bold texted so this can be useful when a specified appearance is needed",
    "start": "1099799",
    "end": "1105799"
  },
  {
    "text": "consistently throughout the project next um let's talk about enriching react",
    "start": "1105799",
    "end": "1112880"
  },
  {
    "text": "components with types for a standard HTML attributes so there is a bunch of ways to do that",
    "start": "1112880",
    "end": "1119900"
  },
  {
    "text": "and how to enrich you know how to enrich a UI component with types of an irregular HTML element so you know there",
    "start": "1119900",
    "end": "1126440"
  },
  {
    "text": "is button HTML attributes component props with ref without ref uh HTML propositional attributes and then the",
    "start": "1126440",
    "end": "1133039"
  },
  {
    "text": "one from jsx so um you know but one is two verbose the",
    "start": "1133039",
    "end": "1139039"
  },
  {
    "text": "one is stupid specific about ref um both like all of them has its pros and cons",
    "start": "1139039",
    "end": "1145880"
  },
  {
    "text": "so I've used probably 90 of them and tldr of my experience so far is that",
    "start": "1145880",
    "end": "1152539"
  },
  {
    "text": "um the most accurate and least problematic types that work for me are any of these",
    "start": "1152539",
    "end": "1157940"
  },
  {
    "text": "so if you prefer you know not to be explicit about refs at all then there",
    "start": "1157940",
    "end": "1163760"
  },
  {
    "text": "will be component props for you and if you prefer to beep specific explicit and",
    "start": "1163760",
    "end": "1169100"
  },
  {
    "text": "it's the only that's also the same um there's also some um the the the team that you know that that",
    "start": "1169100",
    "end": "1178539"
  },
  {
    "text": "maintains the the react types recommends to do so is to to use the component",
    "start": "1178539",
    "end": "1184460"
  },
  {
    "text": "props with ref or component props without rev so these are the tips safest types you can get",
    "start": "1184460",
    "end": "1191919"
  },
  {
    "text": "exposing all the correct types is awesome but for building truly pure and robust uis is not necessarily ideal to",
    "start": "1193940",
    "end": "1201740"
  },
  {
    "text": "do so so I'd recommend to at least ban a class name and style props 24 is a consistent",
    "start": "1201740",
    "end": "1209360"
  },
  {
    "text": "Design Systems for you UI components as um you know it it allows it it allows",
    "start": "1209360",
    "end": "1216140"
  },
  {
    "text": "individual components to be styled in arbitrary ways that can lead to inconsistency in the user interface that",
    "start": "1216140",
    "end": "1222140"
  },
  {
    "text": "you don't really want so it can make it difficult for users to understand and and you know to use the application",
    "start": "1222140",
    "end": "1230240"
  },
  {
    "text": "so this is like a very uh quick example on how I prefer to do that so basically you apply the built-in omit uh utility",
    "start": "1230240",
    "end": "1238100"
  },
  {
    "text": "uh typescript type and you basically just pull out any props as string unions",
    "start": "1238100",
    "end": "1244640"
  },
  {
    "text": "and that you don't want to have exposed in the second parameter",
    "start": "1244640",
    "end": "1249820"
  },
  {
    "text": "something that I totally encourage to do in react components is to reuse existing",
    "start": "1251179",
    "end": "1257179"
  },
  {
    "text": "types and interfaces so given you use just one single",
    "start": "1257179",
    "end": "1262880"
  },
  {
    "text": "component per file I can't stress enough to reuse and Export types if necessary so that updates to the exported or",
    "start": "1262880",
    "end": "1269600"
  },
  {
    "text": "imported types are reflected automatically that can save um a ton of time or a ton",
    "start": "1269600",
    "end": "1275240"
  },
  {
    "text": "of work down the line and for me often it outweighs the work over duplicating the types",
    "start": "1275240",
    "end": "1280580"
  },
  {
    "text": "you don't think of changing apis and then you have to update it as well and then you have to think of where have I",
    "start": "1280580",
    "end": "1286940"
  },
  {
    "text": "duplicated this and and things like that so definitely recommend to do that now here's a big here's a quick bare",
    "start": "1286940",
    "end": "1294140"
  },
  {
    "text": "minimum UI component that kind of outlines the important things of how one of many of my uh primitive UI components",
    "start": "1294140",
    "end": "1301400"
  },
  {
    "text": "look like so basically how I do that is um you have the types or interface um for a component props at the very top",
    "start": "1301400",
    "end": "1308059"
  },
  {
    "text": "and then you sometimes have you know some static variables or constants that you don't need on runtime or on render",
    "start": "1308059",
    "end": "1314419"
  },
  {
    "text": "time so you put even that sometimes before that and to keep props and components grouped together",
    "start": "1314419",
    "end": "1320720"
  },
  {
    "text": "and then inside the render block you'll find Visual logic through",
    "start": "1320720",
    "end": "1325940"
  },
  {
    "text": "um you know Styles and classes or you know you may want to fetch data or something and sometimes you may want to",
    "start": "1325940",
    "end": "1332179"
  },
  {
    "text": "have hooks hooks etc etc and you want to make sure that some some of these logic",
    "start": "1332179",
    "end": "1337520"
  },
  {
    "text": "are also like kind of grouped together and then you get to the render uh return statement and you want to make sure that",
    "start": "1337520",
    "end": "1344240"
  },
  {
    "text": "you want to keep that flat so if you have like if conditions or if you have whatever try catch you wanna you wanna",
    "start": "1344240",
    "end": "1351620"
  },
  {
    "text": "try to keep that um and at one level as as maximum so so so probably",
    "start": "1351620",
    "end": "1359000"
  },
  {
    "text": "um avoid nesting uh if statements or Etc and you want to keep it simple and",
    "start": "1359000",
    "end": "1364580"
  },
  {
    "text": "you want to keep it really easily readable now to further um enforce consistency of",
    "start": "1364580",
    "end": "1372020"
  },
  {
    "text": "the design system in react there's multiple strategies to render sub-components that should be themed in",
    "start": "1372020",
    "end": "1377780"
  },
  {
    "text": "the same way so I think of there is like two important ones",
    "start": "1377780",
    "end": "1384080"
  },
  {
    "text": "um as one is the compound component and the other one is polymorph component",
    "start": "1384080",
    "end": "1390919"
  },
  {
    "text": "so for compound components these are basically a group of related components",
    "start": "1390919",
    "end": "1396559"
  },
  {
    "text": "that are composed together to uh to form a larger or more complex components so",
    "start": "1396559",
    "end": "1402080"
  },
  {
    "text": "these allows uh for greater flexibility and modularity as the individual",
    "start": "1402080",
    "end": "1407900"
  },
  {
    "text": "components can be used and composed in different ways to meet the needs of different situations",
    "start": "1407900",
    "end": "1414519"
  },
  {
    "text": "polymorphic components of the on the other hand are components that are you know that can accept any numbers of",
    "start": "1415100",
    "end": "1420440"
  },
  {
    "text": "different props and render them in different ways depending on the props that are passed in so this allows for",
    "start": "1420440",
    "end": "1425960"
  },
  {
    "text": "greater greater flexibility as well in how the component is used",
    "start": "1425960",
    "end": "1431360"
  },
  {
    "text": "as you know it can be customized to meet uh you know to meet the needs of",
    "start": "1431360",
    "end": "1436940"
  },
  {
    "text": "different situations by passing in different props yeah now don't get intrigued by the",
    "start": "1436940",
    "end": "1443960"
  },
  {
    "text": "types here um this is this just basically showcases a button that can be rendered and you know can be rendered as",
    "start": "1443960",
    "end": "1449000"
  },
  {
    "text": "in any any HTML element or even recognac component here um so this is just how I I like to type",
    "start": "1449000",
    "end": "1455419"
  },
  {
    "text": "it in a safe way which is super neat because it always allows me um to limit the type to be only either",
    "start": "1455419",
    "end": "1461539"
  },
  {
    "text": "for example an A or or a button you know and and get the correct types as suggested when when using them",
    "start": "1461539",
    "end": "1469220"
  },
  {
    "text": "so overall um compound components and polymorphic components are both useful approaches for building uh reusable",
    "start": "1469220",
    "end": "1476960"
  },
  {
    "text": "components in react and can be used in different situations depending on the specific needs for the project",
    "start": "1476960",
    "end": "1483679"
  },
  {
    "text": "so yeah compound component is great for General generally like wrapping an icon polymer component is great for",
    "start": "1483679",
    "end": "1489860"
  },
  {
    "text": "configuring icons consistently as an example of our icons",
    "start": "1489860",
    "end": "1495679"
  },
  {
    "text": "now let's check out generics and see how they come in handy in react components",
    "start": "1495679",
    "end": "1502220"
  },
  {
    "text": "so generics in react components are a way of specifying the types of props",
    "start": "1502220",
    "end": "1507440"
  },
  {
    "text": "that can that a component can accept so they are great for better you know type safety and",
    "start": "1507440",
    "end": "1514039"
  },
  {
    "text": "better type shape type checking in the code which can help to prevent errors and ensure that the component is used",
    "start": "1514039",
    "end": "1519679"
  },
  {
    "text": "correctly so here's an example where I most often use it so it probably informs",
    "start": "1519679",
    "end": "1525980"
  },
  {
    "text": "um and the usage like this isn't necessarily I try to avoid syntax like this but I thought it's nice you know to",
    "start": "1525980",
    "end": "1531799"
  },
  {
    "text": "show and to know that you can actually pass generics generic types to a jsx element",
    "start": "1531799",
    "end": "1538340"
  },
  {
    "text": "like this now let's talk about",
    "start": "1538340",
    "end": "1543620"
  },
  {
    "text": "um overload function components in react so a great way to enforce strict and",
    "start": "1543620",
    "end": "1549679"
  },
  {
    "text": "complex types in react are by leveraging overload function components in react so with overload functions in react",
    "start": "1549679",
    "end": "1556400"
  },
  {
    "text": "components it's basically possible to Define like multiple versions of a function that have different signatures",
    "start": "1556400",
    "end": "1562279"
  },
  {
    "text": "or sets of parameters so this allows for greater flexibility in how functions can",
    "start": "1562279",
    "end": "1567919"
  },
  {
    "text": "be used as it can accept different types and numbers or arguments depending on you know the specific needs of the",
    "start": "1567919",
    "end": "1575480"
  },
  {
    "text": "situation um now yeah types or interfaces in react",
    "start": "1575480",
    "end": "1582320"
  },
  {
    "text": "props so this is a pretty pretty common debate I'm sure many of you have faced and you know whether to prefer this over",
    "start": "1582320",
    "end": "1589340"
  },
  {
    "text": "that but I'll show you my hot take so generally both are fine and I actually",
    "start": "1589340",
    "end": "1595400"
  },
  {
    "text": "use them both but with a preference on interfaces so here is why",
    "start": "1595400",
    "end": "1602000"
  },
  {
    "text": "um interfaces can extend other interfaces which makes them slightly safer than intersection types because it",
    "start": "1602000",
    "end": "1608299"
  },
  {
    "text": "makes it impossible to accidentally override anything so it allows um to",
    "start": "1608299",
    "end": "1613600"
  },
  {
    "text": "enhance with additional members easily which which can be useful when you work",
    "start": "1613600",
    "end": "1619880"
  },
  {
    "text": "with third-party libraries or components because you can then redefine the type in a definition file and reuse them as",
    "start": "1619880",
    "end": "1626720"
  },
  {
    "text": "they are while type on the other hand are more concise and easier to read than",
    "start": "1626720",
    "end": "1633620"
  },
  {
    "text": "interfaces and moreover they cannot add additional members once defined",
    "start": "1633620",
    "end": "1640580"
  },
  {
    "text": "which is you know both both good and bad because because of the better type shifting",
    "start": "1640580",
    "end": "1647500"
  },
  {
    "text": "um based from my experience in the past with uh a large project I have",
    "start": "1648380",
    "end": "1654320"
  },
  {
    "text": "experienced a slightly faster also um typescript compilation in the editor by",
    "start": "1654320",
    "end": "1659539"
  },
  {
    "text": "switching hundreds of components from type to interface and on that topic I'd",
    "start": "1659539",
    "end": "1665900"
  },
  {
    "text": "like also to encourage to type return type annotations especially function return types as it helps with",
    "start": "1665900",
    "end": "1673340"
  },
  {
    "text": "faster compilation as well and also can help to improve",
    "start": "1673340",
    "end": "1678460"
  },
  {
    "text": "the type safety and correctness of your code and can make it easier to catch and",
    "start": "1678460",
    "end": "1683600"
  },
  {
    "text": "prevent errors many people don't might not notice but both that I've just mentioned before the",
    "start": "1683600",
    "end": "1691580"
  },
  {
    "text": "interfaces and the type annotations are even recommended in the official docs on the typescript git sub",
    "start": "1691580",
    "end": "1699080"
  },
  {
    "text": "repository which you can find here down below um on it on their Wikipedia",
    "start": "1699080",
    "end": "1705400"
  },
  {
    "text": "so here are more things on typescript in react that I've found so useful um to",
    "start": "1706039",
    "end": "1711440"
  },
  {
    "text": "have in the back of my head so things like um Annie so not saying that this should be",
    "start": "1711440",
    "end": "1717320"
  },
  {
    "text": "completely disallowed but it you should absolutely try to avoid it and it should be absolutely discouraged so there's no",
    "start": "1717320",
    "end": "1723860"
  },
  {
    "text": "way anything should be really typed as any unless they are really really unknown so one important uh so so one",
    "start": "1723860",
    "end": "1731059"
  },
  {
    "text": "important way um to get this type back is to use like uh something like a",
    "start": "1731059",
    "end": "1736880"
  },
  {
    "text": "runtime parser and my favorite to do that my favorite way to do that is by using Zod for example",
    "start": "1736880",
    "end": "1743840"
  },
  {
    "text": "type assertions and also known as you know typecasting are generally considered to be bad for the following",
    "start": "1743840",
    "end": "1750500"
  },
  {
    "text": "reasons they can lead to runtime errors as they don't actually check the type",
    "start": "1750500",
    "end": "1755659"
  },
  {
    "text": "of a value at runtime and they can make the code less self-documenting as they",
    "start": "1755659",
    "end": "1760820"
  },
  {
    "text": "don't provide explicit information about the type of a value and they can make the code harder to",
    "start": "1760820",
    "end": "1767000"
  },
  {
    "text": "maintain and update as they you know can introduce inconsistencies and errors that are not",
    "start": "1767000",
    "end": "1773120"
  },
  {
    "text": "caught by the compiler So to avoid these problems it is generally better to use typesafe",
    "start": "1773120",
    "end": "1779360"
  },
  {
    "text": "techniques such as type cards or type checking functions and have correct",
    "start": "1779360",
    "end": "1785899"
  },
  {
    "text": "types at runtime so this can help to prevent errors and ensure that the code behaves as expected",
    "start": "1785899",
    "end": "1793520"
  },
  {
    "text": "same thing here with you know the non-uh no the non-nall assertions you know the thing with the exclamation mark at the",
    "start": "1793520",
    "end": "1799820"
  },
  {
    "text": "end so better use type cards and type checking functions and ensure that correct types",
    "start": "1799820",
    "end": "1805820"
  },
  {
    "text": "at runtime and prevent errors that you know that the code behaves as expected",
    "start": "1805820",
    "end": "1811820"
  },
  {
    "text": "so with all that being said um I think it Narrows down to definitely not forget about setting this to your TS",
    "start": "1811820",
    "end": "1819799"
  },
  {
    "text": "config straight to true I hope many of us do that apart from that there's a bunch of super",
    "start": "1819799",
    "end": "1826220"
  },
  {
    "text": "helpful other flags that aren't included in the strict flag um things like allow unreachable code",
    "start": "1826220",
    "end": "1832779"
  },
  {
    "text": "allow unused labels and my favorite thing actually is um no unchecked index access what that",
    "start": "1832779",
    "end": "1839779"
  },
  {
    "text": "thought it what that does is when you have like an array that is inferred to an array type you often get for example",
    "start": "1839779",
    "end": "1846440"
  },
  {
    "text": "in this in a case with numbers you get an array of numbers and what this does is it changes it to array of numbers or",
    "start": "1846440",
    "end": "1853100"
  },
  {
    "text": "undefined to avoid the problem when you try to access it by its index which can be",
    "start": "1853100",
    "end": "1859039"
  },
  {
    "text": "actually non-defined so it has also both its pros and and cons",
    "start": "1859039",
    "end": "1864740"
  },
  {
    "text": "but for me personally I've found it more I've found it more uh consistently and",
    "start": "1864740",
    "end": "1870380"
  },
  {
    "text": "more reliable when setting that to true now with all that being said it's",
    "start": "1870380",
    "end": "1876140"
  },
  {
    "text": "helpful to keep those things in mind um when building robust and resilient UI components so those are the things that",
    "start": "1876140",
    "end": "1883880"
  },
  {
    "text": "um truly help me to build and keep consistency and stability and type safety of UI components and overall also",
    "start": "1883880",
    "end": "1891559"
  },
  {
    "text": "a peace of mind now I'm about to end this talk and uh",
    "start": "1891559",
    "end": "1897440"
  },
  {
    "text": "here I'm going I'm going to share some takeaways before I'm about you know to close it",
    "start": "1897440",
    "end": "1902539"
  },
  {
    "text": "so first proper setup of tooling um such such for linters or compilers",
    "start": "1902539",
    "end": "1907880"
  },
  {
    "text": "and testing Frameworks definitely help to increase developer experience and delve4 therefore help to write high",
    "start": "1907880",
    "end": "1914899"
  },
  {
    "text": "quality and robust code and to provide you know the foundational things that you need for building this to uh for",
    "start": "1914899",
    "end": "1920480"
  },
  {
    "text": "building these components second you want to have a resilient",
    "start": "1920480",
    "end": "1926059"
  },
  {
    "text": "design system to provide a set of uh you know standardized well-defined",
    "start": "1926059",
    "end": "1931480"
  },
  {
    "text": "components that can be easily integrated and reused throughout the code base it can be even applied throughout different",
    "start": "1931480",
    "end": "1938659"
  },
  {
    "text": "Frameworks UI Frameworks to encourage the creation of robust code",
    "start": "1938659",
    "end": "1944679"
  },
  {
    "text": "um strict types help to ensure that the data used in the code is valid and conforms to a specific schema like",
    "start": "1945679",
    "end": "1951620"
  },
  {
    "text": "making the chord making the code more predictable and reliable and encouraging the creation of robust code",
    "start": "1951620",
    "end": "1959059"
  },
  {
    "text": "and strict types also encourage the creation of robust UI components by",
    "start": "1959059",
    "end": "1964340"
  },
  {
    "text": "providing a clear and well-defined interface that ensures that the data is valid and consistent",
    "start": "1964340",
    "end": "1972278"
  },
  {
    "text": "the key to creating robust uis is simplicity so simple components are easier to",
    "start": "1972500",
    "end": "1978799"
  },
  {
    "text": "understand and maintain and reuse and are less likely to contain errors or cause problems in the user interface",
    "start": "1978799",
    "end": "1986740"
  },
  {
    "text": "UI components should be reusable and you know to allow for easily integration",
    "start": "1986740",
    "end": "1993140"
  },
  {
    "text": "into different parts of the user interfaces and to reduce the need for recreating similar components saving",
    "start": "1993140",
    "end": "1999380"
  },
  {
    "text": "time and improve improved code quality and lastly um",
    "start": "1999380",
    "end": "2005559"
  },
  {
    "text": "taking care from the ground up ensures that the code and use interface are well designed and maintainable from the",
    "start": "2005559",
    "end": "2012460"
  },
  {
    "text": "beginning preventing issues embarks from yeah arising in the future",
    "start": "2012460",
    "end": "2018279"
  },
  {
    "text": "so that's it thank you very much [Applause]",
    "start": "2018279",
    "end": "2028269"
  }
]