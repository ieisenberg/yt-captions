[
  {
    "text": "yes all right thank you uh welcome everyone uh what you just saw before was",
    "start": "6040",
    "end": "11400"
  },
  {
    "text": "like a small creative coding sketch I made in uh p5js um I'm really big fan of",
    "start": "11400",
    "end": "16640"
  },
  {
    "text": "creative coding so I hope you enjoyed that like screen saver like thing um I I will share the source code as well if",
    "start": "16640",
    "end": "22279"
  },
  {
    "text": "you're interested in it um my talk is failure is not an option uh dble execution plus Dapper is rocket emoji",
    "start": "22279",
    "end": "29199"
  },
  {
    "text": "I'm not sure how you would like translate that maybe it's like amazing it's it's awesome I don't know just",
    "start": "29199",
    "end": "34360"
  },
  {
    "text": "whatever you feel like um and I'm a big fan of vscode and all of its extensions",
    "start": "34360",
    "end": "39480"
  },
  {
    "text": "so uh I'm not using I am using slides but I'm using them in vs code I'm using an extension called a code tour uh which",
    "start": "39480",
    "end": "46600"
  },
  {
    "text": "allows you to record and and play back and do like a guided tour through a git repository uh so everything what you see",
    "start": "46600",
    "end": "53160"
  },
  {
    "text": "here is is in git I'll will share the um the link with you later so you can all view it yourself and try all the code",
    "start": "53160",
    "end": "59160"
  },
  {
    "text": "samples yourself so don't worry about that um but that's what I'm yeah that's what I'm I'm using um this talk is about",
    "start": "59160",
    "end": "66760"
  },
  {
    "text": "failure and how to also overcome failure or limit the impact of failure uh and maybe some of you are as old as I am and",
    "start": "66760",
    "end": "73400"
  },
  {
    "text": "seen this message in real life it's from Windows XP Task fails successfully which of course like it's a very weird message",
    "start": "73400",
    "end": "79799"
  },
  {
    "text": "to to show to your your end users um but it's basically what this session is about because if something is failing",
    "start": "79799",
    "end": "85960"
  },
  {
    "text": "well then make sure that the impact is like as minimal as possible uh or maybe you can actually overcome from that",
    "start": "85960",
    "end": "91439"
  },
  {
    "text": "failure and still be successful uh so that's why I chose this this",
    "start": "91439",
    "end": "96640"
  },
  {
    "text": "image so I'm Mark derer I'm a developer Advocate at diit that's a company founded by the co-creators of depper",
    "start": "96640",
    "end": "103079"
  },
  {
    "text": "open source project Mark fussel and yon Snider and we built products for developers to help build and run",
    "start": "103079",
    "end": "108759"
  },
  {
    "text": "distributed systems at scale I'm also one of the deer Community managers uh there are three of them in total and",
    "start": "108759",
    "end": "114840"
  },
  {
    "text": "every other week we host like a deer Community call where we like highlight some new features in a new deer release",
    "start": "114840",
    "end": "120640"
  },
  {
    "text": "and also have um depper end users come over and talk about how about their experience with with",
    "start": "120640",
    "end": "126399"
  },
  {
    "text": "deer um I consider myself a longtime developer supporter so if you need maybe like a nudge in your your developer uh",
    "start": "126399",
    "end": "133440"
  },
  {
    "text": "career or maybe you want to do something more in the developer Community uh please reach out I'm always happy to help um if you want to know a bit more",
    "start": "133440",
    "end": "140720"
  },
  {
    "text": "about me and all of my uh too many creative Hobbies like creative coding creating pixel art uh feel free to have",
    "start": "140720",
    "end": "146360"
  },
  {
    "text": "a look at Mark D.D um some of you went to like Joe talk",
    "start": "146360",
    "end": "151800"
  },
  {
    "text": "earlier uh she also showed like FS cets uh that's one of the things I also contributed to uh a lot of the um let's",
    "start": "151800",
    "end": "159239"
  },
  {
    "text": "say animals in here um I've I've created so for instance if you want to literally have like a virtual rubber duck in your",
    "start": "159239",
    "end": "165959"
  },
  {
    "text": "IDE you can use the vs code P extension uh and then talk to your rber do uh to",
    "start": "165959",
    "end": "171159"
  },
  {
    "text": "solve your own problem and like different different different animations and stuff like that so I'll I'll I'll",
    "start": "171159",
    "end": "176959"
  },
  {
    "text": "keep I'll keep it on for now um all right so let's let's move on to failure right so let's let's start",
    "start": "176959",
    "end": "182959"
  },
  {
    "text": "with failure and I did some research on the internet and there was this great blog post on the i e uh blog it's",
    "start": "182959",
    "end": "188000"
  },
  {
    "text": "already quite old from 2015 and it's named lessons from a decade of it failures so they looked at all the it",
    "start": "188000",
    "end": "194519"
  },
  {
    "text": "failures or all the public ones between 2005 and 20 2015 uh and they did lots of",
    "start": "194519",
    "end": "200120"
  },
  {
    "text": "analysis on them and one of these things well the first one is actually show this chart uh which shows like what the cost",
    "start": "200120",
    "end": "207159"
  },
  {
    "text": "involved in all these it failures and you can see here the the the biggest ring is like $1 billion of of cost and",
    "start": "207159",
    "end": "215159"
  },
  {
    "text": "here you can see that distributed across like different regions and also over time so it's very clear that are like",
    "start": "215159",
    "end": "220519"
  },
  {
    "text": "dozens and probably hundreds of billions of uh it costs due to failing it systems",
    "start": "220519",
    "end": "227280"
  },
  {
    "text": "now I'm not claiming that by following this talk this will be like reduced to zero right there will always be failures",
    "start": "227280",
    "end": "232879"
  },
  {
    "text": "um but you can definitely like use some use some nice tools to maybe like maybe sometimes minimize the impact of those",
    "start": "232879",
    "end": "238879"
  },
  {
    "text": "failures one of the quotes actually was was really quite interesting to me it was about the night Capital group and within",
    "start": "238879",
    "end": "245680"
  },
  {
    "text": "45 minutes of of Trades they lost $440 Million by a change in an algorithm they",
    "start": "245680",
    "end": "252720"
  },
  {
    "text": "uh uh they push to production so yeah that that's of course not in a situation you you want to be in of course like",
    "start": "252720",
    "end": "259079"
  },
  {
    "text": "there's always people involved mistakes can happen uh but I really hope that that none of you like push this kind of",
    "start": "259079",
    "end": "264360"
  },
  {
    "text": "change to production and uh lose like so many millions in 45 minutes",
    "start": "264360",
    "end": "270919"
  },
  {
    "text": "um so maybe you've seen Leila's talk yesterday about the um modular monolith",
    "start": "270919",
    "end": "276919"
  },
  {
    "text": "because she she claimed okay it's very difficult to build these distributed applications U like um like like in a",
    "start": "276919",
    "end": "283360"
  },
  {
    "text": "good way because it's it's complex right and that's definitely true there are a lot of moving Parts in these applications lots of different Services",
    "start": "283360",
    "end": "290039"
  },
  {
    "text": "each with their own configuration lots of different stage stores are involved and message cues and so on and you need",
    "start": "290039",
    "end": "295639"
  },
  {
    "text": "to make sure that the communication is secure you need to have like observability in place but these things also need to be",
    "start": "295639",
    "end": "302320"
  },
  {
    "text": "resilient um and there's lot of things that can go wrong so who here has heard of the fallacies of distributed",
    "start": "302320",
    "end": "308120"
  },
  {
    "text": "computing can I see like show of hands okay some people have heard about it so it's a set of false assumptions",
    "start": "308120",
    "end": "314520"
  },
  {
    "text": "programmers new to distributed computing uh often make because they either really don't think about the the issue uh or",
    "start": "314520",
    "end": "320600"
  },
  {
    "text": "yeah they just really don't know about it um and one of the yeah prettyy most",
    "start": "320600",
    "end": "326360"
  },
  {
    "text": "well known ones is of course that they think that the network is reliable right I make an HTP call and I think the the",
    "start": "326360",
    "end": "331840"
  },
  {
    "text": "thing on the other end will will always be like available not nothing happens in between uh that's of course not not true",
    "start": "331840",
    "end": "338240"
  },
  {
    "text": "I'm not going to go through all of these uh these things I definitely want to highlight this this last link here um that's a playlist on YouTube by UD Dean",
    "start": "338240",
    "end": "345520"
  },
  {
    "text": "from particular software who gives like a a five minute intro into all of these fallacies and explains why they're",
    "start": "345520",
    "end": "350680"
  },
  {
    "text": "important to know about so definitely look into that when I share the the link with you",
    "start": "350680",
    "end": "356560"
  },
  {
    "text": "later all right um so if you're in this this business of creating distributed applications right and it typically",
    "start": "356560",
    "end": "362560"
  },
  {
    "text": "happens with large Enterprises where many different development teams are involved and it all they all need to go",
    "start": "362560",
    "end": "367720"
  },
  {
    "text": "in their own pace but still make some kind of one coherent system um yeah then you definitely need",
    "start": "367720",
    "end": "373360"
  },
  {
    "text": "to think about these cross cutting concerns right about security and observability and and resiliency and",
    "start": "373360",
    "end": "378639"
  },
  {
    "text": "that's then where deer comes in uh deer is the dispute application runtime so",
    "start": "378639",
    "end": "383680"
  },
  {
    "text": "who who here has heard about deer quite some people nice okay perfect so who is actually using deer at the moment okay",
    "start": "383680",
    "end": "390759"
  },
  {
    "text": "some folks are okay please please come see me afterwards because I I might have something for you that that would be",
    "start": "390759",
    "end": "396120"
  },
  {
    "text": "useful um so deer is is about like five years old now so in uh this year in October it will be 5 years old and there",
    "start": "396120",
    "end": "402199"
  },
  {
    "text": "will be like a virtual deer conference called deer day uh Marcus indivitual will give the keynote so please need to",
    "start": "402199",
    "end": "408520"
  },
  {
    "text": "join this this this online thing um and DEA provides apis for yeah building secure and reliable microservices and",
    "start": "408520",
    "end": "414960"
  },
  {
    "text": "it's used by a a lot of big big companies so if you are uh running your",
    "start": "414960",
    "end": "421080"
  },
  {
    "text": "workload with depper uh depper uses a sidecar pattern so that means that next to your application which runs in a",
    "start": "421080",
    "end": "426520"
  },
  {
    "text": "process there's another process the sidecar process and and deer runs in that sidecar process and deer takes care",
    "start": "426520",
    "end": "432319"
  },
  {
    "text": "of all of the heavy lifting so all of the communication that happens between services and between services and other resources that all goes through the Deer",
    "start": "432319",
    "end": "439800"
  },
  {
    "text": "Side Car um and that's great because yeah deer has observability built in and since all of the communication goes",
    "start": "439800",
    "end": "445520"
  },
  {
    "text": "through the Deer Side Car you have like good good tracing insights there also deer comes built in with all kinds of",
    "start": "445520",
    "end": "451639"
  },
  {
    "text": "resiliency policies I'll demonstrate some of these policies later in this talk and um yeah deer is also secure",
    "start": "451639",
    "end": "457759"
  },
  {
    "text": "secure by default as well and you can also configure quite granularly which services are allowed to talk to each",
    "start": "457759",
    "end": "463440"
  },
  {
    "text": "other which Services allowed to um to publish manage messages on the message broker to communicate to which stage",
    "start": "463440",
    "end": "469599"
  },
  {
    "text": "stores and so on another benefit of of deer is that it provides like a whole Suite of API",
    "start": "469599",
    "end": "476360"
  },
  {
    "text": "building blocks so in this session I'm going to talk about mostly workflow and a bit of service ification and State",
    "start": "476360",
    "end": "481520"
  },
  {
    "text": "Management since those are in my in my demo uh but as you can see there are many many more different building blocks",
    "start": "481520",
    "end": "487440"
  },
  {
    "text": "uh there are actually 10 at the moment here I'm only listing nine uh but since deera 114 there's now also a jobs API",
    "start": "487440",
    "end": "493479"
  },
  {
    "text": "that you can use to schedule tasks so deer your deer workload is usually run on top of kubernetes it can",
    "start": "493479",
    "end": "499960"
  },
  {
    "text": "either be like plain kubernetes or any of the managed kubernetes on on a major clouds um I do want to call out call out",
    "start": "499960",
    "end": "506280"
  },
  {
    "text": "two services so there's also Azure container apps which also supports depper uh and one of the Dig grid products",
    "start": "506280",
    "end": "511440"
  },
  {
    "text": "called Catalyst also supports depper so catalyst is like deer as a service you can basically call uh depper API from",
    "start": "511440",
    "end": "518518"
  },
  {
    "text": "any type of compute also like a serverless function for instance U the really nice thing about",
    "start": "518519",
    "end": "524600"
  },
  {
    "text": "deer is that the API is decoupled from the underlying resources so here we see a list of all of the all of the apis but",
    "start": "524600",
    "end": "531200"
  },
  {
    "text": "if we pick for instance the State Management API so deer you can do key value pair State Management with deer",
    "start": "531200",
    "end": "537399"
  },
  {
    "text": "but deer itself is not a is not a state store but you can configure deer to use like many different Stage Stores via like",
    "start": "537399",
    "end": "543680"
  },
  {
    "text": "configuration files via yo files these are named component files um and that",
    "start": "543680",
    "end": "548720"
  },
  {
    "text": "allows you to easily like swap out different components and you can use it to uh yeah have your workload land on",
    "start": "548720",
    "end": "555920"
  },
  {
    "text": "different clouds um but I mostly use it to switch between my local development environment and my production",
    "start": "555920",
    "end": "561480"
  },
  {
    "text": "environment so if I'm developing depper applications locally so here I have like three applications um I can use like a",
    "start": "561480",
    "end": "567800"
  },
  {
    "text": "local file which which contains some some keys just to make sure you don't check it into into Source control um I",
    "start": "567800",
    "end": "573440"
  },
  {
    "text": "use like the provided Rish container for pop sub messaging because if you install the deer CLI you get this red container",
    "start": "573440",
    "end": "580320"
  },
  {
    "text": "and I and I can use like an inmemory store U when I use my key value uh API",
    "start": "580320",
    "end": "586279"
  },
  {
    "text": "so that's what what I'm using when I'm developing locally but but then when I push to the cloud I can swap out these",
    "start": "586279",
    "end": "592000"
  },
  {
    "text": "component files so in your cicd pipeline you switch to a different set of uh component files and then you can use",
    "start": "592000",
    "end": "597880"
  },
  {
    "text": "like aure Kea for for key API uh service bus for your pops up",
    "start": "597880",
    "end": "603000"
  },
  {
    "text": "messaging and and as C DP and with these changes uh none of your application code",
    "start": "603000",
    "end": "609200"
  },
  {
    "text": "is changing because in your application you're using the the deer API and not all of these specific resource",
    "start": "609200",
    "end": "616920"
  },
  {
    "text": "apis all right let's move over to to dribble execution um so the problem is",
    "start": "616959",
    "end": "623480"
  },
  {
    "text": "that a lot of it systems are failing and of course for for different reasons uh and a lot of organizations are losing money about about this and of course",
    "start": "623480",
    "end": "630120"
  },
  {
    "text": "they don't want that so ideally um we can't really prevent systems from failing um but we can do something about",
    "start": "630120",
    "end": "636600"
  },
  {
    "text": "maybe like a retrying stuff more right or if like a process goes down maybe just restart that process and hopefully",
    "start": "636600",
    "end": "642680"
  },
  {
    "text": "automatically things will start working again and we can also do something about just limiting the impact of of failure",
    "start": "642680",
    "end": "649560"
  },
  {
    "text": "uh so so that's that's definitely happening and one of the things is called like dribble execution uh so what does it mean well it's like a way of",
    "start": "649560",
    "end": "655800"
  },
  {
    "text": "running code in a stateful way so that that sounds a bit weird um but in case that uh that that code",
    "start": "655800",
    "end": "662040"
  },
  {
    "text": "then uh stops if if if if if the run time then stops a new process is started and then the the code is still run to",
    "start": "662040",
    "end": "669200"
  },
  {
    "text": "completion now if that sounds familiar you might think of okay maybe that sounds a bit like maybe a workflow engine uh and you're right dribble",
    "start": "669200",
    "end": "676040"
  },
  {
    "text": "execution is just like a new fancy term uh but it actually means a lot of the same things as having like a workflow",
    "start": "676040",
    "end": "682200"
  },
  {
    "text": "engine because most workflow engines are also uh stateful right you define a set of activities they will are executed in",
    "start": "682200",
    "end": "688639"
  },
  {
    "text": "a certain order um and the workflow state is all usually persisted now I'm going to show you an",
    "start": "688639",
    "end": "695279"
  },
  {
    "text": "an animation that shows what communication happens between the workflow and a Stage store typ yeah so",
    "start": "695279",
    "end": "700519"
  },
  {
    "text": "this is not specific to Deer workflow it happens with all kinds of workflow systems so a lot of data is persisted so",
    "start": "700519",
    "end": "706360"
  },
  {
    "text": "for instance the workflow ID and the payload is persisted the first activity input is then persisted and then when",
    "start": "706360",
    "end": "712959"
  },
  {
    "text": "the activity first activity is done also that output is persisted then the workflow will replay so it will not",
    "start": "712959",
    "end": "718600"
  },
  {
    "text": "actually continue to the next activity but it will restart it will read the data from the Stage store then it will",
    "start": "718600",
    "end": "724360"
  },
  {
    "text": "schedule the second activity and log that input uh when Activity 2 is completed it will also log the output um",
    "start": "724360",
    "end": "730959"
  },
  {
    "text": "then it will replay again from the start uh read all the data back from the Stage store um in into memory then it will",
    "start": "730959",
    "end": "738680"
  },
  {
    "text": "schedule the third one and actually log the input again and when the third activity is completed it also um save",
    "start": "738680",
    "end": "744720"
  },
  {
    "text": "the output again then the final replay will happen and it will check that all of the is already in the state store so",
    "start": "744720",
    "end": "751399"
  },
  {
    "text": "it will rehydrate that and then finally the workflow is completed and also that output is stored in the Stage store so",
    "start": "751399",
    "end": "757600"
  },
  {
    "text": "as you can see there's a lot of IO going on in these in these workflow systems um",
    "start": "757600",
    "end": "762639"
  },
  {
    "text": "and yeah you really have to have to think about that a bit because you also want your performance to uh to to stay",
    "start": "762639",
    "end": "767839"
  },
  {
    "text": "to stay good so I'll give you some tips later as well so there are like many different",
    "start": "767839",
    "end": "773800"
  },
  {
    "text": "workflow systems also many different ways to author your workflows right so it usually started out in bit of a",
    "start": "773800",
    "end": "779720"
  },
  {
    "text": "visual way maybe you've like used logic apps or maybe Ed like B it's more like",
    "start": "779720",
    "end": "785600"
  },
  {
    "text": "dragging some stuff over but yeah the authoring types that are like now very popular are more like code based right",
    "start": "785600",
    "end": "791560"
  },
  {
    "text": "and yeah those are ideal for us because we're developers we like to deal with code uh so also writing I think uh",
    "start": "791560",
    "end": "797279"
  },
  {
    "text": "authoring our workflows is good for us if we can do that in code especially because it's like part of the source code so hopefully there's like kind of a",
    "start": "797279",
    "end": "803720"
  },
  {
    "text": "PR review when you submit it to a source control and you can also unit test your",
    "start": "803720",
    "end": "809199"
  },
  {
    "text": "um your workflows which I think is really a big benefit so there different types of um workflows code Solutions so",
    "start": "809199",
    "end": "815360"
  },
  {
    "text": "and well known one is for instance temporal there there's restate aure durable functions I I've used that a lot",
    "start": "815360",
    "end": "821519"
  },
  {
    "text": "so who here has used durable functions okay quite some people so um so if you use derable functions and if you then",
    "start": "821519",
    "end": "827680"
  },
  {
    "text": "look at deer workflow you'll see a lot of similarities a lot of the method names are are are the same and that's",
    "start": "827680",
    "end": "833600"
  },
  {
    "text": "because the guy that wrote dble functions Chris Gillum is also the the person who helped us with writing a deer workflow",
    "start": "833600",
    "end": "841040"
  },
  {
    "text": "um so I will share like a couple of um workflow patterns that are typically used when you use these uh these",
    "start": "841040",
    "end": "846160"
  },
  {
    "text": "workflow as code Solutions um so the first one is H is Task chaining that's the most basic one and you use this when",
    "start": "846160",
    "end": "852320"
  },
  {
    "text": "the order of the activities is important so I first want to execute activity a and then B and then C and that's",
    "start": "852320",
    "end": "858360"
  },
  {
    "text": "typically because the output of a is then used as an input for for B uh another pattern is called the fan",
    "start": "858360",
    "end": "865040"
  },
  {
    "text": "out fan in one uh so here the order of the activities doesn't matter at all and so these can be like all scheduled like",
    "start": "865040",
    "end": "870839"
  },
  {
    "text": "async we don't really care which one gets executed first but the nice thing is that we can instruct the workflow to",
    "start": "870839",
    "end": "876560"
  },
  {
    "text": "actually wait until all of these um activities have been completed or we can instruct workflow to just wait until the",
    "start": "876560",
    "end": "882880"
  },
  {
    "text": "first one has completed and then continue so this is a really really powerful pattern and the next one monitor uh so",
    "start": "882880",
    "end": "890120"
  },
  {
    "text": "that's often used when you want to do some kind of a reoccurring um activity and then wait a bit so maybe you want uh",
    "start": "890120",
    "end": "896079"
  },
  {
    "text": "you want to um do like a nightly cleanup of some Cloud resources so what you can do there is you can use the this first",
    "start": "896079",
    "end": "902120"
  },
  {
    "text": "activity to call an an API endpoint in your Cloud to clean up some resources then you can use like the the timer",
    "start": "902120",
    "end": "908880"
  },
  {
    "text": "object of the workflow context to uh to introduce a delay so maybe you want to wait for one day and then you want to",
    "start": "908880",
    "end": "915240"
  },
  {
    "text": "execute it again and uh the continue as new instructs the workflow to continue as a new Fresh instance uh this is",
    "start": "915240",
    "end": "922160"
  },
  {
    "text": "different than the replay Behavior because replay behavior is all belongs to all to the same ID and builds up a",
    "start": "922160",
    "end": "928480"
  },
  {
    "text": "history for that um workflow instance but continue as new instructs the workflow to to forget about the entire",
    "start": "928480",
    "end": "936800"
  },
  {
    "text": "history the final one is the external system interaction also known as like human interaction and the nice thing",
    "start": "937240",
    "end": "942959"
  },
  {
    "text": "about this is then the workflow will wait until it uh until it has received an event that comes from the outside so",
    "start": "942959",
    "end": "948720"
  },
  {
    "text": "this is quite typical when you do kind of a um approval process so for instance you want to buy a expensive laptop and",
    "start": "948720",
    "end": "954240"
  },
  {
    "text": "you need approval from your manager and then you can run an activity that sends a message to your manager from okay",
    "start": "954240",
    "end": "959279"
  },
  {
    "text": "please can I buy this expensive laptop and then the manager uses a different system and that will send a message back",
    "start": "959279",
    "end": "964880"
  },
  {
    "text": "to this um instance of your workflow and then based on the payload of that event you can have decide okay this is either",
    "start": "964880",
    "end": "970600"
  },
  {
    "text": "approved and we go this route or this is not approved and we go to the other route and uh what happens often is of",
    "start": "970600",
    "end": "977519"
  },
  {
    "text": "course you combine these different patterns into one workflow right so that's that's what happens so as an",
    "start": "977519",
    "end": "983000"
  },
  {
    "text": "example here this workflow is a started when a message is received from a um a message bus and we do do an activity",
    "start": "983000",
    "end": "989480"
  },
  {
    "text": "where we use the deer um secret API to retrieve a secret uh then we wait for an external event and then we call two",
    "start": "989480",
    "end": "996759"
  },
  {
    "text": "activities in in parallel one that stores the event result and one that invokes an API and only once these two",
    "start": "996759",
    "end": "1004199"
  },
  {
    "text": "have completed then we continue with the final activity d uh which puts yet a message on another bus so this is quite",
    "start": "1004199",
    "end": "1010959"
  },
  {
    "text": "typical way of doing doing workflow stuff okay it's almost almost demo time",
    "start": "1010959",
    "end": "1016680"
  },
  {
    "text": "so a bit behind the scenes of the of the workflow engine so there are yeah some some different moving Parts in in play",
    "start": "1016680",
    "end": "1022480"
  },
  {
    "text": "at play here so your workflow application uh that contains your own workflow code right so the workflow you",
    "start": "1022480",
    "end": "1028079"
  },
  {
    "text": "can write it in different languages I'll show it in C but you can also write workflow in Java JavaScript python go uh",
    "start": "1028079",
    "end": "1034558"
  },
  {
    "text": "so so the workflow app contains your workflow and activity definitions and it will also do the execution of the of the",
    "start": "1034559",
    "end": "1040760"
  },
  {
    "text": "code uh but the scheduling of that workflow and all of its activities that's been handled by the deer side car",
    "start": "1040760",
    "end": "1046280"
  },
  {
    "text": "so the Deer Side Car contains the depper workflow engine and as soon as you start up your application uh the Deer Side",
    "start": "1046280",
    "end": "1052400"
  },
  {
    "text": "card will also spin up and then a GPC stream will be established between those two processes uh and there will be a lot",
    "start": "1052400",
    "end": "1058600"
  },
  {
    "text": "of communication going back and forth between the two uh to schedule all the activities but also to uh provide the",
    "start": "1058600",
    "end": "1064919"
  },
  {
    "text": "input and output results U from the workflow app but also completely back to the append only Stage",
    "start": "1064919",
    "end": "1072480"
  },
  {
    "text": "store all right so I'm going to do like a workflow demo now and quite a simple application it's like two apption one",
    "start": "1074000",
    "end": "1079480"
  },
  {
    "text": "has the uh workflow and that it's going to do kind of a validation on on an order it will check an an inventory",
    "start": "1079480",
    "end": "1085480"
  },
  {
    "text": "which is like a key Value Store um if the item is uh present if if there if",
    "start": "1085480",
    "end": "1091039"
  },
  {
    "text": "there's enough inventory we actually continue and we'll uh request some some shipping cost so we'll check with three",
    "start": "1091039",
    "end": "1097320"
  },
  {
    "text": "different shippers uh what the shipping cost will be for this item uh we will choose the cheapest one and then we'll",
    "start": "1097320",
    "end": "1102480"
  },
  {
    "text": "register the shipment also for at this shipping service",
    "start": "1102480",
    "end": "1107880"
  },
  {
    "text": "all right moving into into this folder um so this is a net 8 application uh and",
    "start": "1110159",
    "end": "1115320"
  },
  {
    "text": "we're using the deer workflow package here that's the only dependency we have and we're using the most recent version that's uh version 114 it came out two",
    "start": "1115320",
    "end": "1123000"
  },
  {
    "text": "weeks ago um the program CS file of that I'll just highlight a couple of things not",
    "start": "1123000",
    "end": "1129200"
  },
  {
    "text": "the complete thing uh it's very important when you use deer workflow that you are registering uh the workflows in in your setup so here we",
    "start": "1129200",
    "end": "1135799"
  },
  {
    "text": "have the add deer workflow extension method on the service collection and here we are we are reducing the",
    "start": "1135799",
    "end": "1141200"
  },
  {
    "text": "workflow and also its activity so if if you don't do this if you just create your workflows if you write them but you",
    "start": "1141200",
    "end": "1146480"
  },
  {
    "text": "you don't register them the the deer side car has no idea that there are like workflows and activities present uh so",
    "start": "1146480",
    "end": "1152320"
  },
  {
    "text": "this is a step that that you need to do so this is quite different for instance when compared to uh dribble functions for",
    "start": "1152320",
    "end": "1158240"
  },
  {
    "text": "instance um this application also contains a couple of endpoints so uh one endpoint that we will call that will",
    "start": "1158240",
    "end": "1164120"
  },
  {
    "text": "actually start the workflow so we will make a request to validate order that is using the deer workflow client and that",
    "start": "1164120",
    "end": "1170400"
  },
  {
    "text": "will schedule a new workflow uh we then provide the name of the workflow and we",
    "start": "1170400",
    "end": "1176240"
  },
  {
    "text": "provideed an instance ID uh this is optional if you don't provide instance ID uh the deer workflow engine will",
    "start": "1176240",
    "end": "1182039"
  },
  {
    "text": "create one for you uh and we provide an input uh and what we get back is uh the instance ID again but it's the same one",
    "start": "1182039",
    "end": "1189120"
  },
  {
    "text": "that we already provided uh but yeah you need to remember that everything is asynchronous right we do not get back a",
    "start": "1189120",
    "end": "1194200"
  },
  {
    "text": "real result of the workflow because this workflow could be like a long running process that could take many hours hours or days to complete so what we get back",
    "start": "1194200",
    "end": "1200960"
  },
  {
    "text": "is the instance ID and with that instance ID we can actually query the the workflow engine about it",
    "start": "1200960",
    "end": "1207400"
  },
  {
    "text": "State uh there was some additional end points to just manipulate the the",
    "start": "1207400",
    "end": "1213200"
  },
  {
    "text": "inventory all right so this is the workflow class itself it's just a regular net class uh we inherit from a",
    "start": "1213679",
    "end": "1218919"
  },
  {
    "text": "base type in this deer workflow package called workflow and we specify the input type and the output type then you need",
    "start": "1218919",
    "end": "1226600"
  },
  {
    "text": "to overwrite uh the run async method meod and with that you get access to a workflow context that we will use and",
    "start": "1226600",
    "end": "1233000"
  },
  {
    "text": "this is the order input so the first thing what we're doing here is we use the context to call",
    "start": "1233000",
    "end": "1238600"
  },
  {
    "text": "an activity async and we are calling it again by name so we're calling an update infantry activity we provided our order",
    "start": "1238600",
    "end": "1245799"
  },
  {
    "text": "item and what we get back is an inventory result so that's here and then we uh had that as a Boolean is there",
    "start": "1245799",
    "end": "1252200"
  },
  {
    "text": "sufficient stock uh if that's the case then I have a list of three shipping services so this is like clearly demo",
    "start": "1252200",
    "end": "1258280"
  },
  {
    "text": "code right right because you probably like want to query another API that gives you back all the different shipping Services uh this is just a",
    "start": "1258280",
    "end": "1264039"
  },
  {
    "text": "simple demo um so what we're going to do now is we are going to call another activity for each of these three",
    "start": "1264039",
    "end": "1269440"
  },
  {
    "text": "shipping services so this is an example of fan out fan in um but I first Define",
    "start": "1269440",
    "end": "1274880"
  },
  {
    "text": "is a list of task shipping cost result so this is the output of the activity",
    "start": "1274880",
    "end": "1280000"
  },
  {
    "text": "that I want to call then I'm iterating over all of these uh shipping services so shipping service a b and c I prepare",
    "start": "1280000",
    "end": "1287039"
  },
  {
    "text": "a request for all of them and here I call the activity get shipping cost with this",
    "start": "1287039",
    "end": "1292480"
  },
  {
    "text": "request uh but you can see uh call this activity I'm not awaiting this call so with with the first one example I'm",
    "start": "1292480",
    "end": "1298480"
  },
  {
    "text": "awaiting this call so then the workflow will actually stop be and it will",
    "start": "1298480",
    "end": "1303840"
  },
  {
    "text": "actually execute this activity and then it will continue um but here I'm not awaiting this call so the output here is",
    "start": "1303840",
    "end": "1310320"
  },
  {
    "text": "just a task that will be executed later so uh this variable shipping cost result",
    "start": "1310320",
    "end": "1316400"
  },
  {
    "text": "tasks then contains like three tasks and I want to execute all of them uh and this is where the magic happens so here",
    "start": "1316400",
    "end": "1321760"
  },
  {
    "text": "we do await task when all and this is the part that then starts the fan out but then also Waits until all of these",
    "start": "1321760",
    "end": "1328120"
  },
  {
    "text": "tasks have been completed uh and only then we will continue with the rest so when all of these three tasks have been",
    "start": "1328120",
    "end": "1334480"
  },
  {
    "text": "completed I can then find out what is the cheapest uh of these shipping",
    "start": "1334480",
    "end": "1339520"
  },
  {
    "text": "services and then the next part I want to register my order uh for for this",
    "start": "1339520",
    "end": "1345000"
  },
  {
    "text": "shipment provider so I'm calling at another activity call Reg shipment and provide the shipment request and then I",
    "start": "1345000",
    "end": "1350880"
  },
  {
    "text": "get back a register shipment result now I wrap this in a try catch just to",
    "start": "1350880",
    "end": "1356520"
  },
  {
    "text": "illustrate that you can yeah do a bit more um bit more like U to prevent some",
    "start": "1356520",
    "end": "1362440"
  },
  {
    "text": "some more failure for for what's happening so in case this call fails we can choose like another path right we can choose like to do like some kind of",
    "start": "1362440",
    "end": "1369039"
  },
  {
    "text": "a compensation action in case this this action fails um so in case this register",
    "start": "1369039",
    "end": "1374440"
  },
  {
    "text": "shipment fails I already um updated my inventory because that was the very first step so as an example uh the",
    "start": "1374440",
    "end": "1381080"
  },
  {
    "text": "compensation action I'm doing now is I'm actually undoing my uh previously done inventory update right I mean it's just",
    "start": "1381080",
    "end": "1387880"
  },
  {
    "text": "just a basic demo um in a real life situation you probably want to maybe update your inventory in a later stage it's also fine or choose some kind of a",
    "start": "1387880",
    "end": "1394640"
  },
  {
    "text": "different compensation action it's totally up to you what do you want to do uh about this compensation action um but",
    "start": "1394640",
    "end": "1401279"
  },
  {
    "text": "in this case I actually undoing my uh my update to the inventory uh so it's restored in the previous state",
    "start": "1401279",
    "end": "1409799"
  },
  {
    "text": "um okay I'll show you just one um example of an activity because all of",
    "start": "1411159",
    "end": "1416400"
  },
  {
    "text": "them have the same the same structure so again an activity is also just a C Class you inherit from workflow activity again",
    "start": "1416400",
    "end": "1422960"
  },
  {
    "text": "from the deer workflow package again this is the input type this is the output",
    "start": "1422960",
    "end": "1428120"
  },
  {
    "text": "type um I have a Constructor here because I am actually uh injecting the deer client because I'm uh using that to",
    "start": "1428120",
    "end": "1435279"
  },
  {
    "text": "manipulate the the state store again you have to override the Run async method and what I'm doing here is I'm using the",
    "start": "1435279",
    "end": "1441600"
  },
  {
    "text": "deer client and retrieve the state I want to see do I have uh this this product in my inventory and if I do have",
    "start": "1441600",
    "end": "1448159"
  },
  {
    "text": "something in my inventory and the quantity is um at least as big as the quantity that I'm order",
    "start": "1448159",
    "end": "1453720"
  },
  {
    "text": "ordering then it's all good I'm creating like a new inventory object and then I'm uh saving that again using the deer",
    "start": "1453720",
    "end": "1462080"
  },
  {
    "text": "client all right I'm not doing all the other activities because we don't really have time for that uh okay sorry sorry",
    "start": "1463000",
    "end": "1468480"
  },
  {
    "text": "ducky I'm just removing you again all right so um now it's time to run them I'm not going to do the simulate issue",
    "start": "1468480",
    "end": "1475000"
  },
  {
    "text": "let's do first like a happy path and then we'll do like um what happens if the process is is dead so I'm using uh",
    "start": "1475000",
    "end": "1481480"
  },
  {
    "text": "the depper CLI uh and with the Deer multi-app Run feature so I'm going to",
    "start": "1481480",
    "end": "1486760"
  },
  {
    "text": "click or type deer run- F and then dot um this will load this file so this this",
    "start": "1486760",
    "end": "1493640"
  },
  {
    "text": "file is located in this um in this in this folder this deer. yo file and this",
    "start": "1493640",
    "end": "1498720"
  },
  {
    "text": "contains the the configuration of what I want to run now locally so it points to a resources uh path and that contains my",
    "start": "1498720",
    "end": "1505480"
  },
  {
    "text": "component files which which stage store I'm using what kind of deer configur configuration I'm using and it has a",
    "start": "1505480",
    "end": "1511760"
  },
  {
    "text": "list of all of my deer applications that I want to run in one go so in this case I'm running a workflow application and",
    "start": "1511760",
    "end": "1518559"
  },
  {
    "text": "I'm running a shipping application okay so let's let's run",
    "start": "1518559",
    "end": "1523919"
  },
  {
    "text": "this and uh logging is set to to quite for both so you'll see lots of logging statement coming by um so now I have",
    "start": "1523919",
    "end": "1530679"
  },
  {
    "text": "like two applications uper running the workfl application and the uh shipping application and there's also a uh Stage",
    "start": "1530679",
    "end": "1536279"
  },
  {
    "text": "store which is a um reddish reddish container um so now I'm going to uh call",
    "start": "1536279",
    "end": "1542200"
  },
  {
    "text": "this this validate endpoint and for that I'm using yet another vs code extension called the vs code rest client um if you",
    "start": "1542200",
    "end": "1549240"
  },
  {
    "text": "have this rest client installed uh you can write these HTP files or rest files",
    "start": "1549240",
    "end": "1554520"
  },
  {
    "text": "um and you can use like variables and you can write your your end points like this I'm going to do a post to this workflow URL to this inventory endpoint",
    "start": "1554520",
    "end": "1562320"
  },
  {
    "text": "uh to actually make sure I am have enough inventory um so there's this button here above this this endpoint",
    "start": "1562320",
    "end": "1569159"
  },
  {
    "text": "called send request and that will execute my request and then we'll see the output here on the right I'll so uh",
    "start": "1569159",
    "end": "1576279"
  },
  {
    "text": "so this is just restocking uh the inventory so this is no workflow stuff yet uh so so I now should have enough uh",
    "start": "1576279",
    "end": "1582399"
  },
  {
    "text": "rubber duckies to uh uh to buy yes I've got five perfect so now I can start the",
    "start": "1582399",
    "end": "1588039"
  },
  {
    "text": "work flow so I'm going to call the validate order endpoint and provide this payload I'm going to buy two rubber",
    "start": "1588039",
    "end": "1594480"
  },
  {
    "text": "duckies so uh I'm going to send this and we'll see some stuff happening here right we see some some log statements",
    "start": "1594480",
    "end": "1600520"
  },
  {
    "text": "getting shipping costs for this specific order uh we see uh the the shipping cost that all of these shipping Services um",
    "start": "1600520",
    "end": "1607120"
  },
  {
    "text": "give back one of them is is the cheapest and that will be selected as um as the actual provider and then we see some",
    "start": "1607120",
    "end": "1613600"
  },
  {
    "text": "more statements that orchestration state is completed so that's exactly what we want to see but this was the happy path right so this may be a bit boring um I",
    "start": "1613600",
    "end": "1621360"
  },
  {
    "text": "do want to show as well because this doesn't give a result back right but the",
    "start": "1621360",
    "end": "1627120"
  },
  {
    "text": "workflow does have an have a result so I'm going to do like a get uh to to this",
    "start": "1627120",
    "end": "1632279"
  },
  {
    "text": "workflow endpoint so workflow SL depper and then provide the instance ID that I gave earlier and that will actually give",
    "start": "1632279",
    "end": "1639640"
  },
  {
    "text": "um the actual status of the workflow instance so in this case this validate order workflow is completed uh it shows",
    "start": "1639640",
    "end": "1646600"
  },
  {
    "text": "me what kind of input I gave but this is also the output of this",
    "start": "1646600",
    "end": "1651278"
  },
  {
    "text": "workflow all right so um let's do this again um but now as soon as I have",
    "start": "1651760",
    "end": "1657600"
  },
  {
    "text": "started uh again one of these runs uh I will just completely stop the deer CLI",
    "start": "1657600",
    "end": "1662919"
  },
  {
    "text": "so that means I will stop both the workfl application and the shipping application um so let's see what uh what",
    "start": "1662919",
    "end": "1668559"
  },
  {
    "text": "happens then and then I'm going to restart it again so I'm going to do the same thing uh I'm going to start it all right but",
    "start": "1668559",
    "end": "1675799"
  },
  {
    "text": "now I'm going to stop it right so now uh everything is dead right so there's no workl application there's no shipping",
    "start": "1675799",
    "end": "1681039"
  },
  {
    "text": "application and the last thing what happened uh was that the there was a logging statement from the shipping",
    "start": "1681039",
    "end": "1686760"
  },
  {
    "text": "application uh that uh we were like retrieving shipping costs right that",
    "start": "1686760",
    "end": "1691880"
  },
  {
    "text": "there was I ined a bit of a delay in that shipping Service uh so it did did not actually respond back to the workfl",
    "start": "1691880",
    "end": "1698640"
  },
  {
    "text": "application all right so things are broken um now let's just simply restart",
    "start": "1698640",
    "end": "1703720"
  },
  {
    "text": "uh the whole process and uh let's let's see what happens so I'm going to run uh de run- F again there we",
    "start": "1703720",
    "end": "1712640"
  },
  {
    "text": "go so this is this where we very very left off but we can see it's continuing",
    "start": "1713320",
    "end": "1718480"
  },
  {
    "text": "now right so we getting the cost again for for this order and one of them is uh is probably",
    "start": "1718480",
    "end": "1724720"
  },
  {
    "text": "selected uh actually we don't see",
    "start": "1724720",
    "end": "1731799"
  },
  {
    "text": "it of course this is the this is the demo c not being happy with me",
    "start": "1733200",
    "end": "1739360"
  },
  {
    "text": "okay let me let me do this one more time because this this needs to work this this is not not nice uh first let me",
    "start": "1739360",
    "end": "1744600"
  },
  {
    "text": "make sure that I have enough in stock oh connection was rejected",
    "start": "1744600",
    "end": "1752200"
  },
  {
    "text": "oh oh maybe the Wi-Fi is not uh being happy okay let let me quickly",
    "start": "1752200",
    "end": "1760480"
  },
  {
    "text": "uh that should be fine actually let me start everything up",
    "start": "1761799",
    "end": "1768519"
  },
  {
    "text": "again and",
    "start": "1768519",
    "end": "1771000"
  },
  {
    "text": "restock okay so I'm going to try this again uh I'm making a a post stopping",
    "start": "1775000",
    "end": "1780200"
  },
  {
    "text": "this process so everything is down uh I will I will restart and hopefully it will continue",
    "start": "1780200",
    "end": "1786880"
  },
  {
    "text": "again all right so this is the point that we left off we communicate with with the shipping and yeah it it did work now not",
    "start": "1790679",
    "end": "1798200"
  },
  {
    "text": "sure why I didn't before uh but now we we see that the orchestration is actually continued so now it actually",
    "start": "1798200",
    "end": "1803760"
  },
  {
    "text": "successfully completed that earlier run that was broken off um and also if we we we get the",
    "start": "1803760",
    "end": "1812200"
  },
  {
    "text": "information straight from the um status endpoint we see that the runtime status is completed for this instance right so",
    "start": "1812200",
    "end": "1819399"
  },
  {
    "text": "this is sort of like a not completely selfhealing because I am actually restarting the process again but of",
    "start": "1819399",
    "end": "1824600"
  },
  {
    "text": "course if you're running this on kubernetes then if a b Maybe goes down it will it will restart again so then",
    "start": "1824600",
    "end": "1830519"
  },
  {
    "text": "this will happen automatically um but it definitely indicates that this workflow because of the state is stored in the",
    "start": "1830519",
    "end": "1836399"
  },
  {
    "text": "state store it's being able to actually complete the workflow if it has been like U broken off",
    "start": "1836399",
    "end": "1843519"
  },
  {
    "text": "earlier all right okay so now let's simulate the the other issue um so this is the endpoint",
    "start": "1843519",
    "end": "1851000"
  },
  {
    "text": "in the uh shipment service I'm actually stopping this uh this is the shipment service and this returns this shipment",
    "start": "1851000",
    "end": "1857480"
  },
  {
    "text": "result um but let's just fake that this shipment result like U gives back a server error Ator 500 so this should",
    "start": "1857480",
    "end": "1865279"
  },
  {
    "text": "trigger the try catch block so this should trigger the compensation action to undo uh the um the inventory",
    "start": "1865279",
    "end": "1871799"
  },
  {
    "text": "update um so now I'm going to run",
    "start": "1871799",
    "end": "1878240"
  },
  {
    "text": "again all right and I'm going to start this again make sure that I have enough",
    "start": "1880480",
    "end": "1885600"
  },
  {
    "text": "inventory all right so now again I'm calling the endpoint um and even though",
    "start": "1885600",
    "end": "1891240"
  },
  {
    "text": "that the register service endpoint will give like a 500 I still expect that my orchestration will run uh successfully",
    "start": "1891240",
    "end": "1898120"
  },
  {
    "text": "because I am doing this try catch and I'm doing this compensation action uh so",
    "start": "1898120",
    "end": "1903320"
  },
  {
    "text": "so and that's that's my way of saying for okay yeah you're allowed to go to this alternative path uh so that's why",
    "start": "1903320",
    "end": "1909360"
  },
  {
    "text": "it's still an acceptable result for me okay doing",
    "start": "1909360",
    "end": "1914600"
  },
  {
    "text": "this getting shipping costs but then uh here you see indeed we have a failure",
    "start": "1914600",
    "end": "1920639"
  },
  {
    "text": "fail to register shipment for order uh and here you see that we have the compensation action reverted inventory",
    "start": "1920639",
    "end": "1926480"
  },
  {
    "text": "update for this product and we set it back to quantity five which was are like initial value and that's why uh our uh",
    "start": "1926480",
    "end": "1934039"
  },
  {
    "text": "uh workflow has still has a completed status instead of a failed status right so this is just a way of dealing with",
    "start": "1934039",
    "end": "1940240"
  },
  {
    "text": "failure and trying what is an alternative path and that still makes sense for your business",
    "start": "1940240",
    "end": "1947518"
  },
  {
    "text": "all right so um workflow systems in in general and also workflow as Code system",
    "start": "1950000",
    "end": "1956240"
  },
  {
    "text": "has still have some some challenges and I'm going to walk you through a couple of those um the first thing is that workflows need to be deterministic uh so",
    "start": "1956240",
    "end": "1964000"
  },
  {
    "text": "workflows are being replayed as you saw in this initial animation that that I showed uh and every time a workflow is",
    "start": "1964000",
    "end": "1970919"
  },
  {
    "text": "replayed it needs to yeah be it should result in the exactly same um State as",
    "start": "1970919",
    "end": "1976320"
  },
  {
    "text": "before right uh should always have the exact same outcome so it means that you",
    "start": "1976320",
    "end": "1982000"
  },
  {
    "text": "cannot use non-deterministic operations in your workflow so for instance that includes like creating renom values",
    "start": "1982000",
    "end": "1987960"
  },
  {
    "text": "using guids or using datetime now or maybe calling endpoints directly from",
    "start": "1987960",
    "end": "1993360"
  },
  {
    "text": "from your workflow instead of an activity so what you see here is uh something that that you should not do in",
    "start": "1993360",
    "end": "1998600"
  },
  {
    "text": "your workflow for instance like creating like an order ID with like go new goit in your workflow and uh using this uh in",
    "start": "1998600",
    "end": "2005960"
  },
  {
    "text": "as a parameter when you call a new activ uh uh when you call so what what happens",
    "start": "2005960",
    "end": "2012039"
  },
  {
    "text": "then if if you do this and the workflow will replay uh it will create a new order ID when it replace and that will",
    "start": "2012039",
    "end": "2018760"
  },
  {
    "text": "then mismatch the state that is in present in the state store so when these things do not match up you have like",
    "start": "2018760",
    "end": "2024679"
  },
  {
    "text": "yeah a corrupt history then uh so that that will not work um luckily there are some um methods on the workflow context",
    "start": "2024679",
    "end": "2032559"
  },
  {
    "text": "as so is uh this is the workflow context so it has some helper methods for guids but also for current UT see dat times so",
    "start": "2032559",
    "end": "2039919"
  },
  {
    "text": "that should definitely help you and if you still need to do something that is non-deterministic just make sure you",
    "start": "2039919",
    "end": "2045440"
  },
  {
    "text": "wrap it in an activity because you can do anything in an activity doesn't really matter uh so make sure anything",
    "start": "2045440",
    "end": "2051200"
  },
  {
    "text": "non-deterministic just wrap it in an activity uh the other thing that your",
    "start": "2051200",
    "end": "2057320"
  },
  {
    "text": "workflows need to be is they need to be um itm potent so um if they are run more",
    "start": "2057320",
    "end": "2062679"
  },
  {
    "text": "than once that should not have any side effects um again so this is a bit different than than than the first one",
    "start": "2062679",
    "end": "2069398"
  },
  {
    "text": "um and this is because deer workflow and many of the other workflows they guarantee at least once delivery so an",
    "start": "2069399",
    "end": "2075079"
  },
  {
    "text": "activity will be executed once but an activity might also be executed twice or even three times so your code needs to",
    "start": "2075079",
    "end": "2081480"
  },
  {
    "text": "handle those um those multiple executions of your activities um and that could maybe be a",
    "start": "2081480",
    "end": "2087960"
  },
  {
    "text": "result if you do like a a SQL insert right and you use some kind of product ID as the primary key and if you want to",
    "start": "2087960",
    "end": "2093200"
  },
  {
    "text": "do like the exact same insert with the exact ID well that that will not work right so uh you either need to make sure",
    "start": "2093200",
    "end": "2099119"
  },
  {
    "text": "that you first maybe do a read before you do an insert or maybe need to do like an upsert instead um this is very",
    "start": "2099119",
    "end": "2106079"
  },
  {
    "text": "specific to of course like what kind of database you use um but definitely make sure that your code can be executed like",
    "start": "2106079",
    "end": "2112440"
  },
  {
    "text": "multiple times without having side effects another another thing which is",
    "start": "2112440",
    "end": "2118960"
  },
  {
    "text": "uh quite tricky is what if you have like breaking changes in your workflow because again um if your workflow is um",
    "start": "2118960",
    "end": "2125520"
  },
  {
    "text": "long running uh and you want to like de deploy a new version of your workflow but you still have workflow instances",
    "start": "2125520",
    "end": "2130680"
  },
  {
    "text": "that are in Flight which are not completed yet it means you have some some Old State in your Stage store from",
    "start": "2130680",
    "end": "2137359"
  },
  {
    "text": "a certain version of your workflow but you're now having a new workflow version deployed uh and that does not match with",
    "start": "2137359",
    "end": "2144000"
  },
  {
    "text": "the state in your state store anymore so again that that can lead to to problems so as an example here I've got a a very",
    "start": "2144000",
    "end": "2150000"
  },
  {
    "text": "small workflow with two activities and the input of them is uh this this string this order item string but in my next",
    "start": "2150000",
    "end": "2156560"
  },
  {
    "text": "iteration of this work workflow um I changed the input item of the second one to be the output of the previous one so",
    "start": "2156560",
    "end": "2162319"
  },
  {
    "text": "result a which is now an INT instead of a string I putting that in as my second argument and that the rest stays the",
    "start": "2162319",
    "end": "2168839"
  },
  {
    "text": "same but this is now a breaking change for my workflow right because any workflows that are in flight they still",
    "start": "2168839",
    "end": "2174160"
  },
  {
    "text": "have a string stored uh and that will now be loaded or will be loaded in and",
    "start": "2174160",
    "end": "2179599"
  },
  {
    "text": "yeah there'll be like issues at at runtime and because we have this string but this now expects an",
    "start": "2179599",
    "end": "2186000"
  },
  {
    "text": "in so yeah ways around that could either be uh just like stop accepting uh",
    "start": "2186000",
    "end": "2191240"
  },
  {
    "text": "requests for uh the current workflow right and make sure all of them are like completely uh done all your workflows uh",
    "start": "2191240",
    "end": "2198000"
  },
  {
    "text": "and then update and then accept traffic again to your workflow so so that's one um or indeed uh do do like this and",
    "start": "2198000",
    "end": "2205800"
  },
  {
    "text": "increment all of your workflow so never actually touch an existing workflow once it has been in production always create",
    "start": "2205800",
    "end": "2211680"
  },
  {
    "text": "new ones uh but then of course you also need a way to actually uh update other code that actually use this new workflow",
    "start": "2211680",
    "end": "2218560"
  },
  {
    "text": "so again there's no really super good solution out here uh yeah definitely something to to think",
    "start": "2218560",
    "end": "2225280"
  },
  {
    "text": "about uh final thing about the these workflow challenges is the the workflow and activity payload right so make sure",
    "start": "2225280",
    "end": "2231760"
  },
  {
    "text": "that you only pass very small objects between activities because as you as you saw everything is persisted to to u to a",
    "start": "2231760",
    "end": "2238400"
  },
  {
    "text": "Stage store and also retriev from a Stage store so there's a lot of calization and deserialization going on",
    "start": "2238400",
    "end": "2244240"
  },
  {
    "text": "so if you have like a very large object that you want to pass between different activities yeah that means that there's",
    "start": "2244240",
    "end": "2249520"
  },
  {
    "text": "a lot of like a performance overhead going on um so in this case I have like",
    "start": "2249520",
    "end": "2254599"
  },
  {
    "text": "two activities um and one of them retrieves a large document and this document is used as as an input then for",
    "start": "2254599",
    "end": "2261599"
  },
  {
    "text": "next activity uh please don't do this because this document will be in in the Stage",
    "start": "2261599",
    "end": "2266760"
  },
  {
    "text": "store twice uh first as an output for for this activity but then as an input for this activity so there's like",
    "start": "2266760",
    "end": "2272920"
  },
  {
    "text": "redundant information stored um and so what definitely try to recommend is try",
    "start": "2272920",
    "end": "2279160"
  },
  {
    "text": "to also consolidate and be be pragmatic about all of these activities right so these activities they do not need to be",
    "start": "2279160",
    "end": "2284720"
  },
  {
    "text": "like very uh micro units right so be be pragmatic about the size it's totally fine do the retrieval and update and and",
    "start": "2284720",
    "end": "2292079"
  },
  {
    "text": "storage in in the same activity right so make that your unit of work uh so you're not passing around very big objects",
    "start": "2292079",
    "end": "2298760"
  },
  {
    "text": "between activities all right uh let's switch",
    "start": "2298760",
    "end": "2305680"
  },
  {
    "text": "gears a bit and talk a bit about um the built-in deer resiliency so um deer has different ways",
    "start": "2305680",
    "end": "2312760"
  },
  {
    "text": "of um of handling resiliency um one of them I want to show you first is how you do like residency when it comes to",
    "start": "2312760",
    "end": "2318839"
  },
  {
    "text": "service to service invocation as I mentioned before um you do not actually communicate directly to another service",
    "start": "2318839",
    "end": "2325760"
  },
  {
    "text": "uh but your application talks to Deer Side Car and this Deer Side Car talks to another deer side car and that Deer Side",
    "start": "2325760",
    "end": "2331880"
  },
  {
    "text": "guard talks to the application um and because of this um deer has like buil buil in retry",
    "start": "2331880",
    "end": "2338200"
  },
  {
    "text": "policies and because deer is in control of of all of the communication and and it already comes with some some defaults",
    "start": "2338200",
    "end": "2343680"
  },
  {
    "text": "when it comes to retry policies however you can override them and I will uh I will show you how that's",
    "start": "2343680",
    "end": "2350440"
  },
  {
    "text": "done so what's happening here is we have two applications they communicate via service invocation uh and we're going to send",
    "start": "2350440",
    "end": "2357440"
  },
  {
    "text": "something to from application a to application B and application B will store something in a key value",
    "start": "2357440",
    "end": "2363440"
  },
  {
    "text": "store all right need to get out here in this folder",
    "start": "2363440",
    "end": "2369160"
  },
  {
    "text": "so again this is a net 8 application using deer ASP net core",
    "start": "2369160",
    "end": "2375520"
  },
  {
    "text": "114 and uh what happens here is I have um configured this HTTP client so whenever I want an HTP client injected",
    "start": "2375520",
    "end": "2382400"
  },
  {
    "text": "uh I'm using the depper client to create me an HP client where I set a specific header and this header is the app ID",
    "start": "2382400",
    "end": "2389280"
  },
  {
    "text": "header um and I set this app ID header to application B and so that is the the target um uh application that that that",
    "start": "2389280",
    "end": "2396920"
  },
  {
    "text": "I to communicate with so in this service ification endpoint I mean I didn't have a lot of",
    "start": "2396920",
    "end": "2402319"
  },
  {
    "text": "inspiration for naming endpoints here uh I'm injecting this HTTP client which already has this um app ID header set",
    "start": "2402319",
    "end": "2409560"
  },
  {
    "text": "and I'm doing a post to the/ profile endpoint so I'm calling application b/",
    "start": "2409560",
    "end": "2416200"
  },
  {
    "text": "profile all right application B is also a net8 uh project same setup and what",
    "start": "2416240",
    "end": "2422319"
  },
  {
    "text": "happens here is well there there's a Stage store component name that that I'm using and I'm injecting also the deer",
    "start": "2422319",
    "end": "2427359"
  },
  {
    "text": "client and here I'm saving this this de um uh this profile information uh in my",
    "start": "2427359",
    "end": "2432960"
  },
  {
    "text": "Stage store um so I didn't show you that in the previous example but this is how you",
    "start": "2432960",
    "end": "2439560"
  },
  {
    "text": "actually configure what type of Stage store component you use so this is a component file that lives also in in the",
    "start": "2439560",
    "end": "2445839"
  },
  {
    "text": "same git repo and just by making sure that this metadata name is the same",
    "start": "2445839",
    "end": "2451040"
  },
  {
    "text": "label as you've used in your application code uh it depper knows how to match up",
    "start": "2451040",
    "end": "2456079"
  },
  {
    "text": "uh what kind of stat St you use in this case I'm using the um red estate store which is running locally in as a",
    "start": "2456079",
    "end": "2462640"
  },
  {
    "text": "container and again I'm using the deer multi app run file uh to start these two",
    "start": "2462640",
    "end": "2467800"
  },
  {
    "text": "applications application a and application B all right um we can do do first do the",
    "start": "2467800",
    "end": "2475280"
  },
  {
    "text": "happy PA so let's just oh let's make sure it runs first",
    "start": "2475280",
    "end": "2481039"
  },
  {
    "text": "actually all right so both applications are now uh up and running",
    "start": "2483720",
    "end": "2489240"
  },
  {
    "text": "and um we're going to make this call and this is still the happy path so we see some lock statements for application B",
    "start": "2489480",
    "end": "2495760"
  },
  {
    "text": "that is saved to the Stage store and application a that is communicated with the application B so this is this is all fine this as expected um so now let's uh",
    "start": "2495760",
    "end": "2503599"
  },
  {
    "text": "simulate an issue with with application B uh so what I'm doing now is I'm not using deer deer multi app run I'm just",
    "start": "2503599",
    "end": "2510560"
  },
  {
    "text": "going to run application a first then I'm going to make the HTTP call and then I'm going to wait a couple of seconds",
    "start": "2510560",
    "end": "2516640"
  },
  {
    "text": "and then I'm going to start application B so I'm going to do",
    "start": "2516640",
    "end": "2522119"
  },
  {
    "text": "this and this application",
    "start": "2522119",
    "end": "2526119"
  },
  {
    "text": "B okay so I'm starting application a already and I will copy the commands to",
    "start": "2527240",
    "end": "2532800"
  },
  {
    "text": "uh run application B but not execute that just",
    "start": "2532800",
    "end": "2537640"
  },
  {
    "text": "yet all right so I'm going to going to run the same the same endpoint the service appication endpoint and make the request uh and then we'll see like",
    "start": "2539400",
    "end": "2546160"
  },
  {
    "text": "nothing's happening uh but we do see like an error statement here like error processing operation and we see like retrying in two seconds right so the",
    "start": "2546160",
    "end": "2554079"
  },
  {
    "text": "deer side car is like actively retrying something now so now let's start application",
    "start": "2554079",
    "end": "2560599"
  },
  {
    "text": "B happening and now we see that the request has successfully completed right it took a long time like 16 16 seconds",
    "start": "2560599",
    "end": "2567720"
  },
  {
    "text": "um but we also see here that application a loged recovered processing operation after six attempts right so we we do get",
    "start": "2567720",
    "end": "2574240"
  },
  {
    "text": "some information back on how many attempts it actually took for it to be like successful so this is like a good",
    "start": "2574240",
    "end": "2580920"
  },
  {
    "text": "example of of how to use like resiliency policies in in depper um so this is the resiliency",
    "start": "2580920",
    "end": "2588920"
  },
  {
    "text": "policy that that is using like I mentioned you don't have to configure this yourself because deer already comes",
    "start": "2588920",
    "end": "2594240"
  },
  {
    "text": "with like a decent set of default um configurations uh but if you want like more control uh you can update these",
    "start": "2594240",
    "end": "2600800"
  },
  {
    "text": "yourself uh in this case I am using this policy it's called my constant policy",
    "start": "2600800",
    "end": "2606319"
  },
  {
    "text": "you can either have like constant retries or retries with like exponential back off so it's really quite nicely",
    "start": "2606319",
    "end": "2611839"
  },
  {
    "text": "configurable and so one part is configuring the retry uh you can also configure circuit breakers if you want",
    "start": "2611839",
    "end": "2617920"
  },
  {
    "text": "uh but the other part is where to apply uh this um this rryy so in this case I am my target is application B so it's an",
    "start": "2617920",
    "end": "2625040"
  },
  {
    "text": "application and my retrive policy is my constant policy you can also apply um",
    "start": "2625040",
    "end": "2630640"
  },
  {
    "text": "retrives against components right you can have like outbound um or inbound uh",
    "start": "2630640",
    "end": "2635920"
  },
  {
    "text": "retri policies as well so you can be actually very granular and precise and have different types of retri policies for different types of",
    "start": "2635920",
    "end": "2643960"
  },
  {
    "text": "resources okay so the other example is like an an outbound um component residency so in this case we communicate",
    "start": "2645160",
    "end": "2651920"
  },
  {
    "text": "via the depper side car to a Stage store um so let's uh let's do that and",
    "start": "2651920",
    "end": "2657720"
  },
  {
    "text": "in this case um again deer has like built-in defaults for all all these things uh they have like very long names",
    "start": "2657720",
    "end": "2663839"
  },
  {
    "text": "so this is the default State s component outbound retra policy uh and you can",
    "start": "2663839",
    "end": "2669000"
  },
  {
    "text": "override it if you want if you use exactly the same name so I've like created an override for exactly this",
    "start": "2669000",
    "end": "2674520"
  },
  {
    "text": "this um retry policy uh and I made it exactly the same as the HTTP service verification one so this is a constant",
    "start": "2674520",
    "end": "2680440"
  },
  {
    "text": "policy it'll wait two seconds and then it will like continue indefinitely okay so we can also",
    "start": "2680440",
    "end": "2687000"
  },
  {
    "text": "simulate that uh let me go back here uh I'm going to use the deer multi up running game because I'm now running",
    "start": "2687000",
    "end": "2692839"
  },
  {
    "text": "application A and B again uh but what I'll do now is I will uh stop the",
    "start": "2692839",
    "end": "2698280"
  },
  {
    "text": "reddish container so I'll actually um make my Stage store like",
    "start": "2698280",
    "end": "2704119"
  },
  {
    "text": "unavailable so I'm stopping the container now all right so now now it's stopped and I will copy the command to",
    "start": "2705000",
    "end": "2710760"
  },
  {
    "text": "start it but not execute it yet all right so now I'm going to make",
    "start": "2710760",
    "end": "2716440"
  },
  {
    "text": "the request then I'll wait a couple of seconds and then I'll uh start this this R container again and then we see that",
    "start": "2716440",
    "end": "2721599"
  },
  {
    "text": "it will complete the the call again so I'm going to send a request and",
    "start": "2721599",
    "end": "2728599"
  },
  {
    "text": "hey uh it's already completed oh I did start thank you okay",
    "start": "2728599",
    "end": "2735640"
  },
  {
    "text": "stop it again there we go okay make the request and now it's not doing anything in detail and here we see it again error",
    "start": "2735640",
    "end": "2741920"
  },
  {
    "text": "processing and retrying in two seconds and uh indeed now now we can start it again um and then it will actually uh",
    "start": "2741920",
    "end": "2750359"
  },
  {
    "text": "indeed finally um after four attempts it's successful again right so this is",
    "start": "2750359",
    "end": "2756079"
  },
  {
    "text": "another example of how to use different policies all right um I will not show",
    "start": "2756079",
    "end": "2762359"
  },
  {
    "text": "the final one um what I do want to show you is if you're really serious about",
    "start": "2762359",
    "end": "2767640"
  },
  {
    "text": "production production Readiness um oh where is",
    "start": "2767640",
    "end": "2772599"
  },
  {
    "text": "this I can definitely recommend to take a look at uh at conductor that that's one of our one of our tools that we",
    "start": "2773559",
    "end": "2779079"
  },
  {
    "text": "built on top of on top of depper so if you're running deer on kubernetes uh we have this free tool that you can use to",
    "start": "2779079",
    "end": "2785040"
  },
  {
    "text": "increase your production Readiness of deer workflow uh different workloads uh one of the things that we have is there there's an",
    "start": "2785040",
    "end": "2791359"
  },
  {
    "text": "advisory and that's focused on reliability right so we have like uh different types of rule sets uh one of",
    "start": "2791359",
    "end": "2797520"
  },
  {
    "text": "these rule sets is reliability so it will scan all of your uh component files and configuration files uh and then we",
    "start": "2797520",
    "end": "2804000"
  },
  {
    "text": "like give some suggestions what are then best practices to run this in",
    "start": "2804000",
    "end": "2809160"
  },
  {
    "text": "production all right so I hope you I give you some some good overview of what what deor can mean for you to build like",
    "start": "2810079",
    "end": "2815680"
  },
  {
    "text": "reliable uh distrib applications um hopefully you'll try out the deer workflow uh I've got a couple of QR",
    "start": "2815680",
    "end": "2821760"
  },
  {
    "text": "codes to to share with you if you want some more information um so this this first one here on the left one is the",
    "start": "2821760",
    "end": "2827119"
  },
  {
    "text": "link to this uh this repo that I'm using the residency and workflow demos uh if you want to try out a conductor it's",
    "start": "2827119",
    "end": "2833079"
  },
  {
    "text": "it's a free tool feel free to to scan the other one um if you want and you've",
    "start": "2833079",
    "end": "2839400"
  },
  {
    "text": "been very patiently listening to me I've got another QR code I'll wait until you have taken a picture from this first",
    "start": "2839400",
    "end": "2847760"
  },
  {
    "text": "all right so the final QR code you can claim this deer Community supporter badge it's a free badge to claim it's",
    "start": "2848760",
    "end": "2854880"
  },
  {
    "text": "it's not an NFD but uh I've created a lot of a lot of digital badges for uh the deer deer community and there are",
    "start": "2854880",
    "end": "2861240"
  },
  {
    "text": "also badges if you write the deer blog post or if you're like if you create a deer video or if you're contributing a",
    "start": "2861240",
    "end": "2866559"
  },
  {
    "text": "source code or documentation to Deer so there are different different ways to claim different of these digital badges",
    "start": "2866559",
    "end": "2872520"
  },
  {
    "text": "uh for deer and finally please vote uh I will hope to to get to get some green",
    "start": "2872520",
    "end": "2878720"
  },
  {
    "text": "votes if you have some common suggestions please come see me uh if you want some more deer stickers i've got a",
    "start": "2878720",
    "end": "2883880"
  },
  {
    "text": "couple of left if you don't have a depper sticker yet so uh and thank you very much [Applause]",
    "start": "2883880",
    "end": "2898130"
  }
]