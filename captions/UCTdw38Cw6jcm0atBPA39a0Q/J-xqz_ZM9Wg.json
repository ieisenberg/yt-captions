[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "I am David feller this is Damien Edwards hello and the goal um last year we had a talk on diagnosing a stroke or issues",
    "start": "5490",
    "end": "13440"
  },
  {
    "text": "and we want to kind of check up this year and dive deeper into different specific kinds of issues you may have",
    "start": "13440",
    "end": "20390"
  },
  {
    "text": "skilling your internet core applications how many of you guys have experienced a situation before in production no one I",
    "start": "20390",
    "end": "28079"
  },
  {
    "text": "don't believe you okay everyone every yeah holy awesome well I haven't we don't we don't build ratifications we",
    "start": "28079",
    "end": "34950"
  },
  {
    "start": "30000",
    "end": "71000"
  },
  {
    "text": "work on the framework team we mostly see people's applications that come through our support channels so people are",
    "start": "34950",
    "end": "42180"
  },
  {
    "text": "running on a giraffe service or people running internally Wilson has emails going oh map isn't responding why is",
    "start": "42180",
    "end": "47460"
  },
  {
    "text": "that happening I will have a dev going and dive in for a couple of days to figure actually probably fair to say that most apps that we do get the",
    "start": "47460",
    "end": "54630"
  },
  {
    "text": "privilege to see are ones that are broken somehow yeah because they don't call us unless there's a problem it's",
    "start": "54630",
    "end": "60870"
  },
  {
    "text": "not always their fault it could be the framers fault so we kind of have learned some things over the past few years and we kind of want to share with you guys",
    "start": "60870",
    "end": "66509"
  },
  {
    "text": "yes so we spend tons of time like looking at customer issues so what is",
    "start": "66509",
    "end": "72659"
  },
  {
    "start": "71000",
    "end": "108000"
  },
  {
    "text": "scale scale is not performance per se scale I describe it as a measure of user",
    "start": "72659",
    "end": "80219"
  },
  {
    "text": "request connections per skill unit a scaling it can be a machine a container something that has actual compute",
    "start": "80219",
    "end": "86880"
  },
  {
    "text": "resources right so more skill means you can handle more more of those units per",
    "start": "86880",
    "end": "92280"
  },
  {
    "text": "your actual skill unit and so sometimes we have to trade off scale again for more mass of an individual thing as well",
    "start": "92280",
    "end": "98130"
  },
  {
    "text": "right so quoting Scott Hanselman if you do nothing you can scale infinitely all right so do laughs you can do it you can",
    "start": "98130",
    "end": "104100"
  },
  {
    "text": "do more without less resources so it's always good to try and do as little as possible that's my philosophy in life",
    "start": "104100",
    "end": "109499"
  },
  {
    "start": "108000",
    "end": "151000"
  },
  {
    "text": "yeah there's two kinds of scaling scaling and horizontally or scaling outwards that's where you add more",
    "start": "109499",
    "end": "114509"
  },
  {
    "text": "resources so if you have like some VM of some size on some we're adding more of",
    "start": "114509",
    "end": "119579"
  },
  {
    "text": "those is skilling out scaling up is really increased against capacity or scaling us capacity so adding more",
    "start": "119579",
    "end": "126299"
  },
  {
    "text": "memory to a container adding more CPU to a container that scaling up and scaling out it's a pretty basic so you can and",
    "start": "126299",
    "end": "132930"
  },
  {
    "text": "this can apply to every style of app you can scale out your database yeah with things like shotting",
    "start": "132930",
    "end": "138720"
  },
  {
    "text": "or going to something that's clustered yeah and you can do vertol skip vertical scale obviously but just having a bar",
    "start": "138720",
    "end": "144180"
  },
  {
    "text": "you serve this and then you just don't establish you have to worry about anyone else the problem is any money your full person who has to manage that here's to",
    "start": "144180",
    "end": "150240"
  },
  {
    "text": "worry about scale so what is it your app scale is there kind of two main themes",
    "start": "150240",
    "end": "155850"
  },
  {
    "start": "151000",
    "end": "227000"
  },
  {
    "text": "the first is you you did some work that didn't clean up stuff so you have a",
    "start": "155850",
    "end": "162060"
  },
  {
    "text": "resource league for example a memory leak or a file handle leak or a socket leak or you're creating work faster than",
    "start": "162060",
    "end": "169410"
  },
  {
    "text": "that work can be finished so you could think of a thing where you're you're handling two minute requests and things",
    "start": "169410",
    "end": "174600"
  },
  {
    "text": "are coming in and they aren't finishing fast enough to trust the use the CPU resources right yeah",
    "start": "174600",
    "end": "180510"
  },
  {
    "text": "and the second one there is a real reason why what we often see is my application worked just fine works on my",
    "start": "180510",
    "end": "186660"
  },
  {
    "text": "machine right works on my machine worked in production perfectly fine for six months and then something changed like",
    "start": "186660",
    "end": "194280"
  },
  {
    "text": "you've got a five percent more traffic than you did previously or some other part of the infrastructure started",
    "start": "194280",
    "end": "200010"
  },
  {
    "text": "making a slightly different decision which resulted in some impact on your application and suddenly the exact same",
    "start": "200010",
    "end": "205380"
  },
  {
    "text": "application they've been running perfect well before doesn't just start getting slower or start having a little bit of",
    "start": "205380",
    "end": "211530"
  },
  {
    "text": "trouble it goes through a period of like that's not right and then it just falls on the floor right okay and we're gonna see in this talk some of the things that",
    "start": "211530",
    "end": "217890"
  },
  {
    "text": "will why you get this nonlinear relationship between well it seems to be working really well and now it doesn't",
    "start": "217890",
    "end": "223230"
  },
  {
    "text": "work at all and you know not this slow gradual decline all right so what effects skill so that this isn't this is",
    "start": "223230",
    "end": "230070"
  },
  {
    "start": "227000",
    "end": "374000"
  },
  {
    "text": "intend to be a full list of things they're mostly common things to look out for in your applications so there's CPU",
    "start": "230070",
    "end": "236280"
  },
  {
    "text": "memory and i/o and i/o can be network or disk so CPU you have a hot path on your",
    "start": "236280",
    "end": "241530"
  },
  {
    "text": "arm on your request path some expensive algorithm leak trying to find Prime's or",
    "start": "241530",
    "end": "247050"
  },
  {
    "text": "trying to do my own image compression or something like that contended lock so you see imagine you have a some shared",
    "start": "247050",
    "end": "253830"
  },
  {
    "text": "resource that all requests come in to get and as a giant look around that that thing their memory leak so imagine you",
    "start": "253830",
    "end": "260280"
  },
  {
    "text": "had some cash somewhere that wasn't bounded as an example of a leak things",
    "start": "260280",
    "end": "267479"
  },
  {
    "text": "that I'll came what and they have to so imagine to read a file from the network and you",
    "start": "267479",
    "end": "273960"
  },
  {
    "text": "regenerate some memory I thought that that that scenario port exhaustion so so",
    "start": "273960",
    "end": "279120"
  },
  {
    "text": "imagine you weren't disposing your HTTP clients properly you get exhausted their mobile ports on the machine which could",
    "start": "279120",
    "end": "284639"
  },
  {
    "text": "lead to issues with the HP client calls not look at your disk storage you imagine you were actually right with the",
    "start": "284639",
    "end": "290910"
  },
  {
    "text": "disk and they run a space that's kind of a example you've never had a server fail because their disk disabled because of logs yeah Wow it happens a lot that",
    "start": "290910",
    "end": "299220"
  },
  {
    "text": "common huh yeah blocking i/o is one that's dear to our hearts yeah she's",
    "start": "299220",
    "end": "305490"
  },
  {
    "text": "seen my tweets about async blocking and async void and async is terrible and great at the same time blocking is",
    "start": "305490",
    "end": "311220"
  },
  {
    "text": "really bad it it causes people to be starved and we'll see more that later in this talk but let's see you have a fixed",
    "start": "311220",
    "end": "319020"
  },
  {
    "text": "mode of bandwidth in your and your network servers if you go over that you kind of don't you can't serve enough requests and sometimes these things end",
    "start": "319020",
    "end": "325139"
  },
  {
    "text": "up being related so a problem in one area will lead to a problem in the other and so you might look at one of these",
    "start": "325139",
    "end": "330210"
  },
  {
    "text": "things ago well I have all the bandwidth in the world is never gonna be a problem or I have so many cause it's never gonna be an issue and then you introduce a",
    "start": "330210",
    "end": "336479"
  },
  {
    "text": "contended lock and now suddenly that doesn't matter or you end up filling up",
    "start": "336479",
    "end": "341520"
  },
  {
    "text": "your bandwidth which causes the increased latency which now means your queues get full which now means thing timeouts occur which now is that at that",
    "start": "341520",
    "end": "347849"
  },
  {
    "text": "cascading failure cascading failures right so people talk about cascading failures in the in the arena of things",
    "start": "347849",
    "end": "354810"
  },
  {
    "text": "like distributed application design and services but the reality is even in the in the context of a single process",
    "start": "354810",
    "end": "360300"
  },
  {
    "text": "running on one machine it's a mini microcosm of of a distributed application right there because you've got CPU and you've got IO and you've got",
    "start": "360300",
    "end": "366900"
  },
  {
    "text": "memory and you've got shared resources and any one problem any of those areas can cause a problem in another as we'll",
    "start": "366900",
    "end": "372599"
  },
  {
    "text": "hopefully see awesome so that was the Machine level resources so CPU memory",
    "start": "372599",
    "end": "378630"
  },
  {
    "start": "374000",
    "end": "480000"
  },
  {
    "text": "and i/o for the CR itself they're a bunch of shared things so the GC you know is shared across the shirt across",
    "start": "378630",
    "end": "384780"
  },
  {
    "text": "the entire application the thread pool is shared across the entire application so when you Costas usually a traveler GC",
    "start": "384780",
    "end": "389910"
  },
  {
    "text": "it affects the entire application so for example if you experience our trebla starvation your timers won't fire because the timer uses the triple as",
    "start": "389910",
    "end": "396419"
  },
  {
    "text": "well see you and I'm game these cascading events where if one something goes down the entire app we get to fail",
    "start": "396419",
    "end": "403890"
  },
  {
    "text": "horribly right errors are very expensive if you turn it exception as to what the entire stock",
    "start": "403890",
    "end": "409320"
  },
  {
    "text": "that is a super sense of operation see donor threats actions very often locks",
    "start": "409320",
    "end": "414330"
  },
  {
    "text": "that are very hot I will see a demo of that in the app as we go along and sync",
    "start": "414330",
    "end": "420960"
  },
  {
    "text": "io is kind of another thing that affects scale and sometimes these things are in your app yep sometimes these things are",
    "start": "420960",
    "end": "427680"
  },
  {
    "text": "in the framework or in the core effects itself and then people log bugs because we find places we didn't realize how",
    "start": "427680",
    "end": "433590"
  },
  {
    "text": "they contended lock or was doing synchronous i/o or etc etc etc so and as",
    "start": "433590",
    "end": "439410"
  },
  {
    "text": "David said GC and thread Paul are kind of intrinsic so you don't really get to control those they're shared and they're",
    "start": "439410",
    "end": "445139"
  },
  {
    "text": "in the platform you can impact what they do because typically they're only doing",
    "start": "445139",
    "end": "451380"
  },
  {
    "text": "work because you did work in your application but you kind of have to work within the bounds of what those things can do you have to understand what they",
    "start": "451380",
    "end": "457560"
  },
  {
    "text": "do in order to make sure you don't overuse them so it was a fun example of a service that went down I can't see",
    "start": "457560",
    "end": "463289"
  },
  {
    "text": "which one went down myself that went down because of calls to string that in turn in turn is a lock inside the CLR",
    "start": "463289",
    "end": "469680"
  },
  {
    "text": "a single lock across the entire process so guess what happened request came in she can happen and it took the entire",
    "start": "469680",
    "end": "475800"
  },
  {
    "text": "site them because it was blocking that on that lock with a superhot lock async",
    "start": "475800",
    "end": "481349"
  },
  {
    "start": "480000",
    "end": "537000"
  },
  {
    "text": "programming does anyone here use async await daily in their lives everyone good most people yeah it's good it's good to",
    "start": "481349",
    "end": "488729"
  },
  {
    "text": "use it if you use it incorrectly it's really bad so the still using it correctly can give",
    "start": "488729",
    "end": "494370"
  },
  {
    "text": "you like masses feel improvement use it in crap you can actually make it worse than it was before you change the async in the first place yeah dona has a",
    "start": "494370",
    "end": "501389"
  },
  {
    "text": "bunch of async traps mostly because we came from a synchronous world and you get to add I think as a bolt-on so api's",
    "start": "501389",
    "end": "507300"
  },
  {
    "text": "kind of have sync and async api is and they don't interact well together so there's kind of a bunch of issues if you",
    "start": "507300",
    "end": "513360"
  },
  {
    "text": "use certain things in certain orders and you'll see a bunch of those traps as we go through talking in general the main",
    "start": "513360",
    "end": "519060"
  },
  {
    "text": "rule is just don't block purple thread I may never just on one block ever and",
    "start": "519060",
    "end": "524370"
  },
  {
    "text": "what do we mean by block can you elaborate to stop the threat from running doing useful work",
    "start": "524370",
    "end": "529620"
  },
  {
    "text": "don't call tossed out wait toss not result toss dot you'll see a bunch of",
    "start": "529620",
    "end": "534780"
  },
  {
    "text": "API said okay they shouldn't call okay all right is anyone here do testing",
    "start": "534780",
    "end": "540399"
  },
  {
    "start": "537000",
    "end": "630000"
  },
  {
    "text": "before going to production touch no you don't like it's not production is my",
    "start": "540399",
    "end": "546250"
  },
  {
    "text": "taste so usually what we see people run a little under and the local machine that their dev box they run like a B",
    "start": "546250",
    "end": "552310"
  },
  {
    "text": "with a hundred connections and then that's good and then they put in production and it falls over at some",
    "start": "552310",
    "end": "557769"
  },
  {
    "text": "point right mature team is why I've seen them do is they run a bunch of skill tests figure",
    "start": "557769",
    "end": "563259"
  },
  {
    "text": "out the limits of each of their skill units and then put in like hard limits that feel aggressively if you go over",
    "start": "563259",
    "end": "569680"
  },
  {
    "text": "that limit so for example the the sky team they run out they run us our skill tests and they'll find the mass number",
    "start": "569680",
    "end": "575319"
  },
  {
    "text": "of concurrent nations that they can handle for any machine and they'll put a number saying we can only handle 200 for this machine that's to deploy so you",
    "start": "575319",
    "end": "583029"
  },
  {
    "text": "should have a fix see if you CPU and memory usage for any RPS that's how you would go about testing of a certain",
    "start": "583029",
    "end": "589600"
  },
  {
    "text": "hostile well yeah right for your workload one one issue we see people ask",
    "start": "589600",
    "end": "595209"
  },
  {
    "text": "us know how well this blast scale and we always go you should try it yourself on your hardware in your environment to",
    "start": "595209",
    "end": "601240"
  },
  {
    "text": "make sure that you understand for your specific scenario how you're the workflow so if that was your question at the end of this talk you would come up",
    "start": "601240",
    "end": "606699"
  },
  {
    "text": "with a so David that was a great talk can you tell me how my application will scale the answer is always no no we",
    "start": "606699",
    "end": "612130"
  },
  {
    "text": "can't like you need to try it yourself there are so many variables that will never or how does signal our scale we",
    "start": "612130",
    "end": "617860"
  },
  {
    "text": "used to get that one these never right because it scales really well in the our tests I don't know what's gonna do in",
    "start": "617860",
    "end": "624490"
  },
  {
    "text": "yours it really really you really need to learn how to do that test in yourself and some of the techniques you're gonna learn today yep alright so the cycle is",
    "start": "624490",
    "end": "631720"
  },
  {
    "start": "630000",
    "end": "665000"
  },
  {
    "text": "you run a load test find a bottleneck and fix issues and their various tools you can use there's you should look at",
    "start": "631720",
    "end": "638709"
  },
  {
    "text": "the counters for every substituent on it so the number of GCS happening the number of threads allocated number",
    "start": "638709",
    "end": "644079"
  },
  {
    "text": "the CPU usage the memory usage and look at those things to figure out where your limits are for each scenario and the the",
    "start": "644079",
    "end": "650860"
  },
  {
    "text": "normal thing you do is you run a little test you hit some RPS and you say okay that's okay and you run a profile to see why you're",
    "start": "650860",
    "end": "657790"
  },
  {
    "text": "never up yes if it's okay then you leave it as that's your max and you can scale it from there so let's move on",
    "start": "657790",
    "end": "666389"
  },
  {
    "start": "665000",
    "end": "679000"
  },
  {
    "text": "alright so CPU skill the checklist for going through one more before we move on from lo testing yep",
    "start": "666389",
    "end": "672730"
  },
  {
    "text": "I've always liked a differentiate between load testing and stress testing and so load testing I think is what I",
    "start": "672730",
    "end": "678310"
  },
  {
    "text": "would use this term to describe what David is saying which is you're finding what works well within you know someone",
    "start": "678310",
    "end": "684280"
  },
  {
    "start": "679000",
    "end": "787000"
  },
  {
    "text": "says really just we need to support X number of RPS for this system more transactions per second and you do some load testing to figure out how many",
    "start": "684280",
    "end": "689950"
  },
  {
    "text": "resources you'll need great now you know that you can handle what you were said you're going to do stress testing is figuring out what happens when you go",
    "start": "689950",
    "end": "695740"
  },
  {
    "text": "over that how is your system going to behave when you give it more load than what you designed it for or what you",
    "start": "695740",
    "end": "702010"
  },
  {
    "text": "know it can handle because the failure modes are varied right how your system will fail when you go beyond what you",
    "start": "702010",
    "end": "708550"
  },
  {
    "text": "think your capacity is will vary a massively depending on where your scale problem is the rest testing is a great",
    "start": "708550",
    "end": "715000"
  },
  {
    "text": "way to find that and there are different types of loads and different types of stresses that you can apply to your system it could be more work because you",
    "start": "715000",
    "end": "721840"
  },
  {
    "text": "give it more requests it could be constrained memory because you're in a noisy neighbors situation where there's more processors running on that same",
    "start": "721840",
    "end": "728110"
  },
  {
    "text": "machine it could be a failure of some kind where you're running in a containerized environment or are in some",
    "start": "728110",
    "end": "734110"
  },
  {
    "text": "type of cloud environment and you lose a node and so now your lovely load balance farm of 20 machines goes down to 19 and",
    "start": "734110",
    "end": "740680"
  },
  {
    "text": "if you are on the edge guess what the 19 now are going to have a lot more traffic than it did before etc etc etc so that's a little bit",
    "start": "740680",
    "end": "747160"
  },
  {
    "text": "different to load testing but it's super important to understand how the application will behave when you give it",
    "start": "747160",
    "end": "752830"
  },
  {
    "text": "too much all right do you want it to fall flat on the floor or do you as David said you want to have a knife and",
    "start": "752830",
    "end": "758020"
  },
  {
    "text": "maybe another part of the system that goes oh I'm getting close let me just fail everything or send it out somewhere",
    "start": "758020",
    "end": "763780"
  },
  {
    "text": "else when I get to that limit there's a funny story I said I've seen people end up having Auto scale turn on on some on",
    "start": "763780",
    "end": "770050"
  },
  {
    "text": "some address service and it's killing up because of a bug in the user application and then they're paying a ton of money",
    "start": "770050",
    "end": "775480"
  },
  {
    "text": "because the bug kind of amplified the scale I was like oh you can't you can't held it this much low so you need more",
    "start": "775480",
    "end": "780490"
  },
  {
    "text": "low so we're adding more more stealing right and causes you to be to be worse right it's kind of issue 2 interesting",
    "start": "780490",
    "end": "786340"
  },
  {
    "text": "thing to look at all right the checklist for scalability so there there's added I",
    "start": "786340",
    "end": "791590"
  },
  {
    "start": "787000",
    "end": "829000"
  },
  {
    "text": "made three categories here like machine CLR and application logic these aren't the full list but it's kind of a",
    "start": "791590",
    "end": "797690"
  },
  {
    "text": "kind of what we think are common enough that we've seen in applications I'm so looking at CP usage in general to see",
    "start": "797690",
    "end": "803690"
  },
  {
    "text": "what you see we're at a thread pool the number of work items and the number of worker threads that are currently",
    "start": "803690",
    "end": "809690"
  },
  {
    "text": "allocated looking at the number of collections gen 0 j 1 j 2 hot locked in",
    "start": "809690",
    "end": "814880"
  },
  {
    "text": "the process for app logic usually jason handling just in pillars from from",
    "start": "814880",
    "end": "820010"
  },
  {
    "text": "incoming or outgoing or hot pastor CPU or chatty io doing a lot of small writes",
    "start": "820010",
    "end": "825050"
  },
  {
    "text": "to the network is really bad for for cpu performance for memory looking at memory",
    "start": "825050",
    "end": "831530"
  },
  {
    "text": "usage looking at number of threads because these tread is a megabyte of stack timers is a kind of a big one",
    "start": "831530",
    "end": "838010"
  },
  {
    "text": "we'll talk about going forward the GC heap size themselves not not collections but the heap size free generation",
    "start": "838010",
    "end": "845350"
  },
  {
    "text": "strings are super common in a genetical applications they're strings everywhere actually I think the most allocated",
    "start": "845350",
    "end": "851630"
  },
  {
    "text": "string the most allocating be seen it's been a core obvious these are just our strings and tons of them will get you in",
    "start": "851630",
    "end": "857840"
  },
  {
    "text": "tune as well yeah in the applications and that's not I mean it's not so wrong as HTTP is a text-based protocol and so",
    "start": "857840",
    "end": "865070"
  },
  {
    "text": "if you're parsing simple to the wire and then you're sending text back more often than not HTML or Jason and so you often",
    "start": "865070",
    "end": "871640"
  },
  {
    "text": "allocated a Nanette it's a string go see that's what you use right and that's the thing you will learn for the first so yeah but you have to be careful and I've",
    "start": "871640",
    "end": "878960"
  },
  {
    "text": "seen a ton of code reading the entire request into memory and logging it to a logger which is fine that's quite common",
    "start": "878960",
    "end": "885980"
  },
  {
    "text": "it turns out fine anyone here logged their entire requests and everyone log in with the blogging system so anyway",
    "start": "885980",
    "end": "892460"
  },
  {
    "text": "and people want because they want accountability they'd have traceability that they're ordered ability all these things now I have to log every single",
    "start": "892460",
    "end": "898550"
  },
  {
    "text": "request so ok that's gonna impact your scale like you need to think really hard about how you're gonna do that without",
    "start": "898550",
    "end": "905180"
  },
  {
    "text": "affecting both the throughput the performance and the scalability security and security yeah you're supposed to",
    "start": "905180",
    "end": "911750"
  },
  {
    "text": "this both disposable artists except for a TV client that's kind of a common a common source of resource leaks a thing",
    "start": "911750",
    "end": "918620"
  },
  {
    "text": "local is a this magical type that flows flows implicit stay across anything",
    "start": "918620",
    "end": "924050"
  },
  {
    "text": "boundary I can leak actually pretty badly I'm with a later on",
    "start": "924050",
    "end": "930160"
  },
  {
    "start": "929000",
    "end": "968000"
  },
  {
    "text": "all right io number of open follow handles and sockets on the machine I've been to a wash port on non-buddhist",
    "start": "930160",
    "end": "937330"
  },
  {
    "text": "machines you can look at the U limit of the actual machine to see if you hit a limit or not there are threads in the",
    "start": "937330",
    "end": "942670"
  },
  {
    "text": "CLR made from it from mostly socket IO and file IO looking at HP client your",
    "start": "942670",
    "end": "949240"
  },
  {
    "text": "data is connections to make sure you're disposing them follow stream is kind of a dumpster fire of badness to do with a",
    "start": "949240",
    "end": "957610"
  },
  {
    "text": "thing I've actually go over why that is in the as we get for examples buffering",
    "start": "957610",
    "end": "963280"
  },
  {
    "text": "is kind of why said with some small writes and reads from the network all",
    "start": "963280",
    "end": "968890"
  },
  {
    "start": "968000",
    "end": "1038000"
  },
  {
    "text": "right sink over a sink who remembers this this blah blah sh t from last year don't come to lost user Pollock or",
    "start": "968890",
    "end": "974230"
  },
  {
    "text": "watched it online okay alright there's anyone dis in their applications yeah",
    "start": "974230",
    "end": "979630"
  },
  {
    "text": "do we want to deconstruct this so people understand we have a synchronous entry point there's no way sink there it's",
    "start": "979630",
    "end": "985330"
  },
  {
    "text": "just void returning there's no task and then instantly we're gonna execute a task this one's obviously made up - doc",
    "start": "985330",
    "end": "991090"
  },
  {
    "text": "delay but task doc delay is asynchronous right it creates a timer gets put on the queue and it'll call you back five",
    "start": "991090",
    "end": "998170"
  },
  {
    "text": "seconds ish from now and then you've immediately put a dot weight on the end so one thread is being blocked and then",
    "start": "998170",
    "end": "1004230"
  },
  {
    "text": "when this fires at the end for how many threads metal is for this how many's happens you're gonna get you how many",
    "start": "1004230",
    "end": "1009810"
  },
  {
    "text": "threads to finish this app to run this code any one one one I've seen a boat of",
    "start": "1009810",
    "end": "1018480"
  },
  {
    "text": "one we're gonna vote a - and here - any other call any other votes just one at",
    "start": "1018480",
    "end": "1024300"
  },
  {
    "text": "least two okay so two or more from here",
    "start": "1024300",
    "end": "1029760"
  },
  {
    "text": "okay okay the answer obviously is it depends but I would go with at least two",
    "start": "1029760",
    "end": "1038188"
  },
  {
    "start": "1038000",
    "end": "1156000"
  },
  {
    "text": "is the most correct at least two is correct yeah so why it's so bad so sync over a sink isn't is actually much worse",
    "start": "1038189",
    "end": "1043860"
  },
  {
    "text": "than just pure synchronous code because it's sink sink hood just boss one thread the calling thread stink over async",
    "start": "1043860",
    "end": "1049800"
  },
  {
    "text": "blocks the calling thread waiting on the async operation to finish which was then like n that call and resume that that",
    "start": "1049800",
    "end": "1055110"
  },
  {
    "text": "work so you block two threads rebus incorporation if those threads happen to be both thread pool threads you end up",
    "start": "1055110",
    "end": "1060930"
  },
  {
    "text": "having to queue more typos to complete the work in the first place right so you can have in a trap where you're you're blocking threat blue",
    "start": "1060930",
    "end": "1067409"
  },
  {
    "text": "threads and then requiring more threads to actually complete those operations so you have an invest barrel and then if work is keeps coming in because someone",
    "start": "1067409",
    "end": "1074460"
  },
  {
    "text": "keeps hitting f5 or the browser it will recover uh-huh then it'll never recover because you can't keep injecting threads",
    "start": "1074460",
    "end": "1080039"
  },
  {
    "text": "it's a finite resource the threat party yeah the system wants to schedule more work which requires more threads but the",
    "start": "1080039",
    "end": "1085110"
  },
  {
    "text": "car complete the work it already has which it needs to schedule more threads in order to complete so you can see how that gets really bad really really",
    "start": "1085110",
    "end": "1090929"
  },
  {
    "text": "quickly the thread pool is basically an unbonded queue so it will just keep queueing work forever right I just won't",
    "start": "1090929",
    "end": "1096570"
  },
  {
    "text": "run right so we add four that are very slow right - to prevent from over",
    "start": "1096570",
    "end": "1101789"
  },
  {
    "text": "scheduling and that's kind of the issues with submission your first place because you bought you block more threads and",
    "start": "1101789",
    "end": "1107159"
  },
  {
    "text": "then we inject more at a very slow rate see you right through yourself with bandwidth arm to work yes but that",
    "start": "1107159",
    "end": "1113070"
  },
  {
    "text": "assumes that the works gonna back off yeah it's roll down on the assumption the worst kind of back who's ever tweaked the thread pool configuration",
    "start": "1113070",
    "end": "1119070"
  },
  {
    "text": "sighs come on who's read a blog post we're gonna stack overflow and yeah and they said I'll just change that one has",
    "start": "1119070",
    "end": "1125190"
  },
  {
    "text": "nothing to do with this right all max threads does is you don't start out with Max threads you start out with whatever",
    "start": "1125190",
    "end": "1131039"
  },
  {
    "text": "min threads is number of cores Oona's you which is number the cause by default and then if you ask for more work it",
    "start": "1131039",
    "end": "1137610"
  },
  {
    "text": "will just very quickly go oh you're not up to max it just give you a new thread but once you hit max it doesn't just",
    "start": "1137610",
    "end": "1143549"
  },
  {
    "text": "stop but it's very slow after that right so a massive two stops it does max stop",
    "start": "1143549",
    "end": "1149399"
  },
  {
    "text": "seriously like max actually max is really high buddy really okay I don't believe it threads super high that's",
    "start": "1149399",
    "end": "1157799"
  },
  {
    "start": "1156000",
    "end": "1208000"
  },
  {
    "text": "great screenshot so it's two threads it's at least two threads at least tasks",
    "start": "1157799",
    "end": "1163200"
  },
  {
    "text": "do this crazy trick where they basically try to resume the sort of super Segway",
    "start": "1163200",
    "end": "1170990"
  },
  {
    "text": "if you wait on a task the the thing that completes this task it'll always try to",
    "start": "1170990",
    "end": "1177090"
  },
  {
    "text": "only run on the same thread even if you said you wanted it to dispatch somewhere else it will say it'll ignore your code",
    "start": "1177090",
    "end": "1183419"
  },
  {
    "text": "and say I'll run it on this thread see you and I'm not using three threads in some in some cases so this is a typo",
    "start": "1183419",
    "end": "1189870"
  },
  {
    "text": "thread this is the main thread and it's completing this work so you can resume yes the app we just saw this was a",
    "start": "1189870",
    "end": "1195390"
  },
  {
    "text": "really black so a program main on the left signing at the bottom and then the timer queue for the task delay on the bottom",
    "start": "1195390",
    "end": "1202080"
  },
  {
    "text": "right and this is where they're both waiting on each other yeah right make sense yep",
    "start": "1202080",
    "end": "1208380"
  },
  {
    "start": "1208000",
    "end": "1358000"
  },
  {
    "text": "all right let's demo a simple sink over a sink demo let's see if we can do this so happens this this tool reckoning goal",
    "start": "1208380",
    "end": "1217230"
  },
  {
    "text": "I've no idea where it came from called Bombardier called mine Bitcoin can you see this is it too small on me",
    "start": "1217230",
    "end": "1224720"
  },
  {
    "text": "beautiful is that good science you can see in the back yeah hey taxi",
    "start": "1227900",
    "end": "1233460"
  },
  {
    "text": "I didn't hear no so it's fine okay I have this wonderful app that's some",
    "start": "1233460",
    "end": "1239490"
  },
  {
    "text": "architect wrote and I could take this what yeah okay yeah so your architect",
    "start": "1239490",
    "end": "1246960"
  },
  {
    "text": "gave you this beautiful service and that the old version had to get values method of a synchronous but to be modern they",
    "start": "1246960",
    "end": "1253680"
  },
  {
    "text": "had to add a gate I guess they think so this guy added and it has a super slow Network all you can't this isn't this is",
    "start": "1253680",
    "end": "1259980"
  },
  {
    "text": "fake you get that you had a synchronous method at the beginning get value or slowly moving to a sink and there's a",
    "start": "1259980",
    "end": "1265440"
  },
  {
    "text": "period where you have boat you're changing your code so you have this guessing C so you see you modernize and you adding a new method that's right and",
    "start": "1265440",
    "end": "1272550"
  },
  {
    "text": "you changed the attitude to maximize method we use you're calling the acing one from the synchronous one means our",
    "start": "1272550",
    "end": "1278640"
  },
  {
    "text": "result yeah anyone done this surely yep admit I mean I've done it it's terrible",
    "start": "1278640",
    "end": "1286500"
  },
  {
    "text": "don't do it hang on why is it terrible no judgment no judgment at all okay so then J does come comes along and",
    "start": "1286500",
    "end": "1293400"
  },
  {
    "text": "calls the synchronous API is because they have no idea that they're supposed to call they think once right",
    "start": "1293400",
    "end": "1298500"
  },
  {
    "text": "so they called get values ought to list just fine and this in this control action we run this No",
    "start": "1298500",
    "end": "1307850"
  },
  {
    "text": "super-slow right to run five seconds at least perfect it's working so now I'm gonna",
    "start": "1310130",
    "end": "1318510"
  },
  {
    "text": "hit this thing with some load what the host 5000 API values and see what",
    "start": "1318510",
    "end": "1328890"
  },
  {
    "text": "happens so let me hit with like 30 requests so uh one is HTTP and one is",
    "start": "1328890",
    "end": "1335610"
  },
  {
    "text": "HTTP I don't trust it it's all good David doesn't trust HTTP on stage it's",
    "start": "1335610",
    "end": "1340740"
  },
  {
    "text": "Reno let's write this one out and that should take a little bit it should take",
    "start": "1340740",
    "end": "1347490"
  },
  {
    "text": "some time super slow right five seconds per requests 5 seconds per request",
    "start": "1347490",
    "end": "1353000"
  },
  {
    "text": "connections trying to complete how many 30 requests there Lucas okay math math that much time yeah one RPS oh",
    "start": "1353000",
    "end": "1361410"
  },
  {
    "start": "1358000",
    "end": "1449000"
  },
  {
    "text": "my god this thing is super slow alright so now let's figure out what went wrong let us look at the two things I'm gonna",
    "start": "1361410",
    "end": "1367440"
  },
  {
    "text": "attach the debugger and try to catch this in action often they hit a five set of controller five and debugger and I'm",
    "start": "1367440",
    "end": "1377130"
  },
  {
    "text": "going to try to cheat I set a breakpoint in the timer itself in the framework me",
    "start": "1377130",
    "end": "1387210"
  },
  {
    "text": "not be actually good though you buddy there yeah maybe put it there the only",
    "start": "1387210",
    "end": "1398250"
  },
  {
    "text": "ever got a process dump on Windows never gone to our process of getting a dump",
    "start": "1398250",
    "end": "1403559"
  },
  {
    "text": "early shipping it somewhere because it's like 10 gigs and have to zip it up and somewhere else yeah it's terrible isn't it let's try",
    "start": "1403559",
    "end": "1411350"
  },
  {
    "text": "huh it does it does maybe dispose",
    "start": "1411350",
    "end": "1419270"
  },
  {
    "text": "if that this keep it time give it time",
    "start": "1422450",
    "end": "1427559"
  },
  {
    "text": "give it time pause okay so I can look up threads debug windows the Reds",
    "start": "1427559",
    "end": "1437899"
  },
  {
    "text": "everywhere see bunch of threads button wait if anyone ever use pile of stacks",
    "start": "1437899",
    "end": "1443359"
  },
  {
    "text": "it's not too many hands okay you should use this thing super useful",
    "start": "1443359",
    "end": "1448409"
  },
  {
    "text": "so give you this beautiful visual visual view of all the threads in system and it",
    "start": "1448409",
    "end": "1453690"
  },
  {
    "start": "1449000",
    "end": "1538000"
  },
  {
    "text": "merges things that are the same stack so you can see I have 14 threads blocked in a TAS thought wait here this is kind of",
    "start": "1453690",
    "end": "1461279"
  },
  {
    "text": "one of the signs of annoying when you're when you're in that case of doing single racing where you see a tactile wait here",
    "start": "1461279",
    "end": "1467129"
  },
  {
    "text": "at the bottom this tag right so symptom",
    "start": "1467129",
    "end": "1476220"
  },
  {
    "text": "is the CPU isn't being used memory is flat you have a high number of threads",
    "start": "1476220",
    "end": "1481379"
  },
  {
    "text": "and they're all blocked on some some resource right so if you see those things you probably aren't countering",
    "start": "1481379",
    "end": "1486690"
  },
  {
    "text": "sync over you think and you have an issue they should fix how do I fix it",
    "start": "1486690",
    "end": "1493460"
  },
  {
    "text": "write better code oh okay yeah and okay what if what if the issues in the",
    "start": "1493460",
    "end": "1498570"
  },
  {
    "text": "framework fella bug okay go close it now has that ever happened it's funny because I'm looking at this this sample",
    "start": "1498570",
    "end": "1505080"
  },
  {
    "text": "you did with tellers we had a code we had code paths that were synchronous yep and then we introduced async code paths",
    "start": "1505080",
    "end": "1510989"
  },
  {
    "text": "and then we made the old sync Power Co pars called the new async code paths with a dot wait because why would you",
    "start": "1510989",
    "end": "1517320"
  },
  {
    "text": "want to code paths just what reuse aim and it reminds me that I believe there were lots of places in various parts of",
    "start": "1517320",
    "end": "1522960"
  },
  {
    "text": "net that may or may not have done that I don't believe that No so the face would be to have the synchronous one we actually synchronous",
    "start": "1522960",
    "end": "1528989"
  },
  {
    "text": "and do this right this would be seen right but now I've got that's code",
    "start": "1528989",
    "end": "1534899"
  },
  {
    "text": "duplication duplication bug here and that's in there too right right I want to show looking at don't just just this",
    "start": "1534899",
    "end": "1540210"
  },
  {
    "start": "1538000",
    "end": "1680000"
  },
  {
    "text": "just in case no one has seen it before so to get it dump of a running process",
    "start": "1540210",
    "end": "1546139"
  },
  {
    "text": "there there API is that you can actually call to get a dump from a process but I'll show you how to do it from task",
    "start": "1546139",
    "end": "1551729"
  },
  {
    "text": "magic because it's kind of convening sometimes assuming you have access to you can also get it in in a drop so everything you",
    "start": "1551729",
    "end": "1558690"
  },
  {
    "text": "can true get a dump from there how many dump check no details find the process",
    "start": "1558690",
    "end": "1564600"
  },
  {
    "text": "called dotnet at sea and then right click create dump is then right here",
    "start": "1564600",
    "end": "1570899"
  },
  {
    "text": "look at that thing it'll create a file in temp you copy over to your you zip it up copy",
    "start": "1570899",
    "end": "1576360"
  },
  {
    "text": "over it's really big it's like the entire address of the process so it's super big so you want to zip it up and put somewhere else and you can open it",
    "start": "1576360",
    "end": "1584970"
  },
  {
    "text": "up in a couple of tools that I will show you today so the first one is good old",
    "start": "1584970",
    "end": "1590399"
  },
  {
    "text": "visual studio you can just take a dump",
    "start": "1590399",
    "end": "1595399"
  },
  {
    "text": "it's like capture it sounds I can just add app sure it don't capture a dump Andrew and drag it into vs and I get",
    "start": "1595610",
    "end": "1605039"
  },
  {
    "text": "this view the dump summary is anyone ever use this this feature of yes yeah I love this view it's great so I can do a",
    "start": "1605039",
    "end": "1612600"
  },
  {
    "text": "few things does this work in every skew now wasn't there a time when this didn't work and I've given a nice kick it was",
    "start": "1612600",
    "end": "1618960"
  },
  {
    "text": "for a while I think someone said that I thought okay oops you have to install the windows",
    "start": "1618960",
    "end": "1625679"
  },
  {
    "text": "development toolkit okay what developer kit okay that's good advice and it",
    "start": "1625679",
    "end": "1632429"
  },
  {
    "text": "always runs out of memory whoa if you so much do too much focus that's fine",
    "start": "1632429",
    "end": "1637769"
  },
  {
    "text": "use smaller machines with less memory dump ours will be smaller have a smaller",
    "start": "1637769",
    "end": "1642990"
  },
  {
    "text": "process so dumps are extensive to the version of the CLR the version the the",
    "start": "1642990",
    "end": "1648509"
  },
  {
    "text": "business of the process so it's it's poor a bit 32-bit so if you want to actually look at a dump on a different",
    "start": "1648509",
    "end": "1654120"
  },
  {
    "text": "machine that you took it on you have to actually have the right version of the CLR and the right version of Android",
    "start": "1654120",
    "end": "1659250"
  },
  {
    "text": "business to cut it which is something that we're working on we'd like them a lot so it's really hard job it's also oh",
    "start": "1659250",
    "end": "1665429"
  },
  {
    "text": "s specifically you can't take a dump on this and copy it to us and look like that doesn't work at all today yet we",
    "start": "1665429",
    "end": "1670950"
  },
  {
    "text": "have plans I'll show you some tools were working on to to potentially make it better to look at look at these things like offline so I can debug with manage",
    "start": "1670950",
    "end": "1678990"
  },
  {
    "text": "only and I'm back in this debugger view and I can't step because I'm debugging a",
    "start": "1678990",
    "end": "1686070"
  },
  {
    "start": "1680000",
    "end": "1932000"
  },
  {
    "text": "heap so I can't we Stephanie or there's nobody to go it's a process running I can still use threads like a",
    "start": "1686070",
    "end": "1692100"
  },
  {
    "text": "steel the threads so if you're in a situation where your weird process is kind of dying you can you can get a dump and put it in vs and look and see what's",
    "start": "1692100",
    "end": "1700080"
  },
  {
    "text": "happening open the treads window and here's a different dump so it's 15 threads all",
    "start": "1700080",
    "end": "1705210"
  },
  {
    "text": "bottom weight so same views for different kinds of things we saw offline versus like light debugging this is how",
    "start": "1705210",
    "end": "1713460"
  },
  {
    "text": "many people didn't know that you could like use half of the debug tools in Visual Studio on static dump files from",
    "start": "1713460",
    "end": "1719820"
  },
  {
    "text": "the process okay Wow Wow okay good well that was well worth it look at that for",
    "start": "1719820",
    "end": "1725759"
  },
  {
    "text": "that and you can click on the stack and see variables if they're not like super optimized away you can see some of them",
    "start": "1725759",
    "end": "1731940"
  },
  {
    "text": "now obviously yeah that's a good point often you're taking these from production where you did a release build now if you deploy your PD B's then you",
    "start": "1731940",
    "end": "1739229"
  },
  {
    "text": "get a little bit more but some stuff just gets optimized out at runtime the jits does Jeff and it can't figure out",
    "start": "1739229",
    "end": "1744330"
  },
  {
    "text": "where it is not a stack anymore it's gone it's what it's better than nothing it's a lot better than nothing yeah I will learn a little bit later that in",
    "start": "1744330",
    "end": "1751229"
  },
  {
    "text": "conjunction with dumps you can also use tracing which can sometimes help you fill in those gaps that you don't otherwise get so alright so the dubbed",
    "start": "1751229",
    "end": "1763470"
  },
  {
    "text": "about yeah we'll find them yeah yep and load the symbols but symbols will slowly",
    "start": "1763470",
    "end": "1770129"
  },
  {
    "text": "get you so far because if the jits up to my stuff away it's gone yeah so so one",
    "start": "1770129",
    "end": "1776849"
  },
  {
    "text": "more thing I want to show is looking at the heap itself it's like it's constrained in a different different one but things you can do here you can you",
    "start": "1776849",
    "end": "1781859"
  },
  {
    "text": "can debug the actual chord dump you can actually look at memory so if you have a",
    "start": "1781859",
    "end": "1787379"
  },
  {
    "text": "leak for example you can debug my memory and look around to see what's in memory the objects all the routes so you can",
    "start": "1787379",
    "end": "1794820"
  },
  {
    "text": "this is nice sort by count if you have a leak sort by size I mean that's a lot of",
    "start": "1794820",
    "end": "1800399"
  },
  {
    "text": "types you can see what things are being held on through so I can look at for example services Scripture that's funny",
    "start": "1800399",
    "end": "1807919"
  },
  {
    "text": "find a specific instance and look at the roots here down here do people know why",
    "start": "1807919",
    "end": "1814229"
  },
  {
    "text": "that's useful if you want to figure out why something is being held on - right it's called being rooted",
    "start": "1814229",
    "end": "1820880"
  },
  {
    "text": "so we're gonna talk about leaks next right yeah maybe this is in the actual locker okay so let's fix the bug first go let's",
    "start": "1820880",
    "end": "1828140"
  },
  {
    "text": "do what we should do and make this where's my controller make this thing",
    "start": "1828140",
    "end": "1835400"
  },
  {
    "text": "asynchronous so I'll make it a sync adding a task this tight list gnarly",
    "start": "1835400",
    "end": "1841220"
  },
  {
    "text": "isn't it task a batch means love I never book strength which fix it yeah after me",
    "start": "1841220",
    "end": "1849320"
  },
  {
    "text": "this is sync I don't have to wait this",
    "start": "1849320",
    "end": "1855340"
  },
  {
    "text": "yeah should we take that is this gonna",
    "start": "1862990",
    "end": "1871520"
  },
  {
    "text": "be faster who thinks it'll be faster now that we've removed the contention by",
    "start": "1871520",
    "end": "1880310"
  },
  {
    "text": "seconds some people think it'll be faster everyone else is like I'm not button man I don't know what's gonna happen why it sticks very wise so same",
    "start": "1880310",
    "end": "1893150"
  },
  {
    "text": "load as before it's still super slow it's the same speed there you go you",
    "start": "1893150",
    "end": "1899510"
  },
  {
    "text": "know why it's because scale isn't performing so you don't get more throughput it's still ticking",
    "start": "1899510",
    "end": "1905540"
  },
  {
    "text": "five seconds per per request right that you haven't fixed anything you've made it's out there there there aren't five threads blocked but you still don't have",
    "start": "1905540",
    "end": "1912290"
  },
  {
    "text": "more throughput right so no theory could handle more load Theory that's about like all concurrent people I think the",
    "start": "1912290",
    "end": "1919160"
  },
  {
    "text": "first time I got zero RPS and I got six so yes okay very good yes so okay that's",
    "start": "1919160",
    "end": "1925010"
  },
  {
    "text": "better good it also doesn't use any thread so if I were to debug this at this code",
    "start": "1925010",
    "end": "1930530"
  },
  {
    "text": "again running it like that's a good point I shouldn't see any threads if I can debug in time we walked with 14 threads",
    "start": "1930530",
    "end": "1937400"
  },
  {
    "start": "1932000",
    "end": "1968000"
  },
  {
    "text": "that were blocked before yep they pause butter they still hold on wasn't running",
    "start": "1937400",
    "end": "1946559"
  },
  {
    "text": "yeah see fast I'm get a five I'll go to",
    "start": "1946559",
    "end": "1955799"
  },
  {
    "text": "this thing hit again and pause like",
    "start": "1955799",
    "end": "1966529"
  },
  {
    "start": "1968000",
    "end": "2041000"
  },
  {
    "text": "threads whoa whoa super efficient okay so when you go to a think you don't use",
    "start": "1968240",
    "end": "1975090"
  },
  {
    "text": "threads but the big downside the biggest downside is that you can actually see",
    "start": "1975090",
    "end": "1980450"
  },
  {
    "text": "we're close running right so imagine you had an async hang where you had an elbow request to your back-end service that",
    "start": "1980450",
    "end": "1986700"
  },
  {
    "text": "bit every on for some reason for some some lag right you can't look at it interview bugger and see it because this",
    "start": "1986700",
    "end": "1991770"
  },
  {
    "text": "it there's only memory co-sign there's not there's no code running right before we basically had as many requests as we",
    "start": "1991770",
    "end": "1999330"
  },
  {
    "text": "had thread right running because they're all blocked now we have lots of requests running we have them in the same tools",
    "start": "1999330",
    "end": "2005780"
  },
  {
    "text": "because they're not using any threads there will be memory for is memory saying if we looked at your heap",
    "start": "2005780",
    "end": "2011030"
  },
  {
    "text": "snapshot you could maybe find types good luck that represented the thread is",
    "start": "2011030",
    "end": "2016520"
  },
  {
    "text": "insanely hard oh sorry the requests okay that sounds like a problem we see you got more scale but you can't see the",
    "start": "2016520",
    "end": "2022700"
  },
  {
    "text": "actual things running anymore great so you got trade-off right so I can't see it is the problem in software engineering nope we will fix that",
    "start": "2022700",
    "end": "2029809"
  },
  {
    "text": "shoulder yeah that's being worked on so we want to actually support parallel I think all of you call pilot aft where we",
    "start": "2029809",
    "end": "2035539"
  },
  {
    "text": "have the same windows parallel be sure the actual async state machines in a kind of a chain right of calls which is",
    "start": "2035539",
    "end": "2042710"
  },
  {
    "start": "2041000",
    "end": "2114000"
  },
  {
    "text": "really hard to do properly who has this code in their application some derivative anyway yet John's got it",
    "start": "2042710",
    "end": "2049940"
  },
  {
    "text": "yep my hands fine it's okay it's banded what is fine what's wrong with it is anyone what's",
    "start": "2049940",
    "end": "2056388"
  },
  {
    "text": "wrong that's good good luck good luck miss it work there right try I mean you",
    "start": "2056389",
    "end": "2063500"
  },
  {
    "text": "can't not lock right it's a it this one has to be thread safe it's gonna be used in a way it's used in the modern service",
    "start": "2063500",
    "end": "2069230"
  },
  {
    "text": "because it is modern it's modern actually yeah that's being used in the webservice so",
    "start": "2069230",
    "end": "2074300"
  },
  {
    "text": "it has to be concurrency safe unlocking is actually completely fine right they",
    "start": "2074300",
    "end": "2079460"
  },
  {
    "text": "want to lock the only issue is if you if this becomes a super hot lock if you're doing a play actually hot CPU work in",
    "start": "2079460",
    "end": "2086389"
  },
  {
    "text": "that in this creation phase off it could be a bad thing well I hike attention right at it you",
    "start": "2086390",
    "end": "2095210"
  },
  {
    "text": "could do that and it would brick on arm so you can't run a raspberry party which is which is fine but they double-check",
    "start": "2095210",
    "end": "2100610"
  },
  {
    "text": "locked luckily on x86 and they do on arm because arm instructions can reorder but",
    "start": "2100610",
    "end": "2106310"
  },
  {
    "text": "you're fine you don't arm so you can button not net does the right thing if you use the right things you can do that",
    "start": "2106310",
    "end": "2112330"
  },
  {
    "text": "maybe concurrently yes yes that we go that is one area that's right so apps",
    "start": "2112330",
    "end": "2119300"
  },
  {
    "start": "2114000",
    "end": "2294000"
  },
  {
    "text": "are very concurrent on the web concurrent collections are a bad thing",
    "start": "2119300",
    "end": "2125630"
  },
  {
    "text": "to use in this case but we'll see why it doesn't help in some cases all the time right realm it's really hard to see",
    "start": "2125630",
    "end": "2132770"
  },
  {
    "text": "contention in basic ProFlowers some of them show it like I'm Tracy's timeline view and there's a plugin for for for",
    "start": "2132770",
    "end": "2138920"
  },
  {
    "text": "the gas called the concurrency visualizer I can show you right here I'm not sure to go for yes 2019 yet but",
    "start": "2138920",
    "end": "2145310"
  },
  {
    "text": "there's one for 2017 and 2015 and it gives you a really pretty view of looking out all the threads I'm not sure",
    "start": "2145310",
    "end": "2151520"
  },
  {
    "text": "if there's a picture here notice pretty angel used to be one somewhere utilization view on the left Freud's view and you look on the on the",
    "start": "2151520",
    "end": "2157790"
  },
  {
    "text": "legs that way yeah oh threads of you yep",
    "start": "2157790",
    "end": "2162820"
  },
  {
    "text": "so give you this kind of view it shows you all the threads in parallel and tries to show you where Lux or happening",
    "start": "2163270",
    "end": "2169160"
  },
  {
    "text": "on the same thread so you could use this tool to see if you had condition or not some professors will show you that that",
    "start": "2169160",
    "end": "2176360"
  },
  {
    "text": "you're the betters contention on like the lock call so but it's really hard to",
    "start": "2176360",
    "end": "2182030"
  },
  {
    "text": "look at it in a profile and see that you have a hot lock not net framework I think there's even a perf canter various",
    "start": "2182030",
    "end": "2187790"
  },
  {
    "text": "locks but there is a number of contentions per second number of 18 watts per second but dotnet core doesn't",
    "start": "2187790",
    "end": "2192950"
  },
  {
    "text": "have perf counters yet yet yet",
    "start": "2192950",
    "end": "2196720"
  },
  {
    "text": "cheapish cheapish vats would say who's the doctor net / architect let's say",
    "start": "2198380",
    "end": "2204300"
  },
  {
    "text": "that lots early not cheap but they're free cheap if they're not offended for the most they're not intended for a normal front normal apps it's only for",
    "start": "2204300",
    "end": "2210750"
  },
  {
    "text": "super hyper so that where is it would be expensive John asked the question are uncontained o'clock still considered",
    "start": "2210750",
    "end": "2216420"
  },
  {
    "text": "cheap and the reality is generally speaking yes unless you have an incredibly hot path that is sensitive",
    "start": "2216420",
    "end": "2222510"
  },
  {
    "text": "and then it's worth the effort to try and write your alarm code which is really you shouldn't look real offer way",
    "start": "2222510",
    "end": "2228960"
  },
  {
    "text": "too hard to do when you use concurrent concurrent collections you should know which which opportunity lock and which",
    "start": "2228960",
    "end": "2234960"
  },
  {
    "text": "ones don't lock so for example um concurrent action area dot triad it will lock on that key if you get the count",
    "start": "2234960",
    "end": "2242130"
  },
  {
    "text": "lost the entire dictionary if you if you if you get if lock free so knowing what",
    "start": "2242130",
    "end": "2247560"
  },
  {
    "text": "the column in what sedition is actually super important right if you don't then it may not be any better than we had",
    "start": "2247560",
    "end": "2252930"
  },
  {
    "text": "before with it with a global level behind dictionary sorry and the lack of observability just like you said makes",
    "start": "2252930",
    "end": "2258900"
  },
  {
    "text": "it harder cada so knowing ahead helps but it's difficult to know and then if",
    "start": "2258900",
    "end": "2263940"
  },
  {
    "text": "you call certain beefy FBI is they may hit a loss on your behalf so like stream that in turn for example GDI a there's",
    "start": "2263940",
    "end": "2270780"
  },
  {
    "text": "been a lock in GDI since the beginning of time we've always recommended this not drawing not be used on servers like",
    "start": "2270780",
    "end": "2276120"
  },
  {
    "text": "if you look at the official documentation it says do not use system dot drawing in your system that web application and it's really bad because",
    "start": "2276120",
    "end": "2282240"
  },
  {
    "text": "the locks aren't just in the CLR the locks are like in the library wide yeah",
    "start": "2282240",
    "end": "2287640"
  },
  {
    "text": "GDI is a native component and so it has its own logic so yeah you got to be really careful sometimes all right let's",
    "start": "2287640",
    "end": "2294720"
  },
  {
    "start": "2294000",
    "end": "2748000"
  },
  {
    "text": "try to show this so this demo doesn't warn you right now it's really hard to show it's something",
    "start": "2294720",
    "end": "2299970"
  },
  {
    "text": "that I'm gonna show just the code and kind of how the code would change it's a bit of a leap of faith here because some",
    "start": "2299970",
    "end": "2305430"
  },
  {
    "text": "of these things can be hard to demonstrate on a laptop there's a hard one do you not open so I there's a picture of me with a region on Twitter",
    "start": "2305430",
    "end": "2312950"
  },
  {
    "text": "this is the region okay it's trying to just be a fate of CPU burnin algorithm",
    "start": "2312950",
    "end": "2320970"
  },
  {
    "text": "John to work and do work right okay so here's the code there's a lock try get",
    "start": "2320970",
    "end": "2328020"
  },
  {
    "text": "if I go by Eddy all right so let's run a super simple purpose on the get by ID",
    "start": "2328020",
    "end": "2336359"
  },
  {
    "text": "controller get by you buddy call it that service calls get my ID there's a hot",
    "start": "2336359",
    "end": "2341819"
  },
  {
    "text": "thing and then cashes it in the returns at all you right super simple C values 12 all right run",
    "start": "2341819",
    "end": "2359219"
  },
  {
    "text": "that run for 10 seconds give you some numbers you can't see that rate need to",
    "start": "2359219",
    "end": "2365190"
  },
  {
    "text": "shrink this thing what",
    "start": "2365190",
    "end": "2370559"
  },
  {
    "text": "oh come on fight it shut down made me",
    "start": "2370559",
    "end": "2375569"
  },
  {
    "text": "tattoo to crazy did you kill it oh that's awesome",
    "start": "2375569",
    "end": "2383690"
  },
  {
    "text": "let's try this",
    "start": "2384769",
    "end": "2387979"
  },
  {
    "text": "let's get good number first so I can show something so that runs should get",
    "start": "2392369",
    "end": "2400619"
  },
  {
    "text": "like 20,000 30,000 RPS my machine yep",
    "start": "2400619",
    "end": "2408719"
  },
  {
    "text": "perfect let's with the lock right super fast lock not held very long but striking for",
    "start": "2408719",
    "end": "2415170"
  },
  {
    "text": "a dictionary see it's better I'm gonna",
    "start": "2415170",
    "end": "2421229"
  },
  {
    "text": "call cache thought get her ID this is",
    "start": "2421229",
    "end": "2431519"
  },
  {
    "text": "the old code this isn't you could should",
    "start": "2431519",
    "end": "2437549"
  },
  {
    "text": "return this so I guess is this faster no no no one's",
    "start": "2437549",
    "end": "2450160"
  },
  {
    "text": "willing to know yes after the first one why is there faster okay",
    "start": "2450160",
    "end": "2465510"
  },
  {
    "text": "[Laughter] I'll take you for now",
    "start": "2465510",
    "end": "2470880"
  },
  {
    "text": "so much drama yeah oh it's about anything that's nice it's the same",
    "start": "2478930",
    "end": "2485290"
  },
  {
    "text": "because concurrent action area actually so two reasons this is a bad / if that's because it's the same is the same key",
    "start": "2485290",
    "end": "2490990"
  },
  {
    "text": "the whole time so it's all people in the same thing so it's that being get hit once ever for the test and it's actually",
    "start": "2490990",
    "end": "2496900"
  },
  {
    "text": "the whole time right the second thing is concurrent action area actually locks on the on the key so for the same key it's",
    "start": "2496900",
    "end": "2504370"
  },
  {
    "text": "the same as having the same like one one giant lock rice it was only one key you should see better he does if you hit",
    "start": "2504370",
    "end": "2510100"
  },
  {
    "text": "with different keys at the same time unless those keys hacked to the same thing bucket yeah but numbers have a",
    "start": "2510100",
    "end": "2517090"
  },
  {
    "text": "hash code that's themselves so it should be the should be properly right what's",
    "start": "2517090",
    "end": "2522100"
  },
  {
    "text": "the other issue with this code I'm gonna know one call it yet what's the other problem this could I know I see it so we",
    "start": "2522100",
    "end": "2529150"
  },
  {
    "text": "fixed the we fix the lock contention lock contention do we safely what else is wrong with this code you",
    "start": "2529150",
    "end": "2537730"
  },
  {
    "text": "were to talk already you see miss lights this is an unbounded cache with like taking stuff from user",
    "start": "2537730",
    "end": "2544180"
  },
  {
    "text": "input that's even worse security hole and a memory leak yeah at the same time",
    "start": "2544180",
    "end": "2549210"
  },
  {
    "text": "so how do you fix that one hi how do we",
    "start": "2549210",
    "end": "2554320"
  },
  {
    "text": "fix the unban no that's probably tell me I fix it hey hey are you fix it how do you think that one when you hire a consultant hire",
    "start": "2554320",
    "end": "2563440"
  },
  {
    "text": "an architect I remember go ahead I memory cache would",
    "start": "2563440",
    "end": "2571260"
  },
  {
    "text": "that help though just it's got a limit on it does have something on it and it",
    "start": "2571260",
    "end": "2577920"
  },
  {
    "text": "has some cache semantics like it will maybe clear itself all items maybe",
    "start": "2577920",
    "end": "2583410"
  },
  {
    "text": "sometimes does it some memory cache has also sort of cash it has support from",
    "start": "2583410",
    "end": "2590300"
  },
  {
    "text": "this one I think it's a memory cache memory cache the concrete type it has",
    "start": "2590300",
    "end": "2596940"
  },
  {
    "text": "support for I believe size limiting is it in a different version image compact",
    "start": "2596940",
    "end": "2603480"
  },
  {
    "text": "and that's not her the item don't you have to add items to it oh it's in the options there you go yeah",
    "start": "2603480",
    "end": "2611280"
  },
  {
    "text": "sighs like this thing safe limit it's not super useful to be honest is it any",
    "start": "2611280",
    "end": "2616800"
  },
  {
    "text": "worse slow if you're if you're if you're saving things I can be counted like bytes or strings or something of that nature not for general objects because",
    "start": "2616800",
    "end": "2623340"
  },
  {
    "text": "it's hard to know what size of things you're actually put into to deteriorate right so it would work here for Strings",
    "start": "2623340",
    "end": "2629030"
  },
  {
    "text": "you could also limit the number of entries in the cache itself but that is it being super hard because I'm gonna",
    "start": "2629030",
    "end": "2635610"
  },
  {
    "text": "have to actually like figure out how to do best to do this right if cast count",
    "start": "2635610",
    "end": "2641450"
  },
  {
    "text": "very than ten then like remove something from there and keep doing that but then",
    "start": "2641450",
    "end": "2647160"
  },
  {
    "text": "you have to sing actually how about me synchronized with you well they're at I am those all this for me this is a",
    "start": "2647160",
    "end": "2652230"
  },
  {
    "text": "typing job that actually does alva that doesn't help me yeah but nothing",
    "start": "2652230",
    "end": "2657480"
  },
  {
    "text": "internet okay so you could do it you can do a count again which would take a lock",
    "start": "2657480",
    "end": "2663870"
  },
  {
    "text": "on all the buckets in the concurrent dictionary then you maybe yeah see how deep end again there's good and you get",
    "start": "2663870",
    "end": "2669480"
  },
  {
    "text": "packed is there seriously is there a good open-source dotnet cache library that anyone uses anyone built their own",
    "start": "2669480",
    "end": "2675540"
  },
  {
    "text": "you said I'm going one I know they exist I've heard John's built one though they have lot though yeah it's fine lots are",
    "start": "2675540",
    "end": "2683730"
  },
  {
    "text": "fine it's actually a really hard problem yeah - right well yeah not lazy this off system web had an in-memory cache that",
    "start": "2683730",
    "end": "2691350"
  },
  {
    "text": "was completely private and relied on private things to work well that don't miss dinner coy yet we're looking at",
    "start": "2691350",
    "end": "2698550"
  },
  {
    "text": "adding so like the problem that David just said which is what you really want to say is just add stuff to it and if it",
    "start": "2698550",
    "end": "2704099"
  },
  {
    "text": "gets too big flush stuff out right that's what you want right but if you add a random customer object how big is",
    "start": "2704099",
    "end": "2711269"
  },
  {
    "text": "it no way how do you calculate the size look at all the tools we had to show you to use to even like walk the heap after",
    "start": "2711269",
    "end": "2717029"
  },
  {
    "text": "you take a dump it to calculate the size it's not straightforward today in net the runtime itself knows better",
    "start": "2717029",
    "end": "2723809"
  },
  {
    "text": "it knows very well actually it does really well but what tell us anything he doesn't tell us yet but we're talking to the runtime team to try and get them to",
    "start": "2723809",
    "end": "2729900"
  },
  {
    "text": "add an API that they're comfortable with that would let you do this type of thing so you could use a memory cache to add",
    "start": "2729900",
    "end": "2736230"
  },
  {
    "text": "entries and then have a positive victim at some point it doesn't have this size issue but it helps the fact that like",
    "start": "2736230",
    "end": "2741839"
  },
  {
    "text": "the cache would grow forever because it would I think we started to kick things out if it goes over a certain size right way default it gets kind of wonky though",
    "start": "2741839",
    "end": "2748950"
  },
  {
    "start": "2748000",
    "end": "2824000"
  },
  {
    "text": "right like because you're in a multi scale system with multiple heaps you could have an object graph where objects are sprayed all over different cores no",
    "start": "2748950",
    "end": "2754890"
  },
  {
    "text": "and that's not thing okay no rest breezy I don't know that could happen mmhmm yeah who has this Gooden application yeah no",
    "start": "2754890",
    "end": "2765480"
  },
  {
    "text": "one I don't believe you yeah it's fine no no judgment no judgment it just",
    "start": "2765480",
    "end": "2771599"
  },
  {
    "text": "allocates a giant string first and then it turns into an object it's so easy though yeah it is very easy",
    "start": "2771599",
    "end": "2778499"
  },
  {
    "text": "I blame James for that okay this API takes a string last stream silly it got",
    "start": "2778499",
    "end": "2784349"
  },
  {
    "text": "easier yeah okay so this is this is all fine allocate memory is very cheap like",
    "start": "2784349",
    "end": "2790769"
  },
  {
    "text": "doing a new object is actually super cheap if you have too many things that",
    "start": "2790769",
    "end": "2796019"
  },
  {
    "text": "that lasts a long time and it can lead to GC pauses if you allocate more than",
    "start": "2796019",
    "end": "2801150"
  },
  {
    "text": "85 kilobytes in a single allocation it'll put it on the large object heap which is it's kind of like the place for",
    "start": "2801150",
    "end": "2806279"
  },
  {
    "text": "obstacle to die and they aren't they it could lead to leaks right so you want to",
    "start": "2806279",
    "end": "2812190"
  },
  {
    "text": "avoid that as best you can and the issue with this code is that depending on the size the request blade that you expect",
    "start": "2812190",
    "end": "2817589"
  },
  {
    "text": "you could end up creating a string on the lot of the heap proper request right it's really bad thing you can do just",
    "start": "2817589",
    "end": "2824789"
  },
  {
    "start": "2824000",
    "end": "3166000"
  },
  {
    "text": "let me demo some awesome code that does the wrong thing does just decide great",
    "start": "2824789",
    "end": "2830519"
  },
  {
    "text": "slideway comment here so things like MVC just do the right thing like if I like model buying in value providers they do the right",
    "start": "2830519",
    "end": "2837839"
  },
  {
    "text": "thing he's correct how can I do so rather than doing Jason deserializing myself from the request I should use the",
    "start": "2837839",
    "end": "2843690"
  },
  {
    "text": "framework what if you want control though but if you want leave won't control you have to accept that with control kind of something well comes",
    "start": "2843690",
    "end": "2851609"
  },
  {
    "text": "responsibility that's not quite the quote that's why but you know it's still it's what it works it works all right so",
    "start": "2851609",
    "end": "2856920"
  },
  {
    "text": "we're gonna see some interesting nothing's free and put it that way how's that so to meet this one work API",
    "start": "2856920",
    "end": "2865470"
  },
  {
    "text": "I'm doing a post this is a great tool by",
    "start": "2865470",
    "end": "2870480"
  },
  {
    "text": "the way it's a post and I want to upload this file file named kind of long is it",
    "start": "2870480",
    "end": "2877319"
  },
  {
    "text": "I'm body a - windows - green amd64 weird names palm party or - optimized for",
    "start": "2877319",
    "end": "2883859"
  },
  {
    "text": "intel - first this file is pokemon i might get sued for this not sure I'll",
    "start": "2883859",
    "end": "2892380"
  },
  {
    "text": "put the Pokemon I think that's good I want send one request first to make sure",
    "start": "2892380",
    "end": "2897630"
  },
  {
    "text": "it's doing right thing let me debug this call make sure we're",
    "start": "2897630",
    "end": "2904410"
  },
  {
    "text": "all fine before I hire me with like that doesn't request five seconds",
    "start": "2904410",
    "end": "2912299"
  },
  {
    "text": "sure all right all right there we go is",
    "start": "2912299",
    "end": "2919049"
  },
  {
    "text": "pokemon nice all right that works all",
    "start": "2919049",
    "end": "2925049"
  },
  {
    "text": "right so is anyone ever used per view I'm sorry really",
    "start": "2925049",
    "end": "2930809"
  },
  {
    "text": "on purpose okay so per view is a tool that's written by the seal our architect",
    "start": "2930809",
    "end": "2937520"
  },
  {
    "text": "it's not very framed to use but is super powerful it can actually it can pretty",
    "start": "2937520",
    "end": "2942839"
  },
  {
    "text": "much see everything I'm going on the OS and in depth on that framework but it's insanely hard to use but there's tons of",
    "start": "2942839",
    "end": "2949829"
  },
  {
    "text": "videos you can watch to figure how to use it I have not watched any of them to be honest I just figure it'll be asking",
    "start": "2949829",
    "end": "2955109"
  },
  {
    "text": "him on email in a rage like how do I use this thing so I'm going to run this run",
    "start": "2955109",
    "end": "2961710"
  },
  {
    "text": "this here is the thing to upload the file or the one request I'm gonna run",
    "start": "2961710",
    "end": "2966720"
  },
  {
    "text": "the app and I'm going to look at perfume to",
    "start": "2966720",
    "end": "2972840"
  },
  {
    "text": "collect see you're supposed to press",
    "start": "2972840",
    "end": "2978210"
  },
  {
    "text": "this tab because the under here super I've ads DC collect and GC only see what",
    "start": "2978210",
    "end": "2983580"
  },
  {
    "text": "it does then I'm going to run the perf test and then go back here and say start",
    "start": "2983580",
    "end": "2991280"
  },
  {
    "text": "something tells me this you I wouldn't pass all the accessibility tests that Microsoft usually puts their software",
    "start": "2991280",
    "end": "2997860"
  },
  {
    "text": "through yeah it's pretty all the high DPI tape pretty good alright",
    "start": "2997860",
    "end": "3003170"
  },
  {
    "text": "doesn't RPS it's done a stop collecting though and perfect will be working it's",
    "start": "3003170",
    "end": "3009620"
  },
  {
    "text": "working super hard it's ready alright let's see what did memory GC",
    "start": "3009620",
    "end": "3015470"
  },
  {
    "text": "stats and it it collects the entire machine not just a prompt process so you",
    "start": "3015470",
    "end": "3021380"
  },
  {
    "text": "have to find your process in this HTML page and allocated to gigabytes whoa",
    "start": "3021380",
    "end": "3030200"
  },
  {
    "text": "it's not bad a second you see pauses large object heap allocations where is",
    "start": "3030200",
    "end": "3037940"
  },
  {
    "text": "it out large off the wazoo yeah so this and but it had this RPS so maybe maybe",
    "start": "3037940",
    "end": "3044570"
  },
  {
    "text": "I'm fine let's try doing it differently let's try using NBC's built-in built-in",
    "start": "3044570",
    "end": "3051110"
  },
  {
    "text": "it from body okay from body",
    "start": "3051110",
    "end": "3056320"
  },
  {
    "text": "get rid of this and this should be was it it's even easier to type good",
    "start": "3061099",
    "end": "3068910"
  },
  {
    "text": "let's call it after right that's right again seems less micro-service II though does it",
    "start": "3068910",
    "end": "3074430"
  },
  {
    "text": "I'm relying on a framework to do it all for me yeah I don't know what's going on let's collect again I'm gonna run this",
    "start": "3074430",
    "end": "3082380"
  },
  {
    "text": "thing first and then rush to collect rush to say start and I preserve my",
    "start": "3082380",
    "end": "3089670"
  },
  {
    "text": "option it's a good tool oh I lost it did",
    "start": "3089670",
    "end": "3097230"
  },
  {
    "text": "it finish okay done it's much slower though oh damn it but it's easier",
    "start": "3097230",
    "end": "3108619"
  },
  {
    "text": "working it's ready okay same thing in GC stats sync over a sink okay",
    "start": "3108650",
    "end": "3116549"
  },
  {
    "text": "look at that allocated one gig just under two gay : a gig is January the",
    "start": "3116549",
    "end": "3123089"
  },
  {
    "text": "other one I mean I could have let that slide but I",
    "start": "3123089",
    "end": "3128619"
  },
  {
    "text": "would have I couldn't a straight face in front of all these people again past",
    "start": "3128619",
    "end": "3134330"
  },
  {
    "text": "time is like minimal okay that that's good no pause no past time it was like",
    "start": "3134330",
    "end": "3139430"
  },
  {
    "text": "1.3 seconds or something before a total pause time yep yeah allocations are all",
    "start": "3139430",
    "end": "3144740"
  },
  {
    "text": "small nothing on the large object heap but it's slower yeah so here's an",
    "start": "3144740",
    "end": "3149900"
  },
  {
    "text": "example of a trade up you can make where the thing that is faster that's really bad for memory so pick your poison",
    "start": "3149900",
    "end": "3155450"
  },
  {
    "text": "better RPS worst memory less latency at some point it'll fall over I like boom",
    "start": "3155450",
    "end": "3161240"
  },
  {
    "text": "right but it's pretty good right yeah okay you can't have everything unfortunately all the time you can't",
    "start": "3161240",
    "end": "3167960"
  },
  {
    "start": "3166000",
    "end": "3261000"
  },
  {
    "text": "nope all right um fix ish okay who here",
    "start": "3167960",
    "end": "3173300"
  },
  {
    "text": "has this good navigation this is so straight that's good this code is trying to take a task that doesn't happen an",
    "start": "3173300",
    "end": "3178490"
  },
  {
    "text": "intrinsic cancellation behavior and timeout the operation afterwards so you take that task you take a second task as",
    "start": "3178490",
    "end": "3185150"
  },
  {
    "text": "did some timeout delay and then you race both of them so when any sort of so if the delay task finishes first throw an",
    "start": "3185150",
    "end": "3192440"
  },
  {
    "text": "exception otherwise return the actual task anyone done this this is really calming sense right super common right",
    "start": "3192440",
    "end": "3198760"
  },
  {
    "text": "it's almost this code is almost correct almost correct for broken so timers and",
    "start": "3198760",
    "end": "3206960"
  },
  {
    "text": "dotnet are the thing called a timer Q and timers are a linked list whenever",
    "start": "3206960",
    "end": "3212869"
  },
  {
    "text": "you call you know new timer it asks that list of timers it's optimized for adding",
    "start": "3212869",
    "end": "3218000"
  },
  {
    "text": "and removing me actually running a timer Kaba is from the thread pool that's why if you have starvation cameras won't run",
    "start": "3218000",
    "end": "3224600"
  },
  {
    "text": "on time so you can actually get things out a thing about having starvation in your process each timer queue has a",
    "start": "3224600",
    "end": "3230270"
  },
  {
    "text": "giant lock and a non full framework it's actually one cue for the whole process so it's really bad",
    "start": "3230270",
    "end": "3236750"
  },
  {
    "text": "on course much better I mean this mean the supposed timers I guess you can Moo from the queue it's kind of my",
    "start": "3236750",
    "end": "3243650"
  },
  {
    "text": "pretty-pretty slave slave plea so this is like dotnet core I had to sign a core",
    "start": "3243650",
    "end": "3249020"
  },
  {
    "text": "has one Whomper see Pete Whomper core imagine I have two cores on that frame where has one my time is yeah and that's",
    "start": "3249020",
    "end": "3255440"
  },
  {
    "text": "the queue okay when you call remove it goes away fires it goes away I'm Carter defaults in the queue okay all right let me show",
    "start": "3255440",
    "end": "3262310"
  },
  {
    "start": "3261000",
    "end": "3366000"
  },
  {
    "text": "I have a I have a dump that'll show so I won't actually debug the actual thing",
    "start": "3262310",
    "end": "3267349"
  },
  {
    "text": "but the app that I ran I ran this out beforehand you know call us on the",
    "start": "3267349",
    "end": "3273589"
  },
  {
    "text": "external service and then timeout after 30 seconds all right to make sure it never runs out never runs pop out under",
    "start": "3273589",
    "end": "3279710"
  },
  {
    "text": "the covers is doing exactly yes that did before you know timers are a lot more popular now than they were like prior to",
    "start": "3279710",
    "end": "3286339"
  },
  {
    "text": "dotnet for really once once tasks came around and then with async await and it became very easy to fire off async work",
    "start": "3286339",
    "end": "3292700"
  },
  {
    "text": "but you wanted that work to timeout you either did it manually or there's now intrinsic so you use poly or you use a",
    "start": "3292700",
    "end": "3298630"
  },
  {
    "text": "library an API in the framework and it'll be doing this for you under the covers so my meds are created everywhere now",
    "start": "3298630",
    "end": "3305089"
  },
  {
    "text": "it's very very normal I'm going to try putting into until video studio and I'm gonna try a debugging managed memory hope it doesn't",
    "start": "3305089",
    "end": "3311930"
  },
  {
    "text": "crash our fall over a lot of objects that's the law oh five million I think",
    "start": "3311930",
    "end": "3318140"
  },
  {
    "text": "this thing crashes please don't crash you've got RAM right uh-huh no hold the",
    "start": "3318140",
    "end": "3324050"
  },
  {
    "text": "RAM yep there we go super reliable ok",
    "start": "3324050",
    "end": "3332270"
  },
  {
    "text": "look at that thing Tamarack you timer look at the individual timer entries in the linked list so the reason this is",
    "start": "3332270",
    "end": "3339740"
  },
  {
    "text": "happening is because if the operation finishes fast enough that the time out kind of doesn't matter anymore it'll",
    "start": "3339740",
    "end": "3346010"
  },
  {
    "text": "still be in the queue because no one's had to dispose the timer so you'll hang around for that for that duration if I",
    "start": "3346010",
    "end": "3351380"
  },
  {
    "text": "keep doing that it just pull up forever forever forever okay so at a time a leak tymberlee ok so every every every time",
    "start": "3351380",
    "end": "3359240"
  },
  {
    "text": "the timer takes it'll be over Alzheimer's and fire them in order ok so it's a very inefficient so this gets",
    "start": "3359240",
    "end": "3365270"
  },
  {
    "text": "worse and worse yes yeah it gets worse and worse ok so the fix is to do this create a token",
    "start": "3365270",
    "end": "3371300"
  },
  {
    "start": "3366000",
    "end": "3600000"
  },
  {
    "text": "pass it into the actual time into the delay and then if the thing that finish",
    "start": "3371300",
    "end": "3376310"
  },
  {
    "text": "was wasn't the delay task cancel timer and this will actually stop this would this would get out of the",
    "start": "3376310",
    "end": "3382160"
  },
  {
    "text": "actual timer queue and have it not leak anymore I for the bug after I found it I agree",
    "start": "3382160",
    "end": "3391710"
  },
  {
    "text": "I super agree so yes I agree it's so",
    "start": "3391710",
    "end": "3397350"
  },
  {
    "text": "common that it should be in the frame because we did we find this because a customer I found it you know is making",
    "start": "3397350",
    "end": "3402690"
  },
  {
    "text": "this talk so I we found it on a on a",
    "start": "3402690",
    "end": "3408270"
  },
  {
    "text": "test I think we wrote it for Castro okay and the test was hanging oh this is what the flaky test we saw a million times",
    "start": "3408270",
    "end": "3414240"
  },
  {
    "text": "that's right and I was like yeah we'd have tests that would randomly fail yep okay more fun dotnet I think traps what",
    "start": "3414240",
    "end": "3420090"
  },
  {
    "text": "is wrong here this looks fine right a synchronous it's calling right it's saying it looks all good",
    "start": "3420090",
    "end": "3425760"
  },
  {
    "text": "what's the issue I'll tell you what the issue is so right it's just this type",
    "start": "3425760",
    "end": "3432870"
  },
  {
    "text": "actually buffers the data rights it's when I call the right thing it stores it in the buffer it's only if the buffer",
    "start": "3432870",
    "end": "3438870"
  },
  {
    "text": "has exceeded that that actually goes to the stream so what is up happening here is it buffers hello world because it's a",
    "start": "3438870",
    "end": "3444600"
  },
  {
    "text": "very small payload and then this bull will wreck it synchronously to the actual stream which is really bad or so",
    "start": "3444600",
    "end": "3451770"
  },
  {
    "text": "you think you're doing anything io turns out you're not the fix is it's go flush crazy right yeah so the problem was it",
    "start": "3451770",
    "end": "3461340"
  },
  {
    "text": "implicitly flushes the stream on this boat after I've written and it does it on a synchronous code path it's disposed",
    "start": "3461340",
    "end": "3467550"
  },
  {
    "text": "isn't disposed async coming in yeah don't worry about Nate quarry okay but this is the case for every single type",
    "start": "3467550",
    "end": "3473640"
  },
  {
    "text": "of streaming done it the buffers so gzipstream file stream it's a cell",
    "start": "3473640",
    "end": "3479280"
  },
  {
    "text": "stream yeah Wow anything that's I mean funny because we turned sync I off in a",
    "start": "3479280",
    "end": "3484530"
  },
  {
    "text": "snack Oreo and guess what happened everything failed that's a good point you know it's been a cool 302 help you find these type of things I tried to get",
    "start": "3484530",
    "end": "3490350"
  },
  {
    "text": "it done in two Oh I pushed and then too much stuff broke so in a spinnaker three if anything goes",
    "start": "3490350",
    "end": "3496590"
  },
  {
    "text": "synchronous on the writing path I think over a sink it will throw the request will fail and it will say nope you tried",
    "start": "3496590",
    "end": "3503100"
  },
  {
    "text": "to do a sync operation in the async context that has led to us finding a lot of issues in the framework which is good",
    "start": "3503100",
    "end": "3509940"
  },
  {
    "text": "in people's libraries and what type of stuff as well sorry see what else sometimes you have to be really strict in order to find the issues that you",
    "start": "3509940",
    "end": "3515940"
  },
  {
    "text": "want to weed out there's a pattern here where you call getter add and the actual thing you want to ask the do in the in the callback is",
    "start": "3515940",
    "end": "3522270"
  },
  {
    "text": "asynchronous I've seen people do that result there doesn't help this is actually the same issue a sink over async what you can do instead is store a",
    "start": "3522270",
    "end": "3530700"
  },
  {
    "text": "connection area of something to task of blah then the issue is that you may end",
    "start": "3530700",
    "end": "3535980"
  },
  {
    "text": "up running this callback multiple times because it runs it can run more than once per key right right if you want to",
    "start": "3535980",
    "end": "3541380"
  },
  {
    "text": "stop that then you just do a lazy of oh wow lazy of tasks of T and async lazy",
    "start": "3541380",
    "end": "3547619"
  },
  {
    "text": "you may I made a type to make it yes less less generic okay and more lambdas",
    "start": "3547619",
    "end": "3554849"
  },
  {
    "text": "to make you make your brain explode yeah",
    "start": "3554849",
    "end": "3564740"
  },
  {
    "text": "yes that's pretty bad however handling and that so much to fix that bug I send me a poor request it's pretty common if",
    "start": "3564740",
    "end": "3572849"
  },
  {
    "text": "you want to cut to like some back-end service that startup or in LA Leslie so you have a factory that kind to a thing",
    "start": "3572849",
    "end": "3580230"
  },
  {
    "text": "in the user connection that does pub/sub like Redis for example people do this in the constructor oh who needs to write",
    "start": "3580230",
    "end": "3586829"
  },
  {
    "text": "asynchronous work in their constructor yeah cuz you want to get the connection is super early and there's no sink right edit oops",
    "start": "3586829",
    "end": "3593910"
  },
  {
    "text": "there's no good fix here to be honest yeah just change your life just don't do it in the constructor yeah I mean I know",
    "start": "3593910",
    "end": "3599400"
  },
  {
    "text": "I just write I'm sorry there's no other fix for that currently you have to react attacked it to not do that okay you want",
    "start": "3599400",
    "end": "3607170"
  },
  {
    "text": "to show you a doc before the end yeah we are going to work on all of this stuff so the future enhancements we're so",
    "start": "3607170",
    "end": "3614010"
  },
  {
    "text": "David's working with a bunch of folks at Microsoft to try and build a set of tools where the command-line tools Visual Studio features and analyzers to",
    "start": "3614010",
    "end": "3620730"
  },
  {
    "text": "help you find a lot of these things while you're coding and then analyze them after the fact as well obviously a",
    "start": "3620730",
    "end": "3626609"
  },
  {
    "text": "lot of the stuff here is difficult so this is a bunch of guidance the Fowler's been working on on his repo yeah yeah",
    "start": "3626609",
    "end": "3633000"
  },
  {
    "text": "for now Holly's been acquired diagnostic scenarios I mean has a ton of father is this crazy yeah so check that out for",
    "start": "3633000",
    "end": "3638730"
  },
  {
    "text": "what you saw today I use examples of everything you saw today plus a whole bunch of other stuff is yeah right cool",
    "start": "3638730",
    "end": "3644460"
  },
  {
    "text": "and with that we're done yep we're out of time so thank you very much again coming please check out that stuff",
    "start": "3644460",
    "end": "3651400"
  },
  {
    "text": "see you next time",
    "start": "3651400",
    "end": "3655440"
  }
]