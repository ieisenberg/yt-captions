[
  {
    "text": "all right and welcome everyone are we properly caffeinated it's okay I",
    "start": "4220",
    "end": "12799"
  },
  {
    "text": "see some cups okay cuz it's getting pretty late in the day so although it's",
    "start": "12799",
    "end": "18800"
  },
  {
    "text": "I have a very cheerful and uplifting title I must warn you that it's gonna be",
    "start": "18800",
    "end": "24820"
  },
  {
    "text": "ugly and we're gonna spend almost an",
    "start": "24820",
    "end": "31460"
  },
  {
    "text": "hour talking today about something relatively new in C++ and that is string",
    "start": "31460",
    "end": "38839"
  },
  {
    "text": "views my name is Victor Chara and I've",
    "start": "38839",
    "end": "44719"
  },
  {
    "text": "been programming C++ for over 15 years now I've been working on a product",
    "start": "44719",
    "end": "50179"
  },
  {
    "text": "called advanced installer for 13 years and lately I've been involved with an open",
    "start": "50179",
    "end": "58069"
  },
  {
    "text": "source project that we started with some of my colleagues client power tools you",
    "start": "58069",
    "end": "65268"
  },
  {
    "text": "can reach out to me on Twitter and you can figure out my email address if",
    "start": "65269",
    "end": "70430"
  },
  {
    "text": "that's needed first of all this is part 1 of n of this talk I plan to study this",
    "start": "70430",
    "end": "79310"
  },
  {
    "text": "a bit more and already I received plenty of feedback on my ideas and people are",
    "start": "79310",
    "end": "88190"
  },
  {
    "text": "really interested in this topic and depending on how well it goes this might be one of N or n might be just one so",
    "start": "88190",
    "end": "98870"
  },
  {
    "text": "much stream view where I are we talking about scene view where why are we",
    "start": "98870",
    "end": "104900"
  },
  {
    "text": "talking about strings have you really exhausted all the cool C++ template tricks that seems kind of boring talking",
    "start": "104900",
    "end": "113030"
  },
  {
    "text": "about strings well wouldn't be nice if",
    "start": "113030",
    "end": "118580"
  },
  {
    "text": "we had a standard string type that we can use all over our systems well we do",
    "start": "118580",
    "end": "125240"
  },
  {
    "text": "stand-up string it's right there in the standard name is obvious but wouldn't it",
    "start": "125240",
    "end": "132050"
  },
  {
    "text": "be nice if we could use this standard string throughout our project",
    "start": "132050",
    "end": "137150"
  },
  {
    "text": "and our applications well we unless we're writing just services or console",
    "start": "137150",
    "end": "145849"
  },
  {
    "text": "applications it's kind of difficult because at some point we didn't do need",
    "start": "145849",
    "end": "151190"
  },
  {
    "text": "to interact with gooeys frameworks or operating system api is and that's when",
    "start": "151190",
    "end": "157610"
  },
  {
    "text": "things start to become complicated when we do need to interact with some other form of string type beat we we're",
    "start": "157610",
    "end": "167299"
  },
  {
    "text": "talking about C family of api's from the operating systems or some more or less",
    "start": "167299",
    "end": "174260"
  },
  {
    "text": "modern grief rap framework with its own string type so depending on your",
    "start": "174260",
    "end": "179480"
  },
  {
    "text": "situation we you might be facing using a TLC string or an FCC string or the",
    "start": "179480",
    "end": "188329"
  },
  {
    "text": "modern Windows platform string from WinRT or q string fully FB string",
    "start": "188329",
    "end": "197209"
  },
  {
    "text": "whatever depending on your project by",
    "start": "197209",
    "end": "202430"
  },
  {
    "text": "the way WTF string is just from WebKit I'm not being nasty here so depending on your",
    "start": "202430",
    "end": "213680"
  },
  {
    "text": "string type there are various considerations that each project or each foundational",
    "start": "213680",
    "end": "220579"
  },
  {
    "text": "library has had to think about over the years things like that it supports small",
    "start": "220579",
    "end": "227720"
  },
  {
    "text": "string optimization nowadays most string classes support small string",
    "start": "227720",
    "end": "233120"
  },
  {
    "text": "optimization does it implement something like copy-on-write for example the",
    "start": "233120",
    "end": "238489"
  },
  {
    "text": "standard string is no longer allowed to do this kind of optimization but many of",
    "start": "238489",
    "end": "245480"
  },
  {
    "text": "the platform strings and framework strings do implement something like copyright for example eight years or",
    "start": "245480",
    "end": "252709"
  },
  {
    "text": "MFCs c string is it thread safe can I",
    "start": "252709",
    "end": "258799"
  },
  {
    "text": "customize the chart traits can I customize it with a custom a locator",
    "start": "258799",
    "end": "263919"
  },
  {
    "text": "does it play well with string literals or can I use it in context / context",
    "start": "263919",
    "end": "270969"
  },
  {
    "text": "does it support encodings or locales does it have full support for Unicode",
    "start": "270969",
    "end": "277569"
  },
  {
    "text": "well many others such questions come up",
    "start": "277569",
    "end": "283189"
  },
  {
    "text": "but we're not going to focus off on any of those today well super C++ super",
    "start": "283189",
    "end": "291080"
  },
  {
    "text": "string to the rescue no seriously there is a project on github",
    "start": "291080",
    "end": "296509"
  },
  {
    "text": "that's called super string and apparently it's very efficient in some situations it actually uses some kind of",
    "start": "296509",
    "end": "302899"
  },
  {
    "text": "rope structure inside if you check it out but on a more serious note so en you",
    "start": "302899",
    "end": "311149"
  },
  {
    "text": "end up with a let's call it X string which is your platform or your framework",
    "start": "311149",
    "end": "316489"
  },
  {
    "text": "string and you have standard string the one that you use in your models and in",
    "start": "316489",
    "end": "322759"
  },
  {
    "text": "your business logic and you have to interact somehow with those and you can",
    "start": "322759",
    "end": "330529"
  },
  {
    "text": "use the common denominator they can all decay to some kind of pointer to char",
    "start": "330529",
    "end": "335869"
  },
  {
    "text": "and you end up using some glue code you",
    "start": "335869",
    "end": "341059"
  },
  {
    "text": "say okay I'm gonna use the standard string in my serious business logic code",
    "start": "341059",
    "end": "346240"
  },
  {
    "text": "and I try to maximize the usage of standard string and when I have to interact with some framework or the",
    "start": "346240",
    "end": "352610"
  },
  {
    "text": "operating system I'll use that proprietary string type and of course",
    "start": "352610",
    "end": "357860"
  },
  {
    "text": "some unnecessary copies are needed in order to transport data between those",
    "start": "357860",
    "end": "364939"
  },
  {
    "text": "two types and adapt them but we call that glue code anyway doesn't matter it's not gonna be pretty but it's small",
    "start": "364939",
    "end": "373479"
  },
  {
    "text": "but what happens if over time you start building up a collection as your project",
    "start": "373479",
    "end": "379639"
  },
  {
    "text": "goes you start building up a collection of utilities and algorithms based on strings various manipulation methods",
    "start": "379639",
    "end": "386959"
  },
  {
    "text": "that you might need and that collection grows over time what do you do do you",
    "start": "386959",
    "end": "394429"
  },
  {
    "text": "constrain yourself to just using those algorithmic goodies to standard string what if I want some string helper or",
    "start": "394429",
    "end": "402680"
  },
  {
    "text": "string algorithm that I developed and I want to use it for some UI strings for example using an FCC",
    "start": "402680",
    "end": "408509"
  },
  {
    "text": "string or platform string so do we duplicate that code do we implement the",
    "start": "408509",
    "end": "415319"
  },
  {
    "text": "algorithm using the con star star and lose the type safety and the nice",
    "start": "415319",
    "end": "421289"
  },
  {
    "text": "goodies that come with a typed string type string class well some people think",
    "start": "421289",
    "end": "428819"
  },
  {
    "text": "that string view is the solution string view for those of you who haven't seen",
    "start": "428819",
    "end": "434369"
  },
  {
    "text": "it before it's a new type in C++ 17 what",
    "start": "434369",
    "end": "440069"
  },
  {
    "text": "we have to figure out is string view is the answer to all our plant problems and",
    "start": "440069",
    "end": "446519"
  },
  {
    "text": "we'll try to figure out these all together in the next minute or so but first one more serious note how many of",
    "start": "446519",
    "end": "454800"
  },
  {
    "text": "you are still stuck on some old compiler okay few hands how about C++ 11 okay 14",
    "start": "454800",
    "end": "466679"
  },
  {
    "text": "little better no I'm losing hands here 70 oh good good so just in case C++ 17",
    "start": "466679",
    "end": "480209"
  },
  {
    "text": "is off-limits there are alternatives like undress talked earlier about abseil",
    "start": "480209",
    "end": "487829"
  },
  {
    "text": "do you have observed ring view string piece this is an older one from google",
    "start": "487829",
    "end": "493319"
  },
  {
    "text": "string ref from LLVM boost string ref or fully",
    "start": "493319",
    "end": "499319"
  },
  {
    "text": "range I do have to give a special",
    "start": "499319",
    "end": "505279"
  },
  {
    "text": "shout-out to AB cell how many of you have heard of up save from Google okay",
    "start": "505279",
    "end": "513060"
  },
  {
    "text": "good so epsilon you has pretty good",
    "start": "513060",
    "end": "518068"
  },
  {
    "text": "documentation on it I've put a link there for reference it explains the",
    "start": "518069",
    "end": "523709"
  },
  {
    "text": "rationale in its existence gives good example in some of the gotchas some of",
    "start": "523709",
    "end": "529620"
  },
  {
    "text": "the mark I'll cover in this talk as well and absol itself for those of us who",
    "start": "529620",
    "end": "537059"
  },
  {
    "text": "haven't it's an open source collection of C++ library code that it's designed to",
    "start": "537059",
    "end": "543839"
  },
  {
    "text": "augment the standard library not to replace it and it basically adds new",
    "start": "543839",
    "end": "551509"
  },
  {
    "text": "utilities that are usually insipid and modern C++ class C++ supplant 17 or",
    "start": "551509",
    "end": "557130"
  },
  {
    "text": "coming in C++ 20 and they they add it as being backwards compatible with older",
    "start": "557130",
    "end": "562829"
  },
  {
    "text": "compiler tool chains so it's like a transition clutch so to speak and you",
    "start": "562829",
    "end": "570509"
  },
  {
    "text": "have very useful stuff in there do you",
    "start": "570509",
    "end": "576930"
  },
  {
    "text": "remember herp satyrs guru of the week series the older of you probably still",
    "start": "576930",
    "end": "582720"
  },
  {
    "text": "remember that I used to read those well they do something similar with absol",
    "start": "582720",
    "end": "589500"
  },
  {
    "text": "types I highly recommend that you read through those and subscribe to any new",
    "start": "589500",
    "end": "595680"
  },
  {
    "text": "stuff that comes in they're very useful and here's the link EPS I upsold apples",
    "start": "595680",
    "end": "602040"
  },
  {
    "text": "left tips lots of interesting stuff some of them complementing the core C++ guidelines some new stuff in there that",
    "start": "602040",
    "end": "609060"
  },
  {
    "text": "you won't find in a cpp core guidelines very useful stuff and I like the format",
    "start": "609060",
    "end": "614370"
  },
  {
    "text": "as well lots of examples and short rationales in wouldn't you know the very",
    "start": "614370",
    "end": "620850"
  },
  {
    "text": "first tip is about string views so definitely check that out but let's get",
    "start": "620850",
    "end": "628980"
  },
  {
    "text": "into the meat of the problem let's meet C++ 17 string view this is roughly the",
    "start": "628980",
    "end": "635180"
  },
  {
    "text": "the overview definition of it on cpp reference comm it is meant to be a class",
    "start": "635180",
    "end": "643230"
  },
  {
    "text": "template that describes an object which can refer to a constant continuous",
    "start": "643230",
    "end": "648449"
  },
  {
    "text": "sequence of char like objects the keyword being constant here and",
    "start": "648449",
    "end": "653600"
  },
  {
    "text": "conceptually a typical implementation is a pointer to a constant char and the",
    "start": "653600",
    "end": "659430"
  },
  {
    "text": "size so very simple what could go wrong with that it has almost the same",
    "start": "659430",
    "end": "667500"
  },
  {
    "text": "interface as standard string except for modifier methods of course and as a plus",
    "start": "667500",
    "end": "676950"
  },
  {
    "text": "they do offer some sliding capabilities in terms of the window we see into that",
    "start": "676950",
    "end": "683880"
  },
  {
    "text": "continuous sequence by modifying the prefix or the suffix of this range",
    "start": "683880",
    "end": "689630"
  },
  {
    "text": "helpful in stream processing I would say so it's a lightweight string like view",
    "start": "689630",
    "end": "696779"
  },
  {
    "text": "in an intron array of characters it can be constructed from a null terminated string more on that later",
    "start": "696779",
    "end": "703290"
  },
  {
    "text": "all from a pointer to a character string and the length and it is intended to",
    "start": "703290",
    "end": "711120"
  },
  {
    "text": "play well with string literals and in context per context it's design goal is",
    "start": "711120",
    "end": "717839"
  },
  {
    "text": "to avoid unnecessary copies of standard strings and it was designed to",
    "start": "717839",
    "end": "725430"
  },
  {
    "text": "interoperate well with standard string we'll see some of the conversion operators involved and some of the",
    "start": "725430",
    "end": "731730"
  },
  {
    "text": "conversion constructors related to this but it although is a very neat and",
    "start": "731730",
    "end": "738260"
  },
  {
    "text": "apparently simple helper it does come with some usage complexity as we'll see",
    "start": "738260",
    "end": "744290"
  },
  {
    "text": "it's very helpful in many situations and it's very tempting to use it but it does",
    "start": "744290",
    "end": "750330"
  },
  {
    "text": "come with some gotchas but first of all",
    "start": "750330",
    "end": "756000"
  },
  {
    "text": "why are we trying to avoid temporary strings right they're not exactly small",
    "start": "756000",
    "end": "761610"
  },
  {
    "text": "they hold at least three pointers they can cause memory allocations small sync",
    "start": "761610",
    "end": "768180"
  },
  {
    "text": "optimization mitigate some of these issues and we do have to copy data",
    "start": "768180",
    "end": "774089"
  },
  {
    "text": "around and implementations using something like copy-on-write",
    "start": "774089",
    "end": "779670"
  },
  {
    "text": "for some custom string types avoid this issue but if we're talking about",
    "start": "779670",
    "end": "784980"
  },
  {
    "text": "interacting with under strings that's off the table and string view does not manage its",
    "start": "784980",
    "end": "792900"
  },
  {
    "text": "storage as opposed to the standard string the lifetime management of a string view is the responsibility of the",
    "start": "792900",
    "end": "799380"
  },
  {
    "text": "color of the user",
    "start": "799380",
    "end": "802160"
  },
  {
    "text": "so it's basically just a handle type so when we do use a string view in standard",
    "start": "805060",
    "end": "812540"
  },
  {
    "text": "Ostrander string do it just replace all our usages of standard string of course not",
    "start": "812540",
    "end": "818650"
  },
  {
    "text": "can we safely use it everywhere when we have to interact with some",
    "start": "818650",
    "end": "824300"
  },
  {
    "text": "platform-specific string a new string view as a common denominator because of its conversions well let's see",
    "start": "824300",
    "end": "835120"
  },
  {
    "text": "first of all let's examine some of its cause some of its constructors the usual",
    "start": "835120",
    "end": "841820"
  },
  {
    "text": "suspects like default constructor copy constructor and we have a constructor",
    "start": "841820",
    "end": "847880"
  },
  {
    "text": "that constructs from a sequence of characters and the count and one that",
    "start": "847880",
    "end": "853610"
  },
  {
    "text": "assumes a new alternate string key word being assumes what can you tell me about",
    "start": "853610",
    "end": "862160"
  },
  {
    "text": "the one I'm pointing at there it's useful it happens a lot when you don't",
    "start": "862160",
    "end": "871490"
  },
  {
    "text": "even know it but it does come with the cost so assuming an ultra means it still in",
    "start": "871490",
    "end": "878600"
  },
  {
    "text": "string first of all it really has to be null terminated and you do have to count",
    "start": "878600",
    "end": "884300"
  },
  {
    "text": "then the number of characters in there until you reach the null termination so it does come with a performance penalty",
    "start": "884300",
    "end": "889910"
  },
  {
    "text": "in in situations where you really know the length I wouldn't do that yeah you",
    "start": "889910",
    "end": "899360"
  },
  {
    "text": "can you can as opposed to standard string you may pass yeah I think it's",
    "start": "899360",
    "end": "907820"
  },
  {
    "text": "okay so this is the costly constructor",
    "start": "907820",
    "end": "913580"
  },
  {
    "text": "and when this I'm pointing this out because frequently I've seen situations",
    "start": "913580",
    "end": "919490"
  },
  {
    "text": "where people actually unwillingly or without the knowledge actually fall back",
    "start": "919490",
    "end": "927230"
  },
  {
    "text": "on that constructor when it's not necessary so they're needlessly calculating the string length I'm not",
    "start": "927230",
    "end": "934670"
  },
  {
    "text": "talking about very long strings here but it's a course you don't want to pay for and it may happen at compile time or not",
    "start": "934670",
    "end": "942470"
  },
  {
    "text": "depending if it's a string literal or if you're in a context but context so let's",
    "start": "942470",
    "end": "950030"
  },
  {
    "text": "see on the other side for standard string because standard string was revised to be able to play nice with",
    "start": "950030",
    "end": "958420"
  },
  {
    "text": "string view and standard string gained a conversion operator to string view and",
    "start": "958420",
    "end": "965360"
  },
  {
    "text": "it basically constructs it as string data and stream size and it returns a",
    "start": "965360",
    "end": "972050"
  },
  {
    "text": "string view of that type so if we were to sum up all the conversions that can",
    "start": "972050",
    "end": "978920"
  },
  {
    "text": "happen back and forth a standard string is constructible from an array of characters a string view is a",
    "start": "978920",
    "end": "985610"
  },
  {
    "text": "constructible from an array of characters standard string automatically",
    "start": "985610",
    "end": "991280"
  },
  {
    "text": "converts to a string view via a conversion operator like we saw and you",
    "start": "991280",
    "end": "996770"
  },
  {
    "text": "can construct a standard string from a string view via an explicit constructor okay manageable sounds okay let's think",
    "start": "996770",
    "end": "1008860"
  },
  {
    "text": "about storing string views short storing being don't but let's see some",
    "start": "1008860",
    "end": "1016540"
  },
  {
    "text": "compelling examples we're talking about storing string views in your classes or",
    "start": "1016540",
    "end": "1024069"
  },
  {
    "text": "in containers in general let's see we have a vector of string views elements and a save function that takes",
    "start": "1024070",
    "end": "1031660"
  },
  {
    "text": "a string by constants let's say we have this utility method we already have it",
    "start": "1031660",
    "end": "1040180"
  },
  {
    "text": "in our code base and we decide to change the storage and store them as just views",
    "start": "1040180",
    "end": "1045400"
  },
  {
    "text": "into some external strings because we say we don't need to copy those strings",
    "start": "1045400",
    "end": "1050500"
  },
  {
    "text": "we're just processing them automatic conversion no compiler warning and we",
    "start": "1050500",
    "end": "1060010"
  },
  {
    "text": "basically end up potentially handling hanging on to dangling references",
    "start": "1060010",
    "end": "1066040"
  },
  {
    "text": "because those strings can be de-allocated we don't have any control we don't have any",
    "start": "1066040",
    "end": "1071889"
  },
  {
    "text": "knowledge of their lifetime and you can easily hang out to dangling string",
    "start": "1071889",
    "end": "1079080"
  },
  {
    "text": "references in your vector without even knowing it because you have a disconnect in ownership responsibilities there",
    "start": "1079080",
    "end": "1087389"
  },
  {
    "text": "another simple example the other way around now let's think we have a map",
    "start": "1087389",
    "end": "1093639"
  },
  {
    "text": "with string keys standard string not string views and we think ok let's",
    "start": "1093639",
    "end": "1102460"
  },
  {
    "text": "change let's use it as an argument let's change the signature of our gate frequency for key words method from",
    "start": "1102460",
    "end": "1110169"
  },
  {
    "text": "taking a constant string Rev to a string",
    "start": "1110169",
    "end": "1115240"
  },
  {
    "text": "view and we return the frequency of a given keyword this doesn't compile there",
    "start": "1115240",
    "end": "1126460"
  },
  {
    "text": "is no conversion to standard string everyone okay with this so if we're",
    "start": "1126460",
    "end": "1135730"
  },
  {
    "text": "trying to use the map add method because the key is a standard string we can",
    "start": "1135730",
    "end": "1141399"
  },
  {
    "text": "cannot actually do this intuitively you would think it would work but it doesn't",
    "start": "1141399",
    "end": "1148559"
  },
  {
    "text": "okay let's explore this a bit further what if you is using the transplant comparator",
    "start": "1148559",
    "end": "1156370"
  },
  {
    "text": "like standard less here let's implement",
    "start": "1156370",
    "end": "1161740"
  },
  {
    "text": "gate frequency for keyword another way by using this transparent comparator",
    "start": "1161740",
    "end": "1169659"
  },
  {
    "text": "again we're taking a string view as a parameter and we're storing standard strings in our map",
    "start": "1169659",
    "end": "1175600"
  },
  {
    "text": "all right well batteries included a",
    "start": "1175600",
    "end": "1184049"
  },
  {
    "text": "string view does come in the box with operator less so you can actually use a",
    "start": "1184049",
    "end": "1192809"
  },
  {
    "text": "transparent operator to implement something like that so this is a",
    "start": "1192809",
    "end": "1199059"
  },
  {
    "text": "workable solution for our example of keyword frequencies so string view does",
    "start": "1199059",
    "end": "1207380"
  },
  {
    "text": "come with a collection of utilities like",
    "start": "1207380",
    "end": "1212570"
  },
  {
    "text": "all sorts of combinations of operators like less than equal and so on so I",
    "start": "1212570",
    "end": "1224510"
  },
  {
    "text": "generally tend to use high warning levels and treat all warnings as errors",
    "start": "1224510",
    "end": "1230870"
  },
  {
    "text": "and I generally I'm very comfortable on relying my on my compiler to to help me",
    "start": "1230870",
    "end": "1236630"
  },
  {
    "text": "and point out mistakes or potentially dangerous situations that I might use",
    "start": "1236630",
    "end": "1244060"
  },
  {
    "text": "well not so well sometimes our compilers",
    "start": "1244060",
    "end": "1250550"
  },
  {
    "text": "fail us let's see a simple example we",
    "start": "1250550",
    "end": "1255650"
  },
  {
    "text": "have a sink we usually call this idiom a sink we have a parameter for a",
    "start": "1255650",
    "end": "1263390"
  },
  {
    "text": "constructor and we store it directly into our member pretty standard stuff if",
    "start": "1263390",
    "end": "1269150"
  },
  {
    "text": "this was a sink that took a standard string by reference this is almost in",
    "start": "1269150",
    "end": "1276320"
  },
  {
    "text": "idiomatic code if you're not comfortable with the CD move you can even ignore",
    "start": "1276320",
    "end": "1281510"
  },
  {
    "text": "that part and just assume were copying it but let's analyze the situation when",
    "start": "1281510",
    "end": "1288980"
  },
  {
    "text": "we try to replace the string reference in the constructor with a string you",
    "start": "1288980",
    "end": "1294140"
  },
  {
    "text": "like we have here should this work does",
    "start": "1294140",
    "end": "1302210"
  },
  {
    "text": "this compile well yes he does is this safe what I",
    "start": "1302210",
    "end": "1316330"
  },
  {
    "text": "think is this safe okay why does this",
    "start": "1316330",
    "end": "1323380"
  },
  {
    "text": "compile that would be the question well",
    "start": "1323380",
    "end": "1332910"
  },
  {
    "text": "we have yeah I heard something in the in the audience we do have an explicit",
    "start": "1332910",
    "end": "1339670"
  },
  {
    "text": "constructor for standard string that says something like this I can construct",
    "start": "1339670",
    "end": "1346930"
  },
  {
    "text": "a standard string from any type that is",
    "start": "1346930",
    "end": "1351940"
  },
  {
    "text": "convertible to a string view and I can initialize my standard string with it",
    "start": "1351940",
    "end": "1358360"
  },
  {
    "text": "and conceptually it converts that T argument into a string view as if we",
    "start": "1358360",
    "end": "1366430"
  },
  {
    "text": "would assign an initialize it and then initialize it it initializes the current",
    "start": "1366430",
    "end": "1373300"
  },
  {
    "text": "string with string view data and size and optionally a locator so this",
    "start": "1373300",
    "end": "1380520"
  },
  {
    "text": "explicit constructor all is only defined for T's that are actually convertible to",
    "start": "1380520",
    "end": "1387850"
  },
  {
    "text": "string views so not any type but",
    "start": "1387850",
    "end": "1399549"
  },
  {
    "text": "the advice here would be although this works don't try to do this and the idea",
    "start": "1399549",
    "end": "1410840"
  },
  {
    "text": "is avoid at all possible times to",
    "start": "1410840",
    "end": "1416779"
  },
  {
    "text": "actually store something that came through a string of you why is that",
    "start": "1416779",
    "end": "1421940"
  },
  {
    "text": "because you might have a longer chain of actually passing this handle and you",
    "start": "1421940",
    "end": "1429529"
  },
  {
    "text": "have no certainty in actually knowing if that handle you have and you received as",
    "start": "1429529",
    "end": "1436070"
  },
  {
    "text": "a string view for the sink argument here you have no way of knowing the source of",
    "start": "1436070",
    "end": "1442820"
  },
  {
    "text": "that string is the string that the string view points to still around or",
    "start": "1442820",
    "end": "1449870"
  },
  {
    "text": "isn't so storing here the handle inside",
    "start": "1449870",
    "end": "1455090"
  },
  {
    "text": "that string view in our standard string exactly it's actually potentially",
    "start": "1455090",
    "end": "1460250"
  },
  {
    "text": "dangerous so the advice would be if you're if you know that you ultimately",
    "start": "1460250",
    "end": "1467539"
  },
  {
    "text": "are going to end up with a standard string in a in a chain of passing around",
    "start": "1467539",
    "end": "1473059"
  },
  {
    "text": "the buffer to some string like data avoid at all costs mixing them up",
    "start": "1473059",
    "end": "1480610"
  },
  {
    "text": "passing from a string to a string view to a string and if you ultimately end up",
    "start": "1480610",
    "end": "1486559"
  },
  {
    "text": "storing the strings because you need to actually have a copy of that string avoid passing through multiple",
    "start": "1486559",
    "end": "1492710"
  },
  {
    "text": "combinations of string views so never do never mix them up into a cold chain like",
    "start": "1492710",
    "end": "1500419"
  },
  {
    "text": "this yeah",
    "start": "1500419",
    "end": "1504820"
  },
  {
    "text": "yeah it moves it yeah I can show it in like Ian's question no I saw another",
    "start": "1506690",
    "end": "1520500"
  },
  {
    "text": "hand go up no sorry so this actually burned me many",
    "start": "1520500",
    "end": "1530220"
  },
  {
    "text": "people actually mixing mixing function calls like this some function calls",
    "start": "1530220",
    "end": "1535950"
  },
  {
    "text": "imagining have a call stack and some functions on that call stack have a constituent graph and some of them have",
    "start": "1535950",
    "end": "1543390"
  },
  {
    "text": "string views and you end up storing somewhere a view into a into a into a",
    "start": "1543390",
    "end": "1551070"
  },
  {
    "text": "buffer as a standard thing this actually came up with for many people not just",
    "start": "1551070",
    "end": "1556290"
  },
  {
    "text": "for me okay so my compiler failed me",
    "start": "1556290",
    "end": "1561510"
  },
  {
    "text": "this time basically it let me do one safe things",
    "start": "1561510",
    "end": "1566880"
  },
  {
    "text": "what else is new maybe static analysis tools will help me with some of some",
    "start": "1566880",
    "end": "1573000"
  },
  {
    "text": "checks regarding this who here has used clanked",
    "start": "1573000",
    "end": "1578850"
  },
  {
    "text": "ID in any context before okay cool this is a great opportunity to plug my open",
    "start": "1578850",
    "end": "1586350"
  },
  {
    "text": "source project here so if you're a visual studio developer and you have",
    "start": "1586350",
    "end": "1591770"
  },
  {
    "text": "LLVM clang tool env and you want to bring all that goodness into your Visual Studio IDE you can use this free visuals",
    "start": "1591770",
    "end": "1599880"
  },
  {
    "text": "to the extension it's an open source project that my few buddies of mine and",
    "start": "1599880",
    "end": "1605340"
  },
  {
    "text": "I started and you can definitely try it out so let's see clanked ID comes with lots",
    "start": "1605340",
    "end": "1615750"
  },
  {
    "text": "of checks in the box some of them won't auto fix is very good stuff checks for",
    "start": "1615750",
    "end": "1621540"
  },
  {
    "text": "readability for unsafe practices for gotchas org and modernization passes all",
    "start": "1621540",
    "end": "1628679"
  },
  {
    "text": "kinds of goodies and the first thing i would do i would go there and try to see",
    "start": "1628679",
    "end": "1635190"
  },
  {
    "text": "are there any string related checks that I can use there are plenty very good",
    "start": "1635190",
    "end": "1641580"
  },
  {
    "text": "stuff string related checks but if you scan that list nothing related to string",
    "start": "1641580",
    "end": "1649049"
  },
  {
    "text": "you pretty sad oh wait you have to lick",
    "start": "1649049",
    "end": "1656159"
  },
  {
    "text": "look a little bit closer there's a tidy check called bug prone dangling handle",
    "start": "1656159",
    "end": "1662210"
  },
  {
    "text": "sounds very menacing but it's it is so it turns out this actual client clanked",
    "start": "1662210",
    "end": "1669179"
  },
  {
    "text": "ID check is actually very specific to string view theoretically is",
    "start": "1669179",
    "end": "1676350"
  },
  {
    "text": "configurable to use other types of dangling handles like string view these",
    "start": "1676350",
    "end": "1682740"
  },
  {
    "text": "no known ink resources but its main scenario in usage is string view and he",
    "start": "1682740",
    "end": "1689280"
  },
  {
    "text": "does catch some of the obvious situations but on not all so I highly",
    "start": "1689280",
    "end": "1695159"
  },
  {
    "text": "recommend that at least you do this pass in trying this clanked ID check on your",
    "start": "1695159",
    "end": "1701190"
  },
  {
    "text": "pattern so it's basic detecting dangling",
    "start": "1701190",
    "end": "1706650"
  },
  {
    "text": "references as handles to swing views dangling references can be result of",
    "start": "1706650",
    "end": "1713280"
  },
  {
    "text": "constructing handles from temporary values where temporary is destroyed soon after the handle is created key word",
    "start": "1713280",
    "end": "1718770"
  },
  {
    "text": "here being soon in this is where the tool gets lost and is it's not no longer",
    "start": "1718770",
    "end": "1727350"
  },
  {
    "text": "able to help you if there's a - longer disconnect chain within the between the",
    "start": "1727350",
    "end": "1732840"
  },
  {
    "text": "actual ownership or or the allocation of the string and the dangling point so if",
    "start": "1732840",
    "end": "1738630"
  },
  {
    "text": "the the usage is pretty well localized the tool will help you and this is the",
    "start": "1738630",
    "end": "1747350"
  },
  {
    "text": "URL for documentation for later reference",
    "start": "1747350",
    "end": "1752659"
  },
  {
    "text": "let's see some string literal context we do have predefined liters",
    "start": "1752659",
    "end": "1758880"
  },
  {
    "text": "like I said string view does come in with goodies in the package and it does have swing little suffix sv that you can",
    "start": "1758880",
    "end": "1768210"
  },
  {
    "text": "use for compile-time strings",
    "start": "1768210",
    "end": "1772070"
  },
  {
    "text": "what would you say the length of s one would be here so what what would this",
    "start": "1774350",
    "end": "1780780"
  },
  {
    "text": "print three and this too",
    "start": "1780780",
    "end": "1790520"
  },
  {
    "text": "okay well it will be a C++ presentation",
    "start": "1792260",
    "end": "1798990"
  },
  {
    "text": "at least not a serious one without some gold bolting so let's see if we're right",
    "start": "1798990",
    "end": "1807980"
  },
  {
    "text": "this is pretty pretty pretty messy nothing we can read out here but let's",
    "start": "1811820",
    "end": "1818280"
  },
  {
    "text": "try some optimization oh look at that so",
    "start": "1818280",
    "end": "1823290"
  },
  {
    "text": "we do have the result here in the EAX register the result of the of the size",
    "start": "1823290",
    "end": "1829560"
  },
  {
    "text": "because it so it is a compile time string and let's see how it works out",
    "start": "1829560",
    "end": "1835290"
  },
  {
    "text": "for us - okay",
    "start": "1835290",
    "end": "1841890"
  },
  {
    "text": "Yorn was right okay let's see let's back",
    "start": "1841890",
    "end": "1850530"
  },
  {
    "text": "get back to it so surprisingly or",
    "start": "1850530",
    "end": "1857820"
  },
  {
    "text": "unsurprisingly for some of you actually sticking null-terminated not terminators",
    "start": "1857820",
    "end": "1864900"
  },
  {
    "text": "within string literals might be surprising what if I want a null",
    "start": "1864900",
    "end": "1870930"
  },
  {
    "text": "terminated string from a string view well this actually circulated a lot with",
    "start": "1870930",
    "end": "1878280"
  },
  {
    "text": "some of my friends on Twitter and some of them proposed various solutions to",
    "start": "1878280",
    "end": "1885060"
  },
  {
    "text": "actually extracting a C like string from a string view like a null-terminated",
    "start": "1885060",
    "end": "1891020"
  },
  {
    "text": "thingy and one possible solution would be this would you like to see some",
    "start": "1891020",
    "end": "1898890"
  },
  {
    "text": "something like this in your code do you think you deserve something like hee-hee",
    "start": "1898890",
    "end": "1904690"
  },
  {
    "text": "you try it I don't know I I wouldn't",
    "start": "1904690",
    "end": "1910540"
  },
  {
    "text": "know what to say about this I would be reluctant to use it so I was determining",
    "start": "1910540",
    "end": "1917920"
  },
  {
    "text": "I was determined that I wanted some string view in my life and I still",
    "start": "1917920",
    "end": "1923080"
  },
  {
    "text": "thought that string we would solve many of our problems in interoperating within",
    "start": "1923080",
    "end": "1930280"
  },
  {
    "text": "various types of API as within our source code and then I went to this talk",
    "start": "1930280",
    "end": "1936430"
  },
  {
    "text": "at CPP con last year and Nico did a very",
    "start": "1936430",
    "end": "1942340"
  },
  {
    "text": "very nice presentation and I put the URL there - if you haven't seen it I highly",
    "start": "1942340",
    "end": "1948220"
  },
  {
    "text": "recommend that you do but it scaled scared the hell out of me",
    "start": "1948220",
    "end": "1953710"
  },
  {
    "text": "and had things in it like string view is",
    "start": "1953710",
    "end": "1959590"
  },
  {
    "text": "a nightmare I am literally quoting string view is",
    "start": "1959590",
    "end": "1964750"
  },
  {
    "text": "worse than a string reference string view is semantically a string reference",
    "start": "1964750",
    "end": "1969910"
  },
  {
    "text": "but conceptually a value type well kind of true that was basically me during the",
    "start": "1969910",
    "end": "1978070"
  },
  {
    "text": "presentation and the compelling example",
    "start": "1978070",
    "end": "1984610"
  },
  {
    "text": "that he gave so this is Nico's example is a function template that presumably",
    "start": "1984610",
    "end": "1993250"
  },
  {
    "text": "doubles a string and we do have the string view plus operator here and we",
    "start": "1993250",
    "end": "2001830"
  },
  {
    "text": "have a string view long string view there and we say Auto R equals double of",
    "start": "2001830",
    "end": "2007680"
  },
  {
    "text": "string view and we try to print the result and we have a runtime error does",
    "start": "2007680",
    "end": "2015960"
  },
  {
    "text": "anybody see the problem here",
    "start": "2015960",
    "end": "2019190"
  },
  {
    "text": "there is a problem why do we have a runtime error here well sorry yeah yeah",
    "start": "2021700",
    "end": "2042070"
  },
  {
    "text": "so it's all about that t return type of the double function so that's the the",
    "start": "2042070",
    "end": "2049790"
  },
  {
    "text": "problem with with that function it returns the T and T for us is a string view and we will use your we're masking",
    "start": "2049790",
    "end": "2060408"
  },
  {
    "text": "this option this problem because we're using auto are like good people you know",
    "start": "2060409",
    "end": "2066770"
  },
  {
    "text": "the pattern all always use Auto so we'll be in good citizens and using Auto and",
    "start": "2066770",
    "end": "2072740"
  },
  {
    "text": "masking this problem so Nico actually says that almost always Auto pattern is",
    "start": "2072740",
    "end": "2080658"
  },
  {
    "text": "broken with string view and this is a very very toilet example that it's",
    "start": "2080659",
    "end": "2086810"
  },
  {
    "text": "broken imagine what it could hampered with much more complicated stuff so the",
    "start": "2086810",
    "end": "2093020"
  },
  {
    "text": "lesson here would be doing a sign something that came from string used in Auto well that's kind of disappointing I",
    "start": "2093020",
    "end": "2101320"
  },
  {
    "text": "actually took this screenshot while I was there because I was obsessed in",
    "start": "2101320",
    "end": "2106339"
  },
  {
    "text": "digesting these issues and investigate them on my own and he says basically what I did and a",
    "start": "2106339",
    "end": "2117380"
  },
  {
    "text": "solution here would be to use surprisingly Auto as a return type of",
    "start": "2117380",
    "end": "2122869"
  },
  {
    "text": "the double function here and because we're using Auto as the return type of",
    "start": "2122869",
    "end": "2131240"
  },
  {
    "text": "the double function what changed for us can somebody tell me what changed we're",
    "start": "2131240",
    "end": "2136820"
  },
  {
    "text": "still using Auto are when we're assigning and now R is a standard string",
    "start": "2136820",
    "end": "2142190"
  },
  {
    "text": "so we're fine all the clues are on the slides no I don't have any more reveal",
    "start": "2142190",
    "end": "2147880"
  },
  {
    "text": "animations so everything is on the slide what changed we just said auto double",
    "start": "2147880",
    "end": "2154370"
  },
  {
    "text": "tea when we define the double template function what changed yeah because the",
    "start": "2154370",
    "end": "2163040"
  },
  {
    "text": "plus operator is actually defined to return a standard string that that was",
    "start": "2163040",
    "end": "2170270"
  },
  {
    "text": "the case before as well I didn't change that you see operator plus returns a",
    "start": "2170270",
    "end": "2175760"
  },
  {
    "text": "standard string before this so I didn't change the thing they're all all I",
    "start": "2175760",
    "end": "2181210"
  },
  {
    "text": "changed rather nico did was the return",
    "start": "2181210",
    "end": "2186620"
  },
  {
    "text": "type of the double function so now the the function template properly uses the",
    "start": "2186620",
    "end": "2192980"
  },
  {
    "text": "the return type the exact return type of the plus operator there it's no longer",
    "start": "2192980",
    "end": "2198620"
  },
  {
    "text": "using T that is deduced by the argument which is a string view fairly simple",
    "start": "2198620",
    "end": "2204620"
  },
  {
    "text": "mechanical stuff not at all obvious so that always bugs me when the explanation",
    "start": "2204620",
    "end": "2212960"
  },
  {
    "text": "it's not complicated but I missed it when I first saw it so apparently very",
    "start": "2212960",
    "end": "2219880"
  },
  {
    "text": "simple stuff for any seasoned c++ developer but you can easily miss some",
    "start": "2219880",
    "end": "2224960"
  },
  {
    "text": "miss out on these things small stuff that bites you so we're good now",
    "start": "2224960",
    "end": "2232240"
  },
  {
    "text": "several people noticed problems like this very smart people are trying to",
    "start": "2232700",
    "end": "2239450"
  },
  {
    "text": "solve them a few of the issues are fixable let's say there is a paper in",
    "start": "2239450",
    "end": "2247760"
  },
  {
    "text": "flight proposal P zero nine three six very smart people are not on top of it",
    "start": "2247760",
    "end": "2255230"
  },
  {
    "text": "niko is one of them with along with Richard and hopefully I highly recommend",
    "start": "2255230",
    "end": "2263510"
  },
  {
    "text": "that you give it a read if I picture interest regarding string view it's a very short paper has five or six pages",
    "start": "2263510",
    "end": "2269810"
  },
  {
    "text": "so it's definitely something you can browse through very quickly has a very",
    "start": "2269810",
    "end": "2275960"
  },
  {
    "text": "nice rationale and explanations a few interesting examples and what you're they're trying to fix so it's not going",
    "start": "2275960",
    "end": "2283280"
  },
  {
    "text": "to be perfect not even if these paper goes through it's not in certain at this point it's something considered",
    "start": "2283280",
    "end": "2290660"
  },
  {
    "text": "for C++ 20 but I highly encourage you to to read it it's not it's not at all very",
    "start": "2290660",
    "end": "2297440"
  },
  {
    "text": "difficult or very technical so a few months passed after I saw Nico stock and",
    "start": "2297440",
    "end": "2304210"
  },
  {
    "text": "then I attended meeting C++ and I saw another great talk by Mark moods he",
    "start": "2304210",
    "end": "2312349"
  },
  {
    "text": "works with one of the main contributors on QT or cute and the title when I saw",
    "start": "2312349",
    "end": "2318980"
  },
  {
    "text": "the title in the program I said to myself I had to be there so string views symbols everywhere so",
    "start": "2318980",
    "end": "2326119"
  },
  {
    "text": "this is an opposing view to Nico's more more cynical and depressing talk this",
    "start": "2326119",
    "end": "2335119"
  },
  {
    "text": "actually was a more enthusiastic talk and embracing string views with all its",
    "start": "2335119",
    "end": "2340250"
  },
  {
    "text": "words and it does have quite a few references to cue string view which is",
    "start": "2340250",
    "end": "2347329"
  },
  {
    "text": "the equivalent of string view for cue string in cute library but everything",
    "start": "2347329",
    "end": "2353779"
  },
  {
    "text": "that Mark explained in this talk definitely applies to string to standard",
    "start": "2353779",
    "end": "2360920"
  },
  {
    "text": "string view so there's nothing specific to cute there and even the examples in",
    "start": "2360920",
    "end": "2367369"
  },
  {
    "text": "the talk are string view based so I highly recommend that you watch this talk it clearly defines his views on",
    "start": "2367369",
    "end": "2376609"
  },
  {
    "text": "safe guidelines and safe places to use it like some of the situations where you",
    "start": "2376609",
    "end": "2383180"
  },
  {
    "text": "can take it safely as function parameter by value and after I saw that talk I was",
    "start": "2383180",
    "end": "2393619"
  },
  {
    "text": "a happy camper I said like I gain confidence I can do this and I started",
    "start": "2393619",
    "end": "2403779"
  },
  {
    "text": "with me with more enthusiasm so to speak and a little bit more courage to look",
    "start": "2403779",
    "end": "2409190"
  },
  {
    "text": "around and read some of some more material on this on the web and see what others are saying about it and playing",
    "start": "2409190",
    "end": "2415309"
  },
  {
    "text": "with it myself some examples and there are others to help there are some very good",
    "start": "2415309",
    "end": "2421670"
  },
  {
    "text": "resources some good blog posts about this I did a little built a little",
    "start": "2421670",
    "end": "2429770"
  },
  {
    "text": "collection for you guys if you want to read up on it there's Jonathan Mueller's",
    "start": "2429770",
    "end": "2436630"
  },
  {
    "text": "blog a very good technical blog to follow in general for C++ and it does",
    "start": "2436630",
    "end": "2443540"
  },
  {
    "text": "have two entries for stream views string",
    "start": "2443540",
    "end": "2448579"
  },
  {
    "text": "of accepting temporaries good idea or horrible pitiful he later relaxed his views on that and a",
    "start": "2448579",
    "end": "2457369"
  },
  {
    "text": "more general article regarding guidelines for r-value references in api's this is clearly applying to string",
    "start": "2457369",
    "end": "2464630"
  },
  {
    "text": "views as well when when we're talking about return types or parameters for our",
    "start": "2464630",
    "end": "2469819"
  },
  {
    "text": "ApS that were building so definitely a great resource you know to read through",
    "start": "2469819",
    "end": "2476359"
  },
  {
    "text": "I don't have the time in this talk format to go into the details that he",
    "start": "2476359",
    "end": "2481579"
  },
  {
    "text": "explains there but I highly encourage you to read through another interesting",
    "start": "2481579",
    "end": "2489589"
  },
  {
    "text": "article that is not focused strictly on string view but it talks in general about strings competing constructors and",
    "start": "2489589",
    "end": "2497530"
  },
  {
    "text": "various similar issues that come with standard string I don't exactly know how",
    "start": "2497530",
    "end": "2506390"
  },
  {
    "text": "to pronounce his name so I I won't even try I won't even try so but definitely",
    "start": "2506390",
    "end": "2511609"
  },
  {
    "text": "read through his blog he usually writes very good stuff and my favorite article",
    "start": "2511609",
    "end": "2519290"
  },
  {
    "text": "on stream view is Arthur O'Dwyer's and he also runs a very tight C++ blog good",
    "start": "2519290",
    "end": "2528799"
  },
  {
    "text": "stuff regularly comes there and he says string view is a borough type what the",
    "start": "2528799",
    "end": "2536299"
  },
  {
    "text": "hell does that mean string view success succeeds admirably",
    "start": "2536299",
    "end": "2543770"
  },
  {
    "text": "in the girl of dropping replacement for constic ref in parameters well yeah that was",
    "start": "2543770",
    "end": "2551260"
  },
  {
    "text": "what was designed for the problem is that there are two kinds",
    "start": "2551260",
    "end": "2557030"
  },
  {
    "text": "of types of object types we have object types and value types object types are",
    "start": "2557030",
    "end": "2563180"
  },
  {
    "text": "what other languages called reference types even C++ terminology so we do have",
    "start": "2563180",
    "end": "2569000"
  },
  {
    "text": "reference types and value types and string view likes to pretend it's a",
    "start": "2569000",
    "end": "2575329"
  },
  {
    "text": "value type but it's not it gives you the impression that it's a regular type and",
    "start": "2575329",
    "end": "2581750"
  },
  {
    "text": "plays nice with the type system it gives you the impression that it's a value type but it's actually a borrow type",
    "start": "2581750",
    "end": "2587810"
  },
  {
    "text": "what is a borrow type a borrow type is a handle we we've seen this before in C++",
    "start": "2587810",
    "end": "2595910"
  },
  {
    "text": "you know it's not exactly new stuff so string you because it lacks ownership it",
    "start": "2595910",
    "end": "2605630"
  },
  {
    "text": "actually holds a reference to another object without holding the ownership to it and arm is meant to be used with",
    "start": "2605630",
    "end": "2612490"
  },
  {
    "text": "buffers that are short-lived usually on the stack in that frame not something",
    "start": "2612490",
    "end": "2618440"
  },
  {
    "text": "that is way down the coaching and you",
    "start": "2618440",
    "end": "2624440"
  },
  {
    "text": "can usually do it out an assignment operator although for string view it's not the case and it can generally appear",
    "start": "2624440",
    "end": "2632180"
  },
  {
    "text": "just in function parameter lists and it's not meant to be stored in data",
    "start": "2632180",
    "end": "2638720"
  },
  {
    "text": "structures or return for that matter from functions",
    "start": "2638720",
    "end": "2643960"
  },
  {
    "text": "so perhaps string view is the first mainstream borrow type I said that this",
    "start": "2643960",
    "end": "2649849"
  },
  {
    "text": "is not the first we've encountered this before in C++ but this this type string",
    "start": "2649849",
    "end": "2658490"
  },
  {
    "text": "view is the first C++ type that has the potential to be a very dangerous tool",
    "start": "2658490",
    "end": "2664940"
  },
  {
    "text": "because as opposed to other types that have similar behavior similar handle",
    "start": "2664940",
    "end": "2673040"
  },
  {
    "text": "semantics this one has the potential to be dangerous because it's very attractive it's something very that",
    "start": "2673040",
    "end": "2680450"
  },
  {
    "text": "sounds very mainstream something that sounds very appealing to everybody using",
    "start": "2680450",
    "end": "2685670"
  },
  {
    "text": "C++ it's not some esoteric library type like I don't know",
    "start": "2685670",
    "end": "2691390"
  },
  {
    "text": "reference rapper or Topol or whatever",
    "start": "2691390",
    "end": "2696490"
  },
  {
    "text": "this one is sounds very mainstream some sounds like something I would want to",
    "start": "2696490",
    "end": "2701780"
  },
  {
    "text": "use immediately as I learned C++ so that's why I insisted it's it's",
    "start": "2701780",
    "end": "2707900"
  },
  {
    "text": "dangerous it's not it's not something that's brand new in C++ the concept of a",
    "start": "2707900",
    "end": "2715430"
  },
  {
    "text": "handle type has been in C++ for four years but this one has the potential to",
    "start": "2715430",
    "end": "2720500"
  },
  {
    "text": "hurt us us because it's something that's very very deceivingly simple and",
    "start": "2720500",
    "end": "2727670"
  },
  {
    "text": "attractive to use hey divs with strings what could go wrong there and it is",
    "start": "2727670",
    "end": "2733040"
  },
  {
    "text": "assignable another questionable decision that was made about this type and the",
    "start": "2733040",
    "end": "2739430"
  },
  {
    "text": "the problem is that the assignment has shallow semantics because the the views",
    "start": "2739430",
    "end": "2745610"
  },
  {
    "text": "are too constant string synchronous and the the comparison function has deep",
    "start": "2745610",
    "end": "2754430"
  },
  {
    "text": "semantics if you compare to stream views for equality it actually checks the corresponding buffers to see if they're",
    "start": "2754430",
    "end": "2761570"
  },
  {
    "text": "semantically equal but the assignment is shallow",
    "start": "2761570",
    "end": "2766730"
  },
  {
    "text": "it's just assigning pointers into some other location because it's a handle",
    "start": "2766730",
    "end": "2772310"
  },
  {
    "text": "type so it's again not exactly a regular type there and problems like this will",
    "start": "2772310",
    "end": "2783380"
  },
  {
    "text": "continue to come in C++ standard span is",
    "start": "2783380",
    "end": "2790880"
  },
  {
    "text": "on the horizon for C++ 20 maybe it will happen my personal opinion standard span",
    "start": "2790880",
    "end": "2796790"
  },
  {
    "text": "will bring even more pain than string view because standard span",
    "start": "2796790",
    "end": "2802790"
  },
  {
    "text": "comes with all the problems of string view plus the fact that it's a view into a non continuous non constant sequence",
    "start": "2802790",
    "end": "2809540"
  },
  {
    "text": "of whatever and",
    "start": "2809540",
    "end": "2815320"
  },
  {
    "text": "we don't have to deal with that when it comes to be a part of the standard so",
    "start": "2815330",
    "end": "2824630"
  },
  {
    "text": "solution would be to be very careful about the places where we actually use",
    "start": "2824630",
    "end": "2830760"
  },
  {
    "text": "string views I still think that string view is something that we do need and it",
    "start": "2830760",
    "end": "2837540"
  },
  {
    "text": "tries to solve a real problem and we can safely use it as long as we constrain",
    "start": "2837540",
    "end": "2843420"
  },
  {
    "text": "ourselves to using it for French of for function parameters and we pass it by",
    "start": "2843420",
    "end": "2850440"
  },
  {
    "text": "value because it's basically a structure with integers inside and try to avoid",
    "start": "2850440",
    "end": "2860940"
  },
  {
    "text": "mixing a cold chain where we have functions with string views as arguments",
    "start": "2860940",
    "end": "2866340"
  },
  {
    "text": "and functions that pass a regular standard string and avoid that mixing of",
    "start": "2866340",
    "end": "2874440"
  },
  {
    "text": "string and string views like I said earlier so as long as we are civilized in using it as long as we properly add",
    "start": "2874440",
    "end": "2883290"
  },
  {
    "text": "notate the the places where it could be potentially dangerous for example it is",
    "start": "2883290",
    "end": "2888570"
  },
  {
    "text": "OK to return a string view for example you return a narrow view into some",
    "start": "2888570",
    "end": "2895290"
  },
  {
    "text": "larger buffer it is okay it is justified it is helpful in these situations but",
    "start": "2895290",
    "end": "2901200"
  },
  {
    "text": "you have to be very explicit about it in terms of properly documenting that behavior and warning the color that they",
    "start": "2901200",
    "end": "2910530"
  },
  {
    "text": "better know what they're doing in terms of that string view is into a buffer",
    "start": "2910530",
    "end": "2916260"
  },
  {
    "text": "that resides elsewhere and you have to be sure by construction that it's still",
    "start": "2916260",
    "end": "2922560"
  },
  {
    "text": "there while you use it and you don't hang hang out hang on to some dangling",
    "start": "2922560",
    "end": "2927990"
  },
  {
    "text": "reference later on so my take on it at the current time is that I still want",
    "start": "2927990",
    "end": "2935160"
  },
  {
    "text": "to use it I still find it very very useful I still find it a very efficient",
    "start": "2935160",
    "end": "2941060"
  },
  {
    "text": "for glue code and in general for avoiding temporaries when the linguist",
    "start": "2941060",
    "end": "2946920"
  },
  {
    "text": "things but I urge you to be very careful when defining API is with stream views and",
    "start": "2946920",
    "end": "2954190"
  },
  {
    "text": "document properly the usage that's about all you can do it",
    "start": "2954190",
    "end": "2959600"
  },
  {
    "text": "you cannot enforce the usage of those api's but as long as you properly document that's a precondition for usage",
    "start": "2959600",
    "end": "2966230"
  },
  {
    "text": "and if the colors don't agree on that then they're it's their fault as a",
    "start": "2966230",
    "end": "2974540"
  },
  {
    "text": "conclusion I would say mark Arena has a blog post about stream views as well an",
    "start": "2974540",
    "end": "2980810"
  },
  {
    "text": "older one but still very very good and I agree with him that string view oh dear",
    "start": "2980810",
    "end": "2988400"
  },
  {
    "text": "Tom oh I hate you and I need you so to",
    "start": "2988400",
    "end": "2993770"
  },
  {
    "text": "speak and it does solve a real problem but it does come with gotchas and part",
    "start": "2993770",
    "end": "3002140"
  },
  {
    "text": "of what I'm trying to do is try to spread some of the the issues as the",
    "start": "3002140",
    "end": "3008650"
  },
  {
    "text": "pitfalls and make people aware of the responsibility that comes with such a",
    "start": "3008650",
    "end": "3015480"
  },
  {
    "text": "useful and dangerous tool because it's deceivingly simple like I do with all my",
    "start": "3015480",
    "end": "3023560"
  },
  {
    "text": "talk so I try to pitch the social communication channels and news about",
    "start": "3023560",
    "end": "3030790"
  },
  {
    "text": "C++ if you're not on the C++ slack do get on there very good discussions and",
    "start": "3030790",
    "end": "3037620"
  },
  {
    "text": "dedicated channels for various conferences and various topics even standardization and papers in discussion",
    "start": "3037620",
    "end": "3045270"
  },
  {
    "text": "do follow the C++ podcasts cpp casts by",
    "start": "3045270",
    "end": "3051490"
  },
  {
    "text": "robin jason weekly stuff very good stuff excellent guests news and discussions",
    "start": "3051490",
    "end": "3059440"
  },
  {
    "text": "about articles and a reboot of an older",
    "start": "3059440",
    "end": "3064720"
  },
  {
    "text": "show like cpp chat by John Cobb and Phil Nash comes in podcast in video form you",
    "start": "3064720",
    "end": "3071860"
  },
  {
    "text": "can get involved you can even type in your questions live and get in the",
    "start": "3071860",
    "end": "3078370"
  },
  {
    "text": "conversation and they usually have very very good people invited and discussions are",
    "start": "3078370",
    "end": "3084200"
  },
  {
    "text": "excellent there it never disappoints that's about it tone string views if you",
    "start": "3084200",
    "end": "3092060"
  },
  {
    "text": "have any questions feel free to ask now or later you can find me any questions",
    "start": "3092060",
    "end": "3099349"
  },
  {
    "text": "sure",
    "start": "3099349",
    "end": "3101950"
  },
  {
    "text": "so the question was I mentioned earlier functions that return string views and",
    "start": "3123410",
    "end": "3130760"
  },
  {
    "text": "potential dangerous situations there what's my take on functions where the",
    "start": "3130760",
    "end": "3137130"
  },
  {
    "text": "street views are in two views in two strings that are compile-time strings so",
    "start": "3137130",
    "end": "3142880"
  },
  {
    "text": "if you were to be in a context / context and you know for a fact that you're",
    "start": "3142880",
    "end": "3149310"
  },
  {
    "text": "dealing with string literals or compile times things like that I would say there's no problem there and it I find",
    "start": "3149310",
    "end": "3156930"
  },
  {
    "text": "it very useful in actual processing for example if you're trying to match some kind of a pattern or strip some kind of",
    "start": "3156930",
    "end": "3163670"
  },
  {
    "text": "parts of a buffer or have a sliding window into into some kind of input",
    "start": "3163670",
    "end": "3170310"
  },
  {
    "text": "buffer buffer as long as that that",
    "start": "3170310",
    "end": "3177150"
  },
  {
    "text": "string is something that's compile-time I'll I don't think you can be bitten by problems like this",
    "start": "3177150",
    "end": "3184670"
  },
  {
    "text": "you mean if yeah you mean if it has the",
    "start": "3199380",
    "end": "3208929"
  },
  {
    "text": "potential of being idiomatic in usage in context of compile time string source @e",
    "start": "3208929",
    "end": "3214499"
  },
  {
    "text": "might eat surprised readers of the code if they see string view as a return type",
    "start": "3214499",
    "end": "3220799"
  },
  {
    "text": "it might it might because then they although you might be thinking of that",
    "start": "3220799",
    "end": "3230289"
  },
  {
    "text": "API as intended to be used in in a string literal context or in a compile",
    "start": "3230289",
    "end": "3235689"
  },
  {
    "text": "time context they might not be aware of that so it might surprise them or it",
    "start": "3235689",
    "end": "3241630"
  },
  {
    "text": "might make them avoid using that API might especially if they see this talk",
    "start": "3241630",
    "end": "3247859"
  },
  {
    "text": "so it's a double-edged sword er people",
    "start": "3247859",
    "end": "3254799"
  },
  {
    "text": "would would if they don't know the API very well might might as might have",
    "start": "3254799",
    "end": "3260259"
  },
  {
    "text": "avoided I'll give you that ya ready",
    "start": "3260259",
    "end": "3266279"
  },
  {
    "text": "yeah",
    "start": "3318710",
    "end": "3321710"
  },
  {
    "text": "I'll try to very succinctly summarize what you just said just for the audience so Adi said that for example in a",
    "start": "3336730",
    "end": "3345290"
  },
  {
    "text": "scenario like where we would process some command-line input string you would",
    "start": "3345290",
    "end": "3350390"
  },
  {
    "text": "wouldn't want to pay the cost of storing all those sequences into a for example",
    "start": "3350390",
    "end": "3355730"
  },
  {
    "text": "of that vector of standard string and he would find it very appealing to just use",
    "start": "3355730",
    "end": "3360770"
  },
  {
    "text": "a vector of student views there because he knows the input is still around while",
    "start": "3360770",
    "end": "3365810"
  },
  {
    "text": "he's processing those that command-line did I summarized it right okay I totally",
    "start": "3365810",
    "end": "3371450"
  },
  {
    "text": "agree what I am mostly scared of is when",
    "start": "3371450",
    "end": "3376670"
  },
  {
    "text": "we're defining libraries an AP is for the others to use so if you have some",
    "start": "3376670",
    "end": "3382190"
  },
  {
    "text": "business logic code for example you have a method that processing that command line like you said and you know that by",
    "start": "3382190",
    "end": "3389390"
  },
  {
    "text": "construction that buffer is still on the stack while you're processing it it's totally okay but I'm more afraid that",
    "start": "3389390",
    "end": "3397220"
  },
  {
    "text": "people would start to sprinkle string views within the api's of their classes",
    "start": "3397220",
    "end": "3403280"
  },
  {
    "text": "and libraries so that's where I see the danger when you're trying to write",
    "start": "3403280",
    "end": "3409240"
  },
  {
    "text": "reusable general-purpose code and you're designing ApS that are potentially",
    "start": "3409240",
    "end": "3415220"
  },
  {
    "text": "unsafe and you're right that you alluded earlier to iterator invalidation in",
    "start": "3415220",
    "end": "3421130"
  },
  {
    "text": "terms of STL containers and that people are aware of these issues and it's something that it's well known by C++",
    "start": "3421130",
    "end": "3427430"
  },
  {
    "text": "developers there are operations that you perform on your STL containers that",
    "start": "3427430",
    "end": "3432980"
  },
  {
    "text": "invalidate your your iterators and these tools come with knowledge that you need",
    "start": "3432980",
    "end": "3439580"
  },
  {
    "text": "to have before you use them I agree I totally agree with that but string U is not yet at the popularity",
    "start": "3439580",
    "end": "3447440"
  },
  {
    "text": "level that gutters are well known like iterator invalidation and it's not we",
    "start": "3447440",
    "end": "3454880"
  },
  {
    "text": "don't have yet an idiomatic usage for them people don't exactly agree on what's good and what's not",
    "start": "3454880",
    "end": "3462440"
  },
  {
    "text": "and maybe in a few years the situation will be more relaxed people will be well",
    "start": "3462440",
    "end": "3467990"
  },
  {
    "text": "educated that's what I'm trying to do in terms of be aware of this and that and",
    "start": "3467990",
    "end": "3475510"
  },
  {
    "text": "then you can you can say okay I know I know what I'm getting myself into I'm",
    "start": "3475510",
    "end": "3481099"
  },
  {
    "text": "gonna use this but I know what I'm doing this is the C++ way by I I'm using this",
    "start": "3481099",
    "end": "3487400"
  },
  {
    "text": "it's a powerful tool but I know what I'm doing I know this string is alive I know I'm processing it it's still on the",
    "start": "3487400",
    "end": "3493640"
  },
  {
    "text": "stack when I call this function I'm alright with it yeah and the problem is that many many",
    "start": "3493640",
    "end": "3501980"
  },
  {
    "text": "places in the center library in the C++ language in general there are many",
    "start": "3501980",
    "end": "3507080"
  },
  {
    "text": "unsafe corners and people have been hurt but this is still new this is still a",
    "start": "3507080",
    "end": "3515710"
  },
  {
    "text": "corner of C++ that needs more popularizing if you search the web for",
    "start": "3515710",
    "end": "3522710"
  },
  {
    "text": "string views you will find very few articles I basically listed the almost",
    "start": "3522710",
    "end": "3529790"
  },
  {
    "text": "all or the articles related to this so it's still a brand new resource people",
    "start": "3529790",
    "end": "3535040"
  },
  {
    "text": "aren't still not comfortable and knowledgeable and don't have real-world experience in using it and that's why I",
    "start": "3535040",
    "end": "3541849"
  },
  {
    "text": "see the danger because it's something very simple lives with strings and very",
    "start": "3541849",
    "end": "3548960"
  },
  {
    "text": "dangerous if you're not using it right so I totally agree with you I would you I would do it what you said but I",
    "start": "3548960",
    "end": "3555260"
  },
  {
    "text": "wouldn't design it in a general-purpose reusable piece of code like a library something else all right I think we ran",
    "start": "3555260",
    "end": "3563570"
  },
  {
    "text": "out of time if you do have more questions catch me I'm still around here thank you very much [Applause]",
    "start": "3563570",
    "end": "3573440"
  }
]