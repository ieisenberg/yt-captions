[
  {
    "text": "oh hello everyone my name is mata tamal i am a dewalt public at google based in london",
    "start": "6319",
    "end": "11759"
  },
  {
    "text": "first of all thanks for being here i know it's late in the afternoon i like traveling out of london because",
    "start": "11759",
    "end": "17119"
  },
  {
    "text": "usually the places i go they have better weather but not so much in copenhagen so i think we have pretty much the same",
    "start": "17119",
    "end": "23199"
  },
  {
    "text": "kind of weather but copenhagen is nicer because it's smaller and you can walk everywhere and i like that",
    "start": "23199",
    "end": "29199"
  },
  {
    "text": "and also ndc i spoke my last conference before the pandemic was it was that in the scene london in",
    "start": "29199",
    "end": "35200"
  },
  {
    "text": "january 2020 so it's great to be back again into in-person conferences because um i did many online conferences in the",
    "start": "35200",
    "end": "42239"
  },
  {
    "text": "last two years but it's not the same so i'm very glad to be here now feel free to ask me questions as we go along we",
    "start": "42239",
    "end": "48320"
  },
  {
    "text": "have enough time so just stop and ask me if something is not clear or if you have something to add",
    "start": "48320",
    "end": "54079"
  },
  {
    "text": "today's talk is about what i call serverless build functions um",
    "start": "54079",
    "end": "59680"
  },
  {
    "text": "you know when we think about serverless the first thing that comes to mind is probably aws lambda right or azure functions i",
    "start": "59680",
    "end": "66560"
  },
  {
    "text": "guess it is not crowd but i think it's much more than that i mean it definitely started with",
    "start": "66560",
    "end": "72479"
  },
  {
    "text": "functions but over the years in the last four or five years it evolved to basically the de facto way of running",
    "start": "72479",
    "end": "79520"
  },
  {
    "text": "code in the cloud so what i want to do today is that i want to talk about the history of serverless the",
    "start": "79520",
    "end": "85840"
  },
  {
    "text": "phases that it went through and as it went through these different phases i want to highlight the what we",
    "start": "85840",
    "end": "92640"
  },
  {
    "text": "had what we didn't have and also get to today and look at what we have today and and hopefully show you",
    "start": "92640",
    "end": "99600"
  },
  {
    "text": "along the way what kind of things you can do with serverless today okay the presentation is already on speaker",
    "start": "99600",
    "end": "106079"
  },
  {
    "text": "deck i will probably have time some to do some demos later and those will be on github and i'm going to share the links",
    "start": "106079",
    "end": "112159"
  },
  {
    "text": "at the end of the presentation so everything you see today you will have them if you need them later",
    "start": "112159",
    "end": "118240"
  },
  {
    "text": "all right so serverless i mean i don't want to go through like a long description of what serverless is but just to recap",
    "start": "118240",
    "end": "125360"
  },
  {
    "text": "there's basically in my mind two ways of thinking about serverless the first way is the operational model so",
    "start": "125360",
    "end": "130959"
  },
  {
    "text": "how do you run your code and when we think when we say we are running something serverlessly what we usually",
    "start": "130959",
    "end": "137040"
  },
  {
    "text": "mean is that there's no infrastructure management there's infrastructure but you don't have to manage it yourself it's someone else's problem there's base",
    "start": "137040",
    "end": "143760"
  },
  {
    "text": "level security um so you don't have to worry about like securing the ports or making sure that",
    "start": "143760",
    "end": "149040"
  },
  {
    "text": "your network is secure that kind of basic level security is there for you",
    "start": "149040",
    "end": "154239"
  },
  {
    "text": "and one of the most important things about serverless is that you pay for what you use right",
    "start": "154239",
    "end": "159599"
  },
  {
    "text": "because back in the day when you had a virtual machine whether someone was using that virtual machine or not you still had to pay for that virtual",
    "start": "159599",
    "end": "165440"
  },
  {
    "text": "machine per per minute per hour whatever the payment one it was but with serverless we kind of expect that you",
    "start": "165440",
    "end": "171920"
  },
  {
    "text": "pay only when things are being used and if it scales down to zero you shouldn't be you shouldn't be charged for it",
    "start": "171920",
    "end": "178239"
  },
  {
    "text": "basically so that's the operational model of serverless on the other hand when you're designing serverless services they're usually",
    "start": "178239",
    "end": "184400"
  },
  {
    "text": "service based they're event driven so some something triggers your function or your your",
    "start": "184400",
    "end": "190879"
  },
  {
    "text": "container either either http or some kind of pops up kind of message and they're usually stateless because",
    "start": "190879",
    "end": "197680"
  },
  {
    "text": "these serverless services they need to scale up and down and when you have stayed with it then it makes things more",
    "start": "197680",
    "end": "203519"
  },
  {
    "text": "complicated then you need to think about sticky sessions and things like that whereas when you externalize the state",
    "start": "203519",
    "end": "210000"
  },
  {
    "text": "then scaling becomes easier right so that's what we roughly mean by",
    "start": "210000",
    "end": "215519"
  },
  {
    "text": "serverless when we talk about serverless so of course depending on who you talk to you got slightly different definitions but let's stick with this",
    "start": "215519",
    "end": "220879"
  },
  {
    "text": "for now now when you look at different phases of serverless and this is my idea of how serverless",
    "start": "220879",
    "end": "227599"
  },
  {
    "text": "evolved you might disagree but i think the first phrase was serverless before it was called serverless um i think",
    "start": "227599",
    "end": "233680"
  },
  {
    "text": "we've been doing serverless more than more than we can admit actually then we had simple functions what people",
    "start": "233680",
    "end": "241040"
  },
  {
    "text": "think about serverless um they are basically functions that's what first comes to our mind",
    "start": "241040",
    "end": "247200"
  },
  {
    "text": "then we started having containers coming into serverless space and then serverless becoming more mature",
    "start": "247200",
    "end": "253519"
  },
  {
    "text": "and i'll explain what i mean by this later and finally at this stage we have serverless",
    "start": "253519",
    "end": "259519"
  },
  {
    "text": "expanding and integrating with existing systems okay so pretty much everything",
    "start": "259519",
    "end": "265280"
  },
  {
    "text": "is becoming kind of becoming like like in the service model and they're also integrating with your",
    "start": "265280",
    "end": "271520"
  },
  {
    "text": "existing things that might not be serverless so let's go through these phases and let's see where we came from and where",
    "start": "271520",
    "end": "277919"
  },
  {
    "text": "where we are going and i'll also try to show you some demos towards the end when we look at different",
    "start": "277919",
    "end": "284639"
  },
  {
    "text": "parts of servers all right so serverless before serverless anyone recognizes this logo",
    "start": "284639",
    "end": "292720"
  },
  {
    "text": "no yes what is it yeah something google yes yeah well yeah i am biased well i have to admit yeah so",
    "start": "292720",
    "end": "299680"
  },
  {
    "text": "since i work for google most of my examples are from google but hopefully it's not going to be like uh these are",
    "start": "299680",
    "end": "305280"
  },
  {
    "text": "the google services i'm trying to get a get across the the concepts rather than the services but this is um",
    "start": "305280",
    "end": "312639"
  },
  {
    "text": "exactly this is app engine sorry i don't have things to give you like the previous speaker",
    "start": "312639",
    "end": "318240"
  },
  {
    "text": "but thank you so this is app engine it was launched in 2008 and the goal was to make it easy for",
    "start": "318240",
    "end": "324720"
  },
  {
    "text": "developers to build manage and scale web applications you would write python initially started with python but later",
    "start": "324720",
    "end": "331280"
  },
  {
    "text": "we added java and basically you write python in a certain format and you deploy it and you didn't have to do",
    "start": "331280",
    "end": "338400"
  },
  {
    "text": "anything else there was no service to provision no database no networking nothing by default it just worked",
    "start": "338400",
    "end": "344400"
  },
  {
    "text": "we didn't call the serverless we called it fully managed app engine because it was kind of managed for you but in my",
    "start": "344400",
    "end": "350160"
  },
  {
    "text": "mind this was kind of serverless right maybe the payment model wasn't quite serverless",
    "start": "350160",
    "end": "355759"
  },
  {
    "text": "but it was the beginnings of serverless and this was back in 2008. so when we look at this initial",
    "start": "355759",
    "end": "361759"
  },
  {
    "text": "pre-serverless phase first this phase kind of paved the way for servers that will come later",
    "start": "361759",
    "end": "369360"
  },
  {
    "text": "but it was very limited like in terms of languages and versions you could only use python and a subset of python",
    "start": "369360",
    "end": "375680"
  },
  {
    "text": "actually you couldn't do everything and then later we added java but again it was a very",
    "start": "375680",
    "end": "380880"
  },
  {
    "text": "limited version of java you could only do http so only web",
    "start": "380880",
    "end": "386160"
  },
  {
    "text": "applications um very limited ecosystem so we told people you know write your application",
    "start": "386160",
    "end": "392800"
  },
  {
    "text": "here deploy to google and everything will be okay it would be i mean your services would run",
    "start": "392800",
    "end": "398080"
  },
  {
    "text": "but it wasn't comfortable for people right like people wouldn't just leave their open source stuff and come to google and say okay i'll just",
    "start": "398080",
    "end": "404880"
  },
  {
    "text": "trust on google that everything will just work which is understandable and people at the time they were running",
    "start": "404880",
    "end": "412240"
  },
  {
    "text": "virtual machines on-prem and telling those people you know take those forget about all the all that",
    "start": "412240",
    "end": "418400"
  },
  {
    "text": "investment and just deploy our app onto this fully managed app engine and just trust us was a big step people i don't",
    "start": "418400",
    "end": "425039"
  },
  {
    "text": "think people were ready for that and there was no middle ground so there was like on-prem virtual machines",
    "start": "425039",
    "end": "430160"
  },
  {
    "text": "and then fully managed services but people kind of needed something in the middle to make that step and i think the",
    "start": "430160",
    "end": "435520"
  },
  {
    "text": "server is kind of evolved to fill that gap in the middle",
    "start": "435520",
    "end": "440800"
  },
  {
    "text": "so that was before serverless even though i thought i think it was kind of serverless",
    "start": "440800",
    "end": "446319"
  },
  {
    "text": "then in the next phase of serverless we started having simple functions and this started with aws so aws came up with the",
    "start": "446319",
    "end": "452560"
  },
  {
    "text": "term serverless aws lambda in 2014 which was followed by google cloud",
    "start": "452560",
    "end": "457680"
  },
  {
    "text": "functions and azure functions in 2016 and the idea here is that you know you define your function which is usually",
    "start": "457680",
    "end": "463840"
  },
  {
    "text": "http triggered with request and response and then you send your response back and then you just deploy your function and",
    "start": "463840",
    "end": "470400"
  },
  {
    "text": "all the underlying details of like you know how is this function is deployed where it's deployed how how it's scaled",
    "start": "470400",
    "end": "477440"
  },
  {
    "text": "all that kind of stuff is kind of abstracted away from you right so it's very it's very easy just write your function deploy and things just work by",
    "start": "477440",
    "end": "484400"
  },
  {
    "text": "default although you need to look at the details right i mean this is nice in",
    "start": "484400",
    "end": "492000"
  },
  {
    "text": "practice um you know being able to like kind of just work on the function but then you need",
    "start": "492000",
    "end": "498000"
  },
  {
    "text": "to think about okay which which programming language um am i using and is this supported in the serverless",
    "start": "498000",
    "end": "503919"
  },
  {
    "text": "platform that i want where i want to deploy um and then once you let's say you were",
    "start": "503919",
    "end": "509360"
  },
  {
    "text": "using c sharp here well great google cloud supports 3.1 but i have we are already on 660 right so what i do now",
    "start": "509360",
    "end": "516640"
  },
  {
    "text": "right so there's this table and by the way this table is probably out of date by now because i put this together a couple of months ago",
    "start": "516640",
    "end": "523440"
  },
  {
    "text": "but there is this table that you need to think about with the language and also the versions of the languages is it supported in this",
    "start": "523440",
    "end": "529839"
  },
  {
    "text": "run time that where i want to deploy my function secondly um these functions when they",
    "start": "529839",
    "end": "536480"
  },
  {
    "text": "initially were introduced they supported http so they were usually http triggered and at least",
    "start": "536480",
    "end": "542880"
  },
  {
    "text": "on google cloud we had some other triggers for example we had cloud storage trigger where you save a file",
    "start": "542880",
    "end": "549200"
  },
  {
    "text": "and it creates an event and that get that even gets to your function or you can have pops up triggers or you can",
    "start": "549200",
    "end": "554880"
  },
  {
    "text": "have a scheduled uh event so a schedule triggers an event and goes to your function so you had http",
    "start": "554880",
    "end": "562399"
  },
  {
    "text": "as the main trigger and you also had this kind of http wrapped events",
    "start": "562399",
    "end": "568160"
  },
  {
    "text": "but they were very limited just a handful events",
    "start": "568160",
    "end": "572959"
  },
  {
    "text": "and the execution model time and resources were limited for example as i mentioned everything",
    "start": "573360",
    "end": "578560"
  },
  {
    "text": "was http request driven so you had to do everything in the request thread you",
    "start": "578560",
    "end": "584080"
  },
  {
    "text": "couldn't do anything in the background for example the processing time is limited so by",
    "start": "584080",
    "end": "591200"
  },
  {
    "text": "default you got one minute to do something um and i think maximum was initially nine minutes so you had to do",
    "start": "591200",
    "end": "597120"
  },
  {
    "text": "things quickly you couldn't do like batch processing for example if you had lots of data and your memory and cpu was limited",
    "start": "597120",
    "end": "602800"
  },
  {
    "text": "eight gigs and two cpu virtual cpus right so you couldn't take anything you have and and hope that it will work you",
    "start": "602800",
    "end": "609920"
  },
  {
    "text": "have to actually check it out with the language and the version also the resources like do you actually have enough resources in these serverless",
    "start": "609920",
    "end": "616640"
  },
  {
    "text": "platforms and again most of my examples are from google cloud but i'm sure on aws and",
    "start": "616640",
    "end": "621760"
  },
  {
    "text": "azure there's these kind of limits as well and we had this",
    "start": "621760",
    "end": "627519"
  },
  {
    "text": "problem called cold start as well so there was this like concurrency uh one",
    "start": "627519",
    "end": "634240"
  },
  {
    "text": "concussive one meaning when a request came in you had to we had to create a new function for each request so what",
    "start": "634240",
    "end": "640720"
  },
  {
    "text": "that meant is that you know if your function took a little bit of time to get initialized the users would have to",
    "start": "640720",
    "end": "646560"
  },
  {
    "text": "wait for that so they would see this latency in each and every request and",
    "start": "646560",
    "end": "651760"
  },
  {
    "text": "that wasn't a great user experience and then once you started having these",
    "start": "651760",
    "end": "658800"
  },
  {
    "text": "multiple functions they're not monolithic applications anymore right so because in a monolith",
    "start": "658800",
    "end": "664079"
  },
  {
    "text": "let's say you're designing a web api you can have the whole web api on a single kind of app but once you are",
    "start": "664079",
    "end": "671440"
  },
  {
    "text": "dealing with functions typically you have one path to a function right so every path has to be",
    "start": "671440",
    "end": "677360"
  },
  {
    "text": "handled by a by a separate function now if you need to build a web api you need to group these functions somehow and",
    "start": "677360",
    "end": "684640"
  },
  {
    "text": "actually on aws there was no way to have function public",
    "start": "684640",
    "end": "690160"
  },
  {
    "text": "functions meaning like functions with public endpoints so what you had to do was you had to deploy your function then",
    "start": "690160",
    "end": "695839"
  },
  {
    "text": "you had to use api gateway in aws to make that function public on google cloud",
    "start": "695839",
    "end": "703519"
  },
  {
    "text": "the cloud functions by default they were public if you wanted them to be but again you still needed some kind of",
    "start": "703519",
    "end": "709839"
  },
  {
    "text": "api gateway to kind of group them together into some kind of an api because because of this one function one",
    "start": "709839",
    "end": "716079"
  },
  {
    "text": "path one function problem so all cloud providers they had some kind of api gateway or multiple of them usually to",
    "start": "716079",
    "end": "722720"
  },
  {
    "text": "group them together together and that's that's all we had in terms of kind of grouping things together with servers at",
    "start": "722720",
    "end": "728959"
  },
  {
    "text": "this point all right so in this first phase of serverless you know we had limited",
    "start": "728959",
    "end": "734720"
  },
  {
    "text": "languages and versions so you couldn't run all the languages you wanted limited triggers mostly http based",
    "start": "734720",
    "end": "741839"
  },
  {
    "text": "limited resources so you can't do you can run all the workloads",
    "start": "741839",
    "end": "747040"
  },
  {
    "text": "um no concurrency like so one request to one function which meant cold start",
    "start": "747040",
    "end": "752320"
  },
  {
    "text": "problem if your function takes a little bit of time to start and i didn't mention this but also the",
    "start": "752320",
    "end": "758399"
  },
  {
    "text": "local development was limited so if you wanted to run a function locally you had to kind of figure it out on your own",
    "start": "758399",
    "end": "764720"
  },
  {
    "text": "there wasn't that much local support like uh how to run say cloud functions for example on google cloud functions",
    "start": "764720",
    "end": "770480"
  },
  {
    "text": "locally you you could i mean you had to deploy and see that it was working fully",
    "start": "770480",
    "end": "776079"
  },
  {
    "text": "usually and we had some grouping for http functions but there was no complicated",
    "start": "776079",
    "end": "782639"
  },
  {
    "text": "orchestration so you could group them together but but that was pretty much it you couldn't do much else",
    "start": "782639",
    "end": "789200"
  },
  {
    "text": "all right so in the second phase of serverless we started seeing containers come into the picture",
    "start": "789200",
    "end": "795920"
  },
  {
    "text": "in the serverless ecosystem and containers",
    "start": "795920",
    "end": "801040"
  },
  {
    "text": "well first of all why we had containers is that um you know containers give us a context",
    "start": "801040",
    "end": "807360"
  },
  {
    "text": "where where that we define so if we have our application we define what our",
    "start": "807360",
    "end": "812800"
  },
  {
    "text": "application needs what library libraries it needs and and what environment it needs like",
    "start": "812800",
    "end": "818079"
  },
  {
    "text": "the port numbers and things like that and we create a container out of that and the context run exactly the same",
    "start": "818079",
    "end": "824480"
  },
  {
    "text": "whether i'm running it locally or whether i'm running it in the cloud because of that",
    "start": "824480",
    "end": "829519"
  },
  {
    "text": "we started having technologies like kubernetes and k native to run containers",
    "start": "829519",
    "end": "834800"
  },
  {
    "text": "because it made total sense to run containers in this consistent kind of environment",
    "start": "834800",
    "end": "840560"
  },
  {
    "text": "so for some time i would say for a couple of years we had this two separate worlds we had the serverless world with",
    "start": "840560",
    "end": "847279"
  },
  {
    "text": "the functions which was really easy way of running code in the cloud that let you kind of",
    "start": "847279",
    "end": "854079"
  },
  {
    "text": "iterate fast and not worry so much about the infrastructure but then we also had this container",
    "start": "854079",
    "end": "859360"
  },
  {
    "text": "world where you define the runtime you use whatever the language you want but it didn't run",
    "start": "859360",
    "end": "865920"
  },
  {
    "text": "in a serverless way so you had to work like when you were using containers you had to actually worry about you know clusters like",
    "start": "865920",
    "end": "872959"
  },
  {
    "text": "kubernetes clusters and virtual machines and how to schedule them um things like that i mean kubernetes made it easier",
    "start": "872959",
    "end": "879760"
  },
  {
    "text": "but it wasn't as easy as serverless right so this lasted for a few years but",
    "start": "879760",
    "end": "885920"
  },
  {
    "text": "thankfully we started having technologies like cloud run on google",
    "start": "885920",
    "end": "891839"
  },
  {
    "text": "app runner or even aws lambda on aws now runs containers and on azure container",
    "start": "891839",
    "end": "897519"
  },
  {
    "text": "instances so the whole point of these services is is to run containers as if they're",
    "start": "897519",
    "end": "903120"
  },
  {
    "text": "serverless functions so that you know you can create your container and not worry so much about how to schedule the",
    "start": "903120",
    "end": "909839"
  },
  {
    "text": "container or where the container runs and when you when you look at cloud run for example uh it's actually based on",
    "start": "909839",
    "end": "916560"
  },
  {
    "text": "open source project called k native which is an an open source project from cncf uh that tries to",
    "start": "916560",
    "end": "924639"
  },
  {
    "text": "make it easier to run containers on kubernetes but then there's a version called cloud run",
    "start": "924639",
    "end": "930800"
  },
  {
    "text": "which is a which is a fully managed service that runs k native api on google",
    "start": "930800",
    "end": "935839"
  },
  {
    "text": "cloud so with technologies like this now we could define our runtime in",
    "start": "935839",
    "end": "940959"
  },
  {
    "text": "containers and we could also run them in a serverless way where we don't have to worry about provisioning machines we",
    "start": "940959",
    "end": "946480"
  },
  {
    "text": "don't have to worry about auto scaling and all the things that we take granted in serverless",
    "start": "946480",
    "end": "952160"
  },
  {
    "text": "of course these containers um you know in containers you can run anything you want but the containers",
    "start": "952160",
    "end": "959199"
  },
  {
    "text": "that i'm talking about there's a contract that you need to adhere to right this contract for example um you",
    "start": "959199",
    "end": "965120"
  },
  {
    "text": "need to listen on zero zero zero on port variable which which usually uh defaults",
    "start": "965120",
    "end": "970480"
  },
  {
    "text": "to eight to eighty um it's an http server so yeah we are still um running http servers",
    "start": "970480",
    "end": "977120"
  },
  {
    "text": "that must start within four minutes so it should be something that starts quickly",
    "start": "977120",
    "end": "982880"
  },
  {
    "text": "the request time started increasing so in functions for example the request time the time that you need to respond",
    "start": "982880",
    "end": "988480"
  },
  {
    "text": "to was initially one minute but now with containers we increase that to five",
    "start": "988480",
    "end": "993839"
  },
  {
    "text": "minutes and it could be up to 60 minutes which means that you can do more lightweight data processing kind of",
    "start": "993839",
    "end": "1000639"
  },
  {
    "text": "workloads still stateless because you need to scale these containers so it makes sense to for them to be stateless",
    "start": "1000639",
    "end": "1007839"
  },
  {
    "text": "you still need to do everything in the request so you can't do background threads still",
    "start": "1007839",
    "end": "1013759"
  },
  {
    "text": "the resources are increasing so now we can have four c virtual cpus and eight gigs so it's better although it's",
    "start": "1013759",
    "end": "1020320"
  },
  {
    "text": "still limited limited and concurrency increased from one to eighty",
    "start": "1020320",
    "end": "1025839"
  },
  {
    "text": "um and i'll talk more about this later and um also the ability to listen",
    "start": "1025839",
    "end": "1031678"
  },
  {
    "text": "multiple paths so in functions as i mentioned before you have one path one function whereas in containers you",
    "start": "1031679",
    "end": "1039038"
  },
  {
    "text": "basically have an http server that means you can have multiple paths that you can handle",
    "start": "1039039",
    "end": "1044558"
  },
  {
    "text": "in a single container so things are slightly getting better in the sense that we are having more resources more",
    "start": "1044559",
    "end": "1050480"
  },
  {
    "text": "more time to process things multiple paths multiple concurrency but there's still",
    "start": "1050480",
    "end": "1056480"
  },
  {
    "text": "limits that you need to need to think about right it's not like limitless and you can run anything you want however",
    "start": "1056480",
    "end": "1061520"
  },
  {
    "text": "you want and the concurrency is that um you know in cloud run which is the container",
    "start": "1061520",
    "end": "1068160"
  },
  {
    "text": "service and cloud functions second generation concurrency is 80 meaning 80",
    "start": "1068160",
    "end": "1073600"
  },
  {
    "text": "requests can be handled by a single function or a single container and this does not eliminate call start",
    "start": "1073600",
    "end": "1081200"
  },
  {
    "text": "because the first request that comes in you still need to create the container so you still have the call start problem",
    "start": "1081200",
    "end": "1088240"
  },
  {
    "text": "but uh it makes it much much more improved because",
    "start": "1088240",
    "end": "1093760"
  },
  {
    "text": "you know when this when the second request comes in you don't have to pay for that penalty again because it will",
    "start": "1093760",
    "end": "1099280"
  },
  {
    "text": "probably go to the same container that's handling the first request and because of that you don't see cold start",
    "start": "1099280",
    "end": "1105760"
  },
  {
    "text": "as much right so so here it's not like we got rid of the cold stuff problem but it's much more",
    "start": "1105760",
    "end": "1111520"
  },
  {
    "text": "improved because of this concurrency being more than one and there are more options for local",
    "start": "1111520",
    "end": "1117760"
  },
  {
    "text": "development so since these are containers you can run containers locally with docker",
    "start": "1117760",
    "end": "1122960"
  },
  {
    "text": "you can use build packs which is an open source project to convert your quote",
    "start": "1122960",
    "end": "1128799"
  },
  {
    "text": "into containers then on google there's functions framework that lets you run your functions locally",
    "start": "1128799",
    "end": "1135679"
  },
  {
    "text": "if you use this framework there's emulators for services like if you want to use datastore or popsup emulators you",
    "start": "1135679",
    "end": "1143280"
  },
  {
    "text": "can in your tests and then on aws there's a project called localstack that lets you",
    "start": "1143280",
    "end": "1149039"
  },
  {
    "text": "mock basically all the aws services so at this phase we started seeing more",
    "start": "1149039",
    "end": "1154400"
  },
  {
    "text": "support for mocking things so that we can run things locally or we can we can use them in our test things like that",
    "start": "1154400",
    "end": "1162160"
  },
  {
    "text": "and i already mentioned this basically we are getting more more time more resources um always on cpu for background",
    "start": "1162160",
    "end": "1168799"
  },
  {
    "text": "processing and i think the biggest thing at this phase was that we started seeing",
    "start": "1168799",
    "end": "1173840"
  },
  {
    "text": "protocols outside the hd well not outside but at least more richer protocols for example web sockets so",
    "start": "1173840",
    "end": "1180000"
  },
  {
    "text": "that you could we can do real-time connectivity between clients and server uh we started seeing servers and events",
    "start": "1180000",
    "end": "1185679"
  },
  {
    "text": "in cloud run and grpc which is a much more efficient",
    "start": "1185679",
    "end": "1191120"
  },
  {
    "text": "encoding protocol compared to json so you started you started doing this kind of stuff",
    "start": "1191120",
    "end": "1196640"
  },
  {
    "text": "when you start using containers and cloud run and",
    "start": "1196640",
    "end": "1202720"
  },
  {
    "text": "we also started seeing basic orchestration so if you wanted to do scheduled services for",
    "start": "1202720",
    "end": "1208320"
  },
  {
    "text": "example you can use something called clutch scheduler on google cloud um where you define what the schedule is and it will",
    "start": "1208320",
    "end": "1214559"
  },
  {
    "text": "call not only your cloud run services but any service service if you like and on azure this is called scheduler on aws",
    "start": "1214559",
    "end": "1220960"
  },
  {
    "text": "on cloudwatch and then there's something called cloud tests where you basically define a task push it to a",
    "start": "1220960",
    "end": "1228240"
  },
  {
    "text": "queue and that and that task gets pushed to a service that you define so these were kind of the beginnings of an",
    "start": "1228240",
    "end": "1234480"
  },
  {
    "text": "orchestration so if you want to control who calls your service in what way you could at least do it in a time-based way",
    "start": "1234480",
    "end": "1241120"
  },
  {
    "text": "or you could do it in a task-based way at this phase but it was still quite limited at this stage",
    "start": "1241120",
    "end": "1248480"
  },
  {
    "text": "all right so at the end of this phase um we could run any language and version",
    "start": "1248480",
    "end": "1253919"
  },
  {
    "text": "because with containers basically it's up to you to define your runtime which is good",
    "start": "1253919",
    "end": "1259039"
  },
  {
    "text": "we still had limited triggers so we are mostly http based still",
    "start": "1259039",
    "end": "1264640"
  },
  {
    "text": "the execution model time and resources are increasing but they are not limitless",
    "start": "1264640",
    "end": "1270880"
  },
  {
    "text": "cold start is not a problem anymore for the most part because we also introduced something called minimal instances for",
    "start": "1271200",
    "end": "1277520"
  },
  {
    "text": "example on cloud run which means if you set this for example to one it means you",
    "start": "1277520",
    "end": "1282880"
  },
  {
    "text": "will always have one container running so with that you you really don't run into cold stuff anymore so this cold",
    "start": "1282880",
    "end": "1289600"
  },
  {
    "text": "step problem kind of goes away with concurrency and minimal instances",
    "start": "1289600",
    "end": "1295440"
  },
  {
    "text": "you have options for local development and you could do http grouping with api",
    "start": "1295440",
    "end": "1300880"
  },
  {
    "text": "gateway but you could also have some basic orchestration with schedulers and tests and other services where it lets you",
    "start": "1300880",
    "end": "1306880"
  },
  {
    "text": "call your serverless services um with with some basic orchestration but it's",
    "start": "1306880",
    "end": "1312320"
  },
  {
    "text": "nothing complicated yet all right so now in this third phase uh",
    "start": "1312320",
    "end": "1319280"
  },
  {
    "text": "which i think is the phase that we are in right now um what we started seeing is the expansion of serverless um",
    "start": "1319280",
    "end": "1326799"
  },
  {
    "text": "and serverless becoming the de facto way of running things and also serve this integrating with",
    "start": "1326799",
    "end": "1332720"
  },
  {
    "text": "existing non-serverless things so let's look at what i mean by this",
    "start": "1332720",
    "end": "1338080"
  },
  {
    "text": "now once you start having many services and especially service services",
    "start": "1338080",
    "end": "1344320"
  },
  {
    "text": "at some point you need to decide how these services will cooperate right how",
    "start": "1344320",
    "end": "1349919"
  },
  {
    "text": "how are you going to get them kind of work together now if they're http based",
    "start": "1349919",
    "end": "1355360"
  },
  {
    "text": "then you can use api gateway to kind of group them together into into an api so that's one way but if they're not http",
    "start": "1355360",
    "end": "1362400"
  },
  {
    "text": "based um or if it's like an um you know event driven kind of architecture",
    "start": "1362400",
    "end": "1368159"
  },
  {
    "text": "what you can do is that you can have your services deployed separately and you can use events",
    "start": "1368159",
    "end": "1374880"
  },
  {
    "text": "for them to communicate indirectly so you have a message broker in the middle or or a service bus whatever you want to",
    "start": "1374880",
    "end": "1380320"
  },
  {
    "text": "call it and the services they just generate events as they work on things and then the other services that are",
    "start": "1380320",
    "end": "1387360"
  },
  {
    "text": "interested in that event they would pick that event and just act on it right so service a will send an event i mean this",
    "start": "1387360",
    "end": "1392480"
  },
  {
    "text": "diagram is a little bit wrong it shows that events are being sent from service a service piece actually not like that",
    "start": "1392480",
    "end": "1398159"
  },
  {
    "text": "it's more like there's an event bus in the middle and service a when it's finished it will",
    "start": "1398159",
    "end": "1403200"
  },
  {
    "text": "send an event and then that event type is kind of registered with this service so that",
    "start": "1403200",
    "end": "1409360"
  },
  {
    "text": "service will pick that up and act on it right so there it's indirect and it's async right it's not one to one like",
    "start": "1409360",
    "end": "1414640"
  },
  {
    "text": "that so this is one way it's event driven or is also called choreography",
    "start": "1414640",
    "end": "1420240"
  },
  {
    "text": "um and it enables you to kind of have loosely coupled services um they're",
    "start": "1420240",
    "end": "1425679"
  },
  {
    "text": "loosely coupled because services they don't know about each other all they care about is that you",
    "start": "1425679",
    "end": "1430799"
  },
  {
    "text": "know these are the events i'm interested in and it will pick that event and act on it but you don't really need to know",
    "start": "1430799",
    "end": "1436480"
  },
  {
    "text": "servicep doesn't need to know about service a and if you need to change any of these services you can change them",
    "start": "1436480",
    "end": "1441840"
  },
  {
    "text": "without having to worry about the rest of the services all you need to worry about is the message types and message formats so if you need to change",
    "start": "1441840",
    "end": "1447919"
  },
  {
    "text": "anything about the messaging formats then it can become a little bit more complicated so this enables you to do loosely",
    "start": "1447919",
    "end": "1454080"
  },
  {
    "text": "coupled services but at the same time once you start having a lot of services",
    "start": "1454080",
    "end": "1459520"
  },
  {
    "text": "and a lot of event types then it becomes a little bit difficult to monitor things right so in your system if something",
    "start": "1459520",
    "end": "1466240"
  },
  {
    "text": "goes wrong what happened like how do you figure it out like you know which event wasn't",
    "start": "1466240",
    "end": "1471600"
  },
  {
    "text": "triggered or maybe an event was triggered but a service didn't process that event right so it becomes a little",
    "start": "1471600",
    "end": "1477679"
  },
  {
    "text": "bit tricky to figure out when something doesn't work another way of",
    "start": "1477679",
    "end": "1484159"
  },
  {
    "text": "getting services to cooperate is using an orchestrator an orchestrator is an external service",
    "start": "1484159",
    "end": "1490880"
  },
  {
    "text": "um where you encode what should happen so you encode the rules of your system",
    "start": "1490880",
    "end": "1497360"
  },
  {
    "text": "and then orchestrator makes the calls to the services in order that you define um there are services like workflows for",
    "start": "1497360",
    "end": "1504000"
  },
  {
    "text": "example on google cloud where you know if you want to call the services in like service a service p",
    "start": "1504000",
    "end": "1509360"
  },
  {
    "text": "service c service d it will make those calls on your behalf and if something goes wrong",
    "start": "1509360",
    "end": "1515600"
  },
  {
    "text": "it will let you know that you know i made a call to service b in step two but that step failed so you can",
    "start": "1515600",
    "end": "1522240"
  },
  {
    "text": "easily see if things not work of course there's pros and cons of each",
    "start": "1522240",
    "end": "1527679"
  },
  {
    "text": "approach i mean event driven systems they're better for loosely coupled",
    "start": "1527679",
    "end": "1532880"
  },
  {
    "text": "easily extensible kind of architectures orchestration is better for where you",
    "start": "1532880",
    "end": "1538559"
  },
  {
    "text": "want to group things together but you don't want them well you don't want to put them in a monolith instead you deploy them separately but you kind of",
    "start": "1538559",
    "end": "1544880"
  },
  {
    "text": "bring them together in a temporary way using an orchestration and it also allows you to",
    "start": "1544880",
    "end": "1551279"
  },
  {
    "text": "monitor your system easier because when something doesn't work the orchestrator will tell you that you know this service",
    "start": "1551279",
    "end": "1557679"
  },
  {
    "text": "didn't work basically so when you look at the choreography the event-driven systems on google cloud",
    "start": "1557679",
    "end": "1564880"
  },
  {
    "text": "there's even arc and pops up as the services to do this and on aws and azure",
    "start": "1564880",
    "end": "1570720"
  },
  {
    "text": "as well there's multiple services actually to do this kind of stuff i think the challenge here is um",
    "start": "1570720",
    "end": "1577919"
  },
  {
    "text": "figuring out which service to use right because in each cloud provider there's actually multiple services for eventing",
    "start": "1577919",
    "end": "1584799"
  },
  {
    "text": "um on google cloud event arc is the way to go because it's the easiest way to connect different things together",
    "start": "1584799",
    "end": "1591760"
  },
  {
    "text": "but sometimes it's not it's not enough and you need to actually",
    "start": "1591760",
    "end": "1596960"
  },
  {
    "text": "do like low lower level eventing with publishers and subscribers and topics and queues for that you could use pub",
    "start": "1596960",
    "end": "1603200"
  },
  {
    "text": "sub so the point here is that um don't you don't need to write your own",
    "start": "1603200",
    "end": "1609039"
  },
  {
    "text": "inventing system there's already eventing systems are out there on all club providers",
    "start": "1609039",
    "end": "1614080"
  },
  {
    "text": "but you need to pick the right one so that requires that you actually look into these services and pick the right",
    "start": "1614080",
    "end": "1619120"
  },
  {
    "text": "one and then what event enables you to do is that now all of a sudden you have all",
    "start": "1619120",
    "end": "1626480"
  },
  {
    "text": "these google cloud sources and also third-party sources outside google cloud",
    "start": "1626480",
    "end": "1632400"
  },
  {
    "text": "that becomes available to your service so your service whether it's cloud run or cloud functions",
    "start": "1632400",
    "end": "1638559"
  },
  {
    "text": "can get triggered from multiple places it's not only like http calls or anything like that it can be from",
    "start": "1638559",
    "end": "1645039"
  },
  {
    "text": "multiple services or it can be from external services like datadog or some other ex third-party providers so you",
    "start": "1645039",
    "end": "1652080"
  },
  {
    "text": "are increasing your triggers basically from just a few services to tens or hundreds of services",
    "start": "1652080",
    "end": "1659919"
  },
  {
    "text": "now if you want to use a orchestration approach let's say you have this kind of a flow",
    "start": "1659919",
    "end": "1666640"
  },
  {
    "text": "chart and you want to encode this flowchart into an orchestration and you want the orchestrator to make these",
    "start": "1666640",
    "end": "1672559"
  },
  {
    "text": "calls for you you can do that with workflows on google cloud on aws there's step functions for this",
    "start": "1672559",
    "end": "1679600"
  },
  {
    "text": "which is more geared towards aws ecosystem meaning you can",
    "start": "1679600",
    "end": "1684799"
  },
  {
    "text": "orchestrate the ecosystem services using step functions but you cannot orchestrate external services for example",
    "start": "1684799",
    "end": "1690480"
  },
  {
    "text": "on azure there's durable functions for orchestrating functions but there's logic apps to orchestrate pretty much",
    "start": "1690480",
    "end": "1696640"
  },
  {
    "text": "everything so you can you can have orchestrate um services within azure but you can also include external services",
    "start": "1696640",
    "end": "1703440"
  },
  {
    "text": "like uh like any public http service basically you can include in your logic app",
    "start": "1703440",
    "end": "1710399"
  },
  {
    "text": "um orchestration and um workflows just to mention briefly",
    "start": "1710399",
    "end": "1716159"
  },
  {
    "text": "uh it allows you to orchestrate your code running on google cloud it lets you orchestrate apis on google cloud and it",
    "start": "1716159",
    "end": "1722799"
  },
  {
    "text": "also allows you to include external apis in your orchestration and maybe this is a good",
    "start": "1722799",
    "end": "1727840"
  },
  {
    "text": "time to show you an example so let's see um let's see how we can change some services using an orchestrator let's see",
    "start": "1727840",
    "end": "1735360"
  },
  {
    "text": "how that looks like um so here what i want to do is that i want to have multiple",
    "start": "1735360",
    "end": "1740559"
  },
  {
    "text": "services that are chained together so it's just a single chain but the point here is that these",
    "start": "1740559",
    "end": "1746559"
  },
  {
    "text": "services they run in different places so some of them are functions on google cloud some of them are external functions and some of them are",
    "start": "1746559",
    "end": "1753360"
  },
  {
    "text": "containers running on google cloud so if you want if you want to kind of combine this together into an orchestration",
    "start": "1753360",
    "end": "1758399"
  },
  {
    "text": "what you can do is first you deploy your services so here i have a first",
    "start": "1758399",
    "end": "1764159"
  },
  {
    "text": "service called randomgen uh which generates a random number",
    "start": "1764159",
    "end": "1769279"
  },
  {
    "text": "it's a it's a python um yeah i think it's a yeah it's a python function uh the code is there if you",
    "start": "1769279",
    "end": "1775520"
  },
  {
    "text": "want to take a look at it but it's very simple just generate a random number so i deploy that um then i deploy a second",
    "start": "1775520",
    "end": "1781919"
  },
  {
    "text": "function called multiply that takes two numbers and just multiplies them again it's a python function so i deploy that",
    "start": "1781919",
    "end": "1787279"
  },
  {
    "text": "as well then the third function is an external function from math.js",
    "start": "1787279",
    "end": "1793039"
  },
  {
    "text": "um and and what you can do with math.js is that you can call math.js with an expression",
    "start": "1793039",
    "end": "1798399"
  },
  {
    "text": "and here i'm using the log expression so given i give it a number and it gives me the log of that number so this is an",
    "start": "1798399",
    "end": "1804960"
  },
  {
    "text": "external function and then finally i have a fourth function which is a cloud run service",
    "start": "1804960",
    "end": "1810159"
  },
  {
    "text": "which runs a container and this container uh takes the floor of",
    "start": "1810159",
    "end": "1815200"
  },
  {
    "text": "a number right um so given that let's say you give six point eight eight it will just give you a six basically so if",
    "start": "1815200",
    "end": "1822480"
  },
  {
    "text": "you want to put this together what you need to do is first you need to create your or you need to define your",
    "start": "1822480",
    "end": "1828240"
  },
  {
    "text": "orchestration and you can do that in yaml or json and in this yamo we define the steps of",
    "start": "1828240",
    "end": "1835039"
  },
  {
    "text": "what should happen so the first step i call it random function step and i'm making an http call to this cloud",
    "start": "1835039",
    "end": "1841600"
  },
  {
    "text": "function that i deployed and this call will be made by workflows and the result will be saved into this",
    "start": "1841600",
    "end": "1848159"
  },
  {
    "text": "variable called randomgen results so it will make the call and it will save the result then in the next step i call the",
    "start": "1848159",
    "end": "1854480"
  },
  {
    "text": "multiply function again i'm making the call to the cloud function but this time i'm doing an http post",
    "start": "1854480",
    "end": "1861919"
  },
  {
    "text": "and i'm passing as the body the result from the previous step so",
    "start": "1861919",
    "end": "1867519"
  },
  {
    "text": "random gen result and i get the body and i get the random feel from the body so i'm getting i'm",
    "start": "1867519",
    "end": "1873519"
  },
  {
    "text": "passing the result from the previous result basically and then i'm passing that as an input to my",
    "start": "1873519",
    "end": "1879279"
  },
  {
    "text": "second function and once i once workflows make the call then the result will be captured in",
    "start": "1879279",
    "end": "1884480"
  },
  {
    "text": "multiply result and the third one is a log function this here we are making a http get call and",
    "start": "1884480",
    "end": "1891360"
  },
  {
    "text": "we are calling this external api mathjs and we are calling the log",
    "start": "1891360",
    "end": "1898240"
  },
  {
    "text": "as an x query expression so this is just the http get with a query expression and i'm passing the result from the previous",
    "start": "1898240",
    "end": "1904320"
  },
  {
    "text": "step as well and then finally we make a call to the floor function and here i'm",
    "start": "1904320",
    "end": "1909919"
  },
  {
    "text": "calling a different url this is a cloud run url i am passing this authentication",
    "start": "1909919",
    "end": "1916960"
  },
  {
    "text": "parameter because it's a private service and i want to make sure that my workflows can call this private service",
    "start": "1916960",
    "end": "1922960"
  },
  {
    "text": "and with the input is the body of the result from the previous step as well",
    "start": "1922960",
    "end": "1928399"
  },
  {
    "text": "and the final result it's it's the result of the floor so in the end we'll return the floor result as the",
    "start": "1928399",
    "end": "1934720"
  },
  {
    "text": "result of the orchestration so this is how you can kind of build your orchestration i mean this is a really",
    "start": "1934720",
    "end": "1939760"
  },
  {
    "text": "easy example but you can see how it helps you to kind of build these more complicated",
    "start": "1939760",
    "end": "1946320"
  },
  {
    "text": "orchestrations and just to show you um that it works uh let's see if i have here i have",
    "start": "1946320",
    "end": "1952480"
  },
  {
    "text": "service chaining and then if you look at the source",
    "start": "1952480",
    "end": "1958880"
  },
  {
    "text": "one thing that you'll see is that first well the the code i show you is here but you also get a visualization",
    "start": "1958880",
    "end": "1965279"
  },
  {
    "text": "here you can see it's a chain of things um and then if i want to execute there's",
    "start": "1965279",
    "end": "1970799"
  },
  {
    "text": "an api but we can also execute it from here i'm not going to pass in any input and then now the orchestration is",
    "start": "1970799",
    "end": "1977600"
  },
  {
    "text": "running and within a few seconds it should run and then we should see this is the input and the output is going to be the result of the whole chain and the",
    "start": "1977600",
    "end": "1984480"
  },
  {
    "text": "floor so the the body is four meaning you know well you have to trust me that",
    "start": "1984480",
    "end": "1990399"
  },
  {
    "text": "all the functions were called but in the end if the floor returned four and i'm",
    "start": "1990399",
    "end": "1995600"
  },
  {
    "text": "also returning the http code and some headers that's the output so this will give you a little bit of idea on what",
    "start": "1995600",
    "end": "2001840"
  },
  {
    "text": "you can do with workflows and how easy it is to kind of bring all these services together",
    "start": "2001840",
    "end": "2008640"
  },
  {
    "text": "now once you have the basic orchestration what i see happening is that i see people",
    "start": "2008640",
    "end": "2014799"
  },
  {
    "text": "combining event-driven systems with orchestration right because",
    "start": "2014799",
    "end": "2020240"
  },
  {
    "text": "sometimes it makes sense to group things together but once you have the grouping",
    "start": "2020240",
    "end": "2025760"
  },
  {
    "text": "it also makes sense to make that loosely coupled with other groupings right so in this case for example um",
    "start": "2025760",
    "end": "2033039"
  },
  {
    "text": "i want to build an image processing pipeline and in this image processing pipeline i want the user to save an",
    "start": "2033039",
    "end": "2039440"
  },
  {
    "text": "image to a cloud storage bucket and then i want a number of services to",
    "start": "2039440",
    "end": "2044640"
  },
  {
    "text": "process that image and then in the end i'll save the process image to an output",
    "start": "2044640",
    "end": "2049839"
  },
  {
    "text": "bucket right so in this case these services i have four services filter function",
    "start": "2049839",
    "end": "2056800"
  },
  {
    "text": "this this will filter the the image whether it's a safe image or not using",
    "start": "2056800",
    "end": "2061839"
  },
  {
    "text": "machine learning and once it's filtered we want to go to labeler labeler will",
    "start": "2061839",
    "end": "2067679"
  },
  {
    "text": "use machine learning to extract the labels from the image so figure out what the image is about and save those labels",
    "start": "2067679",
    "end": "2073760"
  },
  {
    "text": "then resize there will resize the image to a 400 to 400",
    "start": "2073760",
    "end": "2079040"
  },
  {
    "text": "and then finally the water marker will take the resize image and it will take the labels and it will create a new",
    "start": "2079040",
    "end": "2084960"
  },
  {
    "text": "image with the resize image and the labels on top of the image right so if you want to do something like this",
    "start": "2084960",
    "end": "2092240"
  },
  {
    "text": "now these filter label resizer water marker they need to go in in that order you",
    "start": "2092240",
    "end": "2098240"
  },
  {
    "text": "know you don't want to resize if you don't filter right or you don't want to watermark if you don't have the labels",
    "start": "2098240",
    "end": "2104400"
  },
  {
    "text": "so you really need to call them in that order and you probably want to deploy them in that order too so that's why it make it",
    "start": "2104400",
    "end": "2110960"
  },
  {
    "text": "kind of makes sense to put them in an orchestration rather than make them event driven because if you make",
    "start": "2110960",
    "end": "2116800"
  },
  {
    "text": "them event driven they will be loosely coupled but at the same time",
    "start": "2116800",
    "end": "2122320"
  },
  {
    "text": "like you will lose that ordering and you need to kind of you still need to order them somehow with these events so",
    "start": "2122320",
    "end": "2127520"
  },
  {
    "text": "instead of that it makes more sense to put them into an orchestration",
    "start": "2127520",
    "end": "2133040"
  },
  {
    "text": "but how do you trigger this orchestration that should be loosely coupled so when",
    "start": "2133040",
    "end": "2138079"
  },
  {
    "text": "the user saves an image that will trigger an event and the event will kick off the orchestration so i see",
    "start": "2138079",
    "end": "2144560"
  },
  {
    "text": "this pattern of like event driven plus orchestration all the time and this is a quick example of that and",
    "start": "2144560",
    "end": "2151040"
  },
  {
    "text": "let's see um just to show you quickly like how you would set this up basically",
    "start": "2151040",
    "end": "2157040"
  },
  {
    "text": "again it's the same as before like you would um deploy your services um so you deploy your water marker",
    "start": "2157040",
    "end": "2163680"
  },
  {
    "text": "resizer they're all functions actually in this case they're not functions filter and",
    "start": "2163680",
    "end": "2169280"
  },
  {
    "text": "and yeah so once you deploy all your functions then you need to create your workflow and let's just quickly look at",
    "start": "2169280",
    "end": "2174880"
  },
  {
    "text": "the workflow and actually maybe we can look at it from here because we'll see a visualization",
    "start": "2174880",
    "end": "2180880"
  },
  {
    "text": "we go image processing if you look at source",
    "start": "2183520",
    "end": "2189680"
  },
  {
    "text": "so you see that this hopefully is yeah hopefully it's big enough but you see that it will receive an",
    "start": "2189680",
    "end": "2195839"
  },
  {
    "text": "event so this will be the cloud storage event then we define the steps where we log the event",
    "start": "2195839",
    "end": "2201680"
  },
  {
    "text": "then from the event we extract the file information so where is it where is this event coming from which packet and which",
    "start": "2201680",
    "end": "2207200"
  },
  {
    "text": "file then we have a filter step where we call the filter function um with the file information",
    "start": "2207200",
    "end": "2214960"
  },
  {
    "text": "then the filter will have a response then we check the response here we are checking the",
    "start": "2214960",
    "end": "2220400"
  },
  {
    "text": "response to see um you can do like a conditional switch statement so here i'm doing a condition",
    "start": "2220400",
    "end": "2226400"
  },
  {
    "text": "and i'm checking the filter response body safe true so if it's true then i conclude that it's",
    "start": "2226400",
    "end": "2231920"
  },
  {
    "text": "safe and i go to the next step which is label but if it's not safe then i end my",
    "start": "2231920",
    "end": "2237839"
  },
  {
    "text": "orchestration right so i do the kind of checks then we call the labeler function",
    "start": "2237839",
    "end": "2242960"
  },
  {
    "text": "then we call the resizer function then finally in the watermark step",
    "start": "2242960",
    "end": "2248000"
  },
  {
    "text": "we call the watermarker with the file from resize",
    "start": "2248000",
    "end": "2254079"
  },
  {
    "text": "function and also the labels from the label function so we pass those as inputs and in the end the output will be",
    "start": "2254079",
    "end": "2260079"
  },
  {
    "text": "the response from each service and then if you look at the visualization again you get this nice visualization where",
    "start": "2260079",
    "end": "2265359"
  },
  {
    "text": "you see how things are supposed to work so for example if you look at filter we call the filter",
    "start": "2265359",
    "end": "2270720"
  },
  {
    "text": "we log it and we check it if it's safe if it's not safe then we can see that",
    "start": "2270720",
    "end": "2276320"
  },
  {
    "text": "the orchestration ends but if it's safe then it will continue right and to actually see that this is working",
    "start": "2276320",
    "end": "2284880"
  },
  {
    "text": "if i go to one of my buckets",
    "start": "2285119",
    "end": "2289440"
  },
  {
    "text": "i think it's it should be this one but we'll see",
    "start": "2290400",
    "end": "2298560"
  },
  {
    "text": "let's upload a picture let's say i upload this picture",
    "start": "2298560",
    "end": "2305119"
  },
  {
    "text": "now once we upload it this will trigger an event and if we look at workflows",
    "start": "2306000",
    "end": "2313079"
  },
  {
    "text": "image processing we see that there's an execution already so that triggered the the execution and",
    "start": "2314400",
    "end": "2320400"
  },
  {
    "text": "if we click here we see that there is the input so the",
    "start": "2320400",
    "end": "2327119"
  },
  {
    "text": "input is the event that has the bucket information the data from the event and",
    "start": "2327119",
    "end": "2332160"
  },
  {
    "text": "then we see the output already the the http codes from each service in this case 200 so it seemed like",
    "start": "2332160",
    "end": "2339040"
  },
  {
    "text": "everything worked and if just to verify that everything worked if i go back",
    "start": "2339040",
    "end": "2344960"
  },
  {
    "text": "to output bucket",
    "start": "2344960",
    "end": "2350960"
  },
  {
    "text": "then i think this was the picture we uploaded",
    "start": "2350960",
    "end": "2356799"
  },
  {
    "text": "so you can see that this this picture you know it resized it so that's why it's kind of skewed but then it also",
    "start": "2359359",
    "end": "2365119"
  },
  {
    "text": "extracted some labels and we use these three top three labels to kind of overlay on top of the image",
    "start": "2365119",
    "end": "2371680"
  },
  {
    "text": "so this um choreographer and orchestration kind of working together is a common pattern i see",
    "start": "2371680",
    "end": "2377580"
  },
  {
    "text": "[Music] another pattern i see is that combining serverless with server full",
    "start": "2377580",
    "end": "2384720"
  },
  {
    "text": "so as i mentioned the serverless functions are containers they have limitations they have time limitations",
    "start": "2384720",
    "end": "2391440"
  },
  {
    "text": "and they have resource limitations let's say you want to run a really long",
    "start": "2391440",
    "end": "2396560"
  },
  {
    "text": "running process that needs to run for days or weeks or or if you need to run something that requires a lot of",
    "start": "2396560",
    "end": "2402480"
  },
  {
    "text": "resources um at that point you really don't have a choice other than running on a virtual",
    "start": "2402480",
    "end": "2407680"
  },
  {
    "text": "machine right so you define a virtual machine with the resources that you need and then you can run it there but then",
    "start": "2407680",
    "end": "2414000"
  },
  {
    "text": "who's going to manage that virtual machine so one pattern that you can use is that you can use the serverless orchestration",
    "start": "2414000",
    "end": "2420480"
  },
  {
    "text": "to kind of set up your virtual machine and run that virtual machine and get the result and then delete the virtual",
    "start": "2420480",
    "end": "2426880"
  },
  {
    "text": "machine so in this example i won't show here but in this example i show how to",
    "start": "2426880",
    "end": "2433119"
  },
  {
    "text": "have a long running container provision on a virtual machine run a virtual machine um get the result and",
    "start": "2433119",
    "end": "2440800"
  },
  {
    "text": "then delete the virtual machine in this way you are using the power of servers",
    "start": "2440800",
    "end": "2447280"
  },
  {
    "text": "but then you're not really dealing with the overhead or service you just use it as long as you need it and once you have",
    "start": "2447280",
    "end": "2453440"
  },
  {
    "text": "the result you can shut it down and just display the result so that's another pattern as well",
    "start": "2453440",
    "end": "2460400"
  },
  {
    "text": "and finally so far we've been talking about http based services so everything is",
    "start": "2460400",
    "end": "2466800"
  },
  {
    "text": "triggered by http but sometimes you have just a piece of code that you want to run that's not",
    "start": "2466800",
    "end": "2472960"
  },
  {
    "text": "really http based it just needs to run with certain inputs right",
    "start": "2472960",
    "end": "2478240"
  },
  {
    "text": "there is now something called cloud run jobs which is something that's released recently that enables you to run",
    "start": "2478240",
    "end": "2484720"
  },
  {
    "text": "non-http containers so these are containers where you just run some code and it runs it runs as long as it needs",
    "start": "2484720",
    "end": "2491599"
  },
  {
    "text": "and then once it's done it will just shut down right i call these run to completion containers",
    "start": "2491599",
    "end": "2498560"
  },
  {
    "text": "this enables you to do more things like batch and data processing kind of workloads but without",
    "start": "2498560",
    "end": "2503920"
  },
  {
    "text": "having to deal with virtual machines so we are trying to make it easy so that you don't have to deal with virtual",
    "start": "2503920",
    "end": "2509760"
  },
  {
    "text": "machine machines as much as you can so with cloud run jobs you can you can do that you can just say okay here's my",
    "start": "2509760",
    "end": "2515839"
  },
  {
    "text": "container just run it and when you have the result when it's finished uh we'll just",
    "start": "2515839",
    "end": "2521520"
  },
  {
    "text": "you know finish and return the result so if you want to look there's also",
    "start": "2521520",
    "end": "2526560"
  },
  {
    "text": "an example of this here so when we look at this state or serverless today",
    "start": "2526560",
    "end": "2533040"
  },
  {
    "text": "you can use any language and version that's not a problem anymore you have rich triggers so you're not limited by",
    "start": "2533040",
    "end": "2539760"
  },
  {
    "text": "just by http or by or just by cloud services like there's third-party",
    "start": "2539760",
    "end": "2545760"
  },
  {
    "text": "things that can trigger your server list so you need to look you need to figure out how to connect",
    "start": "2545760",
    "end": "2551119"
  },
  {
    "text": "these services to your serverless services but they're there um so you don't have to worry so much about how",
    "start": "2551119",
    "end": "2556960"
  },
  {
    "text": "how i do it it's just a matter of finding out the execution model time and resources",
    "start": "2556960",
    "end": "2562319"
  },
  {
    "text": "are more but they're still limited but you can always combine it with serverless with",
    "start": "2562319",
    "end": "2567680"
  },
  {
    "text": "servers and with that you don't really have any limits anymore so whatever you can run on a server you can still do",
    "start": "2567680",
    "end": "2573680"
  },
  {
    "text": "that but you can use service orchestration to orchestrate it um cold start is not a big problem",
    "start": "2573680",
    "end": "2579599"
  },
  {
    "text": "anymore uh you you can you can do local development and you can do grouping but you can also",
    "start": "2579599",
    "end": "2585920"
  },
  {
    "text": "do rich orchestration with things like workflows and logic apps so anything you want to orchestrate uh and put together",
    "start": "2585920",
    "end": "2592800"
  },
  {
    "text": "you you can do that with serverless today so i think the point uh and also we didn't talk about",
    "start": "2592800",
    "end": "2598720"
  },
  {
    "text": "all these services i'm not gonna talk about it because one thing that's kind of unfortunate is that",
    "start": "2598720",
    "end": "2605680"
  },
  {
    "text": "you know i see a lot of people spending time kind of building services in a serverless way but then in the back end",
    "start": "2605680",
    "end": "2611839"
  },
  {
    "text": "they use like a sql database that's meant that's not even that's not serverless and it's not even managed",
    "start": "2611839",
    "end": "2617440"
  },
  {
    "text": "right so they they're kind of managing that so that's kind of a tragedy because you spend all this time",
    "start": "2617440",
    "end": "2622880"
  },
  {
    "text": "making this serverless but then in the end you still need to deal with um something in the back end but obvious",
    "start": "2622880",
    "end": "2628560"
  },
  {
    "text": "but thankfully there's choice on you know on every cloud on nosql databases or sql",
    "start": "2628560",
    "end": "2633680"
  },
  {
    "text": "databases or caches so that there are things that you can use that are not fully",
    "start": "2633680",
    "end": "2640000"
  },
  {
    "text": "serverless but at least they're they're kind of managed that makes it easier on the data side as",
    "start": "2640000",
    "end": "2645200"
  },
  {
    "text": "well and also their services like send grid to send emails or twilio to make calls",
    "start": "2645200",
    "end": "2650400"
  },
  {
    "text": "or send sms so always try to look for these things instead of trying to start a vm and do things on your own because",
    "start": "2650400",
    "end": "2657760"
  },
  {
    "text": "they really help to keep things like as server-free as possible but i yeah just keep them in mind that i",
    "start": "2657760",
    "end": "2664800"
  },
  {
    "text": "guess that's what i'm what i mean here so the point of the talk is that basically in my opinion serverless is",
    "start": "2664800",
    "end": "2672079"
  },
  {
    "text": "now the default way of running code in the cloud so when you're building something check it out see if you can do",
    "start": "2672079",
    "end": "2678319"
  },
  {
    "text": "it with that servers but then if you cannot you can always use virtual machines",
    "start": "2678319",
    "end": "2683599"
  },
  {
    "text": "but even those try to see how you can automate them using these serverless technologies because in the end i think",
    "start": "2683599",
    "end": "2689760"
  },
  {
    "text": "the more we automate and the more we get away from servers the easier it is for us to",
    "start": "2689760",
    "end": "2694880"
  },
  {
    "text": "maintain our systems i think that's all i have for my talk thanks very much for being here uh this",
    "start": "2694880",
    "end": "2700800"
  },
  {
    "text": "late and yeah we have time for questions so i'll be happy to take some questions thank you",
    "start": "2700800",
    "end": "2708599"
  },
  {
    "text": "yeah so i will repeat the question for um for the camera as well so i mentioned earlier that it's difficult to monitor",
    "start": "2723760",
    "end": "2729920"
  },
  {
    "text": "serverless things but you didn't you didn't tell us how to do it basically how to monitor them well in in the",
    "start": "2729920",
    "end": "2737280"
  },
  {
    "text": "context was that in event driven systems it is difficult to monitor when when",
    "start": "2737280",
    "end": "2742880"
  },
  {
    "text": "something fails when something fails it's not so easy to know where it failed i mean there are certain things you can",
    "start": "2742880",
    "end": "2748720"
  },
  {
    "text": "do for example every event has an id so every event can have an id and you",
    "start": "2748720",
    "end": "2755280"
  },
  {
    "text": "can try to trace that id or maybe you can have like a correlation id where you can combine multiple events into a",
    "start": "2755280",
    "end": "2762160"
  },
  {
    "text": "single correlation and try to see where the correlation broke but i don't think there is also there is",
    "start": "2762160",
    "end": "2769359"
  },
  {
    "text": "the saga pattern for example when and something fails you can if you can",
    "start": "2769359",
    "end": "2774560"
  },
  {
    "text": "detect it you can try to compensate using this sega pattern so there's certain things that you can try to do",
    "start": "2774560",
    "end": "2780160"
  },
  {
    "text": "but admit it it's not easy like i don't think there's a solution where i can say okay in event driven systems do this and",
    "start": "2780160",
    "end": "2786000"
  },
  {
    "text": "it will you'll figure everything out my solution is to use orchestration",
    "start": "2786000",
    "end": "2791040"
  },
  {
    "text": "actually in one of my other talks i go through an application that was written in event driven way and",
    "start": "2791040",
    "end": "2798000"
  },
  {
    "text": "then we rewrote using orchestration using workflows and one of the main takeaways was that it was much easier to",
    "start": "2798000",
    "end": "2804720"
  },
  {
    "text": "figure out when something went wrong so if you can go to an orchestration kind of way i",
    "start": "2804720",
    "end": "2811359"
  },
  {
    "text": "would suggest that for monitoring but for eventing i don't think there's like an easy solution to kind of monitor what",
    "start": "2811359",
    "end": "2817839"
  },
  {
    "text": "what went wrong i mean all i do is that i try to kind of put some ids and trace them and then",
    "start": "2817839",
    "end": "2825119"
  },
  {
    "text": "check the logs eventually see if i see something in the logs which is not a great answer",
    "start": "2825119",
    "end": "2831838"
  },
  {
    "text": "any other questions yes",
    "start": "2832960",
    "end": "2838160"
  },
  {
    "text": "i think the next step is that we won't use the term serverless because it's like i think it's one of those terms",
    "start": "2849040",
    "end": "2854559"
  },
  {
    "text": "that became kind of overloaded with everything so by default most of the services will be",
    "start": "2854559",
    "end": "2862000"
  },
  {
    "text": "will be like fully managed so you don't have to think about service and the payment model as well will be service in",
    "start": "2862319",
    "end": "2867839"
  },
  {
    "text": "the sense that you know if you use it you pay if you don't use it you don't pay so that will be the default and once that's the default for everything then i",
    "start": "2867839",
    "end": "2874880"
  },
  {
    "text": "think we'll just talk about services like we used to do like service service oriented architectures you know",
    "start": "2874880",
    "end": "2880720"
  },
  {
    "text": "so these things i think they at the end of the day that's what services like service oriented architecture with some additional things",
    "start": "2880720",
    "end": "2887440"
  },
  {
    "text": "like payment models and stuff like that so that will be the default and i think we'll just call them services",
    "start": "2887440",
    "end": "2893040"
  },
  {
    "text": "at least that's my opinion i don't know if someone agrees or not",
    "start": "2893040",
    "end": "2897920"
  },
  {
    "text": "right",
    "start": "2925440",
    "end": "2928440"
  },
  {
    "text": "yeah so the question is like things like minimal instances for example um you have to deal with that yourself",
    "start": "2948000",
    "end": "2954240"
  },
  {
    "text": "today but is it going to be more kind of handled automatically for you in a way right",
    "start": "2954240",
    "end": "2961200"
  },
  {
    "text": "yeah i mean the reason why for example the reason why you need to think about minimal instances today is that if you",
    "start": "2969440",
    "end": "2975040"
  },
  {
    "text": "set minimum so right now if you don't set minimal instances it's zero meaning your service if no one",
    "start": "2975040",
    "end": "2980559"
  },
  {
    "text": "uses it you don't pay anything right but as soon as you set it to one then you will be paying for that one",
    "start": "2980559",
    "end": "2986400"
  },
  {
    "text": "container running at all times so that's why we give you that option because you're the one paying right so you can't",
    "start": "2986400",
    "end": "2991680"
  },
  {
    "text": "just say oh we'll set it to one and you pay anyway you know that wouldn't be nice but i think the problem will go",
    "start": "2991680",
    "end": "2996720"
  },
  {
    "text": "away in the sense that as things like as they do more optimizations on how things start then",
    "start": "2996720",
    "end": "3003680"
  },
  {
    "text": "maybe things will start so fast that it won't even be an issue anymore so i think in that sense it will probably go",
    "start": "3003680",
    "end": "3009760"
  },
  {
    "text": "away at some point but as of today the functions at least cloud functions it",
    "start": "3009760",
    "end": "3014800"
  },
  {
    "text": "does take some time some milliseconds for it to start um and depending on also on your code as",
    "start": "3014800",
    "end": "3020880"
  },
  {
    "text": "well like how you wrote the code how you initialize things it will take some time so that's why it's a problem but maybe",
    "start": "3020880",
    "end": "3027920"
  },
  {
    "text": "the platform will improve to the point that we can kind of initialize things in the background and",
    "start": "3027920",
    "end": "3034079"
  },
  {
    "text": "then get things up and running really quickly i do expect that to happen but i don't know exactly how or what",
    "start": "3034079",
    "end": "3040319"
  },
  {
    "text": "would be the form of that yes",
    "start": "3040319",
    "end": "3046200"
  },
  {
    "text": "so you're yeah let me see your question is so",
    "start": "3063440",
    "end": "3069838"
  },
  {
    "text": "why is orchestration as a separate concept well so you mean like instead of this why",
    "start": "3070400",
    "end": "3076319"
  },
  {
    "text": "don't i have a service that calls other services that question yeah you could you could have that i",
    "start": "3076319",
    "end": "3081359"
  },
  {
    "text": "mean you could have a service you could write your own orchestrator in that sense that you could have a service that",
    "start": "3081359",
    "end": "3086640"
  },
  {
    "text": "calls other services and actually um the durable functions in azure is kind of like that you know that's what",
    "start": "3086640",
    "end": "3093119"
  },
  {
    "text": "it tries to do but i think it is limited because yeah i mean you can have a service called other",
    "start": "3093119",
    "end": "3098160"
  },
  {
    "text": "services but the orchestrator does more than that i i it calls the services if",
    "start": "3098160",
    "end": "3103200"
  },
  {
    "text": "something goes wrong you can define the read write policies so how do you want to read trifi services down you want to",
    "start": "3103200",
    "end": "3108559"
  },
  {
    "text": "write three times or five times you want to do exponential backup kind of way or you want to just keep doing it every",
    "start": "3108559",
    "end": "3114240"
  },
  {
    "text": "certain seconds so the orchestrator has all that logic to do that um it has other concepts like",
    "start": "3114240",
    "end": "3121520"
  },
  {
    "text": "if a service returns a certain error code you want to call let's say service a returned http 500 you want to call",
    "start": "3121520",
    "end": "3128079"
  },
  {
    "text": "service d afterwards so that logic can be part of your orchestrator instead of having in your code",
    "start": "3128079",
    "end": "3135359"
  },
  {
    "text": "so i guess my answer is that an orchestrator is it's not just calling services it's",
    "start": "3135359",
    "end": "3140559"
  },
  {
    "text": "calling services and handling errors and retries and branching and checks all that kind",
    "start": "3140559",
    "end": "3147359"
  },
  {
    "text": "of stuff in my mind it is it belongs to an orchestrator",
    "start": "3147359",
    "end": "3152960"
  },
  {
    "text": "rather than just the service because that service like who's going to maintain that service",
    "start": "3152960",
    "end": "3158240"
  },
  {
    "text": "who's going to scale it uh what if the service goes down at least i don't know logic apps but at least on",
    "start": "3158240",
    "end": "3164160"
  },
  {
    "text": "workflows it's highly resilient highly scalable kind of system so i rather have workflows do that than me trying to do",
    "start": "3164160",
    "end": "3171280"
  },
  {
    "text": "it in my own services",
    "start": "3171280",
    "end": "3174559"
  },
  {
    "text": "right yeah that's a good point uh the workflows for example you need to write things in yaml or json and yaml is not",
    "start": "3184079",
    "end": "3190559"
  },
  {
    "text": "designed for you know anything complicated but so sometimes i am trying to think like okay like how do i do this in yaml it's not a",
    "start": "3190559",
    "end": "3196720"
  },
  {
    "text": "great experience but we are thinking of creating like a language or maybe use some mainstream",
    "start": "3196720",
    "end": "3203680"
  },
  {
    "text": "language to define these orchestrations or at least define it and then get it compiled to yaml so people don't have to",
    "start": "3203680",
    "end": "3209280"
  },
  {
    "text": "deal with yaml so it will get better this is kind of like a starting point for orchestrators",
    "start": "3209280",
    "end": "3214640"
  },
  {
    "text": "i think any other questions",
    "start": "3214640",
    "end": "3219680"
  },
  {
    "text": "okay then well thanks very much enjoy the rest of the conference",
    "start": "3219760",
    "end": "3225319"
  }
]