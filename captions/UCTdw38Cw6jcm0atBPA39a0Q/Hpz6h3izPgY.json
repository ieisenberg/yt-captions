[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": "good morning everybody oh wait wait wait a second wait a second it's norway time so good afternoon to you how are you",
    "start": "8000",
    "end": "17320"
  },
  {
    "text": "how does it feel to be back at uh ndc oslo in person live well sort of live",
    "start": "17920",
    "end": "23359"
  },
  {
    "text": "i'm not there but that's okay how's it feel feels pretty good right",
    "start": "23359",
    "end": "29519"
  },
  {
    "text": "yeah i see the guy in the orange jacket in the front thank you for the thumbs up my man",
    "start": "29519",
    "end": "35920"
  },
  {
    "text": "appreciate you my name is spencer and i am here to talk to you today about um immutable data structures uh in c sharp",
    "start": "35920",
    "end": "42559"
  },
  {
    "text": "and net so um we're going to talk a little bit a little history we're going to talk a lot about a little uh",
    "start": "42559",
    "end": "48480"
  },
  {
    "text": "you know platform is it good for is is immutability good for net is it how does",
    "start": "48480",
    "end": "54160"
  },
  {
    "text": "it how does it fit into the dot-net world especially c-sharp and nvb.net if you're a vb.net developer uh well now",
    "start": "54160",
    "end": "60559"
  },
  {
    "text": "out of curiosity since i said it uh raise your hand if you're uh still working vb.net on a day-to-day basis",
    "start": "60559",
    "end": "67760"
  },
  {
    "text": "okay raise your hand if you just don't want to admit it",
    "start": "67760",
    "end": "72600"
  },
  {
    "text": "all right well i'm really excited to be giving this talk to you wish i could be there live in person but uh you know that's the way",
    "start": "72960",
    "end": "79200"
  },
  {
    "text": "it goes sometimes so um thank you for coming and uh i hope you take away something from this talk i do have",
    "start": "79200",
    "end": "85680"
  },
  {
    "text": "slido up on my phone so i will be waiting for questions um i might save",
    "start": "85680",
    "end": "90799"
  },
  {
    "text": "questions for the end um but if somebody asks a question in the middle that i think is uh that i think is good then i",
    "start": "90799",
    "end": "96400"
  },
  {
    "text": "will certainly address it so uh without further ado i'm ready to get started uh let's talk",
    "start": "96400",
    "end": "102399"
  },
  {
    "text": "about uh what immutable immutability is or what immutable means so immutable is an",
    "start": "102399",
    "end": "108880"
  },
  {
    "text": "adjective that means it's unchanging over time or unable to be changed and a large part of our world in general",
    "start": "108880",
    "end": "115680"
  },
  {
    "text": "not the programming world just our world in general lots of things are mutable um my uh feelings about certain things are",
    "start": "115680",
    "end": "123119"
  },
  {
    "text": "mutable um my uh day-to-day is mutable um",
    "start": "123119",
    "end": "128879"
  },
  {
    "text": "but immutability some things really some things do never change and immutability",
    "start": "128879",
    "end": "134640"
  },
  {
    "text": "um is really the concept that describes that and going piggybacking off of that an",
    "start": "134640",
    "end": "141120"
  },
  {
    "text": "immutable object is a data structure that once instantiated cannot be changed so um we've probably heard you know about",
    "start": "141120",
    "end": "148560"
  },
  {
    "text": "immutability at least in in many walks of life uh sorry in in many walks of life and in many walks of",
    "start": "148560",
    "end": "155599"
  },
  {
    "text": "our programming life but uh none so uh very diff not none so more than when we",
    "start": "155599",
    "end": "162000"
  },
  {
    "text": "get to talking about functional programming now functional programming is uh when i encountered functional",
    "start": "162000",
    "end": "167519"
  },
  {
    "text": "programming um early on in my career it was a uh it was for it was f sharp uh i",
    "start": "167519",
    "end": "174000"
  },
  {
    "text": "had just f sharp was fairly new at the time and i was a fairly new.net developer and uh",
    "start": "174000",
    "end": "179760"
  },
  {
    "text": "what really surprised me or really took me aback about uh f-sharp was how different even though it was a dot-net",
    "start": "179760",
    "end": "186800"
  },
  {
    "text": "you know ecosystem language how different functional programming an f-sharp really was",
    "start": "186800",
    "end": "192800"
  },
  {
    "text": "um compared to something like c-sharp or vb.net uh and more less about like the syntax and",
    "start": "192800",
    "end": "199519"
  },
  {
    "text": "more about what f sharp encouraged you to do and and and its values in general",
    "start": "199519",
    "end": "204560"
  },
  {
    "text": "whereas you know functional programming really embraces the concept of no null you know as much as is possible f sharp",
    "start": "204560",
    "end": "210879"
  },
  {
    "text": "can't avoid it because it's a clr language after all uh immutability as a default sort of um",
    "start": "210879",
    "end": "218239"
  },
  {
    "text": "as a default uh way of expressing data structures uh functions first thus of course the",
    "start": "218239",
    "end": "225680"
  },
  {
    "text": "functional the name functional uh where functions are really first-class citizens and are treated as objects uh",
    "start": "225680",
    "end": "232400"
  },
  {
    "text": "in in most cases and a really nice expressive type system",
    "start": "232400",
    "end": "237439"
  },
  {
    "text": "um which uh thankfully a large part of that has indeed come over to uh a good",
    "start": "237439",
    "end": "243439"
  },
  {
    "text": "amount of that not not all of it but a good amount of that has come over to c sharp um in in in certain things like uh",
    "start": "243439",
    "end": "250720"
  },
  {
    "text": "pattern matching uh which isn't really a type system thing but a really nice type system will make fun",
    "start": "250720",
    "end": "257040"
  },
  {
    "text": "things like pattern matching a lot easier but of course we're not here to talk necessarily about functional",
    "start": "257040",
    "end": "262160"
  },
  {
    "text": "programming we're here to talk about immutability specifically um",
    "start": "262160",
    "end": "267280"
  },
  {
    "start": "267000",
    "end": "393000"
  },
  {
    "text": "let's take a little f sharp for example uh this is how you declare a type inside of f sharp or at least the most uh basic",
    "start": "267280",
    "end": "274080"
  },
  {
    "text": "way to declare a type and it's called a record type and um this thing has been around for years and years inside of",
    "start": "274080",
    "end": "279840"
  },
  {
    "text": "f-sharp uh and it has a couple of uh features about it that are uh different",
    "start": "279840",
    "end": "285680"
  },
  {
    "text": "by default this type is not mutable in other words you cannot change these properties unless you put a little mutable keyword in front of it um and",
    "start": "285680",
    "end": "293440"
  },
  {
    "text": "this was really one of the first most surprising things about f-sharp for me was this sort of concept of a record",
    "start": "293440",
    "end": "300160"
  },
  {
    "text": "where uh it had structural equality by default it uh is",
    "start": "300160",
    "end": "305600"
  },
  {
    "text": "immute immutable by default uh and that was really kind of a changing moment for me",
    "start": "305600",
    "end": "310800"
  },
  {
    "text": "and uh as per usual in c sharp uh it it borrows all of its best ideas like async",
    "start": "310800",
    "end": "316639"
  },
  {
    "text": "await uh link it borrows all those best things from uh other languages and of",
    "start": "316639",
    "end": "321680"
  },
  {
    "text": "course now of course we have that in c-sharp as well uh and it works pretty much the same at least as you declare it",
    "start": "321680",
    "end": "328240"
  },
  {
    "text": "it is immutable by default although you can make it mutable uh and it has structural equality built in",
    "start": "328240",
    "end": "334800"
  },
  {
    "text": "which i think is one of its uh best aspects so um if you're using a more recent version of c sharp i don't always",
    "start": "334800",
    "end": "340880"
  },
  {
    "text": "get that privilege because i work a lot in legacy.net applications so usually i just stick with what i have um but if",
    "start": "340880",
    "end": "347840"
  },
  {
    "text": "you are working in a more recent version of c sharp this is certainly an option for you as well",
    "start": "347840",
    "end": "353360"
  },
  {
    "text": "and it really gets back to what that idea that functional programming really changed things it really changed some of",
    "start": "353360",
    "end": "359919"
  },
  {
    "text": "my behaviors in c sharp even though in c sharp and vb.net lots of functional things are not you",
    "start": "359919",
    "end": "366400"
  },
  {
    "text": "know a lot lots of functional concepts are not possible uh you can kinda sorta uh do function for you can you can do",
    "start": "366400",
    "end": "374080"
  },
  {
    "text": "sort of function first stuff inside of c sharp uh but it's really not that simple",
    "start": "374080",
    "end": "379360"
  },
  {
    "text": "or straightforward and of course immutability is there as well and we'll talk about what that looks",
    "start": "379360",
    "end": "384639"
  },
  {
    "text": "like in a little bit but of course it's important to know that you've probably heard this all from",
    "start": "384639",
    "end": "390160"
  },
  {
    "text": "uh that you've probably heard this all in some form or another uh from somebody before because if you've ever met",
    "start": "390160",
    "end": "396560"
  },
  {
    "text": "somebody who's a functional programmer you'll know because if there it's anything like working out or doing crossfit they'll make sure you know",
    "start": "396560",
    "end": "402800"
  },
  {
    "text": "they'll tell you they'll they won't stop talking about it so c sharp c sharp is a great and",
    "start": "402800",
    "end": "409280"
  },
  {
    "text": "amazing language uh i have built an entire career on building c applications written in c sharp",
    "start": "409280",
    "end": "415120"
  },
  {
    "text": "um and there's a lot about it to love but and at the end of the day c sharp is c",
    "start": "415120",
    "end": "420720"
  },
  {
    "text": "sharp and i can't change that uh it is immutable it's sort of mutable right i mean they change c sharp all the time",
    "start": "420720",
    "end": "427280"
  },
  {
    "text": "but there are some things about c sharp that i am just unable to change uh the fact that it's buttoned to the clr and",
    "start": "427280",
    "end": "433199"
  },
  {
    "text": "the clr highly values um and encourages mutability in many of its libraries its",
    "start": "433199",
    "end": "439599"
  },
  {
    "text": "frameworks it sort of is what it is right i can only take and borrow those",
    "start": "439599",
    "end": "445199"
  },
  {
    "text": "concepts uh from other languages from other paradigms and really sort of use",
    "start": "445199",
    "end": "450479"
  },
  {
    "text": "them in c sharp uh link is a great example of something that um",
    "start": "450479",
    "end": "455919"
  },
  {
    "text": "that uh you know uh collection operators uh that was added to c sharp later and a hugely",
    "start": "455919",
    "end": "462560"
  },
  {
    "text": "great thing um but for the most part c sharp has and all and always will for",
    "start": "462560",
    "end": "468319"
  },
  {
    "text": "arguably will be a mutable language first so",
    "start": "468319",
    "end": "474000"
  },
  {
    "text": "i can't change c sharp but hopefully i can change your mind",
    "start": "474000",
    "end": "480000"
  },
  {
    "start": "479000",
    "end": "592000"
  },
  {
    "text": "and i have to warn you now that there's a lot of bad immutability jokes in this talk uh which i tell a lot of bad jokes",
    "start": "480000",
    "end": "485759"
  },
  {
    "text": "so some things truly are immutable some things really do never",
    "start": "485759",
    "end": "490840"
  },
  {
    "text": "change this is a uh a tweet that i particularly like to call out in this um",
    "start": "490840",
    "end": "497120"
  },
  {
    "text": "in this uh in this talk because i think it really illustrates a lot of why i think immutability is really",
    "start": "497120",
    "end": "503759"
  },
  {
    "text": "important and really powerful uh as we're programming so this is a common complaint by scott hanselman",
    "start": "503759",
    "end": "510000"
  },
  {
    "text": "twitter give me an edit button you and autoblue complete both suck um i've always kind of wondered why an edit",
    "start": "510000",
    "end": "516959"
  },
  {
    "text": "button on twitter made any sense at all and i i i have to say that i of many things that i i disagree with people on",
    "start": "516959",
    "end": "523518"
  },
  {
    "text": "twitter about this is probably the idea of having an edit butter on twitter uh really doesn't appeal to me so let's",
    "start": "523519",
    "end": "529680"
  },
  {
    "text": "talk about why that is let's take this tweet a little more innocuous right defeating traffic is the",
    "start": "529680",
    "end": "535120"
  },
  {
    "text": "ultimate boss battle by elon musk um okay you know that's kind of funny it's kind of quirky and you like it uh you",
    "start": "535120",
    "end": "542160"
  },
  {
    "text": "are an avid twitter user of course you love c-sharp twitter who doesn't love twitter",
    "start": "542160",
    "end": "547519"
  },
  {
    "text": "right um so you look at this and you're like okay that's kind of funny i don't always agree with elon but you know what",
    "start": "547519",
    "end": "553920"
  },
  {
    "text": "i'm going to go ahead and give that a retweet i'm going to go ahead and click that rt button and i'm going to post it to my feed and let everybody else know",
    "start": "553920",
    "end": "560880"
  },
  {
    "text": "uh what what i feel that i feel like this is a funny tweet for whatever reason um and then elon let's say for",
    "start": "560880",
    "end": "568800"
  },
  {
    "text": "the sake of argument that there is an edit button let's say that edit button on twitter exists and suddenly elon",
    "start": "568800",
    "end": "575600"
  },
  {
    "text": "decides a few minutes later you know this tweet you know this really isn't really what i meant to say i meant to",
    "start": "575600",
    "end": "581200"
  },
  {
    "text": "say something more like this where you know what i just want to see i i want to uh people who retweet this to say i",
    "start": "581200",
    "end": "587680"
  },
  {
    "text": "agree with what donald trump says 100 of the time and this kind of gets into a concept of",
    "start": "587680",
    "end": "593440"
  },
  {
    "start": "592000",
    "end": "749000"
  },
  {
    "text": "understanding the state of your application as it's running and i love this quote by john carmack a large",
    "start": "593440",
    "end": "599040"
  },
  {
    "text": "fraction of the flaws in software development are due to programmers not fully understanding all the possible",
    "start": "599040",
    "end": "604640"
  },
  {
    "text": "states their code may execute in let's take that going back and taking",
    "start": "604640",
    "end": "609839"
  },
  {
    "text": "diving deeper into this example with this edit button what if it's been retrieved we retweeted suddenly now as",
    "start": "609839",
    "end": "616240"
  },
  {
    "text": "twitter let's say that you're the engineer at twitter who you know makes the call for how editing how do we make",
    "start": "616240",
    "end": "622079"
  },
  {
    "text": "editing tweets work within twitter now you have to ask yourself so many ques many questions about that",
    "start": "622079",
    "end": "629040"
  },
  {
    "text": "particular tweet in general what if that tweet that edited tweet has been retweeted",
    "start": "629040",
    "end": "634480"
  },
  {
    "text": "right what if it's been liked do you like the old tweet or do you like the new tweet what if somebody quote",
    "start": "634480",
    "end": "640320"
  },
  {
    "text": "retweeted it and uh you know added some color or context to that do you use the",
    "start": "640320",
    "end": "645360"
  },
  {
    "text": "old copy of the tweet or do you use the new copy of the tweet what if somebody's viewing the tweet hit the retweet button",
    "start": "645360",
    "end": "651200"
  },
  {
    "text": "and as they hit the retweet button just a split second before that person had edited that tweet",
    "start": "651200",
    "end": "657360"
  },
  {
    "text": "and do we do things like reset the date and time stamp",
    "start": "657360",
    "end": "661839"
  },
  {
    "text": "diving even further into this you're that engineer at twitter you're the one who's making the call how do we make this how do we make this work",
    "start": "663279",
    "end": "670399"
  },
  {
    "text": "how does this complicate twitter's architecture i don't know twitter's architecture although i think they they talk about it",
    "start": "670399",
    "end": "676320"
  },
  {
    "text": "but i assume that making a tweet editable probably makes that pretty difficult for twitter right not only are",
    "start": "676320",
    "end": "682640"
  },
  {
    "text": "they having to store that one copy of the tweet do they have to store multiple copies of the tweet if it's already been liked and retweeted how do you treat",
    "start": "682640",
    "end": "689200"
  },
  {
    "text": "that do we push those notifications up to edits for that for up to users for when that tweet is edited",
    "start": "689200",
    "end": "695040"
  },
  {
    "text": "suddenly you you have to you find yourself asking many questions just to",
    "start": "695040",
    "end": "700240"
  },
  {
    "text": "see how just to get to the point of being able to edit a tweet whereas if you turn around and you just",
    "start": "700240",
    "end": "706800"
  },
  {
    "text": "don't add that edit button you don't have to think about that you don't have to think about",
    "start": "706800",
    "end": "712720"
  },
  {
    "text": "why what what do we do if we do enable an edit button on twitter right you don't it's if that tweet is immutable",
    "start": "712720",
    "end": "719279"
  },
  {
    "text": "you have a lot of power because you get simplicity and simplicity is a really powerful concept right simplifying your",
    "start": "719279",
    "end": "725680"
  },
  {
    "text": "architecture is something that um all of us want to do unless you're one of those programmers who's getting uh paid by the",
    "start": "725680",
    "end": "731839"
  },
  {
    "text": "hour and you know you don't have a conscience so you just continue to make things more complicated to keep yourself",
    "start": "731839",
    "end": "736880"
  },
  {
    "text": "with the job i don't think any of us are like that but thus illustrating the point that",
    "start": "736880",
    "end": "744079"
  },
  {
    "text": "immutability is simplicity it's bliss in its way in its own way",
    "start": "744079",
    "end": "750000"
  },
  {
    "start": "749000",
    "end": "854000"
  },
  {
    "text": "let's talk about this example this is something i see all the time uh from especially junior developers where they",
    "start": "750000",
    "end": "756480"
  },
  {
    "text": "take in a list of objects and it does something it doesn't matter you know what it is necessarily but they've",
    "start": "756480",
    "end": "762399"
  },
  {
    "text": "specifically chosen that you take in a list of objects for this method so",
    "start": "762399",
    "end": "767600"
  },
  {
    "text": "suddenly i'm looking at that maybe overthinking it maybe not depending on depends on who wrote it and i think to",
    "start": "767600",
    "end": "774160"
  },
  {
    "text": "myself well why is this a list and not just a read-only collection or an i innumerable something along those lines",
    "start": "774160",
    "end": "780880"
  },
  {
    "text": "should i be adding to this list should i be removing from this list is that something that somebody wants me to do",
    "start": "780880",
    "end": "786240"
  },
  {
    "text": "if let's say that this isn't a method i wrote i'm the caller of this method i know that it's doing the thing that i want to do should i expect on the other",
    "start": "786240",
    "end": "793360"
  },
  {
    "text": "side of that that it's going to mutate or change my list in some meaningful way is that an expectation i should have",
    "start": "793360",
    "end": "800480"
  },
  {
    "text": "why do i have this list instead of something that i don't have to that that doesn't mutate it suddenly i'm starting",
    "start": "800480",
    "end": "807040"
  },
  {
    "text": "to think about all these states of this particular method again it's it's it's me in a way programming",
    "start": "807040",
    "end": "814160"
  },
  {
    "text": "defensively right i don't know why that person intended for this thing",
    "start": "814160",
    "end": "819440"
  },
  {
    "text": "to be a to take in a list so suddenly i'm left thinking and thinking more",
    "start": "819440",
    "end": "824560"
  },
  {
    "text": "about this eventually usually i just get to the point of like okay i'm just gonna dig into this method and see do does it",
    "start": "824560",
    "end": "829760"
  },
  {
    "text": "mutate this list and if so should i expect that uh especially since uh you notice that there's no xml comments",
    "start": "829760",
    "end": "835519"
  },
  {
    "text": "right because nobody writes xml comments that's probably not true i write them when i think they're useful but many",
    "start": "835519",
    "end": "842800"
  },
  {
    "text": "times developers just don't and you know that is what it is",
    "start": "842800",
    "end": "848000"
  },
  {
    "text": "so having to dig into that code having to dig into that method just becomes a necessity",
    "start": "848000",
    "end": "854480"
  },
  {
    "start": "854000",
    "end": "962000"
  },
  {
    "text": "uh the talk that inspired this talk is a talk called uh refactoring to immutability it was given at ndc",
    "start": "854560",
    "end": "859839"
  },
  {
    "text": "probably given more places so if you have an opportunity to watch it uh i suggest you do it's got",
    "start": "859839",
    "end": "865760"
  },
  {
    "text": "made by it's written by a guy named kevin kevin henny uh it's on youtube and um",
    "start": "865760",
    "end": "872480"
  },
  {
    "text": "he talks about this sort of synchronization quadrant where up at the top right corner uh if you well let's",
    "start": "872480",
    "end": "878800"
  },
  {
    "text": "start at the bottom left the sort of quote unquote ideal or really just the bottom half where if you have data",
    "start": "878800",
    "end": "885199"
  },
  {
    "text": "that's shared between threads or not shared between threads or systems as it were if you if it's immutable it needs no",
    "start": "885199",
    "end": "892160"
  },
  {
    "text": "synchronization right if that data if nothing about that data can change directly like a sql server row right sql",
    "start": "892160",
    "end": "899920"
  },
  {
    "text": "server row they want to be updated that's just the way sql server rows work that's how we tend to write applications",
    "start": "899920",
    "end": "906480"
  },
  {
    "text": "is to just mutate them in place so if you don't have a mutable data a mutable data structure if it's immutable then",
    "start": "906480",
    "end": "914000"
  },
  {
    "text": "you have no need to synchronize across threads synchronize across systems in as much as if edits are made you don't have",
    "start": "914000",
    "end": "921199"
  },
  {
    "text": "to worry about those things now if you have something let's take the top left quadrant if you have mutable",
    "start": "921199",
    "end": "926480"
  },
  {
    "text": "data that is not shared you have no synchronization no need for any synchronization proce process in order",
    "start": "926480",
    "end": "933279"
  },
  {
    "text": "to make sure that that data is up to date with other threads with other systems",
    "start": "933279",
    "end": "939040"
  },
  {
    "text": "um whereas if you have pop right shared mutable data suddenly",
    "start": "939040",
    "end": "946320"
  },
  {
    "text": "that data can be changed so now if it's being changed across memory spaces if it's being changed across threads you",
    "start": "946320",
    "end": "952320"
  },
  {
    "text": "have to have some kind of synchronization process in place and that can get really complicated as",
    "start": "952320",
    "end": "958560"
  },
  {
    "text": "you're getting into things like multi-threaded programming um moore's law is really worth take uh is",
    "start": "958560",
    "end": "964800"
  },
  {
    "start": "962000",
    "end": "1037000"
  },
  {
    "text": "really worth talking about here because we are reaching a limit of well we've",
    "start": "964800",
    "end": "969920"
  },
  {
    "text": "pretty much hit that limit of the single threaded performance well not",
    "start": "969920",
    "end": "975040"
  },
  {
    "text": "necessarily the single threaded performance but silicon can only get",
    "start": "975040",
    "end": "980320"
  },
  {
    "text": "we can only make silicon so fast before we have to just sort of um make it",
    "start": "980320",
    "end": "986639"
  },
  {
    "text": "before we have to sort of start thinking about spreading the work across multiple cores across multiple processors",
    "start": "986639",
    "end": "992639"
  },
  {
    "text": "and this started what was you know i don't remember uh this one was an 09 chip",
    "start": "992639",
    "end": "998000"
  },
  {
    "text": "uh i i don't i don't exactly remember the timeline but i i started getting into computers around the time that",
    "start": "998000",
    "end": "1003120"
  },
  {
    "text": "pentium 4 was the big thing pentium 4 and um i believe uh there it was athlon",
    "start": "1003120",
    "end": "1009279"
  },
  {
    "text": "amd's athlon chip and it started what was known as the gigabit the gigahertz wars where the chip manufacturers in a",
    "start": "1009279",
    "end": "1016880"
  },
  {
    "text": "race for uh to reach the limits to get to the limits the upper limits of",
    "start": "1016880",
    "end": "1023199"
  },
  {
    "text": "uh you know of single threaded performance they just started making their chips their single core chips",
    "start": "1023199",
    "end": "1028558"
  },
  {
    "text": "faster and faster and faster as fast as they possibly could that guy that guy kind of looks familiar",
    "start": "1028559",
    "end": "1036079"
  },
  {
    "text": "oh anyways but moore's law has its limits we can only make chips so fast in a",
    "start": "1036079",
    "end": "1042000"
  },
  {
    "start": "1037000",
    "end": "1097000"
  },
  {
    "text": "single a single court ship so fast we cannot make it much faster",
    "start": "1042000",
    "end": "1047199"
  },
  {
    "text": "and it doesn't really serve us to make it much faster as well when we have this idea of multi-threaded uh computing or",
    "start": "1047199",
    "end": "1054320"
  },
  {
    "text": "you know as it were spreading the um spreading the work amongst uh multiple cloud computers or whatnot or",
    "start": "1054320",
    "end": "1062160"
  },
  {
    "text": "so we have to really think about really think about when we're sharing this data between states is it really",
    "start": "1062160",
    "end": "1068640"
  },
  {
    "text": "worth it to make it mutable if we're making if we're spreading this work out or is it much easier to make it immutable when we're spreading this work",
    "start": "1068640",
    "end": "1075679"
  },
  {
    "text": "abroad across multiple memory spaces and this is really important today more than ever because we're not getting the single core chips",
    "start": "1075679",
    "end": "1082240"
  },
  {
    "text": "much faster and we're not going to get the we're reaching limits there multi-threaded is the is is the is our",
    "start": "1082240",
    "end": "1089039"
  },
  {
    "text": "current world and will continue to be for the foreseeable future for pretty much ever until they have quantum computing or whatever that is i don't i",
    "start": "1089039",
    "end": "1095679"
  },
  {
    "text": "have no idea so talking about some history of immutability i think we've all had this",
    "start": "1095679",
    "end": "1102000"
  },
  {
    "start": "1097000",
    "end": "1322000"
  },
  {
    "text": "rite of passages.net developers where uh we declared a string as a junior developer",
    "start": "1102000",
    "end": "1109039"
  },
  {
    "text": "and then we said hey i'm gonna i'm gonna call this string.replace and i just want",
    "start": "1109039",
    "end": "1114160"
  },
  {
    "text": "to replace this question mark with an exclamation point and we were baffled to find out why is it still printing",
    "start": "1114160",
    "end": "1120240"
  },
  {
    "text": "replaceable question mark when i replaced that aspect of that string well immutability has been around c sharp",
    "start": "1120240",
    "end": "1125760"
  },
  {
    "text": "forever in strings right and that's a really good thing that's a really powerful idea right",
    "start": "1125760",
    "end": "1132000"
  },
  {
    "text": "because there's there at least there was no good reason necessarily to make strings",
    "start": "1132000",
    "end": "1138480"
  },
  {
    "text": "mutable from the get-go so we've all had this right of passage of course all of us look at this code today it's like of",
    "start": "1138480",
    "end": "1143520"
  },
  {
    "text": "course we know what this does this is also super obvious to us but it wasn't so obvious to me as a",
    "start": "1143520",
    "end": "1148799"
  },
  {
    "text": "junior developer because immutability i didn't really understand immutability uh but once i started reading about strings",
    "start": "1148799",
    "end": "1155039"
  },
  {
    "text": "i you know that that came right up same thing goes for something like date time now uh another another thing that we've",
    "start": "1155039",
    "end": "1161600"
  },
  {
    "text": "all probably encountered these are this is an immutable data structure by default which is a good thing uh and",
    "start": "1161600",
    "end": "1166960"
  },
  {
    "text": "we've all had this similar thing happen but c sharp has really had a really storied history when it comes to",
    "start": "1166960",
    "end": "1172640"
  },
  {
    "text": "immutability this was immutability uh when it was first you know when when when you first had c",
    "start": "1172640",
    "end": "1179280"
  },
  {
    "text": "sharp uh this is what you had to do you had to declare a back and field you had to",
    "start": "1179280",
    "end": "1184400"
  },
  {
    "text": "declare a string with or a property with just a getter uh or you could just declare it without the property you",
    "start": "1184400",
    "end": "1189600"
  },
  {
    "text": "didn't have to have the property there but you know we c-sharp likes you to wrap properties so that's what we did",
    "start": "1189600",
    "end": "1195120"
  },
  {
    "text": "and this is how you would declare an immutable struct or an immutable class i mean um this works this did the job but",
    "start": "1195120",
    "end": "1202000"
  },
  {
    "text": "it was also very ugly uh it wasn't you know good looking code but then we get to you know another",
    "start": "1202000",
    "end": "1208480"
  },
  {
    "text": "version of c sharp you know a couple years later okay now we got the next version of c sharp and now you have private setters",
    "start": "1208480",
    "end": "1215120"
  },
  {
    "text": "uh which makes the code just a little bit cleaner but still technically mutable of course you know the thing can",
    "start": "1215120",
    "end": "1220240"
  },
  {
    "text": "change but at least it made the code look a little prettier and then we got beautiful wonderful c",
    "start": "1220240",
    "end": "1226400"
  },
  {
    "text": "sharp six where we were able to declare uh properties with just getters and we",
    "start": "1226400",
    "end": "1231840"
  },
  {
    "text": "had all the benefits of this we had all the benefits of this but now",
    "start": "1231840",
    "end": "1237120"
  },
  {
    "text": "we didn't have to declare anything immutable or have all this ugly boilerplate",
    "start": "1237120",
    "end": "1243679"
  },
  {
    "text": "uh and it was just a beautiful thing right this was much better this was a huge",
    "start": "1243679",
    "end": "1249039"
  },
  {
    "text": "improvement and now you know c-sharp eight well introduced read-only structs which are",
    "start": "1249039",
    "end": "1254080"
  },
  {
    "text": "structs that uh can be declared read-only it could declare it immutable uh which again a really powerful concept",
    "start": "1254080",
    "end": "1260000"
  },
  {
    "text": "when you get into high-performance computing so as c sharp has evolved to embrace",
    "start": "1260000",
    "end": "1267360"
  },
  {
    "text": "functional concepts embraced high performance uh really high performance computing c-sharp has sort of changed",
    "start": "1267360",
    "end": "1273760"
  },
  {
    "text": "and added in these data structures my preferred thing is to declare an immutable class like this",
    "start": "1273760",
    "end": "1280480"
  },
  {
    "text": "or most of the work that i do which is tends to be again in uh well a lot of the work that i do not most of it but",
    "start": "1280480",
    "end": "1286880"
  },
  {
    "text": "i'd say it's about path.net framework half.net core so i use immutable classes everywhere",
    "start": "1286880",
    "end": "1293120"
  },
  {
    "text": "but c-sharp nine introduced record types which again as we talked about earlier are really powerful and you get",
    "start": "1293120",
    "end": "1298960"
  },
  {
    "text": "something that's a lot more succinct and with structural equality out of the gate which is a hugely powerful thing that uh",
    "start": "1298960",
    "end": "1305360"
  },
  {
    "text": "which is a hugely awesome concept uh that uh you know prevents me from having to write all the boilerplate to",
    "start": "1305360",
    "end": "1311520"
  },
  {
    "text": "make these all equitable or whatever it's just you get that out of the box which i love",
    "start": "1311520",
    "end": "1317200"
  },
  {
    "text": "it's like an anonymous type that you declare so it's like a type not to think about that one",
    "start": "1317200",
    "end": "1323200"
  },
  {
    "start": "1322000",
    "end": "1465000"
  },
  {
    "text": "let's talk about link link and uh link and net in general and let's talk specifically about",
    "start": "1323200",
    "end": "1329440"
  },
  {
    "text": "anonymous types link was a huge innovation in.net uh was a huge uh",
    "start": "1329440",
    "end": "1334880"
  },
  {
    "text": "i wouldn't say it's an innovation per se for programming but for net it was awesome link was great and anonymous",
    "start": "1334880",
    "end": "1340159"
  },
  {
    "text": "types were right there alongside link as one of the things that uh that we got",
    "start": "1340159",
    "end": "1345280"
  },
  {
    "text": "along with link and this is what of course it looks like we've all written code like this where",
    "start": "1345280",
    "end": "1351039"
  },
  {
    "text": "we have this anonymous type which again is like a record type that is anonymous you just can't you know you have no way",
    "start": "1351039",
    "end": "1357200"
  },
  {
    "text": "of declaring you're not declaring that ahead of time so you just uh create what's called you can do something like",
    "start": "1357200",
    "end": "1362799"
  },
  {
    "text": "this and create what's called a projection right and this is one of the best things about",
    "start": "1362799",
    "end": "1368000"
  },
  {
    "text": "anonymous types is they made them immutable like that was the best decision they could have possibly made with anonymous types which i think",
    "start": "1368000",
    "end": "1374480"
  },
  {
    "text": "probably frustrated lots of dot-net developers early on um but as you dug into link as you started to",
    "start": "1374480",
    "end": "1381200"
  },
  {
    "text": "learn more about the language you understood why that it did it anonymous types again immutability and",
    "start": "1381200",
    "end": "1386480"
  },
  {
    "text": "structural equality built in much like record types today we finally have record types which is amazing uh except in visual basic of course visual basic",
    "start": "1386480",
    "end": "1392880"
  },
  {
    "text": "loves to break the rules and so there is no structural equality with an anonymous type you actually have to declare",
    "start": "1392880",
    "end": "1398880"
  },
  {
    "text": "uh what your equality is using a key parameter it's really weird whatever",
    "start": "1398880",
    "end": "1405279"
  },
  {
    "text": "for the most part it doesn't bother me because i don't have to write vb.net that much but there it is",
    "start": "1406320",
    "end": "1411840"
  },
  {
    "text": "and this is a beautiful thing you can't touch this this is nothing there's nothing that you can edit about",
    "start": "1411840",
    "end": "1417200"
  },
  {
    "text": "this which is really good which is really powerful it means that you don't have to worry about the state of these immutable",
    "start": "1417200",
    "end": "1423679"
  },
  {
    "text": "objects as they're being projected as they're being shown on a page um or as they're being manipulated in",
    "start": "1423679",
    "end": "1429279"
  },
  {
    "text": "memory they're just there and then of course besides record types we have this beautiful new c sharp",
    "start": "1429279",
    "end": "1434880"
  },
  {
    "text": "feature uh in the i believe the latest version of c sharp might be nine i think it's ten though um where we can now",
    "start": "1434880",
    "end": "1441440"
  },
  {
    "text": "declare uh a new immutable type uh from with that piggybacked from an",
    "start": "1441440",
    "end": "1447760"
  },
  {
    "text": "old one so you know if you declare me and then you decide to click declare my son and just copy over all the other",
    "start": "1447760",
    "end": "1453760"
  },
  {
    "text": "properties uh you can use the with keyword to do that and the same thing is uh available in record types as well uh",
    "start": "1453760",
    "end": "1460000"
  },
  {
    "text": "so worth bringing up if you hadn't seen this before hugely great new feature",
    "start": "1460000",
    "end": "1466000"
  },
  {
    "start": "1465000",
    "end": "1655000"
  },
  {
    "text": "so there are some let's let's talk about some mutation anti-patterns um",
    "start": "1466240",
    "end": "1472960"
  },
  {
    "text": "unnecessary setters being the first one uh i i when i",
    "start": "1472960",
    "end": "1478400"
  },
  {
    "text": "when i'm declaring using something like entity framework i just expect that all of the properties on there are going to be mutable which makes good sense to me",
    "start": "1478400",
    "end": "1485600"
  },
  {
    "text": "right i think that um you know for for what entity framework core is or entity framework whatever you use um i think",
    "start": "1485600",
    "end": "1492400"
  },
  {
    "text": "that um it makes a lot of sense for those things to be mutable i mean after all the underlying sql database uh is",
    "start": "1492400",
    "end": "1498559"
  },
  {
    "text": "mutable but when it comes to unnecessary setters uh",
    "start": "1498559",
    "end": "1503679"
  },
  {
    "text": "this is one of those things where i i think that i i think that net developers in general can start to think because i think",
    "start": "1503679",
    "end": "1509360"
  },
  {
    "text": "they're just used to hitting prop prop tab and then just declaring the property and moving on",
    "start": "1509360",
    "end": "1515039"
  },
  {
    "text": "here's a real world example that uh uh that was real to me back when a few years ago when i was working at a",
    "start": "1515039",
    "end": "1520400"
  },
  {
    "text": "company um and i was the um lead the team lead for that particular",
    "start": "1520400",
    "end": "1526159"
  },
  {
    "text": "uh for that particular company and i had this interface that just represented a column i was doing some uh you know",
    "start": "1526159",
    "end": "1532960"
  },
  {
    "text": "reflective sql stuff under the hood with something like this and the interface was a lot bigger but for the purposes of",
    "start": "1532960",
    "end": "1538880"
  },
  {
    "text": "this this is basically what it looked like it had a column name and a column type okay that makes good sense so i declared",
    "start": "1538880",
    "end": "1546080"
  },
  {
    "text": "an immutable object of column because to me that made good sense at the time to do so",
    "start": "1546080",
    "end": "1552640"
  },
  {
    "text": "and uh because at the end of the day it's not like i'm going to change the column mid-execution of the thing so",
    "start": "1552640",
    "end": "1559360"
  },
  {
    "text": "i would expect or if and if i i if i did well i'd have to probably reevaluate my architecture right i don't know why that",
    "start": "1559360",
    "end": "1565600"
  },
  {
    "text": "would be a good idea necessarily so had this thing and i had it i had the setters closed for a reason i didn't",
    "start": "1565600",
    "end": "1571840"
  },
  {
    "text": "want people to think that they should or could change this interface um as it's executing for any reason",
    "start": "1571840",
    "end": "1579120"
  },
  {
    "text": "so you know i had a method called get columns for table which would do some sql server inspection you know uh inspection and uh",
    "start": "1579120",
    "end": "1586880"
  },
  {
    "text": "you know given a table i just wanted to know all the columns of that table without having to uh you know know the",
    "start": "1586880",
    "end": "1592799"
  },
  {
    "text": "type ahead of time uh because we were using entity framework but well it's a long story but",
    "start": "1592799",
    "end": "1598400"
  },
  {
    "text": "suffice it to say that uh this was one of the things that we use in order to interrogate like what tell hey table",
    "start": "1598400",
    "end": "1604640"
  },
  {
    "text": "tell me about yourself tell me what you do so we get back something like this so",
    "start": "1604640",
    "end": "1610080"
  },
  {
    "text": "you note that um for whatever reason in the execution of our program we needed this",
    "start": "1610080",
    "end": "1615440"
  },
  {
    "text": "id type that was a good or a unique identifier in sql server we needed it to be a string for whatever reason okay",
    "start": "1615440",
    "end": "1623840"
  },
  {
    "text": "and so i would get uh get these columns for table and so there was some refactoring that was done by a junior",
    "start": "1623840",
    "end": "1630320"
  },
  {
    "text": "developer who was like okay well if that needs to be a string that's super easy all i have to do is",
    "start": "1630320",
    "end": "1636640"
  },
  {
    "text": "add a setter to this property to this interface and then go ahead and fix all the references to that to add setters to the",
    "start": "1636640",
    "end": "1643039"
  },
  {
    "text": "column implementation and i'll just do one of these if column you know four var column and columns if",
    "start": "1643039",
    "end": "1649760"
  },
  {
    "text": "the column type is type guide just change it to type string easy enough",
    "start": "1649760",
    "end": "1655679"
  },
  {
    "start": "1655000",
    "end": "1808000"
  },
  {
    "text": "to me though i looked at that and i started to think like okay again uh",
    "start": "1655679",
    "end": "1660799"
  },
  {
    "text": "what what is the what is the purpose of this why is this particular or me i knew that because i had known that because i",
    "start": "1660799",
    "end": "1667440"
  },
  {
    "text": "had written it i had known you know why this is a bad thing and so i use it as a cheating",
    "start": "1667440",
    "end": "1672960"
  },
  {
    "text": "moment but any other developer let's say that i merge that pull request as is any other developer who's coming to this whose interface you know working with",
    "start": "1672960",
    "end": "1679279"
  },
  {
    "text": "this code now has to look at this i column interface and think to themselves why are all these 10 declared members",
    "start": "1679279",
    "end": "1685679"
  },
  {
    "text": "immutable except for this one it's the easy way out it's just taking mutability",
    "start": "1685679",
    "end": "1691840"
  },
  {
    "text": "uh take making something mutable just for the ease of development so i use this as a teaching moment",
    "start": "1691840",
    "end": "1698559"
  },
  {
    "text": "to say you know this isn't uh for that junior developer to talk about immutability to talk about",
    "start": "1698559",
    "end": "1704880"
  },
  {
    "text": "why taking and adding the setter was not necessarily a good thing it was really easy for them to do",
    "start": "1704880",
    "end": "1710480"
  },
  {
    "text": "but there's lots of things that are taking the easy way out in the job that we do it doesn't mean that we should do them",
    "start": "1710480",
    "end": "1715840"
  },
  {
    "text": "and that's the that's ultimately the message that i wanted to communicate to that developer so i encourage them to say instead of",
    "start": "1715840",
    "end": "1722240"
  },
  {
    "text": "using mutation use projection if you can mutate your you can mutate your object great but it's a lot better if you can",
    "start": "1722240",
    "end": "1729120"
  },
  {
    "text": "just project it to a new object going back to uh",
    "start": "1729120",
    "end": "1734399"
  },
  {
    "text": "another kepler talk i love this slide does just because you have a getter doesn't mean you should have a matching setter almost all of the time if i'm",
    "start": "1734399",
    "end": "1740880"
  },
  {
    "text": "declaring something that isn't an entity uh that isn't a poco or a data dto data",
    "start": "1740880",
    "end": "1746720"
  },
  {
    "text": "transfer object uh or entity framework core i'm just closing those setters because i",
    "start": "1746720",
    "end": "1752000"
  },
  {
    "text": "don't need them i want to make my object mutable by default for the most part when it's practical and pragmatic",
    "start": "1752000",
    "end": "1757279"
  },
  {
    "text": "pragmatic if i do this especially on something like an interface i better have a good",
    "start": "1757279",
    "end": "1762320"
  },
  {
    "text": "reason for doing this on that interface because at the end of the day i have to",
    "start": "1762320",
    "end": "1767760"
  },
  {
    "text": "look at that interface that i'm declaring and say is that center open because i'm expected to change it is it",
    "start": "1767760",
    "end": "1772799"
  },
  {
    "text": "because i'm allowed to change it what's the impact of changing that again having to now think deeply and really think",
    "start": "1772799",
    "end": "1779679"
  },
  {
    "text": "about the code and all of the execution states that it's executing in because at the end of the day if you",
    "start": "1779679",
    "end": "1785760"
  },
  {
    "text": "pass mutable data to methods you are giving any method any user of that data the permission to change that data when",
    "start": "1785760",
    "end": "1792240"
  },
  {
    "text": "it suits that method or that object or whatever the case may be right",
    "start": "1792240",
    "end": "1798399"
  },
  {
    "text": "you don't know you don't necessarily know how other people are going to use the",
    "start": "1798399",
    "end": "1803440"
  },
  {
    "text": "things that you provide them all of the features that you provide them",
    "start": "1803440",
    "end": "1809200"
  },
  {
    "start": "1808000",
    "end": "1976000"
  },
  {
    "text": "so let's talk about setup methods this is a particular anti-pattern that makes me crazy uh we were working very many years ago i",
    "start": "1809200",
    "end": "1816399"
  },
  {
    "text": "was working very many years ago uh at a company where we had a lot of offshore developers and",
    "start": "1816399",
    "end": "1822640"
  },
  {
    "text": "of course we know that we shouldn't do when we make a call inside of a constructor the constructor should do really boring",
    "start": "1822640",
    "end": "1828799"
  },
  {
    "text": "stuff like either set data or throw exceptions it shouldn't do anything like call to a database although we all have",
    "start": "1828799",
    "end": "1835600"
  },
  {
    "text": "applications where that's the case right there's the we've all had applications early on in the dot-net days where we had our",
    "start": "1835600",
    "end": "1842080"
  },
  {
    "text": "constructor do things that we shouldn't have it do but getting beyond that for the most part we know that constructors",
    "start": "1842080",
    "end": "1847520"
  },
  {
    "text": "are really good at creating objects let them do that let them be that good",
    "start": "1847520",
    "end": "1852559"
  },
  {
    "text": "but this particular team this offshore team loved to do uh something like this where they would call init on that",
    "start": "1852559",
    "end": "1858720"
  },
  {
    "text": "service and then you could use that service right it was doing something especially if it was",
    "start": "1858720",
    "end": "1865360"
  },
  {
    "text": "a um a task-based initialization method right where you were waiting on that init to",
    "start": "1865360",
    "end": "1870559"
  },
  {
    "text": "finish and then you could use the object so what happens then if you did",
    "start": "1870559",
    "end": "1875600"
  },
  {
    "text": "something like this well not by and large well i wouldn't say by and large the people who knew",
    "start": "1875600",
    "end": "1881039"
  },
  {
    "text": "about the init they would call init but junior developers uh or developers that",
    "start": "1881039",
    "end": "1886080"
  },
  {
    "text": "hadn't been exposed to this before would just wrap that would just create the repository they'd go along their merry",
    "start": "1886080",
    "end": "1891120"
  },
  {
    "text": "way and then suddenly they'd call get data and wondered why their code blew up well this should work and then they'd get",
    "start": "1891120",
    "end": "1897679"
  },
  {
    "text": "cryptic exception cryptic exceptions because of course you get a cryptic exception uh",
    "start": "1897679",
    "end": "1903919"
  },
  {
    "text": "and then the whole thing blows up and people are unhappy",
    "start": "1903919",
    "end": "1909840"
  },
  {
    "text": "a small example but a real one where we we've all seen something like this before we've all",
    "start": "1912159",
    "end": "1917600"
  },
  {
    "text": "experienced code like this before where we didn't realize that we had to do something else to that service ahead of time",
    "start": "1917600",
    "end": "1923440"
  },
  {
    "text": "it's much better than to make that service immutable and use the factory pattern where we",
    "start": "1923440",
    "end": "1928960"
  },
  {
    "text": "create something that creates those services for us uh especially if the service creation has to come from",
    "start": "1928960",
    "end": "1936240"
  },
  {
    "text": "uh some kind of async await uh one of the things that i see asked about freak",
    "start": "1936240",
    "end": "1941279"
  },
  {
    "text": "uh not frequently thank god not frequently but uh so often is hey why don't we have asynchronous constructors",
    "start": "1941279",
    "end": "1947760"
  },
  {
    "text": "which to me i just put my head in my hands and i think oh my goodness i i can't imagine why we would ever want",
    "start": "1947760",
    "end": "1953279"
  },
  {
    "text": "asynchronous constructors but getting back to the main point favor the factory pattern over using any kind of init or",
    "start": "1953279",
    "end": "1959200"
  },
  {
    "text": "service creation let the factory do the hard work of creating the object for you and then get your service make your",
    "start": "1959200",
    "end": "1965200"
  },
  {
    "text": "service immutable and you don't have to worry about it you just get the data and you just move on with your life teach",
    "start": "1965200",
    "end": "1971279"
  },
  {
    "text": "the factory how to make that service before so you avoid that setup method",
    "start": "1971279",
    "end": "1976960"
  },
  {
    "start": "1976000",
    "end": "2100000"
  },
  {
    "text": "let's talk about some library support for immutability uh system collections immutable is probably one of my favorite collections",
    "start": "1976960",
    "end": "1983279"
  },
  {
    "text": "if i can pass around immutable arrays uh oftentimes i will try to pass in um you know i'll try i will try to refactor my",
    "start": "1983279",
    "end": "1990880"
  },
  {
    "text": "code to pass around immutable arrays if i can uh simply because um",
    "start": "1990880",
    "end": "1996799"
  },
  {
    "text": "it's really obvious then to the developer that uh you know you shouldn't change this thing um although",
    "start": "1996799",
    "end": "2003360"
  },
  {
    "text": "oftentimes i'll just use a new i innumerable as well um depends on what it is depends on the",
    "start": "2003360",
    "end": "2009120"
  },
  {
    "text": "specific situation um so i i have a demo but i don't really think uh",
    "start": "2009120",
    "end": "2015120"
  },
  {
    "text": "it's there's nothing really that special about it but i will show it off anyways um",
    "start": "2015120",
    "end": "2021679"
  },
  {
    "text": "that you can take and create an immutable list here like this using this you know fairly not",
    "start": "2021919",
    "end": "2027120"
  },
  {
    "text": "great syntax but you know is what it is i usually just call as immutable array or to immutable array i should say",
    "start": "2027120",
    "end": "2033200"
  },
  {
    "text": "create the immutable list add something to that list which oh you get a new you get a new immutable list",
    "start": "2033200",
    "end": "2040320"
  },
  {
    "text": "out of this and then of course we write and realize that as we write those lists to the",
    "start": "2040320",
    "end": "2045360"
  },
  {
    "text": "console that uh the accounts of these lists are different because immutable list allows you to mutate",
    "start": "2045360",
    "end": "2052800"
  },
  {
    "text": "that list but not really right it's actually creating a new instance of a list which is really useful",
    "start": "2052800",
    "end": "2058480"
  },
  {
    "text": "that's it you've never seen that before sure most of us have experienced something along those lines but",
    "start": "2058480",
    "end": "2064000"
  },
  {
    "text": "uh it's useful and the system.collections.immutable has a ton of things like this that uh allow you to",
    "start": "2064000",
    "end": "2072240"
  },
  {
    "text": "create and manipulate collections in a way that guarantees that the copy",
    "start": "2072240",
    "end": "2077520"
  },
  {
    "text": "that you're working on cannot change lists dot read only is another or sorry",
    "start": "2077520",
    "end": "2084720"
  },
  {
    "text": "list dot as read only is another example of something that creates something that is an immutable list",
    "start": "2084720",
    "end": "2089919"
  },
  {
    "text": "but it's not necessarily as flexible you can't add things to it and get another copy of an array of a list from it so",
    "start": "2089919",
    "end": "2096480"
  },
  {
    "text": "not as flexible but still available to you as well let's talk about automapper",
    "start": "2096480",
    "end": "2102720"
  },
  {
    "start": "2100000",
    "end": "2228000"
  },
  {
    "text": "automapper is one of my favorite.net libraries for lots of reasons it keeps me from writing really boring code um",
    "start": "2102720",
    "end": "2108400"
  },
  {
    "text": "really boarding boring glue code so out of the box auto mapper supports",
    "start": "2108400",
    "end": "2113599"
  },
  {
    "text": "this thing where you can create something where if you're trying to map a person from an employee and that",
    "start": "2113599",
    "end": "2119920"
  },
  {
    "text": "person happens to be an immutable class it will just work out of the box as long as the property names are if as long as",
    "start": "2119920",
    "end": "2127839"
  },
  {
    "text": "the property names first name and last name in this case they do match the uh the object being created it will go",
    "start": "2127839",
    "end": "2134880"
  },
  {
    "text": "ahead and automatically wire that up and pass those in for you uh and now say for example you had",
    "start": "2134880",
    "end": "2140560"
  },
  {
    "text": "additional properties on this person class is a mutable person class uh that aren't available on the employee",
    "start": "2140560",
    "end": "2147040"
  },
  {
    "text": "class then you will not see those those properties won't be or sorry that constructor will blow up it won't work",
    "start": "2147040",
    "end": "2152720"
  },
  {
    "text": "in that case you can use something like construct using which allows you to specify hey if you have multiple",
    "start": "2152720",
    "end": "2158079"
  },
  {
    "text": "constructors or you have more data than the employee class has or whatever the case may be maybe the property names",
    "start": "2158079",
    "end": "2163680"
  },
  {
    "text": "differ you can just declare uh that person object like that directly",
    "start": "2163680",
    "end": "2169119"
  },
  {
    "text": "using the construct using while your map is uh being created",
    "start": "2169119",
    "end": "2174280"
  },
  {
    "text": "newtonsoft.json does the exact same thing if you give it a person a serialized object you get a person",
    "start": "2174280",
    "end": "2179760"
  },
  {
    "text": "object you want to serialize it it's an immutable object and you give it some json it will quote unquote just work",
    "start": "2179760",
    "end": "2185599"
  },
  {
    "text": "it's magic at least that's you know in theory as long as you're not missing properties in which case you know you'll get",
    "start": "2185599",
    "end": "2190960"
  },
  {
    "text": "exceptions thrown or in the case of having multiple constructors available on that person object uh you would",
    "start": "2190960",
    "end": "2197599"
  },
  {
    "text": "create a you would mark it with a json constructor attribute because it can only use one of those attributes and it",
    "start": "2197599",
    "end": "2203119"
  },
  {
    "text": "does or sorry one can only use one of those constructors it doesn't know which one to use so you have to opt into that specifically",
    "start": "2203119",
    "end": "2209200"
  },
  {
    "text": "and not just newtonsoft.json this is one of those things that held over from system.txt.json",
    "start": "2209200",
    "end": "2214320"
  },
  {
    "text": "uh lots of things changed between newtonsoft and system.txt uh jason some",
    "start": "2214320",
    "end": "2220320"
  },
  {
    "text": "for the better some for the worse um this is one that sort of that this makes this one makes good sense to me",
    "start": "2220320",
    "end": "2228640"
  },
  {
    "start": "2228000",
    "end": "2474000"
  },
  {
    "text": "let's talk about the builder pattern another great pattern for coupling a mutable configuration object with an",
    "start": "2228640",
    "end": "2233839"
  },
  {
    "text": "immutable final state this is one of my favorites and this is this is one of my favorite patterns um",
    "start": "2233839",
    "end": "2240320"
  },
  {
    "text": "that uh that i use uh frequently especially when i'm creating library methods for more complex projects",
    "start": "2240320",
    "end": "2246480"
  },
  {
    "text": "there's lots of there's i have customers that they they have a common library that's shared amongst multiple things does that",
    "start": "2246480",
    "end": "2253119"
  },
  {
    "text": "sound familiar it should sound familiar we probably have encountered that problem yesterday today you know that's",
    "start": "2253119",
    "end": "2258480"
  },
  {
    "text": "a pretty common one so what i'll do is i will use this builder pattern in order to allow them to",
    "start": "2258480",
    "end": "2264320"
  },
  {
    "text": "create the configuration that they need and then have its final state question from anonymous real quick is",
    "start": "2264320",
    "end": "2270400"
  },
  {
    "text": "there any way to make ef core read into immutable records the answer is yes and it is a little bit further on i will get",
    "start": "2270400",
    "end": "2276320"
  },
  {
    "text": "to that good question so uh db con so this is what the builder",
    "start": "2276320",
    "end": "2282240"
  },
  {
    "text": "pattern looks like so we have this db context this is what an entity framework does they have a db context options that",
    "start": "2282240",
    "end": "2288160"
  },
  {
    "text": "allows you that gives you a huge series of properties in order to configure your db context instance and you have",
    "start": "2288160",
    "end": "2294880"
  },
  {
    "text": "something where maybe get connection string or use connection pool or whatever the case may be",
    "start": "2294880",
    "end": "2300560"
  },
  {
    "text": "and then you have the you have the builder and then you have the the db context options this build method that",
    "start": "2300560",
    "end": "2306880"
  },
  {
    "text": "actually then creates the immutable copy of those options so this is what it looks like in",
    "start": "2306880",
    "end": "2312480"
  },
  {
    "text": "practice and i do this everywhere when i'm creating library methods this is the pattern that i use in order to ensure",
    "start": "2312480",
    "end": "2318640"
  },
  {
    "text": "immutability while this thing is executing imagine if in the middle of entity framework core you decided to",
    "start": "2318640",
    "end": "2325119"
  },
  {
    "text": "just change up and change the connection string uh to a different database uh there may be a reason that you would",
    "start": "2325119",
    "end": "2330800"
  },
  {
    "text": "want to allow that to happen but it's not allowed out of the box for good reason",
    "start": "2330800",
    "end": "2336640"
  },
  {
    "text": "so you build this options builder you build your you use this immutable uh you use this mutable object to configure",
    "start": "2336640",
    "end": "2344160"
  },
  {
    "text": "your db context instance and on the other end of that uh is db context options you get an immutable object with",
    "start": "2344160",
    "end": "2350880"
  },
  {
    "text": "no open setters so no junior developers like well i need to change this connection string to bump up the i have",
    "start": "2350880",
    "end": "2357520"
  },
  {
    "text": "no idea to bump up the connection the max connection pool in the middle of execution why i do you would ever do",
    "start": "2357520",
    "end": "2362800"
  },
  {
    "text": "that i wouldn't know but the point being that uh dbcontext entity framework core",
    "start": "2362800",
    "end": "2369040"
  },
  {
    "text": "doesn't want you to do this and you shouldn't do this there's a reason why they have this pattern and it's a really",
    "start": "2369040",
    "end": "2374720"
  },
  {
    "text": "powerful pattern especially if you're providing library uh things library methods or libraries to uh that uh that",
    "start": "2374720",
    "end": "2382480"
  },
  {
    "text": "button into asp.net core let them configure it ahead of time and then use it uh as they see fit but don't let them",
    "start": "2382480",
    "end": "2388800"
  },
  {
    "text": "change it and this is where we get into the part of the talk where we talk about the yin and the yang i mentioned earlier i",
    "start": "2388800",
    "end": "2395520"
  },
  {
    "text": "talked about c sharp at the beginning and said c sharp is my favorite language did i say it was my favorite language it",
    "start": "2395520",
    "end": "2400560"
  },
  {
    "text": "is my favorite language let's just go ahead and say it c sharp is my favorite language it is my baby i built a company",
    "start": "2400560",
    "end": "2405760"
  },
  {
    "text": "around it uh i built a company around the.net ecosystem and that has been amazing um and i have yes i learned f",
    "start": "2405760",
    "end": "2413280"
  },
  {
    "text": "sharp um in a really terrible way by the way that's kind of a funny story i um",
    "start": "2413280",
    "end": "2418880"
  },
  {
    "text": "decided to execute on this little side project years and years ago and i decided to use f sharp",
    "start": "2418880",
    "end": "2424400"
  },
  {
    "text": "uh as my language in order to learn f sharp that wasn't such a good idea a lot a lot of a lot of long nights uh trying to",
    "start": "2424400",
    "end": "2431280"
  },
  {
    "text": "make that work because i didn't know what i was doing but again getting back to c sharp and what it embraces that",
    "start": "2431280",
    "end": "2436960"
  },
  {
    "text": "c-sharp is built on the clr the clr was built with mutability by default most",
    "start": "2436960",
    "end": "2443520"
  },
  {
    "text": "things in c-sharp encourage you to be mutable by default",
    "start": "2443520",
    "end": "2450000"
  },
  {
    "text": "and that's where we get into this idea of this yin and yang this balancing act that we have to do i cannot possibly",
    "start": "2450000",
    "end": "2455280"
  },
  {
    "text": "declare everything that i interact with or everything that i have that i create for people i cannot possibly declare it",
    "start": "2455280",
    "end": "2461839"
  },
  {
    "text": "as mutable or immutable and feel good about that thing because at the end of the day it's",
    "start": "2461839",
    "end": "2468240"
  },
  {
    "text": "kind of like putting lipstick on a pig sure you can put lipstick on the pig does it make the pig any more beautiful",
    "start": "2468240",
    "end": "2474480"
  },
  {
    "start": "2474000",
    "end": "2810000"
  },
  {
    "text": "let's talk about it any framework this goes back to the question that was just asked a few minutes ago can you make ef",
    "start": "2474480",
    "end": "2479520"
  },
  {
    "text": "core read into immutable records and the answer is yes",
    "start": "2479520",
    "end": "2484880"
  },
  {
    "text": "you can and let's take a look at what that looks like entity framework really is a uh is a",
    "start": "2484880",
    "end": "2490960"
  },
  {
    "text": "language that really wants you to declare really boring classes that have getters and setters",
    "start": "2490960",
    "end": "2496240"
  },
  {
    "text": "which makes good sense and honestly makes good sense as a foil or as a complement to sql",
    "start": "2496240",
    "end": "2502800"
  },
  {
    "text": "because sql has mutable rows they have the data within those rows can change",
    "start": "2502800",
    "end": "2509359"
  },
  {
    "text": "now of course you can create you can make sql server be immutable you could even you know talk about event sourcing",
    "start": "2509359",
    "end": "2514800"
  },
  {
    "text": "if you so those uh but at the end of the day it's a good complement i want to change this row so i'm going to set this",
    "start": "2514800",
    "end": "2520240"
  },
  {
    "text": "property called safe changes async and you know be done with the whole thing",
    "start": "2520240",
    "end": "2525599"
  },
  {
    "text": "this is what it would look like i'm sorry i laugh because this is this",
    "start": "2525599",
    "end": "2530880"
  },
  {
    "text": "is it it looks so silly but this is what it looked like at least at one point",
    "start": "2530880",
    "end": "2537119"
  },
  {
    "text": "vanity framework six to use entity framework six with an immutable class you'd have to declare a",
    "start": "2537119",
    "end": "2543440"
  },
  {
    "text": "constructor that is the quote-unquote normal constructor that you would call and",
    "start": "2543440",
    "end": "2549119"
  },
  {
    "text": "you would have to create another constructor at the top and mark it as obsolete and make sure that when they used it by golly they better not use it",
    "start": "2549119",
    "end": "2556319"
  },
  {
    "text": "because you don't want them to use this um this constructor so you declare it as obsolete with the",
    "start": "2556319",
    "end": "2562079"
  },
  {
    "text": "yes throw a compiler uh error if uh if somebody tries to use this class so",
    "start": "2562079",
    "end": "2567520"
  },
  {
    "text": "already i can tell you that i hate it i i hate looking at this this",
    "start": "2567520",
    "end": "2573200"
  },
  {
    "text": "absolutely looks ridiculous and note that you have to declare uh fields and there's a reason that you have to",
    "start": "2573200",
    "end": "2578880"
  },
  {
    "text": "declare fields it's because when you call you're on model creating you know skipping all the other stuff if you have",
    "start": "2578880",
    "end": "2584720"
  },
  {
    "text": "your database db set of points now you have to go in and fill all the properties and make them use private",
    "start": "2584720",
    "end": "2591040"
  },
  {
    "text": "fields instead uh which it can do it absolutely an entity framework core can do this for",
    "start": "2591040",
    "end": "2596800"
  },
  {
    "text": "you but at the end of the day if you made all of your ef core classes immutable uh",
    "start": "2596800",
    "end": "2603839"
  },
  {
    "text": "and well first of all you'd have to think about how you would start to go to change them and then you have to think",
    "start": "2603839",
    "end": "2608960"
  },
  {
    "text": "about is it even worth doing to begin with i was actually i found a blog post which i uh really liked um",
    "start": "2608960",
    "end": "2616240"
  },
  {
    "text": "oh golly where'd it go um excuse me for a second um there was a",
    "start": "2616240",
    "end": "2623599"
  },
  {
    "text": "blog post this person did on um creating and i think there's you know if",
    "start": "2623599",
    "end": "2629119"
  },
  {
    "text": "you wanted to do something like this i'll just say that the option to do so is here for you uh this person and i",
    "start": "2629119",
    "end": "2635200"
  },
  {
    "text": "just googled it by talking about immutable entities in ef core but it talks a lot it talks a little bit",
    "start": "2635200",
    "end": "2641119"
  },
  {
    "text": "about domain driven design it talks a little bit about you know how to how you would declare it um",
    "start": "2641119",
    "end": "2646960"
  },
  {
    "text": "and what boilerplate frankly is required in order to make something like this work uh i didn't read through this blog",
    "start": "2646960",
    "end": "2653680"
  },
  {
    "text": "post uh entirely but apparently get atomic values is a thing where they you know you get an enumerable list of all",
    "start": "2653680",
    "end": "2660000"
  },
  {
    "text": "of the values of this particular set for probably what's a good reason and i assume that",
    "start": "2660000",
    "end": "2666720"
  },
  {
    "text": "this is this is looks like to be um basically how you would mutate that",
    "start": "2666720",
    "end": "2672240"
  },
  {
    "text": "object to begin with which is you'd close all the setters you declare the stuff that you'd want to declare as",
    "start": "2672240",
    "end": "2677359"
  },
  {
    "text": "private uh as private and then you'd go down here and you would see okay well",
    "start": "2677359",
    "end": "2682640"
  },
  {
    "text": "this is how i would add an item to this order this is how i would delete an item for this order and you know i think that if you really",
    "start": "2682640",
    "end": "2689280"
  },
  {
    "text": "wanted to make entity framework core uh work with immutability you probably could do that yet at the end of the day",
    "start": "2689280",
    "end": "2696079"
  },
  {
    "text": "you have to ask yourself why because at some point you're not making your job or anybody else's job any easier you're",
    "start": "2696079",
    "end": "2702560"
  },
  {
    "text": "just sort of making sort of fitting a square peg into a round hole right it's uh",
    "start": "2702560",
    "end": "2710640"
  },
  {
    "text": "it does it just you can just because you can do something doesn't mean that you should and again entity framework core is a great",
    "start": "2710640",
    "end": "2717280"
  },
  {
    "text": "example of something that really embraces mutability by default making it immutable technically possible but is it",
    "start": "2717280",
    "end": "2724240"
  },
  {
    "text": "worth doing and i would argue that it's not and that goes back to the balancing act question how do you balance",
    "start": "2724240",
    "end": "2730079"
  },
  {
    "text": "immutability with mutability uh inside of a language that really wants you to be mutable uh",
    "start": "2730079",
    "end": "2736880"
  },
  {
    "text": "and the ways that i do that are using the builder pattern using factory patterns to make sure that my services",
    "start": "2736880",
    "end": "2742000"
  },
  {
    "text": "using the factory pattern to make sure that my services that i'm creating don't mutate themselves as part unless they",
    "start": "2742000",
    "end": "2747440"
  },
  {
    "text": "really need to as part of what they do uh try to think what else if i have if",
    "start": "2747440",
    "end": "2754000"
  },
  {
    "text": "those services themselves typically if they're calling an api i will have them return uh immutable objects if i can um",
    "start": "2754000",
    "end": "2761839"
  },
  {
    "text": "especially now that record types are a thing inside of c sharp um that be that makes that a lot easier",
    "start": "2761839",
    "end": "2768400"
  },
  {
    "text": "um because at the end of the day we're developers and we have to be conscious of the fact that we're spending lots of",
    "start": "2768400",
    "end": "2774480"
  },
  {
    "text": "money that we're that our our work that we do is expensive and",
    "start": "2774480",
    "end": "2779680"
  },
  {
    "text": "just because we can make something immutable yes that is but is it worth the extra yes it is possible but is it worth the",
    "start": "2779680",
    "end": "2786800"
  },
  {
    "text": "extra time and money to do so oh and of course i'm in norway so we need to use this right",
    "start": "2786800",
    "end": "2793760"
  },
  {
    "text": "time is money and some things are just not worth taking the time to do and i would argue that",
    "start": "2795040",
    "end": "2800560"
  },
  {
    "text": "um mutability in many ways is a lot easier to accomplish and a lot easier to",
    "start": "2800560",
    "end": "2805839"
  },
  {
    "text": "get your job done than it is using immutability in something like c sharp",
    "start": "2805839",
    "end": "2811040"
  },
  {
    "start": "2810000",
    "end": "3098000"
  },
  {
    "text": "so my takeaways are is that because i live in a world of mutability by default i have to program defensively i",
    "start": "2811040",
    "end": "2818079"
  },
  {
    "text": "cannot assume that if i see an open setter or i see an object that is a poco i have to assume that at some point",
    "start": "2818079",
    "end": "2824160"
  },
  {
    "text": "somebody will want to change something about that object even if i don't want them to and this is where the manual",
    "start": "2824160",
    "end": "2830800"
  },
  {
    "text": "boring stuff comes in i wouldn't say it's boring but code reviews this is where code reviews come in to really",
    "start": "2830800",
    "end": "2836319"
  },
  {
    "text": "read each other's code to figure out what it is that this code is doing why it is that you needed to change this",
    "start": "2836319",
    "end": "2842319"
  },
  {
    "text": "particular thing or open this setter on this thing that was on the center that was previously closed",
    "start": "2842319",
    "end": "2847680"
  },
  {
    "text": "but programming defensively is really sort of a requirement right it's not like f sharp where",
    "start": "2847680",
    "end": "2853440"
  },
  {
    "text": "well i i'd say f sharp is kind of a bad example f sharp lives in a clr world so lots of use of f sharp uses",
    "start": "2853440",
    "end": "2860800"
  },
  {
    "text": "frameworks and libraries that are written in c sharp so naturally there's lots of mutability there's lots of times",
    "start": "2860800",
    "end": "2867200"
  },
  {
    "text": "that if you're using f sharp you're mutating objects anyways right but if you're using a purely functional programming language you can assume",
    "start": "2867200",
    "end": "2874000"
  },
  {
    "text": "safely for most in most cases that the state of that object isn't going to change whereas in c sharp we just don't",
    "start": "2874000",
    "end": "2880000"
  },
  {
    "text": "have that i mean a lot of this talk the point of this talk is to say that immutability is great and immutability",
    "start": "2880000",
    "end": "2885040"
  },
  {
    "text": "is powerful but it's like functional programming in anything else sprinkling it in pragmatically or sprinkling it in",
    "start": "2885040",
    "end": "2890880"
  },
  {
    "text": "where it makes sense is ultimately the the message that this",
    "start": "2890880",
    "end": "2896319"
  },
  {
    "text": "talk intends to send mutating sparingly um this is something that i mean unless i'm doing something",
    "start": "2896319",
    "end": "2903119"
  },
  {
    "text": "like um using entity framework core and mutate that all the time because i'm just most of the time a lot of what we",
    "start": "2903119",
    "end": "2909280"
  },
  {
    "text": "do is just changing records inside of a database so mutating sparingly becomes a",
    "start": "2909280",
    "end": "2914720"
  },
  {
    "text": "it becomes is this even possible uh the thing that i would say is that",
    "start": "2914720",
    "end": "2920240"
  },
  {
    "text": "for certain libraries it makes a lot of sense for other libraries it makes it for other libraries it makes no sense at",
    "start": "2920240",
    "end": "2926400"
  },
  {
    "text": "all to not make something mutable to make it immutable it doesn't make sense so",
    "start": "2926400",
    "end": "2932240"
  },
  {
    "text": "but there are things that you can do you know if you declare services um make them so that their their their",
    "start": "2932240",
    "end": "2938240"
  },
  {
    "text": "dependencies are immutable and i think the most of the c-sharp and net core examples uh asp.net core",
    "start": "2938240",
    "end": "2944720"
  },
  {
    "text": "specifically when you you know if you talk about a dependency injection most of the services that you that you declare are probably immutable with all",
    "start": "2944720",
    "end": "2951920"
  },
  {
    "text": "of their dependencies are immutable they're using private read-only properties on the back end keep doing those things and if you have services",
    "start": "2951920",
    "end": "2958400"
  },
  {
    "text": "with open setters you have to you have to start to wonder why those setters are open to begin with",
    "start": "2958400",
    "end": "2963920"
  },
  {
    "text": "it's much easier to reason about a service if you just close those setters off um yeah and then of course there's team",
    "start": "2963920",
    "end": "2971760"
  },
  {
    "text": "alignment you at the end of the day when you're making a decision to try to make parts",
    "start": "2971760",
    "end": "2977359"
  },
  {
    "text": "of your application parts of your c-sharp more functional or try to introduce mutability or immutability as",
    "start": "2977359",
    "end": "2984000"
  },
  {
    "text": "it were inside of your project you have to have alignment with your team to",
    "start": "2984000",
    "end": "2989520"
  },
  {
    "text": "understand the common goals what are we trying to accomplish uh if you're making this boring service that gets data from",
    "start": "2989520",
    "end": "2995040"
  },
  {
    "text": "something and you just want to make it immutable because you're only it's a read-only service it's a weather service and you know the weather's the weather",
    "start": "2995040",
    "end": "3001200"
  },
  {
    "text": "is going to change but you're not going to try to change the data that you get from that weather service to you know tweak it to make it warmer or colder or",
    "start": "3001200",
    "end": "3008240"
  },
  {
    "text": "change the weather you're just going to take that you're just going to take that data and uh do",
    "start": "3008240",
    "end": "3014079"
  },
  {
    "text": "something with it so it makes total sense to make the return call from that service to uh make it immutable because",
    "start": "3014079",
    "end": "3019760"
  },
  {
    "text": "it would make no sense for you to change it things like that are pretty commonplace and i don't think that you would um you",
    "start": "3019760",
    "end": "3025440"
  },
  {
    "text": "would get much pushback but if you suddenly came in and tried to make uh entity framework core every object",
    "start": "3025440",
    "end": "3031680"
  },
  {
    "text": "immutable uh especially if you're talking about a fairly large established project you're probably gonna get some",
    "start": "3031680",
    "end": "3037359"
  },
  {
    "text": "pushback if you shoehorn immutability immutability into net and sacrifice",
    "start": "3037359",
    "end": "3043440"
  },
  {
    "text": "readability or maintainability along the way you've really not improved your solution you've transferred the problem or made the problem worse you've made",
    "start": "3043440",
    "end": "3050160"
  },
  {
    "text": "the code less readable you've made uh the code more complicated to reason about we go back to reasoning it was it",
    "start": "3050160",
    "end": "3055839"
  },
  {
    "text": "is a lovely thing to look at an object know that it's not going to change and no knowing that it's not going to",
    "start": "3055839",
    "end": "3061920"
  },
  {
    "text": "change be able to reason really well going back to that twitter example i know that if i retweet something i never",
    "start": "3061920",
    "end": "3067680"
  },
  {
    "text": "have to worry about that tweet being edited to change the thought to maybe something that i don't believe right",
    "start": "3067680",
    "end": "3074880"
  },
  {
    "text": "that's a perfect that's a lovely thing to be in but at the end of the day i'll go back to csarpen.net and the clr in",
    "start": "3074880",
    "end": "3081599"
  },
  {
    "text": "general not really embracing that very well the libraries that are created do not really embrace immutability super super well so",
    "start": "3081599",
    "end": "3088640"
  },
  {
    "text": "you can sprinkle it in just like link and functional programming you can sprinkle it in where it makes sense but",
    "start": "3088640",
    "end": "3094400"
  },
  {
    "text": "at the end of the day there's lots of places where it simply just doesn't make sense to do and immutable thinking is really the the",
    "start": "3094400",
    "end": "3102079"
  },
  {
    "start": "3098000",
    "end": "3308000"
  },
  {
    "text": "immutable thinking is really the most the the most powerful takeaway it wasn't necessarily creating",
    "start": "3102079",
    "end": "3108559"
  },
  {
    "text": "you know creating now learning f-sharp and then now declaring all of my all of my types as immutable it had me more",
    "start": "3108559",
    "end": "3115599"
  },
  {
    "text": "thinking what i took away from functional programming was thinking more about the state of my program and it was",
    "start": "3115599",
    "end": "3121599"
  },
  {
    "text": "a mind-blowing thing when i kind of realized all the potential that um that",
    "start": "3121599",
    "end": "3128000"
  },
  {
    "text": "pragmatic functional programming and immutability could add to my application",
    "start": "3128000",
    "end": "3133119"
  },
  {
    "text": "persistent data structures are a beautiful thing a mutable list being an example something that you know is not",
    "start": "3133119",
    "end": "3138240"
  },
  {
    "text": "going to change but it's not always available everywhere redux is another uh is an example that's",
    "start": "3138240",
    "end": "3145280"
  },
  {
    "text": "outside of the c-sharp ecosystem if you're a react developer um you may have you might you probably have used redux",
    "start": "3145280",
    "end": "3151280"
  },
  {
    "text": "in some form one of the things one of its principles is that state doesn't get mutated it gets",
    "start": "3151280",
    "end": "3156880"
  },
  {
    "text": "updated but the state itself doesn't get mutated directly which enables so many great things like time travel debugging",
    "start": "3156880",
    "end": "3163920"
  },
  {
    "text": "if you're seeing how the state of your application application changed uh over time um or the state of your react",
    "start": "3163920",
    "end": "3171040"
  },
  {
    "text": "application changes over time and you're able to go back to a certain specific piece of state while you're debugging",
    "start": "3171040",
    "end": "3176160"
  },
  {
    "text": "your application that gives you a lot of power um undo redo becomes undo redo becomes",
    "start": "3176160",
    "end": "3182160"
  },
  {
    "text": "really easy uh when you build redux or when you when you have this idea that",
    "start": "3182160",
    "end": "3187520"
  },
  {
    "text": "state gets preserved between state updates you just create a new copy of state and you update that instead as",
    "start": "3187520",
    "end": "3194079"
  },
  {
    "text": "opposed to erasing the old state or overriding parts of that old state which is a really powerful concept i used this",
    "start": "3194079",
    "end": "3200240"
  },
  {
    "text": "to create a really slick interface a long time ago for a project that unfortunately was ultimately abandoned",
    "start": "3200240",
    "end": "3207119"
  },
  {
    "text": "and one of the things i took was like okay well i have to use angularjs for it uh but i learned from redux and i",
    "start": "3207119",
    "end": "3212880"
  },
  {
    "text": "decided to preserve my state um as i changed it as opposed to",
    "start": "3212880",
    "end": "3218000"
  },
  {
    "text": "um as opposed to uh you know trying to mutate it in place and what it enabled",
    "start": "3218000",
    "end": "3223359"
  },
  {
    "text": "was a really easy to create undo redo because all i'd have to do is take that previous state overwrite the old state",
    "start": "3223359",
    "end": "3230079"
  },
  {
    "text": "and boom i had undo and redo as it were and again at the end of the day um",
    "start": "3230079",
    "end": "3237680"
  },
  {
    "text": "maybe if i'm able to change your mind that would be great i would be i would if depending on the uh opinions that you",
    "start": "3237680",
    "end": "3243760"
  },
  {
    "text": "had about immutability um you know maybe i was able to change your mind a little bit about so or get you",
    "start": "3243760",
    "end": "3249520"
  },
  {
    "text": "thinking about certain things because at the end of the day even if we can't change the data in our data structures maybe",
    "start": "3249520",
    "end": "3255119"
  },
  {
    "text": "maybe we can change the world and uh that is the end i appreciate you",
    "start": "3255119",
    "end": "3260480"
  },
  {
    "text": "all being here uh i wish again that i could be there in person to uh to to see all of you beautiful norway i heard it",
    "start": "3260480",
    "end": "3266800"
  },
  {
    "text": "snowed uh which they had the first snow of the late part of the year which is amazing i wish i could have been there",
    "start": "3266800",
    "end": "3272720"
  },
  {
    "text": "to see it so uh you've been a great audience and uh i we have a few minutes left so if you're interested in staying",
    "start": "3272720",
    "end": "3278640"
  },
  {
    "text": "for questions i don't see any questions um or if you have any questions you can always slack me after the talk or email",
    "start": "3278640",
    "end": "3284400"
  },
  {
    "text": "me find me on twitter but otherwise i appreciate you've been a great audience thank you very much",
    "start": "3284400",
    "end": "3291799"
  },
  {
    "text": "i'm hearing your applause in my head because i the sound isn't coming through oh there it is i love it thank you very",
    "start": "3294000",
    "end": "3299680"
  },
  {
    "text": "much",
    "start": "3299680",
    "end": "3302680"
  },
  {
    "text": "you",
    "start": "3308799",
    "end": "3310880"
  }
]