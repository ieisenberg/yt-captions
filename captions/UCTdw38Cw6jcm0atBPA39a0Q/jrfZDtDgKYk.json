[
  {
    "text": "hello and uh welcome to this presentation what do you mean by cash friendly uh",
    "start": "11040",
    "end": "16320"
  },
  {
    "text": "i'm john fuller i do in stockholm i work for a net insight we make networking equipment",
    "start": "16320",
    "end": "22800"
  },
  {
    "text": "uh during this presentation if you want to leave your cams on that is okay but please mute",
    "start": "22800",
    "end": "28320"
  },
  {
    "text": "your microphone this presentation in many ways can be",
    "start": "28320",
    "end": "34880"
  },
  {
    "text": "said to have have its roots a few years ago or many years ago depending on how you",
    "start": "34880",
    "end": "41440"
  },
  {
    "text": "see it we we were in the late stages of developing a new",
    "start": "41440",
    "end": "47840"
  },
  {
    "text": "media switch uh it's a beefing machine bigger fpgas more fpgas bigger cpus",
    "start": "47840",
    "end": "54559"
  },
  {
    "text": "faster cpus more of them and in this late stage i was doing some uh",
    "start": "54559",
    "end": "61600"
  },
  {
    "text": "performance transmissions if we were sort of in the neighborhood of where we",
    "start": "61600",
    "end": "66960"
  },
  {
    "text": "wanted to be and the results were extremely disappointing",
    "start": "66960",
    "end": "72720"
  },
  {
    "text": "uh they were really really really bad so i started to try to figure out what where",
    "start": "72720",
    "end": "78640"
  },
  {
    "text": "is the execution time going so poor performance i",
    "start": "78640",
    "end": "86640"
  },
  {
    "text": "fairly soon found out that the uh the the main node controller cpu was",
    "start": "86640",
    "end": "92880"
  },
  {
    "text": "paid at 100 which didn't really make a heck of a lot of sense because in this kind of",
    "start": "92880",
    "end": "98840"
  },
  {
    "text": "scenario where we were changing the the network technology and adding and",
    "start": "98840",
    "end": "105920"
  },
  {
    "text": "removing the video streams continuously it the the node controller cpu is busy",
    "start": "105920",
    "end": "113680"
  },
  {
    "text": "really into changes meaning that it's passing messages basically and waiting",
    "start": "113680",
    "end": "119280"
  },
  {
    "text": "for responses so it should be limited by latency and not by cpus that was weird",
    "start": "119280",
    "end": "126479"
  },
  {
    "text": "and then i found that on on this cpu it was one control demon specifically that was",
    "start": "126479",
    "end": "132879"
  },
  {
    "text": "pegged and that is the one that is that is responsible for us specifically for message passing",
    "start": "132879",
    "end": "140640"
  },
  {
    "text": "and this was so weird i couldn't understand it so then i ran a uh profiling on it to",
    "start": "140640",
    "end": "147840"
  },
  {
    "text": "to see what's happening and what i see was that 75 of all cpu time was",
    "start": "147840",
    "end": "154160"
  },
  {
    "text": "spent in one function the function schedule timer i was like",
    "start": "154160",
    "end": "161200"
  },
  {
    "text": "what how is this possible this makes absolutely no sense so",
    "start": "161200",
    "end": "169439"
  },
  {
    "text": "uh i look like the code it looks like this it's an old c api i",
    "start": "169599",
    "end": "175680"
  },
  {
    "text": "have slightly sleep c plus classified it for this presentation and by the way what i'm",
    "start": "175680",
    "end": "182000"
  },
  {
    "text": "talking about today is not a sql plus topic at all it relates to any programming language where you",
    "start": "182000",
    "end": "188239"
  },
  {
    "text": "have some level of control over the layout of your data structures anyway we see a",
    "start": "188239",
    "end": "196640"
  },
  {
    "text": "start timer that has a deadline and a",
    "start": "196640",
    "end": "203680"
  },
  {
    "text": "callback function some user data and the previous next point so it's a linked list",
    "start": "203680",
    "end": "209519"
  },
  {
    "text": "and then we have this scheduled timer function where 75 percent of all cpu cycles went",
    "start": "209519",
    "end": "216159"
  },
  {
    "text": "because that when we want to add a new timer it traverses the list from the back towards the end to find",
    "start": "216159",
    "end": "222159"
  },
  {
    "text": "the insertion point and then it adds it and then there is a cancel timer which",
    "start": "222159",
    "end": "228080"
  },
  {
    "text": "is important because most timers actually are canceled they you set the calculus and the message",
    "start": "228080",
    "end": "234319"
  },
  {
    "text": "and you want to know if you get response which you typically do or if it times",
    "start": "234319",
    "end": "239519"
  },
  {
    "text": "out so when you get a response you cancel the timer because it's not needed anymore",
    "start": "239519",
    "end": "245760"
  },
  {
    "text": "and i'm guessing that most of you probably understand what the problem is here why",
    "start": "246799",
    "end": "253200"
  },
  {
    "text": "this was so slow so this presentation what do you mean by",
    "start": "253200",
    "end": "259919"
  },
  {
    "text": "kid friendly presentation that i wish that i had attended",
    "start": "259919",
    "end": "265680"
  },
  {
    "text": "all those many years ago the person who wrote that timer happened to me uh now in defense of",
    "start": "265680",
    "end": "272479"
  },
  {
    "text": "a younger me when i wrote that the system was much simpler much smaller there were a handful of",
    "start": "272479",
    "end": "279680"
  },
  {
    "text": "timers flying at any time and almost all timers were set equally",
    "start": "279680",
    "end": "286880"
  },
  {
    "text": "far into the future so adding a new timer was almost always just appending to the end",
    "start": "286880",
    "end": "293680"
  },
  {
    "text": "which meant you didn't have to search anything but now",
    "start": "293680",
    "end": "298960"
  },
  {
    "text": "in this stress test where i found that 75 of all the cpu cycles went into its scheduled timer in this stress test",
    "start": "298960",
    "end": "306639"
  },
  {
    "text": "situation i was hovering at 20 to 25 000 live timers",
    "start": "306639",
    "end": "313039"
  },
  {
    "text": "at any time and this is problematic",
    "start": "313039",
    "end": "318400"
  },
  {
    "text": "so let's have a look uh what i'm going to talk about today is",
    "start": "319039",
    "end": "327039"
  },
  {
    "text": "how to write code think about the effects having a cache without knowing",
    "start": "327039",
    "end": "333919"
  },
  {
    "text": "the specific details of the cache so if you were hoping to learn how to squeeze",
    "start": "333919",
    "end": "339600"
  },
  {
    "text": "every last cycle out of a known architecture sorry this is not that talk",
    "start": "339600",
    "end": "345680"
  },
  {
    "text": "so what i'm going to talk about is we refer to as cache oblivious data",
    "start": "346560",
    "end": "351840"
  },
  {
    "text": "structure or cache oblivious algorithm i strongly dislike that term",
    "start": "351840",
    "end": "357680"
  },
  {
    "text": "because it's not at all about being oblivious to having a cache it's about it being oblivious to the details",
    "start": "357680",
    "end": "363840"
  },
  {
    "text": "of its to write reasonably performance software",
    "start": "363840",
    "end": "371199"
  },
  {
    "text": "without knowing the exact details i i use this simplistic model view",
    "start": "371199",
    "end": "376240"
  },
  {
    "text": "of how the cache works the memory works uh this is a simplification but i think",
    "start": "376240",
    "end": "382319"
  },
  {
    "text": "it's a monster we see the main memory",
    "start": "382319",
    "end": "387680"
  },
  {
    "text": "all your ram it's huge and in the middle we see a cache one specific thing to note about the",
    "start": "387680",
    "end": "394240"
  },
  {
    "text": "cache is that it's it's small in this case it's ridiculously small there are four entries no cache of the world is that small",
    "start": "394240",
    "end": "402000"
  },
  {
    "text": "we can also see that both the main memory and the cache are divided into chunks of equal size",
    "start": "402000",
    "end": "409199"
  },
  {
    "text": "these are called cache lines and all reads and writes to main memory go",
    "start": "409199",
    "end": "414960"
  },
  {
    "text": "via the cache and always in full cache lines as they record",
    "start": "414960",
    "end": "421599"
  },
  {
    "text": "uh and you can see that they are aligned in this case i have chosen 16 bytes of alignment because it",
    "start": "421599",
    "end": "427520"
  },
  {
    "text": "just makes the slide easy in practice the de facto stand up today",
    "start": "427520",
    "end": "432560"
  },
  {
    "text": "is 64 bytes large cache lines and then to the left we have",
    "start": "432560",
    "end": "437840"
  },
  {
    "text": "a little bit of source code where we can see what happens when we execute",
    "start": "437840",
    "end": "444479"
  },
  {
    "text": "it so for example here if i want to read from the pointer named hot we see that",
    "start": "444479",
    "end": "450400"
  },
  {
    "text": "hot is 4004 hex and if we look into the cache we can see that 4004 hex is actually a",
    "start": "450400",
    "end": "456960"
  },
  {
    "text": "hit so it's there so this is a blazingly fast access just right away",
    "start": "456960",
    "end": "464400"
  },
  {
    "text": "uh almost no time but then we want to read from the pointer code code is 4048 hacks",
    "start": "464400",
    "end": "472960"
  },
  {
    "text": "which 4048 is supposed to be so what happens then is that the cpu",
    "start": "473360",
    "end": "480080"
  },
  {
    "text": "chooses some line in cache that it decides that we can sacrifice it",
    "start": "480080",
    "end": "487120"
  },
  {
    "text": "because to read something into the cache something must go out so in this case it through zero",
    "start": "487120",
    "end": "495759"
  },
  {
    "text": "and it's not evicted from the cache and now we can read from the main memory into the cache and this is slow",
    "start": "495759",
    "end": "503039"
  },
  {
    "text": "operation this is like a hundred times slower than reading directly from the cache itself",
    "start": "503039",
    "end": "508400"
  },
  {
    "text": "but now that the database in the cache we can do the read and it all looks fine",
    "start": "508400",
    "end": "514959"
  },
  {
    "text": "and then we want to write to this other pointer also called 4080 hex",
    "start": "515200",
    "end": "521599"
  },
  {
    "text": "48 is not in the cache either so it has to evict something to to be able to",
    "start": "521599",
    "end": "528000"
  },
  {
    "text": "to modify this memory out at 4080. so it chooses a cache line in this case",
    "start": "528720",
    "end": "534000"
  },
  {
    "text": "four one zero one four zero one zero and this white block here means",
    "start": "534000",
    "end": "539440"
  },
  {
    "text": "that the this cache line is dirty we have written something to it that has not yet been reflected into the main memory so",
    "start": "539440",
    "end": "550080"
  },
  {
    "text": "what it has to do then is first to write this into the main memory this is a slow operation",
    "start": "550560",
    "end": "557839"
  },
  {
    "text": "now that the memory the the changes have been stored we can evict this cache line choose the",
    "start": "557839",
    "end": "564080"
  },
  {
    "text": "one we want to to get and read it and now we can finally do our",
    "start": "564080",
    "end": "570640"
  },
  {
    "text": "modification and then we want to make another modification to just",
    "start": "570640",
    "end": "577200"
  },
  {
    "text": "the next address higher but now it is in cache so we just do the right now this cache line is dirty and at some",
    "start": "577200",
    "end": "584880"
  },
  {
    "text": "point in the future we cannot really know when it's going to be written",
    "start": "584880",
    "end": "590320"
  },
  {
    "text": "to to the main memory so this is a mental model i have of",
    "start": "590320",
    "end": "597120"
  },
  {
    "text": "how the cache works it's a simplification all models are wrong including this one but some models are",
    "start": "597120",
    "end": "603680"
  },
  {
    "text": "useful and i think this one is useful so it includes some important aspects for example that the cache is smaller",
    "start": "603680",
    "end": "610079"
  },
  {
    "text": "we don't know how small but it is more and it consists of fixed size lines i",
    "start": "610079",
    "end": "615120"
  },
  {
    "text": "mentioned that the de facto standard today seems to be 64 bytes",
    "start": "615120",
    "end": "621440"
  },
  {
    "text": "and data access that is a cache hit is really fast you don't that is",
    "start": "621839",
    "end": "629519"
  },
  {
    "text": "it for for free whereas a cache miss is slow can",
    "start": "629519",
    "end": "636160"
  },
  {
    "text": "the cpu can do theoretically a lot of work could do a lot of work",
    "start": "636160",
    "end": "641920"
  },
  {
    "text": "while waiting for a read from",
    "start": "641920",
    "end": "647250"
  },
  {
    "text": "[Music] it doesn't take care of the fact that in in the real world you usually have a",
    "start": "647250",
    "end": "652800"
  },
  {
    "text": "hierarchy occurs several levels you usually have a very small and very fast",
    "start": "652800",
    "end": "658399"
  },
  {
    "text": "level one cache that is local to to each cpu core if you have a multi-core cpu which you typically do",
    "start": "658399",
    "end": "665350"
  },
  {
    "text": "[Music] and it doesn't take into account associativity what what means with cash",
    "start": "665350",
    "end": "670720"
  },
  {
    "text": "associativity is uh any given address in in memory",
    "start": "670720",
    "end": "677680"
  },
  {
    "text": "can only map to a few of the entries in the cache it cannot map usually cannot map to to",
    "start": "677680",
    "end": "684800"
  },
  {
    "text": "all of the entries which means that for certain access patterns you can",
    "start": "684800",
    "end": "690480"
  },
  {
    "text": "run into a problem where it seems like the as if you were sort of wasting the",
    "start": "690480",
    "end": "696560"
  },
  {
    "text": "entire cache but in in essence you just have competition for a few entries in the cache for for all your",
    "start": "696560",
    "end": "703519"
  },
  {
    "text": "accesses and i'm not going there uh not in this presentation and i actually think",
    "start": "703519",
    "end": "709040"
  },
  {
    "text": "someone else should do that one because i'm not knowledgeable enough to be honest uh and",
    "start": "709040",
    "end": "714079"
  },
  {
    "text": "i'm not talking about threading uh threading makes things really difficult because when you",
    "start": "714079",
    "end": "719519"
  },
  {
    "text": "have a multi-cpu multi-core cpu and one thread running on one",
    "start": "719519",
    "end": "724959"
  },
  {
    "text": "core makes a right to the to the level one cache in on that cpu",
    "start": "724959",
    "end": "730800"
  },
  {
    "text": "core and then another thread running on another cpu",
    "start": "730800",
    "end": "735920"
  },
  {
    "text": "the other core wants to read that then that cache is not updated with a changed update so you have cache coherency",
    "start": "735920",
    "end": "742560"
  },
  {
    "text": "protocols to to ensure that the caches are appear to be",
    "start": "742560",
    "end": "748639"
  },
  {
    "text": "in sync and that takes time so the only advice i'm going to do about training is keep keep it to an absolute minimum",
    "start": "748639",
    "end": "756800"
  },
  {
    "text": "than the the communication between threads do do this as little as you can get away",
    "start": "756800",
    "end": "763600"
  },
  {
    "text": "with you you cannot reduce it totally but reduce it as much",
    "start": "763600",
    "end": "768959"
  },
  {
    "text": "as you possibly can you will gain performance from that so that is my",
    "start": "768959",
    "end": "774320"
  },
  {
    "text": "mental model of the cache so let's now go into [Music] analyzing this uh",
    "start": "774320",
    "end": "781920"
  },
  {
    "text": "this timer structure so what i've written here is a program that",
    "start": "781920",
    "end": "788240"
  },
  {
    "text": "is just intended to expose the cache behavior of the",
    "start": "788240",
    "end": "795120"
  },
  {
    "text": "of the timer i really don't want to call this a benchmark because they're running",
    "start": "795120",
    "end": "800399"
  },
  {
    "text": "a real benchmark it requires a heck of a lot more sophistication but this one is just",
    "start": "800399",
    "end": "805760"
  },
  {
    "text": "doing a lot of accesses so we can see where we have cache misses and cache hits",
    "start": "805760",
    "end": "811440"
  },
  {
    "text": "so i have a tight loop i'm scheduling a timer with some random time out time and a",
    "start": "811440",
    "end": "818639"
  },
  {
    "text": "do nothing call back at least for the compilers i have this is sufficiently",
    "start": "818639",
    "end": "824079"
  },
  {
    "text": "advanced that they cannot understand that i'm actually not doing anything",
    "start": "824079",
    "end": "829199"
  },
  {
    "text": "which is important that is one thing that is difficult when doing performance analysis pilots are",
    "start": "829199",
    "end": "835600"
  },
  {
    "text": "too clever for it for you and then every second revolution through the loop that cancels",
    "start": "835600",
    "end": "842000"
  },
  {
    "text": "the timer from the previous previous revolution just to be a little bit easier",
    "start": "842000",
    "end": "850160"
  },
  {
    "text": "with uh how i'm exercising the uh the data structure",
    "start": "850160",
    "end": "857600"
  },
  {
    "text": "uh which means that when you pass through this entire loop 20 000 times it will be 10 000 entries",
    "start": "857600",
    "end": "864160"
  },
  {
    "text": "remaining and then we just fire all the callbacks and doing so we just if the list is",
    "start": "864160",
    "end": "871440"
  },
  {
    "text": "empty then we return false otherwise we we call one call back uh cancel that",
    "start": "871440",
    "end": "878000"
  },
  {
    "text": "event and return true so the loop can continue until the list is empty",
    "start": "878000",
    "end": "884959"
  },
  {
    "text": "so one tool i like using for this sometimes like sometimes don't",
    "start": "884959",
    "end": "890560"
  },
  {
    "text": "like is walgreens most people know valgrind as a tool for",
    "start": "890560",
    "end": "896800"
  },
  {
    "text": "a finding memory problems uh memory access the use of the free and memory",
    "start": "896800",
    "end": "903040"
  },
  {
    "text": "leaks and such stuff but vagrant has a tool called call green",
    "start": "903040",
    "end": "908399"
  },
  {
    "text": "which is a cpu emulator that uh keeps track of where",
    "start": "908399",
    "end": "915440"
  },
  {
    "text": "where your execution is so it's essentially a kind of profiler for",
    "start": "915440",
    "end": "921680"
  },
  {
    "text": "every instruction it runs it notices uh how much time is spent how you got",
    "start": "921680",
    "end": "929199"
  },
  {
    "text": "there how the hierarchy looks it's not cycle accurate but it's it gives you a good idea but here's a",
    "start": "929199",
    "end": "937519"
  },
  {
    "text": "the thing then we add a cache simulator to it it also has a simplified cache it",
    "start": "937519",
    "end": "943199"
  },
  {
    "text": "doesn't try to model the the host cpu cache but you get by default you get a level one cache that",
    "start": "943199",
    "end": "949360"
  },
  {
    "text": "looks like your level one cache and then a last level cache that is bigger and slower a cool thing is",
    "start": "949360",
    "end": "957759"
  },
  {
    "text": "though is that you you can actually give it parameters to to change how you want the cache to look if",
    "start": "957759",
    "end": "963519"
  },
  {
    "text": "if it's important for you to do measurements on a cache architecture",
    "start": "963519",
    "end": "969360"
  },
  {
    "text": "that is different from the one on your host machine and then we tell it to dump instructions because by default",
    "start": "969360",
    "end": "976240"
  },
  {
    "text": "it saves information about source code lines and as it turns out this is usually not",
    "start": "976240",
    "end": "984320"
  },
  {
    "text": "quite enough to understand what is happening sometimes it is but often it isn't so i'm sorry there will be some reading of",
    "start": "984320",
    "end": "992079"
  },
  {
    "text": "x86 64 assembly here and then we add branch sim because we",
    "start": "992079",
    "end": "1000560"
  },
  {
    "text": "it it's often important to understand sort of what is happening with the branch predictor i will get to",
    "start": "1000560",
    "end": "1007120"
  },
  {
    "text": "why later in this presentation the downside of this is that it's",
    "start": "1007120",
    "end": "1013920"
  },
  {
    "text": "incredibly slow and a slowdown of 20 times is absolutely nothing unusual at all it can be",
    "start": "1013920",
    "end": "1020160"
  },
  {
    "text": "worse so that is a to think about but a good",
    "start": "1020160",
    "end": "1026720"
  },
  {
    "text": "thing also is that since it is a simulator it it's it simulates in isolation it is",
    "start": "1026720",
    "end": "1033918"
  },
  {
    "text": "the result it presents is unaffected by what else you're doing in the system",
    "start": "1033919",
    "end": "1040400"
  },
  {
    "text": "so let's let's go and run this one",
    "start": "1040400",
    "end": "1044319"
  },
  {
    "text": "so all right this and you may perhaps",
    "start": "1050840",
    "end": "1057600"
  },
  {
    "text": "notice that i'm using uh there's one and uh debugging for me this is",
    "start": "1057600",
    "end": "1065520"
  },
  {
    "text": "this is a difficult one it's a compromise [Music] i have found that in my experience and",
    "start": "1065520",
    "end": "1071840"
  },
  {
    "text": "this may be that i'm just lucky i don't know i found that",
    "start": "1071840",
    "end": "1077520"
  },
  {
    "text": "a one optimizes enough to get relevant data access patterns",
    "start": "1077520",
    "end": "1085600"
  },
  {
    "text": "unlike o0 which gets crazy results",
    "start": "1085600",
    "end": "1090720"
  },
  {
    "text": "and it's still low enough level of optimization that it's fairly easy to follow the code and",
    "start": "1090720",
    "end": "1097039"
  },
  {
    "text": "understand what is happening when you when you look at the assembly which which can be important so",
    "start": "1097039",
    "end": "1105600"
  },
  {
    "text": "let's run this one through morgan now as i mentioned this is an emulator",
    "start": "1107360",
    "end": "1113840"
  },
  {
    "text": "and it's super slow so what's happening is when you run this it's for every instruction that you run",
    "start": "1113840",
    "end": "1121200"
  },
  {
    "text": "it it remembers every uh",
    "start": "1121200",
    "end": "1126960"
  },
  {
    "text": "memory access did it hit their level one cache did it missed it the lost level cache didn't miss",
    "start": "1126960",
    "end": "1133360"
  },
  {
    "text": "where in the in the call chain is it so that you can see the see how you got there because in a",
    "start": "1133360",
    "end": "1140400"
  },
  {
    "text": "in any normal program you can of course get to a hotspot through",
    "start": "1140400",
    "end": "1145760"
  },
  {
    "text": "different paths through the code and it may just be one of them that is important",
    "start": "1145760",
    "end": "1151840"
  },
  {
    "text": "and this takes time and it's just intensive and if this was live and you were sitting in the front bench",
    "start": "1154000",
    "end": "1159679"
  },
  {
    "text": "you would hear how my laptop is now howling like a jet engine because it's",
    "start": "1159679",
    "end": "1164880"
  },
  {
    "text": "it's working really really hard but i hope we will get a result soon now",
    "start": "1164880",
    "end": "1171840"
  },
  {
    "text": "see",
    "start": "1176880",
    "end": "1179840"
  },
  {
    "text": "i swear this one goes slower when i when i present and when i'm preparing",
    "start": "1183600",
    "end": "1189840"
  },
  {
    "text": "maybe i should look at the slack and see if there are questions nope by the way i do use this slide for you",
    "start": "1189840",
    "end": "1197280"
  },
  {
    "text": "if there is anything uh so we can see a partial result already so two and a half",
    "start": "1197280",
    "end": "1204000"
  },
  {
    "text": "billion instructions one billion roughly data accesses 700 million",
    "start": "1204000",
    "end": "1211440"
  },
  {
    "text": "there are one misses so nearly 70 percent cash misses that is impressively bad",
    "start": "1211440",
    "end": "1217760"
  },
  {
    "text": "it's the different code that is that bad but here comes the the real thing uh",
    "start": "1217760",
    "end": "1227120"
  },
  {
    "text": "there is a tool in the this is a as far as i think it's uh limit specific",
    "start": "1227120",
    "end": "1232799"
  },
  {
    "text": "i'm not entirely sure k cash grind is a visualizer for these",
    "start": "1232799",
    "end": "1238240"
  },
  {
    "text": "this is amazing so what you can see for example it's a",
    "start": "1238240",
    "end": "1244080"
  },
  {
    "text": "call graph how how did we get to places there are hot spots uh in this case the program is so simple",
    "start": "1244080",
    "end": "1251679"
  },
  {
    "text": "that it's it's obvious what it is but in a slightly more advanced program",
    "start": "1251679",
    "end": "1257280"
  },
  {
    "text": "this really helps a lot and we can we can look at various different things",
    "start": "1257280",
    "end": "1263280"
  },
  {
    "text": "like where do we have branch prediction misses uh and such like",
    "start": "1263280",
    "end": "1271039"
  },
  {
    "text": "last level data real misses but but the one that is interesting now in this case is where do i have",
    "start": "1271039",
    "end": "1277280"
  },
  {
    "text": "level 1 misses and some is just that it sums both read misses and write misses",
    "start": "1277280",
    "end": "1284960"
  },
  {
    "text": "so what can we see ok schedule timer two",
    "start": "1285520",
    "end": "1292080"
  },
  {
    "text": "thirds in this loop and in the condition and one third in",
    "start": "1292080",
    "end": "1298880"
  },
  {
    "text": "getting the previous element okay that is interesting we can look at the machine code",
    "start": "1298880",
    "end": "1305840"
  },
  {
    "text": "okay so two-thirds when we compare a value we have in",
    "start": "1305919",
    "end": "1312400"
  },
  {
    "text": "register with something we read and an unsigned comparison if it's",
    "start": "1312400",
    "end": "1318400"
  },
  {
    "text": "after equal okay so this is the this is a is after function to check if",
    "start": "1318400",
    "end": "1324960"
  },
  {
    "text": "if we uh have reached the insertion point or not and then one third",
    "start": "1324960",
    "end": "1332799"
  },
  {
    "text": "when getting the the prep pointer okay so we have some information so",
    "start": "1332799",
    "end": "1339440"
  },
  {
    "text": "let's see if we can understand what this",
    "start": "1339440",
    "end": "1343279"
  },
  {
    "text": "means",
    "start": "1344840",
    "end": "1347840"
  },
  {
    "text": "and we have four bytes for for the deadline and then we have padding four bytes",
    "start": "1351840",
    "end": "1358240"
  },
  {
    "text": "because the next entry pointer must be aligned on a eight bytes",
    "start": "1358240",
    "end": "1363440"
  },
  {
    "text": "and then we have the the user pointer and the other points there's eight bar g so we have a total of 40 bytes",
    "start": "1363440",
    "end": "1370559"
  },
  {
    "text": "so why why did we get two-thirds of our cash misses",
    "start": "1370960",
    "end": "1376080"
  },
  {
    "text": "looking at the deadline well the thing is we get through we get to this timer by",
    "start": "1376080",
    "end": "1382720"
  },
  {
    "text": "following a pointer and if we assume",
    "start": "1382720",
    "end": "1388159"
  },
  {
    "text": "that the [Music] this entry is not in hot cache then we",
    "start": "1388159",
    "end": "1394000"
  },
  {
    "text": "must wait for this timer entry to be read from ram into the cache so that we can look at",
    "start": "1394000",
    "end": "1399440"
  },
  {
    "text": "the deadline and see if we want to go on so there is one rule of thumb",
    "start": "1399440",
    "end": "1406640"
  },
  {
    "text": "to begin with if you're traversing a data structure by following pointers assume that following a pointer is a",
    "start": "1406640",
    "end": "1412799"
  },
  {
    "text": "cache mix because there's it's really difficult for the cpu to predict",
    "start": "1412799",
    "end": "1418240"
  },
  {
    "text": "where where that pointer is going to point to so it's it's almost always a cache miss",
    "start": "1418240",
    "end": "1425919"
  },
  {
    "text": "unless you have very specific information to the contrary and then we have one third for the prep point and why is",
    "start": "1425919",
    "end": "1434720"
  },
  {
    "text": "that well if we look at this data structure we see that prev is",
    "start": "1434720",
    "end": "1440159"
  },
  {
    "text": "an offset of 32 from from the start of the of the timer and the cache lines are 64",
    "start": "1440159",
    "end": "1446880"
  },
  {
    "text": "bytes each so if we assume a random",
    "start": "1446880",
    "end": "1454240"
  },
  {
    "text": "ish alignment of a timer somewhere it starts somewhere in the cache line it's",
    "start": "1454240",
    "end": "1460240"
  },
  {
    "text": "roughly 50 chance that the prev pointer is on the same cache line and",
    "start": "1460240",
    "end": "1466080"
  },
  {
    "text": "that is not which leads to the next rule from the data that is",
    "start": "1466080",
    "end": "1473039"
  },
  {
    "text": "accessed together should be stored together so that if if you access one and maybe have a cache miss on that one then",
    "start": "1473039",
    "end": "1480240"
  },
  {
    "text": "accessing the next one will be a cache hit because you're not another cache miss because you have",
    "start": "1480240",
    "end": "1485360"
  },
  {
    "text": "already taken the penalty for the reader",
    "start": "1485360",
    "end": "1489039"
  },
  {
    "text": "so chasing pointers is expensive so can we can we do something that gets rid",
    "start": "1490720",
    "end": "1496880"
  },
  {
    "text": "of the pointers so one thing we can do is uh this is",
    "start": "1496880",
    "end": "1504080"
  },
  {
    "text": "actually patently stupid uh to be honest so we have a small struct",
    "start": "1504080",
    "end": "1509600"
  },
  {
    "text": "that just has a deadline a timer id i could get very soon to y the user pointer and the callback and we",
    "start": "1509600",
    "end": "1516960"
  },
  {
    "text": "just store them in a vector which is a linear structure so we can do our scheduled timer like",
    "start": "1516960",
    "end": "1524240"
  },
  {
    "text": "this we make room for the new entry and then we do an insertion sort of just move things",
    "start": "1524240",
    "end": "1530400"
  },
  {
    "text": "backwards until we find the insertion point and then we're done this is doing a tremendous amount of",
    "start": "1530400",
    "end": "1536080"
  },
  {
    "text": "work a lot of data copying",
    "start": "1536080",
    "end": "1540559"
  },
  {
    "text": "we're saving a little bit of memory since we don't have the two prevalent next pointers but we're doing a lot more work",
    "start": "1541520",
    "end": "1548159"
  },
  {
    "text": "shoveling data around [Music] cancel timer became more difficult now",
    "start": "1548159",
    "end": "1554000"
  },
  {
    "text": "because since the data is moving around in memory we we cannot cancel by having",
    "start": "1554000",
    "end": "1559279"
  },
  {
    "text": "a pointer that refers to the the timer entry that we want to get rid of",
    "start": "1559279",
    "end": "1564559"
  },
  {
    "text": "so we for every time we store a timer id and to cancel we just search for it",
    "start": "1564559",
    "end": "1570559"
  },
  {
    "text": "a linear search and then erase the entry which is also a linear",
    "start": "1570559",
    "end": "1578960"
  },
  {
    "text": "linear job so enter another tool perf perf comes with a linux distributor",
    "start": "1578960",
    "end": "1586320"
  },
  {
    "text": "you may need to install it as a separate package perf stat presents statistics from a",
    "start": "1586320",
    "end": "1593360"
  },
  {
    "text": "whole program run using counters from the hardware and the linux kernel",
    "start": "1593360",
    "end": "1598480"
  },
  {
    "text": "a disadvantage of this is of course that now you're looking at the real system so what other programs are running",
    "start": "1598480",
    "end": "1606320"
  },
  {
    "text": "on the machine does affect the result uh there are so many counters",
    "start": "1606320",
    "end": "1614720"
  },
  {
    "text": "that you can can look at from from perfect when searching for a cash-related issues i",
    "start": "1614720",
    "end": "1620159"
  },
  {
    "text": "usually use these so i'm looking at cycles and instructions",
    "start": "1620159",
    "end": "1625440"
  },
  {
    "text": "because those are a decent proxy for how busy the cpu is uh if the if the cpu does a lot of work it",
    "start": "1625440",
    "end": "1632640"
  },
  {
    "text": "can do several instructions per cycle if the cpu is spending a lot of time",
    "start": "1632640",
    "end": "1637679"
  },
  {
    "text": "waiting for memory accesses you have the exact opposite you have several cycles per instruction",
    "start": "1637679",
    "end": "1644080"
  },
  {
    "text": "and then i'm looking at n1 loads and l1 load misses",
    "start": "1644080",
    "end": "1650960"
  },
  {
    "text": "which sort of gives an idea of uh how efficient we are in terms of hitting",
    "start": "1650960",
    "end": "1656559"
  },
  {
    "text": "or missing the cache and speculative execution we'll get to that one that is uh",
    "start": "1656559",
    "end": "1661760"
  },
  {
    "text": "really interesting and this falls this is blazingly fast you have practically no overhead at all",
    "start": "1661760",
    "end": "1667279"
  },
  {
    "text": "so that is good then we can also use a perf record which does statistical",
    "start": "1667279",
    "end": "1674480"
  },
  {
    "text": "recording uh while the program is running so every now and then it does check points and see what are the",
    "start": "1674480",
    "end": "1680960"
  },
  {
    "text": "counters now and this makes sense because if you have a performance hotspot you're likely to",
    "start": "1680960",
    "end": "1686480"
  },
  {
    "text": "hit that point often a downside of that is that you have to interpret those",
    "start": "1686480",
    "end": "1692480"
  },
  {
    "text": "results a little bit carefully for you so for example you can find that you have a lot of cache misses on an instruction that doesn't touch memory",
    "start": "1692480",
    "end": "1698960"
  },
  {
    "text": "because it just happened to be on that instruction when it looked at the counters",
    "start": "1698960",
    "end": "1704080"
  },
  {
    "text": "and then you use the call graph by default you just see a flat view of which functions where you are",
    "start": "1704080",
    "end": "1710559"
  },
  {
    "text": "but it's if the program is non-trivial you really need to know",
    "start": "1710559",
    "end": "1716159"
  },
  {
    "text": "how did i get here because it may be one path that is critical and another another road to the same",
    "start": "1716159",
    "end": "1722640"
  },
  {
    "text": "function is not critical this is fast also very far not quite as",
    "start": "1722640",
    "end": "1728000"
  },
  {
    "text": "fast as perth start but it's it's fast let's",
    "start": "1728000",
    "end": "1734720"
  },
  {
    "text": "try and now i have to actually look into another machine because",
    "start": "1734720",
    "end": "1740159"
  },
  {
    "text": "as i said the getting measurements now are affected by what's happening on",
    "start": "1740159",
    "end": "1745919"
  },
  {
    "text": "the machine and this video conference system definitely wrecks havoc with all kinds of measurements",
    "start": "1745919",
    "end": "1752559"
  },
  {
    "text": "so let's try this one first",
    "start": "1752559",
    "end": "1767840"
  },
  {
    "text": "okay slightly faster than what we saw with baldwin i think",
    "start": "1810480",
    "end": "1817840"
  },
  {
    "text": "but oh this was a you know right let's do",
    "start": "1817840",
    "end": "1824159"
  },
  {
    "text": "the linked list here",
    "start": "1824159",
    "end": "1837840"
  },
  {
    "text": "so 3.4 seconds compared to just over a minute for foreign so it's it's a lot faster but we",
    "start": "1847360",
    "end": "1852640"
  },
  {
    "text": "get the same results and we see that this linear array",
    "start": "1852640",
    "end": "1859519"
  },
  {
    "text": "it's doing a lot more work many 700 almost 8 billion instructions compared to 2 and a half",
    "start": "1860080",
    "end": "1866640"
  },
  {
    "text": "and many more memory loads but it's still faster a lot faster that",
    "start": "1866640",
    "end": "1872720"
  },
  {
    "text": "is interesting [Music] so let's do a record",
    "start": "1872720",
    "end": "1880880"
  },
  {
    "text": "now here's where things become pretty unimpressive um",
    "start": "1880880",
    "end": "1888158"
  },
  {
    "text": "perth tools perfect report to show you what's happening it's not quite as impressive as",
    "start": "1888559",
    "end": "1894320"
  },
  {
    "text": "uh k cash grind is ko k caller but it does give you information",
    "start": "1894320",
    "end": "1901919"
  },
  {
    "text": "so we can look at where do we have",
    "start": "1901919",
    "end": "1905440"
  },
  {
    "text": "okay vector erase move schedule timer",
    "start": "1907519",
    "end": "1915760"
  },
  {
    "text": "uh okay we can see compare and jump after equal to this when searching",
    "start": "1916880",
    "end": "1922159"
  },
  {
    "text": "for the deadline and then moving the data around yeah so",
    "start": "1922159",
    "end": "1927200"
  },
  {
    "text": "it makes sense that we have cache misses there yeah",
    "start": "1927200",
    "end": "1931039"
  },
  {
    "text": "and cancel timer this is",
    "start": "1932840",
    "end": "1940398"
  },
  {
    "text": "defined if yeah so",
    "start": "1940799",
    "end": "1948399"
  },
  {
    "text": "not quite as impressive but we see definitely a lot of in memo and uh",
    "start": "1948399",
    "end": "1955279"
  },
  {
    "text": "vector arrays okay so what can we make",
    "start": "1955279",
    "end": "1963840"
  },
  {
    "text": "one thing i asked on twitter this um what surprised you with the most when you learned about cpu cars and i think",
    "start": "1964159",
    "end": "1970000"
  },
  {
    "text": "you know knight it just nailed it doing more work can be faster than doing less and this",
    "start": "1970000",
    "end": "1976640"
  },
  {
    "text": "that i just showed you this is doing so much more work with so many more instructions and a lot",
    "start": "1976640",
    "end": "1983120"
  },
  {
    "text": "faster this can be very counter-intuitive the",
    "start": "1983120",
    "end": "1988240"
  },
  {
    "text": "the reason here for this being so fast is one that everything is in one contiguous block of",
    "start": "1988240",
    "end": "1994559"
  },
  {
    "text": "memory and the the cpu has a prefetch so when you start accessing memory with a fixed stride in",
    "start": "1994559",
    "end": "2003039"
  },
  {
    "text": "terms of addresses the the cpu very soon goes uh",
    "start": "2003039",
    "end": "2008240"
  },
  {
    "text": "i know i know where you're going i bet you're going to read this address too so it starts loading it",
    "start": "2008240",
    "end": "2013519"
  },
  {
    "text": "in advance so when you get to actually wanted to do the read it's already in there so and then you don't get a cache miss",
    "start": "2013519",
    "end": "2022320"
  },
  {
    "text": "so that is what's happening here but we also saw that we spent a lot of",
    "start": "2022320",
    "end": "2028000"
  },
  {
    "text": "time doing this these linear searches so maybe we should try a binary search like i said",
    "start": "2028000",
    "end": "2035360"
  },
  {
    "text": "i there is a lot of data so 10 000 elements it's a lot",
    "start": "2035360",
    "end": "2042240"
  },
  {
    "text": "we can try a binary so this is a this is fairly easy the store",
    "start": "2042240",
    "end": "2047919"
  },
  {
    "text": "is already sorted in timeout order so it's just a",
    "start": "2047919",
    "end": "2053118"
  },
  {
    "text": "matter of how how we search for it so schedule time we can use the lower lower bound function from the standard",
    "start": "2053119",
    "end": "2059040"
  },
  {
    "text": "library this does a binary search to find the insertion point and then we do the insertion this is a",
    "start": "2059040",
    "end": "2064878"
  },
  {
    "text": "linear operation there so maybe we're not gaining much we'll see",
    "start": "2064879",
    "end": "2070560"
  },
  {
    "text": "and cancel time is the same we we search for an equal range it can be several",
    "start": "2070639",
    "end": "2076158"
  },
  {
    "text": "timers with the same deadline so we search for an equal range",
    "start": "2076159",
    "end": "2082320"
  },
  {
    "text": "and then we search for the timer id in this range so this this should be reasonably fast and then",
    "start": "2082320",
    "end": "2088079"
  },
  {
    "text": "we do a linear uh erase after when we have found it",
    "start": "2088079",
    "end": "2094000"
  },
  {
    "text": "like so so let's let's have a look at this one this can be interesting",
    "start": "2094079",
    "end": "2103200"
  },
  {
    "text": "so let's look at the research we have this structure we have",
    "start": "2103200",
    "end": "2111200"
  },
  {
    "text": "the vectors our schedule timer function exactly like i showed you cancel timer",
    "start": "2111200",
    "end": "2118480"
  },
  {
    "text": "and everything so",
    "start": "2118480",
    "end": "2131838"
  },
  {
    "text": "so let's let's linear array thing first just as a comparison and then",
    "start": "2132240",
    "end": "2139440"
  },
  {
    "text": "binary search okay so it's faster nearly about twice as fast so this is",
    "start": "2140640",
    "end": "2147520"
  },
  {
    "text": "good uh we see yeah cycle's obviously lower instructions much lower good uh",
    "start": "2147520",
    "end": "2155520"
  },
  {
    "text": "loads a lot lower good load miss is somewhat lower lower but wait a minute",
    "start": "2155520",
    "end": "2164640"
  },
  {
    "text": "103.5 cash misses",
    "start": "2167240",
    "end": "2172400"
  },
  {
    "text": "you may be excused for being a little bit surprised by this i certainly was um what this is is",
    "start": "2172400",
    "end": "2179200"
  },
  {
    "text": "actually the the specter of vulnerability that was all the ranger a couple of years ago",
    "start": "2179200",
    "end": "2184880"
  },
  {
    "text": "so what's happening is that these the cpu does speculative execution so when it comes",
    "start": "2184880",
    "end": "2190560"
  },
  {
    "text": "to a conditional branch and if the condition is not yet",
    "start": "2190560",
    "end": "2196640"
  },
  {
    "text": "computed it doesn't know which way to go it it will take a chance it's a i think the",
    "start": "2196640",
    "end": "2201839"
  },
  {
    "text": "result will be true and it follows the true branch and if what you do there is uh",
    "start": "2201839",
    "end": "2210240"
  },
  {
    "text": "some kind of memory access and that is a cache miss it will evict something from the cache and it will initiate the",
    "start": "2210240",
    "end": "2216560"
  },
  {
    "text": "read from from memory into the cache but then it figures out that no my guess was wrong sorry we shouldn't",
    "start": "2216560",
    "end": "2222960"
  },
  {
    "text": "have taken the true brush we should have taken the false browser it throws away the results so the the memory read doesn't count it",
    "start": "2222960",
    "end": "2230640"
  },
  {
    "text": "it never landed it doesn't count but the cache miss does count therefore you can get this really",
    "start": "2230640",
    "end": "2236400"
  },
  {
    "text": "surprising result with or above 100 cache miss",
    "start": "2236400",
    "end": "2243839"
  },
  {
    "text": "and have a look at the details of this one",
    "start": "2246800",
    "end": "2254160"
  },
  {
    "text": "see where we have there's misses and it's still primarily on moon schedule timer",
    "start": "2255040",
    "end": "2262800"
  },
  {
    "text": "doesn't really say anything doesn't provide any information bummer um",
    "start": "2262800",
    "end": "2270000"
  },
  {
    "text": "cancel timer information all right look first",
    "start": "2270000",
    "end": "2277359"
  },
  {
    "text": "uh no information and that is simple that is a problem we",
    "start": "2278079",
    "end": "2284960"
  },
  {
    "text": "we're not really helped by the tools we have to go to our own reasoning here and try to figure out",
    "start": "2284960",
    "end": "2290400"
  },
  {
    "text": "we definitely see that we spend 98 percent our cpu cycles during the moves so that is a hint",
    "start": "2290400",
    "end": "2299280"
  },
  {
    "text": "so going back to here we can see yeah the searches aren't visible we're",
    "start": "2299280",
    "end": "2304960"
  },
  {
    "text": "not getting information but we see that [Music] reads are down cash misses are still",
    "start": "2304960",
    "end": "2310320"
  },
  {
    "text": "kind of high but it doesn't really matter and move totally dominates everything",
    "start": "2310320",
    "end": "2315359"
  },
  {
    "text": "so what we should do now is obviously to write much faster memory or not it's it's actually pretty darn",
    "start": "2315359",
    "end": "2323440"
  },
  {
    "text": "fast so the thing is why do we do so much moves",
    "start": "2323440",
    "end": "2330000"
  },
  {
    "text": "and like i mentioned failed branch predictions can lead to very confusing results",
    "start": "2331680",
    "end": "2337200"
  },
  {
    "text": "because the you can still evict cache entries so just be aware of that one",
    "start": "2337200",
    "end": "2344320"
  },
  {
    "text": "triple try map it it's really super popular to hate on map read these days because it's node based it's",
    "start": "2344320",
    "end": "2351040"
  },
  {
    "text": "pointed chasing it's everything we don't want in our cache efficient structure",
    "start": "2351040",
    "end": "2356640"
  },
  {
    "text": "but we don't get moves and memos dominate so maybe we should try it",
    "start": "2356640",
    "end": "2363280"
  },
  {
    "text": "so this is a super simple implementation we have a retirement data is really just our",
    "start": "2363280",
    "end": "2369040"
  },
  {
    "text": "pointers and we use a multi-map because we can have several timeouts with the same deadline and our timer identifier is",
    "start": "2369040",
    "end": "2376960"
  },
  {
    "text": "just the iterator so schedule timer just inserts we return the iterator and cancer timer just erases so",
    "start": "2376960",
    "end": "2384079"
  },
  {
    "text": "it's super simple and should first it's uh",
    "start": "2384079",
    "end": "2389280"
  },
  {
    "text": "if if it's empty we return forwards otherwise we take the first entry shoots it and return true and then we can",
    "start": "2389280",
    "end": "2394560"
  },
  {
    "text": "go on so let's have a look",
    "start": "2394560",
    "end": "2399040"
  },
  {
    "text": "we have this app thing with uh basically trivial",
    "start": "2401760",
    "end": "2408880"
  },
  {
    "text": "implementation",
    "start": "2408880",
    "end": "2411838"
  },
  {
    "text": "so let's see where we are compared to that one what do you think about map",
    "start": "2418480",
    "end": "2425440"
  },
  {
    "text": "dude that let's see well",
    "start": "2425440",
    "end": "2432480"
  },
  {
    "text": "okay so are the people who hate maps wrong what is this um",
    "start": "2432480",
    "end": "2440079"
  },
  {
    "text": "actually this is too little to to give us any information to speak of so let's make this",
    "start": "2440079",
    "end": "2448319"
  },
  {
    "text": "one a little bit bigger do we do more revolutions",
    "start": "2448319",
    "end": "2454078"
  },
  {
    "text": "so now we cannot do not compare the numbers really but we see",
    "start": "2459280",
    "end": "2465599"
  },
  {
    "text": "um fairly high amount of misses and cash misses and branch misses",
    "start": "2465599",
    "end": "2472960"
  },
  {
    "text": "if we end up with this now if we",
    "start": "2476480",
    "end": "2481838"
  },
  {
    "text": "perfect port says on load messages",
    "start": "2484400",
    "end": "2489599"
  },
  {
    "text": "okay received b3 so yeah the stud map is implemented as a red",
    "start": "2491359",
    "end": "2497440"
  },
  {
    "text": "black tree so it needs to do balancing operations so we have a",
    "start": "2497440",
    "end": "2502640"
  },
  {
    "text": "fair amount of misses there and yes it's there what's what's the issue with schedule with them",
    "start": "2502640",
    "end": "2509520"
  },
  {
    "text": "oh boy we are in in the standard library now that um okay",
    "start": "2510400",
    "end": "2518160"
  },
  {
    "text": "we get some help from giving source information here m key compare we see that we",
    "start": "2518160",
    "end": "2525359"
  },
  {
    "text": "load a memory with an offset of 20 hex with a value we have an ecx",
    "start": "2525359",
    "end": "2532319"
  },
  {
    "text": "compare and an unsigned greater the greater or equal conditional",
    "start": "2532319",
    "end": "2540240"
  },
  {
    "text": "broad so yeah okay so this is this is when trying to find the the",
    "start": "2540240",
    "end": "2545760"
  },
  {
    "text": "timeout time to find the entry to insert before",
    "start": "2545760",
    "end": "2552319"
  },
  {
    "text": "okay that is what we have not",
    "start": "2552319",
    "end": "2560480"
  },
  {
    "text": "very much more to tell you about that actually so it falls it's actually a little bit",
    "start": "2560480",
    "end": "2566560"
  },
  {
    "text": "faster but a lot of cache misses when comparing keys and rebound english well one of the easiest",
    "start": "2566560",
    "end": "2573680"
  },
  {
    "text": "of rebalancing the tree is doing more work than we need to do because it keeps",
    "start": "2573680",
    "end": "2581440"
  },
  {
    "text": "a whole global sort order of everything and we don't really need that",
    "start": "2581440",
    "end": "2587519"
  },
  {
    "text": "there was a question on the slack here about uh v tune uh i personally have not used it",
    "start": "2590160",
    "end": "2597599"
  },
  {
    "text": "but uh yeah i i should mention that some alternative tools the v tune by intel is a is popular tool",
    "start": "2597599",
    "end": "2606720"
  },
  {
    "text": "i i don't have enough experience of it myself to be able to say how good or bad",
    "start": "2606720",
    "end": "2613200"
  },
  {
    "text": "it is but there is definitely one and the amd has a tool called",
    "start": "2613200",
    "end": "2620000"
  },
  {
    "text": "you prof if i remember correctly i think it's not like a micro profiling or something such i have",
    "start": "2620000",
    "end": "2626319"
  },
  {
    "text": "never used it at all so i have no experience there i was told about a mac specific tool but",
    "start": "2626319",
    "end": "2633599"
  },
  {
    "text": "i have i have presentation brain and i don't remember it sorry",
    "start": "2633599",
    "end": "2638640"
  },
  {
    "text": "uh i can probably uh post it later when i figure out what it what it is um",
    "start": "2638640",
    "end": "2646720"
  },
  {
    "text": "but yeah um so what we see here is yeah chasing",
    "start": "2646720",
    "end": "2653760"
  },
  {
    "text": "pointers that causes cache misses that's just how things are",
    "start": "2653760",
    "end": "2660079"
  },
  {
    "text": "but it's still faster isn't it i mean a lot faster but let's have a look at the the size of the data structure i'm running up with uh",
    "start": "2661440",
    "end": "2668800"
  },
  {
    "text": "an average of around 5000 elements up to one up to 10 000 here and if we look at the",
    "start": "2668800",
    "end": "2675520"
  },
  {
    "text": "these times we see that yeah for for these number of elements it's fast but if we look at the low end",
    "start": "2675520",
    "end": "2680960"
  },
  {
    "text": "we see yeah i'm not so sure so i did some",
    "start": "2680960",
    "end": "2686880"
  },
  {
    "text": "normalization as i compared to the linear search in a in a vector",
    "start": "2686880",
    "end": "2692480"
  },
  {
    "text": "so one is having the exact same performance as a linear search in the vector higher is slower and",
    "start": "2692480",
    "end": "2700160"
  },
  {
    "text": "lower is faster and we see that linear search in the vector rules up until",
    "start": "2700160",
    "end": "2707920"
  },
  {
    "text": "200 to 500 elements after that the the binary search or the or the map",
    "start": "2707920",
    "end": "2714560"
  },
  {
    "text": "wins so now you have to think for yourself in when in the data structures you",
    "start": "2714560",
    "end": "2720720"
  },
  {
    "text": "you write how much data do you have is is it more than several hundred",
    "start": "2720720",
    "end": "2727760"
  },
  {
    "text": "elements or is it actually like 20 30 so that that is a factor to to",
    "start": "2727760",
    "end": "2733040"
  },
  {
    "text": "think about but when you have a lot of elements then yes algorithm",
    "start": "2733040",
    "end": "2738319"
  },
  {
    "text": "algorithmic complexity does matter but you can still think about cache efficiency",
    "start": "2738319",
    "end": "2743680"
  },
  {
    "text": "in that algorithm in that level of complexity you choose",
    "start": "2743680",
    "end": "2750480"
  },
  {
    "text": "so that is one thing to think about so with that said can we get login",
    "start": "2751359",
    "end": "2758079"
  },
  {
    "text": "lookup without chasing pointers because that should be faster it really should be",
    "start": "2758079",
    "end": "2763359"
  },
  {
    "text": "to enter one of my absolute favorite data structures the the heap by which i don't mean the the",
    "start": "2763359",
    "end": "2769920"
  },
  {
    "text": "free store uh it's a heap data structure they it looks like this it's a trio this is partially balanced",
    "start": "2769920",
    "end": "2779119"
  },
  {
    "text": "partially sorted perfectly balanced tree uh where every node is sorted the same",
    "start": "2779119",
    "end": "2785920"
  },
  {
    "text": "as or after it's parent so and there",
    "start": "2785920",
    "end": "2792640"
  },
  {
    "text": "there's no relation between siblings so it's not a complete sort order and there is at most one node that has",
    "start": "2792640",
    "end": "2800000"
  },
  {
    "text": "only one child and that child is the last node so here is an example of uh of a heap",
    "start": "2800000",
    "end": "2807119"
  },
  {
    "text": "and the way we do insertion in it is we create room for for the new element",
    "start": "2807119",
    "end": "2812319"
  },
  {
    "text": "but then we don't look at the the parent of that hole and see if it's",
    "start": "2812319",
    "end": "2819200"
  },
  {
    "text": "if it's sorted after the element we want to to insert we trickle it down and we repeat this",
    "start": "2819280",
    "end": "2824560"
  },
  {
    "text": "until we find the insertion point and then we do our entry so to insert",
    "start": "2824560",
    "end": "2829680"
  },
  {
    "text": "seven here we create room we see that ten is greater than seven so we we move it down eight is still greater",
    "start": "2829680",
    "end": "2836960"
  },
  {
    "text": "so we move it down three is not greater so we do our insertion",
    "start": "2836960",
    "end": "2842400"
  },
  {
    "text": "so this is good and to to pop elements from it we we just remove the top element we",
    "start": "2842400",
    "end": "2849119"
  },
  {
    "text": "trickle up the lesser child and then we move insert",
    "start": "2849119",
    "end": "2854480"
  },
  {
    "text": "in into the the hole that was created so here remove three the lesser child is five so",
    "start": "2854480",
    "end": "2860480"
  },
  {
    "text": "we move it up unless a child is six so we move it up and the lesser child is nine so we move",
    "start": "2860480",
    "end": "2866880"
  },
  {
    "text": "it up and then we take the last element that is ten and move it in into the free spot and",
    "start": "2866880",
    "end": "2872559"
  },
  {
    "text": "now it could have been the term had actually been the number there was actually less than",
    "start": "2872559",
    "end": "2878079"
  },
  {
    "text": "nine so we should then have triggered that value up",
    "start": "2878079",
    "end": "2883280"
  },
  {
    "text": "an interesting property this is if we give each node an index we start with one at the",
    "start": "2884800",
    "end": "2890480"
  },
  {
    "text": "root and it's children two and three and then there are children and so on so we can see an interesting",
    "start": "2890480",
    "end": "2897599"
  },
  {
    "text": "property that the index of a parent node is half the node's index",
    "start": "2897599",
    "end": "2902960"
  },
  {
    "text": "so the for example the index index five that the number with 10",
    "start": "2902960",
    "end": "2909520"
  },
  {
    "text": "its parent is two because five divided by two rounded down is to",
    "start": "2909520",
    "end": "2915599"
  },
  {
    "text": "which means that we can represent this data structure in a contiguous story just array",
    "start": "2917520",
    "end": "2923920"
  },
  {
    "text": "indexing which means that we can arithmetically calculate",
    "start": "2923920",
    "end": "2929280"
  },
  {
    "text": "where we want to go instead of having to wait for an address to get a pointer so that we can read",
    "start": "2929280",
    "end": "2935040"
  },
  {
    "text": "where to go and since the cpu does out of order in computation it can actually go somewhere",
    "start": "2935040",
    "end": "2941599"
  },
  {
    "text": "before it knows whether it needs to or not it's it's not quite the same thing as the the the prefetcher but",
    "start": "2941599",
    "end": "2948000"
  },
  {
    "text": "the the cpu can do its thing and we can calculate the address",
    "start": "2948000",
    "end": "2955040"
  },
  {
    "text": "load it so that when you know that you want to go there it's already done but the heap is not",
    "start": "2955040",
    "end": "2962400"
  },
  {
    "text": "searchable so how do i handle cancellation in this one in a fast way we don't want to do a",
    "start": "2962400",
    "end": "2968640"
  },
  {
    "text": "linear search so one thing we can do is we can actually split the data structure we can have a store",
    "start": "2968640",
    "end": "2974079"
  },
  {
    "text": "of of actions which is the the callback and user pointer and we have the the",
    "start": "2974079",
    "end": "2980800"
  },
  {
    "text": "heap which just contains the the deadline and an index into the",
    "start": "2980800",
    "end": "2985920"
  },
  {
    "text": "action storage so that we can find which action belongs",
    "start": "2985920",
    "end": "2992240"
  },
  {
    "text": "to which this means that we now we have only eight bytes of data that we need to",
    "start": "2992240",
    "end": "2997680"
  },
  {
    "text": "move around to maintain the the heap structure",
    "start": "2997680",
    "end": "3003040"
  },
  {
    "text": "and the way we cancel is to to set the the callback to the remote pointer now the astute observer obviously",
    "start": "3003440",
    "end": "3010480"
  },
  {
    "text": "realizes that this means that cancellation doesn't shrink the structure which depending on your use case may or",
    "start": "3010480",
    "end": "3016720"
  },
  {
    "text": "may not be a problem but realize that this is now a log 2 data",
    "start": "3016720",
    "end": "3021839"
  },
  {
    "text": "structure so even doubling the amount of elements just means one more level",
    "start": "3021839",
    "end": "3028559"
  },
  {
    "text": "so i would say it's often not a problem but your usage may show different results",
    "start": "3028559",
    "end": "3036800"
  },
  {
    "text": "as it happens the priority queue actually exists the the heap exists in the civil library",
    "start": "3036800",
    "end": "3043040"
  },
  {
    "text": "uh under the name priority queue so we just use last one the scheduled",
    "start": "3043040",
    "end": "3048880"
  },
  {
    "text": "timer now stores stores a callback and use a point in the",
    "start": "3048880",
    "end": "3054400"
  },
  {
    "text": "action table and then we push onto the queue the deadline and the index should first becomes more advanced",
    "start": "3054400",
    "end": "3062960"
  },
  {
    "text": "because the top element may be canceled so we need to pop elements as long as the action",
    "start": "3062960",
    "end": "3068640"
  },
  {
    "text": "callback is not and then we can do the desired work so let's have a look at",
    "start": "3068640",
    "end": "3075280"
  },
  {
    "text": "this one",
    "start": "3075280",
    "end": "3083839"
  },
  {
    "text": "okay so [Music] somewhat fewer instructions",
    "start": "3094839",
    "end": "3102640"
  },
  {
    "text": "somewhat fewer loads of half the number of load misses that is good",
    "start": "3102640",
    "end": "3108400"
  },
  {
    "text": "and roughly twice as fast okay that is impressive",
    "start": "3108400",
    "end": "3114559"
  },
  {
    "text": "so let's try to analyze this a little bit more",
    "start": "3120880",
    "end": "3125839"
  },
  {
    "text": "anyway this is first adjust heap push heap okay so this",
    "start": "3129520",
    "end": "3137040"
  },
  {
    "text": "is these comparisons and to move into place",
    "start": "3137040",
    "end": "3142960"
  },
  {
    "text": "we can look more carefully uh yeah the move of data",
    "start": "3142960",
    "end": "3148079"
  },
  {
    "text": "obviously we get cash missus there uh same",
    "start": "3148079",
    "end": "3153300"
  },
  {
    "text": "[Music] here i presume yeah we're comparing the",
    "start": "3153300",
    "end": "3158559"
  },
  {
    "text": "element where to go with things just shoot",
    "start": "3158559",
    "end": "3165359"
  },
  {
    "text": "first itself [Music] okay not very much information in that",
    "start": "3165359",
    "end": "3173119"
  },
  {
    "text": "one i think um not a lot of value in",
    "start": "3173119",
    "end": "3178640"
  },
  {
    "text": "this one so kind of hard to tell but now we're actually that we can see",
    "start": "3178640",
    "end": "3185359"
  },
  {
    "text": "that the uh random number is gonna beginning to",
    "start": "3185359",
    "end": "3190400"
  },
  {
    "text": "be invisible so this is not bad",
    "start": "3190400",
    "end": "3195838"
  },
  {
    "text": "a lot fewer everything and just about twice as fast so this is of course good and if we look again at the execution",
    "start": "3201520",
    "end": "3208720"
  },
  {
    "text": "time we see that for large data sets it's uh a lot faster",
    "start": "3208720",
    "end": "3214240"
  },
  {
    "text": "a lot since we're not doing the um pointer chasing and we're not doing any",
    "start": "3214240",
    "end": "3219440"
  },
  {
    "text": "rebalancing and such stuff but again looking at the relative times so",
    "start": "3219440",
    "end": "3225040"
  },
  {
    "text": "the the blue curve is where the the heap performs relative to the",
    "start": "3225040",
    "end": "3231680"
  },
  {
    "text": "linear search in an array and we still see that you need more than 100 elements for for",
    "start": "3231680",
    "end": "3236800"
  },
  {
    "text": "this to to matter and we see that since the red line is flooded",
    "start": "3236800",
    "end": "3243040"
  },
  {
    "text": "the red line is how the heap compares to the map and it's consistently better than the map",
    "start": "3243040",
    "end": "3249440"
  },
  {
    "text": "and we have we see that we have the same algorithmic complexity since it's a flat line at roughly",
    "start": "3249440",
    "end": "3254880"
  },
  {
    "text": "zero point eight so error still cache means it's in the",
    "start": "3254880",
    "end": "3262000"
  },
  {
    "text": "adjust heap functions and i cannot help like when we can can we actually do better than this",
    "start": "3262000",
    "end": "3268559"
  },
  {
    "text": "so if we look at our our heap here and we try to look at how the catalyze fit",
    "start": "3268559",
    "end": "3275920"
  },
  {
    "text": "if we have one color for each cache line we can see how how it gets divided and as we move",
    "start": "3275920",
    "end": "3283040"
  },
  {
    "text": "through the heap we can see a problem that except for the root node root few nodes we get",
    "start": "3283040",
    "end": "3292079"
  },
  {
    "text": "one new clash line for every um every generation so this is not very",
    "start": "3292079",
    "end": "3298480"
  },
  {
    "text": "efficient so so i couldn't help thinking cody better can we can we do something like this so",
    "start": "3298480",
    "end": "3304839"
  },
  {
    "text": "let's let's makes a bunch of mini heaps where each mini heap",
    "start": "3304839",
    "end": "3310000"
  },
  {
    "text": "fits in the one cache line and then we build a heap of mini heaps",
    "start": "3310000",
    "end": "3316559"
  },
  {
    "text": "it turns out that this data structure has of course been invented before it's called a b heap i did not know that but it feels",
    "start": "3316559",
    "end": "3322880"
  },
  {
    "text": "good to know that it has a name so therefore it is useful probably and if we go through here we can see",
    "start": "3322880",
    "end": "3329359"
  },
  {
    "text": "that now we get three generations for every cache line this is good this really should get a better result",
    "start": "3329359",
    "end": "3336240"
  },
  {
    "text": "but it comes out at a cost because the the structure becomes now a little bit more tricky we have we have our",
    "start": "3336240",
    "end": "3342880"
  },
  {
    "text": "array for a mini heap and i choose to just waste index zero because yeah",
    "start": "3342880",
    "end": "3349760"
  },
  {
    "text": "it consumes a little bit more memory but then the i just do bit masking to to get to the",
    "start": "3349760",
    "end": "3356000"
  },
  {
    "text": "information i want and then we'll have the next mini heap and the next mini heap and the next mini heap and this means",
    "start": "3356000",
    "end": "3361440"
  },
  {
    "text": "our big heap of mini heaps has a crazy low gate fan out in terms of cash lines",
    "start": "3361440",
    "end": "3369200"
  },
  {
    "text": "so this this should be good but the logic becomes",
    "start": "3369200",
    "end": "3375119"
  },
  {
    "text": "very complicated to say at least so we can we can just mask and see if what is the",
    "start": "3375359",
    "end": "3380720"
  },
  {
    "text": "offset or into a mini heap of any arbitrary index into our array",
    "start": "3380720",
    "end": "3385920"
  },
  {
    "text": "uh find if something is a base or a where the base is if we can ask if it is",
    "start": "3385920",
    "end": "3393040"
  },
  {
    "text": "a block root because this this matters when traveling up to towards the root of the entire",
    "start": "3393040",
    "end": "3398640"
  },
  {
    "text": "so if it's the block root when we just do a local divide by two and if it is the if it is",
    "start": "3398640",
    "end": "3405599"
  },
  {
    "text": "a block group then the parent is uh the log eight calculations which is uh quite terrifying to be honest uh and the",
    "start": "3405599",
    "end": "3412960"
  },
  {
    "text": "same for block leaf when going towards uh the bottom of the leap",
    "start": "3412960",
    "end": "3419920"
  },
  {
    "text": "so the the logic will look like this so if it is uh if it is a leaf we do one",
    "start": "3419920",
    "end": "3426079"
  },
  {
    "text": "thing otherwise we we do the simple thing and the same when going towards a parent to",
    "start": "3426079",
    "end": "3433599"
  },
  {
    "text": "towards the root uh if it's not a block root it's a trivial otherwise it's much more",
    "start": "3433599",
    "end": "3439520"
  },
  {
    "text": "involved and this is all for naught if we don't make",
    "start": "3439520",
    "end": "3445200"
  },
  {
    "text": "sure that our storage is aligned properly so i wrote a an align allocator where i give a an",
    "start": "3445200",
    "end": "3452799"
  },
  {
    "text": "alignment in this case 64 since this happens to be the the defacto standard of cache line sizes",
    "start": "3452799",
    "end": "3460480"
  },
  {
    "text": "and i'm using ctrl 70 where we have a line while t and uh aligned operator",
    "start": "3460480",
    "end": "3467520"
  },
  {
    "text": "new and delete so this became fairly straightforward code and let's have a look at this one",
    "start": "3467520",
    "end": "3475838"
  },
  {
    "text": "oh well the other day all this really terrible code",
    "start": "3482640",
    "end": "3491359"
  },
  {
    "text": "this is complex and this is also me just being completely obsessed by this problem",
    "start": "3491839",
    "end": "3497280"
  },
  {
    "text": "it would have been perfectly adequate to to not do all this",
    "start": "3497280",
    "end": "3503839"
  },
  {
    "text": "so let's compare the hip and the bee heap hey slower ah bad",
    "start": "3506960",
    "end": "3515200"
  },
  {
    "text": "but this is a one let's let's have a look at the o3",
    "start": "3515200",
    "end": "3531760"
  },
  {
    "text": "and the heap for comparison it's ah slightly faster actually they",
    "start": "3531760",
    "end": "3537040"
  },
  {
    "text": "are more or less equal but what's interesting really interesting is this the normal heap 120 million",
    "start": "3537040",
    "end": "3544799"
  },
  {
    "text": "l1 misses this one has a 84 million or misses and in this case this actually",
    "start": "3544799",
    "end": "3550160"
  },
  {
    "text": "matters because it's a it's a timer structure the system does something schedules the",
    "start": "3550160",
    "end": "3555200"
  },
  {
    "text": "time it does something schedules another time does something fires a timer and the fewer entries we evict the more",
    "start": "3555200",
    "end": "3561920"
  },
  {
    "text": "the data is still in hot cache for the rest of the program and by this i will finish",
    "start": "3561920",
    "end": "3568559"
  },
  {
    "text": "so what i mean with cad friendly is small data for small data sets linear",
    "start": "3568559",
    "end": "3573839"
  },
  {
    "text": "search and contiguous memory is the fastest period the the question is just how small is small less than 100 i would say",
    "start": "3573839",
    "end": "3580799"
  },
  {
    "text": "go for linear search avoid pointer chasing keep your working data set small use as",
    "start": "3580799",
    "end": "3586720"
  },
  {
    "text": "much of a cash entry as you can if you have taken the penalty of missing a reading something and",
    "start": "3586720",
    "end": "3592079"
  },
  {
    "text": "evicting an entry from account make use of it and fewer evicted cash lines means more data than hot cash for the rest of",
    "start": "3592079",
    "end": "3598000"
  },
  {
    "text": "the program a mispredicted branches can evict cache entries spectre and measure because it's really",
    "start": "3598000",
    "end": "3605440"
  },
  {
    "text": "difficult otherwise some resources you may want to read i'm not going to repeat them and here is how",
    "start": "3605440",
    "end": "3611280"
  },
  {
    "text": "you can contact me and where you can find the presentation and also the sources thank you",
    "start": "3611280",
    "end": "3617280"
  },
  {
    "text": "sorry i filled the entire spot and only had time for one question but feel free to use the slacker or so",
    "start": "3617280",
    "end": "3625440"
  },
  {
    "text": "thank you very much",
    "start": "3625440",
    "end": "3629838"
  }
]