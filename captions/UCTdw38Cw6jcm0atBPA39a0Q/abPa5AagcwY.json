[
  {
    "text": "Hey look it's that time it's 1:40 also known as nap",
    "start": "9000",
    "end": "15600"
  },
  {
    "text": "time everyone got lunch I hope I",
    "start": "15600",
    "end": "22519"
  },
  {
    "text": "didn't then I'd be the one falling asleep up here um so um I don't have any",
    "start": "22519",
    "end": "28760"
  },
  {
    "text": "slides so I'm just going to have to say out loud I'm M Tuson I am the lead designer of CP and I am going to tell",
    "start": "28760",
    "end": "35239"
  },
  {
    "text": "you nothing about what's happening next in C today I will do that tomorrow um",
    "start": "35239",
    "end": "43640"
  },
  {
    "text": "but today is all about the past um you some people may have",
    "start": "43640",
    "end": "50520"
  },
  {
    "text": "noticed um or heard in with various kind of emotions attached to it that um C has",
    "start": "50520",
    "end": "58039"
  },
  {
    "text": "adapted a lot of features from functional programming since it started um and some of the emotions might have",
    "start": "58039",
    "end": "64239"
  },
  {
    "text": "been oh that's lovely or now I don't understand CP anymore or they're stealing everything from FP um but",
    "start": "64239",
    "end": "71479"
  },
  {
    "text": "either way it's true um we are it's certainly true that we've added a lot of functional features over the years and",
    "start": "71479",
    "end": "77560"
  },
  {
    "text": "it's not just because it's cool though it is also because it's cool um bit of stolen Glory you know but um because",
    "start": "77560",
    "end": "85119"
  },
  {
    "text": "there really are there really are important differences to how object-oriented",
    "start": "85119",
    "end": "92479"
  },
  {
    "text": "programming which is where C started out and functional programming uh handle various things like there are certain",
    "start": "92479",
    "end": "97920"
  },
  {
    "text": "topics where they're just fundamentally different and where they can supplement each other really well they have",
    "start": "97920",
    "end": "103640"
  },
  {
    "text": "different strengths and weaknesses and so if we can bring them together in the same language in a tasteful way then we",
    "start": "103640",
    "end": "111240"
  },
  {
    "text": "kind of uh we can kind of get the best of both worlds and that's that's sort of like the longterm intention at least so",
    "start": "111240",
    "end": "118240"
  },
  {
    "text": "this is kind of like so today's going to be just like I'm just going to edit codee for the whole hour I will talk while I do it so it will be a little",
    "start": "118240",
    "end": "124600"
  },
  {
    "text": "less boring um and take you through so there's sort of like two stories unfolding in parallel one is sort of",
    "start": "124600",
    "end": "131360"
  },
  {
    "text": "like a a selected highlights of C's Evolution for the first 10 versions or",
    "start": "131360",
    "end": "136480"
  },
  {
    "text": "so uh and the other one is um trying to hit some of those major",
    "start": "136480",
    "end": "141959"
  },
  {
    "text": "themes where object or and functional programming have different viewpoints and try to try to see if I can elucidate",
    "start": "141959",
    "end": "149680"
  },
  {
    "text": "those philosophies and how uh they come to bear on what how C Shar can be used",
    "start": "149680",
    "end": "155280"
  },
  {
    "text": "what it what it can be good for okay so that's that's the intent you should feel free to shout questions along the way if",
    "start": "155280",
    "end": "161720"
  },
  {
    "text": "you see something that is interesting um and that you want to ask about uh don't",
    "start": "161720",
    "end": "168080"
  },
  {
    "text": "wait till the end because that code will be gone by then this code will will change a lot and in particular get",
    "start": "168080",
    "end": "174159"
  },
  {
    "text": "shorter and shorter until there's almost nothing left because that's what functional programs look like and then",
    "start": "174159",
    "end": "179319"
  },
  {
    "text": "um but but also um yeah it will be gone from my head so shout questions if I feel like we get too far behind then I",
    "start": "179319",
    "end": "186519"
  },
  {
    "text": "will I will stop you and and put you off but uh for later but",
    "start": "186519",
    "end": "192480"
  },
  {
    "text": "um I'm very happy to answer questions also after the talk and I'm actually going to go just down the stairs and",
    "start": "192480",
    "end": "199440"
  },
  {
    "text": "hang out at the Microsoft Booth uh right after the talk um for as long as you",
    "start": "199440",
    "end": "204879"
  },
  {
    "text": "keep coming um so there's no rush um and and and um you know some questions you",
    "start": "204879",
    "end": "211319"
  },
  {
    "text": "might not want to answer them in public or ask them in public or you know whatever just come talk to me if you",
    "start": "211319",
    "end": "216400"
  },
  {
    "text": "want to I'm going to do the same after my talk tomorrow except I won't go down the stairs because it's never mind um so",
    "start": "216400",
    "end": "223439"
  },
  {
    "text": "so with that um I think that kind of sets it up and neatly I I do want to",
    "start": "223439",
    "end": "228519"
  },
  {
    "text": "sometimes I say this at the end but I do want to say at the beginning just because I might forget I'm not intending to say that c",
    "start": "228519",
    "end": "235560"
  },
  {
    "text": "is becoming a functional programming language there there's there a certain C",
    "start": "235560",
    "end": "241120"
  },
  {
    "text": "is at its core and object on a programming language okay it's just trying to be really good at functional programming also but if you're going to",
    "start": "241120",
    "end": "246760"
  },
  {
    "text": "get the full feel of being in a functional programming language you can do it in a in a functional programming",
    "start": "246760",
    "end": "252200"
  },
  {
    "text": "language it's different it still feels different um there sort of like core philosophies where one side wins out or",
    "start": "252200",
    "end": "258440"
  },
  {
    "text": "the other one is the default so I really encourage people especially if this kind of wets your appetite today go try f for",
    "start": "258440",
    "end": "265479"
  },
  {
    "text": "instance the the thing about FP is that where C tries to be an optic programming language that's really good",
    "start": "265479",
    "end": "271479"
  },
  {
    "text": "at functional programming f is the exact opposite right it's it's a functional programming language that is trying to",
    "start": "271479",
    "end": "277160"
  },
  {
    "text": "be really good at opar programming so it has really good facilities for opar programming and that thus the two",
    "start": "277160",
    "end": "282680"
  },
  {
    "text": "languages can interrupt really well under that so that's a if you have time and you haven't done so yet play with f",
    "start": "282680",
    "end": "288320"
  },
  {
    "text": "and get that kind of functional kick um and but today we're not going to talk that much about F uh we're GNA talk",
    "start": "288320",
    "end": "295000"
  },
  {
    "text": "about C and this is sort I don't know how many people were around when C first",
    "start": "295000",
    "end": "303520"
  },
  {
    "text": "came out yes yes welcome you should all be like",
    "start": "303520",
    "end": "310400"
  },
  {
    "text": "given special seats and and um gifts yeah retirements maybe",
    "start": "310400",
    "end": "321600"
  },
  {
    "text": "um yes um so here is a here's here's a",
    "start": "321840",
    "end": "327360"
  },
  {
    "text": "little program written in C one and actually can't take this anymore I I can't do it so I'm immediately going to",
    "start": "327360",
    "end": "333680"
  },
  {
    "text": "cheat and use some later features that don't matter to the story they have nothing to do with functional",
    "start": "333680",
    "end": "339120"
  },
  {
    "text": "programming I just want my program to fit on a screen okay so I'm going to go and and um and do the um oh yeah I'm GNA",
    "start": "339120",
    "end": "349000"
  },
  {
    "text": "put some emojis in my code that's great okay uh where is it there we go see here",
    "start": "349000",
    "end": "356840"
  },
  {
    "text": "we have refactorings I'm going to convert to top level statements right because that's just",
    "start": "356840",
    "end": "363120"
  },
  {
    "text": "nicer it is actually a little like many many functional programming languages feel a bit more like this but it doesn't",
    "start": "363120",
    "end": "369280"
  },
  {
    "text": "have anything to do with a paradigm I think but so just ignore that you can you can uh gloss over that difference",
    "start": "369280",
    "end": "375360"
  },
  {
    "text": "but other than that this is c one code um and the if you think about the sort",
    "start": "375360",
    "end": "381720"
  },
  {
    "text": "of bread and butter of functional programming is functions fun functions",
    "start": "381720",
    "end": "387280"
  },
  {
    "text": "aren't just like methods that declare their first class values in functional programming is a big part of how you do",
    "start": "387280",
    "end": "393240"
  },
  {
    "text": "abstraction if you want to iterate over a list and do something with it you do it by passing a function for what you",
    "start": "393240",
    "end": "400800"
  },
  {
    "text": "want to do with it to another function and so on like if first class functions is everything and unlike other object on",
    "start": "400800",
    "end": "407400"
  },
  {
    "text": "programming languages at the time when C first came out it actually had a rudimentary notion of first class",
    "start": "407400",
    "end": "413880"
  },
  {
    "text": "functions it had delegate types so a delegate it's it's a type you have to",
    "start": "413880",
    "end": "419160"
  },
  {
    "text": "declare that uh describes functions of a certain shape and you can then use the delegate",
    "start": "419160",
    "end": "424840"
  },
  {
    "text": "type to say hey I want to take a predicate um and when you pass one you can then take some function that you",
    "start": "424840",
    "end": "431520"
  },
  {
    "text": "declared and you can um you can pass it in and it fits the delegate and everything's honor so we do actually",
    "start": "431520",
    "end": "437800"
  },
  {
    "text": "have first class functions in a not the most convenient form but in a rudimentary form that we're going to",
    "start": "437800",
    "end": "444080"
  },
  {
    "text": "built on over the years but other than that everything you see here is is functional is objectoriented",
    "start": "444080",
    "end": "450080"
  },
  {
    "text": "uh an imperative um so it's really only in C 2 that we get into this business um",
    "start": "450080",
    "end": "456240"
  },
  {
    "text": "uh C is among several programming languages around uh around the year 2000",
    "start": "456240",
    "end": "462800"
  },
  {
    "text": "that um is starting to investigate generics um and so we're gonna so the",
    "start": "462800",
    "end": "469360"
  },
  {
    "text": "first like big concept that we're going to talk about is polymorphism which means multiple forms",
    "start": "469360",
    "end": "476240"
  },
  {
    "text": "or multiple shapes or something now that refers to when you have some code that can work on more than one type you",
    "start": "476240",
    "end": "482440"
  },
  {
    "text": "don't have to write the code again and again per type but it can work on one type on all types um on many different",
    "start": "482440",
    "end": "488919"
  },
  {
    "text": "types and and they're they're kind of object oriented in functional programming have two different approaches to polymorphism um object",
    "start": "488919",
    "end": "496479"
  },
  {
    "text": "programming has this uh what what we would call subtype polymorphism which means that there's an is a relationship",
    "start": "496479",
    "end": "503800"
  },
  {
    "text": "between types and in C the types are all unified so that ultimately everything is an object and that means if I if I want",
    "start": "503800",
    "end": "512039"
  },
  {
    "text": "a collection that I can stick ins in I can just take an array list and stick",
    "start": "512039",
    "end": "517080"
  },
  {
    "text": "ins in because it can contain every kind of type so it can also contain inss",
    "start": "517080",
    "end": "523000"
  },
  {
    "text": "that's subtype polymorphism I'm for I'm essentially forgetting the type of the thing forget it it doesn't matter",
    "start": "523000",
    "end": "528399"
  },
  {
    "text": "everyone's welcome here which means I can mix different type types of things in the same collection which sometimes",
    "start": "528399",
    "end": "534959"
  },
  {
    "text": "is really what you want right um but it's also incon venient because that means anything can be in",
    "start": "534959",
    "end": "541480"
  },
  {
    "text": "there which means that when I take things out again I can't trust that it's necessarily in the type system doesn't",
    "start": "541480",
    "end": "547120"
  },
  {
    "text": "help me and I have to cast so can we uh so what can we do about that well in functional programming they do uh",
    "start": "547120",
    "end": "553800"
  },
  {
    "text": "polymorphism differently they have parametric polymorphism you know trust them to make everything about parameters",
    "start": "553800",
    "end": "559240"
  },
  {
    "text": "right essentially types are functions that take types or it can be functions right so you have list of int a generic",
    "start": "559240",
    "end": "567440"
  },
  {
    "text": "list is essentially like type level function takes a type and then it produces a type list event so that means",
    "start": "567440",
    "end": "575120"
  },
  {
    "text": "list is also polymorphic because it can be used with any type",
    "start": "575120",
    "end": "581600"
  },
  {
    "text": "but the resulting list can't be used for every type it's it doesn't forget the",
    "start": "581600",
    "end": "587360"
  },
  {
    "text": "type it remembers the type which means when you take things back out you know that everything that came in was an INT",
    "start": "587360",
    "end": "592720"
  },
  {
    "text": "we don't have to cast it we even get nice graying out of the cast here we can just directly grab things again so we",
    "start": "592720",
    "end": "598760"
  },
  {
    "text": "combined the two two forms of polymorphism in the same language and they supplement each other really well",
    "start": "598760",
    "end": "605279"
  },
  {
    "text": "um and if this is new to you you feel feel free to clap but it's this is um",
    "start": "605279",
    "end": "610920"
  },
  {
    "text": "this is two decades ago so maybe not okay um and it's not just that you you",
    "start": "610920",
    "end": "616120"
  },
  {
    "text": "get rid of the cast but it's really really useful that strong typing because now uh this list event this DST here it",
    "start": "616120",
    "end": "623680"
  },
  {
    "text": "can have strongly typed helper functions on it because now as a an object oriented objects you have methods but",
    "start": "623680",
    "end": "631399"
  },
  {
    "text": "these methods can now use the strong types to themselves be strongly typed so instead of me spending two lines",
    "start": "631399",
    "end": "637839"
  },
  {
    "text": "populating an array with the results here um I can just call a helper function to do it I can just say to",
    "start": "637839",
    "end": "643279"
  },
  {
    "text": "array okay much easier and all type safe now I can get rid of these two lines so",
    "start": "643279",
    "end": "649959"
  },
  {
    "text": "you know jic gets really helpful and um another thing is that so eras a sort of",
    "start": "649959",
    "end": "657959"
  },
  {
    "text": "hardwired into c one as as having strong element types but they're the only strongly typed",
    "start": "657959",
    "end": "663680"
  },
  {
    "text": "collection um you can have and therefore they they get used as exchange types a lot like you pass arrays around a lot",
    "start": "663680",
    "end": "670000"
  },
  {
    "text": "which is terrible like it's really really unsafe to pass arrays around right because who knows who's mutating",
    "start": "670000",
    "end": "677200"
  },
  {
    "text": "what when um you might be observing it but the one who passed it to you is mutating it or you pass it to two",
    "start": "677200",
    "end": "683320"
  },
  {
    "text": "different ones and they mutate and You observe it and they then you mutate it and they observe it some more and while",
    "start": "683320",
    "end": "688440"
  },
  {
    "text": "you're iterating the iterator blows up you know it's just bad but now we have our choice of a whole library of",
    "start": "688440",
    "end": "695839"
  },
  {
    "text": "collection types so we can for instance say inumerable becomes very popular maybe we should have given given it a",
    "start": "695839",
    "end": "701600"
  },
  {
    "text": "shorter name given how popular it is ah well in fshp they Alias it to seq",
    "start": "701600",
    "end": "709519"
  },
  {
    "text": "sequence um which uh is a better length for it I think",
    "start": "709519",
    "end": "715040"
  },
  {
    "text": "but um so now we can do we we can use that as the exchange type in instead as",
    "start": "715040",
    "end": "720480"
  },
  {
    "text": "long as we make sure to put it everywhere and that's certainly a better",
    "start": "720480",
    "end": "725680"
  },
  {
    "text": "uh a better type to pass around um and there are readon types and so on you can",
    "start": "725680",
    "end": "731000"
  },
  {
    "text": "use as well um so great we can use generics we can also of course declare",
    "start": "731000",
    "end": "736560"
  },
  {
    "text": "our own generic things we can declare generic types instead of having predicates just for INS we can once and",
    "start": "736560",
    "end": "741680"
  },
  {
    "text": "for all use parametric polymorphism uh AKA generics um to make",
    "start": "741680",
    "end": "749199"
  },
  {
    "text": "our types generic we go and we can also of course uh have generic functions or methods so",
    "start": "749199",
    "end": "756760"
  },
  {
    "text": "we can we could actually make this filter method work on everything as well and be strongly typed except I have to I",
    "start": "756760",
    "end": "763839"
  },
  {
    "text": "have to replace a lot of occurrences of int here so bear with me that's probably",
    "start": "763839",
    "end": "769320"
  },
  {
    "text": "a faster way to do this um but it's right after lunch it's",
    "start": "769320",
    "end": "775399"
  },
  {
    "text": "okay okay any more yeah there's one more there okay there we go okay back to normal um also",
    "start": "775399",
    "end": "784320"
  },
  {
    "text": "when we call filter since it's now generic we should be passing an INT and we can but for some reason it wasn't red",
    "start": "784320",
    "end": "791399"
  },
  {
    "text": "squiggled and that reason is type inference right the generic type inference which says when you call a generic method we'll look at the",
    "start": "791399",
    "end": "798040"
  },
  {
    "text": "arguments and we see if we can figure out what the type arguments are if we can then we don't you don't have to to type them and then that's a that's also",
    "start": "798040",
    "end": "805160"
  },
  {
    "text": "a thing from functional programming which I think isn't inherently functional but it's just that with",
    "start": "805160",
    "end": "810240"
  },
  {
    "text": "parametric polymorphism types become bigger right you get some really big types and especially we don't have",
    "start": "810240",
    "end": "815839"
  },
  {
    "text": "subtyping which many functional languages don't then you do you get a lot of composition and so you really don't want to look at the types you",
    "start": "815839",
    "end": "821920"
  },
  {
    "text": "don't want to have to write them so there's a lot of type inference going on um and and we steal some of that like we",
    "start": "821920",
    "end": "829320"
  },
  {
    "text": "we uh we uh have type inference for for generic types and we also LED you it's",
    "start": "829320",
    "end": "834600"
  },
  {
    "text": "not really type inference that's to Grand a name for it but uh implicit",
    "start": "834600",
    "end": "839920"
  },
  {
    "text": "types you know VAR actually only in C 3 but I'm gonna I'm going to preempt it a little here um just like avoiding to",
    "start": "839920",
    "end": "848480"
  },
  {
    "text": "avoiding to say types becomes something you can do more on C okay so far so good",
    "start": "848480",
    "end": "854519"
  },
  {
    "text": "you with me good um another thing that happens often in functional programming",
    "start": "854519",
    "end": "860199"
  },
  {
    "text": "languages is that you have is generators you have this uh thing where you you",
    "start": "860199",
    "end": "865440"
  },
  {
    "text": "produce values from some code but you might lace produce those values and we",
    "start": "865440",
    "end": "871120"
  },
  {
    "text": "actually adopt that as iterators in in C and and many other not functional languages do the same thing so the the",
    "start": "871120",
    "end": "878000"
  },
  {
    "text": "way we do it in C is instead of having this result collection that we add to we have this yield return",
    "start": "878000",
    "end": "885079"
  },
  {
    "text": "thing don't know what I think about that syntax nowadays but hey there you are",
    "start": "885079",
    "end": "891480"
  },
  {
    "text": "yield return which means you know hey I have another value yield that yield that",
    "start": "891480",
    "end": "896560"
  },
  {
    "text": "yield that and they have to do that instead of returning and now the the the",
    "start": "896560",
    "end": "902639"
  },
  {
    "text": "whole method is an iterator and the compiler takes responsibility for implementing this interface with some",
    "start": "902639",
    "end": "909639"
  },
  {
    "text": "State machine class that it generates for you um and then it really it's a",
    "start": "909639",
    "end": "915120"
  },
  {
    "text": "lacy thing right when you um it's when you do the call filter here it actually",
    "start": "915120",
    "end": "921839"
  },
  {
    "text": "doesn't start executing it it sort of just wraps up the the arguments in an object and then sits around and waits",
    "start": "921839",
    "end": "928240"
  },
  {
    "text": "until you start reaching over it and every time you call move next it says oh let me give you another value and then I get to the yield return after I've done",
    "start": "928240",
    "end": "935120"
  },
  {
    "text": "the yield return I just sit around and wait for the next one so the code really in a state machine kind of uh gets gets",
    "start": "935120",
    "end": "941199"
  },
  {
    "text": "delayed becomes lazy and and uh if you think about hasal is is a popular",
    "start": "941199",
    "end": "947399"
  },
  {
    "text": "functional programming language that actually completely relies on Lacy execution and it's it's at the core of",
    "start": "947399",
    "end": "952600"
  },
  {
    "text": "the things that's also um not so unusual um",
    "start": "952600",
    "end": "959560"
  },
  {
    "text": "cool oh I actually I can I can delete this line too I told you the Cod was going to get shorter and shorter um",
    "start": "959560",
    "end": "965880"
  },
  {
    "text": "let's see is that it for c 2 oh one more thing um this whole thing about the",
    "start": "965880",
    "end": "972600"
  },
  {
    "text": "first class functions um but then we have to declare them functional programming languages do that so much so",
    "start": "972600",
    "end": "978720"
  },
  {
    "text": "of course you can just write a function as an expression you don't have to declare it and give it a name and anything so Expressions that are",
    "start": "978720",
    "end": "985519"
  },
  {
    "text": "functions um or like Anonymous functions Maybe maybe you can call them we want to add that as well so in C 2 we did it we",
    "start": "985519",
    "end": "993440"
  },
  {
    "text": "had our first take on that we saidy let's take the delegate keyword we already have it it has good intuition",
    "start": "993440",
    "end": "998839"
  },
  {
    "text": "and then take the stuff from the method that's not the name and the return type and stick it there and now we have an",
    "start": "998839",
    "end": "1004880"
  },
  {
    "text": "anonymous method uh and we don't need the the Declaration anymore so that that",
    "start": "1004880",
    "end": "1012000"
  },
  {
    "text": "gets us a little closer to something that looks functional not close enough though in C",
    "start": "1012000",
    "end": "1018120"
  },
  {
    "text": "3 and again yell questions if you have them or points uh of discussion in C 3",
    "start": "1018120",
    "end": "1024000"
  },
  {
    "text": "we become obsessed with querying okay so we embark on this grant scheme where we",
    "start": "1024000",
    "end": "1030918"
  },
  {
    "text": "want essentially to we want to have super lovely integration with databases",
    "start": "1030919",
    "end": "1037918"
  },
  {
    "text": "particular SQL databases which are you know all the rage um and we also we want",
    "start": "1037919",
    "end": "1046798"
  },
  {
    "text": "to do it in a way that is a functional programming language will do it like functional features are perfect they",
    "start": "1046799",
    "end": "1053440"
  },
  {
    "text": "combine super well for this and some functional languages have proven that at this time so we want to copy all of that",
    "start": "1053440",
    "end": "1059400"
  },
  {
    "text": "so we try to combine those two we try to essentially be be SQL database",
    "start": "1059400",
    "end": "1066480"
  },
  {
    "text": "integrated cool by using functional features it's all the cool from all the places like that's that's got to be a",
    "start": "1066480",
    "end": "1072960"
  },
  {
    "text": "success right and so in order to kind of uh I'm I'm not May maybe I'm sounding a",
    "start": "1072960",
    "end": "1079559"
  },
  {
    "text": "little too cynical here that's not actually the intention I do think it is cool um so one of the first things we do",
    "start": "1079559",
    "end": "1085880"
  },
  {
    "text": "is like okay I guess functional also kind of means um tur beautiful tur",
    "start": "1085880",
    "end": "1093520"
  },
  {
    "text": "syntax and we don't quite we didn't quite achieve that with our with our Anonymous delegates here let's have",
    "start": "1093520",
    "end": "1100039"
  },
  {
    "text": "proper Lambda Expressions Lambda it's called Lambda because of the Lambda calculus which was",
    "start": "1100039",
    "end": "1107039"
  },
  {
    "text": "is sort of the the theoretical Foundation of functional programming and it's essentially a little mathematical",
    "start": "1107039",
    "end": "1112200"
  },
  {
    "text": "calculus where everything is a function like it just functions that take functions and return functions and um",
    "start": "1112200",
    "end": "1119640"
  },
  {
    "text": "and is used for computational Theory and and stuff like that and and the the Greek letter has stuck in the name for",
    "start": "1119640",
    "end": "1126840"
  },
  {
    "text": "anonymous functions in many languages including C so Lambda that's why it's called Lambda here and that's why it's",
    "start": "1126840",
    "end": "1132120"
  },
  {
    "text": "called Lambda and AWS okay um and that's a little so U this is Lambda expression",
    "start": "1132120",
    "end": "1139679"
  },
  {
    "text": "we just put a fat arrow in there but we can also do other things so another aspect that we'll come back to later of",
    "start": "1139679",
    "end": "1145919"
  },
  {
    "text": "functional programming is that it is it's much less imperative where in C you",
    "start": "1145919",
    "end": "1152360"
  },
  {
    "text": "would often have statements that mutate things and objects that evolve their state over time functional programming",
    "start": "1152360",
    "end": "1157760"
  },
  {
    "text": "you will typically compute new results from old ones you you're not you're not messing with them you just they're just",
    "start": "1157760",
    "end": "1164400"
  },
  {
    "text": "parts of a computation and something else comes out which means that you tend to be very expressive expression based you just have one big expression that",
    "start": "1164400",
    "end": "1171000"
  },
  {
    "text": "combines everything together and Returns the result whereas C tends to be more",
    "start": "1171000",
    "end": "1176440"
  },
  {
    "text": "statement based but we could we could um add the expression based um Viewpoint as",
    "start": "1176440",
    "end": "1182400"
  },
  {
    "text": "well by letting Lambda Expressions that really just return something it doesn't really do anything it's just a computation letting those be um",
    "start": "1182400",
    "end": "1190559"
  },
  {
    "text": "expression based okay so they can have an expression body and um also we talked about type in",
    "start": "1190559",
    "end": "1197960"
  },
  {
    "text": "friends well since filter clearly takes int because",
    "start": "1197960",
    "end": "1204559"
  },
  {
    "text": "of the int array um it's clear that it expects um um an INT predicate as well",
    "start": "1204559",
    "end": "1212360"
  },
  {
    "text": "so why do we have to say it why do we have to say the element uh the um the parameter type there couldn't we just",
    "start": "1212360",
    "end": "1218159"
  },
  {
    "text": "infer it and indeed we can and when there's only one hey you also as a bonus you get to not have the print so great",
    "start": "1218159",
    "end": "1224000"
  },
  {
    "text": "okay now it looks better um another thing is function types in functional",
    "start": "1224000",
    "end": "1230039"
  },
  {
    "text": "programming languages they're not declared it's not that you have these class declaration like things they're",
    "start": "1230039",
    "end": "1235360"
  },
  {
    "text": "just they just there you can just say a type expression and it's a function type",
    "start": "1235360",
    "end": "1241919"
  },
  {
    "text": "and we can't quite get there in C still haven't may never but at least we can",
    "start": "1241919",
    "end": "1247240"
  },
  {
    "text": "make it a little more structural so you don't have to go and declare your your function types your delegates yourself",
    "start": "1247240",
    "end": "1253280"
  },
  {
    "text": "whenever you need them we can declare a bunch of them for you um and so we have a whole whole uh whole family of them",
    "start": "1253280",
    "end": "1260320"
  },
  {
    "text": "called Funk and action uh with with several overloads um I think we start",
    "start": "1260320",
    "end": "1265720"
  },
  {
    "text": "with eight overloads and in the following releases we get more and more of those overloads so something that",
    "start": "1265720",
    "end": "1273080"
  },
  {
    "text": "that takes a t Arc um let's call it Arc",
    "start": "1273080",
    "end": "1278200"
  },
  {
    "text": "and returns a t result so we have a bunch of funk",
    "start": "1278200",
    "end": "1284080"
  },
  {
    "text": "overloads and action overloads return Bo and now we have a library of them so you can you don't have to declare them",
    "start": "1284080",
    "end": "1289440"
  },
  {
    "text": "yourself you can just use the off the-shelf once and that's a little better it's a little more like the functional experience okay so now we",
    "start": "1289440",
    "end": "1295919"
  },
  {
    "text": "kind of cleaned up the world and actually since there's a library of these we don't need the Declaration in our code so now we got shorter again yay",
    "start": "1295919",
    "end": "1304440"
  },
  {
    "text": "um we need many more things in order to achieve a query thing here so let's let's start whittling away at it",
    "start": "1304440",
    "end": "1312559"
  },
  {
    "text": "um we want to have like quering is about you of want to do more than one",
    "start": "1312559",
    "end": "1319320"
  },
  {
    "text": "thing you don't just want to filter you want to filter and then you want to join and sort and filter some more and so you",
    "start": "1319320",
    "end": "1325559"
  },
  {
    "text": "want to do different operations and compose them together and composing together in sort of a a function calling",
    "start": "1325559",
    "end": "1331799"
  },
  {
    "text": "way let's say we just call filter again to to filter the output of the first",
    "start": "1331799",
    "end": "1337039"
  },
  {
    "text": "one um let's say we want just the even the even",
    "start": "1337039",
    "end": "1343080"
  },
  {
    "text": "numbers so we can do that we can just wrap that around but that's really that that sucks this sucks right because",
    "start": "1343080",
    "end": "1349080"
  },
  {
    "text": "they how do you read this expression you start in the middle okay we start with an array then we wrap one layer around",
    "start": "1349080",
    "end": "1355640"
  },
  {
    "text": "it to say filter like that then we wrap one layer around that but there stuff on both sides right so the so the related",
    "start": "1355640",
    "end": "1360919"
  },
  {
    "text": "Parts get further and further from each other the more you compose this really really sucks and so functional",
    "start": "1360919",
    "end": "1366960"
  },
  {
    "text": "programming languages immediately were like okay yeah yeah that that's not that's not good let's do this differently and so they have a syntactic",
    "start": "1366960",
    "end": "1373279"
  },
  {
    "text": "sugar typically it's called Uh pipelining which is just sugar but it what it essentially enables them to do",
    "start": "1373279",
    "end": "1379840"
  },
  {
    "text": "which I'm going to I'm going to pretend I'm doing in C here it doesn't actually work because that's not how C work works",
    "start": "1379840",
    "end": "1385640"
  },
  {
    "text": "but let me show it to you anyway I'm going to take the result of that first",
    "start": "1385640",
    "end": "1390720"
  },
  {
    "text": "filter call and I'm going to pipe it into another call a",
    "start": "1390720",
    "end": "1396720"
  },
  {
    "text": "filter um where it just comes in as an extra argument right so now it so one",
    "start": "1396720",
    "end": "1403360"
  },
  {
    "text": "argument comes in so we Sugg just the Lambda needs to be passed explicitly and we can do that again with",
    "start": "1403360",
    "end": "1409279"
  },
  {
    "text": "uh even when we just apply the first filter to the array here let's take it pipe the array into it",
    "start": "1409279",
    "end": "1417679"
  },
  {
    "text": "and and ah that looks so much better now we can you can break it on multiple",
    "start": "1417679",
    "end": "1423000"
  },
  {
    "text": "lines uh start with array pipe into filter pipe into filter again oh it's",
    "start": "1423000",
    "end": "1429360"
  },
  {
    "text": "beautiful right we we never really get around to like we should also really be piping it into query instead of like",
    "start": "1429360",
    "end": "1435520"
  },
  {
    "text": "assigning up front but never mind we never get there um so this is sort of like a fluent style of programming you",
    "start": "1435520",
    "end": "1441320"
  },
  {
    "text": "can see the flow um and it's very expressive um so we want to have that",
    "start": "1441320",
    "end": "1447919"
  },
  {
    "text": "fluency in C but we don't we don't go for pipelining we don't go for the fact for letting every function be pipeline",
    "start": "1447919",
    "end": "1454640"
  },
  {
    "text": "instead we say okay we want this to feel more objectoriented um and that is why",
    "start": "1454640",
    "end": "1459840"
  },
  {
    "text": "where we come up with um extension methods okay so extension methods of this new thing we it's one of those",
    "start": "1459840",
    "end": "1465720"
  },
  {
    "text": "things that starts I think they start out in C I think we were the ones who came up with them so y um so let's um",
    "start": "1465720",
    "end": "1473679"
  },
  {
    "text": "let's try to make filter and extension method um let me actually yeah let's try up here so we're going to make a",
    "start": "1473679",
    "end": "1481880"
  },
  {
    "text": "static class don't do that let's call it",
    "start": "1482760",
    "end": "1487880"
  },
  {
    "text": "my extensions",
    "start": "1487880",
    "end": "1493799"
  },
  {
    "text": "and put that thing in curly braces make it public and",
    "start": "1493799",
    "end": "1502000"
  },
  {
    "text": "static so far so good now we have a a a static method and now the new trick is",
    "start": "1502000",
    "end": "1507960"
  },
  {
    "text": "to say well this is a special function that is an extension method so it uh it",
    "start": "1507960",
    "end": "1513159"
  },
  {
    "text": "pretends it's a an instance member on some an instance method on something else um and that means that means we can",
    "start": "1513159",
    "end": "1521760"
  },
  {
    "text": "now dot into that thing and filter just",
    "start": "1521760",
    "end": "1527240"
  },
  {
    "text": "pretends it's not a static method but an instance method so that also flows fluently when you read the code but",
    "start": "1527240",
    "end": "1533360"
  },
  {
    "text": "moreover like the so the downside compared to pipelining and functional",
    "start": "1533360",
    "end": "1538520"
  },
  {
    "text": "programming languages you can only do it if you anticipate it if you actually make the thing and extension method the upside of that is you can press Dot and",
    "start": "1538520",
    "end": "1546640"
  },
  {
    "text": "it can tell you what's available so you get that discoverability right which feels much that's much more like what an",
    "start": "1546640",
    "end": "1552440"
  },
  {
    "text": "object rning programmer would want to do here I'm like okay I got the array what can I do with it dot um so so that",
    "start": "1552440",
    "end": "1559120"
  },
  {
    "text": "actually that that comes out very nicely and um o we're going to talk about",
    "start": "1559120",
    "end": "1564200"
  },
  {
    "text": "extensions tomorrow if you come to my talk because why only methods and why",
    "start": "1564200",
    "end": "1569840"
  },
  {
    "text": "this syntax and 20 years later so but that's tomorrow um so extension methods great",
    "start": "1569840",
    "end": "1577640"
  },
  {
    "text": "um let's see what else do we want to do um so I I said we were going to build a",
    "start": "1577640",
    "end": "1584760"
  },
  {
    "text": "whole Library we we're going to support careering so we want to build a whole library of career and we want to make it SQL like so let's actually start by",
    "start": "1584760",
    "end": "1591080"
  },
  {
    "text": "renaming this to wear because that's what it's called in SQL um and uh the wear method the wear",
    "start": "1591080",
    "end": "1599000"
  },
  {
    "text": "extension method actually that's what it looked like in the first release then we optimized it some more and the body got",
    "start": "1599000",
    "end": "1604279"
  },
  {
    "text": "uglier but that that is the core of what it does so all these query methods are",
    "start": "1604279",
    "end": "1609960"
  },
  {
    "text": "lazy because of the iterators that they're implemented with that are lazy and that means you can compose multiple",
    "start": "1609960",
    "end": "1616600"
  },
  {
    "text": "queries like we do here but that just creates some like wrapper object for all the data that went in and only here when",
    "start": "1616600",
    "end": "1622720"
  },
  {
    "text": "we when we for each over them does it all do all the bodies and all the iterators gradually get executed on all",
    "start": "1622720",
    "end": "1629840"
  },
  {
    "text": "the data right and that's actually kind of cool for queries because you don't",
    "start": "1629840",
    "end": "1635640"
  },
  {
    "text": "want query functionality to be chatty maybe it doesn't matter so much when you're in memory but if you if what we",
    "start": "1635640",
    "end": "1641720"
  },
  {
    "text": "want is to talk to a database then we don't want to say okay now filter by this send me all the results and then",
    "start": "1641720",
    "end": "1648880"
  },
  {
    "text": "I'm going to you know you want you want to wait for as long as possible until you believe that the size",
    "start": "1648880",
    "end": "1655279"
  },
  {
    "text": "of the result is is manageable compose everything together and send a query to the database that's what we want to do",
    "start": "1655279",
    "end": "1661480"
  },
  {
    "text": "and we want to do it with these techniques so so here comes another thing that functional programming",
    "start": "1661480",
    "end": "1666840"
  },
  {
    "text": "languages have been champions of which is code quotation and all way if you go all the",
    "start": "1666840",
    "end": "1673039"
  },
  {
    "text": "way back to lisp which I think is probably the first real functional programming language um",
    "start": "1673039",
    "end": "1679600"
  },
  {
    "text": "it has this whole thing of code and data code as data code and data looks the same like list pretty much only has um",
    "start": "1679600",
    "end": "1686799"
  },
  {
    "text": "identifiers and parenthesis and then you construct a program from that and that's also how you construct all your data",
    "start": "1686799",
    "end": "1692840"
  },
  {
    "text": "like you comp post programs with parens and composition you compose data with parens and composition that means it's",
    "start": "1692840",
    "end": "1699080"
  },
  {
    "text": "really easy to put like a thing in in front of the A paren and say quote this code and then the code becomes a data",
    "start": "1699080",
    "end": "1705039"
  },
  {
    "text": "structure instead of executable code great so so it's kind of like a reflection thing and that's exactly what",
    "start": "1705039",
    "end": "1712760"
  },
  {
    "text": "we need in order to be able to turn this into SQL queries okay so what we do is",
    "start": "1712760",
    "end": "1719320"
  },
  {
    "text": "introduce what we call expression trees into C code quotation and the way it works in C is that um you see the wear",
    "start": "1719320",
    "end": "1726399"
  },
  {
    "text": "method here um it takes delegates right we just looked at it before um actually",
    "start": "1726399",
    "end": "1731559"
  },
  {
    "text": "we haven't removed it yet I'm just going to keep it there for a bit um but uh",
    "start": "1731559",
    "end": "1737760"
  },
  {
    "text": "there's what we do is introduce expression trees that if you pass a Lambda to an expression tree it will transparently",
    "start": "1737760",
    "end": "1744159"
  },
  {
    "text": "turn it into a data structure instead of a delegate and so we make a so we have a",
    "start": "1744159",
    "end": "1749679"
  },
  {
    "text": "different interface from I quable called oh sorry from iable called I quable that the extension methods on that take",
    "start": "1749679",
    "end": "1756480"
  },
  {
    "text": "expression trees instead of delegates and we don't have like and then a",
    "start": "1756480",
    "end": "1761679"
  },
  {
    "text": "database uh tables Implement that I don't have a database table with me today uh so I'm just going to cheat and",
    "start": "1761679",
    "end": "1768200"
  },
  {
    "text": "make this one cable so we just pretend that array is a data is a database table okay and now it has a it has a different",
    "start": "1768200",
    "end": "1775760"
  },
  {
    "text": "type it is now an iable event and that means when you look at the wear method",
    "start": "1775760",
    "end": "1781080"
  },
  {
    "text": "um you're actually still picking up mine maybe so let's get rid of this",
    "start": "1781080",
    "end": "1789799"
  },
  {
    "text": "um let's see when you look at the uh the wear method it takes not Funk of",
    "start": "1790440",
    "end": "1797519"
  },
  {
    "text": "something but but it takes expression of the delegate type so I got a different",
    "start": "1797519",
    "end": "1803360"
  },
  {
    "text": "overload and and these are also lazy",
    "start": "1803360",
    "end": "1808720"
  },
  {
    "text": "right they take the data that came in and the expression tree for the Lambda",
    "start": "1808720",
    "end": "1813799"
  },
  {
    "text": "and they wrap those up in a new expression tree they essentially quote themselves so what comes in is an",
    "start": "1813799",
    "end": "1818919"
  },
  {
    "text": "expression tree when you call the wear method you get you get an expression tree for the for the uh filtering",
    "start": "1818919",
    "end": "1826120"
  },
  {
    "text": "function and then it builds an expression tree for the uh for calling",
    "start": "1826120",
    "end": "1831960"
  },
  {
    "text": "the wear method on that and then it stores that expression tree in the result and then when the next one comes",
    "start": "1831960",
    "end": "1837559"
  },
  {
    "text": "along so it composes expression trees that's what these do but again not executing any querying until we for each",
    "start": "1837559",
    "end": "1844399"
  },
  {
    "text": "and then when you for each and I quable it has something at the root the thing we started with knows what where the",
    "start": "1844399",
    "end": "1850000"
  },
  {
    "text": "data lives and then that gets tasked with execute this somehow and if it's a",
    "start": "1850000",
    "end": "1856200"
  },
  {
    "text": "if it's a like um IND framework for instance it'll go and say let me take",
    "start": "1856200",
    "end": "1861600"
  },
  {
    "text": "that expression tree and programmatically quickly like generate a SQL query from that and send that over",
    "start": "1861600",
    "end": "1866799"
  },
  {
    "text": "to SQL and then there's the whole thing about how the data that comes back is interpreted and tracked and all that but",
    "start": "1866799",
    "end": "1873519"
  },
  {
    "text": "that's a different story so we use this expression tree technique as the last piece of the puzzle to get database",
    "start": "1873519",
    "end": "1880120"
  },
  {
    "text": "functionality again stealing from functional programming languages um there one last thing we",
    "start": "1880120",
    "end": "1886039"
  },
  {
    "text": "want to steal um and it looks like we're stealing from SQL and we are but we're also stealing",
    "start": "1886039",
    "end": "1892320"
  },
  {
    "text": "from functional programming yet again um which is we want to have nice query syntax and I know a lot of people",
    "start": "1892320",
    "end": "1898200"
  },
  {
    "text": "nowadays tell me I don't actually really like the the query syntax it doesn't feel very uh C to me um I might agree",
    "start": "1898200",
    "end": "1906200"
  },
  {
    "text": "though if I have to write a select manyu I'd much rather use a query expression to be honest because that's mindboggling",
    "start": "1906200",
    "end": "1912760"
  },
  {
    "text": "but um at the time it was really like cool that you could have sort of like a DSL at a domain specific language inside",
    "start": "1912760",
    "end": "1919799"
  },
  {
    "text": "of C that looks like SQL so I I I feel like it was very attractive for a while",
    "start": "1919799",
    "end": "1924960"
  },
  {
    "text": "for people to say okay I get this I I I come from SQL I get this so the way so",
    "start": "1924960",
    "end": "1931480"
  },
  {
    "text": "it's just syntactic sugar over what we have there but try to write it let's try to write it with a CER expression from I",
    "start": "1931480",
    "end": "1938039"
  },
  {
    "text": "in that thing",
    "start": "1938039",
    "end": "1943600"
  },
  {
    "text": "where that thing so we reuse the I across the different different um Clauses here but it really",
    "start": "1943600",
    "end": "1952360"
  },
  {
    "text": "just translates into the same thing where that thing and then because we",
    "start": "1952360",
    "end": "1958639"
  },
  {
    "text": "want it to look like SQL we insist on there being a select so select it's going to be",
    "start": "1958639",
    "end": "1964679"
  },
  {
    "text": "trivial in this case but you know select something out in SQL they put the select up front",
    "start": "1964679",
    "end": "1970720"
  },
  {
    "text": "but that's because they're not programming language designers they don't know that you have to introduce your variables before you use them so",
    "start": "1970720",
    "end": "1977519"
  },
  {
    "text": "from from has to come first from has to be the first thing because it introduces the",
    "start": "1977519",
    "end": "1984600"
  },
  {
    "text": "I now um but other than that fairly uh",
    "start": "1984600",
    "end": "1990240"
  },
  {
    "text": "fairly readable if you have with a SQL Min but what this also really is from a functional perspective is something",
    "start": "1990240",
    "end": "1995279"
  },
  {
    "text": "called a monad so it turns out I quable is a monad and that is something that in",
    "start": "1995279",
    "end": "2002279"
  },
  {
    "text": "functional programming languages is used to if you wanted if to give you syntax",
    "start": "2002279",
    "end": "2009799"
  },
  {
    "text": "to program a flow over with a with a certain underlying data type um where",
    "start": "2009799",
    "end": "2015600"
  },
  {
    "text": "the data type gets to decide what happens at each step um and queries are an example of",
    "start": "2015600",
    "end": "2023320"
  },
  {
    "text": "that there are many other mon ads in functional line the nullable monad the async monad we we'll get to in a second",
    "start": "2023320",
    "end": "2028960"
  },
  {
    "text": "um and they sort of all unify where there's a syntax we the syntax typically isn't this isn't this uh SQL like it'll",
    "start": "2028960",
    "end": "2036480"
  },
  {
    "text": "be a more neutral uh its own kind of thing but the same idea um we never really did anything else with monads and",
    "start": "2036480",
    "end": "2042919"
  },
  {
    "text": "C but it's again it's it's a trick from functional programming okay we've done",
    "start": "2042919",
    "end": "2050878"
  },
  {
    "text": "link we are done with talking about c 3 and in C",
    "start": "2050879",
    "end": "2058280"
  },
  {
    "text": "4 nothing happens a lot happens but it a lot of it",
    "start": "2058280",
    "end": "2064320"
  },
  {
    "text": "has to do with Dynamic and with interrupt and all kinds of things that",
    "start": "2064320",
    "end": "2070800"
  },
  {
    "text": "somehow seem so much more dated today than the functional stuff now C 5 we do",
    "start": "2070800",
    "end": "2075919"
  },
  {
    "text": "async okay and so I just mentioned that monads can also be used for async and F",
    "start": "2075919",
    "end": "2083240"
  },
  {
    "text": "does that at this point they have their Monet features called uh workflows and",
    "start": "2083240",
    "end": "2089118"
  },
  {
    "text": "it is beautiful it like and and at this point like async programming is starting to become really important all of a",
    "start": "2089119",
    "end": "2095520"
  },
  {
    "text": "sudden the cloud uh smartphones you know lots of latency and lots of so async has",
    "start": "2095520",
    "end": "2101880"
  },
  {
    "text": "always been in the there's always been ways to do async in the net libraries but it's been clunky because it's kind",
    "start": "2101880",
    "end": "2107280"
  },
  {
    "text": "of a niche thing but now everyone has to think about async a lot of people do and",
    "start": "2107280",
    "end": "2112680"
  },
  {
    "text": "so F was like oh easy here we go monads they solve everything but we find in C we look at",
    "start": "2112680",
    "end": "2120280"
  },
  {
    "text": "that along we get very inspired by it we want to solve asnc very elegantly in C as well but what we find is that they're",
    "start": "2120280",
    "end": "2126079"
  },
  {
    "text": "actually too functional for our taste like they really don't work well with imperative programming and so without me",
    "start": "2126079",
    "end": "2131760"
  },
  {
    "text": "getting into details we end up doing something else and that's what becomes asyn A8 in C which fits super well with",
    "start": "2131760",
    "end": "2138160"
  },
  {
    "text": "imperative programming with executing one statement at a time and so uh",
    "start": "2138160",
    "end": "2144119"
  },
  {
    "text": "functional programming inspires us there to get kind of going but we don't end up doing it that way so I don't have",
    "start": "2144119",
    "end": "2150040"
  },
  {
    "text": "anything to show you there okay done with the first of two",
    "start": "2150040",
    "end": "2155839"
  },
  {
    "text": "demos then time pass pass this again and I'm going now there's so little code left on that slide we got to get you",
    "start": "2155839",
    "end": "2162160"
  },
  {
    "text": "know got to get some fresh code to to start reducing here C 6 not much happens",
    "start": "2162160",
    "end": "2168800"
  },
  {
    "text": "because we're building C the new C compiler we're",
    "start": "2168800",
    "end": "2173920"
  },
  {
    "text": "actually using a lot of functional techniques um the the syntax trees in",
    "start": "2173920",
    "end": "2179920"
  },
  {
    "text": "and many more data structures in the rosling compil As It Gets known they're immutable so they have a very functional",
    "start": "2179920",
    "end": "2186960"
  },
  {
    "text": "programing is very useful there but we actually and and that ex we don't do much about it at the language level but",
    "start": "2186960",
    "end": "2194839"
  },
  {
    "text": "uh it inspires Us in the coming releases as you'll see to like we we get as a team we get that firsthand experience",
    "start": "2194839",
    "end": "2200960"
  },
  {
    "text": "with oh this functional stuff it's too hard and C let's make it easier um the",
    "start": "2200960",
    "end": "2207160"
  },
  {
    "text": "only and also because we're doing that rewrite of the compiler like all the compiler Engineers are implementing",
    "start": "2207160",
    "end": "2212680"
  },
  {
    "text": "features again that were already implemented in the old one they don't want to also Implement new features so we they're like can not add as many",
    "start": "2212680",
    "end": "2218359"
  },
  {
    "text": "features this time and Anders and I like but that's what we do we we make language features what can we do and",
    "start": "2218359",
    "end": "2225319"
  },
  {
    "text": "then we went over and talked to the JavaScript team and did typescript instead so we got to do language",
    "start": "2225319",
    "end": "2230720"
  },
  {
    "text": "features and then Andre said oh this is cool I'm gonna stay here and then I was like huh okay then and so I went back",
    "start": "2230720",
    "end": "2237839"
  },
  {
    "text": "and became King of the Hill",
    "start": "2237839",
    "end": "2243160"
  },
  {
    "text": "um but what we did do that was in the functional space was this whole expression based thing um expression",
    "start": "2243160",
    "end": "2251200"
  },
  {
    "text": "bodied lambdas are cool and all but why can't everything be expression bodied so we did in C 6 start adding expression",
    "start": "2251200",
    "end": "2258079"
  },
  {
    "text": "bodied members oddly we didn't add all of them they not all members could be expression bodied in C 6 but then people",
    "start": "2258079",
    "end": "2263960"
  },
  {
    "text": "are like why and we like we were not sure it was necessary and we wanted and",
    "start": "2263960",
    "end": "2270240"
  },
  {
    "text": "then you know we did the rest but C 6 you could do this and that's it but",
    "start": "2270240",
    "end": "2277760"
  },
  {
    "text": "the cloud keeps I mean apparently didn't go away it wasn't just a whim and so it",
    "start": "2277760",
    "end": "2284160"
  },
  {
    "text": "kind of keeps presenting issues for us and now we're getting to another fundamental thing in functional",
    "start": "2284160",
    "end": "2289560"
  },
  {
    "text": "programming or in the in the difference between the paradigms sorry which",
    "start": "2289560",
    "end": "2296560"
  },
  {
    "text": "is type dependent behavior is what I'm calling it I don't know if this an official term for that but it turns out",
    "start": "2296560",
    "end": "2304000"
  },
  {
    "text": "both upd and functional program are really big on type dependent Behavior and the easiest",
    "start": "2304000",
    "end": "2311440"
  },
  {
    "text": "way to say what I mean is to look at how the optic uh Paradigm does it which is",
    "start": "2311440",
    "end": "2317440"
  },
  {
    "text": "uh when you have a base class like here we um it has a render function method",
    "start": "2317440",
    "end": "2323400"
  },
  {
    "text": "right it says okay persons can render but how they render is up to the",
    "start": "2323400",
    "end": "2328520"
  },
  {
    "text": "individual types it's different for every type it's type dependent and the way we Implement that is declare it in",
    "start": "2328520",
    "end": "2334079"
  },
  {
    "text": "the base type let you override it in the in the uh or rank types and that is one",
    "start": "2334079",
    "end": "2339240"
  },
  {
    "text": "approach and it has some it has some consequences going this route it it has the consequence in",
    "start": "2339240",
    "end": "2347400"
  },
  {
    "text": "particular that all the type dependent Behavior needs to be predicted like which functions do you need needs to be",
    "start": "2347400",
    "end": "2354079"
  },
  {
    "text": "predicted when you write the Base Class you have to say I have these 15 virtual methods and that is all the type",
    "start": "2354079",
    "end": "2360760"
  },
  {
    "text": "dependent Behavior you get and they're is nice they're encapsulated and all but it's a closed list and some whoever",
    "start": "2360760",
    "end": "2367480"
  },
  {
    "text": "authors that owns that thing they have to decide to add more stuff to",
    "start": "2367480",
    "end": "2372640"
  },
  {
    "text": "it when you think about uh data and behavior being all wrapped up together and how nice it is",
    "start": "2372640",
    "end": "2378920"
  },
  {
    "text": "in object programming fine but unfortunately in the cloud all the data",
    "start": "2378920",
    "end": "2384599"
  },
  {
    "text": "is there in a very long-term manner this the shape of the data the types if you",
    "start": "2384599",
    "end": "2390079"
  },
  {
    "text": "will is there independent of hundreds of apps and services and whatnot using it",
    "start": "2390079",
    "end": "2397040"
  },
  {
    "text": "so whatever they need to do with the data can't all be like they can't all go and add to the base class you know",
    "start": "2397040",
    "end": "2403160"
  },
  {
    "text": "they're independent they're they you know the data existed years before they started consuming it we this whole",
    "start": "2403160",
    "end": "2410319"
  },
  {
    "text": "strong coupling just doesn't work we need type dependent Behavior needs to",
    "start": "2410319",
    "end": "2416000"
  },
  {
    "text": "not live in the base class so to speak and that is where the functional Paradigm really rules and I'll show you",
    "start": "2416000",
    "end": "2424560"
  },
  {
    "text": "how what a what a functional programmer would do here instead of saying mads do render they would turn it around and say",
    "start": "2424560",
    "end": "2432040"
  },
  {
    "text": "render mads right it's just one function that renders and I call it at the top level I",
    "start": "2432040",
    "end": "2439440"
  },
  {
    "text": "don't have it yet so let's write it let's have it return a string call it",
    "start": "2439440",
    "end": "2445040"
  },
  {
    "text": "render um it takes a person p and then it does something",
    "start": "2445040",
    "end": "2451920"
  },
  {
    "text": "let's you know take a bet and assume we can make it expression body that would be cool um get kind of getting our",
    "start": "2451920",
    "end": "2459040"
  },
  {
    "text": "functional hat on okay now um what are we going to do well let's okay to start",
    "start": "2459040",
    "end": "2465119"
  },
  {
    "text": "with just to have something in there let's take the body of the fallback behavior and just use that okay this is",
    "start": "2465119",
    "end": "2471720"
  },
  {
    "text": "what a person we do for a person but of course that doesn't work and it shows one downside if you will like we we no",
    "start": "2471720",
    "end": "2478319"
  },
  {
    "text": "we no longer have special access to internal data like we can only access public data and we have to do it from",
    "start": "2478319",
    "end": "2484520"
  },
  {
    "text": "the outside we have to say p Dot B dot so we lost that connection but",
    "start": "2484520",
    "end": "2492480"
  },
  {
    "text": "that's a good thing right because that means they they can trust they're not exposing",
    "start": "2492480",
    "end": "2497560"
  },
  {
    "text": "the stuff to us that they don't want to expose great that's not type dependent if we and using the features around at",
    "start": "2497560",
    "end": "2504319"
  },
  {
    "text": "the time if you want to make it type dependent it gets a little awkward but let's try to do it we want to say and we say we want to say if but we use etary",
    "start": "2504319",
    "end": "2511720"
  },
  {
    "text": "operator because we are expression based so if um p is a student and remember we",
    "start": "2511720",
    "end": "2518160"
  },
  {
    "text": "have to do this for every every derived class but I only",
    "start": "2518160",
    "end": "2523280"
  },
  {
    "text": "have one in the demo so that makes it easier but imagine that it was harder if it is that then do this thing",
    "start": "2523280",
    "end": "2531079"
  },
  {
    "text": "down here instead and that's the thing you return okay and do a little got to fix up some",
    "start": "2531079",
    "end": "2539280"
  },
  {
    "text": "things here put it in there put the coal in here from the Turner operator and",
    "start": "2539280",
    "end": "2544319"
  },
  {
    "text": "then all we need is to fix these guys up easy right p. this p. last name p. ID",
    "start": "2544319",
    "end": "2550839"
  },
  {
    "text": "and we done right anyone see the problem yet P does not have an ID was that",
    "start": "2550839",
    "end": "2557960"
  },
  {
    "text": "another do you have another problem yeah it only knows it's a person I just",
    "start": "2557960",
    "end": "2565440"
  },
  {
    "text": "asked but it only knows it's a person now some some languages they're like oh we're going to have flow-based typing",
    "start": "2565440",
    "end": "2570480"
  },
  {
    "text": "but it's too late for C that would be too breaking that would be one way of doing it",
    "start": "2570480",
    "end": "2575839"
  },
  {
    "text": "um but we do instead is we we go to functional programming surprise we steal",
    "start": "2575839",
    "end": "2582400"
  },
  {
    "text": "another concept they have which is pattern matching which they have because this is how they do type uh type",
    "start": "2582400",
    "end": "2588319"
  },
  {
    "text": "dependent behavior and it can't be this ugly because then functional programing would never have succeeded so they have patterns and a pattern is really like a",
    "start": "2588319",
    "end": "2595680"
  },
  {
    "text": "test of some sort if you think of student in this position not as a type but a a type test right it's a tyght",
    "start": "2595680",
    "end": "2601960"
  },
  {
    "text": "pattern it says is it that says is it a student yes or no",
    "start": "2601960",
    "end": "2607640"
  },
  {
    "text": "but patterns not not just like booleans they have the additional capacity",
    "start": "2607640",
    "end": "2613319"
  },
  {
    "text": "optionally that if the pattern matches then you can extract some the pattern can help extract some information from",
    "start": "2613319",
    "end": "2620280"
  },
  {
    "text": "the the true case so I can say if it's a student call it s and now I can use in the true Branch I",
    "start": "2620280",
    "end": "2628480"
  },
  {
    "text": "can use that s instead and now because it was a student I can now I I should",
    "start": "2628480",
    "end": "2634960"
  },
  {
    "text": "replace all of them so I will but um you know so I can now treat it as a student instead so this is a pattern there many",
    "start": "2634960",
    "end": "2641119"
  },
  {
    "text": "other kinds of patterns you can have constant patterns and we'll see more patterns in a bit",
    "start": "2641119",
    "end": "2647079"
  },
  {
    "text": "um and uh that solved that little",
    "start": "2647079",
    "end": "2652599"
  },
  {
    "text": "problem it's still the and and we in in c 7 we do add patterns as you saw to the",
    "start": "2652599",
    "end": "2658440"
  },
  {
    "text": "is expression we also add them to the switch statement so that you can switch not just on constants but on all",
    "start": "2658440",
    "end": "2664040"
  },
  {
    "text": "patterns which is great it's awesome except switch statements are just like",
    "start": "2664040",
    "end": "2669680"
  },
  {
    "text": "right 60 1968 or something it's like yeah we're smoking",
    "start": "2669680",
    "end": "2676160"
  },
  {
    "text": "pipes you know so um and of course that's not what",
    "start": "2676160",
    "end": "2683240"
  },
  {
    "text": "functional programmers do so in C 8 we do what we should do which is uh we",
    "start": "2683240",
    "end": "2690319"
  },
  {
    "text": "add uh switch Expressions they're the fancy glorious younger cousin of switch",
    "start": "2690319",
    "end": "2695880"
  },
  {
    "text": "statements or there what functional languages call match State match Expressions typically the way it looks",
    "start": "2695880",
    "end": "2701960"
  },
  {
    "text": "is we say we start with saying P switch and then we have a uh then we",
    "start": "2701960",
    "end": "2710440"
  },
  {
    "text": "have a um a block of some stuff and it's going to take me just a",
    "start": "2710440",
    "end": "2716079"
  },
  {
    "text": "second to get things in order here but the the idea is you switch and then you have a a sequence of cases and we go",
    "start": "2716079",
    "end": "2722599"
  },
  {
    "text": "through them until one fits and those cases they start with a pattern so does p fit this pattern the student s pattern",
    "start": "2722599",
    "end": "2730760"
  },
  {
    "text": "if so then the result is that thing",
    "start": "2730760",
    "end": "2737079"
  },
  {
    "text": "otherwise does it fit see does it fit nothing at all the",
    "start": "2737079",
    "end": "2743200"
  },
  {
    "text": "default pattern does it fit having no requirements as it happens",
    "start": "2743200",
    "end": "2748880"
  },
  {
    "text": "it does then do this thing okay switch Expressions imagine there were many more",
    "start": "2748880",
    "end": "2754880"
  },
  {
    "text": "uh different types you get a nice flow test one at a time and see what order things happening the first one that",
    "start": "2754880",
    "end": "2760359"
  },
  {
    "text": "catches is the one that um that we get on that again just like the fluent",
    "start": "2760359",
    "end": "2766079"
  },
  {
    "text": "programming it has that kind of you can see the flow beautiful um there",
    "start": "2766079",
    "end": "2774559"
  },
  {
    "text": "um and and another thing that you have in pattern matching in functional languag is you you end up having many",
    "start": "2774559",
    "end": "2780240"
  },
  {
    "text": "different kinds of pattern uh they really become your Workhorse for for conditional logic and so",
    "start": "2780240",
    "end": "2787400"
  },
  {
    "text": "you want to be able to ask fairly complex questions in your patterns particular I have some recursive",
    "start": "2787400",
    "end": "2792440"
  },
  {
    "text": "patterns where you apply patterns to things within patterns and just to illustrate that let's let's claim that",
    "start": "2792440",
    "end": "2799520"
  },
  {
    "text": "we have a bug in this code where okay I'm getting the first element of Peter first name but what if it's the empty string you know that would blow up uh",
    "start": "2799520",
    "end": "2806480"
  },
  {
    "text": "let's fix that with another uh case in our pattern where we say and there are different ways of doing it one is to not",
    "start": "2806480",
    "end": "2813480"
  },
  {
    "text": "change the pattern at all but we actually allow you to attach a Boolean condition to it um when uh P doir name.",
    "start": "2813480",
    "end": "2824559"
  },
  {
    "text": "length equals zero so that will be one way of doing it then what should we do",
    "start": "2824559",
    "end": "2829920"
  },
  {
    "text": "instead maybe just not use the first name at all come up with",
    "start": "2829920",
    "end": "2836799"
  },
  {
    "text": "something there but we can also have more fancy patterns which is more fun to do right so let's do that so instead",
    "start": "2838480",
    "end": "2845559"
  },
  {
    "text": "there many options uh let's let's try to have a recursive pattern where we say if it's an object that has a first name",
    "start": "2845559",
    "end": "2854880"
  },
  {
    "text": "where the following pattern applies for instance that first name is the empty",
    "start": "2854880",
    "end": "2860000"
  },
  {
    "text": "string constant pattern applied recursively or we have list patterns",
    "start": "2860000",
    "end": "2865119"
  },
  {
    "text": "where it's the empty sequence of chars or you know it's another object where",
    "start": "2865119",
    "end": "2871960"
  },
  {
    "text": "the length is zero",
    "start": "2871960",
    "end": "2877680"
  },
  {
    "text": "or the abbreviation of that because even this kind of thing can be abbreviated",
    "start": "2877680",
    "end": "2883359"
  },
  {
    "text": "where we just let you say uh the dot in the top level pattern",
    "start": "2883359",
    "end": "2889520"
  },
  {
    "text": "or you know we can keep going but we actually want to we actually also want um want to test for for null so like",
    "start": "2889520",
    "end": "2898839"
  },
  {
    "text": "there other ways we could do it um but we could also say hey we actually also don't want it if it's null or if it's",
    "start": "2898839",
    "end": "2905000"
  },
  {
    "text": "the string because now we also have conditional patterns and relational patterns what you so you can see there there's a whole toolbox of patterns and",
    "start": "2905000",
    "end": "2911440"
  },
  {
    "text": "some of them are recursive so they can be combined and we haven't even talked and we won't today for time reasons talk about tuples and and positional",
    "start": "2911440",
    "end": "2919119"
  },
  {
    "text": "deconstruction and all that kind of stuff but it starts it becomes really like patterns are certainly expressive",
    "start": "2919119",
    "end": "2925520"
  },
  {
    "text": "enough now it's more a question of when should I stop using them because all the clarity that I got from my cases being",
    "start": "2925520",
    "end": "2931200"
  },
  {
    "text": "neatly laid out it goes away because my patterns are too big so but okay you get it and now we're done with our our",
    "start": "2931200",
    "end": "2940160"
  },
  {
    "text": "virtual methods we have our new type dependent behavior and it but now it is",
    "start": "2940160",
    "end": "2945599"
  },
  {
    "text": "no longer a closed list of functions with an open-ended uh set of types it is a",
    "start": "2945599",
    "end": "2952760"
  },
  {
    "text": "closed set of it's an open-ended list of functions each with a closed set of types the function centrally defines the",
    "start": "2952760",
    "end": "2959960"
  },
  {
    "text": "number of types it knows how to handle okay so we flipped it on its head",
    "start": "2959960",
    "end": "2965040"
  },
  {
    "text": "different situations different things are good but certainly for this Cloud scenario this is what we want and so",
    "start": "2965040",
    "end": "2971599"
  },
  {
    "text": "it's no it's no uh accident that patterns and all the stuff come into c",
    "start": "2971599",
    "end": "2977640"
  },
  {
    "text": "as as clout programming is really taking off now we get to c n and the last the",
    "start": "2977640",
    "end": "2984680"
  },
  {
    "text": "last thing I want to talk about from uh uh last major thing from functional programming which is",
    "start": "2984680",
    "end": "2992119"
  },
  {
    "text": "immutability okay or really what what are",
    "start": "2992119",
    "end": "2997960"
  },
  {
    "text": "things in programming languages what what is the currency that we work in are",
    "start": "2997960",
    "end": "3003319"
  },
  {
    "text": "they objects or are they values do they have state or do they be",
    "start": "3003319",
    "end": "3013078"
  },
  {
    "text": "State can they change over time or are they just",
    "start": "3013240",
    "end": "3019040"
  },
  {
    "text": "information well obviously the default in OB your own programming is yes they have state yes they evolve over time we",
    "start": "3019040",
    "end": "3025040"
  },
  {
    "text": "mutate them all the time that's programming that's how it works but in",
    "start": "3025040",
    "end": "3030200"
  },
  {
    "text": "functional programming is often the other way around we touched on that and so you you you don't mutate a thing you",
    "start": "3030200",
    "end": "3036960"
  },
  {
    "text": "compute another thing from the thing that's why they are so expression oriented and that is also uh sometimes",
    "start": "3036960",
    "end": "3045160"
  },
  {
    "text": "really useful and and and immutability is really useful for one reason because when you",
    "start": "3045160",
    "end": "3051240"
  },
  {
    "text": "want concurrency and you have mutability then you have um then you have concurrent mut mutable state which means",
    "start": "3051240",
    "end": "3058280"
  },
  {
    "text": "you have trouble and need to start locking and all that but if if everything's immutable then you don't have shared mutable State you don't have",
    "start": "3058280",
    "end": "3064920"
  },
  {
    "text": "any mutable State and so things are hunor that's a big reason why the C rustling compiler is immutable that uses",
    "start": "3064920",
    "end": "3071559"
  },
  {
    "text": "all these techniques but it's a pain to work within",
    "start": "3071559",
    "end": "3077319"
  },
  {
    "text": "c um essentially let's let's let's do an example here",
    "start": "3077319",
    "end": "3084640"
  },
  {
    "text": "um I changed my last name when I got married um I used to have a different",
    "start": "3085400",
    "end": "3090520"
  },
  {
    "text": "last name some nefarious person might want to try to change it back okay uh so",
    "start": "3090520",
    "end": "3096599"
  },
  {
    "text": "ms. first name equals nilson that's what I used to be",
    "start": "3096599",
    "end": "3104400"
  },
  {
    "text": "called how can we stop that well let's well these are Auto properties um let's",
    "start": "3104400",
    "end": "3110119"
  },
  {
    "text": "just take the seter away problem solved they can't mutate me um nice red",
    "start": "3110119",
    "end": "3116880"
  },
  {
    "text": "squiggle but we like object initializers and now we can't use those either",
    "start": "3116880",
    "end": "3122440"
  },
  {
    "text": "because they rely on mutation so at this point we add a version of the setter that we call a knit that only is allowed",
    "start": "3122440",
    "end": "3131440"
  },
  {
    "text": "during object initialization and then it closes the door so now we can we can um use object inter sizes to create",
    "start": "3131440",
    "end": "3137680"
  },
  {
    "text": "immutable objects great so that problem solved I can't mutate it but then what if I want to mutate it",
    "start": "3137680",
    "end": "3146680"
  },
  {
    "text": "what what happened when I actually changed my name then are you doomed to like be 18 till you die",
    "start": "3146680",
    "end": "3155319"
  },
  {
    "text": "or of course not but but there's a there's a sort of a pattern called non-destructive mutation how do you",
    "start": "3155319",
    "end": "3161839"
  },
  {
    "text": "mutate when you can't mutate well you create a new copy with the things change that you want to change but the old copy",
    "start": "3161839",
    "end": "3167920"
  },
  {
    "text": "is still there so it's all about information you create the new information that is now current and then you store that somewhere with the other",
    "start": "3167920",
    "end": "3174200"
  },
  {
    "text": "current information but when you need to change it you create a new one again and that's the one to keep track of but the old ones can still be around which is",
    "start": "3174200",
    "end": "3181359"
  },
  {
    "text": "actually really useful sometimes like if you want to do undo uh well the Old One's still there",
    "start": "3181359",
    "end": "3186400"
  },
  {
    "text": "great and for like keeping track record keeping and speaking of",
    "start": "3186400",
    "end": "3193640"
  },
  {
    "text": "Records um yes so we can do it by creating a new",
    "start": "3194240",
    "end": "3199880"
  },
  {
    "text": "one from the old one but imagine the hassle right um how do I create a new",
    "start": "3199880",
    "end": "3205680"
  },
  {
    "text": "person from an old you'd think it was you know I could do it up here I could say uh old you know VAR meds equal",
    "start": "3205680",
    "end": "3214680"
  },
  {
    "text": "equals a new person with um you know",
    "start": "3214680",
    "end": "3220599"
  },
  {
    "text": "with this object initializer up there but but that would actually even be wrong because we are in an object or",
    "start": "3220599",
    "end": "3226599"
  },
  {
    "text": "programming language and I was in fact a student and so if I create a new person instead of a new student I just lost the",
    "start": "3226599",
    "end": "3233119"
  },
  {
    "text": "fact that I was a student and all the information associated with it that doesn't even work work actually creating a new one from an old one it turns out",
    "start": "3233119",
    "end": "3239799"
  },
  {
    "text": "like copying it's type dependent Behavior so I could go down here do it",
    "start": "3239799",
    "end": "3246960"
  },
  {
    "text": "the virtual way and say actually let me have a Wither let me have a Wither for every property that is like",
    "start": "3246960",
    "end": "3254760"
  },
  {
    "text": "person it should probably be public uh public uh public person with first",
    "start": "3254760",
    "end": "3264680"
  },
  {
    "text": "name here's the new first name String",
    "start": "3264680",
    "end": "3270040"
  },
  {
    "text": "name you know create a new one grab all the stuff but make it virtual so that",
    "start": "3270040",
    "end": "3278400"
  },
  {
    "text": "the so that the student can override it and also remember to and and create a a",
    "start": "3278400",
    "end": "3283480"
  },
  {
    "text": "student instead and also remember to copy the ID and do that for every property I have in and override it in",
    "start": "3283480",
    "end": "3290200"
  },
  {
    "text": "every class I have and rosling does this and it sucks so much that we have AO at",
    "start": "3290200",
    "end": "3297319"
  },
  {
    "text": "code generation for it because writing it out just badly badly",
    "start": "3297319",
    "end": "3304040"
  },
  {
    "text": "sucks what to do I said records before I'm going to stand by we introduce a",
    "start": "3304040",
    "end": "3310200"
  },
  {
    "text": "language feature which is let's have let's have a version that changes let a",
    "start": "3310200",
    "end": "3315400"
  },
  {
    "text": "version of classes that changes the default to being the value oriented instead of object oriented to have to be",
    "start": "3315400",
    "end": "3322440"
  },
  {
    "text": "information instead of um substance if you if you will if let's get rid of all",
    "start": "3322440",
    "end": "3328599"
  },
  {
    "text": "this stuff that we accumulated here um and um so we so we introduce a thing you",
    "start": "3328599",
    "end": "3336119"
  },
  {
    "text": "can say I'm just going to leave this crap up here for a second um a thing you can say in your class is say this is",
    "start": "3336119",
    "end": "3341599"
  },
  {
    "text": "these are records they're information um yes these are",
    "start": "3341599",
    "end": "3349440"
  },
  {
    "text": "record singular okay now they records that was that wasn't bad in and of",
    "start": "3349440",
    "end": "3354799"
  },
  {
    "text": "itself but now that means they have all of a sudden they're completely value based um they they get a different",
    "start": "3354799",
    "end": "3361520"
  },
  {
    "text": "equality they get actually they get a nice value based um two string as well",
    "start": "3361520",
    "end": "3367880"
  },
  {
    "text": "um so I actually don't need the render when I write it out I can just um let's get rid of this and we can fit things on",
    "start": "3367880",
    "end": "3375160"
  },
  {
    "text": "a screen again so I can just write out meds because it's going to be looking really nice now um and then the the",
    "start": "3375160",
    "end": "3383680"
  },
  {
    "text": "other thing you get from it being a record is I can I get with Expressions",
    "start": "3383680",
    "end": "3389200"
  },
  {
    "text": "so I can say VAR old mads say if I want to",
    "start": "3389200",
    "end": "3394480"
  },
  {
    "text": "express the mads before I got married I can say old mads is",
    "start": "3394480",
    "end": "3399880"
  },
  {
    "text": "mads with oh if I could spell things where",
    "start": "3399880",
    "end": "3407039"
  },
  {
    "text": "old mads equals mads with oh my God this",
    "start": "3407039",
    "end": "3412920"
  },
  {
    "text": "is terrible",
    "start": "3412920",
    "end": "3416078"
  },
  {
    "text": "oh never mind that with let's just close some things first",
    "start": "3418359",
    "end": "3424960"
  },
  {
    "text": "name equals sorry not first name last name you get the idea last name equals",
    "start": "3424960",
    "end": "3433799"
  },
  {
    "text": "Nelson um and now so because they're records they get a syntax where you can",
    "start": "3433799",
    "end": "3439599"
  },
  {
    "text": "create a new one from an old one and then all that implementing it virtually making sure it actually keep keeps its",
    "start": "3439599",
    "end": "3446799"
  },
  {
    "text": "runtime type and all the hidden information we generate the code for you",
    "start": "3446799",
    "end": "3451839"
  },
  {
    "text": "actually value based equality and an inheritance system is also like",
    "start": "3451839",
    "end": "3457480"
  },
  {
    "text": "depressingly complex and you will get it wrong if you try to write it yourself we do that for you as well so anytime you",
    "start": "3457480",
    "end": "3463000"
  },
  {
    "text": "in this situation where I just I want value equality but I want it to work over a hierarchy of things and I don't",
    "start": "3463000",
    "end": "3469280"
  },
  {
    "text": "want it to ever forget to check whether something is I don't want to forget to",
    "start": "3469280",
    "end": "3474480"
  },
  {
    "text": "compare the IDS because I haven't to ask a place where I didn't know it was it was a student you use records and they",
    "start": "3474480",
    "end": "3480280"
  },
  {
    "text": "do it for you so that's sort of like the last um functional feature records don't",
    "start": "3480280",
    "end": "3486640"
  },
  {
    "text": "have to be immutable um but they are value like um",
    "start": "3486640",
    "end": "3492000"
  },
  {
    "text": "just like structs don't have to be immutable but they're somewhat value like right so uh in practice they they",
    "start": "3492000",
    "end": "3499520"
  },
  {
    "text": "are usually immutable um so there you go that's a that's the first nine versions of c um",
    "start": "3499520",
    "end": "3506160"
  },
  {
    "text": "um 10 if you count um record structs which we added in the following release",
    "start": "3506160",
    "end": "3513039"
  },
  {
    "text": "um and a whole bunch of things achieved with a functional program I hope that was instructive for you and um maybe",
    "start": "3513039",
    "end": "3522079"
  },
  {
    "text": "makes you think about some things differently gives you an appetite for for trying a real function first",
    "start": "3522079",
    "end": "3527680"
  },
  {
    "text": "language like f and then come back and see how that feels to you as a c",
    "start": "3527680",
    "end": "3532880"
  },
  {
    "text": "programmer uh if you are one I forgot to ask in the beginning it might be people here who are not C programmers welcome",
    "start": "3532880",
    "end": "3539960"
  },
  {
    "text": "um but uh yeah either way I hope that that kind of gives you that that big picture and we are not done yet stealing",
    "start": "3539960",
    "end": "3546079"
  },
  {
    "text": "from functional programming if you come tomorrow um you'll see me dabble a little bit around unions which are what",
    "start": "3546079",
    "end": "3554039"
  },
  {
    "text": "they have because they don't have inheritance and why that might have enough and of an",
    "start": "3554039",
    "end": "3560559"
  },
  {
    "text": "alternative benefit that we should some find a way to incorporate those into C so the journey continues",
    "start": "3560559",
    "end": "3566559"
  },
  {
    "text": "tomorrow but for today um thank you very much thanks for not having so many questions because I wouldn't have made",
    "start": "3566559",
    "end": "3572160"
  },
  {
    "text": "it to the end but remember you can come and uh and chat with me down at the booth in just a second thank you",
    "start": "3572160",
    "end": "3578450"
  },
  {
    "text": "[Applause]",
    "start": "3578450",
    "end": "3586570"
  }
]