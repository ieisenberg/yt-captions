[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "alright let's get started welcome to the session on concurrent programming in C++ we're going to talk about some of the",
    "start": "13019",
    "end": "19770"
  },
  {
    "text": "multi-threading facilities available in c++ I have to say that I was quite pleasantly surprised at the facilities",
    "start": "19770",
    "end": "25919"
  },
  {
    "text": "available because I think they've done a fairly good job in terms of bringing up",
    "start": "25919",
    "end": "31019"
  },
  {
    "text": "to speed several things that we learned from a lot of other languages and C++",
    "start": "31019",
    "end": "36120"
  },
  {
    "text": "has done a fairly good job what are some of the issues though well the first problem is concurrent programming is",
    "start": "36120",
    "end": "42629"
  },
  {
    "text": "really hard it is it is not something that we can do so easily a lot of times",
    "start": "42629",
    "end": "48479"
  },
  {
    "text": "when we write code with single thread the thread the code is fairly easy to understand easy to maintain people come",
    "start": "48479",
    "end": "55650"
  },
  {
    "text": "to work they smile at each other in the mornings and then you decide to use multi-threading and the court turns into",
    "start": "55650",
    "end": "61140"
  },
  {
    "text": "a monster and nobody ever smiles at each other after that and then we start debugging endlessly we have to be very",
    "start": "61140",
    "end": "68070"
  },
  {
    "text": "careful using some of those techniques but one other problem that used to be traditional in C++ is C+ was always you",
    "start": "68070",
    "end": "75720"
  },
  {
    "text": "know touted portability when it came to multi-threading though that was not really the case in the past thankfully",
    "start": "75720",
    "end": "81420"
  },
  {
    "text": "the new libraries actually bring back portability quite a bit so that's one of the other things they have done really well let's take a look at some of the",
    "start": "81420",
    "end": "87929"
  },
  {
    "text": "things they have done in terms of the library itself the first and foremost is platform neutrality you can pretty much",
    "start": "87929",
    "end": "94229"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "take this code they'll map it over and you can run this across different machines which is a really good thing well one of the very first things to",
    "start": "94229",
    "end": "100409"
  },
  {
    "text": "consider is how many threads are advised on your system so that's basically",
    "start": "100409",
    "end": "105899"
  },
  {
    "text": "called as a hardware concurrency well let's take a look at this really quickly you know hardware concurrency what does",
    "start": "105899",
    "end": "112530"
  },
  {
    "text": "that really mean so pretty much I'm gonna output right here standard let's say thread and then I'm gonna ask for",
    "start": "112530",
    "end": "118679"
  },
  {
    "text": "the hardware and then I'm gonna say concurrency and in this case of course",
    "start": "118679",
    "end": "124560"
  },
  {
    "text": "I'm gonna ask for that number on on my machine it tells me it's eight it's a",
    "start": "124560",
    "end": "130649"
  },
  {
    "text": "lie I don't have eight cores on my machine I have four cores on my machine but it still wants you to understand me",
    "start": "130649",
    "end": "137340"
  },
  {
    "text": "that I have eight that's because it's using hyper threading well the first question to ask is why why bother what's",
    "start": "137340",
    "end": "144150"
  },
  {
    "text": "the big deal I think this is important for us no as developers because we can get",
    "start": "144150",
    "end": "149840"
  },
  {
    "text": "pretty overzealous and say hey I can create as many threads as I want to so",
    "start": "149840",
    "end": "155239"
  },
  {
    "text": "let's say you have a fairly big problem and you decide to say I got all these values in front of me I'm gonna throw",
    "start": "155239",
    "end": "161030"
  },
  {
    "text": "threads on them you could pretty much write the program in a way and I've done",
    "start": "161030",
    "end": "166099"
  },
  {
    "text": "this where you were parallel code can and will run a lot slower than your",
    "start": "166099",
    "end": "173090"
  },
  {
    "text": "sequential code that's not the intention of using parallel programming isn't it so what does this really mean why should",
    "start": "173090",
    "end": "179480"
  },
  {
    "text": "we really care about and that's what I want to really talk about in the beginning because we can be very naive",
    "start": "179480",
    "end": "184760"
  },
  {
    "text": "about it so the question is how many threads should you use not how many",
    "start": "184760",
    "end": "190400"
  },
  {
    "text": "threads can you create you can create as many threads as amount of memory is available in the system we'll all of you",
    "start": "190400",
    "end": "195829"
  },
  {
    "text": "to do how many threads should you create well the answer to that question heavily depends on depends on a few factors if",
    "start": "195829",
    "end": "202879"
  },
  {
    "text": "you are programming computation intensive what that means says my code",
    "start": "202879",
    "end": "209750"
  },
  {
    "text": "is number crunching I am going to get data and do lot of computations on it",
    "start": "209750",
    "end": "216169"
  },
  {
    "text": "I'm working for a client right now and what we do for them is we got about",
    "start": "216169",
    "end": "222470"
  },
  {
    "text": "sixty million piece of data that we have to process and the minute you touch one",
    "start": "222470",
    "end": "227959"
  },
  {
    "text": "piece of data that produces 15 million babies to process and you can imagine",
    "start": "227959",
    "end": "233540"
  },
  {
    "text": "we're gonna number crunch these through a series of math equations on one day I",
    "start": "233540",
    "end": "238940"
  },
  {
    "text": "just clocked and found out how many competition was running when I called one function and that resulted in fifty",
    "start": "238940",
    "end": "245120"
  },
  {
    "text": "three billion computations and and at the very nerve-wracking work because",
    "start": "245120",
    "end": "250159"
  },
  {
    "text": "thankfully the clients are extremely nice people otherwise it wouldn't be working there they'll come to me and say",
    "start": "250159",
    "end": "255199"
  },
  {
    "text": "how are things going and I would say I worked so hard an entire day I made things faster by two seconds and they",
    "start": "255199",
    "end": "262430"
  },
  {
    "text": "would Pat me in the back and say good job now make it faster and go away and and and this is really number crunching",
    "start": "262430",
    "end": "268940"
  },
  {
    "text": "work we ought to be very careful how many threads we throw on it if it's computation intensive your threads are",
    "start": "268940",
    "end": "274340"
  },
  {
    "text": "going to be busy doing work and the least thing you want to do is to take a thread which is busy doing the work",
    "start": "274340",
    "end": "280249"
  },
  {
    "text": "the CPU that's busy doing the work and say get off so I can put another job on the CPU so in that case then I'm gonna",
    "start": "280249",
    "end": "287839"
  },
  {
    "text": "threads you should maximum have is less than or equal to the number of course that's why this number is extremely",
    "start": "287839",
    "end": "294289"
  },
  {
    "text": "important on the other hand if you are using an i/o intensive operation you",
    "start": "294289",
    "end": "300439"
  },
  {
    "text": "could go one minus the blocking factor where the blocking factor is the amount",
    "start": "300439",
    "end": "305509"
  },
  {
    "text": "of time a task you're gonna spend time being blocked so if you have an i/o task",
    "start": "305509",
    "end": "310939"
  },
  {
    "text": "for a competition to this task the blocking factor is zero which is in a number of course everywhere 1 minus 0 is",
    "start": "310939",
    "end": "317089"
  },
  {
    "text": "1 number of course is the number of threads maximum on the other hand if you eye are intensive if I'm sleeping half",
    "start": "317089",
    "end": "323029"
  },
  {
    "text": "the time it's gonna be number of course divided by 1 minus 0.5 which means you could potentially give me twice the",
    "start": "323029",
    "end": "330439"
  },
  {
    "text": "number of cores as the number of threads in fact if I am sleeping 90% of the time",
    "start": "330439",
    "end": "335569"
  },
  {
    "text": "you can give me 90 10 times more core than the number of threads as a number",
    "start": "335569",
    "end": "342109"
  },
  {
    "text": "cores available what this really means is just because you can create a lot of threads doesn't mean you should you",
    "start": "342109",
    "end": "348919"
  },
  {
    "text": "should be very careful about how many threads you create and when you exceed this limit your performance actually",
    "start": "348919",
    "end": "354049"
  },
  {
    "text": "goes down drastically gotta be very careful about it and that's one of the reasons why this number is pretty",
    "start": "354049",
    "end": "359149"
  },
  {
    "text": "critical for you to know so when you start your process you want to ask how many threads can i really use on that",
    "start": "359149",
    "end": "365899"
  },
  {
    "text": "given hardware and depending on your particular hardware you need to decide what that what that real number is at",
    "start": "365899",
    "end": "372739"
  },
  {
    "text": "work the machines I'm using have literally hundreds and hundreds of cores on them so I can configure them to go a",
    "start": "372739",
    "end": "378529"
  },
  {
    "text": "lot more than enough obviously on a little box right here so given that how do we really start and",
    "start": "378529",
    "end": "384139"
  },
  {
    "text": "use the threads well that's that's easy one to do you can take a particular function and delegate that to a thread",
    "start": "384139",
    "end": "390349"
  },
  {
    "text": "right off the bat very easily so for example let's say I have a function called you know print info right here",
    "start": "390349",
    "end": "396139"
  },
  {
    "text": "and this is going to simply it doesn't really take any arguments right now and all I'm gonna do is output let's say",
    "start": "396139",
    "end": "402349"
  },
  {
    "text": "info and then in this case let's say standard and then I'm gonna ask for the thread and I'll ask for the gate ID of",
    "start": "402349",
    "end": "409339"
  },
  {
    "text": "the thread and then I will ask it to be printed out and then maybe our end so this is gonna print me the thread",
    "start": "409339",
    "end": "415400"
  },
  {
    "text": "information but how do I really delegate to this particular thread well that's the easy part also I can simply say",
    "start": "415400",
    "end": "420980"
  },
  {
    "text": "thread I can create a thread right off the bat and schedule the print it for",
    "start": "420980",
    "end": "426350"
  },
  {
    "text": "execute in that particular thread so you pretty much create a thread object really easy not very difficult at all",
    "start": "426350",
    "end": "432410"
  },
  {
    "text": "so you basically create the thread object you can even send a little data to that method if you're really interested in this case I'm not sending",
    "start": "432410",
    "end": "438500"
  },
  {
    "text": "any but that's perfectly fine you can start it but one of the things you need to really do after this is you're gonna",
    "start": "438500",
    "end": "443870"
  },
  {
    "text": "call it joy in and you're gonna ask the thread to really wait for the main thread to wait for that other thread to",
    "start": "443870",
    "end": "450200"
  },
  {
    "text": "complete at this point so you can actually wait and report on that on that result when it comes comes out so",
    "start": "450200",
    "end": "456860"
  },
  {
    "text": "obviously in this case that's a get underscore ID on the current thread not the thread itself so I'm going to say this underscore earth right so this is",
    "start": "456860",
    "end": "464390"
  },
  {
    "text": "going to be information about the current thread or whatever the thread ID is well that was not too hard we got the",
    "start": "464390",
    "end": "469880"
  },
  {
    "text": "ID of the thread depending on the machine you are running it's going to be different I'm running on the Mac right now this particular slide I created I",
    "start": "469880",
    "end": "477290"
  },
  {
    "text": "think on Windows so you can see the numbers are fairly different so you can see that it's going to be some value",
    "start": "477290",
    "end": "482330"
  },
  {
    "text": "being reported on the other hand I'm going to create a thread one let's say I'm gonna create a thread two right here",
    "start": "482330",
    "end": "488240"
  },
  {
    "text": "so I can create multiple threads and then of course I can ask you to wait for thread one I can also ask it to wait for",
    "start": "488240",
    "end": "493760"
  },
  {
    "text": "thread two to be done and I can run this and see what the result is and that also illustrates one small issue that you may",
    "start": "493760",
    "end": "500300"
  },
  {
    "text": "run into notice that in this case I have them printed and I have a ndele but",
    "start": "500300",
    "end": "506480"
  },
  {
    "text": "these kind of jumbled up this couldn't have been easier for me because I wanted to show you this problem usually doesn't",
    "start": "506480",
    "end": "511760"
  },
  {
    "text": "happen so easily today's my lucky day and you can output really messed up that's one of the things we have to be",
    "start": "511760",
    "end": "517340"
  },
  {
    "text": "very careful about how these things are going to appear so when I run this code the result may actually vary depending",
    "start": "517340",
    "end": "522950"
  },
  {
    "text": "on what you do so I'm just running this here and you can see that it's quite jumbled up when it comes to the output",
    "start": "522950",
    "end": "528230"
  },
  {
    "text": "even though I have an end all in there well what do we do about you know when things collide like this welcome to that",
    "start": "528230",
    "end": "533900"
  },
  {
    "start": "532000",
    "end": "532000"
  },
  {
    "text": "in just a minute so you create thread very easily by simply using the thread object and this breaks the question we",
    "start": "533900",
    "end": "540830"
  },
  {
    "text": "got to know what really is happening there are two distinct things that you need to keep in your mind",
    "start": "540830",
    "end": "547310"
  },
  {
    "text": "there is the threat of execution and there is the thread object and it's",
    "start": "547310",
    "end": "552350"
  },
  {
    "text": "important to keep these two things in mind very clearly because our human mind is very good at getting confused between",
    "start": "552350",
    "end": "558290"
  },
  {
    "text": "the two the threat of execution is going to happen at the up at the system level",
    "start": "558290",
    "end": "563990"
  },
  {
    "text": "you have no control over it most of the time the thread object is a pure abstraction a thread object is an object",
    "start": "563990",
    "end": "570740"
  },
  {
    "text": "that allows you to get information about this thread of execution and - maybe monitor this execution and you need to",
    "start": "570740",
    "end": "577160"
  },
  {
    "text": "keep these two things in mind and when you create a thread object the threat of execution starts running and the thread",
    "start": "577160",
    "end": "584270"
  },
  {
    "text": "object is attached to that particular thread of execution when you say join your thread object is going to block",
    "start": "584270",
    "end": "592790"
  },
  {
    "text": "your calling thread until the thread of execution actually finishes if you don't",
    "start": "592790",
    "end": "597830"
  },
  {
    "text": "care about it you could attack and say like the thread of execution go on its own I am NOT interested in monitoring it",
    "start": "597830",
    "end": "604760"
  },
  {
    "text": "anymore you can detach yourselves and at that point the thread object will be completely unattached to the thread of",
    "start": "604760",
    "end": "611089"
  },
  {
    "text": "execution it no longer monitors the thread of execution so keep those two things in mind the thread object versus",
    "start": "611089",
    "end": "617030"
  },
  {
    "text": "the thread of execution itself so we create a thread really easily how else",
    "start": "617030",
    "end": "622970"
  },
  {
    "text": "can we create a thread well in this example I just passed a function to the thread to create it but there are two",
    "start": "622970",
    "end": "628910"
  },
  {
    "text": "other options available to you as well one of them is you could actually create",
    "start": "628910",
    "end": "634460"
  },
  {
    "text": "I'll come back to this in just a few minutes you can also create our object like in this case I have a class called",
    "start": "634460",
    "end": "640220"
  },
  {
    "text": "sample as you can see and all that the sample contains is an operator overloaded parentheses and once you",
    "start": "640220",
    "end": "647390"
  },
  {
    "text": "overload the operator overloaded method parentheses you actually pass an object of that type to the thread and it would",
    "start": "647390",
    "end": "654800"
  },
  {
    "text": "then call that particular method that's another easy way to do it a third way which is my favorite way is you can pass",
    "start": "654800",
    "end": "661430"
  },
  {
    "text": "a lambda expression as well so here is an example of passing a lambda",
    "start": "661430",
    "end": "666440"
  },
  {
    "text": "expression where you can just simply say I want to pass this lambda called well",
    "start": "666440",
    "end": "671480"
  },
  {
    "text": "of course lambdas are anonymous methods and here's a lambda I'm passing two thread one and this lambda will be",
    "start": "671480",
    "end": "677270"
  },
  {
    "text": "executed as soon as you kick start this particular thread so these three options you can send a",
    "start": "677270",
    "end": "682460"
  },
  {
    "text": "function you can send an object that has an operator overloaded parentheses and then you can also pass a lambda",
    "start": "682460",
    "end": "687950"
  },
  {
    "text": "expression as well as the three different things that you want to send to the thread but obviously in this example we just saw there is one small",
    "start": "687950",
    "end": "694610"
  },
  {
    "text": "problem as we saw that the output is kind of messed up and jumbled up what can we do about it",
    "start": "694610",
    "end": "700130"
  },
  {
    "text": "well what we are doing here is something called evil programming and that is we are using a shared resource from",
    "start": "700130",
    "end": "707450"
  },
  {
    "text": "multiple different threads and that usually doesn't go really well so what do we do about it well one solution for",
    "start": "707450",
    "end": "713060"
  },
  {
    "text": "that is to provide a mutex that you can provide in here so you could create for",
    "start": "713060",
    "end": "718280"
  },
  {
    "text": "example for instance a mutex right here called let's say see out meu tech or whatever you want to call it as and then",
    "start": "718280",
    "end": "725060"
  },
  {
    "text": "I create a mutex and then what I can do here is I can simply say that the sea out mutex I can say lock on that mutex",
    "start": "725060",
    "end": "732170"
  },
  {
    "text": "and I one might when I'm done with that I could say in this case unlock and release the lock on it so you're saying",
    "start": "732170",
    "end": "739250"
  },
  {
    "text": "when multiple threads come in let the threads you know fight over each other it is kind of like the bathroom door",
    "start": "739250",
    "end": "746540"
  },
  {
    "text": "right you may have multiple people using the same house but you have one bathroom it's good idea to lock the door when you",
    "start": "746540",
    "end": "753230"
  },
  {
    "text": "go in and then as a result of course you can you know be the one leaf person using the bathroom which i think is a",
    "start": "753230",
    "end": "759560"
  },
  {
    "text": "nice thing to do but of course if you have teenagers at your house you know they go in but they never come out and",
    "start": "759560",
    "end": "766490"
  },
  {
    "text": "that can be kind of annoying that's exactly the problem with this there's no",
    "start": "766490",
    "end": "771910"
  },
  {
    "text": "guarantee of unlocking and you bang on the door and say get out of there you've",
    "start": "771910",
    "end": "777200"
  },
  {
    "text": "been too long well how do you deal with that we'll talk about that in just a few minutes so the whole idea here is to",
    "start": "777200",
    "end": "782870"
  },
  {
    "text": "lock and unlock so that we can you know mind be mindful of this resource and you can see how nicely now they are in two",
    "start": "782870",
    "end": "788870"
  },
  {
    "text": "different lines rather than being jumbled up on one line because they kind of synchronized and one used and the",
    "start": "788870",
    "end": "795320"
  },
  {
    "text": "other used no guarantees which one actually used it but of course one goes in the other comes out then the other",
    "start": "795320",
    "end": "801710"
  },
  {
    "text": "one can go in so that is an example of how you can use a mutex to resolve",
    "start": "801710",
    "end": "806720"
  },
  {
    "text": "conflict between threads as well we'll talk more about this a little bit later well so think of this abstraction I",
    "start": "806720",
    "end": "812570"
  },
  {
    "text": "talked about separation of the thread from the threat of execution from the thread object itself and you want to be",
    "start": "812570",
    "end": "818050"
  },
  {
    "text": "mindful of this talking about which notice in this example I have two threads I have created this is more of a",
    "start": "818050",
    "end": "825100"
  },
  {
    "text": "feature in C++ which I'm really not sure if I like or don't like I'm still kind of thinking about it I have a thread",
    "start": "825100",
    "end": "831760"
  },
  {
    "text": "running on that still thinking but in this case when I run this code notice it is giving you a error right there it's",
    "start": "831760",
    "end": "838149"
  },
  {
    "text": "just terminating bla bla bla what it is telling you is that you created threads",
    "start": "838149",
    "end": "843639"
  },
  {
    "text": "but you never really bother to join them and and that's what it's complaining",
    "start": "843639",
    "end": "848740"
  },
  {
    "text": "about so if you don't join a particular thread you get an error but when I do join the threads you can see that I",
    "start": "848740",
    "end": "855190"
  },
  {
    "text": "don't get any errors at all so in a way you could argue this is a nice thing you get an error if you were forgetful e not",
    "start": "855190",
    "end": "861399"
  },
  {
    "text": "joining a thread what if I don't care to join a thread what if I don't really have a reason to wait for it then do a",
    "start": "861399",
    "end": "868240"
  },
  {
    "text": "detach instead of a join and that's perfectly fine as well and you could do",
    "start": "868240",
    "end": "873490"
  },
  {
    "text": "a detaching of the thread but of course when you do detach a thread when I run this you didn't see any output at all so",
    "start": "873490",
    "end": "880029"
  },
  {
    "text": "what in the world is happening well detach means you have just created",
    "start": "880029",
    "end": "885250"
  },
  {
    "text": "what's called that demon thread so what is a demon thread a demon thread is a thread that does not hold the main",
    "start": "885250",
    "end": "892240"
  },
  {
    "text": "thread hostage so if a non non demon thread usually will require the main to",
    "start": "892240",
    "end": "898449"
  },
  {
    "text": "be running and the program to be running when those threads are alive a demon thread says if the main quits and all",
    "start": "898449",
    "end": "906100"
  },
  {
    "text": "the non demon thread squared a demon thread will never hold your program running so if you detach a thread you",
    "start": "906100",
    "end": "913209"
  },
  {
    "text": "are simply saying I don't care about you you can just keep running I'm gonna shut down and go home and that's basically",
    "start": "913209",
    "end": "919329"
  },
  {
    "text": "what a demon thread s so it's kind of like you tell a staff saying that you",
    "start": "919329",
    "end": "924880"
  },
  {
    "text": "know wait in this room and turn off the light when there is nobody in the room obviously you don't want the staff to",
    "start": "924880",
    "end": "931750"
  },
  {
    "text": "say I am here so I'm gonna keep the light open usually it means nobody other than you are in the room that's kind of",
    "start": "931750",
    "end": "938709"
  },
  {
    "text": "the difference between a demon thread versus a non demon thread a non demon thread will keep the you know",
    "start": "938709",
    "end": "943720"
  },
  {
    "text": "application running a demon thread will not well detaches on a way for you to create non daemon --thread saying I don't care",
    "start": "943720",
    "end": "949800"
  },
  {
    "text": "if you're running or not so we can join we can detach either one is fine and we",
    "start": "949800",
    "end": "955590"
  },
  {
    "text": "saw how to detach as well that was not really hard at all but of course you can ask if a threat is joinable so there are",
    "start": "955590",
    "end": "962970"
  },
  {
    "text": "two things if a tread thread has been you've not done anything to a thread other than create it it is joinable if",
    "start": "962970",
    "end": "970440"
  },
  {
    "text": "you join a thread then it is no longer joinable because you already joined it",
    "start": "970440",
    "end": "975870"
  },
  {
    "text": "if you detach from a thread even though the thread of execution is running the thread object is no longer joinable",
    "start": "975870",
    "end": "982530"
  },
  {
    "text": "because you have detached from it so that is something for you to keep in mind if you will so you can go ahead and",
    "start": "982530",
    "end": "988410"
  },
  {
    "text": "ask the question output right here a thread one dart joinable you can say a",
    "start": "988410",
    "end": "994590"
  },
  {
    "text": "joinable and you can ask that question whether this is joinable and in this case it tells you one right there which",
    "start": "994590",
    "end": "1001430"
  },
  {
    "text": "means it is joinable on the other hand after I call the detach if I ask for exactly the same question you notice",
    "start": "1001430",
    "end": "1008990"
  },
  {
    "text": "it's a zero right there because it's been detached and it no longer joinable so that's a way for you to know whether",
    "start": "1008990",
    "end": "1014690"
  },
  {
    "text": "you can still you have the ability to join a thread or not you may have a thread object with you by mistake but it",
    "start": "1014690",
    "end": "1021680"
  },
  {
    "text": "is attached already from the thread of execution meaning don't mess with it anymore it's pretty pointless to be",
    "start": "1021680",
    "end": "1026900"
  },
  {
    "text": "using at this point so we talked about joining but there's one other problem though what if there is an exception in",
    "start": "1026900",
    "end": "1034400"
  },
  {
    "start": "1028000",
    "end": "1028000"
  },
  {
    "text": "the code you always have to worry about exceptions isn't it so what if the code blows up if you have a joy in and if you",
    "start": "1034400",
    "end": "1041180"
  },
  {
    "text": "have an exception your join is not going to be called in that case of course your program is going to give you an error",
    "start": "1041180",
    "end": "1046220"
  },
  {
    "text": "because you neither joy nor detached what do you do well you could try to put a try and catch and within a catch block",
    "start": "1046220",
    "end": "1053690"
  },
  {
    "text": "you could put a joy in outside the catch you can put a join but that code becomes really really messy and you kind of",
    "start": "1053690",
    "end": "1060410"
  },
  {
    "text": "scratch your head and say gosh the code regularly becomes ugly how'd we manage this so so here's what you don't want to",
    "start": "1060410",
    "end": "1067220"
  },
  {
    "text": "be doing putting a join here and putting a join over here that can become really really messy so one way to solve this",
    "start": "1067220",
    "end": "1074600"
  },
  {
    "text": "particular problem to avoid these verbosity and error-prone code is to use the so called ra íí-",
    "start": "1074600",
    "end": "1080920"
  },
  {
    "text": "pattern which is the required resources acquisition as resource initialization",
    "start": "1080920",
    "end": "1086200"
  },
  {
    "text": "pattern so what I'm doing here is I'm creating my own thread class as you can",
    "start": "1086200",
    "end": "1091270"
  },
  {
    "text": "see so this thread class internally is gonna create a thread but i use a enum",
    "start": "1091270",
    "end": "1097690"
  },
  {
    "text": "called join or detach just to make my life easier you can tell me what your intention is whether to join the thread",
    "start": "1097690",
    "end": "1103240"
  },
  {
    "text": "or to detach from it but then the beauty of this one is that in the destructor I",
    "start": "1103240",
    "end": "1108820"
  },
  {
    "text": "am going to either call the join or I'm gonna call the detach and of course if",
    "start": "1108820",
    "end": "1114340"
  },
  {
    "text": "there was an exception this object will still be destroyed and as a result either I throw a join ordered attached",
    "start": "1114340",
    "end": "1121030"
  },
  {
    "text": "will happen I don't have to worry about it later on in the code so you can wrap your thread into this object then you",
    "start": "1121030",
    "end": "1128260"
  },
  {
    "text": "don't have to worry about calling detach don't have to worry about calling you know join you let this object deal with",
    "start": "1128260",
    "end": "1134110"
  },
  {
    "text": "that by specifying how would this look like well the way you would use this is as follows you would say a thread thread",
    "start": "1134110",
    "end": "1141370"
  },
  {
    "text": "notice this thread now is our own class not the STD colon colon thread which",
    "start": "1141370",
    "end": "1146380"
  },
  {
    "text": "then wraps the thread as as part of it and then manages the you know death of",
    "start": "1146380",
    "end": "1151870"
  },
  {
    "text": "that particular object if exception were thrown is gonna take care of it so you can pretty much wrap your resource",
    "start": "1151870",
    "end": "1158020"
  },
  {
    "text": "around it and deal with it properly and of course there are a few things you gotta be very careful about how do you",
    "start": "1158020",
    "end": "1163630"
  },
  {
    "start": "1160000",
    "end": "1160000"
  },
  {
    "text": "pass your object to this particular thread so in this example I have something called Sam and I'm trying to",
    "start": "1163630",
    "end": "1170380"
  },
  {
    "text": "pass Sam to this thread this is also known as a bad idea because it's going to try to make a copy of it and I",
    "start": "1170380",
    "end": "1176770"
  },
  {
    "text": "incremented Sam's age but it's an old age so what are you going to do instead what you want to do is to use a",
    "start": "1176770",
    "end": "1182380"
  },
  {
    "text": "reference so you can send a wrapper reference rather than sending the object itself by reference and that way you are",
    "start": "1182380",
    "end": "1189010"
  },
  {
    "text": "really passing the object reference properly so little things like that you gotta be very careful to pass it around",
    "start": "1189010",
    "end": "1195010"
  },
  {
    "text": "but that's nothing new for as you've done this in C++ it always surprises you when you don't expect it so so that you",
    "start": "1195010",
    "end": "1200920"
  },
  {
    "text": "have to be very careful about how you pass these objects around now having said that the thread is the easiest",
    "start": "1200920",
    "end": "1207550"
  },
  {
    "start": "1203000",
    "end": "1203000"
  },
  {
    "text": "thing but then the fun begins No what happens is when you start running",
    "start": "1207550",
    "end": "1213230"
  },
  {
    "text": "multiple threads you always want to communicate between different threads so what is the worst way to communicate the",
    "start": "1213230",
    "end": "1219950"
  },
  {
    "text": "worst way to communicate is using what is called a shared immutability now",
    "start": "1219950",
    "end": "1225409"
  },
  {
    "text": "think about this for a minute mutability is extremely common in C++",
    "start": "1225409",
    "end": "1230690"
  },
  {
    "text": "we mutate stuff every corner return and a lot of times we do this because it's a",
    "start": "1230690",
    "end": "1236059"
  },
  {
    "text": "lot performant and so mutability is okay what about sharing well sharing is a",
    "start": "1236059",
    "end": "1242509"
  },
  {
    "text": "good thing remember what mom told us we should really share that's a good habit so mutability is okay sharing is really",
    "start": "1242509",
    "end": "1249499"
  },
  {
    "text": "good but shared mutability is devil's work and the minute you bring and shared",
    "start": "1249499",
    "end": "1255649"
  },
  {
    "text": "mutability all kinds of problems come to life and this is when it becomes really really really sad the way we work so",
    "start": "1255649",
    "end": "1262609"
  },
  {
    "text": "shared mobility is purely evil we should try to avoid this as much as we can but",
    "start": "1262609",
    "end": "1268129"
  },
  {
    "text": "of course there are times when we do want a program which shared will pretty like I mentioned especially for performance reasons we often do this so",
    "start": "1268129",
    "end": "1274669"
  },
  {
    "text": "it's a risk you are taking quite a bit so how do you really deal with this well you have to properly protect your data",
    "start": "1274669",
    "end": "1280820"
  },
  {
    "text": "to do this so there are some rules we have to be very careful about race conditions are something you want to",
    "start": "1280820",
    "end": "1286759"
  },
  {
    "text": "avoid absolutely when multiple threads run over each other the results becomes",
    "start": "1286759",
    "end": "1291919"
  },
  {
    "text": "absolutely unpredictable and these kinds of errors are extremely hard to track as",
    "start": "1291919",
    "end": "1297559"
  },
  {
    "text": "you know so you have an error in your code you run it it gives you a wrong result you are scratching your head you",
    "start": "1297559",
    "end": "1304399"
  },
  {
    "text": "call your colleague and say look the code did not work you gave a wrong result after looking at this for 30 minutes your colleague then says run it",
    "start": "1304399",
    "end": "1311269"
  },
  {
    "text": "again and now the result is completely different right it can be very annoying because it's very unpredictable you",
    "start": "1311269",
    "end": "1317330"
  },
  {
    "text": "cannot just rerun it to see what the result is so what do you do about it you got to thoroughly examine the code to",
    "start": "1317330",
    "end": "1323090"
  },
  {
    "text": "make sure that it is really correct from the concurrency point of view so here's",
    "start": "1323090",
    "end": "1328429"
  },
  {
    "text": "an example I have a variable called a count and within this change method I'm",
    "start": "1328429",
    "end": "1334159"
  },
  {
    "text": "making a copy of the a count incrementing the copy by that amount and then setting the value back in now this",
    "start": "1334159",
    "end": "1341690"
  },
  {
    "text": "is completely unprotected code inviting prob then in the in this I created 20,000",
    "start": "1341690",
    "end": "1348160"
  },
  {
    "text": "threats and then I pushed through the thread that changed function but I asked it either to increment by one or to",
    "start": "1348160",
    "end": "1356350"
  },
  {
    "text": "decrement by one now if it is even an art well it's 20000 values we know that",
    "start": "1356350",
    "end": "1362470"
  },
  {
    "text": "there is as many even numbers and 20,000 as there are art numbers so what should",
    "start": "1362470",
    "end": "1367630"
  },
  {
    "text": "that result be when I'm done with this the result obviously should be a value of zero because I increment it as many",
    "start": "1367630",
    "end": "1375340"
  },
  {
    "text": "times as decremented as many times but when you run this program you can absolutely not predict what the result",
    "start": "1375340",
    "end": "1381970"
  },
  {
    "text": "is going to be it can be a really good program to generate lotto numbers if you want to very pretty random every time",
    "start": "1381970",
    "end": "1388150"
  },
  {
    "text": "you run it isn't it because it's not really clear how the threads are going to run and why is that the reason as to",
    "start": "1388150",
    "end": "1395520"
  },
  {
    "text": "threads may come in and read exactly the same value and they're competing against",
    "start": "1395520",
    "end": "1401350"
  },
  {
    "text": "changing the value the last one is actually going to win the way to think about this is that you have multiple you",
    "start": "1401350",
    "end": "1408760"
  },
  {
    "text": "know people trying to put their hands on a bowl it's going to have things spilled over that's exactly what's happening in",
    "start": "1408760",
    "end": "1414370"
  },
  {
    "text": "this case right not very very much fun so what do you do about this well one way to decide this is to use a mutex and",
    "start": "1414370",
    "end": "1421090"
  },
  {
    "start": "1419000",
    "end": "1419000"
  },
  {
    "text": "then you can call a lock on this and you can call an unlock on it just like I did a few minutes ago with that other",
    "start": "1421090",
    "end": "1426280"
  },
  {
    "text": "example the problem the good news about this code is now the result will be absolutely predictable almost unless",
    "start": "1426280",
    "end": "1434440"
  },
  {
    "text": "there was an exception someplace what if this code in the middle of lock and unlock blew up with some exception well",
    "start": "1434440",
    "end": "1441220"
  },
  {
    "text": "then you're going to have a unpleasant live lock live lock is different from",
    "start": "1441220",
    "end": "1446380"
  },
  {
    "text": "blade lock live lock is where you wait forever for an event that will never",
    "start": "1446380",
    "end": "1451420"
  },
  {
    "text": "ever happen right this is like you have a teenager at home who went to the bathroom but slipped away through one of",
    "start": "1451420",
    "end": "1457210"
  },
  {
    "text": "the windows you don't even know that they're not in the bathroom anymore right like teenagers do you're gonna",
    "start": "1457210",
    "end": "1462400"
  },
  {
    "text": "wait for a very long time for them to come out I know those of you laughing did this when they were teenagers that's",
    "start": "1462400",
    "end": "1467530"
  },
  {
    "text": "where they're getting a much laughter about this so the point really in this case is that's a live lock you gonna wait for",
    "start": "1467530",
    "end": "1472930"
  },
  {
    "text": "something to happen that would never have so as a result what do we do about it well here's a way you can actually and",
    "start": "1472930",
    "end": "1479280"
  },
  {
    "text": "this is the part I really really I'm happy for in C++ because a lot of languages don't do this a lot of",
    "start": "1479280",
    "end": "1485580"
  },
  {
    "text": "languages will come to this point and then they will give you one solution which can be summarized in two words",
    "start": "1485580",
    "end": "1491010"
  },
  {
    "text": "called good luck and the C++ said okay will be kind to you will give you a bit",
    "start": "1491010",
    "end": "1496260"
  },
  {
    "text": "more solution and they give you what's called a lock guard I really really like a glog guard what is lock guard the RAI",
    "start": "1496260",
    "end": "1502950"
  },
  {
    "text": "I applied on locking itself and I do have to admit they have done a really good job the day I learned about this I",
    "start": "1502950",
    "end": "1509910"
  },
  {
    "text": "said I really love these guys they've done a job on this so what does a lock guard do lock guard as you can see wraps",
    "start": "1509910",
    "end": "1516420"
  },
  {
    "text": "the mutex and gives you the lock on it you never unlock it when you leave the",
    "start": "1516420",
    "end": "1522000"
  },
  {
    "text": "scope the unlock happens automatically other normally or through exceptions you",
    "start": "1522000",
    "end": "1527790"
  },
  {
    "text": "are perfectly safe to handle at this point that's exactly what this is giving now of course in programming you know",
    "start": "1527790",
    "end": "1533580"
  },
  {
    "text": "one thing when you solve one problem it gives raise to another problem so",
    "start": "1533580",
    "end": "1538800"
  },
  {
    "text": "I'll talk about what the other problem is in a few minutes so this solves the current problem we have at hand",
    "start": "1538800",
    "end": "1543960"
  },
  {
    "text": "we'll talk about the other problem in just a few minutes so in this case of course we can use a lock guard which is really good model of the story don't",
    "start": "1543960",
    "end": "1551130"
  },
  {
    "text": "ever lock and unlock mutex that's a bad programming always use a log guard until",
    "start": "1551130",
    "end": "1557760"
  },
  {
    "text": "I use that use that rule until I change it in a few minutes so so don't ever use lock and unlock that's a bad programming",
    "start": "1557760",
    "end": "1564090"
  },
  {
    "text": "okay so we talked about this but it's not a panacea we got to still be careful about how we use this you can still get",
    "start": "1564090",
    "end": "1570480"
  },
  {
    "text": "into trouble by not protecting things properly there are places where you could you could really get into mess",
    "start": "1570480",
    "end": "1576630"
  },
  {
    "text": "with this also how do you prevent this well first of all make sure your data",
    "start": "1576630",
    "end": "1582330"
  },
  {
    "text": "never escapes so let's talk about what this means let's say I have an object with me you lock you call a method on me",
    "start": "1582330",
    "end": "1590100"
  },
  {
    "text": "I give you a reference to an object maybe an internal state and then we unlock it well after the unlock is over",
    "start": "1590100",
    "end": "1597540"
  },
  {
    "text": "you come and change the reference I'm in trouble again that is called escaping",
    "start": "1597540",
    "end": "1602670"
  },
  {
    "text": "the object so when you do an current programming you have to cheer that your data never",
    "start": "1602670",
    "end": "1608260"
  },
  {
    "text": "escapes from you so where we return references we have to be very very careful because it's possible that you",
    "start": "1608260",
    "end": "1615160"
  },
  {
    "text": "have just given out a reference that somebody could come and change it afterwards when the lock is no longer being held so things can still go wrong",
    "start": "1615160",
    "end": "1622090"
  },
  {
    "start": "1622000",
    "end": "1622000"
  },
  {
    "text": "the next problem to think about is deadlock so what is deadlock deadlock is of course where multiple threads are",
    "start": "1622090",
    "end": "1628840"
  },
  {
    "text": "waiting on each other one of my favorite analogies to use is you have a boy and a",
    "start": "1628840",
    "end": "1634060"
  },
  {
    "text": "girl at home the boy grabs the sugar and waits for the milk and the girl grabs",
    "start": "1634060",
    "end": "1639250"
  },
  {
    "text": "the milk and waits for the sugar what is this called it's called parenting nightmare and and this is when they both",
    "start": "1639250",
    "end": "1645760"
  },
  {
    "text": "are going to wait on each other not have breakfast so what do you do you make a rule you should not get sugar any more",
    "start": "1645760",
    "end": "1651970"
  },
  {
    "text": "until you have God on the milk already and that's exactly the whole point about one way to avoid deadlock is to make",
    "start": "1651970",
    "end": "1658030"
  },
  {
    "text": "sure that you always occur the lock in one certain order now the good news is",
    "start": "1658030",
    "end": "1663100"
  },
  {
    "text": "you acquire the locks in one certain order the bad news is I have no clue how to get the locks in one certain order",
    "start": "1663100",
    "end": "1669430"
  },
  {
    "text": "because you don't it's not like you have a very good plan where you can take these objects and put them into order",
    "start": "1669430",
    "end": "1675790"
  },
  {
    "text": "and any time we do coding what happens this is one thing I've learned over the",
    "start": "1675790",
    "end": "1681100"
  },
  {
    "text": "time you let a programmer write code that becomes a liability right this is",
    "start": "1681100",
    "end": "1686350"
  },
  {
    "text": "the time and again the more code you write the more bugs you have to maintain so if this is something that's got to be",
    "start": "1686350",
    "end": "1691690"
  },
  {
    "text": "done the right way you want to give it to the adults who can't write it the right way I'm saying it sincerely",
    "start": "1691690",
    "end": "1697480"
  },
  {
    "text": "because when I am working on my application I have a lot of stuff on my",
    "start": "1697480",
    "end": "1702700"
  },
  {
    "text": "mind already that's my focus don't tell me to focus on my app and focus on infrastructure issues and",
    "start": "1702700",
    "end": "1710350"
  },
  {
    "text": "library issues this is the reason I use libraries so I don't have to depend on those things myself and I can take",
    "start": "1710350",
    "end": "1717700"
  },
  {
    "text": "somebody who has done a good job and use their solution so if that luck should be avoided why don't you guys do the work",
    "start": "1717700",
    "end": "1724270"
  },
  {
    "text": "to avoid deadlock then tell me lock them in the right order that's another thing they have done really really well and I",
    "start": "1724270",
    "end": "1730990"
  },
  {
    "text": "really am happy what they have done so let's see what the answer is notice there's an account here and the transfer",
    "start": "1730990",
    "end": "1737740"
  },
  {
    "text": "from locks guard one and then it locks guard too this is also",
    "start": "1737740",
    "end": "1743650"
  },
  {
    "text": "known as a bad idea never acquire the lock more than once in your execution",
    "start": "1743650",
    "end": "1750970"
  },
  {
    "text": "sequence so in other words you should never acquire one lock and why only hold",
    "start": "1750970",
    "end": "1757630"
  },
  {
    "text": "on to one lock you recurse for the second lock that's a really bad idea right because the lock you're holding",
    "start": "1757630",
    "end": "1764950"
  },
  {
    "text": "and then you're requesting for another lock could cause the deadlock because somebody else maybe think that other",
    "start": "1764950",
    "end": "1770050"
  },
  {
    "text": "lock and waiting for the lock you already hold and now your intention back and forth holding on to this so this is",
    "start": "1770050",
    "end": "1776140"
  },
  {
    "text": "a bad code don't write this don't get one lock and then wait on the other lock so what do you do to prevent this",
    "start": "1776140",
    "end": "1781750"
  },
  {
    "text": "problem well what you can do nicely instead of doing that is you can now use",
    "start": "1781750",
    "end": "1787240"
  },
  {
    "start": "1786000",
    "end": "1786000"
  },
  {
    "text": "the lock again but in this case notice this is a not a lock on the mutex but a",
    "start": "1787240",
    "end": "1793570"
  },
  {
    "text": "lock function directly that lock function takes a sequence of locks as",
    "start": "1793570",
    "end": "1798880"
  },
  {
    "text": "you can see right there and in this case of course it gets those locks but unlike you and I calling the locks",
    "start": "1798880",
    "end": "1805660"
  },
  {
    "text": "it is gonna acquire the locks in the order properly internally so you don't",
    "start": "1805660",
    "end": "1810850"
  },
  {
    "text": "have to worry about it so always acquire the locks in one shot never acquire one",
    "start": "1810850",
    "end": "1816190"
  },
  {
    "text": "lock in Turkish for another and then of course you're asking for a guard lock one and then you can slowly ask for the",
    "start": "1816190",
    "end": "1822910"
  },
  {
    "text": "guard lock do that's perfectly fine and it will guarantee that it acquires the lock in the proper order for you and",
    "start": "1822910",
    "end": "1829060"
  },
  {
    "text": "then you can go back and use it so so that we can prevent the problem and what is this guard lock one and guard lock to",
    "start": "1829060",
    "end": "1835330"
  },
  {
    "text": "do well they are a really for unlocking purpose so you don't worry about oh my",
    "start": "1835330",
    "end": "1840550"
  },
  {
    "text": "god I forgot to unlock it it'll take care of the unlocking properly this will take care of the locking in the proper",
    "start": "1840550",
    "end": "1846430"
  },
  {
    "text": "order for you and you can prevent deadlocks by doing this so this is a really good way to handle it so you can",
    "start": "1846430",
    "end": "1851740"
  },
  {
    "text": "do a lock and then you can do a guarded lock for unlocking purposes when you are done with it that'd be very safe so",
    "start": "1851740",
    "end": "1857740"
  },
  {
    "start": "1856000",
    "end": "1856000"
  },
  {
    "text": "never acquire multiple locks on you know one at a time always acquire the locks in one shard and never lock on a object",
    "start": "1857740",
    "end": "1866710"
  },
  {
    "text": "you already locked already that's not a good idea and avoid nested locks as well so given this",
    "start": "1866710",
    "end": "1872630"
  },
  {
    "text": "there are times when you want to acquire a lock but unfortunately though you want",
    "start": "1872630",
    "end": "1879350"
  },
  {
    "text": "to make sure that you are you know say how do I make sure I don't get a lock I",
    "start": "1879350",
    "end": "1884780"
  },
  {
    "text": "already have garden this is kind of stupid right it's like you have a lock but then you lock yourself out by asking",
    "start": "1884780",
    "end": "1892130"
  },
  {
    "text": "for a lock again I don't think there is any better way to feel stupider than the other day because you're debugging this",
    "start": "1892130",
    "end": "1898100"
  },
  {
    "text": "for a long time and you realize the lock is being held by you yourself which can be very vexing so what we prevent that",
    "start": "1898100",
    "end": "1904790"
  },
  {
    "text": "is to use what is called a unique lock when you use a unique lock it knows that you already have a lock so it grants you",
    "start": "1904790",
    "end": "1911120"
  },
  {
    "text": "the second time you ask for it rather than blocking you out so it could be a really nice way to solve that one bit",
    "start": "1911120",
    "end": "1916370"
  },
  {
    "text": "problem is you could do this another advantage of this is you can also do what is called a deferred mode so you",
    "start": "1916370",
    "end": "1922130"
  },
  {
    "text": "can just say you can have a dibs on this but you don't want to lock it until a later time you could do that as well so",
    "start": "1922130",
    "end": "1928010"
  },
  {
    "text": "you could use a unique lock and that's another thing available already you can say unique lock right there and then",
    "start": "1928010",
    "end": "1933050"
  },
  {
    "text": "provide the lock that you want to use and you can say instantaneous R or deferred and then of course you can then",
    "start": "1933050",
    "end": "1938750"
  },
  {
    "text": "come back and use it later on when you really need it so I can start defining these kinds of locks another of course",
    "start": "1938750",
    "end": "1944480"
  },
  {
    "start": "1943000",
    "end": "1943000"
  },
  {
    "text": "you want to also avoid race conditions that may arise in this form also this is more related to leaking the object like",
    "start": "1944480",
    "end": "1950990"
  },
  {
    "text": "I talked about earlier so make sure you don't leak your resources make sure you hold on to the locks properly so how do",
    "start": "1950990",
    "end": "1956780"
  },
  {
    "text": "you deal with that one way to deal with that is to maybe provide a method explicitly to acquire a lock on your",
    "start": "1956780",
    "end": "1963020"
  },
  {
    "text": "object so here's the problem right if my function is going to do locking internally and say that I have two",
    "start": "1963020",
    "end": "1969710"
  },
  {
    "text": "functions you call my first function it locks and then does its works and unlocks then you call the second",
    "start": "1969710",
    "end": "1975650"
  },
  {
    "text": "function it locks and does it works an unlock but the problem is when you call these two functions between these two",
    "start": "1975650",
    "end": "1982040"
  },
  {
    "text": "calls that very small moment when you release a lock somebody could get in and that could lead to problems so what you",
    "start": "1982040",
    "end": "1989240"
  },
  {
    "text": "want to do is do a lock around those two methods entirely not individual methods separately and that's when you could",
    "start": "1989240",
    "end": "1995660"
  },
  {
    "text": "really get a function to give you a lock and then you can take your time to call multiple functions and then you can come",
    "start": "1995660",
    "end": "2001330"
  },
  {
    "text": "back and unlock it when you are done with it again you have to think multiple times about how this works so that's what I'm",
    "start": "2001330",
    "end": "2007050"
  },
  {
    "text": "gonna do in this example is to make sure that I acquire the lock outside of this notice that I get lock so I can call the",
    "start": "2007050",
    "end": "2015180"
  },
  {
    "text": "get lock method and then I can do my work and when I'm done with it I will release the lock on the object",
    "start": "2015180",
    "end": "2021180"
  },
  {
    "text": "that way I can call multiple methods without fear of somebody intruding between my my calls so there's another",
    "start": "2021180",
    "end": "2028920"
  },
  {
    "text": "problem though that we have to deal with and and that is let's take an example of a little example of a singleton you know",
    "start": "2028920",
    "end": "2036150"
  },
  {
    "text": "what is singleton singleton is the easiest pattern to read about and the",
    "start": "2036150",
    "end": "2042000"
  },
  {
    "text": "most difficult pattern to implement because if you go a search on the web implement singleton pattern you'll be",
    "start": "2042000",
    "end": "2048929"
  },
  {
    "text": "surprised that people have seven solutions and at the end of the seventh solution they say this doesn't still work and this is really hard to get",
    "start": "2048929",
    "end": "2055830"
  },
  {
    "text": "correct from the concurrency point of view and can be very vexing well here's an example where in the singleton you",
    "start": "2055830",
    "end": "2061980"
  },
  {
    "text": "can see that I have a get instance this text is the pointer is null if it is",
    "start": "2061980",
    "end": "2067230"
  },
  {
    "text": "null it acquires the log and then again checks if it's not it's still null because between the time you checked and",
    "start": "2067230",
    "end": "2073560"
  },
  {
    "text": "the time you got the lock somebody could sneak in and and change that too this is really sad programming isn't it",
    "start": "2073560",
    "end": "2079200"
  },
  {
    "text": "well how do I avoid these problems it would be nice if somebody can do this for us that's exactly what called once",
    "start": "2079200",
    "end": "2084870"
  },
  {
    "text": "this so call once is a method that will say call goes only if this has not been",
    "start": "2084870",
    "end": "2092190"
  },
  {
    "text": "called already so when multiple threads compete one thread will do this word all the other",
    "start": "2092190",
    "end": "2098250"
  },
  {
    "text": "threads will say oh this has been already done and they can skip over so in other words you take all the silly",
    "start": "2098250",
    "end": "2104880"
  },
  {
    "text": "code we do and you move it under a library so that can be done for us so we don't have to duplicate our effort doing",
    "start": "2104880",
    "end": "2110790"
  },
  {
    "text": "it over and over and over and that's exactly what the call once is doing for this to work of course you have a",
    "start": "2110790",
    "end": "2115980"
  },
  {
    "text": "pointer ones or whatever name you call it and you pass that over here so they",
    "start": "2115980",
    "end": "2120990"
  },
  {
    "text": "compete on that reference and then they decide whether to call that method or not call this removes the burden of",
    "start": "2120990",
    "end": "2127290"
  },
  {
    "text": "writing all that silly code and wondering if it's still correct and and that takes care of that so call once is",
    "start": "2127290",
    "end": "2132750"
  },
  {
    "text": "a good idea well similarly to synchronize you can use a variables to synchronize as well and",
    "start": "2132750",
    "end": "2139020"
  },
  {
    "text": "these are conditional variables you can synchronize so this is where you have a signal and weight so you can say notify",
    "start": "2139020",
    "end": "2145110"
  },
  {
    "text": "once and then it can wait on that so if you have two producer and consumers running and you want one to produce a",
    "start": "2145110",
    "end": "2152190"
  },
  {
    "text": "result and you want the other to wait for it how do you signal between those two threads that's basically what",
    "start": "2152190",
    "end": "2157800"
  },
  {
    "text": "conditional variables are for so you can create a conditional variable share between those two threads when the",
    "start": "2157800",
    "end": "2164520"
  },
  {
    "text": "thread that produces a result can do a notify and then the thread that's waiting on the result can do a weight on",
    "start": "2164520",
    "end": "2169920"
  },
  {
    "text": "it and then continue doing whatever work he needs to do after that that can be very powerful way to communicate between those two one other",
    "start": "2169920",
    "end": "2177450"
  },
  {
    "text": "suggestion before we go any further the rule of multi-threading and I would say",
    "start": "2177450",
    "end": "2182580"
  },
  {
    "text": "there's a rule not only of multi-threading the rule of ice and multi-threading never do anything",
    "start": "2182580",
    "end": "2188550"
  },
  {
    "text": "without a timeout it is kind of like finding that perfect love the sensible person will look for a perfect love and",
    "start": "2188550",
    "end": "2194910"
  },
  {
    "text": "then you eventually timeout otherwise you get old and die alone that's exactly the rule of life and programming also",
    "start": "2194910",
    "end": "2201210"
  },
  {
    "text": "you never do anything without a proper timeout you say I want a lock but I'm gonna timeout if I don't get it after a",
    "start": "2201210",
    "end": "2207060"
  },
  {
    "text": "reasonable time you can prevent dead locks as well so everything you do in concurrency always do with the timeout",
    "start": "2207060",
    "end": "2213090"
  },
  {
    "text": "never do without timeouts okay so let's stop right there we have done this and",
    "start": "2213090",
    "end": "2219810"
  },
  {
    "text": "what is one of the biggest really problem we see so far the problem so far",
    "start": "2219810",
    "end": "2226200"
  },
  {
    "text": "is we can summarize it this way hey great I have a beautiful way to create threads I can run these threads",
    "start": "2226200",
    "end": "2233370"
  },
  {
    "text": "concurrently I'm happy for that that's awesome but one big hole I cannot deal",
    "start": "2233370",
    "end": "2241020"
  },
  {
    "text": "with mutability I don't want to create a global stare shared variable and have",
    "start": "2241020",
    "end": "2247260"
  },
  {
    "text": "all these threads work on it that's really a poor programming practice there's got to be a better way to",
    "start": "2247260",
    "end": "2253140"
  },
  {
    "text": "communicate between these threads how can I do that so take the multi threading the thread creation aspect and",
    "start": "2253140",
    "end": "2261330"
  },
  {
    "text": "mix it with the communication aspect to exchange data so you don't warn it's",
    "start": "2261330",
    "end": "2266670"
  },
  {
    "text": "kind of like this glass over here you don't want to put this glass here and say you when I are going to share this that's",
    "start": "2266670",
    "end": "2272060"
  },
  {
    "text": "not a good idea well I'm gonna fill the water and then I'm gonna give it to you with the full glass of water and you can",
    "start": "2272060",
    "end": "2278900"
  },
  {
    "text": "now take it and move on that way you know the glass is full when you get it otherwise you're gonna keep checking the",
    "start": "2278900",
    "end": "2284690"
  },
  {
    "text": "drank it fill it bit bank it fill it there's no reason to do that so how do we really send you an object that's",
    "start": "2284690",
    "end": "2289849"
  },
  {
    "text": "exactly where future comes in future is a really nice implementation where think of a future as an object that goes from",
    "start": "2289849",
    "end": "2296480"
  },
  {
    "text": "one thread to another with the data that is being carried over so here's an example Fibonacci was computing the",
    "start": "2296480",
    "end": "2303349"
  },
  {
    "text": "Fibonacci as you know this implementation can take a really long time if the Fibonacci number is big so print",
    "start": "2303349",
    "end": "2310250"
  },
  {
    "text": "result wants to print the result of Fibonacci when it's done but not as a signature of print result it is not a",
    "start": "2310250",
    "end": "2316730"
  },
  {
    "text": "long it's a future long so this says when you give me a future I'll call it",
    "start": "2316730",
    "end": "2322580"
  },
  {
    "text": "get on it and I will wait on the get and then when the get gives me the result I will print it so this future long is",
    "start": "2322580",
    "end": "2329480"
  },
  {
    "text": "what I'm gonna print but how do I get that future Hey look at that thread like we did before so I'm gonna call the",
    "start": "2329480",
    "end": "2335570"
  },
  {
    "text": "thread and I'm gonna send the print result to the thread but notice I'm sending an async object right now and",
    "start": "2335570",
    "end": "2342910"
  },
  {
    "text": "async will run in a completely different thread but the result of async is",
    "start": "2342910",
    "end": "2348950"
  },
  {
    "text": "actually a future so what are we avoiding we're avoiding the stupid global variables you don't",
    "start": "2348950",
    "end": "2355640"
  },
  {
    "text": "want two threads to go at a variable and do Muta control that instead you say hey",
    "start": "2355640",
    "end": "2360830"
  },
  {
    "text": "you thread you go run do your work when you're done with your work you send me",
    "start": "2360830",
    "end": "2366500"
  },
  {
    "text": "your result through your future I will wait here on the future and when the result arrives I'll move forward and",
    "start": "2366500",
    "end": "2372410"
  },
  {
    "text": "that becomes a nice way I call this civilized multi-threading right the other one is called barbaric",
    "start": "2372410",
    "end": "2379040"
  },
  {
    "text": "multi-threading where you put a global variable and you attack each other on it this one isn't very civilized you go to",
    "start": "2379040",
    "end": "2385640"
  },
  {
    "text": "your work I'll wait here when you're done you send me the result I'll carry on after that that's exactly what this",
    "start": "2385640",
    "end": "2391940"
  },
  {
    "text": "future is doing so in this case of course this will run get the data and the future dot get will be blocked and",
    "start": "2391940",
    "end": "2398450"
  },
  {
    "text": "that will trigger off and run when the data becomes available so but one problem though you are taught",
    "start": "2398450",
    "end": "2405330"
  },
  {
    "text": "starting an async but remember we are sensitive to threads you don't want to be creating too many threads what if the",
    "start": "2405330",
    "end": "2412170"
  },
  {
    "text": "thread that's creating this code doesn't have any real work today you don't want",
    "start": "2412170",
    "end": "2417660"
  },
  {
    "text": "the thread that simply spawned threads and say you all do work well let's sit and watch you that's no fun at all you",
    "start": "2417660",
    "end": "2423210"
  },
  {
    "text": "want to make use of that really well this is where async can take couple of different options one option is called",
    "start": "2423210",
    "end": "2429540"
  },
  {
    "start": "2428000",
    "end": "2428000"
  },
  {
    "text": "deferred deferred means the thread that is calling the async is going to finish",
    "start": "2429540",
    "end": "2435870"
  },
  {
    "text": "its work really quickly and the asynchronous operation can actually run on the same exact thread and it may be",
    "start": "2435870",
    "end": "2443580"
  },
  {
    "text": "called by the thread that's calling it a lazy and may run never also this is even",
    "start": "2443580",
    "end": "2449310"
  },
  {
    "text": "better hey why do the work that shouldn't be done in the first place so you can put it on a lazy mode and then if I don't",
    "start": "2449310",
    "end": "2455430"
  },
  {
    "text": "have a reason to ever run it then don't bother running it I can and just walk away so you can do it effort or you can",
    "start": "2455430",
    "end": "2462030"
  },
  {
    "text": "do an async let's look at the difference of this so notice in this example I have a compute and in this case the compute",
    "start": "2462030",
    "end": "2468870"
  },
  {
    "text": "position and it's returning Fibonacci of the position and I'm printing the thread ID in the compute but on the other hand",
    "start": "2468870",
    "end": "2476600"
  },
  {
    "text": "in the main I did a sink a async but I called a deferred on it now notice the",
    "start": "2476600",
    "end": "2484560"
  },
  {
    "text": "thread ID of the main the thread degree of the main is four nine nine one six but the thread ID of the compute is also",
    "start": "2484560",
    "end": "2492900"
  },
  {
    "text": "four nine nine one six and the reason the thread ID is the same as you said",
    "start": "2492900",
    "end": "2498300"
  },
  {
    "text": "deferred and the main said gosh I'm already done with my work I'm gonna",
    "start": "2498300",
    "end": "2503430"
  },
  {
    "text": "block and wait on the result while I'm blocking on it I might might as well do",
    "start": "2503430",
    "end": "2508620"
  },
  {
    "text": "some more work rather than wasting this thread and this is something extremely important because you don't want threats",
    "start": "2508620",
    "end": "2515310"
  },
  {
    "text": "to block and wait and do nothing that's a wasted resource when a thread is blocked and doesn't do anything you want",
    "start": "2515310",
    "end": "2521520"
  },
  {
    "text": "to use the thread to do more work and this knows to do really do that and that's exactly what you saw here when",
    "start": "2521520",
    "end": "2526650"
  },
  {
    "text": "you set Deford on the other hand the same example I'm running with async rather than deferred now notice that",
    "start": "2526650",
    "end": "2533190"
  },
  {
    "text": "thread IDs are not the same at all because the main is blocked on get this one started on",
    "start": "2533190",
    "end": "2539170"
  },
  {
    "text": "different thread all together so you get to decide whether to use a deferred or to use a sink there's no really one good",
    "start": "2539170",
    "end": "2546070"
  },
  {
    "text": "answer it depends on the problem you're solving sometimes you do want a fresh thread to be running it other times you",
    "start": "2546070",
    "end": "2551740"
  },
  {
    "text": "don't mind this threat to really pick it up and run you can pick and choose what may make sense well okay so that's great",
    "start": "2551740",
    "end": "2558070"
  },
  {
    "start": "2556000",
    "end": "2556000"
  },
  {
    "text": "so far but we come to the same problem again now you have a future and you're",
    "start": "2558070",
    "end": "2564250"
  },
  {
    "text": "saying I know I shouldn't use a global variable I know if I create a global variable I have to use a mutex it gets",
    "start": "2564250",
    "end": "2570730"
  },
  {
    "text": "really messy but I have a future now can I share the future now that is no future",
    "start": "2570730",
    "end": "2576940"
  },
  {
    "text": "at all right because you're back to the same problem your contention is over the",
    "start": "2576940",
    "end": "2582220"
  },
  {
    "text": "future now and that's not going to be fun if you ever want to share a future there are two answers to it first is",
    "start": "2582220",
    "end": "2588070"
  },
  {
    "text": "don't that's not a smart way of programming and the second is if you do really want to do it make sure to you",
    "start": "2588070",
    "end": "2593950"
  },
  {
    "text": "move the future between those calls by using a shared future so you want to",
    "start": "2593950",
    "end": "2599170"
  },
  {
    "text": "create a shared future and a shared future is thread safe our non shared",
    "start": "2599170",
    "end": "2605860"
  },
  {
    "text": "future regular future is not thread safe if you call get on the future twice from",
    "start": "2605860",
    "end": "2611890"
  },
  {
    "text": "multiple threads your code will actually fail never share a future if you want to",
    "start": "2611890",
    "end": "2617740"
  },
  {
    "text": "really share a future use what's called a shared future for the purpose never a future itself well okay so we avoided",
    "start": "2617740",
    "end": "2625480"
  },
  {
    "text": "this problem we can pass data across that's really nice but what if we really want to implement serious algorithms",
    "start": "2625480",
    "end": "2632500"
  },
  {
    "text": "with this this is where what's called a packet pass comes in a pack test gives you a way to really create tasks in a",
    "start": "2632500",
    "end": "2639070"
  },
  {
    "text": "way that when you call a pack task it'll fire off a request on one side and give you a future on the other side so it's a",
    "start": "2639070",
    "end": "2646000"
  },
  {
    "text": "nice abstraction around this code to really create an async so here's an example of a packed package task so I",
    "start": "2646000",
    "end": "2653860"
  },
  {
    "text": "say package test tasks compute this compute method will run on it but when",
    "start": "2653860",
    "end": "2659200"
  },
  {
    "text": "you start this package task but you readily get a future out of it so you don't have to do a hodgepodge of I'll",
    "start": "2659200",
    "end": "2665320"
  },
  {
    "text": "create a task over here I'll get the future over here you have to be brutal about this to end",
    "start": "2665320",
    "end": "2671109"
  },
  {
    "text": "points you can just package them hey that's why they call it packaged you can package them together and say you go do",
    "start": "2671109",
    "end": "2677440"
  },
  {
    "text": "this work but give me a future on my hand you're able to get the future right from it so package tasks really make",
    "start": "2677440",
    "end": "2683349"
  },
  {
    "text": "programming much more easier and pleasant keep in mind when you use a package task you are building on the",
    "start": "2683349",
    "end": "2689200"
  },
  {
    "text": "future we just talked about so what does this really look like when you do this on one side it fires off an asynchronous",
    "start": "2689200",
    "end": "2696430"
  },
  {
    "start": "2690000",
    "end": "2690000"
  },
  {
    "text": "request on a worker thread on the caller side it immediately gives you a future so this is kind of like when you do this",
    "start": "2696430",
    "end": "2702609"
  },
  {
    "text": "is goes pin like this and this code executes on this thread and you are left with the future on your hand so that",
    "start": "2702609",
    "end": "2708910"
  },
  {
    "text": "becomes a nice programming abstraction so don't use future directly unless you are doing some low-level stuff introduce",
    "start": "2708910",
    "end": "2715239"
  },
  {
    "text": "a packaged task now like I said earlier every time we solve a problem it gives",
    "start": "2715239",
    "end": "2722049"
  },
  {
    "text": "birth to a new problem you say ok this is great I don't want shared morality I want to",
    "start": "2722049",
    "end": "2727809"
  },
  {
    "text": "use future but what if something were to go wrong if you call a method it runs it",
    "start": "2727809",
    "end": "2734950"
  },
  {
    "text": "doesn't give you a result instead it failed miserably with an exception what gives how do I get that exception on my",
    "start": "2734950",
    "end": "2741579"
  },
  {
    "text": "side in a very civil way that is the purpose of a promise so a promise is a",
    "start": "2741579",
    "end": "2747849"
  },
  {
    "start": "2746000",
    "end": "2746000"
  },
  {
    "text": "future which can handle exceptions so when you create a promise a promise may",
    "start": "2747849",
    "end": "2755319"
  },
  {
    "text": "give you a result or it promises to give you an exception so think of a promise",
    "start": "2755319",
    "end": "2761200"
  },
  {
    "text": "as a future which may either result in a success or may result in a failure and",
    "start": "2761200",
    "end": "2767349"
  },
  {
    "text": "and that is exactly what this is doing but the programming group is a lot easier notice I have a promise on my",
    "start": "2767349",
    "end": "2773469"
  },
  {
    "text": "hand and I say promise start set value when everything is good or promise start",
    "start": "2773469",
    "end": "2779140"
  },
  {
    "text": "set option when something really went wrong and this exception or the result",
    "start": "2779140",
    "end": "2784839"
  },
  {
    "text": "will go back to the caller site properly so if your code doesn't have any exceptions at all in it if it's purely",
    "start": "2784839",
    "end": "2792249"
  },
  {
    "text": "number-crunching you don't expect anything to go wrong in it like division by zero for example which is a future",
    "start": "2792249",
    "end": "2797619"
  },
  {
    "text": "that's perfectly fine if we expect something to really go wrong you want handle exceptions then you the promise instead of using a future",
    "start": "2797619",
    "end": "2804170"
  },
  {
    "text": "that's a lot better so how do we use this on this site well notice I say result promise and I say result promised",
    "start": "2804170",
    "end": "2810559"
  },
  {
    "text": "I'd get future and then of course that's going to give me the result but if something were to go wrong it's gonna blow up on your side so get",
    "start": "2810559",
    "end": "2818390"
  },
  {
    "text": "future will either give you a result or get future will throw an exception at you and you can handle it on this side",
    "start": "2818390",
    "end": "2825109"
  },
  {
    "text": "and you can deal with it so that's all I have hope that was useful thank you",
    "start": "2825109",
    "end": "2830920"
  },
  {
    "text": "[Applause]",
    "start": "2830920",
    "end": "2836288"
  }
]