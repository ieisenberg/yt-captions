[
  {
    "text": "all right it's show time boom or not slow ya hit there Dave Aronson yeah or",
    "start": "9700",
    "end": "18920"
  },
  {
    "text": "her for Alera died or Depa on the butant√£ one",
    "start": "18920",
    "end": "26020"
  },
  {
    "text": "yeah comer Tilly your I do porn yes mainly because you've just heard almost",
    "start": "26020",
    "end": "33350"
  },
  {
    "text": "all the Norwegian I speak before we start I think we need to level set some",
    "start": "33350",
    "end": "39050"
  },
  {
    "text": "expectations to call this an advance talk is a little bit misleading but to",
    "start": "39050",
    "end": "46010"
  },
  {
    "text": "call it a beginner talk would be even more misleading even averaging them out",
    "start": "46010",
    "end": "51469"
  },
  {
    "text": "as intermediate would still be misleading what this is is an",
    "start": "51469",
    "end": "56600"
  },
  {
    "text": "introduction to an advanced technique so if you are already well-versed in",
    "start": "56600",
    "end": "63350"
  },
  {
    "text": "mutation testing I won't be too offended if you go seek better learning",
    "start": "63350",
    "end": "68390"
  },
  {
    "text": "opportunities elsewhere but still I'd rather you stick around so you can correct my mistakes later in private",
    "start": "68390",
    "end": "78069"
  },
  {
    "text": "before we get into killing Evil Mutants though we have a lot of background questions to answer",
    "start": "78220",
    "end": "84340"
  },
  {
    "text": "for instance what is an evil mutant anyway what is a mutant whether it's",
    "start": "84340",
    "end": "90080"
  },
  {
    "text": "evil or not what was it before it was mutated how did it get mutated how did",
    "start": "90080",
    "end": "95690"
  },
  {
    "text": "it become evil or was it born evil what's so evil about it why should we kill it to misquote Rodney King can't we",
    "start": "95690",
    "end": "104090"
  },
  {
    "text": "all just get along long story short these are all things",
    "start": "104090",
    "end": "109130"
  },
  {
    "text": "from mutation testing which I've only mentioned so far in passing so let's",
    "start": "109130",
    "end": "114739"
  },
  {
    "text": "start there what on earth is mutation testing in our universe that of software",
    "start": "114739",
    "end": "122539"
  },
  {
    "text": "development not comic books mutation testing is a software testing technique",
    "start": "122539",
    "end": "128959"
  },
  {
    "text": "for ensuring that our code is meaningful so that any small change to it will",
    "start": "128959",
    "end": "135020"
  },
  {
    "text": "result in a noticeable difference in the behavior and ensuring that our tests are",
    "start": "135020",
    "end": "141040"
  },
  {
    "text": "recked so that it will indeed notice that change in the behavior catch it and",
    "start": "141040",
    "end": "146650"
  },
  {
    "text": "fail to unpack all that a little more it helps us identify gaps in our test suite",
    "start": "146650",
    "end": "154109"
  },
  {
    "text": "its primary purpose is to identify times when our test suite lets our code get",
    "start": "154109",
    "end": "160810"
  },
  {
    "text": "away with unexpected behavior it can also help us with our actual code it can",
    "start": "160810",
    "end": "169810"
  },
  {
    "text": "help us find unreachable or redundant or meaningless code that we can remove",
    "start": "169810",
    "end": "176079"
  },
  {
    "text": "eliminate delete or take out it does all this by changing or mutating our code",
    "start": "176079",
    "end": "184689"
  },
  {
    "text": "with the intention of creating faults so it counts as a fault based testing",
    "start": "184689",
    "end": "192069"
  },
  {
    "text": "technique in this respect it is similar well at least related to something you",
    "start": "192069",
    "end": "198010"
  },
  {
    "text": "may already be familiar with chaos monkey developed and run by Netflix just",
    "start": "198010",
    "end": "203519"
  },
  {
    "text": "like chaos monkey helps Netflix discover flaws in their error recovery process",
    "start": "203519",
    "end": "210810"
  },
  {
    "text": "mutation testing helps us discover flaws in our tests and to our lesser extent",
    "start": "210810",
    "end": "217419"
  },
  {
    "text": "our actual production code but the way mutation testing works is sort of upside",
    "start": "217419",
    "end": "224739"
  },
  {
    "text": "down from what chaos monkey does chaos",
    "start": "224739",
    "end": "229780"
  },
  {
    "text": "monkey does a lot of things but it's best known for injecting faults in",
    "start": "229780",
    "end": "235659"
  },
  {
    "text": "mostly dropped connections into Netflix's production network if all goes",
    "start": "235659",
    "end": "242620"
  },
  {
    "text": "well especially to the point where customers don't notice then Netflix",
    "start": "242620",
    "end": "249159"
  },
  {
    "text": "knows that their error recovery is working fine mutation testing however",
    "start": "249159",
    "end": "254729"
  },
  {
    "text": "injects changes not necessarily problems it usually doesn't know whether these",
    "start": "254729",
    "end": "262810"
  },
  {
    "text": "changes will actually create faults or not it injects them into copies of our",
    "start": "262810",
    "end": "270760"
  },
  {
    "text": "code not our network and it does its work in our test",
    "start": "270760",
    "end": "276650"
  },
  {
    "text": "environment and if all goes well in the",
    "start": "276650",
    "end": "282170"
  },
  {
    "text": "sense that our tests still pass that does not mean that everything is fine",
    "start": "282170",
    "end": "288140"
  },
  {
    "text": "in fact that's when we know we have a problem if each change to our code makes at",
    "start": "288140",
    "end": "296630"
  },
  {
    "text": "least one test fail then we know that because there's a problem we have no",
    "start": "296630",
    "end": "303290"
  },
  {
    "text": "problem in other words our code is meaningful and our tests are strict but",
    "start": "303290",
    "end": "309590"
  },
  {
    "text": "of course it's not a silver bullet we developers know there's no such thing",
    "start": "309590",
    "end": "315190"
  },
  {
    "text": "besides which those are for killing werewolves not mutants so yes there are",
    "start": "315190",
    "end": "321770"
  },
  {
    "text": "indeed some drawbacks first it's rather hard labour on our CPU and therefore",
    "start": "321770",
    "end": "329120"
  },
  {
    "text": "usually rather slow we shouldn't expect it to run anywhere near as fast as say",
    "start": "329120",
    "end": "335660"
  },
  {
    "text": "our usual unit test suite or even common",
    "start": "335660",
    "end": "340790"
  },
  {
    "text": "extra tools such as linters we definitely won't want to run mutation",
    "start": "340790",
    "end": "346640"
  },
  {
    "text": "testing against our entire unit test suite upon every saving of our code a",
    "start": "346640",
    "end": "353050"
  },
  {
    "text": "more appropriate use is to run it overnight or at least over our lunch",
    "start": "353050",
    "end": "358400"
  },
  {
    "text": "break a fairly small system may finish mutation testing over a coffee break or",
    "start": "358400",
    "end": "364870"
  },
  {
    "text": "for those speaking British English a tea intervals fortunately most mutation",
    "start": "364870",
    "end": "372590"
  },
  {
    "text": "testing tools include an incremental mode so that we can mutation tests only",
    "start": "372590",
    "end": "377800"
  },
  {
    "text": "what has changed since last time that one we might be able to do on each save",
    "start": "377800",
    "end": "384380"
  },
  {
    "text": "or at least certainly more frequently than overnight also its CPU intensive",
    "start": "384380",
    "end": "391100"
  },
  {
    "text": "nature can really run up our bills on cloud platforms such as AWS or agar or",
    "start": "391100",
    "end": "398650"
  },
  {
    "text": "Azure or however you pronounce it and some of you may be wondering why is",
    "start": "398650",
    "end": "405150"
  },
  {
    "text": "it so CPU intensive we'll get to that later when we look into how it works",
    "start": "405150",
    "end": "411410"
  },
  {
    "text": "another drawback is that it is not at all a beginner friendly technique it",
    "start": "411410",
    "end": "417720"
  },
  {
    "text": "will tell us for instance that making some particular change to our code made",
    "start": "417720",
    "end": "422790"
  },
  {
    "text": "no difference to our test suite but what does that even mean",
    "start": "422790",
    "end": "428330"
  },
  {
    "text": "unlike a regular test that will tell us that some result was correct or incorrect it takes a lot of",
    "start": "428330",
    "end": "435680"
  },
  {
    "text": "interpretation to figure out what an evil mutant is trying to tell us their",
    "start": "435680",
    "end": "441270"
  },
  {
    "text": "accent is very strange and they're almost as incoherent as zombies but they",
    "start": "441270",
    "end": "447360"
  },
  {
    "text": "have a much bigger vocabulary they're not always on about brains they're",
    "start": "447360",
    "end": "453960"
  },
  {
    "text": "usually trying to tell us that our code is meaningless and our tests are lacks",
    "start": "453960",
    "end": "459660"
  },
  {
    "text": "or both but it can be very hard to figure that out or to figure out exactly",
    "start": "459660",
    "end": "467130"
  },
  {
    "text": "how even even worse sometimes it's a",
    "start": "467130",
    "end": "473160"
  },
  {
    "text": "false alarm and there's really nothing to worry about but we can spend a lot of",
    "start": "473160",
    "end": "478470"
  },
  {
    "text": "time figuring that out if you can't see the inscription clearly this is a sand",
    "start": "478470",
    "end": "485039"
  },
  {
    "text": "sculpture of the boy who cried wolf even aside from false alarms there's normally",
    "start": "485039",
    "end": "492360"
  },
  {
    "text": "a fair amount of code that we're not testing and probably shouldn't bother to",
    "start": "492360",
    "end": "499410"
  },
  {
    "text": "test like whether some particular string gets logged exactly correctly in debug",
    "start": "499410",
    "end": "505200"
  },
  {
    "text": "mode sounds pretty crazy huh where does this bizarro idea come from mutation",
    "start": "505200",
    "end": "513959"
  },
  {
    "text": "testing has a surprisingly long history at least in the context of computers it",
    "start": "513959",
    "end": "519810"
  },
  {
    "text": "was first proposed in 1971 in Richard Lipton's term paper titled fault",
    "start": "519810",
    "end": "525830"
  },
  {
    "text": "diagnosis of computer programs the first tool didn't even appear until",
    "start": "525830",
    "end": "532560"
  },
  {
    "text": "nine years after that in 1980 as part Timothy buds PhD work at Yale University",
    "start": "532560",
    "end": "539910"
  },
  {
    "text": "even after that it was still not really practical until fairly recently maybe",
    "start": "539910",
    "end": "546760"
  },
  {
    "text": "the last decade or two with the advances in CPU speed multi-core CPUs and so",
    "start": "546760",
    "end": "553450"
  },
  {
    "text": "forth since then there has been a veritable explosion of academic research",
    "start": "553450",
    "end": "558880"
  },
  {
    "text": "tools and actual usage now let's peel back one layer of the onion and look at",
    "start": "558880",
    "end": "566860"
  },
  {
    "text": "how it works from a high-level view first our chosen tool will break apart our code into",
    "start": "566860",
    "end": "574390"
  },
  {
    "text": "pieces to test usually these will be our functions or methods if we're using an",
    "start": "574390",
    "end": "580720"
  },
  {
    "text": "object-oriented language sorry object-oriented people I'm just going to refer to functions and modules from Iran",
    "start": "580720",
    "end": "588250"
  },
  {
    "text": "rather than mentioning methods and classes and such anyway at this point",
    "start": "588250",
    "end": "594459"
  },
  {
    "text": "some tools do things in a little different order but most of them will go",
    "start": "594459",
    "end": "599830"
  },
  {
    "text": "look for the tests for this particular function for each one this is usually",
    "start": "599830",
    "end": "606790"
  },
  {
    "text": "done by some kind of tagging and unfortunately that tagging is usually",
    "start": "606790",
    "end": "611800"
  },
  {
    "text": "done manually if it can't find any tests tagged for the current function some",
    "start": "611800",
    "end": "619990"
  },
  {
    "text": "tools will use the entire unit test suite which is of course highly",
    "start": "619990",
    "end": "625540"
  },
  {
    "text": "inefficient and leads to lots of false alarms that's why most of them will just",
    "start": "625540",
    "end": "631480"
  },
  {
    "text": "skip this function and go on to the next one now assuming there are tests for the",
    "start": "631480",
    "end": "638890"
  },
  {
    "text": "current function the next step is to make the mutants how does it do that it",
    "start": "638890",
    "end": "644550"
  },
  {
    "text": "looks at this particular function and for each tiny little way in which can be",
    "start": "644550",
    "end": "650050"
  },
  {
    "text": "changed mutation to testing tool makes a clone not a mutant quite yet but then it",
    "start": "650050",
    "end": "658510"
  },
  {
    "text": "makes that one tiny little change to that one clone and now we have a mutant",
    "start": "658510",
    "end": "664620"
  },
  {
    "text": "but it's not evil yet we'll get to that later once our tool is done creating mutants",
    "start": "664620",
    "end": "672750"
  },
  {
    "text": "for a given function it iterates over the list of mutants and now we get to",
    "start": "672750",
    "end": "679290"
  },
  {
    "text": "the real core of it for each mutant that it made from the current function it",
    "start": "679290",
    "end": "686520"
  },
  {
    "text": "will run the functions tests using that mutant instead of the original function",
    "start": "686520",
    "end": "693830"
  },
  {
    "text": "until one of the tests fails after that",
    "start": "693830",
    "end": "699120"
  },
  {
    "text": "it won't bother running any more against that one mutant we don't care how many",
    "start": "699120",
    "end": "704550"
  },
  {
    "text": "more it could make fail just zero versus at least one now if it gets through all",
    "start": "704550",
    "end": "713670"
  },
  {
    "text": "of the tests then we now have a problem we know we have a problem but if at",
    "start": "713670",
    "end": "719010"
  },
  {
    "text": "least one fails that's called killing the mutant and it's a good thing it's exactly what we want it means that our",
    "start": "719010",
    "end": "727140"
  },
  {
    "text": "code is meaningful that the tiny little change if the mutation testing tool made",
    "start": "727140",
    "end": "732300"
  },
  {
    "text": "had a noticeable effect on the behavior and our tests noticed and caught it and",
    "start": "732300",
    "end": "738870"
  },
  {
    "text": "failed then the tool will move on to the",
    "start": "738870",
    "end": "744330"
  },
  {
    "text": "next function or if that was excuse me the next mutant from the same function or if that was the last one then move on",
    "start": "744330",
    "end": "751440"
  },
  {
    "text": "to the next function on a side note if you object to the violent metaphor of",
    "start": "751440",
    "end": "757110"
  },
  {
    "text": "killing the mutant you can think of it like blessing the mutant to turn it into",
    "start": "757110",
    "end": "762839"
  },
  {
    "text": "a good mutant or maybe exiling it or whatever anyway that brings us back to",
    "start": "762839",
    "end": "769940"
  },
  {
    "text": "the original question if that's a good mutant then what's an evil mutant if a",
    "start": "769940",
    "end": "779970"
  },
  {
    "text": "good mutant is one that makes at least one of our tests fail then clearly an",
    "start": "779970",
    "end": "785010"
  },
  {
    "text": "evil mutant is one that doesn't in other words makes our tests still",
    "start": "785010",
    "end": "790140"
  },
  {
    "text": "pass it's an evil mutant with the superpower of mimicry at least good",
    "start": "790140",
    "end": "796710"
  },
  {
    "text": "enough to fool our unit tests so what's so evil about that",
    "start": "796710",
    "end": "802320"
  },
  {
    "text": "if a good mutant indicates that our code is meaningful in our tests are strict then obviously an evil mutant means that",
    "start": "802320",
    "end": "809070"
  },
  {
    "text": "our code is meaningless or redundant or unreachable or some other way not meaningful and or our",
    "start": "809070",
    "end": "816570"
  },
  {
    "text": "tests are lacks or possibly both before we go any further I mentioned that it",
    "start": "816570",
    "end": "824699"
  },
  {
    "text": "makes one tiny little change to each mutant and a common question is why does",
    "start": "824699",
    "end": "830639"
  },
  {
    "text": "it change it in only one way there are several reasons for one it helps us poor",
    "start": "830639",
    "end": "838100"
  },
  {
    "text": "distractible humans focus it's much easier to tell what an evil mutant is",
    "start": "838100",
    "end": "844889"
  },
  {
    "text": "trying to tell us if we're only talking about one thing at a time you can think",
    "start": "844889",
    "end": "850170"
  },
  {
    "text": "of it like using the single responsibility principle or at least just trying to do some work focusing",
    "start": "850170",
    "end": "856709"
  },
  {
    "text": "instead of multitasking don't distract yourself another reason is that multiple",
    "start": "856709",
    "end": "863370"
  },
  {
    "text": "changes may cancel each other out for instance one change may increment",
    "start": "863370",
    "end": "868769"
  },
  {
    "text": "something and another may decrement the same thing this would lead to many more",
    "start": "868769",
    "end": "874680"
  },
  {
    "text": "false alarms times when the mutants doesn't make an actual test fail but",
    "start": "874680",
    "end": "882029"
  },
  {
    "text": "didn't make a significant difference in the code either",
    "start": "882029",
    "end": "887600"
  },
  {
    "text": "lastly allowing multiple mutations would lead to a combinatorial explosion of",
    "start": "887600",
    "end": "894230"
  },
  {
    "text": "mutants with the tool making many times more mutants permute per function which",
    "start": "894230",
    "end": "900750"
  },
  {
    "text": "would make it even more CPU intensive and now it's time to tackle that",
    "start": "900750",
    "end": "907649"
  },
  {
    "text": "question which I deferred from earlier why is it so CPU intensive to answer",
    "start": "907649",
    "end": "913079"
  },
  {
    "text": "that we do need to crunch a few numbers but don't worry the math is pretty basic suppose we have a program made up of ten",
    "start": "913079",
    "end": "921300"
  },
  {
    "text": "modules and each of those modules has ten functions suppose each function has",
    "start": "921300",
    "end": "927930"
  },
  {
    "text": "ten lines and each line has not ten just",
    "start": "927930",
    "end": "933300"
  },
  {
    "text": "five places where can be changed but at each of those",
    "start": "933300",
    "end": "938410"
  },
  {
    "text": "points where it can be changed we have 20 things we can change it to that makes",
    "start": "938410",
    "end": "945220"
  },
  {
    "text": "a hundred thousand mutants and for each one of those we'll probably need to run",
    "start": "945220",
    "end": "952990"
  },
  {
    "text": "a few of our unit tests possibly all the unit tests applicable to that function",
    "start": "952990",
    "end": "961110"
  },
  {
    "text": "now how many is that suppose each function has ten tests that's probably a",
    "start": "961110",
    "end": "968680"
  },
  {
    "text": "little high but that's still only a thousand tests in our entire unit test",
    "start": "968680",
    "end": "974500"
  },
  {
    "text": "suite with the numbers I gave before mutation testing could easily wind up",
    "start": "974500",
    "end": "981670"
  },
  {
    "text": "running a few hundred thousand tests in other words a few hundred times our",
    "start": "981670",
    "end": "988270"
  },
  {
    "text": "whole unit test suite and it'll therefore presumably take about a few",
    "start": "988270",
    "end": "994750"
  },
  {
    "text": "hundred times as much CPU time and more importantly elapsed time while we're",
    "start": "994750",
    "end": "1000060"
  },
  {
    "text": "sitting there waiting even if every single mutant fails the very first test",
    "start": "1000060",
    "end": "1007740"
  },
  {
    "text": "we run against it that's still a hundred thousand test runs or about a hundred",
    "start": "1007740",
    "end": "1014460"
  },
  {
    "text": "times our unit test suite if we suppose that our unit tests normally finish in a",
    "start": "1014460",
    "end": "1021060"
  },
  {
    "text": "pretty zippy 10 seconds that's still a thousand seconds which is almost 17",
    "start": "1021060",
    "end": "1029850"
  },
  {
    "text": "minutes but there is some hope there is",
    "start": "1029850",
    "end": "1035939"
  },
  {
    "text": "some good news over the past decade or so there's been a lot of research on",
    "start": "1035940",
    "end": "1041250"
  },
  {
    "text": "trimming down a number of mutants mostly by weeding out those that are",
    "start": "1041250",
    "end": "1046350"
  },
  {
    "text": "semantically equivalent to the original code we done dn't with other mutants or would create an obvious error condition",
    "start": "1046350",
    "end": "1055130"
  },
  {
    "text": "these things have sometimes cut the mutant horde by up to about two thirds",
    "start": "1055130",
    "end": "1062060"
  },
  {
    "text": "but even with that much success in weeding them out it's still no silver",
    "start": "1062060",
    "end": "1068370"
  },
  {
    "text": "bullet because this takes significant CPU time itself and the remaining mutants are",
    "start": "1068370",
    "end": "1074190"
  },
  {
    "text": "still quite a lot now that we know why it's so CPU intensive let's get back a",
    "start": "1074190",
    "end": "1081360"
  },
  {
    "text": "bit to why we only change it in one way what would happen to that number of",
    "start": "1081360",
    "end": "1088040"
  },
  {
    "text": "100,000 mutants if we allowed two changes per mutate per mutant for each",
    "start": "1088040",
    "end": "1096390"
  },
  {
    "text": "original mutant with just one change if we allowed two we would have 49 choices",
    "start": "1096390",
    "end": "1102840"
  },
  {
    "text": "of where to do another mutation within that same function times twenty ways we",
    "start": "1102840",
    "end": "1109920"
  },
  {
    "text": "could mutate at that place and that works out to 980 new mutants for each",
    "start": "1109920",
    "end": "1118290"
  },
  {
    "text": "old mutant of course if you add in the old ones we have a total of 981 times as",
    "start": "1118290",
    "end": "1124860"
  },
  {
    "text": "many mutants as with only one and if we started with 100,000 that means we now",
    "start": "1124860",
    "end": "1134250"
  },
  {
    "text": "have over 98 million mutants if we went",
    "start": "1134250",
    "end": "1140880"
  },
  {
    "text": "further and allowed three mutations per mutant I'll spare you most of the math",
    "start": "1140880",
    "end": "1146490"
  },
  {
    "text": "but we wind up with oh sorry I forgot a",
    "start": "1146490",
    "end": "1153060"
  },
  {
    "text": "bit even if we weeded out 2/3 of them at each of those two mutations we'd still",
    "start": "1153060",
    "end": "1160080"
  },
  {
    "text": "have nearly 11 million mutants if we allowed three mutations per mutant I'll",
    "start": "1160080",
    "end": "1166560"
  },
  {
    "text": "spare you most of the math but we wind up with over 94 billion with a B mutants",
    "start": "1166560",
    "end": "1173580"
  },
  {
    "text": "and if we even if we managed to weed out 2/3 of them at each of the 3 steps we",
    "start": "1173580",
    "end": "1180780"
  },
  {
    "text": "would still have nearly three and a half billion now that's admittedly with the American",
    "start": "1180780",
    "end": "1188400"
  },
  {
    "text": "Way of naming these powers of a thousand oh that's just blocked by the speaker",
    "start": "1188400",
    "end": "1195900"
  },
  {
    "text": "okay other countries have other ways of naming powers of a thousand but just",
    "start": "1195900",
    "end": "1202860"
  },
  {
    "text": "look at those big numbers and you can tell never mind running the tests just creating the",
    "start": "1202860",
    "end": "1207990"
  },
  {
    "text": "mutants would get to be a huge workload and we can avoid most of that workload",
    "start": "1207990",
    "end": "1213660"
  },
  {
    "text": "and the lack of focus and the",
    "start": "1213660",
    "end": "1219080"
  },
  {
    "text": "drastically increased false alarms if we just limit it to one mutation per mutant",
    "start": "1219080",
    "end": "1226250"
  },
  {
    "text": "now let's peel back another layer of the onion and look at the technical details",
    "start": "1226250",
    "end": "1232140"
  },
  {
    "text": "of how this works first our mutation testing tool parses our code into an",
    "start": "1232140",
    "end": "1239400"
  },
  {
    "text": "abstract syntax tree or AST a quick recap for those of you who might not",
    "start": "1239400",
    "end": "1244620"
  },
  {
    "text": "have dealt with a s TS for a while it's a tree structure that represents our code each node is either an operation or",
    "start": "1244620",
    "end": "1253169"
  },
  {
    "text": "a level of structure so it's children is either it's operands or its contents",
    "start": "1253169",
    "end": "1260480"
  },
  {
    "text": "for instance the code on the left side there would be parsed into the tree on",
    "start": "1260480",
    "end": "1266460"
  },
  {
    "text": "the right side i know those boxes may be a little small to read clearly but we",
    "start": "1266460",
    "end": "1271620"
  },
  {
    "text": "don't need to understand this particular one in much detail anyway then our",
    "start": "1271620",
    "end": "1278940"
  },
  {
    "text": "testing tool walks through the tree copying out sub trees or branches if you",
    "start": "1278940",
    "end": "1286020"
  },
  {
    "text": "will that represent our functions to mutate that smaller chunk of AST",
    "start": "1286020",
    "end": "1292559"
  },
  {
    "text": "representing one function it then walks through that subtree just like it did",
    "start": "1292559",
    "end": "1298350"
  },
  {
    "text": "for the whole thing however now instead of looking for sub trees it can extract",
    "start": "1298350",
    "end": "1304220"
  },
  {
    "text": "it's looking for nodes where it can change something and each time it finds",
    "start": "1304220",
    "end": "1310020"
  },
  {
    "text": "one it makes further copies of the current function subtree that whole",
    "start": "1310020",
    "end": "1315240"
  },
  {
    "text": "thing changed in each way that it can change that node for instance suppose",
    "start": "1315240",
    "end": "1324230"
  },
  {
    "text": "that our tool has walked down this tree to that not equal comparison follow",
    "start": "1324230",
    "end": "1331270"
  },
  {
    "text": "those bold red arrows for each way it could change that not equal comparison",
    "start": "1331270",
    "end": "1339490"
  },
  {
    "text": "it would make a fresh copy of that whole subtree with only that node changed in",
    "start": "1339490",
    "end": "1345730"
  },
  {
    "text": "only that way after it's done making as many mutants as it possibly can from",
    "start": "1345730",
    "end": "1352570"
  },
  {
    "text": "that one node it'll continue down the tree following for instance possibly",
    "start": "1352570",
    "end": "1358929"
  },
  {
    "text": "this new arrow to that comparisons first operand again for each way could change",
    "start": "1358929",
    "end": "1364600"
  },
  {
    "text": "that node it'll make a fresh copy of that whole tree with that node changed that way blah blah blah so what kind of",
    "start": "1364600",
    "end": "1372520"
  },
  {
    "text": "changes can it make there are many many kinds usually replacing something or",
    "start": "1372520",
    "end": "1380100"
  },
  {
    "text": "removing something possibly adding a unary operator such as a logical or",
    "start": "1380100",
    "end": "1386530"
  },
  {
    "text": "arithmetic negation for instance it can change a mathematical operator from one",
    "start": "1386530",
    "end": "1392770"
  },
  {
    "text": "to another such as changing X plus y to x minus y times y divided by Y or ^ Y if",
    "start": "1392770",
    "end": "1400960"
  },
  {
    "text": "the language allows it could even change it to logical or bitwise operators if",
    "start": "1400960",
    "end": "1407740"
  },
  {
    "text": "the order of operands matters such as with subtraction division or exponentiation it can swap them it can",
    "start": "1407740",
    "end": "1416260"
  },
  {
    "text": "change a comparison from one to another for instance when we were back in that",
    "start": "1416260",
    "end": "1421620"
  },
  {
    "text": "ast graph when it was at the comparison it could have changed to any of these",
    "start": "1421620",
    "end": "1427360"
  },
  {
    "text": "other types of comparisons it can change",
    "start": "1427360",
    "end": "1433000"
  },
  {
    "text": "a logical operator from one to another or insert or remove a negations it can",
    "start": "1433000",
    "end": "1438820"
  },
  {
    "text": "change a numeric constant or variable to some other numeric constant or to",
    "start": "1438820",
    "end": "1445900"
  },
  {
    "text": "something of an entirely different type I can object or to quote smeagol string",
    "start": "1445900",
    "end": "1452140"
  },
  {
    "text": "or nothing of course it could do likewise with strings and pretty much",
    "start": "1452140",
    "end": "1459010"
  },
  {
    "text": "any other type including possibly substituting much longer strings that I",
    "start": "1459010",
    "end": "1464020"
  },
  {
    "text": "could show here maybe even trying to overflow some buffers so you get some fuzz testing in",
    "start": "1464020",
    "end": "1469240"
  },
  {
    "text": "there as well entire lines of code can simply be",
    "start": "1469240",
    "end": "1475120"
  },
  {
    "text": "removed it could negate or substitute some constant for a mathematical",
    "start": "1475120",
    "end": "1483010"
  },
  {
    "text": "expression or a function call function calls can also get their arguments",
    "start": "1483010",
    "end": "1489430"
  },
  {
    "text": "scrambled or removed function declarations can have their contents",
    "start": "1489430",
    "end": "1497050"
  },
  {
    "text": "mutated of course but they can also have their argument declaration lists mutated such as having some removed or swapped",
    "start": "1497050",
    "end": "1506890"
  },
  {
    "text": "it can have the entire body removed and replaced by returning a constant or an",
    "start": "1506890",
    "end": "1515230"
  },
  {
    "text": "expression or raising a deliberate ever or if the language permits replaced by",
    "start": "1515230",
    "end": "1520750"
  },
  {
    "text": "nothing at all it can remove a condition so that's something to let the program",
    "start": "1520750",
    "end": "1526360"
  },
  {
    "text": "might normally skip over is always done it can remove a loop control so that",
    "start": "1526360",
    "end": "1532690"
  },
  {
    "text": "something the program might do once do multiple times or skip is always done",
    "start": "1532690",
    "end": "1539620"
  },
  {
    "text": "once there are many many more such substitutions it can make but I think",
    "start": "1539620",
    "end": "1545020"
  },
  {
    "text": "you get the idea now let's finally walk through some examples suppose we have a",
    "start": "1545020",
    "end": "1551920"
  },
  {
    "text": "function like so now I want you to think about what a mutation testing tool could",
    "start": "1551920",
    "end": "1559360"
  },
  {
    "text": "make out of a function like this mostly it could produce mutants that in effect",
    "start": "1559360",
    "end": "1566770"
  },
  {
    "text": "would return results such as any of these expressions or constants and many",
    "start": "1566770",
    "end": "1574630"
  },
  {
    "text": "many more now suppose we had only one test like so in other words assert that",
    "start": "1574630",
    "end": "1583360"
  },
  {
    "text": "two to the power of two equals four I bet many of you have already figured out where this is going because that is a",
    "start": "1583360",
    "end": "1589650"
  },
  {
    "text": "spectacularly bad test even so though",
    "start": "1589650",
    "end": "1595710"
  },
  {
    "text": "most of those mutants I just showed would still get killed by this test in",
    "start": "1595710",
    "end": "1601030"
  },
  {
    "text": "particular the those shown here crossed out in green the ones returning",
    "start": "1601030",
    "end": "1607150"
  },
  {
    "text": "constants won't match subtraction gets a zero dividing gets us one and returning",
    "start": "1607150",
    "end": "1615970"
  },
  {
    "text": "either argument alone gets us two and of course the ones creating a deliberate error condition will at least make the",
    "start": "1615970",
    "end": "1623290"
  },
  {
    "text": "test not pass but addition multiplication and exponentiation in the",
    "start": "1623290",
    "end": "1631900"
  },
  {
    "text": "reverse order I'll still get us the correct answer so they are Evil Mutants",
    "start": "1631900",
    "end": "1641040"
  },
  {
    "text": "also note that exponentiation in the reverse order can happen in at least two",
    "start": "1641160",
    "end": "1646360"
  },
  {
    "text": "different ways and I'll show you that in a moment when we run our mutation testing tool it should give us a report",
    "start": "1646360",
    "end": "1653440"
  },
  {
    "text": "that would boil down to something like this the exact words amount of context",
    "start": "1653440",
    "end": "1662290"
  },
  {
    "text": "and so forth will depend on exactly which tool we use but the information",
    "start": "1662290",
    "end": "1667540"
  },
  {
    "text": "should be pretty much the same to unpack it a bit it's saying that if we change",
    "start": "1667540",
    "end": "1674470"
  },
  {
    "text": "the function called power which is in the file demo dot P starting at line one",
    "start": "1674470",
    "end": "1680190"
  },
  {
    "text": "- excuse me - change line one - swap the order of the arguments or to",
    "start": "1680190",
    "end": "1688000"
  },
  {
    "text": "change line two to change the exponentiation to addition or",
    "start": "1688000",
    "end": "1693520"
  },
  {
    "text": "multiplication or exponentiation in the reverse order we still get the right answer note also that the first and last",
    "start": "1693520",
    "end": "1702370"
  },
  {
    "text": "mutants are the ones that make exponentiation happen in the reverse order and that if we allowed two",
    "start": "1702370",
    "end": "1708910"
  },
  {
    "text": "mutations per mutant those two would cancel out so what is this mutant trying",
    "start": "1708910",
    "end": "1715720"
  },
  {
    "text": "to tell us the very high-level message is that our test suite is just not",
    "start": "1715720",
    "end": "1723160"
  },
  {
    "text": "sufficient either there are not enough tests or the ones we have or in this",
    "start": "1723160",
    "end": "1729520"
  },
  {
    "text": "case the one we have are not very good but we knew that does",
    "start": "1729520",
    "end": "1735930"
  },
  {
    "text": "anybody have any suggestions how to kill these Evil Mutants well no one rid me of",
    "start": "1735930",
    "end": "1742500"
  },
  {
    "text": "these troublesome mutants right",
    "start": "1742500",
    "end": "1747570"
  },
  {
    "text": "additional tests yes that's one way we could do it or we could change it oh I see her another hand there yes use other",
    "start": "1747570",
    "end": "1759870"
  },
  {
    "text": "operands like three and five well I think two and three will also do just fine yes we could also add them as an",
    "start": "1759870",
    "end": "1769440"
  },
  {
    "text": "additional test but if we want to keep our test suite nice and tight just",
    "start": "1769440",
    "end": "1774900"
  },
  {
    "text": "changing the one we have with at least be more efficient so in other words the",
    "start": "1774900",
    "end": "1781530"
  },
  {
    "text": "cert that two cubed is eight fine and that would fix all of them since all the",
    "start": "1781530",
    "end": "1788210"
  },
  {
    "text": "previously surviving mutants would now return different answers all the ones that are old test killed would still die",
    "start": "1788210",
    "end": "1797960"
  },
  {
    "text": "exponentiation in the reverse order would give us nine of course addition would give us five it's multiplication",
    "start": "1797960",
    "end": "1803580"
  },
  {
    "text": "we give us six and now the correct operation is the only one well the only",
    "start": "1803580",
    "end": "1808920"
  },
  {
    "text": "common simple one anyway that will return the correct answer of eight now",
    "start": "1808920",
    "end": "1814500"
  },
  {
    "text": "this may make mutation testing sound very simple but of course this is a downright trivial example the mutated",
    "start": "1814500",
    "end": "1821640"
  },
  {
    "text": "line is a simple mathematical expression so it's pretty easy to think of different parameters that would make the",
    "start": "1821640",
    "end": "1829170"
  },
  {
    "text": "test return different results so now let's look at a more complex example",
    "start": "1829170",
    "end": "1835610"
  },
  {
    "text": "suppose we have a function to send a message like so this naively tries to",
    "start": "1835610",
    "end": "1842310"
  },
  {
    "text": "send out the next chunk of a message as much of it as it can over and over until",
    "start": "1842310",
    "end": "1847910"
  },
  {
    "text": "the message is completely sent the",
    "start": "1847910",
    "end": "1852930"
  },
  {
    "text": "mutation testing tool can of course make lots and lots of mutants from something like this but why I want to look at",
    "start": "1852930",
    "end": "1861060"
  },
  {
    "text": "first is this the minus sign I forgot to explain",
    "start": "1861060",
    "end": "1869530"
  },
  {
    "text": "before means lines are removed you've probably seen diffs in a format like that so this is an example of removing a",
    "start": "1869530",
    "end": "1877150"
  },
  {
    "text": "loop control so that the chunk inside the loop is always done once in other",
    "start": "1877150",
    "end": "1886390"
  },
  {
    "text": "words it's equivalent to this which is the original code with the looping removed now let's assume that this",
    "start": "1886390",
    "end": "1893410"
  },
  {
    "text": "mutant survives our test suite in other words it's evil what is that telling us",
    "start": "1893410",
    "end": "1901980"
  },
  {
    "text": "anybody if a mutant that only goes",
    "start": "1901980",
    "end": "1908770"
  },
  {
    "text": "through that loop body once acts the same as our normal code as far as our unit tests can tell then",
    "start": "1908770",
    "end": "1916870"
  },
  {
    "text": "our unit tests are only making that code go through that loop body once as well",
    "start": "1916870",
    "end": "1922950"
  },
  {
    "text": "in other words we're not testing sending a message big enough to make that loop",
    "start": "1922950",
    "end": "1929080"
  },
  {
    "text": "execute multiple times which in turn means we're not testing sending a larger",
    "start": "1929080",
    "end": "1936220"
  },
  {
    "text": "message then send bytes can handle in one shot this could be from a number of",
    "start": "1936220",
    "end": "1943900"
  },
  {
    "text": "different causes but the obvious one is that we're simply using too small a message suppose module message defines",
    "start": "1943900",
    "end": "1952810"
  },
  {
    "text": "the largest chunk that send bytes can handle and that's 10,000 bytes but as we",
    "start": "1952810",
    "end": "1959920"
  },
  {
    "text": "see in test send message we're only sending three bytes that's nowhere near",
    "start": "1959920",
    "end": "1966010"
  },
  {
    "text": "the limit mm-hmm so what can we do about that the obvious fix is to send of much",
    "start": "1966010",
    "end": "1976450"
  },
  {
    "text": "larger message either adding a test or changing the one we already have and to",
    "start": "1976450",
    "end": "1984040"
  },
  {
    "text": "refresh your memory large enough means it'll larger then max chunk size and",
    "start": "1984040",
    "end": "1991120"
  },
  {
    "text": "that's why we are adding one to it to make our message size there",
    "start": "1991120",
    "end": "1997620"
  },
  {
    "text": "so this revised version of test sendmessage should make that loop go at",
    "start": "1997620",
    "end": "2006600"
  },
  {
    "text": "least once I'm excused yeah at least twice but suppose it's a paraphrase",
    "start": "2006600",
    "end": "2013080"
  },
  {
    "text": "Shakespeare The Fault dear Oslo is not in our tests but in our code that this",
    "start": "2013080",
    "end": "2018960"
  },
  {
    "text": "mutant is evil perhaps we did try sending a larger message suppose we did",
    "start": "2018960",
    "end": "2028230"
  },
  {
    "text": "try sending the largest permissible message out of a set of predefined messages or at least message sizes as we",
    "start": "2028230",
    "end": "2036000"
  },
  {
    "text": "see here see we have small medium and large messages and we tested sending a",
    "start": "2036000",
    "end": "2041460"
  },
  {
    "text": "large and yet this mutant is still evil what could possibly be wrong with that",
    "start": "2041460",
    "end": "2051200"
  },
  {
    "text": "it's trying to tell us that a version with the looping removed and all the other stuff we need to support it will",
    "start": "2051680",
    "end": "2058379"
  },
  {
    "text": "do the job just fine and that boils down to this and now it's pretty clear that",
    "start": "2058380",
    "end": "2065780"
  },
  {
    "text": "what it's really trying to tell us is that the entire send message function",
    "start": "2065780",
    "end": "2071629"
  },
  {
    "text": "may be redundant so we can just get rid of it and you send bytes directly now in",
    "start": "2071630",
    "end": "2079169"
  },
  {
    "text": "real world code there may be some error handling or logging or whatever that we",
    "start": "2079170",
    "end": "2085800"
  },
  {
    "text": "should still do so we can't entirely get rid of send message but at least the",
    "start": "2085800",
    "end": "2092940"
  },
  {
    "text": "looping and everything else to support that is redundant now we've seen how to",
    "start": "2092940",
    "end": "2099090"
  },
  {
    "text": "kill a couple normal kinds of mutants but what about immortal mutants I hear a",
    "start": "2099090",
    "end": "2109440"
  },
  {
    "text": "chuckle of recognition they're Norwegian metalheads might recognize that guy he's in a band out of Trondheim called",
    "start": "2109440",
    "end": "2116600"
  },
  {
    "text": "immortal so of course I couldn't resist using that slide it took a while to find",
    "start": "2116600",
    "end": "2122250"
  },
  {
    "text": "one labeled for reuse anyway what do I even mean by immortal mutants",
    "start": "2122250",
    "end": "2127680"
  },
  {
    "text": "I mean ones that unless we take special measures will go on forever",
    "start": "2127680",
    "end": "2134960"
  },
  {
    "text": "let's take a look at another mutant that could be generated from send message",
    "start": "2134960",
    "end": "2140540"
  },
  {
    "text": "instead of looping instead of removing the loop control what if we removed the",
    "start": "2140540",
    "end": "2147870"
  },
  {
    "text": "line that makes the loop ever end this",
    "start": "2147870",
    "end": "2153330"
  },
  {
    "text": "mutant by not incrementing bite scent would loop forever sending the initial",
    "start": "2153330",
    "end": "2159420"
  },
  {
    "text": "chunk of the message over and over assuming of course the size was greater than zero in the first place so how do",
    "start": "2159420",
    "end": "2167130"
  },
  {
    "text": "we kill a mutant like that with some tools we're in luck and we don't have to",
    "start": "2167130",
    "end": "2172500"
  },
  {
    "text": "do it ourselves some of them will automatically terminate any mutant that lives for more",
    "start": "2172500",
    "end": "2177810"
  },
  {
    "text": "than some amount of time like a small fraction of a second but some of them",
    "start": "2177810",
    "end": "2183510"
  },
  {
    "text": "don't so we're stuck killing them ourselves how can we do this depending",
    "start": "2183510",
    "end": "2189510"
  },
  {
    "text": "upon the language and the testing framework and other facilities available",
    "start": "2189510",
    "end": "2194930"
  },
  {
    "text": "we might be able to make our own time out tests like this if you're not used",
    "start": "2194930",
    "end": "2201930"
  },
  {
    "text": "to this style of testing and error recovery what this is saying is call",
    "start": "2201930",
    "end": "2208140"
  },
  {
    "text": "send message with foo and three and if that one's more than a tenth of a second that's the zero point one up there raise",
    "start": "2208140",
    "end": "2216600"
  },
  {
    "text": "a time-out ever if we do get a timeout ever catch it and assert false to",
    "start": "2216600",
    "end": "2222840"
  },
  {
    "text": "deliberately fail the test with that message if we don't get any error then",
    "start": "2222840",
    "end": "2230490"
  },
  {
    "text": "proceed on to assert true and pass the test if you get some other kind of error",
    "start": "2230490",
    "end": "2236340"
  },
  {
    "text": "well we're not catching it so handle it the usual way which usually means blow",
    "start": "2236340",
    "end": "2241770"
  },
  {
    "text": "up and fail the test however even that won't work if the code were testing catches time",
    "start": "2241770",
    "end": "2249870"
  },
  {
    "text": "out errors itself like this enhanced version of send message to include some",
    "start": "2249870",
    "end": "2256680"
  },
  {
    "text": "of that ever recovery at least represented by a comment that I alluded",
    "start": "2256680",
    "end": "2262110"
  },
  {
    "text": "to earlier now sorry I don't know of a reliable",
    "start": "2262110",
    "end": "2267390"
  },
  {
    "text": "easy general technique to kill mutants like that but we could go to some",
    "start": "2267390",
    "end": "2275070"
  },
  {
    "text": "lengths like explicitly raise it different ever and handle it or run it",
    "start": "2275070",
    "end": "2280860"
  },
  {
    "text": "in a separate process or thread some tools already do that and that gives us",
    "start": "2280860",
    "end": "2285930"
  },
  {
    "text": "a lot more ways to poke at it and terminate it but sometimes evil mutants",
    "start": "2285930",
    "end": "2292880"
  },
  {
    "text": "even immortal ones really are just random some tools give you ways to mark",
    "start": "2292880",
    "end": "2301050"
  },
  {
    "text": "certain lines or even entire functions as non mutated or even non mutated in",
    "start": "2301050",
    "end": "2307980"
  },
  {
    "text": "certain ways so if you're using a tool like that I would recommend whitelisting",
    "start": "2307980",
    "end": "2313590"
  },
  {
    "text": "that line that was removed at least tell it don't remove this like leaving a note",
    "start": "2313590",
    "end": "2320400"
  },
  {
    "text": "on the whiteboard do not erase in summary mutation testing is a powerful",
    "start": "2320400",
    "end": "2328170"
  },
  {
    "text": "technique to ensure that our code is meaningful and our tests are strict it's",
    "start": "2328170",
    "end": "2333210"
  },
  {
    "text": "easy to get started with at least in terms of setting up the tools and",
    "start": "2333210",
    "end": "2338700"
  },
  {
    "text": "tagging our tests yes it may be rather tedious but at least it's conceptually",
    "start": "2338700",
    "end": "2345180"
  },
  {
    "text": "easy but it's rather difficult to interpret the results and it's quite",
    "start": "2345180",
    "end": "2351000"
  },
  {
    "text": "hard labor on the CPU even if these factors mean it's not really an",
    "start": "2351000",
    "end": "2356850"
  },
  {
    "text": "appropriate thing for your current projects at least it's still a really",
    "start": "2356850",
    "end": "2362280"
  },
  {
    "text": "cool idea at least in a kind of geeky way if you'd like to try mutation",
    "start": "2362280",
    "end": "2367830"
  },
  {
    "text": "testing for yourself here's a list of tools for some common languages and some",
    "start": "2367830",
    "end": "2375120"
  },
  {
    "text": "others like I doubt many of you are doing fortran 77 these days i'll pause a",
    "start": "2375120",
    "end": "2380760"
  },
  {
    "text": "minute so you can take pictures as i see many of you are already doing",
    "start": "2380760",
    "end": "2386930"
  },
  {
    "text": "okay thank all the photographers are done and now it's your turn if you have",
    "start": "2401970",
    "end": "2407890"
  },
  {
    "text": "any questions on killing Evil Mutants all take them now and then we can open it up to more general questions and",
    "start": "2407890",
    "end": "2414910"
  },
  {
    "text": "comments and such if you think of something later well my contact information is up there",
    "start": "2414910",
    "end": "2420580"
  },
  {
    "text": "and I'll be around for the rest of the conference including the crews tonight but first a shout out to top tell whose",
    "start": "2420580",
    "end": "2427120"
  },
  {
    "text": "speakers Network helped me prepare and practice this presentation please use that referral link if you want to hire",
    "start": "2427120",
    "end": "2433780"
  },
  {
    "text": "us or join us any questions",
    "start": "2433780",
    "end": "2438000"
  },
  {
    "text": "okay the question if I understand correctly is in that example with the",
    "start": "2463530",
    "end": "2468790"
  },
  {
    "text": "small medium and large message sizes there we go are there tools that would",
    "start": "2468790",
    "end": "2479130"
  },
  {
    "text": "recognize one that would that we could",
    "start": "2479130",
    "end": "2485170"
  },
  {
    "text": "feed all of the message sizes and test",
    "start": "2485170",
    "end": "2490600"
  },
  {
    "text": "each one and not make sense out of them",
    "start": "2490600",
    "end": "2498000"
  },
  {
    "text": "okay let me try again to paraphrase that see if I understand with a data-driven",
    "start": "2533380",
    "end": "2541400"
  },
  {
    "text": "test so that you're looping over these message sizes and testing proper",
    "start": "2541400",
    "end": "2549890"
  },
  {
    "text": "functionality with each one that particular mutant would still be evil",
    "start": "2549890",
    "end": "2558500"
  },
  {
    "text": "with each of the sizes so would it you know would it be some of the typical",
    "start": "2558500",
    "end": "2565370"
  },
  {
    "text": "mutation testing tools realize that for one of the sizes and not bother testing",
    "start": "2565370",
    "end": "2571610"
  },
  {
    "text": "with the other sizes it's that what do you mean okay if it will fail for one",
    "start": "2571610",
    "end": "2585560"
  },
  {
    "text": "and succeed for the others hmm okay such",
    "start": "2585560",
    "end": "2594860"
  },
  {
    "text": "as in this case if we're trying to test",
    "start": "2594860",
    "end": "2600280"
  },
  {
    "text": "okay the test itself is testing that we get back the actual size and if that",
    "start": "2600280",
    "end": "2608660"
  },
  {
    "text": "would fail for the large one I think",
    "start": "2608660",
    "end": "2613940"
  },
  {
    "text": "that's a complex enough question I think we're going to have to hash that over",
    "start": "2613940",
    "end": "2621310"
  },
  {
    "text": "separately and not take time from others",
    "start": "2621310",
    "end": "2626960"
  },
  {
    "text": "who may be asking quicker questions unless of course there are no other",
    "start": "2626960",
    "end": "2632300"
  },
  {
    "text": "quicker questions anybody else have questions I see a hand raised there or",
    "start": "2632300",
    "end": "2638150"
  },
  {
    "text": "you're just scratching your head",
    "start": "2638150",
    "end": "2641200"
  },
  {
    "text": "is it expensive to it yes it usually",
    "start": "2645660",
    "end": "2656079"
  },
  {
    "text": "takes a fair amount of time in practice I have done this mainly in Ruby and",
    "start": "2656079",
    "end": "2663730"
  },
  {
    "text": "mainly on fairly small machines but still with a fairly small system and",
    "start": "2663730",
    "end": "2670390"
  },
  {
    "text": "even so it still took about an hour and",
    "start": "2670390",
    "end": "2676510"
  },
  {
    "text": "a half to generate a full mutation",
    "start": "2676510",
    "end": "2681910"
  },
  {
    "text": "testing run against the test suite we had at the time which is not too",
    "start": "2681910",
    "end": "2690690"
  },
  {
    "text": "extensive I'm trying to fix that but that's all another story so it can be",
    "start": "2690690",
    "end": "2697530"
  },
  {
    "text": "expensive in the computer terms so",
    "start": "2697530",
    "end": "2703109"
  },
  {
    "text": "meaning the CPU time and elapsed time it's one of the major drawbacks but if",
    "start": "2703109",
    "end": "2712750"
  },
  {
    "text": "you can let it run overnight and then manually go through the tests and weed",
    "start": "2712750",
    "end": "2719319"
  },
  {
    "text": "out a lot of the ones that are trying to tell you the same thing it can still be reasonable yes yes a lot of them",
    "start": "2719319",
    "end": "2742680"
  },
  {
    "text": "unfortunately not quite all of them will let you tell the mutation testing tool",
    "start": "2742680",
    "end": "2749799"
  },
  {
    "text": "don't bother with this line I know this is gonna yield a lot of false alarms or",
    "start": "2749799",
    "end": "2755880"
  },
  {
    "text": "some of them give you a little more fine-grained control I don't bother making this Plus into a minus or",
    "start": "2755880",
    "end": "2764400"
  },
  {
    "text": "whatever don't mutate it in these particular ways sometimes that can get",
    "start": "2764400",
    "end": "2772349"
  },
  {
    "text": "rather hairy to figure out especially if you then change the line itself",
    "start": "2772349",
    "end": "2777460"
  },
  {
    "text": "you then have to figure out is there still a high",
    "start": "2777460",
    "end": "2783740"
  },
  {
    "text": "potential for false alarms there you could just untag it and see what the",
    "start": "2783740",
    "end": "2791390"
  },
  {
    "text": "tool spits out and if there is still a high rate of false Alondra there's an",
    "start": "2791390",
    "end": "2796430"
  },
  {
    "text": "even worse rate of false alarms yes tag it appropriately maybe just mutate the",
    "start": "2796430",
    "end": "2801710"
  },
  {
    "text": "comments so that the tool won't recognize it or something yes constants",
    "start": "2801710",
    "end": "2816800"
  },
  {
    "text": "are subject to mutation for instance yeah think I had some in there yeah if",
    "start": "2816800",
    "end": "2827360"
  },
  {
    "text": "you were using number 42 so if you had something like x equals y over 42 it",
    "start": "2827360",
    "end": "2835460"
  },
  {
    "text": "could change it - why / - 42 or y over minus 1 Y over 0 of course you get a",
    "start": "2835460",
    "end": "2842540"
  },
  {
    "text": "division by zero ever there or do you mean when you're declaring a constant so",
    "start": "2842540",
    "end": "2848510"
  },
  {
    "text": "I have like pi equals 3.14 it could change that to zero",
    "start": "2848510",
    "end": "2853780"
  },
  {
    "text": "oh that's absolutely not complete yes",
    "start": "2863650",
    "end": "2871590"
  },
  {
    "text": "there's many many more substitutions that these things can make if I had the",
    "start": "2871590",
    "end": "2880690"
  },
  {
    "text": "entire list on one slide it would be too small to easily read but I think this",
    "start": "2880690",
    "end": "2886930"
  },
  {
    "text": "gives you the the general idea it can mess with your constants enemy of what",
    "start": "2886930",
    "end": "2903720"
  },
  {
    "text": "the enemy of CPU interesting concept hmm",
    "start": "2903720",
    "end": "2910510"
  },
  {
    "text": "I don't think it necessarily has to be a constant anything you put there even if",
    "start": "2910510",
    "end": "2916600"
  },
  {
    "text": "it was like X equals y over Z each of those would still get mutated well at",
    "start": "2916600",
    "end": "2924460"
  },
  {
    "text": "least the X might not get mutated but the Y and the over and the Z so I could",
    "start": "2924460",
    "end": "2930970"
  },
  {
    "text": "change it to all sorts of things like x equals 42 over Z or Z over 40 well or Y",
    "start": "2930970",
    "end": "2939340"
  },
  {
    "text": "over 42 or Y times Z and so forth yes I",
    "start": "2939340",
    "end": "2950130"
  },
  {
    "text": "have found a few places where the code was unreachable and somewhere it was not",
    "start": "2951000",
    "end": "2961450"
  },
  {
    "text": "doing quite what I thought it was doing so yes it's helpful whether it is worth",
    "start": "2961450",
    "end": "2968740"
  },
  {
    "text": "it well that's much more of a judgment call you may find that it's least",
    "start": "2968740",
    "end": "2975880"
  },
  {
    "text": "certainly at first before you really get a feel for what it's trying to tell you",
    "start": "2975880",
    "end": "2982750"
  },
  {
    "text": "you might find that it's royal pain in the proverbial posterior and you're not",
    "start": "2982750",
    "end": "2989230"
  },
  {
    "text": "finding significant problems but if you",
    "start": "2989230",
    "end": "2994330"
  },
  {
    "text": "do a little bit once in a while yeah",
    "start": "2994330",
    "end": "2997950"
  },
  {
    "text": "yes testing if it comes up with mutants",
    "start": "3010500",
    "end": "3016780"
  },
  {
    "text": "like strictly less than is an evil mutant substituting in for less than or",
    "start": "3016780",
    "end": "3022270"
  },
  {
    "text": "equal to or vice-versa yes that will point out boundaries that you did not",
    "start": "3022270",
    "end": "3028500"
  },
  {
    "text": "hone in on a home in on two tests hand back there yes okay some of the tools",
    "start": "3028500",
    "end": "3056410"
  },
  {
    "text": "will do that a lot of them include an incremental mode so that it will test",
    "start": "3056410",
    "end": "3061960"
  },
  {
    "text": "only what changed and it will have some temporary file or whatever where it",
    "start": "3061960",
    "end": "3069270"
  },
  {
    "text": "writes down okay this file was written on this date then",
    "start": "3069270",
    "end": "3076300"
  },
  {
    "text": "time and had these Evil Mutants in it and it will then see okay it hasn't",
    "start": "3076300",
    "end": "3083200"
  },
  {
    "text": "changed since then so and don't bother testing it yes",
    "start": "3083200",
    "end": "3091440"
  },
  {
    "text": "as in the source code it's kind of like annotations you have in several",
    "start": "3104180",
    "end": "3110820"
  },
  {
    "text": "languages like I understand this is a heavily Microsoft oriented conference",
    "start": "3110820",
    "end": "3118530"
  },
  {
    "text": "but I don't know that stack very well I know those sort of notations are often used in Java and in some modern",
    "start": "3118530",
    "end": "3126660"
  },
  {
    "text": "varieties of JavaScript yes you can have",
    "start": "3126660",
    "end": "3139620"
  },
  {
    "text": "a lot of comments that are just for the purpose of getting rid of false alarm",
    "start": "3139620",
    "end": "3147240"
  },
  {
    "text": "Evil Mutants just getting in the way of code legibility yes that is a drawback",
    "start": "3147240",
    "end": "3153720"
  },
  {
    "text": "that I should mention in the in the next edition of this talk yes if you have a",
    "start": "3153720",
    "end": "3166860"
  },
  {
    "text": "lot of false alarms that you want to get rid of through tagging some of them you",
    "start": "3166860",
    "end": "3173220"
  },
  {
    "text": "can get rid of by rearranging your code a little bit sometimes it's not a false",
    "start": "3173220",
    "end": "3179940"
  },
  {
    "text": "alarm at all but if you don't want it to",
    "start": "3179940",
    "end": "3184980"
  },
  {
    "text": "bother test sighting testing that for instance some particular string gets logged correctly in debug mode yeah",
    "start": "3184980",
    "end": "3192300"
  },
  {
    "text": "that's a good application for whitelisting or at least saying do not",
    "start": "3192300",
    "end": "3198570"
  },
  {
    "text": "remove do not mutate in various ways this particular line",
    "start": "3198570",
    "end": "3205130"
  },
  {
    "text": "hmm the question is I realized I've been",
    "start": "3214870",
    "end": "3220280"
  },
  {
    "text": "forgetting to repeat the questions could you at least have such a list in the I",
    "start": "3220280",
    "end": "3226280"
  },
  {
    "text": "don't recall exactly what words you used but I assume you mean basically the tool configuration telling it don't bother",
    "start": "3226280",
    "end": "3233570"
  },
  {
    "text": "mutating calls to this function or something like that right okay in the",
    "start": "3233570",
    "end": "3243740"
  },
  {
    "text": "test rather than the I have not seen",
    "start": "3243740",
    "end": "3255830"
  },
  {
    "text": "ones that well then again I have not used all the tools I've used mostly",
    "start": "3255830",
    "end": "3262220"
  },
  {
    "text": "mutant for Ruby and a little bit of mud for Python played a tiny bit with others",
    "start": "3262220",
    "end": "3267650"
  },
  {
    "text": "but I have not seen any that will let you put such configuration in the tests",
    "start": "3267650",
    "end": "3274850"
  },
  {
    "text": "themselves but most of them do take a fairly extensive configuration file so",
    "start": "3274850",
    "end": "3281780"
  },
  {
    "text": "they could have at least that way of accepting a list of functions not to",
    "start": "3281780",
    "end": "3290180"
  },
  {
    "text": "bother mutating calls to rather than littering up your production code it",
    "start": "3290180",
    "end": "3343640"
  },
  {
    "text": "will use all the tests that you have tagged is being applicable to that particular function so if you have your divide",
    "start": "3343640",
    "end": "3351790"
  },
  {
    "text": "function and your divide by zero gets us an exception test and a nine divided by",
    "start": "3351790",
    "end": "3359500"
  },
  {
    "text": "three gets us through well okay let's say 12 divided by three gets us four tests it would run both of those if the",
    "start": "3359500",
    "end": "3368860"
  },
  {
    "text": "mutant survives you don't want it to survive but it would run well some of",
    "start": "3368860",
    "end": "3376450"
  },
  {
    "text": "them will do them in random order some will do them in order of the file whatever but it'll run one if it fails",
    "start": "3376450",
    "end": "3382870"
  },
  {
    "text": "it will just stop there if it's still succeeds it'll go on to the next ones",
    "start": "3382870",
    "end": "3388860"
  },
  {
    "text": "and once it's passed all the tests that",
    "start": "3388860",
    "end": "3394620"
  },
  {
    "text": "are applicable to that function if it",
    "start": "3394620",
    "end": "3399670"
  },
  {
    "text": "passes them all that'll be reported as an evil mutant yes",
    "start": "3399670",
    "end": "3408360"
  },
  {
    "text": "right if I can try and paraphrase the question if you have a test that is",
    "start": "3439600",
    "end": "3447610"
  },
  {
    "text": "actually expecting an exception to be thrown then if an evil mutant is",
    "start": "3447610",
    "end": "3455790"
  },
  {
    "text": "throwing an exception it may be throwing the same exception but still due to a",
    "start": "3455790",
    "end": "3464010"
  },
  {
    "text": "difference in the code and I guess the point is that might essentially",
    "start": "3464010",
    "end": "3470530"
  },
  {
    "text": "constitute a false alarm right okay okay",
    "start": "3470530",
    "end": "3477810"
  },
  {
    "text": "so if your actual production code is",
    "start": "3499740",
    "end": "3505770"
  },
  {
    "text": "catching those errors that gets back to",
    "start": "3505770",
    "end": "3512550"
  },
  {
    "text": "the stuff I was talking about with the evil mutants that actually catch",
    "start": "3512550",
    "end": "3519910"
  },
  {
    "text": "whatever error it is you're trying to construct with a division by zero error",
    "start": "3519910",
    "end": "3527650"
  },
  {
    "text": "I suppose you could know I don't know if",
    "start": "3527650",
    "end": "3534100"
  },
  {
    "text": "Hannah I think I'll have to think about that a little more and get with you afterwards and we have a minute and a",
    "start": "3534100",
    "end": "3542530"
  },
  {
    "text": "few seconds left in this session so I guess we should probably continue this",
    "start": "3542530",
    "end": "3548050"
  },
  {
    "text": "afterwards and okay yeah if it's something can be answered in less than a minute we're moving",
    "start": "3548050",
    "end": "3559400"
  },
  {
    "text": "ah for removing the meaningless mutations like the ones that are",
    "start": "3559400",
    "end": "3564950"
  },
  {
    "text": "redundant with other mutants or semantically or is identical to the original code I have not actually delved",
    "start": "3564950",
    "end": "3571130"
  },
  {
    "text": "into how those actually work so yeah I",
    "start": "3571130",
    "end": "3579319"
  },
  {
    "text": "can research that for maybe the next edition of this talk and with that we",
    "start": "3579319",
    "end": "3585410"
  },
  {
    "text": "are within 30 seconds of stop time so thank you and see you around",
    "start": "3585410",
    "end": "3593259"
  }
]