[
  {
    "text": "so let's start this off today we're going to talk about exploring c-sharp ate the deep dive my name is David pine",
    "start": "30",
    "end": "7980"
  },
  {
    "text": "you can follow me on twitter at david pine 7 i hope that you do and if you do please take pictures and tweet them at",
    "start": "7980",
    "end": "16379"
  },
  {
    "text": "my handle so that my wife knows i'm actually here today you can follow my",
    "start": "16379",
    "end": "21600"
  },
  {
    "text": "blog at david pine dotnet where i blog about all the things almost too much too",
    "start": "21600",
    "end": "27390"
  },
  {
    "text": "many things right i blog about c-sharp i blog about angular typescript the the",
    "start": "27390",
    "end": "33000"
  },
  {
    "text": "idea of imposter syndrome i blog about building magic mirrors for fun and all",
    "start": "33000",
    "end": "38730"
  },
  {
    "text": "those things right so check that out so we're gonna start with a few notes from",
    "start": "38730",
    "end": "43829"
  },
  {
    "text": "microsoft a few things that you should know about c-sharp 8 so most of the features are implemented entirely in the",
    "start": "43829",
    "end": "51120"
  },
  {
    "text": "c-sharp compiler which is a huge advantage but some of those features are",
    "start": "51120",
    "end": "57149"
  },
  {
    "text": "not available they actually require dotnet standard 2.1 or dotnet core 3.0",
    "start": "57149",
    "end": "64728"
  },
  {
    "text": "and sorry but defaults interface",
    "start": "64729",
    "end": "70409"
  },
  {
    "text": "implementations that requires an entirely new runtime so you'll need",
    "start": "70409",
    "end": "75590"
  },
  {
    "text": "dotnet core 3.0 for that and it won't even be shipped as part of that framework for point 8 so just a bit of",
    "start": "75590",
    "end": "83759"
  },
  {
    "text": "housekeeping about some of the features so we're gonna start looking at async",
    "start": "83759",
    "end": "89729"
  },
  {
    "text": "streams and we're gonna cover some of the the the types that were added and kind of justify why some of these",
    "start": "89729",
    "end": "97079"
  },
  {
    "text": "features require changes under the covers right so there are some new types that we're added so we have a new system",
    "start": "97079",
    "end": "104430"
  },
  {
    "text": "dot I a sync disposable everyone should be familiar with AI disposable now if you're a.net developer just real quick",
    "start": "104430",
    "end": "111840"
  },
  {
    "text": "show of hands who's a.net developer right obviously thank you for attending my talk we have system dot I a sync",
    "start": "111840",
    "end": "120990"
  },
  {
    "text": "innumerable of T and I async enumerator of team then we have ranges right so",
    "start": "120990",
    "end": "128700"
  },
  {
    "text": "they added system dot range and system index and we'll get into more details and what these actually like encode itself but those are just",
    "start": "128700",
    "end": "135820"
  },
  {
    "text": "some of the new types that were added and some of the reasoning why not everything can be just magically there",
    "start": "135820",
    "end": "140950"
  },
  {
    "text": "from the compiler so since the default interface methods I'm not able to show",
    "start": "140950",
    "end": "149260"
  },
  {
    "text": "you what those look like in code like from the IDE Visual Studio itself I'm gonna show you on slides instead so I",
    "start": "149260",
    "end": "156580"
  },
  {
    "text": "want you to imagine for a second that we have an interface an eye data repository",
    "start": "156580",
    "end": "161650"
  },
  {
    "text": "of T and we have a simple create method void returning that takes a T value and",
    "start": "161650",
    "end": "169000"
  },
  {
    "text": "obviously does something right as a repository would do it would create that persist it somewhere so now imagine that",
    "start": "169000",
    "end": "177280"
  },
  {
    "text": "we want to add a new API as it stands today right prior to c-sharp eight what",
    "start": "177280",
    "end": "186520"
  },
  {
    "text": "would this do this would cause a problem you'd probably lose friends in the process because if you're adding things",
    "start": "186520",
    "end": "192310"
  },
  {
    "text": "to an interface you're potentially breaking implementations that you know",
    "start": "192310",
    "end": "197620"
  },
  {
    "text": "implement that so we want to add a create all given an array of T values so",
    "start": "197620",
    "end": "207010"
  },
  {
    "text": "what default interface methods is proposing is the ability to in our",
    "start": "207010",
    "end": "212680"
  },
  {
    "text": "interface itself provide that default methodology right we're actually we have",
    "start": "212680",
    "end": "218500"
  },
  {
    "text": "logic in here and you'll notice that it's actually referring to create which",
    "start": "218500",
    "end": "224020"
  },
  {
    "text": "is something that's already on the interface itself so this is going to be kind of an opt-in thing where",
    "start": "224020",
    "end": "230550"
  },
  {
    "text": "implementers can override this by providing their own implementation that's kind of like magic right it's",
    "start": "230550",
    "end": "236500"
  },
  {
    "text": "pretty cool I also want to take a second to talk about target type new",
    "start": "236500",
    "end": "242500"
  },
  {
    "text": "expressions so this is something else with c-sharp eight that's going to be",
    "start": "242500",
    "end": "248020"
  },
  {
    "text": "very interesting and compelling so imagine we have a point class we've got",
    "start": "248020",
    "end": "253360"
  },
  {
    "text": "a couple properties off of it x and y and we have a constructor that's given",
    "start": "253360",
    "end": "260109"
  },
  {
    "text": "an x and y and then we have this deconstruct now deconstruct",
    "start": "260109",
    "end": "266860"
  },
  {
    "text": "if you've been following along with c-sharp c-sharp has become open-source",
    "start": "266860",
    "end": "273039"
  },
  {
    "text": "and the language itself the design team allows anyone in the community to you",
    "start": "273039",
    "end": "280419"
  },
  {
    "text": "know provide proposals right pull requests features things that they want to do and you know it's an open dialogue",
    "start": "280419",
    "end": "287080"
  },
  {
    "text": "and they encourage that and I think that's extremely powerful but some of the things that they've been doing is",
    "start": "287080",
    "end": "293139"
  },
  {
    "text": "they've had point releases so if you've been following along with C sharp like c-sharp seven seven point one seven",
    "start": "293139",
    "end": "299500"
  },
  {
    "text": "point two seven point three they've introduced the concept of tuples into the system and with that tuples had this",
    "start": "299500",
    "end": "308979"
  },
  {
    "text": "magic method name called deconstruct so on anything that's not a tuple you can",
    "start": "308979",
    "end": "316690"
  },
  {
    "text": "say public void deconstruct and you can provide some outs parameters and as long",
    "start": "316690",
    "end": "324340"
  },
  {
    "text": "as it compiles right and you're assigning to those out parameters you",
    "start": "324340",
    "end": "329409"
  },
  {
    "text": "can walk up to that instance and deconstruct it as if it was a tuple which is pretty amazing so what we can",
    "start": "329409",
    "end": "335860"
  },
  {
    "text": "do with this point class right it's not a tuple in this point class we can say",
    "start": "335860",
    "end": "341610"
  },
  {
    "text": "to have an instance of it and deconstruct it and have those x and y values available to us another thing",
    "start": "341610",
    "end": "348250"
  },
  {
    "text": "that I added here has been in the end net for a long time in c-sharp for a long time and that's a public static",
    "start": "348250",
    "end": "355449"
  },
  {
    "text": "implicit operator so implicit operators are pretty powerful again they've been",
    "start": "355449",
    "end": "361330"
  },
  {
    "text": "around for a very long time just real quick show of hands who's used an implicit operator a couple people you",
    "start": "361330",
    "end": "367569"
  },
  {
    "text": "will see why that's important in a second but basically it allows us to implicitly treat the tuple literal X&Y",
    "start": "367569",
    "end": "376029"
  },
  {
    "text": "as a new instance of a point right so",
    "start": "376029",
    "end": "381599"
  },
  {
    "text": "today we might write we might declare a pointer a points equals this this new",
    "start": "381599",
    "end": "388750"
  },
  {
    "text": "array of points right what they're proposing with target type new",
    "start": "388750",
    "end": "394659"
  },
  {
    "text": "expressions is since the type is known from our declaration we can omit",
    "start": "394659",
    "end": "400779"
  },
  {
    "text": "the type itself right so we can say simply new open friends close friends",
    "start": "400779",
    "end": "407259"
  },
  {
    "text": "and then X and why is that pretty cool you guys think that would be like a nice feature to have what's really",
    "start": "407259",
    "end": "414159"
  },
  {
    "text": "interesting is they've they're introducing this with c-sharp babe but with the implicit operator that I've",
    "start": "414159",
    "end": "419379"
  },
  {
    "text": "shown you if we were to take it a step further we could say point array points equals new point array and because of",
    "start": "419379",
    "end": "426129"
  },
  {
    "text": "the implicit operator in tuples we can omit new and point altogether right so",
    "start": "426129",
    "end": "433119"
  },
  {
    "text": "we just literally have what looks like tuple literals which is I think awesome",
    "start": "433119",
    "end": "439589"
  },
  {
    "text": "so we're gonna jump into Visual Studio 2019 we're gonna spend a lot of time in",
    "start": "439589",
    "end": "445689"
  },
  {
    "text": "here and this is going to be the bulk of the talk and we're gonna work through various c-sharp eight features and one",
    "start": "445689",
    "end": "452499"
  },
  {
    "text": "thing I want to preface this with is that I'm fairly opinionated so and I'm",
    "start": "452499",
    "end": "458019"
  },
  {
    "text": "empathetic I'm by title a Technical Evangelist but I empathize with",
    "start": "458019",
    "end": "463299"
  },
  {
    "text": "developers who are constrained to the limitations of you know the bureaucracy",
    "start": "463299",
    "end": "469539"
  },
  {
    "text": "of enterprises or large teams and those types of development environments where you might have limitations with what it",
    "start": "469539",
    "end": "476769"
  },
  {
    "text": "you know you can use and things like that so one thing I like to do is I like to put this chip on my shoulder and say",
    "start": "476769",
    "end": "482379"
  },
  {
    "text": "these features are amazing right and most people will come up here and tell you that but there's always a but like",
    "start": "482379",
    "end": "488889"
  },
  {
    "text": "how does it apply to you what's practical why do you want to use it what are the actual advantages of it just cuz",
    "start": "488889",
    "end": "494919"
  },
  {
    "text": "it's new and shiny doesn't mean you should be using it",
    "start": "494919",
    "end": "498869"
  },
  {
    "text": "so we're in Visual Studio 2019 I've got a c-sharp eight project and to clarify a",
    "start": "508880",
    "end": "516479"
  },
  {
    "text": "bit I'm going to zoom in and show you",
    "start": "516479",
    "end": "521669"
  },
  {
    "text": "something that you may or may not be aware of so if we right-click on the project and we say properties and we",
    "start": "521669",
    "end": "529710"
  },
  {
    "text": "head over here to application and click build in the properties tab if we go",
    "start": "529710",
    "end": "536820"
  },
  {
    "text": "down towards the bottom there's this Advanced tab we click on that this actually is where you can select the",
    "start": "536820",
    "end": "544350"
  },
  {
    "text": "various version of c-sharp that you want to target right so this project can now",
    "start": "544350",
    "end": "549870"
  },
  {
    "text": "target c-sharp 8 beta so that's good",
    "start": "549870",
    "end": "558950"
  },
  {
    "text": "so this c-sharp 8 application is a simple council app it's nothing to write",
    "start": "558950",
    "end": "564810"
  },
  {
    "text": "home about it's not super exciting we are using John Skeets demo utility just",
    "start": "564810",
    "end": "571590"
  },
  {
    "text": "show our hands if you know who John skeet is I assumed as much and what it",
    "start": "571590",
    "end": "577470"
  },
  {
    "text": "allows us to do is basically have various main entry points in different",
    "start": "577470",
    "end": "582810"
  },
  {
    "text": "classes and it's a way to kind of orchestrate demo code for c-sharp council applications so let's start with",
    "start": "582810",
    "end": "590580"
  },
  {
    "text": "async streams so our async streams one",
    "start": "590580",
    "end": "596190"
  },
  {
    "text": "thing I like to do real quick is there's a bunch of confusion in the community right now about async streams in",
    "start": "596190",
    "end": "602400"
  },
  {
    "text": "particular they'll think of them as being somewhat related to the idea that",
    "start": "602400",
    "end": "608160"
  },
  {
    "text": "reactive extensions offers with reactive extensions it's basically an implementation of the",
    "start": "608160",
    "end": "614250"
  },
  {
    "text": "observer and observable pattern right so the key difference is with ienumerable",
    "start": "614250",
    "end": "621480"
  },
  {
    "text": "and i async enumerable is that those are pole based right so we're pulling stuff",
    "start": "621480",
    "end": "627090"
  },
  {
    "text": "and processing them as quickly as we can with the observer pattern and our X what",
    "start": "627090",
    "end": "635070"
  },
  {
    "text": "you have is like a subscription type of pattern where things are being pushed to you so you",
    "start": "635070",
    "end": "640529"
  },
  {
    "text": "bribe and provide like an on next as like a callback some of the issues with that are like the concept of back",
    "start": "640529",
    "end": "646769"
  },
  {
    "text": "pressure and how do you handle that right since you're not necessarily the consumer of that right you're being",
    "start": "646769",
    "end": "652949"
  },
  {
    "text": "pushed to and you have no control of how many times you get pushed to whereas the",
    "start": "652949",
    "end": "658470"
  },
  {
    "text": "the opposite way of you know just pulling it so so I want to show you that",
    "start": "658470",
    "end": "663480"
  },
  {
    "text": "we have a simple struct a statement that has an ID in a description and we have",
    "start": "663480",
    "end": "671329"
  },
  {
    "text": "the ability to return them this way I want to do a real quick review of the",
    "start": "671329",
    "end": "678089"
  },
  {
    "text": "concept of ienumerable so with ienumerable there's a special keyword",
    "start": "678089",
    "end": "683850"
  },
  {
    "text": "that you can add to ienumerable returning functions that is yield so",
    "start": "683850",
    "end": "689339"
  },
  {
    "text": "who's written iterators before who's used the yield keyword okay this is great good a lot of times people don't raise",
    "start": "689339",
    "end": "695610"
  },
  {
    "text": "their hands so I like to cover that so what this means is that this block of",
    "start": "695610",
    "end": "701009"
  },
  {
    "text": "code is going to be treated as an iterator so it's deferred execution and",
    "start": "701009",
    "end": "707069"
  },
  {
    "text": "that means that it's not going to be executed until this ienumerable is materialized until we either call like",
    "start": "707069",
    "end": "713670"
  },
  {
    "text": "to array or to list or for each over that collection right so one of the",
    "start": "713670",
    "end": "720000"
  },
  {
    "text": "general questions we'll ask is like if error was true which I don't know why we'd ever in production code have a true",
    "start": "720000",
    "end": "727800"
  },
  {
    "text": "situation where we're throwing like this but bear with me if this was true and we",
    "start": "727800",
    "end": "733110"
  },
  {
    "text": "were to throw an exception here and I was to call get statements what would happen the correct answer is nothing",
    "start": "733110",
    "end": "742800"
  },
  {
    "text": "right you get your ienumerable back and until you start to materialize it that",
    "start": "742800",
    "end": "748079"
  },
  {
    "text": "at that point in time that's when that exception is actually thrown so that could be way later on so we have an task",
    "start": "748079",
    "end": "758720"
  },
  {
    "text": "returning of ienumerable statements right just demonstrating that and this was pre c-sharp eight so you'd imagine",
    "start": "758720",
    "end": "765689"
  },
  {
    "text": "how now you know with the future of what c-sharp is doing we wanted to you know",
    "start": "765689",
    "end": "772470"
  },
  {
    "text": "try to join these two worlds with tasks tasks based parallel or sorry",
    "start": "772470",
    "end": "778080"
  },
  {
    "text": "task based asynchronous programming allows us to represent the execution of",
    "start": "778080",
    "end": "785120"
  },
  {
    "text": "code right so we're basically saying this is going to happen and it's gonna it can happen asynchronously all right",
    "start": "785120",
    "end": "792450"
  },
  {
    "text": "so it's it offers up the potential for suspended execution so now we're merging",
    "start": "792450",
    "end": "797730"
  },
  {
    "text": "these two concepts right we have these new types so we look at ia sync enumerable so we can get state",
    "start": "797730",
    "end": "802980"
  },
  {
    "text": "statements asynchronously and we're gonna return ia sync enumerable so",
    "start": "802980",
    "end": "808260"
  },
  {
    "text": "that's allowing our our async methods to also have the yield keyword in them so",
    "start": "808260",
    "end": "814950"
  },
  {
    "text": "this is basically joining the concept of deferred execution with the potential",
    "start": "814950",
    "end": "820590"
  },
  {
    "text": "for suspended execution right so we have",
    "start": "820590",
    "end": "827700"
  },
  {
    "text": "a stopwatch here and we'll get statements so the statements is an I I",
    "start": "827700",
    "end": "832770"
  },
  {
    "text": "think enumerable of statement we can iterate over those notice that when we iterate over them we're saying a wait",
    "start": "832770",
    "end": "839340"
  },
  {
    "text": "for each right so this syntax is familiar but also new and then we're",
    "start": "839340",
    "end": "847590"
  },
  {
    "text": "just going to print out the elapsed time for each of those statements so let's run this real quick",
    "start": "847590",
    "end": "855170"
  },
  {
    "text": "and bump the size up on that real quick also zero and then basically every",
    "start": "860430",
    "end": "874050"
  },
  {
    "text": "second will will pump out the evaluation of those asynchronously awaited and",
    "start": "874050",
    "end": "880559"
  },
  {
    "text": "deferred execution all married so that's that's basically async streams which is",
    "start": "880559",
    "end": "886079"
  },
  {
    "text": "pretty cool right so one thing that is",
    "start": "886079",
    "end": "891089"
  },
  {
    "text": "also very cool but also not cool and that is nullable reference types and I",
    "start": "891089",
    "end": "897839"
  },
  {
    "text": "say it's not cool because to me when I first heard the concept of nullable",
    "start": "897839",
    "end": "903749"
  },
  {
    "text": "reference types it was terrifying I thought to myself what is the c-sharp team smokin like what are they doing",
    "start": "903749",
    "end": "911009"
  },
  {
    "text": "like we know quite frankly what are they doing why are they thinking of this as an idea like what to me reference types",
    "start": "911009",
    "end": "916829"
  },
  {
    "text": "have always been nullable so to explicitly state that no you know reference types are not able it didn't",
    "start": "916829",
    "end": "922769"
  },
  {
    "text": "really compute with me I knew that nullable was something that was introduced around value types right",
    "start": "922769",
    "end": "930209"
  },
  {
    "text": "Struck's we could say we have a questionable date time right with the question mark and that made it nullable",
    "start": "930209",
    "end": "936829"
  },
  {
    "text": "but reference types that didn't really make sense so what's the big advantage",
    "start": "936829",
    "end": "942389"
  },
  {
    "text": "here and one thing that we like to to do is developers is talk about the notion",
    "start": "942389",
    "end": "948179"
  },
  {
    "text": "of the billion dollar mistake so show of hands if you've heard of this concept the billion dollar mistake and this is",
    "start": "948179",
    "end": "954449"
  },
  {
    "text": "coming from the inventor of null he says it's the billion dollar mistake and as",
    "start": "954449",
    "end": "959639"
  },
  {
    "text": "a.net developer I will guarantee you that you have had a null reference",
    "start": "959639",
    "end": "964889"
  },
  {
    "text": "exception at one point in time right object reference not set to an instance of an object to show of hands who is",
    "start": "964889",
    "end": "970620"
  },
  {
    "text": "dealt with that probably too often right so what this feature is looking to do is",
    "start": "970620",
    "end": "975990"
  },
  {
    "text": "to help alleviate that problem it's helping to alleviate that concern some",
    "start": "975990",
    "end": "981600"
  },
  {
    "text": "by having the power of our IDE light up and start saying you know what you",
    "start": "981600",
    "end": "987059"
  },
  {
    "text": "didn't think of this case here you should be more defensive in your coding",
    "start": "987059",
    "end": "992660"
  },
  {
    "text": "so in this specific example I have a pound nullable so a compiler directive",
    "start": "992660",
    "end": "999050"
  },
  {
    "text": "and I'm gonna say enable we're gonna",
    "start": "999050",
    "end": "1004420"
  },
  {
    "text": "look at how our IDE starts lighting up a bit so we have a person class with first",
    "start": "1004420",
    "end": "1014230"
  },
  {
    "text": "name middle name and last name and we have two constructors one of which which",
    "start": "1014230",
    "end": "1019690"
  },
  {
    "text": "is just taking the first and last name so we know from the constructors itself",
    "start": "1019690",
    "end": "1025000"
  },
  {
    "text": "that we're not explicitly assigning to the middle name and the IDE knows that",
    "start": "1025000",
    "end": "1030188"
  },
  {
    "text": "also so the ID is going to tell us that we have a potential problem write a non",
    "start": "1030189",
    "end": "1040600"
  },
  {
    "text": "nullable property middle name is uninitialized so what can we do right",
    "start": "1040600",
    "end": "1046079"
  },
  {
    "text": "what we can do is we can really express our intent so we can say that middle",
    "start": "1046079",
    "end": "1052840"
  },
  {
    "text": "name the string here we can say middle name is questionable right so how does",
    "start": "1052840",
    "end": "1059950"
  },
  {
    "text": "that change what our IDE might do in terms of intellisense further down the",
    "start": "1059950",
    "end": "1065770"
  },
  {
    "text": "pipeline right so let's exemplify that so we're gonna instantiate a person you",
    "start": "1065770",
    "end": "1071230"
  },
  {
    "text": "got Miguel and we have a function that gets the length of the middle name of a",
    "start": "1071230",
    "end": "1077140"
  },
  {
    "text": "given person and this is coming from c-sharp seven where they introduced",
    "start": "1077140",
    "end": "1083730"
  },
  {
    "text": "local functions so we're gonna get the length of the middle name and here the",
    "start": "1083730",
    "end": "1091420"
  },
  {
    "text": "IDE is telling us more about that right let's zoom in again and it says one",
    "start": "1091420",
    "end": "1096760"
  },
  {
    "text": "thing you'll notice is I say string who likes to use string versus like var for example who who likes bar I guess that's",
    "start": "1096760",
    "end": "1103570"
  },
  {
    "text": "a better question great imma bar advocates i I prefer that because I'm",
    "start": "1103570",
    "end": "1109240"
  },
  {
    "text": "lazy right as developers I think we're all lazy so far is less than saying like dictionary of string of dictionary",
    "start": "1109240",
    "end": "1116530"
  },
  {
    "text": "because we have nested dictionaries for some odd reason right so we have a string here this is our middle name",
    "start": "1116530",
    "end": "1121780"
  },
  {
    "text": "we're saying it's a string middle name equals person middle name and one thing you'll",
    "start": "1121780",
    "end": "1129950"
  },
  {
    "text": "notice is that the middle name is actually a questionable string right",
    "start": "1129950",
    "end": "1135980"
  },
  {
    "text": "it's a nullable string so we're expressing our tent right we're telling",
    "start": "1135980",
    "end": "1142399"
  },
  {
    "text": "we're giving some hints that we are explicitly stating that the middle name",
    "start": "1142399",
    "end": "1147409"
  },
  {
    "text": "can be null and should be treated as such you know considering flow analysis",
    "start": "1147409",
    "end": "1153610"
  },
  {
    "text": "so we have this personal name and we're saying okay this is not what we're",
    "start": "1153610",
    "end": "1158630"
  },
  {
    "text": "looking for so we'll use var instead so that that concern goes away but now we have middle name here and it says we",
    "start": "1158630",
    "end": "1165620"
  },
  {
    "text": "have a possible dereference of a null reference right because we don't we",
    "start": "1165620",
    "end": "1170809"
  },
  {
    "text": "don't know for sure if that's not or not so what what can we do well let's just",
    "start": "1170809",
    "end": "1177919"
  },
  {
    "text": "use the Elvis operator and then Cole asked over to zero and now we've written",
    "start": "1177919",
    "end": "1183950"
  },
  {
    "text": "code defensively right so the the main advantage here is that we're taking",
    "start": "1183950",
    "end": "1190519"
  },
  {
    "text": "something that's you know a class in this case a person class with the",
    "start": "1190519",
    "end": "1196399"
  },
  {
    "text": "variance of a middle name and we're explicitly stating that it can be null and as such we should treat it that way",
    "start": "1196399",
    "end": "1203360"
  },
  {
    "text": "so wherever it's being used the compiler can queue on that and say ah-ha",
    "start": "1203360",
    "end": "1209090"
  },
  {
    "text": "here's some suggestions right it's not perfect and it's going to be very earth-shattering I was reading a blog",
    "start": "1209090",
    "end": "1216230"
  },
  {
    "text": "post by John ski where he talks about how this if you start turning this on and all your solutions for example if",
    "start": "1216230",
    "end": "1223309"
  },
  {
    "text": "you start moving over to c-sharp bait it's going to potentially have the same effect or wow factor as async/await",
    "start": "1223309",
    "end": "1230299"
  },
  {
    "text": "did right it's gonna be massive it's going to up heave the massive and it's",
    "start": "1230299",
    "end": "1236029"
  },
  {
    "text": "gonna be something that shouldn't be taken lightly but the goal is to help developers write more defensive code and",
    "start": "1236029",
    "end": "1242529"
  },
  {
    "text": "hopefully end up in a state where we're not having the frustration of null reference exceptions cool",
    "start": "1242529",
    "end": "1251440"
  },
  {
    "text": "all right so let's talk about pattern matching there's a question you can do",
    "start": "1257580",
    "end": "1274720"
  },
  {
    "text": "the same thing with I mean so string is a special case but yeah we would come to",
    "start": "1274720",
    "end": "1280240"
  },
  {
    "text": "me afterwards and we'll talk more about that all right so we're going to talk about pattern matching and some of the",
    "start": "1280240",
    "end": "1287350"
  },
  {
    "text": "enhancements with pattern matching specifically so we have a public a new",
    "start": "1287350",
    "end": "1293860"
  },
  {
    "text": "rainbow and we're defining red orange yellow green blue indigo and violet as",
    "start": "1293860",
    "end": "1299140"
  },
  {
    "text": "we'd expect from an enum we have an RGB",
    "start": "1299140",
    "end": "1304360"
  },
  {
    "text": "color class that holds a byte for the red green and blue values so we're gonna",
    "start": "1304360",
    "end": "1311020"
  },
  {
    "text": "look at switch expressions so imagine that we want to have a way to convert",
    "start": "1311020",
    "end": "1316770"
  },
  {
    "text": "the rainbow into the corresponding RGB color so we have a switch on that you",
    "start": "1316770",
    "end": "1325540"
  },
  {
    "text": "know definite type right the Union value and we will return the RGB color",
    "start": "1325540",
    "end": "1331350"
  },
  {
    "text": "instance right that's that's how we do it today so with switch expressions one",
    "start": "1331350",
    "end": "1338770"
  },
  {
    "text": "of the things that we can do is now we can let's say metaphorically speaking we're gonna taste the rainbow things are",
    "start": "1338770",
    "end": "1343960"
  },
  {
    "text": "going to get better right so we have that same rainbow color and we can express this as notice how the syntax",
    "start": "1343960",
    "end": "1351130"
  },
  {
    "text": "has changed so rather than saying switch open and close prints on that type we're",
    "start": "1351130",
    "end": "1356170"
  },
  {
    "text": "saying here's the type now we're going to switch on it and our case labels are",
    "start": "1356170",
    "end": "1361450"
  },
  {
    "text": "a lot more terse so rather than saying case and having you know our colons we",
    "start": "1361450",
    "end": "1367540"
  },
  {
    "text": "simply have the value right so rainbow red is expressed as the new RGB color",
    "start": "1367540",
    "end": "1375000"
  },
  {
    "text": "right so it ends up being a lot more terse less less verbose right more",
    "start": "1375000",
    "end": "1382510"
  },
  {
    "text": "expressive I think it's a lot less boilerplate it's easier to read in my",
    "start": "1382510",
    "end": "1387670"
  },
  {
    "text": "opinion and then we've introduced the notion of which are special so this is basically",
    "start": "1387670",
    "end": "1394700"
  },
  {
    "text": "the the fall through of no no case was matched so we're going to throw an",
    "start": "1394700",
    "end": "1400280"
  },
  {
    "text": "exception so now we have an address class and we have some various",
    "start": "1400280",
    "end": "1405440"
  },
  {
    "text": "properties right we've gots the address line one in line to a city estate postal",
    "start": "1405440",
    "end": "1411050"
  },
  {
    "text": "code the country and region so I wanted to show you now property patterns and",
    "start": "1411050",
    "end": "1417460"
  },
  {
    "text": "what's really amazing about property patterns so imagine that we want to",
    "start": "1417460",
    "end": "1424960"
  },
  {
    "text": "compute sales tax based on an address so we have a sales price we're going to",
    "start": "1425050",
    "end": "1431060"
  },
  {
    "text": "express that also right so we can walk up to the location and say switch on it",
    "start": "1431060",
    "end": "1436340"
  },
  {
    "text": "but now we can evaluate individual properties on that instance as part of",
    "start": "1436340",
    "end": "1442610"
  },
  {
    "text": "our switch expressions right so we can say location switch and then evaluate",
    "start": "1442610",
    "end": "1448490"
  },
  {
    "text": "what the state is so if the state is Washington here's the sales tax right or",
    "start": "1448490",
    "end": "1456130"
  },
  {
    "text": "if it's Wisconsin but then also the city is Milwaukee right we can treat that",
    "start": "1456130",
    "end": "1462350"
  },
  {
    "text": "differently and this is where specificity comes in right same as all the case labels that we've ever written",
    "start": "1462350",
    "end": "1468200"
  },
  {
    "text": "in switch statements before right the order matters so if we're in Minnesota we're just gonna say it's too much and",
    "start": "1468200",
    "end": "1474920"
  },
  {
    "text": "if we fall through we don't have anything right pretty cool let's talk",
    "start": "1474920",
    "end": "1482330"
  },
  {
    "text": "about tuple patterns now to pool patterns are just another way to express our switch statements here with pattern",
    "start": "1482330",
    "end": "1489500"
  },
  {
    "text": "matching so we have a simple game of rock-paper-scissors and the first and",
    "start": "1489500",
    "end": "1495020"
  },
  {
    "text": "second argument are either a rock or paper right Rock Paper Scissors on any",
    "start": "1495020",
    "end": "1501440"
  },
  {
    "text": "of those options so we can switch and say on this tuple itself right",
    "start": "1501440",
    "end": "1506720"
  },
  {
    "text": "evaluating this tuple what are the various case labels that we would define",
    "start": "1506720",
    "end": "1512780"
  },
  {
    "text": "for them and those are expressed as such right and we can just say that we're going to return a string so we'll switch",
    "start": "1512780",
    "end": "1519140"
  },
  {
    "text": "on that tuple and if the first ones rock rock obviously covers paper",
    "start": "1519140",
    "end": "1525080"
  },
  {
    "text": "right so we can say rock covers paper paper went or is covered by paper rock",
    "start": "1525080",
    "end": "1531169"
  },
  {
    "text": "versus scissors paper vs. rock so on you get the idea right and if we end up down",
    "start": "1531169",
    "end": "1536600"
  },
  {
    "text": "here we can just say tie if there ever the same so let's talk about a little",
    "start": "1536600",
    "end": "1547309"
  },
  {
    "text": "bit more in depth here so we have a shape and our shape defines a height and",
    "start": "1547309",
    "end": "1554419"
  },
  {
    "text": "a length as any good shape should it's got the constructor right so we've got",
    "start": "1554419",
    "end": "1560480"
  },
  {
    "text": "our height and length and then we have some subclasses we've got a circle that defines a radius and the diameter and",
    "start": "1560480",
    "end": "1567649"
  },
  {
    "text": "the circumference and then we have a rectangle that says it's a square if the",
    "start": "1567649",
    "end": "1575210"
  },
  {
    "text": "height and width are equivalent right so otherwise it's still just rectangle with its height and length so",
    "start": "1575210",
    "end": "1581929"
  },
  {
    "text": "we can pattern match on objects also this was pre C sharp eight specifically",
    "start": "1581929",
    "end": "1589190"
  },
  {
    "text": "but still really cool to talk about how we can use it in this context with switch expressions so we can walk up to",
    "start": "1589190",
    "end": "1595220"
  },
  {
    "text": "a shape and get the various details from it so we'll say shape switch and if it",
    "start": "1595220",
    "end": "1604159"
  },
  {
    "text": "is the type circle we have it inside that expression right we have it as C so",
    "start": "1604159",
    "end": "1613039"
  },
  {
    "text": "in the scope of this case lay the case labels like you know expression C is",
    "start": "1613039",
    "end": "1618980"
  },
  {
    "text": "available it's not only available but it's of type circle so it has everything",
    "start": "1618980",
    "end": "1623989"
  },
  {
    "text": "hanging off of it that we'd expect which is super cool we could say rectangle s",
    "start": "1623989",
    "end": "1629779"
  },
  {
    "text": "when s is a square right so we're saying more explicitly that yeah it's a",
    "start": "1629779",
    "end": "1635629"
  },
  {
    "text": "rectangle but it's also a square so in this instance we have a square we know for sure that those height and length",
    "start": "1635629",
    "end": "1642649"
  },
  {
    "text": "are going to be equivalent in this expression otherwise we can fall through to a rectangle otherwise we can just say",
    "start": "1642649",
    "end": "1649549"
  },
  {
    "text": "discard it's an unknown shape and just throw our hands up and walk away from it right",
    "start": "1649549",
    "end": "1656130"
  },
  {
    "text": "so this was part of the initial slide deck rice showed this point class so",
    "start": "1656130",
    "end": "1663030"
  },
  {
    "text": "let's kind of skip past that but I just want you to remember that we do have a",
    "start": "1663030",
    "end": "1668160"
  },
  {
    "text": "point class right it's got x and y on it and we can deconstruct it but then we also define another email for quadrant",
    "start": "1668160",
    "end": "1676919"
  },
  {
    "text": "right so we have unknown we've got origin quadrant 1 you know 2 3",
    "start": "1676919",
    "end": "1682740"
  },
  {
    "text": "4 right so just imagine that or you're on a border so we have positional patterns as well so we can say you know",
    "start": "1682740",
    "end": "1692370"
  },
  {
    "text": "take a point and say from that point we can plot out a quadrant so we can say",
    "start": "1692370",
    "end": "1699539"
  },
  {
    "text": "Point switch and since we're able to deconstruct this point into a tuple",
    "start": "1699539",
    "end": "1706500"
  },
  {
    "text": "literal we can have those as case labels right so let me say that again since we",
    "start": "1706500",
    "end": "1713460"
  },
  {
    "text": "have a point instance and that point object defines a deconstruct method that",
    "start": "1713460",
    "end": "1721049"
  },
  {
    "text": "outs both the x and y we can express that point as a tuple literal so we have",
    "start": "1721049",
    "end": "1727530"
  },
  {
    "text": "a tuple literal and those can serve as our case labels right so our case labels",
    "start": "1727530",
    "end": "1732960"
  },
  {
    "text": "are 0 and 0 and that's expressed as quadrant dot origin right smack dab in",
    "start": "1732960",
    "end": "1739799"
  },
  {
    "text": "the middle or we can say var X Y when X is greater than 0 and Y is greater than",
    "start": "1739799",
    "end": "1747659"
  },
  {
    "text": "0 then we're obviously up in Quadrant 1 right and so on and so forth and we can just plot that out we can discard here",
    "start": "1747659",
    "end": "1755010"
  },
  {
    "text": "at the very bottom and say where unknown",
    "start": "1755010",
    "end": "1758179"
  },
  {
    "text": "there's a question so yeah the question was what's the difference between 255 and 256 discarding here is so this so",
    "start": "1762960",
    "end": "1774390"
  },
  {
    "text": "the difference is that with the statements above they are more explicit and if we fall through to a situation",
    "start": "1774390",
    "end": "1781770"
  },
  {
    "text": "where they're the same but don't meet these conditions it would be on a border so imagine a situation where it's 1 and",
    "start": "1781770",
    "end": "1788550"
  },
  {
    "text": "1 so it would fall to on or sorry 1 & 0",
    "start": "1788550",
    "end": "1795660"
  },
  {
    "text": "it right had fall on a border otherwise it falls to unknown cool",
    "start": "1795660",
    "end": "1805010"
  },
  {
    "text": "there was another question about exhaustive checking I'm honestly I don't know offhand I'd have to look into that",
    "start": "1808559",
    "end": "1814049"
  },
  {
    "text": "more",
    "start": "1814049",
    "end": "1816260"
  },
  {
    "text": "does not complain",
    "start": "1829920",
    "end": "1832760"
  },
  {
    "text": "right I'm not sure so let's catch up with me afterwards and we'll dig into more things cool so let's look at ranges",
    "start": "1839210",
    "end": "1851730"
  },
  {
    "text": "and indices so this is one of the things that while I was super excited about all",
    "start": "1851730",
    "end": "1857790"
  },
  {
    "text": "the things that were offered up with pattern matching because I enjoyed when they added pattern matching to c-sharp",
    "start": "1857790",
    "end": "1863460"
  },
  {
    "text": "seven and and furthermore with the point releases there was a bit of I guess",
    "start": "1863460",
    "end": "1870059"
  },
  {
    "text": "confusion around ranges specifically and there's some niceties to them but it's",
    "start": "1870059",
    "end": "1876929"
  },
  {
    "text": "going to take a bit of time for people to start writing ranges I think you know",
    "start": "1876929",
    "end": "1882570"
  },
  {
    "text": "right off the bat I know that I still look at them and I get confused so there's some advantages to it but they",
    "start": "1882570",
    "end": "1888900"
  },
  {
    "text": "they introduced the concept of a hat operators so we have hats so if we have",
    "start": "1888900",
    "end": "1895350"
  },
  {
    "text": "a whole bunch of words right the the quick brown fox jumped over the lazy dog",
    "start": "1895350",
    "end": "1900470"
  },
  {
    "text": "obviously in any programming language today we have the notion of arrays so we",
    "start": "1900470",
    "end": "1907410"
  },
  {
    "text": "have a string array here and at index 0 we have the and index 1 we have quick",
    "start": "1907410",
    "end": "1913800"
  },
  {
    "text": "and so on and so forth you get the point but with the hat operator we could say hat 9 right that is also equivalent to",
    "start": "1913800",
    "end": "1922290"
  },
  {
    "text": "the in this case because we're starting at the end of the array and working",
    "start": "1922290",
    "end": "1927900"
  },
  {
    "text": "backwards so oh look the ID has suggestions",
    "start": "1927900",
    "end": "1933540"
  },
  {
    "text": "so let's who's written code like this before where you try to get like the",
    "start": "1933540",
    "end": "1939240"
  },
  {
    "text": "last element in an array right so you'll say words you know brackets words that",
    "start": "1939240",
    "end": "1946350"
  },
  {
    "text": "length minus 1 so now what the IDE is suggesting is using indexing can be",
    "start": "1946350",
    "end": "1953070"
  },
  {
    "text": "simplified right so it's gonna say instead write it this way where we have",
    "start": "1953070",
    "end": "1958890"
  },
  {
    "text": "words at 1 which i think is a lot more expressive and as long as you start",
    "start": "1958890",
    "end": "1964470"
  },
  {
    "text": "wrapping your head around the concept of the hat operator of me you know indicating from the end it's really it's",
    "start": "1964470",
    "end": "1970860"
  },
  {
    "text": "a nice with you right so then we can walk up to words and we",
    "start": "1970860",
    "end": "1977220"
  },
  {
    "text": "can say dot or sorry one dot dot four and this is a range so we're saying in",
    "start": "1977220",
    "end": "1985020"
  },
  {
    "text": "this array pick out a range of values",
    "start": "1985020",
    "end": "1990140"
  },
  {
    "text": "one through four and so we'll end up with that's exclusively so we'll end up",
    "start": "1990140",
    "end": "1996240"
  },
  {
    "text": "with the quick brown fox right here we have what's known as range phrases an",
    "start": "1996240",
    "end": "2003970"
  },
  {
    "text": "arrange phrase is essentially a literal so we say hat to dot dot and this is the",
    "start": "2003970",
    "end": "2012230"
  },
  {
    "text": "last two of something right so this is how we declare that type and it's an",
    "start": "2012230",
    "end": "2017570"
  },
  {
    "text": "assignment you'll notice that these are actually read only structs so I explicitly typed it here and said range",
    "start": "2017570",
    "end": "2023809"
  },
  {
    "text": "last two so I could show you how they kind of broken apart the concept of",
    "start": "2023809",
    "end": "2029780"
  },
  {
    "text": "ranges and indexes so that range phrase is equivalent to an instance of a range",
    "start": "2029780",
    "end": "2035960"
  },
  {
    "text": "which is a read-only struct and the range type itself has a start and end",
    "start": "2035960",
    "end": "2041750"
  },
  {
    "text": "index object and that njet index object is also a read-only struct so we have",
    "start": "2041750",
    "end": "2049429"
  },
  {
    "text": "the start in the end and those indexes have is from end bit right a bool that",
    "start": "2049429",
    "end": "2059300"
  },
  {
    "text": "says whether or not it's from the end and the corresponding value so that's",
    "start": "2059300",
    "end": "2064460"
  },
  {
    "text": "how they kind of modeled ranges and indexes so again we have range phrases",
    "start": "2064460",
    "end": "2069560"
  },
  {
    "text": "and we can use those we can use those as literals within again the context of an",
    "start": "2069560",
    "end": "2075080"
  },
  {
    "text": "array trying to cherry-pick things out of that as we want we can declare and assign them as such here and then use",
    "start": "2075080",
    "end": "2082368"
  },
  {
    "text": "those instances into an index here so we can say words the last two so then we",
    "start": "2082369",
    "end": "2089000"
  },
  {
    "text": "Council dot write line string dot join with an empty space we're just going to",
    "start": "2089000",
    "end": "2094460"
  },
  {
    "text": "pick out the last two so of the words up here we have lazy dog all right so we'll get lazy dog and we'll most plot those",
    "start": "2094460",
    "end": "2101510"
  },
  {
    "text": "on the screen so if we wanted everything we can just say dot dot which I don't know why you",
    "start": "2101510",
    "end": "2107830"
  },
  {
    "text": "would want to do that you can say dot dot for right so we can get thee through",
    "start": "2107830",
    "end": "2114240"
  },
  {
    "text": "fox you can get the last phrase writes the last phrases six dot dots and get",
    "start": "2114240",
    "end": "2121630"
  },
  {
    "text": "lazy dog and let's just plot those on the screen real quick for you to see",
    "start": "2121630",
    "end": "2127740"
  },
  {
    "text": "so yeah the last word is dog and we cherry picked out quick brown fox",
    "start": "2133350",
    "end": "2140200"
  },
  {
    "text": "we had lazy dog right so you kind of get the point how you can interact with ranges and indexes and cherry-pick",
    "start": "2140200",
    "end": "2147100"
  },
  {
    "text": "things out of arrays so I'm curious just yes or no question do you think that's",
    "start": "2147100",
    "end": "2153370"
  },
  {
    "text": "useful yeah show of hands do you think it's",
    "start": "2153370",
    "end": "2158800"
  },
  {
    "text": "confusing do you think if you had some really elaborate range phrases that your",
    "start": "2158800",
    "end": "2166450"
  },
  {
    "text": "friends you know your developer peers who are doing code reviews would appreciate that no oh there was a",
    "start": "2166450",
    "end": "2179860"
  },
  {
    "text": "question in the back here the question was indexes are zero base and ranges are one base is that what you said",
    "start": "2179860",
    "end": "2188250"
  },
  {
    "text": "yeah so there yeah there's there's been confusion and discussion on Twitter and on internal emails and stuff like that",
    "start": "2195599",
    "end": "2202839"
  },
  {
    "text": "uh yes there there's still yeah so from the end it's it's one based yep",
    "start": "2202839",
    "end": "2208920"
  },
  {
    "text": "if you yeah if you did it hat zero I know I don't know if that's valid yeah come up to me afterwards and we'll play",
    "start": "2223810",
    "end": "2230590"
  },
  {
    "text": "we'll play around all right so local functions let's jump into that",
    "start": "2230590",
    "end": "2237730"
  },
  {
    "text": "real quick so who's used local functions before who's nested a bunch of local",
    "start": "2237730",
    "end": "2245710"
  },
  {
    "text": "functions and lost friends don't do that",
    "start": "2245710",
    "end": "2251170"
  },
  {
    "text": "all right so local functions are pretty cool when I first saw them I was very",
    "start": "2251170",
    "end": "2256450"
  },
  {
    "text": "hesitant the idea of having local functions expressed within a method body",
    "start": "2256450",
    "end": "2262420"
  },
  {
    "text": "that were defined after a return statement was concerning to me it looked",
    "start": "2262420",
    "end": "2267910"
  },
  {
    "text": "weird it didn't feel natural I felt like this is unreachable code right it's not going to compile that's local functions",
    "start": "2267910",
    "end": "2274320"
  },
  {
    "text": "local functions are pretty powerful they do some pretty amazing things and they",
    "start": "2274320",
    "end": "2279640"
  },
  {
    "text": "were introduced with c-sharp 7 but now that we're in c-sharp 8 they're adding a new concept to them and that's static",
    "start": "2279640",
    "end": "2287050"
  },
  {
    "text": "locals and it helps with a specific problem so who's heard of the concept of",
    "start": "2287050",
    "end": "2295780"
  },
  {
    "text": "implicitly captured variables right beyond you know enclosure right so in",
    "start": "2295780",
    "end": "2301600"
  },
  {
    "text": "this scenario we have a classic capture example where we have a local function right so we have int I we have a local",
    "start": "2301600",
    "end": "2309520"
  },
  {
    "text": "function again defined in this case beneath our return statement so we're gonna say return Y and our local",
    "start": "2309520",
    "end": "2318520"
  },
  {
    "text": "function is basically the expression of y equals 19 because let's keep it very",
    "start": "2318520",
    "end": "2324970"
  },
  {
    "text": "very simple so when we invoke this we'd expect it to be Y would be 19 right but",
    "start": "2324970",
    "end": "2332650"
  },
  {
    "text": "it's doing something very interesting because the local function is actually capturing Y kind of beyond the scope",
    "start": "2332650",
    "end": "2340990"
  },
  {
    "text": "it's inside its own local methods scope or local function scope and this could",
    "start": "2340990",
    "end": "2346510"
  },
  {
    "text": "be problematic for reasons so now what they've introduced is the concept of",
    "start": "2346510",
    "end": "2352210"
  },
  {
    "text": "static locals so imagine something very similar where we have an int",
    "start": "2352210",
    "end": "2357700"
  },
  {
    "text": "y and X you know five and seven and we want to add those right so return add",
    "start": "2357700",
    "end": "2364740"
  },
  {
    "text": "X&Y and that's defined statically as int",
    "start": "2364740",
    "end": "2370000"
  },
  {
    "text": "add left and right and it's simply that expression left + right but if I was to",
    "start": "2370000",
    "end": "2376869"
  },
  {
    "text": "come down here and say Y for example this will actually not compile it's",
    "start": "2376869",
    "end": "2382330"
  },
  {
    "text": "gonna say the static local function cannot contain a reference to Y right and that's a good thing that's a good",
    "start": "2382330",
    "end": "2389080"
  },
  {
    "text": "developer saying I explicitly do not want others to come in here and potentially capture those variables on",
    "start": "2389080",
    "end": "2395800"
  },
  {
    "text": "intent you know and and mess up the world basically so that's that static",
    "start": "2395800",
    "end": "2402849"
  },
  {
    "text": "locals and I think it's a good in advancement but again going back to the",
    "start": "2402849",
    "end": "2408730"
  },
  {
    "text": "chip on my shoulder with some of the features local functions have been one of those kind of pain points where I've",
    "start": "2408730",
    "end": "2415090"
  },
  {
    "text": "I've debated whether or not they're good and they're useful and part of me likes",
    "start": "2415090",
    "end": "2421119"
  },
  {
    "text": "them part of me is still not a fan of them I like how they're not nearly as",
    "start": "2421119",
    "end": "2426160"
  },
  {
    "text": "ugly right so we could write this same type of function down here as an actual function and how much uglier would this",
    "start": "2426160",
    "end": "2433720"
  },
  {
    "text": "be if we said func whoops not that func give me that yes and give",
    "start": "2433720",
    "end": "2443380"
  },
  {
    "text": "an int give an int right call it plus",
    "start": "2443380",
    "end": "2449580"
  },
  {
    "text": "and that equals and a and be expressed",
    "start": "2449580",
    "end": "2458200"
  },
  {
    "text": "as a yeah we don't need those right so",
    "start": "2458200",
    "end": "2464320"
  },
  {
    "text": "you get the point who likes writing stuff like this is this is this better for anyone who likes being you know",
    "start": "2464320",
    "end": "2473500"
  },
  {
    "text": "typing out func another pop quiz is off you know funk of TTT where those are all ends which",
    "start": "2473500",
    "end": "2480849"
  },
  {
    "text": "actually is the one that's the return right versus which are the two parameters n so I think there's you know",
    "start": "2480849",
    "end": "2489099"
  },
  {
    "text": "there's some give and take and I tend to like local functions for",
    "start": "2489099",
    "end": "2496309"
  },
  {
    "text": "that reason right because they're not as ugly and it's still it looks very much",
    "start": "2496309",
    "end": "2502400"
  },
  {
    "text": "like c-sharp without some of the you know ugliness of funks and actions and stuff like that alright so we're gonna",
    "start": "2502400",
    "end": "2511309"
  },
  {
    "text": "talk about using declarations using declarations or a very interesting one",
    "start": "2511309",
    "end": "2518049"
  },
  {
    "text": "as a.net developer you're most likely",
    "start": "2518049",
    "end": "2523670"
  },
  {
    "text": "familiar with AI disposable and the concept of using statements rights and",
    "start": "2523670",
    "end": "2530240"
  },
  {
    "text": "how you would have that convenience functionality within the syntax to say we're going to use an instance of this",
    "start": "2530240",
    "end": "2537049"
  },
  {
    "text": "new disposable implementation and outside of the method you know that that",
    "start": "2537049",
    "end": "2542690"
  },
  {
    "text": "scope of the execution it'll be disposed right so under the covers there's a try finally that's calling dispose on that",
    "start": "2542690",
    "end": "2549890"
  },
  {
    "text": "instance for you and that's nice but what we have you know discovered as as",
    "start": "2549890",
    "end": "2557720"
  },
  {
    "text": "not net developers right it's very simple to write that and we're used to it or accustomed to it with c-sharp 8",
    "start": "2557720",
    "end": "2565069"
  },
  {
    "text": "though they have this notion of implicitly disposing of things when they're out of scope so this is how",
    "start": "2565069",
    "end": "2570859"
  },
  {
    "text": "you'd write it today but with c-sharp 8 imagine writing it like this using var",
    "start": "2570859",
    "end": "2577690"
  },
  {
    "text": "file equals new stream writer blah blah blah blah blah and then right you don't",
    "start": "2577690",
    "end": "2583250"
  },
  {
    "text": "have the brackets and for me I have like this innate fear where I think to myself",
    "start": "2583250",
    "end": "2590089"
  },
  {
    "text": "how do I know that this is actually gonna dispose and it kind of feels icky right it almost feels like I like I like",
    "start": "2590089",
    "end": "2598700"
  },
  {
    "text": "being explicit I like saying you know here's here's my angle brackets my curly",
    "start": "2598700",
    "end": "2604039"
  },
  {
    "text": "braces and I know that that's going to work so I'm very torn with this I think",
    "start": "2604039",
    "end": "2611089"
  },
  {
    "text": "personally with the code that I'll be reviewing and writing I will not be using this feature but that's just me",
    "start": "2611089",
    "end": "2617720"
  },
  {
    "text": "that's my opinion I know that under the covers it's going to work it's gonna work the exact same way",
    "start": "2617720",
    "end": "2622910"
  },
  {
    "text": "I don't know how others feel about it though is there is there fear do you would you be fearful of this",
    "start": "2622910",
    "end": "2629119"
  },
  {
    "text": "does it look like it might open the door to potential mistakes short hands okay",
    "start": "2629119",
    "end": "2635510"
  },
  {
    "text": "yeah cool I'm not alone then that's good to know",
    "start": "2635510",
    "end": "2641470"
  },
  {
    "text": "awesome so that's yeah that's basically a walk through most of those let me jump",
    "start": "2641470",
    "end": "2648590"
  },
  {
    "text": "back in here so we're gonna recap so",
    "start": "2648590",
    "end": "2657500"
  },
  {
    "text": "just a summary high-level right we saw the improvements with pattern matching",
    "start": "2657500",
    "end": "2663290"
  },
  {
    "text": "where we looked at the various new advancements in how we can express you",
    "start": "2663290",
    "end": "2670670"
  },
  {
    "text": "know with switch expressions on individual properties with positional with tuple literals we can get very very",
    "start": "2670670",
    "end": "2677960"
  },
  {
    "text": "expressive and I think that's a huge win I for one love the improvements to",
    "start": "2677960",
    "end": "2683119"
  },
  {
    "text": "pattern matching I think it's gonna go a long way it's going to really bolster the language I'm a big fan of async",
    "start": "2683119",
    "end": "2689720"
  },
  {
    "text": "streams I think there's definitely use cases for that if you've been following along with net core and signal are I've",
    "start": "2689720",
    "end": "2696140"
  },
  {
    "text": "got a talk tomorrow on signal are so come check that out but some of the new primitives that the team's been coming",
    "start": "2696140",
    "end": "2702650"
  },
  {
    "text": "up with you know channel readers and writers some of the they're gonna be able to",
    "start": "2702650",
    "end": "2707810"
  },
  {
    "text": "start leveraging some of the async stream methodology which is gonna be super impactful nullable reference types",
    "start": "2707810",
    "end": "2715630"
  },
  {
    "text": "another interesting one again I think the premise behind it is pretty solid it's gonna start helping developers but",
    "start": "2715630",
    "end": "2721280"
  },
  {
    "text": "it's going to be a big change so I think with that feature in particular you can",
    "start": "2721280",
    "end": "2727010"
  },
  {
    "text": "start doing it in bite-sized chunks if it's Greenfield obviously start out of the gate with trying to to incorporate",
    "start": "2727010",
    "end": "2734420"
  },
  {
    "text": "that right away we looked at the new range and index types and how those can",
    "start": "2734420",
    "end": "2740119"
  },
  {
    "text": "be applied and potentially some of the initial complexity around how you'll express those and there's already been",
    "start": "2740119",
    "end": "2746810"
  },
  {
    "text": "debate and chatter in the audience here as we've talked about that we looked at the advancements with static local",
    "start": "2746810",
    "end": "2753260"
  },
  {
    "text": "methods and how we can prevent potential concerns with consumers",
    "start": "2753260",
    "end": "2758870"
  },
  {
    "text": "that might fall into the trap of capturing something implicitly capturing",
    "start": "2758870",
    "end": "2764330"
  },
  {
    "text": "something they shouldn't we discussed the implicit dispose and using declarations right and some of my fears",
    "start": "2764330",
    "end": "2770810"
  },
  {
    "text": "were expressed very obviously with that we looked at default interface methods",
    "start": "2770810",
    "end": "2776120"
  },
  {
    "text": "one thing to note about that specifically is that this concept of default interface methods was borrowed",
    "start": "2776120",
    "end": "2781700"
  },
  {
    "text": "from Java they've been doing it for a long time and this is probably the only time I'll mention it during a c-sharp",
    "start": "2781700",
    "end": "2788330"
  },
  {
    "text": "talk right you don't really usually talk about Java and then we looked at target",
    "start": "2788330",
    "end": "2793430"
  },
  {
    "text": "type new expressions which are pretty cool but also you can kind of do things",
    "start": "2793430",
    "end": "2798950"
  },
  {
    "text": "potentially even better with some of the older technologies of c-sharp right with implicit operators and with that these",
    "start": "2798950",
    "end": "2808970"
  },
  {
    "text": "are the resources some of the things I looked at to help build out some of the demonstration code here there articles",
    "start": "2808970",
    "end": "2816680"
  },
  {
    "text": "at the top here the first ones what's new in c-sharp Eights this is a bitly link for the microsoft",
    "start": "2816680",
    "end": "2822320"
  },
  {
    "text": "official documentation and then building c-sharp 8 is kind of more of an insider view this is a blog from MADD store",
    "start": "2822320",
    "end": "2829430"
  },
  {
    "text": "Genson who is the lead see sharp designer out Microsoft and with that",
    "start": "2829430",
    "end": "2837940"
  },
  {
    "text": "thank you so much for having me it's my first NDC talk super excited to be here thank you so much for listening",
    "start": "2837940",
    "end": "2845040"
  },
  {
    "text": "[Applause]",
    "start": "2845040",
    "end": "2850020"
  }
]