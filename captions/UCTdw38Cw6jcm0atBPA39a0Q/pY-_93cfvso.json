[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "ah versus good morning gentlemen I hope",
    "start": "7300",
    "end": "15639"
  },
  {
    "text": "that we'll be joined by few more I thought there might be little there quieter this morning so welcome to NEC",
    "start": "15639",
    "end": "23109"
  },
  {
    "text": "London day two and they talk on Super Plus on the type system so why why this",
    "start": "23109",
    "end": "32619"
  },
  {
    "start": "30000",
    "end": "63000"
  },
  {
    "text": "talk I usually like to start by thinking well why would I talk about this subject",
    "start": "32619",
    "end": "37660"
  },
  {
    "text": "why would anybody listen to this why did I come up with this one well I've seen a lot of people using C++ and some C for",
    "start": "37660",
    "end": "46210"
  },
  {
    "text": "some time and they use primitive types or a lot of things there is a lot of help in the language that you can use",
    "start": "46210",
    "end": "54239"
  },
  {
    "text": "and you can write essentially your own language inside C++ rather than using",
    "start": "54239",
    "end": "61780"
  },
  {
    "text": "what you're given so here are three things that I think are important and I",
    "start": "61780",
    "end": "68680"
  },
  {
    "start": "63000",
    "end": "170000"
  },
  {
    "text": "would like them in this order I want our code to help me to avoid avoidable",
    "start": "68680",
    "end": "77770"
  },
  {
    "text": "mistakes stopped me doing things that I don't want to do things that I shouldn't do and I want that at compile time if I",
    "start": "77770",
    "end": "85479"
  },
  {
    "text": "can get it I don't want to have runtime crashes I want to get the compiler to",
    "start": "85479",
    "end": "91569"
  },
  {
    "text": "say no you can't do that so how do we do that one that's one of the things we're going to look at the",
    "start": "91569",
    "end": "98740"
  },
  {
    "text": "other important thing or amongst the important things is runtime cost okay so",
    "start": "98740",
    "end": "104859"
  },
  {
    "text": "if I have this and I use lots and lots of features in language to help me build up my stuff to prevent this I don't want",
    "start": "104859",
    "end": "112929"
  },
  {
    "text": "to do this basically at zero cost because if I do this an extra cost oh",
    "start": "112929",
    "end": "118929"
  },
  {
    "text": "you can do this in the safety stuff but it's slower or bigger or generally gets",
    "start": "118929",
    "end": "125200"
  },
  {
    "text": "in the way then people are not gonna do it they're going to go back to the old way the garbs can use an int here or",
    "start": "125200",
    "end": "131170"
  },
  {
    "text": "whatever so people go back to unsafe coding styles because it's slower so I",
    "start": "131170",
    "end": "138220"
  },
  {
    "text": "want to show that actually we can have our cake and eat it here so we can say",
    "start": "138220",
    "end": "143670"
  },
  {
    "text": "we can have our safety and it has zero cost at runtime in terms of memory and",
    "start": "143670",
    "end": "150510"
  },
  {
    "text": "speed it would also be nice if I could put this into a library and say ah let's",
    "start": "150510",
    "end": "156540"
  },
  {
    "text": "reuse this so I don't have to do this again and again how do I make it reusable generic no flexible those two",
    "start": "156540",
    "end": "163140"
  },
  {
    "text": "those words that developers love so we don't have to re-implement every time so that's basically what we're going to",
    "start": "163140",
    "end": "168239"
  },
  {
    "text": "look at today so a little bit of history about programming and types when",
    "start": "168239",
    "end": "177450"
  },
  {
    "start": "170000",
    "end": "317000"
  },
  {
    "text": "machines first came out you program the machine code or assembler and it's",
    "start": "177450",
    "end": "183150"
  },
  {
    "text": "essentially its typeless there really isn't much in the way of types going on in there you have some basic kind of",
    "start": "183150",
    "end": "190370"
  },
  {
    "text": "things inside the machine if you're lucky integer and machine word is the",
    "start": "190370",
    "end": "196230"
  },
  {
    "text": "basic thing of this one and you can use it as some dress so you can take an integer turn into a pointer a pointer to",
    "start": "196230",
    "end": "202200"
  },
  {
    "text": "an integer assembler just says yeah it's a register I don't care you may have",
    "start": "202200",
    "end": "207750"
  },
  {
    "text": "some things there were the slight differences you may have some double of some floating-point things or more",
    "start": "207750",
    "end": "214910"
  },
  {
    "text": "recent machines in hardware than in old stuff you get machine efficiency that's",
    "start": "214910",
    "end": "221250"
  },
  {
    "text": "great but it's at the cost of programmer effort you've got to do lot of work to do this one you basically have to go",
    "start": "221250",
    "end": "227160"
  },
  {
    "text": "okay here's what I want to do and then you have to translate this into the world of assembler and pointers and",
    "start": "227160",
    "end": "234930"
  },
  {
    "text": "addresses and you make sure you get right there is domain knowledge in there somehow but and it's it's but it's",
    "start": "234930",
    "end": "241590"
  },
  {
    "text": "inside the program you can't see it obviously and if you've ever done an assembly you'll see here's the assembler",
    "start": "241590",
    "end": "246810"
  },
  {
    "text": "and here is the per line comment that actually tells you what's going on it's not easiest easy to decipher or work out",
    "start": "246810",
    "end": "254790"
  },
  {
    "text": "what's going on it's easy to make mistakes as a high maintenance cost of",
    "start": "254790",
    "end": "260070"
  },
  {
    "text": "programming and assemblage is why most people don't do it these days okay so what comes after that well after that there were typeless",
    "start": "260070",
    "end": "266669"
  },
  {
    "text": "languages like be in BCPL which were a step up from assembler it did all of the",
    "start": "266669",
    "end": "273570"
  },
  {
    "text": "allocation for you registers and other bits and pieces like this but basically there was almost no type safety so an example from",
    "start": "273570",
    "end": "280420"
  },
  {
    "text": "BCPL three times brackets four plus five words give you the value twenty seven if",
    "start": "280420",
    "end": "286450"
  },
  {
    "text": "you miss out the multiplication by mistake actually what you end up calling is a function at address three with the",
    "start": "286450",
    "end": "291970"
  },
  {
    "text": "value nine this is obviously a path to madness and trying to debug this or work",
    "start": "291970",
    "end": "299500"
  },
  {
    "text": "out what's going wrong is kind of fun okay the C preprocessor for instance by the way simply like this great line from",
    "start": "299500",
    "end": "307600"
  },
  {
    "text": "Kevin Lee honey yesterday this is it's instead of strong type safety is string",
    "start": "307600",
    "end": "312670"
  },
  {
    "text": "type safety so everything is basically string string Lee typed languages so",
    "start": "312670",
    "end": "319030"
  },
  {
    "start": "317000",
    "end": "406000"
  },
  {
    "text": "that was kind of where we started and then the next thing is we started adding more types into this one this is where",
    "start": "319030",
    "end": "324310"
  },
  {
    "text": "you get C and people using C++ based around the primitive types",
    "start": "324310",
    "end": "329400"
  },
  {
    "text": "it stops you making those mistakes in terms of integers and pointers it says all you've got to do cast for that okay",
    "start": "329400",
    "end": "336310"
  },
  {
    "text": "it's fine so it stops those mistakes you get the hi machine efficiency which is where C comes from and secret for us",
    "start": "336310",
    "end": "343180"
  },
  {
    "text": "inherited that one better programmer efficiency so you have integer pointer and float point or own child pointer and",
    "start": "343180",
    "end": "350140"
  },
  {
    "text": "other things like this so you get some idea what's going on in there you",
    "start": "350140",
    "end": "355330"
  },
  {
    "text": "haven't got any extra staff you having built in the extra layers you're still using what's underneath",
    "start": "355330",
    "end": "361360"
  },
  {
    "text": "integers and floats and type pointers to this they added structures and",
    "start": "361360",
    "end": "367090"
  },
  {
    "text": "aggregates so you've got structs and arrays and other bits and pieces so this is this Maps fairly well on to your",
    "start": "367090",
    "end": "375270"
  },
  {
    "text": "assembler so you get that efficiency not much abstraction no so C gives you",
    "start": "375270",
    "end": "381220"
  },
  {
    "text": "abstraction through files you can do modules primarily but you have to translate sill there's a translation",
    "start": "381220",
    "end": "387100"
  },
  {
    "text": "there because you go well this is how I'm thinking I can't do this sort of one to one lie might do well with objects",
    "start": "387100",
    "end": "393780"
  },
  {
    "text": "and there is little opportunity for tightly compiled time checking so you might end up with all a static analysis",
    "start": "393780",
    "end": "400450"
  },
  {
    "text": "tools to try and work out what's going on particularly in safety critical things",
    "start": "400450",
    "end": "405790"
  },
  {
    "text": "you this is where I'd like us to have a look at today which is this higher level c++",
    "start": "405790",
    "end": "411960"
  },
  {
    "start": "406000",
    "end": "475000"
  },
  {
    "text": "how can we use the type system and using a lot of types to create lightweight",
    "start": "411960",
    "end": "417870"
  },
  {
    "text": "abstractions that are going to increase the amount of domain knowledge we can put into our program without sacrificing",
    "start": "417870",
    "end": "424320"
  },
  {
    "text": "that efficiency so how do we get more stuff in there but still retain the",
    "start": "424320",
    "end": "430320"
  },
  {
    "text": "machine efficiency you have from previous ones and the interesting thing about a type system is that it's a proof",
    "start": "430320",
    "end": "436620"
  },
  {
    "text": "system it says 100% you can either do this or you can't you can add these two together or you can't and it's done at",
    "start": "436620",
    "end": "443370"
  },
  {
    "text": "compile time and there's no ifs or buts about this one it's legal or it's not",
    "start": "443370",
    "end": "448789"
  },
  {
    "text": "and I'm trying to see how we can make it so we can use that to avoid problems how",
    "start": "448789",
    "end": "453930"
  },
  {
    "text": "do we use the type system to basically say you can do this you can't do that and stop problems happening at runtime",
    "start": "453930",
    "end": "460080"
  },
  {
    "text": "by turn converting into compile time errors if you do this well you get code",
    "start": "460080",
    "end": "466139"
  },
  {
    "text": "safety you get more reuse be honest true strop likes this and he's trying to",
    "start": "466139",
    "end": "471720"
  },
  {
    "text": "avoid people using primitives and interfaces okay",
    "start": "471720",
    "end": "478340"
  },
  {
    "start": "475000",
    "end": "556000"
  },
  {
    "text": "compilation is remarkable it's a wonderful thing so we have a picture on",
    "start": "478669",
    "end": "483780"
  },
  {
    "text": "the left hand side we have run time and you'll notice a run time assembler or C",
    "start": "483780",
    "end": "489930"
  },
  {
    "text": "C++ they all basically using machine types underneath it all compiles down to the same thing but you'll notice at",
    "start": "489930",
    "end": "497340"
  },
  {
    "text": "compile time in assembler we basically have nothing because once you've assembled it that's it in C you have",
    "start": "497340",
    "end": "504090"
  },
  {
    "text": "some of the language types so you basically get the intern floats and pointers etc that information is thrown",
    "start": "504090",
    "end": "511320"
  },
  {
    "text": "away so everything in the orange is just thrown away for the C++ well I'm talking",
    "start": "511320",
    "end": "516539"
  },
  {
    "text": "about we going to add our own application types so we're adding lots and lots of stuff into this type system",
    "start": "516539",
    "end": "522870"
  },
  {
    "text": "and we're then going to throw it away and at runtime we're left with exactly the same thing and so we're focusing on",
    "start": "522870",
    "end": "529740"
  },
  {
    "text": "that top right there about application types okay some little small white lies",
    "start": "529740",
    "end": "535410"
  },
  {
    "text": "here C does have things apart from the language types has some small application types",
    "start": "535410",
    "end": "541110"
  },
  {
    "text": "such as structs and secret of us has some runtime type of information which is obviously at runtime not a compile",
    "start": "541110",
    "end": "548279"
  },
  {
    "text": "time but the big picture of this one is we can use lots of types and then throw it away and we don't have this at",
    "start": "548279",
    "end": "554730"
  },
  {
    "text": "runtime okay let's have an example let's get",
    "start": "554730",
    "end": "559970"
  },
  {
    "start": "556000",
    "end": "762000"
  },
  {
    "text": "down to some code and a big picture for the moment date intake three integers",
    "start": "559970",
    "end": "566350"
  },
  {
    "text": "what are the parameters how did you know well you got to go and look at the",
    "start": "566350",
    "end": "572180"
  },
  {
    "text": "documentation or you have to go date into your date month in today and",
    "start": "572180",
    "end": "578930"
  },
  {
    "text": "there's nothing to stop you getting this wrong there's nothing to stop you putting them in the wrong order when",
    "start": "578930",
    "end": "586579"
  },
  {
    "text": "will this show up it'll show up at runtime not a compile time it will be",
    "start": "586579",
    "end": "591769"
  },
  {
    "text": "much nicer to say date take year month day and it's very clear what those parameters are which order you should",
    "start": "591769",
    "end": "598459"
  },
  {
    "text": "put them in if you try to put them in in the wrong order it won't compile if they're separate types okay we're in a",
    "start": "598459",
    "end": "604730"
  },
  {
    "text": "much better place already it's unambiguous its expressive we know what this this is about if we try to do this",
    "start": "604730",
    "end": "611779"
  },
  {
    "text": "just by having an alias or type def so I'm using the CEPA plus eleven alias",
    "start": "611779",
    "end": "616999"
  },
  {
    "text": "features here if I just said using your equals int that doesn't actually do",
    "start": "616999",
    "end": "622250"
  },
  {
    "text": "anything because it's a type alias and therefore if I said you using your",
    "start": "622250",
    "end": "627500"
  },
  {
    "text": "equals in using month equals in they are actually the same type because it doesn't introduce a new type it's just an alias so we can't use that we have",
    "start": "627500",
    "end": "635839"
  },
  {
    "text": "actually to help create our own classes like last dates last month etc and this would catch them at compile time let's",
    "start": "635839",
    "end": "646550"
  },
  {
    "text": "have a look at another example what happens if you're trying to do things with physical units so meters and",
    "start": "646550",
    "end": "654920"
  },
  {
    "text": "seconds and some measures of length and time and there's all the 7s are units to",
    "start": "654920",
    "end": "661490"
  },
  {
    "text": "deal with meters plus seconds does not make physical sense the kapala goes you",
    "start": "661490",
    "end": "668809"
  },
  {
    "text": "can do that if you want if you did them as floats you could do that if you do them as just meters and seconds I want the compiler to tell me I",
    "start": "668809",
    "end": "675470"
  },
  {
    "text": "shouldn't be adding length and time together because it just doesn't make sense",
    "start": "675470",
    "end": "680740"
  },
  {
    "text": "notice on the second part there I've got feet and meters they're both lengths but",
    "start": "681429",
    "end": "686540"
  },
  {
    "text": "I can't just add feet to meters without some conversion it doesn't work gives me a nonsense result if you're",
    "start": "686540",
    "end": "693529"
  },
  {
    "text": "lucky it gives you a result that's obviously wrong if you're unlucky gives you result that's believable so the top",
    "start": "693529",
    "end": "702020"
  },
  {
    "text": "right of this you'll see these wonderful little pictures which are from the Mars climate orbiter and the mass climate",
    "start": "702020",
    "end": "709910"
  },
  {
    "text": "orbiter this is hundreds of millions of dollars worth of of kit Lockheed Martin",
    "start": "709910",
    "end": "715220"
  },
  {
    "text": "and NASA managed to screw this one up unfortunately and the problem there was",
    "start": "715220",
    "end": "721040"
  },
  {
    "text": "that the that the interface had pounds seconds so Imperial English units and",
    "start": "721040",
    "end": "727640"
  },
  {
    "text": "when the other parts was using SI units with Newton seconds which are out by factor four point four five so instead",
    "start": "727640",
    "end": "734180"
  },
  {
    "text": "of that lovely little curve coming the top and going round Mars it came in four point four five times to low bang",
    "start": "734180",
    "end": "740390"
  },
  {
    "text": "straight into Mars if those guys who who's spending hundreds of millions of",
    "start": "740390",
    "end": "745490"
  },
  {
    "text": "dollars on this can get this one wrong what chance do we have how likely are we",
    "start": "745490",
    "end": "750980"
  },
  {
    "text": "to make these errors I'm going to show you techniques that will stop this errors one hundred percent if you use them so it still you can write nonsense",
    "start": "750980",
    "end": "759740"
  },
  {
    "text": "and it will still compile so one of the basic things here is a thing called",
    "start": "759740",
    "end": "766190"
  },
  {
    "start": "762000",
    "end": "875000"
  },
  {
    "text": "whole value pattern this was invented or named by Kent Beck extreme pro game guy",
    "start": "766190",
    "end": "773709"
  },
  {
    "text": "first in small talk and it this is right ok we're gonna create class yeah like",
    "start": "773709",
    "end": "779300"
  },
  {
    "text": "this which is just holds this year that's all it's doing it's nothing there's nothing special about this one but it's a different type so the second",
    "start": "779300",
    "end": "788330"
  },
  {
    "text": "part on this one the operator double quotes double quotes c plus eleven so-called user-defined literal this now",
    "start": "788330",
    "end": "795260"
  },
  {
    "text": "allows me to write cut typed constants so instead of just saying yo y equals",
    "start": "795260",
    "end": "800900"
  },
  {
    "text": "206 2016 i can now say 216 underscore year and that will return something of",
    "start": "800900",
    "end": "807320"
  },
  {
    "text": "the right type the other thing to notice is the explicit constructor you you",
    "start": "807320",
    "end": "813860"
  },
  {
    "text": "can't automatically convert from an int into a year type you actually have to say i want the year your parentheses",
    "start": "813860",
    "end": "821150"
  },
  {
    "text": "whatever so this means you can't accidentally pass these things you can't create one by mistake again",
    "start": "821150",
    "end": "829190"
  },
  {
    "text": "safety you coming out of this one though so that's explicit going in stops that",
    "start": "829190",
    "end": "835820"
  },
  {
    "text": "conversion because that's an unsafe conversion we want to control that one operator int is a user defined",
    "start": "835820",
    "end": "841459"
  },
  {
    "text": "conversion an implicit conversion out of the class so you can say right ok how do I get that value back out if we do this",
    "start": "841459",
    "end": "848120"
  },
  {
    "text": "we can actually just convert everything back into integers do the arithmetic and we're we're okay to go with that we can",
    "start": "848120",
    "end": "854779"
  },
  {
    "text": "actually still do stuff this is giving us a start it's not the end yet so it's",
    "start": "854779",
    "end": "860779"
  },
  {
    "text": "an widening conversion out and that's safe not foolproof and it gets boring",
    "start": "860779",
    "end": "867139"
  },
  {
    "text": "when you have multiple types because you can imagine that month is going to look the same day is going to look the same week we're going to use this a lot this",
    "start": "867139",
    "end": "874399"
  },
  {
    "text": "pattern of course when you see repeated code structure templates are your friend",
    "start": "874399",
    "end": "880699"
  },
  {
    "start": "875000",
    "end": "935000"
  },
  {
    "text": "templates are code generators built into the language and they help you with",
    "start": "880699",
    "end": "886389"
  },
  {
    "text": "repeated structure so in this case what I've done is taken class year we now",
    "start": "886389",
    "end": "893269"
  },
  {
    "text": "call it class unit that's the name that beyond a through strip has been using so I've been using that one and now going",
    "start": "893269",
    "end": "899630"
  },
  {
    "text": "to template it you get a template it all essentially just a number to make them different types there's nothing special",
    "start": "899630",
    "end": "905209"
  },
  {
    "text": "about the unit type there it's just a list of numbers and it means they're different same thing but now I can say",
    "start": "905209",
    "end": "911329"
  },
  {
    "text": "here is a unit of yo type and month of month type and now there are three",
    "start": "911329",
    "end": "916579"
  },
  {
    "text": "different types so I can take this I got in my library class and I can make them different now I've got a type safe API I",
    "start": "916579",
    "end": "923990"
  },
  {
    "text": "don't need to repeat myself all the time this is as efficient as using integers",
    "start": "923990",
    "end": "930189"
  },
  {
    "text": "all the functions in line there is no runtime overhead here",
    "start": "930189",
    "end": "935949"
  },
  {
    "start": "935000",
    "end": "967000"
  },
  {
    "text": "yeah",
    "start": "936330",
    "end": "939140"
  },
  {
    "text": "absolutely you can so if you wanted you could put that in a header file for",
    "start": "943030",
    "end": "948490"
  },
  {
    "text": "instance if this was a date thing you could put using in your header file and see this one so if you had a date H or",
    "start": "948490",
    "end": "956800"
  },
  {
    "text": "whatever then you would put in you have this unit you'd have year month day and then your date one all of that lot in",
    "start": "956800",
    "end": "962410"
  },
  {
    "text": "one header file that other people can see absolutely",
    "start": "962410",
    "end": "967079"
  },
  {
    "start": "967000",
    "end": "1067000"
  },
  {
    "text": "start we've wrapped up an integer but we know that it's a constrained set of values we don't want to be able to",
    "start": "969270",
    "end": "975750"
  },
  {
    "text": "create things out of a certain range so here is a technique we can use with",
    "start": "975750",
    "end": "981020"
  },
  {
    "text": "constructors so const expert is something comes in c plus 11 and was",
    "start": "981020",
    "end": "987650"
  },
  {
    "text": "made much more useful and c purpose 14 so this means this can be done at",
    "start": "987650",
    "end": "994290"
  },
  {
    "text": "compile time so it's a on a constructor or a function it says it can be run at",
    "start": "994290",
    "end": "999600"
  },
  {
    "text": "compile time if you whether it is or not depends on how it's used and so there's a context",
    "start": "999600",
    "end": "1005690"
  },
  {
    "text": "in which it's used so you can see at the bottom a lot bottom two lines the first one is a run time check and second one",
    "start": "1005690",
    "end": "1011300"
  },
  {
    "text": "is actually a compile time check so this one here you can say right ok my unit 1",
    "start": "1011300",
    "end": "1017690"
  },
  {
    "text": "like this notice on the unit type i've got two extra parameters which is the low and high value so I can now say AHA",
    "start": "1017690",
    "end": "1024199"
  },
  {
    "text": "look check at compile time or when you try to create this one that it is valid if you're doing at run time it'll to a",
    "start": "1024200",
    "end": "1031670"
  },
  {
    "text": "throw okay that's you can't create one of these that's fine if you do the throw it the compile time you can stack Spur",
    "start": "1031670",
    "end": "1038990"
  },
  {
    "text": "you'll get a compiler error now it may not give you a particularly nice compiler error but it will actually give",
    "start": "1038990",
    "end": "1044060"
  },
  {
    "text": "you a compiler error so you can now at the bottom that will bottom line will not compile so I can say that's out of",
    "start": "1044060",
    "end": "1050810"
  },
  {
    "text": "range so now I can say look it's of type it's like this and it has this range and get that checked so we can do runtime",
    "start": "1050810",
    "end": "1059210"
  },
  {
    "text": "and compile time checking the compile time check has no runtime overhead the",
    "start": "1059210",
    "end": "1064790"
  },
  {
    "text": "run time check obviously does so up to now we have just been looking at",
    "start": "1064790",
    "end": "1071950"
  },
  {
    "text": "labeling our types we haven't done anything particularly special with them and we have not done anything with",
    "start": "1071950",
    "end": "1077870"
  },
  {
    "text": "operations we've said ok we can wrap this one up when we want to do something we'll take it out of this class use dine",
    "start": "1077870",
    "end": "1084770"
  },
  {
    "text": "conversion implicitly do our arithmetic and then we have to decide whether to put it back in or whatever we can do",
    "start": "1084770",
    "end": "1091030"
  },
  {
    "text": "what we choose to do with I'll print it out this is error-prone we've got rid of",
    "start": "1091030",
    "end": "1096740"
  },
  {
    "text": "some of our errors we got rid of passing the wrong thing to date but we haven't",
    "start": "1096740",
    "end": "1102150"
  },
  {
    "text": "got anything about what we can do with years some operations are valid and make",
    "start": "1102150",
    "end": "1107400"
  },
  {
    "text": "sense physical sense and some arms so we now need to start looking at the other side of this one which is operations and",
    "start": "1107400",
    "end": "1114210"
  },
  {
    "text": "moving on from just labeled types so we're going to make the conversion out of our thing explicit so this is the",
    "start": "1114210",
    "end": "1123090"
  },
  {
    "start": "1121000",
    "end": "1338000"
  },
  {
    "text": "same as before but you'll see now in this explicit operator int so conversion",
    "start": "1123090",
    "end": "1128700"
  },
  {
    "text": "it and I go drop all the context purse after this one because otherwise the slide just gets you big ok now you can",
    "start": "1128700",
    "end": "1135450"
  },
  {
    "text": "you say I can't create a year unless I explicitly type year I can't actually convert it out into an integer unless I",
    "start": "1135450",
    "end": "1141810"
  },
  {
    "text": "say I want an integer so now conversion control in and out my operation operator",
    "start": "1141810",
    "end": "1149100"
  },
  {
    "text": "plus I just said look it makes sense to say year plus an integer or integer plus",
    "start": "1149100",
    "end": "1154230"
  },
  {
    "text": "a year so I can say 2016 plus one so year 2016 plus one gives 2017 but it",
    "start": "1154230",
    "end": "1161790"
  },
  {
    "text": "doesn't make sense to say year 2017 plus year three what does add two years together doesn't",
    "start": "1161790",
    "end": "1167580"
  },
  {
    "text": "make a difference it doesn't make sense so we can decide what operations make sense in our domain and which ones don't",
    "start": "1167580",
    "end": "1174680"
  },
  {
    "text": "so we can choose we can now be explicit about what is allowed and what's not",
    "start": "1174680",
    "end": "1179880"
  },
  {
    "text": "allowed so",
    "start": "1179880",
    "end": "1185240"
  },
  {
    "text": "plus int you go yes okay that makes sense so for dates we have we can add in",
    "start": "1185240",
    "end": "1190430"
  },
  {
    "text": "extra things we can say what we decide what date plus int would mean maybe that's going to add a number of days no",
    "start": "1190430",
    "end": "1196520"
  },
  {
    "text": "date plus one will be tomorrow into plus Tate Tate - dates that make sense",
    "start": "1196520",
    "end": "1202160"
  },
  {
    "text": "because of how many days in between would it be dates less than date yes that's obviously some ordering",
    "start": "1202160",
    "end": "1207740"
  },
  {
    "text": "between those and we can do equality so some things will give us date some will give us in some of is bull dates times",
    "start": "1207740",
    "end": "1213350"
  },
  {
    "text": "int what does it mean to say two times today makes no sense so we have to",
    "start": "1213350",
    "end": "1221000"
  },
  {
    "text": "decide which operations make sense which ones don't but for instance with money you can say",
    "start": "1221000",
    "end": "1226670"
  },
  {
    "text": "well money times a floating point yes that's fine that's an interest calculation that's that's a very common",
    "start": "1226670",
    "end": "1232160"
  },
  {
    "text": "thing to do but money plus a float doesn't make sense certain operations do certain operations",
    "start": "1232160",
    "end": "1238040"
  },
  {
    "text": "don't and there's a little of whole pile of sort of kind of mathematics around this one with groups and rings and all",
    "start": "1238040",
    "end": "1244190"
  },
  {
    "text": "those other things like that if you want to get into this how do we get the point",
    "start": "1244190",
    "end": "1250460"
  },
  {
    "text": "where we can have the desirable ones how can we say what we want and what we don't want here but without having to",
    "start": "1250460",
    "end": "1255860"
  },
  {
    "text": "spell it out every time how could we make that more reusable more generic how do we avoid all the boilerplate and",
    "start": "1255860",
    "end": "1261650"
  },
  {
    "text": "repetitive code okay let's have a look so first approach is that we can let the",
    "start": "1261650",
    "end": "1269600"
  },
  {
    "text": "client do it and there happens to be something in the standard library that will do this so if you have operator",
    "start": "1269600",
    "end": "1274880"
  },
  {
    "text": "equals equals which is a fairly straightforward thing to do and operator less than you can now include rail ops",
    "start": "1274880",
    "end": "1283580"
  },
  {
    "text": "this is something that was in 98 standard and it defines the other operations like less than or equals in",
    "start": "1283580",
    "end": "1290570"
  },
  {
    "text": "terms of less than and equals equals and what it has inside is some templates basic templates like operate a greater",
    "start": "1290570",
    "end": "1297320"
  },
  {
    "text": "than is just operator less than but where the arguments turn round so this",
    "start": "1297320",
    "end": "1302600"
  },
  {
    "text": "is you can say well I publish these ones and I'll let the client decide what he wants that the reason it's done this way and in a separate namespace is because",
    "start": "1302600",
    "end": "1310430"
  },
  {
    "text": "they're very big powerful templates operate at greater than matching two T's there's would just match everything",
    "start": "1310430",
    "end": "1317040"
  },
  {
    "text": "so that would give you operator less than on things that just don't make sense at all which is why it's",
    "start": "1317040",
    "end": "1322170"
  },
  {
    "text": "constraint you can't use this to define your own class though and it's a bit of",
    "start": "1322170",
    "end": "1329850"
  },
  {
    "text": "a quick cheap way around it but it's it's there so what's one option we're not going to take that one we're going",
    "start": "1329850",
    "end": "1335370"
  },
  {
    "text": "to see a little bit more and that's only defined for the relational operators so",
    "start": "1335370",
    "end": "1341460"
  },
  {
    "start": "1338000",
    "end": "1463000"
  },
  {
    "text": "here's a technique thing called CRT P the curiously recursive template pattern or curiously recurring template pattern",
    "start": "1341460",
    "end": "1348590"
  },
  {
    "text": "this was used over 20 years ago there's a book called scientific and engineering",
    "start": "1348590",
    "end": "1354540"
  },
  {
    "text": "C++ by Barton Nachman who do a lot of this and this is essentially doing the",
    "start": "1354540",
    "end": "1362820"
  },
  {
    "text": "same as a virtual function but it's doing it at compile time and it's a rather rather fun trick when you first",
    "start": "1362820",
    "end": "1369270"
  },
  {
    "text": "see you go really what's going on here so classier inherits I'm ordered of",
    "start": "1369270",
    "end": "1375000"
  },
  {
    "text": "Europe you appear to be inheriting from yourself or a template parameterised on",
    "start": "1375000",
    "end": "1380400"
  },
  {
    "text": "yourself well the reason for this one is that why we do this way this is as I",
    "start": "1380400",
    "end": "1386550"
  },
  {
    "text": "said a compile time version of virtual functions if you just do without virtual functions you could with virtual",
    "start": "1386550",
    "end": "1392220"
  },
  {
    "text": "functions at runtime class year inherits from ordered and then ordered which is the base class up here would have",
    "start": "1392220",
    "end": "1398400"
  },
  {
    "text": "virtual functions that would say right I want to use the operator less than that's in the derived class",
    "start": "1398400",
    "end": "1404130"
  },
  {
    "text": "and so it's a virtual operator greater than called the derived classes less",
    "start": "1404130",
    "end": "1409950"
  },
  {
    "text": "than so you use virtual to do the downcast but that's done at runtime",
    "start": "1409950",
    "end": "1416900"
  },
  {
    "text": "what you need to do is to get that same downcast done at compile time which is why you need to have this technique here",
    "start": "1416900",
    "end": "1423240"
  },
  {
    "text": "with a downcast a static cast to derived in order to know how where to do the",
    "start": "1423240",
    "end": "1429330"
  },
  {
    "text": "downcast you have to pass in the derived class which is why it's your public audit of your so that you can pass in to",
    "start": "1429330",
    "end": "1435630"
  },
  {
    "text": "the base class the thing is trying to downcast - that's way it's done it's a very powerful technique when you get",
    "start": "1435630",
    "end": "1442770"
  },
  {
    "text": "your head round it you go oh I can do lots of things here so if you're used to thinking in terms of object oriented",
    "start": "1442770",
    "end": "1450150"
  },
  {
    "text": "stuff and chores done at runtime you can do the same things now at compile time and so",
    "start": "1450150",
    "end": "1456900"
  },
  {
    "text": "here at the bottom I can see that I've got a operator greater than defined in terms of operator less than so that",
    "start": "1456900",
    "end": "1466320"
  },
  {
    "start": "1463000",
    "end": "1585000"
  },
  {
    "text": "derived downcast is done at compile time there is no overhead to that one because",
    "start": "1466320",
    "end": "1471570"
  },
  {
    "text": "the class has no size so there isn't any point to adjustment or anything at all it's just a cast",
    "start": "1471570",
    "end": "1478519"
  },
  {
    "text": "all compile-time stuff and this is sometimes referred to as compile-time polymorphism so as I said it's like",
    "start": "1479309",
    "end": "1485759"
  },
  {
    "text": "virtuals but done at compile time why do it this way rather than with a virtual okay so imagine I we've had this as an",
    "start": "1485759",
    "end": "1492480"
  },
  {
    "text": "unsigned char if I added virtual to that any virtual methods then it would add in",
    "start": "1492480",
    "end": "1498600"
  },
  {
    "text": "a virtual table pointer it's a V table pointer so on a 64-bit machine my one byte unsigned char is now gone an 8 byte",
    "start": "1498600",
    "end": "1506129"
  },
  {
    "text": "pointer followed by one byte so it's now gone from 1 by 2 16 bytes 16 times",
    "start": "1506129",
    "end": "1511139"
  },
  {
    "text": "larger if it was an int it would be 4 times larger I'd have to do a virtual",
    "start": "1511139",
    "end": "1517679"
  },
  {
    "text": "call so I'd have to do this call resolution at runtime so that's slower",
    "start": "1517679",
    "end": "1523230"
  },
  {
    "text": "so it's 10 takes instead of being resolved an inlined which basically has zero overhead it's now going to take 15",
    "start": "1523230",
    "end": "1529590"
  },
  {
    "text": "maybe 20 cycles to do that to do a virtual call at runtime indirection through a pointer you can't do context",
    "start": "1529590",
    "end": "1537269"
  },
  {
    "text": "but you can't do compile time stuff anymore because it's a runtime thing if you use virtual rather than using these techniques so you've pushed things to",
    "start": "1537269",
    "end": "1543840"
  },
  {
    "text": "runtime you may think slower you can it's unlikely you can inline it or",
    "start": "1543840",
    "end": "1550200"
  },
  {
    "text": "depends how it's done but if it's pure virtual you wouldn't be sorry if it wasn't just virtual functions you",
    "start": "1550200",
    "end": "1556440"
  },
  {
    "text": "probably wouldn't be able to inline it inlining is a huge performance benefit and also the branch prediction in your",
    "start": "1556440",
    "end": "1563580"
  },
  {
    "text": "CPU is going to go have no idea to virtual function don't know it's going to have to measure it at runtime whereas",
    "start": "1563580",
    "end": "1569759"
  },
  {
    "text": "if you do this one it's all inlined you've got no overhead here and there's no branch prediction because it's all in",
    "start": "1569759",
    "end": "1575490"
  },
  {
    "text": "like it's a very common technique used in libraries like boost you'll find some libraries use it all the time very",
    "start": "1575490",
    "end": "1582389"
  },
  {
    "text": "useful technique to get your head round so let's now look at physical quantities",
    "start": "1582389",
    "end": "1590509"
  },
  {
    "start": "1585000",
    "end": "1772000"
  },
  {
    "text": "so this is back down to the Mars climate or which problem so I've got quantity at",
    "start": "1590509",
    "end": "1596519"
  },
  {
    "text": "the top there so it looks fairly similar but notice I've added some extra things into this one here so instead of just",
    "start": "1596519",
    "end": "1601889"
  },
  {
    "text": "I've added type name V so that says I can parameterize the type am i storing a float or double or an int or whatever",
    "start": "1601889",
    "end": "1608190"
  },
  {
    "text": "I've got a second one unit sis and this is then for saying okay this is a templated parameter that tells",
    "start": "1608190",
    "end": "1614759"
  },
  {
    "text": "me what type of system I'm going to be using so specifically here am I going to be using SI units or am I going to be",
    "start": "1614759",
    "end": "1620639"
  },
  {
    "text": "using the English or imperial units and then I've put three additional template",
    "start": "1620639",
    "end": "1627059"
  },
  {
    "text": "parameters there I could go all the way up to seven so these are the indices the exponents for the dimensions so M L&T",
    "start": "1627059",
    "end": "1637139"
  },
  {
    "text": "for mass length and time",
    "start": "1637139",
    "end": "1640369"
  },
  {
    "text": "- fine operators operator plus an operator divided on all the other ones so operator plus just says you can only",
    "start": "1642680",
    "end": "1650090"
  },
  {
    "text": "add quantities of the same type I can only add things which are the same or the same units and they happen to be the",
    "start": "1650090",
    "end": "1655820"
  },
  {
    "text": "same physical unit representing so I can't add mass to length so the ml and t",
    "start": "1655820",
    "end": "1664970"
  },
  {
    "text": "in this case are indices for this one so as an example see the bottom here meters",
    "start": "1664970",
    "end": "1670280"
  },
  {
    "text": "I'm defining say that's a float and you're using SI units zero one zero so",
    "start": "1670280",
    "end": "1676070"
  },
  {
    "text": "mass is zero length one time one so that's at time zero that says I'm dealing with a length quantity so I'm",
    "start": "1676070",
    "end": "1682850"
  },
  {
    "text": "doing dimensional analysis seconds math zero links there are a time one now if I",
    "start": "1682850",
    "end": "1689750"
  },
  {
    "text": "do meters plus seconds like on the bottom it's going to say you can't do that you can't add meters to seconds it",
    "start": "1689750",
    "end": "1695990"
  },
  {
    "text": "doesn't make physical sense there is no operator plus for these because you can only add things which are the same types",
    "start": "1695990",
    "end": "1702850"
  },
  {
    "text": "operator divide however is a little bit more fun because notice that says well",
    "start": "1702850",
    "end": "1708260"
  },
  {
    "text": "okay I can only do things that are the same type in the same unit system so immediately I'm in a good place there",
    "start": "1708260",
    "end": "1713510"
  },
  {
    "text": "but mass one length one time one massive length through time - and then I say",
    "start": "1713510",
    "end": "1719510"
  },
  {
    "text": "okay I'm now going to do some arithmetic so I'm going to say the output has the",
    "start": "1719510",
    "end": "1725480"
  },
  {
    "text": "same type same units but mass one minus mass two so I can now start and do",
    "start": "1725480",
    "end": "1731780"
  },
  {
    "text": "arithmetic on the exponents so when I do meters divided by seconds instead of",
    "start": "1731780",
    "end": "1738050"
  },
  {
    "text": "what the answer will be will be float that's our units are zero one minus one Lorde's meters divided by seconds gives",
    "start": "1738050",
    "end": "1745070"
  },
  {
    "text": "me a velocity so it says here are the the calculations you can do and by the",
    "start": "1745070",
    "end": "1750650"
  },
  {
    "text": "way I'm going to keep track of all those types again zero runtime overhead here why",
    "start": "1750650",
    "end": "1756950"
  },
  {
    "text": "because this is all on the type system we throw it all away we've got a proof system at compile time that says you've",
    "start": "1756950",
    "end": "1762739"
  },
  {
    "text": "not done anything silly or here are the class of silly things that I've stopped you doing and you can always write silly",
    "start": "1762739",
    "end": "1769190"
  },
  {
    "text": "stuff of course but it's thrown away so",
    "start": "1769190",
    "end": "1776450"
  },
  {
    "start": "1772000",
    "end": "1808000"
  },
  {
    "text": "we're getting these conversions in our case here the conversions we're doing are the exponents it stops physically",
    "start": "1776450",
    "end": "1781999"
  },
  {
    "text": "impossible calculations and stop some mixing of units the SI units in per unit",
    "start": "1781999",
    "end": "1787929"
  },
  {
    "text": "we can do related flavors here so multiple currencies you could do similarly like this you could say okay",
    "start": "1787929",
    "end": "1794299"
  },
  {
    "text": "can I have a currency in in this value comes the labels of this value I would then have to find what conversion would",
    "start": "1794299",
    "end": "1799820"
  },
  {
    "text": "meant between them so if I wanted to convert pounds to doral of dollars or Euros I couldn't stop myself adding",
    "start": "1799820",
    "end": "1806389"
  },
  {
    "text": "pounds and euros together",
    "start": "1806389",
    "end": "1809470"
  },
  {
    "start": "1808000",
    "end": "1937000"
  },
  {
    "text": "because all of this is through all of our information that we have that rich type information is thrown away at",
    "start": "1812980",
    "end": "1820179"
  },
  {
    "text": "runtime we can't do in C++ what you can do in other languages which is do",
    "start": "1820179",
    "end": "1825850"
  },
  {
    "text": "runtime reflection and find out what types things are or do calculations and",
    "start": "1825850",
    "end": "1831429"
  },
  {
    "text": "compare runtime you can do calculations at compile time however so in C++ one of",
    "start": "1831429",
    "end": "1837880"
  },
  {
    "text": "the techniques is often used a little bit a template metaprogramming is publishing your template parameters out",
    "start": "1837880",
    "end": "1843580"
  },
  {
    "text": "to the outside world so you republish what comes in so and I've got vum L&T and I'm republishing",
    "start": "1843580",
    "end": "1850419"
  },
  {
    "text": "them so you'll see value types so for instance if you have a vector vector of T you'll find inside there is a type def",
    "start": "1850419",
    "end": "1856480"
  },
  {
    "text": "that says value type that tells you that the vector of T has a type of T that allows you to be able to take a",
    "start": "1856480",
    "end": "1861519"
  },
  {
    "text": "container and find out what's inside it same thing here I'm republishing the",
    "start": "1861519",
    "end": "1867309"
  },
  {
    "text": "exponents and unit systems etc so that's all just static information that's in",
    "start": "1867309",
    "end": "1873279"
  },
  {
    "text": "the type system but there's no overhead to it at runtime at all so why would you",
    "start": "1873279",
    "end": "1879460"
  },
  {
    "text": "want that well okay in the middle here length and time so I can say I got a float of SI units",
    "start": "1879460",
    "end": "1885789"
  },
  {
    "text": "I then won't have a time unit that's compatible I say well it has a quantity of length type yes I want that to be",
    "start": "1885789",
    "end": "1893440"
  },
  {
    "text": "type I want this to have the same type as that guy so if I change it from float to double that would also ripple through",
    "start": "1893440",
    "end": "1899230"
  },
  {
    "text": "I want to have it the same unit system so I can do some simple calculations",
    "start": "1899230",
    "end": "1904840"
  },
  {
    "text": "through this compile time reflection I may say I can use the template in a list",
    "start": "1904840",
    "end": "1911559"
  },
  {
    "text": "like this is a mass is always going to be 1 0 0 for these ones here but I can",
    "start": "1911559",
    "end": "1916809"
  },
  {
    "text": "then also decide whether I want to have floats and doubles or some other types in there I can do things like this if",
    "start": "1916809",
    "end": "1922840"
  },
  {
    "text": "the unit system equals SI units then print out this one here because that if is done at compile time then we'll be",
    "start": "1922840",
    "end": "1930399"
  },
  {
    "text": "dead code if it wasn't there the compiler would eliminate it in C Pro r17 you can even do if Const expert",
    "start": "1930399",
    "end": "1938340"
  },
  {
    "start": "1937000",
    "end": "2092000"
  },
  {
    "text": "so that is how do we tailor these operations so the next aspect of this",
    "start": "1938830",
    "end": "1946040"
  },
  {
    "text": "one here is we want to be able to use some way of saying well I want plus for",
    "start": "1946040",
    "end": "1951110"
  },
  {
    "text": "this guy but I want not for this so for instance when we looked at date and money date we said we want to be able to",
    "start": "1951110",
    "end": "1957170"
  },
  {
    "text": "add date and integer we didn't want to be able to add money an integer we wanted to do date money plus money yes",
    "start": "1957170",
    "end": "1964370"
  },
  {
    "text": "but not date plus date so I've got a short little thing here operator traits",
    "start": "1964370",
    "end": "1970130"
  },
  {
    "text": "that's basically a table that says here are the operations that I want and here's the ones I don't want so I can",
    "start": "1970130",
    "end": "1975980"
  },
  {
    "text": "put I don't want these ones here so my my base one here of AD scalar add value",
    "start": "1975980",
    "end": "1981080"
  },
  {
    "text": "and now I can do these operator plus there's two versions here so the first one is adding it an integer to something",
    "start": "1981080",
    "end": "1987920"
  },
  {
    "text": "and I've put in an enable if enable if is a way of limiting the read the",
    "start": "1987920",
    "end": "1996710"
  },
  {
    "text": "overload set for template and basically says if operator traits add scalar is",
    "start": "1996710",
    "end": "2003250"
  },
  {
    "text": "true then this is enabled if it's not this template does not exist so it uses",
    "start": "2003250",
    "end": "2009550"
  },
  {
    "text": "this technique called spin a substitution failure is not an error and it says if that's not true it's not",
    "start": "2009550",
    "end": "2017410"
  },
  {
    "text": "there but don't complain don't throw an error if this template",
    "start": "2017410",
    "end": "2022960"
  },
  {
    "text": "it's not there if you try to use it it will but it doesn't say enable if won't throw that kind of won't complain it",
    "start": "2022960",
    "end": "2029710"
  },
  {
    "text": "just takes that template away so I can say I can add duty plus integer or I can",
    "start": "2029710",
    "end": "2036130"
  },
  {
    "text": "do t plus t if add value is true so that will be the library code and then how do",
    "start": "2036130",
    "end": "2041470"
  },
  {
    "text": "I use that well the client code says ok here operator traits for you I'm just going to say add scalar I wanna add",
    "start": "2041470",
    "end": "2048730"
  },
  {
    "text": "scalar I don't want the other ones so I can say here are the operations I want I can enumerate those ones that will use",
    "start": "2048730",
    "end": "2054100"
  },
  {
    "text": "the enable if turn on the template for the relevant operations and now I can say yeah plus 2 it goes fine year plus",
    "start": "2054100",
    "end": "2061600"
  },
  {
    "text": "year is a compiler error so that's kind",
    "start": "2061600",
    "end": "2066790"
  },
  {
    "text": "of fun that allows us notice here the use of these things once",
    "start": "2066790",
    "end": "2072039"
  },
  {
    "text": "you've done all the rest on his foot is as simple so I'm trying to get it so that there is zero runtime overhead but",
    "start": "2072039",
    "end": "2080169"
  },
  {
    "text": "also zero sort of compiled developer overhead to using these types",
    "start": "2080169",
    "end": "2085419"
  },
  {
    "text": "once you define them the code looks just as you would have done if it was",
    "start": "2085419",
    "end": "2090429"
  },
  {
    "text": "integers so where are we we've done a load of stuff here thrown pile of things in",
    "start": "2090429",
    "end": "2098230"
  },
  {
    "text": "let's have a look so on the left here I have my main so I've decided to have got distance here which is this so I've got",
    "start": "2098230",
    "end": "2105400"
  },
  {
    "text": "all this business with context pers and user-defined literals and a five point two meters I have all the physical",
    "start": "2105400",
    "end": "2111040"
  },
  {
    "text": "dimensions all that ml and T type of extra stuff I've got this unit types",
    "start": "2111040",
    "end": "2117250"
  },
  {
    "text": "about what we can do I'm using CR TP for the operator inheritance I've got so",
    "start": "2117250",
    "end": "2122350"
  },
  {
    "text": "this happens to be a constant expression example but the same thing applies if it",
    "start": "2122350",
    "end": "2127810"
  },
  {
    "text": "was runtime values so I've take a couple of things like this add two distances together do some comparisons with an",
    "start": "2127810",
    "end": "2134470"
  },
  {
    "text": "operator greater than even though I've done operator less than and I then said Riker that's distance and divided by",
    "start": "2134470",
    "end": "2140230"
  },
  {
    "text": "time that's going to give me a velocity that's fine and then converted it back out again the interesting thing is in",
    "start": "2140230",
    "end": "2145960"
  },
  {
    "text": "GCC gives you the answer as saying it just compiles down to the answer is five so the generated code is basically just",
    "start": "2145960",
    "end": "2153730"
  },
  {
    "text": "return the value five if you do this with without constants you will get an",
    "start": "2153730",
    "end": "2159520"
  },
  {
    "text": "equivalent as you are saying that you would get if you just did with doubles",
    "start": "2159520",
    "end": "2164550"
  },
  {
    "text": "so there is no compile no runtime overhead to this one it's all done at",
    "start": "2164550",
    "end": "2169990"
  },
  {
    "text": "compile time okay let's switch to a",
    "start": "2169990",
    "end": "2175420"
  },
  {
    "start": "2171000",
    "end": "2251000"
  },
  {
    "text": "little bit of something else there are other things that we may want to to",
    "start": "2175420",
    "end": "2181090"
  },
  {
    "text": "check and so here's a little fixed length string class fixed length",
    "start": "2181090",
    "end": "2187600"
  },
  {
    "text": "string class we're trying to avoid some of the problems that you get with C",
    "start": "2187600",
    "end": "2193510"
  },
  {
    "text": "style arrays with pointers to memory and don't know how long it is the the classic buffer overflow problem so this",
    "start": "2193510",
    "end": "2201040"
  },
  {
    "text": "was something that you might use an embedded system were you going well actually I want the kind of efficiency I",
    "start": "2201040",
    "end": "2206619"
  },
  {
    "text": "get with contrast our stuff but I don't want to have the buffer overflow problems so this string here fix string",
    "start": "2206619",
    "end": "2213760"
  },
  {
    "text": "notice in the middle struttin copy here so we're copying into this into the",
    "start": "2213760",
    "end": "2218920"
  },
  {
    "text": "buffer we've got notice it's not dynamically allocated it's just inside the string you store and copy make sure",
    "start": "2218920",
    "end": "2226270"
  },
  {
    "text": "it's not nated there's actually a policy decision based in there and embedded this is says",
    "start": "2226270",
    "end": "2233140"
  },
  {
    "text": "I'm going to truncate my string if you give me a string that's too big to put",
    "start": "2233140",
    "end": "2238150"
  },
  {
    "text": "in there you have a great long you put war and peace into something it's only ten characters long it's going to truncate it truncation may or may not be",
    "start": "2238150",
    "end": "2246340"
  },
  {
    "text": "appropriate it's a policy decision",
    "start": "2246340",
    "end": "2251400"
  },
  {
    "start": "2251000",
    "end": "2418000"
  },
  {
    "text": "but is that policy what you want so for instance what might what might be some",
    "start": "2253960",
    "end": "2260870"
  },
  {
    "text": "other valid policies you might mull say well actually look I want to stick this in diagnostic log because something's",
    "start": "2260870",
    "end": "2267200"
  },
  {
    "text": "not right there but I'll just truncate it and but I'll note the fact that truncation occurred you may be",
    "start": "2267200",
    "end": "2274100"
  },
  {
    "text": "displaying something on the screen and it may just be a message where it's truncated that's okay if it's a message",
    "start": "2274100",
    "end": "2280310"
  },
  {
    "text": "as printing out a value and it truncates it that might not be okay because it now",
    "start": "2280310",
    "end": "2286820"
  },
  {
    "text": "gives you three digits of an integer are the four digits of an integer oops so in",
    "start": "2286820",
    "end": "2292430"
  },
  {
    "text": "a case like that you might decide to throw an exception you go look this is horribly wrong and there's something bad here we all",
    "start": "2292430",
    "end": "2300200"
  },
  {
    "text": "need to recover from this somehow if it's an embedded system you may go look actually I'm in a horrible place I have",
    "start": "2300200",
    "end": "2306230"
  },
  {
    "text": "no idea what's going on I'm going to reboot so there's something something bad has happened here you may be in a",
    "start": "2306230",
    "end": "2314480"
  },
  {
    "text": "test environment and say look actually I want to stop at this point getting the debug give me a back trace go down here",
    "start": "2314480",
    "end": "2320360"
  },
  {
    "text": "and go where are we because I need to be able to do this one these are all policy decisions that you want this string to",
    "start": "2320360",
    "end": "2326720"
  },
  {
    "text": "be able to implement so we can use a policy to this one here so my fixed",
    "start": "2326720",
    "end": "2334370"
  },
  {
    "text": "string here instead of hardwiring in that strand copying truncate I'm going to do all the copying and if it's not",
    "start": "2334370",
    "end": "2341300"
  },
  {
    "text": "zero at the end so I've got a thumb from the truncation and then get a call the overflow policy at that point to decide",
    "start": "2341300",
    "end": "2348020"
  },
  {
    "text": "what to do and this one here by default it's saying okay complain just print something out to standard output you can",
    "start": "2348020",
    "end": "2355220"
  },
  {
    "text": "decide what you want to do you can decide you may create a one hear a noise e string that says it's resetting on",
    "start": "2355220",
    "end": "2361580"
  },
  {
    "text": "that it's going to be make its presence felt very nicely when you do that so",
    "start": "2361580",
    "end": "2366860"
  },
  {
    "text": "these are policies that you can do let's just compare the policy in a CRT P",
    "start": "2366860",
    "end": "2374380"
  },
  {
    "text": "approach CRT P essentially does a compiler downcast and it's mixing in",
    "start": "2374380",
    "end": "2380050"
  },
  {
    "text": "functionality it allows you to say what you want with this one and it's really a library injection technique and it's a",
    "start": "2380050",
    "end": "2387790"
  },
  {
    "text": "way of refactoring things out policies don't do downcast they essentially doing",
    "start": "2387790",
    "end": "2394390"
  },
  {
    "text": "up cast or depending with you inherit from that or want you to quiet to it and",
    "start": "2394390",
    "end": "2400900"
  },
  {
    "text": "this is useful for rules validation logic such as constructors because that",
    "start": "2400900",
    "end": "2407800"
  },
  {
    "text": "was if you notice that one is was a constructor and it's a validation policy inside a constructor just as we had",
    "start": "2407800",
    "end": "2415090"
  },
  {
    "text": "validation for the limits of our of types so let's see how we can mix this",
    "start": "2415090",
    "end": "2421960"
  },
  {
    "start": "2418000",
    "end": "2478000"
  },
  {
    "text": "all together here so it's unholy mess here of quantity that says right I have",
    "start": "2421960",
    "end": "2427930"
  },
  {
    "text": "a public I'm ordered of quantity and I'm also inheriting from the constructor",
    "start": "2427930",
    "end": "2433690"
  },
  {
    "text": "check so I will do the initialization of that one of the ordered one that gives",
    "start": "2433690",
    "end": "2440170"
  },
  {
    "text": "me my all my relational operators and then the constructor check will call the",
    "start": "2440170",
    "end": "2447520"
  },
  {
    "text": "constructor of in this case it's non negative checker if it's less than zero",
    "start": "2447520",
    "end": "2452830"
  },
  {
    "text": "we're going to throw so this is context per which means that this can then be",
    "start": "2452830",
    "end": "2458380"
  },
  {
    "text": "enforced at compile time so if you try to create one of these things at compile",
    "start": "2458380",
    "end": "2463480"
  },
  {
    "text": "time it will do that check at compile time you won't even compile so if you",
    "start": "2463480",
    "end": "2468580"
  },
  {
    "text": "try to put a negative integer a negative floating point sorry it won't compile if you try to do this at runtime it will",
    "start": "2468580",
    "end": "2476230"
  },
  {
    "text": "obviously do the runtime check so that can",
    "start": "2476230",
    "end": "2482400"
  },
  {
    "start": "2478000",
    "end": "2539000"
  },
  {
    "text": "to check their it you can initialize the",
    "start": "2482400",
    "end": "2488339"
  },
  {
    "text": "string directly but it's a little bit more entertaining to do if the",
    "start": "2488339",
    "end": "2493799"
  },
  {
    "text": "constructor check doesn't complete correctly because of that exception is",
    "start": "2493799",
    "end": "2500010"
  },
  {
    "text": "thrown that turns it into compiler error if it doesn't throw on the other hand",
    "start": "2500010",
    "end": "2505289"
  },
  {
    "text": "that top part isn't throat essentially gets removed so you've done a compile check that then goes away at runtime",
    "start": "2505289",
    "end": "2510779"
  },
  {
    "text": "this just there's no there's nothing left of it so there are some useful things you can do with that so let's see",
    "start": "2510779",
    "end": "2519480"
  },
  {
    "text": "what that's done here when we put this extra check in here Const export negative number compiler error if we do",
    "start": "2519480",
    "end": "2526589"
  },
  {
    "text": "it with a negative number here you'll see you get a runtime throw and if we do",
    "start": "2526589",
    "end": "2531599"
  },
  {
    "text": "it without that we get exactly the same as we had before so there's a zero overhead to that",
    "start": "2531599",
    "end": "2538190"
  },
  {
    "start": "2539000",
    "end": "2667000"
  },
  {
    "text": "just as stand back from a little bit what we've done actually is created this domain-specific embedded language de sel",
    "start": "2542130",
    "end": "2550480"
  },
  {
    "text": "so it's like a domain-specific language but it's embedded in C++ we basically said here C++ will use these tools to",
    "start": "2550480",
    "end": "2556810"
  },
  {
    "text": "produce our own language if you use int and float you're using an implicit",
    "start": "2556810",
    "end": "2562660"
  },
  {
    "text": "interface you're using what the language has given you what we've done here is said now we're going to go explicit",
    "start": "2562660",
    "end": "2567760"
  },
  {
    "text": "we're gonna say I'm gonna I'm gonna take all control of these ones instead of saying I get all the operations that I",
    "start": "2567760",
    "end": "2574359"
  },
  {
    "text": "get with on int and floats which causing me no work to create this zero work to",
    "start": "2574359",
    "end": "2580119"
  },
  {
    "text": "create it easy to misuse though I can do plus plus on something when I didn't mean to do that what does that mean for for your type",
    "start": "2580119",
    "end": "2588450"
  },
  {
    "text": "little checking if you use the implicit interface and it's what I'd ever",
    "start": "2588450",
    "end": "2594280"
  },
  {
    "text": "necessary it doesn't allow you to constrain things but on the other side if you then go to the explicit interface",
    "start": "2594280",
    "end": "2599560"
  },
  {
    "text": "you say I haven't only these things you've got to do some work to do this one once you have those libraries there",
    "start": "2599560",
    "end": "2605440"
  },
  {
    "text": "are a number of those libraries around boost has something similar but it means it's harder to misuse and you get a lot",
    "start": "2605440",
    "end": "2611380"
  },
  {
    "text": "more checking and it's only as wide as you need okay so implicit versus",
    "start": "2611380",
    "end": "2617740"
  },
  {
    "text": "explicit there are some things however you want to happen in perfectly and typically the destructors and the",
    "start": "2617740",
    "end": "2624130"
  },
  {
    "text": "cleanup is something you want as an implicit interface you don't want people having to do explicit cleanup so I would",
    "start": "2624130",
    "end": "2631960"
  },
  {
    "text": "say from a safety point of view you want explicit for all the operations apart",
    "start": "2631960",
    "end": "2637540"
  },
  {
    "text": "from the cleanup operations so your resource management and destructors and",
    "start": "2637540",
    "end": "2642640"
  },
  {
    "text": "cleanup and rollback you want that to happen you don't want to have to call clean up things in other languages you",
    "start": "2642640",
    "end": "2648160"
  },
  {
    "text": "have to go and call cleanup in C for Plus destructors a huge huge part of",
    "start": "2648160",
    "end": "2654040"
  },
  {
    "text": "good C++ code in terms of resource management there's that so that that",
    "start": "2654040",
    "end": "2660490"
  },
  {
    "text": "means you want implicit safety operations but for anything else you want those to be visible and explicit",
    "start": "2660490",
    "end": "2668730"
  },
  {
    "start": "2667000",
    "end": "2790000"
  },
  {
    "text": "okay so have libraries we've got complete let's compare the run time and",
    "start": "2670370",
    "end": "2677130"
  },
  {
    "text": "the compiler time stuff so on the top there the oo view of the world is you say well I have a client and server",
    "start": "2677130",
    "end": "2683160"
  },
  {
    "text": "class and I have an interface in between a Java style interface or C sharp or whatever you want and this has the",
    "start": "2683160",
    "end": "2689130"
  },
  {
    "text": "advantage of allowing you independent compilation if the client class here says I'm going to call something that",
    "start": "2689130",
    "end": "2695130"
  },
  {
    "text": "expects a string and I try to pass on integers - it says you can't do that you get that independent checking if the",
    "start": "2695130",
    "end": "2702420"
  },
  {
    "text": "server says I'm trying to call dot lengths on an integer it says no such method so you can compile the client and",
    "start": "2702420",
    "end": "2708420"
  },
  {
    "text": "the server independently but you can only put those things together which you",
    "start": "2708420",
    "end": "2713910"
  },
  {
    "text": "have thought about so this is a white list this is pre-planned you have to",
    "start": "2713910",
    "end": "2719310"
  },
  {
    "text": "know that these things can be put together with templates on the other hand and we'll come back to this",
    "start": "2719310",
    "end": "2725280"
  },
  {
    "text": "concepts thing in a moment you get a template of T and an X and you go or just put them together do they have the",
    "start": "2725280",
    "end": "2731700"
  },
  {
    "text": "right signatures and it goes yeah I can do that that's if they if all the",
    "start": "2731700",
    "end": "2736860"
  },
  {
    "text": "operations are correct that's fine if not you get a horrible error long model like this is like war and peace and this",
    "start": "2736860",
    "end": "2743580"
  },
  {
    "text": "is one of the reasons you can't get separate compilation of templates why you have had a files etc and you need to",
    "start": "2743580",
    "end": "2749700"
  },
  {
    "text": "see the so the inclusion model for templates what happens if we tried to",
    "start": "2749700",
    "end": "2756240"
  },
  {
    "text": "get that kind of this similar separate compilation or at least this checking of compare of types with templates and this",
    "start": "2756240",
    "end": "2765180"
  },
  {
    "text": "is what concepts are about two concepts are essentially trying to do like kind of like that interface thing and",
    "start": "2765180",
    "end": "2770880"
  },
  {
    "text": "applying some of some additional type information to template parameters it's",
    "start": "2770880",
    "end": "2778050"
  },
  {
    "text": "there it's not in super or seventeen but you'll find GC has concepts in it so",
    "start": "2778050",
    "end": "2783930"
  },
  {
    "text": "let's try them out let's see actually what we could do how can you apply concepts to what we're doing",
    "start": "2783930",
    "end": "2790070"
  },
  {
    "start": "2790000",
    "end": "2848000"
  },
  {
    "text": "so here's oh here's my first attempt to this one so you've got a concept ruling",
    "start": "2790880",
    "end": "2796020"
  },
  {
    "text": "has operator less then and it says well it's a red boolean and it returns true",
    "start": "2796020",
    "end": "2802319"
  },
  {
    "text": "if t1 less than t2 is a valid expression if you can do that okay so I can now",
    "start": "2802319",
    "end": "2807779"
  },
  {
    "text": "take my ordered and say house operator less than so instead of template type name its template has operator less then",
    "start": "2807779",
    "end": "2814699"
  },
  {
    "text": "and that then should allow you only to put in to this one things that have an",
    "start": "2814699",
    "end": "2820169"
  },
  {
    "text": "operator less then so let's actually try it class year public ordered year damn this doesn't",
    "start": "2820169",
    "end": "2826289"
  },
  {
    "text": "compile and the reason it doesn't compile is because ordered EUR ordered",
    "start": "2826289",
    "end": "2832410"
  },
  {
    "text": "is looking for something says well I don't know what's in year so I don't know whether it can satisfy this so I've",
    "start": "2832410",
    "end": "2837719"
  },
  {
    "text": "got although I can use CRT P with inheritance and things I can't use it with concepts which is annoying and then",
    "start": "2837719",
    "end": "2845459"
  },
  {
    "text": "I add a scratch on my head and said well how else could we do this one so this does actually work so I've tried this on",
    "start": "2845459",
    "end": "2851069"
  },
  {
    "text": "GCC same concept but notice instead of having a constrained template argument",
    "start": "2851069",
    "end": "2858630"
  },
  {
    "text": "like that I've had before type name I've now put a requires Clause afterwards if",
    "start": "2858630",
    "end": "2864329"
  },
  {
    "text": "you've seen c-sharp c-sharp has a request Clause similar to that so my operator greater than you can only pass",
    "start": "2864329",
    "end": "2869789"
  },
  {
    "text": "in something that says House operator less than derived now that works so one",
    "start": "2869789",
    "end": "2878249"
  },
  {
    "text": "of the reasons for doing this is we think actually yes this we can we have some fun with this let's try it let's",
    "start": "2878249",
    "end": "2884729"
  },
  {
    "text": "see what the error messages might look like so here are the error messages without concepts so I have my struct X",
    "start": "2884729",
    "end": "2892019"
  },
  {
    "start": "2885000",
    "end": "2917000"
  },
  {
    "text": "ordered like that and then I try to call operator greater than when X obviously clearly does not have an operator less",
    "start": "2892019",
    "end": "2897419"
  },
  {
    "text": "than so this particular thing says well required from here no match for operator",
    "start": "2897419",
    "end": "2902969"
  },
  {
    "text": "less than in this and it's one of those confusing messages you look and said I",
    "start": "2902969",
    "end": "2908939"
  },
  {
    "text": "was calling went to greater than why is it saying operator less than so that's",
    "start": "2908939",
    "end": "2914400"
  },
  {
    "text": "one of the problems you get if you try to do this with concept on the other hand it says ah look operator greater",
    "start": "2914400",
    "end": "2922349"
  },
  {
    "start": "2917000",
    "end": "2973000"
  },
  {
    "text": "than can't do that one because does not have operator less than blah blah blah here and this expression at the bottom T",
    "start": "2922349",
    "end": "2928409"
  },
  {
    "text": "1 less than T 2 would be ill-formed it's a longer message but it's least pointing in the direction says where those things",
    "start": "2928409",
    "end": "2935249"
  },
  {
    "text": "are I mix affecting that the compilers will get better at these messages I'm hoping because that's not particularly nice",
    "start": "2935249",
    "end": "2941540"
  },
  {
    "text": "let's see what the fixed string thing might look like if I try to call out to",
    "start": "2941540",
    "end": "2947849"
  },
  {
    "text": "something that doesn't have overflow on it so the top one there is without the",
    "start": "2947849",
    "end": "2953339"
  },
  {
    "text": "concepts and I try to call this one fixed straying for 4x and it says no",
    "start": "2953339",
    "end": "2959880"
  },
  {
    "text": "overflow like this this with a concept it says oh that X can't do that one",
    "start": "2959880",
    "end": "2965069"
  },
  {
    "text": "because it hasn't got overflow because overflow blah blah blah would be ill-formed so at least it points in the",
    "start": "2965069",
    "end": "2970589"
  },
  {
    "text": "right direction so a summary of this one essentially",
    "start": "2970589",
    "end": "2978100"
  },
  {
    "start": "2973000",
    "end": "3031000"
  },
  {
    "text": "we're providing lightweight abstractions that allow us to control what we do that",
    "start": "2978100",
    "end": "2985540"
  },
  {
    "text": "allow us to write safer code that allow us to have the compiler do more checking for us and allow us to put more domain",
    "start": "2985540",
    "end": "2993400"
  },
  {
    "text": "knowledge into our code and have it checked and if you're doing anything that requires safety anything requires",
    "start": "2993400",
    "end": "3000390"
  },
  {
    "text": "correct answers this has advantages it has zero or small runtime overhead",
    "start": "3000390",
    "end": "3007400"
  },
  {
    "text": "usually zero in terms of CPU or memory the use of these ones so there's zero or",
    "start": "3007400",
    "end": "3014760"
  },
  {
    "text": "little overhead to the developer for this once you have those libraries in",
    "start": "3014760",
    "end": "3020850"
  },
  {
    "text": "place and allows you to create those ones and I don't promise that everything will turn into just a single instruction",
    "start": "3020850",
    "end": "3028130"
  },
  {
    "text": "okay any questions about that",
    "start": "3028640",
    "end": "3033020"
  }
]