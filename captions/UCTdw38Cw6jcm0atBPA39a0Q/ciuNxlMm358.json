[
  {
    "text": "alright then so welcome everybody welcome to my talk",
    "start": "10460",
    "end": "15930"
  },
  {
    "text": "attending my name is Sergio Youssef and this is the first time I'm speaking at",
    "start": "15930",
    "end": "20960"
  },
  {
    "text": "had NDC and really glad to be here guys",
    "start": "20960",
    "end": "26150"
  },
  {
    "text": "I'm from at Lawson but not based in Australia I'm actually based in the",
    "start": "26150",
    "end": "32520"
  },
  {
    "text": "Turkish office a lot of people didn't know that right yes the closet that have a office in a nun Carter key it is a",
    "start": "32520",
    "end": "39870"
  },
  {
    "text": "long flight here so thank you so much for having me guys well my talk is about you know call",
    "start": "39870",
    "end": "48510"
  },
  {
    "text": "starts and the dotnet environment just a bit of a warning I'm not a dotnet expert alright so but my passion does lie in",
    "start": "48510",
    "end": "56130"
  },
  {
    "text": "the cloud especially in service technologies I started off my career in service monitoring and that's where I realized",
    "start": "56130",
    "end": "63690"
  },
  {
    "text": "that we have a huge deficiency for at least the dotnet platform when it comes",
    "start": "63690",
    "end": "69869"
  },
  {
    "text": "to service functions right and that's that's what's the motivation for me to",
    "start": "69869",
    "end": "75360"
  },
  {
    "text": "come up with this talk right and you",
    "start": "75360",
    "end": "82740"
  },
  {
    "text": "know going through the agenda will go through just a quick show of hands how",
    "start": "82740",
    "end": "87869"
  },
  {
    "text": "many of you guys have our building in service or any service functions lambdas your Hey",
    "start": "87869",
    "end": "93420"
  },
  {
    "text": "all right that's good all right most of the room how many of you guys use AWS lambda all right it's like and other",
    "start": "93420",
    "end": "102420"
  },
  {
    "text": "your functions all right that's pretty cool yeah so again just to cook",
    "start": "102420",
    "end": "111890"
  },
  {
    "text": "previewed most of this talk is a towards AWS lambda because of genii the tool a",
    "start": "111890",
    "end": "120900"
  },
  {
    "text": "tool in a classroom where where I work it's built fully on an AWS tag but the",
    "start": "120900",
    "end": "127650"
  },
  {
    "text": "talk will cover both your functions and AWS lambda but slightly oriented towards",
    "start": "127650",
    "end": "133950"
  },
  {
    "text": "the aid of your staff not because they deputies lambda is better for dotnet functions as compared to your that's a whole other debate that we can have",
    "start": "133950",
    "end": "139260"
  },
  {
    "text": "later on right yeah that's you know out of pure experience and pure practical",
    "start": "139260",
    "end": "144419"
  },
  {
    "text": "experience that I've had right so and that's what that's what I want to present to you guys the experience that I've had so we'll start",
    "start": "144419",
    "end": "150349"
  },
  {
    "text": "with like what cost arts are what we're due at actually originated from you know we all have some vague idea what a cost",
    "start": "150349",
    "end": "156890"
  },
  {
    "text": "art is but let's actually go into the depth of where it actually comes from why it is actually an inherent problem",
    "start": "156890",
    "end": "162349"
  },
  {
    "text": "of service functions you know we will dive deep into the problems associated specifically with dotnet functions you",
    "start": "162349",
    "end": "169670"
  },
  {
    "text": "know we'll go to through the solutions specifically tailored for dotnet functions again I mean there are a lot",
    "start": "169670",
    "end": "176030"
  },
  {
    "text": "of solutions and there's a lot of discussion about how to reduce cost arts and stuff like that but like let's look",
    "start": "176030",
    "end": "181069"
  },
  {
    "text": "at the one specifically for dotnet function because dotnet itself is a very unique runtime as compared to the other",
    "start": "181069",
    "end": "187340"
  },
  {
    "text": "you know conventional runtimes used in service functions and we'll also look at where we stand right now you know and",
    "start": "187340",
    "end": "194810"
  },
  {
    "text": "what we can expect in the future right so I mean what why are we here",
    "start": "194810",
    "end": "202639"
  },
  {
    "text": "like you know why did I have to come that you take a 15 hour flight just to come here and I can tell you guys about you know co-star problems for dotnet",
    "start": "202639",
    "end": "210400"
  },
  {
    "text": "functions in service well the truth is that you know service is the hot word",
    "start": "210400",
    "end": "216799"
  },
  {
    "text": "rightness the buzzword right now and it's rising in popularity right so for",
    "start": "216799",
    "end": "222260"
  },
  {
    "text": "example let me just see if I can get my speaker notes up here yeah so you know",
    "start": "222260",
    "end": "233120"
  },
  {
    "text": "we see a rise in service over the over the few years and according to the right",
    "start": "233120",
    "end": "239449"
  },
  {
    "text": "scale 2018 state of cloud report we see a 35 percent growth rate in the usage of",
    "start": "239449",
    "end": "246650"
  },
  {
    "text": "service so we see some of this on the rise and the major reason why you know service has become such a buzzword is",
    "start": "246650",
    "end": "253340"
  },
  {
    "text": "because the promises that it's it's offering you know and most and we are",
    "start": "253340",
    "end": "258889"
  },
  {
    "text": "probably all aware of this you know abstract away huge parts of you know your underlying architecture and app and",
    "start": "258889",
    "end": "264949"
  },
  {
    "text": "give that responsibility to the cloud vendor get up and running with your business logic immediately you know no",
    "start": "264949",
    "end": "271909"
  },
  {
    "text": "you no longer have to worry about the traditional problem that container has",
    "start": "271909",
    "end": "276950"
  },
  {
    "text": "had and you know now you have like these can this container versus Everest Wars going on you know we're services saying oh you don't need",
    "start": "276950",
    "end": "283699"
  },
  {
    "text": "to worry about you know container orchestration or networking and all of that now being managed by your cloud",
    "start": "283699",
    "end": "290419"
  },
  {
    "text": "vendor and all you need to worry about is the business logic this is great for startup sets but especially startup this",
    "start": "290419",
    "end": "296899"
  },
  {
    "text": "is great for large enterprise this is because I because you know now we don't need to invest so much resources a lot",
    "start": "296899",
    "end": "303829"
  },
  {
    "text": "of so much engineering effort into our you know into building our",
    "start": "303829",
    "end": "310549"
  },
  {
    "text": "infrastructure our supporting infrastructure for our you know business logic alright and what this helps us is",
    "start": "310549",
    "end": "317629"
  },
  {
    "text": "it it helps us become agile you know when we speak when we talk about agility",
    "start": "317629",
    "end": "322909"
  },
  {
    "text": "we often talk about you know how quickly we can get from the from once from the",
    "start": "322909",
    "end": "332089"
  },
  {
    "text": "point that an idea is conceived to its release and getting that idea into the",
    "start": "332089",
    "end": "338479"
  },
  {
    "text": "hands of the user right so what we see is with service especially with lambda",
    "start": "338479",
    "end": "346369"
  },
  {
    "text": "functions of your functions you know we see you know great benefits such as auto scaling you know you no longer have to",
    "start": "346369",
    "end": "352399"
  },
  {
    "text": "worry about scalability if you have high traffic it scaled to high traffic if you have nobody coming to your site or",
    "start": "352399",
    "end": "358279"
  },
  {
    "text": "nobody using your product you don't have to pay for the resources over there so that's the pay-as-you-go model that's",
    "start": "358279",
    "end": "363800"
  },
  {
    "text": "another great feature of our service that's that's something that really entices startups to take up the",
    "start": "363800",
    "end": "368839"
  },
  {
    "text": "technology you know we have you know again as I mentioned before it's just",
    "start": "368839",
    "end": "374569"
  },
  {
    "text": "easy to set up and easy to use and for example I graduated very recently from",
    "start": "374569",
    "end": "379599"
  },
  {
    "text": "university just last year and you know this you know I joined a company and",
    "start": "379599",
    "end": "385429"
  },
  {
    "text": "they threw a lambda function me and I just got up and running was the lambda function it wasn't that difficult when I",
    "start": "385429",
    "end": "390769"
  },
  {
    "text": "started using containers you know there was a steep learning curve for me to get over you know especially when you start",
    "start": "390769",
    "end": "396289"
  },
  {
    "text": "talking about communities that's a really you know lean steep learning curve all right so it's not so that's",
    "start": "396289",
    "end": "402709"
  },
  {
    "text": "one of the great advantages right and also because so you know it's it's the",
    "start": "402709",
    "end": "409189"
  },
  {
    "text": "pay-as-you-go model allows us to be flexible in the way we can you know",
    "start": "409189",
    "end": "414279"
  },
  {
    "text": "acquire these sources so we can use a lambda function",
    "start": "414279",
    "end": "419689"
  },
  {
    "text": "or a zero function and use it for testing to test out how our idea is",
    "start": "419689",
    "end": "426099"
  },
  {
    "text": "received in the market if you don't like it simply tear it down you know rewrite your business logic and",
    "start": "426099",
    "end": "432529"
  },
  {
    "text": "then put it up again so it really allows us to I trade much quicker right and that's that really does promote",
    "start": "432529",
    "end": "438709"
  },
  {
    "text": "agility so it lets you to experiment more there's more experimentation now",
    "start": "438709",
    "end": "444259"
  },
  {
    "text": "right that's compared to like setting you know provisioning a container having to tear it down paying for that",
    "start": "444259",
    "end": "450259"
  },
  {
    "text": "container it was a bad idea oh my god we fell flat on our faces we have to do it all over again right and",
    "start": "450259",
    "end": "456369"
  },
  {
    "text": "this is this is exactly what I'm talking about you know you have let your infrastructure the service which is",
    "start": "456369",
    "end": "462860"
  },
  {
    "text": "generally your ec2 instances your containers and just in general right and you have to manage you know everything",
    "start": "462860",
    "end": "470419"
  },
  {
    "text": "associated to your container you have to I mean yes you although your operating system and your visualization and your",
    "start": "470419",
    "end": "476360"
  },
  {
    "text": "hardware all of that responsibility has been abstracted away to the vendor that's great you know that was that we",
    "start": "476360",
    "end": "482509"
  },
  {
    "text": "start seeing these benefits of moving to the cloud and there's been a lot of talk about you know what the cloud provides",
    "start": "482509",
    "end": "488419"
  },
  {
    "text": "right but then we wanted more you know we were greedy and so we came up with",
    "start": "488419",
    "end": "495319"
  },
  {
    "text": "containers as a service and AWS for gated one of the more recent services in",
    "start": "495319",
    "end": "502249"
  },
  {
    "text": "the in the cloud ecosystem which allows you to get up and running with containers right you know so you you",
    "start": "502249",
    "end": "511069"
  },
  {
    "text": "already have your networking set up you know for example aw sprocket comes this is already set up eni networking",
    "start": "511069",
    "end": "518018"
  },
  {
    "text": "capabilities and then you have you and then at the end of the spectrum you have your function of the service which is your traditional service functions your",
    "start": "518019",
    "end": "525439"
  },
  {
    "text": "a rate of just lambda your is your functions and and that has most of the",
    "start": "525439",
    "end": "530829"
  },
  {
    "text": "you know responsibilities abstracted away so you just focus on your application your functions up and",
    "start": "530829",
    "end": "537110"
  },
  {
    "text": "running there you go and what that means is that you know it's a you know it's not your job anymore you can lift you",
    "start": "537110",
    "end": "543259"
  },
  {
    "text": "just take say yeah that's not my job I don't need to worry about this you know I'm done I'm done I got I got my code up and",
    "start": "543259",
    "end": "548630"
  },
  {
    "text": "running and then you know so that's just basically the motivation over here you",
    "start": "548630",
    "end": "554000"
  },
  {
    "text": "know people are moving towards things that are easier you know people that",
    "start": "554000",
    "end": "559759"
  },
  {
    "text": "obviously going to take up things that are easier and you know lambda functions and the zero function that service Google Cloud functions are are is this",
    "start": "559759",
    "end": "567889"
  },
  {
    "text": "easier option right but it's not the",
    "start": "567889",
    "end": "576560"
  },
  {
    "text": "same for everybody you know we have also discussed about the limitations that the",
    "start": "576560",
    "end": "582470"
  },
  {
    "text": "service environment has right and one of these limitations is call starts what",
    "start": "582470",
    "end": "587750"
  },
  {
    "text": "we're all here to talk about right and so just a quick story in my first job I",
    "start": "587750",
    "end": "595220"
  },
  {
    "text": "was working in a company called tundra dial before I join Atlassian and we were doing service monitoring and what and",
    "start": "595220",
    "end": "601940"
  },
  {
    "text": "one of my tasks over there was to create the dotnet agent I was working with a",
    "start": "601940",
    "end": "607220"
  },
  {
    "text": "brilliant engineer called called a brain and back in the office and what we",
    "start": "607220",
    "end": "613220"
  },
  {
    "text": "noticed was when we were building our dotnet agent and we were monitoring our when we started the initial prototypes",
    "start": "613220",
    "end": "620329"
  },
  {
    "text": "of our net agent trying to monitor dotnet functions we saw that coal starts",
    "start": "620329",
    "end": "626620"
  },
  {
    "text": "in the dotnet environment were much higher than we received then we then we",
    "start": "626620",
    "end": "632959"
  },
  {
    "text": "were used to and we were wondering it like is our dotnet agent is the dot arrangement that we built a faulty are",
    "start": "632959",
    "end": "640730"
  },
  {
    "text": "we measuring Co starts wrong and I dug a little into this and I came across a",
    "start": "640730",
    "end": "646069"
  },
  {
    "text": "great writing a piece a great piece by mikhail sholokhov who is who is who",
    "start": "646069",
    "end": "654920"
  },
  {
    "text": "traditionally looks into coal starts in the service world and what we found",
    "start": "654920",
    "end": "661029"
  },
  {
    "text": "through sang-soo show called results was that dotnet or you know c-sharp",
    "start": "661029",
    "end": "669079"
  },
  {
    "text": "functions in general have you know tremendously high cold start you know",
    "start": "669079",
    "end": "677110"
  },
  {
    "text": "co-star durations and this isn't only in it obvious lambda but across almost all cloud vendors",
    "start": "677110",
    "end": "684950"
  },
  {
    "text": "right so in shock of the results we saw even this is your a and L obvious we saw",
    "start": "684950",
    "end": "693800"
  },
  {
    "text": "that we have really high cost arts right which is and when you think of it like",
    "start": "693800",
    "end": "700130"
  },
  {
    "text": "oh maybe it's because it's a static language no well you see it will for Java you see you don't see you don't have that problem that's what we see",
    "start": "700130",
    "end": "706130"
  },
  {
    "text": "right so shows really got me he's thinking like why is this so you know",
    "start": "706130",
    "end": "712250"
  },
  {
    "text": "what is the problem over here and why I have why aren't we addressing this why",
    "start": "712250",
    "end": "718070"
  },
  {
    "text": "didn't the community addressing this and that was the motivation for this talk the motivation was is service for dotnet",
    "start": "718070",
    "end": "725440"
  },
  {
    "text": "right can we use service technologies for dotnet I mean we've talked about the",
    "start": "725440",
    "end": "730790"
  },
  {
    "text": "benefits of service but can dot the dotnet community now you know benefit",
    "start": "730790",
    "end": "736550"
  },
  {
    "text": "from these advantages that service brings right and because you know if the",
    "start": "736550",
    "end": "746300"
  },
  {
    "text": "world is moving towards service right I mean yes that is also up for debate container the rest of service but it",
    "start": "746300",
    "end": "752330"
  },
  {
    "text": "let's say if the world is moving towards service is the dotnet community going to be left out right and you know service",
    "start": "752330",
    "end": "761600"
  },
  {
    "text": "functions and the way we need to think of it this is like why aren't people looking into this you know and the major",
    "start": "761600",
    "end": "768830"
  },
  {
    "text": "reason is because dotnet is just not one of the more more popular languages when",
    "start": "768830",
    "end": "776150"
  },
  {
    "text": "building your service applications by according to the report done by the",
    "start": "776150",
    "end": "784250"
  },
  {
    "text": "service framework in 2018 we saw that 70% of services deployed were built in",
    "start": "784250",
    "end": "792230"
  },
  {
    "text": "node.js and the reason for this is that when you think of service applications use mostly think of a synchronous",
    "start": "792230",
    "end": "798910"
  },
  {
    "text": "operations and when you think of a synchronous operations you mostly you know think of nodejs even though you can",
    "start": "798910",
    "end": "806300"
  },
  {
    "text": "achieve a synchronous tasks you know in all you know languages and what you",
    "start": "806300",
    "end": "813890"
  },
  {
    "text": "mostly think of No right and that's why you would see like almost about 70% of services being built",
    "start": "813890",
    "end": "823100"
  },
  {
    "text": "in node.js and that is a common know that is common knowledge I'm like we we all need this the reason why I put this",
    "start": "823100",
    "end": "829160"
  },
  {
    "text": "statistic up is so that we know the exact statistic and we can prove that yes what we believe that nodejs is the",
    "start": "829160",
    "end": "835520"
  },
  {
    "text": "most common language for service applications is true and this is the statistic right and but how can we",
    "start": "835520",
    "end": "844100"
  },
  {
    "text": "expect other languages to come up well at the moment when we talk about dotnet",
    "start": "844100",
    "end": "851000"
  },
  {
    "text": "core not really not really we still see that dotnet core is trailing behind right we see that Python 3.6 is one of",
    "start": "851000",
    "end": "859700"
  },
  {
    "text": "the fastest growing languages when it comes in in popularity but dotnet for",
    "start": "859700",
    "end": "864980"
  },
  {
    "text": "dotnet core unfortunately we can't say the same thing right how many of you guys you know work in dotnet I'm",
    "start": "864980",
    "end": "872839"
  },
  {
    "text": "guessing almost all of you because you all came for today's talk right like hey so yeah so this is this is you know this",
    "start": "872839",
    "end": "880700"
  },
  {
    "text": "is something that we should be concerned about you know can we can we start working with service functions when they",
    "start": "880700",
    "end": "887720"
  },
  {
    "text": "finally do improve and when they finally do become mainstream right so let's talk",
    "start": "887720",
    "end": "892760"
  },
  {
    "text": "about the problem over here you know let's talk about what the core start is you know and where does it originate",
    "start": "892760",
    "end": "898459"
  },
  {
    "text": "from well did you know that like let's talk about the value of service so like",
    "start": "898459",
    "end": "904190"
  },
  {
    "text": "in the beginning I said that you know you get the concept of services that is",
    "start": "904190",
    "end": "909230"
  },
  {
    "text": "the pay-as-you-go model which is based on you have resources provision to you",
    "start": "909230",
    "end": "914720"
  },
  {
    "text": "you have resources allocated to you when you need them when you don't need them they're no longer allocated to you and",
    "start": "914720",
    "end": "920060"
  },
  {
    "text": "therefore you don't need to pay for them right so how does that work how does how",
    "start": "920060",
    "end": "926060"
  },
  {
    "text": "do we get that it's you choose an ephemeral containers so what does that",
    "start": "926060",
    "end": "931970"
  },
  {
    "text": "mean like in the case of AWS lambda specifically it's oaw lambda and even",
    "start": "931970",
    "end": "939020"
  },
  {
    "text": "Fargate a table for gate is are built on a technology called firecracker how any of you guys have heard of firecracker",
    "start": "939020",
    "end": "945230"
  },
  {
    "text": "before yeah one guy that's cool I'm going to talk to you after this talk yeah so it's built on firecracker",
    "start": "945230",
    "end": "951550"
  },
  {
    "text": "and the way it works is that when you know just the gist of it is that firecracker provisions your containers",
    "start": "951550",
    "end": "957430"
  },
  {
    "text": "when you need it and tear them down when you don't need them right but what what that means is that if you're not using",
    "start": "957430",
    "end": "962770"
  },
  {
    "text": "them they're going to stay for a while and then they're gonna get torn down and",
    "start": "962770",
    "end": "967900"
  },
  {
    "text": "you know allocated to somebody else who's using them and that's the inherent",
    "start": "967900",
    "end": "973480"
  },
  {
    "text": "problem right so when you do need them again right your continuing needs to",
    "start": "973480",
    "end": "979720"
  },
  {
    "text": "start up again and that's where the co star originates from so your core your continued needs to start up again and",
    "start": "979720",
    "end": "985330"
  },
  {
    "text": "your container starting up means that so this is a slide from AWS an AWS talk",
    "start": "985330",
    "end": "994320"
  },
  {
    "text": "where so with defining what you know the container start up for service functions",
    "start": "994320",
    "end": "999790"
  },
  {
    "text": "so when you continue the start of it it has to take all your code it has an especially in in the for in a regarding",
    "start": "999790",
    "end": "1006710"
  },
  {
    "text": "dotnet functions it has to you know set up your static components you know the",
    "start": "1006710",
    "end": "1013560"
  },
  {
    "text": "static variables and objects and it basically builds your environment right",
    "start": "1013560",
    "end": "1020330"
  },
  {
    "text": "and then it's it ensures that the runtime is all up and running and then it finally just starts your code right",
    "start": "1020330",
    "end": "1027209"
  },
  {
    "text": "so as you can see all the way from that process still here you have your experiencing call start and then you",
    "start": "1027209",
    "end": "1033329"
  },
  {
    "text": "finally you know get your business logic up and running and you finally get your engine you finally start your business",
    "start": "1033329",
    "end": "1038938"
  },
  {
    "text": "logic starts executing right and if you and as people may be familiar we said",
    "start": "1038939",
    "end": "1046860"
  },
  {
    "text": "like when if you keep on pinging your function it will all be in a warm state",
    "start": "1046860",
    "end": "1054300"
  },
  {
    "text": "because you know you're still using it so it won't be torn down but if you don't use it for a certain period of for",
    "start": "1054300",
    "end": "1059970"
  },
  {
    "text": "a certain amount of time it will be torn down and and if you again invoke it again you'll experience the call start",
    "start": "1059970",
    "end": "1066390"
  },
  {
    "text": "now that's the problem you know you do not know when your container will actually be torn down there's no way of",
    "start": "1066390",
    "end": "1073370"
  },
  {
    "text": "you know gauging how long will it take for of inactivity how much inactivity",
    "start": "1073370",
    "end": "1080310"
  },
  {
    "text": "will lead to your container ringtone down and then leading to a call start the next invocation and the reason for",
    "start": "1080310",
    "end": "1087280"
  },
  {
    "text": "this is because you know so much of the underlying architecture is abstracted away to the cloud vendor is that you",
    "start": "1087280",
    "end": "1093610"
  },
  {
    "text": "don't really know what's going on you know underneath you just know that there's a function and and you know and",
    "start": "1093610",
    "end": "1099460"
  },
  {
    "text": "that's technically the concept you just you just need to know about the function you just use it I mean you don't need to worry about the underlying architecture",
    "start": "1099460",
    "end": "1104590"
  },
  {
    "text": "but if you don't longer need to worry about the underlying architecture you no longer know what's going on in the",
    "start": "1104590",
    "end": "1109660"
  },
  {
    "text": "underlying architecture so you can't monitor and that's and that's a huge problem you know and everybody's",
    "start": "1109660",
    "end": "1115690"
  },
  {
    "text": "probably aware of this mantra in service it's just dreadful you know they could it's it's hell you know a viewer has",
    "start": "1115690",
    "end": "1125950"
  },
  {
    "text": "actually has actually very good monitoring capabilities I personally believe so that's my personal opinion",
    "start": "1125950",
    "end": "1132010"
  },
  {
    "text": "you know I don't want to start off any you know lawsuits or anything against me but like my personal belief is you had",
    "start": "1132010",
    "end": "1137710"
  },
  {
    "text": "really good monitoring capabilities as compared to AWS Amazon x-ray which is a",
    "start": "1137710",
    "end": "1143130"
  },
  {
    "text": "four lambda monitoring I believe that zero is better in this but overall when it comes to you know",
    "start": "1143130",
    "end": "1151570"
  },
  {
    "text": "monitoring your functions as a service it's hell right so at the end of the day",
    "start": "1151570",
    "end": "1161470"
  },
  {
    "text": "because we can't gauge when our containers will die we can't expect when",
    "start": "1161470",
    "end": "1167380"
  },
  {
    "text": "- when we will be experiencing cold starts right and this is a and this is",
    "start": "1167380",
    "end": "1173740"
  },
  {
    "text": "just a short video that I recorded like so we were monitoring you know cold",
    "start": "1173740",
    "end": "1179050"
  },
  {
    "text": "starts over here and as you can see like Oh starts a pretty random over here we",
    "start": "1179050",
    "end": "1184450"
  },
  {
    "text": "have to call stops so these blue lines are our call so this is a very simple lambda function by the way this is a",
    "start": "1184450",
    "end": "1190450"
  },
  {
    "text": "simple hello world in dotnet yeah so we we basically can't predict when we'll",
    "start": "1190450",
    "end": "1198910"
  },
  {
    "text": "get a call start and as you can see this reflects our invocation duration time",
    "start": "1198910",
    "end": "1205680"
  },
  {
    "text": "and that's a huge problem especially when you have when you're trying to build business applications that are",
    "start": "1205680",
    "end": "1210850"
  },
  {
    "text": "time sensitive especially when you're building business applications that a customer facing and are you know",
    "start": "1210850",
    "end": "1216700"
  },
  {
    "text": "sensitive to you know response right let's say you're building a ticketing",
    "start": "1216700",
    "end": "1222640"
  },
  {
    "text": "system and you have high traffic and people are all trying to build you know buy a ticket if somebody experiences a",
    "start": "1222640",
    "end": "1228730"
  },
  {
    "text": "call start that that customer is that a disadvantage as somebody who is being",
    "start": "1228730",
    "end": "1233980"
  },
  {
    "text": "serviced by a function that is already warm so that customer who is being serviced by a function that is",
    "start": "1233980",
    "end": "1240100"
  },
  {
    "text": "experiencing cold start will probably not be able to purchase a ticket as fast as somebody who is being serviced by a",
    "start": "1240100",
    "end": "1247330"
  },
  {
    "text": "function that is already warm and all of a sudden you have bad customer experience and you know you have bad",
    "start": "1247330",
    "end": "1252730"
  },
  {
    "text": "reviews and at the end of the day you know your your application is at a loss",
    "start": "1252730",
    "end": "1258670"
  },
  {
    "text": "over here right and now imagine you're your compete your competitor is is using",
    "start": "1258670",
    "end": "1265500"
  },
  {
    "text": "runtime that isn't dotnet and and is it and has an advantage of lower cost are",
    "start": "1265500",
    "end": "1271690"
  },
  {
    "text": "durations his user experiences you know it just becomes better right and so",
    "start": "1271690",
    "end": "1277810"
  },
  {
    "text": "anybody developing in dotnet is at a disadvantage over here all right so",
    "start": "1277810",
    "end": "1283180"
  },
  {
    "text": "that's uh that's and that's what cold starts can lead to they're very scary it's a very scary problem and it's a",
    "start": "1283180",
    "end": "1289060"
  },
  {
    "text": "problem that needs to be addressed all right and the question then also becomes okay so everybody is experiencing cold",
    "start": "1289060",
    "end": "1296860"
  },
  {
    "text": "starts Java developers Python developers everybody is experiencing code the cold start problem but why is it a problem",
    "start": "1296860",
    "end": "1303250"
  },
  {
    "text": "it's profound for dotnet developers or in the.net environment the.net community",
    "start": "1303250",
    "end": "1310090"
  },
  {
    "text": "and so this this is all so let's let's explore this let's get to the root of the problem you know there are many",
    "start": "1310090",
    "end": "1316150"
  },
  {
    "text": "theories around this many people say that oh it's because you know it's a statically typed language you know so",
    "start": "1316150",
    "end": "1322450"
  },
  {
    "text": "they're Cerreta Klee so basically when you're setting up your container you know during the container setup in that",
    "start": "1322450",
    "end": "1328330"
  },
  {
    "text": "graph that we in the in the in the graph that we saw earlier of the function life cycle I and when we were we were",
    "start": "1328330",
    "end": "1334930"
  },
  {
    "text": "visualizing the co-star and the warm invocation of the container we saw you know because we have to set up you know",
    "start": "1334930",
    "end": "1343870"
  },
  {
    "text": "our our static variables and we have to load them into",
    "start": "1343870",
    "end": "1349360"
  },
  {
    "text": "into the application context you experience longer code but we don't see",
    "start": "1349360",
    "end": "1354580"
  },
  {
    "text": "that right I mean that that theory is just proven because it WS for in AWS you",
    "start": "1354580",
    "end": "1361750"
  },
  {
    "text": "know your the Java Runtime runs pretty well in fact sometimes it runs better than pison right so you don't really see",
    "start": "1361750",
    "end": "1367930"
  },
  {
    "text": "that so Java disproves that hypothesis and you know well then what",
    "start": "1367930",
    "end": "1375010"
  },
  {
    "text": "what could the reason be is it is it all just a conspiracy theory you know many people I've had the discussion with a",
    "start": "1375010",
    "end": "1381280"
  },
  {
    "text": "lot of people and you know a lot of people say that oh it's because you know there's not a lot of you know the the",
    "start": "1381280",
    "end": "1389140"
  },
  {
    "text": "the market for dotnet in the service environment isn't as large as Java or",
    "start": "1389140",
    "end": "1395980"
  },
  {
    "text": "nodejs so obviously the engineers and the product managers and you know the",
    "start": "1395980",
    "end": "1401590"
  },
  {
    "text": "evil product managers I'm a product manager myself by the way you know I'd like we are always you know blamed for",
    "start": "1401590",
    "end": "1408490"
  },
  {
    "text": "just thinking about the market value of a product but I believe that's not really true you know people say that",
    "start": "1408490",
    "end": "1414550"
  },
  {
    "text": "obviously the product managers or whoever who made this decision you know decide to focus more on the other",
    "start": "1414550",
    "end": "1420100"
  },
  {
    "text": "runtimes then dotnet I don't really that's true the reason is because you know the cloud the cloud industry is a",
    "start": "1420100",
    "end": "1426790"
  },
  {
    "text": "very competitive industry it's it is a very competitive industry and and we're",
    "start": "1426790",
    "end": "1432640"
  },
  {
    "text": "probably all aware of that of the great cloud wars writer the the three great Giants you know Google you know Amazon",
    "start": "1432640",
    "end": "1441550"
  },
  {
    "text": "and Microsoft you know we we have that right so in this great in this",
    "start": "1441550",
    "end": "1449290"
  },
  {
    "text": "competitive environment we wouldn't expect people to lay off and like you know like you know become lazy about a",
    "start": "1449290",
    "end": "1455590"
  },
  {
    "text": "certain feature right because once you become lazy about it you expect your",
    "start": "1455590",
    "end": "1461380"
  },
  {
    "text": "competitors just gonna go ahead of you especially in this environment so no it's not because they're bad dotnet",
    "start": "1461380",
    "end": "1467230"
  },
  {
    "text": "compilers I don't agree with that and that's just a stupid theory all right it's I believe and again the going",
    "start": "1467230",
    "end": "1473740"
  },
  {
    "text": "through you know again the talking to a lot of people in the community and running a lot of experiments I really",
    "start": "1473740",
    "end": "1480670"
  },
  {
    "text": "believe is just you know the Assembly's right that really puts a lot of stress on the start-up of an",
    "start": "1480670",
    "end": "1485750"
  },
  {
    "text": "ephemeral containers right it's because and this is this is actually where the problem really lies right and if this is",
    "start": "1485750",
    "end": "1494390"
  },
  {
    "text": "where the problem lies and I I've done a lot of experiments on this which we will see later on this is actually one of the",
    "start": "1494390",
    "end": "1501440"
  },
  {
    "text": "major problems right and it really does depend on the number and size of your assembly files right and your library",
    "start": "1501440",
    "end": "1508310"
  },
  {
    "text": "that you're using you know at the end of the day the dll that you have at the end of the day really doesn't matter the size of that really does matter and I",
    "start": "1508310",
    "end": "1515120"
  },
  {
    "text": "mean you you would think that you know that is that is obviously you know that is the obvious case right and and but",
    "start": "1515120",
    "end": "1526520"
  },
  {
    "text": "it's not it's not it's not obvious to a lot of people when they start off in this right so now we need to think about",
    "start": "1526520",
    "end": "1534170"
  },
  {
    "text": "how we develop our dotnet applications in the service environment and how we",
    "start": "1534170",
    "end": "1539480"
  },
  {
    "text": "facilitate this you know how we go around this problem you know so let's",
    "start": "1539480",
    "end": "1545690"
  },
  {
    "text": "talk about the solutions now you know how do we minimize co-star durations and only call saturations let's also talk",
    "start": "1545690",
    "end": "1551240"
  },
  {
    "text": "about like how do we minimize co-starred frequencies how do we all make sure that when a customer comes in our function",
    "start": "1551240",
    "end": "1558530"
  },
  {
    "text": "will be warm right so before we go into",
    "start": "1558530",
    "end": "1563890"
  },
  {
    "text": "before we dive into the solutions let's talk about the life cycle of a service",
    "start": "1563890",
    "end": "1572090"
  },
  {
    "text": "function right so you know when you were building your function you'll probably be authoring code right you'll probably",
    "start": "1572090",
    "end": "1578900"
  },
  {
    "text": "you then upload and you know create your function you allocate resources to your function in your cloud environment and",
    "start": "1578900",
    "end": "1584930"
  },
  {
    "text": "then you perform one string and troubleshooting depending on you know your functions right so a quote let's",
    "start": "1584930",
    "end": "1595460"
  },
  {
    "text": "let's talk let's think about solutions throughout this entire process all right",
    "start": "1595460",
    "end": "1601250"
  },
  {
    "text": "from each stage the each stage that you're developing your function we have",
    "start": "1601250",
    "end": "1606410"
  },
  {
    "text": "to continue we have to constantly keep in mind that there is that evil call start that's out there to catch us right",
    "start": "1606410",
    "end": "1613040"
  },
  {
    "text": "and we need to figure out how we can reduce the possibilities of cold starts creeping up in each stage of our",
    "start": "1613040",
    "end": "1619640"
  },
  {
    "text": "development right so if we started with the most basic and most you know simple",
    "start": "1619640",
    "end": "1627680"
  },
  {
    "text": "solution it's simply how we're writing our functions right short story just",
    "start": "1627680",
    "end": "1634280"
  },
  {
    "text": "don't use static variables just don't use them I mean obviously that's not the",
    "start": "1634280",
    "end": "1639410"
  },
  {
    "text": "best solution right I mean I that that I mean static variables is one of the key",
    "start": "1639410",
    "end": "1644930"
  },
  {
    "text": "components of you know your net environment of any static type language right and in fact if you if there's also",
    "start": "1644930",
    "end": "1653120"
  },
  {
    "text": "trade-off over here if you don't if you forget about you know using static and",
    "start": "1653120",
    "end": "1658550"
  },
  {
    "text": "you know the static type components then one benefit that you're missing out on is your is the possibility to reduce",
    "start": "1658550",
    "end": "1666590"
  },
  {
    "text": "invocation durations so invocation durations are how long your function runs for when it the continuous warm how",
    "start": "1666590",
    "end": "1675170"
  },
  {
    "text": "long your business logic runs for and the reason why people prefer static languages in the cloud one of the meet",
    "start": "1675170",
    "end": "1681770"
  },
  {
    "text": "one of the reasons at least is that when you have your static variables once you contain a set up those static variables",
    "start": "1681770",
    "end": "1687590"
  },
  {
    "text": "are stored in your context right in the in the lambda context so that when you",
    "start": "1687590",
    "end": "1692690"
  },
  {
    "text": "go back to it you know when you invoke your function again you know you already have the static variables ready for you",
    "start": "1692690",
    "end": "1698810"
  },
  {
    "text": "so it can lead to longer function executions and it's not it's not really",
    "start": "1698810",
    "end": "1704030"
  },
  {
    "text": "an efficient solution like you know you won't really see much benefit in call",
    "start": "1704030",
    "end": "1712760"
  },
  {
    "text": "start durations right another solution and more effective solution is",
    "start": "1712760",
    "end": "1717800"
  },
  {
    "text": "considering the amount of resources that you provide to your function so at the",
    "start": "1717800",
    "end": "1723560"
  },
  {
    "text": "moment you know with the basic plans of zero and AWS you can allocate especially",
    "start": "1723560",
    "end": "1730430"
  },
  {
    "text": "for it obvious lambdas you can allocate a range of memories to your lambda function right for those who are",
    "start": "1730430",
    "end": "1736880"
  },
  {
    "text": "familiar with lambda functions they know about it right you can allocate you know from you know 128 to 3 3008 MB of memory",
    "start": "1736880",
    "end": "1748130"
  },
  {
    "text": "to your lambda function all right so tuning your dedicated memory does help the more memory",
    "start": "1748130",
    "end": "1753560"
  },
  {
    "text": "available during for the container and they're starting up the better call",
    "start": "1753560",
    "end": "1761210"
  },
  {
    "text": "start performance we see and we will see some experimentation in the next slide",
    "start": "1761210",
    "end": "1768230"
  },
  {
    "text": "but there is also problem with this the more are resources you allocate to your function also means the the higher",
    "start": "1768230",
    "end": "1776810"
  },
  {
    "text": "chances of it being torn down in a short period of time right so now you have a trade-off over here",
    "start": "1776810",
    "end": "1782330"
  },
  {
    "text": "so you're trading of lower costar durations for higher co-starred",
    "start": "1782330",
    "end": "1788030"
  },
  {
    "text": "frequencies and you need to you know do some testing over there and you need to",
    "start": "1788030",
    "end": "1793280"
  },
  {
    "text": "do some tuning to realize where the best spot is you know what is the best",
    "start": "1793280",
    "end": "1799190"
  },
  {
    "text": "configuration right because you know",
    "start": "1799190",
    "end": "1804890"
  },
  {
    "text": "maybe it's maybe getting a co start every time may not be that detrimental",
    "start": "1804890",
    "end": "1812270"
  },
  {
    "text": "to your application as compared to high call start durations you know if you have if you can manage to have local",
    "start": "1812270",
    "end": "1817790"
  },
  {
    "text": "site durations and have higher cost out frequency you know and from experimentation here I was comparing you",
    "start": "1817790",
    "end": "1825860"
  },
  {
    "text": "know I ran this in aw slammed I ran a basic.net core two point one function in",
    "start": "1825860",
    "end": "1832220"
  },
  {
    "text": "AWS lambda and I provisioned different",
    "start": "1832220",
    "end": "1837800"
  },
  {
    "text": "memory sizes and as you can clearly see the more memory we allocate to it the",
    "start": "1837800",
    "end": "1844040"
  },
  {
    "text": "lower cost start durations we experienced and this is great this is great but you also have to consider that",
    "start": "1844040",
    "end": "1851180"
  },
  {
    "text": "the frequency of your call starts then also increases right so that's that's",
    "start": "1851180",
    "end": "1858860"
  },
  {
    "text": "that's the memory allocation solution right another solution is why while",
    "start": "1858860",
    "end": "1865190"
  },
  {
    "text": "you're deploying your code make use you know take advantage of the resources out",
    "start": "1865190",
    "end": "1870680"
  },
  {
    "text": "there for you to take advantage of the tools out there for you and the dotnet CLI is a wonderful tool that both 0 and",
    "start": "1870680",
    "end": "1876830"
  },
  {
    "text": "AWS leverage to try to give you a better development experience right",
    "start": "1876830",
    "end": "1882750"
  },
  {
    "text": "and basically what the dotnet CLI does especially when you're deploying your code to the vendor is that it optimizes",
    "start": "1882750",
    "end": "1892860"
  },
  {
    "text": "your the libraries that you use right and what that means is that more optimal",
    "start": "1892860",
    "end": "1900450"
  },
  {
    "text": "more optimized libraries means that there's less code to deal with for your container when starting up in the co",
    "start": "1900450",
    "end": "1907620"
  },
  {
    "text": "start phase of its life cycle right and",
    "start": "1907620",
    "end": "1912720"
  },
  {
    "text": "they're also additional benefits such as templating right how many of you guys have used the dotnet CLI to deploy a",
    "start": "1912720",
    "end": "1919920"
  },
  {
    "text": "lambda function for the lambda developers right this is yeah one person over there that's great have you seen",
    "start": "1919920",
    "end": "1925140"
  },
  {
    "text": "the benefits of it have you seen have used the template and other benefits of it it's better it's a",
    "start": "1925140",
    "end": "1933780"
  },
  {
    "text": "hopeless oh my god right and the support",
    "start": "1933780",
    "end": "1946590"
  },
  {
    "text": "is also hopeless well what can you do it yeah yeah that is a problem yes I mean",
    "start": "1946590",
    "end": "1952560"
  },
  {
    "text": "yeah there's not a lot of support out there right there's not a lot of community help out there also so that I mean that that's why that's why that was one of my motives to come and give this",
    "start": "1952560",
    "end": "1958710"
  },
  {
    "text": "talk you know so yeah I hope I hope you learned something from this talk then you know yeah so you don't need to go to",
    "start": "1958710",
    "end": "1964770"
  },
  {
    "text": "terrible support all the time you know another great feature and this",
    "start": "1964770",
    "end": "1970170"
  },
  {
    "text": "is a very AWS lambda oriented solution so sorry for the 0a0 guys over there you",
    "start": "1970170",
    "end": "1977040"
  },
  {
    "text": "know in the usage of lambda layers so lambda layers was introduced in AWS reinvent around 2018 right and basically",
    "start": "1977040",
    "end": "1987090"
  },
  {
    "text": "what we see that with lambda layers you can so the way lambda layers works is",
    "start": "1987090",
    "end": "1992700"
  },
  {
    "text": "that you can instead of having your libraries and your dependencies within your code and deployed within your code",
    "start": "1992700",
    "end": "1998910"
  },
  {
    "text": "and and meaning that when your container starts up it has this huge amount of dependencies to load instead of having",
    "start": "1998910",
    "end": "2005930"
  },
  {
    "text": "that you already put them as an external dependency within your service",
    "start": "2005930",
    "end": "2011750"
  },
  {
    "text": "environment within your functions environment right and layers can comprise of all all the",
    "start": "2011750",
    "end": "2018320"
  },
  {
    "text": "assemblies right and and you can use the darkness real light to build them but the problem over there is that now you",
    "start": "2018320",
    "end": "2026240"
  },
  {
    "text": "know working with your business logic locally becomes really difficult because",
    "start": "2026240",
    "end": "2031550"
  },
  {
    "text": "you don't have all the dll's the dll files locally right so you know it's",
    "start": "2031550",
    "end": "2038840"
  },
  {
    "text": "difficult to use with static languages especially because you need to have all the dependencies locally to compile and",
    "start": "2038840",
    "end": "2044420"
  },
  {
    "text": "create the DLL files right and from what",
    "start": "2044420",
    "end": "2049460"
  },
  {
    "text": "I know and from my experience AWS and the awsm framework supports the layers",
    "start": "2049460",
    "end": "2056330"
  },
  {
    "text": "when being invoked locally when you're testing locally with Seder via Sam it does support it I am not really aware of",
    "start": "2056330",
    "end": "2062570"
  },
  {
    "text": "any other framework that supports this so yes so now you know your development experience kind of deteriorate but you",
    "start": "2062570",
    "end": "2069590"
  },
  {
    "text": "know at the end of the day you will have better you know you will have a better",
    "start": "2069590",
    "end": "2076090"
  },
  {
    "text": "performance for your application and this is what we see with with again we",
    "start": "2076090",
    "end": "2082280"
  },
  {
    "text": "say experimentation so without the layers you know I had some Co",
    "start": "2082280",
    "end": "2088878"
  },
  {
    "text": "saturations of above 2.5 let's say you know to some we're on to second and you",
    "start": "2088879",
    "end": "2094820"
  },
  {
    "text": "can see it decreased with lambda layers right another great use of lambda layers",
    "start": "2094820",
    "end": "2103790"
  },
  {
    "text": "is that you can take advantage of something of custom runtimes now custom runtimes is so functions have their",
    "start": "2103790",
    "end": "2111440"
  },
  {
    "text": "native runtimes that they support and you can choose amongst them right but",
    "start": "2111440",
    "end": "2116510"
  },
  {
    "text": "now with lambda layers you could also have custom runtimes with custom runtimes basically you know you upload",
    "start": "2116510",
    "end": "2124970"
  },
  {
    "text": "your runtime package as a lambda layer and you used the used the vendors",
    "start": "2124970",
    "end": "2132950"
  },
  {
    "text": "capabilities to execute your function and there's a very great personality in",
    "start": "2132950",
    "end": "2139730"
  },
  {
    "text": "this field his name is Zack Charles he's an engineer at just eat and he makes use of custom runtimes to show how we can",
    "start": "2139730",
    "end": "2146630"
  },
  {
    "text": "use something called lambda native to get almost you know to get extremely",
    "start": "2146630",
    "end": "2151999"
  },
  {
    "text": "faster executions of our dotnet",
    "start": "2151999",
    "end": "2157209"
  },
  {
    "text": "functions right and what he does is that he he used a library called core RT",
    "start": "2157209",
    "end": "2164689"
  },
  {
    "text": "which is a dotnet foundation project it's an it's an experimental experimental libraries not it's not",
    "start": "2164689",
    "end": "2171170"
  },
  {
    "text": "ready for production in this current state at the moment right and I really urge everybody to go check it out so",
    "start": "2171170",
    "end": "2176299"
  },
  {
    "text": "it's a cool it's pretty cool library right and he used it here up he configured as a custom runtime in the",
    "start": "2176299",
    "end": "2183709"
  },
  {
    "text": "AWS environment and what he and his results were amazing he got he was really low durations call start",
    "start": "2183709",
    "end": "2193549"
  },
  {
    "text": "durations and I really urge you guys to go check out his you know if you want to",
    "start": "2193549",
    "end": "2199039"
  },
  {
    "text": "take a picture of this this is the piece that he write you know making that net ID obvious lambda functions start 10",
    "start": "2199039",
    "end": "2204049"
  },
  {
    "text": "times faster using lambda native exact Charles right so he think he's a pretty cool guy and you know I would like",
    "start": "2204049",
    "end": "2210559"
  },
  {
    "text": "usually you guys should definitely check him out right finally what we can also",
    "start": "2210559",
    "end": "2216619"
  },
  {
    "text": "think of is keeping our containers warm now this isn't to release co-star",
    "start": "2216619",
    "end": "2223579"
  },
  {
    "text": "durations but this is to reduce co-star frequencies right what does that mean so",
    "start": "2223579",
    "end": "2230869"
  },
  {
    "text": "as I said before like if if your container keeps on experiencing activity",
    "start": "2230869",
    "end": "2238160"
  },
  {
    "text": "it will remain warm it won't be torn down right your container won't be torn",
    "start": "2238160",
    "end": "2244549"
  },
  {
    "text": "down and it'll and if your containers don't torn down it will remain warm and",
    "start": "2244549",
    "end": "2249559"
  },
  {
    "text": "the way to keep your container warm is by constantly pinging it now you know",
    "start": "2249559",
    "end": "2255650"
  },
  {
    "text": "this seems like cheating you know we and I personally don't like this the this",
    "start": "2255650",
    "end": "2263299"
  },
  {
    "text": "solution is because it kind of misses the point of what service is meant to be",
    "start": "2263299",
    "end": "2268849"
  },
  {
    "text": "you know again in the beginning I said that in for their one of the great reasons why people are using server list",
    "start": "2268849",
    "end": "2274670"
  },
  {
    "text": "is because you know you have your resources when you need them anyway and you don't need them they're known you don't need to pay for them but if",
    "start": "2274670",
    "end": "2282400"
  },
  {
    "text": "you constantly keep on pinging it just to you know be safe from cold start then",
    "start": "2282400",
    "end": "2288130"
  },
  {
    "text": "you were completely missing the point of service right it's not a very great solution but it is a solution that works",
    "start": "2288130",
    "end": "2294550"
  },
  {
    "text": "I mean you are you are reducing calls are frequencies and therefore you no longer need to worry about call start durations that much right and the way",
    "start": "2294550",
    "end": "2301780"
  },
  {
    "text": "you do this is basically you set up you know scheduled triggers small triggers",
    "start": "2301780",
    "end": "2308050"
  },
  {
    "text": "that keep on pinning it right but this is also what also says that means that",
    "start": "2308050",
    "end": "2313390"
  },
  {
    "text": "you will now periodically ping your function and if you look at the service",
    "start": "2313390",
    "end": "2319390"
  },
  {
    "text": "pricing model you get charged per invocation so each ping is an invocation now this",
    "start": "2319390",
    "end": "2326920"
  },
  {
    "text": "is where you need to really you know monitor and really do some fine-tuning with the solution because if you keep if",
    "start": "2326920",
    "end": "2334359"
  },
  {
    "text": "you ping it unnecessarily you could all of a sudden experience unnecessary cost right even though you're pinning it with",
    "start": "2334359",
    "end": "2340720"
  },
  {
    "text": "and it's just an empty invocation you know so you won't have a very long duration so you won't be charged a lot",
    "start": "2340720",
    "end": "2346930"
  },
  {
    "text": "but you are still being charged something and you are still missing the point of service so this is where if you",
    "start": "2346930",
    "end": "2353349"
  },
  {
    "text": "do some some fine-tuning you have to like continually I trait to know whether",
    "start": "2353349",
    "end": "2358380"
  },
  {
    "text": "are you pinning it too much or are you pinging it too little are usually pinging it you know if you're pinging it",
    "start": "2358380",
    "end": "2364869"
  },
  {
    "text": "you know in every five minutes and you're still experiencing cold starts and maybe you're not pinging it enough maybe you're not doing enough to keep",
    "start": "2364869",
    "end": "2371290"
  },
  {
    "text": "your container warm are you pinging it five times every five seconds then that's that's overkill you know so this",
    "start": "2371290",
    "end": "2379030"
  },
  {
    "text": "is what you really need to do the mantra and again as I mentioned before as we saw before you do not know the period of",
    "start": "2379030",
    "end": "2386500"
  },
  {
    "text": "time in which your container is going to stay up so that's a that's a added problem on top of that you can't really",
    "start": "2386500",
    "end": "2392020"
  },
  {
    "text": "monitor your functions that's another problem right so this is where you have to use you know there are a lot of",
    "start": "2392020",
    "end": "2397420"
  },
  {
    "text": "third-party tools out there so as I mentioned I was working 200 is that's another tool called Epsilon a lot of people a lot of people are",
    "start": "2397420",
    "end": "2403780"
  },
  {
    "text": "probably familiar with septagon how many people are famous it was up to go on there were our they were they were",
    "start": "2403780",
    "end": "2409570"
  },
  {
    "text": "competitor for us back in the day the other tools you know - bird and you know",
    "start": "2409570",
    "end": "2416530"
  },
  {
    "text": "there are a lot of third-party tools out there in the service environment and for service monitoring that you can use and",
    "start": "2416530",
    "end": "2422860"
  },
  {
    "text": "you can use effectively to you know make sure that you're doing the right fine-tuning to make sure that you don't",
    "start": "2422860",
    "end": "2428140"
  },
  {
    "text": "you're not you're not over pinging your containers to keep them more or under pinging them for and having no effect at",
    "start": "2428140",
    "end": "2434350"
  },
  {
    "text": "the end right and this yeah so basically you know you",
    "start": "2434350",
    "end": "2444250"
  },
  {
    "text": "added you know this is just basically me",
    "start": "2444250",
    "end": "2449260"
  },
  {
    "text": "showing how we can add a you know a schedule it's pretty easy and you know",
    "start": "2449260",
    "end": "2454630"
  },
  {
    "text": "and even though I'm not a big fan of triggers it's very easy and very quick fix right let's look at what the",
    "start": "2454630",
    "end": "2463360"
  },
  {
    "text": "experiments the experimental results in having the you know these things you",
    "start": "2463360",
    "end": "2471310"
  },
  {
    "text": "know and keep trying to keep our one continue the wrong so we started off as a trigger trigger every five minutes",
    "start": "2471310",
    "end": "2479290"
  },
  {
    "text": "right so we were experiencing with warm",
    "start": "2479290",
    "end": "2486220"
  },
  {
    "text": "ups with warm up things we were experiencing around 77 there you know",
    "start": "2486220",
    "end": "2495550"
  },
  {
    "text": "percentage of of cool starts right and",
    "start": "2495550",
    "end": "2503200"
  },
  {
    "text": "they were yeah 0.77% of cold starts",
    "start": "2503200",
    "end": "2509260"
  },
  {
    "text": "right as compared to nineteen point four one percent of cold starts without triggers right if once I start",
    "start": "2509260",
    "end": "2519160"
  },
  {
    "text": "triggering it more frequently right what we start seeing is a zero point you know",
    "start": "2519160",
    "end": "2526030"
  },
  {
    "text": "we saw those numbers reduce right so that was that was a win right so you",
    "start": "2526030",
    "end": "2531220"
  },
  {
    "text": "know pinging it more was definitely a win",
    "start": "2531220",
    "end": "2537570"
  },
  {
    "text": "so again but again as I said this isn't a preferred solution right but it doesn't work so these are this is",
    "start": "2537810",
    "end": "2544480"
  },
  {
    "text": "lower frequencies of course are not lowered duration of call stands remember right we also see current improvement so",
    "start": "2544480",
    "end": "2553990"
  },
  {
    "text": "we are seeing you know tired tear jetting we are seeing release of",
    "start": "2553990",
    "end": "2559150"
  },
  {
    "text": "new dotnet core versions you know we're seeing constant improvement of compilers and we're seeing constant reduction of co-star",
    "start": "2559150",
    "end": "2565120"
  },
  {
    "text": "durations right so we are seeing the industry moving towards improvements in",
    "start": "2565120",
    "end": "2572440"
  },
  {
    "text": "this and with these current improvements these are the results that we're getting right so what we are seeing is that so",
    "start": "2572440",
    "end": "2582820"
  },
  {
    "text": "this is if you compare the different I don't know if everybody can see this if",
    "start": "2582820",
    "end": "2588310"
  },
  {
    "text": "we compare the different core versions that aren't core versions obviously with you know dotnet core 1.0 you know you",
    "start": "2588310",
    "end": "2594970"
  },
  {
    "text": "would we experience like huge you know co-star durations and this is",
    "start": "2594970",
    "end": "2602260"
  },
  {
    "text": "across different memory allocations right different memory sizes right and",
    "start": "2602260",
    "end": "2607900"
  },
  {
    "text": "what we and when dot and dot and cores 3.0 came out you know which is by",
    "start": "2607900",
    "end": "2614380"
  },
  {
    "text": "default tiered compilation we saw lower and as you can see this is the best",
    "start": "2614380",
    "end": "2620470"
  },
  {
    "text": "co-star duration values that we are getting right there is a way that there",
    "start": "2620470",
    "end": "2627580"
  },
  {
    "text": "is a way that you can like turn off the tiered compliation setting for dotnet core 3.0 and when you do that this is",
    "start": "2627580",
    "end": "2633970"
  },
  {
    "text": "what you're getting and you're still getting improved co-starred durations but when you when",
    "start": "2633970",
    "end": "2641080"
  },
  {
    "text": "we're talking about tiered compilation so with state compilation one of the",
    "start": "2641080",
    "end": "2646260"
  },
  {
    "text": "disadvantages now is that because we aren't compiling all our code at once you know we have to wait for that",
    "start": "2646260",
    "end": "2652240"
  },
  {
    "text": "compilation throughout the running of our function and that means longer",
    "start": "2652240",
    "end": "2658420"
  },
  {
    "text": "invocation durations right well you have to worry about longer invocation",
    "start": "2658420",
    "end": "2664240"
  },
  {
    "text": "durations and this is this is again one of the experiments that I noticed right",
    "start": "2664240",
    "end": "2670020"
  },
  {
    "text": "so as we see there is no you know now",
    "start": "2670020",
    "end": "2676120"
  },
  {
    "text": "one solution for this right we always have to think of you know throughout the",
    "start": "2676120",
    "end": "2681220"
  },
  {
    "text": "function lifecycle we always have to think of you know where do we how do we",
    "start": "2681220",
    "end": "2688000"
  },
  {
    "text": "constantly think of you know making our improving our function logic right and",
    "start": "2688000",
    "end": "2696780"
  },
  {
    "text": "you know we have to think of it while you're offering your code you know should you consider static variables you know static components you know should",
    "start": "2696780",
    "end": "2703150"
  },
  {
    "text": "you use them the layers you know find keep on fine-tuning your functions you know use the dotnet CLI do you that you",
    "start": "2703150",
    "end": "2711040"
  },
  {
    "text": "know and keep containers warm right and you keep you keep on thinking of this as",
    "start": "2711040",
    "end": "2716250"
  },
  {
    "text": "you're building your entire function all right so these practices should be considered in all levels of building",
    "start": "2716250",
    "end": "2722320"
  },
  {
    "text": "your service function and you know and most importantly trust in your cloud vendor you know and expect improvement",
    "start": "2722320",
    "end": "2727900"
  },
  {
    "text": "because there is the cloud wars you know so you should always expect improvements right you know in the end I would just",
    "start": "2727900",
    "end": "2735340"
  },
  {
    "text": "like to say that you know the future is service you know and I truly believe in that and dotnet is to benefit from it",
    "start": "2735340",
    "end": "2743800"
  },
  {
    "text": "you know and when you finally do implement all of this we can say that you know the cold never bothered me",
    "start": "2743800",
    "end": "2749710"
  },
  {
    "text": "anymore so yeah that's a little you know all that from you know frozen so yes so",
    "start": "2749710",
    "end": "2756990"
  },
  {
    "text": "I think we have time for some questions yes",
    "start": "2756990",
    "end": "2763500"
  },
  {
    "text": "and other languages ha I see no I don't have that but that's that's something that would be very",
    "start": "2768630",
    "end": "2774609"
  },
  {
    "text": "interesting for me to see right yeah maybe you should you should talk about it more afterwards yes I mean I think",
    "start": "2774609",
    "end": "2797140"
  },
  {
    "text": "what we can what I have experienced I didn't use karate personally but I have used custom runtimes because uh we use a",
    "start": "2797140",
    "end": "2803650"
  },
  {
    "text": "lot of time they use custom runtimes to have pre-configured preak pre-configured",
    "start": "2803650",
    "end": "2809049"
  },
  {
    "text": "monitoring capabilities in lambda function and sometimes what we notice is that duration invocation durations are",
    "start": "2809049",
    "end": "2815470"
  },
  {
    "text": "affected in that so yeah you could have bad performing business applications at",
    "start": "2815470",
    "end": "2823690"
  },
  {
    "text": "the end of the day but from if you check out Jack Charles blog and here's the result what what he saw what that he",
    "start": "2823690",
    "end": "2830680"
  },
  {
    "text": "didn't see that much of a problem when it came to performance where the least is karate se",
    "start": "2830680",
    "end": "2838260"
  },
  {
    "text": "right right yeah I yeah so like I I",
    "start": "2841120",
    "end": "2872290"
  },
  {
    "text": "think if I understood your question correctly I think we were talking about like you know you know how you structure",
    "start": "2872290",
    "end": "2879820"
  },
  {
    "text": "your entire architecture right so now what we have over here and this is again one of the great things when you're when",
    "start": "2879820",
    "end": "2885250"
  },
  {
    "text": "you're see when you're developing in service you have to think about you know micro-services you have to think of separate functions right so one of the",
    "start": "2885250",
    "end": "2892240"
  },
  {
    "text": "common mistakes and this is this again this answer isn't only relevant to the dotnet community it's relevant to the",
    "start": "2892240",
    "end": "2898270"
  },
  {
    "text": "end to anybody building interest but one of the biggest problems when we were building several applications is that",
    "start": "2898270",
    "end": "2904120"
  },
  {
    "text": "either we fragment too much or we don't fragment at all so what does that mean",
    "start": "2904120",
    "end": "2910420"
  },
  {
    "text": "like at the end of the day if somebody doesn't you know divide up his you know split up his logic into separate",
    "start": "2910420",
    "end": "2916510"
  },
  {
    "text": "functions or separate services he could end up with one huge you could end up with one huge lambda function and that's",
    "start": "2916510",
    "end": "2923560"
  },
  {
    "text": "just terrible and when it comes to call starts or the problem could be you fragment too much and you have that you",
    "start": "2923560",
    "end": "2930490"
  },
  {
    "text": "have all these small lambda functions that all depend on each other and now",
    "start": "2930490",
    "end": "2936460"
  },
  {
    "text": "you have inter dependency and that just leads to bad performance also so the goal over here is to fragment just",
    "start": "2936460",
    "end": "2942640"
  },
  {
    "text": "enough to allow a synchronous operation so like for example something else is loading up but the core component that I",
    "start": "2942640",
    "end": "2948490"
  },
  {
    "text": "know as you said you know you have a dialog box spinning to load something that does happen that is experiencing",
    "start": "2948490",
    "end": "2955180"
  },
  {
    "text": "co-star at the moment but at least you have other components popping up on your web page which you know so you do have",
    "start": "2955180",
    "end": "2960430"
  },
  {
    "text": "some user interaction happening while another component is still loading so",
    "start": "2960430",
    "end": "2966910"
  },
  {
    "text": "that that's really great you know and there's a there's a gentleman Eric Johnson who the evangelist from AWS Heat",
    "start": "2966910",
    "end": "2974510"
  },
  {
    "text": "talks about you know the need for a synchronous syncing when building service function so you know if you if",
    "start": "2974510",
    "end": "2980210"
  },
  {
    "text": "you are really interested in this you could go check out his talk it's called you know thinking a synchronously interest yes right right I'm so sorry",
    "start": "2980210",
    "end": "2992630"
  },
  {
    "text": "that you know most of it it's just like you know a top genie we are mostly building in the aid of this yeah",
    "start": "2992630",
    "end": "2999220"
  },
  {
    "text": "right ha right lambda has similar",
    "start": "3010290",
    "end": "3037830"
  },
  {
    "text": "capabilities but no I did not test it with that and that's again that's something that should be tested and I do",
    "start": "3037830",
    "end": "3043960"
  },
  {
    "text": "agree with you over there you know maybe later on I can so I'm gonna do a little",
    "start": "3043960",
    "end": "3049090"
  },
  {
    "text": "write-up about this I've already done some write-ups about this but you know you had a great point and you know I would definitely take you know your",
    "start": "3049090",
    "end": "3054640"
  },
  {
    "text": "things into consideration in writing the follow-up to this and like you know like what because I wrote when I wrote my",
    "start": "3054640",
    "end": "3060760"
  },
  {
    "text": "about my investigations this was like almost year back and then we saw a lot of improvements we saw dotnet core 3.0",
    "start": "3060760",
    "end": "3067720"
  },
  {
    "text": "coming out right so we see we saw these improvements and like when I was preparing this talk I had to like redo a lot of my experiments with the new",
    "start": "3067720",
    "end": "3073750"
  },
  {
    "text": "improvements so yes but these are also some improvements that I should look into and some more additional things",
    "start": "3073750",
    "end": "3079840"
  },
  {
    "text": "that at least I should look into at least before writing the next you know the follow-up to this no did anybody",
    "start": "3079840",
    "end": "3090820"
  },
  {
    "text": "else have a question ok let's let's go to the gentleman then we will jump back to you yes",
    "start": "3090820",
    "end": "3097440"
  },
  {
    "text": "native foreign aid obvious yes there's a preview I believe yeah yeah no no there",
    "start": "3103750",
    "end": "3114350"
  },
  {
    "text": "was also preview and for this specifically when I did this I there was I used a custom runtime right but I",
    "start": "3114350",
    "end": "3121490"
  },
  {
    "text": "didn't expect it to be a detrimental on the performance on duration in stuff",
    "start": "3121490",
    "end": "3127670"
  },
  {
    "text": "like and we didn't see that right if you look we look at the huh no no I was",
    "start": "3127670",
    "end": "3139010"
  },
  {
    "text": "using a custom runtime for dotnet core 3.0 but I believe now if I'm not",
    "start": "3139010",
    "end": "3147050"
  },
  {
    "text": "mistaken if I may be wrong right because I haven't I haven't had time to look into the dot into the runtime the nature",
    "start": "3147050",
    "end": "3153860"
  },
  {
    "text": "of runtime specifically for dotnet core virgins in native this time but I do believe that there should be a native runtime for dotnet course 2.0 we can",
    "start": "3153860",
    "end": "3160460"
  },
  {
    "text": "check after this yeah but yeah it went my comparison when I did this experiment before I was using a custom runtime for",
    "start": "3160460",
    "end": "3166580"
  },
  {
    "text": "to ensure dotnet Korsak window",
    "start": "3166580",
    "end": "3171100"
  },
  {
    "text": "right yeah right well scalability you",
    "start": "3189670",
    "end": "3210440"
  },
  {
    "text": "know the scalability property of service functions actually occurs while the",
    "start": "3210440",
    "end": "3216800"
  },
  {
    "text": "function is running itself so it can happen both when you know during call starts you don't really need to worry",
    "start": "3216800",
    "end": "3222680"
  },
  {
    "text": "about scalability I mean because when it comes to call start durations it doesn't really we haven't really seen much",
    "start": "3222680",
    "end": "3229099"
  },
  {
    "text": "dependency on oh we need these many machines at this many machine whatnot depending on the scale required so you",
    "start": "3229099",
    "end": "3236000"
  },
  {
    "text": "generally see somewhat same amount of co-star durations but when your phone",
    "start": "3236000",
    "end": "3243650"
  },
  {
    "text": "when your continue is already warm then you may see some performance issues with",
    "start": "3243650",
    "end": "3250760"
  },
  {
    "text": "you know having like a thousand requests coming in all at once whereas you were",
    "start": "3250760",
    "end": "3256670"
  },
  {
    "text": "just having 100 requests all of a sudden you have a thousand requests coming up coming in the same second and in the",
    "start": "3256670",
    "end": "3261740"
  },
  {
    "text": "same millisecond so then obviously the underlying architecture needs to like provision all these new spin-up all of",
    "start": "3261740",
    "end": "3266810"
  },
  {
    "text": "these new containers over there you may see longer durations right you may",
    "start": "3266810",
    "end": "3272630"
  },
  {
    "text": "definitely see longer durations over there and then also depending on how you your business logic is written you you",
    "start": "3272630",
    "end": "3278300"
  },
  {
    "text": "may see some bottlenecks in your code or in your processing loops maybe let's say you know so yeah so that that's how",
    "start": "3278300",
    "end": "3285910"
  },
  {
    "text": "scalability affects duration times go start and drink warm create I I hope",
    "start": "3285910",
    "end": "3291829"
  },
  {
    "text": "that answers your question right",
    "start": "3291829",
    "end": "3297160"
  },
  {
    "text": "right",
    "start": "3299690",
    "end": "3302690"
  },
  {
    "text": "right",
    "start": "3324080",
    "end": "3327080"
  },
  {
    "text": "right you sorry I didn't understand like you mean like provisioning more memory",
    "start": "3329970",
    "end": "3336010"
  },
  {
    "text": "to your Oh oh yes yes yes yes so I mean I don't",
    "start": "3336010",
    "end": "3344110"
  },
  {
    "text": "think that's so like in AWS lambda you have ec2 instances right you have containers and the pricing",
    "start": "3344110",
    "end": "3350110"
  },
  {
    "text": "model over that you actually can have dedicated resources over there and then within that you can run you can have a",
    "start": "3350110",
    "end": "3356470"
  },
  {
    "text": "you know you can use fire cracker and you can actually run some virtualization within your dedicated instances but I",
    "start": "3356470",
    "end": "3362620"
  },
  {
    "text": "wouldn't say that that's a that's not a really effective solution so you at the end of that you have a container you",
    "start": "3362620",
    "end": "3368170"
  },
  {
    "text": "have a you already have a container and you're already paying for that container why would you want to set up you know",
    "start": "3368170",
    "end": "3374020"
  },
  {
    "text": "auto scaling virtualization in that container you just use your entire container if you've already paid for it",
    "start": "3374020",
    "end": "3379360"
  },
  {
    "text": "right if you're right does that answer your question yeah okay yeah are there",
    "start": "3379360",
    "end": "3385540"
  },
  {
    "text": "any more questions I will thank you so much for attending and I hope my lack of",
    "start": "3385540",
    "end": "3391990"
  },
  {
    "text": "dotnet knowledge didn't you know how if there any issues is that so I but again",
    "start": "3391990",
    "end": "3399340"
  },
  {
    "text": "this is a topic that really affected me and I hope it's we can all go away learning something so thank you so much",
    "start": "3399340",
    "end": "3405910"
  },
  {
    "text": "for coming [Applause]",
    "start": "3405910",
    "end": "3411989"
  }
]