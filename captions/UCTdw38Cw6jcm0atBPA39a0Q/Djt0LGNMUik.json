[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "all right i guess we will start so we are here today to demonstrate some",
    "start": "8080",
    "end": "14320"
  },
  {
    "text": "binary exploitation i am maricho and this is 0x bad cafe 1",
    "start": "14320",
    "end": "21359"
  },
  {
    "text": "on twitter i can take this perfect",
    "start": "21359",
    "end": "27279"
  },
  {
    "start": "23000",
    "end": "129000"
  },
  {
    "text": "will you introduce yourself oh yeah that's me first actually yeah uh yeah so my name is christian i",
    "start": "27680",
    "end": "34079"
  },
  {
    "text": "currently work as a security engineer in google's threat analysis group where we track like serious",
    "start": "34079",
    "end": "41440"
  },
  {
    "text": "threats against our products um yeah and i've previously done work as a",
    "start": "41440",
    "end": "48559"
  },
  {
    "text": "vulnerability researcher and i've done malware analysis reverse engineering and so on so yeah",
    "start": "48559",
    "end": "55440"
  },
  {
    "text": "yeah and i'm also a huge humus enthusiast so i said this at other conferences but i still haven't gotten",
    "start": "55760",
    "end": "61680"
  },
  {
    "text": "any like good recipe tips so please hit me up after the talk i also play a lot of ctfs and if you're",
    "start": "61680",
    "end": "69119"
  },
  {
    "text": "not familiar it's a form of hacking competition and i have a play with a norwegian team called the boot plug",
    "start": "69119",
    "end": "77439"
  },
  {
    "text": "yeah all right so my name is modit and i work at the consultancy company",
    "start": "77439",
    "end": "83119"
  },
  {
    "text": "called subrastera and there i have two roles so i work a little bit as a business",
    "start": "83119",
    "end": "90400"
  },
  {
    "text": "developer which is more or less a subject matter expert and my domain is",
    "start": "90400",
    "end": "96640"
  },
  {
    "text": "secure development in addition i just cannot stop doing software development so i work as a",
    "start": "96640",
    "end": "103360"
  },
  {
    "text": "software engineer as well i'm also part of boot plug",
    "start": "103360",
    "end": "109600"
  },
  {
    "text": "i'm a board member of a security group called oslo ctf for beginners to give",
    "start": "109600",
    "end": "115200"
  },
  {
    "text": "them a good start in the security community and i'm also part of the",
    "start": "115200",
    "end": "122320"
  },
  {
    "text": "group for non-binary people and female women which is called powerpuff girls",
    "start": "122320",
    "end": "129840"
  },
  {
    "start": "129000",
    "end": "176000"
  },
  {
    "text": "so can we just switch so i have this one thank you all right so",
    "start": "130239",
    "end": "135360"
  },
  {
    "text": "our main thing today is to talk about a bug in pseudo",
    "start": "135360",
    "end": "141520"
  },
  {
    "text": "and yes when i say sudo i mean sudo like when we write sudo apt-install or like i",
    "start": "141520",
    "end": "148800"
  },
  {
    "text": "like to say to christian sudo get me a sandwich and",
    "start": "148800",
    "end": "155120"
  },
  {
    "text": "so that's the main goal today but to make sure that most of you can follow that bug",
    "start": "155120",
    "end": "160480"
  },
  {
    "text": "we want to briefly introduce by introduce binary exploitation then go through the stack and the heap",
    "start": "160480",
    "end": "169440"
  },
  {
    "text": "and then in the end we will go through a couple of preventions and protections",
    "start": "169680",
    "end": "176319"
  },
  {
    "text": "so how many here have heard about binary exploitation yeah that's a lot of hands cool",
    "start": "176800",
    "end": "184000"
  },
  {
    "text": "and um how many of you have written an exploit well that's actually a few hands yeah",
    "start": "184000",
    "end": "191040"
  },
  {
    "text": "cool nice so christian obviously have written an exploit because he wrote the exploit for sudo which is the one we are",
    "start": "191040",
    "end": "198319"
  },
  {
    "text": "going to demonstrate today oh okay so when i'm going to explain",
    "start": "198319",
    "end": "204799"
  },
  {
    "text": "what binary exploitation is i want to do it by explaining the word pwn",
    "start": "204799",
    "end": "211200"
  },
  {
    "text": "p-w-n pone is what we call binary exploitation",
    "start": "211200",
    "end": "216319"
  },
  {
    "text": "in hacking competitions and according to oxford dictionary",
    "start": "216319",
    "end": "221360"
  },
  {
    "text": "it means to utterly defeat or completely get the better of",
    "start": "221360",
    "end": "226720"
  },
  {
    "text": "something in our case that something is a binary",
    "start": "226720",
    "end": "232080"
  },
  {
    "text": "right an executable file",
    "start": "232080",
    "end": "236000"
  },
  {
    "text": "so it is unavoidable to mention",
    "start": "238560",
    "end": "243680"
  },
  {
    "text": "memory safety when we talk about binary exploitation",
    "start": "243680",
    "end": "248480"
  },
  {
    "text": "and we have a couple of memory safe languages such as java",
    "start": "248799",
    "end": "254640"
  },
  {
    "text": "c c sharp or rust and then we have some memory unsafe",
    "start": "254640",
    "end": "259840"
  },
  {
    "text": "languages such as c and c plus plus and to illustrate that i'm going to",
    "start": "259840",
    "end": "266400"
  },
  {
    "text": "show you some code snippets we low code so we try to put a lot of code in our slides",
    "start": "266400",
    "end": "273520"
  },
  {
    "text": "and we start by looking at this python script what it does",
    "start": "273520",
    "end": "278960"
  },
  {
    "text": "is that it outputs give username to standard out",
    "start": "278960",
    "end": "284160"
  },
  {
    "text": "and whatever is written in standard in is stored in the variable username",
    "start": "284160",
    "end": "290240"
  },
  {
    "text": "and then we print hello username we see the example on the bottom",
    "start": "290240",
    "end": "297120"
  },
  {
    "text": "i write my username arito and it says hello mauricio but how does this look in the memory",
    "start": "297120",
    "end": "303280"
  },
  {
    "text": "unsafe language see it can look like this",
    "start": "303280",
    "end": "309360"
  },
  {
    "text": "we allocate 24 bytes on the heap",
    "start": "309360",
    "end": "314880"
  },
  {
    "text": "and then when we read the username from standard in we allow",
    "start": "314880",
    "end": "320720"
  },
  {
    "text": "writing 24 bytes into the username variable and then when we're finished using it",
    "start": "320720",
    "end": "328000"
  },
  {
    "text": "we free the username from the heap point here is that",
    "start": "328639",
    "end": "335440"
  },
  {
    "text": "we need to handle memory we need to have control of the memory and how to",
    "start": "335440",
    "end": "342560"
  },
  {
    "text": "allocate memory in a proper way if we don't do it properly",
    "start": "342560",
    "end": "348160"
  },
  {
    "text": "we might introduce vulnerabilities and that's exactly where binary",
    "start": "348160",
    "end": "353280"
  },
  {
    "text": "exploitation comes into the picture when we write",
    "start": "353280",
    "end": "358319"
  },
  {
    "text": "don't write the memory properly",
    "start": "358319",
    "end": "362400"
  },
  {
    "text": "there are a couple of vulnerability types that are common",
    "start": "365440",
    "end": "370880"
  },
  {
    "text": "um many of you might have heard about stack overflow which is also called buffer flow",
    "start": "370960",
    "end": "377840"
  },
  {
    "text": "other common are heap overflow and then use after free these are just some examples and we really wanted to show",
    "start": "377840",
    "end": "383840"
  },
  {
    "text": "you some code snippets and explain those too as well but we simply don't have time for it today",
    "start": "383840",
    "end": "390880"
  },
  {
    "text": "but then christian you know while i'm in development projects",
    "start": "390880",
    "end": "396160"
  },
  {
    "text": "at some point we usually start talking about binary exploitation and",
    "start": "396160",
    "end": "402240"
  },
  {
    "text": "one thing that often comes up is that okay we're talking about buffer overflows and one person",
    "start": "402240",
    "end": "409759"
  },
  {
    "text": "almost always says but that's so old is it even relevant",
    "start": "409759",
    "end": "414960"
  },
  {
    "text": "anymore it probably isn't do you agree",
    "start": "414960",
    "end": "420160"
  },
  {
    "text": "yeah that's something i hear a lot as well and i i don't really agree because uh if you",
    "start": "420160",
    "end": "425440"
  },
  {
    "text": "look at some of these like big companies like uh for example microsoft they had some statistics where they said like",
    "start": "425440",
    "end": "431440"
  },
  {
    "text": "70 of the vulnerabilities that they patch in their products with like a high criticality",
    "start": "431440",
    "end": "438400"
  },
  {
    "text": "like very severe vulnerabilities are memory safety issues like use after freeze buffer overflows and so on",
    "start": "438400",
    "end": "445759"
  },
  {
    "text": "and the chrome team the google chrome team had like similar statistics where 70",
    "start": "445759",
    "end": "451520"
  },
  {
    "text": "or around 70 percent of the bugs that they patch in chrome or vulnerabilities they patching chrome",
    "start": "451520",
    "end": "456639"
  },
  {
    "text": "are actually memory safety issues uh with for example use after free being one of the most",
    "start": "456639",
    "end": "462400"
  },
  {
    "text": "common ones uh and this these are examples of like companies and products",
    "start": "462400",
    "end": "467680"
  },
  {
    "text": "that are very mature when it comes to security like they have a lot of defenses mechanisms in place and so on",
    "start": "467680",
    "end": "474879"
  },
  {
    "text": "uh but then on the other hand you have products that for some reason will just disable all of these defenses",
    "start": "474879",
    "end": "481039"
  },
  {
    "text": "that we have available today for example from the compiler or yeah whatever",
    "start": "481039",
    "end": "486479"
  },
  {
    "text": "so yeah it's still uh still a very prevalent issue today even though this has been a problem for you know many",
    "start": "486479",
    "end": "491919"
  },
  {
    "text": "years yeah that's super interesting both both microsoft and google",
    "start": "491919",
    "end": "497280"
  },
  {
    "text": "is have like the most of the vulnerabilities are memory safety issues so this is highly",
    "start": "497280",
    "end": "503199"
  },
  {
    "text": "relevant it's not and all it's not all news at all",
    "start": "503199",
    "end": "509759"
  },
  {
    "text": "oh i forgot to mention one thing if you see on the top of the slides we have",
    "start": "509759",
    "end": "514800"
  },
  {
    "text": "this google link and if you want to ask questions you can ask them there and then we can bring",
    "start": "514800",
    "end": "520719"
  },
  {
    "text": "them up afterwards we get them on the screen so don't feel free to ask",
    "start": "520719",
    "end": "525839"
  },
  {
    "text": "questions you can do it anonymously as well yeah so let's jump into the stack",
    "start": "525839",
    "end": "533200"
  },
  {
    "start": "530000",
    "end": "565000"
  },
  {
    "text": "overflow um one thing that i want to say",
    "start": "533200",
    "end": "540320"
  },
  {
    "text": "that was part of the agenda slide is that we want to explain stack",
    "start": "540320",
    "end": "545760"
  },
  {
    "text": "overflow before explaining heap overflow because we think it's a good segue it's easier",
    "start": "545760",
    "end": "551680"
  },
  {
    "text": "to learn about the heap when you know about the stack and the bug in sudo is a heap overflow",
    "start": "551680",
    "end": "558959"
  },
  {
    "text": "so that's the thing that you will want to understand the most",
    "start": "558959",
    "end": "565440"
  },
  {
    "start": "565000",
    "end": "1051000"
  },
  {
    "text": "so the stack let's start with that this stack is a memory region for",
    "start": "565440",
    "end": "571600"
  },
  {
    "text": "temporary storage of data and that's all i'm going to say",
    "start": "571600",
    "end": "577519"
  },
  {
    "text": "about the stack then we'll just look at the code so let's take a look at this code snippet which is very similar to the one",
    "start": "577519",
    "end": "583680"
  },
  {
    "text": "in the beginning but it has this struct",
    "start": "583680",
    "end": "589279"
  },
  {
    "text": "called user with three members and when we run the program",
    "start": "589279",
    "end": "595519"
  },
  {
    "text": "we initialize the user abstract called hacker by nulling out the name",
    "start": "595519",
    "end": "601920"
  },
  {
    "text": "and setting the name the agent is hacker then when",
    "start": "601920",
    "end": "608240"
  },
  {
    "text": "we read the username we allow reading 50 bytes",
    "start": "608240",
    "end": "613440"
  },
  {
    "text": "from standard in and some of you might notice a",
    "start": "613440",
    "end": "619600"
  },
  {
    "text": "vulnerability here but hold your horses like i mean like you are going to get the um",
    "start": "619600",
    "end": "626959"
  },
  {
    "text": "get the opportunity to tell us what the vulnerability is",
    "start": "626959",
    "end": "632000"
  },
  {
    "text": "but not just yet but christian like we just moved to switzerland right",
    "start": "632000",
    "end": "638800"
  },
  {
    "text": "and um i heard that there is something there that is really",
    "start": "638800",
    "end": "645040"
  },
  {
    "text": "yeah they're known for their cheese right so we have some cheese to handle no no no no we have some",
    "start": "645440",
    "end": "651839"
  },
  {
    "text": "chocolate because we're really known for chocolate right did we even uh yeah we have them there",
    "start": "651839",
    "end": "657360"
  },
  {
    "text": "so we have two small bags with chocolate and we were thinking that the ones we",
    "start": "657360",
    "end": "664000"
  },
  {
    "text": "have two like questions two variabilities that we want you guys to point out you people to point out and",
    "start": "664000",
    "end": "671680"
  },
  {
    "text": "uh there is one here which you will be able to answer afterwards but first",
    "start": "671680",
    "end": "677839"
  },
  {
    "text": "let's look at how this program's stack looks like",
    "start": "677839",
    "end": "682640"
  },
  {
    "text": "the first thing that happens uh when the program runs is that if the",
    "start": "684720",
    "end": "691360"
  },
  {
    "text": "function prolog this thing called function prolog you don't need to understand that",
    "start": "691360",
    "end": "697600"
  },
  {
    "text": "sets up the stack frame by setting up the return address the saved base pointer",
    "start": "697600",
    "end": "704720"
  },
  {
    "text": "and then some space for the local variables in our case the local variables are the",
    "start": "704720",
    "end": "711680"
  },
  {
    "text": "members of the struct and that is because each function in each program has its",
    "start": "711680",
    "end": "718160"
  },
  {
    "text": "own stack frame in our program we only have one function which is the main function so we only",
    "start": "718160",
    "end": "725200"
  },
  {
    "text": "have this one stack frame so if we look at the stack frame we see that we have 16 bytes",
    "start": "725200",
    "end": "732480"
  },
  {
    "text": "for the name four bytes for the age and then four for each hacker a boolean",
    "start": "732480",
    "end": "740000"
  },
  {
    "text": "is one byte but due to uh stack alignment we need to pad the four",
    "start": "740000",
    "end": "747839"
  },
  {
    "text": "saved base pointer represents the beginning of the stack and it's used to",
    "start": "747839",
    "end": "755279"
  },
  {
    "text": "access the local variables but then the most interesting thing here",
    "start": "755279",
    "end": "760959"
  },
  {
    "text": "is the return address because when a function finishes",
    "start": "760959",
    "end": "766000"
  },
  {
    "text": "the return address is the address in the memory that the program will",
    "start": "766000",
    "end": "771120"
  },
  {
    "text": "run the next code from when the function has finished",
    "start": "771120",
    "end": "776639"
  },
  {
    "text": "and we will come to why that's very useful and interesting",
    "start": "777200",
    "end": "783519"
  },
  {
    "text": "oh it's now the time for no there's one more thing i want to say and it's that when i",
    "start": "784240",
    "end": "790160"
  },
  {
    "text": "usually when i learn things i tend to think like okay i understand this stack frame thing now",
    "start": "790160",
    "end": "796560"
  },
  {
    "text": "it's for every function and okay it's how the stack frame looks but how does",
    "start": "796560",
    "end": "801760"
  },
  {
    "text": "it even it really work in the big picture so i decided to draw this illustration",
    "start": "801760",
    "end": "810000"
  },
  {
    "text": "because each process has their own stack so this program has its own stack",
    "start": "810399",
    "end": "816320"
  },
  {
    "text": "another program has another one so if two processes tries to access the same",
    "start": "816320",
    "end": "822800"
  },
  {
    "text": "memory address they will access some access different data",
    "start": "822800",
    "end": "829440"
  },
  {
    "text": "if the main function would call another function we would have a new stack frame",
    "start": "829440",
    "end": "836399"
  },
  {
    "text": "underneath because this is like a lethal structure lost in first out and if that function again",
    "start": "836399",
    "end": "842959"
  },
  {
    "text": "would call another function we would have another stack frame on the stack",
    "start": "842959",
    "end": "848480"
  },
  {
    "text": "and all the things that you see at the top of the main stack frame",
    "start": "848480",
    "end": "854720"
  },
  {
    "text": "is just like standard lipsy stuff that that's not so important for us to think",
    "start": "854720",
    "end": "860240"
  },
  {
    "text": "about so back to the",
    "start": "860240",
    "end": "866880"
  },
  {
    "text": "stack overall now is the time to raise your hands",
    "start": "866880",
    "end": "873199"
  },
  {
    "text": "who can see the vulnerability i the first i saw the first hand there",
    "start": "873199",
    "end": "881160"
  },
  {
    "text": "yeah exactly yeah chocolate for you so what she said",
    "start": "886000",
    "end": "892399"
  },
  {
    "text": "is that we allow reading more bites than we have",
    "start": "892399",
    "end": "897920"
  },
  {
    "text": "space for in the name so when we store whatever is written in standard in",
    "start": "897920",
    "end": "905120"
  },
  {
    "text": "we write overwrite on the stack up to the return address and we can overwrite the return address",
    "start": "905120",
    "end": "912560"
  },
  {
    "text": "so let's take a look at this illustration in which i've written and",
    "start": "912560",
    "end": "917680"
  },
  {
    "text": "sort of exploit and for every variable i've decided to",
    "start": "917680",
    "end": "923920"
  },
  {
    "text": "use like a b c d and i write 16 a's",
    "start": "923920",
    "end": "929680"
  },
  {
    "text": "to represent the name then four b's to",
    "start": "929680",
    "end": "935360"
  },
  {
    "text": "overwrite the age four c's to overwrite is hacker but then",
    "start": "935360",
    "end": "941199"
  },
  {
    "text": "we have this really strange thingy in the middle like there's it's just blank but we have four no eight ds",
    "start": "941199",
    "end": "949279"
  },
  {
    "text": "and that's because of stack alignment i mentioned that previously and the stack has to align",
    "start": "949279",
    "end": "956399"
  },
  {
    "text": "with 16 bytes and then in our case that will be 232",
    "start": "956399",
    "end": "962800"
  },
  {
    "text": "and then we add just eight to these we also don't care about what is um",
    "start": "962800",
    "end": "969759"
  },
  {
    "text": "on the saved base pointer but we definitely care what is written",
    "start": "969759",
    "end": "975519"
  },
  {
    "text": "on the return address because there we can put some address that we control and run our own",
    "start": "975519",
    "end": "981680"
  },
  {
    "text": "code to to run this example",
    "start": "981680",
    "end": "989199"
  },
  {
    "text": "we compiled the code with a flag that turns off a security mechanism",
    "start": "989199",
    "end": "996240"
  },
  {
    "text": "it turns off something called a stack cookie or cannery",
    "start": "996240",
    "end": "1001600"
  },
  {
    "text": "and it would go between the say basepointer and the local variables to make sure that we cannot",
    "start": "1001600",
    "end": "1008639"
  },
  {
    "text": "overwrite in this way however just like christian mentioned previously",
    "start": "1008639",
    "end": "1014720"
  },
  {
    "text": "a lot of people turned that off so it's still valid right it's still a",
    "start": "1014720",
    "end": "1020399"
  },
  {
    "text": "valid example so i sent all of this in to the program and we see that the program segments",
    "start": "1020399",
    "end": "1028798"
  },
  {
    "text": "and it says like code babe in question mark question mark",
    "start": "1028799",
    "end": "1033918"
  },
  {
    "text": "that really means that it tried to run the code in code vape",
    "start": "1033919",
    "end": "1039199"
  },
  {
    "text": "at the memory address at codebabe and it didn't work",
    "start": "1039199",
    "end": "1044160"
  },
  {
    "text": "but that means that we have control of the code and can run whatever code we want",
    "start": "1044400",
    "end": "1051880"
  },
  {
    "start": "1051000",
    "end": "1071000"
  },
  {
    "text": "okay i think that was the uh everything for the stack",
    "start": "1052160",
    "end": "1058720"
  },
  {
    "text": "are any questions about the stack there's one there's one here should we answer that now or do it later on",
    "start": "1058720",
    "end": "1066640"
  },
  {
    "text": "oh i don't know the answer of that let's just put it on",
    "start": "1066640",
    "end": "1071440"
  },
  {
    "start": "1071000",
    "end": "1140000"
  },
  {
    "text": "see if this works i hope that you have some thoughts about that oh yeah maybe so the question was did anyone consider",
    "start": "1071760",
    "end": "1078080"
  },
  {
    "text": "making a stack growing in the opposite direction to mitigate some attacks and i guess the growth direction of the",
    "start": "1078080",
    "end": "1085360"
  },
  {
    "text": "stack doesn't really matter does it even though it grows downwards we're still riding",
    "start": "1085360",
    "end": "1091760"
  },
  {
    "text": "up because the stack grows from high to low memory and but when we read and write from",
    "start": "1091760",
    "end": "1098160"
  },
  {
    "text": "buffers we go from low memory to high memory so i guess they would have to",
    "start": "1098160",
    "end": "1105120"
  },
  {
    "text": "completely move i mean they would have to like switch the order completely of",
    "start": "1105120",
    "end": "1110240"
  },
  {
    "text": "whatever is on the stack like the save base pointer and the return address and so on",
    "start": "1110240",
    "end": "1116559"
  },
  {
    "text": "i guess they could do it but you will still have the problem of like overriding adjacent",
    "start": "1116559",
    "end": "1122640"
  },
  {
    "text": "variables and so on so it's still still an issue so um i think the",
    "start": "1122640",
    "end": "1128559"
  },
  {
    "text": "stack cannery is the best solution maybe but yeah",
    "start": "1128559",
    "end": "1133600"
  },
  {
    "text": "good question oh we can do this later maybe yeah okay okay",
    "start": "1133600",
    "end": "1140480"
  },
  {
    "text": "yeah okay awesome so now we learned a little bit about the",
    "start": "1140480",
    "end": "1145520"
  },
  {
    "text": "stack and we can see that if we oh if we input more",
    "start": "1145520",
    "end": "1151440"
  },
  {
    "text": "input than what is it supposed to be then we can",
    "start": "1151440",
    "end": "1158080"
  },
  {
    "text": "manipulate the program to do something else and let's take a look at the heap",
    "start": "1158080",
    "end": "1164640"
  },
  {
    "start": "1163000",
    "end": "1247000"
  },
  {
    "text": "so the heap is very similar to the stack",
    "start": "1164640",
    "end": "1170320"
  },
  {
    "text": "except for that the stack has static memory allocation",
    "start": "1170320",
    "end": "1175520"
  },
  {
    "text": "which means that the space is determined at compile time",
    "start": "1175520",
    "end": "1181679"
  },
  {
    "text": "while the heap uses dynamic memory allocation so we get the space runtime",
    "start": "1181679",
    "end": "1190080"
  },
  {
    "text": "there are a couple of apis just for reference like when you use",
    "start": "1190400",
    "end": "1195760"
  },
  {
    "text": "the heap uh for instance in our code snippets we use malloc and free",
    "start": "1195760",
    "end": "1203120"
  },
  {
    "text": "while in c plus plus you can use delete and u",
    "start": "1203120",
    "end": "1208640"
  },
  {
    "text": "and there are also a lot of memory allocators the the memory allocator we use in our",
    "start": "1209360",
    "end": "1216000"
  },
  {
    "text": "snippets is glibc malloc others are like scudo partitional log jmalok and the",
    "start": "1216000",
    "end": "1222159"
  },
  {
    "text": "thing with all of these is that they have this um oh what did i call it like a trade-off",
    "start": "1222159",
    "end": "1229120"
  },
  {
    "text": "yeah between performance and security so some allocators they",
    "start": "1229120",
    "end": "1236640"
  },
  {
    "text": "enable security mechanisms others disable the same and",
    "start": "1236640",
    "end": "1242000"
  },
  {
    "text": "it's really it depends on your system which one you should use",
    "start": "1242000",
    "end": "1247039"
  },
  {
    "start": "1247000",
    "end": "1307000"
  },
  {
    "text": "and then back to the code snippets for this one we allocate",
    "start": "1247600",
    "end": "1254559"
  },
  {
    "text": "at 32 bytes on the heap for a username or d username and then",
    "start": "1254559",
    "end": "1260960"
  },
  {
    "text": "32 64 bytes on the heap for a command and then we copy the string date",
    "start": "1260960",
    "end": "1268400"
  },
  {
    "text": "into the command variable when we read um",
    "start": "1268400",
    "end": "1275039"
  },
  {
    "text": "uh or the the only difference here is that when we output the username we also run system",
    "start": "1275039",
    "end": "1281840"
  },
  {
    "text": "with uh the date command and we hard coded the data command right so it will always be the date command right",
    "start": "1281840",
    "end": "1290919"
  },
  {
    "text": "the same thing here there is a vulnerability and you will get the opportunity to",
    "start": "1291280",
    "end": "1296799"
  },
  {
    "text": "let us know what the vulnerability is and get some chocolate but first we're going to look at how the heap for this",
    "start": "1296799",
    "end": "1303919"
  },
  {
    "text": "program looks like this is our best effort",
    "start": "1303919",
    "end": "1310720"
  },
  {
    "start": "1307000",
    "end": "1351000"
  },
  {
    "text": "of illustrating the heap it's not that easy and the heap for this program",
    "start": "1310720",
    "end": "1316000"
  },
  {
    "text": "simply has two chunks and what we call each allocated space for a verbal is a chunk",
    "start": "1316000",
    "end": "1324480"
  },
  {
    "text": "so we have a chunk for the username and then we have a chunk",
    "start": "1324480",
    "end": "1330880"
  },
  {
    "text": "for the command they are right next to each other and",
    "start": "1330880",
    "end": "1336640"
  },
  {
    "text": "when the program runs whenever the malloc function is called again",
    "start": "1336640",
    "end": "1342640"
  },
  {
    "text": "it will find the next free memory space and then stored variable there",
    "start": "1342640",
    "end": "1349039"
  },
  {
    "start": "1351000",
    "end": "1487000"
  },
  {
    "text": "so for the intended way of running this program",
    "start": "1351440",
    "end": "1356720"
  },
  {
    "text": "we could insert fubar as the username and then fubar would be the",
    "start": "1356720",
    "end": "1363760"
  },
  {
    "text": "be what's stored in the username chunk and then of course the date is always",
    "start": "1363760",
    "end": "1369360"
  },
  {
    "text": "date in the command chunk right",
    "start": "1369360",
    "end": "1374720"
  },
  {
    "text": "so then when we run it it says like give username fubar hello foobar the time is",
    "start": "1374720",
    "end": "1380960"
  },
  {
    "text": "and then the date and now",
    "start": "1380960",
    "end": "1386480"
  },
  {
    "text": "are there anyone who wants to say what the vulnerability is oh",
    "start": "1386480",
    "end": "1392159"
  },
  {
    "text": "i think you were the fastest so if you use i don't know if you if you overflow the",
    "start": "1392159",
    "end": "1397520"
  },
  {
    "text": "username is there a possibility that you might actually put another name in the command function yeah okay will you",
    "start": "1397520",
    "end": "1403520"
  },
  {
    "text": "repeat yeah so the i think what you said was like if we put in more data then this username",
    "start": "1403520",
    "end": "1410880"
  },
  {
    "text": "buffer can hold we will actually end up overwriting the command and we can put something else there instead yeah",
    "start": "1410880",
    "end": "1417280"
  },
  {
    "text": "definitely do you have any uh thoughts on what would be uh fun to write with",
    "start": "1417280",
    "end": "1424240"
  },
  {
    "text": "no i don't know all right but i have a very funny or i",
    "start": "1424240",
    "end": "1429440"
  },
  {
    "text": "mean i didn't do it uh christian came with a very funny idea uh of using khao sei",
    "start": "1429440",
    "end": "1435600"
  },
  {
    "text": "so we uh just inserted a lot of ace until right before",
    "start": "1435600",
    "end": "1441760"
  },
  {
    "text": "the date chunk and then we override with a command we wanted to run",
    "start": "1441760",
    "end": "1447840"
  },
  {
    "text": "and one thing that is really important to note here is that we did not turn off any security mechanisms",
    "start": "1447840",
    "end": "1454640"
  },
  {
    "text": "so this is just compiled totally correctly and",
    "start": "1454640",
    "end": "1460080"
  },
  {
    "text": "yeah and then when we",
    "start": "1460080",
    "end": "1465120"
  },
  {
    "text": "write this input instead of the username we get this output which is instead of the",
    "start": "1465120",
    "end": "1471600"
  },
  {
    "text": "date calce in which we can run any command",
    "start": "1471600",
    "end": "1477520"
  },
  {
    "text": "uh we want we have to remember to change this for javascript yeah it doesn't say",
    "start": "1477520",
    "end": "1487400"
  },
  {
    "start": "1487000",
    "end": "1537000"
  },
  {
    "text": "all right so that was uh introduction for the stack in the heap and i just have to say this",
    "start": "1488080",
    "end": "1494720"
  },
  {
    "text": "that uh it can be really hard to understand and like if you don't get it",
    "start": "1494720",
    "end": "1501360"
  },
  {
    "text": "it might take a couple of times to understand how the stack in the heap works so please do not feel",
    "start": "1501360",
    "end": "1506960"
  },
  {
    "text": "uh down or feel bad about yourself if it's hard to understand it really",
    "start": "1506960",
    "end": "1512400"
  },
  {
    "text": "might be a little difficult um are there any questions about uh we have",
    "start": "1512400",
    "end": "1519200"
  },
  {
    "text": "some more questions now actually you want to do them now or we can do them later then we know we can yeah yeah i'll",
    "start": "1519200",
    "end": "1525679"
  },
  {
    "text": "do them later um yeah yep thank you",
    "start": "1525679",
    "end": "1531279"
  },
  {
    "text": "so then over to the real world example yes so let's dive right in",
    "start": "1531279",
    "end": "1538880"
  },
  {
    "start": "1537000",
    "end": "1672000"
  },
  {
    "text": "can we change try trying to fall behind the stage all right so this real world example",
    "start": "1538880",
    "end": "1545360"
  },
  {
    "text": "that we chose is a bug in sudo and just to make it clear this is not found by us or anything it's found by a company",
    "start": "1545360",
    "end": "1552240"
  },
  {
    "text": "called qualis and they do really cool research so if you like this kind of stuff you should really check them out uh they publish a",
    "start": "1552240",
    "end": "1559120"
  },
  {
    "text": "bunch of really cool yeah papers about attacks on usually",
    "start": "1559120",
    "end": "1564720"
  },
  {
    "text": "like really uh like common software like sudo is found everywhere right on your servers",
    "start": "1564720",
    "end": "1570320"
  },
  {
    "text": "and stuff like that and your desktops so yeah really good work by them and this",
    "start": "1570320",
    "end": "1576159"
  },
  {
    "text": "is a sorry this is a heap overflow in sudo edit and sudo edit is just a sim link to",
    "start": "1576159",
    "end": "1582320"
  },
  {
    "text": "sudo that you use that sudo kind of picks up that it's being launched as pseudo edit and it's used to edit files",
    "start": "1582320",
    "end": "1588799"
  },
  {
    "text": "instead and this bug allows privilege escalation",
    "start": "1588799",
    "end": "1594320"
  },
  {
    "text": "to root so if you're not familiar with linux root is basically admin i mean you can do anything",
    "start": "1594320",
    "end": "1600400"
  },
  {
    "text": "once you're root and just as a fun fact here so me and another guy when qualis",
    "start": "1600400",
    "end": "1607520"
  },
  {
    "text": "published the details about the pseudobug they only publish like",
    "start": "1607520",
    "end": "1612720"
  },
  {
    "text": "uh this is the vulnerability this is how we uh exploited the vulnerability uh but",
    "start": "1612720",
    "end": "1618240"
  },
  {
    "text": "they didn't publish any code to actually exploit the vulnerability to limit the damage that you know i mean this can do",
    "start": "1618240",
    "end": "1625360"
  },
  {
    "text": "um so they didn't want anyone to you know copy paste code and go ahead and exploit",
    "start": "1625360",
    "end": "1630480"
  },
  {
    "text": "servers so but me and another danish guy we were playing around with with this bug because it was interesting and we",
    "start": "1630480",
    "end": "1636159"
  },
  {
    "text": "wanted to see if we could recreate the research and after a couple of days we were able to",
    "start": "1636159",
    "end": "1642159"
  },
  {
    "text": "uh create a stable exploit for this one version of sudo and could probably take it further for other versions as",
    "start": "1642159",
    "end": "1648399"
  },
  {
    "text": "well uh it just goes to show that like we were just playing around and got it working in two days",
    "start": "1648399",
    "end": "1654799"
  },
  {
    "text": "so someone with more skill and motivation would be able to do it quicker probably so when like reports like this are",
    "start": "1654799",
    "end": "1661679"
  },
  {
    "text": "published it's probably a good idea to patch quickly or else people will yeah you know jump on it and try to",
    "start": "1661679",
    "end": "1668559"
  },
  {
    "text": "abuse it very quickly all right so let's dive straight into",
    "start": "1668559",
    "end": "1675600"
  },
  {
    "start": "1672000",
    "end": "1964000"
  },
  {
    "text": "the code um yeah this is the vulnerable piece of code in sudo and there are some like",
    "start": "1675600",
    "end": "1682399"
  },
  {
    "text": "requirements for getting to this vulnerable piece of code but i'm not gonna get into the details you can read",
    "start": "1682399",
    "end": "1687919"
  },
  {
    "text": "the full report if you're interested um but we're gonna go through this step by step so don't worry if you don't",
    "start": "1687919",
    "end": "1694960"
  },
  {
    "text": "understand it like right away um yeah so the interesting thing here at the start we're just going to start in",
    "start": "1694960",
    "end": "1701279"
  },
  {
    "text": "the for loop there are these two variables that are being assigned to our from and it's 2",
    "start": "1701279",
    "end": "1707760"
  },
  {
    "text": "and av so two here uh you see it's assigned from something called user args",
    "start": "1707760",
    "end": "1713840"
  },
  {
    "text": "and this is a heap buffer and you know mark said this is a heap overflow so this is the first clue",
    "start": "1713840",
    "end": "1720720"
  },
  {
    "text": "and user rxci is allocated beforehand and it's supposed to be able to hold every single command line argument",
    "start": "1720720",
    "end": "1726720"
  },
  {
    "text": "that's passed to pseudo and you can see av here comes from new arc v plus one",
    "start": "1726720",
    "end": "1733520"
  },
  {
    "text": "so if you're not familiar with c arc v is basically just a list of all the command line arguments that are",
    "start": "1733520",
    "end": "1739919"
  },
  {
    "text": "passed to the program and plus one is to skip the first entry which is just the name of the program so",
    "start": "1739919",
    "end": "1746240"
  },
  {
    "text": "we're only interested in whatever flags or you know names of files or whatever is passed to",
    "start": "1746240",
    "end": "1752399"
  },
  {
    "text": "sudo and then the condition here is just checking we still have more entries in",
    "start": "1752399",
    "end": "1758559"
  },
  {
    "text": "this argument vector and then we're just looping through everyone so every single command line argument is looped through and we're",
    "start": "1758559",
    "end": "1766480"
  },
  {
    "text": "constantly assigning to this user args buffer so then comes this while loop so if",
    "start": "1766480",
    "end": "1773840"
  },
  {
    "text": "you're not familiar with c strings in c are just a",
    "start": "1773840",
    "end": "1779200"
  },
  {
    "text": "sequence of characters that's like ended with a null terminator so it's just a zero zero byte",
    "start": "1779200",
    "end": "1785840"
  },
  {
    "text": "and there's no like in other languages uh there's no size",
    "start": "1785840",
    "end": "1790960"
  },
  {
    "text": "attached to this data so when you're like going through a string to see how long it is you have to",
    "start": "1790960",
    "end": "1796159"
  },
  {
    "text": "kind of count until you reach a zero and then oh okay it was this long which might sound insane if you're never",
    "start": "1796159",
    "end": "1802720"
  },
  {
    "text": "programmed in c before but yeah that's how it is so what's this while loop is checking is",
    "start": "1802720",
    "end": "1808240"
  },
  {
    "text": "that it's just checking are we at a zero which means is this the end of the string",
    "start": "1808240",
    "end": "1813440"
  },
  {
    "text": "and as long as that's not true we're looping and then there's this complicated if test we're just going to skip that for",
    "start": "1813440",
    "end": "1819600"
  },
  {
    "text": "now and you see this assignment so this as well is maybe a bit confusing syntax",
    "start": "1819600",
    "end": "1825279"
  },
  {
    "text": "but what it's doing on the right hand side is that we're dereferencing from that's the star we're grabbing one",
    "start": "1825279",
    "end": "1831520"
  },
  {
    "text": "character from this buffer or this pointer and then we're incrementing it",
    "start": "1831520",
    "end": "1837360"
  },
  {
    "text": "and then on the other hand we're storing that character into two",
    "start": "1837360",
    "end": "1842640"
  },
  {
    "text": "and then incrementing it so this loop is just doing string copy if you're familiar with c",
    "start": "1842640",
    "end": "1848399"
  },
  {
    "text": "if we ignore the if test so it's just copying characters as long as we're not at the end of the string",
    "start": "1848399",
    "end": "1854640"
  },
  {
    "text": "but then comes the interesting part is if test so it's checking are we currently at a backslash you know",
    "start": "1854640",
    "end": "1860799"
  },
  {
    "text": "because this is handling escape characters somehow um and then it's checking is the next",
    "start": "1860799",
    "end": "1866640"
  },
  {
    "text": "character not a space character so which means a space character uh at",
    "start": "1866640",
    "end": "1872720"
  },
  {
    "text": "least from is spaces like point of view it's a new line a space",
    "start": "1872720",
    "end": "1878399"
  },
  {
    "text": "a tab whatever um and then if this is not a space character like if it's a b c or whatever",
    "start": "1878399",
    "end": "1885360"
  },
  {
    "text": "uh it will go into this if block and increment from which means we skip the backslash",
    "start": "1885360",
    "end": "1893760"
  },
  {
    "text": "so the bug here is if we imagine that we are at the end of the string and we have a backslash all the way at",
    "start": "1893760",
    "end": "1900799"
  },
  {
    "text": "the end um this first check will pass like from zero is the backslash and then we check",
    "start": "1900799",
    "end": "1907519"
  },
  {
    "text": "the next character and if you remember what i said like every c string is terminated by a zero",
    "start": "1907519",
    "end": "1914080"
  },
  {
    "text": "so it will check is this zero a space character and it's not considered a space",
    "start": "1914080",
    "end": "1919120"
  },
  {
    "text": "so we go into the if block and we increment the pointer and now we're actually looking at",
    "start": "1919120",
    "end": "1924960"
  },
  {
    "text": "the zero and then when the if block is done we copy the zero and then increment past",
    "start": "1924960",
    "end": "1931440"
  },
  {
    "text": "the end of the buffer so at this point we're outside of the memory that we control we're suddenly out in you know",
    "start": "1931440",
    "end": "1937679"
  },
  {
    "text": "undefined behavior land as we call it in c and we keep storing like if there's some",
    "start": "1937679",
    "end": "1944000"
  },
  {
    "text": "you know if there aren't a bunch of zeros there we keep copying whatever garbage is stored after into this user",
    "start": "1944000",
    "end": "1950240"
  },
  {
    "text": "argus buffer which is only uh which can only hold you know um or it's only designed to hold the",
    "start": "1950240",
    "end": "1957519"
  },
  {
    "text": "number of characters in the command line arguments but suddenly we can copy more yeah there's the clicker",
    "start": "1957519",
    "end": "1964799"
  },
  {
    "start": "1964000",
    "end": "2022000"
  },
  {
    "text": "so this is how it could look like in memory like if we uh imagine that we have like on your left hand side we have",
    "start": "1964799",
    "end": "1971919"
  },
  {
    "text": "these two strings hey with a backslash at the end and then buy and for some reason they're stored after each other",
    "start": "1971919",
    "end": "1978000"
  },
  {
    "text": "in memory and if we look at like the result of this operation on",
    "start": "1978000",
    "end": "1984080"
  },
  {
    "text": "your right hand side you'll see that we copy first hey we get to the",
    "start": "1984080",
    "end": "1989919"
  },
  {
    "text": "backslash and then we just skip it we copy the zero and suddenly we're copying memory from this other string",
    "start": "1989919",
    "end": "1996320"
  },
  {
    "text": "that was for some reason next to our buffer so in the end we have hey null terminator and then by",
    "start": "1996320",
    "end": "2003519"
  },
  {
    "text": "and then they'll terminator so suddenly we like in um in the pseudocase we might have you know",
    "start": "2003519",
    "end": "2009279"
  },
  {
    "text": "allocated room for i know one two three four characters maybe with the null",
    "start": "2009279",
    "end": "2014480"
  },
  {
    "text": "terminator but suddenly we have this other screen in there as well so we copied way too much data here",
    "start": "2014480",
    "end": "2022960"
  },
  {
    "start": "2022000",
    "end": "2073000"
  },
  {
    "text": "yeah so let's just kind of summarize the bug here's the vulnerable piece of code again",
    "start": "2023919",
    "end": "2029760"
  },
  {
    "text": "so what we're doing is we're copying data from av which is the command line arguments right and we're overflowing or potentially",
    "start": "2029760",
    "end": "2036320"
  },
  {
    "text": "overflowing this user argus buffer and user args is allocated on the heap",
    "start": "2036320",
    "end": "2042640"
  },
  {
    "text": "the memory you know the size has been determined up front and sudo has allocated only enough space to hold the",
    "start": "2042640",
    "end": "2048480"
  },
  {
    "text": "characters in the command line arguments and then another fun fact here is that",
    "start": "2048480",
    "end": "2054720"
  },
  {
    "text": "av is actually allocated on the stack so the argument vector when you",
    "start": "2054720",
    "end": "2060480"
  },
  {
    "text": "start a c program the linux kernel will just copy all the command line arguments",
    "start": "2060480",
    "end": "2066000"
  },
  {
    "text": "onto the stack for you so this memory is actually coming from the stack",
    "start": "2066000",
    "end": "2072078"
  },
  {
    "start": "2073000",
    "end": "2180000"
  },
  {
    "text": "so let's think about this so um i said earlier that if there aren't any like zero bytes",
    "start": "2075760",
    "end": "2081919"
  },
  {
    "text": "after this buffer we will copy whatever is stored there so our question is then what's stored",
    "start": "2081919",
    "end": "2088079"
  },
  {
    "text": "after the an um argument vector like all the command line arguments",
    "start": "2088079",
    "end": "2093760"
  },
  {
    "text": "and it turns out that the linux kernel will first copy all the command line arguments and then it will copy all the environment variables and they will be",
    "start": "2093760",
    "end": "2100960"
  },
  {
    "text": "right next to each other in memory which is very convenient for us because the environment variables can be controlled",
    "start": "2100960",
    "end": "2108320"
  },
  {
    "text": "which you might know if you've ever used the end of a command or yeah whatever",
    "start": "2108320",
    "end": "2114640"
  },
  {
    "text": "yeah so at the bottom here you can see an example of how it could look like if you have a program called test",
    "start": "2115200",
    "end": "2121040"
  },
  {
    "text": "with no command line arguments and two environment variables this is the layout in memory you would have the name of the",
    "start": "2121040",
    "end": "2127440"
  },
  {
    "text": "program that's the first argument vector entry and then you have all the",
    "start": "2127440",
    "end": "2132720"
  },
  {
    "text": "different environment variables that are just stored right after each other in memory",
    "start": "2132720",
    "end": "2138480"
  },
  {
    "text": "so also when we talk about exploitation we often want to we often want to know what we control",
    "start": "2138480",
    "end": "2144720"
  },
  {
    "text": "and if there are any limitations because the more control we have the easier it is to write an exploit",
    "start": "2144720",
    "end": "2151760"
  },
  {
    "text": "so in this case like are there any limitations like what can we store in the environment variable",
    "start": "2151760",
    "end": "2157359"
  },
  {
    "text": "or variables and it turns out we can store base pretty much anything it doesn't have to be a string the linux",
    "start": "2157359",
    "end": "2163119"
  },
  {
    "text": "kernel doesn't care if you put a pdf in your environment variables you can put anything there",
    "start": "2163119",
    "end": "2169040"
  },
  {
    "text": "so that's fully controlled by us by using the xxv system call on linux that's what you use to start new",
    "start": "2169040",
    "end": "2174560"
  },
  {
    "text": "processes so that's great from a exploitation point of view",
    "start": "2174560",
    "end": "2181599"
  },
  {
    "start": "2180000",
    "end": "2539000"
  },
  {
    "text": "yeah so just to kind of reiterate re-control the overflow size so like we can overflow this heat buffer",
    "start": "2182320",
    "end": "2188640"
  },
  {
    "text": "and we also control the contents because it's being copied from the stack or from the environment variables which we can",
    "start": "2188640",
    "end": "2194560"
  },
  {
    "text": "fully control and so one thing that's going to be clear later is that it's important for",
    "start": "2194560",
    "end": "2200800"
  },
  {
    "text": "us to be able to write null bytes and if you remember like when the code",
    "start": "2200800",
    "end": "2206320"
  },
  {
    "text": "hits a backslash and the next character is a null it will copy the null and skip the backslash so",
    "start": "2206320",
    "end": "2212560"
  },
  {
    "text": "by sending in a bunch of just backslashes as environment variables uh the sudo will just keep copying zero",
    "start": "2212560",
    "end": "2219280"
  },
  {
    "text": "bytes and then skip to the next backslash and this will also be you know skipped and then you get the",
    "start": "2219280",
    "end": "2224960"
  },
  {
    "text": "next null byte and so on so this is uh this is something that's actually required for the exploit and you'll",
    "start": "2224960",
    "end": "2230560"
  },
  {
    "text": "you'll see later how it looks like yeah so the question is then like what",
    "start": "2230560",
    "end": "2236400"
  },
  {
    "text": "do we target this okay we can overflow some data on the heap but where does it go i mean",
    "start": "2236400",
    "end": "2242640"
  },
  {
    "text": "how do we know what to what's our goal here so what qualis did that was really cool",
    "start": "2242640",
    "end": "2248079"
  },
  {
    "text": "and we actually when me and my danish friend were trying to re-implement this attack",
    "start": "2248079",
    "end": "2254400"
  },
  {
    "text": "is doing sort of fuzzing where you kind of throw random stuff at pseudo",
    "start": "2254400",
    "end": "2259599"
  },
  {
    "text": "and you see like where does it crash so by varying the command line argument length the",
    "start": "2259599",
    "end": "2265440"
  },
  {
    "text": "different environment variables and so on uh the behavior of pseudo will change slightly and you try to trigger this bug",
    "start": "2265440",
    "end": "2272800"
  },
  {
    "text": "or this vulnerable piece of code and by doing this like they were collecting back traces which is just",
    "start": "2272800",
    "end": "2279280"
  },
  {
    "text": "um with gdb debugger and with the back trace you can see okay it crashed on this line and it came from this",
    "start": "2279280",
    "end": "2286800"
  },
  {
    "text": "piece of code or this function um and one very interesting function crash that they found we were actually",
    "start": "2286800",
    "end": "2293200"
  },
  {
    "text": "able to find as well after running our faster from for way too many hours was this crash in a",
    "start": "2293200",
    "end": "2299760"
  },
  {
    "text": "function called nss load library and i have no idea what this function does or why it's there",
    "start": "2299760",
    "end": "2305920"
  },
  {
    "text": "but it's a part of the standard library i think and why this function is",
    "start": "2305920",
    "end": "2311040"
  },
  {
    "text": "interesting from an attacker's point of view is because this is loading a library",
    "start": "2311040",
    "end": "2316720"
  },
  {
    "text": "and if you load the library that's attacker controlled",
    "start": "2316720",
    "end": "2322400"
  },
  {
    "text": "you can actually get code execution at load time it doesn't even have to use your library for anything",
    "start": "2322400",
    "end": "2328079"
  },
  {
    "text": "and the reason for that is uh like i just like you see at the bottom like the last line in this piece",
    "start": "2328079",
    "end": "2334160"
  },
  {
    "text": "of code is it calls dl open uh which is what is it short for dynamic library",
    "start": "2334160",
    "end": "2340400"
  },
  {
    "text": "open or something um and if your library that's being opened uh contains",
    "start": "2340400",
    "end": "2346720"
  },
  {
    "text": "a constructor this will run at load time and this is not your like if you're used to writing cpus bus it's not a simplest",
    "start": "2346720",
    "end": "2353440"
  },
  {
    "text": "plus constructor but it's a special",
    "start": "2353440",
    "end": "2358560"
  },
  {
    "text": "hint you can give to the compiler to say that this function should run at load time and that's used by i think it's",
    "start": "2358560",
    "end": "2365200"
  },
  {
    "text": "used a lot by c plus for example to do initialization early on when you load the library and",
    "start": "2365200",
    "end": "2370400"
  },
  {
    "text": "then you can use functionality uh later on yeah so what we want to do like um",
    "start": "2370400",
    "end": "2378880"
  },
  {
    "text": "yeah one thing i forgot to mention uh was that like when qualis found these crashes and when we found the crashes as",
    "start": "2378880",
    "end": "2385280"
  },
  {
    "text": "well after you know trying to fuss sudo and trying different lengths and stuff was that this function",
    "start": "2385280",
    "end": "2391599"
  },
  {
    "text": "would crash because i think this library pointer you can see that it's dereferencing a",
    "start": "2391599",
    "end": "2396880"
  },
  {
    "text": "library pointer in the second if test and this pointer was just garbage it contained a bunch of you know ace or",
    "start": "2396880",
    "end": "2403839"
  },
  {
    "text": "something and this will crash because it's not a valid memory address which means that we fully control the",
    "start": "2403839",
    "end": "2410480"
  },
  {
    "text": "contents of this service users track that's passed as a parameter to this function",
    "start": "2410480",
    "end": "2416079"
  },
  {
    "text": "and if we kind of look go through the code i've kind of shortened it down a bit so it's easier",
    "start": "2416079",
    "end": "2421839"
  },
  {
    "text": "to read so in the first if test here we check is this library pointer null",
    "start": "2421839",
    "end": "2426960"
  },
  {
    "text": "so we know now know that okay if we somehow can set this pointer to null",
    "start": "2426960",
    "end": "2432560"
  },
  {
    "text": "the function will actually initialize it for us which is very nice it does all the work for us",
    "start": "2432560",
    "end": "2437680"
  },
  {
    "text": "and then it gets to this next if test it checks if the library's lib handle is",
    "start": "2437680",
    "end": "2443040"
  },
  {
    "text": "also null and this will be true if the first if block is true",
    "start": "2443040",
    "end": "2449680"
  },
  {
    "text": "and in this case it will construct a shared library name using this",
    "start": "2449680",
    "end": "2454800"
  },
  {
    "text": "horrible chain of stp copy calls and the library name will end up being",
    "start": "2454800",
    "end": "2460880"
  },
  {
    "text": "lib nss underscore and then whatever is inside of this service user struct",
    "start": "2460880",
    "end": "2466640"
  },
  {
    "text": "dot so and then there's a revision at the end which is dot 2 for some reason i'm not sure why if you know please let",
    "start": "2466640",
    "end": "2472720"
  },
  {
    "text": "me know and then at the end it will open this library so if we control if we can set this",
    "start": "2472720",
    "end": "2478800"
  },
  {
    "text": "library pointer to null and then also con control the name inside of this service",
    "start": "2478800",
    "end": "2484000"
  },
  {
    "text": "user struct we can make the code open any library that we control and thus get code execution",
    "start": "2484000",
    "end": "2491599"
  },
  {
    "text": "yeah so just for completeness this is how the service user uh struct looks like uh we don't really care about",
    "start": "2493359",
    "end": "2499440"
  },
  {
    "text": "anything except for the library you want we need that to be null so we need to know like where in memory",
    "start": "2499440",
    "end": "2505359"
  },
  {
    "text": "from the start of the struct this is located and then we have the name at the end",
    "start": "2505359",
    "end": "2510400"
  },
  {
    "text": "so again if you're not familiar with c the reason why it says char name and 0 is because this is a flexible",
    "start": "2510400",
    "end": "2517280"
  },
  {
    "text": "i remember and it's in my opinion a terrible like",
    "start": "2517280",
    "end": "2522319"
  },
  {
    "text": "language construct but um whatever basically it's used so you can have like a flexible size of the name so when you",
    "start": "2522319",
    "end": "2529680"
  },
  {
    "text": "allocate the struct you allocate the size of the strike plus whatever is the name length and then you have that much space for",
    "start": "2529680",
    "end": "2536319"
  },
  {
    "text": "the name at the end",
    "start": "2536319",
    "end": "2539119"
  },
  {
    "text": "yeah so this is our goal right we have this user argus buffer which is stored on the heap and we're",
    "start": "2541920",
    "end": "2548560"
  },
  {
    "text": "copying you know a bunch of garbage from the environment variables and what we want to do is we want to set",
    "start": "2548560",
    "end": "2555359"
  },
  {
    "text": "this uh yeah we want to set the library",
    "start": "2555359",
    "end": "2561280"
  },
  {
    "text": "pointer to null and the name to in this case we've chosen x slash x",
    "start": "2561280",
    "end": "2567440"
  },
  {
    "text": "so the library name will end up being lib nss underscore x slash x.so.2 so it lives inside of this folder",
    "start": "2567440",
    "end": "2576880"
  },
  {
    "text": "um yeah and the rest we we just set the whole service users track to know so we",
    "start": "2576880",
    "end": "2582880"
  },
  {
    "text": "just have to overflow until we reach this service user struct and then we can control everything",
    "start": "2582880",
    "end": "2590280"
  },
  {
    "start": "2590000",
    "end": "2640000"
  },
  {
    "text": "yeah so this is how our shared library will look like it's a very very simple piece of code",
    "start": "2592640",
    "end": "2597839"
  },
  {
    "text": "uh the only thing we're doing is we're setting the user id and gid to zero and this",
    "start": "2597839",
    "end": "2604960"
  },
  {
    "text": "is roots user id so this basically gives us root privileges and then we start a shell",
    "start": "2605040",
    "end": "2611440"
  },
  {
    "text": "with execute that's how we launch processes on linux and then there's this interesting part",
    "start": "2611440",
    "end": "2617280"
  },
  {
    "text": "at the top there we have this attribute constructor and this is like a special",
    "start": "2617280",
    "end": "2622640"
  },
  {
    "text": "compiler magic thingy you can specify and the compiler will put this",
    "start": "2622640",
    "end": "2628160"
  },
  {
    "text": "function into a special table that will be loaded or it will be run at load time so",
    "start": "2628160",
    "end": "2634960"
  },
  {
    "text": "this is how we create our constructor",
    "start": "2634960",
    "end": "2638640"
  },
  {
    "start": "2640000",
    "end": "3062000"
  },
  {
    "text": "oops yeah demo all right",
    "start": "2640480",
    "end": "2646000"
  },
  {
    "text": "so now we will see how this is how we run the exploit basically",
    "start": "2646000",
    "end": "2652480"
  },
  {
    "text": "right yep um wait i actually have this running",
    "start": "2652480",
    "end": "2658400"
  },
  {
    "text": "already maybe a little bigger yeah hang on just kind of",
    "start": "2658400",
    "end": "2664319"
  },
  {
    "text": "okay it's very easy all right so um",
    "start": "2665839",
    "end": "2673440"
  },
  {
    "text": "yeah so we have this docker container that we're using to run this and just so we kind of know that the",
    "start": "2673440",
    "end": "2680160"
  },
  {
    "text": "result will be the same every time yeah because sometimes if you upgrade",
    "start": "2680160",
    "end": "2685760"
  },
  {
    "text": "sudo there will be slight differences or the standard c library breaks your exploit",
    "start": "2685760",
    "end": "2691440"
  },
  {
    "text": "and actually like i mentioned earlier like me and my danish friend we only made an exploit for a very specific",
    "start": "2691440",
    "end": "2696800"
  },
  {
    "text": "version of sudo so we cheated a bit and this is not actually our exploit this is someone else's um",
    "start": "2696800",
    "end": "2703440"
  },
  {
    "text": "captain gibbon on github so all credit for this exploit goes to them um",
    "start": "2703440",
    "end": "2708640"
  },
  {
    "text": "but most of the you can find a lot of different pseudo exploits on github and most they will vary a little bit in like",
    "start": "2708640",
    "end": "2715040"
  },
  {
    "text": "their technique so yeah if you're interested there's a bunch of them on on github",
    "start": "2715040",
    "end": "2720480"
  },
  {
    "text": "so let's kind of look very quickly through the exploit before we run it",
    "start": "2720480",
    "end": "2727440"
  },
  {
    "text": "sorry i'm gonna yep",
    "start": "2728240",
    "end": "2734240"
  },
  {
    "text": "all right is that readable yeah i hope so so if you start at the end here this is",
    "start": "2734640",
    "end": "2740880"
  },
  {
    "text": "where we kind of launch our exploit we're calling xxv and we're starting",
    "start": "2740880",
    "end": "2746000"
  },
  {
    "text": "pseudo-edit so we're launching this program with arc v and np which is our",
    "start": "2746000",
    "end": "2751280"
  },
  {
    "text": "command line arguments and our environment variables so these are our like crafted",
    "start": "2751280",
    "end": "2758000"
  },
  {
    "text": "values that we control and then we have this huge weird area here",
    "start": "2758000",
    "end": "2763920"
  },
  {
    "text": "this is the environment variables so at this start here we have an uh it's a buffer called overflow",
    "start": "2763920",
    "end": "2771040"
  },
  {
    "text": "and this is here for it's a technique in exploitation that we",
    "start": "2771040",
    "end": "2776800"
  },
  {
    "text": "call heap feng shui where you kind of want to to control how the heap looks",
    "start": "2776800",
    "end": "2781839"
  },
  {
    "text": "like and so you have to do some weird stuff and that influences like how things are placed on the heap so like",
    "start": "2781839",
    "end": "2788880"
  },
  {
    "text": "mart mentioned in the heap illustration like the he this hip allocator will pick",
    "start": "2788880",
    "end": "2794240"
  },
  {
    "text": "like the first chunk on the heap that's of the correct size",
    "start": "2794240",
    "end": "2799760"
  },
  {
    "text": "so by allocating and freeing and so on you can kind of control uh how the heap layout looks like",
    "start": "2799760",
    "end": "2806400"
  },
  {
    "text": "that's what the first thing is for right yeah that was what the fusing ones were so instead of like understanding",
    "start": "2806400",
    "end": "2812079"
  },
  {
    "text": "everything uh we just fuss until we find a cool heap layout that we like",
    "start": "2812079",
    "end": "2817359"
  },
  {
    "text": "yeah let the computer do the work so yeah uh so this overflow is just here",
    "start": "2817359",
    "end": "2823440"
  },
  {
    "text": "to kind of make sure that when we're when we're overflowing we're copying data all the way into this service user",
    "start": "2823440",
    "end": "2828640"
  },
  {
    "text": "structure and then you see there's a bunch of yeah there's a bunch of stuff here there's",
    "start": "2828640",
    "end": "2833760"
  },
  {
    "text": "some these backslashes these copy will copy null bytes so we keep copying null bytes",
    "start": "2833760",
    "end": "2839280"
  },
  {
    "text": "and then there's some x's in there i think that's to fill one of the fields",
    "start": "2839280",
    "end": "2844480"
  },
  {
    "text": "and then there's more zeros and then at the end here you see x slash x",
    "start": "2844480",
    "end": "2849839"
  },
  {
    "text": "and this will be the library name so all of this stuff will be copied onto the heap and we'll end up trashing this",
    "start": "2849839",
    "end": "2856400"
  },
  {
    "text": "user service users we also have some more you see this",
    "start": "2856400",
    "end": "2862240"
  },
  {
    "text": "weird thing is here so these are what's called lc variables",
    "start": "2862240",
    "end": "2867680"
  },
  {
    "text": "or yeah i think that's what what they're called and these are used on your system to specify for example",
    "start": "2867680",
    "end": "2874559"
  },
  {
    "text": "uh what's the phone number format and stuff like that and the reason why this exploit is using",
    "start": "2874559",
    "end": "2880880"
  },
  {
    "text": "it uh like here you can see measurement unit like depending on your country",
    "start": "2880880",
    "end": "2886640"
  },
  {
    "text": "or your region these might change right but in this exploit these are being",
    "start": "2886640",
    "end": "2891760"
  },
  {
    "text": "abused also to do heap feng shui because these lc variables will be picked up by",
    "start": "2891760",
    "end": "2896880"
  },
  {
    "text": "the standard library when the program is loaded so very early on in the load process this will be picked up and",
    "start": "2896880",
    "end": "2902720"
  },
  {
    "text": "stored on the heap so by throwing this into the environment variables this will be picked up by the",
    "start": "2902720",
    "end": "2908960"
  },
  {
    "text": "library c library and then it influences the layout of the heap so these",
    "start": "2908960",
    "end": "2915359"
  },
  {
    "text": "lc variables is also something that when we were doing the fussing we were changing the sizes of these to see how",
    "start": "2915359",
    "end": "2920559"
  },
  {
    "text": "it influenced the heap layout",
    "start": "2920559",
    "end": "2926078"
  },
  {
    "text": "and then at the start here this is the command line arguments so we have pseudoedit and then we have",
    "start": "2926880",
    "end": "2932240"
  },
  {
    "text": "this s-s-flag and this is actually needed for the exploit but i can't remember why it's been a",
    "start": "2932240",
    "end": "2937359"
  },
  {
    "text": "while since i looked at this but it's explained in there in the quality's explanation or paper",
    "start": "2937359",
    "end": "2944240"
  },
  {
    "text": "and then we have this buffer and you can see there's a bunch of random garbage and then at the end we",
    "start": "2944240",
    "end": "2949920"
  },
  {
    "text": "put a backslash and this is what kind of kicks off the whole exploit so when sudo actually reaches this",
    "start": "2949920",
    "end": "2956319"
  },
  {
    "text": "backslash here it will start reading into these environment variables",
    "start": "2956319",
    "end": "2963520"
  },
  {
    "text": "and then it will just keep copying until it reaches the end there",
    "start": "2963520",
    "end": "2968319"
  },
  {
    "text": "yeah so let's see how it looks like let's go to the most exciting part yeah",
    "start": "2968640",
    "end": "2975280"
  },
  {
    "text": "i guess this is the least exciting yeah so this is we just run this binary so we",
    "start": "2975280",
    "end": "2981280"
  },
  {
    "text": "compile some code from github and then we run it oh wait i can also show you yeah do that first uh yeah we",
    "start": "2981280",
    "end": "2987920"
  },
  {
    "text": "also have this library here lib nss uh underscore x and there's this library inside also maybe show that we",
    "start": "2987920",
    "end": "2995200"
  },
  {
    "text": "do not have privileges just yeah so oh that's a really really important part we didn't really mention like",
    "start": "2995200",
    "end": "3001520"
  },
  {
    "text": "why is it so important uh or why is it such a cool kind of bug",
    "start": "3001520",
    "end": "3008400"
  },
  {
    "text": "uh since it's sudo and it's so cool because sudo gives us",
    "start": "3008400",
    "end": "3013839"
  },
  {
    "text": "privileges right so if we get to exploit sudo we get higher privileges yeah so",
    "start": "3013839",
    "end": "3019359"
  },
  {
    "text": "the whole point of pseudo is to give someone higher privileges yeah so this is a perfect example of a program that",
    "start": "3019359",
    "end": "3025280"
  },
  {
    "text": "if you find a bug here you have i mean it gives you free root access",
    "start": "3025280",
    "end": "3030400"
  },
  {
    "text": "so yeah let's run the exploit and it's very not very interesting but",
    "start": "3030400",
    "end": "3035440"
  },
  {
    "text": "suddenly we're root so just by running this weird binary we fully hijacked the control flow of sudo",
    "start": "3035440",
    "end": "3042559"
  },
  {
    "text": "and tricked it into loading a library and suddenly a route",
    "start": "3042559",
    "end": "3047680"
  },
  {
    "text": "it's not very exciting to look at but behind the scenes there are there's all of this weird stuff happening right you",
    "start": "3048319",
    "end": "3053359"
  },
  {
    "text": "know the heap is being feng shui or whatever if that's a verb and then yeah",
    "start": "3053359",
    "end": "3058960"
  },
  {
    "text": "then you fully control whatever's stored there but i mean the feeling of managing to",
    "start": "3058960",
    "end": "3066480"
  },
  {
    "start": "3062000",
    "end": "3083000"
  },
  {
    "text": "escalate previously privileges like that must be pretty cool right yeah it's pretty fun so that's why i mean people",
    "start": "3066480",
    "end": "3073520"
  },
  {
    "text": "like me keep doing it i guess i mean it's because it's fun right you get that thrill of you know",
    "start": "3073520",
    "end": "3079920"
  },
  {
    "text": "messing with this program yeah all right so",
    "start": "3079920",
    "end": "3085599"
  },
  {
    "text": "quickly at the end here we're gonna go through some protection and prevention tips if we do it quickly we can uh talk",
    "start": "3085599",
    "end": "3091839"
  },
  {
    "text": "about some of these questions i was actually gonna ask how many c or c plus plus developers or assembly for that",
    "start": "3091839",
    "end": "3097599"
  },
  {
    "text": "matter are there in the room there's one two oh there's some there are some okay",
    "start": "3097599",
    "end": "3103680"
  },
  {
    "start": "3103000",
    "end": "3277000"
  },
  {
    "text": "yeah so first of all i have to explain why there's a picture of me here it's not",
    "start": "3103680",
    "end": "3108720"
  },
  {
    "text": "because i like looking at myself but um we want to make we wanted to make this",
    "start": "3108720",
    "end": "3113920"
  },
  {
    "text": "analogy because uh here you can see me if you're not familiar with oslo this is outside of the er in oslo",
    "start": "3113920",
    "end": "3120319"
  },
  {
    "text": "because i had a teeny tiny skateboarding accident",
    "start": "3120319",
    "end": "3125359"
  },
  {
    "text": "and as you can see i look kind of pleased here because i i guess i didn't die so i was pretty happy",
    "start": "3125359",
    "end": "3130960"
  },
  {
    "text": "i was wearing my helmet as you can see on my side there but the thing was",
    "start": "3130960",
    "end": "3137280"
  },
  {
    "text": "i didn't wear any other protective gear and that's why i have all of these bandages everywhere else it was kind of",
    "start": "3137280",
    "end": "3142720"
  },
  {
    "text": "painful and yeah the irony is that he was saying that i'll bring my",
    "start": "3142720",
    "end": "3148400"
  },
  {
    "text": "protective gear i'll put it in my backpack and if i'm going to do something stupid i'll put it on",
    "start": "3148400",
    "end": "3153839"
  },
  {
    "text": "yeah he did something stupid and he did not put it on and that just makes the analogy perfect",
    "start": "3153839",
    "end": "3160079"
  },
  {
    "text": "right yeah so i think i thought that was a good analogy because we have all of these different toolings and compiler",
    "start": "3160079",
    "end": "3166160"
  },
  {
    "text": "mitigations and so on that you basically get for basically free",
    "start": "3166160",
    "end": "3171200"
  },
  {
    "text": "i mean there's some performance overhead of course for most of these security features",
    "start": "3171200",
    "end": "3176480"
  },
  {
    "text": "but there are a ton of security features that you can turn on in your products that will actually kill off certain",
    "start": "3176480",
    "end": "3182000"
  },
  {
    "text": "types of bugs and vulnerabilities for example one example is uh stack",
    "start": "3182000",
    "end": "3187119"
  },
  {
    "text": "cookies and we'll talk more about it because i saw there was a question about it um yeah and there's all of these other",
    "start": "3187119",
    "end": "3194400"
  },
  {
    "text": "other mitigations that make it harder for attackers and in some cases some of these can require an attacker to",
    "start": "3194400",
    "end": "3201520"
  },
  {
    "text": "have several vulnerabilities and that kind of ups the bar right so if they're only able to find an overflow",
    "start": "3201520",
    "end": "3207839"
  },
  {
    "text": "usually that's not enough to exploit a system today you also need something we call an information leak",
    "start": "3207839",
    "end": "3215520"
  },
  {
    "text": "in addition that gives you some that reveal some secret state of the program basically",
    "start": "3215520",
    "end": "3220559"
  },
  {
    "text": "so yeah so one thing you could do i guess it's not the most popular opinion maybe but it's using memory saved",
    "start": "3220559",
    "end": "3227359"
  },
  {
    "text": "languages where you can i know it's not always possible but we see more and more products that are",
    "start": "3227359",
    "end": "3234079"
  },
  {
    "text": "not rewriting whole c c plus plus projects in like rust or go or whatever",
    "start": "3234079",
    "end": "3239520"
  },
  {
    "text": "but they're taking small parts of it that's especially those parts that are handling untrusted data or parsing some",
    "start": "3239520",
    "end": "3245200"
  },
  {
    "text": "data structures and they're rewriting those parts in rust for example and that makes it",
    "start": "3245200",
    "end": "3250960"
  },
  {
    "text": "um yeah it makes that part of the code you basically eliminate binary exploitation",
    "start": "3250960",
    "end": "3256720"
  },
  {
    "text": "like problem problems from this part of the code by doing that and of course i mean there's no like",
    "start": "3256720",
    "end": "3262319"
  },
  {
    "text": "perfect programming language but at least you don't have these very serious memory issues",
    "start": "3262319",
    "end": "3269359"
  },
  {
    "text": "uh yeah i think i'm going to skip the rest so we have time for questions questions yeah sure it's not",
    "start": "3270000",
    "end": "3276880"
  },
  {
    "text": "that interesting can we can we start with this question here yep um",
    "start": "3276880",
    "end": "3283440"
  },
  {
    "start": "3277000",
    "end": "3599000"
  },
  {
    "text": "i'm just going to read it again um oh yeah this is a good question actually okay present right",
    "start": "3283440",
    "end": "3289920"
  },
  {
    "text": "okay yep so the question is i must be missing something",
    "start": "3289920",
    "end": "3296000"
  },
  {
    "text": "if all it needs to break is a backlash at the end of the command how has this",
    "start": "3296000",
    "end": "3301359"
  },
  {
    "text": "not been detected before anyone who accidentally ends their command with a backslash",
    "start": "3301359",
    "end": "3307599"
  },
  {
    "text": "would cause an error yeah but no no i'm going to do this first",
    "start": "3307599",
    "end": "3312960"
  },
  {
    "text": "so at one point i'm really i focus on secure development right",
    "start": "3312960",
    "end": "3318640"
  },
  {
    "text": "but really do all of you actually do like static static uh code analysis",
    "start": "3318640",
    "end": "3325839"
  },
  {
    "text": "or fusing or do this on all your programs they probably didn't since both the",
    "start": "3325839",
    "end": "3332480"
  },
  {
    "text": "danish guys and christian here and qualis they did fuss and then they found",
    "start": "3332480",
    "end": "3337680"
  },
  {
    "text": "it so uh that's one of the things but you can answer the rest yeah so for in this case",
    "start": "3337680",
    "end": "3343760"
  },
  {
    "text": "in sudo it's actually reaching this vulnerable piece of code isn't that trivial so that's why it wasn't found",
    "start": "3343760",
    "end": "3349520"
  },
  {
    "text": "before because you need to launch pseudo-edit and you need to enable this one flag and that causes some weird i",
    "start": "3349520",
    "end": "3355920"
  },
  {
    "text": "don't know parsing of the escape characters or something like that so it's not i guess it's not the most",
    "start": "3355920",
    "end": "3361839"
  },
  {
    "text": "obvious bug but i guess it could have been caught with fussing if they've tried different variations of the",
    "start": "3361839",
    "end": "3369119"
  },
  {
    "text": "flags and so on and also we saw the heap feng shui right it a lot of these things",
    "start": "3369119",
    "end": "3374319"
  },
  {
    "text": "needed to be in place to make this work so yeah i guess it's not that easy yeah",
    "start": "3374319",
    "end": "3380880"
  },
  {
    "text": "i can do this one very quickly isn't pseudo password protected yeah it's supposed to be but this code actually",
    "start": "3381520",
    "end": "3388559"
  },
  {
    "text": "or this ruinable piece of code is actually running before the password check so i i think for this you don't",
    "start": "3388559",
    "end": "3393680"
  },
  {
    "text": "even have to be in the sudoers file which i think is the case for this docker image we just have a random user",
    "start": "3393680",
    "end": "3399040"
  },
  {
    "text": "at uh on the system and sudo is actually exploited before it can do any checks on the user at all that was a good question",
    "start": "3399040",
    "end": "3405599"
  },
  {
    "text": "yeah that's a very good question um um we can do this one maybe",
    "start": "3405599",
    "end": "3411680"
  },
  {
    "text": "yeah there's a parallel here",
    "start": "3411680",
    "end": "3415838"
  },
  {
    "text": "yeah did you hear uh yeah but i i'm not sure what that is i'm sorry",
    "start": "3416720",
    "end": "3422400"
  },
  {
    "text": "i mean i turn off the system that makes the thing crash you turn off a lot of other systems that also makes the thing",
    "start": "3422400",
    "end": "3428240"
  },
  {
    "text": "easy to fly so uh-huh",
    "start": "3428240",
    "end": "3433319"
  },
  {
    "text": "[Music]",
    "start": "3434350",
    "end": "3437409"
  },
  {
    "text": "all right let's just move on uh i'm not sure i can repeat that in a good way",
    "start": "3439359",
    "end": "3444400"
  },
  {
    "text": "yeah let's look at this one uh so yeah you said that binary exploits are still relevant in the modern era but",
    "start": "3444400",
    "end": "3450880"
  },
  {
    "text": "you're using a language c that's very old that's true it's very old are these attacks really relevant today",
    "start": "3450880",
    "end": "3456799"
  },
  {
    "text": "if you're using modern languages or only if you're using old languages that let you do things like reading 50 bytes into",
    "start": "3456799",
    "end": "3463200"
  },
  {
    "text": "a 13 byte array yeah so i guess yes that's true it's only relevant if",
    "start": "3463200",
    "end": "3469119"
  },
  {
    "text": "you're using c and c plus plus but if you look at like projects or if you're using like",
    "start": "3469119",
    "end": "3474559"
  },
  {
    "text": "uh what's it called like for our foreign functions interface or you're using native libraries behind the scenes",
    "start": "3474559",
    "end": "3480319"
  },
  {
    "text": "like there was this one uh case with python i think it was just",
    "start": "3480319",
    "end": "3485920"
  },
  {
    "text": "passing some untrusted data into an unsafe c function so behind the scenes",
    "start": "3485920",
    "end": "3490960"
  },
  {
    "text": "like you're looking at python this fancy new language that you know doesn't have memory safety issues but",
    "start": "3490960",
    "end": "3497760"
  },
  {
    "text": "python is written in c so if they you know parse your data in a bad way",
    "start": "3497760",
    "end": "3503839"
  },
  {
    "text": "it can lead to memory safety issues but yeah i mean it's mostly these products that are being affected or if",
    "start": "3503839",
    "end": "3510480"
  },
  {
    "text": "they're using c behind the scenes yeah",
    "start": "3510480",
    "end": "3515880"
  },
  {
    "text": "i guess we have time for one more question so now we have to choose carefully",
    "start": "3516480",
    "end": "3522960"
  },
  {
    "text": "this one maybe because these are the same yeah i kind of wonder the same so let's okay",
    "start": "3522960",
    "end": "3529040"
  },
  {
    "text": "yeah maybe i learned something yeah there were two questions about stack canneries or stack cookies which was",
    "start": "3529040",
    "end": "3534400"
  },
  {
    "text": "this random value that might have talked about that's being placed on the stack and i guess the only reasons for",
    "start": "3534400",
    "end": "3541760"
  },
  {
    "text": "removing them is either if you're yeah performance is one there's some performance overhead of doing this and",
    "start": "3541760",
    "end": "3548240"
  },
  {
    "text": "if your system is very sensitive to performance i guess it's it's a valid reason",
    "start": "3548240",
    "end": "3553920"
  },
  {
    "text": "another one would be like your weird cpu architecture or compiler doesn't support",
    "start": "3553920",
    "end": "3559599"
  },
  {
    "text": "it or you you're running or writing code for a chip that doesn't have this",
    "start": "3559599",
    "end": "3565119"
  },
  {
    "text": "enabled because this random value has to come from somewhere and i guess on linux and windows and",
    "start": "3565119",
    "end": "3570880"
  },
  {
    "text": "mac and so on it comes from the operating system so it's uh like the stack camera is read from a magic",
    "start": "3570880",
    "end": "3577040"
  },
  {
    "text": "register or something but even sometimes one can bypass that cookies as well and we do that often in hacking competition",
    "start": "3577040",
    "end": "3584079"
  },
  {
    "text": "so that's not a like complete security mechanism side mechanism either yeah",
    "start": "3584079",
    "end": "3589280"
  },
  {
    "text": "yeah but you usually like need an additional vulnerability which uh kind of raises the bar for attackers",
    "start": "3589280",
    "end": "3596319"
  },
  {
    "text": "and yeah in 20 seconds we're out of time so maybe we should uh yeah let's just uh",
    "start": "3596319",
    "end": "3602480"
  },
  {
    "text": "do like i think you can hide it and then yep all right you're awesome thank you thanks",
    "start": "3602480",
    "end": "3608640"
  },
  {
    "text": "for watching",
    "start": "3608640",
    "end": "3611720"
  },
  {
    "text": "you",
    "start": "3620240",
    "end": "3622319"
  }
]