[
  {
    "text": "if I put that on you can hear me yeah cool all right what's up everyone thank",
    "start": "359",
    "end": "8319"
  },
  {
    "text": "you ah thank you so much for coming along to a talk about regular expressions in JavaScript here at a very",
    "start": "10080",
    "end": "15839"
  },
  {
    "text": "net focused uh uh and I mean it's regular Expressions anyway and this the sun is out out there you could be doing",
    "start": "15839",
    "end": "21680"
  },
  {
    "text": "anything so thank you thank you very much uh my name is son as uh I'm a developer relations engineer at a",
    "start": "21680",
    "end": "26960"
  },
  {
    "text": "company called Data Stacks um data Stacks we kind of trying to build a a platform an AI platform uh as a service",
    "start": "26960",
    "end": "34239"
  },
  {
    "text": "to make it really easy to build uh with this new kind of set of generative AI applications and that has nothing to do",
    "start": "34239",
    "end": "40960"
  },
  {
    "text": "with what I'm talking about but if I don't mention that uh I don't get to come uh",
    "start": "40960",
    "end": "46840"
  },
  {
    "text": "so um that's what we're up to uh we have a vector database in astb it's a pretty sweet no SQL store uh we have a visual",
    "start": "46840",
    "end": "53520"
  },
  {
    "text": "builder for uh generative AI called langlow that's also quite good fun to experiment with uh if you are trying to",
    "start": "53520",
    "end": "60160"
  },
  {
    "text": "build with this stuff for the first time if you ever want to follow me online I'm fil Nash pretty much",
    "start": "60160",
    "end": "66000"
  },
  {
    "text": "everywhere um including uh my favorite URL in the world which is just film Mash",
    "start": "66000",
    "end": "71080"
  },
  {
    "text": "yes H I almost don't care how much the island of St Helena will make me pay uh",
    "start": "71080",
    "end": "76920"
  },
  {
    "text": "for their domain name I will keep doing it uh because it's cool I love it um so",
    "start": "76920",
    "end": "83799"
  },
  {
    "text": "what do I want to talk about regular Expressions um I always thought I've always thought that like in uh in the",
    "start": "83799",
    "end": "90200"
  },
  {
    "text": "world of like learning and teaching programming and and and parts of the different parts of programming regular",
    "start": "90200",
    "end": "95799"
  },
  {
    "text": "expressions are one of those things where you kind of get like taught enough of it to be dangerous uh and uh and like",
    "start": "95799",
    "end": "102439"
  },
  {
    "text": "achieve the sort of smallish things that you you kind of want to in the first place with the regular Expressions then if you really like them you go further",
    "start": "102439",
    "end": "107960"
  },
  {
    "text": "into it but nobody in that teaching process ever really as far as I've experienced warns you that they can go",
    "start": "107960",
    "end": "114240"
  },
  {
    "text": "horribly wrong uh horribly wrong in terms of like now you don't know what you've written sure but horribly wrong",
    "start": "114240",
    "end": "120799"
  },
  {
    "text": "in terms of like this can take your server down uh or this can just ruin a user experience and that's the uh the",
    "start": "120799",
    "end": "127399"
  },
  {
    "text": "potential of the regular expression denial of service um if you write the wrong regular expression and somebody",
    "start": "127399",
    "end": "134000"
  },
  {
    "text": "puts in or it could be the right regular expression for all the happy path use cases that you ever wanted out of it but",
    "start": "134000",
    "end": "140319"
  },
  {
    "text": "somebody uh enters a slightly wrong piece of text it can uh it can",
    "start": "140319",
    "end": "145680"
  },
  {
    "text": "absolutely just kind of infinite Loop or or exponential Loop away not infinite but hit an exponential path of uh of of",
    "start": "145680",
    "end": "153480"
  },
  {
    "text": "failing over and over again and I just wanted to kind of use um this wow thank",
    "start": "153480",
    "end": "159920"
  },
  {
    "text": "you for coming and in a Rex t-shirt that's incredible we have all the fans of",
    "start": "159920",
    "end": "165120"
  },
  {
    "text": "regular expressions in Copenhagen are here in this room today um ah all I was saying was that I",
    "start": "165120",
    "end": "173200"
  },
  {
    "text": "don't think people teach about regular expressions and I of services uh when they teach anything else about regular expressions and so that's what I've",
    "start": "173200",
    "end": "179120"
  },
  {
    "text": "wanted to share uh today and I want to do so with a few stories of how uh Services have gone down I want to do it",
    "start": "179120",
    "end": "185000"
  },
  {
    "text": "with stories of of regular Expressions that existed in those services but also in uh in open source and hopefully give",
    "start": "185000",
    "end": "191560"
  },
  {
    "text": "us the tools to uh understand why those things go wrong and then how to avoid",
    "start": "191560",
    "end": "197360"
  },
  {
    "text": "them ourselves in the future um I have to include this quote and any",
    "start": "197360",
    "end": "202879"
  },
  {
    "text": "talk about regular Expressions absolute classic some people when confronted with the problem think I know I use regular expressions and now they have two",
    "start": "202879",
    "end": "209040"
  },
  {
    "text": "problems or if they're at the wrong regular expression like it's now exponential levels of problems it turns",
    "start": "209040",
    "end": "214599"
  },
  {
    "text": "out um it's my favorite all right so our problem with regular Expressions is the",
    "start": "214599",
    "end": "220720"
  },
  {
    "text": "existing existence of backtracking uh and uh and so the first part of the talk",
    "start": "220720",
    "end": "225799"
  },
  {
    "text": "will cover just kind of regular backtracking things that can go wrong which are probably less likely and less",
    "start": "225799",
    "end": "231040"
  },
  {
    "text": "of a problem for you probably and then the second part will be catastrophic backtracking which as it sounds is just",
    "start": "231040",
    "end": "238480"
  },
  {
    "text": "catastrophic um and here are some of the regular Expressions we're going to hang out with over the next uh probably won't",
    "start": "238480",
    "end": "245200"
  },
  {
    "text": "make it to an hour let's say 45 minutes um there's a nice one there um I'll be",
    "start": "245200",
    "end": "251040"
  },
  {
    "text": "explaining all of these soon but um that one's a really simple and I like that one it's horrible oh takes so much time",
    "start": "251040",
    "end": "257440"
  },
  {
    "text": "uh this was in um this one's in node fetch uh which is cool um that one is uh",
    "start": "257440",
    "end": "263759"
  },
  {
    "text": "that one is a bad idea uh for regular expression checking of emails uh and that one",
    "start": "263759",
    "end": "270080"
  },
  {
    "text": "I don't even know what that one's supposed to do but we'll break it down into some kind of uh semblance of why it",
    "start": "270080",
    "end": "275280"
  },
  {
    "text": "was wrong uh because it really was that one it's horrible it's way too much and it's",
    "start": "275280",
    "end": "280479"
  },
  {
    "text": "horrible um so we start with regular regular backtracking and this section I call backtrack overflow because the",
    "start": "280479",
    "end": "286360"
  },
  {
    "text": "major story is about how stack Overflow managed to take itself down with a regular expression and uh the problem",
    "start": "286360",
    "end": "292880"
  },
  {
    "text": "with working at stack Overflow and you've taken your own Services down is that you can't ever ask stack Overflow",
    "start": "292880",
    "end": "298840"
  },
  {
    "text": "how to fix the it's a real Annoying problem so um backtracking and regular Expressions",
    "start": "298840",
    "end": "305120"
  },
  {
    "text": "cause that problem for them and there um uh was the the first one on on the previous slide their regular expression",
    "start": "305120",
    "end": "311039"
  },
  {
    "text": "was this one uh this is actually more Sim simple than it looks uh because SLS",
    "start": "311039",
    "end": "316120"
  },
  {
    "text": "is just a you know Whit space character and SL u200 C is just a Unicode whites space character that doesn't fit into",
    "start": "316120",
    "end": "321840"
  },
  {
    "text": "SLS and so this is at wh space at the start of a string or wh space at the end",
    "start": "321840",
    "end": "327120"
  },
  {
    "text": "of a string that's really nice about these things uh is that we can uh simplify them to see why they go wrong",
    "start": "327120",
    "end": "335080"
  },
  {
    "text": "um so what we can do is take out the disjunction um because we can deal with",
    "start": "335080",
    "end": "340639"
  },
  {
    "text": "just one half of it because that's all we need and then because um Whit space characters are kind of hard to see on",
    "start": "340639",
    "end": "345720"
  },
  {
    "text": "slides I can replace that with a character so we'll use a and just say all right what if we were using the character a uh one or more times at the",
    "start": "345720",
    "end": "352919"
  },
  {
    "text": "end of a string how could that be a problem well it can be a problem because when we",
    "start": "352919",
    "end": "360360"
  },
  {
    "text": "actually do the work to test this and like I said earlier like the Happy path of regular Expressions is normally fine",
    "start": "360360",
    "end": "366160"
  },
  {
    "text": "regular Expressions take no time at all to match a string uh that it it agrees with but it's when they come across",
    "start": "366160",
    "end": "372400"
  },
  {
    "text": "strings that they don't necessarily agree with see this this string here five A's I think it's five A's and a b",
    "start": "372400",
    "end": "378280"
  },
  {
    "text": "yeah when testing against A+ dollar like A's until the end of the string um is",
    "start": "378280",
    "end": "385360"
  },
  {
    "text": "actually not as good it's it's actually pretty obvious to us that that doesn't match it's got a be the end of it but the regular expression engine Le the",
    "start": "385360",
    "end": "391520"
  },
  {
    "text": "JavaScript one and many others uh will say all right cool uh check all the A's",
    "start": "391520",
    "end": "397240"
  },
  {
    "text": "we're doing well we're doing well we get to the end as a b okay that's a shame but we could go back to the start lose",
    "start": "397240",
    "end": "405000"
  },
  {
    "text": "the first character now we check all the A's all the rest of the A's and then we've got a B and that's we didn't get",
    "start": "405000",
    "end": "410759"
  },
  {
    "text": "it and the expression keeps backtracking again to just be like all right cool I can actually match on the third set of a",
    "start": "410759",
    "end": "417039"
  },
  {
    "text": "the third a onwards the fourth a onwards the fifth a onward and whilst this is still not too much of",
    "start": "417039",
    "end": "423440"
  },
  {
    "text": "a problem um and eventually it goes a yeah no that doesn't match sure and you're like thanks finally H that's not",
    "start": "423440",
    "end": "430000"
  },
  {
    "text": "too much of a problem when there's only five A's and a b but um and so this",
    "start": "430000",
    "end": "435680"
  },
  {
    "text": "actually this is shown in the the actual JavaScript engine in JavaScript takes like 22 steps to to do this but if you",
    "start": "435680",
    "end": "441800"
  },
  {
    "text": "add an a if you had six A's and a b it takes 29 steps to do it and if you had seven A's and a b is 37 steps and if you",
    "start": "441800",
    "end": "447560"
  },
  {
    "text": "have 200,000 oh sorry 20,000 days and a b it takes 200 million steps and that's",
    "start": "447560",
    "end": "453599"
  },
  {
    "text": "quite a lot and that doesn't seem like maybe it's a problem but sometimes it might be and I do just want to show I",
    "start": "453599",
    "end": "459520"
  },
  {
    "text": "have a example of this uh this is one of my favorite things to play around with Rex this is Rex 101 uh this is that",
    "start": "459520",
    "end": "465800"
  },
  {
    "text": "string uh A+ dollar and five A's and a b and it says up here actually it's saying",
    "start": "465800",
    "end": "471000"
  },
  {
    "text": "20 steps now like I said I think this this program updated recently it has different JavaScript in it uh different",
    "start": "471000",
    "end": "477400"
  },
  {
    "text": "rejects in it but allows you to play through those steps and you can kind of see how it's picking up the different A's goes to three goes to two goes to",
    "start": "477400",
    "end": "484800"
  },
  {
    "text": "one and then realizes it's not there um and if you keep oops if you keep adding",
    "start": "484800",
    "end": "489960"
  },
  {
    "text": "things uh this was 27 steps 35 steps 44",
    "start": "489960",
    "end": "495240"
  },
  {
    "text": "it just keeps going up and it's not exponential um it's sort of uh quadratic",
    "start": "495240",
    "end": "500360"
  },
  {
    "text": "I think in this case um but this was a massive problem for stack Overflow uh why because in their code I",
    "start": "500360",
    "end": "509159"
  },
  {
    "text": "think it was for rendering questions and or comments it was rendering something user input uh to the homepage that",
    "start": "509159",
    "end": "516640"
  },
  {
    "text": "decided they wanted to use that regular expression we saw earlier Whit space at the start or Whit space at the end to",
    "start": "516640",
    "end": "522120"
  },
  {
    "text": "strip that Whit space seems reasonable um is uh except they were",
    "start": "522120",
    "end": "528040"
  },
  {
    "text": "doing it like on every render and then somebody popped in a comment or a question that had 20,000 whitespace",
    "start": "528040",
    "end": "534920"
  },
  {
    "text": "characters in it but then like something at the end and so the regular expression",
    "start": "534920",
    "end": "540240"
  },
  {
    "text": "engine went oh I've got a whit space character and checks the next 20,000 then fails and then checks the next",
    "start": "540240",
    "end": "545800"
  },
  {
    "text": "19,999 and fails and and so it just collapsed stack Overflow for a",
    "start": "545800",
    "end": "551640"
  },
  {
    "text": "solid 34 minutes 34 minutes of no stack Overflow for anybody in the world let",
    "start": "553040",
    "end": "558880"
  },
  {
    "text": "alone the person trying to fix it actually I must say finding an issue with a a regular expression like that which seemingly simple uh and fixing it",
    "start": "558880",
    "end": "566399"
  },
  {
    "text": "with 34 minutes without the uh tools of overflow at your uh at your fingertips",
    "start": "566399",
    "end": "571720"
  },
  {
    "text": "not bad uh and so what seemed like a very innocent reg uh normal regular",
    "start": "571720",
    "end": "577079"
  },
  {
    "text": "expression yeah it managed to cause half an hour's outage on stack Overflow and",
    "start": "577079",
    "end": "582600"
  },
  {
    "text": "um all because somebody put in 20,000 Whit space comment uh 20,000 whites space characters into a comment",
    "start": "582600",
    "end": "588959"
  },
  {
    "text": "somewhere so you can never really tell um you know what your users are going to do with that kind of thing and that's",
    "start": "588959",
    "end": "594720"
  },
  {
    "text": "where that like unexpected unhappy path can cause you those problems",
    "start": "594720",
    "end": "600000"
  },
  {
    "text": "uh I want to show some other kind of examples in real life of this um HTTP cach semantics uh is a um module in it's",
    "start": "600000",
    "end": "607800"
  },
  {
    "text": "a node module that's buried in a bunch of others um and uh and as I was I think",
    "start": "607800",
    "end": "613519"
  },
  {
    "text": "I was actually as I was writing like kind of the idea for this talk uh down I",
    "start": "613519",
    "end": "618959"
  },
  {
    "text": "got an email from dependabot asking me to update HTTP cache semantics I'm like I don't I've never installed that",
    "start": "618959",
    "end": "624839"
  },
  {
    "text": "personally myself but in a bunch of my projects it was like Hey update htb cach semantics cuz there's a redos error and",
    "start": "624839",
    "end": "630120"
  },
  {
    "text": "I'm like okay yeah this is a pain there's uh two regular expressions in here and these are the um slashstar",
    "start": "630120",
    "end": "637560"
  },
  {
    "text": "comma SL star um or SL star equal SL star uh and this is just trying to split",
    "start": "637560",
    "end": "644839"
  },
  {
    "text": "up uh headers right um so we're trying to split based on uh commas and then um key values on the equals uh in a in an",
    "start": "644839",
    "end": "652480"
  },
  {
    "text": "HTTP request and SL star is is not good um uh",
    "start": "652480",
    "end": "659880"
  },
  {
    "text": "because it it maps with itself so what do we got um the problem here is that uh slash star like SL s star uh Zer one",
    "start": "659880",
    "end": "668279"
  },
  {
    "text": "spaces right uh but uh because that can come up against uh that comma um any",
    "start": "668279",
    "end": "674920"
  },
  {
    "text": "kind of amount of Whit space starts to do that same backtracking thing and again if you have a 20,000 Whit space",
    "start": "674920",
    "end": "680639"
  },
  {
    "text": "characters uh and they're not a comma um it will it will chew up your CPU and",
    "start": "680639",
    "end": "687360"
  },
  {
    "text": "die and so one of the things you might do always limit the size of the string you're looking at or limit the size of",
    "start": "687360",
    "end": "693040"
  },
  {
    "text": "the the thing you're doing like avoid that star basically it could cause you problems uh if you just look at 64",
    "start": "693040",
    "end": "698279"
  },
  {
    "text": "characters that's going to that's going to finish in milliseconds which is great I'm I'm happy with that or you limit the",
    "start": "698279",
    "end": "704560"
  },
  {
    "text": "size of the string coming in right if you have a question on stack Overflow and it's got 20,000 characters uh more than 20,000 characters and you're like",
    "start": "704560",
    "end": "710639"
  },
  {
    "text": "this is a big question or a big comment it's probably something wrong with that um consider limiting the size of the",
    "start": "710639",
    "end": "717040"
  },
  {
    "text": "input string or don't don't regular expression at all sorry",
    "start": "717040",
    "end": "722160"
  },
  {
    "text": "for the guy in the T-shirt there but stop it we've got a trim function which is not going to",
    "start": "722160",
    "end": "728360"
  },
  {
    "text": "cause the same issues if we are trying to trim Whit space off a thing sure it's still going to leave that uh 20,000 white spaces in the middle of the thing",
    "start": "728360",
    "end": "734360"
  },
  {
    "text": "but like that's a different eror and it's not going to take the server down um so avoiding regular Expressions is",
    "start": "734360",
    "end": "739959"
  },
  {
    "text": "always a happy thing to do here uh and in the case of hdtb cache semantics uh",
    "start": "739959",
    "end": "745600"
  },
  {
    "text": "they took out the uh SL s stars in their um splits uh and instead actually yeah",
    "start": "745600",
    "end": "752120"
  },
  {
    "text": "just uh trimmed uh the strings themselves instead so avoiding regular Expressions",
    "start": "752120",
    "end": "758040"
  },
  {
    "text": "again uh that's what happened there so that one the sort of um Regular backtracking that sort of runs out in",
    "start": "758040",
    "end": "764760"
  },
  {
    "text": "quadratic time and needs an enormous input is the sort of less likely uh but I guess more surprising one to happen to",
    "start": "764760",
    "end": "771639"
  },
  {
    "text": "you um it does take that like I don't know how long um stack Overflow had that",
    "start": "771639",
    "end": "778560"
  },
  {
    "text": "regular expr on those on on their front page rendering uh on the rendering of their",
    "start": "778560",
    "end": "784440"
  },
  {
    "text": "front page I don't know how long it was there before uh this uh uh this particularly bad string this bad comment",
    "start": "784440",
    "end": "791199"
  },
  {
    "text": "kind of hit them uh but you'd never expect it and you don't find it until that horrible bad path comes along um",
    "start": "791199",
    "end": "798360"
  },
  {
    "text": "it's probably the case that uh htb cach semantics also never fell foul of this but now it's fixed and we don't have to",
    "start": "798360",
    "end": "804440"
  },
  {
    "text": "worry about that in the future it's just magic when people go and find those things and fix fix your uh fix your",
    "start": "804440",
    "end": "811320"
  },
  {
    "text": "dependencies uh and it's less magical that you just get an update to say hey you need to update this and update this",
    "start": "811320",
    "end": "816360"
  },
  {
    "text": "and update this over and over again thanks to bendot so catastrophic backtracking is much more fun to uh play",
    "start": "816360",
    "end": "823680"
  },
  {
    "text": "around with because it uh it requires a lot less input uh to trigger uh it just",
    "start": "823680",
    "end": "829800"
  },
  {
    "text": "uh requires again a sort of pattern in your Rex that's going to um going to",
    "start": "829800",
    "end": "834920"
  },
  {
    "text": "cause you issues and so the first example I have of this uh was in uh node",
    "start": "834920",
    "end": "840079"
  },
  {
    "text": "fetch this is the implementation of fetch in in node which has been uh somewhat um uh overtaken Now by unichi I",
    "start": "840079",
    "end": "848399"
  },
  {
    "text": "guess and fetch actually being put into node itself but for a long time this was the way you'd use fetch to do hdp",
    "start": "848399",
    "end": "854519"
  },
  {
    "text": "requests uh on the server side in in a JavaScript program and this little regular",
    "start": "854519",
    "end": "860040"
  },
  {
    "text": "expression um is uh was just in a little thing I think again it was it was testing something in a in a refer header",
    "start": "860040",
    "end": "866839"
  },
  {
    "text": "just to see if this was being run on Local Host right and so this regular expression is just saying hey have we got um we got everything from the start",
    "start": "866839",
    "end": "874120"
  },
  {
    "text": "of the string dot plus so any of anything up until a DOT any number of",
    "start": "874120",
    "end": "880399"
  },
  {
    "text": "times and then ending in Local Host so it's it's local host or any",
    "start": "880399",
    "end": "885880"
  },
  {
    "text": "subdomain anything that looks like a subdomain of Local Host with any number of subdomain",
    "start": "885880",
    "end": "891440"
  },
  {
    "text": "levels could be all right except it's not the problem with this uh is in the",
    "start": "891440",
    "end": "897440"
  },
  {
    "text": "case where again it fails this is a bunch of subdomains that don't have Local Host at the end so it would",
    "start": "897440",
    "end": "903800"
  },
  {
    "text": "fail uh but it would fail in a horrible horrible way because uh what it's going",
    "start": "903800",
    "end": "909199"
  },
  {
    "text": "to do is uh because we've got that dot plus that's any character one or more times uh finally followed by an actual",
    "start": "909199",
    "end": "918040"
  },
  {
    "text": "dot um and and Dot fits into any character as well as being a DOT that's",
    "start": "918040",
    "end": "925120"
  },
  {
    "text": "nice of it uh and so we're first going to consume all the a dots until we get to the end we go okay there's no Local",
    "start": "925120",
    "end": "930639"
  },
  {
    "text": "Host um damn it we'll start again uh so we consume all the A's but one and then",
    "start": "930639",
    "end": "936959"
  },
  {
    "text": "we can do that again because of the star because we got it zero or more times um and so it does that and then it starts",
    "start": "936959",
    "end": "943319"
  },
  {
    "text": "splitting these things up into like different ways to look at it and and it becomes a whole mathematical idea of",
    "start": "943319",
    "end": "948680"
  },
  {
    "text": "permutations and and and um combinations of different ways we could look at uh",
    "start": "948680",
    "end": "954199"
  },
  {
    "text": "this and that is going to exponentially disappear off into time and I have example of this actually as as I was",
    "start": "954199",
    "end": "961040"
  },
  {
    "text": "writing uh stuff down for this talk I decided I'd write myself a a a timer uh",
    "start": "961040",
    "end": "966680"
  },
  {
    "text": "for regular Expressions to test things against it and if you saw um uh Dylan's",
    "start": "966680",
    "end": "972279"
  },
  {
    "text": "talk uh this morning opening up about Rockstar and how he's like I'm going to throw this into a worker to start with",
    "start": "972279",
    "end": "977839"
  },
  {
    "text": "uh so that if you do run an infinite Loop in Rockstar um it's not going to chew up the browser or not going to Che",
    "start": "977839",
    "end": "983519"
  },
  {
    "text": "up the UI and so this does that as well we throw our regular expression off into a uh uh into a work",
    "start": "983519",
    "end": "989600"
  },
  {
    "text": "in order to do the test and I can time it and so this is quite a long string in this particular case but if I do that uh",
    "start": "989600",
    "end": "995800"
  },
  {
    "text": "we can see that the string itself takes it's going four five should be about 5 Seconds 5,600 seconds sorry 5 5,600",
    "start": "995800",
    "end": "1005079"
  },
  {
    "text": "milliseconds 5.6 seconds uh but if I add another a another do a uh and try it",
    "start": "1005079",
    "end": "1010680"
  },
  {
    "text": "again it's probably going to double up to nope sometimes it does some",
    "start": "1010680",
    "end": "1016800"
  },
  {
    "text": "caching and then it gets broken so I reckon this is going to come in at maybe 6 seconds and if I do it again it' be 12",
    "start": "1016800",
    "end": "1023039"
  },
  {
    "text": "seconds I reckon or it's yeah okay six 6.8 seconds if I do that one more time",
    "start": "1023039",
    "end": "1030038"
  },
  {
    "text": "that's probably going to go for over 10 seconds uh and you can see how just a a bad idea of a of a eurl which is",
    "start": "1030039",
    "end": "1037079"
  },
  {
    "text": "perfectly valid uh can cause trouble with this Local Host thing 1213 yay 13.7 seconds I also",
    "start": "1037079",
    "end": "1045880"
  },
  {
    "text": "learned when I was building this uh that Firefox um will kick out about five seconds it",
    "start": "1045880",
    "end": "1052120"
  },
  {
    "text": "throws an error which is much nicer for your user experience if you do manage to uh to to put something like this in and",
    "start": "1052120",
    "end": "1058280"
  },
  {
    "text": "chrome will run that regular expression forever it does not care um and Safari",
    "start": "1058280",
    "end": "1064400"
  },
  {
    "text": "actually has some sort of better engine that shortcuts this and realizes it's fine uh so if you ever go and use this",
    "start": "1064400",
    "end": "1071000"
  },
  {
    "text": "timer to check things out it's Chrome that you have to worry about uh",
    "start": "1071000",
    "end": "1077360"
  },
  {
    "text": "whoops yes so that's what happens there we get this exponential kind of explosion of things that the JavaScript",
    "start": "1077360",
    "end": "1083480"
  },
  {
    "text": "regular expression engine is testing uh and that kind of just starts doubling the time it takes to test an incorrect",
    "start": "1083480",
    "end": "1089960"
  },
  {
    "text": "string like this um until your server or your browser Falls over and so this uh",
    "start": "1089960",
    "end": "1096520"
  },
  {
    "text": "next session is a big example Cloud flare um managed to take itself down you know Cloud flare is quite a portion of",
    "start": "1096520",
    "end": "1103240"
  },
  {
    "text": "the internet and so cloudflare uh used this enormous um regular expression uh",
    "start": "1103240",
    "end": "1110320"
  },
  {
    "text": "and I think what they were doing with this because they they did write a report about this uh it wasn't entirely clear what the regular expression was",
    "start": "1110320",
    "end": "1115520"
  },
  {
    "text": "supposed to be doing but I think it was supposed to be testing for um sort of JavaScript injection uh in",
    "start": "1115520",
    "end": "1123799"
  },
  {
    "text": "all kind of HTML pages that they're serving now Cloud flare and its CDN serve an enormous amount of HTML pages",
    "start": "1123799",
    "end": "1130640"
  },
  {
    "text": "so this Got Run quite a lot of time when it was uh when it was introduced uh and immediately uh collapsed Cloud flare",
    "start": "1130640",
    "end": "1138159"
  },
  {
    "text": "which is great um but what we can do with this uh is not worry too much again about like",
    "start": "1138159",
    "end": "1143559"
  },
  {
    "text": "what's actually going on inside the whole thing one of the things we can do to check our regular Expressions is use",
    "start": "1143559",
    "end": "1149000"
  },
  {
    "text": "a tool like reg reg exper uh that's what this is is called and it creates yourself a diagram of what's actually",
    "start": "1149000",
    "end": "1155320"
  },
  {
    "text": "going on in here and that's useful because we can then kind of see the groupings now it's a bit small actually",
    "start": "1155320",
    "end": "1161400"
  },
  {
    "text": "it's not bad size on this screen um but uh what we can see uh around here is",
    "start": "1161400",
    "end": "1167559"
  },
  {
    "text": "that whilst this first section has a lot of stuff that it could match it also has",
    "start": "1167559",
    "end": "1172679"
  },
  {
    "text": "a big Arrow around the outside that says Ah we can we can uh oh no sorry we have to match something in this first one we",
    "start": "1172679",
    "end": "1179120"
  },
  {
    "text": "do have to match something in this first one so it could be a star it could be a a closed bracket could be any digit",
    "start": "1179120",
    "end": "1184200"
  },
  {
    "text": "could be Nan any one of those things we do have to match the second bit has an arrow around the outside so it could be",
    "start": "1184200",
    "end": "1191440"
  },
  {
    "text": "one of closed brackets but we also don't need it we can skip over it then there's a semicolon but we can also skip over",
    "start": "1191440",
    "end": "1197600"
  },
  {
    "text": "that we don't have to have that and then we get into a group here and there's a thing of wh space and dash and",
    "start": "1197600",
    "end": "1203159"
  },
  {
    "text": "tilder and exclamation point but this little arrow over here says we can skip it and these guys are any character any",
    "start": "1203159",
    "end": "1210520"
  },
  {
    "text": "number of times any character any number of times equals any character number any times and so if we actually simplify the",
    "start": "1210520",
    "end": "1215919"
  },
  {
    "text": "whole thing down uh we can take out all the crazy unnecessary stuff and say okay we need a it could be any of those first",
    "start": "1215919",
    "end": "1222840"
  },
  {
    "text": "things in that first list of stuff and what I picked a quotation mark and then it's star dot star equals doar",
    "start": "1222840",
    "end": "1229960"
  },
  {
    "text": "dot star you're a bad person um I did want to show you uh oops Ridge expert it",
    "start": "1229960",
    "end": "1237600"
  },
  {
    "text": "is yeah it's just a super simple tool that will you put a Rance in and uh and it will come up with a diagram for you",
    "start": "1237600",
    "end": "1244120"
  },
  {
    "text": "and it's great and you can get it as an SVG so you can just zoom into that thing forever if you want to uh or a PNG uh or",
    "start": "1244120",
    "end": "1251000"
  },
  {
    "text": "just perm link to this this one page as well really useful to kind of visualize these things when you get in a large",
    "start": "1251000",
    "end": "1257440"
  },
  {
    "text": "thing a large regular expression like that to yeah go ahead and visualize it um make it happier for yourself so once",
    "start": "1257440",
    "end": "1264320"
  },
  {
    "text": "we've simplified a regular expression like this we can then kind of start to see what the problems with it are um and",
    "start": "1264320",
    "end": "1271960"
  },
  {
    "text": "our issue here is uh is that ourt star dostar like anything any number of times followed by anything any number of times",
    "start": "1271960",
    "end": "1278760"
  },
  {
    "text": "um just overlaps with itself entirely and again like the the um kind of the",
    "start": "1278760",
    "end": "1285520"
  },
  {
    "text": "subdomains anything followed by a DOT anything followed by a DOT um everything inside any",
    "start": "1285520",
    "end": "1293039"
  },
  {
    "text": "string everything inside any string is going to match any number of ways an",
    "start": "1293039",
    "end": "1298720"
  },
  {
    "text": "exponential number of ways when you have dot star dot star next to each other and",
    "start": "1298720",
    "end": "1303760"
  },
  {
    "text": "then you do have to have a sort of failure condition on that as well so it does keep doing the backtracking and so that equals being in there uh allows it",
    "start": "1303760",
    "end": "1310320"
  },
  {
    "text": "to fail when it hits a uh when it gets to the end of a string and goes oh we didn't get an equals uh it then has to",
    "start": "1310320",
    "end": "1316799"
  },
  {
    "text": "go back and test everything so many times and it just makes it exponentially",
    "start": "1316799",
    "end": "1322080"
  },
  {
    "text": "horrific and so Cloud flare was down for 27 minutes and uh and again very",
    "start": "1322080",
    "end": "1328039"
  },
  {
    "text": "impressed that when a third of the internet is down they still managed to fix it within 27 minutes um I don't",
    "start": "1328039",
    "end": "1333840"
  },
  {
    "text": "think that necessarily included stack Overflow so maybe they got some help there but um 27 minute outage for uh for",
    "start": "1333840",
    "end": "1340360"
  },
  {
    "text": "they literally put that regular expression into play and it was was more obvious that this was the cause because they deployed it and Cloud flow",
    "start": "1340360",
    "end": "1347559"
  },
  {
    "text": "immediately went down including all their internal stuff as well which was very hard for them to to deal with and actually if you want to um I'll share a",
    "start": "1347559",
    "end": "1355240"
  },
  {
    "text": "link to an article that that that talks about all these regular expression failures uh it links off to the the",
    "start": "1355240",
    "end": "1360799"
  },
  {
    "text": "cloud flare report on this as well because their sort of postmortem on the whole thing was actually really interesting uh especially given that",
    "start": "1360799",
    "end": "1367400"
  },
  {
    "text": "yeah they couldn't use their internal tools to do anything",
    "start": "1367400",
    "end": "1371840"
  },
  {
    "text": "either sorry hello um one thing that I know",
    "start": "1372559",
    "end": "1379000"
  },
  {
    "text": "that uh have I turned myself off now can you hear that okay cool um one thing uh",
    "start": "1379000",
    "end": "1385279"
  },
  {
    "text": "that regular Expressions um I think have always um caused issues with there emails uh validating emails are an",
    "start": "1385279",
    "end": "1392200"
  },
  {
    "text": "absolute nightmare as we all know like the email spec actually provides uh an enormous regular expression that they",
    "start": "1392200",
    "end": "1399120"
  },
  {
    "text": "specifically say does not cover 100% of email use cases um and so we don't even want to look at that one that's that's",
    "start": "1399120",
    "end": "1405240"
  },
  {
    "text": "huge we don't even need to look at it um anytime anyone's ever told me how to",
    "start": "1405240",
    "end": "1410799"
  },
  {
    "text": "validate an email uh with a regular expression it's like ah look for an at in the middle somewhere and we're",
    "start": "1410799",
    "end": "1416000"
  },
  {
    "text": "probably all right um if you really want to validate an email address as an email address send it an email but um",
    "start": "1416000",
    "end": "1424039"
  },
  {
    "text": "validating emails has taken um uh cause trouble for one project and uh and come up in open source as well uh and so the",
    "start": "1424039",
    "end": "1431279"
  },
  {
    "text": "first one um example of this is superum uh superum is a is a like an email inbox",
    "start": "1431279",
    "end": "1436760"
  },
  {
    "text": "that's supposed to like give you email superpowers of some sort uh I've never used it myself uh but they have a a",
    "start": "1436760",
    "end": "1443000"
  },
  {
    "text": "client application an email inbox uh built in electron so it's all uh web uh",
    "start": "1443000",
    "end": "1448520"
  },
  {
    "text": "web stuff in there uh and of course they probably want to validate the email addresses are email addresses at times",
    "start": "1448520",
    "end": "1454159"
  },
  {
    "text": "um as an email client and they were quite smart about it in the first place they used this uh regular expression uh",
    "start": "1454159",
    "end": "1462520"
  },
  {
    "text": "which does say uh you know anything that's not an at followed by an at followed by a whole bunch of stuff",
    "start": "1462520",
    "end": "1467600"
  },
  {
    "text": "that's also not an that great um that's fine pretty pretty reasonable and then",
    "start": "1467600",
    "end": "1474760"
  },
  {
    "text": "they read they read that thing in the email spec uh that says but you can have",
    "start": "1474760",
    "end": "1480880"
  },
  {
    "text": "an at symbol in the first part of an email address if it's surrounded by",
    "start": "1480880",
    "end": "1486480"
  },
  {
    "text": "quotes has anybody got an email address like that anybody seen an email address like that no no one has ever used an",
    "start": "1486480",
    "end": "1493480"
  },
  {
    "text": "email address like that but it's in the spec and the fine people at superhuman said that's in the spec maybe we want",
    "start": "1493480",
    "end": "1499080"
  },
  {
    "text": "maybe we should do something to um deal with that we're feeling brave we're feeling regular expression it's a Friday",
    "start": "1499080",
    "end": "1505799"
  },
  {
    "text": "afternoon or something I I don't know um and they all right we can we can do something about this what if what if we",
    "start": "1505799",
    "end": "1511960"
  },
  {
    "text": "change it up to this and this says um uh that we want uh the first part we've",
    "start": "1511960",
    "end": "1518880"
  },
  {
    "text": "either got not at uh or there's this bit which says a quotation mark followed by anything that's not a quotation mark uh",
    "start": "1518880",
    "end": "1526080"
  },
  {
    "text": "followed by a quotation mark and so that anything that's not quotation mark could be an at which is",
    "start": "1526080",
    "end": "1531279"
  },
  {
    "text": "cool um the problem with this it turned out was that um like things that are not",
    "start": "1531279",
    "end": "1537919"
  },
  {
    "text": "an at symbol uh also could be a quotation mark and so we got an overlap",
    "start": "1537919",
    "end": "1543840"
  },
  {
    "text": "they got an overlap between the pattern that says not an at and the pattern that says we'll start with a quotation mark",
    "start": "1543840",
    "end": "1550440"
  },
  {
    "text": "and so um it takes something to actually trigger this but it did happen to them",
    "start": "1550440",
    "end": "1556960"
  },
  {
    "text": "um let's go back to that uh and I WR I put that into my little Rex tester um so",
    "start": "1556960",
    "end": "1562399"
  },
  {
    "text": "there's a few examples if you ever want to go to this it's just uh on my GitHub uh it's a link at the end um and this is",
    "start": "1562399",
    "end": "1569480"
  },
  {
    "text": "the this is the one if you uh if you just put in a bunch of quotation marks um then",
    "start": "1569480",
    "end": "1576640"
  },
  {
    "text": "uh it fails this is five six okay yeah okay six 6.4 seconds um because it's",
    "start": "1576640",
    "end": "1585240"
  },
  {
    "text": "matching quotation mark in both the in both the left hand side of the disjunction and the right hand side uh",
    "start": "1585240",
    "end": "1591679"
  },
  {
    "text": "and so it will happily go back and forth um doing that over and over again uh until again weird caching the next one",
    "start": "1591679",
    "end": "1598480"
  },
  {
    "text": "it takes 1.3 seconds and then it'll go off again",
    "start": "1598480",
    "end": "1604679"
  },
  {
    "text": "2.1 4 seconds 3.4 um and so yeah you end",
    "start": "1605360",
    "end": "1610760"
  },
  {
    "text": "up with a string of of some quotation marks and that uh halts the entire UI because you're not expecting it um",
    "start": "1610760",
    "end": "1618840"
  },
  {
    "text": "and so uh that caused that issue for super superhuman um they also wrote up a nice",
    "start": "1618840",
    "end": "1624960"
  },
  {
    "text": "report on this I really like uh the openness in many companies uh kind of dealings with uh failures like this uh",
    "start": "1624960",
    "end": "1632039"
  },
  {
    "text": "and uh and and and writing up their kind of postmortem about things and superhuman provided a tool that they",
    "start": "1632039",
    "end": "1637399"
  },
  {
    "text": "they built to try and help avoid these things in the future as well and we'll get to those in a bit um the other uh",
    "start": "1637399",
    "end": "1643720"
  },
  {
    "text": "regular expression email Checker was Zod uh any fans of Zod in the house house for runtime Zod provides runtime types",
    "start": "1643720",
    "end": "1652440"
  },
  {
    "text": "uh for JavaScript uh it is the runtime uh equivalent of of of typescript U and",
    "start": "1652440",
    "end": "1658399"
  },
  {
    "text": "and tries to make sure that yeah you you have have types but it goes beyond kind of basic uh primitive types goes beyond",
    "start": "1658399",
    "end": "1664279"
  },
  {
    "text": "just string you can actually test uh to say that something is type of an email and uh at the top here uh was there was",
    "start": "1664279",
    "end": "1671279"
  },
  {
    "text": "the Zod uh regular expression for is this an email and this one's a bit",
    "start": "1671279",
    "end": "1676640"
  },
  {
    "text": "harder to read um I probably put it through reg xer if I really cared about it but the the problem happened in the",
    "start": "1676640",
    "end": "1681880"
  },
  {
    "text": "yellow part of the start uh what we can do is sort of boil that first part down into um yeah this bit so what we had",
    "start": "1681880",
    "end": "1690519"
  },
  {
    "text": "here is Right anything 8 to 0 9 underscore plus or minus one or more times followed by a DOT followed by an",
    "start": "1690519",
    "end": "1698640"
  },
  {
    "text": "optional dot so we've got the question mark there saying optional dot oops um",
    "start": "1698640",
    "end": "1704880"
  },
  {
    "text": "and because it's a question mark Z or one we can just remove it because it never has to matter uh and that led us",
    "start": "1704880",
    "end": "1711440"
  },
  {
    "text": "that leaves us with this kind of pattern here which says uh characters this is case in senstive so it's actually any",
    "start": "1711440",
    "end": "1717200"
  },
  {
    "text": "any letters any numbers underscore plus or minus one or more times and that entire group zero or more times and so",
    "start": "1717200",
    "end": "1724559"
  },
  {
    "text": "because that entire group can be one or more time and zero more time it overlaps entirely with itself uh And So It causes",
    "start": "1724559",
    "end": "1731279"
  },
  {
    "text": "the same problem and so and and then the rest of the regular expression goes on to say and then more characters and then",
    "start": "1731279",
    "end": "1736880"
  },
  {
    "text": "that symbol so it's kind of looking for email addresses that look like",
    "start": "1736880",
    "end": "1742960"
  },
  {
    "text": "subdomains no good reason to do so could have just keep kept looking at strings",
    "start": "1742960",
    "end": "1748519"
  },
  {
    "text": "but um that's what happened uh and so that was discovered open source and fixed which is nice uh but yeah um this",
    "start": "1748519",
    "end": "1756039"
  },
  {
    "text": "kind of uh group grouped up plus followed by a grouped up star is the same is the same kind of overlapping uh",
    "start": "1756039",
    "end": "1763279"
  },
  {
    "text": "that happens when you have um uh the overlapping in Pre case with",
    "start": "1763279",
    "end": "1768720"
  },
  {
    "text": "superhuman was just um ATS and sorry quotation marks overlapping with each other um this is anything within that",
    "start": "1768720",
    "end": "1775399"
  },
  {
    "text": "group is now overlapping with each other zero more times uh and again could go off to",
    "start": "1775399",
    "end": "1782039"
  },
  {
    "text": "um uh exponential I don't think I wrote this one up oh yeah that's the OD one so",
    "start": "1782039",
    "end": "1788000"
  },
  {
    "text": "what would cause a problem here uh is um like anything at the start like just a",
    "start": "1788000",
    "end": "1794320"
  },
  {
    "text": "bunch of A's uh and and a regular expression that eventually fails uh so this",
    "start": "1794320",
    "end": "1800320"
  },
  {
    "text": "um uh so it's it's not a valid URL at the end and if we test that",
    "start": "1800320",
    "end": "1805840"
  },
  {
    "text": "one uh yeah nasty that's a highly reasonable email address that you could",
    "start": "1805840",
    "end": "1811200"
  },
  {
    "text": "put into a system accidentally uh with just a you know an incorrect uh top level domain and uh and",
    "start": "1811200",
    "end": "1819320"
  },
  {
    "text": "that whole email address and it doesn't have to be A's right it could be anything could be F Nash is uh",
    "start": "1819320",
    "end": "1825559"
  },
  {
    "text": "terrible at RX and that email address it's done within",
    "start": "1825559",
    "end": "1830919"
  },
  {
    "text": "a second I don't know um it's a reasonable mistake to make",
    "start": "1830919",
    "end": "1836159"
  },
  {
    "text": "that then causes yeah that same issue again we see an exponential kind of uh increase in every single character you",
    "start": "1836159",
    "end": "1842519"
  },
  {
    "text": "add on because of the overlaps and so how do we fix these how do we recognize and fix um Regular",
    "start": "1842519",
    "end": "1849279"
  },
  {
    "text": "Expressions that are going to exponentially run off uh uh testing over",
    "start": "1849279",
    "end": "1854480"
  },
  {
    "text": "and over again failure after failure um first up we need to look for those nested qualifiers those are the",
    "start": "1854480",
    "end": "1861559"
  },
  {
    "text": "real kind of problems uh that are are obvious in the first place those qualifiers uh like overlapping",
    "start": "1861559",
    "end": "1868480"
  },
  {
    "text": "disjunctions so in this little example if we have a disjunction of a or either",
    "start": "1868480",
    "end": "1873799"
  },
  {
    "text": "a or b those A's are always going to kind of overlap and then we then that plus is just allowing it to do it",
    "start": "1873799",
    "end": "1880360"
  },
  {
    "text": "multiple times over just the same string uh we need to look for those consecutive patterns star. star I mean",
    "start": "1880360",
    "end": "1887200"
  },
  {
    "text": "the star didn't help us in the first place in the in the regular backtracking but if we're then adding them up",
    "start": "1887200",
    "end": "1892279"
  },
  {
    "text": "together next to each other uh that doar dostar gives us the opportunity to um",
    "start": "1892279",
    "end": "1897639"
  },
  {
    "text": "check every single permutation of characters next to each other in that string and and very quickly takes a lot",
    "start": "1897639",
    "end": "1904639"
  },
  {
    "text": "of time and then finally um you do need to look out for the sort of hidden patterns uh that aren't immediately",
    "start": "1904639",
    "end": "1912320"
  },
  {
    "text": "obvious that it's a star next to another star if you have something some kind of group that has a question mark in",
    "start": "1912320",
    "end": "1918880"
  },
  {
    "text": "between those two things that question mark can mean zero and therefore we can immediately like we can throw it away",
    "start": "1918880",
    "end": "1924240"
  },
  {
    "text": "when we're trying to look for these kind of things if you have a question mark in between um that dot star equals question",
    "start": "1924240",
    "end": "1931120"
  },
  {
    "text": "mark dot star the equals doesn't have to be there and we immediately fall back into our repeating uh combination",
    "start": "1931120",
    "end": "1937399"
  },
  {
    "text": "permutation pattern so that's what we need to look out for how do we fix them if we were",
    "start": "1937399",
    "end": "1943080"
  },
  {
    "text": "refactoring or yeah refactoring these nested qualifiers in something like the node fetch example uh from earlier um",
    "start": "1943080",
    "end": "1951120"
  },
  {
    "text": "here our DOT uh uh is overlapping with our um our period the slash dot is",
    "start": "1951120",
    "end": "1958200"
  },
  {
    "text": "overlapping with the uh uh dot for anything as many many times and and so",
    "start": "1958200",
    "end": "1963440"
  },
  {
    "text": "what we could just say is hey that first one doesn't have to be anything it can be just not a",
    "start": "1963440",
    "end": "1969919"
  },
  {
    "text": "period as zero uh not a period one or more times followed by a period that's",
    "start": "1969919",
    "end": "1975399"
  },
  {
    "text": "fine that works perfectly uh we can go back back to our timer um and check that one out I think",
    "start": "1975399",
    "end": "1981919"
  },
  {
    "text": "what got there if I actually fix it to be uh anything that's not a DOT takes no",
    "start": "1981919",
    "end": "1988799"
  },
  {
    "text": "time at all it's finished in 2 milliseconds it's totally happy with it um because there's now no overlap",
    "start": "1988799",
    "end": "1995480"
  },
  {
    "text": "that's not how node fetch fixed it but it's one way we could um in the Superhuman case uh where",
    "start": "1995480",
    "end": "2003159"
  },
  {
    "text": "they accidentally overlapped uh quotation marks because a not an at symbol also a quotation mark you can um",
    "start": "2003159",
    "end": "2011399"
  },
  {
    "text": "fix it by adding the quotation mark into the the side of things where we saying not quotation mark uh so the fix is to",
    "start": "2011399",
    "end": "2019240"
  },
  {
    "text": "yeah to go okay we can have quotes around anything that's not a quote or we can have anything that's not an at",
    "start": "2019240",
    "end": "2024840"
  },
  {
    "text": "symbol or a quote and that fixes it in fact we can go see that in the",
    "start": "2024840",
    "end": "2029960"
  },
  {
    "text": "timer um where's the superum one this one we said add in a question mark",
    "start": "2029960",
    "end": "2036240"
  },
  {
    "text": "quotation mark and it's done in in a millisecond two milliseconds sometimes doesn't matter how many times",
    "start": "2036240",
    "end": "2043519"
  },
  {
    "text": "we add that it's still 2 milliseconds it's done with it because we no longer have an overlap",
    "start": "2043519",
    "end": "2050878"
  },
  {
    "text": "we no longer have to uh compare back and forth and create a bunch of permutations um Atomic groups uh are a",
    "start": "2050879",
    "end": "2059398"
  },
  {
    "text": "feature in some regular expression engines that allow you to avoid this but they don't exist in the JavaScript",
    "start": "2059399",
    "end": "2065158"
  },
  {
    "text": "regular expression engine um which which is a shame uh so I'm not going to put the syntax of that",
    "start": "2065159",
    "end": "2070200"
  },
  {
    "text": "on there but you can fake these Atomic groups Atomic group basically says um when we get to the end of this pattern",
    "start": "2070200",
    "end": "2076599"
  },
  {
    "text": "uh we're not going to backtrack over it uh and so it immediately puts a stop to any of this backtracking and you can",
    "start": "2076599",
    "end": "2082520"
  },
  {
    "text": "kind of fake this and so if you were to do this with a node fetch example you do so",
    "start": "2082520",
    "end": "2088200"
  },
  {
    "text": "with and I have to remind myself of this as well because it's just confusing syntax um we we group everything up uh",
    "start": "2088200",
    "end": "2096399"
  },
  {
    "text": "into we group everything up uh into this kind of uh question mark equals which is",
    "start": "2096400",
    "end": "2102520"
  },
  {
    "text": "a forward look ahead uh to say all right let's look through all of these things at the start of our set of subdomains",
    "start": "2102520",
    "end": "2108920"
  },
  {
    "text": "and then once we capture all of those and then fail um we then use the slash one to say okay and then we put that",
    "start": "2108920",
    "end": "2114839"
  },
  {
    "text": "group back here and that stops the JavaScript engine actually looking back at it it's a clever",
    "start": "2114839",
    "end": "2121760"
  },
  {
    "text": "trick but I don't necessarily recommend it because three months later when",
    "start": "2121760",
    "end": "2128240"
  },
  {
    "text": "somebody's like what did you write this in the regular expression for and you don't know and they don't know and nobody knows and then you delete it",
    "start": "2128240",
    "end": "2134720"
  },
  {
    "text": "because it doesn't seem to do anything and then later somebody puts 20,000 white space characters in or something",
    "start": "2134720",
    "end": "2140760"
  },
  {
    "text": "like that um and the whole thing falls apart again uh if you ever do choose this if it's the only way to do",
    "start": "2140760",
    "end": "2146880"
  },
  {
    "text": "something then highly recommend commenting uh exactly why that's there uh because it's confusing syntax it's a",
    "start": "2146880",
    "end": "2153079"
  },
  {
    "text": "it's a hack uh I would uh include a link to this article on how and why it works",
    "start": "2153079",
    "end": "2158240"
  },
  {
    "text": "because that's also very useful this is this will be in the slides and everything uh that I will share later um",
    "start": "2158240",
    "end": "2163960"
  },
  {
    "text": "it's a very clever trick but I wouldn't necessarily recommend it it's just confusing and so that's also not how",
    "start": "2163960",
    "end": "2170400"
  },
  {
    "text": "node fetch fixed it uh instead it was down to avoiding regular Expressions again now if you're looking for a string",
    "start": "2170400",
    "end": "2176680"
  },
  {
    "text": "uh that is probably a URL and that ends in Local Host uh either has sub doain",
    "start": "2176680",
    "end": "2181760"
  },
  {
    "text": "either is the text local host or is Local Host with subdomain beforehand we can test that the string that we don't",
    "start": "2181760",
    "end": "2189400"
  },
  {
    "text": "need to do all that stuff we can just go hey what if the host is local host or if it ends with do Local",
    "start": "2189400",
    "end": "2196520"
  },
  {
    "text": "Host same stuff uh and is actually I think the way that they uh they fixed it inside not fetch they would just like",
    "start": "2196520",
    "end": "2202680"
  },
  {
    "text": "throw out the regular expression this makes more sense and that I think is actually you know it's more expressive",
    "start": "2202680",
    "end": "2208480"
  },
  {
    "text": "as to actually what we're trying to achieve there um so that was nice there are other",
    "start": "2208480",
    "end": "2215319"
  },
  {
    "text": "options um we could choose to a different engine uh this is not really a choice you can make in the front end uh",
    "start": "2215319",
    "end": "2221400"
  },
  {
    "text": "but if you're on if you're using nodejs or something in the back end um you can uh Google's re2 engine for example uh",
    "start": "2221400",
    "end": "2229720"
  },
  {
    "text": "doesn't do backtracking and so it does act differently to the existing JavaScript regular expression engine but",
    "start": "2229720",
    "end": "2235400"
  },
  {
    "text": "we'll never fall to any of these issues because it will not backtrack uh and so there is a uh",
    "start": "2235400",
    "end": "2241079"
  },
  {
    "text": "there's a node binding to this um there are other languages uh in the world that also don't have backtracking regular",
    "start": "2241079",
    "end": "2247960"
  },
  {
    "text": "expression engines in them I think go is one of them and so if you're a go programmer you're also fine with any of",
    "start": "2247960",
    "end": "2254760"
  },
  {
    "text": "these problems wouldn't have caused you an issue um but you also might not match",
    "start": "2254760",
    "end": "2260079"
  },
  {
    "text": "other things so it's it's there is a trade-off there they will act differently as regular expression",
    "start": "2260079",
    "end": "2266440"
  },
  {
    "text": "engines so that's how to sort of fix those but really the uh um how finding",
    "start": "2267440",
    "end": "2273240"
  },
  {
    "text": "if you have these issues is probably uh now you're hopefully a concerned uh that's kind of popped up in your head",
    "start": "2273240",
    "end": "2279440"
  },
  {
    "text": "you're like have I done this somewhere do I have to go check all my regular Expressions maybe maybe you should if",
    "start": "2279440",
    "end": "2286400"
  },
  {
    "text": "they're getting user input to them then perhaps and there are a bunch of options for this um a whole bunch of options uh",
    "start": "2286400",
    "end": "2294480"
  },
  {
    "text": "so I mentioned that superhuman uh both wrote up uh a postmortem on what happened with their kind of issue when",
    "start": "2294480",
    "end": "2300000"
  },
  {
    "text": "they tried to uh be smarter about um uh email regular Expressions uh and so as",
    "start": "2300000",
    "end": "2307040"
  },
  {
    "text": "part of their write up they wrote I'll bring that back in a sec um they wrote this thing tool called rex. rip and uh",
    "start": "2307040",
    "end": "2313839"
  },
  {
    "text": "and it does do a bunch of checking to see if a regular expression is vulnerable and so this is the the node",
    "start": "2313839",
    "end": "2318920"
  },
  {
    "text": "um the node fetch one and it points out that yeah our our issue here is down to",
    "start": "2318920",
    "end": "2324440"
  },
  {
    "text": "exponential backtracking um because we double with each additional thing very good stuff and we can check I've got",
    "start": "2324440",
    "end": "2331880"
  },
  {
    "text": "what else have I got uh let's check the Superhuman one you can throw that into there as well uh",
    "start": "2331880",
    "end": "2339000"
  },
  {
    "text": "and it will tell you again here's an overlap here's the problem really useful little tool it doesn't catch everything",
    "start": "2339000",
    "end": "2345319"
  },
  {
    "text": "um it turns out I think uh it's a I think it's a halting problem issue to actually uh check and fully uh",
    "start": "2345319",
    "end": "2352599"
  },
  {
    "text": "understand every regular expression and so it's not technically possible to really know uh but reg. rip is a nice",
    "start": "2352599",
    "end": "2358440"
  },
  {
    "text": "one it's a nice little interface to try things without out try out things uh in",
    "start": "2358440",
    "end": "2363640"
  },
  {
    "text": "a web interface uh there are other ones like uh recheck um which is also a",
    "start": "2363640",
    "end": "2369040"
  },
  {
    "text": "really useful tool uh Sona Cube um I used to work at Sona and this is sort of one of the reasons I came up with this",
    "start": "2369040",
    "end": "2375160"
  },
  {
    "text": "talk was because I like this is kind of useful Sonic Cube Security checks will um Sonic Cube or Sona Cloud uh will",
    "start": "2375160",
    "end": "2380760"
  },
  {
    "text": "allow will scan your entire code base and again if it can detect a vulnerable",
    "start": "2380760",
    "end": "2387240"
  },
  {
    "text": "uh regular expression it will tell you about it uh if you're using eslint then",
    "start": "2387240",
    "end": "2392680"
  },
  {
    "text": "uh there are two plugins available uh eslint plug-in redos and eslint plugin",
    "start": "2392680",
    "end": "2398480"
  },
  {
    "text": "Rex uh one of them yes so ex eslint plugin redos uh is",
    "start": "2398480",
    "end": "2404480"
  },
  {
    "text": "the same code that's behind this recheck Tool uh at the top there and so you can add that into your uh es link config and",
    "start": "2404480",
    "end": "2411480"
  },
  {
    "text": "have that do as much checking against these things as possible it might be uh not necessarily a good idea to um run",
    "start": "2411480",
    "end": "2418920"
  },
  {
    "text": "that every time you're run isint but perhaps something in CI because it it will take longer to kind of properly",
    "start": "2418920",
    "end": "2425760"
  },
  {
    "text": "looking through every kind of regular expression in your in your code base uh can take quite a long time uh so it's",
    "start": "2425760",
    "end": "2431319"
  },
  {
    "text": "good to run maybe in CI um uh but then if you run it in CI and you don't care about and and you",
    "start": "2431319",
    "end": "2437280"
  },
  {
    "text": "don't care about how long it takes use both of them H they might they might catch things that neither the other one",
    "start": "2437280",
    "end": "2443520"
  },
  {
    "text": "doesn't so that's cool uh and if you ever do want to play with my little Rex timer it's got a few of those examples",
    "start": "2443520",
    "end": "2448680"
  },
  {
    "text": "to play with it's got some uh kind of simpler examples as well um and uh and",
    "start": "2448680",
    "end": "2455079"
  },
  {
    "text": "that's just up on my GitHub under f github.io RX",
    "start": "2455079",
    "end": "2460440"
  },
  {
    "text": "timer I did write this entire thing up as a blog post it's one of the longest things ever written in the last couple",
    "start": "2460440",
    "end": "2465880"
  },
  {
    "text": "of years um so if you are interested in kind of reading or going back over any of this stuff that QR code will take you",
    "start": "2465880",
    "end": "2472240"
  },
  {
    "text": "there uh and my former employer will thank you for it um it's a it's it is a useful blog",
    "start": "2472240",
    "end": "2480359"
  },
  {
    "text": "post it does uh it Tes to break things down and and again links off to many of those stories and and other kind of uh",
    "start": "2480359",
    "end": "2486440"
  },
  {
    "text": "things that uh the postmortem that were written up by people who fell uh for uh these regular expression",
    "start": "2486440",
    "end": "2494480"
  },
  {
    "text": "issues uh and finally that's actually uh all I've got for you I got to 43 minutes there we go um uh if you do at all want",
    "start": "2495319",
    "end": "2502400"
  },
  {
    "text": "the slides for this there is a QR code for that that has all the links to those tools that help you uh out there um if",
    "start": "2502400",
    "end": "2508960"
  },
  {
    "text": "you're at all interested in data stacks and what we do that's this QR code um uh",
    "start": "2508960",
    "end": "2514359"
  },
  {
    "text": "yeah that's cool uh and again um I uh I'm very delighted that some people came",
    "start": "2514359",
    "end": "2519760"
  },
  {
    "text": "to watch a talk about regular Expressions uh when we know there's there's going to be comedy about maths later uh and and you could have been in",
    "start": "2519760",
    "end": "2526119"
  },
  {
    "text": "the sunshine or just just hanging out with people hallway tracking whatever I appreciate you coming along thank you very much again my name is f as I'm a",
    "start": "2526119",
    "end": "2532640"
  },
  {
    "text": "developer relations engineer at data Stacks uh and uh yeah thank you so much",
    "start": "2532640",
    "end": "2537839"
  },
  {
    "text": "for coming thank [Applause]",
    "start": "2537839",
    "end": "2542078"
  },
  {
    "text": "you we obviously have time for a bit of questions if uh for for questions if anybody does have uh anything uh or we",
    "start": "2544079",
    "end": "2550960"
  },
  {
    "text": "can all go and see if they've got snacks out for us between the next talks also I'm of course around uh for",
    "start": "2550960",
    "end": "2558599"
  },
  {
    "text": "the rest of the event uh including um uh and most importantly tomorrow night uh",
    "start": "2558599",
    "end": "2564119"
  },
  {
    "text": "after the line Breakers play uh I'll be leading us all in a rousing karaoke session I hope to see every single one",
    "start": "2564119",
    "end": "2569520"
  },
  {
    "text": "of you there down the front uh think of your songs right now uh we'll get ways to uh to to select them later uh but",
    "start": "2569520",
    "end": "2576520"
  },
  {
    "text": "yeah thank you so much for coming and enjoy the rest of the event",
    "start": "2576520",
    "end": "2581640"
  }
]