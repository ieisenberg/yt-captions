[
  {
    "text": "my name is Brandon and I'd like to start today by telling you a story the year",
    "start": "4759",
    "end": "11420"
  },
  {
    "text": "was 2005 in a bright-eyed web developer who was entering his fifth year of his",
    "start": "11420",
    "end": "19400"
  },
  {
    "text": "career was spending a lot of his time working within in the world of cross",
    "start": "19400",
    "end": "27590"
  },
  {
    "text": "browser support and as we all know from those of us that that worked around",
    "start": "27590",
    "end": "32630"
  },
  {
    "text": "those days we can remember that we didn't tend to concern ourselves much with patterns and frameworks and",
    "start": "32630",
    "end": "39020"
  },
  {
    "text": "standards much in those days it was a hard life really often the toughest",
    "start": "39020",
    "end": "45560"
  },
  {
    "text": "thing about living in that world was getting something to work reasonably well across Internet Explorer and",
    "start": "45560",
    "end": "51320"
  },
  {
    "text": "Firefox and Safari so it was a tough time so imagine the excitement of that",
    "start": "51320",
    "end": "57860"
  },
  {
    "text": "young fellow when he heard about this amazing thing called Ajax asynchronous JavaScript and XML sort of the dawn of",
    "start": "57860",
    "end": "64759"
  },
  {
    "text": "the new web in 2005-2006 now the technology behind this had been",
    "start": "64759",
    "end": "71630"
  },
  {
    "text": "available in Internet Explorer since around ie 5:5 but the dawn of this term",
    "start": "71630",
    "end": "77780"
  },
  {
    "text": "you know when this term was coined a lot of people were doing we're implementing",
    "start": "77780",
    "end": "83299"
  },
  {
    "text": "this set of technologies across browsers and in in in coming up with clever hacks",
    "start": "83299",
    "end": "89030"
  },
  {
    "text": "to get this working in other browsers and really doing some amazing things that was moving us away from the world",
    "start": "89030",
    "end": "94340"
  },
  {
    "text": "of round-tripping back to the server with every page refresh and into adding interactivity into our sites so imagine",
    "start": "94340",
    "end": "101299"
  },
  {
    "text": "that developers surprise when he got jQuery AJAX for the first time and all",
    "start": "101299",
    "end": "106399"
  },
  {
    "text": "the wonderful things that that introduced and the problem is jQuery",
    "start": "106399",
    "end": "111679"
  },
  {
    "text": "AJAX was great you know everything that we were doing with async code though in those days really came with a lot of",
    "start": "111679",
    "end": "118130"
  },
  {
    "text": "traps those traps really or the fault of the callback and in a year in 2009 in",
    "start": "118130",
    "end": "125299"
  },
  {
    "text": "2006 in a year that had a Nickelback song that was featured in the top 100 in the United States and a x-men movie that",
    "start": "125299",
    "end": "133640"
  },
  {
    "text": "made Wolverines when the next ten years trying to excuse me that caused huge Ackman it's",
    "start": "133640",
    "end": "139140"
  },
  {
    "text": "been the next 10 years trying to kill off Wolverine we also had the callbacks now callback the idea behind a callback",
    "start": "139140",
    "end": "147270"
  },
  {
    "text": "was great this was our way in those days to deal with asynchronous code that we",
    "start": "147270",
    "end": "152670"
  },
  {
    "text": "didn't know at some future point we needed to make a request we needed to get some sort of response back this was",
    "start": "152670",
    "end": "158130"
  },
  {
    "text": "the state of the art at the at the time but those of us again who have lived in those days and worked in that era knew",
    "start": "158130",
    "end": "164610"
  },
  {
    "text": "and we know how quickly things like this would get out of hand callbacks nested",
    "start": "164610",
    "end": "170250"
  },
  {
    "text": "callbacks were a mess and this is every developers every web developer from 2006",
    "start": "170250",
    "end": "176010"
  },
  {
    "text": "to 2009 this was our worst nightmare then we knew from almost the beginning that we needed to do something about",
    "start": "176010",
    "end": "182370"
  },
  {
    "text": "this and so there was a lot of work from 2006 on and especially around the end around 2009 where we started to do more",
    "start": "182370",
    "end": "189840"
  },
  {
    "text": "to really think about how can we solve this problem with callbacks and yet still deal with the magic of asynchronous code and this in the sorts",
    "start": "189840",
    "end": "196800"
  },
  {
    "text": "of dynamic interactivity that we wanted in our applications and thus the idea of promises was borne out promises are the",
    "start": "196800",
    "end": "203910"
  },
  {
    "text": "concept of promises is a concept in computer science has been around since 1976 but in the context of JavaScript it",
    "start": "203910",
    "end": "211470"
  },
  {
    "text": "was around 2009 where we really started to think about using this as a way to help manage the kind of asynchronous",
    "start": "211470",
    "end": "217110"
  },
  {
    "text": "code that we were writing and the whole point here with promises is that it allows you to create a proxy object that",
    "start": "217110",
    "end": "223620"
  },
  {
    "text": "represents the future state of some unknown value so you defer the ability",
    "start": "223620",
    "end": "228900"
  },
  {
    "text": "you defer your own management of the return of an async call or some sort of other unknown future interaction to",
    "start": "228900",
    "end": "236280"
  },
  {
    "text": "another object to manage that state for you and a lot of why we have promises in JavaScript today is due to the common",
    "start": "236280",
    "end": "243180"
  },
  {
    "text": "Jas group in the standards body that in 2009 was formed around this idea of",
    "start": "243180",
    "end": "248520"
  },
  {
    "text": "getting back to improving the JavaScript language now again those were dark times",
    "start": "248520",
    "end": "254310"
  },
  {
    "text": "in the early 2000s and even in 2009 we were still at a point where there wasn't a ton of work going on in standards",
    "start": "254310",
    "end": "261510"
  },
  {
    "text": "bodies not not only within the browsers and their capabilities but within the JavaScript language itself but as some",
    "start": "261510",
    "end": "268050"
  },
  {
    "text": "of you may remember 2009 was also the year that Ryan all introduced nodejs and so there was a need there was interest in the community",
    "start": "268050",
    "end": "274800"
  },
  {
    "text": "to spend a lot more time thinking about how we could actually implement better alternatives to callbacks not just in",
    "start": "274800",
    "end": "281610"
  },
  {
    "text": "the JavaScript language but to make that available in our browsers and we had that I mentioned jQuery AJAX jQuery AJAX",
    "start": "281610",
    "end": "287460"
  },
  {
    "text": "was promise based dojo deferred was the first implementation of a promise based",
    "start": "287460",
    "end": "293820"
  },
  {
    "text": "of a promise based framework inside of the browsers and then in the common j/s",
    "start": "293820",
    "end": "299160"
  },
  {
    "text": "body there were actually five separate one abandoned and the four that I've listed here five separate promises",
    "start": "299160",
    "end": "305460"
  },
  {
    "text": "implementations or specifications that were put forward so there was a ton of interest here and thankfully because of",
    "start": "305460",
    "end": "312450"
  },
  {
    "text": "the interest in html5 and I love this because it's actually been years since I've gotten to put an html5 logo up on a",
    "start": "312450",
    "end": "317610"
  },
  {
    "text": "solana slide deck but I got to do it today because I'm giving you a brief history here but it was the interest in html5 all the way from Google to Safari",
    "start": "317610",
    "end": "325710"
  },
  {
    "text": "to 5:00 to Mozilla through Firefox and ultimately Microsoft with IE 9 and beyond where we got interest in",
    "start": "325710",
    "end": "333330"
  },
  {
    "text": "improving our browsers and improving the JavaScript language improving CSS improving every aspect of the web",
    "start": "333330",
    "end": "339960"
  },
  {
    "text": "development experience and so where we are with promises today this better alternative to callbacks is that any",
    "start": "339960",
    "end": "346320"
  },
  {
    "text": "browser not named Internet Explorer has full support for promises even then even",
    "start": "346320",
    "end": "351600"
  },
  {
    "text": "the even the mobile browsers and it's of course in node as well so very briefly",
    "start": "351600",
    "end": "357780"
  },
  {
    "text": "for anyone that hasn't had a chance to really work with promises before in the context of formal promise to support in",
    "start": "357780",
    "end": "364110"
  },
  {
    "text": "the JavaScript language every promise it can represents one two three states",
    "start": "364110",
    "end": "369240"
  },
  {
    "text": "pending fulfilled and rejected when a promise is created that's its initial state it's pending and then at the",
    "start": "369240",
    "end": "376310"
  },
  {
    "text": "execution of some interaction a lot of times it ends up being an ajax call an api call of something something like",
    "start": "376310",
    "end": "382169"
  },
  {
    "text": "that at the end of that execution that promise is either fulfilled it completed",
    "start": "382169",
    "end": "387419"
  },
  {
    "text": "successfully or it's rejected because there was some sort of error and one of the great things about promises which",
    "start": "387419",
    "end": "393690"
  },
  {
    "text": "takes us a little bit out of that world of callback hell though you see in just a minute it's not perfect although it is",
    "start": "393690",
    "end": "399000"
  },
  {
    "text": "better is that we can actually chain promises together this is actually in many cases we",
    "start": "399000",
    "end": "404670"
  },
  {
    "text": "Oh thanks to this from the promises a specification in common J's what was referred to as Venables is the idea of a",
    "start": "404670",
    "end": "411210"
  },
  {
    "text": "venable is a promise that allows you to chain its interaction to cascade into another asynchronous call into another",
    "start": "411210",
    "end": "417630"
  },
  {
    "text": "interaction so the formal promise object has a couple of prototype methods for then for catch for finally and by",
    "start": "417630",
    "end": "425220"
  },
  {
    "text": "chaining together responses we can pass information down the line to dependent interactions so in this case I'm calling",
    "start": "425220",
    "end": "432630"
  },
  {
    "text": "an API to get a collection of devices once I get that device I can get an individual device by name and then these",
    "start": "432630",
    "end": "438750"
  },
  {
    "text": "these chains of API calls can all happen and I can reasonably tell what's actually going on and what comes out the",
    "start": "438750",
    "end": "444540"
  },
  {
    "text": "other side I also have the ability with promises to bubble up my air handling into one catch that occurs at the end of",
    "start": "444540",
    "end": "451500"
  },
  {
    "text": "that chain of results and this is again a nice clean way of working with",
    "start": "451500",
    "end": "457080"
  },
  {
    "text": "callback based API it's because the reality is that under the covers believe it or not promises are basically just hiding the",
    "start": "457080",
    "end": "463170"
  },
  {
    "text": "ugliness of callbacks from you it's nice but it is still ultimately a little bit of syntactic sugar but the benefit of",
    "start": "463170",
    "end": "469440"
  },
  {
    "text": "that is that we can then take something that's callback based that we're probably not going to get updated to",
    "start": "469440",
    "end": "474690"
  },
  {
    "text": "being promise based anytime soon and actually rapid and promises ourself and one great example of that is the",
    "start": "474690",
    "end": "480930"
  },
  {
    "text": "geolocation API in the browser it's gonna be callback based for a while because of backward compatibility but if",
    "start": "480930",
    "end": "486690"
  },
  {
    "text": "you're working with it it's actually something that you can mess with in order to see what it looks like to work",
    "start": "486690",
    "end": "492210"
  },
  {
    "text": "with promises and actually to be able to work with those on your own and then wrap something that's more friendly more",
    "start": "492210",
    "end": "498570"
  },
  {
    "text": "geolocation based for you to use so I've got a simple application that just does a couple of things the first thing I'm",
    "start": "498570",
    "end": "506760"
  },
  {
    "text": "going to show you is what it looks like the the traditional way of working with the geolocation API really this is a",
    "start": "506760",
    "end": "514050"
  },
  {
    "text": "blast in the past for many for many of you blast from the past so I call navigator dot geo location dot get",
    "start": "514050",
    "end": "521789"
  },
  {
    "text": "current position and this takes two things it takes a success callback and it takes an error callback it's very",
    "start": "521790",
    "end": "527370"
  },
  {
    "text": "common pattern for things that were created around this time and that's it navigator geolocation to get current",
    "start": "527370",
    "end": "533700"
  },
  {
    "text": "position if it succeeds execute this callback if it fails execute this other air handler and then we're I'm",
    "start": "533700",
    "end": "540660"
  },
  {
    "text": "going to call that actually inside of my application I'm just gonna call geolocation dot what did I call it",
    "start": "540660",
    "end": "547050"
  },
  {
    "text": "oh wait that's in the wrong place pardon me I go in here locate geolocation dot",
    "start": "547050",
    "end": "558260"
  },
  {
    "text": "callback locate and then I will pass in this is where I'm actually gonna specify my handlers now thankfully with with new",
    "start": "558260",
    "end": "565560"
  },
  {
    "text": "es6 language features I can actually just use arrow functions to make this a lot cleaner but what we would do back in",
    "start": "565560",
    "end": "572550"
  },
  {
    "text": "the day was we would just you know function parameter open open and close",
    "start": "572550",
    "end": "578550"
  },
  {
    "text": "but here I'm just gonna take and log out the position for the success and then in the case of the air I'm gonna log the",
    "start": "578550",
    "end": "583950"
  },
  {
    "text": "error and that's it so when I go to my",
    "start": "583950",
    "end": "589200"
  },
  {
    "text": "wonderful application here which is what I get for closing the terminal right",
    "start": "589200",
    "end": "595290"
  },
  {
    "text": "before forgetting that I actually needed something in there so bear with me for just a second while I run this demo fail",
    "start": "595290",
    "end": "608209"
  },
  {
    "text": "where's my directory pardon me",
    "start": "611360",
    "end": "617660"
  },
  {
    "text": "figure out where I'm based their",
    "start": "618610",
    "end": "622170"
  },
  {
    "text": "presentations",
    "start": "624269",
    "end": "627269"
  },
  {
    "text": "all right now come on",
    "start": "632380",
    "end": "640260"
  },
  {
    "text": "and we got two good jokes we're seeing at movies lately presentations do",
    "start": "648580",
    "end": "663820"
  },
  {
    "text": "callbacks there we go and I can do NPM run start oh come on",
    "start": "663820",
    "end": "671820"
  },
  {
    "text": "NPM run serve and maybe okay there we go",
    "start": "671820",
    "end": "678450"
  },
  {
    "text": "wonderful of the version I just wanted y'all to know that I know how to start an NPM server anytime I need to do it on",
    "start": "678450",
    "end": "686200"
  },
  {
    "text": "demand in front of 40 people so if I click locate me it's gonna run my callback base code and I should get a",
    "start": "686200",
    "end": "693160"
  },
  {
    "text": "response there I've got my coordinates that's great that was callback base so again wonderful we're not here to talk about",
    "start": "693160",
    "end": "698860"
  },
  {
    "text": "callbacks we all know callbacks it's a wonderful thing that we have gotten much more improvement on in the context of",
    "start": "698860",
    "end": "705089"
  },
  {
    "text": "promises so what I'm gonna do is I'm gonna re implement that and I'm just gonna call I'm just gonna wrap it in a",
    "start": "705089",
    "end": "711070"
  },
  {
    "text": "promise so there's still callbacks that are actually happening here but the beauty is again I'm allowing I'm allowing that to be handled internally",
    "start": "711070",
    "end": "717279"
  },
  {
    "text": "by promise so in this case I'm going to do return new promise not a processing",
    "start": "717279",
    "end": "723640"
  },
  {
    "text": "instruction and then every promise needs a resolved Handler and a reject Handler",
    "start": "723640",
    "end": "729640"
  },
  {
    "text": "when you're creating one on your own and so in this case now that I've got that I ever resolve and reject now I'm gonna",
    "start": "729640",
    "end": "735399"
  },
  {
    "text": "call navigator dot geo location dot get current position and I'm gonna call",
    "start": "735399",
    "end": "741910"
  },
  {
    "text": "resolve and reject that's it so now I wrap this in a promise that's great",
    "start": "741910",
    "end": "747399"
  },
  {
    "text": "wonderful I've added more code what does this actually get you as someone that is calling the geolocation API well this",
    "start": "747399",
    "end": "753399"
  },
  {
    "text": "enables you to do on the other end now is I can call geolocation dot promise",
    "start": "753399",
    "end": "758920"
  },
  {
    "text": "locate and this came I'm not passing anything in and then I'll call then and here I get my position and all do",
    "start": "758920",
    "end": "767380"
  },
  {
    "text": "console dialog position and then a catch",
    "start": "767380",
    "end": "774250"
  },
  {
    "text": "for the air console dot log air right now if I run",
    "start": "774250",
    "end": "783740"
  },
  {
    "text": "that I will get the same result again",
    "start": "783740",
    "end": "789850"
  },
  {
    "text": "so there are my coordinates now in terms of what what this saved you is in when",
    "start": "789850",
    "end": "797480"
  },
  {
    "text": "you're making a single call it may look like okay that's syntactic sugar and ultimately it is their call backs behind",
    "start": "797480",
    "end": "802730"
  },
  {
    "text": "the scenes but what this ends up being this ends up being very useful as I showed in the slide earlier when you're",
    "start": "802730",
    "end": "808790"
  },
  {
    "text": "starting to chain things together when you have dependencies between API so I want to actually take a second to look",
    "start": "808790",
    "end": "814610"
  },
  {
    "text": "at that because I think that's when things look a little bit more interesting so who uses promises a lot",
    "start": "814610",
    "end": "819980"
  },
  {
    "text": "of modern API is that work that work with asynchronous code especially now implement promises you find very few",
    "start": "819980",
    "end": "827450"
  },
  {
    "text": "things that are being maintained now that still use callbacks again some browser-based api's they do you can wrap",
    "start": "827450",
    "end": "833240"
  },
  {
    "text": "them but one example that I'll share today from personal bias is from particles so I work for particle we are",
    "start": "833240",
    "end": "839390"
  },
  {
    "text": "an IOT hardware and platform company and so I spend my day actually building",
    "start": "839390",
    "end": "844940"
  },
  {
    "text": "things with hardware devices so I build connected conference badges and things",
    "start": "844940",
    "end": "850190"
  },
  {
    "text": "like this with blinky lights and cellular and Wi-Fi solutions and things like that and this is relevant the world",
    "start": "850190",
    "end": "856970"
  },
  {
    "text": "of JavaScript development is relevant to us because we provide SDKs we recognize that for developers that are building",
    "start": "856970",
    "end": "863089"
  },
  {
    "text": "connected solutions reading from a sensor or controlling an actuator is not something that you want to keep embedded",
    "start": "863089",
    "end": "869149"
  },
  {
    "text": "on that board itself a lot of times these projects need to post sensor data out to the cloud for processing or they",
    "start": "869149",
    "end": "874970"
  },
  {
    "text": "need to expose functionality to a web app or to a mobile device and so we provide SDKs for iOS Android and Windows",
    "start": "874970",
    "end": "881209"
  },
  {
    "text": "and then my personal favorite we provide a JavaScript SDK as well and where this ends up being really useful is when",
    "start": "881209",
    "end": "887720"
  },
  {
    "text": "we're building solutions at scale a lot of times we need to control individual devices without being able to mess with",
    "start": "887720",
    "end": "894440"
  },
  {
    "text": "and touch every single one of these at a time so this badge that I held up earlier we actually created this for our",
    "start": "894440",
    "end": "900020"
  },
  {
    "text": "booth at the Bay Area Maker Faire in California last month and we created 11 of these for staff to wear in the booth",
    "start": "900020",
    "end": "906500"
  },
  {
    "text": "and I wasn't going to go and touch every single one of those as people were trading often and picking up the boot picking up",
    "start": "906500",
    "end": "913110"
  },
  {
    "text": "the badge to work in the booth for three or four hours I wanted to put their names on the badge while they were",
    "start": "913110",
    "end": "918240"
  },
  {
    "text": "wearing it and so we're able to use cloud api's and asynchronous JavaScript",
    "start": "918240",
    "end": "923700"
  },
  {
    "text": "code ultimately to update these devices and give you real-time information so",
    "start": "923700",
    "end": "929010"
  },
  {
    "text": "with all of that as background I want to show you actually what that looks like in the context of working working with",
    "start": "929010",
    "end": "934709"
  },
  {
    "text": "these particle devices and our cloud API ultimately so I'll start with by showing",
    "start": "934709",
    "end": "940260"
  },
  {
    "text": "you the particle console because this will this will make sense in just a moment but the particle console is where",
    "start": "940260",
    "end": "945360"
  },
  {
    "text": "you manage all of your individual online devices so you can see the devices that you have named because I do this all day",
    "start": "945360",
    "end": "952350"
  },
  {
    "text": "long I have like three screens worth of of connected devices and then when you look at an individual device you can get",
    "start": "952350",
    "end": "958410"
  },
  {
    "text": "information about it but one of the cool things again I mentioned because of the cloud API you can expose functions on",
    "start": "958410",
    "end": "964380"
  },
  {
    "text": "that device so this particular device is actually an LED light panel that's in my office back in Austin Texas and I can",
    "start": "964380",
    "end": "971279"
  },
  {
    "text": "show local weather on it or set the text too high and call that and this is actually going to go and set that panel",
    "start": "971279",
    "end": "977250"
  },
  {
    "text": "Pramod I promise I don't have a video camera set up in there so you'll have to believe me but it'll actually update the text on that panel I can show animations",
    "start": "977250",
    "end": "983640"
  },
  {
    "text": "and things like that as well and everything that you have available here inside of this console is available via",
    "start": "983640",
    "end": "989640"
  },
  {
    "text": "our cloud API and then ultimately available via our JavaScript API as well",
    "start": "989640",
    "end": "994730"
  },
  {
    "text": "so like a lot of JavaScript based API is nowadays you can install that via NPM",
    "start": "994730",
    "end": "1000050"
  },
  {
    "text": "you install the API via NPM and then you have the ability to use the functionality exposed by the API and if",
    "start": "1000050",
    "end": "1006769"
  },
  {
    "text": "you'll notice the text on the left here is our functions in this library I'll return promises so this is a promise",
    "start": "1006769",
    "end": "1012560"
  },
  {
    "text": "based library you'll notice in some of these cases that the way that we've implemented many things it's promise",
    "start": "1012560",
    "end": "1017839"
  },
  {
    "text": "based also providing a second error handle a second parameter air handler which you can do that as a callback or",
    "start": "1017839",
    "end": "1024470"
  },
  {
    "text": "you can actually wrap like I'll show you in just a second and do that yourself so again having this at my disposal and now",
    "start": "1024470",
    "end": "1033319"
  },
  {
    "text": "what that allows me to do inside of this project inside of my my little demo app here is that I can actually do some",
    "start": "1033319",
    "end": "1038870"
  },
  {
    "text": "things like getting the list of all of my online devices so again we're talking about promises here",
    "start": "1038870",
    "end": "1044600"
  },
  {
    "text": "so when it comes to getting my list of online devices I'm gonna return a new promise I'm gonna do resolve reject like",
    "start": "1044600",
    "end": "1054860"
  },
  {
    "text": "usual and then I'm gonna call the particle API so you'll notice here that I've brought it in I've instantiated it",
    "start": "1054860",
    "end": "1061789"
  },
  {
    "text": "I have my token hidden from prying eyes and you can call list devices and then",
    "start": "1061789",
    "end": "1069049"
  },
  {
    "text": "for list devices I'm gonna pass in that token and then then I will call then so",
    "start": "1069049",
    "end": "1077240"
  },
  {
    "text": "with this now what I'm gonna have is I'm gonna have a list of devices so this is where I will call resolve resolve is my",
    "start": "1077240",
    "end": "1083630"
  },
  {
    "text": "way of saying I'm done you can you can set the promise now to a resolved state",
    "start": "1083630",
    "end": "1089090"
  },
  {
    "text": "and anything that is calling it you can call its then handle it right and then",
    "start": "1089090",
    "end": "1094549"
  },
  {
    "text": "in the case of catching an error I will",
    "start": "1094549",
    "end": "1102380"
  },
  {
    "text": "do reject and that's it so now if I go",
    "start": "1102380",
    "end": "1109940"
  },
  {
    "text": "back to my wonderful fantastic little demo page here and I click on get particle devices I've done a console",
    "start": "1109940",
    "end": "1116480"
  },
  {
    "text": "table by the way it's cool cool little console feature that if you don't have a ton of data like I do you can do a",
    "start": "1116480",
    "end": "1121549"
  },
  {
    "text": "console table and actually get the data nice and formatted in any array it just gets formatted for you automatically so",
    "start": "1121549",
    "end": "1127669"
  },
  {
    "text": "cool little tip but I can actually see my devices that are on line here I can see that whether or not things whether it's connected it is it is connected but",
    "start": "1127669",
    "end": "1134720"
  },
  {
    "text": "I also have a list of 24 that's that's a few too many so I'm gonna use the power of promises to now do my next step I",
    "start": "1134720",
    "end": "1140780"
  },
  {
    "text": "have that list of devices but I want to filter that down I only want to show the devices that are actually connected so",
    "start": "1140780",
    "end": "1147080"
  },
  {
    "text": "you all don't have to continue watching me type type these things over and over again I actually already have this here",
    "start": "1147080",
    "end": "1152929"
  },
  {
    "text": "but in the next case then for getting just the online devices I have I'm calling the API I'm getting my list of",
    "start": "1152929",
    "end": "1158960"
  },
  {
    "text": "devices so you remember list devices is promise based it is itself returning a",
    "start": "1158960",
    "end": "1165049"
  },
  {
    "text": "promise and when it resolves its promise I know I have a list of devices that I can then resolve after filtering out",
    "start": "1165049",
    "end": "1171620"
  },
  {
    "text": "just those devices calling the filter method on the devices body array and",
    "start": "1171620",
    "end": "1177169"
  },
  {
    "text": "just getting those device that are connected so now when I call this this will get me just a list of 15",
    "start": "1177169",
    "end": "1184929"
  },
  {
    "text": "but you'll notice when you look at this inside of my list of 15 devices and this is a common pattern when we work with",
    "start": "1184929",
    "end": "1191240"
  },
  {
    "text": "API api's tend to be shaped very efficiently we try to keep them small for a reason but that is tenth what",
    "start": "1191240",
    "end": "1198320"
  },
  {
    "text": "tends to lead us into cases where we have dependent asynchronous calls that need to happen one after another what I",
    "start": "1198320",
    "end": "1204259"
  },
  {
    "text": "really want to know right now is the same information that's here in the console which is what are the functions that are available on this device but if",
    "start": "1204259",
    "end": "1211669"
  },
  {
    "text": "I look at what's actually being logged here I don't have that information because I need to make a second API call but in order to make that API call I",
    "start": "1211669",
    "end": "1218450"
  },
  {
    "text": "need to pass in the ID of a device that I have so this is where we actually",
    "start": "1218450",
    "end": "1223610"
  },
  {
    "text": "start to see promises making a little bit more sense now what I want to do is I want to call some of those device",
    "start": "1223610",
    "end": "1229129"
  },
  {
    "text": "functions and the way that this ultimately ends up working again I have a new promise I'm listing those devices",
    "start": "1229129",
    "end": "1234470"
  },
  {
    "text": "and now for my first then with devices I'm filtering to get down the name of the device that gets passed in so let's",
    "start": "1234470",
    "end": "1240799"
  },
  {
    "text": "assume in this case I have a name of a device but not an ID so I have even an additional step there I know the name I",
    "start": "1240799",
    "end": "1246559"
  },
  {
    "text": "need you to give me the ID based on that matching so it finds the the actual device by name I have that device ID",
    "start": "1246559",
    "end": "1253490"
  },
  {
    "text": "which is returned to the next promise that's my next ID to my next then so now",
    "start": "1253490",
    "end": "1259879"
  },
  {
    "text": "I make another call against the particle API to get that individual device by the ID I return that result now I've got",
    "start": "1259879",
    "end": "1267710"
  },
  {
    "text": "another promise that has been resolved and in this case I have an individual device and from here I call resolved",
    "start": "1267710",
    "end": "1274309"
  },
  {
    "text": "with device body functions and the way that I call this in my application is very simple I just call particles got",
    "start": "1274309",
    "end": "1280759"
  },
  {
    "text": "get device functions with the name of the individual device and then console",
    "start": "1280759",
    "end": "1285769"
  },
  {
    "text": "table that information out so what this ends up looking like is this this list",
    "start": "1285769",
    "end": "1293119"
  },
  {
    "text": "of ultimate functions what's interesting and this is great you know so I I was able to use promises to make some",
    "start": "1293119",
    "end": "1299749"
  },
  {
    "text": "interesting to make some interesting things happen there was a little bit easier to reason amount but if you look",
    "start": "1299749",
    "end": "1304970"
  },
  {
    "text": "at this this is actually this is quite a bit of code for something it's ultimately just a couple of API calls they're like two calls going on there's",
    "start": "1304970",
    "end": "1311600"
  },
  {
    "text": "some filtering happening here and even when I was writing this I fell into this trap of not resolving and like resolving in",
    "start": "1311600",
    "end": "1319310"
  },
  {
    "text": "the wrong place or maybe not confused about where I'm returning because it's not really evident when you look at",
    "start": "1319310",
    "end": "1325460"
  },
  {
    "text": "promises especially when you've got Venables that are chained like this really where the source of this comes",
    "start": "1325460",
    "end": "1331160"
  },
  {
    "text": "from if without squinting you kind of have to look close and say ok no I'm getting the ID here that must be the",
    "start": "1331160",
    "end": "1336890"
  },
  {
    "text": "device ID and I think this is where promises actually start to cause a bit of a problem which is what we're gonna",
    "start": "1336890",
    "end": "1342350"
  },
  {
    "text": "talk about right now because there is no",
    "start": "1342350",
    "end": "1347480"
  },
  {
    "text": "doubt that promises are a big improvement on callbacks they help manage a lot of that state for us but like I just showed they can they can be",
    "start": "1347480",
    "end": "1354140"
  },
  {
    "text": "confusing they give me hard to reason about they can be hard to maintain at times because ultimately we've created syntactic sugar",
    "start": "1354140",
    "end": "1360500"
  },
  {
    "text": "that tries to make our asynchronous code look a little bit more synchronous but we still have those dependencies to",
    "start": "1360500",
    "end": "1366770"
  },
  {
    "text": "manage in our own heads and there's lots there's lots of things than the promise",
    "start": "1366770",
    "end": "1371780"
  },
  {
    "text": "suspect that make this easier we talked about Venables when you're working with things where you have a bunch of",
    "start": "1371780",
    "end": "1377030"
  },
  {
    "text": "promises that need to occur in parallel you can actually do promise dot all which I show on the bottom or promise",
    "start": "1377030",
    "end": "1382850"
  },
  {
    "text": "not race if you just want to allow things to finish in parallel as quickly as possible so you have ways to work",
    "start": "1382850",
    "end": "1388640"
  },
  {
    "text": "with this but ultimately again as with callbacks we've known for a while now",
    "start": "1388640",
    "end": "1393920"
  },
  {
    "text": "that this was a step in the right direction but that there was more that we could do and sort of tell this part",
    "start": "1393920",
    "end": "1400400"
  },
  {
    "text": "of the story I'm actually going to take a bit of a detour into es6 iterators and generators now iterators are an",
    "start": "1400400",
    "end": "1407300"
  },
  {
    "text": "interesting concept because we we have a lot in JavaScript today for working with objects most programming languages a lot",
    "start": "1407300",
    "end": "1413600"
  },
  {
    "text": "of what we do is working with collections of objects and iterating over collections of objects and",
    "start": "1413600",
    "end": "1419120"
  },
  {
    "text": "JavaScript is no different we have for each we have four loops we have now a",
    "start": "1419120",
    "end": "1424670"
  },
  {
    "text": "neck mascara six we have maps and sets and filtering on arrays and these are all wonderful language features but we",
    "start": "1424670",
    "end": "1431510"
  },
  {
    "text": "also have something called an iterator an iterator is a kind of object that",
    "start": "1431510",
    "end": "1436550"
  },
  {
    "text": "when you're working with certain types of collections especially an array and you're and you're iterating over an array as the as the caller of the array",
    "start": "1436550",
    "end": "1444170"
  },
  {
    "text": "or the person that is working with it it's usually your responsibility to do length checking so that you don't",
    "start": "1444170",
    "end": "1449970"
  },
  {
    "text": "overflow the array iterators actually simplify this where they maintain the internal state of the array so instead",
    "start": "1449970",
    "end": "1456509"
  },
  {
    "text": "of doing instead of doing a loop directly over an array you can just call next on the array and get the value and",
    "start": "1456509",
    "end": "1462330"
  },
  {
    "text": "it continues to iterate as long as there's another item in the collection and when it's done it returns false you",
    "start": "1462330",
    "end": "1468179"
  },
  {
    "text": "don't manage the length you don't have to do any of that checking it manages it for you now the difference here is you",
    "start": "1468179",
    "end": "1473879"
  },
  {
    "text": "have you've ultimately just deferred the person the management of the length of the array and that checking still",
    "start": "1473879",
    "end": "1479399"
  },
  {
    "text": "happens it just happens inside of the iterator object itself so generators",
    "start": "1479399",
    "end": "1485009"
  },
  {
    "text": "actually simplify this by adding built-in functionality in JavaScript where the language itself or the",
    "start": "1485009",
    "end": "1491580"
  },
  {
    "text": "generator object itself will maintain its own internal state for you and the",
    "start": "1491580",
    "end": "1496799"
  },
  {
    "text": "way that you can leverage this is with a couple of new language syntax features the functions star syntax and then the",
    "start": "1496799",
    "end": "1503850"
  },
  {
    "text": "yield keyword so anything that you decorate with function star is a generator and then the yield keyword is",
    "start": "1503850",
    "end": "1511350"
  },
  {
    "text": "basically your way of saying pause execution here when you yield you're basically returning to the caller",
    "start": "1511350",
    "end": "1517860"
  },
  {
    "text": "and saying I'm done now this is a new concept in JavaScript it's the first time that we've gotten something we're",
    "start": "1517860",
    "end": "1523440"
  },
  {
    "text": "actually not everything inside that function executes until we continue to call it right you and in this in this",
    "start": "1523440",
    "end": "1530580"
  },
  {
    "text": "example what I've created is an ID generator which gives me basically a random number based between zero and a",
    "start": "1530580",
    "end": "1537090"
  },
  {
    "text": "max that gets passed in and then every time I call next that while loop goes so I actually do have an infinite loop here",
    "start": "1537090",
    "end": "1543509"
  },
  {
    "text": "but it's an infinite loop that will only ever execute if you continue to call next next next every time I call next what happens is",
    "start": "1543509",
    "end": "1550950"
  },
  {
    "text": "it enters the function and then it gives me the next value based on the max that",
    "start": "1550950",
    "end": "1557370"
  },
  {
    "text": "has been set when I first created the generator and it just stops it yield Waits hits the start of the while loop",
    "start": "1557370",
    "end": "1563340"
  },
  {
    "text": "yields again gives me a number next time I call the next time I call next value",
    "start": "1563340",
    "end": "1568460"
  },
  {
    "text": "gets another number pause it yield waits again for the next time so that's an",
    "start": "1568460",
    "end": "1575340"
  },
  {
    "text": "interesting it's what's cool about this and where we can actually create a little of a hack is that we can actually take",
    "start": "1575340",
    "end": "1582210"
  },
  {
    "text": "this concept and leverage ourselves to create synchronous looking Ajax code so",
    "start": "1582210",
    "end": "1588630"
  },
  {
    "text": "I did this and in the context of this little demo what I created basically was a generator function called steps and",
    "start": "1588630",
    "end": "1594240"
  },
  {
    "text": "inside of that I have three I have three Ajax calls that I want to run asynchronously I have three that",
    "start": "1594240",
    "end": "1600840"
  },
  {
    "text": "happened and I've done some console logging here so you'll be able to see what happens and what I'm doing here is I'm yielding the result of a custom Ajax",
    "start": "1600840",
    "end": "1608370"
  },
  {
    "text": "function that I've called and inside that custom Ajax function hey what do you know I've got I've got promises so I",
    "start": "1608370",
    "end": "1614100"
  },
  {
    "text": "actually am calling the native fetch object in the browser I'm getting the data getting the the Jason from the",
    "start": "1614100",
    "end": "1620490"
  },
  {
    "text": "response and then I'm calling calls generator dot next and what this does effectively was what happens when I kick",
    "start": "1620490",
    "end": "1626700"
  },
  {
    "text": "this off down at the bottom is I instantiate the object I call next to kick things off and it goes here it logs",
    "start": "1626700",
    "end": "1633900"
  },
  {
    "text": "and then it take calls this first Ajax function that Ajax function gets the",
    "start": "1633900",
    "end": "1639300"
  },
  {
    "text": "data passes it's a result back and then calls the next function it calls next",
    "start": "1639300",
    "end": "1645240"
  },
  {
    "text": "again on the generator which steps down to the next yield returns and all the way down towards the end take a second",
    "start": "1645240",
    "end": "1651330"
  },
  {
    "text": "to wrap your head around but ultimately what happens is instead of me having to create callbacks or to use promises",
    "start": "1651330",
    "end": "1657960"
  },
  {
    "text": "inside of this function I'm basically saying look I'm writing this asynchronous code make this Ajax call and give me the result here in this",
    "start": "1657960",
    "end": "1664800"
  },
  {
    "text": "variable and then when I log this out to the console what I end up getting is",
    "start": "1664800",
    "end": "1670460"
  },
  {
    "text": "excuse me I'm gonna go into the actual correct place here fetching a list of",
    "start": "1670460",
    "end": "1675960"
  },
  {
    "text": "beers fetching information about me and then fetching band information and that happens again it's all it's all",
    "start": "1675960",
    "end": "1681570"
  },
  {
    "text": "happening in promises but I was able to create something that to me looks a little bit more asynchronous now",
    "start": "1681570",
    "end": "1688230"
  },
  {
    "text": "thankfully this totally contrived demo that I showed you is something that you never never ever have to use because we",
    "start": "1688230",
    "end": "1695070"
  },
  {
    "text": "have built-in language features for this now in ES seven and it's available in most of the browsers but I showed that",
    "start": "1695070",
    "end": "1700680"
  },
  {
    "text": "to you for a reason because promises and I said this a little bit let me underscore it again promises are",
    "start": "1700680",
    "end": "1707070"
  },
  {
    "text": "effectively just structured callbacks where the state of those callbacks is managed for you a single wait new line",
    "start": "1707070",
    "end": "1713250"
  },
  {
    "text": "features are very similar to combining this concept of generators where you're pausing execution to wait for a result",
    "start": "1713250",
    "end": "1719070"
  },
  {
    "text": "and the concept of promises so the to do work together it's our way of saying",
    "start": "1719070",
    "end": "1724140"
  },
  {
    "text": "promises we're a great step but we can go further and create something that is even easier to manage and the way that",
    "start": "1724140",
    "end": "1731010"
  },
  {
    "text": "this works is with two new keywords the async keyword which you'll notice on the inside of that promise function and then",
    "start": "1731010",
    "end": "1737520"
  },
  {
    "text": "a weight now one important thing to note here about async await is that you have to use the async keyword in order to use",
    "start": "1737520",
    "end": "1743670"
  },
  {
    "text": "the await keyword and you have to use async on functions so you can't just use an await keyboard outside in global",
    "start": "1743670",
    "end": "1750480"
  },
  {
    "text": "scope it has to be in the context of a function that allows you to do async that's step one and the second is you",
    "start": "1750480",
    "end": "1756810"
  },
  {
    "text": "can only use a weight on functions that return promise objects so you are you are ultimately wrapping promises in more",
    "start": "1756810",
    "end": "1763500"
  },
  {
    "text": "syntactic sugar but because my list devices method is promise based I can call a weight on that and look it's hard",
    "start": "1763500",
    "end": "1770670"
  },
  {
    "text": "I mean I don't want to make too fine a point of it I think this is actually fantastic that we can get code now",
    "start": "1770670",
    "end": "1775980"
  },
  {
    "text": "that's a little bit easier to reason about about what's happening and what what is the actual result of my promise",
    "start": "1775980",
    "end": "1782370"
  },
  {
    "text": "based code needs to be I want devices in a devices array I want an individual device I want the names of those",
    "start": "1782370",
    "end": "1788220"
  },
  {
    "text": "functions I want you to call that function etc and all of those things can be used with those keywords and just as",
    "start": "1788220",
    "end": "1794370"
  },
  {
    "text": "with promises as of the last year so we now have support for async await in all",
    "start": "1794370",
    "end": "1799530"
  },
  {
    "text": "browsers not named Internet Explorer and I don't know why I got this from mdn but it's also been available in node since",
    "start": "1799530",
    "end": "1806030"
  },
  {
    "text": "7.6 and where it I think node 8 and LTS now so it's widely available in most",
    "start": "1806030",
    "end": "1811200"
  },
  {
    "text": "implementations of note so I want to show you a quick demo of that because ultimately what I wanted to do right and",
    "start": "1811200",
    "end": "1817590"
  },
  {
    "text": "I showed you this earlier this is an area where promises can can get a little bit complicated is if we scroll further",
    "start": "1817590",
    "end": "1823650"
  },
  {
    "text": "down the same implementation with async await fits on my feet how it fits on my",
    "start": "1823650",
    "end": "1830280"
  },
  {
    "text": "single screen here we can actually see what's going on and know the sequence of events that are happening so my device",
    "start": "1830280",
    "end": "1836400"
  },
  {
    "text": "functions async I'm getting the device name again I'm passing in the device name I'm doing the same things that I",
    "start": "1836400",
    "end": "1842040"
  },
  {
    "text": "did before but now instead of doing a bunch of enables I'm calling list devices",
    "start": "1842040",
    "end": "1847070"
  },
  {
    "text": "I'm waiting for the result because that's what needs to happen now I can block execution I want to wait for the",
    "start": "1847070",
    "end": "1852080"
  },
  {
    "text": "result of this say mic filter the devices I can await to get the device",
    "start": "1852080",
    "end": "1857389"
  },
  {
    "text": "details and then log those out to the console and just to prove to you that this actually does work I'll run the",
    "start": "1857389",
    "end": "1864380"
  },
  {
    "text": "same thing again and I get the same I get exactly what I expect again",
    "start": "1864380",
    "end": "1870169"
  },
  {
    "text": "shorter easier to reason about and I think this is actually a fantastic improvement in the language now one",
    "start": "1870169",
    "end": "1877759"
  },
  {
    "text": "thing that is different and I haven't covered this explicitly yet is how you handle errors now you had in the context",
    "start": "1877759",
    "end": "1884840"
  },
  {
    "text": "of promises a catch the ability to log the ability to catch errors at the end of your scope that way what we do in the",
    "start": "1884840",
    "end": "1891409"
  },
  {
    "text": "context of async/await may sound like it's a little bit old-school but I think ultimately this is nice as we use try",
    "start": "1891409",
    "end": "1896899"
  },
  {
    "text": "catch hold on so the way that this works",
    "start": "1896899",
    "end": "1905389"
  },
  {
    "text": "then when I'm inside of an async method is I just wrapped it in a try-catch block so if I have anything that happens",
    "start": "1905389",
    "end": "1911899"
  },
  {
    "text": "and I have just totally lost control of my keyboard cool all right so I won't show you but you can use your",
    "start": "1911899",
    "end": "1917990"
  },
  {
    "text": "imaginations I will wrap this in a try-catch so if an error happens I don't get unhandled exceptions and that",
    "start": "1917990",
    "end": "1924259"
  },
  {
    "text": "actually works out quite well so the takeaway for all of this is really three",
    "start": "1924259",
    "end": "1930830"
  },
  {
    "text": "things I'm really getting like nothing working here this is the weirdest thing",
    "start": "1930830",
    "end": "1935960"
  },
  {
    "text": "I have ever experienced all right I'll just show you the whole slide right here don't ever use callbacks in many cases",
    "start": "1935960",
    "end": "1943610"
  },
  {
    "text": "definitely don't implement callbacks yourselves use promises as much as",
    "start": "1943610",
    "end": "1948649"
  },
  {
    "text": "possible if you're implementing something that still relies on callbacks wrap it wrap it with promises it'll be",
    "start": "1948649",
    "end": "1954110"
  },
  {
    "text": "easier for you to maintain a promise and then use promises as much as possible in your own code and then definitely use",
    "start": "1954110",
    "end": "1960769"
  },
  {
    "text": "async await as much as possible as well it can take a little bit to get used to but I promise you it is actually it is",
    "start": "1960769",
    "end": "1966980"
  },
  {
    "text": "worthwhile it is really easy to use once you get going with it and it is it's it's fun",
    "start": "1966980",
    "end": "1972799"
  },
  {
    "text": "it actually makes it's one of the one of the language features in JavaScript that I've loved the most over the course of",
    "start": "1972799",
    "end": "1978260"
  },
  {
    "text": "the last several years with async in a way so that's all I had is there any questions anything I can dig into",
    "start": "1978260",
    "end": "1985370"
  },
  {
    "text": "more on async/await or promises no all",
    "start": "1985370",
    "end": "1991010"
  },
  {
    "text": "right thank you all for your time enjoy the rest of conference",
    "start": "1991010",
    "end": "1995230"
  }
]