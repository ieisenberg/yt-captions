[
  {
    "text": "I know one okay um the title of my talk is not getting Lost in Translation and",
    "start": "5879",
    "end": "12920"
  },
  {
    "text": "what is it all about I will speak about a machine that the company did our",
    "start": "12920",
    "end": "19480"
  },
  {
    "text": "work at at how it moved over time and it's particular this machine here you",
    "start": "19480",
    "end": "27480"
  },
  {
    "text": "will ask yourself what is it for it is actually a Quality Inspection machine at",
    "start": "27480",
    "end": "33920"
  },
  {
    "text": "the company that we are building them for in particular",
    "start": "33920",
    "end": "40120"
  },
  {
    "text": "this one is here for Railway ex inspections and what does it look like",
    "start": "40120",
    "end": "45200"
  },
  {
    "text": "here's a view into a Freer train depot",
    "start": "45200",
    "end": "51239"
  },
  {
    "text": "this in the middle this orange one is a wheel set with the wheel axle and the",
    "start": "51239",
    "end": "57960"
  },
  {
    "text": "wheels on the sides but but this is not what we are talking about this is way too easy what we are talking about are",
    "start": "57960",
    "end": "66520"
  },
  {
    "text": "these particular trains and here are the wheel axles that we are going to inspect",
    "start": "66520",
    "end": "73320"
  },
  {
    "text": "with these machines and um as you see in the bottom the geometry of this wheel AIS is way",
    "start": "73320",
    "end": "80960"
  },
  {
    "text": "more complex and in the middle there is a is a bore that",
    "start": "80960",
    "end": "87640"
  },
  {
    "text": "is not stressed by the movement of the axle the wheel axles and so we can",
    "start": "87640",
    "end": "94439"
  },
  {
    "text": "push um sensors into these wheel axles and inspect the floress of wheel axles",
    "start": "94439",
    "end": "103040"
  },
  {
    "text": "from the inside so this is what this machine is doing and this is what the software is",
    "start": "103040",
    "end": "110520"
  },
  {
    "text": "about and the origin of our company is actually a train accident that happened",
    "start": "110520",
    "end": "117799"
  },
  {
    "text": "about 25 years ago it was the largest train excident in",
    "start": "117799",
    "end": "122840"
  },
  {
    "text": "Germany and a lot of people died and uh we got the was a sister company who was",
    "start": "122840",
    "end": "129039"
  },
  {
    "text": "producing these wheel axles and wheels and got offhook only with the promise",
    "start": "129039",
    "end": "134080"
  },
  {
    "text": "come up with a machine that does this inspection automatically and this was the founding story of the company and",
    "start": "134080",
    "end": "141760"
  },
  {
    "text": "this is the reason why I designed this machine the software and much of it in",
    "start": "141760",
    "end": "147840"
  },
  {
    "text": "that you could see in the picture before here you see a couple of the how",
    "start": "147840",
    "end": "155319"
  },
  {
    "text": "with how a wheel axle with all the mountings on top of it would look like so now you have probably have a better",
    "start": "155319",
    "end": "162760"
  },
  {
    "text": "idea of what what this machine is all about so the company was founded in",
    "start": "162760",
    "end": "170879"
  },
  {
    "text": "2009 and there was literally nothing everything was invented and built from",
    "start": "171159",
    "end": "178840"
  },
  {
    "text": "scratch so the company it was a small company probably",
    "start": "178840",
    "end": "184560"
  },
  {
    "text": "a handful of people so our ghost goal was get",
    "start": "184560",
    "end": "190560"
  },
  {
    "text": "features get more features get a name and my goal was get the architecture",
    "start": "190560",
    "end": "197040"
  },
  {
    "text": "right if you start with a bad architecture you can't evolve over",
    "start": "197040",
    "end": "202959"
  },
  {
    "text": "time so one of the things that I had to decide on was",
    "start": "202959",
    "end": "209879"
  },
  {
    "text": "how would we actually format our strings it's a common task we have many options",
    "start": "209879",
    "end": "217120"
  },
  {
    "text": "to do that but I decided on using boost format it was the most advanced Library",
    "start": "217120",
    "end": "223720"
  },
  {
    "text": "I could find at the time and in the bottom you see we have the formatting",
    "start": "223720",
    "end": "229840"
  },
  {
    "text": "specifier with all the text and the placeholder specifications and then a sequence of",
    "start": "229840",
    "end": "238720"
  },
  {
    "text": "formatting arguments to fill in these placeholders",
    "start": "238720",
    "end": "244920"
  },
  {
    "text": "okay this was the very beginning and let's move on five",
    "start": "244920",
    "end": "251400"
  },
  {
    "text": "years now we had a first customer that was not German speaking so",
    "start": "251400",
    "end": "258040"
  },
  {
    "text": "I had a problem how do I support check and the solution was use boost",
    "start": "258040",
    "end": "265919"
  },
  {
    "text": "local and with Boost local comes the question of how would we do string",
    "start": "265919",
    "end": "275720"
  },
  {
    "text": "translation we had a couple of questions you had to answer for",
    "start": "275720",
    "end": "282199"
  },
  {
    "text": "example which translation system should we use how mature is it can we have tooling with the",
    "start": "282199",
    "end": "289720"
  },
  {
    "text": "translation system does it fit into our software this is a really important",
    "start": "289720",
    "end": "297240"
  },
  {
    "text": "thing but the most important one is can our end users use",
    "start": "297240",
    "end": "304440"
  },
  {
    "text": "it the point is the end users are actually the domain experts we can build",
    "start": "304440",
    "end": "310639"
  },
  {
    "text": "machines we can build software but the end users are the domain experts which",
    "start": "310639",
    "end": "317240"
  },
  {
    "text": "usually happen not to be it aine so what should it translation format",
    "start": "317240",
    "end": "324840"
  },
  {
    "text": "look like binary good for us but not for the End",
    "start": "324840",
    "end": "330280"
  },
  {
    "text": "customer same with XML same even to some degree to",
    "start": "330280",
    "end": "336600"
  },
  {
    "text": "Chason we had so many custs over so long time and literally every format they had",
    "start": "336600",
    "end": "345560"
  },
  {
    "text": "in our code that we are using or files that we giving out everyone was screwed",
    "start": "345560",
    "end": "351440"
  },
  {
    "text": "up the only one that was never screwed up were text files so we decided on",
    "start": "351440",
    "end": "358039"
  },
  {
    "text": "using text files for our translation system and this is actually what get",
    "start": "358039",
    "end": "363560"
  },
  {
    "text": "text as a library supports there are this is pretty standard we you can have",
    "start": "363560",
    "end": "369280"
  },
  {
    "text": "it for many many many computer languages and for C or C++ we have new G",
    "start": "369280",
    "end": "376080"
  },
  {
    "text": "text as an implementation you probably are aware of it Linux users",
    "start": "376080",
    "end": "383120"
  },
  {
    "text": "have um the lip Intel Library which is the implementation of that and in C",
    "start": "383120",
    "end": "389639"
  },
  {
    "text": "Plus+ we have Boost local and yeah this Choice was not a bad one",
    "start": "389639",
    "end": "397240"
  },
  {
    "text": "just three months ago it was actually standardized both in posix and also by",
    "start": "397240",
    "end": "403840"
  },
  {
    "text": "ISO so now I can say we have a standard translation system in our",
    "start": "403840",
    "end": "410000"
  },
  {
    "text": "software so how does it work the first thing that you have to do if you want a",
    "start": "410000",
    "end": "415560"
  },
  {
    "text": "translation system in your software you need somewh way to mark your",
    "start": "415560",
    "end": "420639"
  },
  {
    "text": "translatable text so going from this line of code I",
    "start": "420639",
    "end": "427759"
  },
  {
    "text": "would go to that line of code so the formatting specifier is syntactically",
    "start": "427759",
    "end": "433639"
  },
  {
    "text": "marked as something to be translated in The Next",
    "start": "433639",
    "end": "438800"
  },
  {
    "text": "Step a tool that comes with the G text tooling goes over all of the source",
    "start": "438800",
    "end": "447560"
  },
  {
    "text": "files and possibly even other files files as instructed by the build system",
    "start": "447560",
    "end": "452800"
  },
  {
    "text": "and scans it for the syntactic markers and in the end we get a",
    "start": "452800",
    "end": "459440"
  },
  {
    "text": "so-called po template file this is just a collection of all the tech the",
    "start": "459440",
    "end": "465560"
  },
  {
    "text": "translated text that it has found it should never be stored it's",
    "start": "465560",
    "end": "470879"
  },
  {
    "text": "just transient in the next step we or our",
    "start": "470879",
    "end": "476639"
  },
  {
    "text": "customers are asked to translate these",
    "start": "476639",
    "end": "481800"
  },
  {
    "text": "strings and these translation may depend on the country that is language is",
    "start": "481800",
    "end": "487599"
  },
  {
    "text": "spoken where the workers are actually living in in some cases the",
    "start": "487599",
    "end": "493479"
  },
  {
    "text": "region in some cases even the company has a particular shgon so we have to all of this take",
    "start": "493479",
    "end": "501120"
  },
  {
    "text": "into account and after the translation",
    "start": "501120",
    "end": "506759"
  },
  {
    "text": "process we get a couple of files for each country region or",
    "start": "506759",
    "end": "512200"
  },
  {
    "text": "company and this file is called a so-called po file this is a portable",
    "start": "512200",
    "end": "518159"
  },
  {
    "text": "object file this is actually tailored to this needs of the customer and this is",
    "start": "518159",
    "end": "524080"
  },
  {
    "text": "stable so we can check it into our repositories and as mentioned before we",
    "start": "524080",
    "end": "530519"
  },
  {
    "text": "have many of them for each translation for each language every",
    "start": "530519",
    "end": "536279"
  },
  {
    "text": "country and this is how something like that would would look like we see on the",
    "start": "536279",
    "end": "541880"
  },
  {
    "text": "top the header of such a p file and then a list of",
    "start": "541880",
    "end": "547519"
  },
  {
    "text": "translations in particular this one is for the tech language and another interesting",
    "start": "547519",
    "end": "554920"
  },
  {
    "text": "information in here is every language has different rules how to figure out which language",
    "start": "554920",
    "end": "563040"
  },
  {
    "text": "form to actually use here in this in the check language",
    "start": "563040",
    "end": "568360"
  },
  {
    "text": "we have fre language forms this is called free plurals and we have a",
    "start": "568360",
    "end": "574160"
  },
  {
    "text": "prescription how to go from a value a number to the language form we should",
    "start": "574160",
    "end": "581360"
  },
  {
    "text": "use to actually fill in or select as text",
    "start": "581360",
    "end": "587160"
  },
  {
    "text": "file here we not only have a singular like we do or a plural like we do we are",
    "start": "587160",
    "end": "595360"
  },
  {
    "text": "Germanic languages in the check language we also have a",
    "start": "595360",
    "end": "601640"
  },
  {
    "text": "dual so in the last step we have to compile these portable object",
    "start": "602480",
    "end": "611399"
  },
  {
    "text": "files and Link them into a final output we have additional tools to do",
    "start": "611399",
    "end": "619200"
  },
  {
    "text": "that and the last step in here is one of the first key",
    "start": "619200",
    "end": "626360"
  },
  {
    "text": "insights the tool can understand the language where the strings are coming",
    "start": "626360",
    "end": "633720"
  },
  {
    "text": "from there are markers in there that says this is a C++ format string and Ms",
    "start": "633720",
    "end": "641120"
  },
  {
    "text": "format understands the syntax of the format specifications in there it also",
    "start": "641120",
    "end": "646880"
  },
  {
    "text": "understands this for example for cute for Upp boost there are multiple of them",
    "start": "646880",
    "end": "652519"
  },
  {
    "text": "and for different other languages also cobal Photon whatever it might be and",
    "start": "652519",
    "end": "658880"
  },
  {
    "text": "this is important it's a there's a tool that runs during build time that actually",
    "start": "658880",
    "end": "666120"
  },
  {
    "text": "checks our translations and the formating specifications in there the output is typically something",
    "start": "666120",
    "end": "675320"
  },
  {
    "text": "that it's called m o instead of P so it's a machine object that it's tailored",
    "start": "675320",
    "end": "681240"
  },
  {
    "text": "to be used by by machines and it's the",
    "start": "681240",
    "end": "687000"
  },
  {
    "text": "gist of it is just a list of tables tables of",
    "start": "687000",
    "end": "691720"
  },
  {
    "text": "strings okay the format is documented so",
    "start": "692240",
    "end": "697399"
  },
  {
    "text": "we can pretty much rely on the format of these M Mo files the strings in",
    "start": "697399",
    "end": "704880"
  },
  {
    "text": "there are Unicode encoded as we usually expect it today and we look at the",
    "start": "704880",
    "end": "713040"
  },
  {
    "text": "website of the unic code specification it looks like this this is",
    "start": "713040",
    "end": "718320"
  },
  {
    "text": "exactly what we expect glyphs and this kind of stuff but there is more in the unic Cod",
    "start": "718320",
    "end": "728480"
  },
  {
    "text": "specification and this is something we can see at the bottom of the web page",
    "start": "728480",
    "end": "734320"
  },
  {
    "text": "there is also so-called common language data repository mentioned in",
    "start": "734320",
    "end": "740639"
  },
  {
    "text": "there and did not contains a lot of information",
    "start": "740639",
    "end": "746360"
  },
  {
    "text": "about languages scripts rules everything in particular",
    "start": "746360",
    "end": "754600"
  },
  {
    "text": "it knows about plural rules",
    "start": "754600",
    "end": "760480"
  },
  {
    "text": "and if we look at how these look like you will find a huge",
    "start": "760480",
    "end": "766720"
  },
  {
    "text": "table and in the beginning it says every language is special and every language",
    "start": "766720",
    "end": "773360"
  },
  {
    "text": "is different so don't assume anything just",
    "start": "773360",
    "end": "778760"
  },
  {
    "text": "look into these tables and where you find how to name",
    "start": "778760",
    "end": "786440"
  },
  {
    "text": "languages which kind of categories it discerns what the rules for these",
    "start": "786440",
    "end": "793800"
  },
  {
    "text": "categories are and there's also nice graphs in",
    "start": "793800",
    "end": "800800"
  },
  {
    "text": "there to the right you see lots of numbers starting from zero to much much",
    "start": "800800",
    "end": "808720"
  },
  {
    "text": "much and there are a couple of language",
    "start": "808720",
    "end": "814839"
  },
  {
    "text": "families mentioned in here and the color coding you see how SI how simple these",
    "start": "814839",
    "end": "821120"
  },
  {
    "text": "rules are how regular these rules are if you look for example at Asian languages",
    "start": "821120",
    "end": "827240"
  },
  {
    "text": "they have no notion of about language forms they have just one if we look at",
    "start": "827240",
    "end": "832440"
  },
  {
    "text": "the Germanic languages we have singular and plural if we look at Tech as in",
    "start": "832440",
    "end": "837560"
  },
  {
    "text": "before we also have the Dual but it's pretty pretty easy and then this is the bretan",
    "start": "837560",
    "end": "845079"
  },
  {
    "text": "language this is the most complicated language form formula that's mentioned",
    "start": "845079",
    "end": "852920"
  },
  {
    "text": "in here it's pretty irregular as you can see Al",
    "start": "852920",
    "end": "858360"
  },
  {
    "text": "alone from the graph so",
    "start": "858360",
    "end": "864079"
  },
  {
    "text": "these language differentiations and the plural forms",
    "start": "864079",
    "end": "869800"
  },
  {
    "text": "appear in gex just as well as me as we' seen before Japanese",
    "start": "869800",
    "end": "877720"
  },
  {
    "text": "German Czech and Britain and the",
    "start": "877720",
    "end": "882759"
  },
  {
    "text": "formulas are going from extremely simple to pretty involved as depression",
    "start": "882759",
    "end": "888759"
  },
  {
    "text": "language shows us and boost local has to implement all",
    "start": "888759",
    "end": "895720"
  },
  {
    "text": "of that but there is one thing why I'm not",
    "start": "895720",
    "end": "901199"
  },
  {
    "text": "happy with Boost format in my to my taste it does way too",
    "start": "901199",
    "end": "907199"
  },
  {
    "text": "much it not only does the translation but it also does encoding",
    "start": "907199",
    "end": "916399"
  },
  {
    "text": "conversion as mentioned we are used to use Unicode",
    "start": "916519",
    "end": "923199"
  },
  {
    "text": "these days so encoding conversion is actually not a thing for us in former",
    "start": "923199",
    "end": "928240"
  },
  {
    "text": "times it has been but encoding conversion has a big drawback it requires string",
    "start": "928240",
    "end": "936600"
  },
  {
    "text": "allocation every string allocation that it's unnecessary is clutter to me I",
    "start": "936720",
    "end": "942040"
  },
  {
    "text": "don't want to do it so as good as boost local is this is",
    "start": "942040",
    "end": "948800"
  },
  {
    "text": "the major thing that I don't like about going back to the string",
    "start": "948800",
    "end": "957079"
  },
  {
    "text": "formatting and move on four more times there is a new formatting library that",
    "start": "957079",
    "end": "963800"
  },
  {
    "text": "came along fmt format and the fmt library I",
    "start": "963800",
    "end": "970120"
  },
  {
    "text": "know quite a lot about it I'm involved into development of the fmt library since 2016 or",
    "start": "970120",
    "end": "976160"
  },
  {
    "text": "so and I thought hm maybe this is a good",
    "start": "976160",
    "end": "981399"
  },
  {
    "text": "choice to actually go from from something from boost to something more modern and this is why",
    "start": "981399",
    "end": "989240"
  },
  {
    "text": "using no longer boost format with the with the um",
    "start": "989240",
    "end": "994959"
  },
  {
    "text": "thecore type and the concatenation of the AR de formatting arguments as a",
    "start": "994959",
    "end": "1002680"
  },
  {
    "text": "sequence of overloaded um operators in here and instead use boost",
    "start": "1002680",
    "end": "1010519"
  },
  {
    "text": "format it doesn't use the concatenation of operators but",
    "start": "1010519",
    "end": "1016160"
  },
  {
    "text": "uses um a VAR vartic template and a lot of format formatting",
    "start": "1016160",
    "end": "1024480"
  },
  {
    "text": "arguments which means we have a type pack and we have a argument pack and",
    "start": "1024480",
    "end": "1030760"
  },
  {
    "text": "this is what boost what string format is or fmt format is all built",
    "start": "1030760",
    "end": "1040280"
  },
  {
    "text": "upon and many people are not very happy with vartic templates in the interfaces",
    "start": "1040280",
    "end": "1047120"
  },
  {
    "text": "in function calls actually format the format library has",
    "start": "1047120",
    "end": "1054280"
  },
  {
    "text": "two interfaces the first one is the type full interface that we seen before with",
    "start": "1054280",
    "end": "1061039"
  },
  {
    "text": "the vartic templates and the template packs and in the inside it has a type",
    "start": "1061039",
    "end": "1067520"
  },
  {
    "text": "erased Library so the interface there has no",
    "start": "1067520",
    "end": "1073480"
  },
  {
    "text": "template arguments anymore so the type full interface is",
    "start": "1073480",
    "end": "1079559"
  },
  {
    "text": "just a wrapper around the type erased interface and to do that we need to do",
    "start": "1079559",
    "end": "1086919"
  },
  {
    "text": "something like type eraser in here or in this case it's not real eraser it's",
    "start": "1086919",
    "end": "1093360"
  },
  {
    "text": "better called type classification and to do",
    "start": "1093360",
    "end": "1099080"
  },
  {
    "text": "that uh it uses every pretty much everything you can think of in",
    "start": "1099080",
    "end": "1105039"
  },
  {
    "text": "implementing such kind of a library and uses templates to do type calculation it uses partial template spe",
    "start": "1105039",
    "end": "1113400"
  },
  {
    "text": "specializations to do pattern matching it uses overload resolution and",
    "start": "1113400",
    "end": "1118440"
  },
  {
    "text": "conversion sequences to do conversion based meta",
    "start": "1118440",
    "end": "1123480"
  },
  {
    "text": "programming and finally it uses spin um for those who never heard about",
    "start": "1123480",
    "end": "1130480"
  },
  {
    "text": "s this is an acronym coming from substitution failures not an error if",
    "start": "1130480",
    "end": "1135760"
  },
  {
    "text": "you happen to have a template and the template argument don't fit what uh",
    "start": "1135760",
    "end": "1143000"
  },
  {
    "text": "is if the the synex after substitution is is no longer correct it would just",
    "start": "1143000",
    "end": "1148600"
  },
  {
    "text": "rule out this particular template instantiation but all of this comes with",
    "start": "1148600",
    "end": "1155679"
  },
  {
    "text": "a cost at around 7",
    "start": "1155679",
    "end": "1162000"
  },
  {
    "text": "2017 a friend of mine did a investigation how costly are",
    "start": "1162000",
    "end": "1168559"
  },
  {
    "text": "the these kind of things and he came up with this table in",
    "start": "1168559",
    "end": "1174039"
  },
  {
    "text": "particular it was ke do who did it and hence it called the rule of heel and it",
    "start": "1174039",
    "end": "1182120"
  },
  {
    "text": "says as is extremely expensive to use whereas templates itself after the",
    "start": "1182120",
    "end": "1189720"
  },
  {
    "text": "incensation and the memorization are extremely um light in cost so if we we",
    "start": "1189720",
    "end": "1198880"
  },
  {
    "text": "do something with templates and surrounding",
    "start": "1198880",
    "end": "1205600"
  },
  {
    "text": "operations have this in mind look at how many template instantiations you",
    "start": "1205960",
    "end": "1211880"
  },
  {
    "text": "actually have and use as few of them but rather use the memorized versions of",
    "start": "1211880",
    "end": "1219159"
  },
  {
    "text": "them but in the library we are using it",
    "start": "1219159",
    "end": "1224280"
  },
  {
    "text": "everything by hand if you do it and you're not familiar or comfortable with",
    "start": "1224280",
    "end": "1229919"
  },
  {
    "text": "using this kind of stuff use a library maybe you boost booster 11",
    "start": "1229919",
    "end": "1237200"
  },
  {
    "text": "Quia Bon meta some just to mention a few but",
    "start": "1237200",
    "end": "1244000"
  },
  {
    "text": "please please never use boost MPL and yes you",
    "start": "1244000",
    "end": "1250600"
  },
  {
    "text": "have plenty of time the compilation times will just go",
    "start": "1250600",
    "end": "1256080"
  },
  {
    "text": "crazy with Boost MPL unfort fortunately many of the Boost libraries still use",
    "start": "1256080",
    "end": "1261559"
  },
  {
    "text": "boost MPL in the inside this brings us to the question",
    "start": "1261559",
    "end": "1269159"
  },
  {
    "text": "actually what do we mean when we speak about functions as I mentioned before",
    "start": "1269159",
    "end": "1275880"
  },
  {
    "text": "there were type calculations this involves functions so what is a",
    "start": "1275880",
    "end": "1281799"
  },
  {
    "text": "function going back to school we learned a function is something that takes",
    "start": "1281799",
    "end": "1287760"
  },
  {
    "text": "elements from Source set Maps them to elements in a Target set and these",
    "start": "1287760",
    "end": "1297159"
  },
  {
    "text": "projections can be anything really anything the sets itself don't have to",
    "start": "1297159",
    "end": "1302799"
  },
  {
    "text": "be numbers this is what we learned at school but mathematics are",
    "start": "1302799",
    "end": "1310559"
  },
  {
    "text": "just have actually no preconditions that much about disce and Target sets",
    "start": "1310559",
    "end": "1318679"
  },
  {
    "text": "and the pro the protection itself doesn't need to be a onet toone",
    "start": "1318679",
    "end": "1324120"
  },
  {
    "text": "protection you can protect multiple elements from The",
    "start": "1324120",
    "end": "1330120"
  },
  {
    "text": "Source set to one element in the Target set so if we look at the syntax that we",
    "start": "1330120",
    "end": "1338799"
  },
  {
    "text": "have in C++ we see we have runtime arguments in",
    "start": "1338799",
    "end": "1346240"
  },
  {
    "text": "parenthesis these are in General most code that we write these are really",
    "start": "1346320",
    "end": "1352720"
  },
  {
    "text": "runtime parameters but they are potentially also valid at compile time",
    "start": "1352720",
    "end": "1359080"
  },
  {
    "text": "we will come to that and the function arguments in the",
    "start": "1359080",
    "end": "1366840"
  },
  {
    "text": "bra the in the uh angle brackets these have to be known at",
    "start": "1366840",
    "end": "1373039"
  },
  {
    "text": "compile time so it depends on the context and",
    "start": "1373039",
    "end": "1379080"
  },
  {
    "text": "which which argument is actually necessary to be",
    "start": "1379080",
    "end": "1385720"
  },
  {
    "text": "and for historic reasons we can't put all of",
    "start": "1385720",
    "end": "1391880"
  },
  {
    "text": "these function argument into parentheses or other",
    "start": "1391880",
    "end": "1397159"
  },
  {
    "text": "signals we have to differentiate between",
    "start": "1397159",
    "end": "1401919"
  },
  {
    "text": "them let's move on three more years",
    "start": "1403919",
    "end": "1410440"
  },
  {
    "text": "in this in year 2021 we had no longer just fmt library",
    "start": "1412320",
    "end": "1421480"
  },
  {
    "text": "but it actually became standardized now it's standard",
    "start": "1421480",
    "end": "1426880"
  },
  {
    "text": "format we could still use local for as our translation",
    "start": "1426880",
    "end": "1432400"
  },
  {
    "text": "system but then in the same year C++ 20 adopted",
    "start": "1432400",
    "end": "1439000"
  },
  {
    "text": "The Proposal",
    "start": "1439000",
    "end": "1441919"
  },
  {
    "text": "p2216 so in the prog meeting in 2020 we had",
    "start": "1444039",
    "end": "1452440"
  },
  {
    "text": "this formulation of what stood format should look like pretty much the same as",
    "start": "1452440",
    "end": "1459039"
  },
  {
    "text": "we have seen before in the format library and with",
    "start": "1459039",
    "end": "1465880"
  },
  {
    "text": "this proposal it would look like this we now have",
    "start": "1465880",
    "end": "1471520"
  },
  {
    "text": "an change in the signature of the format",
    "start": "1471520",
    "end": "1479240"
  },
  {
    "text": "call and we introduce an intermediate type that's called format",
    "start": "1479240",
    "end": "1485559"
  },
  {
    "text": "string and this has a couple of",
    "start": "1485559",
    "end": "1490440"
  },
  {
    "text": "implications originally we took a string view as the format specification now we take this format",
    "start": "1490880",
    "end": "1497840"
  },
  {
    "text": "string but the Constructor of this intermediate type takes this ring",
    "start": "1497840",
    "end": "1504679"
  },
  {
    "text": "view might seem unnecessary but we also",
    "start": "1504679",
    "end": "1510200"
  },
  {
    "text": "see that this intermediate type takes the parameter the the type pack of the",
    "start": "1510200",
    "end": "1519120"
  },
  {
    "text": "parameters also as an input and so we have the opportunity",
    "start": "1519120",
    "end": "1526960"
  },
  {
    "text": "with the keyword con eval to actually do a lot of stuff based on all the function",
    "start": "1526960",
    "end": "1534000"
  },
  {
    "text": "arguments at compile",
    "start": "1534000",
    "end": "1537799"
  },
  {
    "text": "time and this is where con dival becomes",
    "start": "1539520",
    "end": "1544919"
  },
  {
    "text": "a really great addition to",
    "start": "1544919",
    "end": "1550240"
  },
  {
    "text": "C++ but we need to First figure out what constant evaluation actually means",
    "start": "1550240",
    "end": "1559080"
  },
  {
    "text": "if we look at what the compiler does during the compilation it has to look at all of our",
    "start": "1560240",
    "end": "1566720"
  },
  {
    "text": "declarations and has to remember everything that it is seeing during the",
    "start": "1566720",
    "end": "1574000"
  },
  {
    "text": "compilation the identifiers entities declarations",
    "start": "1574000",
    "end": "1579120"
  },
  {
    "text": "definitions you name it templates and also the all the template",
    "start": "1579120",
    "end": "1586279"
  },
  {
    "text": "instantiations it has se so far pretty much",
    "start": "1586279",
    "end": "1592559"
  },
  {
    "text": "everything and this G gave rise to actually using",
    "start": "1594200",
    "end": "1599360"
  },
  {
    "text": "modules I see know of the workshop people",
    "start": "1599360",
    "end": "1606200"
  },
  {
    "text": "okay so what does these Cod lines actually mean we see all this",
    "start": "1606640",
    "end": "1615279"
  },
  {
    "text": "yellow stuff and all of these involve constants all",
    "start": "1615279",
    "end": "1622320"
  },
  {
    "text": "of these involve constant expressions and all of these involve constant",
    "start": "1622320",
    "end": "1628880"
  },
  {
    "text": "evaluation this is what constant evaluation is you need it for the size",
    "start": "1628880",
    "end": "1635240"
  },
  {
    "text": "of an of an array you need it for the enumerators you need it",
    "start": "1635240",
    "end": "1640840"
  },
  {
    "text": "for yeah a couple of things in particular if you do your constants by",
    "start": "1640840",
    "end": "1646919"
  },
  {
    "text": "yourself every fair is a constant necessary to",
    "start": "1646919",
    "end": "1653919"
  },
  {
    "text": "be so this means the compiler not only has a",
    "start": "1653919",
    "end": "1660039"
  },
  {
    "text": "subsystem that deals with all the type stuff it also needs to have a subsystem",
    "start": "1660039",
    "end": "1667279"
  },
  {
    "text": "that deals that deals with the value stuff and this is the constant",
    "start": "1667279",
    "end": "1674000"
  },
  {
    "text": "evaluator this is nothing new it's actually quite old but it's has been",
    "start": "1675159",
    "end": "1683519"
  },
  {
    "text": "evolving over time and growing a lot in the past couple of years the next Incarnation will be",
    "start": "1683519",
    "end": "1691159"
  },
  {
    "text": "reflection reflection revolves heavily on the constant evaluator so in the compiler we have the",
    "start": "1691159",
    "end": "1699279"
  },
  {
    "text": "type side this is the left one and we have the value side the constant",
    "start": "1699279",
    "end": "1704399"
  },
  {
    "text": "evaluator on the right side and both of the subsystem interact with each",
    "start": "1704399",
    "end": "1712200"
  },
  {
    "text": "other coming back to proposal 2216 this is what it would look like in",
    "start": "1712559",
    "end": "1719320"
  },
  {
    "text": "a library implementation this is from this mssl implementation and you see in",
    "start": "1719320",
    "end": "1725399"
  },
  {
    "text": "line seven and eight constants constant evaluations this is the right side of",
    "start": "1725399",
    "end": "1732519"
  },
  {
    "text": "the of the Declarations here and you see",
    "start": "1732519",
    "end": "1738559"
  },
  {
    "text": "also um functions that operate on these",
    "start": "1738559",
    "end": "1744399"
  },
  {
    "text": "constants and all of this happens at compile time in line 12 you actually",
    "start": "1744399",
    "end": "1750919"
  },
  {
    "text": "also see a type function that is invoked and this is coming from the standard",
    "start": "1750919",
    "end": "1757159"
  },
  {
    "text": "Library it's part of C++ 11 so this is nothing new by itself but the volume of",
    "start": "1757159",
    "end": "1765519"
  },
  {
    "text": "stuff that you can do at compile time is actually evolving and all of this",
    "start": "1765519",
    "end": "1772360"
  },
  {
    "text": "means the formatting syntax and the argument types can be checked at compile",
    "start": "1772360",
    "end": "1780440"
  },
  {
    "text": "time and they will be checked at compile time this",
    "start": "1780440",
    "end": "1785559"
  },
  {
    "text": "means we don't do this checking at runtime anymore this is",
    "start": "1785559",
    "end": "1792559"
  },
  {
    "text": "good we don't get exceptions anymore that's even better",
    "start": "1792559",
    "end": "1799240"
  },
  {
    "text": "but it has",
    "start": "1799240",
    "end": "1802278"
  },
  {
    "text": "drawbacks if we move on for another year and the",
    "start": "1805480",
    "end": "1811960"
  },
  {
    "text": "implementation of this changed interface of stood format in visual studio and we",
    "start": "1811960",
    "end": "1819360"
  },
  {
    "text": "bring Visual Studio into production notice we have compile time",
    "start": "1819360",
    "end": "1824799"
  },
  {
    "text": "checking now and compile time evaluation what does it mean for us as a",
    "start": "1824799",
    "end": "1833960"
  },
  {
    "text": "company boost local has start we can no longer use",
    "start": "1834559",
    "end": "1841600"
  },
  {
    "text": "the the def functions in there that do the string translations for us",
    "start": "1842240",
    "end": "1849919"
  },
  {
    "text": "because the formatting string needs to be a constant but string translation is",
    "start": "1849919",
    "end": "1856279"
  },
  {
    "text": "something that is done at runtime what should I",
    "start": "1856279",
    "end": "1863120"
  },
  {
    "text": "do I don't want to get back to runtime um evaluation of formatting",
    "start": "1863120",
    "end": "1870519"
  },
  {
    "text": "strings or this kind of stuff no I still want to have this one I still want to be",
    "start": "1870519",
    "end": "1877480"
  },
  {
    "text": "able to mark my texts to be translatable",
    "start": "1877480",
    "end": "1882760"
  },
  {
    "text": "and even better I want to make sure that the argument that actually",
    "start": "1882760",
    "end": "1888799"
  },
  {
    "text": "decides on which language form I should use should be something that I don't",
    "start": "1888799",
    "end": "1896480"
  },
  {
    "text": "have to put into the translation itself but I want to just put it as an argument",
    "start": "1896480",
    "end": "1901639"
  },
  {
    "text": "to the format so this is what I want to",
    "start": "1901639",
    "end": "1907039"
  },
  {
    "text": "get but this intermediate class has a",
    "start": "1907039",
    "end": "1913880"
  },
  {
    "text": "Constructor that is evaluated at compile time and there's no no way to intercept",
    "start": "1913880",
    "end": "1919120"
  },
  {
    "text": "something in there and the same is true with getting a string out of",
    "start": "1919120",
    "end": "1925279"
  },
  {
    "text": "it I can't do that",
    "start": "1925279",
    "end": "1930880"
  },
  {
    "text": "so as usual put another level of interaction",
    "start": "1930880",
    "end": "1936519"
  },
  {
    "text": "in there come up with an additional overload and I invent my own",
    "start": "1936519",
    "end": "1943600"
  },
  {
    "text": "intermediate type this is called format string translator from the outside it looks pretty much",
    "start": "1943600",
    "end": "1950600"
  },
  {
    "text": "the same as before but in the inside I can now do much more with the",
    "start": "1950600",
    "end": "1959000"
  },
  {
    "text": "contents and the arguments I can figure out where in the",
    "start": "1959000",
    "end": "1965559"
  },
  {
    "text": "argument list is the argument that decides on the language",
    "start": "1965559",
    "end": "1971639"
  },
  {
    "text": "form how to translate my format string and check for consistency and",
    "start": "1971639",
    "end": "1978639"
  },
  {
    "text": "validity and also how to translate strings that are given to me in the",
    "start": "1978639",
    "end": "1986120"
  },
  {
    "text": "arguments of the formatting call they also need to be translated if they",
    "start": "1986120",
    "end": "1992000"
  },
  {
    "text": "happen to be to have the right type",
    "start": "1992000",
    "end": "1999200"
  },
  {
    "text": "so this is the format string translator as in the format string",
    "start": "1999200",
    "end": "2007840"
  },
  {
    "text": "itself it also has a compile time Constructor and I can I put I pull in",
    "start": "2007840",
    "end": "2014799"
  },
  {
    "text": "all of the strings that are given to me from the translation the the strings that have",
    "start": "2014799",
    "end": "2020519"
  },
  {
    "text": "been marked as to be translatable this is what I'm pulling in here and I'm just",
    "start": "2020519",
    "end": "2025720"
  },
  {
    "text": "delegating the validity checks of the singular and the plural form to the",
    "start": "2025720",
    "end": "2030880"
  },
  {
    "text": "standard library and this is what this is doing this is a",
    "start": "2030880",
    "end": "2037240"
  },
  {
    "text": "lot of work I don't do it myself I can delegate it but on top of that I need to make",
    "start": "2037240",
    "end": "2044159"
  },
  {
    "text": "sure that when I Supply a plural form I also need a for plural argument and vice",
    "start": "2044159",
    "end": "2052000"
  },
  {
    "text": "versa this is something that I also can check at compile time and I actually",
    "start": "2052000",
    "end": "2059398"
  },
  {
    "text": "do going a level deeper if I can",
    "start": "2061879",
    "end": "2068520"
  },
  {
    "text": "check about um the actual format um plural format",
    "start": "2068520",
    "end": "2077040"
  },
  {
    "text": "that I'm bringing in but this is just an intermediate thing the really interesting stuff is now I can get",
    "start": "2077040",
    "end": "2085480"
  },
  {
    "text": "something based on the plurals that I'm supplying I can have I can ask a",
    "start": "2085480",
    "end": "2093720"
  },
  {
    "text": "translator and get either a for a trans a language form that comes from the the",
    "start": "2093720",
    "end": "2101119"
  },
  {
    "text": "content and the value of the plural that is from the value that is",
    "start": "2101119",
    "end": "2108440"
  },
  {
    "text": "controlling the language form or I can just do it without this",
    "start": "2108440",
    "end": "2115599"
  },
  {
    "text": "um multiple language forms and in the",
    "start": "2115599",
    "end": "2121520"
  },
  {
    "text": "end what I do after all these calculations in between I start just one",
    "start": "2121520",
    "end": "2128520"
  },
  {
    "text": "single value I started with three strings two of them were optional three",
    "start": "2128520",
    "end": "2133960"
  },
  {
    "text": "strings and compile it down to one single",
    "start": "2133960",
    "end": "2140400"
  },
  {
    "text": "value and all of this can be done at compile time the value that I'm calculating here",
    "start": "2140400",
    "end": "2148960"
  },
  {
    "text": "is actually the hash value of all the textual contents of these three strings",
    "start": "2148960",
    "end": "2156160"
  },
  {
    "text": "in there regard regardless of the encoding it's always the same hash value",
    "start": "2156160",
    "end": "2161880"
  },
  {
    "text": "that I'm calculating out of that and this is the value that I'm storing",
    "start": "2161880",
    "end": "2168359"
  },
  {
    "text": "here and these two functions are the only",
    "start": "2170920",
    "end": "2178480"
  },
  {
    "text": "functions that I have to call at run time it takes in this hash value it",
    "start": "2178480",
    "end": "2185599"
  },
  {
    "text": "takes in a couple of maps these maps are coming from reading in the translation",
    "start": "2185599",
    "end": "2191920"
  },
  {
    "text": "files that I have been compiled by gex and I can look into these tables and",
    "start": "2191920",
    "end": "2199599"
  },
  {
    "text": "figure out which translation is the correct one of the correct language",
    "start": "2199599",
    "end": "2207040"
  },
  {
    "text": "form and this leaves me with three questions question number",
    "start": "2207960",
    "end": "2215000"
  },
  {
    "text": "one which of the multi multiple arguments is actually the one that",
    "start": "2215000",
    "end": "2220800"
  },
  {
    "text": "decides on the language form question",
    "start": "2220800",
    "end": "2226240"
  },
  {
    "text": "two how do I access it you see this is a",
    "start": "2226240",
    "end": "2232079"
  },
  {
    "text": "template pack or an argument",
    "start": "2232079",
    "end": "2236680"
  },
  {
    "text": "pack and how to figure out how the",
    "start": "2237560",
    "end": "2243440"
  },
  {
    "text": "remaining arguments are actually translated",
    "start": "2243440",
    "end": "2249280"
  },
  {
    "text": "the last question is easy to answer a little bit of a type",
    "start": "2251560",
    "end": "2258240"
  },
  {
    "text": "calculation is bringing me back a function",
    "start": "2258240",
    "end": "2263960"
  },
  {
    "text": "that does the actual translation for me and this which kind of function it is",
    "start": "2263960",
    "end": "2272040"
  },
  {
    "text": "depends on the type of this function this um formating",
    "start": "2272040",
    "end": "2278200"
  },
  {
    "text": "argument so for each type I have decide on which function is actually needed to",
    "start": "2278200",
    "end": "2284280"
  },
  {
    "text": "translate it and this is what I'm doing sounds unfamiliar the left hand",
    "start": "2284280",
    "end": "2292040"
  },
  {
    "text": "side is a type function that returns",
    "start": "2292040",
    "end": "2298359"
  },
  {
    "text": "me a function itself that takes a runtime parameter and",
    "start": "2298359",
    "end": "2304000"
  },
  {
    "text": "this um produces the translated string of the function",
    "start": "2304000",
    "end": "2310960"
  },
  {
    "text": "argument in C++ 26 we will get proposal",
    "start": "2313640",
    "end": "2319520"
  },
  {
    "text": "2663 pack indexing and proposal P2 996",
    "start": "2319520",
    "end": "2326480"
  },
  {
    "text": "reflection this means all these questions can be answered extremely",
    "start": "2326480",
    "end": "2332560"
  },
  {
    "text": "simply I think the syntax is right at least it has been a couple of of months",
    "start": "2332560",
    "end": "2338000"
  },
  {
    "text": "be before now it no longer is there's a discussions discussions on how should",
    "start": "2338000",
    "end": "2345040"
  },
  {
    "text": "the operators look like but this is the TST of it it can be as easy as",
    "start": "2345040",
    "end": "2352119"
  },
  {
    "text": "that we just lift our types into the meta level can apply our ranges",
    "start": "2353240",
    "end": "2362160"
  },
  {
    "text": "algorithms on it apply all the language rules of C++ value based language rules",
    "start": "2362160",
    "end": "2369920"
  },
  {
    "text": "and you can look into a particular index of a pack so extremely simple but",
    "start": "2369920",
    "end": "2378920"
  },
  {
    "text": "unfortunately we don't have C++ 26 yet so I need something that looks like",
    "start": "2378920",
    "end": "2387440"
  },
  {
    "text": "t++ 26 but is actually implementable in C++",
    "start": "2387440",
    "end": "2396119"
  },
  {
    "text": "20 okay this brings",
    "start": "2396119",
    "end": "2401680"
  },
  {
    "text": "us to heterogeneous sequences you notice I had the template",
    "start": "2401680",
    "end": "2408839"
  },
  {
    "text": "argument pack and I had the template typ packs before in particular the",
    "start": "2408839",
    "end": "2415200"
  },
  {
    "text": "typex are heterogeneous sequences of types and what's the best way to deal",
    "start": "2415200",
    "end": "2422359"
  },
  {
    "text": "with heterogeneous sequences it's folds fold expressions are a way to",
    "start": "2422359",
    "end": "2429520"
  },
  {
    "text": "go and if you want to know a little bit no more about what fold Expressions can",
    "start": "2429520",
    "end": "2436839"
  },
  {
    "text": "actually do I recommend reading this particular article that's from the past",
    "start": "2436839",
    "end": "2445680"
  },
  {
    "text": "Millennium but with f you can pretty much do everything that you",
    "start": "2445760",
    "end": "2451960"
  },
  {
    "text": "want for example if we look at or do a",
    "start": "2451960",
    "end": "2457760"
  },
  {
    "text": "comparison about homogeneous sequences of values for example a vector of values",
    "start": "2457760",
    "end": "2464240"
  },
  {
    "text": "and a heterogeneous sequence like a type list of",
    "start": "2464240",
    "end": "2469359"
  },
  {
    "text": "types we will see on the left hand side we have all",
    "start": "2469359",
    "end": "2476240"
  },
  {
    "text": "the algorithms from the standard library on the right hand side we have de",
    "start": "2476240",
    "end": "2482880"
  },
  {
    "text": "formulation using folds and and every time we have a",
    "start": "2482880",
    "end": "2489680"
  },
  {
    "text": "parentheses on the left hand side we have an angle bracket on the right hand side on the left hand side we do value",
    "start": "2489680",
    "end": "2498880"
  },
  {
    "text": "calculations and value manipulation on the right hand side at least to some",
    "start": "2498880",
    "end": "2504400"
  },
  {
    "text": "degree we have type functions type calculations hence these angle brackets",
    "start": "2504400",
    "end": "2511800"
  },
  {
    "text": "but besides that it's all the same remember back what is a function",
    "start": "2511800",
    "end": "2517760"
  },
  {
    "text": "some of the arguments need to be need to go into angle brackets some of the arguments need to go into",
    "start": "2517760",
    "end": "2525040"
  },
  {
    "text": "parentheses and these are all in the type SE type lists there are on always",
    "start": "2525040",
    "end": "2532280"
  },
  {
    "text": "something that has to go into the angle brackets the outcome of that are always",
    "start": "2532280",
    "end": "2541200"
  },
  {
    "text": "values now let's turn back to the first question I need something like like",
    "start": "2541880",
    "end": "2547640"
  },
  {
    "text": "stood ranges find if but on a typ list how can I do",
    "start": "2547640",
    "end": "2555839"
  },
  {
    "text": "that okay first we have",
    "start": "2556720",
    "end": "2562319"
  },
  {
    "text": "an not found index value maybe it should like should look like",
    "start": "2562319",
    "end": "2569079"
  },
  {
    "text": "this when in find if you have an predicate this is the predicate on a",
    "start": "2569079",
    "end": "2575319"
  },
  {
    "text": "type unfortunately I have to wrap it into a type but it actually takes a t and",
    "start": "2575319",
    "end": "2584079"
  },
  {
    "text": "returns me a Bool if the predicate is satisfied or",
    "start": "2584079",
    "end": "2589359"
  },
  {
    "text": "not and then I can come up with a function let's call",
    "start": "2589559",
    "end": "2597359"
  },
  {
    "text": "it fine first index that takes this typ list takes the",
    "start": "2597359",
    "end": "2604280"
  },
  {
    "text": "predicate and returns me the index of the",
    "start": "2604280",
    "end": "2609599"
  },
  {
    "text": "argument how could I do that start",
    "start": "2609640",
    "end": "2615559"
  },
  {
    "text": "simple return not found the first test has",
    "start": "2615559",
    "end": "2622119"
  },
  {
    "text": "passed this is an unsigned integer so I can add and remove constants from it",
    "start": "2622200",
    "end": "2630520"
  },
  {
    "text": "nothing has changed now add our function arguments or function",
    "start": "2630520",
    "end": "2636559"
  },
  {
    "text": "paramet to it on the right hand side you see the typ list it's called Types on the left",
    "start": "2636559",
    "end": "2644200"
  },
  {
    "text": "hand side of the argument of the function arguments this is the predicate notice it takes a t and returns a pool",
    "start": "2644200",
    "end": "2653720"
  },
  {
    "text": "hence the template template parameter",
    "start": "2653720",
    "end": "2658119"
  },
  {
    "text": "here and with the typ list and the predicates I can fold over it",
    "start": "2658880",
    "end": "2667680"
  },
  {
    "text": "the comma operator gives me the sequencing and now I have two passing",
    "start": "2669640",
    "end": "2675559"
  },
  {
    "text": "tests and one two failing",
    "start": "2675559",
    "end": "2679760"
  },
  {
    "text": "tests I can exchange the Boolean returned from the predicate with a",
    "start": "2681359",
    "end": "2687720"
  },
  {
    "text": "Turner expression nothing has changed so far it's just a fancy way to say the",
    "start": "2687720",
    "end": "2693040"
  },
  {
    "text": "same thing and and I also can introduce an",
    "start": "2693040",
    "end": "2699359"
  },
  {
    "text": "index variable and apply a index to each of",
    "start": "2699359",
    "end": "2706839"
  },
  {
    "text": "the elements in my type list going from one",
    "start": "2706839",
    "end": "2713040"
  },
  {
    "text": "to the amount of types that I'm",
    "start": "2713040",
    "end": "2718119"
  },
  {
    "text": "providing still nothing has changed so",
    "start": "2718119",
    "end": "2722760"
  },
  {
    "text": "far and in the last step I replace it",
    "start": "2723280",
    "end": "2728640"
  },
  {
    "text": "true with an assignment expression the assignment expression",
    "start": "2728640",
    "end": "2734200"
  },
  {
    "text": "goes from one to n so it's always true and",
    "start": "2734200",
    "end": "2740359"
  },
  {
    "text": "now all of my tests pass and I found out which at which position position in the",
    "start": "2740359",
    "end": "2747800"
  },
  {
    "text": "typ list my actually plural argument is this sound see sounds pretty much",
    "start": "2747800",
    "end": "2757040"
  },
  {
    "text": "unfamiliar if you're not used to these kind of expressions and folds in",
    "start": "2757040",
    "end": "2765160"
  },
  {
    "text": "particular it might seem I'm just pushing a stub on Donkey across the",
    "start": "2765160",
    "end": "2771079"
  },
  {
    "text": "street but this is the best way we can do it in C++ 20 to figure out where a",
    "start": "2771079",
    "end": "2777760"
  },
  {
    "text": "particular type in a heterogeneous sequence in a type list actually is and",
    "start": "2777760",
    "end": "2783400"
  },
  {
    "text": "this is not too bad I hope we will get a live library for that to make it easier",
    "start": "2783400",
    "end": "2789160"
  },
  {
    "text": "for you something similar to this to this ranges Library maybe you can cover up with",
    "start": "2789160",
    "end": "2796520"
  },
  {
    "text": "something similar",
    "start": "2796520",
    "end": "2801599"
  },
  {
    "text": "okay to the last question now we have the the argument",
    "start": "2801599",
    "end": "2809040"
  },
  {
    "text": "index how do we actually get to the value of the of the uh format parameter",
    "start": "2809040",
    "end": "2815640"
  },
  {
    "text": "in the in the list what we know it's a argument PE of",
    "start": "2815640",
    "end": "2826079"
  },
  {
    "text": "references which means we can take the addresses of it each of these",
    "start": "2826119",
    "end": "2833359"
  },
  {
    "text": "arguments and cast it to an integral this is totally",
    "start": "2833359",
    "end": "2839400"
  },
  {
    "text": "valid and all of these integrals can be used to initialize",
    "start": "2839400",
    "end": "2847839"
  },
  {
    "text": "an array now we have been we have gone from an heterogeneous sequence to a",
    "start": "2847839",
    "end": "2854200"
  },
  {
    "text": "homogeneous sequence and with the index we found in",
    "start": "2854200",
    "end": "2860079"
  },
  {
    "text": "the step before we can index into the",
    "start": "2860079",
    "end": "2866720"
  },
  {
    "text": "array apply back the type look at the value of the",
    "start": "2866720",
    "end": "2872319"
  },
  {
    "text": "argument and we're done",
    "start": "2872319",
    "end": "2876720"
  },
  {
    "text": "this is totally valid code just to give you an hint about what",
    "start": "2877359",
    "end": "2885160"
  },
  {
    "text": "this question three has been this wrapped kind of stuff where did the translate function come from it's",
    "start": "2885160",
    "end": "2893920"
  },
  {
    "text": "just templates partial template specializations and total special total",
    "start": "2893920",
    "end": "2903359"
  },
  {
    "text": "template specializations it returns us the translate functions",
    "start": "2903359",
    "end": "2909520"
  },
  {
    "text": "that we are looking for and this is pattern matching this is",
    "start": "2909520",
    "end": "2915160"
  },
  {
    "text": "the pattern matching as we are used to use it since 1998 or even",
    "start": "2915160",
    "end": "2923000"
  },
  {
    "text": "before this was the easy part okay now I have all three questions",
    "start": "2923000",
    "end": "2931640"
  },
  {
    "text": "answered my overloaded formatting function Works how",
    "start": "2931760",
    "end": "2938359"
  },
  {
    "text": "hopefully and I was just doing a",
    "start": "2938359",
    "end": "2944318"
  },
  {
    "text": "test because we now in 2024 as mentioned before I don't like",
    "start": "2945000",
    "end": "2952960"
  },
  {
    "text": "boost local too much and we have a pretty recent capable version in",
    "start": "2952960",
    "end": "2961520"
  },
  {
    "text": "Visual Studio our company of only uses Visual Studio Clank and GCC should do it just",
    "start": "2961520",
    "end": "2969319"
  },
  {
    "text": "fine as well and I wanted to conduct an integration test",
    "start": "2969319",
    "end": "2977359"
  },
  {
    "text": "so I no longer want to use boost local but I want to use my own implementation",
    "start": "2977359",
    "end": "2984240"
  },
  {
    "text": "of all the functionality that I need to actually perform the",
    "start": "2984240",
    "end": "2989799"
  },
  {
    "text": "translation all the code before was just the front and this is what you put into",
    "start": "2989799",
    "end": "2995319"
  },
  {
    "text": "your source code what I'm speaking about right now is the back",
    "start": "2995319",
    "end": "3001680"
  },
  {
    "text": "end and the integration of the front end with the back end if everything works",
    "start": "3001680",
    "end": "3007880"
  },
  {
    "text": "fine this is the the test code",
    "start": "3007880",
    "end": "3014079"
  },
  {
    "text": "and this integration test does not only involve the",
    "start": "3014160",
    "end": "3020440"
  },
  {
    "text": "compiler it also involves the build system because the build tools are",
    "start": "3020440",
    "end": "3028040"
  },
  {
    "text": "within the build system at the string translation",
    "start": "3028040",
    "end": "3032720"
  },
  {
    "text": "tools this is from the front end the syntactic marker translate with",
    "start": "3033200",
    "end": "3038960"
  },
  {
    "text": "the three strings in there which is",
    "start": "3038960",
    "end": "3045000"
  },
  {
    "text": "then processed by the gex tools first we get a pot file get the PO",
    "start": "3045000",
    "end": "3051599"
  },
  {
    "text": "file as mentioned before to make it a little bit more complicated I pulled in",
    "start": "3051599",
    "end": "3057920"
  },
  {
    "text": "all of the translations that we have in this",
    "start": "3057920",
    "end": "3063200"
  },
  {
    "text": "machine link them and generate the machine object out",
    "start": "3063680",
    "end": "3070040"
  },
  {
    "text": "of it and to make it palatable to C++ I have",
    "start": "3070040",
    "end": "3077200"
  },
  {
    "text": "an intermediate step create a bin file and bring it into",
    "start": "3077200",
    "end": "3083040"
  },
  {
    "text": "C++ so all in all this is about 500 translation in there that I'm bringing",
    "start": "3084079",
    "end": "3090280"
  },
  {
    "text": "in at compile time we don't have stood in bed yet but",
    "start": "3090280",
    "end": "3097760"
  },
  {
    "text": "I can implement it quite easily in C++ as a compile time function just to bring",
    "start": "3097760",
    "end": "3104799"
  },
  {
    "text": "in the same binary content of the M file as a compile time constant in C++",
    "start": "3104799",
    "end": "3114599"
  },
  {
    "text": "next we have this load function here this is part of the back end I'm using the preton language",
    "start": "3117119",
    "end": "3125119"
  },
  {
    "text": "because it's the most complicated one with the biggest language um form",
    "start": "3125119",
    "end": "3133680"
  },
  {
    "text": "formula What's Happening Here the text string notice I mentioned the m",
    "start": "3133680",
    "end": "3142200"
  },
  {
    "text": "files contains all these text strings and also the plural form is given as a as a string this is compiled to a",
    "start": "3142200",
    "end": "3149400"
  },
  {
    "text": "function that can be evaluated and the load function also creates all",
    "start": "3149400",
    "end": "3156680"
  },
  {
    "text": "the tables that I've been mentioning",
    "start": "3156680",
    "end": "3160920"
  },
  {
    "text": "before also this is the hash function of the text contents in the translate",
    "start": "3163119",
    "end": "3169720"
  },
  {
    "text": "string this is the one value that I'm actually using to do",
    "start": "3169720",
    "end": "3174760"
  },
  {
    "text": "something and this is the test cardal that I'm using the 1 million is just the",
    "start": "3174760",
    "end": "3181000"
  },
  {
    "text": "last line in the plural formula and what I'm expecting is I get",
    "start": "3181000",
    "end": "3187599"
  },
  {
    "text": "language form free this is what the integration test is all",
    "start": "3187599",
    "end": "3193440"
  },
  {
    "text": "about and in particular I'm doing this at compile time this is line",
    "start": "3195319",
    "end": "3202480"
  },
  {
    "text": "19 I call the test at compile time so everything you see on this slide is",
    "start": "3202480",
    "end": "3211000"
  },
  {
    "text": "actually compile time code and it's one single",
    "start": "3211000",
    "end": "3218039"
  },
  {
    "text": "evaluation which [Music] means if I can compile this I'm sure",
    "start": "3221000",
    "end": "3227640"
  },
  {
    "text": "that my implementation of the library is correct and I can check it at compile",
    "start": "3227640",
    "end": "3234319"
  },
  {
    "text": "time I don't need any",
    "start": "3234319",
    "end": "3241119"
  },
  {
    "text": "um additional libraries to check that the compiler is my testing",
    "start": "3241119",
    "end": "3247720"
  },
  {
    "text": "framework but what I do at compile time I can just as well use it at",
    "start": "3248480",
    "end": "3256480"
  },
  {
    "text": "runtime and just leave out bringing in as a constant load it at runtime do the",
    "start": "3256480",
    "end": "3263079"
  },
  {
    "text": "same thing it will give me the same result",
    "start": "3263079",
    "end": "3268160"
  },
  {
    "text": "so what does it all of this mean we have string formatting which",
    "start": "3271480",
    "end": "3280480"
  },
  {
    "text": "hinges on compiled time constants everything is",
    "start": "3280480",
    "end": "3285720"
  },
  {
    "text": "a constant the string literals are constant we cannot Supply runtime values",
    "start": "3285720",
    "end": "3294359"
  },
  {
    "text": "as string format or we",
    "start": "3294359",
    "end": "3300319"
  },
  {
    "text": "cannot um we don't want to see any exceptions at runtime we want to make sure that",
    "start": "3300319",
    "end": "3307640"
  },
  {
    "text": "everything what they do can be done at compile time or at least within the",
    "start": "3307640",
    "end": "3313599"
  },
  {
    "text": "build system at build time this is what you want to do and we still want to",
    "start": "3313599",
    "end": "3319480"
  },
  {
    "text": "translate kind of stuff all of our of our strings if we want to at run time",
    "start": "3319480",
    "end": "3326799"
  },
  {
    "text": "and this is what I've been trying to show you this is still possible it's",
    "start": "3326799",
    "end": "3334760"
  },
  {
    "text": "more involved than it has been before the previous libraries can't do that but",
    "start": "3334760",
    "end": "3343200"
  },
  {
    "text": "with a little bit of knowledge about C++ 20 and compile time evaluation and the right tools to",
    "start": "3343200",
    "end": "3350880"
  },
  {
    "text": "actually do that you can do it still today you do not have have to resort to",
    "start": "3350880",
    "end": "3359400"
  },
  {
    "text": "runtime evaluation of formatting strings and formatting specifiers this is what",
    "start": "3359400",
    "end": "3364520"
  },
  {
    "text": "is proposed in the in the committee right now to actually do it in C++ 26",
    "start": "3364520",
    "end": "3371400"
  },
  {
    "text": "this is this stood runtime kind of thing for formatting but I think we should",
    "start": "3371400",
    "end": "3376920"
  },
  {
    "text": "stick with compile time and checking at compile time and make sure that we don't",
    "start": "3376920",
    "end": "3383400"
  },
  {
    "text": "get exceptions why we don't expect it we what we want to do in our machines is",
    "start": "3383400",
    "end": "3391079"
  },
  {
    "text": "make sure we don't have a denial of service because of an unexpected string in there",
    "start": "3391079",
    "end": "3398400"
  },
  {
    "text": "we can test as much as we want sometimes there will be something that the user is",
    "start": "3398400",
    "end": "3405000"
  },
  {
    "text": "putting into a guey and it may invoke something",
    "start": "3405000",
    "end": "3410599"
  },
  {
    "text": "that would then cause an exception and we don't want to do that",
    "start": "3410599",
    "end": "3417039"
  },
  {
    "text": "then exception is just a symptom how to handle it we don't know how to handle it",
    "start": "3417039",
    "end": "3424200"
  },
  {
    "text": "so um this means we bring the system down and we don't want to do",
    "start": "3424200",
    "end": "3433119"
  },
  {
    "text": "that this is pretty much the end of my talk here",
    "start": "3433119",
    "end": "3439680"
  },
  {
    "text": "are a couple of resources maybe I will bring the library",
    "start": "3439680",
    "end": "3445400"
  },
  {
    "text": "code to GitHub the for the um the front end is",
    "start": "3445400",
    "end": "3450880"
  },
  {
    "text": "already in production but the back end is not I'm still improving on it I'm",
    "start": "3450880",
    "end": "3457039"
  },
  {
    "text": "still applying more tests to it but this is the end of everything I wanted to say",
    "start": "3457039",
    "end": "3465640"
  },
  {
    "text": "you about translation string translation translation at compile time translation",
    "start": "3465640",
    "end": "3471559"
  },
  {
    "text": "at runtime so that you hopefully not get lost anymore",
    "start": "3471559",
    "end": "3476839"
  },
  {
    "text": "in translations thank you [Applause]",
    "start": "3476839",
    "end": "3487199"
  }
]