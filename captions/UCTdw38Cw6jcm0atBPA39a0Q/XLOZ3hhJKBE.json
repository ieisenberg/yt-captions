[
  {
    "text": "hi guys i hope everybody is ready and i think we can start um",
    "start": "3439",
    "end": "11840"
  },
  {
    "text": "i hope everybody had a great conference so far i really enjoyed and i see oslo it's a great way how they set up",
    "start": "11840",
    "end": "19600"
  },
  {
    "text": "these online conference here and also a very awesome set of speakers",
    "start": "19600",
    "end": "25279"
  },
  {
    "text": "so i'm michael stipe i'm a microsoft mvp and i'm one of the authors of the hot",
    "start": "25279",
    "end": "31279"
  },
  {
    "text": "chocolate graphqlibry4.net today i want to talk to you about building real-time applications with",
    "start": "31279",
    "end": "37520"
  },
  {
    "text": "graphql and blazer and if you think about it with blazer for webassembly",
    "start": "37520",
    "end": "43040"
  },
  {
    "text": "microsoft for the first time in years gives us a viable option to build rich spa applications that run",
    "start": "43040",
    "end": "49840"
  },
  {
    "text": "natively in the browser but we are going to take blazer to the next level today",
    "start": "49840",
    "end": "55440"
  },
  {
    "text": "by getting rid of getting rid of the friction that you have with traditional data",
    "start": "55440",
    "end": "60640"
  },
  {
    "text": "fetching technologies like rest or grpc and putting the front-end developer into the driver's",
    "start": "60640",
    "end": "67360"
  },
  {
    "text": "seat i know a lot of networks still doesn't know what graphql is",
    "start": "67360",
    "end": "72880"
  },
  {
    "text": "or even has the wrong idea about graphql graphql is commonly mistaken for a graph",
    "start": "72880",
    "end": "79520"
  },
  {
    "text": "database query language but it actually has nothing to do with graph databases",
    "start": "79520",
    "end": "85360"
  },
  {
    "text": "or even with databases graphql is a query language for your api and a",
    "start": "85360",
    "end": "92000"
  },
  {
    "text": "runtime to execute those queries",
    "start": "92000",
    "end": "96400"
  },
  {
    "text": "[Music] so let's dive in and have a look and explore in five minutes what graphql is",
    "start": "97230",
    "end": "103280"
  },
  {
    "text": "and then head into our actual talk so graphql is this thing where the",
    "start": "103280",
    "end": "109520"
  },
  {
    "text": "consumer of the api or the front-end developer defines what he or she wants oh sorry",
    "start": "109520",
    "end": "116079"
  },
  {
    "text": "that is home office lily can you go out and close the door sorry guys my daughter sometimes just",
    "start": "116079",
    "end": "123040"
  },
  {
    "text": "runs in okay so graphql is this thing where the front-end developer or the",
    "start": "123040",
    "end": "129200"
  },
  {
    "text": "consumer of the api defines what he or she wants so this is done by writing up a graphql",
    "start": "129200",
    "end": "136959"
  },
  {
    "text": "query so the graphql query that you see here is basically fetching the current user",
    "start": "136959",
    "end": "142959"
  },
  {
    "text": "and from the current user just the name and if we send that to our server",
    "start": "142959",
    "end": "149120"
  },
  {
    "text": "we basically um get our request filled up with data it's not",
    "start": "149120",
    "end": "156560"
  },
  {
    "text": "exactly like that but it's a good mental picture to think about that so we're sending in a request graph and",
    "start": "156560",
    "end": "164000"
  },
  {
    "text": "the graphql server fills up that graph with data",
    "start": "164000",
    "end": "169040"
  },
  {
    "text": "but it's not only about flat data or simple requests like that we could even decide to change our",
    "start": "169040",
    "end": "176160"
  },
  {
    "text": "request so we at the consumer could change our request without changing the server",
    "start": "176160",
    "end": "181760"
  },
  {
    "text": "and for instance asking for the profile picture and we don't only want the flat profile",
    "start": "181760",
    "end": "188640"
  },
  {
    "text": "picture we also want some metadata about the the profile picture like the width and",
    "start": "188640",
    "end": "194319"
  },
  {
    "text": "the heights of that picture and if we send that in to our server we get back a tree of data",
    "start": "194319",
    "end": "203120"
  },
  {
    "text": "so graphical is not only about flat data structures it's also about getting trees off data",
    "start": "203120",
    "end": "210000"
  },
  {
    "text": "and if you think about this it really is more a more human way to explore data",
    "start": "210000",
    "end": "216080"
  },
  {
    "text": "because you can drill into data and with that graphql actually gets rid of common problems like the n plus one",
    "start": "216080",
    "end": "223519"
  },
  {
    "text": "problem on the client side because if i drill into multiple objects",
    "start": "223519",
    "end": "229760"
  },
  {
    "text": "like for instance i want to fetch the current user that is locked into",
    "start": "229760",
    "end": "235920"
  },
  {
    "text": "that is locked into our service and i want to have from that current user that is locked into our services name and the",
    "start": "235920",
    "end": "242959"
  },
  {
    "text": "date time when he he or she was last seen but i also want to uh drill into that",
    "start": "242959",
    "end": "249360"
  },
  {
    "text": "object and get the friends of that currently locked in user and the name and last scene scene",
    "start": "249360",
    "end": "257199"
  },
  {
    "text": "timestamp of these users too for instance this might be useful to build up a list",
    "start": "257199",
    "end": "264720"
  },
  {
    "text": "of online statuses of my of my friends on a service",
    "start": "264720",
    "end": "270560"
  },
  {
    "text": "and when i send that into this server the server is able to then just fetch these data in",
    "start": "270560",
    "end": "276400"
  },
  {
    "text": "one go and if we think about traditional apis and even facebook had that problem",
    "start": "276400",
    "end": "282320"
  },
  {
    "text": "back when they invented um graphql is that with rest the requests",
    "start": "282320",
    "end": "288960"
  },
  {
    "text": "are basically defined or designed ahead of time and they don't represent all the use",
    "start": "288960",
    "end": "296160"
  },
  {
    "text": "cases that there might be so with rest we would probably end up",
    "start": "296160",
    "end": "301440"
  },
  {
    "text": "doing a multiple consecutive calls that lead to cascading data quality so with",
    "start": "301440",
    "end": "307600"
  },
  {
    "text": "graphql i just can ask the server give me the currently logged in user and its friends",
    "start": "307600",
    "end": "313280"
  },
  {
    "text": "but if we look at the query we already see some repetitions here and graphql has a concept that is called",
    "start": "313280",
    "end": "321440"
  },
  {
    "text": "fragments and with fragments actually i have a primitive for composition and",
    "start": "321440",
    "end": "329360"
  },
  {
    "text": "it allows us to create basically um a hierarchy for fragments as we create",
    "start": "329360",
    "end": "336000"
  },
  {
    "text": "hierarchies of components in our uis and that really closely aligns and we see that later in",
    "start": "336000",
    "end": "341919"
  },
  {
    "text": "the talk in my demo okay so with graphql we have actually",
    "start": "341919",
    "end": "348800"
  },
  {
    "text": "just one endpoint because we as the consumer of the api we define",
    "start": "348800",
    "end": "355280"
  },
  {
    "text": "what data we want to fetch so we just need one endpoint to issue those requests too and that also",
    "start": "355280",
    "end": "361759"
  },
  {
    "text": "means that we can fetch everything every data that we need",
    "start": "361759",
    "end": "367199"
  },
  {
    "text": "in one per specific moment in time with one request and that",
    "start": "367199",
    "end": "374560"
  },
  {
    "text": "removes the overall under fetching problem that we face with other api technologies",
    "start": "374560",
    "end": "381840"
  },
  {
    "text": "and graphql is built on a strong type system and initially i said it's a query language for your api",
    "start": "382240",
    "end": "388400"
  },
  {
    "text": "and it is a runtime to enforce those or execute those queries and graphql",
    "start": "388400",
    "end": "394000"
  },
  {
    "text": "makes sure that you do know type violation like if you're exposing on your server side a field that you",
    "start": "394000",
    "end": "400400"
  },
  {
    "text": "that is a string then it's guaranteed that it will never become in on the client side and",
    "start": "400400",
    "end": "408319"
  },
  {
    "text": "if you think about technologies like swagger where you define a schema or the schemas inferred from a type system but you",
    "start": "408319",
    "end": "415120"
  },
  {
    "text": "still could send in invalid data because there's no enforcement no runtime that enforces a",
    "start": "415120",
    "end": "421280"
  },
  {
    "text": "type system and this is also useful because uh nullibility of the type system like if you're saying",
    "start": "421280",
    "end": "427440"
  },
  {
    "text": "something will never be null can be um used on the client side",
    "start": "427440",
    "end": "433199"
  },
  {
    "text": "because you can trust that the server will honor its contract",
    "start": "433199",
    "end": "438319"
  },
  {
    "text": "and that or makes a graphql very predictable to use so let's head into um blazer or the",
    "start": "438319",
    "end": "445680"
  },
  {
    "text": "actual subject that we want to explore with graphql and i said initially with blazer",
    "start": "445680",
    "end": "451759"
  },
  {
    "text": "microsoft for the first time in years gives us a viable option to build",
    "start": "451759",
    "end": "457440"
  },
  {
    "text": "real rich spa applications that run natively in the browser and what",
    "start": "457440",
    "end": "464080"
  },
  {
    "text": "does it mean so microsoft actually built up a mono runtime",
    "start": "464080",
    "end": "470240"
  },
  {
    "text": "so basically a net runtime and they build it up on top of webassembly and web assembly is not a plug-in",
    "start": "470240",
    "end": "477199"
  },
  {
    "text": "technology and it's no transpilation into something else like javascript it's real.net",
    "start": "477199",
    "end": "482879"
  },
  {
    "text": "that runs in the browser and that means we really can run.net",
    "start": "482879",
    "end": "489919"
  },
  {
    "text": "core in the browser and um that also means that we can use all",
    "start": "489919",
    "end": "495199"
  },
  {
    "text": "the code that we built up in the core and dotnet standard and it's done in all these dot nets and now versions",
    "start": "495199",
    "end": "501360"
  },
  {
    "text": "and just use it in our laser web assembly webassembly projects and to",
    "start": "501360",
    "end": "509680"
  },
  {
    "text": "ask me that means we have to use less javascript and we can almost do anything with",
    "start": "509680",
    "end": "516880"
  },
  {
    "text": "net and all of this runs at neo-native performance because it's",
    "start": "516880",
    "end": "522959"
  },
  {
    "text": "not a plug-in technology and it is not transpiled to let's say javascript or something like",
    "start": "522959",
    "end": "528240"
  },
  {
    "text": "that and as i said web assembly is not a plug-in technology is actually built",
    "start": "528240",
    "end": "534000"
  },
  {
    "text": "into every modern browser so it's a web standard and it runs already everywhere",
    "start": "534000",
    "end": "541519"
  },
  {
    "text": "you can run it on your phone you can run it on safari on on edge",
    "start": "541519",
    "end": "548080"
  },
  {
    "text": "and all the browsers that are up to date not internet explorer by the way",
    "start": "548080",
    "end": "553360"
  },
  {
    "text": "okay so um blazer is open source like the rest of asp.net",
    "start": "553360",
    "end": "560160"
  },
  {
    "text": "and that really makes it super awesome because we can go to the",
    "start": "560160",
    "end": "565200"
  },
  {
    "text": "repository look how they build that stuff up we can reason about their code",
    "start": "565200",
    "end": "570399"
  },
  {
    "text": "and also provide issues or feature requests i really encourage you to head over to",
    "start": "570399",
    "end": "575839"
  },
  {
    "text": "their um to their repository and engage okay so how does blazer work um",
    "start": "575839",
    "end": "583920"
  },
  {
    "text": "actually in order to create laser ui components we are using combination of c-sharp syntax and we will see that in",
    "start": "583920",
    "end": "590800"
  },
  {
    "text": "the demos i have a combination of c-sharp code and razer syntax and basically that",
    "start": "590800",
    "end": "598480"
  },
  {
    "text": "compiles into a blazer application and the mono-web webassembly runtime",
    "start": "598480",
    "end": "604480"
  },
  {
    "text": "will be downloaded with our blazer application into the browser and enables us to run normal.net",
    "start": "604480",
    "end": "611600"
  },
  {
    "text": "assemblies right in our browser and when you run a blazer application",
    "start": "611600",
    "end": "618399"
  },
  {
    "text": "in your browser and you look at the developers networks tab then you see a lot of net dlls that you think is very strange",
    "start": "618399",
    "end": "627040"
  },
  {
    "text": "and some people ask is that safe there's a dll downloading into my browser",
    "start": "627040",
    "end": "632160"
  },
  {
    "text": "and yes it is because webassembly is actually run in a web assembly vm so we have a",
    "start": "632160",
    "end": "639200"
  },
  {
    "text": "sandbox there so there's no native access to your computer",
    "start": "639200",
    "end": "645279"
  },
  {
    "text": "and actually these web assembly applications uh are not even allowed to update the",
    "start": "645279",
    "end": "650959"
  },
  {
    "text": "dom directly there is talk about the standard group to enable that but at the moment the",
    "start": "650959",
    "end": "656079"
  },
  {
    "text": "webassembly vm cannot update the dom of the browser",
    "start": "656079",
    "end": "661200"
  },
  {
    "text": "so how that is done basically is that blazer builds up a shadow domain and the blazer components really modify this",
    "start": "661200",
    "end": "668560"
  },
  {
    "text": "shadow dom and then there is a javascript router so you also see that there is a blazer.js and there",
    "start": "668560",
    "end": "675120"
  },
  {
    "text": "is a mono.js and basically this javascript router will uh batch changes of the shadow domain",
    "start": "675120",
    "end": "683200"
  },
  {
    "text": "very efficiently to our browser domain the browser and that works also the",
    "start": "683200",
    "end": "689680"
  },
  {
    "text": "other way around because all the changes on my browser dom will be patched back to the shadow",
    "start": "689680",
    "end": "695040"
  },
  {
    "text": "dom and then we get events raised in our net components and 3d can",
    "start": "695040",
    "end": "704000"
  },
  {
    "text": "work just with dotnet so we actually don't see this javascript",
    "start": "704000",
    "end": "709040"
  },
  {
    "text": "okay so let's just quickly discuss the state of blazer because a",
    "start": "709040",
    "end": "715839"
  },
  {
    "text": "commonly asked question is how mature is blazer so",
    "start": "715839",
    "end": "721279"
  },
  {
    "text": "blazer for the server side and we are not talking about blazer for the server side in this talk",
    "start": "721279",
    "end": "726800"
  },
  {
    "text": "blazers for the server side is actually um already out with dot net core 3.0 so",
    "start": "726800",
    "end": "732959"
  },
  {
    "text": "it's battle tested it's uh it's out for over a year now and um it has proven its gain",
    "start": "732959",
    "end": "741120"
  },
  {
    "text": "and basically what they changed is they they swapped out the way they update the browser dom",
    "start": "741120",
    "end": "748880"
  },
  {
    "text": "and introduced laser web assembly and that shipped just in may so it's very new um but so far i handled any",
    "start": "748880",
    "end": "757920"
  },
  {
    "text": "issues but it's very new um but microsoft really wants to go further",
    "start": "757920",
    "end": "764959"
  },
  {
    "text": "with that so microsoft wants to enable you to really take your knowledge that you acquired in the web with blazer",
    "start": "764959",
    "end": "771760"
  },
  {
    "text": "and put that on the browser so there are previous upcoming with net five that",
    "start": "771760",
    "end": "778480"
  },
  {
    "text": "pulled blazer that basically blazer for progressive web applications and electron",
    "start": "778480",
    "end": "783600"
  },
  {
    "text": "and then like like with slack you like slack for instance is also an",
    "start": "783600",
    "end": "788959"
  },
  {
    "text": "electron app gesture you can then build up applications with blazer that are real desktop applications but",
    "start": "788959",
    "end": "795279"
  },
  {
    "text": "microsoft is actually going further and there are investigations or",
    "start": "795279",
    "end": "800880"
  },
  {
    "text": "experiments with blazer for native and last year at nec actually steve sanderson showed off",
    "start": "800880",
    "end": "807040"
  },
  {
    "text": "that you can swap out the renderer of blazer and put in some other component",
    "start": "807040",
    "end": "813360"
  },
  {
    "text": "technology for instance he took flutter which actually is written with that so not even.net and basically blazer",
    "start": "813360",
    "end": "820240"
  },
  {
    "text": "produced flatter components uh he called this i think uh blitter",
    "start": "820240",
    "end": "825680"
  },
  {
    "text": "but there you can see what potential is there and microsoft is putting a lot of its x into the blazer baskets so there's",
    "start": "825680",
    "end": "831839"
  },
  {
    "text": "a lot more coming with blazer but i think that is",
    "start": "831839",
    "end": "837120"
  },
  {
    "text": "enough for an introduction because we want to build a real-time application that really takes blazer to the next",
    "start": "837120",
    "end": "845760"
  },
  {
    "text": "level so um i like a lot of code so let's dive into some code so when i",
    "start": "845760",
    "end": "852240"
  },
  {
    "text": "thought about what could we build in a talk like that and what is a really engaging",
    "start": "852240",
    "end": "857279"
  },
  {
    "text": "real-time application i immediately thought of something like slack because if you",
    "start": "857279",
    "end": "862480"
  },
  {
    "text": "think about it slack actually um exposes different kinds of data",
    "start": "862480",
    "end": "867839"
  },
  {
    "text": "fetching capabilities like we initially when we open the channel or open the",
    "start": "867839",
    "end": "872880"
  },
  {
    "text": "chat we fetch data simple fetch and then we write messages",
    "start": "872880",
    "end": "877920"
  },
  {
    "text": "that is basically mutating the service date and on top of that we have real real",
    "start": "877920",
    "end": "884000"
  },
  {
    "text": "time like the bubbles uh for instance when there are new messages coming in or if i'm in a",
    "start": "884000",
    "end": "889120"
  },
  {
    "text": "conversation really the messages that are coming in so um slack is really a good example",
    "start": "889120",
    "end": "896880"
  },
  {
    "text": "of a real-time application that really is engaging with the user so i thought",
    "start": "896880",
    "end": "902639"
  },
  {
    "text": "let's build a blazer clone it won't be as beautiful as the actual",
    "start": "902639",
    "end": "909040"
  },
  {
    "text": "as the actual blazer but let's uh try to build something up let me just uh",
    "start": "909040",
    "end": "917279"
  },
  {
    "text": "smaller okay okay so let me just open up my first demo",
    "start": "917360",
    "end": "924000"
  },
  {
    "text": "and uh we'll start with something simple let's uh let me just uh run that",
    "start": "924000",
    "end": "930320"
  },
  {
    "text": "application it's a it's just a shell so far and um i walk you through how this application",
    "start": "930320",
    "end": "937120"
  },
  {
    "text": "looks like so we do need watch run so we can change the code while we",
    "start": "937120",
    "end": "942560"
  },
  {
    "text": "work on that and it recompiles let me open chrome and then uh",
    "start": "942560",
    "end": "949120"
  },
  {
    "text": "we'll just open it okay and what we see here is basically a simple",
    "start": "949120",
    "end": "955759"
  },
  {
    "text": "layout for a slack clone so on the left-hand side we",
    "start": "955759",
    "end": "961759"
  },
  {
    "text": "so channels or stuff like that and at the moment we just have dummies here and then we have the main pane where we",
    "start": "962720",
    "end": "969839"
  },
  {
    "text": "have all the message interaction and that is what we built out later in the demo",
    "start": "969839",
    "end": "975920"
  },
  {
    "text": "so first we want to fetch all the users that we basically can interact with",
    "start": "975920",
    "end": "982720"
  },
  {
    "text": "so we will fill out this pane so let me walk you through the code a bit so if we open up a",
    "start": "982720",
    "end": "990639"
  },
  {
    "text": "laser application like that we basically can see there is a program cs and the",
    "start": "990639",
    "end": "996320"
  },
  {
    "text": "program cs is very familiar to us because it's actually what we have in all these uh all console",
    "start": "996320",
    "end": "1002399"
  },
  {
    "text": "applications we have it in asp.net core applications so it's very familiar how what that is",
    "start": "1002399",
    "end": "1008240"
  },
  {
    "text": "and even in blazer has a main um main method so that is not nothing new to us",
    "start": "1008240",
    "end": "1015360"
  },
  {
    "text": "the next thing is we have a host builder here and that's like in asp.net core we have some kind of a host",
    "start": "1015360",
    "end": "1021759"
  },
  {
    "text": "builder that sets up all our environment the difference here is that our builder has a root component",
    "start": "1021759",
    "end": "1029280"
  },
  {
    "text": "and this root component app if we go in there we can see that it's",
    "start": "1029280",
    "end": "1034720"
  },
  {
    "text": "not c sharp code it's laser code and it hosts another component and",
    "start": "1034720",
    "end": "1040160"
  },
  {
    "text": "this main component is actually where the magic is happening the main component has at the moment",
    "start": "1040160",
    "end": "1046798"
  },
  {
    "text": "just a people list in there and some area where i can put codes",
    "start": "1046799",
    "end": "1052799"
  },
  {
    "text": "and in blazer there's a concept of dumb and smart components or smart and dumb",
    "start": "1052799",
    "end": "1057919"
  },
  {
    "text": "components or you could say also stateful components and stateless components",
    "start": "1057919",
    "end": "1063679"
  },
  {
    "text": "and main is our state full component so everything with date and will happen in our",
    "start": "1063679",
    "end": "1071120"
  },
  {
    "text": "main razer okay so then we have our dumb components",
    "start": "1071120",
    "end": "1078559"
  },
  {
    "text": "or a stateless components and we basically can",
    "start": "1078559",
    "end": "1083760"
  },
  {
    "text": "can see the people list here and the people list now has some html here so it's not just",
    "start": "1083760",
    "end": "1090720"
  },
  {
    "text": "a native laser tags we can put just actual html in here",
    "start": "1090720",
    "end": "1095840"
  },
  {
    "text": "and we can see here the placeholders and if we have a look at the placeholder",
    "start": "1095840",
    "end": "1101600"
  },
  {
    "text": "they are just html last but not least and that is the item we want to basically now bring to life is the person item and",
    "start": "1101600",
    "end": "1109120"
  },
  {
    "text": "that represents an actual person in our list later so let's have a look how we can bring that",
    "start": "1109120",
    "end": "1115679"
  },
  {
    "text": "thing to life so um just as a side note basically how that",
    "start": "1115679",
    "end": "1122240"
  },
  {
    "text": "works with those components is that the smart components will push data down their component tree",
    "start": "1122240",
    "end": "1129440"
  },
  {
    "text": "and then if these stateless components will interact in blazer they will throw",
    "start": "1129440",
    "end": "1135440"
  },
  {
    "text": "events and the main components can react to those events okay so let's bring that thing to life",
    "start": "1135440",
    "end": "1144240"
  },
  {
    "text": "so we want to fetch data with graphql here right so um the first thing uh we need to do",
    "start": "1144240",
    "end": "1152160"
  },
  {
    "text": "is adding a package i did that already it's the strawberry shake package as i said i'm one of the",
    "start": "1152160",
    "end": "1157360"
  },
  {
    "text": "authors of the hot chocolate graphql library for.net the hot chocolate is actually the backend or the graphql server and",
    "start": "1157360",
    "end": "1163520"
  },
  {
    "text": "strawberryshake is the graphql client okay so this is already",
    "start": "1163520",
    "end": "1169120"
  },
  {
    "text": "set up the project the one thing i have to do now is to initialize my project to run a graphql client and how i'm going",
    "start": "1169120",
    "end": "1177200"
  },
  {
    "text": "to do that is basically in visual studio code so in visual studio for windows",
    "start": "1177200",
    "end": "1182240"
  },
  {
    "text": "um it's uh more guided through ui i'm i'm a visual studio code",
    "start": "1182240",
    "end": "1188080"
  },
  {
    "text": "developer so we do more with consoles yeah so i have a cli too tool here that",
    "start": "1188080",
    "end": "1194160"
  },
  {
    "text": "is from store that comes with the package strawberry shake and so i can do dotnetgraph ql",
    "start": "1194160",
    "end": "1200559"
  },
  {
    "text": "in it and then i have to add the graphql",
    "start": "1200559",
    "end": "1207840"
  },
  {
    "text": "url from my server and i can give my client basically a name i",
    "start": "1208320",
    "end": "1215200"
  },
  {
    "text": "call it chat so we have a chat client i initialize it basically what now happens",
    "start": "1215200",
    "end": "1220880"
  },
  {
    "text": "is we are downloading a chat graphql schema and that's the",
    "start": "1220880",
    "end": "1226960"
  },
  {
    "text": "schema from my server with all the types and basically the client compiles",
    "start": "1226960",
    "end": "1232880"
  },
  {
    "text": "against this schema we will see what that means in a bit so the next thing i need to do is",
    "start": "1232880",
    "end": "1238960"
  },
  {
    "text": "writing up queries so i need another uh query file so i'm adding a file",
    "start": "1238960",
    "end": "1245280"
  },
  {
    "text": "queries here the graphql it actually can be named anything and you can have",
    "start": "1245280",
    "end": "1250559"
  },
  {
    "text": "multiples so if you have various clients or various uh very um files that's not a problem",
    "start": "1250559",
    "end": "1258640"
  },
  {
    "text": "okay so the next thing we should do is head over to our graphql ide because our graphql ide is much better to explore a",
    "start": "1258640",
    "end": "1265679"
  },
  {
    "text": "graphql endpoint and this graphql id is called banana kickpop it's also about",
    "start": "1265679",
    "end": "1271120"
  },
  {
    "text": "it's also built by our open source project okay so i um i prepared already uh",
    "start": "1271120",
    "end": "1279039"
  },
  {
    "text": "here an empty pane my server is set up and i already specified a token here",
    "start": "1279039",
    "end": "1285600"
  },
  {
    "text": "so what i can do now is first have a look at my graphql endpoint so let's explore the",
    "start": "1285600",
    "end": "1292000"
  },
  {
    "text": "schema so i can see there are a lot of queries here and i can see there is the me query and",
    "start": "1292000",
    "end": "1298159"
  },
  {
    "text": "i showed you the initial example of my graphql where i basically a query on sme node but i also",
    "start": "1298159",
    "end": "1304480"
  },
  {
    "text": "have other things like i want to really query for people and i can see",
    "start": "1304480",
    "end": "1309600"
  },
  {
    "text": "that my people endpoints actually a paging api and it exposes a person here and i then",
    "start": "1309600",
    "end": "1316960"
  },
  {
    "text": "can drill into the structure of my uh graphql server here before i even do the first fetch",
    "start": "1316960",
    "end": "1324720"
  },
  {
    "text": "um and then i can see a person actually has a name and i need a name and also",
    "start": "1324720",
    "end": "1331600"
  },
  {
    "text": "the last scene date and to have this online status i want the last scene date",
    "start": "1331600",
    "end": "1336720"
  },
  {
    "text": "okay so let's oh i just closed my demo let's do that",
    "start": "1336720",
    "end": "1343440"
  },
  {
    "text": "and write up some graphql so initially i actually showed you the shorthand syntax",
    "start": "1343440",
    "end": "1348640"
  },
  {
    "text": "we are using the longer syntax now so i'm specifying i want to do a query here and the query should",
    "start": "1348640",
    "end": "1354720"
  },
  {
    "text": "fetch persons okay and and then i want to fetch from",
    "start": "1354720",
    "end": "1362880"
  },
  {
    "text": "the people field and actually um i saw there's a field nodes",
    "start": "1362880",
    "end": "1368640"
  },
  {
    "text": "i also have intellisensia by the way and from the nodes i want to have the name",
    "start": "1368640",
    "end": "1374559"
  },
  {
    "text": "and i want to have the last c okay i can execute that",
    "start": "1374559",
    "end": "1380320"
  },
  {
    "text": "i get some data back i can see oh it's it's actually not sorted like i wanted",
    "start": "1380320",
    "end": "1385919"
  },
  {
    "text": "so with hot chocolate you have also the sorting apis and these filtering apis",
    "start": "1385919",
    "end": "1392159"
  },
  {
    "text": "it's not a graphql uh in heavy graphql but some graphql servers have such capabilities",
    "start": "1392159",
    "end": "1398400"
  },
  {
    "text": "um so now let's just order by name",
    "start": "1398400",
    "end": "1404480"
  },
  {
    "text": "and okay that's exactly what i want so i can grab this query and go with it over here paste it into",
    "start": "1405200",
    "end": "1412720"
  },
  {
    "text": "my query document recompile it",
    "start": "1412720",
    "end": "1417840"
  },
  {
    "text": "and what actually now happens is that we really compile from the queries so this this query is",
    "start": "1417840",
    "end": "1424000"
  },
  {
    "text": "actually compiled let me show you that if i would like put a mistake in here",
    "start": "1424000",
    "end": "1433760"
  },
  {
    "text": "build that then actually my um my the compileprocessof.net would",
    "start": "1435600",
    "end": "1442559"
  },
  {
    "text": "tell me that uh there is a field people that does not exist on krabby and that's",
    "start": "1442559",
    "end": "1448000"
  },
  {
    "text": "true i can even jump here to my mistake and fix it so it really compiles",
    "start": "1448000",
    "end": "1453039"
  },
  {
    "text": "and it compiles into c sharp code so i now have here a person",
    "start": "1453039",
    "end": "1458240"
  },
  {
    "text": "that actually has a name and the last scene so actually what i specified in my",
    "start": "1458240",
    "end": "1463760"
  },
  {
    "text": "query now manifests as the sharp code okay so let's build our client up",
    "start": "1463760",
    "end": "1472720"
  },
  {
    "text": "so let's go to components and start with the smallest component and that person item",
    "start": "1472720",
    "end": "1479279"
  },
  {
    "text": "and i can see that my personal item wants a username and the user last seen here so i said we are pushing data in so we",
    "start": "1479279",
    "end": "1486640"
  },
  {
    "text": "need some way to push data in so i'm adding a property here and i'm annotating this with parameter",
    "start": "1486640",
    "end": "1493440"
  },
  {
    "text": "and that makes it a parameter and enables me to push data into that property and now i'm just",
    "start": "1493440",
    "end": "1499600"
  },
  {
    "text": "adding like with razer always an ad here and this becomes actually now the",
    "start": "1499600",
    "end": "1506159"
  },
  {
    "text": "reference to my property here and uh takes from the user basically the",
    "start": "1506159",
    "end": "1511200"
  },
  {
    "text": "name okay so let's build that in so person item is now done let's do the people",
    "start": "1511200",
    "end": "1517120"
  },
  {
    "text": "list and again we need this is a stateless component we need some way to push data",
    "start": "1517120",
    "end": "1523039"
  },
  {
    "text": "in and in this component i want to have an indicator that it's still loading because if it's",
    "start": "1523039",
    "end": "1530640"
  },
  {
    "text": "loading i actually want to show these little placeholders so that we have no",
    "start": "1530640",
    "end": "1537840"
  },
  {
    "text": "empty no empty",
    "start": "1537840",
    "end": "1543600"
  },
  {
    "text": "no empty pane here let me fix that okay and then if it's not",
    "start": "1543600",
    "end": "1550720"
  },
  {
    "text": "loading and if there are data i want to show something different so let's add another property",
    "start": "1550720",
    "end": "1559200"
  },
  {
    "text": "that really represents our data set of persons so a person connection is",
    "start": "1559200",
    "end": "1564320"
  },
  {
    "text": "basically my paging data and then i can really add here an else",
    "start": "1564320",
    "end": "1572320"
  },
  {
    "text": "so if it's not loading and there are persons then i uh will for each of the persons",
    "start": "1572320",
    "end": "1579200"
  },
  {
    "text": "and add so many personal items as they are persons so that is um quite simple okay",
    "start": "1579200",
    "end": "1586880"
  },
  {
    "text": "so we basically built up our list now let's head over to our main component",
    "start": "1586880",
    "end": "1592159"
  },
  {
    "text": "see how we really bring that to life i've said initially that we can use things like",
    "start": "1592159",
    "end": "1598000"
  },
  {
    "text": "dependency injection and in order to communicate with our server we need a client and we can now use",
    "start": "1598000",
    "end": "1605840"
  },
  {
    "text": "a directive in razer that is called at inject and that basically pulls something out",
    "start": "1605840",
    "end": "1611440"
  },
  {
    "text": "of our dependency injection and now we'll just use the chat client that was generated",
    "start": "1611440",
    "end": "1616559"
  },
  {
    "text": "that client and then we have a way to communicate with",
    "start": "1616559",
    "end": "1623440"
  },
  {
    "text": "our server okay so um we have to push data in here so",
    "start": "1623440",
    "end": "1630480"
  },
  {
    "text": "the way that works is over these parameters and i actually have the people parameter",
    "start": "1630480",
    "end": "1636720"
  },
  {
    "text": "here and the is loading is empty so we now have to create some",
    "start": "1636720",
    "end": "1643679"
  },
  {
    "text": "fields here so that we can bind our component to our component",
    "start": "1643679",
    "end": "1649039"
  },
  {
    "text": "parameters to that field so let's just add um private pool it's loading",
    "start": "1649039",
    "end": "1658240"
  },
  {
    "text": "it's loading here and we are loading by default so when the component initializes we are loading",
    "start": "1658240",
    "end": "1664080"
  },
  {
    "text": "and the other thing was the person connection and let's just add people here",
    "start": "1664080",
    "end": "1671360"
  },
  {
    "text": "it's nullable component and then we will bind the whole thing to",
    "start": "1671360",
    "end": "1678080"
  },
  {
    "text": "people and here we bind this thing to is loading",
    "start": "1678080",
    "end": "1685279"
  },
  {
    "text": "for my typing okay so the next thing we need is to initialize our component and there are lifetime functions in blazer",
    "start": "1685600",
    "end": "1692480"
  },
  {
    "text": "so i can basically use this lifetime functions on initialize and say let's initialize my component",
    "start": "1692480",
    "end": "1701039"
  },
  {
    "text": "and the first thing i would do is fetch data from my com from my backend so we have a result",
    "start": "1701039",
    "end": "1709039"
  },
  {
    "text": "that is a weight chat client dot get person async and that",
    "start": "1709039",
    "end": "1716559"
  },
  {
    "text": "there you can see that the operation from our graphql query actually became a function now on my client or a method on my client",
    "start": "1716559",
    "end": "1723200"
  },
  {
    "text": "and i can call that and then i basically said say ensure there are no errors on my",
    "start": "1723200",
    "end": "1728559"
  },
  {
    "text": "results so i know it's everything is okay graphql actually supports partial results but we are not dealing",
    "start": "1728559",
    "end": "1734080"
  },
  {
    "text": "with them um and the last thing is we say the people",
    "start": "1734080",
    "end": "1739279"
  },
  {
    "text": "actually is from our result from the data we know the data is not nigh because there is no error",
    "start": "1739279",
    "end": "1745520"
  },
  {
    "text": "and uh we want the people and last but not least we said loading is now false and",
    "start": "1745520",
    "end": "1753279"
  },
  {
    "text": "in order to update my component tree i now say state has changed and with that our thing should work",
    "start": "1753279",
    "end": "1761600"
  },
  {
    "text": "let's head over to net and okay we see um our client has",
    "start": "1761600",
    "end": "1768000"
  },
  {
    "text": "already rebuilt so let's refresh it oh there's still an arrow there's still an error because we",
    "start": "1768000",
    "end": "1775039"
  },
  {
    "text": "haven't set up the dependency injection let's quickly do that go to our program cs and the dependency",
    "start": "1775039",
    "end": "1782000"
  },
  {
    "text": "ejection is actually configured through our builder and actually it's already generated for us",
    "start": "1782000",
    "end": "1788240"
  },
  {
    "text": "by our by our strawberry shake client so i just have to say add chat client",
    "start": "1788240",
    "end": "1793600"
  },
  {
    "text": "and there is a important aspect about graphql because graphql actually is transport",
    "start": "1793600",
    "end": "1798960"
  },
  {
    "text": "agnostic so we have to also define the transport so we use an",
    "start": "1798960",
    "end": "1806960"
  },
  {
    "text": "http and http client and that is again an api that we use in",
    "start": "1806960",
    "end": "1813120"
  },
  {
    "text": "the backend and that we just can use in blazer now",
    "start": "1813120",
    "end": "1818240"
  },
  {
    "text": "so we say at http the chat client and actually we want to configure",
    "start": "1818240",
    "end": "1826080"
  },
  {
    "text": "the http client here to use you just do that",
    "start": "1826080",
    "end": "1832240"
  },
  {
    "text": "base address and then it's a new ui",
    "start": "1832240",
    "end": "1837679"
  },
  {
    "text": "and the uri has actually added that already as a snippet here",
    "start": "1837679",
    "end": "1845520"
  },
  {
    "text": "move that okay so we have the address",
    "start": "1845520",
    "end": "1851760"
  },
  {
    "text": "and then we last but not least have to add some headers so we have a token authorization",
    "start": "1851760",
    "end": "1858720"
  },
  {
    "text": "if it's new authorization here it's a better token",
    "start": "1858720",
    "end": "1866480"
  },
  {
    "text": "actually i should have the token in here [Music]",
    "start": "1866480",
    "end": "1872399"
  },
  {
    "text": "okay okay so that should work a lot we basically have a set up our http",
    "start": "1872399",
    "end": "1878960"
  },
  {
    "text": "client factory here it's restarting it's compiling it's up",
    "start": "1878960",
    "end": "1885919"
  },
  {
    "text": "let's refresh that okay our component is there and okay we have now our sidebar it was",
    "start": "1885919",
    "end": "1892720"
  },
  {
    "text": "quite easy and it was quite quick to build it's a bit ugly but we anti-ugly fire it in the next step okay",
    "start": "1892720",
    "end": "1901279"
  },
  {
    "text": "so get could have left that open let's head over to our slides",
    "start": "1901279",
    "end": "1908320"
  },
  {
    "text": "so we did it we built our first graphql integration into blazer it was not that",
    "start": "1908320",
    "end": "1914559"
  },
  {
    "text": "difficult actually but let's head to the more challenging stuff so",
    "start": "1914559",
    "end": "1920640"
  },
  {
    "text": "what we built so far is basically the left-hand side we built a simple people list that just fetches data but we could",
    "start": "1920640",
    "end": "1926240"
  },
  {
    "text": "have done that with other technologies as well as easy but now let's build the more challenging",
    "start": "1926240",
    "end": "1931840"
  },
  {
    "text": "stuff so now we are building the middle area where we um build message bubbles that uh flow in in real time and we",
    "start": "1931840",
    "end": "1939120"
  },
  {
    "text": "build a footer where we send messages and interact and after i have built this demo there",
    "start": "1939120",
    "end": "1945360"
  },
  {
    "text": "will be a link i will post a link and you basically can send me messages into my debug session so let's see how that",
    "start": "1945360",
    "end": "1952480"
  },
  {
    "text": "works okay we have 30 more minutes i hope that",
    "start": "1952480",
    "end": "1958480"
  },
  {
    "text": "roof that we get it done by then",
    "start": "1958480",
    "end": "1963679"
  },
  {
    "text": "okay so the second demo",
    "start": "1963679",
    "end": "1967360"
  },
  {
    "text": "is basically the full chat client that really works so as the first demo we now have already",
    "start": "1968880",
    "end": "1976080"
  },
  {
    "text": "set up our base our program cs to have the configuration for the http client",
    "start": "1976080",
    "end": "1981360"
  },
  {
    "text": "here and we have our chat line generated and actually i",
    "start": "1981360",
    "end": "1986480"
  },
  {
    "text": "changed the query here a bit to anti-agrify the left hand sidebar so we now tracking an",
    "start": "1986480",
    "end": "1992240"
  },
  {
    "text": "online status here we are tracking a profile picture here and we also have the last scene and i also",
    "start": "1992240",
    "end": "1999519"
  },
  {
    "text": "already put some components in because building all those components on the fly would take too long",
    "start": "1999519",
    "end": "2005039"
  },
  {
    "text": "so we actually already have a lot of this stuff that we",
    "start": "2005039",
    "end": "2011519"
  },
  {
    "text": "need in here like we have a message list now here that basically um already has all the",
    "start": "2011519",
    "end": "2018080"
  },
  {
    "text": "code in that we would need to build up and we have our chat message bubble here and stuff like",
    "start": "2018080",
    "end": "2024880"
  },
  {
    "text": "that what we will concentrate on is really bringing these to life and basically we are building out the",
    "start": "2024880",
    "end": "2031200"
  },
  {
    "text": "main component and the main component is now set up as we left it basically we have an initialize function",
    "start": "2031200",
    "end": "2038960"
  },
  {
    "text": "that fetches the initial data here so what we gonna build now is basically",
    "start": "2038960",
    "end": "2045120"
  },
  {
    "text": "when we click on the person we fetch the initial messages for that person that we are now communicating",
    "start": "2045120",
    "end": "2051599"
  },
  {
    "text": "with so when we click on the left sidebar we gonna fetch some person the next",
    "start": "2051599",
    "end": "2056638"
  },
  {
    "text": "thing we need to build is when we click on the send button then we really have to mutate the server",
    "start": "2056639",
    "end": "2062960"
  },
  {
    "text": "state so change some data and send the messages to um to our backend",
    "start": "2062960",
    "end": "2071280"
  },
  {
    "text": "okay and the last thing we then have to build in and that is then the real-time stuff so the",
    "start": "2071280",
    "end": "2078560"
  },
  {
    "text": "messages flow in as uh we are sending in messages so let's start",
    "start": "2078560",
    "end": "2083599"
  },
  {
    "text": "so first let's grab the um the no not the schema let's grab the query",
    "start": "2083599",
    "end": "2089440"
  },
  {
    "text": "that we at the moment have in here let's go to our uh graphql id",
    "start": "2089440",
    "end": "2095599"
  },
  {
    "text": "and let's put it in there let's just fire it up again okay awesome that works we just get some persons here",
    "start": "2095599",
    "end": "2102720"
  },
  {
    "text": "so the next thing is um really that we built up fetching uh the messages of a person",
    "start": "2102720",
    "end": "2110480"
  },
  {
    "text": "that we are chatting with and we are gonna do that let me fix one",
    "start": "2110480",
    "end": "2118160"
  },
  {
    "text": "okay the way we're going to do that is let's have a look at our schema we basically know the email address of the person we are communicating with so",
    "start": "2118560",
    "end": "2125119"
  },
  {
    "text": "we are getting a person by its email and then we can see here is a message connection again the paging api or the",
    "start": "2125119",
    "end": "2132320"
  },
  {
    "text": "relay paging api that allows us to go through our messages",
    "start": "2132320",
    "end": "2139040"
  },
  {
    "text": "and we basically then can fetch the message so we have a direction here",
    "start": "2139040",
    "end": "2145040"
  },
  {
    "text": "basically is an incoming or outgoing message we have a recipient that is a person a",
    "start": "2145040",
    "end": "2150160"
  },
  {
    "text": "sender that is a person the send date and the text so",
    "start": "2150160",
    "end": "2156400"
  },
  {
    "text": "let's uh try to build from that knowledge query so we go back in here and we call",
    "start": "2156400",
    "end": "2162560"
  },
  {
    "text": "this query again messages okay",
    "start": "2162560",
    "end": "2168880"
  },
  {
    "text": "and then we basically would uh look up a person by email and",
    "start": "2169680",
    "end": "2176480"
  },
  {
    "text": "this field in graphql actually has an argument so that means i have to pass something in here to get the person by",
    "start": "2176480",
    "end": "2182560"
  },
  {
    "text": "email and graphql actually has the concept of variables where i can define okay there's a",
    "start": "2182560",
    "end": "2187920"
  },
  {
    "text": "variable email and this variable email is a string and this means it's not nullable so you",
    "start": "2187920",
    "end": "2194720"
  },
  {
    "text": "cannot put null into that operation and then i can assign to my",
    "start": "2194720",
    "end": "2200160"
  },
  {
    "text": "uh argument here the uh email variable and this basically",
    "start": "2200160",
    "end": "2206720"
  },
  {
    "text": "translates into a method on on honesty shop that then has an argument",
    "start": "2206720",
    "end": "2211920"
  },
  {
    "text": "email where i can put in my data so i'm really creating here my interface for my client",
    "start": "2211920",
    "end": "2219280"
  },
  {
    "text": "okay let's do the next thing the next thing is we need the messages that i have with that person",
    "start": "2219280",
    "end": "2226560"
  },
  {
    "text": "and from that message from that messages i need uh the id i need the direction",
    "start": "2226560",
    "end": "2234560"
  },
  {
    "text": "i need the recipient and that is a person we saw so it's an object and we need a sender again an object",
    "start": "2234560",
    "end": "2243599"
  },
  {
    "text": "and it's also a person and then we need to send date and the text so we pretty much need",
    "start": "2243599",
    "end": "2249599"
  },
  {
    "text": "everything in that case so actually we would need",
    "start": "2249599",
    "end": "2255200"
  },
  {
    "text": "the name and the email and the online statement status for these participants but then again i introduced",
    "start": "2255200",
    "end": "2263599"
  },
  {
    "text": "the concept of fragments that makes it much more understandable how a data graph",
    "start": "2263599",
    "end": "2269040"
  },
  {
    "text": "works and also drives how we create components for a c-sharp client",
    "start": "2269040",
    "end": "2274800"
  },
  {
    "text": "so let's build a fragment that is called participant",
    "start": "2274800",
    "end": "2280320"
  },
  {
    "text": "and this this fragment we apply on a person",
    "start": "2280720",
    "end": "2285839"
  },
  {
    "text": "and that then we grab these fields here and actually instead of the fields up",
    "start": "2286000",
    "end": "2293359"
  },
  {
    "text": "here we now use our fragment participant here",
    "start": "2293359",
    "end": "2299680"
  },
  {
    "text": "so and now we really can change our whole graph actually because we are using the same fields here so every person is actually",
    "start": "2299680",
    "end": "2306720"
  },
  {
    "text": "also it could be also a participant and if we look at that actually we",
    "start": "2306720",
    "end": "2312000"
  },
  {
    "text": "could take that out right okay that is our person and then we create our own shape for our",
    "start": "2312000",
    "end": "2319520"
  },
  {
    "text": "client that is called person and that is now how a person",
    "start": "2319520",
    "end": "2326320"
  },
  {
    "text": "is represented in in our c-sharp client later and i'll walk you through that in a bit",
    "start": "2326320",
    "end": "2331680"
  },
  {
    "text": "uh how that generates really and last but not least we have a thing",
    "start": "2331680",
    "end": "2336720"
  },
  {
    "text": "that we should call a message",
    "start": "2336720",
    "end": "2341838"
  },
  {
    "text": "and that is now our message fragment our reusable component here and we put that in",
    "start": "2343119",
    "end": "2351599"
  },
  {
    "text": "that and now we are just using components in our functions and in our um operations and that really",
    "start": "2352720",
    "end": "2360079"
  },
  {
    "text": "makes a difference we will see when we can generate that but let's first put the last piece in",
    "start": "2360079",
    "end": "2366240"
  },
  {
    "text": "and that's a mutation so we want to mutate the server state and it's called a mutation in graphql so",
    "start": "2366240",
    "end": "2372480"
  },
  {
    "text": "we say send message and and then again we want an email here",
    "start": "2372480",
    "end": "2378640"
  },
  {
    "text": "because this is basically the email to which we send or the user to which we send our message and then we put in",
    "start": "2378640",
    "end": "2386960"
  },
  {
    "text": "a text that's a text that we actually want to send and it's also a string that cannot be",
    "start": "2386960",
    "end": "2392000"
  },
  {
    "text": "none awesome okay and there are quite a lot of",
    "start": "2392000",
    "end": "2398000"
  },
  {
    "text": "mutations here i could invite friends but we are picking the send message mutation",
    "start": "2398000",
    "end": "2403839"
  },
  {
    "text": "and providing an input here and we provide the recipient email",
    "start": "2403839",
    "end": "2411200"
  },
  {
    "text": "it's called email and actually we provide the text for the message",
    "start": "2411200",
    "end": "2418400"
  },
  {
    "text": "if you're wondering why there are no commas in a graphql they're actually not necessary because",
    "start": "2418960",
    "end": "2425599"
  },
  {
    "text": "they're the first thing the compilers of json staff do is throwing the commas away",
    "start": "2425599",
    "end": "2431599"
  },
  {
    "text": "so graph the designers of graphical just uh just decided they you can put commas in",
    "start": "2431599",
    "end": "2437599"
  },
  {
    "text": "there but you don't have to okay so a mutation always returns the change state of the server so what you",
    "start": "2437599",
    "end": "2444560"
  },
  {
    "text": "change on the server will be returned in that case we are returning the message that the created object",
    "start": "2444560",
    "end": "2450560"
  },
  {
    "text": "we also returning the recipient and the sender because their state also has changed because",
    "start": "2450560",
    "end": "2456000"
  },
  {
    "text": "their messages property also has a new message now in there for our use case we just",
    "start": "2456000",
    "end": "2461599"
  },
  {
    "text": "need the message that is produced because we want the message with all its ids and then we just say okay that's",
    "start": "2461599",
    "end": "2467440"
  },
  {
    "text": "actually also a message in the way we want it okay let's",
    "start": "2467440",
    "end": "2472640"
  },
  {
    "text": "grab that put it over here and let's compile",
    "start": "2472640",
    "end": "2481359"
  },
  {
    "text": "our um thing right did i actually",
    "start": "2481359",
    "end": "2487680"
  },
  {
    "text": "do that okay so so we're compiling that and what it actually did is it now",
    "start": "2488240",
    "end": "2494880"
  },
  {
    "text": "updated our client and we now can see that we have actually a person",
    "start": "2494880",
    "end": "2501680"
  },
  {
    "text": "and this person now is also a participant so actually what we generated from the",
    "start": "2501760",
    "end": "2508480"
  },
  {
    "text": "components is actually the real c sharp clients with all the inheritance and stuff like that so you",
    "start": "2508480",
    "end": "2515280"
  },
  {
    "text": "you really are in control how your client is chain shaped and that we as i said that puts",
    "start": "2515280",
    "end": "2521520"
  },
  {
    "text": "the front end developer in the driver's seat of uh of how to fetch data and uh",
    "start": "2521520",
    "end": "2528400"
  },
  {
    "text": "stuff like that okay so we go in the main back and what we're gonna do is now we um",
    "start": "2528400",
    "end": "2534640"
  },
  {
    "text": "basically put in our message list here and the message list actually gets again",
    "start": "2534640",
    "end": "2541119"
  },
  {
    "text": "a loading signal so if it's loading and shows something different then we are",
    "start": "2541119",
    "end": "2546480"
  },
  {
    "text": "putting a recipient in and that's the selected recipient and we have to build that",
    "start": "2546480",
    "end": "2551920"
  },
  {
    "text": "and then we uh last but not least we are providing also messages the messages that we have with that person",
    "start": "2551920",
    "end": "2558319"
  },
  {
    "text": "so the first thing we are going to do is let's um let's add another field here",
    "start": "2558319",
    "end": "2565920"
  },
  {
    "text": "that is called a person which is a person and the recipient",
    "start": "2565920",
    "end": "2572720"
  },
  {
    "text": "recipient and then we have the second field that we need and",
    "start": "2572720",
    "end": "2578640"
  },
  {
    "text": "that is an immutable list which is a",
    "start": "2578640",
    "end": "2583680"
  },
  {
    "text": "immutable list of messages and we call it messages",
    "start": "2583680",
    "end": "2589200"
  },
  {
    "text": "and in the beginning it's just immutable list",
    "start": "2589200",
    "end": "2594319"
  },
  {
    "text": "messages empty so it's just an empty list because at the beginning nothing is",
    "start": "2594800",
    "end": "2600960"
  },
  {
    "text": "selected so it should be empty okay and now let's really",
    "start": "2600960",
    "end": "2606480"
  },
  {
    "text": "build up our future so when we click on a person the first thing we we basically get",
    "start": "2606480",
    "end": "2612160"
  },
  {
    "text": "provided the component really sensors down the the the person on which",
    "start": "2612160",
    "end": "2617520"
  },
  {
    "text": "the user clicked so i get an object here and i really could then just grab our client",
    "start": "2617520",
    "end": "2623839"
  },
  {
    "text": "code here so i don't have to type so much and change it and say okay actually",
    "start": "2623839",
    "end": "2630319"
  },
  {
    "text": "we are going to fetch the messages now so you see the client really generated these new operations in and i can then",
    "start": "2630319",
    "end": "2637920"
  },
  {
    "text": "just grab my person that is already in my component tree",
    "start": "2637920",
    "end": "2643280"
  },
  {
    "text": "here and just pass in the email okay i ensure that there are again no errors",
    "start": "2643280",
    "end": "2648640"
  },
  {
    "text": "and then i really set my uh fields here i said the person is now the recipient",
    "start": "2648640",
    "end": "2655119"
  },
  {
    "text": "and actually the messages such as is now an immutable list",
    "start": "2655119",
    "end": "2662319"
  },
  {
    "text": "and create range and we actually take from the result again we know that",
    "start": "2662319",
    "end": "2668480"
  },
  {
    "text": "data is not null because we have no errors so we take from the person by email",
    "start": "2668480",
    "end": "2674160"
  },
  {
    "text": "operation we take the messages and from that the nodes",
    "start": "2674160",
    "end": "2680640"
  },
  {
    "text": "and this is not known when there is no error and last but not least we just inform",
    "start": "2681119",
    "end": "2688480"
  },
  {
    "text": "our our api that we have our ui that we have changed the state and the comments shall",
    "start": "2688480",
    "end": "2694560"
  },
  {
    "text": "be updated before we start that let's just put in the last piece",
    "start": "2694560",
    "end": "2699760"
  },
  {
    "text": "and that is sending the message and that is um also quite simple so when uh on the",
    "start": "2699760",
    "end": "2707040"
  },
  {
    "text": "message list basically a click sentence is raised and this message here is raised and basically we can just grab",
    "start": "2707040",
    "end": "2714319"
  },
  {
    "text": "the code that we have here and then modify it again because",
    "start": "2714319",
    "end": "2722240"
  },
  {
    "text": "instead of getting the messages we are sending a message and instead of person we're using now",
    "start": "2722240",
    "end": "2727839"
  },
  {
    "text": "our recipient property and we say okay we know it's not now when this is raised",
    "start": "2727839",
    "end": "2735838"
  },
  {
    "text": "uh i will answer to the questions uh once we are through that demo um",
    "start": "2736480",
    "end": "2743920"
  },
  {
    "text": "okay and then we just provide the message that our event sends in here so the component gives me the message that",
    "start": "2743920",
    "end": "2749280"
  },
  {
    "text": "is really produced here and then we uh really send that to our server and show again and that",
    "start": "2749280",
    "end": "2754800"
  },
  {
    "text": "there are no errors then we update just our messages",
    "start": "2754800",
    "end": "2760079"
  },
  {
    "text": "messages add and we now grab from the result because",
    "start": "2760079",
    "end": "2767839"
  },
  {
    "text": "i said we are reselecting the uh change state of the server so we're just grabbing",
    "start": "2767839",
    "end": "2775520"
  },
  {
    "text": "the message here and we are state has changed so we're updating the service date so",
    "start": "2775520",
    "end": "2781280"
  },
  {
    "text": "this should actually run let's try it out",
    "start": "2781280",
    "end": "2786400"
  },
  {
    "text": "it's always a surprise when it doesn't watch run because we are going to change it there's no real time",
    "start": "2786400",
    "end": "2792800"
  },
  {
    "text": "yet and that's the last piece we are putting in",
    "start": "2792800",
    "end": "2797839"
  },
  {
    "text": "so let's start that okay it's up let's just call our client so we can see",
    "start": "2799040",
    "end": "2806880"
  },
  {
    "text": "and now we have uh the left hand side pane which actually is now a bit more anti-uglified we can now",
    "start": "2806880",
    "end": "2814079"
  },
  {
    "text": "click on it and now we can see that the server that we",
    "start": "2814079",
    "end": "2820000"
  },
  {
    "text": "fetched actually the messages from my server i i can see by the way that we did a mistake",
    "start": "2820000",
    "end": "2825200"
  },
  {
    "text": "here it's not ordered so we add an order in a minute um but okay we have the messages in here",
    "start": "2825200",
    "end": "2830720"
  },
  {
    "text": "and i can also send something and send something we send it",
    "start": "2830720",
    "end": "2838800"
  },
  {
    "text": "and we have here so um so we can see that",
    "start": "2838800",
    "end": "2846800"
  },
  {
    "text": "uh that all works let's get some real-time data in there",
    "start": "2846800",
    "end": "2852000"
  },
  {
    "text": "uh let's head back to our graphql id and build it up so actually i said we did a mistake here",
    "start": "2852000",
    "end": "2858960"
  },
  {
    "text": "because it's not what the messages are not ordered correctly so uh let's put some order in here",
    "start": "2858960",
    "end": "2865200"
  },
  {
    "text": "and say uh we are ordering it by the send date ascending uh yeah",
    "start": "2865200",
    "end": "2871760"
  },
  {
    "text": "ascending okay so that fixed our error is the message sorting we will see that when we",
    "start": "2871760",
    "end": "2877520"
  },
  {
    "text": "put that back in and last but not least let's put in um uh real-time data and real-time data is",
    "start": "2877520",
    "end": "2883920"
  },
  {
    "text": "reading in graphql is the same thing then a query or at least from writing then up",
    "start": "2883920",
    "end": "2889520"
  },
  {
    "text": "we basically say okay we have subscription and subscription real-time operations and the",
    "start": "2889520",
    "end": "2897280"
  },
  {
    "text": "operation here we call it receive messages we could also",
    "start": "2897280",
    "end": "2902559"
  },
  {
    "text": "call it unreceived messages or something that we want and then we can have a look at what",
    "start": "2902559",
    "end": "2908800"
  },
  {
    "text": "operations or fields do we have here we have one field and one field in this case is an event",
    "start": "2908800",
    "end": "2914160"
  },
  {
    "text": "we have an on message received here and if we hover over that we can see",
    "start": "2914160",
    "end": "2920559"
  },
  {
    "text": "that this is a message so we are getting messages as they receive as we receive them on the server it's",
    "start": "2920559",
    "end": "2926319"
  },
  {
    "text": "pushing them down to us so we can now use our data shape again our fragment here",
    "start": "2926319",
    "end": "2931839"
  },
  {
    "text": "and say okay that's a message but actually in this case i really want to rename the",
    "start": "2931839",
    "end": "2937599"
  },
  {
    "text": "field for my client side and call it message um and that's just an alias so",
    "start": "2937599",
    "end": "2944000"
  },
  {
    "text": "you can also rename the fields that the server tells you so it's nicer with your api",
    "start": "2944000",
    "end": "2949839"
  },
  {
    "text": "on the client side okay let's grab that and really just",
    "start": "2949839",
    "end": "2956400"
  },
  {
    "text": "copy it back to our code this one",
    "start": "2956400",
    "end": "2964319"
  },
  {
    "text": "okay okay it's already rebuilding",
    "start": "2965200",
    "end": "2971838"
  },
  {
    "text": "and let's get back into our main component we love that and",
    "start": "2972240",
    "end": "2979839"
  },
  {
    "text": "put in the real-time data so how that works is and i'm just",
    "start": "2979839",
    "end": "2985040"
  },
  {
    "text": "adding that from a snippet here and explain it because it is a bit of more code",
    "start": "2985040",
    "end": "2990160"
  },
  {
    "text": "so really i have a different name here just let me fix that up and then i explain it",
    "start": "2990160",
    "end": "2995760"
  },
  {
    "text": "okay so messages actually real-time data is represented in our",
    "start": "2995760",
    "end": "3002319"
  },
  {
    "text": "c-sharp client as uh as something called a response stream and response stream is actually an async",
    "start": "3002319",
    "end": "3009440"
  },
  {
    "text": "innumerable so what i can do is i can tell my client i want um to receive",
    "start": "3009440",
    "end": "3015920"
  },
  {
    "text": "the messages and then i get back async um innumerable or response stream",
    "start": "3015920",
    "end": "3021359"
  },
  {
    "text": "and then i can wait for each asyncly for each of that as long as it works and each",
    "start": "3021359",
    "end": "3027839"
  },
  {
    "text": "result i can check is there an error in that result or and is a recipient by the way set here",
    "start": "3027839",
    "end": "3034319"
  },
  {
    "text": "then add that to my to my message list",
    "start": "3034319",
    "end": "3040319"
  },
  {
    "text": "so um and i really run that in a task just with task run so multitasking is",
    "start": "3040319",
    "end": "3046079"
  },
  {
    "text": "also quite simple with um with blazer because i just can't task run",
    "start": "3046079",
    "end": "3052480"
  },
  {
    "text": "like on the server really it's net core here it's nothing special like with silverlight",
    "start": "3052480",
    "end": "3058160"
  },
  {
    "text": "and um then i'm just in this case i could do it more",
    "start": "3058160",
    "end": "3063359"
  },
  {
    "text": "sophisticated but just for the demo where we just begin receive messages in",
    "start": "3063359",
    "end": "3069040"
  },
  {
    "text": "our initialize function that will basically open up the connection to the server and receive messages as long as",
    "start": "3069040",
    "end": "3075200"
  },
  {
    "text": "we uh uh iterating through that but we are not done that because real-time data actually doesn't",
    "start": "3075200",
    "end": "3081839"
  },
  {
    "text": "work over http we need another transport layer here and in this case we are using",
    "start": "3081839",
    "end": "3087520"
  },
  {
    "text": "actually a web sockets and we did a lot of work to abstract that",
    "start": "3087520",
    "end": "3093440"
  },
  {
    "text": "and actually the api now works as the same like the http factory you can put",
    "start": "3093440",
    "end": "3098960"
  },
  {
    "text": "middlewares in it's just uh saying uh at websocket client here",
    "start": "3098960",
    "end": "3104800"
  },
  {
    "text": "then you specify the client and you actually just specify the yuri ui you want to connect to",
    "start": "3104800",
    "end": "3112640"
  },
  {
    "text": "in this case i'm using a token of as an as an argument to my um",
    "start": "3112640",
    "end": "3119839"
  },
  {
    "text": "to my uri but i wouldn't do that in real life i would use message based authentication here",
    "start": "3119839",
    "end": "3127200"
  },
  {
    "text": "and put really the authorization token on the message and there are also other stuff that you",
    "start": "3127200",
    "end": "3132800"
  },
  {
    "text": "have to take care of in real life example but okay for now we put in",
    "start": "3132800",
    "end": "3138640"
  },
  {
    "text": "basically just we said at websocket client here specified our ui and uh the thing should",
    "start": "3138640",
    "end": "3144640"
  },
  {
    "text": "have recompiled and should work now let's refresh and refresh that",
    "start": "3144640",
    "end": "3151520"
  },
  {
    "text": "um let's see if that works yeah that works out better i have a message here i could write something foo",
    "start": "3151520",
    "end": "3159440"
  },
  {
    "text": "and now really let me just head over back to my slides now you can we",
    "start": "3159440",
    "end": "3166000"
  },
  {
    "text": "can test that you can grab this your url",
    "start": "3166000",
    "end": "3171599"
  },
  {
    "text": "and then you can really send me messages in so um try to grab that over here",
    "start": "3171599",
    "end": "3182000"
  },
  {
    "text": "i do that too let's do another window put that in so chat audience at",
    "start": "3182000",
    "end": "3189960"
  },
  {
    "text": "azurewebsites.net we can say uh hello oh there's already when someone writing in messages you can",
    "start": "3189960",
    "end": "3196079"
  },
  {
    "text": "see how they are coming in awesome you can see how easy it was with graphql",
    "start": "3196079",
    "end": "3203119"
  },
  {
    "text": "to build real-time applications here and you still have to do some heavy lifting like",
    "start": "3203119",
    "end": "3209040"
  },
  {
    "text": "you have to scale your server correctly and stuff like that but um just to get you into graphql and",
    "start": "3209040",
    "end": "3215200"
  },
  {
    "text": "blazer you can now really build real-time applications rich sba applications in the browser",
    "start": "3215200",
    "end": "3222640"
  },
  {
    "text": "okay so awesome it works it load tests so let's move on and to our conclusion",
    "start": "3222640",
    "end": "3231359"
  },
  {
    "text": "testing ndc okay so we did it",
    "start": "3232880",
    "end": "3241280"
  },
  {
    "text": "uh i never did this talk actually in 16 minutes and usually i take one and a half hour because then i would",
    "start": "3241280",
    "end": "3248240"
  },
  {
    "text": "really walk you through deeper to this uh through these examples uh it's the first time i actually",
    "start": "3248240",
    "end": "3253839"
  },
  {
    "text": "reached under 50 minutes there's another conference where i have to do this in 30 minutes in august",
    "start": "3253839",
    "end": "3260960"
  },
  {
    "text": "so we'll see how that pans out okay so my conclusion about these two",
    "start": "3260960",
    "end": "3268240"
  },
  {
    "text": "technologies here is really do you can trade much faster with um with blazer and graphql together",
    "start": "3268240",
    "end": "3274640"
  },
  {
    "text": "because firstly um i'm actually a back-end developer i'm i'm used to c-sharp i'm not good at",
    "start": "3274640",
    "end": "3280880"
  },
  {
    "text": "javascript and blazer actually enables me to use all my knowledge that i acquired and use all my",
    "start": "3280880",
    "end": "3287040"
  },
  {
    "text": "apis that i used for years and really run that in the browser",
    "start": "3287040",
    "end": "3292079"
  },
  {
    "text": "and uh soon really run that as an electron app and recreate awesome desktop",
    "start": "3292079",
    "end": "3297520"
  },
  {
    "text": "applications with that so you can re reuse a lot of code and reuse a lot of knowledge that you acquired as a c-sharp",
    "start": "3297520",
    "end": "3303680"
  },
  {
    "text": "developer and really with graphql you can fetch data so much more efficiently",
    "start": "3303680",
    "end": "3309359"
  },
  {
    "text": "and it's not just some untyped data graphql is really strongly typed and um awesome to set up",
    "start": "3309359",
    "end": "3317440"
  },
  {
    "text": "and it really enables you as a consumer of the api",
    "start": "3317440",
    "end": "3322720"
  },
  {
    "text": "um and strawberry shake actually is at the moment preview we targeted actually to release",
    "start": "3322720",
    "end": "3329440"
  },
  {
    "text": "it in may it's a public preview so you can chime in there",
    "start": "3329440",
    "end": "3334480"
  },
  {
    "text": "we are now targeting end of jul july and hope to get it done by then",
    "start": "3334480",
    "end": "3339760"
  },
  {
    "text": "also the tooling that you saw here we have like our project also built this graphql ide",
    "start": "3339760",
    "end": "3345920"
  },
  {
    "text": "called banana cake pop and we are also building at the moment uh integration into visual studio so you",
    "start": "3345920",
    "end": "3351520"
  },
  {
    "text": "just can click and add a graphql client to your um to your solution without any console",
    "start": "3351520",
    "end": "3358640"
  },
  {
    "text": "tools and really we bring in a nice syntax highlighting and",
    "start": "3358640",
    "end": "3364160"
  },
  {
    "text": "intellisense to visual studio basically what you sell in banana cake pop will be integrated into",
    "start": "3364160",
    "end": "3370160"
  },
  {
    "text": "visual studio um and we are not stopping there because i said graphql s3 transport agnostic so",
    "start": "3370160",
    "end": "3377200"
  },
  {
    "text": "we are also working on the server and client side to uh to provide it over grpc so you can",
    "start": "3377200",
    "end": "3384240"
  },
  {
    "text": "have much smaller payloads than with json payloads okay",
    "start": "3384240",
    "end": "3391119"
  },
  {
    "text": "so if you want to head to our project it's basically go to chilecream.com or to our github",
    "start": "3391119",
    "end": "3397280"
  },
  {
    "text": "repository it's all open source and um i hope you enjoyed the talk and",
    "start": "3397280",
    "end": "3402720"
  },
  {
    "text": "now i'm heading to the questions that",
    "start": "3402720",
    "end": "3408400"
  },
  {
    "text": "let me just see where they are okay let's start at the",
    "start": "3408960",
    "end": "3416559"
  },
  {
    "text": "which i could have a whole room for lego yes uh that is actually my it was my",
    "start": "3416559",
    "end": "3423359"
  },
  {
    "text": "son's room i made it into an office uh and it was his lego room i'm sorry to him so i",
    "start": "3423359",
    "end": "3428960"
  },
  {
    "text": "have to kick out my kids all the time and there's still messages coming in this is so simple wow",
    "start": "3428960",
    "end": "3435839"
  },
  {
    "text": "the hotshot and strawberry apis are so easy used yeah and that is one of our main design goals to make",
    "start": "3435839",
    "end": "3441359"
  },
  {
    "text": "graphql really simple to donate developers um would be nice if there is some magic",
    "start": "3441359",
    "end": "3448480"
  },
  {
    "text": "to autocall state has changed uh yes but i imagine that is quite uh challenging",
    "start": "3448480",
    "end": "3455599"
  },
  {
    "text": "also but uh i mean it's it's uh easy and you can control really when you want to update",
    "start": "3455599",
    "end": "3461040"
  },
  {
    "text": "the componentry you can also unmute yourself and ask",
    "start": "3461040",
    "end": "3467040"
  },
  {
    "text": "questions in person by the way",
    "start": "3467040",
    "end": "3470240"
  },
  {
    "text": "oh yeah uh there's so there is a question about often authorization with um graphql",
    "start": "3472480",
    "end": "3479599"
  },
  {
    "text": "and that is really baked into um hot chocolate the server side so basically you can put authorized",
    "start": "3479599",
    "end": "3487119"
  },
  {
    "text": "directives on your fields and then specify a policy and we are basically using the policy api from",
    "start": "3487119",
    "end": "3493119"
  },
  {
    "text": "from asp.net core so then we basically apply these policies on your",
    "start": "3493119",
    "end": "3499760"
  },
  {
    "text": "data and we are doing uh much more there with version 11 we are",
    "start": "3499760",
    "end": "3504960"
  },
  {
    "text": "planning to bring in a new api that also does data trimming so basically that we use",
    "start": "3504960",
    "end": "3510799"
  },
  {
    "text": "policies to get data out of the results",
    "start": "3510799",
    "end": "3516960"
  },
  {
    "text": "there there's no script support um so what's the name of the tool",
    "start": "3516960",
    "end": "3523839"
  },
  {
    "text": "so the graphql id is a banana k-pop you get it head over to our homepage basically",
    "start": "3523839",
    "end": "3530640"
  },
  {
    "text": "or our repository and then you can grab graph the graphql ide there we are developing actually uh turn off",
    "start": "3530640",
    "end": "3537200"
  },
  {
    "text": "tools yeah there it is graph banana kpop names are epic yeah",
    "start": "3537200",
    "end": "3542400"
  },
  {
    "text": "we thought uh simple names like graphql.net so this is boring or in graphql so we uh",
    "start": "3542400",
    "end": "3549520"
  },
  {
    "text": "we really love how the javascript community is naming the components so we started",
    "start": "3549520",
    "end": "3554960"
  },
  {
    "text": "naming them actually like cakes or drinks",
    "start": "3554960",
    "end": "3561040"
  },
  {
    "text": "could you briefly uh how query servers work in the server oh there",
    "start": "3561599",
    "end": "3567839"
  },
  {
    "text": "that's a real whole conference talk i have about that it's",
    "start": "3567839",
    "end": "3574240"
  },
  {
    "text": "and there are so many ways you can do uh resolvers in the back end and really with hot chocolate you can",
    "start": "3574240",
    "end": "3580880"
  },
  {
    "text": "also just uh just do schema stitching",
    "start": "3580880",
    "end": "3586240"
  },
  {
    "text": "so the the hot chocolate server has really rich capabilities to merge in data",
    "start": "3586240",
    "end": "3591599"
  },
  {
    "text": "and stitch data together from various data sources so just head over to our slack channel",
    "start": "3591599",
    "end": "3598000"
  },
  {
    "text": "it's posted on our repository and then you can um just talk to us we have a really",
    "start": "3598000",
    "end": "3603760"
  },
  {
    "text": "really active slack channel uh in graphql server",
    "start": "3603760",
    "end": "3610000"
  },
  {
    "text": "also providing the websocket server yes so um basically we have built a middleware uh",
    "start": "3610000",
    "end": "3616480"
  },
  {
    "text": "for for graphql and all these like um all these communication protocols are natively supported by us",
    "start": "3616480",
    "end": "3623200"
  },
  {
    "text": "so you don't have to code anything you just say use graphql or use graphql websockets and stuff like",
    "start": "3623200",
    "end": "3630640"
  },
  {
    "text": "that and then it's really in your server and on the client side you saw these add websockets that's really generated from",
    "start": "3630640",
    "end": "3638079"
  },
  {
    "text": "us for you so all this data handling we do a connection pooling and you can really put in middlewares on",
    "start": "3638079",
    "end": "3644000"
  },
  {
    "text": "top of that and we really do that for you any more",
    "start": "3644000",
    "end": "3649960"
  },
  {
    "text": "questions",
    "start": "3649960",
    "end": "3652960"
  }
]