[
  {
    "text": "alright let's get started so welcome welcome to everyone here I know it's",
    "start": "8730",
    "end": "16840"
  },
  {
    "text": "late in the day already so I'm sure people are already tired and welcome as well to the people in the overflow room",
    "start": "16840",
    "end": "23260"
  },
  {
    "text": "I'm sure there's lots of people sitting comfortably there my name is Stephen",
    "start": "23260",
    "end": "28480"
  },
  {
    "text": "Kelly I'm going to talk to you about how to refactor your code mechanically with clan tooling so just a little bit about",
    "start": "28480",
    "end": "36250"
  },
  {
    "text": "me to get started I've been around C++ and the open source",
    "start": "36250",
    "end": "43089"
  },
  {
    "text": "community for C++ for about 10 years or yeah 10 years I did a lot in the KDE",
    "start": "43089",
    "end": "49960"
  },
  {
    "text": "community I then did a lot of in cute as well and I did a lot in C make or I kind",
    "start": "49960",
    "end": "56620"
  },
  {
    "text": "of created modern C make over a few years and more recently I've been getting interested in clang my interest",
    "start": "56620",
    "end": "65170"
  },
  {
    "text": "in clang has just been about tooling really so far so I want to keep on hearing her clang is great for for",
    "start": "65170",
    "end": "72939"
  },
  {
    "text": "creating tools and I didn't know how to do that myself yet so I said well I should learn learning to do that so what",
    "start": "72939",
    "end": "80320"
  },
  {
    "text": "I want to talk to you today is about client ID client ID is sort of the base tool on which we you know create",
    "start": "80320",
    "end": "88509"
  },
  {
    "text": "extensions in order to do custom refactoring of our own code I'm going to",
    "start": "88509",
    "end": "94539"
  },
  {
    "text": "talk to you about why you would meet refactoring mechanically instead of manually how to extend client ID what",
    "start": "94539",
    "end": "102039"
  },
  {
    "text": "other tools can help you to write those extensions and what problems you kind of",
    "start": "102039",
    "end": "107380"
  },
  {
    "text": "might encounter when you try to do this kind of work I'm not going to talk too",
    "start": "107380",
    "end": "113799"
  },
  {
    "text": "much about the existing details of what's already built into client ID there's already a lot of resources about",
    "start": "113799",
    "end": "119409"
  },
  {
    "text": "that on the internet I'll just touch on that and I'm not going to touch I'm not",
    "start": "119409",
    "end": "124869"
  },
  {
    "text": "going to talk much about compilation data's databases either there is sort of a requirement for you to create in order",
    "start": "124869",
    "end": "132700"
  },
  {
    "text": "to do this kind of refactoring mechanically but there's lots of resources about how to create those as",
    "start": "132700",
    "end": "137800"
  },
  {
    "text": "well for one thing see Michael generated for you and what I want you to come away from",
    "start": "137800",
    "end": "144510"
  },
  {
    "text": "this talk with is the idea that you can do larger factorings on your code I kind",
    "start": "144510",
    "end": "152370"
  },
  {
    "text": "of maybe like a lot of you tried doing text-based refactoring of my code years",
    "start": "152370",
    "end": "158370"
  },
  {
    "text": "ago and I thought it just doesn't work but I want to show you that it is possible to do this kind of mechanical",
    "start": "158370",
    "end": "164219"
  },
  {
    "text": "refactoring using today's tooling and I want to show you that more better",
    "start": "164219",
    "end": "169260"
  },
  {
    "text": "tooling is coming in the future so you probably didn't think that you're gonna",
    "start": "169260",
    "end": "175079"
  },
  {
    "text": "have to work today but it's code review time question is does this code pass",
    "start": "175079",
    "end": "180510"
  },
  {
    "text": "code review does anyone think this code does not pass code review show hands a",
    "start": "180510",
    "end": "186629"
  },
  {
    "text": "few people up in the front okay and of course why why not no override so we're",
    "start": "186629",
    "end": "195389"
  },
  {
    "text": "using modern C++ this derived class needs an override specifier on its few",
    "start": "195389",
    "end": "202260"
  },
  {
    "text": "method and the reason for that is if if the base class has a slightly different",
    "start": "202260",
    "end": "209129"
  },
  {
    "text": "signature my foo in my derived class isn't actually going to override the foo",
    "start": "209129",
    "end": "215489"
  },
  {
    "text": "in the base class if I forget the constant for example or if there's a",
    "start": "215489",
    "end": "221010"
  },
  {
    "text": "different parameter in the in the parameter list so what we want to do is",
    "start": "221010",
    "end": "226590"
  },
  {
    "text": "have override there in the derived class and then virtuals is redundant redundant",
    "start": "226590",
    "end": "233129"
  },
  {
    "text": "so we can get rid of that so this is sort of the end result that we want to go for we want to remove the few",
    "start": "233129",
    "end": "242909"
  },
  {
    "text": "declaration which is incorrect and out a correct one with the override specifier and we want to do that mechanically this",
    "start": "242909",
    "end": "250379"
  },
  {
    "text": "kind of thing it would be very hard to do that in just a text-based",
    "start": "250379",
    "end": "255380"
  },
  {
    "text": "refactoring tool you need something which one durst and C++ in order to know that override is missing for the first",
    "start": "255380",
    "end": "261959"
  },
  {
    "text": "for one and then where to put it and where to look for virtual and remove it",
    "start": "261959",
    "end": "267840"
  },
  {
    "text": "there's a lot of C++ knowledge needed in the tool for that so that's exactly what",
    "start": "267840",
    "end": "273779"
  },
  {
    "text": "client ID does it has it's actually closer to 300 checks now",
    "start": "273779",
    "end": "279169"
  },
  {
    "text": "built into it for doing atoms of changes like that",
    "start": "279169",
    "end": "284279"
  },
  {
    "text": "so modernize ease override is the one which adds missing override to your classes modernize use no putter replaces",
    "start": "284279",
    "end": "292409"
  },
  {
    "text": "uses of zero in your code which actually signify a null pointer and replace it with the new putter keyword so there's",
    "start": "292409",
    "end": "299729"
  },
  {
    "text": "there's dozens of useful checks there's a lot of library specific checks in quantity because clanked ID doesn't have",
    "start": "299729",
    "end": "306029"
  },
  {
    "text": "a plug-in system so you'll find checks in there which are specific to boost are specific to Google's abseil library and",
    "start": "306029",
    "end": "313620"
  },
  {
    "text": "things like that but it also means that if you're going to extend count are you",
    "start": "313620",
    "end": "318750"
  },
  {
    "text": "with your own tools you're gonna have to build clang and clanked out of yourself so that's quite a disadvantage so god",
    "start": "318750",
    "end": "328889"
  },
  {
    "text": "world actually has cranked ID on it so I",
    "start": "328889",
    "end": "335669"
  },
  {
    "text": "can actually demonstrate that live for you so here I have the same code from my",
    "start": "335669",
    "end": "340800"
  },
  {
    "text": "slide with the problematic missing override and I'm running clang tardy",
    "start": "340800",
    "end": "348300"
  },
  {
    "text": "with this modernize user override check and what I get is this output telling me",
    "start": "348300",
    "end": "353699"
  },
  {
    "text": "override should go here and virtual is extra get rid of it and you can run this",
    "start": "353699",
    "end": "360779"
  },
  {
    "text": "on the command line you'll get the same result and if you pass - fix and keep",
    "start": "360779",
    "end": "366270"
  },
  {
    "text": "you eye on the left side panel here when I complete the word fix so clang has",
    "start": "366270",
    "end": "374129"
  },
  {
    "text": "rewritten my code it is then leave on quantity and fan no further issues so I",
    "start": "374129",
    "end": "379680"
  },
  {
    "text": "can actually just undo in the garbled window but it does the whole thing again whenever God both you know X bar is it's",
    "start": "379680",
    "end": "388680"
  },
  {
    "text": "time at so that's the kind of thing we want to do with clang tidy but you're",
    "start": "388680",
    "end": "397020"
  },
  {
    "text": "going to have your own code where it's your own types your own functions and everything that you want to refactor",
    "start": "397020",
    "end": "403110"
  },
  {
    "text": "somehow maybe you have an old string type in your code base and you want to replace it with a new",
    "start": "403110",
    "end": "409260"
  },
  {
    "text": "string type or a third party string type anything like that and some of these kind of things you might try to do them",
    "start": "409260",
    "end": "415980"
  },
  {
    "text": "with just text parsing and you might get some of the way they're using that so this one is quite simple I think I'd be",
    "start": "415980",
    "end": "423240"
  },
  {
    "text": "able to write a Python script which would replace old type with new type without too much trouble again if we",
    "start": "423240",
    "end": "435900"
  },
  {
    "text": "have a function returning a type and then we have a type inside the function and we return that we have to change",
    "start": "435900",
    "end": "443340"
  },
  {
    "text": "both places so that's again not too difficult I think I could do that with a Python script where it might get more",
    "start": "443340",
    "end": "453210"
  },
  {
    "text": "difficult is if you have implicit conversions and other types in this in",
    "start": "453210",
    "end": "459210"
  },
  {
    "text": "the case like this where I'm returning a variable of type other type from a function which returns an old type and I",
    "start": "459210",
    "end": "465990"
  },
  {
    "text": "want to replace old type with a new type I might actually have to add new code in",
    "start": "465990",
    "end": "471330"
  },
  {
    "text": "order to enable that conversion maybe that's not implicit in my new API and",
    "start": "471330",
    "end": "479400"
  },
  {
    "text": "this is kind of where you get away from what I'm an IDE can do for you as well because an IDE is you know the idea is",
    "start": "479400",
    "end": "486030"
  },
  {
    "text": "that you use are starting to get refactoring tools in them too they can rename functions maybe some of them can",
    "start": "486030",
    "end": "491910"
  },
  {
    "text": "rename types but they're not going to know which code they have to insert in cases like this but you might want to",
    "start": "491910",
    "end": "498600"
  },
  {
    "text": "write your own code which is aware of that and can do this automatically just",
    "start": "498600",
    "end": "504900"
  },
  {
    "text": "another case of the same thing I am now returning other type and I need to do some conversion in this case I start a",
    "start": "504900",
    "end": "511650"
  },
  {
    "text": "convert a static constructor in order to make the code work with this new type so",
    "start": "511650",
    "end": "520710"
  },
  {
    "text": "again there's just stuff that we need to insert and it's not even as simple as the last time as either because now we",
    "start": "520710",
    "end": "526800"
  },
  {
    "text": "have to insert code before and after the sum VAR in that return statement so it's not just appending",
    "start": "526800",
    "end": "534110"
  },
  {
    "text": "so we want to be able to do large-scale refactoring in cases where it's not",
    "start": "534470",
    "end": "540350"
  },
  {
    "text": "possible to do with said or a Python script in cases that would require a semantic knowledge of C++ code of your",
    "start": "540350",
    "end": "548030"
  },
  {
    "text": "C++ code in order to complete the refactoring we wanted to be automatable",
    "start": "548030",
    "end": "553910"
  },
  {
    "text": "so that we're not doing it manually in spending a lot of human hours doing it and we'd actually liked it to be",
    "start": "553910",
    "end": "560510"
  },
  {
    "text": "repeatable as well so that we can run it on our CI system that means that we can for example fail our CI build if",
    "start": "560510",
    "end": "569870"
  },
  {
    "text": "somebody introduces a derived class with no override you know that could be",
    "start": "569870",
    "end": "575090"
  },
  {
    "text": "useful and we want it to be good enough that it doesn't break code in practice",
    "start": "575090",
    "end": "580760"
  },
  {
    "text": "when doing these kind of refactoring tools you tend to be able to get about 80 85 or 90 percent of the way there",
    "start": "580760",
    "end": "588260"
  },
  {
    "text": "after that you hit into this long tail of special cases and it's actually easier to just spend one or two hours",
    "start": "588260",
    "end": "594650"
  },
  {
    "text": "fixing them up manually where that will occur it tends to be something about",
    "start": "594650",
    "end": "601430"
  },
  {
    "text": "templates usually or something about macros but like I said you'll get 80 to",
    "start": "601430",
    "end": "608210"
  },
  {
    "text": "85 to 90% of the way there and then just realize that diminishing returns",
    "start": "608210",
    "end": "615610"
  },
  {
    "text": "but the problem is currently with client ID it's actually a little bit hard to",
    "start": "616190",
    "end": "622970"
  },
  {
    "text": "extend I myself am NOT a I was never",
    "start": "622970",
    "end": "628940"
  },
  {
    "text": "trained as a programmer I actually did mechanical engineering in university so",
    "start": "628940",
    "end": "634490"
  },
  {
    "text": "when I left University I thought a translation unit was a meter turned out that's very wrong so I'm somewhere in",
    "start": "634490",
    "end": "642920"
  },
  {
    "text": "there around professional level and it takes a lot of knowledge about the",
    "start": "642920",
    "end": "648620"
  },
  {
    "text": "internals of clang today to actually create a refactoring tool like this but",
    "start": "648620",
    "end": "654530"
  },
  {
    "text": "we want to actually enable these kind of tools at every level of C++ ability so",
    "start": "654530",
    "end": "662630"
  },
  {
    "text": "the workflow of how you create a tool looks something like this today you create a new check in the client ID",
    "start": "662630",
    "end": "670450"
  },
  {
    "text": "tool you identify your C++ code to two-port that's just literally deciding",
    "start": "670450",
    "end": "678520"
  },
  {
    "text": "what you want to do you create what we call a match or query I'm gonna spend about half of the talk talking about",
    "start": "678520",
    "end": "684820"
  },
  {
    "text": "that today in order to match parts of",
    "start": "684820",
    "end": "690190"
  },
  {
    "text": "the C++ code that you actually care about and then you implement to fix it which will do all of your replacements",
    "start": "690190",
    "end": "697060"
  },
  {
    "text": "so that will do things like insert the override keyword remove virtual replace one type with another type",
    "start": "697060",
    "end": "702310"
  },
  {
    "text": "that's essentially text replacement but this is a cycle so every time you create",
    "start": "702310",
    "end": "710290"
  },
  {
    "text": "a tool you run it on your code and you realize it's broken in some special case",
    "start": "710290",
    "end": "715810"
  },
  {
    "text": "way you'll fix your tool and iterate and iterate until you're satisfied and then you're finished so creating a new check",
    "start": "715810",
    "end": "726970"
  },
  {
    "text": "is very easy what you do is you go to",
    "start": "726970",
    "end": "736570"
  },
  {
    "text": "the clang tardy source directory because you're going to build that anyway and",
    "start": "736570",
    "end": "741750"
  },
  {
    "text": "you need to run this script add new check checks or categorized so all of",
    "start": "741750",
    "end": "752920"
  },
  {
    "text": "the directories here in this project are categories so there's modernized ones those are the ones that tend to Portugal",
    "start": "752920",
    "end": "759160"
  },
  {
    "text": "C++ 11 performance portability when I",
    "start": "759160",
    "end": "765010"
  },
  {
    "text": "use when I create a new tool I usually put it into miscellaneous and the way you do that is add new check misc for",
    "start": "765010",
    "end": "773230"
  },
  {
    "text": "the category and then make awesome",
    "start": "773230",
    "end": "778800"
  },
  {
    "text": "because what this code what this new check or reporting tool is going to do",
    "start": "779430",
    "end": "785110"
  },
  {
    "text": "is it's going to make your code awesome by renaming all of your functions",
    "start": "785110",
    "end": "790530"
  },
  {
    "text": "so this is default code the clan creates for you whenever you run that script",
    "start": "806640",
    "end": "813760"
  },
  {
    "text": "usually what you'll do is look at it delete it and then write your own stuff",
    "start": "813760",
    "end": "818980"
  },
  {
    "text": "in there but the place is where you're going to write your own stuff you know or this register matter is function and",
    "start": "818980",
    "end": "824620"
  },
  {
    "text": "this check function so the register matter is function has a lot of calls to",
    "start": "824620",
    "end": "829990"
  },
  {
    "text": "add matter and then what we call matters that's this function deco thing I'll",
    "start": "829990",
    "end": "836260"
  },
  {
    "text": "come back to that a lot later oh you should think about in this is that this",
    "start": "836260",
    "end": "843209"
  },
  {
    "text": "this is going to do something for every function declaration in your code and the thing that it does is it calls check",
    "start": "843209",
    "end": "850750"
  },
  {
    "text": "for each function declaration that it finds and in this case what this code is trying to do is if a function doesn't",
    "start": "850750",
    "end": "857589"
  },
  {
    "text": "already start with autumn awesome underscore and we're going to add autumn underscore so that's create insertion",
    "start": "857589",
    "end": "863640"
  },
  {
    "text": "awesome so we're going to come back to this a lot later so don't worry too much",
    "start": "863640",
    "end": "869770"
  },
  {
    "text": "about it now what you can't think about",
    "start": "869770",
    "end": "878620"
  },
  {
    "text": "is that there's two important things one thing is to create a matter and the",
    "start": "878620",
    "end": "885130"
  },
  {
    "text": "other thing is try to check function so creating a matcher is what we're going to talk about now this is basically the",
    "start": "885130",
    "end": "891490"
  },
  {
    "text": "same code that we had in the text editor on the slide and Machar is there circled",
    "start": "891490",
    "end": "905200"
  },
  {
    "text": "we have function deco by and make awesome that means that we're creating a",
    "start": "905200",
    "end": "911770"
  },
  {
    "text": "binding for every function declaration in the code and the binding is called make awesome and then in the check",
    "start": "911770",
    "end": "918220"
  },
  {
    "text": "method we use that same name make awesome get it out of the results and",
    "start": "918220",
    "end": "923730"
  },
  {
    "text": "create insertion to insert our code that",
    "start": "923730",
    "end": "929560"
  },
  {
    "text": "we want to insert that's just a basic two step process every time",
    "start": "929560",
    "end": "935250"
  },
  {
    "text": "so yeah now that we've created our new check we need to identify the code that",
    "start": "939900",
    "end": "946450"
  },
  {
    "text": "we want to port and we're going to have some idea it'll be replacing a type with another",
    "start": "946450",
    "end": "952450"
  },
  {
    "text": "type of renaming something or putting classes into namespaces or anything you can imagine and you'll be able to match",
    "start": "952450",
    "end": "960130"
  },
  {
    "text": "on anything that you can conceptualize in your C++ code your variables your",
    "start": "960130",
    "end": "965710"
  },
  {
    "text": "functions your function calls your classes and your instances of those classes all of the types etc anything",
    "start": "965710",
    "end": "973630"
  },
  {
    "text": "with a name or anything with syntax you'll be able to treat it as important and much on it but it's always",
    "start": "973630",
    "end": "982750"
  },
  {
    "text": "particularly things that you want in that case I was looking for functions with a particular name you might also be",
    "start": "982750",
    "end": "989950"
  },
  {
    "text": "trying to match based on function return type or by parameter types or by",
    "start": "989950",
    "end": "995020"
  },
  {
    "text": "parameter names or by content of function or content of classes such as members so just a refresher because I'm",
    "start": "995020",
    "end": "1004770"
  },
  {
    "text": "saying a few of these words multiple times I'm pointing at the function",
    "start": "1004770",
    "end": "1010500"
  },
  {
    "text": "declarations on this slide foo has two function declarations here and the",
    "start": "1010500",
    "end": "1015839"
  },
  {
    "text": "second one is also a definition because it has a body and Bar is also a function",
    "start": "1015839",
    "end": "1021540"
  },
  {
    "text": "declaration and the call to foo clang calls that a function call expression so",
    "start": "1021540",
    "end": "1028350"
  },
  {
    "text": "that'll be represented as a call expression in how to climb models your code so you know we we've decided what",
    "start": "1028350",
    "end": "1038699"
  },
  {
    "text": "are what C++ code were trying to port next thing we need to do is write a match or too much for exactly that",
    "start": "1038699",
    "end": "1045150"
  },
  {
    "text": "source code the way we do that is by writing an ast Machar so we've already",
    "start": "1045150",
    "end": "1050250"
  },
  {
    "text": "seen the function deckle that's a nasty matter here's another one c XX method",
    "start": "1050250",
    "end": "1055320"
  },
  {
    "text": "deckle with is override inside of it and that will match any method which is an",
    "start": "1055320",
    "end": "1062820"
  },
  {
    "text": "override whether it has the override keyword or not [Music]",
    "start": "1062820",
    "end": "1069330"
  },
  {
    "text": "so there's dozens of interesting matters in clang you can match your functions your variables etc and you can find them",
    "start": "1069330",
    "end": "1077230"
  },
  {
    "text": "all online we'll see later how you can discover them in a more easy way and you",
    "start": "1077230",
    "end": "1083650"
  },
  {
    "text": "can extend extend them with custom matras so what these things are doing is",
    "start": "1083650",
    "end": "1088770"
  },
  {
    "text": "just calling api's on the clang ast classes which Klan uses internally so",
    "start": "1088770",
    "end": "1098170"
  },
  {
    "text": "just a few more examples of ast matchers to give you an idea to match functions",
    "start": "1098170",
    "end": "1104860"
  },
  {
    "text": "which have the name foo of a justified function deco and put has named foo inside of that this is what we call a",
    "start": "1104860",
    "end": "1111370"
  },
  {
    "text": "predicate language which means that anything inside of a matter if it's true",
    "start": "1111370",
    "end": "1120190"
  },
  {
    "text": "then it's added to the match set and if it's false we discard the entire function so if we want to match on a",
    "start": "1120190",
    "end": "1129370"
  },
  {
    "text": "parameter having a certain name we can do that too with the has parameter Machar and then we you know check the",
    "start": "1129370",
    "end": "1137770"
  },
  {
    "text": "name of that one and we can check if the function deco is defined if it has a",
    "start": "1137770",
    "end": "1144040"
  },
  {
    "text": "body or not if it's inline or not etc so anything that you can think of that relates to functions you can write",
    "start": "1144040",
    "end": "1150880"
  },
  {
    "text": "matches to to specify those just a few",
    "start": "1150880",
    "end": "1158050"
  },
  {
    "text": "more poem VAR deco is what used to match on parameters if statements call",
    "start": "1158050",
    "end": "1163810"
  },
  {
    "text": "expressions return statement you can discover all of these matches in the documentation so just a few more",
    "start": "1163810",
    "end": "1172930"
  },
  {
    "text": "examples now of what these would actually match in C++ code so I have a",
    "start": "1172930",
    "end": "1178690"
  },
  {
    "text": "function deco and I'm saying inside of that it has to have a certain name myfunc and it has to have a parameter",
    "start": "1178690",
    "end": "1186810"
  },
  {
    "text": "whose name is input num the zero indicates that this is the zeroth",
    "start": "1186810",
    "end": "1192730"
  },
  {
    "text": "parameter so that could be 1 2 3 etc so this this C++ code will match",
    "start": "1192730",
    "end": "1200650"
  },
  {
    "text": "mature this C++ code also even though it takes a double instead of an int however",
    "start": "1200650",
    "end": "1208690"
  },
  {
    "text": "these two won't match it so the first the double input double will not much",
    "start": "1208690",
    "end": "1214510"
  },
  {
    "text": "because it has the wrong name and be your phone has the wrong function name so those will not be part of the results",
    "start": "1214510",
    "end": "1221170"
  },
  {
    "text": "set and they won't be something that your second step will actually change in the code but what I've done here as I'm",
    "start": "1221170",
    "end": "1230830"
  },
  {
    "text": "looking at the has name input num and usually the name of a parameter is not what's interesting about it usually the",
    "start": "1230830",
    "end": "1237490"
  },
  {
    "text": "type is more interesting so how do you match on that so what I'm going to do is replace has name with has type and then",
    "start": "1237490",
    "end": "1245110"
  },
  {
    "text": "specify the type as a string so I'm saying if the type is a string add it to the result set otherwise discarded and",
    "start": "1245110",
    "end": "1253690"
  },
  {
    "text": "you can see the difference there I'm not adding the functions which take a double to the result set but that was just",
    "start": "1253690",
    "end": "1264220"
  },
  {
    "text": "function declarations if we want to match on certain call expressions we",
    "start": "1264220",
    "end": "1269410"
  },
  {
    "text": "need to use the call expert ast matter and we map that to a function with the",
    "start": "1269410",
    "end": "1274930"
  },
  {
    "text": "callee expert matter this stuff you",
    "start": "1274930",
    "end": "1280120"
  },
  {
    "text": "might be thinking how would I discover that we'll get to that later what you need to understand from this slide is",
    "start": "1280120",
    "end": "1286930"
  },
  {
    "text": "just that if we need to port our function calls which obviously you're",
    "start": "1286930",
    "end": "1294520"
  },
  {
    "text": "going to have to do you use the callee",
    "start": "1294520",
    "end": "1299610"
  },
  {
    "text": "matter to get to the function deco and then you can do everything that we saw in the previous slides",
    "start": "1299610",
    "end": "1305050"
  },
  {
    "text": "you could check the return type of the function Jekyll or the parameter is etc",
    "start": "1305050",
    "end": "1310380"
  },
  {
    "text": "so in this case I'm matching my func 42 but I'm not matching not my func 42.2",
    "start": "1310380",
    "end": "1319470"
  },
  {
    "text": "just another example here again I'm looking at the parameter of the function",
    "start": "1319500",
    "end": "1324730"
  },
  {
    "text": "and I'm saying if that has the type int then take it otherwise discard it and",
    "start": "1324730",
    "end": "1330820"
  },
  {
    "text": "its function calls again that I'm looking at not function declarations as a top-level matter so my funk 42",
    "start": "1330820",
    "end": "1337670"
  },
  {
    "text": "that's obviously going to match my my funk 42.0 will that match or not I'm not",
    "start": "1337670",
    "end": "1344750"
  },
  {
    "text": "sure my funk a will that match or not maybe maybe not it kind of depends on",
    "start": "1344750",
    "end": "1349790"
  },
  {
    "text": "the type of a and this is kind of why you have to do innovations when you're creating a cranked ID tool because sure",
    "start": "1349790",
    "end": "1358550"
  },
  {
    "text": "if my funk only exists as one function which takes an int that will obviously",
    "start": "1358550",
    "end": "1363650"
  },
  {
    "text": "match with my funk 42 however if you have an overload you won't match if",
    "start": "1363650",
    "end": "1370430"
  },
  {
    "text": "you're actually calling it with a double so you won't match the one which is expecting an INT you also won't match if",
    "start": "1370430",
    "end": "1379190"
  },
  {
    "text": "it's account reference or non conference so again you can kind of see that these",
    "start": "1379190",
    "end": "1385960"
  },
  {
    "text": "example function calls you might first of all expect that they would match but",
    "start": "1385960",
    "end": "1392240"
  },
  {
    "text": "then realize they don't and you'll iterate until you actually have something which matches all of the conditions you care about another thing",
    "start": "1392240",
    "end": "1402800"
  },
  {
    "text": "you have to know about matters is that you can bind results so this is actually what you need to do when you're creating",
    "start": "1402800",
    "end": "1409250"
  },
  {
    "text": "matches in order that you can take you can extract those results in step two and rewrite your source code but you",
    "start": "1409250",
    "end": "1416660"
  },
  {
    "text": "could also make multiple bindings in one long lateral expression so here in the",
    "start": "1416660",
    "end": "1423380"
  },
  {
    "text": "second example I have a binding for removed Fram because I want to remove that parameter and I have a binding for",
    "start": "1423380",
    "end": "1430790"
  },
  {
    "text": "our awesome prefix for the function deckle because I want to rename it so I",
    "start": "1430790",
    "end": "1437060"
  },
  {
    "text": "mentioned a few times that we have a discovery problem here I'm showing you a lot of matches on the slides I said that",
    "start": "1437060",
    "end": "1443510"
  },
  {
    "text": "they're kind of available in the documentation but it kind of turns out that the documentation is difficult to parse it's just a long list of matches",
    "start": "1443510",
    "end": "1450740"
  },
  {
    "text": "you kind of have to click into each one figure out what it is and how you would",
    "start": "1450740",
    "end": "1456470"
  },
  {
    "text": "use it so what I've done is",
    "start": "1456470",
    "end": "1461799"
  },
  {
    "text": "I extended compiler Explorer so this is just what you have on God bolt but it's",
    "start": "1464200",
    "end": "1470920"
  },
  {
    "text": "running on my website Steve very calm and instead of using it to look at",
    "start": "1470920",
    "end": "1477730"
  },
  {
    "text": "assembly or compare at the output of different compilers as you do on cobalt org you use it to query your source code",
    "start": "1477730",
    "end": "1485140"
  },
  {
    "text": "with ast matchers so in this case I've written some query script here so I'm M",
    "start": "1485140",
    "end": "1493090"
  },
  {
    "text": "is for much but we can always use the M",
    "start": "1493090",
    "end": "1498179"
  },
  {
    "text": "abbreviation and down below that we we have output so we're matching all",
    "start": "1498600",
    "end": "1504790"
  },
  {
    "text": "function declarations and you can see on the left side we're highlighting each function as we go down so because we're",
    "start": "1504790",
    "end": "1511060"
  },
  {
    "text": "matching all of them we get three results but if I go up here and I write",
    "start": "1511060",
    "end": "1517930"
  },
  {
    "text": "has named foo I'm now only getting one",
    "start": "1517930",
    "end": "1525820"
  },
  {
    "text": "result and it's only the foo function but you only know that because I showed",
    "start": "1525820",
    "end": "1532660"
  },
  {
    "text": "it to you on a slide what you actually want is for the tool to show you what",
    "start": "1532660",
    "end": "1542470"
  },
  {
    "text": "you can use inside of function deco and you do that by enabling match your right foot from your ast matchers and now for",
    "start": "1542470",
    "end": "1550030"
  },
  {
    "text": "each result it will show all of the matters that you can copy and paste",
    "start": "1550030",
    "end": "1556210"
  },
  {
    "text": "inside of that and still match this function so it's saying that I can copy",
    "start": "1556210",
    "end": "1561610"
  },
  {
    "text": "and paste has named foo in there and I'll still match foo and if I keep on",
    "start": "1561610",
    "end": "1567130"
  },
  {
    "text": "scrolling down I have awesome bar and I can it's kind of telling me stuff that I",
    "start": "1567130",
    "end": "1574540"
  },
  {
    "text": "didn't know before it's telling me that this is the way that I would match on return types ODU's returns a string void what it's",
    "start": "1574540",
    "end": "1584650"
  },
  {
    "text": "not showing is parameters so let's add one",
    "start": "1584650",
    "end": "1590280"
  },
  {
    "text": "it's telling me that if I add has parameter zero parm VAR deco",
    "start": "1592960",
    "end": "1598610"
  },
  {
    "text": "I will be able to match on the parameter",
    "start": "1598610",
    "end": "1604100"
  },
  {
    "text": "itself and now I have an ID binding",
    "start": "1604100",
    "end": "1610670"
  },
  {
    "text": "because now I have two bindings in my in my macho expression and it's showing me",
    "start": "1610670",
    "end": "1619070"
  },
  {
    "text": "things that I can add which relate to the parameter itself so I can use has",
    "start": "1619070",
    "end": "1624530"
  },
  {
    "text": "name and that as well I can also use has default argument because this one has a",
    "start": "1624530",
    "end": "1629780"
  },
  {
    "text": "default argument etc so you can do a lot of discovery using this tool to find out",
    "start": "1629780",
    "end": "1635990"
  },
  {
    "text": "where matters are relevant so that the",
    "start": "1635990",
    "end": "1645800"
  },
  {
    "text": "tool that I have learning in that website is called clang query you also have it as part of your clang builder",
    "start": "1645800",
    "end": "1651380"
  },
  {
    "text": "your clang installation you can use it on your own source code locally because obviously you can't upload your source",
    "start": "1651380",
    "end": "1657410"
  },
  {
    "text": "code to my website and it works the same way it's a it has a script mode which",
    "start": "1657410",
    "end": "1663740"
  },
  {
    "text": "I'm using here but it also has an interactive mode which has code completion as well that's again more",
    "start": "1663740",
    "end": "1669410"
  },
  {
    "text": "helpful for you to do discovery",
    "start": "1669410",
    "end": "1672850"
  },
  {
    "text": "okay so I just again illustrating here that there's two steps in creating",
    "start": "1686460",
    "end": "1691780"
  },
  {
    "text": "account ID check the first one is to write your matters here I've got two matters in my in my",
    "start": "1691780",
    "end": "1699550"
  },
  {
    "text": "C++ code now and you can also see that I'm reusing a matter",
    "start": "1699550",
    "end": "1705370"
  },
  {
    "text": "twice so here I have function deco and everything you know I'm assigning that",
    "start": "1705370",
    "end": "1711340"
  },
  {
    "text": "to a C++ variable awesome func and I'm binding it down here when I call add",
    "start": "1711340",
    "end": "1717700"
  },
  {
    "text": "matter but I also use it again with the call X for matter which we saw before so this is how you would add an awesome",
    "start": "1717700",
    "end": "1725500"
  },
  {
    "text": "prefix to both your function declarations and your function calls",
    "start": "1725500",
    "end": "1730350"
  },
  {
    "text": "so once we've written our matcher and we're quite happy with that we have to move on to the next step which is",
    "start": "1731610",
    "end": "1737440"
  },
  {
    "text": "rewriting our source code and that's the bit that we saw before where we use create insertion to insert an awesome",
    "start": "1737440",
    "end": "1744520"
  },
  {
    "text": "free fix in our source code for all of the function decals and the function",
    "start": "1744520",
    "end": "1749860"
  },
  {
    "text": "calls and you'll notice that I'm creating in the insertion get location",
    "start": "1749860",
    "end": "1756100"
  },
  {
    "text": "of the function deco it turns out the get location is the beginning of the",
    "start": "1756100",
    "end": "1762070"
  },
  {
    "text": "function name in the declaration our",
    "start": "1762070",
    "end": "1767230"
  },
  {
    "text": "function decals have a begin location and an end location as well and so you",
    "start": "1767230",
    "end": "1772330"
  },
  {
    "text": "might think okay well this is easy if I want to change the type of a function all I have to do is go to the beginning",
    "start": "1772330",
    "end": "1778210"
  },
  {
    "text": "occasion and replace whatever is there with my new type but then again",
    "start": "1778210",
    "end": "1783810"
  },
  {
    "text": "modernisation and C++ 11 comes along and you might have function declarations which look like this and now you need to",
    "start": "1783810",
    "end": "1790660"
  },
  {
    "text": "go to the end location of your function declaration and replace whatever text is there with your new type and it turns",
    "start": "1790660",
    "end": "1798700"
  },
  {
    "text": "out instead of trying to do this at the gain location or end location",
    "start": "1798700",
    "end": "1804070"
  },
  {
    "text": "conditionally you can use this big long string to get to the right location to",
    "start": "1804070",
    "end": "1810550"
  },
  {
    "text": "insert whatever it is you want to do with the return type so that's get type",
    "start": "1810550",
    "end": "1816310"
  },
  {
    "text": "source info get type lock getters function type lock get turn lock so that's the return location",
    "start": "1816310",
    "end": "1822629"
  },
  {
    "text": "how are you going to discover that it's not very discoverable but you have this",
    "start": "1822629",
    "end": "1829659"
  },
  {
    "text": "problem with every class in the clang ast so function deco is only one of the",
    "start": "1829659",
    "end": "1835599"
  },
  {
    "text": "classes in the clang AST calls to member functions are represented with this cxx",
    "start": "1835599",
    "end": "1842349"
  },
  {
    "text": "member call expects per class and it has begin and an end lock as well but then",
    "start": "1842349",
    "end": "1847629"
  },
  {
    "text": "it also has a get expert lock so you need to sort of discover that by reading",
    "start": "1847629",
    "end": "1852729"
  },
  {
    "text": "the API today so that's not so easy and VAR variables in your C++ code are",
    "start": "1852729",
    "end": "1861089"
  },
  {
    "text": "represented by the vertical that again has a gate location it has a beginning and an end location but if it has an",
    "start": "1861089",
    "end": "1870279"
  },
  {
    "text": "initializer that's way at the end just before the semicolon so there could be a lot of other interesting locations in",
    "start": "1870279",
    "end": "1876759"
  },
  {
    "text": "there that you care about maybe you want to insert and remove or replace something out of any location that you",
    "start": "1876759",
    "end": "1883479"
  },
  {
    "text": "can think of in that second line of code another thing that I want to move on to point out before moving on from this",
    "start": "1883479",
    "end": "1890200"
  },
  {
    "text": "slide is that the end location points to the 7 it doesn't point to the last 0 so",
    "start": "1890200",
    "end": "1895960"
  },
  {
    "text": "the locations in the clang ast always",
    "start": "1895960",
    "end": "1901419"
  },
  {
    "text": "point to the beginning of the last token so sometimes you have to",
    "start": "1901419",
    "end": "1906868"
  },
  {
    "text": "your location to the end of a token and there's a simple API for doing that but",
    "start": "1907229",
    "end": "1914889"
  },
  {
    "text": "it does preview up sometimes but we've come up against another discovery problem how do we discover these source",
    "start": "1914889",
    "end": "1921969"
  },
  {
    "text": "locations there could be long strings they could be just difficult to discover",
    "start": "1921969",
    "end": "1926979"
  },
  {
    "text": "by threads in the API so",
    "start": "1926979",
    "end": "1931349"
  },
  {
    "text": "so again I've I'm using can query here this time on matching on-call",
    "start": "1938519",
    "end": "1945009"
  },
  {
    "text": "expressions just to be different and",
    "start": "1945009",
    "end": "1950699"
  },
  {
    "text": "this time instead of looking at match or output I'm looking at source lock right part and what that does is it prints out",
    "start": "1950699",
    "end": "1959159"
  },
  {
    "text": "for each location in what it's matching in this case the call expressions where",
    "start": "1959159",
    "end": "1965979"
  },
  {
    "text": "is that location in the source code so if I want to get the a the beginning of",
    "start": "1965979",
    "end": "1971559"
  },
  {
    "text": "this name I can use get begin lock or get X boy lock if I want to get to the end I use get end lock we get our friend",
    "start": "1971559",
    "end": "1978279"
  },
  {
    "text": "lock etc and in the case of this second",
    "start": "1978279",
    "end": "1984639"
  },
  {
    "text": "function call there's more stuff going on and it's showing me the locations",
    "start": "1984639",
    "end": "1991839"
  },
  {
    "text": "there as well it's not traversing down into the parameters themselves I would actually need to use the other I",
    "start": "1991839",
    "end": "1998589"
  },
  {
    "text": "put the match output to discover that I need to use house parameter for that and then look at the source locations of",
    "start": "1998589",
    "end": "2005309"
  },
  {
    "text": "those those match nodes so we can do that so",
    "start": "2005309",
    "end": "2011539"
  },
  {
    "text": "hmm I don't know what's wrong with Oh",
    "start": "2033220",
    "end": "2037679"
  },
  {
    "text": "so now I'm matching the second argument to that function and I get seven plus",
    "start": "2046910",
    "end": "2053700"
  },
  {
    "text": "eight and I can see that there's a get X / lock and I get operator lock they're",
    "start": "2053700",
    "end": "2061080"
  },
  {
    "text": "representing the plus and the reason I'm showing that is often you'll see that",
    "start": "2061080",
    "end": "2066600"
  },
  {
    "text": "there's multiple locations which match the same place in your C++ code but you",
    "start": "2066600",
    "end": "2072870"
  },
  {
    "text": "want to use the one that's more semantically appropriate so in this case you'd probably be calling get operator",
    "start": "2072870",
    "end": "2079500"
  },
  {
    "text": "lock to get the location of that plus if you wanted to you know change it to a",
    "start": "2079500",
    "end": "2087540"
  },
  {
    "text": "multiply okay so that's how you discover",
    "start": "2087540",
    "end": "2093210"
  },
  {
    "text": "source locations and so for all of your",
    "start": "2093210",
    "end": "2103050"
  },
  {
    "text": "create insertion calls or you create removal or create replacement you can figure out what the first argument is",
    "start": "2103050",
    "end": "2109110"
  },
  {
    "text": "going to be by using a tool like that okay so that's basically it for creating",
    "start": "2109110",
    "end": "2117720"
  },
  {
    "text": "a clang tight client ID tool you first write you matter and then you discover",
    "start": "2117720",
    "end": "2123180"
  },
  {
    "text": "your source locations and you leave out your code and that's it but you can do",
    "start": "2123180",
    "end": "2128610"
  },
  {
    "text": "that for one file and maybe for one piece of your code and then you'll want to expand it out to your entire code",
    "start": "2128610",
    "end": "2135240"
  },
  {
    "text": "base and so then if you want to do that you need to understand a little bit",
    "start": "2135240",
    "end": "2141150"
  },
  {
    "text": "about what client ID is doing so if you just run clang tie to yourself on a C++ file it will process your header files",
    "start": "2141150",
    "end": "2149520"
  },
  {
    "text": "and it'll change those as well so if you pass - fix you'll also get new rewrites",
    "start": "2149520",
    "end": "2156450"
  },
  {
    "text": "of your files so you'll end up with H file - you know because you're going to",
    "start": "2156450",
    "end": "2162420"
  },
  {
    "text": "change that header file if you then go to the second CPP file and try to process that one it's including a header",
    "start": "2162420",
    "end": "2169440"
  },
  {
    "text": "that's already been processed and of course that's not going to compile because you've already changed the",
    "start": "2169440",
    "end": "2174750"
  },
  {
    "text": "header so what you need to do instead is process your C++",
    "start": "2174750",
    "end": "2180650"
  },
  {
    "text": "but store the results as llamó files in what we call a replacement database and",
    "start": "2180650",
    "end": "2186760"
  },
  {
    "text": "focus all of your C++ files one at a time store all of the results in the database",
    "start": "2186760",
    "end": "2191900"
  },
  {
    "text": "and then at the end extract all of the replacements from the database and apply",
    "start": "2191900",
    "end": "2197180"
  },
  {
    "text": "them to all of your code at once and then you need to do a rebuild and discover if you've made a mistake or not",
    "start": "2197180",
    "end": "2204130"
  },
  {
    "text": "and move on from there so the way that",
    "start": "2204130",
    "end": "2210590"
  },
  {
    "text": "you would run cracked ID on multiple files is you would use the wrong client ID script that is something that is that",
    "start": "2210590",
    "end": "2220900"
  },
  {
    "text": "is distributed with client ID there is",
    "start": "2222100",
    "end": "2228020"
  },
  {
    "text": "one correct ID but what that does is it runs client ID in parallel using all of",
    "start": "2228020",
    "end": "2234530"
  },
  {
    "text": "your course storing all of the results in the ml database and then afterward applying everything to your to your",
    "start": "2234530",
    "end": "2240920"
  },
  {
    "text": "source code so you know what I just showed you in the slides is actually being done transparently for you by this",
    "start": "2240920",
    "end": "2248720"
  },
  {
    "text": "one client ID script but once you try to",
    "start": "2248720",
    "end": "2255380"
  },
  {
    "text": "do this on your head you're going to run into a few issues immediately one of them is that you'll need to have all of",
    "start": "2255380",
    "end": "2261170"
  },
  {
    "text": "your generated files pre-generated so for example if you're using cute and",
    "start": "2261170",
    "end": "2266570"
  },
  {
    "text": "mock you need to you all and if you're including your mock files and your C++ files which you might be doing you'll",
    "start": "2266570",
    "end": "2275030"
  },
  {
    "text": "need to actually do a full build first in order to have all of those mock files generated otherwise your stuff just",
    "start": "2275030",
    "end": "2281150"
  },
  {
    "text": "won't build so anything else being generated as well in your build system will have to be already present because",
    "start": "2281150",
    "end": "2287270"
  },
  {
    "text": "you know when you run in client ID all of your custom stuff is not being run",
    "start": "2287270",
    "end": "2293920"
  },
  {
    "text": "another issue that will come up is time it takes a lot of time to on client ID on objects all of your source code it",
    "start": "2293920",
    "end": "2302270"
  },
  {
    "text": "takes about as much time as compiling your source code because that's essentially what it's doing but you",
    "start": "2302270",
    "end": "2308690"
  },
  {
    "text": "can't speed it up if you use unity builds you can speed it up by using precompiled headers",
    "start": "2308690",
    "end": "2314570"
  },
  {
    "text": "and you can speed it up by using some tricks that you have from build distribution so it is possible to use",
    "start": "2314570",
    "end": "2323020"
  },
  {
    "text": "build distribution tools such as ice cream to have cranked RDB one across",
    "start": "2323020",
    "end": "2329120"
  },
  {
    "text": "your whole network instead of serially or almost serially on your your computer",
    "start": "2329120",
    "end": "2335440"
  },
  {
    "text": "really all you need to do is rename the client ID executable to clang + + and",
    "start": "2335440",
    "end": "2341350"
  },
  {
    "text": "have it I put Dobbs files which actually contain llamó and that's generally",
    "start": "2341350",
    "end": "2347000"
  },
  {
    "text": "enough for those kind of tools to send it back to the host computer so that's",
    "start": "2347000",
    "end": "2358160"
  },
  {
    "text": "almost everything that I have to say about tooling I did say in the description of this talk that it's about",
    "start": "2358160",
    "end": "2363740"
  },
  {
    "text": "the current and future clang tools so I",
    "start": "2363740",
    "end": "2369430"
  },
  {
    "text": "want to show a application that I've been working on over the last few months",
    "start": "2369430",
    "end": "2375160"
  },
  {
    "text": "I mentioned that I have a long background with cute which is of course",
    "start": "2375160",
    "end": "2381470"
  },
  {
    "text": "a Norwegian product here full text audited a long time ago so what I've",
    "start": "2381470",
    "end": "2387620"
  },
  {
    "text": "done is just a small application which we can use to run clang query in this",
    "start": "2387620",
    "end": "2394070"
  },
  {
    "text": "case and what I have is multiple ast",
    "start": "2394070",
    "end": "2399290"
  },
  {
    "text": "matchers then I can click each one to get results and I get annotations in my",
    "start": "2399290",
    "end": "2405020"
  },
  {
    "text": "C++ code as well so that all of the feedback is very immediate about whether my match is working correctly or not so",
    "start": "2405020",
    "end": "2414410"
  },
  {
    "text": "in this case I'll say that I want to match function decals unless they're implicit and I get my annotations here",
    "start": "2414410",
    "end": "2423350"
  },
  {
    "text": "boot is the default name of any matter that you make we can turn off binding of",
    "start": "2423350",
    "end": "2430190"
  },
  {
    "text": "food and bonding and we get that as an",
    "start": "2430190",
    "end": "2437720"
  },
  {
    "text": "annotation and that's relevant if you also binding parameters or something you'll get annotations for the",
    "start": "2437720",
    "end": "2443870"
  },
  {
    "text": "parameters as well with different names we can also click around here on the",
    "start": "2443870",
    "end": "2450630"
  },
  {
    "text": "right side and view which source code is being referred to there with each with",
    "start": "2450630",
    "end": "2455790"
  },
  {
    "text": "each match so this is kind of a step up and usability from meeting the text",
    "start": "2455790",
    "end": "2461430"
  },
  {
    "text": "output of can query you're getting everything immediately to you and you're able to see in your source",
    "start": "2461430",
    "end": "2471150"
  },
  {
    "text": "code how you macho is working if it's doing what you want so just looking at",
    "start": "2471150",
    "end": "2477990"
  },
  {
    "text": "this other Machar it's it's reusing a",
    "start": "2477990",
    "end": "2483900"
  },
  {
    "text": "matter that we might want to reuse so you can use this let inside of crank wavy script in order to reuse fragments",
    "start": "2483900",
    "end": "2492570"
  },
  {
    "text": "of ast matchers so I'm doing that here I'm saying function decals which much Multi multi",
    "start": "2492570",
    "end": "2499470"
  },
  {
    "text": "func which is something that checks the name of the function and parameter count",
    "start": "2499470",
    "end": "2504630"
  },
  {
    "text": "is one so I'm learning that I'm learning",
    "start": "2504630",
    "end": "2513780"
  },
  {
    "text": "that and it's showing me that there's only one match and it's this place in the source code nice and easy but when",
    "start": "2513780",
    "end": "2520800"
  },
  {
    "text": "you're writing macho as you often have typos you'll have you'll be looking at",
    "start": "2520800",
    "end": "2526050"
  },
  {
    "text": "your C++ code saying I think that should match and you'll be looking at you matter saying I think that's the correct",
    "start": "2526050",
    "end": "2531450"
  },
  {
    "text": "match or but not getting the results that you want so what you can do then is",
    "start": "2531450",
    "end": "2537060"
  },
  {
    "text": "hit debug and click whatever line that you think should be matching and then",
    "start": "2537060",
    "end": "2543900"
  },
  {
    "text": "you get what I call stethoscopes you get a little circle for each clang ast node",
    "start": "2543900",
    "end": "2550440"
  },
  {
    "text": "that it knows about so we get one for the function itself we get one for this parameter so if I click on the one for",
    "start": "2550440",
    "end": "2557850"
  },
  {
    "text": "the function I get this red annotation that has name is actually not returning",
    "start": "2557850",
    "end": "2565440"
  },
  {
    "text": "true so then I realize my mistake multiply 42 and we name that and it all",
    "start": "2565440",
    "end": "2572190"
  },
  {
    "text": "goes green and again if I have the wrong number of parameters that I'm expecting",
    "start": "2572190",
    "end": "2577470"
  },
  {
    "text": "it shows you exactly why that line of code is not matching as",
    "start": "2577470",
    "end": "2583389"
  },
  {
    "text": "you might expect so if I try that for this second stethoscope it's it's",
    "start": "2583389",
    "end": "2591069"
  },
  {
    "text": "failing to match at the first level because parameters are not represented",
    "start": "2591069",
    "end": "2597009"
  },
  {
    "text": "by function decals but by parm VAR decals so that's something that doesn't",
    "start": "2597009",
    "end": "2602049"
  },
  {
    "text": "work that it still is deliberately not working we can also see locations so",
    "start": "2602049",
    "end": "2611369"
  },
  {
    "text": "yeah so it's getting a bit noisy so I",
    "start": "2615209",
    "end": "2625779"
  },
  {
    "text": "can also see locations using this stethoscopes tool so I'm again matching multiply 42 only and you can see all of",
    "start": "2625779",
    "end": "2633009"
  },
  {
    "text": "the different places where where it's determined there's a location that's",
    "start": "2633009",
    "end": "2638709"
  },
  {
    "text": "interesting to look at so if I click in the status cope it gets highlighted on the right as well if it works and this",
    "start": "2638709",
    "end": "2648069"
  },
  {
    "text": "is basically the source code that you would just paste into your account ID tool using copy location and you would",
    "start": "2648069",
    "end": "2656469"
  },
  {
    "text": "be able to replace anything that you like by visual inspection and discovery",
    "start": "2656469",
    "end": "2663069"
  },
  {
    "text": "of the source code just by looking at it and examining it with the stethoscope so",
    "start": "2663069",
    "end": "2670239"
  },
  {
    "text": "maybe just a bit more of a concrete example of that what I have here is a",
    "start": "2670239",
    "end": "2677019"
  },
  {
    "text": "matter which matches any variable to a variable declaration which is constant",
    "start": "2677019",
    "end": "2683079"
  },
  {
    "text": "qualified and there's a few others so a few other things there about L value references and I want to not match",
    "start": "2683079",
    "end": "2691089"
  },
  {
    "text": "parameter perm var decals so let's just copy that into con query to see what it",
    "start": "2691089",
    "end": "2698259"
  },
  {
    "text": "matches and so it's creating a binding",
    "start": "2698259",
    "end": "2707049"
  },
  {
    "text": "called port Const and you can see in the source code where that represents",
    "start": "2707049",
    "end": "2712889"
  },
  {
    "text": "so there's one here inside of some hetero h const adder and there's this",
    "start": "2714030",
    "end": "2722230"
  },
  {
    "text": "one constant multiplier the problem of course is that this code is not constant",
    "start": "2722230",
    "end": "2728350"
  },
  {
    "text": "cracked the const is clearly on the incorrect side that is why this project is called cartography it's using west",
    "start": "2728350",
    "end": "2736870"
  },
  {
    "text": "constant set of the correct east const so what we want to do is write a tool to",
    "start": "2736870",
    "end": "2742980"
  },
  {
    "text": "fix the source code to make it count correct so we have our matter that's matching",
    "start": "2742980",
    "end": "2750130"
  },
  {
    "text": "any const variables in our code and then here we have some javascript screen",
    "start": "2750130",
    "end": "2762100"
  },
  {
    "text": "resolution is hitting me I think port counts is assigned to a variable from",
    "start": "2762100",
    "end": "2769060"
  },
  {
    "text": "the port Const finding not similar to what we saw in the slides and we're going to remove from get begin location",
    "start": "2769060",
    "end": "2776260"
  },
  {
    "text": "to something which we need to discover using this tool and we create a removal",
    "start": "2776260",
    "end": "2782590"
  },
  {
    "text": "for that range so we need to just find",
    "start": "2782590",
    "end": "2791350"
  },
  {
    "text": "out what we need to use as we move our end so we go back to the query we show locations to see our stethoscopes and we",
    "start": "2791350",
    "end": "2802740"
  },
  {
    "text": "realize that we need to match up to this location so that's what it's telling us but there are two results for the exact",
    "start": "2802740",
    "end": "2811000"
  },
  {
    "text": "same column and semantically i think this one is more correct so get type spec start location so a",
    "start": "2811000",
    "end": "2818470"
  },
  {
    "text": "copy location there and see that we want to get it from the port Const you have a",
    "start": "2818470",
    "end": "2826810"
  },
  {
    "text": "script variable and the output of that",
    "start": "2826810",
    "end": "2832420"
  },
  {
    "text": "is already shown on the screen so const is gone from this version of",
    "start": "2832420",
    "end": "2838210"
  },
  {
    "text": "multiply and we can see a diff as well to make that a little bit more clear",
    "start": "2838210",
    "end": "2844050"
  },
  {
    "text": "okay that's half of the job done now we need to insert Const on the correct side so",
    "start": "2845070",
    "end": "2855150"
  },
  {
    "text": "just copy and paste that let me say create insertion at the insertion point",
    "start": "2855150",
    "end": "2863110"
  },
  {
    "text": "which we don't know yet and what we're going to insert is Const so our",
    "start": "2863110",
    "end": "2875700"
  },
  {
    "text": "insertion point equals what so back to",
    "start": "2875700",
    "end": "2880780"
  },
  {
    "text": "client query again so we can see locations and where do we want to insert it let's say just before molt just",
    "start": "2880780",
    "end": "2887680"
  },
  {
    "text": "before that Hamm name so I click on that and it's telling me to use gate location",
    "start": "2887680",
    "end": "2894790"
  },
  {
    "text": "for that so copy that back into my JavaScript and pour it Const dot get location and what",
    "start": "2894790",
    "end": "2905890"
  },
  {
    "text": "do I get now I'm actually going to start with the output you can see that I've",
    "start": "2905890",
    "end": "2913480"
  },
  {
    "text": "made a mistake that was actually deliberate I'm inserting kant's instead of Const and",
    "start": "2913480",
    "end": "2919740"
  },
  {
    "text": "what this tool is done it is is that it has made that replacement and we compiled my code and I'm getting cranky",
    "start": "2919740",
    "end": "2928120"
  },
  {
    "text": "agnostics now telling me this actually doesn't compile after you've our new tool so clang has a very clever internal",
    "start": "2928120",
    "end": "2937750"
  },
  {
    "text": "virtual file system so all it's doing is rewriting modified files in memory which",
    "start": "2937750",
    "end": "2945280"
  },
  {
    "text": "could be headers but not writing anything to disk and we doing a compile with that so if I fix up my tool and",
    "start": "2945280",
    "end": "2956650"
  },
  {
    "text": "insert the required tea",
    "start": "2956650",
    "end": "2960809"
  },
  {
    "text": "we compiled our agnostic window goes empty and the output is showing me that",
    "start": "2965290",
    "end": "2971210"
  },
  {
    "text": "I've incorrect I have inserted Const in the correct place so that's cool",
    "start": "2971210",
    "end": "2977870"
  },
  {
    "text": "so I've processed one translation unit and made it Const correct but of course",
    "start": "2977870",
    "end": "2984170"
  },
  {
    "text": "that's not enough we need to be able to run a tool like this on all of our code",
    "start": "2984170",
    "end": "2989630"
  },
  {
    "text": "at once so that's what this bulk porting dialog is for it's just using the exact",
    "start": "2989630",
    "end": "2996470"
  },
  {
    "text": "same query and the exact same JavaScript that I've already showed you and we can",
    "start": "2996470",
    "end": "3005050"
  },
  {
    "text": "filter on file names here as well because often you'll want to it you'll",
    "start": "3005050",
    "end": "3010270"
  },
  {
    "text": "want to really excuse me you will want to run your tool on particular parts of",
    "start": "3010270",
    "end": "3015340"
  },
  {
    "text": "your source code particular directories or files matching certain names so so",
    "start": "3015340",
    "end": "3026680"
  },
  {
    "text": "you can just match whatever files that you want there and here's one and it'll actually run the tool on all of your",
    "start": "3026680",
    "end": "3033310"
  },
  {
    "text": "your selected files in parallel once again and give you the output and the",
    "start": "3033310",
    "end": "3039370"
  },
  {
    "text": "diffs for everything here as well so you get a green line or a green box for",
    "start": "3039370",
    "end": "3044470"
  },
  {
    "text": "every successful recompile and a red box for one successful recompile so if I",
    "start": "3044470",
    "end": "3052360"
  },
  {
    "text": "click into other file here in the results you can see in the diff that",
    "start": "3052360",
    "end": "3057790"
  },
  {
    "text": "I've actually generated incorrect C++ I've put the Const after the ampersand",
    "start": "3057790",
    "end": "3063040"
  },
  {
    "text": "it needs to go before so this is where we would iterate fix up our code and we",
    "start": "3063040",
    "end": "3071020"
  },
  {
    "text": "would do that all in all in this tool without recompiling count Rd until we",
    "start": "3071020",
    "end": "3078160"
  },
  {
    "text": "actually have a working tool and then you would fall we have to rewrite that in C++ but you know you sorry you would",
    "start": "3078160",
    "end": "3087250"
  },
  {
    "text": "only after we rewrite that in C++ if you want to repeatedly on this code what I",
    "start": "3087250",
    "end": "3093910"
  },
  {
    "text": "have here are very is writing the con correct code and I can write out all of",
    "start": "3093910",
    "end": "3099790"
  },
  {
    "text": "the files there with this button and",
    "start": "3099790",
    "end": "3106330"
  },
  {
    "text": "that has changed my code so I can verify that in the git repo",
    "start": "3106330",
    "end": "3112080"
  },
  {
    "text": "so success aside from this part and like I said with stuff like that you would",
    "start": "3125869",
    "end": "3132319"
  },
  {
    "text": "alright we you would either decide to fix it up manually or fix up your tool it's really up to you depending on how",
    "start": "3132319",
    "end": "3138229"
  },
  {
    "text": "much it's worth it okay so just one last thing about this",
    "start": "3138229",
    "end": "3147829"
  },
  {
    "text": "when I was blogging about creating client ID tools I was blogging on the",
    "start": "3147829",
    "end": "3156049"
  },
  {
    "text": "Microsoft platform because I was working at Microsoft at the time and one of the",
    "start": "3156049",
    "end": "3161059"
  },
  {
    "text": "comments that I got on the blog was that clang sounds like a Klingon general and when I started writing this tool I",
    "start": "3161059",
    "end": "3168349"
  },
  {
    "text": "thought well I want to I want success you know in my refactoring efforts and",
    "start": "3168349",
    "end": "3173390"
  },
  {
    "text": "so I thought well King on generals and Klingons and success you know what'll I",
    "start": "3173390",
    "end": "3178549"
  },
  {
    "text": "call it of course it's qapla so hopefully that'll become available to",
    "start": "3178549",
    "end": "3184910"
  },
  {
    "text": "everyone in the next few months so just",
    "start": "3184910",
    "end": "3191269"
  },
  {
    "text": "a few slides that I had to well things",
    "start": "3191269",
    "end": "3196940"
  },
  {
    "text": "you might encounter when trying to gate will create your own tools you should",
    "start": "3196940",
    "end": "3202069"
  },
  {
    "text": "focus on expressions you have a lot more",
    "start": "3202069",
    "end": "3207440"
  },
  {
    "text": "expressions in your code and they tend to vary a lot more so when you're",
    "start": "3207440",
    "end": "3212599"
  },
  {
    "text": "running your automated tool focus on where the expressions are different and try to capture as much of that as you",
    "start": "3212599",
    "end": "3219229"
  },
  {
    "text": "can get familiar with all of the clang ast classes the there are a lot of them",
    "start": "3219229",
    "end": "3225499"
  },
  {
    "text": "the API documentation is online so typically if you google one of them you get the right result and they have",
    "start": "3225499",
    "end": "3233269"
  },
  {
    "text": "diagrams and everything so you can port",
    "start": "3233269",
    "end": "3239029"
  },
  {
    "text": "expressions in that way porting types is generally easy because you just specify",
    "start": "3239029",
    "end": "3244099"
  },
  {
    "text": "a string for whatever type it is that you care about so just again to",
    "start": "3244099",
    "end": "3250779"
  },
  {
    "text": "emphasize a point here about about her ast types and ast matchers the call",
    "start": "3250779",
    "end": "3257930"
  },
  {
    "text": "expressions in this source code there's only one bar and the function",
    "start": "3257930",
    "end": "3263119"
  },
  {
    "text": "decals there are three and if we're writing ast matchers the way we get from",
    "start": "3263119",
    "end": "3269660"
  },
  {
    "text": "the call expressions to the function deco is by using Kali",
    "start": "3269660",
    "end": "3274700"
  },
  {
    "text": "but unfortunately it's not so consistent so if I'm interested in the expressions",
    "start": "3274700",
    "end": "3281599"
  },
  {
    "text": "which reference declarations which typically you would use for variables here are all of those so they're",
    "start": "3281599",
    "end": "3288320"
  },
  {
    "text": "referencing existing variables said variables are circled here and if you're",
    "start": "3288320",
    "end": "3296990"
  },
  {
    "text": "interested in you know some attribute of a variable when you have a deck of F",
    "start": "3296990",
    "end": "3302210"
  },
  {
    "text": "expert what you use is to color so you know you might be interested in",
    "start": "3302210",
    "end": "3308270"
  },
  {
    "text": "variables so this expression and then say I'm only care about it if it's a use",
    "start": "3308270",
    "end": "3314990"
  },
  {
    "text": "of a variable called I whatever so unfortunately there's this kind of",
    "start": "3314990",
    "end": "3320869"
  },
  {
    "text": "inconsistency in those those matters and you'll just kind of have to get use of",
    "start": "3320869",
    "end": "3326420"
  },
  {
    "text": "those for now perhaps we can fix those I'd like to make them all just two so",
    "start": "3326420",
    "end": "3331609"
  },
  {
    "text": "that two is always the right thing to write so here again is the the work flow",
    "start": "3331609",
    "end": "3343790"
  },
  {
    "text": "diagram basically if I to create a cantar D tool with the GUI that I showed you hopefully it just gets a bit smaller",
    "start": "3343790",
    "end": "3350900"
  },
  {
    "text": "so somebody's trying to photograph that with the GUI that I showed you hopefully",
    "start": "3350900",
    "end": "3357560"
  },
  {
    "text": "you'll just you'll do the same thing but with quicker iterations you won't have to recompile and tidy all the time you",
    "start": "3357560",
    "end": "3363680"
  },
  {
    "text": "won't have to write C++ code so you'll just really do the same thing without",
    "start": "3363680",
    "end": "3369770"
  },
  {
    "text": "all of the slowness so yeah I hope I've shown you that large refactorings are",
    "start": "3369770",
    "end": "3376819"
  },
  {
    "text": "possible in your code for your bespoke needs which nobody has thought about",
    "start": "3376819",
    "end": "3382069"
  },
  {
    "text": "before on the tooling for that there's already good tooling available there's",
    "start": "3382069",
    "end": "3387109"
  },
  {
    "text": "better tooling hopefully coming down the line so you don't have to be sort of",
    "start": "3387109",
    "end": "3392990"
  },
  {
    "text": "afraid of doing this kind of stuff in your code so cantar D is used to do that",
    "start": "3392990",
    "end": "3399650"
  },
  {
    "text": "client query is used to discover you can use the reference for all of the matters",
    "start": "3399650",
    "end": "3406640"
  },
  {
    "text": "and for all of the con classes and you can distribute your workload in order to actually make it faster to run using a",
    "start": "3406640",
    "end": "3414140"
  },
  {
    "text": "build distribution system like ice cream that's all I have if you interested",
    "start": "3414140",
    "end": "3421730"
  },
  {
    "text": "there is time for questions you can see my blog you can use my compiler Explorer",
    "start": "3421730",
    "end": "3427250"
  },
  {
    "text": "website and you can use stack overflow of to use these things as well so I'm I'm looking at the clang ast matchers",
    "start": "3427250",
    "end": "3433820"
  },
  {
    "text": "tag and I'm always interested in pointing out to people how to discover",
    "start": "3433820",
    "end": "3439100"
  },
  {
    "text": "answers to those questions so I'll just",
    "start": "3439100",
    "end": "3448130"
  },
  {
    "text": "let people parse that to to decide what to do next so are there any questions",
    "start": "3448130",
    "end": "3458350"
  },
  {
    "text": "question is why JavaScript the reason is cute has bindings for JavaScript so cute",
    "start": "3460090",
    "end": "3468050"
  },
  {
    "text": "has a JavaScript engine and it was easy for me to create findings to the clang ast which would work with the cube",
    "start": "3468050",
    "end": "3476090"
  },
  {
    "text": "JavaScript engine so that's why JavaScript I could do I could I could do",
    "start": "3476090",
    "end": "3485960"
  },
  {
    "text": "it with Python as well because PI cute exists but I haven't done that yet do",
    "start": "3485960",
    "end": "3492950"
  },
  {
    "text": "you have a suggestion of another language which might be useful C++ well",
    "start": "3492950",
    "end": "3500570"
  },
  {
    "text": "you can't interpret that easily anything else okay",
    "start": "3500570",
    "end": "3511250"
  },
  {
    "text": "for coming I hope you enjoyed today and the rest of the conference",
    "start": "3511250",
    "end": "3517230"
  },
  {
    "text": "[Applause]",
    "start": "3517230",
    "end": "3521789"
  }
]