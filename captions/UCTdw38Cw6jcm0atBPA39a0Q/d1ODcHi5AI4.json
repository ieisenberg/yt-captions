[
  {
    "text": "okay that should be it so let's get started the way you're used to hello",
    "start": "680",
    "end": "6120"
  },
  {
    "text": "everybody I'm Nick that's not going to work because my clicker just died so I'm going to put it on the side and I'm going to go with this hello everybody",
    "start": "6120",
    "end": "13280"
  },
  {
    "text": "I'm Nick in this video no can I mention something by the way um",
    "start": "13280",
    "end": "19080"
  },
  {
    "text": "anyone works for YouTube because the speech recognition things I say I'm",
    "start": "19080",
    "end": "25000"
  },
  {
    "text": "naked I'm actually Nick and in this video I'm not naked in this video I mean",
    "start": "25000",
    "end": "30039"
  },
  {
    "text": "couldn't know because I could have no legs but now you can see I actually do have them uh so lucky you so welcome uh",
    "start": "30039",
    "end": "37960"
  },
  {
    "text": "welcome to NDC London how many of you are here for the first time in NDC London fantastic and how many of you",
    "start": "37960",
    "end": "45120"
  },
  {
    "text": "have been here before I guess the rest of you but how many of you have been here more than three times wow your",
    "start": "45120",
    "end": "51800"
  },
  {
    "text": "companies are spaying for training amazing mine sent me only once that was fantastic so yeah just a",
    "start": "51800",
    "end": "60039"
  },
  {
    "text": "quick introduction we're here to talk about logging um kind of it will all make sense as I keep going uh but let me",
    "start": "60039",
    "end": "66520"
  },
  {
    "text": "just quickly introduce myself hello everybody my name is Nick chapsas um I make YouTube content primarily after a",
    "start": "66520",
    "end": "72040"
  },
  {
    "text": "career in both as a software engineer um and engineering manager here in London",
    "start": "72040",
    "end": "77080"
  },
  {
    "text": "uh just a quick question how many of you know me from YouTube fantastic those of you who",
    "start": "77080",
    "end": "82200"
  },
  {
    "text": "didn't raise your hand take your phone out right now and subscribe it's it's free and it makes me feel nice and warm",
    "start": "82200",
    "end": "88240"
  },
  {
    "text": "inside I'm a bunch of other things that don't matter and then the last thing does matter because that actually pays the bills I'm a founder and author at",
    "start": "88240",
    "end": "95119"
  },
  {
    "text": "the cost platform called doome train thing Pro site but better okay that's an exaggeration where I'm getting there um",
    "start": "95119",
    "end": "102880"
  },
  {
    "text": "and yeah that's about it enough with the sellout stuff let's go straight into the talk and I want to talk about uh the the",
    "start": "102880",
    "end": "108520"
  },
  {
    "text": "title of the talk a bit because really like you are doing logging wrong let's",
    "start": "108520",
    "end": "114880"
  },
  {
    "text": "let's fix it how do I know you're doing logging wrong and the truth is I actually don't",
    "start": "114880",
    "end": "120520"
  },
  {
    "text": "um and for some of you this talk will be validation that what you're doing right already is the right thing but for many",
    "start": "120520",
    "end": "128399"
  },
  {
    "text": "of you actually you'll see that yeah you you are doing uh something wrong and I",
    "start": "128399",
    "end": "134800"
  },
  {
    "text": "want to go a bit back into why I titled this this talk the way I did because a",
    "start": "134800",
    "end": "140360"
  },
  {
    "text": "few years ago at this point or months ago I was in a different conference um and Rachel Apple who who works for jet",
    "start": "140360",
    "end": "146800"
  },
  {
    "text": "brains um had this keyn note about deceptive patterns and trying to get you to click into things and trying to",
    "start": "146800",
    "end": "153000"
  },
  {
    "text": "advertise things to you and sell things to you and as she was talking about clickbait I thought her monitor will go",
    "start": "153000",
    "end": "158760"
  },
  {
    "text": "like this now what I'm trying to say is that I'm not really clickbait okay maybe",
    "start": "158760",
    "end": "165040"
  },
  {
    "text": "I am click baiting but I'm also really pushing it because in order to get engagement and get a full room like this",
    "start": "165040",
    "end": "171360"
  },
  {
    "text": "you need to thread a fine line between delivering your promise but your promise not to be too exaggerated uh but one",
    "start": "171360",
    "end": "178280"
  },
  {
    "text": "thing you have to know about clickbait is that that it actually works so don't hate the player hate the game so with",
    "start": "178280",
    "end": "185560"
  },
  {
    "text": "all that out of the way let's go in a separate tangent because before I tell you about logging I have to tell you",
    "start": "185560",
    "end": "190720"
  },
  {
    "text": "about people saying that you don't really need logging and yeah they do exist and they also do have very valid",
    "start": "190720",
    "end": "198400"
  },
  {
    "text": "reasons um I don't know if the talk of this individual has happened or not",
    "start": "198400",
    "end": "203440"
  },
  {
    "text": "already maybe it is later and I do highly recommend you go to his talk but I'm talking about an individual code",
    "start": "203440",
    "end": "209840"
  },
  {
    "text": "Martin TW any of you know Martin yeah fantastic speaker very much into",
    "start": "209840",
    "end": "215360"
  },
  {
    "text": "observability um so you can see the parallel you know logging tracing metrics and so on now Martin is very",
    "start": "215360",
    "end": "222879"
  },
  {
    "text": "much uh an advocate and he has pulled it a bit back but he was very much an advocate about you don't need loging at",
    "start": "222879",
    "end": "228920"
  },
  {
    "text": "all do everything with traces do everything with spans do everything with with but don't don't do logging logging",
    "start": "228920",
    "end": "234920"
  },
  {
    "text": "is only good for audit stuff um now I went",
    "start": "234920",
    "end": "240319"
  },
  {
    "text": "in background checked Martin turns out he works for this company called",
    "start": "240319",
    "end": "245720"
  },
  {
    "text": "hanom which is an observability company selling you storage and visualization for uh spans and traces so how",
    "start": "245720",
    "end": "253640"
  },
  {
    "text": "convenient that Martin is trying to to sell you on a dream that ironically",
    "start": "253640",
    "end": "259720"
  },
  {
    "text": "makes him money H so what I was what I want to say is you have to be very",
    "start": "259720",
    "end": "266080"
  },
  {
    "text": "cautious when you see bold claims like you don't need logging uh don't use it",
    "start": "266080",
    "end": "271560"
  },
  {
    "text": "at all um background check people see people because everyone on this stage both me and and anyone else um are here",
    "start": "271560",
    "end": "279880"
  },
  {
    "text": "to sell you something on a completely unrelated note I have this course about logging on my",
    "start": "279880",
    "end": "285720"
  },
  {
    "text": "website for $99.99 you can you can skip this talk",
    "start": "285720",
    "end": "291240"
  },
  {
    "text": "and go somewhere else uh I'm joking of course stay here so let me tell you about what this talk is not about first",
    "start": "291240",
    "end": "298680"
  },
  {
    "text": "because it's very hard to explain what it is about so this talk is not about any of the following services and I want",
    "start": "298680",
    "end": "306160"
  },
  {
    "text": "you to raise your hand if you know these services or ideally if you have used or are using actively those Services uh the",
    "start": "306160",
    "end": "313320"
  },
  {
    "text": "first one is LLY not okay that's a usual one uh SEC",
    "start": "313320",
    "end": "319240"
  },
  {
    "text": "you know the Ser guys made SEC well I see more hands here how about cloudwatch AWS cloudwatch more hands nice how about",
    "start": "319240",
    "end": "327120"
  },
  {
    "text": "Microsoft application insights you sellout everyone's using a isn't it and",
    "start": "327120",
    "end": "333400"
  },
  {
    "text": "then data dog wow you guys are rich you know how",
    "start": "333400",
    "end": "338639"
  },
  {
    "text": "expensive that is you guys are working on a start off or something yeah this I use that and",
    "start": "338639",
    "end": "346360"
  },
  {
    "text": "wow um they need to sit down with us and have a talk about how many logs we're sending because they said you're paying",
    "start": "346360",
    "end": "352520"
  },
  {
    "text": "us too much money have you heard a company selling a product say you're making much too much money at this point",
    "start": "352520",
    "end": "359160"
  },
  {
    "text": "I would have a joke about gcp the cloud platform but I don't think anybody's using it actually any of you using",
    "start": "359160",
    "end": "366639"
  },
  {
    "text": "gcp two of them good one I'm sorry um anyway so the",
    "start": "367080",
    "end": "374120"
  },
  {
    "text": "talk is about this actually the the talk is not about where you're pushing your logs eventually the talk is about um the",
    "start": "374120",
    "end": "380639"
  },
  {
    "text": "code you write to generate logs and we will cover both the built-in log provider but also things like C",
    "start": "380639",
    "end": "388160"
  },
  {
    "text": "log so ultimately this talk is about the cop",
    "start": "388160",
    "end": "393440"
  },
  {
    "text": "I'm going to show you but also at times you're going to think that I'm trying to sell you a performance talk as a logging",
    "start": "393440",
    "end": "400800"
  },
  {
    "text": "talk I need you to understand that at any point is performance the reason why we're doing any of this but the way it",
    "start": "400800",
    "end": "408960"
  },
  {
    "text": "was designed to work my Microsoft is very much and by that I mean the good way of doing things is very much",
    "start": "408960",
    "end": "415400"
  },
  {
    "text": "performance driven because logs are strings and generating Rings is very",
    "start": "415400",
    "end": "421319"
  },
  {
    "text": "very very expensive and the vast majority many of the optimizations that",
    "start": "421319",
    "end": "427560"
  },
  {
    "text": "doet has and and and still having um in its latest versions are optimizing",
    "start": "427560",
    "end": "432879"
  },
  {
    "text": "string allocations uh so ultimately this is all about the real world and I don't want",
    "start": "432879",
    "end": "439879"
  },
  {
    "text": "you think like oh what he's talking about preat optimization I just want to push some logs into some service it's",
    "start": "439879",
    "end": "445720"
  },
  {
    "text": "it's none of that so I want to start this off the right Way by that I mean I",
    "start": "445720",
    "end": "450919"
  },
  {
    "text": "want to ask you a question what is this more specifically what is this supposed",
    "start": "450919",
    "end": "456039"
  },
  {
    "text": "to represent just you can just shout it's fine is it a string a string what",
    "start": "456039",
    "end": "462879"
  },
  {
    "text": "is supposed to represent sorry it's it is it um like",
    "start": "462879",
    "end": "473120"
  },
  {
    "text": "the message information so Microsoft says that this",
    "start": "473120",
    "end": "480400"
  },
  {
    "text": "parameter is supposed to represent the message the",
    "start": "480400",
    "end": "485560"
  },
  {
    "text": "message but it's actually not it's the message template so let's establish this",
    "start": "485560",
    "end": "491840"
  },
  {
    "text": "talks theme because I like themes and in this talk I have a theme of n eight logging rules and the rule number one",
    "start": "491840",
    "end": "498319"
  },
  {
    "text": "that you need to understand is that the message is actually the message template",
    "start": "498319",
    "end": "503720"
  },
  {
    "text": "and it shall be treated as such everything in this talk is around this",
    "start": "503720",
    "end": "508800"
  },
  {
    "text": "idea so uh what I want to do is I want you to raise your hand if when you're logging",
    "start": "508800",
    "end": "514919"
  },
  {
    "text": "you're doing any of the following and by the way this is not a trie question I just need to understand and have you more engaged on this talk I know it's",
    "start": "514919",
    "end": "521080"
  },
  {
    "text": "it's very raise your hand heavy so if you get tired use the other one um so",
    "start": "521080",
    "end": "526279"
  },
  {
    "text": "anyone using string interpolation for logging nice how about uh string",
    "start": "526279",
    "end": "532640"
  },
  {
    "text": "concatenation now that's a bit of a more old school thing because interpolation sort of replaces concatenation but very",
    "start": "532640",
    "end": "538640"
  },
  {
    "text": "good one how about uh the string formatting but with the indexed approach",
    "start": "538640",
    "end": "543800"
  },
  {
    "text": "not the the named approach cool so all of these are bad this was a trap question so I am not to",
    "start": "543800",
    "end": "550720"
  },
  {
    "text": "be trusted for the rest of this talk but this is not to shame anybody because those AR mistakes I've done as well um",
    "start": "550720",
    "end": "558079"
  },
  {
    "text": "and you see them in tons and tons of code bases and they are not really a problem until you actually need to get",
    "start": "558079",
    "end": "565640"
  },
  {
    "text": "some useful information out of your logs and then they do become problem so let's talk about sting interpolation and why",
    "start": "565640",
    "end": "572959"
  },
  {
    "text": "it is really really bad and if you're using it in both the buil-in provider but also a serilog done and in fact Cog",
    "start": "572959",
    "end": "582440"
  },
  {
    "text": "is way better at advertising why you shouldn't be doing that so uh let's have the following now in cop if you want to",
    "start": "582440",
    "end": "588480"
  },
  {
    "text": "have a string you have a string like this uh V message user Nick chaps Justin 30 this talk was written months ago I",
    "start": "588480",
    "end": "595240"
  },
  {
    "text": "didn't just in 30 I'm almost 31 at this point oh my God",
    "start": "595240",
    "end": "600279"
  },
  {
    "text": "I'm getting old anyway if you want to parameterize that string you have something like this",
    "start": "600279",
    "end": "606399"
  },
  {
    "text": "where you say user and then you pass down uh the name and then you pass down the age um and at this point we had",
    "start": "606399",
    "end": "613279"
  },
  {
    "text": "other techniques as well but some people don't know uh because they weren't that functional or useful for example you can",
    "start": "613279",
    "end": "620120"
  },
  {
    "text": "use string. concat to achieve the exact same thing um you pass down the parameters as strings and then they're",
    "start": "620120",
    "end": "625920"
  },
  {
    "text": "concatenated hence why I have a two string on that age parameter over there string. concat will not accept um any",
    "start": "625920",
    "end": "633920"
  },
  {
    "text": "object only strings then you have string. format and that is the indexed format approach where you say that in",
    "start": "633920",
    "end": "640480"
  },
  {
    "text": "position zero I put the first parameter that I have after the string which is name in this case and then age and then",
    "start": "640480",
    "end": "647680"
  },
  {
    "text": "eventually in C 6 or seven I think uh we got string concatenation where you just",
    "start": "647680",
    "end": "653959"
  },
  {
    "text": "put a dollar sign at the beginning and then you have the scy braces and you have name and age and it looks fantastic",
    "start": "653959",
    "end": "660959"
  },
  {
    "text": "it's way shorter way easier to read and I hope we are all using this uh to bring",
    "start": "660959",
    "end": "666839"
  },
  {
    "text": "strings together in cop now one thing you have to know about cop and how the",
    "start": "666839",
    "end": "672440"
  },
  {
    "text": "features were added especially after like cop one or two all the way until 10: and 9 is that uh cop and the",
    "start": "672440",
    "end": "682360"
  },
  {
    "text": "compiler team were very very cautious on how features were added in fact the CLR",
    "start": "682360",
    "end": "687839"
  },
  {
    "text": "the command um sorry the common language runtime which is what is running cop because cop compiles from cop to",
    "start": "687839",
    "end": "695279"
  },
  {
    "text": "intermitted language or iil and then the CLR is picking that iil and that's what is running um they really didn't want to",
    "start": "695279",
    "end": "701839"
  },
  {
    "text": "attach this CLR because the CLR was shipping with a framework and any",
    "start": "701839",
    "end": "706959"
  },
  {
    "text": "mistake on the CLR any potential bug means that it would be virtually impossible to fix it or update it um",
    "start": "706959",
    "end": "714240"
  },
  {
    "text": "automatically without having the user either to download something manually or ship a new set service Park version of",
    "start": "714240",
    "end": "720399"
  },
  {
    "text": "Windows XP I don't know so they were very cautious on how they were adding features and what you need to know is",
    "start": "720399",
    "end": "727040"
  },
  {
    "text": "during this period basically every single feature that was added in cop was added through something called uh",
    "start": "727040",
    "end": "733519"
  },
  {
    "text": "syntactic sugar and string concatenation is no different that's a cocaine joke by",
    "start": "733519",
    "end": "740040"
  },
  {
    "text": "the way so the string sing",
    "start": "740040",
    "end": "745079"
  },
  {
    "text": "interpolation looks like the top thing but actually until C 10 it was converted",
    "start": "745079",
    "end": "750199"
  },
  {
    "text": "behind the scenes to string do format so any code you wrote behind the scenes was",
    "start": "750199",
    "end": "756199"
  },
  {
    "text": "actually compiled like the bottom line and now there's a big problem with string. format and also string. conad um",
    "start": "756199",
    "end": "762760"
  },
  {
    "text": "as a matter of fact and that is this object arrays and also pams the Pam",
    "start": "762760",
    "end": "770199"
  },
  {
    "text": "keyword until very recently I think um and it's getting improved even further actually and our performance issues are",
    "start": "770199",
    "end": "777320"
  },
  {
    "text": "really bad they can mess up your code side note if I go just quickly back um",
    "start": "777320",
    "end": "783959"
  },
  {
    "text": "that's not how strings are compiled anymore we're going to touch on that as well and in this video but if you're in",
    "start": "783959",
    "end": "790320"
  },
  {
    "text": "C 10 or before that's very much true uh for you um also side note to the side",
    "start": "790320",
    "end": "796399"
  },
  {
    "text": "note C now is touching the CLR because of how net is shipped with different um",
    "start": "796399",
    "end": "802560"
  },
  {
    "text": "uh support pches every two months every two weeks sorry um and different LTS and STS versions so things like um generics",
    "start": "802560",
    "end": "810680"
  },
  {
    "text": "on attributes and the virtual abstract static thing on interfaces those are all",
    "start": "810680",
    "end": "816000"
  },
  {
    "text": "uh CLR heavy features so they're not scared anymore now I want to talk about how C",
    "start": "816000",
    "end": "823760"
  },
  {
    "text": "deals with memory just so you can understand why all that parameters and object erase thing is bad and memory is",
    "start": "823760",
    "end": "830519"
  },
  {
    "text": "allocated in two places in cop the stack and the hip",
    "start": "830519",
    "end": "836279"
  },
  {
    "text": "Nick well trust me it all makes",
    "start": "836279",
    "end": "842839"
  },
  {
    "text": "sense so let's take a look at this example that's a stack example now I",
    "start": "842839",
    "end": "849759"
  },
  {
    "text": "know that technically there's more to what I'm going to say behind the things when it comes to to memory and",
    "start": "849759",
    "end": "855079"
  },
  {
    "text": "optimization um but stick to the core thing I know I could be very pedantic and explain every little detail but that",
    "start": "855079",
    "end": "861720"
  },
  {
    "text": "would wouldn't be interesting at least it's interesting to me so you have something like this and we have an",
    "start": "861720",
    "end": "867240"
  },
  {
    "text": "integer age 30 we have a goodd which is a struct and structs and both integers",
    "start": "867240",
    "end": "873440"
  },
  {
    "text": "as well are value types in C and then you have a point Tod that for the",
    "start": "873440",
    "end": "879160"
  },
  {
    "text": "argument for for this argument it is a struct as well and exract again is a value type that contains two parameters",
    "start": "879160",
    "end": "885839"
  },
  {
    "text": "and two integers in this case which are both uh value types so if I was to allocate this in memory I wouldn't have",
    "start": "885839",
    "end": "892480"
  },
  {
    "text": "to go outside of this method because everything in this method is self-contained memory-wise and it's not",
    "start": "892480",
    "end": "898519"
  },
  {
    "text": "leaking into into anything else it is not returned to something it doesn't go anywhere so if I was to take a look at",
    "start": "898519",
    "end": "904320"
  },
  {
    "text": "the memory here I would only need to use a stack and what I would do is I would put the different parameters of this",
    "start": "904320",
    "end": "909880"
  },
  {
    "text": "method and the values in different positions so 30 would go in position zero um the guid value would go in one",
    "start": "909880",
    "end": "917000"
  },
  {
    "text": "and then the parameters in two and three there's a bit of more there but fundamentally that's what's happening",
    "start": "917000",
    "end": "922360"
  },
  {
    "text": "the good thing about this is that the moment we're out of this method the",
    "start": "922360",
    "end": "928199"
  },
  {
    "text": "stack frame which is the frame that contains this information of the stack",
    "start": "928199",
    "end": "933800"
  },
  {
    "text": "um will immediately uh immediately almost immediately pop and disappear this is not garbage collection we will",
    "start": "933800",
    "end": "942519"
  },
  {
    "text": "just dispose that memory we know we don't need it so we just reset it we we don't have to pause the universe of this",
    "start": "942519",
    "end": "948720"
  },
  {
    "text": "app to say nothing move because I need to kill this memory because nothing refers to it but rather I know I'm",
    "start": "948720",
    "end": "955120"
  },
  {
    "text": "outside of this method that needs to use this memory so I'm going to just nullify it now that is a very very",
    "start": "955120",
    "end": "964120"
  },
  {
    "text": "efficient process extremely efficent efficient both allocating this memory",
    "start": "964120",
    "end": "969360"
  },
  {
    "text": "and disposing it now when you take a look at the Heap things are different in this case I have a person class and I",
    "start": "969360",
    "end": "975519"
  },
  {
    "text": "have a point 2D but this point 2D is now a class it is not a struct in this case",
    "start": "975519",
    "end": "982120"
  },
  {
    "text": "both of these things are reference types now reference types are allocated always",
    "start": "982120",
    "end": "987440"
  },
  {
    "text": "on the hip no questions asked now what is the hip the hip is um did you use the",
    "start": "987440",
    "end": "993920"
  },
  {
    "text": "cloak room here I think there's a cloak room when you go and you say take my cloak and they take your cloak and they",
    "start": "993920",
    "end": "999319"
  },
  {
    "text": "give you back a tag that says a number and then you go back and eventually you go and pick it up that's basically the",
    "start": "999319",
    "end": "1005360"
  },
  {
    "text": "Heap so what happens is memory will be allocated in some location you can go",
    "start": "1005360",
    "end": "1010399"
  },
  {
    "text": "ahead as a reference type and do another thing over here and then eventually and then immediately you'll be given a",
    "start": "1010399",
    "end": "1016079"
  },
  {
    "text": "number we call that an address and when you need to get that item back you're going to go back and say I have this",
    "start": "1016079",
    "end": "1021360"
  },
  {
    "text": "address do you have the person object and you're going to get the person object and do something with it now what",
    "start": "1021360",
    "end": "1026400"
  },
  {
    "text": "happens is that reference the the person object in position 0 EB whatever um",
    "start": "1026400",
    "end": "1033760"
  },
  {
    "text": "might be set to null at some point we don't need it anymore it's done we set it to null we move on with our lives if",
    "start": "1033760",
    "end": "1039959"
  },
  {
    "text": "you do that and nothing points back to that address and the value is null then a garbage collection will be eventually",
    "start": "1039959",
    "end": "1047360"
  },
  {
    "text": "um triggered due to memory pressure and that position will be cleared so it can be reused by something else so that's",
    "start": "1047360",
    "end": "1054240"
  },
  {
    "text": "why your memory goes up and down and up and down and up and down in the app and that's how the Heap works the",
    "start": "1054240",
    "end": "1059760"
  },
  {
    "text": "problem with this is that to do this cleanup process um we kind of have to pause the universe everything in your up",
    "start": "1059760",
    "end": "1066960"
  },
  {
    "text": "freezes nothing moves only the garbage collection is running it's picking up things it's disposing them and it's also",
    "start": "1066960",
    "end": "1073080"
  },
  {
    "text": "moving them around to different generations and different locations within the same generation I'm not going to go too deep into um um garbage",
    "start": "1073080",
    "end": "1081120"
  },
  {
    "text": "collection but just so you know it's a very expensive operation so how does cop deal with",
    "start": "1081120",
    "end": "1087520"
  },
  {
    "text": "memory again stack and hip the stack value types can be allocated there they're not always allocated there but",
    "start": "1087520",
    "end": "1094120"
  },
  {
    "text": "they can be allocated there uh local variables and parameters will be allocated there then the stack is very",
    "start": "1094120",
    "end": "1100320"
  },
  {
    "text": "very fast extremely efficient ideally if you want to if you can allocate everything on the stack you can side",
    "start": "1100320",
    "end": "1106240"
  },
  {
    "text": "note you can't allocate massive amounts of data on the stack because the stack has a limit I'm pretty sure there's a",
    "start": "1106240",
    "end": "1111559"
  },
  {
    "text": "website called anyway I can't remember um and then yeah bad thing will happen",
    "start": "1111559",
    "end": "1117600"
  },
  {
    "text": "and then you have uh the amazing attribute that it will automatically disappear when out of scope you don't",
    "start": "1117600",
    "end": "1124080"
  },
  {
    "text": "have to pause the app to to clean it and obviously you can understand if you're making a game for example um or you have",
    "start": "1124080",
    "end": "1129720"
  },
  {
    "text": "a very high throughput application and you're about to kill that guy with that shotgun and the game freezes because you",
    "start": "1129720",
    "end": "1135080"
  },
  {
    "text": "need to clean the memory what you you bet I'll be screaming",
    "start": "1135080",
    "end": "1140159"
  },
  {
    "text": "so the Heap reference types always get allocated there it's a big pool of",
    "start": "1140159",
    "end": "1145360"
  },
  {
    "text": "memory um and it needs to be garbage collected and and micromanaged in a way and boxed values or boxed value types",
    "start": "1145360",
    "end": "1153679"
  },
  {
    "text": "will always get allocated there because they turned into reference type what are box what are value types we're going to",
    "start": "1153679",
    "end": "1159679"
  },
  {
    "text": "see in a second and what is boxing um but first I want to make very very clear",
    "start": "1159679",
    "end": "1165120"
  },
  {
    "text": "that the weight. net is really really fast and by the way uh you probably have seen this it's extremely biased and kind",
    "start": "1165120",
    "end": "1172480"
  },
  {
    "text": "of dishonest uh but Microsoft made it so you can imagine why um but the way they",
    "start": "1172480",
    "end": "1178960"
  },
  {
    "text": "achieve subjectively aspect of this is very much by removing uh Heap",
    "start": "1178960",
    "end": "1185280"
  },
  {
    "text": "allocations they don't necessarily make cop faster they just make cop and net",
    "start": "1185280",
    "end": "1191760"
  },
  {
    "text": "allocate less by default and be more efficient things like Rex things like",
    "start": "1191760",
    "end": "1197200"
  },
  {
    "text": "all the BCL types adding span overloads if you know what span is if you don't know what span is check it out on",
    "start": "1197200",
    "end": "1203880"
  },
  {
    "text": "YouTube I know a guy um so this is very much true to a degree and if you want to",
    "start": "1203880",
    "end": "1209960"
  },
  {
    "text": "know more about how they achieve this and it's very much uh reference type and allocation heavy I had a a chat with",
    "start": "1209960",
    "end": "1215600"
  },
  {
    "text": "stepen to who makes this 200 Page book every year that he calls a Blog which",
    "start": "1215600",
    "end": "1221919"
  },
  {
    "text": "always crashes my Google Chrome but great blog don't read it just read the",
    "start": "1221919",
    "end": "1227960"
  },
  {
    "text": "too long didn't read um in that podcast I pretend like I know what he's talking about as you can",
    "start": "1227960",
    "end": "1233159"
  },
  {
    "text": "clearly see I was blinking by the way I wasn't sleeping um but one of the",
    "start": "1233159",
    "end": "1239520"
  },
  {
    "text": "biggest things he mentioned is boxing what is boxing well boxing is the",
    "start": "1239520",
    "end": "1245440"
  },
  {
    "text": "following and again ignore the fact that the compiler will actually optimize a lot of this out of the equation but",
    "start": "1245440",
    "end": "1251480"
  },
  {
    "text": "let's say we have something like this where we have an integer AG 30 and we return that age now this value over here",
    "start": "1251480",
    "end": "1257640"
  },
  {
    "text": "um how will it be allocated on the stack well I don't really understand Intermediate Language or I but I will",
    "start": "1257640",
    "end": "1264039"
  },
  {
    "text": "show you enough to sort of kind of understand it um it looks like this so",
    "start": "1264039",
    "end": "1269679"
  },
  {
    "text": "that value over there over there will be put in position zero of the stack for an integer so enough M room will be made so",
    "start": "1269679",
    "end": "1276840"
  },
  {
    "text": "an integer can fit in that location and we're going to put that there now what",
    "start": "1276840",
    "end": "1282600"
  },
  {
    "text": "is boxing the same thing as before but I'm implicitly converting that integer to an object now you can do that in cop",
    "start": "1282600",
    "end": "1289760"
  },
  {
    "text": "you can implicitly convert any type to an object because any type can be an object but the thing is if you do",
    "start": "1289760",
    "end": "1297039"
  },
  {
    "text": "something like that what you're going to end up with is the same put this in this position situation but also a box",
    "start": "1297039",
    "end": "1305080"
  },
  {
    "text": "instruction to wrap the value type into an object which is a reference type and",
    "start": "1305080",
    "end": "1310840"
  },
  {
    "text": "then put that basically in a box and on the Heap so not only are you allocating",
    "start": "1310840",
    "end": "1317720"
  },
  {
    "text": "that stack value you're also allocating effectively a copy of that value in into",
    "start": "1317720",
    "end": "1323159"
  },
  {
    "text": "the Hep which is the expensive um memory part of C now there's the opposite of",
    "start": "1323159",
    "end": "1329480"
  },
  {
    "text": "this because yeah you put it in a box eventually you might need it back if you put something in a box you have to also",
    "start": "1329480",
    "end": "1335200"
  },
  {
    "text": "unbox it so all of these processes take time not only do they take time they",
    "start": "1335200",
    "end": "1341200"
  },
  {
    "text": "also require garbage collection so tons of garbage generated",
    "start": "1341200",
    "end": "1347200"
  },
  {
    "text": "with small things like this small innocent looking value types that eventually get boxed you have a ton of",
    "start": "1347200",
    "end": "1353840"
  },
  {
    "text": "boxing and then you have a ton of strings out of this equation as well especially if you use string interpolation or concatenation or",
    "start": "1353840",
    "end": "1360440"
  },
  {
    "text": "formatting uh more boxing means more hper locations more work to to set and",
    "start": "1360440",
    "end": "1365600"
  },
  {
    "text": "retrieve values which means more gabs collections triggered which means more pausing to clean things up and you end",
    "start": "1365600",
    "end": "1371240"
  },
  {
    "text": "up with a very inconsistent running uh application or API and then more strings",
    "start": "1371240",
    "end": "1376799"
  },
  {
    "text": "mean more location more garbage pausing but Nick string allocated uh string",
    "start": "1376799",
    "end": "1382240"
  },
  {
    "text": "interpolated handlers fixed that and that is kind of true let's take a look",
    "start": "1382240",
    "end": "1388039"
  },
  {
    "text": "at what string interpolation handlers are and I think they were introduced in C",
    "start": "1388039",
    "end": "1393639"
  },
  {
    "text": "10 so string interpolated handlers or interpolation handlers do the following",
    "start": "1394919",
    "end": "1400960"
  },
  {
    "text": "remember this would be turned into a string dot um format behind the scenes well C is like we can't have that",
    "start": "1400960",
    "end": "1408120"
  },
  {
    "text": "because that is boxing a ton and is generating ton of memory for every string in this application so people",
    "start": "1408120",
    "end": "1414880"
  },
  {
    "text": "that used string interpolation end up with inefficient code so how do we fix that well you fix it by writing tons of",
    "start": "1414880",
    "end": "1422360"
  },
  {
    "text": "code behind the scenes tons of optimized code behind the scenes on the behalf of the developer so this is still lowering",
    "start": "1422360",
    "end": "1428559"
  },
  {
    "text": "but instead of going to string. format you go to a default interpolated string Handler with a very specific uh size of",
    "start": "1428559",
    "end": "1436760"
  },
  {
    "text": "string literals 9 uh string characters and then two represents the parameters",
    "start": "1436760",
    "end": "1442200"
  },
  {
    "text": "which is the name as a string and the age as a number or an",
    "start": "1442200",
    "end": "1448039"
  },
  {
    "text": "integer now what is the benefit of this well you might be able to see it over uh",
    "start": "1448039",
    "end": "1454520"
  },
  {
    "text": "on the not the last line the line above the last line the appended for append formatted for the integer is using a",
    "start": "1454520",
    "end": "1461919"
  },
  {
    "text": "generic integer value generics when used don't allow the value to be allocate to",
    "start": "1461919",
    "end": "1469399"
  },
  {
    "text": "be uh boxed so they basically say this is an integer take it as an integer and",
    "start": "1469399",
    "end": "1474679"
  },
  {
    "text": "use it as an integer so it's not going to be put in a box it's not going to go anywhere so Microsoft is writing",
    "start": "1474679",
    "end": "1480000"
  },
  {
    "text": "optimized code for us behind the scenes to prevent you from writing inefficient code the string one doesn't matter",
    "start": "1480000",
    "end": "1485840"
  },
  {
    "text": "because the string is a string is a string it's going to be added and formatted um into that uh parameter but",
    "start": "1485840",
    "end": "1491960"
  },
  {
    "text": "what this means is you're going to have no boxing at all and the default interpolated string Handler um is a ref",
    "start": "1491960",
    "end": "1499480"
  },
  {
    "text": "struct so it's not going to be allocated on the Heap to so you're going to",
    "start": "1499480",
    "end": "1505679"
  },
  {
    "text": "prevent all the boxing and you're also going to prevent an extra unique string",
    "start": "1505679",
    "end": "1511720"
  },
  {
    "text": "per log entry which is taking it all back to the login situation because",
    "start": "1511720",
    "end": "1516840"
  },
  {
    "text": "let's say you're loging with three interpolation um sorry you will still have an extra log entry is what I want",
    "start": "1516840",
    "end": "1523080"
  },
  {
    "text": "to say you prevent the boxing but you still have an extra log entry if you use Str interpolation because you're going",
    "start": "1523080",
    "end": "1528200"
  },
  {
    "text": "to generate one unique string per combination of parameters and guids are",
    "start": "1528200",
    "end": "1534080"
  },
  {
    "text": "supposed to be unique globally unique um so if you use them in a log as a string",
    "start": "1534080",
    "end": "1539279"
  },
  {
    "text": "tool parameter you're going to have always a unique string allocated and I don't know how many characters this is",
    "start": "1539279",
    "end": "1545399"
  },
  {
    "text": "but think of like a bite per character and then depending on your throughput you're going to have so so so many um",
    "start": "1545399",
    "end": "1552880"
  },
  {
    "text": "strings allocated with every single combination now if we go and visual ize",
    "start": "1552880",
    "end": "1558799"
  },
  {
    "text": "this it will look something like this all this application is doing by the way and I'm going to explain what you're",
    "start": "1558799",
    "end": "1564640"
  },
  {
    "text": "looking at if you're like what the hell is this um all this application is doing is it is just logging it's just in a",
    "start": "1564640",
    "end": "1571120"
  },
  {
    "text": "loop logging logging logging loog Lo so it is allocating all the way to 16 megabytes and then you can see a micro",
    "start": "1571120",
    "end": "1578320"
  },
  {
    "text": "pause over here in this red that is time your application is doing nothing but",
    "start": "1578320",
    "end": "1584320"
  },
  {
    "text": "collecting memory so it goes all the way up and down all the way up and down on the way up and down and you can see that",
    "start": "1584320",
    "end": "1590080"
  },
  {
    "text": "the only thing that's being allocated are strings because you don't have a gradual increase on anything else it is",
    "start": "1590080",
    "end": "1595799"
  },
  {
    "text": "just Heap generation zero which again very efficient generation of garbage of memory but it doesn't mean it is free or",
    "start": "1595799",
    "end": "1603120"
  },
  {
    "text": "cheap you're still doing something you could have prevented if you use message templates correctly so rule number two I",
    "start": "1603120",
    "end": "1613000"
  },
  {
    "text": "shall not use string interpolation or string concatenation ever in the message",
    "start": "1613000",
    "end": "1619679"
  },
  {
    "text": "template but what should you use instead right it's good to tell you what the problem is but I need to give you a",
    "start": "1619679",
    "end": "1625880"
  },
  {
    "text": "solution H that let's fix it so let's introduce structured logging and of you",
    "start": "1625880",
    "end": "1632679"
  },
  {
    "text": "know what structured logging is have heard the term yeah fantastic well you're in the right room so consider the",
    "start": "1632679",
    "end": "1638960"
  },
  {
    "text": "following we have again a logger.log method where we have string interpolation ID and status as",
    "start": "1638960",
    "end": "1646120"
  },
  {
    "text": "parameters now I'm going to use everyone's favorite metrics and log collector in",
    "start": "1646120",
    "end": "1652720"
  },
  {
    "text": "the universe which is of course application insights you sell out again and I'm going to have something like",
    "start": "1652720",
    "end": "1658279"
  },
  {
    "text": "this which is a bunch of entries with combinations of different IDs and",
    "start": "1658279",
    "end": "1663919"
  },
  {
    "text": "statuses so when my manager comes and and they",
    "start": "1663919",
    "end": "1669880"
  },
  {
    "text": "say hey Nick we had a big incident on Friday because we deployed to production after 5:00 p.m. true story and we need",
    "start": "1669880",
    "end": "1678360"
  },
  {
    "text": "to go and find all the canceled payments because they were canceled accidentally and we need to refund some uh get some",
    "start": "1678360",
    "end": "1684039"
  },
  {
    "text": "information so we can refund some mer merchants and I say that is fine I'll",
    "start": "1684039",
    "end": "1689640"
  },
  {
    "text": "find uh all Cel payments because I can see from those logs they all end with",
    "start": "1689640",
    "end": "1695000"
  },
  {
    "text": "the status so all I need to do is go and say oh traces where message end with",
    "start": "1695000",
    "end": "1702200"
  },
  {
    "text": "cancelled and then I'm going to order by time stamp and we're going to be good and my moniter will be really",
    "start": "1702200",
    "end": "1707960"
  },
  {
    "text": "really happy I'm going to get the pay rise in my dreams now they come back",
    "start": "1707960",
    "end": "1714159"
  },
  {
    "text": "because something happened again we deployed in production again on a Saturday this time and they say hey tell",
    "start": "1714159",
    "end": "1719320"
  },
  {
    "text": "me what happened to um the payment with ID whatever it is until it was cancelled",
    "start": "1719320",
    "end": "1725480"
  },
  {
    "text": "now I do want to remind you all I have to go with is this so what I might end",
    "start": "1725480",
    "end": "1731880"
  },
  {
    "text": "up doing is write some very complex rejects to try and isolate the ID and pause it then return it and retrieve it",
    "start": "1731880",
    "end": "1738240"
  },
  {
    "text": "But ultimately it's going to be really really sad now what I want to do is do the following instead of using string",
    "start": "1738240",
    "end": "1744519"
  },
  {
    "text": "interpolation I'm going to use a structured log I'm going to use the message template as it's supposed to be",
    "start": "1744519",
    "end": "1751240"
  },
  {
    "text": "used so there is no dollar sign as you can see over there at the top I still have the highlighting because my ID will",
    "start": "1751240",
    "end": "1758399"
  },
  {
    "text": "recognize that parameter as a message template parameter and I'm going to put the payment ID and the status as",
    "start": "1758399",
    "end": "1765679"
  },
  {
    "text": "parameters in the template and then I'm going to pass them as parameters in the same way I did before ID and status and",
    "start": "1765679",
    "end": "1773559"
  },
  {
    "text": "if I do that what's going to end up being pushed into application insights is still the exact same thing so payment",
    "start": "1773559",
    "end": "1780960"
  },
  {
    "text": "with ID failed because whatever whatever whatever now if I click on any of these",
    "start": "1780960",
    "end": "1788080"
  },
  {
    "text": "logs which isn't something I could do before with that granularity and information is I can get the following I",
    "start": "1788080",
    "end": "1796519"
  },
  {
    "text": "have not only the category name connection ID and all that which I had before but I also have the original",
    "start": "1796519",
    "end": "1802480"
  },
  {
    "text": "format of that log and I also have the payment ID and the payment status as",
    "start": "1802480",
    "end": "1807519"
  },
  {
    "text": "individual values uh in application insights those are called dimensions and those are custom Dimensions uh but any",
    "start": "1807519",
    "end": "1814240"
  },
  {
    "text": "other login provider and log Dumping Ground ever has the exact same feature",
    "start": "1814240",
    "end": "1820679"
  },
  {
    "text": "which means I can now go back and say traces where custom dimensions. payment status is cancelled and I'm going to get",
    "start": "1820679",
    "end": "1827640"
  },
  {
    "text": "back all the the IDS I can then isolate the ID because I can isolate that payment ID from the parameter can take",
    "start": "1827640",
    "end": "1833559"
  },
  {
    "text": "that take to my manager and everyone's happy now uh you can do other things as well",
    "start": "1833559",
    "end": "1840000"
  },
  {
    "text": "you can use original format you can use the event ID which in my opinion is recommended because the original format",
    "start": "1840000",
    "end": "1845799"
  },
  {
    "text": "can change and the event ID hopefully doesn't change but I do hear someone over there",
    "start": "1845799",
    "end": "1852880"
  },
  {
    "text": "saying uh Nick this is still boxing right you yes you you will still box",
    "start": "1852880",
    "end": "1859559"
  },
  {
    "text": "because the ID and the status are still value types that will be put in a box",
    "start": "1859559",
    "end": "1864679"
  },
  {
    "text": "because they're passed as an object array parameters and that is true but it does",
    "start": "1864679",
    "end": "1870200"
  },
  {
    "text": "mean I'm only going to allocate a single string I'm not going to have to allocate the computer string and lose those",
    "start": "1870200",
    "end": "1876639"
  },
  {
    "text": "parameters instead I'm going to allocate one string for everything and by the way",
    "start": "1876639",
    "end": "1882000"
  },
  {
    "text": "this string will be reused across my entire application because it is a string literal and will be interned into",
    "start": "1882000",
    "end": "1889480"
  },
  {
    "text": "the application which means that it's going to be allocated once in the beginning of the application and then everything that needs it will say what's",
    "start": "1889480",
    "end": "1895960"
  },
  {
    "text": "the address for that string and it's going to be reused I'm not going to have it once every single time that is not",
    "start": "1895960",
    "end": "1901279"
  },
  {
    "text": "something you can do with all of the other computed strings if I go back here",
    "start": "1901279",
    "end": "1906919"
  },
  {
    "text": "to show you what I mean each string allocated here will be allocated once",
    "start": "1906919",
    "end": "1912279"
  },
  {
    "text": "and it won't be interned one of the biggest misconceptions is that once you",
    "start": "1912279",
    "end": "1917480"
  },
  {
    "text": "allocate a string even if it's computed if it has the exact same value again",
    "start": "1917480",
    "end": "1923000"
  },
  {
    "text": "you're going to use the same string again that's know how it works it's only true for compile time string literals",
    "start": "1923000",
    "end": "1929720"
  },
  {
    "text": "and yes you can use string do intern to eagerly intern a string but you have to be very careful with what you're doing",
    "start": "1929720",
    "end": "1936320"
  },
  {
    "text": "it is a very expensive operation to do if we go back all the way here we're",
    "start": "1936320",
    "end": "1941960"
  },
  {
    "text": "going to accept the fact that yes this will box so rule number three I shall use",
    "start": "1941960",
    "end": "1950159"
  },
  {
    "text": "structur logging and give good names to my parameters that's also extremely",
    "start": "1950159",
    "end": "1955200"
  },
  {
    "text": "important because you don't want these parameters the payment ID and payment status to just be for example ID and",
    "start": "1955200",
    "end": "1962200"
  },
  {
    "text": "status because they're Universal in that application Insight instance so if you have a payment ID and you have an order",
    "start": "1962200",
    "end": "1968600"
  },
  {
    "text": "ID and then you have an a basket ID and whatever and you say that all of them are IDs in your structur logs you have",
    "start": "1968600",
    "end": "1975880"
  },
  {
    "text": "no information to filter them so choose a name and have that name be",
    "start": "1975880",
    "end": "1982679"
  },
  {
    "text": "consistent throughout your application and I would argue if you have a distributed system have it be Universal",
    "start": "1982679",
    "end": "1988840"
  },
  {
    "text": "with your distributed system if you need to store it somewhere globally and put it in your Logs with",
    "start": "1988840",
    "end": "1994440"
  },
  {
    "text": "concatenation Do It um and because it's a constant it is not a unique string so you won't allocate multiple times so use",
    "start": "1994440",
    "end": "2002039"
  },
  {
    "text": "good names to your parameters and have them be uh uniquely identifiable and global now some of you I'm sure will say",
    "start": "2002039",
    "end": "2010960"
  },
  {
    "text": "but Nick I'm using Cog in fact how many of you are using Cog yeah fantastic um I",
    "start": "2010960",
    "end": "2017159"
  },
  {
    "text": "was using Cog until a year ago when Microsoft got the together with the built-in logger um but s log is",
    "start": "2017159",
    "end": "2024399"
  },
  {
    "text": "fantastic because s log allows you to have this concept of syns which the building provider also has but it has",
    "start": "2024399",
    "end": "2032480"
  },
  {
    "text": "way more syns to push your data into so you don't have to write code for cloud War and this and this and this and data",
    "start": "2032480",
    "end": "2040440"
  },
  {
    "text": "dog so yeah so let's take a look at the two ways of using Cog first you have the",
    "start": "2040440",
    "end": "2048440"
  },
  {
    "text": "raw Cog ey logger where you just go ey logger um new log configuration you load",
    "start": "2048440",
    "end": "2054599"
  },
  {
    "text": "some configuration you create a logger and then you register that into your dependency injection container and then",
    "start": "2054599",
    "end": "2060000"
  },
  {
    "text": "you inject it and reuse it what you can also have which is what I've seen",
    "start": "2060000",
    "end": "2065079"
  },
  {
    "text": "especially in ASP cor the most preferred approach is you have the S log. extensions.",
    "start": "2065079",
    "end": "2070480"
  },
  {
    "text": "logging package which allows you to set the global logger and then you can say",
    "start": "2070480",
    "end": "2076280"
  },
  {
    "text": "add logging add seril log and what this is doing behind the scenes is it is adding seril log as effectively a mware",
    "start": "2076280",
    "end": "2084358"
  },
  {
    "text": "it is a registering serilog as a provider so you still go through the built-in logger but you go from that to",
    "start": "2084359",
    "end": "2090919"
  },
  {
    "text": "serilog and then from s log to its syns it is fairly inefficient because",
    "start": "2090919",
    "end": "2097800"
  },
  {
    "text": "that process can be as efficient as its least efficient uh pipeline part which",
    "start": "2097800",
    "end": "2104280"
  },
  {
    "text": "until recently was the Microsoft logger but it is very easy especially if you need to wire up um s log into an",
    "start": "2104280",
    "end": "2110760"
  },
  {
    "text": "existing application now Cog was famous for",
    "start": "2110760",
    "end": "2115960"
  },
  {
    "text": "popularizing the concept of structural logging or semantic logging um and also",
    "start": "2115960",
    "end": "2121200"
  },
  {
    "text": "it was famous for preventing boxing from the get-go because as you can see all of",
    "start": "2121200",
    "end": "2127960"
  },
  {
    "text": "methods are using generics so they didn't give you an object array of",
    "start": "2127960",
    "end": "2133359"
  },
  {
    "text": "parameters instead what they did is they said okay how many parameters can you possibly pass in there like eight sure",
    "start": "2133359",
    "end": "2140440"
  },
  {
    "text": "like if you have nine parameters what are you doing but they said okay let's make an overload on all of our logging",
    "start": "2140440",
    "end": "2147200"
  },
  {
    "text": "methods for zero parameters 1 2 3 4 5 all the way to8 and they prevent",
    "start": "2147200",
    "end": "2154480"
  },
  {
    "text": "logging except s log doesn't really prevent it d d done so let's talk about the log level to understand why say log",
    "start": "2154480",
    "end": "2161800"
  },
  {
    "text": "doesn't prevent boxing what is the log level well the log level is the following both the",
    "start": "2161800",
    "end": "2167599"
  },
  {
    "text": "Microsoft logger and the S log logger have this concept of an enum representing how severe that log entry",
    "start": "2167599",
    "end": "2174640"
  },
  {
    "text": "is so in on the Microsoft camp you have traces which is zero um debug",
    "start": "2174640",
    "end": "2179839"
  },
  {
    "text": "information warning error critical critical is the app when kaput and then",
    "start": "2179839",
    "end": "2185119"
  },
  {
    "text": "you have none at the end so if they want to add another one eventually it's going to be after none which is very weird I",
    "start": "2185119",
    "end": "2191720"
  },
  {
    "text": "don't think they will and the reason why none is there in the first place is because the way log levels work is like",
    "start": "2191720",
    "end": "2199640"
  },
  {
    "text": "a threshold so you increase the threshold and if you increase the threshold all the way to none which is",
    "start": "2199640",
    "end": "2205040"
  },
  {
    "text": "above critical you basically log nothing so you go from more granular to less",
    "start": "2205040",
    "end": "2211839"
  },
  {
    "text": "granular um on Cog on the other hand has verbos which is Trace say thing doing it",
    "start": "2211839",
    "end": "2218200"
  },
  {
    "text": "confused debug information warning error and then for critical they have fatal which is a bit Grim in my opinion",
    "start": "2218200",
    "end": "2225680"
  },
  {
    "text": "but it was made by a German developer so I do understand it but what you can do is you can take",
    "start": "2225680",
    "end": "2232680"
  },
  {
    "text": "that and you can assume that any log message you're pushing or Trace you're pushing is associated to a log level in",
    "start": "2232680",
    "end": "2240680"
  },
  {
    "text": "both cases and then if you made any net app ever you would know that you have",
    "start": "2240680",
    "end": "2245760"
  },
  {
    "text": "this uh logging block in your app settings. Json that contains some default log settings for your",
    "start": "2245760",
    "end": "2251640"
  },
  {
    "text": "application and usually if you make an asp cor it looks like this the default is information but the microsoft. hpet",
    "start": "2251640",
    "end": "2258800"
  },
  {
    "text": "core1 is warning which okay let's take a look at the",
    "start": "2258800",
    "end": "2264520"
  },
  {
    "text": "Microsoft logger I'm going to go back to that point a bit later the Microsoft logger says that okay you have this",
    "start": "2264520",
    "end": "2270800"
  },
  {
    "text": "parameters object array at the very top but then if the log level is not enabled",
    "start": "2270800",
    "end": "2276760"
  },
  {
    "text": "which means that the threshold is not met to allow the log to pass through for",
    "start": "2276760",
    "end": "2281800"
  },
  {
    "text": "example if it's information you have log debug it can't go anywhere because it's it's debug and you have information as",
    "start": "2281800",
    "end": "2288599"
  },
  {
    "text": "your threshold then it is not going to allow it it's going to return early but you're",
    "start": "2288599",
    "end": "2295480"
  },
  {
    "text": "still going to box those values because the method has that parameters object there so yeah you're preventing the",
    "start": "2295480",
    "end": "2302040"
  },
  {
    "text": "action of pushing this somewhere but even if the log level is not enabled you",
    "start": "2302040",
    "end": "2307160"
  },
  {
    "text": "still going to box those parameters Cog on the other hand has a different approach they made all of those",
    "start": "2307160",
    "end": "2313640"
  },
  {
    "text": "overloads like I said but instead what they chose to do is yeah they still have the is enabled log level thing and",
    "start": "2313640",
    "end": "2321359"
  },
  {
    "text": "eventually yes they will as you can see box those parameters into an object",
    "start": "2321359",
    "end": "2327520"
  },
  {
    "text": "array but the benefit of this is that they will only box them if you actually need to use that log entry and if you do",
    "start": "2327520",
    "end": "2335079"
  },
  {
    "text": "use that log entry well the least of your concerns is the boxing because the",
    "start": "2335079",
    "end": "2340800"
  },
  {
    "text": "act of logging and putting this into a list and reusing it later is way more expensive than the object array you're",
    "start": "2340800",
    "end": "2346560"
  },
  {
    "text": "going to allocate so ultimately this is all about preventing a necessary work now you can",
    "start": "2346560",
    "end": "2351680"
  },
  {
    "text": "do the same thing if you want to you can make your own log payment failed method and you can pass down the logger the the",
    "start": "2351680",
    "end": "2357280"
  },
  {
    "text": "ID and the status as compile time parameters and then in your method",
    "start": "2357280",
    "end": "2362960"
  },
  {
    "text": "you're going to have your log information method which then means you can do something like this you can say",
    "start": "2362960",
    "end": "2369280"
  },
  {
    "text": "if the log level is enabled return early now am I saying you should go ahead and do this for every single one of your",
    "start": "2369280",
    "end": "2374839"
  },
  {
    "text": "logs God know it's very convoluted it's way too much but if you have an extremely hot path with many many many",
    "start": "2374839",
    "end": "2381720"
  },
  {
    "text": "logs that you really really need then rule number four four you shall consider",
    "start": "2381720",
    "end": "2388440"
  },
  {
    "text": "boxing or prevent unnecessary boxing uh for inactive log",
    "start": "2388440",
    "end": "2394599"
  },
  {
    "text": "levels and I'm going to smooth myself into the next point because the net team",
    "start": "2394599",
    "end": "2400760"
  },
  {
    "text": "has been really hard at work um because they made a few net versions ago the the",
    "start": "2400760",
    "end": "2406240"
  },
  {
    "text": "log the logging Source generator now Source generators were introduced in Net",
    "start": "2406240",
    "end": "2411760"
  },
  {
    "text": "5 in cop andet and what they do is they can take some information for example an",
    "start": "2411760",
    "end": "2418079"
  },
  {
    "text": "attribute as you can see over here and then the level and the message template",
    "start": "2418079",
    "end": "2423240"
  },
  {
    "text": "which they still called message even though they know it's the message template which I like because they are",
    "start": "2423240",
    "end": "2429319"
  },
  {
    "text": "wrong but they're consistently wrong which you know if you want to do",
    "start": "2429319",
    "end": "2434400"
  },
  {
    "text": "something you know do it do it bad but consistently uh and then you can make",
    "start": "2434400",
    "end": "2439440"
  },
  {
    "text": "this static partial void method without anybody there's a semicolon at the end of this line and then you can still go",
    "start": "2439440",
    "end": "2446960"
  },
  {
    "text": "ahead and say logger do log payment error and pass ID and status as parameters because behind the scenes the",
    "start": "2446960",
    "end": "2454160"
  },
  {
    "text": "logger or the logger Source generator will go ahead and implement M that method for you so what you're going to",
    "start": "2454160",
    "end": "2459599"
  },
  {
    "text": "end up is something like this you're still going to have event ID event name",
    "start": "2459599",
    "end": "2465160"
  },
  {
    "text": "uh the message but you're also going to have the payment ID and you're also going to have the payment",
    "start": "2465160",
    "end": "2471359"
  },
  {
    "text": "status so why is this so awesome well it's so awesome because what's going to",
    "start": "2471359",
    "end": "2476800"
  },
  {
    "text": "happen behind the scenes is this and this is code you didn't have to write all the code you had to write is that",
    "start": "2476800",
    "end": "2482200"
  },
  {
    "text": "one line of code and then put an attribute on it so let's take a deeper look into what going on here because I",
    "start": "2482200",
    "end": "2488640"
  },
  {
    "text": "can understand this is quite a lot so first we have to see that yeah",
    "start": "2488640",
    "end": "2497160"
  },
  {
    "text": "Microsoft says Nick is in fact right you should be checking your log level to see",
    "start": "2497160",
    "end": "2502359"
  },
  {
    "text": "if it's enabled or not then what they're going to do is only in that case go on",
    "start": "2502359",
    "end": "2508040"
  },
  {
    "text": "and call that log call back and I should point out there's no boxing allation because you have a compil time uh",
    "start": "2508040",
    "end": "2514319"
  },
  {
    "text": "parameter you don't even need generics for something like this now that log callback as you can see over here is a",
    "start": "2514319",
    "end": "2521040"
  },
  {
    "text": "static readon action which means it's a cached thing on Startup and it's going",
    "start": "2521040",
    "end": "2526160"
  },
  {
    "text": "to be reused it acts like a method in in terms of your application and there's an action that is using generics and",
    "start": "2526160",
    "end": "2533040"
  },
  {
    "text": "generics are not boxing now that method is using logger message. Define which by",
    "start": "2533040",
    "end": "2539160"
  },
  {
    "text": "the way even before Net 5 this is how Microsoft was creating logs behind the",
    "start": "2539160",
    "end": "2544359"
  },
  {
    "text": "scenes for them because I needed them to be very very efficient now they just made the process of making those logs",
    "start": "2544359",
    "end": "2550800"
  },
  {
    "text": "and enabling them at public to everyone so you have the logger message. Define it has two generic parameters and then",
    "start": "2550800",
    "end": "2557839"
  },
  {
    "text": "everything is passed in as you can see over there super efficient code you you can",
    "start": "2557839",
    "end": "2563760"
  },
  {
    "text": "technically write manually but you don't have to um and even if we go inside this",
    "start": "2563760",
    "end": "2570359"
  },
  {
    "text": "um um method deeper to see what's going on you'll see that the log values for",
    "start": "2570359",
    "end": "2575440"
  },
  {
    "text": "matter tailored for this log message was made and you have the log method which",
    "start": "2575440",
    "end": "2581839"
  },
  {
    "text": "behind the scenes is doing a second check if it's needed um and then it's using a log values object which is a",
    "start": "2581839",
    "end": "2587640"
  },
  {
    "text": "stke which doesn't uh allocate so basically extremely fast so if you do",
    "start": "2587640",
    "end": "2594440"
  },
  {
    "text": "need to have extremely efficient login in your hot paths then you shall consider using Source generated",
    "start": "2594440",
    "end": "2602839"
  },
  {
    "text": "log now side tangent as well is trying to",
    "start": "2602839",
    "end": "2608400"
  },
  {
    "text": "get too clever with the tooling now one of the first experiments I did when I started trying to build custom string",
    "start": "2608400",
    "end": "2615079"
  },
  {
    "text": "interpolation handlers in cop was the following I said that okay that's how an",
    "start": "2615079",
    "end": "2620319"
  },
  {
    "text": "interpolated string is compiled into cop but the thing is the way to make",
    "start": "2620319",
    "end": "2627760"
  },
  {
    "text": "interpolated string handlers is open to anyone anyone can go ahead and do something like this you can make a ref",
    "start": "2627760",
    "end": "2633240"
  },
  {
    "text": "struct you can give it a name you can mark it as an interpolation string Handler there's no interface to",
    "start": "2633240",
    "end": "2639200"
  },
  {
    "text": "implement it's all duck typing and then you can write your own way to accept an",
    "start": "2639200",
    "end": "2645400"
  },
  {
    "text": "interpolate string and pass that in a special way and what I did is I made a method in that class or in that struct",
    "start": "2645400",
    "end": "2652680"
  },
  {
    "text": "which looks like this I have an append formatted method which accepts a generic so no allocation then I'm using the",
    "start": "2652680",
    "end": "2659280"
  },
  {
    "text": "color argument expression attribute add inet five I think uh which all it really",
    "start": "2659280",
    "end": "2665280"
  },
  {
    "text": "does is it says what ever you pass into this method capture that as a compile",
    "start": "2665280",
    "end": "2671480"
  },
  {
    "text": "time string not the computed version but whatever you're passing and because in login we're passing the argument name",
    "start": "2671480",
    "end": "2678640"
  },
  {
    "text": "all I'm saying is capture the argument name and then hack your way around",
    "start": "2678640",
    "end": "2683960"
  },
  {
    "text": "turning it into a compile time string which is what I'm doing with the aen formatted method underneath I'm taking",
    "start": "2683960",
    "end": "2689200"
  },
  {
    "text": "that wrapping it in curly braces and then building my own interpolated string",
    "start": "2689200",
    "end": "2694839"
  },
  {
    "text": "and then you can have something like this and log information method that that is an extension to the logger but",
    "start": "2694839",
    "end": "2701640"
  },
  {
    "text": "it accepts a ref of login interpolated string Handler which this basically",
    "start": "2701640",
    "end": "2707000"
  },
  {
    "text": "accepts a string but it needs to be an interpolated string that's all there is to it and then behind the scenes call",
    "start": "2707000",
    "end": "2713400"
  },
  {
    "text": "the logger do information do a two string pass the parameters as an array and basically this will allow you to use",
    "start": "2713400",
    "end": "2720119"
  },
  {
    "text": "string Ty strings without having to do any magic and they will take basically",
    "start": "2720119",
    "end": "2727280"
  },
  {
    "text": "this and they will turn it into logs like this so you can see that the ID and the status are still captured both with",
    "start": "2727280",
    "end": "2735359"
  },
  {
    "text": "the name that you pass down there and the parameter that eventually is computed a very efficient doesn't",
    "start": "2735359",
    "end": "2741240"
  },
  {
    "text": "allocate multiple times and it does mean well you can have the same experience",
    "start": "2741240",
    "end": "2747640"
  },
  {
    "text": "but still use the amazing feature of string interpolation fantastic is the problem is that",
    "start": "2747640",
    "end": "2755800"
  },
  {
    "text": "anything can go into those interpolated methods there's no rule that says only",
    "start": "2755800",
    "end": "2761640"
  },
  {
    "text": "pass a well-named argument type if you want to put a Lambda in there you can put if you want to put a whole method in",
    "start": "2761640",
    "end": "2767760"
  },
  {
    "text": "there you can which means that anything you put will be turned into a parameter name it also implies that if you want to",
    "start": "2767760",
    "end": "2775319"
  },
  {
    "text": "achieve something like that first you need the code analyzer to prevent this type of thing but also you need to find",
    "start": "2775319",
    "end": "2781359"
  },
  {
    "text": "a way to make your argument names for things that represent the exact same thing compile time checked which is",
    "start": "2781359",
    "end": "2788960"
  },
  {
    "text": "basically impossible so I tried that it didn't work rule number six I shall not",
    "start": "2788960",
    "end": "2794079"
  },
  {
    "text": "try to get too clever with tooling and that rule is for me let's go Circle back to the log level",
    "start": "2794079",
    "end": "2801800"
  },
  {
    "text": "because it's extremely important and this is where the talk is becoming a bit um subjective until now it's objective",
    "start": "2801800",
    "end": "2808040"
  },
  {
    "text": "there's no what ifs and buts in everything you saw here I can see what",
    "start": "2808040",
    "end": "2813280"
  },
  {
    "text": "someone would be like I actually don't want to follow that and that's okay but hear me out so we had a look at the log",
    "start": "2813280",
    "end": "2820960"
  },
  {
    "text": "level and I mentioned that the default log level for net is information cool but Microsoft as",
    "start": "2820960",
    "end": "2828520"
  },
  {
    "text": "spinner core sets it to Warning by default why well because for a single",
    "start": "2828520",
    "end": "2835280"
  },
  {
    "text": "ASP net core request if you turned that logger to information you would have",
    "start": "2835280",
    "end": "2841640"
  },
  {
    "text": "this I should point out the only thing I care about and the only thing I wrote a log for is This Blink it you miss",
    "start": "2841640",
    "end": "2849800"
  },
  {
    "text": "it why is that important well I mentioned that any of",
    "start": "2849800",
    "end": "2854880"
  },
  {
    "text": "you use data dog you said yes now I was using data dog as well and when I did my initial research to use data dog um I",
    "start": "2854880",
    "end": "2862559"
  },
  {
    "text": "saw the features and everything and then eventually I got to the payment page to to get a plan for the capacity I needed",
    "start": "2862559",
    "end": "2869359"
  },
  {
    "text": "um and it turns out they accept Visa Master Card uh American Express and this one that's a kidney it's very expensive",
    "start": "2869359",
    "end": "2877200"
  },
  {
    "text": "to do login with Dat Dog amazing support but super super expensive not only that",
    "start": "2877200",
    "end": "2884119"
  },
  {
    "text": "but given that we were one of the biggest users of data dog and one of the most high paying ones uh we had to sit",
    "start": "2884119",
    "end": "2890599"
  },
  {
    "text": "down talk with them to explain why we're paying so much um and what you I'm about",
    "start": "2890599",
    "end": "2896079"
  },
  {
    "text": "to to get to tell you is very much um an outcome of that uh chat now logs are",
    "start": "2896079",
    "end": "2903480"
  },
  {
    "text": "just a single tool you shouldn't use logs for everything in fact you don't even have to use open Telemetry if you",
    "start": "2903480",
    "end": "2909280"
  },
  {
    "text": "don't want to to invest into that you can use something as simple as Prometheus grafana and app metrics you",
    "start": "2909280",
    "end": "2916160"
  },
  {
    "text": "can get something nice like this very very easily so why do I say log level is important",
    "start": "2916160",
    "end": "2923119"
  },
  {
    "text": "well because you don't want to end up with this because when are you taking a",
    "start": "2923119",
    "end": "2928400"
  },
  {
    "text": "look at your log do you wake up in the morning and you say it's Monday made my coffee I'm going to go sit down I'm",
    "start": "2928400",
    "end": "2933839"
  },
  {
    "text": "going to take a look at my graan dashboard or my logs or whatever that is no you only take a look at your logs",
    "start": "2933839",
    "end": "2939720"
  },
  {
    "text": "when something goes wrong and you need to fix it so what I would arue is what",
    "start": "2939720",
    "end": "2945680"
  },
  {
    "text": "you're trying to to see what happened to that request and the important things",
    "start": "2945680",
    "end": "2951520"
  },
  {
    "text": "are probably of level warning in higher or error or critical you're still going",
    "start": "2951520",
    "end": "2957040"
  },
  {
    "text": "to need some information level logs to see exactly what happened but chances",
    "start": "2957040",
    "end": "2962160"
  },
  {
    "text": "are you don't need your information logs they just blow it or you don't need most",
    "start": "2962160",
    "end": "2967559"
  },
  {
    "text": "of them or you don't need all of them from every different domain because if I",
    "start": "2967559",
    "end": "2974119"
  },
  {
    "text": "go back here the circle thing over here is what we call categories log",
    "start": "2974119",
    "end": "2980319"
  },
  {
    "text": "categories if something is very important and it needs to be of information level make a category inject",
    "start": "2980319",
    "end": "2987440"
  },
  {
    "text": "that categories level in that method and push sparingly those information logs",
    "start": "2987440",
    "end": "2993680"
  },
  {
    "text": "but for anything else especially the default the best practice in my opinion is to",
    "start": "2993680",
    "end": "2999280"
  },
  {
    "text": "set that to warning this will also allow you to control what you're logging and Only log",
    "start": "2999280",
    "end": "3005920"
  },
  {
    "text": "what really really matters so and that's something we've actually tried and done",
    "start": "3005920",
    "end": "3011240"
  },
  {
    "text": "and not only did it reduce our logging bill by like 99% it didn't have any effect in how we",
    "start": "3011240",
    "end": "3017400"
  },
  {
    "text": "troubleshoot issues because again you only take a look at things when they break and you have enough information",
    "start": "3017400",
    "end": "3024319"
  },
  {
    "text": "especially if you have some capacity of metrics as well to see what went wrong so rule number seven I shall consider",
    "start": "3024319",
    "end": "3033280"
  },
  {
    "text": "using warning as the default log level I'm going to circle back just a little",
    "start": "3033280",
    "end": "3038319"
  },
  {
    "text": "bit to the initial point about performance because this was a very performance heavy talk and I'm sure you",
    "start": "3038319",
    "end": "3044559"
  },
  {
    "text": "have seen this quote before you've heard of this quote before premature optimization is the root of all",
    "start": "3044559",
    "end": "3049880"
  },
  {
    "text": "evil in my opinion the root of all evil is misinterpretation of this quote when",
    "start": "3049880",
    "end": "3056000"
  },
  {
    "text": "used to basically just stop any responsibility or take any",
    "start": "3056000",
    "end": "3061359"
  },
  {
    "text": "responsibility out of us um in order to do the right thing it's not even about writing code or performance code",
    "start": "3061359",
    "end": "3067799"
  },
  {
    "text": "performance code but actually doing the thing right so I don't think that anything you",
    "start": "3067799",
    "end": "3074000"
  },
  {
    "text": "had here today is about the performance performance is a happy accident but I'm sure you can apply everything you",
    "start": "3074000",
    "end": "3079200"
  },
  {
    "text": "learned today on anything related to well strings really and boxing and",
    "start": "3079200",
    "end": "3084359"
  },
  {
    "text": "memory I want to wrap this talk up with um a question which is why do we",
    "start": "3084359",
    "end": "3090640"
  },
  {
    "text": "log and you know you might have gotten it especially with the last point I mentioned um but we actually uh log to",
    "start": "3090640",
    "end": "3098480"
  },
  {
    "text": "tell a story We Tell to good a good story the story of usually how we got",
    "start": "3098480",
    "end": "3103760"
  },
  {
    "text": "here and here is usually how did the request fail and you have to treat logging and",
    "start": "3103760",
    "end": "3111119"
  },
  {
    "text": "writing logs in your applications as if you're a Storyteller by the end of this Trail",
    "start": "3111119",
    "end": "3117520"
  },
  {
    "text": "if you put everything together for a single request it should all make sense now there are",
    "start": "3117520",
    "end": "3124760"
  },
  {
    "text": "books and they're also good books notice a difference you don't need the bloat",
    "start": "3124760",
    "end": "3131160"
  },
  {
    "text": "you don't need that much information you can achieve a lot with little especially",
    "start": "3131160",
    "end": "3137839"
  },
  {
    "text": "in logging so what I want you to be with your logging is I want you to be laconic",
    "start": "3137839",
    "end": "3144160"
  },
  {
    "text": "now laconic is an aspect of uh Spartans I'm Greek so um I know this very well um",
    "start": "3144160",
    "end": "3152040"
  },
  {
    "text": "so Spartans not these ones not this these ones so spotters were known for",
    "start": "3152040",
    "end": "3158000"
  },
  {
    "text": "being strong Fighters they were training for a very very young age um but they were also known for being laconic",
    "start": "3158000",
    "end": "3164359"
  },
  {
    "text": "meaning that they were using very few words to express themselves that didn't mean they would have use enough words",
    "start": "3164359",
    "end": "3171280"
  },
  {
    "text": "they would convey whatever they wanted to convey but they didn't have to like",
    "start": "3171280",
    "end": "3176640"
  },
  {
    "text": "they would just say a few words and people will get it economy of words",
    "start": "3176640",
    "end": "3182200"
  },
  {
    "text": "spend less time talking spend more time doing so what the way I want you to think",
    "start": "3182200",
    "end": "3189480"
  },
  {
    "text": "about logging how to to think about logging is the following I want you to to log accurately with descriptive and",
    "start": "3189480",
    "end": "3196200"
  },
  {
    "text": "short names I want system consistent parameter names and I want a properly",
    "start": "3196200",
    "end": "3202880"
  },
  {
    "text": "utilized log level for any of our logs so so rule number eight I shall Only log",
    "start": "3202880",
    "end": "3209480"
  },
  {
    "text": "what's necessary to tell a good story thank you very much and keep",
    "start": "3209480",
    "end": "3214780"
  },
  {
    "text": "[Applause] [Music] [Applause]",
    "start": "3214780",
    "end": "3226099"
  },
  {
    "text": "coding",
    "start": "3235440",
    "end": "3238440"
  },
  {
    "text": "for",
    "start": "3259079",
    "end": "3262079"
  }
]