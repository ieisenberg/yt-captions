[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "all right with that let's get rolling so first off thanks everyone for joining",
    "start": "480",
    "end": "5520"
  },
  {
    "text": "today's talk i really appreciate it uh i know it's been the end of a long day and and it's a weird time uh but uh we're",
    "start": "5520",
    "end": "12160"
  },
  {
    "text": "gonna end it on on an interesting note if you've had your fill of talking about software and design theory and",
    "start": "12160",
    "end": "17760"
  },
  {
    "text": "architectural patterns well you're not going to get any of that here today this is a this is a talk where you don't need to",
    "start": "17760",
    "end": "23279"
  },
  {
    "text": "worry about taking away any of the code from it but we are going to see a little bit of code as we go along don't worry also if",
    "start": "23279",
    "end": "29039"
  },
  {
    "text": "you're if you're um don't have an engineering background or aren't really even sure at all about how the hardware works that's the purpose of",
    "start": "29039",
    "end": "35200"
  },
  {
    "text": "today's talk and the good news is that even if uh you know even as technology",
    "start": "35200",
    "end": "41120"
  },
  {
    "text": "evolves all the time and we come up with new ways of building machines the principles that we're going to show of how cpus",
    "start": "41120",
    "end": "46480"
  },
  {
    "text": "work today have been true for the past uh almost 40 years about 35 years and there's no",
    "start": "46480",
    "end": "54000"
  },
  {
    "text": "signs they're not going to maintain and stay true for the next 20 so this will be useful throughout",
    "start": "54000",
    "end": "59920"
  },
  {
    "text": "the you know your whole career so with that let's get rolling let's start with what is a cpu what's",
    "start": "59920",
    "end": "65680"
  },
  {
    "text": "actually the bits why do we even have something called a cpu and what we're going to do is introduce",
    "start": "65680",
    "end": "71119"
  },
  {
    "text": "a look a conceptual model of the way processors work and how they evolved from scratch",
    "start": "71119",
    "end": "76799"
  },
  {
    "text": "so with that it was originally called the von neumann architecture but what we're going to present today for technologies you want",
    "start": "76799",
    "end": "83280"
  },
  {
    "text": "to double check me is referred to as a modified harvard architecture which is basically what every modern processor is all the way up through",
    "start": "83280",
    "end": "90320"
  },
  {
    "text": "you know arm chips in your iphones and in android phones uh through to modern pcs intel",
    "start": "90320",
    "end": "96479"
  },
  {
    "text": "processors etc so let's start from scratch let's just say you want to make a",
    "start": "96479",
    "end": "102799"
  },
  {
    "start": "98000",
    "end": "201000"
  },
  {
    "text": "machine that can do something useful and let's start off with just some basic math i want to be able to take",
    "start": "102799",
    "end": "108240"
  },
  {
    "text": "some value a some value b add them together and make c how do i make that happen well it starts",
    "start": "108240",
    "end": "114000"
  },
  {
    "text": "off with i need a logic unit i need something that can actually understand what is math what's it mean to add",
    "start": "114000",
    "end": "120159"
  },
  {
    "text": "something together and get a result now i also have that a b and c the",
    "start": "120159",
    "end": "125280"
  },
  {
    "text": "variable so i'm going to have some way of storing that value a that value b and the result of c because",
    "start": "125280",
    "end": "131280"
  },
  {
    "text": "if i can't vary those things if i've just hard coded to add say one plus four and get an outcome the",
    "start": "131280",
    "end": "136400"
  },
  {
    "text": "outcome's the same every time it's not useful it's not really a machine so instead we have a little bit of story for a",
    "start": "136400",
    "end": "142080"
  },
  {
    "text": "b plug that into our logic unit and be able to get that result c now it gets a little more elaborate",
    "start": "142080",
    "end": "148480"
  },
  {
    "text": "because of course if something can only add something can only add there's real limitations on what you can get out of that it's not much of a machine is it",
    "start": "148480",
    "end": "155360"
  },
  {
    "text": "so instead we want to be able to uh do more than just additional do a variety of operations",
    "start": "155360",
    "end": "160720"
  },
  {
    "text": "so to do that our logic unit is going to need a control unit that can tell it what is the thing we",
    "start": "160720",
    "end": "166239"
  },
  {
    "text": "want to do and of course not just it doesn't just need to control you to put it in that position you know in the configuration",
    "start": "166239",
    "end": "172800"
  },
  {
    "text": "where it can do that add subtract multiply divide we also need to be able to like tell it which",
    "start": "172800",
    "end": "178159"
  },
  {
    "text": "one we want at a given moment some way of saying to it oh at the moment we want you to do a subtract or an add or a divide",
    "start": "178159",
    "end": "184080"
  },
  {
    "text": "and if so of the of the operands in what order for something that's order dependent like uh like division so already now",
    "start": "184080",
    "end": "191840"
  },
  {
    "text": "we've built up a number of pieces to that we have a little storage a and b we have a result storage that control",
    "start": "191840",
    "end": "197040"
  },
  {
    "text": "unit tells the logic unit what position to be in and an instruction we can feed into it what to do",
    "start": "197040",
    "end": "202560"
  },
  {
    "start": "201000",
    "end": "425000"
  },
  {
    "text": "but of course if we can only work from straight inputs we have real limitations we want to be able to in fact at least",
    "start": "202560",
    "end": "208480"
  },
  {
    "text": "do something where we can say either say a value a and a value a second value",
    "start": "208480",
    "end": "213599"
  },
  {
    "text": "or we need to be able to basically feedback results into our cell so it could be",
    "start": "213599",
    "end": "218879"
  },
  {
    "text": "like a or memory plus c equals d as an example so we need some place to",
    "start": "218879",
    "end": "225040"
  },
  {
    "text": "store outputs because otherwise we have basically a pocky calculator where you have to have in your head what the um what the",
    "start": "225040",
    "end": "231519"
  },
  {
    "text": "current state is to then feed it manually back in and that's not really useful so instead we want to have some",
    "start": "231519",
    "end": "236879"
  },
  {
    "text": "result storage and be able to take that result and use that result as part of our input",
    "start": "236879",
    "end": "242319"
  },
  {
    "text": "value so that we could take say for example do a addition between either a or memory and another",
    "start": "242319",
    "end": "249280"
  },
  {
    "text": "value to get a new result so we can accumulate results over time of course to do that we've now introduced some way of routing data from",
    "start": "249280",
    "end": "256239"
  },
  {
    "text": "say data storage into our inputs again which means you have to extend our control unit to be",
    "start": "256239",
    "end": "261600"
  },
  {
    "text": "able to tell those things what position we want them to be in at a given time",
    "start": "261600",
    "end": "267360"
  },
  {
    "text": "extending that then a little bit more beyond just the ability to have accumulation variables and that kind of thing",
    "start": "267360",
    "end": "272880"
  },
  {
    "text": "we get to sort of the full form of this which is we want to be able to take say you know",
    "start": "272880",
    "end": "278639"
  },
  {
    "text": "a result from previous from memory or a new value and another known value and do a computation on them",
    "start": "278639",
    "end": "286080"
  },
  {
    "text": "and take that result and either just have it or we want to store that back into memory so we can",
    "start": "286080",
    "end": "292160"
  },
  {
    "text": "use it in some subsequent operation by the time we do this if we then just introduce a little bit",
    "start": "292160",
    "end": "298400"
  },
  {
    "text": "of instruction storage so we can sequence not just doing one step but a sequence of steps we want to do we",
    "start": "298400",
    "end": "305039"
  },
  {
    "text": "have basically created a modern processor and in fact if you go from this diagram",
    "start": "305039",
    "end": "311680"
  },
  {
    "text": "right here where we have um our instruction storage we have an instruction storage here",
    "start": "311680",
    "end": "317440"
  },
  {
    "text": "we have an instructions the instruction we're currently using that is the one that's controlling the",
    "start": "317440",
    "end": "322479"
  },
  {
    "text": "state of the processor we have a control unit put the processor in that state and we have the ability to basically",
    "start": "322479",
    "end": "328160"
  },
  {
    "text": "take memory and put it either into an a slot or b slot take those two guys and do an",
    "start": "328160",
    "end": "334560"
  },
  {
    "text": "operation we configure on them and put that result into a temporary buffer to then be able to",
    "start": "334560",
    "end": "339840"
  },
  {
    "text": "move it back into memory we now have the computers that we know",
    "start": "339840",
    "end": "344960"
  },
  {
    "text": "today and in fact let me just now change all the labeling",
    "start": "344960",
    "end": "350240"
  },
  {
    "text": "and this is now the diagram of the architecture of essentially every processor built since about 82.",
    "start": "350240",
    "end": "358240"
  },
  {
    "text": "so i'm not lying when i say almost 40 years um so yes i can actually claim to have been",
    "start": "358240",
    "end": "363759"
  },
  {
    "text": "around and using computers back when this became the thing uh but this is true",
    "start": "363759",
    "end": "368960"
  },
  {
    "text": "whether you talk about a modern uh arm processor uh uh one of the ax",
    "start": "368960",
    "end": "374639"
  },
  {
    "text": "processors that apple uses uh modern any intel processor 64-bit 32-bit etc",
    "start": "374639",
    "end": "381280"
  },
  {
    "text": "they all use this basic hardware architecture to do what they're going to do now by the way",
    "start": "381280",
    "end": "387520"
  },
  {
    "text": "as i go through this talk today if you have any questions you can go to the conference room slack channel and pound them on in there",
    "start": "387520",
    "end": "393440"
  },
  {
    "text": "if i don't get to them in the talking flow i guarantee you i'll get to it right after the talk and we can make",
    "start": "393440",
    "end": "398960"
  },
  {
    "text": "sure your question gets answered um but i really want to hear that feedback and you know make sure that i've hit the mark for you",
    "start": "398960",
    "end": "405039"
  },
  {
    "text": "so that everyone's following along as we go so we've laid out a basic diagram of the",
    "start": "405039",
    "end": "410960"
  },
  {
    "text": "way a cpu works and i've made this audacious claim that every modern cpu works this way",
    "start": "410960",
    "end": "417599"
  },
  {
    "text": "to justify that let's get a little more detailed in what's going on and how this works",
    "start": "417599",
    "end": "422960"
  },
  {
    "text": "and it starts with something called an instruction so the instruction is thing that",
    "start": "422960",
    "end": "428319"
  },
  {
    "start": "425000",
    "end": "449000"
  },
  {
    "text": "ultimately breaks down and differentiates different exact implementations of processors like what makes an",
    "start": "428319",
    "end": "433759"
  },
  {
    "text": "arm risk processor fundamentally different than an intel processor funnily different dance say",
    "start": "433759",
    "end": "439599"
  },
  {
    "text": "the old mips processors we use things like that it comes down to that instruction set so what is an instruction that's part of",
    "start": "439599",
    "end": "446160"
  },
  {
    "text": "that instruction set that defines what that hardware is capable of doing well it turns out that to build a modern",
    "start": "446160",
    "end": "453599"
  },
  {
    "start": "449000",
    "end": "677000"
  },
  {
    "text": "processor you don't have to create a lot of unique instructions and because these instructions are built into the hardware",
    "start": "453599",
    "end": "458720"
  },
  {
    "text": "there's a lot of pressure to be economical about how many of them you create and more or less what you",
    "start": "458720",
    "end": "464720"
  },
  {
    "text": "need is really do basic math by which i mean that add subtract multiply divide binary",
    "start": "464720",
    "end": "470080"
  },
  {
    "text": "logic so that's things like ending binary values together oring binary values together to produce",
    "start": "470080",
    "end": "477759"
  },
  {
    "text": "outcomes um you want to be able to move things around in ram so i can actually take something",
    "start": "477759",
    "end": "484160"
  },
  {
    "text": "that's stored in one location put it to another location or put it into a variable uh or copy",
    "start": "484160",
    "end": "489599"
  },
  {
    "text": "whole blocks of memory to other locations in memory to save them for later etc we need to have a thing called a stack",
    "start": "489599",
    "end": "496080"
  },
  {
    "text": "and that's that should stand out to you is a little weird we're talking about super low level basic things and they say oh yeah",
    "start": "496080",
    "end": "502080"
  },
  {
    "text": "and a stack so just to refresh what is a stack",
    "start": "502080",
    "end": "507199"
  },
  {
    "text": "a stack is a specialized data structure that is best um thought of actually is a pile of",
    "start": "507199",
    "end": "513360"
  },
  {
    "text": "paper and i'm looking around thinking that this is one time i could have actually made a prop with a pile of paper",
    "start": "513360",
    "end": "518479"
  },
  {
    "text": "so uh the idea of a stack is you push things onto the stack and they layer up like this and then",
    "start": "518479",
    "end": "525360"
  },
  {
    "text": "when you pull something off the stack it's called popping it you're actually pulling off the top item",
    "start": "525360",
    "end": "530480"
  },
  {
    "text": "so you push items onto the stack and you pop them and the stack goes down the interesting thing being that when",
    "start": "530480",
    "end": "536240"
  },
  {
    "text": "you pop an item off the stack you're getting the last item you put on the stack so they so",
    "start": "536240",
    "end": "541920"
  },
  {
    "text": "it's um basically last in is the first out",
    "start": "541920",
    "end": "547040"
  },
  {
    "text": "so if i push one two three i get back three two one and that turns out that",
    "start": "547040",
    "end": "552959"
  },
  {
    "text": "that basic behavior turns out to be extremely important to making any processor support",
    "start": "552959",
    "end": "559680"
  },
  {
    "text": "any application of complexity and you will see why in a little bit later on how that that that becomes an",
    "start": "559680",
    "end": "565279"
  },
  {
    "text": "essential aspect so an additional thing you need to be able to do is you have to be able to jump to a code location",
    "start": "565279",
    "end": "570560"
  },
  {
    "text": "so basically if i think about my instructions set or the set of instructions to define a program i need",
    "start": "570560",
    "end": "575760"
  },
  {
    "text": "to be able to go like down a set of instructions and at some point they'll go like from here i want you to go way over",
    "start": "575760",
    "end": "580880"
  },
  {
    "text": "there and start picking up things up again now for anyone who's been in programming long enough you know that hey this",
    "start": "580880",
    "end": "586000"
  },
  {
    "text": "sounds like a go-to and gosh darn we were told never to do that stuff again because it's super duper risky and",
    "start": "586000",
    "end": "591839"
  },
  {
    "text": "you're right but at the low level of hardware we economize things and there are no",
    "start": "591839",
    "end": "596959"
  },
  {
    "text": "safeties at the low level hardware you make a misstep everything just explodes we rely on compilers and other",
    "start": "596959",
    "end": "603920"
  },
  {
    "text": "high-level things to keep us from making those mistakes finally the last core bit of thing we",
    "start": "603920",
    "end": "609600"
  },
  {
    "text": "really have to have to make a viable instruction set is uh some sort of facility for doing a",
    "start": "609600",
    "end": "614959"
  },
  {
    "text": "subroutine call and return because you couldn't make a program of any complexity if you had to linearize the whole thing",
    "start": "614959",
    "end": "621360"
  },
  {
    "text": "where like all you could do is maybe do some jumps and and and jumps and the like but you could",
    "start": "621360",
    "end": "627120"
  },
  {
    "text": "never call a reusable block of code over and over and over again and believe it or not to make that work",
    "start": "627120",
    "end": "633120"
  },
  {
    "text": "basically requires hardware support inside the microprocessor and we're going to show how that works",
    "start": "633120",
    "end": "638720"
  },
  {
    "text": "but this set this is all a cpu can do and i want to differentiate for a second like",
    "start": "638720",
    "end": "644079"
  },
  {
    "text": "computing hardware from people people are very slow but very smart yes even dave down the",
    "start": "644079",
    "end": "652240"
  },
  {
    "text": "pub very smart cpus are very exceedingly stupid but super",
    "start": "652240",
    "end": "659440"
  },
  {
    "text": "fast at being stupid and so all of our modern code is all based around how do we",
    "start": "659440",
    "end": "664800"
  },
  {
    "text": "take advantage of something that can reliably be very stupid very fast and produce big useful things from that",
    "start": "664800",
    "end": "672079"
  },
  {
    "text": "so let's talk about what we can do in a modern process let's start with something really basic we're going to move some data around now",
    "start": "672079",
    "end": "677760"
  },
  {
    "start": "677000",
    "end": "979000"
  },
  {
    "text": "i'm going to do some terms here that really matter back in my original diagram we had this thing called registers where i changed",
    "start": "677760",
    "end": "684480"
  },
  {
    "text": "my little location where i said hey we have a slot for a and the slot for b and then they became registers and that's what they're",
    "start": "684480",
    "end": "690000"
  },
  {
    "text": "known in any microprocessor architecture um that are the slots that you can put things in",
    "start": "690000",
    "end": "695600"
  },
  {
    "text": "they are the temporary little tiny scratch pads that the cpu has to work with and basically anything a cpu does in the",
    "start": "695600",
    "end": "702800"
  },
  {
    "text": "end of the day has to be in that register that registers are extremely fast but they're extremely small",
    "start": "702800",
    "end": "708800"
  },
  {
    "text": "so you basically have registers in the cpu and then you have ram the mainstream",
    "start": "708800",
    "end": "714240"
  },
  {
    "text": "remote random access memory that's available in the uh computer itself not part of the chip not",
    "start": "714240",
    "end": "720959"
  },
  {
    "text": "part of the actual cpu so let's talk about the most simple basic operation i want to do i just want",
    "start": "720959",
    "end": "726160"
  },
  {
    "text": "to set a equals to b now in this case um let's just assume for a minute that a",
    "start": "726160",
    "end": "732959"
  },
  {
    "text": "is a a register and b is a location in memory",
    "start": "732959",
    "end": "738399"
  },
  {
    "text": "so the actual code to do that and for today's examples i'm using intel 32-bit assembler is this basic",
    "start": "738399",
    "end": "745760"
  },
  {
    "text": "instruction called move is what actually happens in the cpu move and you give it the best dish you",
    "start": "745760",
    "end": "751680"
  },
  {
    "text": "want it to move and then the location of memory you want to move from it's a weird goofy syntax so move",
    "start": "751680",
    "end": "757760"
  },
  {
    "text": "eax comma and then that square brace ecx plus four what that actually means is",
    "start": "757760",
    "end": "765440"
  },
  {
    "text": "move eax means move into this register this value for memory ecx plus four",
    "start": "765440",
    "end": "770480"
  },
  {
    "text": "now actually i need to correct myself this this um a equals b is actually showing two variables in",
    "start": "770480",
    "end": "775760"
  },
  {
    "text": "memory sorry where a and b are two variables in your program which means they exist in main ram",
    "start": "775760",
    "end": "780959"
  },
  {
    "text": "you can't do an operation between memory to memory can't be done because the membrane itself is not a cpu",
    "start": "780959",
    "end": "787519"
  },
  {
    "text": "so instead we have to pull one of those values into the into the cpu and then push it back out to where we want it in ram so",
    "start": "787519",
    "end": "794480"
  },
  {
    "text": "and that's what we're doing that first statement is we're pulling the value of b into into a register and the second statement",
    "start": "794480",
    "end": "800399"
  },
  {
    "text": "is taking that value pushing it back into a now you notice you don't see a or b in that code which is a little weird",
    "start": "800399",
    "end": "806320"
  },
  {
    "text": "what's this square brackets ecx plus 4 why is it plus 4 and then we have square",
    "start": "806320",
    "end": "811680"
  },
  {
    "text": "brackets around ecx what's that mean well the syntax for that that is really square brackets around a",
    "start": "811680",
    "end": "819360"
  },
  {
    "text": "register means don't write to the register write the location in memory",
    "start": "819360",
    "end": "824480"
  },
  {
    "text": "that is specified by this register so if the register has the value 42",
    "start": "824480",
    "end": "830560"
  },
  {
    "text": "you're writing to memory location 42 that's where you start writing i should say",
    "start": "830560",
    "end": "836320"
  },
  {
    "text": "so what we're doing here is the ecx plus 4 and ecx we're actually believe it or not these are two variables in ram and uh",
    "start": "836320",
    "end": "843440"
  },
  {
    "text": "and there's a 32 processor so call them two numbers well one of them is four bytes and then",
    "start": "843440",
    "end": "848880"
  },
  {
    "text": "the next variable is the next four bytes so they're literally in order four bytes then four bytes so to get to",
    "start": "848880",
    "end": "855760"
  },
  {
    "text": "the second variable if we have a register pointing to the to start of a our second variable starts",
    "start": "855760",
    "end": "862079"
  },
  {
    "text": "four bytes later at b and again if you look at this and think to yourself oh my gosh that seems",
    "start": "862079",
    "end": "867279"
  },
  {
    "text": "extraordinarily fragile how would you ever know when you write code this way you've now discovered why nobody writes code this way anymore",
    "start": "867279",
    "end": "874320"
  },
  {
    "text": "because this is assembler language and essentially nobody writes at this level anymore this is what we have modern higher level",
    "start": "874320",
    "end": "880079"
  },
  {
    "text": "languages for to track this stuff but it's actually the way the hardware works and that's useful to know",
    "start": "880079",
    "end": "885600"
  },
  {
    "text": "because when we think about optimizing performance or trying to work out why the machine does what it does at the end of the day you can't no",
    "start": "885600",
    "end": "891760"
  },
  {
    "text": "matter what programming language you have you can't make this hardware do something it was not built to do it doesn't matter if you're using f",
    "start": "891760",
    "end": "897839"
  },
  {
    "text": "sharp rust go c sharp javascript at the end of the day everything you write must run on this hardware and it has to",
    "start": "897839",
    "end": "904639"
  },
  {
    "text": "express itself in these primitive functions one way or another so just to move memory between two",
    "start": "904639",
    "end": "910959"
  },
  {
    "text": "two locations we first have to pull it into a register and then take it from that register and write it back out to the other location",
    "start": "910959",
    "end": "917680"
  },
  {
    "text": "in memory now let's talk about what i mean by a pointer again it's why i want to refresh",
    "start": "917680",
    "end": "923199"
  },
  {
    "text": "that thought that square brackets ecx well so let's say that the value in the ecx register was",
    "start": "923199",
    "end": "929440"
  },
  {
    "text": "the guy you see on here now this is in hex don't worry too much about that but you know you so it's all zero with an a",
    "start": "929440",
    "end": "935199"
  },
  {
    "text": "so what that really means is if we go down to the address a and ram that's where our",
    "start": "935199",
    "end": "940800"
  },
  {
    "text": "variable starts so when we say square brackets ecx we say don't take the value of ecx take the",
    "start": "940800",
    "end": "946560"
  },
  {
    "text": "value of cx and go to that location in memory and we do that we see that we actually get we take the four bytes going from",
    "start": "946560",
    "end": "953519"
  },
  {
    "text": "there we get that value which is um the actual value we're trying to pull",
    "start": "953519",
    "end": "958959"
  },
  {
    "text": "out of memory and we load it into the register so we do this all the time because the",
    "start": "958959",
    "end": "964160"
  },
  {
    "text": "way we actually reference memory pull things in and out of memory fortunately every this one this is one of the first",
    "start": "964160",
    "end": "969440"
  },
  {
    "text": "things that compiler developers automated so you have to think too much in these terms",
    "start": "969440",
    "end": "975199"
  },
  {
    "text": "all right so that's a very basic operation let's do another very basic operation let's say that we want to push something",
    "start": "975199",
    "end": "982160"
  },
  {
    "start": "979000",
    "end": "1104000"
  },
  {
    "text": "onto that stack we had and pull it back off now it turns out there's a special register",
    "start": "982160",
    "end": "987440"
  },
  {
    "text": "just for working with the stack that hardware stack that it has because the stack we talked about that's in the microprocessor is not for your",
    "start": "987440",
    "end": "994160"
  },
  {
    "text": "use it's really for the cpu's use it's a built-in construct but nobody uses in the program if you go",
    "start": "994160",
    "end": "1000320"
  },
  {
    "text": "to net and say oh i want me a stack you don't get the hardware stack you get a normal code",
    "start": "1000320",
    "end": "1006480"
  },
  {
    "text": "implementation of a data structure and data work this is this is the way we work with the one that's actually built into the",
    "start": "1006480",
    "end": "1011600"
  },
  {
    "text": "microprocessor because it has a special purpose so we push and pop things working from what's",
    "start": "1011600",
    "end": "1016959"
  },
  {
    "text": "called the stack pointer so in fact the stack pointer tracks this value for us of where where in memory is the stack",
    "start": "1016959",
    "end": "1025038"
  },
  {
    "text": "right now what what what is the basically where what's the end of the top item of the stack",
    "start": "1025039",
    "end": "1031120"
  },
  {
    "text": "so for example let's say we the stop statement here we're pushing a register onto the stack so push eax",
    "start": "1031120",
    "end": "1038000"
  },
  {
    "text": "takes the value from eax pushes it onto the stack so imagine like again sheet of paper on the stack",
    "start": "1038000",
    "end": "1044079"
  },
  {
    "text": "the next statement push square bracket ccx you just talked about that's the pointer so it says don't push ecx on the stack",
    "start": "1044079",
    "end": "1051200"
  },
  {
    "text": "take the value from memory that e6 points to push that on the stack now when we pop them you notice how my",
    "start": "1051200",
    "end": "1056799"
  },
  {
    "text": "pop statements i have written the same order to my push which means that i went push push when i pop i get this guy",
    "start": "1056799",
    "end": "1063840"
  },
  {
    "text": "out and pop syntax tells you where you write it into so i'm taking this value and go put it back in that eax register",
    "start": "1063840",
    "end": "1070559"
  },
  {
    "text": "and i pop again i'm going to take this value and go put it back in memory at that address 22 by ecx effectively",
    "start": "1070559",
    "end": "1077360"
  },
  {
    "text": "what we actually just did here was swap these two values in a super inefficient way",
    "start": "1077360",
    "end": "1082799"
  },
  {
    "text": "right because if i push value one and then two and then i pop them back uh this one",
    "start": "1082799",
    "end": "1089440"
  },
  {
    "text": "into one and that one into two i basically swapped what was in one and what was in two in a super and efficient way so you",
    "start": "1089440",
    "end": "1097280"
  },
  {
    "text": "wouldn't actually do this but that's the meaning of what happened here because the stack is last in first out all right",
    "start": "1097280",
    "end": "1105280"
  },
  {
    "start": "1104000",
    "end": "1271000"
  },
  {
    "text": "having put behind us some of that more obtuse code let's look at something more practical",
    "start": "1105280",
    "end": "1110320"
  },
  {
    "text": "so you can see how it works again so let's start with number one uh we're gonna do something really",
    "start": "1110320",
    "end": "1116160"
  },
  {
    "text": "primitive let's just do an addition where i want to get into a so variable a um",
    "start": "1116160",
    "end": "1122799"
  },
  {
    "text": "the value of a plus b and in this case actually i'm going to do it quickly with registers so register a equal value of a plus b let's",
    "start": "1122799",
    "end": "1129280"
  },
  {
    "text": "assume i already had them in registers well so um the top one's pretty",
    "start": "1129280",
    "end": "1135039"
  },
  {
    "text": "straightforward i can just say like okay let me go ahead and just add eax and ebx together now when you do",
    "start": "1135039",
    "end": "1141039"
  },
  {
    "text": "that assembler operation the way this works you actually when you specify an ad",
    "start": "1141039",
    "end": "1146160"
  },
  {
    "text": "you actually specify the destination register as part of the of the operation so add e x e b x",
    "start": "1146160",
    "end": "1152160"
  },
  {
    "text": "actually says make e a x equal to e x plus e b x i can also deal with a constant",
    "start": "1152160",
    "end": "1157919"
  },
  {
    "text": "so i could add a constant to e a x in fact what we actually end up doing and then is e a x becomes e eax plus that constant",
    "start": "1157919",
    "end": "1165280"
  },
  {
    "text": "more useful right is the second one and this gets back to using our variable syntax again where if i just",
    "start": "1165280",
    "end": "1170880"
  },
  {
    "text": "want to do a plus b equals c and you know actually have that result to set so if",
    "start": "1170880",
    "end": "1176880"
  },
  {
    "text": "you think about the way you might write in most programming language might be like c set variable c to be equal to variable",
    "start": "1176880",
    "end": "1182240"
  },
  {
    "text": "a plus variable b well to do that i first off i can't work if a and b point to ram",
    "start": "1182240",
    "end": "1187679"
  },
  {
    "text": "i can't do it in one operation i can't take those two values out of ram and and put the result back in ramp not",
    "start": "1187679",
    "end": "1192799"
  },
  {
    "text": "allowed so i first have to pull um at least one of these guys in an",
    "start": "1192799",
    "end": "1198320"
  },
  {
    "text": "intel processor because one of these guys must come into a register so what i'm going to do here is i'm going to say hey i want to move",
    "start": "1198320",
    "end": "1205039"
  },
  {
    "text": "the the basically the value 22 by ecx that's our a into the eax register now i'm going to",
    "start": "1205039",
    "end": "1212000"
  },
  {
    "text": "add to that the value pointed to by ecx plus 4 which is where my b variable started i'm going to add that",
    "start": "1212000",
    "end": "1218320"
  },
  {
    "text": "to my ex register which then the result ends up in eix and i'm going to move that into the location",
    "start": "1218320",
    "end": "1224480"
  },
  {
    "text": "ecx plus 8 y8 well if i dimmed my variables a b c and ram if",
    "start": "1224480",
    "end": "1230080"
  },
  {
    "text": "this is at byte 0 b starts at plus 4 c starts plus eight because an integer is four bytes wide on a",
    "start": "1230080",
    "end": "1237039"
  },
  {
    "text": "32-bit processor what i want you to really take away from this though is that's three statements",
    "start": "1237039",
    "end": "1242799"
  },
  {
    "text": "to do an add like literally the simplest algorithmic operation you can do three statements of assembler to do that",
    "start": "1242799",
    "end": "1250480"
  },
  {
    "text": "and that's in an intel processor if this was an arm processor it would actually be more than that by design",
    "start": "1250480",
    "end": "1256880"
  },
  {
    "text": "so just even simple things when you're actually down the machine level of what it's running",
    "start": "1256880",
    "end": "1262559"
  },
  {
    "text": "can involve a lot of code because processors are stupid but they can do a",
    "start": "1262559",
    "end": "1268159"
  },
  {
    "text": "lot of stupid things really fast now you wouldn't get far if all you could do is basic math",
    "start": "1268159",
    "end": "1274159"
  },
  {
    "start": "1271000",
    "end": "1470000"
  },
  {
    "text": "inevitably most i don't know what your programs look like but mine end up with tons of if then else blah blah statements in them tons",
    "start": "1274159",
    "end": "1280640"
  },
  {
    "text": "and tons of this stuff so how do we do that in the processor well let's say i want to",
    "start": "1280640",
    "end": "1286000"
  },
  {
    "text": "say hey if a is less than b then i want you to inc add one to a fair enough",
    "start": "1286000",
    "end": "1293520"
  },
  {
    "text": "so to do that first off we actually have to compare a and b and just as before since they're both",
    "start": "1293520",
    "end": "1298799"
  },
  {
    "text": "memory variables i can't just directly compare them i got to move one into a register so in",
    "start": "1298799",
    "end": "1304320"
  },
  {
    "text": "this case we're moving a the value of a into the ebx register",
    "start": "1304320",
    "end": "1309520"
  },
  {
    "text": "and then we're going to compare it with the value of b now you notice i just said compare there that's what the cmp",
    "start": "1309520",
    "end": "1314640"
  },
  {
    "text": "means compare but how do i get my less than greater than or whatever",
    "start": "1314640",
    "end": "1319679"
  },
  {
    "text": "well interesting enough you do it in the next statement the way compares work in processors is a",
    "start": "1319679",
    "end": "1325679"
  },
  {
    "text": "two-step process where you first say do a compare and it literally does every compare",
    "start": "1325679",
    "end": "1330840"
  },
  {
    "text": "basically and then the next statement you say okay cool now in this situation i want you to jump",
    "start": "1330840",
    "end": "1337200"
  },
  {
    "text": "somewhere else so jge stands for jump if greater than or equal",
    "start": "1337200",
    "end": "1342799"
  },
  {
    "text": "now you notice i said less than up above why am i why don't i have a jump less than and the answer gets back to because hardware",
    "start": "1342799",
    "end": "1349600"
  },
  {
    "text": "guys don't like to implement anything they don't absolutely have to implement and a less than and a greater than or equal than are conjugates depending on",
    "start": "1349600",
    "end": "1356400"
  },
  {
    "text": "which side you put the thing on so they make you just put it in the right way so they only have to have one of those",
    "start": "1356400",
    "end": "1361679"
  },
  {
    "text": "two operations because they're big on conserving all the hardware",
    "start": "1361679",
    "end": "1366880"
  },
  {
    "text": "um so i just saw a question in chat by the way from a couple minutes ago so uh on the stack um",
    "start": "1366880",
    "end": "1373679"
  },
  {
    "text": "you would uh you wouldn't actually use that to swap variables in ram uh and the reason is it's super slow",
    "start": "1373679",
    "end": "1379280"
  },
  {
    "text": "which i'm going to show you in a minute it'd be way too slow to do it'd be valid but super slow because near the other",
    "start": "1379280",
    "end": "1384640"
  },
  {
    "text": "talk we talked about the relative performance different things and you'll be shocked how bad things vary and it matters a lot",
    "start": "1384640",
    "end": "1390799"
  },
  {
    "text": "when at the lower level and that's really what you're paying for when you buy a compiler is the intelligence the compiler",
    "start": "1390799",
    "end": "1396960"
  },
  {
    "text": "developers to know that when you say do this in this exact circumstance this is the fast way to make it happen",
    "start": "1396960",
    "end": "1402720"
  },
  {
    "text": "so uh with jge we're basically saying jump of greater than equal to a label point called exit which will be some address",
    "start": "1402720",
    "end": "1409840"
  },
  {
    "text": "of the program then we're jumping around in this case",
    "start": "1409840",
    "end": "1415440"
  },
  {
    "text": "because we don't have a less than operator we're jumping around our actual work that we want to do in the then case",
    "start": "1415440",
    "end": "1421679"
  },
  {
    "text": "and then x it ends up 0.2 whatever's next so just to sequence through this again so if a is less than b i first i have to",
    "start": "1421679",
    "end": "1428240"
  },
  {
    "text": "execute that compare to do that i gotta get one of those values into into a register do the compare",
    "start": "1428240",
    "end": "1434240"
  },
  {
    "text": "and then using the operations i have in this case jump greater than or equal to",
    "start": "1434240",
    "end": "1439360"
  },
  {
    "text": "i jump around because that's the opposite of the case i'm looking for i jump around the additional work to",
    "start": "1439360",
    "end": "1445279"
  },
  {
    "text": "just continue on with basically what would be after that if then structure now i'm cheating here you notice i say",
    "start": "1445279",
    "end": "1451760"
  },
  {
    "text": "increment ecx so increment our variable a and i'm cheating i'm using that there is an increment",
    "start": "1451760",
    "end": "1457600"
  },
  {
    "text": "operator built into the hardware and that a equals a plus one is really just incrementing",
    "start": "1457600",
    "end": "1463360"
  },
  {
    "text": "a by one so i'm cheating but in your real world often is not your actual logic is more",
    "start": "1463360",
    "end": "1468400"
  },
  {
    "text": "complicated than this so let's up the bar slightly hey if a is less than b then i want to call a function called do more math",
    "start": "1468400",
    "end": "1475039"
  },
  {
    "start": "1470000",
    "end": "1531000"
  },
  {
    "text": "and i'm american so let's do more math not mass so uh first thing we do is we've got to",
    "start": "1475039",
    "end": "1480720"
  },
  {
    "text": "go ahead and again pull one of those values into ram do our compare jump jg exit",
    "start": "1480720",
    "end": "1486960"
  },
  {
    "text": "now i have a syntax called call that's how we basically say at this point i want you",
    "start": "1486960",
    "end": "1492480"
  },
  {
    "text": "to transfer execution to a subroutine call do more math and then there's our exit whatever's next",
    "start": "1492480",
    "end": "1499440"
  },
  {
    "text": "now here's where things get a little entertaining here's my little do-more math function it's a label in my code",
    "start": "1499440",
    "end": "1504480"
  },
  {
    "text": "somewhere and it says hey i want you to add 24 to that integer value stored into ecx",
    "start": "1504480",
    "end": "1510880"
  },
  {
    "text": "and then ret return to wherever you came from so i got call and i got ret call return",
    "start": "1510880",
    "end": "1518080"
  },
  {
    "text": "and so when you return you're gonna end up basically executing whatever that exit value pointed at",
    "start": "1518080",
    "end": "1523919"
  },
  {
    "text": "now if you're looking at this and seeing thinking like that seems suspiciously too straightforward you're right it is suspiciously too",
    "start": "1523919",
    "end": "1530480"
  },
  {
    "text": "straightforward under the covers call is actually shorthand for doing a bunch of works",
    "start": "1530480",
    "end": "1536240"
  },
  {
    "text": "because remember processors stupid but fast to do that we actually have to push",
    "start": "1536240",
    "end": "1543919"
  },
  {
    "text": "uh this is where we start using our stack we push the state of all of our registers that we need to preserve",
    "start": "1543919",
    "end": "1550320"
  },
  {
    "text": "onto the stack tick tick tick and then we push our instruction pointer",
    "start": "1550320",
    "end": "1555600"
  },
  {
    "text": "that tells us where to get back to because the instruction point is a thing that advances through the code like a little pointer down a recipe",
    "start": "1555600",
    "end": "1561840"
  },
  {
    "text": "telling us where we are then we actually push our base pointer that",
    "start": "1561840",
    "end": "1567120"
  },
  {
    "text": "tells us where this the table stack is the way you think of this is imagine i have a table i'm stacking papers on the",
    "start": "1567120",
    "end": "1572720"
  },
  {
    "text": "table the base pointer points to the surface of the table so if i want to protect you from touching this stuff",
    "start": "1572720",
    "end": "1579279"
  },
  {
    "text": "whatever whatever code i have later i can move the base pointer up so that i've actually like i put a table over my stack and you can't mess with",
    "start": "1579279",
    "end": "1585760"
  },
  {
    "text": "the stuff below the table you're on so i push my base pointer i then make that stack pointer now i can",
    "start": "1585760",
    "end": "1593760"
  },
  {
    "text": "actually transfer control to the subroutine all of these things here are actually injected by the assembler compiler to",
    "start": "1593760",
    "end": "1599440"
  },
  {
    "text": "say like oh you said call that actually means do this stuff and then transfer control to the subroutine",
    "start": "1599440",
    "end": "1606000"
  },
  {
    "text": "now when i return i have to unroll all of that because i have to restore the state of the processor back because if",
    "start": "1606000",
    "end": "1611279"
  },
  {
    "text": "you think about it i might have working variables in those registers right another state when i call the sub team",
    "start": "1611279",
    "end": "1617600"
  },
  {
    "text": "when i come back i need to keep to get those registers back down they were but because the stack we do in",
    "start": "1617600",
    "end": "1622880"
  },
  {
    "text": "reverse order the first thing we do is we reset the uh base pointer to be um we basically undo our our stack",
    "start": "1622880",
    "end": "1630400"
  },
  {
    "text": "change get rid of that extra table blocking us from going below it we then start popping things off in the",
    "start": "1630400",
    "end": "1635919"
  },
  {
    "text": "reverse order and get our registers back and then finally",
    "start": "1635919",
    "end": "1641520"
  },
  {
    "text": "boom we're back to where we were and executing forward all of this is done under the covers but",
    "start": "1641520",
    "end": "1646880"
  },
  {
    "text": "this is why it has to have a hardware notion of a stack because if it didn't have this you couldn't basically do subroutine calls",
    "start": "1646880",
    "end": "1652080"
  },
  {
    "text": "safely and so this is why it has its own stack and it's built in this behavior the stack pointer base",
    "start": "1652080",
    "end": "1658399"
  },
  {
    "text": "pointer is also really essential for doing like exceptions and other things where you want to be able to",
    "start": "1658399",
    "end": "1663760"
  },
  {
    "text": "unwind the stack entirely because it lets us basically unwind back to the",
    "start": "1663760",
    "end": "1669279"
  },
  {
    "text": "base pointer and know that we've now thrown out all of that error state down below now when you talk in fact uh in modern",
    "start": "1669279",
    "end": "1677039"
  },
  {
    "text": "languages uh you will we see you'll suddenly hear people say of oh that's allocated on the stack or",
    "start": "1677039",
    "end": "1682080"
  },
  {
    "text": "that's allocated on the heat this is in fact the stack they're talking about when they say it's allocated on the stack it's this thing that the processor is",
    "start": "1682080",
    "end": "1688480"
  },
  {
    "text": "using to track the exact state of where it is in the program and build up this state of information a stack overflow is",
    "start": "1688480",
    "end": "1694559"
  },
  {
    "text": "exception is when it has done so much of this it's run out of the memory region that it's allowed to use for the stack",
    "start": "1694559",
    "end": "1701200"
  },
  {
    "text": "because all the stack stuff is done in ram when we're pushing and popping it's not going to register it's going to main ram",
    "start": "1701200",
    "end": "1707200"
  },
  {
    "text": "and that means that it's only as fast as reading and writing ram is which is not as fast as we as registers",
    "start": "1707200",
    "end": "1714000"
  },
  {
    "text": "are by a good bit now this is a simple example we make it slightly more complicated",
    "start": "1714000",
    "end": "1719360"
  },
  {
    "start": "1715000",
    "end": "1870000"
  },
  {
    "text": "a is less than b then do more math and i'm passing those variables because almost always pass variables into functions then in fact it makes",
    "start": "1719360",
    "end": "1726240"
  },
  {
    "text": "things slightly more complicated we have what we did before of our setup but then we have to push in our",
    "start": "1726240",
    "end": "1732720"
  },
  {
    "text": "variables so we said we wanted to pass a and b into the function well we do it by pushing them onto the stack",
    "start": "1732720",
    "end": "1739919"
  },
  {
    "text": "then we transfer control to the subroutine the code in the subroutine knows to go read",
    "start": "1739919",
    "end": "1745039"
  },
  {
    "text": "backwards from the stack basically going back to read the variables and that's also",
    "start": "1745039",
    "end": "1750399"
  },
  {
    "text": "why by the way you notice we push the variables in reverse order i said on this previous screen we said we're calling do more math",
    "start": "1750399",
    "end": "1757039"
  },
  {
    "text": "a comma b but when we pushed him on the stack we pushed b then a this gets to by the way",
    "start": "1757039",
    "end": "1764000"
  },
  {
    "text": "fundamentally why languages support optional parameters do it at the end",
    "start": "1764000",
    "end": "1769679"
  },
  {
    "text": "because it means that basically they can know on the receiving side base as they read back they read back",
    "start": "1769679",
    "end": "1775360"
  },
  {
    "text": "until they run into that base pointer and go like well that's all you passed me because i've hit that pointer point now",
    "start": "1775360",
    "end": "1781679"
  },
  {
    "text": "there can't be anything more um for me to read and it lets them implement in hardware",
    "start": "1781679",
    "end": "1787440"
  },
  {
    "text": "efficiently and correctly that idea of how you pass things to another function so uh so it has to be done in that order",
    "start": "1787440",
    "end": "1794240"
  },
  {
    "text": "now when we return we have to we when we when we do that first step of unrolling the baseboard and stack pointer",
    "start": "1794240",
    "end": "1799679"
  },
  {
    "text": "we are throwing out those extra variables we pushed automatically that's also by the way when you declare",
    "start": "1799679",
    "end": "1805679"
  },
  {
    "text": "something in your program just in line it tends to do it on the stack for the same reason because that first step of doing a",
    "start": "1805679",
    "end": "1810880"
  },
  {
    "text": "return will automatically free all that ram back up by just resetting the base pointer now because memory can use again",
    "start": "1810880",
    "end": "1817039"
  },
  {
    "text": "and it doesn't care and then we unroll it so this basic structure is what's essential",
    "start": "1817039",
    "end": "1822880"
  },
  {
    "text": "to making any modern program of any complexity work and it needs that hardware stack now good news is we're never going to",
    "start": "1822880",
    "end": "1829760"
  },
  {
    "text": "we're never going to drill through this sort of assembler slog again this is what's happening under the covers for you automatically",
    "start": "1829760",
    "end": "1836559"
  },
  {
    "text": "in the way the microprocessor actually works so what you can see from this though is",
    "start": "1836559",
    "end": "1842480"
  },
  {
    "text": "that at the low level these instructions are very fragile like you have to do everything exactly right in exactly the",
    "start": "1842480",
    "end": "1848240"
  },
  {
    "text": "right order you have to do it they they are very stupid and they're very simple and that's",
    "start": "1848240",
    "end": "1853760"
  },
  {
    "text": "essential to making the cpu fast but frankly that's why it's taken us years and years and years to make this",
    "start": "1853760",
    "end": "1859279"
  },
  {
    "text": "stuff reliable because even a tiny little error means",
    "start": "1859279",
    "end": "1864399"
  },
  {
    "text": "the entirety of the processor becomes untrusted and that's it you're restarting",
    "start": "1864399",
    "end": "1869760"
  },
  {
    "text": "all right life wouldn't be very interesting though if we um if we just had very simple",
    "start": "1869760",
    "end": "1877440"
  },
  {
    "start": "1870000",
    "end": "2072000"
  },
  {
    "text": "blocks of of of of instructions um furthermore for us to understand the performance i",
    "start": "1877440",
    "end": "1883840"
  },
  {
    "text": "was starting to lead into a little bit there of hey let's talk about how we get this from memory and how we do these other things we need to understand a bit about how we",
    "start": "1883840",
    "end": "1890240"
  },
  {
    "text": "actually take those instructions and the cpu executes them how does it",
    "start": "1890240",
    "end": "1895360"
  },
  {
    "text": "actually do the work and know what work to do so the basic cycle again is common for",
    "start": "1895360",
    "end": "1901600"
  },
  {
    "text": "all modern cpus and it works like this you fetch these the next instructions",
    "start": "1901600",
    "end": "1906960"
  },
  {
    "text": "you want to do so you take that little pointer we've been maintaining of where are we uh on the program where we jump to or",
    "start": "1906960",
    "end": "1912880"
  },
  {
    "text": "what are we executing next we load that into the instruction register",
    "start": "1912880",
    "end": "1919360"
  },
  {
    "text": "we then have to decode it decide what the heck does it even say what is this instruction that i've loaded do you even know what it means",
    "start": "1919360",
    "end": "1926000"
  },
  {
    "text": "we may depend on the instruction have to go fetch data like if it said hey i want you to add you know this register in that",
    "start": "1926000",
    "end": "1932559"
  },
  {
    "text": "location in ram well now we have to go off and get that value from ram somehow then we go ahead do the work it asks us",
    "start": "1932559",
    "end": "1938640"
  },
  {
    "text": "to do take those two things add them together do whatever you want and then put the results somewhere and",
    "start": "1938640",
    "end": "1944240"
  },
  {
    "text": "then we start all over again so this basic five step cycle is the is is in concept",
    "start": "1944240",
    "end": "1950480"
  },
  {
    "text": "the way any microprocessor works let's walk it through that diagram we started with so here's the diagram we",
    "start": "1950480",
    "end": "1957120"
  },
  {
    "text": "started with and just to refresh ourselves again you notice a couple things on here we've got our our output register here ax we've got",
    "start": "1957120",
    "end": "1964720"
  },
  {
    "text": "our alu which was the logic unit the thing that actually knows what to do bx and dx and then and there are",
    "start": "1964720",
    "end": "1970559"
  },
  {
    "text": "conceptually other ones in here right that are little temporary storage locations to feed that into we have main memory but you",
    "start": "1970559",
    "end": "1976880"
  },
  {
    "text": "can see like you can't go from a member directly into this thing you've pretty much got to take the value and put it in a register",
    "start": "1976880",
    "end": "1982640"
  },
  {
    "text": "then work it we have that instruction point shows us where are we in our instruction",
    "start": "1982640",
    "end": "1988559"
  },
  {
    "text": "and we have uh from that instruction we actually load have one on deck this thing we're",
    "start": "1988559",
    "end": "1993679"
  },
  {
    "text": "running and boom our control unit to tell the cpu what to do let's go through that cycle we just talked about though and see how this all",
    "start": "1993679",
    "end": "1999679"
  },
  {
    "text": "plays out in the hardware so the first thing we had to do was fetch the next instruction right so there we go",
    "start": "1999679",
    "end": "2004880"
  },
  {
    "text": "we're actually um going instruction memory is just ram like anything else",
    "start": "2004880",
    "end": "2009919"
  },
  {
    "text": "our instruction pointer points to that memory and says hey here's the next one on deck that i need you to",
    "start": "2009919",
    "end": "2015120"
  },
  {
    "text": "to load we load that into our register and then we move that instruction pointer forward to the end of the",
    "start": "2015120",
    "end": "2020960"
  },
  {
    "text": "instruction we just loaded so it's ready to point to the next instruction basically okay cool then we have to decode that",
    "start": "2020960",
    "end": "2028399"
  },
  {
    "text": "sucker that means putting the cpu into the state where it's ready to evaluate it and execute what that instruction was",
    "start": "2028399",
    "end": "2036159"
  },
  {
    "text": "we may have to go fetch data from ram and put it into one of our registers to actually process it",
    "start": "2036159",
    "end": "2042000"
  },
  {
    "text": "then we do the actual work and that results in the the outcome being put in that register",
    "start": "2042000",
    "end": "2047120"
  },
  {
    "text": "we have for temporary uh results and then finally we probably are taking that result either stuffing it back into",
    "start": "2047120",
    "end": "2053358"
  },
  {
    "text": "main memory or we might be feeding it back into a register whatever we need to do next with that instruction",
    "start": "2053359",
    "end": "2058960"
  },
  {
    "text": "now that you'll one thing it's interesting you'll notice what the diagram i just did was virtually no box was lit up in more than",
    "start": "2058960",
    "end": "2067280"
  },
  {
    "text": "one stage of what we just processed and that turns out to matter a lot",
    "start": "2067280",
    "end": "2072720"
  },
  {
    "start": "2072000",
    "end": "2300000"
  },
  {
    "text": "the way that the machine goes through that sequence so that those five steps is talked about is controlled by the system clock",
    "start": "2073359",
    "end": "2079280"
  },
  {
    "text": "the systems clock something you've surely heard of it's basically an item that is the metronome keeping time inside the",
    "start": "2079280",
    "end": "2086560"
  },
  {
    "text": "microprocessor that sets the cadence that we step forward from stage to stage to stage now",
    "start": "2086560",
    "end": "2092398"
  },
  {
    "text": "the clock is generally implemented as a square wave pulse so we talk about the clock cycle being",
    "start": "2092399",
    "end": "2097599"
  },
  {
    "text": "the step from each time it goes from low to high so in fact if we did that say uh you know over and over and over",
    "start": "2097599",
    "end": "2104560"
  },
  {
    "text": "again that's our step function clock and at three gigahertz which is a pretty fast speed for a modern microprocessor",
    "start": "2104560",
    "end": "2111920"
  },
  {
    "text": "it does that three billion times per second which means that the width of one of those cycles from when it goes from low",
    "start": "2111920",
    "end": "2118800"
  },
  {
    "text": "to high back to low and it gets and gets ready to go high again is one three billionth of a second",
    "start": "2118800",
    "end": "2126000"
  },
  {
    "text": "so .33 nanoseconds which in terms of the speed of light is about",
    "start": "2126000",
    "end": "2131520"
  },
  {
    "text": "that 0.33 is about that far light can go in that amount of time which is to say that that is a crazy",
    "start": "2131520",
    "end": "2138079"
  },
  {
    "text": "short moment of time now what the cpu wants to do then is each time",
    "start": "2138079",
    "end": "2145119"
  },
  {
    "text": "the system clock rolls forward a click it wants to take on the next step of the work so it might start by",
    "start": "2145119",
    "end": "2150880"
  },
  {
    "text": "fetching our instruction decode that instruction fetch the data we need execute that",
    "start": "2150880",
    "end": "2156839"
  },
  {
    "text": "instruction write the result back and then having completed those five stages of processing now i fetched",
    "start": "2156839",
    "end": "2164560"
  },
  {
    "text": "the next instruction now from that basic standpoint you can see then that the amount of time it",
    "start": "2164560",
    "end": "2170400"
  },
  {
    "text": "takes to actually do one thing you've asked the cpu to do is actually five of these clock cycles",
    "start": "2170400",
    "end": "2177839"
  },
  {
    "text": "to do it to do instruction decode fetch execute and write back",
    "start": "2177839",
    "end": "2183440"
  },
  {
    "text": "now one of the things that they identified in the actual early 80s was gosh if you go back to our previous",
    "start": "2183599",
    "end": "2190160"
  },
  {
    "text": "diagram much of the cpu is not actually in use most of the time it's used for",
    "start": "2190160",
    "end": "2196400"
  },
  {
    "text": "only one of those phases so couldn't we get ahead of ourselves what if after we",
    "start": "2196400",
    "end": "2201839"
  },
  {
    "text": "did you know had say one operation going where we were decoding one instruction what if we then started decoding the",
    "start": "2201839",
    "end": "2208880"
  },
  {
    "text": "next instruction so we're always using each bit of the hardware every cycle just looking ahead to the next thing so",
    "start": "2208880",
    "end": "2215760"
  },
  {
    "text": "for example you see here that we might start by you see how this layers up where",
    "start": "2215760",
    "end": "2221040"
  },
  {
    "text": "we fetch an instruction and then that work goes on into the decoder but once that goes in the decoder we start fetching the next instruction",
    "start": "2221040",
    "end": "2228160"
  },
  {
    "text": "and then once that thing's decoded it goes to get memory meanwhile the decoder moves on to the next instruction and on",
    "start": "2228160",
    "end": "2233200"
  },
  {
    "text": "and on and on and on and on so that we're moving a bunch of things down through the line like you might an",
    "start": "2233200",
    "end": "2238480"
  },
  {
    "text": "assembly line in a factory or a car and in fact this is referred to as pipelining",
    "start": "2238480",
    "end": "2244400"
  },
  {
    "text": "and it was one of the first real compute tricks that was introduced in the mid 80s to make cpus a lot faster and it",
    "start": "2244400",
    "end": "2251200"
  },
  {
    "text": "works to a point the only real tricky things we have to do if you notice is that if i go to",
    "start": "2251200",
    "end": "2257200"
  },
  {
    "text": "execute something i might need the result from the previous operation to work",
    "start": "2257200",
    "end": "2262240"
  },
  {
    "text": "so we just have to add some shortcuts here that let me basically go oh let me take the result from an execute",
    "start": "2262240",
    "end": "2267280"
  },
  {
    "text": "and just put it right back into myself immediately so that i can basically build on top of it and as long",
    "start": "2267280",
    "end": "2272640"
  },
  {
    "text": "as i can do that i can kind of get down to one instruction per clock cycle",
    "start": "2272640",
    "end": "2278320"
  },
  {
    "text": "now that's not that's a bit of a factor but i can roughly get conceptually down to",
    "start": "2278320",
    "end": "2284320"
  },
  {
    "text": "that point where now i'm doing one thing per clock cycle once i have filled up my pipeline of work",
    "start": "2284320",
    "end": "2290640"
  },
  {
    "text": "this all sounds great right we've now gone from something that maybe took five clock seconds to get work done to",
    "start": "2290800",
    "end": "2296160"
  },
  {
    "text": "one-fifth sounds like we've really invented free money here but it's not as good as that because the problem is that most of our",
    "start": "2296160",
    "end": "2303200"
  },
  {
    "start": "2300000",
    "end": "2556000"
  },
  {
    "text": "code is full of stuff like this we say hey if this is true then do this other thing do this thing",
    "start": "2303200",
    "end": "2308720"
  },
  {
    "text": "otherwise do something different now we're into a problem because let's say that i'm going through my code and i start the same thing so if",
    "start": "2308720",
    "end": "2316000"
  },
  {
    "text": "a is less than b okay we've done that before i'm going to jump through and in this case i'm going to go to my else clause",
    "start": "2316000",
    "end": "2322160"
  },
  {
    "text": "if that qualifies so in one case i'm incrementing and in the next case i have to jump now over my my else",
    "start": "2322160",
    "end": "2328640"
  },
  {
    "text": "clause work otherwise i'm doing this other math and then finally i'm out here's where the problem comes in if i'm",
    "start": "2328640",
    "end": "2335040"
  },
  {
    "text": "walking down this instruction by instruction like cool doing a boo no problem next instructions to compare",
    "start": "2335040",
    "end": "2340240"
  },
  {
    "text": "great let's get that into the pipeline keep going j g e else uh oh i don't know",
    "start": "2340240",
    "end": "2346960"
  },
  {
    "text": "right here this well this is actually kind of okay but i can do this knowing that okay i'm gonna compare the result of that i need to shortcut the result in but",
    "start": "2346960",
    "end": "2354240"
  },
  {
    "text": "where am i going to go next am i going to execute this add instruction or am i going to do an",
    "start": "2354240",
    "end": "2359359"
  },
  {
    "text": "increment i don't know right there's no way for me to know until i've done this compare",
    "start": "2359359",
    "end": "2364640"
  },
  {
    "text": "whether this is the next instruction or that's the next instruction this became creates the rabbit hole of",
    "start": "2364640",
    "end": "2372000"
  },
  {
    "text": "virtually all of the computer optimization that's been happening in cpus from roundabout 89 until now",
    "start": "2372000",
    "end": "2379520"
  },
  {
    "text": "is what do you do with this because basically you've got a couple of choices you could",
    "start": "2379520",
    "end": "2385119"
  },
  {
    "text": "do nothing where you basically you go through and it's like oh okay you know what until i do a compare i don't know where i'm",
    "start": "2385119",
    "end": "2390880"
  },
  {
    "text": "going next so now i stall my pipeline and i don't let i don't pick either these instructions",
    "start": "2390880",
    "end": "2396480"
  },
  {
    "text": "i just kind of wait of course in that case i'm falling immediately back to that five steps to be able to get the next things",
    "start": "2396480",
    "end": "2402320"
  },
  {
    "text": "done that's pretty bad the next option i could do is i can guess i could basically say like either",
    "start": "2402320",
    "end": "2408720"
  },
  {
    "text": "i'm just going to always assume we take take the jump or always when we don't as long as i can throw away the result",
    "start": "2408720",
    "end": "2415119"
  },
  {
    "text": "and know in time i can make a guess and that's one of the first things people did because in fact",
    "start": "2415119",
    "end": "2420160"
  },
  {
    "text": "just because i've started loading the result doesn't mean that i've stored it back and as long as i don't take it out of that output",
    "start": "2420160",
    "end": "2426160"
  },
  {
    "text": "register and put it somewhere else i can undo the work i did and that's called",
    "start": "2426160",
    "end": "2431680"
  },
  {
    "text": "speculative execution you're executing something speculatively hoping it's going to be the path to go",
    "start": "2431680",
    "end": "2437040"
  },
  {
    "text": "and some processors even execute both this gets into an initial digression you",
    "start": "2437040",
    "end": "2443680"
  },
  {
    "text": "have you ever wondered what makes for example an intel xeon processor different than say a desktop or laptop processor",
    "start": "2443680",
    "end": "2449920"
  },
  {
    "text": "one of the major thing differences is that they put extra hardware in those higher end server processors so when",
    "start": "2449920",
    "end": "2455440"
  },
  {
    "text": "they're faced with a compare like this they have enough extra hardware they just do both both things",
    "start": "2455440",
    "end": "2460480"
  },
  {
    "text": "in fact they've never extra hardware that they can do both things and then if those two result in another jump",
    "start": "2460480",
    "end": "2465520"
  },
  {
    "text": "statement they can do both of those things and if those two result another jump they can do both of those things",
    "start": "2465520",
    "end": "2470720"
  },
  {
    "text": "all before knowing which of the original outcomes they were going to take that's referred to as a super scalar",
    "start": "2470720",
    "end": "2476000"
  },
  {
    "text": "processor and and it's a lot of extra hardware but if you are",
    "start": "2476000",
    "end": "2481200"
  },
  {
    "text": "if you basically if you have the power budget where you can afford to actually um",
    "start": "2481200",
    "end": "2487599"
  },
  {
    "text": "power all those extra all that extra little bits the cpu and you have the space budget you can put a big enough chip in your box",
    "start": "2487599",
    "end": "2494720"
  },
  {
    "text": "why not and it gives you consistent high throughput uh even in the face of code that's doing",
    "start": "2494720",
    "end": "2499760"
  },
  {
    "text": "all kinds of if them else stuff it's a core thing that's fundamental to",
    "start": "2499760",
    "end": "2504880"
  },
  {
    "text": "particularly the xeon processors but it's also by the way what differentiates say an i7 from a laptop processor",
    "start": "2504880",
    "end": "2511440"
  },
  {
    "text": "um because laptops are really in the day very much about how how can i spend the least amount of",
    "start": "2511440",
    "end": "2516960"
  },
  {
    "text": "power uh you know in my i3 i5 particularly laptop grade processor versus um oh no i've got you know a good",
    "start": "2516960",
    "end": "2524319"
  },
  {
    "text": "thermal budget where i can cool myself and i've so like a desktop i799 actually has some of that ability where it will just execute",
    "start": "2524319",
    "end": "2530400"
  },
  {
    "text": "both cases and then it'll throw one of those two out",
    "start": "2530400",
    "end": "2535279"
  },
  {
    "text": "so it's it's a wonderful cheat and now this is everything we've been",
    "start": "2535520",
    "end": "2541119"
  },
  {
    "text": "talking about is happening inside the computer but if all we did was work inside of our cpu",
    "start": "2541119",
    "end": "2546560"
  },
  {
    "text": "then we'd never be able to see the outcome of our program we never be able to build them into bigger and bigger things that actually achieve the results",
    "start": "2546560",
    "end": "2552640"
  },
  {
    "text": "that we do today so how does that all come together",
    "start": "2552640",
    "end": "2557040"
  },
  {
    "start": "2556000",
    "end": "2946000"
  },
  {
    "text": "it turns out it's uh it's where things basically get complicated and slow as we start going outside of the processor and let's get back to one of",
    "start": "2557680",
    "end": "2564480"
  },
  {
    "text": "our simpler examples where we said hey i want to go ahead and grab a value from memory so this is",
    "start": "2564480",
    "end": "2569680"
  },
  {
    "text": "move ebx ecx means go to the location of main memory 22 by ecx take that value put it in ram",
    "start": "2569680",
    "end": "2577440"
  },
  {
    "text": "at ebx it turns out in any remotely modern computer accessing a location or ram is tricky",
    "start": "2577440",
    "end": "2585839"
  },
  {
    "text": "this one happens for you but the hardware has to deal with it so the first thing i have to do actually is cheat and look up and say",
    "start": "2585839",
    "end": "2593359"
  },
  {
    "text": "where is that value actually in memory because all modern microprocessors lie to their",
    "start": "2593359",
    "end": "2599760"
  },
  {
    "text": "own cpu basically or the instructions about where things are in ram they do it",
    "start": "2599760",
    "end": "2604960"
  },
  {
    "text": "to support virtual memory so the first thing i have to do is actually take that value of ecx and go like okay cool but",
    "start": "2604960",
    "end": "2611200"
  },
  {
    "text": "where is this actually in memory and i have to use something called a tlb or translation like a side buffer to",
    "start": "2611200",
    "end": "2617040"
  },
  {
    "text": "take that value and translate it to what page it should be on and then where",
    "start": "2617040",
    "end": "2622720"
  },
  {
    "text": "is that page actually in physical memory if it is because if it's not in physical memory i'd have to invoke the virtual memory",
    "start": "2622720",
    "end": "2628880"
  },
  {
    "text": "subsystem go get it off of disk or ever storing virtual memory and put it in play and this matters because in our",
    "start": "2628880",
    "end": "2635440"
  },
  {
    "text": "modern applications we act like we have an infinite amount of ram and to make that trick work we had to have memory virtualization so",
    "start": "2635440",
    "end": "2643520"
  },
  {
    "text": "this is an essential trick where your program runs thinking it has all the memory in the world and it's the only thing running",
    "start": "2643520",
    "end": "2649599"
  },
  {
    "text": "but eventually you have to interact with the hardware where it says ah that thing you think of as page you know 2fc6e",
    "start": "2649599",
    "end": "2656480"
  },
  {
    "text": "it's actually in main ram as 3a6 c2 and it does this by looking this up in a",
    "start": "2656480",
    "end": "2662319"
  },
  {
    "text": "buffer that that um that that basically is a little cache for this value otherwise have to do the hard math and",
    "start": "2662319",
    "end": "2667839"
  },
  {
    "text": "go look up in ram itself to see where is this actually",
    "start": "2667839",
    "end": "2672640"
  },
  {
    "text": "from that then what it's really definitely hoping is this value's in cash because inside of the microprocessor",
    "start": "2673040",
    "end": "2678480"
  },
  {
    "text": "there is a fast aging area that is your level one cache in the chip how big it is",
    "start": "2678480",
    "end": "2684480"
  },
  {
    "text": "how you access it varies a lot by physical processor but it's a thing it's essential because if if i can go",
    "start": "2684480",
    "end": "2690800"
  },
  {
    "text": "finding cash it's a lot faster how does we do that well we literally have a hardware thing",
    "start": "2690800",
    "end": "2695839"
  },
  {
    "text": "that can almost instantaneously go and say well if this is the address you're looking for i'm going to basically do a hardware",
    "start": "2695839",
    "end": "2702560"
  },
  {
    "text": "level operation of hoping it's in cash and and it either is or isn't if it's not i get a squash if it",
    "start": "2702560",
    "end": "2708640"
  },
  {
    "text": "is i just get the value and done the reason that this technology really matters is performance",
    "start": "2708640",
    "end": "2715839"
  },
  {
    "text": "when we go to actually pull things out of ram the time it takes to pull a value out of level one cache",
    "start": "2715839",
    "end": "2721359"
  },
  {
    "text": "in a modern cpu is this is a desktop cpu data i'm using right here by the way laptops are generally slower",
    "start": "2721359",
    "end": "2727599"
  },
  {
    "text": "it takes about four clock cycles to get something out of level one cache so remember that step where we said hey just go fetch affect the data i need for",
    "start": "2727599",
    "end": "2734240"
  },
  {
    "text": "my operation you got one clock cycle to get done well in truth it takes at least four clock cycles to do that step",
    "start": "2734240",
    "end": "2741520"
  },
  {
    "text": "that's if it's in level one cache but if it's not in that cache we might go to level two cache now level",
    "start": "2741520",
    "end": "2747760"
  },
  {
    "text": "two cache generally bigger but slower it takes 12 clock cycles to get something from level",
    "start": "2747760",
    "end": "2753359"
  },
  {
    "text": "two cache it's not there and we're really lucky so this is a desktop cpu it actually has a level three cache",
    "start": "2753359",
    "end": "2759520"
  },
  {
    "text": "that's cool that's much bigger yet but it takes 36 clock cycles to get a",
    "start": "2759520",
    "end": "2764720"
  },
  {
    "text": "value out of ram now this is a desktop cpu actually has all three of these levels but the performances fall off as you go",
    "start": "2764720",
    "end": "2770079"
  },
  {
    "text": "you'll notice that last one says four megabytes if you go look up the spec on a processor they'll say like oh it's an",
    "start": "2770079",
    "end": "2775440"
  },
  {
    "text": "intel i7 and it runs at three gigahertz and it's four cores with x of cash they're referring to that",
    "start": "2775440",
    "end": "2781839"
  },
  {
    "text": "level three cache right there that's what they're actually referring to and that's 36 clock cycles so if you",
    "start": "2781839",
    "end": "2787440"
  },
  {
    "text": "think about it that's a lot of time if getting the value at a register is one clock cycle it takes 36",
    "start": "2787440",
    "end": "2793280"
  },
  {
    "text": "times that amount of time to get it from cash and cash is still fast why do i say that because god help me if",
    "start": "2793280",
    "end": "2799440"
  },
  {
    "text": "i have to go to maine ram even on a desktop system with very good",
    "start": "2799440",
    "end": "2804560"
  },
  {
    "text": "memory 200 clock cycles to get the value out of",
    "start": "2804560",
    "end": "2809680"
  },
  {
    "text": "main ram so you can see why we have these levels of cache because if i have to stall to get the value from actual",
    "start": "2809680",
    "end": "2815520"
  },
  {
    "text": "memory holy cow is that slow relative to my caches relative to",
    "start": "2815520",
    "end": "2820960"
  },
  {
    "text": "uh the registers in the cpu best way to visualize this is for me to scale the numbers a little bit",
    "start": "2820960",
    "end": "2827200"
  },
  {
    "text": "if one cp in real world one cpu cycle we said for a three gigahertz processor was about point three three nanoseconds",
    "start": "2827200",
    "end": "2833200"
  },
  {
    "text": "very fast but let's say that was one second let's pretend for a second that was one second because we need our head",
    "start": "2833200",
    "end": "2838240"
  },
  {
    "text": "around one second at a time you know it's about that long well",
    "start": "2838240",
    "end": "2844319"
  },
  {
    "text": "level one cache access then would take three seconds level two cache take eight seconds if i have to go out",
    "start": "2844319",
    "end": "2849920"
  },
  {
    "text": "to main memory that's 200 clock cycles that's 3.3 minutes of time",
    "start": "2849920",
    "end": "2856240"
  },
  {
    "text": "now you can see the relative weight of why like oh my gosh this stuff gets expensive even access ram",
    "start": "2856240",
    "end": "2861520"
  },
  {
    "text": "but we're not done yet if i have an ssd we're talking days to get data off of",
    "start": "2861520",
    "end": "2868000"
  },
  {
    "text": "that and this is the things we consider high speed storage days",
    "start": "2868000",
    "end": "2873040"
  },
  {
    "text": "how to get off hard disk we're literally going to be talking about entirely new javascript frameworks in the time frame",
    "start": "2873040",
    "end": "2878559"
  },
  {
    "text": "it would take to get that value back now if i have to reach across the internet and go from here to oslo",
    "start": "2878559",
    "end": "2886240"
  },
  {
    "text": "there will be children grown up and in school by the time we get back that value",
    "start": "2886240",
    "end": "2892640"
  },
  {
    "text": "so this helps you think about why modern performance is really about",
    "start": "2892720",
    "end": "2898240"
  },
  {
    "text": "the most important thing you can do is keep things in close by keep them in the processor or",
    "start": "2898240",
    "end": "2903680"
  },
  {
    "text": "right maybe in main memory or god help you maybe on ssd and if you're really unlucky on local disk because if you have to go across",
    "start": "2903680",
    "end": "2909839"
  },
  {
    "text": "the internet to get it wow is that slow so all these pieces",
    "start": "2909839",
    "end": "2915040"
  },
  {
    "text": "build up and they um they dramatically affected performance now most the time we can rely on our compilers",
    "start": "2915040",
    "end": "2921599"
  },
  {
    "text": "to help us out with this and make this stuff fast but they still need our help in certain",
    "start": "2921599",
    "end": "2927680"
  },
  {
    "text": "places when we do uh things where we allocate too much memory or we use something it's memory efficient we're really hurting ourselves because",
    "start": "2927680",
    "end": "2934640"
  },
  {
    "text": "of the way that caching works if you start blowing caching in your core in your processor you can there's no amount of other",
    "start": "2934640",
    "end": "2940559"
  },
  {
    "text": "clever is going to get you around that that performance issue",
    "start": "2940559",
    "end": "2945599"
  },
  {
    "start": "2946000",
    "end": "2956000"
  },
  {
    "text": "one last step then before we've scaled up we've been talking about uh how one program works by one thread",
    "start": "2946720",
    "end": "2954720"
  },
  {
    "text": "of execution so one thread execution meaning one instruction pointer one program",
    "start": "2954720",
    "end": "2960160"
  },
  {
    "text": "one keeping track of where we are one bit of jumping around but modern apps don't work that way i",
    "start": "2960160",
    "end": "2966559"
  },
  {
    "text": "mean this was the way early 80s stuff worked you know when we had dos or ms-dos and we fired things up and the",
    "start": "2966559",
    "end": "2971839"
  },
  {
    "text": "way we went that's how this went but today everything we do now runs our modern um",
    "start": "2971839",
    "end": "2979760"
  },
  {
    "text": "preemptive multi-processing operating systems with safeties built into them so how does that work",
    "start": "2979760",
    "end": "2985359"
  },
  {
    "text": "well we have threads of execution we have multiple of them in a process",
    "start": "2985359",
    "end": "2991280"
  },
  {
    "text": "a way to think of a process amongst other things the process thinks is the only thing running on the computer it thinks it has all the memory address",
    "start": "2991280",
    "end": "2997760"
  },
  {
    "text": "space in the world and it is only able to view its own memory",
    "start": "2997760",
    "end": "3003040"
  },
  {
    "text": "basically now we have a thing called a kernel this is in true of any modern operating",
    "start": "3003040",
    "end": "3008800"
  },
  {
    "text": "system they use a kernel which is the thing that actually interfaces with the hardware or the virtualization layer beneath it",
    "start": "3008800",
    "end": "3014240"
  },
  {
    "text": "windows as kernel linux etc and that kernel basically defines a spec of how you might talk to get into the",
    "start": "3014240",
    "end": "3020720"
  },
  {
    "text": "hardware as well as how does it protect and",
    "start": "3020720",
    "end": "3025839"
  },
  {
    "text": "move data between other processes distinction distinction between kernel and process really matters because if",
    "start": "3025839",
    "end": "3030960"
  },
  {
    "text": "the kernel crashes everything's gone you're rebooting the processor but if a process crashes",
    "start": "3030960",
    "end": "3037520"
  },
  {
    "text": "because it's it's looking at a false sort of somewhat virtualized view of the world",
    "start": "3037520",
    "end": "3043359"
  },
  {
    "text": "that's okay it can go away and the whole rest of the machine keeps running",
    "start": "3043359",
    "end": "3048480"
  },
  {
    "text": "um many folks might remember but this was the the the holy grail of late 90s or late",
    "start": "3048480",
    "end": "3054880"
  },
  {
    "text": "80s early 90s development was affordable desktop systems that had true preemptive multitasking where you could",
    "start": "3054880",
    "end": "3061520"
  },
  {
    "text": "have an application die and not have to restart the machine because for the longest time i was like well that crashed because i should",
    "start": "3061520",
    "end": "3067200"
  },
  {
    "text": "reboot before i try another run because god knows what that did um and and that those problems are",
    "start": "3067200",
    "end": "3072559"
  },
  {
    "text": "essentially behind us now really to a remarkable degree but took a tremendous amount of engineering over a long period of time",
    "start": "3072559",
    "end": "3079599"
  },
  {
    "text": "this isn't just there for reliability though in safety because the process can only should be only able to see its information uh in",
    "start": "3079599",
    "end": "3085040"
  },
  {
    "text": "its scope but this also affects your application performance so for example a single web page in most",
    "start": "3085040",
    "end": "3090720"
  },
  {
    "text": "modern browsers is done as a process behind the scenes there's a process the core along course quarter long correlates to that web page",
    "start": "3090720",
    "end": "3097920"
  },
  {
    "text": "and its javascript execution and what have you and then we have multiple threads of execution now",
    "start": "3097920",
    "end": "3103599"
  },
  {
    "text": "as they the thing is you they might have a bunch of threads but you only have so many cores on your cpu so every once in a while cps to stop",
    "start": "3103599",
    "end": "3111280"
  },
  {
    "text": "working on one thread of execution and switch to another thread that's called a context switch and you can see that happen",
    "start": "3111280",
    "end": "3117680"
  },
  {
    "text": "uh if you go look at there's other in lower level metrics of looking the machine or operating system performance you'll see it refer to how",
    "start": "3117680",
    "end": "3123920"
  },
  {
    "text": "many context widgets per seconds it have to do and basically if you have more threads of execution then you have number of",
    "start": "3123920",
    "end": "3129040"
  },
  {
    "text": "course which is essentially always the case you're going to have context switching where it has to stop doing work on one thread",
    "start": "3129040",
    "end": "3135599"
  },
  {
    "text": "and turn around start doing work on another thread and that has a certain performance impact for it to do that",
    "start": "3135599",
    "end": "3141599"
  },
  {
    "text": "additionally every time your thread of execution goes in and out of the kernel because it's switching secure modes in",
    "start": "3141599",
    "end": "3148240"
  },
  {
    "text": "the processor itself that has a certain amount of performance penalty for the cpu to basically say",
    "start": "3148240",
    "end": "3154800"
  },
  {
    "text": "like okay hold on a second you're going from your code into the kernel which means i'm switching from this security mode to that security mode",
    "start": "3154800",
    "end": "3161440"
  },
  {
    "text": "i now allow these operations but don't allow those operations things like that uh the way i look at memory becomes",
    "start": "3161440",
    "end": "3167119"
  },
  {
    "text": "different etc um so for it to do all that takes a little bit of time for to switch modes",
    "start": "3167119",
    "end": "3172160"
  },
  {
    "text": "like that that mode switch from user to kernel mode and this notably impacts performance because for",
    "start": "3172160",
    "end": "3177760"
  },
  {
    "text": "example if you have something like video drivers or real-time io that can really get held up if you're doing a lot of these switches in and out",
    "start": "3177760",
    "end": "3184079"
  },
  {
    "text": "of kernel mode because of the security constraints for that and the performance for that is pretty",
    "start": "3184079",
    "end": "3189119"
  },
  {
    "text": "pretty dramatic in terms of what it does because let's look at what's happening back in the hardware again",
    "start": "3189119",
    "end": "3194800"
  },
  {
    "text": "every time i switch the context switch i have to save the state of every one of",
    "start": "3194800",
    "end": "3200319"
  },
  {
    "text": "these registers somewhere so that i can get back to this thread of execution later because",
    "start": "3200319",
    "end": "3205920"
  },
  {
    "text": "the thread of execution is really defined by that instruction pointer plus the state of all those other registers in the cpu",
    "start": "3205920",
    "end": "3212000"
  },
  {
    "text": "and i have to put it somewhere if i put it in ram is what i do or in a cache buffer inside the chip that's dedicated for",
    "start": "3212000",
    "end": "3218160"
  },
  {
    "text": "this but that takes time to take all those values put them somewhere make sure i'm all",
    "start": "3218160",
    "end": "3223599"
  },
  {
    "text": "good to go and if i'm switching to something else they have to load their values in and then say go and and fire off from",
    "start": "3223599",
    "end": "3230480"
  },
  {
    "text": "there so if we compare these guys so a mode switch happens when we have same third",
    "start": "3230480",
    "end": "3236960"
  },
  {
    "text": "execution but we're going into that high security context of the kernel it takes about 50 nanoseconds on a",
    "start": "3236960",
    "end": "3243760"
  },
  {
    "text": "modern processor to do that same processor i was using before desktop processor so that's a lot of time by if we scaled",
    "start": "3243760",
    "end": "3250480"
  },
  {
    "text": "one clock cycle to be a second that's two and a half minutes of time so if you imagine again your programs",
    "start": "3250480",
    "end": "3255599"
  },
  {
    "text": "happen to run along then you access a kernel resource like a handle to a file system that kind of",
    "start": "3255599",
    "end": "3260800"
  },
  {
    "text": "thing it's effectively waiting like you know two and a half minutes of our scale time 15 seconds in reality",
    "start": "3260800",
    "end": "3266160"
  },
  {
    "text": "to make that transition uh to be and then be able to do the work he wants to do but at least that's fairly predictable",
    "start": "3266160",
    "end": "3272960"
  },
  {
    "text": "as in like you you you know that you can do that in a bounded period of time context switching to a different threat",
    "start": "3272960",
    "end": "3278559"
  },
  {
    "text": "of execution is much worse it takes about 3 000 nanoseconds the scaled time of 16 minutes this talk",
    "start": "3278559",
    "end": "3285839"
  },
  {
    "text": "will be over and done we'll be maybe having our final chats in the slack channel by the time that context which completes",
    "start": "3285839",
    "end": "3293760"
  },
  {
    "text": "so if you take nothing else away from from this this thread of the conversation it's that",
    "start": "3293760",
    "end": "3300720"
  },
  {
    "text": "context switching is the worst thing next to talking across the internet that you can do to your application for",
    "start": "3301440",
    "end": "3308160"
  },
  {
    "text": "performance what does this mean for you as a developer well to delve in that for a second means",
    "start": "3308160",
    "end": "3313200"
  },
  {
    "text": "that having multiple threads is great right up until you have more threads that want to run then you have cores in your cpu because",
    "start": "3313200",
    "end": "3319680"
  },
  {
    "text": "the minute you do that they're going to start context switching a lot and you will context what yourself to death",
    "start": "3319680",
    "end": "3325119"
  },
  {
    "text": "because the amount of time it takes to switch contacts is very long and if you then have it so they have to",
    "start": "3325119",
    "end": "3330480"
  },
  {
    "text": "like go then start waiting for work another thread does or they can't do enough work you have not uh basically made efficient",
    "start": "3330480",
    "end": "3336319"
  },
  {
    "text": "use of your cpu it's always busy but it's basically always busy just interrupting itself back and forth",
    "start": "3336319",
    "end": "3343040"
  },
  {
    "text": "um doing things so you're not getting useful work done",
    "start": "3343040",
    "end": "3348079"
  },
  {
    "text": "all right let me hit the summary then",
    "start": "3348079",
    "end": "3353520"
  },
  {
    "text": "so very simply cpus do simple things very fast they're",
    "start": "3356960",
    "end": "3363359"
  },
  {
    "start": "3359000",
    "end": "3599000"
  },
  {
    "text": "the opposite of people they're stupid very fast at being stupid whereas people are very uh are very slow",
    "start": "3363359",
    "end": "3371680"
  },
  {
    "text": "but can you think through very complicated phenomena the instruction set is what determines that compatibility what we talked through",
    "start": "3371680",
    "end": "3377920"
  },
  {
    "text": "today was the intel instruction set arm instruction set looks a little differently arms which used virtually every mobile device",
    "start": "3377920",
    "end": "3384799"
  },
  {
    "text": "even your main ram even in the best system is dramatically slower than the cpu's register so",
    "start": "3384799",
    "end": "3391839"
  },
  {
    "text": "what that does mean by the way is if you want to speed up your program there's really two things take away one was my don't over thread thing the second",
    "start": "3391839",
    "end": "3398319"
  },
  {
    "text": "thing is just allocate less rand if there's any of you folks have been following the.net core teams development work over the past",
    "start": "3398319",
    "end": "3404000"
  },
  {
    "text": "i don't know four years the common thread they talk about all the time is don't allocate ram",
    "start": "3404000",
    "end": "3409280"
  },
  {
    "text": "just don't allocate ram if you get away with not allocating it's much faster and that's because in the end it really",
    "start": "3409280",
    "end": "3414400"
  },
  {
    "text": "is that the smaller you can make the memory footprint of the data you're working with your code the faster your application will run all",
    "start": "3414400",
    "end": "3421520"
  },
  {
    "text": "you know general other things being equal and it's one of the most important things you can do to speed things up which i'm sure it's kind of awkward for",
    "start": "3421520",
    "end": "3427520"
  },
  {
    "text": "someone to talk about when they're you know.net has a managed runtime which means it's already sacrificing memory efficiency in a number of ways",
    "start": "3427520",
    "end": "3433920"
  },
  {
    "text": "for programming efficiency and reliability finally and because this uh you know of",
    "start": "3433920",
    "end": "3439680"
  },
  {
    "text": "the time slot for this talk i wasn't able to get into this very far but there are two types of processors",
    "start": "3439680",
    "end": "3444720"
  },
  {
    "text": "out there payments the whole world has evolved into risk chips the most common today one being arm processors",
    "start": "3444720",
    "end": "3450880"
  },
  {
    "text": "which stands for reduced instruction set computing and cisc chips which are only ever built by intel now",
    "start": "3450880",
    "end": "3456559"
  },
  {
    "text": "which is your in uh i-86 uh you know your standard desktop pc server that kind of thing",
    "start": "3456559",
    "end": "3462960"
  },
  {
    "text": "risk heavily biased towards small low power low thermal like you can't",
    "start": "3462960",
    "end": "3469040"
  },
  {
    "text": "drain a lot of heat scenarios sisk is kind of the opposite optimization maximum throughput",
    "start": "3469040",
    "end": "3476000"
  },
  {
    "text": "um uh maximum performance so um this is why we've devolved into",
    "start": "3476000",
    "end": "3481760"
  },
  {
    "text": "the duopoly we see today where uh all of our phones are using risk chips in one variant or another",
    "start": "3481760",
    "end": "3488079"
  },
  {
    "text": "even with intel trying to be in the mobile phone market does it with a dedicated chip it's a risk chip sis chips though still",
    "start": "3488079",
    "end": "3494319"
  },
  {
    "text": "own the laptop marketing up for the moment i know apple's about change the game on that a little bit but they still basically deal on that market",
    "start": "3494319",
    "end": "3501440"
  },
  {
    "text": "and it comes down to uh cis chips have a high it basically comes down to that instruction set makes it so useful to",
    "start": "3501440",
    "end": "3508559"
  },
  {
    "text": "still be able to run intel programs and intel has innovated like crazy to inside of their chip come up with",
    "start": "3508559",
    "end": "3514480"
  },
  {
    "text": "tricks where they basically can run much of what you do like it was an arm or a wrist chip and only fall back",
    "start": "3514480",
    "end": "3521599"
  },
  {
    "text": "to the bigger uh slower sets where they have to uh and in so doing they kind of cheated death",
    "start": "3521599",
    "end": "3526960"
  },
  {
    "text": "on that architecture and it gives them very predictably consistent high performance",
    "start": "3526960",
    "end": "3532480"
  },
  {
    "text": "where you can afford the literally the power to the cpu like the you know the the um amperage to the chip and where you",
    "start": "3532480",
    "end": "3539839"
  },
  {
    "text": "can afford to dissipate then all that power as heat that's where it all goes so and with that uh i thank you very",
    "start": "3539839",
    "end": "3546400"
  },
  {
    "text": "much thank you for coming to the talk and uh if you have any questions please put them in slack",
    "start": "3546400",
    "end": "3551440"
  },
  {
    "text": "i will stay as long as get those answered love those questions um if you want to tell me about how i have totally wasted now of your time or",
    "start": "3551440",
    "end": "3557359"
  },
  {
    "text": "you could have gone to much better talks there's some great contact info there for that uh best place to publicly rant",
    "start": "3557359",
    "end": "3562400"
  },
  {
    "text": "to me is on twitter if you if you want to do it privately there's my email address as well and the blog for my company and one of",
    "start": "3562400",
    "end": "3569680"
  },
  {
    "text": "our core products there's one question i see in slack that's a great one um that didn't get hit",
    "start": "3569680",
    "end": "3574799"
  },
  {
    "text": "which what does the cpu do when basically it fills up cash and the answer that is there's dedicated",
    "start": "3574799",
    "end": "3580480"
  },
  {
    "text": "hardware and other tricks that basically make sure that it has it tries to have the right things in cash as it goes",
    "start": "3580480",
    "end": "3586000"
  },
  {
    "text": "and in fact let me double back to the slide just talk a little bit about how that works um so when we go pull something if",
    "start": "3586000",
    "end": "3593359"
  },
  {
    "text": "if we missed in level one cache and missed in level two cache and missing level three cache hit the main memory we'll make sure you",
    "start": "3593359",
    "end": "3598640"
  },
  {
    "text": "pull it back it pops itself into those caches displacing something else that was one of the last",
    "start": "3598640",
    "end": "3604720"
  },
  {
    "text": "least recently used pages of information most caches start off with the basically",
    "start": "3604720",
    "end": "3610079"
  },
  {
    "text": "whatever i've used most recently keep that in cash um as a naive algorithm but the fact is that there's",
    "start": "3610079",
    "end": "3616240"
  },
  {
    "text": "actually extensive work that intel and different folks do in the hardware to optimize what they evict from cash",
    "start": "3616240",
    "end": "3621920"
  },
  {
    "text": "when in what circumstances to avoid certain problems but they basically when they fill up",
    "start": "3621920",
    "end": "3627359"
  },
  {
    "text": "that four mega cash for example they will go through and when they have to put when they basically get a miss",
    "start": "3627359",
    "end": "3632640"
  },
  {
    "text": "they look at the cash and say great who's the victim here oh you're the one that's been used least often boom i get you out and there's actual",
    "start": "3632640",
    "end": "3638799"
  },
  {
    "text": "like literally delicate silicon in the hardware to make that performance so you can do that",
    "start": "3638799",
    "end": "3644400"
  },
  {
    "text": "in basically make those decisions almost instantaneously and there's a lot of interesting details",
    "start": "3644400",
    "end": "3649520"
  },
  {
    "text": "on how that works that i unfortunately obviously don't have time to get to in a one hour talk but this is really what the hardware folks spend their time innovating on",
    "start": "3649520",
    "end": "3656079"
  },
  {
    "text": "is what caches how big are they um what's the performance of axiom and they're out how clever is our algorithm",
    "start": "3656079",
    "end": "3662720"
  },
  {
    "text": "how much do we rely on the compiler to do be smart versus we make the chip smart and that kind of goes back and forth",
    "start": "3662720",
    "end": "3668000"
  },
  {
    "text": "where they'll tell the compiler developers hey we want you to optimize what you're doing by you know",
    "start": "3668000",
    "end": "3673599"
  },
  {
    "text": "by putting the the most likely jump first or instruction first that kind of thing and we'll bias that",
    "start": "3673599",
    "end": "3679599"
  },
  {
    "text": "direction and it so kind of goes back and forth from smart compilers then um to know let's",
    "start": "3679599",
    "end": "3685119"
  },
  {
    "text": "make the chips smarter because we can't rely on developers ever thinking about performance uh back and forth as chips get bigger",
    "start": "3685119",
    "end": "3691119"
  },
  {
    "text": "and have to get smaller again things like that any other questions uh please pan them",
    "start": "3691119",
    "end": "3696799"
  },
  {
    "text": "in the slack channel and uh really thank you very much for coming to talk i really appreciate the",
    "start": "3696799",
    "end": "3702160"
  },
  {
    "text": "number of folks attended uh i know that it's kind of weird doing uh conferences virtually this year",
    "start": "3702160",
    "end": "3708000"
  },
  {
    "text": "but uh stay safe uh stay home take care of yourself and your family",
    "start": "3708000",
    "end": "3713839"
  },
  {
    "text": "like to see you next year",
    "start": "3713839",
    "end": "3717599"
  }
]