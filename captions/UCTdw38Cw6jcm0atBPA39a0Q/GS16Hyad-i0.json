[
  {
    "text": "so good day Melbourne I'm Dave Aronson the T-Rex of codosaurus and I flew all",
    "start": "6140",
    "end": "14639"
  },
  {
    "text": "the way down here on my pterodactyl to teach you to kill mutant",
    "start": "14639",
    "end": "22340"
  },
  {
    "text": "but first a bit of a caveat I do not consider myself an expert on mutation",
    "start": "22980",
    "end": "28859"
  },
  {
    "text": "testing I used it a little bit read more about it discussed it a little with the",
    "start": "28859",
    "end": "34620"
  },
  {
    "text": "real experts the people who write the tools but uh I don't consider myself an",
    "start": "34620",
    "end": "41160"
  },
  {
    "text": "expert but one of the dirty little secrets of public speaking including at",
    "start": "41160",
    "end": "46739"
  },
  {
    "text": "conferences is that you don't need to be an expert on your topic you just need to know a little bit more than your",
    "start": "46739",
    "end": "53579"
  },
  {
    "text": "audience enough to make it worth their time to listen to you and be able to convey it to them and mutation testing",
    "start": "53579",
    "end": "60539"
  },
  {
    "text": "is still so rare that most developers haven't even heard of it so let's start",
    "start": "60539",
    "end": "65880"
  },
  {
    "text": "with the very Basics what on infinite Earths is mutation testing in our",
    "start": "65880",
    "end": "72000"
  },
  {
    "text": "universe that of software development not comic books excuse me graphic novels",
    "start": "72000",
    "end": "77939"
  },
  {
    "text": "it's a software testing technique surprise but what makes this technique different",
    "start": "77939",
    "end": "84299"
  },
  {
    "text": "from all the other techniques the big difference is that most of the",
    "start": "84299",
    "end": "89820"
  },
  {
    "text": "others are about checking whether our code is correct mutation testing however assumes that",
    "start": "89820",
    "end": "97140"
  },
  {
    "text": "our code is already correct at least in the sense of passing its tests which",
    "start": "97140",
    "end": "102299"
  },
  {
    "text": "means it also assumes that we have tests mutation testing instead is looking for",
    "start": "102299",
    "end": "109259"
  },
  {
    "text": "not just one but actually two other properties and in my opinion the more",
    "start": "109259",
    "end": "115380"
  },
  {
    "text": "interesting and usually immediately helpful of these is that our test Suite",
    "start": "115380",
    "end": "121320"
  },
  {
    "text": "is strict now you might be thinking isn't that what test coverage is for if we have a",
    "start": "121320",
    "end": "128580"
  },
  {
    "text": "hundred percent coverage doesn't that mean that our code is fully tested no",
    "start": "128580",
    "end": "135180"
  },
  {
    "text": "the only thing that coverage tells us is that at least one test executed the code",
    "start": "135180",
    "end": "142620"
  },
  {
    "text": "that it claims is covered the stuff shown in usually in green and that no",
    "start": "142620",
    "end": "147840"
  },
  {
    "text": "tests executed the stuff that it doesn't claim is covered usually shown in red it",
    "start": "147840",
    "end": "153660"
  },
  {
    "text": "tells us nothing about whether the correctness of the code had anything to",
    "start": "153660",
    "end": "159300"
  },
  {
    "text": "do with the passing or failing of any particular test",
    "start": "159300",
    "end": "164459"
  },
  {
    "text": "by way of illustration let's look at a test and comment out the assertion",
    "start": "164459",
    "end": "170400"
  },
  {
    "text": "now assertions might be commented out or actually removed maybe not even written",
    "start": "170400",
    "end": "175860"
  },
  {
    "text": "in the first place for any number of reasons usually not very good but it",
    "start": "175860",
    "end": "180900"
  },
  {
    "text": "happens anyway we run the function so it shows still",
    "start": "180900",
    "end": "187019"
  },
  {
    "text": "shows up as covered but we're not checking anything about it so it's obviously not tested this is just one of",
    "start": "187019",
    "end": "195420"
  },
  {
    "text": "many many ways in which coverage can be extremely misleading so how can we tell",
    "start": "195420",
    "end": "202379"
  },
  {
    "text": "if the correctness of the test had anything to excuse me the correctness of the code had anything to do with the",
    "start": "202379",
    "end": "208440"
  },
  {
    "text": "passing of the test that is where mutation testing comes in",
    "start": "208440",
    "end": "213959"
  },
  {
    "text": "to check that our test Suite is strict a mutation testing tool will try to find",
    "start": "213959",
    "end": "219780"
  },
  {
    "text": "the gaps that let our code get away with unintended Behavior",
    "start": "219780",
    "end": "225360"
  },
  {
    "text": "once we find these gaps we can fill them in by either adding more tests or by",
    "start": "225360",
    "end": "231299"
  },
  {
    "text": "expanding and improving any existing tests lack of strictness usually comes from",
    "start": "231299",
    "end": "237840"
  },
  {
    "text": "lag of tests of course but also poorly written tests or tests that have been poorly maintained like they didn't keep",
    "start": "237840",
    "end": "244739"
  },
  {
    "text": "Pace with changes in the code speaking of which the other thing that mutation testing checks for is that our",
    "start": "244739",
    "end": "251939"
  },
  {
    "text": "code is Meaningful by which I mean that any tiny little change within reason to",
    "start": "251939",
    "end": "258239"
  },
  {
    "text": "the code will have a noticeable effect on the code's Behavior",
    "start": "258239",
    "end": "263280"
  },
  {
    "text": "lack of meaning usually comes from code being unreachable or redundant or",
    "start": "263280",
    "end": "268860"
  },
  {
    "text": "otherwise just not having any real effect once we find meaningless code we can",
    "start": "268860",
    "end": "275160"
  },
  {
    "text": "either make it meaningful such as eliminating a redundancy",
    "start": "275160",
    "end": "280800"
  },
  {
    "text": "or we can just remove it mutation testing puts these two together",
    "start": "280800",
    "end": "286680"
  },
  {
    "text": "by ensuring that every tiny little change it knows how to do",
    "start": "286680",
    "end": "292740"
  },
  {
    "text": "has a noticeable effect on the code's behavior and that our test Suite is",
    "start": "292740",
    "end": "298919"
  },
  {
    "text": "strict enough to notice that change and fail now not all the tests have to fail but",
    "start": "298919",
    "end": "305580"
  },
  {
    "text": "each change should make at least one test fail",
    "start": "305580",
    "end": "311340"
  },
  {
    "text": "now that's the positive side but there are some drawbacks as Fred Brooks told",
    "start": "311340",
    "end": "317100"
  },
  {
    "text": "us back in 1986 there is no Silver Bullet besides those are for taking care of werewolves not mutants",
    "start": "317100",
    "end": "323940"
  },
  {
    "text": "the first drawback is that it's rather hard labor on the CPU and therefore usually pretty",
    "start": "323940",
    "end": "331580"
  },
  {
    "text": "slow we certainly won't want to mutation test our entire code base every time we",
    "start": "331580",
    "end": "337919"
  },
  {
    "text": "save a file maybe we can do over a lunch break for a",
    "start": "337919",
    "end": "343199"
  },
  {
    "text": "smallish system or over a weekend for a larger one fortunately most of the tools do have",
    "start": "343199",
    "end": "349919"
  },
  {
    "text": "ways to tell it only test you know function or this module this file maybe",
    "start": "349919",
    "end": "357120"
  },
  {
    "text": "multiple of those and most of them also have some sort of incremental mode built in",
    "start": "357120",
    "end": "362820"
  },
  {
    "text": "so we can tell it you know just test what has changed since the last time we ran the tool or the last git commit or",
    "start": "362820",
    "end": "369720"
  },
  {
    "text": "the difference from the main branch between those sorts of filters we can",
    "start": "369720",
    "end": "375240"
  },
  {
    "text": "narrow it down to something we might be able to do on every file save if we save",
    "start": "375240",
    "end": "380580"
  },
  {
    "text": "early save often like we no we should even if we don't always",
    "start": "380580",
    "end": "386539"
  },
  {
    "text": "drawback is that it's a CPU intensive nature can really run up our bills on cloud systems like AWS or Azure or Azure",
    "start": "387000",
    "end": "396240"
  },
  {
    "text": "however you pronounce it it's also not at all a beginner friendly technique it tells us that some",
    "start": "396240",
    "end": "403800"
  },
  {
    "text": "particular change to the code made no difference to the test results but what does that mean",
    "start": "403800",
    "end": "410940"
  },
  {
    "text": "it takes a lot of thought to figure out what a surviving mutant is trying to",
    "start": "410940",
    "end": "417120"
  },
  {
    "text": "tell us their accent is various strange and they're almost as incoherent as zombies",
    "start": "417120",
    "end": "423120"
  },
  {
    "text": "but with a much larger vocabulary so they're not always on about birds",
    "start": "423120",
    "end": "429120"
  },
  {
    "text": "they're usually trying to tell us that our code is meaningless or our tests are",
    "start": "429120",
    "end": "434580"
  },
  {
    "text": "lacks or both but it can be very difficult to figure out exactly how",
    "start": "434580",
    "end": "441479"
  },
  {
    "text": "even worse sometimes it's a false alarm because a mutant might not have made any",
    "start": "441479",
    "end": "446759"
  },
  {
    "text": "tests fail but it didn't really make any difference to the behavior in the first",
    "start": "446759",
    "end": "452220"
  },
  {
    "text": "place but it can still take a lot of time and effort to figure that out",
    "start": "452220",
    "end": "457680"
  },
  {
    "text": "there's also quite a lot of code we just shouldn't bother to test for instance if we have a debugging",
    "start": "457680",
    "end": "464819"
  },
  {
    "text": "Trace that says the value of x is and then the value of x that constant part",
    "start": "464819",
    "end": "470520"
  },
  {
    "text": "will get mutated but we probably don't care about that we almost certainly",
    "start": "470520",
    "end": "475680"
  },
  {
    "text": "don't have a test for that fortunately most of them do have ways to",
    "start": "475680",
    "end": "481319"
  },
  {
    "text": "tell the tool don't bother mutating this line or again this",
    "start": "481319",
    "end": "486479"
  },
  {
    "text": "function module even whole file but that's usually with comments which can",
    "start": "486479",
    "end": "492120"
  },
  {
    "text": "clutter up the code and make it a little less readable so now that we've heard some pros and",
    "start": "492120",
    "end": "499500"
  },
  {
    "text": "cons what how does this work unlike the bloke on this sign",
    "start": "499500",
    "end": "507440"
  },
  {
    "text": "it mutates copies of our code hence the name and it does this with the intent of",
    "start": "507900",
    "end": "513659"
  },
  {
    "text": "creating test failures otherwise known as faults so mutation testing can be",
    "start": "513659",
    "end": "519479"
  },
  {
    "text": "categorized as a fault-based testing technique and this means it's sort of related to",
    "start": "519479",
    "end": "526080"
  },
  {
    "text": "something you might already be familiar with chaos monkey from Netflix just like chaos monkey helps Netflix",
    "start": "526080",
    "end": "533180"
  },
  {
    "text": "spot errors and other such problems in their error recovery",
    "start": "533180",
    "end": "538740"
  },
  {
    "text": "mutation testing helps us spot problems in our test suite and our code",
    "start": "538740",
    "end": "544740"
  },
  {
    "text": "but the way mutation testing does this is sort of upside down from how chaos",
    "start": "544740",
    "end": "551279"
  },
  {
    "text": "monkey works chaos monkey is best known for injecting faults such as dropped connections or",
    "start": "551279",
    "end": "559140"
  },
  {
    "text": "increased latency into Netflix's production Network if all still goes well in the sense that",
    "start": "559140",
    "end": "566880"
  },
  {
    "text": "Netflix's customers don't notice and the metrics still look good then Netflix knows that their error recovery is",
    "start": "566880",
    "end": "573959"
  },
  {
    "text": "working fine mutation testing however injects semantic changes not necessarily",
    "start": "573959",
    "end": "582360"
  },
  {
    "text": "problems it doesn't know if these changes will cause problems or not now we hope they",
    "start": "582360",
    "end": "589320"
  },
  {
    "text": "all will but that's up to the test Suite",
    "start": "589320",
    "end": "594260"
  },
  {
    "text": "it injects them into copies of our code not our actual Network and it does this",
    "start": "594899",
    "end": "601140"
  },
  {
    "text": "in our test environment not production cool",
    "start": "601140",
    "end": "607320"
  },
  {
    "text": "and if all still goes well in the sense that our tests still pass that does not mean that everything's",
    "start": "607320",
    "end": "613800"
  },
  {
    "text": "good that means there is a problem remember every change should make at least one test fail",
    "start": "613800",
    "end": "622339"
  },
  {
    "text": "mutation testing has also been compared to fuzzing a security penetration technique involving throwing lots of",
    "start": "623040",
    "end": "629760"
  },
  {
    "text": "data at an application mutation testing is sort of like fuzzing",
    "start": "629760",
    "end": "635100"
  },
  {
    "text": "the code rather than fuzzing the data and it's not random",
    "start": "635100",
    "end": "642540"
  },
  {
    "text": "mutation testing tools usually have a set of mutations that they know how to do and what sort of",
    "start": "642540",
    "end": "649860"
  },
  {
    "text": "points in the code they should apply it to now some of the smarter ones can use the",
    "start": "649860",
    "end": "655740"
  },
  {
    "text": "results of some simpler mutations to know they don't need to bother with some more complex ones which can make it",
    "start": "655740",
    "end": "661680"
  },
  {
    "text": "appear different when applied to different code bases but it's still not random",
    "start": "661680",
    "end": "668339"
  },
  {
    "text": "but enough about differences from various things what exactly does mutation testing do and how let's start",
    "start": "668339",
    "end": "675240"
  },
  {
    "text": "with a high level View first our tool breaks our code apart into pieces to test",
    "start": "675240",
    "end": "682140"
  },
  {
    "text": "usually these will be our functions or our methods if we're using an",
    "start": "682140",
    "end": "687600"
  },
  {
    "text": "object-oriented language but I'm just going to stick with saying functions then for each function it tries to find",
    "start": "687600",
    "end": "694200"
  },
  {
    "text": "the tests that cover that function if it can't find any then most will",
    "start": "694200",
    "end": "699779"
  },
  {
    "text": "simply skip this function better yet they'll probably warn us that they're doing so so we know we need to add some",
    "start": "699779",
    "end": "707220"
  },
  {
    "text": "tests or possibly annotate some more on that later some however we'll use the entire test",
    "start": "707220",
    "end": "713760"
  },
  {
    "text": "Suite which is horribly inefficient because the vast majority of the test that's running are not really relevant",
    "start": "713760",
    "end": "720060"
  },
  {
    "text": "to this function now assuming that we're not skipping the function in question the next step is",
    "start": "720060",
    "end": "726720"
  },
  {
    "text": "that the tool makes the mutants and to do this it looks closely at the function to see how it can be changed and for",
    "start": "726720",
    "end": "734579"
  },
  {
    "text": "each way the tool knows how to change that function it'll make one mutant",
    "start": "734579",
    "end": "739620"
  },
  {
    "text": "mutant with that one little change and once the tool is done making all the",
    "start": "739620",
    "end": "746399"
  },
  {
    "text": "mutants it can from a given function then it iterates over the list and now",
    "start": "746399",
    "end": "752100"
  },
  {
    "text": "we get to the heart of the concept this chart represents the progress of",
    "start": "752100",
    "end": "758279"
  },
  {
    "text": "our tool and unfortunately the real world tools don't generally give us quite all this information let alone so",
    "start": "758279",
    "end": "766200"
  },
  {
    "text": "nice and neatly organized but it's a conceptual model that I use to help illustrate the point",
    "start": "766200",
    "end": "772440"
  },
  {
    "text": "so what happens is that for each mutant made from a given function",
    "start": "772440",
    "end": "778639"
  },
  {
    "text": "the tool runs the function's tests but it runs them against the current mutant",
    "start": "778639",
    "end": "785660"
  },
  {
    "text": "instead of the original function if any test fails this is called in the",
    "start": "785660",
    "end": "792779"
  },
  {
    "text": "standard industry terminology killing the mutant and now we take a bit of a",
    "start": "792779",
    "end": "798120"
  },
  {
    "text": "detour some people object to this violent communication especially since in the",
    "start": "798120",
    "end": "805139"
  },
  {
    "text": "comic books mutants are often metaphors for marginalized groups of people and",
    "start": "805139",
    "end": "810959"
  },
  {
    "text": "the tech industry is finally becoming more sensitive to such issues I've been trying to come up with",
    "start": "810959",
    "end": "817260"
  },
  {
    "text": "something a little nicer like rescuing them or covering them or whatever but",
    "start": "817260",
    "end": "822899"
  },
  {
    "text": "the term of killing them is very well entrenched and it's very difficult to",
    "start": "822899",
    "end": "829920"
  },
  {
    "text": "change what people call something so for this presentation I'm just going to",
    "start": "829920",
    "end": "835320"
  },
  {
    "text": "stick to the standard term of of killing the mutant so whatever we call it it's a good thing",
    "start": "835320",
    "end": "841820"
  },
  {
    "text": "and it means that our code was meaningful enough that the tiny little",
    "start": "841820",
    "end": "847800"
  },
  {
    "text": "change that our tool made in order to create this mutant did indeed have a",
    "start": "847800",
    "end": "853380"
  },
  {
    "text": "noticeable effect on the code's Behavior and that our test Suite is strict enough",
    "start": "853380",
    "end": "860220"
  },
  {
    "text": "that at least one test noticed that difference and failed",
    "start": "860220",
    "end": "866899"
  },
  {
    "text": "after that happens the tool will Mark that mutant killed stop running any more tests against it and move on to the next",
    "start": "869820",
    "end": "877139"
  },
  {
    "text": "one once a mutant has made one test fail we generally don't care how many more it",
    "start": "877139",
    "end": "883440"
  },
  {
    "text": "might make fail like perhaps some of tests six through ten for mutant number",
    "start": "883440",
    "end": "888540"
  },
  {
    "text": "one like so much in computers we only care about ones and zeros",
    "start": "888540",
    "end": "894779"
  },
  {
    "text": "on the other claw if a mutant lets all the tests pass then it is said to have",
    "start": "894779",
    "end": "900540"
  },
  {
    "text": "survived and that means that this mutant has the superpower of mimicry skilled",
    "start": "900540",
    "end": "906959"
  },
  {
    "text": "enough to fool our tests this generally means that our code is",
    "start": "906959",
    "end": "912420"
  },
  {
    "text": "meaningless or our tests are Lacks or both and now it's up to us to figure out",
    "start": "912420",
    "end": "918839"
  },
  {
    "text": "exactly how now let's peel back one layer of the onion and look at some details of how",
    "start": "918839",
    "end": "926220"
  },
  {
    "text": "this works first our tool parses our code usually into an abstract syntax tree so",
    "start": "926220",
    "end": "933959"
  },
  {
    "text": "that this code becomes this it's an abstract syntax tree I'm going to assume",
    "start": "933959",
    "end": "939240"
  },
  {
    "text": "that you're all familiar with the concept of an abstract syntax tree or AST for short we don't need to worry",
    "start": "939240",
    "end": "945540"
  },
  {
    "text": "about understanding this one in detail except to note that there are two sub",
    "start": "945540",
    "end": "951060"
  },
  {
    "text": "trees rooted at def nodes which means that those are defining functions",
    "start": "951060",
    "end": "957959"
  },
  {
    "text": "and yes they have the same name in some languages that's okay this is in Elixir",
    "start": "957959",
    "end": "963480"
  },
  {
    "text": "and that's okay there so after the tool creates the AST out of",
    "start": "963480",
    "end": "969899"
  },
  {
    "text": "the code then it traverses that tree looking for smaller subtrees it can",
    "start": "969899",
    "end": "975420"
  },
  {
    "text": "extract that represent our functions smaller things like branches I guess you",
    "start": "975420",
    "end": "981000"
  },
  {
    "text": "call them and after finding them it handles them basically as I described before starting",
    "start": "981000",
    "end": "987300"
  },
  {
    "text": "with looking for the tests but how does it do that",
    "start": "987300",
    "end": "992820"
  },
  {
    "text": "that often relies on us developers either annotating tests as I mentioned",
    "start": "992820",
    "end": "998519"
  },
  {
    "text": "earlier or using some sort of naming convention for the files and the tests",
    "start": "998519",
    "end": "1005120"
  },
  {
    "text": "these manual techniques are often supplemented and sometimes even",
    "start": "1005120",
    "end": "1010220"
  },
  {
    "text": "totally replaced by the tool looking at what tests call what functions",
    "start": "1010220",
    "end": "1016579"
  },
  {
    "text": "that can get tricky and unreliable especially when it's not called directly",
    "start": "1016579",
    "end": "1021800"
  },
  {
    "text": "from the test so after the tool has found the",
    "start": "1021800",
    "end": "1027140"
  },
  {
    "text": "function's tests then assuming we're not going to skip this function because it didn't find any tests",
    "start": "1027140",
    "end": "1033860"
  },
  {
    "text": "the tool makes the mutants so how does it do that to make mutants from an abstract syntax",
    "start": "1033860",
    "end": "1040819"
  },
  {
    "text": "tree it traverses that sub tree just like it did to the whole thing",
    "start": "1040819",
    "end": "1046459"
  },
  {
    "text": "but now instead of looking for even smaller subtrees it can extract like Twigs or something I guess now it's",
    "start": "1046459",
    "end": "1053780"
  },
  {
    "text": "looking for nodes where it can change something",
    "start": "1053780",
    "end": "1058179"
  },
  {
    "text": "and for each time it finds one of those and for each weight can change that node",
    "start": "1058880",
    "end": "1064880"
  },
  {
    "text": "it'll make a copy of the function subtree with just that one little change",
    "start": "1064880",
    "end": "1070220"
  },
  {
    "text": "in it for instance suppose our tool has started traversing that AST well one of",
    "start": "1070220",
    "end": "1076940"
  },
  {
    "text": "those ASD subtrees I showed earlier and has gotten down to this if statement",
    "start": "1076940",
    "end": "1082880"
  },
  {
    "text": "for every way it could change that one node it would make a fresh copy of this whole",
    "start": "1082880",
    "end": "1090200"
  },
  {
    "text": "AST sub tree with just that one node changed in that one way",
    "start": "1090200",
    "end": "1096919"
  },
  {
    "text": "and after making as many mutants as it can by mutating that one node it'll",
    "start": "1096919",
    "end": "1103100"
  },
  {
    "text": "continue traversing the tree to another node and again for each way it can",
    "start": "1103100",
    "end": "1108679"
  },
  {
    "text": "change that node it will make a fresh copy of this whole sub tree with just",
    "start": "1108679",
    "end": "1115460"
  },
  {
    "text": "that node changed in that one way and so on until it has finished reversing the",
    "start": "1115460",
    "end": "1121760"
  },
  {
    "text": "entire function subtree now I've been talking a lot about changing things and little mutations but",
    "start": "1121760",
    "end": "1129440"
  },
  {
    "text": "what kind of changes am I talking about there are quite a lot it could change a mathematical logical",
    "start": "1129440",
    "end": "1137179"
  },
  {
    "text": "or bit wise or other if you've got them operator from one to another",
    "start": "1137179",
    "end": "1144380"
  },
  {
    "text": "so for instance X Plus y could become x minus y",
    "start": "1144380",
    "end": "1149900"
  },
  {
    "text": "if the language and situation allows it could change it to something of one of",
    "start": "1149900",
    "end": "1155480"
  },
  {
    "text": "the other categories for instance in many languages we could treat anything",
    "start": "1155480",
    "end": "1160580"
  },
  {
    "text": "as booleans so for instance x times y could become X",
    "start": "1160580",
    "end": "1166760"
  },
  {
    "text": "and Y or X exclusive bitwise or Y",
    "start": "1166760",
    "end": "1172880"
  },
  {
    "text": "it can when the order of operands matters such as in a subtraction",
    "start": "1172880",
    "end": "1179000"
  },
  {
    "text": "Division exponentiation and string concatenation it can swap them it could",
    "start": "1179000",
    "end": "1184460"
  },
  {
    "text": "change a comparison from one to another it could insert or remove a mathematical",
    "start": "1184460",
    "end": "1190820"
  },
  {
    "text": "logical or bitwise negation it can remove an entire statement it could",
    "start": "1190820",
    "end": "1196940"
  },
  {
    "text": "remove an if condition so that something that might be either skipped around or",
    "start": "1196940",
    "end": "1202160"
  },
  {
    "text": "done is always done similarly it can remove a looping",
    "start": "1202160",
    "end": "1207200"
  },
  {
    "text": "condition so that something that might be skipped around once or done multiple times is always",
    "start": "1207200",
    "end": "1214640"
  },
  {
    "text": "done once it could replace a function's entire contents",
    "start": "1214640",
    "end": "1220700"
  },
  {
    "text": "with just returning a constant or returning one of the arguments or",
    "start": "1220700",
    "end": "1226520"
  },
  {
    "text": "raising a deliberate error or nothing at all if the language permits",
    "start": "1226520",
    "end": "1231620"
  },
  {
    "text": "it could change a value to another value such as by incrementing it or",
    "start": "1231620",
    "end": "1236840"
  },
  {
    "text": "decrementing it or returning a constant it could even return something excuse me",
    "start": "1236840",
    "end": "1243919"
  },
  {
    "text": "you could even change it to something of a completely different and potentially",
    "start": "1243919",
    "end": "1249740"
  },
  {
    "text": "incompatible type such as changing a number to a if I may quote smeagle",
    "start": "1249740",
    "end": "1255440"
  },
  {
    "text": "string or nothing there are many many other changes it can",
    "start": "1255440",
    "end": "1261380"
  },
  {
    "text": "make but I trust you get the idea by now from here on there are no more low-level",
    "start": "1261380",
    "end": "1266780"
  },
  {
    "text": "details I want to add so let's finally walk through an example",
    "start": "1266780",
    "end": "1272000"
  },
  {
    "text": "so now before we get to that let's peel back one more layer of the onion and",
    "start": "1272000",
    "end": "1277280"
  },
  {
    "text": "look at some pseudo code that sort of illustrates how it works",
    "start": "1277280",
    "end": "1282860"
  },
  {
    "text": "I'll give you a little time to take pictures on not seeing anybody taking pictures so okay I'll just move on",
    "start": "1282860",
    "end": "1290960"
  },
  {
    "text": "now let's walk through some examples and we'll start with the very easy one suppose we have a function like this",
    "start": "1290960",
    "end": "1297679"
  },
  {
    "text": "never mind why it just makes a nice simple example so let's roll with it",
    "start": "1297679",
    "end": "1304940"
  },
  {
    "text": "think about what a mutant made from this function might return since that's what",
    "start": "1304940",
    "end": "1311419"
  },
  {
    "text": "our tests would almost certainly be looking at it doesn't look like it would have any side",
    "start": "1311419",
    "end": "1316460"
  },
  {
    "text": "effects mainly it could return results such as",
    "start": "1316460",
    "end": "1321580"
  },
  {
    "text": "these and many many more but I had to stop somewhere",
    "start": "1321580",
    "end": "1326780"
  },
  {
    "text": "now suppose we had only one test like so",
    "start": "1326780",
    "end": "1332419"
  },
  {
    "text": "now this is a rather bad test and I think Y is fairly obvious to most of you",
    "start": "1332419",
    "end": "1337520"
  },
  {
    "text": "but even so most of these mutants would get killed by this test the ones shown",
    "start": "1337520",
    "end": "1344179"
  },
  {
    "text": "here and crossed out green the ones returning constants are quite unlikely to match there is no particular",
    "start": "1344179",
    "end": "1350900"
  },
  {
    "text": "reason a mutation testing tool would have the mutant return of four as",
    "start": "1350900",
    "end": "1356659"
  },
  {
    "text": "opposed to say 0 1 minus one or other significant numbers",
    "start": "1356659",
    "end": "1362960"
  },
  {
    "text": "changing it to subtraction we'd get a zero or a division would get us one and",
    "start": "1362960",
    "end": "1369919"
  },
  {
    "text": "returning either argument alone would get us two and the incompatible types and deliberate errors would at least",
    "start": "1369919",
    "end": "1375679"
  },
  {
    "text": "make the test not pass but addition multiplication",
    "start": "1375679",
    "end": "1382880"
  },
  {
    "text": "and exponentiation in the reverse order would still get us the correct answer",
    "start": "1382880",
    "end": "1390740"
  },
  {
    "text": "so mutants based on these mutations would survive our current test",
    "start": "1390740",
    "end": "1397280"
  },
  {
    "text": "so how do we see this happening when we run a mutation testing tool it gives us",
    "start": "1397280",
    "end": "1402740"
  },
  {
    "text": "a report which would look kind of sort of like this the exact words and amount",
    "start": "1402740",
    "end": "1408740"
  },
  {
    "text": "of context and format and so forth will vary greatly depending exactly which tool we use and as you'll see later",
    "start": "1408740",
    "end": "1415520"
  },
  {
    "text": "there are dozens if not hundreds but semantically the information it's",
    "start": "1415520",
    "end": "1421280"
  },
  {
    "text": "giving us should be roughly the same and to unpack that what it's telling us is",
    "start": "1421280",
    "end": "1426500"
  },
  {
    "text": "that if we change the function called power in filedemo.ex starting at line 42",
    "start": "1426500",
    "end": "1432020"
  },
  {
    "text": "in any of four different ways then all its tests would still pass and it goes",
    "start": "1432020",
    "end": "1438320"
  },
  {
    "text": "on to tell us that those four ways are first to change the function declaration line to swap the",
    "start": "1438320",
    "end": "1446240"
  },
  {
    "text": "arguments and second and third to change the one line that constitutes the body of the",
    "start": "1446240",
    "end": "1452780"
  },
  {
    "text": "function to change the exponentiation into additional multiplication",
    "start": "1452780",
    "end": "1459500"
  },
  {
    "text": "or lastly to change it to swap the operands of the exponentiation",
    "start": "1459500",
    "end": "1465640"
  },
  {
    "text": "so what is this set of surviving mutants trying to tell us the very high level message is that our",
    "start": "1465919",
    "end": "1472940"
  },
  {
    "text": "test Suite isn't very good either because they're just aren't very",
    "start": "1472940",
    "end": "1478760"
  },
  {
    "text": "many tests or the ones we have aren't very good but we knew that a common other thing that it could",
    "start": "1478760",
    "end": "1487100"
  },
  {
    "text": "possibly be telling us is that we have redundant or unreachable code but I think we can tell at a glance at the",
    "start": "1487100",
    "end": "1495260"
  },
  {
    "text": "original code that that's very unlikely in this case",
    "start": "1495260",
    "end": "1500299"
  },
  {
    "text": "so the question boils down to how are these mutants surviving are they pulling heists are they getting",
    "start": "1500299",
    "end": "1507500"
  },
  {
    "text": "free room when bored at the Xavier Institute or what the usual answer is that they return the",
    "start": "1507500",
    "end": "1515659"
  },
  {
    "text": "same value as the original function or they have the same side effect whatever it is our tests are looking at",
    "start": "1515659",
    "end": "1524140"
  },
  {
    "text": "to determine how that happens it helps to take a closer look at one mutant and",
    "start": "1525380",
    "end": "1531020"
  },
  {
    "text": "a test it passes so let's start with the plus mutant looking at this change together with",
    "start": "1531020",
    "end": "1538700"
  },
  {
    "text": "this test makes it pretty clear that this mutant survives because 2 plus 2 is",
    "start": "1538700",
    "end": "1547340"
  },
  {
    "text": "the same is equal to to the two and this always two times two but he's",
    "start": "1547340",
    "end": "1553700"
  },
  {
    "text": "in the background we can save him for later so how can we kill this mutant in other",
    "start": "1553700",
    "end": "1559760"
  },
  {
    "text": "words make at least one test fail when run against that mutant",
    "start": "1559760",
    "end": "1567440"
  },
  {
    "text": "with a test that would pass run against the original code",
    "start": "1567440",
    "end": "1574039"
  },
  {
    "text": "it's quite simple in this case we just need to make at least one test use inputs such that x to the Y is different",
    "start": "1574039",
    "end": "1581600"
  },
  {
    "text": "from X Plus y for instance we could add a test or",
    "start": "1581600",
    "end": "1588020"
  },
  {
    "text": "tweak our existing test to something like this to assert that 2 to the fourth power is 16.",
    "start": "1588020",
    "end": "1594740"
  },
  {
    "text": "2 plus 4 is 6 not 16. so that kills the",
    "start": "1594740",
    "end": "1600919"
  },
  {
    "text": "plus mutant better yet two times four is eight which is also",
    "start": "1600919",
    "end": "1607400"
  },
  {
    "text": "not 16. we developers should know our powers of two at least that well so this",
    "start": "1607400",
    "end": "1613640"
  },
  {
    "text": "kills the times mutant as well you'll often find that deliberately",
    "start": "1613640",
    "end": "1619039"
  },
  {
    "text": "killing one mutant also kills others as well however the pair of argument swapping",
    "start": "1619039",
    "end": "1625880"
  },
  {
    "text": "mutants still survive but that's okay we can attack them separately no need to kill them all at",
    "start": "1625880",
    "end": "1632299"
  },
  {
    "text": "once and be some kind of superhero about it to kill them separately",
    "start": "1632299",
    "end": "1639200"
  },
  {
    "text": "we can again either add a test or improve our existing tests",
    "start": "1639200",
    "end": "1644799"
  },
  {
    "text": "to something like this to assert that 2 to the third power according to our",
    "start": "1644799",
    "end": "1651919"
  },
  {
    "text": "power function is 8. now if we reverse those",
    "start": "1651919",
    "end": "1657260"
  },
  {
    "text": "3 squared is 9 which is not eight so this will kill the argument swapping",
    "start": "1657260",
    "end": "1664640"
  },
  {
    "text": "mutants better yet two plus three is five two times three is six both of",
    "start": "1664640",
    "end": "1669919"
  },
  {
    "text": "those are not eight so the times and plus mutants stay dead and we don't get",
    "start": "1669919",
    "end": "1676159"
  },
  {
    "text": "any zombie mutants wandering around even if this were still our one and only test",
    "start": "1676159",
    "end": "1683440"
  },
  {
    "text": "with these inputs the correct operation is the only simple",
    "start": "1683440",
    "end": "1689360"
  },
  {
    "text": "common one that gets us the correct answer this isn't the only solution though we",
    "start": "1689360",
    "end": "1694880"
  },
  {
    "text": "could have used 2 to the fifth three squared 3 to the fifth vice versa and infinitely more even if we stuck to",
    "start": "1694880",
    "end": "1701840"
  },
  {
    "text": "single digits there are lots of ways to skin that flirkin this may make mutation testing sound",
    "start": "1701840",
    "end": "1708140"
  },
  {
    "text": "simple but this was a downright trivial example so it was very easy to select",
    "start": "1708140",
    "end": "1714320"
  },
  {
    "text": "inputs to make pretty much any Mutant within reason return a different value",
    "start": "1714320",
    "end": "1720440"
  },
  {
    "text": "from the original code so let's look at a more complex example",
    "start": "1720440",
    "end": "1726080"
  },
  {
    "text": "suppose we have a function to send a message like so send message users send bytes to send as",
    "start": "1726080",
    "end": "1732620"
  },
  {
    "text": "many bytes as send bytes can you know similar to how much would a woodchuck would chuck uh looping over and over",
    "start": "1732620",
    "end": "1739880"
  },
  {
    "text": "until it's done picking up where it left off each time it's a very common pattern",
    "start": "1739880",
    "end": "1745220"
  },
  {
    "text": "in communication software now a mutation testing tool could make gazillions of mutants out of something",
    "start": "1745220",
    "end": "1752240"
  },
  {
    "text": "like this but one of particular interest would be this an example of removing a",
    "start": "1752240",
    "end": "1757820"
  },
  {
    "text": "loop control and that would make the code effectively read like this",
    "start": "1757820",
    "end": "1763399"
  },
  {
    "text": "now suppose that this mutation this mutant does indeed survive our test",
    "start": "1763399",
    "end": "1768799"
  },
  {
    "text": "Suite which consists mostly of this there is a little more that I'm not",
    "start": "1768799",
    "end": "1774559"
  },
  {
    "text": "going to show you quite yet dealing with setting the size and actually creating the message but even without seeing that",
    "start": "1774559",
    "end": "1782720"
  },
  {
    "text": "what is this non-looping mutant",
    "start": "1782720",
    "end": "1787898"
  },
  {
    "text": "trying to tell us",
    "start": "1788419",
    "end": "1791740"
  },
  {
    "text": "if oh there we go if a mutant that only goes through that Loop once acts the",
    "start": "1795020",
    "end": "1801799"
  },
  {
    "text": "same as our normal code as far as our tests can tell then that means that our tests are only",
    "start": "1801799",
    "end": "1808940"
  },
  {
    "text": "making our function go through that Loop once so what does that mean",
    "start": "1808940",
    "end": "1816380"
  },
  {
    "text": "you'll find that interpreting what mutants are trying to tell you involves a lot of asking so what does that mean",
    "start": "1816380",
    "end": "1824000"
  },
  {
    "text": "often deeply recursively in this case it means we're not testing",
    "start": "1824000",
    "end": "1830299"
  },
  {
    "text": "sending a message larger than send bytes can handle in one chunk",
    "start": "1830299",
    "end": "1836559"
  },
  {
    "text": "now there's a lot of ways that can happen but the most likely cause is that we simply didn't use a big enough",
    "start": "1836899",
    "end": "1842480"
  },
  {
    "text": "message for instance here we see in our network module that the max chunk size what",
    "start": "1842480",
    "end": "1851360"
  },
  {
    "text": "send bytes can handle in one chunk is 10 000 bytes and yet we're only testing",
    "start": "1851360",
    "end": "1858260"
  },
  {
    "text": "with an itty-bitty little three byte message maybe four if we have an all Terminator a little more depending how",
    "start": "1858260",
    "end": "1864860"
  },
  {
    "text": "it's serialized but almost certainly nowhere near ten thousand",
    "start": "1864860",
    "end": "1870860"
  },
  {
    "text": "so what do we do the obvious fix is to just use a larger message",
    "start": "1870860",
    "end": "1876679"
  },
  {
    "text": "larger than our maximum chunk size we can easily construct one as shown here",
    "start": "1876679",
    "end": "1881899"
  },
  {
    "text": "just take our chunk size we can add one we can double it whatever we want to do to get a bigger number and make that big",
    "start": "1881899",
    "end": "1888740"
  },
  {
    "text": "a message perhaps to paraphrase Shakespeare the fault dear Melbourne is not in our tests",
    "start": "1888740",
    "end": "1896960"
  },
  {
    "text": "but in our code that these mutants are survivors maybe we did test with the",
    "start": "1896960",
    "end": "1902480"
  },
  {
    "text": "largest permissible message out of a set of predefined messages or at least message sizes",
    "start": "1902480",
    "end": "1908419"
  },
  {
    "text": "for instance here we have small and large message sizes and we tested with a",
    "start": "1908419",
    "end": "1913580"
  },
  {
    "text": "large and yet the mutant survives what could possibly be wrong with that",
    "start": "1913580",
    "end": "1919940"
  },
  {
    "text": "what is this mutant trying to tell us in this case",
    "start": "1919940",
    "end": "1925419"
  },
  {
    "text": "in this scenario it's trying to tell us that a version of send message with the",
    "start": "1925520",
    "end": "1930740"
  },
  {
    "text": "looping removed will do the job just fine if we remove the looping we we wind up",
    "start": "1930740",
    "end": "1937520"
  },
  {
    "text": "with this code I showed you earlier and if we run our mutation testing tool on that",
    "start": "1937520",
    "end": "1944120"
  },
  {
    "text": "then it'll show a lot of other stuff as being now redundant because it was only",
    "start": "1944120",
    "end": "1949159"
  },
  {
    "text": "there to support the looping and if we remove that and lather rinse repeat then we eventually wind up with this and now",
    "start": "1949159",
    "end": "1955820"
  },
  {
    "text": "the message is crystal clear the send message May well be redundant we can",
    "start": "1955820",
    "end": "1962179"
  },
  {
    "text": "just use send bytes directly now it may not be redundant because we",
    "start": "1962179",
    "end": "1968120"
  },
  {
    "text": "may need some error handling or logging or whatever in send message that isn't",
    "start": "1968120",
    "end": "1973580"
  },
  {
    "text": "in send bytes but at the very least the looping was redundant fortunately when",
    "start": "1973580",
    "end": "1978860"
  },
  {
    "text": "it's this kind of problem with unreachable or redundant code the solution is very easy just remove",
    "start": "1978860",
    "end": "1986299"
  },
  {
    "text": "whatever it was that the mutant didn't have that will also make our code more",
    "start": "1986299",
    "end": "1992419"
  },
  {
    "text": "maintainable by getting rid of useless cruft that's just getting in the way of",
    "start": "1992419",
    "end": "1997760"
  },
  {
    "text": "fully understanding everything now that we've seen some different",
    "start": "1997760",
    "end": "2003580"
  },
  {
    "text": "examples of spotting bad tests and redundant code I'd like to address a few",
    "start": "2003580",
    "end": "2008980"
  },
  {
    "text": "occasionally asked questions I think mutation testing is still rare enough that there aren't any really",
    "start": "2008980",
    "end": "2015519"
  },
  {
    "text": "frequently asked questions first off this whole idea seems pretty",
    "start": "2015519",
    "end": "2022539"
  },
  {
    "text": "weird making the tests fail in order to prove that the code succeeds where did this Bizarro idea come from in the first",
    "start": "2022539",
    "end": "2030159"
  },
  {
    "text": "place mutation testing has a surprisingly long history at least in the context of",
    "start": "2030159",
    "end": "2036760"
  },
  {
    "text": "computers it was first proposed in Richard lipton's term paper in 1971",
    "start": "2036760",
    "end": "2042399"
  },
  {
    "text": "paper titled false diagnosis of computer programs at Carnegie Mellon University",
    "start": "2042399",
    "end": "2049000"
  },
  {
    "text": "the first tool didn't appear until 1980 as part of Timothy Bud's PhD work at",
    "start": "2049000",
    "end": "2055720"
  },
  {
    "text": "Yale University but even then it was still not practical for most of us with consumer or even developer grade",
    "start": "2055720",
    "end": "2062800"
  },
  {
    "text": "machines not until the past couple decades or so with advances in CPU speed and",
    "start": "2062800",
    "end": "2069878"
  },
  {
    "text": "multi-core CPUs and larger and cheaper memory and so forth and that leads us to the next question",
    "start": "2069879",
    "end": "2076320"
  },
  {
    "text": "why is it so CPU intensive to answer that we need to do some math",
    "start": "2076320",
    "end": "2081760"
  },
  {
    "text": "but don't worry it's fairly basic suppose our functions have on average 10",
    "start": "2081760",
    "end": "2087520"
  },
  {
    "text": "lines and each line has about five places where it",
    "start": "2087520",
    "end": "2092679"
  },
  {
    "text": "can be changed to about 20 different alternatives that works out to about a thousand",
    "start": "2092679",
    "end": "2098560"
  },
  {
    "text": "mutants per function and for each one we'll have to run",
    "start": "2098560",
    "end": "2103660"
  },
  {
    "text": "somewhere between one of the function's applicable tests if we get real lucky and kill it on the first shot",
    "start": "2103660",
    "end": "2110619"
  },
  {
    "text": "all the way up to all of the functions tests if we kill it on the last shot or",
    "start": "2110619",
    "end": "2116619"
  },
  {
    "text": "worse yet it survives suppose we wind up running just one",
    "start": "2116619",
    "end": "2122980"
  },
  {
    "text": "tenth of the functions tests on average since we start with a thousand mutants",
    "start": "2122980",
    "end": "2129820"
  },
  {
    "text": "that still winds up to be a hundred times the test runs as compared to just",
    "start": "2129820",
    "end": "2135520"
  },
  {
    "text": "running our test Suite so if our test Suite normally takes a zippy 10 seconds",
    "start": "2135520",
    "end": "2140619"
  },
  {
    "text": "then with these assumptions mutation testing will take about a thousand seconds",
    "start": "2140619",
    "end": "2146440"
  },
  {
    "text": "that might not sound like much because I'm saying seconds but do the math and it's almost 17 minutes I don't know",
    "start": "2146440",
    "end": "2153820"
  },
  {
    "text": "about you but I don't want to sit around for that but there is some good news",
    "start": "2153820",
    "end": "2159640"
  },
  {
    "text": "over the past decade or so there's been a lot of research on trimming down the",
    "start": "2159640",
    "end": "2164680"
  },
  {
    "text": "mutant horde but mainly by weeding out those that are redundant with another mutant or",
    "start": "2164680",
    "end": "2170920"
  },
  {
    "text": "semantically equivalent to the original code or trivial in other ways like raising an obvious error condition",
    "start": "2170920",
    "end": "2178420"
  },
  {
    "text": "and that has trimmed it down to about one-third but even with that rare level",
    "start": "2178420",
    "end": "2184300"
  },
  {
    "text": "of success it's still no Silver Bullet because that takes a lot of CPU time itself and there's still a lot of",
    "start": "2184300",
    "end": "2190900"
  },
  {
    "text": "mutants left over the next question is when creating each",
    "start": "2190900",
    "end": "2196359"
  },
  {
    "text": "mutant why change it in only one way there are multiple reasons first off the",
    "start": "2196359",
    "end": "2203619"
  },
  {
    "text": "main philosophical underpinning of mutation testing is the competent",
    "start": "2203619",
    "end": "2209859"
  },
  {
    "text": "programmer hypothesis so let's put that to a quick check raise your hand if you're competent",
    "start": "2209859",
    "end": "2216520"
  },
  {
    "text": "and I'm seeing a couple hands out there as I think the rest of you need to read up on imposter syndrome",
    "start": "2216520",
    "end": "2224339"
  },
  {
    "text": "but anyway what is the competent programmer hypothesis it's basically the idea that we",
    "start": "2225220",
    "end": "2232000"
  },
  {
    "text": "programmers usually have a pretty good idea what we're doing most of the time and when we make a mistake it's usually",
    "start": "2232000",
    "end": "2238599"
  },
  {
    "text": "just one small mistake like a typo or adding when we should subtract or",
    "start": "2238599",
    "end": "2245020"
  },
  {
    "text": "comparing with less than or equal to when we should be doing just strictly less than or maybe we got it backwards",
    "start": "2245020",
    "end": "2252339"
  },
  {
    "text": "and we should be doing greater than does this sound of this type of substitution sound familiar",
    "start": "2252339",
    "end": "2259480"
  },
  {
    "text": "yeah it's exactly the sort of thing that a mutation testing tool does so you can think of it as sort of a did you mean",
    "start": "2259480",
    "end": "2266619"
  },
  {
    "text": "function kind of like when Google says you know did you mean to search for this other thing because I don't know nothing",
    "start": "2266619",
    "end": "2272859"
  },
  {
    "text": "about what you were already searching on there are also some practical",
    "start": "2272859",
    "end": "2278500"
  },
  {
    "text": "considerations for one just using one mutation permutant helps",
    "start": "2278500",
    "end": "2285820"
  },
  {
    "text": "us humans Focus it makes it a lot easier to tell what a mutant is trying to tell us if we're",
    "start": "2285820",
    "end": "2292180"
  },
  {
    "text": "only talking about one thing in the first place another reason is that multiple changes May balance each other out you might",
    "start": "2292180",
    "end": "2299380"
  },
  {
    "text": "remember that first simple example and it's argument swapping mutants if one mutate one mutant had both of those",
    "start": "2299380",
    "end": "2306460"
  },
  {
    "text": "mutations the first would swap them and the second would swap them right back for no net effect so it would survive",
    "start": "2306460",
    "end": "2312880"
  },
  {
    "text": "any test you care to throw at it and lastly allowing multiple mutations would create a combinatorial explosion",
    "start": "2312880",
    "end": "2320140"
  },
  {
    "text": "of mutants with the tool making orders of magnitude more mutants per function",
    "start": "2320140",
    "end": "2326380"
  },
  {
    "text": "I'll spare you the math but with our previous assumptions including weeding",
    "start": "2326380",
    "end": "2332800"
  },
  {
    "text": "the mutants down to about a third at each step with one mutation per mutant we'd have about 333 mutants per function",
    "start": "2332800",
    "end": "2341380"
  },
  {
    "text": "and a third but I'm rounding with two we'd already have almost a",
    "start": "2341380",
    "end": "2347320"
  },
  {
    "text": "hundred and ten thousand and with three we'd have over 35 million never mind",
    "start": "2347320",
    "end": "2353380"
  },
  {
    "text": "running the tests just creating the mutants would get to be a heavy workload but we can save ourselves that heavy",
    "start": "2353380",
    "end": "2360940"
  },
  {
    "text": "workload and the false alarms and the lack of focus if we just limit it to one",
    "start": "2360940",
    "end": "2368740"
  },
  {
    "text": "mutation per mutant the next question is it sounds like",
    "start": "2368740",
    "end": "2374440"
  },
  {
    "text": "mutation testing only helps us make sure that our test Suite as a whole is high quality is",
    "start": "2374440",
    "end": "2382119"
  },
  {
    "text": "there any way you can help us assess the quality of individual tests and yes there is but it would take a lot",
    "start": "2382119",
    "end": "2388540"
  },
  {
    "text": "longer and I don't think any of the current tools actually give us all the information we would need let alone",
    "start": "2388540",
    "end": "2394560"
  },
  {
    "text": "packaged easily so that we could",
    "start": "2394560",
    "end": "2399820"
  },
  {
    "text": "read it in and analyze it you may remember that I said before when",
    "start": "2399820",
    "end": "2406839"
  },
  {
    "text": "a mutant makes a test fail it's marked killed we stop running tests against it",
    "start": "2406839",
    "end": "2412359"
  },
  {
    "text": "and move on to the next one so when we're done with a given function we wind up with a chart that looks more",
    "start": "2412359",
    "end": "2419200"
  },
  {
    "text": "or less like that if we were to run the rest of the tests",
    "start": "2419200",
    "end": "2425500"
  },
  {
    "text": "all those blank cells there that would give us a lot more information that we",
    "start": "2425500",
    "end": "2431200"
  },
  {
    "text": "could put to use including to assess some individual tests for instance look",
    "start": "2431200",
    "end": "2438220"
  },
  {
    "text": "at test number four and nine they don't kill any mutants",
    "start": "2438220",
    "end": "2443500"
  },
  {
    "text": "now this doesn't mean that they're necessarily bad tests but it means they might Merit a closer look we can think",
    "start": "2443500",
    "end": "2451660"
  },
  {
    "text": "of it like a code smell we could look next at those that only stop one mutant then those that only stop two and so on",
    "start": "2451660",
    "end": "2458560"
  },
  {
    "text": "but I think that would quickly reach a point of diminishing returns probably at one",
    "start": "2458560",
    "end": "2464260"
  },
  {
    "text": "and this in turn raises the question of could we use such a complete report",
    "start": "2464260",
    "end": "2470579"
  },
  {
    "text": "to improve the quality of our test Suite as a whole again and as you may have",
    "start": "2470579",
    "end": "2476680"
  },
  {
    "text": "guessed yes we probably could if we had all that information we could look at",
    "start": "2476680",
    "end": "2481720"
  },
  {
    "text": "the pairs or larger sets of tests that stop exactly the same set of mutants for",
    "start": "2481720",
    "end": "2488440"
  },
  {
    "text": "instance you can look at test one and two and tests three and seven together",
    "start": "2488440",
    "end": "2496660"
  },
  {
    "text": "and decide if we need to keep both of the ones in each pair maybe test one and",
    "start": "2496660",
    "end": "2504460"
  },
  {
    "text": "two are testing different important aspects that just happen to stop the same mutants but it could be that three",
    "start": "2504460",
    "end": "2511480"
  },
  {
    "text": "and seven are essentially testing the same thing and we can get rid of one of them not because of low mutant stopping",
    "start": "2511480",
    "end": "2517900"
  },
  {
    "text": "power or other poor quality of either test but because of redundancy between",
    "start": "2517900",
    "end": "2523300"
  },
  {
    "text": "them that would at least make our test Suite smaller and faster",
    "start": "2523300",
    "end": "2528880"
  },
  {
    "text": "and the last question is mutation testing assumes that we already",
    "start": "2528880",
    "end": "2533920"
  },
  {
    "text": "have tests but what if we don't can it be of any use then",
    "start": "2533920",
    "end": "2539619"
  },
  {
    "text": "well first of all whoever built a substantial production code base without any test",
    "start": "2539619",
    "end": "2545140"
  },
  {
    "text": "needs some educating maybe with a clue by four but yes mutation testing can",
    "start": "2545140",
    "end": "2552339"
  },
  {
    "text": "help us build our test Suite in the first place we can start with a meaningless test and",
    "start": "2552339",
    "end": "2558339"
  },
  {
    "text": "run our tool we'll probably get a lot of mutants including a lot of duplicates telling us about more or less the same",
    "start": "2558339",
    "end": "2564460"
  },
  {
    "text": "problem especially since any basically viable mutant will of course survive our",
    "start": "2564460",
    "end": "2570700"
  },
  {
    "text": "meaningless test then for each function with surviving mutants we can just pick one we can pick",
    "start": "2570700",
    "end": "2577420"
  },
  {
    "text": "it randomly no need to overthink it try to kill it by adding a test",
    "start": "2577420",
    "end": "2583859"
  },
  {
    "text": "then do likewise to the next function and once we're all through those the",
    "start": "2584619",
    "end": "2591339"
  },
  {
    "text": "functions we can run our tool again and lather rinse repeat as needed",
    "start": "2591339",
    "end": "2597040"
  },
  {
    "text": "now this won't guarantee that we wind up with a great test Suite A lot of code might well stay untested but this will",
    "start": "2597040",
    "end": "2604540"
  },
  {
    "text": "get us off to a decent start then we can look at what's still untested write some tests that cover",
    "start": "2604540",
    "end": "2610300"
  },
  {
    "text": "those and at this point never mind computer science theory just psychologically",
    "start": "2610300",
    "end": "2616420"
  },
  {
    "text": "filling in the gaps will be a much less daunting task than writing our whole",
    "start": "2616420",
    "end": "2622540"
  },
  {
    "text": "test Suite from scratch to summarize at last mutation testing is",
    "start": "2622540",
    "end": "2628060"
  },
  {
    "text": "a powerful technique to ensure that our code is Meaningful and our tests are strict it's pretty easy to get started",
    "start": "2628060",
    "end": "2635140"
  },
  {
    "text": "with in terms of things like setting up the tools and annotating our tests if",
    "start": "2635140",
    "end": "2640240"
  },
  {
    "text": "need be which might be tedious but at least it should be easy",
    "start": "2640240",
    "end": "2645280"
  },
  {
    "text": "but it's not all that easy to interpret the results nor is it easy on the CPU",
    "start": "2645280",
    "end": "2650980"
  },
  {
    "text": "but even if these particular drawbacks mean it might not be a good fit for the",
    "start": "2650980",
    "end": "2656740"
  },
  {
    "text": "projects we have going at the moment I still think it's just a really cool idea in a geeky kind of way",
    "start": "2656740",
    "end": "2663339"
  },
  {
    "text": "if you'd like to try mutation testing for yourself here's a list of tools for some popular languages and platforms and",
    "start": "2663339",
    "end": "2671200"
  },
  {
    "text": "some other ones I doubt many of you are doing fortrans 77 these days",
    "start": "2671200",
    "end": "2677760"
  },
  {
    "text": "just be aware that many of these are outdated I don't know or follow quite",
    "start": "2679240",
    "end": "2684880"
  },
  {
    "text": "all of these languages and platforms let alone the tools but the ones I know are outdated are crossed out there's also a",
    "start": "2684880",
    "end": "2693180"
  },
  {
    "text": "promising tool called roodle test which is a language independent mutation",
    "start": "2693180",
    "end": "2699460"
  },
  {
    "text": "testing engine that you can use to make language specific mutation testing tools",
    "start": "2699460",
    "end": "2706079"
  },
  {
    "text": "I haven't actually used it myself so I can't speak to whether it lives up to",
    "start": "2706079",
    "end": "2712839"
  },
  {
    "text": "the hype but I like the concept with everybody done taking pictures",
    "start": "2712839",
    "end": "2718599"
  },
  {
    "text": "okay before q a I'll give a shout out to toptal a Consulting Network I'm in that",
    "start": "2718599",
    "end": "2727300"
  },
  {
    "text": "has a speaker's Network that helped me prepare and practice this presentation please use that referral link if you",
    "start": "2727300",
    "end": "2733540"
  },
  {
    "text": "want to hire us or join us the anchor part tells them it's me and we both get some Bounty and now it's your turn if",
    "start": "2733540",
    "end": "2741220"
  },
  {
    "text": "you think of any questions later I'll be around for the rest of the conference or if that's too late then there's my",
    "start": "2741220",
    "end": "2748060"
  },
  {
    "text": "contact information and the URL for the slides with more or less complete script",
    "start": "2748060",
    "end": "2754740"
  },
  {
    "text": "so any questions yes",
    "start": "2754740",
    "end": "2762700"
  },
  {
    "text": "up",
    "start": "2802060",
    "end": "2804720"
  },
  {
    "text": "and then",
    "start": "2807180",
    "end": "2810359"
  },
  {
    "text": "Twitter and Linkedin and so forth I have a number of searches that I do on a",
    "start": "2826240",
    "end": "2833020"
  },
  {
    "text": "periodic basis daily weekly whatever one of them being on mutation testing when I",
    "start": "2833020",
    "end": "2838599"
  },
  {
    "text": "started doing this about three years ago or so the mutation testing search on Twitter",
    "start": "2838599",
    "end": "2846339"
  },
  {
    "text": "would generally come up with nothing new for several days at a time sometimes",
    "start": "2846339",
    "end": "2851800"
  },
  {
    "text": "even a week now there's usually several mentions of mutation testing per day and",
    "start": "2851800",
    "end": "2859780"
  },
  {
    "text": "that's not even counting the ones that mean it in the biological sense so I'd say it's getting quite a lot of",
    "start": "2859780",
    "end": "2866980"
  },
  {
    "text": "notice over the past few years any more questions we have a good bit of",
    "start": "2866980",
    "end": "2874359"
  },
  {
    "text": "time uh about 12 minutes",
    "start": "2874359",
    "end": "2879119"
  },
  {
    "text": "you just described where like you would your computer coding for the day",
    "start": "2882819",
    "end": "2888300"
  },
  {
    "text": "whereabouts does it fit in for you do you do it test during do you do tests at the end is it kind of all that's like",
    "start": "2888300",
    "end": "2894400"
  },
  {
    "text": "how does it fall into your coding flow okay that depends on whether you decide",
    "start": "2894400",
    "end": "2902440"
  },
  {
    "text": "to tell it to test just some Little slice or you want to test some bigger chunk I think probably the easiest way",
    "start": "2902440",
    "end": "2910420"
  },
  {
    "text": "to incorporate it into your flow would be when you're done with some major",
    "start": "2910420",
    "end": "2916540"
  },
  {
    "text": "chunk like if your group decides that",
    "start": "2916540",
    "end": "2922119"
  },
  {
    "text": "tickets should be a day or less of work then after each ticket before you put in",
    "start": "2922119",
    "end": "2927819"
  },
  {
    "text": "your pull request or whatever your process uses you know just make it one of the various tools you use to make",
    "start": "2927819",
    "end": "2935200"
  },
  {
    "text": "sure that it's ready to roll I typically run things like a style Checker as other",
    "start": "2935200",
    "end": "2942339"
  },
  {
    "text": "sort of static analysis thing and I would put mutation testing in that",
    "start": "2942339",
    "end": "2948280"
  },
  {
    "text": "category and if it winds up with any significant number at least of",
    "start": "2948280",
    "end": "2954280"
  },
  {
    "text": "surviving mutants that are obviously not false alarms you know okay it needs a",
    "start": "2954280",
    "end": "2959680"
  },
  {
    "text": "little more work okay that's a good question perfect okay",
    "start": "2959680",
    "end": "2965079"
  },
  {
    "text": "thank you anything else going once",
    "start": "2965079",
    "end": "2970599"
  },
  {
    "text": "going twice all right I guess we're sold thank you",
    "start": "2970599",
    "end": "2978180"
  }
]