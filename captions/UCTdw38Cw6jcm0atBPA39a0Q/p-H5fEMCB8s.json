[
  {
    "text": "okay I think the clock is officially 20 minutes before noon so let's get started",
    "start": "9519",
    "end": "15799"
  },
  {
    "text": "just a quick raise of hands how many of you are Blazer developers sort of in anger on a day-to-day basis okay good",
    "start": "15799",
    "end": "23439"
  },
  {
    "text": "amount of you guys all right so so this session is about Blazer testing uh from a to c and before we get to that let me",
    "start": "23439",
    "end": "30599"
  },
  {
    "text": "present myself I'm eigil Hansen Dane um with a Norwegian name and I live in",
    "start": "30599",
    "end": "36559"
  },
  {
    "text": "Iceland I also work for a company called delegates we sort of a consultancy uh",
    "start": "36559",
    "end": "41840"
  },
  {
    "text": "company and my particular role is is building a cloud native Solutions on on",
    "start": "41840",
    "end": "47239"
  },
  {
    "text": "on Asia most I'm also Microsoft MVP and I became an MVP because I built a bunch of Open Source libraries so that's also",
    "start": "47239",
    "end": "53039"
  },
  {
    "text": "an option if you want to you know join the ranks of the MVPs so Blazer testing well what we will",
    "start": "53039",
    "end": "59519"
  },
  {
    "text": "cover today is um I guess what I would call like to call browser driven testing",
    "start": "59519",
    "end": "65198"
  },
  {
    "text": "it might be called inin testing as well but that's really up to you if you want to go all the way to the end of your application or not uh browser driven",
    "start": "65199",
    "end": "72240"
  },
  {
    "text": "testing means that we take a browser we open up our web app in that and then we use code to drive the browser to do",
    "start": "72240",
    "end": "78560"
  },
  {
    "text": "things on our behalf uh so we automate that um and the second part we will look",
    "start": "78560",
    "end": "83640"
  },
  {
    "text": "at component testing and and component testing or unit testing is where we test our Blazer components in isolation from",
    "start": "83640",
    "end": "89360"
  },
  {
    "text": "the rest of that application um and and then sort of we will round out with a discussion of what",
    "start": "89360",
    "end": "98520"
  },
  {
    "text": "options uh We've looked at and and and what the pros and cons of each of them are and sort of take take a look at what",
    "start": "98520",
    "end": "106159"
  },
  {
    "text": "would you want to pick depending on your situation so hopefully you would be left with a good starting point if you want",
    "start": "106159",
    "end": "111399"
  },
  {
    "text": "to start testing your Blazer applications or Blazer components at home so let's start with the first thing",
    "start": "111399",
    "end": "117479"
  },
  {
    "text": "so browser dur testing and for that uh we will use a playwright so",
    "start": "117479",
    "end": "124280"
  },
  {
    "text": "playright is um probably the most predominant uh UI testing library right",
    "start": "124280",
    "end": "131239"
  },
  {
    "text": "now browse automating testing Library it it learned a lot from this predecessors uh selenium and others uh that had a",
    "start": "131239",
    "end": "138239"
  },
  {
    "text": "bunch of issues that made it hard to actually write good tests using those uh and and they've really focused a lot on",
    "start": "138239",
    "end": "144440"
  },
  {
    "text": "having really good develop experience also having things around automatic retry waiting for element to show up on",
    "start": "144440",
    "end": "150519"
  },
  {
    "text": "the page uh um they have good query apis we can use to talk or or find elements",
    "start": "150519",
    "end": "156840"
  },
  {
    "text": "on the web page that you want to interact with but do stuff with so that really helps a lot another thing",
    "start": "156840",
    "end": "163239"
  },
  {
    "text": "that really helps with playright versus some of the other alternatives are visual traces that you can capture",
    "start": "163239",
    "end": "168640"
  },
  {
    "text": "during testing so imagine you're running your test on a CI Pipeline and things fa",
    "start": "168640",
    "end": "174000"
  },
  {
    "text": "or something didn't go as planned well you can you can have it capture the trace of the test which includes",
    "start": "174000",
    "end": "180319"
  },
  {
    "text": "screenshots uh the Dom elements the network traffic all the things about the test and you get it as a zip file and",
    "start": "180319",
    "end": "185799"
  },
  {
    "text": "you can Replay that locally so you can sort of figure out what was going on what actually happened um an important thing is that",
    "start": "185799",
    "end": "191959"
  },
  {
    "text": "by default you would run playright tests without the browser actually visually being shown like it's in a headless mode",
    "start": "191959",
    "end": "198560"
  },
  {
    "text": "uh so you don't see what's going on so visual traing really helps another thing they could do for you is it can it can U",
    "start": "198560",
    "end": "206040"
  },
  {
    "text": "generate test for you or rather it allows you to open up sort of a playr to tool that will allow you to click around",
    "start": "206040",
    "end": "211920"
  },
  {
    "text": "in your application and actually manually record what you want the test to do fill out forms click on buttons",
    "start": "211920",
    "end": "217400"
  },
  {
    "text": "navigate around and then it will capture that and generate the net code for you or JavaScript or other languages that",
    "start": "217400",
    "end": "223879"
  },
  {
    "text": "play supports and you can sort of pull that into your test so so it makes it easy to create tests that are fairly",
    "start": "223879",
    "end": "230680"
  },
  {
    "text": "complex which is both a good and bad thing but it certainly makes it easier to get started with playright and learn how to use the API and",
    "start": "230680",
    "end": "237439"
  },
  {
    "text": "playr uh I think it's well documented um it's not a given for open source libraries uh uh and recently they added",
    "start": "237439",
    "end": "244200"
  },
  {
    "text": "support for xunit which wasn't something that was there before so I also had to change my entire presentation because",
    "start": "244200",
    "end": "249439"
  },
  {
    "text": "I'm an xunit kind of guy so so so now it's all the xunit based um but it's it's uh there was some changes to xunit",
    "start": "249439",
    "end": "256440"
  },
  {
    "text": "that that controlled how it did uh um concurrency so now you can actually have it um minimize the amount of concurrent",
    "start": "256440",
    "end": "264000"
  },
  {
    "text": "test that are running together that are also asynchronous and you'd imagine if you have maybe a th play right tests and",
    "start": "264000",
    "end": "270479"
  },
  {
    "text": "all of them are running concurrently then that would maybe equate to spinning up a thousand instances of chrome and we",
    "start": "270479",
    "end": "277440"
  },
  {
    "text": "all know how much memory that uses so that's probably not going to work on your CI pipeline but with the new support in xunit 2.8 to actually say",
    "start": "277440",
    "end": "284720"
  },
  {
    "text": "that it should also limit the amount of concurrent process that are running asly or concurrent tests uh that enables",
    "start": "284720",
    "end": "290919"
  },
  {
    "text": "playay R to work well with xunit as well now there is some small downsides to",
    "start": "290919",
    "end": "295960"
  },
  {
    "text": "playright uh well at least something to be aware of so playright is something that comes out of Microsoft and it comes",
    "start": "295960",
    "end": "303080"
  },
  {
    "text": "out from a team focused very much on front ends so JavaScript C or C is more",
    "start": "303080",
    "end": "308120"
  },
  {
    "text": "a second class citizen so you might Google uh search or chat to some gbt of",
    "start": "308120",
    "end": "314360"
  },
  {
    "text": "your CH Choice uh about ways to do things and it will suggest an API that doesn't exist yet in CCR plan but it's",
    "start": "314360",
    "end": "321800"
  },
  {
    "text": "catching up quite well and they're good at sort of keeping them on par um much of the tooling uh is vs code Centric so",
    "start": "321800",
    "end": "329720"
  },
  {
    "text": "if your visual studio type of person like my like I am then you might also have to drop down to the command line",
    "start": "329720",
    "end": "335479"
  },
  {
    "text": "once in a while to get get all the features you need um and one thing",
    "start": "335479",
    "end": "341120"
  },
  {
    "text": "that uh we might you might have to be aware of is that compared to maybe doing",
    "start": "341120",
    "end": "346440"
  },
  {
    "text": "API testing or other things you have to actually have your web app running on a public port on an IP address that the",
    "start": "346440",
    "end": "353400"
  },
  {
    "text": "browser can get to so that's something we uh we need to do as well and that's not something that play comes with but",
    "start": "353400",
    "end": "359199"
  },
  {
    "text": "luckily we have few options in net already we have the web application Factory how many of you have used that",
    "start": "359199",
    "end": "364960"
  },
  {
    "text": "before so you will know that web application Factory is sort of a white box testing approach we typically use",
    "start": "364960",
    "end": "371720"
  },
  {
    "text": "that for API testing it allows you to spin up your application in a in a in a in in the test itself and you can also",
    "start": "371720",
    "end": "378759"
  },
  {
    "text": "change configurations or or customize the app web app that you're testing",
    "start": "378759",
    "end": "383919"
  },
  {
    "text": "directly with web application Factory so um you have de deep hooks into it and",
    "start": "383919",
    "end": "389400"
  },
  {
    "text": "you you don't have to C you don't have to have extra things in your web application uh to support testing uh a",
    "start": "389400",
    "end": "395479"
  },
  {
    "text": "new thing that's well new newp has been around for about two years or so now uh but you also have the option of using if",
    "start": "395479",
    "end": "401680"
  },
  {
    "text": "you have an aspired enabled web application you can also spin up uh Aspire from your test and control Aspire",
    "start": "401680",
    "end": "408680"
  },
  {
    "text": "Aspire Appo from your test but then it's more blackbox testing in a sense that your web app you don't the only sort of",
    "start": "408680",
    "end": "415240"
  },
  {
    "text": "hooks you have to customize that for a testing scenario would be to maybe provide environment via variables to it",
    "start": "415240",
    "end": "421560"
  },
  {
    "text": "uh maybe where you for example if you don't want to use the real database during testing or you want to reset",
    "start": "421560",
    "end": "426840"
  },
  {
    "text": "things along the way so both approaches work I've started using the second one",
    "start": "426840",
    "end": "432280"
  },
  {
    "text": "um at work and it's quite nice that you spin up everything and and you have sort of a full it really gives you end to end",
    "start": "432280",
    "end": "438960"
  },
  {
    "text": "testing in theory uh but for this demo we're just going to use web application Factory but to to enable it to actually",
    "start": "438960",
    "end": "444800"
  },
  {
    "text": "do the thing exposing the web app to a browser so we can interact with that we need to have it a little bit because it",
    "start": "444800",
    "end": "450440"
  },
  {
    "text": "really is not built for that so to understand what we need to do well if we look at the default way it works is that",
    "start": "450440",
    "end": "456599"
  },
  {
    "text": "you basically take web application Factory type new that up and point it at your web app you want to test and then",
    "start": "456599",
    "end": "463400"
  },
  {
    "text": "you can ask your web application Factory to give me a HTP client that allows me to call that uh a web app that you're",
    "start": "463400",
    "end": "469919"
  },
  {
    "text": "you're testing directly but it's all in in process in the same um in in the sort",
    "start": "469919",
    "end": "475039"
  },
  {
    "text": "of in the scope of the test so it's not exposed externally and what we need is well instead of having our test code",
    "start": "475039",
    "end": "480240"
  },
  {
    "text": "using HP client we want our test code to use the playr play ride to instrument a browser and that browser should be able",
    "start": "480240",
    "end": "485680"
  },
  {
    "text": "to connect to our test app so what we want to do is we want to achieve a bunch of things we want to have it uh",
    "start": "485680",
    "end": "491720"
  },
  {
    "text": "instantiate and run our web app on uh 1271 on a random Port uh because your",
    "start": "491720",
    "end": "497919"
  },
  {
    "text": "Port might be used uh by other things so we wanted to pick a port at random when it starts up and and then we also wanted",
    "start": "497919",
    "end": "504800"
  },
  {
    "text": "to support htps and other things so uh I figured out a way to do it it's reason why I call it a hack is it's not super",
    "start": "504800",
    "end": "511400"
  },
  {
    "text": "pretty but it works and it's it's quite stable uh and by the way all the code that we're going to look at today is",
    "start": "511400",
    "end": "516719"
  },
  {
    "text": "going to be shared uh on a GitHub um repository so you can go and download it",
    "start": "516719",
    "end": "521800"
  },
  {
    "text": "and and sort of take that bit out if you want to do the same thing now uh before we get into the actual code I just want",
    "start": "521800",
    "end": "528000"
  },
  {
    "text": "to show you how I set up my test solution so uh so you can repeat that at",
    "start": "528000",
    "end": "533200"
  },
  {
    "text": "home if you want so what we have is we have a just standard blazer. net9 app um we have a xunit test project projects um",
    "start": "533200",
    "end": "540800"
  },
  {
    "text": "and then we have a solution file and we've added both the projects to the solution file then we want to make some",
    "start": "540800",
    "end": "546399"
  },
  {
    "text": "modifications to the test project uh so we add a reference to the system on the",
    "start": "546399",
    "end": "552920"
  },
  {
    "text": "test the app we want to test to our our test project we add play rights because",
    "start": "552920",
    "end": "558399"
  },
  {
    "text": "we need that we add this package from Microsoft HP net core MVC testing which does have the web application Factory",
    "start": "558399",
    "end": "564560"
  },
  {
    "text": "that we will need to spin up our web app during testing and finally uh because we want to talk a bit about um snapshot",
    "start": "564560",
    "end": "571160"
  },
  {
    "text": "testing we add uh some of the verify uh extension packages for xunit playright",
    "start": "571160",
    "end": "576760"
  },
  {
    "text": "and angle Shar um that we can use to do Snapchat testing which with which is",
    "start": "576760",
    "end": "581800"
  },
  {
    "text": "quite valuable uh for for these types of of applications obviously we have to end",
    "start": "581800",
    "end": "587600"
  },
  {
    "text": "up with a net builds uh and the reason why we do that is because play White the play White package will output a PS1",
    "start": "587600",
    "end": "594200"
  },
  {
    "text": "file in our bin folder and after we have that we can call that file and pass",
    "start": "594200",
    "end": "599959"
  },
  {
    "text": "install to it and that will install playr specific browsers on our system so that we can use that for testing and uh",
    "start": "599959",
    "end": "606880"
  },
  {
    "text": "those we use those instead of our whatever browser you have installed in your system so that you can also test",
    "start": "606880",
    "end": "612480"
  },
  {
    "text": "with Safari or Ed or chromium or whatever you have but you also have browsers that don't have all your",
    "start": "612480",
    "end": "618800"
  },
  {
    "text": "customizations all your bookmarks all your cookies and all of that so you get a clean sort of environment to test in",
    "start": "618800",
    "end": "625640"
  },
  {
    "text": "now let's jump into Visual Studio code and have a look at that's how this this",
    "start": "625640",
    "end": "631360"
  },
  {
    "text": "will work um let see if I can jump out of this maybe go to",
    "start": "631360",
    "end": "640040"
  },
  {
    "text": "duplicate there we go and let's jump into the first test let",
    "start": "640040",
    "end": "645680"
  },
  {
    "text": "me just double check that font size is okay for you guys in the back I see some thumbs up no proests okay",
    "start": "645680",
    "end": "654040"
  },
  {
    "text": "so uh it's not really well it it might be interesting and I can show you that afterwards if somebody want to see but",
    "start": "654040",
    "end": "660600"
  },
  {
    "text": "uh I've created a type called Blazer a web application Factory it uh",
    "start": "660600",
    "end": "667000"
  },
  {
    "text": "encapsulates all the hackness we need to be able to spin up our web app in in a",
    "start": "667000",
    "end": "672480"
  },
  {
    "text": "in a in a in a public facing or something that we can access from a browser so that's sort of package",
    "start": "672480",
    "end": "678639"
  },
  {
    "text": "packaged in there and we just called start Asing on that and actually let let's just briefly have a look at the",
    "start": "678639",
    "end": "685360"
  },
  {
    "text": "web app first to see let me spin that up so as you can see it's I'm very creative",
    "start": "685360",
    "end": "690519"
  },
  {
    "text": "this is the standard hello hello Blazer app you get out of the box we do have a custom component that we can use to",
    "start": "690519",
    "end": "696040"
  },
  {
    "text": "Showcase some testing scenarios with this is the um a Blazer a bootst strip rather alert component that you can",
    "start": "696040",
    "end": "701560"
  },
  {
    "text": "dismiss by clicking that then we have the asynchronously loading weather forecast app you can see when I click it",
    "start": "701560",
    "end": "707360"
  },
  {
    "text": "here it it sort of loads a bit and then it gets some data and then we have the uh counter component uh that everybody",
    "start": "707360",
    "end": "714120"
  },
  {
    "text": "probably have seen million times where you click the click me button and the count increments so if we start by going",
    "start": "714120",
    "end": "719560"
  },
  {
    "text": "back to our test we can write a test for this particular thing and and and the test would be that yeah we want to see",
    "start": "719560",
    "end": "724839"
  },
  {
    "text": "that count increments when we click the button now we need a bunch of things in playright to be able to actually get to that point so first off we need the host",
    "start": "724839",
    "end": "731320"
  },
  {
    "text": "running we need our way running which which is covered by this bit here and then we need to spin up playright in",
    "start": "731320",
    "end": "736639"
  },
  {
    "text": "this particular case I'm going to use chromium uh as as my browser of choice",
    "start": "736639",
    "end": "742079"
  },
  {
    "text": "but you could also ask playr to use other browsers or use all of them uh if you want to do that and then there's a",
    "start": "742079",
    "end": "748600"
  },
  {
    "text": "thing we need need to have the server address and we get that from from the host so remember we spin up our web app",
    "start": "748600",
    "end": "754760"
  },
  {
    "text": "at a random port on our Local Host IP so we want to pass our server address into",
    "start": "754760",
    "end": "759959"
  },
  {
    "text": "to to Chrome uh to to to play Rather so that it knows what the base URL are so",
    "start": "759959",
    "end": "765040"
  },
  {
    "text": "we don't have to specify that in all of our tests and we also tell it to ignore HTTP errors because sometimes like when",
    "start": "765040",
    "end": "771440"
  },
  {
    "text": "you're running on Local Host but that I did now click click the five in V Studio it will spin up my web app and it will",
    "start": "771440",
    "end": "778480"
  },
  {
    "text": "use h GPS and use the local net Dev search certificate that sort of makes",
    "start": "778480",
    "end": "783560"
  },
  {
    "text": "that work but that might not always be supported or or trusted by the CI",
    "start": "783560",
    "end": "788720"
  },
  {
    "text": "pipeline that you are running on that particular image so this just tells playright to ignore any errors that you",
    "start": "788720",
    "end": "793760"
  },
  {
    "text": "have there and the next part is that we want to start a context and context is sort of similar to uh creating a new",
    "start": "793760",
    "end": "801000"
  },
  {
    "text": "browser profile so you get a clean slate uh like no cookies nothing or going into um incognito mode right so you basically",
    "start": "801000",
    "end": "808160"
  },
  {
    "text": "create a new context and in there uh we open up a new page which is akin to",
    "start": "808160",
    "end": "813240"
  },
  {
    "text": "opening a new tab in the browser now all of that enables us to actually get to the actual test we want to write so the",
    "start": "813240",
    "end": "819920"
  },
  {
    "text": "first thing we do here is let's go do this is we say well I have my page and I",
    "start": "819920",
    "end": "826560"
  },
  {
    "text": "want to tell that page to go to this UL the counter UL so that's the relative UL for the counter page and we have a",
    "start": "826560",
    "end": "833160"
  },
  {
    "text": "little bit after Source we need to pass here because the counter counter page is uh being uh",
    "start": "833160",
    "end": "839920"
  },
  {
    "text": "it's a bler that's bler server it's called interactive rendering now so it's using interactive rendering which means",
    "start": "839920",
    "end": "846440"
  },
  {
    "text": "that you need to establish a signal connection between the the back end and the the JavaScript to to work and and",
    "start": "846440",
    "end": "852560"
  },
  {
    "text": "playright is is fast so if we just ask it to go to a page and then go straight to the next step which is to to find",
    "start": "852560",
    "end": "859600"
  },
  {
    "text": "buttons on on on the page and click that it might actually try to click the button before the signal C has been",
    "start": "859600",
    "end": "865279"
  },
  {
    "text": "established so what we telling play right here is to wait until there's no money NE traffic going on which means",
    "start": "865279",
    "end": "870839"
  },
  {
    "text": "that the signal connection has been established there's other ways to do this that might be a bit more performant",
    "start": "870839",
    "end": "875920"
  },
  {
    "text": "because what it's essentially do is is just waiting 500 milliseconds and then testing and and looking so so it's a bit",
    "start": "875920",
    "end": "881399"
  },
  {
    "text": "slow to do that you can also set something up where you listen for uh web soet connections being enabled uh but",
    "start": "881399",
    "end": "888360"
  },
  {
    "text": "that that's a bit more convoluted and doesn't always work in all scenarios but with that other way now we can go to our",
    "start": "888360",
    "end": "895000"
  },
  {
    "text": "page and say get my button on the page that has the text click me and then",
    "start": "895000",
    "end": "900279"
  },
  {
    "text": "finally call click a string on that so that simulates the user clicking the button on the page now what we wanted to",
    "start": "900279",
    "end": "908279"
  },
  {
    "text": "assert was that it now has the text current count equals one and we do that again by going to the page and say get",
    "start": "908279",
    "end": "914399"
  },
  {
    "text": "by roll and find the the the element that has the um I Ro of status and and",
    "start": "914399",
    "end": "920480"
  },
  {
    "text": "we can quickly have a jump here to the component and you will see that we have",
    "start": "920480",
    "end": "926720"
  },
  {
    "text": "our P tag annotated with I States so once we have that we can tell we can use",
    "start": "926720",
    "end": "933199"
  },
  {
    "text": "the play White specific assertions and tell that we expect the states element to have the text that looks like this",
    "start": "933199",
    "end": "941040"
  },
  {
    "text": "now in terms of maintainability there's a whole lot of things going on in this code that that is not really specific to",
    "start": "941040",
    "end": "946519"
  },
  {
    "text": "the individual test so what I would suggest you do is that you refactor all",
    "start": "946519",
    "end": "953199"
  },
  {
    "text": "of the stuff that we had up here into you know a helper class a helper type",
    "start": "953199",
    "end": "959519"
  },
  {
    "text": "and play actually have a pattern they they come with out of the box uh they call it a page test a type that you can",
    "start": "959519",
    "end": "965360"
  },
  {
    "text": "you can inherit from here I've extended that ever so slightly so I created my own Blazer page test that um takes in",
    "start": "965360",
    "end": "973319"
  },
  {
    "text": "the program and program points to our program CS we have up here which is the",
    "start": "973319",
    "end": "978839"
  },
  {
    "text": "program uh the host we want to run um and this basically does all the things we did before it starts off the Blazer",
    "start": "978839",
    "end": "985560"
  },
  {
    "text": "web application and it does all the things with host name and servers so we don't have to repeat that in all our",
    "start": "985560",
    "end": "991600"
  },
  {
    "text": "tests now another thing we don't want to repeat in all our test is the logic we",
    "start": "991600",
    "end": "997720"
  },
  {
    "text": "had with around waiting for a network connection to be stable uh so there I've",
    "start": "997720",
    "end": "1004079"
  },
  {
    "text": "created a helper method called go to Blazer server page so if you if you're creating a a test for a Blazer web",
    "start": "1004079",
    "end": "1010560"
  },
  {
    "text": "assembly app you won't need that particular extension method but this is a good good good approach to creating",
    "start": "1010560",
    "end": "1016040"
  },
  {
    "text": "test that are maintainable capture common patter that you're going to be reusing across your test and and move",
    "start": "1016040",
    "end": "1022040"
  },
  {
    "text": "them into extension methods so that that sort of have a good strong name that indicates what's going on here you could also imagine that if you have had a",
    "start": "1022040",
    "end": "1028640"
  },
  {
    "text": "Blazer that requires authentication or required users to log in first so before each test you might actually have",
    "start": "1028640",
    "end": "1034240"
  },
  {
    "text": "captured all the steps that you need to do to to log in first like so basically going to the root URL then going to the/",
    "start": "1034240",
    "end": "1040600"
  },
  {
    "text": "login and fill in some username and password that matches the test case you want to test uh and then returns you",
    "start": "1040600",
    "end": "1047280"
  },
  {
    "text": "back to where you came from and then you can start your test so so capturing things like that in reusable methods",
    "start": "1047280",
    "end": "1053440"
  },
  {
    "text": "that have domain language that matches your particular situation it's a really good idea in testing in general but",
    "start": "1053440",
    "end": "1059200"
  },
  {
    "text": "specifically also here and actually I want to double click a bit on on the",
    "start": "1059200",
    "end": "1064520"
  },
  {
    "text": "whole get by role we have down here so it's highly recommend in terms of",
    "start": "1064520",
    "end": "1070440"
  },
  {
    "text": "maintainability that you try to go in and work uh with the elements in your",
    "start": "1070440",
    "end": "1076480"
  },
  {
    "text": "web page in a similar way as close to how the user would work with it so when",
    "start": "1076480",
    "end": "1081840"
  },
  {
    "text": "you try to find elements or try to do stuff with elements try to Target them on things that are visible to the user",
    "start": "1081840",
    "end": "1087559"
  },
  {
    "text": "so the user don't see if you have a div element or span or an H1 element but they see the text that are in there and",
    "start": "1087559",
    "end": "1094559"
  },
  {
    "text": "and one of the tools that browsers have is uh area attributes where you can annotate different elements with area",
    "start": "1094559",
    "end": "1101240"
  },
  {
    "text": "attributes that indicates both to people that need assisted Technologies what kind of element are this but also gives",
    "start": "1101240",
    "end": "1107799"
  },
  {
    "text": "you more input to it and that means that I can write a test like this where I say I want to find something that has the iroll of button and it should have this",
    "start": "1107799",
    "end": "1114919"
  },
  {
    "text": "text now if I go back to my counter component here and and change this to be",
    "start": "1114919",
    "end": "1121400"
  },
  {
    "text": "a anchor tag Instead This Test will still work because well in this",
    "start": "1121400",
    "end": "1126480"
  },
  {
    "text": "particular case I would need to give it roll of button but then it would still work so I I'm able to refactor",
    "start": "1126480",
    "end": "1131600"
  },
  {
    "text": "implementation details about my code without my test breaking and that's really a very very important part of",
    "start": "1131600",
    "end": "1137600"
  },
  {
    "text": "writing good test is that you can change implementation details without breaking your tests uh obviously the reason why",
    "start": "1137600",
    "end": "1143640"
  },
  {
    "text": "we don't need to have the role attribute on button is because some elements have default attributes assigned to them so",
    "start": "1143640",
    "end": "1149039"
  },
  {
    "text": "in this particular case a button is by default have the by default the i r of button so that that is you know a really",
    "start": "1149039",
    "end": "1156520"
  },
  {
    "text": "good point to to go through and also I found that writing playright test like this what what ends up happening is that",
    "start": "1156520",
    "end": "1163360"
  },
  {
    "text": "you um you you almost like if you want to write a good test like that you almost",
    "start": "1163360",
    "end": "1169280"
  },
  {
    "text": "automatically enforces yourself to write uh proper accessibility into your web app like you are adding the IR rolls",
    "start": "1169280",
    "end": "1175159"
  },
  {
    "text": "because that's what playright kind of it almost forces you to to go this direction you could use Query selector",
    "start": "1175159",
    "end": "1180720"
  },
  {
    "text": "all to find elements in the page but then you are very much tying a test to",
    "start": "1180720",
    "end": "1186200"
  },
  {
    "text": "specific structure of your HTML and that's probably not what you want",
    "start": "1186200",
    "end": "1191919"
  },
  {
    "text": "okay by the way if you have any questions or comment just shout at me otherwise I'll just plow through these",
    "start": "1191919",
    "end": "1197600"
  },
  {
    "text": "and you won't get chance to to interrupt me at all so please do that now I just want to showcase the tracing",
    "start": "1197600",
    "end": "1203679"
  },
  {
    "text": "capabilities because I think they are super valuable especially when if like typically for for a playr test like clicking a button and seeing that your",
    "start": "1203679",
    "end": "1209960"
  },
  {
    "text": "output is there it's like three lines of code it's a very simple test typically you have if you want to write test for",
    "start": "1209960",
    "end": "1215559"
  },
  {
    "text": "something you probably have some more complexity there maybe you have a complex form you want to fill out you want to sort of simulate the user going",
    "start": "1215559",
    "end": "1220919"
  },
  {
    "text": "through with filling out lots of fields those tests could be very large it could be hard to understand what's going on so",
    "start": "1220919",
    "end": "1226000"
  },
  {
    "text": "tracing you can do like this so there is a context element that comes from from",
    "start": "1226000",
    "end": "1232200"
  },
  {
    "text": "um from playright where you can say start tracing and I want to capture everything I want to capture screenshots",
    "start": "1232200",
    "end": "1237400"
  },
  {
    "text": "uh of the page I want to capture snapshots of the Dom I want to capture my code that was actually running during",
    "start": "1237400",
    "end": "1243120"
  },
  {
    "text": "the test so you can do all of that and then you can see here the rest of the test is the same but when the test is",
    "start": "1243120",
    "end": "1248480"
  },
  {
    "text": "done you tell it to well now I'm done with capturing the thing I'm interested about this test and and this is sort of",
    "start": "1248480",
    "end": "1255720"
  },
  {
    "text": "the place where you end up going to the command line uh if you're using visual studio but here you can see that is",
    "start": "1255720",
    "end": "1262280"
  },
  {
    "text": "again the playright Powershell script you can call show trace on that and then you pass in the trace file that you",
    "start": "1262280",
    "end": "1268360"
  },
  {
    "text": "generated uh I've already done that so let me just open that up",
    "start": "1268360",
    "end": "1274080"
  },
  {
    "text": "here takes a little bit here we go and you get this uh Trace viewer that's",
    "start": "1274080",
    "end": "1279520"
  },
  {
    "text": "built into playr actually they have a trace viewer online as well uh so if you for examp running on on your CI",
    "start": "1279520",
    "end": "1285840"
  },
  {
    "text": "pipelines and you uh get the uh TR files captured and uploaded after the run you",
    "start": "1285840",
    "end": "1291200"
  },
  {
    "text": "can go and download the trace files and you can just view them directly in the online Trace view you don't have to use the you know the local one here and you",
    "start": "1291200",
    "end": "1297600"
  },
  {
    "text": "can see here we can see the flow of the test there's a bunch of screenshots while while the app is loading and and",
    "start": "1297600",
    "end": "1302720"
  },
  {
    "text": "we have a timer up up up up up in the top then you have here each of the steps",
    "start": "1302720",
    "end": "1308000"
  },
  {
    "text": "in the test that sort of was significant so we have the goto page where you can see we go to the page then the next step",
    "start": "1308000",
    "end": "1314360"
  },
  {
    "text": "over here you can see that we highlighting that it it highlights what element did it click with a red square",
    "start": "1314360",
    "end": "1320960"
  },
  {
    "text": "in the middle and then finally we have our assertion where you can see it highlights this and then there's other",
    "start": "1320960",
    "end": "1326279"
  },
  {
    "text": "things you can see the network traffic down here in each step you can see console output uh errors locks all of",
    "start": "1326279",
    "end": "1332440"
  },
  {
    "text": "that so so it's it's a super valuable tool to have now let me just double check my notes",
    "start": "1332440",
    "end": "1339039"
  },
  {
    "text": "Here uh yes okay so we talked about I mentioned",
    "start": "1339039",
    "end": "1345279"
  },
  {
    "text": "Snapchat testing earlier right so we can uh we can use something called verify",
    "start": "1345279",
    "end": "1351520"
  },
  {
    "text": "verify is a it's a fantastic tool built by fellow con Simon crop he has sort of the verify base package and then he",
    "start": "1351520",
    "end": "1357720"
  },
  {
    "text": "extends that with a whole bunch of custom U support for all all sorts of",
    "start": "1357720",
    "end": "1362880"
  },
  {
    "text": "things you want to snapshot and snapshot means you basically part take usually a big snapshot of some content it could be",
    "start": "1362880",
    "end": "1368520"
  },
  {
    "text": "an HTP response it could be an HTML page in our case and you save that on dis and then the next time you run the test you",
    "start": "1368520",
    "end": "1374880"
  },
  {
    "text": "take uh take that snapshot you have and compare it to the to the out put of the current test and if they don't match up",
    "start": "1374880",
    "end": "1380880"
  },
  {
    "text": "using typically using simple text dipping then it will uh give you an error and then you get a chance to",
    "start": "1380880",
    "end": "1387039"
  },
  {
    "text": "update your snapshot if it's supposed to uh have changed otherwise you capture it and that can use that can be useful if",
    "start": "1387039",
    "end": "1393880"
  },
  {
    "text": "you have quite complex things like if you are writing 10 20 assert statements to sort of capture all the state you",
    "start": "1393880",
    "end": "1399960"
  },
  {
    "text": "want then snapshot testing can be can be really good so in this particular case we we just want to cap capture a",
    "start": "1399960",
    "end": "1405360"
  },
  {
    "text": "snapshot of the counter uh page again uh we find the main part of the page so the",
    "start": "1405360",
    "end": "1411880"
  },
  {
    "text": "main part of the page has an ARA role attached to it saying this is the main part and we get the HTML out of that and",
    "start": "1411880",
    "end": "1417159"
  },
  {
    "text": "we just pass that to verify and what verify does is it will by default create a snapshot file and you can see it's",
    "start": "1417159",
    "end": "1424120"
  },
  {
    "text": "it's annotated with let me zoom into that so you can see that a bit better h i assom doesn't work here we go",
    "start": "1424120",
    "end": "1432679"
  },
  {
    "text": "it's annotated with the name of the test and then verified HTML in this particular case",
    "start": "1432679",
    "end": "1438679"
  },
  {
    "text": "okay allow me to zoom out again there you go and you can see in this particular case it's just captured this",
    "start": "1438679",
    "end": "1443919"
  },
  {
    "text": "because I asked it to just capture the the main part of what I wanted I could also captured the full you know HTML tag",
    "start": "1443919",
    "end": "1450720"
  },
  {
    "text": "all the way to the end of of the the full page um obviously this can be a bit brittle",
    "start": "1450720",
    "end": "1457799"
  },
  {
    "text": "because if you're building an app you're capturing potential implementation details like what are the elements I'm",
    "start": "1457799",
    "end": "1463799"
  },
  {
    "text": "using that might not be relevant uh for in your particular case so a better way that's been introduced recently with uh",
    "start": "1463799",
    "end": "1470279"
  },
  {
    "text": "playright is ARA snapshot so here we have the same test but the difference is",
    "start": "1470279",
    "end": "1476919"
  },
  {
    "text": "this particular thing here where you can ask uh playright to create a snapshot",
    "start": "1476919",
    "end": "1482919"
  },
  {
    "text": "and in line you can say well I expect that to be a structure that looks like this where I have an area type that is",
    "start": "1482919",
    "end": "1489559"
  },
  {
    "text": "main I have a heading uh which the content of counter I have a status of current count one and I have a button",
    "start": "1489559",
    "end": "1496200"
  },
  {
    "text": "with clickme now again this would support me going and changing for example the button type to a to an",
    "start": "1496200",
    "end": "1502520"
  },
  {
    "text": "anchor tag instead I could also say well it doesn't really matter that the heading tag is a level one tag so if it",
    "start": "1502520",
    "end": "1509960"
  },
  {
    "text": "doesn't matter to me that it's a level one I can just remove that and the test would still pass so again that's a way for us to capture potentially a quite",
    "start": "1509960",
    "end": "1516399"
  },
  {
    "text": "big output maybe if you have a large form and you click save on that and you want to capture what is the state of the page what is the output of my uh doing",
    "start": "1516399",
    "end": "1523799"
  },
  {
    "text": "that action on my web page I can capture that in a format that is quite uh effective itive at capturing the essence",
    "start": "1523799",
    "end": "1529799"
  },
  {
    "text": "of what you wanted wanted to achieve um so I definitely want to recommend using that compared to using the just",
    "start": "1529799",
    "end": "1536679"
  },
  {
    "text": "capturing the raw Mar up in this particular case",
    "start": "1536679",
    "end": "1542000"
  },
  {
    "text": "now let's see yes",
    "start": "1542000",
    "end": "1548039"
  },
  {
    "text": "so we have the weather forecast page another thing we might want to do is uh",
    "start": "1548039",
    "end": "1553559"
  },
  {
    "text": "we we want to test something that depends on services in this particular case we're going to the weather for forecast page here and we are finding",
    "start": "1553559",
    "end": "1561520"
  },
  {
    "text": "the table so if you remember the weather forecast will load a table of elements",
    "start": "1561520",
    "end": "1566799"
  },
  {
    "text": "and we want to assert that it I don't know what we want to assert necessar about this but we in this particular",
    "start": "1566799",
    "end": "1571840"
  },
  {
    "text": "case we want to just check that hey we're getting five five rows here now and and as you can see it it's quite",
    "start": "1571840",
    "end": "1579039"
  },
  {
    "text": "straightforward we go and say give me all the table rows in the table body the table and we expect to have five and we",
    "start": "1579039",
    "end": "1586399"
  },
  {
    "text": "got x amount of rows now the challenge here is that if the",
    "start": "1586399",
    "end": "1592679"
  },
  {
    "text": "backend that is delivering your API results your your weather forecast might not always return five right so if you",
    "start": "1592679",
    "end": "1598440"
  },
  {
    "text": "want to create a stable test you probably want some way to control that if this is a particular test you want to",
    "start": "1598440",
    "end": "1604279"
  },
  {
    "text": "write now um as I mentioned with web application Factory what you can do is",
    "start": "1604279",
    "end": "1610520"
  },
  {
    "text": "you can go in and configure the actual appost before it starts running so you can get control over it so instead of",
    "start": "1610520",
    "end": "1616799"
  },
  {
    "text": "our weather forecast report that's built in that is using perhaps live data somewhere from we can have a stop or",
    "start": "1616799",
    "end": "1623039"
  },
  {
    "text": "fake or mock version of that that we used during testing now that takes away a bit from the complete end toess of",
    "start": "1623039",
    "end": "1629000"
  },
  {
    "text": "your test so you lose a bit of you know end to edness there but then again you",
    "start": "1629000",
    "end": "1634120"
  },
  {
    "text": "also create an environment where your test will always do the same thing so I've created a stop here and you I can",
    "start": "1634120",
    "end": "1639559"
  },
  {
    "text": "specify how many weather for CS should this run uh we should this return when it's called so that means that I'm",
    "start": "1639559",
    "end": "1646399"
  },
  {
    "text": "certain that this test won't change won't misbehave in the future if a dependency of M",
    "start": "1646399",
    "end": "1652200"
  },
  {
    "text": "changes now let's see other things we want to",
    "start": "1652200",
    "end": "1657480"
  },
  {
    "text": "talk about here [Music] now yeah okay",
    "start": "1657480",
    "end": "1663360"
  },
  {
    "text": "so there's a few caveat to that and",
    "start": "1663360",
    "end": "1668559"
  },
  {
    "text": "let's that we want to be aware of see if we can get the slides up and going again yeah there we go so with",
    "start": "1668559",
    "end": "1678278"
  },
  {
    "text": "come on there we go so this doesn't work all the time it",
    "start": "1682440",
    "end": "1687640"
  },
  {
    "text": "works because our web app is hosted on the back end but what if we were using web assembly and with net8 and blazer.",
    "start": "1687640",
    "end": "1695360"
  },
  {
    "text": "we got the alra mode right so you can't control you can't change services on a",
    "start": "1695360",
    "end": "1700559"
  },
  {
    "text": "web assembly app the same way that we're doing it here so if we have a scenario where we have a Blazer web app and a API",
    "start": "1700559",
    "end": "1707240"
  },
  {
    "text": "server and we have our browser and it's running player server to get the weather forecast and it will call there which",
    "start": "1707240",
    "end": "1713600"
  },
  {
    "text": "will have it call our weather DB repository which will code to some data source could be a database or somewhere",
    "start": "1713600",
    "end": "1719519"
  },
  {
    "text": "else where we have the weather forecast stored and it will return it out so that means that we can replace that during",
    "start": "1719519",
    "end": "1725360"
  },
  {
    "text": "testing right but what if it's a web assembly app well then it's probably an HTTP client that is calling our API and",
    "start": "1725360",
    "end": "1731080"
  },
  {
    "text": "it's calling this guy as well and still our replacement work but in the scenario",
    "start": "1731080",
    "end": "1737600"
  },
  {
    "text": "where you trying to replace a service that only exists on the client maybe it's I don't know some authentication",
    "start": "1737600",
    "end": "1742799"
  },
  {
    "text": "bits or something specific or you're calling complete an external API you don't have that hook that we show saw",
    "start": "1742799",
    "end": "1748039"
  },
  {
    "text": "here we don't have that hook directly in our our web assembly code so so there it's more blackbox testing in a sense",
    "start": "1748039",
    "end": "1754720"
  },
  {
    "text": "you don't have the same abilities as you have over the r but you can control your own API uh so that's something to keep",
    "start": "1754720",
    "end": "1760559"
  },
  {
    "text": "in mind now that was sort of a world went tour through what I think is the",
    "start": "1760559",
    "end": "1766080"
  },
  {
    "text": "highlight of playright there is lots of M mentation that you can double click on and and and find ways to tweak and",
    "start": "1766080",
    "end": "1772320"
  },
  {
    "text": "optimize that particular scenario you might be having so component testing that's the next topic and for that we",
    "start": "1772320",
    "end": "1778720"
  },
  {
    "text": "can use B unit that which was a library I created uh I think five years ago now and I'm maintaining with a couple of",
    "start": "1778720",
    "end": "1784720"
  },
  {
    "text": "other MVPs uh today um B units is a",
    "start": "1784720",
    "end": "1790559"
  },
  {
    "text": "library that allows you to test Blazer components in isolation and it it",
    "start": "1790559",
    "end": "1795880"
  },
  {
    "text": "enables you to actually go and render component pass parameters to it and and",
    "start": "1795880",
    "end": "1801480"
  },
  {
    "text": "get HTML out of it normally like Blazer components themselves they just see SHP classes at the end of the day but if you",
    "start": "1801480",
    "end": "1807519"
  },
  {
    "text": "go and new oneup uh it doesn't know how to produce markup itself it can only uh",
    "start": "1807519",
    "end": "1813480"
  },
  {
    "text": "give you sort of a a it it has thing called a render tree inside it that represents the markup you want it to",
    "start": "1813480",
    "end": "1818960"
  },
  {
    "text": "produce but it doesn't actually know how to produce markup so that's sort of what what we get with bit um it doesn't care",
    "start": "1818960",
    "end": "1825480"
  },
  {
    "text": "about the render mode that your component is written to so if you are targeting interactive server interactive",
    "start": "1825480",
    "end": "1830679"
  },
  {
    "text": "web assembly or just static uh Blazer or maybe a new future uh render mode that",
    "start": "1830679",
    "end": "1836159"
  },
  {
    "text": "might be coming out uh we don't know then doesn't really matter beit is in",
    "start": "1836159",
    "end": "1841240"
  },
  {
    "text": "its own way its own render mode um and and it's sort of the goal we have is we",
    "start": "1841240",
    "end": "1846360"
  },
  {
    "text": "want to make it so that it's easy for you guys to write tests that look similar to what you do with uh unit test right so it shouldn't be too dissimilar",
    "start": "1846360",
    "end": "1854279"
  },
  {
    "text": "um and many of the tools and practice and and and libraries you use together with B unit and your favorite testing",
    "start": "1854279",
    "end": "1860559"
  },
  {
    "text": "framework xunit nunit Ms test or what is I think T unit is the new hot Kit on the Block they they will work together um",
    "start": "1860559",
    "end": "1868320"
  },
  {
    "text": "and we also include some first party services or doubles test doubles for those like we have we have a um fake",
    "start": "1868320",
    "end": "1875360"
  },
  {
    "text": "navigation manager we have a fake for authentication in Placer so that's easy to test scenarios like that uh one thing",
    "start": "1875360",
    "end": "1882960"
  },
  {
    "text": "that is sort of the key distinction I think between bit and playright is that bit doesn't run in a browser it's all in",
    "start": "1882960",
    "end": "1888480"
  },
  {
    "text": "C so you don't get uh your CSS tested you don't get your JavaScript tested so it's very much just testing the C bits",
    "start": "1888480",
    "end": "1895600"
  },
  {
    "text": "of of of your code but we do have um a a",
    "start": "1895600",
    "end": "1900880"
  },
  {
    "text": "specialized mock of the IGS runtime and IG run time is the thing that we use to communicate with JavaScript from our C",
    "start": "1900880",
    "end": "1906919"
  },
  {
    "text": "code so that you can still write assertions in your test saying that I expected this um JavaScript method to be",
    "start": "1906919",
    "end": "1913320"
  },
  {
    "text": "called from my C library at this point in time and you can yourself simulate JavaScript calling back to your C",
    "start": "1913320",
    "end": "1919720"
  },
  {
    "text": "components you have all of that enabled and available to you the upside of sort of only focusing",
    "start": "1919720",
    "end": "1927120"
  },
  {
    "text": "on the CP parts of your Blazer component is that it runs very fast and we have deep hooks into the Blazer runtime so we",
    "start": "1927120",
    "end": "1934519"
  },
  {
    "text": "know whenever there's a render cycle that's happening so we can stop execution we can allow your test to",
    "start": "1934519",
    "end": "1940320"
  },
  {
    "text": "assert on the mark that's been produced and and and figure out what's going on and last point I want to highlight is",
    "start": "1940320",
    "end": "1947039"
  },
  {
    "text": "sometimes debugging laser can be a little bit tricky uh and with B unit you just write a test where you set up the",
    "start": "1947039",
    "end": "1953159"
  },
  {
    "text": "scenario and you can basically run your test set your breakpoint and step directly into the code and that could",
    "start": "1953159",
    "end": "1958480"
  },
  {
    "text": "save a bunch of times if you have like compared to hitting a five going into the browser finding the right page where",
    "start": "1958480",
    "end": "1965200"
  },
  {
    "text": "the component are and start you know manipulating that putting in the putting it into the state that you want to test",
    "start": "1965200",
    "end": "1971360"
  },
  {
    "text": "so if you don't like testing at least you can use bit to to debug your code with in in in Blazer now",
    "start": "1971360",
    "end": "1978960"
  },
  {
    "text": "bits and playright test can exist in the same test solution so what we need to do is we just need to add our B the bit",
    "start": "1978960",
    "end": "1985880"
  },
  {
    "text": "package to to our testing uh project and we also want to add bits uh extension to",
    "start": "1985880",
    "end": "1991760"
  },
  {
    "text": "verify U to the testing package as well so we can also use verified to snapshot bit specific",
    "start": "1991760",
    "end": "1997000"
  },
  {
    "text": "things um so let's jump over to Vis Studio again let's see if we can",
    "start": "1997000",
    "end": "2004440"
  },
  {
    "text": "get I think that did it uh let's close all of these tabs uh",
    "start": "2006399",
    "end": "2014159"
  },
  {
    "text": "let's undo that change now up here in component",
    "start": "2014159",
    "end": "2020000"
  },
  {
    "text": "testing let's just start with the simple example we had before so to be able to",
    "start": "2020000",
    "end": "2026559"
  },
  {
    "text": "test our counter component again see that when we click it the type increments we need to do this so we need",
    "start": "2026559",
    "end": "2032960"
  },
  {
    "text": "a couple of things we need a bit test context that is the thing that enables us to set environment we need to have",
    "start": "2032960",
    "end": "2039320"
  },
  {
    "text": "around our components uh we so we can pass in Services we can call it we can render it we can pass parameters to it",
    "start": "2039320",
    "end": "2045840"
  },
  {
    "text": "the next thing we do is uh we actually ask our context to render our component",
    "start": "2045840",
    "end": "2051960"
  },
  {
    "text": "and this might look a bit odd because it looks like C Shar code but we actually in a razor file and that's a good thing because it allows us to easily pass in",
    "start": "2051960",
    "end": "2059358"
  },
  {
    "text": "parameters that's going to be examples of that later to our component now razor files in a test project is not something",
    "start": "2059359",
    "end": "2065560"
  },
  {
    "text": "you normally do but the way you enable that is if you go to your test project and go to the Cs P file uh the only",
    "start": "2065560",
    "end": "2072440"
  },
  {
    "text": "thing you need to do is you need to change the SDK type to uh m. net. sdk. rer and that enables the Blazer or razor",
    "start": "2072440",
    "end": "2080638"
  },
  {
    "text": "compiler uh to run and pick up your razor files and turn them into C files and then all of a sudden you're able to",
    "start": "2080639",
    "end": "2086878"
  },
  {
    "text": "write your C uh or well bler files or no sorry you're able to write your bit test",
    "start": "2086879",
    "end": "2092919"
  },
  {
    "text": "in razor files that is also if you prefer a syntax where you can just write it directly in C code um and if anybody",
    "start": "2092919",
    "end": "2100680"
  },
  {
    "text": "been working with the razor editor in in Visual Studio knows it's a bit finicky at times so sometimes it it might",
    "start": "2100680",
    "end": "2106480"
  },
  {
    "text": "actually be easier to work with but this is what we recommend doing so out of the",
    "start": "2106480",
    "end": "2112400"
  },
  {
    "text": "render method we get a render fragment and render fragment represents the output of a rendering of that particular",
    "start": "2112400",
    "end": "2118599"
  },
  {
    "text": "component so that has a bunch of things that we can do to it one of the things it allows us to do is to search the DM",
    "start": "2118599",
    "end": "2125560"
  },
  {
    "text": "tree the the the El M ments that were created by that component using a find",
    "start": "2125560",
    "end": "2131160"
  },
  {
    "text": "method that is similar to query selector that you have in the browser or if you use jQuery at some point you would",
    "start": "2131160",
    "end": "2136320"
  },
  {
    "text": "recognize that name for that method and then we call the click method on the element we found and that simulates",
    "start": "2136320",
    "end": "2143040"
  },
  {
    "text": "again clicking uh that event handler that is or click on the Buton button or in more precise terms in bit what we're",
    "start": "2143040",
    "end": "2149720"
  },
  {
    "text": "doing is we're actually calling the event handler that is attached to the button in C code and now we do the exact",
    "start": "2149720",
    "end": "2155440"
  },
  {
    "text": "same thing as we did before we find the element with the r of status and then we can assert that",
    "start": "2155440",
    "end": "2161560"
  },
  {
    "text": "you know count is one obviously there's much less things that are repeated here compared to the very",
    "start": "2161560",
    "end": "2168359"
  },
  {
    "text": "vanilla playright test we only have this line but it's still recommended in to of the bit test that you just instead of",
    "start": "2168359",
    "end": "2174839"
  },
  {
    "text": "having that instantiated in every test you just inherit from that and now all the methods the random methods uh other",
    "start": "2174839",
    "end": "2180800"
  },
  {
    "text": "methods that are on the test context are just readily available to your uh test class directly otherwise it's the same",
    "start": "2180800",
    "end": "2187280"
  },
  {
    "text": "thing now one of the things that we don't have um yet um in to the same level of",
    "start": "2187280",
    "end": "2193720"
  },
  {
    "text": "details as as as playr has are the find by role find by um there's a whole bunch",
    "start": "2193720",
    "end": "2201000"
  },
  {
    "text": "of find by or get by methods that that comes within playright that comes from um a library called testing Library",
    "start": "2201000",
    "end": "2207760"
  },
  {
    "text": "that's sort of the inspiration and it's sort of a general way of addressing so that's the semantic way or or the more",
    "start": "2207760",
    "end": "2214160"
  },
  {
    "text": "area focused way of going in and and finding elements typically it's not a big deal uh because you're testing a",
    "start": "2214160",
    "end": "2220280"
  },
  {
    "text": "component isolation but it is nice to have so uh fellow MVP Scott saber",
    "start": "2220280",
    "end": "2225400"
  },
  {
    "text": "started implementing the query apis the get by rooll get by label and so on so forth in in in bit and we have some of",
    "start": "2225400",
    "end": "2232800"
  },
  {
    "text": "them now and hopefully during the year we will get uh especially the find by uh find by role will be implemented it's a",
    "start": "2232800",
    "end": "2239359"
  },
  {
    "text": "bit it's bit tricky but it will certainly help a bit um all of and",
    "start": "2239359",
    "end": "2246160"
  },
  {
    "text": "that's that's see yes weather forecast test in Blade in B unit is a bit",
    "start": "2246160",
    "end": "2252440"
  },
  {
    "text": "different in that we since we're not running the full server right we actually have and and if if we go and",
    "start": "2252440",
    "end": "2258079"
  },
  {
    "text": "have a look at the see weather page you will notice that it's getting the",
    "start": "2258079",
    "end": "2264359"
  },
  {
    "text": "repository the the source of the weather forecast injected into it so when we're just rendering that weather forecast",
    "start": "2264359",
    "end": "2270880"
  },
  {
    "text": "page directly we want to enable bit to to inject some service during testing",
    "start": "2270880",
    "end": "2277160"
  },
  {
    "text": "and this particular case you would recognize the pattern from many other places we have a services collection on the test context and that has an ADD",
    "start": "2277160",
    "end": "2285000"
  },
  {
    "text": "singon and here we're just passing in the stop weather forecast repository in this particular case I decided that it",
    "start": "2285000",
    "end": "2291359"
  },
  {
    "text": "should return to and we can basically have the same test as we had before now there's another interesting thing here",
    "start": "2291359",
    "end": "2297480"
  },
  {
    "text": "and that's the weight for elements so if you remember when you go to the weather forecast past it shows a loading text",
    "start": "2297480",
    "end": "2303119"
  },
  {
    "text": "and then after I think 500 milliseconds it will go and and find the the weather forecast um B unit has the same ability",
    "start": "2303119",
    "end": "2311480"
  },
  {
    "text": "to wait for things to show up uh so that your test remain stable but what it does",
    "start": "2311480",
    "end": "2316680"
  },
  {
    "text": "is as mentioned it does it a bit differently because we listen to the render cycle of the Blazer renderer we",
    "start": "2316680",
    "end": "2323480"
  },
  {
    "text": "know that when the task completes that actually Returns the weather forecast to",
    "start": "2323480",
    "end": "2329160"
  },
  {
    "text": "the component and it updates the the markup the the render will call back to the test and say hey some I I've",
    "start": "2329160",
    "end": "2336319"
  },
  {
    "text": "rendered so go and see if you can find the elements you were looking for and it will block the rendering uh until that",
    "start": "2336319",
    "end": "2343200"
  },
  {
    "text": "we've sort of done with that and we we verified that we found elements we have so one of the problems that you can run",
    "start": "2343200",
    "end": "2350200"
  },
  {
    "text": "into with playwright is that if you have something where you are actively changing the you know changing the",
    "start": "2350200",
    "end": "2355839"
  },
  {
    "text": "markup maybe in a in a loop every 100 milliseconds or so you might wait for",
    "start": "2355839",
    "end": "2361400"
  },
  {
    "text": "the things change change to happen and then you start you know interrogating or working with those element and then",
    "start": "2361400",
    "end": "2366480"
  },
  {
    "text": "might change while you're doing that because you play playright can't block you know browser from continuing to do",
    "start": "2366480",
    "end": "2372920"
  },
  {
    "text": "it work updating getting new stuff so so we have much tighter control um because",
    "start": "2372920",
    "end": "2378800"
  },
  {
    "text": "we're directly basically providing our own render methods now another thing that we can do",
    "start": "2378800",
    "end": "2387200"
  },
  {
    "text": "is um directly pass parameters to components that we want to test so",
    "start": "2387200",
    "end": "2392680"
  },
  {
    "text": "imagine that you are creating component library or you're creating reusable libraries or reusable components that",
    "start": "2392680",
    "end": "2397880"
  },
  {
    "text": "you want to use multiple places in your bler application so in this particular case we have the alert component that we",
    "start": "2397880",
    "end": "2402920"
  },
  {
    "text": "created and can just quickly show you how that looks like it's a very standard",
    "start": "2402920",
    "end": "2409640"
  },
  {
    "text": "alert component not very interesting if you worked with bootstrap at all you would recognize some of the terminology here um it has four or three public",
    "start": "2409640",
    "end": "2418800"
  },
  {
    "text": "properties whether it's been dismissed uh what kind of alert you want to create and some child content and that's sort",
    "start": "2418800",
    "end": "2425040"
  },
  {
    "text": "of you know created down here following and the prescription that bootstrap gives us and you know how things should",
    "start": "2425040",
    "end": "2430319"
  },
  {
    "text": "be looking so here we can see how easy it is to basically set up a component on",
    "start": "2430319",
    "end": "2437560"
  },
  {
    "text": "Test passing in just by declaring markup directly in our C saying well I want an",
    "start": "2437560",
    "end": "2442720"
  },
  {
    "text": "alert component I want these parameters being passed in with this child content so that that's a super easy way to",
    "start": "2442720",
    "end": "2448920"
  },
  {
    "text": "actually set up a test scenario and now in this particular test we're checking that you know we can dismiss things uh",
    "start": "2448920",
    "end": "2456040"
  },
  {
    "text": "and we can dismiss our component and and and the end result after we dismissed our Le component by clicking the the x",
    "start": "2456040",
    "end": "2462720"
  },
  {
    "text": "is that we want to we want to have we want to have the dismissed um uh property on our L components switch to",
    "start": "2462720",
    "end": "2469359"
  },
  {
    "text": "true so that's another thing we can do so we start by doing the ACT we actually dismissed the component but now we can",
    "start": "2469359",
    "end": "2475240"
  },
  {
    "text": "go into not just the Dom tree but we can go into the component tree so in in Blazer you have a tree of components",
    "start": "2475240",
    "end": "2481839"
  },
  {
    "text": "that are you know actual cab objects living in memory and in B unit we can go in and actually walk through that uh",
    "start": "2481839",
    "end": "2488400"
  },
  {
    "text": "component Tre and in this particular case we go from our component under test which is our sort of uh top root of our",
    "start": "2488400",
    "end": "2495520"
  },
  {
    "text": "component tree and we say find me a component of type alert we know there's only going to be one because we only passed one in here once we have that we",
    "start": "2495520",
    "end": "2502079"
  },
  {
    "text": "get a an IR render component of alert type out and that has an instance property on it that gives us the actual",
    "start": "2502079",
    "end": "2509000"
  },
  {
    "text": "C alert instance and now I can go to my dismissed property on my alert component",
    "start": "2509000",
    "end": "2514960"
  },
  {
    "text": "and ask whether or not you you've switched to being true so you can see we have this property and when the button",
    "start": "2514960",
    "end": "2521160"
  },
  {
    "text": "element button is clicked we're supposed to switch that over to true so we can sort of verify functionaly",
    "start": "2521160",
    "end": "2527640"
  },
  {
    "text": "now again discussion Point might be well are we testing implementation details is",
    "start": "2527640",
    "end": "2533319"
  },
  {
    "text": "whether or not a element has or component has switched its internal state to being dismissed or not is that",
    "start": "2533319",
    "end": "2539200"
  },
  {
    "text": "something we want to have in our test probably if you're writing a component library because then the dismissed",
    "start": "2539200",
    "end": "2545520"
  },
  {
    "text": "property is part of the public API service that you're promising to your users of your component Library it might",
    "start": "2545520",
    "end": "2550960"
  },
  {
    "text": "not be the case if it's just an internal component so so there might be some you know it it it's not always a good idea",
    "start": "2550960",
    "end": "2558240"
  },
  {
    "text": "and and it should certainly make you think a bit especially if you're creating a web app when you start interrogating the component Tre that",
    "start": "2558240",
    "end": "2564559"
  },
  {
    "text": "might be considered internal implementation detail of your web app and you might not want to do this but you have the",
    "start": "2564559",
    "end": "2569680"
  },
  {
    "text": "option now another thing I want to double click a bit on is um",
    "start": "2569680",
    "end": "2577280"
  },
  {
    "text": "working with markup so in this particular case we have the alert component and it's a boostrap component",
    "start": "2577280",
    "end": "2583280"
  },
  {
    "text": "boostrap has CSS and CSS expects us to produce markup that looks in a specific",
    "start": "2583280",
    "end": "2588800"
  },
  {
    "text": "way right so normally I would say well it's a bit it's not not good idea to go",
    "start": "2588800",
    "end": "2595520"
  },
  {
    "text": "and assert against a specific HTML markup because it might be considered implementation detail but we've uh we've",
    "start": "2595520",
    "end": "2603880"
  },
  {
    "text": "gone to the bootstrap website and it's told us that hey you need to to have markup that looks like this otherwise our CSS will not work right so we want",
    "start": "2603880",
    "end": "2610680"
  },
  {
    "text": "to make sure that if we go and refactor our alert component that our the the Boost CSS will still work correctly and",
    "start": "2610680",
    "end": "2617160"
  },
  {
    "text": "the alert component will still look correct so this is where semantic comparison come in so the problem is",
    "start": "2617160",
    "end": "2624079"
  },
  {
    "text": "that if you just do a normal assert equals with two strings well there's",
    "start": "2624079",
    "end": "2629319"
  },
  {
    "text": "many things that can change about an HL snippet that will not make it well in",
    "start": "2629319",
    "end": "2634520"
  },
  {
    "text": "this particular case it won't break the bootstrap us but it will also not change the way that the loer component looks to",
    "start": "2634520",
    "end": "2640800"
  },
  {
    "text": "the end user in the browser so there's many things we can change about that uh that doesn't really break it and we",
    "start": "2640800",
    "end": "2646319"
  },
  {
    "text": "don't want our test to break if we change the markup in a way that shouldn't really affect the usefulness",
    "start": "2646319",
    "end": "2652440"
  },
  {
    "text": "of the component so markup matches is B units hook into the oops it's problem",
    "start": "2652440",
    "end": "2661240"
  },
  {
    "text": "with the sliding Mouse it goes down to the corner it it's bits hook into the angle sharp dipping library that I",
    "start": "2661240",
    "end": "2666559"
  },
  {
    "text": "created as to been able to do this and angle sh diving is also used in the snapshot testing we saw before that that",
    "start": "2666559",
    "end": "2672559"
  },
  {
    "text": "playright is using for cap comparing markup so so how does it actually work",
    "start": "2672559",
    "end": "2677800"
  },
  {
    "text": "so let's look at an example here if you go back to the alert component just to make it a bit explicit",
    "start": "2677800",
    "end": "2683680"
  },
  {
    "text": "so this is the markup we created well maybe we want to refactor this bit there's too much white space here right",
    "start": "2683680",
    "end": "2688839"
  },
  {
    "text": "or maybe we have a rule saying that hey all roles role attributes should be uh",
    "start": "2688839",
    "end": "2694359"
  },
  {
    "text": "the first attribute on our elements in in our code or maybe we want to sort of reformat it like this right this",
    "start": "2694359",
    "end": "2700480"
  },
  {
    "text": "component will still result in the markup it still give us the same result",
    "start": "2700480",
    "end": "2705880"
  },
  {
    "text": "to the end user right so our test should not fail and with markup matches and we can run the tests again you will see",
    "start": "2705880",
    "end": "2712880"
  },
  {
    "text": "that it still works because it's semantically the same even though it's string wise comparison wise completely",
    "start": "2712880",
    "end": "2719079"
  },
  {
    "text": "different um and and the comparison we have e you know the semantic comparison",
    "start": "2719079",
    "end": "2724880"
  },
  {
    "text": "works also by it understands also that for example order of CSS class and in the class attribute doesn't matter so",
    "start": "2724880",
    "end": "2730520"
  },
  {
    "text": "there's a whole bunch of advantages uh or knowledge built into the semantic compar that that that enables us to to",
    "start": "2730520",
    "end": "2736640"
  },
  {
    "text": "do this kind of testing in a way that doesn't make our test break all the time when we changing things or just hitting",
    "start": "2736640",
    "end": "2743000"
  },
  {
    "text": "control uh shift F in our browser so uh and if we can take it one step",
    "start": "2743000",
    "end": "2751200"
  },
  {
    "text": "further if you want for example to capture all different combinations of inputs to uh to to your alert component",
    "start": "2751200",
    "end": "2758160"
  },
  {
    "text": "this particular case we can use uh data driven testing so here I have different kinds of input to my alert component and",
    "start": "2758160",
    "end": "2764440"
  },
  {
    "text": "I pass them in here uh obviously this is sort of like inline snapshot but we can",
    "start": "2764440",
    "end": "2769920"
  },
  {
    "text": "also just pass our component on test to verify with uh the parameters that we used and it will then do the same",
    "start": "2769920",
    "end": "2776400"
  },
  {
    "text": "snapshotting with uh semantic comparison and it will just spit out a whole bunch of snapshots as you can see here of each",
    "start": "2776400",
    "end": "2783200"
  },
  {
    "text": "of the types of input so then that that gives you very uh strong uh protection against regression",
    "start": "2783200",
    "end": "2790800"
  },
  {
    "text": "in your code U if you're building a component library and you want to not break your customers when you release a new version now let me just double check",
    "start": "2790800",
    "end": "2798480"
  },
  {
    "text": "I haven't missed anything about this uh no back to",
    "start": "2798480",
    "end": "2806440"
  },
  {
    "text": "slides there we go okay so again quick tour through",
    "start": "2809760",
    "end": "2817359"
  },
  {
    "text": "uh component testing um so now let's double click a bit on what it actually",
    "start": "2817359",
    "end": "2823599"
  },
  {
    "text": "means to write valuable test and because there's no Silver Bullet like we can't",
    "start": "2823599",
    "end": "2829000"
  },
  {
    "text": "use bit for everything or we can't use playrite for anything uh or in general testing from for that matter you you",
    "start": "2829000",
    "end": "2835000"
  },
  {
    "text": "probably want to have multiple Tools in your tool bit to be able to get the most bank for your buck so when you creating",
    "start": "2835000",
    "end": "2840880"
  },
  {
    "text": "test you are you are producing code and code has uh well you have to say that",
    "start": "2840880",
    "end": "2847440"
  },
  {
    "text": "right so so it it's you want to be deliberate about picking the right methodology now for me when I sort of",
    "start": "2847440",
    "end": "2854000"
  },
  {
    "text": "look not for Blazer testing in not just Blazer testing but in general when I look at what kind of approach I want to",
    "start": "2854000",
    "end": "2860880"
  },
  {
    "text": "have to testing a specific solution specific thing we're building I I sort of lean on these four pillars properties",
    "start": "2860880",
    "end": "2868000"
  },
  {
    "text": "for Val for what I consider valuable test and and the first thing is is protection against regression so I I",
    "start": "2868000",
    "end": "2873800"
  },
  {
    "text": "want my test to give me protection against regression and and the way you so the more protection against",
    "start": "2873800",
    "end": "2879160"
  },
  {
    "text": "regression you get is is a is very much dependent on how much of your application you're testing as a whole",
    "start": "2879160",
    "end": "2884480"
  },
  {
    "text": "right so if you're testing all the way to the back end including the database all your external libraries all the",
    "start": "2884480",
    "end": "2889640"
  },
  {
    "text": "dependencies you have uh you are protecting against quite a big scope of",
    "start": "2889640",
    "end": "2895599"
  },
  {
    "text": "things that might go wrong obviously you want to focus on the critical code that is again very specific to your use case",
    "start": "2895599",
    "end": "2902640"
  },
  {
    "text": "scenario uh but you might also be valuable to includes uh third party libraries which",
    "start": "2902640",
    "end": "2910200"
  },
  {
    "text": "happens implicitly in some cases might also be valuable to include external dependencies or or just out of process",
    "start": "2910200",
    "end": "2916160"
  },
  {
    "text": "dependencies like databases especially if the databas is the implementation details specific to your solution so the",
    "start": "2916160",
    "end": "2923160"
  },
  {
    "text": "downside comes sort of the opposite of the uh is maintainability the more",
    "start": "2923160",
    "end": "2929200"
  },
  {
    "text": "complex your test setup is the more dependencies you include in your test the the harder it's going to be to",
    "start": "2929200",
    "end": "2935040"
  },
  {
    "text": "maintain that test it's going to require work up front to actually uh get up and running and over time you add remove",
    "start": "2935040",
    "end": "2942200"
  },
  {
    "text": "dependencies you connect to new endpoints other things it it's you will need to update your test as well to",
    "start": "2942200",
    "end": "2947880"
  },
  {
    "text": "support that if you're doing Inn testing versus specific isolated unit testing uh",
    "start": "2947880",
    "end": "2953280"
  },
  {
    "text": "so if you want your test to be easy to change easy to understand that that that might go",
    "start": "2953280",
    "end": "2960240"
  },
  {
    "text": "against a wide protection against regressions um another thing we want we",
    "start": "2960240",
    "end": "2966200"
  },
  {
    "text": "want our test we to be resistant to refactoring so a refactoring of our production code means that we're changing an implementation detail",
    "start": "2966200",
    "end": "2972440"
  },
  {
    "text": "something that isn't changing the behavior but we you know extract method uh make the code cleaner prettier easier",
    "start": "2972440",
    "end": "2980280"
  },
  {
    "text": "to work with that that all of that should ideally result in you not having to change your test code it might not",
    "start": "2980280",
    "end": "2986760"
  },
  {
    "text": "always be that way but in general if you can avoid if you can if you have a have a approach to test to writing tests or",
    "start": "2986760",
    "end": "2994079"
  },
  {
    "text": "you have a library that enables you to write test in a way where you don't need to include implementation details in your test then you're much more likely",
    "start": "2994079",
    "end": "3000640"
  },
  {
    "text": "to get to that point the whole key is focus on externally observable behavior",
    "start": "3000640",
    "end": "3005760"
  },
  {
    "text": "in your test versus internals it can be super hard to avoid having any implementation details in your test but",
    "start": "3005760",
    "end": "3013680"
  },
  {
    "text": "it's sort of that is the thing you want to aim for and I think the fourth pillar is",
    "start": "3013680",
    "end": "3020119"
  },
  {
    "text": "fast feedback right so when is it that we extract value out of our test it's when we run them right and if we ble to",
    "start": "3020119",
    "end": "3027000"
  },
  {
    "text": "run them and run all of our test very fast uh you're likely to to run them more often uh and so if you take the",
    "start": "3027000",
    "end": "3035319"
  },
  {
    "text": "advice from from from Martin Fowler he says that you want to make as small changes as possible is take small steps",
    "start": "3035319",
    "end": "3041799"
  },
  {
    "text": "run your test then make small changes again and run your test um if you have test weite that takes a long time to run",
    "start": "3041799",
    "end": "3048200"
  },
  {
    "text": "or or breaks half the time um you will not you're not going to be running with",
    "start": "3048200",
    "end": "3053640"
  },
  {
    "text": "it all the time so you going to make a bunch of changes to your code Maybe 1 hour two hour into refact transation and you run all your tests and half of them",
    "start": "3053640",
    "end": "3060160"
  },
  {
    "text": "break and now you have the only recour you have is to open up the debugger and try to figure out why are the test",
    "start": "3060160",
    "end": "3066520"
  },
  {
    "text": "breaking if your dead can have a very tight Loop where you make a small change you run all your test and if it some",
    "start": "3066520",
    "end": "3073200"
  },
  {
    "text": "test break well you've only you know probably where the problem is because",
    "start": "3073200",
    "end": "3078599"
  },
  {
    "text": "you only changed a few lines of code in your production code right so that's super that's really a lot of value in",
    "start": "3078599",
    "end": "3084839"
  },
  {
    "text": "having very fast test feedback so that's also very important to me when I'm sort of balancing whether or not uh to choose",
    "start": "3084839",
    "end": "3092960"
  },
  {
    "text": "one technology versus another now there's uh again no Silver Bullet",
    "start": "3092960",
    "end": "3099880"
  },
  {
    "text": "because all of these four pillars are sort of In conflict with each other to some extent or another but let's try and",
    "start": "3099880",
    "end": "3105880"
  },
  {
    "text": "sort of create a scorecard for the two different approaches we saw and hopefully the that will give you an idea of what to pick and we'll also discuss",
    "start": "3105880",
    "end": "3112200"
  },
  {
    "text": "that so in terms of uh protection against regressions what are we thinking here on a well I",
    "start": "3112200",
    "end": "3119599"
  },
  {
    "text": "guess I should have used the red green and um yellow uh stickers but it's it's",
    "start": "3119599",
    "end": "3124760"
  },
  {
    "text": "going to be low medium high in terms of protection against regs uh anybody want to guess where our browser Dem test",
    "start": "3124760",
    "end": "3132720"
  },
  {
    "text": "lands on that so I want to say medium high right",
    "start": "3132720",
    "end": "3140160"
  },
  {
    "text": "it's up to us still like if we we can just run the web app and we can go if you use web application facts we can go",
    "start": "3140160",
    "end": "3146359"
  },
  {
    "text": "and remove all the petencies more or less so it's only the produced mark up that gives us less but we have potential",
    "start": "3146359",
    "end": "3152240"
  },
  {
    "text": "to to go completely end to end with with Play Ride which has quite a bit of value",
    "start": "3152240",
    "end": "3158280"
  },
  {
    "text": "component testing I'm going to say low to medium again you can there's nothing",
    "start": "3158280",
    "end": "3163640"
  },
  {
    "text": "preventing you from injecting all the services that call the real apis when you're testing component you probably",
    "start": "3163640",
    "end": "3169000"
  },
  {
    "text": "not want to do that right uh that's a different scenario so refracturing protection",
    "start": "3169000",
    "end": "3175079"
  },
  {
    "text": "against uh refactoring production code again playright it it forces you into to",
    "start": "3175079",
    "end": "3181319"
  },
  {
    "text": "a pattern where you can only look at the what is externally observable and by",
    "start": "3181319",
    "end": "3186640"
  },
  {
    "text": "interacting with the component using AR attributes and other things so it's likely going to be high with that caveat",
    "start": "3186640",
    "end": "3194079"
  },
  {
    "text": "though that when you add new things or if you change things where that is not a refraction well you're going to have",
    "start": "3194079",
    "end": "3201079"
  },
  {
    "text": "challenges we will get to that in the maintainability here that will also be high because you're isolating and",
    "start": "3201079",
    "end": "3206200"
  },
  {
    "text": "testing things in isolation and you can sort of set that up in a way so if again",
    "start": "3206200",
    "end": "3211799"
  },
  {
    "text": "following the same practices we've seen uh in bit as well you get the same",
    "start": "3211799",
    "end": "3217559"
  },
  {
    "text": "leverage the same ability to just quer for specific public facing things obviously it depends on the scenario but",
    "start": "3217559",
    "end": "3223880"
  },
  {
    "text": "you still have that ability feedback well I'm going to give it a low for browser based testing because it does",
    "start": "3223880",
    "end": "3230079"
  },
  {
    "text": "take longer to run I'm not saying playright is slow it it's comparatively fast to it's predecessor",
    "start": "3230079",
    "end": "3237240"
  },
  {
    "text": "but a playright test will run maybe in seconds sometimes you can get down to",
    "start": "3237240",
    "end": "3242760"
  },
  {
    "text": "half a second milliseconds even uh but on average it's maybe a second or so obviously it takes a bit of time to spin",
    "start": "3242760",
    "end": "3248640"
  },
  {
    "text": "up everything but it gets going it's pretty fast if you have animations on the page if you have like a slider that comes out it takes half a second to",
    "start": "3248640",
    "end": "3254480"
  },
  {
    "text": "animate that well playright has to wait half a second for that to animate finish before it can start clicking buttons in",
    "start": "3254480",
    "end": "3259559"
  },
  {
    "text": "it so typically they're a bit slower uh bit is comparatively very fast right it",
    "start": "3259559",
    "end": "3265280"
  },
  {
    "text": "it's uh it's like a unit test right so individual test will take milliseconds to run uh maintainability and that's",
    "start": "3265280",
    "end": "3272799"
  },
  {
    "text": "sort of and this is not necessarily A critique of of playright or it's more in",
    "start": "3272799",
    "end": "3278920"
  },
  {
    "text": "general for in testing it's you have more moving Parts you have more things to maintain so if you change",
    "start": "3278920",
    "end": "3285680"
  },
  {
    "text": "functionality you probably have a lot more places you need to go and update you can compensate a lot for that uh by",
    "start": "3285680",
    "end": "3291599"
  },
  {
    "text": "having reusable methods and other things in our code but at the end of the day it it's You' got to have more code which",
    "start": "3291599",
    "end": "3296680"
  },
  {
    "text": "means more maintainability and and bit will probably have a high there um again",
    "start": "3296680",
    "end": "3302000"
  },
  {
    "text": "depending on it's up to you but you can definitely it's easier to get to that point I would say now to answer the",
    "start": "3302000",
    "end": "3308760"
  },
  {
    "text": "question what should I pick then um oh anybody disagree with this assessment sort of on average I'm not",
    "start": "3308760",
    "end": "3316680"
  },
  {
    "text": "saying I have all the right answers here but okay I don't see any uh protests so",
    "start": "3316680",
    "end": "3322160"
  },
  {
    "text": "let let's continue so let's look at different scenarios what should I pick so if I'm building a like a form throw",
    "start": "3322160",
    "end": "3328079"
  },
  {
    "text": "data right uh Classic Apps that many of us probably buil we have some sort of",
    "start": "3328079",
    "end": "3333160"
  },
  {
    "text": "internal business application I would probably go with in to end testing or browser based testing",
    "start": "3333160",
    "end": "3340240"
  },
  {
    "text": "because you're not likely to have a lot of reusable components in your code and",
    "start": "3340240",
    "end": "3345720"
  },
  {
    "text": "it's relatively easy to get going with playright so if you are able to actually go into that scenario where you can spin",
    "start": "3345720",
    "end": "3351799"
  },
  {
    "text": "up your application easily using maybe Aspire uh then probably go with and you will have a good protection against",
    "start": "3351799",
    "end": "3358440"
  },
  {
    "text": "regression you will have good value out of out of your test and you probably won't have that many tests so it",
    "start": "3358440",
    "end": "3363680"
  },
  {
    "text": "maintainability is not really an issue if you have more complex apps or if you",
    "start": "3363680",
    "end": "3368720"
  },
  {
    "text": "use maybe there's a good good amount of reusability in there maybe you like a large app will typically have dedicated",
    "start": "3368720",
    "end": "3375760"
  },
  {
    "text": "components that are uh that you use in multiple different pages for example then I would probably just have a mix of",
    "start": "3375760",
    "end": "3381559"
  },
  {
    "text": "both right uh especially if you have complex components that you're reusing across different pages",
    "start": "3381559",
    "end": "3387039"
  },
  {
    "text": "uh so that that would be good to Sol use both uh and and and do that if you're just building component Library there's",
    "start": "3387039",
    "end": "3394839"
  },
  {
    "text": "definitely you know our friends ter outside they have a Blazer component Li",
    "start": "3394839",
    "end": "3399880"
  },
  {
    "text": "lots of other teams have component Li they're using B quite heavily because that allow them to test their components",
    "start": "3399880",
    "end": "3405079"
  },
  {
    "text": "in isolation and that is their public surface right the individual components what's what's being used by the enduser",
    "start": "3405079",
    "end": "3411200"
  },
  {
    "text": "so they don't think about their full Suite of components uh so so there you would probably Le on that but if you",
    "start": "3411200",
    "end": "3418559"
  },
  {
    "text": "have a lot of javascripts that's sort of the caveat there because bit doesn't run CSS doesn't run JavaScript so and I",
    "start": "3418559",
    "end": "3425480"
  },
  {
    "text": "think the the my my my go-to example is the actually the Blazer team for the Blazer server project they have a whole",
    "start": "3425480",
    "end": "3431839"
  },
  {
    "text": "bunch of comp javascripts that that sort of sits on one side in the browser and we Rees updates from the back end so",
    "start": "3431839",
    "end": "3438000"
  },
  {
    "text": "they use last I check they actually use selenium but they might have upgraded to play ride but they because they need the",
    "start": "3438000",
    "end": "3444400"
  },
  {
    "text": "point of that test is to test that they ation between the C code and the the front end code works very well so they",
    "start": "3444400",
    "end": "3450280"
  },
  {
    "text": "have a lot of complexity they want to test end to end but in many cases you can actually get very far uh with just",
    "start": "3450280",
    "end": "3457319"
  },
  {
    "text": "using B units if that's your scenario okay I think I have two three",
    "start": "3457319",
    "end": "3464359"
  },
  {
    "text": "minutes left so uh if there's any questions Now's the Time otherwise come and find me after",
    "start": "3464359",
    "end": "3469920"
  },
  {
    "text": "the demo uh codes is all up here and as uh you can see the last commit was 2",
    "start": "3469920",
    "end": "3476319"
  },
  {
    "text": "hours ago so it's very fresh and it works and there's also a pipeline yaml file so you can see how to actually run",
    "start": "3476319",
    "end": "3482160"
  },
  {
    "text": "playright test and and do the snapshot things and uploading those and and getting that uh as well and you can find",
    "start": "3482160",
    "end": "3488760"
  },
  {
    "text": "me here at the conference or find me on on the socials if you have any questions I want to connect afterwards okay that's",
    "start": "3488760",
    "end": "3496520"
  },
  {
    "text": "it any questions okay you are dismissed oh",
    "start": "3501559",
    "end": "3508359"
  },
  {
    "text": "remember to like And subscribe on the way out right I think that's what you're supposed to say",
    "start": "3508359",
    "end": "3515160"
  }
]