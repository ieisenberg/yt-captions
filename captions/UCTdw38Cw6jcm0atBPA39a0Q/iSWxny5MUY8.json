[
  {
    "start": "0",
    "end": "142000"
  },
  {
    "text": "hi everyone all right my uh screenshot uh hi everyone as mentioned before i'm",
    "start": "10480",
    "end": "15759"
  },
  {
    "text": "going to talk about some of the common mistakes that i have found in ef core uh lots of pain that i have gone through",
    "start": "15759",
    "end": "23039"
  },
  {
    "text": "it uh looking at underscored and trying to figure out why is it slow and",
    "start": "23039",
    "end": "28640"
  },
  {
    "text": "kind of also address one of the issues that some people may have regarding ef core",
    "start": "28640",
    "end": "35920"
  },
  {
    "text": "saying uh it's slow we shouldn't use that um in fact a lot of issues",
    "start": "35920",
    "end": "42320"
  },
  {
    "text": "that i have found is basically just misunderstanding of how ef core works",
    "start": "42320",
    "end": "48960"
  },
  {
    "text": "and with some of the tweaks sometimes i got even up to 100 times uh performance",
    "start": "48960",
    "end": "55920"
  },
  {
    "text": "improvement just to add a few things so hopefully what we're going to see is",
    "start": "55920",
    "end": "62480"
  },
  {
    "text": "uh some of the issues that you might have in your project you can then fix them up a little bit and bang you'll",
    "start": "62480",
    "end": "68880"
  },
  {
    "text": "get a lot of performance uh back uh also better memory and in the end what is",
    "start": "68880",
    "end": "76159"
  },
  {
    "text": "even more important better stability to your application uh because the",
    "start": "76159",
    "end": "81360"
  },
  {
    "text": "application no longer needs to work as hard as it did before all right so a quick introduction uh",
    "start": "81360",
    "end": "89360"
  },
  {
    "text": "for myself i mean in a kafka you can just call me jk uh i'm solution",
    "start": "89360",
    "end": "94560"
  },
  {
    "text": "architect at ssw an ai microsoft mvp you can follow me on all of these uh",
    "start": "94560",
    "end": "102000"
  },
  {
    "text": "socials um i'm also organizing a couple of a",
    "start": "102000",
    "end": "107439"
  },
  {
    "text": "couple of meetups like apec ai global ai podcast the full snake brisbane user",
    "start": "107439",
    "end": "114640"
  },
  {
    "text": "group and predominantly i'm a.net core and ef core developer",
    "start": "114640",
    "end": "120320"
  },
  {
    "text": "i'm also doubling in the ai but this is my main uh main thing that i do every day and",
    "start": "120320",
    "end": "128399"
  },
  {
    "text": "i really like to perfect my art and this is why i have focused quite a bit to",
    "start": "128399",
    "end": "135840"
  },
  {
    "text": "figure out what are the actual best practices for ef core",
    "start": "135840",
    "end": "142400"
  },
  {
    "start": "142000",
    "end": "330000"
  },
  {
    "text": "now um why i like to use ef core uh is",
    "start": "142400",
    "end": "148959"
  },
  {
    "text": "one of the big reasons for it is basically you get a nice balance between features you get a",
    "start": "148959",
    "end": "156400"
  },
  {
    "text": "good flexibility as well as performance anyone who looked at how ef core have",
    "start": "156400",
    "end": "163200"
  },
  {
    "text": "developed since the start of 1.0 all the way to ef core",
    "start": "163200",
    "end": "169280"
  },
  {
    "text": "six they can tell you it's not just if we're getting a lot of features with every single release every single",
    "start": "169280",
    "end": "176239"
  },
  {
    "text": "release brings us also a lot of performance improvements which ironically means that some of my slides",
    "start": "176239",
    "end": "184879"
  },
  {
    "text": "might actually no longer be relevant in say ef core seven maybe microsoft will",
    "start": "184879",
    "end": "191200"
  },
  {
    "text": "say okay too many people have issues with that one maybe we can solve the",
    "start": "191200",
    "end": "196480"
  },
  {
    "text": "problem for them so that's one really cool thing about ef core on top of it",
    "start": "196480",
    "end": "202400"
  },
  {
    "text": "you can switch between different databases and in my opinion um it's",
    "start": "202400",
    "end": "208799"
  },
  {
    "text": "really really good for relational databases not just because you have joins and",
    "start": "208799",
    "end": "215120"
  },
  {
    "text": "they're pretty performant you can also switch between different database engines so you're not stuck",
    "start": "215120",
    "end": "222799"
  },
  {
    "text": "with just one engine oh and we can't forget about migrations",
    "start": "222799",
    "end": "229920"
  },
  {
    "text": "database scan folding and there's a lot of tooling around ef core which is why i",
    "start": "229920",
    "end": "236799"
  },
  {
    "text": "really love ef core and if you have any issues and you're",
    "start": "236799",
    "end": "242000"
  },
  {
    "text": "thinking about hey we might need to switch to something else because of performance issues or something like",
    "start": "242000",
    "end": "248000"
  },
  {
    "text": "that hopefully this is going to help you stay on track all right so one of the motivations of",
    "start": "248000",
    "end": "255680"
  },
  {
    "text": "why i wanted to build this is basically a lot of issues that uh people",
    "start": "255680",
    "end": "261600"
  },
  {
    "text": "complained about that i have seen saying hey this is running slow uh was uh were",
    "start": "261600",
    "end": "267840"
  },
  {
    "text": "very easily fixed uh another thing that i also found is",
    "start": "267840",
    "end": "272880"
  },
  {
    "text": "that when i fixed those issues the code actually looked much more simpler much",
    "start": "272880",
    "end": "278240"
  },
  {
    "text": "more straightforward and people could read it more easily which was ironic",
    "start": "278240",
    "end": "283360"
  },
  {
    "text": "because we actually make it more performant yet it's more maintainable",
    "start": "283360",
    "end": "289199"
  },
  {
    "text": "and more readable than the original code so sometimes",
    "start": "289199",
    "end": "294960"
  },
  {
    "text": "optimizing a code isn't a bad thing",
    "start": "294960",
    "end": "299840"
  },
  {
    "text": "and uh sharing the best practices um and those back practices are going to be",
    "start": "300000",
    "end": "305840"
  },
  {
    "text": "backed by uh benchmarks and tests so you can actually not just see the numbers uh",
    "start": "305840",
    "end": "312479"
  },
  {
    "text": "most of them you'll be able to just pull my github and try to replicate uh that",
    "start": "312479",
    "end": "318080"
  },
  {
    "text": "for for yourself and lastly i had some scars regarding ef core and",
    "start": "318080",
    "end": "325120"
  },
  {
    "text": "what i've seen and i hope that i'll never need to see them again",
    "start": "325120",
    "end": "330320"
  },
  {
    "start": "330000",
    "end": "536000"
  },
  {
    "text": "all right so test methodology for this was i used at the beginning a batch um",
    "start": "330320",
    "end": "335680"
  },
  {
    "text": "benchmark tool called benchmark.net mostly for consumption",
    "start": "335680",
    "end": "341919"
  },
  {
    "text": "memory consumption especially at the beginning of those more horrendous",
    "start": "341919",
    "end": "347759"
  },
  {
    "text": "queries to just show you that yes actually it has a huge impact especially when your database starts to",
    "start": "347759",
    "end": "354400"
  },
  {
    "text": "grow um then most of the tests are going to go onwards with bombandi which is kind of",
    "start": "354400",
    "end": "361759"
  },
  {
    "text": "like a simple load testing tool you can say i have five active connections and",
    "start": "361759",
    "end": "367680"
  },
  {
    "text": "for 60 minutes try to make as many requests as possible so we have a little",
    "start": "367680",
    "end": "373199"
  },
  {
    "text": "bit more um real performance information we don't",
    "start": "373199",
    "end": "378560"
  },
  {
    "text": "just get one hit and then see how uh the database and our application behaves we",
    "start": "378560",
    "end": "385360"
  },
  {
    "text": "actually are hitting uh the service a little bit for a minute to see",
    "start": "385360",
    "end": "392000"
  },
  {
    "text": "whether the performance gets worse over time or we have a stable",
    "start": "392000",
    "end": "398160"
  },
  {
    "text": "performance then i also use postman",
    "start": "398160",
    "end": "403440"
  },
  {
    "text": "for that and doing one hit queries and also most of the examples",
    "start": "403440",
    "end": "410240"
  },
  {
    "text": "that they do return back uh the actual sql statement that was executed so that",
    "start": "410240",
    "end": "417039"
  },
  {
    "text": "we can compare uh what is actually executed on sql server for each of the cases",
    "start": "417039",
    "end": "424800"
  },
  {
    "text": "and all of these samples are in dotnet 5 and ef core 5",
    "start": "424800",
    "end": "430080"
  },
  {
    "text": "because i started this demo about three months ago four months ago and i",
    "start": "430080",
    "end": "437039"
  },
  {
    "text": "really wanted to um show one of my clients hey this this",
    "start": "437039",
    "end": "442240"
  },
  {
    "text": "are the the issues that we're having and here are the better examples of how to",
    "start": "442240",
    "end": "447520"
  },
  {
    "text": "do it all right and also this is my machine",
    "start": "447520",
    "end": "453120"
  },
  {
    "text": "in case you're interested what is the performance metric for my uh what what",
    "start": "453120",
    "end": "459360"
  },
  {
    "text": "hardware am i using to do all of this performance test the sql server is on my",
    "start": "459360",
    "end": "465280"
  },
  {
    "text": "machine as well as the application so that might not be the best perfect",
    "start": "465280",
    "end": "471199"
  },
  {
    "text": "testing machine for for doing that but i think what i have tested in production it's a",
    "start": "471199",
    "end": "478720"
  },
  {
    "text": "good enough indication to tell you which code is better than the other",
    "start": "478720",
    "end": "484240"
  },
  {
    "text": "all right so for the test data i have downloaded from this link and this test data has some simple",
    "start": "484240",
    "end": "491120"
  },
  {
    "text": "tables like customers employees products and sales the most important one is the",
    "start": "491120",
    "end": "496879"
  },
  {
    "text": "sales which have 7 million cells in it just to drive home",
    "start": "496879",
    "end": "502639"
  },
  {
    "text": "what can happen when you write a math code and then the database starts to increase",
    "start": "502639",
    "end": "510240"
  },
  {
    "text": "in size then all of the sudden something that was okay in performance when you",
    "start": "510240",
    "end": "516240"
  },
  {
    "text": "develop the application when you push it to production a few months later",
    "start": "516240",
    "end": "522000"
  },
  {
    "text": "suddenly the the entire website doesn't work anymore and i'll show a few uh",
    "start": "522000",
    "end": "527920"
  },
  {
    "text": "pitfalls that i actually found in actual production that caused the",
    "start": "527920",
    "end": "533200"
  },
  {
    "text": "entire website no longer working all right so",
    "start": "533200",
    "end": "538240"
  },
  {
    "start": "536000",
    "end": "620000"
  },
  {
    "text": "one of the common mistakes that we'll uh look at uh today is going to be going from i credible to innumerable i'll show",
    "start": "538240",
    "end": "546480"
  },
  {
    "text": "you some of the pitfalls uh when you do this kind of casting",
    "start": "546480",
    "end": "551839"
  },
  {
    "text": "uh then not using s not tracking uh you might note that ef core",
    "start": "551839",
    "end": "557680"
  },
  {
    "text": "when you get data from the database they're trapped and with snow tracking",
    "start": "557680",
    "end": "563040"
  },
  {
    "text": "uh you can make them not not tracked and we'll see the impact uh of that",
    "start": "563040",
    "end": "570320"
  },
  {
    "text": "then getting all data when it's not needed sounds obvious but in a lot of cases",
    "start": "570320",
    "end": "578480"
  },
  {
    "text": "uh obvious doesn't seem to be enough um explicit joins uh there are sometimes",
    "start": "578480",
    "end": "585120"
  },
  {
    "text": "really good uh when you do the queries you do not include included additional",
    "start": "585120",
    "end": "590480"
  },
  {
    "text": "tables but they can backfire and i can show you how you can avoid those issues",
    "start": "590480",
    "end": "597680"
  },
  {
    "text": "then we're going to have pagination that is also very common issue that they have",
    "start": "597680",
    "end": "602880"
  },
  {
    "text": "found with pagination just when implemented correctly",
    "start": "602880",
    "end": "607920"
  },
  {
    "text": "uh and lastly over complex queries are going to sprinkle a lot of wisdom all",
    "start": "607920",
    "end": "614160"
  },
  {
    "text": "around the session but these are the main points that we're going to go through",
    "start": "614160",
    "end": "621200"
  },
  {
    "start": "620000",
    "end": "658000"
  },
  {
    "text": "and you know when when i first started doing ef core and",
    "start": "621519",
    "end": "626959"
  },
  {
    "text": "when people say look you can quickly screw up with um quarries i was thinking",
    "start": "626959",
    "end": "634000"
  },
  {
    "text": "how bad can it be and for years that kind of was in my back of my mind",
    "start": "634000",
    "end": "640160"
  },
  {
    "text": "but in the last two three years i really started to look into okay how bad can it",
    "start": "640160",
    "end": "646079"
  },
  {
    "text": "be in let me just say that sometimes some questions",
    "start": "646079",
    "end": "651760"
  },
  {
    "text": "shouldn't have an answer and you know this might be one of those",
    "start": "651760",
    "end": "658800"
  },
  {
    "start": "658000",
    "end": "848000"
  },
  {
    "text": "and let's start with something very innocent counting",
    "start": "658800",
    "end": "665600"
  },
  {
    "text": "you would say well yeah we have here an example that is obviously horrible right",
    "start": "665600",
    "end": "673279"
  },
  {
    "text": "we have naive count we have here the table sales",
    "start": "673279",
    "end": "678399"
  },
  {
    "text": "then we do two list and then count i have seen this in production",
    "start": "678399",
    "end": "684720"
  },
  {
    "text": "but you know it's an easy fix you just remove two listings done right",
    "start": "684720",
    "end": "689760"
  },
  {
    "text": "but there is one less obvious one so here",
    "start": "689760",
    "end": "695120"
  },
  {
    "text": "we have an again sales table but we say i save it under a variable",
    "start": "695120",
    "end": "702000"
  },
  {
    "text": "which is i innumerable and then we can't now",
    "start": "702000",
    "end": "707279"
  },
  {
    "text": "conventional wisdom considering how c works would be that",
    "start": "707279",
    "end": "713680"
  },
  {
    "text": "they should be fine right like it's innumerable so when you did.com",
    "start": "713680",
    "end": "719200"
  },
  {
    "text": "obviously it's going to execute on the database right",
    "start": "719200",
    "end": "724320"
  },
  {
    "text": "well they're kinda the same thing so when you run this as an innumerable",
    "start": "724320",
    "end": "731920"
  },
  {
    "text": "you are getting all of the data from the database so this is one thing that was pretty",
    "start": "731920",
    "end": "739519"
  },
  {
    "text": "interesting uh to find out um so yeah when you cast uh to",
    "start": "739519",
    "end": "746639"
  },
  {
    "text": "enumerable from that point onward everything is in memory",
    "start": "746639",
    "end": "752560"
  },
  {
    "text": "and there's also the problem of knee if where or anything that actually has a method",
    "start": "752560",
    "end": "760720"
  },
  {
    "text": "like this over here where you return you're basically returning a table but a",
    "start": "760720",
    "end": "767519"
  },
  {
    "text": "table is not i variable is i innumerable",
    "start": "767519",
    "end": "772720"
  },
  {
    "text": "uh and now you can start to think about wait we have used repository patterns",
    "start": "772720",
    "end": "778480"
  },
  {
    "text": "and they are returning i innumerable and then you start to think oh",
    "start": "778480",
    "end": "783839"
  },
  {
    "text": "all of the data we're trying to get from the repositories we're getting all of the data from the",
    "start": "783839",
    "end": "789120"
  },
  {
    "text": "from the database without filtering first and then we're filtering in in",
    "start": "789120",
    "end": "795680"
  },
  {
    "text": "in memory and then you're starting to realize how many places you have performance",
    "start": "795680",
    "end": "801040"
  },
  {
    "text": "issues so in what i innuenable is one of the issues that i found to be the biggest",
    "start": "801040",
    "end": "807519"
  },
  {
    "text": "performance and memory issues in most of the applications and you should avoid",
    "start": "807519",
    "end": "813120"
  },
  {
    "text": "them as much as possible if you do a repository pattern maybe consider",
    "start": "813120",
    "end": "819440"
  },
  {
    "text": "using i queryable uh for the methods that you know that they're going to be filtered on a higher level i credible is",
    "start": "819440",
    "end": "827760"
  },
  {
    "text": "not linked to ef core so if you have a different",
    "start": "827760",
    "end": "833040"
  },
  {
    "text": "different database engine you'll still be able to use i credible uh despite",
    "start": "833040",
    "end": "839519"
  },
  {
    "text": "you know making that uh giving you the ability to actually change uh what is",
    "start": "839519",
    "end": "846000"
  },
  {
    "text": "going to be current in database so what's going on so why is this a",
    "start": "846000",
    "end": "852079"
  },
  {
    "text": "problem well first we download the entire database obviously but this other",
    "start": "852079",
    "end": "857199"
  },
  {
    "text": "issues as well so because if core supports entity tracking what happens is",
    "start": "857199",
    "end": "864000"
  },
  {
    "text": "that all of these entities are being tracked and in order to make them track",
    "start": "864000",
    "end": "869279"
  },
  {
    "text": "it concerns a little bit more cpu and it consumes a bit more memory",
    "start": "869279",
    "end": "874480"
  },
  {
    "text": "uh and then once we get all of that data we're processing them in memory",
    "start": "874480",
    "end": "881440"
  },
  {
    "text": "uh we're doing the filtering we're doing selecting order by and all of that stuff we're doing on the dotnet application",
    "start": "881440",
    "end": "889199"
  },
  {
    "text": "rather than on sql server and if that's not issue enough in the",
    "start": "889199",
    "end": "894639"
  },
  {
    "text": "end of the day we also need to run all of this data through garbage collector",
    "start": "894639",
    "end": "899920"
  },
  {
    "text": "so garbage collector now has to do a lot more work than it would",
    "start": "899920",
    "end": "906079"
  },
  {
    "text": "be necessary uh if we wouldn't need to process everything in memory if",
    "start": "906079",
    "end": "913279"
  },
  {
    "text": "everything would be on sql server and just to give you a",
    "start": "913279",
    "end": "919519"
  },
  {
    "start": "915000",
    "end": "988000"
  },
  {
    "text": "feel for uh for skill so for instance if we have seven million rows and each of them have",
    "start": "919519",
    "end": "928000"
  },
  {
    "text": "five integer that on its own is already 140 megabytes",
    "start": "928000",
    "end": "934480"
  },
  {
    "text": "of data you're downloading from sql server that's already",
    "start": "934480",
    "end": "940399"
  },
  {
    "text": "a lot on its own and we're talking five integers we're not talking about taxed and other things",
    "start": "940399",
    "end": "947040"
  },
  {
    "text": "and tracking also adds about four bytes per property uh per row although i found",
    "start": "947040",
    "end": "953519"
  },
  {
    "text": "that uh that metric might not be correct i'll need to double check on it but at",
    "start": "953519",
    "end": "960399"
  },
  {
    "text": "least it seems to be four bytes per product property per row as far as",
    "start": "960399",
    "end": "966160"
  },
  {
    "text": "understand it the minimum consumption would be 218 megabytes per call and now",
    "start": "966160",
    "end": "971920"
  },
  {
    "text": "imagine you're trying to count all of the uh sales and that takes 280 megabytes",
    "start": "971920",
    "end": "979040"
  },
  {
    "text": "uh to count all of that browse and it's quite a lot",
    "start": "979040",
    "end": "984560"
  },
  {
    "text": "and also it's slow and uses a lot of cpu",
    "start": "984560",
    "end": "989120"
  },
  {
    "start": "988000",
    "end": "1022000"
  },
  {
    "text": "now this simple solution here is very simple you change from i innumerable to",
    "start": "989600",
    "end": "996240"
  },
  {
    "text": "like variable and this actually prevents the query to be executed in memory and",
    "start": "996240",
    "end": "1003839"
  },
  {
    "text": "gets executed to sql server and to go back to how bad",
    "start": "1003839",
    "end": "1010560"
  },
  {
    "text": "can this be now if you have a small database it's probably going to be a difference",
    "start": "1010560",
    "end": "1016639"
  },
  {
    "text": "in couple of milliseconds here we have seven million uh rackets",
    "start": "1016639",
    "end": "1022839"
  },
  {
    "start": "1022000",
    "end": "1146000"
  },
  {
    "text": "so yeah we can see here naive count takes just about 3.6 seconds",
    "start": "1022839",
    "end": "1030558"
  },
  {
    "text": "um and takes i think this is about two gigabytes of ram",
    "start": "1030559",
    "end": "1036079"
  },
  {
    "text": "um now this is not a perfect test especially for a location because",
    "start": "1036079",
    "end": "1041760"
  },
  {
    "text": "um what the net benchmark is doing is",
    "start": "1041760",
    "end": "1048000"
  },
  {
    "text": "is running the test multiple times and i'm trying to create and dispose ef core",
    "start": "1048000",
    "end": "1055840"
  },
  {
    "text": "and some of the memory of the previous execution may bleed into the next test",
    "start": "1055840",
    "end": "1062000"
  },
  {
    "text": "so it may not be the perfect task but you can see here that the difference between the",
    "start": "1062000",
    "end": "1069440"
  },
  {
    "text": "uh the one that we did with ike variable versus i innumerable",
    "start": "1069440",
    "end": "1074480"
  },
  {
    "text": "the difference in memory is massive it you cannot even compare this",
    "start": "1074480",
    "end": "1081280"
  },
  {
    "text": "this is like 100 000 times larger and",
    "start": "1081280",
    "end": "1087200"
  },
  {
    "text": "you know well performance is great to have faster and faster execution",
    "start": "1087200",
    "end": "1094400"
  },
  {
    "text": "uh which here you can see that it's basically 63 times faster",
    "start": "1094400",
    "end": "1100160"
  },
  {
    "text": "i think the most important metric here is that you you don't consume all of the ram on your",
    "start": "1100160",
    "end": "1107919"
  },
  {
    "text": "net application and similar thing here for um doing the",
    "start": "1107919",
    "end": "1113520"
  },
  {
    "text": "weight loss um innumerable versus iquarible uh",
    "start": "1113520",
    "end": "1118799"
  },
  {
    "text": "obviously the performance is hundred times faster as i promised you we're going to look at",
    "start": "1118799",
    "end": "1124880"
  },
  {
    "text": "things that makes hundred times faster and changing from high innumerable to high credible is one potential candidate",
    "start": "1124880",
    "end": "1131679"
  },
  {
    "text": "to increase before performance uh even in the scales 100 times",
    "start": "1131679",
    "end": "1137520"
  },
  {
    "text": "and you can see here that allocation is also a massively smaller than what we had",
    "start": "1137520",
    "end": "1144880"
  },
  {
    "text": "before and you know to just drive the point here i",
    "start": "1144880",
    "end": "1151280"
  },
  {
    "text": "used bombandia and i'll show you example how i used it um",
    "start": "1151280",
    "end": "1156400"
  },
  {
    "text": "to basically load balance this for a minute with five connection uh as much",
    "start": "1156400",
    "end": "1162480"
  },
  {
    "text": "as it could and the results that i got is that the naive count actually managed to do only",
    "start": "1162480",
    "end": "1169880"
  },
  {
    "text": "0.1 requests per second and it totaled with 10 responses for five",
    "start": "1169880",
    "end": "1178080"
  },
  {
    "text": "connections constantly pinging uh for one minute so that is actually pretty",
    "start": "1178080",
    "end": "1185200"
  },
  {
    "text": "terrible response time uh compared to that uh when we have",
    "start": "1185200",
    "end": "1190720"
  },
  {
    "text": "improved it we're just changing innumerable to arc variable you can see that all of the sudden in one minute we",
    "start": "1190720",
    "end": "1197919"
  },
  {
    "text": "got one more than thousand requests back and the request per second uh increased",
    "start": "1197919",
    "end": "1205200"
  },
  {
    "text": "almost 18 requests per second so the increase is massive",
    "start": "1205200",
    "end": "1212000"
  },
  {
    "text": "all rights so let me before i switch to this let me show you",
    "start": "1213039",
    "end": "1219280"
  },
  {
    "text": "in the code how this actually looks like so over here",
    "start": "1219280",
    "end": "1225360"
  },
  {
    "text": "i have the worst case scenario um so",
    "start": "1225360",
    "end": "1230640"
  },
  {
    "text": "over here what i have done is i used iq variable for this but i could use an",
    "start": "1230640",
    "end": "1236960"
  },
  {
    "text": "innumerable and for the result uh i used a two list done mine tag with context",
    "start": "1236960",
    "end": "1244640"
  },
  {
    "text": "for now you can remove it just to not confuse anyone",
    "start": "1244640",
    "end": "1249919"
  },
  {
    "text": "uh i did to list and then count so this is going to cause a",
    "start": "1249919",
    "end": "1256240"
  },
  {
    "text": "performance issue and here the query to uh twos query string i use this this is an",
    "start": "1256240",
    "end": "1264000"
  },
  {
    "text": "extension method to ef core where you can convert a ike variable",
    "start": "1264000",
    "end": "1270400"
  },
  {
    "text": "into the actual sql statement that it would execute",
    "start": "1270400",
    "end": "1275520"
  },
  {
    "text": "there's one caveat to this is that you cannot do against count uh",
    "start": "1275520",
    "end": "1280960"
  },
  {
    "text": "first of default um income max and couple of others where",
    "start": "1280960",
    "end": "1287840"
  },
  {
    "text": "you actually need to execute the query so this uh to query string um is not",
    "start": "1287840",
    "end": "1294960"
  },
  {
    "text": "going to you're not going to be able to do it against first of the fault and those kind of things it's basically almost",
    "start": "1294960",
    "end": "1301440"
  },
  {
    "text": "expecting it to be a list so that's one one issue with that but",
    "start": "1301440",
    "end": "1307840"
  },
  {
    "text": "you know it's good enough for our case and what i have here is the application",
    "start": "1307840",
    "end": "1313919"
  },
  {
    "text": "running i'm going to restart it just for sake of",
    "start": "1313919",
    "end": "1318960"
  },
  {
    "text": "argument and what i'm going to do is let's clean",
    "start": "1318960",
    "end": "1324400"
  },
  {
    "text": "this up just to show you what i'm doing is i'm going to",
    "start": "1324400",
    "end": "1330840"
  },
  {
    "text": "take the name of the controller which is examples",
    "start": "1330840",
    "end": "1338880"
  },
  {
    "text": "pound slash and this is west",
    "start": "1338880",
    "end": "1344799"
  },
  {
    "text": "case and i'm going to bring up my uh",
    "start": "1344799",
    "end": "1350799"
  },
  {
    "text": "task manager so here we can see that we have zero percent 300 megabytes on",
    "start": "1350799",
    "end": "1356880"
  },
  {
    "text": "windows terminal so when i run this",
    "start": "1356880",
    "end": "1362000"
  },
  {
    "text": "you will see that cpu usage jumps significantly",
    "start": "1362559",
    "end": "1368159"
  },
  {
    "text": "the ram usage jumps significantly and this is now happily processing",
    "start": "1368159",
    "end": "1374720"
  },
  {
    "text": "behind the scenes so we went for 10 more seconds",
    "start": "1374720",
    "end": "1381919"
  },
  {
    "text": "and we should get results by the way if you're interested about the bum bandit",
    "start": "1382000",
    "end": "1387600"
  },
  {
    "text": "tool let me get the browser over here",
    "start": "1387600",
    "end": "1394960"
  },
  {
    "text": "you can get it on the github page",
    "start": "1395039",
    "end": "1400559"
  },
  {
    "text": "bombandir uh from cote sandberg bombandia and it's a really good um",
    "start": "1400559",
    "end": "1410159"
  },
  {
    "text": "really do a good tool for you to benchmark things a little bit more organically",
    "start": "1410159",
    "end": "1416720"
  },
  {
    "text": "than you know hit with the postman and see what's the result",
    "start": "1416720",
    "end": "1423520"
  },
  {
    "text": "now this takes a little bit of time after it finished because it waits for",
    "start": "1423520",
    "end": "1428960"
  },
  {
    "text": "all of the requests to finish so you can see that it takes a long time to just finish off",
    "start": "1428960",
    "end": "1435200"
  },
  {
    "text": "everything oh now it went to 17 gigabytes",
    "start": "1435200",
    "end": "1442080"
  },
  {
    "text": "this is this is why you try to avoid innumerable",
    "start": "1442320",
    "end": "1447600"
  },
  {
    "text": "or too list prematurely okay this may take a while",
    "start": "1447600",
    "end": "1453919"
  },
  {
    "text": "is it because i interesting why is edge using that",
    "start": "1453919",
    "end": "1460320"
  },
  {
    "text": "much okay usually take that took a little bit",
    "start": "1460320",
    "end": "1467520"
  },
  {
    "text": "faster",
    "start": "1467520",
    "end": "1470520"
  },
  {
    "text": "anyways i'm trying to show the point and i think i got my point here um usually",
    "start": "1476240",
    "end": "1481279"
  },
  {
    "text": "it finishes much sooner than this but i'll kill this because",
    "start": "1481279",
    "end": "1488720"
  },
  {
    "text": "it takes way longer than usually does",
    "start": "1488720",
    "end": "1493360"
  },
  {
    "text": "and what i also",
    "start": "1495440",
    "end": "1499158"
  },
  {
    "text": "hmm [Music] okay bring the stamina completely frozen",
    "start": "1500960",
    "end": "1507600"
  },
  {
    "text": "that's all right i'll just kill that kiln that",
    "start": "1507600",
    "end": "1512158"
  },
  {
    "text": "all right so here we can see zero that's wrong",
    "start": "1512720",
    "end": "1519600"
  },
  {
    "text": "i have tested this right before doing uh this test um anyway so i'm going to run this and",
    "start": "1521840",
    "end": "1528640"
  },
  {
    "text": "i'm going to show you in postman over here um there's a few things that i have done",
    "start": "1528640",
    "end": "1535760"
  },
  {
    "text": "uh when we run this um when i do one request and by the way you'll be able to get this all in the",
    "start": "1535760",
    "end": "1542400"
  },
  {
    "text": "github when we run this this is going to also respond",
    "start": "1542400",
    "end": "1548000"
  },
  {
    "text": "with a specific request with a specific answer",
    "start": "1548000",
    "end": "1553679"
  },
  {
    "text": "and what i'm doing is when i'm getting a response i'm actually using postman",
    "start": "1553679",
    "end": "1560799"
  },
  {
    "text": "to show the result in a little bit more stylized way with a visualizer",
    "start": "1560799",
    "end": "1568960"
  },
  {
    "text": "so hopefully yes we finally got a response for the worst case now when i",
    "start": "1568960",
    "end": "1575840"
  },
  {
    "text": "visualize this is the query that's been executed on the sql server",
    "start": "1575840",
    "end": "1582640"
  },
  {
    "text": "now if we do the best case which basically means as we're using i variable",
    "start": "1582640",
    "end": "1588400"
  },
  {
    "text": "we can see here that the query changes so let's visualize this",
    "start": "1588400",
    "end": "1593600"
  },
  {
    "text": "so you can see that instead of doing the proper select statement we just have select count",
    "start": "1593600",
    "end": "1600799"
  },
  {
    "text": "from sales and then as as but that doesn't actually matter",
    "start": "1600799",
    "end": "1607360"
  },
  {
    "text": "so the major difference here is if we scroll down a little bit further is that",
    "start": "1607360",
    "end": "1612960"
  },
  {
    "text": "i adjust the account and that's it",
    "start": "1612960",
    "end": "1616880"
  },
  {
    "text": "all right let's go back to the slides",
    "start": "1618080",
    "end": "1623600"
  },
  {
    "start": "1623000",
    "end": "1686000"
  },
  {
    "text": "hopefully that comment here is not going to cause too much problem because i wanted to show some of the performance",
    "start": "1624080",
    "end": "1630159"
  },
  {
    "text": "uh uh issues that i haven't put into the slide but we'll see as we can get to",
    "start": "1630159",
    "end": "1636080"
  },
  {
    "text": "that now another thing that you might want to consider is as not tracking",
    "start": "1636080",
    "end": "1643039"
  },
  {
    "text": "now as no tracking what it does is it excludes tracking on the entities uh and",
    "start": "1643039",
    "end": "1650159"
  },
  {
    "text": "that results in using less memory less cpu usage and those",
    "start": "1650159",
    "end": "1656000"
  },
  {
    "text": "entities are not tracked now that means that you cannot update or delete",
    "start": "1656000",
    "end": "1663840"
  },
  {
    "text": "unless you retract them now if you track them again manually",
    "start": "1663919",
    "end": "1669120"
  },
  {
    "text": "uh all your properties might be uh marked as changed and then if you do an",
    "start": "1669120",
    "end": "1675360"
  },
  {
    "text": "update it will update everything so maybe not the best thing to do so just",
    "start": "1675360",
    "end": "1681360"
  },
  {
    "text": "use s not tracking when you want to get read only data",
    "start": "1681360",
    "end": "1686720"
  },
  {
    "start": "1686000",
    "end": "1771000"
  },
  {
    "text": "but the impact of doing that is pretty significant",
    "start": "1687279",
    "end": "1692320"
  },
  {
    "text": "now i don't usually see this much performance improvement uh here we",
    "start": "1692320",
    "end": "1698880"
  },
  {
    "text": "have literally five times faster performance and we even uh use that full",
    "start": "1698880",
    "end": "1706159"
  },
  {
    "text": "time less memory than the uh test than the initial",
    "start": "1706159",
    "end": "1712720"
  },
  {
    "text": "uh code which the only difference is that we added dot s not tracking",
    "start": "1712720",
    "end": "1719279"
  },
  {
    "text": "but what they have seen in practice is that you get at least 33 percent uh better",
    "start": "1719279",
    "end": "1726000"
  },
  {
    "text": "performance and you get at least 50 percent uh more",
    "start": "1726000",
    "end": "1731679"
  },
  {
    "text": "uh less memory consumption so if you can if you can just have the data",
    "start": "1731679",
    "end": "1738640"
  },
  {
    "text": "speed only do use as no tracking it's a one-liner that can give you huge",
    "start": "1738640",
    "end": "1746000"
  },
  {
    "text": "performance benefits so here you can see that we have the same method without snow tracking uh we",
    "start": "1746000",
    "end": "1754080"
  },
  {
    "text": "got about a hundred requests per second we did the same which just adding as no",
    "start": "1754080",
    "end": "1760320"
  },
  {
    "text": "tracking and we ended up with four times better throughput",
    "start": "1760320",
    "end": "1765840"
  },
  {
    "text": "than with without it so it's a very easy way to get better performance",
    "start": "1765840",
    "end": "1772880"
  },
  {
    "start": "1771000",
    "end": "1833000"
  },
  {
    "text": "another issue very common issue that i have found is also using explicit includes uh that",
    "start": "1772880",
    "end": "1781840"
  },
  {
    "text": "means that you have that includes and say we're getting the customer table",
    "start": "1781840",
    "end": "1787760"
  },
  {
    "text": "now one of the issue that i found found with this is they usually put it into a method",
    "start": "1787760",
    "end": "1794960"
  },
  {
    "text": "uh they say okay this uh say the sales table includes includes all of the",
    "start": "1794960",
    "end": "1800399"
  },
  {
    "text": "tables because you just want to make sure that all the table is that you might need are there",
    "start": "1800399",
    "end": "1807200"
  },
  {
    "text": "but that is a terrible thing because even if you don't need that data even if",
    "start": "1807200",
    "end": "1814880"
  },
  {
    "text": "you do mapping and you don't use any of that data",
    "start": "1814880",
    "end": "1820399"
  },
  {
    "text": "it will generate a sql statement that will include the uh all of the tables uh",
    "start": "1820399",
    "end": "1827760"
  },
  {
    "text": "in your joins so you have now an unnecessarily complicated query",
    "start": "1827760",
    "end": "1834559"
  },
  {
    "start": "1833000",
    "end": "1942000"
  },
  {
    "text": "and to solve this is for instance over here we have a uh include over here and",
    "start": "1834559",
    "end": "1841679"
  },
  {
    "text": "we're getting all of the data uh for that sales person and then we are separately doing the mapping uh from the",
    "start": "1841679",
    "end": "1850080"
  },
  {
    "text": "um from the full sales table with the salesperson",
    "start": "1850080",
    "end": "1857519"
  },
  {
    "text": "now alternatively you can actually uh do the mapping in the database and as an",
    "start": "1857519",
    "end": "1863919"
  },
  {
    "text": "added benefit you can directly reference the seals person that first",
    "start": "1863919",
    "end": "1870320"
  },
  {
    "text": "name and that will result in a implicit join",
    "start": "1870320",
    "end": "1876960"
  },
  {
    "text": "uh that means that as you can see here i'm actually not using any includes",
    "start": "1876960",
    "end": "1883679"
  },
  {
    "text": "and if i uh if there's any spec change then",
    "start": "1883679",
    "end": "1889200"
  },
  {
    "text": "actually we don't need to have the sales person first name or things like that",
    "start": "1889200",
    "end": "1895279"
  },
  {
    "text": "um and we no longer depend on the salesperson once we delete them",
    "start": "1895279",
    "end": "1900880"
  },
  {
    "text": "from uh this mapping we suddenly have no no joins in our uh",
    "start": "1900880",
    "end": "1907519"
  },
  {
    "text": "sql statement so you don't have to constantly think about am i using and",
    "start": "1907519",
    "end": "1913360"
  },
  {
    "text": "include too often which have pretty significant performance",
    "start": "1913360",
    "end": "1918559"
  },
  {
    "text": "benefit performance impact you just have you can just forget about",
    "start": "1918559",
    "end": "1923840"
  },
  {
    "text": "it one note however for this one is",
    "start": "1923840",
    "end": "1929039"
  },
  {
    "text": "if you practice as a method you need to do it as an expression of a",
    "start": "1929039",
    "end": "1935440"
  },
  {
    "text": "function if you just do as a regular mapping",
    "start": "1935440",
    "end": "1940880"
  },
  {
    "text": "thing let me show you as an example say we",
    "start": "1940880",
    "end": "1947320"
  },
  {
    "text": "we go to the weight loss and",
    "start": "1948080",
    "end": "1953440"
  },
  {
    "text": "let's just take this one here",
    "start": "1953440",
    "end": "1960679"
  },
  {
    "text": "let's say that we do not uh select x",
    "start": "1962480",
    "end": "1967519"
  },
  {
    "text": "new uh rdc cells yes so that's the",
    "start": "1967519",
    "end": "1972799"
  },
  {
    "text": "sales model",
    "start": "1972799",
    "end": "1976919"
  },
  {
    "text": "and let's just say that we what we're trying to do is we're trying to get",
    "start": "1978320",
    "end": "1983360"
  },
  {
    "text": "quantity equal x quantity we want to do cell idx sale id",
    "start": "1983360",
    "end": "1991279"
  },
  {
    "text": "and then we want to do product name x product name",
    "start": "1991279",
    "end": "1997200"
  },
  {
    "text": "it's going to be product dot product name name",
    "start": "1997919",
    "end": "2004720"
  },
  {
    "text": "and let's just say that we are returning sales model",
    "start": "2004720",
    "end": "2011200"
  },
  {
    "text": "sales model",
    "start": "2011760",
    "end": "2014559"
  },
  {
    "text": "let's just simplify this and i'll just going to put over here we don't need to complicate",
    "start": "2017120",
    "end": "2023600"
  },
  {
    "text": "things and",
    "start": "2023600",
    "end": "2030600"
  },
  {
    "text": "just bear with me for a moment",
    "start": "2033360",
    "end": "2037440"
  },
  {
    "text": "so here we have a simple example of how we did the mapping and what you can do",
    "start": "2042000",
    "end": "2048320"
  },
  {
    "text": "is you can actually the control r",
    "start": "2048320",
    "end": "2054398"
  },
  {
    "text": "m or you can do control dot",
    "start": "2054399",
    "end": "2061118"
  },
  {
    "text": "control dot and then extract it as method and what you'll notice here this is an",
    "start": "2061119",
    "end": "2068320"
  },
  {
    "text": "expression so this is going to be executed on your",
    "start": "2068320",
    "end": "2074398"
  },
  {
    "text": "server now if i do the similar thing but instead of this",
    "start": "2074399",
    "end": "2081440"
  },
  {
    "text": "i'm going to do this so i'm going to return the sale",
    "start": "2081440",
    "end": "2089679"
  },
  {
    "text": "model",
    "start": "2089679",
    "end": "2092078"
  },
  {
    "text": "and this is going to be x i already have an x",
    "start": "2095359",
    "end": "2101200"
  },
  {
    "text": "and i use map in memory",
    "start": "2101200",
    "end": "2107200"
  },
  {
    "text": "i use this instead let's do this",
    "start": "2107520",
    "end": "2112720"
  },
  {
    "text": "this is now going to be processed in memory so everything after this is actually going to be in memory",
    "start": "2112720",
    "end": "2119920"
  },
  {
    "text": "i'm sorry not in memory uh there's a different trick",
    "start": "2119920",
    "end": "2125200"
  },
  {
    "text": "in later ef core actually this is executed in the server side",
    "start": "2125200",
    "end": "2131040"
  },
  {
    "text": "but you will lose this mapping over here so this is going to result in null",
    "start": "2131040",
    "end": "2136960"
  },
  {
    "text": "um so because you can get only the actual uh seal",
    "start": "2136960",
    "end": "2144160"
  },
  {
    "text": "table sale entity it will not know that you actually also want to have a",
    "start": "2144160",
    "end": "2152720"
  },
  {
    "text": "reference to the product table and this mapping over here is going to fail",
    "start": "2152720",
    "end": "2158400"
  },
  {
    "text": "whereas in this case where we're returning back an expression",
    "start": "2158400",
    "end": "2163839"
  },
  {
    "text": "it will understand oh wait you're referencing product uh so i should",
    "start": "2163839",
    "end": "2169839"
  },
  {
    "text": "also do an implicit join to this product so this is one of the common mistakes",
    "start": "2169839",
    "end": "2176079"
  },
  {
    "text": "that i have seen and that resulted in ugly code uh that is absolutely not",
    "start": "2176079",
    "end": "2181280"
  },
  {
    "text": "necessary uh this looks pretty nice to me and it's reusable so",
    "start": "2181280",
    "end": "2186800"
  },
  {
    "text": "you can use it in different queries and also very performant because",
    "start": "2186800",
    "end": "2192880"
  },
  {
    "text": "you only get the data you need",
    "start": "2192880",
    "end": "2196880"
  },
  {
    "start": "2196000",
    "end": "2653000"
  },
  {
    "text": "i've already done the nammer and also the performance impact i kind",
    "start": "2198320",
    "end": "2204079"
  },
  {
    "text": "of forgot to add the performance impact on this but uh let's do this",
    "start": "2204079",
    "end": "2209599"
  },
  {
    "text": "um we have here did i forgot to add the misc okay i",
    "start": "2209599",
    "end": "2217359"
  },
  {
    "text": "did forgot uh but uh the performance impact here",
    "start": "2217359",
    "end": "2223119"
  },
  {
    "text": "i know i have here sorry so the worst case scenario here would be",
    "start": "2223119",
    "end": "2229839"
  },
  {
    "text": "that we include everything",
    "start": "2229839",
    "end": "2234960"
  },
  {
    "text": "so if we go back to the example joints and we got for the worst case scenario",
    "start": "2234960",
    "end": "2242000"
  },
  {
    "text": "worst case scenario is we're trying to get everything uh and this everything result",
    "start": "2242000",
    "end": "2249839"
  },
  {
    "text": "results in it can run the application first",
    "start": "2249839",
    "end": "2256880"
  },
  {
    "text": "i need to fix this first i think everything",
    "start": "2256880",
    "end": "2264520"
  },
  {
    "text": "joy of doing everything uh live so i think i can just do that and dot",
    "start": "2271119",
    "end": "2276480"
  },
  {
    "text": "com that was the original code i should be able to run",
    "start": "2276480",
    "end": "2282720"
  },
  {
    "text": "the impact of this is going to be that",
    "start": "2282720",
    "end": "2288480"
  },
  {
    "text": "before running just make sure okay it's just not putting it in the foreground",
    "start": "2290480",
    "end": "2297359"
  },
  {
    "text": "the impact of this is the worst case scenario is going to obviously take a",
    "start": "2297359",
    "end": "2302640"
  },
  {
    "text": "long time to run but if we look at the um query you can see that we have all of",
    "start": "2302640",
    "end": "2311040"
  },
  {
    "text": "the inner joins that we have specified but if we look at what we're actually",
    "start": "2311040",
    "end": "2317280"
  },
  {
    "text": "using we can see that we're only using the sales person we're not using the",
    "start": "2317280",
    "end": "2322720"
  },
  {
    "text": "product we're not using the customer but we are still executing all of these",
    "start": "2322720",
    "end": "2327760"
  },
  {
    "text": "queries so right now it was 6.4 seconds if you run this again it's going to be",
    "start": "2327760",
    "end": "2334720"
  },
  {
    "text": "slightly better i think because that was a cold boot yeah 4.6 but it's a horrible performance",
    "start": "2334720",
    "end": "2341520"
  },
  {
    "text": "um now you can it's not necessarily a bad case i would",
    "start": "2341520",
    "end": "2348160"
  },
  {
    "text": "discourage you from using this you can add the include",
    "start": "2348160",
    "end": "2355680"
  },
  {
    "text": "in the query and that's going to improve the performance significantly so that's",
    "start": "2355680",
    "end": "2361680"
  },
  {
    "text": "only two seconds um but if i do",
    "start": "2361680",
    "end": "2366880"
  },
  {
    "text": "this again it's going to result in exactly the same",
    "start": "2366880",
    "end": "2371920"
  },
  {
    "text": "problem as we had before it's not going to improve performance even though we're not using that table",
    "start": "2371920",
    "end": "2379200"
  },
  {
    "text": "now the time that you actually do want to use include",
    "start": "2379200",
    "end": "2384320"
  },
  {
    "text": "is when you're updating the uh the elements so for instance i want to",
    "start": "2384320",
    "end": "2391520"
  },
  {
    "text": "get all of the sales for this salesperson",
    "start": "2391520",
    "end": "2396880"
  },
  {
    "text": "saying we got lists and we do wait query dot",
    "start": "2396880",
    "end": "2404319"
  },
  {
    "text": "uh to list and then i actually want to update",
    "start": "2404319",
    "end": "2412720"
  },
  {
    "text": "are you complaining does not contain definition",
    "start": "2413280",
    "end": "2420560"
  },
  {
    "text": "interesting new one uh",
    "start": "2421200",
    "end": "2426880"
  },
  {
    "text": "list is it because i'm reusing it",
    "start": "2426880",
    "end": "2431359"
  },
  {
    "text": "i didn't have my morning coffee but at async",
    "start": "2434079",
    "end": "2439680"
  },
  {
    "text": "so when you're in situation where you actually want to uh",
    "start": "2439680",
    "end": "2444880"
  },
  {
    "text": "do this and what you want to do is for instance you want to go",
    "start": "2444880",
    "end": "2450800"
  },
  {
    "text": "let's say first one and then you want to go to the uh",
    "start": "2450800",
    "end": "2456000"
  },
  {
    "text": "sales person and then update some of the information",
    "start": "2456000",
    "end": "2461359"
  },
  {
    "text": "of that person then in that particular case you do want",
    "start": "2461359",
    "end": "2467040"
  },
  {
    "text": "to do include because uh all of that is going to be tracked",
    "start": "2467040",
    "end": "2473119"
  },
  {
    "text": "and when you do the db context",
    "start": "2473119",
    "end": "2478960"
  },
  {
    "text": "maybe context dot save",
    "start": "2479040",
    "end": "2484079"
  },
  {
    "text": "changes uh that is going to be updated as well",
    "start": "2484079",
    "end": "2489680"
  },
  {
    "text": "so the included uh tables are also being tracked and you can update them just fine",
    "start": "2489680",
    "end": "2496560"
  },
  {
    "text": "now here it wouldn't update because we have asthma tracking so in that case you",
    "start": "2496560",
    "end": "2501839"
  },
  {
    "text": "would need to do um with no tracking and for instance if i",
    "start": "2501839",
    "end": "2506880"
  },
  {
    "text": "do change the name to be uh jk",
    "start": "2506880",
    "end": "2512480"
  },
  {
    "text": "that should work just fine what are you complaining now is seeing",
    "start": "2512480",
    "end": "2517520"
  },
  {
    "text": "method not accepting ah because i need to",
    "start": "2517520",
    "end": "2523400"
  },
  {
    "text": "yeah now it works if i run this even though this is um this is a",
    "start": "2530560",
    "end": "2537599"
  },
  {
    "text": "included uh table it's going to update so this is one case where you actually",
    "start": "2537599",
    "end": "2543119"
  },
  {
    "text": "do want to have include",
    "start": "2543119",
    "end": "2547480"
  },
  {
    "text": "just to show you the best case scenario which is with the implicit uh join",
    "start": "2550319",
    "end": "2557599"
  },
  {
    "text": "if you run this this is not only going to ask me to run this",
    "start": "2557599",
    "end": "2566480"
  },
  {
    "text": "it's not only going to uh give you a much more efficient",
    "start": "2568960",
    "end": "2575280"
  },
  {
    "text": "sql statement so here we're not only efficient with the",
    "start": "2575280",
    "end": "2582319"
  },
  {
    "text": "joints we're also efficient for what we're asking for and if you're interested at the end i can show you",
    "start": "2582319",
    "end": "2589280"
  },
  {
    "text": "that uh reducing the number of uh items you're getting from the database",
    "start": "2589280",
    "end": "2594720"
  },
  {
    "text": "actually impacts the performance so you can uh this is kind of almost double",
    "start": "2594720",
    "end": "2601359"
  },
  {
    "text": "performance gain and to uh in my eyes it's actually more",
    "start": "2601359",
    "end": "2606400"
  },
  {
    "text": "clear what you're trying to do here you can see it's very clean uh i can",
    "start": "2606400",
    "end": "2612079"
  },
  {
    "text": "here i note that this is only read-only data we're filtering but that and we want to have",
    "start": "2612079",
    "end": "2618800"
  },
  {
    "text": "it in this shape so in my opinion that is actually a much more cleaner code",
    "start": "2618800",
    "end": "2625760"
  },
  {
    "text": "it's very concise and as a bonus it's high performance and",
    "start": "2625760",
    "end": "2631680"
  },
  {
    "text": "it has its very memory efficient so for to me this is a win in all regards so",
    "start": "2631680",
    "end": "2638720"
  },
  {
    "text": "usually what they tell you is don't do premature optimization this would be the exception of this",
    "start": "2638720",
    "end": "2645359"
  },
  {
    "text": "there's almost no side effects of doing this",
    "start": "2645359",
    "end": "2652000"
  },
  {
    "start": "2653000",
    "end": "2913000"
  },
  {
    "text": "all right so the next thing that there's a common uh issue that i found is the",
    "start": "2653040",
    "end": "2658480"
  },
  {
    "text": "pagination uh usually uh it happens because",
    "start": "2658480",
    "end": "2663920"
  },
  {
    "text": "um what we're trying to do is filter data we uh get the filter data so we do it to",
    "start": "2663920",
    "end": "2670560"
  },
  {
    "text": "uh to list and then we come them uh already and only after that",
    "start": "2670560",
    "end": "2676400"
  },
  {
    "text": "we apply tag it take in skip and some developers do that because they don't",
    "start": "2676400",
    "end": "2682560"
  },
  {
    "text": "know they they can use ikvarable to their advantage",
    "start": "2682560",
    "end": "2688160"
  },
  {
    "text": "so for instance if we go to the pagination controller",
    "start": "2688160",
    "end": "2695760"
  },
  {
    "text": "uh the common mistakes that we have over here so this is the worst case scenario here",
    "start": "2695760",
    "end": "2703200"
  },
  {
    "text": "we have the query uh we did the filter now what i have seen and this is a very",
    "start": "2703200",
    "end": "2709920"
  },
  {
    "text": "common scenario uh you wouldn't believe how many times this happens is",
    "start": "2709920",
    "end": "2715200"
  },
  {
    "text": "we got all of the data which is not too horrible because we are filtering first",
    "start": "2715200",
    "end": "2722480"
  },
  {
    "text": "but what happens then is we're using uh that data to in memory process",
    "start": "2722480",
    "end": "2730160"
  },
  {
    "text": "um additional things like skipping the page uh taking um",
    "start": "2730160",
    "end": "2736640"
  },
  {
    "text": "taking a slice of the results and then mapping it just so that at the end we can use",
    "start": "2736640",
    "end": "2744480"
  },
  {
    "text": "dbresult.com so that we can actually get the right uh",
    "start": "2744480",
    "end": "2751359"
  },
  {
    "text": "number of results so that we can then also show the right number of pages and stuff like",
    "start": "2751359",
    "end": "2757200"
  },
  {
    "text": "that which may look as a reasonable code",
    "start": "2757200",
    "end": "2762480"
  },
  {
    "text": "but a much better approach to this is leverage the ike variable",
    "start": "2762480",
    "end": "2768720"
  },
  {
    "text": "here we have the query we do the same thing as before",
    "start": "2768720",
    "end": "2774800"
  },
  {
    "text": "but what we do is we make a separate request with this like variable",
    "start": "2774800",
    "end": "2780079"
  },
  {
    "text": "to count everything so what that means is we are telling the",
    "start": "2780079",
    "end": "2785200"
  },
  {
    "text": "database that i want to have um i want to know all of the results based on this",
    "start": "2785200",
    "end": "2791520"
  },
  {
    "text": "filter over here and then what we do is we",
    "start": "2791520",
    "end": "2796640"
  },
  {
    "text": "basically do the imagination so we skip a couple of items we take couple of",
    "start": "2796640",
    "end": "2801839"
  },
  {
    "text": "items and then we make another request to the database",
    "start": "2801839",
    "end": "2807359"
  },
  {
    "text": "to basically get that one slice of data that we're interested in",
    "start": "2807359",
    "end": "2813040"
  },
  {
    "text": "now this sounds like it should work worse because we're doing two requests into",
    "start": "2813040",
    "end": "2818480"
  },
  {
    "text": "the database but one interesting thing here is that it actually is the reverse so if we do",
    "start": "2818480",
    "end": "2826480"
  },
  {
    "text": "the worst case scenario we can see over here we have a very",
    "start": "2826480",
    "end": "2833359"
  },
  {
    "text": "simple uh request we have one join so that's not interesting",
    "start": "2833359",
    "end": "2838560"
  },
  {
    "text": "but what you may find is that this takes about two seconds to run",
    "start": "2838560",
    "end": "2844480"
  },
  {
    "text": "but if we do in the database for instance",
    "start": "2844480",
    "end": "2850079"
  },
  {
    "text": "we end up having a bit more code",
    "start": "2850079",
    "end": "2856000"
  },
  {
    "text": "but so you can see here we have a bit more variables and stuff like that but what",
    "start": "2856000",
    "end": "2861280"
  },
  {
    "text": "you can see here this takes only 127 milliseconds",
    "start": "2861280",
    "end": "2867119"
  },
  {
    "text": "this is on a completely different ballpark so don't feel uncomfortable",
    "start": "2867119",
    "end": "2872800"
  },
  {
    "text": "doing uh small calls to the database they can actually be a significantly",
    "start": "2872800",
    "end": "2880160"
  },
  {
    "text": "better way of getting data than trying to get a lot of data from the database",
    "start": "2880160",
    "end": "2885359"
  },
  {
    "text": "and then process it in in memory",
    "start": "2885359",
    "end": "2889680"
  },
  {
    "text": "yeah so i'm i'm just going to jump in a little bit we're coming up",
    "start": "2892160",
    "end": "2898319"
  },
  {
    "text": "on time and honestly i could have i could leave you go for like the next um however long",
    "start": "2898319",
    "end": "2904000"
  },
  {
    "text": "you've got left because like this is really interesting really a really good look at um a bunch of",
    "start": "2904000",
    "end": "2909040"
  },
  {
    "text": "stuff so um i i guess my first question is what's your what's",
    "start": "2909040",
    "end": "2914640"
  },
  {
    "start": "2913000",
    "end": "2921000"
  },
  {
    "text": "your next big tip for people um that are wanting to to learn about some of these common mistakes yeah so let me there's",
    "start": "2914640",
    "end": "2922319"
  },
  {
    "start": "2921000",
    "end": "3020000"
  },
  {
    "text": "two big tips one would be um the uh the thing with over complicated",
    "start": "2922319",
    "end": "2928720"
  },
  {
    "text": "uh queries and yeah uh apologies for that i was thinking that i don't have enough",
    "start": "2928720",
    "end": "2935040"
  },
  {
    "text": "content but i end up having too much um we all have been in that space",
    "start": "2935040",
    "end": "2940640"
  },
  {
    "text": "um so one thing that and this is all on github and i have done some performance",
    "start": "2940640",
    "end": "2945760"
  },
  {
    "text": "benchmark and i'm going to improve them but one thing that i learned is",
    "start": "2945760",
    "end": "2951359"
  },
  {
    "text": "um there is a thing where you can actually split split queries into multiple ones",
    "start": "2951359",
    "end": "2958079"
  },
  {
    "text": "there's a feature called split queries the sun caveats to it unfortunately don't have time to get into it",
    "start": "2958079",
    "end": "2964400"
  },
  {
    "text": "uh where it allows you to split up the queries into smaller queries for",
    "start": "2964400",
    "end": "2970079"
  },
  {
    "text": "instance salesperson there might be only one and it will carry only one sales",
    "start": "2970079",
    "end": "2976000"
  },
  {
    "text": "person uh instead of duplicating multiple ones in the same row that saves",
    "start": "2976000",
    "end": "2981440"
  },
  {
    "text": "you a lot of store a lot of transfer and also a lot of sql server uh process but",
    "start": "2981440",
    "end": "2989599"
  },
  {
    "text": "you can also do it manually which i found to be almost two to three times faster than sql server uh sorry and then",
    "start": "2989599",
    "end": "2997520"
  },
  {
    "text": "ef core which is but it's very simple you just query the person ahead of time",
    "start": "2997520",
    "end": "3003359"
  },
  {
    "text": "and then query all of the data that you want for that person and then uh just a",
    "start": "3003359",
    "end": "3008720"
  },
  {
    "text": "simple for for loop uh you join those data together and this is like two three",
    "start": "3008720",
    "end": "3014000"
  },
  {
    "text": "times faster if you struggle with performance in this particular case another thing that i",
    "start": "3014000",
    "end": "3020559"
  },
  {
    "start": "3020000",
    "end": "3087000"
  },
  {
    "text": "want to say oh yeah go okay one last thing yeah cancelable queries so this is very",
    "start": "3020559",
    "end": "3028559"
  },
  {
    "text": "important uh you may see that i'm doing in the",
    "start": "3028559",
    "end": "3034960"
  },
  {
    "text": "request i'm doing cancellation token and i'm including those translation",
    "start": "3034960",
    "end": "3041119"
  },
  {
    "text": "tokens indeed to list in the save changes in first of the full async and",
    "start": "3041119",
    "end": "3046800"
  },
  {
    "text": "the reason for this is if you cancel your cr your http request",
    "start": "3046800",
    "end": "3053040"
  },
  {
    "text": "the this cancellation token gets cancelled and if you if you don't um",
    "start": "3053040",
    "end": "3060559"
  },
  {
    "text": "listen to this cancellation token uh what happens is the sql server will still go on so if you have that count",
    "start": "3060559",
    "end": "3067440"
  },
  {
    "text": "example where it took six seconds to process this six seconds still going to",
    "start": "3067440",
    "end": "3072800"
  },
  {
    "text": "happen in sql server yeah oh that's that's a really good tip i i never thought to capture the cancellation",
    "start": "3072800",
    "end": "3078720"
  },
  {
    "text": "token of the http request and use and kind of passed that um especially as a kill code through to your underlying",
    "start": "3078720",
    "end": "3085520"
  },
  {
    "text": "database um calls as well just before we",
    "start": "3085520",
    "end": "3091119"
  },
  {
    "start": "3087000",
    "end": "3212000"
  },
  {
    "text": "we uh wrap up with you oh oh i see that there's the the ads um",
    "start": "3091119",
    "end": "3096480"
  },
  {
    "text": "so the links to your demos um i did have someone ask a question that i also was wondering the answer to",
    "start": "3096480",
    "end": "3102160"
  },
  {
    "text": "the implicitly include stuff um is that new to entity framework because because",
    "start": "3102160",
    "end": "3107599"
  },
  {
    "text": "i always remember the problem with the implicit include is",
    "start": "3107599",
    "end": "3113359"
  },
  {
    "text": "that uh most people um use them in practice so for instance",
    "start": "3113359",
    "end": "3119200"
  },
  {
    "text": "they did the manual mapping and the manual so they did the mapping and they did the",
    "start": "3119200",
    "end": "3125440"
  },
  {
    "text": "mapping say cell model uh map",
    "start": "3125440",
    "end": "3131040"
  },
  {
    "text": "cell right so they did this which is wrong",
    "start": "3131040",
    "end": "3136559"
  },
  {
    "text": "uh and this caused the implicit mapping to not work uh if you struggle to uh to",
    "start": "3136559",
    "end": "3142319"
  },
  {
    "text": "figure out how to do this just make the selection do control dot",
    "start": "3142319",
    "end": "3147760"
  },
  {
    "text": "and basically introduce why don't you want into just a method",
    "start": "3147760",
    "end": "3153839"
  },
  {
    "text": "anyways usually it gives you the intelligence to introduce a method",
    "start": "3153839",
    "end": "3159440"
  },
  {
    "text": "and that is the right way of doing it",
    "start": "3159440",
    "end": "3164640"
  },
  {
    "text": "cool well um excellent thanks for that like they said that was really really excellent and i i loved how you stepped",
    "start": "3164640",
    "end": "3171040"
  },
  {
    "text": "through all the demos and kind of broke each um step down piece by piece because that um and that i i was able to really",
    "start": "3171040",
    "end": "3178400"
  },
  {
    "text": "follow along um how how you kind of got to each step of the process and how you",
    "start": "3178400",
    "end": "3183520"
  },
  {
    "text": "uncovered um the different changes that happened along the way um but",
    "start": "3183520",
    "end": "3189119"
  },
  {
    "text": "unfortunately we are we are just about out of time um and it is it's coming up to lunch at least here in",
    "start": "3189119",
    "end": "3194720"
  },
  {
    "text": "sydney i know that you're in brisbane and you're like lunch that's still at least an hour away",
    "start": "3194720",
    "end": "3200319"
  },
  {
    "text": "but i'm going to invite uh lars back to the stream",
    "start": "3200319",
    "end": "3206838"
  },
  {
    "text": "you",
    "start": "3212400",
    "end": "3214480"
  }
]