[
  {
    "text": "the you know the speaker uh worst fear is like disappoint of full room as the absolute worst possible so we've had um",
    "start": "5799",
    "end": "14000"
  },
  {
    "text": "yesterday this um nice uh you know these nice puzzlers with uh wbe interview",
    "start": "14000",
    "end": "21039"
  },
  {
    "text": "questions for C++ programmers and God I wouldn't have made that job I would have",
    "start": "21039",
    "end": "27160"
  },
  {
    "text": "landed that thing at all um but I assume one of the qu interview questions that",
    "start": "27160",
    "end": "32880"
  },
  {
    "text": "you would be able to answer seeing would be U Implement a binary search for me",
    "start": "32880",
    "end": "38760"
  },
  {
    "text": "please can you do this could you sit down and Implement a under interview",
    "start": "38760",
    "end": "44120"
  },
  {
    "text": "pressure binary search I could try okay that's that's an excellent answer so we're going to talk",
    "start": "44120",
    "end": "50600"
  },
  {
    "text": "about uh today about binary search and uh no worries if you forgot the Integrity of it we're going to recap",
    "start": "50600",
    "end": "57600"
  },
  {
    "text": "them and uh it is with great uh trepidation uh that uh I must say that",
    "start": "57600",
    "end": "66200"
  },
  {
    "text": "uh I think there is one rough Edge in binary search even though we have literally used it for Millennia uh in",
    "start": "66200",
    "end": "74200"
  },
  {
    "text": "binary search that uh needs to be improved with that let's proceed with uh",
    "start": "74200",
    "end": "79720"
  },
  {
    "text": "my unwilling Obsession my reluctant Fascination my careless craziness which",
    "start": "79720",
    "end": "86920"
  },
  {
    "text": "is improve on concer I didn't sign up for that I didn't want to do it it just so happened so uh back in",
    "start": "86920",
    "end": "93960"
  },
  {
    "text": "2014 uh I defined two algorithms for string to numeric conversion and they're",
    "start": "93960",
    "end": "99799"
  },
  {
    "text": "Today part of uh metal F library but they're not part of the standard uh Library implementations as far as I know",
    "start": "99799",
    "end": "106600"
  },
  {
    "text": "they're quite a few quite a bit faster than the the the classics uh 2017 I",
    "start": "106600",
    "end": "112240"
  },
  {
    "text": "published a paper in an uh algorithms conference uh fast deterministic selection in which I showed that um",
    "start": "112240",
    "end": "121079"
  },
  {
    "text": "an algorithm can be written that does a lot better than uh GCC and clanks uh implementations of an element uh but",
    "start": "121079",
    "end": "129239"
  },
  {
    "text": "apparently nobody took notice 2019 I uh discussed a faster STD make Heap quite a",
    "start": "129239",
    "end": "135360"
  },
  {
    "text": "bit faster than the originally implemented in the um the three major implementations of STL I discussed in",
    "start": "135360",
    "end": "142640"
  },
  {
    "text": "CBB 2019 talk nobody noticed somehow I'm starting to think",
    "start": "142640",
    "end": "148440"
  },
  {
    "text": "you know whose arm should I twist here to uh get people's attention then the pandemic came which has no no link to",
    "start": "148440",
    "end": "155040"
  },
  {
    "text": "anything at all but I had to fill those things 2023 September which is today",
    "start": "155040",
    "end": "161159"
  },
  {
    "text": "we're going to discuss about the better binary search so that's you know that is the the history of uh where how we got",
    "start": "161159",
    "end": "167680"
  },
  {
    "text": "here um the history of binary search itself is a lot more interesting and it",
    "start": "167680",
    "end": "175200"
  },
  {
    "text": "originates I look like you know what was the first binary search ever described",
    "start": "175200",
    "end": "180879"
  },
  {
    "text": "and it turns out uh it has quite a long history uh all the way from you know the",
    "start": "180879",
    "end": "186519"
  },
  {
    "text": "BC era when they counted backwards I mean come on you you're born like year minus 400 how did you know right yeah I",
    "start": "186519",
    "end": "196799"
  },
  {
    "text": "me born in year minus 5 400 I'm going to live until like 300 uh 35 and you know",
    "start": "196799",
    "end": "202840"
  },
  {
    "text": "that's going to be my life between these two negatives this is weird I have no idea how those people did the calendar",
    "start": "202840",
    "end": "208200"
  },
  {
    "text": "thing that was a joke J to the people in the back there okay so uh Archimedes is",
    "start": "208200",
    "end": "214879"
  },
  {
    "text": "known to have used the meth of dichotomus and that is a very uh close cousin of um binary search essentially",
    "start": "214879",
    "end": "221519"
  },
  {
    "text": "in philosophy you you're look you're looking at dividing sets into uh two and",
    "start": "221519",
    "end": "226640"
  },
  {
    "text": "Archimedes figured out the better the equal you know the better closeing size the two sets are the better right so you",
    "start": "226640",
    "end": "232840"
  },
  {
    "text": "want to divide sets into two roughly equal uh parts so then you can dispense",
    "start": "232840",
    "end": "238560"
  },
  {
    "text": "with one half and then focus on the other half and repeat that method a number of times uh ukl uh did the same",
    "start": "238560",
    "end": "245599"
  },
  {
    "text": "with a number of geometrical and mathematical proofs uh Socrates Plato",
    "start": "245599",
    "end": "251319"
  },
  {
    "text": "Aristotle the cart uh the cart like dichotomy and the cart were very kind of",
    "start": "251319",
    "end": "256680"
  },
  {
    "text": "um one item those the C applied method of dichotomy everywhere For Better or Worse um and then in math uh per se sort",
    "start": "256680",
    "end": "266280"
  },
  {
    "text": "of the first uh clear note of uh bsection was by balzano in the 1800s and",
    "start": "266280",
    "end": "274320"
  },
  {
    "text": "then it became more formalized in uh in the 20th century binary search the first",
    "start": "274320",
    "end": "280479"
  },
  {
    "text": "mention of binary search was in one of the jatakas who knows what the jataka is",
    "start": "280479",
    "end": "287600"
  },
  {
    "text": "all right for those of you who are not experts in Buddhist religion I'm not but I have Google and I",
    "start": "287600",
    "end": "293320"
  },
  {
    "text": "I have the advantage of like knowing you searching before you guys right so essentially uh you know in one of the",
    "start": "293320",
    "end": "299639"
  },
  {
    "text": "the stories about um uh you know the previous lives of Buddha there was a description of binary search it was you",
    "start": "299639",
    "end": "306039"
  },
  {
    "text": "know you have these families and you divide them in two and you divide the remaining families into two and so on until you get to I don't know one guy",
    "start": "306039",
    "end": "312199"
  },
  {
    "text": "and you kill him or I don't know what happened then so um uh but it's kind of funny that in",
    "start": "312199",
    "end": "318680"
  },
  {
    "text": "1946 Okay this not working it's kind of funny that in 1946 uh mle published an actual",
    "start": "318680",
    "end": "326199"
  },
  {
    "text": "implementation of binary search for computers so it was the first um Advent",
    "start": "326199",
    "end": "332360"
  },
  {
    "text": "of an actual binary search algorithm that was exactly meant for computer",
    "start": "332360",
    "end": "339080"
  },
  {
    "text": "programming and the funny thing is it only worked if n the number of element",
    "start": "339080",
    "end": "344240"
  },
  {
    "text": "search was exactly two to the power of n minus one did not work for any other",
    "start": "344240",
    "end": "350759"
  },
  {
    "text": "size which is kind of funny I mean you know come on I mean you got to run for other sizes as well it turns out if the",
    "start": "350759",
    "end": "357360"
  },
  {
    "text": "number of elements search is 2 to the^ of n minus one if you have two you get the^ nus one minus one and then that",
    "start": "357360",
    "end": "364280"
  },
  {
    "text": "makes the whole analysis very easy but if it's not they didn't know what to do",
    "start": "364280",
    "end": "370520"
  },
  {
    "text": "and if you're like me you're thinking hey you know what I wish I would travel back in time to you're like",
    "start": "370520",
    "end": "377919"
  },
  {
    "text": "1946 and I would show those nink poops how it's done I mean come on you do the",
    "start": "377919",
    "end": "384000"
  },
  {
    "text": "approximate know divide by two and you get like you know you get like just a bit of the median and uh you move on and",
    "start": "384000",
    "end": "390800"
  },
  {
    "text": "uh you you're going to amaze everybody it's going to like oh my god oh did they come back from the future right so the",
    "start": "390800",
    "end": "399000"
  },
  {
    "text": "part of the algorithm is you eliminate so this kind of the interesting tidbit you eliminate as many elements as",
    "start": "399000",
    "end": "405680"
  },
  {
    "text": "possible don't focus on finding something as you would do in a linear search like is this the guy no is this the guy no is this the guy no so you",
    "start": "405680",
    "end": "412800"
  },
  {
    "text": "focus on actually collapsing the search range you're looking at collapsing the set of elements you look at and that's",
    "start": "412800",
    "end": "419160"
  },
  {
    "text": "the of the algorithm now do I care we're not going to improve binary search by 2x not going",
    "start": "419160",
    "end": "427080"
  },
  {
    "text": "to improve it by a not of magnitude we may improve it by a couple of",
    "start": "427080",
    "end": "433280"
  },
  {
    "text": "comparisons don't forget there are very few comparisons to start with because binary search is in log 2 N which means",
    "start": "433280",
    "end": "440039"
  },
  {
    "text": "if you look at 1 million elements how many comparisons are relable to",
    "start": "440039",
    "end": "445400"
  },
  {
    "text": "do who said 20 what",
    "start": "445400",
    "end": "451800"
  },
  {
    "text": "what who 1 million elements how many comparisons do you do log to log to of 1",
    "start": "451800",
    "end": "458039"
  },
  {
    "text": "million all right folks important numbers in Computing powers of two two to the power of 10 1,000 to the power of",
    "start": "458039",
    "end": "465919"
  },
  {
    "text": "20 1 million right roughly right but you know we'll do approximation so you know 1 million",
    "start": "465919",
    "end": "472159"
  },
  {
    "text": "elements you're looking at 20 comparisons or about right so if you save if you shove off one or two of",
    "start": "472159",
    "end": "478520"
  },
  {
    "text": "those 20 comparisons you're going to get you know uh 5 to 10% improvements on an",
    "start": "478520",
    "end": "484240"
  },
  {
    "text": "algorithm that's been like there for 2 4,000 years I mean that you know I I would sign up for that right I'd be",
    "start": "484240",
    "end": "490960"
  },
  {
    "text": "happy to do that now um look at this however because",
    "start": "490960",
    "end": "496319"
  },
  {
    "text": "some people may be at you know computers are fast enough and you know all those good things but come on we already are",
    "start": "496319",
    "end": "503199"
  },
  {
    "text": "the goddamn scrooges of computer science and engineering we are the people who don't",
    "start": "503199",
    "end": "509000"
  },
  {
    "text": "Che Che bonds AIS on Vector where the people who don't do uh null check on STD",
    "start": "509000",
    "end": "516599"
  },
  {
    "text": "share pointer and you know all smart pointers in the standard we are the people who Define the STD optional of",
    "start": "516599",
    "end": "523360"
  },
  {
    "text": "which only purpose is to be like optional but then we don't check that",
    "start": "523360",
    "end": "528600"
  },
  {
    "text": "it's there the irony of this and the fact",
    "start": "528600",
    "end": "534200"
  },
  {
    "text": "that the people in the standard did not figure out the Aron of this which makes it squared",
    "start": "534200",
    "end": "540120"
  },
  {
    "text": "baffles me right consider this let's let's define a type that is going to be safe",
    "start": "540120",
    "end": "547240"
  },
  {
    "text": "to optionally store something in there it may be there it may be not okay are we there are with me so the",
    "start": "547240",
    "end": "555519"
  },
  {
    "text": "whole purpose of the type is to be an optional presence of something and then they said how do we",
    "start": "555519",
    "end": "561760"
  },
  {
    "text": "access that thing oh I know let's define an operator Arrow which by itself is kind of a bit I",
    "start": "561760",
    "end": "568000"
  },
  {
    "text": "mean come on that's not a pointer but let's uh let's roll with the punches as",
    "start": "568000",
    "end": "574519"
  },
  {
    "text": "they say right so then we say okay so I'm going to Define this awesome operate operator Arrow that's going to give me",
    "start": "574519",
    "end": "581240"
  },
  {
    "text": "the optional value for which I built this entire facility and then you know I'm not going",
    "start": "581240",
    "end": "588519"
  },
  {
    "text": "to check that I assume it's there I assume it's",
    "start": "588519",
    "end": "594240"
  },
  {
    "text": "there okay so who who uses C++ in this",
    "start": "594240",
    "end": "600640"
  },
  {
    "text": "room okay we are those people okay we are the problem",
    "start": "600640",
    "end": "608640"
  },
  {
    "text": "okay now fine optional and the list goes on and the price we pay is steep uh it's",
    "start": "608640",
    "end": "616240"
  },
  {
    "text": "it's kind of a problem that we we uh we um we are so happy about the last bit of",
    "start": "616240",
    "end": "622160"
  },
  {
    "text": "efficiency that can't be even demonstrated because come on I mean let's face it the the null check in a",
    "start": "622160",
    "end": "628160"
  },
  {
    "text": "smart pointer is going to have a 100% success rate so it's a very easily predictable test",
    "start": "628160",
    "end": "635880"
  },
  {
    "text": "right you know the branch predictor so there's a branch there are multiple branch predictors in in uh in today's uh",
    "start": "635880",
    "end": "641839"
  },
  {
    "text": "Computing units and the way Branch predictor works is if you don't take a specific side of the",
    "start": "641839",
    "end": "648920"
  },
  {
    "text": "branch it's just going to predict and next time it's going to do the same so for a null pointer check that Branch",
    "start": "648920",
    "end": "654639"
  },
  {
    "text": "predictor is going to have literally 100% success rate you know I know that because the time you know the one time",
    "start": "654639",
    "end": "661160"
  },
  {
    "text": "is going to not succeed the whole application is going to fail right so it's like you know it it's",
    "start": "661160",
    "end": "668160"
  },
  {
    "text": "like you know one of those jobs like I'm you know I'm a mountain climber or I'm like a you know one of those people who",
    "start": "668160",
    "end": "674360"
  },
  {
    "text": "work with bombs like the bomb diffuser or whatever they call them they can't make one mistake in their career and",
    "start": "674360",
    "end": "679839"
  },
  {
    "text": "then you're done so that's that test right I know it's a little dark for you sorry okay",
    "start": "679839",
    "end": "687959"
  },
  {
    "text": "so so I do care about saving those couple of comparisons from out of 20 yes",
    "start": "687959",
    "end": "694279"
  },
  {
    "text": "I do care and you care too even if you kind of don't know it yet right so today",
    "start": "694279",
    "end": "701000"
  },
  {
    "text": "we're going to look at no risk performance improvements for STD binary search and friends and let's see how we",
    "start": "701000",
    "end": "706160"
  },
  {
    "text": "can do that all right this thing works on like within 5 cm of okay so we just um uh",
    "start": "706160",
    "end": "714560"
  },
  {
    "text": "talked a bit about uh introductory um items so let's look at binary research",
    "start": "714560",
    "end": "720360"
  },
  {
    "text": "the absolutely classic algorithm I call it the Violet's Ice uh version which is",
    "start": "720360",
    "end": "726680"
  },
  {
    "text": "it I'm I'm I don't know about you but it produce an emotional response in me so I go to college and I see this first time",
    "start": "726680",
    "end": "734480"
  },
  {
    "text": "and I'm like I don't care about dating this is going to be my",
    "start": "734480",
    "end": "739600"
  },
  {
    "text": "life I'm not kidding so I'm I'm looking at this and I'm I'm thinking this is the most beautiful thing I've seen in my",
    "start": "739600",
    "end": "745800"
  },
  {
    "text": "life The Violet is algorithm it's so beautiful so symmetric so simple yet so",
    "start": "745800",
    "end": "752040"
  },
  {
    "text": "powerful it just I'm I'm not kidding my hair is raised right now and I feel the",
    "start": "752040",
    "end": "757839"
  },
  {
    "text": "you know the hair in my back of my head is like just weird so it's just an algorithm that has its uh its own",
    "start": "757839",
    "end": "764320"
  },
  {
    "text": "Simplicity and beauty that is just amazing it you know you can't like this",
    "start": "764320",
    "end": "769920"
  },
  {
    "text": "algorithm I have a 9 to5 job it's just going to be go oh my goodness I'm going to lose going to lose sleep over",
    "start": "769920",
    "end": "775160"
  },
  {
    "text": "it the way it works is obviously I'm going to uh start take two iterators and",
    "start": "775160",
    "end": "780519"
  },
  {
    "text": "I'm going to take a value to be searched and my attempt again is to collapse the",
    "start": "780519",
    "end": "785560"
  },
  {
    "text": "range the search range as much as possible so with each step I'm going to do well let me take the median point I",
    "start": "785560",
    "end": "792160"
  },
  {
    "text": "assume the range is searched and I'm going to go to B plus C minus B by two",
    "start": "792160",
    "end": "797320"
  },
  {
    "text": "which is the the you know the damn straight middle of the range I'm going to look at that element and if I fall on",
    "start": "797320",
    "end": "803839"
  },
  {
    "text": "the left if I fall on the right I'm going to throw away one half of the search space",
    "start": "803839",
    "end": "809800"
  },
  {
    "text": "and that's the power of the algorithm I'm going to reduce the the set of uh things I'm looking at in half every time",
    "start": "809800",
    "end": "817000"
  },
  {
    "text": "and in the happy case when it's not neither smaller nor greater than um the",
    "start": "817000",
    "end": "823800"
  },
  {
    "text": "median is not neither small not greater than the the sord value I'm going to know that I I'm right there and I return",
    "start": "823800",
    "end": "830560"
  },
  {
    "text": "true early because I I found it and that's binary search",
    "start": "830560",
    "end": "837120"
  },
  {
    "text": "okay so that that's actually a very nice thing and U I invite you to think about",
    "start": "837120",
    "end": "842759"
  },
  {
    "text": "for example things like how often do I get all the way to the end of the binary search and the answer is actually in",
    "start": "842759",
    "end": "848959"
  },
  {
    "text": "half of the cases in half of the cases I'm going to have to collapse the search range all the way to one until I make a",
    "start": "848959",
    "end": "856320"
  },
  {
    "text": "decision simply because the way the binary division works for example all",
    "start": "856320",
    "end": "862120"
  },
  {
    "text": "odd elements I'm going to look at them in the last step so even though I do return early it turns out a very often I",
    "start": "862120",
    "end": "869279"
  },
  {
    "text": "need to uh collapse the range all the way to the bottom before making a decision and after the range has",
    "start": "869279",
    "end": "876199"
  },
  {
    "text": "collapsed entirely I'm going to decide that I did not find this uh this element I'm going to just return false and be on",
    "start": "876199",
    "end": "882519"
  },
  {
    "text": "my way right now if you look at uh if you crack",
    "start": "882519",
    "end": "887639"
  },
  {
    "text": "up on your standard Library implementation and look for there is an algorithm called STD binary search which",
    "start": "887639",
    "end": "893120"
  },
  {
    "text": "has the signature and you know let's take a look at the STL implementation",
    "start": "893120",
    "end": "898839"
  },
  {
    "text": "does it look like this or not do you think it's going to look like",
    "start": "898839",
    "end": "903399"
  },
  {
    "text": "this okay one nod negative not one hand up okay why do you think it looks",
    "start": "904320",
    "end": "912560"
  },
  {
    "text": "different because C++ makes everything more complicated all right so first of all",
    "start": "915120",
    "end": "921480"
  },
  {
    "text": "like it has a lot of double underscores there's going to be a lot of double underscores in the whole thing right and",
    "start": "921480",
    "end": "928160"
  },
  {
    "text": "then there's going to be a lot of uh just aggravation for uh for a variety of reasons some of which I agree with some",
    "start": "928160",
    "end": "935199"
  },
  {
    "text": "of which enrage me but let's pass on right let's go over that but actually there is an algorithmic reason for which",
    "start": "935199",
    "end": "942440"
  },
  {
    "text": "the STL implementation is different which is the following take a look at the following let me go back one slide",
    "start": "942440",
    "end": "948800"
  },
  {
    "text": "here and show you the following each pass through the loop I'm",
    "start": "948800",
    "end": "954399"
  },
  {
    "text": "going to do two comparisons V less than star M and star M less than V so that's",
    "start": "954399",
    "end": "960240"
  },
  {
    "text": "two comparisons per pass it turns out if you compare things like integers or",
    "start": "960240",
    "end": "965279"
  },
  {
    "text": "pointers those two can be actually one comparison because uh I'm not sure about",
    "start": "965279",
    "end": "970440"
  },
  {
    "text": "your assembler knowledge which mine is terrible but I do remember uh vaguely",
    "start": "970440",
    "end": "975920"
  },
  {
    "text": "that you you do a compare and then you have it says Flags it's greater it's smaller is whatever so you do one compare and then two jumps so you",
    "start": "975920",
    "end": "982639"
  },
  {
    "text": "compare once and then you do two jumps right that's not gener enough you know",
    "start": "982639",
    "end": "988279"
  },
  {
    "text": "for for example if you compare strings it's not going to work just as nice right so in the Ste they said hey you",
    "start": "988279",
    "end": "994199"
  },
  {
    "text": "know what um we're going to take a predicate here so I'm going to use this",
    "start": "994199",
    "end": "999560"
  },
  {
    "text": "p and less is the name of my predicate which is like a function that compares to things and it has the semantics of",
    "start": "999560",
    "end": "1006240"
  },
  {
    "text": "less than right so let me instead of uh instead of saying uh that less than that",
    "start": "1006240",
    "end": "1012079"
  },
  {
    "text": "I'm going to call this function less against the two values and I'm going to make decisions based on that now the STL",
    "start": "1012079",
    "end": "1019319"
  },
  {
    "text": "wants to minimize the number of calls to less and now you can see that this",
    "start": "1019319",
    "end": "1024959"
  },
  {
    "text": "previous algorithm the Viti has a disadvantage right it calls less two",
    "start": "1024959",
    "end": "1031678"
  },
  {
    "text": "times per iteration and that's kind of even though in some situations in some cases it you",
    "start": "1031679",
    "end": "1038600"
  },
  {
    "text": "know just do one comparison it turns out that STL wants to minimize calls to less",
    "start": "1038600",
    "end": "1043918"
  },
  {
    "text": "and therefore it goes to it uses a different algorithm this this is a slightly different algorithm it does not",
    "start": "1043919",
    "end": "1050760"
  },
  {
    "text": "have violet eyes it's not as uh symmetric and beautiful as the other but I like it",
    "start": "1050760",
    "end": "1056400"
  },
  {
    "text": "nevertheless um and the way it works is again it cuts the range to be searching in two so B plus C minus B by two and",
    "start": "1056400",
    "end": "1064960"
  },
  {
    "text": "then it makes the following decision if the median is less than the value then I'm going to advance the beginning",
    "start": "1064960",
    "end": "1072080"
  },
  {
    "text": "pointer all the way past the median because I know that it it's impossible that I'm what I'm looking for is going",
    "start": "1072080",
    "end": "1078000"
  },
  {
    "text": "to be on on that side right otherwise I'm going to set the end to the median because I know that there's nothing",
    "start": "1078000",
    "end": "1084280"
  },
  {
    "text": "interesting on that side of the median and then I'm going to continue with the new begin and",
    "start": "1084280",
    "end": "1090679"
  },
  {
    "text": "end right the point here is that I call less only once per iteration but I don't",
    "start": "1090679",
    "end": "1097240"
  },
  {
    "text": "have an early return so I always go log and steps all the way to",
    "start": "1097240",
    "end": "1102640"
  },
  {
    "text": "collapse of the range not of civilization okay so I go all the way until B becomes equal to e and then I",
    "start": "1102640",
    "end": "1110039"
  },
  {
    "text": "make my decision did I find the guy or did I not find the guy and the decision when whether I found or not is well did",
    "start": "1110039",
    "end": "1116919"
  },
  {
    "text": "I go all the way past the you know the whole um the whole range",
    "start": "1116919",
    "end": "1122360"
  },
  {
    "text": "and I know already that um uh star B is going to be uh V is not",
    "start": "1122360",
    "end": "1130360"
  },
  {
    "text": "going to sorry star B is not going to be less than V and now I got to check the other side of the test which is um uh V",
    "start": "1130360",
    "end": "1138000"
  },
  {
    "text": "less than and star B so I checked one one way I checked the other way in the previous algorithm I did it every",
    "start": "1138000",
    "end": "1144520"
  },
  {
    "text": "iteration right so I did two test is that less is that greater and whatever",
    "start": "1144520",
    "end": "1150679"
  },
  {
    "text": "but in the second case I do only one less in the in the loop and at the end I do one more less and it turns out that",
    "start": "1150679",
    "end": "1157320"
  },
  {
    "text": "if you count the number of calls to less this is better so therefore this is an a",
    "start": "1157320",
    "end": "1162400"
  },
  {
    "text": "standard library with the appropriate uh you know double underscores and all the good stuff right awesome",
    "start": "1162400",
    "end": "1169120"
  },
  {
    "text": "so uh actually this is called Lower bound because lower bound is a more",
    "start": "1169120",
    "end": "1175840"
  },
  {
    "text": "useful qu a more useful function than just binary search because it gives me",
    "start": "1175840",
    "end": "1181039"
  },
  {
    "text": "information binary search says found it like a Boolean right gives you a Boolean",
    "start": "1181039",
    "end": "1188720"
  },
  {
    "text": "found it oh no it's not there right but actually if I want to insert if I want",
    "start": "1188720",
    "end": "1194440"
  },
  {
    "text": "to do something if I want to look for an approximate value if I want to insert a new valuing the thing if I want to know",
    "start": "1194440",
    "end": "1200440"
  },
  {
    "text": "the approximate position of where would that guy would fit I would need more",
    "start": "1200440",
    "end": "1205720"
  },
  {
    "text": "information and that's where lower Bond comes into play because it Returns the",
    "start": "1205720",
    "end": "1211880"
  },
  {
    "text": "position to the left of which everything is strictly less than so it gives you I'm looking for you",
    "start": "1211880",
    "end": "1218520"
  },
  {
    "text": "know I'm looking for 42 within like a number of integers and it returns me the",
    "start": "1218520",
    "end": "1223559"
  },
  {
    "text": "position that I know for sure to the left of that position everything is less than 42 41 or less right and this",
    "start": "1223559",
    "end": "1231320"
  },
  {
    "text": "algorithm is uh very much like the other one in fact the implementation in the STL just calls lower bound and then has",
    "start": "1231320",
    "end": "1238559"
  },
  {
    "text": "one more line so literally is two lines right so lower bind is going to again do",
    "start": "1238559",
    "end": "1245440"
  },
  {
    "text": "the the same uh strategy all over again and uh this is the algorithm that is the",
    "start": "1245440",
    "end": "1251080"
  },
  {
    "text": "most informative um and then we have upper bound which is everything to the",
    "start": "1251080",
    "end": "1257440"
  },
  {
    "text": "right of the upper bound is strictly greater than my value right so I have like I can search",
    "start": "1257440",
    "end": "1264480"
  },
  {
    "text": "you know I can SE give me give me the position at which I know there's uh everything here is smaller and then I",
    "start": "1264480",
    "end": "1270400"
  },
  {
    "text": "can give me the position such that everything here is greater and then there's what's in",
    "start": "1270400",
    "end": "1277279"
  },
  {
    "text": "between equal range in between everything is equal to your value",
    "start": "1277279",
    "end": "1282360"
  },
  {
    "text": "searched because there could be duplicates right and it turns out that there's a third there's a fourth",
    "start": "1282360",
    "end": "1287440"
  },
  {
    "text": "algorithm called called STD equal range which gives you that exact range",
    "start": "1287440",
    "end": "1293880"
  },
  {
    "text": "of equal values within the searched range okay now the thing with equal",
    "start": "1293880",
    "end": "1300400"
  },
  {
    "text": "range is kind of funny because you could say why do I need equal range I could compute lower bound and then compute",
    "start": "1300400",
    "end": "1306120"
  },
  {
    "text": "upper bound and be done with it it turns out that there's more to the story you can Implement a more efficient equal",
    "start": "1306120",
    "end": "1312760"
  },
  {
    "text": "range if you search for both simultaneously okay we're going to get",
    "start": "1312760",
    "end": "1318960"
  },
  {
    "text": "there fear not okay so let me get to 5 cm of this thing okay it does work so to",
    "start": "1318960",
    "end": "1327120"
  },
  {
    "text": "evaluate the you know how good you know how well am I doing how good am I at searching things we got to this uh we",
    "start": "1327120",
    "end": "1334360"
  },
  {
    "text": "got to discuss the expected number of comparisons so um apologies for the bit",
    "start": "1334360",
    "end": "1340679"
  },
  {
    "text": "of math here but the expected number of something you sum or take the interal of",
    "start": "1340679",
    "end": "1348400"
  },
  {
    "text": "continuous but you sum in our case the number of comparisons with the probability of of that",
    "start": "1348400",
    "end": "1355559"
  },
  {
    "text": "event like okay if I have an array of u 10 values I search for the first I count",
    "start": "1355559",
    "end": "1361880"
  },
  {
    "text": "the number of comparisons the probability is one by 10 assuming you know I'm searching for all 10 I'm looking for a second I count comparisons",
    "start": "1361880",
    "end": "1368840"
  },
  {
    "text": "what the probability I multiply with the probability Etc if all are probably equal then all probabilities are going",
    "start": "1368840",
    "end": "1374640"
  },
  {
    "text": "to be the same which is 1 byn so the prob ities are kind of you know we can simplify at least in first approximation",
    "start": "1374640",
    "end": "1381760"
  },
  {
    "text": "we can think all searches are equally probable right so uh that's what we're going to",
    "start": "1381760",
    "end": "1389240"
  },
  {
    "text": "use as our Benchmark the expected number of comparisons fine",
    "start": "1389240",
    "end": "1396080"
  },
  {
    "text": "now the question is how we design a fair experiment because some searches are",
    "start": "1396080",
    "end": "1402200"
  },
  {
    "text": "going to succeed and some searches are going to fail how many are going to succeed and how many are going to fail",
    "start": "1402200",
    "end": "1409440"
  },
  {
    "text": "right what do you think would be a fair I'm going to go back so you don't read the slide how many uh how many searches",
    "start": "1409440",
    "end": "1416120"
  },
  {
    "text": "do you think would be a fair assessment of binary search I have n elements to be",
    "start": "1416120",
    "end": "1421720"
  },
  {
    "text": "searched a fair assessment of the average number of comparisons per",
    "start": "1421720",
    "end": "1428480"
  },
  {
    "text": "search all right any ideas do I search for all the values in the in the set do I ignore a few values yes please",
    "start": "1428480",
    "end": "1437200"
  },
  {
    "text": "sorry",
    "start": "1437200",
    "end": "1439880"
  },
  {
    "text": "three three searches okay what would be the three",
    "start": "1443080",
    "end": "1449039"
  },
  {
    "text": "searched in the",
    "start": "1450559",
    "end": "1453840"
  },
  {
    "text": "middle oh no no I'm I'm testing now so I'm testing I'm saying I want to count how many average comparisons yeah it's",
    "start": "1455799",
    "end": "1462640"
  },
  {
    "text": "it's not the algorithm per se but it's the experimentation with the algorithm we're looking at so restating the",
    "start": "1462640",
    "end": "1469080"
  },
  {
    "text": "question I have n elements to search in a set and I want to say how good do I",
    "start": "1469080",
    "end": "1475919"
  },
  {
    "text": "have a binary search algorithm and then I say I'm going to design an experiment uh am I liable equally",
    "start": "1475919",
    "end": "1482480"
  },
  {
    "text": "probably to search for every element in the set would you agree yes thank you thank you so I have",
    "start": "1482480",
    "end": "1491960"
  },
  {
    "text": "n searches that are going to be all successful for each of the elements right but then I'm going to have",
    "start": "1491960",
    "end": "1497279"
  },
  {
    "text": "unsuccessful uccessful searches how many is for a good experiment how many unsuccessful",
    "start": "1497279",
    "end": "1503880"
  },
  {
    "text": "searches should I have In a well-designed",
    "start": "1503880",
    "end": "1508120"
  },
  {
    "text": "experiment okay information Theory what is the most information you can extract",
    "start": "1509600",
    "end": "1514640"
  },
  {
    "text": "from a binary event one bit how do you extract one bit from something that is",
    "start": "1514640",
    "end": "1520600"
  },
  {
    "text": "probably with 50% One Way 50% the other way so if you want to design a good",
    "start": "1520600",
    "end": "1526320"
  },
  {
    "text": "binary search experiment you're going to have as many failed searches as successful searches that way extract",
    "start": "1526320",
    "end": "1532960"
  },
  {
    "text": "maximum information from binary search you get one bit of information if you don't get if you have more successful",
    "start": "1532960",
    "end": "1539360"
  },
  {
    "text": "searches than unsuc successful that would mean you're biased toward the success otherwise you're bi toward the",
    "start": "1539360",
    "end": "1545840"
  },
  {
    "text": "failure you don't you don't extract one bit of information so the the absolute",
    "start": "1545840",
    "end": "1550919"
  },
  {
    "text": "um immutable truth we're looking at here I'm going to have end successful searches to experiment with and equally",
    "start": "1550919",
    "end": "1558360"
  },
  {
    "text": "and unsuccessful searches that I'm going to be looking at so far so good but now I ask you a",
    "start": "1558360",
    "end": "1566480"
  },
  {
    "text": "different question which",
    "start": "1566480",
    "end": "1571640"
  },
  {
    "text": "is 5 cm which is you know I'm kind of obstinate in using this thing because I",
    "start": "1571919",
    "end": "1578399"
  },
  {
    "text": "think it's cool but it's kind of the range is terrible right and it's charge and everything so I ask you a second",
    "start": "1578399",
    "end": "1584360"
  },
  {
    "text": "question of the fail searches how many cases do I",
    "start": "1584360",
    "end": "1589679"
  },
  {
    "text": "have of distinct failed",
    "start": "1589679",
    "end": "1594240"
  },
  {
    "text": "searches so I may search for something that's somewhere in the in between in the wrong place right so I have like in",
    "start": "1594919",
    "end": "1602159"
  },
  {
    "text": "the AR I have like number 42 and number 46 and I happen to search for like 45 and it's it falls in between the interes",
    "start": "1602159",
    "end": "1609039"
  },
  {
    "text": "right and I have the case in which it's all the way too small or all the way too",
    "start": "1609039",
    "end": "1616399"
  },
  {
    "text": "big right so I have three cases too small too big somewhere in",
    "start": "1616399",
    "end": "1623399"
  },
  {
    "text": "between right and one you know other question would be okay so I have like n",
    "start": "1623399",
    "end": "1629039"
  },
  {
    "text": "failed searches how many of these are going to fall too small how many of them are going to be too big and how many of",
    "start": "1629039",
    "end": "1635320"
  },
  {
    "text": "them are going to be just in between so this is kind of you know this",
    "start": "1635320",
    "end": "1640880"
  },
  {
    "text": "is where I protest because uh you know this is kind of an important disc distinction that we",
    "start": "1640880",
    "end": "1647600"
  },
  {
    "text": "should make about binary searches like you know how do we handle those unsuccessful searches so let's look a",
    "start": "1647600",
    "end": "1653480"
  },
  {
    "text": "bit at the Distribution on an example so I have this sorted array from 188 all the way to 705 and I have a number of",
    "start": "1653480",
    "end": "1661159"
  },
  {
    "text": "searches with colored shapes up there and of those I'm going to have um the",
    "start": "1661159",
    "end": "1668000"
  },
  {
    "text": "green ones are matches so I'm searching for the exact thing the red squares are going to be failur in between so they're",
    "start": "1668000",
    "end": "1675399"
  },
  {
    "text": "going to be equally probably in between every two elements and then I'm going to have a few triangles that are a bit kind",
    "start": "1675399",
    "end": "1681919"
  },
  {
    "text": "of out there because they are they fall outside the whole the entire search",
    "start": "1681919",
    "end": "1687159"
  },
  {
    "text": "bound and those are the things that make me unhappy",
    "start": "1687159",
    "end": "1693159"
  },
  {
    "text": "right so we're going to have 50% successful searches as we discussed three failure cases search for Value in",
    "start": "1693159",
    "end": "1699080"
  },
  {
    "text": "between U the existing values search value smaller than the minimum 188 and",
    "start": "1699080",
    "end": "1704919"
  },
  {
    "text": "search value larger than the maximum uh which would be a 705",
    "start": "1704919",
    "end": "1710559"
  },
  {
    "text": "right now the traditional experimental analysis that you're going to see in all",
    "start": "1710559",
    "end": "1716000"
  },
  {
    "text": "Theory books is going to have I'm going to ascribe equal likelihood in between",
    "start": "1716000",
    "end": "1722000"
  },
  {
    "text": "or too small or too large meaning there is only one triangle here and one",
    "start": "1722000",
    "end": "1727240"
  },
  {
    "text": "triangle there and it makes the math easy it makes researchers happy and it makes",
    "start": "1727240",
    "end": "1734200"
  },
  {
    "text": "practitioners unhappy why am am I unhappy",
    "start": "1734200",
    "end": "1739799"
  },
  {
    "text": "because it turns out that very often we do search for out of bonds value is something that theoreticians don't you",
    "start": "1739799",
    "end": "1745760"
  },
  {
    "text": "know ignore and um actually this whole uh you",
    "start": "1745760",
    "end": "1751120"
  },
  {
    "text": "know this whole idea started from looking at uh you know in an application at Nvidia I was looking at the failed",
    "start": "1751120",
    "end": "1757159"
  },
  {
    "text": "the searches in a binary search I was like a lot of these go outside the bonds",
    "start": "1757159",
    "end": "1763120"
  },
  {
    "text": "and those are the worst case I mean come on there's got to be something there right uh let me give you a few examples",
    "start": "1763120",
    "end": "1769200"
  },
  {
    "text": "of uh cases in which we do search for outof bounds values with some frequency",
    "start": "1769200",
    "end": "1774880"
  },
  {
    "text": "the stor values in the array are grouped but the search values are scattered for example we have theoretical measurements",
    "start": "1774880",
    "end": "1780480"
  },
  {
    "text": "versus actual measurements actual measurements are always going to have outliers that fall way outside the",
    "start": "1780480",
    "end": "1785880"
  },
  {
    "text": "bounds that's one case um you know in a practical application in stock market",
    "start": "1785880",
    "end": "1791080"
  },
  {
    "text": "options you compute something in theory and then you look at the actual expirations and strike prices and again",
    "start": "1791080",
    "end": "1797000"
  },
  {
    "text": "you make may very easily fall out of bonds just because it's not it's not a fit for for whatever you're uh you're",
    "start": "1797000",
    "end": "1804000"
  },
  {
    "text": "theorizing um a I have a special list of things like reserved allocated assigned",
    "start": "1804000",
    "end": "1810360"
  },
  {
    "text": "IP addresses and I want to search my IP address whatever IP address I'm browsing to with a list of a small list of",
    "start": "1810360",
    "end": "1817640"
  },
  {
    "text": "reserved values and it's very likely that my values which are like 169 whatever whatever whatever are going to",
    "start": "1817640",
    "end": "1824320"
  },
  {
    "text": "either to the left or to the right of what I'm searching",
    "start": "1824320",
    "end": "1829240"
  },
  {
    "text": "always when the search set is small I'm going to uh experiment this out of bound search simply because there's a lot of",
    "start": "1829799",
    "end": "1836279"
  },
  {
    "text": "likelihood that there a lot of sets a lot of values outside the the search range so uh we of course we still care",
    "start": "1836279",
    "end": "1844200"
  },
  {
    "text": "about speed even if a search set is small because we may search these uh small sets very very very very many",
    "start": "1844200",
    "end": "1850720"
  },
  {
    "text": "times so you know I'm not U you know I don't care that it's small I still care about saving a few comparisons there",
    "start": "1850720",
    "end": "1857120"
  },
  {
    "text": "right right um special values in a list of integrals words searching for pointers",
    "start": "1857120",
    "end": "1863000"
  },
  {
    "text": "in Array of allocations so um actually binary search is used in a number of allocators uh did this allocator",
    "start": "1863000",
    "end": "1869760"
  },
  {
    "text": "allocate this particular pointer and if I have this uh you know pre-allocated pointers sitting in an array and then I",
    "start": "1869760",
    "end": "1875720"
  },
  {
    "text": "come with a wild pointer from a different allocator whatever and it's going to be outside the bounds guaranteed right um even for uh data",
    "start": "1875720",
    "end": "1884760"
  },
  {
    "text": "that is gaussian distributed don't forget that are uh there's a",
    "start": "1884760",
    "end": "1892240"
  },
  {
    "text": "uh there's a 32% choice I my search data is outside one standard deviation and 5%",
    "start": "1892399",
    "end": "1898639"
  },
  {
    "text": "that's it's outside two standard deviations so if I select my data from a gaussian distribution if it's grouped",
    "start": "1898639",
    "end": "1904600"
  },
  {
    "text": "enough I'm going to still have a lot of searches outside the the search range um",
    "start": "1904600",
    "end": "1909720"
  },
  {
    "text": "many of the fat tail distribution so this has been all you know there's been a lot of talk about like the fat tail",
    "start": "1909720",
    "end": "1915080"
  },
  {
    "text": "and you know the heavy tail all of these is long tail of Internet Commerce and",
    "start": "1915080",
    "end": "1920200"
  },
  {
    "text": "all that stuff and they show distributions that fall like instead of falling exponentially like that they",
    "start": "1920200",
    "end": "1925519"
  },
  {
    "text": "kind of fall and they kind of you know the the density here at the tail is quite High the density of probability so",
    "start": "1925519",
    "end": "1932039"
  },
  {
    "text": "I'm liable in this distributions to search a lot of things that are outside the natural",
    "start": "1932039",
    "end": "1937480"
  },
  {
    "text": "range so this is the this is the point of contention I will argue that there",
    "start": "1937480",
    "end": "1943840"
  },
  {
    "text": "are quite a few more times I'm going to search for things outside the the range",
    "start": "1943840",
    "end": "1949080"
  },
  {
    "text": "stored in the array then uh the theory dictates the",
    "start": "1949080",
    "end": "1954200"
  },
  {
    "text": "theory says you can search one value out of on the left one value on the right so you have like two cases that's it you're",
    "start": "1954200",
    "end": "1960679"
  },
  {
    "text": "done everything else is in between and I very much disagree now uh this would be that what",
    "start": "1960679",
    "end": "1967639"
  },
  {
    "text": "the theory has as I told you there's one triangle on the left one triangle on the",
    "start": "1967639",
    "end": "1972679"
  },
  {
    "text": "right everything else is in between the square the red squares and then I have the the the green squares which are the",
    "start": "1972679",
    "end": "1978960"
  },
  {
    "text": "successful searches so that's my experiment right the proof of binary search",
    "start": "1978960",
    "end": "1984080"
  },
  {
    "text": "optimality is done on this case and I argue that this case is not",
    "start": "1984080",
    "end": "1989840"
  },
  {
    "text": "entirely realistic I am more liable to have values in the triangle area than",
    "start": "1989840",
    "end": "1998639"
  },
  {
    "text": "inside okay so now let's go to my extreme situation which is",
    "start": "1998639",
    "end": "2005360"
  },
  {
    "text": "everything is out everything that fails is outside the bounds like everything I look for is going to is there's nothing",
    "start": "2005360",
    "end": "2011720"
  },
  {
    "text": "in between and this is like everything that fails is going to be either way to the left or way to the",
    "start": "2011720",
    "end": "2016799"
  },
  {
    "text": "right this is a artificial example but let's design an algorithm that would work well for that case how would you",
    "start": "2016799",
    "end": "2023760"
  },
  {
    "text": "design a binary search for this case yes",
    "start": "2023760",
    "end": "2029880"
  },
  {
    "text": "please store the Min and Max I mean you can you can look at begin n minus one",
    "start": "2030639",
    "end": "2036360"
  },
  {
    "text": "yes who agrees who",
    "start": "2036360",
    "end": "2043559"
  },
  {
    "text": "disagrees all right so let's remember the very thank you very much let's remember the very purpose of binary",
    "start": "2043720",
    "end": "2049320"
  },
  {
    "text": "search eliminate as many candidates from each comparison as possible if I look at the",
    "start": "2049320",
    "end": "2056560"
  },
  {
    "text": "extreme left how many candidates am I going to eliminate the red triangle on the",
    "start": "2056560",
    "end": "2063679"
  },
  {
    "text": "left which is n by two because I like n failed n successful n by2 and n",
    "start": "2063679",
    "end": "2070638"
  },
  {
    "text": "by2 how can I but also like I don't eliminate any of the potential",
    "start": "2070639",
    "end": "2075720"
  },
  {
    "text": "successful searches the green bullets how do you draw a vertical line that is",
    "start": "2075720",
    "end": "2081079"
  },
  {
    "text": "going to eliminate as many bullets sorry as many shapes green or red from this",
    "start": "2081079",
    "end": "2086358"
  },
  {
    "text": "image as possible if as was suggested you're going to you're going to draw",
    "start": "2086359",
    "end": "2091679"
  },
  {
    "text": "here or let's say the beginning right if you're going to draw here you can get",
    "start": "2091679",
    "end": "2097079"
  },
  {
    "text": "rid of these guys right but these guys are still going to still look at them so eliminate out of two n",
    "start": "2097079",
    "end": "2104960"
  },
  {
    "text": "possibilities you eliminate n by two can I eliminate",
    "start": "2104960",
    "end": "2110480"
  },
  {
    "text": "more what if I go here in the very",
    "start": "2112359",
    "end": "2117880"
  },
  {
    "text": "middle in the middle I have two advantages number one I'm going to eliminate half of the whole thing green",
    "start": "2117880",
    "end": "2123520"
  },
  {
    "text": "and red they're all gone so the first shot is always best in the middle",
    "start": "2123520",
    "end": "2129040"
  },
  {
    "text": "because you get rid of literally half the elements so if you search for two n elements you're going to get rid of N",
    "start": "2129040",
    "end": "2135160"
  },
  {
    "text": "and number two the next step you know if you want to look at the right bound or",
    "start": "2135160",
    "end": "2141400"
  },
  {
    "text": "the left bound you don't need to look at both sorry I pressed this by mistake",
    "start": "2141400",
    "end": "2148520"
  },
  {
    "text": "okay so this is the key first shot in any binary search you cut down the",
    "start": "2148520",
    "end": "2155800"
  },
  {
    "text": "goddamn middle if you remember one thing about binary search from the stock First Step you always cut in half it's like",
    "start": "2155800",
    "end": "2163800"
  },
  {
    "text": "pizza you just you know you want to just cut in half and then think about the rest that's your planning okay because",
    "start": "2163800",
    "end": "2170040"
  },
  {
    "text": "if you cut in half you're guaranteed to eliminate half of the uncertainty right and then Second Step",
    "start": "2170040",
    "end": "2178800"
  },
  {
    "text": "am I on the left oh let me look at this guy am I on the right let me look at this guy and you eliminate another n by",
    "start": "2178800",
    "end": "2187440"
  },
  {
    "text": "too and that's how the cookie crumbles so for this extreme case it turns out",
    "start": "2187440",
    "end": "2193160"
  },
  {
    "text": "that the best algorithm is cut in half get rid of half the pi and then",
    "start": "2193160",
    "end": "2200480"
  },
  {
    "text": "look at the extreme that's left and that's how you eliminate and then continue with the standard you know",
    "start": "2200480",
    "end": "2205760"
  },
  {
    "text": "the the classic binary search so that would be the optimal algorithm for this case remember it's an artificial case",
    "start": "2205760",
    "end": "2213040"
  },
  {
    "text": "we're not this is not the final algorithm right but it gives us thought about wait a second uh maybe at least in",
    "start": "2213040",
    "end": "2219960"
  },
  {
    "text": "a few cases the standard binary search is not what we're looking for it's not our best tool okay so for this extreme",
    "start": "2219960",
    "end": "2229079"
  },
  {
    "text": "case um okay so I we just discussed all this",
    "start": "2229079",
    "end": "2234319"
  },
  {
    "text": "so the optimal algorithm is will be to we just we just discussed all this it was all in talk um just let me uh just",
    "start": "2234319",
    "end": "2242640"
  },
  {
    "text": "let me calculate real quick what would be the um probability of us doing well",
    "start": "2242640",
    "end": "2247839"
  },
  {
    "text": "if I actually use the classic algorithm it turns out that the second step is wrong because I'm going to eliminate",
    "start": "2247839",
    "end": "2253640"
  },
  {
    "text": "only 3 n by8 elements instead of n by two so that's quite uh problematic so we",
    "start": "2253640",
    "end": "2260119"
  },
  {
    "text": "don't want that we want the uh algorithm as follows in blue I show the comparisons",
    "start": "2260119",
    "end": "2267680"
  },
  {
    "text": "so remember lower lower Bond extreme if begin is end I'm done then I compute the",
    "start": "2267680",
    "end": "2275000"
  },
  {
    "text": "middle of the range the median and then I'm going to compute less of median and",
    "start": "2275000",
    "end": "2280200"
  },
  {
    "text": "value if it's less than then I'm going to go to the upper half so the median is",
    "start": "2280200",
    "end": "2286000"
  },
  {
    "text": "less than the value so I'm going to go to the upper half and then I'm going to look at the very last element less last",
    "start": "2286000",
    "end": "2292640"
  },
  {
    "text": "value and then I I I can ear I can do an early return and I'm done otherwise I go to the lower half",
    "start": "2292640",
    "end": "2301200"
  },
  {
    "text": "right and in that case I'm going to compare value against star begin with",
    "start": "2301200",
    "end": "2306560"
  },
  {
    "text": "which is the first element and after all of the these two steps have been uh completed I'm going",
    "start": "2306560",
    "end": "2313760"
  },
  {
    "text": "to proceed with the classic low lower Bond because I know the bonds and I'm essentially it's optimal right so",
    "start": "2313760",
    "end": "2321440"
  },
  {
    "text": "optimal algorithm for this extreme case all failed searches are way outside the bounds cutting",
    "start": "2321440",
    "end": "2327760"
  },
  {
    "text": "half get rid of half look at the first element or the last element get rid of",
    "start": "2327760",
    "end": "2333520"
  },
  {
    "text": "half more and then continue with the classic okay but that's I you know that's not the way",
    "start": "2333520",
    "end": "2339640"
  },
  {
    "text": "it happens in the real world in the real world you're going to have some outside and some inside so let's look at the",
    "start": "2339640",
    "end": "2345040"
  },
  {
    "text": "actual best way to go about a binary search that works in all",
    "start": "2345040",
    "end": "2353319"
  },
  {
    "text": "cases um actually uh there was a question from the audience which was if",
    "start": "2353319",
    "end": "2358440"
  },
  {
    "text": "I know that I'm liable to search out of bonds can't I just look at the beginning end or the end and the answer is that",
    "start": "2358440",
    "end": "2365400"
  },
  {
    "text": "would be a sub optimal the thing is if you cut in half then you only need to do",
    "start": "2365400",
    "end": "2371000"
  },
  {
    "text": "one more test if you look at the bonds you need to do two tests two is greater than",
    "start": "2371000",
    "end": "2376720"
  },
  {
    "text": "one QED okay this laughter almost brought",
    "start": "2376720",
    "end": "2382319"
  },
  {
    "text": "down the house folks I mean come on keep it down keep it low okay you're going to bother people in the other rooms so you",
    "start": "2382319",
    "end": "2390200"
  },
  {
    "text": "don't want to look at the lower or upper bound first you want to look in the middle and then you eliminate half of the cases and then you look only at one",
    "start": "2390200",
    "end": "2396480"
  },
  {
    "text": "one so by definition you're doing better right awesome so let's uh see the tradeoff",
    "start": "2396480",
    "end": "2403200"
  },
  {
    "text": "where it falls so remember the you know the one extreme case would be I'm going to have essentially nothing outside the",
    "start": "2403200",
    "end": "2409760"
  },
  {
    "text": "search bounds and in the other case I'm going to have everything outside the sege B so what would be the tradeoff",
    "start": "2409760",
    "end": "2418680"
  },
  {
    "text": "here in the classic algorithm I'm I'm going to cut that half first and one quarter next in the in case 2 which was",
    "start": "2420000",
    "end": "2427400"
  },
  {
    "text": "the artificial case we just discussed I have very many out of B searches I'm going to cut at 1 by two first and then",
    "start": "2427400",
    "end": "2434040"
  },
  {
    "text": "zero distance from the bound next so okay you are an engineer so we",
    "start": "2434040",
    "end": "2440960"
  },
  {
    "text": "at 1 by two and one by4 versus 1 by two and zero so okay so uh you know in one",
    "start": "2440960",
    "end": "2447880"
  },
  {
    "text": "extreme case I'm going to cut in half like 1 by two 0.5 in the other case I'm",
    "start": "2447880",
    "end": "2453000"
  },
  {
    "text": "going to cut at zero which is like 0 by five or whatever right so it's either zero or",
    "start": "2453000",
    "end": "2459280"
  },
  {
    "text": "1x4 what is straight in the middle of zero and",
    "start": "2459280",
    "end": "2465160"
  },
  {
    "text": "1x4 one by eight thank you very much Norwegians are good at",
    "start": "2465880",
    "end": "2472800"
  },
  {
    "text": "math okay so I'm if I got you to chuckle a bit I'm amazed that's fantastic okay",
    "start": "2472800",
    "end": "2480920"
  },
  {
    "text": "so ex so it's an engineering decision but it's a principal decision it's not an arbitrary decision in one extreme I",
    "start": "2480920",
    "end": "2487280"
  },
  {
    "text": "choose to cut at zero in the other case I choose to cut at 1/4 and I have no idea no prior idea",
    "start": "2487280",
    "end": "2494440"
  },
  {
    "text": "about the distribution of actual searches so I you know I got to choose something in between these extremes what",
    "start": "2494440",
    "end": "2500079"
  },
  {
    "text": "can you choose as an engineer that is the best between two extremes you're",
    "start": "2500079",
    "end": "2505400"
  },
  {
    "text": "going to choose the half you're going to CH cut at one by eight so instead you know it's like a binary search instead",
    "start": "2505400",
    "end": "2511920"
  },
  {
    "text": "of cutting at half all the time you're going to start by by cutting at one fourth",
    "start": "2511920",
    "end": "2518400"
  },
  {
    "text": "right so this is the idea we have no no idea how to do so we're going to cut at",
    "start": "2518400",
    "end": "2523680"
  },
  {
    "text": "1 by two and then 1 by8 from the first BN which is one by one by4 of what's left so instead of saying uh you know uh",
    "start": "2523680",
    "end": "2531400"
  },
  {
    "text": "size is begin minus n Whatever by two we're going to do by four and work from",
    "start": "2531400",
    "end": "2536920"
  },
  {
    "text": "there so let's take a look this would be uh called the bounds",
    "start": "2536920",
    "end": "2543400"
  },
  {
    "text": "leaning binary search bounds leaning it means it's it's always going to lean toward the bonds because you're cutting",
    "start": "2543400",
    "end": "2549640"
  },
  {
    "text": "instead of cutting in half you're cutting somewhere closer to the bond and half which is at 1/4 right so uh this is",
    "start": "2549640",
    "end": "2556400"
  },
  {
    "text": "the important tidbit",
    "start": "2556400",
    "end": "2560680"
  },
  {
    "text": "um here so I made it a different color I was a bit surprised do you do you",
    "start": "2562599",
    "end": "2568280"
  },
  {
    "text": "distinguish this color okay look a lot better on my laptop I mean it's supposed to be like red right okay so here I'm",
    "start": "2568280",
    "end": "2575880"
  },
  {
    "text": "going to be in the upper half so I cut a 34s of because you know obviously I'm",
    "start": "2575880",
    "end": "2582559"
  },
  {
    "text": "going to go 34s because it's one4 from the end right so I'm going to go 3 * C",
    "start": "2582559",
    "end": "2587680"
  },
  {
    "text": "minus B by 4 and if I stay in the lower half I'm going to cut at B plus C minus",
    "start": "2587680",
    "end": "2592880"
  },
  {
    "text": "B by 4 right as I promised so I'm going to my search is going to diverge quickly",
    "start": "2592880",
    "end": "2599760"
  },
  {
    "text": "toward the bounce of the search and once I decided that actually yeah I got found",
    "start": "2599760",
    "end": "2605720"
  },
  {
    "text": "something that's less than in that case I break and I complete with the classic lower bound which is going to be optimal",
    "start": "2605720",
    "end": "2612280"
  },
  {
    "text": "for what's left so the way this",
    "start": "2612280",
    "end": "2617680"
  },
  {
    "text": "works is let's take a look at a successful search so let's look for",
    "start": "2617680",
    "end": "2624119"
  },
  {
    "text": "394 so in the classic algorithm I'm going to cut first at 498 and then I'm going to cut in half as",
    "start": "2624119",
    "end": "2631400"
  },
  {
    "text": "362 and then again in half at 4 412 and finally I'm going to 4 fall to on 394 so",
    "start": "2631400",
    "end": "2637640"
  },
  {
    "text": "that's the classic algorithm in the with the other other algorithm I'm going to cut first the GU half at",
    "start": "2637640",
    "end": "2645119"
  },
  {
    "text": "498 but then I'm going to go a bit lefter than ax5 I'm going to go all the",
    "start": "2645119",
    "end": "2650640"
  },
  {
    "text": "way to a of two 267 and then luckily I found the value in only three",
    "start": "2650640",
    "end": "2656920"
  },
  {
    "text": "searches right so that's a that's a good case there are cases in which we do a",
    "start": "2656920",
    "end": "2661960"
  },
  {
    "text": "one more comparison in the uh case of searching for four 412 again we're going",
    "start": "2661960",
    "end": "2667000"
  },
  {
    "text": "to cut here in half and then we're going to look at 362 and then we're going to",
    "start": "2667000",
    "end": "2672160"
  },
  {
    "text": "look at 412 and we found it in the with the new algorithm we're going to go from",
    "start": "2672160",
    "end": "2678520"
  },
  {
    "text": "uh from 498 all the way to 267 again so that's a bit too far so I'm I'm you know",
    "start": "2678520",
    "end": "2684400"
  },
  {
    "text": "kind of taking a risk by going away too far from the search element and then I'm going to do to more comparisons I found",
    "start": "2684400",
    "end": "2691680"
  },
  {
    "text": "it for unsuccessful searches",
    "start": "2691680",
    "end": "2697440"
  },
  {
    "text": "again the classic algorithm also always cuts in half and then it's going to go to 6 32 and in three steps he found the",
    "start": "2697440",
    "end": "2704280"
  },
  {
    "text": "it found the the the mismatch and in the other case I'm going to do one more comparison now if we search for",
    "start": "2704280",
    "end": "2710680"
  },
  {
    "text": "something that's out of bounds I do expect to do better than the classic algorithm because I'm going to do I'm",
    "start": "2710680",
    "end": "2716200"
  },
  {
    "text": "going to go real quick from 498 all the way to 214 and then I'm going to",
    "start": "2716200",
    "end": "2721680"
  },
  {
    "text": "essentially find that it's missing from the uh from the array so outof bound",
    "start": "2721680",
    "end": "2727240"
  },
  {
    "text": "searches are always going to be better with the new",
    "start": "2727240",
    "end": "2731760"
  },
  {
    "text": "algorithm all right so as as we discussed a bit uh in the beginning there's a another algorithm for binary",
    "start": "2734760",
    "end": "2741720"
  },
  {
    "text": "search which is equal range and this is where things get really interesting and",
    "start": "2741720",
    "end": "2747480"
  },
  {
    "text": "this is the most exciting part actually I save it for the end and it goes the following way okay equal range find me",
    "start": "2747480",
    "end": "2753839"
  },
  {
    "text": "to iterator such that everything here here is less than everything is greater than and what's in between is the good",
    "start": "2753839",
    "end": "2759640"
  },
  {
    "text": "stuff and if there's no good stuff the range will collapse to will be like zero length range right so that's equal",
    "start": "2759640",
    "end": "2767800"
  },
  {
    "text": "range we are Engineers we already have lower Bond and upper Bond so the straightforward approach would be call",
    "start": "2767800",
    "end": "2773800"
  },
  {
    "text": "lower Bond coal upper Bond yay right",
    "start": "2773800",
    "end": "2780319"
  },
  {
    "text": "but it turns out that today's implementations do a bit differently",
    "start": "2780319",
    "end": "2785559"
  },
  {
    "text": "they start with the Viti algorithm that we discussed in the very beginning and they cut the range in half and they cut",
    "start": "2785559",
    "end": "2791559"
  },
  {
    "text": "the range in half until they find some iterator inside the F sequence inside the the equal range and then they use",
    "start": "2791559",
    "end": "2798240"
  },
  {
    "text": "lower bound and upper bound to F the bounds can we do better and to get the answer to that let",
    "start": "2798240",
    "end": "2806440"
  },
  {
    "text": "me ask you a question okay let's say you have an array of 1 million elements and let's",
    "start": "2806440",
    "end": "2813680"
  },
  {
    "text": "say let's say we search for equal range of uh let's say it's integers between",
    "start": "2813680",
    "end": "2818920"
  },
  {
    "text": "like 1 and 1 billion and there's 1 million of them right now let's say we search equal range for number um",
    "start": "2818920",
    "end": "2829599"
  },
  {
    "text": "5,055 all right question how many of those equal values",
    "start": "2830319",
    "end": "2836520"
  },
  {
    "text": "am I bound to find am I likely to find I may find zero I may find one I",
    "start": "2836520",
    "end": "2845200"
  },
  {
    "text": "may find two how what's the most I can find thank you 1 million so I can find",
    "start": "2845200",
    "end": "2852880"
  },
  {
    "text": "one or two or three or four values up all the way to 1 million these are",
    "start": "2852880",
    "end": "2858200"
  },
  {
    "text": "possibilities so equal range could return a range that is wide like zero elements I could find zero sorry I",
    "start": "2858200",
    "end": "2863599"
  },
  {
    "text": "forgot about that so I could find zero elements I could find one two all the way to 1 million now let me ask you a",
    "start": "2863599",
    "end": "2870280"
  },
  {
    "text": "second question my friends what is the likelihood of me finding one 1 million equal values is it",
    "start": "2870280",
    "end": "2878520"
  },
  {
    "text": "the same as me finding 01",
    "start": "2878520",
    "end": "2882240"
  },
  {
    "text": "elements okay somebody left I'm not sure why but I see a lot of nods to the negative right it's like you know I'm",
    "start": "2884839",
    "end": "2891800"
  },
  {
    "text": "more you know if I have 1 million elements I'm more likely to find a few that are of the same value as opposed to",
    "start": "2891800",
    "end": "2899160"
  },
  {
    "text": "1 million however my friends these two algorith the STL algorithm assumes",
    "start": "2899160",
    "end": "2906040"
  },
  {
    "text": "there's equal probability of finding one or 1 million elements that are equal in reality what happens is that",
    "start": "2906040",
    "end": "2913480"
  },
  {
    "text": "the you know there's a lower probability of me finding more the more elements you find the lower the probability if you",
    "start": "2913480",
    "end": "2919359"
  },
  {
    "text": "find one you have some probability if you have two okay that's a lower probability if you have like a 1,000",
    "start": "2919359",
    "end": "2924400"
  },
  {
    "text": "that's a much lower probability and so on so usually in all all distributions that I know of uh gaussian uh uniform uh",
    "start": "2924400",
    "end": "2932920"
  },
  {
    "text": "ZIP power law fat tail what whatever you do you're going to see that the probability of finding a bunch of equal",
    "start": "2932920",
    "end": "2939480"
  },
  {
    "text": "elements is a lot lower than the probability of finding a few equal elements right and actually equal range",
    "start": "2939480",
    "end": "2947160"
  },
  {
    "text": "is designed in a way surprisingly to assume that I'm just as",
    "start": "2947160",
    "end": "2953040"
  },
  {
    "text": "likely to find a million elements as one as zero as five as 500 so that's not",
    "start": "2953040",
    "end": "2960319"
  },
  {
    "text": "cool so we don't want to have equal probabilities for these things because in reality they never are most real",
    "start": "2960319",
    "end": "2967200"
  },
  {
    "text": "world data is not like that most theoretical data is not like that like most data you can find is not going to",
    "start": "2967200",
    "end": "2972440"
  },
  {
    "text": "be like that and I'm going to propose to you two solutions which is one is Galloping",
    "start": "2972440",
    "end": "2979440"
  },
  {
    "text": "search and one is left leaning upper bound they have cool names right",
    "start": "2979440",
    "end": "2985520"
  },
  {
    "text": "Galloping search I mean there's what's going on what did where did horses enter the equation here like what what's with",
    "start": "2985520",
    "end": "2991680"
  },
  {
    "text": "the horses right and left leading what's with the Communists right I mean come",
    "start": "2991680",
    "end": "2997000"
  },
  {
    "text": "on so um I'm going to show you one thing",
    "start": "2997000",
    "end": "3002040"
  },
  {
    "text": "about uh G oh damn I'm going to show you Galloping search this is not my",
    "start": "3002040",
    "end": "3008200"
  },
  {
    "text": "preferred algorithm but I think it's a good algorithm to know all computer theories know it very well very many",
    "start": "3008200",
    "end": "3014839"
  },
  {
    "text": "people in the industry do not know it well how many people heard about Galloping search before today all right",
    "start": "3014839",
    "end": "3021359"
  },
  {
    "text": "the people in the back are always the smartest yes thank you very much yes Victor okay so just a few which makes my",
    "start": "3021359",
    "end": "3028000"
  },
  {
    "text": "point Galloping search is a very interesting algorithm because it works very well in certain situations it works",
    "start": "3028000",
    "end": "3034520"
  },
  {
    "text": "like binary search except it starts from one side and I'm looking at the next element",
    "start": "3034520",
    "end": "3042280"
  },
  {
    "text": "step one and I don't find it it's like still less then I'm starting to lose my",
    "start": "3042280",
    "end": "3048880"
  },
  {
    "text": "patience I make two steps I you know I take a step of one and then I take a step of two and if I still don't find it",
    "start": "3048880",
    "end": "3056400"
  },
  {
    "text": "I'm continue to lose my patience that's the Gallow part I'm going to make four I take a jump at four steps and",
    "start": "3056400",
    "end": "3063839"
  },
  {
    "text": "essentially I'm doubling my step with every step of the search I'm doubling the my um my gate right which is kind of",
    "start": "3063839",
    "end": "3072720"
  },
  {
    "text": "unfair to horses because horses don't do exponentials very much right I mean come on but you know it's a good s it's like",
    "start": "3072720",
    "end": "3079559"
  },
  {
    "text": "a horse that starts to gallop right so I starting with one and then two and then four and then eight and all the way",
    "start": "3079559",
    "end": "3086040"
  },
  {
    "text": "maybe at some point I'm going to overshoot the goddamn range and I'm going to be very unhappy but what I do",
    "start": "3086040",
    "end": "3091640"
  },
  {
    "text": "next I'm going to be okay so I overshot so what's I'm going to continue searching in the remaining range using",
    "start": "3091640",
    "end": "3097160"
  },
  {
    "text": "classic binary search and that's what Galloping search does so you start from one side you",
    "start": "3097160",
    "end": "3104240"
  },
  {
    "text": "continue with increasing gate until you overshoot or you find the value and you're good and the last uh the last",
    "start": "3104240",
    "end": "3110880"
  },
  {
    "text": "steps are you're going to take by using classic binary search so that would be the Galloping lower",
    "start": "3110880",
    "end": "3115920"
  },
  {
    "text": "bound and again there's an integer in there that you can see that it you know it's uh where's the promis thing this is",
    "start": "3115920",
    "end": "3122359"
  },
  {
    "text": "the thing step times equal two so you always multiply the step by two uh in searching for the thing however this",
    "start": "3122359",
    "end": "3129599"
  },
  {
    "text": "works best is optimal if you have an exponentially decreasing likelihood of equal range being larger and that's only",
    "start": "3129599",
    "end": "3136960"
  },
  {
    "text": "a subset of all distributions again I'm an engineer I want to do the right compromise what is the right compromise",
    "start": "3136960",
    "end": "3144280"
  },
  {
    "text": "communists left lean left leaning upper bound so to",
    "start": "3144280",
    "end": "3151480"
  },
  {
    "text": "search for equal range I'm going to do the classic lower bound sorry the improved lower Bond first and then I'm",
    "start": "3151480",
    "end": "3157319"
  },
  {
    "text": "going to do a left leaning upper bond which is which is the following it looks like upper bound",
    "start": "3157319",
    "end": "3163760"
  },
  {
    "text": "except I cut at n by4 all the time why do I cut n by4 because I want to be so I",
    "start": "3163760",
    "end": "3170640"
  },
  {
    "text": "got the lower bound and then I don't want to search in the middle because that would give equal Ood to everybody I",
    "start": "3170640",
    "end": "3176079"
  },
  {
    "text": "want to somewhere close to the left bound so that's why it's left leaning I'm leaning to the left I'm I'm",
    "start": "3176079",
    "end": "3182839"
  },
  {
    "text": "cutting at 1/4 instead of half so that way I'm giving more chance to short",
    "start": "3182839",
    "end": "3188920"
  },
  {
    "text": "ranges of equal elements than to longer ele uh uh ranges of equal elements so",
    "start": "3188920",
    "end": "3194799"
  },
  {
    "text": "the combination between lower bound bounds leaning lower bound and",
    "start": "3194799",
    "end": "3200440"
  },
  {
    "text": "left leaning upper bound would be the best for equal search uh for equal range",
    "start": "3200440",
    "end": "3207160"
  },
  {
    "text": "with that let's uh look at a couple of experiments so here I have",
    "start": "3207720",
    "end": "3213119"
  },
  {
    "text": "the unhappiest case for the new algorithm this is the happiest case for",
    "start": "3213119",
    "end": "3218200"
  },
  {
    "text": "the new algorithm and as you see we engineered the whole",
    "start": "3218200",
    "end": "3224200"
  },
  {
    "text": "thing carefully in the sense that we do have a little loss this number of comparisons up to 1 million elements as",
    "start": "3224200",
    "end": "3230960"
  },
  {
    "text": "I promised about 20 right is the maximum we do have a small loss like half a comparison on average for the",
    "start": "3230960",
    "end": "3240720"
  },
  {
    "text": "worst case for the new algorithm but in the happy case we have a very good drop in the number of",
    "start": "3240720",
    "end": "3247720"
  },
  {
    "text": "searches for the new algorithm number of comparisons right but this is unfair to the old",
    "start": "3247720",
    "end": "3254559"
  },
  {
    "text": "algorithm this is unfair to the new algorithm so I combined the two and I",
    "start": "3254559",
    "end": "3259599"
  },
  {
    "text": "showed how about we have 75% in Bound fail searches and uh 25% 12 12 12 5 and",
    "start": "3259599",
    "end": "3266760"
  },
  {
    "text": "125 on each side and in that case I still have a significant gain of a",
    "start": "3266760",
    "end": "3272200"
  },
  {
    "text": "couple of comparisons per",
    "start": "3272200",
    "end": "3276680"
  },
  {
    "text": "search to",
    "start": "3278200",
    "end": "3281480"
  },
  {
    "text": "conclude the sorry lower b lower bond this was lower",
    "start": "3285920",
    "end": "3292640"
  },
  {
    "text": "Bond equal range is more difficult to kind of of experiment with because you know you got to you got to do searches",
    "start": "3292640",
    "end": "3298440"
  },
  {
    "text": "for every number of of equal elements so you can arrange your experiment any way you want in some ways right so that was",
    "start": "3298440",
    "end": "3305440"
  },
  {
    "text": "lower bound or binary search or upper bound so for lower bound upper bound",
    "start": "3305440",
    "end": "3310680"
  },
  {
    "text": "binary search first cut at half I hope you remember this always first cutting half and then you cut on one4 from the",
    "start": "3310680",
    "end": "3316839"
  },
  {
    "text": "extreme up until you you find something Bond and then then you continue with the classic for binary search you use uh SD",
    "start": "3316839",
    "end": "3323880"
  },
  {
    "text": "lower Bond for equal range you use lower bound and then you use the Communist",
    "start": "3323880",
    "end": "3328920"
  },
  {
    "text": "upper bound okay all principal choices no magic",
    "start": "3328920",
    "end": "3334400"
  },
  {
    "text": "constants no fudge factors no tricks nothing happens in my sleeves all numbers were chosen in a principled",
    "start": "3334400",
    "end": "3340680"
  },
  {
    "text": "manner I'm going to choose you know half you know split the difference and kind of write in the middle that kind of",
    "start": "3340680",
    "end": "3345839"
  },
  {
    "text": "stuff now there's a dark horse in this that I wanted to share with you which is I did this all with it's",
    "start": "3345839",
    "end": "3354000"
  },
  {
    "text": "not me CH GP PT this is a great breakup line right it's not me it's j",
    "start": "3354000",
    "end": "3360960"
  },
  {
    "text": "GPT with J GPT I used uh essentially I use it all all the way for all the steps",
    "start": "3360960",
    "end": "3367400"
  },
  {
    "text": "uh in in doing this research I've used CH GPT I used it for average number of comparisons I it did a lot of math for",
    "start": "3367400",
    "end": "3373280"
  },
  {
    "text": "me it generated a lot of code a lot of experiments a lot of timings a lot of uh",
    "start": "3373280",
    "end": "3379400"
  },
  {
    "text": "bugs it actually did generate a few bugs uh the plots were generated by ch",
    "start": "3379400",
    "end": "3385000"
  },
  {
    "text": "PM wfr Alpha and this Slide the slide's title was suggested by chpt oh again with the horses I mean",
    "start": "3385000",
    "end": "3392359"
  },
  {
    "text": "come on I didn't okay this is crazy and for more thoughts Bon everybody and",
    "start": "3392359",
    "end": "3399599"
  },
  {
    "text": "please come to my next talk which is going to be focused on exactly this stuff after lunch get coffee thank you",
    "start": "3399599",
    "end": "3405880"
  },
  {
    "text": "very",
    "start": "3405880",
    "end": "3408078"
  },
  {
    "text": "much",
    "start": "3411160",
    "end": "3414160"
  }
]