[
  {
    "text": "okay let's start and my name is Michael Stipe",
    "start": "2639",
    "end": "9420"
  },
  {
    "text": "I'm a graphical technical steering committee member and I'm also the author of the hot chocolate graphql library.net",
    "start": "9420",
    "end": "17640"
  },
  {
    "text": "today I want to talk about building modern applications with graphql and we",
    "start": "17640",
    "end": "23220"
  },
  {
    "text": "will use the newest bits of graphql so the things that will come out with the next spec release",
    "start": "23220",
    "end": "29519"
  },
  {
    "text": "and also the newest bits that we have for net 7.",
    "start": "29519",
    "end": "36320"
  },
  {
    "text": "so before we get started let's make a quick quiz to see how everybody is on",
    "start": "37920",
    "end": "44040"
  },
  {
    "text": "graphql so take your smartphones and",
    "start": "44040",
    "end": "49640"
  },
  {
    "text": "join me",
    "start": "52079",
    "end": "54920"
  },
  {
    "text": "awesome",
    "start": "72720",
    "end": "75200"
  },
  {
    "text": "so first thing have you used graphql before have you used it in production or you just",
    "start": "79979",
    "end": "86520"
  },
  {
    "text": "experimented with it or you have no idea and you just came to look what graphql",
    "start": "86520",
    "end": "92520"
  },
  {
    "text": "is",
    "start": "92520",
    "end": "94700"
  },
  {
    "text": "okay that's a very typical graph for dotnet so in.net we are a bit more conservative",
    "start": "106740",
    "end": "113360"
  },
  {
    "text": "that's why a lot of people are more I heard about it but I have actually not",
    "start": "113360",
    "end": "119640"
  },
  {
    "text": "the right idea about it and maybe I experimented with it but",
    "start": "119640",
    "end": "124740"
  },
  {
    "text": "like there's a lot of people who don't run graphql in their day-to-day business",
    "start": "124740",
    "end": "131119"
  },
  {
    "text": "so how old do you think is graphql",
    "start": "135000",
    "end": "139340"
  },
  {
    "text": "okay so a lot of people think it's 10 years and the other bucket is more about five",
    "start": "153599",
    "end": "160440"
  },
  {
    "text": "years let's have a look",
    "start": "160440",
    "end": "165319"
  },
  {
    "text": "so actually in 2012 what the year when Facebook used graphql in production",
    "start": "165900",
    "end": "173879"
  },
  {
    "text": "so they started actually developing it earlier but 2012 was when they merged it",
    "start": "173879",
    "end": "179700"
  },
  {
    "text": "into production and actually back then they called it super graph for a lack of",
    "start": "179700",
    "end": "185160"
  },
  {
    "text": "a better name and they renamed it in graphql which was not their best name because many",
    "start": "185160",
    "end": "192720"
  },
  {
    "text": "people think it's a graph database query language so",
    "start": "192720",
    "end": "199940"
  },
  {
    "text": "yeah almost I have to update my slides actually",
    "start": "200340",
    "end": "206120"
  },
  {
    "text": "okay so what is graphql and to answer that we have to actually",
    "start": "207599",
    "end": "213959"
  },
  {
    "text": "look at why is graphed why did Facebook create graphql",
    "start": "213959",
    "end": "220379"
  },
  {
    "text": "and it has all to do with mobile applications so there is the general assumption that",
    "start": "220379",
    "end": "226680"
  },
  {
    "text": "graphql is a JavaScript thing because it is so popular in the graphical in the JavaScript ecosystem",
    "start": "226680",
    "end": "233400"
  },
  {
    "text": "but actually it was developed for Native mobile applications back then Facebook",
    "start": "233400",
    "end": "239099"
  },
  {
    "text": "had a big problem with their mobile applications because people were complaining about that their devices get",
    "start": "239099",
    "end": "246780"
  },
  {
    "text": "really hot they have slow startup times the battery draining a lot and Facebook",
    "start": "246780",
    "end": "253920"
  },
  {
    "text": "really had pressure back then people thought that Facebook cannot do the",
    "start": "253920",
    "end": "260160"
  },
  {
    "text": "drift to mobile applications and there was talk about Facebook not",
    "start": "260160",
    "end": "266280"
  },
  {
    "text": "surviving that age as we now know they're survived it by the way",
    "start": "266280",
    "end": "272520"
  },
  {
    "text": "this was actually a Facebook app much uglier than the new one and this",
    "start": "272520",
    "end": "278880"
  },
  {
    "text": "was the news feed back then so the main issue that the Facebook",
    "start": "278880",
    "end": "283919"
  },
  {
    "text": "Engineers discovered when they looked into the problem of their mobile application was actually that they used",
    "start": "283919",
    "end": "292320"
  },
  {
    "text": "rest as a back-end test technology so to say that it's wrong to use rest is",
    "start": "292320",
    "end": "299759"
  },
  {
    "text": "actually also wrong um it was more they used what they used in their normal website for Facebook so",
    "start": "299759",
    "end": "307979"
  },
  {
    "text": "they were using HTML to render their uis in the mobile application so they",
    "start": "307979",
    "end": "315000"
  },
  {
    "text": "essentially built a wrapper and they used rest to communicate with the back end",
    "start": "315000",
    "end": "320460"
  },
  {
    "text": "but they used the rest API for their desktop application",
    "start": "320460",
    "end": "325680"
  },
  {
    "text": "so when they opened the application basically the first call was to fetch the user",
    "start": "325680",
    "end": "331740"
  },
  {
    "text": "and they got data for that they actually needed three properties but this request",
    "start": "331740",
    "end": "338220"
  },
  {
    "text": "returned 50. and it was not just one call it was",
    "start": "338220",
    "end": "344039"
  },
  {
    "text": "actually a couple of calls and they first fetched the current user then they",
    "start": "344039",
    "end": "349139"
  },
  {
    "text": "fetched the news story for that user again they just needed a couple stories",
    "start": "349139",
    "end": "355080"
  },
  {
    "text": "because they didn't have even so much screen space but they again got more",
    "start": "355080",
    "end": "360539"
  },
  {
    "text": "than 60 properties in that request but the new story is not enough because",
    "start": "360539",
    "end": "367020"
  },
  {
    "text": "you also have comments so you would collect all these IDs that you had from the previous request and feed them into",
    "start": "367020",
    "end": "374100"
  },
  {
    "text": "another request to get the comments and again you just need a couple of",
    "start": "374100",
    "end": "379380"
  },
  {
    "text": "properties there and you would collect again a couple of IDs here and then",
    "start": "379380",
    "end": "385080"
  },
  {
    "text": "maybe fetch the profile picture of the users that made comments",
    "start": "385080",
    "end": "391759"
  },
  {
    "text": "and this is not efficient it would look something like this if you looked at the",
    "start": "392819",
    "end": "398220"
  },
  {
    "text": "developerative tools of chrome this is faked but just to give you an idea we",
    "start": "398220",
    "end": "403560"
  },
  {
    "text": "call that a data waterfall where each consecutive request is dependent on the",
    "start": "403560",
    "end": "409259"
  },
  {
    "text": "previous request so essentially we are doing data aggregation on the client",
    "start": "409259",
    "end": "414419"
  },
  {
    "text": "side which is really really inefficient",
    "start": "414419",
    "end": "419539"
  },
  {
    "text": "so what I discovered is that their mobile application actually has very different needs from that",
    "start": "420300",
    "end": "427680"
  },
  {
    "text": "desktop application or their website that was made for the desktop",
    "start": "427680",
    "end": "434180"
  },
  {
    "text": "at that time Facebook was not alone actually there were a couple of companies like Netflix who invested in",
    "start": "434340",
    "end": "441960"
  },
  {
    "text": "solution for this very problem because they had applications running on game",
    "start": "441960",
    "end": "448380"
  },
  {
    "text": "consoles on mobile applications so on desktop applications so they were trying to solve that also in their way they",
    "start": "448380",
    "end": "455400"
  },
  {
    "text": "call that the Netflix client optimized adapter which was kind of what graphql was aiming at",
    "start": "455400",
    "end": "464280"
  },
  {
    "text": "there are also other patterns like the BFF pattern but if you think about Netflix if they really built a BFF for",
    "start": "464280",
    "end": "472680"
  },
  {
    "text": "each of their applications that they deliver for for the Xbox console for the mobile",
    "start": "472680",
    "end": "479819"
  },
  {
    "text": "applications they would have would be very busy maintaining these",
    "start": "479819",
    "end": "485520"
  },
  {
    "text": "so this is where graphql came in and the moment Facebook released it all these",
    "start": "485520",
    "end": "492000"
  },
  {
    "text": "companies that were doing experiments in this space were actually rallying behind graphql",
    "start": "492000",
    "end": "499520"
  },
  {
    "text": "so this is a graphql query it fetches the currently sound in user and from",
    "start": "499560",
    "end": "505319"
  },
  {
    "text": "that user just the name if you send that to our graphql server we actually get a",
    "start": "505319",
    "end": "511139"
  },
  {
    "text": "response that closely aligns to our request it almost looks like we are",
    "start": "511139",
    "end": "516300"
  },
  {
    "text": "filling up our mtjs in graph here it's not like that actually but it's a good",
    "start": "516300",
    "end": "521700"
  },
  {
    "text": "mental picture to start thinking about graphql but as our use cases change or we build",
    "start": "521700",
    "end": "529080"
  },
  {
    "text": "new experiences or new clients we can just change our request ask for more or",
    "start": "529080",
    "end": "534600"
  },
  {
    "text": "less data from the back end and the graphql server will fulfillment",
    "start": "534600",
    "end": "540300"
  },
  {
    "text": "but it when we look at this graph the query here we can see it's not about",
    "start": "540300",
    "end": "545339"
  },
  {
    "text": "sparse Fields it's actually about trees of data so that is why graphql is so",
    "start": "545339",
    "end": "551880"
  },
  {
    "text": "great with relations we can drill into data for instance fetch in one go not",
    "start": "551880",
    "end": "558600"
  },
  {
    "text": "only the currently signed unusual but also the news stories or the friends of this user",
    "start": "558600",
    "end": "564540"
  },
  {
    "text": "there's one more Concept in graphql and we call it a fragment and that is aimed",
    "start": "564540",
    "end": "570360"
  },
  {
    "text": "at the front-end Developers so a fragment is our data contract for our UI component you could say you can",
    "start": "570360",
    "end": "577860"
  },
  {
    "text": "bake that into your graphql query and the great thing here is if we look for",
    "start": "577860",
    "end": "583200"
  },
  {
    "text": "instance add a react UI component here we can see that we can co-locate our",
    "start": "583200",
    "end": "589260"
  },
  {
    "text": "data needs our data contract in our react component the same works with a",
    "start": "589260",
    "end": "597180"
  },
  {
    "text": "blazer for instance we can do that in the same way and then we have like you",
    "start": "597180",
    "end": "603120"
  },
  {
    "text": "know a component the data we need and the data usage",
    "start": "603120",
    "end": "608940"
  },
  {
    "text": "and the second coolest thing is as I compose my components I'm actually composing my graphql request",
    "start": "608940",
    "end": "617600"
  },
  {
    "text": "so graphql gives clients or consumers of our API the power to ask for exactly",
    "start": "617760",
    "end": "623760"
  },
  {
    "text": "what they want and nothing more and that is giving you super fast back-ends and",
    "start": "623760",
    "end": "630240"
  },
  {
    "text": "super reactive front ends so what is graphql graphql is a query language for your API",
    "start": "630240",
    "end": "637260"
  },
  {
    "text": "and the runtime to fulfill these queries",
    "start": "637260",
    "end": "642019"
  },
  {
    "text": "so with raspberry we just have one endpoint because we don't need all these endpoints that we had with rest API",
    "start": "642899",
    "end": "649760"
  },
  {
    "text": "because we are defining a query and then we send that to that endpoint and that",
    "start": "649760",
    "end": "655140"
  },
  {
    "text": "means we can fetch all the data we need at a specific moment in time for our user experience that we want to build in",
    "start": "655140",
    "end": "661860"
  },
  {
    "text": "one request there's no overall under fetching on the client and when we looked at the request",
    "start": "661860",
    "end": "668880"
  },
  {
    "text": "earlier you saw these data aggregations on the client side that is super inefficient now we can aggregate the",
    "start": "668880",
    "end": "675000"
  },
  {
    "text": "data in the back end where we are close to the database or close to our microservices and we have zero latency",
    "start": "675000",
    "end": "683459"
  },
  {
    "text": "and graphql has built on a strong type system and that is super important and we will look at this aspects in a couple",
    "start": "683459",
    "end": "690240"
  },
  {
    "text": "of demos because these gives guarantees to the client side you could say there's",
    "start": "690240",
    "end": "695519"
  },
  {
    "text": "something like this the open API specification for instance but it's not",
    "start": "695519",
    "end": "700980"
  },
  {
    "text": "baked into a runtime we are just with open the open API spec for rest we are",
    "start": "700980",
    "end": "706019"
  },
  {
    "text": "just saying okay this is my type system on the back end but there's nothing in four things is",
    "start": "706019",
    "end": "711540"
  },
  {
    "text": "so if you violate one of these types there's nothing stopping this data",
    "start": "711540",
    "end": "717300"
  },
  {
    "text": "violations getting through the client so the client always has to check with graphql that's not the case and that",
    "start": "717300",
    "end": "723060"
  },
  {
    "text": "makes it super predictable to use on top of this graph pearl is real time",
    "start": "723060",
    "end": "729000"
  },
  {
    "text": "before we look at some code so there are three graphql operations that we know of",
    "start": "729000",
    "end": "735060"
  },
  {
    "text": "there's read operations this is our graphql queries it's the get in rest",
    "start": "735060",
    "end": "741540"
  },
  {
    "text": "then we have write operations these are our mutations",
    "start": "741540",
    "end": "746820"
  },
  {
    "text": "in graphql and see put post patch delete in rest lastly we have in graphical",
    "start": "746820",
    "end": "752519"
  },
  {
    "text": "events and we call them subscriptions",
    "start": "752519",
    "end": "757940"
  },
  {
    "text": "okay let's have a look at some code so this is my first demo and we will dive into",
    "start": "758820",
    "end": "766860"
  },
  {
    "text": "how to build a small graphql server let's get rid of this guy here",
    "start": "766860",
    "end": "773480"
  },
  {
    "text": "so how do we build a graphql server and that is quite simple we just do a net",
    "start": "773579",
    "end": "779160"
  },
  {
    "text": "new web and that is an asp.net core web application",
    "start": "779160",
    "end": "784500"
  },
  {
    "text": "and if we look at that web application it's basically the minimal API we expect",
    "start": "784500",
    "end": "791160"
  },
  {
    "text": "right okay",
    "start": "791160",
    "end": "796940"
  },
  {
    "text": "to make it graphical server we need to add a package here and I'm adding here",
    "start": "796940",
    "end": "802380"
  },
  {
    "text": "the hot chocolate asp.net core package and let's quickly restore it",
    "start": "802380",
    "end": "810139"
  },
  {
    "text": "and then we have all the ingredients to build a graphql web server",
    "start": "813660",
    "end": "819360"
  },
  {
    "text": "so the first thing we talked about the operation types and there is this query operation type and that's the first",
    "start": "819360",
    "end": "825660"
  },
  {
    "text": "thing we want to build so I'm gonna create here a Class A simple class",
    "start": "825660",
    "end": "832560"
  },
  {
    "text": "called query and that's my root operation type and the next thing let's start with the hello world here so I'm",
    "start": "832560",
    "end": "839160"
  },
  {
    "text": "adding a little method here called hello it has an argument name which has a",
    "start": "839160",
    "end": "844560"
  },
  {
    "text": "default word and then we just concat here a string and return the result",
    "start": "844560",
    "end": "849959"
  },
  {
    "text": "and that is a valid graph root type next we're going to set up our graphql",
    "start": "849959",
    "end": "856200"
  },
  {
    "text": "server so I'm adding here a couple of services and in my service collection I'm adding",
    "start": "856200",
    "end": "863820"
  },
  {
    "text": "the graphql server here and then I'm registering our query root type",
    "start": "863820",
    "end": "870680"
  },
  {
    "text": "awesome so there's one thing left and that is the transport so I need to map the",
    "start": "871440",
    "end": "877200"
  },
  {
    "text": "graphql transport here let's do that so I'm just saying here map graphql and",
    "start": "877200",
    "end": "883620"
  },
  {
    "text": "then I'm done that is my graphql server let's run it",
    "start": "883620",
    "end": "888920"
  },
  {
    "text": "actually let me do a no hot reload because sometimes it",
    "start": "889680",
    "end": "896040"
  },
  {
    "text": "messes up okay so this is my graph Fair server it gives me a 404 because graphql by",
    "start": "896040",
    "end": "902100"
  },
  {
    "text": "default is on the graphql route and if I open that up I'm greeted here",
    "start": "902100",
    "end": "907920"
  },
  {
    "text": "by our graphql IDE banana cake pop it's also done by our project let me Zoom",
    "start": "907920",
    "end": "913980"
  },
  {
    "text": "that in okay the coolest features actually that",
    "start": "913980",
    "end": "920339"
  },
  {
    "text": "we can take off the glasses but okay now let's let's explore our graphql",
    "start": "920339",
    "end": "926940"
  },
  {
    "text": "server so this is basically a new tab and I can explore my API with that I can",
    "start": "926940",
    "end": "932880"
  },
  {
    "text": "go here to the schema reference and you can see now I have a query root type here and my query root type Has a Field",
    "start": "932880",
    "end": "940139"
  },
  {
    "text": "hello which returns a non-allible string in graphql we have no null ability and",
    "start": "940139",
    "end": "946019"
  },
  {
    "text": "you can see even my default value translated into graphql",
    "start": "946019",
    "end": "951660"
  },
  {
    "text": "so that is awesome we can now query that so let's write a graphql query I'm querying here with my",
    "start": "951660",
    "end": "958860"
  },
  {
    "text": "field hello if I run that I get what I expect but in graphql fields are more",
    "start": "958860",
    "end": "964440"
  },
  {
    "text": "like message so I can also pass in here the name argument we can say Michael run that and I get",
    "start": "964440",
    "end": "972000"
  },
  {
    "text": "hello Michael so that looks easy so let's put a prop proper object",
    "start": "972000",
    "end": "977820"
  },
  {
    "text": "structure into that so let's create maybe a simple book field here or a book",
    "start": "977820",
    "end": "984540"
  },
  {
    "text": "type and a book has the author so let's also create the author here and then let's",
    "start": "984540",
    "end": "990899"
  },
  {
    "text": "just create a simple method here to fetch the authors",
    "start": "990899",
    "end": "996300"
  },
  {
    "text": "books okay let's go back to my graphql server",
    "start": "996300",
    "end": "1002120"
  },
  {
    "text": "let's refresh the schema go into our schema reference and you can see we have here the books field because",
    "start": "1002120",
    "end": "1009620"
  },
  {
    "text": "in graphql we don't have these verbs and we apply these graphql best practices and naming on top that's why it's called",
    "start": "1009620",
    "end": "1015860"
  },
  {
    "text": "books here okay and I can also now query that",
    "start": "1015860",
    "end": "1021920"
  },
  {
    "text": "and as you see not only flat fields are easy to integrate we actually inspect",
    "start": "1021920",
    "end": "1027199"
  },
  {
    "text": "the whole graph that or you hold object tree that you expose to graphql and then",
    "start": "1027199",
    "end": "1032900"
  },
  {
    "text": "you can query for it and we can run that and then we get the data",
    "start": "1032900",
    "end": "1039020"
  },
  {
    "text": "okay so that was the first piece of graphql experience that we now",
    "start": "1039020",
    "end": "1045199"
  },
  {
    "text": "collected this is our query type that we created we call this piece a resolver in",
    "start": "1045199",
    "end": "1051020"
  },
  {
    "text": "graphql because it resolves our data and it translates to a graphical type",
    "start": "1051020",
    "end": "1057559"
  },
  {
    "text": "that looks like this the whole approach here is called The annotation based approach and that the original graph",
    "start": "1057559",
    "end": "1063760"
  },
  {
    "text": "graphql approach that Facebook started with but their graph per server the first graphql server was written in hack",
    "start": "1063760",
    "end": "1070460"
  },
  {
    "text": "it's compiled PHP this C sharp type then translates into",
    "start": "1070460",
    "end": "1077120"
  },
  {
    "text": "this sdl type and it also infers correct all the pieces",
    "start": "1077120",
    "end": "1084200"
  },
  {
    "text": "here so our method our resolver becomes a hello field and we also infer this",
    "start": "1084200",
    "end": "1089840"
  },
  {
    "text": "argument I saw our parameter from our c-sharp message translates into an",
    "start": "1089840",
    "end": "1095000"
  },
  {
    "text": "argument of our field we have in graphical different values we",
    "start": "1095000",
    "end": "1100280"
  },
  {
    "text": "can even have more complexity forward valuation in net we can have full object",
    "start": "1100280",
    "end": "1105500"
  },
  {
    "text": "structures here and we also understand non-nulliability and null ability by default a graphql",
    "start": "1105500",
    "end": "1112220"
  },
  {
    "text": "type is nullable and the exclamation mark makes it none of it so it's",
    "start": "1112220",
    "end": "1117500"
  },
  {
    "text": "reversed to see Sharp where we have the question mark to make something nullable",
    "start": "1117500",
    "end": "1122600"
  },
  {
    "text": "in graphql we need to make something non-nullable",
    "start": "1122600",
    "end": "1128440"
  },
  {
    "text": "okay so graphql lets us model an interface to our core domain or we",
    "start": "1128480",
    "end": "1135440"
  },
  {
    "text": "could say graphql allows us to expose our business layer in a much richer way",
    "start": "1135440",
    "end": "1141380"
  },
  {
    "text": "because the graphql type system has all these capabilities like interfaces",
    "start": "1141380",
    "end": "1146780"
  },
  {
    "text": "discriminate unions and so much more so I can model my business application then",
    "start": "1146780",
    "end": "1153559"
  },
  {
    "text": "infer from that the graphql schema and then can access this over the wire",
    "start": "1153559",
    "end": "1159440"
  },
  {
    "text": "suddenly and ask for the data I need for my application",
    "start": "1159440",
    "end": "1165460"
  },
  {
    "text": "so let's talk about transport here so graphql is actually transport agnostic but there is a graphical over HTTP spec",
    "start": "1165919",
    "end": "1173179"
  },
  {
    "text": "so we can communicate communicate with graphql via HTTP or post HTTP get or",
    "start": "1173179",
    "end": "1180200"
  },
  {
    "text": "also other things even grpc or if you wanted to do TCP sockets",
    "start": "1180200",
    "end": "1186320"
  },
  {
    "text": "most used is HTTP post that is the most used",
    "start": "1186320",
    "end": "1191440"
  },
  {
    "text": "graphql transport and we use that for queries or mutation",
    "start": "1191440",
    "end": "1197559"
  },
  {
    "text": "but for subscription real-time we could also use web sockets or server-side events",
    "start": "1197559",
    "end": "1204760"
  },
  {
    "text": "so I this talk is called modern applications let's have a look at the Modern application",
    "start": "1204919",
    "end": "1211480"
  },
  {
    "text": "that got it here",
    "start": "1213080",
    "end": "1218440"
  },
  {
    "text": "that is actually my modern application it um this demo was cooler a couple of",
    "start": "1219620",
    "end": "1225020"
  },
  {
    "text": "months ago it's about cryptocurrencies the prices are not real so",
    "start": "1225020",
    "end": "1230299"
  },
  {
    "text": "there's no reason to sell um so this is a typical application that",
    "start": "1230299",
    "end": "1239480"
  },
  {
    "text": "works for mobile and I call it modern application because it really lifts you can see all the data is being updated in",
    "start": "1239480",
    "end": "1247039"
  },
  {
    "text": "real time and look here for all this data I've fetched here it's one",
    "start": "1247039",
    "end": "1252140"
  },
  {
    "text": "graphical request and no matter what I do in this application maybe I'm going here onto the Bitcoin it's just one",
    "start": "1252140",
    "end": "1259580"
  },
  {
    "text": "graph per request and that makes it super efficient over any network technology so if you're mobile",
    "start": "1259580",
    "end": "1267919"
  },
  {
    "text": "or if you're on desktop it's super efficient and even if I'm now fetching here a bit",
    "start": "1267919",
    "end": "1274820"
  },
  {
    "text": "more or different graph like the weekly graph aggregation it's just one request",
    "start": "1274820",
    "end": "1281419"
  },
  {
    "text": "and actually graphql clients work together with client-side caching that",
    "start": "1281419",
    "end": "1286580"
  },
  {
    "text": "means if I go back there's no graphql request and we are not fetching all the data we",
    "start": "1286580",
    "end": "1291980"
  },
  {
    "text": "are just always fetching the difference that we need more right",
    "start": "1291980",
    "end": "1298039"
  },
  {
    "text": "okay so let's build or see how we can build for that the",
    "start": "1298039",
    "end": "1304039"
  },
  {
    "text": "back end so what do we want to reach with graphql we want to have a faster iteration",
    "start": "1304039",
    "end": "1309380"
  },
  {
    "text": "between front-end and backend because we want to enable the front-end developers",
    "start": "1309380",
    "end": "1314419"
  },
  {
    "text": "to not have to go to our back-end engineer every time to get a specific optimized graphql or rest request we",
    "start": "1314419",
    "end": "1323360"
  },
  {
    "text": "actually want to give them a tool to tell us what they need for their components without without us back-end",
    "start": "1323360",
    "end": "1330500"
  },
  {
    "text": "Engineers needing to redeploy always our backend we want to have static typing and always",
    "start": "1330500",
    "end": "1338840"
  },
  {
    "text": "the most efficient way to fetch the data on top of that our application should be",
    "start": "1338840",
    "end": "1345260"
  },
  {
    "text": "reactive like you saw so let's have a look at how we could build the backend for the application I",
    "start": "1345260",
    "end": "1351080"
  },
  {
    "text": "showed you and that is demo2",
    "start": "1351080",
    "end": "1358419"
  },
  {
    "text": "so I'm using Entity framework now for my demo here but you can also use other",
    "start": "1363919",
    "end": "1369679"
  },
  {
    "text": "Technologies like mongodb Raven the B elastic or whatever it plugs just into",
    "start": "1369679",
    "end": "1375140"
  },
  {
    "text": "hot chocolate so in this instance I have here the data",
    "start": "1375140",
    "end": "1381320"
  },
  {
    "text": "that's my asset my cryptocurrencies and I also have an object price here right",
    "start": "1381320",
    "end": "1386500"
  },
  {
    "text": "and I want to make that fetchable through graphql so we already learned that we need a",
    "start": "1386500",
    "end": "1393740"
  },
  {
    "text": "query root type to fetch data so I have here our query view type that we had before with the hello world field",
    "start": "1393740",
    "end": "1401360"
  },
  {
    "text": "so in order to fetch my assets I'm going to introduce a new",
    "start": "1401360",
    "end": "1406820"
  },
  {
    "text": "resolver here called get assets and this resolver gets injected here the asset",
    "start": "1406820",
    "end": "1413419"
  },
  {
    "text": "context so we have resolver level dependency injection and",
    "start": "1413419",
    "end": "1418820"
  },
  {
    "text": "we do that because this way the execution engine knows what you your",
    "start": "1418820",
    "end": "1424880"
  },
  {
    "text": "resolver needs as dependencies and this is super efficient in how we resolve",
    "start": "1424880",
    "end": "1430100"
  },
  {
    "text": "dependencies the second thing is that I just do my",
    "start": "1430100",
    "end": "1435799"
  },
  {
    "text": "data fetching here and then I return a variable okay so my resolver is done",
    "start": "1435799",
    "end": "1441260"
  },
  {
    "text": "and I need to register now my DB context here",
    "start": "1441260",
    "end": "1447140"
  },
  {
    "text": "with my graphql configuration we do that with Entity framework to",
    "start": "1447140",
    "end": "1452720"
  },
  {
    "text": "essentially accommodate the non-thread safety of the DB context so what we will",
    "start": "1452720",
    "end": "1458059"
  },
  {
    "text": "do here by default is inject a scoped container into the resolver so you don't",
    "start": "1458059",
    "end": "1464960"
  },
  {
    "text": "have even when we parallelize data fetching in the execution engine you always have the right container instance",
    "start": "1464960",
    "end": "1471559"
  },
  {
    "text": "on which you can operate okay with that we are actually ready for",
    "start": "1471559",
    "end": "1478159"
  },
  {
    "text": "running our application here let me just do that.net watch how to",
    "start": "1478159",
    "end": "1484760"
  },
  {
    "text": "reload and then let's",
    "start": "1484760",
    "end": "1491419"
  },
  {
    "text": "grab a new window and go to our graphql endpoint",
    "start": "1491419",
    "end": "1497799"
  },
  {
    "text": "okay so I already have here my types is my hello field and there is my asset",
    "start": "1500179",
    "end": "1506600"
  },
  {
    "text": "time and if I drill into it you can also see it also has the nested structures",
    "start": "1506600",
    "end": "1512480"
  },
  {
    "text": "here so it inferred my whole DB context here and we have everything in that we",
    "start": "1512480",
    "end": "1520100"
  },
  {
    "text": "need so I can just go here and actually query my assets",
    "start": "1520100",
    "end": "1526419"
  },
  {
    "text": "let's get the names run that and I get them",
    "start": "1526580",
    "end": "1532039"
  },
  {
    "text": "but it's a lot so it's essentially all that I have in my table and that's the right moment to",
    "start": "1532039",
    "end": "1538460"
  },
  {
    "text": "talk about pagination so when Facebook create a graphql they also restart",
    "start": "1538460",
    "end": "1545120"
  },
  {
    "text": "pagination so they went away from the typical offset paging because they had the",
    "start": "1545120",
    "end": "1551900"
  },
  {
    "text": "problem that there's always new news stories coming into their table",
    "start": "1551900",
    "end": "1558260"
  },
  {
    "text": "and that means when you page through their news stories you had the cases",
    "start": "1558260",
    "end": "1563539"
  },
  {
    "text": "that you got the same news story again because you just skipped and took the",
    "start": "1563539",
    "end": "1569419"
  },
  {
    "text": "next data but there could be now a ton of new entities there",
    "start": "1569419",
    "end": "1575480"
  },
  {
    "text": "so they came up with something that is called a cursor-based pagination or key set pagination and the idea here is that",
    "start": "1575480",
    "end": "1583580"
  },
  {
    "text": "we navigate relatively from our entities so we would not say skip take instead we",
    "start": "1583580",
    "end": "1591500"
  },
  {
    "text": "would say after this entity give me the next five and this way our Pages move",
    "start": "1591500",
    "end": "1597799"
  },
  {
    "text": "actually so let's see how we can Implement that with hot chocolate",
    "start": "1597799",
    "end": "1604899"
  },
  {
    "text": "here into my demo and then we need some code to get that",
    "start": "1605600",
    "end": "1611779"
  },
  {
    "text": "integrated so I'm going here to my query type and then I'm saying use paging and then",
    "start": "1611779",
    "end": "1618320"
  },
  {
    "text": "we're done what's more about the concept and we actually can now query the whole",
    "start": "1618320",
    "end": "1626179"
  },
  {
    "text": "thing so I'm refreshing here now you can see my queries actually invalid because",
    "start": "1626179",
    "end": "1632000"
  },
  {
    "text": "we have Rewritten the types here we have now an asset connection and you can see we have a lot of arguments here like",
    "start": "1632000",
    "end": "1638299"
  },
  {
    "text": "first after last before and now I would go here for the nodes field and",
    "start": "1638299",
    "end": "1646279"
  },
  {
    "text": "you can see that I'm only getting now a couple here because we have a default page size and to navigate that I can",
    "start": "1646279",
    "end": "1654860"
  },
  {
    "text": "grab the page in for now I can ask if this has a next page and I also can ask",
    "start": "1654860",
    "end": "1660620"
  },
  {
    "text": "for the end cursor and if I do that you can see here I have the end cursor and that's the cursor of",
    "start": "1660620",
    "end": "1667400"
  },
  {
    "text": "this element here I can grab that and just feed that here in I can say",
    "start": "1667400",
    "end": "1673460"
  },
  {
    "text": "after this guy",
    "start": "1673460",
    "end": "1677559"
  },
  {
    "text": "I want the next two",
    "start": "1679400",
    "end": "1682840"
  },
  {
    "text": "okay and that translates automatically because I returned here a variable into my database query",
    "start": "1684740",
    "end": "1691640"
  },
  {
    "text": "let's go a bit further with that what if I wanted to have client-side query ability so to filter or to sort my data",
    "start": "1691640",
    "end": "1699320"
  },
  {
    "text": "set so it works essentially the same way I go here",
    "start": "1699320",
    "end": "1704840"
  },
  {
    "text": "I say use projections maybe to only select",
    "start": "1704840",
    "end": "1709880"
  },
  {
    "text": "from the database what we actually ask for then use filtering to filter what",
    "start": "1709880",
    "end": "1716539"
  },
  {
    "text": "items I want to have from my data set and also use sorting",
    "start": "1716539",
    "end": "1722659"
  },
  {
    "text": "these are data middlewares and I need to register them",
    "start": "1722659",
    "end": "1727760"
  },
  {
    "text": "so I'm going here and registers them so now they are available everywhere in my",
    "start": "1727760",
    "end": "1733039"
  },
  {
    "text": "schema so I can use them and let's refresh that here again",
    "start": "1733039",
    "end": "1738080"
  },
  {
    "text": "so the data structure is here the same but you can see that I have now actually",
    "start": "1738080",
    "end": "1743299"
  },
  {
    "text": "more arguments here so I have a where argument and an order argument",
    "start": "1743299",
    "end": "1748520"
  },
  {
    "text": "and now I could go in here and say I want to order my data set by the description which is",
    "start": "1748520",
    "end": "1756919"
  },
  {
    "text": "kind of stupid and that's why you shouldn't just apply that on your data",
    "start": "1756919",
    "end": "1762140"
  },
  {
    "text": "set or on your business layer on your repositories you actually should limit that to what is useful in your",
    "start": "1762140",
    "end": "1769039"
  },
  {
    "text": "application so I'm going to do is",
    "start": "1769039",
    "end": "1774320"
  },
  {
    "text": "added that a bit so we're going to introduce introduce",
    "start": "1774320",
    "end": "1780559"
  },
  {
    "text": "here another type and this type will limit what we can sort for instance so creating here a new input type and that",
    "start": "1780559",
    "end": "1788120"
  },
  {
    "text": "is an asset sorting input type here and you can see I already added here the bind Fields explicitly for my sort",
    "start": "1788120",
    "end": "1795500"
  },
  {
    "text": "type and then I can tell it what should be sortable so in this case everything",
    "start": "1795500",
    "end": "1803419"
  },
  {
    "text": "that is navigatable from the price field so all all the subfields that I can",
    "start": "1803419",
    "end": "1808520"
  },
  {
    "text": "reach here that should be sortable there's one more issue at the moment I",
    "start": "1808520",
    "end": "1813860"
  },
  {
    "text": "have here the order by fixed so we could only apply order structures on top of",
    "start": "1813860",
    "end": "1819620"
  },
  {
    "text": "that so I'm going to rewrite my resolver here a bit",
    "start": "1819620",
    "end": "1824980"
  },
  {
    "text": "and now I'm checking if the user provided an order here",
    "start": "1825620",
    "end": "1831140"
  },
  {
    "text": "then I'm not applying a default order and with that",
    "start": "1831140",
    "end": "1836539"
  },
  {
    "text": "let's go back to our graphql ID refresh that and if we look at our schema here",
    "start": "1836539",
    "end": "1843919"
  },
  {
    "text": "I can see that I can only sort certain things now",
    "start": "1843919",
    "end": "1850659"
  },
  {
    "text": "so on input no that didn't work sometimes hot reload messes up my demo",
    "start": "1854240",
    "end": "1861799"
  },
  {
    "text": "so let's restart that",
    "start": "1861799",
    "end": "1867159"
  },
  {
    "text": "okay so let's refresh that and then write an order here",
    "start": "1868039",
    "end": "1876520"
  },
  {
    "text": "ah now we have the price and only the price and then we can actually sort that",
    "start": "1878179",
    "end": "1888020"
  },
  {
    "text": "in ascending order price",
    "start": "1888020",
    "end": "1894279"
  },
  {
    "text": "so we want the Bitcoin we want Bitcoin first so we are ordering by price in",
    "start": "1900440",
    "end": "1906980"
  },
  {
    "text": "descending order I'm running that and actually let me get rid of the paging",
    "start": "1906980",
    "end": "1913460"
  },
  {
    "text": "here of course that is something we don't want and then the Bitcoin should be first but",
    "start": "1913460",
    "end": "1919580"
  },
  {
    "text": "we could also have it in ascending order and then I have something else there",
    "start": "1919580",
    "end": "1926960"
  },
  {
    "text": "and just to have a look at how this translates you can see it perfectly",
    "start": "1926960",
    "end": "1932480"
  },
  {
    "text": "translates into the SQL we want you have only the data I selected its name here",
    "start": "1932480",
    "end": "1938360"
  },
  {
    "text": "and we have here join with the asset price field so it really nicely",
    "start": "1938360",
    "end": "1944179"
  },
  {
    "text": "translated into SQL okay let's go back to the slides",
    "start": "1944179",
    "end": "1951380"
  },
  {
    "text": "and talk a bit about field middleware so how does it work actually so this guy is a resolver and on top",
    "start": "1951380",
    "end": "1958760"
  },
  {
    "text": "here the the use paging is actually a middleware and these other things are also",
    "start": "1958760",
    "end": "1965059"
  },
  {
    "text": "middlewares and who knows the middleware pattern in asp.net core",
    "start": "1965059",
    "end": "1970880"
  },
  {
    "text": "okay it's the same thing but we apply it per resolver so we built up a field",
    "start": "1970880",
    "end": "1976820"
  },
  {
    "text": "pipeline here and that means we have this pattern of next weight so we can in each middleware",
    "start": "1976820",
    "end": "1985460"
  },
  {
    "text": "um essentially defer to the next one in the pipeline and wait for the data to return and then we can apply on top of",
    "start": "1985460",
    "end": "1992419"
  },
  {
    "text": "the query bus like expression trees and these expression trees can then be Rewritten by the database provider into",
    "start": "1992419",
    "end": "1999260"
  },
  {
    "text": "like the database a query Lynch and that works not only",
    "start": "1999260",
    "end": "2005440"
  },
  {
    "text": "with paging it works also with filtering and sorting and what have you whatever you have so a graphical query like this",
    "start": "2005440",
    "end": "2012940"
  },
  {
    "text": "could be translated into the perfect SQL version of that",
    "start": "2012940",
    "end": "2018640"
  },
  {
    "text": "but actually that's not the best practice to just put your database under there and it can be cool if you want to",
    "start": "2018640",
    "end": "2024580"
  },
  {
    "text": "do rapid development but typically we don't have that Facebook actually",
    "start": "2024580",
    "end": "2030460"
  },
  {
    "text": "started with this and that says Ashley where you should aim your work and",
    "start": "2030460",
    "end": "2035519"
  },
  {
    "text": "having graphql on top of your business layer and then you create a nice domain",
    "start": "2035519",
    "end": "2042340"
  },
  {
    "text": "for your front end developers to fetch data from so but when face when Facebook",
    "start": "2042340",
    "end": "2047799"
  },
  {
    "text": "released graphql people went more into that direction they thought oh graphqra",
    "start": "2047799",
    "end": "2053500"
  },
  {
    "text": "it's a great Gateway technology so let's not only have it for the data that I put",
    "start": "2053500",
    "end": "2059378"
  },
  {
    "text": "in my graph first server let's actually merge data from everywhere in our company in and it",
    "start": "2059379",
    "end": "2066839"
  },
  {
    "text": "turned into something like this where maybe have something like the data fetching I just wrote but I also have",
    "start": "2066839",
    "end": "2073780"
  },
  {
    "text": "other things where I can maybe have aggregations in some Azure functions or whatever and then I would merge that",
    "start": "2073780",
    "end": "2080618"
  },
  {
    "text": "into one type system so what we're going to do for our application is integrate this price",
    "start": "2080619",
    "end": "2087099"
  },
  {
    "text": "change service that we have running on Azure and Azure had an outage today so let's see if that demo works",
    "start": "2087099",
    "end": "2095520"
  },
  {
    "text": "so we have Azure Azure function somewhere that lets us fetch for each",
    "start": "2095560",
    "end": "2101800"
  },
  {
    "text": "asset an aggregated price change this price change service gives us a",
    "start": "2101800",
    "end": "2107619"
  },
  {
    "text": "response like that where we get the aggregate percentage change and we want",
    "start": "2107619",
    "end": "2113020"
  },
  {
    "text": "to integrate that into our graph but it not only works with rest whatever",
    "start": "2113020",
    "end": "2118240"
  },
  {
    "text": "you have there okay so let's go to the next demo",
    "start": "2118240",
    "end": "2124920"
  },
  {
    "text": "three so the first thing is because rest is",
    "start": "2128020",
    "end": "2133480"
  },
  {
    "text": "this thing that we don't have and I want to even generate types for it so I can",
    "start": "2133480",
    "end": "2138880"
  },
  {
    "text": "just type it statically here and create a schema.graphql this by the way is the",
    "start": "2138880",
    "end": "2144940"
  },
  {
    "text": "same server the service that we had before a bit more advanced we have no assets we also have users and stuff like",
    "start": "2144940",
    "end": "2151900"
  },
  {
    "text": "that in here and we want to kind of merge now this rest service into our",
    "start": "2151900",
    "end": "2156940"
  },
  {
    "text": "graphql server so I'm creating here a schema.graphware and what I can do is",
    "start": "2156940",
    "end": "2162280"
  },
  {
    "text": "type the data set the static typing for my graphql server",
    "start": "2162280",
    "end": "2169000"
  },
  {
    "text": "so I'm creating since this sdl type here and say okay from the data that",
    "start": "2169000",
    "end": "2174160"
  },
  {
    "text": "restaurant has had I actually just want the percentage change and that comes from an Json object that I will have in",
    "start": "2174160",
    "end": "2180579"
  },
  {
    "text": "my execution engine okay so this guy we need a to register",
    "start": "2180579",
    "end": "2185800"
  },
  {
    "text": "that's our graphql configuration you can see it has grown a bit and we're gonna",
    "start": "2185800",
    "end": "2191200"
  },
  {
    "text": "add here the document that we just created and then this type is now",
    "start": "2191200",
    "end": "2196599"
  },
  {
    "text": "already part of our type system so now we need to wire that up so we kind of",
    "start": "2196599",
    "end": "2202420"
  },
  {
    "text": "need to create a function in our price change object that we have or our price",
    "start": "2202420",
    "end": "2208599"
  },
  {
    "text": "object that we have and but I don't want to change actually my business layer or my data layer here",
    "start": "2208599",
    "end": "2214720"
  },
  {
    "text": "so in in hot chocolate we have kind of these extension types so I can create a",
    "start": "2214720",
    "end": "2221619"
  },
  {
    "text": "class here and this extends our actual model with all the graphql specific",
    "start": "2221619",
    "end": "2229660"
  },
  {
    "text": "stuff so I don't have to bleed graphql specifics into my domain layer or into my data layer",
    "start": "2229660",
    "end": "2235420"
  },
  {
    "text": "and in this instance I'm just adding here method it's called get change and it refers to",
    "start": "2235420",
    "end": "2243400"
  },
  {
    "text": "the type in my document so I'm saying here it's a get change it's a Json that I'm fetching with the HTTP client so",
    "start": "2243400",
    "end": "2250720"
  },
  {
    "text": "very raw and then I actually can use it",
    "start": "2250720",
    "end": "2257339"
  },
  {
    "text": "start it okay",
    "start": "2260020",
    "end": "2265300"
  },
  {
    "text": "let's refresh that it should not be oh that's the wrong one",
    "start": "2265300",
    "end": "2270460"
  },
  {
    "text": "this one is better let's refresh the schema here so it still works same schema but now I can do",
    "start": "2270460",
    "end": "2277180"
  },
  {
    "text": "more I can drill into my price and actually in my price I have here a method or a field a graph here field and",
    "start": "2277180",
    "end": "2284800"
  },
  {
    "text": "that is the function that we just added so when I fetch here the price percentage I'm actually fetching from a",
    "start": "2284800",
    "end": "2291400"
  },
  {
    "text": "rest service here okay let's fetch the hourly aggregation",
    "start": "2291400",
    "end": "2296680"
  },
  {
    "text": "and we do that and actually that is quite slow you can see and I can tell you why",
    "start": "2296680",
    "end": "2303820"
  },
  {
    "text": "because we are now fetching for each item one rest call and that is very inefficient",
    "start": "2303820",
    "end": "2311619"
  },
  {
    "text": "and Facebook also ran into these things so they came up with a concept they call data loader",
    "start": "2311619",
    "end": "2317859"
  },
  {
    "text": "so what does the data loader do when we fetch this change field we are doing a rest request here and we're doing a rest",
    "start": "2317859",
    "end": "2324940"
  },
  {
    "text": "request 10 times now and that is super inefficient so they came up with something that they",
    "start": "2324940",
    "end": "2331660"
  },
  {
    "text": "originally called preparable um but nowadays it's called Data loader",
    "start": "2331660",
    "end": "2337420"
  },
  {
    "text": "and it allows us to batch request data so how that works in a way that it's",
    "start": "2337420",
    "end": "2343540"
  },
  {
    "text": "transparent to everything that we do is that the graphql resolver where instead",
    "start": "2343540",
    "end": "2349480"
  },
  {
    "text": "of doing the request itself ask data loader and the data loader has a task",
    "start": "2349480",
    "end": "2355480"
  },
  {
    "text": "cache and each time you ask a data loader it will actually look into the task cache do I have for this key for",
    "start": "2355480",
    "end": "2362859"
  },
  {
    "text": "what you ask actually is a task to wait on if not it will just issue a new task",
    "start": "2362859",
    "end": "2369099"
  },
  {
    "text": "and you can await that task and that will actually lead to your execution engine at some point to that",
    "start": "2369099",
    "end": "2376240"
  },
  {
    "text": "lock and that means your execution engine cannot do anything anymore because it's just awaiting everything",
    "start": "2376240",
    "end": "2382359"
  },
  {
    "text": "and at that point the execution engine will dispatch the data fetching calls to this",
    "start": "2382359",
    "end": "2390760"
  },
  {
    "text": "backend and get all the data in one call but your rest service must be better for",
    "start": "2390760",
    "end": "2398619"
  },
  {
    "text": "that so my rest service allows me to send multiple things in and if you have",
    "start": "2398619",
    "end": "2403660"
  },
  {
    "text": "Legacy infrastructure it's actually easy to to make it batchable so that is",
    "start": "2403660",
    "end": "2410680"
  },
  {
    "text": "where data loader come in it also ensures consistency in your graph if you fetch multiple times the same thing in",
    "start": "2410680",
    "end": "2417880"
  },
  {
    "text": "your graph it's actually always the same version because we have a request cache so in the request we are caching",
    "start": "2417880",
    "end": "2424599"
  },
  {
    "text": "everything that you resolve but as soon as the request is done we clear the cache for that request",
    "start": "2424599",
    "end": "2430839"
  },
  {
    "text": "okay let's actually build that in quickly so how do we rewrite that so to",
    "start": "2430839",
    "end": "2438099"
  },
  {
    "text": "introduce a data loader here let me do that I'm creating actually just another",
    "start": "2438099",
    "end": "2443200"
  },
  {
    "text": "method and I'm essentially copied this code down here and made it batchable so",
    "start": "2443200",
    "end": "2450280"
  },
  {
    "text": "I'm so I'm saying here I'm accepting multiple symbols here",
    "start": "2450280",
    "end": "2455440"
  },
  {
    "text": "and I'm giving you back a map that tells",
    "start": "2455440",
    "end": "2460780"
  },
  {
    "text": "you this key has this item um and then I'm doing here a bit the",
    "start": "2460780",
    "end": "2466359"
  },
  {
    "text": "data call aggregating the data and now I can use it so this is just a method what",
    "start": "2466359",
    "end": "2473560"
  },
  {
    "text": "we do in hot chocolate is actually using a source generator to generate you the actual data loader so let's first update",
    "start": "2473560",
    "end": "2480940"
  },
  {
    "text": "this piece of code that is my resolver um and let me get the new one and you",
    "start": "2480940",
    "end": "2487839"
  },
  {
    "text": "can see the resoma actually became a lot easier because we just Corner this data",
    "start": "2487839",
    "end": "2493119"
  },
  {
    "text": "loader here and you can see from this method we actually generated you the",
    "start": "2493119",
    "end": "2498280"
  },
  {
    "text": "more complex data loader code so and then you can just ask here for",
    "start": "2498280",
    "end": "2505240"
  },
  {
    "text": "whatever data item you want to have just run that and have a look at that",
    "start": "2505240",
    "end": "2512680"
  },
  {
    "text": "and suddenly our data fetching is a lot more efficient you can see it's done",
    "start": "2512680",
    "end": "2517780"
  },
  {
    "text": "here and I'm fetching here all the items in one go you can see there",
    "start": "2517780",
    "end": "2524500"
  },
  {
    "text": "okay so this is how we made integrating external Services efficient and it feels",
    "start": "2524500",
    "end": "2531579"
  },
  {
    "text": "just like graphql nobody knows that there are tons of micro Services behind your graphql layer",
    "start": "2531579",
    "end": "2539980"
  },
  {
    "text": "okay let's talk about mutations so far we just did querying data but how about",
    "start": "2541300",
    "end": "2547420"
  },
  {
    "text": "changing data because that is where graphql really shines for the front-end developer so this is a graphql query we",
    "start": "2547420",
    "end": "2556060"
  },
  {
    "text": "are fetching data here and the components of that is actually the blue thing the keyword query is the operation",
    "start": "2556060",
    "end": "2563200"
  },
  {
    "text": "that we're going to use to execute the request on then we have the operation name that is how we name it it's up to",
    "start": "2563200",
    "end": "2571599"
  },
  {
    "text": "us to name it and then we can pass in variables into our query arguments it",
    "start": "2571599",
    "end": "2578079"
  },
  {
    "text": "kind of looks like a function so in graphql we are actually creating functions for your client then it's a",
    "start": "2578079",
    "end": "2585940"
  },
  {
    "text": "graphical operation so the next thing here is these guys we call selection",
    "start": "2585940",
    "end": "2590980"
  },
  {
    "text": "sets and this essentially each selection set we can select data and in a query we",
    "start": "2590980",
    "end": "2597700"
  },
  {
    "text": "have this root selection field here that is our entry point and this is a query",
    "start": "2597700",
    "end": "2603220"
  },
  {
    "text": "and in a graphql query everything is a query but when we think about mutations only the top level field is a mutation",
    "start": "2603220",
    "end": "2612280"
  },
  {
    "text": "everything beneath this top level field is actually querying the change that you did to your system",
    "start": "2612280",
    "end": "2618640"
  },
  {
    "text": "and that allows me for instance to create a new ice a new thing and then select the impact that this had to your",
    "start": "2618640",
    "end": "2625599"
  },
  {
    "text": "back end um mutations on the top level are",
    "start": "2625599",
    "end": "2631960"
  },
  {
    "text": "sequentially so the way we execute that is first we would execute the first",
    "start": "2631960",
    "end": "2637960"
  },
  {
    "text": "notation then we would execute in parallel or the subfields then the Next Mutation again query the subfields and",
    "start": "2637960",
    "end": "2646000"
  },
  {
    "text": "ideally in this case where we add and remove the thing nothing would have happened at the end of this thing",
    "start": "2646000",
    "end": "2652540"
  },
  {
    "text": "okay let's have a look at how we can Implement that and then I show you a couple of cool things really with that",
    "start": "2652540",
    "end": "2659940"
  },
  {
    "text": "this demo",
    "start": "2661020",
    "end": "2665020"
  },
  {
    "text": "okay it's just uh watch that already",
    "start": "2666579",
    "end": "2673599"
  },
  {
    "text": "okay okay",
    "start": "2673599",
    "end": "2678240"
  },
  {
    "text": "so what we want to do here is actually add a mutation and I already",
    "start": "2678819",
    "end": "2684040"
  },
  {
    "text": "have here in my types created in the account an empty watch list mutation",
    "start": "2684040",
    "end": "2690220"
  },
  {
    "text": "class and what we want to add what we want to add here is a mutation that allows us to create a watch list entry",
    "start": "2690220",
    "end": "2698319"
  },
  {
    "text": "so essentially put one of the Bitcoins or whatever into our watch list I",
    "start": "2698319",
    "end": "2704079"
  },
  {
    "text": "already have here a repository so far we just used empty framework directly but",
    "start": "2704079",
    "end": "2709240"
  },
  {
    "text": "in this case I'm using here the watch list repository which has a method here",
    "start": "2709240",
    "end": "2714640"
  },
  {
    "text": "add asset to watch list and what I already did here in the",
    "start": "2714640",
    "end": "2720760"
  },
  {
    "text": "program CS I registered my service",
    "start": "2720760",
    "end": "2725800"
  },
  {
    "text": "as something for graphql so graph wheel knows I don't have to annotate that in my functions I can just use the watch",
    "start": "2725800",
    "end": "2732099"
  },
  {
    "text": "list repository and it also knows how to deal with it since this watch this",
    "start": "2732099",
    "end": "2737680"
  },
  {
    "text": "repository hasn't an asset context so something of Entity framework in it we",
    "start": "2737680",
    "end": "2744099"
  },
  {
    "text": "scope it per resolver so again we create an instance run the resolver and then dispose it essentially",
    "start": "2744099",
    "end": "2750520"
  },
  {
    "text": "okay so let's go into our mutation in our watch list mutation class here and at",
    "start": "2750520",
    "end": "2758140"
  },
  {
    "text": "our mutation sorry and this mutation essentially is quite",
    "start": "2758140",
    "end": "2765339"
  },
  {
    "text": "clean we add the symbol here the symbol is what we want to add to our watch list",
    "start": "2765339",
    "end": "2771040"
  },
  {
    "text": "we have the username from our state so that's the sign in user and also we have",
    "start": "2771040",
    "end": "2776859"
  },
  {
    "text": "here the repository and we can execute on that this is a valid mutation I can just run it",
    "start": "2776859",
    "end": "2784119"
  },
  {
    "text": "let's just save it go to our client see if I already",
    "start": "2784119",
    "end": "2789819"
  },
  {
    "text": "wrote something here up yeah so this is how a mutation structure",
    "start": "2789819",
    "end": "2796480"
  },
  {
    "text": "could look like I'm adding here something to my watch list Let me refresh it refresh that and if I run",
    "start": "2796480",
    "end": "2801880"
  },
  {
    "text": "that I actually get an error because my mutation has some preconditions",
    "start": "2801880",
    "end": "2809440"
  },
  {
    "text": "in here for instance it throws if there's no user assigned in",
    "start": "2809440",
    "end": "2814780"
  },
  {
    "text": "it throws a not authenticated exception and it also throws an exception if it",
    "start": "2814780",
    "end": "2820119"
  },
  {
    "text": "doesn't know the asset that I'm trying to add here so these are actually cool errors that I could have in my UI if I",
    "start": "2820119",
    "end": "2827440"
  },
  {
    "text": "could understand them so what we can do in our mutation is telling it what kind of errors are",
    "start": "2827440",
    "end": "2835300"
  },
  {
    "text": "actually relevant to my UI developer so I'm adding here the exceptions that are",
    "start": "2835300",
    "end": "2840819"
  },
  {
    "text": "relevant to my user and suddenly I can refresh this thing",
    "start": "2840819",
    "end": "2847060"
  },
  {
    "text": "I could have a look at my mutations here",
    "start": "2847060",
    "end": "2851880"
  },
  {
    "text": "and then I can see okay it has errors but it only not only tells me what",
    "start": "2852700",
    "end": "2857859"
  },
  {
    "text": "errors that it has errors but also what errors this method or this mutation can",
    "start": "2857859",
    "end": "2864579"
  },
  {
    "text": "do and then I can actually write awesome graphql queries where say okay I wanna",
    "start": "2864579",
    "end": "2871839"
  },
  {
    "text": "actually select the errors here if this is an unknown asset error I want",
    "start": "2871839",
    "end": "2879460"
  },
  {
    "text": "to know what the invalid symbols are that I provided or if it's the wrong user then don't",
    "start": "2879460",
    "end": "2887020"
  },
  {
    "text": "tell me what user I should use just say it's an error but maybe I wanted to have a code here",
    "start": "2887020",
    "end": "2896079"
  },
  {
    "text": "that tells me what kind of error it was in any case so I can run that here and",
    "start": "2896079",
    "end": "2901900"
  },
  {
    "text": "in this instance I'm not authenticated so let's quickly sign in",
    "start": "2901900",
    "end": "2909960"
  },
  {
    "text": "and in my bank and any anything works can say whatever",
    "start": "2910119",
    "end": "2917680"
  },
  {
    "text": "and actually let's do the second error here and I can refresh that",
    "start": "2917680",
    "end": "2923859"
  },
  {
    "text": "and then this case I don't get what I want actually",
    "start": "2923859",
    "end": "2929640"
  },
  {
    "text": "okay my demo crashed I didn't try that out",
    "start": "2929800",
    "end": "2934680"
  },
  {
    "text": "it",
    "start": "2936099",
    "end": "2938400"
  },
  {
    "text": "okay there's something wrong with my DB setup okay let's move on because I have",
    "start": "2941319",
    "end": "2946420"
  },
  {
    "text": "more but actually it would have select if it",
    "start": "2946420",
    "end": "2952060"
  },
  {
    "text": "worked with the database there it would have selected that it's worth the wrong asset here which have shown you that the",
    "start": "2952060",
    "end": "2959859"
  },
  {
    "text": "symbol btc2 is actually wrong okay let's move on because I have more to show",
    "start": "2959859",
    "end": "2966520"
  },
  {
    "text": "let's have a look at real-time data and that is actually where grapher really also shines and gives you all this",
    "start": "2966520",
    "end": "2973960"
  },
  {
    "text": "interactivity this reactivity in your uis so subscriptions is not about a similar",
    "start": "2973960",
    "end": "2981339"
  },
  {
    "text": "a single request response it's about streams it's about streams of events",
    "start": "2981339",
    "end": "2988960"
  },
  {
    "text": "and also about each event or when we call when we talk about an event stream will cause",
    "start": "2988960",
    "end": "2995619"
  },
  {
    "text": "actually an execution of our graphql execution engine and then these events",
    "start": "2995619",
    "end": "3000720"
  },
  {
    "text": "are actually translated into response data sounds complex but let me show you how",
    "start": "3000720",
    "end": "3009000"
  },
  {
    "text": "to build the simplest subscription you can do",
    "start": "3009000",
    "end": "3014280"
  },
  {
    "text": "let's get rid of that guy five",
    "start": "3014280",
    "end": "3019578"
  },
  {
    "text": "let's go okay so again this is our service the same service I just a couple of",
    "start": "3020160",
    "end": "3026220"
  },
  {
    "text": "iterations further and we're gonna add now real-timeness to",
    "start": "3026220",
    "end": "3032819"
  },
  {
    "text": "it so what I have here is again the types and let me first create a subscription",
    "start": "3032819",
    "end": "3041220"
  },
  {
    "text": "that is a bit artificial just to see how it works so we can have a simple ping",
    "start": "3041220",
    "end": "3047220"
  },
  {
    "text": "pong here so I'm gonna add here a little mutation that triggers something",
    "start": "3047220",
    "end": "3054540"
  },
  {
    "text": "let's call it fumotation and add to it a little method called just send message",
    "start": "3054540",
    "end": "3061079"
  },
  {
    "text": "and what we do here is essentially we can invoke that provide a message and",
    "start": "3061079",
    "end": "3067619"
  },
  {
    "text": "then we have a pub sub abstraction in hot chocolate called itopic Event Center",
    "start": "3067619",
    "end": "3072800"
  },
  {
    "text": "and we support actually a ton of Pub Subs like you can have rabbitmq or nuts",
    "start": "3072800",
    "end": "3079440"
  },
  {
    "text": "or redis or what have you behind that abstraction and it's just a nougat package that you have to add and then it",
    "start": "3079440",
    "end": "3085619"
  },
  {
    "text": "works like in this instance I added here an in-memory pops up so not for",
    "start": "3085619",
    "end": "3091800"
  },
  {
    "text": "production but for our demo okay let me go back",
    "start": "3091800",
    "end": "3097079"
  },
  {
    "text": "okay so I'm sending now here events this message to a topic called message into",
    "start": "3097079",
    "end": "3104520"
  },
  {
    "text": "my event system and on the subscription side I can now introduce an unreceived",
    "start": "3104520",
    "end": "3112440"
  },
  {
    "text": "message and that is the the thing that I could subscribe to from the client side",
    "start": "3112440",
    "end": "3118260"
  },
  {
    "text": "I told you my subscription resolver that it's subscribed to the topic event",
    "start": "3118260",
    "end": "3123540"
  },
  {
    "text": "stream and I get here the event message and then I'm in this case I just return",
    "start": "3123540",
    "end": "3128760"
  },
  {
    "text": "it let's just run that well it's already should already run",
    "start": "3128760",
    "end": "3135599"
  },
  {
    "text": "and let me go up here so we can now write here the mutation",
    "start": "3135599",
    "end": "3142200"
  },
  {
    "text": "and in this case let's refresh my schema and says",
    "start": "3142200",
    "end": "3149180"
  },
  {
    "text": "come on no that's wrong shouldn't be wrong",
    "start": "3150839",
    "end": "3156839"
  },
  {
    "text": "is it wrong again",
    "start": "3156839",
    "end": "3163338"
  },
  {
    "text": "refresh okay let me quickly fix that",
    "start": "3165420",
    "end": "3173540"
  },
  {
    "text": "[Music] um let's see program hyper Services because at the moment I",
    "start": "3175800",
    "end": "3183300"
  },
  {
    "text": "cannot see what I'm doing because we are having a lot of events in my back end here so what I'm going to do is to",
    "start": "3183300",
    "end": "3189839"
  },
  {
    "text": "switch off this event processor here and then we can just watch that again",
    "start": "3189839",
    "end": "3197300"
  },
  {
    "text": "and refresh that seems all right",
    "start": "3198240",
    "end": "3205880"
  },
  {
    "text": "yeah and available schema but it should actually tell me why",
    "start": "3208380",
    "end": "3213740"
  },
  {
    "text": "okay so this would work let's but I have a hosted version to show you just how",
    "start": "3216059",
    "end": "3222780"
  },
  {
    "text": "this would work so this actually everything I have to do let me show you one more thing here and then I show you",
    "start": "3222780",
    "end": "3229440"
  },
  {
    "text": "the the thing I have as a backup I'm getting rid of that it's always a",
    "start": "3229440",
    "end": "3235380"
  },
  {
    "text": "real time a demo that I mess up but okay so the fact is the second thing here is",
    "start": "3235380",
    "end": "3242940"
  },
  {
    "text": "and let me go to my slide quickly this is the spec components that we have in a",
    "start": "3242940",
    "end": "3248880"
  },
  {
    "text": "subscription so we have an event stream in the response stream in our application we have these price updates",
    "start": "3248880",
    "end": "3254460"
  },
  {
    "text": "so I'm not sending in the mutation actually I want to subscribe to a real live back end somehow right so we have",
    "start": "3254460",
    "end": "3262020"
  },
  {
    "text": "two components here actually and that is the on receive uh no not the",
    "start": "3262020",
    "end": "3268140"
  },
  {
    "text": "on receiversity on price change resolver that I have this guy here and it will",
    "start": "3268140",
    "end": "3274140"
  },
  {
    "text": "get a trigger for symbols that have a price update and then use the data loader here to load that price update",
    "start": "3274140",
    "end": "3282240"
  },
  {
    "text": "and then there is a second component and that's our event stream so I can create here an event stream and an event stream",
    "start": "3282240",
    "end": "3289200"
  },
  {
    "text": "for us it's just an is enumerable that yields events back and I can actually",
    "start": "3289200",
    "end": "3294900"
  },
  {
    "text": "tell my subscription here to subscribe with",
    "start": "3294900",
    "end": "3300240"
  },
  {
    "text": "this stream so I'll use this stream method whenever I use a subscribe to create a stream and then listen to it",
    "start": "3300240",
    "end": "3307200"
  },
  {
    "text": "and behind that stream could be anything that you have in your infrastructure you",
    "start": "3307200",
    "end": "3312240"
  },
  {
    "text": "don't even have to use our abstraction here",
    "start": "3312240",
    "end": "3317640"
  },
  {
    "text": "let's just quickly see if that works otherwise I use the thing I have",
    "start": "3317640",
    "end": "3323819"
  },
  {
    "text": "prepared",
    "start": "3323819",
    "end": "3326359"
  },
  {
    "text": "try so would be cooler create new document",
    "start": "3328920",
    "end": "3335760"
  },
  {
    "text": "oh yeah okay so some something in my client state was messed up",
    "start": "3335760",
    "end": "3341460"
  },
  {
    "text": "seems to be so it works so I'm doing here a subscription",
    "start": "3341460",
    "end": "3346800"
  },
  {
    "text": "and in this case I'm using the on price change event here and I'm subscribing here to the symbol",
    "start": "3346800",
    "end": "3354000"
  },
  {
    "text": "and then to the latest price that we get and",
    "start": "3354000",
    "end": "3359520"
  },
  {
    "text": "and now I have to change one more thing here because I disabled our real-time events",
    "start": "3359520",
    "end": "3366020"
  },
  {
    "text": "go in here fix that",
    "start": "3366059",
    "end": "3370040"
  },
  {
    "text": "let's hope it okay it comes up you can see all the events actually happening here and we",
    "start": "3371099",
    "end": "3376800"
  },
  {
    "text": "subscribe to it and you can see real time my query coming in and the coolest",
    "start": "3376800",
    "end": "3382079"
  },
  {
    "text": "thing here is from a client perspective the user that uses your graph per endpoint it's just a change of keyword",
    "start": "3382079",
    "end": "3389940"
  },
  {
    "text": "and this also this is at a moment running",
    "start": "3389940",
    "end": "3395460"
  },
  {
    "text": "over sockets but I also could say because we Implement a lot of these Graphics I also could say I wanted over",
    "start": "3395460",
    "end": "3402240"
  },
  {
    "text": "essentially in HTTP post call and then it works the same you can see",
    "start": "3402240",
    "end": "3407400"
  },
  {
    "text": "new stuff coming in okay so there is one more thing",
    "start": "3407400",
    "end": "3415140"
  },
  {
    "text": "and let me go for that this guy here let's refresh that",
    "start": "3415140",
    "end": "3421319"
  },
  {
    "text": "go away go back to slides",
    "start": "3421319",
    "end": "3425960"
  },
  {
    "text": "oh I cannot skip the animation so we have to Wade through it",
    "start": "3427260",
    "end": "3432900"
  },
  {
    "text": "okay so there's one more aspect and that is a feature we are in the spec working group",
    "start": "3432900",
    "end": "3439500"
  },
  {
    "text": "are having the most focus at the moment on it's called deferent stream and this",
    "start": "3439500",
    "end": "3444839"
  },
  {
    "text": "feature allows the consumer of the API to Mark sections of the graph that we",
    "start": "3444839",
    "end": "3451260"
  },
  {
    "text": "want to defer or de-prioritize let's say for instance the rest data that we get",
    "start": "3451260",
    "end": "3456900"
  },
  {
    "text": "from rest is actually slow it is slow so this piece of query we know is slow",
    "start": "3456900",
    "end": "3465839"
  },
  {
    "text": "how can we deal with that so with different stream we suddenly have a tool",
    "start": "3465839",
    "end": "3472260"
  },
  {
    "text": "to say this section deferred I need the name immediately and then sent me the rest whenever you're you're finished",
    "start": "3472260",
    "end": "3480960"
  },
  {
    "text": "we can do that with defer or we can also stream lists",
    "start": "3480960",
    "end": "3486619"
  },
  {
    "text": "and what we are doing in the execution engine is essentially breaking up the request graph into two waitables",
    "start": "3487079",
    "end": "3494520"
  },
  {
    "text": "promises we first focus on the initial payloads and then sent you the",
    "start": "3494520",
    "end": "3499559"
  },
  {
    "text": "subsequent payloads let me show you how that actually works",
    "start": "3499559",
    "end": "3505319"
  },
  {
    "text": "and the use case for instance if you if you are here on the main page then it's all",
    "start": "3505319",
    "end": "3514260"
  },
  {
    "text": "the data that we fetch here in one go but look at this I can scroll to the side there are more graphs",
    "start": "3514260",
    "end": "3520920"
  },
  {
    "text": "when I initially open this page the user doesn't see this and the moment he sees the content and",
    "start": "3520920",
    "end": "3529079"
  },
  {
    "text": "swipes to the side it will already be there but it doesn't have to be there from from the first millisecond on so",
    "start": "3529079",
    "end": "3536700"
  },
  {
    "text": "what we can do is change our request here this my request",
    "start": "3536700",
    "end": "3544440"
  },
  {
    "text": "at the moment takes around a second you can see or two seconds on this Wi-Fi",
    "start": "3544440",
    "end": "3550079"
  },
  {
    "text": "but now I can optimize I could say actually stream this I need the first",
    "start": "3550079",
    "end": "3555660"
  },
  {
    "text": "item immediately and also this section I know it's quite",
    "start": "3555660",
    "end": "3560700"
  },
  {
    "text": "expensive so defer that",
    "start": "3560700",
    "end": "3564200"
  },
  {
    "text": "and then run that and you can see 210 milliseconds for the First Data to",
    "start": "3566880",
    "end": "3572040"
  },
  {
    "text": "arrive so I can render my page with all the data I need and what is happening here is that we are patching data so I",
    "start": "3572040",
    "end": "3580500"
  },
  {
    "text": "get the Bitcoin price here first and it's actually 10 patches and then at",
    "start": "3580500",
    "end": "3585960"
  },
  {
    "text": "some point I get graph data here and my client patches that and it it looks as",
    "start": "3585960",
    "end": "3591299"
  },
  {
    "text": "if the site is super speedy and uh it's super fast actually it still takes two",
    "start": "3591299",
    "end": "3597780"
  },
  {
    "text": "seconds for all the data to arrive but we now spreaded it out and can already render",
    "start": "3597780",
    "end": "3604760"
  },
  {
    "text": "um okay let me get you then so there was uh a",
    "start": "3605460",
    "end": "3613799"
  },
  {
    "text": "nice bachelor project at the I cannot even read it but at the University in Sweden that looked at the speed of",
    "start": "3613799",
    "end": "3620460"
  },
  {
    "text": "graphql and rest and the graph implementation as a whole in the.net ecosystem they found out okay I spare",
    "start": "3620460",
    "end": "3627839"
  },
  {
    "text": "you the abstract that hot chocolate is not only the fastest graphql server in",
    "start": "3627839",
    "end": "3633660"
  },
  {
    "text": "the.net ecosystem but it's also faster than a rest API so",
    "start": "3633660",
    "end": "3639000"
  },
  {
    "text": "how can that be because with graphql when you specify your graphical request you create the",
    "start": "3639000",
    "end": "3645359"
  },
  {
    "text": "most optimized graph to uh the most optimized rest service ever because you",
    "start": "3645359",
    "end": "3651900"
  },
  {
    "text": "saw when I showed you the structure actually graphql request is like a method so you create like stored",
    "start": "3651900",
    "end": "3657900"
  },
  {
    "text": "procedures for for a rest service you could say and at the end when you deploy",
    "start": "3657900",
    "end": "3663059"
  },
  {
    "text": "your graph per server you have the most optimized rest communication because",
    "start": "3663059",
    "end": "3668940"
  },
  {
    "text": "it's just everything HTTP post even the stream streaming data it's just",
    "start": "3668940",
    "end": "3675599"
  },
  {
    "text": "simple HTTP post request that works over HTTP 1.1 so you get the most optimized",
    "start": "3675599",
    "end": "3681420"
  },
  {
    "text": "API ever that's why we can compete with all the other platforms",
    "start": "3681420",
    "end": "3687720"
  },
  {
    "text": "the second thing here so this is actually this work was done on hot chocolate 12. it took 81 lines of code",
    "start": "3687720",
    "end": "3696000"
  },
  {
    "text": "to X to create the example 79 lines of code with the minimal API with hot",
    "start": "3696000",
    "end": "3702000"
  },
  {
    "text": "chocolate 13 the new version you need actually four nines less now so we the",
    "start": "3702000",
    "end": "3707400"
  },
  {
    "text": "code that you have to write is even less than with a minimal API now",
    "start": "3707400",
    "end": "3712579"
  },
  {
    "text": "so conclusion so graphql is evolving rapidly there are",
    "start": "3713220",
    "end": "3718740"
  },
  {
    "text": "new features like different stream there are other things coming out and it gives",
    "start": "3718740",
    "end": "3724079"
  },
  {
    "text": "you all the tools to finally get rid of this this endless Cycles between front",
    "start": "3724079",
    "end": "3729720"
  },
  {
    "text": "and end back-end Engineers so you can suddenly move on both on both sides",
    "start": "3729720",
    "end": "3736380"
  },
  {
    "text": "without stopping the other um and graphql is like if you look at",
    "start": "3736380",
    "end": "3744180"
  },
  {
    "text": "other platforms Java JavaScript or it's rapidly evolving and has rapid",
    "start": "3744180",
    "end": "3750000"
  },
  {
    "text": "adoption Microsoft will show I think it built a lot of graphql products so",
    "start": "3750000",
    "end": "3756540"
  },
  {
    "text": "there's a lot coming also now from the Microsoft side and if you look like tools like team",
    "start": "3756540",
    "end": "3762720"
  },
  {
    "text": "Source or they are running on graphql GitHub is running on graphql Netflix New",
    "start": "3762720",
    "end": "3767760"
  },
  {
    "text": "York Times Airbnb all graphql even Twitter is running on graphql so if you",
    "start": "3767760",
    "end": "3773520"
  },
  {
    "text": "look at the biggest companies they are all running on this technology today",
    "start": "3773520",
    "end": "3779819"
  },
  {
    "text": "um LinkedIn is by the way also running on graphql okay with this all I showed you is open",
    "start": "3779819",
    "end": "3787799"
  },
  {
    "text": "source it's free so you can get to our GitHub representation repository Focus",
    "start": "3787799",
    "end": "3795000"
  },
  {
    "text": "Fork it play it and play with it um connect with us and",
    "start": "3795000",
    "end": "3801540"
  },
  {
    "text": "start us if you want and for that I'm done if anybody has",
    "start": "3801540",
    "end": "3806760"
  },
  {
    "text": "questions I'm open to that [Applause]",
    "start": "3806760",
    "end": "3820660"
  },
  {
    "text": "uh same as was rest it's it's HTTP post so it's the same",
    "start": "3824940",
    "end": "3830640"
  },
  {
    "text": "Authentication authorization depends but it's the same that you do with rest you have to other",
    "start": "3830640",
    "end": "3837660"
  },
  {
    "text": "you have the new application layer or you annotate it we have the same",
    "start": "3837660",
    "end": "3842940"
  },
  {
    "text": "annotations that you would do in rest you can just put them on the graph where specific stuff and then we also use the",
    "start": "3842940",
    "end": "3848579"
  },
  {
    "text": "same policy engine by default but we also support Opa the open policy agent",
    "start": "3848579",
    "end": "3854099"
  },
  {
    "text": "so if you want to use a different policy system you can also plug it in",
    "start": "3854099",
    "end": "3861500"
  },
  {
    "text": "application Factor do we have any",
    "start": "3869180",
    "end": "3874280"
  },
  {
    "text": "yes so we have like a testing framework we also have like a client that's called",
    "start": "3876839",
    "end": "3883020"
  },
  {
    "text": "strawberryshake4.net and like if you're if if you're looking for the JavaScript ecosystem that tons",
    "start": "3883020",
    "end": "3890579"
  },
  {
    "text": "of clients but yeah we also have a client called strawberry shake and there",
    "start": "3890579",
    "end": "3895680"
  },
  {
    "text": "you write these fragments or write these queries and we compile you the client to that",
    "start": "3895680",
    "end": "3902240"
  }
]