[
  {
    "text": "all right hello everyone welcome to the session running service at the edge thank you all for being here especially",
    "start": "1220",
    "end": "8610"
  },
  {
    "text": "considering that this perhaps the last session of the day so thank you again my",
    "start": "8610",
    "end": "13710"
  },
  {
    "text": "name is Jorge John I'm a product manager with AWS lambda the edge team I'm really",
    "start": "13710",
    "end": "19230"
  },
  {
    "text": "excited to have Tyler Foster from st. Ian who'll be sharing a Indians use case",
    "start": "19230",
    "end": "24269"
  },
  {
    "text": "for lambda at the edge and their journey [Music] before we get started kick show of hands how many of you are",
    "start": "24269",
    "end": "30779"
  },
  {
    "text": "using CloudFront today I would say probably 50% of the room",
    "start": "30779",
    "end": "35910"
  },
  {
    "text": "how about lambda at the edge okay how many of you have heard of lambda is not",
    "start": "35910",
    "end": "41430"
  },
  {
    "text": "really using it okay 50 percent so hopefully today by the end of the session you would have a good",
    "start": "41430",
    "end": "47430"
  },
  {
    "text": "understanding of what lambda at the edge is so but first we'll take a look at what this is and then we'll do a deep",
    "start": "47430",
    "end": "57930"
  },
  {
    "text": "dive into lambda at the edge we'll take a look at the programming model what are the event triggers that are supported we",
    "start": "57930",
    "end": "64680"
  },
  {
    "text": "will take a look at multiple custom use case it's used for which customers are using CloudFront and lambda at the edge",
    "start": "64680",
    "end": "71130"
  },
  {
    "text": "and then we love Tyler share Sen Tian's journey to cloud friend he's gonna go",
    "start": "71130",
    "end": "76590"
  },
  {
    "text": "deep into architecture gonna share some of the best practices and lessons they learned as they migrated so between",
    "start": "76590",
    "end": "84689"
  },
  {
    "text": "Tyler and I we do have only an hour so there's only so much we can cover but there are many interesting lambda at the",
    "start": "84689",
    "end": "91560"
  },
  {
    "text": "edge sessions happening throughout the week so if you're interested please do make a note of these and also we have a",
    "start": "91560",
    "end": "97770"
  },
  {
    "text": "lot of content and we want to make sure we get to get through all of that so I",
    "start": "97770",
    "end": "103740"
  },
  {
    "text": "would request to hold off all questions at the end both Tyler and I myself will be hanging out here if you want to come",
    "start": "103740",
    "end": "109920"
  },
  {
    "text": "forward and ask any questions you know you'll be sharing our contact details at",
    "start": "109920",
    "end": "115619"
  },
  {
    "text": "the under last slide so if you want to reach reach out to us offline you can do that as well so what is server less",
    "start": "115619",
    "end": "123380"
  },
  {
    "text": "service is really about building and running applications without the need to provision or configure servers so now",
    "start": "123380",
    "end": "130649"
  },
  {
    "text": "your application developers can really focus on the lying or focus on the business logic and",
    "start": "130649",
    "end": "136390"
  },
  {
    "text": "not worry not worry so much about the iteration or management of servers or runtimes now AWS pioneered in this in",
    "start": "136390",
    "end": "145660"
  },
  {
    "text": "this field with AWS lambda that was launched a few years ago now let's take a look at some of the benefits so the no",
    "start": "145660",
    "end": "151030"
  },
  {
    "text": "server super efficient or configure I think it's it's pretty straightforward the another benefit of using lambda is",
    "start": "151030",
    "end": "157030"
  },
  {
    "text": "the continuous scaling so now you don't have to worry about provisioning or configuring servers right this is kind",
    "start": "157030",
    "end": "163870"
  },
  {
    "text": "of abstracted away from you so questions like hey do I have enough VMS for the next six months",
    "start": "163870",
    "end": "169150"
  },
  {
    "text": "am i over provost and am i under provisioned all that is kind of abstracted away from you because lambda",
    "start": "169150",
    "end": "174850"
  },
  {
    "text": "can scale automatically in response to requests you only pay for the resources",
    "start": "174850",
    "end": "180550"
  },
  {
    "text": "and compute time you use so you're not really paying for the servers that are cool or idle and finally lambda takes",
    "start": "180550",
    "end": "188950"
  },
  {
    "text": "care of the the complex challenge of maintaining a highly available fault",
    "start": "188950",
    "end": "194380"
  },
  {
    "text": "tolerant distributed systems on your behalf and to get to the core of lambda",
    "start": "194380",
    "end": "199440"
  },
  {
    "text": "at the crux of it is a lambda function so function is essentially the mechanism",
    "start": "199440",
    "end": "205000"
  },
  {
    "text": "by which you upload your code that you want lambdas also run we support various",
    "start": "205000",
    "end": "210300"
  },
  {
    "text": "programming languages and from within a function you can pretty much do anything you want you can call other services you",
    "start": "210300",
    "end": "216970"
  },
  {
    "text": "can call data stores so it's a pretty flexible platform there are some limits on how long one particular function can",
    "start": "216970",
    "end": "223360"
  },
  {
    "text": "run but you can always have hundreds of thousands hundreds to thousands of functions running perrolli at a time and",
    "start": "223360",
    "end": "229410"
  },
  {
    "text": "one other thing to note here is that lambda is an event-driven compute model",
    "start": "229410",
    "end": "234730"
  },
  {
    "text": "meaning there needs to be an event which is going to be triggering your function so as you write your function you need to specify what is the event or trigger",
    "start": "234730",
    "end": "241810"
  },
  {
    "text": "that's gonna call my lambda functions today we support multiple event sources",
    "start": "241810",
    "end": "250030"
  },
  {
    "text": "so these are this is not the full set this is a subset of even source that you",
    "start": "250030",
    "end": "255820"
  },
  {
    "text": "can set up when you write a lambda function and what we are really gonna be focusing today from a lambda ADH",
    "start": "255820",
    "end": "262030"
  },
  {
    "text": "perspective is cloud friend so cloud point of the CDN a content delivery network looks like a lot of you are using it today when you",
    "start": "262030",
    "end": "270640"
  },
  {
    "text": "write your lambda functions with the cloud friend as a trigger that is what really lambda at the edges now there are",
    "start": "270640",
    "end": "276220"
  },
  {
    "text": "some nuances some differences but we get to that in a bit so all the benefits we",
    "start": "276220",
    "end": "282460"
  },
  {
    "text": "talked about with lambda is also available with lambda at the edge so no",
    "start": "282460",
    "end": "291040"
  },
  {
    "text": "service to provision the automatic scaling don't pay for our idle servers and building available and fault",
    "start": "291040",
    "end": "297430"
  },
  {
    "text": "tolerance is also available with lambda at the edge but the key difference here is that in addition to that lambda at",
    "start": "297430",
    "end": "304240"
  },
  {
    "text": "the edge replicates your function now what do I mean by that so you would",
    "start": "304240",
    "end": "309430"
  },
  {
    "text": "write a lambda at the edge function the same way you write a lambda functions today so you have the same set of tools",
    "start": "309430",
    "end": "315010"
  },
  {
    "text": "and capabilities but one thing you need to note here is that lambda at the edge",
    "start": "315010",
    "end": "320470"
  },
  {
    "text": "today suppose not Virginia as the region so when you're logging into lambda console select North Virginia but then",
    "start": "320470",
    "end": "328060"
  },
  {
    "text": "all the experience the developer experience the same till the point when you publish the function now the",
    "start": "328060",
    "end": "333580"
  },
  {
    "text": "standard lambda your functions just run in that particular a Bleus region but with lambda at the edge your functions",
    "start": "333580",
    "end": "340090"
  },
  {
    "text": "are now replicated to multiple locations worldwide now this is not the full set of locations is just more for",
    "start": "340090",
    "end": "346290"
  },
  {
    "text": "representation so you might say okay this is pretty cool but as a customer",
    "start": "346290",
    "end": "351850"
  },
  {
    "text": "what is the value to you now let's explain that let me take a simple example here so assume you have a simple",
    "start": "351850",
    "end": "357700"
  },
  {
    "text": "web application typically any web application or website would have some sort of compute so the compute could be",
    "start": "357700",
    "end": "363250"
  },
  {
    "text": "a web server in ec2 instance it could be containers it could be functions you",
    "start": "363250",
    "end": "368350"
  },
  {
    "text": "need to have some sort of database whether sequel or no sequel and storage whether it's file block object and you",
    "start": "368350",
    "end": "375550"
  },
  {
    "text": "could always decide to serve your application directly from the origin and",
    "start": "375550",
    "end": "380770"
  },
  {
    "text": "that might work fine if you have a couple of users but as your application grows as you have users coming in from",
    "start": "380770",
    "end": "387580"
  },
  {
    "text": "different locations the worldwide especially if let's say user coming in from Australia when you have your origin",
    "start": "387580",
    "end": "392590"
  },
  {
    "text": "in US the experience he or she might get it would be quite different from a user who's co-located or it's close to the",
    "start": "392590",
    "end": "399730"
  },
  {
    "text": "origin now an obvious architectural improvement you can make us to introduce CDN so for",
    "start": "399730",
    "end": "405129"
  },
  {
    "text": "example you could introduce cloud friend and what clouds and really does is move some of the storage or move some of the",
    "start": "405129",
    "end": "411789"
  },
  {
    "text": "contents of your web application closer to the viewers so there the content is",
    "start": "411789",
    "end": "417369"
  },
  {
    "text": "now distributed to multiple locations worldwide so when the same user who's in Australia tries to access your",
    "start": "417369",
    "end": "424289"
  },
  {
    "text": "application now that particular user can be served from a location closer to the user as opposed to traveling all the way",
    "start": "424289",
    "end": "431679"
  },
  {
    "text": "back to the origin that's pretty good for content that that can be cached but",
    "start": "431679",
    "end": "436959"
  },
  {
    "text": "what about requests that would require some sort of compute or dynamic content now in this world your user who's trying",
    "start": "436959",
    "end": "444249"
  },
  {
    "text": "to access that particular dynamic content the request still has to travel all the way back to the origin which is",
    "start": "444249",
    "end": "449289"
  },
  {
    "text": "not that great now what lambda th can do is not only move your storage but you can now also",
    "start": "449289",
    "end": "455860"
  },
  {
    "text": "move your compute some of your compute closer to the viewers so now for the",
    "start": "455860",
    "end": "461439"
  },
  {
    "text": "same particular user who's trying to access that particular dynamic content which requires some sort of compute you",
    "start": "461439",
    "end": "466479"
  },
  {
    "text": "can pretty much fulfill that request directly from a location closer to the viewer from a user experience standpoint",
    "start": "466479",
    "end": "471729"
  },
  {
    "text": "that's pretty great because like the page load times the latency to serve those requests can be dramatically improved so having covered some of the",
    "start": "471729",
    "end": "482169"
  },
  {
    "text": "what lambdas or what lambda at the edges and why you want to consider using it",
    "start": "482169",
    "end": "487360"
  },
  {
    "text": "let's take a look at the the programming model here but before we get into that",
    "start": "487360",
    "end": "493079"
  },
  {
    "text": "let me just cover some of the basics so let's say you are you've decided to",
    "start": "493079",
    "end": "498129"
  },
  {
    "text": "serve your web application or a website through a CDN like CloudFront so on the",
    "start": "498129",
    "end": "503139"
  },
  {
    "text": "right side you have your origin which could be in AWS it could be outside AWS",
    "start": "503139",
    "end": "508239"
  },
  {
    "text": "cloud fan is agnostic to where the origin runs and then you have your viewers for simplicity I have just one",
    "start": "508239",
    "end": "513669"
  },
  {
    "text": "viewer but in reality what I have hundreds to 7,000 new viewers who could be coming in from anywhere in the globe",
    "start": "513669",
    "end": "518948"
  },
  {
    "text": "and then you have clouds and location again this is what I'm just showing one location today Klopfer has 150 locations",
    "start": "518949",
    "end": "525459"
  },
  {
    "text": "worldwide and that number keeps increasing so when the viewer tries to access your content what happens is",
    "start": "525459",
    "end": "531130"
  },
  {
    "text": "CloudFront will automatically route the request to the elfin location that's closest to the",
    "start": "531130",
    "end": "536200"
  },
  {
    "text": "viewer from a latency standpoint and then the first time the request arrives it's gonna be the object is not gonna be",
    "start": "536200",
    "end": "542800"
  },
  {
    "text": "in CloudFront cache coffin will automatically fetch the content from the origin and then so cache it and then",
    "start": "542800",
    "end": "548980"
  },
  {
    "text": "serve it back to your in viewer so this is a cache miss scenario because",
    "start": "548980",
    "end": "554140"
  },
  {
    "text": "CloudFront had to fetch the content from the origin and any subsequent requests coming in from the same user or from",
    "start": "554140",
    "end": "560560"
  },
  {
    "text": "another user who's in the same geographic area most likely we can serve it directly from the cache CloudFront",
    "start": "560560",
    "end": "566829"
  },
  {
    "text": "would not need to go back to the origin because the object is already in the coffin cache and is what is a cache hit scenario so we covered both cache miss",
    "start": "566829",
    "end": "574029"
  },
  {
    "text": "and cache it now let's take a look at the CloudFront events in the context of cash hidden cache miss so if you",
    "start": "574029",
    "end": "579940"
  },
  {
    "text": "remember earlier I mentioned that lambda is an event driven compute so for your",
    "start": "579940",
    "end": "585010"
  },
  {
    "text": "function or your code to be executed there needs to be a event setup so before lamda at the edge the events are",
    "start": "585010",
    "end": "590920"
  },
  {
    "text": "CloudFront events and there are four points in the request response flow where you can run a custom logical",
    "start": "590920",
    "end": "596980"
  },
  {
    "text": "compute and depending on the use case you might choose one or more of these the first point is viewer requests the",
    "start": "596980",
    "end": "604029"
  },
  {
    "text": "viewer requests is the event that is before is it's in the request path but it's before we do a cloud front cache",
    "start": "604029",
    "end": "610449"
  },
  {
    "text": "look up I'll cover some of the use cases when you would want to use a viewer request so this isn't a request path and",
    "start": "610449",
    "end": "615880"
  },
  {
    "text": "this happens right before a cache look up is done the next one is origin requests this is again in the request",
    "start": "615880",
    "end": "622390"
  },
  {
    "text": "path but let's say you want to customize the request or change the request before it travels to the origin if you want to",
    "start": "622390",
    "end": "628300"
  },
  {
    "text": "do that you would do it and in the origin request you went then you have origin response now this isn't the",
    "start": "628300",
    "end": "634660"
  },
  {
    "text": "response path so the origin is serving a response and if you want to customize it further before you cash it in cloud",
    "start": "634660",
    "end": "641920"
  },
  {
    "text": "phone you leverage origin response and the last one here is via respond so this is the last point before we send a",
    "start": "641920",
    "end": "648670"
  },
  {
    "text": "request response back to the viewer one thing to note here is that the origin",
    "start": "648670",
    "end": "653860"
  },
  {
    "text": "request and origin response would not be triggered in the cache hit scenario if",
    "start": "653860",
    "end": "658990"
  },
  {
    "text": "you remember cache it means we are serving the response directly from serving the object directly from the",
    "start": "658990",
    "end": "664270"
  },
  {
    "text": "cache so the origin request and origin response would not be triggered in the case cache miss all the for trigger points",
    "start": "664270",
    "end": "670180"
  },
  {
    "text": "could be potentially called now I'm gonna be referring to these for trigger",
    "start": "670180",
    "end": "676450"
  },
  {
    "text": "points quite a bit in the coming slide so please try to take a mental picture if you can so there are two requests in",
    "start": "676450",
    "end": "681940"
  },
  {
    "text": "the event in the request path the viewer requests an origin request and two in the response path which is the origin response and your response having looked",
    "start": "681940",
    "end": "691899"
  },
  {
    "text": "at the event triggers let's take a deeper look into lambda function so a lambda function is made up of three core",
    "start": "691899",
    "end": "698860"
  },
  {
    "text": "components the first one is a handler function this is pretty much the entry point your logic or code so you would",
    "start": "698860",
    "end": "705579"
  },
  {
    "text": "specify two lambda servers this is my starting point for your code execution then there is a parameter event object",
    "start": "705579",
    "end": "712750"
  },
  {
    "text": "which is passed to your function now depending on the event source this could contain different values we look at them",
    "start": "712750",
    "end": "719290"
  },
  {
    "text": "I look at them we look at a more concrete example in the next slide and then you have the context object which",
    "start": "719290",
    "end": "725079"
  },
  {
    "text": "is an interface for your code to get information about the underlying runtime",
    "start": "725079",
    "end": "731040"
  },
  {
    "text": "let's take a look at a real example a real lambda at the edge function example",
    "start": "731040",
    "end": "736149"
  },
  {
    "text": "now one thing to note is that lambda at the edge today only supports nodejs runtime Nowlan lambda has been around",
    "start": "736149",
    "end": "742779"
  },
  {
    "text": "for a few years we launched lambda at the edge last year we were still adding more language support but today what we",
    "start": "742779",
    "end": "748209"
  },
  {
    "text": "support is node and then again you have a handler function which is the entry",
    "start": "748209",
    "end": "754360"
  },
  {
    "text": "point you have an event object you have the context and then there's an additional component called callback",
    "start": "754360",
    "end": "760600"
  },
  {
    "text": "callback is a mechanism by which you kind of give an indication or you kind of let lambda th know that you are done",
    "start": "760600",
    "end": "767860"
  },
  {
    "text": "with your code or logic now the event object could contain information about",
    "start": "767860",
    "end": "776680"
  },
  {
    "text": "the request or response depending on what the event trigger is and we'll take a look at that in the next slide",
    "start": "776680",
    "end": "782880"
  },
  {
    "text": "similarly the rest of our if it's on the response event the event object would contain information about the response",
    "start": "782880",
    "end": "789029"
  },
  {
    "text": "then you can define your code or compute that you want to run so you pretty much define that in the in the",
    "start": "789029",
    "end": "795310"
  },
  {
    "text": "in the lambda function and finally you have the callback this is how you're kind of giving indication back to lambda",
    "start": "795310",
    "end": "802660"
  },
  {
    "text": "at the edge that you are done with the processing I know this is difficult to",
    "start": "802660",
    "end": "807910"
  },
  {
    "text": "read but you know we have the full example in our in lambda the edge documentation in CloudFront but the idea",
    "start": "807910",
    "end": "813550"
  },
  {
    "text": "here is that if you look at this you pretty much have access to all HTTP properties in your code so things like",
    "start": "813550",
    "end": "819910"
  },
  {
    "text": "what is the IP address of the end-user who's trying to access my content what is the HTTP method what is a URI",
    "start": "819910",
    "end": "826930"
  },
  {
    "text": "they are trying to access what are the HTTP headers that's coming in from the client the cookies the Curie strings and",
    "start": "826930",
    "end": "833279"
  },
  {
    "text": "also recently we launched the capability to have to give you a capability to long",
    "start": "833279",
    "end": "838810"
  },
  {
    "text": "to access the the actual payload of the body so if you're in viewers making a",
    "start": "838810",
    "end": "844120"
  },
  {
    "text": "put or a post request the actual payload as can also be accessed in your lambda yet function and in addition in addition",
    "start": "844120",
    "end": "850810"
  },
  {
    "text": "to that you also have access to the config object which gives you more information about the the CloudFront",
    "start": "850810",
    "end": "857589"
  },
  {
    "text": "distribution that is actually calling this particular function and similarly if you look at the response event you",
    "start": "857589",
    "end": "863200"
  },
  {
    "text": "have the config object which gives you information about the distribution and you also have a bunch of information",
    "start": "863200",
    "end": "869110"
  },
  {
    "text": "like what are the headers the HTTP response errors the cookies what is the status code that the response the origin",
    "start": "869110",
    "end": "876580"
  },
  {
    "text": "returned back one thing to note here is that in the response event you don't",
    "start": "876580",
    "end": "881620"
  },
  {
    "text": "have access to the response body in the request see when you have access to the the body or payload that's coming in",
    "start": "881620",
    "end": "887020"
  },
  {
    "text": "from and from the end viewer but you don't have access to the origin response directly in the function today all right",
    "start": "887020",
    "end": "897010"
  },
  {
    "text": "so let's take a take a look at a simple example so let's say depending on the",
    "start": "897010",
    "end": "902500"
  },
  {
    "text": "location of your end users of viewers you want to send the user to a more appropriate origin let's say you have",
    "start": "902500",
    "end": "909339"
  },
  {
    "text": "you want all users in what we have here all users in UK to go to a origin that",
    "start": "909339",
    "end": "916900"
  },
  {
    "text": "is kind of designated or bill for customers in UK so what you could do is you could leverage the cloud from viewer",
    "start": "916900",
    "end": "923470"
  },
  {
    "text": "country header which is an HTTP header that cloud makes that provides to you and that would contain information",
    "start": "923470",
    "end": "929110"
  },
  {
    "text": "about the location of the end viewer so you could access the girl front of your",
    "start": "929110",
    "end": "935320"
  },
  {
    "text": "country header in your lambda the edge function you can figure out which country the user isn't and then you can",
    "start": "935320",
    "end": "942430"
  },
  {
    "text": "update the request to now go to a different origin so in this case I'm updating the domain name and the host",
    "start": "942430",
    "end": "948279"
  },
  {
    "text": "error to go to the appropriate origin so",
    "start": "948279",
    "end": "953760"
  },
  {
    "text": "now let's let's take a look at the use cases now lambdas like open programming",
    "start": "953760",
    "end": "962589"
  },
  {
    "text": "platform you can pretty much run any code you want so while I was trying to put the section together I tried to go",
    "start": "962589",
    "end": "967959"
  },
  {
    "text": "back to the different customer conversations I've had over the last year and a half and tried to select a cherry pick a few of them and try to",
    "start": "967959",
    "end": "974680"
  },
  {
    "text": "categorize them into a different different sections here first let's take a look at some of the use cases around",
    "start": "974680",
    "end": "981730"
  },
  {
    "text": "security so we had this customer who was who's in a regulated kind of industry",
    "start": "981730",
    "end": "987279"
  },
  {
    "text": "and they got a bunch of requirements from within their security team asking them to do kind of do a bunch of stuff",
    "start": "987279",
    "end": "994240"
  },
  {
    "text": "and one of them was to implement HSTs and course headers and that should be a",
    "start": "994240",
    "end": "1000510"
  },
  {
    "text": "pretty straightforward thing for a customer to implement in the origin but their challenge was their application is",
    "start": "1000510",
    "end": "1006990"
  },
  {
    "text": "kind of in a maintenance mode it's or it was a legacy and nobody wanted to touch it and it was difficult like they didn't",
    "start": "1006990",
    "end": "1012899"
  },
  {
    "text": "want to kind of do that so what they did was they leveraged a lambda at the edge so their origin their application didn't",
    "start": "1012899",
    "end": "1020339"
  },
  {
    "text": "have to change the origin just responded acid would acid response today but then",
    "start": "1020339",
    "end": "1025740"
  },
  {
    "text": "they had a lambda the H function in the response path in origin response function what it did was it intercepted",
    "start": "1025740",
    "end": "1032490"
  },
  {
    "text": "the response from the origin and inserted the appropriate security headers and then since this happens",
    "start": "1032490",
    "end": "1038579"
  },
  {
    "text": "before the cache the headers and sort of a also cache so that subsequent requests coming in could be served directly from",
    "start": "1038579",
    "end": "1046020"
  },
  {
    "text": "the cache this is an example of how you would do that so here you can see in",
    "start": "1046020",
    "end": "1053910"
  },
  {
    "text": "your lambda the edge function you can access the event object so if you remember the trigger is origin response",
    "start": "1053910",
    "end": "1059070"
  },
  {
    "text": "so the event gives you more information about the response you can access the response headers you",
    "start": "1059070",
    "end": "1065430"
  },
  {
    "text": "can insert a new header with the appropriate value and then generate the response we do have a blog post that was",
    "start": "1065430",
    "end": "1075720"
  },
  {
    "text": "written which walks you through the entire process with step-by-step instructions and some code samples so if",
    "start": "1075720",
    "end": "1084270"
  },
  {
    "text": "you're interested in learning more about it please do take a look at that particular link and all the slides are gonna be available to you shortly so",
    "start": "1084270",
    "end": "1091110"
  },
  {
    "text": "even if you're not able to make a picture take a picture of this is fine another one is secure securing access to",
    "start": "1091110",
    "end": "1099000"
  },
  {
    "text": "the origin so let's say so we had this customer who wanted to distribute with some sort of media and this was a",
    "start": "1099000",
    "end": "1104850"
  },
  {
    "text": "premium paid content so they want to restrict who gets who are the end-users who get access to it my cloud friend",
    "start": "1104850",
    "end": "1110760"
  },
  {
    "text": "today out of the box has capabilities like sign URL and sign cookies that you can use in the front and so the any user",
    "start": "1110760",
    "end": "1116400"
  },
  {
    "text": "who tries to access the cloud front cache you can make sure they have the appropriate permissions and similarly",
    "start": "1116400",
    "end": "1121650"
  },
  {
    "text": "for the the latter part forum the CloudFront cache to the origin there are mechanisms like s3 oai which is origin",
    "start": "1121650",
    "end": "1129420"
  },
  {
    "text": "access identity so if you're using an s3 bucket you can use oai to kind of secure that part of the connection I mean this",
    "start": "1129420",
    "end": "1135570"
  },
  {
    "text": "is on top of HTTPS is essentially ensuring who gets access to the content but if you're using an honest three",
    "start": "1135570",
    "end": "1141240"
  },
  {
    "text": "origin you can use custom header capability of CloudFront to pass a shared secret and kind of use that as a",
    "start": "1141240",
    "end": "1146580"
  },
  {
    "text": "mechanism to kind of validate who gets access to your content now but we also have heard from customers who might be",
    "start": "1146580",
    "end": "1153540"
  },
  {
    "text": "using some sort of custom web service and they want a custom signing mechanisms so in those kind of use case",
    "start": "1153540",
    "end": "1158880"
  },
  {
    "text": "what you can do is leverage a lambda th function again you'll be leveraging origin requests because you want to kind",
    "start": "1158880",
    "end": "1164850"
  },
  {
    "text": "of modify the request just before the request is sent out to the origin and you are lambda the edge function in the",
    "start": "1164850",
    "end": "1171330"
  },
  {
    "text": "origin requests can then sign it appropriately so that when the request lands and in the lands at the web server",
    "start": "1171330",
    "end": "1177480"
  },
  {
    "text": "web server can do the necessary validations there's a blog on this you",
    "start": "1177480",
    "end": "1185070"
  },
  {
    "text": "know with some code examples so feel free to take a look at it if you're interested in learning more on that the",
    "start": "1185070",
    "end": "1193470"
  },
  {
    "text": "cuckoo is so authorization so the idea here is that you have a request coming in and you",
    "start": "1193470",
    "end": "1198570"
  },
  {
    "text": "want to make sure you only allowed the authorized users to access your content",
    "start": "1198570",
    "end": "1203640"
  },
  {
    "text": "what would be the appropriate lambda ADH trigger to use and what you want to go",
    "start": "1203640",
    "end": "1209220"
  },
  {
    "text": "to try I'm sorry via request yes so that's the right",
    "start": "1209220",
    "end": "1214470"
  },
  {
    "text": "point so you would be leveraging viewer requests because viewer requests gets triggered even before the cache hit or",
    "start": "1214470",
    "end": "1219990"
  },
  {
    "text": "cache lookup is done so the idea let's say you're using jwd JSON web tokens as your authorization mechanism and the",
    "start": "1219990",
    "end": "1226530"
  },
  {
    "text": "idea is that when a request comes in you want a lambda th function to be triggered and this lambda th function",
    "start": "1226530",
    "end": "1232500"
  },
  {
    "text": "depending on whether the user is authorized or not will allow the request to continue or not so if it's a valid",
    "start": "1232500",
    "end": "1238980"
  },
  {
    "text": "user you would allow the requesters continue in its path on the other hand if it's not a authorized user you can",
    "start": "1238980",
    "end": "1245460"
  },
  {
    "text": "immediately generate a response from your lambda th function so you could have an access denied or you could",
    "start": "1245460",
    "end": "1250860"
  },
  {
    "text": "redirect the user to a authentication page no interesting thing about this is",
    "start": "1250860",
    "end": "1256020"
  },
  {
    "text": "that you you're kind of moving so if you didn't have lambda the edge you kind of would be doing all this logic in your origin so you're kind of moving logic",
    "start": "1256020",
    "end": "1262950"
  },
  {
    "text": "away from the origin you're offloading work from your origin to distribute it serve less functions that are running in",
    "start": "1262950",
    "end": "1268680"
  },
  {
    "text": "multiple locations so your origin can now be greatly simplified for example if you are getting an attack or that attack",
    "start": "1268680",
    "end": "1274800"
  },
  {
    "text": "traffic is kind of handled in scale by CloudFront and lambda at the edge and your origin is shielded from all these",
    "start": "1274800",
    "end": "1280140"
  },
  {
    "text": "kind of traffic coming in to your tooth or to the origin again there's a block",
    "start": "1280140",
    "end": "1286290"
  },
  {
    "text": "course if you're interested in learning more on that this was actually a pretty popular blog post because it gives you",
    "start": "1286290",
    "end": "1292350"
  },
  {
    "text": "an end-to-end picture it talks about how you can do the authentication also with other aw services like Hoth nido and",
    "start": "1292350",
    "end": "1298020"
  },
  {
    "text": "such you could also have applications where you could really not do stateless",
    "start": "1298020",
    "end": "1305010"
  },
  {
    "text": "authorization meaning that your you need to make a call to an external service or",
    "start": "1305010",
    "end": "1310590"
  },
  {
    "text": "store which has a state again that can be done with lambda at the edge function and that capability is available because",
    "start": "1310590",
    "end": "1317190"
  },
  {
    "text": "your lambda the edge functions can actually make a network call so you can make HTTP call to any external service",
    "start": "1317190",
    "end": "1323820"
  },
  {
    "text": "it doesn't have to be an AWS it could be anywhere and then that external service could give the decision of whether the",
    "start": "1323820",
    "end": "1329190"
  },
  {
    "text": "request should be allowed so if the request is allowed you just allow the request to continue in its path if the request is not allowed you",
    "start": "1329190",
    "end": "1335269"
  },
  {
    "text": "could then so access denied or you can deny access to that particular user so",
    "start": "1335269",
    "end": "1346039"
  },
  {
    "text": "we looked at a bunch of use cases related to security and securing your",
    "start": "1346039",
    "end": "1351740"
  },
  {
    "text": "content let's take a look at what you can do with or how you can customize the content now template rendering is it's a",
    "start": "1351740",
    "end": "1359509"
  },
  {
    "text": "pretty interesting one because in this particular use case you don't even need to have an origin you're pretty much doing all your compute directly in",
    "start": "1359509",
    "end": "1365750"
  },
  {
    "text": "lambda at the edge so the idea here is that let's say you have a template which is probably the same for all users and",
    "start": "1365750",
    "end": "1371419"
  },
  {
    "text": "then you're kind of personalizing into a user with some dynamic content and this dynamic content could be residing in a",
    "start": "1371419",
    "end": "1377539"
  },
  {
    "text": "different location or different service you're trying to map or putting this both the data together and then serving",
    "start": "1377539",
    "end": "1383360"
  },
  {
    "text": "the response to the viewer so let's see how you can do that with lambda d.edge so again you can have an origin request",
    "start": "1383360",
    "end": "1390019"
  },
  {
    "text": "event which could make multiple calls so you can make multiple Network calls to multiple endpoints so you could store",
    "start": "1390019",
    "end": "1396500"
  },
  {
    "text": "your template which is pretty cacheable on an s3 bucket or if you want to",
    "start": "1396500",
    "end": "1401779"
  },
  {
    "text": "optimize it even further you could all actually store your template in another cloud front cache behavior so",
    "start": "1401779",
    "end": "1407450"
  },
  {
    "text": "essentially your lambda function is making a call to buck s3 bucket it gets the template it's called makes a call to",
    "start": "1407450",
    "end": "1413330"
  },
  {
    "text": "dynamodb or some other data store for the dynamic content and then you're putting the data together and you're",
    "start": "1413330",
    "end": "1419029"
  },
  {
    "text": "serving the response directly from the origin request so in this particular scenario you don't really have an an",
    "start": "1419029",
    "end": "1426529"
  },
  {
    "text": "origin you can pretty much use your lambda th function as the as the origin to fulfill the particular request so",
    "start": "1426529",
    "end": "1434899"
  },
  {
    "text": "this is what the code sample would look like now if you notice you have access",
    "start": "1434899",
    "end": "1440000"
  },
  {
    "text": "to the air base SDK you in in the in lambda the edge function also you have",
    "start": "1440000",
    "end": "1446330"
  },
  {
    "text": "you could bring in your own libraries if you would like and you can make a connection to s3 bucket you can make a",
    "start": "1446330",
    "end": "1452509"
  },
  {
    "text": "connection to dynamodb put this data together and serve the response back to the viewers",
    "start": "1452509",
    "end": "1458049"
  },
  {
    "text": "another example is personalization again this falls in the category of origin",
    "start": "1458649",
    "end": "1463970"
  },
  {
    "text": "kind of application or use case so you could have an origin request function which gets triggered and which could",
    "start": "1463970",
    "end": "1470720"
  },
  {
    "text": "then inspect either the some particular header like the axe of language or one",
    "start": "1470720",
    "end": "1475880"
  },
  {
    "text": "of the headers which CloudFront makes available and then you can kind of serve a very personalized version of the site to the user so I believe I have an",
    "start": "1475880",
    "end": "1484310"
  },
  {
    "text": "example here for example this similar to the example I shared before so depending on the country code if they are in UK in",
    "start": "1484310",
    "end": "1491600"
  },
  {
    "text": "that particular the previous example I shared we were generating we were kind of updating the origin",
    "start": "1491600",
    "end": "1497180"
  },
  {
    "text": "which we were sending the request to but here what you're doing is you're generating a redirect response directly",
    "start": "1497180",
    "end": "1503030"
  },
  {
    "text": "from your lambda at the edge function to a more appropriate personalized page for that particular user this again falls in",
    "start": "1503030",
    "end": "1517100"
  },
  {
    "text": "the category of personalizing your site for the user so the idea here is that",
    "start": "1517100",
    "end": "1523490"
  },
  {
    "text": "you might have users coming in from different kind of devices so small devices like phones desktops larger",
    "start": "1523490",
    "end": "1530510"
  },
  {
    "text": "device like desktop and laptops and as the owner of the website or application you want to kind of give them the most",
    "start": "1530510",
    "end": "1536450"
  },
  {
    "text": "optimal user experience right you don't want to say observe the same image for all kinds of devices and you could",
    "start": "1536450",
    "end": "1542270"
  },
  {
    "text": "always pre-render different resolutions of image and keep it in your storage and that might work fine but we have also",
    "start": "1542270",
    "end": "1548000"
  },
  {
    "text": "heard from customers who there was one customer where I forget but that large number of images and many of them were",
    "start": "1548000",
    "end": "1554900"
  },
  {
    "text": "not accessed frequently so from a cost standpoint it didn't make any sense for them to pre render and create all these",
    "start": "1554900",
    "end": "1560780"
  },
  {
    "text": "different combinations of images so what they did was they leveraged lambda at the edge the flow is let's say the first",
    "start": "1560780",
    "end": "1567920"
  },
  {
    "text": "time the user tries to access an image and with a particular in a particular size or resolution CloudFront will try",
    "start": "1567920",
    "end": "1576410"
  },
  {
    "text": "to fetch the content from s3 and let's say that particular image in that particular resolution is not available",
    "start": "1576410",
    "end": "1583030"
  },
  {
    "text": "origen response function would get triggered it will say object not found and what the origin response function",
    "start": "1583030",
    "end": "1589040"
  },
  {
    "text": "could then do is it could make a call to s3 fetch the raw image it could resize",
    "start": "1589040",
    "end": "1595040"
  },
  {
    "text": "the image store the resize image in the s3 bucket and then serve the resize image back to the viewer so any subsequent requests for",
    "start": "1595040",
    "end": "1602200"
  },
  {
    "text": "from a device similar to the previous device would would be a cache it and would be served from the cloud from",
    "start": "1602200",
    "end": "1607880"
  },
  {
    "text": "cache again we have a blog post this was another popular blog post among viewers",
    "start": "1607880",
    "end": "1615100"
  },
  {
    "text": "where there are there was some interesting there are some optimizations",
    "start": "1615100",
    "end": "1620299"
  },
  {
    "text": "you can do and the blog post covers all of that",
    "start": "1620299",
    "end": "1624250"
  },
  {
    "text": "another example is visitor prioritization so let's say you have applications where for whatever reason",
    "start": "1626049",
    "end": "1633440"
  },
  {
    "text": "you cannot scale your application to meet a sudden spike in traffic or if you",
    "start": "1633440",
    "end": "1638510"
  },
  {
    "text": "want to kind of segment your users across different origins so what you",
    "start": "1638510",
    "end": "1643880"
  },
  {
    "text": "could do is use a lambda th function origin function which could then maybe look at a cookie which kind of could be",
    "start": "1643880",
    "end": "1650270"
  },
  {
    "text": "the indicator whether this is the prioritize user or not and then route the request to the appropriate back-end",
    "start": "1650270",
    "end": "1658720"
  },
  {
    "text": "actually customizing this is a pretty interesting one so CloudFront today when",
    "start": "1660400",
    "end": "1665480"
  },
  {
    "text": "the cache key that is used is contains the URL of the object that's being",
    "start": "1665480",
    "end": "1670490"
  },
  {
    "text": "accessed and that works for a lot of the use cases but we had this customer who",
    "start": "1670490",
    "end": "1675650"
  },
  {
    "text": "was distributing media content and in their case the URL had the playback I",
    "start": "1675650",
    "end": "1681890"
  },
  {
    "text": "kind of simplified their the use case here but but the thing was they had playback session ID in the URL so let's",
    "start": "1681890",
    "end": "1689690"
  },
  {
    "text": "say they have 10 users all trying to access the same movie for example there are gonna be 10 entries and CloudFront",
    "start": "1689690",
    "end": "1695990"
  },
  {
    "text": "cache because all of them even though they are all accessing the same object has ten different unique URLs and that",
    "start": "1695990",
    "end": "1703580"
  },
  {
    "text": "was and they were logging these URLs and they were using cloud phone access logs for later processing the idea is that",
    "start": "1703580",
    "end": "1709250"
  },
  {
    "text": "they wanted to send a bill at the end of month or whatever so they wanted to keep a track of all these now while this",
    "start": "1709250",
    "end": "1715429"
  },
  {
    "text": "worked for that particular use case it was not very good from a cache hit ratio perspective right because the cache key",
    "start": "1715429",
    "end": "1722000"
  },
  {
    "text": "is really diluted now and what they did was they leveraged lamda at the edge function they had a viewer request",
    "start": "1722000",
    "end": "1727040"
  },
  {
    "text": "function again if you remember of your request is the first point it's get trigger even before the CloudFront cash",
    "start": "1727040",
    "end": "1733780"
  },
  {
    "text": "lookup is done and what the vo request function did was if you look at the original URL the original you all had",
    "start": "1733780",
    "end": "1739780"
  },
  {
    "text": "that playback ID just before file one and they rewrote the URL to kind of take that off but that information was still",
    "start": "1739780",
    "end": "1746020"
  },
  {
    "text": "logged so that they can do the charge back at the end of the month but the URL",
    "start": "1746020",
    "end": "1751060"
  },
  {
    "text": "was now much more simpler so from a cache key perspective they had the simple URL so any user who's trying to",
    "start": "1751060",
    "end": "1757030"
  },
  {
    "text": "access the object points the same cache key and the end benefit for them was",
    "start": "1757030",
    "end": "1762880"
  },
  {
    "text": "that the cache iteration got much better than before all right so now let's take a look at a",
    "start": "1762880",
    "end": "1770230"
  },
  {
    "text": "few different use cases and what what I call as the content based routing so the idea is that you could have multiple",
    "start": "1770230",
    "end": "1776890"
  },
  {
    "text": "origins in the backend and you want to kind of route the request to the appropriate back and origin the way you",
    "start": "1776890",
    "end": "1783910"
  },
  {
    "text": "could do that is leverage and I'm ready edge function it could either look at something within the request so it could",
    "start": "1783910",
    "end": "1790390"
  },
  {
    "text": "be header or a curie string or cookie or it could make a call to external data",
    "start": "1790390",
    "end": "1795940"
  },
  {
    "text": "store and then route the request to the appropriate back and origin there a few",
    "start": "1795940",
    "end": "1801370"
  },
  {
    "text": "different use case that fall in this category okay I don't know what's happening just some a bunch of slides",
    "start": "1801370",
    "end": "1808330"
  },
  {
    "text": "here sorry about that",
    "start": "1808330",
    "end": "1812370"
  },
  {
    "text": "okay I'm almost there so we had this customer who we're",
    "start": "1823800",
    "end": "1829000"
  },
  {
    "text": "delivering api's for Winter Olympics this year's Winter Olympics and at the",
    "start": "1829000",
    "end": "1834610"
  },
  {
    "text": "beginning of every event like any sporting event they would get a big spike of customers coming in they wanted",
    "start": "1834610",
    "end": "1839860"
  },
  {
    "text": "a way to kind of distribute that traffic across to origins in Europe they were mainly catering to European customers so",
    "start": "1839860",
    "end": "1845980"
  },
  {
    "text": "what they did was they had a lambda 88 function which inspected a particular custom header and then that header kind",
    "start": "1845980",
    "end": "1851590"
  },
  {
    "text": "of gave an indication of what is the best origin for that particular request and then they routed to the appropriate back-end origin data locality or latency",
    "start": "1851590",
    "end": "1860740"
  },
  {
    "text": "low latency is another reason so let's say you have multiple buckets in different regions and let's say you want for all users coming in from Germany for",
    "start": "1860740",
    "end": "1868300"
  },
  {
    "text": "example you want to make sure they go to the air Frankfurt bucket now you this",
    "start": "1868300",
    "end": "1873730"
  },
  {
    "text": "cannot be done natively with route 53 because of some limitations of host errors and s3 but when you leverage",
    "start": "1873730",
    "end": "1880330"
  },
  {
    "text": "lambda at the edge what you can do is you can have a lambda at the edge function which would look at the appropriate value in the request and",
    "start": "1880330",
    "end": "1886360"
  },
  {
    "text": "then routed to the appropriate request appropriate back in origin another",
    "start": "1886360",
    "end": "1891970"
  },
  {
    "text": "example is a B testing let's say you have you wanna you're launching a new feature or a new version of the",
    "start": "1891970",
    "end": "1897760"
  },
  {
    "text": "application and you're justyou're the new version let's say it's origin B and now you want to send a percentage of",
    "start": "1897760",
    "end": "1903610"
  },
  {
    "text": "your users to origin B and kind of gradually dial that up till you have full confidence and after which you",
    "start": "1903610",
    "end": "1909340"
  },
  {
    "text": "would completely cut over everyone to origin B so you can kind of achieve those kind of use cases with lambda at",
    "start": "1909340",
    "end": "1914890"
  },
  {
    "text": "the edge so you could have an origin request function you could use cookie as a mechanism to kind of track which",
    "start": "1914890",
    "end": "1920410"
  },
  {
    "text": "session the user is in first time the request comes in let's say there's no cookie and you could have your logic",
    "start": "1920410",
    "end": "1926230"
  },
  {
    "text": "define which origin it should go to you could set up the cookie so that any subsequent request comes in coming in",
    "start": "1926230",
    "end": "1931930"
  },
  {
    "text": "would have that cookie set and lambda at the edge function can then inspect the key and send it to the appropriate back-end origin this is just an example",
    "start": "1931930",
    "end": "1942640"
  },
  {
    "text": "of how you could update or update your request so that you go to a new origin",
    "start": "1942640",
    "end": "1950410"
  },
  {
    "text": "one thing to note here is especially when you're using an s3 bucket you need to update the host header and this is",
    "start": "1950410",
    "end": "1955750"
  },
  {
    "text": "the this is why you are able to kind of route between different s3 buckets so I",
    "start": "1955750",
    "end": "1964360"
  },
  {
    "text": "had this customer who was one of the early adopters of lambda at the edge and they had his use case where they want to",
    "start": "1964360",
    "end": "1970480"
  },
  {
    "text": "send all good BOTS or Google Facebook all his search engine traffic they",
    "start": "1970480",
    "end": "1977410"
  },
  {
    "text": "wanted to send to a pre-rendered version of the website whereas real users they want to send to their origin application",
    "start": "1977410",
    "end": "1984370"
  },
  {
    "text": "and all bad BOTS I just want to discard so they leverage lambda at the edge so you have access to the user agent header",
    "start": "1984370",
    "end": "1990910"
  },
  {
    "text": "in in your lambda the edge function and you can inspect that and then route the user to the appropriate back and origin",
    "start": "1990910",
    "end": "1998080"
  },
  {
    "text": "and origin failover this is a capability we just launched last week so you can do",
    "start": "1998080",
    "end": "2004260"
  },
  {
    "text": "origin failover even without lambda at the edge so let's say you have two s3 buckets and you designate one bucket as",
    "start": "2004260",
    "end": "2010320"
  },
  {
    "text": "a primary bucket in the second bucket as the secondary and what you can do is pretty much use CloudFront to",
    "start": "2010320",
    "end": "2016560"
  },
  {
    "text": "automatically failover to the secondary when the primary is not available so you can define the error condition when you",
    "start": "2016560",
    "end": "2023640"
  },
  {
    "text": "want to do the failover and then cloud fan will automatically route the request to the appropriate or would",
    "start": "2023640",
    "end": "2029550"
  },
  {
    "text": "automatically route the request to the secondly origin when there is an issue and if you want to further customize it",
    "start": "2029550",
    "end": "2036030"
  },
  {
    "text": "you have access to lambda functions which can do that for you so with that let me let me invite Tyler to share say",
    "start": "2036030",
    "end": "2042660"
  },
  {
    "text": "Indians use case",
    "start": "2042660",
    "end": "2045350"
  },
  {
    "text": "cool thanks George is my mic working or is it cutting out I'm good all right",
    "start": "2052510",
    "end": "2060370"
  },
  {
    "text": "cool so it's George mention Tyler Foster",
    "start": "2060370",
    "end": "2067010"
  },
  {
    "text": "I'm VP of Technology with sentient technologies you probably haven't heard",
    "start": "2067010",
    "end": "2072770"
  },
  {
    "text": "about us but you've probably experienced",
    "start": "2072770",
    "end": "2077800"
  },
  {
    "text": "websites or or other solutions that have been optimized by our technology so",
    "start": "2077800",
    "end": "2086290"
  },
  {
    "text": "there are a lot of ideas in the world today a lot of new business models",
    "start": "2086530",
    "end": "2092179"
  },
  {
    "text": "popping up new technology that are leading to changes in user behavior and",
    "start": "2092180",
    "end": "2099400"
  },
  {
    "text": "and user expectations near-daily so",
    "start": "2099400",
    "end": "2104680"
  },
  {
    "text": "previously using kind of standard a/b testing and and going through a large",
    "start": "2104680",
    "end": "2112340"
  },
  {
    "text": "design process led to enough throughput of new ideas to keep users engaged but",
    "start": "2112340",
    "end": "2119540"
  },
  {
    "text": "today with the speed at which things are changing it's getting harder to keep up with user expectations and user",
    "start": "2119540",
    "end": "2125540"
  },
  {
    "text": "behaviors so sunny and ascend allows you to to basically optimize on-the-fly",
    "start": "2125540",
    "end": "2132230"
  },
  {
    "text": "through online learning with a combination of machine learning",
    "start": "2132230",
    "end": "2137630"
  },
  {
    "text": "approaches mainly around evolutionary computation so through evolutionary",
    "start": "2137630",
    "end": "2147290"
  },
  {
    "text": "experience optimization ascends able to",
    "start": "2147290",
    "end": "2152470"
  },
  {
    "text": "collect a bunch of ideas thousands potentially of ideas from the end user",
    "start": "2152620",
    "end": "2158650"
  },
  {
    "text": "piled them all into a big pool sort through them to find the optimal",
    "start": "2158650",
    "end": "2164180"
  },
  {
    "text": "combination of ideas for the end users customers whatever their they're looking",
    "start": "2164180",
    "end": "2171170"
  },
  {
    "text": "to do we",
    "start": "2171170",
    "end": "2176970"
  },
  {
    "text": "we use genetic algorithms to search and find the local and global Maxima to to",
    "start": "2176970",
    "end": "2183330"
  },
  {
    "text": "optimize that user experience so that's the context and basically as you can",
    "start": "2183330",
    "end": "2189420"
  },
  {
    "text": "guess we have pretty stringent requirements so if we don't land on the",
    "start": "2189420",
    "end": "2195720"
  },
  {
    "text": "page fast enough then it will negatively impact the user experience and negate",
    "start": "2195720",
    "end": "2201240"
  },
  {
    "text": "the benefits of the system also we see a lot of variation in traffic depending on",
    "start": "2201240",
    "end": "2207060"
  },
  {
    "text": "who's experimenting what they're experimenting on changes that they're making so we have to kind of accommodate",
    "start": "2207060",
    "end": "2215190"
  },
  {
    "text": "all of this previously we had a system there was seven regional spokes as we",
    "start": "2215190",
    "end": "2223260"
  },
  {
    "text": "called them each of which was three to ten in for large nodes backed by three",
    "start": "2223260",
    "end": "2231960"
  },
  {
    "text": "node elastic hash clusters it was really complicated it was hard to scale and if",
    "start": "2231960",
    "end": "2240000"
  },
  {
    "text": "you weren't within a reasonable distance of one of those seven regions we had",
    "start": "2240000",
    "end": "2245480"
  },
  {
    "text": "serious latency issues so we went back to the drawing board to figure out a better way it just so happened that it",
    "start": "2245480",
    "end": "2251820"
  },
  {
    "text": "was right around the time that that lambda ed edge was launched so we're",
    "start": "2251820",
    "end": "2260460"
  },
  {
    "text": "able to simplify that complex system into two lambda edge functions that fed",
    "start": "2260460",
    "end": "2270270"
  },
  {
    "text": "data back that feed data back through the cloud watch blogs so it's part of a",
    "start": "2270270",
    "end": "2277980"
  },
  {
    "text": "larger architecture that looks something like this or basically the cloud watch logs are fed through",
    "start": "2277980",
    "end": "2284630"
  },
  {
    "text": "Kinesis fire hose into transform lambdas",
    "start": "2284630",
    "end": "2289650"
  },
  {
    "text": "that then store it in part a format on disk so I'll walk through some of the",
    "start": "2289650",
    "end": "2296670"
  },
  {
    "text": "challenges of doing this that we faced with each of the different lambda edge instances or functions but first this is",
    "start": "2296670",
    "end": "2305970"
  },
  {
    "text": "a this is kind of a more detailed walkthrough of our request flow so as you can see the request comes from",
    "start": "2305970",
    "end": "2314790"
  },
  {
    "text": "the runtime client or or SDK it hits the the cache run it runs of the lambda edge",
    "start": "2314790",
    "end": "2324450"
  },
  {
    "text": "function which then determines the correct combination of variations to",
    "start": "2324450",
    "end": "2329820"
  },
  {
    "text": "deliver then reroutes them back through the cloud front cache to an execution",
    "start": "2329820",
    "end": "2337050"
  },
  {
    "text": "plan associated with that combination finally delivering the end result and",
    "start": "2337050",
    "end": "2342510"
  },
  {
    "text": "then collecting events about it which it feeds through lambda edge back into our",
    "start": "2342510",
    "end": "2349890"
  },
  {
    "text": "data pipelines and the results were pretty impressive actually far better",
    "start": "2349890",
    "end": "2355950"
  },
  {
    "text": "than we had expected so we started to roll it out on the first of August we",
    "start": "2355950",
    "end": "2362940"
  },
  {
    "text": "cut costs by more than 50% then we doubled our traffic and the the",
    "start": "2362940",
    "end": "2371130"
  },
  {
    "text": "results stayed pretty stable we didn't run into a lot of throttling or anything which were some of our original concerns",
    "start": "2371130",
    "end": "2377960"
  },
  {
    "text": "we had a couple of throttles early on under heavy load but we were able to be",
    "start": "2377960",
    "end": "2385680"
  },
  {
    "text": "resilient to those and kind of gain the overall goals that we had had set out to",
    "start": "2385680",
    "end": "2391770"
  },
  {
    "text": "achieve so the first lambda function that I'm",
    "start": "2391770",
    "end": "2397589"
  },
  {
    "text": "going to talk about is is our allocation function this one does a lot of",
    "start": "2397589",
    "end": "2402599"
  },
  {
    "text": "different things but but primarily it's bought detection traffic filtering with",
    "start": "2402599",
    "end": "2408150"
  },
  {
    "text": "the goal of allocating 2 to an experiment and then content negotiation",
    "start": "2408150",
    "end": "2415400"
  },
  {
    "text": "so first here's a a JavaScript module",
    "start": "2415400",
    "end": "2420450"
  },
  {
    "text": "that provides just sort of quick and dirty bot detection we found it really",
    "start": "2420450",
    "end": "2426810"
  },
  {
    "text": "good for doing quick and dirty bot detection but doing full bot detection",
    "start": "2426810",
    "end": "2432420"
  },
  {
    "text": "was really really hard it was it was very expensive the runtime bogged down this slide",
    "start": "2432420",
    "end": "2440190"
  },
  {
    "text": "actually has been truck struggling to render just because of the car just because of the the syntax highlighting so it it's not",
    "start": "2440190",
    "end": "2449220"
  },
  {
    "text": "really a great option for for doing full bot detection but you're welcome to give",
    "start": "2449220",
    "end": "2455160"
  },
  {
    "text": "it a try if you want to also in our",
    "start": "2455160",
    "end": "2462110"
  },
  {
    "text": "doing traffic filtering so there's a lot of data that's available at the lamda",
    "start": "2462110",
    "end": "2468570"
  },
  {
    "text": "edge execution and both on the viewer side edge inside more so on the origin",
    "start": "2468570",
    "end": "2474060"
  },
  {
    "text": "side just because it on the viewer side you can access it a like for instance",
    "start": "2474060",
    "end": "2480360"
  },
  {
    "text": "location information so you don't know the country that the request is coming from in a viewer-request regard request",
    "start": "2480360",
    "end": "2490010"
  },
  {
    "text": "anytime you're going to be accessing headers or want to access headers from",
    "start": "2492050",
    "end": "2497280"
  },
  {
    "text": "your lamda edge be sure to white list them or set to cache on all headers",
    "start": "2497280",
    "end": "2503610"
  },
  {
    "text": "because otherwise you won't have access to them in your lamda this was one thing that kept on biting us was we'd see a",
    "start": "2503610",
    "end": "2511440"
  },
  {
    "text": "bug and then we'd say oh wait what's going on and we'd find that that there wasn't that that specific header white",
    "start": "2511440",
    "end": "2518160"
  },
  {
    "text": "white listed from a content negotiation perspective you can do a lot of stuff",
    "start": "2518160",
    "end": "2524280"
  },
  {
    "text": "based on content routing so either the URI or different headers be it the",
    "start": "2524280",
    "end": "2531000"
  },
  {
    "text": "language header or content type we do",
    "start": "2531000",
    "end": "2538160"
  },
  {
    "text": "negotiation based on two things so we might send JSON payload or we might send",
    "start": "2538160",
    "end": "2544680"
  },
  {
    "text": "back a JavaScript payload and then also that is specialized for that end user so",
    "start": "2544680",
    "end": "2551220"
  },
  {
    "text": "it's going to be a specific combination of variations",
    "start": "2551220",
    "end": "2557840"
  },
  {
    "text": "relatives characteristics should I pick",
    "start": "2557840",
    "end": "2563610"
  },
  {
    "text": "up the other Mike okay",
    "start": "2563610",
    "end": "2567860"
  },
  {
    "text": "all right you could also rewrite the whole origin this is something that George talked",
    "start": "2570750",
    "end": "2576670"
  },
  {
    "text": "about it's really easy to do and it can be helpful in a lot of different",
    "start": "2576670",
    "end": "2581800"
  },
  {
    "text": "situations particularly around proxy we found it helpful so we found that access",
    "start": "2581800",
    "end": "2592180"
  },
  {
    "text": "to data in the origin request was it was",
    "start": "2592180",
    "end": "2598000"
  },
  {
    "text": "really good but it was after the cache hit or the cache check already so we've",
    "start": "2598000",
    "end": "2603700"
  },
  {
    "text": "had to use this pattern several times where we'll actually set another behavior as the origin to to an original",
    "start": "2603700",
    "end": "2612070"
  },
  {
    "text": "request so whether we're accessing template files or were accessing API",
    "start": "2612070",
    "end": "2619510"
  },
  {
    "text": "calls etc will will often plumb them through through another behavior in",
    "start": "2619510",
    "end": "2624580"
  },
  {
    "text": "order to cache it near the actual lambda that's executing okay so here's our so",
    "start": "2624580",
    "end": "2633280"
  },
  {
    "text": "I'm dead edge function this one is our events function which is responsible for",
    "start": "2633280",
    "end": "2640300"
  },
  {
    "text": "collecting all of the data about participants in the micro experiments",
    "start": "2640300",
    "end": "2645430"
  },
  {
    "text": "that we're running constantly to identify the optimal combination of variants the basic flow is this so the",
    "start": "2645430",
    "end": "2654910"
  },
  {
    "text": "request comes into Cloud front which then hands it off to a lambda edge which",
    "start": "2654910",
    "end": "2664240"
  },
  {
    "text": "parses that logs it to cloud watch we then have a cloud watch subscription",
    "start": "2664240",
    "end": "2670180"
  },
  {
    "text": "that pulls it into data fire data firehose which then copies it to disk in",
    "start": "2670180",
    "end": "2677320"
  },
  {
    "text": "s3 runs it through a lambda transform copies the final files to s3 and park'",
    "start": "2677320",
    "end": "2684280"
  },
  {
    "text": "format and then we can query it through Athena this has worked out to be really",
    "start": "2684280",
    "end": "2689740"
  },
  {
    "text": "well really good for us the performance is great really really cost-effective",
    "start": "2689740",
    "end": "2695280"
  },
  {
    "text": "far more effective than our previous solution of using a elasticsearch for this sort of workload",
    "start": "2695280",
    "end": "2704760"
  },
  {
    "text": "so some handy things here just recently they made it available to access the",
    "start": "2707700",
    "end": "2715420"
  },
  {
    "text": "request body which was a significant limitation before so this is really",
    "start": "2715420",
    "end": "2720610"
  },
  {
    "text": "helpful when building ap is at the edge",
    "start": "2720610",
    "end": "2726870"
  },
  {
    "text": "whenever you're using or whenever you need to access the body before be sure to check check this box or the one in",
    "start": "2727650",
    "end": "2734830"
  },
  {
    "text": "the the lambda registration or set it up in your lamda edge configuration another",
    "start": "2734830",
    "end": "2744330"
  },
  {
    "text": "situation was doing cross-site request so a lot of people will totally avoid",
    "start": "2744330",
    "end": "2751360"
  },
  {
    "text": "cos I request because of the pre flights which are an origin or sorry an option",
    "start": "2751360",
    "end": "2758920"
  },
  {
    "text": "call that precedes actual requests which can add a lot of latency to to your",
    "start": "2758920",
    "end": "2765280"
  },
  {
    "text": "response times so this can be really handy when building api's at the edge",
    "start": "2765280",
    "end": "2772060"
  },
  {
    "text": "that will be called cross origin basically if you define it in a way that",
    "start": "2772060",
    "end": "2777640"
  },
  {
    "text": "is considered a simple request by the spec then it will avoid the original",
    "start": "2777640",
    "end": "2783930"
  },
  {
    "text": "options call and just make the call directly then just set the access",
    "start": "2783930",
    "end": "2789820"
  },
  {
    "text": "control max age header and you should never face the latency of the course",
    "start": "2789820",
    "end": "2797080"
  },
  {
    "text": "pre-flight s-- another cool trick that we have used is doing content validation",
    "start": "2797080",
    "end": "2805000"
  },
  {
    "text": "with Jason schemas at the edge so basically no matter what the schema is",
    "start": "2805000",
    "end": "2810280"
  },
  {
    "text": "that you've or the the mime type is that you've delivered in whether it's URL",
    "start": "2810280",
    "end": "2815800"
  },
  {
    "text": "encoded or JSON if you use the JSON schema libraries you can just parse it",
    "start": "2815800",
    "end": "2822160"
  },
  {
    "text": "and then run the validation against the parsed result which is really handy when",
    "start": "2822160",
    "end": "2829540"
  },
  {
    "text": "you're trying to push a lot of data through the edge",
    "start": "2829540",
    "end": "2834330"
  },
  {
    "text": "one of the hardest things that we faced through this was when a lambda tej",
    "start": "2835320",
    "end": "2841450"
  },
  {
    "text": "function executes it only logs in the region where the executed so it won't",
    "start": "2841450",
    "end": "2849760"
  },
  {
    "text": "create the log group until it's executed there so you kind of play whack-a-mole chasing the the log groups around so we",
    "start": "2849760",
    "end": "2857920"
  },
  {
    "text": "wrote a another lambda function that's triggered on a log group creation which",
    "start": "2857920",
    "end": "2863320"
  },
  {
    "text": "then goes out and picks up the and and",
    "start": "2863320",
    "end": "2869520"
  },
  {
    "text": "registers the subscriptions when you log group is created when you're logging the",
    "start": "2869520",
    "end": "2878410"
  },
  {
    "text": "data it's really easy to parse out the log information that lambda edge",
    "start": "2878410",
    "end": "2884619"
  },
  {
    "text": "produces is really helpful you can and if you just log it in JSON format it",
    "start": "2884619",
    "end": "2891700"
  },
  {
    "text": "writes subscriptions for there's also other good information in these log in",
    "start": "2891700",
    "end": "2898840"
  },
  {
    "text": "these logs like it'll tell you exactly what you paid for that request or at least the the number of milliseconds",
    "start": "2898840",
    "end": "2905290"
  },
  {
    "text": "billed and the the amount of memory billed gives you a good option for",
    "start": "2905290",
    "end": "2911430"
  },
  {
    "text": "customer chargebacks and things like that",
    "start": "2911430",
    "end": "2915720"
  },
  {
    "text": "and then kind of final tip use the park'",
    "start": "2917440",
    "end": "2922570"
  },
  {
    "text": "serialization that is built into lambda firehose if you're gonna be using athena",
    "start": "2922570",
    "end": "2929280"
  },
  {
    "text": "it's way more efficient it's easy to set up and it it saved us a lot so this was",
    "start": "2929280",
    "end": "2937480"
  },
  {
    "text": "going to be complex to implement ourselves and this isn't a lambda tej",
    "start": "2937480",
    "end": "2943240"
  },
  {
    "text": "feature but it was a cool feature of data firehose that it saved us a lot of",
    "start": "2943240",
    "end": "2948730"
  },
  {
    "text": "time so thank you everyone",
    "start": "2948730",
    "end": "2954370"
  },
  {
    "text": "that's it for me again I'm Tyler Foster VP of technology at sentience and George",
    "start": "2954370",
    "end": "2961540"
  },
  {
    "text": "Sean was my co-presenter the product manager",
    "start": "2961540",
    "end": "2966120"
  }
]