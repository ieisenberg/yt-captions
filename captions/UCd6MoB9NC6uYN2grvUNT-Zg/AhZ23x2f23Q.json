[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "okay well good afternoon welcome to our session on protecting Amazon ec2",
    "start": "1159",
    "end": "7410"
  },
  {
    "text": "instances relational database on ec2 and no psycho workloads I've running on ec2 so my name is Ken I am a Solutions",
    "start": "7410",
    "end": "16230"
  },
  {
    "text": "Architect at a company called rubric and how to agenda and who will be sharing the stage with me today you guys want to dish yourselves hey I'm",
    "start": "16230",
    "end": "22800"
  },
  {
    "text": "Bill Girling I'm a cloud Solutions Architect at rubric and I'm Rob Nolan I'm a Solutions Architect at Amazon Web Services right so I'll go in this",
    "start": "22800",
    "end": "31019"
  },
  {
    "start": "30000",
    "end": "85000"
  },
  {
    "text": "session is to cope with a pretty ambitious agenda what we want to do first is kind of set the table by giving",
    "start": "31019",
    "end": "38280"
  },
  {
    "text": "you a quick primer Rob's going to do that about what Amazon eBay s snapshots is how it works on the recovers and what",
    "start": "38280",
    "end": "46260"
  },
  {
    "text": "are some of the use cases for using that particular service and then I want to",
    "start": "46260",
    "end": "51300"
  },
  {
    "text": "talk about a little bit of time talking about how you can protect a situ",
    "start": "51300",
    "end": "56610"
  },
  {
    "text": "instances through the EBS snapshot but Madge lifecycle that using rubrics so rubric will kind of be the example how",
    "start": "56610",
    "end": "63359"
  },
  {
    "text": "you can actually integrate with the ec2 API is to create a solution bills I'm going to do a demo of how all that works",
    "start": "63359",
    "end": "69990"
  },
  {
    "text": "and then also talk about some custom use cases that we've built for customers",
    "start": "69990",
    "end": "75060"
  },
  {
    "text": "using the rubric API and also the ec2 API as well as other services within AWS",
    "start": "75060",
    "end": "80610"
  },
  {
    "text": "and then we'll end of a call to action so so first I think Rob's gonna go ahead",
    "start": "80610",
    "end": "85920"
  },
  {
    "start": "85000",
    "end": "115000"
  },
  {
    "text": "and talk about yes cool okay so just so I can get a baseline here we wanted to",
    "start": "85920",
    "end": "91680"
  },
  {
    "text": "make sure that everybody had kind of the basic information of what's available in the platform today so I may go through",
    "start": "91680",
    "end": "97350"
  },
  {
    "text": "this faster I may have goes through this slow depending on the answer this question how many of you in here how many of you in here feel fairly familiar",
    "start": "97350",
    "end": "103770"
  },
  {
    "text": "with EBS and how it works and have messed with it before okay about half the room a little bit more",
    "start": "103770",
    "end": "109740"
  },
  {
    "text": "than that all right so you guys can check your phones for the next couple of minutes all right so amazon EBS is our block",
    "start": "109740",
    "end": "115590"
  },
  {
    "start": "115000",
    "end": "152000"
  },
  {
    "text": "storage service excuse me that we use to attach to ec2 instances and it's this is",
    "start": "115590",
    "end": "120840"
  },
  {
    "text": "designed for things like your boot volumes database volumes logging volumes your applications anything you want persistent that you want to create a",
    "start": "120840",
    "end": "127170"
  },
  {
    "text": "block filesystem on right so we have our s3 object storage service which is used for like huge amount",
    "start": "127170",
    "end": "133120"
  },
  {
    "text": "of scale and large numbers of objects but it's not as fast or as granular right as block storage volume block",
    "start": "133120",
    "end": "140379"
  },
  {
    "text": "storage volumes are honed in a single availability zone inside of a given AWS",
    "start": "140379",
    "end": "145690"
  },
  {
    "text": "region and they can be replicated across to other availability zones route to other regions by using snapshots just a",
    "start": "145690",
    "end": "152950"
  },
  {
    "start": "152000",
    "end": "202000"
  },
  {
    "text": "really quick primer on instant store storage so we do have instant we do have storage you can get inside of an",
    "start": "152950",
    "end": "158860"
  },
  {
    "text": "instance that's actually in the hardware versus EBS right so EBS is attached via a network interface that's dedicated",
    "start": "158860",
    "end": "164890"
  },
  {
    "text": "with a lot of our instance types but we also have instant store storage which gives you the ability to get very high",
    "start": "164890",
    "end": "170890"
  },
  {
    "text": "performance very little latency because the actual storage devices are inside of the hardware there are some differences",
    "start": "170890",
    "end": "177670"
  },
  {
    "text": "one being that EBS storage is the persistent storage whereas instant store is ephemeral right so when that instance",
    "start": "177670",
    "end": "183700"
  },
  {
    "text": "goes away that storage goes away as well so works really good for databases like  orchestra where you're putting",
    "start": "183700",
    "end": "190450"
  },
  {
    "text": "things in multiple copies going across multiple nodes so you have persistence across many different servers but if you",
    "start": "190450",
    "end": "197859"
  },
  {
    "text": "want to persist on a single volume EBS is really where you want to go EBS",
    "start": "197859",
    "end": "203139"
  },
  {
    "start": "202000",
    "end": "250000"
  },
  {
    "text": "gives you the ability to use features like ec2 auto recovery so if an ec2 instance dies like the underlying",
    "start": "203139",
    "end": "208720"
  },
  {
    "text": "hardware becomes unhealthy you'll get an alarm inside of the console that tells you that that underlying instance is",
    "start": "208720",
    "end": "214359"
  },
  {
    "text": "unhealthy now and you should go ahead and schedule a reboot but if it gets to the point where the instance is no longer answering the health checks that",
    "start": "214359",
    "end": "220359"
  },
  {
    "text": "we create we can actually auto recover that instance for you based on a clot watch alarm so the cloud watch alarm",
    "start": "220359",
    "end": "225879"
  },
  {
    "text": "notices that these metrics have exceeded the threshold you've set for unhealthy instance health check and we'll go ahead",
    "start": "225879",
    "end": "232120"
  },
  {
    "text": "and recover that instance and the neat thing is is that unlike when you do a terminate and restart with a new image or something like that you get to retain",
    "start": "232120",
    "end": "239019"
  },
  {
    "text": "the instance ID all the metadata the IP addresses everything stays with that instance because it's not a scheduled",
    "start": "239019",
    "end": "246129"
  },
  {
    "text": "termination and restart it's it's something that was unintended different",
    "start": "246129",
    "end": "251709"
  },
  {
    "start": "250000",
    "end": "362000"
  },
  {
    "text": "EBS volumes so pretty much every Amazon machine image at this point you can find when you launch a new ec2 instance is",
    "start": "251709",
    "end": "258070"
  },
  {
    "text": "SSD based so we'll leverage our general-purpose storage class for that so it's general-purpose SSD storage and",
    "start": "258070",
    "end": "264849"
  },
  {
    "text": "I believe it's around three eye ops per gigabyte roughly you",
    "start": "264849",
    "end": "270570"
  },
  {
    "text": "get guaranteed to your volume by default and then the neat thing about GP to stores this is what we really want to see you put your boot volumes on you",
    "start": "270570",
    "end": "277770"
  },
  {
    "text": "know your kind of OS logging application binaries we're not requiring a lot of sustained i/o performance so the neat",
    "start": "277770",
    "end": "284370"
  },
  {
    "text": "thing is is you can burst with gp2 volumes and get the advantage of up to ten thousand I ops on that volume to get",
    "start": "284370",
    "end": "291810"
  },
  {
    "text": "a quick burst of i/o performance so when the when the instance boots up for example right it's going to be hammer in",
    "start": "291810",
    "end": "297210"
  },
  {
    "text": "the disk for a few minutes reading binaries into memory and doing all kinds of other things but then it'll die down so kind of similar to how a t2 instance",
    "start": "297210",
    "end": "304680"
  },
  {
    "text": "or a t3 instance works versus a standard m4 m5 for example IO one instances are",
    "start": "304680",
    "end": "310590"
  },
  {
    "text": "designed for when you have very critical workloads that need sustained IO performance so what's really neat",
    "start": "310590",
    "end": "316530"
  },
  {
    "text": "actually this week is we announced that we've doubled the performance of Io one volumes from 32,000 AI ops to 64,000 and",
    "start": "316530",
    "end": "324180"
  },
  {
    "text": "we've also increased the total throughput you can get out of those volumes from a 500 megabytes a second to a gigabyte a second",
    "start": "324180",
    "end": "330000"
  },
  {
    "text": "so you know depending on your workload it's really important to make sure you select the right instance type I've had",
    "start": "330000",
    "end": "335130"
  },
  {
    "text": "customers come to me before and say hey I'm doing performance testing on your platform and your performance is pretty bad when we go and take a look and we're",
    "start": "335130",
    "end": "341789"
  },
  {
    "text": "like well everything's on gp2 right so it's gonna throttle you after a certain amount of time so definitely take a look",
    "start": "341789",
    "end": "346950"
  },
  {
    "text": "at that those mechanisms because it's important to understand those and then it's surprising that we actually still offer hard drive based EBS volumes as",
    "start": "346950",
    "end": "354150"
  },
  {
    "text": "well because believe it or not there are certain i/o patterns that a good old spinning hard drive will actually beat",
    "start": "354150",
    "end": "359789"
  },
  {
    "text": "an SSD with so EBS snapshots we can use those to protect our EBS volumes for dr",
    "start": "359789",
    "end": "367590"
  },
  {
    "start": "362000",
    "end": "493000"
  },
  {
    "text": "and h-a purposes for example so an EBS volume inside of an AZ is automatically",
    "start": "367590",
    "end": "372810"
  },
  {
    "text": "protected right inside of that availability zone we actually protect your data across multiple storage frames",
    "start": "372810",
    "end": "378360"
  },
  {
    "text": "so that if the hardware that your data is resides on fails we can automatically start reading blocks from another piece",
    "start": "378360",
    "end": "384570"
  },
  {
    "text": "of hardware so this describes you great availability for your for your data",
    "start": "384570",
    "end": "390360"
  },
  {
    "text": "inside of a given AZ however if that availability zone were to become unavailable or you were unable to access",
    "start": "390360",
    "end": "395880"
  },
  {
    "text": "your resources and that AZ you'd no longer be able to access the D EBS volume so what you can do is you can",
    "start": "395880",
    "end": "403020"
  },
  {
    "text": "take a snapshot and what we'll do is we'll copy all the blocks of that EBS volume to s3 the neat thing about s3 is",
    "start": "403020",
    "end": "409590"
  },
  {
    "text": "that s 3 is a regionally protected service meaning that whenever you write data into Amazon s3 we will protect it",
    "start": "409590",
    "end": "415440"
  },
  {
    "text": "in across at least three availability zones and that's one of the reasons why we can offer things like an 11-9 store",
    "start": "415440",
    "end": "420810"
  },
  {
    "text": "ability guarantee with us three so the EBS volume goes ahead and copies all of its data into s3 and then now I have",
    "start": "420810",
    "end": "428250"
  },
  {
    "text": "this snapshot that sits and it's available to me regionally so if the AZ goes offline or I decide I want to put a",
    "start": "428250",
    "end": "434220"
  },
  {
    "text": "copy of this data over in a different AZ I can simply rehydrate that snapshot create that volume back inside of that",
    "start": "434220",
    "end": "441780"
  },
  {
    "text": "availability zone and now I have access to that data as I'm moving through that data I have my original snapshot that I",
    "start": "441780",
    "end": "448170"
  },
  {
    "text": "created for that volume and then I can add new blocks to that volume and I can get a second snapshot that only takes",
    "start": "448170",
    "end": "453780"
  },
  {
    "text": "those added blocks continuing on with a third snapshot and so forth I can then",
    "start": "453780",
    "end": "459150"
  },
  {
    "text": "take those different snaps at whatever state I want restore those to a different availability zone or potentially even restore that snapshot",
    "start": "459150",
    "end": "465600"
  },
  {
    "text": "to a different region giving me the ability to take a point-in-time copy of my data wherever I want and deploy it",
    "start": "465600",
    "end": "471810"
  },
  {
    "text": "wherever else I might need to whether it's cross account so maybe I'm using a I'm using a multi account pattern where",
    "start": "471810",
    "end": "479580"
  },
  {
    "text": "I have specific accounts for development and testing and then I have production I can snap a production database with no",
    "start": "479580",
    "end": "484800"
  },
  {
    "text": "impact to that database take that snapshot and deploy it into a development account in a completely",
    "start": "484800",
    "end": "489870"
  },
  {
    "text": "separate region for my developers to work on how the EBS snapshots work so",
    "start": "489870",
    "end": "495090"
  },
  {
    "start": "493000",
    "end": "625000"
  },
  {
    "text": "here's our EBS volume what we're gonna do is we're gonna do a copy of these blocks so we're gonna create the first snapshot so the first snapshot is always",
    "start": "495090",
    "end": "501570"
  },
  {
    "text": "going to be the entire contents of the volume obviously right we need that first copy so we're going to copy over blocks a B and C into snapshot one so",
    "start": "501570",
    "end": "508620"
  },
  {
    "text": "now those live in s3 so now I have a copy of those blocks and all three availability zones in my given region will just say we're using uswest",
    "start": "508620",
    "end": "514650"
  },
  {
    "text": "to I modify a block so I've modified block C so I now I want to take another",
    "start": "514650",
    "end": "520260"
  },
  {
    "text": "snapshot because I want to make sure to track the differential between those modifications so what I can do is create a new snapshot but instead of copying",
    "start": "520260",
    "end": "527460"
  },
  {
    "text": "all the data all over again which is wasteful I'm only going to copy what changed so I see that snapshot one",
    "start": "527460",
    "end": "533490"
  },
  {
    "text": "already Taine's blocks a and B and I know those haven't changed so I'm just gonna copy changed block C over and now I have the",
    "start": "533490",
    "end": "539550"
  },
  {
    "text": "original representation of the volume and I have the new representation of the volume which is the a and B from the",
    "start": "539550",
    "end": "545070"
  },
  {
    "text": "first snapshot and then I have the change Block C for the second now I add blocks D and E which are new new data",
    "start": "545070",
    "end": "551610"
  },
  {
    "text": "that it is volume is created I've got see the changed C block and snapshot -",
    "start": "551610",
    "end": "556740"
  },
  {
    "text": "we've got the original a B and C and snapshot one so now I create snapshot three all I need to do is put DNA in",
    "start": "556740",
    "end": "562860"
  },
  {
    "text": "there so at any point in time I can get a complete representation of the volume at those three states the original state",
    "start": "562860",
    "end": "569370"
  },
  {
    "text": "after the modification of Block C or the addition of blocks D&E makes sense we're",
    "start": "569370",
    "end": "575790"
  },
  {
    "text": "tracking okay so if I decide to delete a snapshot right so I don't want snapshot",
    "start": "575790",
    "end": "582360"
  },
  {
    "text": "number one anymore I don't need that state we've moved past that sprint whatever or the reason so I'll go ahead",
    "start": "582360",
    "end": "588300"
  },
  {
    "text": "and delete that snapshot so the snapshot system smart and what it's going to say is well I need to keep blocks a and B",
    "start": "588300",
    "end": "594210"
  },
  {
    "text": "but I don't care about the representation of the volume with Block C in its original state so I'm going to",
    "start": "594210",
    "end": "599610"
  },
  {
    "text": "take a and B merge them into snapshot number two and then I'm going to delete snapshot number one so really all I'm",
    "start": "599610",
    "end": "606000"
  },
  {
    "text": "deleting is that original Block C state right so you can see how we're moving data kind of in and out and we're being",
    "start": "606000",
    "end": "612000"
  },
  {
    "text": "smart about it we're only storing what we absolutely need to so you're gonna have that initial snapshot which is",
    "start": "612000",
    "end": "617130"
  },
  {
    "text": "going to be the full amount but then you're really only going to be storing whatever the change rate is of your data as it lives on that particular EBS",
    "start": "617130",
    "end": "624000"
  },
  {
    "text": "volume so some of the great use cases for snapshot is creating and sharing Amazon machine images I have a lot of",
    "start": "624000",
    "end": "630120"
  },
  {
    "start": "625000",
    "end": "677000"
  },
  {
    "text": "customers who are building Amazon machine image factories or they will actually create an Amazon machine image",
    "start": "630120",
    "end": "635480"
  },
  {
    "text": "and then what they do is they use things like Packer or SCCM or ansible to inject",
    "start": "635480",
    "end": "643230"
  },
  {
    "text": "different configurations into those Amazon machine images they take a snapshot and then they automatically",
    "start": "643230",
    "end": "648510"
  },
  {
    "text": "publish that as part of their deployment workflow right so I'm not maintaining this huge library of gold images I'm",
    "start": "648510",
    "end": "654300"
  },
  {
    "text": "just basically creating these on point in time you know on-demand Amazon",
    "start": "654300",
    "end": "659970"
  },
  {
    "text": "machine image is to deploy my infrastructure you know you can also do this for dev tests for cloning or other",
    "start": "659970",
    "end": "665460"
  },
  {
    "text": "cloning your databases other server environment there is integration with things to help do consistent snapshots for databases",
    "start": "665460",
    "end": "672330"
  },
  {
    "text": "disaster recovery either AZ disaster recovery or regional disaster recovery and then you can create these Amy's like",
    "start": "672330",
    "end": "679600"
  },
  {
    "text": "I was talking about before where basically I have my custom ami and then I can deploy that across the world using",
    "start": "679600",
    "end": "685600"
  },
  {
    "text": "snapshot technology right so this is how you would move your private machine",
    "start": "685600",
    "end": "690670"
  },
  {
    "text": "images and share them with your you know your co-workers or other partners or customers or whatever so really quick",
    "start": "690670",
    "end": "698950"
  },
  {
    "start": "697000",
    "end": "741000"
  },
  {
    "text": "managing snapshots you know the biggest most important thing that I can tell you is tag everything all the time because",
    "start": "698950",
    "end": "704920"
  },
  {
    "text": "you know I've gone into customer environments and done well architected reviews where I find that a large",
    "start": "704920",
    "end": "710230"
  },
  {
    "text": "percentage of their bill unfortunately is snapshots that they've created and never never thought of right so take",
    "start": "710230",
    "end": "715450"
  },
  {
    "text": "advantage of tags they're free you can put them on there you can actually see what's going on snapshot scheduler",
    "start": "715450",
    "end": "720940"
  },
  {
    "text": "there's a few different tools out there now to schedule snapshots for automated you know quick dr recovery purposes we",
    "start": "720940",
    "end": "727120"
  },
  {
    "text": "also have a data lifecycle manager now for EBS so I don't know if you guys have seen that but it actually gives you the ability to create schedules and look at",
    "start": "727120",
    "end": "733360"
  },
  {
    "text": "different tags to perform different pruning cleaning migration options for",
    "start": "733360",
    "end": "738880"
  },
  {
    "text": "your career snapshots and then finally you know take a look at things like Amazon Cloud Watch in lambda because",
    "start": "738880",
    "end": "745990"
  },
  {
    "start": "741000",
    "end": "780000"
  },
  {
    "text": "depending like you know we talked about the auto recovery for example right the auto recovery metric that tells us the instance health checks have failed cloud",
    "start": "745990",
    "end": "753100"
  },
  {
    "text": "watch is where I would go to create that alarm to tell me that hey there's something going on with this ec2 instance I want to go ahead and",
    "start": "753100",
    "end": "759160"
  },
  {
    "text": "automatically restart it and then Claude watch can then inform a lambda function and say here's the instance ID I need restarted please Institute that",
    "start": "759160",
    "end": "765910"
  },
  {
    "text": "automatic recovery dynamodb is a great place to store a lot of the different metadata about your your snapshots and",
    "start": "765910",
    "end": "772150"
  },
  {
    "text": "your different instances so that you can correlate those things together I think",
    "start": "772150",
    "end": "778120"
  },
  {
    "text": "that's it thanks for have so Rob hopefully defined some of the base",
    "start": "778120",
    "end": "784780"
  },
  {
    "start": "780000",
    "end": "792000"
  },
  {
    "text": "services and primitives they've acquired to protect your ec2 instances that are running EBS so why do I do now is talk",
    "start": "784780",
    "end": "792700"
  },
  {
    "text": "about how rubric does it how we are actually integrating with those api's and of all across many of those services",
    "start": "792700",
    "end": "799270"
  },
  {
    "text": "you know to protect you see to state so before I do that I'm",
    "start": "799270",
    "end": "804510"
  },
  {
    "start": "803000",
    "end": "900000"
  },
  {
    "text": "actually to do a very quick short intro on who we are in couple of things that we do around AWS",
    "start": "804510",
    "end": "811200"
  },
  {
    "text": "so since move expire and for most of you we're basically a data management",
    "start": "811200",
    "end": "817440"
  },
  {
    "text": "company or data protection company that's going about the task of reinventing I couldn't help myself use",
    "start": "817440",
    "end": "823770"
  },
  {
    "text": "that pun to reinvent the way that people think about how to protect their environment where these on-premises or",
    "start": "823770",
    "end": "828959"
  },
  {
    "text": "running in the cloud and what we looked at was data protection today it's a",
    "start": "828959",
    "end": "834300"
  },
  {
    "text": "bunch of point solutions that are kind of put together I mix it very complex to manage really hard to scale so we took",
    "start": "834300",
    "end": "841800"
  },
  {
    "text": "the approach was saying what if we could converge all those various parts and pieces that does your backups and we",
    "start": "841800",
    "end": "847770"
  },
  {
    "text": "stores and archiving and indexing and deduplication compress that down to a",
    "start": "847770",
    "end": "853529"
  },
  {
    "text": "single storage a software platform that you can install on x86 hardware or even",
    "start": "853529",
    "end": "859589"
  },
  {
    "text": "on a set of ec2 instances and then we've built it out using distributed systems principles so you can actually scale",
    "start": "859589",
    "end": "866430"
  },
  {
    "text": "linearly both capacity and performance just by adding new goobric instances and then we extend that capability up to a",
    "start": "866430",
    "end": "873980"
  },
  {
    "text": "various public cloud providers including AWS to extend what the customers our",
    "start": "873980",
    "end": "880020"
  },
  {
    "text": "state is where they can run their workloads and we're a premier partner",
    "start": "880020",
    "end": "885420"
  },
  {
    "text": "with AWS and so we've worked them quite a bit to build capabilities in to allow",
    "start": "885420",
    "end": "891360"
  },
  {
    "text": "customers to migrate to the cloud and then once they're in the cloud to build you a number of things to simplify them",
    "start": "891360",
    "end": "898020"
  },
  {
    "text": "data management needs so I'm going to quickly go through some of those the",
    "start": "898020",
    "end": "903089"
  },
  {
    "start": "900000",
    "end": "932000"
  },
  {
    "text": "first solution that we put out with something called cloud out and it's really simple the idea is for customers",
    "start": "903089",
    "end": "908579"
  },
  {
    "text": "who don't want to use tape anymore oh don't want to store a lot of old backup files on disk in the on their data",
    "start": "908579",
    "end": "915870"
  },
  {
    "text": "center they basically can use s3 or Amazon or Amazon glacier as a target as",
    "start": "915870",
    "end": "921270"
  },
  {
    "text": "a storage repository and we enable customers do that to take backups their environment and they store that in s3 or",
    "start": "921270",
    "end": "927120"
  },
  {
    "text": "Amazon glacier or whichever target they want to use and then cloud on is the",
    "start": "927120",
    "end": "934020"
  },
  {
    "start": "932000",
    "end": "971000"
  },
  {
    "text": "ability to say once you back up images are running an s3 we give customers the options of doing something",
    "start": "934020",
    "end": "940140"
  },
  {
    "text": "like taking your let's say your VMware backups or your hyper-v backups and be",
    "start": "940140",
    "end": "945570"
  },
  {
    "text": "able to convert that into an app and Amazon machine image your screen can be used to launch essentially a replica of",
    "start": "945570",
    "end": "952530"
  },
  {
    "text": "your on-prem environment but running in AWS so you can think of the use cases for that are typically test dev",
    "start": "952530",
    "end": "958050"
  },
  {
    "text": "environments disaster recovery and we have quite a few customers who use that as a kind of",
    "start": "958050",
    "end": "964530"
  },
  {
    "text": "part of their migration strategy from on-premises to the cloud and then once",
    "start": "964530",
    "end": "972300"
  },
  {
    "text": "they're running on in AWS or maybe you're a customer who'd never seen the inside of a datacenter who've never",
    "start": "972300",
    "end": "978390"
  },
  {
    "text": "touch VMware or physical machine we want also give you the capability of backing",
    "start": "978390",
    "end": "984630"
  },
  {
    "text": "up your workloads running in EWS and so we enable the ability to send",
    "start": "984630",
    "end": "990000"
  },
  {
    "text": "essentially in run a cluster of ec2 instances they're running out rupert",
    "start": "990000",
    "end": "995520"
  },
  {
    "text": "cloud data management platform and then you're able to protect it you see two instances from a filesystem level or",
    "start": "995520",
    "end": "1002420"
  },
  {
    "text": "from an application level and speaking of application level specifically we",
    "start": "1002420",
    "end": "1007850"
  },
  {
    "start": "1005000",
    "end": "1041000"
  },
  {
    "text": "have the ability to protect database relational databases such as sequel server and Oracle where we basically can",
    "start": "1007850",
    "end": "1015400"
  },
  {
    "text": "integrate with those database software take a consistent snapshot and then back",
    "start": "1015400",
    "end": "1021170"
  },
  {
    "text": "those up and that gives you an also to logs to give you the ability to restore to any point in time so this is",
    "start": "1021170",
    "end": "1026600"
  },
  {
    "text": "specifically for customers who are running ec2 and for whatever reason it's chosen not to use odd yes for these",
    "start": "1026600",
    "end": "1033760"
  },
  {
    "text": "scenario but to install and run or go a sequel server on their ec2 instances",
    "start": "1033760",
    "end": "1039410"
  },
  {
    "text": "themselves and then we're seeing an increasing number of customers who are",
    "start": "1039410",
    "end": "1044530"
  },
  {
    "start": "1041000",
    "end": "1106000"
  },
  {
    "text": "in the know sequel space particularly Cassandra and MongoDB and that presents",
    "start": "1044530",
    "end": "1050060"
  },
  {
    "text": "a different set of challenges than relational databases specifically we have a lot of customers who are starting",
    "start": "1050060",
    "end": "1056000"
  },
  {
    "text": "to realize replication isn't backup so when you when you do replication only and you make a mistake like delete some",
    "start": "1056000",
    "end": "1063590"
  },
  {
    "text": "files that gets replicated over so they starting to look at taking snap point in",
    "start": "1063590",
    "end": "1068600"
  },
  {
    "text": "time shots the problem is how do you take application consistent snapshot of a no",
    "start": "1068600",
    "end": "1075289"
  },
  {
    "text": "sequel database that's been shorted across multiple regions multiple nodes so their data silos a company that was",
    "start": "1075289",
    "end": "1082880"
  },
  {
    "text": "founded to be able to do that to help customers we were to take a consistent point in time snapshot of your MongoDB",
    "start": "1082880",
    "end": "1090230"
  },
  {
    "text": "or Cassandra database and then be able to restore from it in a very simple manner so we've acquired a company and",
    "start": "1090230",
    "end": "1095539"
  },
  {
    "text": "are working to integrate their software into our core products you can use our product to do both relational databases",
    "start": "1095539",
    "end": "1102169"
  },
  {
    "text": "there's no sequel databases and then I want to talk this is what I'm going to",
    "start": "1102169",
    "end": "1108320"
  },
  {
    "start": "1106000",
    "end": "1134000"
  },
  {
    "text": "focus most of our time it's around our native Amazon ec2 protection so this is basically a way where you can take by",
    "start": "1108320",
    "end": "1114860"
  },
  {
    "text": "the rubric instances running on-premises or as a cloud customer will integrate the EFD Amazon ec2 api's to take EBS",
    "start": "1114860",
    "end": "1122960"
  },
  {
    "text": "snapshots by Amazon the Machine machine jiz and we let you handle that or that",
    "start": "1122960",
    "end": "1128090"
  },
  {
    "text": "data lifecycle management in a very simple manner so in the use cases for",
    "start": "1128090",
    "end": "1135950"
  },
  {
    "start": "1134000",
    "end": "1198000"
  },
  {
    "text": "that primarily around right now lock we have customers who are actually taking those snapshots manually or they",
    "start": "1135950",
    "end": "1142399"
  },
  {
    "text": "are managing a whole bunch of scripts to be able to take snapshots and I've we've gotten number of customers who don't",
    "start": "1142399",
    "end": "1149000"
  },
  {
    "text": "expire their snapshots automatically so they're running a large bill it's Rob mentioned just trying to just hosting",
    "start": "1149000",
    "end": "1155630"
  },
  {
    "text": "old snapshots so we want to be able simplify that we also want to simplify file level recovery so it's pretty easy",
    "start": "1155630",
    "end": "1162710"
  },
  {
    "text": "to restore an entire ABS volume from a snapshot charlie was still a single file take some work because you have to know",
    "start": "1162710",
    "end": "1169010"
  },
  {
    "text": "where that file is and be able to know which snap snapshot going to take it from so we wanted simple we're",
    "start": "1169010",
    "end": "1174500"
  },
  {
    "text": "simplifying that through our product we also as well I mentioned but it'll help",
    "start": "1174500",
    "end": "1179539"
  },
  {
    "text": "customers will easily copy armies across regions but this potentially disaster",
    "start": "1179539",
    "end": "1184730"
  },
  {
    "text": "recovery use cases and finally for customers who are hybrid we're basically human solution where they can protect",
    "start": "1184730",
    "end": "1190789"
  },
  {
    "text": "their on-premise environment or their EWS environment using the same tools the same API sets okay so I want to dive a",
    "start": "1190789",
    "end": "1199820"
  },
  {
    "start": "1198000",
    "end": "1322000"
  },
  {
    "text": "little deeper about how what primitives are actually being used inside of ec2 and how why we make the",
    "start": "1199820",
    "end": "1206480"
  },
  {
    "text": "choice to integrate those specific API so feminism so most some or most of you",
    "start": "1206480",
    "end": "1212000"
  },
  {
    "text": "might know that there is actually two ways to create a snapshot EVs Tasha today there's a create snapshot",
    "start": "1212000",
    "end": "1218000"
  },
  {
    "text": "primitive and the create image primitive so the crate snapshot frame is basically the single you basically doing",
    "start": "1218000",
    "end": "1224480"
  },
  {
    "text": "issue a crate snapshot command that takes a snapshot of the EBS volumes that you dictate whether they be root or non",
    "start": "1224480",
    "end": "1231500"
  },
  {
    "text": "root volumes and then after that you need to issue a create image sorry registered image command which will then",
    "start": "1231500",
    "end": "1238220"
  },
  {
    "text": "take that snapshot create an army out of it and then register the army with your account so they can be used the second",
    "start": "1238220",
    "end": "1246560"
  },
  {
    "text": "option is a single primitive called the create image primitive and that essentially does the create a snapshot",
    "start": "1246560",
    "end": "1253600"
  },
  {
    "text": "create image and register image in a single API call and beyond just be able",
    "start": "1253600",
    "end": "1260840"
  },
  {
    "text": "to do that in a single API called a very important thing that is often overlooked is you'll come to the create API car",
    "start": "1260840",
    "end": "1266840"
  },
  {
    "text": "equate army section it carries over something called an ec2 building protocol so I don't know who hopefully",
    "start": "1266840",
    "end": "1274060"
  },
  {
    "text": "most of you know what that is it's basically a piece of code that's in different images that you may be",
    "start": "1274060",
    "end": "1280130"
  },
  {
    "text": "launching from AWS that's one example with the Red Hat Linux so the ec2",
    "start": "1280130",
    "end": "1286040"
  },
  {
    "text": "building particle basically allows the cusp gives customer permission to update their images or the gifts are west from",
    "start": "1286040",
    "end": "1293210"
  },
  {
    "text": "the Red Hat repo so if you don't have that billing code you can't do the updates so the create image call will",
    "start": "1293210",
    "end": "1300440"
  },
  {
    "text": "automatically copy that popular protocol over there's actually no way to do that if you just issued a create snapshot and",
    "start": "1300440",
    "end": "1306410"
  },
  {
    "text": "then the create image separately although the register image separates so that's why we so as a result we've",
    "start": "1306410",
    "end": "1312020"
  },
  {
    "text": "chosen to use integrate with the create image call so that you get that full army with the protocol instantiated so",
    "start": "1312020",
    "end": "1322940"
  },
  {
    "start": "1322000",
    "end": "1351000"
  },
  {
    "text": "once we've done that obviously it's easy to take an antimatter shot you can do that now from the EDPs console what's",
    "start": "1322940",
    "end": "1329030"
  },
  {
    "text": "really important is the ability to be able to manage the data lifecycle of that snapshot so we have something",
    "start": "1329030",
    "end": "1334520"
  },
  {
    "text": "called an SLA domain which is policy container on all you need to do is define how many snapshots you want",
    "start": "1334520",
    "end": "1339620"
  },
  {
    "text": "when you want to take them how frequently and when do you want to expire them and underneath the covers will communicate with the ec2 API",
    "start": "1339620",
    "end": "1346100"
  },
  {
    "text": "according to your policies and manage all that for you and then to restore an",
    "start": "1346100",
    "end": "1353210"
  },
  {
    "start": "1351000",
    "end": "1409000"
  },
  {
    "text": "ec2 instance it's really just as simple as navigating through a calendar view to",
    "start": "1353210",
    "end": "1358340"
  },
  {
    "text": "picking the snapshot and then issuing either restore command which will do an",
    "start": "1358340",
    "end": "1364190"
  },
  {
    "text": "in-place restore of that end of that ec2 instance or you can do an export which would then launch a copy of the instance",
    "start": "1364190",
    "end": "1371420"
  },
  {
    "text": "in it in the same availability zone or a different zone or even a different region so that's the ability to copy the",
    "start": "1371420",
    "end": "1378020"
  },
  {
    "text": "I'm sure Amazon machine image over we're kind of doing all that under the cut abstracting the the detail so that you",
    "start": "1378020",
    "end": "1385250"
  },
  {
    "text": "can always do that with a simple click but under the covers this is what's actually be happening when we do a",
    "start": "1385250",
    "end": "1390440"
  },
  {
    "text": "restore snapshot so if you were to do it manually or to create your own script this is actually what you would need to",
    "start": "1390440",
    "end": "1396200"
  },
  {
    "text": "do for every for every restore so again we're abstracting the other way so you",
    "start": "1396200",
    "end": "1401870"
  },
  {
    "text": "don't have to worry about that you just have to click find a snapshot and click a button and we'll issue these commands",
    "start": "1401870",
    "end": "1407060"
  },
  {
    "text": "for you and the last thing I'll talk about and then before turning over the bill is this idea of BIM ado file level",
    "start": "1407060",
    "end": "1415070"
  },
  {
    "start": "1409000",
    "end": "1486000"
  },
  {
    "text": "restores so if you think about it today if you're just using the Amazon",
    "start": "1415070",
    "end": "1420310"
  },
  {
    "text": "primitives if I want to if you want to store a single file first you have to be",
    "start": "1420310",
    "end": "1425360"
  },
  {
    "text": "allocate that file so how are you likely that file if you don't remember where it is you basically have to restore every",
    "start": "1425360",
    "end": "1432530"
  },
  {
    "text": "single snapshot that you think might have to file until you find the one you want and then we store it so we don't",
    "start": "1432530",
    "end": "1438380"
  },
  {
    "text": "want you to have to do that so what we actually do when when we issue the create a just call to take the snapshot",
    "start": "1438380",
    "end": "1444530"
  },
  {
    "text": "in the army leap or we actually create a temporary volume off the EBS snapshot",
    "start": "1444530",
    "end": "1451340"
  },
  {
    "text": "and then we actually spin up what we call a chant temporary or transient rubric instance so the single instance",
    "start": "1451340",
    "end": "1458750"
  },
  {
    "text": "that has a rubric software running on it that will then mount that vow that value",
    "start": "1458750",
    "end": "1464270"
  },
  {
    "text": "and actually doing index of the metadata and then pass it to our database so",
    "start": "1464270",
    "end": "1469610"
  },
  {
    "text": "what happens is we will we will know not only what volumes have been snapped Charlotte but will know what files are",
    "start": "1469610",
    "end": "1475520"
  },
  {
    "text": "actually in each of those snapshots and then when that's done we will terminate the instance and also delete the",
    "start": "1475520",
    "end": "1482090"
  },
  {
    "text": "temporary volume so it doesn't you call it up space and costs what that allows",
    "start": "1482090",
    "end": "1487429"
  },
  {
    "start": "1486000",
    "end": "1594000"
  },
  {
    "text": "us to do is you can actually do a file recovery in a number of ways you can actually search through a particular",
    "start": "1487429",
    "end": "1494530"
  },
  {
    "text": "snapshot through the file system to look for a particular file you want well sin",
    "start": "1494530",
    "end": "1499640"
  },
  {
    "text": "or since we already indexed every single file you can actually do like a Google type search we just pick the host do a",
    "start": "1499640",
    "end": "1507010"
  },
  {
    "text": "search by a file name and we'll tell you every single instance of that file that",
    "start": "1507010",
    "end": "1513470"
  },
  {
    "text": "you have across all your snapshots for that particular instance and you then you can choose what what copy or what",
    "start": "1513470",
    "end": "1521020"
  },
  {
    "text": "version of that snap that file you want and then do a restore for it and when we do that under the cover is what we're",
    "start": "1521020",
    "end": "1527150"
  },
  {
    "text": "doing is we fought you find our snapshot of the file you tell us hey I want a file from a snapshot that was done three",
    "start": "1527150",
    "end": "1535040"
  },
  {
    "text": "months ago on this date will find that snapshot for you we will then create a volume",
    "start": "1535040",
    "end": "1540470"
  },
  {
    "text": "automatically from that snapshot we'll mount that volume and then we'll pull",
    "start": "1540470",
    "end": "1547220"
  },
  {
    "text": "the file out and give it back to you so that you can restore it and then we'll shut down all this all the the instance",
    "start": "1547220",
    "end": "1553490"
  },
  {
    "text": "that was launched and the volume that was created in order to restore the file so again this is so we're really taking",
    "start": "1553490",
    "end": "1561950"
  },
  {
    "text": "away a lot of the manual labor kind of undifferentiated labor that's involved in just doing a simple file restore so",
    "start": "1561950",
    "end": "1568970"
  },
  {
    "text": "we have customers who tell us with sometimes they come hours right be able to find a favorite it important but if a",
    "start": "1568970",
    "end": "1575690"
  },
  {
    "text": "single file and now they can do it in a matter of minutes so and with that I am going to turn over the bill so you",
    "start": "1575690",
    "end": "1583040"
  },
  {
    "text": "actually do a demo and then talk about some ways that were integrating with ec2",
    "start": "1583040",
    "end": "1588049"
  },
  {
    "text": "API and our API to kind of do some interesting use cases so go thank you",
    "start": "1588049",
    "end": "1594280"
  },
  {
    "start": "1594000",
    "end": "2308000"
  },
  {
    "text": "cool demo time okay so I'm just gonna walk you through",
    "start": "1594280",
    "end": "1601690"
  },
  {
    "text": "some of the basics of the ec2 native protection configuration application of SLA z' protection recovery things of",
    "start": "1601690",
    "end": "1608980"
  },
  {
    "text": "that nature and then we're gonna dive immediately into sort of an art of the possible thing around extending the",
    "start": "1608980",
    "end": "1616240"
  },
  {
    "text": "capabilities of the initial release of this capability using both Amazon's",
    "start": "1616240",
    "end": "1621490"
  },
  {
    "text": "api's and the rubric api's as well so here is the rubric console and this is",
    "start": "1621490",
    "end": "1627730"
  },
  {
    "text": "where you would add what we're calling a cloud source here in this case AWS accounts you can obviously add multiple",
    "start": "1627730",
    "end": "1634960"
  },
  {
    "text": "accounts here and when you add an account essentially all you do is",
    "start": "1634960",
    "end": "1640060"
  },
  {
    "text": "provide credentials that allow access to the account and then specify which regions that you want to protect so in",
    "start": "1640060",
    "end": "1645940"
  },
  {
    "text": "this pod we're protecting us East Ohio and North California and then the the",
    "start": "1645940",
    "end": "1651670"
  },
  {
    "text": "file level indexing that Ken was talking about is driven by a temporary instance that we spin up that mounts the EBS",
    "start": "1651670",
    "end": "1657100"
  },
  {
    "text": "volumes that are created from the snapshots that we create and so we need a place to launch that temporary instance and so here you can see we've",
    "start": "1657100",
    "end": "1663820"
  },
  {
    "text": "toggled on the file level indexing in the ohio region and we've specified VPC subnet and a security group that'll be",
    "start": "1663820",
    "end": "1670750"
  },
  {
    "text": "used when we launch this transient instance that does the indexing and recovery operations when you've got a",
    "start": "1670750",
    "end": "1678790"
  },
  {
    "text": "cloud source added down in this cloud workloads tab here will actually populate accounts and instances that we",
    "start": "1678790",
    "end": "1683830"
  },
  {
    "text": "can protect but I just want to show you guys real fast ahead of time what the policy construct that we use looks like",
    "start": "1683830",
    "end": "1691620"
  },
  {
    "text": "and the nice thing about these policies is they're portable across workload types so I could essentially use the",
    "start": "1696129",
    "end": "1702320"
  },
  {
    "text": "same policy and apply a tune on-premises workload Nazz database what-have-you and basically we take a deck letter of",
    "start": "1702320",
    "end": "1709190"
  },
  {
    "text": "approach to data protection so instead of you know scheduling jobs and saying hey protect this workload at this point",
    "start": "1709190",
    "end": "1715669"
  },
  {
    "text": "in time than this one and this one than this one instead we just create this policy document we say I mean zoom in a",
    "start": "1715669",
    "end": "1720980"
  },
  {
    "text": "little bit on that we say hey take a snapshot every four hours retain that",
    "start": "1720980",
    "end": "1727820"
  },
  {
    "text": "four hour interval for three days then prune it down to dailies which are retained for 30 days then prune it down",
    "start": "1727820",
    "end": "1733009"
  },
  {
    "text": "to monthlies which are retained for a year and then prune it down to year leaves which are retained for three",
    "start": "1733009",
    "end": "1738169"
  },
  {
    "text": "years and we handle all the scheduling and D conflicting any jobs that might be",
    "start": "1738169",
    "end": "1743179"
  },
  {
    "text": "running and we just report whether or not you're adhering to the SLA or in violation of the SLA so sort of getting",
    "start": "1743179",
    "end": "1750019"
  },
  {
    "text": "data protection out of the way of day-to-day ops and then what we can do",
    "start": "1750019",
    "end": "1757249"
  },
  {
    "text": "here is we can assign those policies at either the account level or at the",
    "start": "1757249",
    "end": "1762529"
  },
  {
    "text": "instance level so here we've got one account that has no policy assigned to",
    "start": "1762529",
    "end": "1767570"
  },
  {
    "text": "it and we can just come in here we can select one of these policies click Submit and it would be assigned at the",
    "start": "1767570",
    "end": "1773389"
  },
  {
    "text": "account level and all the instances within the account within weather regions we've chosen to protect will",
    "start": "1773389",
    "end": "1779629"
  },
  {
    "text": "automatically inherit that policy and we can actually come in here at the instance level and we can declare",
    "start": "1779629",
    "end": "1785149"
  },
  {
    "text": "policies directly on instances which is what's been done in this lab environment so you can see the vast majority instances are unassigned and then we've",
    "start": "1785149",
    "end": "1792889"
  },
  {
    "text": "got a couple of these instances here that have policies direct assigned to them so like for a test dev account this would be useful where you might protect",
    "start": "1792889",
    "end": "1799759"
  },
  {
    "text": "the entire account with a bronze SLA and then as stuff was getting near in your production and became near and dear to",
    "start": "1799759",
    "end": "1805340"
  },
  {
    "text": "your heart maybe you would do a direct assign of a gold SLA to those more important workloads drilling into what",
    "start": "1805340",
    "end": "1812809"
  },
  {
    "text": "this looks like in our console and this is sort of a consistent view for you know cloud native instances these fear",
    "start": "1812809",
    "end": "1819259"
  },
  {
    "text": "VMs whatever workload you're protecting you get the same sort of heads-up display you get a calendar view a little",
    "start": "1819259",
    "end": "1824570"
  },
  {
    "text": "activity monitor that sort of describes what's going on with regards since you can see where it lives what is",
    "start": "1824570",
    "end": "1830470"
  },
  {
    "text": "what is instance ideas and its name is I can do cool stuff here like single file search across all the snapshots for that",
    "start": "1830470",
    "end": "1838540"
  },
  {
    "text": "instance so this is index data that that temporary instance actually generated and passed back to the rubric cluster this cluster is actually on-premises so",
    "start": "1838540",
    "end": "1845140"
  },
  {
    "text": "there's a physical appliance that's running this could just as easily be you know cloud based cluster and we can see",
    "start": "1845140",
    "end": "1850960"
  },
  {
    "text": "all the snapshots where that file lives and I can pick which one I might want to recover that file out of and we can",
    "start": "1850960",
    "end": "1856360"
  },
  {
    "text": "download it locally today so really just abstracting away a lot of complexity that come with single file recovery",
    "start": "1856360",
    "end": "1862090"
  },
  {
    "text": "operations in EBS snaps and our snapshots on the back end like inside",
    "start": "1862090",
    "end": "1868480"
  },
  {
    "text": "the actual console just look like this so they're Amazon machine images with block device mappings that reference the",
    "start": "1868480",
    "end": "1874000"
  },
  {
    "text": "the EBS snaps that represent the original volumes that were assigned to the instance we're protecting and then",
    "start": "1874000",
    "end": "1879070"
  },
  {
    "text": "we inject a bunch of metadata here into into the items that we create and you",
    "start": "1879070",
    "end": "1885580"
  },
  {
    "text": "know that's useful for reporting purposes or automation if you're maybe tying some of these elements into",
    "start": "1885580",
    "end": "1892390"
  },
  {
    "text": "pipelines or what have you you may want to be able to reverse engineer where it came from through our API so this is useful data on the on the Amazon machine",
    "start": "1892390",
    "end": "1899650"
  },
  {
    "text": "images and snapshots themselves and so for each one of these snapshots we'll",
    "start": "1899650",
    "end": "1904780"
  },
  {
    "text": "have a corresponding Amazon machine image and then we can drill down we can",
    "start": "1904780",
    "end": "1910000"
  },
  {
    "text": "go to an individual snapshot we can do file level recovery from that perspective as well so we're kind of looking at the instance level across all",
    "start": "1910000",
    "end": "1916360"
  },
  {
    "text": "snapshots initially here we can walk the file system in a single snapshot if you want to or similarly just search within",
    "start": "1916360",
    "end": "1923350"
  },
  {
    "text": "that individual snapshot we can restore",
    "start": "1923350",
    "end": "1928840"
  },
  {
    "text": "in place so can kind of describe what that look like if I were to hit restore here would just power down the instance create volumes swap the volumes out from",
    "start": "1928840",
    "end": "1936130"
  },
  {
    "text": "under the instance and power the instance back up we got plenty of time so we can do an export as well so I",
    "start": "1936130",
    "end": "1943810"
  },
  {
    "text": "could call this drilling test the invent select an instance type I'm",
    "start": "1943810",
    "end": "1952529"
  },
  {
    "text": "gonna go cheap and do a custom instance type and then we could choose to export",
    "start": "1952529",
    "end": "1959100"
  },
  {
    "text": "this to another region if we wanted to so maybe you're using a single account frauds in one region test Devi's in",
    "start": "1959100",
    "end": "1964320"
  },
  {
    "text": "another or something you could you could bring it cross region here I'll just Oh bad demo gods",
    "start": "1964320",
    "end": "1972620"
  },
  {
    "text": "and then you give it to something that a security group that you're gonna launch into and then you can run the export job",
    "start": "1988520",
    "end": "1997790"
  },
  {
    "text": "and so what that's doing behind the scenes is since we're going in the same region it's using the existing a me if we're going across region we would copy",
    "start": "1997790",
    "end": "2003550"
  },
  {
    "text": "the a me to the distant region first and then we're just instantiating you know using the run instances API call to",
    "start": "2003550",
    "end": "2009690"
  },
  {
    "text": "actually fire up that instance so if I come over here to the console there you see to dashboard this guy's probably",
    "start": "2009690",
    "end": "2015250"
  },
  {
    "text": "still firing up but somewhere here you would see my exported instance and you",
    "start": "2015250",
    "end": "2023440"
  },
  {
    "text": "know it's running and booing up now and then that exported instance would also",
    "start": "2023440",
    "end": "2028720"
  },
  {
    "text": "have a bunch of metadata it allows you to trace it back to where it originally",
    "start": "2028720",
    "end": "2034240"
  },
  {
    "text": "came from you know what its original source and since an instance ID was what its original enemy was so on and so",
    "start": "2034240",
    "end": "2039400"
  },
  {
    "text": "forth so really just the simplification of sort of the life cycle of these",
    "start": "2039400",
    "end": "2045850"
  },
  {
    "text": "Amazon machine images and these snapshots and then making making data protection accessible regardless of",
    "start": "2045850",
    "end": "2052210"
  },
  {
    "text": "whether or not you're protecting cloud workloads on-premises workloads application workloads what-have-you single set of api's single policy",
    "start": "2052210",
    "end": "2059200"
  },
  {
    "text": "construct and so now what I'm going to",
    "start": "2059200",
    "end": "2066280"
  },
  {
    "text": "talk about is just kinda like some art of the possible stuff with regards to what we can do with rubric and what we",
    "start": "2066280",
    "end": "2072040"
  },
  {
    "text": "had some customers asking us to be able to do in AWS today so I'm gonna give you",
    "start": "2072040",
    "end": "2077350"
  },
  {
    "text": "a little bit of background I'm going to jump back to the the demo real quick I'm going to apply a tag to an instance and",
    "start": "2077350",
    "end": "2082690"
  },
  {
    "text": "then I'm gonna walk you through the architecture that's gonna take that tag and assign an SLA based on the tag value",
    "start": "2082690",
    "end": "2087820"
  },
  {
    "text": "and then we'll float back and we'll do the big reveal and you'll see that the SLA actually gets assigned so the",
    "start": "2087820",
    "end": "2094720"
  },
  {
    "text": "scenario here is a customer that's a hybrid cloud user they're pretty mature AWS consumer they were using this cloud",
    "start": "2094720",
    "end": "2102490"
  },
  {
    "text": "native functionality to apply assays of the account and instance level today but they were really diving deep into more",
    "start": "2102490",
    "end": "2108190"
  },
  {
    "text": "automated deployment paradigms and they were seeking a push based data protection architecture as opposed to a",
    "start": "2108190",
    "end": "2114670"
  },
  {
    "text": "pull based data protection architecture so what they what they were really we're gonna do is",
    "start": "2114670",
    "end": "2119810"
  },
  {
    "text": "assign it an SLA to an instance by tagging that instance with a specific tag and then they wanted that action to",
    "start": "2119810",
    "end": "2127400"
  },
  {
    "text": "drive the application of an isolate to the instance and the data protection",
    "start": "2127400",
    "end": "2133160"
  },
  {
    "text": "that underpins that SLA so if I come back to the demo screen here I'm just",
    "start": "2133160",
    "end": "2140120"
  },
  {
    "text": "gonna refresh and hopefully not be logged out of stuff cool so you can see",
    "start": "2140120",
    "end": "2150380"
  },
  {
    "text": "we've got an instance here there's a workload instance that I'm just using for testing it's got the instance ID",
    "start": "2150380",
    "end": "2155990"
  },
  {
    "text": "it's got the instance name so and so forth we jump into the management console here that instance is right here",
    "start": "2155990",
    "end": "2161120"
  },
  {
    "text": "let me refresh that console make sure we're still good - we are and so if we look in rubric today and we look at this",
    "start": "2161120",
    "end": "2167780"
  },
  {
    "text": "specific instance it does not have an SLA assigned to it so it's essentially an unprotected instance we've we've",
    "start": "2167780",
    "end": "2173630"
  },
  {
    "text": "added that account we're aware that the instance exists but we're not doing anything with it today and what we seek to do is we seek to be",
    "start": "2173630",
    "end": "2180200"
  },
  {
    "text": "able to come here to this instance or when we provision this instance or through automation you know whatever your management paradigms are we want to",
    "start": "2180200",
    "end": "2186530"
  },
  {
    "text": "be able to tag this instance with an SLA value so let's just say gold here and",
    "start": "2186530",
    "end": "2194570"
  },
  {
    "text": "then when you tag that instance that should drive automation that will assign",
    "start": "2194570",
    "end": "2199610"
  },
  {
    "text": "the SLA to the incident or assign the SLA policy to the instance and data protection kicks off right away and so",
    "start": "2199610",
    "end": "2204980"
  },
  {
    "text": "what this would allow you to do is really use an automated deployment pipeline that just adds the appropriate",
    "start": "2204980",
    "end": "2210500"
  },
  {
    "text": "tag you never even have to touch our api's directly or touch our console and your day is being protected I'll let",
    "start": "2210500",
    "end": "2217910"
  },
  {
    "text": "that run the background I'll kind of walk you through how this works so how",
    "start": "2217910",
    "end": "2223700"
  },
  {
    "text": "it works today is you log in to your ec2 console or you make an API call and you",
    "start": "2223700",
    "end": "2229730"
  },
  {
    "text": "set a value for that rubric SLA tag and that tag could really be any tag that's just the one who chose them for this",
    "start": "2229730",
    "end": "2235100"
  },
  {
    "text": "example cloud trail monitors all of your API calls so I don't how many people are",
    "start": "2235100",
    "end": "2240620"
  },
  {
    "text": "using cloud trail today every hand the room should go up by the way Oh Rob you know these first ones free",
    "start": "2240620",
    "end": "2248440"
  },
  {
    "text": "and soso cloud trail monitors all your API calls and you know log them to a bucket then we can use cloud watch",
    "start": "2248490",
    "end": "2254310"
  },
  {
    "text": "events to take actions when we see specific API calls so what we want to do here is when a tag is created or",
    "start": "2254310",
    "end": "2261120"
  },
  {
    "text": "modified on instance we want to take an action in this case that action is firing a lambda function what that",
    "start": "2261120",
    "end": "2267930"
  },
  {
    "text": "lambda function does behind the scenes is it does a couple of things it grabs metadata out of the event that triggered",
    "start": "2267930",
    "end": "2273690"
  },
  {
    "text": "the function so in this case the value of the rubric SLA tag that we applied as",
    "start": "2273690",
    "end": "2279810"
  },
  {
    "text": "well as the instance ID of the instance that that tag was applied to and it reaches out and it calls the API so",
    "start": "2279810",
    "end": "2286830"
  },
  {
    "text": "rubric cluster and it says hey I've got this instance ID and I've got this name of this SLA that I want to assign can",
    "start": "2286830",
    "end": "2292170"
  },
  {
    "text": "you please go ahead and assign that SLA rubric returns JSON from its at that API",
    "start": "2292170",
    "end": "2298230"
  },
  {
    "text": "call and we log all this and Amazon CloudWatch logs so that y'all can go back through your preferred tooling and audit how well",
    "start": "2298230",
    "end": "2305760"
  },
  {
    "text": "this process is working how do we deploy it it's it's deployed through",
    "start": "2305760",
    "end": "2311190"
  },
  {
    "start": "2308000",
    "end": "2396000"
  },
  {
    "text": "CloudFormation today and we stick the sensitive parameters in the system center manager parameter store what that",
    "start": "2311190",
    "end": "2317160"
  },
  {
    "text": "allows us to do is store sensitive credentials but make sure that they're encrypted with kms and it allows us to",
    "start": "2317160",
    "end": "2323490"
  },
  {
    "text": "retrieve those at runtime use them and then discard them when we're no longer using them so gets us away from storing",
    "start": "2323490",
    "end": "2328680"
  },
  {
    "text": "credentials inside of scripts we actually provision a whole VPC today because this lambda function needs to",
    "start": "2328680",
    "end": "2334890"
  },
  {
    "text": "talk to the rubric api's and the rubric api's might be on a physical cluster that resides in your data center so",
    "start": "2334890",
    "end": "2340140"
  },
  {
    "text": "lambda will actually allow you to expose elastic network interfaces into a V PC and then it can talk using IP addresses",
    "start": "2340140",
    "end": "2346680"
  },
  {
    "text": "in that vbc so if we are talking to a virtualized rubra cluster we would just talk across a V PCP that this",
    "start": "2346680",
    "end": "2353610"
  },
  {
    "text": "CloudFormation template automatically creates or if we're talking to an on-premises cluster that's in your data center we just make sure to expose those",
    "start": "2353610",
    "end": "2360570"
  },
  {
    "text": "network interfaces to a BBC that has a VPN connection back to on-prem and all",
    "start": "2360570",
    "end": "2365760"
  },
  {
    "text": "the requisite firewall rules and whatnot so you can communicate so here's kind of what it looks like we autofill a bunch",
    "start": "2365760",
    "end": "2371580"
  },
  {
    "text": "of this information so really the the red fields are the ones that you would have to fill essentially just choose the AZ's within the region and then give it",
    "start": "2371580",
    "end": "2380010"
  },
  {
    "text": "a bucket name where the zip file for lambda function lives all this is on github it's really just to demonstrate kind of",
    "start": "2380010",
    "end": "2386820"
  },
  {
    "text": "what the cut what consuming this particular stack looks like and then we give it a host name for the rubric",
    "start": "2386820",
    "end": "2393720"
  },
  {
    "text": "cluster or an IP address from there we can use cloud watch events to capture",
    "start": "2393720",
    "end": "2399390"
  },
  {
    "start": "2396000",
    "end": "2454000"
  },
  {
    "text": "the event that we want and then we can trigger the lambda function that actually does all the heavy lifting for the application of the SLA and the big",
    "start": "2399390",
    "end": "2406560"
  },
  {
    "text": "important thing here and I think just something that's generally useful if you're not super familiar with cloud watch events and lambda is is that we",
    "start": "2406560",
    "end": "2412770"
  },
  {
    "text": "only want to fire this thing when a specific event takes place when that tag is updated or created and that allows us",
    "start": "2412770",
    "end": "2419910"
  },
  {
    "text": "to save on lambda since lambda is build by runtime and by memory footprint we",
    "start": "2419910",
    "end": "2425430"
  },
  {
    "text": "really just want to fire the function when we absolutely need to we don't a fire unnecessarily that's kinda what it looks like so I showed you before",
    "start": "2425430",
    "end": "2431810"
  },
  {
    "text": "actually applying the tag to the instance and then on the right hand side here you can see the event pattern that",
    "start": "2431810",
    "end": "2437910"
  },
  {
    "text": "we're using to make sure that we are only capturing the create tags event when we touch this rubric SLA tag and",
    "start": "2437910",
    "end": "2443880"
  },
  {
    "text": "the nice the nice thing about that API call is that create tags API call is used when we update a tag or when we",
    "start": "2443880",
    "end": "2450420"
  },
  {
    "text": "create a net new tag so we don't need to capture two different event types and the payload is lambda and boto three",
    "start": "2450420",
    "end": "2457410"
  },
  {
    "text": "boto three pretty popular Python SDK for interacting with AWS we log using the",
    "start": "2457410",
    "end": "2464880"
  },
  {
    "text": "logging module when you run the login module inside of lambda it automatically logs out to a log stream on cloud watch",
    "start": "2464880",
    "end": "2471450"
  },
  {
    "text": "logs we use boto three to fetch those credentials out of the parameter store and then we also actually pluck out the",
    "start": "2471450",
    "end": "2479580"
  },
  {
    "text": "instance ID and the name of the SLA that we want to apply from the event that",
    "start": "2479580",
    "end": "2485490"
  },
  {
    "text": "Cloud watch events passes to lambda so just by the event firing we're given all of the information that we need to use",
    "start": "2485490",
    "end": "2490860"
  },
  {
    "text": "to actually apply this SLA it's pretty simple once you once you've got all of",
    "start": "2490860",
    "end": "2497820"
  },
  {
    "text": "the underpinnings in place so that that block in the top right there we essentially look up an internal ID for",
    "start": "2497820",
    "end": "2504180"
  },
  {
    "text": "the SLA that we need to apply we look up an internal ID for the instance that we're going to apply it to and then we",
    "start": "2504180",
    "end": "2510690"
  },
  {
    "text": "apply the SLA to the instance and the outputs and we just log it all to cloud watch logs and so coming back over",
    "start": "2510690",
    "end": "2520690"
  },
  {
    "text": "here for the big reveal we applied that tag and if we jump into the rubric",
    "start": "2520690",
    "end": "2527440"
  },
  {
    "text": "cluster here and just do a refresh that",
    "start": "2527440",
    "end": "2536440"
  },
  {
    "text": "SLA was applied to the instance just by playing the tag so yay but I think more",
    "start": "2536440",
    "end": "2542290"
  },
  {
    "text": "more importantly how it's deployed and and what everything looks like behind",
    "start": "2542290",
    "end": "2547540"
  },
  {
    "text": "the scenes is probably what's a value to this crew here so so again it's deployed through cloud formation you can see all of the things that we create when we",
    "start": "2547540",
    "end": "2554079"
  },
  {
    "text": "when we we create this CloudFormation stack here and then basically what we do is we use cloud watch events to identify",
    "start": "2554079",
    "end": "2565300"
  },
  {
    "text": "the particular event that we want to capture and then what we want to do once we notice that that event has happened so if we come here we can look at the",
    "start": "2565300",
    "end": "2571540"
  },
  {
    "text": "rules on cloud watch events there's a bunch of stuff here there's other automation that I've built but this tag event is the one that's of",
    "start": "2571540",
    "end": "2577720"
  },
  {
    "text": "particular importance and this is the example that was shown on the slides there is that specific event pattern that targets that specific tag when it's",
    "start": "2577720",
    "end": "2584710"
  },
  {
    "text": "created or modified and then we just tell it to trigger this lambda function whenever the criteria in this event",
    "start": "2584710",
    "end": "2591010"
  },
  {
    "text": "pattern is met and that lambda function again it consists of all the boat of three stuff and the rubric API calls to",
    "start": "2591010",
    "end": "2596500"
  },
  {
    "text": "assign the SLA and when it happens it writes out to this log stream here and",
    "start": "2596500",
    "end": "2603010"
  },
  {
    "text": "so you can see if we go to the latest event time which they are in a strange",
    "start": "2603010",
    "end": "2610240"
  },
  {
    "text": "order",
    "start": "2610240",
    "end": "2612540"
  },
  {
    "text": "that logs there we go so you can see we",
    "start": "2619290",
    "end": "2624910"
  },
  {
    "text": "captured the event so this is actually the event that was passed directly to lamda here's the value of the SLA and",
    "start": "2624910",
    "end": "2632650"
  },
  {
    "text": "the key that we used to identify that this was the appropriate event we",
    "start": "2632650",
    "end": "2639130"
  },
  {
    "text": "grabbed the rubric API credentials out of the parameter store we get an API token we check the event that triggered",
    "start": "2639130",
    "end": "2645700"
  },
  {
    "text": "this to find the name of the SLA that we want to assign and the instance ID of",
    "start": "2645700",
    "end": "2651070"
  },
  {
    "text": "the instance that way it's supposed to be assigned to and then we look up those internal identifiers x' that we use",
    "start": "2651070",
    "end": "2656470"
  },
  {
    "text": "inside a rubric in order to choose which SLA and which instance internally that",
    "start": "2656470",
    "end": "2661570"
  },
  {
    "text": "we want to execute this automation against we assign the SLA and then we",
    "start": "2661570",
    "end": "2666700"
  },
  {
    "text": "get a bunch of metadata here from rubric that talks about what the outputs of that SLA assignment or and so I think",
    "start": "2666700",
    "end": "2674140"
  },
  {
    "text": "the point of this is is really not to show this particular solution but to",
    "start": "2674140",
    "end": "2679180"
  },
  {
    "text": "show what is possible when you introduce API driven architectures like rubric",
    "start": "2679180",
    "end": "2684670"
  },
  {
    "text": "into a platform that is also API driven like AWS this could be extended to do any number of things and I really like",
    "start": "2684670",
    "end": "2692070"
  },
  {
    "text": "called watch events and event-driven architectures because we can take specific actions only when they need to",
    "start": "2692070",
    "end": "2698470"
  },
  {
    "text": "be taken and we've got a pretty pretty cohesive event pipeline that we can use",
    "start": "2698470",
    "end": "2703660"
  },
  {
    "text": "to build an extensible framework that may be able to be utilized for things in the future so projects like this are the",
    "start": "2703660",
    "end": "2710530"
  },
  {
    "text": "things that drove the creation of our Python SDK in our go SDK so that art of",
    "start": "2710530",
    "end": "2716410"
  },
  {
    "text": "the possible stuff like this becomes more consume consumable to the masses",
    "start": "2716410",
    "end": "2721530"
  },
  {
    "start": "2726000",
    "end": "2772000"
  },
  {
    "text": "and so with that you know we kind of come to the the call-to-action part of this presentation first and foremost if",
    "start": "2726890",
    "end": "2732710"
  },
  {
    "text": "this was interesting to you I work on a small team and there's a lot of cool stuff to do and not enough people to do",
    "start": "2732710",
    "end": "2738620"
  },
  {
    "text": "it I I would venture a guess that many of you have rubric in your environment today check out our github repos check",
    "start": "2738620",
    "end": "2744230"
  },
  {
    "text": "out our SDKs check out some of the canned automation that we've got with popular off-the-shelf tools like you",
    "start": "2744230",
    "end": "2749420"
  },
  {
    "text": "know cm tools or infrastructure provisioning tools we're very close to having having a provider for terraform",
    "start": "2749420",
    "end": "2756890"
  },
  {
    "text": "out there tell us what you like tell us what you don't like tell us what you'd like to see we love building this stuff",
    "start": "2756890",
    "end": "2762290"
  },
  {
    "text": "it's a great job and we'd like to keep it so we need to input from customer base such as yourself and we didn't put",
    "start": "2762290",
    "end": "2767570"
  },
  {
    "text": "from people who aren't using the product that's why they're not using it because we want to make the product better check",
    "start": "2767570",
    "end": "2773270"
  },
  {
    "start": "2772000",
    "end": "2788000"
  },
  {
    "text": "us out in the expo hall so we're in booth 420 I think I saw a coffee machine out there in the morning and beers there in the evening there's a lot of smart",
    "start": "2773270",
    "end": "2779750"
  },
  {
    "text": "people there I'm there too sometimes and we've got a bunch of documentation on the web about these capabilities and",
    "start": "2779750",
    "end": "2785360"
  },
  {
    "text": "other things that we haven't had time to touch on today and most importantly thank you for coming out and spending",
    "start": "2785360",
    "end": "2790730"
  },
  {
    "start": "2788000",
    "end": "2814000"
  },
  {
    "text": "your time with us your time is SuperDuper valuable and there's a lot of sessions going on so thank you very very much",
    "start": "2790730",
    "end": "2796240"
  },
  {
    "text": "please be sure to give us feedback so that we can improve upon our delivery in the future and if you have any questions",
    "start": "2796240",
    "end": "2802910"
  },
  {
    "text": "or you want to dig a little bit deeper hit any of us up once we walk off the stage here and we'd be happy to happy to",
    "start": "2802910",
    "end": "2808520"
  },
  {
    "text": "dig in with you thank you [Applause]",
    "start": "2808520",
    "end": "2816150"
  }
]