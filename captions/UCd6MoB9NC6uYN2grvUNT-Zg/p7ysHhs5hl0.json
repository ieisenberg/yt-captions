[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "hi everybody thank you for being here today today we'll talk about our open source offering uh how",
    "start": "2879",
    "end": "9920"
  },
  {
    "text": "basically the tools and components and infrastructure that netflix open source may help your business to scale and",
    "start": "9920",
    "end": "16000"
  },
  {
    "text": "accelerate your services first a very brief introduction",
    "start": "16000",
    "end": "21359"
  },
  {
    "start": "20000",
    "end": "143000"
  },
  {
    "text": "why you may be here well because you're suffering from really terrible headaches of success you may be in a situation where you have",
    "start": "21359",
    "end": "27760"
  },
  {
    "text": "more developers you have more customers you need higher availability you need that global footprint deployment",
    "start": "27760",
    "end": "34719"
  },
  {
    "text": "and yet you have no time terrible headaches to have",
    "start": "34719",
    "end": "39920"
  },
  {
    "text": "in addition your architecture may look like this your standard 3t architecture where you have your front-end some kind",
    "start": "39920",
    "end": "45280"
  },
  {
    "text": "of ui you have your middle tier services and then you have your rdbms rdbms database and you may be",
    "start": "45280",
    "end": "52480"
  },
  {
    "text": "either in single aws zone or even worse you may be in your own data center",
    "start": "52480",
    "end": "59199"
  },
  {
    "text": "what it needs to be if you really want high availability if you want just globally distributed services you have to be globally distributed deployed",
    "start": "59199",
    "end": "68400"
  },
  {
    "text": "and so that one such picture where you deployed multiple aws regions inside each region your services are",
    "start": "68400",
    "end": "74799"
  },
  {
    "text": "striped across multiple it availability zones and inside",
    "start": "74799",
    "end": "79840"
  },
  {
    "text": "each zone you may also have picture like this where you have tons of various microservices all talking to",
    "start": "79840",
    "end": "86400"
  },
  {
    "text": "each other and some of them are stateless services some of them could be your stateful tier whether it's cassandra",
    "start": "86400",
    "end": "91840"
  },
  {
    "text": "whether it's cash etc so the good news",
    "start": "91840",
    "end": "96880"
  },
  {
    "text": "netflix open source components can help you get there it's all licensed under apache v2",
    "start": "96880",
    "end": "102159"
  },
  {
    "text": "license so free to use and modify as you see fit and it's all available",
    "start": "102159",
    "end": "107600"
  },
  {
    "text": "at our open source site at netflix.github.com",
    "start": "107600",
    "end": "112320"
  },
  {
    "text": "besides open sourcing software our main business is actually allowing people to stream movies and tv shows we have over 50",
    "start": "113520",
    "end": "119680"
  },
  {
    "text": "million satisfied customers in over 50 countries now and that's growing and what i do there",
    "start": "119680",
    "end": "125600"
  },
  {
    "text": "is i work with various platform engineering teams we make the most common building blocks that the rest of the engineering uses",
    "start": "125600",
    "end": "132319"
  },
  {
    "text": "to write and deploy their applications and also because we started open sourcing a lot of it and about two and a",
    "start": "132319",
    "end": "138400"
  },
  {
    "text": "half years ago i lead our open source program and that's my twitter handle there",
    "start": "138400",
    "end": "143840"
  },
  {
    "start": "143000",
    "end": "323000"
  },
  {
    "text": "so what is this netflix open source stuff well it's actually a whole bunch of components",
    "start": "144239",
    "end": "150000"
  },
  {
    "text": "straddling many categories it could be your database stay stateful tier it could be the security it could be big",
    "start": "150000",
    "end": "156000"
  },
  {
    "text": "data platform it could be availability tools and infrastructure it could be just core",
    "start": "156000",
    "end": "161040"
  },
  {
    "text": "infrastructure libraries and services it's a lot last accounted we had 48",
    "start": "161040",
    "end": "167040"
  },
  {
    "text": "various components and it just keeps coming we open sourced three new ones in the last two weeks and we're not about to stop",
    "start": "167040",
    "end": "172959"
  },
  {
    "text": "so just to set expectations i will not even attempt to cover them all in this talk just not",
    "start": "172959",
    "end": "178480"
  },
  {
    "text": "enough time what i'm gonna do instead of that i will identify the fundamental first",
    "start": "178480",
    "end": "183599"
  },
  {
    "text": "principles upon the upon which we built our platform i'll cover some of the very core",
    "start": "183599",
    "end": "189440"
  },
  {
    "text": "infrastructure library services and tools that are fundamental that everything else resides on",
    "start": "189440",
    "end": "196000"
  },
  {
    "text": "i'll cover some of the availability best practices and patterns some of this may be just patterns not even codification of that",
    "start": "196000",
    "end": "203760"
  },
  {
    "text": "and last but not least i'll cover the security components because security is a big part or should be of your global deployment at the end of",
    "start": "203760",
    "end": "211360"
  },
  {
    "text": "the presentation just to get you out of the middle often and comma i'll attempt to do a",
    "start": "211360",
    "end": "216560"
  },
  {
    "text": "real live demo let's see how that goes and hopefully at the end you'll see how",
    "start": "216560",
    "end": "222799"
  },
  {
    "text": "you can get up and running with netflix open source stack probably in under 10 minutes or less",
    "start": "222799",
    "end": "229040"
  },
  {
    "text": "so what are these core components that i'm talking about we'll see this picture a little bit later in the presentation",
    "start": "229360",
    "end": "234400"
  },
  {
    "text": "but effectively what it looks like the core key key phrases if you will one is a",
    "start": "234400",
    "end": "240000"
  },
  {
    "text": "microservices implementation that means you have many services all token to each other",
    "start": "240000",
    "end": "245040"
  },
  {
    "text": "uh two you have what we call eureka which is the service registry and then you have ipc stack uh ribbon",
    "start": "245040",
    "end": "251760"
  },
  {
    "text": "and carry-on combo that actually allows all the services to common language to each other there will be a deeper dive into our ipc",
    "start": "251760",
    "end": "259040"
  },
  {
    "text": "stack later on at 4 30 today i encourage you to attend that one if you're interested",
    "start": "259040",
    "end": "264560"
  },
  {
    "text": "and then there is this other piece called histrix we'll cover it in a little bit later but it's really core to our availability",
    "start": "264560",
    "end": "270160"
  },
  {
    "text": "strategy how we ensure that all of the services are protected against downstream failures",
    "start": "270160",
    "end": "277280"
  },
  {
    "text": "so microservices architecture again it's to ensure that",
    "start": "277600",
    "end": "283120"
  },
  {
    "text": "key services on the user path are always available all services is important but some are more important than others",
    "start": "283120",
    "end": "288960"
  },
  {
    "text": "decoupling your architecture into microservices allows you to separate the two and also allows you to ensure that",
    "start": "288960",
    "end": "296080"
  },
  {
    "text": "failure of a non-critical service does not affect your overall overall service availability ribbon and",
    "start": "296080",
    "end": "301919"
  },
  {
    "text": "carry-on as i mentioned these are the client-server ipc pieces it allows all services communicate to",
    "start": "301919",
    "end": "307440"
  },
  {
    "text": "each other using common common language and they also use eureka as the service registry",
    "start": "307440",
    "end": "312560"
  },
  {
    "text": "to to enable them to see one another and then hysterics a common common metaphor for it to use is",
    "start": "312560",
    "end": "319120"
  },
  {
    "text": "a circuit breaker but it's actually much more so we'll cover it a little bit later before we go into that why",
    "start": "319120",
    "end": "325280"
  },
  {
    "start": "323000",
    "end": "405000"
  },
  {
    "text": "why would you use netflix oss there is plenty of other stuff out there so why this well the simple answer is",
    "start": "325280",
    "end": "331440"
  },
  {
    "text": "that these are solutions that for common needs not just for netflix needs this is the common infrastructure",
    "start": "331440",
    "end": "336800"
  },
  {
    "text": "there is nothing about it specific to a video streaming service and they work not just they work we",
    "start": "336800",
    "end": "342639"
  },
  {
    "text": "tested them at hyperscale we get millions billions of requests a day and all of these services need to be",
    "start": "342639",
    "end": "348720"
  },
  {
    "text": "horizontally scalable extensible robust and they've been battle tested and resilient i mean if you",
    "start": "348720",
    "end": "354639"
  },
  {
    "text": "you name a corner case we probably hit it and if we hit it we built a test case for it and we probably fixed it",
    "start": "354639",
    "end": "360080"
  },
  {
    "text": "not all of them but good chunk most importantly it will allow you to focus on your core business",
    "start": "360080",
    "end": "366319"
  },
  {
    "text": "rather than reinventing the wheel of the common infrastructure and so i hope this will be a benefit",
    "start": "366319",
    "end": "372720"
  },
  {
    "text": "these are the case not just some of the companies that already utilizing and contributing netflix oss components if your logo is",
    "start": "372880",
    "end": "380240"
  },
  {
    "text": "not on it and yet you are using our stuff i would love to have your logo there email it just either to me or to netflix",
    "start": "380240",
    "end": "386240"
  },
  {
    "text": "oss at netflix.com we'll put it up on the site one of the more recent editions actually watson developer cloud",
    "start": "386240",
    "end": "392720"
  },
  {
    "text": "watson as a service uh in order to make it available as a service and to make it highly resilient they actually leveraged",
    "start": "392720",
    "end": "398800"
  },
  {
    "text": "power of a lot of netflix oss components so that's the most recent addition",
    "start": "398800",
    "end": "404720"
  },
  {
    "start": "405000",
    "end": "788000"
  },
  {
    "text": "first principles why we built what we built and how we build it so these are really important first",
    "start": "405840",
    "end": "412160"
  },
  {
    "text": "let's test our assumptions if you want to be successful and you know this a lot of customers globally",
    "start": "412160",
    "end": "418319"
  },
  {
    "text": "available resilient you need to assume that everything is broken if you operate at the scale that success",
    "start": "418319",
    "end": "425039"
  },
  {
    "text": "requires and you operate at the speed that success requires you need to outpace your competitors you're going to be pushing changes",
    "start": "425039",
    "end": "431039"
  },
  {
    "text": "non-stop that means things will break as you operate in scale even the",
    "start": "431039",
    "end": "436240"
  },
  {
    "text": "simplest smaller things will accumulate that means the things will break",
    "start": "436240",
    "end": "441840"
  },
  {
    "text": "so you have to accept and embrace that everything is fundamentally broken and yet you need to engineer architect",
    "start": "441840",
    "end": "449039"
  },
  {
    "text": "and implement the services that are fundamentally robust on top of a platform that's essentially not",
    "start": "449039",
    "end": "455360"
  },
  {
    "text": "so that's first and foremost assumption the second one let's define what high availability means",
    "start": "455360",
    "end": "460720"
  },
  {
    "text": "in terms of your lifestyle if things are always broken or they break all the time what do you",
    "start": "460720",
    "end": "466560"
  },
  {
    "text": "want to do do you want to answer your pager do you want to be woken up at night or do you want to be well perhaps not",
    "start": "466560",
    "end": "473039"
  },
  {
    "text": "even at a nice beach but at least enjoy your days afternoons and weekends and let animation handle things let the",
    "start": "473039",
    "end": "479199"
  },
  {
    "text": "robust systems heal themselves personally i would prefer the first one",
    "start": "479199",
    "end": "485039"
  },
  {
    "text": "i mentioned before that we architected our system using microservices assumption what does",
    "start": "486800",
    "end": "492479"
  },
  {
    "text": "it mean it means rather than trying to create a monolithic application that embodies all of your business logic you make a",
    "start": "492479",
    "end": "499039"
  },
  {
    "text": "combination of very simple services that do one thing but do it really well why do",
    "start": "499039",
    "end": "505680"
  },
  {
    "text": "why do we do it if you imagine a monolith where let's say if you're in java world everybody",
    "start": "505680",
    "end": "511039"
  },
  {
    "text": "contributes a jar file to this manga war and then you push it through a release train what happens if one of those",
    "start": "511039",
    "end": "518159"
  },
  {
    "text": "changes introduces failure that you don't catch using your testing well the whole release train is off you",
    "start": "518159",
    "end": "524000"
  },
  {
    "text": "now need to have all hands on deck to figure out which change broke the release you have to roll it back that could be an interesting exercise",
    "start": "524000",
    "end": "530800"
  },
  {
    "text": "and then even the changes that are absolutely critical to your business must wait for something else to get fixed",
    "start": "530800",
    "end": "537279"
  },
  {
    "text": "difficult deployments no clear ownership not exactly the best scenario what microservices offer you is a very",
    "start": "537279",
    "end": "543760"
  },
  {
    "text": "small very clear scope you have a service that does one thing right you have a dedicated team",
    "start": "543760",
    "end": "549200"
  },
  {
    "text": "that owns it from beginning to end you have much greater resiliency if your",
    "start": "549200",
    "end": "555040"
  },
  {
    "text": "particular service fails unless it's an absolutely critical path the rest of the ecosystem does not have",
    "start": "555040",
    "end": "560240"
  },
  {
    "text": "to fail you have much faster deployments and simple",
    "start": "560240",
    "end": "565600"
  },
  {
    "text": "and rollbacks again you don't have to coordinate with the rest of your company if you have to change something in production and once again ownership is",
    "start": "565600",
    "end": "572959"
  },
  {
    "text": "the key if you have a dedicated team responsible for a particular component or set of components",
    "start": "572959",
    "end": "578080"
  },
  {
    "text": "you're going to get much better outcome than nobody owns anything another fundamental assumption or",
    "start": "578080",
    "end": "584640"
  },
  {
    "text": "principle state only belongs in a persistent layer you want as much out of your system as",
    "start": "584640",
    "end": "590160"
  },
  {
    "text": "possible to be stateless what does it give you load balancing and",
    "start": "590160",
    "end": "596160"
  },
  {
    "text": "failover now straightforward if you're making a request and that fails or it latent all you have to do is",
    "start": "596160",
    "end": "601839"
  },
  {
    "text": "retry to a different instance different zone different region but you don't need to worry about whether the",
    "start": "601839",
    "end": "607279"
  },
  {
    "text": "second call you make will alter or change state or even half state of downstream dependency",
    "start": "607279",
    "end": "612320"
  },
  {
    "text": "you can now auto scale you have more load you add more instances you have less load you had less instances",
    "start": "612320",
    "end": "619519"
  },
  {
    "text": "biggest benefit of course is resiliency but it also gives you greater efficiency because now you no longer have to",
    "start": "619519",
    "end": "625440"
  },
  {
    "text": "provision for absolute peak in your capacity deployments are super easy you don't",
    "start": "625440",
    "end": "632160"
  },
  {
    "text": "have state i'll cover it a little bit later in the talk but netflix we practice what we call a red black deployment",
    "start": "632160",
    "end": "638160"
  },
  {
    "text": "that means you have your old cluster running production load you bring up a new cluster you do a canary if everything goes well you shift",
    "start": "638160",
    "end": "644320"
  },
  {
    "text": "traffic if you ever need to roll back it's instantaneous because your old farm is still running",
    "start": "644320",
    "end": "650160"
  },
  {
    "text": "now state you still need state if you have any decent application worth mentioning it probably stores some kind of information but it only",
    "start": "650160",
    "end": "657279"
  },
  {
    "text": "belongs in a stateful layer that means your database and perhaps your caches if you're utilizing caches for uh",
    "start": "657279",
    "end": "662959"
  },
  {
    "text": "lower latency access but that's the only place it belongs when you're dealing with state it involves different operational practices",
    "start": "662959",
    "end": "669600"
  },
  {
    "text": "you cannot do red like deployments you have to do rolling pushes you have to ensure that the state is preserved",
    "start": "669600",
    "end": "674640"
  },
  {
    "text": "you have certain practices that you have to ensure in order to achieve data durability i'm",
    "start": "674640",
    "end": "680720"
  },
  {
    "text": "sure nobody wants to lose customer data so again if you minimize that area where state belongs",
    "start": "680720",
    "end": "686240"
  },
  {
    "text": "your life overall will be much much easier isolation and redundancy that's super",
    "start": "686240",
    "end": "693120"
  },
  {
    "text": "important as your services grow as they become more globally",
    "start": "693120",
    "end": "698160"
  },
  {
    "text": "deployed you have to assume again everything breaks and so your services should be",
    "start": "698160",
    "end": "703440"
  },
  {
    "text": "architected and designed in such a way that loss of an availability zone or even a full region",
    "start": "703440",
    "end": "709200"
  },
  {
    "text": "should not result to loss of quality of service to your user and i'll talk about it in a little bit",
    "start": "709200",
    "end": "715600"
  },
  {
    "text": "but essentially a zone goes out you scale up the others you continue a region goes out it's far",
    "start": "715600",
    "end": "721360"
  },
  {
    "text": "more unlikely but still may happen you still should be able to continue",
    "start": "721360",
    "end": "727839"
  },
  {
    "text": "and since failure is always there you have to embrace it there was a excellent talker a little bit earlier in our",
    "start": "728079",
    "end": "733600"
  },
  {
    "text": "simian army and fit testing and we truly embrace it i would rather have a failure at two",
    "start": "733600",
    "end": "740079"
  },
  {
    "text": "o'clock in the afternoon when all developers are in the office and well caffeinated and able to attend to the problem rather than three o'clock",
    "start": "740079",
    "end": "747040"
  },
  {
    "text": "at night on saturday where just may not be",
    "start": "747040",
    "end": "751600"
  },
  {
    "text": "and this is the key with microservices as your number of services grow it's important to have the right operational tools and practices",
    "start": "752800",
    "end": "759760"
  },
  {
    "text": "you don't want each team to reinvent the way of how they're going to deploy and maintain their services this needs to",
    "start": "759760",
    "end": "765839"
  },
  {
    "text": "become and this needs to be consistent so you can expect a consistent behavior from various services that you run in",
    "start": "765839",
    "end": "771360"
  },
  {
    "text": "your ecosystem for us this is a screenshot of asgard that we use for all of our services to do red block deployment and",
    "start": "771360",
    "end": "778720"
  },
  {
    "text": "other management for you that may be something else the key is to have the right operational tool that is",
    "start": "778720",
    "end": "784800"
  },
  {
    "text": "correct for your system now let's actually go inside core",
    "start": "784800",
    "end": "791120"
  },
  {
    "start": "788000",
    "end": "828000"
  },
  {
    "text": "infrastructure everything that's really fundamental and common to the rest of netflix ecosystem",
    "start": "791120",
    "end": "797519"
  },
  {
    "text": "in this simple architecture you have very few components you have your front-end app you have some kind of authentication service",
    "start": "797519",
    "end": "804160"
  },
  {
    "text": "there's a middle tier service you have eureka the discovery and that's pretty much it that's easy this is a screenshot of a",
    "start": "804160",
    "end": "811440"
  },
  {
    "text": "real call flow pass for just one request into netflix ecosystem how do you find",
    "start": "811440",
    "end": "817360"
  },
  {
    "text": "all these services if your service a you need to call service b how do you know where it is how do you know if it's alive it's",
    "start": "817360",
    "end": "823760"
  },
  {
    "text": "healthy for that exact purpose we build the eureka which is effectively a discovery service",
    "start": "823760",
    "end": "829920"
  },
  {
    "start": "828000",
    "end": "866000"
  },
  {
    "text": "what allows you to do it allows you to map all your microservices by name to all the other attributes whether ami",
    "start": "829920",
    "end": "836880"
  },
  {
    "text": "instances zones clusters ip addresses url sports in addition it also stores other useful",
    "start": "836880",
    "end": "843920"
  },
  {
    "text": "metadata about the service health is it up is it starting is it healthy unhealthy because if you",
    "start": "843920",
    "end": "849920"
  },
  {
    "text": "know the stuff you're not even going to try to send your request to unhealthy or services that are still starting up",
    "start": "849920",
    "end": "856720"
  },
  {
    "text": "so eureka is really at the core of it it's as resilient as it it can get because if eureka fails",
    "start": "856720",
    "end": "863279"
  },
  {
    "text": "everything else is not well and so actually eureka service",
    "start": "863279",
    "end": "868880"
  },
  {
    "text": "is replicated in each zone it's replicated per zone and in terms of architecting it we opted",
    "start": "868880",
    "end": "875839"
  },
  {
    "text": "for eventual consistency that means the service is available and it's also partition tolerant to partitioning if there is a",
    "start": "875839",
    "end": "883040"
  },
  {
    "text": "networking partitioning event between the zones or if a zone goes down eureka services",
    "start": "883040",
    "end": "888079"
  },
  {
    "text": "availability is not affected it consistency may be but is still available as an additional",
    "start": "888079",
    "end": "893600"
  },
  {
    "text": "precaution and layer of defense a eureka client has its own layer of cache that will protect the applications and",
    "start": "893600",
    "end": "900240"
  },
  {
    "text": "enable them to continuously run even if the service goes down so these",
    "start": "900240",
    "end": "905279"
  },
  {
    "text": "are all kind of the the battle scars that we that we learned and applied",
    "start": "905279",
    "end": "910639"
  },
  {
    "text": "so that's the core now you're able to find one another how do you talk to one another common",
    "start": "910639",
    "end": "917279"
  },
  {
    "text": "language between clients and services is the key as you create new services you don't want to create a new way for them to",
    "start": "917279",
    "end": "922800"
  },
  {
    "text": "communicate it all needs to be common and so for us we use the combo of ribbon and carrion ribbon is a client",
    "start": "922800",
    "end": "929839"
  },
  {
    "text": "library for internal request routing and then carrion is the counterpart server piece that enables",
    "start": "929839",
    "end": "936880"
  },
  {
    "text": "your developers to bypass all the boilerplate code that you typically would need to create and it",
    "start": "936880",
    "end": "941920"
  },
  {
    "text": "also creates consistency of how the services operate ribbon library in particular so first of",
    "start": "941920",
    "end": "948240"
  },
  {
    "text": "all it talks to eureka through eureka client and then it has the downstream load balancer",
    "start": "948240",
    "end": "954240"
  },
  {
    "text": "to enable it to load balance your your traffic to your dependencies",
    "start": "954240",
    "end": "959279"
  },
  {
    "text": "what we realize at netflix is that different applications may have different load balancing needs and so",
    "start": "959279",
    "end": "965199"
  },
  {
    "text": "the architecturally this build this ability to plug in your own load balancers so in this",
    "start": "965199",
    "end": "971440"
  },
  {
    "text": "particular example one application is using a customer hash custom load balancer and the other one",
    "start": "971440",
    "end": "977839"
  },
  {
    "text": "is using our default one that we use internally that's called zone aware round robin and each application can decide for",
    "start": "977839",
    "end": "983920"
  },
  {
    "text": "itself what it wants to do zone of our round-robin loan balancer is",
    "start": "983920",
    "end": "989279"
  },
  {
    "text": "an interesting one because if let's say i'm a ribbon client here and i have",
    "start": "989279",
    "end": "994399"
  },
  {
    "text": "downstream service that i'm calling that represented in three zones service instances and services in one of",
    "start": "994399",
    "end": "1000880"
  },
  {
    "text": "the zones may become unhealthy or less available or throttled maybe services are going through a",
    "start": "1000880",
    "end": "1006079"
  },
  {
    "text": "garbage collection pose so what zone of our load balancer enables automatically does actually",
    "start": "1006079",
    "end": "1011920"
  },
  {
    "text": "it shapes the traffic around the unhealthy services and instances and allows basically retries without",
    "start": "1011920",
    "end": "1018000"
  },
  {
    "text": "your application even knowing what's going one thing i wanted to highlight for the",
    "start": "1018000",
    "end": "1024400"
  },
  {
    "text": "people who are already familiar with the netflix ipc stack that what what you thought of rebel and",
    "start": "1024400",
    "end": "1029678"
  },
  {
    "text": "carry on what we now call ipc stack 1.0 and let me explain the differences between between",
    "start": "1029679",
    "end": "1036079"
  },
  {
    "text": "this and actually what we have now so the ribbon and so carry on 1.0",
    "start": "1036079",
    "end": "1042319"
  },
  {
    "text": "relied on apache http client on a client side and apache tomcat on a server side",
    "start": "1042319",
    "end": "1048319"
  },
  {
    "text": "ev cache which is the caching layer and histrix which is the circuit breaker library were separate",
    "start": "1048319",
    "end": "1054240"
  },
  {
    "text": "from the client and so as application developer you would have to figure out when and how to integrate them in",
    "start": "1054240",
    "end": "1060799"
  },
  {
    "text": "and also the only protocol they would talk in would be http and fundamentally that was a blocking",
    "start": "1060799",
    "end": "1066960"
  },
  {
    "text": "architecture you make a call you wait for response now if you're",
    "start": "1066960",
    "end": "1072000"
  },
  {
    "text": "really making your services scalable and you want to achieve high throughput that may not be good enough",
    "start": "1072000",
    "end": "1077440"
  },
  {
    "text": "and so what we have now is what we call netflix ipc stack 2.0 so a couple of key differences one",
    "start": "1077440",
    "end": "1083919"
  },
  {
    "start": "1078000",
    "end": "1116000"
  },
  {
    "text": "histrix library and eva cache are now intrinsic part of the client you don't need to put any more code",
    "start": "1083919",
    "end": "1089520"
  },
  {
    "text": "to integrate them in you just annotate to enable them so that's one key second one they're now",
    "start": "1089520",
    "end": "1095520"
  },
  {
    "text": "rxnet based and because of that in addition to http you can now use",
    "start": "1095520",
    "end": "1101039"
  },
  {
    "text": "other particles udp tcp web sockets and it's fundamentally now a completely",
    "start": "1101039",
    "end": "1106240"
  },
  {
    "text": "reactive architecture and so now you are able to achieve much more much",
    "start": "1106240",
    "end": "1111360"
  },
  {
    "text": "more higher concurrency in your request path i'm not going to dwell too much on the",
    "start": "1111360",
    "end": "1117440"
  },
  {
    "start": "1116000",
    "end": "1148000"
  },
  {
    "text": "code samples but i wanted to show illustrate how easy it is to create your applications using rig",
    "start": "1117440",
    "end": "1122720"
  },
  {
    "text": "but on carry on because so much of the boilerplate has been just hidden from you so this is a sample of",
    "start": "1122720",
    "end": "1128400"
  },
  {
    "text": "creating a carrion server it's really not a whole lot of code and here are the key pieces that you need to",
    "start": "1128400",
    "end": "1133600"
  },
  {
    "text": "fill in which boards do you need to listen to",
    "start": "1133600",
    "end": "1138720"
  },
  {
    "text": "what other dependencies you may have and then uri that you registered for",
    "start": "1138720",
    "end": "1144080"
  },
  {
    "text": "that's it now you have service up and running conversely on a client side on the",
    "start": "1144080",
    "end": "1149200"
  },
  {
    "start": "1148000",
    "end": "1178000"
  },
  {
    "text": "ribbon side we actually give you two different alternatives one you can create a client you",
    "start": "1149200",
    "end": "1154640"
  },
  {
    "text": "basically using annotations so you basically create which uri you want to",
    "start": "1154640",
    "end": "1160240"
  },
  {
    "text": "make a request to you can optionally annotate historics for the circuit breakers you can plug in",
    "start": "1160240",
    "end": "1167280"
  },
  {
    "text": "nvcash if you choose to and there you there you have it you just issued a asynchronous request",
    "start": "1167280",
    "end": "1172320"
  },
  {
    "text": "the asynchronous part is towards the bottom when you make it observable if you don't like annotations or you",
    "start": "1172320",
    "end": "1178320"
  },
  {
    "start": "1178000",
    "end": "1198000"
  },
  {
    "text": "want to make a synchronous request you still can so for example this this example shows you how to create a client using a",
    "start": "1178320",
    "end": "1184400"
  },
  {
    "text": "template using a builder pattern and then at the end you actually do a execute which is blocking which is your",
    "start": "1184400",
    "end": "1190480"
  },
  {
    "text": "standard canonical model you make a request you wait for reply",
    "start": "1190480",
    "end": "1195440"
  },
  {
    "text": "availability so before we talked about high availability and what it means i briefly touched on the right tooling",
    "start": "1196640",
    "end": "1203919"
  },
  {
    "start": "1198000",
    "end": "1258000"
  },
  {
    "text": "and this is really important so i'd like to reiterate it you want to make sure that your",
    "start": "1203919",
    "end": "1208960"
  },
  {
    "text": "deployments are automated from beginning to end as much as possible where after you make the code changes",
    "start": "1208960",
    "end": "1215280"
  },
  {
    "text": "you choose where to deploy whether it's your dev test stage or production environment you run a canary analysis",
    "start": "1215280",
    "end": "1221360"
  },
  {
    "text": "again you really want to automate that if canary goes well you want to scale up new instances",
    "start": "1221360",
    "end": "1227120"
  },
  {
    "text": "shift traffic to them turn off traffic to the old ones and then you still need to analyze some",
    "start": "1227120",
    "end": "1233679"
  },
  {
    "text": "more some issues are latent they will not show up right away and so you want to keep that old asg still running if anything goes",
    "start": "1233679",
    "end": "1241120"
  },
  {
    "text": "wrong you already have it running all you do is shift traffic back you don't need to scramble figure out what was that ami",
    "start": "1241120",
    "end": "1246559"
  },
  {
    "text": "what was the configuration how was it running it is there eventually when you're really confident then you",
    "start": "1246559",
    "end": "1253280"
  },
  {
    "text": "scrape it monkeys we really love our monkeys",
    "start": "1253280",
    "end": "1259200"
  },
  {
    "start": "1258000",
    "end": "1303000"
  },
  {
    "text": "the most famous one chaos monkey it shoots instances which could be",
    "start": "1259200",
    "end": "1265280"
  },
  {
    "text": "pretty harmless or at least it should be but it's a great way to verify that you do not inadvertently introduce state to",
    "start": "1265280",
    "end": "1270640"
  },
  {
    "text": "your system where you shouldn't belong your asg should fundamentally be resilient to",
    "start": "1270640",
    "end": "1276400"
  },
  {
    "text": "chaos monkey kills so what one instance went down it replenishes it you're back to the races it should be a",
    "start": "1276400",
    "end": "1282559"
  },
  {
    "text": "non-event right we have bigger ones we shut down zones using chaos gorilla",
    "start": "1282559",
    "end": "1288400"
  },
  {
    "text": "and we actually shut down regions using kscone and yes we do it in production but again assumption is everything will",
    "start": "1288400",
    "end": "1295120"
  },
  {
    "text": "break we better know it we better experience it verify that we're resilient to it if we're not better fix it",
    "start": "1295120",
    "end": "1302159"
  },
  {
    "text": "and so ks kong because it's probably the most interesting one let me go a little bit deeper of how it works so this is how we run our traffic in",
    "start": "1302159",
    "end": "1309440"
  },
  {
    "start": "1303000",
    "end": "1388000"
  },
  {
    "text": "north america our traffic is geo-located to multiple aws regions",
    "start": "1309440",
    "end": "1314960"
  },
  {
    "text": "and once in a while approximately on a monthly basis we let the keras kong stamp on it okay",
    "start": "1314960",
    "end": "1324080"
  },
  {
    "text": "and we reroute all the traffic to the surviving region the key is to figure out",
    "start": "1324080",
    "end": "1330400"
  },
  {
    "text": "will we be able to route traffic fast enough will we be able to scale our systems",
    "start": "1330640",
    "end": "1335679"
  },
  {
    "text": "fast enough and again to make sure that isolation principle holds that there is no hidden dependencies in the systems",
    "start": "1335679",
    "end": "1341919"
  },
  {
    "text": "deployed in multiple regions after 24 hours or so running it we",
    "start": "1341919",
    "end": "1347039"
  },
  {
    "text": "restore the services back that's actually a little bit trickier because you have to make sure that systems are fully up to date before you",
    "start": "1347039",
    "end": "1353600"
  },
  {
    "text": "start routing traffic back to them so again it allows us to validate uh all of the operational practices that",
    "start": "1353600",
    "end": "1359360"
  },
  {
    "text": "we put in place our goal and that has been the case many times for",
    "start": "1359360",
    "end": "1364720"
  },
  {
    "text": "netflix users to experience zero degradation to the quality of service when that doesn't happen it does allow",
    "start": "1364720",
    "end": "1371919"
  },
  {
    "text": "us ability to learn what went wrong learn from it fix it make our systems that much more resilient",
    "start": "1371919",
    "end": "1377280"
  },
  {
    "text": "and also verify that when things go wrong and there's no such thing as 100",
    "start": "1377280",
    "end": "1382480"
  },
  {
    "text": "availability that our teams are ready and they know what to do",
    "start": "1382480",
    "end": "1388159"
  },
  {
    "start": "1388000",
    "end": "1418000"
  },
  {
    "text": "so this is a this is not an election map i'm not trying to predict the next election",
    "start": "1388159",
    "end": "1393919"
  },
  {
    "text": "this uh this map should actually build your internal visualization of how we see",
    "start": "1393919",
    "end": "1398960"
  },
  {
    "text": "traffic from which state and provinces get to get routed to east or west and this is what happens",
    "start": "1398960",
    "end": "1404880"
  },
  {
    "text": "when we run con all of the traffic goes to east in this particular case we run them in both ways",
    "start": "1404880",
    "end": "1409919"
  },
  {
    "text": "we want to verify that it's not just one way thing",
    "start": "1409919",
    "end": "1414480"
  },
  {
    "text": "is all of the stuff that is described to you sufficient actually it's not you may have all your",
    "start": "1414960",
    "end": "1420400"
  },
  {
    "text": "micro services you may run the monkeys you you may do all this stuff and it still may not be good",
    "start": "1420400",
    "end": "1425520"
  },
  {
    "text": "enough and this is where histrix comes in um it's best illustrated in the example of",
    "start": "1425520",
    "end": "1430640"
  },
  {
    "text": "our api which is our very front door all of the traffic from our users comes through it and then it fans out",
    "start": "1430640",
    "end": "1437200"
  },
  {
    "text": "and makes downstream calls to the further dependencies now let's actually take a look at the case where one of these dependencies",
    "start": "1437200",
    "end": "1443840"
  },
  {
    "text": "just one dies it's not inconceivable things things break",
    "start": "1443840",
    "end": "1450080"
  },
  {
    "text": "well if we don't have an additional logic to protect against us that will take down api and that will in",
    "start": "1450080",
    "end": "1457039"
  },
  {
    "text": "turn take down all of our users that's just not acceptable this scenario",
    "start": "1457039",
    "end": "1462640"
  },
  {
    "text": "will not not gonna live with so this is where histrix comes in histrix is a library that pretty much",
    "start": "1462640",
    "end": "1468240"
  },
  {
    "start": "1463000",
    "end": "1508000"
  },
  {
    "text": "every application at netflix utilizes to provide the following it allows you",
    "start": "1468240",
    "end": "1473520"
  },
  {
    "text": "per each of your downstream requests isolate the failure of that downstream request from your own availability",
    "start": "1473520",
    "end": "1480720"
  },
  {
    "text": "and it allows you to have control of what you want to do when things fail not if when do you want to retry in which case what",
    "start": "1480720",
    "end": "1487200"
  },
  {
    "text": "should be a retry policy for that particular download downstream dependency do you want to just go into the graded",
    "start": "1487200",
    "end": "1492640"
  },
  {
    "text": "fallback mode in which case what should that fallback mode be or do you want to just propagate the error up",
    "start": "1492640",
    "end": "1498880"
  },
  {
    "text": "and it allows you effectively it allows bulk heading and circuit breaker ability for each of your services",
    "start": "1498880",
    "end": "1506399"
  },
  {
    "text": "let's see how it would work in this particular case again we have our happy case everything works suddenly one of our dependencies breaks",
    "start": "1507200",
    "end": "1515200"
  },
  {
    "text": "in this particular case api may choose to just go to fallback and still continue running and that's",
    "start": "1515200",
    "end": "1521760"
  },
  {
    "text": "that's exactly what we want to do security so security has been on a lot",
    "start": "1521760",
    "end": "1528880"
  },
  {
    "start": "1528000",
    "end": "1558000"
  },
  {
    "text": "of mines lately i don't know if you heard of red of cases like codespaces target home depot",
    "start": "1528880",
    "end": "1534799"
  },
  {
    "text": "you name it and as our digital footprint grows security is",
    "start": "1534799",
    "end": "1540320"
  },
  {
    "text": "only going to grow in our minds because it's only going to be a bigger target so at netflix our approach to security",
    "start": "1540320",
    "end": "1547200"
  },
  {
    "text": "is the following trust but verify again we like our monkeys",
    "start": "1547200",
    "end": "1552640"
  },
  {
    "text": "all of the developers at netflix have full production access and we treat everybody like a mature",
    "start": "1552640",
    "end": "1558000"
  },
  {
    "start": "1558000",
    "end": "1618000"
  },
  {
    "text": "responsible adult at the same time inadvertently people may",
    "start": "1558000",
    "end": "1563279"
  },
  {
    "text": "set up incorrect security groups incorrect certificates incorrect iam entities",
    "start": "1563279",
    "end": "1570559"
  },
  {
    "text": "and so actually this is where being in the cloud really helps because everything is a software everything is an api",
    "start": "1570559",
    "end": "1576799"
  },
  {
    "text": "and so security monkey takes advantage of uh apis to actually run scan verification",
    "start": "1576799",
    "end": "1583039"
  },
  {
    "text": "analysis of things like certificates do you have certificates that are valid that are not expiring in the next half an hour",
    "start": "1583039",
    "end": "1590320"
  },
  {
    "text": "firewall are your all your elbs that should be accessible accessible and vice",
    "start": "1590320",
    "end": "1595600"
  },
  {
    "text": "versa are you using correct iam entities and session keys um are you reaching limits perhaps and so",
    "start": "1595600",
    "end": "1603360"
  },
  {
    "text": "on and so forth it's effectively a rule engine that you can plug in your own rules and figure out how secure or not secure things are",
    "start": "1603360",
    "end": "1612480"
  },
  {
    "text": "well that's that's internal infrastructure and the internal crowd what about people outside of your",
    "start": "1612480",
    "end": "1618799"
  },
  {
    "text": "companies reality is that people do bad things on the internet",
    "start": "1618799",
    "end": "1624320"
  },
  {
    "text": "more often than not it is difficult to track it's even more difficult to act on it",
    "start": "1624320",
    "end": "1631679"
  },
  {
    "text": "because of that we actually created an open source two tools called the scumbler and sketching",
    "start": "1631679",
    "end": "1637840"
  },
  {
    "text": "and what they do is scumbler is the rule engine again to search various sites on the internet",
    "start": "1637840",
    "end": "1644240"
  },
  {
    "text": "where you're more likely to find the views and show you the result",
    "start": "1644240",
    "end": "1649919"
  },
  {
    "text": "and it's also a workflow engine as well because once you found something that's just the first step then you got to do something about it it",
    "start": "1649919",
    "end": "1656640"
  },
  {
    "text": "is flexible and extensible so you can say you know for this particular type of abuse let's say go",
    "start": "1656640",
    "end": "1661679"
  },
  {
    "text": "to i don't know baseband and then look for these patterns or you may go to twitter and look for that pattern etc etc once",
    "start": "1661679",
    "end": "1669600"
  },
  {
    "text": "you found it you don't want to just go open up your browser on a particular site and start",
    "start": "1669600",
    "end": "1675120"
  },
  {
    "text": "looking around because you may inadvertently bring a problem in that's what sketchy is for it's an api",
    "start": "1675120",
    "end": "1681279"
  },
  {
    "text": "for taking screenshot screenshots and scraping text in a safe sandbox environment",
    "start": "1681279",
    "end": "1686640"
  },
  {
    "text": "once you have that then you can actually do something about it and you can actually integrate the two so they work together",
    "start": "1686640",
    "end": "1693919"
  },
  {
    "text": "so strategy is use gambler to find things you know whether it's credential dumps vulnerabilities uh social media chatter",
    "start": "1693919",
    "end": "1700559"
  },
  {
    "text": "about some abuse patterns or pretty much anything else that you may be looking for once you've found it",
    "start": "1700559",
    "end": "1706159"
  },
  {
    "text": "you can use sketchy insights tumblr even is a safer way to get the information about the abuse",
    "start": "1706159",
    "end": "1712399"
  },
  {
    "text": "so then your teams can act upon it",
    "start": "1712399",
    "end": "1716000"
  },
  {
    "text": "now you must be thinking well this is great how do i get started well if you go to our site we do have a",
    "start": "1720960",
    "end": "1726880"
  },
  {
    "start": "1723000",
    "end": "1768000"
  },
  {
    "text": "lot of tutorials and sample apps um rss reader which is effectively a",
    "start": "1726880",
    "end": "1732240"
  },
  {
    "text": "very simple application a blueprint shows you how to make a simple microservices talking to each",
    "start": "1732240",
    "end": "1737440"
  },
  {
    "text": "other using eureka ribbon carry on all the stuff that i just talked about there's a acme air",
    "start": "1737440",
    "end": "1742720"
  },
  {
    "text": "application that was put together by folks at ibm and there is a zero to cloud workshop",
    "start": "1742720",
    "end": "1747760"
  },
  {
    "text": "that was put together for folks who have not tried anything to do in aws yet",
    "start": "1747760",
    "end": "1753440"
  },
  {
    "text": "and really guides you through the very fundamental first steps of setting up your account and get getting off running",
    "start": "1753440",
    "end": "1760880"
  },
  {
    "text": "but over the last two and a half years very clear and strong feedback that we got on our open source that people valued it",
    "start": "1760880",
    "end": "1766880"
  },
  {
    "text": "but it was really hard to package and deploy it and this is actually of",
    "start": "1766880",
    "end": "1772720"
  },
  {
    "start": "1768000",
    "end": "1798000"
  },
  {
    "text": "last year that was an indicator of how hard it was because one of our cloud price winners was peterson kauskas from",
    "start": "1772720",
    "end": "1779520"
  },
  {
    "text": "answers for aws where he created pre-packaged netflix oss amis and um",
    "start": "1779520",
    "end": "1787278"
  },
  {
    "text": "a cloud formation recipes to create netflix oss services but that still was too",
    "start": "1787600",
    "end": "1793600"
  },
  {
    "text": "difficult and so what i'm here to announce today actually that we lowering significantly the bar to use",
    "start": "1793600",
    "end": "1801360"
  },
  {
    "start": "1798000",
    "end": "1918000"
  },
  {
    "text": "today we have a technology named docker and if you go to this github site under netflix conquers zero",
    "start": "1801360",
    "end": "1808640"
  },
  {
    "text": "to docker you can get all the source code of how it's all packaged and you can actually get trusted",
    "start": "1808640",
    "end": "1814000"
  },
  {
    "text": "automated builds from a docker hub site under netflix oss these are the services",
    "start": "1814000",
    "end": "1819919"
  },
  {
    "text": "that are already available there's actually a couple more coming if not already then visit next day things like security monkey things",
    "start": "1819919",
    "end": "1826399"
  },
  {
    "text": "like sk chains tumblr and all of these builds are trusted and automated what i mean is if somebody",
    "start": "1826399",
    "end": "1832799"
  },
  {
    "text": "publishes a docker package and says yeah go ahead and run it it's very akin to",
    "start": "1832799",
    "end": "1838799"
  },
  {
    "text": "clicking on a link in the email you don't know where it came from these images",
    "start": "1838799",
    "end": "1845520"
  },
  {
    "text": "are built directly from the source that's on our github site which is the very same code that we're using and so you",
    "start": "1845520",
    "end": "1851120"
  },
  {
    "text": "have a little bit more confidence that you will not get anything malicious from it before before we go further i'd",
    "start": "1851120",
    "end": "1857679"
  },
  {
    "text": "like to do a disclaimer these are not meant for production first of all that's now",
    "start": "1857679",
    "end": "1862720"
  },
  {
    "text": "not how we run them internally internally we make immutable amis it makes sense for us because this way",
    "start": "1862720",
    "end": "1868320"
  },
  {
    "text": "we can run five instances or five thousand instances of the same code and also the way they're packaged",
    "start": "1868320",
    "end": "1874960"
  },
  {
    "text": "they're not packaged for high availability i mentioned eureka service before it's striped across zones",
    "start": "1874960",
    "end": "1880799"
  },
  {
    "text": "there's a whole bunch of resiliency baked in if you just use docker container for eureka it's a single",
    "start": "1880799",
    "end": "1885919"
  },
  {
    "text": "instance that's not what i would call highly available service so use these to",
    "start": "1885919",
    "end": "1891440"
  },
  {
    "text": "get get to running with netflix or open source netflix oss use it to try it it really flips the",
    "start": "1891440",
    "end": "1896880"
  },
  {
    "text": "equation because before you would have to spend a couple of weeks to understand the services and integrate them into",
    "start": "1896880",
    "end": "1901919"
  },
  {
    "text": "your ecosystem before you actually get a first run out of it that flips it",
    "start": "1901919",
    "end": "1906960"
  },
  {
    "text": "you get to run it right away figure out if it brings you value then you can decide how and if you",
    "start": "1906960",
    "end": "1912880"
  },
  {
    "text": "should integrate it into your ecosystem",
    "start": "1912880",
    "end": "1916480"
  },
  {
    "start": "1918000",
    "end": "2308000"
  },
  {
    "text": "demo time enough of this slide stuff well one more slide before before i get to demo this is what",
    "start": "1918159",
    "end": "1924960"
  },
  {
    "text": "i'm going to show you so on my mac i'm going to run a virtualbox which is going to run ubuntu",
    "start": "1924960",
    "end": "1930080"
  },
  {
    "text": "um vm and so all of this will be within single kernel just running multiple containers and",
    "start": "1930080",
    "end": "1936559"
  },
  {
    "text": "things i'm going to show you is an exhibitor uh that actually we use to manage our zookeeper clusters",
    "start": "1936559",
    "end": "1942240"
  },
  {
    "text": "so it will run zookeeper on my laptop i'll have a eureka instance taken service registry i'll have a",
    "start": "1942240",
    "end": "1949200"
  },
  {
    "text": "couple of applications running one will be uh hello oss which is effectively a ribbon carry-on",
    "start": "1949200",
    "end": "1955120"
  },
  {
    "text": "sample again client server stuff basic i'll run this dual proxy which is our very front edge layer",
    "start": "1955120",
    "end": "1961200"
  },
  {
    "text": "it's a very scalable resilient proxy that allows you to load runtime filters and i'll also show",
    "start": "1961200",
    "end": "1967679"
  },
  {
    "text": "you how to run asgard on your laptop which was pretty difficult to do before",
    "start": "1967679",
    "end": "1973120"
  },
  {
    "text": "so let me switch out from this",
    "start": "1973120",
    "end": "1977840"
  },
  {
    "text": "all right so",
    "start": "1981039",
    "end": "1985120"
  },
  {
    "text": "just to show you this is live demo asgard is the only thing that i'm running right now",
    "start": "1986159",
    "end": "1991840"
  },
  {
    "text": "so i'm trying to find my mouse here",
    "start": "1998320",
    "end": "2004480"
  },
  {
    "text": "there",
    "start": "2004480",
    "end": "2006799"
  },
  {
    "text": "that's it because it's a process it's super fast to start you don't need to launch the whole vm",
    "start": "2013440",
    "end": "2020080"
  },
  {
    "text": "now exhibitor is running if you were to run this from the first time the only difference would be is network",
    "start": "2020080",
    "end": "2025279"
  },
  {
    "text": "time because docker would look locally if it cannot find it it will download it",
    "start": "2025279",
    "end": "2030799"
  },
  {
    "text": "and then the very same effect happens so let me find my browser here",
    "start": "2030799",
    "end": "2036480"
  },
  {
    "text": "there",
    "start": "2036480",
    "end": "2038799"
  },
  {
    "text": "now so exhibitor is running on the following",
    "start": "2044840",
    "end": "2051040"
  },
  {
    "text": "address and there you have it exhibitor is running and",
    "start": "2058839",
    "end": "2064480"
  },
  {
    "text": "if i can find my mouse again you can see that it's actually serving you a zookeeper cluster of one",
    "start": "2064480",
    "end": "2070800"
  },
  {
    "text": "and you can do all the things that you can do with the keeper so let's try some other things",
    "start": "2070800",
    "end": "2077200"
  },
  {
    "text": "again let me find my mouse so what i'm going to do now is i'm going to launch both eureka and hello oss service",
    "start": "2078399",
    "end": "2089838"
  },
  {
    "text": "okay so now",
    "start": "2092079",
    "end": "2095679"
  },
  {
    "text": "so my eureka runs on address that f4 and then hello oss runs on that five so let's take a look at what eureka says right now",
    "start": "2097359",
    "end": "2105920"
  },
  {
    "text": "what was that",
    "start": "2114320",
    "end": "2117839"
  },
  {
    "text": "for",
    "start": "2119680",
    "end": "2121920"
  },
  {
    "text": "so eureka takes about 30 seconds to show the first screen let's give it a little bit of time",
    "start": "2128720",
    "end": "2136720"
  },
  {
    "text": "wow it worked what do you know okay so what you can see now is eureka runs and there's actually clients uh hello",
    "start": "2142720",
    "end": "2150160"
  },
  {
    "text": "oss already registered with it i was hoping that the first time you would see empty screen but it's already registered and so you can see that you have one one",
    "start": "2150160",
    "end": "2156880"
  },
  {
    "text": "ami running in one availability zone and the service is up so let me bring up that service",
    "start": "2156880",
    "end": "2164000"
  },
  {
    "text": "okay basically the world as you would expect now because it runs on top of ribbon and carry on you already have all",
    "start": "2169599",
    "end": "2175520"
  },
  {
    "text": "the benefits of it and so for example what i can do is i can go to port 8077",
    "start": "2175520",
    "end": "2182720"
  },
  {
    "text": "and see the full administration console for it i can see the environment jars jmx our chaos configuration our",
    "start": "2183680",
    "end": "2190800"
  },
  {
    "text": "case is a library we use internally for our dynamic configuration you can change things at runtime on an instance cluster zone",
    "start": "2190800",
    "end": "2197760"
  },
  {
    "text": "or even global level and things like that",
    "start": "2197760",
    "end": "2203440"
  },
  {
    "text": "but now let's say i do stop hello world what will it do well there is a 30",
    "start": "2206400",
    "end": "2213040"
  },
  {
    "text": "second cash log delay so if i refresh it right now it's still going to show up",
    "start": "2213040",
    "end": "2218560"
  },
  {
    "text": "so let's give it a little bit of time and then what you'll see is that it's stating eureka will be updated and",
    "start": "2218560",
    "end": "2224480"
  },
  {
    "text": "that will tell anybody who wants to call this service you know what that instance is not good go call somewhere else",
    "start": "2224480",
    "end": "2230480"
  },
  {
    "text": "or maybe don't even if that's the only one go to degraded mode go to fallback",
    "start": "2230480",
    "end": "2235599"
  },
  {
    "text": "let's see if that taken hold bam it's no longer up it's now starting",
    "start": "2235599",
    "end": "2240960"
  },
  {
    "text": "and so all of this is already running in less than 10 minutes",
    "start": "2240960",
    "end": "2247680"
  },
  {
    "text": "let me just show you one more thing so this is an asgard that i started earlier purely because it takes a little bit longer to start and",
    "start": "2248400",
    "end": "2255760"
  },
  {
    "text": "now this is a little bit different all the previous examples i showed were running purely on my laptop",
    "start": "2255760",
    "end": "2261440"
  },
  {
    "text": "now this instance of asgard is running on my laptop but it's actually controlling a test",
    "start": "2261440",
    "end": "2266480"
  },
  {
    "text": "environment out in the cloud and so i can go and try to do",
    "start": "2266480",
    "end": "2271680"
  },
  {
    "text": "red black pushes i can try to go and basically control my environment directly from my laptop",
    "start": "2271680",
    "end": "2277200"
  },
  {
    "text": "which does give you immediate access to all the netflix oss goodness and power that before you would have to spend",
    "start": "2277200",
    "end": "2284240"
  },
  {
    "text": "sometimes day sometimes a week trying to configure and get to running",
    "start": "2284240",
    "end": "2289280"
  },
  {
    "text": "all right so that's it for the demo part let me switch back to the slides because there's a little bit more material i'd",
    "start": "2289839",
    "end": "2295440"
  },
  {
    "text": "like to cover",
    "start": "2295440",
    "end": "2299838"
  },
  {
    "text": "so that was the demo and this is great if you're a java shop like us what if you're not and this slide is not",
    "start": "2304880",
    "end": "2312720"
  },
  {
    "start": "2308000",
    "end": "2388000"
  },
  {
    "text": "to start the religious language war all of these are fine languages we use java for various",
    "start": "2312720",
    "end": "2318960"
  },
  {
    "text": "historical reasons and because it works for us javascale jvm but if you're not",
    "start": "2318960",
    "end": "2325760"
  },
  {
    "text": "what do you do you don't want to re-implement the very same logic in a different language and so internally we have the",
    "start": "2325760",
    "end": "2332320"
  },
  {
    "text": "same challenge because many of our teams utilize the our culture of freedom and",
    "start": "2332320",
    "end": "2337599"
  },
  {
    "text": "responsibility and choose to use the right tool for the job which may not be a jvm language",
    "start": "2337599",
    "end": "2343040"
  },
  {
    "text": "as a platform team we also don't want to port all of our stuff into various languages which we then would have to maintain",
    "start": "2343040",
    "end": "2348720"
  },
  {
    "text": "so we created this concept of site cars we recently opened sourced prana which",
    "start": "2348720",
    "end": "2354000"
  },
  {
    "text": "is our general purpose site car and it's effectively a core process that runs on your application",
    "start": "2354000",
    "end": "2359200"
  },
  {
    "text": "on your instance your your c sharp c plus plus or go process talks to it via",
    "start": "2359200",
    "end": "2364800"
  },
  {
    "text": "http rest and then that integration is the rest of the netflix oss ecosystem",
    "start": "2364800",
    "end": "2370800"
  },
  {
    "text": "we have specialized site cars as well one very open source just on monday which is an elasticsearch site car and we also have",
    "start": "2370800",
    "end": "2377680"
  },
  {
    "text": "priam which is our cassandra site car those are specialized because they're dealing with very specific stateful",
    "start": "2377680",
    "end": "2383119"
  },
  {
    "text": "systems and so they have a little bit of twist to them we do have a thriving netflix oss meetup",
    "start": "2383119",
    "end": "2389599"
  },
  {
    "start": "2388000",
    "end": "2418000"
  },
  {
    "text": "community over 1500 and growing if you're in a bay area i would highly encourage you to sign up we have",
    "start": "2389599",
    "end": "2396160"
  },
  {
    "text": "meetups maybe once a quarter and those are typically fun uh packed houses where we present some of the",
    "start": "2396160",
    "end": "2402720"
  },
  {
    "text": "stuff that we did but most recently we have external speakers and just a general generally a good forum to exchange",
    "start": "2402720",
    "end": "2408839"
  },
  {
    "text": "information you can follow us on twitter at netflix oss or if you want to email us our logo",
    "start": "2408839",
    "end": "2414560"
  },
  {
    "text": "it's at netflixoss netflix.com if you like this talk we do have a couple more",
    "start": "2414560",
    "end": "2420720"
  },
  {
    "text": "netflix talks after this right after this there's actually a three-way choice there is one on",
    "start": "2420720",
    "end": "2427599"
  },
  {
    "text": "maintaining a resilient front door about our age services which will cover much deeper things like",
    "start": "2427599",
    "end": "2432720"
  },
  {
    "text": "historics like zuul and a few others another choice is effective ipc communication the pros and cons of",
    "start": "2432720",
    "end": "2439440"
  },
  {
    "text": "microservices that will go much much deeper than i could cover in this time in ribbon and carrion",
    "start": "2439440",
    "end": "2444800"
  },
  {
    "text": "and our overall microservices architecture and then there's a general cloud migration story how we had to change the",
    "start": "2444800",
    "end": "2450720"
  },
  {
    "text": "our culture to devops and things like that and then friday we have a talk on using apache messes for scheduling in the",
    "start": "2450720",
    "end": "2457200"
  },
  {
    "text": "cloud on behalf of everybody who contributed to open source at netflix i wanted to thank you",
    "start": "2457200",
    "end": "2463599"
  },
  {
    "start": "2458000",
    "end": "2888000"
  },
  {
    "text": "feel free to visit our site and use and contribute to our components",
    "start": "2463599",
    "end": "2468800"
  },
  {
    "text": "and i definitely would welcome your feedback on this session i think we have a few minutes so i'll be",
    "start": "2468800",
    "end": "2474160"
  },
  {
    "text": "glad to take any questions you have",
    "start": "2474160",
    "end": "2481838"
  },
  {
    "text": "yes",
    "start": "2492839",
    "end": "2495839"
  },
  {
    "text": "uh great question so the question was can i talk publicly about type of things that we found in scumbler",
    "start": "2497920",
    "end": "2503440"
  },
  {
    "text": "so the most typical things that we found in scumbler were credential dumps or other type of abuse",
    "start": "2503440",
    "end": "2510079"
  },
  {
    "text": "there were others a little bit more sinister unfortunately i just don't have enough detail and i don't want to give you a partial information",
    "start": "2510079",
    "end": "2516400"
  },
  {
    "text": "um if you if you have a question that merits a long and a longer answer i'll be at a netflix",
    "start": "2516400",
    "end": "2522000"
  },
  {
    "text": "booth right after this and i'll be happy to have a chat with you",
    "start": "2522000",
    "end": "2526720"
  },
  {
    "text": "all right so question was what we used to communicate with regions in between regions so in order",
    "start": "2531200",
    "end": "2538400"
  },
  {
    "text": "to preserve the isolation between regions we don't want anything on a user call path to be cross-regional",
    "start": "2538400",
    "end": "2544960"
  },
  {
    "text": "so all of the cross-regional traffic is asynchronous replication which is mostly cassandra but also ev cache which is our caching",
    "start": "2544960",
    "end": "2551280"
  },
  {
    "text": "layer we recently open sourced last week we open source dynamite which is a asynchronous replication rail",
    "start": "2551280",
    "end": "2558079"
  },
  {
    "text": "layer for redis as well but it's all completely asynchronous on the background",
    "start": "2558079",
    "end": "2565839"
  },
  {
    "text": "let me get the details for you i don't want to mislead you here",
    "start": "2572000",
    "end": "2579838"
  },
  {
    "text": "a great question so the question was how does eureka know about which state and lifestyle life cycle the service is so the service",
    "start": "2582000",
    "end": "2588720"
  },
  {
    "text": "reports to it the the service basically at the simplest eureka has two apis one of them is here i am",
    "start": "2588720",
    "end": "2596079"
  },
  {
    "text": "register me and the other one where is the rest of the world but that's a very simplistic view of it",
    "start": "2596079",
    "end": "2601200"
  },
  {
    "text": "it's actually a little bit more nuanced every time the service changes state it actually updates states with eureka",
    "start": "2601200",
    "end": "2607040"
  },
  {
    "text": "but it's a it's a it's a push model eureka does not pull um",
    "start": "2607040",
    "end": "2621838"
  },
  {
    "text": "uh so the question was about the recent work done on the spring cloud to integrate netflix oss components",
    "start": "2622880",
    "end": "2628640"
  },
  {
    "text": "uh it's a parallel effort that's really great for the spring community but what you have to realize that not everybody",
    "start": "2628640",
    "end": "2634240"
  },
  {
    "text": "embrace spring or embrace it to a different degree and so to each his own i guess",
    "start": "2634240",
    "end": "2649839"
  },
  {
    "text": "right so so the question was how do we handle even across regional um regional setting the failures or of",
    "start": "2655599",
    "end": "2660960"
  },
  {
    "text": "replication so this is where technologies like cassandra come in very handy because they're built on the principle of eventual consistency",
    "start": "2660960",
    "end": "2667760"
  },
  {
    "text": "so even if there is a networking partitioning event let's say or a huge latency and the replication traffic fails",
    "start": "2667760",
    "end": "2673200"
  },
  {
    "text": "technology like cassandra will basically leave a hint then when the connection is restored that we'll need to replay it",
    "start": "2673200",
    "end": "2678720"
  },
  {
    "text": "and we make that explicit trade of choice rather than achieving strong consistency we're actually okay",
    "start": "2678720",
    "end": "2684079"
  },
  {
    "text": "with things not being consistent maybe half of a percent of a time but still keep our systems available",
    "start": "2684079",
    "end": "2691838"
  },
  {
    "text": "so the question was whether red black pushes are within each availability zone that depends on the service most of our",
    "start": "2701440",
    "end": "2707359"
  },
  {
    "text": "services are already triplicated throughout at least three availability zones and typically it's a old asg that",
    "start": "2707359",
    "end": "2714640"
  },
  {
    "text": "already spans all three zones in a new asg that also spans three zones and then you just shift",
    "start": "2714640",
    "end": "2722078"
  },
  {
    "text": "traffic no so they could so the question was whether for each api or remote call we check eureka no",
    "start": "2730839",
    "end": "2736480"
  },
  {
    "text": "that's where eureka client comes in eureka client communicates with the servers of band asynchronously and your application uses",
    "start": "2736480",
    "end": "2744160"
  },
  {
    "text": "the cached information inside eureka client to make his decisions",
    "start": "2744160",
    "end": "2749359"
  },
  {
    "text": "correct but it's it's a delayed signal it's not immediate so if a service goes down eureka will update it",
    "start": "2754319",
    "end": "2759680"
  },
  {
    "text": "but only after service misses three heartbeats and then you can configure how frequent your heartbeats are",
    "start": "2759680",
    "end": "2767280"
  },
  {
    "text": "intent yes how",
    "start": "2773119",
    "end": "2788960"
  },
  {
    "text": "right so let's make sure i understand the question the question was about how do we how did we decide to",
    "start": "2788960",
    "end": "2794000"
  },
  {
    "text": "to package them in a sense is it separate do we you know bundle them together so just like our architecture",
    "start": "2794000",
    "end": "2799359"
  },
  {
    "text": "microservices everything is separated we also created all the docker packages separately as",
    "start": "2799359",
    "end": "2804720"
  },
  {
    "text": "well and so if there is a dependency is going to pull it in anyway but you should not have to get this",
    "start": "2804720",
    "end": "2809760"
  },
  {
    "text": "whole bundle of stuff right only if you want just one component now one thing i do want to re-emphasize",
    "start": "2809760",
    "end": "2815040"
  },
  {
    "text": "again these are purely for evaluation they're not for production use please do not put them as is into production",
    "start": "2815040",
    "end": "2822480"
  },
  {
    "text": "yes um could you define that a little bit",
    "start": "2828839",
    "end": "2836160"
  },
  {
    "text": "better so the question was about how those different services authenticate to one another",
    "start": "2842839",
    "end": "2848160"
  },
  {
    "text": "um in reality they don't so we do have some control in terms of security groups but they all run within the same account",
    "start": "2848160",
    "end": "2854880"
  },
  {
    "text": "and so there is some outward perimeter protection if you will they don't have to authenticate to one",
    "start": "2854880",
    "end": "2860240"
  },
  {
    "text": "another in that sense they do they do um use on session session on",
    "start": "2860240",
    "end": "2865920"
  },
  {
    "text": "instance keys and that's what that's what we use but not much beyond that",
    "start": "2865920",
    "end": "2873040"
  },
  {
    "text": "so that one i don't know as intimately as i'd like to but there is a person right after this we'll be talking about",
    "start": "2873040",
    "end": "2878880"
  },
  {
    "text": "our um api layer danielle jacobson on bench mouse at 4 30. these are the right people to ask that",
    "start": "2878880",
    "end": "2884839"
  },
  {
    "text": "question all right thank you",
    "start": "2884839",
    "end": "2890160"
  }
]