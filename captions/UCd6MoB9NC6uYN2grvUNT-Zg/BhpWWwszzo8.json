[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "the limbic here I'm a Solutions Architect here at AWS and today I'm",
    "start": "60",
    "end": "5190"
  },
  {
    "text": "going to be taking you through using a few AWS services and tools how to build a service authenticated API for your",
    "start": "5190",
    "end": "12900"
  },
  {
    "text": "mobile or web application now if you've got any questions during the presentation feel free to use the",
    "start": "12900",
    "end": "19170"
  },
  {
    "text": "questions tab and one of our moderators will help out as best we can if any questions aren't answered I will",
    "start": "19170",
    "end": "25650"
  },
  {
    "text": "send through a frequently asked questions sheet with answers after the",
    "start": "25650",
    "end": "30810"
  },
  {
    "text": "webinar also the material in this presentation including a recording frequently asked questions and a copy of",
    "start": "30810",
    "end": "38760"
  },
  {
    "text": "the presentation deck will be shared with you in a few days after the webinar so if we have time at the end of the",
    "start": "38760",
    "end": "47340"
  },
  {
    "text": "webinar as well we will have a bit of a Q&A session as well so with that let's",
    "start": "47340",
    "end": "54719"
  },
  {
    "text": "keep on so before we start I want you to",
    "start": "54719",
    "end": "61980"
  },
  {
    "start": "58000",
    "end": "58000"
  },
  {
    "text": "consider the traditional API development process so imagine you've just been",
    "start": "61980",
    "end": "67439"
  },
  {
    "text": "tasked with building out an API for an application that you or your company is",
    "start": "67439",
    "end": "72960"
  },
  {
    "text": "developing so let's assume you if you've sat down and designed the API structure",
    "start": "72960",
    "end": "78740"
  },
  {
    "text": "you've mapped out each of the the endpoints representing your resources and and all the methods and operations",
    "start": "78740",
    "end": "84720"
  },
  {
    "text": "that you're going to support on each of these resources and that's great but but",
    "start": "84720",
    "end": "89790"
  },
  {
    "text": "now what you know now that you've done all the design work you've got to go code that and you need somewhere to host",
    "start": "89790",
    "end": "94979"
  },
  {
    "text": "that API well traditionally you'd create a bunch of servers or virtual machines",
    "start": "94979",
    "end": "100320"
  },
  {
    "text": "to house your API code and and this really presents you with your first challenge how many servers do you",
    "start": "100320",
    "end": "106530"
  },
  {
    "text": "actually need at the start you sort of expect you know maybe the handle only a few hundred users but predicting that a",
    "start": "106530",
    "end": "114899"
  },
  {
    "text": "number of users is hard and you remember the last time you one of your applications actually went from 80 to a",
    "start": "114899",
    "end": "121049"
  },
  {
    "text": "down the app store causing a tremendous amount of load and a poor customer experience so you know you might decide",
    "start": "121049",
    "end": "127890"
  },
  {
    "text": "to get a few more extra servers just in case and so you have that large upfront",
    "start": "127890",
    "end": "132959"
  },
  {
    "text": "cost before even though your application is going to be successful or not so and in a large number of servers and in virtual",
    "start": "132959",
    "end": "138930"
  },
  {
    "text": "machines to keep running and maintaining and that's just for the front end API nearly the same for the for the backend",
    "start": "138930",
    "end": "145769"
  },
  {
    "text": "application budget so imagine for a minute though being able to develop your API for your mobile web app that scales",
    "start": "145769",
    "end": "153750"
  },
  {
    "text": "automatically to meet your actual demand you can start small and then",
    "start": "153750",
    "end": "158879"
  },
  {
    "text": "automatically scale when your app goes from 8 to 8 on the App Store imagine developing on a platform that",
    "start": "158879",
    "end": "165450"
  },
  {
    "text": "has a you know a granular cost structure so you only have to pay for what you use so you can experiment and try out ideas",
    "start": "165450",
    "end": "172349"
  },
  {
    "text": "quickly in your own development plays Madden developing API so you didn't have",
    "start": "172349",
    "end": "178769"
  },
  {
    "text": "to manage those servers in operating system patch levels you know leaving you more time as a developer to you know to",
    "start": "178769",
    "end": "184859"
  },
  {
    "text": "add value to your application and in business and then you know imagine being",
    "start": "184859",
    "end": "190049"
  },
  {
    "text": "able to securely authenticate that without having to build that infrastructure to support that you know",
    "start": "190049",
    "end": "196440"
  },
  {
    "text": "Commons as a API developer that kind of sounds like a a bit of an utopia right well that's",
    "start": "196440",
    "end": "203489"
  },
  {
    "text": "what we're going to go through today today's webinar we're going to talk about how you would build a secure",
    "start": "203489",
    "end": "210419"
  },
  {
    "text": "authenticated API using a couple of AWS services so we'll look at Amazon API",
    "start": "210419",
    "end": "217500"
  },
  {
    "text": "gateway an AWS lander Amazon DynamoDB",
    "start": "217500",
    "end": "223109"
  },
  {
    "text": "and Amazon cook Neto to create a secure service authenticated API for your",
    "start": "223109",
    "end": "229470"
  },
  {
    "text": "mobile or web application to consume so we're going to learn how to build out",
    "start": "229470",
    "end": "234510"
  },
  {
    "text": "our API on Amazon API gateway where we will define the structure of the our API structure and contract for our API",
    "start": "234510",
    "end": "241560"
  },
  {
    "text": "consumers we'll look at how if you go away we're out and integrates your",
    "start": "241560",
    "end": "246720"
  },
  {
    "text": "request to about inserts in our case for that back in service our application",
    "start": "246720",
    "end": "252449"
  },
  {
    "text": "logic will be defined using AWS Lander will map out each of the API and gateway",
    "start": "252449",
    "end": "258750"
  },
  {
    "text": "calls to a bunch of service micro services that handle the logic of that particular call then we're going to take",
    "start": "258750",
    "end": "265800"
  },
  {
    "text": "a look at Amazon as our application data store so we're gonna you it's here that aw slander will",
    "start": "265800",
    "end": "272680"
  },
  {
    "text": "store the state of our application and finally we're going to create an Amazon",
    "start": "272680",
    "end": "278200"
  },
  {
    "text": "cooking in a user pool that we used to manage and our applications users and securely authenticate them for API so",
    "start": "278200",
    "end": "287860"
  },
  {
    "start": "287000",
    "end": "287000"
  },
  {
    "text": "let's take a high-level look at this fully managed API model so this this",
    "start": "287860",
    "end": "294400"
  },
  {
    "text": "diagram here shows the standard flow of an API call in this architecture will be",
    "start": "294400",
    "end": "300310"
  },
  {
    "text": "going deeper into each of these components as the webinar progresses so",
    "start": "300310",
    "end": "305500"
  },
  {
    "text": "firstly a request from your application a mobile or web application or for that",
    "start": "305500",
    "end": "310660"
  },
  {
    "text": "matter even another back-end service depending on the API endpoint that the",
    "start": "310660",
    "end": "318250"
  },
  {
    "text": "application is requesting this requests will be routed to a back-end now in this",
    "start": "318250",
    "end": "324490"
  },
  {
    "text": "particular case it's realitor AWS land up now this is where our business logic",
    "start": "324490",
    "end": "329560"
  },
  {
    "text": "for handling that request will be implemented now we could also handle that logic on an ec2 instance or even",
    "start": "329560",
    "end": "336640"
  },
  {
    "text": "another publicly accessible endpoint but using a service architecture with lambda gives us a number of advantages that",
    "start": "336640",
    "end": "342820"
  },
  {
    "text": "we'll talk about later and in this case lambda can then utilize",
    "start": "342820",
    "end": "348130"
  },
  {
    "text": "other AWS resources such as a database like dynamodb to fulfill that request so",
    "start": "348130",
    "end": "354190"
  },
  {
    "text": "let's let's take a closer look at that API gateway in this architecture so when",
    "start": "354190",
    "end": "363760"
  },
  {
    "text": "a request is made to the API gateway what's actually happening behind the scenes is that the request is first",
    "start": "363760",
    "end": "369760"
  },
  {
    "text": "routed through one of our cloud front hop locations so cloud front for those",
    "start": "369760",
    "end": "374830"
  },
  {
    "text": "you don't know is a content delivery network offered by AWS that allows you to distribute content with low latency",
    "start": "374830",
    "end": "380700"
  },
  {
    "text": "high data transfer rate by serving requests using a number of network h",
    "start": "380700",
    "end": "386110"
  },
  {
    "text": "locations close to your users so this ensures that your api gateways offering",
    "start": "386110",
    "end": "391240"
  },
  {
    "text": "a low latency for users when the OCO gateway receives the requests and if",
    "start": "391240",
    "end": "397150"
  },
  {
    "text": "you've configured it to do so it checks to see if the credentials inside that request is",
    "start": "397150",
    "end": "404040"
  },
  {
    "text": "authenticated with Amazon Cognito now once that user has been authenticated",
    "start": "404040",
    "end": "409760"
  },
  {
    "text": "API gateway then checks for records for this request in its dedicated case if no",
    "start": "409760",
    "end": "416130"
  },
  {
    "text": "case records are available it will then for the requests over the backend for processing again the backend can be a",
    "start": "416130",
    "end": "424110"
  },
  {
    "text": "lambda function a web service running on Amazon ec2 or any other publicly",
    "start": "424110",
    "end": "429120"
  },
  {
    "text": "accessible web service once the back-end has processed the request the API call",
    "start": "429120",
    "end": "437430"
  },
  {
    "text": "metrics are logged in Amazon CloudWatch and the content is returned to the client so we're going to apply that",
    "start": "437430",
    "end": "444900"
  },
  {
    "start": "444000",
    "end": "444000"
  },
  {
    "text": "architecture to a very simple notetaking application in this webinar and we're",
    "start": "444900",
    "end": "450540"
  },
  {
    "text": "going to create an api to support it now this notetaking application i've called it a fictitious note-taking that",
    "start": "450540",
    "end": "456930"
  },
  {
    "text": "i oh it's going to allow an authenticated user to create read update",
    "start": "456930",
    "end": "462630"
  },
  {
    "text": "and delete notes you know typical crud operations these operations will be",
    "start": "462630",
    "end": "469919"
  },
  {
    "text": "handled by a lambda micro service so and we will store the notes that the lender",
    "start": "469919",
    "end": "476190"
  },
  {
    "text": "function creates in a dynamic evening table once the API has been set up and",
    "start": "476190",
    "end": "481410"
  },
  {
    "text": "we can successfully read and write notes and verify that they're actually stored in dynamo dB we're going to go about and",
    "start": "481410",
    "end": "488250"
  },
  {
    "text": "add authentication to application with Amazon Cognito user pools so that's the",
    "start": "488250",
    "end": "496350"
  },
  {
    "text": "app that we're going to build let's take a look at our first building block the Amazon API gateway Amazon API",
    "start": "496350",
    "end": "505740"
  },
  {
    "start": "504000",
    "end": "504000"
  },
  {
    "text": "allows you to define and host your API in AWS so your API that's your contract",
    "start": "505740",
    "end": "513060"
  },
  {
    "text": "with your developers right for your particular application to help manage this contract we have the ability to",
    "start": "513060",
    "end": "519240"
  },
  {
    "text": "sort of run multiple versions of an API you can create stages so these enable",
    "start": "519240",
    "end": "525750"
  },
  {
    "text": "developers to deploy multiple stages for each version of your API for example a",
    "start": "525750",
    "end": "531060"
  },
  {
    "text": "Deb stage or a prod stage or or a Vita stage and using the API gateway you can",
    "start": "531060",
    "end": "537270"
  },
  {
    "text": "leverage the network that AWS has built so AWS API gateway leverages Amazon",
    "start": "537270",
    "end": "544830"
  },
  {
    "text": "Cloud front to create a global distribution for your api's so again this lowers the latency for your end",
    "start": "544830",
    "end": "550770"
  },
  {
    "text": "users but also gives you api's DDoS protection out-of-the-box to put in protect against things like malicious",
    "start": "550770",
    "end": "556920"
  },
  {
    "text": "requests at Levis layer 7 or lower level attacks for example syn floods in the",
    "start": "556920",
    "end": "562620"
  },
  {
    "text": "line the echo gateway allows developers the throttle incoming quests and use cloud watch to monitor the status and",
    "start": "562620",
    "end": "569970"
  },
  {
    "text": "latency of your API s and set alarms to respond accordingly with built-in",
    "start": "569970",
    "end": "575550"
  },
  {
    "text": "integration to AWS authentication services like Amazon canítö you can control access and authorization to your",
    "start": "575550",
    "end": "581940"
  },
  {
    "text": "API so but before we dive deep into our",
    "start": "581940",
    "end": "587690"
  },
  {
    "text": "API and on API gateway for our notetaking application we need to talk a",
    "start": "587690",
    "end": "593430"
  },
  {
    "text": "little bit about the concept of a web-based restful api so Amazon API",
    "start": "593430",
    "end": "598560"
  },
  {
    "text": "gateway allows you to define restful based API yeah the term rests short for",
    "start": "598560",
    "end": "604920"
  },
  {
    "text": "representational state transfer was coined by our Roy fielding in his 2000",
    "start": "604920",
    "end": "610020"
  },
  {
    "text": "PhD paper architectural styles and the designing of network based software architectures and when we say an API is",
    "start": "610020",
    "end": "616800"
  },
  {
    "text": "restful we say it's restful if it exhibits some behaviors detailing in",
    "start": "616800",
    "end": "622140"
  },
  {
    "text": "Fielding's paper where the use of an api progresses an application by selecting",
    "start": "622140",
    "end": "628290"
  },
  {
    "text": "resources and performing operations against them to initiate state transitions and that's a bit of a",
    "start": "628290",
    "end": "633870"
  },
  {
    "text": "mouthful and it sounds pretty complicated but it's actually really simple a resource in",
    "start": "633870",
    "end": "639020"
  },
  {
    "text": "RESTful API defines the things or objects against which will perform operations so they are they usually the",
    "start": "639020",
    "end": "646340"
  },
  {
    "text": "nouns in your application for example in our API we're going to be working with notes creating reading updating and",
    "start": "646340",
    "end": "654500"
  },
  {
    "text": "deleting notes so in this case we could represent the collections of notes with",
    "start": "654500",
    "end": "661010"
  },
  {
    "text": "a URI or universal resource identifier for example the RI HTTP note-taker bio",
    "start": "661010",
    "end": "666740"
  },
  {
    "text": "slash notes an API called there would represent a collection of in of notes so",
    "start": "666740",
    "end": "673610"
  },
  {
    "text": "the entire collection DRI note taken at io / note / 15 I would represent a",
    "start": "673610",
    "end": "681170"
  },
  {
    "text": "particular element in that collection so we could perform operations on in a collection you know creating new",
    "start": "681170",
    "end": "688820"
  },
  {
    "text": "elements for example or operations on the element itself maybe deleting a",
    "start": "688820",
    "end": "695090"
  },
  {
    "text": "particular element in that node in this case here if we called a delete on slash",
    "start": "695090",
    "end": "700550"
  },
  {
    "text": "note slash 15 we don't delete the node with the ID of 15 now we perform those",
    "start": "700550",
    "end": "708710"
  },
  {
    "text": "operations using HTTP methods and you can think of these as them as the verbs",
    "start": "708710",
    "end": "713990"
  },
  {
    "text": "or operations against those resources now we use HTTP methods all the time",
    "start": "713990",
    "end": "719900"
  },
  {
    "text": "when we visit a web page you're actually performing a get operation against the",
    "start": "719900",
    "end": "724910"
  },
  {
    "text": "URL yeah in a restful api we could use a",
    "start": "724910",
    "end": "730120"
  },
  {
    "text": "HTTP GET to represent a read operation for example we could represent a post",
    "start": "730120",
    "end": "736580"
  },
  {
    "text": "method against either a collection or an element to create something so for",
    "start": "736580",
    "end": "743120"
  },
  {
    "text": "example if you call the post on the collection resource here this should create another resource so calling post",
    "start": "743120",
    "end": "750350"
  },
  {
    "text": "against notetaker slash notes I would create another note for example if we",
    "start": "750350",
    "end": "756710"
  },
  {
    "text": "called say a delete HTTP method against an element in a collection for example the delete method against notetaker dot",
    "start": "756710",
    "end": "763580"
  },
  {
    "text": "io / notes / 15 that would delete the node with the ID of 15",
    "start": "763580",
    "end": "771070"
  },
  {
    "text": "I mean now that we've got some very under butter about let's take a look at the actual API gateway interface and how",
    "start": "771830",
    "end": "778370"
  },
  {
    "text": "we can actually implement some of these so here's a screenshot of the Amazon API",
    "start": "778370",
    "end": "784400"
  },
  {
    "start": "782000",
    "end": "782000"
  },
  {
    "text": "gateway console now we're going to be looking at this in a demonstration of an inter grab a bit later on but let's go",
    "start": "784400",
    "end": "790250"
  },
  {
    "text": "through this first now on the left-hand side we see the resources that are being",
    "start": "790250",
    "end": "796610"
  },
  {
    "text": "defined in our API and the methods supported for each resource so we've",
    "start": "796610",
    "end": "802820"
  },
  {
    "text": "defined here we've defined two resources a slash notes that represents the collection of notes and a slash notes",
    "start": "802820",
    "end": "809240"
  },
  {
    "text": "slash note ID that represents an individual element the slash notes",
    "start": "809240",
    "end": "814550"
  },
  {
    "text": "resource represents an entire collection of notes and it has three methods defined a get an options and a post",
    "start": "814550",
    "end": "822380"
  },
  {
    "text": "method the get method against the slash notes will allow us to get all modes in",
    "start": "822380",
    "end": "828800"
  },
  {
    "text": "the collection if someone makes a request with a post method against the",
    "start": "828800",
    "end": "833930"
  },
  {
    "text": "slash notes this will create a new note in the collection and then finally are",
    "start": "833930",
    "end": "839660"
  },
  {
    "text": "our options method we can use this to figure out what methods are actually supported on that resource on that URI",
    "start": "839660",
    "end": "846650"
  },
  {
    "text": "and in this case it will return get and post are allowed on this resource",
    "start": "846650",
    "end": "851800"
  },
  {
    "text": "underneath that we've got a slash note slash note ID resource and this is again",
    "start": "851800",
    "end": "857480"
  },
  {
    "text": "used to represent an individual element in the notes collection now you can",
    "start": "857480",
    "end": "862850"
  },
  {
    "text": "think of note ID here as a variable so if these are calls this API with slash notes / 15 note ID will be 15 in this",
    "start": "862850",
    "end": "871820"
  },
  {
    "text": "request you'll also notice that a number of operations have been defined for note",
    "start": "871820",
    "end": "877760"
  },
  {
    "text": "/ note ID here we've got a get a delete and options and a put so again it get",
    "start": "877760",
    "end": "885200"
  },
  {
    "text": "would read an individual note in this case a put will update an individual note and a delete will delete individual",
    "start": "885200",
    "end": "891550"
  },
  {
    "text": "so that sort of defines our overall structure of the contract for our API",
    "start": "891550",
    "end": "896990"
  },
  {
    "text": "defines our resources and the methods against those resources now in this",
    "start": "896990",
    "end": "903350"
  },
  {
    "text": "particular screenshot we've got the post method selected and the post",
    "start": "903350",
    "end": "909089"
  },
  {
    "text": "method with that selected on the right-hand side you see four big boxes you've got method request integration",
    "start": "909089",
    "end": "916110"
  },
  {
    "text": "request method response and integration response and this shows how a request",
    "start": "916110",
    "end": "922920"
  },
  {
    "text": "when it's made to the post method flows through the API gateway a request first",
    "start": "922920",
    "end": "929790"
  },
  {
    "text": "arrived at the method request then flows through to the integration request to",
    "start": "929790",
    "end": "934920"
  },
  {
    "text": "the back-end service in this case here a lambda function called nodes manager then to the integration and response and",
    "start": "934920",
    "end": "941850"
  },
  {
    "text": "then finally to the to the method response now one way you can think about",
    "start": "941850",
    "end": "946860"
  },
  {
    "text": "this screen is to think that everything on the left side of the orange line that I'm showing there defines the contract",
    "start": "946860",
    "end": "954060"
  },
  {
    "text": "between your API and your developers their resources and method on the far",
    "start": "954060",
    "end": "959670"
  },
  {
    "text": "left defining overall API structure on the right of the line sorry I've just",
    "start": "959670",
    "end": "971040"
  },
  {
    "text": "got a message there saying that the mic is a bit ok you can you guys okay so on",
    "start": "971040",
    "end": "982560"
  },
  {
    "text": "the right of the line you can define how the request can be transformed and integrated to our back-end service now",
    "start": "982560",
    "end": "990959"
  },
  {
    "text": "in the figure shown here yeah we are passing the request to Al and a function",
    "start": "990959",
    "end": "996149"
  },
  {
    "text": "called notes manager a request will first be sent to the method request",
    "start": "996149",
    "end": "1002990"
  },
  {
    "text": "section here you will be you will perform your authentication so as a",
    "start": "1002990",
    "end": "1009290"
  },
  {
    "text": "request comes in now in this particular case we've got no authentication set for this method but it's here we can also",
    "start": "1009290",
    "end": "1016100"
  },
  {
    "text": "define the model model of our expected data input so for example here for this",
    "start": "1016100",
    "end": "1022190"
  },
  {
    "text": "request for a post if we expect the body of the request to hold a field maybe",
    "start": "1022190",
    "end": "1028428"
  },
  {
    "text": "then their aim field or something like that you could define that in your rent method request model so models are",
    "start": "1028429",
    "end": "1034339"
  },
  {
    "text": "defined using json schema and we're looking at an example of one when we go to the demo",
    "start": "1034339",
    "end": "1041058"
  },
  {
    "text": "once the request passes through the method requests and has been authenticated and the data received is",
    "start": "1041059",
    "end": "1046949"
  },
  {
    "text": "mapped onto the method request model it passes to the integration request now",
    "start": "1046949",
    "end": "1053220"
  },
  {
    "text": "this section allows you to manipulate the data of the request before we send it to the backend system so in this case",
    "start": "1053220",
    "end": "1059549"
  },
  {
    "text": "up at the lambda function now you can use this to perform transformation on",
    "start": "1059549",
    "end": "1066029"
  },
  {
    "text": "that request maybe your lambda function is expecting a different format then you",
    "start": "1066029",
    "end": "1072120"
  },
  {
    "text": "know what you've defined in your method request the model in your method revised so you could use this to change that",
    "start": "1072120",
    "end": "1078779"
  },
  {
    "text": "dodge transform that data for something that your back-end system expects without actually affecting your API",
    "start": "1078779",
    "end": "1085710"
  },
  {
    "text": "contract so that request is then sent to the lambda function and the lambda",
    "start": "1085710",
    "end": "1092159"
  },
  {
    "text": "function will then return some sort of output and it's here in the integration response that we can handle",
    "start": "1092159",
    "end": "1098039"
  },
  {
    "text": "transformation of the data back from that lambda function so we could again",
    "start": "1098039",
    "end": "1103110"
  },
  {
    "text": "you know transform that's information that comes back from our lambda handler again at the integration response step",
    "start": "1103110",
    "end": "1111000"
  },
  {
    "text": "and then finally we've got the method request our response box and this box",
    "start": "1111000",
    "end": "1117389"
  },
  {
    "text": "allows you to define the expected model of your output so what the contracts and",
    "start": "1117389",
    "end": "1123870"
  },
  {
    "text": "when you make a request what it looks like what the developer should expect that now let's let's dive a little",
    "start": "1123870",
    "end": "1130019"
  },
  {
    "text": "deeper let's have a look at what how that would work with the land our nodes manager there so each we've got here",
    "start": "1130019",
    "end": "1139440"
  },
  {
    "start": "1136000",
    "end": "1136000"
  },
  {
    "text": "we've got the notes post integrated with a lambda function that creates a note",
    "start": "1139440",
    "end": "1145679"
  },
  {
    "text": "we've got the slash notes yet integrated with a lambda function that reads all",
    "start": "1145679",
    "end": "1151019"
  },
  {
    "text": "the notes from the database and we've got a put which does an update and a",
    "start": "1151019",
    "end": "1156029"
  },
  {
    "text": "delete which does a deletion on an individual node so we have to find",
    "start": "1156029",
    "end": "1161190"
  },
  {
    "text": "individual microservices for in lambda",
    "start": "1161190",
    "end": "1166580"
  },
  {
    "text": "to handle those particular requests we're gonna go through that in a little bit more detail but data will progress",
    "start": "1166580",
    "end": "1173030"
  },
  {
    "text": "through the method requests through the integration requests before arrives at that lambda handler now let's say that",
    "start": "1173030",
    "end": "1180470"
  },
  {
    "text": "our lambda function expects a format that looks something like that you know you've got an operation we're gonna",
    "start": "1180470",
    "end": "1187070"
  },
  {
    "text": "create something we've got a payload we're gonna add this particular note and then we're going to table the notes that",
    "start": "1187070",
    "end": "1194299"
  },
  {
    "text": "we're gonna write to now we probably don't want to expose that data to",
    "start": "1194299",
    "end": "1199730"
  },
  {
    "text": "front-end API it's a lot of implementation details things like the table name and the operation we want to",
    "start": "1199730",
    "end": "1206510"
  },
  {
    "text": "model that you know just is simple it just has a note and a note ID that you can refer to later so we need some way",
    "start": "1206510",
    "end": "1213740"
  },
  {
    "text": "of transforming that request body expectation that we've defined in our",
    "start": "1213740",
    "end": "1219409"
  },
  {
    "text": "model to the Lando request body and it's here that we can use integration request",
    "start": "1219409",
    "end": "1225470"
  },
  {
    "text": "mapping templates so in their integration request in this step we can define a mapping template that map's you",
    "start": "1225470",
    "end": "1234200"
  },
  {
    "text": "know the note and the note ID here to the lambda body so you can see here from the hand port we're actually grabbing",
    "start": "1234200",
    "end": "1240559"
  },
  {
    "text": "those two fields and putting it into a structure that looks like that before we hand it over to now mapping templates",
    "start": "1240559",
    "end": "1248990"
  },
  {
    "start": "1248000",
    "end": "1248000"
  },
  {
    "text": "are a powerful tool and allow you to perform really complex manipulation of the data you receive from your client",
    "start": "1248990",
    "end": "1255799"
  },
  {
    "text": "before you integrate it to the backend and this increases your ability to integrate to multiple back-end systems",
    "start": "1255799",
    "end": "1262150"
  },
  {
    "text": "they include functions for iterating through your responses and and utilities to pass through the responses you can",
    "start": "1262150",
    "end": "1268940"
  },
  {
    "text": "learn more about mapping templates you know in our Doc's so now that we've covered a little bit of our API gateway",
    "start": "1268940",
    "end": "1276470"
  },
  {
    "text": "let's take a look more closely at our second building block of our application AWS lambda so again here it's where we",
    "start": "1276470",
    "end": "1284270"
  },
  {
    "text": "will define the business logic of our nodes application so one of the biggest",
    "start": "1284270",
    "end": "1290210"
  },
  {
    "start": "1289000",
    "end": "1289000"
  },
  {
    "text": "benefits of moving towards a service architecture is that allows you to focus on defining your business logic of your",
    "start": "1290210",
    "end": "1296900"
  },
  {
    "text": "application and dramatically reduce that undifferentiated heavy lifting that you",
    "start": "1296900",
    "end": "1301940"
  },
  {
    "text": "traditionally have to do managing your servers patching that",
    "start": "1301940",
    "end": "1307059"
  },
  {
    "text": "so AWS Lander allows you to define stateless trigger-based microservices",
    "start": "1307059",
    "end": "1312740"
  },
  {
    "text": "that define your business logic there is no infrastructure to manage you upload",
    "start": "1312740",
    "end": "1318080"
  },
  {
    "text": "your code and lambda handles everything else with lambda you only pay for when your code is running you're not paying",
    "start": "1318080",
    "end": "1324710"
  },
  {
    "text": "for idle time lambda allows you to bring your own code so there are a number of",
    "start": "1324710",
    "end": "1329840"
  },
  {
    "text": "languages that you could use to define that business logic and we'll go through that in a second and you can still use your threads your",
    "start": "1329840",
    "end": "1336559"
  },
  {
    "text": "processes you can still access files just like you would normally so at this",
    "start": "1336559",
    "end": "1342110"
  },
  {
    "text": "time you can write your lambda functions in no js' JavaScript Java and Python so",
    "start": "1342110",
    "end": "1349190"
  },
  {
    "start": "1343000",
    "end": "1343000"
  },
  {
    "text": "you have access to all your net 80 libraries that these languages support and you can use third-party libraries or",
    "start": "1349190",
    "end": "1354919"
  },
  {
    "text": "even roll your own the lander context has an has the AWS",
    "start": "1354919",
    "end": "1360559"
  },
  {
    "text": "SDK built in so you can programmatically integrate with other AWS services you",
    "start": "1360559",
    "end": "1366200"
  },
  {
    "text": "have access to processes threads and sockets that you normally have running on a physical server or ec2 instance the",
    "start": "1366200",
    "end": "1372620"
  },
  {
    "text": "resolves model is simple so you pick the amount of memory that your function requires and the CPU and the network are",
    "start": "1372620",
    "end": "1379909"
  },
  {
    "text": "allocated proportional so you don't any more memory you can allocate that with a simple request via the API console and",
    "start": "1379909",
    "end": "1387259"
  },
  {
    "text": "the CPU and network will automatically be chosen for you based on this now each",
    "start": "1387259",
    "end": "1392450"
  },
  {
    "text": "lambda function is considered stateless in order to persist the data you can use Amazon DynamoDB s3 or elastication you",
    "start": "1392450",
    "end": "1401090"
  },
  {
    "text": "now pay cash for our application I know taking application we're going to use dynamite DB there's no actual ability to",
    "start": "1401090",
    "end": "1407840"
  },
  {
    "text": "log into the box now these lambda functions they're transient functions that are spun up in response to an event",
    "start": "1407840",
    "end": "1414700"
  },
  {
    "text": "now lambda can respond to an event in the entire AWS ecosystem of products so",
    "start": "1414700",
    "end": "1421490"
  },
  {
    "start": "1417000",
    "end": "1417000"
  },
  {
    "text": "and you can even send events so that you know other lambda functions can respond so this allows you to build a service",
    "start": "1421490",
    "end": "1428779"
  },
  {
    "text": "ecosystem on top of AWS lambda here acts as the glue between these services so",
    "start": "1428779",
    "end": "1435110"
  },
  {
    "text": "for example you put something in an s3 bucket you can have land off fire when it sees something in that",
    "start": "1435110",
    "end": "1442100"
  },
  {
    "text": "bucket so it allows you to securely grant access to resources input now",
    "start": "1442100",
    "end": "1447590"
  },
  {
    "text": "inside the BP C's I using LMS attending and access management so this allows you",
    "start": "1447590",
    "end": "1453110"
  },
  {
    "text": "to find green control over who or what can call your lambda functions",
    "start": "1453110",
    "end": "1458560"
  },
  {
    "text": "monitoring and logging are built into AWS lambda so you can use this data to collect metrics on requests errors",
    "start": "1458560",
    "end": "1465160"
  },
  {
    "text": "latency and in throttles and logging for each of the functions can be accessed using the built-in integration with",
    "start": "1465160",
    "end": "1471500"
  },
  {
    "text": "cloud watch logs so here's a here's a screenshot of the a Tobias lambda",
    "start": "1471500",
    "end": "1477230"
  },
  {
    "start": "1475000",
    "end": "1475000"
  },
  {
    "text": "console so you can use the console to edit your code inline or upload a zip file of the code that you developed on",
    "start": "1477230",
    "end": "1484910"
  },
  {
    "text": "your local machine so it allows you to to configure test events and so forth that you can use to pass your lambda",
    "start": "1484910",
    "end": "1492380"
  },
  {
    "text": "code now lambda comes in with a bunch of built-in integrations to a number of AWS",
    "start": "1492380",
    "end": "1498890"
  },
  {
    "text": "services including dynamo DB that we'll be using today s3 Cognito and api gateway there are",
    "start": "1498890",
    "end": "1507500"
  },
  {
    "text": "also a lot more that will be using SNS Mobile SDK and Kinesis included so now",
    "start": "1507500",
    "end": "1515900"
  },
  {
    "text": "that we've learned a little bit about Amazon API gateway and AWS Lander let's",
    "start": "1515900",
    "end": "1522020"
  },
  {
    "text": "take a look at a demo of building out our API for our notetaking application",
    "start": "1522020",
    "end": "1527500"
  },
  {
    "text": "so this remember this API is going to take in notes transform the data of the",
    "start": "1527500",
    "end": "1532760"
  },
  {
    "text": "notes and send it to a lambda function to store in dynamo DV so I'm gonna",
    "start": "1532760",
    "end": "1538190"
  },
  {
    "text": "switch to my browser here and you can",
    "start": "1538190",
    "end": "1544340"
  },
  {
    "text": "see there I've got a couple of tabs open in my browser so in this demonstration I'm gonna start bottom-up I'm going to",
    "start": "1544340",
    "end": "1551630"
  },
  {
    "text": "build out my dynamo DB database first to store the notes then I'm going to create a lambda function that will be able to",
    "start": "1551630",
    "end": "1558800"
  },
  {
    "text": "read write update and delete that lambda function and then take a look at the API gateway so we can put an API inside of",
    "start": "1558800",
    "end": "1565430"
  },
  {
    "text": "it so you can see here I've created a notes table and this notes table has",
    "start": "1565430",
    "end": "1571870"
  },
  {
    "text": "turkeys I've got a riki of user ID and they sort key of",
    "start": "1571870",
    "end": "1577290"
  },
  {
    "text": "note ID now I'm going to be able to I want to be able to writes notes in there such that you know my user ID maybe add",
    "start": "1577290",
    "end": "1584250"
  },
  {
    "text": "a note idea of one and then whatever note I want to store inside there so",
    "start": "1584250",
    "end": "1589370"
  },
  {
    "text": "it's a very simple noise QL database and I need some way and I'll just refresh",
    "start": "1589370",
    "end": "1595650"
  },
  {
    "text": "there to make sure that there's nothing currently in their database but I need some way of reading and writing to that",
    "start": "1595650",
    "end": "1601980"
  },
  {
    "text": "database and this is where Lander comes in so I'm gonna go up the top here and click on the land of management button",
    "start": "1601980",
    "end": "1608100"
  },
  {
    "text": "here and this is little lamda page now I'm going to create a lambda function to",
    "start": "1608100",
    "end": "1614670"
  },
  {
    "text": "handle writing to this database and in this case I actually don't have to write any code to do that there is a blueprint",
    "start": "1614670",
    "end": "1622650"
  },
  {
    "text": "if I type in simple here there's a blueprint called the simple mobile backend and this this blueprint already",
    "start": "1622650",
    "end": "1630180"
  },
  {
    "text": "has the code to read write update and delete entries in a in a DynamoDB table",
    "start": "1630180",
    "end": "1636470"
  },
  {
    "text": "so we're going to use that I would then go and you select that one there but",
    "start": "1636470",
    "end": "1642090"
  },
  {
    "text": "what we're going to do is I'm gonna click on the lander management another tab here and here's what I created earlier so this is the land of function",
    "start": "1642090",
    "end": "1648780"
  },
  {
    "text": "that is a using that that blueprint the simple mobile backend blueprint and",
    "start": "1648780",
    "end": "1654570"
  },
  {
    "text": "we've called this nodes manager and for those of you who are no js' or judgment",
    "start": "1654570",
    "end": "1659820"
  },
  {
    "text": "fans you know where you've got the code there that you can edit but all this",
    "start": "1659820",
    "end": "1665100"
  },
  {
    "text": "really needs is a couple of items to be able to read and write to that database",
    "start": "1665100",
    "end": "1670790"
  },
  {
    "text": "I'm going to click on actions here and then click on configure tested then and",
    "start": "1670790",
    "end": "1676400"
  },
  {
    "text": "here I've got the actual operation that this particular function supports so for",
    "start": "1676400",
    "end": "1683340"
  },
  {
    "text": "example I've got an operation called create so this lambda function expects an operation and here you can create",
    "start": "1683340",
    "end": "1689790"
  },
  {
    "text": "read update or delete you've got the payload and this is the item then I want to cram to create in this table and in",
    "start": "1689790",
    "end": "1696660"
  },
  {
    "text": "this case here the table name is called notes so I can go ahead and I'm going to test that and this lambda function it's",
    "start": "1696660",
    "end": "1705000"
  },
  {
    "text": "executing currently should run to that table so let's go over to dynamodb and I'm just gonna refresh us",
    "start": "1705000",
    "end": "1711780"
  },
  {
    "text": "the table here and you can see there I've been able to write to that dynamodb",
    "start": "1711780",
    "end": "1717570"
  },
  {
    "text": "database there without writing a single line of code alright so now that we've",
    "start": "1717570",
    "end": "1723570"
  },
  {
    "text": "got some way of putting stuff something into that database let's put an API in front of it so I've go to my API gateway",
    "start": "1723570",
    "end": "1730020"
  },
  {
    "text": "console and here is my Notes service that we've defined so here I've got a",
    "start": "1730020",
    "end": "1736680"
  },
  {
    "text": "slash nodes resource and a slash node ID resource with those methods that we",
    "start": "1736680",
    "end": "1742050"
  },
  {
    "text": "talked about earlier they're in our presentation I can create new resources by clicking on actions and creating",
    "start": "1742050",
    "end": "1747900"
  },
  {
    "text": "either a method or a new resource underneath now the post method has been selected if I go ahead and click on the",
    "start": "1747900",
    "end": "1754470"
  },
  {
    "text": "method request here that's the first thing that will the request will pass",
    "start": "1754470",
    "end": "1759810"
  },
  {
    "text": "through now in this case we've got no authorization set so this method is not authenticated we'll look at that a bit",
    "start": "1759810",
    "end": "1766260"
  },
  {
    "text": "later on but if I go down to the request model you can see I've got a model there",
    "start": "1766260",
    "end": "1771390"
  },
  {
    "text": "that defines what I'm expecting as input now if I go ahead and click on models",
    "start": "1771390",
    "end": "1776760"
  },
  {
    "text": "and look at that create model here we've got the adjacent schema that represents",
    "start": "1776760",
    "end": "1783300"
  },
  {
    "text": "the data that I'm expecting in so I'm expecting a name and note ID and a note",
    "start": "1783300",
    "end": "1789000"
  },
  {
    "text": "in the body of my requests I'm gonna click back on resources there and I'm",
    "start": "1789000",
    "end": "1794850"
  },
  {
    "text": "gonna flow through after the method request comes the integration request so",
    "start": "1794850",
    "end": "1800190"
  },
  {
    "text": "the integration requests here we're pointing to a lambda function that we defined earlier and I've got my body",
    "start": "1800190",
    "end": "1805770"
  },
  {
    "text": "mapping templates and it's here that I can define the transformation so in this case here we're gonna take the name the",
    "start": "1805770",
    "end": "1812430"
  },
  {
    "text": "note ID field and putting in a structure that looks like this so okay I've now defined my API and",
    "start": "1812430",
    "end": "1820740"
  },
  {
    "text": "again I have not had to write in much harder than a mapping template let's",
    "start": "1820740",
    "end": "1826800"
  },
  {
    "text": "test this out so if I go down the bottom here to my an application called postman",
    "start": "1826800",
    "end": "1831840"
  },
  {
    "text": "this is a cool little tool that allows me to you know create requests of the",
    "start": "1831840",
    "end": "1838080"
  },
  {
    "text": "API test my API it's a plugin for Chrome in this case I've got my method selected",
    "start": "1838080",
    "end": "1845549"
  },
  {
    "text": "post and the URL that I'm going to be posting to the key bit there is the notes URL and this is that the down the",
    "start": "1845549",
    "end": "1853769"
  },
  {
    "text": "bottom here I've got the body and in this case here I want to add a second node by the ap9 called my second",
    "start": "1853769",
    "end": "1860340"
  },
  {
    "text": "unauthenticated note and I've can I can set things like a header so in this case here I'm setting my content type so if I",
    "start": "1860340",
    "end": "1867149"
  },
  {
    "text": "make her if I send that request what I'll expect to happen is it's going to hit that API you can see down the bottom",
    "start": "1867149",
    "end": "1872519"
  },
  {
    "text": "of notes been created it's going to go through that method request which is going to map match my model it's going",
    "start": "1872519",
    "end": "1878489"
  },
  {
    "text": "to go through the integration request which will transform the data Batman to",
    "start": "1878489",
    "end": "1883649"
  },
  {
    "text": "something that lambda expects and then lambda is going to go ahead and write that to the database so let's check on",
    "start": "1883649",
    "end": "1888809"
  },
  {
    "text": "that let me go back to Chrome and a click on my dynamo DB tab at the top here and I'm going to refresh this table",
    "start": "1888809",
    "end": "1895470"
  },
  {
    "text": "and you can see there that the second note has been updated so you can see",
    "start": "1895470",
    "end": "1901080"
  },
  {
    "text": "there very simply I've got a you know of working API that I can read and write to",
    "start": "1901080",
    "end": "1908149"
  },
  {
    "text": "with very little minimal code and then I'd write myself so now that we have our",
    "start": "1908149",
    "end": "1917039"
  },
  {
    "text": "API set up let's take a look at how we would add authentication so we're never",
    "start": "1917039",
    "end": "1922409"
  },
  {
    "text": "using Amazon Cognito to implement authentication on our AP on there are three or thin dication options that we",
    "start": "1922409",
    "end": "1928799"
  },
  {
    "text": "can use with Amazon comedo we're going to be looking at all of them so but you can use signature version for a lambda",
    "start": "1928799",
    "end": "1935519"
  },
  {
    "text": "custom authorizer and the one that we're going for meant in our application you know add to that",
    "start": "1935519",
    "end": "1941369"
  },
  {
    "text": "API that we just created could narrow user pools so the first option and when",
    "start": "1941369",
    "end": "1948179"
  },
  {
    "start": "1948000",
    "end": "1948000"
  },
  {
    "text": "performing authentication with Amazon Cognito is to utilize signature version 4 or seen before you can use it before",
    "start": "1948179",
    "end": "1955859"
  },
  {
    "text": "in I am policies or identity and access management policies to control authentication so signature version 4",
    "start": "1955859",
    "end": "1963690"
  },
  {
    "text": "this is a an amazon process to add authentication information to each of those requests so in there",
    "start": "1963690",
    "end": "1971710"
  },
  {
    "text": "in the dogon below we're going to have Amazon API gateway it's gonna require that every request that you send be",
    "start": "1971710",
    "end": "1979090"
  },
  {
    "text": "signed with a Sigma 4 so to sign the request you calculate a digital",
    "start": "1979090",
    "end": "1984430"
  },
  {
    "text": "signature using a cryptographic hash function and the input to that hash will include the text of your request and",
    "start": "1984430",
    "end": "1990220"
  },
  {
    "text": "your secret access key the hashing function will return a hash value that",
    "start": "1990220",
    "end": "1995710"
  },
  {
    "text": "you can then include in your authorization header in the API request now the Amazon SDK includes tools that",
    "start": "1995710",
    "end": "2003330"
  },
  {
    "text": "you can calculate that that allows you to calculate a Sigma for automatically now the diagram here shows a mobile",
    "start": "2003330",
    "end": "2010560"
  },
  {
    "text": "application beaver being authenticated with Amazon kognito now in this case Amazon congedo is used",
    "start": "2010560",
    "end": "2016770"
  },
  {
    "text": "to generate temporary credentials that can be used to authenticate with the Amazon API gateway Amazon pigneto first",
    "start": "2016770",
    "end": "2023670"
  },
  {
    "text": "verifies that identity with an external entity identity provider such as Facebook Google Twitter or open ID",
    "start": "2023670",
    "end": "2030870"
  },
  {
    "text": "once the external and identity provider verify sees the Amazon kick Nino will",
    "start": "2030870",
    "end": "2036030"
  },
  {
    "text": "return a set of temporary credentials to the application in this case the mobile application will use these temporary",
    "start": "2036030",
    "end": "2043470"
  },
  {
    "text": "credentials to calculate the Sigma V for so that Sigma for credentials is then",
    "start": "2043470",
    "end": "2050190"
  },
  {
    "text": "included in the authorization header before sending the request to Amazon API gateway so these these credentials are",
    "start": "2050190",
    "end": "2056820"
  },
  {
    "text": "used by a gateway to authenticate the request and can we pass through the lender as well this that can option that",
    "start": "2056820",
    "end": "2064740"
  },
  {
    "start": "2063000",
    "end": "2063000"
  },
  {
    "text": "we're going to look at to authenticate using cognero is using a custom landowner Iser now in this scenario you",
    "start": "2064740",
    "end": "2073679"
  },
  {
    "text": "create a lambda function and again you can create this in the Java JavaScript",
    "start": "2073680",
    "end": "2080460"
  },
  {
    "text": "or Python that's lambda supports and its job is to",
    "start": "2080460",
    "end": "2085679"
  },
  {
    "text": "authenticate that incoming request so it's going to accept a set of credentials I usually buy the",
    "start": "2085680",
    "end": "2091620"
  },
  {
    "text": "authorization header or authenticate those credentials and then return an iron policy now it can authenticate that",
    "start": "2091620",
    "end": "2097770"
  },
  {
    "text": "to an extent and no provider or even an internal identity source if you've",
    "start": "2097770",
    "end": "2102840"
  },
  {
    "text": "already bought it'll return iron policy and this policy will contain the authentication and",
    "start": "2102840",
    "end": "2108869"
  },
  {
    "text": "authorization policy for the credentials sent to the customer authorizer now",
    "start": "2108869",
    "end": "2114119"
  },
  {
    "text": "these policies are cached for a configured TTL and API gateway only will",
    "start": "2114119",
    "end": "2119640"
  },
  {
    "text": "only invoke you'll land a function the first time it sees a token all calls",
    "start": "2119640",
    "end": "2124950"
  },
  {
    "text": "that followed during the TTL period are authorized by the API gateway using the cache policy so there are the two",
    "start": "2124950",
    "end": "2131880"
  },
  {
    "text": "options but you know they rely on an external provider to provide identity in",
    "start": "2131880",
    "end": "2137250"
  },
  {
    "text": "our notetaking application we want to store our own users we want to have a database of users that we can",
    "start": "2137250",
    "end": "2145349"
  },
  {
    "text": "authenticate against and this is where errors on cañedo user force comes in so I know taking application we need to",
    "start": "2145349",
    "end": "2152069"
  },
  {
    "start": "2152000",
    "end": "2152000"
  },
  {
    "text": "store a list of users and in the notes for each of those users right and I know about you but managing user directories",
    "start": "2152069",
    "end": "2158130"
  },
  {
    "text": "is pretty hard as a developer you know that's usually a responsibility that as a developer you don't really want yeah",
    "start": "2158130",
    "end": "2164549"
  },
  {
    "text": "you don't want to worry about you know security you're managing password is multi-factor authentication user",
    "start": "2164549",
    "end": "2170910"
  },
  {
    "text": "verification password resets the list goes on so this is a perfect candidate",
    "start": "2170910",
    "end": "2177359"
  },
  {
    "text": "to move to the cloud in this case is AWS will perform that undifferentiated heavy",
    "start": "2177359",
    "end": "2182970"
  },
  {
    "text": "lifting and you can focus on your app so community user pools allows you to create and maintain a user directory and",
    "start": "2182970",
    "end": "2189779"
  },
  {
    "text": "add signup and sign into your application in this case we'll use it to add signup and sign in to our notetaking",
    "start": "2189779",
    "end": "2197250"
  },
  {
    "text": "application now use a pool scale to hundreds of millions of users and a",
    "start": "2197250",
    "end": "2202319"
  },
  {
    "text": "design to provide simple secure and low cost options for you as a developer so",
    "start": "2202319",
    "end": "2208230"
  },
  {
    "text": "you can use user pools to add user registration signing features here out instead of using an external identity",
    "start": "2208230",
    "end": "2214829"
  },
  {
    "text": "provider such as Facebook Google or Twitter you can use user pools to host",
    "start": "2214829",
    "end": "2220109"
  },
  {
    "text": "those users yourself so there are a",
    "start": "2220109",
    "end": "2225150"
  },
  {
    "text": "number of different scenarios that are designed to work with community user portal so these are all pretty common",
    "start": "2225150",
    "end": "2231900"
  },
  {
    "start": "2226000",
    "end": "2226000"
  },
  {
    "text": "scenarios when managing users in a web or mobile app so can you know user",
    "start": "2231900",
    "end": "2237270"
  },
  {
    "text": "Paul's handles you deciding and signing where a user can sign up to your application using an",
    "start": "2237270",
    "end": "2242340"
  },
  {
    "text": "email a phone number a username and password user paws will authenticate them using these credentials it supports",
    "start": "2242340",
    "end": "2250710"
  },
  {
    "text": "email and phone number verification during the signup process to help verify the information given to your",
    "start": "2250710",
    "end": "2256740"
  },
  {
    "text": "applications correct if your users forget their password you know user pools provides flows to actually handle",
    "start": "2256740",
    "end": "2263310"
  },
  {
    "text": "this for you as well allows you to store profile within the profile custom",
    "start": "2263310",
    "end": "2270480"
  },
  {
    "text": "attributes for each of your user so you could store things like maybe a particular to your application even the",
    "start": "2270480",
    "end": "2276870"
  },
  {
    "text": "high score or something like that if enabled users can complete multi-factor authentication by our SMS as part of the",
    "start": "2276870",
    "end": "2284310"
  },
  {
    "text": "sign in and forgot password flows along",
    "start": "2284310",
    "end": "2290340"
  },
  {
    "start": "2290000",
    "end": "2290000"
  },
  {
    "text": "with user base scenarios there are a number of administrative scenarios that are also handled for you with with",
    "start": "2290340",
    "end": "2295350"
  },
  {
    "text": "community user pools so it allows you to configure and delete multiple user pools",
    "start": "2295350",
    "end": "2302340"
  },
  {
    "text": "and you AWS account so you have more than one and you can manage individual users in that pool you know you could",
    "start": "2302340",
    "end": "2307560"
  },
  {
    "text": "create a user you could configure into",
    "start": "2307560",
    "end": "2312810"
  },
  {
    "text": "users email phone verification said I pass with policies including manually forcing a password reset you can even",
    "start": "2312810",
    "end": "2319350"
  },
  {
    "text": "define custom attributes to store things for your applications here as well along with that you can actually set up custom",
    "start": "2319350",
    "end": "2325440"
  },
  {
    "text": "lambda triggers that trigger when different workflows so for example when",
    "start": "2325440",
    "end": "2330780"
  },
  {
    "text": "you sign up you might have a lambda trigger that goes in adds it to another database somewhere for example so let's",
    "start": "2330780",
    "end": "2338970"
  },
  {
    "text": "take a look at that authentication flow in a little bit more detail for user pools so the first that that will happen",
    "start": "2338970",
    "end": "2346830"
  },
  {
    "start": "2339000",
    "end": "2339000"
  },
  {
    "text": "is a signup occurs so a user signs up for an account with Amazon community",
    "start": "2346830",
    "end": "2352320"
  },
  {
    "text": "user pools it's not branded it's you know you can make a brand into your particular application in this scenario",
    "start": "2352320",
    "end": "2358710"
  },
  {
    "text": "the signup process will ask for any email telephone number and password in addition to any custom attributes that",
    "start": "2358710",
    "end": "2365070"
  },
  {
    "text": "we set up amazon canina will then automatically verify their users email address by sending an email",
    "start": "2365070",
    "end": "2372030"
  },
  {
    "text": "the code to confirm or verify a phone number if you're using a phone number so",
    "start": "2372030",
    "end": "2380130"
  },
  {
    "text": "by sending an SMS code when when they sign up our phone number one once the",
    "start": "2380130",
    "end": "2388650"
  },
  {
    "text": "user has been registered and confirmed they log in to their application using",
    "start": "2388650",
    "end": "2393960"
  },
  {
    "text": "the Amazon Cognito SDK so the SDK will take their credentials and securely pass",
    "start": "2393960",
    "end": "2399990"
  },
  {
    "text": "that across to Amazon community user pools are for authentication",
    "start": "2399990",
    "end": "2406190"
  },
  {
    "text": "if multi-factor authentication is turned on Amazon container user pools will send",
    "start": "2406190",
    "end": "2412620"
  },
  {
    "text": "an SMS or email with a one-time authentication code so after the user",
    "start": "2412620",
    "end": "2421050"
  },
  {
    "text": "has been authenticated the Amazon kameena will return a JWT token so this",
    "start": "2421050",
    "end": "2429060"
  },
  {
    "text": "token it's a open ID compliant token containing the credentials and the claim",
    "start": "2429060",
    "end": "2434420"
  },
  {
    "text": "for the user for this particular application now the JSON web token or JWT or jocked",
    "start": "2434420",
    "end": "2442220"
  },
  {
    "start": "2440000",
    "end": "2440000"
  },
  {
    "text": "it's a base64 encoded cryptographically",
    "start": "2442220",
    "end": "2447619"
  },
  {
    "text": "verifiable claim so the token itself is divided up into three sections we've got",
    "start": "2447710",
    "end": "2453630"
  },
  {
    "text": "a header which takes the algorithm and then token type we've got a payload which contains your claim and then",
    "start": "2453630",
    "end": "2459540"
  },
  {
    "text": "finally me a signature that you can use to verify whether the token has been manipulated and you can use tools like",
    "start": "2459540",
    "end": "2465630"
  },
  {
    "text": "GWT no IO to show that it's decoded web token and that's what I'm showing here we've got a in this particular case",
    "start": "2465630",
    "end": "2472230"
  },
  {
    "text": "we've got a cognate Oh identity token being shown and you can see that here for a user Paul Maddox with a phone",
    "start": "2472230",
    "end": "2480720"
  },
  {
    "text": "number that's been verified and I've got some custom attributes here I've got a purchased premium that's related to my",
    "start": "2480720",
    "end": "2486330"
  },
  {
    "text": "particular application in this case so the API gateway when when you once",
    "start": "2486330",
    "end": "2493260"
  },
  {
    "text": "you've got that JWT token back from Amazon okay Neto your application will",
    "start": "2493260",
    "end": "2498930"
  },
  {
    "text": "insert that in the authorization header of the request so for example here we're",
    "start": "2498930",
    "end": "2504480"
  },
  {
    "text": "getting we get method on slash notes so we want to get all the notes and we've put a JWT",
    "start": "2504480",
    "end": "2511570"
  },
  {
    "text": "token that we've got back from the amazon kinetic musicals in the authorization field now api gateway will",
    "start": "2511570",
    "end": "2520630"
  },
  {
    "text": "get that and depending on how its configured in this case it's configured to directly use the user pool instead of",
    "start": "2520630",
    "end": "2525820"
  },
  {
    "text": "a custom authorizes to go off and validate that with with user pools if",
    "start": "2525820",
    "end": "2531580"
  },
  {
    "text": "you're using a custom authorizer that's where that would fit in that's a step there that would fit in in between",
    "start": "2531580",
    "end": "2536680"
  },
  {
    "text": "that and their company any user pulls the Goffin and do something now if the",
    "start": "2536680",
    "end": "2544000"
  },
  {
    "text": "authentication is successful so community user pool says yep that's a valid token the api gateway will then",
    "start": "2544000",
    "end": "2550570"
  },
  {
    "text": "pass your call to the backend function in this case i'll and the notes function that will handle that request",
    "start": "2550570",
    "end": "2557520"
  },
  {
    "text": "now this authentication is it will be cached for up to an hour so let's take a",
    "start": "2557520",
    "end": "2564640"
  },
  {
    "text": "look at how we would add that to our application to our notetaking application so we've got a working API",
    "start": "2564640",
    "end": "2573570"
  },
  {
    "text": "let's put authentication with Amazon create a user pulls onto it so I'm going",
    "start": "2573570",
    "end": "2578920"
  },
  {
    "text": "to switch back to my browser and I've already got their user pools tab opened",
    "start": "2578920",
    "end": "2584920"
  },
  {
    "text": "up here and you can see here I've got a couple of different user pools in my account and I've created a note service user",
    "start": "2584920",
    "end": "2592480"
  },
  {
    "text": "port select that then now there is a you know you could create your own user pool",
    "start": "2592480",
    "end": "2597520"
  },
  {
    "text": "just by running through the wizard this user pool currently has one user that's",
    "start": "2597520",
    "end": "2602800"
  },
  {
    "text": "me in there at the moment with a required attribute of email so you must have an email address I've got some",
    "start": "2602800",
    "end": "2608650"
  },
  {
    "text": "password policies set up and I can manage my pool using this interface let's take a look at the actual users",
    "start": "2608650",
    "end": "2615940"
  },
  {
    "text": "that have been set up here so I'll click on the users tab and you can see here I've got one user I've got myself",
    "start": "2615940",
    "end": "2621760"
  },
  {
    "text": "perkier a at amazon.com and this is currently enabled and it being confirmed",
    "start": "2621760",
    "end": "2626830"
  },
  {
    "text": "so the signup process has gone through and the email burnt has been verified or",
    "start": "2626830",
    "end": "2632380"
  },
  {
    "text": "email or phone number if I click on that particular user I can do things like send a request to reset his password",
    "start": "2632380",
    "end": "2639630"
  },
  {
    "text": "I can enable multi-factor authentication and/or I can disable this user I'm going",
    "start": "2639630",
    "end": "2644940"
  },
  {
    "text": "to create I'm gonna disable that user and I'm going to delete that user because we're gonna create that user",
    "start": "2644940",
    "end": "2650790"
  },
  {
    "text": "using the Amazon SDK so here on another",
    "start": "2650790",
    "end": "2656820"
  },
  {
    "text": "tab here I've got a very very simple user signup page now this code will be",
    "start": "2656820",
    "end": "2663630"
  },
  {
    "text": "released after the webinar completes but he yeah I've got some code that I want",
    "start": "2663630",
    "end": "2669930"
  },
  {
    "text": "to register a user confirm user login a user and get their token that I can use with the API gateway you know obviously",
    "start": "2669930",
    "end": "2677040"
  },
  {
    "text": "you turn this into a nicely designed out but just in for the purpose of this demonstration this will do so the first",
    "start": "2677040",
    "end": "2683490"
  },
  {
    "text": "thing I'm gonna do is I'm going to register myself and what that is doing",
    "start": "2683490",
    "end": "2698760"
  },
  {
    "text": "it's going to use the API and the SDK to create a user incognito he's a force so",
    "start": "2698760",
    "end": "2707280"
  },
  {
    "text": "if I go into user pools now and if i refresh this what I expect to see is a is that that user has now been in my",
    "start": "2707280",
    "end": "2714720"
  },
  {
    "text": "pool but it's in an unconfirmed status so I you know I'm just gonna open my",
    "start": "2714720",
    "end": "2720450"
  },
  {
    "text": "email here I should receive a confirmation code now I can either go in here and manually",
    "start": "2720450",
    "end": "2727050"
  },
  {
    "text": "confirm the user but I should receive in a second I'm just checking my email and",
    "start": "2727050",
    "end": "2732450"
  },
  {
    "text": "I have I've now got a verification code that I can use to verify and confirm this user so this is used as an",
    "start": "2732450",
    "end": "2739770"
  },
  {
    "text": "application to confirm a user's email address or email is that one so I'm",
    "start": "2739770",
    "end": "2749190"
  },
  {
    "text": "could confirm there and again that's come up as is confirmed so that's going to hit our API at the API and I go back",
    "start": "2749190",
    "end": "2755520"
  },
  {
    "text": "to you uses and I click refresh yeah I should see that change to confirmed so",
    "start": "2755520",
    "end": "2760710"
  },
  {
    "text": "I've now got a valid user in my usable so I should be able to log in so I'm",
    "start": "2760710",
    "end": "2766860"
  },
  {
    "text": "gonna login",
    "start": "2766860",
    "end": "2772550"
  },
  {
    "text": "and using the Amazon SDK it's gone over",
    "start": "2773530",
    "end": "2779030"
  },
  {
    "text": "to user pools and it's logged in because that's a confirmed user and using the",
    "start": "2779030",
    "end": "2784910"
  },
  {
    "text": "SDK I can get a JWT token that represents myself as a user so you'd use",
    "start": "2784910",
    "end": "2791420"
  },
  {
    "text": "this behind the scene I've just got a little button here that displays it so you guys can see it clearly now if I copied that I've got a little plugin",
    "start": "2791420",
    "end": "2798530"
  },
  {
    "text": "from chrome from JWT if I paste that into this encoded section here you can",
    "start": "2798530",
    "end": "2805400"
  },
  {
    "text": "see there it's verified me the payload here I've got my email some some custom",
    "start": "2805400",
    "end": "2811130"
  },
  {
    "text": "kognito attributes inside there and I can see inside that JWT now there are",
    "start": "2811130",
    "end": "2817040"
  },
  {
    "text": "many different libraries that you can use and you know that come with most",
    "start": "2817040",
    "end": "2823010"
  },
  {
    "text": "most programmers have a JWT library that you can use to manipulate that to now",
    "start": "2823010",
    "end": "2828380"
  },
  {
    "text": "let's now that we've got a little web page sort of set up to do authentication I've got a token let's set up our API",
    "start": "2828380",
    "end": "2835280"
  },
  {
    "text": "gateway to use this that token to authenticate that API so I go over here",
    "start": "2835280",
    "end": "2840650"
  },
  {
    "text": "and click on API gateway and I've got a nother API that I've set up it's exactly",
    "start": "2840650",
    "end": "2847490"
  },
  {
    "text": "the same as the previous one but with one key difference in the method request",
    "start": "2847490",
    "end": "2853160"
  },
  {
    "text": "I've got a note service authentication added so the steps to get there if I",
    "start": "2853160",
    "end": "2860240"
  },
  {
    "text": "click on the left hand side if I click on authorizes it's here that you would set up an authorizer",
    "start": "2860240",
    "end": "2866060"
  },
  {
    "text": "so you could create a custom lambda based authorizer or a camino usable where the integration",
    "start": "2866060",
    "end": "2871400"
  },
  {
    "text": "is done already that's what I've done here so I've created an API authorize I called node service and where I pointed",
    "start": "2871400",
    "end": "2878780"
  },
  {
    "text": "to my cognitive user pools that I created before now I could grab that",
    "start": "2878780",
    "end": "2884839"
  },
  {
    "text": "token ID and I could paste it in here and fingers crossed to the demo gods that should off entick eight that claim",
    "start": "2884839",
    "end": "2891950"
  },
  {
    "text": "that happened there so I've got a a token that I can then use and now I can",
    "start": "2891950",
    "end": "2899330"
  },
  {
    "text": "click back on resources here click on post and you can see there it's been selected",
    "start": "2899330",
    "end": "2907650"
  },
  {
    "text": "so for this API I should be able to do the exact same request that I did before but this time I'm gonna have an",
    "start": "2907650",
    "end": "2914880"
  },
  {
    "text": "authorization header that I received from kognito that I can use to authenticate so I'm going to go back to",
    "start": "2914880",
    "end": "2921030"
  },
  {
    "text": "postman that we used earlier and you can",
    "start": "2921030",
    "end": "2926940"
  },
  {
    "text": "see here I've got a similar request going to the slash notes so on a credit",
    "start": "2926940",
    "end": "2932910"
  },
  {
    "text": "new user but this time I've got a header that includes an authorization fields my",
    "start": "2932910",
    "end": "2938640"
  },
  {
    "text": "body down the bottom here I've got up the note Note 3 and a note of my third",
    "start": "2938640",
    "end": "2943770"
  },
  {
    "text": "authenticated note now I don't have a name there that I had before because I've set up my function to receive",
    "start": "2943770",
    "end": "2951630"
  },
  {
    "text": "retrieve that from the GWT token itself in the headers field let's insert that",
    "start": "2951630",
    "end": "2959060"
  },
  {
    "text": "authorization that the token that I received in the authorization header so I'm going to paste that there and I'm",
    "start": "2959060",
    "end": "2964980"
  },
  {
    "text": "gonna try execute that so if all thing goes well that's going to go through to",
    "start": "2964980",
    "end": "2972630"
  },
  {
    "text": "hit the method request authorize that then hit the integration request do the",
    "start": "2972630",
    "end": "2978120"
  },
  {
    "text": "transformation off to lambda function and then into dynamo DB so let's go off",
    "start": "2978120",
    "end": "2983520"
  },
  {
    "text": "the diamond to be in check if that note there that third node got sent in there",
    "start": "2983520",
    "end": "2989240"
  },
  {
    "text": "so I go back to dynamodb here and I'm gonna refresh that table and you can see",
    "start": "2989240",
    "end": "2994800"
  },
  {
    "text": "here I've now got an API authenticated note by my API and again without just a",
    "start": "2994800",
    "end": "3002960"
  },
  {
    "text": "configuration without writing any code I've just the proof that it works let's",
    "start": "3002960",
    "end": "3009080"
  },
  {
    "text": "go back to postman here and I'm gonna just figure out this authorization",
    "start": "3009080",
    "end": "3014950"
  },
  {
    "text": "gibberish inside there make a send request to that and I should get a",
    "start": "3014950",
    "end": "3020590"
  },
  {
    "text": "unauthorised message so you can see there we've just you know in in a time",
    "start": "3020590",
    "end": "3026000"
  },
  {
    "text": "of this webinar we've set up a authenticated API",
    "start": "3026000",
    "end": "3031960"
  },
  {
    "text": "so and this brings us to our fourth building block that we're going to use here we're going to take a look out and",
    "start": "3039130",
    "end": "3045170"
  },
  {
    "text": "now that we've got our API how can we you know the data SDK that I use that to build out that little web application",
    "start": "3045170",
    "end": "3052539"
  },
  {
    "text": "let's take a look at that a little bit more detail now the API gateway can",
    "start": "3052539",
    "end": "3057890"
  },
  {
    "start": "3056000",
    "end": "3056000"
  },
  {
    "text": "automatically generate client a client SDK based on your customers API",
    "start": "3057890",
    "end": "3062959"
  },
  {
    "text": "definition so you know Dave UI definition that we did with notes in the",
    "start": "3062959",
    "end": "3068239"
  },
  {
    "text": "model and so forth we can generate an API for iOS or JavaScript for Android",
    "start": "3068239",
    "end": "3074979"
  },
  {
    "text": "automatically using the console now this is dramatically speeds up that your",
    "start": "3074979",
    "end": "3081829"
  },
  {
    "text": "development effort so use this we go into the SD pay generation field in the",
    "start": "3081829",
    "end": "3098449"
  },
  {
    "text": "API console we've seen write API sleep mode measurement now that generated SDK that's model aware so if you've defined",
    "start": "3098449",
    "end": "3105499"
  },
  {
    "start": "3102000",
    "end": "3102000"
  },
  {
    "text": "your model like we have it'll automatically marshal an unnatural requests to objects in the language that",
    "start": "3105499",
    "end": "3111679"
  },
  {
    "text": "you've chosen so you know dealing with model objects becomes becomes pretty",
    "start": "3111679",
    "end": "3116869"
  },
  {
    "text": "easy it also includes methods for signing API calls and in generating the",
    "start": "3116869",
    "end": "3122749"
  },
  {
    "text": "AWS sig signature version for Sigma for headers in your API request the SDK also",
    "start": "3122749",
    "end": "3129229"
  },
  {
    "text": "features the ability to automatically handle things like our throttling responses with exponential backups and",
    "start": "3129229",
    "end": "3135199"
  },
  {
    "text": "things like that that will add to the resiliency of your API client so that",
    "start": "3135199",
    "end": "3144099"
  },
  {
    "text": "brings us to the end of developing",
    "start": "3144099",
    "end": "3149179"
  },
  {
    "text": "authenticated API is on on AWS so whatever you learned well we've learned",
    "start": "3149179",
    "end": "3154939"
  },
  {
    "text": "how to define an API using a service architecture we've learnt how to define the structure and how that flows to our",
    "start": "3154939",
    "end": "3161929"
  },
  {
    "text": "API we've integrated it with AWS lambda",
    "start": "3161929",
    "end": "3167029"
  },
  {
    "text": "for our little micro services we've learned how to use community user pools as a secure identity provider to",
    "start": "3167029",
    "end": "3174099"
  },
  {
    "text": "authenticate that API and we've also taken a look at some of the automated tools and SDA SDK that the API gateway",
    "start": "3174099",
    "end": "3181389"
  },
  {
    "text": "provides to automate some of these workflows now there's lots of great examples on the AWS labs github account",
    "start": "3181389",
    "end": "3188649"
  },
  {
    "text": "so I encourage you to go check out the HTTP github.com slash AWS labs for more",
    "start": "3188649",
    "end": "3196089"
  },
  {
    "text": "information so with that I'd like to thank you for your time we've got a",
    "start": "3196089",
    "end": "3203319"
  },
  {
    "text": "couple of minutes left so I'm just going to open up the questions tab here and let's see if we can answer some of your",
    "start": "3203319",
    "end": "3209949"
  },
  {
    "text": "questions or if you've got any more feel free to raise it Rea some things about",
    "start": "3209949",
    "end": "3218859"
  },
  {
    "text": "the audio I've got a question from lambda from Gustav Ocampo sia asking why",
    "start": "3218859",
    "end": "3227229"
  },
  {
    "text": "does it land support RDS lender does support RDS it just didn't fit it into",
    "start": "3227229",
    "end": "3233289"
  },
  {
    "text": "that the slide back there with lambda you can integrate and - Aurora -",
    "start": "3233289",
    "end": "3239939"
  },
  {
    "text": "redshift you can integrate - RDS Postgres yeah so you know if you can",
    "start": "3239939",
    "end": "3247809"
  },
  {
    "text": "call those external endpoints to do that",
    "start": "3247809",
    "end": "3251459"
  },
  {
    "text": "another question they had from Leonid can you use a custom URL for the",
    "start": "3253079",
    "end": "3259089"
  },
  {
    "text": "endpoint yes you can so when we generated the URL with our API that URL",
    "start": "3259089",
    "end": "3265959"
  },
  {
    "text": "was generated for us we can create a cname entry or something like that in via DNS to point or name this record to",
    "start": "3265959",
    "end": "3274179"
  },
  {
    "text": "point to that API gateway okay yeah so",
    "start": "3274179",
    "end": "3290259"
  },
  {
    "text": "questions on what lambda will support we're looking at what languages Lander",
    "start": "3290259",
    "end": "3295929"
  },
  {
    "text": "will support so we currently support JavaScript Java and Python and we're",
    "start": "3295929",
    "end": "3303069"
  },
  {
    "text": "always looking at you know developing new languages disappoint my I think I'd you to work with either your solution architect like",
    "start": "3303069",
    "end": "3309010"
  },
  {
    "text": "me or a your account manager to try and raise that request so and Amazon you",
    "start": "3309010",
    "end": "3315550"
  },
  {
    "text": "know more than 90% of our features come from requests from our customers I think",
    "start": "3315550",
    "end": "3324390"
  },
  {
    "text": "yeah it so Joe do you have anything else",
    "start": "3324390",
    "end": "3330990"
  },
  {
    "text": "to go through there all right well thank",
    "start": "3330990",
    "end": "3336310"
  },
  {
    "text": "you for your time guys I hope you enjoyed today's webinar let's get",
    "start": "3336310",
    "end": "3341470"
  },
  {
    "text": "building those authenticated serverless api's on on AWS thank you",
    "start": "3341470",
    "end": "3347519"
  },
  {
    "text": "you",
    "start": "3353509",
    "end": "3355569"
  }
]