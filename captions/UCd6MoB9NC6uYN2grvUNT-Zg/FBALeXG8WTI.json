[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "good afternoon everyone and welcome to Co n three one zero running batch processes on e CS my name is Asha",
    "start": "269",
    "end": "7379"
  },
  {
    "text": "chakrabarti and I'm a Solutions Architect with AWS and joining me today to present will be will white who's an",
    "start": "7379",
    "end": "13740"
  },
  {
    "text": "engineering lead from matte box so what are we going to talk about today we're",
    "start": "13740",
    "end": "19199"
  },
  {
    "text": "going to talk a little bit about some of the characteristics and challenges of running batch processes understanding",
    "start": "19199",
    "end": "24869"
  },
  {
    "text": "how yes why Amazon es e CS is compelling for running your batch workload we'll",
    "start": "24869",
    "end": "30000"
  },
  {
    "text": "walk through some recommended design patterns as well as best practices and Will's going to come up on stage and",
    "start": "30000",
    "end": "35430"
  },
  {
    "text": "talk about how they're using how matte box is using ECS to run their batch architectures so what are some of the",
    "start": "35430",
    "end": "42180"
  },
  {
    "start": "41000",
    "end": "41000"
  },
  {
    "text": "challenges of running batch workloads today so typically Bachelor clothes tend to be very resource intensive and place",
    "start": "42180",
    "end": "48809"
  },
  {
    "text": "heavy demands on both your system and application architectures they also typically need to be completed within a",
    "start": "48809",
    "end": "54899"
  },
  {
    "text": "certain period of time and if you're using you know your the same infrastructure to run multiple batch",
    "start": "54899",
    "end": "60570"
  },
  {
    "text": "jobs one batch job could adversely affect the other if it needs more resources causing a bad performance for",
    "start": "60570",
    "end": "67619"
  },
  {
    "text": "the other job you have to be able to scale your infrastructure resources for your batch workload that would probably",
    "start": "67619",
    "end": "74100"
  },
  {
    "text": "keep it increasing in size due to data due to the increase in data size as well and you want to be able to or your",
    "start": "74100",
    "end": "79860"
  },
  {
    "text": "entire infrastructure that's running your batch architecture you want to be able to utilize each machine to its full",
    "start": "79860",
    "end": "85290"
  },
  {
    "text": "capacity and at the same time make it cost-effective so what what is it that",
    "start": "85290",
    "end": "91860"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "batch workloads actually need firstly reliability if a job fails it should be",
    "start": "91860",
    "end": "97380"
  },
  {
    "text": "automatic that process should automatically be restarted easy development and easy deployment it's",
    "start": "97380",
    "end": "103680"
  },
  {
    "text": "it's very difficult for a development team to actually try and develop and test a batch job on their local machine",
    "start": "103680",
    "end": "109470"
  },
  {
    "text": "so providing an environment for them to actually develop your batch system is",
    "start": "109470",
    "end": "114869"
  },
  {
    "text": "key also being able to make sure that you can minimize setup of that environment and boilerplate code and",
    "start": "114869",
    "end": "120630"
  },
  {
    "text": "allow for easier deployment makes it easier to mix the development cycle of your batch architecture much easier",
    "start": "120630",
    "end": "125810"
  },
  {
    "text": "higher efficiency so being able to utilize maybe being able to realize maximum you",
    "start": "125810",
    "end": "131720"
  },
  {
    "text": "of your infrastructure resources running your batch job and nobody likes to be",
    "start": "131720",
    "end": "136760"
  },
  {
    "text": "called at 3:00 a.m. in the morning due to a failure so keeping a automated",
    "start": "136760",
    "end": "141830"
  },
  {
    "text": "workflow as much as possible so that you can minimize your operations profile and",
    "start": "141830",
    "end": "147200"
  },
  {
    "text": "above all how do you make sure that you can ensure that you know since you're running your batch job only for a certain period of time you want it to be",
    "start": "147200",
    "end": "153890"
  },
  {
    "text": "cost-effective and not have to pay for infrastructure that you're not using most of the day so what makes ECS",
    "start": "153890",
    "end": "162050"
  },
  {
    "text": "compelling for running a batch processing workload well firstly ECS actually exposes a state management",
    "start": "162050",
    "end": "169610"
  },
  {
    "start": "166000",
    "end": "166000"
  },
  {
    "text": "system via API calls and you can utilize the the state management system by calling it by ECS api's to control and",
    "start": "169610",
    "end": "178580"
  },
  {
    "text": "monitor your cluster as well as understand state of your cluster this",
    "start": "178580",
    "end": "184490"
  },
  {
    "text": "this particular state management system allows optimal placement from one container to tens and thousands of",
    "start": "184490",
    "end": "190010"
  },
  {
    "text": "containers and it also eliminates the need for you to run procure install and",
    "start": "190010",
    "end": "195440"
  },
  {
    "text": "manage your own cluster management software ECS api is provide performance",
    "start": "195440",
    "end": "201709"
  },
  {
    "start": "199000",
    "end": "199000"
  },
  {
    "text": "at scale so uh I believe a few months ago we actually ran a test where we were regular continuously calling both lists",
    "start": "201709",
    "end": "209060"
  },
  {
    "text": "and described ECS api's in a purely continuously in a period of 72 hours",
    "start": "209060",
    "end": "214190"
  },
  {
    "text": "against a cluster of varying size and I believe at peak we went above thousand",
    "start": "214190",
    "end": "219709"
  },
  {
    "text": "instances and you can see both the green and red lines represent P 99 and P 50 latencies and ECS basically provided a",
    "start": "219709",
    "end": "227540"
  },
  {
    "text": "near flat response so VCS will scale irrespective of your cluster size a",
    "start": "227540",
    "end": "234670"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "flexible container placement ECS has two inbuilt schedulers one for running",
    "start": "235630",
    "end": "241100"
  },
  {
    "text": "short-lived processes and one for running longer applications and ECS in",
    "start": "241100",
    "end": "246110"
  },
  {
    "text": "utilizes both of these schedulers to optimally place containers on your ECS",
    "start": "246110",
    "end": "251209"
  },
  {
    "text": "cluster since the state management system is actually provided or exposed",
    "start": "251209",
    "end": "257390"
  },
  {
    "text": "to you via UCS api's you can actually utilize those api is to build your custom scheduler as well if you have",
    "start": "257390",
    "end": "263300"
  },
  {
    "text": "specific requirements for scale ECS again is designed and integrated to",
    "start": "263300",
    "end": "269990"
  },
  {
    "text": "work with many other AWS services so you can launch your ECS cluster that would run all of your containers within a VPC",
    "start": "269990",
    "end": "277159"
  },
  {
    "text": "taking advantage of the VP C's network and security isolation features you can",
    "start": "277159",
    "end": "282169"
  },
  {
    "text": "utilize the last EBS elastic block store for persistent storage all traffic can be routed to your ECS cluster via an",
    "start": "282169",
    "end": "289389"
  },
  {
    "text": "elastic load balancer and ECS integrates with iam and cloud trail for audit",
    "start": "289389",
    "end": "295520"
  },
  {
    "text": "management and access capabilities respectively and so just like I",
    "start": "295520",
    "end": "302539"
  },
  {
    "start": "301000",
    "end": "301000"
  },
  {
    "text": "mentioned when you run your ec2 instances in a V PC you can utilize security groups as well to control the",
    "start": "302539",
    "end": "308270"
  },
  {
    "text": "traffic and an access to your e CS cluster and you can also use iam access",
    "start": "308270",
    "end": "313879"
  },
  {
    "text": "policies to make sure that you know who has access to your e CS cluster and what they can do with that cluster and your",
    "start": "313879",
    "end": "320089"
  },
  {
    "text": "other ECS resources so a few key fundamental components of e CS are tasks",
    "start": "320089",
    "end": "327379"
  },
  {
    "text": "containers clusters and container instances so let's talk a little bit about what each of these mean firstly",
    "start": "327379",
    "end": "334969"
  },
  {
    "text": "tasks are essentially a grouping of related containers and you can essentially run as many tasks on one",
    "start": "334969",
    "end": "342169"
  },
  {
    "start": "336000",
    "end": "336000"
  },
  {
    "text": "instance as as will fit so that cont that dictates what dictates how many tasks can run on an instance is the",
    "start": "342169",
    "end": "348139"
  },
  {
    "text": "instance type that you choose in a task essentially is an instantiation of something known as a task definition but",
    "start": "348139",
    "end": "354649"
  },
  {
    "text": "if we take a look at this example here we have four separate containers that are part of the same task definition an",
    "start": "354649",
    "end": "360949"
  },
  {
    "text": "engine X web server that's fronting a rails application which is supported by a my sequel back-end and a log collector",
    "start": "360949",
    "end": "367669"
  },
  {
    "text": "that collects log files from the rails application so when you instantiate a",
    "start": "367669",
    "end": "373039"
  },
  {
    "text": "task definition you're basically running a task on a nice es cluster so what does",
    "start": "373039",
    "end": "379250"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "a task definition look like a task definition is a grouping of containers that you want running together and you",
    "start": "379250",
    "end": "385909"
  },
  {
    "text": "specify all these containers in one file so if you can see a task definition has",
    "start": "385909",
    "end": "391099"
  },
  {
    "text": "a few separate sections to it a family a version and you can utilize this to",
    "start": "391099",
    "end": "396649"
  },
  {
    "text": "actually maintain definition file similarly to how you would maintain your source code via version number a particular name for",
    "start": "396649",
    "end": "403749"
  },
  {
    "text": "your task definition and essentially a task definition you can utilize it to model your application so if you if you",
    "start": "403749",
    "end": "412659"
  },
  {
    "text": "take a look at this particular format you see that there's a container definition within the task definition so",
    "start": "412659",
    "end": "420279"
  },
  {
    "text": "when you specify all the containers that you want running together in your task definition you need to specify exactly",
    "start": "420279",
    "end": "427899"
  },
  {
    "text": "what those containers are and from which image should they be launched so you specify the name of the the container",
    "start": "427899",
    "end": "433509"
  },
  {
    "text": "the image and any runtime variables that the task needs to be aware that the task needs to be aware of when launching your",
    "start": "433509",
    "end": "440469"
  },
  {
    "text": "container so as an example of how this would look in this in this case a container the container definition tells",
    "start": "440469",
    "end": "446439"
  },
  {
    "start": "443000",
    "end": "443000"
  },
  {
    "text": "you that the name of the container is a web server it's an it's from the nginx image all CPU memory and port mappings",
    "start": "446439",
    "end": "454329"
  },
  {
    "text": "also are provided so that when this is launched by the acs scheduler it knows",
    "start": "454329",
    "end": "459369"
  },
  {
    "text": "that it needs to look for a place on the ECS cluster that has the CPU and memory available it links to the rails",
    "start": "459369",
    "end": "466360"
  },
  {
    "text": "application and the essential flag is set to true so what that means is if",
    "start": "466360",
    "end": "471909"
  },
  {
    "text": "this particular container fails the task will basically kill all other containers",
    "start": "471909",
    "end": "478629"
  },
  {
    "text": "associated with the task definition clusters so you want to be able to take",
    "start": "478629",
    "end": "486939"
  },
  {
    "text": "all of your tasks all of your that that define your containers together and run them on an ECS cluster you can define an",
    "start": "486939",
    "end": "493449"
  },
  {
    "text": "easiest cluster in two ways it's a pool of resources to run your tasks and it's also a basically a grouping of something",
    "start": "493449",
    "end": "500679"
  },
  {
    "text": "known as container instances you can scale this cluster up and down depending upon the requirements that you have for",
    "start": "500679",
    "end": "507189"
  },
  {
    "text": "your workload and with content container instances that form a cluster an ECS",
    "start": "507189",
    "end": "513339"
  },
  {
    "text": "cluster is essentially just an ec2 instance that is launched from an ECS optimized ami when you utilize a nice",
    "start": "513339",
    "end": "523149"
  },
  {
    "text": "VCS optimized ami it comes with a nice es agent the ECS agent essentially is",
    "start": "523149",
    "end": "528880"
  },
  {
    "text": "what we'll talk to the state management system and registers your instance into an EC s",
    "start": "528880",
    "end": "534480"
  },
  {
    "text": "cluster re C s agent is actually open source so it is available on our github",
    "start": "534480",
    "end": "540120"
  },
  {
    "text": "repo so you can actually download it and install it on another instance type if you don't want to use the e CS optimized",
    "start": "540120",
    "end": "546899"
  },
  {
    "text": "ami and your ez s cluster can actually contain ec2 instances of varying types",
    "start": "546899",
    "end": "552389"
  },
  {
    "text": "it does not have to be the same ec2 instance type so just a few recommended",
    "start": "552389",
    "end": "559829"
  },
  {
    "text": "design patterns things that you want to consider when you're running your batch workload on EC s so the first thing is",
    "start": "559829",
    "end": "565920"
  },
  {
    "start": "565000",
    "end": "565000"
  },
  {
    "text": "being able to trigger your batch processes with lambda so what this provides you is the ability to use s3 as",
    "start": "565920",
    "end": "574079"
  },
  {
    "text": "your definitive source of data input and data output s3 is a supported event",
    "start": "574079",
    "end": "579690"
  },
  {
    "text": "source by lambda so whenever data or a batch job gets inputted in your s3 bucket it will trigger a lambda function",
    "start": "579690",
    "end": "585860"
  },
  {
    "text": "that can immediately start running a task on your ECS cluster with the data",
    "start": "585860",
    "end": "591690"
  },
  {
    "text": "input from s3 and recently lambda actually released environment variables so you can utilize those environment",
    "start": "591690",
    "end": "597720"
  },
  {
    "text": "variables to tell lambda that when this data gets inputted into s3 I want you to",
    "start": "597720",
    "end": "603329"
  },
  {
    "text": "take this data and run it on this particular ECS cluster with using this particular task definition the next",
    "start": "603329",
    "end": "613920"
  },
  {
    "start": "613000",
    "end": "613000"
  },
  {
    "text": "design pattern is creating a fleet of workers with ECS and SQS so in this case",
    "start": "613920",
    "end": "619110"
  },
  {
    "text": "the easiest service would your your task definition your container that's running in your task definition would call the",
    "start": "619110",
    "end": "625980"
  },
  {
    "text": "sq sq and receive the job and what this does is this this particular architecture pattern extends the",
    "start": "625980",
    "end": "632399"
  },
  {
    "text": "capabilities of ECS to support event-driven ECS tasks and also extends the capability of lambda to provide more",
    "start": "632399",
    "end": "640019"
  },
  {
    "text": "to provide the ability to run batch processes workloads or any type of workload that exceeds the lambda time",
    "start": "640019",
    "end": "647399"
  },
  {
    "text": "limit so in this case depending upon which event source that you want to use",
    "start": "647399",
    "end": "652740"
  },
  {
    "text": "whether it's a put to an s3 bucket or put to a DynamoDB table or a Kinesis stream you can trigger a lambda function",
    "start": "652740",
    "end": "658860"
  },
  {
    "text": "that will take that data input that data into an SQS q and automatically also start running a",
    "start": "658860",
    "end": "664859"
  },
  {
    "text": "task that will go pull the data from pull the batch job details from your sq sq and start running it on your cluster",
    "start": "664859",
    "end": "673428"
  },
  {
    "start": "675000",
    "end": "675000"
  },
  {
    "text": "one of the last patterns I wanted to talk about was long-running batch jobs so when you I mentioned previously that",
    "start": "675679",
    "end": "684089"
  },
  {
    "text": "Amazon provides two types of built-in scheduler and one of the schedulers and one of that schedule one of those schedulers is for running long-running",
    "start": "684089",
    "end": "690660"
  },
  {
    "text": "processes so ECS allows you to run and maintain a specified number of instances",
    "start": "690660",
    "end": "696209"
  },
  {
    "text": "of a task definition and you when you do that when you specify that you're",
    "start": "696209",
    "end": "701249"
  },
  {
    "text": "essentially creating something known as an ECS service so if any of those tasks should actually fail or stop the service",
    "start": "701249",
    "end": "708059"
  },
  {
    "text": "scheduler will automatically know that I need to maintain this many number of this of this task and in this task",
    "start": "708059",
    "end": "714209"
  },
  {
    "text": "definition and it will automatically start one more task to make sure that it",
    "start": "714209",
    "end": "719220"
  },
  {
    "text": "is keeping the number the number of desired tasks running at all times and in this case you want to be able to",
    "start": "719220",
    "end": "725519"
  },
  {
    "text": "utilize spot instances since you're dealing with long-running processes if",
    "start": "725519",
    "end": "731069"
  },
  {
    "text": "it's if you know that you know there's there's not a set time restriction you can utilize spot instances or spot fleet",
    "start": "731069",
    "end": "738149"
  },
  {
    "text": "to make sure that you can keep your cost now a spot block also is useful for it",
    "start": "738149",
    "end": "743459"
  },
  {
    "text": "if you know the defined duration of what your workload is spot block provides a way for you to reserve spot instances",
    "start": "743459",
    "end": "750149"
  },
  {
    "text": "for a certain period of time in order for monitoring a cluster in ECS cluster",
    "start": "750149",
    "end": "755459"
  },
  {
    "text": "and the easiest tasks running on that cluster for long-running processes EC has recently released something known as",
    "start": "755459",
    "end": "761429"
  },
  {
    "text": "ECS event stream for cloud watch events and this will send you near real-time notifications of of the current state of",
    "start": "761429",
    "end": "768989"
  },
  {
    "text": "your ECS cluster as well as the current state of all the tasks running on your cluster so just a few best best",
    "start": "768989",
    "end": "778439"
  },
  {
    "start": "777000",
    "end": "777000"
  },
  {
    "text": "practices to keep in mind store any type of persistent data and state you know in",
    "start": "778439",
    "end": "783899"
  },
  {
    "text": "s3 or some other persisted storage try to minimize dependencies between tasks",
    "start": "783899",
    "end": "789509"
  },
  {
    "text": "definitions try to keep as many dependencies as possible within the same task definition so you're linking all of",
    "start": "789509",
    "end": "795089"
  },
  {
    "text": "that together you spot instances and spot fleets to optimize cost and then continuously",
    "start": "795089",
    "end": "801600"
  },
  {
    "text": "monitor the state of your cluster using ECS api since you have access to that",
    "start": "801600",
    "end": "806660"
  },
  {
    "text": "utilize a shared pool of resources there's there's a lot of debate around you know how many clusters should I run",
    "start": "806660",
    "end": "812430"
  },
  {
    "text": "you know should I run one cluster per app that's that that it again it's it's more or less a design decision that you",
    "start": "812430",
    "end": "818850"
  },
  {
    "text": "make but the more you're able to utilize you know your infrastructure as much as possible by sharing pools of resources",
    "start": "818850",
    "end": "824910"
  },
  {
    "text": "the better utilization and cost profile you're you will be able to realize and of course take advantage of all of the",
    "start": "824910",
    "end": "830970"
  },
  {
    "text": "services that ECS integrates with auto-scaling you can create an auto scaling ECS cluster so that it will",
    "start": "830970",
    "end": "836610"
  },
  {
    "text": "scale automatically based on cloud watch metrics launch your ECS cluster inside of a vp c control access to your cluster",
    "start": "836610",
    "end": "843870"
  },
  {
    "text": "utilizing iam and then utilize scheduled reserved instances if you know that you",
    "start": "843870",
    "end": "849030"
  },
  {
    "text": "need this much you know the capacity of what your workload requires so I want to",
    "start": "849030",
    "end": "856110"
  },
  {
    "text": "introduce will white who's the engineering lead from map box and he's going to talk to you a little bit about how map box runs batch on ECS thank you",
    "start": "856110",
    "end": "865339"
  },
  {
    "text": "thanks hey everyone thank you yeah so",
    "start": "866840",
    "end": "871890"
  },
  {
    "text": "I'm will white I'm on the platform team at matte box and if you were in the previous keynote this might be a little",
    "start": "871890",
    "end": "878940"
  },
  {
    "text": "bit of a review about what matte box is or you you might have seen our CEO Eric on stage during during the keynote with",
    "start": "878940",
    "end": "885330"
  },
  {
    "text": "Verner this morning matte box is about adding location to to any application we",
    "start": "885330",
    "end": "892800"
  },
  {
    "text": "have customizable location services like like maps that help you see the world in",
    "start": "892800",
    "end": "897840"
  },
  {
    "text": "stunning detail geocoding which is our our search that helps you find locations",
    "start": "897840",
    "end": "903300"
  },
  {
    "text": "and addresses and directions which which helps people get from point A to point B",
    "start": "903300",
    "end": "908340"
  },
  {
    "text": "on time we work with a lot of customers that are able to take our our SDKs and",
    "start": "908340",
    "end": "915270"
  },
  {
    "text": "drop them into their app and together all of our tools sort of come together and the goal is to help change the way",
    "start": "915270",
    "end": "921600"
  },
  {
    "text": "people move around the world The Weather Channel is using us in their iOS and",
    "start": "921600",
    "end": "926850"
  },
  {
    "text": "Android app to render and radar and satellite maps and they're",
    "start": "926850",
    "end": "932089"
  },
  {
    "text": "also using us our search to help people find the weather for specific locations really quickly Airbnb is using us on the",
    "start": "932089",
    "end": "939589"
  },
  {
    "text": "web our JavaScript SDK and they have a custom marker that shows the price for properties that are available to rent",
    "start": "939589",
    "end": "946509"
  },
  {
    "text": "and then someone like CNN they're using us to help people understand where news",
    "start": "946509",
    "end": "951529"
  },
  {
    "text": "is happening they have a custom satellite base map and a custom street map and then national geographic they",
    "start": "951529",
    "end": "960139"
  },
  {
    "text": "have an amazing city guides app that uses map box to help guide users on on",
    "start": "960139",
    "end": "968089"
  },
  {
    "text": "amazing walking tours of the world's most iconic cities map box is powering",
    "start": "968089",
    "end": "973160"
  },
  {
    "text": "over 55,000 apps and we reach our API reaches over a quarter billion users",
    "start": "973160",
    "end": "978920"
  },
  {
    "text": "every month unique users and that number is growing so in order to provide maps",
    "start": "978920",
    "end": "987079"
  },
  {
    "text": "for all of these customers we we need to process a lot of data so batch processing is is a pretty critical",
    "start": "987079",
    "end": "993529"
  },
  {
    "text": "element at map box we've really split our services into two groups we have a batch processing group we have our API",
    "start": "993529",
    "end": "999230"
  },
  {
    "text": "group we're using ACS for both but of course today we're gonna focus on the batch processing we want to walk through",
    "start": "999230",
    "end": "1005800"
  },
  {
    "text": "two use cases this is an image that comes from the modis satellite we get",
    "start": "1005800",
    "end": "1011529"
  },
  {
    "text": "one of these every day and the the",
    "start": "1011529",
    "end": "1016899"
  },
  {
    "text": "biggest problem that you can see with it with an image like this is the cloud cover it's an incredible resource but and the",
    "start": "1016899",
    "end": "1026589"
  },
  {
    "text": "fact that it comes every day means that we have a lot of data but we really want to find a way to get rid of those those",
    "start": "1026589",
    "end": "1031750"
  },
  {
    "text": "clouds so the way we do this is basically doing a lot of pixel pushing so we organize the various images that",
    "start": "1031750",
    "end": "1040630"
  },
  {
    "text": "we get over the course of maybe several months - up to a year and we sort them",
    "start": "1040630",
    "end": "1045880"
  },
  {
    "text": "by brightness so what this gives us is is the images the darkest images are the",
    "start": "1045880",
    "end": "1053289"
  },
  {
    "text": "most likely to not be covered by clouds so so we've really pushed all the cloud cover images to the bottom of the stack",
    "start": "1053289",
    "end": "1059500"
  },
  {
    "text": "then what we do is we take the top of the stack maybe the first 20% and we average those",
    "start": "1059500",
    "end": "1065499"
  },
  {
    "text": "pixels together and if you do the math out on this we're talking about",
    "start": "1065499",
    "end": "1070749"
  },
  {
    "text": "trillions of pixels across that cover the world and over to petabytes of data we have to process this way the",
    "start": "1070749",
    "end": "1077679"
  },
  {
    "text": "satellite imagery that's because we have the entire world covered and we have the entire world covered for every day of",
    "start": "1077679",
    "end": "1084070"
  },
  {
    "text": "the year the output is a gorgeous",
    "start": "1084070",
    "end": "1090460"
  },
  {
    "text": "cloudless totally artificial map of the world that you know you've never seen a",
    "start": "1090460",
    "end": "1096039"
  },
  {
    "text": "cloudless day like this on in the in the UK but we're able to use this technique",
    "start": "1096039",
    "end": "1101409"
  },
  {
    "text": "to make a very very crisp picture of the world and it's really really great for",
    "start": "1101409",
    "end": "1106899"
  },
  {
    "text": "data visualization another use case that we use ECS for batch processing is",
    "start": "1106899",
    "end": "1113049"
  },
  {
    "text": "building our traffic map a lot of a lot of you've probably seen a traffic map like this I don't know if you've ever",
    "start": "1113049",
    "end": "1122019"
  },
  {
    "text": "wondered how it works well the way it works at met box is we collect billions of individual points",
    "start": "1122019",
    "end": "1127990"
  },
  {
    "text": "from our users of our sdk and we anonymize those aggregate them clean",
    "start": "1127990",
    "end": "1134529"
  },
  {
    "text": "them up and snap them to the road network so it starts to look like this so instead of those individual points we",
    "start": "1134529",
    "end": "1140499"
  },
  {
    "text": "now have through a lot of processing we'd be able to been able to snap them to the to the road network there's",
    "start": "1140499",
    "end": "1147820"
  },
  {
    "text": "another example this data is covering entire cities here's here's where I'm",
    "start": "1147820",
    "end": "1153519"
  },
  {
    "text": "based Washington DC we we cover many cities and entire continents with this",
    "start": "1153519",
    "end": "1159789"
  },
  {
    "text": "data so it's a huge amount of data in fact it's it's 3 billion points every day and that that equates to about a",
    "start": "1159789",
    "end": "1166629"
  },
  {
    "text": "hundred million miles of worth of coverage that we're getting every day and processing into into things like our",
    "start": "1166629",
    "end": "1173710"
  },
  {
    "text": "traffic map we also have other use cases for like detecting one-ways or turn restrictions discovering entirely new",
    "start": "1173710",
    "end": "1180369"
  },
  {
    "text": "parts of the road network when when things change or change in traffic patterns it's it's incredibly useful",
    "start": "1180369",
    "end": "1185950"
  },
  {
    "text": "data that helps me help to us make a better map for our customers and really improves the quality of",
    "start": "1185950",
    "end": "1193230"
  },
  {
    "text": "transportation helps people get around so in both of these use cases we we",
    "start": "1193230",
    "end": "1199510"
  },
  {
    "start": "1197000",
    "end": "1197000"
  },
  {
    "text": "noticed that when as we went to build them we noticed that we were seeing similar aspects of the patterns that we",
    "start": "1199510",
    "end": "1205750"
  },
  {
    "text": "were falling to execute and you know obviously you're gonna have you see two instances you're gonna want to be able",
    "start": "1205750",
    "end": "1212590"
  },
  {
    "text": "to scale that up scale that down very quickly we we're always using an SQL cue",
    "start": "1212590",
    "end": "1219720"
  },
  {
    "text": "so to cue up our work because we have data coming in we want to create sqs messages for that and then execute",
    "start": "1219720",
    "end": "1226800"
  },
  {
    "text": "execute on those messages and one of the biggest things that that I think we overlooked at first and and I encourage",
    "start": "1226800",
    "end": "1233080"
  },
  {
    "text": "you to pay close attention to is error handling and reporting basically what are your failure States and how do you",
    "start": "1233080",
    "end": "1239350"
  },
  {
    "text": "want to handle them so so that was one of the most important things for us to",
    "start": "1239350",
    "end": "1244540"
  },
  {
    "text": "figure out and those three points really encouraged us to to build a sort of",
    "start": "1244540",
    "end": "1249700"
  },
  {
    "text": "abstract some of the complexities around this and build a tool that we call watch BOTS so today I want to introduce watch",
    "start": "1249700",
    "end": "1256660"
  },
  {
    "text": "bot this is an open-source tool that we're releasing to everybody it's at",
    "start": "1256660",
    "end": "1262770"
  },
  {
    "text": "github.com slash matte box / ECS watch -",
    "start": "1262770",
    "end": "1268390"
  },
  {
    "text": "watch pot watch pot is a library to help you run highly scalable AWS services",
    "start": "1268390",
    "end": "1275490"
  },
  {
    "start": "1270000",
    "end": "1270000"
  },
  {
    "text": "that perform data processing and here it says in response to external events what",
    "start": "1275490",
    "end": "1282070"
  },
  {
    "text": "that means is any message that you can put into an sqs queue you can run watch",
    "start": "1282070",
    "end": "1287800"
  },
  {
    "text": "bot on so the way this works is you basically provide a container you provide it provides an sqs q you provide",
    "start": "1287800",
    "end": "1295630"
  },
  {
    "text": "a container a cluster and that container contains it describes what work you",
    "start": "1295630",
    "end": "1300670"
  },
  {
    "text": "actually want to execute and it will take care of the rest so yeah again open source I highly",
    "start": "1300670",
    "end": "1308050"
  },
  {
    "text": "encourage everyone to check it out github.com slash mapbox slash dcs -",
    "start": "1308050",
    "end": "1313120"
  },
  {
    "text": "watch bot here's the basic architecture again you know you have your SQ SQ",
    "start": "1313120",
    "end": "1319180"
  },
  {
    "text": "that's provided by watch bot you have a nice es cluster that you also provide",
    "start": "1319180",
    "end": "1325180"
  },
  {
    "text": "and I can show an example of how to provide that in a second and then ECS provides a",
    "start": "1325180",
    "end": "1330700"
  },
  {
    "text": "sorry watch bot provides a watch bot container a watcher container that that",
    "start": "1330700",
    "end": "1336080"
  },
  {
    "text": "pulls the sq sq and then runs individual tasks for you for each message that it",
    "start": "1336080",
    "end": "1341180"
  },
  {
    "text": "gets one thing that we're doing is is a very often our ECS cluster is it is a",
    "start": "1341180",
    "end": "1348380"
  },
  {
    "text": "spot fleet and it's a spot fleet of diversified instance types and that",
    "start": "1348380",
    "end": "1353750"
  },
  {
    "text": "diversification helps us avoid interruptions in the spot spot markets a spot you could bid on unused capacity in",
    "start": "1353750",
    "end": "1360470"
  },
  {
    "text": "the ICI tube market and get ec2 s at a fraction of the normal price but in order to use it at scale you",
    "start": "1360470",
    "end": "1366650"
  },
  {
    "text": "really need to diversify because if the if the spot market demand goes way up on a particular instance type you want to",
    "start": "1366650",
    "end": "1373310"
  },
  {
    "text": "be able to move your application distribute your application across the remaining available in the remaining",
    "start": "1373310",
    "end": "1380630"
  },
  {
    "text": "available instance types that's really important so the combination of spot fleet and ECS is is is kind of",
    "start": "1380630",
    "end": "1387710"
  },
  {
    "text": "magnificent so the cool thing about a watch bot task is you can do anything",
    "start": "1387710",
    "end": "1394910"
  },
  {
    "start": "1389000",
    "end": "1389000"
  },
  {
    "text": "you want anything that runs in docker anything that runs inside a container you can run in and watch bot you can use",
    "start": "1394910",
    "end": "1402020"
  },
  {
    "text": "any language uses environment variables as its input I'll go into exactly which",
    "start": "1402020",
    "end": "1408290"
  },
  {
    "text": "ones are important in a second and it uses standard bash exit codes as as a",
    "start": "1408290",
    "end": "1414280"
  },
  {
    "text": "success or failure indicator you can control basically the the retry pattern",
    "start": "1414280",
    "end": "1419840"
  },
  {
    "text": "success or failure using exit codes very intuitive and it makes it very easy very",
    "start": "1419840",
    "end": "1425180"
  },
  {
    "text": "easy interface you could do any i/o you want including using s3 that's that's",
    "start": "1425180",
    "end": "1432230"
  },
  {
    "text": "the number one thing that we use source data on s3 pull it down on s3 do some",
    "start": "1432230",
    "end": "1437480"
  },
  {
    "text": "processing and then put the outputs back on s3 or in some cases dynamodb as well",
    "start": "1437480",
    "end": "1443500"
  },
  {
    "start": "1444000",
    "end": "1444000"
  },
  {
    "text": "so looking at the environment variables there's a subject which is the subject",
    "start": "1444280",
    "end": "1449450"
  },
  {
    "text": "of the sqs message and then the message itself and that's that's probably the",
    "start": "1449450",
    "end": "1455179"
  },
  {
    "text": "most important thing to be aware of is the message there are a few other things here that are very useful sent timestamp so you can react you can",
    "start": "1455179",
    "end": "1462100"
  },
  {
    "text": "say oh this message was created you know 12 days ago you can take some sort of action based on how old the original",
    "start": "1462100",
    "end": "1469480"
  },
  {
    "text": "timestamp is approximate receive count is another another really useful one for",
    "start": "1469480",
    "end": "1474880"
  },
  {
    "text": "some more advanced control on how jobs are processed but the most important one",
    "start": "1474880",
    "end": "1481420"
  },
  {
    "text": "is a message the message can be any format you want and as long as your task",
    "start": "1481420",
    "end": "1486760"
  },
  {
    "text": "is ready to parse it and JSON is for us JSON is the most popular one and the",
    "start": "1486760",
    "end": "1492730"
  },
  {
    "text": "demo I'm going to give later we just use the standard text just straight straight up text but JSON is a really nice way",
    "start": "1492730",
    "end": "1500080"
  },
  {
    "text": "you can sort of make a structured document you can have properties that refer to files on s3 or documents and",
    "start": "1500080",
    "end": "1505929"
  },
  {
    "text": "DynamoDB inputs and outputs so JSON as long as your task is ready to do a part",
    "start": "1505929",
    "end": "1511570"
  },
  {
    "text": "of json.parse then JSON is a really good choice for a message format exit codes",
    "start": "1511570",
    "end": "1518620"
  },
  {
    "start": "1517000",
    "end": "1517000"
  },
  {
    "text": "pretty straightforward again zero the standard bash exit code means success",
    "start": "1518620",
    "end": "1524820"
  },
  {
    "text": "there are a few other exit codes that are sort of reserved for for watch bot watch bot treats exit code 3 as a reject",
    "start": "1524820",
    "end": "1533140"
  },
  {
    "text": "and it will remove it from the queue and send a notification to an SNS topic so you can hook that SNS topic up to pager",
    "start": "1533140",
    "end": "1540070"
  },
  {
    "text": "duty or just have it email you directly if you don't want to share that that",
    "start": "1540070",
    "end": "1545290"
  },
  {
    "text": "burden but this is a really good way to know when things are going wrong on your",
    "start": "1545290",
    "end": "1550929"
  },
  {
    "text": "data processing which is incredibly important again monitoring is very important when you're when you're doing",
    "start": "1550929",
    "end": "1556179"
  },
  {
    "text": "massive amount of data processing the worst is when you wake up in the morning and you learn that you spent you know",
    "start": "1556179",
    "end": "1561880"
  },
  {
    "text": "too much money doing data processing on something that has been failing all night so monitoring for sure exit code",
    "start": "1561880",
    "end": "1568870"
  },
  {
    "text": "for is a no op which means the the message is going to be returned to the queue and it's silent and then any other",
    "start": "1568870",
    "end": "1575260"
  },
  {
    "text": "exit code at all is an error so if you want to use any other bash program",
    "start": "1575260",
    "end": "1581320"
  },
  {
    "text": "inside that returns a another exit code it's going to be treated as an error there's even more features and they're",
    "start": "1581320",
    "end": "1588730"
  },
  {
    "start": "1585000",
    "end": "1585000"
  },
  {
    "text": "all listed in the readme the documentation is incredible the has features like log so it will automatically log write its",
    "start": "1588730",
    "end": "1596350"
  },
  {
    "text": "application logs to Cod watch to a cloud watch log group and those can be forwarded from the log group to other",
    "start": "1596350",
    "end": "1602409"
  },
  {
    "text": "services like Splunk or similar logic or any any log aggregation service that you",
    "start": "1602409",
    "end": "1607659"
  },
  {
    "text": "want for further analysis you can send alarm status and s as I mentioned this is really powerful and it",
    "start": "1607659",
    "end": "1615039"
  },
  {
    "text": "also has reduced mode which is sort of a newer feature so you can pratt process a",
    "start": "1615039",
    "end": "1620289"
  },
  {
    "text": "couple thousand messages and then you can give it a job it will split that up into a couple thousand messages",
    "start": "1620289",
    "end": "1626169"
  },
  {
    "text": "distributed horizontally across a fleet of ec2 s and then when all those that",
    "start": "1626169",
    "end": "1631360"
  },
  {
    "text": "that's the map part and when the when the those jobs are done it can run a reduced step which will maybe combine",
    "start": "1631360",
    "end": "1638470"
  },
  {
    "text": "all the output files into one or maybe count up a results of the output or summarize it in some way so reduced mode",
    "start": "1638470",
    "end": "1645070"
  },
  {
    "text": "is a really really cool feature along with the reduced mode it also is giving you progress tracking so you can see you",
    "start": "1645070",
    "end": "1652419"
  },
  {
    "text": "know 50 percent done 60 percent done all the way up to a hundred percent done so you can sort of see where you are in the",
    "start": "1652419",
    "end": "1658600"
  },
  {
    "text": "task management so that's a new feature a lot a big question I get a lot of",
    "start": "1658600",
    "end": "1664690"
  },
  {
    "start": "1662000",
    "end": "1662000"
  },
  {
    "text": "times is you know how do you decide you know why aren't using lambda for these kinds of things in fact we've been",
    "start": "1664690",
    "end": "1670179"
  },
  {
    "text": "working on wachbach for a long time and when lambda first came out we really were excited and because we thought we",
    "start": "1670179",
    "end": "1676120"
  },
  {
    "text": "could replace lambda with a lot of things but lambda we do use make heavy use of lambda we use it in for many many",
    "start": "1676120",
    "end": "1683649"
  },
  {
    "text": "many use cases we have hundreds maybe even over a thousand functions in our account so we definitely use it wherever",
    "start": "1683649",
    "end": "1689020"
  },
  {
    "text": "possible but it does have some limitations that that we that make it tough to use in every situation lambda",
    "start": "1689020",
    "end": "1695649"
  },
  {
    "text": "so watch bot gives us full control over the execution environment so if you need",
    "start": "1695649",
    "end": "1700990"
  },
  {
    "text": "to do something weird like change something at the OS level override the C standard library we do this and you can",
    "start": "1700990",
    "end": "1708789"
  },
  {
    "text": "do this one in watch bot you cannot do this in lambda because you're sort of focused on on a specific language that",
    "start": "1708789",
    "end": "1716200"
  },
  {
    "text": "you pick when you configure your function there's no the biggest one I think is there's no limit on execution time you can have your your ECS job run",
    "start": "1716200",
    "end": "1723280"
  },
  {
    "text": "as long as you want we have jobs that well I don't encourage it they can run or hours or even days in general you",
    "start": "1723280",
    "end": "1729840"
  },
  {
    "text": "best practices to keep your jobs small and short because that means you can horizontally scale them easier but",
    "start": "1729840",
    "end": "1738440"
  },
  {
    "text": "that's not always possible so watch pod gives you no limit on execution time there's no memory limits",
    "start": "1738440",
    "end": "1745290"
  },
  {
    "text": "which is pretty amazing so as long as you're fitting within the memory limit of the ec2 that's in the fleet that",
    "start": "1745290",
    "end": "1751260"
  },
  {
    "text": "you're running or the cluster you're running then you'll be okay on memory limits and you know with something like",
    "start": "1751260",
    "end": "1757740"
  },
  {
    "text": "the x1 I don't think you you'll be able to run out of memory too quickly no concurrency limits so lambda one of",
    "start": "1757740",
    "end": "1765270"
  },
  {
    "text": "the biggest things is is you might run into a concurrency limit or account wide throttling on your account so you have",
    "start": "1765270",
    "end": "1772260"
  },
  {
    "text": "one bad one lambda function that's on bad behavior it's using a lot of function calls and that can actually",
    "start": "1772260",
    "end": "1779040"
  },
  {
    "text": "disrupt other calls prevent other calls from being made because there's an account wide throttling account-wide",
    "start": "1779040",
    "end": "1786360"
  },
  {
    "text": "invocation limit that can cause throttling we've run into that a few times and that's just not an issue with",
    "start": "1786360",
    "end": "1791490"
  },
  {
    "text": "with ECS the one thing that I will flag",
    "start": "1791490",
    "end": "1798390"
  },
  {
    "text": "and this is a little confusing on the slide I'm realizing is that a watch bot",
    "start": "1798390",
    "end": "1803430"
  },
  {
    "text": "doesn't support DynamoDB streams or Kinesis yet that's coming soon but lambda is actually pretty good for this",
    "start": "1803430",
    "end": "1809670"
  },
  {
    "text": "so we do use lambda what we typically do will will have hook up a lambda function to a dynamodb stream or Kinesis stream",
    "start": "1809670",
    "end": "1817320"
  },
  {
    "text": "and then then fire watch bot job into the queue so one gotcha I want to flag",
    "start": "1817320",
    "end": "1824940"
  },
  {
    "start": "1823000",
    "end": "1823000"
  },
  {
    "text": "real quick is that the ECS optimized [Music] ami is EVS boot and one of the things",
    "start": "1824940",
    "end": "1833520"
  },
  {
    "text": "we've run into is there two things with the EBS reasons we don't actually use it one is performance and the other one is",
    "start": "1833520",
    "end": "1841700"
  },
  {
    "text": "cost so I'll start with the cost when",
    "start": "1841700",
    "end": "1847830"
  },
  {
    "text": "you when you get to running on the spot market and you're running ec2 is at 90%",
    "start": "1847830",
    "end": "1853350"
  },
  {
    "text": "what the normal price is keep in mind that EBS volumes that come with the EBS",
    "start": "1853350",
    "end": "1859170"
  },
  {
    "text": "boot instance are charged at full price there's no discount to to an EBS boot volume so you might be saying",
    "start": "1859170",
    "end": "1867030"
  },
  {
    "text": "well instead of 40 cents an hour for this instance I'm actually paying 8 cents an hour that's a really good deal",
    "start": "1867030",
    "end": "1872520"
  },
  {
    "text": "let me let me spin up a thousand of them and and this is what we've done but then later only to realize that our our EBS",
    "start": "1872520",
    "end": "1879180"
  },
  {
    "text": "bill is very high because we're just not used to running that many instances so spot unlocks the ability for you to pay",
    "start": "1879180",
    "end": "1887580"
  },
  {
    "text": "afford to run thousands of instances so just watch out for the EBS problem where",
    "start": "1887580",
    "end": "1892920"
  },
  {
    "text": "you still charge you still pay full price for EBS and then the other thing we found is that it's it's just for the",
    "start": "1892920",
    "end": "1898830"
  },
  {
    "text": "kind of data processing that we do even with a lot of the amazing performance improvements that have been made over",
    "start": "1898830",
    "end": "1904230"
  },
  {
    "text": "the last few years with EBS we just can't get it to the performance to get",
    "start": "1904230",
    "end": "1910530"
  },
  {
    "text": "to the performance that we want versus instance store which is just there it's just available it comes with the",
    "start": "1910530",
    "end": "1916020"
  },
  {
    "text": "instance for free it it's you get it with the price you pay on the spot market and the results are pretty pretty",
    "start": "1916020",
    "end": "1922770"
  },
  {
    "text": "astonishing so what we've done it just a heads up that the EBS the ECS optimized",
    "start": "1922770",
    "end": "1928200"
  },
  {
    "text": "a.m. eyes our EBS boot only and we've rolled our own am i that is instant",
    "start": "1928200",
    "end": "1934350"
  },
  {
    "text": "store so I want to do a quick demo this",
    "start": "1934350",
    "end": "1940530"
  },
  {
    "text": "is another open source tool well it's our sort of our open source implementation it's called ECS telephone",
    "start": "1940530",
    "end": "1947990"
  },
  {
    "text": "which is sort of a little bit of a toy implementation for using acs also also a",
    "start": "1947990",
    "end": "1956550"
  },
  {
    "text": "public repo in the process here you're going to get to see a little bit about how some of the tooling that we've built",
    "start": "1956550",
    "end": "1961620"
  },
  {
    "text": "to at in that box around using ets and also just using AWS mere make this",
    "start": "1961620",
    "end": "1966960"
  },
  {
    "text": "bigger okay",
    "start": "1966960",
    "end": "1973880"
  },
  {
    "text": "so the first thing I'm going to do is log into my AWS account so we do",
    "start": "1974190",
    "end": "1981040"
  },
  {
    "text": "everything through tool called mbx format box it's our matte box CLI so all",
    "start": "1981040",
    "end": "1987490"
  },
  {
    "text": "the engineers at matte box generally set up on this in the first couple days they work in matte box and the way I log in",
    "start": "1987490",
    "end": "1995140"
  },
  {
    "text": "is I have Authenticator on my phone so I'm using two-factor authentication to",
    "start": "1995140",
    "end": "2000420"
  },
  {
    "text": "log into my account this is everybody does two-factor authentication to get credentials so this code for the next 60",
    "start": "2000420",
    "end": "2008340"
  },
  {
    "text": "seconds it's gonna work then to log into",
    "start": "2008340",
    "end": "2013560"
  },
  {
    "text": "the console I just run mbx login it's gonna spit out a a URL I can click on",
    "start": "2013560",
    "end": "2020180"
  },
  {
    "text": "and now I'm in I mean I'm in my console",
    "start": "2020180",
    "end": "2025340"
  },
  {
    "text": "so I'm in a git repo here this is the e CS telephone repo and I can see what",
    "start": "2025340",
    "end": "2032580"
  },
  {
    "text": "files are in here there's a docker file there's an index J s there's a",
    "start": "2032580",
    "end": "2039180"
  },
  {
    "text": "package.json because this is a node.js project project we can look at the code really quick so this is a very very",
    "start": "2039180",
    "end": "2046920"
  },
  {
    "text": "simple example a very simple script that basically takes the message you can see",
    "start": "2046920",
    "end": "2051980"
  },
  {
    "text": "the message is coming in here on this line through process M so it's an",
    "start": "2051980",
    "end": "2058020"
  },
  {
    "text": "environment variable and then that message is we're picking a random word",
    "start": "2058020",
    "end": "2063600"
  },
  {
    "text": "from the message so I'm gonna send a sentence to this to this task and it's",
    "start": "2063600",
    "end": "2070230"
  },
  {
    "text": "gonna pick a random word from that sentence and replace it with another random word sort of a silly project but",
    "start": "2070230",
    "end": "2075570"
  },
  {
    "text": "it's a good demo so we're using the random words module from NPM to",
    "start": "2075570",
    "end": "2080850"
  },
  {
    "text": "accomplish that then what we do with the sentence is we just feed it back into itself so it's that's why it's called",
    "start": "2080850",
    "end": "2086700"
  },
  {
    "text": "telephone it's like playing a game of telephone with itself so just gonna perpetually feed more messages into",
    "start": "2086700",
    "end": "2094919"
  },
  {
    "text": "itself so in order to see what I'm gonna create a new stack we create all stacks",
    "start": "2094919",
    "end": "2099980"
  },
  {
    "text": "all of our resources at Matt box we create with cloud formation and we have a tool",
    "start": "2099980",
    "end": "2106050"
  },
  {
    "text": "that we wrote to make this a little easier I'm going to create a new one called reinvents so we sort of actually",
    "start": "2106050",
    "end": "2113790"
  },
  {
    "text": "I'm going to list the ones we have now",
    "start": "2113790",
    "end": "2116780"
  },
  {
    "text": "so I have one stack running called ECS telephones staging I'm gonna create a new one called R and n so again this is",
    "start": "2123090",
    "end": "2137400"
  },
  {
    "text": "going to be using confirmation to do all the setup and it's a it's a really good way to keep track of your your",
    "start": "2137400",
    "end": "2143460"
  },
  {
    "text": "infrastructure infrastructure as code is is you know being able to commit infrastructure changes to to get is",
    "start": "2143460",
    "end": "2150600"
  },
  {
    "text": "incredible so it's gonna prompt me for the cluster ID and a lot of people ask",
    "start": "2150600",
    "end": "2156780"
  },
  {
    "text": "you know how many clusters do you run at map box and the answer is we run four",
    "start": "2156780",
    "end": "2163410"
  },
  {
    "text": "per region we have dedicated cluster for data processing we have a staging and a",
    "start": "2163410",
    "end": "2170010"
  },
  {
    "text": "dev version of that and then we have a dedicated cluster for API services and we have staging and dead for that so we",
    "start": "2170010",
    "end": "2175470"
  },
  {
    "text": "have four clusters and then we have four clusters in every AWS region so I know",
    "start": "2175470",
    "end": "2181200"
  },
  {
    "text": "some people are setting up in UCS cluster one per app or or something like that but as Asha mentioned your you",
    "start": "2181200",
    "end": "2189510"
  },
  {
    "text": "might not be getting the most out of sharing resources if you if you do",
    "start": "2189510",
    "end": "2195330"
  },
  {
    "text": "something like that so check out check out try it try",
    "start": "2195330",
    "end": "2200570"
  },
  {
    "text": "minimizing the number of clusters you're running so I'm gonna search for the UCS cluster that I want to deploy this to",
    "start": "2200570",
    "end": "2209119"
  },
  {
    "text": "Easi s cluster or processing staging and I'm gonna get the cluster ID",
    "start": "2210320",
    "end": "2217910"
  },
  {
    "text": "so just copy this as from the output of the cloud formation stack and paste it in here I'm ready to create the stack",
    "start": "2223970",
    "end": "2229910"
  },
  {
    "text": "I'm going to create the stack so now going back to the console make this bigger",
    "start": "2229910",
    "end": "2236859"
  },
  {
    "text": "so now we can see the the craters in process also got some nice output on the from from Matt boxy Li so map up CLI",
    "start": "2240830",
    "end": "2248840"
  },
  {
    "text": "just a quick note is wrapping a tool that we've open-sourced as well called CFM config github comm slash matte box",
    "start": "2248840",
    "end": "2255140"
  },
  {
    "text": "/c FN - config that's what's generating the output there it's mbx is just",
    "start": "2255140",
    "end": "2260840"
  },
  {
    "text": "wrapping around that so if you're looking for our way to a nice way",
    "start": "2260840",
    "end": "2266330"
  },
  {
    "text": "developer friendly way to use cloud formation from the CLI check that out",
    "start": "2266330",
    "end": "2272660"
  },
  {
    "text": "it's a really good grid project",
    "start": "2272660",
    "end": "2276069"
  },
  {
    "text": "so we can see we're creating a topic this is an SNS topic creating a queue",
    "start": "2284690",
    "end": "2290539"
  },
  {
    "text": "we're creating I am role so that we are our stack has permission to access",
    "start": "2290539",
    "end": "2297020"
  },
  {
    "text": "certain resources it needs to access things like s3 if you want to give it",
    "start": "2297020",
    "end": "2303260"
  },
  {
    "text": "access to s3 or dynamo DB for for getting inputs or delivering outputs and",
    "start": "2303260",
    "end": "2310099"
  },
  {
    "text": "now we're creating the service",
    "start": "2310099",
    "end": "2313480"
  },
  {
    "text": "okay and this is taking a little long so I'm gonna use the staging stack as a as a demo now because this is taking a",
    "start": "2323180",
    "end": "2330200"
  },
  {
    "text": "little bit of time so the way you want",
    "start": "2330200",
    "end": "2335720"
  },
  {
    "text": "to get to CloudWatch logs so we're gonna see the logs so I'm going to SNS and the",
    "start": "2335720",
    "end": "2344860"
  },
  {
    "text": "the way you actually push a message into watch bots is through its SNS topic so",
    "start": "2344860",
    "end": "2351320"
  },
  {
    "text": "I'll search here for telephone I'm gonna use staging and here's the watch bots topic and then I'm going to go to cloud",
    "start": "2351320",
    "end": "2361250"
  },
  {
    "text": "watch logs and",
    "start": "2361250",
    "end": "2367510"
  },
  {
    "text": "ECS telephone staging here we go",
    "start": "2369750",
    "end": "2374150"
  },
  {
    "text": "oh it's complete",
    "start": "2376360",
    "end": "2380490"
  },
  {
    "text": "okay so I'm gonna publish a message the topic here's the log group for the stack that I just created there's nothing in",
    "start": "2394890",
    "end": "2400980"
  },
  {
    "text": "it watch bot is running so it's the only message that's there but otherwise it's it's ready to go it's ready to receive",
    "start": "2400980",
    "end": "2406710"
  },
  {
    "text": "work and I'll give this a nice subject I'll call it reinvents and then the",
    "start": "2406710",
    "end": "2412470"
  },
  {
    "text": "quick brown fox jobs so provide my",
    "start": "2412470",
    "end": "2422460"
  },
  {
    "text": "sentence and then I'm gonna publish this message so it's published and now what",
    "start": "2422460",
    "end": "2428640"
  },
  {
    "text": "we're gonna start to see is watch BOTS gonna again for every time we get that",
    "start": "2428640",
    "end": "2434130"
  },
  {
    "text": "that that message going to pick a random word replace that word with another",
    "start": "2434130",
    "end": "2440550"
  },
  {
    "text": "random word and then feed the message back into to watch pause so we got the message here the quick brown fox jumps",
    "start": "2440550",
    "end": "2447420"
  },
  {
    "text": "over the lazy dog that's the first time we've seen it I'm gonna refresh again",
    "start": "2447420",
    "end": "2451820"
  },
  {
    "text": "okay not getting other other messages",
    "start": "2462329",
    "end": "2466459"
  },
  {
    "text": "while we wait for that looking at the",
    "start": "2470850",
    "end": "2476070"
  },
  {
    "text": "code again if you look at the code here it's very easy to see how you can start to bring in other JavaScript libraries",
    "start": "2476070",
    "end": "2483660"
  },
  {
    "text": "you can start to make this a lot more sophisticated so this is a very simple simple demo but it it goes a long way",
    "start": "2483660",
    "end": "2491490"
  },
  {
    "text": "from here this is where you can start to add in and it doesn't have to be no js' either you can you can run on any language okay I was expecting a lot more",
    "start": "2491490",
    "end": "2501300"
  },
  {
    "text": "messages than this",
    "start": "2501300",
    "end": "2504170"
  },
  {
    "text": "let me check the other one",
    "start": "2507400",
    "end": "2510568"
  },
  {
    "text": "oops this one broke",
    "start": "2518900",
    "end": "2522819"
  },
  {
    "text": "well there's nothing like a live demo sorry everyone dead so that's that's all",
    "start": "2532730",
    "end": "2539210"
  },
  {
    "text": "I had could we go back to the slides Thanks",
    "start": "2539210",
    "end": "2546310"
  },
  {
    "text": "so yeah quick demo gives you a sense of of what you can do obviously it's a",
    "start": "2546310",
    "end": "2552020"
  },
  {
    "text": "little it's a little goofy but you can really extend that to get a lot of power",
    "start": "2552020",
    "end": "2558140"
  },
  {
    "text": "and your batch processing so just to summarize some of some metrics from our",
    "start": "2558140",
    "end": "2564800"
  },
  {
    "text": "deployment on on ECS we're running 14 data processing services in addition to our 21 api services so that's 14",
    "start": "2564800",
    "end": "2573859"
  },
  {
    "text": "services that are dedicated to just doing data processing and batch where",
    "start": "2573859",
    "end": "2578930"
  },
  {
    "text": "we've peaked at 3500 container instances running in in our cluster so it's a",
    "start": "2578930",
    "end": "2585619"
  },
  {
    "text": "pretty pretty massive amount of computing and that's distributed over a variety of different instance types and",
    "start": "2585619",
    "end": "2590680"
  },
  {
    "text": "we're on track this year to use over 500 million hours of compute which is a",
    "start": "2590680",
    "end": "2597349"
  },
  {
    "text": "pretty pretty massive scale that's all I had thanks please please encourage you",
    "start": "2597349",
    "end": "2604730"
  },
  {
    "text": "to fill out the evaluation for the for this session and we'll hang out up here to take any questions you have happy to",
    "start": "2604730",
    "end": "2610640"
  },
  {
    "text": "talk through ECS spots lead watch bots and again check out watch bots you see",
    "start": "2610640",
    "end": "2615859"
  },
  {
    "text": "us watch bots on github thank you [Applause]",
    "start": "2615859",
    "end": "2624900"
  }
]