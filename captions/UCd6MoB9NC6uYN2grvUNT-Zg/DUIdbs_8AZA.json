[
  {
    "text": "in this video you'll see how to validate",
    "start": "480",
    "end": "2320"
  },
  {
    "text": "or roll back your deployment with amazon",
    "start": "2320",
    "end": "4160"
  },
  {
    "text": "cloudwatch synthetics",
    "start": "4160",
    "end": "6240"
  },
  {
    "text": "with this feature you can use synthetic",
    "start": "6240",
    "end": "8160"
  },
  {
    "text": "traffic to validate a deployment through",
    "start": "8160",
    "end": "9760"
  },
  {
    "text": "a continuous integration and continuous",
    "start": "9760",
    "end": "11679"
  },
  {
    "text": "delivery or ci cd pipeline",
    "start": "11679",
    "end": "14240"
  },
  {
    "text": "safely deploy changes and trigger",
    "start": "14240",
    "end": "16000"
  },
  {
    "text": "automatic rollbacks with aws code deploy",
    "start": "16000",
    "end": "18480"
  },
  {
    "text": "if necessary",
    "start": "18480",
    "end": "20240"
  },
  {
    "text": "to get started let's navigate to code",
    "start": "20240",
    "end": "22160"
  },
  {
    "text": "pipeline where we already have a cicd",
    "start": "22160",
    "end": "24560"
  },
  {
    "text": "pipeline set up",
    "start": "24560",
    "end": "26560"
  },
  {
    "text": "using the aws cloud development kit or",
    "start": "26560",
    "end": "28880"
  },
  {
    "text": "cdk we",
    "start": "28880",
    "end": "30000"
  },
  {
    "text": "created a standard ci cd pipeline that",
    "start": "30000",
    "end": "32398"
  },
  {
    "text": "uses cloudwatch synthetics to monitor",
    "start": "32399",
    "end": "34320"
  },
  {
    "text": "deployments",
    "start": "34320",
    "end": "35040"
  },
  {
    "text": "and initiate automatic rollbacks in case",
    "start": "35040",
    "end": "37120"
  },
  {
    "text": "of deployment failures or degradations",
    "start": "37120",
    "end": "38879"
  },
  {
    "text": "and performance",
    "start": "38879",
    "end": "41520"
  },
  {
    "text": "the steps in this six stage pipeline",
    "start": "42079",
    "end": "44000"
  },
  {
    "text": "were created automatically using a cdk",
    "start": "44000",
    "end": "46239"
  },
  {
    "text": "pipeline's level 3 construct",
    "start": "46239",
    "end": "48399"
  },
  {
    "text": "the source stage fetches the source of",
    "start": "48399",
    "end": "50160"
  },
  {
    "text": "our cdk app from our forked github repo",
    "start": "50160",
    "end": "52960"
  },
  {
    "text": "and triggers the pipeline every time we",
    "start": "52960",
    "end": "54719"
  },
  {
    "text": "push new commits to it",
    "start": "54719",
    "end": "57600"
  },
  {
    "text": "the build stage compiles our code if",
    "start": "57600",
    "end": "59520"
  },
  {
    "text": "necessary and performs a cdk synth",
    "start": "59520",
    "end": "62320"
  },
  {
    "text": "this produces a cloud assembly which is",
    "start": "62320",
    "end": "64320"
  },
  {
    "text": "used to perform all actions in the rest",
    "start": "64320",
    "end": "66000"
  },
  {
    "text": "of the pipeline",
    "start": "66000",
    "end": "68720"
  },
  {
    "text": "the update pipeline stage automatically",
    "start": "70000",
    "end": "71920"
  },
  {
    "text": "modifies the pipeline if changes are",
    "start": "71920",
    "end": "73600"
  },
  {
    "text": "made",
    "start": "73600",
    "end": "74159"
  },
  {
    "text": "for example if we add a new deployment",
    "start": "74159",
    "end": "76000"
  },
  {
    "text": "stage to the pipeline or a new asset to",
    "start": "76000",
    "end": "77759"
  },
  {
    "text": "the application",
    "start": "77759",
    "end": "80479"
  },
  {
    "text": "the assets stage prepares and publishes",
    "start": "81840",
    "end": "83840"
  },
  {
    "text": "all file assets used in the app to",
    "start": "83840",
    "end": "85680"
  },
  {
    "text": "amazon's simple storage service or",
    "start": "85680",
    "end": "87360"
  },
  {
    "text": "amazon s3",
    "start": "87360",
    "end": "88560"
  },
  {
    "text": "and all docker images to amazon elastic",
    "start": "88560",
    "end": "90799"
  },
  {
    "text": "container registry",
    "start": "90799",
    "end": "91920"
  },
  {
    "text": "or amazon ecr",
    "start": "91920",
    "end": "95118"
  },
  {
    "text": "the subsequent pre-prod and prod stages",
    "start": "96960",
    "end": "99040"
  },
  {
    "text": "deploy our cdk application to the",
    "start": "99040",
    "end": "100880"
  },
  {
    "text": "account and region specified in our",
    "start": "100880",
    "end": "102479"
  },
  {
    "text": "source code",
    "start": "102479",
    "end": "103600"
  },
  {
    "text": "the pre-prod stage includes our",
    "start": "103600",
    "end": "105040"
  },
  {
    "text": "integration tests",
    "start": "105040",
    "end": "108000"
  },
  {
    "text": "let's look at the current production",
    "start": "109600",
    "end": "110880"
  },
  {
    "text": "deployment in code deploy",
    "start": "110880",
    "end": "115840"
  },
  {
    "text": "we can see the status of our deployments",
    "start": "115920",
    "end": "117680"
  },
  {
    "text": "and traffic shifting progress",
    "start": "117680",
    "end": "119680"
  },
  {
    "text": "when we configured code deploy we",
    "start": "119680",
    "end": "121360"
  },
  {
    "text": "integrated cloudwatch synthetics into",
    "start": "121360",
    "end": "123119"
  },
  {
    "text": "our development cycle through lifecycle",
    "start": "123119",
    "end": "124880"
  },
  {
    "text": "hooks",
    "start": "124880",
    "end": "126240"
  },
  {
    "text": "cloudwatch synthetics uses configurable",
    "start": "126240",
    "end": "128160"
  },
  {
    "text": "scripts called canaries",
    "start": "128160",
    "end": "129599"
  },
  {
    "text": "to generate synthetic traffic to monitor",
    "start": "129599",
    "end": "131680"
  },
  {
    "text": "our endpoints and apis",
    "start": "131680",
    "end": "133760"
  },
  {
    "text": "let's take a look at the canary for this",
    "start": "133760",
    "end": "135360"
  },
  {
    "text": "deployment",
    "start": "135360",
    "end": "137920"
  },
  {
    "text": "here are our canaries we can tell from",
    "start": "141200",
    "end": "143200"
  },
  {
    "text": "their last runs that both passed with a",
    "start": "143200",
    "end": "144879"
  },
  {
    "text": "100",
    "start": "144879",
    "end": "145599"
  },
  {
    "text": "success rate let's take a look at the",
    "start": "145599",
    "end": "148000"
  },
  {
    "text": "first canary",
    "start": "148000",
    "end": "150800"
  },
  {
    "text": "the summary panel gives us a snapshot of",
    "start": "151360",
    "end": "153120"
  },
  {
    "text": "the canary's metrics up to the last",
    "start": "153120",
    "end": "154800"
  },
  {
    "text": "seven days",
    "start": "154800",
    "end": "156160"
  },
  {
    "text": "the canary runs panel gives us a more",
    "start": "156160",
    "end": "158160"
  },
  {
    "text": "in-depth look at each run",
    "start": "158160",
    "end": "159840"
  },
  {
    "text": "so far no issues have been detected",
    "start": "159840",
    "end": "162800"
  },
  {
    "text": "let's return to code pipeline and push",
    "start": "162800",
    "end": "164560"
  },
  {
    "text": "some code that will trigger a failing",
    "start": "164560",
    "end": "166080"
  },
  {
    "text": "synthetics test",
    "start": "166080",
    "end": "168879"
  },
  {
    "text": "we'll emulate an internal server error",
    "start": "169120",
    "end": "170959"
  },
  {
    "text": "by hard coding our lambda function",
    "start": "170959",
    "end": "172480"
  },
  {
    "text": "handler to return a 500 http status code",
    "start": "172480",
    "end": "175440"
  },
  {
    "text": "for every request",
    "start": "175440",
    "end": "178400"
  },
  {
    "text": "our pipeline has already detected the",
    "start": "183360",
    "end": "185120"
  },
  {
    "text": "changes and is working on the updates",
    "start": "185120",
    "end": "188720"
  },
  {
    "text": "for the purposes of this example we'll",
    "start": "189280",
    "end": "191200"
  },
  {
    "text": "fast forward to the pre-prod stage of",
    "start": "191200",
    "end": "192959"
  },
  {
    "text": "our ci cd cycle",
    "start": "192959",
    "end": "196239"
  },
  {
    "text": "the web service is prepared and",
    "start": "196720",
    "end": "198159"
  },
  {
    "text": "deployment is in progress",
    "start": "198159",
    "end": "199920"
  },
  {
    "text": "let's take a closer look at the",
    "start": "199920",
    "end": "201120"
  },
  {
    "text": "deployment",
    "start": "201120",
    "end": "203599"
  },
  {
    "text": "the canary for this deployment is",
    "start": "206400",
    "end": "208000"
  },
  {
    "text": "currently generating synthetic traffic",
    "start": "208000",
    "end": "209840"
  },
  {
    "text": "to check the api endpoints availability",
    "start": "209840",
    "end": "212000"
  },
  {
    "text": "and measure its latency",
    "start": "212000",
    "end": "213760"
  },
  {
    "text": "this is where the deployment will fail",
    "start": "213760",
    "end": "215680"
  },
  {
    "text": "because the endpoint is returning an",
    "start": "215680",
    "end": "217040"
  },
  {
    "text": "error to all of our synthetic",
    "start": "217040",
    "end": "218480"
  },
  {
    "text": "users as expected the deployment",
    "start": "218480",
    "end": "221280"
  },
  {
    "text": "cancelled because it failed steps 2 and",
    "start": "221280",
    "end": "223120"
  },
  {
    "text": "3.",
    "start": "223120",
    "end": "224400"
  },
  {
    "text": "let's switch to the canaries in cloud",
    "start": "224400",
    "end": "225920"
  },
  {
    "text": "watch to view the failed run",
    "start": "225920",
    "end": "229280"
  },
  {
    "text": "here we can see the status code and",
    "start": "231599",
    "end": "233120"
  },
  {
    "text": "description of the failed request",
    "start": "233120",
    "end": "235280"
  },
  {
    "text": "this error should have triggered an",
    "start": "235280",
    "end": "236640"
  },
  {
    "text": "automatic rollback to the last known",
    "start": "236640",
    "end": "238400"
  },
  {
    "text": "working version of our application",
    "start": "238400",
    "end": "240959"
  },
  {
    "text": "let's go back to our deployments and",
    "start": "240959",
    "end": "242400"
  },
  {
    "text": "code deploy to see how the pipeline",
    "start": "242400",
    "end": "244000"
  },
  {
    "text": "reacted",
    "start": "244000",
    "end": "246480"
  },
  {
    "text": "the deployment status shows 100 success",
    "start": "247280",
    "end": "249840"
  },
  {
    "text": "at all three stages",
    "start": "249840",
    "end": "254239"
  },
  {
    "text": "the deployment details indicate that",
    "start": "254239",
    "end": "255920"
  },
  {
    "text": "this is a code deploy rollback",
    "start": "255920",
    "end": "257359"
  },
  {
    "text": "deployment that was triggered",
    "start": "257359",
    "end": "258560"
  },
  {
    "text": "automatically",
    "start": "258560",
    "end": "260160"
  },
  {
    "text": "let's check the canary in cloudwatch",
    "start": "260160",
    "end": "263840"
  },
  {
    "text": "we can tell from the past status in the",
    "start": "264320",
    "end": "266320"
  },
  {
    "text": "last run field",
    "start": "266320",
    "end": "267440"
  },
  {
    "text": "that the rollback deployment is live and",
    "start": "267440",
    "end": "269120"
  },
  {
    "text": "receiving traffic let's check the status",
    "start": "269120",
    "end": "271360"
  },
  {
    "text": "code received by our synthetic users",
    "start": "271360",
    "end": "275120"
  },
  {
    "text": "our endpoint is correctly responding to",
    "start": "276320",
    "end": "278080"
  },
  {
    "text": "requests with a 200 status code",
    "start": "278080",
    "end": "280160"
  },
  {
    "text": "as it did before we introduced the error",
    "start": "280160",
    "end": "282720"
  },
  {
    "text": "let's check the response body in api",
    "start": "282720",
    "end": "284720"
  },
  {
    "text": "gateway",
    "start": "284720",
    "end": "287199"
  },
  {
    "text": "we'll run a quick method test",
    "start": "289919",
    "end": "293360"
  },
  {
    "text": "let's use the get input",
    "start": "294560",
    "end": "298080"
  },
  {
    "text": "the api endpoint responded to our get",
    "start": "303039",
    "end": "305199"
  },
  {
    "text": "request with a 200 status code and",
    "start": "305199",
    "end": "307520"
  },
  {
    "text": "ok in the response body this confirms",
    "start": "307520",
    "end": "310080"
  },
  {
    "text": "that the automated rollback successfully",
    "start": "310080",
    "end": "311840"
  },
  {
    "text": "redeployed the last working version of",
    "start": "311840",
    "end": "313600"
  },
  {
    "text": "our app and the issue was fixed without",
    "start": "313600",
    "end": "315360"
  },
  {
    "text": "causing any noticeable downtime",
    "start": "315360",
    "end": "318240"
  },
  {
    "text": "you've just seen how to validate or roll",
    "start": "318240",
    "end": "320000"
  },
  {
    "text": "back your deployment with amazon",
    "start": "320000",
    "end": "321520"
  },
  {
    "text": "cloudwatch synthetics",
    "start": "321520",
    "end": "323600"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "323600",
    "end": "325280"
  },
  {
    "text": "the description and links for this video",
    "start": "325280",
    "end": "327680"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "327680",
    "end": "329120"
  },
  {
    "text": "to try",
    "start": "329120",
    "end": "333520"
  }
]