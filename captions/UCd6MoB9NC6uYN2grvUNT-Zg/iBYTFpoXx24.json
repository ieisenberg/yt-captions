[
  {
    "text": "[Music]",
    "start": "400",
    "end": "6480"
  },
  {
    "text": "[Music]",
    "start": "8620",
    "end": "11969"
  },
  {
    "text": "hello i am zwen a cloud support engineer",
    "start": "12240",
    "end": "15759"
  },
  {
    "text": "here at the aws office in northern",
    "start": "15759",
    "end": "18240"
  },
  {
    "text": "virginia today i'm going to show you how",
    "start": "18240",
    "end": "20960"
  },
  {
    "text": "to expose multiple kubernetes services",
    "start": "20960",
    "end": "23760"
  },
  {
    "text": "using ingress resource type in amazon",
    "start": "23760",
    "end": "26320"
  },
  {
    "text": "elastic kubernetes service let's get",
    "start": "26320",
    "end": "28880"
  },
  {
    "text": "started in kubernetes ingress is an api",
    "start": "28880",
    "end": "32880"
  },
  {
    "text": "object that provides a collection of",
    "start": "32880",
    "end": "35520"
  },
  {
    "text": "routing rules that govern how external",
    "start": "35520",
    "end": "38160"
  },
  {
    "text": "or internal users access kubernetes",
    "start": "38160",
    "end": "40559"
  },
  {
    "text": "services running in a cluster ingress is",
    "start": "40559",
    "end": "43520"
  },
  {
    "text": "not a service type but it acts as a",
    "start": "43520",
    "end": "46399"
  },
  {
    "text": "entry point for your cluster ingress",
    "start": "46399",
    "end": "49120"
  },
  {
    "text": "lets you consolidate your routing rules",
    "start": "49120",
    "end": "51600"
  },
  {
    "text": "into a single resource as it can expose",
    "start": "51600",
    "end": "54320"
  },
  {
    "text": "multiple services under the same",
    "start": "54320",
    "end": "56239"
  },
  {
    "text": "endpoint the ingress resource supports",
    "start": "56239",
    "end": "59199"
  },
  {
    "text": "the following features host-based",
    "start": "59199",
    "end": "61440"
  },
  {
    "text": "routing for example routing request with",
    "start": "61440",
    "end": "64640"
  },
  {
    "text": "the host header foot.example.com",
    "start": "64640",
    "end": "68000"
  },
  {
    "text": "to one group of services and the host",
    "start": "68000",
    "end": "70960"
  },
  {
    "text": "header",
    "start": "70960",
    "end": "72200"
  },
  {
    "text": "bar.example.com to another group",
    "start": "72200",
    "end": "74799"
  },
  {
    "text": "pass-based routing for example routing",
    "start": "74799",
    "end": "77680"
  },
  {
    "text": "requests with the ui that starts with",
    "start": "77680",
    "end": "80640"
  },
  {
    "text": "slash service a to kubernetes service a",
    "start": "80640",
    "end": "84400"
  },
  {
    "text": "and the request with the ui that starts",
    "start": "84400",
    "end": "87119"
  },
  {
    "text": "with slash service b to kubernetes",
    "start": "87119",
    "end": "90159"
  },
  {
    "text": "service b tls ssl termination for each",
    "start": "90159",
    "end": "94159"
  },
  {
    "text": "hostname such as",
    "start": "94159",
    "end": "96520"
  },
  {
    "text": "foo.example.com ingress is always",
    "start": "96520",
    "end": "99280"
  },
  {
    "text": "implemented by a third-party process",
    "start": "99280",
    "end": "102240"
  },
  {
    "text": "these implementations are known as",
    "start": "102240",
    "end": "104479"
  },
  {
    "text": "ingress controllers an ingress",
    "start": "104479",
    "end": "106640"
  },
  {
    "text": "controller is responsible for reading",
    "start": "106640",
    "end": "109520"
  },
  {
    "text": "the ingress resource information and",
    "start": "109520",
    "end": "111840"
  },
  {
    "text": "processing that data",
    "start": "111840",
    "end": "113680"
  },
  {
    "text": "an ingress controller is a daemon set or",
    "start": "113680",
    "end": "116240"
  },
  {
    "text": "deployment deployed as a kubernetes port",
    "start": "116240",
    "end": "120240"
  },
  {
    "text": "that watches the endpoint of the api",
    "start": "120240",
    "end": "122960"
  },
  {
    "text": "server for updates to the ingress",
    "start": "122960",
    "end": "125200"
  },
  {
    "text": "resource its job is to satisfy requests",
    "start": "125200",
    "end": "128319"
  },
  {
    "text": "for ingresses the nginx ingress",
    "start": "128319",
    "end": "130800"
  },
  {
    "text": "controller is one such implementation in",
    "start": "130800",
    "end": "133920"
  },
  {
    "text": "this video i will be using the nginx",
    "start": "133920",
    "end": "136640"
  },
  {
    "text": "ingress controller from the engineers",
    "start": "136640",
    "end": "138720"
  },
  {
    "text": "inc organization there is another",
    "start": "138720",
    "end": "141120"
  },
  {
    "text": "internet space ingress controller also",
    "start": "141120",
    "end": "143599"
  },
  {
    "text": "available for public use from the",
    "start": "143599",
    "end": "146000"
  },
  {
    "text": "kubernetes organization for more",
    "start": "146000",
    "end": "148400"
  },
  {
    "text": "information about comparison of this",
    "start": "148400",
    "end": "150400"
  },
  {
    "text": "tool see the link provided in the",
    "start": "150400",
    "end": "152640"
  },
  {
    "text": "article",
    "start": "152640",
    "end": "154640"
  },
  {
    "text": "open a terminal assuming that your eks",
    "start": "154640",
    "end": "157680"
  },
  {
    "text": "cluster is up and running and note that",
    "start": "157680",
    "end": "160879"
  },
  {
    "text": "crypto is already installed",
    "start": "160879",
    "end": "163200"
  },
  {
    "text": "run this command to download the ngins",
    "start": "163200",
    "end": "165599"
  },
  {
    "text": "ingress controller for kubernetes",
    "start": "165599",
    "end": "168480"
  },
  {
    "text": "go to the directory for deploying the",
    "start": "168480",
    "end": "170879"
  },
  {
    "text": "ingress controller all the commands in",
    "start": "170879",
    "end": "173280"
  },
  {
    "text": "the following steps are running from",
    "start": "173280",
    "end": "174959"
  },
  {
    "text": "this deployment directory create a",
    "start": "174959",
    "end": "177840"
  },
  {
    "text": "dedicated namespace service account and",
    "start": "177840",
    "end": "180640"
  },
  {
    "text": "tls certificates with a key for the",
    "start": "180640",
    "end": "183440"
  },
  {
    "text": "services",
    "start": "183440",
    "end": "184480"
  },
  {
    "text": "note that you can use the self-site trs",
    "start": "184480",
    "end": "187280"
  },
  {
    "text": "certificate and private key that are",
    "start": "187280",
    "end": "189920"
  },
  {
    "text": "generated for testing purposes it's a",
    "start": "189920",
    "end": "192720"
  },
  {
    "text": "best practice to use your own",
    "start": "192720",
    "end": "194560"
  },
  {
    "text": "certificate and key for production",
    "start": "194560",
    "end": "197200"
  },
  {
    "text": "environments",
    "start": "197200",
    "end": "198959"
  },
  {
    "text": "create a config map for customizing the",
    "start": "198959",
    "end": "202080"
  },
  {
    "text": "nginx configuration config map resources",
    "start": "202080",
    "end": "205360"
  },
  {
    "text": "allows you to customize or fine tune",
    "start": "205360",
    "end": "208319"
  },
  {
    "text": "nginx behavior for example set the",
    "start": "208319",
    "end": "211120"
  },
  {
    "text": "number of worker processes or customize",
    "start": "211120",
    "end": "214080"
  },
  {
    "text": "the access log format or configure nginx",
    "start": "214080",
    "end": "217040"
  },
  {
    "text": "to use the process protocol",
    "start": "217040",
    "end": "219840"
  },
  {
    "text": "in kubernetes we deal with row-based",
    "start": "219840",
    "end": "222720"
  },
  {
    "text": "access control arbuck to manage cluster",
    "start": "222720",
    "end": "225840"
  },
  {
    "text": "permissions this means that we must",
    "start": "225840",
    "end": "228080"
  },
  {
    "text": "create a cluster row and then by that",
    "start": "228080",
    "end": "230560"
  },
  {
    "text": "cluster row to service account that we",
    "start": "230560",
    "end": "233120"
  },
  {
    "text": "created in previous step",
    "start": "233120",
    "end": "236720"
  },
  {
    "text": "if your kubernetes cluster version is",
    "start": "236879",
    "end": "239280"
  },
  {
    "text": "greater than or equal to 1.18 then we",
    "start": "239280",
    "end": "242560"
  },
  {
    "text": "must create an engineered ingress class",
    "start": "242560",
    "end": "245599"
  },
  {
    "text": "resource as well the ingress class",
    "start": "245599",
    "end": "248239"
  },
  {
    "text": "resource type was added in kubernetes",
    "start": "248239",
    "end": "250799"
  },
  {
    "text": "1.18 this is generally used to reference",
    "start": "250799",
    "end": "254400"
  },
  {
    "text": "the name of the ingress controller that",
    "start": "254400",
    "end": "256720"
  },
  {
    "text": "should implement the ingress and is a",
    "start": "256720",
    "end": "259120"
  },
  {
    "text": "replacement for the corresponding",
    "start": "259120",
    "end": "261440"
  },
  {
    "text": "annotation kubernetes dot io slash",
    "start": "261440",
    "end": "264600"
  },
  {
    "text": "ingress.class in ingress resources now",
    "start": "264600",
    "end": "268240"
  },
  {
    "text": "it's time to deploy the ingress",
    "start": "268240",
    "end": "270240"
  },
  {
    "text": "controller port note that we can deploy",
    "start": "270240",
    "end": "272880"
  },
  {
    "text": "an ingress controller with the",
    "start": "272880",
    "end": "274800"
  },
  {
    "text": "deployment or daemon set option the",
    "start": "274800",
    "end": "277360"
  },
  {
    "text": "deployment option allows you to",
    "start": "277360",
    "end": "279440"
  },
  {
    "text": "dynamically change the number of ingress",
    "start": "279440",
    "end": "282080"
  },
  {
    "text": "controller replicas the demon set option",
    "start": "282080",
    "end": "285360"
  },
  {
    "text": "allows you to deploy the ingress",
    "start": "285360",
    "end": "287600"
  },
  {
    "text": "controller on every node or subset of",
    "start": "287600",
    "end": "290639"
  },
  {
    "text": "nodes in this demo i will use deployment",
    "start": "290639",
    "end": "293680"
  },
  {
    "text": "option",
    "start": "293680",
    "end": "295199"
  },
  {
    "text": "after the ingress controller is created",
    "start": "295199",
    "end": "298080"
  },
  {
    "text": "we can verify that the port is running",
    "start": "298080",
    "end": "301520"
  },
  {
    "text": "then we must expose the ingress",
    "start": "301520",
    "end": "303759"
  },
  {
    "text": "controller port through a kubernetes",
    "start": "303759",
    "end": "306160"
  },
  {
    "text": "service we can use a service object with",
    "start": "306160",
    "end": "309280"
  },
  {
    "text": "type no port or load balancer i will use",
    "start": "309280",
    "end": "312479"
  },
  {
    "text": "the load balancer type let's make sure",
    "start": "312479",
    "end": "314720"
  },
  {
    "text": "the service is running and an aws erb is",
    "start": "314720",
    "end": "318800"
  },
  {
    "text": "provisioning note that amazon eks",
    "start": "318800",
    "end": "322080"
  },
  {
    "text": "allocates a classic load balancer in tcp",
    "start": "322080",
    "end": "325280"
  },
  {
    "text": "mode with the proxy protocol enabled to",
    "start": "325280",
    "end": "328240"
  },
  {
    "text": "pass the client's information that is",
    "start": "328240",
    "end": "331039"
  },
  {
    "text": "the ip address and the port we must pass",
    "start": "331039",
    "end": "334240"
  },
  {
    "text": "this process information to the ingress",
    "start": "334240",
    "end": "336400"
  },
  {
    "text": "controller",
    "start": "336400",
    "end": "337440"
  },
  {
    "text": "to pass process information to the",
    "start": "337440",
    "end": "339280"
  },
  {
    "text": "ingress controller we must configure",
    "start": "339280",
    "end": "341520"
  },
  {
    "text": "nginx to use deposit protocol we will do",
    "start": "341520",
    "end": "344960"
  },
  {
    "text": "this by modifying the config map",
    "start": "344960",
    "end": "347039"
  },
  {
    "text": "resource that we created previously then",
    "start": "347039",
    "end": "350080"
  },
  {
    "text": "we will update the config map resource",
    "start": "350080",
    "end": "353680"
  },
  {
    "text": "now set up two micro services for",
    "start": "353680",
    "end": "356319"
  },
  {
    "text": "testing purpose in this case i will",
    "start": "356319",
    "end": "359039"
  },
  {
    "text": "create two http services one nand",
    "start": "359039",
    "end": "362000"
  },
  {
    "text": "hostname service and the other name",
    "start": "362000",
    "end": "364720"
  },
  {
    "text": "apache service both will respond to http",
    "start": "364720",
    "end": "368319"
  },
  {
    "text": "requests with some plant tags both are",
    "start": "368319",
    "end": "371440"
  },
  {
    "text": "exposed internally with kubernetes as",
    "start": "371440",
    "end": "374319"
  },
  {
    "text": "the default node port type",
    "start": "374319",
    "end": "378680"
  },
  {
    "text": "implement ingress so that it interfaces",
    "start": "386800",
    "end": "389759"
  },
  {
    "text": "with these two services using the load",
    "start": "389759",
    "end": "392080"
  },
  {
    "text": "balancer provided by ingress controller",
    "start": "392080",
    "end": "394560"
  },
  {
    "text": "kubernetes service the host-based",
    "start": "394560",
    "end": "396960"
  },
  {
    "text": "routing strategy is used to route",
    "start": "396960",
    "end": "399440"
  },
  {
    "text": "traffic to respective service",
    "start": "399440",
    "end": "403600"
  },
  {
    "text": "now that we are all set we can test the",
    "start": "403759",
    "end": "406400"
  },
  {
    "text": "ingress by access the dns url of the",
    "start": "406400",
    "end": "409680"
  },
  {
    "text": "load balancer",
    "start": "409680",
    "end": "412479"
  },
  {
    "text": "this returns a 404 the engineer's",
    "start": "413039",
    "end": "415840"
  },
  {
    "text": "ingress controller by default returns a",
    "start": "415840",
    "end": "418479"
  },
  {
    "text": "not front page with a full force data",
    "start": "418479",
    "end": "420880"
  },
  {
    "text": "code for all the requests for domains",
    "start": "420880",
    "end": "423680"
  },
  {
    "text": "where no ingress rules are defined the",
    "start": "423680",
    "end": "426720"
  },
  {
    "text": "ingress controller based on the defined",
    "start": "426720",
    "end": "429199"
  },
  {
    "text": "rules doesn't devote traffic to the",
    "start": "429199",
    "end": "431599"
  },
  {
    "text": "specified backend service unless the",
    "start": "431599",
    "end": "434560"
  },
  {
    "text": "request matches with the configuration",
    "start": "434560",
    "end": "437680"
  },
  {
    "text": "because the host field is configured for",
    "start": "437680",
    "end": "440400"
  },
  {
    "text": "the ingress object we must supply the",
    "start": "440400",
    "end": "443520"
  },
  {
    "text": "host header of the request with the same",
    "start": "443520",
    "end": "446479"
  },
  {
    "text": "host name",
    "start": "446479",
    "end": "449960"
  },
  {
    "text": "we can see that after edit the host",
    "start": "457520",
    "end": "460080"
  },
  {
    "text": "header the ingress controller can",
    "start": "460080",
    "end": "462400"
  },
  {
    "text": "redirect traffic to the backend config",
    "start": "462400",
    "end": "464960"
  },
  {
    "text": "service as it matches the configuration",
    "start": "464960",
    "end": "467919"
  },
  {
    "text": "defined in ingress",
    "start": "467919",
    "end": "470400"
  },
  {
    "text": "we can also divert traffic based on the",
    "start": "470400",
    "end": "472879"
  },
  {
    "text": "path to add path-based routing with",
    "start": "472879",
    "end": "475680"
  },
  {
    "text": "ingress do something similar to this",
    "start": "475680",
    "end": "480080"
  },
  {
    "text": "so now you know how to expose multiple",
    "start": "488639",
    "end": "491120"
  },
  {
    "text": "kubernetes services in amazon eks",
    "start": "491120",
    "end": "494240"
  },
  {
    "text": "through the nginx ingress controller",
    "start": "494240",
    "end": "497759"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "497759",
    "end": "499919"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "499919",
    "end": "504310"
  },
  {
    "text": "[Music]",
    "start": "504310",
    "end": "509919"
  },
  {
    "text": "you",
    "start": "509919",
    "end": "512000"
  }
]