[
  {
    "text": "hello everybody thanks for coming to our 2:05 my name is Paul Underwood this is",
    "start": "60",
    "end": "5819"
  },
  {
    "text": "Keith Horwood here on the right he'll be talking a little bit later talk about a theater this is incredible",
    "start": "5819",
    "end": "12480"
  },
  {
    "text": "this is a closest thing to fulfilling a lifelong dream of being a magician in Vegas I feel like Penn & Teller here so",
    "start": "12480",
    "end": "21350"
  },
  {
    "text": "thanks for coming today what I'm hoping that you guys draw out of this session is whether you work for",
    "start": "21350",
    "end": "28289"
  },
  {
    "text": "an enterprise or a startup or a medium-sized company I think there are lessons that we can learn from startups",
    "start": "28289",
    "end": "35540"
  },
  {
    "text": "on how to build and deploy on top of AWS I myself am a AWS startup Solutions",
    "start": "35540",
    "end": "42600"
  },
  {
    "text": "Architect and then over the course of the last two and a half years I've talked to about 800 different startups and I've had the opportunity to see you",
    "start": "42600",
    "end": "49890"
  },
  {
    "text": "know the startups that are successful the way they build on top of AWS I'm hoping I can bring some of those lessons",
    "start": "49890",
    "end": "55170"
  },
  {
    "text": "that I've seen out in the field to everybody here today so my expectations for you as the",
    "start": "55170",
    "end": "62129"
  },
  {
    "text": "audience today is that you have some familiarity with the 100 level AWS",
    "start": "62129",
    "end": "68100"
  },
  {
    "text": "constructs I'm not going to be spending time today explaining what things like API gateway or lambda does I'm assuming",
    "start": "68100",
    "end": "74909"
  },
  {
    "text": "you guys have that that notion already the structure of the presentation we're",
    "start": "74909",
    "end": "80430"
  },
  {
    "text": "going to talk about three different architecture patterns you know sort of interior architectures",
    "start": "80430",
    "end": "85759"
  },
  {
    "text": "containerized architecture and server lists and then for each of those patterns we're going to talk about the",
    "start": "85759",
    "end": "90869"
  },
  {
    "text": "implications the choice of those particular architecture patterns have from a cost performance and team",
    "start": "90869",
    "end": "96869"
  },
  {
    "text": "structure perspective and then in order to give you guys something that you can sort of walk away with today",
    "start": "96869",
    "end": "103490"
  },
  {
    "text": "cleanly a clicker broke is a is a deep dive with Keith from",
    "start": "103490",
    "end": "112350"
  },
  {
    "text": "Polly bit keith has runs a manages a thousands of different",
    "start": "112350",
    "end": "118680"
  },
  {
    "text": "lambda functions both for himself and his client and his clients and I think that in the process of of doing that he",
    "start": "118680",
    "end": "125759"
  },
  {
    "text": "learned a lot of lessons that I think we could all benefit from from hearing about so when I started putting this",
    "start": "125759",
    "end": "131450"
  },
  {
    "text": "deck together I started thinking about of those 800 startups I've talked to what are some commonalities that I see and you know I think most startups are",
    "start": "131450",
    "end": "139190"
  },
  {
    "text": "expecting scale either you know ideally having thousands of concurrent users or",
    "start": "139190",
    "end": "144350"
  },
  {
    "text": "millions of concurrent users at some point I think all startups are interested in differentiating themselves",
    "start": "144350",
    "end": "149900"
  },
  {
    "text": "from competition or from other startups that might be competing with them and so there's a real focus on features instead",
    "start": "149900",
    "end": "155840"
  },
  {
    "text": "of standardization and internal process I think a lot of startups have lean IT",
    "start": "155840",
    "end": "161210"
  },
  {
    "text": "departments often the co-founder might be the only engineering resource on the team and also startups have a innate",
    "start": "161210",
    "end": "168470"
  },
  {
    "text": "appreciation for the fact that if they can keep their costs low they can have a",
    "start": "168470",
    "end": "173540"
  },
  {
    "text": "longer runway but when I thought about that I realized we're all we're all thinking about that this clicker",
    "start": "173540",
    "end": "180700"
  },
  {
    "text": "we're all thinking about that same thing we're all wondering you know we would all love to have an extra you know pair",
    "start": "180700",
    "end": "187010"
  },
  {
    "text": "of hands on RIT staff we're all interested in developing features you know we want to satisfy the requirement",
    "start": "187010",
    "end": "192980"
  },
  {
    "text": "you know those who own our requirements documents and we all expect scale in some capacity once we move out of tests",
    "start": "192980",
    "end": "199130"
  },
  {
    "text": "or POC so we're all here at reinvent today because you know as attendees that",
    "start": "199130",
    "end": "205490"
  },
  {
    "text": "reinvent you're also probably very concerned about the well architected pillars security priority zero - table stakes",
    "start": "205490",
    "end": "212690"
  },
  {
    "text": "these days performance reliability cost efficiency all of these things are what",
    "start": "212690",
    "end": "217940"
  },
  {
    "text": "draws us all here to reinvent and amongst some of those best startups that",
    "start": "217940",
    "end": "223100"
  },
  {
    "text": "I've talked to over the last 2 and 1/2 years they've done a great job aligning some of these priorities",
    "start": "223100",
    "end": "229010"
  },
  {
    "text": "together when they're choosing the architectures that they want to build on top of AWS so",
    "start": "229010",
    "end": "236470"
  },
  {
    "text": "how have people done interior architectures historically and when I",
    "start": "236470",
    "end": "241910"
  },
  {
    "text": "talk about into your architectures I'm talking about the kinds of frameworks like flask or Django or spring and sort",
    "start": "241910",
    "end": "248990"
  },
  {
    "text": "of what you know what is the common pattern that people see and this should look fairly familiar to most of you this",
    "start": "248990",
    "end": "254240"
  },
  {
    "text": "is sort of a you know sort of a generic in tier monolithic architecture you've got a load balancer up at the front",
    "start": "254240",
    "end": "260540"
  },
  {
    "text": "you've got an application tier ideally more than you know two or more application servers and you've got your",
    "start": "260540",
    "end": "266640"
  },
  {
    "text": "database in the backend doing synchronous replication to this Dan by the an ideally those are in two separate",
    "start": "266640",
    "end": "273780"
  },
  {
    "text": "data centers so how are startups doing that on AWS today well this is a",
    "start": "273780",
    "end": "280010"
  },
  {
    "text": "pretty simplistic workflow that I'll walk through here so the first thing we'll do is we'll just clone our code",
    "start": "280010",
    "end": "286320"
  },
  {
    "text": "that we're looking to deploy and then I can run EB in it and EB here is the AWS",
    "start": "286320",
    "end": "291990"
  },
  {
    "text": "elastic Beanstalk command-line interface which is different from the AWS CLI and",
    "start": "291990",
    "end": "297950"
  },
  {
    "text": "the eb init command will actually create my high-level application it will",
    "start": "297950",
    "end": "302970"
  },
  {
    "text": "automatically detect what code i've just cloned and make a guess about what language it looks like i'm trying to",
    "start": "302970",
    "end": "309240"
  },
  {
    "text": "deploy the eb create command that you see there next will actually spin up the elastic",
    "start": "309240",
    "end": "316530"
  },
  {
    "text": "load balancer and the application servers and the database PG restore that's a common Postgres",
    "start": "316530",
    "end": "323190"
  },
  {
    "text": "command i just chose Postgres as an example here and PG restorable maybe we're going to restore the database that",
    "start": "323190",
    "end": "328740"
  },
  {
    "text": "eb create created for us into the database that he be created for us and then the eb set environment command",
    "start": "328740",
    "end": "335130"
  },
  {
    "text": "allows us to set environment variables and at that point in theory I should be",
    "start": "335130",
    "end": "341070"
  },
  {
    "text": "able to actually open my application and see it working now of course there's",
    "start": "341070",
    "end": "346560"
  },
  {
    "text": "gonna be changes things need to be made and so if let's say I wanted to have a test environment I can run EB create",
    "start": "346560",
    "end": "352500"
  },
  {
    "text": "test and that will create an exact replica of my prod environment in a test fashion and also point my local",
    "start": "352500",
    "end": "361640"
  },
  {
    "text": "Beanstalk workspace to point to a test environment instead of production and",
    "start": "361640",
    "end": "366750"
  },
  {
    "text": "then use my normal standard development workflow type git commands etc and then",
    "start": "366750",
    "end": "372420"
  },
  {
    "text": "I can run EB deploy will actually deploy those changes onto those servers that we just we just instantiated let's say we",
    "start": "372420",
    "end": "379980"
  },
  {
    "text": "test everything everything looks good our tests are passing if I want to deploy that that content or that new",
    "start": "379980",
    "end": "386640"
  },
  {
    "text": "application and those changes into my production environment I run EB switch prod that points my local Beanstalk",
    "start": "386640",
    "end": "393120"
  },
  {
    "text": "development environment to production now and then I run Eevee deploy and that will deploy my changes into prod so very",
    "start": "393120",
    "end": "401650"
  },
  {
    "text": "clean path very few commands to get that done the EB CLI is a really really",
    "start": "401650",
    "end": "406840"
  },
  {
    "text": "powerful tool that integrates directly into your developer workflows if you haven't used it yet can't encourage you",
    "start": "406840",
    "end": "412000"
  },
  {
    "text": "enough to do that so what do we get with those commands well just like that sort",
    "start": "412000",
    "end": "417370"
  },
  {
    "text": "of generic architecture we saw before we've got our elastic load balancer on the front we've got our two application",
    "start": "417370",
    "end": "423220"
  },
  {
    "text": "servers in an auto scaling group and also wheel also launched that RDS instance with the multi AZ standby on",
    "start": "423220",
    "end": "429580"
  },
  {
    "text": "day one now we also have a test environment that we created and so you can see we've got a replica of that test",
    "start": "429580",
    "end": "435490"
  },
  {
    "text": "environment behind it but that's not all we also get some some benefits clicker",
    "start": "435490",
    "end": "443760"
  },
  {
    "text": "we also get some significant benefits from from Beanstalk so it Beanstalk will",
    "start": "443760",
    "end": "450160"
  },
  {
    "text": "handle a lot of the you know I am and V PC networking requirements that you might have tried to manage yourself in",
    "start": "450160",
    "end": "456010"
  },
  {
    "text": "the past comes with cloud watch metrics that you know you can get detailed cloud watch metrics on your Beanstalk stacks",
    "start": "456010",
    "end": "461820"
  },
  {
    "text": "and also uh gives you the opportunity to use cloud watch logs for your application logs and then through Eevee",
    "start": "461820",
    "end": "468190"
  },
  {
    "text": "extensions you can also define additional specialist services like a Redis cluster or s3 objects that kind of",
    "start": "468190",
    "end": "475300"
  },
  {
    "text": "thing and your Eevee configurations so I like to call Beanstalk the kind of the",
    "start": "475300",
    "end": "482020"
  },
  {
    "text": "cheat code to in tier on AWS it really builds you into the best practices from",
    "start": "482020",
    "end": "487060"
  },
  {
    "text": "the start and you know because the Beanstalk CLI works so closely with your",
    "start": "487060",
    "end": "493900"
  },
  {
    "text": "standard development workflows it's just a quick way to building the best practices right from the start so",
    "start": "493900",
    "end": "501000"
  },
  {
    "text": "what what is the caught what did the cost for this was the cost for this look like well a development grade stack",
    "start": "501240",
    "end": "507700"
  },
  {
    "text": "which I characterize as a you know single T to Mike tt-to micro for the application server single database",
    "start": "507700",
    "end": "515669"
  },
  {
    "text": "t2 micro for you know storage I don't need two of them because I'm not worried about high",
    "start": "515670",
    "end": "521650"
  },
  {
    "text": "availability and production and roughly you could expect you know hundreds of concurrent connections against this",
    "start": "521650",
    "end": "527380"
  },
  {
    "text": "development grade stack the production-grade stack is in our case using two and four larges and two and",
    "start": "527380",
    "end": "534380"
  },
  {
    "text": "four larges for your database that roughly cost about three hundred and twenty now there's been some recent price reductions on the T two and M for",
    "start": "534380",
    "end": "541850"
  },
  {
    "text": "instance families so these numbers are actually a little high now and these numbers also don't include some of our other cost saving options like reserved",
    "start": "541850",
    "end": "548810"
  },
  {
    "text": "instances or spot pricing so just rough numbers to get to give you a rough sense",
    "start": "548810",
    "end": "554060"
  },
  {
    "text": "of what that what that stack actually costs so talked a little bit about interior",
    "start": "554060",
    "end": "559579"
  },
  {
    "text": "now let's talk about containers and what how containers are sort of evolving and moving on top of AWS now I think a lot",
    "start": "559579",
    "end": "567320"
  },
  {
    "text": "of people may not understand this or visualize this right off the bat but a proper containerized architecture might",
    "start": "567320",
    "end": "574730"
  },
  {
    "text": "look very very much like that VM based architecture that we just talked about you might have a docker container with",
    "start": "574730",
    "end": "580730"
  },
  {
    "text": "four engine X providing your load balancing SSL termination light light",
    "start": "580730",
    "end": "585829"
  },
  {
    "text": "routing you've got your application tier maybe that's running your your spring app or your Django application and then",
    "start": "585829",
    "end": "592670"
  },
  {
    "text": "you may choose to run a MySQL container on on a darker in docker as well and set up",
    "start": "592670",
    "end": "600290"
  },
  {
    "text": "and configure that synchronous replication yourself now in practice though the best approach on AWS is to",
    "start": "600290",
    "end": "608810"
  },
  {
    "text": "take advantage of the AWS ecosystem instead of you trying to manage and",
    "start": "608810",
    "end": "613940"
  },
  {
    "text": "configure your own nginx container for load balancing etc you could use our",
    "start": "613940",
    "end": "618980"
  },
  {
    "text": "application load balancers to do the same thing it can also do SSL termination and light light routing as",
    "start": "618980",
    "end": "625250"
  },
  {
    "text": "well obviously you want to use docker for your applications here no no surprises there but I would also really",
    "start": "625250",
    "end": "631370"
  },
  {
    "text": "encourage you into instead of thinking about deploying your own MySQL container and managing that all yourself use RDS",
    "start": "631370",
    "end": "638990"
  },
  {
    "text": "RDS is built we manage it on your behalf it doesn't require you to you know set",
    "start": "638990",
    "end": "644600"
  },
  {
    "text": "up a lot of the configurations and synchronize synchronization and and backups and all that just let RDS do",
    "start": "644600",
    "end": "650779"
  },
  {
    "text": "that for you so how does a start-up today build",
    "start": "650779",
    "end": "655850"
  },
  {
    "text": "something odd on ECS so that AWS ECS login that's actually AWS command-line",
    "start": "655850",
    "end": "663230"
  },
  {
    "text": "interface and that's going to give us a really long username and password that we can use to log into the AWS ECS",
    "start": "663230",
    "end": "669529"
  },
  {
    "text": "docker repo then I use my standard docker development workflow commands to build",
    "start": "669529",
    "end": "676069"
  },
  {
    "text": "and tag instances or you know images into my docker repo and then kind of",
    "start": "676069",
    "end": "681620"
  },
  {
    "text": "like the Beanstalk command-line interface the ECS has its own command-line",
    "start": "681620",
    "end": "687920"
  },
  {
    "text": "interface as well the ECS CLI and that first command is actually configuring my",
    "start": "687920",
    "end": "693290"
  },
  {
    "text": "local development environment to point to that specific cluster that I'm looking to deploy into that specific",
    "start": "693290",
    "end": "699889"
  },
  {
    "text": "region the ECS CLI up command is the actual mechanism that will launch the",
    "start": "699889",
    "end": "706639"
  },
  {
    "text": "underlying container instances that my docker images are gonna be running on top of now I can also use that ECS CLI",
    "start": "706639",
    "end": "714769"
  },
  {
    "text": "to create a service the campano docker compose file and then if I want to start",
    "start": "714769",
    "end": "721639"
  },
  {
    "text": "that service it's just a matter of simply saying service start that's a really quick way to deploy docker",
    "start": "721639",
    "end": "727430"
  },
  {
    "text": "compose and your images on top of ECS although the Gotcha here is that that ECS CLI doesn't allow you to define",
    "start": "727430",
    "end": "734870"
  },
  {
    "text": "application load balancing or auto scaling group details to do that if you wanted to supply that additional level",
    "start": "734870",
    "end": "741139"
  },
  {
    "text": "of configuration the ECS the AWS CLI has an e CS command that will allow you to",
    "start": "741139",
    "end": "746750"
  },
  {
    "text": "specify a service definition file where you can include those details about how you want your auto scaling groups and",
    "start": "746750",
    "end": "752899"
  },
  {
    "text": "how you want your and how you want your your application load balancers to be",
    "start": "752899",
    "end": "758839"
  },
  {
    "text": "configured so on the left side here we've got our container registry that we",
    "start": "758839",
    "end": "764180"
  },
  {
    "text": "logged into we have our darker files that we that we've defined and checked into that repo",
    "start": "764180",
    "end": "769569"
  },
  {
    "text": "we've built and checked into that repo we've got our docker compose files and we define those into services and tasks",
    "start": "769569",
    "end": "776709"
  },
  {
    "text": "in our container instances were launched by that ECS up command so we're looking",
    "start": "776709",
    "end": "782540"
  },
  {
    "text": "pretty good here and so we're able to kind of and then once that's all complete we'll ask our services and",
    "start": "782540",
    "end": "787550"
  },
  {
    "text": "tasks to be run by our scheduler the ECS scheduler now I highlighted RDS in here",
    "start": "787550",
    "end": "793850"
  },
  {
    "text": "because those previous commands that we just didn't actually include already astir define its launching RDS instances",
    "start": "793850",
    "end": "799650"
  },
  {
    "text": "that would be a matter of going to the console and launching it there or something to that effect so ETS gives us",
    "start": "799650",
    "end": "806430"
  },
  {
    "text": "some great stuff but what about what about",
    "start": "806430",
    "end": "812690"
  },
  {
    "text": "what about service discovery I think there's gonna be some announcements this week I'm not sure if they've already",
    "start": "812990",
    "end": "818010"
  },
  {
    "text": "come out yet or not about service discovery and within ECS how do you actually do how do you scale",
    "start": "818010",
    "end": "825000"
  },
  {
    "text": "the underlying container instances that's also something that's not done by the CLI instead you'll actually need to",
    "start": "825000",
    "end": "831630"
  },
  {
    "text": "create your own auto scaling group and let that auto scaling group launch your underlying container instances",
    "start": "831630",
    "end": "838970"
  },
  {
    "text": "so what is this cost exactly the",
    "start": "838970",
    "end": "845450"
  },
  {
    "text": "so a production grade ECA ec2 based stack that we talked about it's like you",
    "start": "845450",
    "end": "851100"
  },
  {
    "text": "said three hundred twenty dollars a month a production grade ECS stack is basically gonna cost the exact same",
    "start": "851100",
    "end": "856440"
  },
  {
    "text": "thing the underlying instance types are the same that said a",
    "start": "856440",
    "end": "861589"
  },
  {
    "text": "production grade ec2 stack you might only feel comfortable maxing out at forty percent utilization for CPU or",
    "start": "861589",
    "end": "868589"
  },
  {
    "text": "what-have-you because if that one of those boxes failed you'd want you want to make sure that other box is gonna be",
    "start": "868589",
    "end": "874620"
  },
  {
    "text": "able to handle that additional load well in ECS you're allowed you're able to",
    "start": "874620",
    "end": "879960"
  },
  {
    "text": "you're able to pack pack containers more densely on your underlying ec2 instances",
    "start": "879960",
    "end": "886110"
  },
  {
    "text": "and so you might be more comfortable actually running it at 80% utilization because you've got the auto scaling",
    "start": "886110",
    "end": "891660"
  },
  {
    "text": "groups with managing the container level scaling so in a way they're equal but I believe",
    "start": "891660",
    "end": "899550"
  },
  {
    "text": "that ECS gives you the ability to pack your containers a little more densely than you would have historically done on",
    "start": "899550",
    "end": "906240"
  },
  {
    "text": "a conventional ECS an ec2 instance so I want to talk a little bit about about the stack challenge and and what",
    "start": "906240",
    "end": "915270"
  },
  {
    "text": "and how DevOps plays into that stack challenge in this is the one opinion that I'm gonna try to give today and",
    "start": "915270",
    "end": "921300"
  },
  {
    "text": "that's that traditional VM and container architectures are rooted in emulating",
    "start": "921300",
    "end": "927810"
  },
  {
    "text": "physic classic servers and because of that they inherit the stack challenge",
    "start": "927810",
    "end": "933310"
  },
  {
    "text": "and Vogel's talks about this a lot and really I think I'd interpret the stack",
    "start": "933310",
    "end": "938620"
  },
  {
    "text": "challenge to mean and a conventional ec2 instance how do you manage the operating system how do you manage the users who",
    "start": "938620",
    "end": "945130"
  },
  {
    "text": "are allowed to log into the box the files your bootstrapping commands these are all headaches that we all have to",
    "start": "945130",
    "end": "950530"
  },
  {
    "text": "sweat and and worry about now docker makes things a lot easier because we're",
    "start": "950530",
    "end": "955540"
  },
  {
    "text": "able to kind of build these images with all of these things pre-configured and we're able to check those darker files",
    "start": "955540",
    "end": "961030"
  },
  {
    "text": "into source control and things like that that's nice but we still have the underlying container instances that we",
    "start": "961030",
    "end": "966520"
  },
  {
    "text": "have to worry about we also have to worry about any supporting core services that need to be running on that",
    "start": "966520",
    "end": "972250"
  },
  {
    "text": "container instances for example like console for service discovery or something to that effect and so you're",
    "start": "972250",
    "end": "977320"
  },
  {
    "text": "still inheriting all the stack challenge whether or not you're on docker or UC or on conventional ec2 instances and so",
    "start": "977320",
    "end": "985050"
  },
  {
    "text": "tooling gets us so far right we talked about Beanstalk that makes a lot of this",
    "start": "985050",
    "end": "990820"
  },
  {
    "text": "stuff easier with chef ansible very popular tools out there today but as your complexity scales you're eventually",
    "start": "990820",
    "end": "997810"
  },
  {
    "text": "going to need some DevOps staff and and that's because your developers are not",
    "start": "997810",
    "end": "1004170"
  },
  {
    "text": "DevOps folks your DevOps folks are thinking about process and standardization and consistency and your",
    "start": "1004170",
    "end": "1011580"
  },
  {
    "text": "developers are focused on delivering features so what does that end up leading to even if you're running an",
    "start": "1011580",
    "end": "1018390"
  },
  {
    "text": "agile shop if you've got this separation of concerns between your developers and your testers and your operations folks",
    "start": "1018390",
    "end": "1025350"
  },
  {
    "text": "you're never really going to get yourself into a situation where feature zero is being worked on and deployed by",
    "start": "1025350",
    "end": "1032130"
  },
  {
    "text": "your ops team while your dev teams already two features ahead working on that net the next feature and that looks",
    "start": "1032130",
    "end": "1039300"
  },
  {
    "text": "like a waterfall and may potentially lead to a lack of agility amongst your team down the road so AWS you know one",
    "start": "1039300",
    "end": "1046709"
  },
  {
    "text": "of our major drivers for when we release new features or new services is we talk to customers and we hear customers",
    "start": "1046710",
    "end": "1053190"
  },
  {
    "text": "complaining about things like the stack challenge and so",
    "start": "1053190",
    "end": "1058490"
  },
  {
    "text": "miss Baker so AWS is back to lab we're talking with",
    "start": "1059090",
    "end": "1064590"
  },
  {
    "text": "our customers we're asking ourselves questions we're listening to our customer we're listening to what our customers are telling us and",
    "start": "1064590",
    "end": "1070970"
  },
  {
    "text": "you know like I said before because these traditional VM and you know containerized architectures are rooted",
    "start": "1070970",
    "end": "1077190"
  },
  {
    "text": "in emulating classic physical servers nobody really wants to care about servers you know let's treat them like",
    "start": "1077190",
    "end": "1083310"
  },
  {
    "text": "cattle not pets feature development like I said before is so farm is much more valuable than",
    "start": "1083310",
    "end": "1089970"
  },
  {
    "text": "solving server centric stack problems nobody wants to be writing glue code when they could be developing features",
    "start": "1089970",
    "end": "1096600"
  },
  {
    "text": "and scale is another issue I mean how why can't things just scale automatically why do I need to scale on",
    "start": "1096600",
    "end": "1103200"
  },
  {
    "text": "the increments of individual virtual machines or instances so let's just put the server centric",
    "start": "1103200",
    "end": "1111030"
  },
  {
    "text": "architecture in a little historical context the indie act 1946 it's",
    "start": "1111030",
    "end": "1116580"
  },
  {
    "text": "interesting the ENIAC is actually in the Smithsonian and DC right next to r2d2 and c3po which is I find fascinating but",
    "start": "1116580",
    "end": "1124170"
  },
  {
    "text": "you know that was sort of you know kicked that off as like the the genesis of the monolithic architecture",
    "start": "1124170",
    "end": "1129440"
  },
  {
    "text": "1979 siege process route process isolation came out which sort of set the",
    "start": "1129440",
    "end": "1134700"
  },
  {
    "text": "stage for containerization in linux down the road",
    "start": "1134700",
    "end": "1140210"
  },
  {
    "text": "2006 ec2 came out and sort of a follow on you know sort of a generational",
    "start": "1140210",
    "end": "1146010"
  },
  {
    "text": "follow on from from process isolation and startups are now able to build in",
    "start": "1146010",
    "end": "1151290"
  },
  {
    "text": "launched ec2 instances very quickly but all of these things containers VMs",
    "start": "1151290",
    "end": "1156870"
  },
  {
    "text": "monolithic architectures these are all server centric we're all thinking about servers were all thinking about that stack challenge and so what's next right",
    "start": "1156870",
    "end": "1164970"
  },
  {
    "text": "what what moves us past what's gonna be the next evolution what's going to be the next sort of influence and I believe",
    "start": "1164970",
    "end": "1171750"
  },
  {
    "text": "that service technology today things like lambda things like API gateway so I",
    "start": "1171750",
    "end": "1177030"
  },
  {
    "text": "think a lot of people are confused about how to define what serverless means of what exactly is service so here's a",
    "start": "1177030",
    "end": "1184470"
  },
  {
    "text": "quick architecture diagram of a service web application that you might deploy on",
    "start": "1184470",
    "end": "1190230"
  },
  {
    "text": "top of AWS today so first step is is that maybe we chose angular to be our front-end application I'm a huge angular",
    "start": "1190230",
    "end": "1196600"
  },
  {
    "text": "fan myself we're gonna store the sort of angular app and all the assets and images and stuff like that into our s3",
    "start": "1196600",
    "end": "1203440"
  },
  {
    "text": "bucket and we'll front that with cloud front and that'll serve all of our example comm users when they come to",
    "start": "1203440",
    "end": "1209679"
  },
  {
    "text": "example.com so once that users pulled up that app and they need to start making API requests so we'll use route 53 to",
    "start": "1209679",
    "end": "1217780"
  },
  {
    "text": "configure API example.com to point to for example API gateway instead and",
    "start": "1217780",
    "end": "1223890"
  },
  {
    "text": "AWS lamda behind API gateway to handle those dynamic requests",
    "start": "1223890",
    "end": "1229080"
  },
  {
    "text": "for persistence in our case maybe we'll using something like Amazon DynamoDB and",
    "start": "1229080",
    "end": "1234539"
  },
  {
    "text": "lamda is perhaps writing reading and writing directly in and out of that database and or perhaps even our clients",
    "start": "1234539",
    "end": "1241900"
  },
  {
    "text": "could be writing and writing directly out of DynamoDB and you know this is in",
    "start": "1241900",
    "end": "1248799"
  },
  {
    "text": "my mind incredibly exciting right where's the server here right where's the operating",
    "start": "1248799",
    "end": "1254890"
  },
  {
    "text": "system that I'm managing well the answer that is the operating system is AWS and",
    "start": "1254890",
    "end": "1260490"
  },
  {
    "text": "that's pretty thrilling I mean talk about magic earlier but I mean this is",
    "start": "1260490",
    "end": "1265539"
  },
  {
    "text": "in a way in my mind an exciting magical type of architecture because I am not",
    "start": "1265539",
    "end": "1270730"
  },
  {
    "text": "worried about operating systems anymore the only operating systems I'm worried about are the ones that my clients",
    "start": "1270730",
    "end": "1276190"
  },
  {
    "text": "bought on their desktop or on their mobile devices so how our startups doing that on AWS",
    "start": "1276190",
    "end": "1282280"
  },
  {
    "text": "today well there's historically been a pretty pretty stiff pioneer tax that a lot of people have suffered through over",
    "start": "1282280",
    "end": "1288940"
  },
  {
    "text": "the last couple years over the last year or two and flourish is a service that",
    "start": "1288940",
    "end": "1294760"
  },
  {
    "text": "we'll be announcing we're announcing here at reinvent which is designed to make things a lot easier",
    "start": "1294760",
    "end": "1300580"
  },
  {
    "text": "for you to define and a sort of declarative markup language similar to cloud formation components and",
    "start": "1300580",
    "end": "1306850"
  },
  {
    "text": "architectures like we just like I just showed but what else is really exciting",
    "start": "1306850",
    "end": "1312370"
  },
  {
    "text": "about about service is in let's say you're gonna have a much easier time",
    "start": "1312370",
    "end": "1317850"
  },
  {
    "text": "talking your CFO about about what it costs so we just talked about you know",
    "start": "1317850",
    "end": "1323140"
  },
  {
    "text": "three hundred and twenty dollars a month for a sir but we didn't really talk about for you know for that VM based architecture but I",
    "start": "1323140",
    "end": "1331570"
  },
  {
    "text": "didn't you know and roughly you might be able to get thousands or you know low hon you know high hundreds of concurrent",
    "start": "1331570",
    "end": "1336610"
  },
  {
    "text": "connections or something to that effect but you can't really price it's very difficult to price per user what that",
    "start": "1336610",
    "end": "1342550"
  },
  {
    "text": "costs but in the service world because we're really paying for what we drink we're able to actually price out what an",
    "start": "1342550",
    "end": "1350800"
  },
  {
    "text": "individual users activity might be over the course of a month so imagine that website that we just you know that",
    "start": "1350800",
    "end": "1356980"
  },
  {
    "text": "that's website that we just described in the server this way let's say you've got every an average user visits about ten",
    "start": "1356980",
    "end": "1363790"
  },
  {
    "text": "pages a day makes about five API requests over the course of those ten pages and those you know involve reads",
    "start": "1363790",
    "end": "1371080"
  },
  {
    "text": "and writes and things like that and you can see on the right we're able to literally price out that monthly cost",
    "start": "1371080",
    "end": "1376390"
  },
  {
    "text": "per user based on that access pattern and you know this is you know similar",
    "start": "1376390",
    "end": "1382000"
  },
  {
    "text": "there are there are existing tiered pricing discounts as well that come into",
    "start": "1382000",
    "end": "1387130"
  },
  {
    "text": "play as you things start to scale right cloud front data transfer as three storage as that increases there are",
    "start": "1387130",
    "end": "1393310"
  },
  {
    "text": "there are tiered pricing models so it might actually even be lower than this when you're at scale but this is a fun",
    "start": "1393310",
    "end": "1398860"
  },
  {
    "text": "conversation to have with your CFO cuz you're like hey I'm able to tell you exactly what it is per user we know what",
    "start": "1398860",
    "end": "1405370"
  },
  {
    "text": "the conversion rates are per user and how much profit we make and it's it's a very exciting conversation because it",
    "start": "1405370",
    "end": "1410920"
  },
  {
    "text": "completely changes the economic discussion that you might be having in the past when you're CFOs today so",
    "start": "1410920",
    "end": "1418680"
  },
  {
    "text": "microservices is a volva and sort of blowing up key word these days and you know similar",
    "start": "1418680",
    "end": "1427480"
  },
  {
    "text": "to what we just went through for what what is service I'm gonna do my best to describe what micro services are what a",
    "start": "1427480",
    "end": "1434890"
  },
  {
    "text": "micro service might look like on day zero so I think one of the most important aspects to remember in my",
    "start": "1434890",
    "end": "1441460"
  },
  {
    "text": "opinion to think about when you're designing a micro service is that your developer who owns or your developer or",
    "start": "1441460",
    "end": "1449050"
  },
  {
    "text": "your team who develops a micro service needs to be responsible for all phases of the SDLC for that micro service and",
    "start": "1449050",
    "end": "1456850"
  },
  {
    "text": "that app example architecture we just went through on the left here it's completely",
    "start": "1456850",
    "end": "1462820"
  },
  {
    "text": "reasonable to assume that uh ninda vidual developer could own that all of that and own the test and the dab and",
    "start": "1462820",
    "end": "1469389"
  },
  {
    "text": "the operations and maintenance because they're no longer really sweating those heavy DevOps concerns that they",
    "start": "1469389",
    "end": "1474880"
  },
  {
    "text": "inherited with the stack challenge they're now able to manage this themselves now as complexity scales up",
    "start": "1474880",
    "end": "1482100"
  },
  {
    "text": "things things start we need to think about splitting up that micro-service and already mentioned burn once in this",
    "start": "1482100",
    "end": "1488860"
  },
  {
    "text": "talk but he's a loving character so I like to you know he talks about he talks",
    "start": "1488860",
    "end": "1495100"
  },
  {
    "text": "about micro services at AWS and about at Amazon rather at large and how we decide",
    "start": "1495100",
    "end": "1501129"
  },
  {
    "text": "when the time is right to split up a micro service into to split of micro",
    "start": "1501129",
    "end": "1507009"
  },
  {
    "text": "services into two and the answer at Amazon at least is when you cannot feed that development team with two pizzas",
    "start": "1507009",
    "end": "1514299"
  },
  {
    "text": "that's about the right time that you actually need to start splitting off that micro service and that it should be",
    "start": "1514299",
    "end": "1519460"
  },
  {
    "text": "its own so in our case in this example we have our front end of our application",
    "start": "1519460",
    "end": "1524830"
  },
  {
    "text": "maybe that's what that specific team is going to continue to own and your core",
    "start": "1524830",
    "end": "1530289"
  },
  {
    "text": "side API will be will sort of mitosis out from that existing service and a new",
    "start": "1530289",
    "end": "1536289"
  },
  {
    "text": "team will be responsible for managing that specific feature so this process may continue on and on",
    "start": "1536289",
    "end": "1544090"
  },
  {
    "text": "for for a while and and to where you eventually might have",
    "start": "1544090",
    "end": "1549700"
  },
  {
    "text": "two three four different micro services and in this example maybe each each",
    "start": "1549700",
    "end": "1554769"
  },
  {
    "text": "micro service team or each micro service developer has chosen to use lambda and dynamo and s3 as their primary",
    "start": "1554769",
    "end": "1561309"
  },
  {
    "text": "mechanisms but the key here is that they're all responsible for all phases of the SDLC within their particular",
    "start": "1561309",
    "end": "1568210"
  },
  {
    "text": "micro service I think that's very very critical to the definition of what a",
    "start": "1568210",
    "end": "1573309"
  },
  {
    "text": "micro service truly is you may have a lead architect up at the front who is responsible for managing",
    "start": "1573309",
    "end": "1579580"
  },
  {
    "text": "what I'll call the core services the sort of relatively static definitions about what you know your dns",
    "start": "1579580",
    "end": "1586330"
  },
  {
    "text": "configurations or maybe API gateway and what restful contract you know what that",
    "start": "1586330",
    "end": "1591669"
  },
  {
    "text": "restful api should look like between your microservices but the other thing that might happen is",
    "start": "1591669",
    "end": "1599080"
  },
  {
    "text": "if service team one decides that they have the internal within their team the",
    "start": "1599080",
    "end": "1604989"
  },
  {
    "text": "operational experience with docker and maybe they know that there they've got lots of different small containers that",
    "start": "1604989",
    "end": "1611859"
  },
  {
    "text": "they're trying to pack into lots of servers let them choose docker you shouldn't be you when you're in a true",
    "start": "1611859",
    "end": "1618369"
  },
  {
    "text": "micro service environment what you're most interested in what you're evaluating your teams on is based on you",
    "start": "1618369",
    "end": "1624759"
  },
  {
    "text": "know how cost performant are they how reliable are they not so much are they following our standards and processes",
    "start": "1624759",
    "end": "1630489"
  },
  {
    "text": "are they following this let the service team manage the sdlc themselves and",
    "start": "1630489",
    "end": "1635769"
  },
  {
    "text": "measure their success and measure their effectiveness based on you know well architected pillars like reliability and",
    "start": "1635769",
    "end": "1643929"
  },
  {
    "text": "security and things like that and then perhaps service team to decides well",
    "start": "1643929",
    "end": "1648969"
  },
  {
    "text": "we've actually got this particular service needs to handle thousands of concurrent requests per second",
    "start": "1648969",
    "end": "1655119"
  },
  {
    "text": "consistently across the month in which case after they've done the math and they have figured out that you know",
    "start": "1655119",
    "end": "1660879"
  },
  {
    "text": "lambda might be too expensive in which case you know a traditional instance based architecture might be more",
    "start": "1660879",
    "end": "1666940"
  },
  {
    "text": "appropriate let your team pick the right tool for the job now you may eventually have your big",
    "start": "1666940",
    "end": "1673239"
  },
  {
    "text": "data guy come on down the road and he owns redshift and he owns EMR or Kinesis",
    "start": "1673239",
    "end": "1680139"
  },
  {
    "text": "or that sort of thing and your mobile developer maybe they own a mobile hub or",
    "start": "1680139",
    "end": "1685839"
  },
  {
    "text": "Amazon mobile analytics that's the you know it's up let your team own and pick",
    "start": "1685839",
    "end": "1693249"
  },
  {
    "text": "what they what they need to be responsible for so we've talked a little bit about",
    "start": "1693249",
    "end": "1699509"
  },
  {
    "text": "about what that interior and containerized architecture looks like on on AWS we've",
    "start": "1699509",
    "end": "1708629"
  },
  {
    "text": "you know and we understand the DevOps implication of the stack challenge etc",
    "start": "1708629",
    "end": "1713789"
  },
  {
    "text": "but what about in a service world right it mentioned flourish but you know what",
    "start": "1713789",
    "end": "1720639"
  },
  {
    "text": "are some practical needs practical things that you guys can leave here today to think about when",
    "start": "1720639",
    "end": "1727499"
  },
  {
    "text": "you're going to deploy your next micro service or your next service architecture on top of AWS and with that",
    "start": "1727499",
    "end": "1733859"
  },
  {
    "text": "I'm gonna hand it over to Keith and like I said Keith manages thousands of lambda",
    "start": "1733859",
    "end": "1738869"
  },
  {
    "text": "functions both for himself and his company and for and for his customers as well and so in the process of hosting",
    "start": "1738869",
    "end": "1745679"
  },
  {
    "text": "all of those lambda functions he learned quite a bit about what it looks like to have that done in an organized way so",
    "start": "1745679",
    "end": "1752190"
  },
  {
    "text": "with that I'll pass it to Keith who will kind of walk you through some of those tips that he's learned over the last two years",
    "start": "1752190",
    "end": "1757519"
  },
  {
    "text": "cool thank you very much Paul so hi everybody my name is Keith Horwood",
    "start": "1757519",
    "end": "1762840"
  },
  {
    "text": "as Paul mentioned I'm the founder and CEO of poly bits where we've actually",
    "start": "1762840",
    "end": "1768479"
  },
  {
    "text": "built standard Lib which is a central registry for micro services and a function as a service platform built on",
    "start": "1768479",
    "end": "1775200"
  },
  {
    "text": "top of AWS lambda so as you can imagine as Paul mentioned we're already managing",
    "start": "1775200",
    "end": "1780479"
  },
  {
    "text": "thousands of micro services for developers all over the globe as well as our own services and so I kind of like",
    "start": "1780479",
    "end": "1786989"
  },
  {
    "text": "to talk to you about the process we go through for really unlocking practical",
    "start": "1786989",
    "end": "1792269"
  },
  {
    "text": "serverless development services cool we're all interested in using it but",
    "start": "1792269",
    "end": "1797309"
  },
  {
    "text": "when it comes to actually putting it to practice how do we start managing our teams around this how do we organize around this right so we we've listened",
    "start": "1797309",
    "end": "1804809"
  },
  {
    "text": "to Paul's talk and great job by the way and and you know what we're sold we want",
    "start": "1804809",
    "end": "1810960"
  },
  {
    "text": "to go serverless well like yeah this sounds like a pretty good idea listen service is scalable it's scalable beyond",
    "start": "1810960",
    "end": "1816749"
  },
  {
    "text": "your wildest imagination going from 10 users to 10 million daily requests not a problem there's there's decreased cost",
    "start": "1816749",
    "end": "1824070"
  },
  {
    "text": "which Paul mentioned as well that map's directly to compute time so from finance",
    "start": "1824070",
    "end": "1830129"
  },
  {
    "text": "and from an economic decision it's it's a straightforward decision to make one of the most important aspects is Paul",
    "start": "1830129",
    "end": "1836759"
  },
  {
    "text": "covered this as well is organizational compartmentalization and what this means is instead of having tens maybe even",
    "start": "1836759",
    "end": "1844979"
  },
  {
    "text": "hundreds if it gets unruly of developers working on the same monolithic code base you can really separate your development",
    "start": "1844979",
    "end": "1851999"
  },
  {
    "text": "teams into the the to pizza rule I think I think Paul kind of down there and",
    "start": "1851999",
    "end": "1857650"
  },
  {
    "text": "separate your teams into smaller groups that are working on services that they pretty much just just own and work is",
    "start": "1857650",
    "end": "1863590"
  },
  {
    "text": "almost lean development teams startups in their own right right and then there's also this this UNIX philosophy",
    "start": "1863590",
    "end": "1869020"
  },
  {
    "text": "now I come from the the node.js from the JavaScript world and so a lot of people",
    "start": "1869020",
    "end": "1874120"
  },
  {
    "text": "are really happy with this UNIX philosophy the idea that it's a service atomization essentially the fact that",
    "start": "1874120",
    "end": "1880540"
  },
  {
    "text": "each service that you have standalone service you have separation of concerns it does one thing and does it really",
    "start": "1880540",
    "end": "1885910"
  },
  {
    "text": "really well and that's something that you really get to approach with with serverless design and Cerberus architecture and you really get to",
    "start": "1885910",
    "end": "1891700"
  },
  {
    "text": "implement that on a team basis so all of this stuff is pretty exciting now before I go into the actual details of putting",
    "start": "1891700",
    "end": "1899950"
  },
  {
    "text": "it like in the weeds and putting into practice I want to take like a giant step back and and sort of touch on",
    "start": "1899950",
    "end": "1906730"
  },
  {
    "text": "something that Paul very briefly covered but it's how we really think about AWS at Poly bit now and especially with with",
    "start": "1906730",
    "end": "1914290"
  },
  {
    "text": "serverless architecture now what we view AWS has is really the system architecture of the web right it's",
    "start": "1914290",
    "end": "1921700"
  },
  {
    "text": "software configurable infrastructure there are lots of ways to get anything done is pulling over a ton of different",
    "start": "1921700",
    "end": "1929380"
  },
  {
    "text": "architectural patterns that your that your teams can use but what's the right way what's the best way what's the most cost-effective way how's my team gonna",
    "start": "1929380",
    "end": "1936400"
  },
  {
    "text": "be able to ship code and ship products quickly so taking this perspective and",
    "start": "1936400",
    "end": "1943240"
  },
  {
    "text": "seeing AWS is the system architecture of the web we start thinking relating it to really like the system",
    "start": "1943240",
    "end": "1950470"
  },
  {
    "text": "architecture of a single computer wind developers we know a lot of people on the development teams that you're currently managing or working on",
    "start": "1950470",
    "end": "1955900"
  },
  {
    "text": "whatever write code in JavaScript for example they write a function and then they execute that function and it just",
    "start": "1955900",
    "end": "1961930"
  },
  {
    "text": "works did they have to think about memory addressing for that function where that actually exists in the",
    "start": "1961930",
    "end": "1966940"
  },
  {
    "text": "computer's memory no so when you think about service architecture you're kind of thinking that kind of applied at the",
    "start": "1966940",
    "end": "1972640"
  },
  {
    "text": "system's level right when I want to execute a service why do I have to know geographically where that service is",
    "start": "1972640",
    "end": "1978010"
  },
  {
    "text": "contained why do I have to know what VM that's running on what container that's running on where it's actually coming",
    "start": "1978010",
    "end": "1983080"
  },
  {
    "text": "from why can't I just write a service and have it run and so thinking about this next layer of abstraction and",
    "start": "1983080",
    "end": "1988690"
  },
  {
    "text": "really the tooling required to development around this next layer of abstraction tenable it is really where",
    "start": "1988690",
    "end": "1994450"
  },
  {
    "text": "we're we're focused and in order to really build that abstraction layer really what it comes down to is you're",
    "start": "1994450",
    "end": "2000419"
  },
  {
    "text": "just thinking about organizational tooling for service architecture so there are a couple of components here",
    "start": "2000419",
    "end": "2005970"
  },
  {
    "text": "that that everyone's on their own I mean this this is a new space right everybody's working on kind of figuring",
    "start": "2005970",
    "end": "2011370"
  },
  {
    "text": "out okay how do we think about server those micro services well we got to think about six different components really right there's sharing how do we",
    "start": "2011370",
    "end": "2018960"
  },
  {
    "text": "share we built a micro service how do we either share it with people in the global community or share within our",
    "start": "2018960",
    "end": "2024450"
  },
  {
    "text": "organization how do we make sure people can access this and know that it exists there's a discovery layer which is kind",
    "start": "2024450",
    "end": "2029580"
  },
  {
    "text": "of tied into sharing in that a new developer joins your team and they want to build a service that accomplishes",
    "start": "2029580",
    "end": "2034830"
  },
  {
    "text": "something specifically well I mean you could be a small start-up and have only ten people or you could have hundreds or",
    "start": "2034830",
    "end": "2040049"
  },
  {
    "text": "thousands of employees you want to make sure that you're not reinventing the wheel every time you want to create a micro service so how can you discover",
    "start": "2040049",
    "end": "2046080"
  },
  {
    "text": "the micro services that have already been built how do you manage development environments I mean there's a difference",
    "start": "2046080",
    "end": "2051540"
  },
  {
    "text": "between like a going back to the old like server based development but",
    "start": "2051540",
    "end": "2057060"
  },
  {
    "text": "there's a difference between like a staging server and a development server and and something you put out for release how do you manage that now micro",
    "start": "2057060",
    "end": "2063658"
  },
  {
    "text": "service releases you probably want them to be immutable but development in staging environments they could be",
    "start": "2063659",
    "end": "2068908"
  },
  {
    "text": "potentially completely immutable right I mean you can tear them down and spin them up whenever you want you're not relying you're not having any production",
    "start": "2068909",
    "end": "2074730"
  },
  {
    "text": "grade tasks relying on these so how do you configure that deployment pipelines what does that look like I mean there's",
    "start": "2074730",
    "end": "2081089"
  },
  {
    "text": "been an explosion in open source tooling around serverless even in the past couple of weeks we've seen tons of stuff",
    "start": "2081089",
    "end": "2088290"
  },
  {
    "text": "pop up so what what is the best deployment pipeline to use how do I figure this out and then versioning I",
    "start": "2088290",
    "end": "2094230"
  },
  {
    "text": "just mentioned service mutability for things like staging environments versus immutability",
    "start": "2094230",
    "end": "2100619"
  },
  {
    "text": "or releases if you have hundreds or thousands of micro services and you want to push out a new release you don't want",
    "start": "2100619",
    "end": "2106440"
  },
  {
    "text": "to just overwrite your last release and potentially break the interactions I mean it's a combinatorial city right",
    "start": "2106440",
    "end": "2111920"
  },
  {
    "text": "break a bunch of interactions between pre-existing services so how do you handle micro service versioning and then",
    "start": "2111920",
    "end": "2117960"
  },
  {
    "text": "there's legacy application interoperability and this is something that's actually really exciting it's actually pretty straightforward to take care of but it's actually really",
    "start": "2117960",
    "end": "2124170"
  },
  {
    "text": "exciting about serverless space is that you can use legacy monolithic and to",
    "start": "2124170",
    "end": "2129930"
  },
  {
    "text": "your architectures that you've already built with and start deconstructing them",
    "start": "2129930",
    "end": "2135089"
  },
  {
    "text": "essentially piecemeal and putting in micro-services serverless micro-services I'm running on lambda in the in their",
    "start": "2135089",
    "end": "2142410"
  },
  {
    "text": "place one at a time so this is a really interesting perspective here so how do we take care of that I'm gonna teach you",
    "start": "2142410",
    "end": "2149010"
  },
  {
    "text": "kind of how we take care of that and I'm gonna walk you step-by-step how if you want to build this stuff on your own how",
    "start": "2149010",
    "end": "2154589"
  },
  {
    "text": "you can take care of it within your own organization so what we do at Poly bit",
    "start": "2154589",
    "end": "2160800"
  },
  {
    "text": "with standard Lib I mean standard limited so it's a Miss it's the missing registry for services globally really",
    "start": "2160800",
    "end": "2166380"
  },
  {
    "text": "and we have some command line tools that really easily interface with our library you can kind of almost view it like in",
    "start": "2166380",
    "end": "2172230"
  },
  {
    "text": "the same way git push would when dealing with version control you use something like git git push would push up the",
    "start": "2172230",
    "end": "2179069"
  },
  {
    "text": "newest version of your code to a remote git server we have a command line tool called Lib you can just type lib up and",
    "start": "2179069",
    "end": "2186150"
  },
  {
    "text": "it instantly deploys your micro service so very very simple way to deal with",
    "start": "2186150",
    "end": "2191819"
  },
  {
    "text": "micro service development micro service creation I mean this is all running on the system architecture of the web like",
    "start": "2191819",
    "end": "2197730"
  },
  {
    "text": "I mentioned AWS I'm Landa and these are command line tools available on our github repo at Holly's /st de la vie",
    "start": "2197730",
    "end": "2205710"
  },
  {
    "text": "standard wood on top of that the second component to what we built is really I",
    "start": "2205710",
    "end": "2211140"
  },
  {
    "text": "was talking about that this registry of services when you want that discoverability that sharing layer",
    "start": "2211140",
    "end": "2217290"
  },
  {
    "text": "within your organization now you probably already use something like github for version control right so you have developers coming through",
    "start": "2217290",
    "end": "2222780"
  },
  {
    "text": "organizations they want to check out how codes been developed in the past you link that you give them permission access your git repos they look at",
    "start": "2222780",
    "end": "2229079"
  },
  {
    "text": "github they can see the documentation now what about services that that people in your organization have already deployed I mean this is this is an",
    "start": "2229079",
    "end": "2235650"
  },
  {
    "text": "example of a registry page one of our developers one of the the community members built a stateless chess game",
    "start": "2235650",
    "end": "2242460"
  },
  {
    "text": "where you can put in the state of the chess board and a move that it will give you the new it'll tell you whether it's",
    "start": "2242460",
    "end": "2247530"
  },
  {
    "text": "valid or not and give you the the new state of the of the chess board so this is an example of automated documentation",
    "start": "2247530",
    "end": "2254430"
  },
  {
    "text": "really that that we provide that comes with with building the service so people",
    "start": "2254430",
    "end": "2259500"
  },
  {
    "text": "can very easily organized around the microservices they build now how do we do this behind the scenes like right",
    "start": "2259500",
    "end": "2264570"
  },
  {
    "text": "yeah you want it you want implement this and your organ organization now maybe use our tools or maybe you say you know what no we need something very custom",
    "start": "2264570",
    "end": "2270570"
  },
  {
    "text": "and I want to build it I want to build it myself so the first thing you want to look at is sharing and discovery how do",
    "start": "2270570",
    "end": "2277740"
  },
  {
    "text": "I really get this out to my organization how do i how do i establish some standards for the develops team for the",
    "start": "2277740",
    "end": "2283350"
  },
  {
    "text": "developers and how they can actually access the micro service well the first thing that we focus on at poly beta I",
    "start": "2283350",
    "end": "2288600"
  },
  {
    "text": "mean this is one of the very first questions we had how do we what do we put on micro-services in terms of HTTP and super easy question",
    "start": "2288600",
    "end": "2295710"
  },
  {
    "text": "I answer actually if you're running Bert's shoe company Bert's shoes comm say it's likely that you might have an",
    "start": "2295710",
    "end": "2301770"
  },
  {
    "text": "API on API Bert's shoes calm okay so so how do we think about micro",
    "start": "2301770",
    "end": "2307410"
  },
  {
    "text": "services well we just prefix with the with the subdomain ff4 function I mean",
    "start": "2307410",
    "end": "2312420"
  },
  {
    "text": "these are functional micro services you're just thinking about two-point functions out in the cloud so after your domain comm so it's your service now",
    "start": "2312420",
    "end": "2318120"
  },
  {
    "text": "what's the pathway look like to actually execute this lambda function first you're gonna go through DNS routing so",
    "start": "2318120",
    "end": "2323430"
  },
  {
    "text": "obviously you have to set up your sub domain and the appropriate routing with route 53 the AWS service that will send",
    "start": "2323430",
    "end": "2331200"
  },
  {
    "text": "you to API gateway which you can then integrate with your lambda services so",
    "start": "2331200",
    "end": "2336540"
  },
  {
    "text": "this is like the de facto standard AWS suggestion for really how to start building with lambda and API gateway in",
    "start": "2336540",
    "end": "2343230"
  },
  {
    "text": "this serverless context now there are other ways that you can build this setup and we'll talk about that in a little",
    "start": "2343230",
    "end": "2348780"
  },
  {
    "text": "bit where we can use almost a hybrid approach for the Gateway if we need to do some complex computation before we",
    "start": "2348780",
    "end": "2354270"
  },
  {
    "text": "talk to our service but we'll get to that a little bit later so that's the sharing a discovery layer over http f",
    "start": "2354270",
    "end": "2360150"
  },
  {
    "text": "your domain comm now how do we think about environment and deployment so one thank you to the",
    "start": "2360150",
    "end": "2366810"
  },
  {
    "text": "two AWS and the AWS lambda team for finally announcing environment variable",
    "start": "2366810",
    "end": "2372690"
  },
  {
    "text": "support as of I believe it was 11 days ago as of today for AWS lambda it makes dealing with environments and",
    "start": "2372690",
    "end": "2379380"
  },
  {
    "text": "environment variables significantly easier now this we're gonna cover a way that you can do this in a local",
    "start": "2379380",
    "end": "2385140"
  },
  {
    "text": "environment from a developer perspective and how we used to have to kind of do this and deal with environment variables",
    "start": "2385140",
    "end": "2392190"
  },
  {
    "text": "on slander and kind of how we can do it now now that we support now that AWS story supports environment variables",
    "start": "2392190",
    "end": "2398859"
  },
  {
    "text": "natively so you've have something like a dot M file in your in your local development environment and that's just",
    "start": "2398859",
    "end": "2405430"
  },
  {
    "text": "basically gonna be a set of key value pairs for environment variables and their values so as an example here I",
    "start": "2405430",
    "end": "2411549"
  },
  {
    "text": "think we have a stripe API key setup because you want to do payment processing from your lambda function so",
    "start": "2411549",
    "end": "2418180"
  },
  {
    "text": "in your local environment you would require this dot and package it's a node.js packaged up a lot of Matic you load these environment variables you",
    "start": "2418180",
    "end": "2424029"
  },
  {
    "text": "don't need to do this in production on a TBS land anymore so we'll talk about actually how to get your environment variables up and deployed with your",
    "start": "2424029",
    "end": "2430750"
  },
  {
    "text": "service ok so now we kind of have an idea of how we can at least think about working with environment variables",
    "start": "2430750",
    "end": "2436809"
  },
  {
    "text": "locally with this with this 10 file now how do we actually manage different deployment environments for lambda",
    "start": "2436809",
    "end": "2444160"
  },
  {
    "text": "functions right you you want to create a micro service on lambda function and you",
    "start": "2444160",
    "end": "2449500"
  },
  {
    "text": "don't necessarily want to push to production right away and you might have more than one development environment",
    "start": "2449500",
    "end": "2454779"
  },
  {
    "text": "you might have staging you might have staging one you might have staging two right you might have multiple teams working on a specific service so the",
    "start": "2454779",
    "end": "2461619"
  },
  {
    "text": "easiest way that we found to actually manage this is just by having in don't check these into into version control",
    "start": "2461619",
    "end": "2467950"
  },
  {
    "text": "but away but by managing different end files and having so for example we have",
    "start": "2467950",
    "end": "2473619"
  },
  {
    "text": "a development environment of staging in a prod environment so just pre fixed end with dev gem the staging NFL project you",
    "start": "2473619",
    "end": "2480339"
  },
  {
    "text": "write a deploy command I like to write a lot of stuff just natively with command-line tools just write",
    "start": "2480339",
    "end": "2485410"
  },
  {
    "text": "command-line tools in JavaScript so I might build our deploy commands in j/s I mean node.js father but your DevOps team",
    "start": "2485410",
    "end": "2492430"
  },
  {
    "text": "can configure that however they want the idea here is that when you deploy to lambda your deployment pipeline should",
    "start": "2492430",
    "end": "2498759"
  },
  {
    "text": "be able to accept some sort of n flag and you can set prod to it and then it knows to grab the dot prod just based on",
    "start": "2498759",
    "end": "2504789"
  },
  {
    "text": "the string value prod it knows to grab the the production environment variables package that into your system now this",
    "start": "2504789",
    "end": "2512049"
  },
  {
    "text": "is the old way of doing it and you'd actually put it in a dot n file on AWS",
    "start": "2512049",
    "end": "2517119"
  },
  {
    "text": "lambda nowadays you can actually as a hundred days ago you can actually update the function configuration and set the",
    "start": "2517119",
    "end": "2523809"
  },
  {
    "text": "environment variables that way and so actually getting your service to",
    "start": "2523809",
    "end": "2528849"
  },
  {
    "text": "lamda from this deployment command that you're gonna have to configure yourself you're gonna have to run some functions here from the AWS SDK that's create",
    "start": "2528849",
    "end": "2536229"
  },
  {
    "text": "function update function code update function configuration how do we think about naming these on on AWS lamda",
    "start": "2536229",
    "end": "2543210"
  },
  {
    "text": "instead of just calling your service your service well we can use lamda versioning or what we do because it's",
    "start": "2543210",
    "end": "2550450"
  },
  {
    "text": "easier to manage from a DevOps perspective sorry is just out of suffix indicating the environment that your",
    "start": "2550450",
    "end": "2557079"
  },
  {
    "text": "service is located in so if your service is named your service and you're pushing its production you set underscore prod",
    "start": "2557079",
    "end": "2562569"
  },
  {
    "text": "this way when your DevOps team or your software developers are looking at all of the functions available to you they",
    "start": "2562569",
    "end": "2569200"
  },
  {
    "text": "can immediately see okay this is production I'm not going to touch this I don't wanna mess with this but there's a few development environments here maybe",
    "start": "2569200",
    "end": "2574660"
  },
  {
    "text": "we didn't clean up we can delete that it's not a problem it's just for Drakh ability and really ease of use so your",
    "start": "2574660",
    "end": "2580119"
  },
  {
    "text": "team is not freaking out wondering what's in production and what's ready and what's not right so from there we go to two micro service",
    "start": "2580119",
    "end": "2586779"
  },
  {
    "text": "versioning how do we how do we deal with versioning well AWS slam that actually provides immutable service versioning which is",
    "start": "2586779",
    "end": "2593380"
  },
  {
    "text": "great now we want to map some sort of client request like your service slash a",
    "start": "2593380",
    "end": "2598719"
  },
  {
    "text": "specific version to the specific lambda version right now you might want to name those versions you might want to name",
    "start": "2598719",
    "end": "2605380"
  },
  {
    "text": "them using like semantic versioning which in nodejs land is the kind of like that it's the de facto standard for how",
    "start": "2605380",
    "end": "2610630"
  },
  {
    "text": "people do versioning so how do you how do you really create that mapping well on your deployment instead of specifying",
    "start": "2610630",
    "end": "2616269"
  },
  {
    "text": "your DevOps engineer will typically be responsible for building a command-line tool like this now your deployed command",
    "start": "2616269",
    "end": "2623349"
  },
  {
    "text": "would take a flag like version and you'd specify a version now how you actually deal with this using the AWS SDK is",
    "start": "2623349",
    "end": "2630279"
  },
  {
    "text": "you'd set the publish in when you create a function or update your function code you set the publish configuration to",
    "start": "2630279",
    "end": "2635589"
  },
  {
    "text": "true and then lambda is automatically going to create an immutable version of your service for you now you're gonna",
    "start": "2635589",
    "end": "2641619"
  },
  {
    "text": "get a number on this just an integer value like 1 2 3 the number that's essentially been published data because",
    "start": "2641619",
    "end": "2646719"
  },
  {
    "text": "lambda now you can create aliases string aliases for any version number so",
    "start": "2646719",
    "end": "2652569"
  },
  {
    "text": "that would be like the standard way to do something I say you want to name your version Keith you could create an alias",
    "start": "2652569",
    "end": "2658420"
  },
  {
    "text": "that then map Keith's diverging Elantra version 2 or version 3 but oftentimes you're gonna want to do something that",
    "start": "2658420",
    "end": "2663849"
  },
  {
    "text": "doesn't match that regex pattern that create alias supports so you're gonna want to do something a little bit more",
    "start": "2663849",
    "end": "2669160"
  },
  {
    "text": "complex here so this uses cember as an example now a semantic version might be 1.0.0",
    "start": "2669160",
    "end": "2676569"
  },
  {
    "text": "for your first major major awesome production release same sort of steps you'd set published it true you're gonna",
    "start": "2676569",
    "end": "2683619"
  },
  {
    "text": "get some number back as the version number but instead of dealing with the create alias function what you're gonna",
    "start": "2683619",
    "end": "2689319"
  },
  {
    "text": "do is you're gonna create a dynamo DB mapping so you're gonna have a dynamo DB service setup and basically just create",
    "start": "2689319",
    "end": "2695230"
  },
  {
    "text": "a mapping saying this service with this string 1.0.0 is going to map to this specific lambda service and this version",
    "start": "2695230",
    "end": "2702490"
  },
  {
    "text": "number now this changes your architecture a little bit because this doesn't use API gateway in the standard",
    "start": "2702490",
    "end": "2707920"
  },
  {
    "text": "way and this actually sets you up in a more in order to make use of this you",
    "start": "2707920",
    "end": "2713349"
  },
  {
    "text": "have to kind of set up a more hybrid approach where you get client request your service slash version you'd have",
    "start": "2713349",
    "end": "2718480"
  },
  {
    "text": "your DNS coming in from about 53 that's like F dot your domain comm and that's gonna hit an elastic beanstalk gateway",
    "start": "2718480",
    "end": "2724900"
  },
  {
    "text": "now this is a gateway for scalability you might actually want to fill this in node you can build a gateway in something",
    "start": "2724900",
    "end": "2730960"
  },
  {
    "text": "like node that's basically gonna take the client request determine what version you're trying to hit and then it's gonna talk to dynamo DB really",
    "start": "2730960",
    "end": "2736990"
  },
  {
    "text": "quickly and say hey what lambda micro service are we trying to get here it's going to get that information from",
    "start": "2736990",
    "end": "2742630"
  },
  {
    "text": "dynamodb execute your service on AWS lambda and then return everything back to your client and this is kind of what",
    "start": "2742630",
    "end": "2749230"
  },
  {
    "text": "the hybrid architecture with this what this really looks like now finally the last point I made was legacy",
    "start": "2749230",
    "end": "2757660"
  },
  {
    "text": "application interoperability this is actually the easiest part and this is the the wonderful thing the awesome",
    "start": "2757660",
    "end": "2762970"
  },
  {
    "text": "thing about server lists one there's the AWS SDK so you can use the tools that AWS has already built in in a number of",
    "start": "2762970",
    "end": "2770319"
  },
  {
    "text": "different languages to just call lambda invoke and give your service name any time you want to execute a function now",
    "start": "2770319",
    "end": "2776260"
  },
  {
    "text": "if you've kind of followed my advice here um and there's some stuff we've glossed over like how to like what your DevOps engineers doing when they're",
    "start": "2776260",
    "end": "2782170"
  },
  {
    "text": "creating these deployment scripts etcetera but if you've kind of followed our pattern for how we do things you have F dot your domain com that's",
    "start": "2782170",
    "end": "2788859"
  },
  {
    "text": "mapping to most of your not all of your publicly available micro services so you can now access all of these",
    "start": "2788859",
    "end": "2795509"
  },
  {
    "text": "services just over HTTP so every every language that you work in is going to have or the vast majority are going to",
    "start": "2795509",
    "end": "2801690"
  },
  {
    "text": "have some sort of HTTP library for you to really easily just make a get or a post request or what have you to your",
    "start": "2801690",
    "end": "2808109"
  },
  {
    "text": "micro service based on the Gateway that you've set up for your services so really easy to hook into your old legacy",
    "start": "2808109",
    "end": "2814680"
  },
  {
    "text": "applications whether it's an old rails app a Python app you name it easy to",
    "start": "2814680",
    "end": "2819749"
  },
  {
    "text": "connect to so just as a recap what we've gone over here for practical service development",
    "start": "2819749",
    "end": "2825900"
  },
  {
    "text": "and the organizational tooling around this we've covered sharing we've covered discovery kind of at the same time",
    "start": "2825900",
    "end": "2831859"
  },
  {
    "text": "environments deployment pipelines micro service versioning how you can think about that and finally legacy",
    "start": "2831859",
    "end": "2837900"
  },
  {
    "text": "application interoperability and the tools we use to cover this was I mean",
    "start": "2837900",
    "end": "2843299"
  },
  {
    "text": "the full AWS feature said right route 53 API gateway AWS lambda of course for",
    "start": "2843299",
    "end": "2848670"
  },
  {
    "text": "service the the cornerstone elastic beanstalk if you want to build a hybrid gateway DynamoDB if you want to if you",
    "start": "2848670",
    "end": "2857609"
  },
  {
    "text": "want to deal with this hybrid gateway and do some some more computation on the gateway side and then obviously nodejs tools and setting up your own",
    "start": "2857609",
    "end": "2863400"
  },
  {
    "text": "command-line tools etc now the alternative you you're welcome to build this and I'm welcome to talk sorry I'm",
    "start": "2863400",
    "end": "2868979"
  },
  {
    "text": "happy to talk to any one of you after this talk is over by email in person whatever but how you can start setting",
    "start": "2868979",
    "end": "2874079"
  },
  {
    "text": "this up within your organization the alternative is you can work with",
    "start": "2874079",
    "end": "2881690"
  },
  {
    "text": "the solution that we've already built with with standard lip we literally take",
    "start": "2881690",
    "end": "2886799"
  },
  {
    "text": "care of all of this for you to make it super super seamless and easy I've talked about our command-line tools here",
    "start": "2886799",
    "end": "2892589"
  },
  {
    "text": "super easy to build super easy to test you can test your services locally or in the cloud just using a single earth",
    "start": "2892589",
    "end": "2897719"
  },
  {
    "text": "command it's essentially just wrapping curl it's very straightforward very simple we're very proud and excited",
    "start": "2897719",
    "end": "2903479"
  },
  {
    "text": "about what we've developed here and really we take care of all six of these these concerns that I've spoken to you",
    "start": "2903479",
    "end": "2910019"
  },
  {
    "text": "about now so to finish up and before I give give you",
    "start": "2910019",
    "end": "2915509"
  },
  {
    "text": "back to Paul here like I said I'm Keith founder and CEO of poly bid we're building standard Lib we wouldn't be",
    "start": "2915509",
    "end": "2921989"
  },
  {
    "text": "anywhere without without our developer community so I invite you to join become a part of it we're really happy you",
    "start": "2921989",
    "end": "2928420"
  },
  {
    "text": "excited to be presenting here at AWS reinvents happy and excited to be aligned with Amazon where your library",
    "start": "2928420",
    "end": "2933759"
  },
  {
    "text": "for micro services you can download a copy of this talk at standard Lib comm slash reinvent - 2016 if you want to see",
    "start": "2933759",
    "end": "2941440"
  },
  {
    "text": "a copy of my portion of the talk you can follow us on twitter at poli bit or follow me specifically at Keith WH o R",
    "start": "2941440",
    "end": "2948549"
  },
  {
    "text": "thank you very much and now I will turn it back to - Paul thanks everybody thanks Keith",
    "start": "2948549",
    "end": "2956400"
  },
  {
    "text": "all right guys just want to leave you with a final thought",
    "start": "2959160",
    "end": "2964499"
  },
  {
    "text": "when you guys are leaving reinvent on Friday or Saturday whatever",
    "start": "2964499",
    "end": "2970390"
  },
  {
    "text": "you guys are taking off and you're going into your next architecture planning session next week I would encourage you",
    "start": "2970390",
    "end": "2977289"
  },
  {
    "text": "to think about these sort of eight concepts and spend the time really",
    "start": "2977289",
    "end": "2983920"
  },
  {
    "text": "defining the boundaries and what's the most important for that workload that you're about to try to tackle and I",
    "start": "2983920",
    "end": "2990190"
  },
  {
    "text": "think what you'll find is that a well-defined micro-service will imply its own architecture",
    "start": "2990190",
    "end": "2997980"
  },
  {
    "text": "Keith and I will be probably right outside of the theater after this to take any questions it's just kind of too",
    "start": "2997980",
    "end": "3004079"
  },
  {
    "text": "big of a room to like actively take questions and things like that so we'll be right outside if you guys want to asks any questions or come get a card or",
    "start": "3004079",
    "end": "3010980"
  },
  {
    "text": "come talk to us about serverless please take your time and fill out the survey",
    "start": "3010980",
    "end": "3016499"
  },
  {
    "text": "if you don't mind let us know how we did and so we can try to make this better for you guys thank you very much and",
    "start": "3016499",
    "end": "3021749"
  },
  {
    "text": "look forward to meeting some of you guys out front",
    "start": "3021749",
    "end": "3025849"
  }
]