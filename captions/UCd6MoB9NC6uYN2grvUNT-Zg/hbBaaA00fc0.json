[
  {
    "text": "[Music]",
    "start": "410",
    "end": "6519"
  },
  {
    "text": "[Music]",
    "start": "8630",
    "end": "11999"
  },
  {
    "text": "hello",
    "start": "12880",
    "end": "13440"
  },
  {
    "text": "i'm eddie and when cloud support",
    "start": "13440",
    "end": "15519"
  },
  {
    "text": "engineer here at the aws",
    "start": "15519",
    "end": "17760"
  },
  {
    "text": "office in sydney today i'm going to show",
    "start": "17760",
    "end": "20800"
  },
  {
    "text": "you a series of",
    "start": "20800",
    "end": "21840"
  },
  {
    "text": "different steps explaining how to",
    "start": "21840",
    "end": "24160"
  },
  {
    "text": "troubleshoot",
    "start": "24160",
    "end": "25119"
  },
  {
    "text": "raid exceeded errors when invoking aws",
    "start": "25119",
    "end": "28080"
  },
  {
    "text": "lambda functions",
    "start": "28080",
    "end": "29359"
  },
  {
    "text": "let's get started after logging into",
    "start": "29359",
    "end": "32800"
  },
  {
    "text": "the aws management console navigate",
    "start": "32800",
    "end": "36480"
  },
  {
    "text": "to the lambda console",
    "start": "36480",
    "end": "40160"
  },
  {
    "text": "if you have a reserved concurrence set",
    "start": "40160",
    "end": "42879"
  },
  {
    "text": "on your lambda function",
    "start": "42879",
    "end": "44559"
  },
  {
    "text": "then on monitoring tab check the",
    "start": "44559",
    "end": "47039"
  },
  {
    "text": "concurrency metric if you have",
    "start": "47039",
    "end": "49120"
  },
  {
    "text": "hit the reserve concurrency set at",
    "start": "49120",
    "end": "52160"
  },
  {
    "text": "any point you can open the mac in",
    "start": "52160",
    "end": "55680"
  },
  {
    "text": "amazon cloud watch for further",
    "start": "55680",
    "end": "57920"
  },
  {
    "text": "granularity",
    "start": "57920",
    "end": "59359"
  },
  {
    "text": "note that concurrency use the maximum",
    "start": "59359",
    "end": "61680"
  },
  {
    "text": "statistic",
    "start": "61680",
    "end": "62640"
  },
  {
    "text": "such if required adjust the reserve",
    "start": "62640",
    "end": "65920"
  },
  {
    "text": "concurrence",
    "start": "65920",
    "end": "66720"
  },
  {
    "text": "to an appropriate value to avoid",
    "start": "66720",
    "end": "69200"
  },
  {
    "text": "throttling",
    "start": "69200",
    "end": "71600"
  },
  {
    "text": "it's also possible that you have used",
    "start": "71600",
    "end": "74960"
  },
  {
    "text": "the throttle",
    "start": "74960",
    "end": "75759"
  },
  {
    "text": "button to set reserve and concurrency to",
    "start": "75759",
    "end": "78560"
  },
  {
    "text": "zero",
    "start": "78560",
    "end": "79520"
  },
  {
    "text": "this cause your function to be trotter",
    "start": "79520",
    "end": "83520"
  },
  {
    "text": "using the get function api or the aws",
    "start": "83520",
    "end": "86799"
  },
  {
    "text": "management console to review if the",
    "start": "86799",
    "end": "89360"
  },
  {
    "text": "reservoir concurs",
    "start": "89360",
    "end": "90880"
  },
  {
    "text": "is set to zero",
    "start": "90880",
    "end": "94000"
  },
  {
    "text": "using the aws management console",
    "start": "94000",
    "end": "97119"
  },
  {
    "text": "are the butt function concurrence to",
    "start": "97119",
    "end": "99840"
  },
  {
    "text": "increase",
    "start": "99840",
    "end": "100560"
  },
  {
    "text": "the value above zero",
    "start": "100560",
    "end": "104398"
  },
  {
    "text": "if your throttle are not related with",
    "start": "105040",
    "end": "107600"
  },
  {
    "text": "reservoir concurrence",
    "start": "107600",
    "end": "109280"
  },
  {
    "text": "then choose dashboard and check",
    "start": "109280",
    "end": "112320"
  },
  {
    "text": "the original concurrence limit for",
    "start": "112320",
    "end": "115119"
  },
  {
    "text": "lambda",
    "start": "115119",
    "end": "117439"
  },
  {
    "text": "scroll down to account level matrix and",
    "start": "117920",
    "end": "120880"
  },
  {
    "text": "verify",
    "start": "120880",
    "end": "121759"
  },
  {
    "text": "if the maximum concurrence show data",
    "start": "121759",
    "end": "124560"
  },
  {
    "text": "points",
    "start": "124560",
    "end": "125280"
  },
  {
    "text": "close to the regional concurrence limit",
    "start": "125280",
    "end": "128319"
  },
  {
    "text": "which corresponds to data points in the",
    "start": "128319",
    "end": "131440"
  },
  {
    "text": "chart",
    "start": "131440",
    "end": "132000"
  },
  {
    "text": "graph as the state previous",
    "start": "132000",
    "end": "135280"
  },
  {
    "text": "you can open the magic in cloud watch",
    "start": "135280",
    "end": "137680"
  },
  {
    "text": "for further knowledge",
    "start": "137680",
    "end": "140640"
  },
  {
    "text": "note that concurrence uses the maximum",
    "start": "140640",
    "end": "143440"
  },
  {
    "text": "statistics setting",
    "start": "143440",
    "end": "144959"
  },
  {
    "text": "but throttle uses the same setting",
    "start": "144959",
    "end": "148400"
  },
  {
    "text": "check for scaling pattern and verify if",
    "start": "148400",
    "end": "151200"
  },
  {
    "text": "the throttle around the initial brush",
    "start": "151200",
    "end": "153760"
  },
  {
    "text": "limit or around the scaling limit",
    "start": "153760",
    "end": "156959"
  },
  {
    "text": "of 500 per minute you should",
    "start": "156959",
    "end": "160239"
  },
  {
    "text": "see a certain spike in concurrence",
    "start": "160239",
    "end": "163599"
  },
  {
    "text": "followed by a slight step-by-step",
    "start": "163599",
    "end": "167760"
  },
  {
    "text": "increase while reviewing a one minute",
    "start": "167760",
    "end": "170959"
  },
  {
    "text": "aggregate of concurrence in cloudwatch",
    "start": "170959",
    "end": "174959"
  },
  {
    "text": "by default the dashboard cloud watch",
    "start": "174959",
    "end": "178000"
  },
  {
    "text": "shows a 5 minute aggregate",
    "start": "178000",
    "end": "181840"
  },
  {
    "text": "note that the burst limit is different",
    "start": "181840",
    "end": "184319"
  },
  {
    "text": "for different regions",
    "start": "184319",
    "end": "186080"
  },
  {
    "text": "check the aws lambda function scaling",
    "start": "186080",
    "end": "189360"
  },
  {
    "text": "page",
    "start": "189360",
    "end": "189920"
  },
  {
    "text": "for more details about the burst limits",
    "start": "189920",
    "end": "194239"
  },
  {
    "text": "if you see frequent throttles due to",
    "start": "194239",
    "end": "196879"
  },
  {
    "text": "scaling",
    "start": "196879",
    "end": "197760"
  },
  {
    "text": "check for a spike in invocation matrix",
    "start": "197760",
    "end": "200800"
  },
  {
    "text": "spiking incoming traffic can lead to",
    "start": "200800",
    "end": "203280"
  },
  {
    "text": "constant",
    "start": "203280",
    "end": "204000"
  },
  {
    "text": "scaling up and down of lambda",
    "start": "204000",
    "end": "207040"
  },
  {
    "text": "which results in more throttle and have",
    "start": "207040",
    "end": "209920"
  },
  {
    "text": "your application",
    "start": "209920",
    "end": "211120"
  },
  {
    "text": "even out the traffic to avoid",
    "start": "211120",
    "end": "213840"
  },
  {
    "text": "constrained spikes",
    "start": "213840",
    "end": "215280"
  },
  {
    "text": "wherever possible or you might want to",
    "start": "215280",
    "end": "218319"
  },
  {
    "text": "use",
    "start": "218319",
    "end": "218720"
  },
  {
    "text": "provisional concurrence to deal with",
    "start": "218720",
    "end": "221360"
  },
  {
    "text": "spiky",
    "start": "221360",
    "end": "222159"
  },
  {
    "text": "traffic",
    "start": "222159",
    "end": "224640"
  },
  {
    "text": "verify the error matrix of your lambda",
    "start": "225280",
    "end": "228720"
  },
  {
    "text": "functions",
    "start": "228720",
    "end": "229760"
  },
  {
    "text": "a spike in errors can lead to retries",
    "start": "229760",
    "end": "233200"
  },
  {
    "text": "and cause an increase in overall",
    "start": "233200",
    "end": "235920"
  },
  {
    "text": "invocations",
    "start": "235920",
    "end": "236799"
  },
  {
    "text": "specifically for asynchronous",
    "start": "236799",
    "end": "239840"
  },
  {
    "text": "invokes this can lead to",
    "start": "239840",
    "end": "243200"
  },
  {
    "text": "increase in concurrence use",
    "start": "243200",
    "end": "246560"
  },
  {
    "text": "codewatch logs to identify and eliminate",
    "start": "246560",
    "end": "250080"
  },
  {
    "text": "errors and make sure that your code",
    "start": "250080",
    "end": "253120"
  },
  {
    "text": "handles exceptions you have different",
    "start": "253120",
    "end": "256560"
  },
  {
    "text": "log groups for different functions",
    "start": "256560",
    "end": "261040"
  },
  {
    "text": "check for spike in duration matrix for",
    "start": "261040",
    "end": "263680"
  },
  {
    "text": "your functions",
    "start": "263680",
    "end": "264800"
  },
  {
    "text": "concurrency depends on function duration",
    "start": "264800",
    "end": "269600"
  },
  {
    "text": "use aws x-ray and lambda",
    "start": "269600",
    "end": "272880"
  },
  {
    "text": "cloud watch logs to isolate the reason",
    "start": "272880",
    "end": "276160"
  },
  {
    "text": "for the duration increase",
    "start": "276160",
    "end": "279360"
  },
  {
    "text": "as a best spreads we try the throttle",
    "start": "279360",
    "end": "282160"
  },
  {
    "text": "requests",
    "start": "282160",
    "end": "283120"
  },
  {
    "text": "by using exponential back off as much as",
    "start": "283120",
    "end": "286080"
  },
  {
    "text": "possible",
    "start": "286080",
    "end": "286960"
  },
  {
    "text": "for asynchronous invocations you can",
    "start": "286960",
    "end": "289520"
  },
  {
    "text": "configure",
    "start": "289520",
    "end": "290240"
  },
  {
    "text": "the maximum number of retries in",
    "start": "290240",
    "end": "292880"
  },
  {
    "text": "function",
    "start": "292880",
    "end": "293840"
  },
  {
    "text": "level thanks for watching and happy",
    "start": "293840",
    "end": "297360"
  },
  {
    "text": "cloud computing from all of us",
    "start": "297360",
    "end": "299280"
  },
  {
    "text": "here at aws",
    "start": "299280",
    "end": "308800"
  }
]