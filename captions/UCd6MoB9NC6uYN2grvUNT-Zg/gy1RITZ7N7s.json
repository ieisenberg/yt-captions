[
  {
    "text": "Hi I'm Peter. Welcome \nto 'Back to Basics'. I don't know about you but I'm  ",
    "start": "6699",
    "end": "11280"
  },
  {
    "text": "the type of person that needs three alarms to wake \nup. I'll set up my system so that I have my first  ",
    "start": "11280",
    "end": "16560"
  },
  {
    "text": "alarm, and then I'll have my second and third alarm \nabout five minutes later. I do this so that I don't  ",
    "start": "16560",
    "end": "22080"
  },
  {
    "text": "have to rely on myself to hit that snooze button \nor set up an alarm while I'm trying to wake up.  ",
    "start": "22080",
    "end": "27300"
  },
  {
    "text": "What does this have to do with AWS? Well at AWS we \nwould call this system a statically stable system.  ",
    "start": "28140",
    "end": "34680"
  },
  {
    "text": "Static stability means your system doesn't have \nto react to or do anything different to make up  ",
    "start": "35400",
    "end": "42300"
  },
  {
    "text": "for any lost functionality. The things involved \nto make changes to a system are control plane  ",
    "start": "42300",
    "end": "48780"
  },
  {
    "text": "actions like creating a new EC2 instance if one \nfails. In my case, that's creating a new alarm in  ",
    "start": "48780",
    "end": "57059"
  },
  {
    "text": "my half asleep state which runs the risk of \nme falling asleep with the phone in my hand.  ",
    "start": "57060",
    "end": "61980"
  },
  {
    "text": "Instead, the data plane are the things that keep \nrunning like a running EC2 instance or my second  ",
    "start": "62640",
    "end": "70560"
  },
  {
    "text": "and third alarm that are already set up and \nready to go. Control plane actions can have so  ",
    "start": "70560",
    "end": "77100"
  },
  {
    "text": "many moving parts which lowers their chance of \nsuccess, especially during a failure. So how do we  ",
    "start": "77100",
    "end": "83460"
  },
  {
    "text": "make our systems more resilient? We can rely on the \ndata plane to isolate problem areas. You can create  ",
    "start": "83460",
    "end": "90540"
  },
  {
    "text": "this isolation with Availability Zones. You can \ndesign your system to isolate traffic within an  ",
    "start": "90540",
    "end": "97860"
  },
  {
    "text": "AZ using a circuit breaker pattern. You can close a \ncircuit to prevent requests from entering AZs with  ",
    "start": "97860",
    "end": "105360"
  },
  {
    "text": "the failure. This helps isolate the failure within \nan AZ and prevent resources and healthy ones from  ",
    "start": "105360",
    "end": "112320"
  },
  {
    "text": "interacting with the failed ones. Let's see how \nthis plays out in a load balance application.  ",
    "start": "112320",
    "end": "117720"
  },
  {
    "text": "To do this you'll want to turn off cross-zone \nload balancing. Although it's a common pattern to  ",
    "start": "118800",
    "end": "125520"
  },
  {
    "text": "use cross-zone load balancing, the downside here \nis that it prevents AZ isolation. It's hard to  ",
    "start": "125520",
    "end": "132959"
  },
  {
    "text": "pinpoint where a host is failing because traffic \ngoes to all AZs. We can't turn on the circuit  ",
    "start": "132960",
    "end": "139980"
  },
  {
    "text": "breaker without bringing the whole system down\nif we don't know where the problem is. So instead,  ",
    "start": "139980",
    "end": "146040"
  },
  {
    "text": "we'll turn cross-zone load balancing off to isolate \nfailures within an AZ. We can use this pattern to  ",
    "start": "146040",
    "end": "153480"
  },
  {
    "text": "avoid the AZ with the failure entirely using data \nplane actions. Just like how I avoid having to hit  ",
    "start": "153480",
    "end": "160080"
  },
  {
    "text": "the snooze button or create a new alarm. How do \nyou find failures? Health checks from services  ",
    "start": "160080",
    "end": "166560"
  },
  {
    "text": "like elastic load balancers or Amazon Route 53, can \nhelp detect hard failures like unresponsive hosts.  ",
    "start": "166560",
    "end": "174360"
  },
  {
    "text": "But not all failures are hard failures, being able \nto detect gray failures like software bugs, packet  ",
    "start": "174960",
    "end": "182940"
  },
  {
    "text": "loss, or out of control latency depend on how well \nyou instrument metrics. You can write a small piece  ",
    "start": "182940",
    "end": "190380"
  },
  {
    "text": "of code with Amazon CloudWatch Synthetics to \nconstantly make calls against your endpoint.  ",
    "start": "190380",
    "end": "195900"
  },
  {
    "text": "In our case you'll be able to see the zonal \nDNS name of our load balancer. You can then  ",
    "start": "196620",
    "end": "203459"
  },
  {
    "text": "run canary tests against each AZ and compare \nthem actively to see which AZs are abnormal.  ",
    "start": "203460",
    "end": "210420"
  },
  {
    "text": "Then we can remove the problem AZ entirely from \nthe system using the data plane. This turns a  ",
    "start": "211320",
    "end": "218640"
  },
  {
    "text": "gray failure into a hard failure you can use \nzonal shift with Route 53 Application Recovery  ",
    "start": "218640",
    "end": "226560"
  },
  {
    "text": "Controller to isolate and avoid the AZ with the \nfailure. When you start a zone shift traffic will  ",
    "start": "226560",
    "end": "234060"
  },
  {
    "text": "start to drain away from the AZ you want to avoid \nand then stop entirely. You don't have to spend  ",
    "start": "234060",
    "end": "240480"
  },
  {
    "text": "time looking at logs trying to figure out what \nthe problem is, you simply just shift it away using  ",
    "start": "240480",
    "end": "246599"
  },
  {
    "text": "the data plane. Eventually you figure out what the \nissue is and cancel the zone shift call. Things go  ",
    "start": "246600",
    "end": "253860"
  },
  {
    "text": "back to normal again, you assumed any gray failure \nto be a hard failure, isolated the issue, and used  ",
    "start": "253860",
    "end": "260640"
  },
  {
    "text": "data plane actions to recover from the failure. \nThis is an example of a statically stable system.  ",
    "start": "260640",
    "end": "267240"
  },
  {
    "text": "If you go this route, DNS will essentially \ndictate how much load shows up in each AZ. You  ",
    "start": "268500",
    "end": "275580"
  },
  {
    "text": "may experience some unevenness, so it's important \nto make sure you have equal capacity in all AZs.  ",
    "start": "275580",
    "end": "282180"
  },
  {
    "text": "Designing a system based on the minimum healthy \ntarget count for your workload is a good way to  ",
    "start": "282780",
    "end": "288720"
  },
  {
    "text": "measure that. Also plan so that you have \nenough capacity to sustain loss of one AZ.  ",
    "start": "288720",
    "end": "295740"
  },
  {
    "text": "If we deliberately take one out, assuming a hard\nfailure, then we want to plan accordingly and  ",
    "start": "296400",
    "end": "302940"
  },
  {
    "text": "tolerate the loss of an AZ. There are lots of \nother examples in the Amazon Builders Library  ",
    "start": "302940",
    "end": "308220"
  },
  {
    "text": "to help you build more resilient systems. \nCheck out the links below to learn more.  ",
    "start": "308220",
    "end": "313320"
  },
  {
    "text": "Thanks for watching 'Back to Basics' and \nsee you next time.",
    "start": "314400",
    "end": "321600"
  }
]