[
  {
    "text": "good morning everyone it's still uh 9:47 in Seattle so good morning and",
    "start": "1040",
    "end": "9040"
  },
  {
    "text": "welcome to deep dive for IoT on AWS my name is Vadim Jalasnikov i'm a dev",
    "start": "9040",
    "end": "17199"
  },
  {
    "text": "manager for IoT platform for AWS so today we're going to focus on a",
    "start": "17199",
    "end": "24400"
  },
  {
    "text": "couple of new capabilities we recently launched um for IoT and in particular",
    "start": "24400",
    "end": "30080"
  },
  {
    "text": "when we were talking about when we're going to talk about these capabilities we'll try to answer these three",
    "start": "30080",
    "end": "35559"
  },
  {
    "text": "questions number one how do I ex extract value from my device data and we'll take",
    "start": "35559",
    "end": "42320"
  },
  {
    "text": "a look at the one of the core components of AWS IoT the rules engine number two",
    "start": "42320",
    "end": "48879"
  },
  {
    "text": "how do I visualize my device data and to address that question we'll actually",
    "start": "48879",
    "end": "54399"
  },
  {
    "text": "talk about how rules engine can integrate with elastic search and cabana and number three how do I",
    "start": "54399",
    "end": "61359"
  },
  {
    "text": "generate predictions based on my device data and for that we're going to do a",
    "start": "61359",
    "end": "66799"
  },
  {
    "text": "demo of the prediction function that we launched last week actually that enables you to connect your IoT rules to the",
    "start": "66799",
    "end": "74640"
  },
  {
    "text": "Amazon machine learning service uh how many of you guys were in the",
    "start": "74640",
    "end": "80560"
  },
  {
    "text": "morning session led by Kyle just so I know whether we need to uh Kyle you were there i remember",
    "start": "80560",
    "end": "87840"
  },
  {
    "text": "whether we need to skip it okay so looks like some people missed it i'm going to do a very um brief overview of what IoT",
    "start": "87840",
    "end": "94479"
  },
  {
    "text": "AWS IoT platform is at the core of the platform we have a a device uh uh device",
    "start": "94479",
    "end": "101360"
  },
  {
    "text": "gateway and that's the component that's responsible for all the routing of messages uh between devices as well as",
    "start": "101360",
    "end": "107600"
  },
  {
    "text": "different components within IoT platform then um another important component of",
    "start": "107600",
    "end": "113360"
  },
  {
    "text": "IoT platform is device shadow and that's the abstraction layer for the developers",
    "start": "113360",
    "end": "118799"
  },
  {
    "text": "to be able to get the recent state of each device and update the state of each device without actually caring about",
    "start": "118799",
    "end": "125680"
  },
  {
    "text": "whether the device is connected or not then we have the um authentication layer",
    "start": "125680",
    "end": "132480"
  },
  {
    "text": "and IoT platform supports TLS mutual authentication between the devices and",
    "start": "132480",
    "end": "138239"
  },
  {
    "text": "the platform meaning we know which device is connecting to us and which account this device corresponds to and",
    "start": "138239",
    "end": "144879"
  },
  {
    "text": "the device knows that the platform it's connecting to is actually AWS IoT uh we",
    "start": "144879",
    "end": "151280"
  },
  {
    "text": "also have the rules engine and that's the component that we're going to focus on um mostly during this session and",
    "start": "151280",
    "end": "158319"
  },
  {
    "text": "then we have device registry that's the service that stores all the metadata for",
    "start": "158319",
    "end": "163360"
  },
  {
    "text": "devices that we have that we know about in our system and lastly we have the control plane which is um all the create",
    "start": "163360",
    "end": "171599"
  },
  {
    "text": "update delete APIs for all the resources within AWS IoT so going back to the question to the",
    "start": "171599",
    "end": "179280"
  },
  {
    "text": "first question that we're going to discuss how do you extract value from device data and the answer is you use",
    "start": "179280",
    "end": "185440"
  },
  {
    "text": "the rules engine clicker okay so to zoom in on the rules",
    "start": "185440",
    "end": "192480"
  },
  {
    "text": "engine uh the rules engine has the following key capabilities first it enables you to",
    "start": "192480",
    "end": "197599"
  },
  {
    "text": "filter messages using certain criteria so you don't have to process noise",
    "start": "197599",
    "end": "202879"
  },
  {
    "text": "second it enables you to transform your messages so you can extract only useful data uh from the messages coming from",
    "start": "202879",
    "end": "209200"
  },
  {
    "text": "your devices thirdly you can react based on messages and we'll talk about it more",
    "start": "209200",
    "end": "215519"
  },
  {
    "text": "um during our later slides then you can move your messages to other",
    "start": "215519",
    "end": "221000"
  },
  {
    "text": "topics you can also move your messages to other systems and this corresponds to",
    "start": "221000",
    "end": "226239"
  },
  {
    "text": "a new capability that we launched last week um which is um using um actually",
    "start": "226239",
    "end": "231440"
  },
  {
    "text": "two weeks ago which is using elastic search and finally you can predict",
    "start": "231440",
    "end": "236640"
  },
  {
    "text": "changes based on trends that you can extract from your messages and that's a capability that we launched last week",
    "start": "236640",
    "end": "243439"
  },
  {
    "text": "and that's integration with Amazon machine learning so before we go any further um",
    "start": "243439",
    "end": "249519"
  },
  {
    "text": "I just want to review quickly what the rule is and you can think of a rule in",
    "start": "249519",
    "end": "254560"
  },
  {
    "text": "the rules engine as a JSON document that controls how rules engine processes different messages",
    "start": "254560",
    "end": "260799"
  },
  {
    "text": "and typically not typically always uh a rule has two uh main components one is",
    "start": "260799",
    "end": "267280"
  },
  {
    "text": "the SQL statement itself it's very similar to DSL it's a custom uh custom",
    "start": "267280",
    "end": "273520"
  },
  {
    "text": "uh SQL um language that we use within the rules engine and the second one is a list of actions",
    "start": "273520",
    "end": "281000"
  },
  {
    "text": "and one rule can have one or more actions which enables you to take action",
    "start": "281000",
    "end": "286400"
  },
  {
    "text": "based on one message uh and take this action um against multiple uh multiple",
    "start": "286400",
    "end": "292840"
  },
  {
    "text": "services so if you're talking about the first group of um capabilities within the rules engine filter and",
    "start": "292840",
    "end": "299560"
  },
  {
    "text": "transform this is how it's implemented in the rule itself so as you can see here in the SQL part of the uh rule uh",
    "start": "299560",
    "end": "307600"
  },
  {
    "text": "you can have a select um uh some elements from the payload and you can",
    "start": "307600",
    "end": "314400"
  },
  {
    "text": "name them differently in this case you select a space ID key under the status",
    "start": "314400",
    "end": "319759"
  },
  {
    "text": "uh key and you name it as a room ID and you only only do it for um for devices",
    "start": "319759",
    "end": "326320"
  },
  {
    "text": "that report the temperature above 50Â° in this case now the second set of capabilities",
    "start": "326320",
    "end": "333680"
  },
  {
    "text": "for the rules engine is reacting and moving messages to other topics and again in this case this is an",
    "start": "333680",
    "end": "341360"
  },
  {
    "text": "example rule um and it shows that in this case we select certain keys from",
    "start": "341360",
    "end": "346880"
  },
  {
    "text": "the payload from the JSON payload we name them differently and then we only",
    "start": "346880",
    "end": "351919"
  },
  {
    "text": "do it for the payloads that have failure set to one what we do next is execute a rule in",
    "start": "351919",
    "end": "359120"
  },
  {
    "text": "this case we execute a republish rule and notice it has two parameters one is the topic which we're going to use to",
    "start": "359120",
    "end": "366160"
  },
  {
    "text": "republish the message and the second one is the role um ro",
    "start": "366160",
    "end": "371560"
  },
  {
    "text": "identifier in the morning Kyle talked about um the security aspect of what we",
    "start": "371560",
    "end": "376960"
  },
  {
    "text": "do i'm not going to go back to the over overall overview of how we um do security but basically in this case the",
    "start": "376960",
    "end": "385199"
  },
  {
    "text": "role that um this particular rule uses enables you to u republish messages",
    "start": "385199",
    "end": "391199"
  },
  {
    "text": "within IoT and finally the next capability or",
    "start": "391199",
    "end": "397919"
  },
  {
    "text": "not finally yet but the next capability of the rules engine is moving messages to other systems and that's where rules",
    "start": "397919",
    "end": "404160"
  },
  {
    "text": "engine actually excels and we consider this as one of or competitive advantages uh today you can move you can",
    "start": "404160",
    "end": "412319"
  },
  {
    "text": "uh transform and move your messages to the following 10 services so I'm not going to read it for",
    "start": "412319",
    "end": "418800"
  },
  {
    "text": "you guys but it's basically all the main services that you want to use to empower your devices um to use the full power of",
    "start": "418800",
    "end": "426400"
  },
  {
    "text": "the cloud of AWS cloud now the second question that we want to",
    "start": "426400",
    "end": "432240"
  },
  {
    "text": "answer and that's one of the demos that we're going to do today is how do I visualize my device",
    "start": "432240",
    "end": "439360"
  },
  {
    "text": "data and the answer is using elastic search integration that we launched I believe two weeks ago three weeks ago",
    "start": "440360",
    "end": "447199"
  },
  {
    "text": "very recently and the basic three steps of",
    "start": "447199",
    "end": "452319"
  },
  {
    "text": "using elastic search integration are this you configure your elastic search domain you use IoT rule to send device",
    "start": "452319",
    "end": "458240"
  },
  {
    "text": "data to the domain and then you can use Kibana to visualize your",
    "start": "458240",
    "end": "463400"
  },
  {
    "text": "data this is an example visualization actually this screenshot was uh taken this morning and uh if we're lucky we're",
    "start": "463400",
    "end": "471120"
  },
  {
    "text": "going to reproduce the screenshot",
    "start": "471120",
    "end": "474800"
  },
  {
    "text": "live can I switch to my laptop please",
    "start": "476360",
    "end": "481400"
  },
  {
    "text": "okay it's a little uh small let's",
    "start": "486280",
    "end": "492639"
  },
  {
    "text": "see okay good so um what I'm showing you guys is the",
    "start": "494919",
    "end": "502960"
  },
  {
    "text": "IoT console and specifically I'm showing uh two things that are currently configured within the IoT console and",
    "start": "502960",
    "end": "509599"
  },
  {
    "text": "one of them is called car and that's the highlighted one i don't I'm not sure",
    "start": "509599",
    "end": "514719"
  },
  {
    "text": "whether you can see it or not let me play with the",
    "start": "514719",
    "end": "519800"
  },
  {
    "text": "font car well trust me it's called car and on the right you can actually see",
    "start": "519800",
    "end": "526160"
  },
  {
    "text": "that uh this particular thing has an empty shadow it also has an MQTT topic",
    "start": "526160",
    "end": "531920"
  },
  {
    "text": "that's associated with shadow updates so if there is a message coming in that",
    "start": "531920",
    "end": "537440"
  },
  {
    "text": "tells us that the state of this particular thing changed then that will update the shadow and in particular IoT",
    "start": "537440",
    "end": "544800"
  },
  {
    "text": "once it receives the update message will actually uh emit a success message to",
    "start": "544800",
    "end": "551480"
  },
  {
    "text": "update success topic so what we're going to do now we're",
    "start": "551480",
    "end": "557519"
  },
  {
    "text": "going to take a look at the Kibbana cluster or elastic search cluster as well that I preconfigured um I",
    "start": "557519",
    "end": "564720"
  },
  {
    "text": "preconfigured it because it takes 10 15 minutes to provision um elastic search",
    "start": "564720",
    "end": "570240"
  },
  {
    "text": "cluster but we will be releasing a blog post that talks about how to provision your elastic search cluster and connect",
    "start": "570240",
    "end": "576240"
  },
  {
    "text": "it to AWS IoT shortly and based on the elastic search",
    "start": "576240",
    "end": "583040"
  },
  {
    "text": "cluster I actually configured a dashboard so this dashboard is right now",
    "start": "583040",
    "end": "588720"
  },
  {
    "text": "empty so if we go back to the um IoT console what I'm going to do is actually",
    "start": "588920",
    "end": "595120"
  },
  {
    "text": "show you the rules and right now I do have a rule um",
    "start": "595120",
    "end": "600959"
  },
  {
    "text": "called publish to elastic search publish to ES that I'm going to destroy",
    "start": "600959",
    "end": "609160"
  },
  {
    "text": "let's see if the gods of life demos like us today I'm going to create a new",
    "start": "612640",
    "end": "621839"
  },
  {
    "text": "rule okay I'm going to call it the same publish to elastic search",
    "start": "630600",
    "end": "640120"
  },
  {
    "text": "i'm going to cheat a little bit and I'm going to get a select statement from my",
    "start": "640399",
    "end": "649600"
  },
  {
    "text": "gist so these are the attributes that I'm going to um",
    "start": "652920",
    "end": "658680"
  },
  {
    "text": "extract i also included the uh the topic so these are the attributes",
    "start": "658680",
    "end": "664560"
  },
  {
    "text": "I'm going to extract from the messages coming in and I also want to",
    "start": "664560",
    "end": "671240"
  },
  {
    "text": "grab my topic so in this case as I mentioned",
    "start": "671240",
    "end": "677720"
  },
  {
    "text": "before as an application updates the shadow itself the messages uh once IoT",
    "start": "677720",
    "end": "683839"
  },
  {
    "text": "platform accepts the messages it will emit a success message to update slash",
    "start": "683839",
    "end": "691440"
  },
  {
    "text": "accepted and finally we're going to use elastic search",
    "start": "694440",
    "end": "702360"
  },
  {
    "text": "uh elastic search action and we're going to choose a domain which is car when you",
    "start": "702480",
    "end": "708399"
  },
  {
    "text": "choose elastic search action in the rules editor um we actually look up uh",
    "start": "708399",
    "end": "714160"
  },
  {
    "text": "domains elastic search domains that you own uh to make sure that you know it's easy for you to enter and what I'm going",
    "start": "714160",
    "end": "721120"
  },
  {
    "text": "to use for an ID is just a time",
    "start": "721120",
    "end": "727279"
  },
  {
    "text": "stamp so notice how how you can enclose uh using the dollar sign you can actually get um function from the rules",
    "start": "728360",
    "end": "736160"
  },
  {
    "text": "engine to your um underlying service that you're going to connect to",
    "start": "736160",
    "end": "743200"
  },
  {
    "text": "i'm going to use car",
    "start": "743200",
    "end": "746720"
  },
  {
    "text": "demo as an index and I'm going to use car as a type and I have role preconfigured",
    "start": "748760",
    "end": "756480"
  },
  {
    "text": "already which is IoT actions role it's important to note that in this case uh this is the role that has a policy that",
    "start": "756480",
    "end": "763360"
  },
  {
    "text": "enables IoT to connect to elastic search without this role and the associated policy IoT platform cannot connect to to",
    "start": "763360",
    "end": "771200"
  },
  {
    "text": "your resources in this case elastic search so we're going to add this action now we're going to create the",
    "start": "771200",
    "end": "779079"
  },
  {
    "text": "rule and there's a mistake so let's see what the mistake",
    "start": "779079",
    "end": "785160"
  },
  {
    "text": "is i think this is it okay",
    "start": "785160",
    "end": "791560"
  },
  {
    "text": "that should do it excellent okay so what we just did we created an IoT rule that",
    "start": "795760",
    "end": "801360"
  },
  {
    "text": "listens on a topic that gets messages once a shadow is successfully",
    "start": "801360",
    "end": "807560"
  },
  {
    "text": "updated now I'm going to switch to my simulator and what I have",
    "start": "807560",
    "end": "813360"
  },
  {
    "text": "here is a simple is a simple NodeJS script that has some access key and",
    "start": "813360",
    "end": "819200"
  },
  {
    "text": "secret key uh don't bother memorizing this this will be um",
    "start": "819200",
    "end": "824480"
  },
  {
    "text": "rotated and it basically what it does it emits the updated uh the updates",
    "start": "825160",
    "end": "831440"
  },
  {
    "text": "regarding a car moving across certain roads and it emits engine temperature",
    "start": "831440",
    "end": "837040"
  },
  {
    "text": "cargo temperature RPM speed and battery as well as",
    "start": "837040",
    "end": "842079"
  },
  {
    "text": "pressure so let's see if it's going to work",
    "start": "843800",
    "end": "849399"
  },
  {
    "text": "all right so it's emitting something so the sending part works let's see if shadow got updated",
    "start": "856560",
    "end": "862800"
  },
  {
    "text": "here we go so what you're seeing here is the latest latest status of the physical",
    "start": "862800",
    "end": "868560"
  },
  {
    "text": "device that would be actually in the field and you see the um all the keys",
    "start": "868560",
    "end": "874000"
  },
  {
    "text": "all the parameters of this device now let's see if we get here we go so",
    "start": "874000",
    "end": "880720"
  },
  {
    "text": "what happened here is we create configured a rule that actually extracted data from the updated shadow",
    "start": "880720",
    "end": "887920"
  },
  {
    "text": "and then send this data to elastic search and then I had a dashboard configured uh in Kibbana that actually",
    "start": "887920",
    "end": "894000"
  },
  {
    "text": "gets updated every five every 5 seconds let's see if we can see how the",
    "start": "894000",
    "end": "900320"
  },
  {
    "text": "car is traveling all right so we're around",
    "start": "900320",
    "end": "907279"
  },
  {
    "text": "Topica and it will go all the way to Denver I",
    "start": "909079",
    "end": "914079"
  },
  {
    "text": "believe all right and as you can see this is live data",
    "start": "920839",
    "end": "928399"
  },
  {
    "text": "coming from the device all the way through IoT platform all the way to Elastic Search and",
    "start": "928399",
    "end": "935839"
  },
  {
    "text": "Kibana all right I'm going to stop this now um can we switch back to the presentation",
    "start": "938839",
    "end": "946240"
  },
  {
    "text": "please all right now for the third question that uh I wanted to address",
    "start": "949079",
    "end": "954560"
  },
  {
    "text": "today is how do we generate predictions based on um based on Amazon machine",
    "start": "954560",
    "end": "962000"
  },
  {
    "text": "learning and for this particular example to illustrate this particular um capability we're going to use simulated",
    "start": "962120",
    "end": "968639"
  },
  {
    "text": "data set that we actually generated uh with the assumption that we have a",
    "start": "968639",
    "end": "974079"
  },
  {
    "text": "device that has some wear and is going to fail at some point uh we don't know",
    "start": "974079",
    "end": "979759"
  },
  {
    "text": "how the sensors on this device actually behave relative to the device um being",
    "start": "979759",
    "end": "986399"
  },
  {
    "text": "about to fail what we do know is um they related somehow and actually we created",
    "start": "986399",
    "end": "993680"
  },
  {
    "text": "a simulation where we have seven sensors one of them is completely random no relationship to the actual wear interior",
    "start": "993680",
    "end": "999839"
  },
  {
    "text": "of the device and we generated both the uh the um uh train set as well as the",
    "start": "999839",
    "end": "1006800"
  },
  {
    "text": "test set so why is it an important problem to solve um turns out that it's a very",
    "start": "1006800",
    "end": "1014240"
  },
  {
    "text": "tricky problem to solve because if you predict a failure too soon then you might be replacing a part that's",
    "start": "1014240",
    "end": "1020519"
  },
  {
    "text": "completely completely viable and you'll be losing money but if you don't predict",
    "start": "1020519",
    "end": "1025918"
  },
  {
    "text": "at all then you're generating risk so if it's an a plane engine u people might",
    "start": "1025919",
    "end": "1032400"
  },
  {
    "text": "get killed so last week we introduced Amazon",
    "start": "1032400",
    "end": "1038798"
  },
  {
    "text": "machine learning predict function and the sequence of events or",
    "start": "1038799",
    "end": "1043839"
  },
  {
    "text": "the sequence of steps to enable Amazon machine learning predict function is very simple you use an IoT rule to",
    "start": "1043839",
    "end": "1049600"
  },
  {
    "text": "forward device data to S3 then you train your Amazon machine learning model using",
    "start": "1049600",
    "end": "1055120"
  },
  {
    "text": "this test set or using this training set let me go back um then you use another",
    "start": "1055120",
    "end": "1061600"
  },
  {
    "text": "rule to actually obtain predicted values from real-time prediction endpoint in Amazon machine learning um and then you",
    "start": "1061600",
    "end": "1067919"
  },
  {
    "text": "can emit for example cloudatch metric or cloudatch alarm and then you can also emit using a",
    "start": "1067919",
    "end": "1074880"
  },
  {
    "text": "different rule you can also emit details of a predicted",
    "start": "1074880",
    "end": "1079200"
  },
  {
    "text": "failure um this is the syntax of this function it's very straightforward you",
    "start": "1080440",
    "end": "1085520"
  },
  {
    "text": "basically have machine learning predict and you give it a name of your um of",
    "start": "1085520",
    "end": "1092160"
  },
  {
    "text": "your um predictor it's called in Amazon machine learning and you give it a role and the role is once again uh this role",
    "start": "1092160",
    "end": "1099840"
  },
  {
    "text": "is going to be used by IoT platform to connect to Amazon machine learning so it's very important for you to make sure your permissions are uh set",
    "start": "1099840",
    "end": "1107480"
  },
  {
    "text": "correctly okay so we're going to do another demo",
    "start": "1107480",
    "end": "1113559"
  },
  {
    "text": "can I switch to my laptop",
    "start": "1114080",
    "end": "1117200"
  },
  {
    "text": "please okay and in this case uh I'm going to show you the uh I hope you guys",
    "start": "1125400",
    "end": "1131600"
  },
  {
    "text": "can see this let me just make it",
    "start": "1131600",
    "end": "1135840"
  },
  {
    "text": "bigger let me close this one",
    "start": "1137160",
    "end": "1142039"
  },
  {
    "text": "so I actually downloaded the two files that we uh used that I used to train this model one of them is the train set",
    "start": "1147760",
    "end": "1154240"
  },
  {
    "text": "and it has approximately I believe 1.2 million data um data",
    "start": "1154240",
    "end": "1160880"
  },
  {
    "text": "points yep one point yeah a little uh little over 1.2 2 million and if you",
    "start": "1164760",
    "end": "1171520"
  },
  {
    "text": "take a look inside all it is is basically um comma separated value file uh that has the",
    "start": "1171520",
    "end": "1179440"
  },
  {
    "text": "following parameters it's the cycle the cycle of the device it's a sensor uh sensor reading 1 2 3 4 5 6 and seven and",
    "start": "1179440",
    "end": "1188240"
  },
  {
    "text": "the target now the target is since it's a training set the target is set to zero",
    "start": "1188240",
    "end": "1193520"
  },
  {
    "text": "if the device is not um uh is not to to fail in the next 30 cycles and it's set",
    "start": "1193520",
    "end": "1198720"
  },
  {
    "text": "to one if the device is to fail in the next 30 cycles so this is the training set we are going to use to train our",
    "start": "1198720",
    "end": "1206799"
  },
  {
    "text": "model if you take a look at the actual test set that we're going to use to see the prediction",
    "start": "1207559",
    "end": "1215400"
  },
  {
    "text": "uh it has just 230,000 readings and it's actually a sample of 5,000 devices",
    "start": "1216320",
    "end": "1225000"
  },
  {
    "text": "okay so what I'm going to do now is um go through",
    "start": "1227080",
    "end": "1233240"
  },
  {
    "text": "the machine learning",
    "start": "1233240",
    "end": "1238960"
  },
  {
    "text": "interface here's my machine learning uh on this data set of 1.2 to a",
    "start": "1245159",
    "end": "1252000"
  },
  {
    "text": "million data points it takes approximately 15 minutes to train a model so I'm going to show you how to",
    "start": "1252000",
    "end": "1257919"
  },
  {
    "text": "start training the model but then I'm going to skip forward to the model that I pre-trained so we don't waste time",
    "start": "1257919",
    "end": "1263919"
  },
  {
    "text": "looking at the screen so I'm going to say create",
    "start": "1263919",
    "end": "1269840"
  },
  {
    "text": "new and uh I already uploaded the",
    "start": "1280280",
    "end": "1284960"
  },
  {
    "text": "data this is the training set you that you saw before i'm going to name it PM",
    "start": "1291480",
    "end": "1299760"
  },
  {
    "text": "demo okay um what is happening right now is machine learning actually got the",
    "start": "1302679",
    "end": "1307960"
  },
  {
    "text": "file uh it recognized um it recognized some format and it's suggesting a schema",
    "start": "1307960",
    "end": "1314640"
  },
  {
    "text": "so in this case since I have the headers I'm going to say I have the headers so",
    "start": "1314640",
    "end": "1320480"
  },
  {
    "text": "get the schema from the first line and then since I know that my target these are the same um parameters that you saw",
    "start": "1320480",
    "end": "1328000"
  },
  {
    "text": "in the CSV file since I know that my target is actually binary I tell machine learning that is a",
    "start": "1328000",
    "end": "1334159"
  },
  {
    "text": "binary target because in this case machine learning will use binary regression versus linear",
    "start": "1334159",
    "end": "1340480"
  },
  {
    "text": "regression and I must pick a target in this case the target is the value that",
    "start": "1344840",
    "end": "1350240"
  },
  {
    "text": "we're going to uh we're going to try to predict no row identifier view everything looks",
    "start": "1350240",
    "end": "1358520"
  },
  {
    "text": "good [Music]",
    "start": "1358520",
    "end": "1362839"
  },
  {
    "text": "review excellent so what's happening right now is machine learning is",
    "start": "1365400",
    "end": "1370480"
  },
  {
    "text": "actually downloading this file from S3 into internal storage splitting this file into a training set and validation",
    "start": "1370480",
    "end": "1377600"
  },
  {
    "text": "set it's typically 70 70% 30% and then training the model it takes approximately 105 minutes on a data set",
    "start": "1377600",
    "end": "1384320"
  },
  {
    "text": "like this so what we're going to do is actually uh use the model that we",
    "start": "1384320",
    "end": "1390880"
  },
  {
    "text": "pre-trained this is the model and one more step that you'll need to do if you want to try it yourself is actually",
    "start": "1395000",
    "end": "1401520"
  },
  {
    "text": "create a real-time prediction endpoint a real-time prediction endpoint is a is a",
    "start": "1401520",
    "end": "1406799"
  },
  {
    "text": "high performance endpoint into Amazon machine learning that enables you to get a response from a trained model within",
    "start": "1406799",
    "end": "1413280"
  },
  {
    "text": "10 millisecond which means that you can basically get messages from your devices and do predictions real",
    "start": "1413280",
    "end": "1421440"
  },
  {
    "text": "time so we're going to do another",
    "start": "1421960",
    "end": "1429080"
  },
  {
    "text": "dangerous did we're going to actually destroy the rule that I",
    "start": "1429080",
    "end": "1435320"
  },
  {
    "text": "have which right now publishes to cloudatch um using a machine using",
    "start": "1435320",
    "end": "1440799"
  },
  {
    "text": "machine learning predict function and see if I can reproduce",
    "start": "1440799",
    "end": "1445679"
  },
  {
    "text": "it and it's gone",
    "start": "1447960",
    "end": "1452520"
  },
  {
    "text": "i'm going to cheat again and I'm going to get some values that I stored so I'm",
    "start": "1453679",
    "end": "1461360"
  },
  {
    "text": "going to create a new model uh a new rule i'm going to name",
    "start": "1461360",
    "end": "1468600"
  },
  {
    "text": "it publish to",
    "start": "1468600",
    "end": "1473200"
  },
  {
    "text": "cloudatch and under select I'm going to say select everything so it's star under",
    "start": "1477240",
    "end": "1482880"
  },
  {
    "text": "topic filter I'm going to use a topic that I later will use to emit data from",
    "start": "1482880",
    "end": "1487919"
  },
  {
    "text": "the devices",
    "start": "1487919",
    "end": "1491080"
  },
  {
    "text": "let me store the metric and I'm going to",
    "start": "1494240",
    "end": "1500679"
  },
  {
    "text": "choose cloudatch metric action the name is",
    "start": "1500679",
    "end": "1507278"
  },
  {
    "text": "this the name space is",
    "start": "1509559",
    "end": "1514919"
  },
  {
    "text": "pmmetric the unit is none we're emitting just just numbers",
    "start": "1514919",
    "end": "1520159"
  },
  {
    "text": "now the value is the interesting part so remember I showed you the syntax for the",
    "start": "1520159",
    "end": "1525520"
  },
  {
    "text": "u machine learning predict function so that's what we're going to use",
    "start": "1525520",
    "end": "1531520"
  },
  {
    "text": "here so what I'm doing here is I'm going to use the dollar sign to actually",
    "start": "1533400",
    "end": "1539440"
  },
  {
    "text": "evaluate this um expression then it's machine learning predict then it's the",
    "start": "1539440",
    "end": "1544960"
  },
  {
    "text": "identifier of the model that I trained before and then that's the AR um Amazon",
    "start": "1544960",
    "end": "1550480"
  },
  {
    "text": "resource name for the role itself and then I'm going to send all the data from",
    "start": "1550480",
    "end": "1555600"
  },
  {
    "text": "my message extracted from by the rule from my message to the machine learning",
    "start": "1555600",
    "end": "1560720"
  },
  {
    "text": "and then I'm going to extract the predict",
    "start": "1560720",
    "end": "1564320"
  },
  {
    "text": "label and if everything is in order we should be able to",
    "start": "1566760",
    "end": "1572360"
  },
  {
    "text": "add cloudatch metric action and create the rule",
    "start": "1572360",
    "end": "1578559"
  },
  {
    "text": "now what happened here is that now we have u publish to cloudatch rule and if we go to cloudatch",
    "start": "1579120",
    "end": "1588000"
  },
  {
    "text": "um this is the metric that we used to configure this rule right now it's empty",
    "start": "1588000",
    "end": "1593039"
  },
  {
    "text": "there is no data needs to be refreshed within one",
    "start": "1593039",
    "end": "1599000"
  },
  {
    "text": "minute now remember the um testing",
    "start": "1599000",
    "end": "1605640"
  },
  {
    "text": "set we're going to emit uh this testing set to uh AWS IoT platform at",
    "start": "1605640",
    "end": "1612559"
  },
  {
    "text": "approximate rate of um 80 um 80 requests per",
    "start": "1612559",
    "end": "1618640"
  },
  {
    "text": "second it will look slightly hectic",
    "start": "1619320",
    "end": "1624278"
  },
  {
    "text": "it's warming up and it's going now if everything worked correctly then we're",
    "start": "1630880",
    "end": "1637440"
  },
  {
    "text": "going to see shortly we're going to see a metric in Cloudatch",
    "start": "1637440",
    "end": "1644159"
  },
  {
    "text": "so what the test script is doing is taking groups of 20 devices from the test set and emitting uh the readings of",
    "start": "1644159",
    "end": "1651600"
  },
  {
    "text": "seven sensors for these 20 devices until ex it exhausts the the group of 20 and",
    "start": "1651600",
    "end": "1656640"
  },
  {
    "text": "then it moves to the next group and the reason why I'm doing it this way is so we don't have to wait 10 15 minutes",
    "start": "1656640",
    "end": "1662080"
  },
  {
    "text": "because we're emulating real um uh real devices in the field we should wait approximately 3 minutes for this uh for",
    "start": "1662080",
    "end": "1669919"
  },
  {
    "text": "this alarm to actually for for the metric to change and for this alarm to um go",
    "start": "1669919",
    "end": "1677360"
  },
  {
    "text": "on and in the meanwhile if you want to have a little bit more fun",
    "start": "1681480",
    "end": "1690679"
  },
  {
    "text": "um go to predict dot vimj vimj at",
    "start": "1692240",
    "end": "1700279"
  },
  {
    "text": "io let me actually show it to",
    "start": "1700279",
    "end": "1704320"
  },
  {
    "text": "you one thing we recently launched is actually a websocket integration and the websocket protocol enables you to get",
    "start": "1708120",
    "end": "1715120"
  },
  {
    "text": "MQTT messages um through a web browser or anything that can talk websockets so",
    "start": "1715120",
    "end": "1720240"
  },
  {
    "text": "if you go to predict.vj.io IO you should see a similar screen to",
    "start": "1720240",
    "end": "1727760"
  },
  {
    "text": "mine and if you click connect you should connect to IoT platform if you click",
    "start": "1731159",
    "end": "1737960"
  },
  {
    "text": "subscribe then you'll subscribe to the same uh topic that one of the rules is",
    "start": "1737960",
    "end": "1743760"
  },
  {
    "text": "emitting uh predictions to so in this case if you are seeing what I'm seeing",
    "start": "1743760",
    "end": "1749440"
  },
  {
    "text": "then these are the messages that tell me hey turbine ID 2110 cycle number 614",
    "start": "1749440",
    "end": "1757520"
  },
  {
    "text": "uh is predicted to fail within the next 30 30 cycles so this is the way and this",
    "start": "1757520",
    "end": "1764320"
  },
  {
    "text": "application is completely serverless meaning there is a um set of HTML and JavaScript deployed somewhere in S3",
    "start": "1764320",
    "end": "1771200"
  },
  {
    "text": "bucket and this JavaScript actually connects to IoT platform through a",
    "start": "1771200",
    "end": "1776240"
  },
  {
    "text": "websocket interface subscribes to PM predictions topic and actually getting these messages every time machine",
    "start": "1776240",
    "end": "1783039"
  },
  {
    "text": "learning actually detects a potential failure within 30 30 cycles and if we go",
    "start": "1783039",
    "end": "1788320"
  },
  {
    "text": "back to Cloudatch and",
    "start": "1788320",
    "end": "1792799"
  },
  {
    "text": "refresh so this particular this particular side of things did not",
    "start": "1801080",
    "end": "1807799"
  },
  {
    "text": "work let's see if we can fix it quickly and if not we'll move on",
    "start": "1807799",
    "end": "1813799"
  },
  {
    "text": "okay and let's see if we uh Okay well I guess half of the demo",
    "start": "1876520",
    "end": "1884720"
  },
  {
    "text": "did not work but that's probably my my typing skills and uh not probably for",
    "start": "1884720",
    "end": "1889840"
  },
  {
    "text": "sure my typing skills are not the AWS IoT platform",
    "start": "1889840",
    "end": "1894880"
  },
  {
    "text": "uh can we switch back to the demo please uh to the um deck",
    "start": "1894880",
    "end": "1899840"
  },
  {
    "text": "please hey guys can we switch back to the deck thank you",
    "start": "1916919",
    "end": "1924000"
  },
  {
    "text": "so you already saw that so in summary uh what we went",
    "start": "1924320",
    "end": "1929440"
  },
  {
    "text": "through today is a couple of uh recently launched features in IoT that actually enable you to extract value from your",
    "start": "1929440",
    "end": "1935760"
  },
  {
    "text": "device data and in particular uh I showed you how to visualize your data using elastic search and cabbon",
    "start": "1935760",
    "end": "1942240"
  },
  {
    "text": "integration as well as how to run predictions uh using Amazon machine learning um thank you guys for having me",
    "start": "1942240",
    "end": "1949360"
  },
  {
    "text": "uh we still have uh yeah we still have some time so if you have any questions",
    "start": "1949360",
    "end": "1955679"
  },
  {
    "text": "um please feel free to come and chat thank you",
    "start": "1955679",
    "end": "1962200"
  }
]