[
  {
    "start": "0",
    "end": "72000"
  },
  {
    "text": "so I'm gonna start with a little story a couple of months ago my my wife was",
    "start": "1040",
    "end": "8160"
  },
  {
    "text": "buying some kids socks for our children and she went online to an e-commerce",
    "start": "8160",
    "end": "13830"
  },
  {
    "text": "site and she went ahead and typed kids socks sort of normal thing you would do",
    "start": "13830",
    "end": "20310"
  },
  {
    "text": "and what she did not get was kids socks she got all the other kinds of socks adult socks you know sweat socks sport",
    "start": "20310",
    "end": "27449"
  },
  {
    "text": "socks all kinds of socks but no kids socks and she spent about 20 minutes getting more and more and more",
    "start": "27449",
    "end": "33450"
  },
  {
    "text": "frustrated because she knew they had socks and ultimately made the decision",
    "start": "33450",
    "end": "38670"
  },
  {
    "text": "that you know what forget this I'm gonna go to a different website and I'll you know she went there typed kid socks the",
    "start": "38670",
    "end": "44640"
  },
  {
    "text": "kid socks came right up she bought the socks so search itself is often and more",
    "start": "44640",
    "end": "52140"
  },
  {
    "text": "and more kind of a core part of the experience of people using our applications and sites and it's really",
    "start": "52140",
    "end": "58649"
  },
  {
    "text": "important that we get search right and that we get users the results that",
    "start": "58649",
    "end": "64170"
  },
  {
    "text": "they're expecting because that's how they're going to find the products the data the information that they're",
    "start": "64170",
    "end": "70439"
  },
  {
    "text": "looking for so this morning we are going to sort of talk about how to build a",
    "start": "70439",
    "end": "80310"
  },
  {
    "start": "72000",
    "end": "118000"
  },
  {
    "text": "great search experience from the ground up and we'll look at sourcing documents",
    "start": "80310",
    "end": "86340"
  },
  {
    "text": "from multiple data sources we'll look at building a good retrieval and a ranking",
    "start": "86340",
    "end": "91829"
  },
  {
    "text": "experience we'll look at some user interface components that we can build to help our users drill down to the",
    "start": "91829",
    "end": "99090"
  },
  {
    "text": "right results and we'll give a couple of tips on performance and scale after that",
    "start": "99090",
    "end": "104549"
  },
  {
    "text": "I'm gonna call up Pete simpkin from Elsevier and he's going to talk about an application that they built with built",
    "start": "104549",
    "end": "113520"
  },
  {
    "text": "with search with cloud search for Elsevier so this is an application",
    "start": "113520",
    "end": "120149"
  },
  {
    "start": "118000",
    "end": "385000"
  },
  {
    "text": "that's loosely based on IMDB and this is going to be kind of the context than the",
    "start": "120149",
    "end": "126600"
  },
  {
    "text": "basis for what we're going to do and we'll dive into that in quite a bit of",
    "start": "126600",
    "end": "131819"
  },
  {
    "text": "detail so before we do that though and because maybe not everybody is completely",
    "start": "131819",
    "end": "138420"
  },
  {
    "text": "familiar with cloudsearch we're just going to talk a little bit about what is cloudsearch and how do you use it so I'm",
    "start": "138420",
    "end": "145140"
  },
  {
    "text": "showing you the AWS console here and we can see cloudsearch in the upper right and if I can get the video to play we'll",
    "start": "145140",
    "end": "153780"
  },
  {
    "text": "see it's going so when we when you use cloud search it's somewhat like ec2 you",
    "start": "153780",
    "end": "160349"
  },
  {
    "text": "create what we call a search domain search domain wraps the software hardware security durable storage",
    "start": "160349",
    "end": "168450"
  },
  {
    "text": "everything you need to run search in the cloud to get started with cloud search is pretty easy go to the console and you",
    "start": "168450",
    "end": "176639"
  },
  {
    "text": "can click on the cloud search console when that comes up if you've not created",
    "start": "176639",
    "end": "183329"
  },
  {
    "text": "a search domain before you have a call to action here to create a search domain",
    "start": "183329",
    "end": "189590"
  },
  {
    "text": "and when I click that button",
    "start": "189829",
    "end": "194810"
  },
  {
    "text": "come on video we have a simple wizard that we're gonna step through just a",
    "start": "194959",
    "end": "200910"
  },
  {
    "text": "couple of things to first of all give our domain a name and we can name it",
    "start": "200910",
    "end": "210239"
  },
  {
    "text": "anything we like",
    "start": "210239",
    "end": "212870"
  },
  {
    "text": "Wow this is running ton slower than it did in practice so we'll click confirm",
    "start": "216760",
    "end": "226650"
  },
  {
    "text": "and now we have an opportunity to configure our index to cloud search has some tools that will help you do this",
    "start": "237440",
    "end": "244940"
  },
  {
    "text": "we can analyze some sample files and we can do this either from the local machine we can look at objects that are",
    "start": "244940",
    "end": "251990"
  },
  {
    "text": "in s3 we can look at objects or we can look at DynamoDB tables and we can use a",
    "start": "251990",
    "end": "257870"
  },
  {
    "text": "predefined configuration I'm going to in this case use a predefined configuration with an IMDB movies data set all of this",
    "start": "257870",
    "end": "266090"
  },
  {
    "text": "in the console for you to experiment with as well so you can follow these same steps I confirm that cloud search",
    "start": "266090",
    "end": "275810"
  },
  {
    "text": "loads the configuration in this case a predefined configuration or it would read your files pick out the fields and",
    "start": "275810",
    "end": "281900"
  },
  {
    "text": "suggest a configuration for you it gives me a confirmation of what's the",
    "start": "281900",
    "end": "289100"
  },
  {
    "text": "configuration that it has either read from my documents or the predefined configuration in this case and here you",
    "start": "289100",
    "end": "295790"
  },
  {
    "text": "can see we have a number of fields we have a number of different field types some field options search facet and",
    "start": "295790",
    "end": "302450"
  },
  {
    "text": "result we can set default values on our fields and we can source our fields from",
    "start": "302450",
    "end": "307520"
  },
  {
    "text": "other fields",
    "start": "307520",
    "end": "310330"
  },
  {
    "text": "not only did it run half speed it actually cut itself off in the middle cool so what you would actually be",
    "start": "315789",
    "end": "324139"
  },
  {
    "text": "seeing now is once we get our configuration we confirm that configuration and then we have the",
    "start": "324139",
    "end": "330979"
  },
  {
    "text": "option to set up our access policies access and cloud search is based on IP",
    "start": "330979",
    "end": "336500"
  },
  {
    "text": "white listing and black listing in this case what I would do is set the all",
    "start": "336500",
    "end": "342500"
  },
  {
    "text": "access to all services for everyone it's a demo that that's the easiest way to get started finally we would get a",
    "start": "342500",
    "end": "349819"
  },
  {
    "text": "confirmation dialog and click OK and then our domain would then go into a",
    "start": "349819",
    "end": "354860"
  },
  {
    "text": "loading state after about 20 minutes it's active and ready for us to use within the console as well we have the",
    "start": "354860",
    "end": "362240"
  },
  {
    "text": "ability to upload documents there's a button which you would see which I would click and it would present me with a",
    "start": "362240",
    "end": "368330"
  },
  {
    "text": "dialog I can upload documents from s3 I can import data directly from a dynamodb",
    "start": "368330",
    "end": "374780"
  },
  {
    "text": "table I can upload files from my local machine I'd go through that upload",
    "start": "374780",
    "end": "380990"
  },
  {
    "text": "dialog click OK my files would load into cloudsearch apologies for the",
    "start": "380990",
    "end": "386680"
  },
  {
    "start": "385000",
    "end": "517000"
  },
  {
    "text": "prematurely ending video to use cloud",
    "start": "386680",
    "end": "391819"
  },
  {
    "text": "search is really pretty straightforward what we have here is some sort of a typical web application where users are",
    "start": "391819",
    "end": "399560"
  },
  {
    "text": "coming in they go they get load balanced across some auto scaled servers and there's a database server in the back",
    "start": "399560",
    "end": "405259"
  },
  {
    "text": "which typically would be our system of record the front end would use that to",
    "start": "405259",
    "end": "410389"
  },
  {
    "text": "construct dynamic pages sometimes even static pages serve those back to the user to integrate with cloud search we",
    "start": "410389",
    "end": "417229"
  },
  {
    "text": "would have a some kind of update script that's running pulling data from the",
    "start": "417229",
    "end": "422449"
  },
  {
    "text": "database and pushing it into cloud search cloud search exposes to you two endpoints a document endpoint and a",
    "start": "422449",
    "end": "429199"
  },
  {
    "text": "search endpoint both of these are accessed by a restful interaction so for pushing documents into cloud search you",
    "start": "429199",
    "end": "435889"
  },
  {
    "text": "would simply do HTTP POST the front ends can send queries to the search domain",
    "start": "435889",
    "end": "441409"
  },
  {
    "text": "through the search endpoint with HTTP GET you specify the query in the URL",
    "start": "441409",
    "end": "447229"
  },
  {
    "text": "parameters of the search so again fairly easy to integrate it's all restful simply push",
    "start": "447229",
    "end": "452750"
  },
  {
    "text": "documents in and push in search queries one of the nice things that cloud search",
    "start": "452750",
    "end": "458210"
  },
  {
    "text": "will do for you is in between as you're pushing documents in cloud search will scale you up so as you push in data",
    "start": "458210",
    "end": "465740"
  },
  {
    "text": "cloud search will give you larger and larger instances and then indeed if you",
    "start": "465740",
    "end": "470750"
  },
  {
    "text": "keep pushing in data cloud search will seamlessly and in the back partition that data and deploy it out to multiple",
    "start": "470750",
    "end": "478040"
  },
  {
    "text": "partitions so with no interaction on your part you simply push in data cloud search will size itself out to fit the",
    "start": "478040",
    "end": "484160"
  },
  {
    "text": "data that you've pushed in similarly for traffic as you're pushing traffic into cloud search each of those",
    "start": "484160",
    "end": "490760"
  },
  {
    "text": "partition instances has a certain amount of CPU that it can use to serve that traffic if you push in more traffic than",
    "start": "490760",
    "end": "496880"
  },
  {
    "text": "one CPU can handle cloud search would add replicas seamlessly and without intervention on your part and would",
    "start": "496880",
    "end": "503720"
  },
  {
    "text": "continue scaling up as necessary for the search traffic that you're sending and of course we'd also scale down as",
    "start": "503720",
    "end": "510830"
  },
  {
    "text": "traffic decrease then we'd also scale down as your data decreased if you deleted things out of there so that's a",
    "start": "510830",
    "end": "517909"
  },
  {
    "start": "517000",
    "end": "593000"
  },
  {
    "text": "quick million mile view of cloud search and hopefully that gets everybody sort of grounded so we're going to talk about",
    "start": "517910",
    "end": "524120"
  },
  {
    "text": "now our application and as with you know",
    "start": "524120",
    "end": "529370"
  },
  {
    "text": "most applications it's a fairly complex set of data organized around movies but",
    "start": "529370",
    "end": "536180"
  },
  {
    "text": "from various different sources so you know we're gonna have some fundamental",
    "start": "536180",
    "end": "541970"
  },
  {
    "text": "application data which you know guides which is data about our movie we're",
    "start": "541970",
    "end": "548390"
  },
  {
    "text": "gonna have some user interaction we're gonna have ratings we're gonna have user reviews we're going to have other",
    "start": "548390",
    "end": "553610"
  },
  {
    "text": "interactions that users can take we'll have some clips some trailers will have",
    "start": "553610",
    "end": "558650"
  },
  {
    "text": "critic reviews we'll have other content help content which will all be available",
    "start": "558650",
    "end": "563860"
  },
  {
    "text": "our search interface as with the Sox we have to respect that users are going to",
    "start": "563860",
    "end": "569630"
  },
  {
    "text": "come first of all with different use cases but primarily what we want to do is enable users to go and search for movies",
    "start": "569630",
    "end": "575540"
  },
  {
    "text": "find them and then also oscar information and then we also want to support even a",
    "start": "575540",
    "end": "582230"
  },
  {
    "text": "mobile experience where users can go search for movies find the movies they want and then get a location-based sword",
    "start": "582230",
    "end": "589670"
  },
  {
    "text": "so they can find movies and show times that are near them so stepping through",
    "start": "589670",
    "end": "595129"
  },
  {
    "start": "593000",
    "end": "649000"
  },
  {
    "text": "this and again thinking about how do we build this whole search experience for our users the first the source in the",
    "start": "595129",
    "end": "602239"
  },
  {
    "text": "basis of everything is a search document search document is you can think of as one-to-one with a search result a search",
    "start": "602239",
    "end": "608509"
  },
  {
    "text": "document is what you push into the search engine and that you hope to retrieve with the query in our case",
    "start": "608509",
    "end": "614600"
  },
  {
    "text": "we'll think about a movie at least as a search result with each search document",
    "start": "614600",
    "end": "621290"
  },
  {
    "text": "has to contain a unique identifier a version and a set of fields the fields are name value pairs so things like a",
    "start": "621290",
    "end": "629029"
  },
  {
    "text": "title an act set of actors description directors this is the source this is",
    "start": "629029",
    "end": "635360"
  },
  {
    "text": "what we index and use to match against user queries and we have different",
    "start": "635360",
    "end": "640910"
  },
  {
    "text": "configurations that control how that text is taken in and indexed and how we",
    "start": "640910",
    "end": "647240"
  },
  {
    "text": "can query it so thinking about our main",
    "start": "647240",
    "end": "653529"
  },
  {
    "text": "movie display screen we have our application content and most likely this",
    "start": "653529",
    "end": "659689"
  },
  {
    "text": "is going to live in a relational store something like RDS so we'll have in here movie data perhaps the user reviews will",
    "start": "659689",
    "end": "665959"
  },
  {
    "text": "live in there we'll have data about theatres and show times and other information that we're going to use to",
    "start": "665959",
    "end": "671449"
  },
  {
    "text": "support our search we also have some more some hotter data in terms of user",
    "start": "671449",
    "end": "678889"
  },
  {
    "text": "actions so when people give a rating to a movie or give a thumb up or do a share",
    "start": "678889",
    "end": "685100"
  },
  {
    "text": "or do something like that that hotter data we're going to put into dynamo DB and that's going to be available later to help guide our",
    "start": "685100",
    "end": "693199"
  },
  {
    "text": "searches we have bigger blob data again things like trailers",
    "start": "693199",
    "end": "699329"
  },
  {
    "text": "you know videos the critic reviews the help files all of that content likely is",
    "start": "699329",
    "end": "704730"
  },
  {
    "text": "going to live in s3 and we're going to need to bring all this together to provide search first of all for movies",
    "start": "704730",
    "end": "711059"
  },
  {
    "text": "but then also we want to think about how do we provide search for the individual content itself so the first thing we",
    "start": "711059",
    "end": "720239"
  },
  {
    "start": "717000",
    "end": "788000"
  },
  {
    "text": "need to do to use cloud searches get stuff in there and we want a bootstrap all of the data that we have in our",
    "start": "720239",
    "end": "726029"
  },
  {
    "text": "system and get it into cloud search and the way we do this is we build a processing script typically on ec2",
    "start": "726029",
    "end": "732540"
  },
  {
    "text": "that's going to pull records from our source system generate documents with sets of fields and push those into cloud",
    "start": "732540",
    "end": "738959"
  },
  {
    "text": "search now if you have quite a few documents it's helpful to think about",
    "start": "738959",
    "end": "744929"
  },
  {
    "text": "how to expand that out and how to scale that out for a larger data set in this case what we can have is either one or",
    "start": "744929",
    "end": "751499"
  },
  {
    "text": "many hosts pulling from the source system they can use a queueing system like sqs to push either the documents",
    "start": "751499",
    "end": "758910"
  },
  {
    "text": "that they're small enough or they can push pointers to those documents and put the documents in s3 and then we can have",
    "start": "758910",
    "end": "764790"
  },
  {
    "text": "a fleet of hosts who are pulling data from the queue and pushing that data into cloud search so there's a little",
    "start": "764790",
    "end": "770970"
  },
  {
    "text": "bit of a batching strategy that we can use when we have really large data sets and of course for us we have multiple",
    "start": "770970",
    "end": "777179"
  },
  {
    "text": "source systems and we're gonna want to take data from each of those systems put",
    "start": "777179",
    "end": "782369"
  },
  {
    "text": "it together into a single document for movies to be able to search that so when",
    "start": "782369",
    "end": "790439"
  },
  {
    "start": "788000",
    "end": "862000"
  },
  {
    "text": "we're constructing these documents what you want to think about is one source one of the sources is going to be a",
    "start": "790439",
    "end": "796709"
  },
  {
    "text": "master source in this case our relational store which has the movie data in it will be our master source and",
    "start": "796709",
    "end": "802610"
  },
  {
    "text": "we'll take each record of that source and we'll determine a document ID and a",
    "start": "802610",
    "end": "808769"
  },
  {
    "text": "version number and then we'll go to our auxiliary resources pull additional data",
    "start": "808769",
    "end": "815249"
  },
  {
    "text": "in so like for instance the ratings and likes and other information that we have in dynamo we want to pull that together",
    "start": "815249",
    "end": "821069"
  },
  {
    "text": "and construct a single document out of all of that data to push into",
    "start": "821069",
    "end": "827429"
  },
  {
    "text": "cloudsearch so looking again and zooming in on each",
    "start": "827429",
    "end": "833080"
  },
  {
    "text": "of our sources for our relational data we're gonna have a main table which is a",
    "start": "833080",
    "end": "838450"
  },
  {
    "text": "movie and we're going to think about we're gonna have at least associated with it a set of theatres and then",
    "start": "838450",
    "end": "845430"
  },
  {
    "text": "addresses and show times we're gonna leave the relational piece out for the",
    "start": "845430",
    "end": "850840"
  },
  {
    "text": "second for this minute for now and we're gonna just look at the",
    "start": "850840",
    "end": "857080"
  },
  {
    "text": "movie data but when you handle the relational wealth we'll get to that for",
    "start": "857080",
    "end": "864100"
  },
  {
    "start": "862000",
    "end": "917000"
  },
  {
    "text": "objects that are in s3 we want to take those objects and pull the fields and",
    "start": "864100",
    "end": "869440"
  },
  {
    "text": "metadata off of those objects there's a top-level Apache project called Apache",
    "start": "869440",
    "end": "874960"
  },
  {
    "text": "tikka a fairly decent jaw does a fairly decent job of taking multiple different",
    "start": "874960",
    "end": "881800"
  },
  {
    "text": "content types like PDFs and HTML documents and Word documents and other",
    "start": "881800",
    "end": "887020"
  },
  {
    "text": "microsoft formats it can pull out the content of those as well as metadata",
    "start": "887020",
    "end": "892780"
  },
  {
    "text": "that's on that like authors and and other pieces of data it also handles images and videos so we'll use tika to",
    "start": "892780",
    "end": "900490"
  },
  {
    "text": "walk through all of our content and build that content into fields that we can put on to our movie but we can also",
    "start": "900490",
    "end": "907240"
  },
  {
    "text": "use that content if we want to provide search say over just the reviews we can",
    "start": "907240",
    "end": "912640"
  },
  {
    "text": "pull that content out as a separate document and do it there and finally we",
    "start": "912640",
    "end": "919210"
  },
  {
    "text": "have content in DynamoDB now if we want to go directly from dynamo to cloud search it's a fairly straightforward",
    "start": "919210",
    "end": "925740"
  },
  {
    "text": "correspondence we have in dynamo a table in cloud search a domain and then within",
    "start": "925740",
    "end": "931060"
  },
  {
    "text": "our table we have items that have attributes in dynamo for cloud search we simply would copy the attributes into",
    "start": "931060",
    "end": "937750"
  },
  {
    "text": "fields and then we could search that data directly in our case since we're thinking that we have some user",
    "start": "937750",
    "end": "944080"
  },
  {
    "text": "interaction data in there what we're gonna do is we're gonna want to take all of the user ratings for instance for a",
    "start": "944080",
    "end": "949810"
  },
  {
    "text": "particular movie sum those up and add that as a field to our movie data and",
    "start": "949810",
    "end": "956550"
  },
  {
    "text": "finally we have our location information which we want to put together to provide",
    "start": "956550",
    "end": "961810"
  },
  {
    "text": "a Geo based search over our movies now as I",
    "start": "961810",
    "end": "968230"
  },
  {
    "text": "mentioned relational database stores this information relationally we have the movie related to the theaters and",
    "start": "968230",
    "end": "976210"
  },
  {
    "text": "the theaters have locations and addresses in showtimes thinking about our documents in cloud search if we want",
    "start": "976210",
    "end": "984610"
  },
  {
    "text": "to have a document we want to have a result then that has to exist as a document in our in our search engine but",
    "start": "984610",
    "end": "993820"
  },
  {
    "text": "search engines can't do relational joins so before we can put all of the data that's relational into a search engine",
    "start": "993820",
    "end": "1000960"
  },
  {
    "text": "we have to denormalize it and flatten it and then provide each potential combination as one search document so",
    "start": "1000960",
    "end": "1009420"
  },
  {
    "text": "what I've done here is I've shown for Ironman we've flattened it out and we've put you know for the galaxy theater we",
    "start": "1009420",
    "end": "1015960"
  },
  {
    "text": "have four different show times and we imagine that for Ironman we'd have many many of these documents that would",
    "start": "1015960",
    "end": "1022410"
  },
  {
    "text": "correspond to one individual show time that we could pull with a location and a time and that would allow us to generate",
    "start": "1022410",
    "end": "1029939"
  },
  {
    "text": "the mobile interface this brings up a kind of interesting issue in this case",
    "start": "1029940",
    "end": "1036810"
  },
  {
    "start": "1032000",
    "end": "1078000"
  },
  {
    "text": "we've talked about sort of heterogeneous data we have these different data types and different data sources we're",
    "start": "1036810",
    "end": "1042810"
  },
  {
    "text": "building one main movie record but then if we're going to add thousands and",
    "start": "1042810",
    "end": "1048000"
  },
  {
    "text": "thousands of Showtime's this will actually potentially skew our ranking so that we won't get the best",
    "start": "1048000",
    "end": "1054180"
  },
  {
    "text": "text ranking so when we have these multiple data sources one strategy is to put them into a single search domain and",
    "start": "1054180",
    "end": "1061220"
  },
  {
    "text": "then we can add a field to each of the documents with a type that allows us to select between them and filter our",
    "start": "1061220",
    "end": "1067710"
  },
  {
    "text": "queries so if we want to put all of our reviews as a separate type of document we can do that we want to put our show x",
    "start": "1067710",
    "end": "1074160"
  },
  {
    "text": "as a separate type of document we can put them all in one domain the other",
    "start": "1074160",
    "end": "1079500"
  },
  {
    "start": "1078000",
    "end": "1161000"
  },
  {
    "text": "strategy is to use a single domain for each of the types of documents here we get a clearer relevance scoring so our",
    "start": "1079500",
    "end": "1087300"
  },
  {
    "text": "relevance isn't you know aggregated across all of our different data types",
    "start": "1087300",
    "end": "1092330"
  },
  {
    "text": "and the the disadvantage here is one of cost and another situation where this comes up is",
    "start": "1092330",
    "end": "1099570"
  },
  {
    "text": "for instance if you're building an application that has many customers typically you would either want to put",
    "start": "1099570",
    "end": "1106020"
  },
  {
    "text": "all of those customers in one domain or split out each customer to their own domain that can get costly if you have",
    "start": "1106020",
    "end": "1112860"
  },
  {
    "text": "thousands of customers you can't have thousands of what you can't have thousands of domains please but it can",
    "start": "1112860",
    "end": "1118919"
  },
  {
    "text": "get very costly so there's a trade-off to make between am I going to put all of my data into a single domain where I'll",
    "start": "1118919",
    "end": "1125549"
  },
  {
    "text": "get a little bit of pollution of relevance but I'll get the best cost footprint or do I split them out into",
    "start": "1125549",
    "end": "1132210"
  },
  {
    "text": "multiple domains where I'll get the best relevance and also potentially a little bit higher cost one other advantage of a",
    "start": "1132210",
    "end": "1139830"
  },
  {
    "text": "multi domain solution is that one customer for example if they have a different traffic footprint than a",
    "start": "1139830",
    "end": "1146490"
  },
  {
    "text": "different customer will scale independently of that other customer so if everybody's in one domain that domain",
    "start": "1146490",
    "end": "1152730"
  },
  {
    "text": "will scale based on the highest kind of volume right it can be advantageous to split it out for that reason as well and",
    "start": "1152730",
    "end": "1161850"
  },
  {
    "start": "1161000",
    "end": "1216000"
  },
  {
    "text": "of course after we bootstrapped everything in we want to make sure that users are going to continue to interact",
    "start": "1161850",
    "end": "1168390"
  },
  {
    "text": "with our website we want to make sure that we track those interactions and we'll do that the data itself will flow",
    "start": "1168390",
    "end": "1174419"
  },
  {
    "text": "out into our our back-end system so as users add reviews or ratings or other",
    "start": "1174419",
    "end": "1180690"
  },
  {
    "text": "content it will go into our base systems and then what we need is as that that",
    "start": "1180690",
    "end": "1187320"
  },
  {
    "text": "update is happening to the backend systems we want to cue something with a record identifier or other identifier",
    "start": "1187320",
    "end": "1194250"
  },
  {
    "text": "that lets us know that we need to now update that in our search index we'll have an update processor running which",
    "start": "1194250",
    "end": "1200159"
  },
  {
    "text": "is pulling from that queue as it pulls record identifier from the queue what it would then do is go back to the original",
    "start": "1200159",
    "end": "1206970"
  },
  {
    "text": "data sources construct the document in the same way that we constructed the document the first layer first time around and then push that update into",
    "start": "1206970",
    "end": "1214110"
  },
  {
    "text": "cloudsearch so in this section on",
    "start": "1214110",
    "end": "1220230"
  },
  {
    "text": "sourcing documents we covered multiple sources of data how to bootstrap and how",
    "start": "1220230",
    "end": "1225450"
  },
  {
    "text": "to update your cloud search index and then also talked a little bit about heterogeneous",
    "start": "1225450",
    "end": "1230590"
  },
  {
    "text": "data and how to deploy that within either a single or multiple search domains we're going to move into",
    "start": "1230590",
    "end": "1236799"
  },
  {
    "start": "1235000",
    "end": "1261000"
  },
  {
    "text": "retrieval and ranking now and see how we can use the data that we put in to cloud search to build an excellent search",
    "start": "1236799",
    "end": "1243400"
  },
  {
    "text": "experience so if we think about our search result page our baseline the most",
    "start": "1243400",
    "end": "1250270"
  },
  {
    "text": "important thing we have here correct matches we'd like to see that users are",
    "start": "1250270",
    "end": "1255700"
  },
  {
    "text": "able to go and search for Ironman and actually see Ironman come back to them",
    "start": "1255700",
    "end": "1261179"
  },
  {
    "start": "1261000",
    "end": "1333000"
  },
  {
    "text": "the fundamental search algorithm is first of all to take all of the",
    "start": "1261179",
    "end": "1266740"
  },
  {
    "text": "constraints from a query so in this case this would be user text like Ironman as well as clicks that the user has done to",
    "start": "1266740",
    "end": "1273610"
  },
  {
    "text": "narrow down their search other UI elements will combine those with boolean logic and then we will generate a set of",
    "start": "1273610",
    "end": "1282029"
  },
  {
    "text": "documents who have text that matches the text that's coming from the query text",
    "start": "1282029",
    "end": "1287649"
  },
  {
    "text": "and integers usually this is based on intersection which means if I type iron Ironman I want to see all of the matches",
    "start": "1287649",
    "end": "1295299"
  },
  {
    "text": "that contain both iron and man however we do enable boolean expressions you can",
    "start": "1295299",
    "end": "1300909"
  },
  {
    "text": "build any logic you like once we have our set of matches then we're going to",
    "start": "1300909",
    "end": "1306370"
  },
  {
    "text": "compute a score for each of those matches rank the documents and then show",
    "start": "1306370",
    "end": "1311440"
  },
  {
    "text": "the documents in the order of the scores and this is one of the fundamental differentiating features to select",
    "start": "1311440",
    "end": "1318070"
  },
  {
    "text": "between database and Search Search is really an a service or a algorithm that",
    "start": "1318070",
    "end": "1324340"
  },
  {
    "text": "is based on ranking and presenting good documents as opposed to all documents",
    "start": "1324340",
    "end": "1331179"
  },
  {
    "text": "that match a particular query so we're gonna think about our document structure",
    "start": "1331179",
    "end": "1336940"
  },
  {
    "start": "1333000",
    "end": "1355000"
  },
  {
    "text": "and what do we have in there if we're searching for movies we're gonna have a title we'll have a description will",
    "start": "1336940",
    "end": "1342340"
  },
  {
    "text": "certainly have gathered our user ratings from our dynamodb table we'll have maybe some likes will have release dates and a",
    "start": "1342340",
    "end": "1349659"
  },
  {
    "text": "latitude and longitude in this case to support a simple location search as I",
    "start": "1349659",
    "end": "1356500"
  },
  {
    "start": "1355000",
    "end": "1421000"
  },
  {
    "text": "mentioned you have to configure the indexing of the documents and we have three different field types of",
    "start": "1356500",
    "end": "1362970"
  },
  {
    "text": "those is text text fields are processed the words in the text field are parsed",
    "start": "1362970",
    "end": "1369750"
  },
  {
    "text": "out and each word is available for matching separately we would usually use this for things that we're going to",
    "start": "1369750",
    "end": "1375750"
  },
  {
    "text": "match against user text so if our user is going to type Ironman we want to have a text field so that we can match within",
    "start": "1375750",
    "end": "1381809"
  },
  {
    "text": "that field for something the user typed this is would be a title or a description would be a good example of a",
    "start": "1381809",
    "end": "1387750"
  },
  {
    "text": "field that we would want as a text field we have literal fields literal fields",
    "start": "1387750",
    "end": "1393450"
  },
  {
    "text": "are not actually processed so literal fields are therefore exact matching the best use for these is for application",
    "start": "1393450",
    "end": "1400020"
  },
  {
    "text": "generated text that we're using as filters or other components of the match that the user is not actually typing",
    "start": "1400020",
    "end": "1406770"
  },
  {
    "text": "this is going to be an exact match we're in control of what text we're generating we're going to match that that way and",
    "start": "1406770",
    "end": "1412200"
  },
  {
    "text": "finally we have integer fields these are integers and they're available for range",
    "start": "1412200",
    "end": "1417900"
  },
  {
    "text": "searching as well as ranking in order to",
    "start": "1417900",
    "end": "1423030"
  },
  {
    "start": "1421000",
    "end": "1516000"
  },
  {
    "text": "search we send a get request to our end point with the API version 2011 Oh 201",
    "start": "1423030",
    "end": "1429390"
  },
  {
    "text": "and the search resource we support simple searching with the Q parameter if",
    "start": "1429390",
    "end": "1436470"
  },
  {
    "text": "I search Q equals any text will Cloud search would match that text against all",
    "start": "1436470",
    "end": "1442830"
  },
  {
    "text": "of the text fields in the index we support filter queries with the be Q",
    "start": "1442830",
    "end": "1449490"
  },
  {
    "text": "parameter P Q stands for boolean query and we can again use boolean logic here",
    "start": "1449490",
    "end": "1454860"
  },
  {
    "text": "it's a prefix notation but in this case we're searching the title field for Ironman and the genre field for action so we're",
    "start": "1454860",
    "end": "1463110"
  },
  {
    "text": "filtering into the action genre and our user is searching for Ironman we can",
    "start": "1463110",
    "end": "1469169"
  },
  {
    "text": "also filter based on integer ranges so we can use the B Q again and here we're",
    "start": "1469169",
    "end": "1474840"
  },
  {
    "text": "saying look the user is searching for Ironman and we're searching for any year before 2010 or less than or equal the",
    "start": "1474840",
    "end": "1483720"
  },
  {
    "text": "ranges we support our single integer beginning and end of the range and then open on either end we can use this",
    "start": "1483720",
    "end": "1491640"
  },
  {
    "text": "integer range searching to support geo filtering so in this case what I'm",
    "start": "1491640",
    "end": "1496770"
  },
  {
    "text": "doing is I'm taking the latitude and longitude of San Francisco and I'm coding them as an integer and you can",
    "start": "1496770",
    "end": "1503250"
  },
  {
    "text": "look in our developer guide we have that there's a simple transform that you do to take degrees to integer and I'm",
    "start": "1503250",
    "end": "1510990"
  },
  {
    "text": "searching for Ironman somewhere within San Francisco the results that I get",
    "start": "1510990",
    "end": "1518550"
  },
  {
    "start": "1516000",
    "end": "1575000"
  },
  {
    "text": "back include what was my rank function how did I rank these results what was",
    "start": "1518550",
    "end": "1523650"
  },
  {
    "text": "the match expression I used in this case Ironman and then I get a set of hits each hit represents one document that",
    "start": "1523650",
    "end": "1531740"
  },
  {
    "text": "matches this query minimally and then we can augment these hits with result",
    "start": "1531740",
    "end": "1537960"
  },
  {
    "text": "fields where we can retrieve the source value of the data that lives on that document so let's go back to our results",
    "start": "1537960",
    "end": "1547110"
  },
  {
    "text": "for Ironman and not only we want actually correct matches we would like",
    "start": "1547110",
    "end": "1552750"
  },
  {
    "text": "to see the best matches come to the top and what we need to do is first of all we want to use our text relevance but we",
    "start": "1552750",
    "end": "1560100"
  },
  {
    "text": "also want to use additional information that has come in like user ratings popularity freshness all of these things",
    "start": "1560100",
    "end": "1565410"
  },
  {
    "text": "so we're gonna see how to incorporate that and build a rank expression that will give us the best most relevant",
    "start": "1565410",
    "end": "1571470"
  },
  {
    "text": "results for movies in this case but we can generalize for the search Ironman so",
    "start": "1571470",
    "end": "1577460"
  },
  {
    "start": "1575000",
    "end": "1623000"
  },
  {
    "text": "the first thing to talk about is text relevance cloud search computes the text relevance score based on the match of",
    "start": "1577460",
    "end": "1585240"
  },
  {
    "text": "user terms to the document terms and we use a function called tf-idf which",
    "start": "1585240",
    "end": "1591270"
  },
  {
    "text": "computes how rare is the user term how rare is the term iron across all of the",
    "start": "1591270",
    "end": "1596730"
  },
  {
    "text": "documents in the in the search engine and then how many times did it occur in the current matching document excuse me",
    "start": "1596730",
    "end": "1606080"
  },
  {
    "text": "text relevance here ranges from 0 to 1000 is important to keep that in mind",
    "start": "1606080",
    "end": "1611730"
  },
  {
    "text": "because as we add additional components we have to make sure that our overall relevance scales correctly and as we're",
    "start": "1611730",
    "end": "1616860"
  },
  {
    "text": "putting text relevance along with other components we want to scale them in that zero to thousand range so that makes",
    "start": "1616860",
    "end": "1622770"
  },
  {
    "text": "sense so Klotz which provides rank expressions which allow you to build an algebraic",
    "start": "1622770",
    "end": "1629400"
  },
  {
    "start": "1623000",
    "end": "1679000"
  },
  {
    "text": "expression based on the text relevance as well as any integer fields in your document and",
    "start": "1629400",
    "end": "1635220"
  },
  {
    "text": "it's computed a scores computer for each document and you can use that score for ranking within the console we can define",
    "start": "1635220",
    "end": "1642420"
  },
  {
    "text": "static relevance functions so in this case we give it a name recency and then",
    "start": "1642420",
    "end": "1648240"
  },
  {
    "text": "an algebraic expression we can then with our queries ranked by this rank",
    "start": "1648240",
    "end": "1653940"
  },
  {
    "text": "expression so we can rank by recency we can also define rank expressions at query time and that means within our",
    "start": "1653940",
    "end": "1661260"
  },
  {
    "text": "query we can say Q equals Ironman we say rank - function name equals and then",
    "start": "1661260",
    "end": "1668040"
  },
  {
    "text": "whatever algebraic expression would like and then rank by that that function this",
    "start": "1668040",
    "end": "1674550"
  },
  {
    "text": "is really nice as well see for being able to do location-based sorting so one",
    "start": "1674550",
    "end": "1680640"
  },
  {
    "text": "of the important things that comes up in finding the right document is that different fields in our document have",
    "start": "1680640",
    "end": "1687870"
  },
  {
    "text": "different values so if a user is searching for Ironman and it matches in the title that's",
    "start": "1687870",
    "end": "1694590"
  },
  {
    "text": "actually more important than if it matches in the description because many movies may have a description that",
    "start": "1694590",
    "end": "1700980"
  },
  {
    "text": "contains the words Ironman but those movies are not Ironman right so if somebody is searching for Ironman",
    "start": "1700980",
    "end": "1707400"
  },
  {
    "text": "we'd like to say okay a match in the title is actually worth a lot more than a match in the description and we can do",
    "start": "1707400",
    "end": "1714960"
  },
  {
    "start": "1713000",
    "end": "1747000"
  },
  {
    "text": "that within cloud search by using our field weighting functionality we create",
    "start": "1714960",
    "end": "1721170"
  },
  {
    "text": "a rank function rank title CS text relevance is a different syntax for",
    "start": "1721170",
    "end": "1726450"
  },
  {
    "text": "doing the text relevance and within that we can define weights for each of our fields and a default weight for all the",
    "start": "1726450",
    "end": "1733440"
  },
  {
    "text": "rest of the fields so in this case we'll say okay we'll wait the title four times the default weight of one in this way if",
    "start": "1733440",
    "end": "1740520"
  },
  {
    "text": "people match a term in the title that'll count four times a match in the description another really popular",
    "start": "1740520",
    "end": "1748860"
  },
  {
    "start": "1747000",
    "end": "1782000"
  },
  {
    "text": "really important source of information is popularity if users are searching for",
    "start": "1748860",
    "end": "1754200"
  },
  {
    "text": "Ironman they'd like to find the most the most popular movies will likely be a",
    "start": "1754200",
    "end": "1759540"
  },
  {
    "text": "little bit more relevant for them if I'm searching for you know socks or if I'm searching for electronics I kind",
    "start": "1759540",
    "end": "1766080"
  },
  {
    "text": "of would like to see the really popular stuff bubble up towards the top so within our Ironman example we have user",
    "start": "1766080",
    "end": "1774420"
  },
  {
    "text": "ratings that rate from zero to ten as well as a meta score which rates which",
    "start": "1774420",
    "end": "1779850"
  },
  {
    "text": "ranges from zero to a hundred so the first thing we have to do here is",
    "start": "1779850",
    "end": "1784950"
  },
  {
    "text": "because clouds are supports integer types only we have to convert our floating-point numbers into integers so",
    "start": "1784950",
    "end": "1790620"
  },
  {
    "text": "our rating from our users from zero to ten we've multiplied by ten and then that would be from 0 to 100 then we want",
    "start": "1790620",
    "end": "1801210"
  },
  {
    "start": "1799000",
    "end": "1900000"
  },
  {
    "text": "to make sure that we wait we include a notion of the number of users that have given this rated this rating to the",
    "start": "1801210",
    "end": "1809550"
  },
  {
    "text": "overall score because a 10 from one user is actually worth a lot less than seven",
    "start": "1809550",
    "end": "1816450"
  },
  {
    "text": "from a hundred thousand users so we have to make sure that we wait our popularity by the number of people who have done",
    "start": "1816450",
    "end": "1823440"
  },
  {
    "text": "that ranking so we can build that score we can say well we'll take our text",
    "start": "1823440",
    "end": "1828690"
  },
  {
    "text": "relevance and we'll add a user rating we're gonna subtract two here because a tricky thing can happen if a hundred",
    "start": "1828690",
    "end": "1835980"
  },
  {
    "text": "people give something a 1 then that unfairly compares to 10 people giving it",
    "start": "1835980",
    "end": "1843150"
  },
  {
    "text": "a 10 so we actually want lower scores to slide off into the negative so that they wait they bring stuff down we also want",
    "start": "1843150",
    "end": "1850800"
  },
  {
    "text": "to make sure that we scale again to within the 1/2 that a thousand range so if we're thinking that okay we're gonna",
    "start": "1850800",
    "end": "1856680"
  },
  {
    "text": "have millions of users if we take a log of the number of user ratings that'll range from about 0 to 6 not 0 1 to 6 and",
    "start": "1856680",
    "end": "1865140"
  },
  {
    "text": "then we also want to multiply by 10 that whole set of terms will give us a score",
    "start": "1865140",
    "end": "1870480"
  },
  {
    "text": "between about 0 and 400 ish and then we want to add in our meta score our meta",
    "start": "1870480",
    "end": "1876090"
  },
  {
    "text": "score goes from 0 to 100 so we want to multiply by 3 which will give us maybe 0 to 300 and really the important thing",
    "start": "1876090",
    "end": "1883500"
  },
  {
    "text": "here is not the numbers that I'm putting in there it's the thinking about how do I take these different pieces and how do",
    "start": "1883500",
    "end": "1889230"
  },
  {
    "text": "I build an algebraic expression that will scale everything so that it doesn't blow away the texture Allah",
    "start": "1889230",
    "end": "1894980"
  },
  {
    "text": "on the one hand but it does respect what I'm trying to bring in on the other hand",
    "start": "1894980",
    "end": "1900580"
  },
  {
    "start": "1900000",
    "end": "2002000"
  },
  {
    "text": "we also want to think about freshness because our users are most likely to be",
    "start": "1900580",
    "end": "1906710"
  },
  {
    "text": "interested in movies that are newer right so we want to be able to say okay well depending on how old the movie is",
    "start": "1906710",
    "end": "1912530"
  },
  {
    "text": "then we want to take older movies and down weight them so they drop lower in the ranking we do have a release date in",
    "start": "1912530",
    "end": "1919100"
  },
  {
    "text": "our movie data so we can use that if we convert it into a number of days since",
    "start": "1919100",
    "end": "1924620"
  },
  {
    "text": "it's been released and we're going to use an exponential decay what this will do is provide us with a decaying value",
    "start": "1924620",
    "end": "1932470"
  },
  {
    "text": "so that really recent movies rate highly and then older movies rate lower typical",
    "start": "1932470",
    "end": "1938590"
  },
  {
    "text": "exponential functions see e to the negative lambda T here T is the time in",
    "start": "1938590",
    "end": "1944030"
  },
  {
    "text": "days and the constant C controls the Y",
    "start": "1944030",
    "end": "1949549"
  },
  {
    "text": "crossing so I picked 200 arbitrarily again to scale into the range of 0 to a",
    "start": "1949549",
    "end": "1955280"
  },
  {
    "text": "thousand so with a 200 constant I do have a Y crossing at 200 that means the",
    "start": "1955280",
    "end": "1961460"
  },
  {
    "text": "maximum value of this function is going to be 200 and then the lambda controls",
    "start": "1961460",
    "end": "1966980"
  },
  {
    "text": "the width of the exponential so I picked 0.1 which gives me about 40 days worth",
    "start": "1966980",
    "end": "1973100"
  },
  {
    "text": "of value for a movie movies within the last 40 days we get some value for this function and I can build that into a",
    "start": "1973100",
    "end": "1980720"
  },
  {
    "text": "rank function oops which got o my image moved there but",
    "start": "1980720",
    "end": "1987770"
  },
  {
    "text": "what you would see under there is 200 times power or no it's exponential off",
    "start": "1987770",
    "end": "1999110"
  },
  {
    "text": "the top of my head my slide got lunged finally we want to deal with location so",
    "start": "1999110",
    "end": "2005830"
  },
  {
    "start": "2002000",
    "end": "2034000"
  },
  {
    "text": "we want to be able to bring users movies that are close to them so we can sort by",
    "start": "2005830",
    "end": "2011650"
  },
  {
    "text": "location and again thinking back to the document just to refresh our memory",
    "start": "2011650",
    "end": "2016960"
  },
  {
    "text": "we're going to have our latitude and longitude embedded within our document and we're going to express them as",
    "start": "2016960",
    "end": "2022720"
  },
  {
    "text": "integers as I said our developer guide gives you a formula that can do this and we also have to think about the",
    "start": "2022720",
    "end": "2029140"
  },
  {
    "text": "denormalization for particular theaters in particular locations how we're given all of that we can use a simple distance",
    "start": "2029140",
    "end": "2037660"
  },
  {
    "start": "2034000",
    "end": "2080000"
  },
  {
    "text": "function like the Cartesian distance function to compute a value for each of our documents that is the distance from",
    "start": "2037660",
    "end": "2044200"
  },
  {
    "text": "our user to that document so well the Cartesian distance function is the different the square root of the sum of",
    "start": "2044200",
    "end": "2051550"
  },
  {
    "text": "the squares of the differences in this case we have the latitude from the document and the latitude that the user",
    "start": "2051550",
    "end": "2058300"
  },
  {
    "text": "is at the longitude from the document and the longitude the user is at and we will build a rank function rank geo",
    "start": "2058300",
    "end": "2065470"
  },
  {
    "text": "square root of and that's the syntax for building that function there are more",
    "start": "2065470",
    "end": "2070510"
  },
  {
    "text": "complex functions like haversine that give you a more accurate more accurate",
    "start": "2070510",
    "end": "2076179"
  },
  {
    "text": "value for distance however you build them in exactly the same way and the one",
    "start": "2076179",
    "end": "2081340"
  },
  {
    "start": "2080000",
    "end": "2095000"
  },
  {
    "text": "wrinkle here is of course the distance is as the distance gets larger the value gets lower so we have to rank in",
    "start": "2081340",
    "end": "2087850"
  },
  {
    "text": "ascending order we want the smallest values first to rank in ascending order with cloudsearch we drank negative geo",
    "start": "2087850",
    "end": "2095940"
  },
  {
    "start": "2095000",
    "end": "2261000"
  },
  {
    "text": "so all of that is a lot of different factors to think about we have popularity we have freshness we",
    "start": "2095940",
    "end": "2102310"
  },
  {
    "text": "have look we have distance all of these we want to put together into some function that's going to make sense to",
    "start": "2102310",
    "end": "2107650"
  },
  {
    "text": "rank our documents in cloud search we have a really nice tool to help out with",
    "start": "2107650",
    "end": "2115230"
  },
  {
    "text": "building rank expressions and this is our rank comparison tool so we're",
    "start": "2115230",
    "end": "2120280"
  },
  {
    "text": "looking at here my console with a number of active domains and the domains come",
    "start": "2120280",
    "end": "2126280"
  },
  {
    "text": "down on the left side we have some information about each domain in the center so a number of searchable",
    "start": "2126280",
    "end": "2131350"
  },
  {
    "text": "documents yeah we'll see if this one actually goes all the way oh that's gonna be a shame if it doesn't",
    "start": "2131350",
    "end": "2138360"
  },
  {
    "text": "I have a feeling we're gonna get cut off",
    "start": "2140310",
    "end": "2145730"
  },
  {
    "text": "we'll see how far we get in this so one thing we can do immediately we can",
    "start": "2153400",
    "end": "2158469"
  },
  {
    "text": "select our domain IMDB and we have available to us a mechanism that where",
    "start": "2158469",
    "end": "2165460"
  },
  {
    "text": "we can just run a test search so as I get my data loaded in as I get ready to go",
    "start": "2165460",
    "end": "2170710"
  },
  {
    "text": "I can I can very easily in the console run a search",
    "start": "2170710",
    "end": "2177660"
  },
  {
    "text": "I feel fairly sure that we're not going to make it to the interesting cool part of this demo",
    "start": "2182420",
    "end": "2188920"
  },
  {
    "text": "okay so rather than watch at quarter speed I think we're gonna jettison this",
    "start": "2192710",
    "end": "2199190"
  },
  {
    "text": "what I will say about the rank comparison tool you should check it out because it actually allows you to see in",
    "start": "2199190",
    "end": "2206630"
  },
  {
    "text": "an a/b panel your ranked expressions and the results of running those expressions",
    "start": "2206630",
    "end": "2213829"
  },
  {
    "text": "for a query that you type in so it's very helpful you can edit the rank expression right there watch the results",
    "start": "2213829",
    "end": "2220040"
  },
  {
    "text": "change and if you're using user logs if you have user queries you can actually",
    "start": "2220040",
    "end": "2226130"
  },
  {
    "text": "put those right in and do some tweaking and tuning and ultimately what you're going to end up with is some kind of",
    "start": "2226130",
    "end": "2233359"
  },
  {
    "text": "combined rank expression and again rank expressions can nest so you're able to",
    "start": "2233359",
    "end": "2238369"
  },
  {
    "text": "take not only the text relevance but rank expressions that you've built like geo and popularity and freshness and",
    "start": "2238369",
    "end": "2246160"
  },
  {
    "text": "combine them algebraically sum them up with weights and in that way sort of tweak and tune and get the different",
    "start": "2246160",
    "end": "2253099"
  },
  {
    "text": "parameters contributing different portions of the of the overall relevance and then you can rank by that combined",
    "start": "2253099",
    "end": "2259760"
  },
  {
    "text": "function so again in this section we",
    "start": "2259760",
    "end": "2264770"
  },
  {
    "start": "2261000",
    "end": "2344000"
  },
  {
    "text": "covered the sort of basics of the Search API we talked about customizing ranking",
    "start": "2264770",
    "end": "2269930"
  },
  {
    "text": "and how to use information like popularity and freshness how to do field weighting how to do geo searching and",
    "start": "2269930",
    "end": "2276470"
  },
  {
    "text": "how to combine these things into a into a rec expression that overall should bring the documents that your users are",
    "start": "2276470",
    "end": "2282410"
  },
  {
    "text": "looking for to the top of your search results and we did not see the rank expression comparison tool but I'll",
    "start": "2282410",
    "end": "2288200"
  },
  {
    "text": "leave that as an exercise for the class we're going to move into now search user",
    "start": "2288200",
    "end": "2295160"
  },
  {
    "text": "interface and talk about just a couple of elements that you can expose in your",
    "start": "2295160",
    "end": "2300500"
  },
  {
    "text": "UI to help users get to the content that they want so looking at again a sort of",
    "start": "2300500",
    "end": "2308030"
  },
  {
    "text": "typical search UI down the right side we see what are called facets facet show us",
    "start": "2308030",
    "end": "2314200"
  },
  {
    "text": "counts of documents in the results set that contain particular values for this",
    "start": "2314200",
    "end": "2320390"
  },
  {
    "text": "query so for the query Ironman and looking at genres we see that 60",
    "start": "2320390",
    "end": "2326299"
  },
  {
    "text": "two of the results overall have the value action in the genre in the for the",
    "start": "2326299",
    "end": "2331699"
  },
  {
    "text": "movies in the result set we typically expose this and allow our users to click on those to narrow their",
    "start": "2331699",
    "end": "2338329"
  },
  {
    "text": "search to just search results with values for that with that value for that",
    "start": "2338329",
    "end": "2343400"
  },
  {
    "text": "attribute so in this case again we have our genre we have action sci-fi fantasy",
    "start": "2343400",
    "end": "2349939"
  },
  {
    "text": "comedies so let's see how to get that onto the screen so first simple for this",
    "start": "2349939",
    "end": "2355759"
  },
  {
    "text": "simple faceting case the document of course must contain a field genre and",
    "start": "2355759",
    "end": "2361189"
  },
  {
    "text": "that field for our movies is going to be multi valued because movies can have multiples of those but within the",
    "start": "2361189",
    "end": "2366920"
  },
  {
    "text": "document itself we're going to have a field called genre we then need to configure that field to be available as",
    "start": "2366920",
    "end": "2374029"
  },
  {
    "start": "2370000",
    "end": "2451000"
  },
  {
    "text": "a source for faceting and in this case you can see in the fifth column there the facet column I simply check the",
    "start": "2374029",
    "end": "2380150"
  },
  {
    "text": "checkbox it's all I need to do to be able to retrieve facet counts for search results for that field I then in the",
    "start": "2380150",
    "end": "2388819"
  },
  {
    "text": "query I send a Q equals Iron Man and then I say facet equals and I give the",
    "start": "2388819",
    "end": "2394849"
  },
  {
    "text": "set of fields that I'd like to receive facets for with my result I get my",
    "start": "2394849",
    "end": "2400880"
  },
  {
    "text": "standard sort of result header including my hits and at the end of it I receive a facets section in the facets section I",
    "start": "2400880",
    "end": "2408170"
  },
  {
    "text": "receive each of the facets that I asked for along with constraints which are the",
    "start": "2408170",
    "end": "2413779"
  },
  {
    "text": "possible which are the values that documents have for that facet in this result set and if you think about it it",
    "start": "2413779",
    "end": "2421069"
  },
  {
    "text": "looks very close to what we're seeing on the screen so when we want to put it on the screen it's very straightforward",
    "start": "2421069",
    "end": "2426589"
  },
  {
    "text": "we're gonna have a div it's gonna have an unordered list in it and we have a little bit of PHP that simply walks",
    "start": "2426589",
    "end": "2432650"
  },
  {
    "text": "through all of the constraints and pulls out the name and the value and then puts",
    "start": "2432650",
    "end": "2438619"
  },
  {
    "text": "those into a list item really straightforward to get this on the screen the one thing I didn't throw in",
    "start": "2438619",
    "end": "2444380"
  },
  {
    "text": "here was an anchor of course we want to have an anchor which will generate the query that includes that facet value now",
    "start": "2444380",
    "end": "2453019"
  },
  {
    "start": "2451000",
    "end": "2623000"
  },
  {
    "text": "sometimes we have hierarchical structure within our attributes so we for in this",
    "start": "2453019",
    "end": "2458150"
  },
  {
    "text": "case we are tracking oscars and within oscars we have awards and nominations and then",
    "start": "2458150",
    "end": "2464970"
  },
  {
    "text": "for Oscars for for movies that have won Oscar Awards we have different words they could win then you have that Best",
    "start": "2464970",
    "end": "2470880"
  },
  {
    "text": "Actor Best Actress Supporting Actor Supporting Actress and even within that we have actors that have individual",
    "start": "2470880",
    "end": "2477630"
  },
  {
    "text": "actors that have won that award so I'm going to switch my query from Iron Man to Lincoln now because Iron Man actually",
    "start": "2477630",
    "end": "2484920"
  },
  {
    "text": "only won two pretty obscure Oscars but we're gonna talk about how do we build this sort of search UI so again in the",
    "start": "2484920",
    "end": "2492120"
  },
  {
    "text": "document we need to have the supporting data for this this hierarchical",
    "start": "2492120",
    "end": "2497790"
  },
  {
    "text": "structure and the way we express it is for each level of the tree we're gonna",
    "start": "2497790",
    "end": "2503160"
  },
  {
    "text": "have one field so at the top level we'll have an Oscar one field which will have",
    "start": "2503160",
    "end": "2509210"
  },
  {
    "text": "awards or nominations or nothing at the second level we'll have the individual",
    "start": "2509210",
    "end": "2515700"
  },
  {
    "text": "awards that that that that movie won so we'll have either Best Actor Best Actress and we're actually coding this",
    "start": "2515700",
    "end": "2522420"
  },
  {
    "text": "as a path so we have Awards Best Actor at the third level we have the individual actors that won the",
    "start": "2522420",
    "end": "2528420"
  },
  {
    "text": "individual awards for this movie so we have Awards Best Actor Daniel day-lewis so with this structure we can actually",
    "start": "2528420",
    "end": "2536220"
  },
  {
    "text": "write a query which is linked in and then facet on each of these levels of",
    "start": "2536220",
    "end": "2541740"
  },
  {
    "text": "the hierarchy if we do that we get again our standard result with hits then we",
    "start": "2541740",
    "end": "2549300"
  },
  {
    "text": "also get for Oscar one we'll see a count for how many movies that match the query",
    "start": "2549300",
    "end": "2555570"
  },
  {
    "text": "Lincoln have an award and how many have a nomination at the second level we'll",
    "start": "2555570",
    "end": "2561900"
  },
  {
    "text": "see how many have a Best Actor Award for Best Actress or odd and at the lowest",
    "start": "2561900",
    "end": "2568020"
  },
  {
    "text": "level we'll see how many actors that match this query have actually won Award",
    "start": "2568020",
    "end": "2573390"
  },
  {
    "text": "for Best Actor etc to put that up on the screen we're going to actually just",
    "start": "2573390",
    "end": "2578970"
  },
  {
    "text": "strip off the leading portion of the of the name at each level so we can just",
    "start": "2578970",
    "end": "2585600"
  },
  {
    "text": "say Awards 23 and we can say Best Actor 6 and put that on the screen",
    "start": "2585600",
    "end": "2591480"
  },
  {
    "text": "hierarchically and we'll have our hierarchical display now this is actually useful in more than",
    "start": "2591480",
    "end": "2598589"
  },
  {
    "text": "just faceting because often our data has inherent structure in it as well which",
    "start": "2598589",
    "end": "2603690"
  },
  {
    "text": "is hierarchical and in this with the same representation method of having fields at each level of the tree we can",
    "start": "2603690",
    "end": "2610740"
  },
  {
    "text": "support some really nice complicated drill down so here I can search for just",
    "start": "2610740",
    "end": "2616200"
  },
  {
    "text": "oscar won awards and if I do that I retrieve all movies that have any award",
    "start": "2616200",
    "end": "2621900"
  },
  {
    "text": "at all if I I can drill deeper and say Oscar to Best Actor this would retrieve",
    "start": "2621900",
    "end": "2628589"
  },
  {
    "start": "2623000",
    "end": "2666000"
  },
  {
    "text": "all movies that have any Best Actor Award and at the third level I can retrieve all movies that Daniel",
    "start": "2628589",
    "end": "2634770"
  },
  {
    "text": "day-lewis won a Best Actor for and we can combine these again with user enter",
    "start": "2634770",
    "end": "2641250"
  },
  {
    "text": "data or other components of a query so that we can find for instance movies",
    "start": "2641250",
    "end": "2647130"
  },
  {
    "text": "that have star in their text fields along with having won a Best Actor Award",
    "start": "2647130",
    "end": "2654650"
  },
  {
    "text": "so in this section we covered very simple faceting some hierarchical",
    "start": "2655460",
    "end": "2661079"
  },
  {
    "text": "faceting and then a little bit about how do you do hierarchical data handling",
    "start": "2661079",
    "end": "2666890"
  },
  {
    "text": "we're just going to touch quickly on performance and scale and just give you a couple of best practices to think",
    "start": "2667220",
    "end": "2672270"
  },
  {
    "text": "about so the first thing is we have to think about the search algorithm if",
    "start": "2672270",
    "end": "2678630"
  },
  {
    "start": "2673000",
    "end": "2693000"
  },
  {
    "text": "we're going to think about performance and the search algorithm works again by constructing a match set based on the",
    "start": "2678630",
    "end": "2685020"
  },
  {
    "text": "text from the user query and from interface components and then ranking",
    "start": "2685020",
    "end": "2690510"
  },
  {
    "text": "those documents so we have two portions of performance the most the the biggest",
    "start": "2690510",
    "end": "2695880"
  },
  {
    "text": "contributor to search latency is going to be the match set size the more documents you bring into the match set",
    "start": "2695880",
    "end": "2701970"
  },
  {
    "text": "the more computation happens downstream so if you can reduce the number of",
    "start": "2701970",
    "end": "2708599"
  },
  {
    "text": "matches by adding additional information from your application you'll actually speed up your performance quite a bit",
    "start": "2708599",
    "end": "2714079"
  },
  {
    "start": "2714000",
    "end": "2762000"
  },
  {
    "text": "also within this text matching and this is somewhat counterintuitive but text matching performs much better than",
    "start": "2714079",
    "end": "2720900"
  },
  {
    "text": "integer matching and this is because we actually do that do a two step match first we actually grab the list of",
    "start": "2720900",
    "end": "2728430"
  },
  {
    "text": "matching documents as I said from the for each of the text terms and then use",
    "start": "2728430",
    "end": "2733650"
  },
  {
    "text": "a boolean combination of them we then post process with integer filtering so",
    "start": "2733650",
    "end": "2739290"
  },
  {
    "text": "if you don't have a text component for example we have to pull the entire set of documents and walk them linearly and",
    "start": "2739290",
    "end": "2746970"
  },
  {
    "text": "scan them to do the integer filtering so you get much better performance if you",
    "start": "2746970",
    "end": "2752430"
  },
  {
    "text": "use text to narrow down your number your matches before using strictly integers",
    "start": "2752430",
    "end": "2758790"
  },
  {
    "text": "and I think Pete's going to give us a really nice example of this and finally",
    "start": "2758790",
    "end": "2763950"
  },
  {
    "start": "2762000",
    "end": "2779000"
  },
  {
    "text": "of course the more complex your relevance functions and the more documents we have to compute them for the longer it takes to do it so there's",
    "start": "2763950",
    "end": "2771870"
  },
  {
    "text": "a trade-off here you want to have the best relevance and you have to think a little bit about can i optimize can I cut that down a little bit and just in",
    "start": "2771870",
    "end": "2780720"
  },
  {
    "start": "2779000",
    "end": "2811000"
  },
  {
    "text": "terms of optimizing index size as I said text matching is quicker but integers",
    "start": "2780720",
    "end": "2788550"
  },
  {
    "text": "store smaller so if you have a cost concern and you're trying to build as small an index as possible you can trade",
    "start": "2788550",
    "end": "2795480"
  },
  {
    "text": "off by using integers instead of for instance literals that are encoding some enumerated type instead of storing",
    "start": "2795480",
    "end": "2802290"
  },
  {
    "text": "sci-fi/fantasy you can store for and then you know that that's a that's a",
    "start": "2802290",
    "end": "2808610"
  },
  {
    "text": "translation that you have to make between those setting result fields is great you can pull data out of the",
    "start": "2808610",
    "end": "2814890"
  },
  {
    "start": "2811000",
    "end": "2853000"
  },
  {
    "text": "search engine however we have to store all of that data so if you're concerned with size if you turn off result handle",
    "start": "2814890",
    "end": "2821670"
  },
  {
    "text": "it result for your fields we won't store that data this is a best practice anyway the search engine does best if it's just",
    "start": "2821670",
    "end": "2828960"
  },
  {
    "text": "pushing around document IDs if your document ID is a key to an external source like dynamo you can then pull",
    "start": "2828960",
    "end": "2835980"
  },
  {
    "text": "that data out of the external source for display to your users and enabling",
    "start": "2835980",
    "end": "2841860"
  },
  {
    "text": "faceting does increase the size of the index ultimately and you have to trade-off here",
    "start": "2841860",
    "end": "2846870"
  },
  {
    "text": "do I want the feature or do I actually want to work on bringing my size down",
    "start": "2846870",
    "end": "2853790"
  },
  {
    "start": "2853000",
    "end": "2891000"
  },
  {
    "text": "so we took a really pretty broad walk through our movies data and sort of",
    "start": "2854609",
    "end": "2861430"
  },
  {
    "text": "thought about how can we get all of this information into cloud search how do we flatten things out and bring them into",
    "start": "2861430",
    "end": "2867700"
  },
  {
    "text": "the set of documents that we want our users to be able to retrieve how do we keep those documents up-to-date how do",
    "start": "2867700",
    "end": "2874299"
  },
  {
    "text": "we build queries that allow our users to match the content and bring it back to them as search results we talked about a",
    "start": "2874299",
    "end": "2881349"
  },
  {
    "text": "couple of UI components in terms of hierarchical facets simple facets and how to deal with hierarchical data and",
    "start": "2881349",
    "end": "2888579"
  },
  {
    "text": "finally we talked about getting the most out of your index so I am going to wrap up right here and I'm going to introduce",
    "start": "2888579",
    "end": "2895059"
  },
  {
    "start": "2891000",
    "end": "2906000"
  },
  {
    "text": "Pete simpkin from Elsevier he's gonna tell us about the cool stuff they're",
    "start": "2895059",
    "end": "2900339"
  },
  {
    "text": "doing so my name is Peter simpkin I'm a",
    "start": "2900339",
    "end": "2910750"
  },
  {
    "start": "2906000",
    "end": "3439000"
  },
  {
    "text": "solution architect for Elsevier and I'm just going to walk you through our implementation of using cloud search in",
    "start": "2910750",
    "end": "2919240"
  },
  {
    "text": "terms of just a little bit of introduction to our sphere and then we recover on our problem statement from a business perspective what type of",
    "start": "2919240",
    "end": "2925210"
  },
  {
    "text": "Stuart's problem we're trying to solve hopefully a little bit of architecture and then we'll walk through some code so",
    "start": "2925210",
    "end": "2931900"
  },
  {
    "text": "some background elsevier is part of the readouts of a group so reed elsevier",
    "start": "2931900",
    "end": "2937599"
  },
  {
    "text": "still one of the leading providers of information based solutions for",
    "start": "2937599",
    "end": "2942630"
  },
  {
    "text": "scientific academic legal content also",
    "start": "2942630",
    "end": "2950140"
  },
  {
    "text": "we're employs about 7,000 employees a large geographical footprint in 20 origin in 26 countries and essentially",
    "start": "2950140",
    "end": "2957970"
  },
  {
    "text": "what we do is we support the scientific community the healthcare professionals",
    "start": "2957970",
    "end": "2963700"
  },
  {
    "text": "and students worldwide and these customers either come in as individuals as corporate or government etc and then",
    "start": "2963700",
    "end": "2972670"
  },
  {
    "text": "we provide a wide range of products nowadays products are some of them a traditional print Bukit content so it's",
    "start": "2972670",
    "end": "2979450"
  },
  {
    "text": "either the lancet or major reference works but we've also got an increasingly",
    "start": "2979450",
    "end": "2984690"
  },
  {
    "text": "online electronic product formats and these products like science direct and clinical key provide the deep insight",
    "start": "2984690",
    "end": "2992760"
  },
  {
    "text": "into the academic and research world and provide some of the answers and solutions they're looking for so maybe a",
    "start": "2992760",
    "end": "3001670"
  },
  {
    "text": "bit of a recap in terms of the our use of cloud search so we have our online",
    "start": "3001670",
    "end": "3006859"
  },
  {
    "text": "platforms ScienceDirect and clinical keys for example and these are essentially the audience facing",
    "start": "3006859",
    "end": "3013309"
  },
  {
    "text": "platforms so they will have their own web content management systems they'll also potentially have their own",
    "start": "3013309",
    "end": "3018849"
  },
  {
    "text": "search and that search provides a deep insight for the medical and scientific",
    "start": "3018849",
    "end": "3024849"
  },
  {
    "text": "community however the gray box is represented the our content systems and",
    "start": "3024849",
    "end": "3031480"
  },
  {
    "text": "these are our internal content systems where where we acquire the raw material and then we fabricate in which the",
    "start": "3031480",
    "end": "3038539"
  },
  {
    "text": "material ready for publication so the real problem statement here is our platforms need to be able to they",
    "start": "3038539",
    "end": "3045380"
  },
  {
    "text": "haven't got a central repository to be able to search all of our content so we have something in the region of give or",
    "start": "3045380",
    "end": "3051380"
  },
  {
    "text": "take 50 content management systems within our sphere so to us to find all content elsewhere items very difficult",
    "start": "3051380",
    "end": "3058609"
  },
  {
    "text": "and each of those online platforms have a relationship to the underlying content management system and ultimately what",
    "start": "3058609",
    "end": "3065240"
  },
  {
    "text": "happens is it takes somewhere in the region of 24 hours from acquiring our content to be making it available online",
    "start": "3065240",
    "end": "3073029"
  },
  {
    "text": "in terms of our content is very much based on electronic format however the",
    "start": "3073029",
    "end": "3080029"
  },
  {
    "text": "actual stretch of that content still reflects the traditional print model so for example a book consists of a number",
    "start": "3080029",
    "end": "3086270"
  },
  {
    "text": "of chapters which consists of paragraphs which consists of images and we want to expose those images and paragraphs to be",
    "start": "3086270",
    "end": "3093559"
  },
  {
    "text": "searchable not just a product and this where it comes to Venus so if I was a medical researcher and there's been a",
    "start": "3093559",
    "end": "3099970"
  },
  {
    "text": "scientific breakthrough relating to that know heart disease and diabetes and it's",
    "start": "3099970",
    "end": "3106010"
  },
  {
    "text": "a real groundbreaking effect and I want to have to publish a new book and I want to be able to find an image that I could",
    "start": "3106010",
    "end": "3112339"
  },
  {
    "text": "include in my next book well I could go through all the individual content management systems try to find it",
    "start": "3112339",
    "end": "3118400"
  },
  {
    "text": "but I'll probably give up to be honest I'll just go into the marketplace and I'll just commissioned a freelancer to",
    "start": "3118400",
    "end": "3123890"
  },
  {
    "text": "create me a new image or I'll go in the marketplace and I see by the image and it probably well that same image in our",
    "start": "3123890",
    "end": "3130730"
  },
  {
    "text": "survey in our content a state will probably have it 10 times already it's just a problem statement so how do we",
    "start": "3130730",
    "end": "3137359"
  },
  {
    "text": "like to solve this we've implemented a search or content search solution where",
    "start": "3137359",
    "end": "3144140"
  },
  {
    "text": "the individual content platforms provide all the content management system provide metadata announcements for that",
    "start": "3144140",
    "end": "3151010"
  },
  {
    "text": "project for that asset and that's where we have that comprehensive index and",
    "start": "3151010",
    "end": "3156349"
  },
  {
    "text": "searchable content at all our content ALC owns so from a platform perspective they've just got one place to go to to",
    "start": "3156349",
    "end": "3163160"
  },
  {
    "text": "find all that content and also they don't need to be aware of the underlying content management systems what",
    "start": "3163160",
    "end": "3168619"
  },
  {
    "text": "technology is on how they deliver that content they just have one place to go to so that's the theory so we look at",
    "start": "3168619",
    "end": "3176869"
  },
  {
    "text": "the actual architecture with Amazon Web Services so again we've got a silo content management systems which are",
    "start": "3176869",
    "end": "3183890"
  },
  {
    "text": "located predominantly in Europe and America and every time they acquire assets we're going to announce them to",
    "start": "3183890",
    "end": "3189799"
  },
  {
    "text": "the cloud suits and bar off we're going to announce them to the pipeline simple",
    "start": "3189799",
    "end": "3195230"
  },
  {
    "text": "workflow and not just two things really we take that original manifestation file",
    "start": "3195230",
    "end": "3200650"
  },
  {
    "text": "and then we convert it into a cloud service SDF document which will includes",
    "start": "3200650",
    "end": "3206089"
  },
  {
    "text": "all of our fields our facets etc and those documents are backed up and delivered to the cloud so its domain and",
    "start": "3206089",
    "end": "3212690"
  },
  {
    "text": "then the second operation is we deliver that document also to Diamond ODB and that includes non searchable fields so",
    "start": "3212690",
    "end": "3219950"
  },
  {
    "text": "that include things like transactional properties things like checky and check out of that individual asset it will",
    "start": "3219950",
    "end": "3226490"
  },
  {
    "text": "include all the asset versions but tensley it will also include a URL reference about to the underlying",
    "start": "3226490",
    "end": "3231770"
  },
  {
    "text": "content management system so from a platform perspective where it took 12 hours or 24 hours to acquire that",
    "start": "3231770",
    "end": "3238010"
  },
  {
    "text": "content and make it available to the researcher they can now ask the question find me or nettle images that are",
    "start": "3238010",
    "end": "3244970"
  },
  {
    "text": "changed in the last 60 minutes or added in the last 60 or so find all the native",
    "start": "3244970",
    "end": "3250339"
  },
  {
    "text": "images that have been added or modified in their last 60 seconds and that search is executed",
    "start": "3250339",
    "end": "3256700"
  },
  {
    "text": "against cloud search the results are maps against your diamond ODB and diamond a DB will have a link to the",
    "start": "3256700",
    "end": "3263600"
  },
  {
    "text": "underlying content store and that asset will be served up so this is part of the",
    "start": "3263600",
    "end": "3269000"
  },
  {
    "text": "virtual total warehouse so from a platform perspective it seems like all",
    "start": "3269000",
    "end": "3274310"
  },
  {
    "text": "the underlying content management systems look and feel and act like a single unified environment but this is",
    "start": "3274310",
    "end": "3283160"
  },
  {
    "text": "just the first foundation block what we're doing to do next is get the content management systems also to",
    "start": "3283160",
    "end": "3288680"
  },
  {
    "text": "provide not only the metadata but the binary assets so we actually have all of",
    "start": "3288680",
    "end": "3293900"
  },
  {
    "text": "our binary acids stored in s3 and then we can do that our net net storage solution and then we can expose that",
    "start": "3293900",
    "end": "3300740"
  },
  {
    "text": "through a new cloud front or Akamai and essentially where we're going with this",
    "start": "3300740",
    "end": "3305960"
  },
  {
    "text": "is from a platform perspective rather than shipping binaries around our corporate network we can actually",
    "start": "3305960",
    "end": "3311990"
  },
  {
    "text": "provide a URL link to that underlying content and then take that one step",
    "start": "3311990",
    "end": "3318290"
  },
  {
    "text": "further what we are you have here in the virtual total warehouse is our four pillars of a content management system",
    "start": "3318290",
    "end": "3324160"
  },
  {
    "text": "we've got our unified enterprise content search solution we've got a metadata",
    "start": "3324160",
    "end": "3330740"
  },
  {
    "text": "repository we've got our flat content in terms of binary assets and we also got",
    "start": "3330740",
    "end": "3336290"
  },
  {
    "text": "our pipeline capability so needing that with Amazon services they are fed to be initially coupled architecture that is",
    "start": "3336290",
    "end": "3344060"
  },
  {
    "text": "also scalable so going forward the solution were implementing now is",
    "start": "3344060",
    "end": "3349790"
  },
  {
    "text": "completely content agnostic in the future we are able to acquire content directly into the virtual total",
    "start": "3349790",
    "end": "3355400"
  },
  {
    "text": "warehouse and we're dropped the word virtual because what'll happen is we'll look to migrate and decommission all of",
    "start": "3355400",
    "end": "3362630"
  },
  {
    "text": "our internal content management systems and deliver everything through a unified total warehouse so a formula URI certs",
    "start": "3362630",
    "end": "3372170"
  },
  {
    "text": "perspective as I say two platforms themselves access the virtual total",
    "start": "3372170",
    "end": "3377330"
  },
  {
    "text": "warehouse through the API so this is a reason why this search ey is very simple it's not really geared up for end users",
    "start": "3377330",
    "end": "3384380"
  },
  {
    "text": "so within the virtual total warehouse we have something in the region of 40 million documents of which represent",
    "start": "3384380",
    "end": "3391819"
  },
  {
    "text": "over a quarter of a billion unique distinct assets which are individually",
    "start": "3391819",
    "end": "3396890"
  },
  {
    "text": "searchable and retrievable and that number is continuing to grow and then if",
    "start": "3396890",
    "end": "3402019"
  },
  {
    "text": "we go back to the use case I mentioned before a book editor I want to find all",
    "start": "3402019",
    "end": "3407420"
  },
  {
    "text": "our documents that contain the word heart attack combine that with the title",
    "start": "3407420",
    "end": "3412519"
  },
  {
    "text": "index for diabetes and lastly on the facet aggregation 23 and this is where",
    "start": "3412519",
    "end": "3421220"
  },
  {
    "text": "we're saving on our storage costs our index costs by change in facet 23 is a",
    "start": "3421220",
    "end": "3426499"
  },
  {
    "text": "conversion of really multimedia components so what we have here now is a potential candidate of 406 components",
    "start": "3426499",
    "end": "3434599"
  },
  {
    "text": "that I can as an author I can use them and next book potentially filter down so",
    "start": "3434599",
    "end": "3441799"
  },
  {
    "start": "3439000",
    "end": "3600000"
  },
  {
    "text": "some of the drivers for selecting cloudsearch the beauty for us is that",
    "start": "3441799",
    "end": "3447380"
  },
  {
    "text": "it's fully managed service from a development perspective I didn't need to",
    "start": "3447380",
    "end": "3452390"
  },
  {
    "text": "focus on worrying about the actual search service I could actually worry about other aspects and a value add",
    "start": "3452390",
    "end": "3459259"
  },
  {
    "text": "aspects on future total warehouse so it comes as a managed service in terms of scalability we saw it peaked around",
    "start": "3459259",
    "end": "3468140"
  },
  {
    "text": "about 160 queries per second where the infrastructure scaled up and then scale it back down again and then from a",
    "start": "3468140",
    "end": "3475369"
  },
  {
    "text": "DevOps perspective it was so simple to script and deploy and effectively has",
    "start": "3475369",
    "end": "3482299"
  },
  {
    "text": "taken zero maintenance in production one of the things I'd recommend is probably working with the cloud search team to",
    "start": "3482299",
    "end": "3488900"
  },
  {
    "text": "develop that proof of concept and we developed a subset of the documents and then we was able to extrapolate that to",
    "start": "3488900",
    "end": "3495079"
  },
  {
    "text": "work out what our future costs would be in 12 months time and then search service search engine as a service so",
    "start": "3495079",
    "end": "3502579"
  },
  {
    "text": "everything is managed behind the scene if we didn't need to worry about that in terms of course yeah you get a monthly",
    "start": "3502579",
    "end": "3508849"
  },
  {
    "text": "bill but you still need to potentially watch out for the actual costs and they potentially optimize and tune your",
    "start": "3508849",
    "end": "3514729"
  },
  {
    "text": "queries and number facets and number fields in news in terms of a development perspective",
    "start": "3514729",
    "end": "3521710"
  },
  {
    "text": "just looking at some code here's an example of some of the tuning we've had to do so this is just a query that's",
    "start": "3521710",
    "end": "3528580"
  },
  {
    "text": "taken from production so essentially this query is to say in find for given journal find all journal articles that",
    "start": "3528580",
    "end": "3535540"
  },
  {
    "text": "are not deleted between a cover date range of 2005 to 2013 and this query",
    "start": "3535540",
    "end": "3541210"
  },
  {
    "text": "took 5 seconds to execute in production and the reason behind this when the main regions is the number of domestic",
    "start": "3541210",
    "end": "3547690"
  },
  {
    "text": "clauses and the deep nesting in this query so where possible optimize your",
    "start": "3547690",
    "end": "3552970"
  },
  {
    "text": "number of debt for the actual query and you'll get an improved response so this is the optimized query and it's now",
    "start": "3552970",
    "end": "3559900"
  },
  {
    "text": "improved from five seconds to two and a half seconds so how can we improve this",
    "start": "3559900",
    "end": "3565480"
  },
  {
    "text": "further there's two strategies one of the strategies John alluded to earlier is to add textual fields to the integer",
    "start": "3565480",
    "end": "3573910"
  },
  {
    "text": "query the other approach is also to add the most restricted part of the query to",
    "start": "3573910",
    "end": "3580870"
  },
  {
    "text": "the interested field so for example if I was to combine each of these queries",
    "start": "3580870",
    "end": "3586480"
  },
  {
    "text": "with biases and and type the new query that looked like this and now this is",
    "start": "3586480",
    "end": "3591880"
  },
  {
    "text": "operating in 17 milliseconds so just to",
    "start": "3591880",
    "end": "3597190"
  },
  {
    "text": "wrap up in terms of cloud search in terms of observations you know thumbs up in terms of giving us a speed to market",
    "start": "3597190",
    "end": "3603760"
  },
  {
    "text": "is giving us that flexibility yes you do have to spend some time in queueing",
    "start": "3603760",
    "end": "3609130"
  },
  {
    "text": "tuning the queries but once you've got that developer mindset you actually",
    "start": "3609130",
    "end": "3614140"
  },
  {
    "text": "start writing queries the tune way and you start optimizing your queries is second nature in terms of what cloud",
    "start": "3614140",
    "end": "3622120"
  },
  {
    "text": "service is given is is really that first vertical slice of capability in the cloud and it's given us that agility to",
    "start": "3622120",
    "end": "3629260"
  },
  {
    "text": "able to add on your binary assets add on your pipeline capability and it's a way",
    "start": "3629260",
    "end": "3635500"
  },
  {
    "text": "of moving from our legacy systems to the cloud the app news and Amazon services",
    "start": "3635500",
    "end": "3641670"
  },
  {
    "text": "and providing that flexibility and agility and speed to market so that concludes please my part to talk",
    "start": "3641670",
    "end": "3651400"
  },
  {
    "text": "yeah my back I'm back alright everybody so thanks very much peed really",
    "start": "3651400",
    "end": "3657200"
  },
  {
    "text": "appreciate that awesome example of the",
    "start": "3657200",
    "end": "3664220"
  },
  {
    "text": "optimization I thought that was really fun to work on that as well I've got a set of resources for you we",
    "start": "3664220",
    "end": "3670460"
  },
  {
    "text": "have our overview page at aws.amazon.com slash cloudsearch cloudsearch is free",
    "start": "3670460",
    "end": "3677390"
  },
  {
    "text": "for your first 30 days of usage so if you want to try it out kick the tires play with some of the examples we've",
    "start": "3677390",
    "end": "3682790"
  },
  {
    "text": "gone through today it's free to do that and my contact information is up there",
    "start": "3682790",
    "end": "3687800"
  },
  {
    "text": "if you have a use case you want me to talk through with you i'm happy to do it",
    "start": "3687800",
    "end": "3693410"
  },
  {
    "text": "please remember to give us feedback on the talk and there is apparently a daily",
    "start": "3693410",
    "end": "3699140"
  },
  {
    "text": "drawing for completed surveys so i'm just gonna pop back to the resources",
    "start": "3699140",
    "end": "3705470"
  },
  {
    "text": "page and i'll hang out up here and you can come up and ask me questions if you like and thank you very much for attending appreciate it",
    "start": "3705470",
    "end": "3713230"
  }
]