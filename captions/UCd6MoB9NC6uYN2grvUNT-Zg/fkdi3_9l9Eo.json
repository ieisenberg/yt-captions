[
  {
    "text": "all right it's about quarter after so we're going to get started here um so thank you everyone for coming",
    "start": "6960",
    "end": "14679"
  },
  {
    "text": "um first of all I am am Ryan uh and I am the tech lead of the user data team at",
    "start": "14679",
    "end": "22160"
  },
  {
    "text": "twilio uh and I'm going to talk about three topics today so the first topic is going to be about the history and",
    "start": "22160",
    "end": "28760"
  },
  {
    "text": "evolution of our data based infrastructure at fio from where we started with a few single myql instances",
    "start": "28760",
    "end": "36840"
  },
  {
    "text": "to where we are today with uh a few sharded myql clusters as well as some of",
    "start": "36840",
    "end": "43120"
  },
  {
    "text": "the managed databases that we've started to adopt such as dynamodb and red shift second topic will cover some",
    "start": "43120",
    "end": "50039"
  },
  {
    "text": "examples of how we have started to adopt uh some managed database Services into",
    "start": "50039",
    "end": "55600"
  },
  {
    "text": "our infrastructure and into our applications um and two concrete examples with Dynamo DB and red",
    "start": "55600",
    "end": "61640"
  },
  {
    "text": "shift and then finally I will wrap up with how the adoption of managed",
    "start": "61640",
    "end": "66960"
  },
  {
    "text": "databases has a influen and affected us as as an engineer engineering organization and as a",
    "start": "66960",
    "end": "74640"
  },
  {
    "text": "culture uh so first of all for those of you who do not who are not familiar with fio uh we are a Communications as a",
    "start": "75080",
    "end": "82400"
  },
  {
    "text": "service platform and we provide an API that allows application developers to",
    "start": "82400",
    "end": "87600"
  },
  {
    "text": "embed Voiceover IP and messaging in into their applications uh so a very simple example",
    "start": "87600",
    "end": "95360"
  },
  {
    "text": "of how it works is when you sign up with twilio you purchase a phone number and",
    "start": "95360",
    "end": "101320"
  },
  {
    "text": "with that phone number you configure an HTTP URL and when a call is made to uh that",
    "start": "101320",
    "end": "109320"
  },
  {
    "text": "phone number from a uh another phone or some other client device toio receives that call and we turn that into an HTP",
    "start": "109320",
    "end": "117759"
  },
  {
    "text": "request that we send to the URL that's conf figured on that number we take the response from your",
    "start": "117759",
    "end": "124840"
  },
  {
    "text": "application server uh and process the instructions that it provides so for",
    "start": "124840",
    "end": "129879"
  },
  {
    "text": "example uh your application might return XML that's uh that plays a message and then forwards that phone call to another",
    "start": "129879",
    "end": "138440"
  },
  {
    "text": "number so what is the user data team at fio so we have three primary responsibilities uh so the first is that",
    "start": "138680",
    "end": "145360"
  },
  {
    "text": "we scale and manage our backend database infrastructure so these are all the databases that store all of our",
    "start": "145360",
    "end": "150879"
  },
  {
    "text": "customers historical call and messaging data uh as well as some other data at rest on top of those uh on top of that",
    "start": "150879",
    "end": "157680"
  },
  {
    "text": "infostructure we build customer facing data apis so if you make a request to the trilo API to get your call or",
    "start": "157680",
    "end": "164120"
  },
  {
    "text": "message history uh our backend service is actually what fulfills that request and then finally we manage all",
    "start": "164120",
    "end": "170920"
  },
  {
    "text": "of the data policies and the security around that data",
    "start": "170920",
    "end": "176080"
  },
  {
    "text": "address so a little bit about the history of database infrastructure at",
    "start": "176080",
    "end": "181640"
  },
  {
    "text": "tlio so for those of you who have developed a Communications application before know that Communications are",
    "start": "181640",
    "end": "187720"
  },
  {
    "text": "inherently stateful so for example here a call can go from queued to ringing uh to in",
    "start": "187720",
    "end": "194319"
  },
  {
    "text": "progress to completed and a message can go from cued to sending to sent to",
    "start": "194319",
    "end": "200360"
  },
  {
    "text": "delivered and the pipeline through which these states are transitioned and stored",
    "start": "200360",
    "end": "206560"
  },
  {
    "text": "forms the backbone of Tulio on top of which the services within twio operate",
    "start": "206560",
    "end": "213360"
  },
  {
    "text": "on so in the beginning uh things were very very simple back in 2008 we were still a",
    "start": "213720",
    "end": "221080"
  },
  {
    "text": "startup and our deployment and our databases uh were uh our deployment with",
    "start": "221080",
    "end": "227760"
  },
  {
    "text": "our databases was was very simple all data was placed in the same database in the same database table regardless of",
    "start": "227760",
    "end": "233640"
  },
  {
    "text": "where a caller message was in its life cycle and so we call this the monolithic",
    "start": "233640",
    "end": "238840"
  },
  {
    "text": "database model so uh in this example you have an API service a web service and a billing service all talking directly to uh my",
    "start": "238840",
    "end": "245959"
  },
  {
    "text": "SQL uh cluster or my SQL master and you have a uh the call and messaging service",
    "start": "245959",
    "end": "252280"
  },
  {
    "text": "which actually does the transitioning of states for calls and messages and interfacing with carriers also talking",
    "start": "252280",
    "end": "257959"
  },
  {
    "text": "directly to that my SQL master and so this works fine when you",
    "start": "257959",
    "end": "263800"
  },
  {
    "text": "are small when you do not have too much traffic and uh when you're still growing",
    "start": "263800",
    "end": "270199"
  },
  {
    "text": "uh it it works pretty well but once you start to scale once your growth starts to accelerate problems start to",
    "start": "270199",
    "end": "277680"
  },
  {
    "text": "manifest so uh these are a few of those problems uh so you have many consumers of data uh all with different use cases",
    "start": "277680",
    "end": "284120"
  },
  {
    "text": "and different performance characteristics so you might have inflight systems that are handling the state transitions for calls and messages",
    "start": "284120",
    "end": "290639"
  },
  {
    "text": "and those require high right throughput and then you also have uh the API or the",
    "start": "290639",
    "end": "295840"
  },
  {
    "text": "website which mostly reads data and that needs to be optimized for read throughput and what ends up happening is",
    "start": "295840",
    "end": "302240"
  },
  {
    "text": "because all of that data is stored in the same physical location you can't optimize for either",
    "start": "302240",
    "end": "307600"
  },
  {
    "text": "case um you also have uh clients that are implemented in many different",
    "start": "307600",
    "end": "312840"
  },
  {
    "text": "languages and platforms and each of them have their own pooling and connection sem semantic so when the database goes",
    "start": "312840",
    "end": "320039"
  },
  {
    "text": "down or the database uh fails uh the",
    "start": "320039",
    "end": "325240"
  },
  {
    "text": "behavior of the service integrated mode becomes incredibly difficult to reason about and last but certainly not least",
    "start": "325240",
    "end": "331880"
  },
  {
    "text": "horizontal scaling and orchestration is complicated because all of the clients need to be updated to uh account for the",
    "start": "331880",
    "end": "338520"
  },
  {
    "text": "changes that are made to the data store so a lot of this can be solved by",
    "start": "338520",
    "end": "344319"
  },
  {
    "text": "moving to a service oriented architecture or a microservice",
    "start": "344319",
    "end": "349400"
  },
  {
    "text": "architecture uh so the way that I Define a service oriented architecture is it's an architecture in which required system",
    "start": "349400",
    "end": "356000"
  },
  {
    "text": "behavior is decomposed into discrete units of functionality implement Ed as Individual Services for applications to",
    "start": "356000",
    "end": "362240"
  },
  {
    "text": "compose and consume so the way you might think of",
    "start": "362240",
    "end": "368680"
  },
  {
    "text": "the previous model evolving into a service oriented architecture uh so in the previous model all the clients were",
    "start": "368680",
    "end": "374199"
  },
  {
    "text": "talking directly to a database and essentially communicating through the database using the database as a",
    "start": "374199",
    "end": "380120"
  },
  {
    "text": "communication mechanism and so the way that uh this",
    "start": "380120",
    "end": "385479"
  },
  {
    "text": "evolves and has evolved in our infrastructure is we now put services in in front of the databases um and we also",
    "start": "385479",
    "end": "392440"
  },
  {
    "text": "store the inflight data separate from the postflight data so that we can optimize the use cases for that data",
    "start": "392440",
    "end": "400080"
  },
  {
    "text": "separately and so now all the clients of that data talk to the services rather",
    "start": "400080",
    "end": "405160"
  },
  {
    "text": "than directly to the databases and this allows for changing the underlying storage",
    "start": "405160",
    "end": "411639"
  },
  {
    "text": "technology or changing how the data is stored without having to affect all of",
    "start": "411639",
    "end": "416800"
  },
  {
    "text": "the client so for example if we wanted to move the postflight database to Dynamo DB instead of MySQL then the only",
    "start": "416800",
    "end": "424160"
  },
  {
    "text": "service that needs to be updated so long as it satisfies the same contract is the postflight",
    "start": "424160",
    "end": "430280"
  },
  {
    "text": "service so so it is great but it doesn't solve",
    "start": "431080",
    "end": "436639"
  },
  {
    "text": "everything no matter how many services you put in front of my SQL it is still a single point of failure and it still",
    "start": "436639",
    "end": "443639"
  },
  {
    "text": "does not scale horizontally by default",
    "start": "443639",
    "end": "450560"
  },
  {
    "text": "um so you need to solve the uh the scaling problems in the application layer so I'm going to talk a little bit",
    "start": "451400",
    "end": "457840"
  },
  {
    "text": "about how we Shard my SQL at Tulio and how we pulled that off so implementing sharding is actually",
    "start": "457840",
    "end": "463759"
  },
  {
    "text": "really easy uh there's really four steps there's choosing the pring scheme implementing the routing logic sending",
    "start": "463759",
    "end": "469720"
  },
  {
    "text": "application queries through that router and then deploying and then you have a shorted",
    "start": "469720",
    "end": "475400"
  },
  {
    "text": "infrastructure uh and the way that works today is we subdivide our uh key space for all of our records into ranges and",
    "start": "475400",
    "end": "482720"
  },
  {
    "text": "we have uh a router that routes queries for each of those ranges to each of the individual shards so in this case you",
    "start": "482720",
    "end": "489199"
  },
  {
    "text": "have IDs queries that reference ID 0 through three go through to Shard zero 3",
    "start": "489199",
    "end": "494440"
  },
  {
    "text": "through six to Shard one and 6 through 9 to Shard two and it's pretty",
    "start": "494440",
    "end": "500560"
  },
  {
    "text": "simple the hard part is rolling it out with zero",
    "start": "500560",
    "end": "507000"
  },
  {
    "text": "downtime so if you think back to landlines when you picked up the phone",
    "start": "507000",
    "end": "514279"
  },
  {
    "text": "what did you hear you hear a dial tune and if you did not hear a dial tone",
    "start": "514279",
    "end": "519360"
  },
  {
    "text": "either you did not pay your phone bill or something was seriously wrong and so the way that we think about",
    "start": "519360",
    "end": "525240"
  },
  {
    "text": "our API at Tulio is it is the new dial tone and if you are not able to",
    "start": "525240",
    "end": "532360"
  },
  {
    "text": "communicate with our API it is just as bad and we promise our",
    "start": "532360",
    "end": "538480"
  },
  {
    "text": "that our customers uh can depend on our infrastructure and our platform for their applications to communicate with",
    "start": "538480",
    "end": "544600"
  },
  {
    "text": "the world and so we provide a 24/7 always on service and for us there really is no maintenance",
    "start": "544600",
    "end": "552480"
  },
  {
    "text": "window so how do we pull this off so the first thing is we have an existing Shard",
    "start": "552920",
    "end": "559480"
  },
  {
    "text": "Shard one and at this point all of the",
    "start": "559480",
    "end": "564640"
  },
  {
    "text": "application queries are going uh to that first Shard for the full key space then we bring up a new Shard Shard",
    "start": "564640",
    "end": "571839"
  },
  {
    "text": "two and we bring it up slaving off of the existing Shard and the reason that we bring it off slaving off of the",
    "start": "571839",
    "end": "578040"
  },
  {
    "text": "existing Shard is there's a point at which we will start writing to that new Shard for uh a subset of the keyspace",
    "start": "578040",
    "end": "585839"
  },
  {
    "text": "and we want to make sure that at that point that Shard has all of the data",
    "start": "585839",
    "end": "591079"
  },
  {
    "text": "that it needs to for that keyspace so there's another problem in that we use uh Auto incrementing columns",
    "start": "591079",
    "end": "598440"
  },
  {
    "text": "for our Auto IDs and the problem is while we have Shard 2 slaving off of",
    "start": "598440",
    "end": "604880"
  },
  {
    "text": "Shard one and then we start writing to Shard 2 the generation of those IDs is",
    "start": "604880",
    "end": "610920"
  },
  {
    "text": "local to a given master and so if you start writing to both shards at the same time there's a potential for both",
    "start": "610920",
    "end": "616959"
  },
  {
    "text": "Masters to generate the same ID and there will be a uh a conflict and replication will fail and you'll need to",
    "start": "616959",
    "end": "623440"
  },
  {
    "text": "start over so we use a a handy little trick that MySQL allows you to do which is you",
    "start": "623440",
    "end": "629800"
  },
  {
    "text": "can configure the Masters to generate different types of IDs so what we do is we configure the first Master to",
    "start": "629800",
    "end": "636000"
  },
  {
    "text": "generate only odd IDs the second master to generate only even IDs and then we",
    "start": "636000",
    "end": "641320"
  },
  {
    "text": "can start writing to the new Master without uh fear of collisions and then we cut the slaving",
    "start": "641320",
    "end": "648160"
  },
  {
    "text": "link and then we have a brand new Shard that is consistent with the data",
    "start": "648160",
    "end": "654240"
  },
  {
    "text": "so this was really great when we pulled it off uh it was a big win for us because is we could uh continue to scale",
    "start": "654240",
    "end": "661680"
  },
  {
    "text": "we can continue to accept new customers continue to uh take new traffic",
    "start": "661680",
    "end": "668399"
  },
  {
    "text": "and uh but with every new solution there are always new problems so the biggest problem for us",
    "start": "668399",
    "end": "676519"
  },
  {
    "text": "was the operational overhead and the operational burden that came with",
    "start": "676519",
    "end": "682160"
  },
  {
    "text": "managing a growing number of shards and running the actual operations to execute",
    "start": "682160",
    "end": "687920"
  },
  {
    "text": "the sharding so after the first round of charting six",
    "start": "687920",
    "end": "694560"
  },
  {
    "text": "months passed and we charted again and it was fine we went through",
    "start": "694560",
    "end": "700120"
  },
  {
    "text": "the same design same steps and pulled that off and then our growth continued to",
    "start": "700120",
    "end": "705880"
  },
  {
    "text": "accelerate and then 3 months later we shed again and then we started to feel the",
    "start": "705880",
    "end": "711639"
  },
  {
    "text": "pain and as our growth continued to accelerate the time between when we",
    "start": "711639",
    "end": "716800"
  },
  {
    "text": "would need to Shard would decrease to the point where all we're doing is charting operations and managing uh",
    "start": "716800",
    "end": "724480"
  },
  {
    "text": "managing new database clusters and so uh an Point important point to make here is",
    "start": "724480",
    "end": "730360"
  },
  {
    "text": "my team is composed primarily of application developers these are full stack Engineers who are not database experts",
    "start": "730360",
    "end": "738279"
  },
  {
    "text": "and so we're putting all these application developers on these database operations uh and at the cost of not",
    "start": "738279",
    "end": "745079"
  },
  {
    "text": "actually developing new features and adding value to our platform",
    "start": "745079",
    "end": "750560"
  },
  {
    "text": "so rewinding back to 2008 when twio first launched there really wasn't much in the",
    "start": "752240",
    "end": "759519"
  },
  {
    "text": "realm of managed databases or at least there weren't managed databases that we could trust enough to build a real-time",
    "start": "759519",
    "end": "764760"
  },
  {
    "text": "communications platform on top of and so in the beginning that burden of managing",
    "start": "764760",
    "end": "771720"
  },
  {
    "text": "our own databases was non-negotiable fast forward to 2014 and",
    "start": "771720",
    "end": "778639"
  },
  {
    "text": "things have changed quite a bit so we have a variety of managed databases outside of Amazon and within Amazon uh",
    "start": "778639",
    "end": "784760"
  },
  {
    "text": "and within Amazon we have RDS dynb simple DB and red shift and new databases as you learned of this",
    "start": "784760",
    "end": "792360"
  },
  {
    "text": "morning so another big problem is that because we have application developers managing these databases and designing",
    "start": "792360",
    "end": "798880"
  },
  {
    "text": "these databases cost is never optimized we focus first on scaling and",
    "start": "798880",
    "end": "803959"
  },
  {
    "text": "then once we get things working we shift our Focus back to building applications and features",
    "start": "803959",
    "end": "809399"
  },
  {
    "text": "and so what ends up happening is over time that adds up so this is actual uh data from our",
    "start": "809399",
    "end": "818360"
  },
  {
    "text": "team at fio um this is the cost of infrastructure and you can see that",
    "start": "818360",
    "end": "823720"
  },
  {
    "text": "databases are a vast majority of the cost 78% compared to 22% for everything",
    "start": "823720",
    "end": "828800"
  },
  {
    "text": "else which is a lot",
    "start": "828800",
    "end": "835120"
  },
  {
    "text": "so as growth continues to accelerate and the operations continue to increase how",
    "start": "835120",
    "end": "843360"
  },
  {
    "text": "do we keep up and so we need we really need to uh",
    "start": "843360",
    "end": "849120"
  },
  {
    "text": "take a step back and change our approach and there's really two options we can either change our hiring practices and",
    "start": "849120",
    "end": "855199"
  },
  {
    "text": "bring in Specialists bring in teams of database experts or we can remove the operational",
    "start": "855199",
    "end": "861959"
  },
  {
    "text": "burden and the context switching and this sort of begs a to me",
    "start": "861959",
    "end": "869399"
  },
  {
    "text": "this begs a philosophical question around what does toio do what does our",
    "start": "869399",
    "end": "875040"
  },
  {
    "text": "company do why do we exist what value do we add to the",
    "start": "875040",
    "end": "881880"
  },
  {
    "text": "world and while we are successful in scaling databases and operating them and growing",
    "start": "882240",
    "end": "890720"
  },
  {
    "text": "them we are a communications platform we're not a database platform data is an essential part of our platform but the",
    "start": "890720",
    "end": "897120"
  },
  {
    "text": "databases themselves are an implementation implementation detail of how we execute our",
    "start": "897120",
    "end": "903160"
  },
  {
    "text": "service and so really what this boils down to is focusing on what we do",
    "start": "903160",
    "end": "909079"
  },
  {
    "text": "well which is Communications not databases so with that in mind over the",
    "start": "909199",
    "end": "916839"
  },
  {
    "text": "last year or two uh for new products and existing products uh We've started to",
    "start": "916839",
    "end": "922720"
  },
  {
    "text": "move a lot of our infrastructure over to managed databases instead of the unmanaged MySQL that we were running",
    "start": "922720",
    "end": "929199"
  },
  {
    "text": "previously and I don't have time to go over all of them but I'm going to going to go over two examples um one is a",
    "start": "929199",
    "end": "936160"
  },
  {
    "text": "postflight events API um and just to clarify some terminology here um through",
    "start": "936160",
    "end": "941759"
  },
  {
    "text": "the data pipeline within twilio there's a point at which data becomes at rest and we classify that as",
    "start": "941759",
    "end": "948240"
  },
  {
    "text": "postflight and so we have a group of services that manage that data and operate on that data that is at rest and",
    "start": "948240",
    "end": "955040"
  },
  {
    "text": "then once it becomes postflight we need to get that data into our warehouse so that we can run business intelligence on",
    "start": "955040",
    "end": "961399"
  },
  {
    "text": "that data and so when we were building the postflight",
    "start": "961399",
    "end": "967600"
  },
  {
    "text": "events API uh we evaluated some managed data database Stores um and the one that",
    "start": "967600",
    "end": "973959"
  },
  {
    "text": "we chose was Dynam DB and so I'm going to talk a little bit about why we chose dynamodb uh and uh how we modeled our",
    "start": "973959",
    "end": "980240"
  },
  {
    "text": "data with Dynamo DB so one of the things I really love",
    "start": "980240",
    "end": "987079"
  },
  {
    "text": "about Dynamo is it allows you to think in terms of throughput so with",
    "start": "987079",
    "end": "992800"
  },
  {
    "text": "ec2 we bring up machines and we bring up machines with specific amount of RAM and",
    "start": "992800",
    "end": "998720"
  },
  {
    "text": "a spe specific amount of dis a specific amount of bandwidth and this is a lot better than",
    "start": "998720",
    "end": "1005920"
  },
  {
    "text": "where we were with managing and provisioning our own our own Hardware",
    "start": "1005920",
    "end": "1010959"
  },
  {
    "text": "but it is still not as nice of an abstraction as an application developer would",
    "start": "1010959",
    "end": "1016800"
  },
  {
    "text": "like Dynamo DB takes us to a step further and allows you to provision in terms of pure throughput so pure reads",
    "start": "1016800",
    "end": "1023480"
  },
  {
    "text": "per second and writes per second and that makes the uh makes the reasoning about how much resources and what",
    "start": "1023480",
    "end": "1029720"
  },
  {
    "text": "resources you you need much simpler and to me this is really the future of resource",
    "start": "1029720",
    "end": "1036159"
  },
  {
    "text": "provisioning uh operations we focus a lot on the pain of operations uh so Dy",
    "start": "1037559",
    "end": "1042798"
  },
  {
    "text": "DB and all managed databases have a dedicated team that is is working behind the",
    "start": "1042799",
    "end": "1050640"
  },
  {
    "text": "scenes unbeknownst to you scaling that backend data store handling all the",
    "start": "1050640",
    "end": "1055760"
  },
  {
    "text": "failure scenarios and so that burden is completely taken away from us and so now we can focus on building the actual",
    "start": "1055760",
    "end": "1062000"
  },
  {
    "text": "applications on top of that um and I mentioned cost so again we",
    "start": "1062000",
    "end": "1068679"
  },
  {
    "text": "don't optimize for cost because we're application developers um the cost of DB",
    "start": "1068679",
    "end": "1075240"
  },
  {
    "text": "compared to our myql infrastructure is it's it's almost comical it's 18% of our",
    "start": "1075240",
    "end": "1081679"
  },
  {
    "text": "myql costs on our team um and this is more for",
    "start": "1081679",
    "end": "1086799"
  },
  {
    "text": "illustration purposes we don't have everything replaced with Dynamo DB today because it doesn't fulfill every use",
    "start": "1086799",
    "end": "1092000"
  },
  {
    "text": "case but let's say that we did then our database cost becomes a minority of our",
    "start": "1092000",
    "end": "1097960"
  },
  {
    "text": "infrastructure cost which is a pretty pretty big",
    "start": "1097960",
    "end": "1102399"
  },
  {
    "text": "change um so moving from a relational model which a lot of our application developers are familiar with to uh the",
    "start": "1104080",
    "end": "1110360"
  },
  {
    "text": "model that Dynamo DB provides um requires a little bit of uh remapping of how you think about",
    "start": "1110360",
    "end": "1116120"
  },
  {
    "text": "things so I'm going to go over uh one of the end points with the service uh the postflight event service I talked about",
    "start": "1116120",
    "end": "1122919"
  },
  {
    "text": "so the postflight event service allows you to uh look up and retrieve events",
    "start": "1122919",
    "end": "1128159"
  },
  {
    "text": "that were generated within our system um in certain uh under certain conditions",
    "start": "1128159",
    "end": "1133559"
  },
  {
    "text": "for an account and so in this example we have an endpoint where you can retrieve the",
    "start": "1133559",
    "end": "1139280"
  },
  {
    "text": "events for an account um and this actually Maps pretty nicely to a SQL query if we were storing these events in",
    "start": "1139280",
    "end": "1145480"
  },
  {
    "text": "a single table it would just be select star from events order by date and you're",
    "start": "1145480",
    "end": "1150720"
  },
  {
    "text": "done and then we also support some filters which we expose as query string parameters in the service and so for",
    "start": "1150720",
    "end": "1157480"
  },
  {
    "text": "example we allow polling of events that were generated by a given IP address in the system and so uh if you wanted to",
    "start": "1157480",
    "end": "1165360"
  },
  {
    "text": "pull all the events given by uh generated by by a given IP address that",
    "start": "1165360",
    "end": "1170480"
  },
  {
    "text": "also translates pretty simply and easily to a SQL and then we also allow you to filter",
    "start": "1170480",
    "end": "1175760"
  },
  {
    "text": "by date and again that Maps pretty easily and simply so how do we model this with",
    "start": "1175760",
    "end": "1182320"
  },
  {
    "text": "Dynamo DB uh so first of all if you're not",
    "start": "1182320",
    "end": "1187799"
  },
  {
    "text": "familiar with Dynamo DB uh the way that you structure your tables is you have a",
    "start": "1187799",
    "end": "1193440"
  },
  {
    "text": "hash key and that hash key determines under what value or what key or what",
    "start": "1193440",
    "end": "1201000"
  },
  {
    "text": "field all data is scoped so in our example we want all the data when we",
    "start": "1201000",
    "end": "1206840"
  },
  {
    "text": "access data to be pulled back for a given account and so we use the account ID as the hash",
    "start": "1206840",
    "end": "1211960"
  },
  {
    "text": "key and then you have an optional range key which allows uh you to define the",
    "start": "1211960",
    "end": "1217039"
  },
  {
    "text": "Sorting order for your records when you pull them back and so implementing the first endpoint without any filters is",
    "start": "1217039",
    "end": "1224200"
  },
  {
    "text": "pretty straightforward we have account ID of to and scan index forward equals false",
    "start": "1224200",
    "end": "1230000"
  },
  {
    "text": "which just tells Dynamo to return those results in reverse order and you see that there's this",
    "start": "1230000",
    "end": "1236080"
  },
  {
    "text": "funny IP address date field here I will go over that in a few",
    "start": "1236080",
    "end": "1241039"
  },
  {
    "text": "slides so how do we support filtering by IP",
    "start": "1241679",
    "end": "1246720"
  },
  {
    "text": "address so uh we store the IP address and date field together and again I'll",
    "start": "1246960",
    "end": "1252480"
  },
  {
    "text": "go over that in the next slide but to pull all the records that uh were",
    "start": "1252480",
    "end": "1257679"
  },
  {
    "text": "generated by an i IP address we do a prefix match on that field and so that field always has the",
    "start": "1257679",
    "end": "1264440"
  },
  {
    "text": "IP address first a delimiter and then the date and then we use begins with which is a Dynamo's way of doing a",
    "start": "1264440",
    "end": "1270720"
  },
  {
    "text": "prefix match on that uh and specify that IP address and this implements the semantics that we",
    "start": "1270720",
    "end": "1277679"
  },
  {
    "text": "want so how do we support filtering by multiple fields or multiple",
    "start": "1280240",
    "end": "1286200"
  },
  {
    "text": "values so the way that index is working dynb is you only index one field you cannot index multiple Fields like you",
    "start": "1286200",
    "end": "1292720"
  },
  {
    "text": "can with mySQL or other relational databases and so the way that we do this and this is why those fields are",
    "start": "1292720",
    "end": "1299159"
  },
  {
    "text": "combined is we store the IP address in addition to the date in a single field and then we index that one field so if",
    "start": "1299159",
    "end": "1306039"
  },
  {
    "text": "we want to filter on both of those values then we combine the filters into one uh and then we specify that uh to",
    "start": "1306039",
    "end": "1314240"
  },
  {
    "text": "Dynamo uh and in this case we want to pull all records that were less than a given date so we use the less than",
    "start": "1314240",
    "end": "1323000"
  },
  {
    "text": "comparison um so some things that you need to keep in mind when working with Dynamo DB uh the first is that you need to",
    "start": "1325440",
    "end": "1332640"
  },
  {
    "text": "handle exceeded uh throughput failures so this actually isn't much",
    "start": "1332640",
    "end": "1338400"
  },
  {
    "text": "different than if you were writing against a managed databases you still need to handle the case where you",
    "start": "1338400",
    "end": "1344679"
  },
  {
    "text": "exhaust that database's resources and that database fails um um so you need to",
    "start": "1344679",
    "end": "1349880"
  },
  {
    "text": "do the same thing with Dynamo but I feel like there's a tendency because Dynamo kind of scales magically for you behind",
    "start": "1349880",
    "end": "1355559"
  },
  {
    "text": "the scenes uh that uh this sort of gets left to the Wayside so if you provision",
    "start": "1355559",
    "end": "1361360"
  },
  {
    "text": "a certain amount of throughput for your Dynamo DB DB table and you exceed that throughput that manifests as a runtime",
    "start": "1361360",
    "end": "1367919"
  },
  {
    "text": "error the way that we deal with that uh at twio is we use",
    "start": "1367919",
    "end": "1373840"
  },
  {
    "text": "sqfs between our writers and Dynamo DB and then we process those events asynchronously so in this example we",
    "start": "1373840",
    "end": "1381240"
  },
  {
    "text": "have a an API node a web node and a billing node and all of those generate",
    "start": "1381240",
    "end": "1386799"
  },
  {
    "text": "events they send them to sqs and then we have an event processor that asynchronously processes those events",
    "start": "1386799",
    "end": "1394240"
  },
  {
    "text": "from sqf and if the insert fails for whatever reason let's say that you you exceed the provision throughput or",
    "start": "1394240",
    "end": "1400960"
  },
  {
    "text": "there's some other failure um we uh to handle that we just don't delete from",
    "start": "1400960",
    "end": "1407279"
  },
  {
    "text": "that event from sqs then the next time the processor runs that event will come back and we will attempt reattempt the",
    "start": "1407279",
    "end": "1413559"
  },
  {
    "text": "insert and so we handle that gracefully there uh another thing you need to keep",
    "start": "1413559",
    "end": "1420360"
  },
  {
    "text": "in mind is there is a maximum of five Global and local indexes so if you need",
    "start": "1420360",
    "end": "1426520"
  },
  {
    "text": "more filters or you need to index more columns um you can either manage them",
    "start": "1426520",
    "end": "1432279"
  },
  {
    "text": "yourself as a separate table which I don't recommend because then you need to hand handle partial mutation failures in",
    "start": "1432279",
    "end": "1438000"
  },
  {
    "text": "your applic layer um or you might uh evaluate some of the other managed",
    "start": "1438000",
    "end": "1443400"
  },
  {
    "text": "databases that Amazon provides uh there's also uh a local",
    "start": "1443400",
    "end": "1450279"
  },
  {
    "text": "secondary index size limit so local secondary indexes allow for immediate consistency so if you your application",
    "start": "1450279",
    "end": "1456159"
  },
  {
    "text": "requires that all data red needs to be up to-date you can use local secondary indexes to guarantee that um but to",
    "start": "1456159",
    "end": "1465120"
  },
  {
    "text": "provide that guarantee Amazon limits the size of that to 10 GB so you just need to be aware of how big your data set can",
    "start": "1465120",
    "end": "1474000"
  },
  {
    "text": "be so talked about how we've used Dynamo DB",
    "start": "1474000",
    "end": "1479480"
  },
  {
    "text": "for our postflight system uh once data goes beyond our postf flight",
    "start": "1479480",
    "end": "1486600"
  },
  {
    "text": "system it needs to get into the warehouse somehow so I'm going to talk a little bit about how that works uh and",
    "start": "1486600",
    "end": "1491720"
  },
  {
    "text": "how we've uh moved from uh using my SQL as a warehouse to Red shift",
    "start": "1491720",
    "end": "1499720"
  },
  {
    "text": "so first of all a brief history in 2008 to 2011 all of our",
    "start": "1499720",
    "end": "1506080"
  },
  {
    "text": "business intelligence queries ran on replicas of our myle clusters uh that were serving the same",
    "start": "1506080",
    "end": "1513919"
  },
  {
    "text": "public traffic uh for our API",
    "start": "1513919",
    "end": "1519880"
  },
  {
    "text": "and this worked sometimes but the way in which our business intelligence queries",
    "start": "1519880",
    "end": "1525440"
  },
  {
    "text": "needed to access data was sort of at odds with the schema so there were some queries that took either a really long time or were",
    "start": "1525440",
    "end": "1531840"
  },
  {
    "text": "impossible because of the schema in 2011 to",
    "start": "1531840",
    "end": "1537279"
  },
  {
    "text": "2013 uh we changed that and we push data from MySQL to S3 and that allowed us to",
    "start": "1537279",
    "end": "1543480"
  },
  {
    "text": "quate with ping and elastic map produce which gave us the ability to aggregate that data and access it in the way that",
    "start": "1543480",
    "end": "1549760"
  },
  {
    "text": "we needed uh but the latency was not where we wanted it to be so for",
    "start": "1549760",
    "end": "1556559"
  },
  {
    "text": "depending on the size of the data set and the complexity of the query that query could take on the order of hours",
    "start": "1556559",
    "end": "1562880"
  },
  {
    "text": "to days and then in 2013 we moved that to",
    "start": "1562880",
    "end": "1569440"
  },
  {
    "text": "Red shift and red shift is Magic it is really amazing it literally cut the time",
    "start": "1569440",
    "end": "1575320"
  },
  {
    "text": "that these reports took from hours to seconds and allowed us to answer very",
    "start": "1575320",
    "end": "1581320"
  },
  {
    "text": "critical Financial questions that we use the warehouse for in near real time",
    "start": "1581320",
    "end": "1589080"
  },
  {
    "text": "so back when we were loading that data into S3",
    "start": "1591000",
    "end": "1597360"
  },
  {
    "text": "um sorry because we're loading that data directly from our myql clusters and",
    "start": "1597360",
    "end": "1602799"
  },
  {
    "text": "putting in it S3 when we move from myql to another",
    "start": "1602799",
    "end": "1608440"
  },
  {
    "text": "database technology like Dynamo or uh or rdfs or uh other",
    "start": "1608440",
    "end": "1614840"
  },
  {
    "text": "technologies that that we've been looking at we would need to recreate the",
    "start": "1614840",
    "end": "1621960"
  },
  {
    "text": "logic that loads from that databas database into S3 and so that wasn't really a table solution for us so we",
    "start": "1621960",
    "end": "1627120"
  },
  {
    "text": "Chang it a little bit and so instead of the warehouse",
    "start": "1627120",
    "end": "1632240"
  },
  {
    "text": "loaders pulling directly from the database we now push the data from our post light Services which is the sync",
    "start": "1632240",
    "end": "1639919"
  },
  {
    "text": "for all the data that is at rest into our event bus which we use Kafka",
    "start": "1639919",
    "end": "1646279"
  },
  {
    "text": "for and then we have a an S3 loader that takes all that data batches it and",
    "start": "1646279",
    "end": "1651760"
  },
  {
    "text": "shoves it into S3 and we batch it because uh red shift is optimized for batch loading data it's",
    "start": "1651760",
    "end": "1658240"
  },
  {
    "text": "not optimized for inserting individual records at a",
    "start": "1658240",
    "end": "1663080"
  },
  {
    "text": "time and then we have a warehouse loader that runs periodically and pulls that",
    "start": "1663480",
    "end": "1669279"
  },
  {
    "text": "data from S3 and batch loads it into red shift and so now if we change the actual",
    "start": "1669279",
    "end": "1675039"
  },
  {
    "text": "database for postflight because now we're pushing data into instead of pulling it from the warehouse",
    "start": "1675039",
    "end": "1681919"
  },
  {
    "text": "loader that doesn't need to change and so they are now",
    "start": "1681919",
    "end": "1688240"
  },
  {
    "text": "decoupled uh so to wrap up I want to go back to the point about",
    "start": "1690720",
    "end": "1697519"
  },
  {
    "text": "focus and focusing on what we're good at and how that relates to managed services and managed",
    "start": "1697519",
    "end": "1703919"
  },
  {
    "text": "databases so at swiio our focus is on creating an experience that",
    "start": "1704600",
    "end": "1712720"
  },
  {
    "text": "unifies and simplifies Communications and by leveraging managed",
    "start": "1712720",
    "end": "1720320"
  },
  {
    "text": "services and managed databases that allows us to not be distracted by all the",
    "start": "1720320",
    "end": "1726799"
  },
  {
    "text": "operations and all of the work that needs to be done to uh to maintain the",
    "start": "1726799",
    "end": "1732320"
  },
  {
    "text": "systems that don't add value to our product directly and so I see",
    "start": "1732320",
    "end": "1740039"
  },
  {
    "text": "the uh the focus as something that is reflected in",
    "start": "1740440",
    "end": "1746120"
  },
  {
    "text": "our adaption of managed services and so really what it boils",
    "start": "1746120",
    "end": "1752880"
  },
  {
    "text": "down to is by understanding our focus and knowing what we do well and letting",
    "start": "1752880",
    "end": "1758760"
  },
  {
    "text": "the experts and people who are dedicated to the other problems do that work for us allows us to accelerate the delivery",
    "start": "1758760",
    "end": "1766519"
  },
  {
    "text": "of value and Innovation to our cust",
    "start": "1766519",
    "end": "1770039"
  },
  {
    "text": "customers and that's",
    "start": "1771720",
    "end": "1775039"
  },
  {
    "text": "it um we have some time for",
    "start": "1780320",
    "end": "1784278"
  },
  {
    "text": "questions",
    "start": "1786200",
    "end": "1789200"
  },
  {
    "text": "yep uh the question was we do we use caching Technologies for inflate data",
    "start": "1793519",
    "end": "1799200"
  },
  {
    "text": "um we do uh so depending on the inflate system some of that data is kept in",
    "start": "1799200",
    "end": "1804760"
  },
  {
    "text": "memory um and uh today we use uh in some places we use mcash and reddis in other",
    "start": "1804760",
    "end": "1811039"
  },
  {
    "text": "places we use hazelcast which is a jvm uh based inmemory data grid um there is",
    "start": "1811039",
    "end": "1817880"
  },
  {
    "text": "some data that we cannot cache just because we always need to make sure that it's up to date and uh but in other",
    "start": "1817880",
    "end": "1826120"
  },
  {
    "text": "cases we know we we try to use uh the caching services that are available to us and we're looking at elastic cache",
    "start": "1826120",
    "end": "1832159"
  },
  {
    "text": "right now it's not something that we've historically used um but it's something that we're planning to move to in the",
    "start": "1832159",
    "end": "1838200"
  },
  {
    "text": "future uh sure so I mean any any use cases that require",
    "start": "1851960",
    "end": "1858720"
  },
  {
    "text": "you to access data in a uh in a relational way so if you have to access",
    "start": "1858720",
    "end": "1864880"
  },
  {
    "text": "data that requires a lot of filters or um to do uh aggregation on that data uh",
    "start": "1864880",
    "end": "1871799"
  },
  {
    "text": "Dynamo doesn't really fit that model and sometimes uh it can fit it in very simple use cases like the one that I",
    "start": "1871799",
    "end": "1876840"
  },
  {
    "text": "showed uh but as that complexity grows it starts working against you so uh it",
    "start": "1876840",
    "end": "1883200"
  },
  {
    "text": "doesn't fit everything but uh for what it does fit it's really good at",
    "start": "1883200",
    "end": "1888480"
  },
  {
    "text": "how do you de in",
    "start": "1888480",
    "end": "1892960"
  },
  {
    "text": "Dynamo yeah so the question was how do we deal with transactions um so that's a",
    "start": "1898960",
    "end": "1905120"
  },
  {
    "text": "good question and I think that kind of is one of the cases where Dynamo isn't uh as good as my SQL um so for uh",
    "start": "1905120",
    "end": "1914960"
  },
  {
    "text": "systems that require uh some transactional guarantees um you know we",
    "start": "1914960",
    "end": "1920399"
  },
  {
    "text": "still use MySQL um because Dynamo just does not have that built in I know there's a",
    "start": "1920399",
    "end": "1925679"
  },
  {
    "text": "library that adds transaction support on top of Dynamo um but I don't have any experience with that so the scaling is",
    "start": "1925679",
    "end": "1932559"
  },
  {
    "text": "still an issue the yep from the previous talk sounded like",
    "start": "1932559",
    "end": "1939639"
  },
  {
    "text": "you guys are in multiple regions how do you deal with that on a database uh so today we actually are",
    "start": "1939639",
    "end": "1945799"
  },
  {
    "text": "still working on that all of our databases are still in Us East one um as",
    "start": "1945799",
    "end": "1951159"
  },
  {
    "text": "some mentioned uh when we decide to move our databases to VPC the way that we'll",
    "start": "1951159",
    "end": "1957919"
  },
  {
    "text": "likely do that is we'll bring up replicas slaving off of the master in VPC and then slowly move traffic over to",
    "start": "1957919",
    "end": "1964120"
  },
  {
    "text": "that and then we'll they'll then we'll promote one of the slaves in that VPC region um we have explored you know how we can",
    "start": "1964120",
    "end": "1971880"
  },
  {
    "text": "do cross region replication uh obviously the latency is much greater uh cross",
    "start": "1971880",
    "end": "1978000"
  },
  {
    "text": "region and so for some of our systems that are very high throughput um that",
    "start": "1978000",
    "end": "1983279"
  },
  {
    "text": "can cause problems with slaves getting behind uh and the data just taking a lot longer to make it across the world um",
    "start": "1983279",
    "end": "1991760"
  },
  {
    "text": "but uh I know that uh if you read the Amazon blog over uh the last few days uh",
    "start": "1991760",
    "end": "1998919"
  },
  {
    "text": "they just announced uh streaming chain sets for Dynamo DB with Kinesis and so",
    "start": "1998919",
    "end": "2003960"
  },
  {
    "text": "that's a really interesting use case uh with uh cross region replication",
    "start": "2003960",
    "end": "2009760"
  },
  {
    "text": "y anything",
    "start": "2010960",
    "end": "2014240"
  },
  {
    "text": "else sure so the question was what why did we choose Kafka for our vent bus um",
    "start": "2016760",
    "end": "2025360"
  },
  {
    "text": "so we operationalized kfka uh about two",
    "start": "2025360",
    "end": "2030679"
  },
  {
    "text": "years ago and at that time it was the most uh uh it was the most mature uh Pub",
    "start": "2030679",
    "end": "2038000"
  },
  {
    "text": "subsystem realtime Pub sub Pub subsystem that uh we had evaluated um and uh we're",
    "start": "2038000",
    "end": "2044760"
  },
  {
    "text": "currently looking at whether Kinesis can fulfill that same purpose in our infrastructure but uh we're still kind",
    "start": "2044760",
    "end": "2051000"
  },
  {
    "text": "of early on in",
    "start": "2051000",
    "end": "2053638"
  },
  {
    "text": "that sorry how do you expire data in Dynamo you mean how do you delete data",
    "start": "2057399",
    "end": "2065598"
  },
  {
    "text": "uh so that's a good question as well um so the question was how do we delete data in Dynamo and do we keep it around",
    "start": "2070520",
    "end": "2077320"
  },
  {
    "text": "forever uh so our system is designed so that we don't keep data around forever",
    "start": "2077320",
    "end": "2083000"
  },
  {
    "text": "and right now the way that we handle that is we do have time stamps for every record and then whenever we need to",
    "start": "2083000",
    "end": "2090358"
  },
  {
    "text": "apply the retention policies for data within Dynamo we have a process that runs um and it it's throttled for",
    "start": "2090359",
    "end": "2097280"
  },
  {
    "text": "through and so it will only consume a percentage of throughput um and then it will go in",
    "start": "2097280",
    "end": "2102880"
  },
  {
    "text": "and delete the data within Dynamo um another interesting design I've seen before is if you can constrain the uh",
    "start": "2102880",
    "end": "2111760"
  },
  {
    "text": "the window of time by which you retain data then you can use you can basically partition your",
    "start": "2111760",
    "end": "2118320"
  },
  {
    "text": "data with different tables and with that design that design is really nice because once that time window rolls off",
    "start": "2118320",
    "end": "2125359"
  },
  {
    "text": "all you need to do is drop that table and that doesn't con assume any",
    "start": "2125359",
    "end": "2130040"
  },
  {
    "text": "throughput",
    "start": "2132079",
    "end": "2135079"
  },
  {
    "text": "cure yeah so the question was um how big is the database team uh and",
    "start": "2147839",
    "end": "2156319"
  },
  {
    "text": "how do we keep up with uh with the growth of these databases and how do we manage them so my team",
    "start": "2156319",
    "end": "2162880"
  },
  {
    "text": "is uh five people um and we're not the only database team or we're not the only",
    "start": "2162880",
    "end": "2168000"
  },
  {
    "text": "team that manages databases at twio uh so we the way that our organization is uh structured is uh we're very",
    "start": "2168000",
    "end": "2174760"
  },
  {
    "text": "vertically aligned so we have teams oriented around certain features within twio um so we have uh we have a team",
    "start": "2174760",
    "end": "2182640"
  },
  {
    "text": "that handles all of the voice connectivity to carriers and we have a team that is responsible for the actual platform that we build on top of and so",
    "start": "2182640",
    "end": "2190560"
  },
  {
    "text": "historically uh all those teams were responsible for operating their own databases um our team uh has the largest",
    "start": "2190560",
    "end": "2198920"
  },
  {
    "text": "databases in the company and so we are the ones that have been solving these problems first um",
    "start": "2198920",
    "end": "2205319"
  },
  {
    "text": "but uh it's still a sort of distributed problem within our",
    "start": "2205319",
    "end": "2211920"
  },
  {
    "text": "organization that answer your question",
    "start": "2212880",
    "end": "2217400"
  },
  {
    "text": "yep yeah yeah and so uh one of the other uh important things to point out is",
    "start": "2237760",
    "end": "2244680"
  },
  {
    "text": "within that pipeline there is some business logic that is specific spefic Tulio um so for example uh we might need",
    "start": "2244680",
    "end": "2251760"
  },
  {
    "text": "to encrypt data along the way or apply protention policies along the way or",
    "start": "2251760",
    "end": "2256960"
  },
  {
    "text": "check if we should even store the data along the way um but yeah technically if we wanted to we could replace uh some of",
    "start": "2256960",
    "end": "2262960"
  },
  {
    "text": "that Pipeline with Kinesis to do the pup",
    "start": "2262960",
    "end": "2267480"
  },
  {
    "text": "sub all right anything else all right if you have any other",
    "start": "2270160",
    "end": "2275960"
  },
  {
    "text": "questions uh you can find me after the talk or I will be downstairs as well uh but thank you everyone",
    "start": "2275960",
    "end": "2282620"
  },
  {
    "text": "[Applause]",
    "start": "2282620",
    "end": "2288420"
  }
]