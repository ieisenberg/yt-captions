[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "[Music]",
    "start": "650",
    "end": "1010"
  },
  {
    "text": "[Applause]",
    "start": "1010",
    "end": "4088"
  },
  {
    "text": "[Music]",
    "start": "4960",
    "end": "11679"
  },
  {
    "text": "hello i'm nagendra a cloud support",
    "start": "12000",
    "end": "14240"
  },
  {
    "text": "engineer here at the aws office in",
    "start": "14240",
    "end": "16480"
  },
  {
    "text": "dallas today i am going to discuss",
    "start": "16480",
    "end": "19039"
  },
  {
    "text": "troubleshooting steps that can help",
    "start": "19039",
    "end": "20880"
  },
  {
    "text": "isolate the reason for 504 errors",
    "start": "20880",
    "end": "23519"
  },
  {
    "text": "written by an amazon api gateway rest",
    "start": "23519",
    "end": "25840"
  },
  {
    "text": "api let's get started 504 errors can",
    "start": "25840",
    "end": "29119"
  },
  {
    "start": "28000",
    "end": "70000"
  },
  {
    "text": "occur when connecting to their service",
    "start": "29119",
    "end": "31599"
  },
  {
    "text": "through an api gateway rest api the api",
    "start": "31599",
    "end": "34320"
  },
  {
    "text": "gateway rest api has a maximum",
    "start": "34320",
    "end": "36320"
  },
  {
    "text": "integration timeout value for any type",
    "start": "36320",
    "end": "38640"
  },
  {
    "text": "of integration",
    "start": "38640",
    "end": "40000"
  },
  {
    "text": "if the integration backend does not",
    "start": "40000",
    "end": "41920"
  },
  {
    "text": "respond to the api gateway within the",
    "start": "41920",
    "end": "44160"
  },
  {
    "text": "configure timeout value then api gateway",
    "start": "44160",
    "end": "46960"
  },
  {
    "text": "returns a http 504 status code the",
    "start": "46960",
    "end": "50399"
  },
  {
    "text": "maximum integration timeout value for",
    "start": "50399",
    "end": "52800"
  },
  {
    "text": "the api gateway rest api is 29 seconds",
    "start": "52800",
    "end": "56399"
  },
  {
    "text": "which is also the default value",
    "start": "56399",
    "end": "58960"
  },
  {
    "text": "to understand the reason for the 504",
    "start": "58960",
    "end": "61280"
  },
  {
    "text": "errors let's first confirm where the",
    "start": "61280",
    "end": "63600"
  },
  {
    "text": "request is getting timed out to identify",
    "start": "63600",
    "end": "66400"
  },
  {
    "text": "the source of the error we'll use api",
    "start": "66400",
    "end": "68960"
  },
  {
    "text": "gateway cloud watch logs to do this we",
    "start": "68960",
    "end": "72000"
  },
  {
    "start": "70000",
    "end": "120000"
  },
  {
    "text": "must first enable the amazon cloudwatch",
    "start": "72000",
    "end": "74320"
  },
  {
    "text": "logs on the api stage i have the api",
    "start": "74320",
    "end": "77200"
  },
  {
    "text": "gateway console open and i have selected",
    "start": "77200",
    "end": "79600"
  },
  {
    "text": "my rest api",
    "start": "79600",
    "end": "81040"
  },
  {
    "text": "under stages i'll select the stage used",
    "start": "81040",
    "end": "83840"
  },
  {
    "text": "for the rest api and then go to the logs",
    "start": "83840",
    "end": "86560"
  },
  {
    "text": "or tracing tab",
    "start": "86560",
    "end": "88080"
  },
  {
    "text": "here i'll check the box next to enable",
    "start": "88080",
    "end": "91040"
  },
  {
    "text": "cloudwatch logs i'll select the info",
    "start": "91040",
    "end": "93680"
  },
  {
    "text": "level logging to get logs for all",
    "start": "93680",
    "end": "96000"
  },
  {
    "text": "requests also i'll check the log full",
    "start": "96000",
    "end": "99119"
  },
  {
    "text": "request or response data to get webos",
    "start": "99119",
    "end": "101840"
  },
  {
    "text": "logs in cloudwatch then i'll save these",
    "start": "101840",
    "end": "105280"
  },
  {
    "text": "changes when these changes are saved",
    "start": "105280",
    "end": "108079"
  },
  {
    "text": "we'll make some new requests to the api",
    "start": "108079",
    "end": "110479"
  },
  {
    "text": "to reproduce the errors",
    "start": "110479",
    "end": "112560"
  },
  {
    "text": "when the errors are reproduced",
    "start": "112560",
    "end": "114399"
  },
  {
    "text": "we can then go to the cloudwatch logs",
    "start": "114399",
    "end": "116880"
  },
  {
    "text": "and find the log group created for the",
    "start": "116880",
    "end": "119119"
  },
  {
    "text": "api for this video i have simulated a",
    "start": "119119",
    "end": "121920"
  },
  {
    "start": "120000",
    "end": "123000"
  },
  {
    "text": "504 error on my api",
    "start": "121920",
    "end": "124719"
  },
  {
    "start": "123000",
    "end": "173000"
  },
  {
    "text": "we can find the api's log group by",
    "start": "124719",
    "end": "127200"
  },
  {
    "text": "filtering the api id or this stage name",
    "start": "127200",
    "end": "130640"
  },
  {
    "text": "we can get the api id from the api",
    "start": "130640",
    "end": "132720"
  },
  {
    "text": "gateway console",
    "start": "132720",
    "end": "134319"
  },
  {
    "text": "in the log group we can see the request",
    "start": "134319",
    "end": "136640"
  },
  {
    "text": "that returned an error using the",
    "start": "136640",
    "end": "138560"
  },
  {
    "text": "timestamp",
    "start": "138560",
    "end": "139680"
  },
  {
    "text": "when we open the logs we can check the",
    "start": "139680",
    "end": "141760"
  },
  {
    "text": "flow of request as processed by the rest",
    "start": "141760",
    "end": "144480"
  },
  {
    "text": "api",
    "start": "144480",
    "end": "146160"
  },
  {
    "text": "if the 504 errors are due to the",
    "start": "146160",
    "end": "148239"
  },
  {
    "text": "integration endpoint timing out we will",
    "start": "148239",
    "end": "150959"
  },
  {
    "text": "see the execution failed due to timeout",
    "start": "150959",
    "end": "153280"
  },
  {
    "text": "message",
    "start": "153280",
    "end": "154319"
  },
  {
    "text": "after the endpoint request body after",
    "start": "154319",
    "end": "156480"
  },
  {
    "text": "transformation and sending request to",
    "start": "156480",
    "end": "158720"
  },
  {
    "text": "lines in this case my backend is a",
    "start": "158720",
    "end": "161360"
  },
  {
    "text": "lambda function so i'll see the lambda",
    "start": "161360",
    "end": "164000"
  },
  {
    "text": "function details in the sending request",
    "start": "164000",
    "end": "166319"
  },
  {
    "text": "to step",
    "start": "166319",
    "end": "167599"
  },
  {
    "text": "as we can see here the timeout occurred",
    "start": "167599",
    "end": "170239"
  },
  {
    "text": "after the sending request to line next",
    "start": "170239",
    "end": "172959"
  },
  {
    "text": "we can verify whether the associated",
    "start": "172959",
    "end": "175040"
  },
  {
    "start": "173000",
    "end": "310000"
  },
  {
    "text": "backend endpoint is invoked or receiving",
    "start": "175040",
    "end": "177920"
  },
  {
    "text": "the request if the backend is a lambda",
    "start": "177920",
    "end": "180640"
  },
  {
    "text": "function we can confirm whether this",
    "start": "180640",
    "end": "182959"
  },
  {
    "text": "lambda function is invoked or not by",
    "start": "182959",
    "end": "185519"
  },
  {
    "text": "checking the invocation metric on the",
    "start": "185519",
    "end": "187440"
  },
  {
    "text": "function if the backend is a web server",
    "start": "187440",
    "end": "190400"
  },
  {
    "text": "we can check from the server logs",
    "start": "190400",
    "end": "192080"
  },
  {
    "text": "whether the request is received if the",
    "start": "192080",
    "end": "194640"
  },
  {
    "text": "backend service wasn't invoked or never",
    "start": "194640",
    "end": "196879"
  },
  {
    "text": "received the request then consider",
    "start": "196879",
    "end": "199200"
  },
  {
    "text": "implementing retries at your client to",
    "start": "199200",
    "end": "202319"
  },
  {
    "text": "retry these errors which are most likely",
    "start": "202319",
    "end": "205200"
  },
  {
    "text": "a result of a temporary network failure",
    "start": "205200",
    "end": "207519"
  },
  {
    "text": "in the api gateway service when sending",
    "start": "207519",
    "end": "209440"
  },
  {
    "text": "the request to the integration backend",
    "start": "209440",
    "end": "212159"
  },
  {
    "text": "if the backend service receives the",
    "start": "212159",
    "end": "214000"
  },
  {
    "text": "request but can't complete processing or",
    "start": "214000",
    "end": "216879"
  },
  {
    "text": "not returning a response within the api",
    "start": "216879",
    "end": "219040"
  },
  {
    "text": "gateway integration timeout value you",
    "start": "219040",
    "end": "221519"
  },
  {
    "text": "can consider these options to help",
    "start": "221519",
    "end": "223360"
  },
  {
    "text": "reduce the processing time",
    "start": "223360",
    "end": "225680"
  },
  {
    "text": "for example in the backend server keep",
    "start": "225680",
    "end": "228720"
  },
  {
    "text": "only the logic required to send a",
    "start": "228720",
    "end": "230640"
  },
  {
    "text": "response back to the api gateway if",
    "start": "230640",
    "end": "233120"
  },
  {
    "text": "there is any additional code that can be",
    "start": "233120",
    "end": "235280"
  },
  {
    "text": "run separately or doesn't require for",
    "start": "235280",
    "end": "237599"
  },
  {
    "text": "the response that was sent to the api",
    "start": "237599",
    "end": "240000"
  },
  {
    "text": "gateway then consider running this code",
    "start": "240000",
    "end": "242720"
  },
  {
    "text": "in a separate service such as lambda by",
    "start": "242720",
    "end": "245439"
  },
  {
    "text": "triggering it separately from your",
    "start": "245439",
    "end": "247040"
  },
  {
    "text": "integration backend",
    "start": "247040",
    "end": "248640"
  },
  {
    "text": "or consider reviewing the backend",
    "start": "248640",
    "end": "250799"
  },
  {
    "text": "service or server logic and optimize it",
    "start": "250799",
    "end": "254159"
  },
  {
    "text": "where possible to make sure that it",
    "start": "254159",
    "end": "256239"
  },
  {
    "text": "completes within the configured",
    "start": "256239",
    "end": "258400"
  },
  {
    "text": "integration timeout value it's a best",
    "start": "258400",
    "end": "260959"
  },
  {
    "text": "practice to configure the maximum",
    "start": "260959",
    "end": "263040"
  },
  {
    "text": "timeout on the backend so that it's less",
    "start": "263040",
    "end": "265680"
  },
  {
    "text": "than the integration timeout that's",
    "start": "265680",
    "end": "267520"
  },
  {
    "text": "configured on the api gateway however",
    "start": "267520",
    "end": "270320"
  },
  {
    "text": "sometimes it's just not possible to",
    "start": "270320",
    "end": "272639"
  },
  {
    "text": "reduce the processing code",
    "start": "272639",
    "end": "274880"
  },
  {
    "text": "logic or the time on the backend server",
    "start": "274880",
    "end": "277600"
  },
  {
    "text": "if that happens and if the backend is a",
    "start": "277600",
    "end": "280000"
  },
  {
    "text": "lambda function",
    "start": "280000",
    "end": "281360"
  },
  {
    "text": "api gateway provides an option to invoke",
    "start": "281360",
    "end": "283919"
  },
  {
    "text": "the lambda function asynchronously",
    "start": "283919",
    "end": "286720"
  },
  {
    "text": "when invoked asynchronously the lambda",
    "start": "286720",
    "end": "289199"
  },
  {
    "text": "service returns a success response code",
    "start": "289199",
    "end": "291919"
  },
  {
    "text": "to the api gateway soon after receiving",
    "start": "291919",
    "end": "294479"
  },
  {
    "text": "the request the lambda service processes",
    "start": "294479",
    "end": "297440"
  },
  {
    "text": "the actual request in the function",
    "start": "297440",
    "end": "299600"
  },
  {
    "text": "separately later this is a good option",
    "start": "299600",
    "end": "302400"
  },
  {
    "text": "if api gateway's response to the client",
    "start": "302400",
    "end": "305199"
  },
  {
    "text": "isn't dependent on the backend lambda",
    "start": "305199",
    "end": "307440"
  },
  {
    "text": "function's execution result",
    "start": "307440",
    "end": "311840"
  },
  {
    "start": "310000",
    "end": "350000"
  },
  {
    "text": "to invoke a lambda function",
    "start": "316960",
    "end": "318639"
  },
  {
    "text": "asynchronously we will set a custom",
    "start": "318639",
    "end": "321039"
  },
  {
    "text": "header x amg",
    "start": "321039",
    "end": "323280"
  },
  {
    "text": "invocation type with value set to event",
    "start": "323280",
    "end": "326479"
  },
  {
    "text": "in the integration request configuration",
    "start": "326479",
    "end": "330560"
  },
  {
    "text": "and now you know several troubleshooting",
    "start": "336240",
    "end": "338639"
  },
  {
    "text": "steps that can be used to help isolate",
    "start": "338639",
    "end": "341360"
  },
  {
    "text": "the reason for 504 errors returned by an",
    "start": "341360",
    "end": "344320"
  },
  {
    "text": "amazon api gateway rest api and some",
    "start": "344320",
    "end": "347199"
  },
  {
    "text": "methods to address these errors",
    "start": "347199",
    "end": "349600"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "349600",
    "end": "351280"
  },
  {
    "start": "350000",
    "end": "363000"
  },
  {
    "text": "computing from all of us here at aws",
    "start": "351280",
    "end": "354530"
  },
  {
    "text": "[Applause]",
    "start": "354530",
    "end": "357610"
  },
  {
    "text": "[Music]",
    "start": "361490",
    "end": "364319"
  }
]