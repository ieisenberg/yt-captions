[
  {
    "start": "0",
    "end": "92000"
  },
  {
    "text": "um first of all thank you everyone for coming to the session this morning um I",
    "start": "880",
    "end": "7160"
  },
  {
    "text": "can imagine it's hard after the uh the replay party last night uh I hope several of you made it to the party uh",
    "start": "7160",
    "end": "13839"
  },
  {
    "text": "last night that's good um so my name is nihar bani I'm a product manager at",
    "start": "13839",
    "end": "19560"
  },
  {
    "text": "Amazon web services and um I've got a couple of colleagues here with me also I'll",
    "start": "19560",
    "end": "24840"
  },
  {
    "text": "introduce them in a little bit uh but we'll talk today about Cash's King as",
    "start": "24840",
    "end": "30320"
  },
  {
    "text": "the uh the title of the uh the talk scaling your application while improving performance and lowering your costs um",
    "start": "30320",
    "end": "38600"
  },
  {
    "text": "so let's get right into it so now we've all heard this",
    "start": "38600",
    "end": "46280"
  },
  {
    "text": "expression that cash is king um and sort of the session of our title uh is is",
    "start": "46280",
    "end": "52399"
  },
  {
    "text": "also play on this as is expression uh but that's not the cach we'll be talking",
    "start": "52399",
    "end": "57600"
  },
  {
    "text": "about a whole lot in this session today we'll be talk talking about C caches King which is a component that",
    "start": "57600",
    "end": "65239"
  },
  {
    "text": "you can use to um store a local copy of your application um close to your view close",
    "start": "65239",
    "end": "72439"
  },
  {
    "text": "to your user so you can deliver that object or that content to your faster to your",
    "start": "72439",
    "end": "78560"
  },
  {
    "text": "users uh but you know if you think about it the the two terms cash and cache",
    "start": "78560",
    "end": "84840"
  },
  {
    "text": "spell differently are really quite similar and here's some data that shows that cas cash is Cash um and what I mean",
    "start": "84840",
    "end": "92920"
  },
  {
    "start": "92000",
    "end": "92000"
  },
  {
    "text": "here is you know a study uh and if you look at this study this says that a 1second delay in the page load time for",
    "start": "92920",
    "end": "101640"
  },
  {
    "text": "a website can cause 7% loss in conversions so if if you have an e-commerce website that does",
    "start": "101640",
    "end": "108560"
  },
  {
    "text": "$100,000 in revenue on a given day um then 1 second delay in the page load",
    "start": "108560",
    "end": "115040"
  },
  {
    "text": "time for that website can cause you to lose $2.5 million in sales over the",
    "start": "115040",
    "end": "120759"
  },
  {
    "text": "course of a year so that's just you know fewer page views Less customer less customers are",
    "start": "120759",
    "end": "127520"
  },
  {
    "text": "satisfied um but if you know what we hope to do in this session is give you some tips and ideas on how you can take",
    "start": "127520",
    "end": "134760"
  },
  {
    "text": "caching uh of your resources and use that to your advantage to improve that page load time to improve your customers",
    "start": "134760",
    "end": "141879"
  },
  {
    "text": "experience and hopefully uh helps you earn more cash at the",
    "start": "141879",
    "end": "147480"
  },
  {
    "text": "end so let's let's look at uh a little bit more data to see how um caching uh",
    "start": "148040",
    "end": "156920"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "can how caching might be a problem today or maybe how you can use caching to your advantage so I'm not sure if you're",
    "start": "156920",
    "end": "164159"
  },
  {
    "text": "familiar with the HTTP archive but this is a website that's run by Steve saers Steve saers is uh pretty well known in",
    "start": "164159",
    "end": "170959"
  },
  {
    "text": "the web performance uh Arena and uh he runs this website where he's measuring",
    "start": "170959",
    "end": "176840"
  },
  {
    "text": "uh the performance data for the top 1 million websites based on Alexa rankings",
    "start": "176840",
    "end": "182280"
  },
  {
    "text": "and he's looking at things such as the size of uh objects on your website",
    "start": "182280",
    "end": "188120"
  },
  {
    "text": "cachable resources error rates and so on and look at uh I wanted to look at",
    "start": "188120",
    "end": "194959"
  },
  {
    "text": "this one specific chart from his website that shows how many of your objects are actually cachable or static on your site",
    "start": "194959",
    "end": "202519"
  },
  {
    "start": "197000",
    "end": "197000"
  },
  {
    "text": "so on a typical website looking at the top million sites you can see that a very high percentage of objects on this",
    "start": "202519",
    "end": "209519"
  },
  {
    "text": "site are actually cachable they can be cached but the the other data that's",
    "start": "209519",
    "end": "215959"
  },
  {
    "text": "really startling is that only 44% of these resources are actually being",
    "start": "215959",
    "end": "221400"
  },
  {
    "text": "cached so there is a 56% of cashable resources which I think",
    "start": "221400",
    "end": "227319"
  },
  {
    "text": "of as lost opportunity these are resources on your side you know whether that's static",
    "start": "227319",
    "end": "232560"
  },
  {
    "text": "images or other resources that are reusable that could be delivered uh they don't change frequently could be",
    "start": "232560",
    "end": "238400"
  },
  {
    "text": "delivered to multiple users and you could take advantage of caching but a lot of the sites today are not doing",
    "start": "238400",
    "end": "244480"
  },
  {
    "text": "this so the goal for the rest of this talk me and myself and my colleagues is",
    "start": "244480",
    "end": "251360"
  },
  {
    "text": "for us to help you cach everything cash everything possible so what does that really mean",
    "start": "251360",
    "end": "257880"
  },
  {
    "text": "well the way we've decided to sort of structure the talk is by looking at the different layers of your application you",
    "start": "257880",
    "end": "265320"
  },
  {
    "text": "you can start with the the browser that's the device that your users are are using to interact with your",
    "start": "265320",
    "end": "271960"
  },
  {
    "text": "application to view your application next we look at uh proxy servers or servers at the edge of the internet",
    "start": "271960",
    "end": "278479"
  },
  {
    "text": "really close to your users and what could be cached at those uh at those",
    "start": "278479",
    "end": "284000"
  },
  {
    "text": "Edge locations we also look at the the web tier uh so the web servers that are",
    "start": "284000",
    "end": "289919"
  },
  {
    "text": "actually serving your application's traffic and frontting your application that sits in the data center uh then we",
    "start": "289919",
    "end": "296400"
  },
  {
    "text": "also look at the web tier uh the application tier and the database here and see how caching could be implemented",
    "start": "296400",
    "end": "302120"
  },
  {
    "text": "at each of those layers of your application stack so I I I I think of this in terms of layers so we decided to use uh a",
    "start": "302120",
    "end": "309960"
  },
  {
    "text": "layered cake uh to think in terms of um how different layers of your application",
    "start": "309960",
    "end": "316199"
  },
  {
    "text": "and how you can cache at each of these layers so we have the browser The Edge web cache application and database I'll",
    "start": "316199",
    "end": "323000"
  },
  {
    "text": "talk about the the browser cache and the edge cache and then my colleague here Chris Chris Ms he will uh come up and",
    "start": "323000",
    "end": "330000"
  },
  {
    "text": "he'll talk about the web application and database cach and then what I'm really excited to",
    "start": "330000",
    "end": "335840"
  },
  {
    "text": "uh to introduce who I'm really excited to introduce is uh we have a customer presenter with us here today uh stepen",
    "start": "335840",
    "end": "341280"
  },
  {
    "text": "Evans and he's from uh the Toronto Star which is the largest newspaper uh in",
    "start": "341280",
    "end": "346639"
  },
  {
    "text": "Canada and once Chris and I have gone through the how you can take advantage",
    "start": "346639",
    "end": "352000"
  },
  {
    "text": "of caching and some of the techniques at each layer of your application stack um stepen will talk about how for all the",
    "start": "352000",
    "end": "360319"
  },
  {
    "text": "applications that him and his team are responsible for at torono Star how they take advantage of caching at each of",
    "start": "360319",
    "end": "366360"
  },
  {
    "text": "these layers um of their of their infrastructure stack all right so let's Dive Right",
    "start": "366360",
    "end": "372280"
  },
  {
    "text": "In uh so as as we dive into the details one of the questions that I just want to",
    "start": "372280",
    "end": "379160"
  },
  {
    "text": "ask is why are page loaded page loads so slow why don't Pages load faster when",
    "start": "379160",
    "end": "385960"
  },
  {
    "text": "you go to an application and I think the answer there is at least in my mind because the",
    "start": "385960",
    "end": "391199"
  },
  {
    "text": "Internet is slow because the speed of light is slow the speed of light is only 300,000 km",
    "start": "391199",
    "end": "397680"
  },
  {
    "text": "per second and when you send data over glass over fiber that's even slower it's",
    "start": "397680",
    "end": "404720"
  },
  {
    "text": "only 200,000 km/ second so that's the fastest that your",
    "start": "404720",
    "end": "410479"
  },
  {
    "text": "packets your data can travel over the Internet so let's put that into perspective let's look at a real world",
    "start": "410479",
    "end": "415759"
  },
  {
    "text": "example so I look at uh the the download performance um so I did I I did a ping",
    "start": "415759",
    "end": "422840"
  },
  {
    "start": "419000",
    "end": "419000"
  },
  {
    "text": "from my home in Seattle to a server that's sitting out in New York and the roundtrip time for this ping was just",
    "start": "422840",
    "end": "429960"
  },
  {
    "text": "over 13,000 kilm so going from Seattle and then coming going to New York and then coming back so based on 200,000",
    "start": "429960",
    "end": "438319"
  },
  {
    "text": "km/s this would come up to theoretically 65 millisecond as the roundt trip and",
    "start": "438319",
    "end": "443960"
  },
  {
    "text": "then when I do the actual paying I measure 68 milliseconds as the actual U roundt trip time that it took for that",
    "start": "443960",
    "end": "450319"
  },
  {
    "text": "ping so the the two the theoretical and the measured roundt trip times pencil out so so that's good news but what do",
    "start": "450319",
    "end": "457479"
  },
  {
    "text": "this mean in terms of downloading an object this is just one round trip to that server and back to the",
    "start": "457479",
    "end": "463599"
  },
  {
    "text": "client so let's look at it in terms of downloading an actual file and what's",
    "start": "463599",
    "end": "468919"
  },
  {
    "start": "467000",
    "end": "467000"
  },
  {
    "text": "involved there and how many roundt trips may need to happen there so at the very",
    "start": "468919",
    "end": "474199"
  },
  {
    "text": "at the very beginning the client makes a connection to the server and there's a TCP connection that's establish lished",
    "start": "474199",
    "end": "479919"
  },
  {
    "text": "first so there's a Sinn that's sent to the server and then the server responds back with the syn act so that's one",
    "start": "479919",
    "end": "485560"
  },
  {
    "text": "round trip U so that takes 68 milliseconds in this example and then once that connection is established the",
    "start": "485560",
    "end": "491879"
  },
  {
    "text": "client responds back confirming that the connection is established with an act and asks for the the image to be",
    "start": "491879",
    "end": "497599"
  },
  {
    "text": "downloaded and then the server sends this image back so that's the second round trip another 68 milliseconds so",
    "start": "497599",
    "end": "503400"
  },
  {
    "text": "now we have 136 milliseconds for the first few bytes of this object to start",
    "start": "503400",
    "end": "509039"
  },
  {
    "text": "arriving on the client on the browser depending on the size of the object there may need to be other round",
    "start": "509039",
    "end": "514839"
  },
  {
    "text": "trips involved to get the rest of the object down on the browser so our goal should be to minimize this roundt trip",
    "start": "514839",
    "end": "521839"
  },
  {
    "text": "time this total time rather the 136 milliseconds as much as possible so let's see how we can do that",
    "start": "521839",
    "end": "529000"
  },
  {
    "text": "via the various uh layers of our application stack so starting with browser",
    "start": "529000",
    "end": "535320"
  },
  {
    "text": "cach this is probably the fastest that you can deliver your object to your",
    "start": "535720",
    "end": "541440"
  },
  {
    "text": "users because your object is cached on the hard disk of the device that they're using it's the browser can just get it",
    "start": "541440",
    "end": "548279"
  },
  {
    "text": "in not milliseconds we're talking microseconds here uh so the request does not need to go on the network at all",
    "start": "548279",
    "end": "554760"
  },
  {
    "text": "you're completely avoiding the request going on the network um and you do this simply by setting the max age header or",
    "start": "554760",
    "end": "561519"
  },
  {
    "text": "the expires header on your objects and most modern browsers will honor these",
    "start": "561519",
    "end": "567240"
  },
  {
    "text": "these headers and cast the object when possible for HTML 5 applications browsers that",
    "start": "567240",
    "end": "572760"
  },
  {
    "text": "support HTML 5 you can also use the Manifest file which is simply a text file where you specify which of your",
    "start": "572760",
    "end": "578839"
  },
  {
    "text": "pages should be cash for offline access so that's another mechanism that you can use you simply include the Manifest",
    "start": "578839",
    "end": "585360"
  },
  {
    "text": "attribute in the HTML tag of your document that you want to be cached so as I said this this helps",
    "start": "585360",
    "end": "592880"
  },
  {
    "text": "completely eliminate Network latency which sounds great on the surface uh but what's the catch the catch is browser",
    "start": "592880",
    "end": "599800"
  },
  {
    "text": "cachee size is very limited and you as application developers have no control",
    "start": "599800",
    "end": "606040"
  },
  {
    "text": "over changing that that size of that cache so um in in addition you're",
    "start": "606040",
    "end": "612920"
  },
  {
    "text": "actually you're actually competing with all of the other applications that your users are viewing on that same browser",
    "start": "612920",
    "end": "619959"
  },
  {
    "text": "and it's the same shared cache size that all of these applications are sharing including yours so the chances of your",
    "start": "619959",
    "end": "625560"
  },
  {
    "text": "application your pag is getting cashed there probably really low um so let's talk about Edge caching and",
    "start": "625560",
    "end": "632160"
  },
  {
    "text": "how you can use that to your advantage if your request does need to go out on",
    "start": "632160",
    "end": "638000"
  },
  {
    "text": "the internet how can you minimize the time for uh that client to get that data",
    "start": "638000",
    "end": "643880"
  },
  {
    "text": "back from the server so going back to our original example This Server is sitting all the way in New York City",
    "start": "643880",
    "end": "650120"
  },
  {
    "text": "what if we had a server that was sitting much closer to the client much closer to that location in Seattle now you can do",
    "start": "650120",
    "end": "658320"
  },
  {
    "text": "the two round trips that it it needs to take but the server is only 10 milliseconds away so you're caching at",
    "start": "658320",
    "end": "664920"
  },
  {
    "text": "an at an edge node and in this in this example it's a it's a Amazon cloudfront Edge node cloudfront is aws's content",
    "start": "664920",
    "end": "671639"
  },
  {
    "text": "delivery Network um so a server in cloudfront could be caching this piece",
    "start": "671639",
    "end": "676920"
  },
  {
    "text": "of content and the client can get this in 20 milliseconds now so the 20 versus",
    "start": "676920",
    "end": "682959"
  },
  {
    "text": "136 big difference there in terms of the time it takes for your client to download this object",
    "start": "682959",
    "end": "690200"
  },
  {
    "text": "now again this object does need to be at the cloudfront edge node it needs to be",
    "start": "690200",
    "end": "696240"
  },
  {
    "text": "cached there if it's not then cloudfront would have to go back to the original origin server in New York and download",
    "start": "696240",
    "end": "703440"
  },
  {
    "text": "that content from there but using a CDN like cloudfront can still help because",
    "start": "703440",
    "end": "708560"
  },
  {
    "text": "cloudfront maintains a persistent connection back to your origin server so cloudron is not doing two round trips",
    "start": "708560",
    "end": "715360"
  },
  {
    "text": "back to the origin it's really only doing one round trip because it asks the origin directly without needing to",
    "start": "715360",
    "end": "721880"
  },
  {
    "text": "establish that initial TCP connection because that's already present and just asks for the image and starts",
    "start": "721880",
    "end": "728160"
  },
  {
    "text": "downloading the first few bytes of that image in that single round trip so even if the object is not cached at",
    "start": "728160",
    "end": "733320"
  },
  {
    "text": "cloudfront we're talking about a 68 millisecond round trip from cloudfront to the origin over the Long Haul and",
    "start": "733320",
    "end": "740360"
  },
  {
    "text": "then another 20 milliseconds from client to the orig client to cloudfront so it's 888 milliseconds which is still much",
    "start": "740360",
    "end": "745760"
  },
  {
    "text": "lower than the 136 milliseconds so as I said cloudfront is a global",
    "start": "745760",
    "end": "752000"
  },
  {
    "start": "752000",
    "end": "752000"
  },
  {
    "text": "content delivery Network there are 46 Edge locations that cloudfront has around the world and chances are that",
    "start": "752000",
    "end": "759079"
  },
  {
    "text": "your where your viewers are in the world there's an edge location really close to them versus going all the way to a",
    "start": "759079",
    "end": "765519"
  },
  {
    "text": "single origin server that you may be running for instance on the East Coast so the way cloud from works the viewers",
    "start": "765519",
    "end": "772519"
  },
  {
    "start": "771000",
    "end": "771000"
  },
  {
    "text": "uh connect to a clar from Edge location um The Edge location can respond back with the object if it has it in its cach",
    "start": "772519",
    "end": "779440"
  },
  {
    "text": "otherwise the edge location will go back to An Origin server which could be an Amazon S3 bucket uh an Amazon elastic",
    "start": "779440",
    "end": "785360"
  },
  {
    "text": "load balancer or maybe even a custom origin server that's running in your own data",
    "start": "785360",
    "end": "790920"
  },
  {
    "text": "centers so when it comes to Edge caching how do you decide what to Cache at the edge of the internet on a on a Content",
    "start": "790920",
    "end": "797440"
  },
  {
    "text": "delivery Network so the way I like to think about it is let's look at the",
    "start": "797440",
    "end": "802720"
  },
  {
    "text": "different types of content that you have on your site and and see if each of",
    "start": "802720",
    "end": "808680"
  },
  {
    "text": "those content content types can potentially be cached at the Edge by setting the right cache control headers and utilizing a Content delivery Network",
    "start": "808680",
    "end": "815480"
  },
  {
    "text": "so we have static or reusable content these are the images and so forth you can have customized content you can have",
    "start": "815480",
    "end": "821440"
  },
  {
    "text": "some media content on your site and also potentially dynamic or unique personalized content so let's look at",
    "start": "821440",
    "end": "827959"
  },
  {
    "text": "each one in some detail so first static content this is the chart we saw earlier in the",
    "start": "827959",
    "end": "834040"
  },
  {
    "start": "833000",
    "end": "833000"
  },
  {
    "text": "presentation where 56% of static resources aren't even being cash on a",
    "start": "834040",
    "end": "839399"
  },
  {
    "text": "typical website so you know images CSS JavaScript you",
    "start": "839399",
    "end": "845720"
  },
  {
    "text": "know taking advantage of a Content delivery Network and setting a long max age or a time to live on that particular",
    "start": "845720",
    "end": "852880"
  },
  {
    "text": "resource or object will allow that Edge Edge server on the CDN Network to cach this object for a long period of time",
    "start": "852880",
    "end": "859959"
  },
  {
    "text": "and serve that locally to your viewers for requesting that and I wanted to give a customer",
    "start": "859959",
    "end": "866240"
  },
  {
    "text": "example here uh this is the picture of the Curiosity uh Lander that U uh the",
    "start": "866240",
    "end": "875079"
  },
  {
    "text": "the event was hosted by uh or or delivered the website experience was delivered by uh Amazon web services so",
    "start": "875079",
    "end": "882000"
  },
  {
    "text": "NASA JPL jet propulsion laboratory used used AWS including cloudfront to deliver",
    "start": "882000",
    "end": "887839"
  },
  {
    "text": "the website experience and the images uh to their viewers and when the images",
    "start": "887839",
    "end": "893120"
  },
  {
    "text": "arrived from the the Curiosity Rover um down to earth it's almost sound sounds",
    "start": "893120",
    "end": "899199"
  },
  {
    "text": "crazy to say that um uh uh JPL cached these images for a long period of time",
    "start": "899199",
    "end": "904759"
  },
  {
    "text": "on cloudfront so that all the viewers who are requesting this image uh could",
    "start": "904759",
    "end": "910120"
  },
  {
    "text": "get it from a cach server Lo very close to them let's talk a little bit about",
    "start": "910120",
    "end": "916519"
  },
  {
    "text": "customizing or customized content so in addition to static content um customized",
    "start": "916519",
    "end": "922399"
  },
  {
    "start": "917000",
    "end": "917000"
  },
  {
    "text": "content on your site could also be cached maybe for a shorter period of time maybe not for an entire day but a",
    "start": "922399",
    "end": "928440"
  },
  {
    "text": "few minutes for a few seconds at a time even um that can help uh scaling uh the",
    "start": "928440",
    "end": "934480"
  },
  {
    "text": "delivery of uh this type of content to your viewers without those requests necessarily going back to the origin",
    "start": "934480",
    "end": "939800"
  },
  {
    "text": "server you would typically customize content on your site by using either cookies or query string parameters and",
    "start": "939800",
    "end": "947279"
  },
  {
    "text": "cloudfront can be configured to forward both cookies and query strings back to the origin server and then those values",
    "start": "947279",
    "end": "955240"
  },
  {
    "text": "can be used at the edge servers to customize the cache uh version of your",
    "start": "955240",
    "end": "961319"
  },
  {
    "text": "page so this is another uh another way you can cache even more of your content",
    "start": "961319",
    "end": "967040"
  },
  {
    "text": "on your site something that you may not intuitively think about caching but could be cached at an edge server close",
    "start": "967040",
    "end": "973720"
  },
  {
    "text": "to the end users I wanted to give another example here Earth networks which is a cloud",
    "start": "973720",
    "end": "980399"
  },
  {
    "text": "who's a cloudfront customer um they use cookies to customize the weather data on",
    "start": "980399",
    "end": "985959"
  },
  {
    "text": "their application and even though the URL is the same same the ZIP code cookie value could be different and so the data",
    "start": "985959",
    "end": "993000"
  },
  {
    "text": "on the page is different and they cach this page with the cookie value for a",
    "start": "993000",
    "end": "999560"
  },
  {
    "text": "short period of time say five minutes at the edge note so that everyone else in that geographic area who wants to look",
    "start": "999560",
    "end": "1005560"
  },
  {
    "text": "at the weather at in Las Vegas can go to this page and get a cach copy even though this is customized to the Las",
    "start": "1005560",
    "end": "1011920"
  },
  {
    "text": "Vegas area and you know almost an example of personalized Dynamic content",
    "start": "1011920",
    "end": "1017839"
  },
  {
    "text": "really what about video content so video content can be uh you know it could be",
    "start": "1017839",
    "end": "1024600"
  },
  {
    "start": "1020000",
    "end": "1020000"
  },
  {
    "text": "especially helpful to cat video content at an edge server close to your viewers because video content generally is much",
    "start": "1024600",
    "end": "1031959"
  },
  {
    "text": "larger in size than static objects or static images on your site in addition",
    "start": "1031959",
    "end": "1037798"
  },
  {
    "text": "to that with video there is a a large fragmented ecosystem today of different",
    "start": "1037799",
    "end": "1044438"
  },
  {
    "text": "devices different protocols that you need to deliver your video content to and a Content delivery Network can",
    "start": "1044439",
    "end": "1051160"
  },
  {
    "text": "really help simplify uh that that fragmentation and help you deliver to all of these",
    "start": "1051160",
    "end": "1056679"
  },
  {
    "text": "different devices and in in those different protocols um in a much simpler way than you needing to worry about that",
    "start": "1056679",
    "end": "1063039"
  },
  {
    "text": "in your origin servers so I'll give you another customer example here uh PBS",
    "start": "1063039",
    "end": "1068559"
  },
  {
    "text": "who's been a longtime AWS and cloudfront customer um they were using another CDN",
    "start": "1068559",
    "end": "1074760"
  },
  {
    "text": "previously but they moved over to cloudfront because they saw better performance and and got lower costs from using",
    "start": "1074760",
    "end": "1081840"
  },
  {
    "text": "cloudfront and today they deliver a vast majority of their uh streaming video content over the cloud foredge Network",
    "start": "1081840",
    "end": "1088320"
  },
  {
    "text": "so a lot of that content that you may be seeing on their website uh is cached at a Cloud foret Server close to",
    "start": "1088320",
    "end": "1097000"
  },
  {
    "text": "you what about a live stream um you know this is something where you might think",
    "start": "1097400",
    "end": "1103520"
  },
  {
    "start": "1101000",
    "end": "1101000"
  },
  {
    "text": "well you know the stream is being generated live how can you take advantage of caching for a live event so",
    "start": "1103520",
    "end": "1109080"
  },
  {
    "text": "if you're doing any Live Events you can still take advantage of cloudfront by",
    "start": "1109080",
    "end": "1114520"
  },
  {
    "text": "cloudfront fronting the media servers that could be an adobe uh Adobe Media Server a Windows iOS server or a wowa",
    "start": "1114520",
    "end": "1121600"
  },
  {
    "text": "media server running on ec2 and cloudfront can still be caching the live stream generated from that media server",
    "start": "1121600",
    "end": "1128480"
  },
  {
    "text": "and uh help scale the delivery of that live stream to all of your viewers around the world so I'll give you",
    "start": "1128480",
    "end": "1135280"
  },
  {
    "text": "another customer example here a very recent one just earlier this week we used U Amazon cloudfront to live",
    "start": "1135280",
    "end": "1142360"
  },
  {
    "text": "stream both the Keynotes on Wednesday morning and Thursday morning from right here in Las Vegas so we had a crew here",
    "start": "1142360",
    "end": "1148679"
  },
  {
    "text": "capturing the live event encoding it on site and then sending it to a media server in Amazon",
    "start": "1148679",
    "end": "1154799"
  },
  {
    "text": "ec2 and then cloudfront was sitting up uh in front of those media servers taking the live stream caching it and",
    "start": "1154799",
    "end": "1161480"
  },
  {
    "text": "delivering it out to all of the viewers so we were able to scale to thousands of viewers for both of the events and and",
    "start": "1161480",
    "end": "1168919"
  },
  {
    "text": "cloudfront handled 90% of the traffic uh from its Ed servers from uh cached",
    "start": "1168919",
    "end": "1175400"
  },
  {
    "text": "stream and had to go back to the media server in ec2 only 10% of the time so",
    "start": "1175400",
    "end": "1180520"
  },
  {
    "text": "that's a great way to not have to scale your origin media instances media server instances and let graer handle the the",
    "start": "1180520",
    "end": "1187840"
  },
  {
    "text": "scale and reduce your cost at the origin and then finally what about your",
    "start": "1187840",
    "end": "1194320"
  },
  {
    "text": "Dynamic content you could also have some Dynamic content on your site and this content typically has zero TTL so can't",
    "start": "1194320",
    "end": "1200799"
  },
  {
    "start": "1195000",
    "end": "1195000"
  },
  {
    "text": "really be cached uh should you still take advantage of cloud F and put cloudfront in front of your Dynamic",
    "start": "1200799",
    "end": "1206720"
  },
  {
    "text": "content on your site so I'll go through this quickly uh we had we had a full hour session",
    "start": "1206720",
    "end": "1213880"
  },
  {
    "text": "earlier in the week and I'd encourage you if you missed that to see the video recording of that after the event where",
    "start": "1213880",
    "end": "1219360"
  },
  {
    "text": "we went into great depth about how cloudfront can help accelerate the delivery of of dynamic content when uh",
    "start": "1219360",
    "end": "1226400"
  },
  {
    "text": "when Dynamic content is proxied via Cloud Edge a uh so I won't get into too much details here but cloudfront has TCP",
    "start": "1226400",
    "end": "1232919"
  },
  {
    "text": "IP optimizations keep alive connections that really help speed up the delivery",
    "start": "1232919",
    "end": "1238159"
  },
  {
    "text": "of uh this content even though each request could be considered a cash Miss",
    "start": "1238159",
    "end": "1243840"
  },
  {
    "text": "where cloudfront won't have that object in Cache and needs to go back to the origin server cloudfront can you can",
    "start": "1243840",
    "end": "1249600"
  },
  {
    "text": "also take advantage of cloudfront for SSL termination and for postp put upload optimization and uh offload your origin",
    "start": "1249600",
    "end": "1256720"
  },
  {
    "text": "servers just like the way we did did for the live stream example um and let the edge servers handle a lot of that",
    "start": "1256720",
    "end": "1263320"
  },
  {
    "text": "scaling and a lot of the load um and finally cloudfront for dynamic content",
    "start": "1263320",
    "end": "1269640"
  },
  {
    "text": "the pricing for cloudfront is the same as static content delivery so it's really low same as other AWS Services",
    "start": "1269640",
    "end": "1275240"
  },
  {
    "text": "pay as you go pricing model so I'll give you another customer example here uh we recently launched",
    "start": "1275240",
    "end": "1281400"
  },
  {
    "text": "support for postp put upload optimizations so cloudfront was uh primarily a download only CDN that",
    "start": "1281400",
    "end": "1288080"
  },
  {
    "text": "supported only get and head but now you can also do post and put as well as other HTTP verbs and UA is taking",
    "start": "1288080",
    "end": "1295120"
  },
  {
    "text": "advantage of this feature to accelerate their restful apis and has Cloud front in front of their API",
    "start": "1295120",
    "end": "1301039"
  },
  {
    "text": "endpoints uh and uh that helps them minimize packet loss and upload latency",
    "start": "1301039",
    "end": "1306360"
  },
  {
    "text": "for their API users so at this point I'll hand it over",
    "start": "1306360",
    "end": "1313159"
  },
  {
    "text": "to Chris to walk you through some of the other layers of your infrastructure and how you can take advantage of caching there",
    "start": "1313159",
    "end": "1320520"
  },
  {
    "text": "thanks Niar um so my name is Chris Ms I'm a Solutions architect with Amazon web services based in our New York City",
    "start": "1321960",
    "end": "1328840"
  },
  {
    "text": "office and I work with uh customers of all shapes and sizes and helping them build on AWS and scaling their websites",
    "start": "1328840",
    "end": "1336919"
  },
  {
    "text": "so uh we're going to dive into the rest of our layers of our cake here today and talk about some of the other things you",
    "start": "1336919",
    "end": "1342400"
  },
  {
    "text": "can do to Cache content and cache all sorts of data in your applications inside of your infrastructure so Niar",
    "start": "1342400",
    "end": "1349480"
  },
  {
    "text": "talked to us about browser caching and Edge caching stuff that would typically sit you know outside the four virtual",
    "start": "1349480",
    "end": "1355760"
  },
  {
    "text": "walls of your infrastructure as it may be so we're going to dive in a little bit deeper so first up though uh as as my",
    "start": "1355760",
    "end": "1363159"
  },
  {
    "text": "mother would tell me you can't have your desert until you have your dinner so before we can get into our layer cake",
    "start": "1363159",
    "end": "1368440"
  },
  {
    "text": "here I wanted to talk about an experiment that I did in preparation for this uh presentation so Niar talked",
    "start": "1368440",
    "end": "1375279"
  },
  {
    "start": "1374000",
    "end": "1374000"
  },
  {
    "text": "about how uh HTTP archive has this one wonderful amount of information about",
    "start": "1375279",
    "end": "1380799"
  },
  {
    "text": "public website requests how many HTP requests per page the type of objects that they are how well they are cached",
    "start": "1380799",
    "end": "1387840"
  },
  {
    "text": "or not cached gave the statistic about how 50% or sorry 56% of cashable objects",
    "start": "1387840",
    "end": "1393520"
  },
  {
    "text": "aren't cached properly but it's actually really difficult to find out information comparatively for inside of an",
    "start": "1393520",
    "end": "1399880"
  },
  {
    "text": "infrastructure there aren't too many people who have published studies or published you even blog posts about hey",
    "start": "1399880",
    "end": "1406000"
  },
  {
    "text": "we added caching to this layer and this was the result of it so we like to do things as data driven as possible here",
    "start": "1406000",
    "end": "1412159"
  },
  {
    "text": "so I decided to come up with a really brief small experiment so I did this experiment is I took a single dc2",
    "start": "1412159",
    "end": "1417840"
  },
  {
    "text": "instance a single non multi- RDS instance and then I ran the uh Drupal",
    "start": "1417840",
    "end": "1424120"
  },
  {
    "text": "Commerce Kickstart uh application on that ec2 instance so Drupal Commerce",
    "start": "1424120",
    "end": "1429520"
  },
  {
    "text": "Kickstart is just the distribution of Drupal has a lot of eCommerce functionality in it uh it was running in",
    "start": "1429520",
    "end": "1435760"
  },
  {
    "text": "Linux just running latest Apache latest PHP that I had in Amazon Linux and I also had an elastic IP address on the",
    "start": "1435760",
    "end": "1442240"
  },
  {
    "text": "ec2 instance so once I had that environment up and running I then proceeded to use a uh load testing tool",
    "start": "1442240",
    "end": "1449840"
  },
  {
    "text": "to throw about 8 million requests at it uh 40 per second from four other nodes in a different ec2 region not a huge",
    "start": "1449840",
    "end": "1456960"
  },
  {
    "text": "amount of traffic really um but going at a single instance it's actually quite a lot of traffic for that one instance to",
    "start": "1456960",
    "end": "1463440"
  },
  {
    "text": "handle and then because I need to gather some data I made use of new relics uh PHP agent as well as the web page",
    "start": "1463440",
    "end": "1470440"
  },
  {
    "text": "test.org website to uh to do some profiling of of what the results are of my",
    "start": "1470440",
    "end": "1476039"
  },
  {
    "text": "tests so again this is the infrastructure I had my clients my test nodes talking to an EIP attached to an",
    "start": "1476039",
    "end": "1482159"
  },
  {
    "text": "ec2 instance the ec2 instance talk to RDS for the database that Drupal needed",
    "start": "1482159",
    "end": "1487279"
  },
  {
    "text": "to talk to so uh the results really weren't that great actually um again",
    "start": "1487279",
    "end": "1493760"
  },
  {
    "text": "this was just the basic default setup there was no tuning put in place fired up an instance installed it ran the",
    "start": "1493760",
    "end": "1499679"
  },
  {
    "text": "basic configuration what I found is that uh very easily the requests that were throwing at the host uh completely maxed",
    "start": "1499679",
    "end": "1506159"
  },
  {
    "text": "out CPU uh maybe used about uh 75% or so of the available memory on the instance",
    "start": "1506159",
    "end": "1511480"
  },
  {
    "text": "at any given point in time but uh what New Relic was able to tell me is that uh what I was looking at was almost 15sec",
    "start": "1511480",
    "end": "1518799"
  },
  {
    "text": "page response times at the server so this isn't in the client this isn't in the browser this is the server serving",
    "start": "1518799",
    "end": "1525960"
  },
  {
    "text": "up the request for this homepage uh for this Drupal Commerce Kickstart",
    "start": "1525960",
    "end": "1531679"
  },
  {
    "text": "application it resulted in a really low request per minute um here about 159",
    "start": "1531679",
    "end": "1537720"
  },
  {
    "text": "requests per minute that works out to maybe two or three uh requests per second and since I was throwing 40",
    "start": "1537720",
    "end": "1543919"
  },
  {
    "text": "requests per second at it from these different hosts you could see that everything was very well backlogged going into it and then lastly um from",
    "start": "1543919",
    "end": "1551880"
  },
  {
    "text": "web page test or web page test org website I could see that I was serving up mostly static content uh almost 95%",
    "start": "1551880",
    "end": "1560360"
  },
  {
    "text": "of the requests to the server were to serve up just static assets so again",
    "start": "1560360",
    "end": "1565440"
  },
  {
    "text": "basic setup nothing tuned here didn't expect anything really fantastic was really surprised by actually how how uh",
    "start": "1565440",
    "end": "1572960"
  },
  {
    "text": "how poor this kind of performed so we'll uh we'll get back to the experiment a little bit later after we talk about",
    "start": "1572960",
    "end": "1578240"
  },
  {
    "text": "some of the caching techniques here and uh we we'll see how we're able to change things up so again going back into our uh",
    "start": "1578240",
    "end": "1586240"
  },
  {
    "text": "wonderful layer cake of caching today uh the first stop is going to be talking about a web cache so web cach is going",
    "start": "1586240",
    "end": "1592480"
  },
  {
    "text": "to be a caching area that typically is sitting between your your web or application servers and either your",
    "start": "1592480",
    "end": "1597760"
  },
  {
    "text": "users or your CDN with the idea that you're going to be caching usually uh static HTTP resources uh before serving",
    "start": "1597760",
    "end": "1605080"
  },
  {
    "text": "them out to again your users or to that CDN so it's going to reduce the load back into your web or application tier",
    "start": "1605080",
    "end": "1611000"
  },
  {
    "text": "it's also going to improve performance going out to your your CDN Network so there's a general really good win all",
    "start": "1611000",
    "end": "1617240"
  },
  {
    "text": "around there's a number of different popular Solutions uh one of the most popular ones today that I continue to run into",
    "start": "1617240",
    "end": "1623120"
  },
  {
    "start": "1622000",
    "end": "1622000"
  },
  {
    "text": "customers using is varnish really great piece of Open Source software up next are uh you know web servers helpfully",
    "start": "1623120",
    "end": "1629559"
  },
  {
    "text": "you're all familiar with enginex Apache they both have modules and ways that you can configure them to do to do some",
    "start": "1629559",
    "end": "1635080"
  },
  {
    "text": "better caching last up uh or not last up I'm sorry next up is squid um a tool",
    "start": "1635080",
    "end": "1640279"
  },
  {
    "text": "that's been around for a long time but still very performant very popular another tool called pro ball don't run",
    "start": "1640279",
    "end": "1645720"
  },
  {
    "text": "into it too often but every now and then I do see people using it and then lastly there are language specific Frameworks so this was a PHP",
    "start": "1645720",
    "end": "1652480"
  },
  {
    "text": "application there are caching tools like APC and Zen and several others that I can make use of and again depending on",
    "start": "1652480",
    "end": "1658480"
  },
  {
    "text": "the language of your application there might be other different thirdparty pieces of software that can do some uh",
    "start": "1658480",
    "end": "1663840"
  },
  {
    "text": "post page generation caching before it's served out so if we were to look at an",
    "start": "1663840",
    "end": "1669240"
  },
  {
    "text": "infrastructure here excuse me that we would uh be applying a web cache to uh",
    "start": "1669240",
    "end": "1674600"
  },
  {
    "text": "pretty straightforward infrastructure my caching layer lives here in between a forward- facing",
    "start": "1674600",
    "end": "1680919"
  },
  {
    "text": "elastic load balancer that acts as origin to my cloudfront uh",
    "start": "1680919",
    "end": "1686320"
  },
  {
    "text": "CDN and then pushes back to an elb that would talk to my web",
    "start": "1686320",
    "end": "1692000"
  },
  {
    "text": "tier and if we were to think about how our requests would come into the stack and back out again customer would",
    "start": "1692519",
    "end": "1697679"
  },
  {
    "text": "generate the request go to cloudfront cloudfront could potentially passing it back to my elb which would",
    "start": "1697679",
    "end": "1704399"
  },
  {
    "text": "pass it back to my caching tier and if the cach hadn't been warmed or there was nothing in there it's going to pass it",
    "start": "1704399",
    "end": "1709720"
  },
  {
    "text": "back to its origin or its source for for data so back to my elb back to my web",
    "start": "1709720",
    "end": "1715480"
  },
  {
    "text": "ec2 instances and then the request will return back out again so again back through the elb but now this time when",
    "start": "1715480",
    "end": "1722399"
  },
  {
    "text": "it hits my cach instance my cash instance would be caching that data for further use and then the request would",
    "start": "1722399",
    "end": "1728320"
  },
  {
    "text": "get passed back out to our customer the next time that our customer makes this request goes back again",
    "start": "1728320",
    "end": "1735279"
  },
  {
    "text": "through cloudfront back to our e EXC",
    "start": "1735279",
    "end": "1740360"
  },
  {
    "text": "me and then on to our cach instances this time though because we have the data in our cache our cach is going to",
    "start": "1740360",
    "end": "1746080"
  },
  {
    "text": "serve this up so you can picture how this could be really valuable for Content uh on your website that maybe",
    "start": "1746080",
    "end": "1752360"
  },
  {
    "text": "isn't changing too too often it's not very highly Dynamic we're reducing a significant amount of load off of our",
    "start": "1752360",
    "end": "1758519"
  },
  {
    "text": "our actual web layer oh sorry so the request then we go",
    "start": "1758519",
    "end": "1763919"
  },
  {
    "text": "back out from our cach tier",
    "start": "1763919",
    "end": "1769240"
  },
  {
    "text": "so some general guidance for a web cache um the advice that I always recommend is",
    "start": "1769240",
    "end": "1774480"
  },
  {
    "text": "opt for something that is acting out of memory as opposed to something from disk you want your cache to be fast you want",
    "start": "1774480",
    "end": "1780799"
  },
  {
    "text": "it to be quick you don't necessarily care about the persistency of this cache so you can feel comfortable to use a a",
    "start": "1780799",
    "end": "1787640"
  },
  {
    "text": "tool or an application that's going to serve this data directly out of memory it's going to be much much faster and uh",
    "start": "1787640",
    "end": "1793880"
  },
  {
    "text": "much more performant you really want to pay attention to the metrics that come out of whatever",
    "start": "1793880",
    "end": "1800039"
  },
  {
    "text": "website I read a story about a company that was not doing this properly and was",
    "start": "1858600",
    "end": "1864600"
  },
  {
    "text": "doing some web caching where they were caching Dynamic Pages for their users",
    "start": "1864600",
    "end": "1869760"
  },
  {
    "text": "because they were not paying attention to session IDs and cookies uh every now and then every user on the site would",
    "start": "1869760",
    "end": "1876399"
  },
  {
    "text": "seem as if they were logged in as the same person so you could have user Sally and user Bob and user John and basically",
    "start": "1876399",
    "end": "1883559"
  },
  {
    "text": "based on whoever's Dynamic page was cached first they all looked like they were the same person so it's another",
    "start": "1883559",
    "end": "1889679"
  },
  {
    "text": "thing you need to be cautious of and be thinking about when you're designing to use a web cache also how do you go about deciding",
    "start": "1889679",
    "end": "1896639"
  },
  {
    "text": "what it is that you want to cash uh my general recommendation for this again paying attention to the kind of cookies",
    "start": "1896639",
    "end": "1901919"
  },
  {
    "text": "that you allow to burst the cash is to do things like cash every page for a user that doesn't have maybe a session",
    "start": "1901919",
    "end": "1908639"
  },
  {
    "text": "existing so if they haven't logged into your website right if they haven't logged in to maybe add something to a",
    "start": "1908639",
    "end": "1914000"
  },
  {
    "text": "cart or go through some sort of other action you should try to to cach is many of the pages that they're going to be",
    "start": "1914000",
    "end": "1919799"
  },
  {
    "text": "interfacing with um versus when they're logged in uh next is obviously anything that is",
    "start": "1919799",
    "end": "1926279"
  },
  {
    "text": "a static page so let's say that your website has um things like help guides",
    "start": "1926279",
    "end": "1931559"
  },
  {
    "text": "or informational Pages or a knowledge base or product pages things that really don't change too often um these are",
    "start": "1931559",
    "end": "1937960"
  },
  {
    "text": "things that you can very easily cash and set a Long Live TTL for without have to worry about um you know storing content",
    "start": "1937960",
    "end": "1945279"
  },
  {
    "text": "that you shouldn't or serving content you shouldn't next is uh doing some basic analysis with traffic uh traffic",
    "start": "1945279",
    "end": "1951120"
  },
  {
    "text": "logs so whether they come from your web servers or your CDN uh taking a look at all the requests that are being made all",
    "start": "1951120",
    "end": "1957480"
  },
  {
    "text": "of the data that you're serving back out and figuring out what ratio of that is non- dynamic content uh most people are",
    "start": "1957480",
    "end": "1964120"
  },
  {
    "text": "surprised when they find out just how much static content they are serving out in terms of HTML and then lastly even",
    "start": "1964120",
    "end": "1970360"
  },
  {
    "text": "really small ttls um I've seen ttls as short as 20 30 seconds being drastic",
    "start": "1970360",
    "end": "1976480"
  },
  {
    "text": "improvements to uh the load being reduced from a backend infrastructure uh ttls as low as 60 seconds can be",
    "start": "1976480",
    "end": "1982679"
  },
  {
    "text": "incredibly valuable if you take an application that's getting a couple thousand requests per",
    "start": "1982679",
    "end": "1988399"
  },
  {
    "text": "second so moving down to the next layer of our uh our wonderful caching cake",
    "start": "1988399",
    "end": "1993600"
  },
  {
    "text": "today we're talk about application cache so coming in one level underneath",
    "start": "1993600",
    "end": "1998799"
  },
  {
    "text": "our web cach here application cache is going to be something that from an application Level you're going to be",
    "start": "1998799",
    "end": "2004200"
  },
  {
    "text": "you're going to be caching resources uh things such as session information temporary application information",
    "start": "2004200",
    "end": "2010360"
  },
  {
    "text": "metadata cart information intermediary process information things that maybe",
    "start": "2010360",
    "end": "2015399"
  },
  {
    "text": "don't belong directly in a database but that might have been pushed forward to you by a user for for some length of",
    "start": "2015399",
    "end": "2021360"
  },
  {
    "text": "time inside of a session so popular solutions for these uh some really common ones here mcash D",
    "start": "2021360",
    "end": "2029000"
  },
  {
    "start": "2027000",
    "end": "2027000"
  },
  {
    "text": "redis Cassandra and then uh Amazon Dynamo DB so looking again at our",
    "start": "2029000",
    "end": "2035760"
  },
  {
    "text": "infrastructure here uh we've seen that I have added in now elastic hash into a a",
    "start": "2035760",
    "end": "2041600"
  },
  {
    "text": "different subnet in my VPC or subnets I should say and our web and app instances would now be talking to this tier for",
    "start": "2041600",
    "end": "2049118"
  },
  {
    "text": "this data so our application requests would come in again from our CDN to our forward- facing load balancer and get",
    "start": "2049119",
    "end": "2056000"
  },
  {
    "text": "passed back I had mentioned before Dynamo DB as a solution for this and anytime that I",
    "start": "2056000",
    "end": "2061800"
  },
  {
    "start": "2059000",
    "end": "2059000"
  },
  {
    "text": "bring this up with people who aren't aware of this they're usually a little surprised so we actually have in rphp",
    "start": "2061800",
    "end": "2067280"
  },
  {
    "text": "SDK a PHP session Handler that is backed by Dynamo DB it uses all of the same native",
    "start": "2067280",
    "end": "2073638"
  },
  {
    "text": "calls that you would find in the PHP session handling uh framework but it backs it by Dynamo DB so what it can do",
    "start": "2073639",
    "end": "2080679"
  },
  {
    "text": "is it can give you an incredibly low latency yet highly persistent uh session",
    "start": "2080679",
    "end": "2085720"
  },
  {
    "text": "store so instead of having it stored in memory having to worry about potentially losing it or storing it somewhere on dis",
    "start": "2085720",
    "end": "2091200"
  },
  {
    "text": "and not having it B is performant you can actually get the Best of Both Worlds by storing the session data in Dynamo DB",
    "start": "2091200",
    "end": "2096638"
  },
  {
    "text": "and you can grab this code uh from our our SDK again and there's some examples in the documentation of",
    "start": "2096639",
    "end": "2102320"
  },
  {
    "text": "how it works and so how that would look in our infrastructure here because Dynamo DB is",
    "start": "2102320",
    "end": "2108839"
  },
  {
    "text": "an internet facing service is that we'd have to provide some method for us to get from inside our VPC out to Dynamo DB",
    "start": "2108839",
    "end": "2116320"
  },
  {
    "text": "and uh I'm doing this all of my uh my network diagrams in VPC uh hopefully if",
    "start": "2116320",
    "end": "2121560"
  },
  {
    "text": "you've been uh going to some of the great sessions this week about VPC and building VPC you know that it is definitely the thing to be doing so in",
    "start": "2121560",
    "end": "2128440"
  },
  {
    "text": "this case I've got some squid proxy servers they're actually passing requests from my webon application tier",
    "start": "2128440",
    "end": "2133960"
  },
  {
    "text": "out to Dynamo DB so typically people might think that they would do this via Nat instance and it is another common",
    "start": "2133960",
    "end": "2139800"
  },
  {
    "text": "way to do it but you can actually set up squid proxies as a reverse proxy from inside your infrastructure to outside",
    "start": "2139800",
    "end": "2146640"
  },
  {
    "text": "internet services we have a really great tutorial and article on our website for this talks a little bit further about",
    "start": "2146640",
    "end": "2152200"
  },
  {
    "text": "how it would work and how this can give you a really high-scale solution for doing out of your VPC to internet",
    "start": "2152200",
    "end": "2157960"
  },
  {
    "text": "service calls uh use cases again for application cache session information temporary data",
    "start": "2157960",
    "end": "2165359"
  },
  {
    "text": "from your application uh and then really interesting things like rate limiting if any of you have a publicly facing API or",
    "start": "2165359",
    "end": "2172200"
  },
  {
    "text": "uh say publicly facing um ways that your users can interact with each other maybe",
    "start": "2172200",
    "end": "2178640"
  },
  {
    "text": "member-to-member emails chats uh ways that they can do things on your system it's actually really important to",
    "start": "2178640",
    "end": "2184720"
  },
  {
    "text": "implement some sort of rate limiting and so uh what I'll see people do is keep that rate liming information in an",
    "start": "2184720",
    "end": "2191480"
  },
  {
    "text": "application cache such that it's very lightweight and you can very easily access it and then next lastly is uh",
    "start": "2191480",
    "end": "2197800"
  },
  {
    "text": "things like counters so views scores leaderboards stuff like that uh for those of you that are Twitter users",
    "start": "2197800",
    "end": "2204760"
  },
  {
    "text": "Twitter actually serves out your Twitter feed via reddis essentially acting as an application cache for",
    "start": "2204760",
    "end": "2211400"
  },
  {
    "text": "you so how do you decide where to cash here or what to Cache uh you know ideally you treat the data in this cache",
    "start": "2211400",
    "end": "2217720"
  },
  {
    "text": "as being uh tolerant of loss so again this the this caching layer is not a place where you are storing any",
    "start": "2217720",
    "end": "2223280"
  },
  {
    "text": "persistent data typically you're storing data either um that your your user",
    "start": "2223280",
    "end": "2228560"
  },
  {
    "text": "already has would be providing to you via cookie or that maybe is something that is generated through the application and could be very easily",
    "start": "2228560",
    "end": "2234760"
  },
  {
    "text": "generated again so you're typically not looking for persistence at this layer that you certainly could be um and",
    "start": "2234760",
    "end": "2241359"
  },
  {
    "text": "you're also looking for things that typically don't make sense to store in a database because it could be potentially",
    "start": "2241359",
    "end": "2246839"
  },
  {
    "text": "uh too hot for database too much load too much traffic and it may not make sense in any sort of structured",
    "start": "2246839",
    "end": "2252359"
  },
  {
    "text": "database and then lastly you want to look at any sort of data that your application might be generating uh even",
    "start": "2252359",
    "end": "2258200"
  },
  {
    "text": "intermediary inside of a process inside of a page load that it might need to generate a request again instead of",
    "start": "2258200",
    "end": "2263960"
  },
  {
    "text": "constantly having that load in your application take that data push it out to a cache and be able to call it from",
    "start": "2263960",
    "end": "2270880"
  },
  {
    "text": "there so uh moving down into the bottom layer of our our cake today is a",
    "start": "2270880",
    "end": "2276680"
  },
  {
    "text": "database caches so again pretty straightforward the idea here is that we would be caching database queries and",
    "start": "2276680",
    "end": "2282359"
  },
  {
    "text": "some sort of other tier um this could be a separate tier it could be a tier on the database pretty much all major",
    "start": "2282359",
    "end": "2287839"
  },
  {
    "text": "databases today have some form of query cache that would live in the database engine and this could be any sort of",
    "start": "2287839",
    "end": "2293720"
  },
  {
    "text": "query you have that uh you know would be repetitive and that you don't want to have continually running against the",
    "start": "2293720",
    "end": "2299680"
  },
  {
    "text": "database popular solutions for this again pretty much every major database out there today has a query cache that",
    "start": "2299680",
    "end": "2305720"
  },
  {
    "text": "you can easily enable um beyond that mimc D continues to still be a very popular solution for this um and that",
    "start": "2305720",
    "end": "2312200"
  },
  {
    "text": "could be on dedicated hosts where I'll talk about in a minute about how my SQL 5.6 actually offers up MCD local to the",
    "start": "2312200",
    "end": "2319640"
  },
  {
    "text": "database which is really something kind of interesting and then also I see redus being used here pretty heavily these",
    "start": "2319640",
    "end": "2325359"
  },
  {
    "text": "days it's becoming a uh a very good option for uh for doing this uh word of caution here um I'm",
    "start": "2325359",
    "end": "2333119"
  },
  {
    "text": "actually not a huge fan of in engine database caches uh there are a lot of",
    "start": "2333119",
    "end": "2338359"
  },
  {
    "text": "people a lot of results that you'll see that you can cause a large invariable impact in performance to your database",
    "start": "2338359",
    "end": "2344560"
  },
  {
    "text": "by having memory used for a query cache so for things like my SQL you would have to worry about what space you were using",
    "start": "2344560",
    "end": "2350720"
  },
  {
    "text": "up for the query cache that couldn't be used from your normal buffer pool and how that could affect other query uh",
    "start": "2350720",
    "end": "2357880"
  },
  {
    "text": "performance so where we this live in our infrastructure uh we had already mentioned where elasticache would live",
    "start": "2357880",
    "end": "2363240"
  },
  {
    "start": "2361000",
    "end": "2361000"
  },
  {
    "text": "so we could potentially use that again in this tier and then you could be talking again to it an in database query",
    "start": "2363240",
    "end": "2369200"
  },
  {
    "text": "cache on your database infrastructure in this case I've got RDS maybe running my SQL or Oracle or SQL server or Now",
    "start": "2369200",
    "end": "2375839"
  },
  {
    "text": "postest using the local query cache in terms of how this works I just",
    "start": "2375839",
    "end": "2382400"
  },
  {
    "text": "want to give a really quick sample um this is basically some very basic pseudo code for using mimc D to query or sorry",
    "start": "2382400",
    "end": "2389680"
  },
  {
    "text": "to Cache a database query uh very very basic sample maybe not the best way to do it but",
    "start": "2389680",
    "end": "2395800"
  },
  {
    "text": "essentially we have a function where we trying to uh retrieve from our cache some information based on a query so we",
    "start": "2395800",
    "end": "2402240"
  },
  {
    "text": "pass in the query the first thing that we're going to do is actually create an md5 sum of the query we would use that",
    "start": "2402240",
    "end": "2407560"
  },
  {
    "text": "as the lookup key in our cache we then go and query our cache for that lookup key if we get back to the result return",
    "start": "2407560",
    "end": "2414480"
  },
  {
    "text": "it back to our application if we don't we would query our database take the result put it into our cache and also",
    "start": "2414480",
    "end": "2420040"
  },
  {
    "text": "serve the the query response back out to our user so again very simple couple of lines of code here this is something you",
    "start": "2420040",
    "end": "2426599"
  },
  {
    "text": "could drop into an application and any place that you make a query instead of uh you know calling your query Handler",
    "start": "2426599",
    "end": "2432200"
  },
  {
    "text": "directly call this function which could then pass it back to the others so I mentioned really briefly",
    "start": "2432200",
    "end": "2438560"
  },
  {
    "text": "before that MySQL 5.6 now has support for built-in mcash D this actually",
    "start": "2438560",
    "end": "2443640"
  },
  {
    "start": "2439000",
    "end": "2439000"
  },
  {
    "text": "something really exciting because the two are have been paired up traditionally for probably going on",
    "start": "2443640",
    "end": "2448839"
  },
  {
    "text": "about 10 years now and so uh what they've done with 5.6 is you can actually run mcash D inside of my SQL",
    "start": "2448839",
    "end": "2456200"
  },
  {
    "text": "where the the in space is actually backed up by NB uh the NB engine on the",
    "start": "2456200",
    "end": "2462280"
  },
  {
    "text": "host so you get the best of both worlds from having a really high performant key value store in memory and then you have",
    "start": "2462280",
    "end": "2467920"
  },
  {
    "text": "this really strong persistency that you get from INB so a really cool thing uh",
    "start": "2467920",
    "end": "2474000"
  },
  {
    "text": "that uh is is definitely uh worth exploring and uh you know I talked a",
    "start": "2474000",
    "end": "2481000"
  },
  {
    "text": "little bit before about you know how do you make decisions about what to cash about what to change in your application",
    "start": "2481000",
    "end": "2486359"
  },
  {
    "text": "to make sure the content is is cached um we've got a lot of really great Partners in this space uh so I mentioned how I",
    "start": "2486359",
    "end": "2492520"
  },
  {
    "text": "was using New Relic to get information for the the mini kind of experiment that I did there's a number of really great",
    "start": "2492520",
    "end": "2498359"
  },
  {
    "text": "companies that you can go see on the exhibit floor this week if you haven't had a chance compies like boundry and",
    "start": "2498359",
    "end": "2503680"
  },
  {
    "text": "Sumo logic and um loggly and data dog they all provide a number of different",
    "start": "2503680",
    "end": "2508839"
  },
  {
    "text": "services that can help you do really deep profiling of your applications it's really difficult to do things like caching at all layers unless you're",
    "start": "2508839",
    "end": "2515520"
  },
  {
    "text": "doing really good profiling of your application and of your infrastructure so let's go back to our",
    "start": "2515520",
    "end": "2522640"
  },
  {
    "text": "experiment here so initially this is what our infrastructure looked like customers",
    "start": "2522640",
    "end": "2527880"
  },
  {
    "start": "2525000",
    "end": "2525000"
  },
  {
    "text": "talked to clients talk to any elastic IP attached to an ec2 instance talked to a",
    "start": "2527880",
    "end": "2533800"
  },
  {
    "text": "database uh we didn't have really great performance right almost 15sec response times mostly static data really low",
    "start": "2533800",
    "end": "2540400"
  },
  {
    "text": "requests per minute what I did was I added in an elasticache node running mcash d as",
    "start": "2540400",
    "end": "2547839"
  },
  {
    "text": "another instance I put cloudfront in front of my website so instead of hitting that EIP directly I was now",
    "start": "2547839",
    "end": "2553640"
  },
  {
    "text": "going to hit a cloudfront distribution and and I also lightly tuned my Apache server such that it",
    "start": "2553640",
    "end": "2559920"
  },
  {
    "text": "would add expires and good cach headers to my static content so all the CSS and jpegs and pgs and JavaScript I was",
    "start": "2559920",
    "end": "2566839"
  },
  {
    "text": "serving up I also added into Apache APC which is a PHP cache that will cache the",
    "start": "2566839",
    "end": "2573280"
  },
  {
    "text": "uh compiled PHP code in my application and I all I did was increase the uh the",
    "start": "2573280",
    "end": "2578720"
  },
  {
    "text": "default memory limit that it uses from 64 megabits to 128 I did absolutely",
    "start": "2578720",
    "end": "2583839"
  },
  {
    "text": "nothing to the database no no query Performance Tuning no new indexes no on database query caches um I didn't need",
    "start": "2583839",
    "end": "2591319"
  },
  {
    "text": "to do any of that and then all I did for my code was I added in the public mimc DD and CDN Drupal plugins and uh",
    "start": "2591319",
    "end": "2598720"
  },
  {
    "text": "configure them to point at the different Services I were setting up so this is what my new infrastructure",
    "start": "2598720",
    "end": "2603880"
  },
  {
    "text": "looks like my users are talking both to cloudfront and then uh back to my origin for my web page uh for my application",
    "start": "2603880",
    "end": "2611880"
  },
  {
    "text": "sorry my web and app instance then is talking back to both elasticache and to RDS to get the database information uh",
    "start": "2611880",
    "end": "2619400"
  },
  {
    "text": "that it's looking for so what were the results so response time went down by half to roughly uh 7 Seconds um still",
    "start": "2619400",
    "end": "2627800"
  },
  {
    "text": "not really fantastic um but again I was throwing 8 million requests at it 40 per second from four different hosts to to a",
    "start": "2627800",
    "end": "2634760"
  },
  {
    "text": "single host so um this was still a a a pretty drastic per performance while I",
    "start": "2634760",
    "end": "2640720"
  },
  {
    "text": "was able to drop the response time by half I was able to almost double the requests per minute so I having both of",
    "start": "2640720",
    "end": "2647520"
  },
  {
    "text": "those change actually skews it quite a bit in terms of the the increase in performance that I'm getting and then",
    "start": "2647520",
    "end": "2652599"
  },
  {
    "text": "with cloudfront in front of my application I talked before about how roughly nine and 10 or even more than",
    "start": "2652599",
    "end": "2658800"
  },
  {
    "text": "that almost 90% of my requests were for static assets cloudfront was able to Bear the brunt of that taking a repeat",
    "start": "2658800",
    "end": "2665559"
  },
  {
    "text": "page view time load time",
    "start": "2665559",
    "end": "2669119"
  },
  {
    "text": "the different ways in which we're using caching at the various tiers that uh that Chris and nhar have already talked about so quickly uh an overview of what",
    "start": "2727119",
    "end": "2735200"
  },
  {
    "text": "what is the Toronto Star we're Canada's largest Daily Newspaper our focus is on the the Metro Toronto area uh but we do",
    "start": "2735200",
    "end": "2741480"
  },
  {
    "text": "we also cover uh National and Regional stories we have about 3.3 million unique visitors a month so it's a fairly large",
    "start": "2741480",
    "end": "2748079"
  },
  {
    "text": "site um interestingly we we kind of rebooted our process about uh two years",
    "start": "2748079",
    "end": "2754040"
  },
  {
    "text": "ago we we uh decided to uh build a new technology function really is a startup within the organization so I was hired",
    "start": "2754040",
    "end": "2760720"
  },
  {
    "text": "to build out that team and part of that process was to redesign our infrastructure uh rethink how we're",
    "start": "2760720",
    "end": "2765920"
  },
  {
    "text": "hosting and and using uh cloud-based hosting um we have a pretty diverse Tech",
    "start": "2765920",
    "end": "2771359"
  },
  {
    "text": "stack uh run run the gamut from java PHP Ruby and python um our main site is the",
    "start": "2771359",
    "end": "2777880"
  },
  {
    "text": "star.com but we also manage a few other sites so I want to give you a quick overview of some of those sites so myar",
    "start": "2777880",
    "end": "2783160"
  },
  {
    "text": "is our personalization service and it's really a uh it's integrated with the starlock com but it's a standalone Ruby",
    "start": "2783160",
    "end": "2789079"
  },
  {
    "text": "on Rails application so we use a lot of the standard caching uh approaches within that application wheels.ca is one",
    "start": "2789079",
    "end": "2795800"
  },
  {
    "text": "of Canada's largest uh Automotive vertical so really focused on Automotive content as well as used and uh and new",
    "start": "2795800",
    "end": "2802559"
  },
  {
    "text": "car uh information finding toronto.com is a is a is is",
    "start": "2802559",
    "end": "2808960"
  },
  {
    "text": "quite an old site that is focused on what to do in Toronto so it's it serves both uh the citizens of Toronto as well",
    "start": "2808960",
    "end": "2814880"
  },
  {
    "text": "as tourists so if you're ever in Toronto Toronto will tell you what you can do around town the grid to is an alternative news",
    "start": "2814880",
    "end": "2822720"
  },
  {
    "text": "weekly much like something like the Village Voice so it's really focused on um a younger demographic and uh and and",
    "start": "2822720",
    "end": "2830359"
  },
  {
    "text": "overlaps a bit with the Toronto toronto.com in terms of things to do but also covers uh local",
    "start": "2830359",
    "end": "2836839"
  },
  {
    "text": "news so into into caching uh why cash and um Niar and and Chris have covered",
    "start": "2836839",
    "end": "2842880"
  },
  {
    "text": "this in some detail but this is sort of the way I think about it there's these four areas we attempt to uh address by",
    "start": "2842880",
    "end": "2849079"
  },
  {
    "text": "caching so the first one clearly is performance the closer you can serve content to the user the faster their",
    "start": "2849079",
    "end": "2855920"
  },
  {
    "text": "experience will be so the the goal really is as much as possible to um to push the the serving of content out",
    "start": "2855920",
    "end": "2863119"
  },
  {
    "text": "towards the edge and whether that's in the edge in the web tier in the application tier or in the database but",
    "start": "2863119",
    "end": "2868720"
  },
  {
    "text": "pushing it out um scalability uh and I'll show you a bit more about this but",
    "start": "2868720",
    "end": "2873920"
  },
  {
    "text": "again the the the the more you can push that content closer to the user uh the",
    "start": "2873920",
    "end": "2879480"
  },
  {
    "text": "more content you can serve and the more you can leverage the the the scale of of the edge caching um reliability so what",
    "start": "2879480",
    "end": "2886599"
  },
  {
    "text": "this what caching does give you is is a level of redundancy so you essentially you're creating copies of your content",
    "start": "2886599",
    "end": "2892640"
  },
  {
    "text": "at various tiers if you have an issue with one of those tiers the tier in front of it can can continue to serve",
    "start": "2892640",
    "end": "2898800"
  },
  {
    "text": "that content so if you have any anomalies in your back end many in many cases your cash can can help you or save",
    "start": "2898800",
    "end": "2905200"
  },
  {
    "text": "you from an end user impact event and finally costs and the way I think about this is the further back",
    "start": "2905200",
    "end": "2912000"
  },
  {
    "text": "into my infrastructure I have to respond to a request the more it's going to cost me so a database query is more costly",
    "start": "2912000",
    "end": "2918880"
  },
  {
    "text": "than an app server query which is more costly than than uh a web proxy query",
    "start": "2918880",
    "end": "2925000"
  },
  {
    "text": "which is more costly than a CDN query so uh the more we can we can get cash hits further further forward the less it's",
    "start": "2925000",
    "end": "2931880"
  },
  {
    "text": "going to cost us cost us overall so a quick real world example of",
    "start": "2931880",
    "end": "2938280"
  },
  {
    "text": "how cashing can help you um some of you may recognize this guy he's been in the news a little bit lately uh this is the",
    "start": "2938280",
    "end": "2944880"
  },
  {
    "text": "mayor of Toronto Rob Ford the star has really been leading the charge in terms of reporting on his Shenanigans um and",
    "start": "2944880",
    "end": "2951240"
  },
  {
    "text": "in in in certain cases we managed to get our Hands-On exclusive content so this was about two weeks ago that this event",
    "start": "2951240",
    "end": "2957440"
  },
  {
    "text": "happened we we uh published an exclusive video of him misbehaving okay so uh",
    "start": "2957440",
    "end": "2965040"
  },
  {
    "text": "clearly you know as as a guy responsible for the the web infrastructure and development team uh I was very concerned",
    "start": "2965040",
    "end": "2971040"
  },
  {
    "text": "about the volume of traffic we would see and what would happen so we also use New Relic which is a great tool highly",
    "start": "2971040",
    "end": "2977000"
  },
  {
    "text": "recommend it for profiling some of this stuff this is a a a snapshot of that moment in time it was about 12:15 on a",
    "start": "2977000",
    "end": "2983599"
  },
  {
    "start": "2979000",
    "end": "2979000"
  },
  {
    "text": "Thursday afternoon we were running it sort of our our normal uh average uh uh",
    "start": "2983599",
    "end": "2989640"
  },
  {
    "text": "request per minute from a browser perspective about 200 requests per minute and then within 15 minutes we more than doubled our traffic this is",
    "start": "2989640",
    "end": "2996440"
  },
  {
    "text": "the again this is the view from the browser perspective so you can see a massive influx of traffic um in in this",
    "start": "2996440",
    "end": "3004079"
  },
  {
    "text": "case we don't have autoscaling on our app servers this we we scale up manually um however uh because of the the various",
    "start": "3004079",
    "end": "3011240"
  },
  {
    "text": "caching tiers we put in place this is what it looked like from the server perspective so our app",
    "start": "3011240",
    "end": "3016359"
  },
  {
    "text": "servers continue to hum along at more or less the same rate they normally would have and this is really the key to um",
    "start": "3016359",
    "end": "3024200"
  },
  {
    "start": "3019000",
    "end": "3019000"
  },
  {
    "text": "all of this discussion of caching is to to to create that Delta between what the the browser is doing and what the server",
    "start": "3024200",
    "end": "3030440"
  },
  {
    "text": "is seeing okay so I I'll take you through some of the approaches we take to uh to creating that",
    "start": "3030440",
    "end": "3037359"
  },
  {
    "text": "effect so we're in keeping with the food theme although my my my food isn't as interesting maybe as the cake and the",
    "start": "3037359",
    "end": "3044240"
  },
  {
    "start": "3038000",
    "end": "3038000"
  },
  {
    "text": "the Burgers and Fries but uh I like to think of cashing as an onion in the sense that it's it it's multi-layered",
    "start": "3044240",
    "end": "3050160"
  },
  {
    "text": "and if you don't do it correctly it will make you cry so let's dig into the onion I still",
    "start": "3050160",
    "end": "3057319"
  },
  {
    "text": "I think I need cake too um so another view of the onion and uh very similar",
    "start": "3057319",
    "end": "3063520"
  },
  {
    "text": "view of the various cashing tiers from The Edge on the outside of the onion to the reverse proxy or web tier to the app",
    "start": "3063520",
    "end": "3071040"
  },
  {
    "text": "server tier and to the D datab base in the",
    "start": "3071040",
    "end": "3075640"
  },
  {
    "text": "core so the edge the the onion skin skin and this is really the content deliver",
    "start": "3076160",
    "end": "3081559"
  },
  {
    "text": "delivery Network part of things uh some examples of that are acami and",
    "start": "3081559",
    "end": "3087359"
  },
  {
    "text": "cloudfront uh in our case we use cloudfront um you can think about CDN from a from a pure static asset caching",
    "start": "3087359",
    "end": "3094720"
  },
  {
    "text": "that's a traditional way of of thinking about a CDN so my my images my javascripts my CSS gets serve that way",
    "start": "3094720",
    "end": "3100799"
  },
  {
    "text": "but interestingly um you can also do full sight caching and that's that's our approach with the",
    "start": "3100799",
    "end": "3106119"
  },
  {
    "text": "starcom um some important ideas to think about there are how you configure your origin servers and how you think about",
    "start": "3106119",
    "end": "3112839"
  },
  {
    "text": "behaviors uh and someone corrected that it was spelled the Canadian way before anyways uh uh so so behaviors allow you",
    "start": "3112839",
    "end": "3119720"
  },
  {
    "text": "to give you fine grain control over how you serve different asset classes uh through your CDN uh we use um uh",
    "start": "3119720",
    "end": "3127200"
  },
  {
    "text": "cloudfront across just about our entire network all of our sites are using um either full sight caching or static",
    "start": "3127200",
    "end": "3133440"
  },
  {
    "text": "asset caching uh so this is a quick overview of the the starock comms architecture",
    "start": "3133440",
    "end": "3139359"
  },
  {
    "text": "and you can see various caching tiers here the the key thing is that cloudfront is in front of our load",
    "start": "3139359",
    "end": "3144520"
  },
  {
    "text": "balancer and that's our we have a single origin approach to uh to to to this this",
    "start": "3144520",
    "end": "3149880"
  },
  {
    "text": "tier of caching so in terms of our whole site delivery approach here's some of our",
    "start": "3149880",
    "end": "3155880"
  },
  {
    "text": "kind of philosophical and and uh and some of the things that we think about we try to cach everything possible so",
    "start": "3155880",
    "end": "3162280"
  },
  {
    "text": "there isn't there isn't any asset class within the star.com that is not behind the content delivery Network um in order",
    "start": "3162280",
    "end": "3169440"
  },
  {
    "start": "3167000",
    "end": "3167000"
  },
  {
    "text": "to do that we we we took some architectural approaches we we although cloudfront will cash um based on cookies",
    "start": "3169440",
    "end": "3177880"
  },
  {
    "text": "we decided not to use any server side cookies in order to maximize our caching capability so we um we we when we do",
    "start": "3177880",
    "end": "3185799"
  },
  {
    "text": "need to write a cookie we try to do that on the client side in JavaScript um we only accept query strings when it's",
    "start": "3185799",
    "end": "3191839"
  },
  {
    "text": "absolutely necessary an example of that is our search page so we we'll cach each individual query string separately on",
    "start": "3191839",
    "end": "3197160"
  },
  {
    "text": "our search page um so those the the screenshot you see here is of all of our",
    "start": "3197160",
    "end": "3202720"
  },
  {
    "text": "Behavior so we have 19 different rules um which allows us to specify different",
    "start": "3202720",
    "end": "3208559"
  },
  {
    "text": "um time to live and different uh parameters that we accept for different asset asset uh classes so you'll see uh",
    "start": "3208559",
    "end": "3215640"
  },
  {
    "text": "search uh image classes uh we can also control how we cache based on time so if",
    "start": "3215640",
    "end": "3222079"
  },
  {
    "text": "you if you look 3ars of the way down that list you'll see things like 2009 star 2008 star 2007 star we can set",
    "start": "3222079",
    "end": "3230400"
  },
  {
    "text": "different rules expiry rules on the caching of of uh our content based on how old it is so an article from 20 7",
    "start": "3230400",
    "end": "3237040"
  },
  {
    "text": "can be cached longer than an article from 2010 let's say um a couple other points there we",
    "start": "3237040",
    "end": "3244160"
  },
  {
    "text": "use we use that single origin behind uh Cloud front but we're using we're scale it across multiple Avil availability",
    "start": "3244160",
    "end": "3250599"
  },
  {
    "text": "zones for redundancy and we're also working on uh spinning up an environment in US West just for Dr purposes that",
    "start": "3250599",
    "end": "3257599"
  },
  {
    "text": "will also leverage Cloud font so moving down to the next next",
    "start": "3257599",
    "end": "3263599"
  },
  {
    "text": "layer of our onion uh the reverse proxy sometimes called a web web accelerator",
    "start": "3263599",
    "end": "3268799"
  },
  {
    "text": "tier and this looks quite a lot like a like a CDN but it lives within your infrastructure some examples uh and we",
    "start": "3268799",
    "end": "3276079"
  },
  {
    "text": "use all three of these are varnish engine X and Apache varnish being more of a pure web accelerator uh product and",
    "start": "3276079",
    "end": "3283559"
  },
  {
    "text": "engine X and Apache can be used for both as uh web servers as well as reverse",
    "start": "3283559",
    "end": "3288839"
  },
  {
    "text": "proxies um so these these all serve I say static content in in Brackets",
    "start": "3288839",
    "end": "3293880"
  },
  {
    "text": "because certainly they serve uh images javascripts and stylesheets and the",
    "start": "3293880",
    "end": "3299079"
  },
  {
    "text": "traditional static content but also if you think about an an htl HTML page that's generated by your app server for",
    "start": "3299079",
    "end": "3305119"
  },
  {
    "text": "a moment in time it becomes static So based on the rules you set up in your reverse proxy you're going to be taking",
    "start": "3305119",
    "end": "3310760"
  },
  {
    "text": "that that that HTML page it may be changing every minute but that static copy that you have for that minute in",
    "start": "3310760",
    "end": "3316440"
  },
  {
    "text": "your reverse proxy accelerates things in in in the sense that it it reduces the load on your app",
    "start": "3316440",
    "end": "3322480"
  },
  {
    "text": "server um and we use this strategy across a variety of things I'm going to give you uh I'm going to show you the",
    "start": "3322480",
    "end": "3328200"
  },
  {
    "text": "examples uh of a couple of them so myar is as I said it's a it's a traditional Ruby on Rails app there it is living",
    "start": "3328200",
    "end": "3336079"
  },
  {
    "text": "floating on top of the starlock comom um so what myar does is it it it provides",
    "start": "3336079",
    "end": "3341280"
  },
  {
    "text": "the user with a personalized view of our content so it's where we where they create their user profile where they",
    "start": "3341280",
    "end": "3346960"
  },
  {
    "text": "sign into the site and it also allows them to to customize content things like their weather their horoscopes it allows",
    "start": "3346960",
    "end": "3353920"
  },
  {
    "text": "them to follow writers and sports teams and so pretty much every view within that uh that application is on a user",
    "start": "3353920",
    "end": "3362280"
  },
  {
    "text": "byuser basis so it's a it's a it's a different approach to how we do caching than on the star.com where it's a",
    "start": "3362280",
    "end": "3368839"
  },
  {
    "text": "semistatic site so there's there's the signin view",
    "start": "3368839",
    "end": "3374880"
  },
  {
    "start": "3375000",
    "end": "3375000"
  },
  {
    "text": "okay so this this is uh the myar architecture overall and what we have",
    "start": "3375079",
    "end": "3380720"
  },
  {
    "text": "here is a load balancer with reverse proxies across availability zones and app servers talking to a database and",
    "start": "3380720",
    "end": "3386520"
  },
  {
    "text": "caching at all these different tiers so in this case these uh these reverse proxies are engine X servers and they're",
    "start": "3386520",
    "end": "3393640"
  },
  {
    "text": "talking to the app server caching um the results and they're able to serve those",
    "start": "3393640",
    "end": "3398839"
  },
  {
    "text": "very quickly in the case of our wheels.ca",
    "start": "3398839",
    "end": "3403880"
  },
  {
    "text": "product we we're using varnish for essentially the same thing varnish is an incredibly uh performant tool you don't",
    "start": "3403880",
    "end": "3410920"
  },
  {
    "text": "need a very large instance to serve millions of literally Mill millions of page views uh the the key there is to",
    "start": "3410920",
    "end": "3417880"
  },
  {
    "text": "that varnish keep tries to keep things in memory um and it has interesting tools you can use to profile the the",
    "start": "3417880",
    "end": "3425000"
  },
  {
    "text": "cacheability of things it's things like varnish stat moving along uh app level",
    "start": "3425000",
    "end": "3432359"
  },
  {
    "text": "caching so there's various strategies here to this is really to accelerate how your how your app app server Works um uh",
    "start": "3432359",
    "end": "3441000"
  },
  {
    "text": "the examples of this are mcash D and redus elasticache now supports uh both of these products uh recently added",
    "start": "3441000",
    "end": "3447680"
  },
  {
    "text": "redus um so we use app caching really for for two things uh Chris mentioned",
    "start": "3447680",
    "end": "3453920"
  },
  {
    "text": "session caching and this this is exactly what we do within myar um within ra",
    "start": "3453920",
    "end": "3459240"
  },
  {
    "text": "within traditional rails apps you really have three options in terms of sessions you can store your session in in the",
    "start": "3459240",
    "end": "3464440"
  },
  {
    "text": "cookie you can store it in the database or you can store it in in something like mcash t uh mhd gives us a good trade-off",
    "start": "3464440",
    "end": "3472079"
  },
  {
    "text": "between um persistence and and lower constraints and performance and if uh",
    "start": "3472079",
    "end": "3479039"
  },
  {
    "text": "when you use cookies um you're limited in terms of what you can store in the session and clearly it's it's more",
    "start": "3479039",
    "end": "3484480"
  },
  {
    "text": "volatile the user can delete that cookie and and the session goes away on the other hand if you use a database you get",
    "start": "3484480",
    "end": "3490520"
  },
  {
    "text": "an order of magnitude lower performance than with MCD so we we decided to use MCD for our sessions",
    "start": "3490520",
    "end": "3497839"
  },
  {
    "text": "um rails also gives you view caching so uh essentially uh commonly served uh",
    "start": "3497839",
    "end": "3503880"
  },
  {
    "text": "pages and and Page fragments are are automatically stored in MCD for performance",
    "start": "3503880",
    "end": "3509280"
  },
  {
    "text": "purposes okay so quick view of that is uh really",
    "start": "3509280",
    "end": "3516440"
  },
  {
    "text": "uh you have your cache it's really it we think of it as being in the database tier it's it's we're using the elastic",
    "start": "3516440",
    "end": "3522000"
  },
  {
    "text": "cache service so it's very low maintenance for us okay so getting to the core of uh of",
    "start": "3522000",
    "end": "3530920"
  },
  {
    "text": "the onion uh we have database caching uh and really the the the goal here is to",
    "start": "3530920",
    "end": "3536400"
  },
  {
    "text": "reduce the the load on your database server itself and um MCD is the way we",
    "start": "3536400",
    "end": "3542599"
  },
  {
    "text": "we do this so we're able to Cache frequent SQL queries uh things that that",
    "start": "3542599",
    "end": "3548160"
  },
  {
    "text": "uh get queried over and over in the case of uh of myar we have let's say you follow a writer well all of their",
    "start": "3548160",
    "end": "3554720"
  },
  {
    "text": "articles will appear in A View that's a given query uh so MCD allows us to to",
    "start": "3554720",
    "end": "3561119"
  },
  {
    "text": "query for those articles once and based on a a timeout always serve that same content",
    "start": "3561119",
    "end": "3568160"
  },
  {
    "text": "um another example of that is wheels.ca where we have this feature called the vehicle finder which allows the user to",
    "start": "3569799",
    "end": "3576319"
  },
  {
    "text": "build fairly complex queries they don't know they're building queries they know they're just interacting with the",
    "start": "3576319",
    "end": "3581400"
  },
  {
    "text": "interface but uh we have all all makes and models of cars um Geographic queries",
    "start": "3581400",
    "end": "3588599"
  },
  {
    "text": "and that sort of thing so with MCD we can uh we can uh take that query that",
    "start": "3588599",
    "end": "3595319"
  },
  {
    "text": "that user's done and when a user comes back and tries to make that same query it's it's reducing the cach it's it's",
    "start": "3595319",
    "end": "3601039"
  },
  {
    "text": "hitting the cache and reducing the load on the database so here's the what that",
    "start": "3601039",
    "end": "3606680"
  },
  {
    "text": "architecture looks like I showed you wheels.ca before but that's really happening in the database",
    "start": "3606680",
    "end": "3613799"
  },
  {
    "text": "here so that's pretty much it for me thanks so much and um I guess I'll hand it back to",
    "start": "3614119",
    "end": "3621359"
  },
  {
    "text": "Chris thanks Stephen",
    "start": "3622000",
    "end": "3628119"
  },
  {
    "text": "so uh that's that's pretty much it for uh us up here today on be on behalf of myself and Niar and Steven want to thank",
    "start": "3628880",
    "end": "3635039"
  },
  {
    "text": "you for coming to this session on behalf of Amazon web services want to thank you again to for coming to revent this year",
    "start": "3635039",
    "end": "3641520"
  },
  {
    "text": "and sticking around to Friday uh we'll be up here on the front answering questions for a little while before the next session um but thank you again for",
    "start": "3641520",
    "end": "3647839"
  },
  {
    "text": "coming and enjoy the rest of your stay here in Vegas",
    "start": "3647839",
    "end": "3654440"
  }
]