[
  {
    "text": "hello everybody good afternoon we're gonna get started here for those looking for seats the chair traffic control can",
    "start": "319",
    "end": "6509"
  },
  {
    "text": "point you more to the edges so come on up front here to the edges and there's lots of seats that are available around",
    "start": "6509",
    "end": "13259"
  },
  {
    "text": "the room well thanks for coming to this session I hope you're all happy and awake and digesting lunch if you got a chance to",
    "start": "13259",
    "end": "19890"
  },
  {
    "text": "fight your way into the lunch rooms this session is thirty service architectures in 30 minutes with the caveat that it's",
    "start": "19890",
    "end": "26820"
  },
  {
    "text": "not actually gonna be 30 minutes it's going to be 60 minutes and it's going to be a little bit more than just 30",
    "start": "26820",
    "end": "32160"
  },
  {
    "text": "service architectures so slightly kind of funny story about this session here",
    "start": "32160",
    "end": "37610"
  },
  {
    "text": "originally this was a chalk talk so earlier today at 11:30 we did a chalk talk which is meant to be kind of more",
    "start": "37610",
    "end": "44550"
  },
  {
    "text": "of a conversational type of a session and about two weeks ago they reached out to me they said Chris we have a small",
    "start": "44550",
    "end": "49800"
  },
  {
    "text": "problem about a thousand people have shown interest in your 50-person chalk talk and they said we should do two of",
    "start": "49800",
    "end": "55739"
  },
  {
    "text": "these don't you think but well that will help another 50 people but there's another nine hundred plus people that",
    "start": "55739",
    "end": "62250"
  },
  {
    "text": "won't be able to get into this session and so we took the chalk talk turned it back into a regular breakout session I",
    "start": "62250",
    "end": "68220"
  },
  {
    "text": "added a bunch more content and we're obviously here in a larger room just for",
    "start": "68220",
    "end": "73229"
  },
  {
    "text": "context the number of people in this room is equivalent to about a quarter of the people that attended the first ever",
    "start": "73229",
    "end": "79380"
  },
  {
    "text": "reinvent in 2012 so it's awesome to see all of you in here today interested in",
    "start": "79380",
    "end": "84840"
  },
  {
    "text": "this session on serverless my name is Chris Muntz I'm currently the senior and lead developer advocate for server list",
    "start": "84840",
    "end": "90930"
  },
  {
    "text": "at AWS I'm actually part of the lambda API gateway product team based our New York City office I've been here at AWS",
    "start": "90930",
    "end": "96990"
  },
  {
    "text": "for a little over five and a half years now in a couple different roles but I come from more of a sysadmin or DevOps",
    "start": "96990",
    "end": "103380"
  },
  {
    "text": "or operational background if you will so I've got plenty of physical scars from spending time and data centers doing",
    "start": "103380",
    "end": "109020"
  },
  {
    "text": "rack and stack I've got lots of mental scars from managing Linux servers and stuff like that over the years but these",
    "start": "109020",
    "end": "114990"
  },
  {
    "text": "days I'm all about server lists and I think this kind of testament to the number of people in this room here is just how big of a deal server this is so",
    "start": "114990",
    "end": "123659"
  },
  {
    "text": "why are we here today so this this thing that is server list it means a lot of things to a lot of people here for us at",
    "start": "123659",
    "end": "130140"
  },
  {
    "text": "AWS is primarily around products such as lambda and api gateway step functions DynamoDB and a number of",
    "start": "130140",
    "end": "136110"
  },
  {
    "text": "others and what we see is that serverless technologies are transforming the way that people think about building applications managing and running",
    "start": "136110",
    "end": "143070"
  },
  {
    "text": "infrastructure that's said people typically only know maybe about just a couple of the use cases that are",
    "start": "143070",
    "end": "148230"
  },
  {
    "text": "possible with service architectures and so the idea behind this talk is to give you maybe a little bit more inspiration",
    "start": "148230",
    "end": "153600"
  },
  {
    "text": "about what's possible and then we'll talk a little bit about some of the tooling and stuff that you can use for deploying and managing these server",
    "start": "153600",
    "end": "159450"
  },
  {
    "text": "lists applications and architectures so what is a server list application in the",
    "start": "159450",
    "end": "165930"
  },
  {
    "text": "world of AWS that primarily revolves around our good friend here in the middle lambda so today lambda okay you",
    "start": "165930",
    "end": "171900"
  },
  {
    "text": "can build lambda functions and nodejs Python Java or C sharp I would say keep your eyes open to see if this list",
    "start": "171900",
    "end": "177660"
  },
  {
    "text": "changes at all later this week and ideally we're talking about an event source that invokes that lambda function",
    "start": "177660",
    "end": "183150"
  },
  {
    "text": "and then whatever it is that that lambda function might do now we're not going to get to too deeply into what it is that",
    "start": "183150",
    "end": "188700"
  },
  {
    "text": "you might do with those lambda functions it's going to be somewhat inherent based on the architectures that we're talking",
    "start": "188700",
    "end": "193950"
  },
  {
    "text": "about here today but primarily when I'm talking about 30 architectures what we're talking about is what the event",
    "start": "193950",
    "end": "200250"
  },
  {
    "text": "invocation source is that's going to trigger that lambda function so we're talking about things like changes in data state requests the endpoints",
    "start": "200250",
    "end": "207690"
  },
  {
    "text": "changes in resource state and so we'll see you across these different types of architectures here that we're about to",
    "start": "207690",
    "end": "213299"
  },
  {
    "text": "talk about what you know what's possible now primarily at AWS we lump these use",
    "start": "213299",
    "end": "219780"
  },
  {
    "text": "cases across kind of six different categories so we have web applications backends data processing chatbots",
    "start": "219780",
    "end": "227450"
  },
  {
    "text": "alexa and IT automation now many people dip their toes with IT automation and",
    "start": "227450",
    "end": "232920"
  },
  {
    "text": "getting and exploring with lambda many of you may not realize if you have an Alexa based device that when you ask",
    "start": "232920",
    "end": "238500"
  },
  {
    "text": "Alexa to do something fairly often the thing that it does or how it responds to you is actually invoking a lambda",
    "start": "238500",
    "end": "244080"
  },
  {
    "text": "function by usage data processing is actually one of the biggest use cases of lambda today so people are ingesting and",
    "start": "244080",
    "end": "251130"
  },
  {
    "text": "processing billions of records or data points whether they be from devices or beacon collection or things around the",
    "start": "251130",
    "end": "257040"
  },
  {
    "text": "add text space we'll talk about architectures with that as well and then we're seeing an ever-increasing amount",
    "start": "257040",
    "end": "263070"
  },
  {
    "text": "of companies moving from traditional server based web applications and back - this serverless model so lots of",
    "start": "263070",
    "end": "269780"
  },
  {
    "text": "exciting things to do lots of big changes in what serverless means and again we'll talk through this here today",
    "start": "269780",
    "end": "276010"
  },
  {
    "text": "round lambda today there exist three different kind of invocation models there's a synchronous or push based",
    "start": "276010",
    "end": "282110"
  },
  {
    "text": "model which will talk about this with api gateway and others where effectively you are making a requests you're",
    "start": "282110",
    "end": "287780"
  },
  {
    "text": "expecting lambda to do something and then respond back to you in a synchronous manner we also then have a",
    "start": "287780",
    "end": "293510"
  },
  {
    "text": "synchronous invocation methods so methods where you're gonna effectively do a fire-and-forget into a service",
    "start": "293510",
    "end": "298670"
  },
  {
    "text": "that's then going to invoke lambda on your behalf and do whatever business logic it needs to do and then lastly we",
    "start": "298670",
    "end": "304730"
  },
  {
    "text": "have stream based invocation models so methods where you're going to have some sort of streaming data typically very",
    "start": "304730",
    "end": "311180"
  },
  {
    "text": "high velocity coming in and then processing being processed inside of lambda now as part of all this and one",
    "start": "311180",
    "end": "318860"
  },
  {
    "text": "of the kind of key beneficial aspects of lambda is kind of the deeply ingrained security model with lambda so with",
    "start": "318860",
    "end": "324590"
  },
  {
    "text": "lambda there's kind of two different aspects the security model they're inherent in the product itself you have what are called execution policies",
    "start": "324590",
    "end": "330610"
  },
  {
    "text": "effectively what it is that lambda is going to do when it's invoked so what is",
    "start": "330610",
    "end": "335990"
  },
  {
    "text": "the product that is going to invoke that function and then you have function policy is used for async and synchronous",
    "start": "335990",
    "end": "341870"
  },
  {
    "text": "invocations basically what it is that that function is allowed to do so security deeply ingrained a couple",
    "start": "341870",
    "end": "348440"
  },
  {
    "text": "different types of invocation models six different major use cases a whole lot of different products so with that let's",
    "start": "348440",
    "end": "354710"
  },
  {
    "text": "kind of dive in and so what I'm going to do here on each slide that I have is have a couple of different architectures",
    "start": "354710",
    "end": "359780"
  },
  {
    "text": "and we'll talk through each of them briefly and then again we'll get towards some of the tooling aspects later on so",
    "start": "359780",
    "end": "367280"
  },
  {
    "text": "starting off with some of the most basic ones that we have so a little kind of historical fact the kind of one of the big ideas that drove lambda was the idea",
    "start": "367280",
    "end": "374480"
  },
  {
    "text": "of attaching compute to storage for AWS here we've had a customer's putting data into s3 for over ten years now and what",
    "start": "374480",
    "end": "382130"
  },
  {
    "text": "they often want to do is something after that data's been put into s3 and so it's pretty common nowadays where you have an",
    "start": "382130",
    "end": "387680"
  },
  {
    "text": "s3 bucket and as objects were put into that you're going to invoke a lambda function maybe to process a text base",
    "start": "387680",
    "end": "393710"
  },
  {
    "text": "file to take an image and resize it to take an image and maybe do something like using a DNS recognition against",
    "start": "393710",
    "end": "400300"
  },
  {
    "text": "where you want to identify what's inside of a picture an image transcoding metadata gathering all sorts of things",
    "start": "400300",
    "end": "406419"
  },
  {
    "text": "that you would do here and so in this case what happens is s3 is going to directly invoke lambda with the payload",
    "start": "406419",
    "end": "412449"
  },
  {
    "text": "containing information about the bucket and the object another pretty common use case is for a number of different",
    "start": "412449",
    "end": "419470"
  },
  {
    "text": "services which we'll talk about here today is having S&S go and trigger a lambda function so SNS simple",
    "start": "419470",
    "end": "425800"
  },
  {
    "text": "notification service is kind of one of the core messaging services that we have here at AWS it's used for both kind of",
    "start": "425800",
    "end": "431440"
  },
  {
    "text": "you can think of pub/sub based models inside of architectures that's also used for things like SMS and push based",
    "start": "431440",
    "end": "438400"
  },
  {
    "text": "models and mobile applications in this case we're referring more to the pubsub model of we have a concept of a topic",
    "start": "438400",
    "end": "444250"
  },
  {
    "text": "data is going to come into that topic potentially from other AWS services or directly be its API and then those",
    "start": "444250",
    "end": "450789"
  },
  {
    "text": "messages are going to be made available to a lambda function it will pull them in and process them and execute them and",
    "start": "450789",
    "end": "458319"
  },
  {
    "text": "then lastly we have lambda functions can be invoked directly in their API so",
    "start": "458319",
    "end": "463900"
  },
  {
    "text": "often while they hear from people as you say I just want a really simple way to invoke a lambda function I don't want to have to have an API gateway I don't care",
    "start": "463900",
    "end": "470110"
  },
  {
    "text": "about authentication and authorization on the client side give me a way to just invoke lambda well we've actually done",
    "start": "470110",
    "end": "475750"
  },
  {
    "text": "that from day one and it's basically just using the API to invoke a function and so for a number of people I find",
    "start": "475750",
    "end": "481180"
  },
  {
    "text": "that they maybe overthink a little bit some of this but look towards the API and what you can do directly with the",
    "start": "481180",
    "end": "486279"
  },
  {
    "text": "SDKs you don't have to have another invocation service in front of lambda if you're controlling the calling service",
    "start": "486279",
    "end": "493949"
  },
  {
    "text": "next up we'll talk about lambda at the edge so lambda at the edge technically part of our cloud front product or our",
    "start": "494219",
    "end": "499870"
  },
  {
    "text": "CDN product so today around the globe leave we have think over a hundred pops",
    "start": "499870",
    "end": "505240"
  },
  {
    "text": "for cloud front or near 100 pops it appoints a presents that are globally distributed well lambda at the edge does",
    "start": "505240",
    "end": "510729"
  },
  {
    "text": "is allow you to invoke a lambda function directly in those edge notes this could be really useful for things such as",
    "start": "510729",
    "end": "516550"
  },
  {
    "text": "processing headers and cookies that come in from requests taking a request and figuring out whether it should be",
    "start": "516550",
    "end": "522190"
  },
  {
    "text": "shifted to one place or another taking those requests and maybe mutating or",
    "start": "522190",
    "end": "527410"
  },
  {
    "text": "transforming them in some way and actually now there are people who were having lambda at the edge directly talk",
    "start": "527410",
    "end": "532630"
  },
  {
    "text": "to things like DynamoDB so you can effectively move your compute of your application all the way to the edge where your clients are from much",
    "start": "532630",
    "end": "539360"
  },
  {
    "text": "much faster response time just last week we increase the amount of memory for",
    "start": "539360",
    "end": "544490"
  },
  {
    "text": "land at the edge functions a number of other capabilities it just came out touring that at the previous weekend",
    "start": "544490",
    "end": "549820"
  },
  {
    "text": "next up a step function step functions is a workflow workflow execution",
    "start": "549820",
    "end": "555020"
  },
  {
    "text": "management service we talked about it being used for managing state machines and so what we can have is an event that",
    "start": "555020",
    "end": "561710"
  },
  {
    "text": "comes in to a step function step functions can then process the payload of that event to do things like decision",
    "start": "561710",
    "end": "567620"
  },
  {
    "text": "trees paralyzation retry catch and fail number of different capabilities that it has such that you can take the business",
    "start": "567620",
    "end": "574430"
  },
  {
    "text": "logic that you would have put inside of your function or essentially the orchestration logic and bring that up to the step functions level and what this",
    "start": "574430",
    "end": "581270"
  },
  {
    "text": "saves you is having to write things like say retries and failures and caches inside of your lambda code letting step",
    "start": "581270",
    "end": "587420"
  },
  {
    "text": "functions handle that so your lambda code becomes even more streamlined and effectively then you're paying less",
    "start": "587420",
    "end": "593510"
  },
  {
    "text": "because it should take less time and you could take a bunch of that business logic and put it up two step functions so a really useful product in an",
    "start": "593510",
    "end": "600230"
  },
  {
    "text": "orchestration of multiple lambda functions or of any sort of more complicated business logic talk about a",
    "start": "600230",
    "end": "607910"
  },
  {
    "text": "couple of API gateway use cases here so API gateway a very flexible and capable product and of its own so with API",
    "start": "607910",
    "end": "615740"
  },
  {
    "text": "gateway you can have its sitting in front of lambda such as when HTTP and HTTPS then going to go and invoke those",
    "start": "615740",
    "end": "623030"
  },
  {
    "text": "lambda functions giving the permissions and controls that it has and so with this we've got customers creating",
    "start": "623030",
    "end": "629060"
  },
  {
    "text": "completely server lists API backends just a couple weeks ago we launched something called regional endpoints for",
    "start": "629060",
    "end": "635710"
  },
  {
    "text": "API gateway previously we had will recall two edge endpoints that were always fronted by cloud fronts now with",
    "start": "635710",
    "end": "642320"
  },
  {
    "text": "regional endpoints you no longer have cloud front in front of them so if you were building say a kind of a semi",
    "start": "642320",
    "end": "648380"
  },
  {
    "text": "public semi-private micro-services type of architecture inside of a region you could save yourself a little bit of",
    "start": "648380",
    "end": "654380"
  },
  {
    "text": "latency and having to go out to a cloud from pop and come back for those requests and so there's a whole lot of things that you can do with this and I",
    "start": "654380",
    "end": "660560"
  },
  {
    "text": "think this is maybe one of the most exciting areas that we see people today in building applications another thing",
    "start": "660560",
    "end": "665840"
  },
  {
    "text": "you can do that people don't necessarily know a whole of is that you can actually invoke step functions directly from an API gateway",
    "start": "665840",
    "end": "671320"
  },
  {
    "text": "request so if you have some sort of sophisticated or complicated business logic maybe you're taking a larger",
    "start": "671320",
    "end": "676720"
  },
  {
    "text": "request payload and you need to do something more complicated with it instead of having to go to a lambda function and then invoke step functions",
    "start": "676720",
    "end": "682930"
  },
  {
    "text": "you can directly invoke step functions from your API gateway now this is more useful in an asynchronous model versus",
    "start": "682930",
    "end": "688600"
  },
  {
    "text": "synchronous model you're typically not going to want to have to go to step functions have it execute lambda",
    "start": "688600",
    "end": "693790"
  },
  {
    "text": "functions and then return something as part of the same request but this is really great again in those asynchronous models and then lastly you might decide",
    "start": "693790",
    "end": "701260"
  },
  {
    "text": "that you don't need lambda or step functions for your workload at all and so you could put API gateway directly in",
    "start": "701260",
    "end": "706450"
  },
  {
    "text": "front of a number of AWS services such as dynamo DB or s3 or Kinesis and effectively expose the API directly up",
    "start": "706450",
    "end": "713200"
  },
  {
    "text": "to the client that's interfacing with it this could be really great for mobile applications where you say need to give",
    "start": "713200",
    "end": "719560"
  },
  {
    "text": "customers access the data that they have in dynamo allow them to upload or pull down data from s3 instead of having to",
    "start": "719560",
    "end": "726040"
  },
  {
    "text": "build any sort of interpretation layer with something like lambda as the middleman you can again just have API gateway go directly to that and still",
    "start": "726040",
    "end": "732850"
  },
  {
    "text": "have access to custom authorizers or things like Cognito user pools api keys throttling and so forth and so for",
    "start": "732850",
    "end": "739930"
  },
  {
    "text": "mobile applications specifically this is an incredibly useful workload that that's very very powerful so well some",
    "start": "739930",
    "end": "747640"
  },
  {
    "text": "of the messaging services use cases that we have so back a couple lifetimes ago I used to have to manage outbound email",
    "start": "747640",
    "end": "754209"
  },
  {
    "text": "servers I don't know how many of you have to deal with that or have dealt with that day-to-day but there's black lists and grey lists and reputation that",
    "start": "754209",
    "end": "761230"
  },
  {
    "text": "you have to care about an SES does a good job of helping handle that for you however when you're sending a lot of",
    "start": "761230",
    "end": "767200"
  },
  {
    "text": "email to customers you're going to from time to time have some sort of bounce back and so it could be because a",
    "start": "767200",
    "end": "773110"
  },
  {
    "text": "customer's mailbox is full maybe their account no longer exists maybe they've marked you as spam and so",
    "start": "773110",
    "end": "778450"
  },
  {
    "text": "what you can actually do is take the notifications that SES collects back from that customers Mail service and",
    "start": "778450",
    "end": "785290"
  },
  {
    "text": "then immediately process them with lambda so this could be really really useful if you send a lot of email to customers to say go and flag a",
    "start": "785290",
    "end": "792070"
  },
  {
    "text": "customer's accounts and say don't send this customer anymore email until they log in and maybe say that yes this is the right mail to use",
    "start": "792070",
    "end": "798329"
  },
  {
    "text": "or if you find that you're getting a whole lot of spam request comeback or a whole lot of",
    "start": "798329",
    "end": "804010"
  },
  {
    "text": "bounces come back from sale like an email campaign you can actually now in SCS as of believe last week until SES to",
    "start": "804010",
    "end": "810520"
  },
  {
    "text": "stop sending any email so even if you were doing a bulk shipment of it you can based on again logic and lambda tell SES",
    "start": "810520",
    "end": "816670"
  },
  {
    "text": "hold on pause sending all emails until I've gone and resolved whatever the issue might be it was on kognito which",
    "start": "816670",
    "end": "823990"
  },
  {
    "text": "has a couple different capabilities but is is often used as part of user pools which is a completely managed user",
    "start": "823990",
    "end": "829000"
  },
  {
    "text": "authentication and management system has the ability to trigger lambda functions as part of various different lifecycle",
    "start": "829000",
    "end": "834400"
  },
  {
    "text": "events so with kognito user pools you have the ability to do things such as create an entire you know customer user registry",
    "start": "834400",
    "end": "841360"
  },
  {
    "text": "keep including things like profile information password information setting up things like multi-factor and a number",
    "start": "841360",
    "end": "847090"
  },
  {
    "text": "of different ways and so as part of carnita there's kind of different life cycles that users can go through let's",
    "start": "847090",
    "end": "852370"
  },
  {
    "text": "say they want to reset a password or update information about their account or their profile and based on that you",
    "start": "852370",
    "end": "858160"
  },
  {
    "text": "can actually have kognito fire off triggers and invoke lambda functions based on those so maybe a customer goes",
    "start": "858160",
    "end": "864100"
  },
  {
    "text": "and does a password reset based on that you want to send them an email to say hey we noticed that you just changed",
    "start": "864100",
    "end": "869350"
  },
  {
    "text": "your password let's make sure that that was you you could use lamda to help with that as a kind of a reactive event as",
    "start": "869350",
    "end": "876190"
  },
  {
    "text": "part of that and the last thing I've kind of already mentioned how SNS can be used to invoke lambda functions but in a",
    "start": "876190",
    "end": "882430"
  },
  {
    "text": "kind of slightly more serveral full context as it were auto-scaling part of ec2 has the ability to send",
    "start": "882430",
    "end": "888910"
  },
  {
    "text": "notifications due to scale up or scale down events or failures of those happening so this could be really useful",
    "start": "888910",
    "end": "894070"
  },
  {
    "text": "for integrating say with a monitoring system or a logging system or some sort of third-party CMDB to let you know that",
    "start": "894070",
    "end": "900550"
  },
  {
    "text": "hosts may have come or gone maybe you want to remove a host from being able to page your team because it's disappeared",
    "start": "900550",
    "end": "906240"
  },
  {
    "text": "this is one way that you can completely automate that process and apply that logic through lambda instead of say",
    "start": "906240",
    "end": "911800"
  },
  {
    "text": "having someone get woken up at 4:00 a.m. because a host has disappeared so it was",
    "start": "911800",
    "end": "917170"
  },
  {
    "text": "some of the the streaming analysis capabilities or use cases with lambda so Amazon Kinesis which now has kind of a",
    "start": "917170",
    "end": "923890"
  },
  {
    "text": "number of different components to it it has streams it has fire hose has analytics is used for a number of",
    "start": "923890",
    "end": "929440"
  },
  {
    "text": "different use cases where you need to do very high throughput ingest of data so think things like in the ad tech world",
    "start": "929440",
    "end": "935379"
  },
  {
    "text": "a new beacon collection or you want to do click tracking on a website maybe you're ingesting log information from",
    "start": "935379",
    "end": "940720"
  },
  {
    "text": "either your infrastructure or from devices or from you know whatever it might be",
    "start": "940720",
    "end": "945759"
  },
  {
    "text": "Kinesis can basically scale very very wide and handle that data coming in now as that data comes in what you have the",
    "start": "945759",
    "end": "952179"
  },
  {
    "text": "ability to do is invoke lambda functions on a shard by shard basis so what it will do is it will have a single lambda",
    "start": "952179",
    "end": "959199"
  },
  {
    "text": "function invoked per shard so if you do have some sort of ordering that matters inside of that shard lambda will help",
    "start": "959199",
    "end": "965439"
  },
  {
    "text": "you won't violate any of that ordering and so what happens in this model it's",
    "start": "965439",
    "end": "971589"
  },
  {
    "text": "slightly different than some of the rest and the streaming models is that in this case on the lambda side what we do is pull Kinesis for you so every second",
    "start": "971589",
    "end": "978729"
  },
  {
    "text": "we're pulling Kinesis and potentially executing a lambda function if there is data in the stream we'll pull in that",
    "start": "978729",
    "end": "985059"
  },
  {
    "text": "data and then again whatever it is that you do inside of that will get done on the other side here we've got a much",
    "start": "985059",
    "end": "990279"
  },
  {
    "text": "more complicated architecture in this case what we're doing is we're working with Kinesis analytics so what Kinesis",
    "start": "990279",
    "end": "995439"
  },
  {
    "text": "analytics allows you to do is take in data process it in near-real-time using just normal sequel queries and then i'll",
    "start": "995439",
    "end": "1002309"
  },
  {
    "text": "put that data wherever you need to be so as of a couple weeks ago we added capability that you can pre-process that",
    "start": "1002309",
    "end": "1007919"
  },
  {
    "text": "data using lambda so my request comes in via a stream or a firehose it goes into",
    "start": "1007919",
    "end": "1012959"
  },
  {
    "text": "Kinesis analytics I can call lambda to do some sort of ETL or normalization or combination of data from maybe another",
    "start": "1012959",
    "end": "1019379"
  },
  {
    "text": "data source that I have pump it back into Kinesis analytics execute my sequel query whatever it might be that I'm",
    "start": "1019379",
    "end": "1025558"
  },
  {
    "text": "doing and then it's going to get passed back out so we can use to stream or firehose where it could be a potentially",
    "start": "1025559",
    "end": "1030569"
  },
  {
    "text": "invoking lambda again or going into say s3 or redshift or another service based",
    "start": "1030569",
    "end": "1036058"
  },
  {
    "text": "off of that and so what's pretty amazing about the second slide here is we take this first really basic architecture we",
    "start": "1036059",
    "end": "1042569"
  },
  {
    "text": "add several layers to it and we can do some very very advanced real-time computation ETO etc of data coming in at",
    "start": "1042569",
    "end": "1050490"
  },
  {
    "text": "very very very high velocity so up over",
    "start": "1050490",
    "end": "1055590"
  },
  {
    "text": "to some of the development and management tools that we have here at AWS so a couple different tools here that we have that have integration with",
    "start": "1055590",
    "end": "1061799"
  },
  {
    "text": "lambda the first I'll talk about is AWS code pipeline so code pipeline is our continuous delivery service part of our",
    "start": "1061799",
    "end": "1067649"
  },
  {
    "text": "CI and CD suite so encode pipeline what you do is you can set up your full application",
    "start": "1067649",
    "end": "1073350"
  },
  {
    "text": "lifecycle from commit all the way out to production deploy and we've got a number of different built-in services and",
    "start": "1073350",
    "end": "1079380"
  },
  {
    "text": "built-in capabilities that can integrate we also give you the ability to directly invoke lamda as part of a pipeline so",
    "start": "1079380",
    "end": "1085890"
  },
  {
    "text": "it's pretty awesome about this is that you can do anything you can run UI testing which just on Friday in our",
    "start": "1085890",
    "end": "1091740"
  },
  {
    "text": "DevOps blog we published a blog post about a company moving from a traditional selenium setup to using",
    "start": "1091740",
    "end": "1097290"
  },
  {
    "text": "lamda saved money got better parallelization they went from several hours of time for the UI tests just a",
    "start": "1097290",
    "end": "1103320"
  },
  {
    "text": "couple of minutes and it took them about a day to set up you could do that you could do invocation of API testing you",
    "start": "1103320",
    "end": "1110460"
  },
  {
    "text": "could do stubbing or mocking off of your services there's all sorts of things that you can do as part of code pipeline",
    "start": "1110460",
    "end": "1116670"
  },
  {
    "text": "in lamda you can do more basic things like say update JIRA send a message to slack whatever it is that you want to",
    "start": "1116670",
    "end": "1122880"
  },
  {
    "text": "put into that lambda function next up we have code deploy which again in a more server fool based way today is used for",
    "start": "1122880",
    "end": "1129000"
  },
  {
    "text": "deploying applications into ec2 or compute wherever it might be so you can run code deploy on Prem and inside of",
    "start": "1129000",
    "end": "1135210"
  },
  {
    "text": "code deploy there's kind of this concept of lifecycle triggers around when a deploy to an instance or an application",
    "start": "1135210",
    "end": "1140610"
  },
  {
    "text": "stop starts fails finishes etc and at any point in that that lifecycle you",
    "start": "1140610",
    "end": "1146250"
  },
  {
    "text": "could invoke a message basically over SNS to kick off lambda and so this could be really useful for things like",
    "start": "1146250",
    "end": "1152130"
  },
  {
    "text": "database migrations interfacing with tools again like monitoring metrics logging tools interfacing with things",
    "start": "1152130",
    "end": "1159720"
  },
  {
    "text": "like JIRA or whatever you might be doing for tracking your development workflow and so a number of different",
    "start": "1159720",
    "end": "1165240"
  },
  {
    "text": "possibilities here and then lastly code commit which is our hosted source control service which just last week got",
    "start": "1165240",
    "end": "1171690"
  },
  {
    "text": "pull requests one of the most requested capabilities in code commit gives you the ability after a commit or if there's",
    "start": "1171690",
    "end": "1178380"
  },
  {
    "text": "a time that a branch is created or if there's a pull request created to invoke a lambda function and so in the pull",
    "start": "1178380",
    "end": "1184530"
  },
  {
    "text": "request model you could actually invoke a lambda function to say run a test that tells you whether or not that PR is",
    "start": "1184530",
    "end": "1190140"
  },
  {
    "text": "clean or not otherwise you could say kick off a message to slack this hello",
    "start": "1190140",
    "end": "1195930"
  },
  {
    "text": "development team that hey there's a new branch number different use cases that can exist here as part of integrating in",
    "start": "1195930",
    "end": "1201180"
  },
  {
    "text": "with your source control a couple other management tool things that we'll talk about here so AWS",
    "start": "1201180",
    "end": "1207180"
  },
  {
    "text": "CloudFormation is a template driven source service for deploying resources in AWS in fact it's one of those heavily",
    "start": "1207180",
    "end": "1214170"
  },
  {
    "text": "used infrastructure management tools in the world just based on scale so with cloud formation we have something called",
    "start": "1214170",
    "end": "1219990"
  },
  {
    "text": "a custom resource and much like it sounds it's a resource that you define as a lambda function and so this can be",
    "start": "1219990",
    "end": "1225780"
  },
  {
    "text": "really useful for going and reaching out to other services that you have say such as ec2 to tell me give me the latest ami",
    "start": "1225780",
    "end": "1232410"
  },
  {
    "text": "from my database all right maybe you run your own database software and you want to find that ami maybe you want to",
    "start": "1232410",
    "end": "1237929"
  },
  {
    "text": "figure out a V PC subnet that is assigned to the dev environment for",
    "start": "1237929",
    "end": "1243420"
  },
  {
    "text": "staging your production instead of hard-coding that information into your template you can actually use a lambda function to say look at tags for these",
    "start": "1243420",
    "end": "1250020"
  },
  {
    "text": "resources for a V PC and then dynamically pull them into the template and make them available for the",
    "start": "1250020",
    "end": "1255120"
  },
  {
    "text": "resources so this is a pretty pretty powerful way in automating your infrastructure on AWS oedipus Cloud",
    "start": "1255120",
    "end": "1261210"
  },
  {
    "text": "Trail which is a service used for capturing logging information of API calls to aim WS can regularly take Vil",
    "start": "1261210",
    "end": "1267420"
  },
  {
    "text": "the API call log information that it collects put that into s3 and then you could very easily process that with",
    "start": "1267420",
    "end": "1273030"
  },
  {
    "text": "lambda and so what we see people doing is using this for kind of live semi-live auditing of the API calls that are made",
    "start": "1273030",
    "end": "1279960"
  },
  {
    "text": "inside of their account maybe you want a flag or check for any time that somebody modifies a security group or modifies a",
    "start": "1279960",
    "end": "1286320"
  },
  {
    "text": "V PC or takes a snapshot or deletes an object and so there's a lot of different",
    "start": "1286320",
    "end": "1291480"
  },
  {
    "text": "things that cloud trail can capture and you want to do some sort of again real-time processing or near real-time processing of that event and so lambda",
    "start": "1291480",
    "end": "1297870"
  },
  {
    "text": "allows you to do that Amazon config which is a sibling product to cloud",
    "start": "1297870",
    "end": "1303210"
  },
  {
    "text": "trail in the sense that while Cloud trail will capture API calls what config captures is configuration metadata of",
    "start": "1303210",
    "end": "1309720"
  },
  {
    "text": "resources inside of your account so let's say I go and add an EBS volume on to an ec2 instance what configure is",
    "start": "1309720",
    "end": "1315929"
  },
  {
    "text": "going to do is it's going to say ok this ec2 resource just changed there was an EVs volume that was attached to it and I",
    "start": "1315929",
    "end": "1321870"
  },
  {
    "text": "could see the entire history of this ec2 resource from creation through all the modification that might have happened I",
    "start": "1321870",
    "end": "1327330"
  },
  {
    "text": "could see all of the related components that might exist to it and I could process this information as well via an",
    "start": "1327330",
    "end": "1333240"
  },
  {
    "text": "SNS topic message going to a lambda function so maybe somebody goes and adds an e BS volume to something and I wouldn't want",
    "start": "1333240",
    "end": "1340990"
  },
  {
    "text": "that to happen I could very easily execute a lambda function have my logic inside of that lambda function to",
    "start": "1340990",
    "end": "1346360"
  },
  {
    "text": "process this and unwind or flag the change it's actually a better way to do",
    "start": "1346360",
    "end": "1351880"
  },
  {
    "text": "this though which is a WS config roles so config rules which is part of the config service it's basically you can",
    "start": "1351880",
    "end": "1359080"
  },
  {
    "text": "think of as an automated compliance tool so let's say that you have to meet sort and compliance inside your organization",
    "start": "1359080",
    "end": "1364409"
  },
  {
    "text": "HIPAA PCI anything that you have to do internally from a you know maybe internal business regulatory standpoint",
    "start": "1364409",
    "end": "1370529"
  },
  {
    "text": "you can define inside of config rules various rules that you need to meet so with things like PCI and HIPAA",
    "start": "1370529",
    "end": "1376149"
  },
  {
    "text": "encryption is very important encrypted EBS volumes and cryptid easy to host certain subnets that you want to use for",
    "start": "1376149",
    "end": "1381880"
  },
  {
    "text": "this you can actually create those rules inside a config rule and then basically when those rules are tripped a lambda",
    "start": "1381880",
    "end": "1388240"
  },
  {
    "text": "function can be executed and so this can be a really easy way to do say Auto remediations so somebody launches a host",
    "start": "1388240",
    "end": "1394360"
  },
  {
    "text": "they configure it wrong but it's in say a secure subnet you can actually have lambda go and terminate that host for",
    "start": "1394360",
    "end": "1400960"
  },
  {
    "text": "you or maybe shoot an email out to somebody else on the team and let them know of it I can watch events which is",
    "start": "1400960",
    "end": "1407409"
  },
  {
    "text": "part of the overall kind of cloud watch family of services that we have is effectively you could think of it as like an event bus for AWS events of all",
    "start": "1407409",
    "end": "1414220"
  },
  {
    "text": "different sorts and types so actually a lot of the things that I've talked about already will show up in cloud watch events in kind of a somewhat more",
    "start": "1414220",
    "end": "1420789"
  },
  {
    "text": "standardized way and so what you can do with these then is directly invoke lambda functions as part of that again",
    "start": "1420789",
    "end": "1426370"
  },
  {
    "text": "for compliance reasons or auditability reasons or auto response reasons and everything from auto scaling events",
    "start": "1426370",
    "end": "1432639"
  },
  {
    "text": "through modification events of certain services through various different",
    "start": "1432639",
    "end": "1439960"
  },
  {
    "text": "events that are kicked off and like our database services can show up in cloud watch events there's another part of",
    "start": "1439960",
    "end": "1445360"
  },
  {
    "text": "cloud watch events which is cloud watch events that are time-based or scheduled and so effectively this is managed cron",
    "start": "1445360",
    "end": "1451210"
  },
  {
    "text": "so for those of you who have cron jobs and have probably dealt with things like making cron jobs highly available and",
    "start": "1451210",
    "end": "1456789"
  },
  {
    "text": "making sure that you don't have to and then running at the same time or all the different issues that come with that cloud watch events is a great way to",
    "start": "1456789",
    "end": "1463990"
  },
  {
    "text": "help replace this and in this case basically you schedule a lambda function to execute and what you do in out lambda",
    "start": "1463990",
    "end": "1469149"
  },
  {
    "text": "function could be pretty much anything so lots of different possibilities here as well two",
    "start": "1469149",
    "end": "1475520"
  },
  {
    "text": "other components of cloud watch that can interface with lambda the first is cloud watch alarms so when an alarm is",
    "start": "1475520",
    "end": "1481160"
  },
  {
    "text": "breached let's say high CPU on something or maybe you know more requests or less",
    "start": "1481160",
    "end": "1487460"
  },
  {
    "text": "requests than you were expecting that alarm could invoke a lambda function again maybe to let the team",
    "start": "1487460",
    "end": "1492679"
  },
  {
    "text": "know maybe you need to do some sort of manual auto scaling on some sort of a service or tweak some sort of other",
    "start": "1492679",
    "end": "1498530"
  },
  {
    "text": "parameter somewhere you could use lambda to help kick that off and then with cloud watch logs what you can do is",
    "start": "1498530",
    "end": "1504679"
  },
  {
    "text": "actually as logs are sent into the service you can have them then sent on to a lambda function for again your",
    "start": "1504679",
    "end": "1510020"
  },
  {
    "text": "real-time processing maybe to check for any sort of bad log information that's",
    "start": "1510020",
    "end": "1515030"
  },
  {
    "text": "coming in or a log message that states that something bad happened or we often see people do is take this pull it into",
    "start": "1515030",
    "end": "1521150"
  },
  {
    "text": "lambda and send it off to say a database or data warehouse or something else for later processing or ingest of that",
    "start": "1521150",
    "end": "1527870"
  },
  {
    "text": "record so I've got a number of database use cases here so with DynamoDB we have",
    "start": "1527870",
    "end": "1535550"
  },
  {
    "text": "what are called DynamoDB streams it's actually based on top of Kinesis streams and in this case where it's very similar",
    "start": "1535550",
    "end": "1540770"
  },
  {
    "text": "to how can you see streams work as inserts updates and deletes happen in two DynamoDB it puts an event on the",
    "start": "1540770",
    "end": "1547370"
  },
  {
    "text": "stream and then eventually that can be processed by a lambda function now this could be really useful for doing things like creating backups and replicas of a",
    "start": "1547370",
    "end": "1555380"
  },
  {
    "text": "dynamodb table potentially let's say in another region people will do it to create effectively a more or less an",
    "start": "1555380",
    "end": "1561679"
  },
  {
    "text": "update log for dynamodb so maybe you want to be able to do slightly you know point in time recovery of a DynamoDB",
    "start": "1561679",
    "end": "1567980"
  },
  {
    "text": "database you can take this data pull them to Kinesis and potentially you know something into lambda send them to s3",
    "start": "1567980",
    "end": "1574220"
  },
  {
    "text": "for storage other times people will take data from dynamo D and put it into say redshift so they could do data warehouse",
    "start": "1574220",
    "end": "1580520"
  },
  {
    "text": "analysis on top of the data that's also in their dynamodb table without having to do some sort of you know bulk copy",
    "start": "1580520",
    "end": "1586130"
  },
  {
    "text": "and insert into the database later on amazon arora my sequel has the ability",
    "start": "1586130",
    "end": "1591470"
  },
  {
    "text": "to invoke lambda as a storage function our stored procedure so we've gone kind of here and reinvented the stored",
    "start": "1591470",
    "end": "1597650"
  },
  {
    "text": "procedures of old as it were but at a much higher much greater velocity potentially so customers are using us again where",
    "start": "1597650",
    "end": "1604190"
  },
  {
    "text": "they need to do some sort of compute work based upon data either updated leader inserted to a database where they",
    "start": "1604190",
    "end": "1611090"
  },
  {
    "text": "don't want to have that work done on the compute on the defeat of the database itself this could be very useful again",
    "start": "1611090",
    "end": "1616280"
  },
  {
    "text": "at very high velocities or very high traffic databases where stored procedures traditionally have become a",
    "start": "1616280",
    "end": "1621559"
  },
  {
    "text": "pain point in terms of taking up CPU resources from the other capabilities of the database and so you can take this",
    "start": "1621559",
    "end": "1627590"
  },
  {
    "text": "and completely off shoot it off to lambda for whatever you know you need might be and then lastly Amazon redshift",
    "start": "1627590",
    "end": "1632990"
  },
  {
    "text": "our data warehouse has a number of different ways that it creates events when you create replicas when you do snapshots when you do backups you can",
    "start": "1632990",
    "end": "1639650"
  },
  {
    "text": "create an event that can go messaged out to SNS which can invoke lambda so this can be useful for things like region",
    "start": "1639650",
    "end": "1646700"
  },
  {
    "text": "copies this can be useful for things like creating multiple copies of red shift clusters responding to failures",
    "start": "1646700",
    "end": "1652520"
  },
  {
    "text": "responding to incidents etc number different kind of automative capabilities that you can do here neck's",
    "start": "1652520",
    "end": "1659870"
  },
  {
    "text": "will talk about some of the AI services that we have that sit around around",
    "start": "1659870",
    "end": "1665419"
  },
  {
    "text": "lambda so first here is Amazon lek so Amazon Lex is a natural language natural",
    "start": "1665419",
    "end": "1671990"
  },
  {
    "text": "language service that's used for things like chat BOTS whether they be text-based voice space etc basically what happens is when you are conversing",
    "start": "1671990",
    "end": "1679280"
  },
  {
    "text": "with that chat bot at some point it has to do what's called a fulfillment this is basically execute the business logic of what this chat bot is looking to do",
    "start": "1679280",
    "end": "1686200"
  },
  {
    "text": "and in many cases or at least with Lex it's it's going to be lambda behind the scenes so if I have a chat bot that I'm",
    "start": "1686200",
    "end": "1693049"
  },
  {
    "text": "using to order pizza at some point I have filled all of the slots of that conversation I want a pepperoni pizza a large this is",
    "start": "1693049",
    "end": "1700309"
  },
  {
    "text": "where I live delivery etc and then it's going to pass that information onto a lambda function to do whatever the",
    "start": "1700309",
    "end": "1706070"
  },
  {
    "text": "execution is of that conversation now this is extended further into Alexa so",
    "start": "1706070",
    "end": "1711500"
  },
  {
    "text": "for those of you who have Alexa devices at home again a lot of the times that you ask Alexa to do something it's",
    "start": "1711500",
    "end": "1717260"
  },
  {
    "text": "actually going to invoke a lambda function behind the scenes and this is based on Alexa being built on top of Lex",
    "start": "1717260",
    "end": "1722450"
  },
  {
    "text": "and so if you've ever created a custom skill for Alexa it actually will show",
    "start": "1722450",
    "end": "1727490"
  },
  {
    "text": "you directly how you can interface this with lambda and again many of the what was 25,000 skills a couple weeks ago are",
    "start": "1727490",
    "end": "1734330"
  },
  {
    "text": "actually backed by lambda and then lastly AWS IOT which is of",
    "start": "1734330",
    "end": "1739609"
  },
  {
    "text": "itself kind of a whole ecosystem of capabilities this probably would have looked like 30 service architectures",
    "start": "1739609",
    "end": "1745039"
  },
  {
    "text": "plus 50 IOT architectures if I included all of them but with a dubious IOT does",
    "start": "1745039",
    "end": "1750080"
  },
  {
    "text": "is it gives you the ability to invoke lambda functions based on events from your devices and data ingest from your",
    "start": "1750080",
    "end": "1755090"
  },
  {
    "text": "devices a number of different capabilities this also includes a Davis Greengrass which is actually a compute",
    "start": "1755090",
    "end": "1761149"
  },
  {
    "text": "environment integrated with IOT and lambda that allows you to run lambda functions on devices itself so a whole",
    "start": "1761149",
    "end": "1767479"
  },
  {
    "text": "lot of capabilities around the IOT space and encourage you to check out some of the sessions this week on IOT to talk",
    "start": "1767479",
    "end": "1772549"
  },
  {
    "text": "about it so we've gone through the 30 serverless architectures we're at",
    "start": "1772549",
    "end": "1777830"
  },
  {
    "text": "exactly almost 30 minutes so the first half of the title of the talk has been kept true let's dive into some of the",
    "start": "1777830",
    "end": "1783799"
  },
  {
    "text": "tooling and other things that exist around this world of service so let's talk a little bit here about deploying",
    "start": "1783799",
    "end": "1789379"
  },
  {
    "text": "your applications so here at AWS we have our lovely service mascot this is Sam",
    "start": "1789379",
    "end": "1796849"
  },
  {
    "text": "you will see Sam the squirrel in a number of different costumes and outfits we've got Sam with nerd glasses we've",
    "start": "1796849",
    "end": "1802729"
  },
  {
    "text": "got Sam with a baseball cap we've got Sam with a hard hat and you might see some of the people on my team who lost",
    "start": "1802729",
    "end": "1809119"
  },
  {
    "text": "Beth's wearing a squirrel costume this week running around just say hi Sam to",
    "start": "1809119",
    "end": "1814129"
  },
  {
    "text": "them and try to get a selfie if you can so with Sam actually stands for his surplice application models this is a",
    "start": "1814129",
    "end": "1819349"
  },
  {
    "text": "tool that we actually released last year right before reinvent we've continued to kind of expand upon it over the last 12",
    "start": "1819349",
    "end": "1825169"
  },
  {
    "text": "months and today what Sam is is it's a an extension for cloud formation optimized for service so what does that",
    "start": "1825169",
    "end": "1831409"
  },
  {
    "text": "mean what it means basically is we created certain capabilities inside a cloud formation specialized for serve",
    "start": "1831409",
    "end": "1837229"
  },
  {
    "text": "lists which basically streamlined the work involved in you launching service applications and there are three",
    "start": "1837229",
    "end": "1843139"
  },
  {
    "text": "resource types today functions API is and tables however because it's just an extension of CloudFormation it supports",
    "start": "1843139",
    "end": "1849139"
  },
  {
    "text": "anything that cloud formation would itself support and you can also find all the documentation a number of examples",
    "start": "1849139",
    "end": "1855169"
  },
  {
    "text": "for this on github as part of an open source repository that we have so this",
    "start": "1855169",
    "end": "1860720"
  },
  {
    "text": "is an example of a Sam template it's really pretty straightforward one we expect you to read every line on this but what I do want you to get is that",
    "start": "1860720",
    "end": "1867169"
  },
  {
    "text": "there's effectively three parts to it the first part is headers and what you'll see here on the second line if",
    "start": "1867169",
    "end": "1872719"
  },
  {
    "text": "you can read it from where you're looking is a line called transform so inside of cloud formation we have a concept called transforms these are",
    "start": "1872719",
    "end": "1879200"
  },
  {
    "text": "extension models inside of cloud formation this one is for serve lists and so what you need is this line and",
    "start": "1879200",
    "end": "1885169"
  },
  {
    "text": "what this line does is it tells cloud formation this is a SAM template look for Sam resources we then have two",
    "start": "1885169",
    "end": "1891169"
  },
  {
    "text": "resources in this template the first is a service function and then we see a number of different capabilities here",
    "start": "1891169",
    "end": "1896659"
  },
  {
    "text": "that align with lambda we see down here an event source talked about this here in a moment and then down at the bottom",
    "start": "1896659",
    "end": "1901940"
  },
  {
    "text": "here we have another resource called list table itself type simple table this is actually a DynamoDB table that will",
    "start": "1901940",
    "end": "1907700"
  },
  {
    "text": "start with just a basic five read and five write units and today since you can enable auto scaling for DynamoDB you no",
    "start": "1907700",
    "end": "1914179"
  },
  {
    "text": "longer have to pay attention to necessarily what the read and write units are that you configure dynamo for",
    "start": "1914179",
    "end": "1920889"
  },
  {
    "text": "to give you another idea of visualization of this we have an example in a repo and basically in this is a",
    "start": "1920889",
    "end": "1926989"
  },
  {
    "text": "screen shot from github from roughly lines 9:00 or so to 25 what this actually does is it extrapolates out and",
    "start": "1926989",
    "end": "1933589"
  },
  {
    "text": "creates these six different resources on the side here so what Sam is going to do is it's gonna say you define a lambda",
    "start": "1933589",
    "end": "1939139"
  },
  {
    "text": "function and an event source what it's going to do is it's going to create that lambda function potentially create that",
    "start": "1939139",
    "end": "1944899"
  },
  {
    "text": "event source integrate them with I am the way that's necessary especially you don't have to think about all of the",
    "start": "1944899",
    "end": "1951109"
  },
  {
    "text": "rules and rights and stuff that I am is going to require and again in a greatly greatly simplified way if we were to",
    "start": "1951109",
    "end": "1957019"
  },
  {
    "text": "take these roughly 16 or so lines of Sam template and do them in just raw CloudFormation it would actually be",
    "start": "1957019",
    "end": "1963109"
  },
  {
    "text": "about almost 80 lines of CloudFormation so this really really simplifies the way that you need to write these templates",
    "start": "1963109",
    "end": "1970039"
  },
  {
    "text": "for launching applications so I mentioned that there are effectively three special types of resources inside",
    "start": "1970039",
    "end": "1978229"
  },
  {
    "text": "a Sam templates for CloudFormation function API and simple table we can see here with the definition for a function",
    "start": "1978229",
    "end": "1984739"
  },
  {
    "text": "that basically we're defining a whole bunch of the things that exist in a lambda function so we're defining where",
    "start": "1984739",
    "end": "1989869"
  },
  {
    "text": "the code lives we're defining the runtime or the language that's being used where the handler is the in memory",
    "start": "1989869",
    "end": "1995269"
  },
  {
    "text": "that we need the timeout etc you don't need to fill all these in but we do give you basically the ability to then down",
    "start": "1995269",
    "end": "2001479"
  },
  {
    "text": "at the bottom here we have the event section so this is going to correlate with what the invoking service is for this lambda function now there",
    "start": "2001479",
    "end": "2008599"
  },
  {
    "text": "are a number of different third-party frameworks that exist for the lambda space today however many of them are",
    "start": "2008599",
    "end": "2014349"
  },
  {
    "text": "specific to a certain use case so there's a number of third-party frameworks that are specific to API workloads a couple - data streaming",
    "start": "2014349",
    "end": "2021889"
  },
  {
    "text": "workloads Sam is basically completely agnostic to all of that doesn't care about your language doesn't care about",
    "start": "2021889",
    "end": "2027259"
  },
  {
    "text": "your use case it's really just an infrastructure management tool at the end of the day so when it comes to the",
    "start": "2027259",
    "end": "2032629"
  },
  {
    "text": "events what we have basically then is deeper support for how you can configure the events along with Sam so we talked again just before here",
    "start": "2032629",
    "end": "2040429"
  },
  {
    "text": "about the 30 different use cases that we brought up and you'll find that across almost all of them not all of them",
    "start": "2040429",
    "end": "2046220"
  },
  {
    "text": "almost all of them are supported directly in Sam today for those that aren't you can still define the policy",
    "start": "2046220",
    "end": "2051888"
  },
  {
    "text": "that would allow those services to invoke lambda as necessary so s 3 and s",
    "start": "2051889",
    "end": "2057349"
  },
  {
    "text": "NS which covers some of the big areas Kinesis and DynamoDB api which represents api gateway cloud watch",
    "start": "2057349",
    "end": "2063378"
  },
  {
    "text": "scheduled events regular cloud watch events IOT rules and alexis skills and so again across these that's going to",
    "start": "2063379",
    "end": "2069710"
  },
  {
    "text": "basically set up the permissioning necessary between the function policy in the execution policy so that you don't",
    "start": "2069710",
    "end": "2076039"
  },
  {
    "text": "have to know what that looks like serve list API is pretty simplistic today allows you to specify some information",
    "start": "2076039",
    "end": "2082878"
  },
  {
    "text": "about a stage such as if there's caching enabled if so how big of a cluster if you're going to define the swagger",
    "start": "2082879",
    "end": "2088760"
  },
  {
    "text": "template for your API gateway separately as well as passed in variables and then lastly simple table again is a very",
    "start": "2088760",
    "end": "2095569"
  },
  {
    "text": "simplistic representation of a dynamodb table the primary key can be defined and",
    "start": "2095569",
    "end": "2101059"
  },
  {
    "text": "then the amount of read and write capacity along with it now Sam being an",
    "start": "2101059",
    "end": "2106160"
  },
  {
    "text": "extension on top of CloudFormation the way that it works with building and deploying these is we basically added",
    "start": "2106160",
    "end": "2111740"
  },
  {
    "text": "two commands to cloud formation the first is package what package is going to basically do is the shows here is",
    "start": "2111740",
    "end": "2117200"
  },
  {
    "text": "it's going to create a zip file with all of your resources for your application it's going to put that up into s3 and",
    "start": "2117200",
    "end": "2122869"
  },
  {
    "text": "then it's going to come back with the code URI that you need for the lambda function to know where your code lives and then the deploy command is then",
    "start": "2122869",
    "end": "2129440"
  },
  {
    "text": "actually going to execute your Sam template with the past ed code you are information which is then going to go",
    "start": "2129440",
    "end": "2134839"
  },
  {
    "text": "ahead and tell cloud formation basically to stand up your service application so pretty straightforward",
    "start": "2134839",
    "end": "2139940"
  },
  {
    "text": "you can do this all from the CLI in a again pretty easy way now just this past",
    "start": "2139940",
    "end": "2146180"
  },
  {
    "text": "summer we announced something called Sam local Sam local is actually as it sounds a local tool for building and",
    "start": "2146180",
    "end": "2152810"
  },
  {
    "text": "developing serverless applications so what this does is it looks at a Sam template file inside of your code",
    "start": "2152810",
    "end": "2158600"
  },
  {
    "text": "repository it looks at your code and what it does is it creates a running container using docker on your your",
    "start": "2158600",
    "end": "2164750"
  },
  {
    "text": "laptop or your workstation whatever it is that you're developing on such that you can test the api's locally as well",
    "start": "2164750",
    "end": "2169790"
  },
  {
    "text": "as invoke a function like as if it was another service so you have the ability",
    "start": "2169790",
    "end": "2174890"
  },
  {
    "text": "to pass in say mock JSON data for Canisius or dynamo or s3 or SNS against",
    "start": "2174890",
    "end": "2180710"
  },
  {
    "text": "that function running locally no need for internet access or anything like that so this is a great tool for being",
    "start": "2180710",
    "end": "2187340"
  },
  {
    "text": "able to build and test your lambda functions and actually I should mention",
    "start": "2187340",
    "end": "2192740"
  },
  {
    "text": "here this is a completely open source tool it's written in go we are actively taking pull requests from the community",
    "start": "2192740",
    "end": "2199100"
  },
  {
    "text": "for it I apologies the the URL is a little hard to see here at the bottom but it's github.com /aw slabs slash NWS sam -",
    "start": "2199100",
    "end": "2207560"
  },
  {
    "text": "local so definitely encourage you to check it out if you're building lambda based applications so you can take all",
    "start": "2207560",
    "end": "2214190"
  },
  {
    "text": "of this and you can put it together eventually into a full formal deployment pipeline I have another session on",
    "start": "2214190",
    "end": "2220850"
  },
  {
    "text": "Friday about building CI NCD pipelines for service applications as well as in the DevOps tract this week there's a",
    "start": "2220850",
    "end": "2227600"
  },
  {
    "text": "whole bunch of different talks about the CI NCD tools code pipeline code commit code build code deploy etc but basically",
    "start": "2227600",
    "end": "2235130"
  },
  {
    "text": "what a the most basic kind of pipeline that you would see for a production use case looks a little bit like this so we",
    "start": "2235130",
    "end": "2240800"
  },
  {
    "text": "have or we're called five different stages kind of the five individual separated boxes here we have a source",
    "start": "2240800",
    "end": "2246560"
  },
  {
    "text": "stage which is going to be tied back to where my source code lives we have a build stage which in this case is using",
    "start": "2246560",
    "end": "2251840"
  },
  {
    "text": "code build to potentially build compile do unit tests and stuff like that and then we have three different one I call",
    "start": "2251840",
    "end": "2258350"
  },
  {
    "text": "environmental stages so testing staging and production whatever you might want to call those and this is basically a",
    "start": "2258350",
    "end": "2265100"
  },
  {
    "text": "pipeline that would follow all of the best practices that we would recommend at a most basic level there was a joke I saw one day and it",
    "start": "2265100",
    "end": "2271480"
  },
  {
    "text": "said many people have testing environments some are lucky to have them that aren't production and so one of the",
    "start": "2271480",
    "end": "2277630"
  },
  {
    "text": "great things about service applications is that a testing environment when it's not in use should cost you absolutely nothing if you were to think about in a",
    "start": "2277630",
    "end": "2284980"
  },
  {
    "text": "traditional compute environment that is not likely to be the case so again one of the key differentiators here if",
    "start": "2284980",
    "end": "2290770"
  },
  {
    "text": "service is the idea that you don't pay for idle and so very useful here so",
    "start": "2290770",
    "end": "2296950"
  },
  {
    "text": "another thing I like to say is that you can't move fast if you can't measure what's going on and so monitoring logging measure mean of applications is",
    "start": "2296950",
    "end": "2303610"
  },
  {
    "text": "incredibly important across-the-board this is not unique just a service but what we have inside of service today in",
    "start": "2303610",
    "end": "2310840"
  },
  {
    "text": "terms of the services lambda API gateway etc is pretty deep integration with cloud watch live quad web metrics etc in",
    "start": "2310840",
    "end": "2318760"
  },
  {
    "text": "cloud watch metrics we have today six built-in metrics for lambda seven built-in ones for API gateway everything",
    "start": "2318760",
    "end": "2325570"
  },
  {
    "text": "from invocation count duration throttled iterator age for things like the stream based workloads the DL queue size we'll",
    "start": "2325570",
    "end": "2333760"
  },
  {
    "text": "talk about this here in a moment API gateway has API counts latency both from the integration source and itself",
    "start": "2333760",
    "end": "2340690"
  },
  {
    "text": "for hundreds five hundreds and so forth and so you can take these graphs as you see them in the console and they're",
    "start": "2340690",
    "end": "2346510"
  },
  {
    "text": "pretty straightforward in terms of what you see here so here are the basic rafts that are enabled for this now logging is",
    "start": "2346510",
    "end": "2354580"
  },
  {
    "text": "also built directly into both of these products and so inside of API gateway we have two different types of log levels",
    "start": "2354580",
    "end": "2360970"
  },
  {
    "text": "we have error and info you can tweak that on a per stage basis you can also potentially log the full method or body",
    "start": "2360970",
    "end": "2368080"
  },
  {
    "text": "content of a request now you want to be cautious about doing this because you're paying for the data that goes into cloud watch logs and so this could become you",
    "start": "2368080",
    "end": "2375040"
  },
  {
    "text": "know quite a lot of data if you have a very active API it's very useful for troubleshooting and debugging of issues",
    "start": "2375040",
    "end": "2380710"
  },
  {
    "text": "that happen lambda also captures logs for you so inside of a lambda function any time that you do the equivalent of",
    "start": "2380710",
    "end": "2387100"
  },
  {
    "text": "say a console log or a printf statement that would output any sort of text from",
    "start": "2387100",
    "end": "2393100"
  },
  {
    "text": "a function we're actually going to capture that into cloud watch logs and make it available for you so being able to put in debug statements or actual",
    "start": "2393100",
    "end": "2399700"
  },
  {
    "text": "true application logging you don't need to do anything complex you don't need to install a library install any tooling just output that log",
    "start": "2399700",
    "end": "2406040"
  },
  {
    "text": "data and it will be captured on the lambda environment and again sent to cloud wash lives and then there's number",
    "start": "2406040",
    "end": "2413060"
  },
  {
    "text": "different cool things you can do with cloud watch logs that I think people aren't too familiar with one is called log pivots and this is basically the",
    "start": "2413060",
    "end": "2418790"
  },
  {
    "text": "ability to regex a certain part of a log data line pull data out of it and then",
    "start": "2418790",
    "end": "2424160"
  },
  {
    "text": "generate a metric from that and so you can very easily have kind of a multipurpose log line you could have your log line that has a data point take",
    "start": "2424160",
    "end": "2431180"
  },
  {
    "text": "that data point create a graph from it take that in that metric graph and create an alarm around it and you have",
    "start": "2431180",
    "end": "2436430"
  },
  {
    "text": "you know again a number of different sources of information that help make it easier from an operational perspective we also have the ability for you to very",
    "start": "2436430",
    "end": "2443060"
  },
  {
    "text": "easily export these logs to elastic cat or sari elasticsearch or s3 this should say so being able to view that data",
    "start": "2443060",
    "end": "2449510"
  },
  {
    "text": "would say Cubana or things like Athena and quick cite is really really powerful so again these are two things that are",
    "start": "2449510",
    "end": "2455150"
  },
  {
    "text": "very very useful another thing in this space is just last week we launched the",
    "start": "2455150",
    "end": "2460400"
  },
  {
    "text": "ability an api gateway for custom access logging and so what we now do is give you the ability to customize the log",
    "start": "2460400",
    "end": "2466430"
  },
  {
    "text": "format based on your needs we have a couple of kind of built-in buttons here for traditional Apache CFL logs JSON and",
    "start": "2466430",
    "end": "2473450"
  },
  {
    "text": "XML or even CSV log formats if that's something that is what you would want to",
    "start": "2473450",
    "end": "2479360"
  },
  {
    "text": "do alright so encourage you to take a look at this get a lot more information about your logs and customize them as",
    "start": "2479360",
    "end": "2484400"
  },
  {
    "text": "necessary before when they get ingested another thing that you should take a look at is in cloud watch we have",
    "start": "2484400",
    "end": "2490610"
  },
  {
    "text": "something launched actually a number of months ago now cloud watch dashboards and so inside a cloud watch what I have",
    "start": "2490610",
    "end": "2496400"
  },
  {
    "text": "here is I just mocked up a very basic dashboard for a service application that's lamda and API gateway based so",
    "start": "2496400",
    "end": "2503750"
  },
  {
    "text": "the top group of graphs are all lamda graphs and then I have basically some information about my integration latency",
    "start": "2503750",
    "end": "2510140"
  },
  {
    "text": "and latency of my API gateway and then down on the bottom I have things here like errors and counts and stuff and so",
    "start": "2510140",
    "end": "2516080"
  },
  {
    "text": "really easy to get started with this creating a dashboard like this takes just a couple minutes of clicking around in the dashboard you can then share that",
    "start": "2516080",
    "end": "2522470"
  },
  {
    "text": "URL with other people inside of your organization and again very easily get quite a lot of visibility into your",
    "start": "2522470",
    "end": "2528050"
  },
  {
    "text": "service applications now another part of this so we've got monitoring we've got",
    "start": "2528050",
    "end": "2534140"
  },
  {
    "text": "logging is the ability to profile your applications and last year at reinvent we announced x-ray",
    "start": "2534140",
    "end": "2539620"
  },
  {
    "text": "x-ray is a profiling tracing service that we have and basically what it does is it captures requests from your",
    "start": "2539620",
    "end": "2546470"
  },
  {
    "text": "application records all of them and then makes them available via both a service map and the ability to kind of visualize",
    "start": "2546470",
    "end": "2552710"
  },
  {
    "text": "them as they happen and so this can be really useful in distributed applications where you have lambda",
    "start": "2552710",
    "end": "2558590"
  },
  {
    "text": "functions calling other services calling all the lambda functions and so forth and being able to kind of piece together",
    "start": "2558590",
    "end": "2563750"
  },
  {
    "text": "the full map of your application workflow tooling it is really easy to",
    "start": "2563750",
    "end": "2568790"
  },
  {
    "text": "get started and so inside of lambda you can flag on the ability to capture x-ray",
    "start": "2568790",
    "end": "2574370"
  },
  {
    "text": "information that's considered a passive mode it will capture certain information but it won't necessarily capture all of",
    "start": "2574370",
    "end": "2579680"
  },
  {
    "text": "the requests made inside of your function now if you want to capture the data inside of your function you need to",
    "start": "2579680",
    "end": "2585140"
  },
  {
    "text": "include the SDKs for x-ray inside of it so the very top line of this here we see a require for the x-ray SDK core and",
    "start": "2585140",
    "end": "2592550"
  },
  {
    "text": "then the second line of this I'm wrapping the AWS SDK with the x-ray SDK and basically what this means is that",
    "start": "2592550",
    "end": "2598640"
  },
  {
    "text": "any calls to AWS services are going to be captured by x-ray and populated inside of the x-ray service I don't have",
    "start": "2598640",
    "end": "2606290"
  },
  {
    "text": "to do anything else with my code at all in order to capture this information so really really trivial and easy to get",
    "start": "2606290",
    "end": "2611720"
  },
  {
    "text": "started and then we see here the most basic of service maps as part of this so",
    "start": "2611720",
    "end": "2617330"
  },
  {
    "text": "the first circle that you see here is the lamda service itself it's going to invoke a function that function is",
    "start": "2617330",
    "end": "2623150"
  },
  {
    "text": "calling s3 the green circle here is good you also can see red and yellow based on",
    "start": "2623150",
    "end": "2629420"
  },
  {
    "text": "certain types of failures that might be happening with the service that you're talking to based on HTTP HPS response",
    "start": "2629420",
    "end": "2635450"
  },
  {
    "text": "codes we see timing we see request request per second a whole lot of information now this is a very very",
    "start": "2635450",
    "end": "2641000"
  },
  {
    "text": "basic diagram for this it could obviously have a lot more circles based on the complexity of your application",
    "start": "2641000",
    "end": "2646720"
  },
  {
    "text": "and then if we were to dive into an individual request we would see a timeline and now this timeline is very",
    "start": "2646720",
    "end": "2653030"
  },
  {
    "text": "very valuable for looking into what it is that your function is doing at any point in time when I talk to a lot of",
    "start": "2653030",
    "end": "2658640"
  },
  {
    "text": "customers where they say hey I'm trying to figure out what's going on with lambda my functions seem slow things aren't working the way I want enable",
    "start": "2658640",
    "end": "2664940"
  },
  {
    "text": "x-ray and you will right away gather a whole world of information that you don't have without it and so we see here",
    "start": "2664940",
    "end": "2670460"
  },
  {
    "text": "how long it took for the service to basically start up invoke itself talk to s3 get",
    "start": "2670460",
    "end": "2676369"
  },
  {
    "text": "the response and complete and so again in a much more sophisticated application there would be a lot more here but this",
    "start": "2676369",
    "end": "2682369"
  },
  {
    "text": "is incredibly viable information in terms of debugging what it's inside your application so again when people come to",
    "start": "2682369",
    "end": "2689569"
  },
  {
    "text": "me and they say you know strongly to figure something out something just doesn't seem right you know they may be questioning lambda what I basically want",
    "start": "2689569",
    "end": "2696859"
  },
  {
    "text": "to do is ask them kind of or tell them to do three things one is turn on x-ray now you have the ability to turn on",
    "start": "2696859",
    "end": "2702589"
  },
  {
    "text": "x-ray and control the rate at which it's capturing information and easily turn it",
    "start": "2702589",
    "end": "2707749"
  },
  {
    "text": "off again inside of the function configuration so go ahead and turn it on when you're trying to figure things out",
    "start": "2707749",
    "end": "2712910"
  },
  {
    "text": "let it gather its information turn it off when things seem okay that's totally fine the other is not to underestimate",
    "start": "2712910",
    "end": "2718789"
  },
  {
    "text": "the capabilities in logging so again we don't require you to install logging agents or do anything with your code",
    "start": "2718789",
    "end": "2724640"
  },
  {
    "text": "just a very basic output statement from whatever the languages that you're using in lambda is enough for us to capture",
    "start": "2724640",
    "end": "2730549"
  },
  {
    "text": "that in cloud watch logs and make it available to you and there's all sorts of things you to capture that our application specific that you might want",
    "start": "2730549",
    "end": "2737539"
  },
  {
    "text": "to look at and lastly you know the most valuable metrics that you're ever going to generate are the ones related to your",
    "start": "2737539",
    "end": "2742789"
  },
  {
    "text": "customer so inside of your application creating metrics for creating long lines that are more about application data and",
    "start": "2742789",
    "end": "2748819"
  },
  {
    "text": "business you know relevant information can be really useful to you I'll give you an example of this I had a customer",
    "start": "2748819",
    "end": "2755119"
  },
  {
    "text": "that was ingesting data with Kinesis to lambda I was basically an ad tech use case they had a whole lot of data that",
    "start": "2755119",
    "end": "2760999"
  },
  {
    "text": "was coming in very quickly they had a ingest layer that was using the Kinesis library to put data into Kinesis and the",
    "start": "2760999",
    "end": "2768349"
  },
  {
    "text": "Kinesis library will batch up information for you that information then goes into Kinesis and then was",
    "start": "2768349",
    "end": "2773390"
  },
  {
    "text": "invoking a lambda function that lambda function will pull data out in batches as well so with pulling in batches of",
    "start": "2773390",
    "end": "2779660"
  },
  {
    "text": "batches and then what they were doing is taking the batches of batches unbanning them and processing each record",
    "start": "2779660",
    "end": "2785269"
  },
  {
    "text": "individually against another back-end service from time to time they were seeing failures in their lambda",
    "start": "2785269",
    "end": "2791479"
  },
  {
    "text": "functions they couldn't really figure out what was going on and so we started diving into this and I started saying to",
    "start": "2791479",
    "end": "2796579"
  },
  {
    "text": "the well how many records are you maybe processing at any point in time and they didn't really have a good grasp on this",
    "start": "2796579",
    "end": "2801619"
  },
  {
    "text": "at all and then what we did is I said okay let's create a log line that shows the number of unmatched requests",
    "start": "2801619",
    "end": "2806960"
  },
  {
    "text": "that you are processing any point in time let's throw that into cloud watch logs let's turn that via a log pivot",
    "start": "2806960",
    "end": "2812780"
  },
  {
    "text": "into a metric and let's see if we can correlate the graph with the failures that are happening sure enough we were",
    "start": "2812780",
    "end": "2819590"
  },
  {
    "text": "able to we're able to figure out that they didn't have enough memory for their function based on the maximum amount of Records they might consume and so the",
    "start": "2819590",
    "end": "2826910"
  },
  {
    "text": "reaction to it was increased the sharding increased the memory and away went their shoes so again they were",
    "start": "2826910",
    "end": "2832730"
  },
  {
    "text": "thinking it was something with the platform it was something with the language was actually much easier to troubleshoot by just turning on some",
    "start": "2832730",
    "end": "2838400"
  },
  {
    "text": "logging the last thing I'll talk about here in relation to this is this concept",
    "start": "2838400",
    "end": "2843620"
  },
  {
    "text": "called dead-letter queues and I don't know I you I use a macbook this is on a",
    "start": "2843620",
    "end": "2850280"
  },
  {
    "text": "PC it didn't render it very well it supposed to just be a skull and a mail thing and then a queue I don't know if those other boxes are there but",
    "start": "2850280",
    "end": "2856580"
  },
  {
    "text": "basically dead-letter keys are a capability of lambda for async use cases",
    "start": "2856580",
    "end": "2861710"
  },
  {
    "text": "so things like SNS s3 SES a number of other services where basically if on a",
    "start": "2861710",
    "end": "2869450"
  },
  {
    "text": "certain number of failures of the service itself or of your logic it will take the message that was going to",
    "start": "2869450",
    "end": "2875120"
  },
  {
    "text": "lambda the invocation data and it will put it into either an SNS topic or an s qsq such that you can process it later",
    "start": "2875120",
    "end": "2881650"
  },
  {
    "text": "now I've seen this be very useful in a number of instances let's say that your lambda function is calling potentially",
    "start": "2881650",
    "end": "2888980"
  },
  {
    "text": "another service your lambda function has some sort of business logic inside of it that could fail based on a third party",
    "start": "2888980",
    "end": "2895640"
  },
  {
    "text": "but you can actually have as after that lambda function has failed so many times those requests can go to the dead letter",
    "start": "2895640",
    "end": "2900650"
  },
  {
    "text": "Q and then be processed later on and so this could be really useful for making sure that you're not losing data or",
    "start": "2900650",
    "end": "2906740"
  },
  {
    "text": "dropping requests and I basically encourage people to just turn this on if things are working it should never get",
    "start": "2906740",
    "end": "2913160"
  },
  {
    "text": "used but when things don't work it gets used and it can really save you you know a lot of headache and a lot of pain so",
    "start": "2913160",
    "end": "2918350"
  },
  {
    "text": "dead letter Q is really useful turn them on however you can and keep them on so",
    "start": "2918350",
    "end": "2926570"
  },
  {
    "text": "with that we've talked about quite a lot today we've talked about again kind of 30 different architectures for invoking",
    "start": "2926570",
    "end": "2931790"
  },
  {
    "text": "and using lambda everything from web application backends to kind of full streaming analytics processing client",
    "start": "2931790",
    "end": "2938750"
  },
  {
    "text": "two very basic things like processing email bounce requests to doing things",
    "start": "2938750",
    "end": "2943910"
  },
  {
    "text": "with our development and management tools that are very very simple little ply a couple of lines of code type things you know think again about kind",
    "start": "2943910",
    "end": "2951050"
  },
  {
    "text": "of the six main different use case buckets that exist for lambda web applications backends data processing",
    "start": "2951050",
    "end": "2956960"
  },
  {
    "text": "chatbots alexa IT automation you're probably not going to do something in all of those but there are a couple that",
    "start": "2956960",
    "end": "2963170"
  },
  {
    "text": "are gonna be very important to you three different types of invocation models right synchronous asynchronous stream",
    "start": "2963170",
    "end": "2969020"
  },
  {
    "text": "processing that then go back and align with the various different services that integrate and so when you put all this",
    "start": "2969020",
    "end": "2974660"
  },
  {
    "text": "together what you get as a lot of different use cases for how service can be impactful for your business everything from replacing a hosts that",
    "start": "2974660",
    "end": "2980690"
  },
  {
    "text": "are running prom up through potentially huge fleets of hosts earlier today ran into a customer in the hallway told me",
    "start": "2980690",
    "end": "2987680"
  },
  {
    "text": "about how his lambda and API gateway set up did about eight billion requests last month it's gonna do ten billion requests",
    "start": "2987680",
    "end": "2993440"
  },
  {
    "text": "this month and probably more next month these are kind of stories that we're hearing every day in this space this is",
    "start": "2993440",
    "end": "2998599"
  },
  {
    "text": "very very very exciting take a look at Sam for deploying your service applications take a look at Sam local",
    "start": "2998599",
    "end": "3004510"
  },
  {
    "text": "for developing them local on your workstation keep your eyes and ears open for some more interesting news this week",
    "start": "3004510",
    "end": "3010599"
  },
  {
    "text": "in that space I didn't talk about it but you can get started in this space using the AWS code star product this is a",
    "start": "3010599",
    "end": "3016650"
  },
  {
    "text": "basically a tool that allows you to glue together a number of our development cncd tools and so you can very easily",
    "start": "3016650",
    "end": "3023410"
  },
  {
    "text": "get to a strong kind of element pipeline put in place without having to do a lot of work almost anything I talked about",
    "start": "3023410",
    "end": "3030490"
  },
  {
    "text": "here today could be found on the service landing page so AWS and amazon.com server lists reference architectures",
    "start": "3030490",
    "end": "3037690"
  },
  {
    "text": "how-to guides documentation videos links to our blog which is incredibly active",
    "start": "3037690",
    "end": "3044010"
  },
  {
    "text": "partner solutions all sorts of things that exist here my name is Chris once",
    "start": "3044010",
    "end": "3049210"
  },
  {
    "text": "again I am the lead developer advocate for server lists at AWS you can find me at MUNs at amazon.com you can also find",
    "start": "3049210",
    "end": "3055599"
  },
  {
    "text": "me at Christman's on twitter I love feedback on this session and so well please do provide it I'd love to know",
    "start": "3055599",
    "end": "3061180"
  },
  {
    "text": "what I can do better next time again this was 30 service architectures",
    "start": "3061180",
    "end": "3066400"
  },
  {
    "text": "in 30 minutes the extended version thank you all for coming thank you for those who put up with the line earlier",
    "start": "3066400",
    "end": "3073740"
  }
]