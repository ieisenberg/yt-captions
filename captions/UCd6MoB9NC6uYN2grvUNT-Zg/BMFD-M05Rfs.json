[
  {
    "text": "[Music]",
    "start": "460",
    "end": "4470"
  },
  {
    "text": "hi my name is andy katz I'm here to",
    "start": "6080",
    "end": "9660"
  },
  {
    "text": "introduce AWS step functions a service",
    "start": "9660",
    "end": "12780"
  },
  {
    "text": "from AWS that makes it easy to",
    "start": "12780",
    "end": "14280"
  },
  {
    "text": "coordinate the components of distributed",
    "start": "14280",
    "end": "16470"
  },
  {
    "text": "applications and micro services using",
    "start": "16470",
    "end": "19170"
  },
  {
    "text": "visual workflows Micra services are",
    "start": "19170",
    "end": "21720"
  },
  {
    "text": "processes that communicate with each",
    "start": "21720",
    "end": "23189"
  },
  {
    "text": "other over a network to complete a",
    "start": "23189",
    "end": "25109"
  },
  {
    "text": "larger goal applications built as a",
    "start": "25109",
    "end": "27330"
  },
  {
    "text": "collection of micro services are more",
    "start": "27330",
    "end": "29369"
  },
  {
    "text": "resilient and easier to scale a very",
    "start": "29369",
    "end": "32250"
  },
  {
    "text": "simple micro service even service in",
    "start": "32250",
    "end": "34829"
  },
  {
    "text": "this case can be deployed with an AWS",
    "start": "34829",
    "end": "37260"
  },
  {
    "text": "lambda function and you can do a lot",
    "start": "37260",
    "end": "39180"
  },
  {
    "text": "with just one lambda function sometimes",
    "start": "39180",
    "end": "41700"
  },
  {
    "text": "however your application requires more",
    "start": "41700",
    "end": "44850"
  },
  {
    "text": "than one function there are many",
    "start": "44850",
    "end": "46260"
  },
  {
    "text": "combinations and patterns of two or",
    "start": "46260",
    "end": "48480"
  },
  {
    "text": "three functions for example you may want",
    "start": "48480",
    "end": "51059"
  },
  {
    "text": "a second function to always follow a",
    "start": "51059",
    "end": "52710"
  },
  {
    "text": "first and only run if and when the first",
    "start": "52710",
    "end": "55739"
  },
  {
    "text": "succeeds you may want to execute two",
    "start": "55739",
    "end": "58050"
  },
  {
    "text": "functions in parallel and feed the",
    "start": "58050",
    "end": "59460"
  },
  {
    "text": "combined results into a third or maybe",
    "start": "59460",
    "end": "61710"
  },
  {
    "text": "you would like to choose between two",
    "start": "61710",
    "end": "63059"
  },
  {
    "text": "functions based on the output of a first",
    "start": "63059",
    "end": "65189"
  },
  {
    "text": "function you could write a lot of code",
    "start": "65189",
    "end": "67830"
  },
  {
    "text": "to choreograph the interaction of your",
    "start": "67830",
    "end": "69299"
  },
  {
    "text": "macro services or you could use AWS step",
    "start": "69299",
    "end": "72299"
  },
  {
    "text": "functions to coordinate your workflows",
    "start": "72299",
    "end": "74090"
  },
  {
    "text": "it's easy to get started with step",
    "start": "74090",
    "end": "76320"
  },
  {
    "text": "functions you declaratively define your",
    "start": "76320",
    "end": "78659"
  },
  {
    "text": "workflows in the form of a state machine",
    "start": "78659",
    "end": "80600"
  },
  {
    "text": "step function visualizes your workflow",
    "start": "80600",
    "end": "83549"
  },
  {
    "text": "including tasks performed in sequence or",
    "start": "83549",
    "end": "86040"
  },
  {
    "text": "in parallel branching logic based on",
    "start": "86040",
    "end": "88560"
  },
  {
    "text": "task results or other input and timers",
    "start": "88560",
    "end": "90810"
  },
  {
    "text": "step functions manages each execution",
    "start": "90810",
    "end": "93200"
  },
  {
    "text": "keeping track of each step in a central",
    "start": "93200",
    "end": "95520"
  },
  {
    "text": "audit trail and managing task timeouts",
    "start": "95520",
    "end": "97979"
  },
  {
    "text": "retries and error messages with built in",
    "start": "97979",
    "end": "101400"
  },
  {
    "text": "try catch finally patterns some examples",
    "start": "101400",
    "end": "105869"
  },
  {
    "text": "of the kinds of repetitive processes",
    "start": "105869",
    "end": "107220"
  },
  {
    "text": "that you can reliably automate with step",
    "start": "107220",
    "end": "108840"
  },
  {
    "text": "functions include active synchronization",
    "start": "108840",
    "end": "111570"
  },
  {
    "text": "of two Amazon s3 buckets requesting a",
    "start": "111570",
    "end": "114960"
  },
  {
    "text": "human approval by email and waiting till",
    "start": "114960",
    "end": "117030"
  },
  {
    "text": "the authorized person responds before",
    "start": "117030",
    "end": "118890"
  },
  {
    "text": "continuing with the workflow image",
    "start": "118890",
    "end": "120659"
  },
  {
    "text": "processing of photos creating a",
    "start": "120659",
    "end": "122189"
  },
  {
    "text": "thumbnail and tagging image features",
    "start": "122189",
    "end": "123840"
  },
  {
    "text": "using Amazon recognition in parallel",
    "start": "123840",
    "end": "126320"
  },
  {
    "text": "step functions helps increase your",
    "start": "126320",
    "end": "128940"
  },
  {
    "text": "productive time spent on business logic",
    "start": "128940",
    "end": "130920"
  },
  {
    "text": "instead of plumbing",
    "start": "130920",
    "end": "132660"
  },
  {
    "text": "makes your applications more agile and",
    "start": "132660",
    "end": "134730"
  },
  {
    "text": "provides resilience at scale learn more",
    "start": "134730",
    "end": "137640"
  },
  {
    "text": "about AWS step functions by visiting our",
    "start": "137640",
    "end": "140220"
  },
  {
    "text": "console today",
    "start": "140220",
    "end": "141710"
  },
  {
    "text": "[Music]",
    "start": "141710",
    "end": "148870"
  }
]