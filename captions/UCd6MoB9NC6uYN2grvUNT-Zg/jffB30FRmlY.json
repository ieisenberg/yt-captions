[
  {
    "text": "[Music]",
    "start": "15160",
    "end": "18510"
  },
  {
    "text": "you ready okay we're going to get started I'm told that uh we're starting",
    "start": "21840",
    "end": "27119"
  },
  {
    "text": "late because of the keynote but that we don't have to cut short and the next session will be regular time they're cutting on lunch so thank you for coming",
    "start": "27119",
    "end": "34920"
  },
  {
    "text": "here uh how many people uh were at my uh talk yesterday the overview",
    "start": "34920",
    "end": "40680"
  },
  {
    "text": "talk wow and you came back for more I'm impressed um uh one thing I found",
    "start": "40680",
    "end": "47719"
  },
  {
    "text": "interesting uh yesterday was a few people said they like my talk which I found really interesting but my my real",
    "start": "47719",
    "end": "53960"
  },
  {
    "text": "point was I asked them oh really if you liked it would you mind filling out a survey and people said survey I haven't filled out a survey all day",
    "start": "53960",
    "end": "61120"
  },
  {
    "text": "um we do use those to figure out whether the content we're giving you is good and",
    "start": "61120",
    "end": "66640"
  },
  {
    "text": "whether if we do this again we should continue with that kind of content so those surveys are useful and if you",
    "start": "66640",
    "end": "72320"
  },
  {
    "text": "don't how many people don't know how to do a survey okay there's a on the back of",
    "start": "72320",
    "end": "77799"
  },
  {
    "text": "your badge there's a a website address for um downloading a tool um and the",
    "start": "77799",
    "end": "84360"
  },
  {
    "text": "guide also tells you how to do it but it's all online and it's fairly painless and we would appreciate if you fill",
    "start": "84360",
    "end": "90600"
  },
  {
    "text": "those out uh so um from my I have a few more",
    "start": "90600",
    "end": "96880"
  },
  {
    "text": "benchmarking questions um I did this yesterday and it just helps me gauge the uh people who are putting up with me",
    "start": "96880",
    "end": "103320"
  },
  {
    "text": "today uh how many people have ever run a benchmark raise your hand okay much more than yesterday okay",
    "start": "103320",
    "end": "110719"
  },
  {
    "text": "how many people have run a benchmark in the last year almost everyone so that means",
    "start": "110719",
    "end": "115880"
  },
  {
    "text": "you're active how many people have run a benchmark in the last month",
    "start": "115880",
    "end": "121039"
  },
  {
    "text": "okay Slackers oh good good okay last week how many are running a benchmark as",
    "start": "121039",
    "end": "127600"
  },
  {
    "text": "we speak okay I am I plenty of that that's",
    "start": "127600",
    "end": "133879"
  },
  {
    "text": "that's good great okay um I am not going to go through yesterday I did a practical demonstration of benchmarking",
    "start": "133879",
    "end": "140400"
  },
  {
    "text": "to illustrate a few important points I am not going to do that but the reason I'm bringing this up is I have some",
    "start": "140400",
    "end": "145440"
  },
  {
    "text": "really good dark chocolate M&M's and after the talk if you'd like some I don't want to car a pound and a half an",
    "start": "145440",
    "end": "150800"
  },
  {
    "text": "M&M's back uh so I would appreciate it if you would help me out by getting rid of some eating some of these it's a a a",
    "start": "150800",
    "end": "158200"
  },
  {
    "text": "uh dispenser that means no one else has touched them so you get a handful and it's good um The Benchmark was the the",
    "start": "158200",
    "end": "164159"
  },
  {
    "text": "the question I started with because one of the important things about benchmarking is if you want to do it well you have to have a precise question",
    "start": "164159",
    "end": "169959"
  },
  {
    "text": "you're trying to answer my precise question yesterday was how many M&Ms are in here uh and I went through a couple",
    "start": "169959",
    "end": "176360"
  },
  {
    "text": "different ways you could answer that you could count them one by one you could use measuring cups uh you could use two",
    "start": "176360",
    "end": "181959"
  },
  {
    "text": "measuring cups to do the least amount of measurements but that introduces error that that sort of idea uh the the uh the",
    "start": "181959",
    "end": "188519"
  },
  {
    "text": "goal for today is for me to give you some practical tips based on my experience",
    "start": "188519",
    "end": "194360"
  },
  {
    "text": "doing benchmarking uh on AWS I'll give you some um uh I'll go over some results",
    "start": "194360",
    "end": "199840"
  },
  {
    "text": "that I've measured recently uh and give you some tips if you are going to Benchmark on how to do it I tried to",
    "start": "199840",
    "end": "205879"
  },
  {
    "text": "strike the right level of balance with giving you actual data and giving you tips and there's a little bit of",
    "start": "205879",
    "end": "211799"
  },
  {
    "text": "overview material there's a very small amount of overlap with the the content I did yesterday um I'll use a couple",
    "start": "211799",
    "end": "218200"
  },
  {
    "text": "slides that have the similar data but I'll go into more detail about that data and how I got it um my the timing that I",
    "start": "218200",
    "end": "224519"
  },
  {
    "text": "have for this is fairly good so if you have a burning question while we're going and that question seems like it",
    "start": "224519",
    "end": "231239"
  },
  {
    "text": "won't get me off track too far go ahead and throw up your hand if I'm if I'm on a roll and I want to take it at the end",
    "start": "231239",
    "end": "237319"
  },
  {
    "text": "please hold that question till the end and then um I will take questions at the end and if we're tied on time um I will",
    "start": "237319",
    "end": "243799"
  },
  {
    "text": "take them outside or at lunch we can I'll I don't know how you would find me at lunch maybe I'll bring the M&M's and",
    "start": "243799",
    "end": "249439"
  },
  {
    "text": "hold it up or something like that okay so enough of that uh so there are lots of questions that I hear um and come",
    "start": "249439",
    "end": "255599"
  },
  {
    "text": "across in AWS uh um some of them are General like how do I find a bottleneck",
    "start": "255599",
    "end": "262040"
  },
  {
    "text": "uh some of them are very specific uh with Dynamo DB for instance we have a very interesting statement that Dynamo",
    "start": "262040",
    "end": "269120"
  },
  {
    "text": "DB provide single millisecond service side latency on average no we don't say on average typically singled digit",
    "start": "269120",
    "end": "276120"
  },
  {
    "text": "service millisecond service side latency the real question is what does that mean for my clients and uh so uh that's one",
    "start": "276120",
    "end": "283800"
  },
  {
    "text": "I've heard um what Ami should I use that's a question people should ask more that they don't uh and what instance",
    "start": "283800",
    "end": "290280"
  },
  {
    "text": "will you know give me the best cost performance uh another one for for perspective customers is how will my app",
    "start": "290280",
    "end": "297240"
  },
  {
    "text": "um in the data center um run or on premises run on AWS I do have one",
    "start": "297240",
    "end": "303919"
  },
  {
    "text": "answer that I'm absolutely certain is completely appropriate for all of these",
    "start": "303919",
    "end": "309720"
  },
  {
    "text": "questions and that is it depends I made this point yesterday and that it may sound like I'm being flippant but the",
    "start": "309720",
    "end": "316320"
  },
  {
    "text": "reality is most questions that that I see are rarely precisely formed enough",
    "start": "316320",
    "end": "321400"
  },
  {
    "text": "that you should give a precise answer the Precision of your answer should be directly proportional to the Precision",
    "start": "321400",
    "end": "327880"
  },
  {
    "text": "of the question so if you get a general question the first thing you have to do you can say independ it depends if you",
    "start": "327880",
    "end": "333800"
  },
  {
    "text": "want or you can say it in your head and then ask a bunch of qualifying questions because in order to give an answer that",
    "start": "333800",
    "end": "339360"
  },
  {
    "text": "really matters you have to know more about what I like to answer with things that can be measured and when you're",
    "start": "339360",
    "end": "345680"
  },
  {
    "text": "going to Benchmark uh you really want to have um specific questions to answer um",
    "start": "345680",
    "end": "351400"
  },
  {
    "text": "so I thought I would start with some generalized Pearls of Wisdom maybe it's uh egotistical of me to think they're",
    "start": "351400",
    "end": "358000"
  },
  {
    "text": "pearls I think they're useful um the first one is simplify your tests um I",
    "start": "358000",
    "end": "363440"
  },
  {
    "text": "have an architecture diagram that's sort of has all the best bits and and services strung together in a very",
    "start": "363440",
    "end": "369479"
  },
  {
    "text": "elegant architecture but when you look at that diagram it's pretty darn complicated and typically when you're",
    "start": "369479",
    "end": "374800"
  },
  {
    "text": "trying to Benchmark you're either trying to Baseline something or you're trying to improve it if you're trying to",
    "start": "374800",
    "end": "380120"
  },
  {
    "text": "improve it it's pretty complicated when you do the whole thing at once and it sometimes really helps to break it down",
    "start": "380120",
    "end": "385440"
  },
  {
    "text": "into component parts so simplifying tests is not specific to aw us but I typically find it helps a lot another",
    "start": "385440",
    "end": "393039"
  },
  {
    "text": "thing from years of experience save all of your log files in S3 uh it's really",
    "start": "393039",
    "end": "398240"
  },
  {
    "text": "easy to do and I can't tell you how many times I am asked to run a test where I I",
    "start": "398240",
    "end": "403880"
  },
  {
    "text": "know I've run something like this before wait a minute I've got logs that I can go back and look at or that you come up",
    "start": "403880",
    "end": "409960"
  },
  {
    "text": "with some uh interesting phenomenon and you need more data and you realize you already have that data keeping logs",
    "start": "409960",
    "end": "416240"
  },
  {
    "text": "around becomes really useful uh beyond that being able to do",
    "start": "416240",
    "end": "421360"
  },
  {
    "text": "queries uh particularly if you're doing historical analysis is really useful I",
    "start": "421360",
    "end": "426639"
  },
  {
    "text": "tend to put all of my results in an RDS database and I have a schema that I've worked out over the years that",
    "start": "426639",
    "end": "431919"
  },
  {
    "text": "essentially generalizes experiments and it allows you to Bunch different experiments into sort of a grand",
    "start": "431919",
    "end": "437479"
  },
  {
    "text": "experiment and do variance and everything but I can't tell you how many times being able to just do a simple SQL query or even dump things into a",
    "start": "437479",
    "end": "444280"
  },
  {
    "text": "spreadsheet and look over results can let you produce impressive graphs when someone says what's our uh standard",
    "start": "444280",
    "end": "450440"
  },
  {
    "text": "deviation over the past year and and they think they're going to make you go off and run tests and you go off and just run a query and that's that's a lot",
    "start": "450440",
    "end": "457120"
  },
  {
    "text": "more useful uh you want to um Monitor and",
    "start": "457120",
    "end": "462240"
  },
  {
    "text": "this isn't in AWS cloudwatch has an amazing a number uh of metrics that you",
    "start": "462240",
    "end": "468960"
  },
  {
    "text": "can use uh but one of the things you want to watch for is that you're not measuring errors and there are all sorts",
    "start": "468960",
    "end": "475360"
  },
  {
    "text": "of errors that can happen whether they're application errors whether you're hitting hitting throttle throttling limits and the last I won't",
    "start": "475360",
    "end": "483039"
  },
  {
    "text": "demonstrate but you know the uh hitting your forehead I can't tell you how many times I've done that and maybe that's",
    "start": "483039",
    "end": "489199"
  },
  {
    "text": "something about me I should work on but where you you suddenly look at data and you say oh that's why that's happening",
    "start": "489199",
    "end": "495720"
  },
  {
    "text": "and having monitoring errors is really important uh or monitoring in general um I I'll have some special",
    "start": "495720",
    "end": "503120"
  },
  {
    "text": "comments about measuring provision Services the main reason why is provision services are you're you're",
    "start": "503120",
    "end": "508720"
  },
  {
    "text": "pred declaring how much uh uh capacity that you want and in order for us to ensure that you get the capacity we put",
    "start": "508720",
    "end": "515479"
  },
  {
    "text": "in limits to make sure if you go over your capacity that we throttle you in some way the problem is that if you",
    "start": "515479",
    "end": "522039"
  },
  {
    "text": "don't realize you're going over that and you're hitting a throttling limit you may have some extra latency that you",
    "start": "522039",
    "end": "527519"
  },
  {
    "text": "hadn't thought about uh be sure you're not measuring your tests this this may sound vague but",
    "start": "527519",
    "end": "534120"
  },
  {
    "text": "I've seen a lot of instances where where people had either uh tests that were built by by someone else or their own",
    "start": "534120",
    "end": "540600"
  },
  {
    "text": "test that had their own problems if you're trying to get answers the last thing you want is for the tools that you're using to complicate those answers",
    "start": "540600",
    "end": "547920"
  },
  {
    "text": "so you really have to trust your tools um automate and use good Amis I don't",
    "start": "547920",
    "end": "553040"
  },
  {
    "text": "really need to say a whole lot about automate but I will say some more about using good",
    "start": "553040",
    "end": "558440"
  },
  {
    "text": "Amis uh I I Ed this slide this is from yesterday but I think this is an important point I want to make not all",
    "start": "558440",
    "end": "564720"
  },
  {
    "text": "amies are the same there are very clear uh guidance on there is very clear",
    "start": "564720",
    "end": "569800"
  },
  {
    "text": "guidance on AWS around uh using uh precaution and using amies most of it",
    "start": "569800",
    "end": "575680"
  },
  {
    "text": "centers around security but I also have to tell you from a performance perspective there are public amies out",
    "start": "575680",
    "end": "581800"
  },
  {
    "text": "there that are not very good and when I mean not very good they don't perform well um typically um my investigation",
    "start": "581800",
    "end": "588320"
  },
  {
    "text": "has found most of these have really old kernels this particular test these were all run on uh M24 XLS uh the exact same",
    "start": "588320",
    "end": "597399"
  },
  {
    "text": "test uh CPU test was used it was a relatively simple test uh no parameter",
    "start": "597399",
    "end": "602680"
  },
  {
    "text": "settings that were different the first four results top to going from top to bottom are all running on the same um",
    "start": "602680",
    "end": "609640"
  },
  {
    "text": "Centos release 5.4 um the bottom two are U are one is an AWS Ami and the the",
    "start": "609640",
    "end": "617760"
  },
  {
    "text": "second one is the official Ubuntu 12.4 these two have what I would call good results and I and I mean good because",
    "start": "617760",
    "end": "624160"
  },
  {
    "text": "they were reproducible they're reliable and they they make sense for me when I when I run them on other inst es these",
    "start": "624160",
    "end": "630360"
  },
  {
    "text": "other three did not now these numbers don't look that bad but if you look at the relative standard deviation uh if",
    "start": "630360",
    "end": "636120"
  },
  {
    "text": "you're not familiar with relative standard deviation I like to use that rather than standard deviation because",
    "start": "636120",
    "end": "641680"
  },
  {
    "text": "it's the uh average divided by standard deviation so it gives you something in units that are percentages so this says",
    "start": "641680",
    "end": "649120"
  },
  {
    "text": "that the relative standard deviation was up to almost 60% meaning on on some of",
    "start": "649120",
    "end": "655720"
  },
  {
    "text": "the poorest performing amies I would see results ranging from 9 up to 20 uh and",
    "start": "655720",
    "end": "663200"
  },
  {
    "text": "and that's running just three tests so um be very careful if you're trying to do performance work that you actually",
    "start": "663200",
    "end": "669200"
  },
  {
    "text": "start with an Ami that you can trust if it's not one that that um that you built yourself then you should probably try to",
    "start": "669200",
    "end": "676360"
  },
  {
    "text": "run some tests to to see if it's uh if it is part of your issue um there are",
    "start": "676360",
    "end": "681800"
  },
  {
    "text": "really three ways that you can use Benchmark results and uh the the recommended way uh is to use benchmarks",
    "start": "681800",
    "end": "688480"
  },
  {
    "text": "that are as close to application as possible you can also run standard benchmarks and you can use published",
    "start": "688480",
    "end": "693920"
  },
  {
    "text": "results I'm going to really concentrate on these first two um I spent a lot of time yesterday in the overview talk",
    "start": "693920",
    "end": "699680"
  },
  {
    "text": "talking about using published results this is that diagram I was talking about uh this is uh a a sketch",
    "start": "699680",
    "end": "707440"
  },
  {
    "text": "of a well-formed AWS taking advantage of security groups and availability zones",
    "start": "707440",
    "end": "712800"
  },
  {
    "text": "and lots of services but if you look at this diagram and you think about where you know bottlenecks could occur or",
    "start": "712800",
    "end": "718720"
  },
  {
    "text": "where design um where uh latency time could be spent um there are a lot there's a lot of",
    "start": "718720",
    "end": "724440"
  },
  {
    "text": "surface area here to try and test um my first approach to this diagram would be to simplify it and eliminate um the some",
    "start": "724440",
    "end": "732519"
  },
  {
    "text": "of the peripheral uh uh services so that you get down to the things that are most",
    "start": "732519",
    "end": "738600"
  },
  {
    "text": "likely to be major contributors to for instance if you're doing end to-end testing page load time uh why well",
    "start": "738600",
    "end": "747040"
  },
  {
    "text": "certainly things that have to go to disk are going to take longer than things that are traveling at the speed of light and so anything that touches a disc is a",
    "start": "747040",
    "end": "753120"
  },
  {
    "text": "likely um thing to measure anything that has cues or or could have queuing or could involve locks is a likely thing to",
    "start": "753120",
    "end": "760440"
  },
  {
    "text": "look at um so I'm going to go go into a little more detail about how you would Benchmark your own application it sounds",
    "start": "760440",
    "end": "766959"
  },
  {
    "text": "simple but if you've ever thought about okay this app has been built we've never really run a benchmark how where do we",
    "start": "766959",
    "end": "772680"
  },
  {
    "text": "start um I would always start with choosing the workloads and how you choose a workload is um there are a",
    "start": "772680",
    "end": "780040"
  },
  {
    "text": "variety of choices you could choose the features that are most important you could choose the features that are used",
    "start": "780040",
    "end": "785240"
  },
  {
    "text": "most often you could choose the features that are most popular one of my favorites you could choose the ones for",
    "start": "785240",
    "end": "790839"
  },
  {
    "text": "for which you get the most complaints you could you could get the ones that the person who has business control over",
    "start": "790839",
    "end": "797199"
  },
  {
    "text": "the application um uses most often therefore the most important person with",
    "start": "797199",
    "end": "802240"
  },
  {
    "text": "respect to the project you want to make them happy because then nothing else matters um or you could from from data",
    "start": "802240",
    "end": "808839"
  },
  {
    "text": "you have look at the worst performing but a workload is a subset of all the features and functions and it's",
    "start": "808839",
    "end": "814800"
  },
  {
    "text": "typically not as simple as we're just going to run you know sign in a new user it's going to be a combination of sign",
    "start": "814800",
    "end": "821320"
  },
  {
    "text": "in a use a new user and authenticated users logging in and uh say in a web",
    "start": "821320",
    "end": "827680"
  },
  {
    "text": "environment um catalog lookup or order lookup or something like that that's a workload mix and uh it usually helps to",
    "start": "827680",
    "end": "834680"
  },
  {
    "text": "Define that mix with a ratio so that you say typically at any one point in time",
    "start": "834680",
    "end": "839800"
  },
  {
    "text": "there are 5% of this 10% of that and so on now this sounds like a lot of trouble but what remember my earlier point that",
    "start": "839800",
    "end": "846600"
  },
  {
    "text": "you you need precise questions in order to give precise answers getting to this level of precision gives you something",
    "start": "846600",
    "end": "852320"
  },
  {
    "text": "you can measure and the the assumptions may be all wrong you could get the workload mix completely wrong but it's",
    "start": "852320",
    "end": "859199"
  },
  {
    "text": "easy to go back and change a workload mix and then run the test again having this format makes it",
    "start": "859199",
    "end": "864639"
  },
  {
    "text": "easy now I like to think of the workload before setting targets and it's really",
    "start": "864639",
    "end": "869720"
  },
  {
    "text": "important you set targets uh yesterday I talked about this too setting targets is really important from for two reasons um",
    "start": "869720",
    "end": "876480"
  },
  {
    "text": "I have a slide about that so I won't go into that um you need to know when to stop Etc um if no target exists that I",
    "start": "876480",
    "end": "883639"
  },
  {
    "text": "hear this question a lot well how do I know what targets to set you could just make one up doing this process is always",
    "start": "883639",
    "end": "890680"
  },
  {
    "text": "iterative so you set one say boy that was really wrong I said you know single millisecond latency and there's no way I",
    "start": "890680",
    "end": "896639"
  },
  {
    "text": "can load a page in single me that was wrong let's get something that's closer to real or you can use measure whatever",
    "start": "896639",
    "end": "903360"
  },
  {
    "text": "it currently is now and say this may not be what I want but I'm going to just set this as my target make sure I run tests",
    "start": "903360",
    "end": "909360"
  },
  {
    "text": "that can repeatedly hit this Target and then I can work on improving it you",
    "start": "909360",
    "end": "914399"
  },
  {
    "text": "can't tune something that you can't generate predictable load for so setting predictable load is really important um",
    "start": "914399",
    "end": "921560"
  },
  {
    "text": "baselines are really important that's the whole analogy with measuring M&M's the Baseline for instance for estimating",
    "start": "921560",
    "end": "927279"
  },
  {
    "text": "might be to fill a 2 ooun cup count how many in here and then extrapolate how many 2 ooun cups fit into this and you",
    "start": "927279",
    "end": "934199"
  },
  {
    "text": "can get a pretty good estimate fairly close by having a baseline of how many M&Ms are in a cup um you can look for uh",
    "start": "934199",
    "end": "941480"
  },
  {
    "text": "for um targets that someone else uses this is a common practice in web uh apps",
    "start": "941480",
    "end": "947160"
  },
  {
    "text": "I've found is that people go around and say well what does uh Target say about what their client latency should be or",
    "start": "947160",
    "end": "953920"
  },
  {
    "text": "there are lots of empirical studies I think there have been some blog posts about what's a good you know response",
    "start": "953920",
    "end": "959680"
  },
  {
    "text": "time for users uh it's almost I'll know it when I see it kind of thing there have been lots of detailed studies that",
    "start": "959680",
    "end": "965680"
  },
  {
    "text": "show you know a half second of latency can mean the difference between people Banning in a page and not my point here",
    "start": "965680",
    "end": "972079"
  },
  {
    "text": "is that you really need to set targets and if you even if you have to guess you iterate you set a Target you see if",
    "start": "972079",
    "end": "977800"
  },
  {
    "text": "that's relevant and then you go from there uh I want to bring up Copus for for an important reason one of the",
    "start": "977800",
    "end": "984519"
  },
  {
    "text": "mistakes I've seen people make is by not having targets is they end up in this endless loop of never getting done they",
    "start": "984519",
    "end": "990959"
  },
  {
    "text": "never get done because they don't have targets so if their only goal is make it faster you can always make it faster and",
    "start": "990959",
    "end": "997079"
  },
  {
    "text": "unless there are some of you in this room who do benchmarking for fun and you know who you are and we can meet",
    "start": "997079",
    "end": "1002720"
  },
  {
    "text": "separately and have a special meeting um you really want to do the least amount",
    "start": "1002720",
    "end": "1008040"
  },
  {
    "text": "of experiments to get the most accurate data as quickly as possible in order to do that you need to know when you're",
    "start": "1008040",
    "end": "1014160"
  },
  {
    "text": "done very other very important second Point sometimes it's it's impossible to",
    "start": "1014160",
    "end": "1019920"
  },
  {
    "text": "hit your goal and if you don't know that you may struggle for months to try and",
    "start": "1019920",
    "end": "1025360"
  },
  {
    "text": "tune something that can't be tuned to where you're trying to go sometimes you have to throw things away and rewrite",
    "start": "1025360",
    "end": "1031319"
  },
  {
    "text": "and having targets and keeping track of how much time you're spending on trying to get to that Target can make the",
    "start": "1031319",
    "end": "1036880"
  },
  {
    "text": "difference between you know a a one-year Death March that never results in success and a a quick turnaround where",
    "start": "1036880",
    "end": "1043400"
  },
  {
    "text": "you realize okay architecture's got to change move on so here's an example that",
    "start": "1043400",
    "end": "1048520"
  },
  {
    "text": "I would say is reasonably good in terms of setting Precision for this mythical web app that I've simplified I'm going",
    "start": "1048520",
    "end": "1054919"
  },
  {
    "text": "to say my total population of users uh on average is 10 million users the",
    "start": "1054919",
    "end": "1060360"
  },
  {
    "text": "request rate is a th000 requests per second on average but I also want to think about what Peak is now there's",
    "start": "1060360",
    "end": "1066919"
  },
  {
    "text": "often a debate do you tune for Peak or do you tune for uh do you tune for",
    "start": "1066919",
    "end": "1072240"
  },
  {
    "text": "average um now that I've taught you the two magic words what's the right answer",
    "start": "1072240",
    "end": "1077679"
  },
  {
    "text": "dep it depends it depends on whether you're okay with having idle capacity which means when you tune for Peak",
    "start": "1077679",
    "end": "1084039"
  },
  {
    "text": "you're going to have capacity sitting around or if you're using something like autoscaling where that capacity",
    "start": "1084039",
    "end": "1089760"
  },
  {
    "text": "magically goes away great you can you can you can tune for Peak but use autoscaling to make sure you're not",
    "start": "1089760",
    "end": "1095120"
  },
  {
    "text": "paying for Peak the whole time uh but it's it's usually not simple enough to",
    "start": "1095120",
    "end": "1100480"
  },
  {
    "text": "say I'm just going to Target 1,000 uh another piece of advice from years of doing this um even if you've done a",
    "start": "1100480",
    "end": "1107480"
  },
  {
    "text": "great job of archite architecting a system and you think it's really scalable you really have to have",
    "start": "1107480",
    "end": "1112600"
  },
  {
    "text": "defensive measures what do I mean by that let's say that you set a f 5,000 as",
    "start": "1112600",
    "end": "1118240"
  },
  {
    "text": "your Peak what happens if you get over 5,000 do you want your app to fall over there are always has to be some",
    "start": "1118240",
    "end": "1125559"
  },
  {
    "text": "limit and you have to decide what the behavior is at that limit do you want customers to be turned away another",
    "start": "1125559",
    "end": "1132440"
  },
  {
    "text": "piece of advice if you simply say we're busy right now come back later what do you think the average user is going to",
    "start": "1132440",
    "end": "1138120"
  },
  {
    "text": "do again again again I've actually seen",
    "start": "1138120",
    "end": "1143240"
  },
  {
    "text": "this happen in production where an application had a bottleneck and we started throwing please come back",
    "start": "1143240",
    "end": "1148880"
  },
  {
    "text": "later the request rate tripled because everyone said well",
    "start": "1148880",
    "end": "1153960"
  },
  {
    "text": "later's now okay okay okay um so what what I've done is built heris into how",
    "start": "1153960",
    "end": "1159880"
  },
  {
    "text": "you tell someone to come back you could say come back in 4 minutes 37 seconds",
    "start": "1159880",
    "end": "1165360"
  },
  {
    "text": "you could completely make up that number or you could make up that number number based on Q times or other things but",
    "start": "1165360",
    "end": "1170880"
  },
  {
    "text": "giving someone something better than just try again right now can help defer the impact of what happens when you get",
    "start": "1170880",
    "end": "1177080"
  },
  {
    "text": "more than you can handle but it's really important to to to prepare for that even in the most scalable architectures you",
    "start": "1177080",
    "end": "1183039"
  },
  {
    "text": "can always hit some sort of limit and if you're worried about the the end users experience think about how you handle",
    "start": "1183039",
    "end": "1189880"
  },
  {
    "text": "that uh so um you also have to think about concurrency uh in terms of how on",
    "start": "1189880",
    "end": "1195559"
  },
  {
    "text": "average how many users are on at once and what what's the peak number of users I want to handle at once this is really",
    "start": "1195559",
    "end": "1201320"
  },
  {
    "text": "important because this 50,000 Peak users at once is where you start saying okay after this here is where we start",
    "start": "1201320",
    "end": "1207559"
  },
  {
    "text": "telling customers something else to do now here's my example of a a workload",
    "start": "1207559",
    "end": "1212840"
  },
  {
    "text": "transaction mix where I have the um the mix ratio what percentage of these",
    "start": "1212840",
    "end": "1218960"
  },
  {
    "text": "different workloads are happening at a given point in time and the 95th percentile or you can pick 90 you can",
    "start": "1218960",
    "end": "1225000"
  },
  {
    "text": "pick 95 don't use average please I could ask the audience what's wrong with averages and probably a lot",
    "start": "1225000",
    "end": "1231520"
  },
  {
    "text": "of you since your experience could do it but I'll I'll just fast forward the problem with averages is you could have",
    "start": "1231520",
    "end": "1237760"
  },
  {
    "text": "the average of one and 100 is 50 and a half right the problem is if you have a",
    "start": "1237760",
    "end": "1243679"
  },
  {
    "text": "bodal App application where people either get one or they get 100 and 100",
    "start": "1243679",
    "end": "1249000"
  },
  {
    "text": "is really bad that means 50% of your people are really happy and 50% of your",
    "start": "1249000",
    "end": "1254280"
  },
  {
    "text": "people are really pissed and and average doesn't cut it if you care about how the people using your systems are getting",
    "start": "1254280",
    "end": "1260320"
  },
  {
    "text": "what experience they're getting",
    "start": "1260320",
    "end": "1263600"
  },
  {
    "text": "yes well uh the the question was why have uh request rate and Peak user you",
    "start": "1267200",
    "end": "1274320"
  },
  {
    "text": "could apply this request weight at Peak or you could apply this request weight",
    "start": "1274320",
    "end": "1279440"
  },
  {
    "text": "you know at at average right um the the the important thing is the combination",
    "start": "1279440",
    "end": "1284880"
  },
  {
    "text": "of this this workload mix and the request rate you could do",
    "start": "1284880",
    "end": "1290960"
  },
  {
    "text": "either okay uh quick trivia question who knows what this",
    "start": "1290960",
    "end": "1296120"
  },
  {
    "text": "is what's that on the way to La it is on the way",
    "start": "1296120",
    "end": "1301559"
  },
  {
    "text": "to it's within 60 miles of here I will give you another hint it's in Prim",
    "start": "1301559",
    "end": "1306679"
  },
  {
    "text": "Nevada that's right it's a generator and I'm talking about load generation so I thought I thought it was",
    "start": "1306679",
    "end": "1313159"
  },
  {
    "text": "cool I drove by that the first time I said wait a minute did I get into Area 51 is this it's really the these are the",
    "start": "1313159",
    "end": "1319520"
  },
  {
    "text": "collectors around all the ground are are mirrors and the mirrors Shine On The Collectors there's water turns into",
    "start": "1319520",
    "end": "1325200"
  },
  {
    "text": "steam you know we can now run our hair dryers um oh my pressure was over three",
    "start": "1325200",
    "end": "1331840"
  },
  {
    "text": "milliseconds um um so how to generate load I have to tell you that relying on",
    "start": "1331840",
    "end": "1337200"
  },
  {
    "text": "humans is really unpredictable if you need repeatable tests don't use humans um if you need some lightweight test uh",
    "start": "1337200",
    "end": "1344400"
  },
  {
    "text": "using something like um uh a Mechanical Turk is is a good idea you can have",
    "start": "1344400",
    "end": "1350240"
  },
  {
    "text": "lightweight scripts um but it's really not good for load testing because humans just aren't very predictable you can use",
    "start": "1350240",
    "end": "1355760"
  },
  {
    "text": "synthetic load and there are lots of ways you can do that in the web environment jmeter suspens or open",
    "start": "1355760",
    "end": "1360960"
  },
  {
    "text": "source there are lots of commercial tools but doing good performance testing starts with generating good load and",
    "start": "1360960",
    "end": "1367919"
  },
  {
    "text": "good load means it's something you can both set how much load you're getting you can set what type of load and it's",
    "start": "1367919",
    "end": "1374279"
  },
  {
    "text": "instrumented in a way that matters um you could write your own I can tell you",
    "start": "1374279",
    "end": "1379480"
  },
  {
    "text": "having done this oh more than 10 times um it gets pretty easy to write load",
    "start": "1379480",
    "end": "1384520"
  },
  {
    "text": "generators all the time but it's really a hassle and there are plenty of good tools out there so in general you should be able to find something whether it's",
    "start": "1384520",
    "end": "1390760"
  },
  {
    "text": "built into a benchmark that you use whether you rip it off from a benchmark that already exists or whether you write",
    "start": "1390760",
    "end": "1395840"
  },
  {
    "text": "your own um I would I would prefer to start with something that works so uh how to measure there are lots of ways to",
    "start": "1395840",
    "end": "1402279"
  },
  {
    "text": "measure the best thing is to have metrics built into your load generator you can um another thing people may not",
    "start": "1402279",
    "end": "1407799"
  },
  {
    "text": "realize is you can add your own metrics into cloudwatch so you can get a combination of cloudwatch infrastructure",
    "start": "1407799",
    "end": "1414320"
  },
  {
    "text": "met um metrics and your own application metrics which it's nice to see them all in one place rather than to either have",
    "start": "1414320",
    "end": "1420679"
  },
  {
    "text": "to cut and paste or you know look at side by-side",
    "start": "1420679",
    "end": "1425559"
  },
  {
    "text": "diagrams yes they are they are they really are helpful um please although",
    "start": "1426640",
    "end": "1432039"
  },
  {
    "text": "I'm not a statistician um if every you're going to report a number please don't just report average if you're",
    "start": "1432039",
    "end": "1438240"
  },
  {
    "text": "going going to report a a number report average and some measure of variability whether it's a percentile or whether",
    "start": "1438240",
    "end": "1444600"
  },
  {
    "text": "it's standard deviation average really doesn't mean much uh cloudwatch metrics I actually have a slide on that so I'll",
    "start": "1444600",
    "end": "1451360"
  },
  {
    "text": "I'll give you a little if you haven't been using it um adding instrumentation there are lots of ways to add instrumentation sometimes when it's code",
    "start": "1451360",
    "end": "1458360"
  },
  {
    "text": "that you own or code that you have access to Simply putting in debug statements that have a Tim stamp can",
    "start": "1458360",
    "end": "1464039"
  },
  {
    "text": "help you pinpoint especially when you're saying what the heck's going on here uh if you can't get the instrumentation",
    "start": "1464039",
    "end": "1470360"
  },
  {
    "text": "from the infrastructure or from the load generator sometimes you have to add it yourself and have add your own uh uh",
    "start": "1470360",
    "end": "1476919"
  },
  {
    "text": "debug statements um you can use a stopwatch I've actually had to do that in critical situations and it's crude",
    "start": "1476919",
    "end": "1483399"
  },
  {
    "text": "it's really hard to get precise but if you got nothing else okay it works um uh",
    "start": "1483399",
    "end": "1489399"
  },
  {
    "text": "you can use log files but I have to tell you log files have a problem uh this is a slide I used yesterday but I'm",
    "start": "1489399",
    "end": "1495679"
  },
  {
    "text": "bringing it in here for a point uh when before Dynamo ODB released I was asked to validate some of our performance",
    "start": "1495679",
    "end": "1501480"
  },
  {
    "text": "claims around it and one of the things I found having not used it before and and this was this is when it was brand new",
    "start": "1501480",
    "end": "1508159"
  },
  {
    "text": "was U initially I was setting my load generation to a certain level and I wasn't getting that load I knew that",
    "start": "1508159",
    "end": "1514159"
  },
  {
    "text": "meant a bottleneck I didn't know what the source of that was and I started doing some debugging with debug",
    "start": "1514159",
    "end": "1520080"
  },
  {
    "text": "statements and that sort of thing what I found was the default logging level for the SDK before it released um or right",
    "start": "1520080",
    "end": "1528120"
  },
  {
    "text": "when when it released was uh debug uh that meant that every statement was traced all of the packets were traced",
    "start": "1528120",
    "end": "1535240"
  },
  {
    "text": "there was a ton of stuff uh I I was lazy and to use the least number of clients I",
    "start": "1535240",
    "end": "1540679"
  },
  {
    "text": "was using cc2 uh 8X larges for my clients to generate I was I needed to",
    "start": "1540679",
    "end": "1546360"
  },
  {
    "text": "generate 100,000 requests per second so I needed some beef they have lots of processing units and that meant I could",
    "start": "1546360",
    "end": "1552919"
  },
  {
    "text": "run lots of threads but the problem when you run lots of threads and they're all trying to write to one file is this pict",
    "start": "1552919",
    "end": "1559360"
  },
  {
    "text": "um the the the orange line is what happens when the bottleneck become becomes the log file uh and one of the",
    "start": "1559360",
    "end": "1565960"
  },
  {
    "text": "main reason I have this graph is a lot of times when people start turning on logging um some people try to relate",
    "start": "1565960",
    "end": "1571640"
  },
  {
    "text": "this to physics and the Heisenberg Principle and the act of observing you know screws things up but the real issue",
    "start": "1571640",
    "end": "1577399"
  },
  {
    "text": "is that that you want to have the simplest environment you can you want to have the most realistic environment and",
    "start": "1577399",
    "end": "1582799"
  },
  {
    "text": "if you're running in production with debug great turn it on just realize that's going to behave differently than",
    "start": "1582799",
    "end": "1587840"
  },
  {
    "text": "running with sort of normal Trace u a little I won't call this a commercial but a lot of people don't",
    "start": "1587840",
    "end": "1594720"
  },
  {
    "text": "really take advantage of cloud watch Cloud watch is free at the I believe the five minute granularity and for a fee",
    "start": "1594720",
    "end": "1601000"
  },
  {
    "text": "you can get the one minute granularity uh but the the cool thing is it keeps 14 days of metrics even after you U",
    "start": "1601000",
    "end": "1608480"
  },
  {
    "text": "terminate an instance those metrics uh can stay around um they give you cool",
    "start": "1608480",
    "end": "1613799"
  },
  {
    "text": "graphing you can create alarms so that you can actually do things when you're concurrent users go above 50,000 and you",
    "start": "1613799",
    "end": "1620559"
  },
  {
    "text": "need to decide to turn on the please come back later heuristic mode um uh but",
    "start": "1620559",
    "end": "1625679"
  },
  {
    "text": "some tips when you start using it for the first time uh cloudwatch uses universal time and for instance this is",
    "start": "1625679",
    "end": "1633760"
  },
  {
    "text": "I this bit me okay so I'm admitting it the first time I was running instances in Us East I wasn't in Us East and I",
    "start": "1633760",
    "end": "1640399"
  },
  {
    "text": "wasn't realizing the time frames I was looking at were all wrong because cloudwatch was doing it in Us in UTC not",
    "start": "1640399",
    "end": "1647399"
  },
  {
    "text": "Us East or my time zone so that's something to watch um and also there are a number of",
    "start": "1647399",
    "end": "1653760"
  },
  {
    "text": "different stats types you can get min average count Etc you need to pay you may not notice that but it makes a huge",
    "start": "1653760",
    "end": "1659880"
  },
  {
    "text": "difference over what you're looking at whether you're looking at an average or a count or a Max or Min",
    "start": "1659880",
    "end": "1665480"
  },
  {
    "text": "yes it isn't and it's something I've had a conversation with that we should really add that so it's I know that the",
    "start": "1665480",
    "end": "1672399"
  },
  {
    "text": "the the cloudwatch team uh has my request and it's something working on okay someone mention",
    "start": "1672399",
    "end": "1680760"
  },
  {
    "text": "pardon no but I have friends so okay just the personal aside it turns",
    "start": "1680760",
    "end": "1688679"
  },
  {
    "text": "out that the the owner for cloudwatch um uh used to work for me at another company I was her first boss so she owes",
    "start": "1688679",
    "end": "1695820"
  },
  {
    "text": "[Laughter] me both uh uh so when you're doing end to",
    "start": "1695820",
    "end": "1702880"
  },
  {
    "text": "end testing um you need to I can't stress this enough you need really need to trust and understand the tool tools",
    "start": "1702880",
    "end": "1708360"
  },
  {
    "text": "that you're using because sometimes the tools you're using to test can have bottlenecks and you really don't want to measure the tools you're trying to",
    "start": "1708360",
    "end": "1714799"
  },
  {
    "text": "measure the system under test so make sure you really trust the tools that you're using um using realistic data is",
    "start": "1714799",
    "end": "1721200"
  },
  {
    "text": "a is a thing that's often missed what I mean by you realistic data in my previous example I said a user account",
    "start": "1721200",
    "end": "1727679"
  },
  {
    "text": "uh a population of 10 million what do you think happens if you're doing performance testing and you you have 10",
    "start": "1727679",
    "end": "1733519"
  },
  {
    "text": "sample users in your database and in production you have 10 million will you have answer to your test yes will that",
    "start": "1733519",
    "end": "1740200"
  },
  {
    "text": "answer be particularly useful no uh so people often miss making sure they have",
    "start": "1740200",
    "end": "1745799"
  },
  {
    "text": "realistic data both in scale and distribution what do I mean by distribution um take our example if we",
    "start": "1745799",
    "end": "1752120"
  },
  {
    "text": "have new users signing on and then we have uh signed in users um if your data",
    "start": "1752120",
    "end": "1757799"
  },
  {
    "text": "is populated with um uh only one type of user you won't be able to generate the",
    "start": "1757799",
    "end": "1763559"
  },
  {
    "text": "the the right kinds of customer profiles or end users and that makes skew your result",
    "start": "1763559",
    "end": "1769080"
  },
  {
    "text": "another common mistake um I've seen a lot of Junior Engineers do this um when they measure time they simply start",
    "start": "1769080",
    "end": "1775919"
  },
  {
    "text": "running a test they wait till the end of the test and then just use all of that time if you're doing a test of large",
    "start": "1775919",
    "end": "1781600"
  },
  {
    "text": "scale it takes a time it takes time for all of your tools to ramp up for instance if you're doing a test with",
    "start": "1781600",
    "end": "1787080"
  },
  {
    "text": "100,000 end users and each of those users is simulated by a thread it takes a while to spin up 100,000 threads uh",
    "start": "1787080",
    "end": "1794039"
  },
  {
    "text": "unless you're trying to measure the performance of spinning up 100,000 threads you need to use the notion of",
    "start": "1794039",
    "end": "1799880"
  },
  {
    "text": "ramp up which is when all of your stuff is getting ready to go steady state which is at some point in time you",
    "start": "1799880",
    "end": "1805640"
  },
  {
    "text": "declare the test is now on uh think of it as in you know in the race uh in car",
    "start": "1805640",
    "end": "1810840"
  },
  {
    "text": "races they have a running start so they get all the cars out on the track and once they're all out on the track and",
    "start": "1810840",
    "end": "1816039"
  },
  {
    "text": "everybody's running and everyone's in their Lane then they do the flag that's sort of the the ramp up and steady state",
    "start": "1816039",
    "end": "1821760"
  },
  {
    "text": "I use ramp down too because sometimes there is a behavior at the end of a test where threads are dropping off and and",
    "start": "1821760",
    "end": "1827720"
  },
  {
    "text": "you can get some weird Decay and so I used to sort of take the good bits so slice off excuse me slice off the ramp",
    "start": "1827720",
    "end": "1834919"
  },
  {
    "text": "up slice off the um the end and use just the good bits in the middle if your tool",
    "start": "1834919",
    "end": "1840559"
  },
  {
    "text": "doesn't uh support that you're going to have to figure out what what time slice to use I like to build it into my tools",
    "start": "1840559",
    "end": "1847880"
  },
  {
    "text": "uh choose a reasonable test duration I can't tell you how many times I've seen tests where someone's a a developer would say well I ran this test for 15",
    "start": "1847880",
    "end": "1854480"
  },
  {
    "text": "seconds on my desktop so uh I'm estimating the meantime to failure is one year uh right um the term leap of",
    "start": "1854480",
    "end": "1862080"
  },
  {
    "text": "faith comes to mind uh you you really need to use reasonable durations now how do you do that for mean for availability",
    "start": "1862080",
    "end": "1868679"
  },
  {
    "text": "obviously uh if you're going for you know a 99 percentile or you know 59 or",
    "start": "1868679",
    "end": "1874080"
  },
  {
    "text": "whatever it is you're trying to do the ideal thing would be to run for years and then say here's our result you don't",
    "start": "1874080",
    "end": "1879360"
  },
  {
    "text": "always have that the longer you run it the better one thing I like to do and that's one thing that's really good for AWS um you could get a a scaled down",
    "start": "1879360",
    "end": "1886880"
  },
  {
    "text": "version of your system put it up and leave it running a long time scaled up uh scaled down means",
    "start": "1886880",
    "end": "1893159"
  },
  {
    "text": "you're not paying for a full production cost but just leave it running and things like memory leaks and handle leaks and all those things could show up",
    "start": "1893159",
    "end": "1899200"
  },
  {
    "text": "if you leave it running for five months run multiple test you never run",
    "start": "1899200",
    "end": "1905159"
  },
  {
    "text": "you never measure something once uh classic example you measure something twice you have two different numbers",
    "start": "1905159",
    "end": "1911000"
  },
  {
    "text": "which is the right answer nobody knows so you run it three times you get three different numbers",
    "start": "1911000",
    "end": "1916960"
  },
  {
    "text": "which is the right one you don't know you have to run it enough times that you're comfortable that you have an understanding of the the average",
    "start": "1916960",
    "end": "1924559"
  },
  {
    "text": "and the deviation and you choose which you're going to use you can use statistics to say I want to get use the",
    "start": "1924559",
    "end": "1930080"
  },
  {
    "text": "thing that 95% of the time people are going to get and that's typically going to be a more conservative number but",
    "start": "1930080",
    "end": "1935600"
  },
  {
    "text": "it's one that you know you're going to get most of the time uh so uh quick tips uh on using elb",
    "start": "1935600",
    "end": "1944279"
  },
  {
    "text": "um this is these tips are from a white paper the elastic load Bal B ing uh a couple things you can pre-warm the load",
    "start": "1944279",
    "end": "1951639"
  },
  {
    "text": "balancer and and in pre-warming it you can um have a number of instances",
    "start": "1951639",
    "end": "1957360"
  },
  {
    "text": "already up you can also look at things like the time to live uh data um uh you",
    "start": "1957360",
    "end": "1963279"
  },
  {
    "text": "really need to ramp up at a realistic rate or what you may end up benchmarking is E's ability to uh um to to react uh",
    "start": "1963279",
    "end": "1971880"
  },
  {
    "text": "and and that may not be something you're trying to measure you also want to monitor errors uh while doing this so so",
    "start": "1971880",
    "end": "1977960"
  },
  {
    "text": "that you're making sure that your that your healths are host you are measuring healthy hosts um and you want to look at",
    "start": "1977960",
    "end": "1984360"
  },
  {
    "text": "error codes like like the 200 to 500 range uh and whether you're actually getting errors um uh some sort of error",
    "start": "1984360",
    "end": "1991440"
  },
  {
    "text": "back from from elb finding bottlenecks one of my uh one of my favorite topics um I had a",
    "start": "1991440",
    "end": "1999399"
  },
  {
    "text": "conversation earlier bottlenecks um finding them is kind of an art with a little bit of science thrown in um the",
    "start": "1999399",
    "end": "2005360"
  },
  {
    "text": "first thing I always do when I'm trying to to find a bottleneck is First Look for Clues um let's say hypothetically",
    "start": "2005360",
    "end": "2011399"
  },
  {
    "text": "your target is a 5-second response time you're looking for something that's a good chunk of 5 Seconds uh and so",
    "start": "2011399",
    "end": "2018039"
  },
  {
    "text": "anything that gives you granularity in the same unit that you're trying to tune helps to to start identifying things if",
    "start": "2018039",
    "end": "2024600"
  },
  {
    "text": "if you don't have enough Clues then you start adding instrumentation and then you also use isolation isolation is my",
    "start": "2024600",
    "end": "2030080"
  },
  {
    "text": "favorite technique what does that mean if you have a complicated environment and you want to for instance stub out",
    "start": "2030080",
    "end": "2035919"
  },
  {
    "text": "everything but the web front end then you can at least know out of five seconds what does the the web front end",
    "start": "2035919",
    "end": "2041399"
  },
  {
    "text": "take um I've actually got a picture on that so uh I think I'll walk through that quickly so uh in this particular",
    "start": "2041399",
    "end": "2047480"
  },
  {
    "text": "case you could literally uh copy your app stub out all calls the databases",
    "start": "2047480",
    "end": "2052560"
  },
  {
    "text": "anything that's just not related to front end and run your end to end test and only measure what happens at the web",
    "start": "2052560",
    "end": "2058800"
  },
  {
    "text": "layer um you could isolate what's happening at the appserver layer by not going through the uh web interface and",
    "start": "2058800",
    "end": "2066158"
  },
  {
    "text": "only directly calling the app ler um you can do the same thing at the disk level by either stubbing out everything in",
    "start": "2066159",
    "end": "2073079"
  },
  {
    "text": "front and just making calls to the things that use disk or you could do separate tests using standard benchmarks",
    "start": "2073079",
    "end": "2078878"
  },
  {
    "text": "on the disk infrastructure as an example let's say that you're trying to find a bottleneck you you look at disk stats",
    "start": "2078879",
    "end": "2085800"
  },
  {
    "text": "and you see that you're getting 500 ios's per second and you want to do some tests to see how how much capacity does",
    "start": "2085800",
    "end": "2093040"
  },
  {
    "text": "your configuration have and if you can't get more than 500 iOS per second that",
    "start": "2093040",
    "end": "2098599"
  },
  {
    "text": "probably means you've maxed out your iio and that's a good place to to start looking for fixes uh so you can you get",
    "start": "2098599",
    "end": "2104960"
  },
  {
    "text": "the idea you can use this on any of the layers you can isolate things like S3 you can isolate database um standard",
    "start": "2104960",
    "end": "2111720"
  },
  {
    "text": "benchmarks are a great tool when you want to drop down to isolation simply",
    "start": "2111720",
    "end": "2117440"
  },
  {
    "text": "because in a lot of cases there are things out there that will help you test at a at a more granular level um the",
    "start": "2117440",
    "end": "2123720"
  },
  {
    "text": "thing about standard benchmarks is there's still some work to be done um most standard benchmarks require some",
    "start": "2123720",
    "end": "2129720"
  },
  {
    "text": "amount of tuning whether it's turning tuning the Java VM settings whether it's tuning the disio infrastructure um it's",
    "start": "2129720",
    "end": "2137200"
  },
  {
    "text": "rare that you can just get a get a a database tool or some other tool run it",
    "start": "2137200",
    "end": "2142359"
  },
  {
    "text": "and say oh yes these results are fine I'll use them there's some amount of tuning to make sure you trust the results you often need to automate them",
    "start": "2142359",
    "end": "2148880"
  },
  {
    "text": "so that you can run them reliably and repeatedly comee come okay um most",
    "start": "2148880",
    "end": "2155760"
  },
  {
    "text": "importantly if you run these tests how do they relate to what you're trying to what do the results do in answering your",
    "start": "2155760",
    "end": "2161319"
  },
  {
    "text": "question and how close is the implementation of this Benchmark to what I'm doing uh here's an example let's say",
    "start": "2161319",
    "end": "2169000"
  },
  {
    "text": "that you are testing dis iio and um you normally have some sort of raid U",
    "start": "2169000",
    "end": "2175359"
  },
  {
    "text": "architecture for your IO um you can construct tests and I'll show you some examples of that where you're do using",
    "start": "2175359",
    "end": "2181960"
  },
  {
    "text": "multiple drives simultaneously but you're not doing it with raid and in that kind of in that situation you may",
    "start": "2181960",
    "end": "2188280"
  },
  {
    "text": "get results that will say with the best raid in the world this is what I could get raid is going to take something away",
    "start": "2188280",
    "end": "2193760"
  },
  {
    "text": "from that um but you have to be able to relate the technology of your test to the thing you're trying to",
    "start": "2193760",
    "end": "2199880"
  },
  {
    "text": "measure uh so I I am going to give some examples of how to run specific tests that doesn't mean I'm saying yay verily",
    "start": "2199880",
    "end": "2206839"
  },
  {
    "text": "I endorse these tests you should only use these tests or these tests will work for you I'm just picking some uh common",
    "start": "2206839",
    "end": "2212480"
  },
  {
    "text": "examples um but but first I have some common questions that I get asked and",
    "start": "2212480",
    "end": "2217640"
  },
  {
    "text": "since a lot of times I end up being asked to answer these questions I figure with a captive audience I can pre-answer",
    "start": "2217640",
    "end": "2223520"
  },
  {
    "text": "the questions and then you'll help answer them for other people and then I won't have to answer them as often um so",
    "start": "2223520",
    "end": "2229119"
  },
  {
    "text": "those questions uh what's an I I'll just go through them rather than reading a slide to so an ECU how many people know",
    "start": "2229119",
    "end": "2235000"
  },
  {
    "text": "what an ECU is how many people want to know what an ECU is okay I'll spend time",
    "start": "2235000",
    "end": "2240240"
  },
  {
    "text": "on the slide then um so an ECU is a really simple metric we came up with um",
    "start": "2240240",
    "end": "2247240"
  },
  {
    "text": "the origin of an ECU was originally when when AWS when ec2 first started we had a",
    "start": "2247240",
    "end": "2253560"
  },
  {
    "text": "very simple uh offering and when that offering went to more than one we needed some way of saying how do these compare",
    "start": "2253560",
    "end": "2260240"
  },
  {
    "text": "to each other um so we we came up with a definition uh this definition happens to",
    "start": "2260240",
    "end": "2266720"
  },
  {
    "text": "reference something that was similar to a 1.2 GHz 2007 opteron or 2007 Zeon",
    "start": "2266720",
    "end": "2274240"
  },
  {
    "text": "processor you may say my God does that mean 8 us is running on these things no",
    "start": "2274240",
    "end": "2279760"
  },
  {
    "text": "it doesn't mean that but at the time it was what we used to help people understand what the unit of one meant uh",
    "start": "2279760",
    "end": "2286280"
  },
  {
    "text": "the really important thing you can see this table we provide an ECU rating for all of the instance types the purpose of",
    "start": "2286280",
    "end": "2292800"
  },
  {
    "text": "that rating is to help you understand the relative compute power of those instances um your mileage may vary uh",
    "start": "2292800",
    "end": "2300280"
  },
  {
    "text": "it's it's a very simple measure and um it's just there to help you choose to",
    "start": "2300280",
    "end": "2305520"
  },
  {
    "text": "understand a little bit about the compute capacity of the instances if you are going to go out and",
    "start": "2305520",
    "end": "2311319"
  },
  {
    "text": "test CPU on your own um there are a number of ways to do it um the you you I",
    "start": "2311319",
    "end": "2317800"
  },
  {
    "text": "would choose a test where you have access to the source so you can really see what it's doing and if you wanted to derive your own test from it you can uh",
    "start": "2317800",
    "end": "2325359"
  },
  {
    "text": "uh and also um where um the test is automatable and repeatable I'm going to",
    "start": "2325359",
    "end": "2330920"
  },
  {
    "text": "go through spec CPU because it's sort of the granddaddy of all CPU tests it's been around a while um it's got a very",
    "start": "2330920",
    "end": "2338160"
  },
  {
    "text": "detailed set of workloads the integer the integer side has I believe 12",
    "start": "2338160",
    "end": "2343359"
  },
  {
    "text": "different workloads the floating Point side has 17 different workloads all of these workloads actually evolved from",
    "start": "2343359",
    "end": "2350040"
  },
  {
    "text": "originally some real workloads but they've been trimmed down to be able to to not to be agnostic to the platform",
    "start": "2350040",
    "end": "2356200"
  },
  {
    "text": "and to be automatable and so on uh the important thing is ah too much pressure um the important",
    "start": "2356200",
    "end": "2362680"
  },
  {
    "text": "thing is that it runs each test three times and it does some some a good use of statistics to come up with the",
    "start": "2362680",
    "end": "2369000"
  },
  {
    "text": "geometric mean of those results ultimately you end up with a number the good news about spec is if if you have a",
    "start": "2369000",
    "end": "2374800"
  },
  {
    "text": "spec result then if that spec result is two times higher than some other result that that means for this set of tests",
    "start": "2374800",
    "end": "2382200"
  },
  {
    "text": "that that test with the two two times higher result is two times faster because it simply measures time so if",
    "start": "2382200",
    "end": "2388480"
  },
  {
    "text": "it's a lower if it's a higher number that means it's uh it's",
    "start": "2388480",
    "end": "2393760"
  },
  {
    "text": "faster some tips and tricks if you are going to try and run spec on your own uh",
    "start": "2393760",
    "end": "2399000"
  },
  {
    "text": "first you can always go to the spec site to look at results that are there um uh",
    "start": "2399000",
    "end": "2404160"
  },
  {
    "text": "almost all of the results are published using the Intel compiler if you happen to try and use the GCC compiler um the",
    "start": "2404160",
    "end": "2411079"
  },
  {
    "text": "the Intel compiler is about 25% faster um one of the other things you might read in the small small print is they",
    "start": "2411079",
    "end": "2417560"
  },
  {
    "text": "almost all use Smart Heap which happens to be a very high performance multi-threaded memory manager that just",
    "start": "2417560",
    "end": "2423680"
  },
  {
    "text": "applies to the C++ tests in the integer test but but it makes about a 10% difference in the overall",
    "start": "2423680",
    "end": "2430240"
  },
  {
    "text": "number uh there there are sometimes a confusing set of different results I suggest if you're going to look at this",
    "start": "2430240",
    "end": "2436640"
  },
  {
    "text": "you understand what the different results types are and how to use them okay uh so uh memory testing uh I want",
    "start": "2436640",
    "end": "2444480"
  },
  {
    "text": "to speak briefly on this you can uh use uh stream as one of the tests that that I think is very popular um it actually",
    "start": "2444480",
    "end": "2451800"
  },
  {
    "text": "has four different workloads um it's important you understand this test it does um provide scaling test so it",
    "start": "2451800",
    "end": "2458319"
  },
  {
    "text": "increases the number of threads and theoretically if your tests are scaling that you will get higher throughput",
    "start": "2458319",
    "end": "2463400"
  },
  {
    "text": "numbers for the uh for for the memory uh one challenge I've seen is that",
    "start": "2463400",
    "end": "2468640"
  },
  {
    "text": "sometimes you end up measuring the level three cache and not the memory and you need to make sure you tune the",
    "start": "2468640",
    "end": "2473760"
  },
  {
    "text": "parameters so that you have enough memory that you're not getting things out of the CPU cache uh another topic IO",
    "start": "2473760",
    "end": "2480480"
  },
  {
    "text": "ratings on ec2 uh some people find what we talk about uh is very confusing um in",
    "start": "2480480",
    "end": "2487520"
  },
  {
    "text": "ec2 we we provide virtualized instances on those instances there are shared resources and dedicated resources CPU",
    "start": "2487520",
    "end": "2495200"
  },
  {
    "text": "and memory are are dedicated um instant storage is dedicated but network iio uh",
    "start": "2495200",
    "end": "2502240"
  },
  {
    "text": "mean meaning both net Network and network dis IO is shared uh the I/O ratings refer to that those shared uh",
    "start": "2502240",
    "end": "2509880"
  },
  {
    "text": "results and um there there are a couple caveats to this that if you use an EBS",
    "start": "2509880",
    "end": "2516760"
  },
  {
    "text": "optimized instance um that means that we've we've dedicated bandwidth for for",
    "start": "2516760",
    "end": "2522240"
  },
  {
    "text": "EBS traffic and so you're you're going to be able to isolate the network traffic from the EBS traffic and also",
    "start": "2522240",
    "end": "2529680"
  },
  {
    "text": "when you use cluster compute instances they have very high o uh performance and",
    "start": "2529680",
    "end": "2534839"
  },
  {
    "text": "low latency in between uh instance in between cluster compute instance types",
    "start": "2534839",
    "end": "2540119"
  },
  {
    "text": "if you're trying to look at Network performance there are really two types of network there is instance out to the",
    "start": "2540119",
    "end": "2545800"
  },
  {
    "text": "internet and there is in to instance and it's important to separate those two if you're going to measure if you're going to I'm going to",
    "start": "2545800",
    "end": "2552880"
  },
  {
    "text": "skip ahead uh to get to some slides because I promised you I would do that um if you're going to test dis IO then",
    "start": "2552880",
    "end": "2560520"
  },
  {
    "text": "it's important that you you look at a couple different variables first of all there are different write types write",
    "start": "2560520",
    "end": "2566160"
  },
  {
    "text": "versus read and you can do mixtures of both depending on what you need but it's usually important I like to measure them",
    "start": "2566160",
    "end": "2572000"
  },
  {
    "text": "each separately and then together uh and then you can also look at random versus sequential IO uh you should always look",
    "start": "2572000",
    "end": "2578640"
  },
  {
    "text": "at QEP so here's a graph that I prepared using fio which is a flexible IO um uh",
    "start": "2578640",
    "end": "2585640"
  },
  {
    "text": "test framework um and I was using this these tests to measure um provision",
    "start": "2585640",
    "end": "2590800"
  },
  {
    "text": "doops at 2000 before that released a couple things I wanted to point out there are this chart gives you separate",
    "start": "2590800",
    "end": "2597839"
  },
  {
    "text": "latencies for uh read alone write alone read WR mixed uh random and read WR",
    "start": "2597839",
    "end": "2605720"
  },
  {
    "text": "mixed sequential and those that granularity of data can help you answer lots of questions about dis performance",
    "start": "2605720",
    "end": "2612680"
  },
  {
    "text": "the other thing I did here was I ran one disc two discs and four diss uh to see what the latencies were these this graph",
    "start": "2612680",
    "end": "2619839"
  },
  {
    "text": "is in microsc so you can see the the tallest Orange Line there is is running",
    "start": "2619839",
    "end": "2625359"
  },
  {
    "text": "in at about uh 1,000",
    "start": "2625359",
    "end": "2630480"
  },
  {
    "text": "micros um but um I mentioned this point earlier if you're using raid um you",
    "start": "2630480",
    "end": "2636440"
  },
  {
    "text": "there is over with using raid using this approach you can measure the overhead the throughput and the latency for",
    "start": "2636440",
    "end": "2642839"
  },
  {
    "text": "multiple discs without the overhead of raid which means you're going to get worse performance with raid but at least",
    "start": "2642839",
    "end": "2648359"
  },
  {
    "text": "you know what the best possible is yes get",
    "start": "2648359",
    "end": "2654440"
  },
  {
    "text": "results the the question is how do you use these results to determine what's acceptable it goes back to what your",
    "start": "2657760",
    "end": "2662839"
  },
  {
    "text": "target is if if if what you're trying to figure out is a bottleneck and you have",
    "start": "2662839",
    "end": "2668920"
  },
  {
    "text": "to figure out how much time you can allow for",
    "start": "2668920",
    "end": "2673119"
  },
  {
    "text": "disio the the okay the question is how do I know that this number is good enough what you do know is this is your",
    "start": "2685760",
    "end": "2692040"
  },
  {
    "text": "Baseline you can also measure variability and say do I get this repeatedly the question is is this good",
    "start": "2692040",
    "end": "2698359"
  },
  {
    "text": "enough is a tougher one it would take a lot more questions for for me to say how how you could determine it's good enough",
    "start": "2698359",
    "end": "2704480"
  },
  {
    "text": "for you if you want we can talk about that more after because I'm I'm running low",
    "start": "2704480",
    "end": "2709599"
  },
  {
    "text": "on time uh so I want to show you another graph here um this one is an important point this is the same test but in this",
    "start": "2709599",
    "end": "2717599"
  },
  {
    "text": "test I'm comparing a q depth of one to a qpth of two with provision iops why does",
    "start": "2717599",
    "end": "2723800"
  },
  {
    "text": "that matter remember my comment earlier about being careful measuring Pro provision services for this particular",
    "start": "2723800",
    "end": "2730160"
  },
  {
    "text": "set of tests a q depth of one was able to achieve 2,000 iOS per",
    "start": "2730160",
    "end": "2735319"
  },
  {
    "text": "second what do you think happens if I try to do more than 2,000 iOS per",
    "start": "2735319",
    "end": "2740640"
  },
  {
    "text": "second a I won't get more than 2,000 iOS per second B my latency is going to increase this graph shows you the the",
    "start": "2740640",
    "end": "2748160"
  },
  {
    "text": "cost of running too high a QEP uh on",
    "start": "2748160",
    "end": "2753078"
  },
  {
    "text": "latency uh I want to show you some graphs in the time that I have left on testing databases there are many tools",
    "start": "2754480",
    "end": "2761200"
  },
  {
    "text": "out there one of the ones that I've used recently is the Yahoo Cloud serving Benchmark um I happen to use that",
    "start": "2761200",
    "end": "2768160"
  },
  {
    "text": "because I had about two weeks to to test Dynamo DB before it first released and I had never used Dynamo DB before and I",
    "start": "2768160",
    "end": "2775280"
  },
  {
    "text": "didn't have any test and this particular uh open- Source test had everything I needed to to put some tests together",
    "start": "2775280",
    "end": "2781720"
  },
  {
    "text": "quickly and in terms of all the things you need it has load generation workloads defined EXT sensible framework",
    "start": "2781720",
    "end": "2788040"
  },
  {
    "text": "metrics reports built in so it was good um that was too fast um this is an",
    "start": "2788040",
    "end": "2794000"
  },
  {
    "text": "example of the default workloads where it gives you 50% read 50% right 95% read",
    "start": "2794000",
    "end": "2799760"
  },
  {
    "text": "5% right etc etc so this is a great starting point if you have nothing already um but uh uh this is an example",
    "start": "2799760",
    "end": "2808240"
  },
  {
    "text": "of um uh the sequence you run a SE sequence of workloads in a particular",
    "start": "2808240",
    "end": "2813760"
  },
  {
    "text": "order because some of the some of the workloads add records which can change the results and if you want results to",
    "start": "2813760",
    "end": "2819160"
  },
  {
    "text": "be repeatable you have to run the tests in the same pattern every time you run them let me get to the data okay so um",
    "start": "2819160",
    "end": "2825920"
  },
  {
    "text": "this is a the the I remember I said earlier that Dynamo DB provides single millisecond service side latency this is",
    "start": "2825920",
    "end": "2833480"
  },
  {
    "text": "actually a diagram of client side latency running at 100,000 requests per second with a uh uh a table with a",
    "start": "2833480",
    "end": "2841839"
  },
  {
    "text": "billion items in it each item is about a thousand bytes so was a terabyte of data",
    "start": "2841839",
    "end": "2847000"
  },
  {
    "text": "um running for over an hour um this histogram shows the uh the the latencies",
    "start": "2847000",
    "end": "2853599"
  },
  {
    "text": "uh at the buckets for the latencies and you can see that all of them are clustered 95% of them are actually below",
    "start": "2853599",
    "end": "2860520"
  },
  {
    "text": "10 milliseconds which I'd say would qualify as singled digigit um latency",
    "start": "2860520",
    "end": "2866359"
  },
  {
    "text": "the interesting thing is the graph looks fairly simple when you do this at 25,000 request per second uh this is with",
    "start": "2866359",
    "end": "2872440"
  },
  {
    "text": "workload a so this is actually five uh 50% read 50% right",
    "start": "2872440",
    "end": "2878760"
  },
  {
    "text": "right I I have a test result for 95% read 5% right I want to get to the next",
    "start": "2878760",
    "end": "2884720"
  },
  {
    "text": "one which is if you want to do this yourself um use ycsb version 1.4 we",
    "start": "2884720",
    "end": "2890559"
  },
  {
    "text": "built a Dynamo DB plugin uh for that release it's it's it comes when you download it a couple things uh hints uh",
    "start": "2890559",
    "end": "2898440"
  },
  {
    "text": "because of uh assumptions um that dynamodb was tuned for um dynamodb T is",
    "start": "2898440",
    "end": "2904720"
  },
  {
    "text": "tuned for a uniform distribution some of the defaults uh some of the workloads in",
    "start": "2904720",
    "end": "2910000"
  },
  {
    "text": "ycsb have non-uniform they're called zipan uh where 20% of the data is is",
    "start": "2910000",
    "end": "2915359"
  },
  {
    "text": "repeat data so it creates hotpots if you do ycsb testing with with hotspots",
    "start": "2915359",
    "end": "2921280"
  },
  {
    "text": "you're likely going to need to over um uh provision because um you could run",
    "start": "2921280",
    "end": "2927240"
  },
  {
    "text": "into throttling if you get over the uh provision level for certain parts of the",
    "start": "2927240",
    "end": "2932720"
  },
  {
    "text": "system the cloudwatch stats really help but this is an illustration of what",
    "start": "2932720",
    "end": "2937839"
  },
  {
    "text": "happens when you're running zipan versus uniform uh Dynam DB is tuned assuming um",
    "start": "2937839",
    "end": "2943839"
  },
  {
    "text": "equal distribution of keys and when you use an unequal distribution of keys keeping the same uh keeping the same",
    "start": "2943839",
    "end": "2950799"
  },
  {
    "text": "request rate you you can run into differ performance behaviors uh in answer to",
    "start": "2950799",
    "end": "2956400"
  },
  {
    "text": "the question does Dynamo DB scale um you can see um these tests are for 10,000",
    "start": "2956400",
    "end": "2961440"
  },
  {
    "text": "RPS same thing horizontal axis is millisecond uh response time there's 25",
    "start": "2961440",
    "end": "2966799"
  },
  {
    "text": "5,000 there's 50,000 there's 100,000 so you can see um I would say for this set",
    "start": "2966799",
    "end": "2972760"
  },
  {
    "text": "of tests um for this workload that that it scaled pretty well um interesting",
    "start": "2972760",
    "end": "2978960"
  },
  {
    "text": "question what's the cost of doing these tests well I made the I I'd like to make",
    "start": "2978960",
    "end": "2984319"
  },
  {
    "text": "the point that one of the things you can do is test things in parallel so if you ran these tests serially it would take",
    "start": "2984319",
    "end": "2992040"
  },
  {
    "text": "about oh that's bad 171 hours to run those sequence of tests I just showed",
    "start": "2992040",
    "end": "2998079"
  },
  {
    "text": "you however if you ran the if you provisioned for 100,000 and ran them the 1025 and 50 all at once and then the",
    "start": "2998079",
    "end": "3005640"
  },
  {
    "text": "100,000 uh it cuts the runtime down to 99 and if you provisioned at 200,000 um",
    "start": "3005640",
    "end": "3011559"
  },
  {
    "text": "the total time would be the largest number which would be 74 uh so you can really play with that if you need",
    "start": "3011559",
    "end": "3017599"
  },
  {
    "text": "answers faster um the last the last thing I I'm out of time so I'm going to just show you uh this one uh last slide",
    "start": "3017599",
    "end": "3025319"
  },
  {
    "text": "which is um which instance type should I use there are lots of things that go into that and and you can throw it",
    "start": "3025319",
    "end": "3030599"
  },
  {
    "text": "depends back into me but you want to simplify down to the things that matter how many processors how much memory do I",
    "start": "3030599",
    "end": "3037480"
  },
  {
    "text": "need uh am I doing lots of IO um uh looking at Cost performance is important",
    "start": "3037480",
    "end": "3043280"
  },
  {
    "text": "too so I like to take uh the cost of an instance and divide that by the",
    "start": "3043280",
    "end": "3048359"
  },
  {
    "text": "performance of an instance for a given test and that gives you a great measure so I've been talking a lot uh and um I I",
    "start": "3048359",
    "end": "3055520"
  },
  {
    "text": "am out of time officially so I will take questions unofficially down here uh on the stage please",
    "start": "3055520",
    "end": "3061359"
  },
  {
    "text": "remember to fill out surveys and I have M&M's to get rid of so I will put the dispenser and you can take it",
    "start": "3061359",
    "end": "3067960"
  }
]