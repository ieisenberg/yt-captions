[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "in this video you'll see how to simplify",
    "start": "80",
    "end": "1839"
  },
  {
    "text": "app refactoring with aws migration hub",
    "start": "1839",
    "end": "4000"
  },
  {
    "text": "refactor spaces",
    "start": "4000",
    "end": "5680"
  },
  {
    "text": "with this feature you can quickly set up",
    "start": "5680",
    "end": "7359"
  },
  {
    "text": "an infrastructure for refactoring",
    "start": "7359",
    "end": "8960"
  },
  {
    "text": "rewriting and re-architecting apps",
    "start": "8960",
    "end": "11040"
  },
  {
    "text": "operate these apps at scale regardless",
    "start": "11040",
    "end": "12799"
  },
  {
    "text": "of app changes and focus on delivering",
    "start": "12799",
    "end": "14719"
  },
  {
    "text": "value from refactoring without having to",
    "start": "14719",
    "end": "16480"
  },
  {
    "text": "create the environment",
    "start": "16480",
    "end": "19359"
  },
  {
    "start": "19000",
    "end": "38000"
  },
  {
    "text": "to get started let's navigate to aws",
    "start": "19600",
    "end": "21520"
  },
  {
    "text": "migration hub and open refactor spaces",
    "start": "21520",
    "end": "25760"
  },
  {
    "text": "aws migration hub refactor spaces is the",
    "start": "26720",
    "end": "29119"
  },
  {
    "text": "starting point for incremental",
    "start": "29119",
    "end": "30400"
  },
  {
    "text": "application refactoring to microservices",
    "start": "30400",
    "end": "32719"
  },
  {
    "text": "before we create our refactor",
    "start": "32719",
    "end": "34160"
  },
  {
    "text": "environment let's look at the",
    "start": "34160",
    "end": "35360"
  },
  {
    "text": "application we are going to refactor",
    "start": "35360",
    "end": "37840"
  },
  {
    "text": "for the purposes of this example our",
    "start": "37840",
    "end": "39520"
  },
  {
    "start": "38000",
    "end": "62000"
  },
  {
    "text": "application is an online store called",
    "start": "39520",
    "end": "41200"
  },
  {
    "text": "the unicorn shop",
    "start": "41200",
    "end": "43040"
  },
  {
    "text": "the unicorn shop is a typical monolithic",
    "start": "43040",
    "end": "45120"
  },
  {
    "text": "application and we'd like to break out",
    "start": "45120",
    "end": "46879"
  },
  {
    "text": "two pieces of key functionality the",
    "start": "46879",
    "end": "48879"
  },
  {
    "text": "first is the catalog of products for",
    "start": "48879",
    "end": "50480"
  },
  {
    "text": "sale the second is the shopping cart",
    "start": "50480",
    "end": "53120"
  },
  {
    "text": "we want these two services to be",
    "start": "53120",
    "end": "54480"
  },
  {
    "text": "independent of each other for",
    "start": "54480",
    "end": "55600"
  },
  {
    "text": "scalability and development purposes",
    "start": "55600",
    "end": "58000"
  },
  {
    "text": "let's go back to refactor spaces and",
    "start": "58000",
    "end": "59680"
  },
  {
    "text": "create an environment",
    "start": "59680",
    "end": "62559"
  },
  {
    "start": "62000",
    "end": "88000"
  },
  {
    "text": "an environment is a multi-account",
    "start": "62879",
    "end": "64320"
  },
  {
    "text": "network fabric consisting of peered vpcs",
    "start": "64320",
    "end": "67280"
  },
  {
    "text": "we'll call this environment unishop",
    "start": "67280",
    "end": "71479"
  },
  {
    "text": "we'll call our application unicorn store",
    "start": "74000",
    "end": "78080"
  },
  {
    "text": "next we'll select the application's",
    "start": "79360",
    "end": "80880"
  },
  {
    "text": "proxy vpc",
    "start": "80880",
    "end": "82560"
  },
  {
    "text": "the proxy lets the front end application",
    "start": "82560",
    "end": "84400"
  },
  {
    "text": "use a single endpoint to contact",
    "start": "84400",
    "end": "85920"
  },
  {
    "text": "multiple services",
    "start": "85920",
    "end": "88720"
  },
  {
    "start": "88000",
    "end": "116000"
  },
  {
    "text": "if an application is made up of multiple",
    "start": "89040",
    "end": "90720"
  },
  {
    "text": "aws accounts we can share the refactor",
    "start": "90720",
    "end": "92960"
  },
  {
    "text": "environment and its application with",
    "start": "92960",
    "end": "94400"
  },
  {
    "text": "other aws principles",
    "start": "94400",
    "end": "96320"
  },
  {
    "text": "refactor spaces then sets up the",
    "start": "96320",
    "end": "97840"
  },
  {
    "text": "networking fabric that allows those",
    "start": "97840",
    "end": "99280"
  },
  {
    "text": "services to communicate seamlessly",
    "start": "99280",
    "end": "101680"
  },
  {
    "text": "in this case let's move on and create",
    "start": "101680",
    "end": "103200"
  },
  {
    "text": "the environment",
    "start": "103200",
    "end": "105840"
  },
  {
    "text": "now that our environment and application",
    "start": "111360",
    "end": "112880"
  },
  {
    "text": "have been created let's drill into the",
    "start": "112880",
    "end": "114399"
  },
  {
    "text": "application",
    "start": "114399",
    "end": "116719"
  },
  {
    "start": "116000",
    "end": "141000"
  },
  {
    "text": "the first thing we want to do is create",
    "start": "116719",
    "end": "118079"
  },
  {
    "text": "a proxy that will pass through to the",
    "start": "118079",
    "end": "119439"
  },
  {
    "text": "existing monolith to do that let's",
    "start": "119439",
    "end": "121280"
  },
  {
    "text": "create a service",
    "start": "121280",
    "end": "124079"
  },
  {
    "text": "we'll call it legacy",
    "start": "124320",
    "end": "127960"
  },
  {
    "text": "next we'll select the vpc where our",
    "start": "129599",
    "end": "131280"
  },
  {
    "text": "current service resides and specify the",
    "start": "131280",
    "end": "133120"
  },
  {
    "text": "existing service endpoint",
    "start": "133120",
    "end": "136319"
  },
  {
    "text": "now we'll set this as the application's",
    "start": "138080",
    "end": "139599"
  },
  {
    "text": "default route and create the service",
    "start": "139599",
    "end": "142160"
  },
  {
    "start": "141000",
    "end": "186000"
  },
  {
    "text": "we've created our proxy but our default",
    "start": "142160",
    "end": "143840"
  },
  {
    "text": "route is simply routing traffic straight",
    "start": "143840",
    "end": "145440"
  },
  {
    "text": "through our monolithic application as",
    "start": "145440",
    "end": "146959"
  },
  {
    "text": "before",
    "start": "146959",
    "end": "148480"
  },
  {
    "text": "let's return to the application",
    "start": "148480",
    "end": "151760"
  },
  {
    "text": "the development team for the unicorn",
    "start": "153040",
    "end": "154640"
  },
  {
    "text": "store has been busy refactoring out the",
    "start": "154640",
    "end": "156319"
  },
  {
    "text": "application's catalog and shopping cart",
    "start": "156319",
    "end": "158160"
  },
  {
    "text": "capabilities",
    "start": "158160",
    "end": "159360"
  },
  {
    "text": "the new microservices were deployed into",
    "start": "159360",
    "end": "161280"
  },
  {
    "text": "our serverless container service amazon",
    "start": "161280",
    "end": "163200"
  },
  {
    "text": "ecs on aws fargate",
    "start": "163200",
    "end": "165599"
  },
  {
    "text": "let's navigate to amazon elastic",
    "start": "165599",
    "end": "167200"
  },
  {
    "text": "container service or amazon ecs and take",
    "start": "167200",
    "end": "169440"
  },
  {
    "text": "a look",
    "start": "169440",
    "end": "171840"
  },
  {
    "text": "next we'll specify the vpc endpoint for",
    "start": "171920",
    "end": "174000"
  },
  {
    "text": "the catalog service",
    "start": "174000",
    "end": "176480"
  },
  {
    "text": "here are our cart service and catalog",
    "start": "176480",
    "end": "178239"
  },
  {
    "text": "service",
    "start": "178239",
    "end": "179360"
  },
  {
    "text": "next we'll begin routing the",
    "start": "179360",
    "end": "180560"
  },
  {
    "text": "functionality in our monolithic",
    "start": "180560",
    "end": "182000"
  },
  {
    "text": "application to these distinct",
    "start": "182000",
    "end": "183280"
  },
  {
    "text": "microservices",
    "start": "183280",
    "end": "186080"
  },
  {
    "start": "186000",
    "end": "211000"
  },
  {
    "text": "before we do that let's quickly define",
    "start": "186879",
    "end": "188640"
  },
  {
    "text": "what we mean by microservices and",
    "start": "188640",
    "end": "190239"
  },
  {
    "text": "monolith in this context our unicorn",
    "start": "190239",
    "end": "192879"
  },
  {
    "text": "store is a legacy monolith application",
    "start": "192879",
    "end": "194879"
  },
  {
    "text": "where all the functionality and",
    "start": "194879",
    "end": "196080"
  },
  {
    "text": "components are tied together and thus",
    "start": "196080",
    "end": "197599"
  },
  {
    "text": "must be deployed together",
    "start": "197599",
    "end": "199440"
  },
  {
    "text": "as part of this demonstration we're",
    "start": "199440",
    "end": "200879"
  },
  {
    "text": "splitting out key components of this",
    "start": "200879",
    "end": "202239"
  },
  {
    "text": "legacy monolith and creating",
    "start": "202239",
    "end": "203920"
  },
  {
    "text": "independently deployable micro services",
    "start": "203920",
    "end": "205760"
  },
  {
    "text": "so that we're able to easily scale those",
    "start": "205760",
    "end": "207440"
  },
  {
    "text": "individual components as needed",
    "start": "207440",
    "end": "211560"
  },
  {
    "start": "211000",
    "end": "242000"
  },
  {
    "text": "create these micro services let's go",
    "start": "212000",
    "end": "213680"
  },
  {
    "text": "back to refactor spaces to start the",
    "start": "213680",
    "end": "215440"
  },
  {
    "text": "process",
    "start": "215440",
    "end": "217840"
  },
  {
    "text": "we'll call this one catalog service",
    "start": "218640",
    "end": "222319"
  },
  {
    "text": "let's select a vpc to add to the",
    "start": "224239",
    "end": "225840"
  },
  {
    "text": "environment's network bridge",
    "start": "225840",
    "end": "229120"
  },
  {
    "text": "let's also add a health check endpoint",
    "start": "229280",
    "end": "230959"
  },
  {
    "text": "for this service",
    "start": "230959",
    "end": "233599"
  },
  {
    "text": "let's enter a source path for the route",
    "start": "237519",
    "end": "239120"
  },
  {
    "text": "and create the service",
    "start": "239120",
    "end": "242159"
  },
  {
    "text": "now that the route has been provisioned",
    "start": "243439",
    "end": "244879"
  },
  {
    "text": "let's go to the unicorn shop and refresh",
    "start": "244879",
    "end": "246720"
  },
  {
    "text": "the page to ensure our catalog is still",
    "start": "246720",
    "end": "248480"
  },
  {
    "text": "working",
    "start": "248480",
    "end": "250239"
  },
  {
    "text": "our catalog is still being serviced but",
    "start": "250239",
    "end": "252239"
  },
  {
    "text": "let's verify that it's with the new",
    "start": "252239",
    "end": "253680"
  },
  {
    "text": "service we just provisioned and not the",
    "start": "253680",
    "end": "255200"
  },
  {
    "text": "old to do that we'll navigate to",
    "start": "255200",
    "end": "257199"
  },
  {
    "text": "cloudwatch and take a look at our logs",
    "start": "257199",
    "end": "261479"
  },
  {
    "text": "let's find the latest log",
    "start": "268400",
    "end": "271600"
  },
  {
    "text": "here we can see that our health check",
    "start": "276560",
    "end": "277840"
  },
  {
    "text": "endpoints are working properly here's",
    "start": "277840",
    "end": "279840"
  },
  {
    "text": "our new catalog service",
    "start": "279840",
    "end": "283639"
  },
  {
    "text": "we see that it issued a request to the",
    "start": "283919",
    "end": "285600"
  },
  {
    "text": "database to get all unicorns",
    "start": "285600",
    "end": "289120"
  },
  {
    "text": "the response has been written here and",
    "start": "289600",
    "end": "291120"
  },
  {
    "text": "completed",
    "start": "291120",
    "end": "294120"
  },
  {
    "text": "now that we've confirmed that our",
    "start": "296400",
    "end": "297440"
  },
  {
    "text": "catalog is using our new microservice",
    "start": "297440",
    "end": "299280"
  },
  {
    "text": "let's go back to refactor spaces",
    "start": "299280",
    "end": "302639"
  },
  {
    "text": "next let's get our unicorn store to",
    "start": "302639",
    "end": "304240"
  },
  {
    "text": "leverage our new microservice for the",
    "start": "304240",
    "end": "305680"
  },
  {
    "text": "shopping cart functionality",
    "start": "305680",
    "end": "307840"
  },
  {
    "text": "let's create another service",
    "start": "307840",
    "end": "311720"
  },
  {
    "text": "we'll call this one cart service",
    "start": "312320",
    "end": "315840"
  },
  {
    "text": "let's specify the vpc endpoint and",
    "start": "317680",
    "end": "319759"
  },
  {
    "text": "health check endpoint",
    "start": "319759",
    "end": "323240"
  },
  {
    "text": "here we'll specify the source path for",
    "start": "330240",
    "end": "331919"
  },
  {
    "text": "our shopping cart functionality",
    "start": "331919",
    "end": "335199"
  },
  {
    "start": "335000",
    "end": "421000"
  },
  {
    "text": "next we'll go to the unicorn shop and",
    "start": "335680",
    "end": "337360"
  },
  {
    "text": "test our shopping cart functionality",
    "start": "337360",
    "end": "339440"
  },
  {
    "text": "let's add some items to the cart",
    "start": "339440",
    "end": "342880"
  },
  {
    "text": "the items have appeared in the cart",
    "start": "349280",
    "end": "351280"
  },
  {
    "text": "let's take a look at our developer tools",
    "start": "351280",
    "end": "352880"
  },
  {
    "text": "to confirm how things are going behind",
    "start": "352880",
    "end": "354479"
  },
  {
    "text": "the scenes",
    "start": "354479",
    "end": "355919"
  },
  {
    "text": "if we ring up the cart we go to our",
    "start": "355919",
    "end": "357600"
  },
  {
    "text": "proxy url with our user id",
    "start": "357600",
    "end": "361360"
  },
  {
    "text": "once again it's not apparent where this",
    "start": "365120",
    "end": "366800"
  },
  {
    "text": "request is being serviced we can inspect",
    "start": "366800",
    "end": "369120"
  },
  {
    "text": "the cloudwatch logs again but instead",
    "start": "369120",
    "end": "371120"
  },
  {
    "text": "let's try to find the relevant entries",
    "start": "371120",
    "end": "372560"
  },
  {
    "text": "in our database amazon dynamodb",
    "start": "372560",
    "end": "376800"
  },
  {
    "text": "this entry should correspond to our user",
    "start": "379360",
    "end": "381280"
  },
  {
    "text": "id",
    "start": "381280",
    "end": "383600"
  },
  {
    "text": "here are the two unicorns we added to",
    "start": "384080",
    "end": "385680"
  },
  {
    "text": "the cart",
    "start": "385680",
    "end": "387919"
  },
  {
    "text": "there's the id for one unicorn",
    "start": "387919",
    "end": "391520"
  },
  {
    "text": "here's the id for the other unicorn",
    "start": "392639",
    "end": "396319"
  },
  {
    "text": "we've confirmed that our application's",
    "start": "400240",
    "end": "401680"
  },
  {
    "text": "catalog and shopping cart",
    "start": "401680",
    "end": "402880"
  },
  {
    "text": "functionalities are now running out of",
    "start": "402880",
    "end": "404319"
  },
  {
    "text": "amazon ecs on aws fargate",
    "start": "404319",
    "end": "409080"
  },
  {
    "text": "we were able to move the traffic from",
    "start": "409199",
    "end": "410720"
  },
  {
    "text": "our monolithic application into these",
    "start": "410720",
    "end": "412319"
  },
  {
    "text": "new microservices without having to",
    "start": "412319",
    "end": "414080"
  },
  {
    "text": "configure any networking infrastructure",
    "start": "414080",
    "end": "415919"
  },
  {
    "text": "and while keeping the architecture",
    "start": "415919",
    "end": "417199"
  },
  {
    "text": "changes transparent to app consumers",
    "start": "417199",
    "end": "421479"
  },
  {
    "start": "421000",
    "end": "434000"
  },
  {
    "text": "you've just seen how to quickly set up",
    "start": "422080",
    "end": "423440"
  },
  {
    "text": "app refactoring with aws migration hub",
    "start": "423440",
    "end": "425680"
  },
  {
    "text": "refactor spaces",
    "start": "425680",
    "end": "427840"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "427840",
    "end": "429280"
  },
  {
    "text": "the description and links for this video",
    "start": "429280",
    "end": "430960"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "430960",
    "end": "432400"
  },
  {
    "text": "to try",
    "start": "432400",
    "end": "435479"
  }
]