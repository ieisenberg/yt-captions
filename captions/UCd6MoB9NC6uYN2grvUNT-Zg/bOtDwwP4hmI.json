[
  {
    "text": "hi and welcome to this special edition of AWS innovate 2018 thank you for",
    "start": "79",
    "end": "6480"
  },
  {
    "text": "tuning in to this presentation where we will discuss how you can take the machine learning models that you've",
    "start": "6480",
    "end": "12030"
  },
  {
    "text": "trained in the cloud to the edge closer to your data and your use case I'm",
    "start": "12030",
    "end": "17190"
  },
  {
    "text": "Timothy Cruz a pact solution architect focusing on IOT before diving into the",
    "start": "17190",
    "end": "24539"
  },
  {
    "text": "edge itself it's important to understand what the edge means and how you can address connectivity security and data",
    "start": "24539",
    "end": "30869"
  },
  {
    "text": "management in remote locations for that we'll go over a bit of background on the",
    "start": "30869",
    "end": "36719"
  },
  {
    "text": "Internet of Things and the services that we have been working on at eight of the us to help our customers address",
    "start": "36719",
    "end": "42149"
  },
  {
    "text": "connecting their devices we will cover the AWS IOT suite of services but also",
    "start": "42149",
    "end": "48420"
  },
  {
    "text": "AWS Greengrass who will be a core component of running machine learning models at the edge we'll also discuss",
    "start": "48420",
    "end": "56219"
  },
  {
    "text": "the reasons why you would want to run your models closer to your data rather than rely exclusively on the cloud",
    "start": "56219",
    "end": "63019"
  },
  {
    "text": "finally the Internet of Things isn't complete without things so we'll go over a short demo running on AWS Greengrass",
    "start": "63019",
    "end": "70560"
  },
  {
    "text": "that will showcase a simple use case of using AWS Greengrass machine learning inference to perform ml inference",
    "start": "70560",
    "end": "78150"
  },
  {
    "text": "locally on a device so let's dive right in with a growing need of security and",
    "start": "78150",
    "end": "85920"
  },
  {
    "text": "connected device at scale we introduced AWS IOT three years ago a fully managed",
    "start": "85920",
    "end": "92400"
  },
  {
    "text": "service simplifying and removing a lot of the heavy lifting around connecting devices to the cloud the AWS IOT service",
    "start": "92400",
    "end": "100710"
  },
  {
    "text": "was designed around the following key functionalities security we decided to",
    "start": "100710",
    "end": "106950"
  },
  {
    "text": "set a high bar with TLS 1.2 encryption of the data to and from the devices and",
    "start": "106950",
    "end": "112189"
  },
  {
    "text": "mutual authentication backed by x.509 certificates connectivity to the cloud",
    "start": "112189",
    "end": "118500"
  },
  {
    "text": "the service supports multiple open source protocols of which mqtt which is",
    "start": "118500",
    "end": "123659"
  },
  {
    "text": "a low bandwidth very efficient publish/subscribe protocol designed for connected devices but also supporting",
    "start": "123659",
    "end": "130709"
  },
  {
    "text": "HTTP and WebSockets connectivity to all the AWS services with a built in rules engine data being",
    "start": "130709",
    "end": "138660"
  },
  {
    "text": "transferred through the AWS IOT device gateway can be filtered and routed to",
    "start": "138660",
    "end": "143670"
  },
  {
    "text": "other AWS services for example storing the data directly into a dynamodb table",
    "start": "143670",
    "end": "149490"
  },
  {
    "text": "dumping it into an elasticsearch cluster for searching and dashboarding or tool",
    "start": "149490",
    "end": "154590"
  },
  {
    "text": "under functions opening up to more calculations on the data and passing on to outside api's offline interactivity",
    "start": "154590",
    "end": "162900"
  },
  {
    "text": "with device shadows AWS IOT maintains a copy of the state of the device",
    "start": "162900",
    "end": "168600"
  },
  {
    "text": "even when non connected allowing applications to query but also interact",
    "start": "168600",
    "end": "173850"
  },
  {
    "text": "with the devices to change their state without the need to actually have to interact with the device directly and",
    "start": "173850",
    "end": "181160"
  },
  {
    "text": "finally as you would expect a very scalable and highly available service",
    "start": "181160",
    "end": "186620"
  },
  {
    "text": "customer could rely on to build their iot based solutions we have been seeing",
    "start": "186620",
    "end": "192840"
  },
  {
    "text": "great successes from customers around the world leveraging AWS IOT for their use cases from I robots automatic robot",
    "start": "192840",
    "end": "200310"
  },
  {
    "text": "vacuum cleaners or globally distributed air filtering system by man Hummel but",
    "start": "200310",
    "end": "206400"
  },
  {
    "text": "some use cases were still tough to address because of the specific or extreme conditions in which they operate",
    "start": "206400",
    "end": "213980"
  },
  {
    "text": "this is why in 2016 we introduced AWS Greengrass addressing the complexities",
    "start": "213980",
    "end": "220080"
  },
  {
    "text": "of the edge AWS Greengrass is software that we provide you can run it on",
    "start": "220080",
    "end": "225780"
  },
  {
    "text": "embedded Linux devices or even full-fledged servers if you wish the AWS",
    "start": "225780",
    "end": "231360"
  },
  {
    "text": "Greengrass service provides the following functionalities the same level",
    "start": "231360",
    "end": "236640"
  },
  {
    "text": "of security you'd expect from AWS services with TLS encryption and the same certificate based authentication an",
    "start": "236640",
    "end": "243860"
  },
  {
    "text": "mqtt Broker allowing IOT connectivity locally between your devices and using",
    "start": "243860",
    "end": "249570"
  },
  {
    "text": "Greengrass to route your data back up to the cloud local device shadows to",
    "start": "249570",
    "end": "255450"
  },
  {
    "text": "control the state of your connected device locally and one of the best functionalities local lambda functions",
    "start": "255450",
    "end": "261840"
  },
  {
    "text": "allowing you to run the same lambda functions you are used to building in the cloud on",
    "start": "261840",
    "end": "267420"
  },
  {
    "text": "your edge device AWS Greengrass is a great platform for dealing with the",
    "start": "267420",
    "end": "273630"
  },
  {
    "text": "constraints of the edge allowing customers to make meaningful sense of their data act on it in real time",
    "start": "273630",
    "end": "279570"
  },
  {
    "text": "without the need for cloud connectivity Rio Tinto for example have been",
    "start": "279570",
    "end": "286440"
  },
  {
    "text": "leveraging AWS Greengrass in their very extreme mining environments where data connectivity is very difficult using AWS",
    "start": "286440",
    "end": "295230"
  },
  {
    "text": "Greengrass they are reducing the wear and tear of their very expensive truck tires by monitoring vibrations of",
    "start": "295230",
    "end": "302550"
  },
  {
    "text": "their trucks around the mine site they can map road deterioration to send teams to flatten out the damaged roads doing",
    "start": "302550",
    "end": "311130"
  },
  {
    "text": "this on site at their mind sites without the need for connectivity back to the cloud listening to our customers even",
    "start": "311130",
    "end": "320250"
  },
  {
    "text": "further we complimented Alli ot portfolio of services at reinvent last year to further support their use cases",
    "start": "320250",
    "end": "329090"
  },
  {
    "text": "AWS IOT device management helps our customers manage their fleet of devices",
    "start": "329090",
    "end": "334200"
  },
  {
    "text": "at scale with features like onboarding of fleets of devices software updates",
    "start": "334200",
    "end": "339690"
  },
  {
    "text": "and better management AWS IOT device defender available later this year",
    "start": "339690",
    "end": "346680"
  },
  {
    "text": "improves security at the fleet level for IOT by detecting fraudulent behavior over a fleet of devices AWS IOT",
    "start": "346680",
    "end": "356190"
  },
  {
    "text": "analytics simplifies the ability to run sophisticated analytics on massive volumes of IOT data Amazon free artists",
    "start": "356190",
    "end": "364920"
  },
  {
    "text": "an operating system from much smaller devices facilitating cloud connectivity",
    "start": "364920",
    "end": "370200"
  },
  {
    "text": "for lower powered devices or typically microcontrollers and finally AWS IOT",
    "start": "370200",
    "end": "377100"
  },
  {
    "text": "one-click which helps customers in need of IOT for very simple action based use",
    "start": "377100",
    "end": "382110"
  },
  {
    "text": "cases and for which IOT may not be a core part of their business providing",
    "start": "382110",
    "end": "387630"
  },
  {
    "text": "the means to simply provide business actions with a one-click button execution with all the new",
    "start": "387630",
    "end": "396540"
  },
  {
    "text": "functionalities and services around AWS IOT customers can manage Lietz of devices securely and start",
    "start": "396540",
    "end": "402580"
  },
  {
    "text": "creating insights and control of the data they are managing however customers",
    "start": "402580",
    "end": "408159"
  },
  {
    "text": "have been asking us to extend intelligence to the edge the cloud is the logical placeholder for intelligence",
    "start": "408159",
    "end": "414729"
  },
  {
    "text": "and deep learning being able to leverage the almost infinite amount of cloud capacity to create the most complex and",
    "start": "414729",
    "end": "421360"
  },
  {
    "text": "efficient models but what if I need this intelligence at the edge in order to",
    "start": "421360",
    "end": "428979"
  },
  {
    "text": "achieve this we took the green grass platform already great for running local actions and local triggers state",
    "start": "428979",
    "end": "435309"
  },
  {
    "text": "management's and security and we improved it by adding over-the-air",
    "start": "435309",
    "end": "440529"
  },
  {
    "text": "updates for further management's of devices out in the field support for",
    "start": "440529",
    "end": "447039"
  },
  {
    "text": "more industry protocols like the OPC UA with more protocols coming and local",
    "start": "447039",
    "end": "453279"
  },
  {
    "text": "resource access within your lambda functions allowing customers to access their hardware from their lungta business logic and these three key",
    "start": "453279",
    "end": "461979"
  },
  {
    "text": "pieces were core to us being able to deliver the functionality we wanted local machine learning in ferns in green",
    "start": "461979",
    "end": "469119"
  },
  {
    "text": "grass why does this make sense machine learning inference at the edge",
    "start": "469119",
    "end": "475149"
  },
  {
    "text": "has numerous use cases for all industries whether in self-driving cars",
    "start": "475149",
    "end": "480579"
  },
  {
    "text": "where you want to detect everything happening in front and around the vehicle understand the images and drive",
    "start": "480579",
    "end": "486610"
  },
  {
    "text": "more safely or video surveillance where you require detecting shapes forms",
    "start": "486610",
    "end": "492639"
  },
  {
    "text": "people in a video feed in real-time and be able to take action analyze sound",
    "start": "492639",
    "end": "499389"
  },
  {
    "text": "recognize patterns in very noisy environments in robotics and",
    "start": "499389",
    "end": "504550"
  },
  {
    "text": "manufacturing machine learning can help improve how robots detect shapes or move around to improve efficiency for example",
    "start": "504550",
    "end": "513008"
  },
  {
    "text": "in the agricultural space customers like Blue River technology are using machine learning in AI to improve the efficiency",
    "start": "513009",
    "end": "520328"
  },
  {
    "text": "of how they spray fertilizes on the plants why spray whole fields when you",
    "start": "520329",
    "end": "526000"
  },
  {
    "text": "could spray only the plants in need optimization yield improvement and",
    "start": "526000",
    "end": "531250"
  },
  {
    "text": "working towards better and smarter agriculture the use cases are limitless",
    "start": "531250",
    "end": "538680"
  },
  {
    "text": "so we tried to understand the problem statement around bringing machine learning at the edge in machine learning",
    "start": "538680",
    "end": "545950"
  },
  {
    "text": "models are typically built and trained in the cloud and then running the cloud on incoming data with Greengrass machine",
    "start": "545950",
    "end": "553720"
  },
  {
    "text": "learning inference we are leveraging the cloud for its infinite computing capacity to build and train our models",
    "start": "553720",
    "end": "560130"
  },
  {
    "text": "but then we package and deploy these models and frameworks on our target edge",
    "start": "560130",
    "end": "565330"
  },
  {
    "text": "devices running Greengrass this enables running our models on our devices",
    "start": "565330",
    "end": "571210"
  },
  {
    "text": "without the need for connectivity to the cloud staying close to our data and with",
    "start": "571210",
    "end": "577540"
  },
  {
    "text": "this ability being able to take action on the data and the inferred responses in real-time the benefit of leveraging",
    "start": "577540",
    "end": "585490"
  },
  {
    "text": "Greengrass machine learning inference allows for developers and scientists to build and train their models repeatedly",
    "start": "585490",
    "end": "591760"
  },
  {
    "text": "in a cycle deploy them test them retrain them in the hope of creating smarter",
    "start": "591760",
    "end": "597190"
  },
  {
    "text": "models for their use cases by keeping the training and building of the models",
    "start": "597190",
    "end": "602560"
  },
  {
    "text": "in the cloud they are not constrained by the limits of their edge devices this",
    "start": "602560",
    "end": "608410"
  },
  {
    "text": "allows customers to derive great value from machine learning inference at the edge whether because of latency",
    "start": "608410",
    "end": "615040"
  },
  {
    "text": "requirements some data needs to be processed as soon as it is generated the",
    "start": "615040",
    "end": "620320"
  },
  {
    "text": "processing cannot wait for the transfer to the cloud and back down onto the device to make decisions calculations",
    "start": "620320",
    "end": "626800"
  },
  {
    "text": "need to be executed as close as possible to the data itself some use cases",
    "start": "626800",
    "end": "631870"
  },
  {
    "text": "generate extreme amounts of data and given physical networking capabilities at the edge transmitting all that data",
    "start": "631870",
    "end": "638320"
  },
  {
    "text": "would become very expensive to support some use cases don't always have",
    "start": "638320",
    "end": "643960"
  },
  {
    "text": "internet connectivity requiring the ability to make sense of the data without that vital connection to the",
    "start": "643960",
    "end": "649090"
  },
  {
    "text": "cloud finally privacy some data just cannot be transferred from one location to another",
    "start": "649090",
    "end": "654940"
  },
  {
    "text": "and we are already seeing great customer use cases leveraging Greengrass machine",
    "start": "654940",
    "end": "660430"
  },
  {
    "text": "learning inference sony has been using AWS Greengrass for its manufacture",
    "start": "660430",
    "end": "666970"
  },
  {
    "text": "requirements and now with Greengrass machine learning inference they are improving their manufacturing processes",
    "start": "666970",
    "end": "673449"
  },
  {
    "text": "by optimizing their local factory worker positioning they are also using AWS",
    "start": "673449",
    "end": "678550"
  },
  {
    "text": "Greengrass machine learning inference for predictive maintenance of their machinery they have seen great value in",
    "start": "678550",
    "end": "685689"
  },
  {
    "text": "the ability to customize their machine learning models without sizing limitations as well as being able to",
    "start": "685689",
    "end": "691480"
  },
  {
    "text": "address high-frequency sensing and anomaly detection in their machineries",
    "start": "691480",
    "end": "697199"
  },
  {
    "text": "nokia is leveraging Greengrass at the edge for machine learning inference for their video analytics solution by being",
    "start": "697199",
    "end": "704860"
  },
  {
    "text": "able to run their machine learning models right on their cameras Nokia are able to detect anomalies in traffic and",
    "start": "704860",
    "end": "711189"
  },
  {
    "text": "improve the functionalities of their traffic cameras video is very demanding",
    "start": "711189",
    "end": "716350"
  },
  {
    "text": "and in tough networking latency and bandwidth environments AWS Greengrass",
    "start": "716350",
    "end": "721750"
  },
  {
    "text": "machine learning inference has enabled them to reduce the amount of necessary data needing to be sent back to the",
    "start": "721750",
    "end": "727540"
  },
  {
    "text": "cloud significantly now machine learning",
    "start": "727540",
    "end": "733689"
  },
  {
    "text": "can be hard there are multiple steps first of all you need to collect and",
    "start": "733689",
    "end": "738699"
  },
  {
    "text": "move your data to the cloud process that data then build and train your models",
    "start": "738699",
    "end": "743850"
  },
  {
    "text": "once your model is ready you need to deploy your model on your devices whilst",
    "start": "743850",
    "end": "749139"
  },
  {
    "text": "you are trying to get your model and training right this is a very repetitive process and until now this could be very",
    "start": "749139",
    "end": "755829"
  },
  {
    "text": "difficult to achieve a very manual process because of the lack of managed",
    "start": "755829",
    "end": "761110"
  },
  {
    "text": "services to support optimizing your training and getting in into your devices then once you've deployed you",
    "start": "761110",
    "end": "769420"
  },
  {
    "text": "also need to package and provide a specific framework to run your models like MX net tensorflow cafe etc you need",
    "start": "769420",
    "end": "776860"
  },
  {
    "text": "to write your rap that will leverage your framework and models but also manage its deployment finally you may",
    "start": "776860",
    "end": "784149"
  },
  {
    "text": "need to access hardware capabilities of your device to improve the performance of your inference this is why Greengrass",
    "start": "784149",
    "end": "792189"
  },
  {
    "text": "machine learning inference helps facilitate most of these steps whatever",
    "start": "792189",
    "end": "797470"
  },
  {
    "text": "the case you start by training your models in the cloud we think the cloud is the best place to operate your training because of the",
    "start": "797470",
    "end": "804320"
  },
  {
    "text": "massive amount of computing power at your disposal also with unlimited storage capabilities",
    "start": "804320",
    "end": "809990"
  },
  {
    "text": "you can store very large amounts of training data then by deploying your",
    "start": "809990",
    "end": "815899"
  },
  {
    "text": "models to your devices you can benefit from improve latency by being as close as possible to your generated data",
    "start": "815899",
    "end": "822730"
  },
  {
    "text": "reduce bandwidth requirements you don't need to send all your generated data you",
    "start": "822730",
    "end": "827930"
  },
  {
    "text": "can filter or just send the results from your inference or you may simply benefit",
    "start": "827930",
    "end": "833720"
  },
  {
    "text": "from being able to support your use case when your deaded where your data cannot leave that physical location installing",
    "start": "833720",
    "end": "842000"
  },
  {
    "text": "AWS Greengrass on your device will tie everything for you and simplify the management of deploying your models and",
    "start": "842000",
    "end": "848240"
  },
  {
    "text": "application code on your device your trained models and application file UMDA",
    "start": "848240",
    "end": "854060"
  },
  {
    "text": "function get deployed onto your device then as your device's generate data you",
    "start": "854060",
    "end": "860329"
  },
  {
    "text": "can trigger your alumna functions locally and make inferences on that data this app this allows you to sense infer",
    "start": "860329",
    "end": "867709"
  },
  {
    "text": "and take action in real-time on your data locally at the edge on your device",
    "start": "867709",
    "end": "874029"
  },
  {
    "text": "finally you retain the total flexibility to send data back to the cloud you can",
    "start": "874029",
    "end": "880100"
  },
  {
    "text": "use Greengrass to filter out the noise from the data and only set the relevant samples or you can send the results from",
    "start": "880100",
    "end": "887120"
  },
  {
    "text": "your inference combining your inferred results with filtered data you can also",
    "start": "887120",
    "end": "893029"
  },
  {
    "text": "use this as a way to improve your models further by training your models again to redeploy updated versions let's have a",
    "start": "893029",
    "end": "901610"
  },
  {
    "text": "quick look how this works and looks within the AWS management console again",
    "start": "901610",
    "end": "907880"
  },
  {
    "text": "first you need to train your model and to do that you can leverage your own training systems or simply use Amazon",
    "start": "907880",
    "end": "914389"
  },
  {
    "text": "Sage Maker it's a great managed service to help facilitate the training and creation of machine learning models note",
    "start": "914389",
    "end": "922550"
  },
  {
    "text": "that if you want to understand Amazon sage maker better do tune into the sessions for my colleagues on that subject from an AWS Greengrass",
    "start": "922550",
    "end": "931069"
  },
  {
    "text": "perspective you start by creating a machine learning resource within your green grass group you",
    "start": "931069",
    "end": "936709"
  },
  {
    "text": "provide your model to that resource this model can be one you already have and",
    "start": "936709",
    "end": "941720"
  },
  {
    "text": "provide by an s3 bucket or you can simply use the output of a sage maker train model if you need hardware access",
    "start": "941720",
    "end": "950930"
  },
  {
    "text": "for your calculations you can access local hardware accelerators or specific hardware of your choosing",
    "start": "950930",
    "end": "957250"
  },
  {
    "text": "you specify the local resources your lambda functions and models may require",
    "start": "957250",
    "end": "962500"
  },
  {
    "text": "for example accessing a GPU or FPGA to speed up the inference no specific code",
    "start": "962500",
    "end": "969860"
  },
  {
    "text": "is required this is set up within the Greengrass configuration in this example we're using an NVIDIA GPU by creating a",
    "start": "969860",
    "end": "977449"
  },
  {
    "text": "local resource on slash dev slash Nvidia slash GPU zero finally as discussed",
    "start": "977449",
    "end": "985670"
  },
  {
    "text": "packaging your frameworks for your specific devices and getting them to work properly on your hardware is not",
    "start": "985670",
    "end": "991490"
  },
  {
    "text": "trivial so we've helped simplify this by providing MX net packages pre-built and",
    "start": "991490",
    "end": "997399"
  },
  {
    "text": "ready to download for a subset of hardware platforms Upolu lake and nvidia",
    "start": "997399",
    "end": "1003069"
  },
  {
    "text": "jets and platforms as well as raspberry pi of course you can also choose to",
    "start": "1003069",
    "end": "1008980"
  },
  {
    "text": "build your own frame where yourself if you choose and it's not limited to MX net we've just made it bit easier for",
    "start": "1008980",
    "end": "1014800"
  },
  {
    "text": "you by providing the precompiled libraries for you to use with all that",
    "start": "1014800",
    "end": "1020500"
  },
  {
    "text": "you're ready to go a great example of a product leveraging AWS Greengrass",
    "start": "1020500",
    "end": "1027159"
  },
  {
    "text": "machine learning inference is the AWS deep lens we introduced the deep lens at",
    "start": "1027159",
    "end": "1034270"
  },
  {
    "text": "reinvent last year and customers will be able to purchase it later this year built in partnership with Intel",
    "start": "1034270",
    "end": "1041168"
  },
  {
    "text": "leveraging atom processors with Apollo Lake architecture in AWS Greengrass the",
    "start": "1041169",
    "end": "1047020"
  },
  {
    "text": "AWS deep lens is a video camera that runs computer vision models you can",
    "start": "1047020",
    "end": "1052720"
  },
  {
    "text": "build your own image recognition models and deploy them directly on the deep lens device a great way to get started",
    "start": "1052720",
    "end": "1059830"
  },
  {
    "text": "easily to look out for its availability on amazon.com",
    "start": "1059830",
    "end": "1065580"
  },
  {
    "text": "to wrap up this presentation I thought I'd run through a small demo with you if",
    "start": "1066350",
    "end": "1071390"
  },
  {
    "text": "you don't yet have a deep lense device why should that stop you in building your own small connected camera and",
    "start": "1071390",
    "end": "1077240"
  },
  {
    "text": "start recognizing objects so let's build our own so for this demo I'll be using a",
    "start": "1077240",
    "end": "1090410"
  },
  {
    "text": "Raspberry Pi the Raspberry Pi camera and the Raspberry Pi sense hat I'll be setting up multiple local",
    "start": "1090410",
    "end": "1096890"
  },
  {
    "text": "resources to use my camera within my lambda functions to use my camera I'll",
    "start": "1096890",
    "end": "1102020"
  },
  {
    "text": "connect to slash dev slash VCS M and slash dev slash VCH IQ and to use the",
    "start": "1102020",
    "end": "1109010"
  },
  {
    "text": "sense hat I'll connect to slash dev slash FB one as you can see I'm only",
    "start": "1109010",
    "end": "1115280"
  },
  {
    "text": "using the PI sense hat for its LEDs of course I'll be using AWS Greengrass",
    "start": "1115280",
    "end": "1121070"
  },
  {
    "text": "machine learning inference to detect objects in my images for this I'll be",
    "start": "1121070",
    "end": "1126230"
  },
  {
    "text": "using a squeeze neck model squeeze net is a lower footprint model requiring less parameters whilst maintaining a",
    "start": "1126230",
    "end": "1132710"
  },
  {
    "text": "high enough accuracy it's a great model for low-power devices like the Raspberry",
    "start": "1132710",
    "end": "1138590"
  },
  {
    "text": "Pi and since my Raspberry Pi doesn't have a GPU it's a great fit so let's",
    "start": "1138590",
    "end": "1144530"
  },
  {
    "text": "switch to my AWS management console for AWS Greengrass this is the aid of the",
    "start": "1144530",
    "end": "1152419"
  },
  {
    "text": "u.s. Greengrass console from here your start defining your new green grass",
    "start": "1152419",
    "end": "1158120"
  },
  {
    "text": "cores groups and devices I've already created a group for this demo so let's",
    "start": "1158120",
    "end": "1164539"
  },
  {
    "text": "go have a look as you can see I already",
    "start": "1164539",
    "end": "1169820"
  },
  {
    "text": "have multiple green grass groups for projects I've been working on the green grass group defines a green grass",
    "start": "1169820",
    "end": "1176030"
  },
  {
    "text": "configuration in a way it packages all the IOT resources that are part of a",
    "start": "1176030",
    "end": "1181280"
  },
  {
    "text": "green grass deployment let's have a look at my innovate 2018 group the management",
    "start": "1181280",
    "end": "1190730"
  },
  {
    "text": "console for my group shows the following first I can see all the deployments I",
    "start": "1190730",
    "end": "1195799"
  },
  {
    "text": "made to this green grass group as you can see I think quite busy deploying numerous times",
    "start": "1195799",
    "end": "1202150"
  },
  {
    "text": "effectively trying to get my model and demo to work each deployment is a",
    "start": "1202150",
    "end": "1207470"
  },
  {
    "text": "package that will contain my Lum two functions my in machine learning models and all configurations intrinsic to the",
    "start": "1207470",
    "end": "1214070"
  },
  {
    "text": "Greengrass group I can see the subscriptions cores devices lambda",
    "start": "1214070",
    "end": "1220490"
  },
  {
    "text": "function and resources specific to this group for this presentation let's have a",
    "start": "1220490",
    "end": "1228080"
  },
  {
    "text": "look at the basics for now let's have a look at my Greengrass course for this group in a group you'll define the first",
    "start": "1228080",
    "end": "1237590"
  },
  {
    "text": "device the Greengrass core in my group i only have one core if we look at its",
    "start": "1237590",
    "end": "1244460"
  },
  {
    "text": "details you can see it actually is an IOT device or thing it will have its own",
    "start": "1244460",
    "end": "1251840"
  },
  {
    "text": "AWS IOT x.509 certificate the Greengrass",
    "start": "1251840",
    "end": "1256940"
  },
  {
    "text": "core has its own shadow and you can actor act with it the same way you would",
    "start": "1256940",
    "end": "1262370"
  },
  {
    "text": "as a normal eight of the US IOT thing the connectivity information provides",
    "start": "1262370",
    "end": "1268790"
  },
  {
    "text": "details on how a device locally within a group could reach the green grass core on the local network coming back to my",
    "start": "1268790",
    "end": "1278420"
  },
  {
    "text": "group",
    "start": "1278420",
    "end": "1280750"
  },
  {
    "text": "you can also define within your group any other potential IOT devices that you",
    "start": "1285530",
    "end": "1290630"
  },
  {
    "text": "want to connect to the Greengrass core in my demo I don't have any other",
    "start": "1290630",
    "end": "1295640"
  },
  {
    "text": "devices I'll only be leveraging the Greengrass core device before having a look at the",
    "start": "1295640",
    "end": "1302030"
  },
  {
    "text": "lambda configuration let's have a look at the resources that I've configured for this group this page will list all",
    "start": "1302030",
    "end": "1310250"
  },
  {
    "text": "of the configured local resources from my Greengrass group for this demo I've",
    "start": "1310250",
    "end": "1315410"
  },
  {
    "text": "set up multiple resources three device resources and one model resource the",
    "start": "1315410",
    "end": "1323900"
  },
  {
    "text": "three device resources refer to the three different peripherals or hardware devices on my Raspberry Pi if say I",
    "start": "1323900",
    "end": "1331370"
  },
  {
    "text": "wanted to use a GPU this is where I would declare its configuration and source for the demo I'll be using the",
    "start": "1331370",
    "end": "1340220"
  },
  {
    "text": "sense Hat device which is located on / dance / FB 1 and the camera which is",
    "start": "1340220",
    "end": "1346190"
  },
  {
    "text": "located on /dev / v CH IQ and slash dev / vc sm for the video interface and",
    "start": "1346190",
    "end": "1354320"
  },
  {
    "text": "video share memory respectively basically these are the Linux device files I will need to read and write to",
    "start": "1354320",
    "end": "1361340"
  },
  {
    "text": "in order to interact with my hardware peripherals let's have a look at my",
    "start": "1361340",
    "end": "1366650"
  },
  {
    "text": "model resource here I've defined a",
    "start": "1366650",
    "end": "1373070"
  },
  {
    "text": "machine learning resource you can select to bring your own pre-trained model by",
    "start": "1373070",
    "end": "1378080"
  },
  {
    "text": "storing it in an s3 bucket or you can provide a training job source using",
    "start": "1378080",
    "end": "1385340"
  },
  {
    "text": "Amazon sage maker if I select the training job source we can select the",
    "start": "1385340",
    "end": "1391100"
  },
  {
    "text": "training job from my sage maker jobs for",
    "start": "1391100",
    "end": "1396230"
  },
  {
    "text": "the purpose of this demo I'm using my pre trained model and I'm loading it it from s3 bucket then I need to select a",
    "start": "1396230",
    "end": "1405950"
  },
  {
    "text": "local directory on my device where the model resource files will be extracted",
    "start": "1405950",
    "end": "1412100"
  },
  {
    "text": "to note that these will be tied to the context of the lambda function using",
    "start": "1412100",
    "end": "1417650"
  },
  {
    "text": "that resource and this is a great segue to having a",
    "start": "1417650",
    "end": "1422850"
  },
  {
    "text": "look at my lambda functions you can see",
    "start": "1422850",
    "end": "1428460"
  },
  {
    "text": "here I have two lambda functions they serve two very different purposes note",
    "start": "1428460",
    "end": "1436200"
  },
  {
    "text": "that these Lumbee functions are actually stored and managed from a versioning an alias aliasing perspective in the AWS",
    "start": "1436200",
    "end": "1443280"
  },
  {
    "text": "lambda management console these are the same lambda functions you are accustomed to writing and managing the only",
    "start": "1443280",
    "end": "1450270"
  },
  {
    "text": "difference is where they will actually be running and how my first function the",
    "start": "1450270",
    "end": "1458670"
  },
  {
    "text": "Greengrass object classification for function is the lambda function that will be doing the inference on my images",
    "start": "1458670",
    "end": "1465420"
  },
  {
    "text": "by using my squeezed net pre-trained model you can configure your lambda functions to run indefinitely or",
    "start": "1465420",
    "end": "1471990"
  },
  {
    "text": "triggered on demand this function runs indefinitely we will be analyzing the",
    "start": "1471990",
    "end": "1478170"
  },
  {
    "text": "video stream one image every 30 seconds so we'll let it run all the time no need",
    "start": "1478170",
    "end": "1484020"
  },
  {
    "text": "to trigger it on demand if we look at the resources this lambda function is",
    "start": "1484020",
    "end": "1489270"
  },
  {
    "text": "using you can see I've associated three of the resources we declared in the",
    "start": "1489270",
    "end": "1494670"
  },
  {
    "text": "previous step I need my lambda function to access the two video camera or device",
    "start": "1494670",
    "end": "1500160"
  },
  {
    "text": "resources and the squeeze net model resource with these three resources my",
    "start": "1500160",
    "end": "1505650"
  },
  {
    "text": "l'homme de function can easily start capturing images from the video feed and send them to the model for image",
    "start": "1505650",
    "end": "1511260"
  },
  {
    "text": "recognition now my second lambda",
    "start": "1511260",
    "end": "1517740"
  },
  {
    "text": "function is the very simple alumna function that will act on the recognizer information from the first lambda",
    "start": "1517740",
    "end": "1523650"
  },
  {
    "text": "function this function does not run indefinitely and is triggered on demand I want this function to parse the",
    "start": "1523650",
    "end": "1530610"
  },
  {
    "text": "inferred results and trigger the LEDs on my raspberry pi sense hat as you'd",
    "start": "1530610",
    "end": "1538050"
  },
  {
    "text": "expect for this demo I'll connect this lambda function to my sense hat device",
    "start": "1538050",
    "end": "1543360"
  },
  {
    "text": "resource if my model detects a coffee mug then I want my LEDs to turn blue if",
    "start": "1543360",
    "end": "1550200"
  },
  {
    "text": "not they should stay red like there now it's a simple demo to showcase how",
    "start": "1550200",
    "end": "1555580"
  },
  {
    "text": "you can act on your data at the edge on inferred data no need for internet",
    "start": "1555580",
    "end": "1561100"
  },
  {
    "text": "access you can act in real time all the sensing inferring and acting on the data is happening locally on my Raspberry Pi",
    "start": "1561100",
    "end": "1568860"
  },
  {
    "text": "last bit we need to look at is connecting everything together we need",
    "start": "1568860",
    "end": "1577600"
  },
  {
    "text": "to define our subscriptions this tells Greengrass how the data gets connected from one grade grass resource",
    "start": "1577600",
    "end": "1583270"
  },
  {
    "text": "to the next I've written my recognition lambda function the green grass object",
    "start": "1583270",
    "end": "1589000"
  },
  {
    "text": "classification for function to publish the results of the inference on the innovate 2018 slash inference MQTT topic",
    "start": "1589000",
    "end": "1597570"
  },
  {
    "text": "so I've created a subscription that tells my sense hat lambda function to",
    "start": "1597570",
    "end": "1602770"
  },
  {
    "text": "subscribe to that topic with my recognition lambda function as its source this is this will allow for the",
    "start": "1602770",
    "end": "1609640"
  },
  {
    "text": "recognition results the inferred information to be passed to my led function if my model recognizes a coffee",
    "start": "1609640",
    "end": "1616870"
  },
  {
    "text": "mug go blue okay so once all of this is properly configured I can simply deploy",
    "start": "1616870",
    "end": "1624760"
  },
  {
    "text": "on to my device for the interest of time I've pre deployed this configuration so",
    "start": "1624760",
    "end": "1632290"
  },
  {
    "text": "let's have a look at the incoming data since I'm running inference at the edge",
    "start": "1632290",
    "end": "1637780"
  },
  {
    "text": "I'm actually not sending the data back to the cloud so let's login to my raspberry pi to look at what my lambda",
    "start": "1637780",
    "end": "1644560"
  },
  {
    "text": "function is receiving",
    "start": "1644560",
    "end": "1647640"
  },
  {
    "text": "as you can see from the feed my demo sends data every three seconds and the",
    "start": "1656620",
    "end": "1663430"
  },
  {
    "text": "laptop I've placed in front of the scene is being detected here called the",
    "start": "1663430",
    "end": "1668500"
  },
  {
    "text": "notebook small disclaimer here my model isn't perfect depending on the scene in",
    "start": "1668500",
    "end": "1674500"
  },
  {
    "text": "front of the camera the model is detecting some pretty obscure shapes with pretty low probabilities the",
    "start": "1674500",
    "end": "1681820"
  },
  {
    "text": "probably the probabilities aren't great for those detection 'he's showcasing i may need to train my model a bit more in",
    "start": "1681820",
    "end": "1688450"
  },
  {
    "text": "order to get better results this is a great case for leveraging sage maker to",
    "start": "1688450",
    "end": "1693670"
  },
  {
    "text": "improve my model for now this will be enough all I'm trying to do is detect",
    "start": "1693670",
    "end": "1698830"
  },
  {
    "text": "the presence of a coffee mug so what happens if I place my coffee mug in the",
    "start": "1698830",
    "end": "1704410"
  },
  {
    "text": "scene there it is my LEDs have turned",
    "start": "1704410",
    "end": "1710620"
  },
  {
    "text": "blue and we can see from the feed that we have detected a coffee mug this time with this short small",
    "start": "1710620",
    "end": "1717220"
  },
  {
    "text": "probability if I remove the mug we should turn back to red great it works",
    "start": "1717220",
    "end": "1730920"
  },
  {
    "text": "so there it is as you saw from this simple demo Greengrass machine learning",
    "start": "1735059",
    "end": "1740440"
  },
  {
    "text": "inference allows you to simply deploy your models onto an edge device and start acting on the inferred data I've",
    "start": "1740440",
    "end": "1747880"
  },
  {
    "text": "been trying to detect a coffee mug but imagine what else you could detect and the different use cases maybe you'd like",
    "start": "1747880",
    "end": "1754600"
  },
  {
    "text": "to recognize faces at the edge or detect types of objects you do not want to see",
    "start": "1754600",
    "end": "1759850"
  },
  {
    "text": "in a secure location use cases are infinite I'm curious to know what you",
    "start": "1759850",
    "end": "1766000"
  },
  {
    "text": "will build with Greengrass machine learning inference and I hope this session enabled you to understand the",
    "start": "1766000",
    "end": "1771190"
  },
  {
    "text": "service better after today if you want to take your AWS knowledge to the next",
    "start": "1771190",
    "end": "1777190"
  },
  {
    "text": "level you have several options available to you to gain more confidence and",
    "start": "1777190",
    "end": "1782200"
  },
  {
    "text": "hands-on experience with AWS watch our instructional videos and explore the self-paced labs",
    "start": "1782200",
    "end": "1788429"
  },
  {
    "text": "adesh only you can attend our instructor-led classes by qualified AWS instructors and",
    "start": "1788429",
    "end": "1794729"
  },
  {
    "text": "learn how to design deploy and operate highly available cost-effective and secure applications on AWS and finally",
    "start": "1794729",
    "end": "1803549"
  },
  {
    "text": "don't forget to validate your technical expertise with AWS and use practice exams to help you prepare your AWS",
    "start": "1803549",
    "end": "1810720"
  },
  {
    "text": "certification finally thank you for attending this session today and",
    "start": "1810720",
    "end": "1816210"
  },
  {
    "text": "sticking it out until the very end of the presentation please take the time to provide feedback on today's event so",
    "start": "1816210",
    "end": "1822989"
  },
  {
    "text": "that we can improve the event experience for you in the future thank you",
    "start": "1822989",
    "end": "1829099"
  }
]