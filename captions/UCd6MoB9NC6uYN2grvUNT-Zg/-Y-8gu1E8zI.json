[
  {
    "text": "hello I am rope principal database",
    "start": "179",
    "end": "3240"
  },
  {
    "text": "engineer for the Bible fish project at",
    "start": "3240",
    "end": "5400"
  },
  {
    "text": "AWS",
    "start": "5400",
    "end": "6779"
  },
  {
    "text": "in this series of Bible fish videos",
    "start": "6779",
    "end": "8880"
  },
  {
    "text": "today we will take a look at another",
    "start": "8880",
    "end": "10800"
  },
  {
    "text": "aspect of the Bible fish compost tool",
    "start": "10800",
    "end": "13080"
  },
  {
    "text": "namely the different ways of processing",
    "start": "13080",
    "end": "15660"
  },
  {
    "text": "and analyzing SQL and ddl input files",
    "start": "15660",
    "end": "20300"
  },
  {
    "text": "Compass is a standalone tool to help",
    "start": "20340",
    "end": "22859"
  },
  {
    "text": "determine whether a SQL server-based",
    "start": "22859",
    "end": "24900"
  },
  {
    "text": "application can be migrated to",
    "start": "24900",
    "end": "26880"
  },
  {
    "text": "bubblefish for Aurora postgres",
    "start": "26880",
    "end": "29340"
  },
  {
    "text": "Compass performs a detailed analysis of",
    "start": "29340",
    "end": "32099"
  },
  {
    "text": "all SQL features in your application and",
    "start": "32099",
    "end": "34380"
  },
  {
    "text": "reports whether they are supported by",
    "start": "34380",
    "end": "36059"
  },
  {
    "text": "bubblefish or not",
    "start": "36059",
    "end": "37800"
  },
  {
    "text": "based on the compass report you can",
    "start": "37800",
    "end": "40260"
  },
  {
    "text": "determine whether a migration of your",
    "start": "40260",
    "end": "42059"
  },
  {
    "text": "application to Bible fees may be",
    "start": "42059",
    "end": "43800"
  },
  {
    "text": "feasible so running Compass should",
    "start": "43800",
    "end": "46379"
  },
  {
    "text": "always be the first step when",
    "start": "46379",
    "end": "48000"
  },
  {
    "text": "considering a migration to bubble fish",
    "start": "48000",
    "end": "50940"
  },
  {
    "text": "in an earlier video in this series with",
    "start": "50940",
    "end": "53039"
  },
  {
    "text": "an introduction to the compass tool we",
    "start": "53039",
    "end": "55320"
  },
  {
    "text": "looked at the basic way to run compas it",
    "start": "55320",
    "end": "58379"
  },
  {
    "text": "is invoked from the command line and you",
    "start": "58379",
    "end": "60360"
  },
  {
    "text": "have to specify a report name and an",
    "start": "60360",
    "end": "62219"
  },
  {
    "text": "input file containing the SQL ddl code",
    "start": "62219",
    "end": "64500"
  },
  {
    "text": "to be analyzed compass then generates a",
    "start": "64500",
    "end": "67320"
  },
  {
    "text": "report and automatically opens it in",
    "start": "67320",
    "end": "69540"
  },
  {
    "text": "your browser",
    "start": "69540",
    "end": "72140"
  },
  {
    "text": "if you have multiple ddl input files for",
    "start": "72420",
    "end": "75540"
  },
  {
    "text": "example for multiple databases that are",
    "start": "75540",
    "end": "77880"
  },
  {
    "text": "used by your application you can process",
    "start": "77880",
    "end": "80340"
  },
  {
    "text": "these together by simply specifying the",
    "start": "80340",
    "end": "83040"
  },
  {
    "text": "file names on the command line",
    "start": "83040",
    "end": "84960"
  },
  {
    "text": "you can also use wildcard characters if",
    "start": "84960",
    "end": "87299"
  },
  {
    "text": "that is more convenient",
    "start": "87299",
    "end": "90439"
  },
  {
    "text": "another way to specify input files is to",
    "start": "92040",
    "end": "94860"
  },
  {
    "text": "add them one by one to an existing",
    "start": "94860",
    "end": "97200"
  },
  {
    "text": "report for this use the flag add",
    "start": "97200",
    "end": "100680"
  },
  {
    "text": "with this flag compos will analyze the",
    "start": "100680",
    "end": "103320"
  },
  {
    "text": "input file and then generate a report",
    "start": "103320",
    "end": "105180"
  },
  {
    "text": "for all files that were added in case",
    "start": "105180",
    "end": "108180"
  },
  {
    "text": "you need to overwrite an already added",
    "start": "108180",
    "end": "110159"
  },
  {
    "text": "file use the flag replace",
    "start": "110159",
    "end": "112979"
  },
  {
    "text": "normally you probably would not use this",
    "start": "112979",
    "end": "115439"
  },
  {
    "text": "step-by-step approach but you would just",
    "start": "115439",
    "end": "117600"
  },
  {
    "text": "specify all input files in one go",
    "start": "117600",
    "end": "120540"
  },
  {
    "text": "but as we will see this approach can be",
    "start": "120540",
    "end": "123000"
  },
  {
    "text": "useful for more complex cases",
    "start": "123000",
    "end": "127040"
  },
  {
    "text": "when reading a file the question is",
    "start": "127399",
    "end": "130020"
  },
  {
    "text": "always how the file is encoded",
    "start": "130020",
    "end": "132780"
  },
  {
    "text": "Compass checks the so-called bomb bytes",
    "start": "132780",
    "end": "135840"
  },
  {
    "text": "to detect the different Unicode formats",
    "start": "135840",
    "end": "138720"
  },
  {
    "text": "for example when you generate a ddl file",
    "start": "138720",
    "end": "141540"
  },
  {
    "text": "with SQL Server management Studio the",
    "start": "141540",
    "end": "143700"
  },
  {
    "text": "file is encoded as utf-16 by default",
    "start": "143700",
    "end": "147540"
  },
  {
    "text": "Compass stores all its internal files as",
    "start": "147540",
    "end": "150360"
  },
  {
    "text": "utf-8",
    "start": "150360",
    "end": "151980"
  },
  {
    "text": "so when it detects that the input file",
    "start": "151980",
    "end": "153900"
  },
  {
    "text": "is utf-16 it will convert it to utf-8",
    "start": "153900",
    "end": "157200"
  },
  {
    "text": "First",
    "start": "157200",
    "end": "158819"
  },
  {
    "text": "unfortunately there is no standardized",
    "start": "158819",
    "end": "161340"
  },
  {
    "text": "or guaranteed way to determine the",
    "start": "161340",
    "end": "163260"
  },
  {
    "text": "encoding of just any file",
    "start": "163260",
    "end": "165360"
  },
  {
    "text": "if you process an input file with an",
    "start": "165360",
    "end": "167519"
  },
  {
    "text": "unknown or incorrect encoding you may",
    "start": "167519",
    "end": "169739"
  },
  {
    "text": "get garbage and as a result a lot of",
    "start": "169739",
    "end": "171959"
  },
  {
    "text": "syntax errors in that case you need to",
    "start": "171959",
    "end": "174840"
  },
  {
    "text": "find out what the file's correct",
    "start": "174840",
    "end": "176459"
  },
  {
    "text": "encoding is and specify the encoding",
    "start": "176459",
    "end": "178860"
  },
  {
    "text": "explicitly with the flag encoding note",
    "start": "178860",
    "end": "182220"
  },
  {
    "text": "that when you specify the encoding all",
    "start": "182220",
    "end": "184980"
  },
  {
    "text": "input files on that command line will be",
    "start": "184980",
    "end": "187140"
  },
  {
    "text": "processed with the encoding that you",
    "start": "187140",
    "end": "189239"
  },
  {
    "text": "specified so if you have files with",
    "start": "189239",
    "end": "191819"
  },
  {
    "text": "different encodings you should use",
    "start": "191819",
    "end": "193680"
  },
  {
    "text": "multiple steps using the add flag as",
    "start": "193680",
    "end": "196980"
  },
  {
    "text": "shown here",
    "start": "196980",
    "end": "199519"
  },
  {
    "text": "if you have multiple applications it may",
    "start": "199940",
    "end": "203340"
  },
  {
    "text": "be convenient to analyze them together",
    "start": "203340",
    "end": "205319"
  },
  {
    "text": "and to show each individual application",
    "start": "205319",
    "end": "207720"
  },
  {
    "text": "in the resulting report for this you can",
    "start": "207720",
    "end": "210840"
  },
  {
    "text": "use the flag report option apps with",
    "start": "210840",
    "end": "213959"
  },
  {
    "text": "this flag each line in the report will",
    "start": "213959",
    "end": "216599"
  },
  {
    "text": "show how many cases were found for each",
    "start": "216599",
    "end": "219180"
  },
  {
    "text": "application",
    "start": "219180",
    "end": "221719"
  },
  {
    "text": "so far we have assumed that the name of",
    "start": "222420",
    "end": "224580"
  },
  {
    "text": "an application is the same as the name",
    "start": "224580",
    "end": "226680"
  },
  {
    "text": "of its input file like any company 1 or",
    "start": "226680",
    "end": "229680"
  },
  {
    "text": "any company too but this does not have",
    "start": "229680",
    "end": "232379"
  },
  {
    "text": "to be the case for example an",
    "start": "232379",
    "end": "234480"
  },
  {
    "text": "application can consist of multiple",
    "start": "234480",
    "end": "236400"
  },
  {
    "text": "input files but you want to use the same",
    "start": "236400",
    "end": "238860"
  },
  {
    "text": "application name for all of them",
    "start": "238860",
    "end": "241200"
  },
  {
    "text": "you can specify the application name",
    "start": "241200",
    "end": "243360"
  },
  {
    "text": "with a flag app name",
    "start": "243360",
    "end": "245459"
  },
  {
    "text": "this is also useful when input files",
    "start": "245459",
    "end": "247739"
  },
  {
    "text": "have more abstract names that may not be",
    "start": "247739",
    "end": "249959"
  },
  {
    "text": "immediately clear to everyone as for",
    "start": "249959",
    "end": "252540"
  },
  {
    "text": "example shown here with different",
    "start": "252540",
    "end": "255120"
  },
  {
    "text": "application names you probably want to",
    "start": "255120",
    "end": "257280"
  },
  {
    "text": "show these in the report so use the flag",
    "start": "257280",
    "end": "259260"
  },
  {
    "text": "report option apps",
    "start": "259260",
    "end": "262820"
  },
  {
    "text": "sometimes an application is not",
    "start": "263100",
    "end": "265139"
  },
  {
    "text": "represented by a single file but by many",
    "start": "265139",
    "end": "267660"
  },
  {
    "text": "files organized in a directory tree",
    "start": "267660",
    "end": "270900"
  },
  {
    "text": "you can process these with the flag",
    "start": "270900",
    "end": "272759"
  },
  {
    "text": "recursive with this flag if an input",
    "start": "272759",
    "end": "275820"
  },
  {
    "text": "file is a directory all files in a",
    "start": "275820",
    "end": "278220"
  },
  {
    "text": "directory tree will be processed as",
    "start": "278220",
    "end": "280259"
  },
  {
    "text": "input typically you'd want to specify",
    "start": "280259",
    "end": "282900"
  },
  {
    "text": "the application name to be used if you",
    "start": "282900",
    "end": "285180"
  },
  {
    "text": "don't the name of the directory will be",
    "start": "285180",
    "end": "287220"
  },
  {
    "text": "used as the application name",
    "start": "287220",
    "end": "290780"
  },
  {
    "text": "when using wildcards or when processing",
    "start": "292380",
    "end": "295440"
  },
  {
    "text": "a directory tree there could be files",
    "start": "295440",
    "end": "297419"
  },
  {
    "text": "that are obviously not containing SQL",
    "start": "297419",
    "end": "299699"
  },
  {
    "text": "codes such as PowerPoint files or images",
    "start": "299699",
    "end": "302759"
  },
  {
    "text": "by default such file types are ignored",
    "start": "302759",
    "end": "305639"
  },
  {
    "text": "by compass",
    "start": "305639",
    "end": "307199"
  },
  {
    "text": "should you want to process such files",
    "start": "307199",
    "end": "309419"
  },
  {
    "text": "anyway then use the flag include",
    "start": "309419",
    "end": "312479"
  },
  {
    "text": "if you want to exclude additional file",
    "start": "312479",
    "end": "314759"
  },
  {
    "text": "types use the flag exclude to see which",
    "start": "314759",
    "end": "318540"
  },
  {
    "text": "file types are excluded by default use",
    "start": "318540",
    "end": "320880"
  },
  {
    "text": "help exclude",
    "start": "320880",
    "end": "324199"
  },
  {
    "text": "sometimes it may be most efficient to",
    "start": "325940",
    "end": "328680"
  },
  {
    "text": "First import all files and then perform",
    "start": "328680",
    "end": "330660"
  },
  {
    "text": "the analysis you can suppress the",
    "start": "330660",
    "end": "333000"
  },
  {
    "text": "initial analysis with the flag import",
    "start": "333000",
    "end": "335340"
  },
  {
    "text": "only",
    "start": "335340",
    "end": "336600"
  },
  {
    "text": "once you have imported all required",
    "start": "336600",
    "end": "338699"
  },
  {
    "text": "files you can then perform the analysis",
    "start": "338699",
    "end": "340740"
  },
  {
    "text": "using the flag analyze we've seen it",
    "start": "340740",
    "end": "343380"
  },
  {
    "text": "like before in an earlier video",
    "start": "343380",
    "end": "346199"
  },
  {
    "text": "when you specify multiple input files",
    "start": "346199",
    "end": "348600"
  },
  {
    "text": "step by step it may save time by",
    "start": "348600",
    "end": "350880"
  },
  {
    "text": "avoiding doing the analysis twice",
    "start": "350880",
    "end": "352740"
  },
  {
    "text": "especially for large input files",
    "start": "352740",
    "end": "357138"
  },
  {
    "text": "up until this point we have mostly",
    "start": "358440",
    "end": "360900"
  },
  {
    "text": "discussed how Compass can analyze ddl",
    "start": "360900",
    "end": "363180"
  },
  {
    "text": "code which typically is server-side SQL",
    "start": "363180",
    "end": "365820"
  },
  {
    "text": "code that defines the schema",
    "start": "365820",
    "end": "367860"
  },
  {
    "text": "however client applications also send",
    "start": "367860",
    "end": "371100"
  },
  {
    "text": "SQL statements to the database server",
    "start": "371100",
    "end": "373139"
  },
  {
    "text": "and it may be necessary to analyze these",
    "start": "373139",
    "end": "375900"
  },
  {
    "text": "two to analyze client-side SQL",
    "start": "375900",
    "end": "378539"
  },
  {
    "text": "statements you first need to capture",
    "start": "378539",
    "end": "380340"
  },
  {
    "text": "them Compass can handle two types of",
    "start": "380340",
    "end": "383039"
  },
  {
    "text": "captured query formats for SQL Server",
    "start": "383039",
    "end": "385800"
  },
  {
    "text": "profiler and for extended events in both",
    "start": "385800",
    "end": "388740"
  },
  {
    "text": "cases the capture files have to be in",
    "start": "388740",
    "end": "391139"
  },
  {
    "text": "XML format",
    "start": "391139",
    "end": "392880"
  },
  {
    "text": "to process such XML files use the flag",
    "start": "392880",
    "end": "395819"
  },
  {
    "text": "import format or import fmt with the",
    "start": "395819",
    "end": "399720"
  },
  {
    "text": "argument as shown here",
    "start": "399720",
    "end": "403160"
  },
  {
    "text": "when you use this option Compass",
    "start": "403680",
    "end": "405840"
  },
  {
    "text": "extracts the captured SQL statements",
    "start": "405840",
    "end": "407819"
  },
  {
    "text": "from the XML file and removes duplicate",
    "start": "407819",
    "end": "410520"
  },
  {
    "text": "queries we consider two queries",
    "start": "410520",
    "end": "412680"
  },
  {
    "text": "duplicate if they differ only in some",
    "start": "412680",
    "end": "414900"
  },
  {
    "text": "constant value for example a product ID",
    "start": "414900",
    "end": "417539"
  },
  {
    "text": "number",
    "start": "417539",
    "end": "418620"
  },
  {
    "text": "this is relevant because captured",
    "start": "418620",
    "end": "420720"
  },
  {
    "text": "queries often contain many very similar",
    "start": "420720",
    "end": "423780"
  },
  {
    "text": "queries which are only different in",
    "start": "423780",
    "end": "426000"
  },
  {
    "text": "their primary key value",
    "start": "426000",
    "end": "427680"
  },
  {
    "text": "if you don't want to de-duplicate",
    "start": "427680",
    "end": "429840"
  },
  {
    "text": "specify the flag no ddub",
    "start": "429840",
    "end": "433139"
  },
  {
    "text": "after did application the queries are",
    "start": "433139",
    "end": "435840"
  },
  {
    "text": "written to the file in the directory",
    "start": "435840",
    "end": "437580"
  },
  {
    "text": "extracted SQL and then that file is",
    "start": "437580",
    "end": "440280"
  },
  {
    "text": "analyzed by compass",
    "start": "440280",
    "end": "442380"
  },
  {
    "text": "note that you cannot combine processing",
    "start": "442380",
    "end": "445139"
  },
  {
    "text": "of captured query files with regular ddl",
    "start": "445139",
    "end": "447720"
  },
  {
    "text": "files so either you have to use separate",
    "start": "447720",
    "end": "450000"
  },
  {
    "text": "reports or you have to use the",
    "start": "450000",
    "end": "452160"
  },
  {
    "text": "step-by-step approach using the add flag",
    "start": "452160",
    "end": "456800"
  },
  {
    "text": "and now for the last Topic in this video",
    "start": "458699",
    "end": "462360"
  },
  {
    "text": "sometimes you may see Compass report an",
    "start": "462360",
    "end": "465000"
  },
  {
    "text": "error almost always that means that",
    "start": "465000",
    "end": "467819"
  },
  {
    "text": "there is something invalid in the input",
    "start": "467819",
    "end": "469500"
  },
  {
    "text": "and compost cannot parse it so it",
    "start": "469500",
    "end": "471960"
  },
  {
    "text": "reports a syntax error",
    "start": "471960",
    "end": "474060"
  },
  {
    "text": "I sometimes get questions from Compass",
    "start": "474060",
    "end": "476220"
  },
  {
    "text": "users who think that these errors mean",
    "start": "476220",
    "end": "478139"
  },
  {
    "text": "that Compass itself is broken and they",
    "start": "478139",
    "end": "480180"
  },
  {
    "text": "ask me to fix it",
    "start": "480180",
    "end": "481740"
  },
  {
    "text": "but you can easily easily see where",
    "start": "481740",
    "end": "483300"
  },
  {
    "text": "these errors come from since any syntax",
    "start": "483300",
    "end": "485280"
  },
  {
    "text": "errors are written to a file in a",
    "start": "485280",
    "end": "487199"
  },
  {
    "text": "directory error batches for your",
    "start": "487199",
    "end": "489180"
  },
  {
    "text": "inspection",
    "start": "489180",
    "end": "490560"
  },
  {
    "text": "such errors are usually caused by",
    "start": "490560",
    "end": "492840"
  },
  {
    "text": "something like using an incorrect",
    "start": "492840",
    "end": "494759"
  },
  {
    "text": "encoding for the input file or there may",
    "start": "494759",
    "end": "497280"
  },
  {
    "text": "be something invalid like a syntax error",
    "start": "497280",
    "end": "499500"
  },
  {
    "text": "in the input file",
    "start": "499500",
    "end": "501060"
  },
  {
    "text": "when there is an error Compass will",
    "start": "501060",
    "end": "503280"
  },
  {
    "text": "print it on your screen and also logo",
    "start": "503280",
    "end": "505440"
  },
  {
    "text": "the new file in the directory error",
    "start": "505440",
    "end": "507539"
  },
  {
    "text": "batches that file contains the actual",
    "start": "507539",
    "end": "510000"
  },
  {
    "text": "batch that was processed plus the error",
    "start": "510000",
    "end": "512399"
  },
  {
    "text": "message by the compass parser so usually",
    "start": "512399",
    "end": "515039"
  },
  {
    "text": "you will see pretty quickly what the",
    "start": "515039",
    "end": "516839"
  },
  {
    "text": "problem is here it seems the SQL code",
    "start": "516839",
    "end": "519659"
  },
  {
    "text": "contains placeholders that probably have",
    "start": "519659",
    "end": "521940"
  },
  {
    "text": "to be replaced by some sort of",
    "start": "521940",
    "end": "523560"
  },
  {
    "text": "preprocessor but apparently that",
    "start": "523560",
    "end": "525899"
  },
  {
    "text": "pre-processing hasn't happened for our",
    "start": "525899",
    "end": "527640"
  },
  {
    "text": "input files so what we have here is",
    "start": "527640",
    "end": "530279"
  },
  {
    "text": "invalid transact SQL syntax and",
    "start": "530279",
    "end": "532560"
  },
  {
    "text": "therefore we get a syntax error",
    "start": "532560",
    "end": "536180"
  },
  {
    "text": "so as we've seen Compass supports",
    "start": "537320",
    "end": "540660"
  },
  {
    "text": "multiple ways of processing and",
    "start": "540660",
    "end": "542399"
  },
  {
    "text": "analyzing SQL and ddl files",
    "start": "542399",
    "end": "545220"
  },
  {
    "text": "please download a compass tool as shown",
    "start": "545220",
    "end": "547860"
  },
  {
    "text": "here and try it for yourself",
    "start": "547860",
    "end": "550500"
  },
  {
    "text": "for now thank you for watching",
    "start": "550500",
    "end": "554660"
  }
]