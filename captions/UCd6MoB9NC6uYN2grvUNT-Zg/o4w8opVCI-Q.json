[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "okay good afternoon everyone thanks for joining us today my name is Danielle i'm",
    "start": "880",
    "end": "5920"
  },
  {
    "text": "a solutions architect with AWS i'm based in London i'm joined on stage today by",
    "start": "5920",
    "end": "10960"
  },
  {
    "text": "Dan who's a senior manager with the AWS developers tools uh this is a 300 level",
    "start": "10960",
    "end": "16880"
  },
  {
    "text": "session so we assume that you are familiar with some concept around containers ECS and Docker",
    "start": "16880",
    "end": "24480"
  },
  {
    "start": "24000",
    "end": "24000"
  },
  {
    "text": "uh what we want to do in this session is provide you with some uh highlight and",
    "start": "24480",
    "end": "30080"
  },
  {
    "text": "uh why you may want to use containers and how they can help you to deliver uh",
    "start": "30080",
    "end": "35600"
  },
  {
    "text": "better quality software uh we want to dive deep into some uh tools and",
    "start": "35600",
    "end": "41600"
  },
  {
    "text": "services that you can use to implement the concept that we'll be talking about today and finally uh we will show you",
    "start": "41600",
    "end": "47920"
  },
  {
    "text": "how to actually do that we'll have few demos uh along the way as well",
    "start": "47920",
    "end": "53520"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "i'm sure you u already all familiar with uh containers and the benefits of using",
    "start": "53520",
    "end": "59039"
  },
  {
    "text": "them but uh just to be on the same page let's get just go uh through them very quickly uh containers are similar to uh",
    "start": "59039",
    "end": "66320"
  },
  {
    "text": "hardware virtualization like Amazon EC2 but instead of uh separating uh on a",
    "start": "66320",
    "end": "72479"
  },
  {
    "text": "virtual machine uh containers use uh process isolation on the operating",
    "start": "72479",
    "end": "78560"
  },
  {
    "text": "system containers are uh very portable uh that's probably one of the main",
    "start": "78560",
    "end": "83600"
  },
  {
    "text": "advantages that that we'll see today uh when you build a container image that image will be the same doesn't matter",
    "start": "83600",
    "end": "90720"
  },
  {
    "text": "where you run it or when you run it uh one of the advantage is their speed uh",
    "start": "90720",
    "end": "96720"
  },
  {
    "text": "the container uh they start very fast the operating system is already running so they're very uh quick when they start",
    "start": "96720",
    "end": "104079"
  },
  {
    "text": "and finally they're very resource efficient as well you can specify exactly the resources that your",
    "start": "104079",
    "end": "109520"
  },
  {
    "text": "containers need in terms of memory CPU network um and usually that will give",
    "start": "109520",
    "end": "115759"
  },
  {
    "text": "you a a better resource utilization when compared to running the same processes on virtual",
    "start": "115759",
    "end": "121880"
  },
  {
    "text": "machines so how can we make use of those uh benefits when uh running our",
    "start": "121880",
    "end": "128000"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "continuous delivery workflow continuous delivery is uh all about reducing the",
    "start": "128000",
    "end": "133520"
  },
  {
    "text": "risks and delivery value by producing high quality software that means that uh",
    "start": "133520",
    "end": "139440"
  },
  {
    "text": "we want our software to be in a state that we can deploy it at any time throughout its life cycle it means that",
    "start": "139440",
    "end": "146400"
  },
  {
    "text": "whenever we make some changes to our code we want to get some feedback uh that is fast and automated and also that",
    "start": "146400",
    "end": "153680"
  },
  {
    "text": "means that uh we can pick any version of our software and deploy it to any",
    "start": "153680",
    "end": "158800"
  },
  {
    "text": "environment that that we may have because containers provide a very uh",
    "start": "158800",
    "end": "164480"
  },
  {
    "text": "predictable and consistent environment they can help reducing the risks and also thanks to their lightweight that",
    "start": "164480",
    "end": "170319"
  },
  {
    "text": "will help with speed and agility as I mentioned earlier we have a",
    "start": "170319",
    "end": "175840"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "couple of demos along the way uh we're going to be using a a very simple uh robin race application it's an Instagram",
    "start": "175840",
    "end": "183120"
  },
  {
    "text": "clone so you should all be familiar with what it does uh that uh application is",
    "start": "183120",
    "end": "188959"
  },
  {
    "text": "fronted by an engineext proxy and these two components will be running in docker containers we'll also be using uh an uh",
    "start": "188959",
    "end": "197519"
  },
  {
    "text": "postcross SQL database and we'll be running that on on Amazon RDS",
    "start": "197519",
    "end": "203519"
  },
  {
    "start": "203000",
    "end": "203000"
  },
  {
    "text": "we uh ultimately uh will deploying our containers on Amazon EC2 container",
    "start": "203519",
    "end": "209519"
  },
  {
    "text": "service uh which is a very scalable uh container management service it doesn't",
    "start": "209519",
    "end": "215840"
  },
  {
    "text": "matter whether you want to run few containers thousands of containers uh Amazon ECS will provide you the uh the",
    "start": "215840",
    "end": "222640"
  },
  {
    "text": "performances and it will scale uh uh seamlessly um we also provide with",
    "start": "222640",
    "end": "228720"
  },
  {
    "text": "Amazon ECS uh few options for placing your containers for scheduuling your",
    "start": "228720",
    "end": "234000"
  },
  {
    "text": "containers on the cluster as we've heard this morning from Verer uh there was a",
    "start": "234000",
    "end": "239840"
  },
  {
    "text": "an improvement in one of the uh containers that we provide but we also expose the cluster state through the API",
    "start": "239840",
    "end": "246959"
  },
  {
    "text": "through a set of APIs so that you can implement your own uh your own c your own uh scheduleuler if you want to and",
    "start": "246959",
    "end": "254799"
  },
  {
    "text": "uh Amazon ECS is also highly integrated with the existing uh um AWS services",
    "start": "254799",
    "end": "261120"
  },
  {
    "text": "such as elastic load balancing or cloudatch uh so that you can use the same features and tool that you're",
    "start": "261120",
    "end": "266800"
  },
  {
    "text": "already used to uh just to remind you some of the key concepts of uh Amazon",
    "start": "266800",
    "end": "272000"
  },
  {
    "text": "ECS uh we have a cluster which is a a pool of resources that your containers",
    "start": "272000",
    "end": "278000"
  },
  {
    "text": "can uh can use uh those resources come from container instances which are",
    "start": "278000",
    "end": "283919"
  },
  {
    "text": "basically EC2 instances where you can run your containers as I said they are",
    "start": "283919",
    "end": "289040"
  },
  {
    "text": "your uh uh EC2 instances so you own them you control them you can login into them",
    "start": "289040",
    "end": "294160"
  },
  {
    "text": "and you can see how things runs under the hood and then we have the concept of",
    "start": "294160",
    "end": "299520"
  },
  {
    "text": "task definition which is basically where you define what containers you want to",
    "start": "299520",
    "end": "304639"
  },
  {
    "text": "uh to run what images they use uh how many resources and so on and then you",
    "start": "304639",
    "end": "310080"
  },
  {
    "text": "can schedule those uh task definition onto uh a container instance and that",
    "start": "310080",
    "end": "316320"
  },
  {
    "text": "would uh run a task basically",
    "start": "316320",
    "end": "321000"
  },
  {
    "start": "321000",
    "end": "321000"
  },
  {
    "text": "for um our application uh for our sample application uh the typical uh workflow",
    "start": "321520",
    "end": "329120"
  },
  {
    "text": "will look something like this we have our source um that we write on our",
    "start": "329120",
    "end": "334320"
  },
  {
    "text": "development machine on on our laptop for example we make some changes push them",
    "start": "334320",
    "end": "339440"
  },
  {
    "text": "to a code repository typically that uh would trigger a build on our build",
    "start": "339440",
    "end": "345240"
  },
  {
    "text": "environment that would create the new artifacts for our new version of uh of",
    "start": "345240",
    "end": "350400"
  },
  {
    "text": "our code once we are uh once those artifacts are ready then we can test them make sure that they don't break any",
    "start": "350400",
    "end": "357600"
  },
  {
    "text": "existing functionality for example and then we are finally ready for deployment",
    "start": "357600",
    "end": "363440"
  },
  {
    "text": "and uh ideally we would want to have uh an orchestration layer as well that can",
    "start": "363440",
    "end": "369520"
  },
  {
    "text": "uh take care of all these uh process uh we now dive deep into each of these",
    "start": "369520",
    "end": "374639"
  },
  {
    "text": "section and we see how containers can help at each at each stage",
    "start": "374639",
    "end": "380400"
  },
  {
    "text": "as we said uh the first step is actually your uh application code this is where",
    "start": "380400",
    "end": "386319"
  },
  {
    "text": "you write the code your uh your machine for example your ID uh you write some",
    "start": "386319",
    "end": "391520"
  },
  {
    "start": "387000",
    "end": "387000"
  },
  {
    "text": "code uh make some changes test it locally uh once you're happy with the changes you can finally push that to a",
    "start": "391520",
    "end": "398720"
  },
  {
    "text": "code repository and that can be a distributed code repository so that multiple uh developers can contribute to",
    "start": "398720",
    "end": "405680"
  },
  {
    "text": "the same uh to the same project so one of the tools that we want to",
    "start": "405680",
    "end": "411680"
  },
  {
    "start": "410000",
    "end": "410000"
  },
  {
    "text": "highlight for uh for this particular stage is uh AWS code commit uh which is",
    "start": "411680",
    "end": "417120"
  },
  {
    "text": "a managed uh private git repository uh so you don't have to worry about uh",
    "start": "417120",
    "end": "423120"
  },
  {
    "text": "installing uh uh your source um your source control system you don't have to",
    "start": "423120",
    "end": "428960"
  },
  {
    "text": "worry about backing that up scaling it we take care uh of that for you um code",
    "start": "428960",
    "end": "434800"
  },
  {
    "text": "commit also encrypts your data in transit and at rest so we can provide a",
    "start": "434800",
    "end": "440240"
  },
  {
    "text": "secure solution for uh for your code and thanks to the integration with uh AWS",
    "start": "440240",
    "end": "445840"
  },
  {
    "text": "identity and access management you can provide user uh user level permission on",
    "start": "445840",
    "end": "450960"
  },
  {
    "text": "on each of your uh on on each of your repository and finally uh we run uh code",
    "start": "450960",
    "end": "457199"
  },
  {
    "text": "commit on a scalable and highly available uh sol u infrastructure so",
    "start": "457199",
    "end": "462479"
  },
  {
    "text": "your repositories uh are available and uh they can scale uh seamlessly um there",
    "start": "462479",
    "end": "469199"
  },
  {
    "text": "are also alternatives of course to to code commit uh probably the most uh common one would be uh github and",
    "start": "469199",
    "end": "476319"
  },
  {
    "text": "bitbucket for our demos we'll actually be using a private repository on on",
    "start": "476319",
    "end": "482759"
  },
  {
    "text": "GitHub when we talk about uh containers we refer more and more often to docker",
    "start": "482759",
    "end": "489120"
  },
  {
    "start": "483000",
    "end": "483000"
  },
  {
    "text": "containers uh Docker is now available on a a variety of Linux distri distribution",
    "start": "489120",
    "end": "495199"
  },
  {
    "text": "with a a recent kernel uh it's also available on Mac and Windows uh through",
    "start": "495199",
    "end": "500400"
  },
  {
    "text": "the Docker toolbox tool um one of the interesting things about Docker is that",
    "start": "500400",
    "end": "506560"
  },
  {
    "text": "you can define uh the application environment uh that uh your application",
    "start": "506560",
    "end": "512399"
  },
  {
    "text": "will be running in and any additional dependencies using a Docker file uh this",
    "start": "512399",
    "end": "518479"
  },
  {
    "start": "518000",
    "end": "518000"
  },
  {
    "text": "is uh the docker file for our sample app so we start from uh a base uh Ruby uh",
    "start": "518479",
    "end": "525839"
  },
  {
    "text": "Ruby image we then install some additional packages using the uh operating system package manager uh apt",
    "start": "525839",
    "end": "533040"
  },
  {
    "text": "in this case uh we then install the uh application dependencies using the gem",
    "start": "533040",
    "end": "539200"
  },
  {
    "text": "file and finally we put we copy our uh source code uh on on these uh on on that",
    "start": "539200",
    "end": "546080"
  },
  {
    "text": "image we now can use this docker file to create an image to create a container",
    "start": "546080",
    "end": "551200"
  },
  {
    "text": "image that then will be used that throughout our software uh uh life cycle",
    "start": "551200",
    "end": "556560"
  },
  {
    "text": "so in the build test and deployment uh stage one of the uh most interesting",
    "start": "556560",
    "end": "563519"
  },
  {
    "start": "561000",
    "end": "561000"
  },
  {
    "text": "thing about docker is actually the uh tools uh ecosystem that it comes with",
    "start": "563519",
    "end": "569680"
  },
  {
    "text": "one of these tool is compose and compose allows that allows us to uh run uh",
    "start": "569680",
    "end": "575640"
  },
  {
    "text": "multicontainer application uh in a very in a very simple way uh we can simply",
    "start": "575640",
    "end": "580800"
  },
  {
    "text": "define each component using a docker file like what we just saw now uh and",
    "start": "580800",
    "end": "586320"
  },
  {
    "text": "then we can specify how the different components are linked together or they",
    "start": "586320",
    "end": "591519"
  },
  {
    "text": "relate to each other in a docker compose yl file and then with a with a simple command do docker compose app we can",
    "start": "591519",
    "end": "598959"
  },
  {
    "text": "start all the components at once again this is the uh compose yl for",
    "start": "598959",
    "end": "607120"
  },
  {
    "text": "our sample app we have two components like what we mentioned at the beginning a proxy and the web we build the proxy",
    "start": "607120",
    "end": "614800"
  },
  {
    "text": "from a docker file that is in the proxy directory and then we map the port 80 on",
    "start": "614800",
    "end": "622000"
  },
  {
    "text": "the container to port 80 on the on our host uh so that we can actually access",
    "start": "622000",
    "end": "627760"
  },
  {
    "text": "the uh the container and finally we link our proxy component to our web component",
    "start": "627760",
    "end": "635040"
  },
  {
    "text": "in a similar way for the doc for the web component we build that from a docker file in the web directory as we said",
    "start": "635040",
    "end": "641600"
  },
  {
    "text": "it's a rail sub so we specify the command that we want to use to start that application and we also expose a",
    "start": "641600",
    "end": "648079"
  },
  {
    "text": "port but that port will only be exposed to any uh uh container that is linked to",
    "start": "648079",
    "end": "653360"
  },
  {
    "text": "uh to our web component not on the uh on the host if you're already using uh compose",
    "start": "653360",
    "end": "661200"
  },
  {
    "text": "you'll be glad to hear about these this new tool that uh we announced this morning the ECS CLI uh with DCS CLI you",
    "start": "661200",
    "end": "668560"
  },
  {
    "text": "can now run uh those uh complex application that you define in your docker compos on an ECS cluster and you",
    "start": "668560",
    "end": "677040"
  },
  {
    "text": "can also scale that cluster up and down as needed the ECS CLI is available today",
    "start": "677040",
    "end": "683120"
  },
  {
    "text": "uh you can go and download it it's also uh available on our uh GitHub repository",
    "start": "683120",
    "end": "688240"
  },
  {
    "text": "so please contribute to that as well this is how uh it would work uh we",
    "start": "688240",
    "end": "694800"
  },
  {
    "text": "simply configure the tool by specifying our AWS credentials the region we may",
    "start": "694800",
    "end": "700079"
  },
  {
    "text": "want to use and the cluster and the CS cluster we want to use and then we can run any uh com any compose command for",
    "start": "700079",
    "end": "707600"
  },
  {
    "text": "example build in this case to build our images or app to start uh to start our",
    "start": "707600",
    "end": "713399"
  },
  {
    "text": "application in this case I'm using the local option so that those containers",
    "start": "713399",
    "end": "719040"
  },
  {
    "text": "will be starting on my on my local machine for Our demo will actually be",
    "start": "719040",
    "end": "724880"
  },
  {
    "text": "using Docker Compose and I'll just switch now to the demo to u show",
    "start": "724880",
    "end": "732319"
  },
  {
    "text": "that okay so I've already built my uh my images uh so all I um all I need to do",
    "start": "736440",
    "end": "744800"
  },
  {
    "text": "now is simply run my Docker Compose app",
    "start": "744800",
    "end": "750839"
  },
  {
    "text": "this is uh using my images starting them",
    "start": "753440",
    "end": "759440"
  },
  {
    "text": "[Music]",
    "start": "759440",
    "end": "763479"
  },
  {
    "text": "oops okay my uh application is now up and running i can switch to",
    "start": "774600",
    "end": "783360"
  },
  {
    "text": "the I can switch to the browser and point my browser to the uh IP address of",
    "start": "784760",
    "end": "792240"
  },
  {
    "text": "my uh virtual machine where I'm running Docker and this is my uh my app up and",
    "start": "792240",
    "end": "798880"
  },
  {
    "text": "running uh I can then register for example uh specifying uh all the uh all",
    "start": "798880",
    "end": "805600"
  },
  {
    "text": "the parameters that are needed",
    "start": "805600",
    "end": "809639"
  },
  {
    "text": "[Music]",
    "start": "823860",
    "end": "827079"
  },
  {
    "text": "yep [Music] [Applause]",
    "start": "831040",
    "end": "837860"
  },
  {
    "text": "so I can just again try to login with the same password apparently I cannot",
    "start": "842880",
    "end": "851360"
  },
  {
    "text": "type okay okay so this is uh as we said it's a it's a simple app it's an Instagram clone so I'm not going through",
    "start": "854440",
    "end": "861600"
  },
  {
    "text": "the uh the features and the functionality of this app uh but let's say that we want to make some changes",
    "start": "861600",
    "end": "866959"
  },
  {
    "text": "now to these uh to this application so let's uh terminate this one and switch to my",
    "start": "866959",
    "end": "875920"
  },
  {
    "text": "source code here can you read this text or should I make it a bit",
    "start": "875920",
    "end": "881480"
  },
  {
    "text": "bigger it's good okay so let's say I want to uh change the the title uh let's",
    "start": "881480",
    "end": "887760"
  },
  {
    "text": "call this app photochromatinvent and also I want to",
    "start": "887760",
    "end": "893440"
  },
  {
    "text": "change uh some of the background images to make them make them a bit more",
    "start": "893440",
    "end": "900320"
  },
  {
    "text": "contextual to uh to our reinvent um I've made my changes now so",
    "start": "900320",
    "end": "906800"
  },
  {
    "text": "all I need to do is rebuild my uh my images and then up again with my Docker",
    "start": "906800",
    "end": "917519"
  },
  {
    "text": "compose once the app is up and running again I can now refresh this and I will",
    "start": "926440",
    "end": "934639"
  },
  {
    "text": "see the new uh the new version of the app new images",
    "start": "934639",
    "end": "939680"
  },
  {
    "text": "and new title i'll pass it on now to uh to Dan we'll go through the uh the build and",
    "start": "939680",
    "end": "946639"
  },
  {
    "text": "the test phase",
    "start": "946639",
    "end": "950040"
  },
  {
    "text": "all right so we've learned how to get a Docker based application running in a",
    "start": "953360",
    "end": "960279"
  },
  {
    "text": "development setup using Docker Compose and also using the ECS CLI but this",
    "start": "960279",
    "end": "967040"
  },
  {
    "text": "whole talk is about continuous delivery so what we'll learn now is how we take this Docker setup and automate it",
    "start": "967040",
    "end": "973360"
  },
  {
    "text": "starting with our build and our test such that we can put the whole thing together in a completely automatic uh",
    "start": "973360",
    "end": "978880"
  },
  {
    "text": "continuous delivery pipeline that will eventually take us from a git push all the way to production so let's learn how",
    "start": "978880",
    "end": "985839"
  },
  {
    "text": "we do this it's reversed",
    "start": "985839",
    "end": "992920"
  },
  {
    "start": "993000",
    "end": "993000"
  },
  {
    "text": "we have a number of options for automating builds in continuous delivery pipelines uh many of which are provided",
    "start": "995199",
    "end": "1000800"
  },
  {
    "text": "by AWS partners a good example and the one that we'll be using for this demo is",
    "start": "1000800",
    "end": "1006360"
  },
  {
    "text": "Jenkins in a combination with plugins coming from CloudB cloudbes also",
    "start": "1006360",
    "end": "1012639"
  },
  {
    "text": "provides an enterprise uh continuous delivery solution but we won't be getting into that one in this talk other",
    "start": "1012639",
    "end": "1019360"
  },
  {
    "text": "providers include Salano Labs again full continuous delivery targeting ECA uh",
    "start": "1019360",
    "end": "1024640"
  },
  {
    "text": "targeting Amazon ECS worker code ship and shippable all of whom can be used to",
    "start": "1024640",
    "end": "1030959"
  },
  {
    "text": "target Amazon ECSbased workloads but for the purposes of this talk we're going to focus on a simple use of Jenkins which",
    "start": "1030959",
    "end": "1037918"
  },
  {
    "text": "is one of the more popular solutions in the market so why Jenkins it's it's simple",
    "start": "1037919",
    "end": "1044880"
  },
  {
    "text": "to set up it's extensible it provides for flexible able builds it supports Ant",
    "start": "1044880",
    "end": "1050160"
  },
  {
    "text": "and Maven out of the box it now has support for building Docker images without writing any code courtesy of",
    "start": "1050160",
    "end": "1056720"
  },
  {
    "text": "CloudBeast plugins and you can take Jenkins jobs and run them themselves in",
    "start": "1056720",
    "end": "1062559"
  },
  {
    "text": "Docker containers which we're going to see a demo of fairly soon all again through plugins with minimal or little",
    "start": "1062559",
    "end": "1068559"
  },
  {
    "text": "code and configuration needed so we're going to focus on the CloudB's",
    "start": "1068559",
    "end": "1075520"
  },
  {
    "start": "1072000",
    "end": "1072000"
  },
  {
    "text": "Docker build and publish plugin as the main part of our build if you recall from Daniellea's portion we ran Docker",
    "start": "1075520",
    "end": "1082559"
  },
  {
    "text": "Compose build which created and built two containers what we have to do during",
    "start": "1082559",
    "end": "1088000"
  },
  {
    "text": "our build is we have to get our automated build to build the same two containers from two different",
    "start": "1088000",
    "end": "1093200"
  },
  {
    "text": "directories and automatically publish them to a registry and the Docker build",
    "start": "1093200",
    "end": "1098240"
  },
  {
    "text": "and publish plugin will do this for us again with no code",
    "start": "1098240",
    "end": "1102960"
  },
  {
    "text": "needed from here we're going to switch into a brief demo where we'll walk through the real",
    "start": "1103640",
    "end": "1110320"
  },
  {
    "text": "settings so what we're looking at right now is a Jenkins tab on the settings for",
    "start": "1113799",
    "end": "1119200"
  },
  {
    "text": "our build now for those who are familiar with Jenkins this is a freestyle project you can create one of these simply by",
    "start": "1119200",
    "end": "1124960"
  },
  {
    "text": "going to Jacobs and creating a new freestyle project and that will give you all the options you need uh we've given",
    "start": "1124960",
    "end": "1130559"
  },
  {
    "text": "the project a basic name photogram build we will skip over a few sections",
    "start": "1130559",
    "end": "1136880"
  },
  {
    "text": "that we'll get to later when we talk about configuring this in code pipeline down the road but for now let's focus on",
    "start": "1136880",
    "end": "1143280"
  },
  {
    "text": "the docker build and publish section so the first piece of building and publish",
    "start": "1143280",
    "end": "1148320"
  },
  {
    "text": "is to pick the name of the repository where we're going to push right now we have a custom repository sitting it's a",
    "start": "1148320",
    "end": "1155280"
  },
  {
    "text": "public repository sitting in DockerHub and that's where we're pushing our images next and very important we",
    "start": "1155280",
    "end": "1162160"
  },
  {
    "text": "associate a tag with our image one of the features of Docker when you push to",
    "start": "1162160",
    "end": "1167520"
  },
  {
    "text": "a registry is that you can place a tag name on your images so you can have an image with a distinct name and many",
    "start": "1167520",
    "end": "1172960"
  },
  {
    "text": "different tags we pick a tag that varies based on the build number the reason we",
    "start": "1172960",
    "end": "1179120"
  },
  {
    "text": "do this is for repeatability that way we know that if we just ran build number",
    "start": "1179120",
    "end": "1184520"
  },
  {
    "text": "37 vc_37 is the tag that contains the docker container that was precisely",
    "start": "1184520",
    "end": "1190480"
  },
  {
    "text": "created from that build this is going to be important if we ever need to roll back or produce a repeatable build which",
    "start": "1190480",
    "end": "1196320"
  },
  {
    "text": "is a very critical component of continuous delivery uh in some cases we could set",
    "start": "1196320",
    "end": "1202080"
  },
  {
    "text": "server credentials in this case we don't need them and registry credentials to let us push to the",
    "start": "1202080",
    "end": "1207640"
  },
  {
    "text": "registry and then we'll go into the advanced tab this section is important we have to specify the directory the",
    "start": "1207640",
    "end": "1214160"
  },
  {
    "text": "Docker file lives in if you recall from looking at the docker composyl file",
    "start": "1214160",
    "end": "1219280"
  },
  {
    "text": "earlier we had two containers each of which lived in a separate subdirectory each of which contained a docker file",
    "start": "1219280",
    "end": "1225520"
  },
  {
    "text": "and this setting specifies that we have a docker file under the web subdirectory so that this configuration",
    "start": "1225520",
    "end": "1233520"
  },
  {
    "text": "will let us build the web container automatically we then repeat a similar process for the proxy container for our",
    "start": "1233520",
    "end": "1240080"
  },
  {
    "text": "engine X once again we give it a repository name it's slightly different it has the proxy we tag it based on the",
    "start": "1240080",
    "end": "1246960"
  },
  {
    "text": "build number set our credentials and we go into the advanced tab and this time we",
    "start": "1246960",
    "end": "1252880"
  },
  {
    "text": "specify that the doc docker file lives under proxy that way it will use a different Docker file and create the",
    "start": "1252880",
    "end": "1259280"
  },
  {
    "text": "engine X instead of accidentally creating our Rails app twice we will get to there are some more",
    "start": "1259280",
    "end": "1265919"
  },
  {
    "text": "configurations needed to work the build into the full continuous delivery pipeline which we'll get to a little bit later when we put everything together",
    "start": "1265919",
    "end": "1272720"
  },
  {
    "text": "now we'll we'll swing back to our slides escape",
    "start": "1272720",
    "end": "1280840"
  },
  {
    "text": "F5 got it so we I mentioned the registry and we",
    "start": "1280840",
    "end": "1289440"
  },
  {
    "start": "1281000",
    "end": "1281000"
  },
  {
    "text": "were using DockerHub that's what we're using for the purposes of this demo but as announced this morning another option",
    "start": "1289440",
    "end": "1295760"
  },
  {
    "text": "is coming up soon and that is ECS itself will host private Docker registries the",
    "start": "1295760",
    "end": "1301280"
  },
  {
    "text": "ECS hosted registries the Amazon EC2 container registry as we call it is a private Docker registry it's V2 it",
    "start": "1301280",
    "end": "1309039"
  },
  {
    "text": "supports full AWS authentication via IM and it supports low latency pulls push",
    "start": "1309039",
    "end": "1315520"
  },
  {
    "text": "and inspection and still this is not the only other alternative you can DockerHub",
    "start": "1315520",
    "end": "1321600"
  },
  {
    "text": "supports private registries for a fee you can use them through DockerHub and through our AWS marketplace docker acts",
    "start": "1321600",
    "end": "1329840"
  },
  {
    "text": "as a partner and gives you what's called the Docker trusted registry which can let you spin up your own Docker registry",
    "start": "1329840",
    "end": "1336080"
  },
  {
    "text": "on your own EC2 hardware if you so choose regardless of which method you",
    "start": "1336080",
    "end": "1341840"
  },
  {
    "text": "and on top of that you can actually simply take the open source Docker registry and self-host it the nice thing",
    "start": "1341840",
    "end": "1347840"
  },
  {
    "text": "about the Docker build and publish plugin is it's completely agnostic to the registry you use pick any of these",
    "start": "1347840",
    "end": "1353039"
  },
  {
    "text": "and your build process stays pretty much the same the only thing that changes is the address of the server and the",
    "start": "1353039",
    "end": "1358480"
  },
  {
    "text": "credential system that you use to talk to",
    "start": "1358480",
    "end": "1362240"
  },
  {
    "text": "it so now we're going to talk about test and testing is important because",
    "start": "1363720",
    "end": "1369760"
  },
  {
    "start": "1369000",
    "end": "1369000"
  },
  {
    "text": "you can't actually have continuous delivery if you're not testing anything it's not very wise to get push your",
    "start": "1369760",
    "end": "1375440"
  },
  {
    "text": "changes straight through to production without running any tests so test automation is pretty",
    "start": "1375440",
    "end": "1380760"
  },
  {
    "text": "critical as with the build we're going to be using Jenkins to automate it but first let's get into how",
    "start": "1380760",
    "end": "1387760"
  },
  {
    "text": "what we're the platform we're going to use to run our tests and how we've constructed it we're using because we're running a",
    "start": "1387760",
    "end": "1394960"
  },
  {
    "text": "Ruby app we're using a popular framework for Ruby testing called RSpec now for those of you who are familiar with Ruby",
    "start": "1394960",
    "end": "1401200"
  },
  {
    "text": "on Rails you may know RSpec in its traditional use to write unit tests for Rails sites typically RSpec runs",
    "start": "1401200",
    "end": "1407679"
  },
  {
    "text": "directly against what's called the rack middleware server letting you easily write unit tests that have a very uh",
    "start": "1407679",
    "end": "1414720"
  },
  {
    "text": "simple script like feature to let you test your site the problem with these",
    "start": "1414720",
    "end": "1420559"
  },
  {
    "text": "tests is that they don't hit live endpoints they patch directly into the rack server though so they could literally only run in your development",
    "start": "1420559",
    "end": "1426240"
  },
  {
    "text": "environment and only function as unit tests but that's not what we want to do here we want an integration test we want",
    "start": "1426240",
    "end": "1431760"
  },
  {
    "text": "to have tests to verify that the live en environment that we've deployed our code to is actually functioning",
    "start": "1431760",
    "end": "1438440"
  },
  {
    "text": "correctly fortunately there are tools that let us run ourspec against live sites the one I'm using is called Copy",
    "start": "1438440",
    "end": "1445200"
  },
  {
    "text": "Bar WebKit it uses an internal headless WebKit browser to direct the same RSpec",
    "start": "1445200",
    "end": "1450559"
  },
  {
    "text": "code that you would use as a unit test against a live site the only rub is that it relies on a fair amount of native",
    "start": "1450559",
    "end": "1457279"
  },
  {
    "text": "dependencies including a headless XS server called XVFB which have some trickery to them and can occasionally",
    "start": "1457279",
    "end": "1464159"
  },
  {
    "text": "get stuck running and leave your machine in a little bit of an odd state but when you use Docker and containers these",
    "start": "1464159",
    "end": "1469840"
  },
  {
    "text": "become much less of a problem and we'll learn how this",
    "start": "1469840",
    "end": "1474559"
  },
  {
    "text": "works uh we're going to automate this test using Jenkins",
    "start": "1475640",
    "end": "1480880"
  },
  {
    "text": "and when we run the test we're going to take we're going to go a step further than what we did with the build and we're actually going to run the tests",
    "start": "1480880",
    "end": "1487200"
  },
  {
    "text": "themselves on a Dockerbased slave so we're taking it to the next level this is going to involve another",
    "start": "1487200",
    "end": "1494640"
  },
  {
    "start": "1492000",
    "end": "1492000"
  },
  {
    "text": "plugin from CloudB and this plugin is known as the CloudB Jenkins EC2 plugin if you're familiar with Jenkins you'll",
    "start": "1494640",
    "end": "1502880"
  },
  {
    "text": "know that it's a master slave architecture so you have a main machine which is called the master and that's actually how we ran our builds it's just",
    "start": "1502880",
    "end": "1509279"
  },
  {
    "text": "one box it runs your configures your jobs and runs everything you can also configure Jenkins in a distributed mode",
    "start": "1509279",
    "end": "1515679"
  },
  {
    "text": "which is called master slave when you use slaves you set up additional machines and they can run additional",
    "start": "1515679",
    "end": "1522400"
  },
  {
    "text": "jobs even running them in parallel get you scaling get you speed under normal circumstances you have to preconfigure",
    "start": "1522400",
    "end": "1529120"
  },
  {
    "text": "your slaves and leave them resident which is can be a bit of a pain if your slaves are running carrying a lot of",
    "start": "1529120",
    "end": "1534640"
  },
  {
    "text": "dependencies around needed to run your test code with Docker and with ECS and",
    "start": "1534640",
    "end": "1540000"
  },
  {
    "text": "with this and with the ECS plugin however you can configure slaves such",
    "start": "1540000",
    "end": "1545279"
  },
  {
    "text": "that the slave is spun up as a container on your ECS cluster it runs your test or",
    "start": "1545279",
    "end": "1550799"
  },
  {
    "text": "your job and then spins the whole thing down when it's done leaving nothing resonant and leaving no configuration behind and that's how we're going to do",
    "start": "1550799",
    "end": "1559360"
  },
  {
    "text": "this so before we get into the configuration a little bit about the Docker file we're using daniela showed",
    "start": "1560279",
    "end": "1565679"
  },
  {
    "text": "you the Docker file that we use to build our apps now we have an additional Docker file that's specific to the slave",
    "start": "1565679",
    "end": "1571039"
  },
  {
    "text": "that we use for our tests it's a little bit more complicated but not too much it",
    "start": "1571039",
    "end": "1576640"
  },
  {
    "text": "starts by descending from the JNLP slave this is simply necessary to let the",
    "start": "1576640",
    "end": "1582559"
  },
  {
    "text": "container function as a Docker slave it contains the basic Java infrastructure to communicate with Docker we then",
    "start": "1582559",
    "end": "1589840"
  },
  {
    "text": "install all the dependencies we needed we need which include Ruby XVFB copy",
    "start": "1589840",
    "end": "1596000"
  },
  {
    "text": "barra copy bar webkit and a whole pile of gems it seems like a lot but because the docker file contains all of this we",
    "start": "1596000",
    "end": "1603840"
  },
  {
    "text": "now have a containable repeatable uh test environment that we don't have to keep reinstantiating and this is just the",
    "start": "1603840",
    "end": "1610480"
  },
  {
    "text": "finish of the same Docker file again we install our gems set the user's Jenkins and we're ready to roll",
    "start": "1610480",
    "end": "1618919"
  },
  {
    "text": "go back some people are taking pictures now we're going to flip back to our",
    "start": "1618960",
    "end": "1625840"
  },
  {
    "text": "demo so the test configuration is again a Jenkins freestyle project just like the build was it's a separate project",
    "start": "1630760",
    "end": "1637039"
  },
  {
    "text": "i'm not bundling my integration tests with my build that's not a best practice we got them",
    "start": "1637039",
    "end": "1643080"
  },
  {
    "text": "separate uh but we're going to do one thing different right near the top and you'll notice this box here called",
    "start": "1643080",
    "end": "1649919"
  },
  {
    "text": "restrict where this project can be run this is going to select what's called a label that",
    "start": "1649919",
    "end": "1658000"
  },
  {
    "text": "connects us to a cloud that we've configured through the ECS plugin i'll take a quick detour now and show you how",
    "start": "1658000",
    "end": "1665840"
  },
  {
    "text": "we actually configure that cloud to allow us to use that box so to show this",
    "start": "1665840",
    "end": "1671200"
  },
  {
    "text": "we go to our Jenkins the front of our Jenkins and I'm going to click manage Jenkins which takes us to a configuration and then configure",
    "start": "1671200",
    "end": "1678880"
  },
  {
    "text": "system scrolling down to the very bottom you'll see a section called",
    "start": "1678919",
    "end": "1684919"
  },
  {
    "text": "cloud this when you have the EC2 container service uh the cloudb's ECS",
    "start": "1684919",
    "end": "1691120"
  },
  {
    "text": "plugin installed you're going to get this section added to your manage Jenkins at the bottom first we pick a",
    "start": "1691120",
    "end": "1696720"
  },
  {
    "text": "name for the cloud we'll just call it ECS we put in our Amazon credentials that let us talk to ECS after which we get a",
    "start": "1696720",
    "end": "1705360"
  },
  {
    "text": "nice drop down that shows all the different ECS clusters that are available on our account for the",
    "start": "1705360",
    "end": "1710880"
  },
  {
    "text": "purposes of this talk we picked one called staging we then pick a label and this",
    "start": "1710880",
    "end": "1716320"
  },
  {
    "text": "label is important because the label here ECS slave needs to match the label that we picked when we configured the",
    "start": "1716320",
    "end": "1722640"
  },
  {
    "text": "test job so if you remember ECS slave ECS slave over",
    "start": "1722640",
    "end": "1729000"
  },
  {
    "text": "here and ECS whoops ECS slave over here",
    "start": "1729000",
    "end": "1734559"
  },
  {
    "text": "those need to match next we pick the Docker image so for this for the purposes of this talk we built that from",
    "start": "1734559",
    "end": "1741440"
  },
  {
    "text": "that Docker file offline and pushed it up to the repository you could actually configure that as a Docker build if you",
    "start": "1741440",
    "end": "1748039"
  },
  {
    "text": "want we set the file system route which is specific to Jenkins set memory and CPU units and we're ready to roll now we",
    "start": "1748039",
    "end": "1754799"
  },
  {
    "text": "have a working cloud so back to our test config we've selected restrict where this project can",
    "start": "1754799",
    "end": "1761279"
  },
  {
    "text": "be run which tells Jenkins whenever you see this test job execute as a build always fire it off on the slave which in",
    "start": "1761279",
    "end": "1768080"
  },
  {
    "text": "practice is going to mean fire up a new container set up a task definition run it on the ECS cluster and then tear the",
    "start": "1768080",
    "end": "1774640"
  },
  {
    "text": "whole thing down when it finishes i'll skip over source code management again until we talk about code pipeline",
    "start": "1774640",
    "end": "1781279"
  },
  {
    "text": "and get into what we're actually executing so the command to run our tests is actually very simple because we",
    "start": "1781279",
    "end": "1787279"
  },
  {
    "text": "pre-installed all the dependencies we just connect to the web directory where we're running all the tests we set the",
    "start": "1787279",
    "end": "1793760"
  },
  {
    "text": "name of the test server in this case I've set it to the URL for the beta site",
    "start": "1793760",
    "end": "1799520"
  },
  {
    "text": "that we're hitting the nice thing is that this is fully parameterized so I could create another test job and hit a different site and all I'd have to do is",
    "start": "1799520",
    "end": "1805760"
  },
  {
    "text": "modify this line then we invoke the test via XVFB",
    "start": "1805760",
    "end": "1811600"
  },
  {
    "text": "run which tells our headless web server XVFB fire up a headless web server",
    "start": "1811600",
    "end": "1817799"
  },
  {
    "text": "temporarily run this run our RSpec test with the server functioning with the display set and then tear the whole",
    "start": "1817799",
    "end": "1823200"
  },
  {
    "text": "thing down when done very very convenient command and when run within a Docker container it's even more safe",
    "start": "1823200",
    "end": "1828480"
  },
  {
    "text": "because it's completely isolated from the rest of the OS and that's our step that's all we have to do to execute our",
    "start": "1828480",
    "end": "1834399"
  },
  {
    "text": "tests there are some post-build actions which help us integrate with code pipeline that we'll see later but that's",
    "start": "1834399",
    "end": "1839600"
  },
  {
    "text": "our entire configuration and I'm going to hand it back and we'll talk about how to deploy and then how to put it all",
    "start": "1839600",
    "end": "1847440"
  },
  {
    "text": "together so um we have our test and build cover now",
    "start": "1850360",
    "end": "1855919"
  },
  {
    "text": "uh all we have left to do is actually deploy our containers as we mentioned earlier uh this is the stage where uh we",
    "start": "1855919",
    "end": "1863840"
  },
  {
    "start": "1863000",
    "end": "1863000"
  },
  {
    "text": "take the artifacts and deploy them to our production environment um we will deploy on Amazon",
    "start": "1863840",
    "end": "1871240"
  },
  {
    "start": "1868000",
    "end": "1868000"
  },
  {
    "text": "ECS and uh again as announced this morning we have this tool that allows us",
    "start": "1871240",
    "end": "1876799"
  },
  {
    "text": "now to take our Docker Compose file and run it on our on Amazon ECS cluster uh",
    "start": "1876799",
    "end": "1883919"
  },
  {
    "text": "it's a simple command again it's a compose app uh in this case uh I'm not",
    "start": "1883919",
    "end": "1889120"
  },
  {
    "text": "specifying the local option so this would actually run the containers that I have defined in my compos file on my ECS",
    "start": "1889120",
    "end": "1896799"
  },
  {
    "text": "cluster it will also take care of converting my YAML file into a task",
    "start": "1896799",
    "end": "1902159"
  },
  {
    "text": "definition and run a task with that task definition and then I can also uh list",
    "start": "1902159",
    "end": "1907440"
  },
  {
    "text": "the containers that are running with a ps command for example for this demo uh we're going to",
    "start": "1907440",
    "end": "1914559"
  },
  {
    "start": "1913000",
    "end": "1913000"
  },
  {
    "text": "using uh we're going to be using elastic beanstalk uh which is a simpler way to",
    "start": "1914559",
    "end": "1919760"
  },
  {
    "text": "deploying containers uh within uh within a pipeline like uh what we are doing now",
    "start": "1919760",
    "end": "1925760"
  },
  {
    "text": "uh beantoalk uh one of the benefits of be of using beantoalk is that it can",
    "start": "1925760",
    "end": "1931200"
  },
  {
    "text": "manage uh all the resources for you so your databases your elastic load",
    "start": "1931200",
    "end": "1936559"
  },
  {
    "text": "balancing your ECS cluster as well and it also provides some additional features for uh for your application uh",
    "start": "1936559",
    "end": "1943600"
  },
  {
    "text": "monitoring logging for example um one other advantage of Beantoalk is that we",
    "start": "1943600",
    "end": "1949600"
  },
  {
    "text": "can create different environments for the same uh for the same application we",
    "start": "1949600",
    "end": "1955440"
  },
  {
    "text": "can have a beta environment we can have a production environment and they can all be identical so we know that",
    "start": "1955440",
    "end": "1960880"
  },
  {
    "text": "whatever we test on our beta environment will be the same as uh what we have on",
    "start": "1960880",
    "end": "1966200"
  },
  {
    "text": "production we have two options with elastic be installed we can run uh single containers application and that",
    "start": "1966200",
    "end": "1973360"
  },
  {
    "text": "would run on Amazon EC2 or we can run multicontainers application like in our demo and that will deploy on Amazon ECS",
    "start": "1973360",
    "end": "1981679"
  },
  {
    "text": "uh you would want to use Beantock if you just want to take advantages of uh to",
    "start": "1981679",
    "end": "1986720"
  },
  {
    "text": "take advantage of the benefits of containers but you still want the simplicity of just deploying your app",
    "start": "1986720",
    "end": "1992799"
  },
  {
    "text": "and uh move that from development to production by simply uploading a new container image for example u if you",
    "start": "1992799",
    "end": "2000399"
  },
  {
    "text": "need more fine train control over uh the placement of containers and so on then",
    "start": "2000399",
    "end": "2006640"
  },
  {
    "text": "uh Amazon ECS would be uh a better option in that case",
    "start": "2006640",
    "end": "2012480"
  },
  {
    "text": "as we said uh it would be nice to have uh a tool that can take uh our source",
    "start": "2012480",
    "end": "2018720"
  },
  {
    "text": "code from the repository build the artifacts test it and uh finally deploy",
    "start": "2018720",
    "end": "2024640"
  },
  {
    "text": "it and one tool that knows how to move through these different stages and that",
    "start": "2024640",
    "end": "2029760"
  },
  {
    "text": "tool uh that we're going to use for our demo is AWS code pipeline with pipeline",
    "start": "2029760",
    "end": "2035440"
  },
  {
    "start": "2030000",
    "end": "2030000"
  },
  {
    "text": "uh we can um automate the delivery of the software and uh we can make sure we",
    "start": "2035440",
    "end": "2042320"
  },
  {
    "text": "can assure the quality of the software we can model our release process using a",
    "start": "2042320",
    "end": "2048000"
  },
  {
    "text": "graphical process using a a graphical interface and then we can run all the",
    "start": "2048000",
    "end": "2053358"
  },
  {
    "text": "changes that we make to uh our code through that process that we defined and that would assure that all the changes",
    "start": "2053359",
    "end": "2060480"
  },
  {
    "text": "will go through the same standardized process so let's switch again to the demo and",
    "start": "2060480",
    "end": "2067358"
  },
  {
    "text": "see how all these tools work together end to [Music] end so the first thing I'm going to",
    "start": "2067359",
    "end": "2075158"
  },
  {
    "text": "[Music] do is to actually push the changes that I made at the beginning uh to our code",
    "start": "2075159",
    "end": "2084440"
  },
  {
    "text": "repository so I'll just check what changes I made uh I changed couple of",
    "start": "2084440",
    "end": "2089839"
  },
  {
    "text": "files so I'll just add",
    "start": "2089839",
    "end": "2096720"
  },
  {
    "text": "them commit with a nice uh comment don't forget",
    "start": "2096760",
    "end": "2103330"
  },
  {
    "text": "[Music]",
    "start": "2103330",
    "end": "2106400"
  },
  {
    "text": "those and then I'm ready to",
    "start": "2110040",
    "end": "2114400"
  },
  {
    "text": "push so this operation pushing to my code repository would actually now",
    "start": "2118119",
    "end": "2124400"
  },
  {
    "text": "trigger the execution of of the pipeline so if I switch",
    "start": "2124400",
    "end": "2131079"
  },
  {
    "text": "to my console we will see in a second or two that this initial stage of the",
    "start": "2131079",
    "end": "2138960"
  },
  {
    "text": "pipeline would start would turn blue and will start executing in our pipeline we",
    "start": "2138960",
    "end": "2144720"
  },
  {
    "text": "have uh few stages we have our source which is our GitHub repository we have",
    "start": "2144720",
    "end": "2151119"
  },
  {
    "text": "our build stage uh that's where is where we're going to build the software we then deploy to a beta environment run",
    "start": "2151119",
    "end": "2158320"
  },
  {
    "text": "some test and finally deploy in production i'll pass it back to Dan that",
    "start": "2158320",
    "end": "2164640"
  },
  {
    "text": "he's going to go over the uh build and test environment and then we'll see how we do the deployment",
    "start": "2164640",
    "end": "2172400"
  },
  {
    "text": "so as you can see our uh pipeline has code pipeline has picked up our changes and the source stage is now running",
    "start": "2172400",
    "end": "2178400"
  },
  {
    "text": "while our pipeline runs let's learn a little bit about how we've hooked everything together starting with",
    "start": "2178400",
    "end": "2183640"
  },
  {
    "text": "build so you might recall that we skipped over some pieces of the",
    "start": "2183640",
    "end": "2190000"
  },
  {
    "text": "build configuration before now we're going to go through them so near the top",
    "start": "2190000",
    "end": "2195280"
  },
  {
    "text": "of our build configuration there's a section called source code management normally when you're writing a Jenkins",
    "start": "2195280",
    "end": "2200800"
  },
  {
    "text": "project this is where you would configure git directly or talk you could talk directly to AWS code commit or to",
    "start": "2200800",
    "end": "2207440"
  },
  {
    "text": "your source control but when you're using code pipeline you actually select co AWS code pipeline as your source",
    "start": "2207440",
    "end": "2213760"
  },
  {
    "text": "control system you pick your region US East1 and no need for AWS access keys in",
    "start": "2213760",
    "end": "2221040"
  },
  {
    "text": "this case if you've set up an instance role behind your Jenkins box as we have it just uses the uh default IM",
    "start": "2221040",
    "end": "2228839"
  },
  {
    "text": "configuration then you pick two values that need to match your pipeline",
    "start": "2228839",
    "end": "2234320"
  },
  {
    "text": "configuration one of them is called the category in this case build to indicate this is the build stage and then the",
    "start": "2234320",
    "end": "2240240"
  },
  {
    "text": "provider which is Jenkins build which matches the provider that we sent for the corresponding stage back in code",
    "start": "2240240",
    "end": "2245920"
  },
  {
    "text": "pipeline so if we go back to our code pipeline and look at our build",
    "start": "2245920",
    "end": "2251839"
  },
  {
    "text": "info you'd have to go to the edit view to do it the when we can when we create our build step we actually need to set",
    "start": "2252760",
    "end": "2260000"
  },
  {
    "text": "the name of a provider and set the the type and those need to match between the two going back to to our Jenkins",
    "start": "2260000",
    "end": "2267400"
  },
  {
    "text": "configuration remember we also there's a third step in the build",
    "start": "2267400",
    "end": "2273520"
  },
  {
    "text": "that we also glossed over which is important in how we're connecting with AWS elastic",
    "start": "2273520",
    "end": "2279240"
  },
  {
    "text": "beanto notice that we have an execute shell script sitting right after the two docker",
    "start": "2279240",
    "end": "2285000"
  },
  {
    "text": "steps we run this command against a build script that we have called build.sh let's take a look at what that",
    "start": "2285000",
    "end": "2290800"
  },
  {
    "text": "actually is and what it does this is our build",
    "start": "2290800",
    "end": "2297160"
  },
  {
    "text": "script all this really is is it's creating a it's removing some temp directories it's creating an output",
    "start": "2297160",
    "end": "2303200"
  },
  {
    "text": "directory called build where we're going to place an artifact and then it's running a simple set script to",
    "start": "2303200",
    "end": "2309440"
  },
  {
    "text": "substitute a build number expression with the actual Jenkins build number in a file called",
    "start": "2309440",
    "end": "2316359"
  },
  {
    "text": "dockerrun.awws.json.t which it then generates into the build directory so what is this file if you're familiar",
    "start": "2316359",
    "end": "2322320"
  },
  {
    "text": "with a with elastic beantock you may be aware of this but if you're not no worries this is a configuration file",
    "start": "2322320",
    "end": "2329520"
  },
  {
    "text": "used by elastic beantoalk to orchestrate multiple containers it's similar in spirit to the docker compose.yaml",
    "start": "2329520",
    "end": "2335760"
  },
  {
    "text": "although it refers directly to the images that we're using this is what our template file looks like you notice that",
    "start": "2335760",
    "end": "2341520"
  },
  {
    "text": "we have two container definitions we have our proxy and we have our",
    "start": "2341520",
    "end": "2348359"
  },
  {
    "text": "web and for both we have images let's take a look quick look at",
    "start": "2348359",
    "end": "2355119"
  },
  {
    "text": "the image for the proxy container and this will show you how the substitution",
    "start": "2355119",
    "end": "2360359"
  },
  {
    "text": "works i've placed a placeholder here called build number which my said script",
    "start": "2360359",
    "end": "2365520"
  },
  {
    "text": "is going to replace by the actual build number i could put colon latest here but",
    "start": "2365520",
    "end": "2370640"
  },
  {
    "text": "there's a problem with that if I were to just use a hard-coded docker run.json WS",
    "start": "2370640",
    "end": "2375680"
  },
  {
    "text": "JSON and always grab the latest image that would work fine for most builds until I try to roll back in which case I",
    "start": "2375680",
    "end": "2381520"
  },
  {
    "text": "would roll back to an earlier docker run.Wawws.json file which would happily go pull the latest Docker containers",
    "start": "2381520",
    "end": "2387839"
  },
  {
    "text": "which would cause no roll back to actually happen it's again why it's important to use tagging and make sure",
    "start": "2387839",
    "end": "2393119"
  },
  {
    "text": "your tags are consistent this gets around that problem so after we run the build.sh SH",
    "start": "2393119",
    "end": "2398640"
  },
  {
    "text": "what's going to happen is that this file is going to be generated into the build output directory with those build numbers replaced by the actual build",
    "start": "2398640",
    "end": "2406079"
  },
  {
    "text": "number and this is later Danielle is going to show you this later on is going to be used to generate the the Amazon",
    "start": "2406079",
    "end": "2412720"
  },
  {
    "text": "ECS task definitions which are going to launch the actual containers on the cluster now back to our",
    "start": "2412720",
    "end": "2420760"
  },
  {
    "text": "Jenkins so that's what build.sh does and it's a simple shell step finally we have a post build action and",
    "start": "2420760",
    "end": "2428720"
  },
  {
    "text": "this is where we tell code pipeline where we just placed the output artifacts in this case you recall from",
    "start": "2428720",
    "end": "2434640"
  },
  {
    "text": "the script that we created a build directory and placed our dockerr run.Wawws.json into that directory we're",
    "start": "2434640",
    "end": "2440960"
  },
  {
    "text": "now telling code pipeline that that's where the files live that way code pipeline will pick the files up from",
    "start": "2440960",
    "end": "2446960"
  },
  {
    "text": "that location zip them up and hand them to elastic beantock so the deployment works seamlessly",
    "start": "2446960",
    "end": "2453640"
  },
  {
    "text": "now going over to our test it's almost exactly the same we have a source code",
    "start": "2454320",
    "end": "2460000"
  },
  {
    "text": "management step on our test again it talks to code pipeline region US East one except that our category is now test",
    "start": "2460000",
    "end": "2468079"
  },
  {
    "text": "instead of build our provider is Jenkins test instead of Jenkins build and then",
    "start": "2468079",
    "end": "2473280"
  },
  {
    "text": "when we go down to the post build step you'll notice that we don't have any output directories and that's because our tests don't actually generate",
    "start": "2473280",
    "end": "2479520"
  },
  {
    "text": "artifacts it is simply a pass fail step that tells you whether the test ran correctly or",
    "start": "2479520",
    "end": "2486160"
  },
  {
    "text": "not and now our pipeline is actually happily running the build stage and I'm going to hand it back over so as um as",
    "start": "2486839",
    "end": "2494960"
  },
  {
    "text": "Dan was saying we uh we will we will be deploying to elastic b install we have",
    "start": "2494960",
    "end": "2501280"
  },
  {
    "text": "two environment where are going to do the deployment our beta environment where we're going to run the test and",
    "start": "2501280",
    "end": "2507760"
  },
  {
    "text": "then our production environment let's have a look at those u at those two apps uh they're are completely uh",
    "start": "2507760",
    "end": "2516880"
  },
  {
    "text": "identical uh so I just go into the production uh environment we run the",
    "start": "2516880",
    "end": "2522640"
  },
  {
    "text": "multicontainer uh docker environment uh from elastic be install as we said that",
    "start": "2522640",
    "end": "2528720"
  },
  {
    "text": "would deploy onto uh Amazon ECS we can see that the uh application the version",
    "start": "2528720",
    "end": "2536160"
  },
  {
    "text": "that is running is still the old one old images and old title and we'll see that",
    "start": "2536160",
    "end": "2541760"
  },
  {
    "text": "uh at the end we'll have hopefully the new version running um we didn't modify any any of the options here uh so these",
    "start": "2541760",
    "end": "2549440"
  },
  {
    "text": "are all the default options that we have in our pipeline what we need to specify",
    "start": "2549440",
    "end": "2555040"
  },
  {
    "text": "for uh deployment to elastic be instal is simply to pick up the uh docker run",
    "start": "2555040",
    "end": "2563839"
  },
  {
    "text": "JSON file from our build directory and that's what we specify with the input artifacts and then that's uh that's all",
    "start": "2563839",
    "end": "2571920"
  },
  {
    "text": "it take from uh to deploy uh from pipeline into uh uh into beanto and the",
    "start": "2571920",
    "end": "2579040"
  },
  {
    "text": "same for our uh production environment again we pick up the docker run.json",
    "start": "2579040",
    "end": "2584560"
  },
  {
    "text": "file from the build directory and put that onto uh onto",
    "start": "2584560",
    "end": "2589880"
  },
  {
    "text": "binsto uh as we mentioned beantol can manages all uh the resources for you uh",
    "start": "2589880",
    "end": "2595920"
  },
  {
    "text": "one of them is our uh elastic um ECS cluster we see that we have two clusters",
    "start": "2595920",
    "end": "2603040"
  },
  {
    "text": "here that uh are prefixed by AWSB for elastic beantoalk then we have our",
    "start": "2603040",
    "end": "2610480"
  },
  {
    "text": "photogram beta for our beta environment and then we have one for the production",
    "start": "2610480",
    "end": "2617119"
  },
  {
    "text": "environment as well we can go and take a look at the uh",
    "start": "2617119",
    "end": "2622880"
  },
  {
    "text": "task definition that uh beanto has created for us so this is this task definition is uh",
    "start": "2622880",
    "end": "2632160"
  },
  {
    "text": "created from the docker run that we uh that we specified uh we can see that uh",
    "start": "2632160",
    "end": "2639040"
  },
  {
    "text": "it's using an image and uh we substitute the uh build number text with an actual",
    "start": "2639040",
    "end": "2647200"
  },
  {
    "text": "number that is the bill number that that we run and uh and that's all uh and",
    "start": "2647200",
    "end": "2653119"
  },
  {
    "text": "that's all it takes for running uh ECS uh ECS task basically on",
    "start": "2653119",
    "end": "2661720"
  },
  {
    "text": "um the other thing I uh we can uh we can check uh We also mentioned that our",
    "start": "2661720",
    "end": "2670640"
  },
  {
    "text": "uh our test environment is going to spin up slaves on on ECS so the test is",
    "start": "2670640",
    "end": "2679200"
  },
  {
    "text": "actually running now so we should be able to see the uh the test containers",
    "start": "2679200",
    "end": "2684400"
  },
  {
    "text": "actually running as we said it's running on the staging cluster we have one task",
    "start": "2684400",
    "end": "2690400"
  },
  {
    "text": "running here we can take a look at again the uh uh the task definition for that",
    "start": "2690400",
    "end": "2696800"
  },
  {
    "text": "which is a Jenkins slave which is what we expect to be in this case uh it's using the image",
    "start": "2696800",
    "end": "2704720"
  },
  {
    "text": "that we specify at the beginning uh in our cloud configuration for the ECS plugin and then it's uh passing some",
    "start": "2704720",
    "end": "2712640"
  },
  {
    "text": "additional parameters uh to the command to the Jenkins live command and these are needed to be able to talk back to",
    "start": "2712640",
    "end": "2719359"
  },
  {
    "text": "the uh Jenkins faster",
    "start": "2719359",
    "end": "2726200"
  },
  {
    "text": "now back to our pipeline we can already see that uh our",
    "start": "2726200",
    "end": "2732319"
  },
  {
    "text": "test is completed completed it's all trained it's now deploying onto",
    "start": "2732319",
    "end": "2737440"
  },
  {
    "text": "production we can take a look at the uh beta",
    "start": "2737440",
    "end": "2743240"
  },
  {
    "text": "environment and we should see that we already have the new version of the application running on beta here it is",
    "start": "2743240",
    "end": "2752640"
  },
  {
    "text": "and once the pipeline is completed we will also have the same application running on on production as",
    "start": "2752640",
    "end": "2761520"
  },
  {
    "text": "well we can switch back to the uh to the presentation now and",
    "start": "2762040",
    "end": "2769400"
  },
  {
    "text": "kick you out yeah so just uh a few things before uh",
    "start": "2787599",
    "end": "2795119"
  },
  {
    "start": "2795000",
    "end": "2795000"
  },
  {
    "text": "before we end up um few things that uh would like to uh take away from this",
    "start": "2795119",
    "end": "2801040"
  },
  {
    "text": "session use the uh ECS CLI to run your application both locally and uh uh on an",
    "start": "2801040",
    "end": "2809520"
  },
  {
    "text": "Amazon ECS cluster especially if you're already using Docker Compose that would be a very uh smooth transition for you",
    "start": "2809520",
    "end": "2818000"
  },
  {
    "text": "uh make use of the ECS plug-in to scale uh your build environment run them again",
    "start": "2818000",
    "end": "2824640"
  },
  {
    "text": "on on ECS in containers and finally let uh code pipeline do some of the work for",
    "start": "2824640",
    "end": "2831119"
  },
  {
    "text": "you so let code pipeline orchestrate uh that uh process of moving your code from",
    "start": "2831119",
    "end": "2837760"
  },
  {
    "text": "one stage to the other so thanks very much hope you our",
    "start": "2837760",
    "end": "2843520"
  },
  {
    "text": "pipeline is finished show the fraud",
    "start": "2843520",
    "end": "2850799"
  }
]