[
  {
    "start": "0",
    "end": "119000"
  },
  {
    "text": "all right let's get started good afternoon and welcome and thank you for choosing to spend your next hour with",
    "start": "960",
    "end": "7599"
  },
  {
    "text": "me now do you live in fear that your continuous delivery pipeline is going to",
    "start": "7599",
    "end": "12920"
  },
  {
    "text": "break your production environment because if you are then you're not alone this is a talk about adding safety",
    "start": "12920",
    "end": "20600"
  },
  {
    "text": "to your deployment process and I'm not talking about adding extra unit tests or extra integration tests I'm talking",
    "start": "20600",
    "end": "27880"
  },
  {
    "text": "about configuring your deployment process so it's safer and configuring your release pipeline so it can react to",
    "start": "27880",
    "end": "34239"
  },
  {
    "text": "bad changes hello my name is Mark mansor and I own the teams that build continuous",
    "start": "34239",
    "end": "40600"
  },
  {
    "text": "delivery tools at Amazon so we're going to make our",
    "start": "40600",
    "end": "46320"
  },
  {
    "text": "production pipeline safer by adding more monitoring to our production environment",
    "start": "46320",
    "end": "52320"
  },
  {
    "text": "so that we can identify issues quickly we're going to",
    "start": "52320",
    "end": "57600"
  },
  {
    "text": "configure our um deployment engine so that it adds more safety",
    "start": "57600",
    "end": "63159"
  },
  {
    "text": "checks and we're going to modify our pipeline so that we uh",
    "start": "63159",
    "end": "70439"
  },
  {
    "text": "are proactively uh detecting changes in our",
    "start": "70439",
    "end": "76159"
  },
  {
    "text": "environment all right so we're going to look at five techniques today so the first technique is we're going to",
    "start": "76280",
    "end": "81560"
  },
  {
    "text": "continuously test production to see if we have regressions in functionality our second technique will",
    "start": "81560",
    "end": "88360"
  },
  {
    "text": "be configuring our deploy M engine so we're testing our deployments after each host",
    "start": "88360",
    "end": "94040"
  },
  {
    "text": "update we'll also look at segmenting production so it's not one big glob and",
    "start": "94040",
    "end": "99720"
  },
  {
    "text": "we'll halt promotions to production when our system is under distress and we'll finish up by creating",
    "start": "99720",
    "end": "106000"
  },
  {
    "text": "gates in our deployment process which will open and close due to external",
    "start": "106000",
    "end": "111399"
  },
  {
    "text": "stimulus so a key component of being successful at continuous delivery is having all of your processes automated",
    "start": "111399",
    "end": "118640"
  },
  {
    "text": "so this would mean that you you already have your code in some sort of Version Control System you've automated your",
    "start": "118640",
    "end": "124119"
  },
  {
    "start": "119000",
    "end": "119000"
  },
  {
    "text": "builds and your deployment process and you're probably deploying to more than one host at a",
    "start": "124119",
    "end": "129800"
  },
  {
    "text": "time you have unit tests and integration tests which you have confidence in will",
    "start": "129800",
    "end": "134959"
  },
  {
    "text": "catch regressions and you've got this all tied together in some sort of automated fashion with A continuous delivery um",
    "start": "134959",
    "end": "142959"
  },
  {
    "text": "tool you will also have an operations dashboard which will give you realtime visibility into the health of your produ",
    "start": "142959",
    "end": "149800"
  },
  {
    "text": "C system with all of those things in place you'll end up with a pipeline that looks",
    "start": "149800",
    "end": "155160"
  },
  {
    "text": "something like this you'll end up having some source which will trigger uh an automated build where you'll run unit",
    "start": "155160",
    "end": "161120"
  },
  {
    "text": "tests and maybe some style checks you'll then promote that build into an integration environment run",
    "start": "161120",
    "end": "167560"
  },
  {
    "text": "integration tests against it and if that's successful you'll then go on to production now from a 10,000 foot view",
    "start": "167560",
    "end": "174640"
  },
  {
    "start": "172000",
    "end": "172000"
  },
  {
    "text": "this is a talk about best practices and the best practices I'm going to go through should be usable with any of the",
    "start": "174640",
    "end": "180760"
  },
  {
    "text": "tools that you have today it may mean that you have to extend your tools but that's just part",
    "start": "180760",
    "end": "186799"
  },
  {
    "text": "of building a continuous delivery pipeline now to make these techniques more concrete I'm going to be using AWS",
    "start": "186799",
    "end": "194560"
  },
  {
    "text": "tools to show you how to build these techniques now there are a lot of AWS",
    "start": "194560",
    "end": "200200"
  },
  {
    "text": "tools so I'm not going to assume that you know them all so let's just step through the three categories of tools we'll be using",
    "start": "200200",
    "end": "206319"
  },
  {
    "text": "today so we'll be using monitoring tools software development tools and",
    "start": "206319",
    "end": "211640"
  },
  {
    "text": "deployment tools we're going to use monitoring tools uh to capture metrics and to raise",
    "start": "211640",
    "end": "218439"
  },
  {
    "text": "alarms when there are issues going on in production we're going to use Amazon Cloud watch as our metrics and alarming",
    "start": "218439",
    "end": "226959"
  },
  {
    "text": "provider we're going to use software development tools to extend the behavior of a continuous delivery process we're",
    "start": "226959",
    "end": "233920"
  },
  {
    "text": "going to use SNS to emit events from our Pipeline and we're going to use Lambda functions to change the behavior of our",
    "start": "233920",
    "end": "242079"
  },
  {
    "text": "Pipeline and we're going to use deployment tools to get bits to boxes AWS code deploy is a deployment",
    "start": "242079",
    "end": "249680"
  },
  {
    "text": "engine that deploys code to ec2 instances AWS code pipeline is a hosted",
    "start": "249680",
    "end": "258000"
  },
  {
    "text": "um pipeline tool that orchestrates your release management so here's again our our",
    "start": "258000",
    "end": "264680"
  },
  {
    "start": "262000",
    "end": "262000"
  },
  {
    "text": "abstract release process and we're going to move it into code pipeline just so we can make this a little more concrete now",
    "start": "264680",
    "end": "271120"
  },
  {
    "text": "you'll notice that each of these abstract steps map neatly into code pipelines",
    "start": "271120",
    "end": "276479"
  },
  {
    "text": "actions and let's just go through some Concepts from top to bottom this is a",
    "start": "276479",
    "end": "281560"
  },
  {
    "text": "pipeline this models our release process within a pipeline we have stages where stages collect one or many actions",
    "start": "281560",
    "end": "289759"
  },
  {
    "text": "together now an action or a plugin is will act on every change that",
    "start": "289759",
    "end": "295720"
  },
  {
    "text": "runs through our system and this is where the real work happen happens in our systems so we we've got several",
    "start": "295720",
    "end": "302000"
  },
  {
    "text": "different types of actions we've got Source actions which might react to a GitHub commit or a code commit commit",
    "start": "302000",
    "end": "307840"
  },
  {
    "text": "we've got deployment actions which may perform a deployment through code deploy which we'll be using elastic beant stalk",
    "start": "307840",
    "end": "314840"
  },
  {
    "text": "um cloud formation and we also have approval actions which can wait for",
    "start": "314840",
    "end": "320199"
  },
  {
    "text": "external stimulus uh whether that be a manual approval or whether that be an approval via an",
    "start": "320199",
    "end": "326280"
  },
  {
    "text": "API now between each of our stages we have Transitions and transitions can be",
    "start": "326280",
    "end": "332360"
  },
  {
    "text": "enabled or disabled when we disable a transition any change running through",
    "start": "332360",
    "end": "337479"
  },
  {
    "text": "our pipeline will pause at that disabled transition and when it's re-enabled the code will then continue to flow through",
    "start": "337479",
    "end": "343639"
  },
  {
    "text": "the system when somebody commits a change to your Source location again this triggers",
    "start": "343639",
    "end": "350080"
  },
  {
    "text": "a change to run through your pipeline all the way through each action and then at the end it's very likely that you'll",
    "start": "350080",
    "end": "355240"
  },
  {
    "text": "deploy to your production environment",
    "start": "355240",
    "end": "360759"
  },
  {
    "text": "so we're going to use our pipeline uh to deploy to code deploy and on the left",
    "start": "360759",
    "end": "367280"
  },
  {
    "text": "hand side of the screen will be our release process in the center of the screen I'll be showing you our",
    "start": "367280",
    "end": "373800"
  },
  {
    "text": "deployment process so here our pipeline is trigging triggering a deployment to",
    "start": "373800",
    "end": "378840"
  },
  {
    "text": "code deploy and code deploy is going to deploy to three hosts by default it will deploy to one host at a time in a",
    "start": "378840",
    "end": "385240"
  },
  {
    "text": "rolling fashion now we're going to come back to this slide throughout the talk and incrementally build up both our",
    "start": "385240",
    "end": "390800"
  },
  {
    "text": "deployment process and our release process to make this more much more",
    "start": "390800",
    "end": "396599"
  },
  {
    "text": "robust so now that we've got the prerequisites out of the way we can actually get it onto our",
    "start": "396840",
    "end": "402520"
  },
  {
    "text": "techniques but first a story now we all run some pretty complicated systems and",
    "start": "402520",
    "end": "408599"
  },
  {
    "text": "they can break in some fairly unexpected ways and I remember working with one team that had a buy button disappear",
    "start": "408599",
    "end": "415039"
  },
  {
    "text": "from their site and it disappeared because they had a dependency on another system that was",
    "start": "415039",
    "end": "420199"
  },
  {
    "text": "sending them inventory data and when the data was returned it was missing in the data that was required in order to",
    "start": "420199",
    "end": "425240"
  },
  {
    "text": "render the button now the team didn't know that this problem was occurring and customers",
    "start": "425240",
    "end": "432000"
  },
  {
    "text": "had to call them up and let them know that there was a problem and this caused quite a bit of frustration for the",
    "start": "432000",
    "end": "437639"
  },
  {
    "text": "customers they they were surprised that this the team didn't know about the problem um but once they found out they",
    "start": "437639",
    "end": "443280"
  },
  {
    "text": "they could obviously fix the issue now in an Ideal World you as a service team",
    "start": "443280",
    "end": "448440"
  },
  {
    "text": "would find this issue quick and resolve it so I think the lesson to take away from this story is that although your",
    "start": "448440",
    "end": "454360"
  },
  {
    "text": "system is working well at one point in time it can degrade at a later point in time and you need some Telemetry to",
    "start": "454360",
    "end": "461360"
  },
  {
    "text": "understand when this occurs so to solve this problem we can",
    "start": "461360",
    "end": "467199"
  },
  {
    "start": "465000",
    "end": "465000"
  },
  {
    "text": "create synthetic traffic tests that will simulate real customer Behavior to identify problems before customers see",
    "start": "467199",
    "end": "475159"
  },
  {
    "text": "them now these synthetic traffic tests should be testing all of our business critical",
    "start": "475159",
    "end": "480759"
  },
  {
    "text": "functionality and uh if we were a retailer for instance we might want to check a login uh an authentication uh we",
    "start": "480759",
    "end": "488240"
  },
  {
    "text": "might want to check adding items to a cut and we may want to check out uh check the checkout",
    "start": "488240",
    "end": "493360"
  },
  {
    "text": "process we want these tests to run quickly if we have a 20-minute test then",
    "start": "493360",
    "end": "498759"
  },
  {
    "text": "that's a 20-minute latency before we find out that the system is broken so we want really our test to run every minute",
    "start": "498759",
    "end": "504800"
  },
  {
    "text": "and so we can react and get on top of that problem now some we get some extra benefits because we behave like the",
    "start": "504800",
    "end": "511000"
  },
  {
    "text": "customer we can also see customer information such as latencies and whether the site has remained reachable",
    "start": "511000",
    "end": "516919"
  },
  {
    "text": "or not so when a customer interacts with our site the normal thing happens they",
    "start": "516919",
    "end": "523000"
  },
  {
    "text": "make a request they get a response back and our server will also send a message back to our monitoring system to tell us",
    "start": "523000",
    "end": "529000"
  },
  {
    "text": "whether that request worked or not our synthetic tests will work exactly the same way they'll send requests into our",
    "start": "529000",
    "end": "535399"
  },
  {
    "text": "service a response will come back and we'll the the the service itself will",
    "start": "535399",
    "end": "540440"
  },
  {
    "text": "mon uh push some data to our monitoring system in addition though our synthetic",
    "start": "540440",
    "end": "545480"
  },
  {
    "text": "tests will also push whether the test passed or failed back to our cloudwatch",
    "start": "545480",
    "end": "550839"
  },
  {
    "text": "uh metric stream we can invoke these tests every minute and we're going to be doing that",
    "start": "550839",
    "end": "556200"
  },
  {
    "text": "with cloudwatch events and and if we have a deployment that has a problem and",
    "start": "556200",
    "end": "561800"
  },
  {
    "text": "we have a regression in our business critical functionality then we can uh send that message back to cloudwatch and",
    "start": "561800",
    "end": "567000"
  },
  {
    "text": "alarms can fire now it might be a little bit confusing why we have two metric streams being",
    "start": "567000",
    "end": "575240"
  },
  {
    "text": "emitted so if you go back to our previous example where the buy button disappeared customers interacting with",
    "start": "575240",
    "end": "582320"
  },
  {
    "text": "that website will continue to have a normal experience and there'll be no 500s being thrown from your server it",
    "start": "582320",
    "end": "588279"
  },
  {
    "text": "won't error out so we won't receive any errors coming back from the service to",
    "start": "588279",
    "end": "593320"
  },
  {
    "text": "just our standard monitoring system but our synthetic tests are actually performing business critical functionality tests so we'll be able to",
    "start": "593320",
    "end": "600120"
  },
  {
    "text": "pass or fail that result and send it back to our monitoring system on which we can alarm",
    "start": "600120",
    "end": "605600"
  },
  {
    "text": "on so let's build one of these tests it's pretty easy to do now I'm going to do a simplified version of these tests",
    "start": "605600",
    "end": "612320"
  },
  {
    "text": "I'm going to not create a login or create adding items to a cart for the",
    "start": "612320",
    "end": "617839"
  },
  {
    "text": "purpose of Simplicity I'm just going to uh grab a web page and check that there is text on that web",
    "start": "617839",
    "end": "624000"
  },
  {
    "text": "page I'm going to be building this with Lambda and I'm going to be sending my",
    "start": "624000",
    "end": "629079"
  },
  {
    "text": "monitoring information to cloudwatch so Lambda has blueprints",
    "start": "629079",
    "end": "635360"
  },
  {
    "start": "632000",
    "end": "632000"
  },
  {
    "text": "which allow you to quickly generate applications and Lambda already has a synthetic traffic test uh built into it",
    "start": "635360",
    "end": "644240"
  },
  {
    "text": "so it's called the Lambda Canary and there's a little secret at Amazon we",
    "start": "644240",
    "end": "649560"
  },
  {
    "text": "call U we call synthetic tests uh Canary Canary tests so that's why the Lambda",
    "start": "649560",
    "end": "656040"
  },
  {
    "text": "team is named at the Lambda canary as part of setting up this test",
    "start": "656040",
    "end": "661399"
  },
  {
    "text": "uh we also can create this scheduling uh system that occurs through cloudwatch events so here's the code that gets",
    "start": "661399",
    "end": "668160"
  },
  {
    "text": "generated this is almost line for line exactly what's gets gets generated so",
    "start": "668160",
    "end": "673839"
  },
  {
    "text": "I've replaced the site with a URL that I own and I've pasted some text that I",
    "start": "673839",
    "end": "678920"
  },
  {
    "text": "want to search for and then we have the URL open method which grabs the web page and the",
    "start": "678920",
    "end": "684440"
  },
  {
    "text": "validate function which will tell me whether that text is on a page now if the text isn't on the page we're going",
    "start": "684440",
    "end": "691519"
  },
  {
    "text": "to raise an exception and that exception tells Lambda that we failed the action",
    "start": "691519",
    "end": "697320"
  },
  {
    "text": "and every call that uh that you make to lamba Lambda automatically gets logged to cloudwatch so now we know in",
    "start": "697320",
    "end": "704639"
  },
  {
    "text": "cloudwatch that there's an error that the text was not on our page if everything works well we'll",
    "start": "704639",
    "end": "711000"
  },
  {
    "text": "simply return some data we'll we'll just return the time in this",
    "start": "711000",
    "end": "716680"
  },
  {
    "text": "case now Lambda functions as I said automatically report the health back to cloudwatch so here are some Lambda",
    "start": "716920",
    "end": "722639"
  },
  {
    "text": "functions that I that I own and the metrics that they report back so they report back things like duration and how",
    "start": "722639",
    "end": "728800"
  },
  {
    "text": "many invocations have occurred whether we're throttled and uh whether there are any errors we can then quickly turn",
    "start": "728800",
    "end": "735079"
  },
  {
    "text": "those into uh a dashboard you can see on the top I've got the invocations I'm calling one a minute and on the bottom",
    "start": "735079",
    "end": "741480"
  },
  {
    "text": "line I'm showing errors now what I would do here is I'd create two alarms I'd create one alarm that would ER that",
    "start": "741480",
    "end": "748360"
  },
  {
    "text": "would send me an alert when uh I receive an error back from my Lambda function because it means my business critical",
    "start": "748360",
    "end": "754480"
  },
  {
    "text": "functionality has regressed I would also create a second alarm that would fire",
    "start": "754480",
    "end": "760399"
  },
  {
    "text": "when I have a lack of data so if I received uh if I did not receive metrics for three consecutive data points I'd",
    "start": "760399",
    "end": "767399"
  },
  {
    "text": "have an alarm run because at that point in time I know my canaries are not working my synthetic tests are not",
    "start": "767399",
    "end": "775360"
  },
  {
    "start": "775000",
    "end": "775000"
  },
  {
    "text": "working so the process to release and deploy changes isn't really altered by this particular technique but it does",
    "start": "775600",
    "end": "782399"
  },
  {
    "text": "give us critical information on the health of the system and this is a building block we need for the further",
    "start": "782399",
    "end": "789000"
  },
  {
    "start": "790000",
    "end": "790000"
  },
  {
    "text": "techniques so let's move on to managing our deployments health now I remember one of our teams",
    "start": "790320",
    "end": "797800"
  },
  {
    "text": "uh had built a new internal service and they were getting ready to launch and as part of our regular launch process we",
    "start": "797800",
    "end": "804199"
  },
  {
    "text": "perform an operational Readiness review and during this Readiness review we look",
    "start": "804199",
    "end": "809279"
  },
  {
    "text": "at the dashboards that the team has built and we happen to look at the availability metrics for this team now",
    "start": "809279",
    "end": "816519"
  },
  {
    "text": "it turned out that the week earlier that had a total loss of availability for a short period of time so we dug in and",
    "start": "816519",
    "end": "823639"
  },
  {
    "text": "found out what was going on and it turned out that they had uh created a new table and they'd misconfigured the",
    "start": "823639",
    "end": "828920"
  },
  {
    "text": "table name done a deployment and it had stopped their service from standing up it's fine they weren't live they uh",
    "start": "828920",
    "end": "835639"
  },
  {
    "text": "fixed the change to pushed it back out and everything was great but the engineers missed an opportunity",
    "start": "835639",
    "end": "841199"
  },
  {
    "text": "they missed an opportunity to harden their deployment service because they were 100% down during that time so let's",
    "start": "841199",
    "end": "848240"
  },
  {
    "text": "have a look at how we can modify your release system so you don't end up in this same situation now we're using Code deploy as",
    "start": "848240",
    "end": "855519"
  },
  {
    "text": "our deployment engine and code deploy performs rolling updates to our ec2",
    "start": "855519",
    "end": "860880"
  },
  {
    "text": "instances now this slide shows a rolling update occur we take it we take a host",
    "start": "860880",
    "end": "865920"
  },
  {
    "text": "out of the load balancer we update the code we then place it back into the lad balance it so it can serve traffic",
    "start": "865920",
    "end": "872639"
  },
  {
    "text": "fairly straightforward but rolling deployments by themselves do not verify that an",
    "start": "872639",
    "end": "878680"
  },
  {
    "text": "application actually works which means if you're the group that I was talking about before and you",
    "start": "878680",
    "end": "885040"
  },
  {
    "text": "add a change that breaks your service you are going to roll out to production and update each host and then none of",
    "start": "885040",
    "end": "891240"
  },
  {
    "text": "them are going to work but they're all going to be reattached to the load balancer which means that your customers are not going to see the results that",
    "start": "891240",
    "end": "897519"
  },
  {
    "text": "they want so by default deployment systems are",
    "start": "897519",
    "end": "903399"
  },
  {
    "text": "totally agnostic to your application they know how to get bits to boxes which means unfortunately that",
    "start": "903399",
    "end": "911000"
  },
  {
    "text": "they don't know that your service is running now rolling deployments need three checks to make them safe we need",
    "start": "911000",
    "end": "918320"
  },
  {
    "start": "913000",
    "end": "913000"
  },
  {
    "text": "to check after we've done a deployment on a host that it's stood up correctly and it conserve",
    "start": "918320",
    "end": "924199"
  },
  {
    "text": "traffic we need to ensure that when we're doing a fleet deployment that the minimum number of posts are",
    "start": "924199",
    "end": "930120"
  },
  {
    "text": "working and if they're not working and we fail our deployment we want to roll back to the previous",
    "start": "930120",
    "end": "936240"
  },
  {
    "text": "version so let's look at how to set this up now code deploy can be configured to",
    "start": "936240",
    "end": "941920"
  },
  {
    "start": "939000",
    "end": "939000"
  },
  {
    "text": "run scripts at different parts of the deployment life cycle it has an aspect. yaml file which",
    "start": "941920",
    "end": "947720"
  },
  {
    "text": "defines those life cycle events and the scripts which we're going to run now the last life cycle Hook is the applic the",
    "start": "947720",
    "end": "955399"
  },
  {
    "text": "validate Service uh hook and at this point we're going to check that our service has stood up that we can fire a",
    "start": "955399",
    "end": "962199"
  },
  {
    "text": "result into the top of the service and get a good result back out and once that is done and only once that is done we're",
    "start": "962199",
    "end": "968920"
  },
  {
    "text": "going to add it back into the load balancer so let's assume that we've now",
    "start": "968920",
    "end": "975079"
  },
  {
    "start": "972000",
    "end": "972000"
  },
  {
    "text": "done this and we perform another rolling update we're going to continue to do our deployments until we hit a host that",
    "start": "975079",
    "end": "981480"
  },
  {
    "text": "does not work correctly and at that point we're going to Halt the deployment so that's great we now have a situation",
    "start": "981480",
    "end": "988240"
  },
  {
    "text": "where bad hosts are not put back into the load balancer but it leaves us with two other",
    "start": "988240",
    "end": "993440"
  },
  {
    "text": "problems excuse me um it leaves us where the issue where one host failing stops",
    "start": "993440",
    "end": "1000279"
  },
  {
    "text": "us from getting out to the rest of the fleet so imagine if we had 100 hosts and one host fails we actually don't want to",
    "start": "1000279",
    "end": "1007199"
  },
  {
    "text": "stop the deployment at that stage we want to quarantine that host and continue to roll out to the rest of the",
    "start": "1007199",
    "end": "1012839"
  },
  {
    "text": "fleet the other issue that we have is half of our Fleet is on the old code base and half of our fleets on the new",
    "start": "1012839",
    "end": "1019639"
  },
  {
    "text": "code base and we've got one of our hosts which is out of service so let's look at the next two steps on how we can fix",
    "start": "1019639",
    "end": "1025760"
  },
  {
    "text": "this these issues so code deploy has a concept of",
    "start": "1025760",
    "end": "1032720"
  },
  {
    "start": "1029000",
    "end": "1029000"
  },
  {
    "text": "minimum healthy hosts and this defines the minimum percentage of hosts that are healthy in order to continue a",
    "start": "1032720",
    "end": "1040160"
  },
  {
    "text": "deployment so let's use an example let's say that we've got 10 hosts and we're going to set the minimum healthy host",
    "start": "1040160",
    "end": "1046400"
  },
  {
    "text": "rate to 70% if we now did a deployment and one host failed then we'd have 90%",
    "start": "1046400",
    "end": "1052760"
  },
  {
    "text": "of our hosts healthy and we would succeed this deployment alternatively if we deployed",
    "start": "1052760",
    "end": "1059160"
  },
  {
    "text": "to our Fleet and six out of 10 of our hosts worked that would mean that only",
    "start": "1059160",
    "end": "1065400"
  },
  {
    "text": "60% of our minimum healthy hosts exist and we would fail the",
    "start": "1065400",
    "end": "1070640"
  },
  {
    "text": "deployment so that's great they gives us a little bit of flexibility on deploying out to",
    "start": "1070640",
    "end": "1076360"
  },
  {
    "start": "1071000",
    "end": "1071000"
  },
  {
    "text": "production um and we can configure this in code deploy so code deploy comes with",
    "start": "1076360",
    "end": "1081400"
  },
  {
    "text": "uh a default setting of deploying to one host at a time and failing if that host",
    "start": "1081400",
    "end": "1086640"
  },
  {
    "text": "fails it also comes with defaults of deploying 100% at a time which you might use in your integration environment uh",
    "start": "1086640",
    "end": "1093880"
  },
  {
    "text": "or 50% at a time now if these configuration settings don't work for you you can Define your own with the",
    "start": "1093880",
    "end": "1101240"
  },
  {
    "text": "CLI now at Amazon we Define a minimum healthy host",
    "start": "1101240",
    "end": "1106840"
  },
  {
    "text": "uh percentage to be at least least 66% and we only want it to be 66% or",
    "start": "1106840",
    "end": "1112600"
  },
  {
    "text": "more because if we have a bad deployment we still want 23s of our Fleet available",
    "start": "1112600",
    "end": "1118080"
  },
  {
    "text": "to so we've got capacity to serve our customer traffic so this is a fairly safe",
    "start": "1118080",
    "end": "1124880"
  },
  {
    "start": "1125000",
    "end": "1125000"
  },
  {
    "text": "setting but using validation tests and the minimum healthy host setting get us a long way that they stop a lot of",
    "start": "1125960",
    "end": "1131919"
  },
  {
    "text": "problems from reaching into production with uh hosts that are unable to",
    "start": "1131919",
    "end": "1137320"
  },
  {
    "text": "start but then we need to clean our Fleet up and this is where rollbacks can help us out so if we fail our deployment",
    "start": "1137320",
    "end": "1143919"
  },
  {
    "text": "we can configure code deploy to automatically roll back when we breach those",
    "start": "1143919",
    "end": "1149840"
  },
  {
    "text": "settings so now we've modified our deployment process in the middle so that we run tests after each host has been",
    "start": "1149919",
    "end": "1157400"
  },
  {
    "start": "1150000",
    "end": "1150000"
  },
  {
    "text": "updated we now look to see if we've reached our minimum healthy host settings and if we have we'll perform a",
    "start": "1157400",
    "end": "1162679"
  },
  {
    "text": "roll back this also leaves our release management um unchanged",
    "start": "1162679",
    "end": "1170000"
  },
  {
    "text": "excuse",
    "start": "1170000",
    "end": "1172360"
  },
  {
    "text": "me so let's talk about segmenting production so I remember a team that as",
    "start": "1175840",
    "end": "1181640"
  },
  {
    "text": "part of their regular release process ended up breaking the add items to a cart functionality on their site now",
    "start": "1181640",
    "end": "1189240"
  },
  {
    "text": "they had already implemented synthetic traffic tests so they identified this problem very quickly and were able to",
    "start": "1189240",
    "end": "1195280"
  },
  {
    "text": "revert to a healthier deployment but customers were calling in Furious",
    "start": "1195280",
    "end": "1201559"
  },
  {
    "text": "because this was a very hi trffic site and customers needed to get their job done purchasing was part of their job",
    "start": "1201559",
    "end": "1207200"
  },
  {
    "text": "and they just couldn't and unfortunately when you deploy to all of production at once and",
    "start": "1207200",
    "end": "1213240"
  },
  {
    "text": "a bad change gets out it affects all of your",
    "start": "1213240",
    "end": "1217840"
  },
  {
    "text": "customers so if you leave production as one big pool then the risk of a bad change",
    "start": "1219559",
    "end": "1226080"
  },
  {
    "text": "affecting all customers is just too high the blast radius is too big so we're going to reduce our the risk of",
    "start": "1226080",
    "end": "1233400"
  },
  {
    "text": "affecting all customers by segmenting production into pieces now once we' have segmented into",
    "start": "1233400",
    "end": "1240200"
  },
  {
    "text": "multiple pieces we're going to deploy to a segment we're going to run tests on that segment and then we're going to continue to deploy and test until we've",
    "start": "1240200",
    "end": "1247720"
  },
  {
    "text": "um got code out to all segments in",
    "start": "1247720",
    "end": "1251520"
  },
  {
    "start": "1253000",
    "end": "1253000"
  },
  {
    "text": "production so as I said step one is to break production into multiple segments and and segments you can think of a",
    "start": "1253640",
    "end": "1260120"
  },
  {
    "text": "segment as a blast radius the smaller the segment the smaller the blast radius the most obvious segment type is",
    "start": "1260120",
    "end": "1267720"
  },
  {
    "text": "by region and you know AWS has the concept of a region which is a collection of data centers that are",
    "start": "1267720",
    "end": "1274480"
  },
  {
    "text": "geographically close together and we tend to deploy to one region at a",
    "start": "1274480",
    "end": "1279760"
  },
  {
    "text": "time uh so that uh a bad change in one region never affects a bad change in",
    "start": "1279760",
    "end": "1284840"
  },
  {
    "text": "another region quite a lot of our service also like to deploy at a Zone an availability",
    "start": "1284840",
    "end": "1291240"
  },
  {
    "text": "Zone at a time where an availability zone is a collection of data centers that are that are logically close",
    "start": "1291240",
    "end": "1297200"
  },
  {
    "text": "together and having a zonal deployment strategy ties your code changes to a network topology so this can be quite",
    "start": "1297200",
    "end": "1303039"
  },
  {
    "text": "useful too now some of our very large teams don't deploy to a a zone at a time",
    "start": "1303039",
    "end": "1310600"
  },
  {
    "text": "they deploy to a subzonal region we call a cell but you need to be at quite large",
    "start": "1310600",
    "end": "1315720"
  },
  {
    "text": "scale to want to go to a cellular style architecture but one thing all teams want to do is",
    "start": "1315720",
    "end": "1321760"
  },
  {
    "text": "they want to do just a little test before they go out to the rest of their segments so this is a canary deployment",
    "start": "1321760",
    "end": "1327840"
  },
  {
    "text": "where they deploy to a single host make sure it's working correctly before then deploying out to the rest of",
    "start": "1327840",
    "end": "1335519"
  },
  {
    "start": "1336000",
    "end": "1336000"
  },
  {
    "text": "production so your release process really is a reflection of the level of safety that you want to achieve the",
    "start": "1336440",
    "end": "1342600"
  },
  {
    "text": "minimum configuration I see is a canary deployment followed by a regional deployment",
    "start": "1342600",
    "end": "1348840"
  },
  {
    "text": "but a more typical scenario I see is a canary deployment followed by a 3az",
    "start": "1348840",
    "end": "1354120"
  },
  {
    "text": "deployment with three hosts in each a now this is a lot more servers um and so",
    "start": "1354120",
    "end": "1359600"
  },
  {
    "text": "in order to reduce cost you we move to uh cheaper instance types smaller instance",
    "start": "1359600",
    "end": "1365919"
  },
  {
    "text": "types so the process we're going to do is deploy to a canary uh do a canary deployment run some validation tests and",
    "start": "1367200",
    "end": "1375240"
  },
  {
    "text": "then once that's verified we're going to move on to our next segment which in this case happens to be an availability",
    "start": "1375240",
    "end": "1380880"
  },
  {
    "text": "Zone if that availability zone is deployed to and works correctly with our post- deployment tests we'll then start",
    "start": "1380880",
    "end": "1387640"
  },
  {
    "text": "Fanning out and deploying to a wider range of hosts in this case we'll deploy to the last two availability zones at",
    "start": "1387640",
    "end": "1394080"
  },
  {
    "text": "the same time so as we gain confidence we broaden our blast",
    "start": "1394080",
    "end": "1400640"
  },
  {
    "start": "1401000",
    "end": "1401000"
  },
  {
    "text": "radius so we can model these segments in code deploy code deploy has the concept",
    "start": "1401000",
    "end": "1406440"
  },
  {
    "text": "of deployment groups and and deployment groups allow you to associate an application with a set of",
    "start": "1406440",
    "end": "1411960"
  },
  {
    "text": "hosts now an a deployment group can identify hosts based on their easy to",
    "start": "1411960",
    "end": "1417760"
  },
  {
    "text": "tag their autoscaling tags or a combination of the two and this gives us really great",
    "start": "1417760",
    "end": "1424039"
  },
  {
    "text": "control of where exactly our code is going to end up so we're going we're going to model",
    "start": "1424039",
    "end": "1431240"
  },
  {
    "text": "our Canary deployment as one deployment group and we're going to model each Zone",
    "start": "1431240",
    "end": "1436600"
  },
  {
    "text": "as another deployment group now this ends up in our release process looking something like this we end up",
    "start": "1436600",
    "end": "1443240"
  },
  {
    "start": "1438000",
    "end": "1438000"
  },
  {
    "text": "having a canary deployment that goes to a single host followed by a test a post-",
    "start": "1443240",
    "end": "1448960"
  },
  {
    "text": "deployment test to verify that that deployment was good we then deploy out to an A and then",
    "start": "1448960",
    "end": "1455320"
  },
  {
    "text": "we test to see that that a has not had a regression in functionality and then again we fan out",
    "start": "1455320",
    "end": "1461400"
  },
  {
    "text": "to the remainder of our availability zones and this works well for a lot of our customers now notice we don't do a",
    "start": "1461400",
    "end": "1467559"
  },
  {
    "text": "test at the end of our last validation uh at the end of our last uh deployment",
    "start": "1467559",
    "end": "1472600"
  },
  {
    "text": "and that's because we're already running synthetic traffic tests which should catch capture regressions",
    "start": "1472600",
    "end": "1479559"
  },
  {
    "text": "already so I've spoken a lot about the post- deployment step the thing that we do after we've done a segment deployment",
    "start": "1479840",
    "end": "1486440"
  },
  {
    "start": "1480000",
    "end": "1480000"
  },
  {
    "text": "but now I want to get into the way those tests actually work so we want to gather enough",
    "start": "1486440",
    "end": "1492559"
  },
  {
    "text": "information after a deployment that we've got confidence that the deployment was good now each call to our service is",
    "start": "1492559",
    "end": "1500760"
  },
  {
    "text": "already logging some metrics back into cloudwatch it's already logging whether the calls are successful or unsuccessful",
    "start": "1500760",
    "end": "1507039"
  },
  {
    "text": "and we can use the cloudwatch metric stream as a data source to give us some",
    "start": "1507039",
    "end": "1512159"
  },
  {
    "text": "confidence on whether the deployment is good or not we can combine that with",
    "start": "1512159",
    "end": "1517279"
  },
  {
    "text": "looking for alarms in production if there are some sort of service level alarms going off then we probably want",
    "start": "1517279",
    "end": "1522799"
  },
  {
    "text": "to Halt deployments to production as well and we want to place some sort of time out around all of this so that uh",
    "start": "1522799",
    "end": "1530240"
  },
  {
    "text": "tests don't take forever so we're going to need to build",
    "start": "1530240",
    "end": "1536320"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "some post- deployment tests and add them into our Pipeline and we could write tests as a test action or a Lambda",
    "start": "1536320",
    "end": "1543480"
  },
  {
    "text": "invoke action or a custom action in code pipeline the nice part about using these",
    "start": "1543480",
    "end": "1548799"
  },
  {
    "text": "uh test types is that they're very easy to write but they have a limitation and that is that they can only run for a",
    "start": "1548799",
    "end": "1555720"
  },
  {
    "text": "maximum of 1 hour and some of our post- deployment tests are going to take a lot longer than 1",
    "start": "1555720",
    "end": "1563080"
  },
  {
    "text": "hour so there's another approval type that we have called um approval actions and they'll wait for some sort of",
    "start": "1563080",
    "end": "1569320"
  },
  {
    "text": "external stimulus to occur and approval actions have a 7h",
    "start": "1569320",
    "end": "1574480"
  },
  {
    "text": "hour timeout sorry 7day timeout so they've going they're going to give us plenty of time for us to run some sort",
    "start": "1574480",
    "end": "1580200"
  },
  {
    "text": "of external check and validate whether our deployments were working or",
    "start": "1580200",
    "end": "1585919"
  },
  {
    "text": "not so I want to show you pattern that we can use in order to use approvals as",
    "start": "1585919",
    "end": "1592200"
  },
  {
    "text": "tests so when a change hits an approval we can configure an approval to EV emit",
    "start": "1592200",
    "end": "1597360"
  },
  {
    "text": "an event on an SNS topic that message can be used to trigger a Lambda function",
    "start": "1597360",
    "end": "1603880"
  },
  {
    "text": "which we can then use to write our tests we can perform whatever test we want at that point if everything's good or not",
    "start": "1603880",
    "end": "1610799"
  },
  {
    "text": "we can call back into our Pipeline and put an approval result which says either it worked or it didn't work and once",
    "start": "1610799",
    "end": "1617000"
  },
  {
    "text": "that occurs if it's approved changes will continue to flow through to the our remaining uh",
    "start": "1617000",
    "end": "1623720"
  },
  {
    "start": "1623000",
    "end": "1623000"
  },
  {
    "text": "actions so here's a screenshot of an approval action being configured and we can configure this to send uh a message",
    "start": "1623760",
    "end": "1631640"
  },
  {
    "text": "on an SNS topic by just throwing in the SNS AR here we also have a comment field",
    "start": "1631640",
    "end": "1637399"
  },
  {
    "text": "and a comment field is raised to the approver now if we if this was a human approver we just wrote some human",
    "start": "1637399",
    "end": "1643600"
  },
  {
    "text": "readable text but our approv is going to be a Lambda function so we're going to pass through machine readable text we're",
    "start": "1643600",
    "end": "1650520"
  },
  {
    "text": "going to pass through a Json blob and in that Json blob we're going to pass through configuration that's required",
    "start": "1650520",
    "end": "1656320"
  },
  {
    "text": "for this test now in this case we want to pass through the metric stream how many data points we want to collect to",
    "start": "1656320",
    "end": "1662559"
  },
  {
    "text": "feel confident that the deployment is working what alarms we want to check for in production to see whether we're in",
    "start": "1662559",
    "end": "1669320"
  },
  {
    "text": "distress and whether we've timed",
    "start": "1669320",
    "end": "1673200"
  },
  {
    "text": "out so let's take a look at the end to end flow of what what this would actually look like so as a change rolls",
    "start": "1674559",
    "end": "1680519"
  },
  {
    "text": "through and hits our approval action it will emit an event on our SNS topic that",
    "start": "1680519",
    "end": "1686760"
  },
  {
    "text": "message will trigger a Lambda function and we're going to write that information to our Dynamo DB table",
    "start": "1686760",
    "end": "1692640"
  },
  {
    "text": "that's going to contain all the information about the approval that we want to process that is the end of that",
    "start": "1692640",
    "end": "1698960"
  },
  {
    "text": "flow now in the background we're going to have another Lambda function which we're going to call on a one minute",
    "start": "1698960",
    "end": "1704960"
  },
  {
    "text": "basis we're just going to have a cloudwatch event call that on a regular basis it's going to read the Dynamo DB",
    "start": "1704960",
    "end": "1710320"
  },
  {
    "text": "table and it's going to process each of these um validations now the validations as I",
    "start": "1710320",
    "end": "1716159"
  },
  {
    "text": "mentioned o wrong way the validations I mentioned are going to check the metric stream they're going to check that we've",
    "start": "1716159",
    "end": "1721600"
  },
  {
    "text": "timed out and they're going to check whether alarms are fired and if everything's great then we're going to",
    "start": "1721600",
    "end": "1726679"
  },
  {
    "text": "call back into the pipeline and approve the",
    "start": "1726679",
    "end": "1731519"
  },
  {
    "text": "test so we're going to dig into these two Lambda functions now the first function up the",
    "start": "1731840",
    "end": "1738480"
  },
  {
    "text": "top here is our register deployment function and its goal is really just to take the approval information and shove",
    "start": "1738480",
    "end": "1744399"
  },
  {
    "text": "it in Dynamo DB so here's a here's the method that will push this information into",
    "start": "1744399",
    "end": "1751720"
  },
  {
    "text": "Dynamo now the Handler in Dynamo takes an events parameter and in that events",
    "start": "1751720",
    "end": "1757320"
  },
  {
    "text": "parameter will be all the information from our SNS topic including the approval information we're going to pull",
    "start": "1757320",
    "end": "1763440"
  },
  {
    "text": "that out because it's already in Json and we're going to store it in a local variable now notice I'm doing some not",
    "start": "1763440",
    "end": "1769080"
  },
  {
    "text": "great coding practices here I'm assuming we've got an array of size one and I'm just pulling out an item this is this is",
    "start": "1769080",
    "end": "1774919"
  },
  {
    "text": "slideware so we'll have proper code later on we're going to write that data out to",
    "start": "1774919",
    "end": "1781000"
  },
  {
    "text": "a Dynamo DB table and we're going to come back and process that in our second",
    "start": "1781000",
    "end": "1786840"
  },
  {
    "text": "method so here's our second function that we're calling every minute to actually run the tests so it needs to",
    "start": "1786840",
    "end": "1794000"
  },
  {
    "text": "read a read a cloudwatch uh metric stream and make sure we've got enough positive data points to believe we've",
    "start": "1794000",
    "end": "1800720"
  },
  {
    "text": "got confidence in the deployment needs to check that alarms are not firing and",
    "start": "1800720",
    "end": "1806159"
  },
  {
    "text": "we then need to time out now I'm not going to show you all the code for this because it's it's a little long but it",
    "start": "1806159",
    "end": "1811440"
  },
  {
    "text": "will be available after the talk in uh our AWS Labs account on GitHub but what",
    "start": "1811440",
    "end": "1817960"
  },
  {
    "text": "I will show you is how easy it is to call back to code pipeline to approve the",
    "start": "1817960",
    "end": "1823000"
  },
  {
    "text": "result so here's our approval method and we can call the put approval",
    "start": "1823000",
    "end": "1829240"
  },
  {
    "text": "result function and we're just pulling all the data back out of our approval message that we popped off the uh snsq",
    "start": "1829240",
    "end": "1837360"
  },
  {
    "text": "and wrote to the table and that'll have our pipeline name our stage name our action name and whether we're approving",
    "start": "1837360",
    "end": "1844000"
  },
  {
    "text": "or rejecting the message with that call uh everything will continue to",
    "start": "1844000",
    "end": "1850519"
  },
  {
    "start": "1847000",
    "end": "1847000"
  },
  {
    "text": "work so I want to briefly talk about Canary deployments though because they are slightly different from other",
    "start": "1850519",
    "end": "1856679"
  },
  {
    "text": "segments firstly though the way that they're the same is that they participate in serving",
    "start": "1856679",
    "end": "1862799"
  },
  {
    "text": "production traffic they configured as a normal production instance and they contribute to the normal production",
    "start": "1862799",
    "end": "1869200"
  },
  {
    "text": "metric stream but they also emit a second metric stream and the reason we do this",
    "start": "1869200",
    "end": "1876399"
  },
  {
    "text": "is we don't want our Canary data to get drowned out with the rest of our production Fleet you can imagine a",
    "start": "1876399",
    "end": "1882159"
  },
  {
    "text": "situation where we have hundreds of hosts and only one Canary and you're merging those two um streams together",
    "start": "1882159",
    "end": "1888880"
  },
  {
    "text": "then any Canary noise will just get get washed out so in these post validation tests",
    "start": "1888880",
    "end": "1895399"
  },
  {
    "text": "these post- deployment tests we're going to use this Canary's custom metric stream as the data stream to test",
    "start": "1895399",
    "end": "1902519"
  },
  {
    "text": "whether the system is continuing to work or not so segmenting production provides us",
    "start": "1902519",
    "end": "1909600"
  },
  {
    "start": "1906000",
    "end": "1906000"
  },
  {
    "text": "with the safety we need to prevent bad changes from impacting all of our customers and we need to segment",
    "start": "1909600",
    "end": "1915519"
  },
  {
    "text": "production into at least two SE Ms a canary deployment and a regional deployment if you're a larger team",
    "start": "1915519",
    "end": "1921919"
  },
  {
    "text": "you'll probably segment even further into zones or cells and then you'll run",
    "start": "1921919",
    "end": "1927600"
  },
  {
    "text": "a test after each deployment to make sure that it works now segmenting our deployments has",
    "start": "1927600",
    "end": "1934399"
  },
  {
    "text": "a really big impact on both our release process and on our deployment",
    "start": "1934399",
    "end": "1940039"
  },
  {
    "text": "configuration you'll see that um you'll see that we now have uh a",
    "start": "1940039",
    "end": "1947279"
  },
  {
    "text": "canary deployment and a regional deployment and we now have to reflect that in our",
    "start": "1947279",
    "end": "1952480"
  },
  {
    "text": "pipeline we'll also be adding in a zonal deployment in this example and that will also be reflected in our Pipeline and",
    "start": "1952480",
    "end": "1959480"
  },
  {
    "text": "then between each of our segments we need to run post- deployment tests and those two need to be reflected in our",
    "start": "1959480",
    "end": "1967559"
  },
  {
    "text": "pipeline all right let's talk about halting uh promotions uh to",
    "start": "1970600",
    "end": "1976039"
  },
  {
    "text": "production so at AWS we regularly review incidents",
    "start": "1976039",
    "end": "1983120"
  },
  {
    "start": "1979000",
    "end": "1979000"
  },
  {
    "text": "that happen on our services and I remember one of our internal Services an HR System had a problem where one of",
    "start": "1983120",
    "end": "1989360"
  },
  {
    "text": "their hosts had gone wonky and it was throwing alarm it was just throwing bad results back so the engineer the",
    "start": "1989360",
    "end": "1996840"
  },
  {
    "text": "operator jumped online and took that host out of service so that he could diagnose the problems with that",
    "start": "1996840",
    "end": "2002960"
  },
  {
    "text": "host unfortunately in the background their pipeline triggered off",
    "start": "2002960",
    "end": "2008480"
  },
  {
    "text": "a new deployment and brought that host back into service this was frustrating for our",
    "start": "2008480",
    "end": "2014120"
  },
  {
    "text": "customers because our customers now received bad traffic which our customers are internal customers like me and it's",
    "start": "2014120",
    "end": "2021519"
  },
  {
    "text": "also frustrating for the operator because the operator now has a lot more moving Parts going on in production and",
    "start": "2021519",
    "end": "2027480"
  },
  {
    "text": "it makes it more difficult to diagnose so when your systems are experiencing some sort of availability",
    "start": "2027480",
    "end": "2033919"
  },
  {
    "text": "event it's helpful to keep uh the production system stable and so we want",
    "start": "2033919",
    "end": "2039279"
  },
  {
    "text": "to disable deployments into production during an availability",
    "start": "2039279",
    "end": "2044440"
  },
  {
    "text": "event so let's build one so when your system is suffering",
    "start": "2044440",
    "end": "2049520"
  },
  {
    "text": "this availability event there should be alarms firing somewhere now you may have service level",
    "start": "2049520",
    "end": "2055800"
  },
  {
    "text": "alarms that fire when your particular service is not well or you might have companywide alarms that fire when some",
    "start": "2055800",
    "end": "2062240"
  },
  {
    "text": "broader issues are happening in your company either way that's a good notification that you want to stop",
    "start": "2062240",
    "end": "2067480"
  },
  {
    "text": "deployments to production now we've already built synthetic tests that will tell us when there is a",
    "start": "2067480",
    "end": "2074800"
  },
  {
    "text": "problem in production and we can use those alarms to to call another Lambda",
    "start": "2074800",
    "end": "2080520"
  },
  {
    "text": "function to disable promotions to production once we've resolved our issue",
    "start": "2080520",
    "end": "2088280"
  },
  {
    "text": "in production we can then manually reenable that transition and allow",
    "start": "2088280",
    "end": "2093520"
  },
  {
    "text": "changes to flow back out to production again",
    "start": "2093520",
    "end": "2098879"
  },
  {
    "text": "so the code to disable a code pipeline transition is quite trivial uh code",
    "start": "2103320",
    "end": "2108480"
  },
  {
    "text": "pipeline has an API named uh disabled stage Transitions and we can call that with",
    "start": "2108480",
    "end": "2114800"
  },
  {
    "text": "the pipeline name and the stage name and whether we're going to disable the inbound or the outbound transition we",
    "start": "2114800",
    "end": "2121200"
  },
  {
    "text": "can also provide a reason uh for disabling the transition as well this is what it looks like in the",
    "start": "2121200",
    "end": "2127839"
  },
  {
    "text": "UI you can see that the transition has been colored out and when you click on it you will see the reason for uh for",
    "start": "2127839",
    "end": "2136320"
  },
  {
    "text": "the transition to be disabled and again just click the enable button and changes will then continue to flow through to",
    "start": "2136320",
    "end": "2144560"
  },
  {
    "text": "production so let's wrap up um halting promotions to production basically if",
    "start": "2144640",
    "end": "2150160"
  },
  {
    "text": "there's an issue going on in production it's worthwhile stopping promotions we",
    "start": "2150160",
    "end": "2155359"
  },
  {
    "text": "want to uh I'll give the operator time to diagnose issues in",
    "start": "2155359",
    "end": "2160640"
  },
  {
    "text": "production and to do that we just disable our stage",
    "start": "2160640",
    "end": "2165800"
  },
  {
    "text": "transitions all",
    "start": "2167040",
    "end": "2170280"
  },
  {
    "text": "right so our release process has now been updated to disable promotions into",
    "start": "2172520",
    "end": "2178240"
  },
  {
    "text": "production and we're starting to build a release process that is sensitive to environmental",
    "start": "2178240",
    "end": "2185119"
  },
  {
    "text": "concerns so let's talk about some gates now in many businesses there are",
    "start": "2185119",
    "end": "2190920"
  },
  {
    "text": "key dates throughout the year when they cannot afford to have anything go wrong with their production system if you're a",
    "start": "2190920",
    "end": "2197800"
  },
  {
    "text": "sporting site then it's important that your site remains stable through a big event like uh the Super Bowl if you're a",
    "start": "2197800",
    "end": "2205079"
  },
  {
    "text": "retailer it's important that your site remains stable during uh Black",
    "start": "2205079",
    "end": "2210280"
  },
  {
    "text": "Friday at Amazon these sensitive deployment times of the year are called Black",
    "start": "2210280",
    "end": "2215680"
  },
  {
    "text": "Days now during these sensitive times the risk to return ratio for performing",
    "start": "2215680",
    "end": "2221560"
  },
  {
    "text": "a deployment change isn't very favorable a bad production change during a sensitive time may not only affect the",
    "start": "2221560",
    "end": "2228640"
  },
  {
    "text": "reputation of your business but it might also affect your bottom line so deployments to production should",
    "start": "2228640",
    "end": "2235880"
  },
  {
    "text": "be a regular and normal occurrence and I hope they are for you but during these sensitive times the business should be",
    "start": "2235880",
    "end": "2242040"
  },
  {
    "text": "able to Halt deployments uh in order to make production safe and stable",
    "start": "2242040",
    "end": "2248359"
  },
  {
    "text": "we can think of these black days as gates gates that open and close as we enter and exit these sensitive days with",
    "start": "2248359",
    "end": "2255720"
  },
  {
    "text": "throughout the year and to have this enforced companywide we actually need every pipeline to have a common action",
    "start": "2255720",
    "end": "2263040"
  },
  {
    "text": "inserted into its release process in code pipeline we can create",
    "start": "2263040",
    "end": "2268160"
  },
  {
    "text": "Black Days using approval actions and have a Lambda function to approve that action when it's not a sensitive time so",
    "start": "2268160",
    "end": "2275480"
  },
  {
    "text": "let's go have a look at this so let's use an approval action to build",
    "start": "2275480",
    "end": "2281480"
  },
  {
    "text": "a system that halts deployments and so when a change rolls through and we have an approval a black day approval we can",
    "start": "2281480",
    "end": "2288880"
  },
  {
    "text": "fire off a message on an SNS topic we can have that call a Lambda function and we can write that data to a Dynamo DB",
    "start": "2288880",
    "end": "2295760"
  },
  {
    "text": "table so we'll have our black day information in that uh the current date in that Dynamo DB table we'll then have",
    "start": "2295760",
    "end": "2303040"
  },
  {
    "text": "a Lambda function that runs in the background that polls that Dynamo DB table and if we're not in a sensitive",
    "start": "2303040",
    "end": "2309960"
  },
  {
    "text": "day we can approve the pipeline uh approval now this should all look",
    "start": "2309960",
    "end": "2316040"
  },
  {
    "text": "familiar to you all because you know this was this is our black day",
    "start": "2316040",
    "end": "2321200"
  },
  {
    "text": "architecture and this is the architecture that we have for post- deployment tests and they're effectively",
    "start": "2321200",
    "end": "2329640"
  },
  {
    "start": "2330000",
    "end": "2330000"
  },
  {
    "text": "identical the logic in the two Lambda functions is slightly different but they really are there to achieve the same",
    "start": "2330200",
    "end": "2336119"
  },
  {
    "text": "purpose the first Lambda functions purpose is to write the approval information into it",
    "start": "2336119",
    "end": "2342400"
  },
  {
    "text": "into some persistent store and our other Lambda function's job is to perform the test that's",
    "start": "2342400",
    "end": "2348599"
  },
  {
    "text": "required in in order to either approve or reject the approval",
    "start": "2348599",
    "end": "2353839"
  },
  {
    "start": "2353000",
    "end": "2353000"
  },
  {
    "text": "action so approval actions are a flexible tool for building a variety of",
    "start": "2353839",
    "end": "2359359"
  },
  {
    "text": "tests including Gates now in this technique we're going to we used companywide black days as an",
    "start": "2359359",
    "end": "2366079"
  },
  {
    "text": "example of a centralized policy and centralized policies can be managed in",
    "start": "2366079",
    "end": "2371839"
  },
  {
    "text": "pipelines and to do this we add common actions into every pipeline black days can be thought of as",
    "start": "2371839",
    "end": "2379040"
  },
  {
    "text": "Gates that open and close when our pipeline is allowed to deploy to production and close during sensitive",
    "start": "2379040",
    "end": "2385520"
  },
  {
    "text": "times and in code pipeline Gates can be implemented as approval",
    "start": "2385520",
    "end": "2391680"
  },
  {
    "text": "actions now to add even more safety to our release process we can now pause",
    "start": "2393400",
    "end": "2398920"
  },
  {
    "text": "deployments in production uh when we have a heightened",
    "start": "2398920",
    "end": "2404920"
  },
  {
    "text": "sensitivity so that finishes my review of the five techniques to improve your deployment process and my goal here was",
    "start": "2406359",
    "end": "2412720"
  },
  {
    "text": "to teach you a few techniques to make your pipeline safer now I hope these techniques not",
    "start": "2412720",
    "end": "2418599"
  },
  {
    "text": "only make your customers happier but they make your on call operators happier too and this wasn't just a talk about",
    "start": "2418599",
    "end": "2425680"
  },
  {
    "text": "handling a bad change once it reaches production it's also about modifying your release process and your tools to",
    "start": "2425680",
    "end": "2432480"
  },
  {
    "text": "behave in a way that works for your team so to recap we can use continuous production",
    "start": "2432480",
    "end": "2439640"
  },
  {
    "text": "testing to react quickly when there are problems with our production",
    "start": "2439640",
    "end": "2444760"
  },
  {
    "text": "environment we can deploy safely to production by setting up our deployment configuration to test after each host",
    "start": "2444760",
    "end": "2450920"
  },
  {
    "text": "update and to roll back when a deployment fails we also learned that we could segment production in order to",
    "start": "2450920",
    "end": "2457119"
  },
  {
    "text": "reduce the blast radius to our customers and we wrapped up with a technique to manage our pipelines so we",
    "start": "2457119",
    "end": "2464319"
  },
  {
    "text": "could automatically halt deployments when production is in distress and we learned that pipelines",
    "start": "2464319",
    "end": "2469680"
  },
  {
    "text": "can be customized to change the flow of changes to production according to external",
    "start": "2469680",
    "end": "2475838"
  },
  {
    "start": "2477000",
    "end": "2477000"
  },
  {
    "text": "Gates now we've dramatically overh hold both our deployment processes and our release",
    "start": "2478079",
    "end": "2484079"
  },
  {
    "text": "processes we now have realtime dat on the health of our system coming from synthetic traffic",
    "start": "2484079",
    "end": "2490359"
  },
  {
    "text": "tests from a deployment perspective we've added three new tests that didn't exist before we started we're testing",
    "start": "2490359",
    "end": "2497640"
  },
  {
    "text": "that each host can serve traffic we're testing that each segment deployed to does not cause a functional regression",
    "start": "2497640",
    "end": "2504920"
  },
  {
    "text": "and we're testing whether deployment when a deployment fails that we cause a roll",
    "start": "2504920",
    "end": "2510960"
  },
  {
    "text": "back from a release perspective we've also added in the ability to Halt promotions to ruction when the system's",
    "start": "2510960",
    "end": "2517680"
  },
  {
    "text": "under distress and we've provided a centralized gate so that so that your",
    "start": "2517680",
    "end": "2522880"
  },
  {
    "text": "company can have more control over your deployment processes I really hope that you've",
    "start": "2522880",
    "end": "2528680"
  },
  {
    "text": "learned something new today and I hope that you can apply some of these techniques to your continuous delivery",
    "start": "2528680",
    "end": "2533800"
  },
  {
    "text": "process thank you very",
    "start": "2533800",
    "end": "2537319"
  },
  {
    "text": "much",
    "start": "2542480",
    "end": "2545480"
  }
]