[
  {
    "start": "0",
    "end": "53000"
  },
  {
    "text": "so welcome everyone uh my name is Chan dander I'm a senior product manager in the deployment and Management Services",
    "start": "1000",
    "end": "8040"
  },
  {
    "text": "among within AWS I focus mainly on cloud formation and today uh this session is",
    "start": "8040",
    "end": "14320"
  },
  {
    "text": "about diving deep into infrastructure as code on AWS and cloud formation is one of our",
    "start": "14320",
    "end": "21320"
  },
  {
    "text": "Flagship services for doing infrastructure as code on AWS um and I",
    "start": "21320",
    "end": "26400"
  },
  {
    "text": "know we have a diverse audience here there are some people who have never used AWS there are some who have who are",
    "start": "26400",
    "end": "32680"
  },
  {
    "text": "experts at AWS there are some who are already doing infrastructure as code there are some who are in a more",
    "start": "32680",
    "end": "38120"
  },
  {
    "text": "traditional operations um but I promise there is something for everyone even",
    "start": "38120",
    "end": "43760"
  },
  {
    "text": "though some of this stuff might be already known to some of you um so bear with me and I promise there is there is",
    "start": "43760",
    "end": "49600"
  },
  {
    "text": "useful stuff here for everyone in the audience um so you are attending",
    "start": "49600",
    "end": "55320"
  },
  {
    "start": "53000",
    "end": "140000"
  },
  {
    "text": "infrastructure as code session so I assume you are already on board uh This Train which is uh likely you are in a",
    "start": "55320",
    "end": "62879"
  },
  {
    "text": "business where you need to innovate fast experiment fast so that you can distinguish yourself from the other guy",
    "start": "62879",
    "end": "69960"
  },
  {
    "text": "um innovating fast also means that you should be able to fail fast and reduce",
    "start": "69960",
    "end": "75400"
  },
  {
    "text": "the risk uh in Failure so that you don't lose the next opportunity and obviously",
    "start": "75400",
    "end": "80960"
  },
  {
    "text": "continuous delivery continuous integration um enable that Innovative",
    "start": "80960",
    "end": "87119"
  },
  {
    "text": "agile business uh because you can push features out fast uh if something works",
    "start": "87119",
    "end": "93040"
  },
  {
    "text": "you can double down quickly on that if something doesn't work you can course correct really quickly uh and that's",
    "start": "93040",
    "end": "98880"
  },
  {
    "text": "continuous delivery and obviously the whole devops movement supports continuous delivery because there is",
    "start": "98880",
    "end": "104840"
  },
  {
    "text": "good communication sharing automation which allows you to be that agile to be",
    "start": "104840",
    "end": "110799"
  },
  {
    "text": "able to double down on things that are working and you know to eliminate things that are not",
    "start": "110799",
    "end": "116039"
  },
  {
    "text": "working and infrastructure as code in particular and cloud in general supports",
    "start": "116039",
    "end": "121920"
  },
  {
    "text": "devops because you can automate everything you can treat everything as software even if there are servers which",
    "start": "121920",
    "end": "128440"
  },
  {
    "text": "are serving web request or databases or networking components you can write",
    "start": "128440",
    "end": "133840"
  },
  {
    "text": "software for managing all of it um and automate it and hence deliver that",
    "start": "133840",
    "end": "139760"
  },
  {
    "text": "continuously so how do you do infrastructure as code on AWS the flagship service for that is AWS cloud",
    "start": "139760",
    "end": "146440"
  },
  {
    "start": "140000",
    "end": "285000"
  },
  {
    "text": "formation and for those who are not familiar with cloud formation um it allows you to create templates of",
    "start": "146440",
    "end": "153599"
  },
  {
    "text": "the architectures and applications that you want to run on AWS and it the",
    "start": "153599",
    "end": "158879"
  },
  {
    "text": "architectures could mean anything in the traditional sense it would mean network storage and compute uh but in in the new",
    "start": "158879",
    "end": "166720"
  },
  {
    "text": "era of cloud computing it could mean dyb tables or uh elastic Ash clusters S3",
    "start": "166720",
    "end": "173840"
  },
  {
    "text": "buckets and so on and so forth uh so it allows you to create templates of the architectures you want to have",
    "start": "173840",
    "end": "180519"
  },
  {
    "text": "you pass those templates to the service and then the service figures out what are the steps it needs to take to get",
    "start": "180519",
    "end": "187319"
  },
  {
    "text": "you to that architecture so you you specify the desired State and cloud formation",
    "start": "187319",
    "end": "193599"
  },
  {
    "text": "figures out how to get there and you don't have to worry about the granular AP granular API calls that you need to",
    "start": "193599",
    "end": "200120"
  },
  {
    "text": "make to individual service so let's say you are provisioning a web application um you you probably have S3 bucket an",
    "start": "200120",
    "end": "207120"
  },
  {
    "text": "RDS database um a web server a cloudfront distribution and so on and so",
    "start": "207120",
    "end": "213280"
  },
  {
    "text": "forth and with cloud formation you don't have to figure out individual API calls for each of these Services you don't",
    "start": "213280",
    "end": "220120"
  },
  {
    "text": "have to figure out the order of creation for each of these resources um and you don't have to worry about failure modes",
    "start": "220120",
    "end": "226920"
  },
  {
    "text": "if any so uh um if if a request times out you don't need to worry about",
    "start": "226920",
    "end": "233040"
  },
  {
    "text": "retrying it cloud formation does it automatically for you uh so that's fundamentally different from the",
    "start": "233040",
    "end": "238200"
  },
  {
    "text": "traditional approach of provisioning scripts where you had to figure out every step and debug every step which",
    "start": "238200",
    "end": "245040"
  },
  {
    "text": "might go wrong this is more like building a cad model and handing it over",
    "start": "245040",
    "end": "250280"
  },
  {
    "text": "to a 3D printer and the printer prints out the desired object for you when you have templates you can",
    "start": "250280",
    "end": "258600"
  },
  {
    "text": "follow the time tested software engineering principles on the temp on templates so you can Version Control",
    "start": "258600",
    "end": "264080"
  },
  {
    "text": "them code review them create replicas Branch them use them in multiple a",
    "start": "264080",
    "end": "269759"
  },
  {
    "text": "accounts or regions and they they will work as expected we also have customers who",
    "start": "269759",
    "end": "275919"
  },
  {
    "text": "integrate cloud formation templates into their cicd pipelines like genkins um or",
    "start": "275919",
    "end": "282320"
  },
  {
    "text": "atlassian bamboo the basic workflow that you have",
    "start": "282320",
    "end": "287840"
  },
  {
    "start": "285000",
    "end": "345000"
  },
  {
    "text": "while using cloud formation is something like this you first of all you have a business problem and you design a solution for that problem and broadly",
    "start": "287840",
    "end": "295919"
  },
  {
    "text": "you you will need to write application code to implement the the business logic and then you will need to have",
    "start": "295919",
    "end": "301759"
  },
  {
    "text": "infrastructure to host that application so you design application",
    "start": "301759",
    "end": "306880"
  },
  {
    "text": "code Implement application code and also design the infrastructure templates from",
    "start": "306880",
    "end": "312120"
  },
  {
    "text": "the templates you create Stacks which are collection of resources uh cloud formation creates",
    "start": "312120",
    "end": "318080"
  },
  {
    "text": "those stacks for you from the templates and then cloud formation also has hooks to let you deploy the application",
    "start": "318080",
    "end": "324639"
  },
  {
    "text": "packages on top of those stacks of infrastructure resources um and once you have a stack",
    "start": "324639",
    "end": "330479"
  },
  {
    "text": "it's basically infrastructure and application running and serving your customers and obviously you're not going",
    "start": "330479",
    "end": "336080"
  },
  {
    "text": "to stop there you're going to continue to iterate on it so we'll we will follow",
    "start": "336080",
    "end": "341360"
  },
  {
    "text": "through this workflow that you can enable using cloud formation um just to take an example",
    "start": "341360",
    "end": "348160"
  },
  {
    "start": "345000",
    "end": "668000"
  },
  {
    "text": "imagine you are in the food ordering business or food delivery business um you will probably have a bunch of",
    "start": "348160",
    "end": "356039"
  },
  {
    "text": "services like these a a food catalog a billing service a payment service service a customer database and so on",
    "start": "356039",
    "end": "361479"
  },
  {
    "text": "and so forth um whether you call it service oriented architecture or microservices it's up to you but it's",
    "start": "361479",
    "end": "367479"
  },
  {
    "text": "either ways you're going to have a lot of services um and they are going to have interactions between them and dependencies among them so um if food",
    "start": "367479",
    "end": "374720"
  },
  {
    "text": "ordering the food catalog might want some information from the recommendation service or the customer database and so on and so forth um so when you are",
    "start": "374720",
    "end": "381800"
  },
  {
    "text": "modeling this in cloud formation each service or each U independent unit of",
    "start": "381800",
    "end": "388120"
  },
  {
    "text": "operation could be model as a stack depending on the complexity if it's too complex you can also divide it into",
    "start": "388120",
    "end": "394000"
  },
  {
    "text": "multiple Stacks uh but we are going to Deep dive deep into the food catalog website so let's say you want to design",
    "start": "394000",
    "end": "400639"
  },
  {
    "text": "a web application which is a catalog uh of food items in cloud formation or actually in",
    "start": "400639",
    "end": "408759"
  },
  {
    "text": "AWS it will look something like this um you obviously need a security group to secure the application you",
    "start": "408759",
    "end": "415800"
  },
  {
    "text": "need a server to uh to serve the request and you're also going to be scaling up",
    "start": "415800",
    "end": "421960"
  },
  {
    "text": "or down uh which is done using an Autos scaling group uh you need a load",
    "start": "421960",
    "end": "427639"
  },
  {
    "text": "balancer um and obviously you need the brain of that application which is the software that you're going to write so",
    "start": "427639",
    "end": "433120"
  },
  {
    "text": "you need a way to deploy that software um and it's not an island uh the food",
    "start": "433120",
    "end": "438479"
  },
  {
    "text": "catalog service is going to take information from other services like the database service and recommendation",
    "start": "438479",
    "end": "445280"
  },
  {
    "text": "service so you need some way to get that information into the food C log website",
    "start": "445280",
    "end": "450680"
  },
  {
    "text": "and then you might want to optimize it optimize this application by doing things like um adding a me mcash cluster",
    "start": "450680",
    "end": "458960"
  },
  {
    "text": "or adding some alarms uh so that you can take action if something things are not going too well and so this is your web",
    "start": "458960",
    "end": "465879"
  },
  {
    "text": "application that you want to run on AWS and now we're going to walk through how you model that in cloud",
    "start": "465879",
    "end": "473840"
  },
  {
    "text": "formation um so if you look inside a cloud formation template you can model each of these",
    "start": "473879",
    "end": "480000"
  },
  {
    "text": "resources and they look something like what we have on the right side uh each of the resources are modeled as Json",
    "start": "480000",
    "end": "487080"
  },
  {
    "text": "objects and notice that they describe the desired state that you want to have",
    "start": "487080",
    "end": "492240"
  },
  {
    "text": "for the web server group you specify how many what's the range of uh instances",
    "start": "492240",
    "end": "498319"
  },
  {
    "text": "what's the range of number of instances you want to have and you can uh uh the",
    "start": "498319",
    "end": "504080"
  },
  {
    "text": "the actual number of instances can vary in that range based on the load um and then you can specify things like an",
    "start": "504080",
    "end": "510800"
  },
  {
    "text": "Autos scaling group is connected to a load balancer but you don't have to write the code which actually makes API",
    "start": "510800",
    "end": "517080"
  },
  {
    "text": "calls to the autoscaling apis and actually Provisions the instance for you um and then goes and uh Provisions a",
    "start": "517080",
    "end": "523959"
  },
  {
    "text": "load balancer for you we have some customers who write Json directly and we have customers who",
    "start": "523959",
    "end": "531040"
  },
  {
    "text": "don't like to write Json uh so what they do is they use um tools where uh which",
    "start": "531040",
    "end": "538200"
  },
  {
    "text": "are typically written WR in their favorite programming language like Ruby or python that generate the Json templates so that's a second option you",
    "start": "538200",
    "end": "545360"
  },
  {
    "text": "have to create Cloud fation templates uh and a third option that is emerging is also there are some tools out there",
    "start": "545360",
    "end": "551360"
  },
  {
    "text": "which let you create cloud formation templates graphically by dragging and dropping these objects and generating",
    "start": "551360",
    "end": "557440"
  },
  {
    "text": "Json out of it so there are multiple ways to create these Json templates But ultimately you're going to see something a model like",
    "start": "557440",
    "end": "564279"
  },
  {
    "text": "this um there is information that you need to supply into a Cloud information",
    "start": "564279",
    "end": "570320"
  },
  {
    "text": "stack uh so in our example you want to get in what's the DB end point for the",
    "start": "570320",
    "end": "575480"
  },
  {
    "text": "customer database or um what's the uh you know what's the Endo for the",
    "start": "575480",
    "end": "580920"
  },
  {
    "text": "recommendation service and so so on and so forth and the way you get information in into a cloud formation stack is by",
    "start": "580920",
    "end": "587720"
  },
  {
    "text": "passing in parameters um they are not free form you can add validation logic around it so",
    "start": "587720",
    "end": "593600"
  },
  {
    "text": "for example uh if you want to if you want to choose from a limited set of",
    "start": "593600",
    "end": "600079"
  },
  {
    "text": "instance types you can actually specify that if you want to make sure that a",
    "start": "600079",
    "end": "605519"
  },
  {
    "text": "value that you're passing in is a valid VPC ID you can actually specify AWS ec2",
    "start": "605519",
    "end": "611959"
  },
  {
    "text": "VPC ID as a parameter data type uh and that allows um you to make sure that",
    "start": "611959",
    "end": "618800"
  },
  {
    "text": "this the input that is getting into a stack is uh is",
    "start": "618800",
    "end": "624160"
  },
  {
    "text": "valid on the other side you also need to get information out so once you have this stack set setup the stack as an",
    "start": "624160",
    "end": "630880"
  },
  {
    "text": "application is going to have an endpoint um so you can specify the outputs that you want to get out of the stack uh in",
    "start": "630880",
    "end": "638079"
  },
  {
    "text": "this case you know it will be the DNS name or the IP address of the elastic load",
    "start": "638079",
    "end": "644680"
  },
  {
    "text": "balancer and the this is an important part which is deploying application that",
    "start": "645000",
    "end": "650560"
  },
  {
    "text": "actually runs on the web servers um the primary way to bring in software bits",
    "start": "650560",
    "end": "657440"
  },
  {
    "text": "and bootstrapping them on a website server uh in cloud formation is what we call cloud formation in it we will go uh",
    "start": "657440",
    "end": "664040"
  },
  {
    "text": "deep into this uh this topic a little later in this presentation um and then for convenience",
    "start": "664040",
    "end": "671480"
  },
  {
    "start": "668000",
    "end": "709000"
  },
  {
    "text": "the cloud formation template language provides multiple other functions um like you know a getting an attribute of",
    "start": "671480",
    "end": "678440"
  },
  {
    "text": "a resource or joining a string and so on and so forth and we actually uh just",
    "start": "678440",
    "end": "684560"
  },
  {
    "text": "launched support for executing Lambda invoking Lambda functions while CL you",
    "start": "684560",
    "end": "689920"
  },
  {
    "text": "are creating cloud formation Stacks so that opens a door for writing any code that you want uh while creating a cloud",
    "start": "689920",
    "end": "696600"
  },
  {
    "text": "formation stack and getting it executed so let's say you want to u reverse a",
    "start": "696600",
    "end": "702000"
  },
  {
    "text": "string uh you can actually write a Lambda function get the string reverse and use it in a cloud formation",
    "start": "702000",
    "end": "709000"
  },
  {
    "text": "stack um once you have a template you you can use the cloudformation console to upload the template specify the",
    "start": "709000",
    "end": "715959"
  },
  {
    "text": "parameter values and create a stack obviously if if you are practicing infra infrastructure as code chances are you",
    "start": "715959",
    "end": "722200"
  },
  {
    "text": "want to automate all of this so you won't go to the console to create the stack you will probably use the apis the",
    "start": "722200",
    "end": "727959"
  },
  {
    "text": "sdks or the command line to provide the template and create the stack you can still come back to the console to see",
    "start": "727959",
    "end": "734839"
  },
  {
    "text": "the health of the stack so once your stack is created you're going to see the status of each stack that you have and",
    "start": "734839",
    "end": "741040"
  },
  {
    "text": "some useful information like the events uh that happened for each stack uh the",
    "start": "741040",
    "end": "746760"
  },
  {
    "text": "templates associated with it or t tags that are added to each of the",
    "start": "746760",
    "end": "752240"
  },
  {
    "start": "752000",
    "end": "772000"
  },
  {
    "text": "tag and as I mentioned U I'm using infrastructure as a very broad term it's not just Network compute and storage uh",
    "start": "752399",
    "end": "759720"
  },
  {
    "text": "cloud formation today supports over 20 AWS services and we are continuously uh adding support for more and more AWS",
    "start": "759720",
    "end": "766639"
  },
  {
    "text": "features uh so you can provision any of this through cloud",
    "start": "766639",
    "end": "772160"
  },
  {
    "start": "772000",
    "end": "825000"
  },
  {
    "text": "formation and that was the basic workflow now if we double click on",
    "start": "772480",
    "end": "777760"
  },
  {
    "text": "creating infrastructure templates um you can treat these templates just like any other software",
    "start": "777760",
    "end": "785000"
  },
  {
    "text": "you can code them using your favorite development tools right from Visual Studio to wiim um you can Version",
    "start": "785000",
    "end": "792760"
  },
  {
    "text": "Control them run code reviews you can even run unit test so let's say you have a complex architecture naturally you're",
    "start": "792760",
    "end": "799839"
  },
  {
    "text": "going to have some logical uh modu uh you know modularization in that",
    "start": "799839",
    "end": "805120"
  },
  {
    "text": "architecture so you might have a subnet uh independent of some other subnet and when you're editing a template for a",
    "start": "805120",
    "end": "811680"
  },
  {
    "text": "given subnet before merging it back to your main branch you can actually run unit test on any changes that you have",
    "start": "811680",
    "end": "818519"
  },
  {
    "text": "made to that subnet template so you can apply any any software engineering principles that you apply to your",
    "start": "818519",
    "end": "824199"
  },
  {
    "text": "application code um and in fact I have heard this thing uh this ter uh this phrase",
    "start": "824199",
    "end": "830240"
  },
  {
    "start": "825000",
    "end": "963000"
  },
  {
    "text": "multiple times from my customers which is it's all software there is no infrastructure is software just like",
    "start": "830240",
    "end": "835680"
  },
  {
    "text": "application code is software and what that means means is you can organize it like software so you",
    "start": "835680",
    "end": "841759"
  },
  {
    "text": "don't have to create one stack for all your resources or you don't have to create individual stacks for each one of",
    "start": "841759",
    "end": "847480"
  },
  {
    "text": "your resource that you have in your AWS accounts uh you can actually organize them based on how well their life cycle",
    "start": "847480",
    "end": "855959"
  },
  {
    "text": "Alliance and um the common purpose that they work toward so for example if you have one",
    "start": "855959",
    "end": "863199"
  },
  {
    "text": "web application which has a common business problem that is solved all the resources for that web application can",
    "start": "863199",
    "end": "868399"
  },
  {
    "text": "be out of one stack if you have a VPC and a bunch of subnets which are shared",
    "start": "868399",
    "end": "874440"
  },
  {
    "text": "across a lot of different applications you probably don't want to bundle them with the applications you probably",
    "start": "874440",
    "end": "879720"
  },
  {
    "text": "create want to create a separate stack for them uh so this is what we typically see uh uh with some of our customers",
    "start": "879720",
    "end": "886600"
  },
  {
    "text": "which is you'll have a very basic identity layer with your IM users and policies then you have a networking",
    "start": "886600",
    "end": "893120"
  },
  {
    "text": "layer with the vpcs and subnets which are relatively stable um then there are some shared services and at the very top",
    "start": "893120",
    "end": "899199"
  },
  {
    "text": "there are web applications which come and go very frequently now another thing",
    "start": "899199",
    "end": "904240"
  },
  {
    "text": "to note is that if you are creating say a network component specifically for a given web application then obviously you",
    "start": "904240",
    "end": "911480"
  },
  {
    "text": "want to bundle it with the web application so let's say you're creating a security group for each of your web",
    "start": "911480",
    "end": "917360"
  },
  {
    "text": "application then you don't want that Security Group to be uh in the bottom layer in the bottom base networking",
    "start": "917360",
    "end": "922480"
  },
  {
    "text": "layer you want that Security Group to to be bundled with that application and once you have organized",
    "start": "922480",
    "end": "929240"
  },
  {
    "text": "templates uh in in this fashion or whichever other fashion that Su that suits your operations then you can",
    "start": "929240",
    "end": "936160"
  },
  {
    "text": "actually recreate these things in multiple environments like Dev or",
    "start": "936160",
    "end": "941240"
  },
  {
    "text": "staging or production or let's say you create new AWS accounts you can repeat these things in those accounts very",
    "start": "941240",
    "end": "947480"
  },
  {
    "text": "quickly um let's say or you expand into another AWS region you can use the same",
    "start": "947480",
    "end": "952959"
  },
  {
    "text": "set of templates and same organization to quickly recreate your entire um you",
    "start": "952959",
    "end": "958720"
  },
  {
    "text": "know entire set of applications in those accounts or regions um just to complete this analogy",
    "start": "958720",
    "end": "965560"
  },
  {
    "start": "963000",
    "end": "1011000"
  },
  {
    "text": "so if you think about application software uh you know somebody writes a source code you build it and you package",
    "start": "965560",
    "end": "971000"
  },
  {
    "text": "it uh and then there is typically a loader or interpreter which actually interprets that application code and",
    "start": "971000",
    "end": "977440"
  },
  {
    "text": "then ultimately you reach where you have a a that application in a desired State",
    "start": "977440",
    "end": "982759"
  },
  {
    "text": "uh in a in a server memory so infrastructure is no different uh when you're using cloud formation uh you have",
    "start": "982759",
    "end": "990720"
  },
  {
    "text": "uh Json templates or scripts which generate Json templates um you pack um",
    "start": "990720",
    "end": "996000"
  },
  {
    "text": "you know you package those templates and then you pass them on to cloud formation and cloud formation acts as a loader and",
    "start": "996000",
    "end": "1002880"
  },
  {
    "text": "interpreter of those templates and creates the desired state of the infrastructure for you in the",
    "start": "1002880",
    "end": "1010040"
  },
  {
    "start": "1011000",
    "end": "1097000"
  },
  {
    "text": "cloud um and obviously you're not going to once you set up your application you're not going to stop stop so we also",
    "start": "1011639",
    "end": "1017800"
  },
  {
    "text": "have support for for iterating on the infrastructure that you have provision um there are two main ways to iterate",
    "start": "1017800",
    "end": "1024918"
  },
  {
    "text": "there is what we call in place updates so you update your templates and then with an updated template you call update",
    "start": "1024919",
    "end": "1031640"
  },
  {
    "text": "stack on the same stack that is running uh or you can do blue green deployment",
    "start": "1031640",
    "end": "1037120"
  },
  {
    "text": "where you take the updated template and create a new stack from scratch without",
    "start": "1037120",
    "end": "1042160"
  },
  {
    "text": "touching your existing stack uh and then once the new stack comes up and is tested then you start moving traffic to",
    "start": "1042160",
    "end": "1048720"
  },
  {
    "text": "the new stack and there are pros and cons for each of these approaches uh the in place update is faster because",
    "start": "1048720",
    "end": "1054960"
  },
  {
    "text": "typically an incremental change on an existing stack is going to be faster than recreating a whole stack you're",
    "start": "1054960",
    "end": "1061720"
  },
  {
    "text": "going to spend less money because you're not duplicating the resources you already have um and most importantly I",
    "start": "1061720",
    "end": "1067400"
  },
  {
    "text": "think uh you don't have to worry about transferring the data and application state that you might have in a stack",
    "start": "1067400",
    "end": "1073520"
  },
  {
    "text": "because you're not really creating a completely new stack whereas if you create a new stack then you have to make make sure that your data from the old",
    "start": "1073520",
    "end": "1081200"
  },
  {
    "text": "stack is migrated over to the new stack on the other other hand there is a big advantage to blue green which is you are",
    "start": "1081200",
    "end": "1088200"
  },
  {
    "text": "never touching a running stack so if anything goes wrong at any point you can always fall back on the old",
    "start": "1088200",
    "end": "1096080"
  },
  {
    "start": "1097000",
    "end": "1382000"
  },
  {
    "text": "stack um and you don't have to be limited to the 20 or so services that",
    "start": "1097520",
    "end": "1103880"
  },
  {
    "text": "cloud function supports so we have an extensibility mechanism called custom resources in Cloud information which is",
    "start": "1103880",
    "end": "1109480"
  },
  {
    "text": "essentially a plugin system which lets you plugin your own logic as part of the",
    "start": "1109480",
    "end": "1115039"
  },
  {
    "text": "stack creation so I I'll I'll take a specific example so let's say you had that food catalog website which is a web",
    "start": "1115039",
    "end": "1121240"
  },
  {
    "text": "application um which is running in AWS using Lo lots of different types of AWS",
    "start": "1121240",
    "end": "1126440"
  },
  {
    "text": "resources and you want to use a thirdparty web analytics service to go with this application so when this stack",
    "start": "1126440",
    "end": "1133320"
  },
  {
    "text": "is provisioned you also want to provision a subscription in that analytics service for this web application",
    "start": "1133320",
    "end": "1139120"
  },
  {
    "text": "you can actually model that in a cloud formation template you uh in a cloud formation template you will write a",
    "start": "1139120",
    "end": "1145159"
  },
  {
    "text": "custom resource um and you will also specify a what we call service token",
    "start": "1145159",
    "end": "1150480"
  },
  {
    "text": "which is a identifier for that third party Service uh and then pass uh",
    "start": "1150480",
    "end": "1155799"
  },
  {
    "text": "information like you know what plan you have or what IP address the service should use and so on and so forth uh to",
    "start": "1155799",
    "end": "1162360"
  },
  {
    "text": "that service and when cloud formation interprets this uh it will go on provisioning all all the regular stuff",
    "start": "1162360",
    "end": "1169240"
  },
  {
    "text": "as it will uh in AWS and when it encounters a custom resource it will",
    "start": "1169240",
    "end": "1175679"
  },
  {
    "text": "actually call the thirdparty service and tell it to provision a web analytics subscription wait for success or failure",
    "start": "1175679",
    "end": "1182440"
  },
  {
    "text": "and bring it back to the stack so if it succeeds then that external resource essentially becomes a part of the stack",
    "start": "1182440",
    "end": "1188919"
  },
  {
    "text": "um and if it fails the stack is rolled back so it become even though you're using AWS and non AWS resources it",
    "start": "1188919",
    "end": "1195600"
  },
  {
    "text": "becomes a single unit of deployment and this custom resource mechanism can also",
    "start": "1195600",
    "end": "1200799"
  },
  {
    "text": "be used not only to well it can be used not only to uh provision third party",
    "start": "1200799",
    "end": "1206200"
  },
  {
    "text": "resources but also uh supplement the cloud formation provisioning with your own custom logic and it will be more",
    "start": "1206200",
    "end": "1212280"
  },
  {
    "text": "clear uh with this new feature uh that we launched so um before uh before",
    "start": "1212280",
    "end": "1217960"
  },
  {
    "text": "integrating Lambda to implement a custom resource either you or the third party would have to implement your own web",
    "start": "1217960",
    "end": "1224480"
  },
  {
    "text": "service to which can receive request from cloud information request like",
    "start": "1224480",
    "end": "1229640"
  },
  {
    "text": "create this resource update resource roll back resource and so on and so forth we launch uh Lambda integration",
    "start": "1229640",
    "end": "1236840"
  },
  {
    "text": "just yesterday which allows you to write Lambda function and be able to call that",
    "start": "1236840",
    "end": "1242720"
  },
  {
    "text": "function as a custom resource from a cloud formation stack so here is your cloud formation stack and uh you can",
    "start": "1242720",
    "end": "1249760"
  },
  {
    "text": "have a custom resource which represents represents your Lambda function in the stack and when a stack is created",
    "start": "1249760",
    "end": "1256000"
  },
  {
    "text": "updated or deleted we'll make a call to that Lambda function let it run the",
    "start": "1256000",
    "end": "1261559"
  },
  {
    "text": "logic that you have written and get back the output and this is useful for things like uh looking up an Ami ID so if",
    "start": "1261559",
    "end": "1268159"
  },
  {
    "text": "you're already using cloud formation and if you're using Windows you might be aware that the windows Ami IDs change",
    "start": "1268159",
    "end": "1274679"
  },
  {
    "text": "every month on AWS uh so one of the tasks that you need to do is update those windows Ami IDs and until now you",
    "start": "1274679",
    "end": "1281720"
  },
  {
    "text": "had to do that statically but now not anymore now you can write a Lambda function which automatically looks up the latest",
    "start": "1281720",
    "end": "1288640"
  },
  {
    "text": "Windows Amy IDs on Amazon and use them for any Windows stack that you're creating uh which is also true for a",
    "start": "1288640",
    "end": "1295559"
  },
  {
    "text": "custom Amy ID so let's say you have you're baking your own custom amies and tagging them with a particular version",
    "start": "1295559",
    "end": "1301840"
  },
  {
    "text": "number now you can write a Lambda function which looks up your custom army IDs for a based on a specific tag and",
    "start": "1301840",
    "end": "1309840"
  },
  {
    "text": "gets the right Army ID back uh so it makes it simpler to automate that process rather than you looking up the",
    "start": "1309840",
    "end": "1315600"
  },
  {
    "text": "right Army ID and passing it in to a cloud formation stack uh there are a lot",
    "start": "1315600",
    "end": "1321200"
  },
  {
    "text": "of our customers who do cross stack references that is they have separate stacks for separate purposes they have a",
    "start": "1321200",
    "end": "1327720"
  },
  {
    "text": "networking stack a database stack an application stack and they need to pass information from one stack to another",
    "start": "1327720",
    "end": "1333480"
  },
  {
    "text": "they want to refer to say a subnet or a security group um that is in a different stack from an application stack um until",
    "start": "1333480",
    "end": "1341559"
  },
  {
    "text": "now you had to look up the subnet ID or the security group ID and pass it in",
    "start": "1341559",
    "end": "1346640"
  },
  {
    "text": "manually as and uh to that application stack that is using the subnet now you",
    "start": "1346640",
    "end": "1352480"
  },
  {
    "text": "can write a Lambda function embed that in the application stack and it will look up the right subnet ID and Security",
    "start": "1352480",
    "end": "1358039"
  },
  {
    "text": "Group for you um and the list goes on I mean any any custom logic that you want",
    "start": "1358039",
    "end": "1363440"
  },
  {
    "text": "to implement if you want to you know if you have a smart espresso machine and want to order a coffee when a stack is",
    "start": "1363440",
    "end": "1369039"
  },
  {
    "text": "successfully created uh you can write a Lambda function for that and if somebody does write that Lambda function please",
    "start": "1369039",
    "end": "1375360"
  },
  {
    "text": "let us know and we'll be very happy to you know write a block post about it",
    "start": "1375360",
    "end": "1381840"
  },
  {
    "text": "um moving on to a a related topic um we we talked a lot about infrastructure",
    "start": "1381840",
    "end": "1387559"
  },
  {
    "text": "provisioning but it really goes hand inhand with application deployment if you want to automate infrastructure",
    "start": "1387559",
    "end": "1394000"
  },
  {
    "text": "provisioning it's only useful if you can also automate application deployment so",
    "start": "1394000",
    "end": "1399240"
  },
  {
    "text": "for a few few more slides I'm going to talk about infrastructure provisioning as code and application deployment as",
    "start": "1399240",
    "end": "1405320"
  },
  {
    "text": "code um infrastructure provisioning is obviously things like networking provisioning",
    "start": "1405320",
    "end": "1410720"
  },
  {
    "text": "provisioning cues uh kesis streams uh and so on and so forth and then application deployment is once you have",
    "start": "1410720",
    "end": "1418720"
  },
  {
    "text": "ec2 servers running you want to download packages boots un you know install them",
    "start": "1418720",
    "end": "1424760"
  },
  {
    "text": "at the right place bootstrap the application and so on and so forth and you can model all of this in a cloud",
    "start": "1424760",
    "end": "1430159"
  },
  {
    "text": "formation template uh and that we automated and there are multiple ways of describing",
    "start": "1430159",
    "end": "1437039"
  },
  {
    "text": "application deployment ment and making it happen in a in context of a cloud formation template and we'll dive deeper",
    "start": "1437039",
    "end": "1444600"
  },
  {
    "text": "into into those options so at the at the very basic level you obviously have the",
    "start": "1444600",
    "end": "1450400"
  },
  {
    "text": "Amazon machine machine images or armies that you can use uh you can use the Amazon provider armies or third party",
    "start": "1450400",
    "end": "1457039"
  },
  {
    "text": "armies or your own armies that you bake um then we have this flexible mechanism",
    "start": "1457039",
    "end": "1463279"
  },
  {
    "text": "called cloud formation in it which lets you describe the application conf configuration you want to have and then",
    "start": "1463279",
    "end": "1470159"
  },
  {
    "text": "cloud formation makes it happen for you uh cloud formation in it also serves",
    "start": "1470159",
    "end": "1476080"
  },
  {
    "text": "as an entry point for any other configuration tool that you might want to use uh so let's say you want to use",
    "start": "1476080",
    "end": "1481600"
  },
  {
    "text": "Chef or puppet or our own AWS code deploy uh you can use cloud formation in",
    "start": "1481600",
    "end": "1486840"
  },
  {
    "text": "it to install an agent that brings in those tools and then lastly you can also use",
    "start": "1486840",
    "end": "1493279"
  },
  {
    "text": "opsworks so opsworks is our application Management Service uh which you can use",
    "start": "1493279",
    "end": "1498840"
  },
  {
    "text": "in context of cloud formation and offs itself bring is provides its own Chef",
    "start": "1498840",
    "end": "1504600"
  },
  {
    "text": "recipes and also it lets you bring your own Chef recipes and we'll dive deep",
    "start": "1504600",
    "end": "1509880"
  },
  {
    "text": "into each of these sort of three options that you have um starting with cloud formation in",
    "start": "1509880",
    "end": "1515320"
  },
  {
    "text": "it uh it's it follows the same declarative model that the infrastructure part of cloud formation",
    "start": "1515320",
    "end": "1521200"
  },
  {
    "text": "follows so you don't have to specify the step-wise instructions the for uh for",
    "start": "1521200",
    "end": "1527240"
  },
  {
    "text": "downloading configuring and bootstrapping an application you just have to tell us that in a declarative",
    "start": "1527240",
    "end": "1532440"
  },
  {
    "text": "way so um things like list of packages that you want to install or the sources that you want to download and unzip uh",
    "start": "1532440",
    "end": "1539679"
  },
  {
    "text": "the commands that you want to run and so on and so forth just to give you an example of",
    "start": "1539679",
    "end": "1546480"
  },
  {
    "text": "what I mean by declarative so let's say you're downloading an application package from S3 bucket you don't have to",
    "start": "1546480",
    "end": "1552960"
  },
  {
    "text": "actually write the commands that downloads the package from S3 or if the request Chimes out then retries it and",
    "start": "1552960",
    "end": "1559120"
  },
  {
    "text": "so on and so forth we do that for you you just have to tell us the um the source from which to get the package and",
    "start": "1559120",
    "end": "1565679"
  },
  {
    "text": "the destination for the package on the web server that you're provisioning and it's it it's the same pattern for",
    "start": "1565679",
    "end": "1572279"
  },
  {
    "text": "anything else uh that cloud formation in it supports um it is debuggable uh in the",
    "start": "1572279",
    "end": "1578240"
  },
  {
    "start": "1575000",
    "end": "1595000"
  },
  {
    "text": "sense that it pro produces lots of logs and you don't even have to log on to the machines SSH into the machines to",
    "start": "1578240",
    "end": "1584880"
  },
  {
    "text": "actually see those logs you can see them in the console use using another of AWS service called cloudwatch logs we'll",
    "start": "1584880",
    "end": "1590640"
  },
  {
    "text": "look into slight more detail slightly more detail into that later um and you can also do updates so",
    "start": "1590640",
    "end": "1598279"
  },
  {
    "start": "1595000",
    "end": "1633000"
  },
  {
    "text": "typically we'll have customers who uh who update who have a stack running and",
    "start": "1598279",
    "end": "1603760"
  },
  {
    "text": "then may maybe they want to install an extra package or a new version of the package so what they would do what they",
    "start": "1603760",
    "end": "1609880"
  },
  {
    "text": "do is uh they update a template call update stack using the updated template",
    "start": "1609880",
    "end": "1614960"
  },
  {
    "text": "and then there is a cloud formation demon running on each of the we web servers called CFN Hub which detects",
    "start": "1614960",
    "end": "1621320"
  },
  {
    "text": "those changes and um and reconciles that web server with the new update so it",
    "start": "1621320",
    "end": "1626960"
  },
  {
    "text": "will incrementally uh bring that uh web server to the new",
    "start": "1626960",
    "end": "1633039"
  },
  {
    "text": "configuration and as I mentioned before cloud formation in it serves as an entry",
    "start": "1633720",
    "end": "1639000"
  },
  {
    "text": "point for any other configuration Tool uh so let's say you want to use Chef what you would do is you will have cloud",
    "start": "1639000",
    "end": "1645880"
  },
  {
    "text": "formation in it to install the Chef client and then you can bring in your existing Chef recipes uh for things like",
    "start": "1645880",
    "end": "1652799"
  },
  {
    "text": "installing uh WordPress onto the web server AWS code deploy follows the same",
    "start": "1652799",
    "end": "1658799"
  },
  {
    "text": "model so you can install the AWS code deploy agent using cloud formation in it",
    "start": "1658799",
    "end": "1664480"
  },
  {
    "text": "and then let AWS code deploy do the rest and this model works well when you",
    "start": "1664480",
    "end": "1671000"
  },
  {
    "text": "actually want to have a a very clear distinction between infrastructure provisioning and application deployment",
    "start": "1671000",
    "end": "1677320"
  },
  {
    "text": "so maybe you want to deploy infrastructure and not change it very often and then do dozens of application",
    "start": "1677320",
    "end": "1683519"
  },
  {
    "text": "deployments on the same infrastructure then you might want to consider this option where uh you use cloud formation",
    "start": "1683519",
    "end": "1689080"
  },
  {
    "text": "for infrastructure provisioning and then use some other Service uh with a nice console and everything to uh to do the",
    "start": "1689080",
    "end": "1695840"
  },
  {
    "text": "application deployment um needless to say we Pro uh",
    "start": "1695840",
    "end": "1701480"
  },
  {
    "start": "1698000",
    "end": "1721000"
  },
  {
    "text": "we support authentication mechanisms so you don't have to when you're installing your application packages onto Cloud",
    "start": "1701480",
    "end": "1708120"
  },
  {
    "text": "information stack you don't have to open it up to public you can keep them behind",
    "start": "1708120",
    "end": "1713440"
  },
  {
    "text": "your S3 credentials you can also use GitHub uh and download packages from GitHub directly onto Cloud information",
    "start": "1713440",
    "end": "1721360"
  },
  {
    "start": "1721000",
    "end": "1755000"
  },
  {
    "text": "Stacks um so when you're using AWS Cloud information in it um you actually",
    "start": "1721360",
    "end": "1727360"
  },
  {
    "text": "trigger that process through the user data script that you might be familiar with so when you provis when you boot up",
    "start": "1727360",
    "end": "1733559"
  },
  {
    "text": "an ec2 instance you get to run that user data script which is the initial script on anc2 instance uh so you uh you would",
    "start": "1733559",
    "end": "1742880"
  },
  {
    "text": "download the AWS cloud formation inate package trigger it let it do its job and then once it's done you can signal it",
    "start": "1742880",
    "end": "1749080"
  },
  {
    "text": "back uh uh to cloud formation so your user data script will look something like",
    "start": "1749080",
    "end": "1755480"
  },
  {
    "start": "1755000",
    "end": "1803000"
  },
  {
    "text": "that um you can also use cloudwatch logs for debugging weal we touched on this a",
    "start": "1755480",
    "end": "1760760"
  },
  {
    "text": "few slides ago and I wanted to uh go into specifics so if you want to pump",
    "start": "1760760",
    "end": "1766080"
  },
  {
    "text": "out the cloud form and it logs and send them out to cloudwatch and view them in",
    "start": "1766080",
    "end": "1772039"
  },
  {
    "text": "cloud in AWS console um then you have to do some slight configuration in your",
    "start": "1772039",
    "end": "1777799"
  },
  {
    "text": "template so when you are uh along with your own packages and services uh you have to drop the uh cloudwatch logs",
    "start": "1777799",
    "end": "1785360"
  },
  {
    "text": "configuration file onto um onto your instances that you're provisioning and",
    "start": "1785360",
    "end": "1790840"
  },
  {
    "text": "then it will start streaming your CFN init logs onto cloudwatch and the good thing about that is you don't you don't",
    "start": "1790840",
    "end": "1797360"
  },
  {
    "text": "ever have to log on or SSH into your instances you can see those in the",
    "start": "1797360",
    "end": "1802720"
  },
  {
    "start": "1803000",
    "end": "1935000"
  },
  {
    "text": "console now moving on to the second approach which is baking armies and using armies to boot applications in",
    "start": "1803120",
    "end": "1810159"
  },
  {
    "text": "your Cloud information Stacks U clearly there is cloud formation in it provides a lot of flexibility and uh visibility",
    "start": "1810159",
    "end": "1818720"
  },
  {
    "text": "into uh what what goes into your application deployment so long after you have deployed your application and",
    "start": "1818720",
    "end": "1824279"
  },
  {
    "text": "application is running you can go back to your cloud formation in configuration and see what you install and have a",
    "start": "1824279",
    "end": "1831559"
  },
  {
    "text": "fairly good idea about what's running in a stack um compare that with army army",
    "start": "1831559",
    "end": "1837000"
  },
  {
    "text": "is is a black box so once you bake an army it's very hard to recall what actually is running in that Army but on",
    "start": "1837000",
    "end": "1844559"
  },
  {
    "text": "the other hand it also has a Advantage which is uh whenever you bake an army it's set in stone so if you want to have",
    "start": "1844559",
    "end": "1851039"
  },
  {
    "text": "that assurance that once I bake an army nobody's going to touch it and I know exactly what it is uh then Army uh could",
    "start": "1851039",
    "end": "1857559"
  },
  {
    "text": "be a good option and also Ami is the is the fastest way to boot an instance when",
    "start": "1857559",
    "end": "1864159"
  },
  {
    "text": "you are using CFN inet cloud formation inet or Chef or any other configuration",
    "start": "1864159",
    "end": "1869480"
  },
  {
    "text": "it is actually going to do that configuration after the instance boots so basically it is downloading all the",
    "start": "1869480",
    "end": "1875559"
  },
  {
    "text": "packages and all the configuration scripts and then running them uh after the instance boots uh when you're using",
    "start": "1875559",
    "end": "1882799"
  },
  {
    "text": "Amazon machine images or armies it's all big 10 so the boot time is",
    "start": "1882799",
    "end": "1887840"
  },
  {
    "text": "uh de short so we see this pattern among a lot of our customers where uh during",
    "start": "1887840",
    "end": "1893320"
  },
  {
    "text": "the development and testing phase they want that flexibility for configuring applications so they use cloud formation",
    "start": "1893320",
    "end": "1899960"
  },
  {
    "text": "in it or user data scripts or Chef uh once they have reached a a release",
    "start": "1899960",
    "end": "1905480"
  },
  {
    "text": "candidate then they bake an army out of that and then when they want to scale",
    "start": "1905480",
    "end": "1910919"
  },
  {
    "text": "really scale to a really large number of instances and really quickly then they use that baked Army",
    "start": "1910919",
    "end": "1917960"
  },
  {
    "text": "the important thing to note is that even if you are Bing armies uh make sure that you keep a track of U the cloud",
    "start": "1917960",
    "end": "1924679"
  },
  {
    "text": "information init script that went into that Army because otherwise once an army is baked you will have no way to know",
    "start": "1924679",
    "end": "1931240"
  },
  {
    "text": "you know what you have configured in that Army um now the third approach for",
    "start": "1931240",
    "end": "1938159"
  },
  {
    "start": "1935000",
    "end": "2097000"
  },
  {
    "text": "application deployment with cloud formation is using cloud formation and Ops works together uh we looked at the",
    "start": "1938159",
    "end": "1944559"
  },
  {
    "text": "infrastructure provisioning and application deployment and you know you might ask I can do everything through",
    "start": "1944559",
    "end": "1950279"
  },
  {
    "text": "cloud formation template or even a shell script then why should I use opsworks and um the answer to that is this there",
    "start": "1950279",
    "end": "1956760"
  },
  {
    "text": "are two main benefits to using opsworks one it provides a well-defined",
    "start": "1956760",
    "end": "1962480"
  },
  {
    "text": "application life cycle um so we looked at Cloud information in it a few slides ago and you know it provides you a lot",
    "start": "1962480",
    "end": "1968919"
  },
  {
    "text": "of flexibility and it lets you define your own life cycle so you you can say this is the point where the application",
    "start": "1968919",
    "end": "1975559"
  },
  {
    "text": "is installed this is the point where the application is rebooted and so on and so forth but you have to define the",
    "start": "1975559",
    "end": "1980679"
  },
  {
    "text": "application life cycle uh but if you are looking for a well-defined application life cycle opsworks provides it for you",
    "start": "1980679",
    "end": "1987880"
  },
  {
    "text": "and then um so opsworks already has entry points uh like uh when the",
    "start": "1987880",
    "end": "1994440"
  },
  {
    "text": "application is initialized or rebooted uh shut down and so on and so forth and then you can just hook in your own Chef",
    "start": "1994440",
    "end": "2001320"
  },
  {
    "text": "scripts or or any other configuration scripts at those well defined points so that's one advantage and then the second",
    "start": "2001320",
    "end": "2007720"
  },
  {
    "text": "Advantage is uh it provides an interactive console to then adjust the",
    "start": "2007720",
    "end": "2013679"
  },
  {
    "text": "application uh profile so if you want to scale up once the application is running",
    "start": "2013679",
    "end": "2019240"
  },
  {
    "text": "in an interactive way you can go to opsource console look at the metric and then scale it scale it up or scale it down uh so that's the that's the benefit",
    "start": "2019240",
    "end": "2026600"
  },
  {
    "text": "that opsource provides uh so we have customers who use uh some of our customers use do everything purely",
    "start": "2026600",
    "end": "2033279"
  },
  {
    "text": "through cloud formation in it and cloud formation and then there are some others who decide that they want to do purely",
    "start": "2033279",
    "end": "2039440"
  },
  {
    "text": "infrastructure through cloud formation and then when it comes to managing ec2 and application on ec2 they use",
    "start": "2039440",
    "end": "2047359"
  },
  {
    "text": "opsworks um so there is a there is a convenience versus control trade-off that they have to make because uh so you",
    "start": "2047359",
    "end": "2053599"
  },
  {
    "text": "if you're getting the well defined life cycle then obviously you won't have any",
    "start": "2053599",
    "end": "2058679"
  },
  {
    "text": "way to arbitrarily Define the the application life cycle that you can in cloud formation in it um so this is the",
    "start": "2058679",
    "end": "2066599"
  },
  {
    "text": "model that uh you know what we are call what we call cloud formation and offs side by side and you can actually",
    "start": "2066599",
    "end": "2073679"
  },
  {
    "text": "automate all of this so you can also model your opsworks configuration inside a cloud formation",
    "start": "2073679",
    "end": "2079720"
  },
  {
    "text": "template um so even if you are using if even if",
    "start": "2079720",
    "end": "2085720"
  },
  {
    "text": "you are in a fully automated way and you still want to use opsworks you can uh use opsworks along with other resources",
    "start": "2085720",
    "end": "2091760"
  },
  {
    "text": "in a cloud formation template so this is opss inside cloud formation",
    "start": "2091760",
    "end": "2097800"
  },
  {
    "start": "2097000",
    "end": "2203000"
  },
  {
    "text": "um and then moving on to other tools of the trade uh we also see customers",
    "start": "2097800",
    "end": "2104560"
  },
  {
    "text": "integrate cloud formation with their cicd pipelines uh things like genkins and bamboo um and pretty soon they will",
    "start": "2104560",
    "end": "2112079"
  },
  {
    "text": "also integrate with uh our own cicd system code Pipeline and code commit uh",
    "start": "2112079",
    "end": "2118119"
  },
  {
    "text": "but this is the general pattern that we see uh typically they have a set of infrastructure developers who focus on",
    "start": "2118119",
    "end": "2124920"
  },
  {
    "text": "the common artifacts like Network or databases And Then There are a set of app developers who focus on one business",
    "start": "2124920",
    "end": "2131280"
  },
  {
    "text": "problem typically an application um all of them use a common tool chain um to",
    "start": "2131280",
    "end": "2136680"
  },
  {
    "text": "store the application code and the infrastructure templates the templates written by the",
    "start": "2136680",
    "end": "2143000"
  },
  {
    "text": "devops team or the infrastructure team are typically broad uh things like IM policies uh network configuration and",
    "start": "2143000",
    "end": "2150599"
  },
  {
    "text": "then if the application developers want any application specific infrastructure",
    "start": "2150599",
    "end": "2156040"
  },
  {
    "text": "like let's say you have have application which needs a Dynamo DB table or an elastic cash cluster then those",
    "start": "2156040",
    "end": "2161760"
  },
  {
    "text": "templates are better off uh being owned by the application team so they also have their own templates um and then",
    "start": "2161760",
    "end": "2168680"
  },
  {
    "text": "they go through the code reviews uh continuous integration systems uh unit test um and when they have all the",
    "start": "2168680",
    "end": "2176359"
  },
  {
    "text": "artifacts the app packages the cloud information templates ready then they call cloud formation apis to provision",
    "start": "2176359",
    "end": "2183560"
  },
  {
    "text": "the stacks and deploy the application bits in any of their environments in any",
    "start": "2183560",
    "end": "2188960"
  },
  {
    "text": "accounts or",
    "start": "2188960",
    "end": "2191440"
  },
  {
    "text": "regions I'm seeing a few pictures being taken so I'm just taking a pause for",
    "start": "2196800",
    "end": "2203280"
  },
  {
    "start": "2203000",
    "end": "2272000"
  },
  {
    "text": "that um and then if you are new to cloud formation if you're already using AWS",
    "start": "2203480",
    "end": "2209440"
  },
  {
    "text": "through the console or let's say through CLI you don't have to start with a blank slate you can start temp templa izing um",
    "start": "2209440",
    "end": "2218319"
  },
  {
    "text": "your existing resources and convert them their configuration into infrastructure as code and the primary tool to do that",
    "start": "2218319",
    "end": "2225440"
  },
  {
    "text": "is what we call cloudformer um it's a it's a it's a beta",
    "start": "2225440",
    "end": "2230680"
  },
  {
    "text": "tool that um we publish and you can stand it up as a web application in your",
    "start": "2230680",
    "end": "2237319"
  },
  {
    "text": "account and it will walk you through your existing resources you can select the resources that you want to templae",
    "start": "2237319",
    "end": "2244400"
  },
  {
    "text": "and it will output a base temp template uh you will have to do some postprocessing things like uh you know",
    "start": "2244400",
    "end": "2250839"
  },
  {
    "text": "it will output an E2 instance with an actual Amy ID that it was created from but you obviously want to parameterize",
    "start": "2250839",
    "end": "2256720"
  },
  {
    "text": "that uh so you have to do some post processing on that and then you are good to go and then once you have that post",
    "start": "2256720",
    "end": "2262640"
  },
  {
    "text": "process template then you can actually replicate that existing architecture in",
    "start": "2262640",
    "end": "2267680"
  },
  {
    "text": "any account or any region um and before ending this session",
    "start": "2267680",
    "end": "2274920"
  },
  {
    "start": "2272000",
    "end": "2442000"
  },
  {
    "text": "I just want to reflect on and share uh the type of customers that we see using infrastructure as code and cloud",
    "start": "2274920",
    "end": "2281079"
  },
  {
    "text": "formation on AWS uh so we broadly see three different types of customers uh",
    "start": "2281079",
    "end": "2286480"
  },
  {
    "text": "there are obviously a lot of development teams and devop teams who are very comfortable writing code uh so they will",
    "start": "2286480",
    "end": "2293160"
  },
  {
    "text": "you know they they write Json templates they treat them as just like any other software uh we saw a lot of that in the",
    "start": "2293160",
    "end": "2299880"
  },
  {
    "text": "previous slides but it's also important important to note that even in traditional organizations where they",
    "start": "2299880",
    "end": "2305520"
  },
  {
    "text": "have it admins or um you know manage service providers uh they value",
    "start": "2305520",
    "end": "2311319"
  },
  {
    "text": "templatized configuration simply because it allows them a mechanism to enforce standard",
    "start": "2311319",
    "end": "2316960"
  },
  {
    "text": "practices so let's say you are a company of 5,000 people and you want to have a standard set of Security Group rules",
    "start": "2316960",
    "end": "2323720"
  },
  {
    "text": "that you want everyone to use you can write a template which is very visible",
    "start": "2323720",
    "end": "2328800"
  },
  {
    "text": "you know exactly what rules are being followed and then you can have people in your company use that template to set up",
    "start": "2328800",
    "end": "2335000"
  },
  {
    "text": "their security groups uh no matter what application they are running so we see that standardization a lot uh it also",
    "start": "2335000",
    "end": "2342480"
  },
  {
    "text": "offers role specialization so we have customers where you have networking experts you have database admins and so",
    "start": "2342480",
    "end": "2348359"
  },
  {
    "text": "on and so forth so you can um have them write cloud formation templates for",
    "start": "2348359",
    "end": "2353599"
  },
  {
    "text": "their own area of expertise and then the consumers of that those templates can actually combine those templates uh and",
    "start": "2353599",
    "end": "2360760"
  },
  {
    "text": "use them in uh in a in a tree of templates fashion and then obviously there are isv",
    "start": "2360760",
    "end": "2366960"
  },
  {
    "text": "so if you are an independent software vendor there are broadly two types um you know if you're running a SAS service",
    "start": "2366960",
    "end": "2373240"
  },
  {
    "text": "chances are as the customers on board to your service you want to scale out uh so",
    "start": "2373240",
    "end": "2378359"
  },
  {
    "text": "you want to potentially you want to create um a a replica of the your entire",
    "start": "2378359",
    "end": "2383920"
  },
  {
    "text": "application stack for each of your customers uh in that case you can use the same template to scale out to create",
    "start": "2383920",
    "end": "2392000"
  },
  {
    "text": "more stacks and scale out as you bring in customers onto your SAS platform uh and even if you are a traditional isv",
    "start": "2392000",
    "end": "2398280"
  },
  {
    "text": "where you need to install application in your customers AWS account uh we see uh",
    "start": "2398280",
    "end": "2405160"
  },
  {
    "text": "sharing cloud formation templates uh either on AWS Marketplace or via any",
    "start": "2405160",
    "end": "2410480"
  },
  {
    "text": "other mechanism serves as a good packaging and deployment mechanism uh to to transfer that those bits between you",
    "start": "2410480",
    "end": "2417240"
  },
  {
    "text": "and your customer um so that's all I had for this session um we have I think we have we",
    "start": "2417240",
    "end": "2423520"
  },
  {
    "text": "should have plenty of time for questions and answers and uh I'll be happy to take your questions and I also have my",
    "start": "2423520",
    "end": "2428599"
  },
  {
    "text": "colleague Chris whiter uh so you can ask questions to any of us and that way we can get uh",
    "start": "2428599",
    "end": "2435079"
  },
  {
    "text": "more questions and answers done thank",
    "start": "2435079",
    "end": "2440559"
  },
  {
    "text": "you",
    "start": "2441079",
    "end": "2444079"
  }
]