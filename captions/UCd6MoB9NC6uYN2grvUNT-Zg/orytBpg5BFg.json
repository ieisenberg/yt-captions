[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "all right good morning everyone How are we doing hello My name is Tom Meyers I'm one of",
    "start": "2720",
    "end": "9599"
  },
  {
    "text": "the senior architects for Accentur's cloud platform And I'm going to talk about what um ACP our Accenture cloud",
    "start": "9599",
    "end": "15839"
  },
  {
    "text": "platform does with serverless Um some of the things that we've learned internally building that And with me is Matt",
    "start": "15839",
    "end": "22039"
  },
  {
    "text": "Lancaster Matt is Accentra's global lead for lightweight architectures Um and what that means is Matt takes things",
    "start": "22039",
    "end": "28160"
  },
  {
    "text": "that we've tried out internally in places like ACP um and he takes those lessons out to our clients um so they",
    "start": "28160",
    "end": "34960"
  },
  {
    "text": "don't have to feel the same pain we did um as we were building stuff out So I'm going to start um talk a little bit",
    "start": "34960",
    "end": "41280"
  },
  {
    "text": "about that then I'll hand things over to Matt and Matt will tell you some uh nice stories about some things we've done at",
    "start": "41280",
    "end": "46320"
  },
  {
    "text": "our clients Um I've got a lot of charts and a lot of pictures Um and they gave me a laser pointer that is this big So",
    "start": "46320",
    "end": "54160"
  },
  {
    "text": "um you may or may not uh see what I'm talking about but um one of the benefits is that there are mics at both sides and",
    "start": "54160",
    "end": "60800"
  },
  {
    "text": "we're going to try desperately hard to leave about 10 minutes at the end for questions Um so keep that in mind if uh",
    "start": "60800",
    "end": "66400"
  },
  {
    "text": "we say anything well I won't but if he says anything particularly controversial All right So um I call it the we call it",
    "start": "66400",
    "end": "74240"
  },
  {
    "text": "the Accenture cloud platform Um and what we did is we've had this thing for a",
    "start": "74240",
    "end": "79360"
  },
  {
    "text": "number of years now but we decided what we needed to do is really focus on making it into a true platform Um the",
    "start": "79360",
    "end": "85759"
  },
  {
    "text": "quote up on the screen is from a book by a guy named Emirit Tala Um and it's called server uh it's called platform",
    "start": "85759",
    "end": "91680"
  },
  {
    "text": "ecosystems and it's really all about the things that you need to know principally for what your platform should do And so",
    "start": "91680",
    "end": "98960"
  },
  {
    "text": "we started this initiative and it's called platforms s internally So platform for serverless or any number of",
    "start": "98960",
    "end": "104880"
  },
  {
    "text": "other ways you can interpret that Um and so the key definition that we took from that is that we're really bringing two",
    "start": "104880",
    "end": "111119"
  },
  {
    "text": "different groups together um and enabling them So what the Accenture",
    "start": "111119",
    "end": "116240"
  },
  {
    "start": "114000",
    "end": "180000"
  },
  {
    "text": "cloud platform is what it does is it's an we like to call it an on-ramp to the cloud right we have large enterprise",
    "start": "116240",
    "end": "122000"
  },
  {
    "text": "clients who are looking for a way to get into the cloud and they're looking for somebody who's been there before and",
    "start": "122000",
    "end": "127680"
  },
  {
    "text": "done it and has you know some things in place Enterprises need things that not everyone needs They need governance They",
    "start": "127680",
    "end": "134400"
  },
  {
    "text": "need analytics They need transparent billing And so the ACP platform puts that stuff out there And then we enable",
    "start": "134400",
    "end": "141120"
  },
  {
    "text": "our development teams people like Matts Groups and others to go and and use those services that we've already built",
    "start": "141120",
    "end": "147120"
  },
  {
    "text": "use the APIs that we build um to make their offerings and then we provide a way for them to offer those to our",
    "start": "147120",
    "end": "153840"
  },
  {
    "text": "clients so they can consume them relatively quickly Um we started in a data center just like most on-prem stuff",
    "start": "153840",
    "end": "160879"
  },
  {
    "text": "did uh hosted data center and then we evolved that into Amazon Web Services using some virtual private clouds and",
    "start": "160879",
    "end": "167519"
  },
  {
    "text": "and VMs Um and now what we've done is we've taken some of the principles of serverless design which we're going to",
    "start": "167519",
    "end": "173519"
  },
  {
    "text": "talk through how we did it and what we did Uh and we use those uh now to step",
    "start": "173519",
    "end": "178640"
  },
  {
    "text": "it to the next generation So the way that it uh works the way the",
    "start": "178640",
    "end": "184239"
  },
  {
    "start": "180000",
    "end": "208000"
  },
  {
    "text": "ecosystem works like I said Mat's group is on the left and our large clients are on the right Here I'll use my cool",
    "start": "184239",
    "end": "189840"
  },
  {
    "text": "pointer You can't see it Oh yeah I can't see anything Um and then in the center is ACP in that in that cool circle",
    "start": "189840",
    "end": "195920"
  },
  {
    "text": "diagram I'll show that in a second Um so that we build APIs in the middle in the",
    "start": "195920",
    "end": "201120"
  },
  {
    "text": "very center of what we do and then we allow the developers to use those APIs to then make the offerings that we need",
    "start": "201120",
    "end": "206959"
  },
  {
    "text": "to offer Um so why are we doing serverless well as I said ACP is a big",
    "start": "206959",
    "end": "212720"
  },
  {
    "start": "208000",
    "end": "240000"
  },
  {
    "text": "collection of services a big collection of APIs a big collection of things that people are using to enable other",
    "start": "212720",
    "end": "218720"
  },
  {
    "text": "activities Um anybody who's been studying this for a long time and as Accenture has you know that a a",
    "start": "218720",
    "end": "225360"
  },
  {
    "text": "microservices architecture is really the right way to do those kinds of small services that are working together And",
    "start": "225360",
    "end": "230799"
  },
  {
    "text": "if you look at the serverless platform the serverless design the serverless systems that are out there that's that's",
    "start": "230799",
    "end": "236000"
  },
  {
    "text": "purpose-built for offering things like a microservices architecture So why are we using AWS",
    "start": "236000",
    "end": "243200"
  },
  {
    "start": "240000",
    "end": "298000"
  },
  {
    "text": "well first of all all of our stuff's in AWS So that was very handy for us Um but",
    "start": "243200",
    "end": "248480"
  },
  {
    "text": "more importantly AWS's serverless stuff is far way ahead of everybody else's serverless stuff That's why we were",
    "start": "248480",
    "end": "254799"
  },
  {
    "text": "starting a year ago to do all of this because it was there It was largely ready things like Lambda were already",
    "start": "254799",
    "end": "260160"
  },
  {
    "text": "ready Things like API gateway were already there Um secondly there's a lot",
    "start": "260160",
    "end": "265680"
  },
  {
    "text": "of uh open- source and and tooling and and other things out there to help you",
    "start": "265680",
    "end": "271759"
  },
  {
    "text": "get into serverless So you can you don't have to make this stuff up or build it yourselves There's a lot of of of",
    "start": "271759",
    "end": "277600"
  },
  {
    "text": "footholds out there Um and then thirdly we have a partnership with AWS We have",
    "start": "277600",
    "end": "282639"
  },
  {
    "text": "the Accenture AWS business group We announced that a year ago here at AWS Um",
    "start": "282639",
    "end": "287840"
  },
  {
    "text": "it's been it's a year old It's phenomenally successful bringing um the power of AWS to large enterprise clients",
    "start": "287840",
    "end": "294639"
  },
  {
    "text": "Um so like I said everything AWS makes good sense for us So when we talk about",
    "start": "294639",
    "end": "300240"
  },
  {
    "start": "298000",
    "end": "427000"
  },
  {
    "text": "our serverless design I'm going to talk through the components of it in a few minutes um we needed to have a way that",
    "start": "300240",
    "end": "305520"
  },
  {
    "text": "we could build this in this new platform s um that allowed people to start taking advantage of the services that we were",
    "start": "305520",
    "end": "312160"
  },
  {
    "text": "building but still allowed us to innovate and and make new changes without disrupting what they had already",
    "start": "312160",
    "end": "318479"
  },
  {
    "text": "built on top of our systems So we came up with this ring model and in many ways",
    "start": "318479",
    "end": "323600"
  },
  {
    "text": "it's like an operating system works um on a on any kind of a system that at the very core center of it are the",
    "start": "323600",
    "end": "330320"
  },
  {
    "text": "fundamental things that are that we're worried about the things that are going on all the time So in our case that's",
    "start": "330320",
    "end": "335600"
  },
  {
    "text": "where we're building APIs That's where we're building core things like discovery of of resources that are out",
    "start": "335600",
    "end": "341199"
  },
  {
    "text": "there Um a billing engine and things like that are in the very center By putting those uh in an isolated place",
    "start": "341199",
    "end": "347520"
  },
  {
    "text": "using APIs that have versioning um an API contract that we make with our clients we're able to use a continuous",
    "start": "347520",
    "end": "354240"
  },
  {
    "text": "delivery model to push out into that environment So so long as we don't disrupt what the agreement is we can",
    "start": "354240",
    "end": "360320"
  },
  {
    "text": "just continue to add new features We can make bug fixes And so you end up with a pretty high quality API because it's",
    "start": "360320",
    "end": "366479"
  },
  {
    "text": "constantly being fixed constantly being deployed to In the ring around that we call that ring one That's where the",
    "start": "366479",
    "end": "372960"
  },
  {
    "text": "applications themselves live that that we build the stuff that we care about things like our UI things like our",
    "start": "372960",
    "end": "379280"
  },
  {
    "text": "analytics tools things like our billing services those live in that first ring because they're very very dependent on",
    "start": "379280",
    "end": "386000"
  },
  {
    "text": "the services underneath them in that core ring And uh in that ring we use an agile deployment mechanism because we",
    "start": "386000",
    "end": "392560"
  },
  {
    "text": "can quickly do twoe releases into that environment Um but you don't want to it doesn't have to be continuous delivery",
    "start": "392560",
    "end": "398560"
  },
  {
    "text": "And so we're able to take the time to push that through more traditional channel And then in ring two which is",
    "start": "398560",
    "end": "404319"
  },
  {
    "text": "the outside ring that's where people like Matt's groups come in and they develop client solutions They can",
    "start": "404319",
    "end": "409759"
  },
  {
    "text": "leverage anything in ring one or ring two or ring zero underneath that Um and they can use any kind of delivery",
    "start": "409759",
    "end": "415199"
  },
  {
    "text": "mechanism they want to because there are no dependencies on what they're building other than the dependencies that they",
    "start": "415199",
    "end": "421039"
  },
  {
    "text": "create for themselves So with that ring model everything depending on the one inside that gives us the opportunity to",
    "start": "421039",
    "end": "428240"
  },
  {
    "start": "427000",
    "end": "449000"
  },
  {
    "text": "start building systems that look kind of like this So you're going to really be able to see my phenomenal PowerPoint",
    "start": "428240",
    "end": "434720"
  },
  {
    "text": "skills when I do the animations that go along with these slides Um but essentially I'm going to take you left",
    "start": "434720",
    "end": "440000"
  },
  {
    "text": "to right through um our serverless architecture This is an example and then I'll do a couple of specific ones",
    "start": "440000",
    "end": "446400"
  },
  {
    "text": "towards the end But basically everything begins See how cool that was basically",
    "start": "446400",
    "end": "452000"
  },
  {
    "text": "everything begins when uh somebody clicks on a mouse and and tries to do something or or makes an API call to do",
    "start": "452000",
    "end": "457840"
  },
  {
    "text": "something Now we're Accenture and so we want all our stuff to end in accenture.com and Accenture has a very",
    "start": "457840",
    "end": "465199"
  },
  {
    "text": "tight IT department that isn't going to let me just start making up Accenture.com domain names So we all",
    "start": "465199",
    "end": "470560"
  },
  {
    "text": "have to go through central IT And so of course Accenture's internal CIO or internal IT group owns all of that and",
    "start": "470560",
    "end": "477440"
  },
  {
    "text": "then they give us CNAMES out to the things that we request and those CNAMES push out to our route 53 implementation",
    "start": "477440",
    "end": "484639"
  },
  {
    "text": "and it's at that point that we gain complete control So we can do anything we want We can point it to any endpoint",
    "start": "484639",
    "end": "490160"
  },
  {
    "text": "we want and if we need to change it from pointing to Lambda to API gateway to",
    "start": "490160",
    "end": "495280"
  },
  {
    "text": "whatever we want to point it to we make those changes and and no one needs to know and so long as those changes are",
    "start": "495280",
    "end": "501360"
  },
  {
    "text": "are coded and and done in a scripted manner everything uh works out perfectly",
    "start": "501360",
    "end": "506560"
  },
  {
    "text": "he said So uh the next step is where those endpoints are And by and large",
    "start": "506560",
    "end": "512719"
  },
  {
    "start": "507000",
    "end": "597000"
  },
  {
    "text": "they're all landing on a um on a CloudFront distribution In the case of",
    "start": "512719",
    "end": "518399"
  },
  {
    "text": "our um artifacts and our our our UI those are in a an Amazon S3 website",
    "start": "518399",
    "end": "524240"
  },
  {
    "text": "bucket We have like single page web applications out there um using uh using",
    "start": "524240",
    "end": "530720"
  },
  {
    "text": "different languages to make Ajax calls over to our APIs Um we use an API gateway with a custom domain name and",
    "start": "530720",
    "end": "537600"
  },
  {
    "text": "that gets you a cont uh that gets you a CloudFront distribution for free Um the beautiful thing about using custom",
    "start": "537600",
    "end": "543279"
  },
  {
    "text": "domains is that you can create as many different API gateways as you want to",
    "start": "543279",
    "end": "548560"
  },
  {
    "text": "You can have different people design and develop them and then you just string them together under your custom domain",
    "start": "548560",
    "end": "553920"
  },
  {
    "text": "name and they just become paths of the same API domain and that API domain travels all the way back out to the",
    "start": "553920",
    "end": "560560"
  },
  {
    "text": "security certificates that we've put in place from Accentra's home office And so it all works nicely together and those",
    "start": "560560",
    "end": "567519"
  },
  {
    "text": "APIs can be redeveloped changed um upgraded and whatever without having to make any changes to any of that overall",
    "start": "567519",
    "end": "574640"
  },
  {
    "text": "security that's out there But of course it's CloudFront so you get a huge content delivery system out of it as",
    "start": "574640",
    "end": "580720"
  },
  {
    "text": "well Um and that gets you a number of things that you need It gets you uh endpoint caching It gets you lower",
    "start": "580720",
    "end": "586560"
  },
  {
    "text": "latency around the world by using um you know regional distribution points So you",
    "start": "586560",
    "end": "591760"
  },
  {
    "text": "you get a bunch of things for free just by using a reasonably intelligent design technique So then when we implement",
    "start": "591760",
    "end": "599360"
  },
  {
    "start": "597000",
    "end": "642000"
  },
  {
    "text": "those APIs everything starts at the API gateway and then it goes into Lambda Um",
    "start": "599360",
    "end": "604640"
  },
  {
    "text": "not everything goes into Lambda but Lambda is where our business logic is And so we use uh we use Lambdas to",
    "start": "604640",
    "end": "610560"
  },
  {
    "text": "implement the various things that need to be calculated or need to be moved around And then we do interprocess",
    "start": "610560",
    "end": "616399"
  },
  {
    "text": "communication between those lambdas using Reddisk for caching or we use SNS",
    "start": "616399",
    "end": "621600"
  },
  {
    "text": "for messaging back and forth Um and then we use a lot of Kinesis streams Um Kinesis is fabulous for enabling us to",
    "start": "621600",
    "end": "628959"
  },
  {
    "text": "shove data into a into a stream and then have multiple API or multiple lambdas",
    "start": "628959",
    "end": "634320"
  },
  {
    "text": "down the road reading those and processing those and doing whatever they need to do Um and I'll show some more",
    "start": "634320",
    "end": "639680"
  },
  {
    "text": "details on a couple of examples of that in a minute So um for persistent storage oh did I",
    "start": "639680",
    "end": "646000"
  },
  {
    "start": "642000",
    "end": "666000"
  },
  {
    "text": "did I skip this one no here we go For persistent storage um we use Redrift we use Elastic Search um and we use Dynamo",
    "start": "646000",
    "end": "652720"
  },
  {
    "text": "DB So once you've queued up all your messages and they've gone for processing eventually you want to store some data",
    "start": "652720",
    "end": "658480"
  },
  {
    "text": "somewhere Um we find that Elastic Search really worked well for us I'll get some reasons on another slide that I'll show",
    "start": "658480",
    "end": "664079"
  },
  {
    "text": "you in a second but again these are all services They're really easy to use Um and so you end up being able to put",
    "start": "664079",
    "end": "670160"
  },
  {
    "start": "666000",
    "end": "701000"
  },
  {
    "text": "together end to end all of this There's no servers in any of this anywhere We're not paying for servers or maintaining",
    "start": "670160",
    "end": "675279"
  },
  {
    "text": "anything This stuff stands up and tears down Uh our continuous delivery mechanisms can you know deploy 10 or 20",
    "start": "675279",
    "end": "682640"
  },
  {
    "text": "times a day You can do more than that but you generally speaking our developers don't code that fast to be honest Um so then we also have Cloudatch",
    "start": "682640",
    "end": "689920"
  },
  {
    "text": "at the bottom That's the cool green thing Um and that's really what's enabling our operational components",
    "start": "689920",
    "end": "695360"
  },
  {
    "text": "because with Cloudatch we get all the logging and we get all a number of alerts and things that come from there",
    "start": "695360",
    "end": "702040"
  },
  {
    "start": "701000",
    "end": "761000"
  },
  {
    "text": "So all the components we're using there in the list on the left I talked about most of those Um we have separate",
    "start": "702040",
    "end": "708680"
  },
  {
    "text": "accounts for each of the different rings and each of the different application life cycle stages that those rings use",
    "start": "708680",
    "end": "716240"
  },
  {
    "text": "This enables us in a couple of ways It gives us a simplified security mechanism",
    "start": "716240",
    "end": "721600"
  },
  {
    "text": "because we can define the security in an account without having to think about how I separate my production section of",
    "start": "721600",
    "end": "728720"
  },
  {
    "text": "my one account from my development section of my one account They're simply different accounts And so if you haven't",
    "start": "728720",
    "end": "734399"
  },
  {
    "text": "enabled communication between the accounts then there is no communication between the accounts That's actually a",
    "start": "734399",
    "end": "739839"
  },
  {
    "text": "pretty nice security model if you think about it So we have about uh 10 or 12 different accounts that we're using",
    "start": "739839",
    "end": "746160"
  },
  {
    "text": "right now um to enable both that core area and then that first ring around it",
    "start": "746160",
    "end": "751440"
  },
  {
    "text": "And then the second ring around it is really enabled by any number of different accounts that that the client",
    "start": "751440",
    "end": "756800"
  },
  {
    "text": "teams may want to themselves be using uh or or shared",
    "start": "756800",
    "end": "762320"
  },
  {
    "start": "761000",
    "end": "859000"
  },
  {
    "text": "So our DevOps pipeline takes the development code and it pushes it up",
    "start": "762320",
    "end": "767839"
  },
  {
    "text": "through those different accounts and through the uh and through the life cycle stage there Um most of our lambdas",
    "start": "767839",
    "end": "773680"
  },
  {
    "text": "are coded with NodeJS Some of them are coded with Python Usually the distinction between those is that if",
    "start": "773680",
    "end": "779519"
  },
  {
    "text": "it's a utility type um application it's going to be Python and if it's core business logic it's probably going to be",
    "start": "779519",
    "end": "784880"
  },
  {
    "text": "Node Um we use Apex to manage that code at the um at the deployment level and we",
    "start": "784880",
    "end": "790320"
  },
  {
    "text": "use Terraform to manage the infrastructure that the code runs on Um and then we have a custom framework that",
    "start": "790320",
    "end": "795600"
  },
  {
    "text": "we built around Apex and Terraform Talk more about that in a second All of it gets checked into Bitbucket uh and then",
    "start": "795600",
    "end": "802560"
  },
  {
    "text": "gets processed using Jenkins jobs We also use some sonar and and other code quality and linting and things like that",
    "start": "802560",
    "end": "809760"
  },
  {
    "text": "All of that's uh enabled by the Accenture DevOps platform and we call that ADOP And what that is is a um a",
    "start": "809760",
    "end": "817519"
  },
  {
    "text": "collection of really best-in-class uh tools that everybody's already using Uh and we enable a quick way to stand those",
    "start": "817519",
    "end": "824240"
  },
  {
    "text": "up We have an open- source repository for this I'll show you the link on the next slide Uh which enables people to",
    "start": "824240",
    "end": "829760"
  },
  {
    "text": "just simply stand up whatever components they need to use and then just begin using them Uh and then we put our state",
    "start": "829760",
    "end": "836000"
  },
  {
    "text": "files for Terraform if you know anything about Terraform Um it puts uh it puts state files out there to control um",
    "start": "836000",
    "end": "842560"
  },
  {
    "text": "remembering all the stuff that it's built and the and the state files we push into S3 so that we can share them",
    "start": "842560",
    "end": "848639"
  },
  {
    "text": "We have globally distributed teams and so we needed to have a way that we can have those guys working together but",
    "start": "848639",
    "end": "854959"
  },
  {
    "text": "still you know not have to be for example mailing state files around or something like that So we had uh for the for for the",
    "start": "854959",
    "end": "863320"
  },
  {
    "text": "initial try of this we tried to use cloud formation and Unfortunately cloud formation when we started using this a",
    "start": "863320",
    "end": "868560"
  },
  {
    "text": "year ago didn't really support API gateway Um and they had some other challenges So that's why we went to",
    "start": "868560",
    "end": "873760"
  },
  {
    "text": "Terraform Um Apex did a super good job of managing the code Um but we needed to",
    "start": "873760",
    "end": "879040"
  },
  {
    "text": "do some additional things So uh we put together a uh a platform around our",
    "start": "879040",
    "end": "886399"
  },
  {
    "text": "deployment structure that's written primarily in Python And that platform uh does a few things for us It it handles",
    "start": "886399",
    "end": "893760"
  },
  {
    "text": "the state files by pulling them out of S3 merging them together when they need to be merged together so that different",
    "start": "893760",
    "end": "900079"
  },
  {
    "text": "groups can uh can can work independently in in different places in the world and then still shove their state files into",
    "start": "900079",
    "end": "906160"
  },
  {
    "text": "a common place where they can be brought together and merged together Um we used a model driven architecture So we we",
    "start": "906160",
    "end": "913199"
  },
  {
    "text": "build uh we build simple uh CSV files that have the metadata for what we're putting together And then within the",
    "start": "913199",
    "end": "920560"
  },
  {
    "text": "platform itself is the logic for how each of these different patterns work For something like API gateway um has a",
    "start": "920560",
    "end": "927199"
  },
  {
    "text": "bunch of stuff that's involved in it There are lots of things like um IM policies and and uh and transitions",
    "start": "927199",
    "end": "934160"
  },
  {
    "text": "between um the uh translations that happen inside of the API gateway between",
    "start": "934160",
    "end": "939360"
  },
  {
    "text": "requests and pushes and posts and so forth And so all of that is handled in these patterns that we've defined inside",
    "start": "939360",
    "end": "945279"
  },
  {
    "text": "of the platform and then the platform does the generation of the underlying Terraform code to push that out there Uh",
    "start": "945279",
    "end": "951440"
  },
  {
    "text": "and so everything is really very very simply designed That enables us in a couple ways because it can get",
    "start": "951440",
    "end": "956480"
  },
  {
    "text": "developers that haven't really worked with this technology up to speed very very quickly because all they really have to understand is what they want and",
    "start": "956480",
    "end": "963839"
  },
  {
    "text": "then they simply describe what they want in these CSV files Oh and that was the picture there was the link to the uh",
    "start": "963839",
    "end": "969920"
  },
  {
    "text": "DevOps platform um which is out on uh",
    "start": "969920",
    "end": "975040"
  },
  {
    "start": "975000",
    "end": "999000"
  },
  {
    "text": "GitHub So uh we've we ran into a few challenges that made us create this um",
    "start": "975399",
    "end": "981199"
  },
  {
    "text": "platform in the first place Um we we found that with cloud formation there were some some challenges I mentioned",
    "start": "981199",
    "end": "987360"
  },
  {
    "text": "with API gateway there was a lot of complexity um and and so we just put all of these challenges and we said let's",
    "start": "987360",
    "end": "993519"
  },
  {
    "text": "solve them in one place um and then take care of that and then the next guy doesn't have to worry about that and",
    "start": "993519",
    "end": "999680"
  },
  {
    "start": "999000",
    "end": "1063000"
  },
  {
    "text": "that's sort of what we're trying to do with the whole thing Um here's some lessons learned that we talk about Um",
    "start": "999680",
    "end": "1005120"
  },
  {
    "text": "you can write lambdas in lots of different languages but we really recommend picking one uh your developers",
    "start": "1005120",
    "end": "1011199"
  },
  {
    "text": "may want to use whatever language they want Um but then it becomes very difficult to have any kind of standards enforced by using our DevOps pipeline",
    "start": "1011199",
    "end": "1018800"
  },
  {
    "text": "These Jenkins jobs that do code quality using things like Sonar it's much much easier if everybody's coding in the same",
    "start": "1018800",
    "end": "1024480"
  },
  {
    "text": "way coding to the same set of standards Um it's super important and I can't I",
    "start": "1024480",
    "end": "1030400"
  },
  {
    "text": "probably should have made a whole slide for this to get your security done upfront Know what your security model is",
    "start": "1030400",
    "end": "1036000"
  },
  {
    "text": "going to be How are you going to enforce um Lambda's access to different things",
    "start": "1036000",
    "end": "1042480"
  },
  {
    "text": "how are you going to control who can hit your API gateways how are you going to do API security get all of that defined",
    "start": "1042480",
    "end": "1048720"
  },
  {
    "text": "up front and also your logging Get all of your logging models defined so that everybody's logging in the same way",
    "start": "1048720",
    "end": "1054960"
  },
  {
    "text": "because then that enables you to take those logs and process them and use that for your operations that comes later I",
    "start": "1054960",
    "end": "1061039"
  },
  {
    "text": "got a slide that shows how we do that in a second So we got some benefits out of this Obviously we wouldn't have done it",
    "start": "1061039",
    "end": "1066799"
  },
  {
    "start": "1063000",
    "end": "1152000"
  },
  {
    "text": "if we didn't think it was going to be beneficial Um and some of them were really huge in ways that we hoped would",
    "start": "1066799",
    "end": "1072400"
  },
  {
    "text": "happen but didn't necessarily know would happen We're a large enterprise Accentra's huge right and so we have",
    "start": "1072400",
    "end": "1078160"
  },
  {
    "text": "these challenges that other large enterprises have where we want to deploy something but we have to ask the group",
    "start": "1078160",
    "end": "1084799"
  },
  {
    "text": "that does that to deploy that thing for us so that we can then put our code out on it And so we can write great code and",
    "start": "1084799",
    "end": "1091360"
  },
  {
    "text": "it's ready to go but it takes a week for somebody to actually deploy something and and did we get the PO or did we get",
    "start": "1091360",
    "end": "1096640"
  },
  {
    "text": "the approval or did we get whatever else we needed So by using the DevOps pipeline and getting that process",
    "start": "1096640",
    "end": "1102799"
  },
  {
    "text": "approved and making sure that that process included all of the testing components and all of the release",
    "start": "1102799",
    "end": "1109280"
  },
  {
    "text": "management components and things like being able to generate out your documentation uh from your swagger",
    "start": "1109280",
    "end": "1115760"
  },
  {
    "text": "definitions and things like that All of that gets approved up front and then as",
    "start": "1115760",
    "end": "1120880"
  },
  {
    "text": "you release code into that mechanism you don't have to get approvals for every single different thing you're doing including the creation of you know new",
    "start": "1120880",
    "end": "1128400"
  },
  {
    "text": "uh new infrastructure or new components because it's really just more code and your code process is now approved Um and",
    "start": "1128400",
    "end": "1137120"
  },
  {
    "text": "then API versioning was a big benefit for us because we can make the agreements with the consumers at that",
    "start": "1137120",
    "end": "1142720"
  },
  {
    "text": "ring one level that we're going to uh use versioning and how that agreement is going to work and so long as we don't",
    "start": "1142720",
    "end": "1148160"
  },
  {
    "text": "violate that that gives us this ability to do continuous deployment All right So",
    "start": "1148160",
    "end": "1153520"
  },
  {
    "start": "1152000",
    "end": "1255000"
  },
  {
    "text": "a couple of patterns that came out of this you know writing with Lambda uh surfacing Lambda with API gateway Most",
    "start": "1153520",
    "end": "1159760"
  },
  {
    "text": "of these are fairly obvious things but again just stuff that you want to um make sure you go through doing",
    "start": "1159760",
    "end": "1165440"
  },
  {
    "text": "communication between the services and again this is microservices architecture right you need to be able to um isolate",
    "start": "1165440",
    "end": "1172960"
  },
  {
    "text": "out the functionality so you can update it so you can improve it but also so you can gain the efficiency of scale right",
    "start": "1172960",
    "end": "1179440"
  },
  {
    "text": "lambdas work best when they can span out to you know thousands of iterations running at the same time doing different",
    "start": "1179440",
    "end": "1186480"
  },
  {
    "text": "bits of that processing and so you have to really right for efficiency there You have to make sure that what you're",
    "start": "1186480",
    "end": "1192000"
  },
  {
    "text": "reading out of the Kinesis stream is reading in the right block sizes and things like that so that you're taking",
    "start": "1192000",
    "end": "1197520"
  },
  {
    "text": "as much advantage as you can and then queuing up or or pushing back into Kinesis for the next step so that that",
    "start": "1197520",
    "end": "1204000"
  },
  {
    "text": "communication is there Um we found that putting our storage into Elastic Search ended up making way more sense than any",
    "start": "1204000",
    "end": "1210880"
  },
  {
    "text": "other database technology because the way that we wanted to access it was with",
    "start": "1210880",
    "end": "1216080"
  },
  {
    "text": "complex queries So when we would write a a new lambda we didn't want that lambda",
    "start": "1216080",
    "end": "1221120"
  },
  {
    "text": "to have to really understand some database schema uh how we were storing things So we can simply query it Lam uh",
    "start": "1221120",
    "end": "1228159"
  },
  {
    "text": "elastic search has a tremendous language for being able to against it And so that enabled us to very quickly add new",
    "start": "1228159",
    "end": "1234080"
  },
  {
    "text": "functionality that goes after that core repository of data Um and then some data",
    "start": "1234080",
    "end": "1239200"
  },
  {
    "text": "we do put into Dynamo a lot of time series data Um and it's especially important that you go ahead and um time",
    "start": "1239200",
    "end": "1245600"
  },
  {
    "text": "stamp your data when you put it into Dynamo because that allows you to do some purging right i want to get rid of everything that's two years old or two",
    "start": "1245600",
    "end": "1251600"
  },
  {
    "text": "weeks old or 2 minutes old or whatever the use case might happen to be So this",
    "start": "1251600",
    "end": "1257280"
  },
  {
    "start": "1255000",
    "end": "1349000"
  },
  {
    "text": "is an example of our of our first architecture that we brought online um six or eight months ago I think now at",
    "start": "1257280",
    "end": "1263120"
  },
  {
    "text": "this point maybe not quite that long Um and this is a hybrid integration mechanism So what this does is for for",
    "start": "1263120",
    "end": "1270080"
  },
  {
    "text": "enterprises that have uh Service Now or they have um System Center or whatever",
    "start": "1270080",
    "end": "1275919"
  },
  {
    "text": "they have on premise they want that to know about their cloud and they don't like it when you say \"Oh well you don't",
    "start": "1275919",
    "end": "1282080"
  },
  {
    "text": "need that because it's all going to be managed in the cloud.\" They want it to be there Um and so what we are able to",
    "start": "1282080",
    "end": "1287200"
  },
  {
    "text": "do is write a number of lambdas and and use things like AWS config and and other",
    "start": "1287200",
    "end": "1293280"
  },
  {
    "text": "tools to be able to go and get the resources out of the cloud to take that",
    "start": "1293280",
    "end": "1299640"
  },
  {
    "text": "infrastructure map it into our own internal databases so we know what's changed and when it's changed and then",
    "start": "1299640",
    "end": "1305360"
  },
  {
    "text": "either push it or put an API out there that allows them to pull down those changes and make them look like service",
    "start": "1305360",
    "end": "1311840"
  },
  {
    "text": "requests into Service Now or whatever their ITIL model may happen to be um and",
    "start": "1311840",
    "end": "1317679"
  },
  {
    "text": "so it really enables that communications between the two and again so we talk about what ACP is doing and we have",
    "start": "1317679",
    "end": "1324159"
  },
  {
    "text": "these core services so this core service sits there running all the time and when you on board with us what happens is you",
    "start": "1324159",
    "end": "1330640"
  },
  {
    "text": "define what you have on premise and you define what accounts you're using and then that just sort of falls into the",
    "start": "1330640",
    "end": "1336720"
  },
  {
    "text": "processing mechanism at the bottom I talk about the operations model and I have another slide on that next and the",
    "start": "1336720",
    "end": "1342400"
  },
  {
    "text": "operations model takes all of those common logs that are coming out and enables us to look at those logs and",
    "start": "1342400",
    "end": "1348320"
  },
  {
    "text": "process that So the operations and monitoring when we deploy we deploy",
    "start": "1348320",
    "end": "1355120"
  },
  {
    "start": "1349000",
    "end": "1483000"
  },
  {
    "text": "lambdas via terraform via the apex mechanism that I was talking about and every time we do a deployment of a new",
    "start": "1355120",
    "end": "1361760"
  },
  {
    "text": "lambda we actually have a secondary lambda that lives out there that watches for that and when it sees it create a",
    "start": "1361760",
    "end": "1367840"
  },
  {
    "text": "new log system and every lambda has log into cloudatch it sees that new log",
    "start": "1367840",
    "end": "1373280"
  },
  {
    "text": "going into Cloudatch and it automatically assigns it to a Cloudatch log group That log group is",
    "start": "1373280",
    "end": "1378320"
  },
  {
    "text": "automatically subscribed into a Kinesis stream So those logs as soon as they're being published are going into Kinesis",
    "start": "1378320",
    "end": "1385440"
  },
  {
    "text": "and we have a couple of other lambdas that are watching the Kinesis stream One which takes those logs and puts them",
    "start": "1385440",
    "end": "1390880"
  },
  {
    "text": "straight into Elastic Search and that enables us to go into Cabana and look at them or query them out as we need to and",
    "start": "1390880",
    "end": "1397039"
  },
  {
    "text": "then another one parses through them and pulls the data out of that to do things like alerts and metrics that we want to",
    "start": "1397039",
    "end": "1404080"
  },
  {
    "text": "keep in our internal database Now we also use uh Cloudatch for that but you",
    "start": "1404080",
    "end": "1409760"
  },
  {
    "text": "probably know Cloudatch only has access to the top level data It doesn't really know what the business data underneath",
    "start": "1409760",
    "end": "1415919"
  },
  {
    "text": "that is And so what we do in the logging is we're sure to put um the client ID",
    "start": "1415919",
    "end": "1421360"
  },
  {
    "text": "for example that goes in there it's multi-tenant so we need to know what client we were processing for that took so very long um or not Uh and we need",
    "start": "1421360",
    "end": "1428720"
  },
  {
    "text": "things like correlation ids that allow us to string together the lambda executions as they go through the",
    "start": "1428720",
    "end": "1434880"
  },
  {
    "text": "process All of those logs get pulled together um into a single common core place um and merge together with the",
    "start": "1434880",
    "end": "1441840"
  },
  {
    "text": "other overall cloudatch data and then all of that enables us to put together something like a a health dashboard And",
    "start": "1441840",
    "end": "1448880"
  },
  {
    "text": "the health dashboard enables our operations guys or our client guys to go in and they can say \"Oh I got a red flag here Let's see who that is.\" Oh it's",
    "start": "1448880",
    "end": "1455520"
  },
  {
    "text": "just this one client because their on premise system is down their VPN is down whatever it may happen to be And so we",
    "start": "1455520",
    "end": "1461520"
  },
  {
    "text": "don't think we have a systemic problem We can really trace it down to what we need And then we can jump over to Cabana",
    "start": "1461520",
    "end": "1467200"
  },
  {
    "text": "and we can actually pull up the whole log chain So that's what we're doing today in ACP And that's how we've",
    "start": "1467200",
    "end": "1473600"
  },
  {
    "text": "already begun using this stuff And I'm gonna let Matt talk for a while and he's going to talk about how we take that out and give it to our clients There you go",
    "start": "1473600",
    "end": "1480919"
  },
  {
    "text": "Matt Fantastic All righty How many of you are",
    "start": "1480919",
    "end": "1486159"
  },
  {
    "start": "1483000",
    "end": "1826000"
  },
  {
    "text": "building uh building applications on a serverless architecture today okay good good amount of the room",
    "start": "1486159",
    "end": "1492960"
  },
  {
    "text": "How many of you are having some delivery challenges some some orchestration challenges and other delivering those",
    "start": "1492960",
    "end": "1498840"
  },
  {
    "text": "applications pretty much the almost the same group of people So um I want to talk a little bit about uh the the",
    "start": "1498840",
    "end": "1505200"
  },
  {
    "text": "current state of how folks are building serverless applications out in the wild",
    "start": "1505200",
    "end": "1510640"
  },
  {
    "text": "and some of the things that we've observed from being in the trenches over the past 18 months that have derisked a",
    "start": "1510640",
    "end": "1516960"
  },
  {
    "text": "lot of those delivery aspects have sort of improved how our clients and we have",
    "start": "1516960",
    "end": "1522159"
  },
  {
    "text": "have gone to market and done some of these things So what I what I want you all to take out of this is I think we in",
    "start": "1522159",
    "end": "1527919"
  },
  {
    "text": "this room are responsible for um building the next generation of awesome",
    "start": "1527919",
    "end": "1533200"
  },
  {
    "text": "value creating applications And if we're going to do that with a serverless architecture there are some some obvious",
    "start": "1533200",
    "end": "1538799"
  },
  {
    "text": "pitfalls to avoid because we've we've been down that road before It doesn't necessarily end well Um and there are",
    "start": "1538799",
    "end": "1545880"
  },
  {
    "text": "some things that we can do to really improve the quality of the end product",
    "start": "1545880",
    "end": "1552159"
  },
  {
    "text": "and also you know destress all of us as as developers and architects right so um",
    "start": "1552159",
    "end": "1558320"
  },
  {
    "text": "what what do we observe today what are what are some of the the the sins of the present and and I think the the first",
    "start": "1558320",
    "end": "1563360"
  },
  {
    "text": "and most obvious one is something that almost as every new technology or every new um pattern or way of doing things",
    "start": "1563360",
    "end": "1569120"
  },
  {
    "text": "comes out we we sort of rehash this problem I remember doing arguing with people like 15 years ago doing the same",
    "start": "1569120",
    "end": "1575360"
  },
  {
    "text": "thing with Pearl scripts that were just sitting all over the place managing their entire environment and nobody knew what did what Um if we go if we fast",
    "start": "1575360",
    "end": "1582640"
  },
  {
    "text": "forward um 15 years now today folks building serverless applications you see",
    "start": "1582640",
    "end": "1588320"
  },
  {
    "text": "little Python scripts and bash scripts and there's a Ruby script over here and each team has their own um way to manage",
    "start": "1588320",
    "end": "1595919"
  },
  {
    "text": "the different services and different pieces of the application sometimes even in the same product team you'll you'll",
    "start": "1595919",
    "end": "1601279"
  },
  {
    "text": "see some folks that uh that are managing things slightly differently and and it ends up getting you a real nightmare and",
    "start": "1601279",
    "end": "1606720"
  },
  {
    "text": "we'll talk a little bit more about that Um Lambda is is fantastic It's wonderful",
    "start": "1606720",
    "end": "1611919"
  },
  {
    "text": "It's it's going to help us uh you know do all kinds of amazing things but I",
    "start": "1611919",
    "end": "1617279"
  },
  {
    "text": "think the we're sort of at the top of the hype cycle right everybody's drinking a bit too much of the Kool-Aid",
    "start": "1617279",
    "end": "1622799"
  },
  {
    "text": "What I what I have observed over the past like six months or so is that as",
    "start": "1622799",
    "end": "1627919"
  },
  {
    "text": "folks are are starting to build some of these quoteunquote serverless applications Lambda is used for all",
    "start": "1627919",
    "end": "1634240"
  },
  {
    "text": "kinds of stuff And we'll we'll we'll get into some of the some of the pitfalls of that but the the the TLDDR of that is",
    "start": "1634240",
    "end": "1640559"
  },
  {
    "text": "you know use things like the API gateway use Kinesis use some of the other services that are still you know you're",
    "start": "1640559",
    "end": "1647600"
  },
  {
    "text": "still not managing infrastructure to to alleviate some of those issues And the the next one is almost blindingly",
    "start": "1647600",
    "end": "1654799"
  },
  {
    "text": "obvious but since I see it so much I figure we would put it there which is folks are trying to reuse existing",
    "start": "1654799",
    "end": "1661120"
  },
  {
    "text": "Node.js code by throwing it into into lambdas and calling it a bunch of functions right and you end up getting",
    "start": "1661120",
    "end": "1667840"
  },
  {
    "text": "you know interesting situations like 30 megs of JavaScript trying to",
    "start": "1667840",
    "end": "1674159"
  },
  {
    "text": "push into a Lambda and then everybody's wondering why their deployment processes take 45 minutes right it's it's uh it's",
    "start": "1674159",
    "end": "1680880"
  },
  {
    "text": "it's a it's a pretty easy uh pretty easy answer to that So um and then the the",
    "start": "1680880",
    "end": "1686320"
  },
  {
    "text": "last piece is we're relying on monitoring tools that will give us sort of spot checks What what are individual",
    "start": "1686320",
    "end": "1692720"
  },
  {
    "text": "functions and services doing what is their health what we don't get is the health of the overall software system",
    "start": "1692720",
    "end": "1697919"
  },
  {
    "text": "the overall sort of you know pipeline of of events that ends up uh ends up",
    "start": "1697919",
    "end": "1703360"
  },
  {
    "text": "producing the final result for whatever the request was right and understanding that whole system and and and its health",
    "start": "1703360",
    "end": "1709440"
  },
  {
    "text": "over time abnormalities all that kind of stuff becomes really important right so",
    "start": "1709440",
    "end": "1714720"
  },
  {
    "text": "what we're what we're observing and what what folks that are that are very successful are doing um number one is",
    "start": "1714720",
    "end": "1721760"
  },
  {
    "text": "picking a you know my my favorite two words when I when I go to clients or when I do QA of our internal projects is",
    "start": "1721760",
    "end": "1728480"
  },
  {
    "text": "you need to have a reference architecture right sort of a reference model the shining city on the hill that",
    "start": "1728480",
    "end": "1734000"
  },
  {
    "text": "everybody is aspiring to Um and one of the major pieces of that with a",
    "start": "1734000",
    "end": "1739279"
  },
  {
    "text": "serverless architecture is using a consistent framework to manage resources There are",
    "start": "1739279",
    "end": "1745520"
  },
  {
    "text": "a couple of them out there We tend to prefer the serverless framework If you guys are in the room you guys built an",
    "start": "1745520",
    "end": "1751440"
  },
  {
    "text": "awesome uh awesome application um you know just to manage and orchestrate the different components within AWS the",
    "start": "1751440",
    "end": "1758159"
  },
  {
    "text": "different different pieces of of your overall software system and make all that work together you know have have",
    "start": "1758159",
    "end": "1763679"
  },
  {
    "text": "your nice cloud formation templates and all that and and build it in a consistent way so that folks from",
    "start": "1763679",
    "end": "1768799"
  },
  {
    "text": "different teams different product lines can understand what's going on and streamline all of the sort of resource",
    "start": "1768799",
    "end": "1775200"
  },
  {
    "text": "provisioning processes and things like that um using the platform services um",
    "start": "1775200",
    "end": "1780320"
  },
  {
    "text": "as much as possible we'll get into that a little bit more but there's a lot of great stuff that can supplement Lambda",
    "start": "1780320",
    "end": "1785360"
  },
  {
    "text": "and putting things that are not business logic in in in your lambdas is sometimes uh can sometimes be a bit problematic in",
    "start": "1785360",
    "end": "1791520"
  },
  {
    "text": "terms of overall performance and sort of overall anti-fragility in a system Um",
    "start": "1791520",
    "end": "1797520"
  },
  {
    "text": "and the the third one is written in an interesting way We probably could have",
    "start": "1797520",
    "end": "1802799"
  },
  {
    "text": "uh could have fixed that But what we're what we're trying to say there is um reduce the size of code that you're",
    "start": "1802799",
    "end": "1808880"
  },
  {
    "text": "deploying into lambdas it to to a minimum Right i don't care if you do 50 deploys a day If you have if you have a",
    "start": "1808880",
    "end": "1814799"
  },
  {
    "text": "10meg file that you're trying to shove in there um you're you're you're not going to have a good time with it right so pull out the dev dependencies do good",
    "start": "1814799",
    "end": "1821520"
  },
  {
    "text": "bundling all that kind of stuff We'll talk about that a little bit more And then of course the use use good visualization So first first major point",
    "start": "1821520",
    "end": "1828720"
  },
  {
    "text": "here um don't use Lambda for absolutely everything Um there's a lot of great",
    "start": "1828720",
    "end": "1834000"
  },
  {
    "text": "stuff in the AWS service catalog choose the components that you that you need rather than shoving a bunch of custom",
    "start": "1834000",
    "end": "1839919"
  },
  {
    "text": "code in a lambda Um it it will it will make all of our lives easier right um so",
    "start": "1839919",
    "end": "1846320"
  },
  {
    "text": "taking advantage of the stuff that's in the API gateway So using for example velocity templates to do simple data",
    "start": "1846320",
    "end": "1854159"
  },
  {
    "text": "transformations So I've I've seen this many many times now where we'll just",
    "start": "1854159",
    "end": "1859279"
  },
  {
    "text": "there there's a simple mashup of some information to create a new JSON file or",
    "start": "1859279",
    "end": "1864320"
  },
  {
    "text": "you know converting something over from XML from a legacy system or something like that There's no reason to go build",
    "start": "1864320",
    "end": "1870000"
  },
  {
    "text": "a a custom function to go do that every time when you can just build a simple template in the gateway The gateway will",
    "start": "1870000",
    "end": "1875360"
  },
  {
    "text": "take care of it for you and then you can focus on using Lambda for the for the actual business logic",
    "start": "1875360",
    "end": "1881080"
  },
  {
    "text": "Um so if uh large amounts of data ingestion are required and and often",
    "start": "1881080",
    "end": "1886960"
  },
  {
    "text": "enough they are um consider you know a a taking the next step into the event",
    "start": "1886960",
    "end": "1892720"
  },
  {
    "text": "driven architecture world and use um use a use a use a a distributed commit log",
    "start": "1892720",
    "end": "1899919"
  },
  {
    "text": "or a stream of events that you can then uh you can then uh subscribe to etc Um I",
    "start": "1899919",
    "end": "1906960"
  },
  {
    "text": "saw and and something we're we're helping a client through in the travel space right now is you know when you",
    "start": "1906960",
    "end": "1913760"
  },
  {
    "text": "when you're and when parts of your system go down and you're not able to say book a flight or book a hotel room",
    "start": "1913760",
    "end": "1920960"
  },
  {
    "text": "right um if your architecture is set up such that each of the asynchronous",
    "start": "1920960",
    "end": "1926559"
  },
  {
    "text": "updates that happens okay so we have a we have a booking right we have a reservation Oo we have a gate change We",
    "start": "1926559",
    "end": "1932000"
  },
  {
    "text": "have a we have a flight delay We have a mechanical issue right your seat changed right all of those things are are",
    "start": "1932000",
    "end": "1937760"
  },
  {
    "text": "updates that queue up And if those are sitting on for example JMSs cues a piece of the system goes down they're not able",
    "start": "1937760",
    "end": "1943760"
  },
  {
    "text": "to do the the full set of functionality stuff just piles up on the cues right",
    "start": "1943760",
    "end": "1948960"
  },
  {
    "text": "and then when they pull everything back up suddenly you have a bunch of stale data that you have to process through before you can get back to the real data",
    "start": "1948960",
    "end": "1954880"
  },
  {
    "text": "So that ends up creating billion-dollar problems of whole systems being down for",
    "start": "1954880",
    "end": "1960320"
  },
  {
    "text": "a couple days when what we could do instead is you know use a lambda use use",
    "start": "1960320",
    "end": "1966720"
  },
  {
    "text": "a uh use kinesis or kafka or something like that right have all of that data",
    "start": "1966720",
    "end": "1972480"
  },
  {
    "text": "going through have some logic to be able to prioritize it if we have a partial system failure So when things come back",
    "start": "1972480",
    "end": "1978399"
  },
  {
    "text": "up we're not going through stale data and all that right the serverless architecture makes that possible Lambdas",
    "start": "1978399",
    "end": "1984240"
  },
  {
    "text": "make that possible But um you know using the data streaming mechanism using",
    "start": "1984240",
    "end": "1989360"
  },
  {
    "text": "lambdas the event handlers that's that's ultimately going to to help with throughput and help with some of those",
    "start": "1989360",
    "end": "1994960"
  },
  {
    "text": "business cases that are tough to crack otherwise Um and most of the AWS",
    "start": "1994960",
    "end": "2000000"
  },
  {
    "text": "services already um expose an endpoint right so if you're if you're building um",
    "start": "2000000",
    "end": "2006399"
  },
  {
    "text": "logic to orchestrate things you don't necessarily need to because it's mostly already there And certainly use use",
    "start": "2006399",
    "end": "2012880"
  },
  {
    "text": "lambda when you need to to input business logic into a set of events that are that are occurring on your",
    "start": "2012880",
    "end": "2019240"
  },
  {
    "start": "2019000",
    "end": "2052000"
  },
  {
    "text": "data Um so the the using velocity templates I think is important because",
    "start": "2019240",
    "end": "2024399"
  },
  {
    "text": "it's inside of the API gateway Um I'm not sure if it's marketed as as or as",
    "start": "2024399",
    "end": "2029760"
  },
  {
    "text": "prominent as it as it could be Um we found a lot of value in that in",
    "start": "2029760",
    "end": "2034960"
  },
  {
    "text": "terms of instead of using you know instead of writing a bunch of custom code and then having to maintain it",
    "start": "2034960",
    "end": "2040320"
  },
  {
    "text": "writing much smaller configuration files and and and templates that we can do a lot of those simple transformations in",
    "start": "2040320",
    "end": "2046720"
  },
  {
    "text": "and not uh you know not clutter up our code We tried to dry it up a little bit right um so using streams talked through",
    "start": "2046720",
    "end": "2055440"
  },
  {
    "start": "2052000",
    "end": "2116000"
  },
  {
    "text": "this a little bit already but um I think there a couple of important points here if we're going to use uh if we're going",
    "start": "2055440",
    "end": "2062000"
  },
  {
    "text": "to use Kinesis or we're going to use Kafka or something like that Um specifically with Kinesis um if we're",
    "start": "2062000",
    "end": "2068000"
  },
  {
    "text": "pulling in a bunch of asynchronous data like the updates that we were talking about um the second point or the second",
    "start": "2068000",
    "end": "2073599"
  },
  {
    "text": "bullet point here of um we we want to tune the event source mapping batch size to just under 100 milliseconds Right so",
    "start": "2073599",
    "end": "2080638"
  },
  {
    "text": "the the the charging model in Lambda is every 100 milliseconds you incur you're going to get charged for it Right so a",
    "start": "2080639",
    "end": "2086960"
  },
  {
    "text": "lot of times we'll see folks that have function executions that are you know 5",
    "start": "2086960",
    "end": "2092800"
  },
  {
    "text": "milliseconds or something like that right and each time they're doing that they're getting charged for 100 milliseconds So figure if if we try to",
    "start": "2092800",
    "end": "2098400"
  },
  {
    "text": "microbatch up some of those transactions get it to 75 80 milliseconds we're first",
    "start": "2098400",
    "end": "2103920"
  },
  {
    "text": "of all not wasting money and secondly um we're actually working within that uh within that execution cycle pretty well",
    "start": "2103920",
    "end": "2111119"
  },
  {
    "text": "So we we save a little bit of time and we also save a little bit of money and and get get a get a good value out of",
    "start": "2111119",
    "end": "2116160"
  },
  {
    "start": "2116000",
    "end": "2292000"
  },
  {
    "text": "the functions Um next piece is is when we when we do use lambdas and we should",
    "start": "2116160",
    "end": "2121520"
  },
  {
    "text": "use them um predigiously but but um intelligently we need to be nice to them",
    "start": "2121520",
    "end": "2128800"
  },
  {
    "text": "They're not uh if they don't if they're if they're angry with you they will they will make that uh make that presence",
    "start": "2128800",
    "end": "2134640"
  },
  {
    "text": "known So um use a bundler So use something that",
    "start": "2134640",
    "end": "2140560"
  },
  {
    "text": "uh will pack up your code remove the dev dependencies remove a bunch of the stuff that's not needed for production code",
    "start": "2140560",
    "end": "2147599"
  },
  {
    "text": "Webpack is a great one You know using a using a gulp script or something or a grunt script beforehand to to go through",
    "start": "2147599",
    "end": "2154160"
  },
  {
    "text": "and optimize and chew through that code right i think we've we've all done that in many cases in existing applications",
    "start": "2154160",
    "end": "2161359"
  },
  {
    "text": "for for whatever reason it's it's become a pattern that some of those best practices are are not necessarily",
    "start": "2161359",
    "end": "2167200"
  },
  {
    "text": "followed when people are throwing things into lambdas because lambdas are magical and they they solve all your problems right so you know using good bundling",
    "start": "2167200",
    "end": "2176320"
  },
  {
    "text": "packaging up your application well before you zip it up and send it off um is is always uh always preferred and it",
    "start": "2176320",
    "end": "2183040"
  },
  {
    "text": "will solve a lot of problems before they begin um and and stop you from incurring a bunch of tech debt that you really",
    "start": "2183040",
    "end": "2188880"
  },
  {
    "text": "don't want to deal with later um ensuring that the dev dependencies are not included I think I've mentioned",
    "start": "2188880",
    "end": "2195040"
  },
  {
    "text": "that three times already but I've seen it like 12 times in production and people are really worried that their",
    "start": "2195040",
    "end": "2200320"
  },
  {
    "text": "applications are huge and that uh that that they're taking a while to process and all this and it's like okay let's",
    "start": "2200320",
    "end": "2205680"
  },
  {
    "text": "just slim it down figure out the pack the bundling mechanism We've just saved you one-third of your your processing",
    "start": "2205680",
    "end": "2211040"
  },
  {
    "text": "time It's magic Um so um a couple of couple of uh sort",
    "start": "2211040",
    "end": "2217280"
  },
  {
    "text": "of deeper points here um lambda containers can persist across invoc",
    "start": "2217280",
    "end": "2223280"
  },
  {
    "text": "invocations right so if we have a bunch of stuff related to one particular function it's usually a really good idea",
    "start": "2223280",
    "end": "2231359"
  },
  {
    "text": "to um include all of those functions into into a single handler so that when",
    "start": "2231359",
    "end": "2237440"
  },
  {
    "text": "whenever we're if we're calling one of the rarer rare more rarely called",
    "start": "2237440",
    "end": "2242640"
  },
  {
    "text": "functions in that invocation it's not we're not including or we're not incurring the cold boot issue right",
    "start": "2242640",
    "end": "2248320"
  },
  {
    "text": "we're not including the uh the boot up time So everything that deals with say profile information or um ticket",
    "start": "2248320",
    "end": "2254800"
  },
  {
    "text": "information or tax information right include that in a single set of event handlers you'll you'll you'll end up uh",
    "start": "2254800",
    "end": "2260960"
  },
  {
    "text": "bypassing one of the one of the larger trade-offs that you get with using Lambda Um and I think that the next one",
    "start": "2260960",
    "end": "2267200"
  },
  {
    "text": "is is equally important which is uh if you have things like like your IM data",
    "start": "2267200",
    "end": "2273280"
  },
  {
    "text": "or um some some other sort of persistent cross function data um you can",
    "start": "2273280",
    "end": "2278720"
  },
  {
    "text": "instantiate that outside of methods and then it doesn't get blown away right so you're not going back and invoking",
    "start": "2278720",
    "end": "2285119"
  },
  {
    "text": "services every single time You're you're using persistent objects well which which also helps you uh avoid some of",
    "start": "2285119",
    "end": "2292079"
  },
  {
    "start": "2292000",
    "end": "2395000"
  },
  {
    "text": "the cold boot issues So um next point here um which is one I get",
    "start": "2292079",
    "end": "2299520"
  },
  {
    "text": "kind of passionate about because I've seen this a couple times where folks have had some production issues that they probably didn't necessarily need to",
    "start": "2299520",
    "end": "2306160"
  },
  {
    "text": "have Um Cloudatch is great when you're trying to measure very discreet things like",
    "start": "2306160",
    "end": "2312079"
  },
  {
    "text": "like CPU on a box or how a single service is running It doesn't necessarily deal with time series data",
    "start": "2312079",
    "end": "2318640"
  },
  {
    "text": "across a whole software system particularly well So what we've ended up um working through with a few clients",
    "start": "2318640",
    "end": "2325760"
  },
  {
    "text": "and and and putting out there in the wild is something that has worked pretty well for us which is uh and and Tom",
    "start": "2325760",
    "end": "2331280"
  },
  {
    "text": "mentioned something similar right where you put it through Prometheus it's",
    "start": "2331280",
    "end": "2336320"
  },
  {
    "text": "timestamps and sort of organizes the data in a way that it can be interpreted in a time series fashion and you get",
    "start": "2336320",
    "end": "2341920"
  },
  {
    "text": "really nice visualizations of that data So if you do a request for example we'll",
    "start": "2341920",
    "end": "2347119"
  },
  {
    "text": "use my my booking example from earlier right you do a request to book you get booked something changes you get a",
    "start": "2347119",
    "end": "2353839"
  },
  {
    "text": "notification that notification invokes a service right i want to see that that uh that that sort of trend line and how all",
    "start": "2353839",
    "end": "2360800"
  },
  {
    "text": "of that works together and whether it's working together well And if there once we get you know a a good amount of time",
    "start": "2360800",
    "end": "2367839"
  },
  {
    "text": "we know what our upper and lower control limits are we know whether the system's in good health Then we can start to say",
    "start": "2367839",
    "end": "2374160"
  },
  {
    "text": "okay if there's an abnormality what do we do to it where do we set our alerts right and we're setting that a across",
    "start": "2374160",
    "end": "2380640"
  },
  {
    "text": "making sure the entire system works as opposed to sort of organizing pieces which becomes a sort of a really heady",
    "start": "2380640",
    "end": "2387359"
  },
  {
    "text": "operational problem when you don't actually have any console that you can log into and and you know run top and",
    "start": "2387359",
    "end": "2392880"
  },
  {
    "text": "figure out which processes is is is going ary Um so the the last piece and I",
    "start": "2392880",
    "end": "2398800"
  },
  {
    "start": "2395000",
    "end": "2874000"
  },
  {
    "text": "wanted to save a good amount of time for this because I want to connect some of this stuff back to business value right",
    "start": "2398800",
    "end": "2404079"
  },
  {
    "text": "um one I think one of the things as technologists that that we sometimes",
    "start": "2404079",
    "end": "2409280"
  },
  {
    "text": "have a hard time with is what is the value of an event- driven serverless architecture go explain that to a chief",
    "start": "2409280",
    "end": "2416160"
  },
  {
    "text": "marketing officer Right it becomes a bit difficult because there's a lot of uh there's a lot of heady concepts in there",
    "start": "2416160",
    "end": "2422800"
  },
  {
    "text": "So I want to talk talk through um a brief example of where we've implemented",
    "start": "2422800",
    "end": "2429040"
  },
  {
    "text": "um first a microservices architecture and now um in in another client we're we're doing it in a serverless manner Um",
    "start": "2429040",
    "end": "2436560"
  },
  {
    "text": "something that I think is is is kind of cool and revolutionary right where um so",
    "start": "2436560",
    "end": "2441839"
  },
  {
    "text": "if you imagine core banking activity right we'll we'll get into one of the one of the biggest industries and one of",
    "start": "2441839",
    "end": "2447760"
  },
  {
    "text": "the one of the hardest nuts to crack here real quick Um so we're we're looking at core",
    "start": "2447760",
    "end": "2455040"
  },
  {
    "text": "banking right when you're when when you're just doing stuff like uh like pulling a transaction um transaction",
    "start": "2455040",
    "end": "2461599"
  },
  {
    "text": "list or making simple calls back and forth right to to get your data Um reads",
    "start": "2461599",
    "end": "2466880"
  },
  {
    "text": "outnumber writes in that in that instance in in most folks in the industry by by about tenfold right or a",
    "start": "2466880",
    "end": "2473520"
  },
  {
    "text": "little bit more So you're getting 10 reads for every write Um most of these systems are sitting on the mainframe",
    "start": "2473520",
    "end": "2479680"
  },
  {
    "text": "right they're sitting on on uh systems that uh were in many cases written 30 40",
    "start": "2479680",
    "end": "2484960"
  },
  {
    "text": "years ago and also continuously written for 30 or 40 years right so a colleague just told me the other day um one of the",
    "start": "2484960",
    "end": "2491440"
  },
  {
    "text": "banks in the UK had a major issue they had to bring in a consultant that was a 90-year-old developer who took took took",
    "start": "2491440",
    "end": "2499119"
  },
  {
    "text": "two weeks to fix their problem right and and she did awesome stuff but that's probably not a resource that you want to",
    "start": "2499119",
    "end": "2505680"
  },
  {
    "text": "rely on a whole lot for for billion dollar systems right so so What do we do in that instance right what do how do we",
    "start": "2505680",
    "end": "2512079"
  },
  {
    "text": "crack that problem because all of that stuff is interrelated It's been continuously developed for 30 40 years",
    "start": "2512079",
    "end": "2517440"
  },
  {
    "text": "There's gigantic J systems sitting on top of it that that are probably just as",
    "start": "2517440",
    "end": "2522640"
  },
  {
    "text": "bad in terms of their coding and being giant monoliths right so we have a huge problem there So one of the ways that",
    "start": "2522640",
    "end": "2528880"
  },
  {
    "text": "we've chosen to look at tackling it is tackling it with the first of all sort",
    "start": "2528880",
    "end": "2533920"
  },
  {
    "text": "of a microservices type concept and secondly applying serverless architecture to that So if you can",
    "start": "2533920",
    "end": "2539119"
  },
  {
    "text": "imagine every every time you run a transaction whether it's read or write that you incur MIP's cost on the on the",
    "start": "2539119",
    "end": "2546319"
  },
  {
    "text": "uh on the mainframe right so if you're running say $40 million worth of mainframe transactions that's $40",
    "start": "2546319",
    "end": "2552480"
  },
  {
    "text": "million you can't use on something else and that's it's actually a drop in the bucket for a for a big bank and what they're paying for for mainframe So what",
    "start": "2552480",
    "end": "2560640"
  },
  {
    "text": "we did was basically take all take the whole system did a uh um translation",
    "start": "2560640",
    "end": "2567280"
  },
  {
    "text": "over into the the back end was Hadoop the front end was a bunch of services that are being composed as uh first is",
    "start": "2567280",
    "end": "2575119"
  },
  {
    "text": "microservices in Java Now they're they're moving a lot of it over to uh to serverless functions And I think we'll",
    "start": "2575119",
    "end": "2581599"
  },
  {
    "text": "we'll get that entire architecture in that direction at some point um with with some other clients But I think uh",
    "start": "2581599",
    "end": "2588000"
  },
  {
    "text": "so the the the how we did that was basically every time you know a database is composed of",
    "start": "2588000",
    "end": "2593839"
  },
  {
    "text": "two things fundamentally it's composed of the data and then the commit the commit log Um so if you just read the",
    "start": "2593839",
    "end": "2599520"
  },
  {
    "text": "commit log every time something's committed and trans translated over to uh to Hadoop we ended up getting",
    "start": "2599520",
    "end": "2605839"
  },
  {
    "text": "subsecond replication time Um that became really handy because we were able",
    "start": "2605839",
    "end": "2611200"
  },
  {
    "text": "to do all of the read activity from the new system Right So any any actual",
    "start": "2611200",
    "end": "2616560"
  },
  {
    "text": "writes just got routed back to the old mainframe we're preserving all of that business logic there to start with Read",
    "start": "2616560",
    "end": "2622480"
  },
  {
    "text": "activity comes from the new system Um and since since we all know you know if",
    "start": "2622480",
    "end": "2628480"
  },
  {
    "text": "you look at look at Lambda and the cost of it right it's pennies on the dollar compared to traditional methods what",
    "start": "2628480",
    "end": "2633920"
  },
  {
    "text": "ended up happening was a 60% reduction in MIP's cost right so if we take our $40 million right we've we've shaved",
    "start": "2633920",
    "end": "2641280"
  },
  {
    "text": "away 60% of that in 12 months You take that business case you take that to any any CFO you say you have a 12-month",
    "start": "2641280",
    "end": "2648000"
  },
  {
    "text": "payback period right you're going to get green lit on your project most likely So",
    "start": "2648000",
    "end": "2653280"
  },
  {
    "text": "we we crack the first nut right of moving moving the read activity then suddenly all all these interesting",
    "start": "2653280",
    "end": "2659280"
  },
  {
    "text": "avenues pop up for us right and if we follow some of the principles that we we talked through before and we build an",
    "start": "2659280",
    "end": "2665520"
  },
  {
    "text": "application that starts to shave off some of those core activities right which I think the the industry in",
    "start": "2665520",
    "end": "2672319"
  },
  {
    "text": "financial services is very much moving toward right now You can and and they're they're running into this problem of",
    "start": "2672319",
    "end": "2678000"
  },
  {
    "text": "actually attacking that big monolith So if we have the read system off to the side suddenly if we need new",
    "start": "2678000",
    "end": "2683839"
  },
  {
    "text": "functionality we can put it in there and start to reroute things and apply the strangler pattern to core banking Right",
    "start": "2683839",
    "end": "2691119"
  },
  {
    "text": "so we're talking about multi-billion dollar problems that we can solve with",
    "start": "2691119",
    "end": "2697359"
  },
  {
    "text": "novel architectures without a whole lot of risk right so I think the the the",
    "start": "2697359",
    "end": "2702560"
  },
  {
    "text": "thing that that would is is great to take away from that is all of this will",
    "start": "2702560",
    "end": "2708400"
  },
  {
    "text": "will end up uh you know it's something that you can really fundamentally change whole industries",
    "start": "2708400",
    "end": "2714599"
  },
  {
    "text": "with and build you know building serverless applications as long as we",
    "start": "2714599",
    "end": "2720000"
  },
  {
    "text": "avoid a lot of the pitfalls that that we mentioned a moment ago um you can really",
    "start": "2720000",
    "end": "2725920"
  },
  {
    "text": "start start the clock over in terms of lots of tech debt and maybe you won't need the the 90-year-old developer to uh",
    "start": "2725920",
    "end": "2732480"
  },
  {
    "text": "to come out of the retirement home to help you uh help you solve your your problem with with uh tax data being",
    "start": "2732480",
    "end": "2739680"
  },
  {
    "text": "mismatched or something like that right um so lot of uh lot of momentum on that",
    "start": "2739680",
    "end": "2747280"
  },
  {
    "text": "side of the house Um also a lot of momentum in in using serverless to just solve simple business problems right if",
    "start": "2747280",
    "end": "2754640"
  },
  {
    "text": "we don't have to worry about all the infrastructure if we can you know have a consistent method of deployment and all",
    "start": "2754640",
    "end": "2760160"
  },
  {
    "text": "that we can really empower developers to solve problems on on individual products and decompose things into uh into a set",
    "start": "2760160",
    "end": "2768079"
  },
  {
    "text": "of modules that that work to actually solve those problems right so I think",
    "start": "2768079",
    "end": "2773119"
  },
  {
    "text": "the the the the messianic message I guess or the evangelical message is drink enough of the Kool-Aid to take",
    "start": "2773119",
    "end": "2780079"
  },
  {
    "text": "this to business leadership and say if we do this right we can give you the",
    "start": "2780079",
    "end": "2786000"
  },
  {
    "text": "12-month payback periods We can give you the functionality that you were looking for I'm working with a hospitality",
    "start": "2786000",
    "end": "2791119"
  },
  {
    "text": "client right now with their core reservation system And how many of us",
    "start": "2791119",
    "end": "2796319"
  },
  {
    "text": "stay in hotels fairly regularly okay Got a got a a couple of fellow road",
    "start": "2796319",
    "end": "2801599"
  },
  {
    "text": "warriors around here So um wouldn't it be nice if you could just choose the actual room you want to stay",
    "start": "2801599",
    "end": "2808920"
  },
  {
    "text": "in be be kind of cool right um none of the big reservation systems can do that",
    "start": "2808920",
    "end": "2814400"
  },
  {
    "text": "today It's not not a it's a pretty open open secret right um they can't do it because they were never engineered to do",
    "start": "2814400",
    "end": "2820560"
  },
  {
    "text": "that Um decomposing and bu and building this stuff in this way um you will see",
    "start": "2820560",
    "end": "2826160"
  },
  {
    "text": "that kind of functionality or walking into the hotel and your room will be tuned to the temperature that you",
    "start": "2826160",
    "end": "2831680"
  },
  {
    "text": "usually like your room I like to sleep in a freezer So um if it's 75 degrees in the room I'm not happy So if it gets if",
    "start": "2831680",
    "end": "2839119"
  },
  {
    "text": "it gets turned down to 68 automatically it's just one one more little thing But actually orchestrating that through",
    "start": "2839119",
    "end": "2844560"
  },
  {
    "text": "existing systems is very difficult right orchestrating that through serverless and and doing some simple uh some simple",
    "start": "2844560",
    "end": "2851119"
  },
  {
    "text": "IoT stuff to to make sure that you have a smart thermostat Um we've prototyped",
    "start": "2851119",
    "end": "2856960"
  },
  {
    "text": "stuff like that to to show to client executives or client boards in for in 48",
    "start": "2856960",
    "end": "2862240"
  },
  {
    "text": "hours right the the the the chain the this the stuff is gamechanging and I",
    "start": "2862240",
    "end": "2867920"
  },
  {
    "text": "think uh all of us can take that message and and and be the be the heroes in our our particular industries and groups So",
    "start": "2867920",
    "end": "2875119"
  },
  {
    "start": "2874000",
    "end": "2916000"
  },
  {
    "text": "I'm going to skip past a couple things here All right So um thank you all for",
    "start": "2875119",
    "end": "2882800"
  },
  {
    "text": "coming If you have any questions certainly come up and and and chat with us here in a moment Mics on the sides",
    "start": "2882800",
    "end": "2888640"
  },
  {
    "text": "Yeah we got two two two mics here Um please visit us at at booth 829 We have",
    "start": "2888640",
    "end": "2894720"
  },
  {
    "text": "some more demos Um I'm going to hang out there a little while Tom's going to hang out there a little while We have some other experts that are solving some of",
    "start": "2894720",
    "end": "2901040"
  },
  {
    "text": "these issues for clients So if there's any questions we would love to uh we'd love to take them Now",
    "start": "2901040",
    "end": "2908359"
  },
  {
    "text": "lady ladies and gentlemen please exit the open doors Ladies and gentlemen please exit the open doors",
    "start": "2909359",
    "end": "2917680"
  }
]