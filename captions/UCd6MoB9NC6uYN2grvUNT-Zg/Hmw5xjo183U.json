[
  {
    "text": "In this video, you’ll see how to use geocoding and reverse geocoding",
    "start": "0",
    "end": "3295"
  },
  {
    "text": "in Amazon Location Service.",
    "start": "3295",
    "end": "4974"
  },
  {
    "text": "You'll learn how you can convert street\n addresses into geographic coordinates,",
    "start": "5508",
    "end": "9017"
  },
  {
    "text": "convert coordinates into street \naddresses, and embed interactive",
    "start": "9017",
    "end": "12305"
  },
  {
    "text": "maps in your applications.",
    "start": "12305",
    "end": "13805"
  },
  {
    "text": "To get started, let’s navigate \nto Amazon Location Service.",
    "start": "15956",
    "end": "19038"
  },
  {
    "text": "We can use the site’s interactive tool \nto explore the various capabilities of",
    "start": "21082",
    "end": "24471"
  },
  {
    "text": "Amazon Location Service.",
    "start": "24471",
    "end": "25908"
  },
  {
    "text": "This is the default map view.",
    "start": "27000",
    "end": "28547"
  },
  {
    "text": "If we want to, we can embed this \nmap into our own applications.",
    "start": "28883",
    "end": "31800"
  },
  {
    "text": "For now, let’s explore the place \nIndex to experience geocoding.",
    "start": "32273",
    "end": "35614"
  },
  {
    "text": "In the search bar, we can search \nfor a place, such as a city or a more",
    "start": "37430",
    "end": "40529"
  },
  {
    "text": "specific point of interest.",
    "start": "40529",
    "end": "41878"
  },
  {
    "text": "Let’s search for Chicago.",
    "start": "41879",
    "end": "43207"
  },
  {
    "text": "Let’s select the city itself.",
    "start": "44183",
    "end": "45571"
  },
  {
    "text": "Here we can see Chicago on the map, as well \nas the geographic coordinates for the city.",
    "start": "46578",
    "end": "50502"
  },
  {
    "text": "We can zoom in and zoom out by \nhovering over the map and scrolling,",
    "start": "51555",
    "end": "54460"
  },
  {
    "text": "or by using the buttons \nin the lower right corner.",
    "start": "54460",
    "end": "56596"
  },
  {
    "text": "Below the map, we can review the \nAPI request and response syntax.",
    "start": "58747",
    "end": "62340"
  },
  {
    "text": "Here’s the request that was sent \nwhen we searched for Chicago.",
    "start": "63423",
    "end": "65849"
  },
  {
    "text": "And here’s the response to that request.",
    "start": "67222",
    "end": "69103"
  },
  {
    "text": "We can use this drop-down list to \nreturn to previous API requests and",
    "start": "69545",
    "end": "72882"
  },
  {
    "text": "responses as long as we stay in \nthis mode of the interactive tool.",
    "start": "72883",
    "end": "75852"
  },
  {
    "text": "Since we’ve completed just one \nsearch so far, there’s only one option.",
    "start": "76874",
    "end": "79849"
  },
  {
    "text": "Next, let’s search for a \nspecific point of interest.",
    "start": "80703",
    "end": "83083"
  },
  {
    "text": "This time let’s look for Chicago \nO’Hare International Airport.",
    "start": "84075",
    "end": "87189"
  },
  {
    "text": "Again, we’re taken to \nthe location on the map.",
    "start": "89387",
    "end": "91432"
  },
  {
    "text": "In this example, however, the map \nis marked with numbered pins.",
    "start": "91920",
    "end": "94959"
  },
  {
    "text": "We can click individual pins to view details \nabout specific locations within the airport.",
    "start": "95401",
    "end": "99490"
  },
  {
    "text": "Let’s look at the API request \nand response syntax.",
    "start": "100436",
    "end": "103240"
  },
  {
    "text": "Right now, it still shows our first request.",
    "start": "104141",
    "end": "106289"
  },
  {
    "text": "Let’s select the request we just made.",
    "start": "106289",
    "end": "108000"
  },
  {
    "text": "We can copy this API request to use as a \nguide when we start building our applications.",
    "start": "110334",
    "end": "114423"
  },
  {
    "text": "We can copy the response syntax as well.",
    "start": "115324",
    "end": "117368"
  },
  {
    "text": "Since there were multiple locations\nshown on the airport map, we can",
    "start": "118360",
    "end": "121268"
  },
  {
    "text": "see details for each of those \nlocations in the Response syntax.",
    "start": "121268",
    "end": "124354"
  },
  {
    "text": "Let’s go back to the first search \nresult and view the documentation.",
    "start": "125774",
    "end": "128644"
  },
  {
    "text": "Here we can see the API reference \nfor the search action we completed.",
    "start": "132214",
    "end": "135279"
  },
  {
    "text": "We can also access this documentation \nby navigating to the Amazon Location",
    "start": "136255",
    "end": "139733"
  },
  {
    "text": "Service Getting Started page.",
    "start": "139733",
    "end": "141490"
  },
  {
    "text": "The link to this page is provided \nin the description for this video.",
    "start": "142024",
    "end": "144837"
  },
  {
    "text": "Next, let’s review an example of reverse \ngeocoding at work in a back-end application.",
    "start": "145844",
    "end": "150103"
  },
  {
    "text": "The use case for this application \nis to notify a driver if a package is",
    "start": "152224",
    "end": "155363"
  },
  {
    "text": "delivered to the wrong address.",
    "start": "155363",
    "end": "156781"
  },
  {
    "text": "The driver uses a mobile app to \nsend location coordinates to an",
    "start": "157559",
    "end": "160433"
  },
  {
    "text": "AWS Lambda function.",
    "start": "160433",
    "end": "161844"
  },
  {
    "text": "If the coordinates don’t match what’s \nin the Amazon Location place index,",
    "start": "162393",
    "end": "165808"
  },
  {
    "text": "the Lambda uses Amazon \nSNS to notify the driver.",
    "start": "165808",
    "end": "168859"
  },
  {
    "text": "We’ll go over a simple Amazon Lambda\nfunction to demonstrate how to use",
    "start": "169485",
    "end": "172488"
  },
  {
    "text": "the API for the Amazon \nLocation Place index.",
    "start": "172488",
    "end": "175256"
  },
  {
    "text": "Let’s go back to Amazon Location Service.",
    "start": "175775",
    "end": "177801"
  },
  {
    "text": "Let’s create a place index.",
    "start": "178610",
    "end": "180120"
  },
  {
    "text": "We’ll call it deliveryPlace.",
    "start": "182988",
    "end": "184632"
  },
  {
    "text": "We’ll retain the default data \nprovider and storage settings.",
    "start": "187012",
    "end": "189771"
  },
  {
    "text": "Now that we’ve created the place index, \nwe’ll copy this ARN to the clipboard.",
    "start": "193556",
    "end": "197074"
  },
  {
    "text": "Next, we’ll open the Lambda \nservice and create a function.",
    "start": "198081",
    "end": "200579"
  },
  {
    "text": "We’ll call it location-geocode.",
    "start": "204776",
    "end": "206635"
  },
  {
    "text": "For the runtime, we’ll select Python 3.9.",
    "start": "208786",
    "end": "211407"
  },
  {
    "text": "We’ll leave the rest of \nthe options as they are.",
    "start": "213665",
    "end": "215601"
  },
  {
    "text": "Next, let’s make sure that the function \npermissions are configured correctly.",
    "start": "218348",
    "end": "221715"
  },
  {
    "text": "The execution role has been created,",
    "start": "224782",
    "end": "226446"
  },
  {
    "text": "but it cannot currently access the \nfunctions that we’d like to use.",
    "start": "226446",
    "end": "229162"
  },
  {
    "text": "Let’s drill down into the role to add \nthose permissions in AWS Identity",
    "start": "229696",
    "end": "232936"
  },
  {
    "text": "and Access Management (IAM).",
    "start": "232936",
    "end": "234843"
  },
  {
    "text": "Let’s create a new inline policy.",
    "start": "235804",
    "end": "237539"
  },
  {
    "text": "We’ll edit the JSON code.",
    "start": "240712",
    "end": "242130"
  },
  {
    "text": "Let’s paste in the \ndeliveryPlace index we created.",
    "start": "243412",
    "end": "245925"
  },
  {
    "text": "Next, we’ll review the policy.",
    "start": "246840",
    "end": "248288"
  },
  {
    "text": "Let’s name the policy and create it.",
    "start": "249921",
    "end": "251614"
  },
  {
    "text": "Now we have a policy allowing the \nLambda function to perform the",
    "start": "260829",
    "end": "263349"
  },
  {
    "text": "action SearchPlaceIndexForText.",
    "start": "263349",
    "end": "265497"
  },
  {
    "text": "Next, let’s take a look at the \ncode in the Lambda function.",
    "start": "266336",
    "end": "268867"
  },
  {
    "text": "Let’s replace this code.",
    "start": "273291",
    "end": "274594"
  },
  {
    "text": "Again, we’ll use the \ndeliveryPlace index we created.",
    "start": "276730",
    "end": "279375"
  },
  {
    "text": "The action search_place_index_for_text \nwill take a location as a parameter",
    "start": "280321",
    "end": "284287"
  },
  {
    "text": "and return the relevant \ngeometry point coordinates.",
    "start": "284287",
    "end": "286754"
  },
  {
    "text": "Let’s deploy this code.",
    "start": "287776",
    "end": "288972"
  },
  {
    "text": "Instead of passing the parameters \nprogrammatically, for this example,",
    "start": "290436",
    "end": "293586"
  },
  {
    "text": "we’ll use the test feature to \ninvoke our Lambda function.",
    "start": "293586",
    "end": "295920"
  },
  {
    "text": "Since this is our first time \ntesting this Lambda function,",
    "start": "297675",
    "end": "300108"
  },
  {
    "text": "we’ll have to create a new event.",
    "start": "300109",
    "end": "301456"
  },
  {
    "text": "Let’s call it testEvent.",
    "start": "301623",
    "end": "302935"
  },
  {
    "text": "Let’s enter an address \nto use as a parameter.",
    "start": "306276",
    "end": "308431"
  },
  {
    "text": "Let’s run the test.",
    "start": "313176",
    "end": "314218"
  },
  {
    "text": "The response should be similar to what\nwe would see using the interactive tool.",
    "start": "315850",
    "end": "319097"
  },
  {
    "text": "Let’s check the JSON code.",
    "start": "319372",
    "end": "320760"
  },
  {
    "text": "Here we can see the address \nthat was passed as the parameter,",
    "start": "322454",
    "end": "325028"
  },
  {
    "text": "as well as the Point coordinates \nthat were returned from it.",
    "start": "325028",
    "end": "327347"
  },
  {
    "text": "This is an example of geocoding.",
    "start": "327744",
    "end": "329399"
  },
  {
    "text": "Reverse geocoding is very similar.",
    "start": "329704",
    "end": "331486"
  },
  {
    "text": "Let’s go back and create \na new Lambda function.",
    "start": "331608",
    "end": "333594"
  },
  {
    "text": "This time we’ll call the function \nlocation-reverse-geocode.",
    "start": "338248",
    "end": "341155"
  },
  {
    "text": "We’ll use Python 3.9 as the runtime again \nand retain all the other default settings.",
    "start": "342178",
    "end": "346576"
  },
  {
    "text": "Next, we’ll add the same inline permission\npolicy we added to the previous function.",
    "start": "350482",
    "end": "354247"
  },
  {
    "text": "Now we’ll go back and replace \nthe code for the function.",
    "start": "374203",
    "end": "376524"
  },
  {
    "text": "Notice that the index \nname is still deliveryPlace.",
    "start": "381208",
    "end": "383776"
  },
  {
    "text": "But for the response, instead of\nsearch_place_index_for_text,",
    "start": "384661",
    "end": "388356"
  },
  {
    "text": "we have search_place_index_for_position.",
    "start": "388356",
    "end": "390569"
  },
  {
    "text": "Let’s deploy this code and test it.",
    "start": "391515",
    "end": "393163"
  },
  {
    "text": "This time, we’ll enter \ncoordinates as the parameters.",
    "start": "399000",
    "end": "401435"
  },
  {
    "text": "We want the function to return \nthe corresponding address.",
    "start": "401878",
    "end": "404337"
  },
  {
    "text": "Let’s save the function and run the test.",
    "start": "405299",
    "end": "407100"
  },
  {
    "text": "Let’s take a look at the response, \nwhich should include the full address.",
    "start": "410258",
    "end": "413344"
  },
  {
    "text": "We’ve now seen how to use a \nLambda function to perform either",
    "start": "415312",
    "end": "417717"
  },
  {
    "text": "geocoding or reverse geocoding.",
    "start": "417717",
    "end": "419541"
  },
  {
    "text": "Next, we’ll see how to create a web \napplication that includes an interactive",
    "start": "420090",
    "end": "423273"
  },
  {
    "text": "map based on the lambda \nfunctions we saw earlier.",
    "start": "423273",
    "end": "425817"
  },
  {
    "text": "For this simple web application \nwe'll use HTML, CSS, and JavaScript.",
    "start": "426397",
    "end": "430642"
  },
  {
    "text": "To get started, let’s create a \nmap in Amazon Location Service.",
    "start": "432672",
    "end": "435834"
  },
  {
    "text": "For the purposes of this example, \nwe’ll use the Esri Street map.",
    "start": "443844",
    "end": "447000"
  },
  {
    "text": "Rather than creating a new place index,",
    "start": "452263",
    "end": "454154"
  },
  {
    "text": "we’ll use the deliveryPlace \nindex we created earlier.",
    "start": "454154",
    "end": "457044"
  },
  {
    "text": "Even though we’re planning to have this\nmap be accessible without logging in,",
    "start": "457793",
    "end": "460883"
  },
  {
    "text": "the Amazon Location Service API \nrequires authentication to use it.",
    "start": "460883",
    "end": "464574"
  },
  {
    "text": "To provide that capability, \nwe’ll use Amazon Cognito.",
    "start": "464819",
    "end": "467672"
  },
  {
    "text": "Let’s create an identity pool.",
    "start": "470830",
    "end": "472240"
  },
  {
    "text": "We’ll call this identity pool deliveryApp.",
    "start": "473064",
    "end": "475352"
  },
  {
    "text": "Let’s enable access to \nunauthenticated identities.",
    "start": "476253",
    "end": "478979"
  },
  {
    "text": "Next, we’ll create the pool.",
    "start": "479864",
    "end": "481161"
  },
  {
    "text": "The next step is to \nidentify the IAM role to use.",
    "start": "482924",
    "end": "485666"
  },
  {
    "text": "In this case, we’ll create a new IAM role\nand let Cognito take care of it for us.",
    "start": "485926",
    "end": "489867"
  },
  {
    "text": "As you can see, the roles \ngenerated by Cognito incorporate",
    "start": "490844",
    "end": "493395"
  },
  {
    "text": "the deliveryApp name we provided.",
    "start": "493395",
    "end": "495266"
  },
  {
    "text": "Cognito will create two roles:",
    "start": "495723",
    "end": "497475"
  },
  {
    "text": "one for authenticated identities and \none for unauthenticated identities.",
    "start": "497475",
    "end": "501487"
  },
  {
    "text": "Next, let’s navigate to IAM to make \nsure the roles Cognito just created",
    "start": "504951",
    "end": "508315"
  },
  {
    "text": "have the proper permissions.",
    "start": "508315",
    "end": "509807"
  },
  {
    "text": "Here are the two Cognito \nroles we just created.",
    "start": "514704",
    "end": "516828"
  },
  {
    "text": "Let’s open the unauthenticated role.",
    "start": "517316",
    "end": "519008"
  },
  {
    "text": "Let’s give it another permission \nand create a new inline policy.",
    "start": "522793",
    "end": "525740"
  },
  {
    "text": "We’ll paste in JSON code that will allow\nus to access the map and search the",
    "start": "526488",
    "end": "529871"
  },
  {
    "text": "place index we created earlier.",
    "start": "529871",
    "end": "531550"
  },
  {
    "text": "We’ll name the policy \nlocation and create it.",
    "start": "535014",
    "end": "537293"
  },
  {
    "text": "With these permissions, unauthenticated \nidentities should have appropriate access.",
    "start": "545760",
    "end": "549675"
  },
  {
    "text": "Now that we’ve completed the setup,\nwe can start creating the web application.",
    "start": "550438",
    "end": "553769"
  },
  {
    "text": "In this empty Web-App folder in our \nIDE, we’ll create an index.html file.",
    "start": "555600",
    "end": "560290"
  },
  {
    "text": "Next, we’ll paste in a basic HTML \ntemplate that has a pointer to a",
    "start": "561237",
    "end": "564231"
  },
  {
    "text": "CSS file we’ll create in a moment.",
    "start": "564231",
    "end": "566260"
  },
  {
    "text": "This template contains two placeholders:",
    "start": "567175",
    "end": "569093"
  },
  {
    "text": "one for the map, and one \nfor the JSON response.",
    "start": "569093",
    "end": "571480"
  },
  {
    "text": "Now let’s create the CSS file for styling.",
    "start": "572380",
    "end": "574546"
  },
  {
    "text": "We’ll call it main.css.",
    "start": "575004",
    "end": "576845"
  },
  {
    "text": "Next, we’ll paste in code to add \nbasic styling to our web application.",
    "start": "577852",
    "end": "581224"
  },
  {
    "text": "Let’s preview the web app in a browser.",
    "start": "582185",
    "end": "584046"
  },
  {
    "text": "So far, we have only \nplaceholders and some styling.",
    "start": "586472",
    "end": "589069"
  },
  {
    "text": "Next, we’ll add the interactive \nmap to the application.",
    "start": "591449",
    "end": "594000"
  },
  {
    "text": "Let’s create a file named main.js \nin our web application folder.",
    "start": "594595",
    "end": "598225"
  },
  {
    "text": "Next, we’ll paste in the \ncode for this application.",
    "start": "599233",
    "end": "601358"
  },
  {
    "text": "This code will set up the Amazon \nLocation resources and then",
    "start": "602335",
    "end": "605003"
  },
  {
    "text": "configure the map library.",
    "start": "605003",
    "end": "606451"
  },
  {
    "text": "This application will use an amplify \nhelper function to sign requests to AWS.",
    "start": "607474",
    "end": "611928"
  },
  {
    "text": "Next, we need to go to Cognito \nto copy the identity pool ID.",
    "start": "613362",
    "end": "616709"
  },
  {
    "text": "First, we’ll set our platform, \nwhich in this case is JavaScript.",
    "start": "618905",
    "end": "621946"
  },
  {
    "text": "Now we can see the \nidentity pool ID and copy it.",
    "start": "622571",
    "end": "625149"
  },
  {
    "text": "Returning to our main.js \nfile, we’ll paste the ID here.",
    "start": "627591",
    "end": "630836"
  },
  {
    "text": "We’ll also update the mapName to \nreflect the name of the map we created.",
    "start": "631737",
    "end": "635032"
  },
  {
    "text": "Next we’ll change the \nplacesName to deliveryPlace.",
    "start": "636084",
    "end": "638743"
  },
  {
    "text": "Here we can see where the code specifies \nthe map we saw earlier in the HTML,",
    "start": "642000",
    "end": "645773"
  },
  {
    "text": "as well as the initial map center point, \nwhich in this case points to Washington, DC.",
    "start": "645773",
    "end": "649866"
  },
  {
    "text": "Next, let’s return to the index.html \nfile to add the reference to main.js.",
    "start": "650919",
    "end": "655997"
  },
  {
    "text": "Under Styles, we’ll add the reference \nto the map library stylesheet.",
    "start": "656882",
    "end": "660184"
  },
  {
    "text": "Under the footer, we’ll add \nreferences to the JavaScript",
    "start": "661206",
    "end": "663598"
  },
  {
    "text": "dependencies and our main.js file.",
    "start": "663598",
    "end": "666161"
  },
  {
    "text": "Now we’ll go back to our browser \nand refresh our web application.",
    "start": "667153",
    "end": "669896"
  },
  {
    "text": "The map is now displayed \nin our application.",
    "start": "672383",
    "end": "674365"
  },
  {
    "text": "Next, we’ll add functionality so that\nclicking a location on the map will",
    "start": "675098",
    "end": "677923"
  },
  {
    "text": "show the JSON response.",
    "start": "677923",
    "end": "679509"
  },
  {
    "text": "Let’s go back to the main.js \ncode to make that change.",
    "start": "679951",
    "end": "682635"
  },
  {
    "text": "We’ll add the code to the main function.",
    "start": "684237",
    "end": "685813"
  },
  {
    "text": "Let’s return to our application in \nthe browser and refresh the page.",
    "start": "687461",
    "end": "690509"
  },
  {
    "text": "Let’s click on the Ronald Reagan Building.",
    "start": "693225",
    "end": "694998"
  },
  {
    "text": "As you can see, clicking on \nthe map displays the address,",
    "start": "696128",
    "end": "698737"
  },
  {
    "text": "as well as showing the JSON response \nwith the coordinates on the right.",
    "start": "698737",
    "end": "701675"
  },
  {
    "text": "The final thing we want to do \nis add a push-pin when we click.",
    "start": "702804",
    "end": "705383"
  },
  {
    "text": "Let’s go back to the main.js code.",
    "start": "705887",
    "end": "707817"
  },
  {
    "text": "First, we need to make a \nvariable to hold the marker.",
    "start": "709983",
    "end": "712289"
  },
  {
    "text": "We’ll do that right after \nthis constant location.",
    "start": "712808",
    "end": "714920"
  },
  {
    "text": "Next, we’ll add some code to the click event \nright before we set up the parameter.",
    "start": "716018",
    "end": "719445"
  },
  {
    "text": "This will remove any existing markers \nfrom the map and then add the new",
    "start": "720528",
    "end": "723529"
  },
  {
    "text": "marker wherever the user clicked.",
    "start": "723529",
    "end": "725331"
  },
  {
    "text": "Let’s save and refresh our \napplication in the browser.",
    "start": "725819",
    "end": "727993"
  },
  {
    "text": "Let’s click on the Museum \nof American History.",
    "start": "729854",
    "end": "731918"
  },
  {
    "text": "As, you can see, the web application \nadds the marker, tells you the location",
    "start": "733550",
    "end": "736713"
  },
  {
    "text": "and address, and shows \nthe JSON response.",
    "start": "736713",
    "end": "739435"
  },
  {
    "text": "Let’s try clicking the National \nWorld War II Memorial.",
    "start": "740350",
    "end": "742806"
  },
  {
    "text": "We can see the marker, the \nlocation, and the JSON response.",
    "start": "744485",
    "end": "747404"
  },
  {
    "text": "You’ve just seen how to use geocoding and \nreverse geocoding in Amazon Location Service.",
    "start": "750211",
    "end": "754525"
  },
  {
    "text": "You can learn more about this topic in\nthe description and links for this video.",
    "start": "755517",
    "end": "758489"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "758779",
    "end": "760748"
  }
]