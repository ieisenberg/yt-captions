[
  {
    "text": "good afternoon everyone can everyone hear me okay in the back",
    "start": "1639",
    "end": "7010"
  },
  {
    "text": "great well welcome to Wednesday of AWS free invent this is sec three eight nine",
    "start": "7010",
    "end": "13410"
  },
  {
    "text": "I'd like to say thanks to AWS for having me out today I first gave this talk at",
    "start": "13410",
    "end": "19800"
  },
  {
    "text": "blackhat USA this year detecting credential compromise in aw us just is anyone out here saw my talking block in",
    "start": "19800",
    "end": "26310"
  },
  {
    "text": "a couple of you great I don't like to give the same talk twice so the those",
    "start": "26310",
    "end": "32488"
  },
  {
    "text": "that you of you that saw it at blackhat you're gonna see some of the same material but there's a bonus at the end",
    "start": "32489",
    "end": "37500"
  },
  {
    "text": "and that today we're not only going to talk about how to real-time detect credential compromising eight of us but",
    "start": "37500",
    "end": "43140"
  },
  {
    "text": "then we're gonna switch gears a little bit and talk about how can we prevent that compromise from the beginning so if",
    "start": "43140",
    "end": "48780"
  },
  {
    "text": "you believe you can think about as I talked about detection on whether you believe me or not on whether you can actually prevent compromise prevent a",
    "start": "48780",
    "end": "54690"
  },
  {
    "text": "credential from actually being exfilled from your instance and being used but",
    "start": "54690",
    "end": "60270"
  },
  {
    "text": "that's what I'm here to talk to you two about today my name is will Benson I am a security engineer at Netflix the team",
    "start": "60270",
    "end": "67350"
  },
  {
    "text": "I'm a part of is called the security tools and operations team who has short hand is sec ops we're not like your standard security",
    "start": "67350",
    "end": "73229"
  },
  {
    "text": "operations team like most companies we do Incident Response but only when it relates to AWS my team is a team of six",
    "start": "73229",
    "end": "80250"
  },
  {
    "text": "and we're responsible for the AWS infrastructure security at Netflix so",
    "start": "80250",
    "end": "85740"
  },
  {
    "text": "you think about it our large scale our small team is responsible for the AWS level security primitives and I've spent",
    "start": "85740",
    "end": "92460"
  },
  {
    "text": "the last six to twelve months digging deep into cloud trail and I am and",
    "start": "92460",
    "end": "97740"
  },
  {
    "text": "figuring out how can we solve these problems so today we're gonna focus in the beginning about detecting compromise",
    "start": "97740",
    "end": "103409"
  },
  {
    "text": "and how to do that quickly and most importantly the detecting compromise from your AWS and outside of your AWS",
    "start": "103409",
    "end": "110670"
  },
  {
    "text": "infrastructure so we'll talk about how if an attacker took a key and used it from a different a situ instance how we",
    "start": "110670",
    "end": "115770"
  },
  {
    "text": "can actually still see that and then we're gonna flip beers and talk about how to prevent it in general so I want",
    "start": "115770",
    "end": "123450"
  },
  {
    "text": "to first kind of set this light and say this is not a machine learning talk I've been corrected and said actually we'll",
    "start": "123450",
    "end": "129750"
  },
  {
    "text": "this is machine learning it's unsupervised the machine does it but I like to think it's not machine",
    "start": "129750",
    "end": "135630"
  },
  {
    "text": "learning I'm not doing these complex queries I think it's pretty straightforward and pretty novel that when I first thought of it I thought wow",
    "start": "135630",
    "end": "142500"
  },
  {
    "text": "someone has to be doing this before and it proved to be quite quite powerful so",
    "start": "142500",
    "end": "147930"
  },
  {
    "text": "my approach has always been why use machine learning or like complex queries when you can take this simplistic approach and just approach it",
    "start": "147930",
    "end": "154290"
  },
  {
    "text": "straightforward so today is going to be a very simple talk about how to keep track of temporary tokens in your",
    "start": "154290",
    "end": "160590"
  },
  {
    "text": "environment and then detect when they're being used outside of your AWS accounts so the scope of this talk is the",
    "start": "160590",
    "end": "167520"
  },
  {
    "text": "compromise a DBS credentials outside of your environment and it's important here that we emphasize the word your when I",
    "start": "167520",
    "end": "174480"
  },
  {
    "text": "say your I mean your AWS infrastructure not 80 of us in general and I think this is the biggest differentiator versus in",
    "start": "174480",
    "end": "181200"
  },
  {
    "text": "this method versus what you might find in a TBS guard duty is I am going to show you how to detect compromised",
    "start": "181200",
    "end": "186750"
  },
  {
    "text": "outside of you or any of this infrastructure even if you took it to your rogue instance or the attacker took",
    "start": "186750",
    "end": "192900"
  },
  {
    "text": "it to their own ec2 instance so if you're familiar the AWS security token service is what is being used behind the",
    "start": "192900",
    "end": "200250"
  },
  {
    "text": "scenes to provide credentials to your ec2 server in AWS they're providing you",
    "start": "200250",
    "end": "205680"
  },
  {
    "text": "the temporary credentials 1 to 6 hours lived and constantly rotating those for you on the backend in the metadata",
    "start": "205680",
    "end": "211620"
  },
  {
    "text": "service you might even use STS for providing developer credentials as well depending on if you're using I am users",
    "start": "211620",
    "end": "218520"
  },
  {
    "text": "or not the methods I'm going to talk about today can be used to easy to temporary credentials and expanded to",
    "start": "218520",
    "end": "225690"
  },
  {
    "text": "your container platforms or any other method that you want or any other credential method that you actually want",
    "start": "225690",
    "end": "230790"
  },
  {
    "text": "to apply it to it's a pretty simplistic approach and hopefully you guys will find benefit in it today just a quick",
    "start": "230790",
    "end": "237720"
  },
  {
    "text": "show of hands how many people in the crowd are security practitioners at your company it's quite a few any managers",
    "start": "237720",
    "end": "244160"
  },
  {
    "text": "it's ok awesome so this should be at Ohio high enough level and deep enough",
    "start": "244160",
    "end": "249810"
  },
  {
    "text": "level for everyone to get something out of it today so let's dig in the problem we're trying to solve today is detecting",
    "start": "249810",
    "end": "255930"
  },
  {
    "text": "the credential compromised outside of your environment when I first started working on this I didn't want to know if",
    "start": "255930",
    "end": "262380"
  },
  {
    "text": "it's outside of AWS yes I want to know if my developers are pulling credentials down to the lab but I really wanted to know is that",
    "start": "262380",
    "end": "268990"
  },
  {
    "text": "nation-state or is that bug bounty researcher pulling credentials and actually doing something on their ec2",
    "start": "268990",
    "end": "274689"
  },
  {
    "text": "server and so that's what I set out to try to solve and I believe we've actually done this when I looked at who",
    "start": "274689",
    "end": "281319"
  },
  {
    "text": "was doing this well I scoured the internet trying to figure out I was is there anything open-source that I can take advantage of we'd been working with",
    "start": "281319",
    "end": "288370"
  },
  {
    "text": "AWS guard duty for a while and I challenged him to solve this problem you know AWS you're at this source please",
    "start": "288370",
    "end": "295389"
  },
  {
    "text": "help me with this and I didn't really see anything and I think now there are applications coming out using this",
    "start": "295389",
    "end": "301659"
  },
  {
    "text": "method so soon you'll see more and more things actually solving it this way it's really hard for us at least at Netflix",
    "start": "301659",
    "end": "308710"
  },
  {
    "text": "scale to solve this problem by just looking at IP addresses in our environment if if you're familiar with",
    "start": "308710",
    "end": "315610"
  },
  {
    "text": "the Netflix environment we're hundreds of thousands of servers across three regions in many many AWS accounts for us",
    "start": "315610",
    "end": "322479"
  },
  {
    "text": "to understand our production environment if we were just to pull and describe our environment in production in three",
    "start": "322479",
    "end": "328300"
  },
  {
    "text": "regions it would take us over an hour to get that data back from a describe instance call we have to pay gen8 we're",
    "start": "328300",
    "end": "334719"
  },
  {
    "text": "rate limited so for us to keep track of the IPS and in our environment with especially with how dynamic our",
    "start": "334719",
    "end": "340419"
  },
  {
    "text": "infrastructure is sometimes we won't actually see a server that might have been in our environment or not based on",
    "start": "340419",
    "end": "345879"
  },
  {
    "text": "when the next polling cycle happened so for us to have a up-to-date list of IPs is a very difficult thing to do in",
    "start": "345879",
    "end": "352539"
  },
  {
    "text": "appalling nature now we've changed some of our architecture and are moving towards more of an event-driven",
    "start": "352539",
    "end": "358659"
  },
  {
    "text": "architecture but as I was waiting for cloud networking support on this to get an up-to-date and historic information",
    "start": "358659",
    "end": "365229"
  },
  {
    "text": "about IPS in our environment I came up with a solution that I'm here to present to you today when I look at the tools",
    "start": "365229",
    "end": "372069"
  },
  {
    "text": "that I can use to my advantage I'm sure there's lots and lots of different things that you can use but the main",
    "start": "372069",
    "end": "377080"
  },
  {
    "text": "source of truth that we're going to use today is AWS cloud trail we're going to analyze and detect compromise using",
    "start": "377080",
    "end": "383800"
  },
  {
    "text": "nothing but cloud trail and that gives us two powerful benefits you can use this method historically to see if in",
    "start": "383800",
    "end": "390819"
  },
  {
    "text": "the last 12 months have we potentially been compromised or you can use it in real time and as we are doing things in",
    "start": "390819",
    "end": "398440"
  },
  {
    "text": "our environment our these credential calls happening outside of our infrastructure",
    "start": "398440",
    "end": "403590"
  },
  {
    "text": "so anyways cloud shell just to recap it provides the event history in your AWS account including actions taken through",
    "start": "403590",
    "end": "410530"
  },
  {
    "text": "the console of the COI SDKs and other services right you can sign the URLs",
    "start": "410530",
    "end": "415629"
  },
  {
    "text": "pass those off and see that someone downloaded it from Chrome from Firefox it's very very powerful depending on how",
    "start": "415629",
    "end": "422650"
  },
  {
    "text": "you have it set up there's really no excuse for anyone these days to not have cloud trail enabled because by defaults",
    "start": "422650",
    "end": "429189"
  },
  {
    "text": "I think it was six or eight months ago Amazon actually enabled 90 days of Quatro history available in the console",
    "start": "429189",
    "end": "434979"
  },
  {
    "text": "for you your first cloud row is free of charge the only thing you're paying for is storage so if you think about the",
    "start": "434979",
    "end": "442270"
  },
  {
    "text": "benefit of this audit trail for security as well as compliance and any other factors that you want to add on top it's",
    "start": "442270",
    "end": "449080"
  },
  {
    "text": "pretty cheap for Amazon to provide this for free as I mentioned you can have 90",
    "start": "449080",
    "end": "455440"
  },
  {
    "text": "day history in the console I think that's available via bodo or SDK COI or you can actually just go look in the",
    "start": "455440",
    "end": "461949"
  },
  {
    "text": "console and search there if you are having it delivered via the simple storage service s3 you might see files",
    "start": "461949",
    "end": "469599"
  },
  {
    "text": "being delivered in this format this naming format we'll talk about some of",
    "start": "469599",
    "end": "474879"
  },
  {
    "text": "the ways that we actually have clouds well delivered in our accounts you can actually have cloud robe delivered over",
    "start": "474879",
    "end": "480520"
  },
  {
    "text": "cloud watch logs which is very powerful because cloud watch logs is a real-time clock I'll stream verse s3 being",
    "start": "480520",
    "end": "487690"
  },
  {
    "text": "buffered and so if you're having s3 delivery you're gonna get a 15 to 20 minute delay and then multiple files",
    "start": "487690",
    "end": "493629"
  },
  {
    "text": "being delivered so you might end up in this hybrid approach of how you actually process cloud show with this method but",
    "start": "493629",
    "end": "499240"
  },
  {
    "text": "overall you should have a pretty decent coverage once you understand cloud trail what's covered what's not and we'll talk",
    "start": "499240",
    "end": "504879"
  },
  {
    "text": "about some tooling that we've built so they actually help us understand what is actually being logged in cloud trail now",
    "start": "504879",
    "end": "511060"
  },
  {
    "text": "if we look at a record we're gonna analyze a couple pieces of this the user",
    "start": "511060",
    "end": "516370"
  },
  {
    "text": "identity is very important here and when we look at user identity in this",
    "start": "516370",
    "end": "521729"
  },
  {
    "text": "presentation we're going to be looking at an assumed role identity we're going to be looking at unique session tokens",
    "start": "521729",
    "end": "527890"
  },
  {
    "text": "for every server in your environment this method will not only provide you information that your credential has",
    "start": "527890",
    "end": "533759"
  },
  {
    "text": "been exfilled or potentially compromised but it's going to tell you the actual ec2 server it was compromised from and",
    "start": "533759",
    "end": "539759"
  },
  {
    "text": "we'll talk about why it does that event source and name are pretty powerful as",
    "start": "539759",
    "end": "546060"
  },
  {
    "text": "well if a cringe was compromised what action was actually made into what service with an Amazon and this is",
    "start": "546060",
    "end": "553259"
  },
  {
    "text": "actually what we're gonna key of of to start the process or that machine learning process as well",
    "start": "553259",
    "end": "559220"
  },
  {
    "text": "source IP is going to be the big dollar picture here we're going to lock to",
    "start": "559220",
    "end": "565709"
  },
  {
    "text": "source IPS and then alert on differences from what we see Claude roll also",
    "start": "565709",
    "end": "571980"
  },
  {
    "text": "provides you the request parameters and response elements and it varies depending on which API call you actually",
    "start": "571980",
    "end": "577470"
  },
  {
    "text": "have made what data actually comes into cloud trail but the pieces that I covered here are the main pieces that",
    "start": "577470",
    "end": "584069"
  },
  {
    "text": "you'll see every time now we typically setup cloud shell to be centrally",
    "start": "584069",
    "end": "590610"
  },
  {
    "text": "delivered into an s3 bucket so we have many many accounts we set up a single trail in every account that by default",
    "start": "590610",
    "end": "597240"
  },
  {
    "text": "delivers into a centralized cloud trail bucket that then is able to invoke and",
    "start": "597240",
    "end": "602610"
  },
  {
    "text": "kick off many different pipelines within our environment now we do this for multiple reasons we can control who has",
    "start": "602610",
    "end": "608880"
  },
  {
    "text": "access to cloud shell this way but it also makes it very easy to orchestrate the security measures and security",
    "start": "608880",
    "end": "615209"
  },
  {
    "text": "tooling that we have that's triggered off cloud child delivery so this is one of the recommended approaches that we",
    "start": "615209",
    "end": "621089"
  },
  {
    "text": "always preach about is centralize your cloud row and fork off from there so",
    "start": "621089",
    "end": "626819"
  },
  {
    "text": "that you can keep the data source secure as well as keep the orchestration",
    "start": "626819",
    "end": "632279"
  },
  {
    "text": "of the number of pieces of infrastructure that process that cultural to a minimum so when we first",
    "start": "632279",
    "end": "638880"
  },
  {
    "text": "looked at this we wanted to understand how can we actually detect compromise and I came up with some requirements and",
    "start": "638880",
    "end": "645360"
  },
  {
    "text": "I was working with our cloud network team and said hey I want to know all IP is in our environment across all",
    "start": "645360",
    "end": "650910"
  },
  {
    "text": "accounts all regions for the last hour I want to be able to ask the question did",
    "start": "650910",
    "end": "656370"
  },
  {
    "text": "we have this IP at this time and you tell me yes or no if you think of the scale and the fact that we're so dynamic",
    "start": "656370",
    "end": "663029"
  },
  {
    "text": "that we might miss infrastructure coming up and going before we actually get to that problem or to that described call there was a",
    "start": "663029",
    "end": "670389"
  },
  {
    "text": "problem for us we might not actually have every IP in our environment and",
    "start": "670389",
    "end": "675730"
  },
  {
    "text": "this might be very noisy depending on the number of brief calls that we've had we've had abuse complaints come in from",
    "start": "675730",
    "end": "682240"
  },
  {
    "text": "Amazon where we had the IP for literally four minutes if you look at our history",
    "start": "682240",
    "end": "687279"
  },
  {
    "text": "it's pretty crazy to think of how dynamic our environment is so this was a hard requirement that the cloud network",
    "start": "687279",
    "end": "693220"
  },
  {
    "text": "team has been working to solve for us if we know all IPS for the last hour we can",
    "start": "693220",
    "end": "699040"
  },
  {
    "text": "do this histogram sliding window analysis and say at the time of this cultural event did we have this IP if we",
    "start": "699040",
    "end": "707319"
  },
  {
    "text": "had the IP then we keep going and analyzing and if we did not have the IP then we alert and we can further enrich",
    "start": "707319",
    "end": "713889"
  },
  {
    "text": "the event and see what actually happened at that time was it a compromise or was",
    "start": "713889",
    "end": "719290"
  },
  {
    "text": "it a developer misusing a credential as I mentioned we're very very large we",
    "start": "719290",
    "end": "726550"
  },
  {
    "text": "have to pay gen8 almost every call we make an Amazon the console doesn't work for some of the services in the past as",
    "start": "726550",
    "end": "733029"
  },
  {
    "text": "if you're familiar with our tool spinnaker the birth of spinnaker was because the console didn't really work for us in the beginning we patron ate",
    "start": "733029",
    "end": "740350"
  },
  {
    "text": "all the calls and when we're paginating through the calls to describe our environment we're constantly rate",
    "start": "740350",
    "end": "746170"
  },
  {
    "text": "limited from Amazon so it's this compounding effect of not only do we have to patron ate through because we",
    "start": "746170",
    "end": "751420"
  },
  {
    "text": "don't get all the data at once but then we're getting a rate limiting and we're fighting our own rate limiting because we're doing these describes in",
    "start": "751420",
    "end": "757420"
  },
  {
    "text": "production environments that are using AWS native resources as well so lots of lots of factors working against us if we",
    "start": "757420",
    "end": "764559"
  },
  {
    "text": "want to know all of our IPS at the same time for a history of time and so this",
    "start": "764559",
    "end": "770079"
  },
  {
    "text": "is where we had been trying to push Amazon to get that information for us quick since this wasn't going to work",
    "start": "770079",
    "end": "776079"
  },
  {
    "text": "for us we decided to take a new approach and this new approach was to understand",
    "start": "776079",
    "end": "781869"
  },
  {
    "text": "truly how AWS worked and it wasn't until spending months in Quattro understanding the data calls and what's logged in",
    "start": "781869",
    "end": "788079"
  },
  {
    "text": "what's not and seeing that what's in the actual cloud trial delivered over cloud trail logs or cloud watch logs for s 3",
    "start": "788079",
    "end": "795040"
  },
  {
    "text": "verse cloud watch events was I actually able to come up with this method so understand how AWS works once we",
    "start": "795040",
    "end": "802450"
  },
  {
    "text": "understand how a device works we're gonna make a strong assumption but I feel it's a very reasonable one we can",
    "start": "802450",
    "end": "807730"
  },
  {
    "text": "argue out after the fact if you'd like but make an assumption based on how we understand things work and how typical",
    "start": "807730",
    "end": "814750"
  },
  {
    "text": "applications work in AWS and then profit from these two points we'll be able to",
    "start": "814750",
    "end": "819880"
  },
  {
    "text": "tell potentially if a credentials compromise and be able to take action on that and as I mentioned this works both",
    "start": "819880",
    "end": "827470"
  },
  {
    "text": "historically and real time and if you think about the piece of information I've mentioned earlier about how STS",
    "start": "827470",
    "end": "834250"
  },
  {
    "text": "tokens work in our in AWS they're anywhere from one the 6 hours lived on an instance so if you went to put this",
    "start": "834250",
    "end": "841060"
  },
  {
    "text": "in place two nights and I'll have a link with a demo or a sample code so you",
    "start": "841060",
    "end": "846340"
  },
  {
    "text": "could actually go run with this if you'd like you could go from zero coverage to full coverage in all of your accounts in",
    "start": "846340",
    "end": "852450"
  },
  {
    "text": "six hours which i think is pretty cool so let's take a step and see how a",
    "start": "852450",
    "end": "859060"
  },
  {
    "text": "Tobias actually works so here we have the Amazon ec2 service we have I am",
    "start": "859060",
    "end": "864190"
  },
  {
    "text": "pictured here and this is actually an iam STS merger we have a server which is",
    "start": "864190",
    "end": "869890"
  },
  {
    "text": "hosting our application and I've shown the metadata service separate but theoretically it's on instance local",
    "start": "869890",
    "end": "875980"
  },
  {
    "text": "right it's available on the instance we have a random a two Bs service that we're gonna make a call to in cloud",
    "start": "875980",
    "end": "881920"
  },
  {
    "text": "trail so when you deploy a service in AWS and you're actually attaching your role to it the Amazon ec2 service is",
    "start": "881920",
    "end": "888970"
  },
  {
    "text": "going to perform an assumed role to the STS service it's going to get credentials from the eight I am service",
    "start": "888970",
    "end": "895990"
  },
  {
    "text": "and pass those back to Amazon ec2 Amazon ec2 is then going to pass these",
    "start": "895990",
    "end": "901930"
  },
  {
    "text": "credentials to the metadata service and that's going to be made available to your application in any process running",
    "start": "901930",
    "end": "907480"
  },
  {
    "text": "on your box by default at the metadata endpoint URL I'm sure every security practitioner in here is familiar with",
    "start": "907480",
    "end": "914170"
  },
  {
    "text": "that URL it could be the most powerful powerful thing in our existence and also one of the most scary things when a bug",
    "start": "914170",
    "end": "921100"
  },
  {
    "text": "bounty researcher includes it in his write up to you the SDKs or applications",
    "start": "921100",
    "end": "927339"
  },
  {
    "text": "are going to reach out to the metadata service to get credentials they will use those credential",
    "start": "927339",
    "end": "932620"
  },
  {
    "text": "to sign and craft you calls and make a call to AWS service and then the ATS",
    "start": "932620",
    "end": "938200"
  },
  {
    "text": "service is actually the one that's going to write the cloud trail log and that's an important piece because cloud trail",
    "start": "938200",
    "end": "943930"
  },
  {
    "text": "within AWS is a service for other cloth for other AWS services they don't",
    "start": "943930",
    "end": "949210"
  },
  {
    "text": "mandate what's logged they provide a logging service to the services and it's up to the service to understand or to",
    "start": "949210",
    "end": "956020"
  },
  {
    "text": "actually log the calls so if you think something should be logged you should",
    "start": "956020",
    "end": "961720"
  },
  {
    "text": "complain to the service team not the cloud trail team because the cloud row is just a mechanism for teams to log things and that's an understanding that",
    "start": "961720",
    "end": "968380"
  },
  {
    "text": "you should have if you're ever looking at cultural and wonder why something isn't logged or not by default most",
    "start": "968380",
    "end": "974770"
  },
  {
    "text": "management calls are logged data events are logged depending on whether the service is supported in cloud shell or",
    "start": "974770",
    "end": "980110"
  },
  {
    "text": "not so having this understanding of how AWS works the most important piece here",
    "start": "980110",
    "end": "985450"
  },
  {
    "text": "is that the assumed role call from the ec2 service is actually delivered in cloud trail it's not hidden it's",
    "start": "985450",
    "end": "992860"
  },
  {
    "text": "delivered in the cloud role or cloud watch logs version of the trail as well as the s3 delivered version of the trail",
    "start": "992860",
    "end": "998800"
  },
  {
    "text": "however it's not delivered over cloud watch event cloud trail delivery so you",
    "start": "998800",
    "end": "1004140"
  },
  {
    "text": "still if you want to do everything off of Vince you're gonna need a hybrid approach and the demo I'm going to show you today is off of cloud watch events",
    "start": "1004140",
    "end": "1011750"
  },
  {
    "text": "but it's very very powerful in full coverage if done correctly so now that",
    "start": "1011750",
    "end": "1018000"
  },
  {
    "text": "we have an understanding of how AWS actually works as far as credentials for your ec2 server the strong assumption",
    "start": "1018000",
    "end": "1024360"
  },
  {
    "text": "that we're gonna make if you remember I said the IP is the moneymaker here the strong assumption that we're gonna make",
    "start": "1024360",
    "end": "1030569"
  },
  {
    "text": "here is first call wins so the first IP that we see from a temporary credential once it's been",
    "start": "1030570",
    "end": "1036449"
  },
  {
    "text": "created is the IP that we're actually going to lock to and every subsequent call that's logged from that temporary",
    "start": "1036450",
    "end": "1044010"
  },
  {
    "text": "credential is going to be analyzed against that lock IP and if they differ",
    "start": "1044010",
    "end": "1049080"
  },
  {
    "text": "then we're all alert now this is an eye chart I'm going to walk you through this",
    "start": "1049080",
    "end": "1054480"
  },
  {
    "text": "with a magnification should be pretty clear but we're gonna walk through this flow chart the pink icons here",
    "start": "1054480",
    "end": "1061590"
  },
  {
    "text": "represents path to compromise or detection so we'll walk through this quickly well",
    "start": "1061590",
    "end": "1067810"
  },
  {
    "text": "then go through a manual exploration of cloud trail hop into a real-time demo and then we'll move into the prevention",
    "start": "1067810",
    "end": "1075300"
  },
  {
    "text": "so if we wanted to actually prop detect we're going to process cloud roll events",
    "start": "1075300",
    "end": "1081370"
  },
  {
    "text": "as they happen so a cloud row file is delivered with multiple records and we're going to loop through and look at",
    "start": "1081370",
    "end": "1088270"
  },
  {
    "text": "these records the first thing that we're going to look for is the ec2 assume roll call to actually create that temporary",
    "start": "1088270",
    "end": "1095170"
  },
  {
    "text": "token to pass to the metadata service that's going to create the initial data source for our detection if we don't",
    "start": "1095170",
    "end": "1105100"
  },
  {
    "text": "have that temporary credential we're going to add it to the dynamo table and we're going to utilize dynamo TTL",
    "start": "1105100",
    "end": "1111880"
  },
  {
    "text": "features in order to keep our data source not stale and let allow dynamo to",
    "start": "1111880",
    "end": "1117790"
  },
  {
    "text": "just clean up our table for us so even as servers go away and that credential is no longer valid they'll",
    "start": "1117790",
    "end": "1123340"
  },
  {
    "text": "just fall off our table for us and you don't have to actually monitor or prune that down-low table yourself so the",
    "start": "1123340",
    "end": "1129610"
  },
  {
    "text": "first time we see a temporary credential being crafted we'll add it to the table every other time that we see easy to",
    "start": "1129610",
    "end": "1135970"
  },
  {
    "text": "assume role we're going to just update the table and extend that TTL value if",
    "start": "1135970",
    "end": "1141520"
  },
  {
    "text": "your server is still running the ec2 service is going to continue to assume that role and pass new credentials to",
    "start": "1141520",
    "end": "1147430"
  },
  {
    "text": "your metadata service and we want to make sure that that credentials continue to be kept in the table and that TTL",
    "start": "1147430",
    "end": "1153310"
  },
  {
    "text": "value stays active now once we've built a table of assumed roles and these are",
    "start": "1153310",
    "end": "1158530"
  },
  {
    "text": "the unique credentials per server we're going to then look to see when they're",
    "start": "1158530",
    "end": "1163750"
  },
  {
    "text": "actually used under user identity you can see if it's an assumed role call if",
    "start": "1163750",
    "end": "1169090"
  },
  {
    "text": "it's an assumed role call we're gonna actually do a lookup and see do we have this session in the table if we do then",
    "start": "1169090",
    "end": "1175630"
  },
  {
    "text": "we're going to see an edge case which I'll cover is it AWS making the call or an IP that we trust if it's not we're",
    "start": "1175630",
    "end": "1183700"
  },
  {
    "text": "going to look and see do we have a source IP logged for this if we do we're",
    "start": "1183700",
    "end": "1189010"
  },
  {
    "text": "going to look to see if they match if we don't that's where we're going to lock the IP this is the first use of that",
    "start": "1189010",
    "end": "1195280"
  },
  {
    "text": "credential and where we're actually going to lock that IP source and be our paracin from that point forward if they",
    "start": "1195280",
    "end": "1202749"
  },
  {
    "text": "do match then we're going to just continue go back and start this loop over if they don't match this is where",
    "start": "1202749",
    "end": "1208029"
  },
  {
    "text": "we're gonna alert and it might be a potential compromise it might be as I mentioned before developer pool and",
    "start": "1208029",
    "end": "1213159"
  },
  {
    "text": "credentials down misuse it could be something like that but at least we have a point to jump to and start the the",
    "start": "1213159",
    "end": "1219580"
  },
  {
    "text": "response phase one important piece to know is how the source IP actually shows",
    "start": "1219580",
    "end": "1226960"
  },
  {
    "text": "up in Claude trail so this is a simple example of what a VPC might look like with some network traffic routes you",
    "start": "1226960",
    "end": "1234909"
  },
  {
    "text": "have an internal and external subnet you have a server in each subnet you have an Internet gateway in that gateway and VPC",
    "start": "1234909",
    "end": "1241269"
  },
  {
    "text": "endpoints so number one your in the external subnet you're making a call to the Internet this is an API that isn't",
    "start": "1241269",
    "end": "1249339"
  },
  {
    "text": "governed by a VPC endpoint and so the source IP seen by Amazon is going to be",
    "start": "1249339",
    "end": "1254950"
  },
  {
    "text": "the public IP of that instance if your internal and making a call to that same",
    "start": "1254950",
    "end": "1260169"
  },
  {
    "text": "public API source the cloud troll is going to see the net gateway IP if if",
    "start": "1260169",
    "end": "1267070"
  },
  {
    "text": "you're an external or internal and you made a call that you happen to have a DPC endpoint private link something like",
    "start": "1267070",
    "end": "1274119"
  },
  {
    "text": "that in region Amazon's gonna see the private IP of that call as well as VPC",
    "start": "1274119",
    "end": "1280450"
  },
  {
    "text": "information this is important for the detection as well as the comp the prevention of compromise that I'll cover",
    "start": "1280450",
    "end": "1286479"
  },
  {
    "text": "here in the future but you need to account for potentially seeing a private IP in as a source IP as well so if you",
    "start": "1286479",
    "end": "1294879"
  },
  {
    "text": "look at the example that I'll show you the github link to later you'll see that it accounts for both a public and a",
    "start": "1294879",
    "end": "1300249"
  },
  {
    "text": "private IP pair per instance as a lock to be able to accommodate VPC endpoints",
    "start": "1300249",
    "end": "1307019"
  },
  {
    "text": "so you're either gonna have unique public IP for the server or the NAT",
    "start": "1307019",
    "end": "1312099"
  },
  {
    "text": "gateway primarily as your IP source that you're going to see in logs I almost did",
    "start": "1312099",
    "end": "1317769"
  },
  {
    "text": "not do this reference architecture diagram because I've never drawn a diagram that was just a straight line",
    "start": "1317769",
    "end": "1322869"
  },
  {
    "text": "but I thought it further proved the point of how simple this approach can be he literally can deliver Claude trail to",
    "start": "1322869",
    "end": "1328899"
  },
  {
    "text": "an s3 bucket have it invoke an SNS topic so that you can have many subscribers that cloud trail invoke a",
    "start": "1328899",
    "end": "1335080"
  },
  {
    "text": "lambda source and then have your DynamoDB of your data source for this session credentialed IP lock and have a",
    "start": "1335080",
    "end": "1342520"
  },
  {
    "text": "method for detecting compromised so let's walk through this manually before",
    "start": "1342520",
    "end": "1347560"
  },
  {
    "text": "we actually see a real-time demo of how this could actually work so we start with the table with the identifier which",
    "start": "1347560",
    "end": "1353170"
  },
  {
    "text": "when ec2 actually does the first assumed role they're passing the instance ID in as the session name and that's very",
    "start": "1353170",
    "end": "1360010"
  },
  {
    "text": "interesting because that gives us the instance level attribution of detection for the compromised as well as knowing",
    "start": "1360010",
    "end": "1366340"
  },
  {
    "text": "that the instance ID is a globally unique across all eight of us accounts we know that this is only ours we're",
    "start": "1366340",
    "end": "1372760"
  },
  {
    "text": "going to have a source IP which we're initially going to leave blank the Aaron's going to be the assumed rule",
    "start": "1372760",
    "end": "1378370"
  },
  {
    "text": "that we're using and this is used so that when we're actually looking in the",
    "start": "1378370",
    "end": "1383560"
  },
  {
    "text": "a user identity that's being used for every call and then the TTL value we're utilizing dynamo's Auto cleanup for us",
    "start": "1383560",
    "end": "1390360"
  },
  {
    "text": "so if we were to look at this initial Cloud trail call we see that it's a STS",
    "start": "1390360",
    "end": "1396220"
  },
  {
    "text": "assume roll call the user identity is an AWS service invoked by ec2 that's an",
    "start": "1396220",
    "end": "1403300"
  },
  {
    "text": "indicator to let us know that ec2 is doing something on our behalf but we can also tell by the source IP being ec2",
    "start": "1403300",
    "end": "1411010"
  },
  {
    "text": "Amazon AWS comm as well as the user agent ping ec2 Amazon AWS calm when AWS",
    "start": "1411010",
    "end": "1417760"
  },
  {
    "text": "services are using your credentials on your behalf they're setting user agents and source IPS as the service domain for",
    "start": "1417760",
    "end": "1424780"
  },
  {
    "text": "you so that you'd know that this is Amazon doing something so here we see that this is easy to assuming the role",
    "start": "1424780",
    "end": "1431230"
  },
  {
    "text": "we see the role session name being the instance ID here ending in two one three one and the role that they're assuming",
    "start": "1431230",
    "end": "1438400"
  },
  {
    "text": "is my cool role so if we're gonna build our table we're gonna go set the",
    "start": "1438400",
    "end": "1443680"
  },
  {
    "text": "identifier as the instance ID we're going to set the AR in as my cool role and set a default TTL value of six hours",
    "start": "1443680",
    "end": "1451300"
  },
  {
    "text": "beyond the current time and that'll give us enough time so that when the credential expires if the instance has",
    "start": "1451300",
    "end": "1457540"
  },
  {
    "text": "gone away and it hasn't renewed that entry is just going to fall off the dynamo table and we can keep our data",
    "start": "1457540",
    "end": "1464590"
  },
  {
    "text": "pretty fresh so now that we have our first entry let's see how we actually build out that",
    "start": "1464590",
    "end": "1470250"
  },
  {
    "text": "lock IP the user identity type assumed role is what we're hinging on when once",
    "start": "1470250",
    "end": "1476820"
  },
  {
    "text": "we see this we're gonna look at the error in and here we see the assumed role my cool role of the instance ID",
    "start": "1476820",
    "end": "1482400"
  },
  {
    "text": "ending in two one three one now in the code we would go do a query and the Dynamo table to see if we had this",
    "start": "1482400",
    "end": "1488610"
  },
  {
    "text": "session we would look to see if we have an IP and do all that we know we just did the assumed role because we just saw",
    "start": "1488610",
    "end": "1494310"
  },
  {
    "text": "that trill so let's proceed forward we see that we're doing an AC to describe",
    "start": "1494310",
    "end": "1500490"
  },
  {
    "text": "instance call pretty benign in u.s. west to here we see the source IP is fifty to",
    "start": "1500490",
    "end": "1505950"
  },
  {
    "text": "ninety five two five five one two one we do that query to the table to check to see do we have the source IP in this",
    "start": "1505950",
    "end": "1513630"
  },
  {
    "text": "case we don't so we're going to go ahead and update that table and we have our first locked temporary credential for",
    "start": "1513630",
    "end": "1519870"
  },
  {
    "text": "that server itself and so as we build this over time we're going to have unique credentials to known source IPS",
    "start": "1519870",
    "end": "1527280"
  },
  {
    "text": "built out so within six hours we'll have entire coverage across all of our infrastructure of every temporary",
    "start": "1527280",
    "end": "1533430"
  },
  {
    "text": "credential minted by ec2 as well as what IPS those should come from and now that",
    "start": "1533430",
    "end": "1539100"
  },
  {
    "text": "we have an initial source of truth we can go continue to analyze cloud trail",
    "start": "1539100",
    "end": "1544640"
  },
  {
    "text": "we see this is type assumed role again the air in is assumed role my cool role",
    "start": "1544640",
    "end": "1550050"
  },
  {
    "text": "of two on three one we can go down here and see that it's just an ec2 call of",
    "start": "1550050",
    "end": "1555840"
  },
  {
    "text": "described volumes this time we look at the source IP and now we're gonna take this source IP and compare it so we go",
    "start": "1555840",
    "end": "1563310"
  },
  {
    "text": "back to the table and say okay we have a source IP does it match in this case it does so let's continue moving forward if",
    "start": "1563310",
    "end": "1570150"
  },
  {
    "text": "you remember that flow chart we're just going to continue processing if we don't have an IP or don't have that temporary",
    "start": "1570150",
    "end": "1575460"
  },
  {
    "text": "credential we're just throwing that data away temporarily within six hours we'll have full coverage and so it's kind of",
    "start": "1575460",
    "end": "1582060"
  },
  {
    "text": "the risk that within that six hour window that you start that you might throw away a compromised call but within",
    "start": "1582060",
    "end": "1587160"
  },
  {
    "text": "six hours you're gonna have full coverage so as we analyze next we're going to continue do the same thing it's",
    "start": "1587160",
    "end": "1593340"
  },
  {
    "text": "as an assumed roll call of Michael roll ending in two on three one we know this is what we're",
    "start": "1593340",
    "end": "1598980"
  },
  {
    "text": "doing eventsource is sts get color identity that could be suspicious in",
    "start": "1598980",
    "end": "1604320"
  },
  {
    "text": "itself it's kind of like the who am i call of linux it's going to return the",
    "start": "1604320",
    "end": "1609540"
  },
  {
    "text": "actual identity of the credential that you're using the one benefit to that is it's going to tell you whether it's",
    "start": "1609540",
    "end": "1614880"
  },
  {
    "text": "active or not if it's not an active credential AWS will return nothing or an",
    "start": "1614880",
    "end": "1620040"
  },
  {
    "text": "error if it is active it will actually tell you which credential it is and the account ID it came from the important",
    "start": "1620040",
    "end": "1626700"
  },
  {
    "text": "part here is source IP address this appears to be an IP from San Jose most likely my apartment and it ends in 2 3 2",
    "start": "1626700",
    "end": "1633840"
  },
  {
    "text": "so we're gonna go back to that table we'll do that same type of query and say we have an instance of 2 1 3 1 we know",
    "start": "1633840",
    "end": "1640440"
  },
  {
    "text": "that we have a LOC IP ending in 1 2 1 we do that comparison and then in this case",
    "start": "1640440",
    "end": "1645840"
  },
  {
    "text": "we're seeing no it is not the same IP potentially compromised let's spin up an",
    "start": "1645840",
    "end": "1651990"
  },
  {
    "text": "incident kick off the automated pipeline rotate credentials whatever you want to do so here we've actually walked through",
    "start": "1651990",
    "end": "1657990"
  },
  {
    "text": "manually and detected our first potentially compromised credential from nothing and once again the important",
    "start": "1657990",
    "end": "1664320"
  },
  {
    "text": "piece here is it's from your infrastructure which I'll show you in the demo is will not only be able to detect credentials from your laptop but",
    "start": "1664320",
    "end": "1671549"
  },
  {
    "text": "other ec2 infrastructure so if I Netflix were to pass a credential to my buddy at slack and say here please put this in",
    "start": "1671549",
    "end": "1678330"
  },
  {
    "text": "your a to BS infrastructure and execute a command I would actually detect that so let's switch screens and actually",
    "start": "1678330",
    "end": "1688169"
  },
  {
    "text": "walk through so here i've set up an account and I have a sample service already deployed so here we see that it",
    "start": "1688169",
    "end": "1694620"
  },
  {
    "text": "ends in 3 for F the instance ID it's in the public subnet it's running with my",
    "start": "1694620",
    "end": "1700980"
  },
  {
    "text": "role and I have a public IP of 5 4.20 9.1 8 3.1 if I switch over to the dynamo",
    "start": "1700980",
    "end": "1707910"
  },
  {
    "text": "DB tab you'll see that I have an identifier already 3 for F I filled it",
    "start": "1707910",
    "end": "1713070"
  },
  {
    "text": "out with an assumed role call of my role and we already have our first call",
    "start": "1713070",
    "end": "1719040"
  },
  {
    "text": "that's been made by that service with the LOC IP of dot 1 8 3.1 and so if we",
    "start": "1719040",
    "end": "1726240"
  },
  {
    "text": "were to actually go perform actions with this credential what would that look like so",
    "start": "1726240",
    "end": "1732169"
  },
  {
    "text": "first I'm gonna actually SSH into this box and make some calls we're gonna create an s3 bucket so first let me show",
    "start": "1732169",
    "end": "1738139"
  },
  {
    "text": "you that the credentials are valid we're gonna call it get caller identity you can see that these credentials are for that instance three for F and we're",
    "start": "1738139",
    "end": "1745489"
  },
  {
    "text": "gonna create a bucket and call it saying that it's good from the instance in our accounts so good from instance reinvent",
    "start": "1745489",
    "end": "1752960"
  },
  {
    "text": "this is gonna create a bucket and the demo that I've set up is actually going to alert on good calls as well so we",
    "start": "1752960",
    "end": "1759619"
  },
  {
    "text": "switch over to slack and within 10 seconds we're going to get an actual alert saying good call scene we're",
    "start": "1759619",
    "end": "1765830"
  },
  {
    "text": "passing the air in back the source and event name and then we're seeing that the source IP matches the expected IP",
    "start": "1765830",
    "end": "1771859"
  },
  {
    "text": "this is what we expect is our environment so what does it look like if we actually were to pull this somewhere",
    "start": "1771859",
    "end": "1777980"
  },
  {
    "text": "else so I wrote a script that will SSH into a box throw the metadata service",
    "start": "1777980",
    "end": "1783679"
  },
  {
    "text": "steal some credentials and pull them down so the script looks like this it's",
    "start": "1783679",
    "end": "1788720"
  },
  {
    "text": "basically SSH in curl that awesome endpoints pull down the keys export them",
    "start": "1788720",
    "end": "1794779"
  },
  {
    "text": "as well as print them because I'm going to actually copy them and use them on a different AWS instance so I call steal",
    "start": "1794779",
    "end": "1801889"
  },
  {
    "text": "keys there are my credentials they're already exported so I'm just going to go",
    "start": "1801889",
    "end": "1808159"
  },
  {
    "text": "ahead and create a bucket I'm on my laptop not the instance as you can tell I didn't SSH anywhere and so I'm gonna",
    "start": "1808159",
    "end": "1814970"
  },
  {
    "text": "create a bucket called from laptop bad from laptop reinvent and then we'll",
    "start": "1814970",
    "end": "1822139"
  },
  {
    "text": "switch over to slack and see that the detection method method actually detected it within seconds and as I",
    "start": "1822139",
    "end": "1828619"
  },
  {
    "text": "mentioned this demo is using cloud watch events and not the s3 delivery so once you have sessions built via the cloud",
    "start": "1828619",
    "end": "1835999"
  },
  {
    "text": "watch logs or s3 delivery you can then utilize cloud watch event alerting for cloud trail to get that real-time",
    "start": "1835999",
    "end": "1842389"
  },
  {
    "text": "detection so here we have a detection within seconds saying that the source IP",
    "start": "1842389",
    "end": "1847399"
  },
  {
    "text": "ending in dot 9 2 does not match the one 8 3.1 and so this is a potential compromise and so this is all great",
    "start": "1847399",
    "end": "1854929"
  },
  {
    "text": "guard duty does this as well but the main differentiator I think between this meth and what guard it is implemented so",
    "start": "1854929",
    "end": "1860599"
  },
  {
    "text": "far is this next piece I am now SSA chewing into a ec2 instance in a different",
    "start": "1860599",
    "end": "1866260"
  },
  {
    "text": "I'm going to show you that I have no credentials on this instance I am then",
    "start": "1866260",
    "end": "1871910"
  },
  {
    "text": "going to export the credentials I copied earlier show you that these credentials are from that first instance ending in",
    "start": "1871910",
    "end": "1877490"
  },
  {
    "text": "e4 F or e3 for excuse me and now I'm going to create an s3 bucket from the",
    "start": "1877490",
    "end": "1884330"
  },
  {
    "text": "other rogue account this is mimicking an attacker a bug bounty a very talented",
    "start": "1884330",
    "end": "1889760"
  },
  {
    "text": "individual that's been able to get your credentials so we created a bucket bad from another ad base account we can go",
    "start": "1889760",
    "end": "1896750"
  },
  {
    "text": "back to slack and because this is recorded I know it's going to come through but here you can see that the",
    "start": "1896750",
    "end": "1903260"
  },
  {
    "text": "source IP is an Amazon IP and that's the important piece we're detecting outside",
    "start": "1903260",
    "end": "1908419"
  },
  {
    "text": "of your infrastructure here and so we've detected that the IP has come from a different instance this could even",
    "start": "1908419",
    "end": "1913940"
  },
  {
    "text": "detect within your own infrastructure if you've somehow a developer's miss max credentials and copied them from one",
    "start": "1913940",
    "end": "1919700"
  },
  {
    "text": "instance to another so it's providing you some real-time valuable information that you're having credentials use",
    "start": "1919700",
    "end": "1925700"
  },
  {
    "text": "within AWS and it's something I am personally very proud of and I think has",
    "start": "1925700",
    "end": "1931250"
  },
  {
    "text": "been very powerful for us so let's switch back as we we walk through this",
    "start": "1931250",
    "end": "1938929"
  },
  {
    "text": "already but we had our sample service with an IP we built out the table then we it locked and then we actually did",
    "start": "1938929",
    "end": "1947000"
  },
  {
    "text": "the demo but edge cases so I mentioned there's a few one of them was the",
    "start": "1947000",
    "end": "1953330"
  },
  {
    "text": "private IP you have to account for your V PC endpoint calls but also Amazon is",
    "start": "1953330",
    "end": "1959390"
  },
  {
    "text": "going to do things on your behalf so you're gonna see calls like the assumed real call that say service named AWS",
    "start": "1959390",
    "end": "1966740"
  },
  {
    "text": "error Amazon AWS calm when Amazon's debugging an issue for you through",
    "start": "1966740",
    "end": "1971750"
  },
  {
    "text": "support you'll see support Amazon AWS comm if you call an API call",
    "start": "1971750",
    "end": "1977840"
  },
  {
    "text": "that actually triggers Amazon to do something on your behalf like kms for example when you're restoring an",
    "start": "1977840",
    "end": "1982970"
  },
  {
    "text": "encrypted snapshot Amazon's going to make calls and currently right now they put the Amazon information in there",
    "start": "1982970",
    "end": "1990410"
  },
  {
    "text": "they're working to pass your actual IP information through but right now you have to account for potentially seeing",
    "start": "1990410",
    "end": "1996110"
  },
  {
    "text": "the Amazon AWS service domain in as your source IP so we all run in",
    "start": "1996110",
    "end": "2002039"
  },
  {
    "text": "Amazon we should trust that they're doing the right thing so in our case we've trusted that when we see these these are calls that are valid or you",
    "start": "2002039",
    "end": "2009269"
  },
  {
    "text": "might decide to actually just note them for information there's also potentially a case where",
    "start": "2009269",
    "end": "2014700"
  },
  {
    "text": "your instance comes up and makes a call to attach an elastic IP does anyone use",
    "start": "2014700",
    "end": "2020370"
  },
  {
    "text": "elastic IP in the crowd I think everyone here does probably but in that case",
    "start": "2020370",
    "end": "2025409"
  },
  {
    "text": "you've had a call from your instance with its original IP and then every subsequent call once it actually attaches the elastic IP is going to be",
    "start": "2025409",
    "end": "2033120"
  },
  {
    "text": "that of the new IP so you might want to account for the associate new address",
    "start": "2033120",
    "end": "2038399"
  },
  {
    "text": "types API calls and if you see those then within a given period of time say a",
    "start": "2038399",
    "end": "2043950"
  },
  {
    "text": "minute or two allow one deviation from the locked IP and then add that IP to",
    "start": "2043950",
    "end": "2050520"
  },
  {
    "text": "the call if you notice the source IP field here is a list of strings and",
    "start": "2050520",
    "end": "2056608"
  },
  {
    "text": "that's to account for more than one potentially locked IP within your environment the example code that I'll",
    "start": "2056609",
    "end": "2063148"
  },
  {
    "text": "provide a link to at the end has this type of logic built-in so you'll be able to walk through and see that how that",
    "start": "2063149",
    "end": "2068579"
  },
  {
    "text": "actually works so that was detection now",
    "start": "2068579",
    "end": "2074040"
  },
  {
    "text": "let's flip gears and talk about we don't want to detect we want to prevent detection as we know could be 15 to 20",
    "start": "2074040",
    "end": "2080579"
  },
  {
    "text": "minutes the cloud trail or the cloud watch events I failed to mention earlier are only mutating calls so you notice I",
    "start": "2080579",
    "end": "2087300"
  },
  {
    "text": "chose to create buckets and not list buckets or something like that because describe calls do not come over the",
    "start": "2087300",
    "end": "2093270"
  },
  {
    "text": "cloud watch events currently so you're only going to get real-time detection of mutating calls but with the s3 cloud",
    "start": "2093270",
    "end": "2100500"
  },
  {
    "text": "shell or the cloud watch log delivery you're going to get all calls so just something to account for so preventing",
    "start": "2100500",
    "end": "2108150"
  },
  {
    "text": "credential compromised today we're going to focus around credentials once again and primarily the ec2 metadata service",
    "start": "2108150",
    "end": "2116720"
  },
  {
    "text": "I'm sure we're all familiar with this IP I should get a tattoo of it somewhere because I've dealt with this so much I",
    "start": "2116720",
    "end": "2123510"
  },
  {
    "text": "remember the first time I started playing I had to look it up over and over and it's I probably say this in my sleep now but we're gonna focus on",
    "start": "2123510",
    "end": "2130290"
  },
  {
    "text": "credentials here we're gonna protect credentials and do what we call a credential enforcement",
    "start": "2130290",
    "end": "2136270"
  },
  {
    "text": "internally we call it API protect but we're going to try to actually enforce where API calls can actually come from",
    "start": "2136270",
    "end": "2143200"
  },
  {
    "text": "and then we're gonna switch gears and talk about some new things that enable you to actually prevent credentials from",
    "start": "2143200",
    "end": "2150640"
  },
  {
    "text": "being exfilled via server side request forgery or XML external identity",
    "start": "2150640",
    "end": "2155890"
  },
  {
    "text": "injection has anyone ever fell prey to an SS RF attack through bug bounty or other means I won't call you out don't",
    "start": "2155890",
    "end": "2163360"
  },
  {
    "text": "worry if you didn't raise your hand you've yet to come fall prey at some",
    "start": "2163360",
    "end": "2168670"
  },
  {
    "text": "point I'm sure it's going to happen get your code or a third party code that you run if you're not familiar with SS RF",
    "start": "2168670",
    "end": "2175920"
  },
  {
    "text": "server side request forgery it might look something like this you've got a talented individual on the Left making a",
    "start": "2175920",
    "end": "2182350"
  },
  {
    "text": "normal web application call that web application is actually making a remote call to a different app or service and",
    "start": "2182350",
    "end": "2189040"
  },
  {
    "text": "it's taking the response from that app and service and combining it and then providing it back to you the talented",
    "start": "2189040",
    "end": "2195670"
  },
  {
    "text": "individual sees this kind of interaction and is able to trick the application to",
    "start": "2195670",
    "end": "2201370"
  },
  {
    "text": "instead of reaching out to the remote service reaching locally to the metadata service most importantly to the security",
    "start": "2201370",
    "end": "2208360"
  },
  {
    "text": "credential call or the security credential pathway and then take those access keys back and start using them it",
    "start": "2208360",
    "end": "2216400"
  },
  {
    "text": "takes two calls for an attacker or talented individual to get your credential the best part about the cloud",
    "start": "2216400",
    "end": "2224110"
  },
  {
    "text": "is is API driven the worst part about the cloud is its API driven once credentials have left your environment",
    "start": "2224110",
    "end": "2229900"
  },
  {
    "text": "depending on how privileged they are and the skill of the attacker it might be minutes before your infrastructure is",
    "start": "2229900",
    "end": "2235390"
  },
  {
    "text": "actually damaged does anyone run a woth in the crowd if you run our wofe and",
    "start": "2235390",
    "end": "2242050"
  },
  {
    "text": "you've ever tried to actually prevent an attack on the metadata service you might have done an experiment like this in how",
    "start": "2242050",
    "end": "2248710"
  },
  {
    "text": "many different IPS do I need to block the block the metadata path so you go through here and see like oh with all",
    "start": "2248710",
    "end": "2255340"
  },
  {
    "text": "these different representations of the metadata IP I can find the metadata in many different ways and so you black",
    "start": "2255340",
    "end": "2262270"
  },
  {
    "text": "lists these and then you realize oh but how do i blacklist the bit leave and the Google link and all the various",
    "start": "2262270",
    "end": "2268570"
  },
  {
    "text": "different short URLs that are possible and it ends up that you can potentially",
    "start": "2268570",
    "end": "2274020"
  },
  {
    "text": "detect potential SS RF but that might end up being very noisy or things fall",
    "start": "2274020",
    "end": "2280630"
  },
  {
    "text": "through and so what we found is a wife hasn't been very ideal for trying to prevent things like this so we've moved",
    "start": "2280630",
    "end": "2287590"
  },
  {
    "text": "towards enforcement and now this metadata protection field so API",
    "start": "2287590",
    "end": "2294370"
  },
  {
    "text": "enforcement is crafting an iam policy to actually prevent the credentials from",
    "start": "2294370",
    "end": "2300250"
  },
  {
    "text": "being valid outside of your AWS environment and it looks something like this and can everyone see this in the",
    "start": "2300250",
    "end": "2307180"
  },
  {
    "text": "back of nell zoom in on it I'll zoom in just in case it's a statement that's a",
    "start": "2307180",
    "end": "2313510"
  },
  {
    "text": "deny all actions on all resources the condition composes IP blocks VPC IDs and",
    "start": "2313510",
    "end": "2322270"
  },
  {
    "text": "VPC endpoint IDs and it's essentially every API call that's made the I am",
    "start": "2322270",
    "end": "2329110"
  },
  {
    "text": "service will perform these conditions for you does the canoe IP address here seen here",
    "start": "2329110",
    "end": "2335380"
  },
  {
    "text": "fall in this block does it come from this V PC or does it come from this V PC",
    "start": "2335380",
    "end": "2341620"
  },
  {
    "text": "endpoint now it's important to include all three because there's some inconsistencies in what the services",
    "start": "2341620",
    "end": "2347500"
  },
  {
    "text": "actually see depending on the call that you make so the way that we've",
    "start": "2347500",
    "end": "2352570"
  },
  {
    "text": "approached this is we're too large to have all of our eye peas in here there",
    "start": "2352570",
    "end": "2358270"
  },
  {
    "text": "is a max policy size of the native us so we're actually adding our nat gateways and if you remember the network flow",
    "start": "2358270",
    "end": "2365890"
  },
  {
    "text": "diagram that we talked to briefly this gives us an internal coverage of roles",
    "start": "2365890",
    "end": "2371320"
  },
  {
    "text": "so one of the things if we want to externalize the service that we try to enforce is that the server itself should",
    "start": "2371320",
    "end": "2378070"
  },
  {
    "text": "be in the internal subnet and you should make it external via load balancer in the external subnet or some other means",
    "start": "2378070",
    "end": "2384520"
  },
  {
    "text": "and so here we've built a condition we basically in every account have a unique",
    "start": "2384520",
    "end": "2390460"
  },
  {
    "text": "managed policy that contains all NAT gateway IP addresses all V PC IDs and V",
    "start": "2390460",
    "end": "2396010"
  },
  {
    "text": "PC endpoint IDs and then we go attach this to roles that internal facing only and when I say",
    "start": "2396010",
    "end": "2402730"
  },
  {
    "text": "internal facing I mean there are a roll it's a roll on a box that's deployed in the internal subnet only no public IP",
    "start": "2402730",
    "end": "2408700"
  },
  {
    "text": "and what this has done is enabled us to actually say these IP or these calls can",
    "start": "2408700",
    "end": "2414460"
  },
  {
    "text": "only come from this account so you can take that IP and take it to my rogue",
    "start": "2414460",
    "end": "2420040"
  },
  {
    "text": "instance in the ec2 and it not work the talented individual can exfil creds via",
    "start": "2420040",
    "end": "2425440"
  },
  {
    "text": "SS RF and it actually prevents compromise and this was actually true to the case in that we had one instance of",
    "start": "2425440",
    "end": "2432220"
  },
  {
    "text": "an exposed credential with bug bounty and this API protect method made that",
    "start": "2432220",
    "end": "2437320"
  },
  {
    "text": "credential null and void he had valid credentials but he could not do anything and we actually challenged the",
    "start": "2437320",
    "end": "2443650"
  },
  {
    "text": "researcher to be able to bypass this and he was unable to so this has proven very very powerful and effective to us but it",
    "start": "2443650",
    "end": "2450880"
  },
  {
    "text": "still isn't enough right I mentioned it's internal only there are needs to actually externalize boxes on the",
    "start": "2450880",
    "end": "2457330"
  },
  {
    "text": "external subnet if you do anything cross region that's high volume you'll understand that your neck gateway",
    "start": "2457330",
    "end": "2463720"
  },
  {
    "text": "networking price will shoot through the roof so putting servers external is a thing and it's definitely a thing at",
    "start": "2463720",
    "end": "2470500"
  },
  {
    "text": "Netflix so we needed to do something else and this is where we come to metadata protection and I've heard",
    "start": "2470500",
    "end": "2476530"
  },
  {
    "text": "people and I bit my tongue wanting to talk about this before reinvent where folks wanted to be able to protect the",
    "start": "2476530",
    "end": "2482620"
  },
  {
    "text": "metadata servicing altogether and I'm here today to tell you that you now have",
    "start": "2482620",
    "end": "2488290"
  },
  {
    "text": "the power to go do this and at the end of the talk there will be a link to an example proxy that you can go build",
    "start": "2488290",
    "end": "2493840"
  },
  {
    "text": "today and put in front of your service and protect your metadata credentials so",
    "start": "2493840",
    "end": "2498880"
  },
  {
    "text": "what we've done is we tried to work with the metadata service to have them enforce a header if you think about any",
    "start": "2498880",
    "end": "2505360"
  },
  {
    "text": "time AWS makes a major change it can affect many customers in many different ways so it wasn't at least in the future",
    "start": "2505360",
    "end": "2512620"
  },
  {
    "text": "possible to our what we could see that the metadata service was going to support any sort of mandatory header in",
    "start": "2512620",
    "end": "2518950"
  },
  {
    "text": "the future so I went and started making just pull requests to the individual SDKs and started setting user agents",
    "start": "2518950",
    "end": "2526810"
  },
  {
    "text": "I built a example proxy and started seeing that when SDKs in AWS were making",
    "start": "2526810",
    "end": "2532300"
  },
  {
    "text": "requests to the meta day servus they were using whatever default user agent was set on the library I'm",
    "start": "2532300",
    "end": "2538750"
  },
  {
    "text": "most familiar with the boto 3 library it uses the Python requests module and so",
    "start": "2538750",
    "end": "2544150"
  },
  {
    "text": "the user agent that the metadata service was seeing up until now was Python requests so I started making pull",
    "start": "2544150",
    "end": "2550990"
  },
  {
    "text": "requests to see hey could I get something done I first started with the Ruby team I stated in my case I had no",
    "start": "2550990",
    "end": "2559119"
  },
  {
    "text": "prior knowledge of anyone on the ruby team they liked it they accepted it I took that merged pull requests I went",
    "start": "2559119",
    "end": "2566560"
  },
  {
    "text": "and learned Java again I made a pull request to Java and I cited this as evidence said hey Ruby did it could you",
    "start": "2566560",
    "end": "2574089"
  },
  {
    "text": "do it as well and did that for multiple different languages but the most",
    "start": "2574089",
    "end": "2579160"
  },
  {
    "text": "important part is after I was able to get these teams to merge these pull requests is what I was able to get the",
    "start": "2579160",
    "end": "2585940"
  },
  {
    "text": "Amazon SDK team at the global level to support never changing these for us so",
    "start": "2585940",
    "end": "2593589"
  },
  {
    "text": "from this point for these user agents will not change and you can actually use these to gate access to your metadata",
    "start": "2593589",
    "end": "2599650"
  },
  {
    "text": "service so if we look at what s srf might look like in a sdk world now with",
    "start": "2599650",
    "end": "2608740"
  },
  {
    "text": "python you would see when making a request to the metadata service it would",
    "start": "2608740",
    "end": "2614170"
  },
  {
    "text": "actually set a user agent boto 3 slash version number slash you name all the various different user agents that you",
    "start": "2614170",
    "end": "2620170"
  },
  {
    "text": "would expect you can now put a proxy in front of the metadata service to inspect",
    "start": "2620170",
    "end": "2625569"
  },
  {
    "text": "that user agent in this case it's something that we knows the AWS sdk so",
    "start": "2625569",
    "end": "2630609"
  },
  {
    "text": "we allow it to go through the metadata service provides credentials back to the metadata proxy and the proxy returns",
    "start": "2630609",
    "end": "2637119"
  },
  {
    "text": "those back to the the sdk and we're off and running so if this were if we went",
    "start": "2637119",
    "end": "2642400"
  },
  {
    "text": "back to the original s srf example that we diagrammed and we're running like a",
    "start": "2642400",
    "end": "2648310"
  },
  {
    "text": "Python flask app or a django app and we're using the Python requests module for requesting remote assets the",
    "start": "2648310",
    "end": "2655450"
  },
  {
    "text": "vulnerable app the talented individual would trick it to trying to request the ec2 metadata service in this case the",
    "start": "2655450",
    "end": "2662950"
  },
  {
    "text": "user agent would be the library that we're using to make requests since it's a Python app I've chosen Python requests library so the metadata",
    "start": "2662950",
    "end": "2670310"
  },
  {
    "text": "proxy sees that it's not an SDK user agent and then it just drops it on the floor and returns unauthorized whatever",
    "start": "2670310",
    "end": "2676880"
  },
  {
    "text": "you want 401 403 5-1 to get out of here whatever you want to return to the individual feel free but now that the",
    "start": "2676880",
    "end": "2684140"
  },
  {
    "text": "AWS SDKs are setting set our supporting setting user agents in the SDK you can",
    "start": "2684140",
    "end": "2690319"
  },
  {
    "text": "now proxy traffic in front of your metadata service reliably accurately and prevent compromise in an SSR F xx see",
    "start": "2690319",
    "end": "2698960"
  },
  {
    "text": "those classes of vulnerabilities and so you can go deploy this across your",
    "start": "2698960",
    "end": "2704180"
  },
  {
    "text": "infrastructure and mitigate an entire class and if you think about that from a",
    "start": "2704180",
    "end": "2709220"
  },
  {
    "text": "security perspective it's very rare that you could actually go mitigate an entire class of something and so this is",
    "start": "2709220",
    "end": "2714920"
  },
  {
    "text": "something that has proven very powerful for us it's something that we're rolling out wide in our infrastructure the",
    "start": "2714920",
    "end": "2722440"
  },
  {
    "text": "supported SDKs today are the boto the two Python libraries photo core photo 3",
    "start": "2722440",
    "end": "2728630"
  },
  {
    "text": "the goaling library and java version 1 in the new java v2 library nodejs and",
    "start": "2728630",
    "end": "2735109"
  },
  {
    "text": "ruby if you're using dotnet c c++ PHP I'm sorry I didn't want to learn all",
    "start": "2735109",
    "end": "2741589"
  },
  {
    "text": "those languages again or set up environments most importantly but I believe the SDK team is making those",
    "start": "2741589",
    "end": "2747829"
  },
  {
    "text": "changes to make it consistent across the board but these are the SDKs that we actually made sure and touch today so if",
    "start": "2747829",
    "end": "2754910"
  },
  {
    "text": "you're running these languages all you need to do is make sure that you're running an SDK within the last quarter",
    "start": "2754910",
    "end": "2760040"
  },
  {
    "text": "and you can actually use a proxy like this the user agent strings that you",
    "start": "2760040",
    "end": "2765980"
  },
  {
    "text": "might see our AWS - SDK - typically the language name slash version slash you",
    "start": "2765980",
    "end": "2773210"
  },
  {
    "text": "name and then you've got the for python variants boto core boto 3 the AWS CLI is",
    "start": "2773210",
    "end": "2780950"
  },
  {
    "text": "actually Python backed so you'll see the the user agent when the COI reaches out to the metadata service to be a AWS CLI",
    "start": "2780950",
    "end": "2788079"
  },
  {
    "text": "there's a new Python thing called chalice from the boto team these are the",
    "start": "2788079",
    "end": "2794300"
  },
  {
    "text": "user agent prefixes that you can write a proxy and make sure the user agent starts with",
    "start": "2794300",
    "end": "2799880"
  },
  {
    "text": "now the goal of the proxy here was to prevent these SS are f x XE if there's a",
    "start": "2799880",
    "end": "2805760"
  },
  {
    "text": "different type of RC e on your box where the attacker is able to control headers the server side request forgery and XE",
    "start": "2805760",
    "end": "2813590"
  },
  {
    "text": "the one caveat there is the talented individual the attacker the researcher is unable to control the header so they",
    "start": "2813590",
    "end": "2820400"
  },
  {
    "text": "can't control the user agent so if you've given them a means to actually set the user agent they're gonna get",
    "start": "2820400",
    "end": "2826970"
  },
  {
    "text": "your credential if they're on box you know they're gonna curl your proxy the",
    "start": "2826970",
    "end": "2831980"
  },
  {
    "text": "first time they're gonna figure it out right it's only a matter of time so this is me this means is to prevent remote",
    "start": "2831980",
    "end": "2838160"
  },
  {
    "text": "attackers from actually getting your credentials and our apps tech team has vetted it at least the the idea in the",
    "start": "2838160",
    "end": "2844070"
  },
  {
    "text": "dissents and how we've implemented it and hopefully the example that we open-source today proves to be very powerful for y'all or at least kick kick",
    "start": "2844070",
    "end": "2851330"
  },
  {
    "text": "forward something for you one powerful thing that we've yet to do is actually start logging every path",
    "start": "2851330",
    "end": "2857120"
  },
  {
    "text": "that's being hit and start trying to do anomaly detection and say we know this applications using the boto core library",
    "start": "2857120",
    "end": "2864200"
  },
  {
    "text": "but all of a sudden we see the COI user agent that must mean someone's on box or",
    "start": "2864200",
    "end": "2869360"
  },
  {
    "text": "this is only a Python app and we see the Java SDK it was this some sort of new",
    "start": "2869360",
    "end": "2874850"
  },
  {
    "text": "exploit tool like PACU or something that's actually running so you can start doing a lot of really fancy things once",
    "start": "2874850",
    "end": "2880820"
  },
  {
    "text": "you have this proxy and start logging and sending data forward so we think this is going to open up a lot of really",
    "start": "2880820",
    "end": "2885920"
  },
  {
    "text": "cool stuff in the security space with a native of us so some final thoughts before I open it up for about ten",
    "start": "2885920",
    "end": "2892370"
  },
  {
    "text": "minutes of QA understanding how a Tobias works has really made our life much much",
    "start": "2892370",
    "end": "2897890"
  },
  {
    "text": "easier it's allowed us to easily tell whether things are false positives develop new methodologies like this",
    "start": "2897890",
    "end": "2903950"
  },
  {
    "text": "detecting credential compromise I mentioned understanding Claude trail and what's actually logged as I mentioned",
    "start": "2903950",
    "end": "2912200"
  },
  {
    "text": "Quattro is a service within AWS so it's up to these AWS service teams to log things so the culantro team cannot tell",
    "start": "2912200",
    "end": "2919490"
  },
  {
    "text": "you what all is logged we keep track because of a tool called repo kid we need to know what's logged so we have a",
    "start": "2919490",
    "end": "2926720"
  },
  {
    "text": "master list of everything that we've seen in our accounts but we still didn't know everything so I went out and wrote",
    "start": "2926720",
    "end": "2932150"
  },
  {
    "text": "a tool called trailblazer which aim to actually enumerate the API calls and then reference what was",
    "start": "2932150",
    "end": "2938780"
  },
  {
    "text": "actually logged in Claude trail to see this API call is logged as this or this API call was made but not logged because",
    "start": "2938780",
    "end": "2944960"
  },
  {
    "text": "we never saw it show up in Claude trail and since I did that work of actually going into the Python SDK to make these",
    "start": "2944960",
    "end": "2951110"
  },
  {
    "text": "calls on demand you can actually use trailblazer as an attack a new platform as well you can provided a list of calls",
    "start": "2951110",
    "end": "2957890"
  },
  {
    "text": "Sleeps and regions and trailblazer will actually go do an automated attack and",
    "start": "2957890",
    "end": "2963440"
  },
  {
    "text": "so you can start modeling iOS ease and different things and having these randomly invoked in your environment to",
    "start": "2963440",
    "end": "2969590"
  },
  {
    "text": "make sure that your detections can actually detect them there is an example",
    "start": "2969590",
    "end": "2974900"
  },
  {
    "text": "Python implementation of this detection approach that I mentioned today available in our skunk works repo you",
    "start": "2974900",
    "end": "2981950"
  },
  {
    "text": "can go run this on historical data hook it up in a hat make the changes everything's in memory with this one so",
    "start": "2981950",
    "end": "2989000"
  },
  {
    "text": "if you wanted to actually go deploy it in lambda you need to go implement the Don mo back in for that but it's at",
    "start": "2989000",
    "end": "2994640"
  },
  {
    "text": "least a reference piece of code to actually go play with on your cloud roll",
    "start": "2994640",
    "end": "3000150"
  },
  {
    "text": "so hopefully you can provide that or find that very useful and then lastly today we flip the switch on an example",
    "start": "3000150",
    "end": "3006280"
  },
  {
    "text": "metadata proxy it's written in golang it's I think a hundred lines of go it's",
    "start": "3006280",
    "end": "3011830"
  },
  {
    "text": "literally set up get clone CD into the repo go build and then go run the binary on your platform it's very simplistic",
    "start": "3011830",
    "end": "3018970"
  },
  {
    "text": "very easy it blocks traffic you can take that as as source of truth or you can go",
    "start": "3018970",
    "end": "3025840"
  },
  {
    "text": "modify and change to your will for logging and all the various different things but this is something that you",
    "start": "3025840",
    "end": "3030940"
  },
  {
    "text": "can actually take and try out in your environment today to start protecting your metadata service and with that",
    "start": "3030940",
    "end": "3037060"
  },
  {
    "text": "please complete your mobile surveys and I'm open for any questions you all have but thank you for coming",
    "start": "3037060",
    "end": "3043850"
  },
  {
    "text": "[Applause]",
    "start": "3043850",
    "end": "3051580"
  }
]