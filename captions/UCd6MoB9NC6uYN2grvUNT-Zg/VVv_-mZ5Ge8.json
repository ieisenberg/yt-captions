[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "hey this is Kirk from the dynamodb team",
    "start": "299",
    "end": "2220"
  },
  {
    "text": "and today we are talking about change",
    "start": "2220",
    "end": "3659"
  },
  {
    "text": "data capture for dynamodb",
    "start": "3659",
    "end": "5759"
  },
  {
    "text": "change data capture for Amazon dynamodb",
    "start": "5759",
    "end": "8460"
  },
  {
    "text": "or as some people call it CDC replicates",
    "start": "8460",
    "end": "11519"
  },
  {
    "text": "all item level modifications to a data",
    "start": "11519",
    "end": "13920"
  },
  {
    "text": "stream for you",
    "start": "13920",
    "end": "15059"
  },
  {
    "text": "it's an optional feature so you will",
    "start": "15059",
    "end": "16980"
  },
  {
    "text": "have to enable it in order to use it",
    "start": "16980",
    "end": "19320"
  },
  {
    "text": "CDC for dynamodb comes in two flavors",
    "start": "19320",
    "end": "22039"
  },
  {
    "text": "dynamodb streams and Kinesis data",
    "start": "22039",
    "end": "24840"
  },
  {
    "text": "streams for dynamodb each flavor has",
    "start": "24840",
    "end": "27599"
  },
  {
    "text": "their pros and cons you need to be aware",
    "start": "27599",
    "end": "29279"
  },
  {
    "text": "of and we will get into the specifics of",
    "start": "29279",
    "end": "31260"
  },
  {
    "text": "that in this video",
    "start": "31260",
    "end": "33960"
  },
  {
    "text": "let's first talk about what change data",
    "start": "33960",
    "end": "36239"
  },
  {
    "start": "34000",
    "end": "152000"
  },
  {
    "text": "capture is used for",
    "start": "36239",
    "end": "37920"
  },
  {
    "text": "the first one is database triggers now",
    "start": "37920",
    "end": "40500"
  },
  {
    "text": "unlike a traditional relational database",
    "start": "40500",
    "end": "42480"
  },
  {
    "text": "management system dynamodb does not keep",
    "start": "42480",
    "end": "45120"
  },
  {
    "text": "triggers with the database itself",
    "start": "45120",
    "end": "47219"
  },
  {
    "text": "the reason for this is beyond the scope",
    "start": "47219",
    "end": "48719"
  },
  {
    "text": "of the video but the functionality of",
    "start": "48719",
    "end": "50460"
  },
  {
    "text": "triggers is definitely still there in",
    "start": "50460",
    "end": "51960"
  },
  {
    "text": "dynamodb it involves the use of dynamodb",
    "start": "51960",
    "end": "54899"
  },
  {
    "text": "streams and AWS Lambda",
    "start": "54899",
    "end": "57420"
  },
  {
    "text": "you enable streams then enable Lambda to",
    "start": "57420",
    "end": "59940"
  },
  {
    "text": "listen to that stream",
    "start": "59940",
    "end": "61379"
  },
  {
    "text": "Pro tip check out event filters with",
    "start": "61379",
    "end": "63420"
  },
  {
    "text": "Lambda when enabled they filter through",
    "start": "63420",
    "end": "65700"
  },
  {
    "text": "a stream in real time looking for",
    "start": "65700",
    "end": "67560"
  },
  {
    "text": "specific data or events you tell it to",
    "start": "67560",
    "end": "69720"
  },
  {
    "text": "and only invoke a Lambda function when",
    "start": "69720",
    "end": "72119"
  },
  {
    "text": "the filter is satisfied since the",
    "start": "72119",
    "end": "74220"
  },
  {
    "text": "filtering logic is not in the Lambda",
    "start": "74220",
    "end": "76259"
  },
  {
    "text": "function itself doing this can save you",
    "start": "76259",
    "end": "78420"
  },
  {
    "text": "a lot of coding and money",
    "start": "78420",
    "end": "80820"
  },
  {
    "text": "the next use case is complex",
    "start": "80820",
    "end": "82680"
  },
  {
    "text": "aggregations",
    "start": "82680",
    "end": "83939"
  },
  {
    "text": "there are times where you want to be",
    "start": "83939",
    "end": "85500"
  },
  {
    "text": "able to do complex roll-up aggregations",
    "start": "85500",
    "end": "87180"
  },
  {
    "text": "on data and they are faster cheaper and",
    "start": "87180",
    "end": "90000"
  },
  {
    "text": "scale better to do outside of dynamodb",
    "start": "90000",
    "end": "93119"
  },
  {
    "text": "for example say you need to increment a",
    "start": "93119",
    "end": "95700"
  },
  {
    "text": "value for a user when they add a new",
    "start": "95700",
    "end": "97560"
  },
  {
    "text": "document to an app I could have a Lambda",
    "start": "97560",
    "end": "100320"
  },
  {
    "text": "watching for objects of that type in a",
    "start": "100320",
    "end": "102720"
  },
  {
    "text": "dynamodb stream and then increment a",
    "start": "102720",
    "end": "104759"
  },
  {
    "text": "value in the database for that user when",
    "start": "104759",
    "end": "107280"
  },
  {
    "text": "that happens",
    "start": "107280",
    "end": "108840"
  },
  {
    "text": "these kind of aggregation scale",
    "start": "108840",
    "end": "110579"
  },
  {
    "text": "exceptionally well as compared to doing",
    "start": "110579",
    "end": "112259"
  },
  {
    "text": "a more complex aggregations like you",
    "start": "112259",
    "end": "114119"
  },
  {
    "text": "were used to doing in other databases",
    "start": "114119",
    "end": "116700"
  },
  {
    "text": "another example is streaming your data",
    "start": "116700",
    "end": "118740"
  },
  {
    "text": "to other AWS services to do more things",
    "start": "118740",
    "end": "121380"
  },
  {
    "text": "for example you use dynamodb for",
    "start": "121380",
    "end": "123719"
  },
  {
    "text": "high-speed low latency data access but",
    "start": "123719",
    "end": "126299"
  },
  {
    "text": "there are times when you need other",
    "start": "126299",
    "end": "127500"
  },
  {
    "text": "specific functionality using that same",
    "start": "127500",
    "end": "129479"
  },
  {
    "text": "data maybe you're interested in using",
    "start": "129479",
    "end": "131640"
  },
  {
    "text": "sagemaker to do some machine learning on",
    "start": "131640",
    "end": "133860"
  },
  {
    "text": "that same data you can stream the data",
    "start": "133860",
    "end": "136379"
  },
  {
    "text": "with Kinesis data streams for dynamodb",
    "start": "136379",
    "end": "138660"
  },
  {
    "text": "to services like Amazon simple storage",
    "start": "138660",
    "end": "140700"
  },
  {
    "text": "Service open search service redshift and",
    "start": "140700",
    "end": "143879"
  },
  {
    "text": "others to do different things with data",
    "start": "143879",
    "end": "145739"
  },
  {
    "text": "that you already have one additional",
    "start": "145739",
    "end": "148020"
  },
  {
    "text": "note here is that both flavors of CDC",
    "start": "148020",
    "end": "150120"
  },
  {
    "text": "offer encryption at rest",
    "start": "150120",
    "end": "152400"
  },
  {
    "start": "152000",
    "end": "229000"
  },
  {
    "text": "let's jump into the first flavor of CDC",
    "start": "152400",
    "end": "154560"
  },
  {
    "text": "for dynamodb dynamodb streams dynamodb",
    "start": "154560",
    "end": "158220"
  },
  {
    "text": "streams captures a time-ordered sequence",
    "start": "158220",
    "end": "160560"
  },
  {
    "text": "of item level modifications to a table",
    "start": "160560",
    "end": "162420"
  },
  {
    "text": "and stores this information in a log for",
    "start": "162420",
    "end": "164819"
  },
  {
    "text": "up to 24 hours",
    "start": "164819",
    "end": "166440"
  },
  {
    "text": "your application can in near real time",
    "start": "166440",
    "end": "168660"
  },
  {
    "text": "access the stream and view the items as",
    "start": "168660",
    "end": "171060"
  },
  {
    "text": "they appeared before and after they were",
    "start": "171060",
    "end": "172920"
  },
  {
    "text": "modified",
    "start": "172920",
    "end": "173940"
  },
  {
    "text": "whenever an application creates updates",
    "start": "173940",
    "end": "176040"
  },
  {
    "text": "or deletes items in the table dynamodb",
    "start": "176040",
    "end": "178319"
  },
  {
    "text": "writes to the stream what is called a",
    "start": "178319",
    "end": "180300"
  },
  {
    "text": "stream record a stream record contains",
    "start": "180300",
    "end": "182519"
  },
  {
    "text": "information about a modification to a",
    "start": "182519",
    "end": "184440"
  },
  {
    "text": "single item in a table dynamodb streams",
    "start": "184440",
    "end": "187200"
  },
  {
    "text": "helps ensure that each stream record",
    "start": "187200",
    "end": "189180"
  },
  {
    "text": "appears exactly Once In The Stream and",
    "start": "189180",
    "end": "192360"
  },
  {
    "text": "that the stream record appears in the",
    "start": "192360",
    "end": "194099"
  },
  {
    "text": "same sequence as the actual modification",
    "start": "194099",
    "end": "196140"
  },
  {
    "text": "to that item my favorite feature is when",
    "start": "196140",
    "end": "198840"
  },
  {
    "text": "doing database triggers and using AWS",
    "start": "198840",
    "end": "201480"
  },
  {
    "text": "Lambda on the dynamodb stream reads are",
    "start": "201480",
    "end": "204360"
  },
  {
    "text": "always free",
    "start": "204360",
    "end": "205680"
  },
  {
    "text": "combine that with Wham is a vent",
    "start": "205680",
    "end": "207540"
  },
  {
    "text": "filtering so you only invoke functions",
    "start": "207540",
    "end": "209519"
  },
  {
    "text": "in those specific circumstances and you",
    "start": "209519",
    "end": "212040"
  },
  {
    "text": "can get a lot of serious functionality",
    "start": "212040",
    "end": "213659"
  },
  {
    "text": "for very little money",
    "start": "213659",
    "end": "215340"
  },
  {
    "text": "for any other reads of dynamodb streams",
    "start": "215340",
    "end": "217620"
  },
  {
    "text": "the first 2.5 million reads every month",
    "start": "217620",
    "end": "220019"
  },
  {
    "text": "are free",
    "start": "220019",
    "end": "221159"
  },
  {
    "text": "for more specifics on the cost component",
    "start": "221159",
    "end": "222959"
  },
  {
    "text": "of change data capture please be sure to",
    "start": "222959",
    "end": "225060"
  },
  {
    "text": "check the link in the description to the",
    "start": "225060",
    "end": "226440"
  },
  {
    "text": "video for the documentation",
    "start": "226440",
    "end": "228239"
  },
  {
    "text": "now let's talk about some of the",
    "start": "228239",
    "end": "229799"
  },
  {
    "start": "229000",
    "end": "304000"
  },
  {
    "text": "specifics of Kinesis data streams for",
    "start": "229799",
    "end": "231599"
  },
  {
    "text": "dynamodb with KDs for dynamodb it allows",
    "start": "231599",
    "end": "235080"
  },
  {
    "text": "you to replicate data directly from",
    "start": "235080",
    "end": "236700"
  },
  {
    "text": "dynamodb into Kinesis data fire hose",
    "start": "236700",
    "end": "239340"
  },
  {
    "text": "this matters because you can direct",
    "start": "239340",
    "end": "241439"
  },
  {
    "text": "Kinesis data fire hose at other services",
    "start": "241439",
    "end": "243540"
  },
  {
    "text": "for near real-time data streaming",
    "start": "243540",
    "end": "246599"
  },
  {
    "text": "the most common is pushing data to",
    "start": "246599",
    "end": "248760"
  },
  {
    "text": "Amazon S3 for use with Athena and",
    "start": "248760",
    "end": "251640"
  },
  {
    "text": "machine learning products such as",
    "start": "251640",
    "end": "253019"
  },
  {
    "text": "sagemaker a few things to note about KDs",
    "start": "253019",
    "end": "255900"
  },
  {
    "text": "first off data changes are inserted into",
    "start": "255900",
    "end": "258299"
  },
  {
    "text": "Kinesis data stream records",
    "start": "258299",
    "end": "259739"
  },
  {
    "text": "asynchronously and might appear in a",
    "start": "259739",
    "end": "261959"
  },
  {
    "text": "different sequence than the item changes",
    "start": "261959",
    "end": "264000"
  },
  {
    "text": "occurred in dynamodb",
    "start": "264000",
    "end": "266160"
  },
  {
    "text": "in addition it is possible for the same",
    "start": "266160",
    "end": "268919"
  },
  {
    "text": "item notifications to appear more than",
    "start": "268919",
    "end": "270900"
  },
  {
    "text": "once in a stream if you need to identify",
    "start": "270900",
    "end": "273540"
  },
  {
    "text": "the actual order that the item",
    "start": "273540",
    "end": "275100"
  },
  {
    "text": "modifications occurred check the",
    "start": "275100",
    "end": "277380"
  },
  {
    "text": "approximate creation date time attribute",
    "start": "277380",
    "end": "279419"
  },
  {
    "text": "of the stream record for more specifics",
    "start": "279419",
    "end": "281759"
  },
  {
    "text": "on this check out the change data",
    "start": "281759",
    "end": "283199"
  },
  {
    "text": "capture for dynamodb documentation",
    "start": "283199",
    "end": "285000"
  },
  {
    "text": "Linked In the description",
    "start": "285000",
    "end": "286800"
  },
  {
    "text": "quick tip for you when you create a",
    "start": "286800",
    "end": "288900"
  },
  {
    "text": "Kinesis data stream it's a good idea to",
    "start": "288900",
    "end": "290820"
  },
  {
    "text": "create the stream in on-demand sharding",
    "start": "290820",
    "end": "292500"
  },
  {
    "text": "mode not provision mode and then once",
    "start": "292500",
    "end": "295020"
  },
  {
    "text": "you run it for a while and get some",
    "start": "295020",
    "end": "296520"
  },
  {
    "text": "performance metrics and know how many",
    "start": "296520",
    "end": "298500"
  },
  {
    "text": "stream shards you'll need then perhaps",
    "start": "298500",
    "end": "300539"
  },
  {
    "text": "look to switching to provision mode to",
    "start": "300539",
    "end": "302639"
  },
  {
    "text": "save money",
    "start": "302639",
    "end": "303960"
  },
  {
    "text": "and now it is time to do a quick demo to",
    "start": "303960",
    "end": "306000"
  },
  {
    "start": "304000",
    "end": "344000"
  },
  {
    "text": "show you exactly how to turn on change",
    "start": "306000",
    "end": "307680"
  },
  {
    "text": "data capture for dynamodb I'm on the",
    "start": "307680",
    "end": "310320"
  },
  {
    "text": "export and streams tab of my table I'm",
    "start": "310320",
    "end": "312600"
  },
  {
    "text": "going to click enable",
    "start": "312600",
    "end": "314280"
  },
  {
    "text": "I already have an existing stream here",
    "start": "314280",
    "end": "316199"
  },
  {
    "text": "so I'm going to select that one but you",
    "start": "316199",
    "end": "317940"
  },
  {
    "text": "could create one new here if you wanted",
    "start": "317940",
    "end": "319440"
  },
  {
    "text": "to",
    "start": "319440",
    "end": "320340"
  },
  {
    "text": "I'm going to click enable stream and now",
    "start": "320340",
    "end": "322860"
  },
  {
    "text": "it is enabling",
    "start": "322860",
    "end": "324539"
  },
  {
    "text": "I'm then going to enable the dynamodb",
    "start": "324539",
    "end": "326940"
  },
  {
    "text": "streams",
    "start": "326940",
    "end": "328139"
  },
  {
    "text": "in this case I'm going to turn on new",
    "start": "328139",
    "end": "329940"
  },
  {
    "text": "and old image so all item changes are in",
    "start": "329940",
    "end": "332100"
  },
  {
    "text": "the Stream but for which option is best",
    "start": "332100",
    "end": "334080"
  },
  {
    "text": "for your workload please check the",
    "start": "334080",
    "end": "335580"
  },
  {
    "text": "documentation",
    "start": "335580",
    "end": "336900"
  },
  {
    "text": "I click enable stream and it is now",
    "start": "336900",
    "end": "339840"
  },
  {
    "text": "enabled as well that's how easy it is",
    "start": "339840",
    "end": "343740"
  },
  {
    "text": "in summary change data capture for",
    "start": "343740",
    "end": "345660"
  },
  {
    "start": "344000",
    "end": "376000"
  },
  {
    "text": "dynamodb comes in two options dynamodb",
    "start": "345660",
    "end": "348660"
  },
  {
    "text": "streams and Kinesis data streams for",
    "start": "348660",
    "end": "350580"
  },
  {
    "text": "dynamodb",
    "start": "350580",
    "end": "352139"
  },
  {
    "text": "use change data capture for dynamodb for",
    "start": "352139",
    "end": "355199"
  },
  {
    "text": "things like database triggers with AWS",
    "start": "355199",
    "end": "357060"
  },
  {
    "text": "Lambda and integrating your existing",
    "start": "357060",
    "end": "359039"
  },
  {
    "text": "data with other AWS and third-party",
    "start": "359039",
    "end": "361440"
  },
  {
    "text": "services",
    "start": "361440",
    "end": "363600"
  },
  {
    "text": "thanks to be on the lookout for more",
    "start": "363600",
    "end": "364979"
  },
  {
    "text": "core concept videos here and on our",
    "start": "364979",
    "end": "366900"
  },
  {
    "text": "Twitter handle at dynamodb",
    "start": "366900",
    "end": "370639"
  }
]