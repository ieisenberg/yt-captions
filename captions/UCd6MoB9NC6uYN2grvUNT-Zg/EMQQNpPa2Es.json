[
  {
    "text": "- [Instructor] Hello.",
    "start": "540",
    "end": "1373"
  },
  {
    "text": "Today I'm gonna talk about\nanalyzing CloudWatch logs",
    "start": "1373",
    "end": "3750"
  },
  {
    "text": "with the Amazon OpenSearch service.",
    "start": "3750",
    "end": "6480"
  },
  {
    "text": "We have a new query language support",
    "start": "6480",
    "end": "9570"
  },
  {
    "text": "using OpenSearch PPL or OpenSearch SQL.",
    "start": "9570",
    "end": "12840"
  },
  {
    "text": "The two new query languages are SQL,",
    "start": "12840",
    "end": "14940"
  },
  {
    "text": "which is an industry standard\nfamiliar syntax language",
    "start": "14940",
    "end": "17970"
  },
  {
    "text": "and PPL or Piped Processing Language,",
    "start": "17970",
    "end": "20730"
  },
  {
    "text": "which is a pipeline-based analysis tool.",
    "start": "20730",
    "end": "23340"
  },
  {
    "text": "These both compliment",
    "start": "23340",
    "end": "24270"
  },
  {
    "text": "the existing CloudWatch\nLogs Insights query syntax.",
    "start": "24270",
    "end": "27390"
  },
  {
    "text": "You can use these independently\nfor different use cases.",
    "start": "27390",
    "end": "31050"
  },
  {
    "text": "For example, you can use the\nfamiliar syntax for SQL users,",
    "start": "31050",
    "end": "34800"
  },
  {
    "text": "or you can do powerful data\ntransformation using PPL.",
    "start": "34800",
    "end": "38970"
  },
  {
    "text": "When it comes to SQL, we\ncan walk through a handful",
    "start": "38970",
    "end": "41370"
  },
  {
    "text": "of example queries.",
    "start": "41370",
    "end": "42989"
  },
  {
    "text": "You've got your basic selection.",
    "start": "42990",
    "end": "44760"
  },
  {
    "text": "Select something from somewhere",
    "start": "44760",
    "end": "46739"
  },
  {
    "text": "where some criteria is matched.",
    "start": "46740",
    "end": "49353"
  },
  {
    "text": "You can also get to aggregation,\nwhich is selecting account",
    "start": "50250",
    "end": "53880"
  },
  {
    "text": "as something from somewhere",
    "start": "53880",
    "end": "55830"
  },
  {
    "text": "and group it by some parameter.",
    "start": "55830",
    "end": "58620"
  },
  {
    "text": "And then you've got pattern matching.",
    "start": "58620",
    "end": "60600"
  },
  {
    "text": "Select everything from somewhere\nwhere there are messages",
    "start": "60600",
    "end": "64260"
  },
  {
    "text": "that match some characteristic.",
    "start": "64260",
    "end": "67080"
  },
  {
    "text": "OpenSearch PPL, or the\nPiped Processing Language,",
    "start": "67080",
    "end": "69720"
  },
  {
    "text": "is a query language that\nprocesses data through a series",
    "start": "69720",
    "end": "72090"
  },
  {
    "text": "of commands connected by pipes.",
    "start": "72090",
    "end": "74880"
  },
  {
    "text": "This is similar to Unix",
    "start": "74880",
    "end": "76259"
  },
  {
    "text": "or Linux pipelines, making\nit very intuitive for DevOps",
    "start": "76260",
    "end": "79320"
  },
  {
    "text": "and system administrators.",
    "start": "79320",
    "end": "81120"
  },
  {
    "text": "Some examples of PPL queries.",
    "start": "81120",
    "end": "83400"
  },
  {
    "text": "Let's do some an error analysis.",
    "start": "83400",
    "end": "85080"
  },
  {
    "text": "We're gonna take our logs,\nwe're going to pipe that",
    "start": "85080",
    "end": "88260"
  },
  {
    "text": "and look for level as error,",
    "start": "88260",
    "end": "91110"
  },
  {
    "text": "and then we're gonna take that output",
    "start": "91110",
    "end": "92970"
  },
  {
    "text": "and we're going to count it by timestamp",
    "start": "92970",
    "end": "96180"
  },
  {
    "text": "for every five minutes.",
    "start": "96180",
    "end": "98160"
  },
  {
    "text": "In this next one, we're going",
    "start": "98160",
    "end": "99330"
  },
  {
    "text": "to look at response time analysis.",
    "start": "99330",
    "end": "101640"
  },
  {
    "text": "We're gonna take our logs,\nwe're gonna parse our message",
    "start": "101640",
    "end": "104640"
  },
  {
    "text": "to look for milliseconds,",
    "start": "104640",
    "end": "106680"
  },
  {
    "text": "and then we're going to\naverage those milliseconds",
    "start": "106680",
    "end": "109440"
  },
  {
    "text": "by the service name.",
    "start": "109440",
    "end": "111060"
  },
  {
    "text": "In this next and final example,",
    "start": "111060",
    "end": "112710"
  },
  {
    "text": "we're gonna look for our top issues.",
    "start": "112710",
    "end": "115080"
  },
  {
    "text": "We're gonna take our logs,\nwe're gonna pipe that",
    "start": "115080",
    "end": "116850"
  },
  {
    "text": "and look for errors.",
    "start": "116850",
    "end": "118170"
  },
  {
    "text": "We're gonna count by error code.",
    "start": "118170",
    "end": "120960"
  },
  {
    "text": "We're gonna sort the count descending,",
    "start": "120960",
    "end": "123750"
  },
  {
    "text": "and we're gonna get the top five.",
    "start": "123750",
    "end": "126120"
  },
  {
    "text": "Now I'm gonna walk you through",
    "start": "126120",
    "end": "127230"
  },
  {
    "text": "how to navigate the new query\ninterface in the console.",
    "start": "127230",
    "end": "131280"
  },
  {
    "text": "So I'm gonna go to CloudWatch.",
    "start": "131280",
    "end": "133319"
  },
  {
    "text": "Next, I'm gonna go to Logs,\nand then Log Insights.",
    "start": "133320",
    "end": "137790"
  },
  {
    "text": "Now, once in Log Insights,",
    "start": "137790",
    "end": "138900"
  },
  {
    "text": "we have the CloudWatch\nLogs query language.",
    "start": "138900",
    "end": "142739"
  },
  {
    "text": "We now have new query\nlanguages for OpenSearch PPL",
    "start": "142740",
    "end": "146160"
  },
  {
    "text": "and OpenSearch SQL.",
    "start": "146160",
    "end": "148620"
  },
  {
    "text": "You can click on either of these",
    "start": "148620",
    "end": "150569"
  },
  {
    "text": "and you have your standard set of options.",
    "start": "150570",
    "end": "153960"
  },
  {
    "text": "You can look at things\nlike sample queries.",
    "start": "153960",
    "end": "156630"
  },
  {
    "text": "We can take a look at the common queries.",
    "start": "156630",
    "end": "158820"
  },
  {
    "text": "For example, there's this 25\nmost recently added log events.",
    "start": "158820",
    "end": "162240"
  },
  {
    "text": "You can apply that.",
    "start": "162240",
    "end": "163800"
  },
  {
    "text": "You pick your log group",
    "start": "163800",
    "end": "165520"
  },
  {
    "text": "and run your query.",
    "start": "170580",
    "end": "172320"
  },
  {
    "text": "Once your query is returned,",
    "start": "172320",
    "end": "173853"
  },
  {
    "text": "you'll see the most recent additions.",
    "start": "177180",
    "end": "180780"
  },
  {
    "text": "You can also save your\nqueries just like you can",
    "start": "180780",
    "end": "183540"
  },
  {
    "text": "with the CloudWatch Logs query language.",
    "start": "183540",
    "end": "187049"
  },
  {
    "text": "You can also discover fields.",
    "start": "187050",
    "end": "188853"
  },
  {
    "text": "You can go and doing the same\nthing with the OpenSearch SQL.",
    "start": "189750",
    "end": "192753"
  },
  {
    "text": "We can look at saved and sample\nqueries, and in this case,",
    "start": "193740",
    "end": "196380"
  },
  {
    "text": "you're going to see some\nmore interesting ones",
    "start": "196380",
    "end": "198990"
  },
  {
    "text": "that explore the power of the SQL.",
    "start": "198990",
    "end": "202200"
  },
  {
    "text": "For example, find the\nintersection of elements",
    "start": "202200",
    "end": "205800"
  },
  {
    "text": "for two columns based on an event name.",
    "start": "205800",
    "end": "208380"
  },
  {
    "text": "Now this requires you to\nhave logs that allow you",
    "start": "208380",
    "end": "211320"
  },
  {
    "text": "to find that, but there\nare examples in here",
    "start": "211320",
    "end": "215430"
  },
  {
    "text": "that you can see that\nallow you to get started.",
    "start": "215430",
    "end": "219450"
  },
  {
    "text": "If at any point you are\ninterested in understanding",
    "start": "219450",
    "end": "222180"
  },
  {
    "text": "where all the different commands,",
    "start": "222180",
    "end": "223349"
  },
  {
    "text": "there is this also query commands,",
    "start": "223350",
    "end": "225390"
  },
  {
    "text": "and this will give you\nthe full suite of things",
    "start": "225390",
    "end": "228120"
  },
  {
    "text": "that are available for each\nof the query languages.",
    "start": "228120",
    "end": "230853"
  }
]