[
  {
    "text": "and yeah welcome to reinvent and thank you very much for joining us here we",
    "start": "0",
    "end": "5069"
  },
  {
    "text": "actually got two upgrades today first upgrade we got a bigger room thank you very much for making this session so popular and so many faces here and",
    "start": "5069",
    "end": "12380"
  },
  {
    "text": "second operate is this is the third time we doing this session together Marcus and I and we usually have to do this on",
    "start": "12380",
    "end": "18869"
  },
  {
    "text": "Friday 9:00 a.m. in the morning right after the party which is not the most popular spot so thank you very much to",
    "start": "18869",
    "end": "25830"
  },
  {
    "text": "the reinvent organizers for giving us a spot on Tuesday so yeah this is going to be jam-packed with advice here so let's",
    "start": "25830",
    "end": "32820"
  },
  {
    "text": "starts right away this is about all about paying for your next trip",
    "start": "32820",
    "end": "38910"
  },
  {
    "text": "treatment so our goal is always to help you save so much money on your AWS bill so that the next trip next year to",
    "start": "38910",
    "end": "45210"
  },
  {
    "text": "Raymond is gonna pay for itself and so this is what we're going to cover here we're going to cover some best practices",
    "start": "45210",
    "end": "51930"
  },
  {
    "text": "on how to lower your AWS bill but at the same time this will help you to build a",
    "start": "51930",
    "end": "57090"
  },
  {
    "text": "more robust more scalable dynamic architecture and it will also not only",
    "start": "57090",
    "end": "62399"
  },
  {
    "text": "pay back in money but it also pay back in time you will gain more time to innovate and to really build something",
    "start": "62399",
    "end": "69780"
  },
  {
    "text": "that is part of your company and not just reinventing wheels and and wasting your efforts we're going to learn from",
    "start": "69780",
    "end": "75659"
  },
  {
    "text": "some real-world customer examples and then I have Marcus ostatic here from Team internet and most of the things",
    "start": "75659",
    "end": "81570"
  },
  {
    "text": "we're gonna talk about are going to be very easy to implement so have your notes ready take some notes and then as",
    "start": "81570",
    "end": "87240"
  },
  {
    "text": "you walk out here in about an hour you'll have a couple of ideas that you can implement right right away we",
    "start": "87240",
    "end": "95189"
  },
  {
    "text": "structured this talk in three levels so there's gonna be content for you business people out there so who's the",
    "start": "95189",
    "end": "101009"
  },
  {
    "text": "manager or who is kind of like more than on the business side of things okay cool so stuff that you can talk to your",
    "start": "101009",
    "end": "106770"
  },
  {
    "text": "manager about most of the talk is going to be about architecture and we also cover some of the operational aspects",
    "start": "106770",
    "end": "113399"
  },
  {
    "text": "here so if you ask your manager about their business goals then they will probably tell you okay let's pay as",
    "start": "113399",
    "end": "119850"
  },
  {
    "text": "little as possible for what we use these are the people that are always sitting on budgets here and the good news is",
    "start": "119850",
    "end": "125250"
  },
  {
    "text": "that you don't have to do anything and you can save money by not doing anything",
    "start": "125250",
    "end": "131280"
  },
  {
    "text": "because it is part of our philosophy to lower prices all the time because whenever we reduce prices we get to see",
    "start": "131280",
    "end": "139200"
  },
  {
    "text": "more customers on our platform which means we will see more AWS usage which means we get to build more",
    "start": "139200",
    "end": "144810"
  },
  {
    "text": "infrastructure and that means that we can enjoy better economies of scale which allows us to lower infrastructure",
    "start": "144810",
    "end": "150330"
  },
  {
    "text": "costs and our policy is to give those savings back to customers which helps us reduce prices there are two clickers",
    "start": "150330",
    "end": "157890"
  },
  {
    "text": "here that accelerate this wheel first of it of them is the more AWS users we see",
    "start": "157890",
    "end": "162900"
  },
  {
    "text": "the bigger the ecosystem gets more partners bigger global footprint new features new services and the second",
    "start": "162900",
    "end": "169950"
  },
  {
    "text": "thing is as we lower our infrastructure cost we can actually do things in our infrastructure that other companies can",
    "start": "169950",
    "end": "177299"
  },
  {
    "text": "do because they don't have the critical mass and a great example is James Hamilton that last year showed us how",
    "start": "177299",
    "end": "182910"
  },
  {
    "text": "how we are building our own cable across oceans to optimize our network so without doing anything you are already",
    "start": "182910",
    "end": "189480"
  },
  {
    "text": "saving money because by applying these principles we have reduced our prices 63",
    "start": "189480",
    "end": "195150"
  },
  {
    "text": "times since AWS got started in 2006 so who is already using AWS in some way or",
    "start": "195150",
    "end": "201989"
  },
  {
    "text": "other cool if you didn't lift your hands your managers gonna probably ask you to",
    "start": "201989",
    "end": "207030"
  },
  {
    "text": "do a TCO calculation and we have a tool for that too so you can go to the a WCCO calculator comm website plug in the",
    "start": "207030",
    "end": "213900"
  },
  {
    "text": "numbers for your existing data center or colocation servers and it will give you a TCO study with all of the",
    "start": "213900",
    "end": "221220"
  },
  {
    "text": "documentation that you need to help understand the cost on AWS versus the cost on premises and these are not",
    "start": "221220",
    "end": "227340"
  },
  {
    "text": "synthetic marketing numbers these are real-world numbers from real analysts and we give you all of the based data",
    "start": "227340",
    "end": "233190"
  },
  {
    "text": "that we had all of the assumptions and basic data so that you can tweak those assumptions and just if and just adjust",
    "start": "233190",
    "end": "238709"
  },
  {
    "text": "to your actual usage and actual licensing cost and whatever the other",
    "start": "238709",
    "end": "243720"
  },
  {
    "text": "thing is that I would highly encourage you to set up your a SS building alarms this will give you an early warning if",
    "start": "243720",
    "end": "249900"
  },
  {
    "text": "you're an obvious bill is reaching some predefined level so that you get more visibility of your AWS usage and you get",
    "start": "249900",
    "end": "256019"
  },
  {
    "text": "this even broken down by individual service so you can always monitor your cost service by service and see if it is",
    "start": "256019",
    "end": "262800"
  },
  {
    "text": "in line with your expectations and another great thing and this is something has been upgraded and improved over time",
    "start": "262800",
    "end": "269190"
  },
  {
    "text": "as the eight of us billing dashboard which gives you an every time great transparency on your AWS cost and this",
    "start": "269190",
    "end": "275520"
  },
  {
    "text": "is probably something very interesting for your manager it's actually my own personal billing dashboard and the other",
    "start": "275520",
    "end": "281160"
  },
  {
    "text": "thing that I would like to encourage you to check out is the ADA bias cost Explorer which lets you drill down all",
    "start": "281160",
    "end": "286800"
  },
  {
    "text": "of your monthly bills for the last couple of months and identify where are the biggest bits where you can save",
    "start": "286800",
    "end": "292920"
  },
  {
    "text": "money what are the services that yeah that create the biggest cost and where",
    "start": "292920",
    "end": "297990"
  },
  {
    "text": "you should optimize first so speaking of drilling down your bills",
    "start": "297990",
    "end": "303110"
  },
  {
    "text": "let's start talking to Marcus here because Marcus is one of the biggest experts I know about drilling down into",
    "start": "303110",
    "end": "309630"
  },
  {
    "text": "his own AWS bill thank you this is on oh yeah so yeah as constant you just",
    "start": "309630",
    "end": "316980"
  },
  {
    "text": "mentioned I'm Marcus also tech VP of engineering at Tim Internet and as we have a lot of things to cover I just",
    "start": "316980",
    "end": "323100"
  },
  {
    "text": "want to go very very shortly about who is Tim Internet we are one of the leading companies in a",
    "start": "323100",
    "end": "328200"
  },
  {
    "text": "domain monetization business we're only 35 people our headquarters is in Munich Germany and we are very very tech",
    "start": "328200",
    "end": "334890"
  },
  {
    "text": "focused so we're always trying to leverage tech as much as possible and scale only with in tech and not with",
    "start": "334890",
    "end": "340320"
  },
  {
    "text": "people costs are obviously a big thing for us we need to make sure that we",
    "start": "340320",
    "end": "346020"
  },
  {
    "text": "don't spend more than we actually need to and that's why we diving deep into",
    "start": "346020",
    "end": "351540"
  },
  {
    "text": "our bill and we're you in our case we're using data not for that I don't want to",
    "start": "351540",
    "end": "357120"
  },
  {
    "text": "emphasize so much about their dog it's more about that all your billing metrics are inside of cloud watch and they are",
    "start": "357120",
    "end": "363930"
  },
  {
    "text": "available to you so for us data takes the job of pulling those metrics out of",
    "start": "363930",
    "end": "369750"
  },
  {
    "text": "cloud watch and we build out a dashboard inside of our monitoring tool to be able",
    "start": "369750",
    "end": "375030"
  },
  {
    "text": "to correlate our tech metrics and our tech alerts to our billing metrics so",
    "start": "375030",
    "end": "381480"
  },
  {
    "text": "that we're able to see if something happens inside of our billing like more easy to spend more spend on the",
    "start": "381480",
    "end": "387990"
  },
  {
    "text": "databases more spend on DynamoDB all this kind of stuff how is this correlated to something we're seeing",
    "start": "387990",
    "end": "393300"
  },
  {
    "text": "inside of our application and inside of our metrics and that's this gives us a great deep dive into",
    "start": "393300",
    "end": "400560"
  },
  {
    "text": "is really happening in our application but also what kind of cost effect has that for us so as I said this is one of",
    "start": "400560",
    "end": "408150"
  },
  {
    "text": "our dashboards we're having here we're using multiple accounts at AWS and call consolidate them under one so on the top",
    "start": "408150",
    "end": "415320"
  },
  {
    "text": "left you see the different accounts what kind of costs they have on the top right",
    "start": "415320",
    "end": "420389"
  },
  {
    "text": "you're seeing the different services which is important to know which are the services you really spend the most or",
    "start": "420389",
    "end": "426900"
  },
  {
    "text": "how much do you spend on the different services and then on the lower row you",
    "start": "426900",
    "end": "432000"
  },
  {
    "text": "have the top spenders on the left side and also the comparison to the last",
    "start": "432000",
    "end": "438540"
  },
  {
    "text": "month and that for us is very very important because most of the time you",
    "start": "438540",
    "end": "443760"
  },
  {
    "text": "will have some kind of a stable baseline and then you will see something like okay nearly all services will cost",
    "start": "443760",
    "end": "450990"
  },
  {
    "text": "exactly the same than what it was last month right if there's something going wrong or it might also be good because",
    "start": "450990",
    "end": "458010"
  },
  {
    "text": "if you're scaling things up then hopefully you earn more money with the application and then that's totally fine",
    "start": "458010",
    "end": "464460"
  },
  {
    "text": "but those are kind of the triggers we're looking at like why is this service spending more money than it spent last",
    "start": "464460",
    "end": "470640"
  },
  {
    "text": "month and then we could actually look into that okay this is correlated to this change in our application or we",
    "start": "470640",
    "end": "477330"
  },
  {
    "text": "just have more requests on our application and stuff like that so the tip from my side here is really monitor",
    "start": "477330",
    "end": "483750"
  },
  {
    "text": "and use those billing metrics that are available inside of cloud watch so as",
    "start": "483750",
    "end": "489419"
  },
  {
    "text": "you might have seen ec2 is one of our biggest spenders in our account and so we're a heavy user of research instances",
    "start": "489419",
    "end": "496289"
  },
  {
    "text": "who doesn't know anything about reserved instances awesome so we actually can go",
    "start": "496289",
    "end": "503190"
  },
  {
    "text": "over the slide just you can say 40% with the one-year reserved instances you can",
    "start": "503190",
    "end": "508650"
  },
  {
    "text": "save 60% you should look at your baseline by those unreserved instances",
    "start": "508650",
    "end": "513930"
  },
  {
    "text": "there are convertible reserved instances for those who don't know they were introduced I think one and a half year",
    "start": "513930",
    "end": "519930"
  },
  {
    "text": "ago something like that and there was a recent change in the convertible reserved instances there were only",
    "start": "519930",
    "end": "525630"
  },
  {
    "text": "available for three years that changed two or three weeks ago so you now can",
    "start": "525630",
    "end": "531270"
  },
  {
    "text": "also buy convertible reserved instances for one year and that's very very important if you want",
    "start": "531270",
    "end": "537820"
  },
  {
    "text": "to change instance families and as Constantine just explained when the infrastructure gets updated you will see",
    "start": "537820",
    "end": "544089"
  },
  {
    "text": "something like the recent announcement of the c5 family for example so if you're now running multiple instances on",
    "start": "544089",
    "end": "551470"
  },
  {
    "text": "c4 and you bought the classic or the standard reserved instances you can't automatically update them to c5 with the",
    "start": "551470",
    "end": "558790"
  },
  {
    "text": "convertible recent instances you can do exactly that you can just change those our eyes and update them to the c5",
    "start": "558790",
    "end": "565870"
  },
  {
    "text": "family and then upgrade or your instances to the c5 phone to get the best out of the AWS flying will so we",
    "start": "565870",
    "end": "574870"
  },
  {
    "text": "already talked about the cost Explorer this is one of the things or this is a screen shot out of our cost Explorer and",
    "start": "574870",
    "end": "581410"
  },
  {
    "text": "as you can see here most of our instances are really running on standard rest of the instances so we're trying to",
    "start": "581410",
    "end": "588510"
  },
  {
    "text": "run the whole application at the whole baseline on research instances and for",
    "start": "588510",
    "end": "594460"
  },
  {
    "text": "the excess so for those things that are changing inside of our application like scaling out scaling in in things we're",
    "start": "594460",
    "end": "602890"
  },
  {
    "text": "doing on demand and spot but we will come to that back to that later talking",
    "start": "602890",
    "end": "608560"
  },
  {
    "text": "about reserved instances there is also a new size flexibility for reserved",
    "start": "608560",
    "end": "613779"
  },
  {
    "text": "instances and as there is so much information in it I actually read the sentence because it's very important",
    "start": "613779",
    "end": "619360"
  },
  {
    "text": "within the same family regional Linux and UNIX reserved instances with shared",
    "start": "619360",
    "end": "624730"
  },
  {
    "text": "Tennessee are instant sized flexible now that means the three important informations here is it needs to be",
    "start": "624730",
    "end": "631630"
  },
  {
    "text": "regional so not availability zone based so you need to configure the reserved",
    "start": "631630",
    "end": "636850"
  },
  {
    "text": "instances to be region wide available or actually cover the whole region it needs",
    "start": "636850",
    "end": "642760"
  },
  {
    "text": "to be Linux and UNIX so Windows is out of that and it needs to be shared tenancy the idea behind the size",
    "start": "642760",
    "end": "649720"
  },
  {
    "text": "flexibility is the normalization factor you can see in the table on the right so",
    "start": "649720",
    "end": "655000"
  },
  {
    "text": "if you're have an RI for example a C for 4x large within this RI you are a bought",
    "start": "655000",
    "end": "663490"
  },
  {
    "text": "you can now run to c4 2x large instances or 4c 4 X labs instant instances or half",
    "start": "663490",
    "end": "673240"
  },
  {
    "text": "of on c4 8x large instance so you don't need to change your standard research",
    "start": "673240",
    "end": "680860"
  },
  {
    "text": "instance or your convertible recent instance if you're just changing the size within the same family you will get",
    "start": "680860",
    "end": "688690"
  },
  {
    "text": "the same benefit like the 40 to 60% out of it even if the instance size itself",
    "start": "688690",
    "end": "696130"
  },
  {
    "text": "doesn't 100% match you even can buy if you're scaling up for example and you",
    "start": "696130",
    "end": "701980"
  },
  {
    "text": "have one of the c-4 4x large reserved instances as it says in the example you",
    "start": "701980",
    "end": "707050"
  },
  {
    "text": "already covered half of the CAS c4 8x large so if you now know I will run the",
    "start": "707050",
    "end": "713350"
  },
  {
    "text": "c4 8x lot for a very long period you can just buy another c4 4x Lodge to cover",
    "start": "713350",
    "end": "719770"
  },
  {
    "text": "the whole c418 slash I hope that is clear so this was is for the business",
    "start": "719770",
    "end": "726040"
  },
  {
    "text": "side and now Constantine will talk about architecture goals yeah so much for",
    "start": "726040",
    "end": "731140"
  },
  {
    "text": "business so who is the wisdom of the architecture here ok that's the meat of",
    "start": "731140",
    "end": "736959"
  },
  {
    "text": "the talk so as an architect you want to avoid as much waste as possible you want",
    "start": "736959",
    "end": "742720"
  },
  {
    "text": "to architect something that is elegant that is beautiful and that doesn't really waste a lot of resources and the",
    "start": "742720",
    "end": "748300"
  },
  {
    "text": "easiest way to do that is to turn off unused instances and it turns out that a lot of instances are just lying around",
    "start": "748300",
    "end": "754060"
  },
  {
    "text": "spending your money without being used and those are typically developer test training instances that are just sitting",
    "start": "754060",
    "end": "761440"
  },
  {
    "text": "there doing nothing over the weekend or during off-hours right so these are the easiest low-hanging fruits that you",
    "start": "761440",
    "end": "767140"
  },
  {
    "text": "should eliminate and you can even start and stop them or you can yeah get rid of",
    "start": "767140",
    "end": "772540"
  },
  {
    "text": "them and actually an one new thing that actually came became available last year or within last year was that you can now",
    "start": "772540",
    "end": "780220"
  },
  {
    "text": "start and stop RDS databases so you don't have to stick the with those",
    "start": "780220",
    "end": "786370"
  },
  {
    "text": "databases for 24 hour seven days a week it is just a development or a testing database you can shut it down for the",
    "start": "786370",
    "end": "793839"
  },
  {
    "text": "weekend or during off hours or you can even shut down a whole infrastructure with CloudFormation which",
    "start": "793839",
    "end": "800739"
  },
  {
    "text": "is a great way of automating your infrastructure so think of instances is something that are disposable that you",
    "start": "800739",
    "end": "805959"
  },
  {
    "text": "just get rid of if you don't need them and then you conjure up whenever you need them and here's an example of a",
    "start": "805959",
    "end": "811329"
  },
  {
    "text": "very large customer and you can see here in the instance usage how big of an impact that can have if you are really",
    "start": "811329",
    "end": "817720"
  },
  {
    "text": "good at shutting down your non-used instances you can even make out Mondays and Fridays and weekends and and",
    "start": "817720",
    "end": "822849"
  },
  {
    "text": "vacations stuff and in this case 35% of instance users can be saved simply by",
    "start": "822849",
    "end": "828999"
  },
  {
    "text": "shutting down instances that are no longer used and the key here is automation right so you can automate",
    "start": "828999",
    "end": "836259"
  },
  {
    "text": "everything on AWS you should automate everything on on AWS and you can use the AWS software development kits you can",
    "start": "836259",
    "end": "842169"
  },
  {
    "text": "use the CLI interface or confirmation or any other tool I don't care the key",
    "start": "842169",
    "end": "847239"
  },
  {
    "text": "thing here is have a way to automate the lifecycle of your instances and that makes it so much easier to then use it",
    "start": "847239",
    "end": "855369"
  },
  {
    "text": "for shutting down those instances that are no longer used and as you can see you can save 35% easily just by looking",
    "start": "855369",
    "end": "861339"
  },
  {
    "text": "at your training and test and development instances and auto scaling turns out to be a very easy mechanism",
    "start": "861339",
    "end": "867749"
  },
  {
    "text": "for having that automation and your goal should be to use auto scaling as much as",
    "start": "867749",
    "end": "873429"
  },
  {
    "text": "possible still remember talking to you about auto scaling not that long long ago or maybe that was two years ago and",
    "start": "873429",
    "end": "879279"
  },
  {
    "text": "he said yeah sure we're thinking about auto scaling but we are not quite yet there yet so who is using auto scaling",
    "start": "879279",
    "end": "884649"
  },
  {
    "text": "already great but that's still still about half of the room so Marcus please",
    "start": "884649",
    "end": "890769"
  },
  {
    "text": "tell the other half of the room how your journey into auto scaling looked like",
    "start": "890769",
    "end": "897418"
  },
  {
    "text": "when we talked about it we always said yeah we're thinking about auto scaling",
    "start": "898739",
    "end": "903759"
  },
  {
    "text": "the problem was we were just thinking about it for a very very long time now we actually migrated over nearly our",
    "start": "903759",
    "end": "911229"
  },
  {
    "text": "whole infrastructure to auto scaling group so as constant he mentioned auto scaling really should always be your",
    "start": "911229",
    "end": "917289"
  },
  {
    "text": "goal I know this is a complex topic and sometimes it's not so easy to reach but still it should be the goal and we only",
    "start": "917289",
    "end": "924459"
  },
  {
    "text": "challenges especially the architectures right so the side effect of auto-scaling groups are that you just save costs",
    "start": "924459",
    "end": "932309"
  },
  {
    "text": "because you can optimize very easily your cost if you are running in",
    "start": "932309",
    "end": "937470"
  },
  {
    "text": "auto-scaling groups but we will come to that back later so our traduce when we migrated over",
    "start": "937470",
    "end": "942749"
  },
  {
    "text": "from those yeah manually hand cut instances to auto scaling group where",
    "start": "942749",
    "end": "949170"
  },
  {
    "text": "the problem of pet versus cattle the service discovery and our deployment",
    "start": "949170",
    "end": "954629"
  },
  {
    "text": "strategy so let's dive into the pets or kettle we all like pets right so we love",
    "start": "954629",
    "end": "963269"
  },
  {
    "text": "our dogs we love our cats as you can see on the left side of this picture",
    "start": "963269",
    "end": "969170"
  },
  {
    "text": "we love to pet also our servers in many many times because it's sometimes much",
    "start": "969170",
    "end": "976589"
  },
  {
    "text": "easier just to log into your server and do something because the server needs",
    "start": "976589",
    "end": "982199"
  },
  {
    "text": "something the problem with this approach is that you will change this single",
    "start": "982199",
    "end": "987420"
  },
  {
    "text": "server and if you're now running in auto-scaling that needs to be automated right so most of the time when I'm",
    "start": "987420",
    "end": "995309"
  },
  {
    "text": "talking to two peers and to other AWS customers every time I see a server",
    "start": "995309",
    "end": "1001670"
  },
  {
    "text": "named Gandalf the gray organda of the white or smeargle or Gollum I actually",
    "start": "1001670",
    "end": "1007759"
  },
  {
    "text": "can tell yeah you're petting your server because those names can't be really automatically generated right Ketel is",
    "start": "1007759",
    "end": "1015970"
  },
  {
    "text": "data approach like servers have numbers service still have names and that's",
    "start": "1015970",
    "end": "1021350"
  },
  {
    "text": "totally fine but we need to have that automated everything to set up start an",
    "start": "1021350",
    "end": "1027470"
  },
  {
    "text": "instance set up the instance run the application on the instance need to be need to be able to automate it in a",
    "start": "1027470",
    "end": "1033770"
  },
  {
    "text": "fully automatic rail way through auto scaling so this is one is a script we",
    "start": "1033770",
    "end": "1041720"
  },
  {
    "text": "putting into our user data with user data you can use the cloud in it or see",
    "start": "1041720",
    "end": "1047659"
  },
  {
    "text": "if any native your risk AWS CloudFormation to actually in this case name your service what we're doing here",
    "start": "1047659",
    "end": "1054620"
  },
  {
    "text": "is that's just a good command on we take out the availability zone aim with the AWS CLI nothing more than",
    "start": "1054620",
    "end": "1061250"
  },
  {
    "text": "that then we do some better scripting in there we get out the instance ID from",
    "start": "1061250",
    "end": "1066440"
  },
  {
    "text": "the ec2 metadata the instance it is just there because each host should be each",
    "start": "1066440",
    "end": "1072620"
  },
  {
    "text": "host name should be unique and the instance ID is so we put in the instance ID there and then we build out with the",
    "start": "1072620",
    "end": "1079370"
  },
  {
    "text": "host name prefix which is in our case most something like the role this instance has like webserver UI server",
    "start": "1079370",
    "end": "1086390"
  },
  {
    "text": "API server stuff like that and then we put that into the ECT host no host name",
    "start": "1086390",
    "end": "1092150"
  },
  {
    "text": "and we put the name tag in it so even in our AWS console or even if we are",
    "start": "1092150",
    "end": "1098270"
  },
  {
    "text": "querying against the ecq api we get out reasonable names the reason why we give",
    "start": "1098270",
    "end": "1105080"
  },
  {
    "text": "out those names and why we for example have the availability availability zone in it it's our alerting because if we're",
    "start": "1105080",
    "end": "1113120"
  },
  {
    "text": "getting a huge amount of alerts for all the instances that are running in use",
    "start": "1113120",
    "end": "1119780"
  },
  {
    "text": "east one a but no alerts in one b1 c1 d1",
    "start": "1119780",
    "end": "1124850"
  },
  {
    "text": "e1 f1 c hey maybe this is a problem at",
    "start": "1124850",
    "end": "1130250"
  },
  {
    "text": "the AWS side inside of the availability zone so we can consider that in finding",
    "start": "1130250",
    "end": "1135740"
  },
  {
    "text": "and debugging things that this might be a bigger problem on the AWS side and not on our side but if I seen something like",
    "start": "1135740",
    "end": "1142809"
  },
  {
    "text": "instances are going down in 1a 1c 1d and so and it's always the web servers then",
    "start": "1142809",
    "end": "1149750"
  },
  {
    "text": "it might be an attack on web servers for example and then so it helps us to understand based on the host names what",
    "start": "1149750",
    "end": "1157490"
  },
  {
    "text": "might be the problem before we even look at it and that's a great thing that we",
    "start": "1157490",
    "end": "1162950"
  },
  {
    "text": "at least like let's go to service discovery um most of you who are working",
    "start": "1162950",
    "end": "1170660"
  },
  {
    "text": "in with micro services have the problem or I assume you don't have the problem",
    "start": "1170660",
    "end": "1175940"
  },
  {
    "text": "now service discovery the web server needs to know who is capable of",
    "start": "1175940",
    "end": "1181850"
  },
  {
    "text": "answering API calls for example or the UI server needs to know exactly okay",
    "start": "1181850",
    "end": "1187640"
  },
  {
    "text": "this is my API or this is my database server or stuff like that so you need some kind of service discovery because if you are",
    "start": "1187640",
    "end": "1194420"
  },
  {
    "text": "doing auto-scaling that can be a lot of different instances and they change all the time so there is no way of",
    "start": "1194420",
    "end": "1201710"
  },
  {
    "text": "configuring hard-coded inside of a file or whatever so you need to have some",
    "start": "1201710",
    "end": "1207590"
  },
  {
    "text": "kind of a service around that tells your micro services who there are actually",
    "start": "1207590",
    "end": "1214310"
  },
  {
    "text": "should ask you can choose like console or Netflix Eureka which are great or you",
    "start": "1214310",
    "end": "1220550"
  },
  {
    "text": "drink can just build your own that's what we did so we have a scheduled AWS lambda function which is just using easy",
    "start": "1220550",
    "end": "1227930"
  },
  {
    "text": "to tags we have a tag that is called role and inside of this role is something like API or database or",
    "start": "1227930",
    "end": "1235900"
  },
  {
    "text": "whatever service and then this lambda function just gathers all the internal",
    "start": "1235900",
    "end": "1241820"
  },
  {
    "text": "IP addresses that are used inside overall VPC and then we put that as an a",
    "start": "1241820",
    "end": "1246980"
  },
  {
    "text": "record inside of route 53 so we have internal or private zones in route 53",
    "start": "1246980",
    "end": "1252260"
  },
  {
    "text": "which then say something like map dot internal dot mydomain.com",
    "start": "1252260",
    "end": "1257420"
  },
  {
    "text": "and under this I get all internal IP addresses I'm using for all the web",
    "start": "1257420",
    "end": "1262880"
  },
  {
    "text": "servers that are live right now and online right now one thing to mention",
    "start": "1262880",
    "end": "1268160"
  },
  {
    "text": "here if you build it on your own and you want to lose route 53 there is a limit",
    "start": "1268160",
    "end": "1273380"
  },
  {
    "text": "of 100 IP addresses per a records or if you're having more instances for one",
    "start": "1273380",
    "end": "1279920"
  },
  {
    "text": "role or one service you need to be aware of that that you need to kind of scale",
    "start": "1279920",
    "end": "1285020"
  },
  {
    "text": "out that and then last but not least deployments because when you have a",
    "start": "1285020",
    "end": "1291740"
  },
  {
    "text": "fixed cluster or a fixed fleet of instances it's a lot easier to deploy to them because you know them exactly but",
    "start": "1291740",
    "end": "1298430"
  },
  {
    "text": "that's what we don't want we don't want to pet our instances so we build out a",
    "start": "1298430",
    "end": "1304580"
  },
  {
    "text": "deployment by a cloud a cloud in it at instance launch so whenever auto-scaling triggers an",
    "start": "1304580",
    "end": "1310760"
  },
  {
    "text": "instance launch we automatically deploy our application to those instances we",
    "start": "1310760",
    "end": "1316640"
  },
  {
    "text": "are mimicking AWS code deploy here so a lot of awesome ideas inside of the code deploy servers which you",
    "start": "1316640",
    "end": "1322730"
  },
  {
    "text": "can use if you want to are used here by just using the user data empty AWS CLI",
    "start": "1322730",
    "end": "1329180"
  },
  {
    "text": "for us so again this is user data you can put it on the instant start and what",
    "start": "1329180",
    "end": "1334820"
  },
  {
    "text": "we're doing doing here is actually just copying over something that is coming out of the a3 packet which is a shell",
    "start": "1334820",
    "end": "1341630"
  },
  {
    "text": "script and when we pipe that directly to bash be aware you shouldn't do that like",
    "start": "1341630",
    "end": "1346940"
  },
  {
    "text": "doing something like a shell script and piping it directly to bash if you don't own the shell script so never do that on",
    "start": "1346940",
    "end": "1353930"
  },
  {
    "text": "a github repo or something like that you don't own as in our case we own the RTP",
    "start": "1353930",
    "end": "1359240"
  },
  {
    "text": "dot H file here we know exactly what is running in it nobody's able to write to",
    "start": "1359240",
    "end": "1364280"
  },
  {
    "text": "the shell script besides us so that's fine what we're doing inside of the shell script is just get our code from",
    "start": "1364280",
    "end": "1370790"
  },
  {
    "text": "an a3 bucket so our code or code every time we deploy will be inside of an s3",
    "start": "1370790",
    "end": "1376460"
  },
  {
    "text": "bucket in a packaged way we copy that over to a local to the local EBS volume on the instance itself and then we start",
    "start": "1376460",
    "end": "1383450"
  },
  {
    "text": "the application by a system D and that's it and then you actually have a deployment strategy if your auto scaling",
    "start": "1383450",
    "end": "1390230"
  },
  {
    "text": "group starts out the instance so kind of a wrap up why do you use or why can you",
    "start": "1390230",
    "end": "1399110"
  },
  {
    "text": "actually save money when your auto scaling on the one hand there is this",
    "start": "1399110",
    "end": "1404180"
  },
  {
    "text": "optimized cost through dynamic scaling and scale out because auto scaling is capable of triggering based on the cloud",
    "start": "1404180",
    "end": "1411830"
  },
  {
    "text": "watch matrix if you need more or less instances so it can just say something",
    "start": "1411830",
    "end": "1417800"
  },
  {
    "text": "like hey if my CPU goes above 50% then scale out if it goes below 30% then",
    "start": "1417800",
    "end": "1424670"
  },
  {
    "text": "scaling you even have to change the chance to use target now",
    "start": "1424670",
    "end": "1429680"
  },
  {
    "text": "like telling auto scaling groups ok please always try to be at CPU of 50%",
    "start": "1429680",
    "end": "1435950"
  },
  {
    "text": "and then auto scaling automatically will go out and in and then there is a new feature on the cost optimization side",
    "start": "1435950",
    "end": "1442700"
  },
  {
    "text": "which is very very important the per second billing from I think it was the second of October this year",
    "start": "1442700",
    "end": "1449560"
  },
  {
    "text": "AWS doesn't measure the billing in hours anymore actually we're down to a per second",
    "start": "1449560",
    "end": "1456890"
  },
  {
    "text": "billing for auto-scaling that means we can scale down a lot faster now because",
    "start": "1456890",
    "end": "1462500"
  },
  {
    "text": "before that change we always needed to consider that we already paid for the whole hour right so starting up an",
    "start": "1462500",
    "end": "1469010"
  },
  {
    "text": "instance and shutting it down after 10 minutes doesn't make any sense because you already paid for the other 50",
    "start": "1469010",
    "end": "1474770"
  },
  {
    "text": "minutes of the hour now as we are down to the per second billing we can scale down much faster",
    "start": "1474770",
    "end": "1481630"
  },
  {
    "text": "because you just have the overhead of how much time do I need to start up an",
    "start": "1481630",
    "end": "1486800"
  },
  {
    "text": "instance and in the end with within the whole deployment we're at 60 to 30 to 60",
    "start": "1486800",
    "end": "1493580"
  },
  {
    "text": "seconds until an instance is life hooked into everything and can deliver content",
    "start": "1493580",
    "end": "1498650"
  },
  {
    "text": "so we are now trying to scale down within two to three minutes if we need",
    "start": "1498650",
    "end": "1504470"
  },
  {
    "text": "to you also can leverage scheduled scaling events so if you know something like",
    "start": "1504470",
    "end": "1509510"
  },
  {
    "text": "Constantine just set the developer instances if you have developers that",
    "start": "1509510",
    "end": "1515630"
  },
  {
    "text": "work on weekends awesome if not then you might want to leverage scheduling",
    "start": "1515630",
    "end": "1521960"
  },
  {
    "text": "scaling events if they come to the office at 8 o clock on Monday but I assume no developer will be there at 8 o",
    "start": "1521960",
    "end": "1527990"
  },
  {
    "text": "clock so let's say 10 o'clock 10 o'clock a.m. you can scale out the auto scaling",
    "start": "1527990",
    "end": "1534620"
  },
  {
    "text": "group of developer instance and then you can scale down in the evening like 10",
    "start": "1534620",
    "end": "1539840"
  },
  {
    "text": "p.m. for example and then you can scale out and scale in on the daily basis so you can schedule those scale in and",
    "start": "1539840",
    "end": "1546920"
  },
  {
    "text": "scale out events within the auto scaling groups you don't need to trigger any lambda function of whatever AWS covers",
    "start": "1546920",
    "end": "1553670"
  },
  {
    "text": "that and then last but not least if you are using auto scaling it's very very",
    "start": "1553670",
    "end": "1559910"
  },
  {
    "text": "easy to actually switch now from on-demand instances or researched",
    "start": "1559910",
    "end": "1565250"
  },
  {
    "text": "instances to spot instances the reason is that you always have in mind now that",
    "start": "1565250",
    "end": "1571970"
  },
  {
    "text": "auto scaling might scale out or even scale in and then it's the perfect or",
    "start": "1571970",
    "end": "1578390"
  },
  {
    "text": "it's a perfect point in time to actually switch over to spot instances and Constantine will now tell about spot",
    "start": "1578390",
    "end": "1584840"
  },
  {
    "text": "instances and why is it that yeah so who's using spot instances already cool cool so who has been here",
    "start": "1584840",
    "end": "1592450"
  },
  {
    "text": "in this talk last year you already heard about spotters is why no why you're not",
    "start": "1592450",
    "end": "1597460"
  },
  {
    "text": "using them already so what are spot instances for instances remember large infrastructure means it'll use keep some",
    "start": "1597460",
    "end": "1604450"
  },
  {
    "text": "overhead of infrastructure that is actually not used by customers because we need to be prepared for launching an",
    "start": "1604450",
    "end": "1610090"
  },
  {
    "text": "instance at the whim of any customer any time so that means we keep a large overhead of instances that are no not",
    "start": "1610090",
    "end": "1616390"
  },
  {
    "text": "used at the moment what we do we sell those instances on the spot market just like in at wall street you can bid for",
    "start": "1616390",
    "end": "1624580"
  },
  {
    "text": "an instance you can say hey I'm AWS I know you have those instances lying around doing nothing I'm prepared to",
    "start": "1624580",
    "end": "1629710"
  },
  {
    "text": "give you ten cents for that instance even though the normal on-demand price would be like a dollar or so right so",
    "start": "1629710",
    "end": "1635350"
  },
  {
    "text": "you can actually bit your own price for our unused capacity and the nice thing",
    "start": "1635350",
    "end": "1640660"
  },
  {
    "text": "is you don't pay for the price that you bet you pay for a price that is computed based on supply and demand so if you",
    "start": "1640660",
    "end": "1647170"
  },
  {
    "text": "have a lot of rate of capacity that we don't use and not a lot of people bidding against that you can get away",
    "start": "1647170",
    "end": "1653320"
  },
  {
    "text": "with a very very very low price because you're out bidding everybody else even with a low price and there's a lot of",
    "start": "1653320",
    "end": "1658870"
  },
  {
    "text": "supply but on the other hand what happens if supply becomes thinner and thinner and thinner we have to take back",
    "start": "1658870",
    "end": "1665560"
  },
  {
    "text": "our spot instances from the market so that means that you need to be prepared for the spot instance to be terminated",
    "start": "1665560",
    "end": "1673300"
  },
  {
    "text": "for you because we have found a higher bidder for that instance right the good news here is you get a two minutes",
    "start": "1673300",
    "end": "1679240"
  },
  {
    "text": "notice before that so there's an API call you can call the API and it'll tell you okay this instance is to be",
    "start": "1679240",
    "end": "1685690"
  },
  {
    "text": "terminated in about two minutes clean up save your stuff and go away and",
    "start": "1685690",
    "end": "1690880"
  },
  {
    "text": "that gives you the opportunity to react to that so the best way here is you can",
    "start": "1690880",
    "end": "1696010"
  },
  {
    "text": "you can simply use an auto scaling group right but a new thing that we introduced only in the last couple of months is",
    "start": "1696010",
    "end": "1702010"
  },
  {
    "text": "instead of having your instance terminated and losing on your data you can simply choose to have your instance",
    "start": "1702010",
    "end": "1708790"
  },
  {
    "text": "Murli stopped and then you can continue once that instance type becomes cheaper again great flexibility especially from",
    "start": "1708790",
    "end": "1715780"
  },
  {
    "text": "for batch jobs and the other thing is you should always plan for and unscheduled maintenance for an",
    "start": "1715780",
    "end": "1721810"
  },
  {
    "text": "unscheduled loss of instances because Hardware does still break right so the",
    "start": "1721810",
    "end": "1727390"
  },
  {
    "text": "best way to do that is to write an application that automatically can install itself using scripting and then",
    "start": "1727390",
    "end": "1732820"
  },
  {
    "text": "use an auto scaling group here's how the pricing looks like and as you can see the pricing for spot instances looks",
    "start": "1732820",
    "end": "1739420"
  },
  {
    "text": "pretty dynamic right this is an example with an on-demand price of 34 cents to",
    "start": "1739420",
    "end": "1746170"
  },
  {
    "text": "the dollar and you can see that there are times where the price is actually 10 times higher and that is because many",
    "start": "1746170",
    "end": "1753550"
  },
  {
    "text": "people are over bidding each other and saying okay I'm fine paying ten times the normal price if I just get to keep",
    "start": "1753550",
    "end": "1760150"
  },
  {
    "text": "my instance because I know the price is gonna go down anyway because you can look at the spot history but the other",
    "start": "1760150",
    "end": "1766810"
  },
  {
    "text": "thing you can see is that the price can drop down to an Evan cent here in this example to a 34% this is lower then",
    "start": "1766810",
    "end": "1773410"
  },
  {
    "text": "reserved instances and in some cases the price can drop as low as 10% of",
    "start": "1773410",
    "end": "1778450"
  },
  {
    "text": "on-demand so there's huge opportunity here if you know how to leverage spot instances so here are some use cases",
    "start": "1778450",
    "end": "1784540"
  },
  {
    "text": "that work really well with spot instances anything that looks like a stateless web application server fleet",
    "start": "1784540",
    "end": "1789670"
  },
  {
    "text": "that's fine to use with spot we have customers who are running exclusively on spot instances because a real web",
    "start": "1789670",
    "end": "1796210"
  },
  {
    "text": "application is built against failure and there is no difference to the web application whether you're losing your",
    "start": "1796210",
    "end": "1802090"
  },
  {
    "text": "instance because of the spot instance pricing event or whether you use it losing their instance because of the",
    "start": "1802090",
    "end": "1807280"
  },
  {
    "text": "hardware event right you can use spot instances with Amazon Elastic MapReduce for Hadoop jobs and save a lot of time",
    "start": "1807280",
    "end": "1813910"
  },
  {
    "text": "sorry a lot of money there you can use them for your continuous integration thing basically anything that looks like",
    "start": "1813910",
    "end": "1819190"
  },
  {
    "text": "a batch fleet of instances can leverage spot instances and you can then choose",
    "start": "1819190",
    "end": "1824260"
  },
  {
    "text": "to use two auto scaling group one with spot instances that is used by default and another one for backup if the spot",
    "start": "1824260",
    "end": "1831640"
  },
  {
    "text": "instances trick doesn't work for you because the pricing is is off then the other auto scaling group with on-demand",
    "start": "1831640",
    "end": "1836770"
  },
  {
    "text": "and reserved instance can kick in and compensate for the loss of instance capacity there's another thing you can",
    "start": "1836770",
    "end": "1843430"
  },
  {
    "text": "use there's a spot bit advisor on our website and the spot web pit advisor will tell you based on the on the",
    "start": "1843430",
    "end": "1849460"
  },
  {
    "text": "history of spot instances and based on your particular Christ if you're willing to play hey",
    "start": "1849460",
    "end": "1854679"
  },
  {
    "text": "what the likelihood is that you're gonna keep the instance for that specific time",
    "start": "1854679",
    "end": "1860139"
  },
  {
    "text": "and whenever you see a low here it means that for a full month that instance would not have been lost to smoke right",
    "start": "1860139",
    "end": "1866940"
  },
  {
    "text": "so just a quick recap here spot instances give you dynamic pricing which",
    "start": "1866940",
    "end": "1872649"
  },
  {
    "text": "is a great opportunity for you you can save up to eighty or ninety percent cost those prices can vary per availability",
    "start": "1872649",
    "end": "1880059"
  },
  {
    "text": "zone so you can use something like spot fleets that will give you the opportunity to say okay I don't care",
    "start": "1880059",
    "end": "1885549"
  },
  {
    "text": "where my instances I don't care what availability zone here are the three four five seven instance types I'm",
    "start": "1885549",
    "end": "1890649"
  },
  {
    "text": "prepared to use just find the cheapest one and go and run with it and you're",
    "start": "1890649",
    "end": "1895720"
  },
  {
    "text": "the cool thing about spot leads is you can manage thousands of spot instances with a single API call and this is great",
    "start": "1895720",
    "end": "1901960"
  },
  {
    "text": "for for batch jobs and for running compute grids and and a I simulations",
    "start": "1901960",
    "end": "1907899"
  },
  {
    "text": "whatever you can do that with spot instances very very cheaply now some",
    "start": "1907899",
    "end": "1913090"
  },
  {
    "text": "customers say okay okay I get it Constantine but I have applications that are so small even the smallest AWS",
    "start": "1913090",
    "end": "1918639"
  },
  {
    "text": "instance is still idling a long time because it's just a really simple thing that I'm doing here and if you're",
    "start": "1918639",
    "end": "1924610"
  },
  {
    "text": "running a lot of small applications and all of them have their own instance you should be leveraging something like easy",
    "start": "1924610",
    "end": "1930399"
  },
  {
    "text": "to contain a service and put them into docker containers so you're probably familiar with easy to container service",
    "start": "1930399",
    "end": "1935769"
  },
  {
    "text": "it has been around for a while now and the thing to do here is try and find those single instances doing some simple",
    "start": "1935769",
    "end": "1943899"
  },
  {
    "text": "job out there but there are still idling at 10% or 12% or whatever percent and",
    "start": "1943899",
    "end": "1949379"
  },
  {
    "text": "consolidate them into a smaller amount of instances running easy to container service so the benefit here is instead",
    "start": "1949379",
    "end": "1956500"
  },
  {
    "text": "of having those individual machines there you can put them together into a smaller number of machines and docker",
    "start": "1956500",
    "end": "1963519"
  },
  {
    "text": "allows you to run multiple applications side-by-side within the same instance and that's another way of saving money",
    "start": "1963519",
    "end": "1970110"
  },
  {
    "text": "but of course docker containers is kind of like last decade or so and the new",
    "start": "1970110",
    "end": "1977980"
  },
  {
    "text": "thing is lambda and services right so who is using land already oh cool so you",
    "start": "1977980",
    "end": "1984039"
  },
  {
    "text": "can even save money with lambda and it turns out that if your existing application is only seeing about 40",
    "start": "1984039",
    "end": "1990530"
  },
  {
    "text": "percent utilization or less then you can port it to lamda and save money compared",
    "start": "1990530",
    "end": "1995630"
  },
  {
    "text": "to running the same application on an ec2 instance so that is a good rule of thumb if you're seeing an application",
    "start": "1995630",
    "end": "2001750"
  },
  {
    "text": "that is not enough to fill out your server capacity try bring it into lambda",
    "start": "2001750",
    "end": "2007660"
  },
  {
    "text": "but the other thing you should do is you should be smart about your lambda functions and by smart I mean you should",
    "start": "2007660",
    "end": "2013270"
  },
  {
    "text": "keep track of how much lamda capacity is really computing and how much is waiting",
    "start": "2013270",
    "end": "2018550"
  },
  {
    "text": "so here's an example lambda function so many lambda functions look like this you're calling an API and you're waiting",
    "start": "2018550",
    "end": "2025180"
  },
  {
    "text": "for its response and then you're calling the next API and then you're waiting for another response and then you're taking all of these responses doing something",
    "start": "2025180",
    "end": "2031690"
  },
  {
    "text": "interesting and then you do an HTTP POST or whatever in the end and notice those gray areas in this time line graph here",
    "start": "2031690",
    "end": "2038290"
  },
  {
    "text": "these are the areas where your application is waiting for that API call to complete and that period is compute",
    "start": "2038290",
    "end": "2045910"
  },
  {
    "text": "time in lambda that you're paying for so you're paying for lambda doing nothing during those gray areas so how do you",
    "start": "2045910",
    "end": "2052060"
  },
  {
    "text": "optimize well many times these these lambda functions they they call API a B",
    "start": "2052060",
    "end": "2059139"
  },
  {
    "text": "C and D and then they do their actual work so you can parallelize here so you",
    "start": "2059140",
    "end": "2064270"
  },
  {
    "text": "can multi thread within a lambda function call all of these six api's right away after all wait a small amount",
    "start": "2064270",
    "end": "2070659"
  },
  {
    "text": "of time because they are now working in parallel and then tap the data to collect or is all the results and be",
    "start": "2070660",
    "end": "2075879"
  },
  {
    "text": "done earlier and that is a great opportunity so when I write a lambda function that is performing multiple",
    "start": "2075880",
    "end": "2081370"
  },
  {
    "text": "things I always write it in multiple threads and I gain because my lab the",
    "start": "2081370",
    "end": "2087730"
  },
  {
    "text": "functions gonna be faster and I will also save money here don't overdo it so",
    "start": "2087730",
    "end": "2093040"
  },
  {
    "text": "I actually started in the lambda function I started 20 threads and I fired all of these 20 threads in parallel to an API that was not running",
    "start": "2093040",
    "end": "2099460"
  },
  {
    "text": "on AWS and then I got an email from that API owner that I apparently broke that API so tough luck I I told him about API",
    "start": "2099460",
    "end": "2108310"
  },
  {
    "text": "gateway and all the good stuff here so let's see but it's a great way to save money and all of those languages have",
    "start": "2108310",
    "end": "2115930"
  },
  {
    "text": "some form of of capability to multi here you don't think here is I see many",
    "start": "2115930",
    "end": "2121070"
  },
  {
    "text": "lambda functions that actually act like a shepherding thing like they are doing something like starting a job and then",
    "start": "2121070",
    "end": "2127820"
  },
  {
    "text": "they actually explicitly wait with a time but sleep call or something because they know okay I just started this job",
    "start": "2127820",
    "end": "2134060"
  },
  {
    "text": "gonna wait until it's over and then I'm gonna be done with it right and that is a big waste of money a big waste of",
    "start": "2134060",
    "end": "2141140"
  },
  {
    "text": "lamda money you can do the same now with step functions so eight of these step functions is a service that we",
    "start": "2141140",
    "end": "2146930"
  },
  {
    "text": "introduced last year that allows you to place control logic in the cloud as a step functions workflow and in the step",
    "start": "2146930",
    "end": "2153950"
  },
  {
    "text": "functions work you can start your yes you can submit your job at the beginning of that step functions workflow and then",
    "start": "2153950",
    "end": "2159770"
  },
  {
    "text": "you can implement a simple looping logic that will pull for the job to be",
    "start": "2159770",
    "end": "2164990"
  },
  {
    "text": "completed and if it's not completed do the waiting for you and waiting and step functions is for free you don't pay for",
    "start": "2164990",
    "end": "2170780"
  },
  {
    "text": "weight cycles on step functions you can wait for seconds hours weeks even up to",
    "start": "2170780",
    "end": "2176119"
  },
  {
    "text": "a year without paying anything for the wait time so by decomposing that lambda function and putting it into a step",
    "start": "2176119",
    "end": "2183380"
  },
  {
    "text": "functions workflow and just using a simple under function to submit the job and one at the end to collect the",
    "start": "2183380",
    "end": "2188900"
  },
  {
    "text": "results you can save a lot of money how much money well here's a customer called coca-cola and they have a system where",
    "start": "2188900",
    "end": "2197990"
  },
  {
    "text": "whenever you buy a bottle on their machines they will update your loyalty points account so you'll give you like a",
    "start": "2197990",
    "end": "2204500"
  },
  {
    "text": "rebate if you drink so many bottles of Coca Cola's and stuff like that and there's an update there it turns out",
    "start": "2204500",
    "end": "2209839"
  },
  {
    "text": "that this update thing needs to wait for sixty seconds and they really waited not",
    "start": "2209839",
    "end": "2215300"
  },
  {
    "text": "actually 90 seconds so they really waited those 90 seconds within the lambda function and then a colleague of",
    "start": "2215300",
    "end": "2221599"
  },
  {
    "text": "mine told them okay you can do the same with with step functions and now they are saving a lot of money for each",
    "start": "2221599",
    "end": "2226970"
  },
  {
    "text": "they're saving 90 seconds for each individual bottle salt out of those machines that can add up to a lot here",
    "start": "2226970",
    "end": "2232550"
  },
  {
    "text": "so there's a blog post about that you can read it up here and great way to",
    "start": "2232550",
    "end": "2237589"
  },
  {
    "text": "save money by optimizing your lambda functions okay let's get down to the",
    "start": "2237589",
    "end": "2242930"
  },
  {
    "text": "core of your application which is the database and Marcus is an expert in",
    "start": "2242930",
    "end": "2248089"
  },
  {
    "text": "database optimization yesterday we had a talk caching remember yeah and no he's gonna",
    "start": "2248089",
    "end": "2253870"
  },
  {
    "text": "tell you how to save money with databases thank you yeah I think databases are a great part of how to to",
    "start": "2253870",
    "end": "2262420"
  },
  {
    "text": "optimize your costs because databases on the one hand are very complex but",
    "start": "2262420",
    "end": "2267880"
  },
  {
    "text": "sometimes they're very expensive so caching helps nearly all the time for",
    "start": "2267880",
    "end": "2275380"
  },
  {
    "text": "that in this case pretty simple example we have an application that is directly",
    "start": "2275380",
    "end": "2280510"
  },
  {
    "text": "talking to Amazon DynamoDB and Amazon RDS and we put just a simple Amazon",
    "start": "2280510",
    "end": "2286450"
  },
  {
    "text": "ElastiCache in our case Redis note in between so every time we're we're asking",
    "start": "2286450",
    "end": "2291580"
  },
  {
    "text": "our database we now ask first or cash if there's something in the cache if it is",
    "start": "2291580",
    "end": "2297280"
  },
  {
    "text": "then we don't need to ask our database if there is not then obviously we need to go back to our database and save it",
    "start": "2297280",
    "end": "2303070"
  },
  {
    "text": "later on in the cache we implemented this Redis node in our application or in",
    "start": "2303070",
    "end": "2309670"
  },
  {
    "text": "the architecture and this is what happened so I think it's pretty obvious",
    "start": "2309670",
    "end": "2315520"
  },
  {
    "text": "where we deployed the cache and those are out down and would be reads so for",
    "start": "2315520",
    "end": "2321310"
  },
  {
    "text": "those who don't know dynamodb is actually priced per provision throughput so we could go down in for this",
    "start": "2321310",
    "end": "2329320"
  },
  {
    "text": "particular table with 3,000 reads per second less than what we're doing before",
    "start": "2329320",
    "end": "2335760"
  },
  {
    "text": "overall in our whole cluster we're actually saving or saved more than",
    "start": "2335760",
    "end": "2340830"
  },
  {
    "text": "20,000 reads per second in total that adds up to multiple thousand dollar every month by just one single Redis",
    "start": "2340830",
    "end": "2349750"
  },
  {
    "text": "node which costs you something like 150 to 200 dollars a month so that will paid",
    "start": "2349750",
    "end": "2356080"
  },
  {
    "text": "the next reinvent right only this but talking about caching there is one thing",
    "start": "2356080",
    "end": "2363490"
  },
  {
    "text": "I really want to emphasize here because even if you just saw this incredible",
    "start": "2363490",
    "end": "2368530"
  },
  {
    "text": "example of hey this will save me money even if with those numbers we forgot",
    "start": "2368530",
    "end": "2374140"
  },
  {
    "text": "something we forgot about negative caching and when I say negative caching what I mean is that very often we ask",
    "start": "2374140",
    "end": "2381340"
  },
  {
    "text": "our database like hey please give me in our case the hi a bit for this particular query and then",
    "start": "2381340",
    "end": "2387790"
  },
  {
    "text": "our database says I don't have anything in here no object no document no row whatever and that's a total valid answer",
    "start": "2387790",
    "end": "2395140"
  },
  {
    "text": "and that's totally okay but our application had something like if database result then save to cache",
    "start": "2395140",
    "end": "2404130"
  },
  {
    "text": "unfortunately we are working in nodejs so it's not typesafe you all know the",
    "start": "2404130",
    "end": "2409600"
  },
  {
    "text": "drill if nothing then we don't save to the cache right so the problem was we",
    "start": "2409600",
    "end": "2416440"
  },
  {
    "text": "didn't save this very valuable information of there is nothing in our database in dynamodb and so all the time",
    "start": "2416440",
    "end": "2424510"
  },
  {
    "text": "before the same query very actually already knew that there will be nothing in it we again asked DynamoDB so when we",
    "start": "2424510",
    "end": "2433780"
  },
  {
    "text": "implemented negative caching so just saving the information of there is no",
    "start": "2433780",
    "end": "2439180"
  },
  {
    "text": "result for this query to Redis our cache hit ratio went up from 25 to 30% up to",
    "start": "2439180",
    "end": "2447280"
  },
  {
    "text": "89 to 95% so actually with this very",
    "start": "2447280",
    "end": "2452320"
  },
  {
    "text": "small change in our application and with actually accepting and seeing that even",
    "start": "2452320",
    "end": "2459340"
  },
  {
    "text": "if in a no result there is valuable information in it that should be cached we save again multiple thousand dollars",
    "start": "2459340",
    "end": "2467350"
  },
  {
    "text": "every month so that was simple for the next ten years of reinvent right but",
    "start": "2467350",
    "end": "2474070"
  },
  {
    "text": "it's not only about caching you also can optimize a lot of things inside of dynamodb and Constantine is the",
    "start": "2474070",
    "end": "2479650"
  },
  {
    "text": "specialist for that oh yeah so check out the dynamodb documentation there's a whole section on best practices here you",
    "start": "2479650",
    "end": "2487120"
  },
  {
    "text": "can optimize the capacity users use note that there are different capacity units",
    "start": "2487120",
    "end": "2495130"
  },
  {
    "text": "whether you read or write so wit capacity can be 4k per unit but the right capacity is 1k",
    "start": "2495130",
    "end": "2501760"
  },
  {
    "text": "size here so you can optimize that by optimizing for more reads and less writes or something like that another",
    "start": "2501760",
    "end": "2509350"
  },
  {
    "text": "neat trick here that was pioneered by Shazam is if you're cheap if you want to be",
    "start": "2509350",
    "end": "2514720"
  },
  {
    "text": "cheap on right capacity you can bring down the right capacity of your dynamodb tables to the absolute minimum of your",
    "start": "2514720",
    "end": "2521529"
  },
  {
    "text": "average capacity that you need and that means that during peaks you will see out of capacity errors from DynamoDB and the",
    "start": "2521529",
    "end": "2528279"
  },
  {
    "text": "way to handle those is to write the amount edit the thing you want to write into an sqs queue and have a small",
    "start": "2528279",
    "end": "2534250"
  },
  {
    "text": "worker like a lambda function that is called every minute that will try and read redo those rights that retry those",
    "start": "2534250",
    "end": "2540250"
  },
  {
    "text": "rights against the dynamodb and that means that when the DynamoDB load is going down again and it is a little bit",
    "start": "2540250",
    "end": "2546549"
  },
  {
    "text": "more relaxed then it can accept those rights so that allows you to scale down on write capacity and only update those",
    "start": "2546549",
    "end": "2553180"
  },
  {
    "text": "rights when there is enough capacity there and get away with setting the right capacity to the to the normal",
    "start": "2553180",
    "end": "2560109"
  },
  {
    "text": "average capacity doesn't work for all use cases I wouldn't implement your bank account balance with that one but many",
    "start": "2560109",
    "end": "2566440"
  },
  {
    "text": "times you can actually yeah be a little bit more creative in how consistence you want to be with some tables and then",
    "start": "2566440",
    "end": "2573609"
  },
  {
    "text": "Amazon sqs is a great way to buffer rights think of it as inverse caching",
    "start": "2573609",
    "end": "2579190"
  },
  {
    "text": "like in the same way you can save through caching for reads you can save through buffering and SQS for writes and",
    "start": "2579190",
    "end": "2585430"
  },
  {
    "text": "the other thing is those capacity units are not set in stone before you would",
    "start": "2585430",
    "end": "2591130"
  },
  {
    "text": "need to resize them dynamically on your own and now there is auto scaling you can use auto scaling for dynamodb we can",
    "start": "2591130",
    "end": "2598240"
  },
  {
    "text": "simply plug in what is your read and write capacity out of scaling settings and everything else is done by dynamodb",
    "start": "2598240",
    "end": "2605559"
  },
  {
    "text": "and here's a look at the graph on how it can look like the blue line is the",
    "start": "2605559",
    "end": "2610569"
  },
  {
    "text": "actual consumed capacity and the red line tells you the capacity that was provisioned using auto scaling you can",
    "start": "2610569",
    "end": "2616660"
  },
  {
    "text": "see how it automatically steps up and to overcome those phases where it has not",
    "start": "2616660",
    "end": "2621700"
  },
  {
    "text": "yet updated the capacity it needed there this is where you can leverage caching",
    "start": "2621700",
    "end": "2626740"
  },
  {
    "text": "or write buffering through sqs another way to save capacity and and money and",
    "start": "2626740",
    "end": "2634270"
  },
  {
    "text": "another way to cache is by offloading popular traffic on the web side on the HTTP side to Amazon s3 for static",
    "start": "2634270",
    "end": "2641529"
  },
  {
    "text": "content and to Amazon CloudFront and even if you think that your content",
    "start": "2641529",
    "end": "2647840"
  },
  {
    "text": "cannot be cashed there is so much value in just cashing something for just a single second and the line between this",
    "start": "2647840",
    "end": "2655310"
  },
  {
    "text": "is super super dynamic content which changes all the time and this is",
    "start": "2655310",
    "end": "2660590"
  },
  {
    "text": "something that can be cashed is it's kind of blurry if even if you'll run the most automated the most actual news site",
    "start": "2660590",
    "end": "2668210"
  },
  {
    "text": "that does everything super lightning speed fast even if you put a TTL of zero into your HTTP response you will save",
    "start": "2668210",
    "end": "2675650"
  },
  {
    "text": "from caching because cloud fund will ask the origin server hey I have this piece",
    "start": "2675650",
    "end": "2680750"
  },
  {
    "text": "of data that I cashed did it update yet through an HTTP head request and then",
    "start": "2680750",
    "end": "2686060"
  },
  {
    "text": "your application is it no no it has been updated it's still still that way don't worry and then you save on that",
    "start": "2686060",
    "end": "2691190"
  },
  {
    "text": "transaction and you save money you don't your save on capacity because now cloud phone knows I can still use that cached",
    "start": "2691190",
    "end": "2697790"
  },
  {
    "text": "copy because I know it hasn't changed and then go use it off so even if you think you cannot cache try to use cloud",
    "start": "2697790",
    "end": "2704480"
  },
  {
    "text": "phone with a TTL of zero and you will see that there's going to be some significant load that you can carry",
    "start": "2704480",
    "end": "2710120"
  },
  {
    "text": "through cloud fund and that means you can scale down your back-end because it will see less load and more being served",
    "start": "2710120",
    "end": "2716360"
  },
  {
    "text": "by cloud font okay let's move on to the operational people here some people",
    "start": "2716360",
    "end": "2721790"
  },
  {
    "text": "still distinguish between death and ops or maybe you do both but the the the key",
    "start": "2721790",
    "end": "2728330"
  },
  {
    "text": "here from an operational perspective here and there is something that is at the core of AWS we are in the business",
    "start": "2728330",
    "end": "2734720"
  },
  {
    "text": "of helping you concentrate your own efforts into the thing that your company",
    "start": "2734720",
    "end": "2741710"
  },
  {
    "text": "stands for we don't want you to reinvent bent the wheel on the IT side we want you to innovate for your customers we",
    "start": "2741710",
    "end": "2748460"
  },
  {
    "text": "want you to innovate on your business models to create something new where your intellectual property is and we",
    "start": "2748460",
    "end": "2754340"
  },
  {
    "text": "don't want you to become experts at something that can easily be automated away and that means focus on what you do",
    "start": "2754340",
    "end": "2761090"
  },
  {
    "text": "best at AWS do the rest and there is another exercise that that Marcus has",
    "start": "2761090",
    "end": "2766730"
  },
  {
    "text": "made with his own team here when we started he was running his own database clusters and all the rest",
    "start": "2766730",
    "end": "2772990"
  },
  {
    "text": "and he was actually the local new local leader for the user group and now he",
    "start": "2772990",
    "end": "2778270"
  },
  {
    "text": "gave up on that he's now concentrating on what his company does best Thank You Constantine yeah in the end we accepted",
    "start": "2778270",
    "end": "2787030"
  },
  {
    "text": "at some point that we can do things very very good but that wasn't running",
    "start": "2787030",
    "end": "2793150"
  },
  {
    "text": "databases and it's still the case so even if we learned a lot about databases",
    "start": "2793150",
    "end": "2799750"
  },
  {
    "text": "if we could run then it always was painful um and so we decided that why",
    "start": "2799750",
    "end": "2806410"
  },
  {
    "text": "not using the AWS services which are there um and when we started to",
    "start": "2806410",
    "end": "2812109"
  },
  {
    "text": "migrating over more and more things through the different AWS services out there we recognized that it's not only",
    "start": "2812109",
    "end": "2817900"
  },
  {
    "text": "about just use the AWS services because they're there and AWS has the expert for",
    "start": "2817900",
    "end": "2825310"
  },
  {
    "text": "every single service because that's what they do 24/7 and that's I think that's what why they selling it um we now try",
    "start": "2825310",
    "end": "2833230"
  },
  {
    "text": "to figure really out what are the real needs of our application for this very",
    "start": "2833230",
    "end": "2838900"
  },
  {
    "text": "single purpose we are now thinking about and then we decide which service is",
    "start": "2838900",
    "end": "2844270"
  },
  {
    "text": "actually the best to do that we couldn't do that before because and I think that",
    "start": "2844270",
    "end": "2850420"
  },
  {
    "text": "sounds familiar for many of you we already have that database the data needs to be in there because it's",
    "start": "2850420",
    "end": "2856150"
  },
  {
    "text": "already there and that makes sense in the old world of where we have this huge",
    "start": "2856150",
    "end": "2861460"
  },
  {
    "text": "clusters running on bare metal because the overhead of maintaining and operating those things is not to",
    "start": "2861460",
    "end": "2867580"
  },
  {
    "text": "underestimate so the here the answer is totally Belet to say that but today when",
    "start": "2867580",
    "end": "2874390"
  },
  {
    "text": "we are running inside of AWS it obvious takes away this whole operational overhead we don't maintain databases",
    "start": "2874390",
    "end": "2881260"
  },
  {
    "text": "anymore we don't need to maintain queueing systems anymore because there's sqs we have the less successful istic",
    "start": "2881260",
    "end": "2888700"
  },
  {
    "text": "search service we can use chemises all those streaming services all those very awesome services which are actually",
    "start": "2888700",
    "end": "2895380"
  },
  {
    "text": "customized for the different use cases we have but even if you are already",
    "start": "2895380",
    "end": "2902170"
  },
  {
    "text": "using a service like in our case Amazon am we used it to do queries on huge amount",
    "start": "2902170",
    "end": "2907700"
  },
  {
    "text": "of data and then I think it was last year at reinvent um Amazon Athena came out and so we thought hey maybe we want",
    "start": "2907700",
    "end": "2915920"
  },
  {
    "text": "to try something out here because um running an Amazon EMR and doing query",
    "start": "2915920",
    "end": "2921260"
  },
  {
    "text": "against it worked for us was totally fine but we just did the test of hey can",
    "start": "2921260",
    "end": "2927290"
  },
  {
    "text": "we do the same with Athena and maybe that's more cost-effective and it was",
    "start": "2927290",
    "end": "2932930"
  },
  {
    "text": "because for us the startup phase of EMR was very very crucial so the startup",
    "start": "2932930",
    "end": "2938390"
  },
  {
    "text": "phase took a very long time we did something not so intelligent in there to",
    "start": "2938390",
    "end": "2944300"
  },
  {
    "text": "be honest but with Athena now we don't need to maintain the EMR clusters we don't need",
    "start": "2944300",
    "end": "2949970"
  },
  {
    "text": "to touch instances anymore and as the slide says our costs are down by more",
    "start": "2949970",
    "end": "2955820"
  },
  {
    "text": "than 50% but as I said there's this very special use case for ours but this is more about trying things out on a ws is",
    "start": "2955820",
    "end": "2963950"
  },
  {
    "text": "so easy because you can just do it in parallel for a week or two or a month or",
    "start": "2963950",
    "end": "2968960"
  },
  {
    "text": "three months something like that to see work that's that work what I thought of and then switch over to the more cost",
    "start": "2968960",
    "end": "2976220"
  },
  {
    "text": "efficient solution but talking about services talking about pushing things",
    "start": "2976220",
    "end": "2983030"
  },
  {
    "text": "away to AWS um and let they do the job as constantine mentioned we had this",
    "start": "2983030",
    "end": "2989840"
  },
  {
    "text": "application which was actually divided in a tracking api a real-time bidding engine and the user in statistics api",
    "start": "2989840",
    "end": "2996500"
  },
  {
    "text": "and then we had the self managed database running on ec2 we need to maintain the database by ourselves but",
    "start": "2996500",
    "end": "3003310"
  },
  {
    "text": "that wasn't really the biggest issue the problem as we now know a few years later",
    "start": "3003310",
    "end": "3009870"
  },
  {
    "text": "was that our architecture wasn't really split out into the several things that",
    "start": "3009870",
    "end": "3016330"
  },
  {
    "text": "our application does so the more important things about this migration over to dynamodb amazon Aurora and",
    "start": "3016330",
    "end": "3023050"
  },
  {
    "text": "Amazon redshift is not that we just use the services now that's a big benefit but the most important point here is",
    "start": "3023050",
    "end": "3030580"
  },
  {
    "text": "that now our application is actually",
    "start": "3030580",
    "end": "3035800"
  },
  {
    "text": "split out into for instax and the stack does include",
    "start": "3035800",
    "end": "3041270"
  },
  {
    "text": "the database so for every single purpose inside of our application we are now",
    "start": "3041270",
    "end": "3048380"
  },
  {
    "text": "using different databases different database clusters if you're using a dynamodb table for example and in the",
    "start": "3048380",
    "end": "3055790"
  },
  {
    "text": "reality it's a database cluster because it gets synced over at least three availability zones there are multiple",
    "start": "3055790",
    "end": "3062720"
  },
  {
    "text": "instances running behind the scenes same with Amazon Aurora same Amazon redshift so in the end we split out our",
    "start": "3062720",
    "end": "3069740"
  },
  {
    "text": "architecture step by step and now we can pick the right tool for every job we",
    "start": "3069740",
    "end": "3076730"
  },
  {
    "text": "have because there are so many different databases and other AWS services out there and actually the challenge now is",
    "start": "3076730",
    "end": "3084380"
  },
  {
    "text": "to find the service that is the best suitable for the job you want to have those are just examples",
    "start": "3084380",
    "end": "3091760"
  },
  {
    "text": "there are many more of them dynamodb the key value store with scalable throughput",
    "start": "3091760",
    "end": "3097010"
  },
  {
    "text": "so whenever I'm actually want to be built by read or by right which makes",
    "start": "3097010",
    "end": "3102950"
  },
  {
    "text": "sense in a lot of cases I want to choose DynamoDB low latency we all know that",
    "start": "3102950",
    "end": "3108140"
  },
  {
    "text": "Amazon Aurora if you want to have a relational database but you want to have scalable storage because Amazon Aurora",
    "start": "3108140",
    "end": "3116120"
  },
  {
    "text": "automatically scales up and down on the storage side you always pay for what you use and then you have an instance on top",
    "start": "3116120",
    "end": "3122780"
  },
  {
    "text": "with multiple read replicas for example Amazon redshift for the higher latency but big data and then elastic cache has",
    "start": "3122780",
    "end": "3129530"
  },
  {
    "text": "already mentioned for caching but also for more firmly data that don't need to",
    "start": "3129530",
    "end": "3134690"
  },
  {
    "text": "be that durable so for us now the key is that we're always thinking in stacks and",
    "start": "3134690",
    "end": "3142390"
  },
  {
    "text": "every stack is a known architecture so we're not thinking about this whole application and we don't even think in",
    "start": "3142390",
    "end": "3150370"
  },
  {
    "text": "microservices because even inside of a micro service there can be multiple",
    "start": "3150370",
    "end": "3155840"
  },
  {
    "text": "stacks because there can be something that is right heavy and the other part is read heavy those are different stacks",
    "start": "3155840",
    "end": "3161930"
  },
  {
    "text": "for us now because they have different they have different considerations you",
    "start": "3161930",
    "end": "3167330"
  },
  {
    "text": "need to do there and so we choose different tools and databases you have unstructured data where from structured data or as",
    "start": "3167330",
    "end": "3174200"
  },
  {
    "text": "Constantine already mentioned you have consistent load versus inconsistent load some databases are very good and",
    "start": "3174200",
    "end": "3180680"
  },
  {
    "text": "actually handling inconsistent load other databases are very very good in handling consistent load so you should",
    "start": "3180680",
    "end": "3187040"
  },
  {
    "text": "choose on that on the cost side as this is a cost optimization talk interesting",
    "start": "3187040",
    "end": "3192530"
  },
  {
    "text": "enough if you just look at the pricing page for example for Amazon Aurora if you look at the price for NDB are three",
    "start": "3192530",
    "end": "3199940"
  },
  {
    "text": "large that's exactly the half of an DB r3x large large versus x large is",
    "start": "3199940",
    "end": "3207890"
  },
  {
    "text": "exactly double everything memory CPU all this kind of stuff so in the end why",
    "start": "3207890",
    "end": "3213530"
  },
  {
    "text": "running the bigger one for multiple micro service or multiple things if I",
    "start": "3213530",
    "end": "3219920"
  },
  {
    "text": "can run two for exactly the same price and that gives me in the end a lot of",
    "start": "3219920",
    "end": "3226250"
  },
  {
    "text": "advantages on the one hand obvious no under French it heavy lifting AWS does",
    "start": "3226250",
    "end": "3232970"
  },
  {
    "text": "the job for us that saves money and work or it saves work and that's why it saves money we don't own our databases anymore",
    "start": "3232970",
    "end": "3240890"
  },
  {
    "text": "own is the wrong word we don't manage them anymore because AWS handles the",
    "start": "3240890",
    "end": "3245990"
  },
  {
    "text": "whole database infrastructure for us now the benefit now also from a cost perspective is we have a more granular",
    "start": "3245990",
    "end": "3252770"
  },
  {
    "text": "scale out now because we're scaling only that stack that needs to be scaled we",
    "start": "3252770",
    "end": "3259370"
  },
  {
    "text": "don't need to scale this one huge database where everything is going in and out we just scale that part of our",
    "start": "3259370",
    "end": "3266570"
  },
  {
    "text": "whole application that needs the scaling and that obviously is a lot more cost-effective than if you scale the",
    "start": "3266570",
    "end": "3273500"
  },
  {
    "text": "whole cluster we have absolutely no interference between the different functionalities and systems now if once",
    "start": "3273500",
    "end": "3280310"
  },
  {
    "text": "if something happens with one system the impact of on the whole system or the",
    "start": "3280310",
    "end": "3286100"
  },
  {
    "text": "whole architecture is a lot smaller now because everything is a whole is a own stack now which is totally separated",
    "start": "3286100",
    "end": "3292550"
  },
  {
    "text": "from each other and one nice side effect of everything what I just said is the",
    "start": "3292550",
    "end": "3298880"
  },
  {
    "text": "issue pinpointing and the team responsibility is a lot easier now because if something going on in one database we know exactly",
    "start": "3298880",
    "end": "3306220"
  },
  {
    "text": "this is the source is this part of the application this is where we need to",
    "start": "3306220",
    "end": "3311690"
  },
  {
    "text": "look at this way we need to debug things this is where we need to scale against and that makes things a lot easier",
    "start": "3311690",
    "end": "3317450"
  },
  {
    "text": "especially if you have different teams for the different stacks because then they can really own the whole stack and",
    "start": "3317450",
    "end": "3323990"
  },
  {
    "text": "they don't have to rely on operations underneath it and that was it for me and",
    "start": "3323990",
    "end": "3329990"
  },
  {
    "text": "Constantine does a recap thank you so we are reaching the end of our talk here",
    "start": "3329990",
    "end": "3335140"
  },
  {
    "text": "let's recap a bit so first of all get that cost transparency by looking at the",
    "start": "3335140",
    "end": "3341330"
  },
  {
    "text": "TCO tool the billing tools and all the other stuff use reserved instances that is the easiest way to save money",
    "start": "3341330",
    "end": "3347420"
  },
  {
    "text": "avoid idle instances through automation use spot instances if you don't do that",
    "start": "3347420",
    "end": "3352460"
  },
  {
    "text": "already think about the database utilization and optimization techniques that we learned",
    "start": "3352460",
    "end": "3357500"
  },
  {
    "text": "about and try to pick the right tool for the job I don't want anybody's putting log files application logs into MySQL",
    "start": "3357500",
    "end": "3364730"
  },
  {
    "text": "databases right next to their high volume transaction systems and I've seen that before and offload your",
    "start": "3364730",
    "end": "3370790"
  },
  {
    "text": "architecture by using caching cloud phone and stuff like that if you're still unsure where to start you can get",
    "start": "3370790",
    "end": "3378260"
  },
  {
    "text": "a hint from AWS trusted advisor trusted advisor includes a report that will tell you here are some great cost-saving",
    "start": "3378260",
    "end": "3384740"
  },
  {
    "text": "opportunities and you get trusted advisor for free if you have business or enterprise support if you like this talk",
    "start": "3384740",
    "end": "3391160"
  },
  {
    "text": "you can actually check out our previous talks on youtube so you can find last",
    "start": "3391160",
    "end": "3396470"
  },
  {
    "text": "year's and the year before that every year we optimize our talk we listen to the feedback we change and swap out back",
    "start": "3396470",
    "end": "3403010"
  },
  {
    "text": "and forth so you will find new stuff too to optimize for in the older versions of",
    "start": "3403010",
    "end": "3408710"
  },
  {
    "text": "our talk and if you like this talk feel free to give us a good rating and then we might be here next year again so",
    "start": "3408710",
    "end": "3414590"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "3414590",
    "end": "3422449"
  }
]