[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "hi",
    "start": "5520",
    "end": "5920"
  },
  {
    "text": "my name is patrick miller i'm cloud",
    "start": "5920",
    "end": "7759"
  },
  {
    "text": "sport engineer here at",
    "start": "7759",
    "end": "9360"
  },
  {
    "text": "aws today i'm going to talk about",
    "start": "9360",
    "end": "12639"
  },
  {
    "text": "partition project with amazon tina",
    "start": "12639",
    "end": "15759"
  },
  {
    "text": "projection is a new feature launched in",
    "start": "15759",
    "end": "17600"
  },
  {
    "text": "the beginning of the year",
    "start": "17600",
    "end": "20240"
  },
  {
    "start": "19000",
    "end": "33000"
  },
  {
    "text": "in this presentation i will cover the",
    "start": "20240",
    "end": "21840"
  },
  {
    "text": "below topics what is partitions",
    "start": "21840",
    "end": "24400"
  },
  {
    "text": "how to load partitions in a table and",
    "start": "24400",
    "end": "26800"
  },
  {
    "text": "i'm going to talk about partition",
    "start": "26800",
    "end": "28320"
  },
  {
    "text": "projection",
    "start": "28320",
    "end": "29359"
  },
  {
    "text": "and how to architect partitions when",
    "start": "29359",
    "end": "31679"
  },
  {
    "text": "work with partit files",
    "start": "31679",
    "end": "35040"
  },
  {
    "start": "33000",
    "end": "60000"
  },
  {
    "text": "partition is an important technique for",
    "start": "35200",
    "end": "37120"
  },
  {
    "text": "organized data sets",
    "start": "37120",
    "end": "38559"
  },
  {
    "text": "so they can be query efficiently it",
    "start": "38559",
    "end": "40960"
  },
  {
    "text": "organized data in a structure based on",
    "start": "40960",
    "end": "43280"
  },
  {
    "text": "distinctive values of one or more calls",
    "start": "43280",
    "end": "46239"
  },
  {
    "text": "by purchasing your data you can restrict",
    "start": "46239",
    "end": "48239"
  },
  {
    "text": "the amount of data scanned by each query",
    "start": "48239",
    "end": "51039"
  },
  {
    "text": "thus improve performance and reduce",
    "start": "51039",
    "end": "52960"
  },
  {
    "text": "costs",
    "start": "52960",
    "end": "54160"
  },
  {
    "text": "to create a table that use partitions",
    "start": "54160",
    "end": "56239"
  },
  {
    "text": "you must define it during the great",
    "start": "56239",
    "end": "58160"
  },
  {
    "text": "table statement",
    "start": "58160",
    "end": "61120"
  },
  {
    "start": "60000",
    "end": "90000"
  },
  {
    "text": "for example we can define the root",
    "start": "61600",
    "end": "63920"
  },
  {
    "text": "folder for our table as",
    "start": "63920",
    "end": "65600"
  },
  {
    "text": "bucket name plus path in my case the",
    "start": "65600",
    "end": "68720"
  },
  {
    "text": "path",
    "start": "68720",
    "end": "69200"
  },
  {
    "text": "is sample commits by your month ig",
    "start": "69200",
    "end": "74159"
  },
  {
    "text": "after that you can define ear as",
    "start": "75040",
    "end": "77520"
  },
  {
    "text": "partition for example",
    "start": "77520",
    "end": "80000"
  },
  {
    "text": "or we can go deep and define",
    "start": "80000",
    "end": "83119"
  },
  {
    "text": "month and ig or any other",
    "start": "83119",
    "end": "86880"
  },
  {
    "text": "partition that you need for your use",
    "start": "86880",
    "end": "88880"
  },
  {
    "text": "case",
    "start": "88880",
    "end": "91200"
  },
  {
    "start": "90000",
    "end": "130000"
  },
  {
    "text": "on the create tab statement you define",
    "start": "92799",
    "end": "94880"
  },
  {
    "text": "the partitions",
    "start": "94880",
    "end": "96720"
  },
  {
    "text": "for example here i'm creating a table",
    "start": "96720",
    "end": "99439"
  },
  {
    "text": "here is the column type",
    "start": "99439",
    "end": "101280"
  },
  {
    "text": "the partitions and the type of the",
    "start": "101280",
    "end": "103759"
  },
  {
    "text": "partitions",
    "start": "103759",
    "end": "104640"
  },
  {
    "text": "and the location",
    "start": "104640",
    "end": "107439"
  },
  {
    "text": "attina when you run this grid table it's",
    "start": "110720",
    "end": "113439"
  },
  {
    "text": "going to create",
    "start": "113439",
    "end": "114000"
  },
  {
    "text": "a table with three partitions and when",
    "start": "114000",
    "end": "117200"
  },
  {
    "text": "you query the table it's going to read",
    "start": "117200",
    "end": "118880"
  },
  {
    "text": "the data",
    "start": "118880",
    "end": "119439"
  },
  {
    "text": "inside of this path",
    "start": "119439",
    "end": "129840"
  },
  {
    "start": "130000",
    "end": "189000"
  },
  {
    "text": "to load the purchases of the table we",
    "start": "131920",
    "end": "134080"
  },
  {
    "text": "have two ways",
    "start": "134080",
    "end": "135280"
  },
  {
    "text": "we can run the msk repair table to",
    "start": "135280",
    "end": "137680"
  },
  {
    "text": "predict the metadata in the catalog",
    "start": "137680",
    "end": "139840"
  },
  {
    "text": "the msc repair table is considered",
    "start": "139840",
    "end": "141760"
  },
  {
    "text": "location and add partitions to the",
    "start": "141760",
    "end": "143680"
  },
  {
    "text": "metadata catalog",
    "start": "143680",
    "end": "146560"
  },
  {
    "text": "for example if you require this table",
    "start": "146560",
    "end": "150160"
  },
  {
    "text": "that you create previously",
    "start": "150160",
    "end": "152080"
  },
  {
    "text": "you're going to see that's not going to",
    "start": "152080",
    "end": "153920"
  },
  {
    "text": "read any date the reason is because",
    "start": "153920",
    "end": "157200"
  },
  {
    "text": "we didn't load the partitions yet after",
    "start": "157200",
    "end": "160239"
  },
  {
    "text": "we run",
    "start": "160239",
    "end": "160720"
  },
  {
    "text": "the msk repaired table it's going to",
    "start": "160720",
    "end": "163920"
  },
  {
    "text": "load all partitions that we have on s3",
    "start": "163920",
    "end": "167120"
  },
  {
    "text": "path",
    "start": "167120",
    "end": "167519"
  },
  {
    "text": "at this moment so this is the paths that",
    "start": "167519",
    "end": "170080"
  },
  {
    "text": "i have on my s3",
    "start": "170080",
    "end": "172800"
  },
  {
    "text": "now if i try to run the query again",
    "start": "172800",
    "end": "176160"
  },
  {
    "text": "we're going to see that is going to read",
    "start": "176160",
    "end": "178560"
  },
  {
    "text": "the date",
    "start": "178560",
    "end": "180959"
  },
  {
    "text": "when a new partition is creating s3 you",
    "start": "181599",
    "end": "184239"
  },
  {
    "text": "need to run the msk",
    "start": "184239",
    "end": "185680"
  },
  {
    "text": "repair table to load the new partitions",
    "start": "185680",
    "end": "188159"
  },
  {
    "text": "again",
    "start": "188159",
    "end": "190480"
  },
  {
    "start": "189000",
    "end": "236000"
  },
  {
    "text": "a second option to load the partition is",
    "start": "190800",
    "end": "193120"
  },
  {
    "text": "using glue corollary",
    "start": "193120",
    "end": "194480"
  },
  {
    "text": "crawlers automatically identify the",
    "start": "194480",
    "end": "196400"
  },
  {
    "text": "partitioning structure of your data set",
    "start": "196400",
    "end": "198720"
  },
  {
    "text": "and they populate the aws school data",
    "start": "198720",
    "end": "201040"
  },
  {
    "text": "catalog",
    "start": "201040",
    "end": "202319"
  },
  {
    "text": "after you crawl a table you can view the",
    "start": "202319",
    "end": "204319"
  },
  {
    "text": "partitions that the crawler",
    "start": "204319",
    "end": "206080"
  },
  {
    "text": "or dms character table command create by",
    "start": "206080",
    "end": "209040"
  },
  {
    "text": "navigating to the table",
    "start": "209040",
    "end": "210640"
  },
  {
    "text": "on the aws console and choosing view",
    "start": "210640",
    "end": "213280"
  },
  {
    "text": "partitions",
    "start": "213280",
    "end": "214480"
  },
  {
    "text": "for example we create this table if we",
    "start": "214480",
    "end": "217840"
  },
  {
    "text": "go",
    "start": "217840",
    "end": "218799"
  },
  {
    "text": "to glue catalog this is the table that",
    "start": "218799",
    "end": "222400"
  },
  {
    "text": "we create",
    "start": "222400",
    "end": "223599"
  },
  {
    "text": "if we go inside of the table",
    "start": "223599",
    "end": "227840"
  },
  {
    "text": "we can see the columns and we can see",
    "start": "228159",
    "end": "231360"
  },
  {
    "text": "our partition script",
    "start": "231360",
    "end": "234480"
  },
  {
    "start": "236000",
    "end": "266000"
  },
  {
    "text": "partition projection you can use",
    "start": "238080",
    "end": "240400"
  },
  {
    "text": "partition projection antenna to speed up",
    "start": "240400",
    "end": "242480"
  },
  {
    "text": "query processing",
    "start": "242480",
    "end": "243680"
  },
  {
    "text": "of high partitioning tables in the",
    "start": "243680",
    "end": "245840"
  },
  {
    "text": "automate partition veteran",
    "start": "245840",
    "end": "248159"
  },
  {
    "text": "in partition projection partition values",
    "start": "248159",
    "end": "250560"
  },
  {
    "text": "and location are calculated from",
    "start": "250560",
    "end": "252640"
  },
  {
    "text": "configuration instead of reading from a",
    "start": "252640",
    "end": "254879"
  },
  {
    "text": "repository like aws",
    "start": "254879",
    "end": "256639"
  },
  {
    "text": "group data catalog with partition",
    "start": "256639",
    "end": "258959"
  },
  {
    "text": "projection you don't need",
    "start": "258959",
    "end": "260400"
  },
  {
    "text": "to run msk repair table or to create a",
    "start": "260400",
    "end": "263520"
  },
  {
    "text": "google crawler",
    "start": "263520",
    "end": "268639"
  },
  {
    "start": "266000",
    "end": "389000"
  },
  {
    "text": "to create a table with project project",
    "start": "268639",
    "end": "270720"
  },
  {
    "text": "we need to define it in the create table",
    "start": "270720",
    "end": "272720"
  },
  {
    "text": "state",
    "start": "272720",
    "end": "273840"
  },
  {
    "text": "for example here i'm create a table",
    "start": "273840",
    "end": "277120"
  },
  {
    "text": "with two partitions here and move",
    "start": "277120",
    "end": "280240"
  },
  {
    "text": "and in the properties we defined the",
    "start": "280240",
    "end": "282080"
  },
  {
    "text": "type of the partitions",
    "start": "282080",
    "end": "283520"
  },
  {
    "text": "for example year type integer and the",
    "start": "283520",
    "end": "286880"
  },
  {
    "text": "range",
    "start": "286880",
    "end": "287360"
  },
  {
    "text": "of the partition for example 2014",
    "start": "287360",
    "end": "291320"
  },
  {
    "text": "2016. as you can see here",
    "start": "291320",
    "end": "294720"
  },
  {
    "text": "we define the range for the possible",
    "start": "294720",
    "end": "296880"
  },
  {
    "text": "values for the partition column",
    "start": "296880",
    "end": "299199"
  },
  {
    "text": "we need to avoid the use of high cards",
    "start": "299199",
    "end": "301919"
  },
  {
    "text": "knowledge ranges",
    "start": "301919",
    "end": "304800"
  },
  {
    "text": "here i'm going to create a table using",
    "start": "306160",
    "end": "308560"
  },
  {
    "text": "partition projector",
    "start": "308560",
    "end": "310800"
  },
  {
    "text": "here is the table name the partitions",
    "start": "310800",
    "end": "314639"
  },
  {
    "text": "of my data in this case it's year month",
    "start": "314639",
    "end": "319280"
  },
  {
    "text": "projection equals true and then",
    "start": "320320",
    "end": "324240"
  },
  {
    "text": "we define the partitions for example",
    "start": "324240",
    "end": "327199"
  },
  {
    "text": "here",
    "start": "327199",
    "end": "327840"
  },
  {
    "text": "is type integer and the range is 2014",
    "start": "327840",
    "end": "332560"
  },
  {
    "text": "to 2016 and for the",
    "start": "332560",
    "end": "336560"
  },
  {
    "text": "column month or partition month we",
    "start": "336560",
    "end": "339600"
  },
  {
    "text": "define",
    "start": "339600",
    "end": "340080"
  },
  {
    "text": "that it's an integer and the range is",
    "start": "340080",
    "end": "343199"
  },
  {
    "text": "1 to 12. the path that we are using",
    "start": "343199",
    "end": "346960"
  },
  {
    "text": "is this path here",
    "start": "346960",
    "end": "353759"
  },
  {
    "text": "after you create this table we can",
    "start": "353759",
    "end": "357199"
  },
  {
    "text": "already",
    "start": "357199",
    "end": "359120"
  },
  {
    "text": "run queries and read it for example",
    "start": "359120",
    "end": "362960"
  },
  {
    "text": "here we are reading that path that we",
    "start": "362960",
    "end": "366240"
  },
  {
    "text": "define",
    "start": "366240",
    "end": "366720"
  },
  {
    "text": "inside of the table if we go to glue",
    "start": "366720",
    "end": "370479"
  },
  {
    "text": "data catalog",
    "start": "370479",
    "end": "373280"
  },
  {
    "text": "this is the new table crit",
    "start": "374880",
    "end": "378080"
  },
  {
    "text": "as you can see now we don't have the",
    "start": "378080",
    "end": "380720"
  },
  {
    "text": "partitions load",
    "start": "380720",
    "end": "382240"
  },
  {
    "text": "so you don't need to load the partitions",
    "start": "382240",
    "end": "384720"
  },
  {
    "text": "every time",
    "start": "384720",
    "end": "387280"
  },
  {
    "start": "389000",
    "end": "450000"
  },
  {
    "text": "the next stop is architecture partitions",
    "start": "390080",
    "end": "392479"
  },
  {
    "text": "with packet files",
    "start": "392479",
    "end": "395840"
  },
  {
    "text": "before i jump in how you can architect",
    "start": "395919",
    "end": "398000"
  },
  {
    "text": "your partitions",
    "start": "398000",
    "end": "399280"
  },
  {
    "text": "we need to understand how perky file",
    "start": "399280",
    "end": "401280"
  },
  {
    "text": "works apache part key",
    "start": "401280",
    "end": "403280"
  },
  {
    "text": "is a columnar file format the columns",
    "start": "403280",
    "end": "406240"
  },
  {
    "text": "are grouped together",
    "start": "406240",
    "end": "407520"
  },
  {
    "text": "by row group for example here we have",
    "start": "407520",
    "end": "410479"
  },
  {
    "text": "group 0",
    "start": "410479",
    "end": "411680"
  },
  {
    "text": "and row group 1. we have column a inside",
    "start": "411680",
    "end": "415039"
  },
  {
    "text": "of row group 0",
    "start": "415039",
    "end": "416080"
  },
  {
    "text": "and column b",
    "start": "416080",
    "end": "418800"
  },
  {
    "text": "each row group is compressed and in the",
    "start": "419759",
    "end": "422240"
  },
  {
    "text": "footer",
    "start": "422240",
    "end": "422800"
  },
  {
    "text": "we have the metadata about the raw",
    "start": "422800",
    "end": "425120"
  },
  {
    "text": "groups so in the footer of the file",
    "start": "425120",
    "end": "427440"
  },
  {
    "text": "we have our metadata related with this",
    "start": "427440",
    "end": "430080"
  },
  {
    "text": "file",
    "start": "430080",
    "end": "430639"
  },
  {
    "text": "and the row groups for example if you",
    "start": "430639",
    "end": "433840"
  },
  {
    "text": "run the packet to",
    "start": "433840",
    "end": "436880"
  },
  {
    "text": "to read the row groups we can see that",
    "start": "436880",
    "end": "440319"
  },
  {
    "text": "for the column ig inside of the row",
    "start": "440319",
    "end": "443120"
  },
  {
    "text": "group",
    "start": "443120",
    "end": "443599"
  },
  {
    "text": "1 the mini value is 1 and the max value",
    "start": "443599",
    "end": "446720"
  },
  {
    "text": "is 4.",
    "start": "446720",
    "end": "451840"
  },
  {
    "text": "we can use the parquet rule groups to",
    "start": "451919",
    "end": "453919"
  },
  {
    "text": "reduce the number of partitions need",
    "start": "453919",
    "end": "456240"
  },
  {
    "text": "it helps with partitions with high",
    "start": "456240",
    "end": "458400"
  },
  {
    "text": "cardiology",
    "start": "458400",
    "end": "459440"
  },
  {
    "text": "we recommend to write the files ordered",
    "start": "459440",
    "end": "462720"
  },
  {
    "text": "by the call that you're going to use",
    "start": "462720",
    "end": "464479"
  },
  {
    "text": "in the where clause for example",
    "start": "464479",
    "end": "468000"
  },
  {
    "text": "here we have the file that's not ordered",
    "start": "468000",
    "end": "473360"
  },
  {
    "text": "so in both row groups we have the value",
    "start": "473440",
    "end": "476720"
  },
  {
    "text": "1 here and here and the value 2",
    "start": "476720",
    "end": "480319"
  },
  {
    "text": "here and here",
    "start": "480319",
    "end": "483520"
  },
  {
    "text": "in the footer we can see that the mean",
    "start": "483840",
    "end": "486400"
  },
  {
    "text": "value for the row group 1",
    "start": "486400",
    "end": "488319"
  },
  {
    "text": "is 1 and the max value is 9.",
    "start": "488319",
    "end": "491360"
  },
  {
    "text": "and the for row group 2 the main value",
    "start": "491360",
    "end": "493599"
  },
  {
    "text": "is 1 and the max file",
    "start": "493599",
    "end": "495280"
  },
  {
    "text": "is 10. so if you run a query",
    "start": "495280",
    "end": "498879"
  },
  {
    "text": "and where clause is ig equals 1",
    "start": "498879",
    "end": "502479"
  },
  {
    "text": "we need to read and decompress both row",
    "start": "502479",
    "end": "505360"
  },
  {
    "text": "groups",
    "start": "505360",
    "end": "507039"
  },
  {
    "text": "and if we run a query and in the word",
    "start": "507039",
    "end": "509280"
  },
  {
    "text": "clause is",
    "start": "509280",
    "end": "510319"
  },
  {
    "text": "ig equals 3 which don't exist in this",
    "start": "510319",
    "end": "513760"
  },
  {
    "text": "file we still need to decompress both",
    "start": "513760",
    "end": "516640"
  },
  {
    "text": "row groups",
    "start": "516640",
    "end": "517440"
  },
  {
    "text": "because of the mean and the max values",
    "start": "517440",
    "end": "520080"
  },
  {
    "text": "on the footer configuration",
    "start": "520080",
    "end": "523440"
  },
  {
    "text": "however if your file is ordered by",
    "start": "523440",
    "end": "526320"
  },
  {
    "text": "example",
    "start": "526320",
    "end": "528160"
  },
  {
    "text": "here we have whole group 1 with the",
    "start": "528160",
    "end": "531040"
  },
  {
    "text": "value 1 and 2",
    "start": "531040",
    "end": "532720"
  },
  {
    "text": "row group 2 with 4 9 and 10.",
    "start": "532720",
    "end": "536480"
  },
  {
    "text": "on the footer for the row group 1 the",
    "start": "536480",
    "end": "538720"
  },
  {
    "text": "main value is 1",
    "start": "538720",
    "end": "539760"
  },
  {
    "text": "and the max value is true for row group",
    "start": "539760",
    "end": "542399"
  },
  {
    "text": "2",
    "start": "542399",
    "end": "542800"
  },
  {
    "text": "the mean value is 4 and the max value is",
    "start": "542800",
    "end": "545200"
  },
  {
    "text": "9.",
    "start": "545200",
    "end": "547040"
  },
  {
    "text": "so if you run a query and in the where",
    "start": "547040",
    "end": "549279"
  },
  {
    "text": "clause",
    "start": "549279",
    "end": "550640"
  },
  {
    "text": "you have ig equals one we will",
    "start": "550640",
    "end": "553920"
  },
  {
    "text": "decompress",
    "start": "553920",
    "end": "555040"
  },
  {
    "text": "only the row group one",
    "start": "555040",
    "end": "558320"
  },
  {
    "text": "also if you run a query and the query",
    "start": "558320",
    "end": "561279"
  },
  {
    "text": "and the where clause",
    "start": "561279",
    "end": "562320"
  },
  {
    "text": "is ig equals 3 which don't exist in this",
    "start": "562320",
    "end": "565839"
  },
  {
    "text": "file",
    "start": "565839",
    "end": "566560"
  },
  {
    "text": "we skip both of row groups",
    "start": "566560",
    "end": "570720"
  },
  {
    "text": "that is an important concept because the",
    "start": "571440",
    "end": "573440"
  },
  {
    "text": "column ig has a high cardinality",
    "start": "573440",
    "end": "575600"
  },
  {
    "text": "and is not a good option for a partition",
    "start": "575600",
    "end": "578399"
  },
  {
    "text": "so here is example",
    "start": "578399",
    "end": "579600"
  },
  {
    "text": "in the month 10 we have three files and",
    "start": "579600",
    "end": "582320"
  },
  {
    "text": "the total is",
    "start": "582320",
    "end": "583360"
  },
  {
    "text": "10 megabytes",
    "start": "583360",
    "end": "586320"
  },
  {
    "text": "and if we query only the partition 5",
    "start": "587200",
    "end": "590320"
  },
  {
    "text": "we have only one file with 21 kilobytes",
    "start": "590320",
    "end": "595600"
  },
  {
    "text": "i copied this entire data",
    "start": "595600",
    "end": "598640"
  },
  {
    "text": "to a new path and in this new path",
    "start": "598640",
    "end": "602640"
  },
  {
    "text": "we don't have the ig as partition",
    "start": "602640",
    "end": "606320"
  },
  {
    "text": "but the files are ordered by ig",
    "start": "606320",
    "end": "609440"
  },
  {
    "text": "so instead inside of the path we have",
    "start": "609440",
    "end": "612320"
  },
  {
    "text": "three files and total",
    "start": "612320",
    "end": "613839"
  },
  {
    "text": "is 9 megabytes",
    "start": "613839",
    "end": "619839"
  },
  {
    "text": "using the both tables that we created",
    "start": "619839",
    "end": "621600"
  },
  {
    "text": "before for example",
    "start": "621600",
    "end": "625440"
  },
  {
    "text": "the table crate has as partition ear",
    "start": "628640",
    "end": "631680"
  },
  {
    "text": "move and ig if we check the s3 path",
    "start": "631680",
    "end": "637440"
  },
  {
    "text": "we have only one file with 21 kilobytes",
    "start": "642480",
    "end": "647040"
  },
  {
    "text": "and the for the second table",
    "start": "647040",
    "end": "650320"
  },
  {
    "text": "near different path we have",
    "start": "652399",
    "end": "655760"
  },
  {
    "text": "partitions ear and mouth if we check",
    "start": "655760",
    "end": "659760"
  },
  {
    "text": "the files inside of this path",
    "start": "659760",
    "end": "664079"
  },
  {
    "text": "we have three files with 9.",
    "start": "664079",
    "end": "667360"
  },
  {
    "text": "9 megabytes now",
    "start": "667360",
    "end": "670800"
  },
  {
    "text": "if you require this table for example",
    "start": "670800",
    "end": "675120"
  },
  {
    "text": "counting by repo name",
    "start": "675120",
    "end": "680720"
  },
  {
    "text": "in the table where the g is a partition",
    "start": "682720",
    "end": "686480"
  },
  {
    "text": "we read 0 9 0.09 kilobytes",
    "start": "686480",
    "end": "692399"
  },
  {
    "text": "and if we do the same with the table",
    "start": "692399",
    "end": "694800"
  },
  {
    "text": "where ig is not a partition",
    "start": "694800",
    "end": "698880"
  },
  {
    "text": "we read 0.69",
    "start": "700959",
    "end": "704399"
  },
  {
    "text": "kilobytes and not 10 megabytes",
    "start": "704399",
    "end": "709440"
  },
  {
    "text": "and another example is if we select",
    "start": "709839",
    "end": "712959"
  },
  {
    "text": "only two columns for example comics edge",
    "start": "712959",
    "end": "716800"
  },
  {
    "text": "in this table we have the g as partition",
    "start": "716800",
    "end": "721040"
  },
  {
    "text": "so when we run the query as you can see",
    "start": "721040",
    "end": "725120"
  },
  {
    "text": "the dot scan is 1.46 kilowatts",
    "start": "725120",
    "end": "730720"
  },
  {
    "text": "and if we do the same with the table",
    "start": "730720",
    "end": "733440"
  },
  {
    "text": "where",
    "start": "733440",
    "end": "735760"
  },
  {
    "text": "ig is not a partition",
    "start": "737040",
    "end": "740639"
  },
  {
    "text": "it is converted but",
    "start": "742000",
    "end": "745680"
  },
  {
    "text": "not much more so this is the second",
    "start": "745680",
    "end": "749120"
  },
  {
    "text": "option",
    "start": "749120",
    "end": "749680"
  },
  {
    "text": "that you can use to define your",
    "start": "749680",
    "end": "751760"
  },
  {
    "text": "partitions",
    "start": "751760",
    "end": "754399"
  },
  {
    "text": "thank you for watching and have a good",
    "start": "756000",
    "end": "757760"
  },
  {
    "text": "day",
    "start": "757760",
    "end": "759839"
  }
]