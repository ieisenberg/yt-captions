[
  {
    "text": "In this video, I will explain some often overlooked considerations",
    "start": "5566",
    "end": "8333"
  },
  {
    "text": "when designing DynamoDB data models based ",
    "start": "8333",
    "end": "12000"
  },
  {
    "text": "on the access patterns of a new application.",
    "start": "12000",
    "end": "15000"
  },
  {
    "text": "Many customers design their models with the assumption ",
    "start": "16100",
    "end": "19200"
  },
  {
    "text": "of using Global Secondary Indexes.\nWhile GSIs are a great feature,",
    "start": "19200",
    "end": "24866"
  },
  {
    "text": "I will discuss cases where scanning the table can be more cost-effective,",
    "start": "25300",
    "end": "29866"
  },
  {
    "text": "even if the table contains millions of items.",
    "start": "29900",
    "end": "32900"
  },
  {
    "text": "First, I will briefly introduce",
    "start": "34800",
    "end": "37800"
  },
  {
    "text": "Global Secondary Indexes (GSIs) and table scans, and how they work.",
    "start": "37833",
    "end": "42400"
  },
  {
    "text": "Then, using the AWS Pricing Calculator, I will deepen the understanding of the cost structure",
    "start": "43266",
    "end": "48865"
  },
  {
    "text": "of DynamoDB, and explain the cost differences between GSIs and table scans.",
    "start": "48900",
    "end": "52500"
  },
  {
    "text": "This \"DynamoDB Nuggets\" is a learning content that introduces useful",
    "start": "54433",
    "end": "57600"
  },
  {
    "text": "information for using DynamoDB in short 15-minute videos.",
    "start": "57633",
    "end": "62200"
  },
  {
    "text": "Since the content is brief, ",
    "start": "62233",
    "end": "67400"
  },
  {
    "text": "I hope you can enjoy viewing it casually. ",
    "start": "67400",
    "end": "73100"
  },
  {
    "text": "Alright, let's dive into the main content. \nFirst, I will explain how Global Secondary Indexes (GSIs) work",
    "start": "73766",
    "end": "79533"
  },
  {
    "text": "With Global Secondary Indexes, you can organize your data using keys that are different",
    "start": "79533",
    "end": "82866"
  },
  {
    "text": "from the partition key and sort key of the base table.",
    "start": "82866",
    "end": "85866"
  },
  {
    "text": "In this example, the orange partition key and sort key",
    "start": "87166",
    "end": "90166"
  },
  {
    "text": "belong to the base table, while the green and pink keys are for the Global Secondary Index.",
    "start": "90200",
    "end": "94565"
  },
  {
    "text": "hen creating a Global Secondary Index, you can choose which attributes to project.",
    "start": "95500",
    "end": "100233"
  },
  {
    "text": "You can project just the keys, specific attributes, ",
    "start": "101366",
    "end": "103100"
  },
  {
    "text": "or the full data from the base table.",
    "start": "103100",
    "end": "106200"
  },
  {
    "text": "In other words, Global Secondary Indexes allow you to efficiently access data using different primary keys,",
    "start": "107266",
    "end": "112033"
  },
  {
    "text": "enabling you to accommodate new access patterns.",
    "start": "112100",
    "end": "116132"
  },
  {
    "text": "This is a very powerful feature, but one thing that many customers tend",
    "start": "117666",
    "end": "121466"
  },
  {
    "text": "to overlook when building new application access patterns is ",
    "start": "121500",
    "end": "125366"
  },
  {
    "text": "that maintaining Global Secondary Indexes requires ",
    "start": "125666",
    "end": "128399"
  },
  {
    "text": "copying the data from the base table. If you project all attributes, ",
    "start": "128400",
    "end": "133000"
  },
  {
    "text": "you end up creating a full duplicate of the table.",
    "start": "133000",
    "end": "136500"
  },
  {
    "text": "This means the storage size doubles, and every write to the base table also requires a write to the Global Secondary Index.",
    "start": "137100",
    "end": "143733"
  },
  {
    "text": "Now, let me explain ",
    "start": "146900",
    "end": "147732"
  },
  {
    "text": "how the Scan operation works.",
    "start": "147733",
    "end": "153866"
  },
  {
    "text": "The Scan operation allows you to retrieve all the information in a table.",
    "start": "153866",
    "end": "157733"
  },
  {
    "text": "When you call the Scan API, DynamoDB will return ",
    "start": "158533",
    "end": "161133"
  },
  {
    "text": "all the data in the table. ",
    "start": "161133",
    "end": "164666"
  },
  {
    "text": "Since there could be millions of items, you need to process the results ",
    "start": "164666",
    "end": "168700"
  },
  {
    "text": "page-by-page as they are returned from the DynamoDB API.",
    "start": "168733",
    "end": "171733"
  },
  {
    "text": "Then, on the application side, you can aggregate those results to create useful information.",
    "start": "171766",
    "end": "176800"
  },
  {
    "text": "You can also specify filter conditions to retrieve only the data that matches the condition, ",
    "start": "177933",
    "end": "180966"
  },
  {
    "text": "rather than scanning the full set of items.",
    "start": "180966",
    "end": "184800"
  },
  {
    "text": "However, even with the filtering, the cost is the same as scanning all the items.",
    "start": "186033",
    "end": "192100"
  },
  {
    "text": "To speed up the Scan operation, ",
    "start": "195733",
    "end": "198100"
  },
  {
    "text": "you can specify the \"ParallelWorkers\" parameter in the API call.",
    "start": "198100",
    "end": "201533"
  },
  {
    "text": "This allows DynamoDB to split the data into multiple segments,",
    "start": "202300",
    "end": "205400"
  },
  {
    "text": "and each worker can retrieve",
    "start": "205400",
    "end": "208500"
  },
  {
    "text": "a portion of the data in parallel.",
    "start": "208500",
    "end": "213800"
  },
  {
    "text": "When dealing with millions of items, you might think that indexes, which only return a small portion of the elements,",
    "start": "213800",
    "end": "219500"
  },
  {
    "text": "would be more cost-effective than a Scan operation.",
    "start": "219833",
    "end": "224366"
  },
  {
    "text": "To better understand the differences, let's look at a specific example.",
    "start": "224366",
    "end": "227366"
  },
  {
    "text": "et's say you are writing 1 kilobyte of data to DynamoDB",
    "start": "229800",
    "end": "231333"
  },
  {
    "text": "twice per second, and",
    "start": "231333",
    "end": "234765"
  },
  {
    "text": "the table contains 1 million items.",
    "start": "235833",
    "end": "237566"
  },
  {
    "text": "If you use a Global Secondary Index to read the data once a day, ",
    "start": "237566",
    "end": "243233"
  },
  {
    "text": "you will get 2,000 elements returned.",
    "start": "243500",
    "end": "248133"
  },
  {
    "text": "This will require 15,208 read capacity units per month.",
    "start": "248400",
    "end": "251433"
  },
  {
    "text": "However, to maintain this index,",
    "start": "253033",
    "end": "254533"
  },
  {
    "text": "you will need to write 2 times per second, ",
    "start": "254533",
    "end": "258400"
  },
  {
    "text": "which adds an additional 10,512,000 write capacity units per month.",
    "start": "258433",
    "end": "262866"
  },
  {
    "text": "This is a very large number, which is often overlooked by many people.",
    "start": "263900",
    "end": "267733"
  },
  {
    "text": "On the other hand, with a Scan, you read all the data in the table",
    "start": "268600",
    "end": "271633"
  },
  {
    "text": "and then filter the information you need.",
    "start": "271633",
    "end": "276533"
  },
  {
    "text": "Let's use the AWS Pricing Calculator to compare the costs of both approaches.",
    "start": "276666",
    "end": "280300"
  },
  {
    "text": "Now, let's do trial calculations while using the actual screen",
    "start": "281833",
    "end": "284833"
  },
  {
    "text": "Let's select the Tokyo region,",
    "start": "286200",
    "end": "287600"
  },
  {
    "text": "前提に探してみます　DYNAMODBの機能を",
    "start": "287600",
    "end": "292333"
  },
  {
    "text": "and in the DynamoDB settings, choose On-Demand Capacity,",
    "start": "292366",
    "end": "295366"
  },
  {
    "text": "with the table class as Standard,",
    "start": "295566",
    "end": "298033"
  },
  {
    "text": "storage size of 1 GB",
    "start": "298033",
    "end": "301033"
  },
  {
    "text": "As for writing capacity, 2 times per second according to the previous scenario",
    "start": "301733",
    "end": "305300"
  },
  {
    "text": "For reading capacity,",
    "start": "307700",
    "end": "308666"
  },
  {
    "text": " I have set it to 2000 per day.",
    "start": "308666",
    "end": "315599"
  },
  {
    "text": "Looking at the detailed cost information, the total cost for ",
    "start": "315600",
    "end": "319500"
  },
  {
    "text": "this base table is $7.79.",
    "start": "319500",
    "end": "321366"
  },
  {
    "text": "let's remember what happens with a Global Secondary Index.",
    "start": "321366",
    "end": "324500"
  },
  {
    "text": "Assuming we project all attributes, the additional cost for the duplicated data",
    "start": "324500",
    "end": "329133"
  },
  {
    "text": "in the Global Secondary Index would be $0.28,",
    "start": "329466",
    "end": "333100"
  },
  {
    "text": "and the additional cost for the writes to the Global Secondary Index would be $7.50.",
    "start": "333133",
    "end": "339000"
  },
  {
    "text": "So, the total cost to accommodate the application's access patterns ",
    "start": "340200",
    "end": "344000"
  },
  {
    "text": "would be $15.57. Let's compare this to the cost of a Scan operation.",
    "start": "344200",
    "end": "348800"
  },
  {
    "text": "For Scans, the write costs are only for the base table.",
    "start": "350100",
    "end": "353700"
  },
  {
    "text": "However, the reads are for 1 million items in the table,",
    "start": "354733",
    "end": "358733"
  },
  {
    "text": "scanning the entire table once a day,",
    "start": "358766",
    "end": "362432"
  },
  {
    "text": "Also, if 1 month is 30 days,",
    "start": "363466",
    "end": "365800"
  },
  {
    "text": "which is 30 million reads per month.",
    "start": "365800",
    "end": "368800"
  },
  {
    "text": "Calculating this, ",
    "start": "369566",
    "end": "372566"
  },
  {
    "text": "the total cost comes ",
    "start": "376800",
    "end": "378766"
  },
  {
    "text": "out to $12.06.",
    "start": "378766",
    "end": "381533"
  },
  {
    "text": "Drilling into the details, the reads cost $4.28,",
    "start": "381533",
    "end": "383699"
  },
  {
    "text": "but there are no additional costs for maintaining indexes.",
    "start": "383700",
    "end": "388433"
  },
  {
    "text": "So, the Scan operation is more cost-effective.",
    "start": "389266",
    "end": "393565"
  },
  {
    "text": "To summarize the calculation results from earlier.",
    "start": "397200",
    "end": "400200"
  },
  {
    "text": "Many people tend to avoid Scan operations, thinking they are a bad approach.",
    "start": "400533",
    "end": "404533"
  },
  {
    "text": "However, Scans can actually be a great method.",
    "start": "404533",
    "end": "409666"
  },
  {
    "text": "With Scans, you can retrieve all the data in bulk, and by using features like multithreading and filtering, you can process the data quickly.",
    "start": "409666",
    "end": "413199"
  },
  {
    "text": "owever, you do need to keep in mind that you will be ",
    "start": "413833",
    "end": "416733"
  },
  {
    "text": "charged for reading the entire dataset. How did you like it? ",
    "start": "416733",
    "end": "423866"
  },
  {
    "text": "As you can see, when designing DynamoDB tables and access patterns, ",
    "start": "423900",
    "end": "426900"
  },
  {
    "text": "you always need to consider the flow of data.",
    "start": "427166",
    "end": "430133"
  },
  {
    "text": "Scans should not be avoided outright - they should be leveraged appropriately.",
    "start": "430133",
    "end": "435133"
  },
  {
    "text": "I'm glad the information I presented today can help",
    "start": "436300",
    "end": "437233"
  },
  {
    "text": "lead to optimal DynamoDB usage.",
    "start": "437233",
    "end": "442533"
  },
  {
    "text": "That's all I have. Thank you very much.",
    "start": "442566",
    "end": "443566"
  }
]