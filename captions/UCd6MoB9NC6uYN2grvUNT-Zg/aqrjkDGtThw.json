[
  {
    "text": "hello and welcome to this talk on machine learning at the edge part of the",
    "start": "4430",
    "end": "9900"
  },
  {
    "text": "AWS innovate online conference machine learning nei edition my name is couple pencil and today we",
    "start": "9900",
    "end": "18480"
  },
  {
    "text": "are going to talk about implementing machine learning on IOT devices at the",
    "start": "18480",
    "end": "24090"
  },
  {
    "text": "edge of the network we are going to look at some real use cases from our customers and then dive deep to",
    "start": "24090",
    "end": "31619"
  },
  {
    "text": "understand how the AWS Greengrass service enables these use cases so let's",
    "start": "31619",
    "end": "38340"
  },
  {
    "text": "get started why do we need machine learning at the edge for many",
    "start": "38340",
    "end": "43590"
  },
  {
    "text": "applications for example medical equipment or heavy machinery in remote",
    "start": "43590",
    "end": "49260"
  },
  {
    "text": "locations it is impossible to use cloud-based services to perform machine",
    "start": "49260",
    "end": "54899"
  },
  {
    "text": "learning based predictions even if they have tons of sensors and can capture",
    "start": "54899",
    "end": "60270"
  },
  {
    "text": "tons of data there are good reasons why they cannot use cloud-based machine",
    "start": "60270",
    "end": "66659"
  },
  {
    "text": "learning services and that's a problem that's not going to go away and the",
    "start": "66659",
    "end": "71850"
  },
  {
    "text": "reason for this is the law of physics latency and last mile connectivity",
    "start": "71850",
    "end": "77210"
  },
  {
    "text": "latency of sending data packets to the cloud and getting a response back can be",
    "start": "77210",
    "end": "82700"
  },
  {
    "text": "unacceptable for scenarios that involve timely automated decision making for",
    "start": "82700",
    "end": "89790"
  },
  {
    "text": "example crash avoidance and medical alerts or equipment that is operating in",
    "start": "89790",
    "end": "95460"
  },
  {
    "text": "remote environments for example mining sites aircrafts that are in the sky and",
    "start": "95460",
    "end": "101250"
  },
  {
    "text": "ships at sea some decision-making such as high value safety critical processes",
    "start": "101250",
    "end": "109490"
  },
  {
    "text": "must continue to operate autonomously even when internet connection is not",
    "start": "109490",
    "end": "115770"
  },
  {
    "text": "available AWS Greengrass provides tools for communication among cooperative",
    "start": "115770",
    "end": "122700"
  },
  {
    "text": "devices that are interconnected over local networks and it provides the",
    "start": "122700",
    "end": "127829"
  },
  {
    "text": "capability to execute application code on these remote devices and",
    "start": "127829",
    "end": "133370"
  },
  {
    "text": "building them to operate autonomously secondly there is the law of economics",
    "start": "133370",
    "end": "139480"
  },
  {
    "text": "cost of bandwidth is not falling as fast as the cost of storage and compute AWS",
    "start": "139480",
    "end": "147260"
  },
  {
    "text": "Greengrass provides tools for locally aggregating and filtering data making it",
    "start": "147260",
    "end": "153379"
  },
  {
    "text": "easy to act on lower value data locally and upload only the high value data and",
    "start": "153379",
    "end": "159790"
  },
  {
    "text": "aggregated data to the cloud for analytics and storage the third set of",
    "start": "159790",
    "end": "166730"
  },
  {
    "text": "challenges is compliance and privacy for legal or compliance reasons and concerns",
    "start": "166730",
    "end": "172970"
  },
  {
    "text": "around privacy some industries prefer to store or duplicate data locally for",
    "start": "172970",
    "end": "179390"
  },
  {
    "text": "example hospitals hospitals may be required to keep all records locally",
    "start": "179390",
    "end": "184970"
  },
  {
    "text": "even if they are also duplicated in the cloud some governments impose data",
    "start": "184970",
    "end": "190730"
  },
  {
    "text": "sovereignty restrictions on where the data may be stored we announced AWS",
    "start": "190730",
    "end": "197209"
  },
  {
    "text": "green grass in the reinvent 2016 and we have been astonished with the breadth of",
    "start": "197209",
    "end": "203959"
  },
  {
    "text": "use cases that our customers and partners are bringing to us across industries industrial gateways from",
    "start": "203959",
    "end": "211970"
  },
  {
    "text": "manufacturing and logistics consumer gateways and consumer devices connected",
    "start": "211970",
    "end": "218299"
  },
  {
    "text": "automotive vehicles connected wireless infrastructure energy agriculture",
    "start": "218299",
    "end": "224049"
  },
  {
    "text": "insurance medical mining almost any industry you can think of and many of",
    "start": "224049",
    "end": "231530"
  },
  {
    "text": "these use cases involve machine learning AWS green grass is an edge based",
    "start": "231530",
    "end": "238069"
  },
  {
    "text": "software that allows our customers to securely connect their assets gather",
    "start": "238069",
    "end": "243829"
  },
  {
    "text": "data and take intelligent actions locally even when the internet",
    "start": "243829",
    "end": "249019"
  },
  {
    "text": "connectivity is not available it enables our customers to run machine",
    "start": "249019",
    "end": "254720"
  },
  {
    "text": "learning applications at the edge let's take a look at how some of our customers",
    "start": "254720",
    "end": "259970"
  },
  {
    "text": "are using AWS green grass yanmar is a manufacturer of a",
    "start": "259970",
    "end": "265650"
  },
  {
    "text": "cultural equipment climate control systems and aqua farming systems when",
    "start": "265650",
    "end": "272280"
  },
  {
    "text": "actively managing plant growth at greenhouses one of en-masse challenges",
    "start": "272280",
    "end": "277979"
  },
  {
    "text": "is administering the right amount of water and environmental support including fans and air conditioners",
    "start": "277979",
    "end": "285800"
  },
  {
    "text": "plants require different climate conditions and water quantity at",
    "start": "285800",
    "end": "291539"
  },
  {
    "text": "different stages of growth to monitor stages of plant growth Yanmar uses multiple cameras in each",
    "start": "291539",
    "end": "299669"
  },
  {
    "text": "greenhouse to take pictures of the plants which are then processed by machine learning algorithms on AWS green",
    "start": "299669",
    "end": "308070"
  },
  {
    "text": "grass to recognize growth stages this knowledge is then used to control the",
    "start": "308070",
    "end": "315030"
  },
  {
    "text": "water supply and the climate control systems by processing images from",
    "start": "315030",
    "end": "320430"
  },
  {
    "text": "cameras at the edge Yanmar minimizes the cost of 3G data usage in this way Yanmar",
    "start": "320430",
    "end": "328949"
  },
  {
    "text": "is able to implement a cost efficient smart greenhouse solution with image",
    "start": "328949",
    "end": "334889"
  },
  {
    "text": "recognition nokia is another customer of AWS who saw a need to analyze video",
    "start": "334889",
    "end": "342630"
  },
  {
    "text": "streams at the edge and send processed filtered data to the remote centers only",
    "start": "342630",
    "end": "349050"
  },
  {
    "text": "when anomalies were detected to solve this problem Nokia deployed AWS green grass on the",
    "start": "349050",
    "end": "357270"
  },
  {
    "text": "Nokia multi-access edge computing platform as the cost of bandwidth is expensive especially in remote locations",
    "start": "357270",
    "end": "364409"
  },
  {
    "text": "like oil rigs this has allowed Nokia to optimize the amount of data that is sent",
    "start": "364409",
    "end": "371039"
  },
  {
    "text": "to the cloud now let's take a closer look at AWS green grass which seamlessly",
    "start": "371039",
    "end": "377370"
  },
  {
    "text": "extends AWS to the devices so that they can act locally on the data that they",
    "start": "377370",
    "end": "384120"
  },
  {
    "text": "generate while still using the cloud for management analytics and durable storage",
    "start": "384120",
    "end": "391909"
  },
  {
    "text": "local actions and local triggers enable a local and symbol of IOT devices to coordinate and",
    "start": "391909",
    "end": "400680"
  },
  {
    "text": "operate autonomously data and state sync capability allows AWS greengrass devices",
    "start": "400680",
    "end": "408120"
  },
  {
    "text": "to synchronize their data and their state with the cloud whenever Internet connectivity becomes",
    "start": "408120",
    "end": "415320"
  },
  {
    "text": "available we have brought the security model of the AWS IOT cloud service to",
    "start": "415320",
    "end": "422520"
  },
  {
    "text": "the edge of the network by enabling AWS Greengrass to identify authenticate and",
    "start": "422520",
    "end": "429060"
  },
  {
    "text": "communicate with other local devices securely over-the-air updates capability",
    "start": "429060",
    "end": "434910"
  },
  {
    "text": "allows you to remotely update not only the data or state or AWS lambda",
    "start": "434910",
    "end": "441540"
  },
  {
    "text": "functions running on your devices but also the AWS Greengrass package itself",
    "start": "441540",
    "end": "447169"
  },
  {
    "text": "OPC UA is a very common protocol used in industrial IOT we have implemented a",
    "start": "447169",
    "end": "454050"
  },
  {
    "text": "protocol adapter for OPC UA to enable interaction between AWS Greengrass and",
    "start": "454050",
    "end": "460260"
  },
  {
    "text": "your existing iot devices that use OPC UA protocol the local resource access",
    "start": "460260",
    "end": "467730"
  },
  {
    "text": "feature makes it possible for your application code running on AWS",
    "start": "467730",
    "end": "472950"
  },
  {
    "text": "Greengrass devices to take advantage of resources like GPUs cameras and the",
    "start": "472950",
    "end": "480540"
  },
  {
    "text": "various sensors and actuators that might be available on the devices locally and",
    "start": "480540",
    "end": "486620"
  },
  {
    "text": "finally the powerful feature called ml inference or machine learning inference",
    "start": "486620",
    "end": "492770"
  },
  {
    "text": "it's a mechanism for you to train machine learning models in the cloud and",
    "start": "492770",
    "end": "498810"
  },
  {
    "text": "deploy them to run on AWS Greengrass devices at the edge to process data and",
    "start": "498810",
    "end": "505290"
  },
  {
    "text": "take actions locally now you might ask what can you do with machine learning at",
    "start": "505290",
    "end": "511260"
  },
  {
    "text": "the edge it's really up to your imagination AWS Greengrass machine learning",
    "start": "511260",
    "end": "517260"
  },
  {
    "text": "inference enables several use cases I'd like to highlight just a few of them",
    "start": "517260",
    "end": "523280"
  },
  {
    "text": "think about agricultural companies during harvest season they could apply",
    "start": "523280",
    "end": "529230"
  },
  {
    "text": "machine learning to quickly sort different type and quality of produce at the farm where it",
    "start": "529230",
    "end": "536430"
  },
  {
    "text": "is being harvested instead of having to transport it back to the processing facility and sorting it there in",
    "start": "536430",
    "end": "543930"
  },
  {
    "text": "industrial environments you could apply machine learning in manufacturing for example you can use machine learning",
    "start": "543930",
    "end": "551430"
  },
  {
    "text": "together with video cameras to determine the quality of manufactured goods and",
    "start": "551430",
    "end": "557220"
  },
  {
    "text": "decide whether to pack the goods for shipment or to discard low-quality goods",
    "start": "557220",
    "end": "562620"
  },
  {
    "text": "so how do you make this system intelligent if you were to do machine",
    "start": "562620",
    "end": "568050"
  },
  {
    "text": "learning today you would start with building and training a model in the",
    "start": "568050",
    "end": "573600"
  },
  {
    "text": "cloud which is a compute intensive job for most of the applications you will",
    "start": "573600",
    "end": "579630"
  },
  {
    "text": "also run the inference and predictions in the cloud largely much of machine",
    "start": "579630",
    "end": "586350"
  },
  {
    "text": "learning you see today is done through the cloud but as we saw in our case",
    "start": "586350",
    "end": "591420"
  },
  {
    "text": "studies you can't always do that there are challenges associated with cost and",
    "start": "591420",
    "end": "596940"
  },
  {
    "text": "latency of data transfer so we have taken a different approach to solve this",
    "start": "596940",
    "end": "603840"
  },
  {
    "text": "problem using AWS Greengrass and machine learning the first part the building and",
    "start": "603840",
    "end": "610890"
  },
  {
    "text": "training of machine learning models which is a computer intensive job you would still do this in the cloud as you",
    "start": "610890",
    "end": "617910"
  },
  {
    "text": "have been doing however you deploy the trained machine learning model on a",
    "start": "617910",
    "end": "624390"
  },
  {
    "text": "Greengrass device at the edge then whether that device is connected to the",
    "start": "624390",
    "end": "630750"
  },
  {
    "text": "internet or not the device can run inference on top of the data on the device itself and it can take actions",
    "start": "630750",
    "end": "638100"
  },
  {
    "text": "locally AWS Greengrass ml inference relies on a deeper feature of AWS",
    "start": "638100",
    "end": "645360"
  },
  {
    "text": "Greengrass which is now also available to all developers it's called local",
    "start": "645360",
    "end": "651570"
  },
  {
    "text": "resource access local resource access lets you extend the common programming",
    "start": "651570",
    "end": "658230"
  },
  {
    "text": "model of AWS Greengrass that is the AWS lambda functions",
    "start": "658230",
    "end": "663779"
  },
  {
    "text": "that you deploy on AWS Greengrass devices and lets them interact with the",
    "start": "663779",
    "end": "669899"
  },
  {
    "text": "underlying capabilities of the AWS greengrass host device for example a GPU",
    "start": "669899",
    "end": "677029"
  },
  {
    "text": "sensors actuators and so on in this way the AWS lambda functions that are",
    "start": "677029",
    "end": "684990"
  },
  {
    "text": "written in the cloud and deployed to AWS Greengrass devices can start to interact",
    "start": "684990",
    "end": "691139"
  },
  {
    "text": "with the devices and the physical environment around them now I'm going to",
    "start": "691139",
    "end": "697769"
  },
  {
    "text": "show you a demo of machine learning inference on AWS Greengrass if you have",
    "start": "697769",
    "end": "704850"
  },
  {
    "text": "ever done scuba diving or snorkeling then you might have noticed how the",
    "start": "704850",
    "end": "710100"
  },
  {
    "text": "underwater natural beauty is being polluted by artificial debris plastic",
    "start": "710100",
    "end": "716519"
  },
  {
    "text": "bags discarded beverage cans fishing nets and so on there are a number of",
    "start": "716519",
    "end": "722579"
  },
  {
    "text": "seabird clean-up efforts happening around the world what if we could build",
    "start": "722579",
    "end": "728370"
  },
  {
    "text": "a machine learning model that can detect the presence of litter by analyzing",
    "start": "728370",
    "end": "734370"
  },
  {
    "text": "images from underwater cameras such a model could be used to process the",
    "start": "734370",
    "end": "740399"
  },
  {
    "text": "photos and videos from underwater drones or underwater cameras carried by divers",
    "start": "740399",
    "end": "747360"
  },
  {
    "text": "to create a map that identifies places with high density of underwater litter",
    "start": "747360",
    "end": "755089"
  },
  {
    "text": "such maps could potentially aid the seabed cleanup efforts now I don't have",
    "start": "755089",
    "end": "761490"
  },
  {
    "text": "an underwater drone but I was able to get some images from such drones and",
    "start": "761490",
    "end": "766920"
  },
  {
    "text": "with that I was able to train a model that can distinguish between marine life",
    "start": "766920",
    "end": "772829"
  },
  {
    "text": "and litter with a fair degree of accuracy admittedly my model was trained",
    "start": "772829",
    "end": "779670"
  },
  {
    "text": "using a very small data set of less than 300 images and therefore leaves a lot of",
    "start": "779670",
    "end": "786089"
  },
  {
    "text": "room for improvement but it will serve the purpose of this demo I have used",
    "start": "786089",
    "end": "792120"
  },
  {
    "text": "Amazon Sage Maker to train this model during the demo",
    "start": "792120",
    "end": "797310"
  },
  {
    "text": "we will deploy this model to AWS green grass and perform ML inference on AWS",
    "start": "797310",
    "end": "803639"
  },
  {
    "text": "green grass using this model so for this demo the first thing that we need is a",
    "start": "803639",
    "end": "809220"
  },
  {
    "text": "machine learning model which can distinguish between marine life and litter in order to train such a model I",
    "start": "809220",
    "end": "817800"
  },
  {
    "text": "have downloaded images of underwater cameras from this website of jams tech e",
    "start": "817800",
    "end": "825649"
  },
  {
    "text": "library of deep-sea images I have downloaded roughly 300 images as my",
    "start": "825649",
    "end": "832199"
  },
  {
    "text": "training data set and I have used Amazon sage maker to train a model using that",
    "start": "832199",
    "end": "839309"
  },
  {
    "text": "notebook instance feature of Amazon sage maker so let me show you what that looks",
    "start": "839309",
    "end": "844470"
  },
  {
    "text": "like if I click on this link it should open the the notebook instance which I",
    "start": "844470",
    "end": "852870"
  },
  {
    "text": "have already opened here and here you can see my jupiter notebooks that are running on this notebook instance so let",
    "start": "852870",
    "end": "860790"
  },
  {
    "text": "me go ahead and open the notebook for you okay so as you can see that I have",
    "start": "860790",
    "end": "872699"
  },
  {
    "text": "written my code for the training of the ML model in this notebook I have used",
    "start": "872699",
    "end": "879509"
  },
  {
    "text": "the transfer learning capability of Amazon sage maker to use a pre trained",
    "start": "879509",
    "end": "885660"
  },
  {
    "text": "model that is trained on the imagenet data set and retrain it to differentiate",
    "start": "885660",
    "end": "892350"
  },
  {
    "text": "between marine life and later using my data set so let me skip down to the",
    "start": "892350",
    "end": "900120"
  },
  {
    "text": "portion where I am downloading my own data set so as you can see my data set",
    "start": "900120",
    "end": "906300"
  },
  {
    "text": "is placed in an s3 bucket and I download that data set over here using AWS CLI",
    "start": "906300",
    "end": "913470"
  },
  {
    "text": "commands and once that is downloaded over here I am using Amazon sage Maker",
    "start": "913470",
    "end": "920429"
  },
  {
    "text": "SDK to configure a training job and set",
    "start": "920429",
    "end": "926009"
  },
  {
    "text": "some hyper parameters and this is where I are exit that training job once the training job",
    "start": "926009",
    "end": "934770"
  },
  {
    "text": "is complete I use another API of the sage maker library to deploy this",
    "start": "934770",
    "end": "942240"
  },
  {
    "text": "trained model to an endpoint that is hosted by Amazon Sage Maker so I have",
    "start": "942240",
    "end": "949110"
  },
  {
    "text": "already executed the notebook until this point so we already have a machine",
    "start": "949110",
    "end": "954240"
  },
  {
    "text": "learning model that is trained let me show you that so this is the model that",
    "start": "954240",
    "end": "962970"
  },
  {
    "text": "has already been trained and I am already hosting it at this endpoint and",
    "start": "962970",
    "end": "971090"
  },
  {
    "text": "in the notebook I am going to make API calls to this hosted endpoint to run",
    "start": "971090",
    "end": "980550"
  },
  {
    "text": "inference against some sample images so let me go ahead and show you a few",
    "start": "980550",
    "end": "989310"
  },
  {
    "text": "sample images let's just see if the trained model really works according to",
    "start": "989310",
    "end": "994890"
  },
  {
    "text": "our expectation so I have an s3 bucket where I have placed some sample images",
    "start": "994890",
    "end": "1000410"
  },
  {
    "text": "that I want to test one of them is loaded here as you can see I'm going to",
    "start": "1000410",
    "end": "1007160"
  },
  {
    "text": "modify this and show you a few more images let's start with some images of",
    "start": "1007160",
    "end": "1012890"
  },
  {
    "text": "litter first so when I execute this block we get a new image and that gets",
    "start": "1012890",
    "end": "1020960"
  },
  {
    "text": "rendered here and then over here that same image is sent to the hosted end",
    "start": "1020960",
    "end": "1028188"
  },
  {
    "text": "point of the model and we should see a",
    "start": "1028189",
    "end": "1033500"
  },
  {
    "text": "result here so now I am going to execute the image and there we go we can see",
    "start": "1033500",
    "end": "1039980"
  },
  {
    "text": "that according to this model the prediction is that this image is litter",
    "start": "1039980",
    "end": "1045680"
  },
  {
    "text": "and with a probability of 77% let's try",
    "start": "1045680",
    "end": "1052520"
  },
  {
    "text": "some more images",
    "start": "1052520",
    "end": "1055180"
  },
  {
    "text": "here is another image of something that should not be on the ocean bed the sea",
    "start": "1058740",
    "end": "1066990"
  },
  {
    "text": "bed and once again the model says yes this is litter now let me show you some",
    "start": "1066990",
    "end": "1076350"
  },
  {
    "text": "images of marine life we want to make sure that the model detects marine life",
    "start": "1076350",
    "end": "1082470"
  },
  {
    "text": "as marine life rather than later so let's try this image here so here is",
    "start": "1082470",
    "end": "1090960"
  },
  {
    "text": "a fish and let's see what the model thinks there we go the model thinks yes",
    "start": "1090960",
    "end": "1097860"
  },
  {
    "text": "it is a marine life-form it is fairly confident of this fact let",
    "start": "1097860",
    "end": "1103440"
  },
  {
    "text": "me try another image another type of",
    "start": "1103440",
    "end": "1110100"
  },
  {
    "text": "fish once again we get the desired",
    "start": "1110100",
    "end": "1115140"
  },
  {
    "text": "result and here is not a fish but a",
    "start": "1115140",
    "end": "1126930"
  },
  {
    "text": "different type of marine life form and once again we have fairly good result",
    "start": "1126930",
    "end": "1133950"
  },
  {
    "text": "now of course we are using images that are fairly simple and I as I mentioned",
    "start": "1133950",
    "end": "1139500"
  },
  {
    "text": "earlier I have trained this model with a fairly small subset small data set of",
    "start": "1139500",
    "end": "1145460"
  },
  {
    "text": "300 odd images so there is plenty of room for improvement of this model in",
    "start": "1145460",
    "end": "1150960"
  },
  {
    "text": "terms of accuracy and its ability to deal with more complex images than this",
    "start": "1150960",
    "end": "1157380"
  },
  {
    "text": "but for the purpose of this demo this model will do so we have this model",
    "start": "1157380",
    "end": "1165330"
  },
  {
    "text": "hosted at this end point now we want to deploy this model to an AWS Greengrass",
    "start": "1165330",
    "end": "1173130"
  },
  {
    "text": "device so like I said earlier I don't really have a underwater drone with me",
    "start": "1173130",
    "end": "1181460"
  },
  {
    "text": "and for the ease of demo I have deployed aw as green grass on an ec2 instance so",
    "start": "1181460",
    "end": "1189930"
  },
  {
    "text": "in order to deploy my model to that green grass running on ec2",
    "start": "1189930",
    "end": "1196120"
  },
  {
    "text": "instance I have downloaded this model from here which is a compressed file as",
    "start": "1196120",
    "end": "1201370"
  },
  {
    "text": "you can see and I have uploaded it uploaded it into an s3 bucket so let me",
    "start": "1201370",
    "end": "1209650"
  },
  {
    "text": "show you my green grass configuration so",
    "start": "1209650",
    "end": "1216100"
  },
  {
    "text": "here you can see this is the configuration of my green grass group this green grass group consists of a",
    "start": "1216100",
    "end": "1223930"
  },
  {
    "text": "single green grass core device a machine learning model that I have defined right",
    "start": "1223930",
    "end": "1229960"
  },
  {
    "text": "here under resources and I am pointing",
    "start": "1229960",
    "end": "1235200"
  },
  {
    "text": "this configuration to download my model from an s3 bucket right here so the",
    "start": "1235200",
    "end": "1242920"
  },
  {
    "text": "model sits in s3 and I have made a selection from my bucket where I have",
    "start": "1242920",
    "end": "1251800"
  },
  {
    "text": "uploaded it and this is the one okay so",
    "start": "1251800",
    "end": "1259740"
  },
  {
    "text": "also I have a lambda function that is running on the green grass device",
    "start": "1259740",
    "end": "1265440"
  },
  {
    "text": "because the model alone doesn't do anything we need to write some business",
    "start": "1265440",
    "end": "1270820"
  },
  {
    "text": "logic in a lambda function which makes use of this model that gets deployed to",
    "start": "1270820",
    "end": "1279940"
  },
  {
    "text": "the green grass device so now let me show you where how do I configure this",
    "start": "1279940",
    "end": "1286380"
  },
  {
    "text": "so in the same green grass group I have",
    "start": "1286380",
    "end": "1292690"
  },
  {
    "text": "also configured a lambda function and there are certain parameters that I have",
    "start": "1292690",
    "end": "1299920"
  },
  {
    "text": "configured along with this lambda function for example the memory that is",
    "start": "1299920",
    "end": "1305050"
  },
  {
    "text": "available to this function and some environment variables including the path",
    "start": "1305050",
    "end": "1310720"
  },
  {
    "text": "where this model will be accessible for this lambda function the same path is",
    "start": "1310720",
    "end": "1317920"
  },
  {
    "text": "also configured as the local path of the machine learning resource that we have",
    "start": "1317920",
    "end": "1325210"
  },
  {
    "text": "just defined in the green grass group configuration",
    "start": "1325210",
    "end": "1331179"
  },
  {
    "text": "there we go that is the local path so now the model is deployed together with",
    "start": "1332200",
    "end": "1339020"
  },
  {
    "text": "the lambda function to my green grass device and my lambda function can access",
    "start": "1339020",
    "end": "1344630"
  },
  {
    "text": "this machine learning model locally in this way my green grass can continue to",
    "start": "1344630",
    "end": "1351680"
  },
  {
    "text": "operate even when there is no internet connectivity available so now let's see",
    "start": "1351680",
    "end": "1357110"
  },
  {
    "text": "what is inside this lambda function so",
    "start": "1357110",
    "end": "1365300"
  },
  {
    "text": "this is my lambda function code and I will give you a quick walkthrough of",
    "start": "1365300",
    "end": "1370370"
  },
  {
    "text": "what is happening in here since this is",
    "start": "1370370",
    "end": "1375590"
  },
  {
    "text": "running on an ec2 instance I don't really have a physical camera that is connected to my ec2 instance so I have",
    "start": "1375590",
    "end": "1383390"
  },
  {
    "text": "placed some sample images in an s3 bucket I have eight different images and",
    "start": "1383390",
    "end": "1389960"
  },
  {
    "text": "I have programmed my lambda function to randomly pick one at a time from these",
    "start": "1389960",
    "end": "1396110"
  },
  {
    "text": "eight download them to this green grass device and then analyze them using the",
    "start": "1396110",
    "end": "1403520"
  },
  {
    "text": "local machine learning model I have also",
    "start": "1403520",
    "end": "1409810"
  },
  {
    "text": "configured some simulated location coordinates because I wanted to",
    "start": "1409810",
    "end": "1416540"
  },
  {
    "text": "visualize the results of this demo on a map as I said at the beginning of this",
    "start": "1416540",
    "end": "1422570"
  },
  {
    "text": "demo what if we could generate a map of where exactly there is higher density of",
    "start": "1422570",
    "end": "1429020"
  },
  {
    "text": "litter that would help the cleanup efforts so that is why I am simulating",
    "start": "1429020",
    "end": "1434630"
  },
  {
    "text": "some location coordinates and let me show you how all of this is used so this",
    "start": "1434630",
    "end": "1443000"
  },
  {
    "text": "is a long-running lambda function long-running lambda functions is a feature of AWS Greengrass that allows",
    "start": "1443000",
    "end": "1450530"
  },
  {
    "text": "this lambda function to keep running endlessly so the first thing that we do",
    "start": "1450530",
    "end": "1456740"
  },
  {
    "text": "is we load the machine learning remember I showed you the environment",
    "start": "1456740",
    "end": "1463400"
  },
  {
    "text": "variable which points to the location of the machine learning model on the green",
    "start": "1463400",
    "end": "1469250"
  },
  {
    "text": "grass device so that environment variable is being accessed right here and in this class I am using MX net",
    "start": "1469250",
    "end": "1478250"
  },
  {
    "text": "libraries to load that model once the model gets loaded in memory now I can",
    "start": "1478250",
    "end": "1484520"
  },
  {
    "text": "make API calls to this model local API calls to run predictions so in this loop",
    "start": "1484520",
    "end": "1492520"
  },
  {
    "text": "it's a very simple loop the first thing it does is picks a file name randomly",
    "start": "1492520",
    "end": "1498529"
  },
  {
    "text": "from my array downloads that file from s3 to that Greengrass device and then it",
    "start": "1498529",
    "end": "1506120"
  },
  {
    "text": "sends that file to the MX net library to run inference against my model the",
    "start": "1506120",
    "end": "1513620"
  },
  {
    "text": "results come back as category and probability so my code checks whether",
    "start": "1513620",
    "end": "1518960"
  },
  {
    "text": "the category that is predicted is litter and if it is litter then I simulate some",
    "start": "1518960",
    "end": "1526429"
  },
  {
    "text": "location coordinates for this particular image and then I push the results to an",
    "start": "1526429",
    "end": "1533059"
  },
  {
    "text": "AWS IOT topic if the results are not",
    "start": "1533059",
    "end": "1538520"
  },
  {
    "text": "litter I simply print a log message saying what was the result and what is",
    "start": "1538520",
    "end": "1544309"
  },
  {
    "text": "the probability so now let's see all of this in action switching back to the AWS",
    "start": "1544309",
    "end": "1552200"
  },
  {
    "text": "console this is the s3 bucket where I",
    "start": "1552200",
    "end": "1558169"
  },
  {
    "text": "have the sample images and they are already being downloaded randomly by my",
    "start": "1558169",
    "end": "1564860"
  },
  {
    "text": "lambda function because I have already deployed all of this to my green grass running on ec2 so let me go ahead and",
    "start": "1564860",
    "end": "1574250"
  },
  {
    "text": "show you the logs that are coming through so this is cloud watch my log",
    "start": "1574250",
    "end": "1579710"
  },
  {
    "text": "group for my lambda function on green grass and as you can see in the logs the",
    "start": "1579710",
    "end": "1587390"
  },
  {
    "text": "function is downloading images at random",
    "start": "1587390",
    "end": "1591909"
  },
  {
    "text": "and then if the result is marine life it simply prints out the probability or the",
    "start": "1593510",
    "end": "1601130"
  },
  {
    "text": "confidence level if the result is litter it prints that message out and it also",
    "start": "1601130",
    "end": "1607580"
  },
  {
    "text": "simulates the location coordinates for that image and publishes the message to",
    "start": "1607580",
    "end": "1613820"
  },
  {
    "text": "a WSI OT topic so let's see what is",
    "start": "1613820",
    "end": "1619010"
  },
  {
    "text": "being received at that topic the topic being submarine - green grass / results",
    "start": "1619010",
    "end": "1626740"
  },
  {
    "text": "so let me go to test in AWS IOT console",
    "start": "1629080",
    "end": "1637210"
  },
  {
    "text": "submarine - results submarine - green",
    "start": "1641500",
    "end": "1649730"
  },
  {
    "text": "grass",
    "start": "1649730",
    "end": "1652000"
  },
  {
    "text": "/ results and I subscribe to this topic in my console and let's wait for a few",
    "start": "1656720",
    "end": "1665270"
  },
  {
    "text": "seconds for the results to start showing up the lambda function itself is going",
    "start": "1665270",
    "end": "1671810"
  },
  {
    "text": "in a loop and every 5 seconds it pulls an image randomly runs an inference and",
    "start": "1671810",
    "end": "1678340"
  },
  {
    "text": "then if the inference is found to be later it publishes the message to the",
    "start": "1678340",
    "end": "1683990"
  },
  {
    "text": "IOT topic and then it goes to sleep for 5 seconds there we go so we have a",
    "start": "1683990",
    "end": "1691370"
  },
  {
    "text": "result here image 04.04.2013 1 dot PNG",
    "start": "1691370",
    "end": "1728390"
  },
  {
    "text": "is being reported as litter definitely it is a beverage can a soda can so it",
    "start": "1728390",
    "end": "1735980"
  },
  {
    "text": "appears that the machine learning model deployed on the AWS green grass is working as expected and the results are",
    "start": "1735980",
    "end": "1743720"
  },
  {
    "text": "coming through to the AWS IOT console now what can we do with this data so I",
    "start": "1743720",
    "end": "1751040"
  },
  {
    "text": "have configured an AWS IOT rule to act on this data and transfer this data",
    "start": "1751040",
    "end": "1760160"
  },
  {
    "text": "using Amazon Kinesis firehose to an Amazon s3 bucket and in this rule",
    "start": "1760160",
    "end": "1770090"
  },
  {
    "text": "configuration I am extracting only the payload value so instead of the entire",
    "start": "1770090",
    "end": "1778270"
  },
  {
    "text": "message that was coming through to the IOT topic I am extracting only the",
    "start": "1778270",
    "end": "1785420"
  },
  {
    "text": "payload value string and that is basically a CSV string something like this this is",
    "start": "1785420",
    "end": "1799590"
  },
  {
    "text": "what gets stored to my selected s3 bucket which is configured in this rule",
    "start": "1799590",
    "end": "1810919"
  },
  {
    "text": "so this is the Amazon Canisius fire hose configuration so the IOT rule forwards",
    "start": "1824240",
    "end": "1833059"
  },
  {
    "text": "the data to Amazon Canisius fire hose and from there it gets sent to the",
    "start": "1833059",
    "end": "1839840"
  },
  {
    "text": "Amazon s3 bucket which is configured in Amazon Kinesis fire hose and I have",
    "start": "1839840",
    "end": "1851990"
  },
  {
    "text": "configured this fire hose to deliver the raw data at this particular folder",
    "start": "1851990",
    "end": "1858409"
  },
  {
    "text": "within my bucket so let me show you what",
    "start": "1858409",
    "end": "1863749"
  },
  {
    "text": "is actually landing inside my bucket you can see that Canisius fire hose has",
    "start": "1863749",
    "end": "1872059"
  },
  {
    "text": "partitioned the incoming data by timestamp and if I drill down we can see",
    "start": "1872059",
    "end": "1878419"
  },
  {
    "text": "that the raw files are generated right here so now I want to visualize all of",
    "start": "1878419",
    "end": "1884809"
  },
  {
    "text": "this data and to do that I have used Amazon Athena Amazon Athena is a server",
    "start": "1884809",
    "end": "1892220"
  },
  {
    "text": "list query service which allows you to write simple SQL SQL statements to query",
    "start": "1892220",
    "end": "1900320"
  },
  {
    "text": "the data that resides in your Amazon s3 bucket so in this query I am pulling out",
    "start": "1900320",
    "end": "1907399"
  },
  {
    "text": "the data that is sitting in my bucket and I'm extracting only the latitude and",
    "start": "1907399",
    "end": "1913129"
  },
  {
    "text": "longitude columns and that is working well and in order to visualize all of",
    "start": "1913129",
    "end": "1920509"
  },
  {
    "text": "this on a geospatial map I have used Amazon quick side bi service and I have",
    "start": "1920509",
    "end": "1928399"
  },
  {
    "text": "created a dashboard which shows a map and on this map I can see the location",
    "start": "1928399",
    "end": "1934580"
  },
  {
    "text": "of all the places where litter was found of course these are simulated locations",
    "start": "1934580",
    "end": "1941919"
  },
  {
    "text": "nearby the island of Thurman and a map",
    "start": "1941919",
    "end": "1947419"
  },
  {
    "text": "of this nature can be used by people who are doing efforts for cleaning up the",
    "start": "1947419",
    "end": "1955999"
  },
  {
    "text": "seabed that's a wrap for this demo and for this",
    "start": "1955999",
    "end": "1961140"
  },
  {
    "text": "session thank you for watching and I hope you found that interesting you can visit the demo arena and watch how",
    "start": "1961140",
    "end": "1968790"
  },
  {
    "text": "machine learning is used in real-life applications you can also get your questions answered by AWS experts and",
    "start": "1968790",
    "end": "1976560"
  },
  {
    "text": "for more information about machine learning on AWS please visit",
    "start": "1976560",
    "end": "1981770"
  },
  {
    "text": "aws.amazon.com slash machine - learning",
    "start": "1981770",
    "end": "1986820"
  },
  {
    "text": "to gain more confidence and hands-on experience with AWS you can access the",
    "start": "1986820",
    "end": "1994140"
  },
  {
    "text": "digital training built by AWS experts you can also attend instructor-led",
    "start": "1994140",
    "end": "1999600"
  },
  {
    "text": "classes that are delivered by qualified AWS instructors and learn how to design",
    "start": "1999600",
    "end": "2006760"
  },
  {
    "text": "deploy and operate highly available cost-effective and secure applications",
    "start": "2006760",
    "end": "2013820"
  },
  {
    "text": "on AWS AWS certifications validate your technical expertise with AWS if you wish",
    "start": "2013820",
    "end": "2022010"
  },
  {
    "text": "to get certified practice exams are available to help you prepare for the certification exams thanks again for",
    "start": "2022010",
    "end": "2030170"
  },
  {
    "text": "attending and we really appreciate your feedback so that we can better",
    "start": "2030170",
    "end": "2035390"
  },
  {
    "text": "understand the topics and services you would like to know more about so please",
    "start": "2035390",
    "end": "2041570"
  },
  {
    "text": "do take the time to fill out our survey and let us know what you think thank you",
    "start": "2041570",
    "end": "2049270"
  }
]