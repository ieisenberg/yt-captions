[
  {
    "text": "- Hi, my name is Ali Benfattoum.",
    "start": "1260",
    "end": "3600"
  },
  {
    "text": "I'm a Principal Evangelist\nin the AWS IoT team,",
    "start": "3600",
    "end": "6899"
  },
  {
    "text": "and I'm back in school today to show you",
    "start": "6900",
    "end": "9000"
  },
  {
    "text": "how you can easily build a\ndigital twin of a classroom",
    "start": "9000",
    "end": "12330"
  },
  {
    "text": "using the Smart Territory Framework",
    "start": "12330",
    "end": "14340"
  },
  {
    "text": "and AWS IoT TwinMaker.",
    "start": "14340",
    "end": "17010"
  },
  {
    "text": "Cities, like the city of Drancy\nfrom where I stand today,",
    "start": "17010",
    "end": "20670"
  },
  {
    "text": "use AWS services to build\ninnovative solutions",
    "start": "20670",
    "end": "23910"
  },
  {
    "text": "to monitor air quality in schools.",
    "start": "23910",
    "end": "26730"
  },
  {
    "text": "They can make sure they provide",
    "start": "26730",
    "end": "28260"
  },
  {
    "text": "a safe learning environment\nfor the children.",
    "start": "28260",
    "end": "31560"
  },
  {
    "text": "They can also improve the\nefficiency of their buildings,",
    "start": "31560",
    "end": "34770"
  },
  {
    "text": "and detect any anomaly,\nlike a window left open",
    "start": "34770",
    "end": "38250"
  },
  {
    "text": "during the night, or the weekend.",
    "start": "38250",
    "end": "39933"
  },
  {
    "text": "So in this video, I'll\ngo through all the steps",
    "start": "41250",
    "end": "43830"
  },
  {
    "text": "to build this kind of solution",
    "start": "43830",
    "end": "45900"
  },
  {
    "text": "using indoor environment\nmonitoring LoRaWAN sensors",
    "start": "45900",
    "end": "49380"
  },
  {
    "text": "from three different vendors.",
    "start": "49380",
    "end": "51570"
  },
  {
    "text": "I'm going to leverage the\nSmart Territory Framework",
    "start": "51570",
    "end": "54720"
  },
  {
    "text": "to ingest and store standardized data.",
    "start": "54720",
    "end": "57840"
  },
  {
    "text": "Then I'll show you how you\ncan use AWS IoT TwinMaker",
    "start": "57840",
    "end": "61230"
  },
  {
    "text": "to build a digital twin of a classroom.",
    "start": "61230",
    "end": "63633"
  },
  {
    "text": "You can find more information\nin the video description",
    "start": "64470",
    "end": "67650"
  },
  {
    "text": "about the Smart Territory Framework,",
    "start": "67650",
    "end": "69780"
  },
  {
    "text": "the AWS services, and the\ndevices used in this solution.",
    "start": "69780",
    "end": "73803"
  },
  {
    "text": "So let's get going, and\nstart with a simplified view",
    "start": "74820",
    "end": "77580"
  },
  {
    "text": "of the solution architecture.",
    "start": "77580",
    "end": "79590"
  },
  {
    "text": "There are six components in this solution.",
    "start": "79590",
    "end": "82560"
  },
  {
    "text": "We'll start first by\ndeploying the core of the STF,",
    "start": "82560",
    "end": "86310"
  },
  {
    "text": "STF being the acronym of the\nSmart Territory Framework.",
    "start": "86310",
    "end": "90299"
  },
  {
    "text": "The STF is open source and\nbuilt on open standards.",
    "start": "90300",
    "end": "94200"
  },
  {
    "text": "It enables decoupling data\nproducers from data consumers,",
    "start": "94200",
    "end": "98460"
  },
  {
    "text": "making it easier to build\nscalable, sustainable,",
    "start": "98460",
    "end": "101909"
  },
  {
    "text": "and interoperable solutions.",
    "start": "101910",
    "end": "104160"
  },
  {
    "text": "Once we have our foundation set,",
    "start": "104160",
    "end": "106740"
  },
  {
    "text": "we will connect our sensors,\nand build data producers.",
    "start": "106740",
    "end": "110820"
  },
  {
    "text": "All the data ingested\nfrom these data producers",
    "start": "110820",
    "end": "113970"
  },
  {
    "text": "will be stored in a standardized format",
    "start": "113970",
    "end": "116460"
  },
  {
    "text": "in the STF IoT data lake.",
    "start": "116460",
    "end": "118740"
  },
  {
    "text": "So we will use Amazon Athena\nto query this data lake,",
    "start": "118740",
    "end": "122430"
  },
  {
    "text": "then AWS IoT TwinMaker\nto build a digital twin",
    "start": "122430",
    "end": "126360"
  },
  {
    "text": "of our classroom, and\nGrafana to visualize the twin",
    "start": "126360",
    "end": "129630"
  },
  {
    "text": "and the environmental data.",
    "start": "129630",
    "end": "132120"
  },
  {
    "text": "And finally, I'll show\nyou how you can build",
    "start": "132120",
    "end": "134879"
  },
  {
    "text": "an alerting system to be notified",
    "start": "134880",
    "end": "137130"
  },
  {
    "text": "when specific conditions\nyou define are met,",
    "start": "137130",
    "end": "140220"
  },
  {
    "text": "like for example, the\ntemperature going below",
    "start": "140220",
    "end": "143130"
  },
  {
    "text": "a certain threshold.",
    "start": "143130",
    "end": "144690"
  },
  {
    "text": "For the first four steps,",
    "start": "144690",
    "end": "146490"
  },
  {
    "text": "we will use AWS Cloud Development Kit,",
    "start": "146490",
    "end": "149250"
  },
  {
    "text": "CDK for its acronym.",
    "start": "149250",
    "end": "150930"
  },
  {
    "text": "AWS CDK is an open source\nsoftware development framework",
    "start": "150930",
    "end": "155549"
  },
  {
    "text": "to define your cloud application resources",
    "start": "155550",
    "end": "158250"
  },
  {
    "text": "using familiar programming languages.",
    "start": "158250",
    "end": "160770"
  },
  {
    "text": "The links to the CDK\nstacks that we will use",
    "start": "160770",
    "end": "163440"
  },
  {
    "text": "are in the video description.",
    "start": "163440",
    "end": "165510"
  },
  {
    "text": "That being said, let's\nstart with the first step.",
    "start": "165510",
    "end": "168603"
  },
  {
    "text": "In this step, we will deploy the STF Core.",
    "start": "170640",
    "end": "174180"
  },
  {
    "text": "The STF Core consists of two modules,",
    "start": "174180",
    "end": "177239"
  },
  {
    "text": "the open source FIWARE Context Broker",
    "start": "177240",
    "end": "179550"
  },
  {
    "text": "and the STF IoT module.",
    "start": "179550",
    "end": "181770"
  },
  {
    "text": "With the STF Core, you can assemble",
    "start": "181770",
    "end": "183960"
  },
  {
    "text": "and store information\nfrom different systems",
    "start": "183960",
    "end": "186840"
  },
  {
    "text": "eventually belonging to\ndifferent organizations,",
    "start": "186840",
    "end": "189780"
  },
  {
    "text": "instead of having them\nperform in separate silos.",
    "start": "189780",
    "end": "193440"
  },
  {
    "text": "It provides a central and unified registry",
    "start": "193440",
    "end": "196530"
  },
  {
    "text": "for all your devices and sensors,",
    "start": "196530",
    "end": "198900"
  },
  {
    "text": "regardless the operating\nmodel, the technology,",
    "start": "198900",
    "end": "201480"
  },
  {
    "text": "and the connectivity used.",
    "start": "201480",
    "end": "203340"
  },
  {
    "text": "It offers digital twin capabilities,",
    "start": "203340",
    "end": "205830"
  },
  {
    "text": "enabling you to store\nand retrieve in real-time",
    "start": "205830",
    "end": "208800"
  },
  {
    "text": "the current state of\nevery registered device.",
    "start": "208800",
    "end": "211830"
  },
  {
    "text": "It also consists of an IoT\ndata lake built on Amazon S3",
    "start": "211830",
    "end": "216330"
  },
  {
    "text": "that you can use to store query",
    "start": "216330",
    "end": "218460"
  },
  {
    "text": "and generate insights from your IoT data.",
    "start": "218460",
    "end": "221283"
  },
  {
    "text": "Once the core is deployed,",
    "start": "222540",
    "end": "224489"
  },
  {
    "text": "it's easy to integrate data producers,",
    "start": "224490",
    "end": "227550"
  },
  {
    "text": "whether they are sensors,\nnew applications,",
    "start": "227550",
    "end": "230070"
  },
  {
    "text": "or legacy systems, and\nsame for data consumers.",
    "start": "230070",
    "end": "234120"
  },
  {
    "text": "The STF Core offers multiple\nways to consume the data",
    "start": "234120",
    "end": "238379"
  },
  {
    "text": "directly from the context broker",
    "start": "238380",
    "end": "240540"
  },
  {
    "text": "from the STF IoT registry, or\nfrom the STF IoT data lake.",
    "start": "240540",
    "end": "245489"
  },
  {
    "text": "You can also subscribe to\nall changes in your data,",
    "start": "245490",
    "end": "249000"
  },
  {
    "text": "making it easy to build\nreal-time applications.",
    "start": "249000",
    "end": "252840"
  },
  {
    "text": "Finally, you can create subscriptions",
    "start": "252840",
    "end": "255569"
  },
  {
    "text": "to notify independent\nsystems and applications.",
    "start": "255570",
    "end": "259140"
  },
  {
    "text": "You can combine all these capabilities",
    "start": "259140",
    "end": "261269"
  },
  {
    "text": "to build comprehensive and\nscalable solutions easily.",
    "start": "261270",
    "end": "264840"
  },
  {
    "text": "You can iterate and\ninnovate at a fast pace.",
    "start": "264840",
    "end": "268350"
  },
  {
    "text": "So let's deploy the STF Core stack.",
    "start": "268350",
    "end": "271053"
  },
  {
    "text": "We'll visit the STF Core\nrepository on GitHub,",
    "start": "272130",
    "end": "275490"
  },
  {
    "text": "and we clone it.",
    "start": "275490",
    "end": "277020"
  },
  {
    "text": "With CDK, you can deploy the STF Core",
    "start": "277020",
    "end": "279539"
  },
  {
    "text": "with only three lines of commands.",
    "start": "279540",
    "end": "281643"
  },
  {
    "text": "npm install to install the libraries,",
    "start": "282660",
    "end": "285420"
  },
  {
    "text": "cdk bootstrap to bootstrap\nyour AWS environment.",
    "start": "285420",
    "end": "288990"
  },
  {
    "text": "You only need to bootstrap\nyour environment once.",
    "start": "288990",
    "end": "292440"
  },
  {
    "text": "And finally, cdk deploy\nto deploy the stack.",
    "start": "292440",
    "end": "295890"
  },
  {
    "text": "And that's it.",
    "start": "295890",
    "end": "297120"
  },
  {
    "text": "Half an hour later, the\nSTF Core is deployed,",
    "start": "297120",
    "end": "300660"
  },
  {
    "text": "and we can see in the outputs of the stack",
    "start": "300660",
    "end": "303420"
  },
  {
    "text": "the two information we need\nto interact with the STF Core.",
    "start": "303420",
    "end": "307590"
  },
  {
    "text": "First, the StfCoreEndpoint,",
    "start": "307590",
    "end": "309182"
  },
  {
    "text": "which is the unified API to interact",
    "start": "310095",
    "end": "312570"
  },
  {
    "text": "with both the context broker\nand the STF IoT module,",
    "start": "312570",
    "end": "316740"
  },
  {
    "text": "and the ID for the STF IoT queue.",
    "start": "316740",
    "end": "319949"
  },
  {
    "text": "This is the entry point\nfor all data producers",
    "start": "319950",
    "end": "322590"
  },
  {
    "text": "to publish data.",
    "start": "322590",
    "end": "324360"
  },
  {
    "text": "This information is also available",
    "start": "324360",
    "end": "326580"
  },
  {
    "text": "in the CloudFormation console.",
    "start": "326580",
    "end": "328919"
  },
  {
    "text": "We can move to the second step,",
    "start": "328920",
    "end": "330420"
  },
  {
    "text": "and connect all data\nproducers to the core.",
    "start": "330420",
    "end": "333840"
  },
  {
    "text": "In this solution,",
    "start": "333840",
    "end": "334919"
  },
  {
    "text": "we use three LoRaWAN\nindoor environment sensors,",
    "start": "334920",
    "end": "338400"
  },
  {
    "text": "the SenseCAP S2103 from Seeed,",
    "start": "338400",
    "end": "341460"
  },
  {
    "text": "which can also be used outdoor,",
    "start": "341460",
    "end": "343740"
  },
  {
    "text": "the AM103 from Milesight,",
    "start": "343740",
    "end": "346259"
  },
  {
    "text": "and the ERS Sound from ELSYS,",
    "start": "346260",
    "end": "348750"
  },
  {
    "text": "and we use a gateway from RAKwireless",
    "start": "348750",
    "end": "350940"
  },
  {
    "text": "connected to AWS IoT Core for LoRaWAN",
    "start": "350940",
    "end": "353580"
  },
  {
    "text": "to ingest data from these sensors.",
    "start": "353580",
    "end": "356729"
  },
  {
    "text": "For each type of device,",
    "start": "356730",
    "end": "358530"
  },
  {
    "text": "we will have a dedicated data producer,",
    "start": "358530",
    "end": "361800"
  },
  {
    "text": "including a Lambda\nfunction that transforms",
    "start": "361800",
    "end": "364680"
  },
  {
    "text": "the binary payload\nreceived from the sensor",
    "start": "364680",
    "end": "367800"
  },
  {
    "text": "to a standardized format using",
    "start": "367800",
    "end": "370080"
  },
  {
    "text": "the NGSI-LD compliant Smart Data Models.",
    "start": "370080",
    "end": "374400"
  },
  {
    "text": "NGSI-LD is a specification\nthat provides an open API",
    "start": "374400",
    "end": "379139"
  },
  {
    "text": "for managing and requesting information",
    "start": "379140",
    "end": "381930"
  },
  {
    "text": "and an underlying information model",
    "start": "381930",
    "end": "384419"
  },
  {
    "text": "based on entities that are\ndigital representations",
    "start": "384420",
    "end": "387930"
  },
  {
    "text": "of real-world objects,",
    "start": "387930",
    "end": "389759"
  },
  {
    "text": "having properties and\nrelationships with other entities.",
    "start": "389760",
    "end": "393660"
  },
  {
    "text": "Every information stored in\nthe STF is an NGSI-LD entity.",
    "start": "393660",
    "end": "398553"
  },
  {
    "text": "The STF leverages the NGSI-LD compliant",
    "start": "399804",
    "end": "403169"
  },
  {
    "text": "Smart Data Models Initiative that provides",
    "start": "403170",
    "end": "406620"
  },
  {
    "text": "open licensed data models\nfor different domains,",
    "start": "406620",
    "end": "410370"
  },
  {
    "text": "such as smart cities, smart building,",
    "start": "410370",
    "end": "413010"
  },
  {
    "text": "and smart manufacturing.",
    "start": "413010",
    "end": "415200"
  },
  {
    "text": "Each device registered\nin the STF IoT registry",
    "start": "415200",
    "end": "418890"
  },
  {
    "text": "is described using the Smart\nData Model named Device.",
    "start": "418890",
    "end": "423780"
  },
  {
    "text": "For the measurements of our sensors,",
    "start": "423780",
    "end": "426030"
  },
  {
    "text": "we will use the data model\nIndoorEnvironmentObserved.",
    "start": "426030",
    "end": "430500"
  },
  {
    "text": "More information about\nthe Smart Data Models",
    "start": "430500",
    "end": "433230"
  },
  {
    "text": "and the NGSI-LD specification\nin the video description.",
    "start": "433230",
    "end": "437820"
  },
  {
    "text": "We provide in a GitHub\nrepository the code of a stack",
    "start": "437820",
    "end": "441510"
  },
  {
    "text": "to deploy an STF data producer using",
    "start": "441510",
    "end": "444633"
  },
  {
    "text": "AWS IoT Core for LoRaWAN.",
    "start": "444633",
    "end": "446669"
  },
  {
    "text": "We include samples for\nmultiple type of sensors,",
    "start": "446670",
    "end": "450180"
  },
  {
    "text": "including the ones we\nuse in this solution.",
    "start": "450180",
    "end": "453120"
  },
  {
    "text": "So let's clone it.",
    "start": "453120",
    "end": "454680"
  },
  {
    "text": "Again, we install the libraries",
    "start": "454680",
    "end": "456720"
  },
  {
    "text": "with the command npm install.",
    "start": "456720",
    "end": "459780"
  },
  {
    "text": "We select the type of sensors\nwe want to deploy a stack for.",
    "start": "459780",
    "end": "464250"
  },
  {
    "text": "No need this time to\nbootstrap our environment",
    "start": "464250",
    "end": "466950"
  },
  {
    "text": "as we did it before.",
    "start": "466950",
    "end": "468510"
  },
  {
    "text": "So we can directly deploy the stacks.",
    "start": "468510",
    "end": "471690"
  },
  {
    "text": "Three stacks will be deployed,",
    "start": "471690",
    "end": "473520"
  },
  {
    "text": "one for each type of sensor.",
    "start": "473520",
    "end": "475563"
  },
  {
    "text": "Each stack includes a LoRaWAN destination",
    "start": "476400",
    "end": "479310"
  },
  {
    "text": "to route the LoRaWAN\nbinary payload received",
    "start": "479310",
    "end": "482580"
  },
  {
    "text": "to a dedicated Lambda\nfunction via an IoT route.",
    "start": "482580",
    "end": "486629"
  },
  {
    "text": "We can check one of the Lambda functions.",
    "start": "486630",
    "end": "489063"
  },
  {
    "text": "We can see in the Lambda function",
    "start": "490500",
    "end": "492420"
  },
  {
    "text": "that the payload is first\ntransformed into an NGSI-LD entity",
    "start": "492420",
    "end": "497420"
  },
  {
    "text": "using the IndoorEnvironmentObserved\ndata model,",
    "start": "497670",
    "end": "501180"
  },
  {
    "text": "and then published into the STF IoT queue.",
    "start": "501180",
    "end": "504930"
  },
  {
    "text": "We can also check that\na LoRaWAN destination",
    "start": "504930",
    "end": "507330"
  },
  {
    "text": "had been created for each type of sensor.",
    "start": "507330",
    "end": "510300"
  },
  {
    "text": "All good.",
    "start": "510300",
    "end": "511379"
  },
  {
    "text": "Now, we can onboard all sensors,",
    "start": "511380",
    "end": "513719"
  },
  {
    "text": "selecting for each of them\nthe right LoRaWAN destination.",
    "start": "513720",
    "end": "518219"
  },
  {
    "text": "But first, we need to create a device,",
    "start": "518220",
    "end": "521129"
  },
  {
    "text": "and a service profile for all devices.",
    "start": "521130",
    "end": "523830"
  },
  {
    "text": "Done, we can now register\nthe LoRaWAN devices,",
    "start": "523830",
    "end": "527310"
  },
  {
    "text": "providing the different keys needed.",
    "start": "527310",
    "end": "529980"
  },
  {
    "text": "We do it for each sensor.",
    "start": "529980",
    "end": "532410"
  },
  {
    "text": "We are using the console for this video,",
    "start": "532410",
    "end": "534389"
  },
  {
    "text": "but obviously, you can use the\nservice API to do it at scale",
    "start": "534390",
    "end": "538050"
  },
  {
    "text": "for a larger number of devices.",
    "start": "538050",
    "end": "540870"
  },
  {
    "text": "We quickly register a LoRaWAN gateway",
    "start": "540870",
    "end": "543270"
  },
  {
    "text": "to AWS IoT Core for LoRaWAN.",
    "start": "543270",
    "end": "545490"
  },
  {
    "text": "You can find in the video description",
    "start": "545490",
    "end": "547800"
  },
  {
    "text": "a link to a video that explains\nhow to register devices",
    "start": "547800",
    "end": "551430"
  },
  {
    "text": "and gateways to AWS IoT Core for LoRaWAN.",
    "start": "551430",
    "end": "554850"
  },
  {
    "text": "We check that the gateway is connected.",
    "start": "554850",
    "end": "557370"
  },
  {
    "text": "All good, we can now receive\ndata from the sensors.",
    "start": "557370",
    "end": "561779"
  },
  {
    "text": "The last step to link the\ndata producer to the STF Core",
    "start": "561780",
    "end": "565560"
  },
  {
    "text": "is to register the devices\nin the STF IoT registry",
    "start": "565560",
    "end": "569670"
  },
  {
    "text": "We use the STF unified API\nto register the devices",
    "start": "569670",
    "end": "573930"
  },
  {
    "text": "providing all the attributes",
    "start": "573930",
    "end": "575700"
  },
  {
    "text": "as defined in the data model Device.",
    "start": "575700",
    "end": "579270"
  },
  {
    "text": "We can then check in the IoT Core registry",
    "start": "579270",
    "end": "581850"
  },
  {
    "text": "that the thing is created,",
    "start": "581850",
    "end": "583769"
  },
  {
    "text": "and that it has an entity\nof type Device attached.",
    "start": "583770",
    "end": "588300"
  },
  {
    "text": "In the meantime, we received\ndata from the sensors.",
    "start": "588300",
    "end": "591810"
  },
  {
    "text": "So we can see that there\nis another entity of type",
    "start": "591810",
    "end": "594360"
  },
  {
    "text": "IndoorEnvironmentObserved\nthat is attached to the thing.",
    "start": "594360",
    "end": "598709"
  },
  {
    "text": "It contains the environmental data.",
    "start": "598710",
    "end": "601620"
  },
  {
    "text": "Using the STF API, we can get the list",
    "start": "601620",
    "end": "604380"
  },
  {
    "text": "of all the things registered",
    "start": "604380",
    "end": "606090"
  },
  {
    "text": "with their associated\nentities of type Device.",
    "start": "606090",
    "end": "609450"
  },
  {
    "text": "We can also get all the\nentities associated to a thing.",
    "start": "609450",
    "end": "613050"
  },
  {
    "text": "In that case, we have\ntwo entities associated,",
    "start": "613050",
    "end": "616080"
  },
  {
    "text": "one of type Device\ndescribing the device itself,",
    "start": "616080",
    "end": "619410"
  },
  {
    "text": "and one of type IndoorEnvironmentObserved",
    "start": "619410",
    "end": "622079"
  },
  {
    "text": "with the measurement.",
    "start": "622080",
    "end": "623433"
  },
  {
    "text": "The entities published\ninto the STF IoT are sent",
    "start": "624330",
    "end": "628020"
  },
  {
    "text": "to the context broker,",
    "start": "628020",
    "end": "629460"
  },
  {
    "text": "and also stored in the STF IoT data lake.",
    "start": "629460",
    "end": "632850"
  },
  {
    "text": "Entities stored in the STF\nIoT data lake are partitioned",
    "start": "632850",
    "end": "636750"
  },
  {
    "text": "by type and time.",
    "start": "636750",
    "end": "638850"
  },
  {
    "text": "This makes it easier to\nrun high-performance,",
    "start": "638850",
    "end": "641819"
  },
  {
    "text": "cost-efficient analytics on data",
    "start": "641820",
    "end": "644340"
  },
  {
    "text": "using various services,\nsuch as Amazon Athena,",
    "start": "644340",
    "end": "647670"
  },
  {
    "text": "which is what we are going\nto use in the next step.",
    "start": "647670",
    "end": "650613"
  },
  {
    "text": "Indeed, in this step, we are\ngoing to use Amazon Athena.",
    "start": "651780",
    "end": "655530"
  },
  {
    "text": "Athena is an interactive query service",
    "start": "655530",
    "end": "658260"
  },
  {
    "text": "that makes it easy to\nanalyze data directly in S3",
    "start": "658260",
    "end": "662100"
  },
  {
    "text": "using standard SQL.",
    "start": "662100",
    "end": "664097"
  },
  {
    "text": "Athena is serverless, so\nthere is no infrastructure",
    "start": "664098",
    "end": "667110"
  },
  {
    "text": "to set up, or manage,",
    "start": "667110",
    "end": "668670"
  },
  {
    "text": "and you pay only for the queries you run.",
    "start": "668670",
    "end": "671820"
  },
  {
    "text": "We will create multiple\nresources in Athena.",
    "start": "671820",
    "end": "674700"
  },
  {
    "text": "First, a workgroup named STF,",
    "start": "674700",
    "end": "677370"
  },
  {
    "text": "dedicated to all our\nSTF-related workloads,",
    "start": "677370",
    "end": "681300"
  },
  {
    "text": "then a database.",
    "start": "681300",
    "end": "682950"
  },
  {
    "text": "A database in Athena is a logical grouping",
    "start": "682950",
    "end": "685560"
  },
  {
    "text": "for tables you create in it,",
    "start": "685560",
    "end": "687779"
  },
  {
    "text": "and finally, a table.",
    "start": "687780",
    "end": "689580"
  },
  {
    "text": "A table in Athena contains\nthe metadata definitions",
    "start": "689580",
    "end": "693210"
  },
  {
    "text": "of a schema for the\nunderlying source data.",
    "start": "693210",
    "end": "696240"
  },
  {
    "text": "In our case, the source data\nwill be the STF IoT data lake.",
    "start": "696240",
    "end": "701160"
  },
  {
    "text": "The metadata in the table tells Athena",
    "start": "701160",
    "end": "704399"
  },
  {
    "text": "where the data is located in S3,",
    "start": "704400",
    "end": "707100"
  },
  {
    "text": "and specifies the structure of the data.",
    "start": "707100",
    "end": "710069"
  },
  {
    "text": "So for this solution, we'll create a table",
    "start": "710070",
    "end": "712980"
  },
  {
    "text": "for the data model\nIndoorEnvironmentObserved.",
    "start": "712980",
    "end": "716699"
  },
  {
    "text": "We provide a GitHub\nrepository for this step",
    "start": "716700",
    "end": "719610"
  },
  {
    "text": "in which you can find a CDK application",
    "start": "719610",
    "end": "722100"
  },
  {
    "text": "that will provision these resources.",
    "start": "722100",
    "end": "724680"
  },
  {
    "text": "We use the same commands\nto deploy the stacks.",
    "start": "724680",
    "end": "728220"
  },
  {
    "text": "You can see that we provide the schema",
    "start": "728220",
    "end": "730259"
  },
  {
    "text": "of the data model\nIndoorEnvironmentObserved",
    "start": "730260",
    "end": "733260"
  },
  {
    "text": "for the creation of the Athena table.",
    "start": "733260",
    "end": "735843"
  },
  {
    "text": "After a few minutes, we can\ncheck in the Athena console",
    "start": "737130",
    "end": "740550"
  },
  {
    "text": "that the workgroup, the database,\nand the table are created.",
    "start": "740550",
    "end": "744720"
  },
  {
    "text": "We can start querying the data.",
    "start": "744720",
    "end": "746522"
  },
  {
    "text": "We start with a first query\njust to preview the table,",
    "start": "747360",
    "end": "751350"
  },
  {
    "text": "and a second query this time\nto query the measurements",
    "start": "751350",
    "end": "754319"
  },
  {
    "text": "from the sensors.",
    "start": "754320",
    "end": "755463"
  },
  {
    "text": "You can now easily plug any\nAPI, or visualization tool,",
    "start": "756600",
    "end": "760290"
  },
  {
    "text": "like Grafana, or Amazon\nQuickSight, to visualize the data",
    "start": "760290",
    "end": "763980"
  },
  {
    "text": "and extract insights.",
    "start": "763980",
    "end": "765930"
  },
  {
    "text": "Here, an example, using Amazon QuickSight",
    "start": "765930",
    "end": "768630"
  },
  {
    "text": "to visualize on a map the\nlocation of the sensors,",
    "start": "768630",
    "end": "772020"
  },
  {
    "text": "the measurements of CO2, temperature,",
    "start": "772020",
    "end": "774360"
  },
  {
    "text": "and humidity over time.",
    "start": "774360",
    "end": "776459"
  },
  {
    "text": "This dashboard directly queries\nthe Athena table we created",
    "start": "776460",
    "end": "780660"
  },
  {
    "text": "to get the data.",
    "start": "780660",
    "end": "781592"
  },
  {
    "text": "Now, let's go further,",
    "start": "782670",
    "end": "784380"
  },
  {
    "text": "and create a digital\ntwin of the classroom.",
    "start": "784380",
    "end": "787680"
  },
  {
    "text": "We'll use AWS IoT TwinMaker to build",
    "start": "787680",
    "end": "790380"
  },
  {
    "text": "the digital twin of the classroom.",
    "start": "790380",
    "end": "792630"
  },
  {
    "text": "With TwinMaker, you can use existing data",
    "start": "792630",
    "end": "795450"
  },
  {
    "text": "from multiple sources, create\nvirtual representations",
    "start": "795450",
    "end": "798840"
  },
  {
    "text": "of any physical environment,",
    "start": "798840",
    "end": "800970"
  },
  {
    "text": "and combine existing 3D\nmodels with real-world data.",
    "start": "800970",
    "end": "805920"
  },
  {
    "text": "In this step, we also\nuse a GitHub repository",
    "start": "805920",
    "end": "809459"
  },
  {
    "text": "available in aws-samples",
    "start": "809460",
    "end": "811650"
  },
  {
    "text": "that is named aws-stf-dc-twinmaker.",
    "start": "811650",
    "end": "816153"
  },
  {
    "text": "This repository provides an example",
    "start": "817920",
    "end": "820589"
  },
  {
    "text": "of how to build a digital\ntwin using TwinMaker",
    "start": "820590",
    "end": "824070"
  },
  {
    "text": "in combination with\nAthena to query the data",
    "start": "824070",
    "end": "826920"
  },
  {
    "text": "from an S3 bucket.",
    "start": "826920",
    "end": "828570"
  },
  {
    "text": "It contains a CDK application",
    "start": "828570",
    "end": "831180"
  },
  {
    "text": "that will provision multiple\nresources in TwinMaker,",
    "start": "831180",
    "end": "834630"
  },
  {
    "text": "including a workspace, which\nis a top-level container",
    "start": "834630",
    "end": "838440"
  },
  {
    "text": "for all digital twin application,",
    "start": "838440",
    "end": "840960"
  },
  {
    "text": "a component, which will\nconnect all data source",
    "start": "840960",
    "end": "843600"
  },
  {
    "text": "to the twin application,",
    "start": "843600",
    "end": "845699"
  },
  {
    "text": "and one, or multiple entities,",
    "start": "845700",
    "end": "847890"
  },
  {
    "text": "which are digital representations",
    "start": "847890",
    "end": "849900"
  },
  {
    "text": "of the elements in all twin.",
    "start": "849900",
    "end": "852450"
  },
  {
    "text": "The STF also uses the concept of entity",
    "start": "852450",
    "end": "855840"
  },
  {
    "text": "to store information, so we\ncan easily link STF entities",
    "start": "855840",
    "end": "860250"
  },
  {
    "text": "and TwinMaker entities together.",
    "start": "860250",
    "end": "862590"
  },
  {
    "text": "We specify the names of the things",
    "start": "862590",
    "end": "864840"
  },
  {
    "text": "we want to create\nentities for in TwinMaker,",
    "start": "864840",
    "end": "867750"
  },
  {
    "text": "and then we deploy.",
    "start": "867750",
    "end": "868863"
  },
  {
    "text": "After a few minutes, we see\nin the TwinMaker console",
    "start": "869880",
    "end": "873180"
  },
  {
    "text": "that we have a workspace, a component,",
    "start": "873180",
    "end": "876420"
  },
  {
    "text": "and three entities created.",
    "start": "876420",
    "end": "878700"
  },
  {
    "text": "The component we created is\nattached to our entities,",
    "start": "878700",
    "end": "882270"
  },
  {
    "text": "so we can start fetching the data",
    "start": "882270",
    "end": "883980"
  },
  {
    "text": "from the STF IoT data\nlake for these entities.",
    "start": "883980",
    "end": "887699"
  },
  {
    "text": "We test the component to see\nif we get the data as expected.",
    "start": "887700",
    "end": "892470"
  },
  {
    "text": "All good.",
    "start": "892470",
    "end": "893303"
  },
  {
    "text": "We see all the measurements\nfor the time range",
    "start": "893303",
    "end": "895709"
  },
  {
    "text": "and the entity selected.",
    "start": "895710",
    "end": "897900"
  },
  {
    "text": "We can now create a scene.",
    "start": "897900",
    "end": "900120"
  },
  {
    "text": "A scene is a 3D visualization of the twin.",
    "start": "900120",
    "end": "903089"
  },
  {
    "text": "When we created the workspace,",
    "start": "903090",
    "end": "905160"
  },
  {
    "text": "we created in the meantime an S3 bucket",
    "start": "905160",
    "end": "907829"
  },
  {
    "text": "in which we can upload all the resources",
    "start": "907830",
    "end": "910440"
  },
  {
    "text": "to create these visualization.",
    "start": "910440",
    "end": "912603"
  },
  {
    "text": "We use a simple model of\na classroom in this video,",
    "start": "913890",
    "end": "917070"
  },
  {
    "text": "but you could, for example,\nuse tools and solutions,",
    "start": "917070",
    "end": "920430"
  },
  {
    "text": "like the ones from Matterport,\nto transform your space",
    "start": "920430",
    "end": "924060"
  },
  {
    "text": "into a realistic 3D model.",
    "start": "924060",
    "end": "927240"
  },
  {
    "text": "Once the model is uploaded,\nwe can set up the scene.",
    "start": "927240",
    "end": "931230"
  },
  {
    "text": "We create tags.",
    "start": "931230",
    "end": "932910"
  },
  {
    "text": "Tags are annotations added\nto specific coordinates",
    "start": "932910",
    "end": "936959"
  },
  {
    "text": "used to connect a scene path to entities",
    "start": "936960",
    "end": "939840"
  },
  {
    "text": "and their properties.",
    "start": "939840",
    "end": "941070"
  },
  {
    "text": "So we create a tag for each property",
    "start": "941070",
    "end": "943980"
  },
  {
    "text": "we want to attach to the scene.",
    "start": "943980",
    "end": "946170"
  },
  {
    "text": "We select then the related\nproperty in the entity.",
    "start": "946170",
    "end": "949173"
  },
  {
    "text": "Also, we create rules to\nprovide a visual indicator",
    "start": "950730",
    "end": "954630"
  },
  {
    "text": "based on conditions we specify.",
    "start": "954630",
    "end": "957720"
  },
  {
    "text": "For example, we can change the\nicon of the tag when the CO2,",
    "start": "957720",
    "end": "961860"
  },
  {
    "text": "or the temperature is\nabove a certain threshold.",
    "start": "961860",
    "end": "965279"
  },
  {
    "text": "We have everything set up now",
    "start": "965280",
    "end": "966990"
  },
  {
    "text": "to create a dashboard\nto visualize our twin.",
    "start": "966990",
    "end": "969933"
  },
  {
    "text": "For this step, I will\njust show you an example",
    "start": "970860",
    "end": "973529"
  },
  {
    "text": "of a Grafana dashboard I built\nwhen preparing this video,",
    "start": "973530",
    "end": "977160"
  },
  {
    "text": "but you will find in\nvideo description a link",
    "start": "977160",
    "end": "979649"
  },
  {
    "text": "to the documentation\ndescribing how to set up",
    "start": "979650",
    "end": "982723"
  },
  {
    "text": "a Grafana dashboard yourself.",
    "start": "982723",
    "end": "984810"
  },
  {
    "text": "AWS IoT TwinMaker supports\nGrafana integration",
    "start": "984810",
    "end": "988920"
  },
  {
    "text": "through an application plugin,",
    "start": "988920",
    "end": "990839"
  },
  {
    "text": "so you can visualize the scene,",
    "start": "990840",
    "end": "992790"
  },
  {
    "text": "and query the data\nthrough the TwinMaker API.",
    "start": "992790",
    "end": "995940"
  },
  {
    "text": "We only used one type of\ndata for this solution,",
    "start": "995940",
    "end": "999510"
  },
  {
    "text": "but you could build twins aggregating data",
    "start": "999510",
    "end": "1002000"
  },
  {
    "text": "of multiple types and\nfrom multiple sources.",
    "start": "1002000",
    "end": "1004940"
  },
  {
    "text": "You could, for example,\nintegrate the weather,",
    "start": "1004940",
    "end": "1007400"
  },
  {
    "text": "the air quality outside the building,",
    "start": "1007400",
    "end": "1009620"
  },
  {
    "text": "and its energy consumption\nto have a holistic view,",
    "start": "1009620",
    "end": "1013490"
  },
  {
    "text": "and then control the HVAC\nsystem to improve the comfort",
    "start": "1013490",
    "end": "1017300"
  },
  {
    "text": "and the efficiency of the building.",
    "start": "1017300",
    "end": "1019343"
  },
  {
    "text": "So in the last step, I'll\nshow you how you can use",
    "start": "1020240",
    "end": "1023390"
  },
  {
    "text": "the STF Core to easily\nnotify an independent system",
    "start": "1023390",
    "end": "1027560"
  },
  {
    "text": "based on specific condition you defined.",
    "start": "1027560",
    "end": "1030500"
  },
  {
    "text": "We will create a subscription\nin the context broker",
    "start": "1030500",
    "end": "1033650"
  },
  {
    "text": "to receive all measurements",
    "start": "1033650",
    "end": "1035480"
  },
  {
    "text": "with a temperature above 22 degrees.",
    "start": "1035480",
    "end": "1038600"
  },
  {
    "text": "Before we create this subscription,",
    "start": "1038600",
    "end": "1040760"
  },
  {
    "text": "we'll first create an independent system.",
    "start": "1040760",
    "end": "1043579"
  },
  {
    "text": "We keep it simple and just\ncreate a Lambda function",
    "start": "1043580",
    "end": "1046850"
  },
  {
    "text": "that will log the data received.",
    "start": "1046850",
    "end": "1049100"
  },
  {
    "text": "We then create an Amazon\nAPI Gateway endpoint",
    "start": "1049100",
    "end": "1052280"
  },
  {
    "text": "to trigger that function.",
    "start": "1052280",
    "end": "1053783"
  },
  {
    "text": "When creating the subscription,\nwe'll provide this endpoint.",
    "start": "1054770",
    "end": "1059450"
  },
  {
    "text": "We have everything we need now\nto create the subscription.",
    "start": "1059450",
    "end": "1062899"
  },
  {
    "text": "So we use the STF Core endpoint\nto create a subscription",
    "start": "1062900",
    "end": "1066740"
  },
  {
    "text": "in the context broker.",
    "start": "1066740",
    "end": "1068390"
  },
  {
    "text": "We specify the type of entities\nwe want to subscribe to,",
    "start": "1068390",
    "end": "1073010"
  },
  {
    "text": "the specific condition to\ntrigger the notification,",
    "start": "1073010",
    "end": "1076370"
  },
  {
    "text": "in our case, it's when the temperature is",
    "start": "1076370",
    "end": "1078860"
  },
  {
    "text": "above 22 degrees Celsius,",
    "start": "1078860",
    "end": "1081679"
  },
  {
    "text": "and then we provide the\nendpoint that we created,",
    "start": "1081680",
    "end": "1085160"
  },
  {
    "text": "and that's it.",
    "start": "1085160",
    "end": "1086180"
  },
  {
    "text": "We create the subscription,",
    "start": "1086180",
    "end": "1087860"
  },
  {
    "text": "and we can check that the\nsubscription is created",
    "start": "1087860",
    "end": "1090380"
  },
  {
    "text": "in the context broker.",
    "start": "1090380",
    "end": "1092450"
  },
  {
    "text": "Now, at the moment, the context\nbroker receives an entity",
    "start": "1092450",
    "end": "1096500"
  },
  {
    "text": "of type IndoorEnvironmentObserved",
    "start": "1096500",
    "end": "1099290"
  },
  {
    "text": "with the value of the\nproperty temperature above 22,",
    "start": "1099290",
    "end": "1103070"
  },
  {
    "text": "our system will receive a\nnotification with this entity.",
    "start": "1103070",
    "end": "1107450"
  },
  {
    "text": "And voila, the system\nwe created have received",
    "start": "1107450",
    "end": "1110779"
  },
  {
    "text": "a notification with an entity",
    "start": "1110780",
    "end": "1112880"
  },
  {
    "text": "of type IndoorEnvironmentObserved",
    "start": "1112880",
    "end": "1115730"
  },
  {
    "text": "with a temperature measured of 27.62.",
    "start": "1115730",
    "end": "1119690"
  },
  {
    "text": "We could then trigger specific actions,",
    "start": "1119690",
    "end": "1122240"
  },
  {
    "text": "interact with an HVAC\nsystem, as mentioned before.",
    "start": "1122240",
    "end": "1126620"
  },
  {
    "text": "Using subscriptions is also\na way to decouple systems.",
    "start": "1126620",
    "end": "1130820"
  },
  {
    "text": "You can create subscriptions to share",
    "start": "1130820",
    "end": "1133100"
  },
  {
    "text": "with independent systems\nthe data they need",
    "start": "1133100",
    "end": "1136039"
  },
  {
    "text": "without them having to fetch the data.",
    "start": "1136040",
    "end": "1138443"
  },
  {
    "text": "Well, that's it for this video.",
    "start": "1139310",
    "end": "1141590"
  },
  {
    "text": "We've seen how you can use\nthe Smart Territory Framework",
    "start": "1141590",
    "end": "1144409"
  },
  {
    "text": "and AWS IoT TwinMaker\nto build a digital twin",
    "start": "1144410",
    "end": "1148100"
  },
  {
    "text": "with the example of a classroom.",
    "start": "1148100",
    "end": "1150200"
  },
  {
    "text": "We covered how to deploy the STF Core",
    "start": "1150200",
    "end": "1152600"
  },
  {
    "text": "and multiple data producers\nusing AWS IoT Core for LoRaWAN,",
    "start": "1152600",
    "end": "1156710"
  },
  {
    "text": "how to use Amazon Athena to\nquery the data in the data lake,",
    "start": "1156710",
    "end": "1160850"
  },
  {
    "text": "then how to use AWS IoT TwinMaker",
    "start": "1160850",
    "end": "1163437"
  },
  {
    "text": "and Grafana to build\nand visualize your twin.",
    "start": "1163437",
    "end": "1167150"
  },
  {
    "text": "And finally, we've seen how\nyou can use subscriptions",
    "start": "1167150",
    "end": "1170060"
  },
  {
    "text": "to connect and interact",
    "start": "1170060",
    "end": "1171530"
  },
  {
    "text": "with independent systems and applications.",
    "start": "1171530",
    "end": "1174680"
  },
  {
    "text": "You can find in the video\ndescription more information",
    "start": "1174680",
    "end": "1177650"
  },
  {
    "text": "about the STF and the\nAWS services we used,",
    "start": "1177650",
    "end": "1181160"
  },
  {
    "text": "and it only remains for me\nto thank you for watching.",
    "start": "1181160",
    "end": "1184070"
  },
  {
    "text": "I hope you found it useful,",
    "start": "1184070",
    "end": "1185750"
  },
  {
    "text": "and that it will help you build",
    "start": "1185750",
    "end": "1187370"
  },
  {
    "text": "your own digital twin applications.",
    "start": "1187370",
    "end": "1189593"
  }
]