[
  {
    "text": "In this video, you’ll see how to integrate your data sources into\nAWS Systems Manager OpsCenter using Amazon EventBridge.",
    "start": "453",
    "end": "7301"
  },
  {
    "text": "With this solution, you can set up simple EventBridge rules\nthat monitor events as operational items in OpsCenter,",
    "start": "7879",
    "end": "13750"
  },
  {
    "text": "where on-call operators have tools to investigate\nand remediate common issues with AWS resources.",
    "start": "13750",
    "end": "19290"
  },
  {
    "text": "To get started, let’s navigate to Systems\nManager and take a look at OpsCenter.",
    "start": "20406",
    "end": "24712"
  },
  {
    "text": "OpsCenter aggregates events and alerts\nacross multiple AWS services.",
    "start": "27460",
    "end": "31523"
  },
  {
    "text": "These issues appear in OpsCenter as a standardized\nform of operational work item known as an “OpsItem.”",
    "start": "32333",
    "end": "37372"
  },
  {
    "text": "Here, you can see all your open OpsItems.",
    "start": "40272",
    "end": "42385"
  },
  {
    "text": "Let’s review the one titled\n“Issue detected for EC2 infrastructure.”",
    "start": "43471",
    "end": "47147"
  },
  {
    "text": "In the details, we can see which CloudWatch Event Rule triggered\nthe issue as well as the issue’s level of severity.",
    "start": "49204",
    "end": "54642"
  },
  {
    "text": "Here, we can see the specific Amazon Elastic Compute Cloud (Amazon EC2)\ninstance that’s having the issue.",
    "start": "57642",
    "end": "63343"
  },
  {
    "text": "OpsCenter allows us to run automations on\nOpsItems to resolve problems like this one.",
    "start": "66236",
    "end": "70606"
  },
  {
    "text": "We can choose what we need from the list of\nAWS provided runbooks.",
    "start": "73393",
    "end": "76797"
  },
  {
    "text": "For instance, we can restart the EC2 instance.",
    "start": "77133",
    "end": "79687"
  },
  {
    "text": "As you can see, the instance successfully restarted,\nso let’s move on.",
    "start": "82000",
    "end": "85607"
  },
  {
    "text": "Next, let’s navigate to AWS Config to see an example\ncompliance rule we’d like to onboard to OpsCenter.",
    "start": "86822",
    "end": "92782"
  },
  {
    "text": "AWS Config continuously monitors our AWS resources\nfor compliance with our desired configurations.",
    "start": "93956",
    "end": "99963"
  },
  {
    "text": "In this case, we have a rule that specifies\na desired instance type.",
    "start": "102750",
    "end": "106079"
  },
  {
    "text": "The parameters show that EC2 instances must\neither be t2.micro or t2.small.",
    "start": "108940",
    "end": "114288"
  },
  {
    "text": "Now let’s use our Config rule as an example\nto show how we can automate the creation of OpsItems",
    "start": "115532",
    "end": "120121"
  },
  {
    "text": "for any service that publishes events\nto Amazon EventBridge.",
    "start": "120122",
    "end": "123193"
  },
  {
    "text": "We’ll create a rule that generates an OpsItem whenever\nAWS Config detects a non-compliant EC2 instance size.",
    "start": "126141",
    "end": "132387"
  },
  {
    "text": "Here, we’ll specify the event pattern.",
    "start": "135889",
    "end": "137623"
  },
  {
    "text": "Now that we have defined our event, we can see that the event pattern\nhas been updated to reflect that.",
    "start": "161347",
    "end": "165706"
  },
  {
    "text": "Let’s continue creating the rule.",
    "start": "166769",
    "end": "168252"
  },
  {
    "text": "Since we are generating an OpsItem every time this rule is triggered,\nour target will be SSM OpsItem.",
    "start": "171059",
    "end": "176323"
  },
  {
    "text": "Let’s configure our input.",
    "start": "177902",
    "end": "179118"
  },
  {
    "text": "We’ll select Input transformer so that we can define what information\nwe want the OpsItems to contain.",
    "start": "181908",
    "end": "186821"
  },
  {
    "text": "We will also be able to associate relevant automations.",
    "start": "187409",
    "end": "190058"
  },
  {
    "text": "You can familiarize yourself with the input path schema\nby referring to the Amazon CloudWatch Events documentation.",
    "start": "191180",
    "end": "196709"
  },
  {
    "text": "Let’s return to our EventBridge rule and\nspecify the input transformer.",
    "start": "198979",
    "end": "202629"
  },
  {
    "text": "Likewise, you can familiarize yourself with the input template schema\nby referring to the OpsItem API reference documentation.",
    "start": "205804",
    "end": "212096"
  },
  {
    "text": "Let’s go back to the rule and specify the input template.",
    "start": "213265",
    "end": "216021"
  },
  {
    "text": "This is the template we defined.",
    "start": "220447",
    "end": "221997"
  },
  {
    "text": "In it, we've specified key metadata for the OpsItem, such as a title,\na description, and priority and severity ratings of \"2.\"",
    "start": "222598",
    "end": "229526"
  },
  {
    "text": "Notice that it includes automations for remediating noncompliance.",
    "start": "230293",
    "end": "233843"
  },
  {
    "text": "Specifying this deduplication string is important\nto reduce the risk of creating duplicate OpsItems.",
    "start": "234974",
    "end": "240244"
  },
  {
    "text": "Let’s create the rule.",
    "start": "243143",
    "end": "244262"
  },
  {
    "text": "Now let’s take a quick look at the rule.",
    "start": "246966",
    "end": "248675"
  },
  {
    "text": "We can see from our event pattern that our source is AWS Config,\nthat we are specifically looking for compliance changes,",
    "start": "251783",
    "end": "257933"
  },
  {
    "text": "and that the predefined rule is desired-instance-type.",
    "start": "257933",
    "end": "260585"
  },
  {
    "text": "Let’s navigate to EC2 and look at the instance\ntypes of our running instances.",
    "start": "261705",
    "end": "265715"
  },
  {
    "text": "As you can see, one of our instances is t2.medium,\nwhich falls outside of our compliance definition.",
    "start": "270413",
    "end": "275876"
  },
  {
    "text": "Let’s go to AWS Config to see if it detected\nthis non-compliant instance.",
    "start": "277094",
    "end": "281087"
  },
  {
    "text": "As expected, a non-compliant resource was detected.",
    "start": "284557",
    "end": "287370"
  },
  {
    "text": "Let’s take a closer look.",
    "start": "287595",
    "end": "288725"
  },
  {
    "text": "The details show this particular instance is a t2.medium,\nwhich does not conform to our compliance rule.",
    "start": "291561",
    "end": "297136"
  },
  {
    "text": "Let’s navigate back to Systems Manager\nand take a look at OpsCenter.",
    "start": "298329",
    "end": "301763"
  },
  {
    "text": "Let’s take a look at the newest OpsItem.",
    "start": "309667",
    "end": "311475"
  },
  {
    "text": "The instance was added as a related resource.",
    "start": "312759",
    "end": "315164"
  },
  {
    "text": "As you can see, this OpsItem was generated by our EventBridge rule,\nwhich was triggered by AWS Config.",
    "start": "317863",
    "end": "323527"
  },
  {
    "text": "Finally, you can click 'Related resource details'\nto see all the information for the instance.",
    "start": "324630",
    "end": "329044"
  },
  {
    "text": "The ops team can now investigate this item right from OpsCenter\nand potentially run an automation to remediate the issue.",
    "start": "329652",
    "end": "335420"
  },
  {
    "text": "You’ve just seen how to integrate your data sources into\nAWS Systems Manager OpsCenter using Amazon EventBridge.",
    "start": "337062",
    "end": "343116"
  },
  {
    "text": "Thanks for watching.",
    "start": "344207",
    "end": "345095"
  },
  {
    "text": "Now it’s your turn to try.",
    "start": "345137",
    "end": "346418"
  }
]