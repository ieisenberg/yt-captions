[
  {
    "text": "this session is around developing modern applications in the cloud and what we'll",
    "start": "60",
    "end": "5069"
  },
  {
    "text": "focus on in this session is really some key patterns and characteristics that we",
    "start": "5069",
    "end": "10110"
  },
  {
    "text": "see for modern applications and the reasons that people are looking to build more modern applications in the cloud",
    "start": "10110",
    "end": "17330"
  },
  {
    "text": "and moving away from traditional ways of IT what the reasons for that and we're",
    "start": "17330",
    "end": "22859"
  },
  {
    "text": "diving some patterns around how you can achieve that using AWS services just in",
    "start": "22859",
    "end": "29279"
  },
  {
    "text": "terms of introduction I'm Steve Bryan I'm on our technical and developer evangelism team which basically means",
    "start": "29279",
    "end": "36270"
  },
  {
    "text": "that I get to play with cool technology and talk to you about it but also means there we're kind of the voice of the",
    "start": "36270",
    "end": "42180"
  },
  {
    "text": "developer and the technical professional audience back into AWS so my contact details on the slide both Twitter and",
    "start": "42180",
    "end": "48930"
  },
  {
    "text": "email any detail anything you want to reach out to me directly providing your feedback around how we were engaging",
    "start": "48930",
    "end": "54270"
  },
  {
    "text": "with the developer and tech community around the world please send me a note I'm always open to receive messages from",
    "start": "54270",
    "end": "60000"
  },
  {
    "text": "customers and see how we can improve how we engage with this community so",
    "start": "60000",
    "end": "67189"
  },
  {
    "text": "companies that go you know increasingly global products are increasingly digital",
    "start": "67189",
    "end": "73320"
  },
  {
    "text": "and what we're seeing is they're the new normal is that companies want to move",
    "start": "73320",
    "end": "78720"
  },
  {
    "text": "into this digital world and companies want to remain competitive you can see",
    "start": "78720",
    "end": "84090"
  },
  {
    "text": "on the slider almost half of CEOs say they're being challenged by the Board of Directors to make progress in digital",
    "start": "84090",
    "end": "90000"
  },
  {
    "text": "business you know 79 percent of CEOs believe that digital business is making their organization better prepared to",
    "start": "90000",
    "end": "95549"
  },
  {
    "text": "change etc so I think it's well recognized that people want to move to a more digital more customer centric where",
    "start": "95549",
    "end": "102960"
  },
  {
    "text": "I've work in they want to be more agile and then wants to innovate as quickly as they can and it's really important that",
    "start": "102960",
    "end": "110040"
  },
  {
    "text": "we you know in order to achieve agility that we innovate in every single",
    "start": "110040",
    "end": "117060"
  },
  {
    "text": "business you know we see we're here at the public sector summit but we see many industries being disrupted through",
    "start": "117060",
    "end": "124380"
  },
  {
    "text": "disruptive startups they have come into the industry use modern ways of development use modern technologies and",
    "start": "124380",
    "end": "130050"
  },
  {
    "text": "been able to basically disrupt age-long industries if you look at air B&B for",
    "start": "130050",
    "end": "137340"
  },
  {
    "text": "example a few years ago there was a stat that they were renting out more rooms in New York than hotels disrupting the",
    "start": "137340",
    "end": "144420"
  },
  {
    "text": "hotel industry massively and because it's disruption across many many industries we see the requirement to",
    "start": "144420",
    "end": "151320"
  },
  {
    "text": "innovate the acquirement to experiment become much more important inside",
    "start": "151320",
    "end": "157709"
  },
  {
    "text": "businesses and customers we work with and this is something we we kind of do a lot of amazon and this is a quote from",
    "start": "157709",
    "end": "163590"
  },
  {
    "text": "Andy Jesse's the CEO of AWS it venture requires two things the ability to try a",
    "start": "163590",
    "end": "169230"
  },
  {
    "text": "lot of experiments and not even to live with the current collateral damage of failed experiments so really what that",
    "start": "169230",
    "end": "174240"
  },
  {
    "text": "means is we need to build cultures inside our organizations that embrace failure and that's work pretty well for us to Amazon and hopefully in this talk",
    "start": "174240",
    "end": "180720"
  },
  {
    "text": "we can show you through some of the best practices that we've used and you know we we're not a perfect organization",
    "start": "180720",
    "end": "186360"
  },
  {
    "text": "we've had some interest in challenges which we'll touch on as well in terms of modernizing our business but",
    "start": "186360",
    "end": "193019"
  },
  {
    "text": "hopefully we'll talk a little bit take you through some of that and give you some insights into how you can think",
    "start": "193019",
    "end": "198959"
  },
  {
    "text": "differently about how you develop applications in your organizations so if",
    "start": "198959",
    "end": "206459"
  },
  {
    "text": "we look at old-world IT we don't",
    "start": "206459",
    "end": "212220"
  },
  {
    "text": "animation there so I wasn't it wasn't expecting that but if you look at old-world IT you know things have changed quite a lot in the way that",
    "start": "212220",
    "end": "217860"
  },
  {
    "text": "people expectations people having of their business old-world IT doesn't map to new world",
    "start": "217860",
    "end": "223380"
  },
  {
    "text": "business so the needs of customers are changing you know there's a need for",
    "start": "223380",
    "end": "228810"
  },
  {
    "text": "things like personalization there's need to throw customer tracking single customer views there's need for people",
    "start": "228810",
    "end": "234840"
  },
  {
    "text": "want to be closer to their customer people want to get much more direct customer feedback businesses are",
    "start": "234840",
    "end": "240030"
  },
  {
    "text": "becoming much more consumer driven the way they develop their applications if you look at the taxi industry in London",
    "start": "240030",
    "end": "247799"
  },
  {
    "text": "for example you know years ago you could only get a black taxi or black cab in",
    "start": "247799",
    "end": "253470"
  },
  {
    "text": "London now I can have a cab way outside the office for me for five minutes without me paying anything happily that's a real",
    "start": "253470",
    "end": "260739"
  },
  {
    "text": "customer driven behavior that's impacted that one industry as an example so we",
    "start": "260739",
    "end": "266139"
  },
  {
    "text": "see many businesses moving to much more customer driven innovation so it's",
    "start": "266139",
    "end": "272470"
  },
  {
    "text": "important to stay up-to-date to stay relevant so make sure that you're developing code and developing applications in the most effective ways",
    "start": "272470",
    "end": "279460"
  },
  {
    "text": "possible in modern application development we believe creates a competitive differe a",
    "start": "279460",
    "end": "286199"
  },
  {
    "text": "bracket innovation inside your organization's we have many customers",
    "start": "286199",
    "end": "293169"
  },
  {
    "text": "already building modern applications on AWS so the message here really is that this is a path well trodden if you're",
    "start": "293169",
    "end": "302020"
  },
  {
    "text": "thinking of moving to a server less technology if you're thinking of moving to containers if you're thinking about adopting micro-services we have many",
    "start": "302020",
    "end": "308500"
  },
  {
    "text": "customers that have been through that journey already the ones on the slide you can see the ones that are referenceable and are talking publicly",
    "start": "308500",
    "end": "314350"
  },
  {
    "text": "about that but there's many more you know we can help you with our experiences and help with our customers experiences to understand how you can",
    "start": "314350",
    "end": "321210"
  },
  {
    "text": "head down that path as well so when we look into a capabilities of a modern",
    "start": "321210",
    "end": "327430"
  },
  {
    "text": "application there's kind of six areas that we we want to make sure every application has you know firstly",
    "start": "327430",
    "end": "333870"
  },
  {
    "text": "priority number one is always security we need to make sure that applications are secure we may be changing the way we",
    "start": "333870",
    "end": "340060"
  },
  {
    "text": "develop our applications we may be changing the way our teams operate we may be loosely coupling the services and",
    "start": "340060",
    "end": "345789"
  },
  {
    "text": "that may seem intimidating to some organizations that maybe have traditional you know enterprise",
    "start": "345789",
    "end": "351010"
  },
  {
    "text": "architecture bottlenecks around security approvals on things obvious so we're not taking away that requirement for",
    "start": "351010",
    "end": "356080"
  },
  {
    "text": "security in fact it's a number-one priority of everything we do and that's you know fundamental to building modern",
    "start": "356080",
    "end": "363280"
  },
  {
    "text": "applications and making them successful for your business we obviously also want resiliency resiliency is the ability to",
    "start": "363280",
    "end": "372070"
  },
  {
    "text": "kind of the ability to handle that unknown unknowns you know how can your",
    "start": "372070",
    "end": "377199"
  },
  {
    "text": "application you know you can design for availability which is handling the known",
    "start": "377199",
    "end": "383330"
  },
  {
    "text": "handling the knowns you know you know that you're gonna have package drop you know that powers going to fail at some",
    "start": "383330",
    "end": "389660"
  },
  {
    "text": "point you can plan for those things using availability architect architectural patterns but resiliency is",
    "start": "389660",
    "end": "395210"
  },
  {
    "text": "how do you build your applications to handle that unknown unknown unknown unknowns how do you build your",
    "start": "395210",
    "end": "400460"
  },
  {
    "text": "application to be able to cope with the most unexpected of failures that you maybe can't predict for so by leveraging",
    "start": "400460",
    "end": "407270"
  },
  {
    "text": "some of these services that we'll talk about you get the years and years of experience of Amazon building resilient systems underpinning these managed",
    "start": "407270",
    "end": "414680"
  },
  {
    "text": "services that we'll talk about and obviously elasticity is really important and actually one the key benefits of a",
    "start": "414680",
    "end": "420620"
  },
  {
    "text": "modern application architecture is the ability for individual micro services and we'll get onto this later but the",
    "start": "420620",
    "end": "426860"
  },
  {
    "text": "ability for individual micro services it's a scale independently of each other as well not necessarily the whole",
    "start": "426860",
    "end": "432139"
  },
  {
    "text": "application scaling on demand but just that small piece of application that's required for that workload that's income",
    "start": "432139",
    "end": "437960"
  },
  {
    "text": "in the ability to scale and more importantly the ability to scale without the need for a huge overhead or cost or",
    "start": "437960",
    "end": "446840"
  },
  {
    "text": "management overhead for you as a customer and we mentioned micro services modularity is probably one of the most",
    "start": "446840",
    "end": "452479"
  },
  {
    "text": "important things having your application scale independent part to application loosely coupled they scale on they scale",
    "start": "452479",
    "end": "459260"
  },
  {
    "text": "independently they fail independently and the the kind of tight coupling is removed from your architecture so you",
    "start": "459260",
    "end": "465260"
  },
  {
    "text": "can have this modular design and an impact on one service doesn't necessarily impact your whole business or your customers we want them to be",
    "start": "465260",
    "end": "472340"
  },
  {
    "text": "automated and obviously interoperable while we're creating this modular materialized infrastructure we still",
    "start": "472340",
    "end": "478190"
  },
  {
    "text": "want these services to be interoperable and work closely together so when we",
    "start": "478190",
    "end": "484639"
  },
  {
    "text": "look at modern applications we do understand that customers are on different paths their journey we don't",
    "start": "484639",
    "end": "491599"
  },
  {
    "text": "see it as an in-state modern application development we see it as a journey and you know maybe you're building something it's new you know you're already you",
    "start": "491599",
    "end": "498050"
  },
  {
    "text": "know talk the cloud native talk and you're building something that's new on the other hand maybe you've done a major enterprise lift and shift out of a",
    "start": "498050",
    "end": "504800"
  },
  {
    "text": "datacenter and you're just taking your first steps into the new world or if you know that next evolution of",
    "start": "504800",
    "end": "510230"
  },
  {
    "text": "application development so there's various different journeys or paths that you may take depending on the way your",
    "start": "510230",
    "end": "516950"
  },
  {
    "text": "way rapidly organization sitting but also what type of application with this a brownfield or greenfield application",
    "start": "516950",
    "end": "522919"
  },
  {
    "text": "so there's a kind of four key options available we look at modern application development the first one is to reap lat",
    "start": "522919",
    "end": "529400"
  },
  {
    "text": "form and this is the kind of you know VM ster containers or that kind of talk",
    "start": "529400",
    "end": "535460"
  },
  {
    "text": "the oboe needs to reinvent how can you think about new operating models how can you reinvent your applications or build for new operating models whether it's a",
    "start": "535460",
    "end": "541820"
  },
  {
    "text": "diverse lambda for service computing another option is to refactor and then obviously rhe host is that kind of mode",
    "start": "541820",
    "end": "548720"
  },
  {
    "text": "one operation of lifting and shifting your application and that's where you will use more kind of server for",
    "start": "548720",
    "end": "554690"
  },
  {
    "text": "approaches before we get into the the patterns I just want to touch on a couple of customers that have had",
    "start": "554690",
    "end": "561160"
  },
  {
    "text": "success in doing this the first one is a Turner Broadcasting they're a media and entertainment company in the United",
    "start": "561160",
    "end": "566690"
  },
  {
    "text": "States they broadcast to a huge percentage I think they're owned by Time Warner so they're huge broadcasting",
    "start": "566690",
    "end": "572930"
  },
  {
    "text": "company in the United States based out of Atlanta it's an interesting reap lat form decision they actually moved from",
    "start": "572930",
    "end": "580570"
  },
  {
    "text": "kubernetes which you would maybe think of as you know it's pretty good platform for modern applications they move from",
    "start": "580570",
    "end": "587120"
  },
  {
    "text": "kubernetes to a debase Fargate which is our server love containers product which we'll touch on a bit later because they",
    "start": "587120",
    "end": "593240"
  },
  {
    "text": "just didn't see the benefit in them as a broadcasting company having to worry about managing kubernetes clusters why",
    "start": "593240",
    "end": "600170"
  },
  {
    "text": "should we worry about that when a Debus can take care of managing the cluster for us and we can just focus on the business logic running containers that",
    "start": "600170",
    "end": "606500"
  },
  {
    "text": "are managed for us using a de brest for game another customers FINRA so FINRA",
    "start": "606500",
    "end": "612400"
  },
  {
    "text": "you know financial regulator they reinvented they've rebuilt this stock trading application they can handle half",
    "start": "612400",
    "end": "621530"
  },
  {
    "text": "a trillion validation today on this doctory validation system and they can handle spikes with three times that with",
    "start": "621530",
    "end": "627800"
  },
  {
    "text": "no bad impacts and the reason for that is that they're using an ADA based lambda our servers compute platform they",
    "start": "627800",
    "end": "632960"
  },
  {
    "text": "don't need to worry about scaling the infrastructure underneath the hood we're taking care of that for them they just send the requests and we take care of",
    "start": "632960",
    "end": "639200"
  },
  {
    "text": "scheduling the the lambdas for them that will take care of the code they actually reduced their",
    "start": "639200",
    "end": "644790"
  },
  {
    "text": "processing time their files are available in less than one minute regardless of the volume of data whereas",
    "start": "644790",
    "end": "651600"
  },
  {
    "text": "originally it was three minutes or up to seven minutes during peak workloads and",
    "start": "651600",
    "end": "656700"
  },
  {
    "text": "again that's that parallelism of the service architecture the ability to just run thousands of thousands of lambda",
    "start": "656700",
    "end": "663570"
  },
  {
    "text": "functions in parallel during your compute is basically reduced the time for them getting their data",
    "start": "663570",
    "end": "668670"
  },
  {
    "text": "you know from seven minutes down to one minute so so real key benefits there also for femur fifty percent cost saving",
    "start": "668670",
    "end": "675690"
  },
  {
    "text": "so it's not just the business benefit they're getting it that faster and they're paying 50% of the cost so huge",
    "start": "675690",
    "end": "681690"
  },
  {
    "text": "benefits there for FINRA in terms of actually rebuild their application so in three months to do this by the way it",
    "start": "681690",
    "end": "687420"
  },
  {
    "text": "wasn't something that took years or you know two to enflame I mean three months able to rebuild the whole stock stock",
    "start": "687420",
    "end": "693870"
  },
  {
    "text": "trade validation system handling trillions of events a day three months fifty percent the cost so we've seen",
    "start": "693870",
    "end": "701040"
  },
  {
    "text": "customers in huge value and move into these modern application architectures",
    "start": "701040",
    "end": "706250"
  },
  {
    "text": "so when we look at the checklist for modern applications these are the kind of hour when breeze through these we're gonna dive into all these now these are",
    "start": "706250",
    "end": "712650"
  },
  {
    "text": "kind of key areas that we think we should be looking at when we think about building a modern application the first",
    "start": "712650",
    "end": "718200"
  },
  {
    "text": "areas enabling securing compliance across the entire lifecycle and what that means is that we always start with",
    "start": "718200",
    "end": "723390"
  },
  {
    "text": "security it's the first place we look at but what we really need to do in terms",
    "start": "723390",
    "end": "728940"
  },
  {
    "text": "of modern application alone is rapidly move security capabilities much much deeper into engineering into the development space we need to be sure",
    "start": "728940",
    "end": "736350"
  },
  {
    "text": "that we're kind of building security compliance across the entire application lifecycle but what we don't want to do",
    "start": "736350",
    "end": "742860"
  },
  {
    "text": "is slow down innovation I think that happens a lot in typical enterprise organizations where security sometimes a",
    "start": "742860",
    "end": "747900"
  },
  {
    "text": "bottleneck you can't use things like a diverse lambda because your security team haven't gone through their vetting",
    "start": "747900",
    "end": "753510"
  },
  {
    "text": "process for each a diverse service that they have to vet and approve before you're allowed to use it and that really",
    "start": "753510",
    "end": "758790"
  },
  {
    "text": "inhibits innovation that inhibits that kind of experiment experimentation culture that we see many customers",
    "start": "758790",
    "end": "764070"
  },
  {
    "text": "wanting to adopt inside the organization so what we do is we ingrained that security knowledge inside the",
    "start": "764070",
    "end": "770040"
  },
  {
    "text": "teams inside sprint teams we make sure we have security experts we make sure we provide thorough guidelines to customers around how they how they operate",
    "start": "770040",
    "end": "777600"
  },
  {
    "text": "securely in the cloud and how they build secure services for their applications so security is kind of part number one",
    "start": "777600",
    "end": "783480"
  },
  {
    "text": "but you need to remove it as a gatekeeper and ingraining inside your organization throughout your development",
    "start": "783480",
    "end": "788520"
  },
  {
    "text": "teams rather than having it as a bottleneck but the key thing around and",
    "start": "788520",
    "end": "794610"
  },
  {
    "text": "the key one in this checklist is really around structuring your apps as collections of micro services so what do",
    "start": "794610",
    "end": "800070"
  },
  {
    "text": "we mean by micro services so on the left here we have a monolithic application",
    "start": "800070",
    "end": "805970"
  },
  {
    "text": "and model just to define a monolithic application I'm sure you're all aware but you know it does everything it",
    "start": "805970",
    "end": "813510"
  },
  {
    "text": "shares not only the code but it shares the release pipeline it's typically shares the same database it's one",
    "start": "813510",
    "end": "818970"
  },
  {
    "text": "monolithic application amazon.com actually came along this journey you know in 2000 and only 2000 ish we went",
    "start": "818970",
    "end": "826020"
  },
  {
    "text": "through this transition of moving to a micro services architecture amazon.com believe it or not the amazon.com website",
    "start": "826020",
    "end": "832650"
  },
  {
    "text": "was one single monolith the monolithic application that took over 15 hours to compile every time we released a change",
    "start": "832650",
    "end": "838520"
  },
  {
    "text": "we now moved Amazon to a micro services approach both from a technology and a cultural perspective and the stats",
    "start": "838520",
    "end": "846560"
  },
  {
    "text": "that's about four or five years old now but in 2014 time frame we were actually",
    "start": "846560",
    "end": "851670"
  },
  {
    "text": "deploying 1.9 times a second we were deploying on average to",
    "start": "851670",
    "end": "857070"
  },
  {
    "text": "production in amazon.com so we went from a monolithic application 15 hours to compile every time we made a change so",
    "start": "857070",
    "end": "864180"
  },
  {
    "text": "doing nearly 2 changes a second across amazon.com by breaking our teams up into micro services and focusing them on just",
    "start": "864180",
    "end": "871230"
  },
  {
    "text": "what we call them in Amazon single threaded teams and that really is single traded teams means the ability to just",
    "start": "871230",
    "end": "877470"
  },
  {
    "text": "do one thing and do it well and focus on that other thing and that applies to the micro services as well so at amazon.com for example a",
    "start": "877470",
    "end": "883980"
  },
  {
    "text": "micro service maybe the one-click Buy button or a tax calculation on the website or you know providing the basket",
    "start": "883980",
    "end": "892500"
  },
  {
    "text": "to the customer these are we've broken everything down into very small micro services and these services do one thing well and they",
    "start": "892500",
    "end": "899970"
  },
  {
    "text": "scowl and foul independently of each other so the real goal of microservices is to do one thing well but the key thing is",
    "start": "899970",
    "end": "910250"
  },
  {
    "text": "also that they need to be you know easily replaced and modular so what we",
    "start": "910250",
    "end": "917240"
  },
  {
    "text": "want to do is we want to start start taking away any kind of tight coupling between applications you don't want a to",
    "start": "917240",
    "end": "925580"
  },
  {
    "text": "micro-services to necessarily share the same database because now they don't scale and fail independently of each",
    "start": "925580",
    "end": "930920"
  },
  {
    "text": "other right you want them to be able to talk to each other on common interfaces and api's so it doesn't only apply to you",
    "start": "930920",
    "end": "939290"
  },
  {
    "text": "know compute workloads it doesn't only apply to run in your api's it applies to",
    "start": "939290",
    "end": "944390"
  },
  {
    "text": "and I'll just build this out but it applies to things like databases as well",
    "start": "944390",
    "end": "951250"
  },
  {
    "text": "use managed services where you can you know don't necessarily mean you have to build all these micro services yourself if you look at databases if you look at",
    "start": "951250",
    "end": "958160"
  },
  {
    "text": "Amazon SNS for pub/sub or fan-out type architectures messaging architectures if",
    "start": "958160",
    "end": "965000"
  },
  {
    "text": "you look at Amazon sqs are queuing service really allows you to loosely couple services through queues that's a",
    "start": "965000",
    "end": "971270"
  },
  {
    "text": "really common architectural pattern that allows things to scale and fail independently of each other so don't",
    "start": "971270",
    "end": "977300"
  },
  {
    "text": "necessarily think about this just from a compute perspective think about what other services you can use from AWS to take a take take care of the heavy",
    "start": "977300",
    "end": "984710"
  },
  {
    "text": "lifting and as we touched on you know sharing services or data stores whatever",
    "start": "984710",
    "end": "990020"
  },
  {
    "text": "it may be across micro services introduces coupling and we don't want coupling because it creates synchronous",
    "start": "990020",
    "end": "995120"
  },
  {
    "text": "communication where the sender waits for a response and it creates dependencies between micro services which in turn",
    "start": "995120",
    "end": "1001270"
  },
  {
    "text": "creates performance and availability problems so we aim for all data exchange to be through api's you know common api",
    "start": "1001270",
    "end": "1009760"
  },
  {
    "text": "or messaging interfaces and they star graham here shows you kind of how you typically break break those down whether there be you know server for micro",
    "start": "1009760",
    "end": "1016780"
  },
  {
    "text": "services or service micro services using lambda functions as well but as i",
    "start": "1016780",
    "end": "1021820"
  },
  {
    "text": "mentioned already we really to think about what databases we use as well it's",
    "start": "1021820",
    "end": "1026860"
  },
  {
    "text": "not just about compute so if you look at typical way people think about applications there's two types of",
    "start": "1026860",
    "end": "1034459"
  },
  {
    "text": "databases that people look at there's relational databases and a SS have a huge amount of capability here without",
    "start": "1034460",
    "end": "1041140"
  },
  {
    "text": "Amazon relational database service which offers you know Postgres my sequel mario",
    "start": "1041140",
    "end": "1047300"
  },
  {
    "text": "DB all the open source engines along with commercial engines like oracle and sequel server and then our own engine",
    "start": "1047300",
    "end": "1052820"
  },
  {
    "text": "called a roar of course which is Postgres for my sequel compatible lots of lots of capability for relational",
    "start": "1052820",
    "end": "1058640"
  },
  {
    "text": "type workloads but we also see this kind of uptake in no sequel type databases",
    "start": "1058640",
    "end": "1065330"
  },
  {
    "text": "you know dynamodb is that kind of flagship offering in the no sequel space and it's a key/value database so quite",
    "start": "1065330",
    "end": "1073100"
  },
  {
    "text": "often we see that relational databases have used pretty heavily and they used across the whole applications typically",
    "start": "1073100",
    "end": "1080300"
  },
  {
    "text": "see a monolith with one large relational database and this is a bit of a kind of fun slide but you know should you use a",
    "start": "1080300",
    "end": "1086510"
  },
  {
    "text": "relational database or not well in fact actually most of the time you probably shouldn't or don't need to use a relational database we're not saying you",
    "start": "1086510",
    "end": "1093260"
  },
  {
    "text": "should never use a relational database there's differently use cases for that but think outside the box think about",
    "start": "1093260",
    "end": "1099020"
  },
  {
    "text": "your application think about your data profile and think about how what best suits the service that you're trying to",
    "start": "1099020",
    "end": "1105050"
  },
  {
    "text": "provide and actually we mentioned relational and key value databases a",
    "start": "1105050",
    "end": "1110210"
  },
  {
    "text": "second ago but there's six or seven different categories their database is available now whether it's time series",
    "start": "1110210",
    "end": "1116270"
  },
  {
    "text": "data or or graph databases for highly relational data or you know social graphs those kind of things very good",
    "start": "1116270",
    "end": "1122390"
  },
  {
    "text": "for predicts you predictive analytics or document databases or in-memory databases for caching and those kind of",
    "start": "1122390",
    "end": "1127940"
  },
  {
    "text": "things and AWS have purpose to build databases for each of these capabilities",
    "start": "1127940",
    "end": "1133400"
  },
  {
    "text": "that you can use most of them are server list technologies in themselves that they don't require any infrastructure to",
    "start": "1133400",
    "end": "1139220"
  },
  {
    "text": "run a good example of a new service that we just launched is our quantum ledger database which is a ledger database that",
    "start": "1139220",
    "end": "1146450"
  },
  {
    "text": "gives you a you know cryptographically verifiable order of events in terms of",
    "start": "1146450",
    "end": "1152720"
  },
  {
    "text": "your data so if you've got the requirement for those type of this a centralized ledger it's not a decentralized ledger",
    "start": "1152720",
    "end": "1159410"
  },
  {
    "text": "it's a centralized ledger but it's a database that allows you to serve a list database that allows you to support",
    "start": "1159410",
    "end": "1164630"
  },
  {
    "text": "those types of workloads or timestream our new time series data again completely serving us you just pay",
    "start": "1164630",
    "end": "1170080"
  },
  {
    "text": "for the data that's stored and the operations that you you use and when you're thinking about these databases",
    "start": "1170080",
    "end": "1175570"
  },
  {
    "text": "don't explore them a little bit deeper if you look at dynamo DB for example for",
    "start": "1175570",
    "end": "1181090"
  },
  {
    "text": "those that aren't familiar with dynamo derby it's you know a high scale no sequel database with a single",
    "start": "1181090",
    "end": "1187150"
  },
  {
    "text": "millisecond latency no matter what the",
    "start": "1187150",
    "end": "1192640"
  },
  {
    "text": "scale so how much your scale we guarantee a single millisecond single-digit millisecond latency not a",
    "start": "1192640",
    "end": "1197680"
  },
  {
    "text": "single millisecond single digit not a single millisecond single digit and and",
    "start": "1197680",
    "end": "1202870"
  },
  {
    "text": "it's hugely scalable if you look at this is a few years old again a case study",
    "start": "1202870",
    "end": "1208390"
  },
  {
    "text": "that I've got in my head but if you've seen the app Shazam where you can Shazam a song if anyone's seen that they did an",
    "start": "1208390",
    "end": "1214150"
  },
  {
    "text": "advert in the Superbowl a few years ago and the Super Bowl was when the most watched you know sporting events in the",
    "start": "1214150",
    "end": "1219700"
  },
  {
    "text": "world and if you Shazam this advert you could win a car they used dynamodb to write the entries to that competition",
    "start": "1219700",
    "end": "1227020"
  },
  {
    "text": "through Shazam and it handled over 300,000 rights a second into dynamodb so hugely scalable single-digit millisecond",
    "start": "1227020",
    "end": "1233500"
  },
  {
    "text": "latency at scale even at those kinds of hundreds of thousands of requests a second scowl but now support",
    "start": "1233500",
    "end": "1240040"
  },
  {
    "text": "transactions as well so if you think about transactional workload you don't necessarily have to be thinking",
    "start": "1240040",
    "end": "1245410"
  },
  {
    "text": "relational database anymore DynamoDB now support the transaction so you can start to think about how you can use these you",
    "start": "1245410",
    "end": "1250660"
  },
  {
    "text": "know more scalable server list type workloads that scale as you need instead",
    "start": "1250660",
    "end": "1256720"
  },
  {
    "text": "of having to manage or the overhead of a relational database again not saying there's no need relational database lots",
    "start": "1256720",
    "end": "1261790"
  },
  {
    "text": "of fuse cases for that but worth exploring other options per micro service to think about how how they best",
    "start": "1261790",
    "end": "1270220"
  },
  {
    "text": "fit the use case that you're trying to try to meet the next part of the",
    "start": "1270220",
    "end": "1275530"
  },
  {
    "text": "checklist is to build with serverless technologies as much as possible so when we think about serving us we have these",
    "start": "1275530",
    "end": "1281050"
  },
  {
    "text": "key tenets of service application and the first thing is no infrastructure to provision or manage when we talk about",
    "start": "1281050",
    "end": "1287920"
  },
  {
    "text": "service you know yet there's a server somewhere but you don't have to worry about it we take care of all the",
    "start": "1287920",
    "end": "1293650"
  },
  {
    "text": "management of that infrastructure the passion of the operating system is scaling the infrastructure you just have to run your application code and where",
    "start": "1293650",
    "end": "1299980"
  },
  {
    "text": "you go likewise automatically scales up via a very small unit of consumption so in",
    "start": "1299980",
    "end": "1306730"
  },
  {
    "text": "terms of ATS lambda for example our servers compute platform it automatically scales up per request and",
    "start": "1306730",
    "end": "1312730"
  },
  {
    "text": "you pay per 100 milliseconds of code execution so we're going into this kind of granular event-based architecture",
    "start": "1312730",
    "end": "1318760"
  },
  {
    "text": "where you can where you just pay for the computer you use and obviously we want it to be highly available and durable",
    "start": "1318760",
    "end": "1324880"
  },
  {
    "text": "and this is we're using a service like lambda or Fargate which we'll talk about in a second you get this benefit of the",
    "start": "1324880",
    "end": "1330340"
  },
  {
    "text": "experience inside Amazon of running resilient systems if you're trying to build a service on ec2 and you're trying",
    "start": "1330340",
    "end": "1335919"
  },
  {
    "text": "to scale it out across availability zones and you're trying to make it highly available and highly resilient",
    "start": "1335919",
    "end": "1341470"
  },
  {
    "text": "it's actually very difficult to do there's lots of very detailed you know things that need to happen inside the",
    "start": "1341470",
    "end": "1348220"
  },
  {
    "text": "code to handle you know timeouts and back offs and retries and stuff directly there's things you need to think about in terms of shard in your data these",
    "start": "1348220",
    "end": "1354820"
  },
  {
    "text": "things actually very difficult to do at scale if you use things like lamdaur Fargo ADA breast take care of that under",
    "start": "1354820",
    "end": "1360220"
  },
  {
    "text": "the hood we take care of the heavy lifting and you're just focusing on the business logic and the application code and you're getting a resilient scalable",
    "start": "1360220",
    "end": "1366159"
  },
  {
    "text": "highly available service where you pay per use for your application there's two",
    "start": "1366159",
    "end": "1371350"
  },
  {
    "text": "kind of products when you talk about in the service compute space the first one is lambda we spoke about this a bit just",
    "start": "1371350",
    "end": "1377590"
  },
  {
    "text": "to touch on that lambda is an event-driven compute platform so when you think about event-driven",
    "start": "1377590",
    "end": "1383020"
  },
  {
    "text": "that means that you have to trigger a lambda function based on some kind of an event now that could be uploading an",
    "start": "1383020",
    "end": "1389470"
  },
  {
    "text": "image for example and they knew you want to I don't know render that image you want to add a hat",
    "start": "1389470",
    "end": "1394720"
  },
  {
    "text": "to someone's face or something where it might be you know you lambda function is triggered based on an image upload for",
    "start": "1394720",
    "end": "1400720"
  },
  {
    "text": "example that would be a type of event or if you but what we've seen is it's not",
    "start": "1400720",
    "end": "1406090"
  },
  {
    "text": "just image upload we seen these heavily used for data processing type workloads you saw the FINRA story earlier on we",
    "start": "1406090",
    "end": "1414400"
  },
  {
    "text": "also see it heavily used for web applications if you think about websites every click on the page is an event so",
    "start": "1414400",
    "end": "1422260"
  },
  {
    "text": "every time someone clicks on a button that's an event just because you have a customer that's in a session with the website doesn't necessarily mean that",
    "start": "1422260",
    "end": "1427870"
  },
  {
    "text": "you can't make you can't make use of service computing in the backend",
    "start": "1427870",
    "end": "1433430"
  },
  {
    "text": "to handle those events and then we have a little product called a debase fall gait which is better suited for longer",
    "start": "1433430",
    "end": "1438740"
  },
  {
    "text": "running workloads so lambda has a time limit of 15 minutes for a function before it times out you also need to",
    "start": "1438740",
    "end": "1446630"
  },
  {
    "text": "consider you know if things are running for 15 minutes at quite a high memory usage 100 milliseconds the cost looks",
    "start": "1446630",
    "end": "1453710"
  },
  {
    "text": "really low but when you start running something 15 minutes you would you know it starts to add up a little bit you know so think about how you can maybe",
    "start": "1453710",
    "end": "1460010"
  },
  {
    "text": "use things like Fargate which is our service containers where we take care of managing the orchestration managing the",
    "start": "1460010",
    "end": "1465770"
  },
  {
    "text": "cluster scaling and you just deploy your containers to any base Fargate and we take care of everything under the hood",
    "start": "1465770",
    "end": "1471700"
  },
  {
    "text": "so just on the containers side because it's a popular topic in this area containers portfolio is you know much",
    "start": "1471700",
    "end": "1477980"
  },
  {
    "text": "bigger than just Fargate so whilst we're advocating tablets I just want to touch",
    "start": "1477980",
    "end": "1483260"
  },
  {
    "text": "on some of the other offerings we have a couple of services the elastic container service and the elastic container",
    "start": "1483260",
    "end": "1489170"
  },
  {
    "text": "service for kubernetes their cluster",
    "start": "1489170",
    "end": "1494750"
  },
  {
    "text": "management services for managing clusters of containers but you still take care of the cluster scaling and configuration at that stage this talk",
    "start": "1494750",
    "end": "1501650"
  },
  {
    "text": "will focus more on Fargate which is the ability to just worry about the containers and we take care of the cluster management and provisioning so",
    "start": "1501650",
    "end": "1508040"
  },
  {
    "text": "just women if you have explored the idea based container kind of landscape before then we're",
    "start": "1508040",
    "end": "1515000"
  },
  {
    "text": "going to focus just on these two services mostly the reason for that is because when we talk about innovation",
    "start": "1515000",
    "end": "1521000"
  },
  {
    "text": "and speed and agility if you look at the comparison of you know operational responsibilities you can see here there",
    "start": "1521000",
    "end": "1527080"
  },
  {
    "text": "at the top we have service functions you know the their more opinionated in terms",
    "start": "1527080",
    "end": "1534980"
  },
  {
    "text": "of the way that they operate but they have a huge that you can kind of flip",
    "start": "1534980",
    "end": "1540170"
  },
  {
    "text": "this arrow on the left on his head you know they have much less operation operational overhead as well so it's a trade-off between how opinionated you",
    "start": "1540170",
    "end": "1545870"
  },
  {
    "text": "want the system to be versus how much control you want of the system but if",
    "start": "1545870",
    "end": "1551060"
  },
  {
    "text": "you really want to move fast we see that moving into they're kind of higher end of this stack and you know allowing us",
    "start": "1551060",
    "end": "1557240"
  },
  {
    "text": "to be a bit more opinionated about how the infrastructure runs but you just focus on the business logic is where the real of real value comes and again you know",
    "start": "1557240",
    "end": "1566500"
  },
  {
    "text": "so let's take care of everything up to you know management and orchestration you just worry about the API in the",
    "start": "1566500",
    "end": "1571700"
  },
  {
    "text": "business logic service isn't just about compute though it's not just about far",
    "start": "1571700",
    "end": "1577490"
  },
  {
    "text": "gate it's not just about lamda serverless is about those key tenants I spoke about earlier never paying for",
    "start": "1577490",
    "end": "1582559"
  },
  {
    "text": "idle scaling scaling independently so there's other services available and",
    "start": "1582559",
    "end": "1588679"
  },
  {
    "text": "when we look at a web application specifically or anything that requires some kind of HTTP trigger",
    "start": "1588679",
    "end": "1594080"
  },
  {
    "text": "I'm as an API gateway is what enables that so Amazon API gateway can be a trigger for a lambda function and it",
    "start": "1594080",
    "end": "1600500"
  },
  {
    "text": "basically enables HTTP triggers on a DES based lambda functions but also can sit",
    "start": "1600500",
    "end": "1607100"
  },
  {
    "text": "in front of any other API on the other important doesn't necessarily just have to see in front of lambda it can sit in front of a file Gate contain or in front",
    "start": "1607100",
    "end": "1612830"
  },
  {
    "text": "of a load balancer as well and then when you think about tracking state between all these applications you know how do",
    "start": "1612830",
    "end": "1618919"
  },
  {
    "text": "we make sure things are executing in the right order at the right time when we've got many micro services and many moving parts what we need is we need some kind",
    "start": "1618919",
    "end": "1626330"
  },
  {
    "text": "of state machine and that's where anybody step functions comes in and step functions allows you to build this kind of state machine around making sure that",
    "start": "1626330",
    "end": "1633110"
  },
  {
    "text": "your micro services are executing in the right order when it comes to building complex applications where many micro",
    "start": "1633110",
    "end": "1639860"
  },
  {
    "text": "services have to work together the next",
    "start": "1639860",
    "end": "1644990"
  },
  {
    "text": "kind of tenor of modern applications is around using code to model applications and infrastructure what this means is",
    "start": "1644990",
    "end": "1651710"
  },
  {
    "text": "that you should treat everything as software so not only when you're deploying your software should you check it into a code repository you should",
    "start": "1651710",
    "end": "1658549"
  },
  {
    "text": "also think about your infrastructure as code this applies not only to you know modern up the server less compute and",
    "start": "1658549",
    "end": "1664730"
  },
  {
    "text": "you know the modern application stuff we're talking about this applies to general use of AWS as well and in their",
    "start": "1664730",
    "end": "1671750"
  },
  {
    "text": "DBS we call them we have a protocol cloud formation and we call them stacks and you define these stacks they're basically a template a JSON or a yam or",
    "start": "1671750",
    "end": "1679580"
  },
  {
    "text": "template that describe what your environment looks like and the way we look at these is we look at them as",
    "start": "1679580",
    "end": "1685639"
  },
  {
    "text": "declarative templates you want infrastructures code to be declarative what that means is that you're not writing a script to say I want you to go",
    "start": "1685639",
    "end": "1691700"
  },
  {
    "text": "and do this and spin up these resources you're writing a template which defy what the declaring what the end state of",
    "start": "1691700",
    "end": "1697930"
  },
  {
    "text": "your environment looks like and that's what declarative means so cloud formation is the declarative syntax where we define the in state of your",
    "start": "1697930",
    "end": "1704710"
  },
  {
    "text": "environment so the goals really of infrastructures code is to make your infrastructure changes as repeatable as possible you know how often do we hear",
    "start": "1704710",
    "end": "1711550"
  },
  {
    "text": "people say you know the development environment doesn't look anything like the staging environment or like the",
    "start": "1711550",
    "end": "1716770"
  },
  {
    "text": "production environment by defining your infrastructure as code you get consistency across your applications",
    "start": "1716770",
    "end": "1722160"
  },
  {
    "text": "both in a repeatable in a predictable way and you're able to release your",
    "start": "1722160",
    "end": "1727390"
  },
  {
    "text": "infrastructure using the same tools that you use to release your code changes as well so what we did for service",
    "start": "1727390",
    "end": "1734050"
  },
  {
    "text": "applications is we took cloud formation which is a declarative infrastructure as code service and we created this little",
    "start": "1734050",
    "end": "1739570"
  },
  {
    "text": "squirrel called Sam which is our mascot for our service application model the service",
    "start": "1739570",
    "end": "1745900"
  },
  {
    "text": "application model is a open source framework and what is it's a kind of higher order it's a group of higher-order components in cloud",
    "start": "1745900",
    "end": "1752380"
  },
  {
    "text": "formation that allow you to very easily define service applications here's a",
    "start": "1752380",
    "end": "1757450"
  },
  {
    "text": "quick example in just 20 lines of code we've created a service function we've",
    "start": "1757450",
    "end": "1763000"
  },
  {
    "text": "created identity access management role and permissions to for that functions go and write to a dynamo DB table we've",
    "start": "1763000",
    "end": "1769840"
  },
  {
    "text": "created an API so we've got HTTP trigger on that and we've created a dynamo DB table itself so we've taken the",
    "start": "1769840",
    "end": "1775300"
  },
  {
    "text": "complexity of cloud formation for service resources and simplified with these higher-order components through",
    "start": "1775300",
    "end": "1781180"
  },
  {
    "text": "Sam and there's a yeah more or template's the great benefit of Sammys that it really compiles down to cloud",
    "start": "1781180",
    "end": "1787060"
  },
  {
    "text": "formation under the hood so in your Sam template you can include any cloud formation so if there's a resource type",
    "start": "1787060",
    "end": "1793150"
  },
  {
    "text": "in AWS that isn't supported by Sam then you can just put vanilla cloud formation",
    "start": "1793150",
    "end": "1798280"
  },
  {
    "text": "inside your Sam templates and deploy other resources as well and Sam comes",
    "start": "1798280",
    "end": "1803710"
  },
  {
    "text": "now with a CLI as well the Sam CLI which is a command line interface that allows you to do a few things firstly you can",
    "start": "1803710",
    "end": "1811260"
  },
  {
    "text": "develop locally so you can actually we have a container available it's called in the docker hub called lam CI",
    "start": "1811260",
    "end": "1818130"
  },
  {
    "text": "basically what this is it's a container there has the same runtime as our lambda environment we have them for every",
    "start": "1818130",
    "end": "1826240"
  },
  {
    "text": "language that we support and you can do things like run Sam build and if you use",
    "start": "1826240",
    "end": "1831879"
  },
  {
    "text": "the if you pass the use container argument here what happens is you run Sam build use container we go and take",
    "start": "1831879",
    "end": "1838600"
  },
  {
    "text": "all your dependencies from say if you're using Python your requirements or text file and we install and build them all",
    "start": "1838600",
    "end": "1843700"
  },
  {
    "text": "for you in a container that looks the same as the lambda runtime and then package them up and put them in an s3 bucket for you so you're ready to go and",
    "start": "1843700",
    "end": "1849700"
  },
  {
    "text": "deploy your service application so we take care of all the kind of heavy lifting of making sure your dependencies",
    "start": "1849700",
    "end": "1855340"
  },
  {
    "text": "are installed in the right environment and then we all got other nuke you know Sam local for example that uses those",
    "start": "1855340",
    "end": "1861999"
  },
  {
    "text": "same containers to actually run your lambda environment locally so if you're on an aeroplane or you're flying you",
    "start": "1861999",
    "end": "1867039"
  },
  {
    "text": "want to develop locally without pushing to the cloud Sam local allows you to run lambda runtime an api gateway",
    "start": "1867039",
    "end": "1872820"
  },
  {
    "text": "environment locally and then we have this new command called sam publish where we can publish applications to the",
    "start": "1872820",
    "end": "1881639"
  },
  {
    "text": "service application repository and the service application repository is a",
    "start": "1881639",
    "end": "1887249"
  },
  {
    "text": "basically a marketplace for service applications that other customers have built or AWS have built and making them",
    "start": "1887249",
    "end": "1893080"
  },
  {
    "text": "easily available for for other people so here's an example of a service application that takes searches",
    "start": "1893080",
    "end": "1901889"
  },
  {
    "text": "periodically polls the public switzer search api and invoked a lambda function to process new tweets this is something",
    "start": "1901889",
    "end": "1909940"
  },
  {
    "text": "someone's already built it's called treat processor it's available as open source we actually put was AWS but",
    "start": "1909940",
    "end": "1915490"
  },
  {
    "text": "what's really cool is in Sam we can say we don't want to include a service",
    "start": "1915490",
    "end": "1920590"
  },
  {
    "text": "function an API or dynamodb table someone's already done that we just want to include the service application that's already hosting the service",
    "start": "1920590",
    "end": "1927009"
  },
  {
    "text": "application repository so we just want to embed kind of its modulized in your service applications by using snippets",
    "start": "1927009",
    "end": "1933220"
  },
  {
    "text": "of code that have already been built and are available either from AWS or people like yourselves you can deploy to that",
    "start": "1933220",
    "end": "1938440"
  },
  {
    "text": "so it's a kind of way of sharing and collaborating on common service architectural patterns and templates the",
    "start": "1938440",
    "end": "1947710"
  },
  {
    "text": "next characteristics is around releasing high quality features and using continuous integration and continuous deployment to do so it's this is",
    "start": "1947710",
    "end": "1955690"
  },
  {
    "text": "you know some statistics forget what the source is on that slide this is an",
    "start": "1955690",
    "end": "1961570"
  },
  {
    "text": "analyst report I think it's the puppy report actually from puppets annual survey but they see that you know teams",
    "start": "1961570",
    "end": "1968890"
  },
  {
    "text": "that use CI CD to deploy their code you know they deploy code forty six times more frequently I think that's super",
    "start": "1968890",
    "end": "1974530"
  },
  {
    "text": "important for in this day and age where you want to be current and you want to deploy code more frequently you know",
    "start": "1974530",
    "end": "1981610"
  },
  {
    "text": "Capital One the the bank they built a service API on AWS they used to deploy",
    "start": "1981610",
    "end": "1989050"
  },
  {
    "text": "once every month they now deploy twice a day to this API because they're using contingent integration produced",
    "start": "1989050",
    "end": "1994480"
  },
  {
    "text": "deployment making it super easy and reducing the risk for their customers when they're deploying applications and",
    "start": "1994480",
    "end": "1999760"
  },
  {
    "text": "what we typically see is that you know we have these monolithic content in the monolithic model people had their kind",
    "start": "1999760",
    "end": "2007560"
  },
  {
    "text": "of the pipeline was shared across services so what you do is you would you",
    "start": "2007560",
    "end": "2013560"
  },
  {
    "text": "know big team of developers clobbering away on a big monolithic apps and they kind of throw over the fence to QA release and operations teams and then",
    "start": "2013560",
    "end": "2020160"
  },
  {
    "text": "they kind of spearhead it into production somehow and then you kind of all cross your fingers and hope they're everything's working okay so what we've",
    "start": "2020160",
    "end": "2028260"
  },
  {
    "text": "seen with micro services is that the real approach is to have a delivery pipeline per a service so instead of",
    "start": "2028260",
    "end": "2033570"
  },
  {
    "text": "having this kind of centralized QA team and Amazon we actually run a you build it you own it you run it type culture so",
    "start": "2033570",
    "end": "2041430"
  },
  {
    "text": "every single individual service has its own release pipeline in terms of how its release and we have a few products",
    "start": "2041430",
    "end": "2048570"
  },
  {
    "text": "around that code pipeline we don't have time to go into all of them today but one of them specifically that works well with modern applications is code deploy",
    "start": "2048570",
    "end": "2055010"
  },
  {
    "text": "code deploy is a service there allows you to deploy code to any instance but",
    "start": "2055010",
    "end": "2060929"
  },
  {
    "text": "it also allows you to deploy code to lambda functions as well and it allows",
    "start": "2060929",
    "end": "2067770"
  },
  {
    "text": "you to avoid downtime it allows you to do canary deployments and those kind of things as well automatic rollback for those that are",
    "start": "2067770",
    "end": "2075210"
  },
  {
    "text": "still operating operating in a you know storing some stuff on prim code deploy can work in the eight abyss cloud but",
    "start": "2075210",
    "end": "2080730"
  },
  {
    "text": "you can also install the code deploy agent on Prem as well and deploy code on prem using code deploy so you have a consistent tool across your applications",
    "start": "2080730",
    "end": "2087330"
  },
  {
    "text": "so in terms of lambda pretty nice integration here what it does is it uses",
    "start": "2087330",
    "end": "2092500"
  },
  {
    "text": "weighted aliases or lambda functions to shift traffic and it supports canary deployments which is you know shift 10%",
    "start": "2092500",
    "end": "2100030"
  },
  {
    "text": "of traffic for ten minutes then shift the rest if everything is okay also supports linear deployments where it",
    "start": "2100030",
    "end": "2105580"
  },
  {
    "text": "shifts you know 10% every 10 minutes for example so it's gradually deploying more and more over time to to or migrating",
    "start": "2105580",
    "end": "2112780"
  },
  {
    "text": "more more well close overtime for the new version and it because using aliases you can",
    "start": "2112780",
    "end": "2117940"
  },
  {
    "text": "just roll back in seconds very easily roll back its a previous versions of code of things on working very well it's",
    "start": "2117940",
    "end": "2124240"
  },
  {
    "text": "great with the service application model templates which I spoke about earlier so",
    "start": "2124240",
    "end": "2129670"
  },
  {
    "text": "you can see here that there's a deployment preference in the properties and we're saying we want a canary 10%",
    "start": "2129670",
    "end": "2136930"
  },
  {
    "text": "for 10 minutes deployment so we're able to very easily define that inside our Sam template and then we have these",
    "start": "2136930",
    "end": "2143200"
  },
  {
    "text": "hooks so if this if these web hooks that we provide which are other lambda functions that go and do validation so",
    "start": "2143200",
    "end": "2148480"
  },
  {
    "text": "for example in this case is a pre traffic hook so all it's in 10% of my traffic for 10 minutes and then I want",
    "start": "2148480",
    "end": "2153670"
  },
  {
    "text": "to run this pre traffic hook just to check everything's ok before I send any truck you know any more traffic to that application so the way this works in a",
    "start": "2153670",
    "end": "2161110"
  },
  {
    "text": "kind of walk through is this example 100% of our code going to version 1 of",
    "start": "2161110",
    "end": "2166300"
  },
  {
    "text": "our lambda function code so we run the pre traffic kook first before it receives any traffic sorry just to",
    "start": "2166300",
    "end": "2171670"
  },
  {
    "text": "double-check things run a few tests and then we send 10% of our traffic to the",
    "start": "2171670",
    "end": "2176680"
  },
  {
    "text": "version 2 of our code we wait for 10 minutes if there's any alarms we roll",
    "start": "2176680",
    "end": "2182440"
  },
  {
    "text": "back and then we run the post traffic hook which is after that 10% of traffic",
    "start": "2182440",
    "end": "2188380"
  },
  {
    "text": "are we still happy and then if we're happy with the post traffic hook we then send hundreds enter the traffic and then",
    "start": "2188380",
    "end": "2193900"
  },
  {
    "text": "obviously we removed traffic from the from the first version of code so it's done this kind of graceful transition",
    "start": "2193900",
    "end": "2200200"
  },
  {
    "text": "into version 2 of the code using code deploy just by adding you know 2 or 3 lines to our Sam template in the way",
    "start": "2200200",
    "end": "2205930"
  },
  {
    "text": "with the fly and our function so when we do that Sam deploy its making sure that we're gradually moving that into production and making sure that we're",
    "start": "2205930",
    "end": "2212470"
  },
  {
    "text": "putting all the right checks in place so we can start to move to that more continuous deployment model where you're actually deploying code in",
    "start": "2212470",
    "end": "2218730"
  },
  {
    "text": "production as quickly as possible without too many gatekeepers",
    "start": "2218730",
    "end": "2223820"
  },
  {
    "text": "I think is the final area there may be one more to focus on is usually monitoring it's important it's really",
    "start": "2227640",
    "end": "2233280"
  },
  {
    "text": "important when you have a complex distributive system with many micro services that you monitor your application accordingly and this is a",
    "start": "2233280",
    "end": "2240600"
  },
  {
    "text": "kind of term you can see it on the on the right here called observability you",
    "start": "2240600",
    "end": "2246150"
  },
  {
    "text": "know the ability to get real-time insights of your application moving from you know metrics and logs through to you",
    "start": "2246150",
    "end": "2253200"
  },
  {
    "text": "know real-time insights observing the application as it's in as it's in production and we see this is a common",
    "start": "2253200",
    "end": "2259470"
  },
  {
    "text": "trend in in this kind of modern application world so we have a product called ADA breast x-ray and x-ray is a",
    "start": "2259470",
    "end": "2265380"
  },
  {
    "text": "service that allows you to trace user flows throughout your application so",
    "start": "2265380",
    "end": "2271260"
  },
  {
    "text": "through many different micro services whether they're running in you know service functions or containers or",
    "start": "2271260",
    "end": "2277380"
  },
  {
    "text": "server for applications also will tell you things like for lambdas it will look",
    "start": "2277380",
    "end": "2286680"
  },
  {
    "text": "at things like cold starts it's you know tell you how long you can see how long the lambda took to to kick off so you",
    "start": "2286680",
    "end": "2292560"
  },
  {
    "text": "can see if there was a cold start problem with your lambda function for example it will tell you if there's exceptions on things like the",
    "start": "2292560",
    "end": "2298050"
  },
  {
    "text": "recognition API our our our computer vision image and video analysis ai",
    "start": "2298050",
    "end": "2303330"
  },
  {
    "text": "service it will tell you what the exceptions are with inside the x-ray console if your lambda function is calling other a degress services for",
    "start": "2303330",
    "end": "2310109"
  },
  {
    "text": "example just got it's quite nice interaction with lambda if you're doing service applications the agent is",
    "start": "2310109",
    "end": "2316500"
  },
  {
    "text": "natively built into lambda so there's no need for you to require it or include it in your in your repository like I said",
    "start": "2316500",
    "end": "2324060"
  },
  {
    "text": "it can identify initialization or cold start problems with your lambda functions but also pinpoint issues in",
    "start": "2324060",
    "end": "2330000"
  },
  {
    "text": "downstream services and this what happens in real time low latency you can see the traces in seconds no impacts to",
    "start": "2330000",
    "end": "2337619"
  },
  {
    "text": "application in terms of performance overhead to run this and you get this nice kind of a dashboard here you can see she can't see it very clearly here",
    "start": "2337619",
    "end": "2344310"
  },
  {
    "text": "on my screen but you can see here we've got a couple of lambda functions here they're our clients our",
    "start": "2344310",
    "end": "2350390"
  },
  {
    "text": "accessing and then we see there's some kognito identity so we're using Amazon Cognito to do authentication in this",
    "start": "2350390",
    "end": "2356900"
  },
  {
    "text": "application you can see that that's the service that we can monitor with the x-ray as well and then we can see that we're doing some we're talking to s3 so",
    "start": "2356900",
    "end": "2363500"
  },
  {
    "text": "x-ray is now allowing us to see how how the how the apps are performing in terms",
    "start": "2363500",
    "end": "2369350"
  },
  {
    "text": "of rise to s3 and getting that data as well and then you get this kind of timeline fall of the traces inside your",
    "start": "2369350",
    "end": "2374570"
  },
  {
    "text": "application so you can look at an individual trace of a user session and you can track how that where the weather",
    "start": "2374570",
    "end": "2383180"
  },
  {
    "text": "most wait time is in your application for example and as I mentioned this one here to show in an example of a device",
    "start": "2383180",
    "end": "2390470"
  },
  {
    "text": "recognition it's saying that it's getting an invalid image format exception so it's it's taken those locks",
    "start": "2390470",
    "end": "2397130"
  },
  {
    "text": "and it's making it easy for you to see where the problem is inside your application and what what slowing it",
    "start": "2397130",
    "end": "2402260"
  },
  {
    "text": "down another service from our kind of",
    "start": "2402260",
    "end": "2407590"
  },
  {
    "text": "observability and monitoring perspective I guess in this area but it could fit more in the kind of micro services there",
    "start": "2407590",
    "end": "2412940"
  },
  {
    "text": "as well is a new service called a degress cloud map so what cloud map does",
    "start": "2412940",
    "end": "2418220"
  },
  {
    "text": "is it takes care of tracking all your application components and their locations their attributes and their health so what it does it allows you to",
    "start": "2418220",
    "end": "2425150"
  },
  {
    "text": "basically create a namespace for your micro services for example and your applications is your applications talk",
    "start": "2425150",
    "end": "2433370"
  },
  {
    "text": "to that so that so the cloud map service to identify you know what the healthy instance of your application is behind",
    "start": "2433370",
    "end": "2439100"
  },
  {
    "text": "the scene so it basically gives you the subscription kind of abstraction layer to provide service discovery inside your",
    "start": "2439100",
    "end": "2445700"
  },
  {
    "text": "your application so this works for it's heavily used for containers but it's not",
    "start": "2445700",
    "end": "2451070"
  },
  {
    "text": "just for containers you can put any resources inside there and resolve them using the cloud map API so gives you",
    "start": "2451070",
    "end": "2456590"
  },
  {
    "text": "that service discovery of your applications as well yeah but the other",
    "start": "2456590",
    "end": "2461840"
  },
  {
    "text": "features it can ensure that only healthy resources are discovered so if you have a health check on those resources and they're and they're not available it",
    "start": "2461840",
    "end": "2467720"
  },
  {
    "text": "just won't present them it's an option you can provide to not present them so you again increases the availability resiliency of your application in terms",
    "start": "2467720",
    "end": "2474890"
  },
  {
    "text": "of making sure that healthy resources are the only ones that are requested",
    "start": "2474890",
    "end": "2480010"
  },
  {
    "text": "so just to wrap up on the kind of checklist there how do we build modern applications we need to think of these",
    "start": "2480140",
    "end": "2485900"
  },
  {
    "text": "six things end to end first thing is securing compliance let's not forget about it let's make sure that we in graining",
    "start": "2485900",
    "end": "2491180"
  },
  {
    "text": "inside the whole of our business let's make sure that we don't make it a bottleneck but we make sure that's",
    "start": "2491180",
    "end": "2496190"
  },
  {
    "text": "important and understood throughout the business in terms of how the guidelines that people must follow to meet those",
    "start": "2496190",
    "end": "2501740"
  },
  {
    "text": "requirements microservices really think about micro-services doing one thing and",
    "start": "2501740",
    "end": "2508220"
  },
  {
    "text": "doing one thing well loosely coupling your applications making sure that they scale independently but they fail",
    "start": "2508220",
    "end": "2514760"
  },
  {
    "text": "independently use service technologies as much as possible we know that people",
    "start": "2514760",
    "end": "2520700"
  },
  {
    "text": "love containers we love containers too we have those offerings we spoke about about it about earlier on we know that",
    "start": "2520700",
    "end": "2527030"
  },
  {
    "text": "people will of operating systems and servers you know people have to build people love to play with technology but really when you're thinking about the",
    "start": "2527030",
    "end": "2532490"
  },
  {
    "text": "business logic think about how if possible you can really move up that stack and advance your kind of time to",
    "start": "2532490",
    "end": "2539840"
  },
  {
    "text": "market and the speed of development by not worrying about that heavy lifting require that comes we've run in",
    "start": "2539840",
    "end": "2545240"
  },
  {
    "text": "infrastructure and running things like cluster management and container scheduling really important use codes",
    "start": "2545240",
    "end": "2551810"
  },
  {
    "text": "and not only model applications but model your infrastructure make sure that you're using infrastructures code gives",
    "start": "2551810",
    "end": "2557660"
  },
  {
    "text": "you reusability also gives you the ability to go global really easily if",
    "start": "2557660",
    "end": "2563720"
  },
  {
    "text": "you're using cloud formation or Sam to deploy something in the Stockholm region AWS you can deploy it you can pick that",
    "start": "2563720",
    "end": "2571100"
  },
  {
    "text": "Sam Sann plate up and you can deploy it in the Singapore region you can take an application and make it global very easily in a very consistent fashion ways",
    "start": "2571100",
    "end": "2578270"
  },
  {
    "text": "and infrastructure as code so you really should treat your infrastructure in the same way that you treat your application code rapidly release high quality",
    "start": "2578270",
    "end": "2586370"
  },
  {
    "text": "features of C ICD think about getting to continuous deployment think about how you can get to that really fast the",
    "start": "2586370",
    "end": "2592310"
  },
  {
    "text": "release cycle using things like canary deployments using some of the features in code deploy to take care of take care",
    "start": "2592310",
    "end": "2598280"
  },
  {
    "text": "of that we just focused on the lambda example there but code deploy also has integration with ACS the elastic",
    "start": "2598280",
    "end": "2604100"
  },
  {
    "text": "container service in terms of deploying there as well and then obviously gain insights into applications behavior as",
    "start": "2604100",
    "end": "2610730"
  },
  {
    "text": "you move to micro services you'll get all these benefits of agility you'll get these it's of microsegmentation you'll get",
    "start": "2610730",
    "end": "2616150"
  },
  {
    "text": "these benefits of a single service failing doesn't impact your whole application but it's important to make",
    "start": "2616150",
    "end": "2621580"
  },
  {
    "text": "sure you understand how these services interoperate make sure you understand how they work together and make sure you",
    "start": "2621580",
    "end": "2626980"
  },
  {
    "text": "can get visibility into where the bottlenecks are in your application if anything's you know slowing you down at someone so hopefully a useful overview",
    "start": "2626980",
    "end": "2634930"
  },
  {
    "text": "of how to build applications and some best practices that we've learnt over the years in terms of doing so and",
    "start": "2634930",
    "end": "2641290"
  },
  {
    "text": "that's all for me I think thank you very much",
    "start": "2641290",
    "end": "2644700"
  }
]