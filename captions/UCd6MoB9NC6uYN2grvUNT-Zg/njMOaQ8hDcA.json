[
  {
    "text": "okay hey we're live good so just to get the record straight before we get started this is web 307 we are not",
    "start": "880",
    "end": "8080"
  },
  {
    "text": "giving away fir phones in this session and we are not talking about Docker okay",
    "start": "8080",
    "end": "13599"
  },
  {
    "text": "just just so everyone knows uh but what we are talking about is offs Works which",
    "start": "13599",
    "end": "18840"
  },
  {
    "text": "is at least as cool as those two things combined combined yeah so I'm Cliff",
    "start": "18840",
    "end": "24560"
  },
  {
    "text": "McCollum this is Jonathan Quail we're from Phils okay and I'm going to tell you a little bit about",
    "start": "24560",
    "end": "30640"
  },
  {
    "text": "about uh who we are and some background and then I'm going to turn the time over",
    "start": "30640",
    "end": "36000"
  },
  {
    "text": "to Jonathan who will give you the nitty-gritty and some of the details and then we'll cycle back to me for a bit of",
    "start": "36000",
    "end": "41200"
  },
  {
    "text": "a wrapup so we'll sort of bookend it that way",
    "start": "41200",
    "end": "47160"
  },
  {
    "text": "so who is Phils what do we do this is only important so that you sort of understand the the problem and where",
    "start": "47160",
    "end": "54199"
  },
  {
    "text": "we've come at it from so we're owned by a books which is actually an Amazon company okay so we are part of",
    "start": "54199",
    "end": "61800"
  },
  {
    "text": "Amazon and Phils is a multi Marketplace order listing tool so that if you're a",
    "start": "61800",
    "end": "68240"
  },
  {
    "text": "seller and you want to list things on eBay and all the Amazon and abooks and half.com you list them through us we",
    "start": "68240",
    "end": "75720"
  },
  {
    "text": "list them everywhere else okay uh we're also a big repricing system so that we",
    "start": "75720",
    "end": "80799"
  },
  {
    "text": "can change prices for those offers and just to put some scale on it we we change the price on roughly 260 to 300",
    "start": "80799",
    "end": "89200"
  },
  {
    "text": "million items a day so that's that's kind of the size of what we're talking about we have about 160 servers uh",
    "start": "89200",
    "end": "96439"
  },
  {
    "text": "running in AWS as part of our production Fleet so you get a sort of a sense of",
    "start": "96439",
    "end": "101520"
  },
  {
    "text": "size for what we're doing so let's give you a little bit of",
    "start": "101520",
    "end": "107159"
  },
  {
    "text": "background because what we know about opsworks we learned through the process of migrating from a collocation facility",
    "start": "107159",
    "end": "114960"
  },
  {
    "text": "into public AWS so we for the longest time were",
    "start": "114960",
    "end": "120000"
  },
  {
    "text": "running in a collocation facility which meant that we were leasing Hardware they were the hands on the ground and when we",
    "start": "120000",
    "end": "126479"
  },
  {
    "text": "had problems they did the work for us but we were responsible for the hardware itself and that that created some",
    "start": "126479",
    "end": "133400"
  },
  {
    "text": "interesting problems uh certainly one of which was there was operational load uh",
    "start": "133400",
    "end": "138760"
  },
  {
    "text": "with keeping those servers and making them work uh for example if we needed new",
    "start": "138760",
    "end": "143879"
  },
  {
    "text": "servers it would take a couple days to get one uh set out for us and then it would take us a couple hours to",
    "start": "143879",
    "end": "149440"
  },
  {
    "text": "provision them because our provisioning was pretty manual and we would get these kinds of",
    "start": "149440",
    "end": "156680"
  },
  {
    "text": "things okay so you'd get an alert telling you hey the battery in your RAID controller is dead and or your disc is",
    "start": "156680",
    "end": "163000"
  },
  {
    "text": "failed and the container needs to be restriped you know these kinds of things and we would get them and we could call",
    "start": "163000",
    "end": "168959"
  },
  {
    "text": "them and they would do the work but we would have to schedule it with customers it created downtime it created headache",
    "start": "168959",
    "end": "174599"
  },
  {
    "text": "for us and I can tell you that people like Jonathan and others on my team uh",
    "start": "174599",
    "end": "179920"
  },
  {
    "text": "would always Grumble when they came into work in the morning and say hey I got woke up at 3 o'cl because a CR",
    "start": "179920",
    "end": "185799"
  },
  {
    "text": "20325 Cent battery died last night okay nobody wants this to happen so we we",
    "start": "185799",
    "end": "193120"
  },
  {
    "text": "wanted to get rid of some of these so we moved into AWS I'm going to",
    "start": "193120",
    "end": "199680"
  },
  {
    "text": "go through that migration quickly and then Jonathan will give you the details of of what we learned in that process",
    "start": "199680",
    "end": "206040"
  },
  {
    "text": "but in the in the keynote you heard uh Andy talk about sort of patterns of migration and we tended to follow those",
    "start": "206040",
    "end": "213879"
  },
  {
    "text": "patterns fairly closely ourselves one of the first things we did through this move is we looked at all our",
    "start": "213879",
    "end": "219640"
  },
  {
    "text": "infrastructure pieces that existed in AWS and we didn't really need to own so",
    "start": "219640",
    "end": "226439"
  },
  {
    "text": "these were pretty easy to move so these were things like email we could tear down our email servers we could use sces",
    "start": "226439",
    "end": "232959"
  },
  {
    "text": "we could replace our our messaging systems with sqs uh we replaced a fairly complex",
    "start": "232959",
    "end": "239920"
  },
  {
    "text": "replication and backup system around my SQL with multi-az RDS instances and so",
    "start": "239920",
    "end": "246079"
  },
  {
    "text": "all of these things we just said there's a there's a version of this na AWS let's just use it instead and that that gave",
    "start": "246079",
    "end": "252799"
  },
  {
    "text": "us an easy way to get some quick wins when we switched to Splunk for all our logs we deployed it entirely in AWS",
    "start": "252799",
    "end": "261239"
  },
  {
    "text": "and we sent all our logs from our Colo facility up to AWS so that that gave us a bit of",
    "start": "261239",
    "end": "268000"
  },
  {
    "text": "exercise uh in some of what we were doing and then we made the decision that any new service would be built and",
    "start": "268000",
    "end": "274120"
  },
  {
    "text": "deployed entirely in AWS and so for quite some time we had production load",
    "start": "274120",
    "end": "280280"
  },
  {
    "text": "running in a Colo facility and production load running in AWS working together with microservices that's the",
    "start": "280280",
    "end": "287479"
  },
  {
    "text": "new hot term I understand um with microservices running in AWS and the",
    "start": "287479",
    "end": "293000"
  },
  {
    "text": "rest of our Legacy system running in the Colo facility so this this gave us a chance",
    "start": "293000",
    "end": "298919"
  },
  {
    "text": "to sort out aot lot of problems a lot of tooling a lot of automation early on with systems that were pretty backend",
    "start": "298919",
    "end": "304919"
  },
  {
    "text": "and that we could sort of insulate our customers from the other thing we did is our",
    "start": "304919",
    "end": "310960"
  },
  {
    "text": "system was sort of a hodgepodge of versions of Debian for the most part and",
    "start": "310960",
    "end": "316280"
  },
  {
    "text": "we made the decision when we moved into AWS that we were going to use Amazon Linux okay uh I'm not going to try and",
    "start": "316280",
    "end": "323199"
  },
  {
    "text": "convince you that that was the right decision necessarily but it's the one we made we had good reasons for it we",
    "start": "323199",
    "end": "328880"
  },
  {
    "text": "wanted Amazon Linux and you can't run that outside of ec2 but it's a fairly",
    "start": "328880",
    "end": "334360"
  },
  {
    "text": "close relative to SOS and so we ported all our code to be Centos compatible so",
    "start": "334360",
    "end": "340720"
  },
  {
    "text": "that when we did move to Amazon Linux it was it was a lot less bumpy and that was that was an easy thing to be able to do",
    "start": "340720",
    "end": "346680"
  },
  {
    "text": "in our Colo facility is to sort of take that first step so that the move to Amazon Linux wasn't a big monolithic",
    "start": "346680",
    "end": "354479"
  },
  {
    "text": "jump and then for configuration we actually moved to Chef and we did this intentional because we knew that opsw",
    "start": "354520",
    "end": "362000"
  },
  {
    "text": "works was something we were going to want to use we knew it was Chef based and that that team had made that",
    "start": "362000",
    "end": "367919"
  },
  {
    "text": "decision and we figured they knew something about what made sense so we decided to do the same thing and we",
    "start": "367919",
    "end": "374039"
  },
  {
    "text": "brought Chef servers up ourselves and we began using Chef for all the configuration in our collocation",
    "start": "374039",
    "end": "381520"
  },
  {
    "text": "facility and in all of the things we were doing in AWS I described previously",
    "start": "381520",
    "end": "386880"
  },
  {
    "text": "so that let us automate uh many things like our deployments our configurations uh managing dependencies",
    "start": "386880",
    "end": "394080"
  },
  {
    "text": "and we even used it for managing users on some of these machines for things that didn't fit into",
    "start": "394080",
    "end": "400080"
  },
  {
    "text": "the chef mold like uh you know running disc cleanup or running checks and things like that then we use fabric for",
    "start": "400080",
    "end": "407560"
  },
  {
    "text": "those and those two tools actually augment one another quite nicely in our",
    "start": "407560",
    "end": "413280"
  },
  {
    "text": "experience uh security and networking this is something you'll want if you're sort of doing this migration yourself",
    "start": "413280",
    "end": "419800"
  },
  {
    "text": "you want to think a lot about this one for us the big decision was that we decided to go into VPC right away if you",
    "start": "419800",
    "end": "427080"
  },
  {
    "text": "create a new AWS account today uh I think VPC Is What You Get by default now",
    "start": "427080",
    "end": "432960"
  },
  {
    "text": "so I don't even know if you can choose not to use it I we made the decision so long ago we're just always in VPC",
    "start": "432960",
    "end": "440280"
  },
  {
    "text": "now and some thinking around security groups and IM roles the more thought you",
    "start": "440280",
    "end": "445599"
  },
  {
    "text": "put into here up front the better the more it will pay off down the road",
    "start": "445599",
    "end": "451520"
  },
  {
    "text": "this was another interesting piece is uh moving into AWS does require some change in mindset uh our systems used to be",
    "start": "452520",
    "end": "460160"
  },
  {
    "text": "designed kind of like this right where you had a bunch of pieces and they sort of you know were a little redundant All",
    "start": "460160",
    "end": "467400"
  },
  {
    "text": "in One Big Blob and they did a bunch of different things and you've sort of seen the Legacy stack you've all worked on",
    "start": "467400",
    "end": "472759"
  },
  {
    "text": "one of these I'm sure and when you move into AWS you kind of want to think of the world like this right where you have",
    "start": "472759",
    "end": "478759"
  },
  {
    "text": "one thing and it does it really nicely and cleanly and this is that funky",
    "start": "478759",
    "end": "484599"
  },
  {
    "text": "microservices term you hear so you want to start thinking like this it's just if",
    "start": "484599",
    "end": "489680"
  },
  {
    "text": "you're going to go into AWS treat it as more than ec2 I guess was sort of what we learned as we went",
    "start": "489680",
    "end": "495240"
  },
  {
    "text": "along so when we did the big move so we had everything ready we got ready for",
    "start": "495240",
    "end": "500800"
  },
  {
    "text": "the move we didn't want customers to know that we were doing this at all luckily we were in a Colo facility where",
    "start": "500800",
    "end": "506840"
  },
  {
    "text": "we could activate Direct Connect so we brought a direct connect link up into our VPC and then we were uh lucky enough at",
    "start": "506840",
    "end": "515039"
  },
  {
    "text": "that point to actually be able to move our servers one at a time into ec2 and",
    "start": "515039",
    "end": "520518"
  },
  {
    "text": "nobody knew we just sort of scheduled a little bit of time we took the server down thankfully we had chef and all that",
    "start": "520519",
    "end": "526839"
  },
  {
    "text": "automation ready to go so we took a server down and then we automatically brought it up in ec2 with some scripts",
    "start": "526839",
    "end": "533080"
  },
  {
    "text": "we wrote to do data migration and we you know myself and a bunch of other developers in the team would just bite",
    "start": "533080",
    "end": "539040"
  },
  {
    "text": "these things off and we would do them sort of five or 10 a day uh usually after close of business we just run",
    "start": "539040",
    "end": "545160"
  },
  {
    "text": "through a few of them then we'd all go home and we' do it again the next day and just slowly move all our servers",
    "start": "545160",
    "end": "550200"
  },
  {
    "text": "through once they were all migrated we could take down that Direct Connect link so it was really great because our prod",
    "start": "550200",
    "end": "556839"
  },
  {
    "text": "was like was scattered slowly moving its way into",
    "start": "556839",
    "end": "563040"
  },
  {
    "text": "ec2 so what I'd like to do now is turn time over to Jonathan Quail he's one of the",
    "start": "563360",
    "end": "569480"
  },
  {
    "text": "software developers on the team uh he's also sort of our head Cloud ninja and the guy who knows Chef better than",
    "start": "569480",
    "end": "575320"
  },
  {
    "text": "anyone else on our team does and he's going to walk through the details and some of the tools and techniques that we",
    "start": "575320",
    "end": "581000"
  },
  {
    "text": "built and uh there's a lot of value there",
    "start": "581000",
    "end": "585760"
  },
  {
    "text": "so thanks Cliff so opsw Works obviously which is",
    "start": "586519",
    "end": "591600"
  },
  {
    "text": "why you're all here so we switch to move to Ops works for all of our systems you might be asking what is OPS",
    "start": "591600",
    "end": "598440"
  },
  {
    "text": "works well if you look it up on the website it tells you that it's an application Management Service that makes it easy to deploy and operate",
    "start": "598440",
    "end": "605279"
  },
  {
    "text": "applications of all shapes and sizes that may not tell you that much so the real question is what is it what does it",
    "start": "605279",
    "end": "611839"
  },
  {
    "text": "actually do for you and what does it actually provide for you as a user of the",
    "start": "611839",
    "end": "617519"
  },
  {
    "text": "system so opsworks really provides you provisioning of your servers deployment uh modeling of your",
    "start": "617519",
    "end": "624200"
  },
  {
    "text": "infrastructure configuration management using Chef it provides Auto scaling load",
    "start": "624200",
    "end": "629360"
  },
  {
    "text": "based time based autoscaling access management so you can limit pseudo access or SSH access to your machines",
    "start": "629360",
    "end": "635959"
  },
  {
    "text": "distribute the keys automatically monitoring logging and resource management for uh elastic IPS and EBS",
    "start": "635959",
    "end": "643160"
  },
  {
    "text": "volumes and raid drives so Office Works is based on Chef",
    "start": "643160",
    "end": "650040"
  },
  {
    "text": "and Chef sort of the marketing term as Chef turns infrastructure into code really",
    "start": "650040",
    "end": "656040"
  },
  {
    "text": "it's just a de a declarative system a code that configures your OS packages your system configuration software",
    "start": "656040",
    "end": "663320"
  },
  {
    "text": "application deployments so the",
    "start": "663320",
    "end": "668680"
  },
  {
    "text": "configuring one thing that we decided when we moved to opsworks was that full stop every server that we manage is in",
    "start": "668680",
    "end": "677120"
  },
  {
    "text": "opsworks we didn't want to put anything else up there that wasn't part of that",
    "start": "677120",
    "end": "682279"
  },
  {
    "text": "system so don't give the temptation to just have that you know one special server that you figure it's not really",
    "start": "682279",
    "end": "688279"
  },
  {
    "text": "that important we could just put that outside of opsw works and create a cookbook for everything especially that",
    "start": "688279",
    "end": "694399"
  },
  {
    "text": "one little special server because you know that special server is probably going to die at 3:00 in the morning and you really don't want to have to",
    "start": "694399",
    "end": "700360"
  },
  {
    "text": "reconfigure that by hand even if you have all the steps documented in a Wiki and use Community cookbooks it's",
    "start": "700360",
    "end": "707560"
  },
  {
    "text": "really really important there are hundreds and thousands of cookbooks out there to configure systems that you're",
    "start": "707560",
    "end": "712920"
  },
  {
    "text": "probably already using like redus or rabbit mq or mcash postgress MySQL the",
    "start": "712920",
    "end": "718880"
  },
  {
    "text": "community has already created these cookbooks for you use them now when your systems are in opsw",
    "start": "718880",
    "end": "726320"
  },
  {
    "text": "Works they're all configured the same way and they're all configured using these recipes so you can easily clone",
    "start": "726320",
    "end": "732000"
  },
  {
    "text": "your system and move it from one account to another or maybe to one region or",
    "start": "732000",
    "end": "739360"
  },
  {
    "text": "another it's great for development and testing especially now if all your systems are",
    "start": "739519",
    "end": "745839"
  },
  {
    "text": "cloned and they all look identical who here has ever done something on a production machine thinking it was a",
    "start": "745839",
    "end": "751760"
  },
  {
    "text": "test machine okay so I'm the only one that wants to admit it okay so we wanted to make sure that it",
    "start": "751760",
    "end": "758480"
  },
  {
    "text": "was easy to identify what machine you were on when you logged into it so we just did a simple thing like set the SSH",
    "start": "758480",
    "end": "764959"
  },
  {
    "text": "prompt with colors and text on every machine when you log in so you know if you're in development or",
    "start": "764959",
    "end": "772279"
  },
  {
    "text": "production so that's what the production one looks like just red text at the bottom it's maybe it's not foolproof but",
    "start": "772600",
    "end": "778680"
  },
  {
    "text": "it gives us it's a really clear indicator when you log in where you are in your system so when I said that every system",
    "start": "778680",
    "end": "785920"
  },
  {
    "text": "we have is an opsworks I mean every system our Bastion hosts are in opsw Works our mail relays in opsw Works our",
    "start": "785920",
    "end": "791440"
  },
  {
    "text": "VPN servers are in opsw Works our natat instances application servers monitoring servers graphite dashboards even our",
    "start": "791440",
    "end": "798680"
  },
  {
    "text": "Splunk cluster every single one of them is part of an opsw work",
    "start": "798680",
    "end": "803880"
  },
  {
    "text": "stack we also use custom Amis they speed up deployment M",
    "start": "804160",
    "end": "809399"
  },
  {
    "text": "especially for any of those systems that have a lot of dependencies that you need to install that may take a long time to to spin",
    "start": "809399",
    "end": "815600"
  },
  {
    "text": "up it also provides a very consistent image for your systems in our case we",
    "start": "815600",
    "end": "820959"
  },
  {
    "text": "chose hvm based instances we wanted to have our instance ssds mounted on every",
    "start": "820959",
    "end": "826160"
  },
  {
    "text": "machine and we wanted to have it locked to a specific Amazon Linux release so 201403 or",
    "start": "826160",
    "end": "832519"
  },
  {
    "text": "20149 we use this base Amazon image for every single one of our servers that we",
    "start": "832519",
    "end": "838000"
  },
  {
    "text": "spin up so when we got on the machine we know that it has all of these attributes we actually use Packer for",
    "start": "838000",
    "end": "845160"
  },
  {
    "text": "this to create the Amis Packer is a hashicorp product same person that does a",
    "start": "845160",
    "end": "850759"
  },
  {
    "text": "vagrant I actually have an example up on that GitHub um all the sample code from this presentation is on there so on that",
    "start": "850759",
    "end": "857480"
  },
  {
    "text": "in that GitHub repo is a very basic Packer script or um example uh Json file",
    "start": "857480",
    "end": "864519"
  },
  {
    "text": "that will spin up a machine and um you can expand to that and add additional",
    "start": "864519",
    "end": "869800"
  },
  {
    "text": "or um shell scripts if you want to provision the machines with packages for",
    "start": "869800",
    "end": "875360"
  },
  {
    "text": "example another important part of opsworks is what they call life cycle",
    "start": "875360",
    "end": "880519"
  },
  {
    "text": "events so opsworks has a notion of life cycle events and if you're familiar with chef and a traditional Chef server",
    "start": "880519",
    "end": "886600"
  },
  {
    "text": "you'll know that every 30 minutes or whenever you configure Chef client runs on your machines and does all of the",
    "start": "886600",
    "end": "891759"
  },
  {
    "text": "recipes and does all the configuring opsworks doesn't quite work like that you actually set up a life",
    "start": "891759",
    "end": "897600"
  },
  {
    "text": "cycle event and you basic basically tag recipes to run at each of those points in the life cycle event so here's an",
    "start": "897600",
    "end": "904240"
  },
  {
    "text": "example of uh we'll walk through an example here of a life cycle event so you start your application server",
    "start": "904240",
    "end": "910839"
  },
  {
    "text": "opsworks will actually run a setup and a configure event so setup would be where",
    "start": "910839",
    "end": "916399"
  },
  {
    "text": "you'd want to install all your recipes or install your application software configure event would then run to set up",
    "start": "916399",
    "end": "922959"
  },
  {
    "text": "all the configuration files you then deploy your application to the server that's great so now you've got the",
    "start": "922959",
    "end": "929079"
  },
  {
    "text": "application running and then you realize well maybe I should have actually started a database to actually store my data so now you start up a database",
    "start": "929079",
    "end": "935079"
  },
  {
    "text": "server it runs setup it runs configure on that database server it also sends a configure event to your application",
    "start": "935079",
    "end": "941880"
  },
  {
    "text": "server to let it know where the database is now you deploy another version of",
    "start": "941880",
    "end": "947120"
  },
  {
    "text": "your application and you make it slow and now you need to deploy another application server in order to handle the load again setup is run and then",
    "start": "947120",
    "end": "954560"
  },
  {
    "text": "configure is run on all the other servers in order to let them know that there's a new machine avail",
    "start": "954560",
    "end": "960120"
  },
  {
    "text": "ailable and then you realize well I forgot to actually allow my operation staff to access the machine so you go",
    "start": "960120",
    "end": "966480"
  },
  {
    "text": "into opsworks you enable the SSH access to all of your operations staff and opsworks will automatically run a chain",
    "start": "966480",
    "end": "972880"
  },
  {
    "text": "user permissions command on all the machines add those local users and disposit their public keys on the",
    "start": "972880",
    "end": "978199"
  },
  {
    "text": "machine so now they can access it if you stop your machine it runs a",
    "start": "978199",
    "end": "983319"
  },
  {
    "text": "configure event on every other machine in the stack to let it know that that first machine is now disappeared",
    "start": "983319",
    "end": "990920"
  },
  {
    "text": "so cookbooks are basically a collection of recipes or instructions that you would",
    "start": "993519",
    "end": "998759"
  },
  {
    "text": "want to run on your machine in order to configure them so we chose to use a base cookbook that represents every single",
    "start": "998759",
    "end": "1005759"
  },
  {
    "text": "one of our machines so the reason for this is to install common components so in our case we run we install the Splunk",
    "start": "1005759",
    "end": "1012199"
  },
  {
    "text": "forwarder on every one of our machines and we also install that custom prompt that I mentioned",
    "start": "1012199",
    "end": "1019160"
  },
  {
    "text": "but really you can pretty much do anything else you want if you have any uh security policies for example you could configure those on every single",
    "start": "1019160",
    "end": "1026160"
  },
  {
    "text": "one of your machines or any sort of custom tooling that you want for all your machines you would do that in your base cookbook and then every machine",
    "start": "1026160",
    "end": "1032918"
  },
  {
    "text": "that you use W with will have all that software available so with the life cycle events",
    "start": "1032919",
    "end": "1040000"
  },
  {
    "text": "we've actually gone and this isn't just a preference that we had but we named all of the recipes for our cookbooks",
    "start": "1040000",
    "end": "1046600"
  },
  {
    "text": "with the life cycle event that they're for it was just easy when we're looking at the code to know that when you're looking at the setup recipe that that is",
    "start": "1046600",
    "end": "1052760"
  },
  {
    "text": "supposed to run on the setup event now opsworks has a really great",
    "start": "1052760",
    "end": "1059520"
  },
  {
    "text": "feature for allowing you to do deployments you can use the Management console you can use the sdks you can use",
    "start": "1059520",
    "end": "1067039"
  },
  {
    "text": "the CLI now the problem though is when you have an elastic load balancer so when",
    "start": "1067039",
    "end": "1074080"
  },
  {
    "text": "you have an elastic load balancer all your machines are behind it they're all receiving traffic if you were to shut",
    "start": "1074080",
    "end": "1080080"
  },
  {
    "text": "down an application on that server or your deployment fails for example",
    "start": "1080080",
    "end": "1085480"
  },
  {
    "text": "machines are actually still going to get traffic until the health check fails for the configured number of times and that",
    "start": "1085480",
    "end": "1090600"
  },
  {
    "text": "could be 30 seconds or 60 seconds whatever you set it to during that time your users of your system will get a 503",
    "start": "1090600",
    "end": "1097840"
  },
  {
    "text": "if they're directed to that server so it can be a bit of a",
    "start": "1097840",
    "end": "1103159"
  },
  {
    "text": "pain so really the process to deploy to an opsworks machine that's behind an",
    "start": "1103159",
    "end": "1108400"
  },
  {
    "text": "elastic load balancer is first remove it from the elastic load balancer then it stops receiving traffic deploy your",
    "start": "1108400",
    "end": "1115600"
  },
  {
    "text": "application restart the processes if you need to add it back to the elastic load",
    "start": "1115600",
    "end": "1121400"
  },
  {
    "text": "balancer and then wait for the instance to be online and wait for the load balcer to start directing traffic to",
    "start": "1121400",
    "end": "1127679"
  },
  {
    "text": "it it's kind of a pain to do that every single time in the UI or in the CLI",
    "start": "1127679",
    "end": "1133400"
  },
  {
    "text": "every time you want to do deployment so we wrote a tool to do this for us",
    "start": "1133400",
    "end": "1140399"
  },
  {
    "text": "we use this to automate our deployments to the machines in opsworks we can choose to deploy to all",
    "start": "1141280",
    "end": "1147679"
  },
  {
    "text": "of our instances in a layer all at the same time we can choose to deploy to all of our machines that are behind an",
    "start": "1147679",
    "end": "1153720"
  },
  {
    "text": "elastic load balancer and it will do it one at a time and if there's no elastic load bouncer on the layer it will just",
    "start": "1153720",
    "end": "1159240"
  },
  {
    "text": "do each of the machines one at a time if any of the deployments fail it will stop deploying to the rest of the",
    "start": "1159240",
    "end": "1165600"
  },
  {
    "text": "machines or you can just do it to specific machines if you want want a test for",
    "start": "1165600",
    "end": "1171399"
  },
  {
    "text": "example so let's take a look at what's what this actually looks like so this is the first command this is just doing a",
    "start": "1174120",
    "end": "1180360"
  },
  {
    "text": "deployment to a single host one and two just to test the",
    "start": "1180360",
    "end": "1186720"
  },
  {
    "text": "application now we're going to do a deployment to all the machines in the layer but we're going to exclude host",
    "start": "1186720",
    "end": "1192120"
  },
  {
    "text": "one and two because well we already deployed to them so they're already running the new",
    "start": "1192120",
    "end": "1197320"
  },
  {
    "text": "code now I'm going to do a roll-in deployment to all my machines behind the load balancer one at a",
    "start": "1197440",
    "end": "1204440"
  },
  {
    "text": "time so this tool was written in Python using botal core and click supports IM",
    "start": "1206960",
    "end": "1213280"
  },
  {
    "text": "roles if you're running it on your machine or if you're running it on an ec2 instance for example and it's open source so you can",
    "start": "1213280",
    "end": "1219880"
  },
  {
    "text": "go try it out it's not that GitHub repo so monitoring your machines is also",
    "start": "1219880",
    "end": "1226400"
  },
  {
    "text": "really important when you're in opsworks or in AWS in general so what makes a good",
    "start": "1226400",
    "end": "1233159"
  },
  {
    "text": "alarm well it better be timely because I really don't want to get woken up at 2",
    "start": "1233159",
    "end": "1238240"
  },
  {
    "text": "o'clock in the morning because some batch job on some server that sends an email to the business department kind of",
    "start": "1238240",
    "end": "1244000"
  },
  {
    "text": "failed and they don't actually read that until 10: a.m. after they've had their coffee so make sure that when somebody",
    "start": "1244000",
    "end": "1250280"
  },
  {
    "text": "gets alerted in the middle of the night that it's actually relevant and important at that time of the",
    "start": "1250280",
    "end": "1255880"
  },
  {
    "text": "night also make sure it's actionable if something pages and then Auto recovers",
    "start": "1255880",
    "end": "1261080"
  },
  {
    "text": "right after that's really annoying and also just make sure it's",
    "start": "1261080",
    "end": "1266600"
  },
  {
    "text": "necessary if you have 30 machines behind an elastic load balancer and one of them dies I hope you're not running your",
    "start": "1266600",
    "end": "1273159"
  },
  {
    "text": "elastic load balancer so hot that one machine is now going to take out your infrastructure it's probably not even important to to even alert your on call",
    "start": "1273159",
    "end": "1279880"
  },
  {
    "text": "staff might as well just send an email to your Ops Team and then have them deal with it at 9:00 a.m. when they get into",
    "start": "1279880",
    "end": "1285120"
  },
  {
    "text": "work so to do our monitoring we actually use",
    "start": "1285120",
    "end": "1290799"
  },
  {
    "text": "nagios and Page Duty everybody love nagios here okay a couple I'm",
    "start": "1290799",
    "end": "1299279"
  },
  {
    "text": "sorry so nagios can be a bit of a pain to configure if anybody's actually",
    "start": "1299279",
    "end": "1304720"
  },
  {
    "text": "configured it by hand before so opsworks allows this to be really actually quite",
    "start": "1304720",
    "end": "1310159"
  },
  {
    "text": "easy it's kept up to date when the opsw workk stacks are kept up to date with all the life cycle events so we actually",
    "start": "1310159",
    "end": "1315880"
  },
  {
    "text": "run one neio server per stack so each layer in an opsw stack is",
    "start": "1315880",
    "end": "1322640"
  },
  {
    "text": "actually considered a host group in negos if you're familiar with how negos operates we actually also make every",
    "start": "1322640",
    "end": "1328360"
  },
  {
    "text": "availability Zone also a host group and the reason for that is that if I'm looking at my nagas dashboard and all of",
    "start": "1328360",
    "end": "1334640"
  },
  {
    "text": "my machines in one availability zone are red it's a pretty good indication that it's not just my application it's",
    "start": "1334640",
    "end": "1340080"
  },
  {
    "text": "probably the entire availability Zone and we've hooked up nagios to notify with pag Duty",
    "start": "1340080",
    "end": "1348880"
  },
  {
    "text": "so it would be great if NEOS just automatically knew when all of your instances came online and came offline",
    "start": "1353039",
    "end": "1359039"
  },
  {
    "text": "especially if you're familiar with running Chef server with that every 30 minute you add a new server it takes 30",
    "start": "1359039",
    "end": "1365600"
  },
  {
    "text": "minutes to be monitored or if you remove a server and then it Pages you for 29 minutes and 20 and 30 seconds because",
    "start": "1365600",
    "end": "1372480"
  },
  {
    "text": "you're just between Chef runs so let's take a look at some code on how you would actually use this with",
    "start": "1372480",
    "end": "1378520"
  },
  {
    "text": "with opsw work's life cycle events so here is",
    "start": "1378520",
    "end": "1385799"
  },
  {
    "text": "just using Chef search which with opsworks actually will basically query",
    "start": "1385799",
    "end": "1391799"
  },
  {
    "text": "the opsworks stack and get you all the instances of all the machines so we're just going to use a",
    "start": "1391799",
    "end": "1397840"
  },
  {
    "text": "simple search syntax to get all of the nodes and all of the layers if you wanted to get just a",
    "start": "1397840",
    "end": "1403720"
  },
  {
    "text": "specific layer you would just replace the asterisk with the layer name",
    "start": "1403720",
    "end": "1409559"
  },
  {
    "text": "so once we have all of the instances we're just going to Loop through every uh all the layers that",
    "start": "1409640",
    "end": "1416039"
  },
  {
    "text": "each of the machines are in because machines can be in more than one layer and add them to the list of the host groups then we're going to add the",
    "start": "1416039",
    "end": "1421720"
  },
  {
    "text": "availability Zone to the host groups as well and then we have a list of all the hosts and all the host groups as we go",
    "start": "1421720",
    "end": "1428120"
  },
  {
    "text": "through this list and then we just use Chef to write out the configuration file for the host",
    "start": "1428120",
    "end": "1434840"
  },
  {
    "text": "groups and then use Chef again to write out the configuration file for for the hosts and in both cases if the if it",
    "start": "1434840",
    "end": "1441720"
  },
  {
    "text": "actually changes the file it will restart NEOS for",
    "start": "1441720",
    "end": "1446158"
  },
  {
    "text": "us so now every time that I add a machine or remove a machine from my offs",
    "start": "1447080",
    "end": "1452640"
  },
  {
    "text": "work stack the life cycle events automatically update NEOS restart NEOS and I don't have to worry about going to",
    "start": "1452640",
    "end": "1459400"
  },
  {
    "text": "manually doing it myself and that sample code there is",
    "start": "1459400",
    "end": "1464640"
  },
  {
    "text": "also available on GitHub in addition to NEOS we also use cloud watch so we have elastic Lo",
    "start": "1464640",
    "end": "1472159"
  },
  {
    "text": "balancer alarms on the healthy host count so we don't generally put them on",
    "start": "1472159",
    "end": "1477440"
  },
  {
    "text": "specific hosts we try to look at it at a uh elastic load balancer level as opposed to individual hosts whenever",
    "start": "1477440",
    "end": "1484919"
  },
  {
    "text": "possible so make sure that when you actually use health checks for elastic load balancers that you test more than",
    "start": "1484919",
    "end": "1491480"
  },
  {
    "text": "just you know is the server returning 200 okay so you can also test connections on dependent Services",
    "start": "1491480",
    "end": "1497960"
  },
  {
    "text": "however you have to be careful on this is that if you actually test a dependent service and all of your machines behind",
    "start": "1497960",
    "end": "1503240"
  },
  {
    "text": "your load balancer have a health check to tests the same dependent service you may cause all of your machines to fall",
    "start": "1503240",
    "end": "1509000"
  },
  {
    "text": "out if that one service goes down so it's important to to think carefully",
    "start": "1509000",
    "end": "1514399"
  },
  {
    "text": "about what you're testing and if it's happens to spread across more than just that one machine it could potentially",
    "start": "1514399",
    "end": "1520960"
  },
  {
    "text": "cause a larger disruption if that service goes down so use this responsibly but it is important to to",
    "start": "1520960",
    "end": "1527080"
  },
  {
    "text": "test more than just is is the server actually returning a 200 okay especially if you've got an application server like",
    "start": "1527080",
    "end": "1533279"
  },
  {
    "text": "enginex um you know fronting uh like a python app or something if you're testing an endpoint that doesn't",
    "start": "1533279",
    "end": "1539919"
  },
  {
    "text": "actually go to the python app then engine X might be up but the app might not be so just you have to be very",
    "start": "1539919",
    "end": "1545960"
  },
  {
    "text": "careful it's kind of an art to get the right health check but it's important to to consider that when you're doing",
    "start": "1545960",
    "end": "1552480"
  },
  {
    "text": "it so Amazon rout 53 is another great service that we use however it's not",
    "start": "1552480",
    "end": "1557840"
  },
  {
    "text": "just for DNS surprisingly um they have a great health check feature that you can",
    "start": "1557840",
    "end": "1562880"
  },
  {
    "text": "use so it basically acts like an external check on your infrastructure and they also offer",
    "start": "1562880",
    "end": "1568799"
  },
  {
    "text": "failover which is great especially if you want to set up that I guess it's popular term now is the fail well",
    "start": "1568799",
    "end": "1574399"
  },
  {
    "text": "website so you put up a static website an S3 S3 website bucket and then you'd set up an rout 53 failover so that if",
    "start": "1574399",
    "end": "1581799"
  },
  {
    "text": "your application goes down it will automatically send all traffic to that static website will you fix the issue",
    "start": "1581799",
    "end": "1587440"
  },
  {
    "text": "and get your application back up so in addition to monitoring you also",
    "start": "1587440",
    "end": "1593880"
  },
  {
    "text": "want to look at your logs in our case all of our servers send logs to Splunk we use Splunk to also trigger",
    "start": "1593880",
    "end": "1600919"
  },
  {
    "text": "alarms on patterns specific entries things like that the great thing about the Splunk alarms is that they support a",
    "start": "1600919",
    "end": "1607760"
  },
  {
    "text": "lot of integration like page Duty or email and many many other tools in fact you can actually specify any arbitrary",
    "start": "1607760",
    "end": "1614679"
  },
  {
    "text": "script to run when an alarm is triggered in Splunk so for for example you could",
    "start": "1614679",
    "end": "1619799"
  },
  {
    "text": "make it put a message in an SNS topic that then goes to a queue and has a process that would actually trigger an",
    "start": "1619799",
    "end": "1625679"
  },
  {
    "text": "opsworks operation to act on your behalf so for example if you're seeing something in your application log that",
    "start": "1625679",
    "end": "1632000"
  },
  {
    "text": "indicates that you need to increase capacity you can make an opsworks API call that operates when that happens to",
    "start": "1632000",
    "end": "1638720"
  },
  {
    "text": "add capacity to your system we also use opsworks or for",
    "start": "1638720",
    "end": "1643880"
  },
  {
    "text": "Splunk for doing dashboards as well because they offer really really powerful dashboarding features",
    "start": "1643880",
    "end": "1648919"
  },
  {
    "text": "especially when you can extract response times from your web logs and you can actually log those and dash and uh graph",
    "start": "1648919",
    "end": "1656840"
  },
  {
    "text": "those now everyone loves to patch their machines right",
    "start": "1657279",
    "end": "1663799"
  },
  {
    "text": "no so Amazon Linux has updates that happen about twice a year they release a new major",
    "start": "1663799",
    "end": "1670279"
  },
  {
    "text": "version of Amazon Linux so 201403 20149 for example it's essentially an in",
    "start": "1670279",
    "end": "1676559"
  },
  {
    "text": "placeplace upgrade you can think of it as a an Ami as a snapshot in",
    "start": "1676559",
    "end": "1682120"
  },
  {
    "text": "time so opsworks actually provides a great command to handle updating Amazon Linux to the new version to switch from",
    "start": "1682120",
    "end": "1688919"
  },
  {
    "text": "say 201403 to 20149 to apply the updates you would",
    "start": "1688919",
    "end": "1695320"
  },
  {
    "text": "just run the update dependencies command in the ops's UI or through the command",
    "start": "1695320",
    "end": "1700919"
  },
  {
    "text": "line and if you're depending on which OS you're running so if you're running Amazon Linux for example it will run a",
    "start": "1700919",
    "end": "1706559"
  },
  {
    "text": "yum update on all on your machine machine as automatically as part of the update dependencies if you're running a",
    "start": "1706559",
    "end": "1711880"
  },
  {
    "text": "buntu it'll do an apt get on Amazon Linux if you provide",
    "start": "1711880",
    "end": "1717679"
  },
  {
    "text": "custom Json to the command it will actually reboot the machine if the kernel was",
    "start": "1717679",
    "end": "1723760"
  },
  {
    "text": "updated so and you can also use it to update the next major release now I've got a asterisk in there do not do this",
    "start": "1723840",
    "end": "1730720"
  },
  {
    "text": "until opsw supports the new release so just make sure that they support that new release before you do it yourself",
    "start": "1730720",
    "end": "1739159"
  },
  {
    "text": "so applying updates so you really have to do that the same way like you'd have to go and",
    "start": "1739159",
    "end": "1746279"
  },
  {
    "text": "do that manually in the opsworks console or in the command line interface and pick your machine and update",
    "start": "1746279",
    "end": "1751720"
  },
  {
    "text": "dependencies and you're good to go but then you've got that whole problem with the elastic load balancer",
    "start": "1751720",
    "end": "1757000"
  },
  {
    "text": "machines again that again it's just like deploying you have to take out of the load balancer update it put it back in",
    "start": "1757000",
    "end": "1762880"
  },
  {
    "text": "go on to the next one rinse repeat so that deployment",
    "start": "1762880",
    "end": "1768679"
  },
  {
    "text": "tool it also does",
    "start": "1768679",
    "end": "1772398"
  },
  {
    "text": "patching so just like the deployments you can apply all the patches to all the",
    "start": "1774159",
    "end": "1779320"
  },
  {
    "text": "machines in a layer at the same time you can do it to all the instances behind an elastic load balancer again in a rolling",
    "start": "1779320",
    "end": "1786000"
  },
  {
    "text": "fashion one at a time and you can do it to specific machines just to test your patches for",
    "start": "1786000",
    "end": "1791279"
  },
  {
    "text": "example which I hope you all do and again you can exclude specific",
    "start": "1791279",
    "end": "1797200"
  },
  {
    "text": "machines and if you can provide a timeout so that if it takes too long to do an a patch when you're doing a",
    "start": "1797200",
    "end": "1802240"
  },
  {
    "text": "rolling fashion it'll stop and that part is also open source as",
    "start": "1802240",
    "end": "1808640"
  },
  {
    "text": "well so again let's look at some code see what it actually looks like so here we're doing an update of a",
    "start": "1808840",
    "end": "1817000"
  },
  {
    "text": "machine to Amazon Linux 20149 we're doing the allow reboots flag which means that it will actually pass",
    "start": "1817000",
    "end": "1823880"
  },
  {
    "text": "that custom Json to allow opsworks to reboot the machine when it's done",
    "start": "1823880",
    "end": "1829880"
  },
  {
    "text": "now we've got another example where we're just going to apply the latest op SSL vulnerability to all the machines in",
    "start": "1829960",
    "end": "1835720"
  },
  {
    "text": "a layer all at the same time now there's no need to restart the machines because it's not a kernel patch it's just an",
    "start": "1835720",
    "end": "1841440"
  },
  {
    "text": "open SSL package and again you can do a rolling fashion to do the same reboot or the",
    "start": "1841440",
    "end": "1847279"
  },
  {
    "text": "same uh patching across all your machines behind the",
    "start": "1847279",
    "end": "1851960"
  },
  {
    "text": "elb now Security in AWS and Ops works is also obviously very",
    "start": "1854440",
    "end": "1861000"
  },
  {
    "text": "important so because we operate in a VPC we run Bastion hosts it's important to",
    "start": "1861000",
    "end": "1867039"
  },
  {
    "text": "keep your Bastion host as lean as possible don't install any package on that machine that you don't",
    "start": "1867039",
    "end": "1872200"
  },
  {
    "text": "need and that should be extremely easy to just terminate them and rebuild them whenever you want and in fact you should",
    "start": "1872200",
    "end": "1879039"
  },
  {
    "text": "be running more than one probably two if not one in every availability",
    "start": "1879039",
    "end": "1884600"
  },
  {
    "text": "Zone and it's also important to have no credentials on the machine these these are your public endpoints to your entire",
    "start": "1884600",
    "end": "1890039"
  },
  {
    "text": "infrastructure so don't put anything on there that's secret so opsworks on their configure",
    "start": "1890039",
    "end": "1897799"
  },
  {
    "text": "life cycle event has a really unique feature that writes out um changes to a host's file so what happens is that every time",
    "start": "1897799",
    "end": "1905559"
  },
  {
    "text": "a configure event runs they write out all the machines that are in that stack to the hosts file with their private IP",
    "start": "1905559",
    "end": "1911720"
  },
  {
    "text": "it's almost like a poor man's DNS So within a stack you can reference machines by their host name not by their",
    "start": "1911720",
    "end": "1917600"
  },
  {
    "text": "private IP and every time a machine comes online goes offline changes IPS",
    "start": "1917600",
    "end": "1922720"
  },
  {
    "text": "for example if it has to be restarted it will update that file on all the other machines in the stack so that's great",
    "start": "1922720",
    "end": "1930559"
  },
  {
    "text": "inside one stack we operate many stacks and our basion hosts are in one stack but they don't know about the machines",
    "start": "1930559",
    "end": "1936799"
  },
  {
    "text": "in the other stack so we expanded that a bit to create a cookbook that would actually do",
    "start": "1936799",
    "end": "1943440"
  },
  {
    "text": "this and it would write out a mapping of the I stack name and host name to the",
    "start": "1943440",
    "end": "1948840"
  },
  {
    "text": "private IP of every machine in every stack that way when we log in the",
    "start": "1948840",
    "end": "1954440"
  },
  {
    "text": "Bastion host we just SSH through the Bastion host using the stack name and",
    "start": "1954440",
    "end": "1959559"
  },
  {
    "text": "the Machine name and we get right to the host that we want now you could use this on every machine for other purposes",
    "start": "1959559",
    "end": "1965399"
  },
  {
    "text": "Beyond just SSH you could actually use it as DNS across all your machines the problem is that you'll have to run the",
    "start": "1965399",
    "end": "1971679"
  },
  {
    "text": "script very frequently in order to catch updates because it's not it doesn't happen automatically across Stacks it",
    "start": "1971679",
    "end": "1976880"
  },
  {
    "text": "would just be sort of on a periodic basis so for example the GitHub repo has",
    "start": "1976880",
    "end": "1982880"
  },
  {
    "text": "a sample code has basically an entire cookbook that you can ED to do this right your infrastructure that one is set up I",
    "start": "1982880",
    "end": "1989320"
  },
  {
    "text": "Believe by default to do it every 15 minutes we haven't really found a need to update it more frequently than that",
    "start": "1989320",
    "end": "1994519"
  },
  {
    "text": "on our Bastion hosts but you could do it every five minutes every two minutes every one minute for example if you wanted it just depends on how frequently",
    "start": "1994519",
    "end": "2001600"
  },
  {
    "text": "you need that file updated on all your machines so you PC access like I said to",
    "start": "2001600",
    "end": "2009120"
  },
  {
    "text": "the Bastion hosts using the IM am cred the IM uh",
    "start": "2009120",
    "end": "2016080"
  },
  {
    "text": "user management within opsworks you can actually add your public key for all your IM users you basically import your user into into the opsworks console and",
    "start": "2016080",
    "end": "2023639"
  },
  {
    "text": "then you can attach your public key to your user and then when you grant SSH access to machine opsworks will",
    "start": "2023639",
    "end": "2030000"
  },
  {
    "text": "distribute that public key and create a user on the host for you for every machine that it's allowed",
    "start": "2030000",
    "end": "2035639"
  },
  {
    "text": "to so we use that along with our Bastion hosts to essentially do an SSH relay so",
    "start": "2035639",
    "end": "2042120"
  },
  {
    "text": "our Bastion hosts allow us to log in using our public key when we do that we",
    "start": "2042120",
    "end": "2047200"
  },
  {
    "text": "then use the SSH relay feature to Tunnel through that to another machine so our",
    "start": "2047200",
    "end": "2053240"
  },
  {
    "text": "basan hosts are our entry points they don't have our private key they have our public key I've got my private key on my",
    "start": "2053240",
    "end": "2059720"
  },
  {
    "text": "machine but I can use that to jump through to every other machine in my my infrastructure just by using that relay",
    "start": "2059720",
    "end": "2065398"
  },
  {
    "text": "because they all share the same public key all the way through we also use the same method but with",
    "start": "2065399",
    "end": "2070919"
  },
  {
    "text": "port Ford in to allow us to access internal services that aren't exposed publicly so in this particular case I'm",
    "start": "2070919",
    "end": "2078079"
  },
  {
    "text": "using my Bastion my Dev environment and I'm mapping my graphite server at Port 80 to my local host to Port 8000 so then",
    "start": "2078079",
    "end": "2085000"
  },
  {
    "text": "I open up my browser go to Port 8000 and I actually am seeing my graphite server that's inside my VPC and I can't see any",
    "start": "2085000",
    "end": "2091919"
  },
  {
    "text": "other way so as mentioned user management so",
    "start": "2091919",
    "end": "2097079"
  },
  {
    "text": "opss has this great thing where they put users on the machine and that's very",
    "start": "2097079",
    "end": "2102640"
  },
  {
    "text": "useful so I users in Ops Stacks are assigned only as needed so for example",
    "start": "2102640",
    "end": "2107839"
  },
  {
    "text": "if we have staff in our office that only needs access to specific Stacks or specific machines we can grant that",
    "start": "2107839",
    "end": "2114560"
  },
  {
    "text": "without having to expose them access to every other machine in every other stack and if you revoke a user in I or",
    "start": "2114560",
    "end": "2122240"
  },
  {
    "text": "in sorry in Ops Works they're immediately removed from all the hosts they'll actually trigger a life cycle event that will remove the machine the",
    "start": "2122240",
    "end": "2128680"
  },
  {
    "text": "users from the machines across all the",
    "start": "2128680",
    "end": "2133119"
  },
  {
    "text": "stacks so that works except when you have NEOS and other services like that that really need passwords and I don't",
    "start": "2134040",
    "end": "2141880"
  },
  {
    "text": "really want to run ldap I'm not sure how many people really really want to run LDA in their",
    "start": "2141880",
    "end": "2147079"
  },
  {
    "text": "system so you can use encrypted data bags to distribute the passwords using Chef now this is just a one example of",
    "start": "2147079",
    "end": "2154800"
  },
  {
    "text": "ways to do it that's on the uh uh the application management blog and there's lots of other examples out there as well",
    "start": "2154800",
    "end": "2161599"
  },
  {
    "text": "but that's one way you can use that to have encrypted passwords and then write them to a HT password file for example",
    "start": "2161599",
    "end": "2168480"
  },
  {
    "text": "for nagios as part of your",
    "start": "2168480",
    "end": "2172160"
  },
  {
    "text": "infrastructure and I will pass it back to",
    "start": "2173520",
    "end": "2177440"
  },
  {
    "text": "Cliff all right thanks so there's some there's some",
    "start": "2179359",
    "end": "2186560"
  },
  {
    "text": "lessons we learned along the way here and uh I I thought we'll summarize them this is this is pretty quick uh one of",
    "start": "2186560",
    "end": "2194119"
  },
  {
    "text": "the things to remember is machines will fail okay in fact uh machines fail in",
    "start": "2194119",
    "end": "2199880"
  },
  {
    "text": "ec2 more often in fact than they did in our collocation facility to be honest",
    "start": "2199880",
    "end": "2206160"
  },
  {
    "text": "okay but the fact is the the situation is not nearly as",
    "start": "2206160",
    "end": "2211240"
  },
  {
    "text": "painful okay because we can create machines automatically and we can create",
    "start": "2211240",
    "end": "2216800"
  },
  {
    "text": "them quickly so the fact that they fail is actually much less painful in ec2 with opsworks",
    "start": "2216800",
    "end": "2223160"
  },
  {
    "text": "than it ever was in our collocation facilities in addition opsworks offers",
    "start": "2223160",
    "end": "2229000"
  },
  {
    "text": "Auto healing which basically means they they hit a health check on the machine if it stops responding opsworks will",
    "start": "2229000",
    "end": "2235720"
  },
  {
    "text": "actually freeze the machine detach the EBS volumes take the machine down bring a new one up reattach the volume and",
    "start": "2235720",
    "end": "2242319"
  },
  {
    "text": "spin it back up again and uh away you go this is one of those you get an alert and by the time you kind of clear your",
    "start": "2242319",
    "end": "2249319"
  },
  {
    "text": "eyes and shake your head a little bit and look at it at 3 o' in the morning it's",
    "start": "2249319",
    "end": "2254559"
  },
  {
    "text": "fixed one of the one of the big lessons we've learned obviously is to create some tools and Jonathan's talked about",
    "start": "2255960",
    "end": "2261640"
  },
  {
    "text": "some of the tools we've created you've seen some of the tools Netflix has created everybody creates tools for",
    "start": "2261640",
    "end": "2267319"
  },
  {
    "text": "these things and for us the the big thing to remember is we don't want any",
    "start": "2267319",
    "end": "2273760"
  },
  {
    "text": "manual steps in our processes that we're not willing to do at 3:00 in the morning without",
    "start": "2273760",
    "end": "2279520"
  },
  {
    "text": "coffee so if it requires a manual step stick it in a script okay now sometimes",
    "start": "2279520",
    "end": "2284839"
  },
  {
    "text": "you can't get away from that in which case just document it really clearly and make sure your Ops teams can find the",
    "start": "2284839",
    "end": "2291720"
  },
  {
    "text": "particular problem at 3:00 in the morning we actually have a Wiki and every page or alert that can go off in",
    "start": "2291720",
    "end": "2298640"
  },
  {
    "text": "our system has a link to a page with the steps on what you do when that goes off",
    "start": "2298640",
    "end": "2303680"
  },
  {
    "text": "and any manual steps that might be involved so that early in the morning when you're barely paying attention you can kind of follow",
    "start": "2303680",
    "end": "2311519"
  },
  {
    "text": "along the other thing to note is that life cycle events Jonathan talked about those these can sometimes fail as well",
    "start": "2311960",
    "end": "2318920"
  },
  {
    "text": "okay uh and so you might have a machine that kind of comes partway up and just",
    "start": "2318920",
    "end": "2324319"
  },
  {
    "text": "chokes it doesn't happen very often in fact it happens quite rarely but when it",
    "start": "2324319",
    "end": "2329400"
  },
  {
    "text": "does you can find machines that are sort of half up and they're not really going to get any further so you want a way to",
    "start": "2329400",
    "end": "2336200"
  },
  {
    "text": "monitor the automation actions as well so these log files are some of the key",
    "start": "2336200",
    "end": "2341760"
  },
  {
    "text": "ones to pay attention to uh and you can use cloud watch uh for these it's it's a",
    "start": "2341760",
    "end": "2347560"
  },
  {
    "text": "nice Simple Solution you point Cloud watch at these logs you tell it if you see error or failure or any you know key",
    "start": "2347560",
    "end": "2354280"
  },
  {
    "text": "phrases you care about to send an alert and off you go now you can forget about",
    "start": "2354280",
    "end": "2359599"
  },
  {
    "text": "it and if a life cycle event does fail Cloud watch will let you know now you're probably going to have to intervene",
    "start": "2359599",
    "end": "2365760"
  },
  {
    "text": "manually but this does not happen very often so what are some of the outcomes",
    "start": "2365760",
    "end": "2372760"
  },
  {
    "text": "for us as a team uh I talked about moving from collocation to AWS and then",
    "start": "2372760",
    "end": "2378119"
  },
  {
    "text": "all the automation we did uh was it all worth it because it was certainly a big project for us uh and the answer",
    "start": "2378119",
    "end": "2385079"
  },
  {
    "text": "fortunately is yeah actually it's been really worth it uh before the move as I said it took us a couple days to get a",
    "start": "2385079",
    "end": "2391079"
  },
  {
    "text": "server it took us a couple hours to configure it by hand because we were still quite manual at the time today it",
    "start": "2391079",
    "end": "2398119"
  },
  {
    "text": "takes us about 25 minutes to deploy a new server and most of that is actually",
    "start": "2398119",
    "end": "2403400"
  },
  {
    "text": "just waiting okay we're not doing anything it's just you say go and 25 minutes later the server lets you know",
    "start": "2403400",
    "end": "2409800"
  },
  {
    "text": "it's up and it's running and it's ready and it's taking traffic uh software releases used to",
    "start": "2409800",
    "end": "2415520"
  },
  {
    "text": "take us a couple hours okay uh it was still somewhat automated but it took us a couple hours and that was customer",
    "start": "2415520",
    "end": "2422599"
  },
  {
    "text": "time software releases are now taking us about 2 minutes to deploy this a single",
    "start": "2422599",
    "end": "2427920"
  },
  {
    "text": "life cycle event grabs things from S3 puts them on the machines and away we",
    "start": "2427920",
    "end": "2433200"
  },
  {
    "text": "go and after hours alerts we're about six a week right think of those poor",
    "start": "2433200",
    "end": "2438960"
  },
  {
    "text": "people that's like every single day you get a truncated sleep cycle okay uh",
    "start": "2438960",
    "end": "2444920"
  },
  {
    "text": "we're now down where it's it's less than one a week and when they do go off they usually go off in pairs okay or",
    "start": "2444920",
    "end": "2451440"
  },
  {
    "text": "triplicate because sort of one thing fails and it Cascades a little bit no matter how hard you try you can't quite",
    "start": "2451440",
    "end": "2456920"
  },
  {
    "text": "tease them apart and so you sort of get multiple alerts so mathematically speaking we can go a number of weeks",
    "start": "2456920",
    "end": "2464000"
  },
  {
    "text": "often without any alerts now from the customer point of view uh",
    "start": "2464000",
    "end": "2469920"
  },
  {
    "text": "we used to have five hours of scheduled downtime a month and this was our software deployment cycle okay uh we now",
    "start": "2469920",
    "end": "2476480"
  },
  {
    "text": "have none no schedule downtime and we can deploy in minutes okay in seconds in",
    "start": "2476480",
    "end": "2483119"
  },
  {
    "text": "some cases and our software deployment rate used to be a couple times a month we now do a couple times a week uh to",
    "start": "2483119",
    "end": "2489800"
  },
  {
    "text": "our development environment we do multiple per day okay we just don't go any faster in production because that's",
    "start": "2489800",
    "end": "2496440"
  },
  {
    "text": "kind of the pace at which we're evolving things and we're not an e-commerce",
    "start": "2496440",
    "end": "2501520"
  },
  {
    "text": "website with massive AB testing you know going off hundreds of times a day it just doesn't make sense for us so we're",
    "start": "2501520",
    "end": "2508520"
  },
  {
    "text": "able to deploy twice a week now so it's it's been a big gain for us",
    "start": "2508520",
    "end": "2514800"
  },
  {
    "text": "opsworks is awesome okay uh uh I'm not trying to shill for it or anything but it's really it's really",
    "start": "2514800",
    "end": "2521240"
  },
  {
    "text": "made things better for us okay the automation piece is great and well there's a lot of interesting talk about",
    "start": "2521240",
    "end": "2527920"
  },
  {
    "text": "things like Docker and some of these other tools and to be honest uh when I hear these things I'm still trying to",
    "start": "2527920",
    "end": "2533640"
  },
  {
    "text": "figure out how they all fit together okay you know what does it mean uh now that there's you know support for Docker",
    "start": "2533640",
    "end": "2540480"
  },
  {
    "text": "but we've also got opsw works and we've got beanock I mean each one of these solves the problem in a slightly",
    "start": "2540480",
    "end": "2545559"
  },
  {
    "text": "different way and I think you need to understand understand which one fits the way you choose to work this works",
    "start": "2545559",
    "end": "2551960"
  },
  {
    "text": "terrific for us okay uh we will be out uh able to take any questions uh here or",
    "start": "2551960",
    "end": "2558400"
  },
  {
    "text": "out in the hallway uh if you'd like and uh this is a link to the various",
    "start": "2558400",
    "end": "2564079"
  },
  {
    "text": "resources that we've referenced here including a link to the GitHub site where a lot of this code is available",
    "start": "2564079",
    "end": "2570000"
  },
  {
    "text": "and by all means you're welcome to download it make use of it have fun with it and if you do have any questions I'm",
    "start": "2570000",
    "end": "2575680"
  },
  {
    "text": "sure you can find a way to get in touch with us and we'd be happy to talk about it so thanks for coming out your time is valuable and we appreciate it",
    "start": "2575680",
    "end": "2584558"
  }
]