[
  {
    "start": "0",
    "end": "129000"
  },
  {
    "text": "good evening everyone my name is Joe Sullivan ani I'm a manager with dynamo",
    "start": "30",
    "end": "6420"
  },
  {
    "text": "dB I'm responsible for the storage layer of dynamo DB which is where all your",
    "start": "6420",
    "end": "12179"
  },
  {
    "text": "data actually travels to and then comes back when you ask for it so I've been with the team for three and a half years",
    "start": "12179",
    "end": "19170"
  },
  {
    "text": "now and been involved in basically all the features that we we brought to you",
    "start": "19170",
    "end": "24779"
  },
  {
    "text": "over this time frame and yesterday we announced transactions today we",
    "start": "24779",
    "end": "30570"
  },
  {
    "text": "announced on-demand consumption for dynamo DB all of these our features we",
    "start": "30570",
    "end": "36540"
  },
  {
    "text": "are very very excited about and I'm here to tell you more about transactions so",
    "start": "36540",
    "end": "46550"
  },
  {
    "text": "that was me now about what we're gonna go over tonight is first what does acid",
    "start": "46879",
    "end": "55559"
  },
  {
    "text": "mean for dynamo dB you have an API you have a restful api that allows you to",
    "start": "55559",
    "end": "60840"
  },
  {
    "text": "get and store and set data what does acid mean in the context of no",
    "start": "60840",
    "end": "67590"
  },
  {
    "text": "sequel database such as dynamo DB and how does the transactional API changes",
    "start": "67590",
    "end": "72659"
  },
  {
    "text": "that picture and after we get introduced to the new API and kind of see how it",
    "start": "72659",
    "end": "79229"
  },
  {
    "text": "fits with the rest of the API that we have we're gonna go over use cases of using transactions with with the new API",
    "start": "79229",
    "end": "86700"
  },
  {
    "text": "and then we're gonna go over like important things that you need to know when you're integrating with this new",
    "start": "86700",
    "end": "92610"
  },
  {
    "text": "API how it works with the other features of dynamo DB and the things I'd like you",
    "start": "92610",
    "end": "99270"
  },
  {
    "text": "to take away from from this discussion is basically how does this API works how",
    "start": "99270",
    "end": "106170"
  },
  {
    "text": "it fits into our tenets of no sequel scale out database and what does the API",
    "start": "106170",
    "end": "112020"
  },
  {
    "text": "look like how you use it we're going to go over some design pattern that will show you like good good examples of how",
    "start": "112020",
    "end": "119340"
  },
  {
    "text": "to use it and basically also you also going to go out with the working",
    "start": "119340",
    "end": "125369"
  },
  {
    "text": "knowledge of how it interacts with other features and why all of this is",
    "start": "125369",
    "end": "131009"
  },
  {
    "start": "129000",
    "end": "129000"
  },
  {
    "text": "important we have basically two main reasons what",
    "start": "131009",
    "end": "136030"
  },
  {
    "text": "would you like to do with transactions what is the utility of that the first use case is pretty obvious you know you",
    "start": "136030",
    "end": "142810"
  },
  {
    "text": "have something transactional in the real world and you want to express it in your",
    "start": "142810",
    "end": "148570"
  },
  {
    "text": "code so you know the the most obvious example is financial transaction I want",
    "start": "148570",
    "end": "154210"
  },
  {
    "text": "to transfer some money from here to there that's a transaction or thing you want to implement it with the transactional",
    "start": "154210",
    "end": "159880"
  },
  {
    "text": "facility but you know there is also a lot of usage and we think possibly more",
    "start": "159880",
    "end": "166720"
  },
  {
    "text": "usage that is just related to how we implement a cloud application you have to store data in multiple locations you",
    "start": "166720",
    "end": "173560"
  },
  {
    "text": "have to you know put it here and here modify something here and delete something there all of that you can now",
    "start": "173560",
    "end": "179650"
  },
  {
    "text": "do with much greater ease with the transactional API the transactional API allows you to do things in a transaction",
    "start": "179650",
    "end": "187990"
  },
  {
    "text": "in with all-or-nothing semantics isolated from everything else that happens and that means that you don't",
    "start": "187990",
    "end": "194080"
  },
  {
    "text": "need to take care of all of the you know partial success and failures that you",
    "start": "194080",
    "end": "199390"
  },
  {
    "text": "could have otherwise when you issue multiple requests to DynamoDB so we go",
    "start": "199390",
    "end": "204970"
  },
  {
    "text": "over examples that show both of these use cases and so in order to kind of",
    "start": "204970",
    "end": "212380"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "benefit from this discussion I assume that you have some working knowledge of DynamoDB we will not go over some basic",
    "start": "212380",
    "end": "220560"
  },
  {
    "text": "concepts such as what are tables how do you index into tables what are streams time-to-live feature I",
    "start": "220560",
    "end": "228970"
  },
  {
    "text": "assume that you have some understanding of those I may go over them very briefly",
    "start": "228970",
    "end": "234840"
  },
  {
    "text": "ok so let's dive right into the the API and see what it looks like so we're",
    "start": "235140",
    "end": "241300"
  },
  {
    "text": "basically introducing two new API DH - transact write items and the other is",
    "start": "241300",
    "end": "247810"
  },
  {
    "text": "transact get items and as the names imply one effects changes and the other",
    "start": "247810",
    "end": "254410"
  },
  {
    "text": "allows you to read state transactionally so when we look at tranzact write items",
    "start": "254410",
    "end": "260320"
  },
  {
    "text": "it's limited to ten items these are basically items that you choose as the tarde",
    "start": "260320",
    "end": "265400"
  },
  {
    "text": "so your transaction now once you choose those items you have to decide what you want to do with them typically you want",
    "start": "265400",
    "end": "271760"
  },
  {
    "text": "to evaluate some state make sure that some some invariants are true about the things that you want to change once all",
    "start": "271760",
    "end": "278120"
  },
  {
    "text": "of the conditions that you specify are met all of the changes that you specify",
    "start": "278120",
    "end": "283699"
  },
  {
    "text": "in the request are going to be effected atomically completely isolated from",
    "start": "283699",
    "end": "288889"
  },
  {
    "text": "everything else that's happening in the system so that's basically how transact",
    "start": "288889",
    "end": "294740"
  },
  {
    "text": "right items work and transact items is similar you specify up to ten items that",
    "start": "294740",
    "end": "300979"
  },
  {
    "text": "you would like to atomically read and we will take care of giving you an atomic snapshot of these items okay so these",
    "start": "300979",
    "end": "308479"
  },
  {
    "text": "are very simple building blocks and that's what we're going to be working with all right so here we have a kind of",
    "start": "308479",
    "end": "316820"
  },
  {
    "start": "313000",
    "end": "313000"
  },
  {
    "text": "a comparison of what we had before all the API is in the lower row versus the",
    "start": "316820",
    "end": "323600"
  },
  {
    "text": "two new API is in the top row and then we also classify them basically into",
    "start": "323600",
    "end": "328639"
  },
  {
    "text": "non-transactional and transactional so let's look at the transactional column for for a second we have the two new API",
    "start": "328639",
    "end": "335780"
  },
  {
    "text": "strands aquariums and transact right items and then we also have existing ApS",
    "start": "335780",
    "end": "341599"
  },
  {
    "text": "that are also transactional data and put item update item in delete item all of",
    "start": "341599",
    "end": "347330"
  },
  {
    "text": "the singleton API is in dynamodb our transactional but they are transactional",
    "start": "347330",
    "end": "352340"
  },
  {
    "text": "in the context of a single item what does that mean it means that today using the API as you can read an item",
    "start": "352340",
    "end": "359949"
  },
  {
    "text": "evaluate a precondition on the item and then atomically store a new value in",
    "start": "359949",
    "end": "366050"
  },
  {
    "text": "everything that you would do in the context of a single item will be completely serializable and isolated",
    "start": "366050",
    "end": "371630"
  },
  {
    "text": "from everything else that you do atomicity means that everything that you do is all",
    "start": "371630",
    "end": "377870"
  },
  {
    "text": "or nothing if I read an item from dynamodb or write an item to dynamodb this always happens as a single unit of",
    "start": "377870",
    "end": "385760"
  },
  {
    "text": "work you will never see you know somebody change some key value pairs and somebody else some change some other key",
    "start": "385760",
    "end": "392000"
  },
  {
    "text": "value pair and you see a mix of that so you know atomicity and a consistency in isolation at the",
    "start": "392000",
    "end": "399659"
  },
  {
    "text": "item level we're always there what the new transaction line API brings into the",
    "start": "399659",
    "end": "405209"
  },
  {
    "text": "picture is that now you can do that for multiple items so instead of doing that one at a time you can now check the",
    "start": "405209",
    "end": "412259"
  },
  {
    "text": "state of multiple items and change them all together or none at all so if you compare that to",
    "start": "412259",
    "end": "420059"
  },
  {
    "text": "the batch API that we had before we still have them it's a batch gain item",
    "start": "420059",
    "end": "425219"
  },
  {
    "text": "and batch ride item these are also multi item operations however there are more",
    "start": "425219",
    "end": "430949"
  },
  {
    "text": "like macros over single item operations they're just basically about the efficiency of interacting with the",
    "start": "430949",
    "end": "436889"
  },
  {
    "text": "service so suppose you want to do multiple puts in the list you can group them together",
    "start": "436889",
    "end": "442050"
  },
  {
    "text": "in a batch right item and notice the singular term right it's a batch of right item requests and then the service",
    "start": "442050",
    "end": "450839"
  },
  {
    "text": "will basically work through the batch we'll do it in parallel so it doesn't take a lot of time and some of the",
    "start": "450839",
    "end": "457919"
  },
  {
    "text": "writes could succeed and some of the writes could fail because it's not transactional okay so you know suppose",
    "start": "457919",
    "end": "464159"
  },
  {
    "text": "you wanted to just load data into the database you would probably use batch right item because you can read rive",
    "start": "464159",
    "end": "471319"
  },
  {
    "text": "typically and you don't really need transactions for that but if you wanted",
    "start": "471319",
    "end": "476459"
  },
  {
    "text": "to let's say you know coordinate a change that must be consistent across two items that's when you would use the",
    "start": "476459",
    "end": "481829"
  },
  {
    "text": "transaction more API now when we look at query and scan these are also also multi",
    "start": "481829",
    "end": "488399"
  },
  {
    "text": "item operations they are not transactional you know when you query a",
    "start": "488399",
    "end": "494099"
  },
  {
    "text": "certain partition key you could get results that have been you know created",
    "start": "494099",
    "end": "500699"
  },
  {
    "text": "by concurrent transactions you always only read data that has been committed",
    "start": "500699",
    "end": "506189"
  },
  {
    "text": "and stable you never read dirty data but queries and scan basically give you some sort of a fuzzy read committed picture",
    "start": "506189",
    "end": "514138"
  },
  {
    "text": "of the database and again you know each individual item returned by query and",
    "start": "514139",
    "end": "519659"
  },
  {
    "text": "scan is always atomic with respect to who writes",
    "start": "519659",
    "end": "524628"
  },
  {
    "text": "okay so now after we talk about you know how does API is behave let's talk about",
    "start": "526310",
    "end": "534620"
  },
  {
    "text": "the scope to which you can apply the api's and one thing to know about the",
    "start": "534620",
    "end": "540379"
  },
  {
    "text": "write transaction trans actor at items is that you can apply it to any two items in your account they can be from",
    "start": "540379",
    "end": "547999"
  },
  {
    "text": "this different tables they can be from the same table they can be from the same partition key they can be across",
    "start": "547999",
    "end": "553819"
  },
  {
    "text": "different partition keys any items up to ten items in your account in the same",
    "start": "553819",
    "end": "559249"
  },
  {
    "text": "region you can transact using these api's and their scale characteristics are pretty",
    "start": "559249",
    "end": "565879"
  },
  {
    "text": "much like the rest of DynamoDB you can have limitless number of concurrent transactions it's a complete kind of",
    "start": "565879",
    "end": "572480"
  },
  {
    "text": "scale out architecture and the only thing that you basically have to worry about is to make sure that you don't",
    "start": "572480",
    "end": "578059"
  },
  {
    "text": "have hotkeys in your design that's not a good idea with our transactions because",
    "start": "578059",
    "end": "583999"
  },
  {
    "text": "when you are bottlenecked on a physical resource that has to basically take all",
    "start": "583999",
    "end": "589309"
  },
  {
    "text": "their all of your rights or all of you reads then you know you inevitably gonna",
    "start": "589309",
    "end": "594410"
  },
  {
    "text": "reach some scalability bottlenecks and that's doubly true for transactions you",
    "start": "594410",
    "end": "600170"
  },
  {
    "text": "know if you have multiple items that are hot inside the transaction it's very likely that it's going to collide with",
    "start": "600170",
    "end": "606589"
  },
  {
    "text": "other transaction transactions and that's not going to give you what you want so so basically you know it's",
    "start": "606589",
    "end": "614000"
  },
  {
    "text": "exactly the same design consideration that you have to worry about with transaction and on transactional design",
    "start": "614000",
    "end": "619850"
  },
  {
    "text": "in dynamodb ok so let's talk a little",
    "start": "619850",
    "end": "625970"
  },
  {
    "start": "624000",
    "end": "624000"
  },
  {
    "text": "bit about some of the design decisions that we've made and why we've made them",
    "start": "625970",
    "end": "631579"
  },
  {
    "text": "how they work towards achieving your goals so first thing like I said we",
    "start": "631579",
    "end": "636920"
  },
  {
    "text": "transact any items in your account why did we do that well basically dynamodb is a fully",
    "start": "636920",
    "end": "644269"
  },
  {
    "text": "managed database you don't have instances you don't have any resource",
    "start": "644269",
    "end": "649670"
  },
  {
    "text": "governance that you have to worry about now we have a list on demand and basically you can just go at it and put",
    "start": "649670",
    "end": "655819"
  },
  {
    "text": "your load on there on the database so when you think about it we just want",
    "start": "655819",
    "end": "661680"
  },
  {
    "text": "you to bring your data to DynamoDB scale it across this piece key space you can have practically limitless amount of",
    "start": "661680",
    "end": "668730"
  },
  {
    "text": "data now how you relate the data in your application is completely orthogonal to",
    "start": "668730",
    "end": "674790"
  },
  {
    "text": "how you the data is stored so that means that logically you may want to relate",
    "start": "674790",
    "end": "680160"
  },
  {
    "text": "any two items that are stored in DynamoDB right you know suppose you have a payment application you cannot predict",
    "start": "680160",
    "end": "686720"
  },
  {
    "text": "which two persons would want to transact with each other so similarly we allow",
    "start": "686720",
    "end": "691889"
  },
  {
    "text": "you to involve any two item in a transaction second thing is service API versus",
    "start": "691889",
    "end": "698370"
  },
  {
    "text": "client-side library so as many of you may know we have a client-side library already for transactions and we think",
    "start": "698370",
    "end": "705660"
  },
  {
    "text": "that the new service API is a great improvement relative to the existing",
    "start": "705660",
    "end": "711540"
  },
  {
    "text": "library and there are some obvious reasons you know you don't need to integrate with the library and it",
    "start": "711540",
    "end": "717180"
  },
  {
    "text": "simplifies your application but beyond that when you think about how transactions are implemented you know",
    "start": "717180",
    "end": "724050"
  },
  {
    "text": "eventually there is some sort of bookkeeping and the client library essentially moves all of the",
    "start": "724050",
    "end": "730079"
  },
  {
    "text": "responsibility to you in how it manages bookkeeping and if it you know doesn't",
    "start": "730079",
    "end": "736320"
  },
  {
    "text": "work as expected if it leaves locks abandoned then you eventually have to",
    "start": "736320",
    "end": "742470"
  },
  {
    "text": "take care of that so there's also operational overhead when you work with the library and finally and very",
    "start": "742470",
    "end": "749430"
  },
  {
    "text": "importantly there's also cost and performance implications because we implemented transactions close to the",
    "start": "749430",
    "end": "755310"
  },
  {
    "text": "data we can do that much more efficiently than is possible in the library so this is why we think that you",
    "start": "755310",
    "end": "761670"
  },
  {
    "text": "know this deserves a service API now when we look at that API it's a request",
    "start": "761670",
    "end": "767430"
  },
  {
    "text": "response based API if you've worked with sequel you are familiar with the session",
    "start": "767430",
    "end": "773910"
  },
  {
    "text": "conversation all based into our transactional model I tell the database begin transaction that transaction is",
    "start": "773910",
    "end": "781680"
  },
  {
    "text": "now active on my search on my session and I can query state and then I can",
    "start": "781680",
    "end": "786840"
  },
  {
    "text": "State and then I can review more state and set more state and eventually I can commit or abort",
    "start": "786840",
    "end": "792270"
  },
  {
    "text": "we have opted to implement something that is API based and is a request",
    "start": "792270",
    "end": "798420"
  },
  {
    "text": "response model so we've done that because that's the pattern that works",
    "start": "798420",
    "end": "803820"
  },
  {
    "text": "the best when you think of what no sequel really excels in what are the tenets of no sequel so the tenants are",
    "start": "803820",
    "end": "810450"
  },
  {
    "text": "your data is large your workload is well distributed across that data and you",
    "start": "810450",
    "end": "816870"
  },
  {
    "text": "want to get in in and out very very quickly so we don't want complex logic",
    "start": "816870",
    "end": "821970"
  },
  {
    "text": "in the transaction processing you need to in your application decide what are",
    "start": "821970",
    "end": "827070"
  },
  {
    "text": "the invariants and the state transitions that you want to affect and then you basically summarize that in a request",
    "start": "827070",
    "end": "832800"
  },
  {
    "text": "and you say I assume that the state of the world is X please change it to Y if it is still X and that means that the",
    "start": "832800",
    "end": "839910"
  },
  {
    "text": "database essentially contains almost no logic about why your application decides",
    "start": "839910",
    "end": "847440"
  },
  {
    "text": "to do certain state transitions the application logic stays with the application you only tell the database",
    "start": "847440",
    "end": "853410"
  },
  {
    "text": "if the state is such I want to move it to to this state so that allows you to",
    "start": "853410",
    "end": "858780"
  },
  {
    "text": "evolve your application and not bury all of that logic in the database finally",
    "start": "858780",
    "end": "865230"
  },
  {
    "text": "the limit of 10 items also was put in place to ensure exactly those tenets of",
    "start": "865230",
    "end": "871770"
  },
  {
    "text": "no sequel you want to get in and out quickly you want to make sure that everything has predictable performance",
    "start": "871770",
    "end": "877530"
  },
  {
    "text": "and predictable cost and we also found that you know pretty much all of these scenarios that we looked at that we're",
    "start": "877530",
    "end": "884160"
  },
  {
    "text": "good and no sequel representative workloads didn't really require more than 10 items you know it's not about",
    "start": "884160",
    "end": "890960"
  },
  {
    "text": "scanning a database and then changing something transactionally it you know and ten percent of the items for that",
    "start": "890960",
    "end": "898820"
  },
  {
    "text": "probably you want to do something that is not transactional in nature this is really about coordinating just a limited",
    "start": "898820",
    "end": "905910"
  },
  {
    "text": "amount of items okay so having introduced you to the API",
    "start": "905910",
    "end": "913800"
  },
  {
    "text": "let's go dive into some use cases so the first use case that we're going to talk about is a user profile management so",
    "start": "913800",
    "end": "922320"
  },
  {
    "start": "918000",
    "end": "918000"
  },
  {
    "text": "suppose you have a mobile app a web app and you you have a business constraint",
    "start": "922320",
    "end": "928590"
  },
  {
    "text": "that you wanna identify users with user names that's how you want them to register with your app that they choose",
    "start": "928590",
    "end": "935850"
  },
  {
    "text": "a user name that they choose and you also allow them optionally to specify an email and that email you know can also",
    "start": "935850",
    "end": "943260"
  },
  {
    "text": "be used to identify the user so you want to be kind of you know be able to say hey you know tell me you do your user",
    "start": "943260",
    "end": "949230"
  },
  {
    "text": "name or your user or your email and I will identify you with either one and",
    "start": "949230",
    "end": "955620"
  },
  {
    "text": "then we also add the scenario that we want to allow users to change their email if they choose to do so so what",
    "start": "955620",
    "end": "963630"
  },
  {
    "text": "we're going to be demonstrating is that with transactions you can now effectively enforce uniqueness",
    "start": "963630",
    "end": "969090"
  },
  {
    "text": "constraints across multiple fields you know not just on the partition key or",
    "start": "969090",
    "end": "974340"
  },
  {
    "text": "the primary key and you that allows you to also create materialized indexes",
    "start": "974340",
    "end": "980960"
  },
  {
    "text": "based on your choice of values and finally we will put basically both the",
    "start": "980960",
    "end": "989520"
  },
  {
    "text": "table that is indexed on the username and materialized index that is indexed",
    "start": "989520",
    "end": "995610"
  },
  {
    "text": "by the email we'll put both of them in the same dynamodb table so dynamic the",
    "start": "995610",
    "end": "1001490"
  },
  {
    "text": "bid table despite their names are just collections of items that share the same primary key you can have heterogeneous",
    "start": "1001490",
    "end": "1008470"
  },
  {
    "text": "items in your table and sometimes it's very under a chain advantageous to do so",
    "start": "1008470",
    "end": "1013790"
  },
  {
    "text": "and this example will show us why so here's an example of you know some",
    "start": "1013790",
    "end": "1020810"
  },
  {
    "text": "entities some items in that users table so the first and third items in the",
    "start": "1020810",
    "end": "1027980"
  },
  {
    "text": "table are basically a profile record and they are the master records for two",
    "start": "1027980",
    "end": "1034579"
  },
  {
    "text": "users John and Jane and they contain basically all of the information about the phone",
    "start": "1034579",
    "end": "1040750"
  },
  {
    "text": "email any other preferences and then the second row is an alias that we add that",
    "start": "1040750",
    "end": "1048400"
  },
  {
    "text": "is indexed by the email and points using the username ref column or attribute to",
    "start": "1048400",
    "end": "1056070"
  },
  {
    "text": "the the master profile record for John one two three",
    "start": "1056070",
    "end": "1061960"
  },
  {
    "text": "okay so so now you know suppose John you",
    "start": "1061960",
    "end": "1068080"
  },
  {
    "text": "know tries to authenticate to the application you can enter an email we would look up by email we don't know",
    "start": "1068080",
    "end": "1075040"
  },
  {
    "text": "that it's any more we just know it's a string we look it up ID and the fact",
    "start": "1075040",
    "end": "1080200"
  },
  {
    "text": "that the attribute that exists is username ref tells us that that's an alias record that points to the main",
    "start": "1080200",
    "end": "1087910"
  },
  {
    "text": "record so we would then go and fetch the main record similarly you know if he",
    "start": "1087910",
    "end": "1095700"
  },
  {
    "text": "identified by username we would go and directly see that it's it doesn't have the username ref so we infer from that",
    "start": "1095700",
    "end": "1103210"
  },
  {
    "text": "that's the master record sometimes it's you know you could add the discriminator field that says what type of item it is",
    "start": "1103210",
    "end": "1110260"
  },
  {
    "text": "here it wasn't really necessary so you can cut down on space and in storage and",
    "start": "1110260",
    "end": "1116170"
  },
  {
    "text": "save some money so let's go through some scenarios now that shows us show will",
    "start": "1116170",
    "end": "1122320"
  },
  {
    "text": "show us how we maintain basically the referential integrity here between these",
    "start": "1122320",
    "end": "1127720"
  },
  {
    "text": "records belonging to John so here's the",
    "start": "1127720",
    "end": "1134550"
  },
  {
    "text": "JavaScript snippet of code that shows us how we would issue a transaction that adds John to the user's database and it",
    "start": "1134550",
    "end": "1143860"
  },
  {
    "text": "makes sure that we have a uniqueness constraint and forced and everything is",
    "start": "1143860",
    "end": "1149650"
  },
  {
    "text": "done in one atomic step so basically we have to put operations within the",
    "start": "1149650",
    "end": "1156250"
  },
  {
    "text": "transact item request so each quit operation specifies the table name that",
    "start": "1156250",
    "end": "1161320"
  },
  {
    "text": "it wants to target and the the keys that it likes to target and then it can have",
    "start": "1161320",
    "end": "1167140"
  },
  {
    "text": "a conditional expression so here the condition expression that we specifies",
    "start": "1167140",
    "end": "1172960"
  },
  {
    "text": "for both records the one representing the main profile record and the other one representing",
    "start": "1172960",
    "end": "1178780"
  },
  {
    "text": "the alias both of them assert that the these IDs do not exist in the database",
    "start": "1178780",
    "end": "1185350"
  },
  {
    "text": "so you know there cannot be another user with the same name or email or you know",
    "start": "1185350",
    "end": "1191260"
  },
  {
    "text": "across reference of each other that collides with any of the identifiers that John provided in this example so if",
    "start": "1191260",
    "end": "1200200"
  },
  {
    "text": "the transaction succeeds we know that both of these records were inserted and that there is no collision now let's",
    "start": "1200200",
    "end": "1209200"
  },
  {
    "text": "let's see what happens when John tries to change his email so we will have",
    "start": "1209200",
    "end": "1217360"
  },
  {
    "text": "essentially one update one insert and one delete and the thing that this shows",
    "start": "1217360",
    "end": "1224710"
  },
  {
    "text": "is that you know we want to make sure that everything that we are trying to transact still is the same as what we",
    "start": "1224710",
    "end": "1230860"
  },
  {
    "text": "think it was when we attempt the operation so we will check that the user the main profile item still references",
    "start": "1230860",
    "end": "1238750"
  },
  {
    "text": "the email that we think we want to delete we will make sure that the email we wanna insert doesn't exist so these",
    "start": "1238750",
    "end": "1246130"
  },
  {
    "text": "are the first two items that you see here being transacted in the transact right item requests and the third",
    "start": "1246130",
    "end": "1254010"
  },
  {
    "text": "operation here deletes the old email now you will notice that there is no condition here to check that this alias",
    "start": "1254010",
    "end": "1261429"
  },
  {
    "text": "record still points to to John's item you know if we had additional scenarios",
    "start": "1261429",
    "end": "1269400"
  },
  {
    "text": "it might be possible that we would kind of break an invariant that if the user",
    "start": "1269400",
    "end": "1275380"
  },
  {
    "text": "points to the email then the email points to the user so I would say actually this sample is deficient in",
    "start": "1275380",
    "end": "1282100"
  },
  {
    "text": "that and we didn't have that condition due to slide space limitations but",
    "start": "1282100",
    "end": "1287590"
  },
  {
    "text": "basically you know as as much as you are defensive in your code always checking invariants we recommend doing the same",
    "start": "1287590",
    "end": "1294970"
  },
  {
    "text": "when you enter transactions there is no additional cost for you to check conditions that you think garden should",
    "start": "1294970",
    "end": "1301809"
  },
  {
    "text": "be true according to your invariants when you do",
    "start": "1301809",
    "end": "1306880"
  },
  {
    "text": "transact write items so any item that you think about changing check whatever you want to do you want to enforce about",
    "start": "1306880",
    "end": "1313390"
  },
  {
    "text": "it what you assume is true about it it has the same cost in same performance",
    "start": "1313390",
    "end": "1319710"
  },
  {
    "start": "1321000",
    "end": "1321000"
  },
  {
    "text": "okay so let's move to the second use case in this use case we you know do we",
    "start": "1321180",
    "end": "1328630"
  },
  {
    "text": "have any local Las Vegas here I guess so we're all visiting here we all are",
    "start": "1328630",
    "end": "1334360"
  },
  {
    "text": "very familiar with this scenario we create a reservation to book a room in a",
    "start": "1334360",
    "end": "1342490"
  },
  {
    "text": "hotel here and then we want to check in to the room and that marks our",
    "start": "1342490",
    "end": "1347830"
  },
  {
    "text": "reservation is fulfilled and then we want to check out of the room when we're done so this is what we're going to be",
    "start": "1347830",
    "end": "1354310"
  },
  {
    "text": "demonstrating here and the thing that we will demonstrate in kind of working",
    "start": "1354310",
    "end": "1360250"
  },
  {
    "text": "through that one is idempotency unimportance is something super important when you work with transactions and actually any state",
    "start": "1360250",
    "end": "1367590"
  },
  {
    "text": "transitions that you do in in a distributed system so think that you",
    "start": "1367590",
    "end": "1372940"
  },
  {
    "text": "know I have a travel application I'm sitting on my mobile device and I'm trying to reserve a room and for",
    "start": "1372940",
    "end": "1379240"
  },
  {
    "text": "whatever reason there are some connectivity problems some server took a hike and I don't know you know whether",
    "start": "1379240",
    "end": "1385600"
  },
  {
    "text": "my reservation went through or not now imagine what the app has to do at that time will it if it retries will it",
    "start": "1385600",
    "end": "1394240"
  },
  {
    "text": "create two reservations is gonna you know is going to create one reservation you don't know unless you have some sort",
    "start": "1394240",
    "end": "1401140"
  },
  {
    "text": "of way to express your intent so the app needs to say here is my intent and",
    "start": "1401140",
    "end": "1408250"
  },
  {
    "text": "here's an identifier for my intent to make a reservation and then the entire chain of calls emanating from that point",
    "start": "1408250",
    "end": "1416050"
  },
  {
    "text": "forward can disambiguate my intent based on that ID and this is an idempotency",
    "start": "1416050",
    "end": "1423040"
  },
  {
    "text": "token that's what it normally is referred to and we will use that in",
    "start": "1423040",
    "end": "1428650"
  },
  {
    "text": "order to make sure that when I make a reservation it is i only create one",
    "start": "1428650",
    "end": "1434410"
  },
  {
    "text": "reservation no matter how many retries I'm trying to I have to go through so and we'll also kind of",
    "start": "1434410",
    "end": "1441080"
  },
  {
    "text": "work through consistency and atomicity and when we make state transitions so",
    "start": "1441080",
    "end": "1447470"
  },
  {
    "text": "the data model basically has three item",
    "start": "1447470",
    "end": "1452540"
  },
  {
    "start": "1448000",
    "end": "1448000"
  },
  {
    "text": "types guest reservation and rooms I'm not making any particular",
    "start": "1452540",
    "end": "1458030"
  },
  {
    "text": "assumptions about how you put those items into tables you can put them into two tables three tables you can decide",
    "start": "1458030",
    "end": "1466580"
  },
  {
    "text": "to put reservation kind of hierarchically under a guest in the same",
    "start": "1466580",
    "end": "1472490"
  },
  {
    "text": "table using partition key used with the guest name a guest ID and a reservation",
    "start": "1472490",
    "end": "1478310"
  },
  {
    "text": "as a sort key that may be necessary but he actually chose to represent it in a",
    "start": "1478310",
    "end": "1484970"
  },
  {
    "text": "different way that kind of underscores that we DynamoDB you're not limited to",
    "start": "1484970",
    "end": "1489980"
  },
  {
    "text": "key value pairs you also have sets and maps so if you look at the guests entity it has a",
    "start": "1489980",
    "end": "1497960"
  },
  {
    "text": "reservation set so inside the item you essentially have a document and that oil",
    "start": "1497960",
    "end": "1504830"
  },
  {
    "text": "item contains a set of reservations so we allow you to manipulate that set",
    "start": "1504830",
    "end": "1512180"
  },
  {
    "text": "using condition expressions and update expressions you can check if a string is",
    "start": "1512180",
    "end": "1517310"
  },
  {
    "text": "in a set you can insert observe delete entries form a set and similarly you can",
    "start": "1517310",
    "end": "1525650"
  },
  {
    "text": "do similar things with nested nested maps inside items so the guest",
    "start": "1525650",
    "end": "1531320"
  },
  {
    "text": "reservations are going to contain basically all of the reservations that the guest has made and are either pending or active and it also gonna",
    "start": "1531320",
    "end": "1539300"
  },
  {
    "text": "contain a set of occupied rooms that the guest is currently occupying",
    "start": "1539300",
    "end": "1544900"
  },
  {
    "text": "reservations gonna contain basically they're the guest idea who made a reservation and if the reservation is",
    "start": "1544900",
    "end": "1551810"
  },
  {
    "text": "fulfilled it will identify the room similarly room will have an ID will have",
    "start": "1551810",
    "end": "1557120"
  },
  {
    "text": "a state whether it's occupied or free and it will if it's occupied it will say which",
    "start": "1557120",
    "end": "1562720"
  },
  {
    "text": "reservation are made it occupied so here's an example of some data and that",
    "start": "1562720",
    "end": "1569200"
  },
  {
    "text": "we could have with this data model so again you know John has two reservations 500 501 and you know it currently",
    "start": "1569200",
    "end": "1577930"
  },
  {
    "text": "occupies room 2 0 0 1 4 and then we have two reservations 500 and 501 one is",
    "start": "1577930",
    "end": "1585310"
  },
  {
    "text": "pending the other is fulfilled with room ID and we have a room and the room is",
    "start": "1585310",
    "end": "1590770"
  },
  {
    "text": "occupied by that reservation 501 so",
    "start": "1590770",
    "end": "1597450"
  },
  {
    "start": "1598000",
    "end": "1598000"
  },
  {
    "text": "sorry yes so so how do we get to the point that we have an idempotent",
    "start": "1600780",
    "end": "1606750"
  },
  {
    "text": "reservation insertion into into the database first thing you know you go",
    "start": "1606750",
    "end": "1612100"
  },
  {
    "text": "from the client and you generate an unique ID for the reservation essentially that's going to be our intent identifier and it should be",
    "start": "1612100",
    "end": "1620230"
  },
  {
    "text": "unique but it doesn't have to be fully unique like collisions are tolerated you",
    "start": "1620230",
    "end": "1625750"
  },
  {
    "text": "can generate something that is unique enough when you try to insert it into the database if it hasn't been unique if",
    "start": "1625750",
    "end": "1631480"
  },
  {
    "text": "it is in use you will be told so and you can react to that and that allows you to generate reservation IDs that are maybe",
    "start": "1631480",
    "end": "1637990"
  },
  {
    "text": "shorter or and easier to memorize and then you would create a trans actor item",
    "start": "1637990",
    "end": "1643930"
  },
  {
    "text": "requests and in that transact item request you would have one put that is conditional on the reservation ID not",
    "start": "1643930",
    "end": "1651760"
  },
  {
    "text": "existing in the reservations table and you would also do a conditional update",
    "start": "1651760",
    "end": "1657010"
  },
  {
    "text": "to insert the new reservation ID that you created into the guests reservation",
    "start": "1657010",
    "end": "1664210"
  },
  {
    "text": "set within the guests item so this basically you can retry it as many times",
    "start": "1664210",
    "end": "1670750"
  },
  {
    "text": "that you would like it will always have the same side effect and you will be told by the outcome of the transaction",
    "start": "1670750",
    "end": "1675940"
  },
  {
    "text": "but whether you have been attempting more than once to do it or whether it is",
    "start": "1675940",
    "end": "1681220"
  },
  {
    "text": "collision on that a reservation ID or of such nature so here's what the data",
    "start": "1681220",
    "end": "1691130"
  },
  {
    "start": "1688000",
    "end": "1688000"
  },
  {
    "text": "would look like for example before after John created a reservation just one",
    "start": "1691130",
    "end": "1697040"
  },
  {
    "text": "reservation and he is trying to check-in into the room so we see that the",
    "start": "1697040",
    "end": "1703340"
  },
  {
    "text": "reservation is pending and that the occupy and there's no room that are",
    "start": "1703340",
    "end": "1709160"
  },
  {
    "text": "occupied by John and that we found a room in that room is free now how did we",
    "start": "1709160",
    "end": "1715160"
  },
  {
    "text": "come to obtain these three records depends on you know how you manage your",
    "start": "1715160",
    "end": "1721190"
  },
  {
    "text": "inventory of rooms and how you identify the customer and the reservation",
    "start": "1721190",
    "end": "1726680"
  },
  {
    "text": "customer can kind of walk up to the counter and say I'm John and then you would look up the reservations from",
    "start": "1726680",
    "end": "1732680"
  },
  {
    "text": "their customer record or you could come and I say here's my reservation ID and",
    "start": "1732680",
    "end": "1738170"
  },
  {
    "text": "you would based on the reservation ID find who's the person who made it sim",
    "start": "1738170",
    "end": "1745880"
  },
  {
    "text": "and separately from that you would find the room record that you would like to",
    "start": "1745880",
    "end": "1751670"
  },
  {
    "text": "put that guest into and so these three items you you could you don't need to",
    "start": "1751670",
    "end": "1757400"
  },
  {
    "text": "get them in a consistent manner you don't need to do it in an atomic fashion you just piss together a view of the",
    "start": "1757400",
    "end": "1762890"
  },
  {
    "text": "world yet you think and hope is going to be current at the time that you attempt",
    "start": "1762890",
    "end": "1768110"
  },
  {
    "text": "your transaction so and basically then you come to the transaction on API and",
    "start": "1768110",
    "end": "1773120"
  },
  {
    "text": "you say I believe this is the state of the world I believe that John has this reservation that that reservation is",
    "start": "1773120",
    "end": "1779590"
  },
  {
    "text": "still pending and that this room is still free these are all the things that I would like I think are still current",
    "start": "1779590",
    "end": "1786410"
  },
  {
    "text": "and I would like to make the state transition to this state where essentially we now tied all of these",
    "start": "1786410",
    "end": "1793820"
  },
  {
    "text": "things together and change states okay so now let's go through the checkout",
    "start": "1793820",
    "end": "1801920"
  },
  {
    "text": "scenario in the checkout scenario we start from you know where we where after",
    "start": "1801920",
    "end": "1807590"
  },
  {
    "text": "John Jack Dean and I highlighted here the only thing that we really need to",
    "start": "1807590",
    "end": "1813350"
  },
  {
    "text": "check in order to make sure that everything is still you know it stated we believe it is so if that",
    "start": "1813350",
    "end": "1819399"
  },
  {
    "text": "reservation they you will if you'll see the second row the reservation item it",
    "start": "1819399",
    "end": "1826929"
  },
  {
    "text": "says that the reservation is fulfilled yeah the customer ID is John and that he",
    "start": "1826929",
    "end": "1832779"
  },
  {
    "text": "the reservation has been fulfilled by that room number now if we just know",
    "start": "1832779",
    "end": "1839200"
  },
  {
    "text": "about the scenarios that I alone to you that is the only thing we need to check but imagine we introduced additional",
    "start": "1839200",
    "end": "1845529"
  },
  {
    "text": "scenarios into the system such as I could move a reservation from one person to another or I can cancel a reservation",
    "start": "1845529",
    "end": "1852219"
  },
  {
    "text": "or I can move a customer from one room to another on the same reservation if we",
    "start": "1852219",
    "end": "1858039"
  },
  {
    "text": "introduced those scenarios later on then just checking the state of the",
    "start": "1858039",
    "end": "1863049"
  },
  {
    "text": "reservation and not looking at the rest of the state of the world it can result",
    "start": "1863049",
    "end": "1868149"
  },
  {
    "text": "in some corruption of application invariants so again you know we recommend check everything that you",
    "start": "1868149",
    "end": "1874509"
  },
  {
    "text": "think is true you know check all of the referential integrity of these things and all of the states and make those",
    "start": "1874509",
    "end": "1880659"
  },
  {
    "text": "guarded transitions as you should okay",
    "start": "1880659",
    "end": "1886929"
  },
  {
    "text": "and this is essentially how it would look like after the checkout we remove the reservation from the set the room",
    "start": "1886929",
    "end": "1892719"
  },
  {
    "text": "from the occupied room set mark the reservation is closed and the room is",
    "start": "1892719",
    "end": "1898419"
  },
  {
    "text": "free again so now let's talk about some",
    "start": "1898419",
    "end": "1905009"
  },
  {
    "text": "design considerations when you're integrating with the transactional API and time permitting I think we're going",
    "start": "1905009",
    "end": "1912519"
  },
  {
    "text": "to have time afterwards we're going to go over another use case okay so let's",
    "start": "1912519",
    "end": "1919899"
  },
  {
    "start": "1918000",
    "end": "1918000"
  },
  {
    "text": "talk about concurrency control so what is concurrency control concurrency control is the set of mechanisms",
    "start": "1919899",
    "end": "1925919"
  },
  {
    "text": "algorithms that we implement in the backend in order to give you the acid",
    "start": "1925919",
    "end": "1931210"
  },
  {
    "text": "semantics of transactions so basically you know you want your artemisa tea all or nothing you want your consistency the",
    "start": "1931210",
    "end": "1938559"
  },
  {
    "text": "state transitions to be evaluated again in an atomic fashion and the state applied in one atomic step you want",
    "start": "1938559",
    "end": "1945190"
  },
  {
    "text": "isolation which means that the transactions appear that if they never interleave with each other",
    "start": "1945190",
    "end": "1951050"
  },
  {
    "text": "and you want durability so when you when you think about how to implement those",
    "start": "1951050",
    "end": "1957170"
  },
  {
    "text": "those properties there's basically two choices one is optimistic concurrency control and the other is pessimistic",
    "start": "1957170",
    "end": "1964690"
  },
  {
    "text": "concurrency control which involves locking you know because we're talking about the no sequel database the path of",
    "start": "1964690",
    "end": "1971750"
  },
  {
    "text": "success when you're using this technology is again to use vast",
    "start": "1971750",
    "end": "1976790"
  },
  {
    "text": "horizontal scale out with lots of operations that do not conflict with each other",
    "start": "1976790",
    "end": "1981830"
  },
  {
    "text": "so already we know that if you're using DynamoDB properly you should not have",
    "start": "1981830",
    "end": "1987740"
  },
  {
    "text": "contention between all the concurrent operations that you operate within the",
    "start": "1987740",
    "end": "1992930"
  },
  {
    "text": "database and that means that in order to get the best performance and cost and",
    "start": "1992930",
    "end": "1998660"
  },
  {
    "text": "throughput we would opt to use optimistic concurrency control so",
    "start": "1998660",
    "end": "2004120"
  },
  {
    "text": "optimistic concurrency control really assumes that they're not going to be conflicts they handle conflicts you know",
    "start": "2004120",
    "end": "2010000"
  },
  {
    "text": "you you're always ensure that acid properties are fulfilled but that's",
    "start": "2010000",
    "end": "2016180"
  },
  {
    "text": "going to be the exceptional case and we're going to handle it in the back in the back end no matter what you know any",
    "start": "2016180",
    "end": "2022120"
  },
  {
    "text": "concurrency control that we would have chosen that would have held true but",
    "start": "2022120",
    "end": "2027280"
  },
  {
    "text": "that works best when you already adhere to the design patterns that are most",
    "start": "2027280",
    "end": "2033790"
  },
  {
    "text": "encouraged with no sequel so again your responsibility is just to design for",
    "start": "2033790",
    "end": "2039100"
  },
  {
    "text": "scale out you know the same guidance that we have always given on how to work best with dynamodb continues to apply",
    "start": "2039100",
    "end": "2045310"
  },
  {
    "text": "and but something that is unique for transactions is to avoid unnecessary",
    "start": "2045310",
    "end": "2050610"
  },
  {
    "text": "conflicts so you know you think you want a piece of data that you could read in a",
    "start": "2050610",
    "end": "2056350"
  },
  {
    "text": "transaction or you could read outside of a transaction or something that you could don't have to really modify within",
    "start": "2056350",
    "end": "2063340"
  },
  {
    "text": "the same transaction and could be a source of contention then it might be a good idea to not do that in the same",
    "start": "2063340",
    "end": "2069970"
  },
  {
    "text": "transaction so there is some sort of a trade-off here that you really need to evaluate between your ease of use you",
    "start": "2069970",
    "end": "2077800"
  },
  {
    "text": "know and that gives you the atomicity gives you versus",
    "start": "2077800",
    "end": "2083220"
  },
  {
    "text": "in increased contention during altercation okay now when it comes to",
    "start": "2083220",
    "end": "2091169"
  },
  {
    "start": "2088000",
    "end": "2088000"
  },
  {
    "text": "metering transactions we we've seen that the way the API works is that you",
    "start": "2091169",
    "end": "2096539"
  },
  {
    "text": "essentially group together either put and right or puts and deletes there's",
    "start": "2096539",
    "end": "2104160"
  },
  {
    "text": "also another thing that you can put inside the transaction called conditional check you would use that",
    "start": "2104160",
    "end": "2109559"
  },
  {
    "text": "when you want to make sure that a condition on an item that you're not modifying is met within the transaction",
    "start": "2109559",
    "end": "2116789"
  },
  {
    "text": "before you move ahead with state changes so anything that you would put within a transact right item essentially is going",
    "start": "2116789",
    "end": "2124559"
  },
  {
    "text": "to be metered as twice the respective metering that we would do if it was a",
    "start": "2124559",
    "end": "2131400"
  },
  {
    "text": "single turn operation so why is that let's think about it so basically you",
    "start": "2131400",
    "end": "2136650"
  },
  {
    "text": "know whenever you're dealing with transaction there's always a two pass over the data you want to prepare",
    "start": "2136650",
    "end": "2141930"
  },
  {
    "text": "something and then you want to commit it or if we're talking about optimistic concurrency control forgets you want to",
    "start": "2141930",
    "end": "2147990"
  },
  {
    "text": "read everything and then read it again and make sure that nothing has changed so this is directly kind of a result of",
    "start": "2147990",
    "end": "2153990"
  },
  {
    "text": "implementing transactions there's no real kind of way of avoiding that so we're really only metering for the use",
    "start": "2153990",
    "end": "2160859"
  },
  {
    "text": "behind the scenes that happens when you have to implement transactions so a second example suppose that I have you",
    "start": "2160859",
    "end": "2169619"
  },
  {
    "text": "know two items in in my transact right items and one of them is 1k and I would",
    "start": "2169619",
    "end": "2177240"
  },
  {
    "text": "want to do a conditional check on that and then I want to update an item that",
    "start": "2177240",
    "end": "2182819"
  },
  {
    "text": "is 2k so one plus two gives us three WCU's right capacity units and double",
    "start": "2182819",
    "end": "2191339"
  },
  {
    "text": "that by 2 that would be six capacity units that are going to be consumed by by that transact right item request and",
    "start": "2191339",
    "end": "2200990"
  },
  {
    "text": "we if you use on demand which we just announced today then it's basically the same thing",
    "start": "2200990",
    "end": "2206779"
  },
  {
    "text": "six write units are going to get consumed by that API call now the nice",
    "start": "2206779",
    "end": "2213390"
  },
  {
    "text": "thing about transactions is that it just fits into the existing capacity he models all the scaling works and is",
    "start": "2213390",
    "end": "2219180"
  },
  {
    "text": "recommended if you're using provision capacity if you're using on-demand",
    "start": "2219180",
    "end": "2224599"
  },
  {
    "text": "it just works and it fits into your read the rest of your consumption okay so now",
    "start": "2224599",
    "end": "2235230"
  },
  {
    "text": "let's talk about the cases where your transaction didn't go through so you know if you design for scale and you you",
    "start": "2235230",
    "end": "2245670"
  },
  {
    "text": "provisions provision appropriately or you're using on-demand and you put the",
    "start": "2245670",
    "end": "2252150"
  },
  {
    "text": "right permissions everything should work just fine but you know in some cases things are not going to work as expected",
    "start": "2252150",
    "end": "2258060"
  },
  {
    "text": "and there are like different kinds of failures that can happen the most",
    "start": "2258060",
    "end": "2263880"
  },
  {
    "text": "interesting one for us to discuss are basically precondition failure and",
    "start": "2263880",
    "end": "2269180"
  },
  {
    "text": "transactional conflicts so precondition failure is very obvious you know I",
    "start": "2269180",
    "end": "2275760"
  },
  {
    "text": "assumed that this was a state of the world I go into the transaction and the state of the world has changed you know",
    "start": "2275760",
    "end": "2282569"
  },
  {
    "text": "why did that happen I did that happen typically because the right changed the state of the world from under me",
    "start": "2282569",
    "end": "2287670"
  },
  {
    "text": "maybe I wasn't too careful in validating that that's a very recent snapshot of the state of the world it might be the",
    "start": "2287670",
    "end": "2294150"
  },
  {
    "text": "case that in your application it might it may make more sense to first try and",
    "start": "2294150",
    "end": "2300359"
  },
  {
    "text": "see that something isn't what you expect because 99% of the time it is or it",
    "start": "2300359",
    "end": "2307950"
  },
  {
    "text": "could be that within the transaction execution execution while the transaction was executing there was",
    "start": "2307950",
    "end": "2314369"
  },
  {
    "text": "really a different transaction or a right that were colliding with your transaction and that will result in a",
    "start": "2314369",
    "end": "2321119"
  },
  {
    "text": "transaction conflict now sorry whenever",
    "start": "2321119",
    "end": "2328530"
  },
  {
    "text": "whenever that happens either the precondition is not is not met or you",
    "start": "2328530",
    "end": "2336660"
  },
  {
    "text": "get a transactional conflict if you if you specify",
    "start": "2336660",
    "end": "2341670"
  },
  {
    "text": "that you would like to get the current state of the world within the response you can see what is the current state of",
    "start": "2341670",
    "end": "2347760"
  },
  {
    "text": "the objects for which the conditions were not met or that had transactional",
    "start": "2347760",
    "end": "2352950"
  },
  {
    "text": "failure and then you can use that to recompute what you want to do okay so we",
    "start": "2352950",
    "end": "2363030"
  },
  {
    "start": "2360000",
    "end": "2360000"
  },
  {
    "text": "talked about idempotency that you can build into your application now we also have a mechanism that's built into the",
    "start": "2363030",
    "end": "2368849"
  },
  {
    "text": "SDK that is super useful to ensure idempotency for like really simple",
    "start": "2368849",
    "end": "2374099"
  },
  {
    "text": "scenarios where you you don't want to create an intent to represent what you want to do here's an example suppose you",
    "start": "2374099",
    "end": "2381150"
  },
  {
    "text": "have a voting application and you want to just say hey you know that person voted for that singer okay",
    "start": "2381150",
    "end": "2387420"
  },
  {
    "text": "it's some sort of you know you know like talent show or something like that and",
    "start": "2387420",
    "end": "2394849"
  },
  {
    "text": "you you don't want to kind of keep the ID of everybody who's already voted you",
    "start": "2394849",
    "end": "2400500"
  },
  {
    "text": "basically just want to say let me increment a counter by one that has pitfalls in itself and if you catch the",
    "start": "2400500",
    "end": "2409020"
  },
  {
    "text": "show by recalling my colleague he talks about basically how we can distribute counters but let's keep it simple for a",
    "start": "2409020",
    "end": "2415200"
  },
  {
    "text": "second and just say that's what you want to do you just want to increment a counter by one but you don't want to increment it by more than one but you",
    "start": "2415200",
    "end": "2422579"
  },
  {
    "text": "don't want to really really you know make a lot of effort to ensure that you just want to make a best effort to",
    "start": "2422579",
    "end": "2429510"
  },
  {
    "text": "ensure that you're doing it once so for that we have something called the transaction sorry a client request token",
    "start": "2429510",
    "end": "2436980"
  },
  {
    "text": "you can specify that in your call to the API and it is specified by default by",
    "start": "2436980",
    "end": "2442500"
  },
  {
    "text": "the SDK and that makes sure that as the SDK retries if there are any problems then the same client request token is",
    "start": "2442500",
    "end": "2449640"
  },
  {
    "text": "specified again and again on the server side we will disambiguate your request",
    "start": "2449640",
    "end": "2455369"
  },
  {
    "text": "based on the client request token so if you make the same identical request within a span of 10 minutes we will",
    "start": "2455369",
    "end": "2462809"
  },
  {
    "text": "assume that that was the same intent and we will only affect the transaction once",
    "start": "2462809",
    "end": "2468680"
  },
  {
    "text": "so in suppose your SDK had a failure it",
    "start": "2468680",
    "end": "2474390"
  },
  {
    "text": "reached retries again the services okay that transaction actually failed you get",
    "start": "2474390",
    "end": "2479579"
  },
  {
    "text": "back a response that indicates that similarly if the transaction succeeded you will get an indication of that that",
    "start": "2479579",
    "end": "2486779"
  },
  {
    "text": "also allows you now to have two clients that are trying to drive to the same end state and there are competing with each",
    "start": "2486779",
    "end": "2493019"
  },
  {
    "text": "other and you want to use you see that the end state was reached and you don't know who actually succeeded in doing it",
    "start": "2493019",
    "end": "2499710"
  },
  {
    "text": "you can use the client request token you can when you issue the request it will tell you what whether it was you who",
    "start": "2499710",
    "end": "2506729"
  },
  {
    "text": "succeeded or the competing transaction okay so if you don't use the SDK we",
    "start": "2506729",
    "end": "2514380"
  },
  {
    "text": "recommend specifying that token and just remember that if you have something that requires intent longevity of more than",
    "start": "2514380",
    "end": "2522299"
  },
  {
    "text": "ten minutes then probably you want to take care of it also in your application and design for idempotency as we showed",
    "start": "2522299",
    "end": "2529589"
  },
  {
    "text": "in the reservation example okay so we",
    "start": "2529589",
    "end": "2536339"
  },
  {
    "start": "2534000",
    "end": "2534000"
  },
  {
    "text": "talked about that let me just recap very quickly so you know if you if you if the SDK exhausted so we tries and you have",
    "start": "2536339",
    "end": "2543930"
  },
  {
    "text": "now to decide what to do you can you have an option right you know it really depends on your scenario",
    "start": "2543930",
    "end": "2550589"
  },
  {
    "text": "so if we think about let's think about the user profile example suppose we have",
    "start": "2550589",
    "end": "2557430"
  },
  {
    "text": "a request to delete the users records and once we do that we see that the",
    "start": "2557430",
    "end": "2564420"
  },
  {
    "text": "transaction failed because there was a competing request to change the users",
    "start": "2564420",
    "end": "2569700"
  },
  {
    "text": "email now at that point the application could do one of two things it could say hey you know according to my business",
    "start": "2569700",
    "end": "2576660"
  },
  {
    "text": "logic I should just delete a profile anyway so let me gather the current state and we drive a new transaction or",
    "start": "2576660",
    "end": "2584489"
  },
  {
    "text": "it could say no you know I'm not sure anymore what I need to be doing let me surface an error back to the user and",
    "start": "2584489",
    "end": "2590700"
  },
  {
    "text": "let them decide whether given the new things that happened what they really",
    "start": "2590700",
    "end": "2596369"
  },
  {
    "text": "want to do is to delete a user or keep it so that really depends on your situation",
    "start": "2596369",
    "end": "2602350"
  },
  {
    "text": "but if you do wanna we drive a new transaction you need to gather a state of the world again you can either do",
    "start": "2602350",
    "end": "2609340"
  },
  {
    "text": "that with the transactional yet transact get items that gives you everything in a",
    "start": "2609340",
    "end": "2615160"
  },
  {
    "text": "snapshot you can compute your state piecemeal and assume that it's consistent that might be what works best",
    "start": "2615160",
    "end": "2624070"
  },
  {
    "text": "in low contention situations and you can also use the the state that is returned",
    "start": "2624070",
    "end": "2629980"
  },
  {
    "text": "by a failed transact right item request if you specify return values on",
    "start": "2629980",
    "end": "2636280"
  },
  {
    "text": "condition check failures equals all old that will tell us to give you what we think is the current state okay so these",
    "start": "2636280",
    "end": "2647440"
  },
  {
    "text": "are basically all of the basics that I wanted to cover about like how the API works now let's talk about what happens",
    "start": "2647440",
    "end": "2655240"
  },
  {
    "text": "when you look at data that has been transacted when you're using other DynamoDB features so DynamoDB you know",
    "start": "2655240",
    "end": "2663130"
  },
  {
    "text": "we have the the normal write and read path and then there is a bunch of features that are all based on the",
    "start": "2663130",
    "end": "2669250"
  },
  {
    "text": "notion that we basically push data to eventual consistent data sources or",
    "start": "2669250",
    "end": "2674800"
  },
  {
    "text": "pipelines so streams is an example you affect some changes in DynamoDB we can",
    "start": "2674800",
    "end": "2681970"
  },
  {
    "text": "insert and update or delete and if you have streams then you are getting",
    "start": "2681970",
    "end": "2687160"
  },
  {
    "text": "essentially all of these records that you can consume and tell you what happened now streams are designed like dynamodb",
    "start": "2687160",
    "end": "2694120"
  },
  {
    "text": "to be scalable to be scaled out and that means that streams are sharded so the",
    "start": "2694120",
    "end": "2700000"
  },
  {
    "text": "same way that the table in dynamo DB is partitioned behind the scenes streams are also partitioned because you know a",
    "start": "2700000",
    "end": "2707530"
  },
  {
    "text": "single client cannot read the stream where you have a million are modifications per second which some of",
    "start": "2707530",
    "end": "2714730"
  },
  {
    "text": "our customers do right so we also need to shard the processing of streams so",
    "start": "2714730",
    "end": "2720220"
  },
  {
    "text": "because we allow you to transact any two items in any table and we still want to",
    "start": "2720220",
    "end": "2728050"
  },
  {
    "text": "have kind of a sequential order or history with for any given item you know",
    "start": "2728050",
    "end": "2733630"
  },
  {
    "text": "and basically want to show you allow you to menu process the strange to have a lineage it's possible that you will include in a",
    "start": "2733630",
    "end": "2739920"
  },
  {
    "text": "transaction items that end up assigned to completely different shards so when",
    "start": "2739920",
    "end": "2745650"
  },
  {
    "text": "you read the data from the shards you will see oh okay here's an item that has been written and maybe a few",
    "start": "2745650",
    "end": "2751859"
  },
  {
    "text": "milliseconds later you will read in either item from another shard and you'll see that item has also been",
    "start": "2751859",
    "end": "2756960"
  },
  {
    "text": "updated those two items could have been updated in the same transaction but the",
    "start": "2756960",
    "end": "2762480"
  },
  {
    "text": "way you would observe it is dependent on your shard processing and in a scale out system there's really no way that you",
    "start": "2762480",
    "end": "2769920"
  },
  {
    "text": "can kind of guarantee that you see them all at once across shards backup is kind",
    "start": "2769920",
    "end": "2777359"
  },
  {
    "text": "of similar you know we write those when we decide to commit a transaction those commits kind of",
    "start": "2777359",
    "end": "2785400"
  },
  {
    "text": "quiesce in the database they're totally durable any get or transact items that",
    "start": "2785400",
    "end": "2791310"
  },
  {
    "text": "you will do will see them in an atomic fashion but when you think about backups that basically a global operation and",
    "start": "2791310",
    "end": "2797880"
  },
  {
    "text": "that cannot be done atomically in a scalar system pretty much like stream",
    "start": "2797880",
    "end": "2803040"
  },
  {
    "text": "processing very similar reasons so when you have you take a backup or your do",
    "start": "2803040",
    "end": "2808109"
  },
  {
    "text": "point-in-time recovery on a given second and you restore that table you may see rights that have been part of a",
    "start": "2808109",
    "end": "2814830"
  },
  {
    "text": "transaction and some of the rights that were part of that same transaction are not going to be reflected in the restore",
    "start": "2814830",
    "end": "2821460"
  },
  {
    "text": "table so keep that in mind about backups and streams global secondary indexes are",
    "start": "2821460",
    "end": "2830940"
  },
  {
    "text": "a mechanism that we offer to index on other attributes in your data and that",
    "start": "2830940",
    "end": "2837599"
  },
  {
    "text": "is also an eventually consistent facility again similar to streams we first perform the right and then",
    "start": "2837599",
    "end": "2844500"
  },
  {
    "text": "asynchronously we propagate the right into indexes based on the content of the",
    "start": "2844500",
    "end": "2850470"
  },
  {
    "text": "item so again that is done asynchronously and on an item-by-item basis and that is also going to be",
    "start": "2850470",
    "end": "2857160"
  },
  {
    "text": "eventually consistent with respect to transactions global tables use a concurrency control",
    "start": "2857160",
    "end": "2863910"
  },
  {
    "text": "mechanism for replication between different regions which last writer wins and by default we do",
    "start": "2863910",
    "end": "2872930"
  },
  {
    "text": "not allow transactions on global tables you can in in ask us support to enable",
    "start": "2872930",
    "end": "2880940"
  },
  {
    "text": "transactions for global tables but again keep in mind that similarly to streams",
    "start": "2880940",
    "end": "2886000"
  },
  {
    "text": "and all the other kind of async Data propagation mechanisms this was going to",
    "start": "2886000",
    "end": "2891200"
  },
  {
    "text": "happen asynchronously and on the item on an item-by-item level now Dax is our",
    "start": "2891200",
    "end": "2901030"
  },
  {
    "text": "accelerator it's a write through cache that you can put on front of DynamoDB that allows you",
    "start": "2901030",
    "end": "2907220"
  },
  {
    "text": "to handle cases of high read load specifically if you have very popular",
    "start": "2907220",
    "end": "2913790"
  },
  {
    "text": "items that you want to increase the write write throughput for particular",
    "start": "2913790",
    "end": "2918830"
  },
  {
    "text": "items Dax could be a good solution for you that support is coming it's not released",
    "start": "2918830",
    "end": "2925040"
  },
  {
    "text": "right now but stay tuned it's coming soon all right so in terms of",
    "start": "2925040",
    "end": "2933350"
  },
  {
    "start": "2930000",
    "end": "2930000"
  },
  {
    "text": "permissions similarly to mirroring actually we don't introduce any new",
    "start": "2933350",
    "end": "2939820"
  },
  {
    "text": "access control requirements on calling the API itself the way you would",
    "start": "2939820",
    "end": "2946790"
  },
  {
    "text": "authorize whether someone can update or delete or check a condition within a",
    "start": "2946790",
    "end": "2953510"
  },
  {
    "text": "transaction is all done using the permissions that we already have for individual operations so you know if for",
    "start": "2953510",
    "end": "2961730"
  },
  {
    "text": "example I have permission to delete but I don't have permission to update and I",
    "start": "2961730",
    "end": "2966980"
  },
  {
    "text": "try to do a transaction that includes both of these operations the transaction as a whole will fail and the responses",
    "start": "2966980",
    "end": "2975080"
  },
  {
    "text": "are going to tell me that I don't have that particular permission that is required for that operation",
    "start": "2975080",
    "end": "2983590"
  },
  {
    "text": "okay so we have about 10 more minutes let's breathe through an interesting use case so imagine that you have a social",
    "start": "2986859",
    "end": "2998420"
  },
  {
    "start": "2989000",
    "end": "2989000"
  },
  {
    "text": "media website where users can post and",
    "start": "2998420",
    "end": "3003490"
  },
  {
    "text": "they can attach media to their posts and what you want to do is you basically",
    "start": "3003490",
    "end": "3009790"
  },
  {
    "text": "want to put put the videos or whatever it is in a series and include some sort",
    "start": "3009790",
    "end": "3018040"
  },
  {
    "text": "of reference from DynamoDB and you want to make sure that there is kind of correct state management between",
    "start": "3018040",
    "end": "3024520"
  },
  {
    "text": "DynamoDB and s3 you want to make sure that if a post points to an attachment",
    "start": "3024520",
    "end": "3031210"
  },
  {
    "text": "then that attachment is there you want to make sure that when no post post points to an attachment then we can",
    "start": "3031210",
    "end": "3039250"
  },
  {
    "text": "delete the attachment and you also want to make sure that you're not creating",
    "start": "3039250",
    "end": "3044320"
  },
  {
    "text": "those attachment unnecessarily when media is shared so you want to take advantage of the fact that users might",
    "start": "3044320",
    "end": "3052210"
  },
  {
    "text": "be interested in the same media including the same media in the same post so you want to be able to use the",
    "start": "3052210",
    "end": "3057790"
  },
  {
    "text": "same storage for the same attachment sort of kind of many-to-one relationship",
    "start": "3057790",
    "end": "3064810"
  },
  {
    "text": "between posts and attachments and also many-to-many because a same post could",
    "start": "3064810",
    "end": "3070840"
  },
  {
    "text": "could contain many attachments so I'm going to show you basically how we can",
    "start": "3070840",
    "end": "3076800"
  },
  {
    "text": "use this scenario to kind of weave together these two services dynamo",
    "start": "3076800",
    "end": "3082240"
  },
  {
    "text": "industry using streams and the feature that we have called time to live that",
    "start": "3082240",
    "end": "3087280"
  },
  {
    "text": "allows you to do automatic expiry of items in dynamodb okay and we're also",
    "start": "3087280",
    "end": "3093070"
  },
  {
    "text": "going to do reference counting in order to implement that because that's how we're going to know when and when an",
    "start": "3093070",
    "end": "3098710"
  },
  {
    "text": "attachment is no longer in use so an attachment item is going to have essentially an s3 reference this",
    "start": "3098710",
    "end": "3106000"
  },
  {
    "start": "3100000",
    "end": "3100000"
  },
  {
    "text": "basically in the area of an object that we're going to put in s3 we're going to",
    "start": "3106000",
    "end": "3111010"
  },
  {
    "text": "have a reference count and we're gonna have a TTL that tells us when we should",
    "start": "3111010",
    "end": "3116680"
  },
  {
    "text": "delete the item from dynamo and what we'll do is once the item is deleted from dynamo we will get",
    "start": "3116680",
    "end": "3123630"
  },
  {
    "text": "notification about that in a stream and then we can go ahead and delete the item in your stream and then I post items are",
    "start": "3123630",
    "end": "3132280"
  },
  {
    "text": "going to have some data you know the text or whatever this is not elaborated",
    "start": "3132280",
    "end": "3138130"
  },
  {
    "text": "here what is really important is that they contain a set of attachment identifiers which is again just the",
    "start": "3138130",
    "end": "3144310"
  },
  {
    "text": "names of the objects in s industry now if you've been paying attention",
    "start": "3144310",
    "end": "3149410"
  },
  {
    "text": "this is actually an anti-pattern the way it's presented right now because it has a ref count on an attachment item in a",
    "start": "3149410",
    "end": "3156670"
  },
  {
    "text": "mobile media site right so what what gives right what if something becomes",
    "start": "3156670",
    "end": "3161740"
  },
  {
    "text": "very viral and everybody wants to share it then that ref count is going to become a source of contention so hold",
    "start": "3161740",
    "end": "3168310"
  },
  {
    "text": "that thought we're going to come back to that but for now let's deal with this",
    "start": "3168310",
    "end": "3173430"
  },
  {
    "text": "without with the assumption that sharing is not going to be very very prolific",
    "start": "3173430",
    "end": "3180839"
  },
  {
    "text": "okay so what are the application invariants that we want to have so basically first is that the ref count",
    "start": "3182280",
    "end": "3188770"
  },
  {
    "text": "needs to be equal to the number of posts that are referencing the attachment and if the ref count is greater than zero",
    "start": "3188770",
    "end": "3196150"
  },
  {
    "text": "then that object needs to exist in s3 and if the TTL is set sorry and if the",
    "start": "3196150",
    "end": "3204040"
  },
  {
    "text": "ref count is zero then the TTL is set and if the TTL is set and then the ref count is zero so what does that mean it",
    "start": "3204040",
    "end": "3211690"
  },
  {
    "text": "means that I will only want to delete the item from s3 if the ref count is zero and I only want to set the TTL to",
    "start": "3211690",
    "end": "3218560"
  },
  {
    "text": "something if the ref count reaches zero",
    "start": "3218560",
    "end": "3223260"
  },
  {
    "text": "okay so now let's see how we basically coordinate the two resources that are not transactional with each other",
    "start": "3223950",
    "end": "3229930"
  },
  {
    "start": "3224000",
    "end": "3224000"
  },
  {
    "text": "s3 and dynamo DB and we're going to again use an idempotency pattern so I'm",
    "start": "3229930",
    "end": "3237430"
  },
  {
    "text": "working on a post and within that flow I'm saying hey you know take that video",
    "start": "3237430",
    "end": "3243910"
  },
  {
    "text": "upload it into your site and link it to my post that's the way",
    "start": "3243910",
    "end": "3250800"
  },
  {
    "text": "an attachment and an object gets created in in our scenario so what I would do is",
    "start": "3250800",
    "end": "3257520"
  },
  {
    "text": "I would first decide what that object needs to be called in history and I would come up with something that is",
    "start": "3257520",
    "end": "3263720"
  },
  {
    "text": "sufficiently unique and then I would go",
    "start": "3263720",
    "end": "3268740"
  },
  {
    "text": "and I create and attachment object in DynamoDB an attachment item that right",
    "start": "3268740",
    "end": "3274890"
  },
  {
    "text": "now points to nothing it points to what would be a reference in s tree and it",
    "start": "3274890",
    "end": "3280080"
  },
  {
    "text": "contains ref count equals zero and it contains TTL that says hey you know if",
    "start": "3280080",
    "end": "3287550"
  },
  {
    "text": "that item is deleted then then going",
    "start": "3287550",
    "end": "3292890"
  },
  {
    "text": "delete the item from s3 so I go and I put that item inside in in dynamo dB",
    "start": "3292890",
    "end": "3300150"
  },
  {
    "text": "now put item if you remember in itself can be transactional even if you don't put it in a transaction transact right",
    "start": "3300150",
    "end": "3306240"
  },
  {
    "text": "item when I do the put item I can specify a condition expression that says",
    "start": "3306240",
    "end": "3312360"
  },
  {
    "text": "only do the put if the item doesn't exist so that ensures that the name that",
    "start": "3312360",
    "end": "3317430"
  },
  {
    "text": "I've chosen for the s3 object is indeed unique so if that put succeeds I'm now",
    "start": "3317430",
    "end": "3324150"
  },
  {
    "text": "in a state that I'm open to failure suppose the client died the server's dies now we have essentially a dangling",
    "start": "3324150",
    "end": "3331980"
  },
  {
    "text": "pointer to nothing I have an attachment object that doesn't point to an s3 object but it has a TTL so eventually",
    "start": "3331980",
    "end": "3340170"
  },
  {
    "text": "that item is going to get picked up by TTL we're going to delete it and then in",
    "start": "3340170",
    "end": "3345450"
  },
  {
    "text": "in a stream processor you can say okay let me look up this SB object if it",
    "start": "3345450",
    "end": "3351900"
  },
  {
    "text": "exists I'm going to delete it if it doesn't exist I don't care that's fine you know that was an attempt to create",
    "start": "3351900",
    "end": "3357810"
  },
  {
    "text": "an attachment that failed okay so this is how you create a placeholder for what",
    "start": "3357810",
    "end": "3363720"
  },
  {
    "text": "would be an attachment then you go to s3 and you actually upload the object and now we know that that object is going to",
    "start": "3363720",
    "end": "3371520"
  },
  {
    "text": "get garbage collected essentially when nobody is referring to it anymore and now in a transaction you can update the",
    "start": "3371520",
    "end": "3380460"
  },
  {
    "text": "item that you have in for the post and add that reference",
    "start": "3380460",
    "end": "3386150"
  },
  {
    "text": "to to the item okay so now let's say",
    "start": "3386150",
    "end": "3392059"
  },
  {
    "start": "3390000",
    "end": "3390000"
  },
  {
    "text": "you're trying to clone the attachment you basically cloning the post you're",
    "start": "3392059",
    "end": "3398210"
  },
  {
    "text": "sharing it or something like that you want to increase the reference count you again will now do that in a transaction",
    "start": "3398210",
    "end": "3404359"
  },
  {
    "text": "you will look at the new posts that you're creating you will create it with that new attachment identifier in its",
    "start": "3404359",
    "end": "3411589"
  },
  {
    "text": "reference set and you would increment the ref count and that will ensure that",
    "start": "3411589",
    "end": "3417859"
  },
  {
    "text": "the reference count is increased and reflects the done but the number of posts that are referring to it and",
    "start": "3417859",
    "end": "3424359"
  },
  {
    "text": "eventually based on your business logic you will decide to delete a post and you",
    "start": "3424359",
    "end": "3429769"
  },
  {
    "text": "will then delete the post and increment the ref count of all the items that are referenced from it all the attachments",
    "start": "3429769",
    "end": "3437089"
  },
  {
    "text": "that are referenced move it let's talk about contention so we said that it's an anti-pattern what can you do",
    "start": "3437089",
    "end": "3442490"
  },
  {
    "text": "so the nice thing about it is that working with transactions also gives you a signal about when your current",
    "start": "3442490",
    "end": "3448549"
  },
  {
    "text": "currency has shown assumptions were false so for example I could have a rule that says hey you know if I'm trying to",
    "start": "3448549",
    "end": "3456710"
  },
  {
    "text": "commit this transaction and I'm colliding on the ref count or if the ref count becomes too large I can just look",
    "start": "3456710",
    "end": "3463220"
  },
  {
    "text": "at the value of that thing I could then say hey you know this media is actually very popular it's time for me to create",
    "start": "3463220",
    "end": "3469460"
  },
  {
    "text": "a new copy of that media and start a new attachment right so you can react to",
    "start": "3469460",
    "end": "3475569"
  },
  {
    "text": "transactional conflict by basically provisioning more media sources and that",
    "start": "3475569",
    "end": "3482900"
  },
  {
    "text": "rule is going to help you also on serving that data okay so that basically",
    "start": "3482900",
    "end": "3489200"
  },
  {
    "text": "concludes that use case and I'd like to",
    "start": "3489200",
    "end": "3496190"
  },
  {
    "text": "thank you for your time if you have more questions about transactions or any of",
    "start": "3496190",
    "end": "3502759"
  },
  {
    "text": "the new features that we released you can contact us on the AWS forums or on Twitter you can also find me on Twitter",
    "start": "3502759",
    "end": "3510799"
  },
  {
    "text": "or LinkedIn by my name and I urge you to go and get the",
    "start": "3510799",
    "end": "3516430"
  },
  {
    "text": "database freedom t-shirt that we have in the swag booth celebrating all the new",
    "start": "3516430",
    "end": "3522760"
  },
  {
    "text": "databases that we releases and give you which give you lots of options so thanks a lot",
    "start": "3522760",
    "end": "3528660"
  },
  {
    "text": "[Applause]",
    "start": "3528660",
    "end": "3533160"
  }
]