[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "hello and welcome everyone my name is",
    "start": "1240",
    "end": "3480"
  },
  {
    "text": "peush and I am a Solutions architect",
    "start": "3480",
    "end": "5480"
  },
  {
    "text": "based out of",
    "start": "5480",
    "end": "6720"
  },
  {
    "text": "uswest this is a series of lightning",
    "start": "6720",
    "end": "9280"
  },
  {
    "text": "talk on ECS and fargate with the",
    "start": "9280",
    "end": "11960"
  },
  {
    "text": "objective of making you all familiar",
    "start": "11960",
    "end": "14280"
  },
  {
    "text": "with Amazon ECS which is a fully managed",
    "start": "14280",
    "end": "17680"
  },
  {
    "text": "container orchestration service today",
    "start": "17680",
    "end": "20640"
  },
  {
    "text": "we'll talk about a way of",
    "start": "20640",
    "end": "22240"
  },
  {
    "text": "interconnecting services using ECS",
    "start": "22240",
    "end": "25199"
  },
  {
    "text": "service",
    "start": "25199",
    "end": "26760"
  },
  {
    "text": "connect connecting Services reliably is",
    "start": "26760",
    "end": "30000"
  },
  {
    "start": "27000",
    "end": "66000"
  },
  {
    "text": "not trivial with containers we typically",
    "start": "30000",
    "end": "32758"
  },
  {
    "text": "use a lot of",
    "start": "32759",
    "end": "34640"
  },
  {
    "text": "microservices as the number of",
    "start": "34640",
    "end": "36760"
  },
  {
    "text": "microservices we create keeps on growing",
    "start": "36760",
    "end": "39719"
  },
  {
    "text": "so does the complexity of communication",
    "start": "39719",
    "end": "42280"
  },
  {
    "text": "between your microservices considering",
    "start": "42280",
    "end": "44960"
  },
  {
    "text": "we may have multiple versions of these",
    "start": "44960",
    "end": "47120"
  },
  {
    "text": "microservices",
    "start": "47120",
    "end": "49039"
  },
  {
    "text": "coexisting in addition the dynamic",
    "start": "49039",
    "end": "51719"
  },
  {
    "text": "nature of underlying infrastructure as",
    "start": "51719",
    "end": "54399"
  },
  {
    "text": "well as the health check which would",
    "start": "54399",
    "end": "56320"
  },
  {
    "text": "remove unhealthy end points that your",
    "start": "56320",
    "end": "58800"
  },
  {
    "text": "application has to re Reon about also",
    "start": "58800",
    "end": "61640"
  },
  {
    "text": "adds to this challenge of reliable",
    "start": "61640",
    "end": "64000"
  },
  {
    "text": "service",
    "start": "64000",
    "end": "65960"
  },
  {
    "text": "communication in the world of Amazon ECS",
    "start": "65960",
    "end": "69119"
  },
  {
    "start": "66000",
    "end": "192000"
  },
  {
    "text": "ecosystem there are a variety of ways to",
    "start": "69119",
    "end": "72119"
  },
  {
    "text": "interconnect Services some of these",
    "start": "72119",
    "end": "74759"
  },
  {
    "text": "options like ECS service Discovery are",
    "start": "74759",
    "end": "78439"
  },
  {
    "text": "easy to get started with you create your",
    "start": "78439",
    "end": "81240"
  },
  {
    "text": "ECS service give it a friendly DNS name",
    "start": "81240",
    "end": "84799"
  },
  {
    "text": "and your application can use the DNS",
    "start": "84799",
    "end": "87159"
  },
  {
    "text": "name to talk to your tasks directly ECS",
    "start": "87159",
    "end": "90759"
  },
  {
    "text": "service Discovery uses Amazon cloud map",
    "start": "90759",
    "end": "93520"
  },
  {
    "text": "in the background which is an interface",
    "start": "93520",
    "end": "95840"
  },
  {
    "text": "to add DNS records to an Amazon Route 53",
    "start": "95840",
    "end": "99640"
  },
  {
    "text": "private hostage Zone there are",
    "start": "99640",
    "end": "102200"
  },
  {
    "text": "shortcomings with Amazon ECS service",
    "start": "102200",
    "end": "104799"
  },
  {
    "text": "Discovery option as they lack features",
    "start": "104799",
    "end": "107079"
  },
  {
    "text": "like traffic dmetry and provide fairly",
    "start": "107079",
    "end": "110200"
  },
  {
    "text": "basic Discovery capability owing to the",
    "start": "110200",
    "end": "112719"
  },
  {
    "text": "DNS limitations in terms of smart",
    "start": "112719",
    "end": "116000"
  },
  {
    "text": "Discovery",
    "start": "116000",
    "end": "117159"
  },
  {
    "text": "capabilities moving on uh there are opt",
    "start": "117159",
    "end": "119840"
  },
  {
    "text": "options like elastic load balancers for",
    "start": "119840",
    "end": "122159"
  },
  {
    "text": "interconnecting services wherein you get",
    "start": "122159",
    "end": "124719"
  },
  {
    "text": "rich traffic metrics features like DS",
    "start": "124719",
    "end": "128239"
  },
  {
    "text": "protection the downside is that for",
    "start": "128239",
    "end": "130920"
  },
  {
    "text": "communication inside the VPC all these",
    "start": "130920",
    "end": "134080"
  },
  {
    "text": "features prove to be an Overkill in lot",
    "start": "134080",
    "end": "136519"
  },
  {
    "text": "of cases but now you have to be",
    "start": "136519",
    "end": "139319"
  },
  {
    "text": "responsible for provisioning managing",
    "start": "139319",
    "end": "141680"
  },
  {
    "text": "this additional infrastructure and it's",
    "start": "141680",
    "end": "144160"
  },
  {
    "text": "in the path of your request flow which",
    "start": "144160",
    "end": "146680"
  },
  {
    "text": "would be something you may look to avoid",
    "start": "146680",
    "end": "148720"
  },
  {
    "text": "especially for renc sensitive",
    "start": "148720",
    "end": "151599"
  },
  {
    "text": "workloads then there is this uh feature",
    "start": "151599",
    "end": "154840"
  },
  {
    "text": "manage service mesh solution which we",
    "start": "154840",
    "end": "157720"
  },
  {
    "text": "have made available for our customers",
    "start": "157720",
    "end": "159720"
  },
  {
    "text": "known as AWS app mesh which relies on an",
    "start": "159720",
    "end": "163440"
  },
  {
    "text": "open-source Envoy proxy sitting next to",
    "start": "163440",
    "end": "166480"
  },
  {
    "text": "your Amazon ECS tasks they collect",
    "start": "166480",
    "end": "170080"
  },
  {
    "text": "metrics on your behalf you have fine",
    "start": "170080",
    "end": "173040"
  },
  {
    "text": "grained traffic controls you can enable",
    "start": "173040",
    "end": "176159"
  },
  {
    "text": "authentication and encryption however",
    "start": "176159",
    "end": "179159"
  },
  {
    "text": "now you have have this added complexity",
    "start": "179159",
    "end": "181959"
  },
  {
    "text": "wherein you are responsible for the",
    "start": "181959",
    "end": "184400"
  },
  {
    "text": "proxy management as well as you now need",
    "start": "184400",
    "end": "187760"
  },
  {
    "text": "to reason about onb proxy",
    "start": "187760",
    "end": "191799"
  },
  {
    "start": "192000",
    "end": "225000"
  },
  {
    "text": "configuration working backwards from our",
    "start": "192159",
    "end": "194599"
  },
  {
    "text": "customer feedback we launched Amazon ECS",
    "start": "194599",
    "end": "197840"
  },
  {
    "text": "service connect which checks all the",
    "start": "197840",
    "end": "200360"
  },
  {
    "text": "boxes it's simple as it offers simple",
    "start": "200360",
    "end": "203720"
  },
  {
    "text": "naming scheme and simple Discovery",
    "start": "203720",
    "end": "206319"
  },
  {
    "text": "mechanism it offers reliable",
    "start": "206319",
    "end": "208840"
  },
  {
    "text": "connectivity with automatic retries for",
    "start": "208840",
    "end": "211799"
  },
  {
    "text": "failure and network level health checks",
    "start": "211799",
    "end": "215080"
  },
  {
    "text": "and it offers Rich metrics both in your",
    "start": "215080",
    "end": "218319"
  },
  {
    "text": "Amazon ECS console as well as on the",
    "start": "218319",
    "end": "221760"
  },
  {
    "text": "Amazon cloudwatch",
    "start": "221760",
    "end": "223959"
  },
  {
    "text": "dashboards next let us zoom into these",
    "start": "223959",
    "end": "227040"
  },
  {
    "start": "225000",
    "end": "261000"
  },
  {
    "text": "Amazon ECS service connect features",
    "start": "227040",
    "end": "229560"
  },
  {
    "text": "starting with Simplicity in terms of",
    "start": "229560",
    "end": "231879"
  },
  {
    "text": "naming scheme and Discovery",
    "start": "231879",
    "end": "234439"
  },
  {
    "text": "mechanism you can assign a friendly name",
    "start": "234439",
    "end": "236879"
  },
  {
    "text": "to your services and services are",
    "start": "236879",
    "end": "239280"
  },
  {
    "text": "organiz organized in name spaces the",
    "start": "239280",
    "end": "242120"
  },
  {
    "text": "clients can use a combination of service",
    "start": "242120",
    "end": "244560"
  },
  {
    "text": "name and name spaces to connect to ECS",
    "start": "244560",
    "end": "247400"
  },
  {
    "text": "Services as shown here these Amazon ECS",
    "start": "247400",
    "end": "251519"
  },
  {
    "text": "Services can span across multiple Amazon",
    "start": "251519",
    "end": "254879"
  },
  {
    "text": "ECS clusters as long as they belong to",
    "start": "254879",
    "end": "257840"
  },
  {
    "text": "the same name space they can talk to",
    "start": "257840",
    "end": "259919"
  },
  {
    "text": "each",
    "start": "259919",
    "end": "261320"
  },
  {
    "text": "other let us see this in action I have",
    "start": "261320",
    "end": "264800"
  },
  {
    "text": "the ECS cluster set up with a Yelp like",
    "start": "264800",
    "end": "267639"
  },
  {
    "text": "voting architecture let letting you vote",
    "start": "267639",
    "end": "270440"
  },
  {
    "text": "on your favorite restaurant deployed on",
    "start": "270440",
    "end": "272720"
  },
  {
    "text": "the ECS cluster with front-end UI",
    "start": "272720",
    "end": "276160"
  },
  {
    "text": "service the UI service talks to the",
    "start": "276160",
    "end": "278720"
  },
  {
    "text": "backend app server the app server in",
    "start": "278720",
    "end": "282120"
  },
  {
    "text": "turn stores the data in post SQL and",
    "start": "282120",
    "end": "285240"
  },
  {
    "text": "redis cach and I also have a cloud map",
    "start": "285240",
    "end": "288840"
  },
  {
    "text": "namespace set up as",
    "start": "288840",
    "end": "290600"
  },
  {
    "text": "well here is the application portal",
    "start": "290600",
    "end": "293600"
  },
  {
    "start": "291000",
    "end": "371000"
  },
  {
    "text": "wherein you can vote on your favorite",
    "start": "293600",
    "end": "295400"
  },
  {
    "text": "restaurant and the pie chart would get",
    "start": "295400",
    "end": "298039"
  },
  {
    "text": "refreshed with your voting pref",
    "start": "298039",
    "end": "300759"
  },
  {
    "text": "reference let's navigate to the AWS",
    "start": "300759",
    "end": "303840"
  },
  {
    "text": "console and in order to enable Amazon",
    "start": "303840",
    "end": "308080"
  },
  {
    "text": "ECS service connect at the time of",
    "start": "308080",
    "end": "310280"
  },
  {
    "text": "creating ECS service within the service",
    "start": "310280",
    "end": "314280"
  },
  {
    "text": "configuration yaml fi you will need this",
    "start": "314280",
    "end": "318080"
  },
  {
    "text": "block of service connect configuration",
    "start": "318080",
    "end": "321080"
  },
  {
    "text": "wherein you turn on service connect and",
    "start": "321080",
    "end": "324199"
  },
  {
    "text": "you specify the cloud map name space",
    "start": "324199",
    "end": "327000"
  },
  {
    "text": "that you want this service to get",
    "start": "327000",
    "end": "328520"
  },
  {
    "text": "registered to",
    "start": "328520",
    "end": "330319"
  },
  {
    "text": "the outcome is that all the services in",
    "start": "330319",
    "end": "332880"
  },
  {
    "text": "this Yelp service connect One internal",
    "start": "332880",
    "end": "335600"
  },
  {
    "text": "name space will be able to talk to this",
    "start": "335600",
    "end": "338479"
  },
  {
    "text": "newly created service and so would this",
    "start": "338479",
    "end": "341880"
  },
  {
    "text": "service be able to talk to every other",
    "start": "341880",
    "end": "344160"
  },
  {
    "text": "service in the configured Nam",
    "start": "344160",
    "end": "346639"
  },
  {
    "text": "space the discovery name gets registered",
    "start": "346639",
    "end": "349880"
  },
  {
    "text": "in the cloud map and is used by clients",
    "start": "349880",
    "end": "351960"
  },
  {
    "text": "to call the service alternatively you",
    "start": "351960",
    "end": "355120"
  },
  {
    "text": "can see the client aliases configured",
    "start": "355120",
    "end": "357880"
  },
  {
    "text": "here an optional set setting which could",
    "start": "357880",
    "end": "360319"
  },
  {
    "text": "be useful for existing clients from",
    "start": "360319",
    "end": "362680"
  },
  {
    "text": "migration standpoint and client Alias",
    "start": "362680",
    "end": "365880"
  },
  {
    "text": "defines a friendlier DNS name which can",
    "start": "365880",
    "end": "368639"
  },
  {
    "text": "be used to call out the",
    "start": "368639",
    "end": "371160"
  },
  {
    "start": "371000",
    "end": "410000"
  },
  {
    "text": "service next is the reliable servico",
    "start": "371160",
    "end": "373919"
  },
  {
    "text": "service connectivity we perform an",
    "start": "373919",
    "end": "376400"
  },
  {
    "text": "outlier detection detecting problems",
    "start": "376400",
    "end": "379319"
  },
  {
    "text": "within individual container and task for",
    "start": "379319",
    "end": "382560"
  },
  {
    "text": "instance when they return 5xx error next",
    "start": "382560",
    "end": "386280"
  },
  {
    "text": "we take those erroneous tasks out of",
    "start": "386280",
    "end": "388840"
  },
  {
    "text": "traffic Route",
    "start": "388840",
    "end": "390039"
  },
  {
    "text": "and all this happens at the network",
    "start": "390039",
    "end": "392160"
  },
  {
    "text": "level additionally Amazon ECS service",
    "start": "392160",
    "end": "395319"
  },
  {
    "text": "connect automatically retries failed",
    "start": "395319",
    "end": "397800"
  },
  {
    "text": "calls so the calling application never",
    "start": "397800",
    "end": "400479"
  },
  {
    "text": "gets to experience the task level issues",
    "start": "400479",
    "end": "402960"
  },
  {
    "text": "for TCP http1 http2 and grpc",
    "start": "402960",
    "end": "409880"
  },
  {
    "text": "connections going back to our three tier",
    "start": "409880",
    "end": "412599"
  },
  {
    "start": "410000",
    "end": "455000"
  },
  {
    "text": "microservices architecture let us take a",
    "start": "412599",
    "end": "415720"
  },
  {
    "text": "look when one of the app server tasks",
    "start": "415720",
    "end": "418360"
  },
  {
    "text": "become unhealthy and hence unreachable",
    "start": "418360",
    "end": "421440"
  },
  {
    "text": "all of a sudden the app server has an",
    "start": "421440",
    "end": "424479"
  },
  {
    "text": "API endpoint that can be used to",
    "start": "424479",
    "end": "426919"
  },
  {
    "text": "dynamically inject fault so that the",
    "start": "426919",
    "end": "429960"
  },
  {
    "text": "subsequent API call would return with",
    "start": "429960",
    "end": "432319"
  },
  {
    "text": "503 response",
    "start": "432319",
    "end": "435560"
  },
  {
    "text": "Cod let's validate that two of the three",
    "start": "435879",
    "end": "439440"
  },
  {
    "text": "app server instances are configured for",
    "start": "439440",
    "end": "442800"
  },
  {
    "text": "fault if you can see the only instance",
    "start": "442800",
    "end": "446280"
  },
  {
    "text": "that's returning HTTP Response Code 200",
    "start": "446280",
    "end": "449639"
  },
  {
    "text": "is the one ending in",
    "start": "449639",
    "end": "452680"
  },
  {
    "start": "455000",
    "end": "505000"
  },
  {
    "text": "9886 now uh the front end calling",
    "start": "455280",
    "end": "458199"
  },
  {
    "text": "service would never see the failed",
    "start": "458199",
    "end": "461120"
  },
  {
    "text": "requests and if we access the",
    "start": "461120",
    "end": "463400"
  },
  {
    "text": "application we see no errors even though",
    "start": "463400",
    "end": "466840"
  },
  {
    "text": "two of the three tasks are returning 503",
    "start": "466840",
    "end": "469599"
  },
  {
    "text": "Response",
    "start": "469599",
    "end": "471120"
  },
  {
    "text": "Code if you inspect the network",
    "start": "471120",
    "end": "475639"
  },
  {
    "text": "traffic while using the application",
    "start": "475639",
    "end": "478960"
  },
  {
    "text": "you'll you see that all the API calls",
    "start": "478960",
    "end": "481479"
  },
  {
    "text": "are returning HTTP 200 status",
    "start": "481479",
    "end": "486360"
  },
  {
    "text": "code behind the scenes uh Amazon ECS",
    "start": "487159",
    "end": "491000"
  },
  {
    "text": "service connect is able to reroute the",
    "start": "491000",
    "end": "493800"
  },
  {
    "text": "app server API request to a different",
    "start": "493800",
    "end": "496080"
  },
  {
    "text": "endpoint which is healthy and therefore",
    "start": "496080",
    "end": "499039"
  },
  {
    "text": "the calling UI service does not see the",
    "start": "499039",
    "end": "501319"
  },
  {
    "text": "failing error on an ongoing",
    "start": "501319",
    "end": "505280"
  },
  {
    "start": "505000",
    "end": "533000"
  },
  {
    "text": "basis next from an observability",
    "start": "505800",
    "end": "508560"
  },
  {
    "text": "standpoint",
    "start": "508560",
    "end": "509840"
  },
  {
    "text": "you get rich Telemetry for TCP HTTP and",
    "start": "509840",
    "end": "513880"
  },
  {
    "text": "grpc metrics either on ECS console",
    "start": "513880",
    "end": "517760"
  },
  {
    "text": "Amazon Cloud watch or any other",
    "start": "517760",
    "end": "520440"
  },
  {
    "text": "thirdparty solution based on your",
    "start": "520440",
    "end": "523120"
  },
  {
    "text": "preference in addition to metrics you",
    "start": "523120",
    "end": "525519"
  },
  {
    "text": "can send logs to your preferred Amazon",
    "start": "525519",
    "end": "527880"
  },
  {
    "text": "ECS log provider using Amazon ECS",
    "start": "527880",
    "end": "531160"
  },
  {
    "text": "service",
    "start": "531160",
    "end": "532680"
  },
  {
    "text": "connect let us navigate to cloudwatch",
    "start": "532680",
    "end": "535320"
  },
  {
    "start": "533000",
    "end": "623000"
  },
  {
    "text": "console and under metrics click on all",
    "start": "535320",
    "end": "538480"
  },
  {
    "text": "metrics",
    "start": "538480",
    "end": "539959"
  },
  {
    "text": "and choose",
    "start": "539959",
    "end": "541680"
  },
  {
    "text": "ECS Amazon ECS service connect brings",
    "start": "541680",
    "end": "545040"
  },
  {
    "text": "more application visibility and you can",
    "start": "545040",
    "end": "547519"
  },
  {
    "text": "now see New Dimensions grouped by",
    "start": "547519",
    "end": "550320"
  },
  {
    "text": "cluster name Discovery name service name",
    "start": "550320",
    "end": "553800"
  },
  {
    "text": "and Target Discovery",
    "start": "553800",
    "end": "555880"
  },
  {
    "text": "name next let us see one of the uh ECS",
    "start": "555880",
    "end": "559800"
  },
  {
    "text": "service named UI",
    "start": "559800",
    "end": "564160"
  },
  {
    "text": "service and you can now see health and",
    "start": "564160",
    "end": "567600"
  },
  {
    "text": "metrics once you enable Amazon service",
    "start": "567600",
    "end": "571040"
  },
  {
    "text": "connect inside health and metrics you",
    "start": "571040",
    "end": "574200"
  },
  {
    "text": "can see the CPU and memory utilization",
    "start": "574200",
    "end": "577480"
  },
  {
    "text": "at the service",
    "start": "577480",
    "end": "578760"
  },
  {
    "text": "level on the outgoing traffic Health",
    "start": "578760",
    "end": "581880"
  },
  {
    "text": "you'll see different uh response codes",
    "start": "581880",
    "end": "584680"
  },
  {
    "text": "returned by your dependent Services how",
    "start": "584680",
    "end": "587279"
  },
  {
    "text": "many requests you have sent to your",
    "start": "587279",
    "end": "589440"
  },
  {
    "text": "dependent Services you'll also see the",
    "start": "589440",
    "end": "592560"
  },
  {
    "text": "response time to receive a response back",
    "start": "592560",
    "end": "595360"
  },
  {
    "text": "from your dependencies and the",
    "start": "595360",
    "end": "597680"
  },
  {
    "text": "associated processed bites",
    "start": "597680",
    "end": "600360"
  },
  {
    "text": "with all this information if anything",
    "start": "600360",
    "end": "602320"
  },
  {
    "text": "goes bad with a specific dependent",
    "start": "602320",
    "end": "604399"
  },
  {
    "text": "service call you'll be able to easily",
    "start": "604399",
    "end": "607160"
  },
  {
    "text": "find that",
    "start": "607160",
    "end": "608360"
  },
  {
    "text": "out that concludes today's talk about a",
    "start": "608360",
    "end": "611680"
  },
  {
    "text": "way of interconnecting services using",
    "start": "611680",
    "end": "613920"
  },
  {
    "text": "Amazon service connect we'll see you",
    "start": "613920",
    "end": "616360"
  },
  {
    "text": "next",
    "start": "616360",
    "end": "618640"
  },
  {
    "text": "time",
    "start": "622360",
    "end": "625360"
  }
]