[
  {
    "text": "Hi, welcome to another episode\nof 'This is My Architecture'.",
    "start": "5592",
    "end": "9585"
  },
  {
    "text": "I'm Jose, and today I'm with \nLucas from Smadex.\nWhat's up, Lucas?",
    "start": "9979",
    "end": "12430"
  },
  {
    "text": "What's up, Jose? \nI'm delighted to be here,\nthank you for the invitation.",
    "start": "12430",
    "end": "14779"
  },
  {
    "text": "What is Smadex?\nWhat do you do there?",
    "start": "15429",
    "end": "17257"
  },
  {
    "text": "Smadex is a programmatic \ndigital marketing company.",
    "start": "17257",
    "end": "20172"
  },
  {
    "text": "We help our clients, advertisers,",
    "start": "20172",
    "end": "22574"
  },
  {
    "text": "to grow their digital businesses\nwith online publicity.",
    "start": "22574",
    "end": "25445"
  },
  {
    "text": "Basically what we like to say\nis that we show the correct ad,",
    "start": "25805",
    "end": "29566"
  },
  {
    "text": "to the correct person,\nat the correct moment.",
    "start": "29566",
    "end": "31428"
  },
  {
    "text": "So, programmatic advertising, \nwhat does that mean?",
    "start": "31428",
    "end": "35381"
  },
  {
    "text": "It's very interesting.\nIt all starts with a user",
    "start": "35381",
    "end": "38370"
  },
  {
    "text": "who visits a website,",
    "start": "40355",
    "end": "43354"
  },
  {
    "text": "or it could be an app too, \nit's the same thing.",
    "start": "44324",
    "end": "47554"
  },
  {
    "text": "When the user visits this website,\nat the moment they visit it",
    "start": "48081",
    "end": "51145"
  },
  {
    "text": "and before the site is ready,\nthat, is during the loading time,",
    "start": "51145",
    "end": "53146"
  },
  {
    "text": "an auction is triggered.",
    "start": "53146",
    "end": "55653"
  },
  {
    "text": "This auction is intended \nto define which ads",
    "start": "55739",
    "end": "59373"
  },
  {
    "text": "will be shown to this user \nfor this particular website.",
    "start": "59374",
    "end": "62148"
  },
  {
    "text": "We received this auction request",
    "start": "62222",
    "end": "65222"
  },
  {
    "text": "and we have only 100 milliseconds \nto respond to this auction.",
    "start": "65430",
    "end": "71410"
  },
  {
    "text": "In those 100 milliseconds \nwe have to decide",
    "start": "72216",
    "end": "73768"
  },
  {
    "text": "if we want to participate \nin the auction or not.",
    "start": "73768",
    "end": "76068"
  },
  {
    "text": "If we're going to participate,\nwhich ads to show.",
    "start": "76522",
    "end": "78530"
  },
  {
    "text": "And finally, how much to bid, \nwhich is very important",
    "start": "78535",
    "end": "81168"
  },
  {
    "text": "Because we want to win the auction,\nbidding the lowest possible amount.",
    "start": "81168",
    "end": "84489"
  },
  {
    "text": "This happens a million times per second.",
    "start": "84489",
    "end": "89354"
  },
  {
    "text": "Once we win the auction \nand the ad is shown,",
    "start": "89956",
    "end": "92994"
  },
  {
    "text": "the user later interacts with that ad.",
    "start": "92994",
    "end": "95066"
  },
  {
    "text": "They can click on it, \ndownload an app, fill out a form.",
    "start": "95066",
    "end": "98550"
  },
  {
    "text": "We track all those events \nin another application",
    "start": "98550",
    "end": "101778"
  },
  {
    "text": "which is another layer,\nall of which is associated",
    "start": "102128",
    "end": "104409"
  },
  {
    "text": "with the original auction \nthrough a unique auction identifier.",
    "start": "104409",
    "end": "108340"
  },
  {
    "text": "And I see you're using \nSpot Instances EC2.",
    "start": "108861",
    "end": "112559"
  },
  {
    "text": "I understand that's for cost optimization.",
    "start": "112559",
    "end": "114589"
  },
  {
    "text": "Yes, cost optimization is \nparamount in this industry,",
    "start": "114589",
    "end": "117578"
  },
  {
    "text": "because with the request \nvolume we manage",
    "start": "117579",
    "end": "120336"
  },
  {
    "text": "and the latency \nthat we have to respect,",
    "start": "120336",
    "end": "122699"
  },
  {
    "text": "we need to be in \nthree different geographical zones",
    "start": "122699",
    "end": "124888"
  },
  {
    "text": "to be as close to the user as possible.",
    "start": "124888",
    "end": "126980"
  },
  {
    "text": "And we have, on average, \n600 instances running at all times.",
    "start": "126980",
    "end": "131198"
  },
  {
    "text": "Therefore, cost is critical.",
    "start": "131198",
    "end": "133308"
  },
  {
    "text": "Tell me a little more.",
    "start": "133863",
    "end": "136023"
  },
  {
    "text": "The interesting thing\n—besides the challenge of latency and volume—",
    "start": "136023",
    "end": "140304"
  },
  {
    "text": "is how to store \nall those requests, right?",
    "start": "140304",
    "end": "143097"
  },
  {
    "text": "Where do we store them to read them later,\nwhen you have to make the relationship?",
    "start": "143097",
    "end": "146495"
  },
  {
    "text": "A few years ago, when we didn't have",
    "start": "146495",
    "end": "148155"
  },
  {
    "text": "a million requests per second,\nwe used Redis.",
    "start": "148155",
    "end": "151076"
  },
  {
    "text": "So when the auction is generated,\nthis bid is saved in a Redis,",
    "start": "151076",
    "end": "154952"
  },
  {
    "text": "with an ID,\nand later is read directly",
    "start": "154952",
    "end": "158359"
  },
  {
    "text": "from the tracking layer, \nwith the same ID, in key-value format.",
    "start": "158359",
    "end": "162088"
  },
  {
    "text": "As Redis functions in memory,\nthe latency is super low,",
    "start": "162088",
    "end": "165127"
  },
  {
    "text": "and everything goes well, or went really well,\nuntil we started to grow.",
    "start": "165127",
    "end": "167989"
  },
  {
    "text": "And what did you do to improve this?",
    "start": "168569",
    "end": "170148"
  },
  {
    "text": "When it started to grow,\nwe realized",
    "start": "170148",
    "end": "172093"
  },
  {
    "text": "that the only way to store it\nwas to linearly scale that Redis.",
    "start": "172093",
    "end": "175542"
  },
  {
    "text": "Scaling linearly \nalso means scaling costs,",
    "start": "175542",
    "end": "178558"
  },
  {
    "text": "which is something we don't want.",
    "start": "178558",
    "end": "180050"
  },
  {
    "text": "So we did a dispersion analysis \nof the time that passes ",
    "start": "180050",
    "end": "184421"
  },
  {
    "text": "between the auction \nand the event we want to track.",
    "start": "184780",
    "end": "187972"
  },
  {
    "text": "We realized that 90% of those events",
    "start": "187973",
    "end": "190580"
  },
  {
    "text": "happen within the first hour after the auction.",
    "start": "190580",
    "end": "195809"
  },
  {
    "text": "So what we said was,\nlet's save an hour of events in Redis,",
    "start": "195809",
    "end": "199531"
  },
  {
    "text": "a super fast in-memory database,",
    "start": "199531",
    "end": "201538"
  },
  {
    "text": "and about the rest, when an event \nthat is older than an hour arrives,",
    "start": "201538",
    "end": "205883"
  },
  {
    "text": "we queue it in an SQS queue \nso that with a Lambda,",
    "start": "205884",
    "end": "210020"
  },
  {
    "text": "which is here in the middle, \nwe can run a query in Athena.",
    "start": "210020",
    "end": "214254"
  },
  {
    "text": "That is to say, we have a hot data layer\nthat is super fast and more costly,",
    "start": "214254",
    "end": "218653"
  },
  {
    "text": "and a cold layer that is less costly,\nbut a lot slower.",
    "start": "218653",
    "end": "222379"
  },
  {
    "text": "But as 90% is here, \nthat's not a problem.",
    "start": "222602",
    "end": "224995"
  },
  {
    "text": "Then a request is queued in SQS,\nwhich triggers a query in Athena,",
    "start": "224995",
    "end": "228922"
  },
  {
    "text": "which connects to a bucket,\nwhich is over here.",
    "start": "228922",
    "end": "231166"
  },
  {
    "text": "This bucket contains \nthe same information",
    "start": "231627",
    "end": "234311"
  },
  {
    "text": "as this Redis because it flushes \nevery minute from the bidding layer.",
    "start": "234311",
    "end": "241402"
  },
  {
    "text": "This bucket is partitioned by the minute, \nso the query goes really well,",
    "start": "241402",
    "end": "245689"
  },
  {
    "text": "because we know what minute \nto go to based on the ID",
    "start": "245690",
    "end": "247866"
  },
  {
    "text": "and that lets us reduce costs",
    "start": "248074",
    "end": "251523"
  },
  {
    "text": "and have coverage \nfor 100% of the events.",
    "start": "251523",
    "end": "253866"
  },
  {
    "text": "It doesn't matter how much time passes\nonce the auction takes place.",
    "start": "253866",
    "end": "257363"
  },
  {
    "text": "I see here another Lambda.",
    "start": "257364",
    "end": "258816"
  },
  {
    "text": "This one, other than using it for Athena,\nwhat do you use it for?",
    "start": "258816",
    "end": "263115"
  },
  {
    "text": "This Lambda is super important\nbecause this information",
    "start": "263115",
    "end": "265759"
  },
  {
    "text": "that travels from the auction layer \nto the Bucket travels in JSON format.",
    "start": "265760",
    "end": "270188"
  },
  {
    "text": "As we want to reduce costs,",
    "start": "270300",
    "end": "271778"
  },
  {
    "text": "and Athena,\nthe pricing model, is by scanned data,",
    "start": "271778",
    "end": "274596"
  },
  {
    "text": "it's important to scan\nthe least amount of data possible.",
    "start": "274596",
    "end": "277327"
  },
  {
    "text": "Therefore, what we do is,\nthis appearance of these files",
    "start": "277327",
    "end": "280372"
  },
  {
    "text": "triggers a Lambda automatically, \nwhich transforms these files into Parquet format.",
    "start": "280530",
    "end": "286088"
  },
  {
    "text": "Therefore, reading through \nAthena is efficient.",
    "start": "286088",
    "end": "288907"
  },
  {
    "text": "We scan very few data,\nand we find events very quickly.",
    "start": "288907",
    "end": "291914"
  },
  {
    "text": "Well, Lucas, I see a platform… \ncost optimization, low latency.",
    "start": "291914",
    "end": "297431"
  },
  {
    "text": "How can it be improved? Any improvement\nyou see for short, medium, or long term?",
    "start": "298244",
    "end": "301819"
  },
  {
    "text": "We are working on two ideas today.",
    "start": "302155",
    "end": "304156"
  },
  {
    "text": "One is to avoid this intermediate step \nof saving the files in JSON",
    "start": "304156",
    "end": "308718"
  },
  {
    "text": "and saving them directly in a binary format,\nwhich could be Parquet,",
    "start": "308718",
    "end": "312189"
  },
  {
    "text": "to avoid this Lambda \nand save even more costs.",
    "start": "312190",
    "end": "314488"
  },
  {
    "text": "The other option is,\ninstead of using Athena,",
    "start": "314488",
    "end": "316656"
  },
  {
    "text": "to use Strict Select and trigger \nthe query directly from SQS",
    "start": "316656",
    "end": "320727"
  },
  {
    "text": "and with this Lambda \nwith Strict Select above the bucket.",
    "start": "320808",
    "end": "323317"
  },
  {
    "text": "Thank you, Lucas, \nfor this explanation.",
    "start": "323317",
    "end": "325274"
  },
  {
    "text": "-It's been a pleasure being here.\n-Thanks a lot.",
    "start": "325274",
    "end": "327590"
  },
  {
    "text": "We'll see you in the next episode of\n'This is My Architecture'.",
    "start": "327591",
    "end": "330568"
  }
]