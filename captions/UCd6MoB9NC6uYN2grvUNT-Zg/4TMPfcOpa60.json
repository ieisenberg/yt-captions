[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "[Music]",
    "start": "140",
    "end": "1160"
  },
  {
    "text": "[Applause]",
    "start": "1160",
    "end": "2910"
  },
  {
    "text": "[Music]",
    "start": "2910",
    "end": "6080"
  },
  {
    "text": "Hello I'm venkatesh senior technical",
    "start": "7040",
    "end": "10740"
  },
  {
    "text": "account manager out of the New York",
    "start": "10740",
    "end": "12719"
  },
  {
    "text": "metro area",
    "start": "12719",
    "end": "14099"
  },
  {
    "text": "today I'm going to show you how to",
    "start": "14099",
    "end": "16859"
  },
  {
    "text": "resolve common time stamp exceptions",
    "start": "16859",
    "end": "19140"
  },
  {
    "text": "that arise when you query a table with",
    "start": "19140",
    "end": "21960"
  },
  {
    "text": "date or timestamp columns in Amazon",
    "start": "21960",
    "end": "24300"
  },
  {
    "text": "Athena let's get started when you query",
    "start": "24300",
    "end": "28800"
  },
  {
    "start": "28000",
    "end": "59000"
  },
  {
    "text": "an Athena table with timestamp data your",
    "start": "28800",
    "end": "32279"
  },
  {
    "text": "query might fail with either of the",
    "start": "32279",
    "end": "34200"
  },
  {
    "text": "following exceptions",
    "start": "34200",
    "end": "36059"
  },
  {
    "text": "first you can get a syntax error when",
    "start": "36059",
    "end": "38520"
  },
  {
    "text": "you use a logical operator such as",
    "start": "38520",
    "end": "40800"
  },
  {
    "text": "greater than or less than between",
    "start": "40800",
    "end": "43260"
  },
  {
    "text": "timestamp and string values in your",
    "start": "43260",
    "end": "45540"
  },
  {
    "text": "query second you can get an invalid cast",
    "start": "45540",
    "end": "48300"
  },
  {
    "text": "argument when you cast a column with",
    "start": "48300",
    "end": "51120"
  },
  {
    "text": "data type that's not supported by Athena",
    "start": "51120",
    "end": "55079"
  },
  {
    "text": "I'm going to show you how to resolve",
    "start": "55079",
    "end": "57360"
  },
  {
    "text": "these two common issues",
    "start": "57360",
    "end": "59520"
  },
  {
    "start": "59000",
    "end": "169000"
  },
  {
    "text": "log into the AWS Management console and",
    "start": "59520",
    "end": "63239"
  },
  {
    "text": "navigate to the Athena console",
    "start": "63239",
    "end": "66180"
  },
  {
    "text": "select the query editor we'll use the",
    "start": "66180",
    "end": "69420"
  },
  {
    "text": "default values for the database and data",
    "start": "69420",
    "end": "72119"
  },
  {
    "text": "source but you can also choose your own",
    "start": "72119",
    "end": "74820"
  },
  {
    "text": "source and database",
    "start": "74820",
    "end": "77520"
  },
  {
    "text": "let me create a test table in Athena",
    "start": "77520",
    "end": "80100"
  },
  {
    "text": "with timestamp columns",
    "start": "80100",
    "end": "83340"
  },
  {
    "text": "note that we are parsing the string as",
    "start": "83340",
    "end": "86100"
  },
  {
    "text": "date and storing it in the table",
    "start": "86100",
    "end": "89520"
  },
  {
    "text": "the table test data set 1 is created",
    "start": "89520",
    "end": "93540"
  },
  {
    "text": "you can find the table under the tables",
    "start": "93540",
    "end": "96299"
  },
  {
    "text": "and views",
    "start": "96299",
    "end": "98159"
  },
  {
    "text": "you can right click on the dots on the",
    "start": "98159",
    "end": "100680"
  },
  {
    "text": "side of the table to preview the table",
    "start": "100680",
    "end": "102900"
  },
  {
    "text": "to check that you have created three",
    "start": "102900",
    "end": "105180"
  },
  {
    "text": "rows of test data",
    "start": "105180",
    "end": "107579"
  },
  {
    "text": "now that you have the data let's run a",
    "start": "107579",
    "end": "110880"
  },
  {
    "text": "query to get some data that's filtered",
    "start": "110880",
    "end": "113340"
  },
  {
    "text": "based on the timestamp column",
    "start": "113340",
    "end": "116399"
  },
  {
    "text": "let us run this select query",
    "start": "116399",
    "end": "120380"
  },
  {
    "text": "now you get a syntax error",
    "start": "121500",
    "end": "124920"
  },
  {
    "text": "you get this error because Athena",
    "start": "124920",
    "end": "127860"
  },
  {
    "text": "requires you to use Java timestamp",
    "start": "127860",
    "end": "130800"
  },
  {
    "text": "format",
    "start": "130800",
    "end": "132120"
  },
  {
    "text": "you can use Presto's data and timestamp",
    "start": "132120",
    "end": "134459"
  },
  {
    "text": "function or Cache function",
    "start": "134459",
    "end": "137160"
  },
  {
    "text": "convert string to timestamp in the query",
    "start": "137160",
    "end": "140280"
  },
  {
    "text": "filter condition",
    "start": "140280",
    "end": "141780"
  },
  {
    "text": "please note",
    "start": "141780",
    "end": "143400"
  },
  {
    "text": "Presto or Presto DB is an open source",
    "start": "143400",
    "end": "146840"
  },
  {
    "text": "distributed SQL query engine on which",
    "start": "146840",
    "end": "150540"
  },
  {
    "text": "Athena is based",
    "start": "150540",
    "end": "153239"
  },
  {
    "text": "now let's run the query by casting the",
    "start": "153239",
    "end": "156300"
  },
  {
    "text": "value as a timestamp in a where clause",
    "start": "156300",
    "end": "160800"
  },
  {
    "text": "now I get two rows that are less than",
    "start": "160800",
    "end": "163980"
  },
  {
    "text": "the date time which was specified in the",
    "start": "163980",
    "end": "166080"
  },
  {
    "text": "query",
    "start": "166080",
    "end": "166860"
  },
  {
    "text": "it's working as expected now",
    "start": "166860",
    "end": "170599"
  },
  {
    "start": "169000",
    "end": "246000"
  },
  {
    "text": "let's take the second example",
    "start": "170879",
    "end": "173700"
  },
  {
    "text": "let us create a test table where",
    "start": "173700",
    "end": "175980"
  },
  {
    "text": "timestamp column is stored as a string",
    "start": "175980",
    "end": "178319"
  },
  {
    "text": "not parsed and stored in Java timestamp",
    "start": "178319",
    "end": "181560"
  },
  {
    "text": "format",
    "start": "181560",
    "end": "183239"
  },
  {
    "text": "you can check the column data types by",
    "start": "183239",
    "end": "185940"
  },
  {
    "text": "viewing the test data to table",
    "start": "185940",
    "end": "187440"
  },
  {
    "text": "information on the right hand sidebar",
    "start": "187440",
    "end": "190739"
  },
  {
    "text": "you see that the timestamp value is",
    "start": "190739",
    "end": "193080"
  },
  {
    "text": "stored as a where care data type",
    "start": "193080",
    "end": "196440"
  },
  {
    "text": "let us query the data by casting test",
    "start": "196440",
    "end": "200519"
  },
  {
    "text": "timestamp to column as a date timestamp",
    "start": "200519",
    "end": "203819"
  },
  {
    "text": "value",
    "start": "203819",
    "end": "205440"
  },
  {
    "text": "now you'll see the error invalid cast",
    "start": "205440",
    "end": "208980"
  },
  {
    "text": "argument",
    "start": "208980",
    "end": "210420"
  },
  {
    "text": "this is because of casting on a column",
    "start": "210420",
    "end": "213540"
  },
  {
    "text": "with data type that's not supported by",
    "start": "213540",
    "end": "216840"
  },
  {
    "text": "Athena",
    "start": "216840",
    "end": "218879"
  },
  {
    "text": "now",
    "start": "218879",
    "end": "220440"
  },
  {
    "text": "let us use Presto's date and time",
    "start": "220440",
    "end": "222599"
  },
  {
    "text": "functions to read the column as",
    "start": "222599",
    "end": "225239"
  },
  {
    "text": "timestamp in your query because the",
    "start": "225239",
    "end": "228060"
  },
  {
    "text": "column is stored as a string",
    "start": "228060",
    "end": "230640"
  },
  {
    "text": "run the query with Presto's date parse",
    "start": "230640",
    "end": "234659"
  },
  {
    "text": "function",
    "start": "234659",
    "end": "235799"
  },
  {
    "text": "which you can parse a string that",
    "start": "235799",
    "end": "238379"
  },
  {
    "text": "contains a date in specific format",
    "start": "238379",
    "end": "241980"
  },
  {
    "text": "this Returns the timestamp in Java",
    "start": "241980",
    "end": "245099"
  },
  {
    "text": "format",
    "start": "245099",
    "end": "246840"
  },
  {
    "start": "246000",
    "end": "276000"
  },
  {
    "text": "so now you know how to resolve common",
    "start": "246840",
    "end": "250379"
  },
  {
    "text": "time stamp exceptions that arise when",
    "start": "250379",
    "end": "253739"
  },
  {
    "text": "you query a table with timestamp in",
    "start": "253739",
    "end": "256500"
  },
  {
    "text": "Amazon Athena",
    "start": "256500",
    "end": "258479"
  },
  {
    "text": "thanks for watching and happy cloud",
    "start": "258479",
    "end": "261359"
  },
  {
    "text": "computing from all of us here at AWS",
    "start": "261359",
    "end": "264890"
  },
  {
    "text": "[Music]",
    "start": "264890",
    "end": "265910"
  },
  {
    "text": "[Applause]",
    "start": "265910",
    "end": "267660"
  },
  {
    "text": "[Music]",
    "start": "267660",
    "end": "270829"
  },
  {
    "text": "[Music]",
    "start": "272870",
    "end": "276050"
  }
]