[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "5040"
  },
  {
    "text": "many startups",
    "start": "5040",
    "end": "6080"
  },
  {
    "text": "need to expose their technology services",
    "start": "6080",
    "end": "8320"
  },
  {
    "text": "to developers",
    "start": "8320",
    "end": "9200"
  },
  {
    "text": "as a public api the reasons can be",
    "start": "9200",
    "end": "12000"
  },
  {
    "text": "monetization",
    "start": "12000",
    "end": "13200"
  },
  {
    "text": "visibility and engagement that results",
    "start": "13200",
    "end": "15759"
  },
  {
    "text": "in growth of the application",
    "start": "15759",
    "end": "17119"
  },
  {
    "text": "as developers you need to address a wide",
    "start": "17119",
    "end": "19680"
  },
  {
    "text": "range of requirements when building an",
    "start": "19680",
    "end": "21439"
  },
  {
    "text": "api",
    "start": "21439",
    "end": "22400"
  },
  {
    "text": "prioritizing important requirements and",
    "start": "22400",
    "end": "24720"
  },
  {
    "text": "selecting the right implementation",
    "start": "24720",
    "end": "26320"
  },
  {
    "text": "options can be challenging",
    "start": "26320",
    "end": "28480"
  },
  {
    "text": "the purpose of this video is to help",
    "start": "28480",
    "end": "30240"
  },
  {
    "text": "startups appreciate the important",
    "start": "30240",
    "end": "32000"
  },
  {
    "text": "elements of building a public api",
    "start": "32000",
    "end": "34399"
  },
  {
    "text": "and how to do so on aws my name is rob",
    "start": "34399",
    "end": "37280"
  },
  {
    "text": "defeo",
    "start": "37280",
    "end": "38000"
  },
  {
    "text": "and i'm a startup advocate at amazon web",
    "start": "38000",
    "end": "39920"
  },
  {
    "text": "services i'm the host of the startup",
    "start": "39920",
    "end": "41760"
  },
  {
    "text": "engineering podcast",
    "start": "41760",
    "end": "43120"
  },
  {
    "text": "based on my experience working with many",
    "start": "43120",
    "end": "44960"
  },
  {
    "text": "startups i will cover how developers",
    "start": "44960",
    "end": "47280"
  },
  {
    "text": "build public apis on aws",
    "start": "47280",
    "end": "49520"
  },
  {
    "text": "before developing a public api you need",
    "start": "49520",
    "end": "51920"
  },
  {
    "text": "to consider a few important factors",
    "start": "51920",
    "end": "54239"
  },
  {
    "text": "to make sure the public apis are simple",
    "start": "54239",
    "end": "56640"
  },
  {
    "text": "secure",
    "start": "56640",
    "end": "57280"
  },
  {
    "text": "and scalable the first factor is that",
    "start": "57280",
    "end": "60079"
  },
  {
    "start": "58000",
    "end": "148000"
  },
  {
    "text": "users of public apis are usually",
    "start": "60079",
    "end": "62320"
  },
  {
    "text": "developers",
    "start": "62320",
    "end": "63359"
  },
  {
    "text": "so it's important to build apis that are",
    "start": "63359",
    "end": "65760"
  },
  {
    "text": "simple and intuitive for developers",
    "start": "65760",
    "end": "68159"
  },
  {
    "text": "developers usually adopt api standards",
    "start": "68159",
    "end": "70880"
  },
  {
    "text": "that have necessary",
    "start": "70880",
    "end": "72080"
  },
  {
    "text": "tools frameworks documentation and",
    "start": "72080",
    "end": "74960"
  },
  {
    "text": "community support",
    "start": "74960",
    "end": "76799"
  },
  {
    "text": "rest and graphql are popular standards",
    "start": "76799",
    "end": "79360"
  },
  {
    "text": "for building apis",
    "start": "79360",
    "end": "81280"
  },
  {
    "text": "second is that as public apis are the",
    "start": "81280",
    "end": "84000"
  },
  {
    "text": "main interface point between clients and",
    "start": "84000",
    "end": "86400"
  },
  {
    "text": "back-end services",
    "start": "86400",
    "end": "87920"
  },
  {
    "text": "their throughput depends on factors like",
    "start": "87920",
    "end": "90240"
  },
  {
    "text": "number of users",
    "start": "90240",
    "end": "91439"
  },
  {
    "text": "and activity and front-ends consequently",
    "start": "91439",
    "end": "94240"
  },
  {
    "text": "apis need to scale from handling a few",
    "start": "94240",
    "end": "96640"
  },
  {
    "text": "requests",
    "start": "96640",
    "end": "97439"
  },
  {
    "text": "to millions within a short period of",
    "start": "97439",
    "end": "99200"
  },
  {
    "text": "time the third factor",
    "start": "99200",
    "end": "101439"
  },
  {
    "text": "is that public apis need to be secure",
    "start": "101439",
    "end": "104079"
  },
  {
    "text": "since they usually expose",
    "start": "104079",
    "end": "105680"
  },
  {
    "text": "back-end data to customers or clients",
    "start": "105680",
    "end": "108560"
  },
  {
    "text": "that have access",
    "start": "108560",
    "end": "110240"
  },
  {
    "text": "hence the importance of authentication",
    "start": "110240",
    "end": "112240"
  },
  {
    "text": "and authorization of users",
    "start": "112240",
    "end": "114159"
  },
  {
    "text": "as api usage involves transfer of data",
    "start": "114159",
    "end": "116960"
  },
  {
    "text": "between clients",
    "start": "116960",
    "end": "117920"
  },
  {
    "text": "and servers encryption during transit is",
    "start": "117920",
    "end": "121119"
  },
  {
    "text": "also critical",
    "start": "121119",
    "end": "122719"
  },
  {
    "text": "fourth is that because organizations",
    "start": "122719",
    "end": "124880"
  },
  {
    "text": "expose the same public api",
    "start": "124880",
    "end": "126719"
  },
  {
    "text": "to many customers simultaneously they",
    "start": "126719",
    "end": "128720"
  },
  {
    "text": "need to make sure that a single",
    "start": "128720",
    "end": "130239"
  },
  {
    "text": "organization's usage of the api",
    "start": "130239",
    "end": "132319"
  },
  {
    "text": "does not impact others therefore it's",
    "start": "132319",
    "end": "134640"
  },
  {
    "text": "important to use features that enable",
    "start": "134640",
    "end": "136560"
  },
  {
    "text": "multi-tenant design",
    "start": "136560",
    "end": "138160"
  },
  {
    "text": "the final factor is that when a startup",
    "start": "138160",
    "end": "140640"
  },
  {
    "text": "adds more features and functionality to",
    "start": "140640",
    "end": "142720"
  },
  {
    "text": "their products",
    "start": "142720",
    "end": "143760"
  },
  {
    "text": "apis tend to change and new versions are",
    "start": "143760",
    "end": "146720"
  },
  {
    "text": "released at fast pace",
    "start": "146720",
    "end": "148239"
  },
  {
    "start": "148000",
    "end": "313000"
  },
  {
    "text": "public api developers likely need to",
    "start": "148239",
    "end": "150640"
  },
  {
    "text": "host multiple versions of api",
    "start": "150640",
    "end": "152800"
  },
  {
    "text": "simultaneously and a smooth migration of",
    "start": "152800",
    "end": "155760"
  },
  {
    "text": "clients from older to newer versions",
    "start": "155760",
    "end": "158400"
  },
  {
    "text": "now that you understand the important",
    "start": "158400",
    "end": "160000"
  },
  {
    "text": "elements to consider we will explore the",
    "start": "160000",
    "end": "162400"
  },
  {
    "text": "various integration options",
    "start": "162400",
    "end": "164160"
  },
  {
    "text": "for exposing public apis to end users",
    "start": "164160",
    "end": "167840"
  },
  {
    "text": "developers building modern applications",
    "start": "167840",
    "end": "170400"
  },
  {
    "text": "expose",
    "start": "170400",
    "end": "170959"
  },
  {
    "text": "their public apis using rest and or",
    "start": "170959",
    "end": "173920"
  },
  {
    "text": "graphql",
    "start": "173920",
    "end": "175599"
  },
  {
    "text": "rest or representational state transfer",
    "start": "175599",
    "end": "178800"
  },
  {
    "text": "is a software architectural style that",
    "start": "178800",
    "end": "181040"
  },
  {
    "text": "defines a set of constraints to be used",
    "start": "181040",
    "end": "183360"
  },
  {
    "text": "for creating web services",
    "start": "183360",
    "end": "185280"
  },
  {
    "text": "over http for retrieving data",
    "start": "185280",
    "end": "188319"
  },
  {
    "text": "and these are also called resources",
    "start": "188319",
    "end": "190879"
  },
  {
    "text": "graphql",
    "start": "190879",
    "end": "191840"
  },
  {
    "text": "is an open source data query and",
    "start": "191840",
    "end": "193840"
  },
  {
    "text": "manipulation language",
    "start": "193840",
    "end": "195360"
  },
  {
    "text": "for apis and a runtime for fulfilling",
    "start": "195360",
    "end": "198239"
  },
  {
    "text": "queries with existing data",
    "start": "198239",
    "end": "200879"
  },
  {
    "text": "to decide whether you need to expose",
    "start": "200879",
    "end": "203040"
  },
  {
    "text": "your public api",
    "start": "203040",
    "end": "204159"
  },
  {
    "text": "as a rest or graphql endpoint think of",
    "start": "204159",
    "end": "207280"
  },
  {
    "text": "your users",
    "start": "207280",
    "end": "208319"
  },
  {
    "text": "and technology preferences for data",
    "start": "208319",
    "end": "210640"
  },
  {
    "text": "fetching",
    "start": "210640",
    "end": "211360"
  },
  {
    "text": "error handling and caching rest api",
    "start": "211360",
    "end": "214720"
  },
  {
    "text": "is based on well-known http methods like",
    "start": "214720",
    "end": "217840"
  },
  {
    "text": "get",
    "start": "217840",
    "end": "218799"
  },
  {
    "text": "post put and delete the map to create",
    "start": "218799",
    "end": "223040"
  },
  {
    "text": "read update and delete operations",
    "start": "223040",
    "end": "226720"
  },
  {
    "text": "graphql data fetching is based on a set",
    "start": "226720",
    "end": "229440"
  },
  {
    "text": "of queries and schemas defined by the",
    "start": "229440",
    "end": "231760"
  },
  {
    "text": "developer",
    "start": "231760",
    "end": "232560"
  },
  {
    "text": "to expose relevant data in a typical",
    "start": "232560",
    "end": "235120"
  },
  {
    "text": "rest api",
    "start": "235120",
    "end": "236159"
  },
  {
    "text": "to fetch or retrieve data from a server",
    "start": "236159",
    "end": "238319"
  },
  {
    "text": "we end up making requests to multiple",
    "start": "238319",
    "end": "240239"
  },
  {
    "text": "endpoints",
    "start": "240239",
    "end": "241360"
  },
  {
    "text": "but with graphql we only have one",
    "start": "241360",
    "end": "244000"
  },
  {
    "text": "endpoint",
    "start": "244000",
    "end": "244720"
  },
  {
    "text": "with which we will access data on a",
    "start": "244720",
    "end": "246480"
  },
  {
    "text": "server with a single request",
    "start": "246480",
    "end": "248560"
  },
  {
    "text": "we can get the object and its related",
    "start": "248560",
    "end": "250480"
  },
  {
    "text": "objects",
    "start": "250480",
    "end": "252080"
  },
  {
    "text": "while rest apis can provide multiple",
    "start": "252080",
    "end": "254000"
  },
  {
    "text": "error codes it's always response code",
    "start": "254000",
    "end": "256320"
  },
  {
    "text": "200 in the case of graphql",
    "start": "256320",
    "end": "258320"
  },
  {
    "text": "apis the response body contains the",
    "start": "258320",
    "end": "261199"
  },
  {
    "text": "error with the details",
    "start": "261199",
    "end": "262960"
  },
  {
    "text": "since http protocol already implements",
    "start": "262960",
    "end": "265600"
  },
  {
    "text": "caching",
    "start": "265600",
    "end": "266560"
  },
  {
    "text": "and rest is implemented using http the",
    "start": "266560",
    "end": "269680"
  },
  {
    "text": "client can use http caching",
    "start": "269680",
    "end": "271919"
  },
  {
    "text": "to avoid re-fetching resources graphql",
    "start": "271919",
    "end": "275600"
  },
  {
    "text": "has no caching mechanism in place",
    "start": "275600",
    "end": "278160"
  },
  {
    "text": "leaving the clients with the",
    "start": "278160",
    "end": "279600"
  },
  {
    "text": "responsibility of taking care of caching",
    "start": "279600",
    "end": "281919"
  },
  {
    "text": "on their end",
    "start": "281919",
    "end": "283440"
  },
  {
    "text": "you also need to factor in that graphql",
    "start": "283440",
    "end": "286160"
  },
  {
    "text": "apis",
    "start": "286160",
    "end": "286880"
  },
  {
    "text": "require a very clear definition of",
    "start": "286880",
    "end": "288800"
  },
  {
    "text": "schemas and implementation of reads",
    "start": "288800",
    "end": "291360"
  },
  {
    "text": "writes and updates also known as queries",
    "start": "291360",
    "end": "294240"
  },
  {
    "text": "and mutations",
    "start": "294240",
    "end": "295600"
  },
  {
    "text": "for the back end integration conversely",
    "start": "295600",
    "end": "298320"
  },
  {
    "text": "rest apis",
    "start": "298320",
    "end": "299520"
  },
  {
    "text": "do not impose any strict standards on",
    "start": "299520",
    "end": "302080"
  },
  {
    "text": "integration",
    "start": "302080",
    "end": "303440"
  },
  {
    "text": "while each option has its pros and cons",
    "start": "303440",
    "end": "305919"
  },
  {
    "text": "the two are not mutually exclusive",
    "start": "305919",
    "end": "308240"
  },
  {
    "text": "it's possible to expose a service with",
    "start": "308240",
    "end": "310479"
  },
  {
    "text": "both rest",
    "start": "310479",
    "end": "311280"
  },
  {
    "text": "and graphql apis at the same time now",
    "start": "311280",
    "end": "314400"
  },
  {
    "start": "313000",
    "end": "585000"
  },
  {
    "text": "that you have reviewed the integration",
    "start": "314400",
    "end": "316160"
  },
  {
    "text": "options",
    "start": "316160",
    "end": "316960"
  },
  {
    "text": "let's dive into how to build them on aws",
    "start": "316960",
    "end": "320000"
  },
  {
    "text": "for developers on aws solutions for",
    "start": "320000",
    "end": "322639"
  },
  {
    "text": "building public apis",
    "start": "322639",
    "end": "324080"
  },
  {
    "text": "fall in two categories the first",
    "start": "324080",
    "end": "326720"
  },
  {
    "text": "category",
    "start": "326720",
    "end": "327440"
  },
  {
    "text": "is to use a fully managed service such",
    "start": "327440",
    "end": "329520"
  },
  {
    "text": "as amazon api gateway",
    "start": "329520",
    "end": "331520"
  },
  {
    "text": "for rest apis or aws appsync for graphql",
    "start": "331520",
    "end": "335120"
  },
  {
    "text": "apis",
    "start": "335120",
    "end": "336479"
  },
  {
    "text": "these managed services are built based",
    "start": "336479",
    "end": "338560"
  },
  {
    "text": "on our experience working with thousands",
    "start": "338560",
    "end": "340479"
  },
  {
    "text": "of startups",
    "start": "340479",
    "end": "341840"
  },
  {
    "text": "they incorporate the most frequently",
    "start": "341840",
    "end": "343520"
  },
  {
    "text": "requested features",
    "start": "343520",
    "end": "344960"
  },
  {
    "text": "and are a great option since you can",
    "start": "344960",
    "end": "346639"
  },
  {
    "text": "build simple secure",
    "start": "346639",
    "end": "348479"
  },
  {
    "text": "and scalable apis with minimal effort",
    "start": "348479",
    "end": "351199"
  },
  {
    "text": "the second category",
    "start": "351199",
    "end": "352720"
  },
  {
    "text": "is to build the api interface on your",
    "start": "352720",
    "end": "355039"
  },
  {
    "text": "own using various aws components such as",
    "start": "355039",
    "end": "357680"
  },
  {
    "text": "compute",
    "start": "357680",
    "end": "358400"
  },
  {
    "text": "and load balancers as building blocks to",
    "start": "358400",
    "end": "360880"
  },
  {
    "text": "host the service",
    "start": "360880",
    "end": "362720"
  },
  {
    "text": "there are also several open source",
    "start": "362720",
    "end": "364880"
  },
  {
    "text": "language specific frameworks",
    "start": "364880",
    "end": "366479"
  },
  {
    "text": "that you can host on aws using those",
    "start": "366479",
    "end": "369199"
  },
  {
    "text": "same building blocks",
    "start": "369199",
    "end": "370960"
  },
  {
    "text": "choosing to build or host an open source",
    "start": "370960",
    "end": "373120"
  },
  {
    "text": "framework provides a higher flexibility",
    "start": "373120",
    "end": "375600"
  },
  {
    "text": "and control but comes with the",
    "start": "375600",
    "end": "377520"
  },
  {
    "text": "operational burden of managing the",
    "start": "377520",
    "end": "379360"
  },
  {
    "text": "infrastructure",
    "start": "379360",
    "end": "380000"
  },
  {
    "text": "yourself at aws we encourage our",
    "start": "380000",
    "end": "383360"
  },
  {
    "text": "customers to avoid",
    "start": "383360",
    "end": "384759"
  },
  {
    "text": "undifferentiated heavy lifting in their",
    "start": "384759",
    "end": "386880"
  },
  {
    "text": "journey",
    "start": "386880",
    "end": "387840"
  },
  {
    "text": "so we recommend using a fully managed",
    "start": "387840",
    "end": "390000"
  },
  {
    "text": "service for building an api",
    "start": "390000",
    "end": "391759"
  },
  {
    "text": "there are two managed service options to",
    "start": "391759",
    "end": "393600"
  },
  {
    "text": "build public apis",
    "start": "393600",
    "end": "394960"
  },
  {
    "text": "on aws for rest apis the amazon api",
    "start": "394960",
    "end": "399039"
  },
  {
    "text": "gateway service",
    "start": "399039",
    "end": "400319"
  },
  {
    "text": "and for graphql apis the aws app sync",
    "start": "400319",
    "end": "403120"
  },
  {
    "text": "service",
    "start": "403120",
    "end": "404080"
  },
  {
    "text": "for building rest-based apis we",
    "start": "404080",
    "end": "406400"
  },
  {
    "text": "recommend amazon api gateway",
    "start": "406400",
    "end": "408800"
  },
  {
    "text": "a fully managed service that makes it",
    "start": "408800",
    "end": "410800"
  },
  {
    "text": "easy for developers to create",
    "start": "410800",
    "end": "412800"
  },
  {
    "text": "publish maintain monitor and secure apis",
    "start": "412800",
    "end": "416639"
  },
  {
    "text": "at any scale",
    "start": "416639",
    "end": "418560"
  },
  {
    "text": "api gateway handles all the tasks",
    "start": "418560",
    "end": "420560"
  },
  {
    "text": "involved in accepting",
    "start": "420560",
    "end": "422080"
  },
  {
    "text": "and processing up to hundreds or",
    "start": "422080",
    "end": "424080"
  },
  {
    "text": "thousands of concurrent api calls",
    "start": "424080",
    "end": "426240"
  },
  {
    "text": "including traffic management",
    "start": "426240",
    "end": "428000"
  },
  {
    "text": "authorization",
    "start": "428000",
    "end": "429360"
  },
  {
    "text": "access control throttling monitoring",
    "start": "429360",
    "end": "432479"
  },
  {
    "text": "and api version management the aws api",
    "start": "432479",
    "end": "435919"
  },
  {
    "text": "gateway",
    "start": "435919",
    "end": "436639"
  },
  {
    "text": "enables developers to build multi-tenant",
    "start": "436639",
    "end": "438960"
  },
  {
    "text": "systems",
    "start": "438960",
    "end": "439840"
  },
  {
    "text": "by providing features like request",
    "start": "439840",
    "end": "441680"
  },
  {
    "text": "throttling monitoring",
    "start": "441680",
    "end": "443840"
  },
  {
    "text": "logging and tracing for simplifying rest",
    "start": "443840",
    "end": "447199"
  },
  {
    "text": "api integration",
    "start": "447199",
    "end": "448560"
  },
  {
    "text": "the api gateway can generate client sdks",
    "start": "448560",
    "end": "451840"
  },
  {
    "text": "for a number of platforms to quickly",
    "start": "451840",
    "end": "454080"
  },
  {
    "text": "test new apis for your applications",
    "start": "454080",
    "end": "456960"
  },
  {
    "text": "and distribute to third-party developers",
    "start": "456960",
    "end": "459440"
  },
  {
    "text": "for building graphql based apis",
    "start": "459440",
    "end": "461919"
  },
  {
    "text": "we recommend aws appsing which is a",
    "start": "461919",
    "end": "464160"
  },
  {
    "text": "managed service that uses graphql",
    "start": "464160",
    "end": "466400"
  },
  {
    "text": "to make it easy for applications to get",
    "start": "466400",
    "end": "468639"
  },
  {
    "text": "exactly the data they need",
    "start": "468639",
    "end": "470479"
  },
  {
    "text": "with appsync you can build scalable",
    "start": "470479",
    "end": "472639"
  },
  {
    "text": "applications",
    "start": "472639",
    "end": "473840"
  },
  {
    "text": "including those requiring real-time",
    "start": "473840",
    "end": "475840"
  },
  {
    "text": "updates on a range of data sources",
    "start": "475840",
    "end": "478080"
  },
  {
    "text": "such as nosql data stores relational",
    "start": "478080",
    "end": "480800"
  },
  {
    "text": "databases",
    "start": "480800",
    "end": "482160"
  },
  {
    "text": "http apis and your custom data sources",
    "start": "482160",
    "end": "485199"
  },
  {
    "text": "with aws lambda",
    "start": "485199",
    "end": "486800"
  },
  {
    "text": "for mobile and web apps appsync",
    "start": "486800",
    "end": "489199"
  },
  {
    "text": "conditionally provides",
    "start": "489199",
    "end": "490240"
  },
  {
    "text": "local data access when devices go",
    "start": "490240",
    "end": "492319"
  },
  {
    "text": "offline",
    "start": "492319",
    "end": "493280"
  },
  {
    "text": "and data synchronization when they're",
    "start": "493280",
    "end": "495039"
  },
  {
    "text": "finally back online",
    "start": "495039",
    "end": "496319"
  },
  {
    "text": "appsync also provides optional",
    "start": "496319",
    "end": "498720"
  },
  {
    "text": "server-side caching",
    "start": "498720",
    "end": "500319"
  },
  {
    "text": "eliminating the need to roll your own",
    "start": "500319",
    "end": "502400"
  },
  {
    "text": "solution",
    "start": "502400",
    "end": "503599"
  },
  {
    "text": "both api gateway and appsync enhance",
    "start": "503599",
    "end": "506160"
  },
  {
    "text": "developer experience",
    "start": "506160",
    "end": "507440"
  },
  {
    "text": "by making integration easy with backend",
    "start": "507440",
    "end": "510000"
  },
  {
    "text": "services",
    "start": "510000",
    "end": "511440"
  },
  {
    "text": "both services scale from a few users to",
    "start": "511440",
    "end": "514240"
  },
  {
    "text": "millions without requiring developers",
    "start": "514240",
    "end": "516640"
  },
  {
    "text": "to make code configuration changes",
    "start": "516640",
    "end": "518800"
  },
  {
    "text": "security services",
    "start": "518800",
    "end": "520000"
  },
  {
    "text": "like aws im and amazon cognito",
    "start": "520000",
    "end": "523360"
  },
  {
    "text": "are seamlessly integrated into these",
    "start": "523360",
    "end": "525120"
  },
  {
    "text": "services startups need the ability to",
    "start": "525120",
    "end": "527680"
  },
  {
    "text": "build",
    "start": "527680",
    "end": "528399"
  },
  {
    "text": "simple secure and scalable public apis",
    "start": "528399",
    "end": "531920"
  },
  {
    "text": "with minimal effort the amazon api",
    "start": "531920",
    "end": "534240"
  },
  {
    "text": "gateway",
    "start": "534240",
    "end": "534959"
  },
  {
    "text": "and the aws appsync provides serverless",
    "start": "534959",
    "end": "537360"
  },
  {
    "text": "platforms",
    "start": "537360",
    "end": "538399"
  },
  {
    "text": "that allow you to focus on building your",
    "start": "538399",
    "end": "540160"
  },
  {
    "text": "customers experience without worrying",
    "start": "540160",
    "end": "542080"
  },
  {
    "text": "about factors like hosting",
    "start": "542080",
    "end": "544000"
  },
  {
    "text": "scaling high availability security and",
    "start": "544000",
    "end": "547360"
  },
  {
    "text": "performance",
    "start": "547360",
    "end": "548720"
  },
  {
    "text": "the services give you the choice of",
    "start": "548720",
    "end": "550800"
  },
  {
    "text": "building rest apis",
    "start": "550800",
    "end": "552560"
  },
  {
    "text": "and or graphql apis features like the",
    "start": "552560",
    "end": "555600"
  },
  {
    "text": "ability to generate sdks",
    "start": "555600",
    "end": "557519"
  },
  {
    "text": "in multiple programming languages",
    "start": "557519",
    "end": "559600"
  },
  {
    "text": "provide your customers with a great",
    "start": "559600",
    "end": "561120"
  },
  {
    "text": "developer experience",
    "start": "561120",
    "end": "562880"
  },
  {
    "text": "now that you have a better understanding",
    "start": "562880",
    "end": "564720"
  },
  {
    "text": "of the elements to consider",
    "start": "564720",
    "end": "566080"
  },
  {
    "text": "and the options available to build your",
    "start": "566080",
    "end": "567760"
  },
  {
    "text": "public api on aws",
    "start": "567760",
    "end": "570000"
  },
  {
    "text": "the next step is to build your first api",
    "start": "570000",
    "end": "572480"
  },
  {
    "text": "by exploring",
    "start": "572480",
    "end": "573760"
  },
  {
    "text": "our api gateway developer portal and the",
    "start": "573760",
    "end": "576399"
  },
  {
    "text": "appsync sdk",
    "start": "576399",
    "end": "578480"
  },
  {
    "text": "have fun and build on",
    "start": "578480",
    "end": "587360"
  }
]