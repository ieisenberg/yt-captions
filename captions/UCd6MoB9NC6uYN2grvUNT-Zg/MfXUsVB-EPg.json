[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "- [Stefan] Hello, this is\nStefan Minhas with AWS.",
    "start": "2900",
    "end": "6260"
  },
  {
    "text": "This is part 4a of our video series",
    "start": "6260",
    "end": "8710"
  },
  {
    "text": "about modernizing applications on AWS.",
    "start": "8710",
    "end": "11840"
  },
  {
    "text": "In this video series, our customer,",
    "start": "11840",
    "end": "14050"
  },
  {
    "text": "Acme Financial Data Services,",
    "start": "14050",
    "end": "15590"
  },
  {
    "text": "has been going through a process\nof moving their application",
    "start": "15590",
    "end": "18920"
  },
  {
    "text": "from a legacy monolith on premise",
    "start": "18920",
    "end": "22020"
  },
  {
    "text": "to a modern architecture in AWS.",
    "start": "22020",
    "end": "24167"
  },
  {
    "text": "And in part 4a,",
    "start": "25524",
    "end": "27500"
  },
  {
    "text": "which is Migrate and\nModernize Data Workloads,",
    "start": "27500",
    "end": "29820"
  },
  {
    "text": "we will be looking into\nhow you need to deal",
    "start": "29820",
    "end": "32700"
  },
  {
    "text": "with this aspect of modernizing\nyour database workloads.",
    "start": "32700",
    "end": "36043"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "If we're diving into this video,",
    "start": "40940",
    "end": "42250"
  },
  {
    "text": "I recommend reviewing an earlier video",
    "start": "42250",
    "end": "44830"
  },
  {
    "text": "in the modernization series",
    "start": "44830",
    "end": "47050"
  },
  {
    "text": "where we covered in video three",
    "start": "47050",
    "end": "49570"
  },
  {
    "text": "serverless and container best practices.",
    "start": "49570",
    "end": "52930"
  },
  {
    "text": "There, you learned how to\nbuild modern architectures",
    "start": "52930",
    "end": "56900"
  },
  {
    "text": "with Lambda, Amazon API\nGateway, AWS Fargate.",
    "start": "56900",
    "end": "61900"
  },
  {
    "text": "And then using .NET serverless\nand container technologies,",
    "start": "63589",
    "end": "67920"
  },
  {
    "text": "which were strangled\nin an earlier video too",
    "start": "67920",
    "end": "72189"
  },
  {
    "text": "for Acme Financial Data Services",
    "start": "72190",
    "end": "74590"
  },
  {
    "text": "when we started to break the monolith.",
    "start": "74590",
    "end": "76713"
  },
  {
    "text": "We'll also take a closer look\nat AWS Container Orchestration",
    "start": "77720",
    "end": "82250"
  },
  {
    "text": "and monolith versus\nmicroservices architecture.",
    "start": "82250",
    "end": "85483"
  },
  {
    "text": "Let's take a quick recap\nof where our customer,",
    "start": "87900",
    "end": "90140"
  },
  {
    "text": "Acme Financial Data Services,\nis in their journey.",
    "start": "90140",
    "end": "93273"
  },
  {
    "text": "Let's review their current\nstate and objectives.",
    "start": "94790",
    "end": "97253"
  },
  {
    "start": "99000",
    "end": "99000"
  },
  {
    "text": "So the current state is as such.",
    "start": "100110",
    "end": "101763"
  },
  {
    "text": "Acme Financial Services has modernized",
    "start": "102780",
    "end": "104750"
  },
  {
    "text": "key parts of their app,",
    "start": "104750",
    "end": "105900"
  },
  {
    "text": "including invoicing service\nand inventory service.",
    "start": "107130",
    "end": "110653"
  },
  {
    "text": "AFDS have successfully ported\npart of the application",
    "start": "111979",
    "end": "115320"
  },
  {
    "text": "also to .NET Core.",
    "start": "115320",
    "end": "117120"
  },
  {
    "text": "Namely, these services.",
    "start": "117120",
    "end": "118523"
  },
  {
    "text": "They have packaged these\nservices into its own container.",
    "start": "119750",
    "end": "122983"
  },
  {
    "text": "But now, there's increased\nload on the invoicing",
    "start": "124540",
    "end": "126880"
  },
  {
    "text": "and inventory services due to\nadditional customer demand.",
    "start": "126880",
    "end": "131252"
  },
  {
    "text": "These new services should now scale",
    "start": "133364",
    "end": "135630"
  },
  {
    "text": "in relationship to the loads",
    "start": "135630",
    "end": "137050"
  },
  {
    "text": "that the customer usage\nis being placed on them.",
    "start": "137050",
    "end": "139450"
  },
  {
    "text": "But also, the data models\nare increasingly diverse",
    "start": "140790",
    "end": "143680"
  },
  {
    "text": "and are not one size fits all.",
    "start": "143680",
    "end": "145732"
  },
  {
    "text": "But all data is still largely stored",
    "start": "148160",
    "end": "151160"
  },
  {
    "text": "in a single database cluster.",
    "start": "151160",
    "end": "152863"
  },
  {
    "start": "155000",
    "end": "155000"
  },
  {
    "text": "So what challenges are we addressing?",
    "start": "156300",
    "end": "158860"
  },
  {
    "text": "Let's start by looking at the CAP Theorem.",
    "start": "158860",
    "end": "160960"
  },
  {
    "text": "The CAP Theorem states\nthat it is impossible",
    "start": "162740",
    "end": "165150"
  },
  {
    "text": "for a distributed data store",
    "start": "165150",
    "end": "166760"
  },
  {
    "text": "or to simultaneously provide more than two",
    "start": "167622",
    "end": "169849"
  },
  {
    "text": "out of the following three guarantees.",
    "start": "169850",
    "end": "172533"
  },
  {
    "text": "Consistency.",
    "start": "173490",
    "end": "174383"
  },
  {
    "text": "Every read receives the most\nrecent write or an error.",
    "start": "175510",
    "end": "180263"
  },
  {
    "text": "Availability.",
    "start": "181520",
    "end": "182590"
  },
  {
    "text": "Every request receives\na non-error response",
    "start": "182590",
    "end": "187590"
  },
  {
    "text": "without the guarantee",
    "start": "187590",
    "end": "188810"
  },
  {
    "text": "that it contains the most recent write.",
    "start": "188810",
    "end": "191142"
  },
  {
    "text": "Partition tolerance.",
    "start": "192450",
    "end": "194400"
  },
  {
    "text": "The system continues to operate",
    "start": "194400",
    "end": "195900"
  },
  {
    "text": "despite an arbitrary number\nof messages being dropped",
    "start": "195900",
    "end": "199269"
  },
  {
    "text": "or delayed by the network between nodes.",
    "start": "199270",
    "end": "202173"
  },
  {
    "text": "It is not only the databases.",
    "start": "206240",
    "end": "208260"
  },
  {
    "text": "It is a global data store problem.",
    "start": "208260",
    "end": "210530"
  },
  {
    "text": "File systems purpose built databases.",
    "start": "210530",
    "end": "212943"
  },
  {
    "text": "Data migration slash modernization goals.",
    "start": "214880",
    "end": "217683"
  },
  {
    "text": "Migration is either a heterogeneous",
    "start": "218600",
    "end": "223600"
  },
  {
    "text": "or homogeneous migration\nfrom on-prem or the cloud.",
    "start": "223860",
    "end": "227433"
  },
  {
    "text": "Modernization.",
    "start": "230560",
    "end": "231583"
  },
  {
    "text": "A microservice has data store dependencies",
    "start": "232689",
    "end": "235670"
  },
  {
    "text": "which need to be extracted",
    "start": "235670",
    "end": "236750"
  },
  {
    "text": "from the existing monolith database",
    "start": "236750",
    "end": "238930"
  },
  {
    "text": "and refactored to suit\na data store structure",
    "start": "238930",
    "end": "241569"
  },
  {
    "text": "reflecting use of type.",
    "start": "241570",
    "end": "243660"
  },
  {
    "text": "I-E, name value pair\nto DynamoDB, et cetera,",
    "start": "243660",
    "end": "247370"
  },
  {
    "text": "as well as adhering to\nindependent deployability.",
    "start": "247370",
    "end": "250420"
  },
  {
    "text": "Finally, shift left.",
    "start": "252190",
    "end": "254210"
  },
  {
    "text": "Moving data closer to the deployment",
    "start": "254210",
    "end": "256690"
  },
  {
    "text": "to shorten development, testing,",
    "start": "256690",
    "end": "258680"
  },
  {
    "text": "and turnaround time.",
    "start": "258680",
    "end": "260163"
  },
  {
    "text": "Leveraging things like snapshots,\ndata lakes, automation,",
    "start": "261310",
    "end": "265210"
  },
  {
    "text": "and managed ETL services\nto drive efficiencies.",
    "start": "265210",
    "end": "268900"
  },
  {
    "text": "This will be covered in\ndetail on the next video,",
    "start": "268900",
    "end": "272090"
  },
  {
    "text": "4b, Landing in a Data Lake.",
    "start": "272090",
    "end": "274523"
  },
  {
    "text": "Now, let's think about\nmigration versus modernization",
    "start": "279790",
    "end": "282300"
  },
  {
    "text": "of database workloads.",
    "start": "282300",
    "end": "283642"
  },
  {
    "text": "In summary, database migration.",
    "start": "284540",
    "end": "287053"
  },
  {
    "text": "When you think about migration\nversus modernization,",
    "start": "287053",
    "end": "289890"
  },
  {
    "text": "there are a number of AWS tools",
    "start": "289890",
    "end": "291850"
  },
  {
    "text": "to help you guide you in that process.",
    "start": "291850",
    "end": "295150"
  },
  {
    "text": "The migration tools on offer",
    "start": "295150",
    "end": "296820"
  },
  {
    "text": "are things like the AWS Workload\nQualification Framework,",
    "start": "296820",
    "end": "300600"
  },
  {
    "text": "WQF,",
    "start": "300600",
    "end": "301763"
  },
  {
    "text": "as well as the AWS Schema\nConversion Tool, SCT.",
    "start": "301763",
    "end": "305050"
  },
  {
    "text": "It is these tools that can\nhelp you with your migration",
    "start": "306880",
    "end": "309290"
  },
  {
    "text": "and modernization assessment.",
    "start": "309290",
    "end": "311660"
  },
  {
    "text": "It is these tools that can help you",
    "start": "311660",
    "end": "313040"
  },
  {
    "text": "with your heterogeneous\nmigration assessment",
    "start": "313040",
    "end": "315920"
  },
  {
    "text": "before you actually make the move.",
    "start": "315920",
    "end": "317970"
  },
  {
    "text": "And tools like SCT and WQF\ncan provide you with results",
    "start": "317970",
    "end": "322960"
  },
  {
    "text": "to help you understand the\nchallenges that you may face",
    "start": "322960",
    "end": "325990"
  },
  {
    "text": "and the compatibility levels",
    "start": "325990",
    "end": "328210"
  },
  {
    "text": "associated with doing a\nheterogenous migration.",
    "start": "328210",
    "end": "331378"
  },
  {
    "text": "It also provides you",
    "start": "331378",
    "end": "332610"
  },
  {
    "text": "with a mass migration assessment framework",
    "start": "332610",
    "end": "335150"
  },
  {
    "text": "which can then allow you to\nunderstand your landscape",
    "start": "335150",
    "end": "338220"
  },
  {
    "text": "in a larger scale",
    "start": "338220",
    "end": "339130"
  },
  {
    "text": "and the challenges that you might face,",
    "start": "339130",
    "end": "341040"
  },
  {
    "text": "and plan over, say, example,",
    "start": "341040",
    "end": "343170"
  },
  {
    "text": "a three to six one year migration effort.",
    "start": "343170",
    "end": "346163"
  },
  {
    "text": "Homogeneous migration assessment.",
    "start": "347980",
    "end": "349883"
  },
  {
    "text": "Homogeneous right sizing.",
    "start": "350810",
    "end": "352963"
  },
  {
    "text": "This is where you might have\ndatabase service on-prem",
    "start": "354070",
    "end": "357990"
  },
  {
    "text": "which might be sitting in missized",
    "start": "358840",
    "end": "361580"
  },
  {
    "text": "or not the ideal sized server",
    "start": "361580",
    "end": "364250"
  },
  {
    "text": "for the database instances",
    "start": "364250",
    "end": "366050"
  },
  {
    "text": "or servers that it's running on.",
    "start": "366050",
    "end": "368020"
  },
  {
    "text": "And this is an opportunity to rightsize.",
    "start": "368020",
    "end": "370810"
  },
  {
    "text": "And there are a number\nof schools of thought",
    "start": "370810",
    "end": "372030"
  },
  {
    "text": "that can help you in\nrightsizing as you move to AWS,",
    "start": "372030",
    "end": "374997"
  },
  {
    "text": "and further tuning that you\ncan do once you're on AWS",
    "start": "375920",
    "end": "378083"
  },
  {
    "text": "with the flexibility that AWS provides.",
    "start": "378083",
    "end": "382000"
  },
  {
    "text": "Another area is managing your\nSQL service license usage",
    "start": "382000",
    "end": "385550"
  },
  {
    "text": "with AWS License Manager.",
    "start": "385550",
    "end": "387182"
  },
  {
    "text": "For example, if you're\nnot using all the features",
    "start": "388100",
    "end": "390110"
  },
  {
    "text": "of an enterprise license,",
    "start": "390110",
    "end": "392240"
  },
  {
    "text": "you can consider moving\nto a standard license.",
    "start": "392240",
    "end": "395483"
  },
  {
    "text": "Other things you can think\nabout are license optimization",
    "start": "396680",
    "end": "399669"
  },
  {
    "text": "with optimized CPUs.",
    "start": "399670",
    "end": "401333"
  },
  {
    "text": "Migration offerings are things",
    "start": "402550",
    "end": "404580"
  },
  {
    "text": "like the AWS Migration Database.",
    "start": "404580",
    "end": "407634"
  },
  {
    "text": "Migration offerings",
    "start": "407635",
    "end": "409721"
  },
  {
    "text": "such as the AWS Database\nMigration Service.",
    "start": "409721",
    "end": "414080"
  },
  {
    "text": "Do you move to an AWS EC2 virtual machine,",
    "start": "414080",
    "end": "417680"
  },
  {
    "text": "or do you move to RDS,",
    "start": "417680",
    "end": "420729"
  },
  {
    "text": "which are our managed database offering?",
    "start": "420730",
    "end": "423363"
  },
  {
    "text": "Let's now start looking at",
    "start": "427705",
    "end": "429610"
  },
  {
    "text": "database modernization fundamentals.",
    "start": "429610",
    "end": "432052"
  },
  {
    "start": "433000",
    "end": "433000"
  },
  {
    "text": "Now is a good time to start thinking",
    "start": "433240",
    "end": "434729"
  },
  {
    "text": "about the fact that SQL server\nis effectively a monolith.",
    "start": "434730",
    "end": "438703"
  },
  {
    "text": "Splitting a database apart is\na far from simple endeavor.",
    "start": "440520",
    "end": "443623"
  },
  {
    "text": "We need to consider issues\nof data synchronization",
    "start": "444690",
    "end": "447000"
  },
  {
    "text": "during transition.",
    "start": "447000",
    "end": "448880"
  },
  {
    "text": "Logical versus physical\nschema decomposition,",
    "start": "448880",
    "end": "453340"
  },
  {
    "text": "transactional integrity,\njoins, latency, and more.",
    "start": "453340",
    "end": "457923"
  },
  {
    "text": "Before we start splitting\nthese things apart though,",
    "start": "459500",
    "end": "462000"
  },
  {
    "text": "we should look at the\nchallenges and coping patterns",
    "start": "462000",
    "end": "466330"
  },
  {
    "text": "for managing a single shared database.",
    "start": "466330",
    "end": "468533"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "Database patterns for\nmicroservices architecture.",
    "start": "470537",
    "end": "474180"
  },
  {
    "text": "Database modernization.",
    "start": "474180",
    "end": "475550"
  },
  {
    "text": "This effort is about decoupling",
    "start": "475550",
    "end": "477210"
  },
  {
    "text": "microservice-dependent data structures",
    "start": "477210",
    "end": "479610"
  },
  {
    "text": "and data from the existing databases",
    "start": "479610",
    "end": "482439"
  },
  {
    "text": "and evaluating the possibility\nof removing the dependency",
    "start": "482440",
    "end": "486050"
  },
  {
    "text": "on SQL server databases",
    "start": "486050",
    "end": "487919"
  },
  {
    "text": "and performing a heterogeneous evaluation",
    "start": "487920",
    "end": "490690"
  },
  {
    "text": "and database migration.",
    "start": "490690",
    "end": "492133"
  },
  {
    "text": "Shared databases.",
    "start": "493130",
    "end": "495040"
  },
  {
    "text": "For market services,",
    "start": "495040",
    "end": "496150"
  },
  {
    "text": "we will think about read only consumers,",
    "start": "496150",
    "end": "499210"
  },
  {
    "text": "addressing direct\ndatabase access consumers,",
    "start": "499210",
    "end": "502910"
  },
  {
    "text": "and also databases as service interfaces,",
    "start": "502910",
    "end": "506130"
  },
  {
    "text": "which provide a read only database API.",
    "start": "506130",
    "end": "508723"
  },
  {
    "text": "Moving on to splitting the database,",
    "start": "510840",
    "end": "512510"
  },
  {
    "text": "we will look at the pattern\ndatabase as a service,",
    "start": "512510",
    "end": "515960"
  },
  {
    "text": "as well as the SAGA partner",
    "start": "515960",
    "end": "518130"
  },
  {
    "text": "where you need to think about transactions",
    "start": "518130",
    "end": "519570"
  },
  {
    "text": "which need to span multiple services.",
    "start": "519570",
    "end": "521473"
  },
  {
    "text": "Let's look at this from\na visual perspective.",
    "start": "525796",
    "end": "528463"
  },
  {
    "text": "For shared databases,",
    "start": "529460",
    "end": "530540"
  },
  {
    "text": "we will think about the patterns\nfor read only consumers,",
    "start": "530540",
    "end": "534690"
  },
  {
    "text": "addressing direct\ndatabase access consumers,",
    "start": "534690",
    "end": "538373"
  },
  {
    "text": "and database as a service interface APIs",
    "start": "538373",
    "end": "541540"
  },
  {
    "text": "for a shared database",
    "start": "542380",
    "end": "543750"
  },
  {
    "text": "where you will not be splitting it.",
    "start": "543750",
    "end": "545930"
  },
  {
    "text": "From there, we will then look\nat splitting the database",
    "start": "545930",
    "end": "548779"
  },
  {
    "text": "and partners which service that pattern,",
    "start": "548780",
    "end": "551773"
  },
  {
    "text": "things like database per service",
    "start": "552750",
    "end": "554500"
  },
  {
    "text": "and the SAGA pattern,",
    "start": "554500",
    "end": "556160"
  },
  {
    "text": "which allows you to\nthink about transactions",
    "start": "556160",
    "end": "558350"
  },
  {
    "text": "which need to span multiple services.",
    "start": "558350",
    "end": "560323"
  },
  {
    "text": "Looking on the right from low to high",
    "start": "562820",
    "end": "566080"
  },
  {
    "text": "and dependency isolation,",
    "start": "567570",
    "end": "569133"
  },
  {
    "text": "you get a low dependency\nisolation with shared databases",
    "start": "570430",
    "end": "575170"
  },
  {
    "text": "and high dependency isolation\nwith splitting the database.",
    "start": "575170",
    "end": "579222"
  },
  {
    "text": "Dependency isolation allows you",
    "start": "580410",
    "end": "582509"
  },
  {
    "text": "to basically allow scaling CICD benefits",
    "start": "582510",
    "end": "587510"
  },
  {
    "text": "among others with microservices.",
    "start": "588480",
    "end": "590912"
  },
  {
    "text": "Implementation of these patterns",
    "start": "593630",
    "end": "595450"
  },
  {
    "text": "is easier for shared databases,",
    "start": "596450",
    "end": "598860"
  },
  {
    "text": "but harder for splitting the database.",
    "start": "598860",
    "end": "601760"
  },
  {
    "text": "But the rewards, as you can see,",
    "start": "601760",
    "end": "603330"
  },
  {
    "text": "with regard to dependency\nisolation are higher",
    "start": "603330",
    "end": "606550"
  },
  {
    "text": "when you split the database.",
    "start": "606550",
    "end": "608423"
  },
  {
    "text": "Microservice database patterns\nare the shared database.",
    "start": "611080",
    "end": "613830"
  },
  {
    "start": "615000",
    "end": "615000"
  },
  {
    "text": "Here, we can see in the case\nof Acme Financial Data Services",
    "start": "615640",
    "end": "619640"
  },
  {
    "text": "that we have the invoicing service",
    "start": "619640",
    "end": "622790"
  },
  {
    "text": "and the inventory service in a container",
    "start": "622790",
    "end": "625680"
  },
  {
    "text": "called via inventory\nAPIs and invoicing APIs",
    "start": "625680",
    "end": "629240"
  },
  {
    "text": "in through to the OneVision database",
    "start": "630150",
    "end": "632720"
  },
  {
    "text": "into the invoice table and\ninventory table, respectively.",
    "start": "632720",
    "end": "636399"
  },
  {
    "text": "This is the shared database model.",
    "start": "636400",
    "end": "638433"
  },
  {
    "text": "Of all the database patterns,",
    "start": "641170",
    "end": "642269"
  },
  {
    "text": "this is the easiest to adapt",
    "start": "642270",
    "end": "643780"
  },
  {
    "text": "as it is most likely your\nexisting data pattern store.",
    "start": "643780",
    "end": "647650"
  },
  {
    "text": "But the drawbacks of this pattern",
    "start": "647650",
    "end": "649840"
  },
  {
    "text": "are development time coupling.",
    "start": "649840",
    "end": "652890"
  },
  {
    "text": "A developer working on, for example,",
    "start": "652890",
    "end": "654770"
  },
  {
    "text": "the inventory service",
    "start": "654770",
    "end": "656120"
  },
  {
    "text": "will need to coordinate\nwith schema changes",
    "start": "656120",
    "end": "658210"
  },
  {
    "text": "with the developers of the other services",
    "start": "658210",
    "end": "660490"
  },
  {
    "text": "that access to same tables.",
    "start": "660490",
    "end": "662430"
  },
  {
    "text": "This coupling and additional coordination",
    "start": "662430",
    "end": "664320"
  },
  {
    "text": "will slow down development\nand release times.",
    "start": "664320",
    "end": "666783"
  },
  {
    "text": "Runtime coupling.",
    "start": "668120",
    "end": "669690"
  },
  {
    "text": "Because all services\naccess the same database,",
    "start": "669690",
    "end": "672590"
  },
  {
    "text": "they can potentially\ninterfere with one another.",
    "start": "672590",
    "end": "675370"
  },
  {
    "text": "For example,",
    "start": "675370",
    "end": "676450"
  },
  {
    "text": "if a long running inventory\nservice transactions",
    "start": "676450",
    "end": "679040"
  },
  {
    "text": "hold a lock on the invoicing table,",
    "start": "679040",
    "end": "681940"
  },
  {
    "text": "then the inventory\nservice will be blocked.",
    "start": "681940",
    "end": "684090"
  },
  {
    "text": "Furthermore, another issue\nis that it becomes unclear",
    "start": "685980",
    "end": "689470"
  },
  {
    "text": "as to who controls the data.",
    "start": "689470",
    "end": "692500"
  },
  {
    "text": "Where is the business logic\nthat manipulates the data?",
    "start": "692500",
    "end": "695770"
  },
  {
    "text": "Is it now spread across the services?",
    "start": "695770",
    "end": "698570"
  },
  {
    "text": "That in turn implies a lack\nof cohesion of business logic.",
    "start": "698570",
    "end": "703570"
  },
  {
    "text": "The direct sharing of\ndatabase is appropriate",
    "start": "705537",
    "end": "708880"
  },
  {
    "text": "for our microservice architecture\nin only two situations.",
    "start": "708880",
    "end": "712890"
  },
  {
    "text": "The first is when considering read only,",
    "start": "712890",
    "end": "715730"
  },
  {
    "text": "static reference data.",
    "start": "715730",
    "end": "718385"
  },
  {
    "text": "The other place where I think",
    "start": "718385",
    "end": "720210"
  },
  {
    "text": "multiple services directly\naccessing the same database",
    "start": "720210",
    "end": "722650"
  },
  {
    "text": "can be appropriate is when a service",
    "start": "722650",
    "end": "725480"
  },
  {
    "text": "is directly exposing a database\nas a predefined endpoint",
    "start": "725480",
    "end": "730079"
  },
  {
    "text": "that is designed and managed",
    "start": "730080",
    "end": "731690"
  },
  {
    "text": "in order to handle multiple consumers.",
    "start": "731690",
    "end": "734453"
  },
  {
    "start": "737000",
    "end": "737000"
  },
  {
    "text": "Now, let's look at a pattern\nfor read only consumers.",
    "start": "738952",
    "end": "742273"
  },
  {
    "text": "For all those clients\nwho want read only data,",
    "start": "743200",
    "end": "746810"
  },
  {
    "text": "you can create a dedicated\nschema hosting views",
    "start": "746810",
    "end": "749540"
  },
  {
    "text": "that look like the old schema",
    "start": "750670",
    "end": "751930"
  },
  {
    "text": "and point at the schema instead.",
    "start": "751930",
    "end": "753743"
  },
  {
    "text": "This allows for changes to the schema",
    "start": "754880",
    "end": "756890"
  },
  {
    "text": "as long as you maintain the view.",
    "start": "756890",
    "end": "759240"
  },
  {
    "text": "So here, you can see\nfour external services",
    "start": "759240",
    "end": "763410"
  },
  {
    "text": "all calling the AFDS\nOneVision database directly.",
    "start": "764462",
    "end": "769393"
  },
  {
    "text": "Alongside that,",
    "start": "770880",
    "end": "771713"
  },
  {
    "text": "you also have the OneVision system",
    "start": "771713",
    "end": "773330"
  },
  {
    "text": "that is also calling the database.",
    "start": "773330",
    "end": "775780"
  },
  {
    "text": "So what you have here before,",
    "start": "775780",
    "end": "778110"
  },
  {
    "text": "external systems have direct access.",
    "start": "778110",
    "end": "780233"
  },
  {
    "text": "Moving forward,",
    "start": "781260",
    "end": "782363"
  },
  {
    "text": "we then basically have external systems",
    "start": "784804",
    "end": "787410"
  },
  {
    "text": "that are redirected to\nread data from views,",
    "start": "787410",
    "end": "790680"
  },
  {
    "text": "allowing the schema for the\npricing system to change.",
    "start": "790680",
    "end": "795020"
  },
  {
    "text": "So, as we can see here,",
    "start": "795020",
    "end": "796440"
  },
  {
    "text": "the public schema with all the views",
    "start": "796440",
    "end": "799200"
  },
  {
    "text": "in the OneVision system\nbeing called directly.",
    "start": "799200",
    "end": "802543"
  },
  {
    "text": "Another option is a addressing\nthe direct access database.",
    "start": "806130",
    "end": "811130"
  },
  {
    "text": "When refactoring the\ndatabase is too challenging,",
    "start": "811560",
    "end": "813550"
  },
  {
    "text": "an approach is to hide the\ndatabase behind a service",
    "start": "813550",
    "end": "816850"
  },
  {
    "text": "that acts as a thin wrapper",
    "start": "816850",
    "end": "818709"
  },
  {
    "text": "and moving the database dependencies",
    "start": "818710",
    "end": "820280"
  },
  {
    "text": "to become the service dependencies.",
    "start": "820280",
    "end": "823490"
  },
  {
    "text": "So here, you can see the account service,",
    "start": "823490",
    "end": "825880"
  },
  {
    "text": "the inventory service,\nand the invoice service",
    "start": "825880",
    "end": "828770"
  },
  {
    "text": "calling the AFDS OneVision database.",
    "start": "829700",
    "end": "832473"
  },
  {
    "text": "So upstream data services\ndirectly access the database.",
    "start": "833600",
    "end": "836873"
  },
  {
    "text": "Now, you will introduce a new\nservice to wrap the database.",
    "start": "839170",
    "end": "842333"
  },
  {
    "text": "You will then reroute direct calls",
    "start": "847550",
    "end": "851029"
  },
  {
    "text": "to the OneVision service",
    "start": "851030",
    "end": "852630"
  },
  {
    "text": "instead of the OneVision database.",
    "start": "852630",
    "end": "855060"
  },
  {
    "text": "This allows you to lower the dependency",
    "start": "855060",
    "end": "857140"
  },
  {
    "text": "on the OneVision database",
    "start": "857140",
    "end": "859130"
  },
  {
    "text": "and allow you to then slowly migrate",
    "start": "859130",
    "end": "861180"
  },
  {
    "text": "or move to increase your\ndependency isolation.",
    "start": "861180",
    "end": "865783"
  },
  {
    "text": "The next pattern we will look at",
    "start": "868460",
    "end": "869783"
  },
  {
    "text": "is a database as a service interface",
    "start": "869783",
    "end": "872110"
  },
  {
    "text": "also feeding the read only database API.",
    "start": "873430",
    "end": "876373"
  },
  {
    "text": "Here, you'll create a dedicated database",
    "start": "879110",
    "end": "880910"
  },
  {
    "text": "designed to be exposed\nas a read only endpoint,",
    "start": "880910",
    "end": "884480"
  },
  {
    "text": "and have this database populated",
    "start": "884480",
    "end": "886740"
  },
  {
    "text": "with the data in the\nunderlying database changes.",
    "start": "886740",
    "end": "889190"
  },
  {
    "text": "A service could expose a stream\nof events as one endpoint",
    "start": "890400",
    "end": "894840"
  },
  {
    "text": "and a synchronization\nAPI as another endpoint.",
    "start": "894840",
    "end": "897960"
  },
  {
    "text": "It could also expose a\ndatabase to external consumers.",
    "start": "897960",
    "end": "900813"
  },
  {
    "text": "So as you can see here,",
    "start": "902504",
    "end": "903654"
  },
  {
    "text": "we have the inventory service",
    "start": "904720",
    "end": "906560"
  },
  {
    "text": "calling the internal inventory database,",
    "start": "906560",
    "end": "910103"
  },
  {
    "text": "which is exposed through an API endpoint,",
    "start": "911060",
    "end": "914050"
  },
  {
    "text": "which allows the external\nconsumer to read and write to.",
    "start": "914050",
    "end": "917550"
  },
  {
    "text": "We also have a mapping engine,",
    "start": "917550",
    "end": "919403"
  },
  {
    "text": "which basically allows you to take changes",
    "start": "920700",
    "end": "923470"
  },
  {
    "text": "in the internal database",
    "start": "923470",
    "end": "924399"
  },
  {
    "text": "and works out what changes need to be made",
    "start": "924400",
    "end": "926500"
  },
  {
    "text": "to the external database,",
    "start": "926500",
    "end": "927740"
  },
  {
    "text": "the external database\nbeing as an endpoint,",
    "start": "927740",
    "end": "930860"
  },
  {
    "text": "which only allows reads.",
    "start": "930860",
    "end": "932060"
  },
  {
    "text": "So changes which are made\ninto the internal database",
    "start": "933410",
    "end": "937180"
  },
  {
    "text": "are simultaneously or in real\ntime using the mapping engine",
    "start": "937180",
    "end": "942180"
  },
  {
    "text": "updated in the external\ndatabase as an endpoint",
    "start": "942620",
    "end": "945350"
  },
  {
    "text": "for read only consumers.",
    "start": "945350",
    "end": "946832"
  },
  {
    "start": "949000",
    "end": "949000"
  },
  {
    "text": "Now, let's look at\nimplementing a mapping engine.",
    "start": "949710",
    "end": "952403"
  },
  {
    "text": "The best approach to\ncreate a mapping engine",
    "start": "953460",
    "end": "955360"
  },
  {
    "text": "is to listen to events fired\nfrom the service in question",
    "start": "955360",
    "end": "958550"
  },
  {
    "text": "and use that to update\nthe external database.",
    "start": "958550",
    "end": "960912"
  },
  {
    "text": "AWS Glue provides a set\nof built-in transforms",
    "start": "962225",
    "end": "965449"
  },
  {
    "text": "that allow you to use to process the data.",
    "start": "965450",
    "end": "968143"
  },
  {
    "text": "You can use these transforms\nfrom your ETL script.",
    "start": "969840",
    "end": "973410"
  },
  {
    "text": "Your data passes from\ntransform to transform",
    "start": "973410",
    "end": "976050"
  },
  {
    "text": "in a data structure called DynamicFrame.",
    "start": "976050",
    "end": "979016"
  },
  {
    "text": "A DynamicFrame contains your data",
    "start": "980101",
    "end": "982680"
  },
  {
    "text": "and your reference schema\nto process your data.",
    "start": "982680",
    "end": "985753"
  },
  {
    "text": "So from internal inventory\ndatabase using the mapping engine",
    "start": "986890",
    "end": "990980"
  },
  {
    "text": "to an external DB as an endpoint\nfor read only consumers.",
    "start": "990980",
    "end": "994423"
  },
  {
    "text": "Now, let's look at the\nnext database pattern",
    "start": "997760",
    "end": "1000570"
  },
  {
    "text": "where we will be splitting the database.",
    "start": "1000570",
    "end": "1002570"
  },
  {
    "text": "When you have this\noption, you should do it,",
    "start": "1004120",
    "end": "1006150"
  },
  {
    "text": "but it is very scary stuff.",
    "start": "1006150",
    "end": "1008233"
  },
  {
    "text": "Splitting the database.",
    "start": "1011920",
    "end": "1012980"
  },
  {
    "text": "So far, we've not really\ntackled the underlying problem.",
    "start": "1012980",
    "end": "1016040"
  },
  {
    "text": "We've just put a variety\nof different bandages",
    "start": "1016040",
    "end": "1018160"
  },
  {
    "text": "on a big shared database.",
    "start": "1018160",
    "end": "1019793"
  },
  {
    "text": "Before we start\nconsidering the tricky task",
    "start": "1020650",
    "end": "1022860"
  },
  {
    "text": "of pulling data out of the\ngiant monolith database,",
    "start": "1022860",
    "end": "1026020"
  },
  {
    "text": "we need to consider where\nthe data in question",
    "start": "1026020",
    "end": "1027850"
  },
  {
    "text": "should actually live.",
    "start": "1027850",
    "end": "1028973"
  },
  {
    "text": "As you split services\nout from the monolith,",
    "start": "1029870",
    "end": "1032670"
  },
  {
    "text": "some of the data should\ngo with the new service",
    "start": "1032670",
    "end": "1036050"
  },
  {
    "text": "and some of it should stay\nwith the monolithic database.",
    "start": "1036050",
    "end": "1039593"
  },
  {
    "text": "If we embrace the idea of a microservice",
    "start": "1040500",
    "end": "1042980"
  },
  {
    "text": "encapsulating the logic",
    "start": "1042980",
    "end": "1044150"
  },
  {
    "text": "associated with one or more aggregates,",
    "start": "1044150",
    "end": "1048079"
  },
  {
    "text": "we also need to move the\nmanagement of their state",
    "start": "1048080",
    "end": "1050610"
  },
  {
    "text": "and associated data into the\nmicroservice's own schema.",
    "start": "1050610",
    "end": "1054470"
  },
  {
    "text": "On the other hand,",
    "start": "1054470",
    "end": "1055470"
  },
  {
    "text": "if our new microservice needs\nto interact with an aggregate",
    "start": "1055470",
    "end": "1058950"
  },
  {
    "text": "that is still owned by the monolith,",
    "start": "1059960",
    "end": "1062860"
  },
  {
    "text": "we need to expose this capability",
    "start": "1062860",
    "end": "1064850"
  },
  {
    "text": "via a well defined interface.",
    "start": "1064850",
    "end": "1067600"
  },
  {
    "text": "Let's look at these two options now.",
    "start": "1067600",
    "end": "1069400"
  },
  {
    "start": "1072000",
    "end": "1072000"
  },
  {
    "text": "When we split the database,",
    "start": "1074680",
    "end": "1075760"
  },
  {
    "text": "we transfer ownership to\nthe respective business unit",
    "start": "1075760",
    "end": "1079040"
  },
  {
    "text": "slash service team responsible\nfor the inventory services.",
    "start": "1079040",
    "end": "1083153"
  },
  {
    "text": "In the first pattern,\nwhich is pattern one,",
    "start": "1084200",
    "end": "1086350"
  },
  {
    "text": "aggregate exposing monolith,",
    "start": "1087460",
    "end": "1091102"
  },
  {
    "text": "we will look at the following approach.",
    "start": "1092030",
    "end": "1093980"
  },
  {
    "text": "The new invoicing service\nneeds to access the data",
    "start": "1095020",
    "end": "1097040"
  },
  {
    "text": "that isn't directly related\nto managing invoicing.",
    "start": "1097040",
    "end": "1100820"
  },
  {
    "text": "It also needs information on inventory",
    "start": "1100820",
    "end": "1102860"
  },
  {
    "text": "to process auto workflows.",
    "start": "1102860",
    "end": "1104723"
  },
  {
    "text": "This data is currently all\ninside the monolithic database.",
    "start": "1105800",
    "end": "1109393"
  },
  {
    "text": "By exposing information about inventory",
    "start": "1110270",
    "end": "1112630"
  },
  {
    "text": "via the service endpoint,",
    "start": "1112630",
    "end": "1114570"
  },
  {
    "text": "it could be an API or stream\nevents on the monolith itself,",
    "start": "1114570",
    "end": "1118950"
  },
  {
    "text": "we make explicit what information",
    "start": "1118950",
    "end": "1121269"
  },
  {
    "text": "the invoicing service needs.",
    "start": "1121270",
    "end": "1122823"
  },
  {
    "text": "So as you can see here,",
    "start": "1124170",
    "end": "1125070"
  },
  {
    "text": "the invoicing service is\ncalling on the monolith",
    "start": "1125070",
    "end": "1128730"
  },
  {
    "text": "and the, in turn, inventory\nstate code within a monolith",
    "start": "1128730",
    "end": "1133049"
  },
  {
    "text": "via the new inventory API.",
    "start": "1133050",
    "end": "1135773"
  },
  {
    "text": "And the inventory API calls directly",
    "start": "1137340",
    "end": "1139159"
  },
  {
    "text": "onto the inventory data sitting\ninside of the monolithic DB.",
    "start": "1139160",
    "end": "1143723"
  },
  {
    "text": "The second pattern, change data ownership,",
    "start": "1150060",
    "end": "1152723"
  },
  {
    "text": "is what happens when we consider",
    "start": "1153710",
    "end": "1154950"
  },
  {
    "text": "that the data is currently in a monolith",
    "start": "1154950",
    "end": "1156570"
  },
  {
    "text": "that should be under the control",
    "start": "1156570",
    "end": "1158440"
  },
  {
    "text": "of the newly extracted service.",
    "start": "1158440",
    "end": "1160252"
  },
  {
    "text": "So as you can see here,",
    "start": "1163490",
    "end": "1164429"
  },
  {
    "text": "the monolith calls the invoicing service",
    "start": "1164430",
    "end": "1167160"
  },
  {
    "text": "and the invoicing service is\ncalling the invoicing table",
    "start": "1168120",
    "end": "1170650"
  },
  {
    "text": "that's still inside of the monolithic DB,",
    "start": "1170650",
    "end": "1173270"
  },
  {
    "text": "but the owner ship is shared.",
    "start": "1173270",
    "end": "1175263"
  },
  {
    "text": "So before, in this case,",
    "start": "1176230",
    "end": "1178419"
  },
  {
    "text": "the invoicing service accesses the data",
    "start": "1178420",
    "end": "1180820"
  },
  {
    "text": "in the monolithic database.",
    "start": "1180820",
    "end": "1182592"
  },
  {
    "text": "In pattern two, after the event,",
    "start": "1183810",
    "end": "1186270"
  },
  {
    "text": "we change data ownership.",
    "start": "1186270",
    "end": "1187713"
  },
  {
    "text": "So what we see here is the monolith",
    "start": "1188750",
    "end": "1190980"
  },
  {
    "text": "is calling now on the invoicing service",
    "start": "1190980",
    "end": "1193820"
  },
  {
    "text": "and calling on the invoicing\nDB and the invoicing table.",
    "start": "1193820",
    "end": "1198023"
  },
  {
    "text": "So afterwards, effectively,",
    "start": "1199230",
    "end": "1202120"
  },
  {
    "text": "the invoicing data is migrated\ninto the service boundary",
    "start": "1202120",
    "end": "1205170"
  },
  {
    "text": "and the monolith now\nneeds to access the data",
    "start": "1207320",
    "end": "1209130"
  },
  {
    "text": "via the invoicing services endpoint.",
    "start": "1209130",
    "end": "1211333"
  },
  {
    "text": "This is moving towards\ngreater dependency isolation.",
    "start": "1213240",
    "end": "1217023"
  },
  {
    "text": "So splitting the database,\ntransferring ownership pattern.",
    "start": "1222620",
    "end": "1225913"
  },
  {
    "text": "Change data ownership.",
    "start": "1227010",
    "end": "1228200"
  },
  {
    "text": "Here, we move our invoice\nrelated data out of the monolith",
    "start": "1228200",
    "end": "1231240"
  },
  {
    "text": "and into the new invoice,",
    "start": "1231240",
    "end": "1232853"
  },
  {
    "text": "as this is where the\nlife cycle of the data",
    "start": "1234080",
    "end": "1236029"
  },
  {
    "text": "should be managed.",
    "start": "1236030",
    "end": "1236930"
  },
  {
    "text": "When we need to change a monolith",
    "start": "1237860",
    "end": "1239130"
  },
  {
    "text": "to treat the invoice\nservice as a source of truth",
    "start": "1239130",
    "end": "1241190"
  },
  {
    "text": "for the invoice-related data,",
    "start": "1241190",
    "end": "1242663"
  },
  {
    "text": "and change it such that it is called out",
    "start": "1243654",
    "end": "1246080"
  },
  {
    "text": "to the invoice service endpoint",
    "start": "1246080",
    "end": "1247929"
  },
  {
    "text": "to read the data or request changes.",
    "start": "1247930",
    "end": "1249933"
  },
  {
    "text": "The above can be a\ncomplex problem, however.",
    "start": "1250780",
    "end": "1252860"
  },
  {
    "text": "We may need to have to consider the impact",
    "start": "1252860",
    "end": "1254620"
  },
  {
    "text": "of breaking foreign key restraints,",
    "start": "1254620",
    "end": "1256963"
  },
  {
    "text": "and breaking transactional boundaries,",
    "start": "1257890",
    "end": "1259920"
  },
  {
    "text": "and much more.",
    "start": "1259920",
    "end": "1260843"
  },
  {
    "text": "The next pattern in case of\nthe splitting the database",
    "start": "1264170",
    "end": "1266800"
  },
  {
    "text": "is the database per service.",
    "start": "1266800",
    "end": "1268693"
  },
  {
    "text": "In this case,",
    "start": "1270940",
    "end": "1271899"
  },
  {
    "text": "each microservice's persistent data",
    "start": "1271900",
    "end": "1274140"
  },
  {
    "text": "is private to that service",
    "start": "1274140",
    "end": "1276190"
  },
  {
    "text": "and accessible only via its API.",
    "start": "1276190",
    "end": "1279423"
  },
  {
    "text": "A service's transaction\nonly involves its database.",
    "start": "1280760",
    "end": "1283863"
  },
  {
    "text": "The service's database",
    "start": "1285430",
    "end": "1286480"
  },
  {
    "text": "is effectively part of the\nimplementation of that service.",
    "start": "1286480",
    "end": "1289393"
  },
  {
    "text": "It cannot be accessed\ndirectly by other services,",
    "start": "1290330",
    "end": "1293679"
  },
  {
    "text": "much like we saw it in the earlier slide.",
    "start": "1293680",
    "end": "1296070"
  },
  {
    "text": "So as you can see here,",
    "start": "1296070",
    "end": "1297870"
  },
  {
    "text": "for the invoicing service,",
    "start": "1297870",
    "end": "1299230"
  },
  {
    "text": "which is accessed via invoicing API only,",
    "start": "1299230",
    "end": "1302690"
  },
  {
    "text": "there is a dedicated invoice database.",
    "start": "1302690",
    "end": "1304600"
  },
  {
    "text": "And within the invoice database,",
    "start": "1304600",
    "end": "1306210"
  },
  {
    "text": "there is an invoice table",
    "start": "1306210",
    "end": "1308080"
  },
  {
    "text": "among perhaps some others\ndedicated to invoicing.",
    "start": "1308080",
    "end": "1310960"
  },
  {
    "text": "And then on the right,",
    "start": "1310960",
    "end": "1312220"
  },
  {
    "text": "we have the inventory service",
    "start": "1312220",
    "end": "1314070"
  },
  {
    "text": "called only by its inventory API,",
    "start": "1314070",
    "end": "1317370"
  },
  {
    "text": "and in turn, calling\nthe inventory database",
    "start": "1317370",
    "end": "1320230"
  },
  {
    "text": "with its dedicated inventory table.",
    "start": "1320230",
    "end": "1322132"
  },
  {
    "text": "This was as a result of\nsplitting these two tables out",
    "start": "1323550",
    "end": "1327420"
  },
  {
    "text": "and any related tables into\nthe dedicated databases",
    "start": "1327420",
    "end": "1331140"
  },
  {
    "text": "away from the monolithic database.",
    "start": "1332270",
    "end": "1334053"
  },
  {
    "text": "Splitting the database,\ndatabase per service.",
    "start": "1340160",
    "end": "1343543"
  },
  {
    "text": "There are a few different ways",
    "start": "1344950",
    "end": "1346190"
  },
  {
    "text": "to keep a service's\npersistent data private.",
    "start": "1346190",
    "end": "1348632"
  },
  {
    "text": "You do not need to provision\na dedicated database server",
    "start": "1349580",
    "end": "1352659"
  },
  {
    "text": "for each service.",
    "start": "1352660",
    "end": "1354040"
  },
  {
    "text": "For example, if you're\nusing a relational database,",
    "start": "1354040",
    "end": "1357010"
  },
  {
    "text": "then options are as follows.",
    "start": "1357010",
    "end": "1359560"
  },
  {
    "text": "Private tables per service.",
    "start": "1359560",
    "end": "1361930"
  },
  {
    "text": "Each service owns a set of tables",
    "start": "1361930",
    "end": "1363800"
  },
  {
    "text": "that must be only be\naccessed by that service,",
    "start": "1363800",
    "end": "1367210"
  },
  {
    "text": "or schema per service,",
    "start": "1367210",
    "end": "1369429"
  },
  {
    "text": "each service has a database schema",
    "start": "1369430",
    "end": "1371600"
  },
  {
    "text": "that's private to that service,",
    "start": "1371600",
    "end": "1373483"
  },
  {
    "text": "or database server per service,",
    "start": "1374562",
    "end": "1377510"
  },
  {
    "text": "each service has its own\ndedicated database server.",
    "start": "1377510",
    "end": "1380423"
  },
  {
    "text": "This could be the case\nwhen you have PPI data.",
    "start": "1382660",
    "end": "1384960"
  },
  {
    "text": "Private tables per service\nand schema per service",
    "start": "1386180",
    "end": "1389170"
  },
  {
    "text": "have the lowest overhead.",
    "start": "1389170",
    "end": "1391130"
  },
  {
    "text": "Using a schema per service is appealing",
    "start": "1391130",
    "end": "1393390"
  },
  {
    "text": "since it makes ownership cleaner.",
    "start": "1393390",
    "end": "1395053"
  },
  {
    "text": "Some high throughput services",
    "start": "1396730",
    "end": "1398070"
  },
  {
    "text": "might need their own database server.",
    "start": "1398070",
    "end": "1399972"
  },
  {
    "text": "It is a good idea to create barriers",
    "start": "1400975",
    "end": "1402539"
  },
  {
    "text": "that enforce this modularity.",
    "start": "1402540",
    "end": "1404960"
  },
  {
    "text": "You could, for example,",
    "start": "1404960",
    "end": "1406090"
  },
  {
    "text": "assign a different database\nuser ID to each service",
    "start": "1406090",
    "end": "1410195"
  },
  {
    "text": "and use a database access\ncontrol mechanism such as grants.",
    "start": "1410195",
    "end": "1414303"
  },
  {
    "text": "Without some kind of barrier\nto enforce encapsulation,",
    "start": "1415350",
    "end": "1418100"
  },
  {
    "text": "developers will always be\ntempted to bypass a service's API",
    "start": "1418100",
    "end": "1422580"
  },
  {
    "text": "and access the data directly.",
    "start": "1422580",
    "end": "1424643"
  },
  {
    "text": "So to recap in the case\nof splitting the database",
    "start": "1429840",
    "end": "1432650"
  },
  {
    "text": "and database per service,",
    "start": "1432650",
    "end": "1434500"
  },
  {
    "text": "in the case of the services",
    "start": "1434500",
    "end": "1435650"
  },
  {
    "text": "we are considering\nrefactoring to microservices,",
    "start": "1435650",
    "end": "1439250"
  },
  {
    "text": "invoicing, and inventory,",
    "start": "1439250",
    "end": "1441170"
  },
  {
    "text": "we need to keep each\nmicroservice's data persistent",
    "start": "1441170",
    "end": "1444910"
  },
  {
    "text": "and private to that service,",
    "start": "1444910",
    "end": "1447290"
  },
  {
    "text": "and make sure it is only\naccessible via its API.",
    "start": "1447290",
    "end": "1449833"
  },
  {
    "text": "A service's transaction will\nonly involve its database.",
    "start": "1450760",
    "end": "1454473"
  },
  {
    "start": "1459000",
    "end": "1459000"
  },
  {
    "text": "Splitting the database, the SAGA pattern.",
    "start": "1460280",
    "end": "1462950"
  },
  {
    "text": "In some cases,",
    "start": "1463990",
    "end": "1464823"
  },
  {
    "text": "you need to implement\na business transaction",
    "start": "1464823",
    "end": "1466440"
  },
  {
    "text": "that spans multiples services.",
    "start": "1466440",
    "end": "1468820"
  },
  {
    "text": "This is called a SAGA.",
    "start": "1468820",
    "end": "1470970"
  },
  {
    "text": "A SAGA is a sequence of local transaction.",
    "start": "1470970",
    "end": "1474053"
  },
  {
    "text": "Each local transaction\nupdates the database",
    "start": "1475320",
    "end": "1477600"
  },
  {
    "text": "and publishes a message or event",
    "start": "1477600",
    "end": "1480130"
  },
  {
    "text": "to trigger the next logical\ntransaction in the SAGA.",
    "start": "1480130",
    "end": "1483113"
  },
  {
    "text": "So therefore, if a local transaction fails",
    "start": "1484070",
    "end": "1486179"
  },
  {
    "text": "because it violates a business rule,",
    "start": "1486180",
    "end": "1488340"
  },
  {
    "text": "then the SAGA executes a series\nof compensating transactions",
    "start": "1488340",
    "end": "1492758"
  },
  {
    "text": "that undo the changes that were made",
    "start": "1492759",
    "end": "1496380"
  },
  {
    "text": "by the proceeding local transactions.",
    "start": "1496380",
    "end": "1498500"
  },
  {
    "text": "Effectively, a rollback.",
    "start": "1498500",
    "end": "1500373"
  },
  {
    "text": "Therefore, the resulting context is this.",
    "start": "1501590",
    "end": "1504480"
  },
  {
    "text": "This pattern has the following benefits.",
    "start": "1504480",
    "end": "1506890"
  },
  {
    "text": "It enables an application\nto maintain consistency",
    "start": "1506890",
    "end": "1509820"
  },
  {
    "text": "in terms of data.",
    "start": "1511351",
    "end": "1512783"
  },
  {
    "text": "It enables an application\nto maintain data consistency",
    "start": "1513920",
    "end": "1517160"
  },
  {
    "text": "across multiple services",
    "start": "1517160",
    "end": "1519070"
  },
  {
    "text": "without using distributed transactions.",
    "start": "1519070",
    "end": "1522110"
  },
  {
    "text": "This option has the following drawbacks.",
    "start": "1522110",
    "end": "1525350"
  },
  {
    "text": "The programming model is more complex.",
    "start": "1525350",
    "end": "1527890"
  },
  {
    "text": "For example,",
    "start": "1527890",
    "end": "1528723"
  },
  {
    "text": "a developer must design\ncompensating transactions",
    "start": "1528723",
    "end": "1532180"
  },
  {
    "text": "that explicitly undo changes\nmade earlier in the SAGA.",
    "start": "1532180",
    "end": "1536113"
  },
  {
    "text": "There are also the\nfollowing issues to address.",
    "start": "1544250",
    "end": "1547490"
  },
  {
    "text": "In order to be reliable,",
    "start": "1547490",
    "end": "1548750"
  },
  {
    "text": "a service must atomically\nupdate its database",
    "start": "1548750",
    "end": "1552270"
  },
  {
    "text": "and publish a message in the event queue.",
    "start": "1552270",
    "end": "1556303"
  },
  {
    "text": "It cannot use the traditional mechanism",
    "start": "1558200",
    "end": "1560289"
  },
  {
    "text": "of a distributed transaction\nthat spans a database",
    "start": "1560290",
    "end": "1563960"
  },
  {
    "text": "and a message broker.",
    "start": "1563960",
    "end": "1564899"
  },
  {
    "text": "Instead, it must use inherently\ndatabase as a service.",
    "start": "1564900",
    "end": "1569900"
  },
  {
    "text": "So to recap,",
    "start": "1572600",
    "end": "1574080"
  },
  {
    "text": "when a two phase commit is not an option,",
    "start": "1574080",
    "end": "1576130"
  },
  {
    "text": "as you can see above here, for example,",
    "start": "1576130",
    "end": "1578600"
  },
  {
    "text": "the invoicing an inventory service,",
    "start": "1578600",
    "end": "1580923"
  },
  {
    "text": "the path to take is a SAGA pattern",
    "start": "1582120",
    "end": "1583880"
  },
  {
    "text": "where you have local transactions.",
    "start": "1584754",
    "end": "1586454"
  },
  {
    "text": "Each local transaction updates a database",
    "start": "1587350",
    "end": "1589410"
  },
  {
    "text": "and publishes a message or event",
    "start": "1589410",
    "end": "1591540"
  },
  {
    "text": "to trigger the next logical\ntransaction in the SAGA.",
    "start": "1591540",
    "end": "1594563"
  },
  {
    "text": "So in this case,",
    "start": "1596260",
    "end": "1597093"
  },
  {
    "text": "the invoicing service",
    "start": "1597093",
    "end": "1598120"
  },
  {
    "text": "will then call out to\nthe inventory service.",
    "start": "1599420",
    "end": "1602243"
  },
  {
    "text": "An E-service will be responsible",
    "start": "1604500",
    "end": "1606070"
  },
  {
    "text": "for knowing what to call next,",
    "start": "1606070",
    "end": "1607789"
  },
  {
    "text": "as well as update local transactions.",
    "start": "1607790",
    "end": "1609943"
  },
  {
    "text": "If a local transaction fails",
    "start": "1610960",
    "end": "1612270"
  },
  {
    "text": "because it violates a business rule,",
    "start": "1612270",
    "end": "1614410"
  },
  {
    "text": "then the SAGA executes a series\nof compensating transactions",
    "start": "1614410",
    "end": "1617600"
  },
  {
    "text": "that undo the changes",
    "start": "1617600",
    "end": "1619140"
  },
  {
    "text": "that were made by the\npreceeding local transactions.",
    "start": "1619140",
    "end": "1622023"
  },
  {
    "start": "1625000",
    "end": "1625000"
  },
  {
    "text": "So a recap.",
    "start": "1625720",
    "end": "1626973"
  },
  {
    "text": "It follows on from a\ndatabase per service pattern,",
    "start": "1628120",
    "end": "1631930"
  },
  {
    "text": "so you should have already\nimplemented this approach",
    "start": "1631930",
    "end": "1635050"
  },
  {
    "text": "where each service has its own database.",
    "start": "1635050",
    "end": "1637050"
  },
  {
    "text": "Some business transactions,\nhowever, span multiple services,",
    "start": "1638110",
    "end": "1640549"
  },
  {
    "text": "so you need a mechanism\nto implement transactions",
    "start": "1640550",
    "end": "1643760"
  },
  {
    "text": "that span those services.",
    "start": "1643760",
    "end": "1646223"
  },
  {
    "text": "For example, let's imagine the AFDS",
    "start": "1647060",
    "end": "1649660"
  },
  {
    "text": "where customers have an inventory limit.",
    "start": "1649660",
    "end": "1651673"
  },
  {
    "text": "The application must\nensure that a new order",
    "start": "1653360",
    "end": "1655470"
  },
  {
    "text": "will not exceed the\ncustomer's inventory limit.",
    "start": "1655470",
    "end": "1658799"
  },
  {
    "text": "Since inventory and customers\nare in different databases",
    "start": "1658800",
    "end": "1661170"
  },
  {
    "text": "owned by different services,",
    "start": "1661170",
    "end": "1663040"
  },
  {
    "text": "the application cannot simply\nuse a local ACID transaction.",
    "start": "1663040",
    "end": "1666293"
  },
  {
    "text": "So using the SAGA pattern will manage this",
    "start": "1668440",
    "end": "1670769"
  },
  {
    "text": "via local transactions in each service.",
    "start": "1670770",
    "end": "1673780"
  },
  {
    "text": "I recommend looking into the SAGA pattern",
    "start": "1675310",
    "end": "1677140"
  },
  {
    "text": "in further detail online.",
    "start": "1677140",
    "end": "1678880"
  },
  {
    "text": "There are many good examples.",
    "start": "1678880",
    "end": "1680473"
  },
  {
    "text": "So this ends the video series part 4a,",
    "start": "1682320",
    "end": "1687320"
  },
  {
    "text": "Migrate and Modernize Database Workloads.",
    "start": "1687610",
    "end": "1690622"
  },
  {
    "text": "I strongly recommend you watch\nother videos in this series.",
    "start": "1691720",
    "end": "1695453"
  },
  {
    "text": "Earlier videos are part 1,",
    "start": "1697900",
    "end": "1700040"
  },
  {
    "text": "Migration and Modernization\nRoadmap Guidance,",
    "start": "1700040",
    "end": "1703320"
  },
  {
    "text": "which goes into why you should\nthink about modernizing.",
    "start": "1703320",
    "end": "1706169"
  },
  {
    "text": "Part 2 is a good partner to this one,",
    "start": "1706170",
    "end": "1708570"
  },
  {
    "text": "which is Monolithic to Microservices,",
    "start": "1708570",
    "end": "1710870"
  },
  {
    "text": "Modernization and Refactoring.",
    "start": "1710870",
    "end": "1712483"
  },
  {
    "text": "Part 3 is also very close to this,",
    "start": "1713340",
    "end": "1715559"
  },
  {
    "text": "which is Serverless and Container,",
    "start": "1715560",
    "end": "1717747"
  },
  {
    "text": ".NET Best Practices.",
    "start": "1717747",
    "end": "1719083"
  },
  {
    "text": "Learn how to build modern\narchitectures with AWS Lambda,",
    "start": "1720810",
    "end": "1724930"
  },
  {
    "text": "Amazon API Gateway, and AWS Fargate.",
    "start": "1724930",
    "end": "1728763"
  },
  {
    "text": "The next video in this series is part 4b,",
    "start": "1731750",
    "end": "1735710"
  },
  {
    "text": "Landing in a Data Lake.",
    "start": "1735710",
    "end": "1737760"
  },
  {
    "text": "Here, you will go into the details",
    "start": "1737760",
    "end": "1739610"
  },
  {
    "text": "of what it takes to create\na data lake and much more.",
    "start": "1739610",
    "end": "1743423"
  },
  {
    "text": "Another area of interest is part 5,",
    "start": "1744610",
    "end": "1747370"
  },
  {
    "text": "Modernizing DevOps for Serverless\nand Container Pipelines.",
    "start": "1747370",
    "end": "1751713"
  },
  {
    "text": "I hope you enjoyed this video series",
    "start": "1753040",
    "end": "1755150"
  },
  {
    "text": "and you learn from it as\nyou apply these practices",
    "start": "1755150",
    "end": "1758470"
  },
  {
    "text": "in your own environments.",
    "start": "1758470",
    "end": "1759882"
  },
  {
    "text": "So the next video in this\nis continued in part 4b,",
    "start": "1761591",
    "end": "1765779"
  },
  {
    "text": "Landing in a Data Lake.",
    "start": "1765780",
    "end": "1767870"
  },
  {
    "text": "Thank you so much.",
    "start": "1767870",
    "end": "1768893"
  }
]