[
  {
    "text": "good afternoon everyone and welcome back",
    "start": "10799",
    "end": "13690"
  },
  {
    "text": "from lunch I hope you've enjoyed your",
    "start": "13690",
    "end": "16180"
  },
  {
    "text": "session so far today we have a lot of",
    "start": "16180",
    "end": "18970"
  },
  {
    "text": "content to cover over the next half hour",
    "start": "18970",
    "end": "20980"
  },
  {
    "text": "or so so let's get started service today",
    "start": "20980",
    "end": "26020"
  },
  {
    "text": "is fundamentally transforming how you",
    "start": "26020",
    "end": "28539"
  },
  {
    "text": "build applications and how you think",
    "start": "28539",
    "end": "30880"
  },
  {
    "text": "about and manage infrastructure you know",
    "start": "30880",
    "end": "33520"
  },
  {
    "text": "to give you an example if you were",
    "start": "33520",
    "end": "35440"
  },
  {
    "text": "around for the modern arcade mode in",
    "start": "35440",
    "end": "37120"
  },
  {
    "text": "architecture track earlier today you",
    "start": "37120",
    "end": "38680"
  },
  {
    "text": "would have seen how you can run",
    "start": "38680",
    "end": "40499"
  },
  {
    "text": "MapReduce jobs on lambda functions you",
    "start": "40499",
    "end": "43870"
  },
  {
    "text": "know my colleague Oni next door is",
    "start": "43870",
    "end": "45579"
  },
  {
    "text": "delivering a talk right now on building",
    "start": "45579",
    "end": "47469"
  },
  {
    "text": "a server less data Lake know",
    "start": "47469",
    "end": "49449"
  },
  {
    "text": "traditionally when you're thinking about",
    "start": "49449",
    "end": "50829"
  },
  {
    "text": "big data workloads you're thinking about",
    "start": "50829",
    "end": "52899"
  },
  {
    "text": "clusters of servers yet today a lot of",
    "start": "52899",
    "end": "55690"
  },
  {
    "text": "the components of your Big Data workload",
    "start": "55690",
    "end": "57670"
  },
  {
    "text": "could be entirely serverless",
    "start": "57670",
    "end": "59909"
  },
  {
    "text": "however not everyone is aware of the",
    "start": "59909",
    "end": "62710"
  },
  {
    "text": "different architectures when it comes to",
    "start": "62710",
    "end": "64540"
  },
  {
    "text": "building service applications today's",
    "start": "64540",
    "end": "67210"
  },
  {
    "text": "talk is really to inspire you about what",
    "start": "67210",
    "end": "70030"
  },
  {
    "text": "is possible with service service",
    "start": "70030",
    "end": "75100"
  },
  {
    "text": "applications are event-driven which",
    "start": "75100",
    "end": "77799"
  },
  {
    "text": "means there is an event source that",
    "start": "77799",
    "end": "79509"
  },
  {
    "text": "generates event and there is a consumer",
    "start": "79509",
    "end": "81880"
  },
  {
    "text": "that processes these events and might",
    "start": "81880",
    "end": "83920"
  },
  {
    "text": "optionally speak to other downstream",
    "start": "83920",
    "end": "85810"
  },
  {
    "text": "systems in order to do so you can think",
    "start": "85810",
    "end": "89229"
  },
  {
    "text": "of events as anything significant within",
    "start": "89229",
    "end": "91420"
  },
  {
    "text": "your business you care about you know",
    "start": "91420",
    "end": "93009"
  },
  {
    "text": "this could just be visits to your",
    "start": "93009",
    "end": "94420"
  },
  {
    "text": "website or this could be changes in data",
    "start": "94420",
    "end": "96579"
  },
  {
    "text": "state like someone ordering your product",
    "start": "96579",
    "end": "99750"
  },
  {
    "text": "even driven architectures by their very",
    "start": "99750",
    "end": "102310"
  },
  {
    "text": "nature allow you to build loosely",
    "start": "102310",
    "end": "104350"
  },
  {
    "text": "coupled systems this is because the",
    "start": "104350",
    "end": "106420"
  },
  {
    "text": "event source and the consumer need to",
    "start": "106420",
    "end": "108820"
  },
  {
    "text": "have little or no knowledge of each",
    "start": "108820",
    "end": "110259"
  },
  {
    "text": "other they're also very responsive when",
    "start": "110259",
    "end": "113049"
  },
  {
    "text": "it comes to sudden changes in load and",
    "start": "113049",
    "end": "115479"
  },
  {
    "text": "you know and finally because you don't",
    "start": "115479",
    "end": "116859"
  },
  {
    "text": "have this always-on server behind the",
    "start": "116859",
    "end": "119200"
  },
  {
    "text": "scenes you consume your processing",
    "start": "119200",
    "end": "121210"
  },
  {
    "text": "resources only when events occur now",
    "start": "121210",
    "end": "124270"
  },
  {
    "text": "only W is most serverless architectures",
    "start": "124270",
    "end": "126759"
  },
  {
    "text": "revolve largely around AWS lambda there",
    "start": "126759",
    "end": "132130"
  },
  {
    "text": "are three different ways in which you",
    "start": "132130",
    "end": "133690"
  },
  {
    "text": "can invoke a lambda function the first",
    "start": "133690",
    "end": "136120"
  },
  {
    "text": "is synchronous which means your caller",
    "start": "136120",
    "end": "138400"
  },
  {
    "text": "will wait for a response from the lambda",
    "start": "138400",
    "end": "140530"
  },
  {
    "text": "function before doing any further",
    "start": "140530",
    "end": "142240"
  },
  {
    "text": "processing you know examples of this",
    "start": "142240",
    "end": "144550"
  },
  {
    "text": "pattern include restful api calls the",
    "start": "144550",
    "end": "147520"
  },
  {
    "text": "second is synchronous is a",
    "start": "147520",
    "end": "149230"
  },
  {
    "text": "fire-and-forget mode you know so your",
    "start": "149230",
    "end": "151450"
  },
  {
    "text": "caller does not wait for a response from",
    "start": "151450",
    "end": "153730"
  },
  {
    "text": "the lambda function example here could",
    "start": "153730",
    "end": "156310"
  },
  {
    "text": "be batch based file processing sort of",
    "start": "156310",
    "end": "158410"
  },
  {
    "text": "tasks and finally you have the stream",
    "start": "158410",
    "end": "161230"
  },
  {
    "text": "based mode which you use in the context",
    "start": "161230",
    "end": "163750"
  },
  {
    "text": "of streaming data data that is generated",
    "start": "163750",
    "end": "166540"
  },
  {
    "text": "continuously or in near-real-time",
    "start": "166540",
    "end": "168610"
  },
  {
    "text": "and is generally processed in batches or",
    "start": "168610",
    "end": "170980"
  },
  {
    "text": "in specific time windows unlike the",
    "start": "170980",
    "end": "174100"
  },
  {
    "text": "first two this is a pull based model",
    "start": "174100",
    "end": "176620"
  },
  {
    "text": "which means your lambda function lambda",
    "start": "176620",
    "end": "178239"
  },
  {
    "text": "service is continuously pulling your",
    "start": "178239",
    "end": "180130"
  },
  {
    "text": "streaming resource to pull down the",
    "start": "180130",
    "end": "181870"
  },
  {
    "text": "changes for processing so depending on",
    "start": "181870",
    "end": "184600"
  },
  {
    "text": "your use case you will see one of these",
    "start": "184600",
    "end": "186400"
  },
  {
    "text": "three different invocation models and",
    "start": "186400",
    "end": "188140"
  },
  {
    "text": "your architectures so let's look at how",
    "start": "188140",
    "end": "192670"
  },
  {
    "text": "some of our customers and partners are",
    "start": "192670",
    "end": "194680"
  },
  {
    "text": "using service today",
    "start": "194680",
    "end": "195970"
  },
  {
    "text": "the first category is to build web",
    "start": "195970",
    "end": "198489"
  },
  {
    "text": "applications the second is to build",
    "start": "198489",
    "end": "201819"
  },
  {
    "text": "backends this could just be API backends",
    "start": "201819",
    "end": "204340"
  },
  {
    "text": "to your mobile or web applications or",
    "start": "204340",
    "end": "206200"
  },
  {
    "text": "they could be back end processing sensor",
    "start": "206200",
    "end": "208690"
  },
  {
    "text": "data coming in from IOT devices the",
    "start": "208690",
    "end": "211989"
  },
  {
    "text": "third is data processing now one of the",
    "start": "211989",
    "end": "215980"
  },
  {
    "text": "drivers for lambda functions was the",
    "start": "215980",
    "end": "218260"
  },
  {
    "text": "need to attach compute to storage",
    "start": "218260",
    "end": "220239"
  },
  {
    "text": "because we had customers storing large",
    "start": "220239",
    "end": "222579"
  },
  {
    "text": "volumes of data in s3 buckets and needed",
    "start": "222579",
    "end": "225400"
  },
  {
    "text": "a way to easily process this data so not",
    "start": "225400",
    "end": "228160"
  },
  {
    "text": "surprisingly this is the largest",
    "start": "228160",
    "end": "229780"
  },
  {
    "text": "category of server let's use cases today",
    "start": "229780",
    "end": "231820"
  },
  {
    "text": "if you're building text or voice based",
    "start": "231820",
    "end": "234850"
  },
  {
    "text": "chat BOTS you can have lambda power",
    "start": "234850",
    "end": "236560"
  },
  {
    "text": "there logic Alexa skills are written in",
    "start": "236560",
    "end": "239620"
  },
  {
    "text": "lambda functions and finally you can use",
    "start": "239620",
    "end": "242200"
  },
  {
    "text": "service applications to automate the",
    "start": "242200",
    "end": "244359"
  },
  {
    "text": "management of your AWS environment now",
    "start": "244359",
    "end": "247120"
  },
  {
    "text": "if you're someone who's just getting",
    "start": "247120",
    "end": "248859"
  },
  {
    "text": "started on the server Liz earnings and",
    "start": "248859",
    "end": "251019"
  },
  {
    "text": "this is a great place to start because",
    "start": "251019",
    "end": "252820"
  },
  {
    "text": "applications in this category are",
    "start": "252820",
    "end": "254380"
  },
  {
    "text": "relatively easier to incorporate into",
    "start": "254380",
    "end": "256720"
  },
  {
    "text": "existing architectures so on that note",
    "start": "256720",
    "end": "261549"
  },
  {
    "text": "let's kick off a stirry of architectures",
    "start": "261549",
    "end": "263890"
  },
  {
    "text": "by looking at how one of our customers",
    "start": "263890",
    "end": "265539"
  },
  {
    "text": "global fashion group are using server",
    "start": "265539",
    "end": "267310"
  },
  {
    "text": "lists internally today I feel a bit",
    "start": "267310",
    "end": "269860"
  },
  {
    "text": "nostalgic talking about them because I",
    "start": "269860",
    "end": "271900"
  },
  {
    "text": "know I met them initially about 10",
    "start": "271900",
    "end": "273849"
  },
  {
    "text": "months",
    "start": "273849",
    "end": "274270"
  },
  {
    "text": "back when we were still brainstorming",
    "start": "274270",
    "end": "275830"
  },
  {
    "text": "the initial initial surveillance",
    "start": "275830",
    "end": "277240"
  },
  {
    "text": "architecture and I clearly remember we",
    "start": "277240",
    "end": "279340"
  },
  {
    "text": "didn't have a whiteboard in the room and",
    "start": "279340",
    "end": "280900"
  },
  {
    "text": "we actually whiteboard it on the window",
    "start": "280900",
    "end": "282970"
  },
  {
    "text": "after that so it's my pleasure today to",
    "start": "282970",
    "end": "285520"
  },
  {
    "text": "invite on stage ment on to share with us",
    "start": "285520",
    "end": "288250"
  },
  {
    "text": "what that architecture looks like today",
    "start": "288250",
    "end": "292080"
  },
  {
    "text": "Thank You Artie so hi everybody my name",
    "start": "292710",
    "end": "300910"
  },
  {
    "text": "is minto I'm working a global fashion",
    "start": "300910",
    "end": "303250"
  },
  {
    "text": "group which is the parent company of",
    "start": "303250",
    "end": "305800"
  },
  {
    "text": "five ecommerce in the world",
    "start": "305800",
    "end": "307930"
  },
  {
    "text": "specialized infection including Zalora",
    "start": "307930",
    "end": "310780"
  },
  {
    "text": "in Southeast Asia the ikonics in",
    "start": "310780",
    "end": "313420"
  },
  {
    "text": "Australia and she others in the",
    "start": "313420",
    "end": "315670"
  },
  {
    "text": "Federation aegypti team we are",
    "start": "315670",
    "end": "319690"
  },
  {
    "text": "developing a pricing engine driven by a",
    "start": "319690",
    "end": "322510"
  },
  {
    "text": "lot of later another thing to recommend",
    "start": "322510",
    "end": "325300"
  },
  {
    "text": "the best part for the catalog of each",
    "start": "325300",
    "end": "327700"
  },
  {
    "text": "reason the system little support up to",
    "start": "327700",
    "end": "330970"
  },
  {
    "text": "millions our price update regularly",
    "start": "330970",
    "end": "333550"
  },
  {
    "text": "however the traffic is not awakened",
    "start": "333550",
    "end": "336790"
  },
  {
    "text": "system but can steadily increased due to",
    "start": "336790",
    "end": "339460"
  },
  {
    "text": "the benefits coming from different recur",
    "start": "339460",
    "end": "342070"
  },
  {
    "text": "like competition in Vinci or promotion",
    "start": "342070",
    "end": "347160"
  },
  {
    "text": "given the characteristic of support we",
    "start": "347160",
    "end": "350560"
  },
  {
    "text": "decided to apply my Kosova an",
    "start": "350560",
    "end": "352750"
  },
  {
    "text": "event-driven architecture the idea is to",
    "start": "352750",
    "end": "355870"
  },
  {
    "text": "have our common core engine that can",
    "start": "355870",
    "end": "358000"
  },
  {
    "text": "support all the region and an",
    "start": "358000",
    "end": "360700"
  },
  {
    "text": "integration layer to integrate with",
    "start": "360700",
    "end": "362770"
  },
  {
    "text": "their system besides we want to build a",
    "start": "362770",
    "end": "366400"
  },
  {
    "text": "full stack an agile team that can",
    "start": "366400",
    "end": "368350"
  },
  {
    "text": "support final number n also with",
    "start": "368350",
    "end": "370930"
  },
  {
    "text": "continuous deployment and automated",
    "start": "370930",
    "end": "373360"
  },
  {
    "text": "testing we want to push code to",
    "start": "373360",
    "end": "375490"
  },
  {
    "text": "production frequently these are the",
    "start": "375490",
    "end": "379750"
  },
  {
    "text": "tactics choices that we based Bay on the",
    "start": "379750",
    "end": "382300"
  },
  {
    "text": "Buddha and 30 Malaysia for programming",
    "start": "382300",
    "end": "385810"
  },
  {
    "text": "languages we chose them a script for",
    "start": "385810",
    "end": "388120"
  },
  {
    "text": "both back-end and Finance with not chess",
    "start": "388120",
    "end": "390790"
  },
  {
    "text": "and react yes we also you I turn for",
    "start": "390790",
    "end": "394210"
  },
  {
    "text": "some muscle early module for hosting AWS",
    "start": "394210",
    "end": "398650"
  },
  {
    "text": "core of our IT strategy for the group",
    "start": "398650",
    "end": "403270"
  },
  {
    "text": "and other reason",
    "start": "403270",
    "end": "405810"
  },
  {
    "text": "come with iws lambda was selected as the",
    "start": "405810",
    "end": "408810"
  },
  {
    "text": "main component to Bill our micro survey",
    "start": "408810",
    "end": "411510"
  },
  {
    "text": "then quite natural we use Kenny C dynamo",
    "start": "411510",
    "end": "415530"
  },
  {
    "text": "beat me and Ashley to be our",
    "start": "415530",
    "end": "417600"
  },
  {
    "text": "architecture what you see here is one of",
    "start": "417600",
    "end": "423090"
  },
  {
    "text": "Surrey official flow look like in terms",
    "start": "423090",
    "end": "426180"
  },
  {
    "text": "of architectural design so it's quite",
    "start": "426180",
    "end": "429210"
  },
  {
    "text": "complex I will not go into details that",
    "start": "429210",
    "end": "432060"
  },
  {
    "text": "want to give you an idea let's look at",
    "start": "432060",
    "end": "434820"
  },
  {
    "text": "the high level architecture before going",
    "start": "434820",
    "end": "438780"
  },
  {
    "text": "to pricing engine started are from",
    "start": "438780",
    "end": "441389"
  },
  {
    "text": "external sources will go show our big",
    "start": "441389",
    "end": "443820"
  },
  {
    "text": "data platform for cleaning and",
    "start": "443820",
    "end": "445950"
  },
  {
    "text": "processing after that's the event will",
    "start": "445950",
    "end": "448500"
  },
  {
    "text": "be sensual can you see though she goes",
    "start": "448500",
    "end": "450479"
  },
  {
    "text": "the flow you can notice here there is",
    "start": "450479",
    "end": "453180"
  },
  {
    "text": "one buys optimizer survey not running on",
    "start": "453180",
    "end": "456270"
  },
  {
    "text": "ec2 instances but not lambda because of",
    "start": "456270",
    "end": "459750"
  },
  {
    "text": "the loan processing paths that we cannot",
    "start": "459750",
    "end": "461940"
  },
  {
    "text": "split the first we receive those event",
    "start": "461940",
    "end": "466290"
  },
  {
    "text": "is recommendation which selects the best",
    "start": "466290",
    "end": "470130"
  },
  {
    "text": "person among multiple by source and",
    "start": "470130",
    "end": "472740"
  },
  {
    "text": "store them in a day's podcast database",
    "start": "472740",
    "end": "476370"
  },
  {
    "text": "so that less that they can be reshaped",
    "start": "476370",
    "end": "479010"
  },
  {
    "text": "Sudan API gateway to this day in the",
    "start": "479010",
    "end": "482490"
  },
  {
    "text": "dashboard where the user can log in to",
    "start": "482490",
    "end": "484560"
  },
  {
    "text": "sees the recommendation the user can",
    "start": "484560",
    "end": "488190"
  },
  {
    "text": "evoke origin services for the apprised",
    "start": "488190",
    "end": "491640"
  },
  {
    "text": "they can send two variations of it where",
    "start": "491640",
    "end": "494400"
  },
  {
    "text": "the new updates could be checked by",
    "start": "494400",
    "end": "496410"
  },
  {
    "text": "different visit rule that we define in",
    "start": "496410",
    "end": "499320"
  },
  {
    "text": "dynamodb table unsuccessfully validated",
    "start": "499320",
    "end": "503340"
  },
  {
    "text": "we will send them for publishing in",
    "start": "503340",
    "end": "505710"
  },
  {
    "text": "here's the integration will be called to",
    "start": "505710",
    "end": "508440"
  },
  {
    "text": "request by change to the regional",
    "start": "508440",
    "end": "511320"
  },
  {
    "text": "company system when they returns the",
    "start": "511320",
    "end": "514080"
  },
  {
    "text": "respond week or display Teresa back to",
    "start": "514080",
    "end": "516390"
  },
  {
    "text": "the user we have been using lambda for",
    "start": "516390",
    "end": "521520"
  },
  {
    "text": "one year now as a developer I further",
    "start": "521520",
    "end": "524339"
  },
  {
    "text": "acquire a number of advantages firstly",
    "start": "524339",
    "end": "528300"
  },
  {
    "text": "it easy to use there are no need to",
    "start": "528300",
    "end": "531000"
  },
  {
    "text": "manage the server lambda also help you",
    "start": "531000",
    "end": "533580"
  },
  {
    "text": "with auto scaling you're only got shop",
    "start": "533580",
    "end": "535740"
  },
  {
    "text": "for what you use moreover the",
    "start": "535740",
    "end": "539000"
  },
  {
    "text": "support multiple chica this allow you to",
    "start": "539000",
    "end": "542000"
  },
  {
    "text": "have many options for your architecture",
    "start": "542000",
    "end": "545260"
  },
  {
    "text": "however we met some challenges along the",
    "start": "545260",
    "end": "548810"
  },
  {
    "text": "way",
    "start": "548810",
    "end": "549500"
  },
  {
    "text": "the first one is 1,000 concurrent",
    "start": "549500",
    "end": "552770"
  },
  {
    "text": "invocation per cow this one can request",
    "start": "552770",
    "end": "555860"
  },
  {
    "text": "it for increased but still you need to",
    "start": "555860",
    "end": "558200"
  },
  {
    "text": "be taken into account when you desire",
    "start": "558200",
    "end": "560810"
  },
  {
    "text": "your architecture the second limitation",
    "start": "560810",
    "end": "563900"
  },
  {
    "text": "as tree country gigabyte memory and now",
    "start": "563900",
    "end": "567500"
  },
  {
    "text": "five minutes time out if you have our",
    "start": "567500",
    "end": "570230"
  },
  {
    "text": "memory intensive or time-consuming task",
    "start": "570230",
    "end": "573680"
  },
  {
    "text": "it better for you to apply our master",
    "start": "573680",
    "end": "576560"
  },
  {
    "text": "worker approach thirdly sometime lambda",
    "start": "576560",
    "end": "581120"
  },
  {
    "text": "cos darken up to a few seconds to reduce",
    "start": "581120",
    "end": "584300"
  },
  {
    "text": "the latency we use a woman plugin which",
    "start": "584300",
    "end": "587750"
  },
  {
    "text": "Shikha lambda every five minutes so that",
    "start": "587750",
    "end": "590120"
  },
  {
    "text": "it ready for the neck invocation at some",
    "start": "590120",
    "end": "594860"
  },
  {
    "text": "point we also encounter some costs",
    "start": "594860",
    "end": "597290"
  },
  {
    "text": "rising on dynamodb because of sedation",
    "start": "597290",
    "end": "600380"
  },
  {
    "text": "of a Buddha so as we didn't use lambda",
    "start": "600380",
    "end": "603920"
  },
  {
    "text": "chica we sit though ideas for some of",
    "start": "603920",
    "end": "607040"
  },
  {
    "text": "the services lastly there is one",
    "start": "607040",
    "end": "611300"
  },
  {
    "text": "challenge that is true for lambda but",
    "start": "611300",
    "end": "613550"
  },
  {
    "text": "more general for Michael so the",
    "start": "613550",
    "end": "615410"
  },
  {
    "text": "architecture itself is the difficulty in",
    "start": "615410",
    "end": "618140"
  },
  {
    "text": "checking and debugging the result the",
    "start": "618140",
    "end": "621290"
  },
  {
    "text": "issue we implement the creation ID by",
    "start": "621290",
    "end": "624680"
  },
  {
    "text": "passing a unique ID to different",
    "start": "624680",
    "end": "626900"
  },
  {
    "text": "component for one event the way we",
    "start": "626900",
    "end": "629330"
  },
  {
    "text": "cannot change that event quite easily so",
    "start": "629330",
    "end": "631870"
  },
  {
    "text": "that's it for my sharing on our",
    "start": "631870",
    "end": "634640"
  },
  {
    "text": "selection II thank you",
    "start": "634640",
    "end": "636890"
  },
  {
    "text": "I will pass you back to IP Thank You min",
    "start": "636890",
    "end": "643850"
  },
  {
    "text": "and that architectures definitely come a",
    "start": "643850",
    "end": "646339"
  },
  {
    "text": "long way since my scribblings on the",
    "start": "646339",
    "end": "648530"
  },
  {
    "text": "window I guess what we will do next is I",
    "start": "648530",
    "end": "653330"
  },
  {
    "text": "will will go over a few different common",
    "start": "653330",
    "end": "655760"
  },
  {
    "text": "service architecture patterns and will",
    "start": "655760",
    "end": "657980"
  },
  {
    "text": "also apply them and try to use them to",
    "start": "657980",
    "end": "661040"
  },
  {
    "text": "build out a real-world application so",
    "start": "661040",
    "end": "664700"
  },
  {
    "text": "let's start with the basic ones first",
    "start": "664700",
    "end": "666970"
  },
  {
    "text": "what you see on the left is an example",
    "start": "666970",
    "end": "669260"
  },
  {
    "text": "of a file or an object arriving in an s3",
    "start": "669260",
    "end": "672499"
  },
  {
    "text": "bucket which then triggers a lambda",
    "start": "672499",
    "end": "674179"
  },
  {
    "text": "function to process that file you know",
    "start": "674179",
    "end": "676729"
  },
  {
    "text": "common use cases for this would be to",
    "start": "676729",
    "end": "678979"
  },
  {
    "text": "periodically upload your application",
    "start": "678979",
    "end": "681319"
  },
  {
    "text": "data into your data warehousing system",
    "start": "681319",
    "end": "683179"
  },
  {
    "text": "or you probably receive files from other",
    "start": "683179",
    "end": "685579"
  },
  {
    "text": "third parties which you need to then",
    "start": "685579",
    "end": "687259"
  },
  {
    "text": "parse and then upload it into your own",
    "start": "687259",
    "end": "689359"
  },
  {
    "text": "systems the second pattern here is",
    "start": "689359",
    "end": "693199"
  },
  {
    "text": "common in message based architectures a",
    "start": "693199",
    "end": "696309"
  },
  {
    "text": "publisher would post messages to a topic",
    "start": "696309",
    "end": "699169"
  },
  {
    "text": "which is simple notification service in",
    "start": "699169",
    "end": "701749"
  },
  {
    "text": "this case and then you would have a",
    "start": "701749",
    "end": "703039"
  },
  {
    "text": "lambda function which would then process",
    "start": "703039",
    "end": "704929"
  },
  {
    "text": "these messages just recently we",
    "start": "704929",
    "end": "707719"
  },
  {
    "text": "announced the support for subscription",
    "start": "707719",
    "end": "710029"
  },
  {
    "text": "filter policies which means you can be",
    "start": "710029",
    "end": "712459"
  },
  {
    "text": "selective about the messages that your",
    "start": "712459",
    "end": "714529"
  },
  {
    "text": "lambda or the subscribers actually",
    "start": "714529",
    "end": "716359"
  },
  {
    "text": "process so they don't have to blindly",
    "start": "716359",
    "end": "718009"
  },
  {
    "text": "get all the messages that are delivered",
    "start": "718009",
    "end": "719809"
  },
  {
    "text": "to a topic now both of these are",
    "start": "719809",
    "end": "722089"
  },
  {
    "text": "asynchronous invocation modes API",
    "start": "722089",
    "end": "727129"
  },
  {
    "text": "gateway is a service that allows you to",
    "start": "727129",
    "end": "729319"
  },
  {
    "text": "build restful interfaces you can have",
    "start": "729319",
    "end": "732259"
  },
  {
    "text": "API gateway trigger a lambda function to",
    "start": "732259",
    "end": "734599"
  },
  {
    "text": "handle all your API requests now a",
    "start": "734599",
    "end": "737509"
  },
  {
    "text": "slight variation to this would be to",
    "start": "737509",
    "end": "739909"
  },
  {
    "text": "have API gateway invoke step functions",
    "start": "739909",
    "end": "742399"
  },
  {
    "text": "instead step functions are a great way",
    "start": "742399",
    "end": "745669"
  },
  {
    "text": "to orchestrate lambda functions that is",
    "start": "745669",
    "end": "748099"
  },
  {
    "text": "they allow you to chain together lambda",
    "start": "748099",
    "end": "750289"
  },
  {
    "text": "functions and build in control flow",
    "start": "750289",
    "end": "752089"
  },
  {
    "text": "logic they're also great to streamline",
    "start": "752089",
    "end": "754669"
  },
  {
    "text": "your lambda code because you can offload",
    "start": "754669",
    "end": "756439"
  },
  {
    "text": "things like common validations to the",
    "start": "756439",
    "end": "758599"
  },
  {
    "text": "step service you know for those of you",
    "start": "758599",
    "end": "760729"
  },
  {
    "text": "who attended data dogs talk right before",
    "start": "760729",
    "end": "762949"
  },
  {
    "text": "lunch",
    "start": "762949",
    "end": "763309"
  },
  {
    "text": "I think they spoke about this during",
    "start": "763309",
    "end": "764839"
  },
  {
    "text": "their talk the difference of this",
    "start": "764839",
    "end": "768439"
  },
  {
    "text": "compared to the first one that is that",
    "start": "768439",
    "end": "770720"
  },
  {
    "text": "this is an asynchronous invocation",
    "start": "770720",
    "end": "772489"
  },
  {
    "text": "because you want when you have API",
    "start": "772489",
    "end": "774499"
  },
  {
    "text": "gateway invoke step functions your",
    "start": "774499",
    "end": "776149"
  },
  {
    "text": "client won't wait for a response now",
    "start": "776149",
    "end": "779539"
  },
  {
    "text": "what if you don't have a need to invoke",
    "start": "779539",
    "end": "781279"
  },
  {
    "text": "lambda functions at all you can use API",
    "start": "781279",
    "end": "784309"
  },
  {
    "text": "gateway to proxy requests directly to",
    "start": "784309",
    "end": "786679"
  },
  {
    "text": "back in aw services like dynamodb tables",
    "start": "786679",
    "end": "789739"
  },
  {
    "text": "or Amazon s3 API gateway here is a great",
    "start": "789739",
    "end": "793219"
  },
  {
    "text": "way to decouple your AWS back end from",
    "start": "793219",
    "end": "796039"
  },
  {
    "text": "the clients it also gives you a lot of",
    "start": "796039",
    "end": "798109"
  },
  {
    "text": "added benefits for example rate limiting",
    "start": "798109",
    "end": "800629"
  },
  {
    "text": "or throttling caching and request",
    "start": "800629",
    "end": "802879"
  },
  {
    "text": "validation",
    "start": "802879",
    "end": "804329"
  },
  {
    "text": "so let's pause here and look at how we",
    "start": "804329",
    "end": "807069"
  },
  {
    "text": "can use some of these architecture",
    "start": "807069",
    "end": "809110"
  },
  {
    "text": "patterns to build out a real-world",
    "start": "809110",
    "end": "810759"
  },
  {
    "text": "application so I'm gonna switch over to",
    "start": "810759",
    "end": "813100"
  },
  {
    "text": "my console now what we have here is an",
    "start": "813100",
    "end": "822759"
  },
  {
    "text": "example of a restaurant search",
    "start": "822759",
    "end": "824740"
  },
  {
    "text": "application so when a user logs in the",
    "start": "824740",
    "end": "828939"
  },
  {
    "text": "application shows me restaurants and the",
    "start": "828939",
    "end": "830920"
  },
  {
    "text": "nearby area so all these yellow markers",
    "start": "830920",
    "end": "833500"
  },
  {
    "text": "you see here represent restaurants so I",
    "start": "833500",
    "end": "836290"
  },
  {
    "text": "can further drill down here and I can",
    "start": "836290",
    "end": "838389"
  },
  {
    "text": "see what this restaurant here is the",
    "start": "838389",
    "end": "841300"
  },
  {
    "text": "bytes you see here are drivers who are",
    "start": "841300",
    "end": "843699"
  },
  {
    "text": "currently probably delivering orders for",
    "start": "843699",
    "end": "845680"
  },
  {
    "text": "their customers so what I'm gonna do now",
    "start": "845680",
    "end": "849490"
  },
  {
    "text": "is let's say I'm in a mood for pizza so",
    "start": "849490",
    "end": "852970"
  },
  {
    "text": "let me go type in pizza and see what",
    "start": "852970",
    "end": "855069"
  },
  {
    "text": "happens this application should return",
    "start": "855069",
    "end": "857800"
  },
  {
    "text": "to me the nearest pizza place in this",
    "start": "857800",
    "end": "860079"
  },
  {
    "text": "case so now this website itself is a",
    "start": "860079",
    "end": "864160"
  },
  {
    "text": "static website which means I don't need",
    "start": "864160",
    "end": "867220"
  },
  {
    "text": "a server to host this the website is",
    "start": "867220",
    "end": "869560"
  },
  {
    "text": "sitting in an s3 bucket right now of",
    "start": "869560",
    "end": "872410"
  },
  {
    "text": "course there are dynamic capabilities",
    "start": "872410",
    "end": "873490"
  },
  {
    "text": "like you saw when I searched for a",
    "start": "873490",
    "end": "875470"
  },
  {
    "text": "particular cuisine type it returned to",
    "start": "875470",
    "end": "877630"
  },
  {
    "text": "me the nearest restaurant that serves it",
    "start": "877630",
    "end": "879430"
  },
  {
    "text": "so let's go to my developer tools here",
    "start": "879430",
    "end": "882160"
  },
  {
    "text": "and see what happens exactly when I",
    "start": "882160",
    "end": "884350"
  },
  {
    "text": "search for something so let me go back",
    "start": "884350",
    "end": "888399"
  },
  {
    "text": "and repeat my search here and you should",
    "start": "888399",
    "end": "892480"
  },
  {
    "text": "see that here's the request that God",
    "start": "892480",
    "end": "894670"
  },
  {
    "text": "sent out so my bucket actually invokes",
    "start": "894670",
    "end": "899740"
  },
  {
    "text": "an API gateway endpoint here it calls",
    "start": "899740",
    "end": "902410"
  },
  {
    "text": "the resource slash restaurant slash",
    "start": "902410",
    "end": "904300"
  },
  {
    "text": "search and passes two parameters to it",
    "start": "904300",
    "end": "906370"
  },
  {
    "text": "one is the search terms I entered and",
    "start": "906370",
    "end": "909189"
  },
  {
    "text": "the second is my location coordinates",
    "start": "909189",
    "end": "911079"
  },
  {
    "text": "the API gateway in turn calls a lambda",
    "start": "911079",
    "end": "914649"
  },
  {
    "text": "function and it is the lambda function",
    "start": "914649",
    "end": "916540"
  },
  {
    "text": "that's doing the actual work so I'm",
    "start": "916540",
    "end": "918939"
  },
  {
    "text": "going to switch to my AWS console here",
    "start": "918939",
    "end": "922050"
  },
  {
    "text": "and let's take a quick look at the",
    "start": "922050",
    "end": "925360"
  },
  {
    "text": "lambda function itself so what you see",
    "start": "925360",
    "end": "928899"
  },
  {
    "text": "at the very top here is lambda security",
    "start": "928899",
    "end": "931629"
  },
  {
    "text": "configuration so on the left here you",
    "start": "931629",
    "end": "934300"
  },
  {
    "text": "have the function policies which tell",
    "start": "934300",
    "end": "936610"
  },
  {
    "text": "you who is a",
    "start": "936610",
    "end": "937570"
  },
  {
    "text": "ow to invoke your lambda function on the",
    "start": "937570",
    "end": "940270"
  },
  {
    "text": "right here you have the execution",
    "start": "940270",
    "end": "942040"
  },
  {
    "text": "policies which basically controls what",
    "start": "942040",
    "end": "944830"
  },
  {
    "text": "other aw services my lambda function can",
    "start": "944830",
    "end": "947560"
  },
  {
    "text": "talk to when it runs so in this case my",
    "start": "947560",
    "end": "950710"
  },
  {
    "text": "lambda function can talk to cloud watch",
    "start": "950710",
    "end": "952240"
  },
  {
    "text": "log so I can actually publish and view",
    "start": "952240",
    "end": "954400"
  },
  {
    "text": "my logging information and you can talk",
    "start": "954400",
    "end": "956230"
  },
  {
    "text": "to two different databases I'm using",
    "start": "956230",
    "end": "959050"
  },
  {
    "text": "dynamo DB here to store basic",
    "start": "959050",
    "end": "961150"
  },
  {
    "text": "information about my restaurants and I'm",
    "start": "961150",
    "end": "963610"
  },
  {
    "text": "indexing text-based fields into elastic",
    "start": "963610",
    "end": "966070"
  },
  {
    "text": "search because elastic search is great",
    "start": "966070",
    "end": "967960"
  },
  {
    "text": "for both text and geospatial queries so",
    "start": "967960",
    "end": "971920"
  },
  {
    "text": "this pattern where you have a UI which",
    "start": "971920",
    "end": "974140"
  },
  {
    "text": "happens to be a static website in s3 but",
    "start": "974140",
    "end": "976540"
  },
  {
    "text": "it might as well be your native mobile",
    "start": "976540",
    "end": "978310"
  },
  {
    "text": "app invoking API gateway which then",
    "start": "978310",
    "end": "981250"
  },
  {
    "text": "calls lambda and lambda talking to a",
    "start": "981250",
    "end": "983110"
  },
  {
    "text": "data store is a very typical",
    "start": "983110",
    "end": "985060"
  },
  {
    "text": "surveillance architecture pattern so if",
    "start": "985060",
    "end": "989290"
  },
  {
    "text": "we scroll down here and take a quick",
    "start": "989290",
    "end": "990850"
  },
  {
    "text": "look at the lambda code in this case the",
    "start": "990850",
    "end": "995050"
  },
  {
    "text": "lambda function is written in nodejs you",
    "start": "995050",
    "end": "997930"
  },
  {
    "text": "can see based on the parameters I passed",
    "start": "997930",
    "end": "999910"
  },
  {
    "text": "to it it executes an elastic search",
    "start": "999910",
    "end": "1002220"
  },
  {
    "text": "query against my elastic search cluster",
    "start": "1002220",
    "end": "1004770"
  },
  {
    "text": "and returns the results in finally if",
    "start": "1004770",
    "end": "1007440"
  },
  {
    "text": "let's take a quick look at the",
    "start": "1007440",
    "end": "1008970"
  },
  {
    "text": "monitoring tab here and you should see",
    "start": "1008970",
    "end": "1012810"
  },
  {
    "text": "that my lambda function has just been",
    "start": "1012810",
    "end": "1014430"
  },
  {
    "text": "invoked here you can see how long it",
    "start": "1014430",
    "end": "1016530"
  },
  {
    "text": "took my function to run and good news",
    "start": "1016530",
    "end": "1018750"
  },
  {
    "text": "there are no errors now the final point",
    "start": "1018750",
    "end": "1023010"
  },
  {
    "text": "I want to make here is although the",
    "start": "1023010",
    "end": "1024449"
  },
  {
    "text": "website itself is hosted on an s3 bucket",
    "start": "1024449",
    "end": "1027000"
  },
  {
    "text": "I'm actually accessing it via a",
    "start": "1027000",
    "end": "1028980"
  },
  {
    "text": "CloudFront distribution now CloudFront",
    "start": "1028980",
    "end": "1031890"
  },
  {
    "text": "distribution is a content delivery",
    "start": "1031890",
    "end": "1033150"
  },
  {
    "text": "network which is a great idea if you",
    "start": "1033150",
    "end": "1035160"
  },
  {
    "text": "have geographically distributed",
    "start": "1035160",
    "end": "1036420"
  },
  {
    "text": "customers it also gives you a lot of",
    "start": "1036420",
    "end": "1038790"
  },
  {
    "text": "added security benefits you know for",
    "start": "1038790",
    "end": "1041188"
  },
  {
    "text": "example in this case my s3 bucket itself",
    "start": "1041189",
    "end": "1043530"
  },
  {
    "text": "is not publicly accessible and only the",
    "start": "1043530",
    "end": "1046170"
  },
  {
    "text": "cloud front user is allowed to access it",
    "start": "1046170",
    "end": "1048329"
  },
  {
    "text": "so let's quickly confirm that so I'm",
    "start": "1048329",
    "end": "1053580"
  },
  {
    "text": "just gonna copy my bucket that's hosting",
    "start": "1053580",
    "end": "1055890"
  },
  {
    "text": "the website gonna switch to a new tab",
    "start": "1055890",
    "end": "1060060"
  },
  {
    "text": "here",
    "start": "1060060",
    "end": "1062360"
  },
  {
    "text": "so if you go here sure enough I get an",
    "start": "1066130",
    "end": "1069140"
  },
  {
    "text": "access denied exception this is good so",
    "start": "1069140",
    "end": "1071720"
  },
  {
    "text": "what I'm going to do now is I'm going to",
    "start": "1071720",
    "end": "1073760"
  },
  {
    "text": "go and revert the bucket policy and make",
    "start": "1073760",
    "end": "1076490"
  },
  {
    "text": "my bucket publicly accessible so the way",
    "start": "1076490",
    "end": "1079370"
  },
  {
    "text": "I'm going to do that is I have an I am",
    "start": "1079370",
    "end": "1087200"
  },
  {
    "text": "policy here which basically gives the",
    "start": "1087200",
    "end": "1093410"
  },
  {
    "text": "get object accidents or public read",
    "start": "1093410",
    "end": "1095420"
  },
  {
    "text": "access to all of this bucket and the",
    "start": "1095420",
    "end": "1097610"
  },
  {
    "text": "star here means basically to the entire",
    "start": "1097610",
    "end": "1099530"
  },
  {
    "text": "world so I'm gonna run this I have a",
    "start": "1099530",
    "end": "1103400"
  },
  {
    "text": "simple script here that will apply this",
    "start": "1103400",
    "end": "1104930"
  },
  {
    "text": "bucket policy to my bucket",
    "start": "1104930",
    "end": "1107290"
  },
  {
    "text": "once that script runs I'm gonna switch",
    "start": "1107290",
    "end": "1109970"
  },
  {
    "text": "back here and I'm going to reload this",
    "start": "1109970",
    "end": "1112700"
  },
  {
    "text": "page and I should see sure enough it",
    "start": "1112700",
    "end": "1115100"
  },
  {
    "text": "loads my application now I'll come back",
    "start": "1115100",
    "end": "1117650"
  },
  {
    "text": "to the significance of what I just did a",
    "start": "1117650",
    "end": "1119600"
  },
  {
    "text": "little later on in my talk so great I'm",
    "start": "1119600",
    "end": "1123710"
  },
  {
    "text": "gonna switch back to my slides now now",
    "start": "1123710",
    "end": "1132020"
  },
  {
    "text": "you need a way to manage the users of",
    "start": "1132020",
    "end": "1134030"
  },
  {
    "text": "your application",
    "start": "1134030",
    "end": "1135490"
  },
  {
    "text": "Amazon Cognito is a service that allows",
    "start": "1135490",
    "end": "1137930"
  },
  {
    "text": "you to do that",
    "start": "1137930",
    "end": "1139070"
  },
  {
    "text": "now what kognito also does is it",
    "start": "1139070",
    "end": "1141410"
  },
  {
    "text": "publishes these lifecycle events when a",
    "start": "1141410",
    "end": "1143930"
  },
  {
    "text": "user registers for the first time or",
    "start": "1143930",
    "end": "1146060"
  },
  {
    "text": "maybe changes their password you can",
    "start": "1146060",
    "end": "1148220"
  },
  {
    "text": "then have a lambda function trigger to",
    "start": "1148220",
    "end": "1150080"
  },
  {
    "text": "notify the user every time these events",
    "start": "1150080",
    "end": "1152390"
  },
  {
    "text": "have occurred for example you can send",
    "start": "1152390",
    "end": "1154430"
  },
  {
    "text": "out an welcome email to the user or let",
    "start": "1154430",
    "end": "1156410"
  },
  {
    "text": "them know that they just reset their",
    "start": "1156410",
    "end": "1157820"
  },
  {
    "text": "password so while on the topic of emails",
    "start": "1157820",
    "end": "1161210"
  },
  {
    "text": "let's assume that you wish to run an",
    "start": "1161210",
    "end": "1163400"
  },
  {
    "text": "email marketing campaign for your",
    "start": "1163400",
    "end": "1165080"
  },
  {
    "text": "end-users Amazon ser so simple email",
    "start": "1165080",
    "end": "1168500"
  },
  {
    "text": "service acts as an outbound email server",
    "start": "1168500",
    "end": "1170720"
  },
  {
    "text": "in this case now occasionally you might",
    "start": "1170720",
    "end": "1173510"
  },
  {
    "text": "have emails bouncing either because the",
    "start": "1173510",
    "end": "1176150"
  },
  {
    "text": "user does not exist or maybe their",
    "start": "1176150",
    "end": "1177830"
  },
  {
    "text": "mailbox is full",
    "start": "1177830",
    "end": "1178880"
  },
  {
    "text": "now over time if you have too many",
    "start": "1178880",
    "end": "1181340"
  },
  {
    "text": "bounces and this can have a negative",
    "start": "1181340",
    "end": "1183410"
  },
  {
    "text": "impact on your reputation so one way to",
    "start": "1183410",
    "end": "1186470"
  },
  {
    "text": "handle that would be to have a lambda",
    "start": "1186470",
    "end": "1188090"
  },
  {
    "text": "function look for these bounce emails",
    "start": "1188090",
    "end": "1190280"
  },
  {
    "text": "and you could have the lambda go and",
    "start": "1190280",
    "end": "1192470"
  },
  {
    "text": "update your user database and flag those",
    "start": "1192470",
    "end": "1194960"
  },
  {
    "text": "users",
    "start": "1194960",
    "end": "1195740"
  },
  {
    "text": "that you don't continue to send emails",
    "start": "1195740",
    "end": "1197510"
  },
  {
    "text": "till you have verified their email",
    "start": "1197510",
    "end": "1199010"
  },
  {
    "text": "addresses so let's look at how lamda",
    "start": "1199010",
    "end": "1202850"
  },
  {
    "text": "might help in the database world the",
    "start": "1202850",
    "end": "1206270"
  },
  {
    "text": "first diagram you see here is an example",
    "start": "1206270",
    "end": "1208340"
  },
  {
    "text": "of implementing change data capture for",
    "start": "1208340",
    "end": "1211100"
  },
  {
    "text": "the no sequel database dynamodb so",
    "start": "1211100",
    "end": "1214070"
  },
  {
    "text": "change data capture is just the process",
    "start": "1214070",
    "end": "1216470"
  },
  {
    "text": "of logging all the changes to your",
    "start": "1216470",
    "end": "1218630"
  },
  {
    "text": "database typically with the intent of",
    "start": "1218630",
    "end": "1220940"
  },
  {
    "text": "replicating your database elsewhere so",
    "start": "1220940",
    "end": "1223670"
  },
  {
    "text": "you can do that for dynamodb by first",
    "start": "1223670",
    "end": "1225830"
  },
  {
    "text": "enabling streams dynamodb streams are",
    "start": "1225830",
    "end": "1229100"
  },
  {
    "text": "built on top of Kinesis streams what",
    "start": "1229100",
    "end": "1231679"
  },
  {
    "text": "that does is all changes that occur to",
    "start": "1231679",
    "end": "1233809"
  },
  {
    "text": "your table are now written out to the",
    "start": "1233809",
    "end": "1235790"
  },
  {
    "text": "stream you can then have a lambda",
    "start": "1235790",
    "end": "1237590"
  },
  {
    "text": "function read these changes from the",
    "start": "1237590",
    "end": "1239480"
  },
  {
    "text": "stream and maybe replicate the data to",
    "start": "1239480",
    "end": "1241490"
  },
  {
    "text": "another DynamoDB in a different region",
    "start": "1241490",
    "end": "1243350"
  },
  {
    "text": "or it could probably just transform the",
    "start": "1243350",
    "end": "1245570"
  },
  {
    "text": "data you know it may just summarize the",
    "start": "1245570",
    "end": "1247429"
  },
  {
    "text": "data and upload it into your data",
    "start": "1247429",
    "end": "1248870"
  },
  {
    "text": "warehouse what about a relational",
    "start": "1248870",
    "end": "1251900"
  },
  {
    "text": "database context stored procedures and",
    "start": "1251900",
    "end": "1255740"
  },
  {
    "text": "relational databases are just your",
    "start": "1255740",
    "end": "1257540"
  },
  {
    "text": "business logic that reside within the",
    "start": "1257540",
    "end": "1259730"
  },
  {
    "text": "database now they're typically executed",
    "start": "1259730",
    "end": "1262520"
  },
  {
    "text": "and response to insert updates or",
    "start": "1262520",
    "end": "1264350"
  },
  {
    "text": "deletes or they can be directly invoked",
    "start": "1264350",
    "end": "1266300"
  },
  {
    "text": "from your application code now stored",
    "start": "1266300",
    "end": "1268820"
  },
  {
    "text": "procedures can be computationally",
    "start": "1268820",
    "end": "1270429"
  },
  {
    "text": "intensive and they're also very closely",
    "start": "1270429",
    "end": "1272660"
  },
  {
    "text": "coupled to your database engine so if",
    "start": "1272660",
    "end": "1275000"
  },
  {
    "text": "you're considering changing your",
    "start": "1275000",
    "end": "1276230"
  },
  {
    "text": "database engine it could involve a fair",
    "start": "1276230",
    "end": "1278120"
  },
  {
    "text": "amount of rework to migrate them however",
    "start": "1278120",
    "end": "1281030"
  },
  {
    "text": "with Amazon Arora which is a managed",
    "start": "1281030",
    "end": "1283070"
  },
  {
    "text": "relational database service you can now",
    "start": "1283070",
    "end": "1284990"
  },
  {
    "text": "have lambda as stored procedures this",
    "start": "1284990",
    "end": "1287809"
  },
  {
    "text": "not only reduces the load on your",
    "start": "1287809",
    "end": "1289730"
  },
  {
    "text": "database you now have far more",
    "start": "1289730",
    "end": "1291260"
  },
  {
    "text": "flexibility with what you can do within",
    "start": "1291260",
    "end": "1294050"
  },
  {
    "text": "a stored procedure of course over time",
    "start": "1294050",
    "end": "1296960"
  },
  {
    "text": "as you collect data you would want to",
    "start": "1296960",
    "end": "1298700"
  },
  {
    "text": "analyze the data may be to draw customer",
    "start": "1298700",
    "end": "1300980"
  },
  {
    "text": "insights so I'm not gonna dive much deep",
    "start": "1300980",
    "end": "1303620"
  },
  {
    "text": "into data analytics in general but I'd",
    "start": "1303620",
    "end": "1305600"
  },
  {
    "text": "like to talk about how we can use",
    "start": "1305600",
    "end": "1307460"
  },
  {
    "text": "streaming analytics for our restaurant",
    "start": "1307460",
    "end": "1309620"
  },
  {
    "text": "app so I'm going to switch back to my",
    "start": "1309620",
    "end": "1311900"
  },
  {
    "text": "console again",
    "start": "1311900",
    "end": "1314650"
  },
  {
    "text": "okay so if you see here on my console",
    "start": "1319279",
    "end": "1322139"
  },
  {
    "text": "all the bikes here are slowly moving so",
    "start": "1322139",
    "end": "1326519"
  },
  {
    "text": "I don't actually have drivers on the",
    "start": "1326519",
    "end": "1328200"
  },
  {
    "text": "streets of Singapore right now sending",
    "start": "1328200",
    "end": "1329789"
  },
  {
    "text": "me heartbeats so the way I'm doing this",
    "start": "1329789",
    "end": "1331799"
  },
  {
    "text": "is I have a simple Python script running",
    "start": "1331799",
    "end": "1334259"
  },
  {
    "text": "on my ec2 machine here and it's the",
    "start": "1334259",
    "end": "1337769"
  },
  {
    "text": "script that is simulating the movement",
    "start": "1337769",
    "end": "1339659"
  },
  {
    "text": "of the drivers so what I'm going to do",
    "start": "1339659",
    "end": "1342029"
  },
  {
    "text": "is I am going to kill the script and",
    "start": "1342029",
    "end": "1347269"
  },
  {
    "text": "instead I'm going to go ahead and run a",
    "start": "1347269",
    "end": "1349830"
  },
  {
    "text": "slightly different script and let's go",
    "start": "1349830",
    "end": "1355320"
  },
  {
    "text": "and see what happens to the lambda",
    "start": "1355320",
    "end": "1357269"
  },
  {
    "text": "functions here goes to the drivers here",
    "start": "1357269",
    "end": "1361470"
  },
  {
    "text": "awesome I call that the lambda dance so",
    "start": "1361470",
    "end": "1364769"
  },
  {
    "text": "what really happened there was the",
    "start": "1364769",
    "end": "1367919"
  },
  {
    "text": "script I ran went and updated the",
    "start": "1367919",
    "end": "1370200"
  },
  {
    "text": "coordinates of my drivers in a dynamodb",
    "start": "1370200",
    "end": "1372869"
  },
  {
    "text": "table on which I have streams enabled",
    "start": "1372869",
    "end": "1375389"
  },
  {
    "text": "now what the lambda functions subscribe",
    "start": "1375389",
    "end": "1377940"
  },
  {
    "text": "to the stream does is picks it up and",
    "start": "1377940",
    "end": "1379830"
  },
  {
    "text": "indexes it into an elastic search",
    "start": "1379830",
    "end": "1381659"
  },
  {
    "text": "database well that's great that explains",
    "start": "1381659",
    "end": "1383999"
  },
  {
    "text": "the back end flow of things now for the",
    "start": "1383999",
    "end": "1386220"
  },
  {
    "text": "changes to reflect on my UI there are",
    "start": "1386220",
    "end": "1388470"
  },
  {
    "text": "two ways to go about it one I can",
    "start": "1388470",
    "end": "1390869"
  },
  {
    "text": "continuously pull my back in to pull the",
    "start": "1390869",
    "end": "1393749"
  },
  {
    "text": "changes in but that's really a bit",
    "start": "1393749",
    "end": "1395669"
  },
  {
    "text": "wasteful if you really don't have any",
    "start": "1395669",
    "end": "1397409"
  },
  {
    "text": "changes to pull and the second and",
    "start": "1397409",
    "end": "1399539"
  },
  {
    "text": "probably better way to do that is to",
    "start": "1399539",
    "end": "1401279"
  },
  {
    "text": "have my back-end push the changes out to",
    "start": "1401279",
    "end": "1403710"
  },
  {
    "text": "me as and when they become available so",
    "start": "1403710",
    "end": "1406379"
  },
  {
    "text": "how are we doing that so if I go to my",
    "start": "1406379",
    "end": "1408090"
  },
  {
    "text": "web socket tab here you will see that I",
    "start": "1408090",
    "end": "1410249"
  },
  {
    "text": "have an MQTT WebSocket connection set up",
    "start": "1410249",
    "end": "1412649"
  },
  {
    "text": "here",
    "start": "1412649",
    "end": "1413149"
  },
  {
    "text": "so WebSockets just allow a client and a",
    "start": "1413149",
    "end": "1416580"
  },
  {
    "text": "server to have a two-way communication",
    "start": "1416580",
    "end": "1418220"
  },
  {
    "text": "channel and they're also a great way to",
    "start": "1418220",
    "end": "1421590"
  },
  {
    "text": "have your server push the changes out to",
    "start": "1421590",
    "end": "1423809"
  },
  {
    "text": "the UI so hang on lambda is surveillance",
    "start": "1423809",
    "end": "1427169"
  },
  {
    "text": "so how exactly are we doing this",
    "start": "1427169",
    "end": "1429059"
  },
  {
    "text": "so I'm using the service called AWS app",
    "start": "1429059",
    "end": "1431639"
  },
  {
    "text": "sync in order to do this app sync is",
    "start": "1431639",
    "end": "1434490"
  },
  {
    "text": "just a managed graph QL service and in",
    "start": "1434490",
    "end": "1436559"
  },
  {
    "text": "fact you can see our graph QL endpoint",
    "start": "1436559",
    "end": "1438330"
  },
  {
    "text": "on this tab here oh so graph QL is just",
    "start": "1438330",
    "end": "1441509"
  },
  {
    "text": "a data query API it allow clients to",
    "start": "1441509",
    "end": "1443909"
  },
  {
    "text": "specify queries in graph QL syntax that",
    "start": "1443909",
    "end": "1446820"
  },
  {
    "text": "needs to be run against back-end data",
    "start": "1446820",
    "end": "1448740"
  },
  {
    "text": "stores",
    "start": "1448740",
    "end": "1449710"
  },
  {
    "text": "typically used as an alternative to rest",
    "start": "1449710",
    "end": "1452070"
  },
  {
    "text": "so today I'm not going to talk too much",
    "start": "1452070",
    "end": "1454480"
  },
  {
    "text": "about AWS absolute but for those of you",
    "start": "1454480",
    "end": "1456820"
  },
  {
    "text": "who are interested I'll be happy to",
    "start": "1456820",
    "end": "1458200"
  },
  {
    "text": "answer questions later after this call",
    "start": "1458200",
    "end": "1460830"
  },
  {
    "text": "so one of the practical applications of",
    "start": "1460830",
    "end": "1463899"
  },
  {
    "text": "real-time streaming for a restaurant app",
    "start": "1463899",
    "end": "1465940"
  },
  {
    "text": "would be dynamically updating the routes",
    "start": "1465940",
    "end": "1468610"
  },
  {
    "text": "of the drivers you know based on your",
    "start": "1468610",
    "end": "1470799"
  },
  {
    "text": "knowledge of their current position and",
    "start": "1470799",
    "end": "1472480"
  },
  {
    "text": "maybe local traffic conditions if you",
    "start": "1472480",
    "end": "1474460"
  },
  {
    "text": "see that a particular road is blocked",
    "start": "1474460",
    "end": "1475960"
  },
  {
    "text": "you can notify the driver so that they",
    "start": "1475960",
    "end": "1478000"
  },
  {
    "text": "reach their destination on time and to",
    "start": "1478000",
    "end": "1481570"
  },
  {
    "text": "complete our analytics story or what",
    "start": "1481570",
    "end": "1483789"
  },
  {
    "text": "time as you collect data about your user",
    "start": "1483789",
    "end": "1486490"
  },
  {
    "text": "and about restaurants you may want to",
    "start": "1486490",
    "end": "1488470"
  },
  {
    "text": "look at predictive analytics we're given",
    "start": "1488470",
    "end": "1490960"
  },
  {
    "text": "a user profile and given a restaurant",
    "start": "1490960",
    "end": "1492940"
  },
  {
    "text": "profile you may want to train an machine",
    "start": "1492940",
    "end": "1494740"
  },
  {
    "text": "learning algorithm that sort of tells",
    "start": "1494740",
    "end": "1496510"
  },
  {
    "text": "you whether the user is likely to enjoy",
    "start": "1496510",
    "end": "1499360"
  },
  {
    "text": "the particular restaurant or not so in",
    "start": "1499360",
    "end": "1501640"
  },
  {
    "text": "this case I've just trained a simple",
    "start": "1501640",
    "end": "1503230"
  },
  {
    "text": "model using using Amazon machine",
    "start": "1503230",
    "end": "1505029"
  },
  {
    "text": "learning in order to do that that's",
    "start": "1505029",
    "end": "1508179"
  },
  {
    "text": "great I'm gonna switch back to my slides",
    "start": "1508179",
    "end": "1509860"
  },
  {
    "text": "now break so all this while we've been",
    "start": "1509860",
    "end": "1515289"
  },
  {
    "text": "looking at lambda mostly from a back-end",
    "start": "1515289",
    "end": "1517840"
  },
  {
    "text": "context you know but what if you want to",
    "start": "1517840",
    "end": "1520210"
  },
  {
    "text": "run this processing closer to your end",
    "start": "1520210",
    "end": "1521950"
  },
  {
    "text": "users so you can do that with lambda at",
    "start": "1521950",
    "end": "1524470"
  },
  {
    "text": "the edge because lambda integrates with",
    "start": "1524470",
    "end": "1526299"
  },
  {
    "text": "CloudFront there are really useful",
    "start": "1526299",
    "end": "1528870"
  },
  {
    "text": "applications for lambda at the edge for",
    "start": "1528870",
    "end": "1531159"
  },
  {
    "text": "example you can improve the cache",
    "start": "1531159",
    "end": "1532690"
  },
  {
    "text": "ability of your content by dynamically",
    "start": "1532690",
    "end": "1534789"
  },
  {
    "text": "updating cache headers you can rewrite",
    "start": "1534789",
    "end": "1537070"
  },
  {
    "text": "URLs you can dynamically generate",
    "start": "1537070",
    "end": "1539140"
  },
  {
    "text": "content but I'd like to specifically",
    "start": "1539140",
    "end": "1541000"
  },
  {
    "text": "call out how one of our startup is Swiss",
    "start": "1541000",
    "end": "1543429"
  },
  {
    "text": "deck secure are using this today so they",
    "start": "1543429",
    "end": "1546159"
  },
  {
    "text": "use lambda at the edge in combination",
    "start": "1546159",
    "end": "1548049"
  },
  {
    "text": "with their custom algorithms to",
    "start": "1548049",
    "end": "1550360"
  },
  {
    "text": "dynamically optimize web assets that are",
    "start": "1550360",
    "end": "1553210"
  },
  {
    "text": "served out of cloud front distributions",
    "start": "1553210",
    "end": "1555130"
  },
  {
    "text": "which i think is really cool so I'm",
    "start": "1555130",
    "end": "1558610"
  },
  {
    "text": "going to switch gears here and focus on",
    "start": "1558610",
    "end": "1560620"
  },
  {
    "text": "the last category of service",
    "start": "1560620",
    "end": "1562210"
  },
  {
    "text": "applications which was around IT",
    "start": "1562210",
    "end": "1563710"
  },
  {
    "text": "automation AWS config is the service",
    "start": "1563710",
    "end": "1568419"
  },
  {
    "text": "that keeps track of all the changes to",
    "start": "1568419",
    "end": "1570669"
  },
  {
    "text": "your AWS infrastructure and then you can",
    "start": "1570669",
    "end": "1573909"
  },
  {
    "text": "configure it to publish a notification",
    "start": "1573909",
    "end": "1575679"
  },
  {
    "text": "out to an SNS topic so in my case I've",
    "start": "1575679",
    "end": "1578470"
  },
  {
    "text": "configured conflict to watch out for all",
    "start": "1578470",
    "end": "1580360"
  },
  {
    "text": "publicly accessible s3 buckets in Maya",
    "start": "1580360",
    "end": "1583500"
  },
  {
    "text": "count and everytime it sports one it'll",
    "start": "1583500",
    "end": "1585840"
  },
  {
    "text": "send out a notification to an essence",
    "start": "1585840",
    "end": "1587790"
  },
  {
    "text": "topic and and then I have a lambda",
    "start": "1587790",
    "end": "1589410"
  },
  {
    "text": "function that has two things one it",
    "start": "1589410",
    "end": "1591780"
  },
  {
    "text": "notifies me on a slack channel and",
    "start": "1591780",
    "end": "1593700"
  },
  {
    "text": "second it will undo the public read",
    "start": "1593700",
    "end": "1596070"
  },
  {
    "text": "policy and a quick note I'd like to add",
    "start": "1596070",
    "end": "1598860"
  },
  {
    "text": "is just end of last week we announced",
    "start": "1598860",
    "end": "1600990"
  },
  {
    "text": "that a WS convict can now publish these",
    "start": "1600990",
    "end": "1603390"
  },
  {
    "text": "notifications to cloud watch events so",
    "start": "1603390",
    "end": "1605550"
  },
  {
    "text": "you no longer need that SNS topic and",
    "start": "1605550",
    "end": "1607590"
  },
  {
    "text": "you can just have lambda con configure",
    "start": "1607590",
    "end": "1609540"
  },
  {
    "text": "to listen to the cloud watch events so",
    "start": "1609540",
    "end": "1611610"
  },
  {
    "text": "I'm going to quickly switch to my",
    "start": "1611610",
    "end": "1612900"
  },
  {
    "text": "console here again and let's take a look",
    "start": "1612900",
    "end": "1615300"
  },
  {
    "text": "at what happened to the bucket I marked",
    "start": "1615300",
    "end": "1617160"
  },
  {
    "text": "publicly accessible so this is the s3",
    "start": "1617160",
    "end": "1623040"
  },
  {
    "text": "bucket which I'm going to reload again",
    "start": "1623040",
    "end": "1626310"
  },
  {
    "text": "and you can see here I get the access",
    "start": "1626310",
    "end": "1628680"
  },
  {
    "text": "denied exception what I also want to",
    "start": "1628680",
    "end": "1631020"
  },
  {
    "text": "show is I want to go to my slack channel",
    "start": "1631020",
    "end": "1633090"
  },
  {
    "text": "here so right now you should see a",
    "start": "1633090",
    "end": "1636810"
  },
  {
    "text": "message here in red which basically says",
    "start": "1636810",
    "end": "1639090"
  },
  {
    "text": "the s3 bucket policies allows public",
    "start": "1639090",
    "end": "1641430"
  },
  {
    "text": "read access for this specific bucket",
    "start": "1641430",
    "end": "1643760"
  },
  {
    "text": "once lambda reverts the change I should",
    "start": "1643760",
    "end": "1646620"
  },
  {
    "text": "see a green message here letting me know",
    "start": "1646620",
    "end": "1648660"
  },
  {
    "text": "that everything is cool which hopefully",
    "start": "1648660",
    "end": "1651270"
  },
  {
    "text": "should be coming in any second now great",
    "start": "1651270",
    "end": "1654060"
  },
  {
    "text": "so there you go",
    "start": "1654060",
    "end": "1656040"
  },
  {
    "text": "so once lambda has reverted it conflict",
    "start": "1656040",
    "end": "1658110"
  },
  {
    "text": "triggers another notification and then I",
    "start": "1658110",
    "end": "1660060"
  },
  {
    "text": "get a message on my slide saying all",
    "start": "1660060",
    "end": "1662010"
  },
  {
    "text": "good now this resource was non-compliant",
    "start": "1662010",
    "end": "1663780"
  },
  {
    "text": "earlier it is now complying great so I'm",
    "start": "1663780",
    "end": "1667350"
  },
  {
    "text": "going to switch back to my slides again",
    "start": "1667350",
    "end": "1670910"
  },
  {
    "text": "so what else you can think of Cloud",
    "start": "1673250",
    "end": "1676170"
  },
  {
    "text": "trail as a sibling to config so Cloud",
    "start": "1676170",
    "end": "1679020"
  },
  {
    "text": "trail keeps track of all the API calls",
    "start": "1679020",
    "end": "1681570"
  },
  {
    "text": "made against your AWS account and it",
    "start": "1681570",
    "end": "1684120"
  },
  {
    "text": "delivers a periodic report to an s3",
    "start": "1684120",
    "end": "1685980"
  },
  {
    "text": "bucket you can then have lamda process",
    "start": "1685980",
    "end": "1688620"
  },
  {
    "text": "this report and either detect compliance",
    "start": "1688620",
    "end": "1691170"
  },
  {
    "text": "violations or it could optionally maybe",
    "start": "1691170",
    "end": "1693540"
  },
  {
    "text": "log this data elsewhere into a data",
    "start": "1693540",
    "end": "1695310"
  },
  {
    "text": "warehouse for maybe auditing purposes so",
    "start": "1695310",
    "end": "1699660"
  },
  {
    "text": "are there more architecture patterns yes",
    "start": "1699660",
    "end": "1701550"
  },
  {
    "text": "there are a lot more architecture",
    "start": "1701550",
    "end": "1702930"
  },
  {
    "text": "patterns we did not have time to cover",
    "start": "1702930",
    "end": "1704910"
  },
  {
    "text": "today for example cloud formation is a",
    "start": "1704910",
    "end": "1707910"
  },
  {
    "text": "service that allows you to automate the",
    "start": "1707910",
    "end": "1709680"
  },
  {
    "text": "creation of your AWS infrastructure you",
    "start": "1709680",
    "end": "1712470"
  },
  {
    "text": "can use lambda as a custom resource and",
    "start": "1712470",
    "end": "1714720"
  },
  {
    "text": "cloud formation templates which means",
    "start": "1714720",
    "end": "1716400"
  },
  {
    "text": "which allows you",
    "start": "1716400",
    "end": "1717120"
  },
  {
    "text": "to make your cloud formation templates",
    "start": "1717120",
    "end": "1718860"
  },
  {
    "text": "dynamic you can use lambda as a managed",
    "start": "1718860",
    "end": "1721830"
  },
  {
    "text": "cron and trigger it at periodic",
    "start": "1721830",
    "end": "1723540"
  },
  {
    "text": "intervals maybe to turn your dev and",
    "start": "1723540",
    "end": "1726000"
  },
  {
    "text": "test environments on and off at",
    "start": "1726000",
    "end": "1727590"
  },
  {
    "text": "scheduled times you can use lambda to",
    "start": "1727590",
    "end": "1729780"
  },
  {
    "text": "analyze cloud watch logs lambda also",
    "start": "1729780",
    "end": "1732870"
  },
  {
    "text": "integrates very nicely with our code",
    "start": "1732870",
    "end": "1735120"
  },
  {
    "text": "services and then you can use lambda",
    "start": "1735120",
    "end": "1737640"
  },
  {
    "text": "within your CI CD pipeline to stub to",
    "start": "1737640",
    "end": "1740520"
  },
  {
    "text": "stub interfaces or maybe you could even",
    "start": "1740520",
    "end": "1742530"
  },
  {
    "text": "run unit tests on it as an aside for",
    "start": "1742530",
    "end": "1745050"
  },
  {
    "text": "those of you are interested in",
    "start": "1745050",
    "end": "1746400"
  },
  {
    "text": "understanding about CI CD for",
    "start": "1746400",
    "end": "1748170"
  },
  {
    "text": "surveillance functions I'd recommend you",
    "start": "1748170",
    "end": "1750150"
  },
  {
    "text": "hang around for github stalk after mine",
    "start": "1750150",
    "end": "1752010"
  },
  {
    "text": "where they'll be covering this and",
    "start": "1752010",
    "end": "1753740"
  },
  {
    "text": "finally lambda can be used with chat",
    "start": "1753740",
    "end": "1756150"
  },
  {
    "text": "BOTS and also IOT again for all you IOT",
    "start": "1756150",
    "end": "1759059"
  },
  {
    "text": "fans in the audience my colleague Tim",
    "start": "1759059",
    "end": "1761160"
  },
  {
    "text": "will be delivering a talk later this",
    "start": "1761160",
    "end": "1762750"
  },
  {
    "text": "evening he has some really cool demos",
    "start": "1762750",
    "end": "1764550"
  },
  {
    "text": "lined up so watch out for that so to",
    "start": "1764550",
    "end": "1768270"
  },
  {
    "text": "conclude really you can think of lambda",
    "start": "1768270",
    "end": "1770370"
  },
  {
    "text": "as a Swiss Army knife there are many",
    "start": "1770370",
    "end": "1772770"
  },
  {
    "text": "different use cases and applications for",
    "start": "1772770",
    "end": "1774960"
  },
  {
    "text": "it and you know of all the architectures",
    "start": "1774960",
    "end": "1777809"
  },
  {
    "text": "we discussed today don't look at them in",
    "start": "1777809",
    "end": "1779700"
  },
  {
    "text": "isolation you can sort of like we saw",
    "start": "1779700",
    "end": "1782010"
  },
  {
    "text": "for the restaurant application we can",
    "start": "1782010",
    "end": "1783660"
  },
  {
    "text": "combine many different architecture",
    "start": "1783660",
    "end": "1785370"
  },
  {
    "text": "patterns and really build out",
    "start": "1785370",
    "end": "1786990"
  },
  {
    "text": "sophisticated architectures so in that",
    "start": "1786990",
    "end": "1789480"
  },
  {
    "text": "note I'd like to thank you for your time",
    "start": "1789480",
    "end": "1791160"
  },
  {
    "text": "don't forget to take the survey Thanks",
    "start": "1791160",
    "end": "1795650"
  }
]