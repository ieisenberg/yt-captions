[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "good morning everybody and thank you for coming uh to reinvent first of all and",
    "start": "2280",
    "end": "8080"
  },
  {
    "text": "to this uh talk about uh the Amazon EC container service if if anyone had has been uh",
    "start": "8080",
    "end": "14960"
  },
  {
    "text": "having the kind of show I've had I'm surprised anyone has their voice left I'm still trying to figure that one out",
    "start": "14960",
    "end": "21600"
  },
  {
    "text": "um what the goal of this talk so my name is Deepak I run the E to container service team and what I'll try and do",
    "start": "21600",
    "end": "28119"
  },
  {
    "text": "today is talk to you a little bit about why we built ECS some of the design",
    "start": "28119",
    "end": "33239"
  },
  {
    "text": "decisions we took and sort of the kinds of applications our customers are writing uh that drove those",
    "start": "33239",
    "end": "40280"
  },
  {
    "text": "decisions and I'll try and leave about 5 minutes at the end so uh this room is too big for General Q&A but there's",
    "start": "40280",
    "end": "47160"
  },
  {
    "text": "members from the ECS team here uh please come forward and we can if you have any questions we'd be happy to answer",
    "start": "47160",
    "end": "53359"
  },
  {
    "text": "them so for about 30 years 40 years the core primitive of computing has been a",
    "start": "53359",
    "end": "59320"
  },
  {
    "start": "54000",
    "end": "143000"
  },
  {
    "text": "server uh this could be a physical server a virtual machine but the general idea is that you have a set of CPUs",
    "start": "59320",
    "end": "66600"
  },
  {
    "text": "memory a full operating system uh you log into a server to debug it you",
    "start": "66600",
    "end": "71920"
  },
  {
    "text": "interact with it in a generally interactive way and that's been the case for a very long long time uh if your",
    "start": "71920",
    "end": "77680"
  },
  {
    "text": "applications got bigger you went and got a bigger server and if your application",
    "start": "77680",
    "end": "82799"
  },
  {
    "text": "got even bigger you got an even bigger server but at some point of time uh that starts to break down I usually have",
    "start": "82799",
    "end": "89920"
  },
  {
    "text": "happens when uh the amount of memory or you need on that machine you can't buy one more than that uh even though today",
    "start": "89920",
    "end": "97040"
  },
  {
    "text": "you heard W's announcement about the X1 instance with 2 terab of memory uh back",
    "start": "97040",
    "end": "102320"
  },
  {
    "text": "when I actually did a lot of computing that's tough to find something that big or the the parts got prohibitively",
    "start": "102320",
    "end": "108240"
  },
  {
    "text": "expensive because they were Boutique parts so what a lot of folks started doing um and I come from the HPC world",
    "start": "108240",
    "end": "114719"
  },
  {
    "text": "where we started building these bearwolf clusters uh for years we had used this big large shared memory machines",
    "start": "114719",
    "end": "120680"
  },
  {
    "text": "uh which were getting more and more expensive and difficult to manage so what people started doing was getting commodity machines standard servers",
    "start": "120680",
    "end": "127280"
  },
  {
    "text": "connecting them together and trying to present them as a single single single machine and the kinds of applications",
    "start": "127280",
    "end": "134280"
  },
  {
    "text": "that people wrote on these machines uh were more distributed so they scaled by adding more hosts uh to the system as",
    "start": "134280",
    "end": "140800"
  },
  {
    "text": "opposed to going and buying the next biggest system you could buy so into this world just over 9 years ago uh came",
    "start": "140800",
    "end": "147640"
  },
  {
    "start": "143000",
    "end": "264000"
  },
  {
    "text": "Amazon ec2 uh I remember insanely excited at the time uh probably sitting",
    "start": "147640",
    "end": "152680"
  },
  {
    "text": "on a couch somewhere did not work at Amazon uh and the ac2 announcement comes out and the reason I was insanely",
    "start": "152680",
    "end": "159959"
  },
  {
    "text": "excited was this the server that I you know the kinds of servers that we use every day",
    "start": "159959",
    "end": "166239"
  },
  {
    "text": "at work the kind of cluster that had run in the sat in the computer room next to me was all accessible via simple API I",
    "start": "166239",
    "end": "173319"
  },
  {
    "text": "could do any easy to run instances call and I could get an instance and by the way if I really wanted lots of machines",
    "start": "173319",
    "end": "179440"
  },
  {
    "text": "the same run instances call could give me a lot of machines as the cloud evolved and as we",
    "start": "179440",
    "end": "185280"
  },
  {
    "text": "added more capabilities you could start putting things inside Autos scaling groups uh where the scaling events would",
    "start": "185280",
    "end": "190959"
  },
  {
    "text": "happen more automatically and I didn't have to go in and type a command every time and this par so horizontal scaling",
    "start": "190959",
    "end": "197200"
  },
  {
    "text": "wasn't something that E2 introduced but it made it ridiculously easy and over the last several years it's become the",
    "start": "197200",
    "end": "203159"
  },
  {
    "text": "dominant model the way people run the compute it wasn't always the case and in many case sometimes it still isn't but",
    "start": "203159",
    "end": "209360"
  },
  {
    "text": "by and that's what we see our customers doing in this world your applications",
    "start": "209360",
    "end": "215680"
  },
  {
    "text": "were still relatively monolithic uh by what I mean by monolithic application is that all your components are usually in",
    "start": "215680",
    "end": "222439"
  },
  {
    "text": "one war file or a single rails file tree and the way you used to scale them uh",
    "start": "222439",
    "end": "228000"
  },
  {
    "text": "with many people still scale them is by taking each application and running a",
    "start": "228000",
    "end": "233280"
  },
  {
    "text": "lot of E2 instances where each instance is running one copy of that application uh you can scale this manually or more",
    "start": "233280",
    "end": "240040"
  },
  {
    "text": "commonly the term that we use inside Amazon is reactive aut scaling where you're using some kind of metric uh in",
    "start": "240040",
    "end": "246720"
  },
  {
    "text": "Cloud watch on load or something like that to trigger a scaling action add more servers uh when the load goes down",
    "start": "246720",
    "end": "253200"
  },
  {
    "text": "you reduce it uh just simplifying the situation a little bit but by and large",
    "start": "253200",
    "end": "258320"
  },
  {
    "text": "uh that's what we've seen and that's what a lot of applications still uh function",
    "start": "258320",
    "end": "263880"
  },
  {
    "text": "as but there are challenges with this model and the challenges with this model",
    "start": "263880",
    "end": "269120"
  },
  {
    "text": "are that you have many many components uh sometimes you want to change one component but you can't because you",
    "start": "269120",
    "end": "275240"
  },
  {
    "text": "can't deploy it because it has a dependency on another one or a team is blocked because some other component is",
    "start": "275240",
    "end": "281880"
  },
  {
    "text": "running far behind they haven't completed the work and to update your part of the of the system you have to",
    "start": "281880",
    "end": "287280"
  },
  {
    "text": "wait for that component to get developed and uh deployed as well so what we started seeing and I suspect many of you",
    "start": "287280",
    "end": "293600"
  },
  {
    "text": "here already work in that mode is people started splitting these components up into their own little Serv",
    "start": "293600",
    "end": "300520"
  },
  {
    "text": "hence the microservice word uh and the idea was that you could develop each of these independently uh you could use",
    "start": "300520",
    "end": "306840"
  },
  {
    "text": "whatever language you want you could have a small team uh we call them one and two Pizza teams inside uh inside",
    "start": "306840",
    "end": "312280"
  },
  {
    "text": "Amazon and you you could use whatever way you wanted to develop it deploy it and expose things via apis in such a way",
    "start": "312280",
    "end": "319120"
  },
  {
    "text": "that uh as the new component came up you you could collect it and you could scale them by using uh you could scale them",
    "start": "319120",
    "end": "326280"
  },
  {
    "text": "independently of each other so your order UI could scale on it own set of ec2 instances and your user service for",
    "start": "326280",
    "end": "332440"
  },
  {
    "text": "example which has uh seemingly more scaling requirements would scale on lot",
    "start": "332440",
    "end": "338199"
  },
  {
    "text": "you know would scale more your user service on a different set of instances well and good uh but there are some",
    "start": "338199",
    "end": "344919"
  },
  {
    "start": "342000",
    "end": "507000"
  },
  {
    "text": "challenges with this uh you still taking a component that you've probably decomposed and you're deploying it on",
    "start": "344919",
    "end": "351120"
  },
  {
    "text": "the same kinds of machines that you had earlier so you're still thinking in terms of machines uh instances in our",
    "start": "351120",
    "end": "356800"
  },
  {
    "text": "case so what can we do so into this world came containers uh containers have been around for a very long time uh",
    "start": "356800",
    "end": "365000"
  },
  {
    "text": "they in they've been around in BSD they've been around in Solaris and about a decade in Linux why are containers",
    "start": "365000",
    "end": "372280"
  },
  {
    "text": "interesting well containers give you a way to manage your resources and here your resources are CPU and memory to",
    "start": "372280",
    "end": "379000"
  },
  {
    "text": "pick two and they also allow you to isolate uh components a little bit from",
    "start": "379000",
    "end": "384319"
  },
  {
    "text": "each other so containers are operating system level virtualization they take advantage of uh features like cgroups",
    "start": "384319",
    "end": "390599"
  },
  {
    "text": "and name spaces to basically provide sandboxes for your applications to run and because they're lightweight they",
    "start": "390599",
    "end": "396639"
  },
  {
    "text": "share in OS and kernel they're really really fast cool that's been happening for a",
    "start": "396639",
    "end": "402160"
  },
  {
    "text": "long time but until two little over 2 years ago nobody ever came to us and",
    "start": "402160",
    "end": "407400"
  },
  {
    "text": "asked us to build a Linux kernel container as a service even though they've been around for a long",
    "start": "407400",
    "end": "412680"
  },
  {
    "text": "time and into this world dropped a Docker uh and this was about 2 and a",
    "start": "412680",
    "end": "418879"
  },
  {
    "text": "half years ago uh I think March 2013 uh and what did Docker get right what that made it so popular uh I've heard that",
    "start": "418879",
    "end": "425879"
  },
  {
    "text": "the docker booth at this conference requires some arm wrestling just to get in uh and talk to folks they have a cute",
    "start": "425879",
    "end": "432800"
  },
  {
    "text": "logo that helped uh if you any of you as children make",
    "start": "432800",
    "end": "438319"
  },
  {
    "text": "you know and you show them the little blue whale they'll love it just just Pro tip",
    "start": "438319",
    "end": "444879"
  },
  {
    "text": "um what DACA allowed you to do was take this application and all its dependencies and pack package it it gave",
    "start": "444879",
    "end": "450199"
  },
  {
    "text": "you a declarative model to take whatever app you had what what requirements it had and package them up uh probably",
    "start": "450199",
    "end": "457160"
  },
  {
    "text": "speaking to the choir here but just in case you haven't heard about Docker uh you could ship it you could move it from",
    "start": "457160",
    "end": "463080"
  },
  {
    "text": "one place to another it's kind of remarkable that you can take this package run it on your laptop ship it to a registry somewhere and pull it down",
    "start": "463080",
    "end": "469759"
  },
  {
    "text": "and run it in production and that's the third component it gave you a really lightweight runtime to run the this this",
    "start": "469759",
    "end": "476280"
  },
  {
    "text": "blob and and for the most part keep the blog blob consistent across machines",
    "start": "476280",
    "end": "482479"
  },
  {
    "text": "environments people uh and I think around this",
    "start": "482479",
    "end": "487759"
  },
  {
    "text": "time it matched really well with how people have started thinking about running their applications I talked you",
    "start": "487759",
    "end": "493720"
  },
  {
    "text": "a little bit about microservices earlier uh there's many many examples of companies well before the docker era on",
    "start": "493720",
    "end": "499280"
  },
  {
    "text": "AWS running these very very decomposed applications all you have to do is go attend a Netflix stock and you'll get",
    "start": "499280",
    "end": "504560"
  },
  {
    "text": "some good idea of how people do that um but I think you should take this one step further or at least think about it",
    "start": "504560",
    "end": "510759"
  },
  {
    "start": "507000",
    "end": "597000"
  },
  {
    "text": "slightly differently uh when we building and running these applications what do we need we've been talking about servers",
    "start": "510759",
    "end": "516399"
  },
  {
    "text": "and applications but I think we need a different primitive and here's how to",
    "start": "516399",
    "end": "521440"
  },
  {
    "text": "think about it you have a server an ec2 instance with many processes running on it each of these could be a microservice",
    "start": "521440",
    "end": "527959"
  },
  {
    "text": "or your tiny application but what you really want to think about is not about the server itself but about this little",
    "start": "527959",
    "end": "534600"
  },
  {
    "text": "we'll call it a task or a job uh I like task and uh that's the that's the word",
    "start": "534600",
    "end": "540519"
  },
  {
    "text": "we use in the ECS world and basically what this task does is a task can be made up of one or more containers uh you",
    "start": "540519",
    "end": "547760"
  },
  {
    "text": "can describe it using some kind of declarative syntax and then what you work with for the rest of your",
    "start": "547760",
    "end": "553519"
  },
  {
    "text": "application life cycle is that task uh you can you you want to think about your",
    "start": "553519",
    "end": "558720"
  },
  {
    "text": "app how you work in this world at the level of this core primitive that you can deploy that you can move that you",
    "start": "558720",
    "end": "564079"
  },
  {
    "text": "can move around and suddenly you're not thinking about individual machines anymore what you're thinking about about",
    "start": "564079",
    "end": "569640"
  },
  {
    "text": "is a pool of resources made up of in this case ec2 instances and what you're trying to figure out is into this pool",
    "start": "569640",
    "end": "576680"
  },
  {
    "text": "where can I take my task and drop it in so that it'll run appropriately and since uh we can call it a cluster I'm",
    "start": "576680",
    "end": "585160"
  },
  {
    "text": "I'm an old HPC hack so I'll keep calling things clusters and for the rest of the talk that's what it'll be but well and",
    "start": "585160",
    "end": "591920"
  },
  {
    "text": "good you have a cluster you have tasks that you want to run on this cluster you need to manage it you need to understand",
    "start": "591920",
    "end": "598560"
  },
  {
    "text": "it and you need to take action based on what's Happening and the analogy I like to use is that of an airplane control",
    "start": "598560",
    "end": "606279"
  },
  {
    "text": "tower uh I think of the airplane control tower as the leader uh some people in",
    "start": "606279",
    "end": "611480"
  },
  {
    "text": "the cluster world will call it uh like in in the Hadoop world you call it a master node or something like that um",
    "start": "611480",
    "end": "616880"
  },
  {
    "text": "the leader is someone who has visibility into the system that is responsible for taking actions that is responsible for",
    "start": "616880",
    "end": "622959"
  },
  {
    "text": "figuring out what happens next and how can they do that uh in in the aircraft analogy the control control tar knows",
    "start": "622959",
    "end": "629839"
  },
  {
    "text": "where all the planes are it has through GPS it has a state of the system uh the system could be planes that are about to",
    "start": "629839",
    "end": "635800"
  },
  {
    "text": "crash into each other and hopefully their job is to avoid doing it but based on what's taken off what's flying where",
    "start": "635800",
    "end": "641800"
  },
  {
    "text": "which part of the sky things are in uh using radar and GPS your control tower is making the next decision which Runway",
    "start": "641800",
    "end": "648120"
  },
  {
    "text": "should people land on oh the air the wind change they need to come in from a different direction they're responsible",
    "start": "648120",
    "end": "653360"
  },
  {
    "text": "for scheduling these objects in this case airplanes and in our world task s",
    "start": "653360",
    "end": "660720"
  },
  {
    "text": "are are essentially your planes are your tasks and your control tower is essentially the leader or Master of the",
    "start": "660720",
    "end": "667279"
  },
  {
    "text": "service uh scheduling is nothing new uh HPC schedulers uh there's a great paper",
    "start": "667279",
    "end": "672440"
  },
  {
    "text": "that I encourage that people read uh that describes the kinds of schedulers and the kinds of scheduling systems",
    "start": "672440",
    "end": "677760"
  },
  {
    "text": "people should build um HPC schedulers are monolithic the logic most of them",
    "start": "677760",
    "end": "683920"
  },
  {
    "text": "anyway uh the logic of how the scheduling should be done which is the business logic which defines",
    "start": "683920",
    "end": "689760"
  },
  {
    "text": "hey here's where the next job comes which is more important so put it there first as and the state of the system and",
    "start": "689760",
    "end": "696240"
  },
  {
    "text": "how it manages the state of that cluster are all inside one uh code base uh so",
    "start": "696240",
    "end": "701880"
  },
  {
    "text": "that's how everything is managed because this is one shared system that's used by a bunch of applications but there's a",
    "start": "701880",
    "end": "708200"
  },
  {
    "text": "pretty simple rules around how jobs come in and how they move out more recently",
    "start": "708200",
    "end": "713800"
  },
  {
    "text": "over the last several years you have much more uh sophisticated systems than how cluster state is managed and how",
    "start": "713800",
    "end": "719320"
  },
  {
    "text": "scheduling is done uh they're effectively two level systems what does this mean it means that you have uh a",
    "start": "719320",
    "end": "726079"
  },
  {
    "text": "leader your scheduler the things that's making decisions but the state of the system is somewhat separated uh they're",
    "start": "726079",
    "end": "732160"
  },
  {
    "text": "not one code base so your leader is able to take action based on some good visibility into the system and by the",
    "start": "732160",
    "end": "738320"
  },
  {
    "text": "way you can have multiple schedulers coming in at the same time and trying to compete with each other for resources",
    "start": "738320",
    "end": "744480"
  },
  {
    "text": "and you're trying to make decisions like that there are two approaches uh you can do things pessimistically which means",
    "start": "744480",
    "end": "749920"
  },
  {
    "text": "that one Schuler gets part of the view of the system and while that's happening it's all locked off and the other one is",
    "start": "749920",
    "end": "756560"
  },
  {
    "text": "getting a view of another part of the system and doesn't have a full view of your entire State uh the equivalent",
    "start": "756560",
    "end": "762240"
  },
  {
    "text": "would be a control tower that can see the airspace over Nevada which is where",
    "start": "762240",
    "end": "768360"
  },
  {
    "text": "we are or California or something like that the other option is shared State",
    "start": "768360",
    "end": "774079"
  },
  {
    "text": "systems that use optimistic concurrency here every Schuler has complete view into the full state of the system so you",
    "start": "774079",
    "end": "780279"
  },
  {
    "text": "know exactly what's happening all the schedulers are getting the same information and you're making and you're reconciling conflicts at the level of",
    "start": "780279",
    "end": "786639"
  },
  {
    "text": "the Schuler uh so these are the you know as we as we started uh this process these this was",
    "start": "786639",
    "end": "793720"
  },
  {
    "text": "the technology that was out there uh these were the this is what we knew and that's what we started uh talking to our",
    "start": "793720",
    "end": "799399"
  },
  {
    "text": "customers about and the first thing uh the think it's about two little over two",
    "start": "799399",
    "end": "804480"
  },
  {
    "text": "years ago when we started having people coming to us and asking us for hey can and you build a service around Docker",
    "start": "804480",
    "end": "810800"
  },
  {
    "text": "and the first question we asked ourselves was Docker runs just fine on ec2 Docker run is you know it's it's no",
    "start": "810800",
    "end": "817279"
  },
  {
    "text": "different from running it anywhere else why the interest and I started with probing it became pretty clear what",
    "start": "817279",
    "end": "823199"
  },
  {
    "text": "people were doing was rewriting applications or writing new applications uh these were usually microservices",
    "start": "823199",
    "end": "829760"
  },
  {
    "text": "types of applications or at least more decomposed and they wanted to distribute these applications on a cluster and",
    "start": "829760",
    "end": "835839"
  },
  {
    "text": "wanted a system that managed the life cycle of these applications so essentially took these tasks that they",
    "start": "835839",
    "end": "841000"
  },
  {
    "text": "were running and managed the life cycle uh the other thing that the couple of other things that they wanted number one",
    "start": "841000",
    "end": "847440"
  },
  {
    "text": "they wanted really tight integration in with other AWS Services that's fine uh and expected uh things like I am elb um",
    "start": "847440",
    "end": "856480"
  },
  {
    "text": "uh uh cloud trail for logging and so on uh they also wanted to run multiple",
    "start": "856480",
    "end": "861519"
  },
  {
    "text": "schedulers at a time and be able to make prioritization decisions where job one came from one team that was higher",
    "start": "861519",
    "end": "867040"
  },
  {
    "text": "priority job two came from another team that may be lower priority or a bat job of some kind and job one always won in",
    "start": "867040",
    "end": "873160"
  },
  {
    "text": "those kind of situations so it became pretty clear to us that we wanted to build and needed to build a shade State",
    "start": "873160",
    "end": "878560"
  },
  {
    "text": "optimistic concurrency system and that's exactly what we did uh this is a high",
    "start": "878560",
    "end": "884560"
  },
  {
    "text": "level block diagram of ECS uh various components and I'll try and",
    "start": "884560",
    "end": "890279"
  },
  {
    "text": "over the next few minutes uh go over some of these components uh what they do",
    "start": "890279",
    "end": "896079"
  },
  {
    "text": "and uh kind of why how the system works works and why we made some of the decision and kind of how how you can use",
    "start": "896079",
    "end": "902759"
  },
  {
    "text": "it and how you can think about using",
    "start": "902759",
    "end": "906079"
  },
  {
    "start": "908000",
    "end": "958000"
  },
  {
    "text": "ECS the first thing you do when you use ECS is launch a cluster and the way you launch a cluster is just an object it",
    "start": "908160",
    "end": "914800"
  },
  {
    "text": "can be empty it's just a name into this cluster you launch one or more Amazon",
    "start": "914800",
    "end": "920399"
  },
  {
    "text": "ec2 instances we call them container instances and the only difference only requirement for a container instance is",
    "start": "920399",
    "end": "926839"
  },
  {
    "text": "one it should be running a modern version of Linux on which you can run Docker and it needs to be running the",
    "start": "926839",
    "end": "932319"
  },
  {
    "text": "Amazon ECS agent you can launch these instances in one availability zones multiple of two",
    "start": "932319",
    "end": "938800"
  },
  {
    "text": "or three uh clusters in ECS are Regional they're also heterogenous you don't have to launch one instance type you can",
    "start": "938800",
    "end": "945399"
  },
  {
    "text": "launch a mix of instances based on your requirements uh autoscaling does require",
    "start": "945399",
    "end": "950600"
  },
  {
    "text": "you to put instances in homogeneous mixes so you can have multiple Auto scaling groups in a cluster for",
    "start": "950600",
    "end": "956399"
  },
  {
    "text": "example um the Amazon ec2 ECS agent is what basically uh as you can if you can",
    "start": "956399",
    "end": "964000"
  },
  {
    "start": "958000",
    "end": "1016000"
  },
  {
    "text": "read the GitHub uh page here it's basically what takes and sends commands from ECS to Docker and does",
    "start": "964000",
    "end": "970639"
  },
  {
    "text": "authentication tells the ECS service that this container instance is now part of this cluster it's registered in the",
    "start": "970639",
    "end": "977160"
  },
  {
    "text": "service and you can start doing work with it uh the the agent is open source uh it's uh it's written in go it's on",
    "start": "977160",
    "end": "983839"
  },
  {
    "text": "GitHub and we love getting pull requests so if you use ECS and you have some features that you wish the agent had let",
    "start": "983839",
    "end": "990680"
  },
  {
    "text": "us know uh we happy we happy to uh take a look at it and see if we can add it in",
    "start": "990680",
    "end": "995800"
  },
  {
    "text": "uh the agent itself at least with the Amazon ECS optimized uh Linux Amazon",
    "start": "995800",
    "end": "1001240"
  },
  {
    "text": "Linux Army runs itself runs inside a Docker container uh so that's how we tend to run it but you can put it into",
    "start": "1001240",
    "end": "1007079"
  },
  {
    "text": "an RPM make it part of uh the system uh we give you an init uh there's also a sister init uh component that you can",
    "start": "1007079",
    "end": "1014279"
  },
  {
    "text": "get also open source and once all of this is done then the e service takes",
    "start": "1014279",
    "end": "1019519"
  },
  {
    "start": "1016000",
    "end": "1097000"
  },
  {
    "text": "over and uh the ECS service itself consists of roughly four components uh there's an agent Communication Service",
    "start": "1019519",
    "end": "1026160"
  },
  {
    "text": "this is what's responsible for communicating with the agent and does the uh does the does the two-way communication you also have uh the apis",
    "start": "1026160",
    "end": "1034240"
  },
  {
    "text": "I'll get to those in a in a minute but the heart and core of ECS is your cluster management engine uh which is",
    "start": "1034240",
    "end": "1040640"
  },
  {
    "text": "responsible for for managing the cluster for maintaining its life cycle that's built on top of the of a key value store",
    "start": "1040640",
    "end": "1047079"
  },
  {
    "text": "which is the heart of the ECS system um so the key value store that ECS has built on uh is uh core distributed",
    "start": "1047079",
    "end": "1053840"
  },
  {
    "text": "systems primitive that we've built at AWS over the years uh it's used at many many places inside Amazon but what it is",
    "start": "1053840",
    "end": "1061000"
  },
  {
    "text": "is essentially a highly available and highly scalable uh pack Source based",
    "start": "1061000",
    "end": "1066080"
  },
  {
    "text": "transaction Journal so you maintain a you get a it has a history of State transitions that it captures over time",
    "start": "1066080",
    "end": "1071880"
  },
  {
    "text": "and uh these transitions are offered and accepted using optimistic concurrency so",
    "start": "1071880",
    "end": "1077120"
  },
  {
    "text": "it's an OC system and and uh and these accepted offers are then replicated along this and then uh you can make all",
    "start": "1077120",
    "end": "1084320"
  },
  {
    "text": "kinds of decisions because you know that this is consistent you know what when you ask the journal for a a piece in the",
    "start": "1084320",
    "end": "1091400"
  },
  {
    "text": "transition history you'll know exactly which transition you're looking at and then you can make decisions based on it",
    "start": "1091400",
    "end": "1097320"
  },
  {
    "start": "1097000",
    "end": "1168000"
  },
  {
    "text": "so on top of all this system sit the ECS apis uh these apis and the ones you",
    "start": "1097320",
    "end": "1102679"
  },
  {
    "text": "should care about right now are these uh we call these are read apis you can list and describe uh the Three core",
    "start": "1102679",
    "end": "1109640"
  },
  {
    "text": "components that make up the ECS system clusters everything in ECS happens in the context of a cluster uh so once uh",
    "start": "1109640",
    "end": "1117360"
  },
  {
    "text": "by default everyone gets a default cluster but you can give it another name but once you have a cluster running any",
    "start": "1117360",
    "end": "1122559"
  },
  {
    "text": "future command happens in the context of that cluster and you have to and you have to specify it unless it's default",
    "start": "1122559",
    "end": "1129440"
  },
  {
    "text": "uh you're and you can describe and list and describe clusters you can list and describe container instances these are",
    "start": "1129440",
    "end": "1135640"
  },
  {
    "text": "the hosts on which your containers are going to run and you can l and describe the actual tasks",
    "start": "1135640",
    "end": "1141760"
  },
  {
    "text": "themselves with this these apis together give you the state of the system which is why we call them our read apis and",
    "start": "1141760",
    "end": "1147679"
  },
  {
    "text": "once you know the state of the system then you can decide what to do with your next task and that's where the stop uh",
    "start": "1147679",
    "end": "1153120"
  },
  {
    "text": "start and stop task API has come in uh the start Task API basically says take",
    "start": "1153120",
    "end": "1158360"
  },
  {
    "text": "this task and run it on this container instance and you make that decision based on uh you know which container",
    "start": "1158360",
    "end": "1165080"
  },
  {
    "text": "instance may be the most the one you want to run this task on and and this has allowed us to build a a really nice",
    "start": "1165080",
    "end": "1171320"
  },
  {
    "start": "1168000",
    "end": "1252000"
  },
  {
    "text": "really scalable system and if you if as we talk to our customers it is this backend scalability and robustness is",
    "start": "1171320",
    "end": "1177440"
  },
  {
    "text": "what they like about us about ECS as much as anything else so let me share some more specific",
    "start": "1177440",
    "end": "1184120"
  },
  {
    "text": "data in this chart you seeing uh two clusters one is 100 nodes so 100",
    "start": "1184120",
    "end": "1190640"
  },
  {
    "text": "container instances the other one is a th000 nodes or 1,00 container instances the numbers you are seeing in the uh in",
    "start": "1190640",
    "end": "1197240"
  },
  {
    "text": "the rows are your um so the rows are the 50th 90 50th 90th",
    "start": "1197240",
    "end": "1202919"
  },
  {
    "text": "and 99th percentile latencies end to end so when you have a client you submit a",
    "start": "1202919",
    "end": "1208720"
  },
  {
    "text": "request uh it it takes the task launches it somewhere the docker demon starts the",
    "start": "1208720",
    "end": "1215080"
  },
  {
    "text": "task all the all the containers and you send an act back to the client and the client says okay now I can start you",
    "start": "1215080",
    "end": "1221480"
  },
  {
    "text": "know now it's running this end to end latency and the columns are how well utilized your cluster is 10% 25% 50% 90%",
    "start": "1221480",
    "end": "1230039"
  },
  {
    "text": "uh 90% is like a pathological case because most people will autoscale before they hit that and as you can see",
    "start": "1230039",
    "end": "1236360"
  },
  {
    "text": "almost independent of cluster cluster size and cluster utilization your end to end latencies uh so this is client and",
    "start": "1236360",
    "end": "1243280"
  },
  {
    "text": "server are one and a half seconds at the 50th percentile and less than 2 seconds at at the 99th percentile so these are",
    "start": "1243280",
    "end": "1250360"
  },
  {
    "text": "your outliers so that's well and great what if you could go bigger this is a 3-day uh load EXP",
    "start": "1250360",
    "end": "1258600"
  },
  {
    "text": "experiment that we ran you're starting with something like less than a th000 instances and going to over 8,000",
    "start": "1258600",
    "end": "1265799"
  },
  {
    "text": "instances that big purple squiggly line that you see is the same time frame so you're starting off with a smaller",
    "start": "1265799",
    "end": "1271120"
  },
  {
    "text": "number of instances and going much larger uh that count is the count on the y- axis on the right which is the",
    "start": "1271120",
    "end": "1276760"
  },
  {
    "text": "request rate in 5 minute intervals and what you see is that your API response latencies at the 50th percentile and the",
    "start": "1276760",
    "end": "1283440"
  },
  {
    "text": "99th percentile a stay low less than 100 milliseconds for 99th and I think about",
    "start": "1283440",
    "end": "1288720"
  },
  {
    "text": "5 milliseconds or so for the 50th and they're essentially independent of cluster size and they stay flat and they",
    "start": "1288720",
    "end": "1293960"
  },
  {
    "text": "barely they barely move so the most of the effort that we spent especially in",
    "start": "1293960",
    "end": "1299679"
  },
  {
    "start": "1297000",
    "end": "1349000"
  },
  {
    "text": "the early days of ECS was building out this very robust system that you could pretty much throw anything at and it",
    "start": "1299679",
    "end": "1305440"
  },
  {
    "text": "would be able to take very large clusters multiple zones by default and you don't have to think about how you",
    "start": "1305440",
    "end": "1310919"
  },
  {
    "text": "scale uh your state management system or your cluster management system as your system grows it's the same API calls",
    "start": "1310919",
    "end": "1316480"
  },
  {
    "text": "where they're running one node or 8,000 where they're running one task or 880,000 I think that's some around what",
    "start": "1316480",
    "end": "1323120"
  },
  {
    "text": "we were running there some or things like that they can throw a lot of load at it so far we've talked about taking",
    "start": "1323120",
    "end": "1331039"
  },
  {
    "text": "an individual task and manually well using the API running it on a particular",
    "start": "1331039",
    "end": "1336120"
  },
  {
    "text": "instance um but earlier we were talking all about scheduling and when you're running 8,000",
    "start": "1336120",
    "end": "1342320"
  },
  {
    "text": "nodes and many many thousand tasks you don't want to actually uh act you know do it by hand all the time and try and",
    "start": "1342320",
    "end": "1348520"
  },
  {
    "text": "and figure it out and the way we built the system was the scheduling layer for ECS actually lives sits on top of the",
    "start": "1348520",
    "end": "1355080"
  },
  {
    "start": "1349000",
    "end": "1433000"
  },
  {
    "text": "ECS apis and here's an example of where you can write your own Schuler uh this",
    "start": "1355080",
    "end": "1360200"
  },
  {
    "text": "is a blog post that we published uh maybe a couple of weeks ago that is gives you a simple example of what is",
    "start": "1360200",
    "end": "1366039"
  },
  {
    "text": "called least task Schuler it takes a look at the system it measures the state uh using a list and describe apis and",
    "start": "1366039",
    "end": "1372840"
  },
  {
    "text": "then based on that finds the instance that's running the least number of tasks and launches the next task on it it's",
    "start": "1372840",
    "end": "1379080"
  },
  {
    "text": "very simple uh it also links to a little go Library uh that you can use that maintains sort of local state and helps",
    "start": "1379080",
    "end": "1385320"
  },
  {
    "text": "you uh write good uh you know write a schedule yourself and you can write any",
    "start": "1385320",
    "end": "1391080"
  },
  {
    "text": "kind of logic we have a number of customers including some who have spoken uh at reinvent who've written their own",
    "start": "1391080",
    "end": "1396320"
  },
  {
    "text": "schedulers based on their specific requirements the other fun part about this is let's say you've been using some",
    "start": "1396320",
    "end": "1402760"
  },
  {
    "text": "other schul and you've been using some other kind of system uh you can in theory write a little piece of code a",
    "start": "1402760",
    "end": "1408799"
  },
  {
    "text": "little shim that converts the state response that that Schuler is expecting and take the ECS State and convert it",
    "start": "1408799",
    "end": "1414840"
  },
  {
    "text": "into that so let's say you're using aular for a system like like MOS so we've done an just an experiment where",
    "start": "1414840",
    "end": "1421000"
  },
  {
    "text": "we wrote a schedular driver that you can use marathon on top of ECS and Marathon think just runs uh because they're",
    "start": "1421000",
    "end": "1427360"
  },
  {
    "text": "converting the ECS State response into a Mesa offer here's a that's a good examp that's one example of how you can use it",
    "start": "1427360",
    "end": "1434200"
  },
  {
    "start": "1433000",
    "end": "1475000"
  },
  {
    "text": "but most people actually don't want to spend time writing their own schedulers and and they don't want have to write",
    "start": "1434200",
    "end": "1439320"
  },
  {
    "text": "shims they just want to write what they just want us to provide a schedul for them and for long running applications",
    "start": "1439320",
    "end": "1446240"
  },
  {
    "text": "we have What's called the ECS service Schuler ECS has two schedulers uh what we call run task which is just a random",
    "start": "1446240",
    "end": "1453120"
  },
  {
    "text": "run once it launches the task if the task dies it goes away doesn't try and do anything smart uh if it finishes it",
    "start": "1453120",
    "end": "1460320"
  },
  {
    "text": "finishes the service schedular tries to do a lot more it's designed for long running applications uh I thought i'",
    "start": "1460320",
    "end": "1466360"
  },
  {
    "text": "doing a demo but because this was to get streamed live and I didn't want to uh do any crazy things you'll get a demo of",
    "start": "1466360",
    "end": "1473679"
  },
  {
    "text": "screenshots uh so the first thing you do is you create a service uh hopefully you can",
    "start": "1473679",
    "end": "1479080"
  },
  {
    "start": "1475000",
    "end": "1504000"
  },
  {
    "text": "read this but essentially what create service does is you define your you you point to the task definition which is",
    "start": "1479080",
    "end": "1485080"
  },
  {
    "text": "essentially your declarative application uh you tell it what cluster it needs to be in you give your service a name and",
    "start": "1485080",
    "end": "1493000"
  },
  {
    "text": "then you you basically say I want one copy of this running you can Ally put it",
    "start": "1493000",
    "end": "1498919"
  },
  {
    "text": "behind a load balancer and then give a service role if you're using an elb or some other AWS",
    "start": "1498919",
    "end": "1504399"
  },
  {
    "start": "1504000",
    "end": "1536000"
  },
  {
    "text": "component the main your main your these Services launch launch tasks and the",
    "start": "1504399",
    "end": "1510320"
  },
  {
    "text": "manage tasks your task definition uh you can it's Json but you can also build it using the ECS console uh this is a very",
    "start": "1510320",
    "end": "1517320"
  },
  {
    "text": "simple task definition it has two containers uh these are standard Docker kind of features you give it an image",
    "start": "1517320",
    "end": "1523480"
  },
  {
    "text": "name you tell it how much CPU it needs you tell it how much memory it needs what ports you might want to expose what",
    "start": "1523480",
    "end": "1529520"
  },
  {
    "text": "Docker links you might have and whether it needs you know and any other additional commands that you might have",
    "start": "1529520",
    "end": "1534679"
  },
  {
    "text": "as well and at the end of it you have essentially a desired state of the",
    "start": "1534679",
    "end": "1540720"
  },
  {
    "start": "1536000",
    "end": "1579000"
  },
  {
    "text": "system in this case the desired state is very simple I need to run one copy of that task and I want to keep it running",
    "start": "1540720",
    "end": "1547640"
  },
  {
    "text": "and what the system basically tries to do is keep that one copy running in in the screenshot you seeing it's launched",
    "start": "1547640",
    "end": "1554080"
  },
  {
    "text": "one task that task has gone from you know desired and you have one running account which means the system is conver",
    "start": "1554080",
    "end": "1560080"
  },
  {
    "text": "is is has stabilized and it'll try and keep that state going so if you point to",
    "start": "1560080",
    "end": "1565360"
  },
  {
    "text": "the elb you get this really simple application you can probably do fancier stuff uh but you have a running ECS uh",
    "start": "1565360",
    "end": "1572520"
  },
  {
    "text": "sample app uh and I think we have the sample app in our console or something like that or somewhere which you can get",
    "start": "1572520",
    "end": "1578120"
  },
  {
    "text": "your hands on what do you do next you may have a scaling event where you want to run more",
    "start": "1578120",
    "end": "1583440"
  },
  {
    "start": "1579000",
    "end": "1615000"
  },
  {
    "text": "copies of your tasks you want to run because you're taking more traffic you have a three node cluster underneath uh",
    "start": "1583440",
    "end": "1589360"
  },
  {
    "text": "so you might want to scale to three tasks and you update your service uh and",
    "start": "1589360",
    "end": "1595200"
  },
  {
    "text": "what you see here is that one task is already running that's the one I already had and you have two pending tasks that",
    "start": "1595200",
    "end": "1600799"
  },
  {
    "text": "are you know waiting for the system to get it running and at some point very soon quickly they'll all be the system",
    "start": "1600799",
    "end": "1608120"
  },
  {
    "text": "will converge to a steady state everything will be checked in behind the load balancer and you can take traffic",
    "start": "1608120",
    "end": "1613240"
  },
  {
    "text": "on all your three hosts uh ECS also exposes an event",
    "start": "1613240",
    "end": "1618360"
  },
  {
    "start": "1615000",
    "end": "1631000"
  },
  {
    "text": "stream set of events on what are the transitions that are happening uh in this case what you see is hey you had",
    "start": "1618360",
    "end": "1623880"
  },
  {
    "text": "two uh new tasks that checked into a load balancer uh and then they started taking traffic",
    "start": "1623880",
    "end": "1630720"
  },
  {
    "text": "essentially you may also want to automate your Fleet I have a three node cluster here uh you may start taking",
    "start": "1630720",
    "end": "1636679"
  },
  {
    "start": "1631000",
    "end": "1663000"
  },
  {
    "text": "enough traffic that three nodes are not enough and you need more uh about two months about a month or two ago we",
    "start": "1636679",
    "end": "1643039"
  },
  {
    "text": "started publishing one minute metrics to cloudwatch at for clusters and services",
    "start": "1643039",
    "end": "1648200"
  },
  {
    "text": "so these are aggregate metrics they give you CPU utilization and memory utilization across your entire cluster",
    "start": "1648200",
    "end": "1653320"
  },
  {
    "text": "or across the service all the services that you running on that cluster and you can use those metrics to scale the fleet",
    "start": "1653320",
    "end": "1659640"
  },
  {
    "text": "that your tasks are running on uh that you can automate things you may also want to update your application so you",
    "start": "1659640",
    "end": "1665720"
  },
  {
    "start": "1663000",
    "end": "1727000"
  },
  {
    "text": "have multiple components this is you know one of those applications where different components are being developed by different teams one of these teams",
    "start": "1665720",
    "end": "1672320"
  },
  {
    "text": "has a new package uh task definitions in ECS are immutable so once you launch a",
    "start": "1672320",
    "end": "1677840"
  },
  {
    "text": "task uh if you make any changes to it it gets versioned uh into the next one so if you",
    "start": "1677840",
    "end": "1684080"
  },
  {
    "text": "want to launch uh an update you can choose the new version and say I want to update that and essentially you can we",
    "start": "1684080",
    "end": "1691200"
  },
  {
    "text": "have the concept of a deployment where you're going from one version of that task to the next version what does this",
    "start": "1691200",
    "end": "1697159"
  },
  {
    "text": "mean you have to drain connections from the tasks that are already running you need to shut down those tasks launch the",
    "start": "1697159",
    "end": "1703320"
  },
  {
    "text": "new ones and then reconnect them to an elb and the system does all of this for you you don't have to do that and so you",
    "start": "1703320",
    "end": "1710200"
  },
  {
    "text": "know you had this application running uh you updated it and now you're running a new application which has it's very",
    "start": "1710200",
    "end": "1716720"
  },
  {
    "text": "complex and I work very hard at it but it kind of works uh all right sorry it's",
    "start": "1716720",
    "end": "1724120"
  },
  {
    "text": "dry in here there is a third component to running distributed applications uh on a",
    "start": "1724120",
    "end": "1731320"
  },
  {
    "start": "1727000",
    "end": "1829000"
  },
  {
    "text": "cluster and this is much more prevalent in a microservices world than in your old school sort of HBC kind of world",
    "start": "1731320",
    "end": "1738120"
  },
  {
    "text": "that we talk about and that's service Discovery and my best analogy for service Discovery in this aircraft",
    "start": "1738120",
    "end": "1744399"
  },
  {
    "text": "control tower example that I used is just imagine there were no human beings in that and you just had machines making",
    "start": "1744399",
    "end": "1750880"
  },
  {
    "text": "the decisions everything was happening automatically we lived in some future world where people no longer sit in control towers and here as uh another",
    "start": "1750880",
    "end": "1759559"
  },
  {
    "text": "one plane takes off another one joins it each plane is always aware of each other they're discovering each other uh",
    "start": "1759559",
    "end": "1765880"
  },
  {
    "text": "especially those that need to be aware because they're going to the same airport and they both can't land on the same strip at the same time and so these",
    "start": "1765880",
    "end": "1771799"
  },
  {
    "text": "are the kinds of decisions today a human being is saying okay you come on this airport you got you hang around a while",
    "start": "1771799",
    "end": "1778960"
  },
  {
    "text": "because the president is landing or something like that U and the services discover each other automatically and",
    "start": "1778960",
    "end": "1786799"
  },
  {
    "text": "and it's very dynamic as Services come and go which is the kind of world we live in today uh there are three ways to",
    "start": "1786799",
    "end": "1794320"
  },
  {
    "text": "do service Discovery with Amazon ECS the first one is is using the elb all your",
    "start": "1794320",
    "end": "1799679"
  },
  {
    "text": "services are running behind a load balancer you can use that load balancer and the ECS apis to find where each",
    "start": "1799679",
    "end": "1805600"
  },
  {
    "text": "service is running uh that's simple not too complicated it's a kind of model for service Discovery that's been around for",
    "start": "1805600",
    "end": "1811320"
  },
  {
    "text": "a very very long time the other one and we have a blog post that shows you how to do it with",
    "start": "1811320",
    "end": "1816559"
  },
  {
    "text": "console is to use a system like console or CD these are configuration Management systems that you can store your",
    "start": "1816559",
    "end": "1822240"
  },
  {
    "text": "configuration in there and use those for discovering other services that your your tasks need um",
    "start": "1822240",
    "end": "1828799"
  },
  {
    "text": "uh it's a little more work than the elb example but it works pretty nicely and",
    "start": "1828799",
    "end": "1834120"
  },
  {
    "text": "another great example and they just published a blog post today well well after I had to lock my slides down so",
    "start": "1834120",
    "end": "1839760"
  },
  {
    "text": "you should go check that out as well but the folks at weave have done a really really good job of integrating weave",
    "start": "1839760",
    "end": "1845640"
  },
  {
    "text": "with ECS so you can re uh you can manage networking on ECS using weave you can do service Discovery using weave and you",
    "start": "1845640",
    "end": "1851960"
  },
  {
    "text": "can then visualize those services and applications using scope which is a visualization system and it's a great",
    "start": "1851960",
    "end": "1857360"
  },
  {
    "text": "partnership and you'll probably see them doing even more uh with that and uh there'll be other examples uh of other",
    "start": "1857360",
    "end": "1863559"
  },
  {
    "text": "partners who will do something similar so that's awesome uh these you",
    "start": "1863559",
    "end": "1869679"
  },
  {
    "start": "1865000",
    "end": "1951000"
  },
  {
    "text": "know you have now you have running clusters you have a system to schedule tasks on those clusters and and you have",
    "start": "1869679",
    "end": "1874919"
  },
  {
    "text": "a way for services to discover each other dynamically and take and maybe even use those uh that service Discovery",
    "start": "1874919",
    "end": "1880679"
  },
  {
    "text": "mechanism to trigger new actions so how are people using this in the real world",
    "start": "1880679",
    "end": "1886159"
  },
  {
    "text": "uh if you've been around the conference I actually forget what the order of these talks were were you've already",
    "start": "1886159",
    "end": "1893039"
  },
  {
    "text": "seen a number of talks from our customers using ECS uh in verner's keynote today you heard from",
    "start": "1893039",
    "end": "1899240"
  },
  {
    "text": "remind uh Jason talked a lot about why remind shows ECS uh what they're trying",
    "start": "1899240",
    "end": "1905120"
  },
  {
    "text": "to achieve with it uh one of the core things they had was every August their traffic goes up uh in that talk He also",
    "start": "1905120",
    "end": "1912639"
  },
  {
    "text": "mentioned uh some of uh some of the advantages of failure modes and robustness and and this graph",
    "start": "1912639",
    "end": "1918440"
  },
  {
    "text": "which is in a blog post that uh the folks that remind wrote when they open source Empire uh gives you a good idea of why",
    "start": "1918440",
    "end": "1925039"
  },
  {
    "text": "they chose ECS so the lines at the left are their latencies at various",
    "start": "1925039",
    "end": "1930559"
  },
  {
    "text": "distributions you know average 95th and 99th and then vertical line is when they switched over and not only did their",
    "start": "1930559",
    "end": "1938080"
  },
  {
    "text": "99th percentile latencies all of them but especially the 99th go all the way down they stay very stable as well and",
    "start": "1938080",
    "end": "1945240"
  },
  {
    "text": "this is the big reason why why they run on us because they don't have to worry about scaling the system it just does uh",
    "start": "1945240",
    "end": "1951720"
  },
  {
    "start": "1951000",
    "end": "2008000"
  },
  {
    "text": "another great example and one i' definitely encourage people look at is convox uh convox was developed by a",
    "start": "1951720",
    "end": "1958639"
  },
  {
    "text": "bunch of folks who really like building good interfa building great us experiences uh you know Noah who's the",
    "start": "1958639",
    "end": "1966159"
  },
  {
    "text": "co-founder of conbox uh has you know one of the things he said uh is that he's managed a bunch of orchestration",
    "start": "1966159",
    "end": "1972039"
  },
  {
    "text": "services all over the place uh and he's done you know one of the things they what they liked about ECS was was two",
    "start": "1972039",
    "end": "1978840"
  },
  {
    "text": "things one was they didn't have to worry about the backend scaling leader election all the complexity that you",
    "start": "1978840",
    "end": "1984320"
  },
  {
    "text": "need in a large distributed system and they also got the opportunity to take advantage of other AWS Services out of",
    "start": "1984320",
    "end": "1990039"
  },
  {
    "text": "the box and that works really well and this is just a screenshot of the convox CLI it's pretty neat pretty easy and if",
    "start": "1990039",
    "end": "1997320"
  },
  {
    "text": "you use Docker and you want to run apps uh 12 Factor apps also using uh Docker",
    "start": "1997320",
    "end": "2002720"
  },
  {
    "text": "this is a great system as is Empire which uh is what remind have developed uh",
    "start": "2002720",
    "end": "2008760"
  },
  {
    "start": "2008000",
    "end": "2062000"
  },
  {
    "text": "another third example is meteor uh I'm not a JavaScript person so not super familiar with how people use meteor but",
    "start": "2008760",
    "end": "2016000"
  },
  {
    "text": "apparently the JavaScript folks like them a lot um last week uh meteor announced Galaxy which is their",
    "start": "2016000",
    "end": "2022200"
  },
  {
    "text": "JavaScript application platform and they there were many many many reasons they",
    "start": "2022200",
    "end": "2028679"
  },
  {
    "text": "chose ECS in the end but the key reasons were one they can run thousands of containers across multiple availability",
    "start": "2028679",
    "end": "2034799"
  },
  {
    "text": "zones without having to worry about the scaling characteristics and then they can use things like cloud formation templates they can automate things",
    "start": "2034799",
    "end": "2040840"
  },
  {
    "text": "really well and you can integrate with a bunch of other AWS Services the the key message across all of these is it really",
    "start": "2040840",
    "end": "2047840"
  },
  {
    "text": "simplifies the overall user experience uh and allows these overall operational experience for these",
    "start": "2047840",
    "end": "2054638"
  },
  {
    "text": "customers and focuses allows them to focus on the application management and deployment part which is what their",
    "start": "2054639",
    "end": "2060240"
  },
  {
    "text": "customers want all right well and good we've you know this is kind of the core ECS system",
    "start": "2060240",
    "end": "2065878"
  },
  {
    "start": "2062000",
    "end": "2162000"
  },
  {
    "text": "it's been around for a long time but we want to keep improving the service and so for the next few minutes I'll talk",
    "start": "2065879",
    "end": "2071200"
  },
  {
    "text": "about some of the announcements that we made this morning uh that Berner made and give you a little more detail on them the first one is the Amazon e to",
    "start": "2071200",
    "end": "2078158"
  },
  {
    "text": "container registry uh our our goal is to have the registry available later this year uh you can sign up for Early Access",
    "start": "2078159",
    "end": "2085638"
  },
  {
    "text": "and just to let us know that you're interested uh at that URL below uh what is the E2 container registry uh so it's",
    "start": "2085639",
    "end": "2092878"
  },
  {
    "text": "a fully managed uh Docker registry so it's Docker compatible you it's integrated with Amazon ECS you can use",
    "start": "2092879",
    "end": "2100800"
  },
  {
    "text": "the uh registry apis you can use the docker CLI with",
    "start": "2100800",
    "end": "2106680"
  },
  {
    "text": "this uh it is supports SSL and is encrypted at rest uh but I think one of",
    "start": "2106680",
    "end": "2113119"
  },
  {
    "text": "the core features that our customers wanted us to develop was the integration with IM users and roles so there is uh",
    "start": "2113119",
    "end": "2119240"
  },
  {
    "text": "it's very very tightly integrated with our identity and access management system so Registries repositories images",
    "start": "2119240",
    "end": "2125040"
  },
  {
    "text": "and those you can give them you can have very fine Access Control who can deploy who can you know who can create one who",
    "start": "2125040",
    "end": "2131480"
  },
  {
    "text": "can download one who can upload one uh it'll be available in multiple regions our goal is to have it in every region",
    "start": "2131480",
    "end": "2137960"
  },
  {
    "text": "that ECS is available in um you don't have to use it with ECS you can use it on its own uh and it cost 10 cents a",
    "start": "2137960",
    "end": "2145359"
  },
  {
    "text": "gigabyte a month if your ECS resources are in the same region as your registry",
    "start": "2145359",
    "end": "2150720"
  },
  {
    "text": "that's all you pay if you are downloading it to your laptop or deploying to another region you pay standard AWS data transfer costs so so",
    "start": "2150720",
    "end": "2157760"
  },
  {
    "text": "that are the main first one and the you know sort of the new uh big feature that we announced today uh the other one is",
    "start": "2157760",
    "end": "2164440"
  },
  {
    "start": "2162000",
    "end": "2198000"
  },
  {
    "text": "uh AZ aware scheduling um a aware scheduling essentially right now well till",
    "start": "2164440",
    "end": "2171800"
  },
  {
    "text": "yesterday uh our scheduler would randomly Place uh new tasks across uh",
    "start": "2171800",
    "end": "2177640"
  },
  {
    "text": "instances uh even if you had instances in multiple availability zones uh as of today what the schedul does is it will",
    "start": "2177640",
    "end": "2185280"
  },
  {
    "text": "try and make sure that new tasks are launched in such a way that that you have balanced tasks across A's it does it by default and the main goal is to",
    "start": "2185280",
    "end": "2192079"
  },
  {
    "text": "improve your availability and get more efficient load balancing uh it's a commonly asked for feature and you can use that right now uh the third feature",
    "start": "2192079",
    "end": "2199839"
  },
  {
    "start": "2198000",
    "end": "2268000"
  },
  {
    "text": "and maybe I'm super partial to this is the first version of the AWS CLI we have",
    "start": "2199839",
    "end": "2205000"
  },
  {
    "text": "a ton of we have ton of ideas on how way we want to take this but the AWS CLI is idea is that you have a much simpler",
    "start": "2205000",
    "end": "2211640"
  },
  {
    "text": "workflow that starts on your laptop and ends on an ECS cluster so using you can",
    "start": "2211640",
    "end": "2216680"
  },
  {
    "text": "do ECS CLI configure to get all your creds and all set up you can do ECS CLI up to actually launch your cluster so",
    "start": "2216680",
    "end": "2222880"
  },
  {
    "text": "you don't have to go to the ec2 or AWS CLI to do that uh you can you can launch it from there and then for those folks",
    "start": "2222880",
    "end": "2229760"
  },
  {
    "text": "who use Docker compose uh let's say you have a compose file that you're working with locally and you you can and you've",
    "start": "2229760",
    "end": "2235880"
  },
  {
    "text": "done a compose up to run it on your laptop you if you do ECS CLI compose up you have the same compos file running on",
    "start": "2235880",
    "end": "2242720"
  },
  {
    "text": "ECS uh as an application and I suspect some of you probably into Jerome's uh",
    "start": "2242720",
    "end": "2248520"
  },
  {
    "text": "talk yesterday and he gave you a quick give you a preview of this particular CLI U the CLI is available today it's",
    "start": "2248520",
    "end": "2255480"
  },
  {
    "text": "also open source uh you know since it's very it's very young I suspect there may",
    "start": "2255480",
    "end": "2260520"
  },
  {
    "text": "be many features that people want and again we welcome pull requests so uh please do uh I'm sure the team will be",
    "start": "2260520",
    "end": "2266560"
  },
  {
    "text": "super happy to get them as well and the last feature I wanted to talk about was improved Docker container",
    "start": "2266560",
    "end": "2272920"
  },
  {
    "start": "2268000",
    "end": "2360000"
  },
  {
    "text": "configuration options so when when we launched ECS our agent model just a subset of the docka functionality",
    "start": "2272920",
    "end": "2279160"
  },
  {
    "text": "because that was robust we wanted to keep it light uh but we started hearing from some customers that they wanted to",
    "start": "2279160",
    "end": "2284839"
  },
  {
    "text": "do more and more uh so the things that we we we've added a much more uh a",
    "start": "2284839",
    "end": "2289960"
  },
  {
    "text": "larger set of docka features and updated our console to be able to support them as well and these are things like host",
    "start": "2289960",
    "end": "2296560"
  },
  {
    "text": "names Docker labels uh working directories privilege execution which is the most commonly as for one because",
    "start": "2296560",
    "end": "2303000"
  },
  {
    "text": "everybody wants to run Docker in Docker uh and things like log configuration and more uh see the you know there's too",
    "start": "2303000",
    "end": "2309400"
  },
  {
    "text": "many to mention here uh you can take a look at our documentation so essentially",
    "start": "2309400",
    "end": "2315720"
  },
  {
    "text": "you know what we've tried to do over the last uh you know many months is build a system that's designed to run container",
    "start": "2315720",
    "end": "2322920"
  },
  {
    "text": "enabled applications in production uh especially if you're someone who's running multiple applications on a on",
    "start": "2322920",
    "end": "2328760"
  },
  {
    "text": "one cluster or on multiple clusters that likes to wants to take advantage of things like I am and the scalability of",
    "start": "2328760",
    "end": "2335480"
  },
  {
    "text": "our system and essentially move really fast without worrying about the muck of of scaling and identity and some of the",
    "start": "2335480",
    "end": "2341800"
  },
  {
    "text": "things that AWS brings you for our other services and ECS is well well designed for that and you know if you are running",
    "start": "2341800",
    "end": "2349079"
  },
  {
    "text": "a small app or a large app uh we' love to talk to you about uh about how you're using it uh so with that uh please",
    "start": "2349079",
    "end": "2356040"
  },
  {
    "text": "remember to complete your evaluations and uh and thank you very much",
    "start": "2356040",
    "end": "2362720"
  }
]