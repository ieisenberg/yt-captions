[
  {
    "text": "hi everyone thanks for coming this is the deep dive on micro services and ECS",
    "start": "20",
    "end": "6180"
  },
  {
    "text": "I've gotten many strict warnings about making sure that I start very promptly on time so we're gonna go even though",
    "start": "6180",
    "end": "12240"
  },
  {
    "text": "people are still filing in my name is Abbie fuller I'm a Technical Evangelist I work for AWS Technical Evangelist is",
    "start": "12240",
    "end": "20160"
  },
  {
    "text": "really just a funny way of saying that I am a regular software engineer and I talked to people at conferences now so",
    "start": "20160",
    "end": "26430"
  },
  {
    "text": "here we go so just to level set what are we going to talk about so our first one is we're",
    "start": "26430",
    "end": "33149"
  },
  {
    "text": "gonna take it this step all the way back and we're going to talk about what are micro services we're gonna do a lightning ECS overview we're gonna get",
    "start": "33149",
    "end": "39540"
  },
  {
    "text": "feature specific and talk about two pretty specific features we're going to talk about flexible orchestration and",
    "start": "39540",
    "end": "45809"
  },
  {
    "text": "ECS we're gonna do a quick fake demo on container life cycle with the ECS CLI",
    "start": "45809",
    "end": "51300"
  },
  {
    "text": "and then we have a special mystery guest it's not a mystery anymore because the session has already started but Peter",
    "start": "51300",
    "end": "57780"
  },
  {
    "text": "from Travelex will be joining us to talk about how they use ECS in real life at a real company so let's get Rocking so we",
    "start": "57780",
    "end": "64890"
  },
  {
    "text": "can finish promptly so what are micro services and I added this a little bit",
    "start": "64890",
    "end": "70049"
  },
  {
    "text": "ago and it wasn't in the regular deck but I figured that we had to go one step back right and figure out what we're",
    "start": "70049",
    "end": "75450"
  },
  {
    "text": "deploying we're orchestrating these containers but why are people using containers in the first place so what",
    "start": "75450",
    "end": "80460"
  },
  {
    "text": "makes these a good architecture fit so this is our favorite definition of micro",
    "start": "80460",
    "end": "85770"
  },
  {
    "text": "services at AWS and we used to say that this was Adrian was the best AWS",
    "start": "85770",
    "end": "90960"
  },
  {
    "text": "evangelist that didn't work for Amazon but he works for Amazon now so the joke isn't this funny but it's so a good",
    "start": "90960",
    "end": "97950"
  },
  {
    "text": "definition so what are micro services so we're using it's a service-oriented architecture composed of loosely coupled",
    "start": "97950",
    "end": "104549"
  },
  {
    "text": "elements that have bounded context and this is this sounds really nice but what does this mean so it means that we have",
    "start": "104549",
    "end": "110430"
  },
  {
    "text": "we've broken down our services each one of them has a very specific job they are",
    "start": "110430",
    "end": "115649"
  },
  {
    "text": "loosely coupled so they talk to each other but they talk only over the network they each have a job and deploying to",
    "start": "115649",
    "end": "122520"
  },
  {
    "text": "one service should require zero knowledge of another service so in practice if I'm a developer I'm working",
    "start": "122520",
    "end": "128399"
  },
  {
    "text": "on my services me being able to ploy a messaging service should not require that I have",
    "start": "128399",
    "end": "133590"
  },
  {
    "text": "knowledge of like an admin dashboard so if they are loosely coupled they have bounded contacts they have one job and",
    "start": "133590",
    "end": "139890"
  },
  {
    "text": "they do it well and in most cases you separate them on the surface level so I",
    "start": "139890",
    "end": "145170"
  },
  {
    "text": "might have a messaging service or an admin app service or a graph service something like that so that's our",
    "start": "145170",
    "end": "151080"
  },
  {
    "text": "definition we're gonna stick to it there are many like it but this one is my favorite so this is a topic that I think",
    "start": "151080",
    "end": "157920"
  },
  {
    "text": "we've seen a lot and very trendy medium post recently I also wrote a trendy medium post on this so cool but the",
    "start": "157920",
    "end": "165930"
  },
  {
    "text": "whole monolith to micro services so a couple years ago a lot of people weren't doing micro services you had your",
    "start": "165930",
    "end": "171900"
  },
  {
    "text": "monolith so you had okay I work for my company I work on my company service I",
    "start": "171900",
    "end": "177599"
  },
  {
    "text": "pushed it to a github repo I deploy that service so that repo on many different",
    "start": "177599",
    "end": "182849"
  },
  {
    "text": "servers and I load balance maybe if I'm lucky between those servers so what happened",
    "start": "182849",
    "end": "189239"
  },
  {
    "text": "with micro services so when did we break off from kind of this one big monolith architecture to these little micro",
    "start": "189239",
    "end": "194700"
  },
  {
    "text": "services and what this means is if we go back to our definition we based it on",
    "start": "194700",
    "end": "200069"
  },
  {
    "text": "service so before I might have my giant web server service but now I'm breaking it",
    "start": "200069",
    "end": "205829"
  },
  {
    "text": "up into I have a UI I have my ordering service I have my inventory service I have my shipping service so we've broken",
    "start": "205829",
    "end": "212880"
  },
  {
    "text": "up that one big monolith into separate services and each one of them has a very",
    "start": "212880",
    "end": "218099"
  },
  {
    "text": "specific job they speak to each other only over the network so via a public API and they are loosely coupled so I",
    "start": "218099",
    "end": "225269"
  },
  {
    "text": "should be able to deploy to my order UI without knowing how the shipping service works so let's talk about other than",
    "start": "225269",
    "end": "231900"
  },
  {
    "text": "being loosely coupled and service oriented let's talk about some characteristics of what these market these micro service architectures look",
    "start": "231900",
    "end": "238290"
  },
  {
    "text": "like so this is a really pretty diagram I actually did not make this one although it looks like something I would",
    "start": "238290",
    "end": "244470"
  },
  {
    "text": "make it is just circles what are some characteristics of what these micro services look like so they're",
    "start": "244470",
    "end": "250500"
  },
  {
    "text": "independent a lot of these right they're really similar to what we spoke what we looked at with Adrian's definition so",
    "start": "250500",
    "end": "256650"
  },
  {
    "text": "they're decentralized they're polyglot so if I have a node.js service it shouldn't prevent me from having a",
    "start": "256650",
    "end": "262260"
  },
  {
    "text": "Python service or a ruby service they do one thing well this is my favorite I think because I",
    "start": "262260",
    "end": "268479"
  },
  {
    "text": "have a lot of people they start talking to me and they're like well my micro service isn't so micro anymore and if",
    "start": "268479",
    "end": "275020"
  },
  {
    "text": "you find that your micro service is doing many jobs so maybe it's handling shipping and maybe you added some",
    "start": "275020",
    "end": "281560"
  },
  {
    "text": "features and now what's handling your orders also maybe it's time for your big micro service to become too little micro",
    "start": "281560",
    "end": "288280"
  },
  {
    "text": "services so you make sure that you're decoupling those that you're keeping them very service oriented I was a",
    "start": "288280",
    "end": "295210"
  },
  {
    "text": "former ops person before I came to work at Amazon so I changed my mind and maybe this one's my favorite",
    "start": "295210",
    "end": "300850"
  },
  {
    "text": "but you build it you run it and it used to be something that if I worked in a service as a developer I could throw it",
    "start": "300850",
    "end": "308169"
  },
  {
    "text": "over the wall at DevOps and I could be like well I wrote this and if you're lucky there are tests but someone else's",
    "start": "308169",
    "end": "315729"
  },
  {
    "text": "problem to be on page or duty and to be on call and to make sure that this works and now you build it you run it so with",
    "start": "315729",
    "end": "322960"
  },
  {
    "text": "micro services I can work on my service all the way from my local development",
    "start": "322960",
    "end": "328000"
  },
  {
    "text": "environment to running that in production and that means I'm responsible for it I write the tests for",
    "start": "328000",
    "end": "333130"
  },
  {
    "text": "it I know everything about how that works so I'm a part of my infrastructure for my architecture for my process from",
    "start": "333130",
    "end": "339460"
  },
  {
    "text": "the ground all the way up so how do I",
    "start": "339460",
    "end": "344650"
  },
  {
    "text": "run these micro services on Amazon there are many ways to do it my favorite and",
    "start": "344650",
    "end": "349720"
  },
  {
    "text": "spoiler alert is ECS so that is Amazon's ec2 container service let's talk about",
    "start": "349720",
    "end": "356199"
  },
  {
    "text": "more exciting things so what does you see what is these yes so I think the the",
    "start": "356199",
    "end": "362110"
  },
  {
    "text": "kind of the overarching definition here so highly scalable high-performance container management system so what this",
    "start": "362110",
    "end": "368919"
  },
  {
    "text": "means for you and practice is eliminates the need to install operate and scale",
    "start": "368919",
    "end": "374020"
  },
  {
    "text": "your own container management infrastructure so there are some trade-offs right to micro services so if",
    "start": "374020",
    "end": "379659"
  },
  {
    "text": "I have my monolith I only have one thing to worry about and I might have to deploy it on many services many",
    "start": "379659",
    "end": "385630"
  },
  {
    "text": "different servers but I only have to worry about that one monolith and that is not the case for micro services",
    "start": "385630",
    "end": "390820"
  },
  {
    "text": "especially when we've separated them as is pretty logical into these into these containers I have to worry about",
    "start": "390820",
    "end": "397240"
  },
  {
    "text": "orchestrating deploying managing and scaling a lot of separate piece now where before I only had to worry",
    "start": "397240",
    "end": "403090"
  },
  {
    "text": "about one so where you see CS comes in is how can I scale and manage and",
    "start": "403090",
    "end": "409030"
  },
  {
    "text": "operate those without having to worry about some of the little pieces so a managed way to get deep AWS integration",
    "start": "409030",
    "end": "416259"
  },
  {
    "text": "to orchestrate these many containers and to manage the resources of your cluster so how do I deploy things how do i scale",
    "start": "416259",
    "end": "423249"
  },
  {
    "text": "it how do I take care of all these little containers so I can focus on running my application and last about do",
    "start": "423249",
    "end": "430300"
  },
  {
    "text": "I have enough containers so I added this one so I think one of the most common",
    "start": "430300",
    "end": "435460"
  },
  {
    "text": "questions that I've gotten about UCS is how does this map back to traditional workloads that I'm familiar with",
    "start": "435460",
    "end": "441189"
  },
  {
    "text": "so UCS sounds great and containers sound great but how does that tie back to kind",
    "start": "441189",
    "end": "446500"
  },
  {
    "text": "of AWS terms that I'm familiar with so here's a diagram I made it myself instances and UCS there are no secrets",
    "start": "446500",
    "end": "454569"
  },
  {
    "text": "they are standard easy to boxes so once you register them into a nice es cluster your tasks run here a service is a layer",
    "start": "454569",
    "end": "462699"
  },
  {
    "text": "that manages and places tasks so that's it and then a task is just a wrapper and",
    "start": "462699",
    "end": "468189"
  },
  {
    "text": "configuration there around processes running on those instances so it sounds",
    "start": "468189",
    "end": "473620"
  },
  {
    "text": "a lot less secretive I think when you do it this way so yeah there's containers and they're running on a cluster and you",
    "start": "473620",
    "end": "478810"
  },
  {
    "text": "register them as part of tasks but this is all that it Maps down to this is just a different way of managing your",
    "start": "478810",
    "end": "484360"
  },
  {
    "text": "processes across your instances in a way that works really well with microservices so who is using UCS that",
    "start": "484360",
    "end": "492580"
  },
  {
    "text": "purple air logo was also me but I promise there are other people that are using it to some really cool companies",
    "start": "492580",
    "end": "499240"
  },
  {
    "text": "out there writing cool posts doing cool demos we're gonna hear from one of them in just a couple minutes but check out",
    "start": "499240",
    "end": "505360"
  },
  {
    "text": "some of these why are people using UCS so the fully managed part optimistic",
    "start": "505360",
    "end": "513310"
  },
  {
    "text": "scheduling and then I think when you go back and look at the the rocket ship slide about the Deep AWS integration I",
    "start": "513310",
    "end": "520000"
  },
  {
    "text": "think this is what what people are usually talking about so there's lots of pieces that go into deploying and",
    "start": "520000",
    "end": "525519"
  },
  {
    "text": "managing these containers but there's also stuff that goes into if we're smart into logging and monitoring and health",
    "start": "525519",
    "end": "532420"
  },
  {
    "text": "checking and getting the data off of these containers and where the the AWS integration comes",
    "start": "532420",
    "end": "537790"
  },
  {
    "text": "in is that I can make that work really easily with stuff like cloud watch or with code start products so I can focus",
    "start": "537790",
    "end": "544630"
  },
  {
    "text": "again and this is a theme on focusing on making my application run really well and less about oh my gosh does this log",
    "start": "544630",
    "end": "552070"
  },
  {
    "text": "right so we're going to talk about this I think in a different kind of way in a",
    "start": "552070",
    "end": "558610"
  },
  {
    "text": "couple minutes but part of what I what I'm looking for for ECS is is flexibility so I should be able to to",
    "start": "558610",
    "end": "566260"
  },
  {
    "text": "choose how my how my jobs run in the way that works best for my workloads so I",
    "start": "566260",
    "end": "571570"
  },
  {
    "text": "should be able to either run a long-running app or a batch job and there's been a couple announcements recently about some different ways to",
    "start": "571570",
    "end": "578620"
  },
  {
    "text": "kind of tweak these on resources but I should be able to schedule a task I should be able to run a task just once I",
    "start": "578620",
    "end": "584890"
  },
  {
    "text": "should be able to place it randomly I said also though be able to have my long-running apps and those mean things",
    "start": "584890",
    "end": "591730"
  },
  {
    "text": "like my web server my order UI that we looked at a couple of slides ago I should be able to health check and",
    "start": "591730",
    "end": "597130"
  },
  {
    "text": "remove containers that aren't healthy anymore I should be able to schedule these I should be able to scale them up",
    "start": "597130",
    "end": "602500"
  },
  {
    "text": "and down I should be able to in typical Amazon fashion do this in multiple availability zones and I should be able",
    "start": "602500",
    "end": "608890"
  },
  {
    "text": "to group containers logically based on what they're doing so for us that's the concept of a service so I can scale up",
    "start": "608890",
    "end": "614980"
  },
  {
    "text": "my web service but leave my UI service alone so let's get feature specific",
    "start": "614980",
    "end": "620790"
  },
  {
    "text": "there are many features that would I guess be kind of cool but we're going to talk about two very specific ones the",
    "start": "620790",
    "end": "626860"
  },
  {
    "text": "first one is task placement and the second one is about events for cloud",
    "start": "626860",
    "end": "631960"
  },
  {
    "text": "watch so I said a couple of minutes ago that what this was about was flexibility and I think both of the features that",
    "start": "631960",
    "end": "638440"
  },
  {
    "text": "were talking about are are there for the same reason and they're there because not only you should things work out of",
    "start": "638440",
    "end": "644350"
  },
  {
    "text": "the blocks the kind of sensible defaults but you should be able to customize how this works and extend on top of it to",
    "start": "644350",
    "end": "650650"
  },
  {
    "text": "make sure that ECS handles your workloads the way that you want them to be handled so part of the way that we",
    "start": "650650",
    "end": "655690"
  },
  {
    "text": "can do this is with task placement so two components to this a task placement strategy is an algorithm that lets you",
    "start": "655690",
    "end": "662440"
  },
  {
    "text": "select your instances for task placement or which ones to terminate and a constraint is a rule that you take into",
    "start": "662440",
    "end": "668590"
  },
  {
    "text": "consideration during task placement so you use these together basically we can",
    "start": "668590",
    "end": "674410"
  },
  {
    "text": "pick on some of these attributes whether it's an ami or an availability zone or a custom one like prod and we can filter",
    "start": "674410",
    "end": "682060"
  },
  {
    "text": "our instances and we can place our tasks accordingly so we can do this in a couple different ways the first one is bin packing which is a",
    "start": "682060",
    "end": "690580"
  },
  {
    "text": "really fancy way of saying put as many things as possible in the smallest amount of space so this is resource",
    "start": "690580",
    "end": "696400"
  },
  {
    "text": "optimized so if I want to use the least amount of instance as possible bin packing is the right way so if I have a",
    "start": "696400",
    "end": "702760"
  },
  {
    "text": "couple instances that have space but one of them has just the right amount of space and the other one has a lot bin",
    "start": "702760",
    "end": "708250"
  },
  {
    "text": "packing will place them as close together as possible so that you can get the most out of your instances and a",
    "start": "708250",
    "end": "713890"
  },
  {
    "text": "spread will let you spread them as evenly as possible around your instances random its random I have put some",
    "start": "713890",
    "end": "721210"
  },
  {
    "text": "question marks in there so how does this work so it's just like middle school in math class this is order of operations",
    "start": "721210",
    "end": "727150"
  },
  {
    "text": "you do your cluster constraints first so CPU memory and a lot of cases port so if",
    "start": "727150",
    "end": "735730"
  },
  {
    "text": "you've been looking at the at the application load balancer versus ec2 classic load balancer port is not always",
    "start": "735730",
    "end": "742000"
  },
  {
    "text": "a constraint anymore but for a lot of people it still is so you have to meet your resource constraints first once",
    "start": "742000",
    "end": "748840"
  },
  {
    "text": "you've met your resource constraints you filter for a location or instance type those custom attributes all those things",
    "start": "748840",
    "end": "754690"
  },
  {
    "text": "that we looked at a couple slides ago then I identify my instances that meet",
    "start": "754690",
    "end": "759880"
  },
  {
    "text": "my strategy so for example my spread strategy and then I apply my filter so I",
    "start": "759880",
    "end": "765130"
  },
  {
    "text": "select my final container instance that I want to place my tasks on so again",
    "start": "765130",
    "end": "770260"
  },
  {
    "text": "it's about flexibility so I should be able to place my tasks the way that I want them to be placed and ECS should",
    "start": "770260",
    "end": "777640"
  },
  {
    "text": "have a sensible default for me so I should be able to place my tasks I should feel to not think about it right if I don't want to write my own",
    "start": "777640",
    "end": "783700"
  },
  {
    "text": "placement policy or use a different one it should work out of the box but if I want to customize this and use my",
    "start": "783700",
    "end": "788920"
  },
  {
    "text": "resources a little differently I should be able to do that too number 2 Amazon",
    "start": "788920",
    "end": "794560"
  },
  {
    "text": "ECS event stream for cloud watchdogs this is a really long name but",
    "start": "794560",
    "end": "799600"
  },
  {
    "text": "ultimately it's something that's actually really kind of cool so I can receive almost real-time updates",
    "start": "799600",
    "end": "804940"
  },
  {
    "text": "about both the current state of my container instances and the current state of all those tasks which in",
    "start": "804940",
    "end": "812050"
  },
  {
    "text": "practice lets you do a couple of things right so I can build my own scheduler on top of UCS or I can monitor my cluster",
    "start": "812050",
    "end": "819310"
  },
  {
    "text": "state changes and I can consume those events so it events things like TAS started tasks stopped tasks pending I",
    "start": "819310",
    "end": "826060"
  },
  {
    "text": "can consume those with other AWS services so everyone's favourite and most popular lambda so I keep talking",
    "start": "826060",
    "end": "834640"
  },
  {
    "text": "about flexibility so where is this fitting in with UCS and it's a choose-your-own-adventure thing so my",
    "start": "834640",
    "end": "841839"
  },
  {
    "text": "orchestration platform so in this case ECS it should have these sensible defaults right so if I'm just starting",
    "start": "841839",
    "end": "847450"
  },
  {
    "text": "with UCS and I don't really want to tweak my own resources or if I'm just playing for a weekend side project or",
    "start": "847450",
    "end": "853959"
  },
  {
    "text": "even if I'm just not an ops person and I want to go from zero to working app as quickly as possible there should be sensible defaults so it",
    "start": "853959",
    "end": "861490"
  },
  {
    "text": "should not run out of memory immediately it should not run out of CPU immediately it should just have kind of a sensible",
    "start": "861490",
    "end": "867519"
  },
  {
    "text": "starting place for me to run a lot of apps and then on top of that which is what we've been talking about mostly",
    "start": "867519",
    "end": "872680"
  },
  {
    "text": "today is the ability to extend and customize so I should be able to pick one or a combination of both meaning if",
    "start": "872680",
    "end": "879579"
  },
  {
    "text": "I just get started and I use the defaults for everything I should be able to customize just one of those as I go",
    "start": "879579",
    "end": "885880"
  },
  {
    "text": "along so maybe I bring in a scheduler or maybe I say oh well you know what I run out of CPU kind of fast let me use let",
    "start": "885880",
    "end": "893740"
  },
  {
    "text": "me use the strategies and constraints for my task placement to see if I can use my resources a little bit more",
    "start": "893740",
    "end": "899680"
  },
  {
    "text": "effectively a couple ways to do this so first off we have options so when I'm",
    "start": "899680",
    "end": "907180"
  },
  {
    "text": "working with ECS I can use the console and before everyone shouts at me and",
    "start": "907180",
    "end": "912510"
  },
  {
    "text": "especially a hacker news the spoiler alert I like the console so why do",
    "start": "912510",
    "end": "918370"
  },
  {
    "text": "people use the console so you see a lot of demos and these and a lot of talks and everyone's always using the console",
    "start": "918370",
    "end": "924070"
  },
  {
    "text": "and I was like oh gosh why don't you use the CLI real developers use the CLI why",
    "start": "924070",
    "end": "930610"
  },
  {
    "text": "the console so you'll notice that two reasons are the same and they are both JSON",
    "start": "930610",
    "end": "935800"
  },
  {
    "text": "have you ever tried making a VPC and all of its subnets and JSON from the CLI if you do never try it again is awful there",
    "start": "935800",
    "end": "943420"
  },
  {
    "text": "are reasons that there is a console and the biggest reason for me is it's quicker to test and get started and I",
    "start": "943420",
    "end": "948939"
  },
  {
    "text": "get visual feedback if I do something wrong in the console I get a message telling me in no uncertain terms that",
    "start": "948939",
    "end": "955929"
  },
  {
    "text": "I've done something wrong I can kind of play along with going I can work through the first run wizard for ECS but it's",
    "start": "955929",
    "end": "962619"
  },
  {
    "text": "it's it's quicker for me to work that way until I know what I'm doing but the console is not for everyone so",
    "start": "962619",
    "end": "969009"
  },
  {
    "text": "if you're customizing or automating the CLI is a better choice there's a couple",
    "start": "969009",
    "end": "974410"
  },
  {
    "text": "different options for this there's actually 2 CL eyes there's the AWS CLI which is kind of the familiar one that",
    "start": "974410",
    "end": "980110"
  },
  {
    "text": "you can use with a lot of AWS services there's also the ECS CLI so still open",
    "start": "980110",
    "end": "985179"
  },
  {
    "text": "source you can pass it docker compose files but both of these in summary you",
    "start": "985179",
    "end": "990549"
  },
  {
    "text": "can use them to manage your container life cycles from start to finish so in keeping with our flexibility theme you",
    "start": "990549",
    "end": "996790"
  },
  {
    "text": "should be able to automate to kind of tweak these to extend these to put these in your CI CD system you should be able",
    "start": "996790",
    "end": "1003299"
  },
  {
    "text": "to do all of this so let's look at the container lifecycle so our first stop we",
    "start": "1003299",
    "end": "1010290"
  },
  {
    "text": "have to create a cluster so with all of these pretty these are really basic API calls in our real-life production",
    "start": "1010290",
    "end": "1017699"
  },
  {
    "text": "environment these are probably not going to cut it but for the purposes of our little example I can create a cluster",
    "start": "1017699",
    "end": "1023459"
  },
  {
    "text": "and it will return some information so there's nothing happening in this yet right so I have I have no instances I",
    "start": "1023459",
    "end": "1029548"
  },
  {
    "text": "have no tasks I have no services but I've created in my little empty shell in my shell is",
    "start": "1029549",
    "end": "1034740"
  },
  {
    "text": "where all of my services are going to go the second stop is I have to create a task so this sounds it's a is this",
    "start": "1034740",
    "end": "1042120"
  },
  {
    "text": "pretty specific order of operations here right so I have to have my empty box first and then I can do all the pieces",
    "start": "1042120",
    "end": "1047938"
  },
  {
    "text": "to put in that box this is a little counterintuitive for me but after you",
    "start": "1047939",
    "end": "1053370"
  },
  {
    "text": "create the service your next stop is creating a task so I can register my task definition it's with my favorite",
    "start": "1053370",
    "end": "1059669"
  },
  {
    "text": "JSON I can pass it a JSON file though and not this string but I could do both so I've created my task definition and",
    "start": "1059669",
    "end": "1066809"
  },
  {
    "text": "that's basically saying hey describe the service that you want to run and that's what my tasks a phoenician is then I can use my test",
    "start": "1066809",
    "end": "1074370"
  },
  {
    "text": "definition and I can create a service so my service remember when we looked at that slide where we mapped all the ECS",
    "start": "1074370",
    "end": "1079620"
  },
  {
    "text": "pieces back to our ec2 workload the service is just managing my tasks and what's important here is this is where",
    "start": "1079620",
    "end": "1086789"
  },
  {
    "text": "my deployments happen so if I want to deploy something on ECS all I really have to worry about is that desired",
    "start": "1086789",
    "end": "1092669"
  },
  {
    "text": "count or that task revision so changing the task RIT Revit revision so going from web app 1 to web app 2 that is a",
    "start": "1092669",
    "end": "1101039"
  },
  {
    "text": "deployment that is all so if you're doing this from a CI CD system that's pretty easy right so I can build it and",
    "start": "1101039",
    "end": "1107549"
  },
  {
    "text": "I can go from start to finish so I can have I build locally I put I push to my",
    "start": "1107549",
    "end": "1113250"
  },
  {
    "text": "CI CD system so that's a commit tied to a build number in its the ICD system",
    "start": "1113250",
    "end": "1118919"
  },
  {
    "text": "which is then tied to his task provision in ECS so I can debug all the way from",
    "start": "1118919",
    "end": "1124590"
  },
  {
    "text": "the top down so I can debug everything from ok this deployment mapped to this",
    "start": "1124590",
    "end": "1129990"
  },
  {
    "text": "task revision and here's what changed that task revision was kicked off by this build number and that build number",
    "start": "1129990",
    "end": "1136200"
  },
  {
    "text": "was kicked off by this commit so you can debug everywhere from the commits that triggered the build that triggered the",
    "start": "1136200",
    "end": "1141809"
  },
  {
    "text": "task revision that triggered the deployment at the service level so",
    "start": "1141809",
    "end": "1147630"
  },
  {
    "text": "summits are pretty popular except in the middle right here because I think people think that I'll call on them or",
    "start": "1147630",
    "end": "1152850"
  },
  {
    "text": "something but we have to scale up our service so we talked about the desired",
    "start": "1152850",
    "end": "1158250"
  },
  {
    "text": "count I can scale up and down using just this and you can automate that based on",
    "start": "1158250",
    "end": "1163409"
  },
  {
    "text": "events or alarms from cloud watch so if I want 4 copies of a task instead of 2",
    "start": "1163409",
    "end": "1169740"
  },
  {
    "text": "this is all and it UCS will handle scaling them back up checking to make",
    "start": "1169740",
    "end": "1174899"
  },
  {
    "text": "sure that they're still working and then I can scale them back down the same way same thing that happens so most people",
    "start": "1174899",
    "end": "1182100"
  },
  {
    "text": "do this to auto scaling ultimately if you scale up you don't want to keep the",
    "start": "1182100",
    "end": "1188460"
  },
  {
    "text": "resources going if you don't have the traffic to warrant them so you want to scale back down there's a ton of cool",
    "start": "1188460",
    "end": "1194789"
  },
  {
    "text": "stuff too that we can do around query yang state so I can describe my service I can find out the current deployment I",
    "start": "1194789",
    "end": "1201000"
  },
  {
    "text": "can see what events are happy my cluster and then we talked about cloud watch but I can expose those events right so I can go back I can look",
    "start": "1201000",
    "end": "1208500"
  },
  {
    "text": "at the events I can see what's happening with my cluster I can see what's going on and in a lot of cases I can see okay",
    "start": "1208500",
    "end": "1215070"
  },
  {
    "text": "well maybe my deployment didn't work or this is how many copies I have running so we can find out information about how",
    "start": "1215070",
    "end": "1221040"
  },
  {
    "text": "healthy our cluster is now healthy our services are by using the API also so in",
    "start": "1221040",
    "end": "1227820"
  },
  {
    "text": "this particular example goodbye London I promise I'll be back in a couple minutes but I have to clean up",
    "start": "1227820",
    "end": "1233070"
  },
  {
    "text": "my resources once I'm done using them so I delete my cluster if and only if I've scaled down",
    "start": "1233070",
    "end": "1239490"
  },
  {
    "text": "my service to have zero running instead of four so without further ado I'm going",
    "start": "1239490",
    "end": "1248010"
  },
  {
    "text": "to introduce someone who is using ECS in production Peter Wong from Travelex",
    "start": "1248010",
    "end": "1254480"
  },
  {
    "text": "[Applause]",
    "start": "1254480",
    "end": "1262150"
  },
  {
    "text": "afternoon everyone so my name is Peter Wong I work Travelex as head of engineering for payments and",
    "start": "1262690",
    "end": "1269090"
  },
  {
    "text": "b2b so traffic is a glance traffic's is the world leading foreign",
    "start": "1269090",
    "end": "1275360"
  },
  {
    "text": "exchange expert we've been around for over 40 years we've have further for",
    "start": "1275360",
    "end": "1281179"
  },
  {
    "text": "those 40 years we've built basically over a thousand retail stores across",
    "start": "1281179",
    "end": "1286370"
  },
  {
    "text": "airports department stores and we've also have or around a thousand ATMs",
    "start": "1286370",
    "end": "1292520"
  },
  {
    "text": "across so we were handling lots of cash flow in terms of foreign exchanges and that's the core business of Travelex so",
    "start": "1292520",
    "end": "1301250"
  },
  {
    "text": "here you see a little history of what happened with the company and so right",
    "start": "1301250",
    "end": "1307640"
  },
  {
    "text": "about two years ago we've been tasked to look at how we can actually deliver a",
    "start": "1307640",
    "end": "1313100"
  },
  {
    "text": "lot more digital products for a company and we're looking at how we can actually build a digital platform that can",
    "start": "1313100",
    "end": "1320000"
  },
  {
    "text": "provide those capability and here it comes engineering your traffic's and",
    "start": "1320000",
    "end": "1326169"
  },
  {
    "text": "particular image we have was actually delivering international payments for traffic's in fact setting and brand-new",
    "start": "1326169",
    "end": "1332809"
  },
  {
    "text": "business for traffic's we want to set up international payments starting from",
    "start": "1332809",
    "end": "1338390"
  },
  {
    "text": "going from UK outbound and we want to be able to build b2c products and bdp",
    "start": "1338390",
    "end": "1344270"
  },
  {
    "text": "products in fact hooking onto as many partners as we as we can onto a single",
    "start": "1344270",
    "end": "1351200"
  },
  {
    "text": "platform so we need to be able to deliver those capability securely annex",
    "start": "1351200",
    "end": "1356270"
  },
  {
    "text": "geld what does that mean securely so some some of you might think about",
    "start": "1356270",
    "end": "1361669"
  },
  {
    "text": "security as end-to-end encryption but actually security has not just that",
    "start": "1361669",
    "end": "1367400"
  },
  {
    "text": "there are other things to consider for example compliance so compliance is a",
    "start": "1367400",
    "end": "1372470"
  },
  {
    "text": "separate topic from security but we need to take that into account when we built an international payment system",
    "start": "1372470",
    "end": "1378020"
  },
  {
    "text": "literally a bank our online banking surface so that means we need to be compliance a with PCI we need to be",
    "start": "1378020",
    "end": "1385070"
  },
  {
    "text": "licensed with with the FCA for in the UK to actually hold digital digital money",
    "start": "1385070",
    "end": "1391760"
  },
  {
    "text": "for our customer we also need to be able resilient we won",
    "start": "1391760",
    "end": "1396830"
  },
  {
    "text": "out we warned our surfaces to be up 24/7 with zero downtime even when we're pushing changes to the production so",
    "start": "1396830",
    "end": "1404029"
  },
  {
    "text": "what does that mean for us then in terms of engineering what are our challenges as I said we want to be able to have encryption of all our data and that's in",
    "start": "1404029",
    "end": "1411620"
  },
  {
    "text": "flight and at rest we want full audit ability of everything we change whether",
    "start": "1411620",
    "end": "1417320"
  },
  {
    "text": "it's how we developed our features how we push that features into our built how",
    "start": "1417320",
    "end": "1422659"
  },
  {
    "text": "we do release on those on the order of that surface and how we deploy it and how we actually operated we won't",
    "start": "1422659",
    "end": "1428870"
  },
  {
    "text": "complete or disability we also want security for traffic coming in and going",
    "start": "1428870",
    "end": "1435350"
  },
  {
    "text": "out of our of our system that is traffic coming in from our customer and for us",
    "start": "1435350",
    "end": "1440480"
  },
  {
    "text": "to talk to our third parties as well obviously as I said before we want to be",
    "start": "1440480",
    "end": "1445610"
  },
  {
    "text": "able to use it across product across partners and customers and this means we need multi-tenancy we need to be able to",
    "start": "1445610",
    "end": "1452929"
  },
  {
    "text": "support multi-tenant into on our platform so traffic's has other digital",
    "start": "1452929",
    "end": "1458779"
  },
  {
    "text": "products in this in existing space they're not running on the platform but",
    "start": "1458779",
    "end": "1464240"
  },
  {
    "text": "we want to be able to make use of our capability so that we can actually use those capability across these platforms",
    "start": "1464240",
    "end": "1471139"
  },
  {
    "text": "so across this product and of course as I said before we want to be able to make changes as regularly as frequently as we",
    "start": "1471139",
    "end": "1477259"
  },
  {
    "text": "can because we want to deliver customer value as quickly and as effectively as we can hence we want to we were going through",
    "start": "1477259",
    "end": "1483409"
  },
  {
    "text": "continuous deployment we have to push change daily if we want to with push",
    "start": "1483409",
    "end": "1489019"
  },
  {
    "text": "changes early if we want to and as I said 24/7 operations so that means one",
    "start": "1489019",
    "end": "1497059"
  },
  {
    "text": "of the things we turn into it's actually well let's look at micro surface is why first of all micro surface is it as Abby",
    "start": "1497059",
    "end": "1503750"
  },
  {
    "text": "said it's the single function does it well it's a black box you can allow polyglot environment it's composable so",
    "start": "1503750",
    "end": "1510679"
  },
  {
    "text": "you can actually take one or more two surfaces you already develop put together and there you go you have a new",
    "start": "1510679",
    "end": "1515960"
  },
  {
    "text": "product you want to reduce risk if you're if you're trying to push changes continuously to your international",
    "start": "1515960",
    "end": "1521960"
  },
  {
    "text": "payments platform that's handling money 24/7 you want to reduce risk",
    "start": "1521960",
    "end": "1527250"
  },
  {
    "text": "and if I be able if I can actually check a change put change into an environment and say well actually I'm actually",
    "start": "1527250",
    "end": "1532950"
  },
  {
    "text": "pushing change to only a very small part an independent service that reduces risk and that actually makes us getting stuff",
    "start": "1532950",
    "end": "1539789"
  },
  {
    "text": "quicker into the market it also allows us to increase flexibility in",
    "start": "1539789",
    "end": "1545070"
  },
  {
    "text": "development if our developers comes in or new a new engineer starts with our",
    "start": "1545070",
    "end": "1550110"
  },
  {
    "text": "with our team he or she does not need to you ask your hats you have to know everything in the platform they can",
    "start": "1550110",
    "end": "1555390"
  },
  {
    "text": "focus on an individual service and actually start developing and adding value to the platform in terms of",
    "start": "1555390",
    "end": "1561840"
  },
  {
    "text": "operation flexibilities also allows us to say in terms of security we can we",
    "start": "1561840",
    "end": "1567720"
  },
  {
    "text": "can actually partition high risk versus low risk surfaces and and have different",
    "start": "1567720",
    "end": "1573120"
  },
  {
    "text": "security posture between those surfaces and I've talked that we can scale up and down our surfaces independently",
    "start": "1573120",
    "end": "1580679"
  },
  {
    "text": "individually as they are needed so here is an exam at leave more our what our",
    "start": "1580679",
    "end": "1586440"
  },
  {
    "text": "state looks like right now we are adding more surfaces as we speak these surfaces",
    "start": "1586440",
    "end": "1591510"
  },
  {
    "text": "are split between surfaces required to on board a customer go through the relevant kic checks al checks that so",
    "start": "1591510",
    "end": "1599640"
  },
  {
    "text": "that they can be our customer so they can transact with us our surface is here to do with actual payments or when",
    "start": "1599640",
    "end": "1605070"
  },
  {
    "text": "they're processing transaction looking at ethics rates also looking at looking",
    "start": "1605070",
    "end": "1612120"
  },
  {
    "text": "at reconciliation in the settlement and they're also these core services that actually is independent of payments but",
    "start": "1612120",
    "end": "1619049"
  },
  {
    "text": "our services that we need to communicate your customer for example we have an SMS service that actually sends SMS we have",
    "start": "1619049",
    "end": "1625860"
  },
  {
    "text": "an email service and guess what is sends emails so these surfaces are very much",
    "start": "1625860",
    "end": "1631230"
  },
  {
    "text": "on their own loosely coupled and they can be use across many products so the",
    "start": "1631230",
    "end": "1637320"
  },
  {
    "text": "micro surfaces we decided to do it this way but we also want to do it based on some principles so we can actually",
    "start": "1637320",
    "end": "1642809"
  },
  {
    "text": "continue evolving the system and what we decided to go for is looking at 12",
    "start": "1642809",
    "end": "1649919"
  },
  {
    "text": "factor app war our 12 for tabs so a 12-footer app is an app a web app that",
    "start": "1649919",
    "end": "1655200"
  },
  {
    "text": "has been developed to follow 12 principles these principles allow us to be",
    "start": "1655200",
    "end": "1660960"
  },
  {
    "text": "easier to operate the app easier to release changes to it to scale easier to",
    "start": "1660960",
    "end": "1666720"
  },
  {
    "text": "monitor easier to develop easier to audit and to secure so these are the",
    "start": "1666720",
    "end": "1672179"
  },
  {
    "text": "these are the twelve at it on the on slide these are the twelve tel factors that we need to consider and I'm going",
    "start": "1672179",
    "end": "1678120"
  },
  {
    "text": "to tell you how we deploy our service is an operator mini CS how that has helped us to actually fulfill a lot of these a",
    "start": "1678120",
    "end": "1686370"
  },
  {
    "text": "lot of these principles and quite out of the box so in particular because we",
    "start": "1686370",
    "end": "1691830"
  },
  {
    "text": "chose to use micro services I choose to deploy them in docker images running",
    "start": "1691830",
    "end": "1696929"
  },
  {
    "text": "them a stock containers in ecs meaning that our code base we actually first in control our docker compose file in",
    "start": "1696929",
    "end": "1704850"
  },
  {
    "text": "source control we use that to actually establish our audit trail so every bill every change is actually audited record",
    "start": "1704850",
    "end": "1712529"
  },
  {
    "text": "it in source control and that means also because our because our deployment unit",
    "start": "1712529",
    "end": "1718620"
  },
  {
    "text": "is a docker image or our dependencies actually encapsulated inside that docker",
    "start": "1718620",
    "end": "1724080"
  },
  {
    "text": "image we don't need to actually think about our ECS easy to host what what",
    "start": "1724080",
    "end": "1729270"
  },
  {
    "text": "else needs to be run inside our hosts we're actually deploying everything is into that image and the important thing",
    "start": "1729270",
    "end": "1735299"
  },
  {
    "text": "of that is is the configuration then you can build around that in the forms of environment environments so as I said we",
    "start": "1735299",
    "end": "1742470"
  },
  {
    "text": "have continuous deployment pipeline across east across AWS so we have three environments for our testing u18",
    "start": "1742470",
    "end": "1749370"
  },
  {
    "text": "production they are all running the same containers the only difference is that the environment at different so the",
    "start": "1749370",
    "end": "1755880"
  },
  {
    "text": "configuration drives the difference the differentiation at the same time you can actually run the whole platform on",
    "start": "1755880",
    "end": "1762779"
  },
  {
    "text": "someone's computer if you want to locally offline so I could actually run",
    "start": "1762779",
    "end": "1767940"
  },
  {
    "text": "the platform on an airplane if I want to and that and that's the power gives us by actually setting up the architecture",
    "start": "1767940",
    "end": "1773880"
  },
  {
    "text": "that way so we using by using this architecture we also build bill to audit",
    "start": "1773880",
    "end": "1779070"
  },
  {
    "text": "built release and run and we can we can do that to push images between across",
    "start": "1779070",
    "end": "1785370"
  },
  {
    "text": "our environments we use port binding to actually allow us to run multiple",
    "start": "1785370",
    "end": "1791510"
  },
  {
    "text": "multiple instances multiple Dockers container into easy as host and these",
    "start": "1791510",
    "end": "1797340"
  },
  {
    "text": "are and these and these containers because there are restful surfaces actually they are stateless what does",
    "start": "1797340",
    "end": "1804720"
  },
  {
    "text": "that mean that means stateless they don't contain state the states are actually transferred on to our database",
    "start": "1804720",
    "end": "1810120"
  },
  {
    "text": "and that also means is that is these services are disposable we have helped we use we use ELB health",
    "start": "1810120",
    "end": "1817050"
  },
  {
    "text": "checks to determine the healthiness of these containers and so if they're not",
    "start": "1817050",
    "end": "1822210"
  },
  {
    "text": "healthy because the house is not healthy we can reposition a whole new host we can reassure a new container and it will",
    "start": "1822210",
    "end": "1828600"
  },
  {
    "text": "be okay because they're stateless and as I said they have properity we can",
    "start": "1828600",
    "end": "1833700"
  },
  {
    "text": "develop exactly the same thing as we run in production so we are very close the only difference by a few",
    "start": "1833700",
    "end": "1839630"
  },
  {
    "text": "configurations such as our sq sq names for example so these are the things are",
    "start": "1839630",
    "end": "1845220"
  },
  {
    "text": "coming out straight from it by brushing running our estate our platform on ECS there are other as you can see I've I",
    "start": "1845220",
    "end": "1851910"
  },
  {
    "text": "haven't highlighted some of the some of the principles and some of these are the principle we actually done by actually",
    "start": "1851910",
    "end": "1858000"
  },
  {
    "text": "came out from the bottom up by design our architecture so for example packing surfaces so our micro surfaces are built",
    "start": "1858000",
    "end": "1864960"
  },
  {
    "text": "using Java and we use basically the SDK API as a first as a first principle so",
    "start": "1864960",
    "end": "1872370"
  },
  {
    "text": "everything is on the API level for example let's take example queuing we do asynchronous messages across surfaces we",
    "start": "1872370",
    "end": "1880320"
  },
  {
    "text": "use JMS in you know in our surface now we don't we're not going to talk to sqs when we actually run our surfaces",
    "start": "1880320",
    "end": "1885840"
  },
  {
    "text": "locally so what do we do we use we use activemq as an option just for local",
    "start": "1885840",
    "end": "1891150"
  },
  {
    "text": "development that is fine because our code is actually at Gnostic 2/2 which implementation we use we just happen to",
    "start": "1891150",
    "end": "1897540"
  },
  {
    "text": "be switching them under the hood on top of it it's still talking to JMS so that's an example how we treat our",
    "start": "1897540",
    "end": "1902940"
  },
  {
    "text": "backing surface exactly the same way and at the same time there's traffic going through from the surfaces to the backing",
    "start": "1902940",
    "end": "1908790"
  },
  {
    "text": "surface are fully encrypted as well and I'll pick another example locks locks is",
    "start": "1908790",
    "end": "1915660"
  },
  {
    "text": "very important here we have so many surfaces running on e CS we actually use",
    "start": "1915660",
    "end": "1921180"
  },
  {
    "text": "centralized locking what we've what we actually use in a docker in our docker locking driver is a cloud watchdog lock",
    "start": "1921180",
    "end": "1927140"
  },
  {
    "text": "that allows us to send our locks from standard out all the way to clown wash directly without touching the host and",
    "start": "1927140",
    "end": "1933440"
  },
  {
    "text": "that means we're actually saving iOS and also it means that we kept all our our all our locks eternally and it's in",
    "start": "1933440",
    "end": "1940460"
  },
  {
    "text": "cloud watch and then we went feeding that into elasticsearch and we use Cabana to able to visualize and analyze",
    "start": "1940460",
    "end": "1946910"
  },
  {
    "text": "those locks so here is a high-level a",
    "start": "1946910",
    "end": "1952100"
  },
  {
    "text": "high-level view of how we actually provision our surfaces as you can see we",
    "start": "1952100",
    "end": "1957620"
  },
  {
    "text": "use the number of AWS services we use cloud services like SAS cue SNS SES an",
    "start": "1957620",
    "end": "1965420"
  },
  {
    "text": "s3 object object store we also have cloud front to use as a CDN couple with",
    "start": "1965420",
    "end": "1972830"
  },
  {
    "text": "our wife which defines our wife rules to allow traffic's coming in we have a we",
    "start": "1972830",
    "end": "1979430"
  },
  {
    "text": "we use a we have an API gateway in the form of an engine X that allows us to acting a reverse proxy to allow us to",
    "start": "1979430",
    "end": "1986420"
  },
  {
    "text": "actually to surface the request and to decide on where that request will go",
    "start": "1986420",
    "end": "1991520"
  },
  {
    "text": "into our class and to easiest cluster as you can see we also have using RDS as",
    "start": "1991520",
    "end": "1997120"
  },
  {
    "text": "underneath we use Postgres to actually host our transactional data so here's an",
    "start": "1997120",
    "end": "2004930"
  },
  {
    "text": "example of how we actually do end-to-end encryption so if a customer whether is",
    "start": "2004930",
    "end": "2010330"
  },
  {
    "text": "in isn't it's an end as an end user or a partner it goes into our it talks to our",
    "start": "2010330",
    "end": "2015340"
  },
  {
    "text": "API through either through a website and that will be also or be fully encrypted with a partner is actually using an TOS",
    "start": "2015340",
    "end": "2023020"
  },
  {
    "text": "mutual off that goes into a public face in classical Yale be and she is sitting on top of our nginx cluster so these",
    "start": "2023020",
    "end": "2031900"
  },
  {
    "text": "traffic will flow through it because they layer four they don't actually have to decrypt at the Yale B layer they go straight into nginx that gets decrypted",
    "start": "2031900",
    "end": "2038620"
  },
  {
    "text": "and we encrypt using using the key within within the within nginx and then",
    "start": "2038620",
    "end": "2044140"
  },
  {
    "text": "we actually do Mitchell off between our local API gateway and our services and",
    "start": "2044140",
    "end": "2050560"
  },
  {
    "text": "all our surface is actually an app right in a private setting so there elby's private facing and all our PK eyes is",
    "start": "2050560",
    "end": "2057460"
  },
  {
    "text": "managed by a hostile vault which we use actually as a service as well as a restful service or everything",
    "start": "2057460",
    "end": "2063700"
  },
  {
    "text": "everything in that cluster pretty much acts as a restful service so let me give",
    "start": "2063700",
    "end": "2068860"
  },
  {
    "text": "you an example of a surface we have and then go through that flow in a bit more concretely so we have a rate service",
    "start": "2068860",
    "end": "2077740"
  },
  {
    "text": "that literally allows you to retrieve rate that rate could come from a",
    "start": "2077740",
    "end": "2082929"
  },
  {
    "text": "database because we want it to be cash more indicative more efficient we want to minimize number hops or it could be",
    "start": "2082930",
    "end": "2090159"
  },
  {
    "text": "talking to internal system over a network and there in turn and as a business logic we want to apply some",
    "start": "2090160",
    "end": "2096370"
  },
  {
    "text": "apply some apply some logic in the business logic and then return back to the user so if you look at our if you",
    "start": "2096370",
    "end": "2103000"
  },
  {
    "text": "look at our our our flow basically a customer hits our website asking for rate it goes into CloudFront and then",
    "start": "2103000",
    "end": "2111460"
  },
  {
    "text": "that rather at that traffic into the public facing yell be to our nginx gateway and then that goes to the",
    "start": "2111460",
    "end": "2118510"
  },
  {
    "text": "private yell be off that particular surface and hits our hits our surface running a stalker or taco containers ezs",
    "start": "2118510",
    "end": "2125830"
  },
  {
    "text": "and then his talks to a third party of a third party as i said it could be it could be a database or it could be some",
    "start": "2125830",
    "end": "2132700"
  },
  {
    "text": "something within another part in another another system i'll solve in amazon and",
    "start": "2132700",
    "end": "2139150"
  },
  {
    "text": "that's it i've got a state thank you [Applause]",
    "start": "2139150",
    "end": "2149470"
  },
  {
    "text": "thank you thank you so much Peter um so a couple of housekeeping things and the",
    "start": "2149470",
    "end": "2155990"
  },
  {
    "text": "first one is what was what my kind of initial takeaway when I was working with my her services and I think that's what",
    "start": "2155990",
    "end": "2162020"
  },
  {
    "text": "I got from Peters too is that there's a deceptive amount of work that kind of goes into doing these and doing these",
    "start": "2162020",
    "end": "2167990"
  },
  {
    "text": "well so you have things like the 12 factor app that helps you kind of figure out okay well here are the things that I need to focus on but I think beyond that",
    "start": "2167990",
    "end": "2175840"
  },
  {
    "text": "there's a lot more pieces than a lot of people think and I've gotten some questions or people are like oh well I",
    "start": "2175840",
    "end": "2181010"
  },
  {
    "text": "had add my monolith and I put the whole thing in a container and now I hate it",
    "start": "2181010",
    "end": "2186680"
  },
  {
    "text": "so it doesn't work I'm not getting any benefits out of it and you're right if",
    "start": "2186680",
    "end": "2192290"
  },
  {
    "text": "you just take your monolith your existing code base and you shove it in a container and you say well this is it",
    "start": "2192290",
    "end": "2197870"
  },
  {
    "text": "you're probably not going to get a whole lot of benefits out of it so part of part of this part of this process so",
    "start": "2197870",
    "end": "2204020"
  },
  {
    "text": "part of moving from this model at the microservices and you get a lot of articles for people that are like oh well I did ECS in a weekend I set up",
    "start": "2204020",
    "end": "2211130"
  },
  {
    "text": "everything in a weekend and it's if you go from a totally Greenfield situation",
    "start": "2211130",
    "end": "2216230"
  },
  {
    "text": "right where you're setting up a whole new product to a whole new service a whole new company it can be really easy",
    "start": "2216230",
    "end": "2221290"
  },
  {
    "text": "it's a it's it's pretty natural there's a lot of resources out there to help you but beyond that that's not that's not",
    "start": "2221290",
    "end": "2227870"
  },
  {
    "text": "how everyone comes that's not where everyone comes from people are coming from existing apps are coming from extensive existing apps so part of that",
    "start": "2227870",
    "end": "2235850"
  },
  {
    "text": "is how can i how can I break down my monolith in a way that makes sense so how can I go from this one big piece to",
    "start": "2235850",
    "end": "2243110"
  },
  {
    "text": "all these little pieces in a way that they they speak to each other correctly they have the right service focus so how",
    "start": "2243110",
    "end": "2249350"
  },
  {
    "text": "do i how do I do that and I think it's I think it's really valuable to hear from people like Peter and from Travelex who have been able to",
    "start": "2249350",
    "end": "2255950"
  },
  {
    "text": "do this in real life with their real data and they're still taking money people take their money really seriously",
    "start": "2255950",
    "end": "2261910"
  },
  {
    "text": "so definitely a lot of work that goes into kind of keeping these things up and making them work really well I think",
    "start": "2261910",
    "end": "2269500"
  },
  {
    "text": "it's the same thing that I said about flexibility though right is that you should be able to kind of run things out of the box without thinking about it and",
    "start": "2269500",
    "end": "2275960"
  },
  {
    "text": "focus totally on your app but you should also have from what orchestration platform the choices to",
    "start": "2275960",
    "end": "2281720"
  },
  {
    "text": "kind of be flexible and extend your platform on top of that to make sure that UCS can run your workloads the way",
    "start": "2281720",
    "end": "2287960"
  },
  {
    "text": "that you want to run them couple housekeeping things one limited time for",
    "start": "2287960",
    "end": "2293420"
  },
  {
    "text": "questions because we're kind of switching things over to the next to the next speaker both Peter and I will be happy to kind",
    "start": "2293420",
    "end": "2299630"
  },
  {
    "text": "of hang out for a couple minutes afterwards during the break to answer any questions I did look at Twitter and",
    "start": "2299630",
    "end": "2306050"
  },
  {
    "text": "I guess Verna promised everyone that I would make a would tank joke so I don't have a wu-tang joke so so I solemnly",
    "start": "2306050",
    "end": "2314450"
  },
  {
    "text": "swear that I will tweet a wu-tang joke in the next hour but apparently I've set the bar for corny hiphop jokes too high",
    "start": "2314450",
    "end": "2320960"
  },
  {
    "text": "for myself that is all thank you so much there's a ton of resources online if you",
    "start": "2320960",
    "end": "2326060"
  },
  {
    "text": "want to look at some of these reference architectures so for those of you that were furiously taking pictures this",
    "start": "2326060",
    "end": "2331250"
  },
  {
    "text": "slides will be posted thank you very much [Applause]",
    "start": "2331250",
    "end": "2337260"
  }
]