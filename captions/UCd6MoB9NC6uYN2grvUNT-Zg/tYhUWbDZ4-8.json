[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "good afternoon everyone thank you for joining us at our first",
    "start": "1730",
    "end": "6810"
  },
  {
    "text": "ever reinforced conference I hope you've had an awesome two days learning all about AWS and about security in general",
    "start": "6810",
    "end": "13940"
  },
  {
    "text": "so in this session we don't talk about service security and server this is one",
    "start": "13940",
    "end": "19470"
  },
  {
    "text": "of the hottest innovations in the cloud today one of the most rapidly growing design patterns so we're gonna talk a",
    "start": "19470",
    "end": "24900"
  },
  {
    "text": "little bit about the strategies that you can use to help secure some of your enterprise-grade serverless apps so my",
    "start": "24900",
    "end": "32520"
  },
  {
    "text": "name is George and I'm a specialist Solutions Architect I focus on the server list portfolio at AWS and I'm",
    "start": "32520",
    "end": "40050"
  },
  {
    "text": "responsible for helping our customers build and operate server list applications on the platform in the past",
    "start": "40050",
    "end": "46829"
  },
  {
    "text": "five I was a software engineer and I spent a lot of time building web app web applications all of my contact",
    "start": "46829",
    "end": "52980"
  },
  {
    "text": "information is down below so feel free to reach out to us if you have any questions after today's talk so here's",
    "start": "52980",
    "end": "59129"
  },
  {
    "text": "our agenda for the next 45 minutes or so this is gonna be a fairly technical session we're not gonna do a lot of",
    "start": "59129",
    "end": "64320"
  },
  {
    "text": "introduction we're gonna go over some tips and strategies and there's best practices that you can put into use into",
    "start": "64320",
    "end": "71549"
  },
  {
    "text": "your applications today so at the very end we'll go over some common vulnerabilities and show you how this",
    "start": "71549",
    "end": "76890"
  },
  {
    "text": "will affect some of your applications that you're building so let's start with",
    "start": "76890",
    "end": "82830"
  },
  {
    "start": "80000",
    "end": "435000"
  },
  {
    "text": "basic security principles so the first principle that we have is related to",
    "start": "82830",
    "end": "89130"
  },
  {
    "text": "this so anybody ever done this before chmod 777 right I think I've done this",
    "start": "89130",
    "end": "94140"
  },
  {
    "text": "everybody's done this if you're not aware this is basically a Linux command that says give me any user any group",
    "start": "94140",
    "end": "101759"
  },
  {
    "text": "full read/write access to lis permissions to any file that that you set it on so this is not something that",
    "start": "101759",
    "end": "108600"
  },
  {
    "text": "you do typically would consider good security right the good news is that when you're building server list",
    "start": "108600",
    "end": "114780"
  },
  {
    "text": "applications you let AWS handle a lot of the hard details about servers and operating",
    "start": "114780",
    "end": "120450"
  },
  {
    "text": "systems and infrastructure so you typically don't have to worry too much about file systems and operating systems",
    "start": "120450",
    "end": "127500"
  },
  {
    "text": "and those kinds of those types of things so our first principle is least privileged",
    "start": "127500",
    "end": "133200"
  },
  {
    "text": "at least privilege says we should only grant those permissions that are essential to perform your task for your",
    "start": "133200",
    "end": "138959"
  },
  {
    "text": "operation so if we take a look at this example here on the Left I have an I am",
    "start": "138959",
    "end": "144060"
  },
  {
    "text": "policy that's allowing effect allow dynamodb : star so in effect this gives",
    "start": "144060",
    "end": "151560"
  },
  {
    "text": "any user permissions to perform any I am permission or action on a resource it's",
    "start": "151560",
    "end": "159209"
  },
  {
    "text": "also a wild card so this is basically an admin permission that allows me to do anything I want to any table in the",
    "start": "159209",
    "end": "166319"
  },
  {
    "text": "account so lease privilege what we want to do is scope or I am policies across",
    "start": "166319",
    "end": "172140"
  },
  {
    "text": "the board you should be scoping your policies down to only limiting the permissions that your your applications",
    "start": "172140",
    "end": "178230"
  },
  {
    "text": "need to perform so on the right here is a better policy this is scoped to allow a single DynamoDB permission so that",
    "start": "178230",
    "end": "184890"
  },
  {
    "text": "DynamoDB permission is put item and further it scopes it down to a single table and that table is called my",
    "start": "184890",
    "end": "191519"
  },
  {
    "text": "contacts table this is a really tight policy that doesn't affect other resources and other applications in your",
    "start": "191519",
    "end": "198060"
  },
  {
    "text": "environment so now our next principle is defense-in-depth so this principle",
    "start": "198060",
    "end": "204480"
  },
  {
    "text": "states that you should have defensive measures at every single point in your application and when we're back you know",
    "start": "204480",
    "end": "213120"
  },
  {
    "text": "a few years ago we were building large monolith applications but today most of our applications look more and more like",
    "start": "213120",
    "end": "218730"
  },
  {
    "text": "this so we have a lot of different components different microservices and every single piece needs to be protected",
    "start": "218730",
    "end": "224940"
  },
  {
    "text": "using a different type of security mechanism so if we take a look at this",
    "start": "224940",
    "end": "230810"
  },
  {
    "text": "defense-in-depth says ok if I'm building a web app I probably want to enable a service called",
    "start": "230810",
    "end": "236940"
  },
  {
    "text": "AWS Web Application Firewall for waffe to protect my front end right I want to",
    "start": "236940",
    "end": "242190"
  },
  {
    "text": "protect it from DDoS and all the different types of attacks and can come from the web once my user has made it",
    "start": "242190",
    "end": "247470"
  },
  {
    "text": "into my web application you should also look for building authentication on top",
    "start": "247470",
    "end": "252840"
  },
  {
    "text": "of your application and you can do this pretty easily with AWS kognito it's a security service that helps you",
    "start": "252840",
    "end": "258329"
  },
  {
    "text": "integrate authentication and security on top of your web applications once you're",
    "start": "258329",
    "end": "263370"
  },
  {
    "text": "into your application actually perform and compute on lamb I am takes over so I am is at the core",
    "start": "263370",
    "end": "269550"
  },
  {
    "text": "of land of security everything that your land of function can do and cannot do is defined in an iam policy and I am",
    "start": "269550",
    "end": "276270"
  },
  {
    "text": "resource that you attach to your land of function at the very back end all of your data needs to be protected so we",
    "start": "276270",
    "end": "282660"
  },
  {
    "text": "what we want to do is potentially use AWS kms which is the key management",
    "start": "282660",
    "end": "287790"
  },
  {
    "text": "service to encrypt decrypt and lock down all of our sensitive data so moving on",
    "start": "287790",
    "end": "295020"
  },
  {
    "text": "to our third security principle and this one's kind of cool this one is clean code so what I mean clean code that",
    "start": "295020",
    "end": "301440"
  },
  {
    "text": "means never store any secrets hard-coded in your application right so don't store",
    "start": "301440",
    "end": "306840"
  },
  {
    "text": "database secrets don't store I am keys and credentials in your application code it's bad for security but it's also bad",
    "start": "306840",
    "end": "313620"
  },
  {
    "text": "for CI CD because if you have to change those pieces of information you effectively have to deploy a new version",
    "start": "313620",
    "end": "319230"
  },
  {
    "text": "of your code so in the IAM world instead of storing hard-coded credentials make",
    "start": "319230",
    "end": "324780"
  },
  {
    "text": "assume role calls to get temporary credentials and those credentials only last for a certain amount of time so if",
    "start": "324780",
    "end": "330570"
  },
  {
    "text": "you lose those credentials they effectively go away and no longer it no longer work I should always store your database",
    "start": "330570",
    "end": "337260"
  },
  {
    "text": "usernames and passwords in an external file encrypted in an environment variable or take advantage of the AWS",
    "start": "337260",
    "end": "343860"
  },
  {
    "text": "secrets manager so the secrets manager is responsible for storing rotating encrypting and delivering secrets to",
    "start": "343860",
    "end": "351270"
  },
  {
    "text": "your your services that integrate with it so you no longer have to worry about all those details about protecting your",
    "start": "351270",
    "end": "357270"
  },
  {
    "text": "sensitive secrets now the second piece here is that we want to keep as",
    "start": "357270",
    "end": "362940"
  },
  {
    "text": "developers we want to keep our code as simple as possible so lambda functions should be as small as possible and we",
    "start": "362940",
    "end": "370050"
  },
  {
    "text": "want to group them based on the type of access they have so let's take a look at example of how that works in the real",
    "start": "370050",
    "end": "376200"
  },
  {
    "text": "world on the left here we have a lambda function that's basically a monolith",
    "start": "376200",
    "end": "382050"
  },
  {
    "text": "right it's this lambda function is intended to execute for any API call",
    "start": "382050",
    "end": "387960"
  },
  {
    "text": "made to it and the standard function is going to need permissions to write the two tables",
    "start": "387960",
    "end": "393570"
  },
  {
    "text": "customers and orders and also and also talk to an sqs Q so this lambda function",
    "start": "393570",
    "end": "399000"
  },
  {
    "text": "is gonna need a pretty for both set of I am statements in order to talk to this environment what we really should be doing is splitting this",
    "start": "399000",
    "end": "405780"
  },
  {
    "text": "land of function into three so on the right side each land the function has a single set of responsibilities and those",
    "start": "405780",
    "end": "412169"
  },
  {
    "text": "responsibilities are simply to talk to the resource that it cares about and maybe add or delete items within those",
    "start": "412169",
    "end": "418169"
  },
  {
    "text": "tables and then that bottom one is only working with an S qsq so this allows us to scale better it allows us to to make",
    "start": "418169",
    "end": "425220"
  },
  {
    "text": "our security policies a lot more granular and if we lose control of one of these functions it doesn't affect",
    "start": "425220",
    "end": "430830"
  },
  {
    "text": "anything happening in our other functions so now what we kind of covered",
    "start": "430830",
    "end": "437910"
  },
  {
    "start": "435000",
    "end": "890000"
  },
  {
    "text": "the basics let's move into some of the security patterns that you should be aware of in the serverless world so our",
    "start": "437910",
    "end": "445680"
  },
  {
    "text": "first pattern is web application vulnerabilities so there are all different types of vulnerabilities that",
    "start": "445680",
    "end": "451289"
  },
  {
    "text": "developers have to protect against and when we're building our surveillance applications we typically don't have to",
    "start": "451289",
    "end": "457560"
  },
  {
    "text": "worry about infrastructure security and hardware security and filesystem",
    "start": "457560",
    "end": "462599"
  },
  {
    "text": "security but we still have to worry about all the same security details that application developers have to protect",
    "start": "462599",
    "end": "468780"
  },
  {
    "text": "against and defend against on the web so an example of these would on the web you",
    "start": "468780",
    "end": "474539"
  },
  {
    "text": "have to worry about DDoS or cross-site scripting right and then when you actually get into your rest api's most",
    "start": "474539",
    "end": "482159"
  },
  {
    "text": "of us are making application calls rest calls against API is using javascript these days a lot of your single page web",
    "start": "482159",
    "end": "489449"
  },
  {
    "text": "apps using react j/s or angular all of those are making cross-domain calls so",
    "start": "489449",
    "end": "494760"
  },
  {
    "text": "we need to understand and have a good policy for how cores works so cross-origin resource sharing so",
    "start": "494760",
    "end": "501180"
  },
  {
    "text": "allowing or denying certain domains to access your api is securely and then",
    "start": "501180",
    "end": "506580"
  },
  {
    "text": "finally when you get into lambda we have to worry about sequel injection so there's a common misconception that just",
    "start": "506580",
    "end": "512700"
  },
  {
    "text": "because you're in a lambda managed service that sequel injection doesn't exist so we'll see a little bit later",
    "start": "512700",
    "end": "518430"
  },
  {
    "text": "how sequel injection is definitely an issue and how you can defend against that right and then obviously when we",
    "start": "518430",
    "end": "525450"
  },
  {
    "text": "get into our databases data loss is always a problem so we talked about using kms to protect our keys and making",
    "start": "525450",
    "end": "531209"
  },
  {
    "text": "sure all of our data is encrypted and all the sensitive information isn't accessible to any any standard user",
    "start": "531209",
    "end": "538470"
  },
  {
    "text": "right so the good news is that out of",
    "start": "538470",
    "end": "543480"
  },
  {
    "text": "the box AWS has a lot of services that can help you with this one of the really great services is the Application",
    "start": "543480",
    "end": "550020"
  },
  {
    "text": "Firewall so whack Application Firewall gives you the ability to control what traffic to allow or deny into your",
    "start": "550020",
    "end": "557730"
  },
  {
    "text": "application and the way you do that is creating an apple or an ACL and then an ACL can have as many rules as you want",
    "start": "557730",
    "end": "565080"
  },
  {
    "text": "on it so your rules effectively control what traffic you're going to allow or",
    "start": "565080",
    "end": "571830"
  },
  {
    "text": "deny into your system so let's kind of look at how that works so I've created in this example I've created a single",
    "start": "571830",
    "end": "579060"
  },
  {
    "text": "Apple it's called demo Akal and I have four rules set on it so all four of these rules have to match",
    "start": "579060",
    "end": "585150"
  },
  {
    "text": "and allow before my user is allowed to reach my application so the first rule",
    "start": "585150",
    "end": "590160"
  },
  {
    "text": "is titled us only so I'm gonna allow requests that are originating from a",
    "start": "590160",
    "end": "595650"
  },
  {
    "text": "u.s. IP address only because maybe I know my application is only meant for us-based users now this could be any",
    "start": "595650",
    "end": "601080"
  },
  {
    "text": "geography but in this example it's just us-based users I've added a second rule",
    "start": "601080",
    "end": "606210"
  },
  {
    "text": "that says don't allow cross-site scripting so laughs has built-in ability",
    "start": "606210",
    "end": "611670"
  },
  {
    "text": "to inspect all requests and determine whether or not there's cross-site scripting and other security",
    "start": "611670",
    "end": "617100"
  },
  {
    "text": "vulnerabilities in it but I'm specifically saying I want to block all requests that have cross-site scripting",
    "start": "617100",
    "end": "623070"
  },
  {
    "text": "detected by the web service and then the next rule that I've set up is that I",
    "start": "623070",
    "end": "628440"
  },
  {
    "text": "don't want to allow any requests that are bigger than one kilobyte in size because I know my application doesn't",
    "start": "628440",
    "end": "634260"
  },
  {
    "text": "work with with with requests that are that large right so you know obviously this one's gonna be customizable",
    "start": "634260",
    "end": "640440"
  },
  {
    "text": "depending on which what your application is doing but you can customize and have laughs inspect the size of the payload",
    "start": "640440",
    "end": "646800"
  },
  {
    "text": "and then block payloads that are too large because that's also a security problem right and then finally another",
    "start": "646800",
    "end": "653340"
  },
  {
    "text": "out-of-the-box thing that web can inspect is for sequel injection so it can look for common sequel injection",
    "start": "653340",
    "end": "660000"
  },
  {
    "text": "patterns and then automatically block those requests that are flowing to your web application and",
    "start": "660000",
    "end": "665180"
  },
  {
    "text": "on the right over here are all the different other things that lab can inspect for out of the box",
    "start": "665180",
    "end": "671470"
  },
  {
    "text": "so our second pattern is web authentication so most applications on",
    "start": "671470",
    "end": "678890"
  },
  {
    "text": "the web today have some portion of their application needs to be secured needs to perform login authentication and",
    "start": "678890",
    "end": "685670"
  },
  {
    "text": "authorization so there are many different options that you can choose from you can use I am FN ocation you can",
    "start": "685670",
    "end": "693020"
  },
  {
    "text": "use Cognito or we can use Open ID connect and Open ID Connect is probably the most common because it's the most",
    "start": "693020",
    "end": "698840"
  },
  {
    "text": "cross-platform these days so we're going to talk a little bit about open ID connect and focus in on how you should",
    "start": "698840",
    "end": "705230"
  },
  {
    "text": "use Open ID connect securely so Open ID Connect is essentially essentially works",
    "start": "705230",
    "end": "712970"
  },
  {
    "text": "when a user logs into an identity provider and I did and that identity provider if it's open ID Connect",
    "start": "712970",
    "end": "719480"
  },
  {
    "text": "compatible will return a JWT token or JSON web token and and you as an",
    "start": "719480",
    "end": "725420"
  },
  {
    "text": "application developer are responsible for grabbing that token saving that token and then passing along downstream",
    "start": "725420",
    "end": "732590"
  },
  {
    "text": "to any application you want the user to authenticate against so most most",
    "start": "732590",
    "end": "738170"
  },
  {
    "text": "developers tend to store this JSON web token or the JWT inside your secure",
    "start": "738170",
    "end": "743540"
  },
  {
    "text": "cookie or also potentially inside your browser local storage I encrypt them and put them in put in a secure in a secure",
    "start": "743540",
    "end": "750410"
  },
  {
    "text": "place so let's take a really quick look at how what a JSON web token looks like",
    "start": "750410",
    "end": "755720"
  },
  {
    "text": "so JDBC is a stealth contained stateless way to transmit identity information and",
    "start": "755720",
    "end": "761960"
  },
  {
    "text": "it's always made up of three pieces of information base64 encoded right the",
    "start": "761960",
    "end": "767120"
  },
  {
    "text": "first piece is the header and the header just defines the algorithm that is used to sign this token it's a very basic",
    "start": "767120",
    "end": "773270"
  },
  {
    "text": "information here the the main part of this token is gonna be the payload or",
    "start": "773270",
    "end": "778310"
  },
  {
    "text": "the second part so a payload contains all the claims all of the exploration data and all the information about who",
    "start": "778310",
    "end": "784910"
  },
  {
    "text": "this user is and what kind of access that person has and the final piece is just the signature of the token so what",
    "start": "784910",
    "end": "792650"
  },
  {
    "text": "I have this token as a user I'm responsible for delivering that token to any downstream application",
    "start": "792650",
    "end": "799370"
  },
  {
    "text": "that needs to access that I want to access so when I deliver that app that token to an downstream application that",
    "start": "799370",
    "end": "806450"
  },
  {
    "text": "application as a server is responsible for parsing out the token and verifying",
    "start": "806450",
    "end": "811670"
  },
  {
    "text": "all of the claims on it including the expiration date and whether or not this token is actually valid so this is a",
    "start": "811670",
    "end": "817820"
  },
  {
    "text": "typical open ID connect workflow so one",
    "start": "817820",
    "end": "825440"
  },
  {
    "text": "of the great things is that you can use this type of workflow integrate it out of the box with Amazon's",
    "start": "825440",
    "end": "831290"
  },
  {
    "text": "API gateway service so when you perform at login against Amazon API gateway API",
    "start": "831290",
    "end": "837320"
  },
  {
    "text": "gateway will automatically construct a context object so that context object can be accessed when you're doing your",
    "start": "837320",
    "end": "843470"
  },
  {
    "text": "transforms inside the API gateway so the dollar sign context object we",
    "start": "843470",
    "end": "848510"
  },
  {
    "text": "automatically populated with all of the identity information that API gateway received so this some of the examples",
    "start": "848510",
    "end": "855230"
  },
  {
    "text": "could be the account who's executing this API the IP address the username the",
    "start": "855230",
    "end": "860630"
  },
  {
    "text": "AWS organization that's trying to perform this eight API call and a lot of",
    "start": "860630",
    "end": "865910"
  },
  {
    "text": "different other sensitive information so as a downstream application my lambda",
    "start": "865910",
    "end": "870920"
  },
  {
    "text": "function can actually check this this context object and make sure that it has",
    "start": "870920",
    "end": "876140"
  },
  {
    "text": "the things that it needs in order for my application to return the correct details so you can perform really a",
    "start": "876140",
    "end": "881720"
  },
  {
    "text": "grunt fine grained access all the way down to your computer with this kind of setup here so let's move on to the next",
    "start": "881720",
    "end": "892160"
  },
  {
    "start": "890000",
    "end": "903000"
  },
  {
    "text": "section which is going to be a discussion on some of the tips and best",
    "start": "892160",
    "end": "897470"
  },
  {
    "text": "practices that you can use today in your applications so here is a template of an",
    "start": "897470",
    "end": "907550"
  },
  {
    "start": "903000",
    "end": "1158000"
  },
  {
    "text": "IM policy how many of you have written an ion policy before probably everyone right awesome so I am as you know is",
    "start": "907550",
    "end": "915020"
  },
  {
    "text": "that the core of serverless security it controls everything a lambda function can do and pretty much it also controls",
    "start": "915020",
    "end": "922370"
  },
  {
    "text": "who can invoke your api's who can access your dynamodb tables and all of your resources so here is a really basic i.m",
    "start": "922370",
    "end": "928910"
  },
  {
    "text": "policy the structure is is very simple and so I am pausing to always have an effect either allow or",
    "start": "928910",
    "end": "934930"
  },
  {
    "text": "deny then you have some kind of action and this action can be a list of API calls that you want you want to allow or",
    "start": "934930",
    "end": "942100"
  },
  {
    "text": "deny on and the very bottom you have a resource so a resource is that the VA ws resource that you're providing",
    "start": "942100",
    "end": "947980"
  },
  {
    "text": "permissions to so let's take a look at some special IAM tips that you may or",
    "start": "947980",
    "end": "955750"
  },
  {
    "text": "may not be aware of the first one is called IAM conditions so IAM conditions",
    "start": "955750",
    "end": "961390"
  },
  {
    "text": "is a special attribute on IM policies that evaluate dynamically at runtime so",
    "start": "961390",
    "end": "967600"
  },
  {
    "text": "when a user executes and signs their AWS request will at all run this conditions",
    "start": "967600",
    "end": "973930"
  },
  {
    "text": "attribute dynamically at runtime and then perform these conditions evaluations so here's an example where",
    "start": "973930",
    "end": "979930"
  },
  {
    "text": "I'm using the AWS source IP as a condition so this I am policy says I",
    "start": "979930",
    "end": "985660"
  },
  {
    "text": "want to allow to s3 API calls list bucket and get bucket but only if the",
    "start": "985660",
    "end": "991090"
  },
  {
    "text": "condition matches and that condition is the source IP has to originate from this IP block and I would probably put this",
    "start": "991090",
    "end": "998920"
  },
  {
    "text": "kind of permission in if I know that I have admin users that should only be running from a corporate network I",
    "start": "998920",
    "end": "1005310"
  },
  {
    "text": "probably don't want to allow random users from other other IP blocks to",
    "start": "1005310",
    "end": "1011550"
  },
  {
    "text": "execute these type of calls so we have a lot of different conditions attributes",
    "start": "1011550",
    "end": "1017400"
  },
  {
    "text": "that you can use and here's a good example of some of the more complex ones that are that are out-of-the-box but",
    "start": "1017400",
    "end": "1024689"
  },
  {
    "text": "very powerful so an example is current time so if you know that your admins only work during a specific time you",
    "start": "1024690",
    "end": "1031949"
  },
  {
    "text": "probably don't want to allow API calls to be made outside of a time so you can check current time to see if it's within",
    "start": "1031949",
    "end": "1037829"
  },
  {
    "text": "a certain window another really great one to look at is secure transport so",
    "start": "1037830",
    "end": "1043530"
  },
  {
    "text": "you can enforce that all calls made to your API is come over HTTP so you can say I don't want to allow any plain text",
    "start": "1043530",
    "end": "1050130"
  },
  {
    "text": "HTTP calls to invoke my API another one here is a user agent but you can check",
    "start": "1050130",
    "end": "1057300"
  },
  {
    "text": "to see if you know our users coming from a browser or from a mobile application be careful with this one because user",
    "start": "1057300",
    "end": "1062430"
  },
  {
    "text": "agents as you know can be easily tampered with and and changed based",
    "start": "1062430",
    "end": "1067679"
  },
  {
    "text": "right there and in your request another great one is the AWS principle org ID",
    "start": "1067679",
    "end": "1074210"
  },
  {
    "text": "has anybody used this tag before principle org ID cool we've got about a",
    "start": "1074210",
    "end": "1079500"
  },
  {
    "text": "handful so the principle org ID is interesting it says that whatever",
    "start": "1079500",
    "end": "1085980"
  },
  {
    "text": "organization I belong to I have to have this specific organization in my",
    "start": "1085980",
    "end": "1092460"
  },
  {
    "text": "hierarchy chain my count chain in order to be able to execute this call so if you're using AWS or words to manage one",
    "start": "1092460",
    "end": "1100080"
  },
  {
    "text": "parent account with multiple children and you want to have all of your permissions roll up to a single AWS",
    "start": "1100080",
    "end": "1106049"
  },
  {
    "text": "account you can use this conditions attribute to help you do that so let's",
    "start": "1106049",
    "end": "1111660"
  },
  {
    "text": "look and say take a look at something that's a little more complex with this conditions block I'm providing a single",
    "start": "1111660",
    "end": "1118110"
  },
  {
    "text": "allow statement that says AWS lambda invoke functions I'm going to allow a",
    "start": "1118110",
    "end": "1123840"
  },
  {
    "text": "user to invoke a specific function that's called out on the resource line but I have this this invocation has to",
    "start": "1123840",
    "end": "1131640"
  },
  {
    "text": "match to lease resource conditions at runtime so the first one is that principal org ID it has to be originated",
    "start": "1131640",
    "end": "1139620"
  },
  {
    "text": "from it's my specific organization and number two I have to come across using HTTP if both of these conditions don't",
    "start": "1139620",
    "end": "1146460"
  },
  {
    "text": "match I am will automatically decline and reject this request even if the user",
    "start": "1146460",
    "end": "1151919"
  },
  {
    "text": "has other permissions to do it so",
    "start": "1151919",
    "end": "1156559"
  },
  {
    "start": "1158000",
    "end": "1310000"
  },
  {
    "text": "who's written at lambeau function before great there's a lot of you guys awesome so Lando functions that the permissions",
    "start": "1159270",
    "end": "1166590"
  },
  {
    "text": "model has two models the first model is the execution role so lambda functions",
    "start": "1166590",
    "end": "1171690"
  },
  {
    "text": "always have an execution role that's attached to that function and that role defines everything a lambda function is",
    "start": "1171690",
    "end": "1178230"
  },
  {
    "text": "allowed to do or not allowed to do so let's take a look at an example of that policy so here's a policy an execution",
    "start": "1178230",
    "end": "1185909"
  },
  {
    "text": "policy that's attached to a lambda function and it provides at the top here",
    "start": "1185909",
    "end": "1190919"
  },
  {
    "text": "a single DynamoDB put item permission to a single table called test so if I were",
    "start": "1190919",
    "end": "1197250"
  },
  {
    "text": "to attach this function this this I M policy to my Landa function my lambda function can only do this API call even",
    "start": "1197250",
    "end": "1205500"
  },
  {
    "text": "if I had application code written to talk to other tables or s3 or other AWS resources this is the only permission",
    "start": "1205500",
    "end": "1212190"
  },
  {
    "text": "that my land of functions allowed to execute at the bottom here is a trust policy so this is the second piece of my",
    "start": "1212190",
    "end": "1218730"
  },
  {
    "text": "my execution role we have to have a trust policy on your role that allows the lambda service itself to assume the",
    "start": "1218730",
    "end": "1226679"
  },
  {
    "text": "role and execute the function on your behalf so without this role when that won't be able to execute your lambda",
    "start": "1226679",
    "end": "1232679"
  },
  {
    "text": "function now the second piece of the lambda security model is a resource",
    "start": "1232679",
    "end": "1238620"
  },
  {
    "text": "policy so a resource policy is kind of like the opposite of an execution role our resource policy says who is allowed",
    "start": "1238620",
    "end": "1246870"
  },
  {
    "text": "to invoke my lambda function which principle which user which account because you can share lambda functions",
    "start": "1246870",
    "end": "1252630"
  },
  {
    "text": "across accounts you can make them public if you wanted to so let's take a look at that real quick here's an example of a",
    "start": "1252630",
    "end": "1260940"
  },
  {
    "text": "resource policy that I've added to my lambda function and this resource policy it's a little bit long but if you look",
    "start": "1260940",
    "end": "1267270"
  },
  {
    "text": "in the statements section here it provides a single allow statement to a",
    "start": "1267270",
    "end": "1272940"
  },
  {
    "text": "service called a PID way right and that the API gateway has one permission on it",
    "start": "1272940",
    "end": "1279210"
  },
  {
    "text": "and the action is lambda invoke function so essentially what I'm doing is allowing my API gateway service to",
    "start": "1279210",
    "end": "1285570"
  },
  {
    "text": "invoke my lambda function because what I want to do is build a microt service that's hosted on API gateway and the can",
    "start": "1285570",
    "end": "1292380"
  },
  {
    "text": "to behind the scenes is driven by my lambda function so using this kind of policy resource policy you can easily",
    "start": "1292380",
    "end": "1298920"
  },
  {
    "text": "allow other services or users to invoke your lambda functions still subject to",
    "start": "1298920",
    "end": "1304740"
  },
  {
    "text": "that execution role that we looked at earlier so how many of you have used I",
    "start": "1304740",
    "end": "1313320"
  },
  {
    "start": "1310000",
    "end": "1598000"
  },
  {
    "text": "am past role before so this one's a little more complex I am past role",
    "start": "1313320",
    "end": "1321080"
  },
  {
    "text": "basically defines a permission that allows a user to assign an I am policy",
    "start": "1321080",
    "end": "1328410"
  },
  {
    "text": "to any resource so if you're an administrator you probably don't want to",
    "start": "1328410",
    "end": "1333720"
  },
  {
    "text": "allow developers to assign any random I am policy to a lambda function right so",
    "start": "1333720",
    "end": "1339300"
  },
  {
    "text": "you want to only allow specific permissions and specific policies to be assigned to lambda functions so you",
    "start": "1339300",
    "end": "1345810"
  },
  {
    "text": "don't want to allow you know wildcard permission to be set on a lambda function that goes into production instead you would use the I am pass role",
    "start": "1345810",
    "end": "1353850"
  },
  {
    "text": "permission to allow a specific user to pass roles or assign roles to specific",
    "start": "1353850",
    "end": "1360390"
  },
  {
    "text": "resources in AWS so here is an example where I'm allowing two roles to be to be",
    "start": "1360390",
    "end": "1366150"
  },
  {
    "text": "assigned to any lambda function so first one the role is called read from",
    "start": "1366150",
    "end": "1371490"
  },
  {
    "text": "contacts table the second one's a little more complex because I'm allowing any role that starts with lambda and then -",
    "start": "1371490",
    "end": "1377700"
  },
  {
    "text": "wildcard so any role that has a name that begins with lambda - my user can can assign so if you're building a",
    "start": "1377700",
    "end": "1384980"
  },
  {
    "text": "security model of managing applications it's a really great idea to create a",
    "start": "1384980",
    "end": "1391050"
  },
  {
    "text": "naming convention for your roles and then use this kind of strategy to determine who can assign which roles to",
    "start": "1391050",
    "end": "1397800"
  },
  {
    "text": "which land of functions or to which accounts right",
    "start": "1397800",
    "end": "1403010"
  },
  {
    "text": "all right so we talked about using I am to secure your applications we talked",
    "start": "1403460",
    "end": "1409049"
  },
  {
    "text": "about using pass roll to secure who can assign those I am rolls to specific",
    "start": "1409049",
    "end": "1414990"
  },
  {
    "text": "resources now let's talk about how to access databases securely this should be pretty familiar to anyone who's written",
    "start": "1414990",
    "end": "1421770"
  },
  {
    "text": "a a sequel statement before or command this specifically is written in note",
    "start": "1421770",
    "end": "1427649"
  },
  {
    "text": "nodejs but the code is pretty similar for for Java or Python right typical",
    "start": "1427649",
    "end": "1433830"
  },
  {
    "text": "database connection strings always have a username and a password and this is an example of my of a my sequel connection",
    "start": "1433830",
    "end": "1440669"
  },
  {
    "text": "string other databases are either more or less complex right and nodejs the",
    "start": "1440669",
    "end": "1445830"
  },
  {
    "text": "easiest way to connect to a database it's as specify the port specify the host and specify the username and",
    "start": "1445830",
    "end": "1452070"
  },
  {
    "text": "password if you put this into your application code it becomes hard coded and we talked about you know that being",
    "start": "1452070",
    "end": "1459000"
  },
  {
    "text": "hard to manage and also insecure so there are better ways to do this and",
    "start": "1459000",
    "end": "1464570"
  },
  {
    "text": "here's a list of how you should evaluate how to access secure database",
    "start": "1464570",
    "end": "1470580"
  },
  {
    "text": "credentials so number one we can hard code them we all know that we all know that's bad security practice so don't do",
    "start": "1470580",
    "end": "1476580"
  },
  {
    "text": "that number two is lambda function support environment variables so environment variables essentially aren't pieces of",
    "start": "1476580",
    "end": "1483419"
  },
  {
    "text": "your code they're injected into your application at runtime and Lamba",
    "start": "1483419",
    "end": "1488760"
  },
  {
    "text": "environment variables are integrated with kms out of the box so you can encrypt and protect your secrets you can",
    "start": "1488760",
    "end": "1494370"
  },
  {
    "text": "even change those secrets easily so it's really easy to manage your secrets that way",
    "start": "1494370",
    "end": "1499640"
  },
  {
    "text": "number three two and three are kind of very similar in terms of security posture you could externalize your",
    "start": "1499640",
    "end": "1507360"
  },
  {
    "text": "database secrets put them in a config file you know encrypt and decrypt them when you need to number four you know is is",
    "start": "1507360",
    "end": "1514950"
  },
  {
    "text": "to externalize into another data source that's not hard code hard coded so I",
    "start": "1514950",
    "end": "1520350"
  },
  {
    "text": "would take a look at dynamo DB as a really great environment for storing configuration for your lambda functions",
    "start": "1520350",
    "end": "1525799"
  },
  {
    "text": "dynamo DB supports encryption at rest and you can also encrypt these variables or these strings as you as you insert",
    "start": "1525799",
    "end": "1534000"
  },
  {
    "text": "them into your table secrets manager is fairly new service it has all of these",
    "start": "1534000",
    "end": "1539010"
  },
  {
    "text": "capabilities built out of the box including automatics secret rotation so if you have a corporate policies that",
    "start": "1539010",
    "end": "1545850"
  },
  {
    "text": "say secrets have to be rotated every 3060 days secrets manager can help you do that if",
    "start": "1545850",
    "end": "1552510"
  },
  {
    "text": "you're not aware you can use I am authentication against some flavors of",
    "start": "1552510",
    "end": "1557520"
  },
  {
    "text": "RDS so what that means is you never define hard coded users in your",
    "start": "1557520",
    "end": "1563250"
  },
  {
    "text": "databases you simply have I am users that are part of AWS and you use those users to access",
    "start": "1563250",
    "end": "1569159"
  },
  {
    "text": "your database your database environments so definitely take a look at how that works and also I would encourage you to",
    "start": "1569159",
    "end": "1576299"
  },
  {
    "text": "just enable SSL only across your databases only allow secure connections to your RDS instances and it really",
    "start": "1576299",
    "end": "1584700"
  },
  {
    "text": "there's no reason not to do it I think yet your code has to change a little bit you have to include a certificate file",
    "start": "1584700",
    "end": "1590100"
  },
  {
    "text": "that that we use to negotiate this via the secure Channel other than that it's pretty straightforward for most",
    "start": "1590100",
    "end": "1595799"
  },
  {
    "text": "programming languages okay so we talked about defending your applications but",
    "start": "1595799",
    "end": "1602010"
  },
  {
    "start": "1598000",
    "end": "1713000"
  },
  {
    "text": "auditing your applications is equally as important so AWS config is a service",
    "start": "1602010",
    "end": "1608580"
  },
  {
    "text": "that allows you to audit automatically track a time line of changes",
    "start": "1608580",
    "end": "1614720"
  },
  {
    "text": "configuration changes against any resource in your account so here's an",
    "start": "1614720",
    "end": "1620190"
  },
  {
    "text": "example where I've deployed an API gateway resource and a tegu is emitting",
    "start": "1620190",
    "end": "1625230"
  },
  {
    "text": "config changes to AWS config so as we can see here on May 17th at 1:41 p.m. I",
    "start": "1625230",
    "end": "1632850"
  },
  {
    "text": "made a configuration change on API gateway and this configuration changed specifically it was recorded by config",
    "start": "1632850",
    "end": "1639990"
  },
  {
    "text": "and it's telling me that I have disabled the API throttling on API gateway and",
    "start": "1639990",
    "end": "1646520"
  },
  {
    "text": "wow that in itself is not a security issue it's probably an issue that",
    "start": "1646520",
    "end": "1651750"
  },
  {
    "text": "somebody needs to look at because I probably don't want to disable throttling you need to have some kind of",
    "start": "1651750",
    "end": "1657030"
  },
  {
    "text": "throttling for my API calls so config can automatically track these changes and then trigger rules that you",
    "start": "1657030",
    "end": "1664200"
  },
  {
    "text": "can remediate so this rule can be simply just notifying someone but you could also trigger a land of funk",
    "start": "1664200",
    "end": "1669210"
  },
  {
    "text": "and that executes and then immediately puts this puts this configuration back in place so it's good for auditing and",
    "start": "1669210",
    "end": "1675899"
  },
  {
    "text": "remediation so if we look at a second example here maybe two minutes later at",
    "start": "1675899",
    "end": "1682380"
  },
  {
    "text": "1:43 I now went and disabled logging so this is a probably more of a security",
    "start": "1682380",
    "end": "1687630"
  },
  {
    "text": "issue and because I disabled logging configures tracking these changes and can automatically notify somebody an",
    "start": "1687630",
    "end": "1694950"
  },
  {
    "text": "administrator or perform some kind of action against against this change so I",
    "start": "1694950",
    "end": "1700289"
  },
  {
    "text": "highly encourage you to take a look at config use it to help meet your auditing",
    "start": "1700289",
    "end": "1705390"
  },
  {
    "text": "and compliance needs across your corporate in your corporate environments",
    "start": "1705390",
    "end": "1712010"
  },
  {
    "text": "all right so this is a common vulnerability section so let's take a",
    "start": "1712940",
    "end": "1720630"
  },
  {
    "start": "1713000",
    "end": "2221000"
  },
  {
    "text": "look at some of these but before we start please do not execute any of these examples on any system that you do not",
    "start": "1720630",
    "end": "1727350"
  },
  {
    "text": "own so this is kind of the fun part but you know please only run these on test",
    "start": "1727350",
    "end": "1732450"
  },
  {
    "text": "environments that that's you own right so the sequel injection has anybody had",
    "start": "1732450",
    "end": "1738120"
  },
  {
    "text": "the experience of working with a sequel injection cool is that fun it's probably",
    "start": "1738120",
    "end": "1743279"
  },
  {
    "text": "not so a sequel injection is actually one of the the top risks as identified",
    "start": "1743279",
    "end": "1750270"
  },
  {
    "text": "by OWASP for what web applications one of the top 10 so a sequel injection is",
    "start": "1750270",
    "end": "1756289"
  },
  {
    "text": "essentially when an attacker adds extra sequel to your code that your code",
    "start": "1756289",
    "end": "1762450"
  },
  {
    "text": "executes without you knowing it so here's an example where I have a select statement so select star from contacts",
    "start": "1762450",
    "end": "1769350"
  },
  {
    "text": "where email equals equals some value right ABC it at domain.com typically my",
    "start": "1769350",
    "end": "1776520"
  },
  {
    "text": "web app will construct my server-side code will construct the sequel query and accept that email address as the",
    "start": "1776520",
    "end": "1783899"
  },
  {
    "text": "parameter right does that make sense so once once this happens and it's hacker",
    "start": "1783899",
    "end": "1789330"
  },
  {
    "text": "could be smart and instead of passing in a valid email they could pass in",
    "start": "1789330",
    "end": "1795000"
  },
  {
    "text": "something like this ABC at domain.com tick mark semicolon drop table contacts",
    "start": "1795000",
    "end": "1801750"
  },
  {
    "text": "- - so there's two things to look at here the semicolon and a simple statement",
    "start": "1801750",
    "end": "1808740"
  },
  {
    "text": "says and the sepal statement a dash dash says comment out anything behind it so",
    "start": "1808740",
    "end": "1814110"
  },
  {
    "text": "when this gets assembled together by my code this is what it looks like select star from contacts where email equals",
    "start": "1814110",
    "end": "1822500"
  },
  {
    "text": "this this large string so if you read this carefully this is actually two",
    "start": "1822500",
    "end": "1828410"
  },
  {
    "text": "sequel statements first one is select all this information give me every",
    "start": "1828410",
    "end": "1833430"
  },
  {
    "text": "single contact or all columns from this contact where this contact has this email address but also just drop this",
    "start": "1833430",
    "end": "1840030"
  },
  {
    "text": "table so if you don't have your permissions set up properly and you're allowing this to happen you've just given every all information about this",
    "start": "1840030",
    "end": "1846840"
  },
  {
    "text": "contact to your attacker and lost your entire table so definitely keep this in",
    "start": "1846840",
    "end": "1852270"
  },
  {
    "text": "mind when you're building your applications and we'll show you how to protect against that but here's another example also sequel injection select",
    "start": "1852270",
    "end": "1859860"
  },
  {
    "text": "star from employees where the the pull the person's first name is some name right doesn't matter George",
    "start": "1859860",
    "end": "1865980"
  },
  {
    "text": "Alice instead if I as an attacker enter this as a string what do you think",
    "start": "1865980",
    "end": "1872760"
  },
  {
    "text": "happens tick mark or 1 equals 1 and I've assembled the tick marks in a very strategic order to make sure that it is",
    "start": "1872760",
    "end": "1880470"
  },
  {
    "text": "a valid sequel statement so read that carefully and this is what it it",
    "start": "1880470",
    "end": "1887070"
  },
  {
    "text": "assembles to so let's start from employees where first-name equals tick tick so just empty string or 1 equals 1 so",
    "start": "1887070",
    "end": "1894600"
  },
  {
    "text": "what is 1 equals 1 it's just true right so when a sequel statement executes like",
    "start": "1894600",
    "end": "1900600"
  },
  {
    "text": "this when something equals something or true sequel will just return every",
    "start": "1900600",
    "end": "1906240"
  },
  {
    "text": "single record that matches true so that's gonna be every record in the table so using this kind of attack and",
    "start": "1906240",
    "end": "1912870"
  },
  {
    "text": "it's hacker can grab every single piece of information from my table even if I have fine grained roll role based access",
    "start": "1912870",
    "end": "1919710"
  },
  {
    "text": "turned on right in my application code so here's an example where this works in",
    "start": "1919710",
    "end": "1925440"
  },
  {
    "text": "a lambda function so remember just because we're in server lists does not make us does not protect us from this",
    "start": "1925440",
    "end": "1932070"
  },
  {
    "text": "kind of attack so as you know lambda functions always require to you to have a single parameter that's",
    "start": "1932070",
    "end": "1939390"
  },
  {
    "text": "the event parameter and that event parameter contains information about why you're executing your lambda function and here is a sample of M parameter it's",
    "start": "1939390",
    "end": "1947010"
  },
  {
    "text": "got a couple attributes on it but I've defined an attribute first name that has that that attack string on it and down",
    "start": "1947010",
    "end": "1954090"
  },
  {
    "text": "below is standard J Sabha code that's going to execute a query same query we",
    "start": "1954090",
    "end": "1960540"
  },
  {
    "text": "saw earlier select star from employees where first-name equals the input when that happens this is the output that I",
    "start": "1960540",
    "end": "1968429"
  },
  {
    "text": "get from a lambda function so I'm getting every single record from the table even though it should have just",
    "start": "1968429",
    "end": "1974040"
  },
  {
    "text": "been any employees for the first name match of the of the parameter so keep in",
    "start": "1974040",
    "end": "1980130"
  },
  {
    "text": "mind that the same attacks that can occur in your traditional server based environment can occur in lambda today so",
    "start": "1980130",
    "end": "1988679"
  },
  {
    "text": "what that means is that input can come from anywhere that input could be of s3 file that you've just read in it could",
    "start": "1988679",
    "end": "1995610"
  },
  {
    "text": "be an API call that was invoked from API gateway so what we want to do when",
    "start": "1995610",
    "end": "2001160"
  },
  {
    "text": "you're building applications always use prepared or precompiled sequel statements and this is an example",
    "start": "2001160",
    "end": "2007429"
  },
  {
    "text": "written in Java but the same concept is usually is available for pretty much any",
    "start": "2007429",
    "end": "2012950"
  },
  {
    "text": "programming language out there the idea is that you want to come pre compile your sequel statements so that the",
    "start": "2012950",
    "end": "2019220"
  },
  {
    "text": "server knows it's only expect one single input and only and only that and it",
    "start": "2019220",
    "end": "2025669"
  },
  {
    "text": "won't execute any other sequel that isn't part of this compilation so here we're doing a prepared statement we're",
    "start": "2025669",
    "end": "2031640"
  },
  {
    "text": "gonna set a single variable variable as defined with the question mark and then we're gonna set that as a variable so",
    "start": "2031640",
    "end": "2039020"
  },
  {
    "text": "once you have this setup any attacker who tried tries to do the same thing it's gonna fail when they try to execute",
    "start": "2039020",
    "end": "2045110"
  },
  {
    "text": "that that statement all right so the",
    "start": "2045110",
    "end": "2050990"
  },
  {
    "text": "second most common risk to Web Apps today is cross-site scripting or",
    "start": "2050990",
    "end": "2056240"
  },
  {
    "text": "sometimes called XSS so cross-site scripting is when an attacker and",
    "start": "2056240",
    "end": "2061250"
  },
  {
    "text": "injects JavaScript into a website that a different users browser executes right",
    "start": "2061250",
    "end": "2068540"
  },
  {
    "text": "so as it I want to put some kind of malicious JavaScript code into the application",
    "start": "2068540",
    "end": "2074790"
  },
  {
    "text": "that gets read out and executed by one of you so here is a standard HTML image",
    "start": "2074790",
    "end": "2081929"
  },
  {
    "text": "tag right we've probably written hundreds of these right so image source equals image that",
    "start": "2081930",
    "end": "2087720"
  },
  {
    "text": "PNG so this is a very standard HTML it's gonna load an image this actually works you can say image source equals pound",
    "start": "2087720",
    "end": "2094710"
  },
  {
    "text": "sign onmouseover equals JavaScript colon alert document dot cookie so our",
    "start": "2094710",
    "end": "2101580"
  },
  {
    "text": "browsers will actually execute this call and then return the cookie that's",
    "start": "2101580",
    "end": "2107160"
  },
  {
    "text": "currently on your domain because your browser your browser allows you to read your own cookie right in the current",
    "start": "2107160",
    "end": "2112170"
  },
  {
    "text": "session and domain you're in so you can use something similar to this to perform an attack this works as well",
    "start": "2112170",
    "end": "2119430"
  },
  {
    "text": "if I ran a script block in my HTML code that runs some JavaScript to create a",
    "start": "2119430",
    "end": "2126300"
  },
  {
    "text": "new image on the fly so new image does source equals instead of putting a",
    "start": "2126300",
    "end": "2132390"
  },
  {
    "text": "hard-coded filename I put in an HTTP address so here is just HTTP one on one",
    "start": "2132390",
    "end": "2138990"
  },
  {
    "text": "to do two three four right this is going to tell your browser to make a get",
    "start": "2138990",
    "end": "2144750"
  },
  {
    "text": "request against the script that's right there so this is a server that eyes the",
    "start": "2144750",
    "end": "2150420"
  },
  {
    "text": "attacker own your browser has executed this and now just sent your cookie to me",
    "start": "2150420",
    "end": "2155670"
  },
  {
    "text": "so when I get your cookie I can take your cookie and that JWT token that might be in there and login to the",
    "start": "2155670",
    "end": "2161760"
  },
  {
    "text": "application as one of you so let's take a look at how this works",
    "start": "2161760",
    "end": "2167070"
  },
  {
    "text": "here's a Firebug trace of exactly what just happened on the Left here my browser has made a gtp request I can see",
    "start": "2167070",
    "end": "2174990"
  },
  {
    "text": "that it's insecure but as an application user right one of your customers this isn't gonna be visible to them they're",
    "start": "2174990",
    "end": "2181260"
  },
  {
    "text": "not going to have Firebug or inspector open they're not gonna see anything in their browser they're just gonna see",
    "start": "2181260",
    "end": "2186600"
  },
  {
    "text": "that their code your code worked fine on the right here we can see that my browser made that HTTP call all the way",
    "start": "2186600",
    "end": "2193200"
  },
  {
    "text": "out to you know that IP address and that I actually don't own that IP address so",
    "start": "2193200",
    "end": "2199329"
  },
  {
    "text": "it hit that steal your info that PHP script and just sent my cookie with a",
    "start": "2199329",
    "end": "2205809"
  },
  {
    "text": "name of my cookie has been stolen over to that that address this is a super simple code that can easily be put into",
    "start": "2205809",
    "end": "2213219"
  },
  {
    "text": "any browser and executed by and it you know by it put in by an attacker and executed by any browser so the major",
    "start": "2213219",
    "end": "2223899"
  },
  {
    "start": "2221000",
    "end": "2408000"
  },
  {
    "text": "concept to keep in mind here is that your application threat model is still",
    "start": "2223899",
    "end": "2229059"
  },
  {
    "text": "the same when you're building applications and server lists it doesn't mean that you no longer have to protect",
    "start": "2229059",
    "end": "2234130"
  },
  {
    "text": "yourself against these types of vulnerabilities and the only thing that changes is some of your approaches and",
    "start": "2234130",
    "end": "2240399"
  },
  {
    "text": "how you protect yourself and some of the tools that you might use so we looked at config for auditing right we looked at",
    "start": "2240399",
    "end": "2245649"
  },
  {
    "text": "iam protect for doing authorization and authentication so in summary take",
    "start": "2245649",
    "end": "2253149"
  },
  {
    "text": "advantage of all of the AWS security services out of the box make sure you're using laughs right enable it on cloud",
    "start": "2253149",
    "end": "2260109"
  },
  {
    "text": "front turn it on on your API gateway resources make sure you're using AWS config to audit your environments even",
    "start": "2260109",
    "end": "2267579"
  },
  {
    "text": "if you're not remediate inaud it and track that timeline of changes because it could be useful when you have a bug",
    "start": "2267579",
    "end": "2273880"
  },
  {
    "text": "you could go back and determine you know who made the change and when that change was made make sure you use I am properly",
    "start": "2273880",
    "end": "2280989"
  },
  {
    "text": "right scope your policies don't allow wildcards in your policies you should have some kind of automatic code",
    "start": "2280989",
    "end": "2286839"
  },
  {
    "text": "inspection on your policies that detects what wildcards and those are generally red flags for you know for your security",
    "start": "2286839",
    "end": "2294789"
  },
  {
    "text": "team and most importantly remember that HTTPS is not secure right it's a secure",
    "start": "2294789",
    "end": "2300519"
  },
  {
    "text": "channel for delivering information but it's as we just saw HTTPS is not secure",
    "start": "2300519",
    "end": "2306549"
  },
  {
    "text": "just because you have it turned on right your application still needs to validate user input it needs to encode all of",
    "start": "2306549",
    "end": "2313929"
  },
  {
    "text": "that javascript and in the in do into other formats and not accept those directly out of the box you should",
    "start": "2313929",
    "end": "2321399"
  },
  {
    "text": "always escape HTML and any one of your inputs and anyone who's working with",
    "start": "2321399",
    "end": "2328479"
  },
  {
    "text": "sequel should should look at sequel injection and always use precompile sequel I don't",
    "start": "2328479",
    "end": "2335120"
  },
  {
    "text": "use dynamics viewport that you construct on the fly right we see that we do that a lot I've done it before because it's",
    "start": "2335120",
    "end": "2341210"
  },
  {
    "text": "easy as a developer to get started but definitely take a take a code review and inspect and see how much of your",
    "start": "2341210",
    "end": "2347420"
  },
  {
    "text": "application talks to a relational data source and see if you have any of these these these dynamic sequel statements",
    "start": "2347420",
    "end": "2355940"
  },
  {
    "text": "written in your code and finally understand JWT a GWT is is one of the most common ways",
    "start": "2355940",
    "end": "2361700"
  },
  {
    "text": "of authorizing access to third-party services it's really scalable because",
    "start": "2361700",
    "end": "2367100"
  },
  {
    "text": "it's it's stateless but keep in mind that JWT needs to be authenticated you",
    "start": "2367100",
    "end": "2372530"
  },
  {
    "text": "have to validate the signature and you have to make sure that's not expired that's a big one JTP tokens always have",
    "start": "2372530",
    "end": "2378890"
  },
  {
    "text": "an expiration date and should you should never accept a token that that has lost the expiration date that's basically it",
    "start": "2378890",
    "end": "2387860"
  },
  {
    "text": "thank you so much for attending and the please reach out to us if you have any questions and I would encourage you to",
    "start": "2387860",
    "end": "2396530"
  },
  {
    "text": "please submit your feedback in our mobile app it really helps us shape the the next sessions and the next year that",
    "start": "2396530",
    "end": "2403310"
  },
  {
    "text": "of this conference thank you [Applause]",
    "start": "2403310",
    "end": "2410719"
  }
]