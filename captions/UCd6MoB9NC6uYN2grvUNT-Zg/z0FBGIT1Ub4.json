[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "good afternoon welcome to the network load-balancing deep type session I'm pretty basura Debra I run the load",
    "start": "149",
    "end": "7649"
  },
  {
    "text": "balancing team at AWS I have here with me Bryan McKinney head of operations at",
    "start": "7649",
    "end": "14130"
  },
  {
    "text": "lovely and Narayan nitrogen who is the principal product manager for the load balancing family a lot of things have",
    "start": "14130",
    "end": "21960"
  },
  {
    "text": "been happening in the load balancing team this year in addition to launching a new platform the network load balancer",
    "start": "21960",
    "end": "28830"
  },
  {
    "text": "as we go through this session hopefully you learn a little bit more about the load balancing in general and lot more",
    "start": "28830",
    "end": "36390"
  },
  {
    "text": "about the network load balancer so let's dive in what is elastic load balancing",
    "start": "36390",
    "end": "46550"
  },
  {
    "start": "43000",
    "end": "72000"
  },
  {
    "text": "elastic load balancing automatically distributes the incoming traffic across",
    "start": "46550",
    "end": "51780"
  },
  {
    "text": "multiple target groups such as ec2 instances containers and IP addresses as",
    "start": "51780",
    "end": "59070"
  },
  {
    "text": "of September this year we supported only containers and ec2 instances IPS target",
    "start": "59070",
    "end": "66180"
  },
  {
    "text": "is a new feature that we introduced in September we'll talk a lot more about it during the session now let's get into",
    "start": "66180",
    "end": "73500"
  },
  {
    "start": "72000",
    "end": "182000"
  },
  {
    "text": "advantages of elastic load balancing right so first elastic I mean all of us",
    "start": "73500",
    "end": "80159"
  },
  {
    "text": "love about love what we love about cloud is elastic what we mean by elastic is",
    "start": "80159",
    "end": "86430"
  },
  {
    "text": "your load balancer scales automatically if you create your own load balancer and",
    "start": "86430",
    "end": "92490"
  },
  {
    "text": "host it inside an ec2 instance you need to care for it you need to worry about",
    "start": "92490",
    "end": "97530"
  },
  {
    "text": "how to scale it worried about its availability with creating an elastic",
    "start": "97530",
    "end": "103320"
  },
  {
    "text": "load balancer all you have to do is register the targets with it we worry",
    "start": "103320",
    "end": "108360"
  },
  {
    "text": "about scaling the load balancer and also the backend targets through auto scaling groups for you next security very very",
    "start": "108360",
    "end": "116790"
  },
  {
    "text": "important we pay a lot of attention to security both your load balancer and the",
    "start": "116790",
    "end": "122909"
  },
  {
    "text": "applications running on your back-end targets are highly secure when you use elastic load balancing we use",
    "start": "122909",
    "end": "130110"
  },
  {
    "text": "best-in-class ciphers and protocols make sure you get the best security when",
    "start": "130110",
    "end": "135660"
  },
  {
    "text": "you're running on top fantastic load balancer next integration the elastic load",
    "start": "135660",
    "end": "142170"
  },
  {
    "text": "balancer family of load balancers are integrated with more than 14 other AWS",
    "start": "142170",
    "end": "148020"
  },
  {
    "text": "services whether it's DNS through route 53 cloud watch for your metrics auto",
    "start": "148020",
    "end": "154980"
  },
  {
    "text": "scaling groups for your back-end targets cloud formation were many many other",
    "start": "154980",
    "end": "161730"
  },
  {
    "text": "things AWS config cloud front Lord of lot of other services are integrated with a",
    "start": "161730",
    "end": "168060"
  },
  {
    "text": "Douglas elastic load balancing family last the cost running an elastic load",
    "start": "168060",
    "end": "174840"
  },
  {
    "text": "balancer is significantly cost effective then building your own load balancer and running inside an ec2 instance so now",
    "start": "174840",
    "end": "183420"
  },
  {
    "start": "182000",
    "end": "224000"
  },
  {
    "text": "let's get into how we all start building applications in the cloud I'm sure we",
    "start": "183420",
    "end": "188580"
  },
  {
    "text": "all start here we build our application get an ec2 instance host it inside the",
    "start": "188580",
    "end": "194640"
  },
  {
    "text": "instance may be a load a database next to it right and let's start showing the",
    "start": "194640",
    "end": "200400"
  },
  {
    "text": "application so let's think about how the scales if you have a sudden spike in",
    "start": "200400",
    "end": "206400"
  },
  {
    "text": "traffic is that instance that you've created able to deal with this scale what happens if the machine crashes what",
    "start": "206400",
    "end": "213720"
  },
  {
    "text": "happens if your web server freezes so these are the reasons that we don't recommend this architecture this is not",
    "start": "213720",
    "end": "220709"
  },
  {
    "text": "a best practice this is not what we recommend so this is what we recommend",
    "start": "220709",
    "end": "226370"
  },
  {
    "start": "224000",
    "end": "251000"
  },
  {
    "text": "your application has distributed over three ec2 instances behind the load",
    "start": "226370",
    "end": "232170"
  },
  {
    "text": "balancer even if one of these instances goes on your traffic is distributed the",
    "start": "232170",
    "end": "238709"
  },
  {
    "text": "rest of the two ec2 instances if you have to scale sudden spike in traffic",
    "start": "238709",
    "end": "244010"
  },
  {
    "text": "both the load balancer and the ec2 instances behind it are scale",
    "start": "244010",
    "end": "249090"
  },
  {
    "text": "dynamically with the introduction of application load balancer last year and",
    "start": "249090",
    "end": "256500"
  },
  {
    "start": "251000",
    "end": "346000"
  },
  {
    "text": "network load balancer this year it's becoming important for us to talk about the types of load balancers generally",
    "start": "256500",
    "end": "264300"
  },
  {
    "text": "there are two types of load balancers layers four and a layer seven so those",
    "start": "264300",
    "end": "270810"
  },
  {
    "text": "of you are familiar with the OSI model in the networking world that's where the name comes from a layer four load",
    "start": "270810",
    "end": "277860"
  },
  {
    "text": "balancer runs at the layer four of the OSI stack it is a TCP load balancer",
    "start": "277860",
    "end": "283550"
  },
  {
    "text": "connection-oriented the client connection comes in it is bound to a",
    "start": "283550",
    "end": "288900"
  },
  {
    "text": "server connection we don't do anything with the headers or the packets if you",
    "start": "288900",
    "end": "294240"
  },
  {
    "text": "want to preserve the source IP we do that or you can use the proxy protocol",
    "start": "294240",
    "end": "300450"
  },
  {
    "text": "that prevents the source IP the port the destination IP the destination port to",
    "start": "300450",
    "end": "307919"
  },
  {
    "text": "the response so we'll go into little bit more details about why you want these details in your header on the packets in",
    "start": "307919",
    "end": "314940"
  },
  {
    "text": "the during this session on the other side you have the application load",
    "start": "314940",
    "end": "319979"
  },
  {
    "text": "balancer or a layer seven load balancer dealing with HTTP and HTTPS HTTP",
    "start": "319979",
    "end": "326430"
  },
  {
    "text": "recommended way of doing this the connections are terminated on the load balancer and we reach the back end",
    "start": "326430",
    "end": "333720"
  },
  {
    "text": "through a pool of connections that we have headers are modified your client IP",
    "start": "333720",
    "end": "339510"
  },
  {
    "text": "is actually added to the x-forwarded-for header and sent it to your backends",
    "start": "339510",
    "end": "346729"
  },
  {
    "start": "346000",
    "end": "379000"
  },
  {
    "text": "so now we have a family of load balancers that we support so application",
    "start": "347210",
    "end": "353729"
  },
  {
    "text": "load balancer works with VP C's HTTP HTTP traffic network load balancer for",
    "start": "353729",
    "end": "360450"
  },
  {
    "text": "TCP load and if you still are in the classic network it's a classic Lord balancer",
    "start": "360450",
    "end": "366150"
  },
  {
    "text": "for early adopters thank you for being early adopters and using the classic but",
    "start": "366150",
    "end": "371970"
  },
  {
    "text": "we recommend you start looking at the application load balancer and the network load balancer going forward",
    "start": "371970",
    "end": "379160"
  },
  {
    "start": "379000",
    "end": "408000"
  },
  {
    "text": "let's talk about the network load balancer we launched the network load balancer on September 7th great adoption",
    "start": "379250",
    "end": "387360"
  },
  {
    "text": "great feedback so far the things that we hear about from customers is about extreme performance",
    "start": "387360",
    "end": "395639"
  },
  {
    "text": "extreme performance handling volatile traffic and the latency that that we",
    "start": "395639",
    "end": "401949"
  },
  {
    "text": "their network load balancer is able to deal with we'll go through some of these characterizations during this session so",
    "start": "401949",
    "end": "409300"
  },
  {
    "text": "let's look at the characteristics of different load balancer families that we have today so the application load",
    "start": "409300",
    "end": "415840"
  },
  {
    "text": "balancer like we talked about HTTP HTTP and HTTP to to the load balancer on the",
    "start": "415840",
    "end": "422830"
  },
  {
    "text": "network side it is a TCP and classic supports both L 4 and L 7",
    "start": "422830",
    "end": "428259"
  },
  {
    "text": "hence it supports your TCP and HTTP HTTP traffic SSL offloading supported both on",
    "start": "428259",
    "end": "435699"
  },
  {
    "text": "the application load balancer and the classic Lourdes balancer IP as a target",
    "start": "435699",
    "end": "440889"
  },
  {
    "text": "which I briefly introduced and we'll talk a lot more about is supported both on the application load balancer and the",
    "start": "440889",
    "end": "446800"
  },
  {
    "text": "network load balancer advanced routing features path based hosts face make",
    "start": "446800",
    "end": "452469"
  },
  {
    "text": "sense for an application layer hence supported on the application load balancer static IP switches again a new",
    "start": "452469",
    "end": "460060"
  },
  {
    "text": "feature that we introduced on the network load balancer by static IP we mean a single IP per availability zone",
    "start": "460060",
    "end": "467560"
  },
  {
    "text": "again we'll go into details of why having a single IP in a volatile traffic",
    "start": "467560",
    "end": "473949"
  },
  {
    "text": "mode is important and how you can use it for white listings in when using",
    "start": "473949",
    "end": "478960"
  },
  {
    "text": "different use cases WebSockets for full duplex traffic again supported both on",
    "start": "478960",
    "end": "486129"
  },
  {
    "text": "the application load balancer and network load balancer containers support both integrated with easiest and other",
    "start": "486129",
    "end": "494379"
  },
  {
    "text": "sorts of container technology like kubernetes Dockers whatever other container technologies supported both on",
    "start": "494379",
    "end": "501279"
  },
  {
    "text": "application load balancer and network load balancer if you see a pattern we",
    "start": "501279",
    "end": "506979"
  },
  {
    "text": "are spending all our features on application and network will continue to sustain the classic load balancers but",
    "start": "506979",
    "end": "514000"
  },
  {
    "text": "the feature growth is going to happen on the application and the network load balancers now let's get into some more",
    "start": "514000",
    "end": "523029"
  },
  {
    "start": "520000",
    "end": "571000"
  },
  {
    "text": "high-level features of the applicator the network load balancer like we talked about it's a connection",
    "start": "523029",
    "end": "529060"
  },
  {
    "text": "based load balancer currently we support TCP protocol high performance cold start",
    "start": "529060",
    "end": "535949"
  },
  {
    "text": "out-of-the-box it can handle millions of requests per second I'll walk you",
    "start": "535949",
    "end": "541329"
  },
  {
    "text": "through some of the tests that we did to show how it performs and are extremely volatile traffic patterns static IP",
    "start": "541329",
    "end": "548560"
  },
  {
    "text": "support again static IP is single IP poor availability zone as you scale your",
    "start": "548560",
    "end": "554910"
  },
  {
    "text": "IPs don't change you will have a single IP that you can whitelist using your firewalls and other devices sitting in",
    "start": "554910",
    "end": "562029"
  },
  {
    "text": "front of the load balancer we'll go through that detail use cases ideal again for applications with long-running",
    "start": "562029",
    "end": "568810"
  },
  {
    "text": "connections continuing extremely low latencies so microsecond latency is once",
    "start": "568810",
    "end": "578079"
  },
  {
    "start": "571000",
    "end": "667000"
  },
  {
    "text": "the connection is set up it's completely transparent it doesn't even feel like you're going through a load balancer",
    "start": "578079",
    "end": "584459"
  },
  {
    "text": "preservation of the source IP because it's a transparent pass-through load balancer we preserve your source IP will",
    "start": "584459",
    "end": "592390"
  },
  {
    "text": "walk through use cases on what you can do with the source IP that we preserved we use a simple flow hashing algorithm",
    "start": "592390",
    "end": "600010"
  },
  {
    "text": "for our flows for routing algorithm we use the fighter pole along with a",
    "start": "600010",
    "end": "606459"
  },
  {
    "text": "sequence number for this flow hashing with respect to api's as all of you know",
    "start": "606459",
    "end": "612279"
  },
  {
    "text": "when we introduce the application load balancer we introduce a new version of api's the same set of api is what we are",
    "start": "612279",
    "end": "620410"
  },
  {
    "text": "building a network load balancer on one other feature that you told us you love about application load balancer is",
    "start": "620410",
    "end": "627839"
  },
  {
    "text": "protection before you delete the application load balancer so we've carried on the same feature into the",
    "start": "627839",
    "end": "634390"
  },
  {
    "text": "network load balancer what we do here is we've seen customers call us saying I've",
    "start": "634390",
    "end": "640209"
  },
  {
    "text": "accidentally moved my load balancer can you retrieve it back for me we can do it in some",
    "start": "640209",
    "end": "645250"
  },
  {
    "text": "cases where we have not used that IP elsewhere but we can't guarantee that so",
    "start": "645250",
    "end": "652209"
  },
  {
    "text": "what we did was introduced a feature where we locked down we remind you twice before do you really want to remove your",
    "start": "652209",
    "end": "658450"
  },
  {
    "text": "load balancer so we carried on the same feature into the network load balancer",
    "start": "658450",
    "end": "664829"
  },
  {
    "start": "667000",
    "end": "726000"
  },
  {
    "text": "let me walk you through some of the performance benchmarks that we did on",
    "start": "667050",
    "end": "672070"
  },
  {
    "text": "the network load balancer we used standard open source benchmarking tools",
    "start": "672070",
    "end": "677230"
  },
  {
    "text": "to benchmark the throughput and the latency of the network load balancer so we used B's with machine guns and some",
    "start": "677230",
    "end": "684459"
  },
  {
    "text": "to actually measure the throughput and the latency of the network load balancer",
    "start": "684459",
    "end": "689589"
  },
  {
    "text": "let me walk you through the test setup that we had it this is a standard load",
    "start": "689589",
    "end": "696130"
  },
  {
    "text": "balancer installed in three availability zones in US u.s. East one for the client",
    "start": "696130",
    "end": "703209"
  },
  {
    "text": "side we use the Apache workbench 100 C for large instance types and on the",
    "start": "703209",
    "end": "711250"
  },
  {
    "text": "server side we had 75 C for 2x large each of them having thousand concurrent",
    "start": "711250",
    "end": "718420"
  },
  {
    "text": "connections all the server does is responds back with a static 1k page so",
    "start": "718420",
    "end": "727540"
  },
  {
    "start": "726000",
    "end": "828000"
  },
  {
    "text": "let's look at how the load balance of the font if you look at it out of the",
    "start": "727540",
    "end": "732790"
  },
  {
    "text": "box 1.5 million requests per second nothing cold start just plug it in",
    "start": "732790",
    "end": "739810"
  },
  {
    "text": "pumping traffic you get to 1.5 million requests per second this is cold start",
    "start": "739810",
    "end": "746620"
  },
  {
    "text": "but the same use case applies when you have a sudden spike in traffic if you",
    "start": "746620",
    "end": "751750"
  },
  {
    "text": "have a sudden spike in traffic all the way to 1.5 million requests per second the load balancer scales instantaneously",
    "start": "751750",
    "end": "760320"
  },
  {
    "text": "so this is how it deals with extremely volatile traffic patterns it continues",
    "start": "760320",
    "end": "766810"
  },
  {
    "text": "to scale up to three million records per second unfortunately at that point actually the",
    "start": "766810",
    "end": "773660"
  },
  {
    "text": "back end web servers got saturated the Lord balancer could still continue so we",
    "start": "773660",
    "end": "779690"
  },
  {
    "text": "had to step back add some more backends next next point where it's saturated as",
    "start": "779690",
    "end": "786800"
  },
  {
    "text": "a second saturation point you see so if I didn't have a back-end saturation",
    "start": "786800",
    "end": "793070"
  },
  {
    "text": "point the red arrow shows you how the load balancer can linearly scale to tens",
    "start": "793070",
    "end": "799730"
  },
  {
    "text": "of millions of requests per second so in it this is what we did with bees with",
    "start": "799730",
    "end": "805220"
  },
  {
    "text": "machine guns we did another test with Sun where we had 1.6 million requests",
    "start": "805220",
    "end": "810770"
  },
  {
    "text": "per second sustained over hours without any traffic drops so both ultra-low latency extremely",
    "start": "810770",
    "end": "819380"
  },
  {
    "text": "volatile traffic patterns cold start is what I want to leave you with on the",
    "start": "819380",
    "end": "825080"
  },
  {
    "text": "performance side of things so let's get into the API s-- and the modeling of how",
    "start": "825080",
    "end": "833330"
  },
  {
    "start": "828000",
    "end": "854000"
  },
  {
    "text": "you want to build applications on top of a network load balancer like I mentioned",
    "start": "833330",
    "end": "838520"
  },
  {
    "text": "before we continued the same api's that we introduced in the application load",
    "start": "838520",
    "end": "843860"
  },
  {
    "text": "balancer so the same api is are used in the network load balancer the same",
    "start": "843860",
    "end": "848870"
  },
  {
    "text": "resource types the listeners the target groups and targets yes we need a load",
    "start": "848870",
    "end": "856130"
  },
  {
    "start": "854000",
    "end": "887000"
  },
  {
    "text": "balancer we retain the load balancer so we start with attaching a listener to it",
    "start": "856130",
    "end": "863080"
  },
  {
    "text": "what is a listener a listener defines a port and a protocol in this case the",
    "start": "863080",
    "end": "869720"
  },
  {
    "text": "protocol is TCP and port of your choice should have at least one listener before",
    "start": "869720",
    "end": "875240"
  },
  {
    "text": "you start sending traffic through you have a load balancer you associated a",
    "start": "875240",
    "end": "880820"
  },
  {
    "text": "listener to it the Box line dotted boxes show us the target groups so what our",
    "start": "880820",
    "end": "888740"
  },
  {
    "start": "887000",
    "end": "918000"
  },
  {
    "text": "target groups target groups are actually logical grouping of targets the target",
    "start": "888740",
    "end": "894260"
  },
  {
    "text": "groups can exist independently of your load you create the target groups independently and once you create load",
    "start": "894260",
    "end": "902160"
  },
  {
    "text": "balancer you can associate the target groups to the load balancer each of these target groups can independently",
    "start": "902160",
    "end": "908370"
  },
  {
    "text": "scale using auto scaling groups and in case of network load balancer we support",
    "start": "908370",
    "end": "914910"
  },
  {
    "text": "up to 200 targets in each of these target groups so we have the load",
    "start": "914910",
    "end": "920370"
  },
  {
    "text": "balancer we have the listener we have the target groups and we configure the health checks on the target group we've",
    "start": "920370",
    "end": "927570"
  },
  {
    "text": "enhanced the health checks in the network load balancer we'll cover more about what those enhancements are during",
    "start": "927570",
    "end": "934140"
  },
  {
    "text": "the session let's get into the actual targets themselves we support ec2",
    "start": "934140",
    "end": "941040"
  },
  {
    "start": "935000",
    "end": "978000"
  },
  {
    "text": "instances containers and IP addresses as targets you can register multiple ports",
    "start": "941040",
    "end": "947850"
  },
  {
    "text": "of these targets and also you can register the same target across multiple",
    "start": "947850",
    "end": "952910"
  },
  {
    "text": "target groups giving you a lot of flexibility with this feature but we've seen very",
    "start": "952910",
    "end": "959040"
  },
  {
    "text": "interesting architectures by registering the targets across multiple target groups I would be careful there I would",
    "start": "959040",
    "end": "966000"
  },
  {
    "text": "think about maintainability and availability of your architectures before you register them across multiple",
    "start": "966000",
    "end": "971940"
  },
  {
    "text": "target groups IP addresses we'll talk a little bit more about how how the IP",
    "start": "971940",
    "end": "979260"
  },
  {
    "start": "978000",
    "end": "1018000"
  },
  {
    "text": "addresses as a target can be used we've launched this feature both on application load balancer and network",
    "start": "979260",
    "end": "986010"
  },
  {
    "text": "load balancer in September of this year with this now in addition to ec2",
    "start": "986010",
    "end": "991350"
  },
  {
    "text": "instances and containers you can register IP addresses as targets that IP",
    "start": "991350",
    "end": "997620"
  },
  {
    "text": "can be within your V PC cider range or it can be direct connected on an on-prem",
    "start": "997620",
    "end": "1005960"
  },
  {
    "text": "resource which allows you to actually add workloads that are sitting inside",
    "start": "1005960",
    "end": "1011290"
  },
  {
    "text": "your on-prem data centers into a load balancer we talked briefly about the",
    "start": "1011290",
    "end": "1020390"
  },
  {
    "text": "integration across multiple other AWS services with a network load balancer",
    "start": "1020390",
    "end": "1026660"
  },
  {
    "text": "easy as being one of them the network load balancer with a network load balancer you can actually",
    "start": "1026660",
    "end": "1033670"
  },
  {
    "text": "automatically register the tasks using the port dynamic port mapping feature of",
    "start": "1033670",
    "end": "1039860"
  },
  {
    "text": "the network load balancer in addition to supporting Amazon SES container",
    "start": "1039860",
    "end": "1045470"
  },
  {
    "text": "technology we support other technologies like kubernetes Daka swans Alexis and",
    "start": "1045470",
    "end": "1051800"
  },
  {
    "text": "any other container technology so now let's build up the whole thing we have",
    "start": "1051800",
    "end": "1057830"
  },
  {
    "text": "the network load balancer we have the listeners we have the target groups and the target themselves can be easy two",
    "start": "1057830",
    "end": "1065330"
  },
  {
    "text": "instances IP addresses and containers and then you have the health checks",
    "start": "1065330",
    "end": "1070660"
  },
  {
    "text": "health checks associated with with the different target groups that we created",
    "start": "1070660",
    "end": "1077230"
  },
  {
    "start": "1077000",
    "end": "1087000"
  },
  {
    "text": "with this let me hand it over to Narayan will walk us through the detail features",
    "start": "1077350",
    "end": "1083180"
  },
  {
    "text": "of the network load balancer thank you pretty ba now that you have looked at",
    "start": "1083180",
    "end": "1089330"
  },
  {
    "text": "the various performance characteristics of the network load balancer and you also looked at the various resources",
    "start": "1089330",
    "end": "1095060"
  },
  {
    "text": "available on the NLB let's take a look at some of the other key features so the",
    "start": "1095060",
    "end": "1100670"
  },
  {
    "start": "1099000",
    "end": "1158000"
  },
  {
    "text": "first one I want to do a little detail into is the static IP feature that NLB offers with NLB you get a single IP",
    "start": "1100670",
    "end": "1108910"
  },
  {
    "text": "availability zone when you create the NLB along with that if you do not want",
    "start": "1108910",
    "end": "1114320"
  },
  {
    "text": "this IP to change for the life of the load balancer you can also pick your own IP from your own a IP pool and assign",
    "start": "1114320",
    "end": "1122090"
  },
  {
    "text": "that to the NLB as well if for some reason the NLB gets deleted that AI p",
    "start": "1122090",
    "end": "1127670"
  },
  {
    "text": "gets added back to your own e IP pool again so there are many use cases that static IP feature unblocks",
    "start": "1127670",
    "end": "1134960"
  },
  {
    "text": "the most common use case is died of firewalling where you want a whitelist a particular IP within your firewall there",
    "start": "1134960",
    "end": "1142550"
  },
  {
    "text": "are many other use cases some of the others being $0 billing with certain mobile carriers where they want to zero",
    "start": "1142550",
    "end": "1148910"
  },
  {
    "text": "out the bill regarding some gaming applications right so that's another potential use case where static IP",
    "start": "1148910",
    "end": "1155600"
  },
  {
    "text": "feature blocks here is an example where you could actually go",
    "start": "1155600",
    "end": "1161340"
  },
  {
    "text": "and assign an EIP from your own a IP pool one per availability zone to the",
    "start": "1161340",
    "end": "1167159"
  },
  {
    "text": "network load balancer the next big feature I wanted to talk about is the",
    "start": "1167159",
    "end": "1172590"
  },
  {
    "start": "1169000",
    "end": "1278000"
  },
  {
    "text": "preservation of source IP again because NLB does not terminate the connection on",
    "start": "1172590",
    "end": "1177899"
  },
  {
    "text": "the load balancer itself it's a pass-through it's able to preserve the source IP all the way to your back-end",
    "start": "1177899",
    "end": "1183870"
  },
  {
    "text": "in the past when you had used the classic load balancer because the classic load balancer terminated the",
    "start": "1183870",
    "end": "1190230"
  },
  {
    "text": "connection this source IP was not preserved all the way to your back-end now with this feature available on NLB",
    "start": "1190230",
    "end": "1197369"
  },
  {
    "text": "with instances you could now set up these IPS to be used for further processing either for logging purposes",
    "start": "1197369",
    "end": "1203940"
  },
  {
    "text": "or if you want to take actions based on those particular IPS the other important",
    "start": "1203940",
    "end": "1209669"
  },
  {
    "text": "use case that this unblocks is the set up of security groups because the client",
    "start": "1209669",
    "end": "1214830"
  },
  {
    "text": "IP is are passed on to the backends you could now set up security groups on your back-end targets thereby you can allow",
    "start": "1214830",
    "end": "1222149"
  },
  {
    "text": "access only to certain side of blocks the one particular call-out in this case",
    "start": "1222149",
    "end": "1228090"
  },
  {
    "text": "is that the preservation of source IP works only when you have instances load-balanced behind the NLB if you have",
    "start": "1228090",
    "end": "1235200"
  },
  {
    "text": "IP addresses that you are trying to load balance the source IP is not preserved",
    "start": "1235200",
    "end": "1240240"
  },
  {
    "text": "all the way to your back end because the IPS could reside outside the VPC for",
    "start": "1240240",
    "end": "1245759"
  },
  {
    "text": "that we recently launched another feature called as proxy protocol v2 and",
    "start": "1245759",
    "end": "1251190"
  },
  {
    "text": "what proxy protocol v2 does is in the header information it passes on all your",
    "start": "1251190",
    "end": "1256379"
  },
  {
    "text": "connection IPS both for the source IPS and the destination IPS are passed on to",
    "start": "1256379",
    "end": "1261779"
  },
  {
    "text": "your back-end applications that you can then use for either IP blocking or if",
    "start": "1261779",
    "end": "1266879"
  },
  {
    "text": "you want to do any other filtering or logging you could just use proxy protocol v2 and do that when you have IP",
    "start": "1266879",
    "end": "1273360"
  },
  {
    "text": "addresses being load balanced by the network load balancer next let's take a",
    "start": "1273360",
    "end": "1279029"
  },
  {
    "start": "1278000",
    "end": "1407000"
  },
  {
    "text": "look at a real life example here where you have a firewall so what you're seeing out here is an external Network",
    "start": "1279029",
    "end": "1286440"
  },
  {
    "text": "load balancer that is fronting a firewall and then you have an internal network load balance",
    "start": "1286440",
    "end": "1291810"
  },
  {
    "text": "that is fronting a set of web servers with the external NLB as we spoke about",
    "start": "1291810",
    "end": "1297450"
  },
  {
    "text": "because it supports the static IP feature you now have less number of IPs",
    "start": "1297450",
    "end": "1302790"
  },
  {
    "text": "to manage which means you can go in and white list those IPs with your firewalls or proxies that are behind the NLB the",
    "start": "1302790",
    "end": "1310500"
  },
  {
    "text": "next thing is that because the external NLB preserves the source IP those IPS",
    "start": "1310500",
    "end": "1315540"
  },
  {
    "text": "can be passed on to the firewall layer which can do things like geo IP blocking next we talk about the internal network",
    "start": "1315540",
    "end": "1323070"
  },
  {
    "text": "load balancer because the internal network load balancer also supports static IP feature you could now use that",
    "start": "1323070",
    "end": "1330000"
  },
  {
    "text": "for firewalls or you might have laughs or you could have other proxies that",
    "start": "1330000",
    "end": "1335100"
  },
  {
    "text": "need to NAT the traffic they could now use a single IP in their NAT state tables and which is again super helpful",
    "start": "1335100",
    "end": "1342060"
  },
  {
    "text": "for this kind of an architecture the other key thing that you need to remember is that firewalls in this",
    "start": "1342060",
    "end": "1348810"
  },
  {
    "text": "example are placed in auto-scaling groups and the reason you know they could scale is because they are fronting",
    "start": "1348810",
    "end": "1354930"
  },
  {
    "text": "based on a single IP which reduces of the operational in that that you need to",
    "start": "1354930",
    "end": "1360480"
  },
  {
    "text": "deal with with this kind of architectures this is just one example where you know these features of static",
    "start": "1360480",
    "end": "1367020"
  },
  {
    "text": "IP and preserve source IP are useful we have many more examples you know another example that comes to mind is real-time",
    "start": "1367020",
    "end": "1374010"
  },
  {
    "text": "bidding platforms you know in the attic space if you take a look at how network load balancer is because of its ability",
    "start": "1374010",
    "end": "1380700"
  },
  {
    "text": "to scale to volatile traffic patterns it's extremely useful when you take a look at with real-time bidding platforms",
    "start": "1380700",
    "end": "1387600"
  },
  {
    "text": "and with such ultra-low latency it becomes a perfect product when it comes to attic platforms also along with that",
    "start": "1387600",
    "end": "1394620"
  },
  {
    "text": "when you couple the static IP feature now there is less amount of churn in terms of IP addresses with DNS and the",
    "start": "1394620",
    "end": "1401400"
  },
  {
    "text": "bidder can directly get to this platform without any issues next we're going to",
    "start": "1401400",
    "end": "1408870"
  },
  {
    "start": "1407000",
    "end": "1433000"
  },
  {
    "text": "cover health checks so with health checks again you know this is a very important feature especially given that",
    "start": "1408870",
    "end": "1414750"
  },
  {
    "text": "you want to move a traffic from unhealthy instances this is extremely important for the",
    "start": "1414750",
    "end": "1420590"
  },
  {
    "text": "ability of your applications and also to ensure very good customer experience in terms of your applications because you",
    "start": "1420590",
    "end": "1427700"
  },
  {
    "text": "want to ensure that only healthy backends are serving traffic to your customers so let's take a look at the",
    "start": "1427700",
    "end": "1435380"
  },
  {
    "start": "1433000",
    "end": "1507000"
  },
  {
    "text": "health checks that are supported on the network load balancer so network load balancer supports both network health",
    "start": "1435380",
    "end": "1441890"
  },
  {
    "text": "checks and application health checks so with network health checks we are able to move away traffic from",
    "start": "1441890",
    "end": "1448190"
  },
  {
    "text": "unresponsive targets in a span of milliseconds thus if you are very fast failover",
    "start": "1448190",
    "end": "1453799"
  },
  {
    "text": "oriented applications these health checks prove to be very useful the way the network health checks works is it",
    "start": "1453799",
    "end": "1460190"
  },
  {
    "text": "looks for the normal pattern of your back-end targets to normal traffic and if your back-end targets are very slow",
    "start": "1460190",
    "end": "1467090"
  },
  {
    "text": "to respond to the traffic or they do not respond at all it just fails away traffic from those backends in",
    "start": "1467090",
    "end": "1472880"
  },
  {
    "text": "milliseconds also what you have is application health checks where you have",
    "start": "1472880",
    "end": "1478490"
  },
  {
    "text": "control in terms of determining whether these are HTTP health checks you can set them up for HTTP hell checks or TCP",
    "start": "1478490",
    "end": "1485929"
  },
  {
    "text": "health checks you can set up the frequency of these health checks and also determine the failure thresholds",
    "start": "1485929",
    "end": "1491899"
  },
  {
    "text": "that you want to define for a particular health check to fail also by probing a",
    "start": "1491899",
    "end": "1497750"
  },
  {
    "text": "particular URL on the target you're pretty much taking the health of the application and building that into the",
    "start": "1497750",
    "end": "1504049"
  },
  {
    "text": "load balancer as well so health checks is you know one such awesome feature",
    "start": "1504049",
    "end": "1510380"
  },
  {
    "start": "1507000",
    "end": "1593000"
  },
  {
    "text": "that allows you to provide a great experience to your customers by ensuring that only healthy back and serve them",
    "start": "1510380",
    "end": "1516649"
  },
  {
    "text": "traffic NLB actually allows you to mitigate these failures right so we have",
    "start": "1516649",
    "end": "1522020"
  },
  {
    "text": "a command called as describe target health that you can use to determine the health of your target that is are",
    "start": "1522020",
    "end": "1528200"
  },
  {
    "text": "present within the target groups so let's take a look at this particular example here you have three ec2",
    "start": "1528200",
    "end": "1533899"
  },
  {
    "text": "instances that are behind the network load balancer at this point if one of",
    "start": "1533899",
    "end": "1539840"
  },
  {
    "text": "the instances or one of the machines starts going bad the health check that you just configured to be sent to your",
    "start": "1539840",
    "end": "1546260"
  },
  {
    "text": "back-end starts returning a failed status code back to the NLB at that",
    "start": "1546260",
    "end": "1551899"
  },
  {
    "text": "point we'll stop sending traffic to that particular back-end target or the back-end application that you have and",
    "start": "1551899",
    "end": "1558419"
  },
  {
    "text": "then distribute the traffic evenly among the two other healthy backends that you",
    "start": "1558419",
    "end": "1563640"
  },
  {
    "text": "have on the NLB at this point if you had the describe target health command that",
    "start": "1563640",
    "end": "1568770"
  },
  {
    "text": "is actually going to identify the issue for you and you can go fix the issue and at that point your back-end target comes",
    "start": "1568770",
    "end": "1576090"
  },
  {
    "text": "back into the equation and now NLB will get a status code of a pass and it is",
    "start": "1576090",
    "end": "1582630"
  },
  {
    "text": "going to start sending traffic back to that back-end and now the load is evenly distributed among the three backends",
    "start": "1582630",
    "end": "1589559"
  },
  {
    "text": "that are behind the NLB the other thing",
    "start": "1589559",
    "end": "1595020"
  },
  {
    "start": "1593000",
    "end": "1644000"
  },
  {
    "text": "that health checks allows you to do is it gives you control in terms of the successful response codes you can set it",
    "start": "1595020",
    "end": "1601770"
  },
  {
    "text": "up anywhere from 200 to 300 and 99 also what we provide you is something called",
    "start": "1601770",
    "end": "1608010"
  },
  {
    "text": "as reason codes which are available within both the NLP control plane API and these are also available within the",
    "start": "1608010",
    "end": "1615600"
  },
  {
    "text": "cloud watch metrics related to the target health you can go in here and you can get the reason code descriptions of",
    "start": "1615600",
    "end": "1622500"
  },
  {
    "text": "why a particular health check actually failed these include states such as the target",
    "start": "1622500",
    "end": "1628260"
  },
  {
    "text": "was initialized or the target is terminated or it can give you a message that says that there was a mismatch with",
    "start": "1628260",
    "end": "1634289"
  },
  {
    "text": "your response code and it will give you an actual error code message that exactly defines why your health check",
    "start": "1634289",
    "end": "1640679"
  },
  {
    "text": "actually failed now let's take a look at",
    "start": "1640679",
    "end": "1646559"
  },
  {
    "start": "1644000",
    "end": "1719000"
  },
  {
    "text": "the availability zone failover right so here is an example where what we have is to the NLP in to availability",
    "start": "1646559",
    "end": "1654210"
  },
  {
    "text": "zones which means it's got two static IP addresses that have been assigned to that NL be the route 53 on the top left",
    "start": "1654210",
    "end": "1661590"
  },
  {
    "text": "corner is resolving the dns name of the NLB to those two IP addresses now if for",
    "start": "1661590",
    "end": "1668820"
  },
  {
    "text": "some reason the backends in one particular zone go unhealthy or",
    "start": "1668820",
    "end": "1674659"
  },
  {
    "text": "something goes wrong with that one particular availability zone what happens is that route 53 will",
    "start": "1674659",
    "end": "1680520"
  },
  {
    "text": "automatically now return you back the IP address of the NLB in availability zone that is healthy right",
    "start": "1680520",
    "end": "1686919"
  },
  {
    "text": "so in this example as you can see in us rest 1b we have no healthy backends and",
    "start": "1686919",
    "end": "1692859"
  },
  {
    "text": "automatically route 53 is now returning back only the IP address of the NLB in",
    "start": "1692859",
    "end": "1698499"
  },
  {
    "text": "u.s. west 1a which means every subsequent connection that is going to come in at that point is now going to be",
    "start": "1698499",
    "end": "1705549"
  },
  {
    "text": "routed only to the healthy availability zones so thus you know with route 53 and NLB we are able to provide an easy DNS",
    "start": "1705549",
    "end": "1713320"
  },
  {
    "text": "failover even in the event of an availability zone having an issue the",
    "start": "1713320",
    "end": "1720669"
  },
  {
    "start": "1719000",
    "end": "1769000"
  },
  {
    "text": "next thing that Pratibha had spoken about is one of our core tenets around ensuring that we are integrated with the",
    "start": "1720669",
    "end": "1726609"
  },
  {
    "text": "rest of the AWS ecosystem with NLB as well we are very closely integrated with",
    "start": "1726609",
    "end": "1732070"
  },
  {
    "text": "a bunch of AWS services first thing being auto-scaling integration with auto",
    "start": "1732070",
    "end": "1737559"
  },
  {
    "text": "scaling you can set up auto scaling within your target groups and this ensures that you can scale your",
    "start": "1737559",
    "end": "1742960"
  },
  {
    "text": "applications independently in addition we are also integrated with AWS CloudFormation we are integrated with",
    "start": "1742960",
    "end": "1750039"
  },
  {
    "text": "AWS code deploy and with AWS config also we are very closely integrated with the",
    "start": "1750039",
    "end": "1756969"
  },
  {
    "text": "Amazon container service with ECS where you can use dynamic port mapping along",
    "start": "1756969",
    "end": "1762339"
  },
  {
    "text": "with your tasks and containers and they are very well integrated with the NLB fronting those applications the other",
    "start": "1762339",
    "end": "1771009"
  },
  {
    "start": "1769000",
    "end": "1800000"
  },
  {
    "text": "integration point for us is the Amazon CloudWatch metrics so ELB with elastic",
    "start": "1771009",
    "end": "1776049"
  },
  {
    "text": "load balancing we publish a whole bunch of metrics into cloud watch and the same thing is true with network load balancer",
    "start": "1776049",
    "end": "1782349"
  },
  {
    "text": "as well we publish one minute granularity metrics into cloud watch and this includes metrics for traffic and",
    "start": "1782349",
    "end": "1789309"
  },
  {
    "text": "capacity we send you metrics related to the backend health and also the reset",
    "start": "1789309",
    "end": "1794679"
  },
  {
    "text": "error counts are all metrics that are published into cloud watch let's take a",
    "start": "1794679",
    "end": "1801099"
  },
  {
    "text": "closer look at each of these metrics so you have the traffic and capacity metrics where we publish the active flow",
    "start": "1801099",
    "end": "1807789"
  },
  {
    "text": "count which includes the flows that are successfully made from your client to",
    "start": "1807789",
    "end": "1812859"
  },
  {
    "text": "your targets and because NLB does not terminate connections any of these",
    "start": "1812859",
    "end": "1818250"
  },
  {
    "text": "just for connections from your client to the targets and actually made part of the active flow count in addition we",
    "start": "1818250",
    "end": "1824340"
  },
  {
    "text": "also published the new flow count which is the total number of new floors established from the clients to the",
    "start": "1824340",
    "end": "1829980"
  },
  {
    "text": "targets and also processed bytes which are the total number of bytes that are",
    "start": "1829980",
    "end": "1835140"
  },
  {
    "text": "processed by the network load balancer and this also will include the tcp/ip headers that are passed as bytes into",
    "start": "1835140",
    "end": "1842190"
  },
  {
    "text": "the true the network load balancer the next thing we should take a look at is",
    "start": "1842190",
    "end": "1847320"
  },
  {
    "start": "1845000",
    "end": "1878000"
  },
  {
    "text": "reset counts here we publish your TCP client reset count your TCP target reset",
    "start": "1847320",
    "end": "1853230"
  },
  {
    "text": "count and each of these cases the load balancer simply passes on these resets",
    "start": "1853230",
    "end": "1859440"
  },
  {
    "text": "from the client to the target or the target back to the client and then we also publish what we call as the TCP ELB",
    "start": "1859440",
    "end": "1865980"
  },
  {
    "text": "reset counts which is anytime there are the reset packets are generated by the EOB or by the NLB in this particular case we",
    "start": "1865980",
    "end": "1873120"
  },
  {
    "text": "would pass that into cloud watch as a metric that is available for you the",
    "start": "1873120",
    "end": "1878760"
  },
  {
    "start": "1878000",
    "end": "1899000"
  },
  {
    "text": "other thing is back-end health we do publish both the healthy host count and the unhealthy host count as metrics as",
    "start": "1878760",
    "end": "1884910"
  },
  {
    "text": "well and for this particular metric the most important statistic could be either average minimum or maximum these these",
    "start": "1884910",
    "end": "1892260"
  },
  {
    "text": "three could be the statistics that you could be using using cloud watch which proves to be extremely useful the other",
    "start": "1892260",
    "end": "1900780"
  },
  {
    "start": "1899000",
    "end": "1944000"
  },
  {
    "text": "key one is flow logs flow logs actually captures all the packet information that",
    "start": "1900780",
    "end": "1906210"
  },
  {
    "text": "is all the requests or all the connection information going through the NLB are captured using flow logs which",
    "start": "1906210",
    "end": "1912960"
  },
  {
    "text": "captures all the IP traffic that is going within any network interfaces within the VPC are logged here by the",
    "start": "1912960",
    "end": "1919860"
  },
  {
    "text": "flow logs as well and flow logs are available through the cloud watch logs and so so that's another tool that is",
    "start": "1919860",
    "end": "1926730"
  },
  {
    "text": "available in order for you to diagnose any issues that you might be running into right so I just wanted a kind of",
    "start": "1926730",
    "end": "1932940"
  },
  {
    "text": "highlight you know the amount of visibility that is available for you in terms of both your applications in terms",
    "start": "1932940",
    "end": "1938460"
  },
  {
    "text": "of the NLB itself that are available to you in terms of troubleshooting so at",
    "start": "1938460",
    "end": "1945330"
  },
  {
    "start": "1944000",
    "end": "2082000"
  },
  {
    "text": "this point what I want to do is now that we have seen all the various features I want to quickly go in",
    "start": "1945330",
    "end": "1951590"
  },
  {
    "text": "show you how the API works so let me create quickly show you this excellent",
    "start": "1951590",
    "end": "1962529"
  },
  {
    "text": "so what I have right now running is essentially an ec2 instance and that ec2",
    "start": "1962529",
    "end": "1969320"
  },
  {
    "text": "instance is running a bad script and the bad script is going to go create an LV it's going to create the various",
    "start": "1969320",
    "end": "1975559"
  },
  {
    "text": "resources that Pratibha just spoke about including targets target groups and a listener and and the key here is I",
    "start": "1975559",
    "end": "1981980"
  },
  {
    "text": "wanted to show you how the API looks like what's the API structure to do this I have gone in and recorded a video for",
    "start": "1981980",
    "end": "1988700"
  },
  {
    "text": "this so let me play that here real quick so the first thing it does is I've",
    "start": "1988700",
    "end": "1995360"
  },
  {
    "text": "logged on to my instance and the instance is essentially running a batch script it's welcome you all first and",
    "start": "1995360",
    "end": "2001960"
  },
  {
    "text": "then it's asking me what I would like to name my load balancer so the first thing",
    "start": "2001960",
    "end": "2007269"
  },
  {
    "text": "I'm going to do is I'm going to name that load balancer test in and at that point what it's done is it has gone in",
    "start": "2007269",
    "end": "2013570"
  },
  {
    "text": "and created this network load balancer as you can see the API here is very similar to that of an application load",
    "start": "2013570",
    "end": "2020440"
  },
  {
    "text": "balancer with the difference that under the type I actually have network it's",
    "start": "2020440",
    "end": "2025480"
  },
  {
    "text": "I'm also passing it to subnets which are for the two availability zones and in",
    "start": "2025480",
    "end": "2030730"
  },
  {
    "text": "return this this creation is gotten me back the on of the load balancer itself",
    "start": "2030730",
    "end": "2035879"
  },
  {
    "text": "now I'm going to hit continue and at this point it's asking me if I want to create a new target group and I'm going",
    "start": "2035879",
    "end": "2043179"
  },
  {
    "text": "to name this particular target group server 10 which matches my test in for the network load balancer that I created",
    "start": "2043179",
    "end": "2049210"
  },
  {
    "text": "so as you can see here it's gone in and it is created this particular target",
    "start": "2049210",
    "end": "2054579"
  },
  {
    "text": "group called server 10 with a protocol of TCP the other thing it's done is its",
    "start": "2054579",
    "end": "2060099"
  },
  {
    "text": "created and held check right as you can see there it's created a health check with a protocol of HTTP so it's done a",
    "start": "2060099",
    "end": "2066550"
  },
  {
    "text": "HTTP health check here on he'll check port 80 and the probing part that it's",
    "start": "2066550",
    "end": "2071800"
  },
  {
    "text": "actually using on my target is a slash to determine what the health for my target is going to be and once it does",
    "start": "2071800",
    "end": "2077858"
  },
  {
    "text": "that it's returning back the target group on for me and now at this point",
    "start": "2077859",
    "end": "2083950"
  },
  {
    "start": "2082000",
    "end": "2108000"
  },
  {
    "text": "what it's going to ask me to do is to register targets into my target group so it's giving me all the",
    "start": "2083950",
    "end": "2090050"
  },
  {
    "text": "targets that are available for me so I'm going to go pick a couple of targets so in this case I'm gonna pick T to target",
    "start": "2090050",
    "end": "2096740"
  },
  {
    "text": "one and I'm going to pick in another target called as T to target to being my",
    "start": "2096740",
    "end": "2102560"
  },
  {
    "text": "two instances that I'm registering with my target group once I do that what it's",
    "start": "2102560",
    "end": "2110630"
  },
  {
    "start": "2108000",
    "end": "2172000"
  },
  {
    "text": "done is its registered those targets and after its registered those targets to my target group called s survey 10 it's",
    "start": "2110630",
    "end": "2116810"
  },
  {
    "text": "going to go in and automatically create a listener for me right so this is my strip running in and as soon as it",
    "start": "2116810",
    "end": "2122660"
  },
  {
    "text": "creates this particular listener what it's done is its created the protocol TCP port 80 and the default action it's",
    "start": "2122660",
    "end": "2129890"
  },
  {
    "text": "provided is forward to my server 10 so essentially at this point any connection",
    "start": "2129890",
    "end": "2135050"
  },
  {
    "text": "that is going to come in at port 80 with the protocol TCP will be forwarded to my",
    "start": "2135050",
    "end": "2140480"
  },
  {
    "text": "target groups over 10 and then it's going to use the 5 top with hash algorithm - and the sequence ID to pick",
    "start": "2140480",
    "end": "2147110"
  },
  {
    "text": "the back end within that target group called a server 10 along with that wall also what it is done is it's issued the",
    "start": "2147110",
    "end": "2154130"
  },
  {
    "text": "describe target health command there which I spoke to you about when I was talking to you about the health checks",
    "start": "2154130",
    "end": "2159320"
  },
  {
    "text": "and here what it's telling me is that my target health is being initialized which",
    "start": "2159320",
    "end": "2164660"
  },
  {
    "text": "means my health checks are still in progress for the targets every third in my target group let me show you you know",
    "start": "2164660",
    "end": "2173750"
  },
  {
    "start": "2172000",
    "end": "2241000"
  },
  {
    "text": "how my console looks like so I'm going to refresh my console at this point and here what you're seeing is the test 10",
    "start": "2173750",
    "end": "2179750"
  },
  {
    "text": "the network load balancer got created the description it's telling me is it's a network type and it's an internet",
    "start": "2179750",
    "end": "2187310"
  },
  {
    "text": "facing with two subnets to availability zones and a my listener you can see that I have a port 80 listener protocol being",
    "start": "2187310",
    "end": "2195260"
  },
  {
    "text": "TCP and the default action is to forward that to my target groups over ten so",
    "start": "2195260",
    "end": "2200600"
  },
  {
    "text": "let's take a look at my target group server 10 now which is the target group I created the two targets that I",
    "start": "2200600",
    "end": "2207860"
  },
  {
    "text": "registered are now showing up which is my T to target one and T to target two and then essentially they each the",
    "start": "2207860",
    "end": "2214910"
  },
  {
    "text": "status that it's giving me is the health checks are still being initialized right so at some point what's gonna",
    "start": "2214910",
    "end": "2220250"
  },
  {
    "text": "happen is the the health checks will get completed and they will move to a healthy state so I'm gonna show you how",
    "start": "2220250",
    "end": "2226460"
  },
  {
    "text": "that might look like with sober - which was a target group I had created earlier so here this is what would happen to my",
    "start": "2226460",
    "end": "2232750"
  },
  {
    "text": "targets once they have completed the health checks and they are in a healthy state so now that you've seen how the",
    "start": "2232750",
    "end": "2243710"
  },
  {
    "start": "2241000",
    "end": "2248000"
  },
  {
    "text": "API looks like the next thing I want to cover here is going to be what is the",
    "start": "2243710",
    "end": "2249410"
  },
  {
    "start": "2248000",
    "end": "2316000"
  },
  {
    "text": "pricing for the network load balancer it's so one of the core things here is that with elastic load balancing all our",
    "start": "2249410",
    "end": "2255859"
  },
  {
    "text": "products you pay for what you use kind of a model which is true even with the network load balancer with network load",
    "start": "2255859",
    "end": "2261950"
  },
  {
    "text": "balancers there are two pieces to the pricing one is we charge you an hourly charge and then there is a usage charge",
    "start": "2261950",
    "end": "2268730"
  },
  {
    "text": "based on the number of connections based on the amount of data that is being processed through the load balancer on",
    "start": "2268730",
    "end": "2275839"
  },
  {
    "text": "an hourly charge basis the network load balancer is 10% less expensive than both",
    "start": "2275839",
    "end": "2281810"
  },
  {
    "text": "than the classic load balancer and in terms of the data processing which is the LCU charge it is actually 25 percent",
    "start": "2281810",
    "end": "2288980"
  },
  {
    "text": "cheaper or less expensive than both the app their application load balancer and",
    "start": "2288980",
    "end": "2294020"
  },
  {
    "text": "your classic load balancer and one of the big reasons you know when Pratibha was talking to you about the performance",
    "start": "2294020",
    "end": "2299300"
  },
  {
    "text": "characteristics Network load balancer is meant for these high throughput high bandwidth workloads and we wanted to",
    "start": "2299300",
    "end": "2306200"
  },
  {
    "text": "make it less expensive for our customers and as a reason of this this is 25 percent less expensive than both the",
    "start": "2306200",
    "end": "2312770"
  },
  {
    "text": "classic load balancer and the application load balancer with that let's get into the three dimensions that",
    "start": "2312770",
    "end": "2319490"
  },
  {
    "start": "2316000",
    "end": "2358000"
  },
  {
    "text": "constitute an LCU right so the three dimensions that we are looking at is each LCU gives you one gigabyte per hour",
    "start": "2319490",
    "end": "2327619"
  },
  {
    "text": "of bandwidth it gives you 800 new non SSL connections per second and it gives",
    "start": "2327619",
    "end": "2334310"
  },
  {
    "text": "you hundred thousand active connections and what we do is every hour we are looking at the maximum of these three",
    "start": "2334310",
    "end": "2340730"
  },
  {
    "text": "dimensions and we are charging you only on the maximum of these three dimensions every hour so the key call-out here is you are not",
    "start": "2340730",
    "end": "2347540"
  },
  {
    "text": "charged in all the three dimensions you are only charged on the maximum of the three dimensions that",
    "start": "2347540",
    "end": "2353210"
  },
  {
    "text": "you're seeing here right so that's another key call-out to make so now that",
    "start": "2353210",
    "end": "2359720"
  },
  {
    "start": "2358000",
    "end": "2411000"
  },
  {
    "text": "we've seen the pricing the next big piece is the migration path right like so what does it take to migrate from a",
    "start": "2359720",
    "end": "2366980"
  },
  {
    "text": "classic load balancer to a network load balancer we have a github utility that we have put together that allows you to",
    "start": "2366980",
    "end": "2374000"
  },
  {
    "text": "simply take your resources that are present on the classic load balancer and migrate that to your NLB right and also",
    "start": "2374000",
    "end": "2381920"
  },
  {
    "text": "recently about a couple of weeks back we launched a one step migration wizard",
    "start": "2381920",
    "end": "2386930"
  },
  {
    "text": "that is available for you on the console where it again takes all your resources that are available on the classic and",
    "start": "2386930",
    "end": "2393530"
  },
  {
    "text": "moves that into an NLB and at that point all you literally need to do is just take your DNS name and move that to the",
    "start": "2393530",
    "end": "2400730"
  },
  {
    "text": "new load balancer that has been created so so it's a pretty straightforward process to migrate away from CL B or the",
    "start": "2400730",
    "end": "2407270"
  },
  {
    "text": "classic load balancer into the network load balancer product so at this point I",
    "start": "2407270",
    "end": "2413360"
  },
  {
    "start": "2411000",
    "end": "2419000"
  },
  {
    "text": "know a lot of you might have a question which is when do I actually use a network load balancer so let's take a",
    "start": "2413360",
    "end": "2420560"
  },
  {
    "start": "2419000",
    "end": "2480000"
  },
  {
    "text": "look at this particular table right which differentiates all the three products so on the application load",
    "start": "2420560",
    "end": "2425690"
  },
  {
    "text": "balancer side as you can see you have advanced content based routing features be it path based routing be it host",
    "start": "2425690",
    "end": "2433010"
  },
  {
    "text": "based routing we recently added sni support to it you have sni support you",
    "start": "2433010",
    "end": "2438500"
  },
  {
    "text": "have WebSockets support in addition it supports HTTP HTTP protocols HTTP to",
    "start": "2438500",
    "end": "2444470"
  },
  {
    "text": "protocol a application load balancer also supports TLS termination right now",
    "start": "2444470",
    "end": "2450410"
  },
  {
    "text": "going to the network load balancer it supports static IP it supports the",
    "start": "2450410",
    "end": "2455480"
  },
  {
    "text": "preservation of source IP and TCP protocol both your application load balancer and network load balancer",
    "start": "2455480",
    "end": "2462200"
  },
  {
    "text": "support load balancing to IP addresses and containers in addition to instances",
    "start": "2462200",
    "end": "2467480"
  },
  {
    "text": "and your classic load balancer you know it's it's lower on features so you know typically our recommendation is use it",
    "start": "2467480",
    "end": "2474710"
  },
  {
    "text": "if you have existing applications on the older ec2 classic network",
    "start": "2474710",
    "end": "2480700"
  },
  {
    "text": "so to summarize you know choose an application load balancer if you need flexible routing rules for",
    "start": "2480700",
    "end": "2487730"
  },
  {
    "text": "your web applications that use HTTP HTTP protocols operating at the request level",
    "start": "2487730",
    "end": "2494569"
  },
  {
    "text": "the application load balancer offers you flexible advanced routing features it",
    "start": "2494569",
    "end": "2499970"
  },
  {
    "text": "gives you TLS termination and it also gives you visibility features aimed at",
    "start": "2499970",
    "end": "2505220"
  },
  {
    "text": "application architectures including micro services and containers choose a",
    "start": "2505220",
    "end": "2510530"
  },
  {
    "text": "network load balancer if you need extremely high performance if you need performance for millions of requests per",
    "start": "2510530",
    "end": "2517640"
  },
  {
    "text": "second and ultra low latencies right that's when you would go in and pick your network load balancer and it",
    "start": "2517640",
    "end": "2523880"
  },
  {
    "text": "operates at the connection level and then choose a classic load balancer if you have an older ec2 classic network",
    "start": "2523880",
    "end": "2531260"
  },
  {
    "text": "application where you could go in and use a classic load balancer at this point you know now that you've seen all",
    "start": "2531260",
    "end": "2537980"
  },
  {
    "start": "2535000",
    "end": "2566000"
  },
  {
    "text": "the various features that are available on the network load balancer product at this point I would like to invite Brian",
    "start": "2537980",
    "end": "2543890"
  },
  {
    "text": "from log Li to give a customer perspective to the network load balancer and also talk about how NLB has helped",
    "start": "2543890",
    "end": "2551150"
  },
  {
    "text": "the architecture at logging right thanks Duran a lot of good information there",
    "start": "2551150",
    "end": "2559480"
  },
  {
    "text": "hello everyone I'm Brian McKinney and I head up operations over log Li out of our San Francisco office as many of you",
    "start": "2559480",
    "end": "2568819"
  },
  {
    "start": "2566000",
    "end": "2584000"
  },
  {
    "text": "are aware log ly is a leading cloud-based management service provider",
    "start": "2568819",
    "end": "2575559"
  },
  {
    "text": "today I just wanted to take a few minutes to explain our success story using NL B's product log management is a",
    "start": "2576220",
    "end": "2586849"
  },
  {
    "start": "2584000",
    "end": "2616000"
  },
  {
    "text": "big data challenge in many cases we're talking about terabytes of continuously streaming customer data structured on an",
    "start": "2586849",
    "end": "2594859"
  },
  {
    "text": "unstructured exponential data growth and scale delivering real-time indexing and",
    "start": "2594859",
    "end": "2601550"
  },
  {
    "text": "search services is an assumed service level seconds matter and delays are",
    "start": "2601550",
    "end": "2607700"
  },
  {
    "text": "unacceptable and data loss is unforgivable big data services require a",
    "start": "2607700",
    "end": "2612920"
  },
  {
    "text": "very resilient architecture let's take a quick look at lug Lee's big",
    "start": "2612920",
    "end": "2619820"
  },
  {
    "start": "2616000",
    "end": "2663000"
  },
  {
    "text": "data pipeline as you can see from left to right log Lee uses AWS as NLB product to be",
    "start": "2619820",
    "end": "2626690"
  },
  {
    "text": "around 53 to load balanced data ingestion traffic this is our entry",
    "start": "2626690",
    "end": "2632300"
  },
  {
    "text": "point for customer logs nobe evenly distributes the incoming data to a fleet of collectors where we",
    "start": "2632300",
    "end": "2639530"
  },
  {
    "text": "validate pass on for processing indexing and make search available for customers",
    "start": "2639530",
    "end": "2645820"
  },
  {
    "text": "routing and distributing load to healthy collectors in the pipeline is arguably",
    "start": "2645820",
    "end": "2651440"
  },
  {
    "text": "one of the most important services having the confidence that traffic is",
    "start": "2651440",
    "end": "2657500"
  },
  {
    "text": "flowing unempioyed and with maximum throughput for back-end processing is critical let's talk for a few minutes",
    "start": "2657500",
    "end": "2666020"
  },
  {
    "start": "2663000",
    "end": "2743000"
  },
  {
    "text": "about load balancing requirements for a minute with all the advances in the space we",
    "start": "2666020",
    "end": "2671330"
  },
  {
    "text": "still tend to think of load balancers as a black box simple network layer for paster devices",
    "start": "2671330",
    "end": "2677750"
  },
  {
    "text": "that add no value they don't really understand our applications but big data",
    "start": "2677750",
    "end": "2684470"
  },
  {
    "text": "challenges require much more of a sophisticated loose solution today load balancers must be a part of the fully",
    "start": "2684470",
    "end": "2690619"
  },
  {
    "text": "integrated design and log Lee the use case we needed to solve was much more",
    "start": "2690619",
    "end": "2696560"
  },
  {
    "text": "than just distributing load supporting both tcp long live connections and",
    "start": "2696560",
    "end": "2702290"
  },
  {
    "text": "persistent HTTP short-lived connections we needed reliability right we needed a",
    "start": "2702290",
    "end": "2707690"
  },
  {
    "text": "solution that could adapt to different customers streaming profiles power scale",
    "start": "2707690",
    "end": "2713420"
  },
  {
    "text": "and economics were top of mind requirements so prior to using the NLB",
    "start": "2713420",
    "end": "2722030"
  },
  {
    "text": "we used to pass data directly to our collectors without anything in the",
    "start": "2722030",
    "end": "2727040"
  },
  {
    "text": "middle which worked pretty well with steady state traffic but it didn't really handle unexpected spikes too well",
    "start": "2727040",
    "end": "2734230"
  },
  {
    "text": "so log lee needed a solution that was scaleable with intuitive health",
    "start": "2734230",
    "end": "2739760"
  },
  {
    "text": "detection capabilities that was high-performing let's take a quick",
    "start": "2739760",
    "end": "2745400"
  },
  {
    "start": "2743000",
    "end": "2827000"
  },
  {
    "text": "high-level look at log Lee's high level topology so in this graph here you can see we",
    "start": "2745400",
    "end": "2752460"
  },
  {
    "text": "operate two in OBS one in the West and one in the east we have 50% spot fleet",
    "start": "2752460",
    "end": "2758670"
  },
  {
    "text": "instances up front supported by 50% spot fleet in the back we felt for architecture this represented the best",
    "start": "2758670",
    "end": "2765840"
  },
  {
    "text": "balance of risk and cost for for our topology so regional segmentation was",
    "start": "2765840",
    "end": "2772860"
  },
  {
    "text": "also very important to us high availability was a key requirement as well as flexibility for our CI CD",
    "start": "2772860",
    "end": "2780750"
  },
  {
    "text": "deployment model in situational a/b testing log lis also takes full",
    "start": "2780750",
    "end": "2786420"
  },
  {
    "text": "advantage of spot fleet instances that auto scale and we also provide a lot of",
    "start": "2786420",
    "end": "2792420"
  },
  {
    "text": "the backend rebalancing for the instances across the availability zones this provides essential safeguards for",
    "start": "2792420",
    "end": "2799950"
  },
  {
    "text": "AZ an experience that's experiencing problems or price spikes we use cloud",
    "start": "2799950",
    "end": "2805350"
  },
  {
    "text": "watch in combination with log lis management analytics to provide critical insight into our ingestion pipeline and",
    "start": "2805350",
    "end": "2812880"
  },
  {
    "text": "consumer endpoint health so log lis analytics provides us that extra layer",
    "start": "2812880",
    "end": "2818250"
  },
  {
    "text": "downstream of visibility to help us understand some of those critical elements to help us with data flow down",
    "start": "2818250",
    "end": "2827240"
  },
  {
    "start": "2827000",
    "end": "2865000"
  },
  {
    "text": "here's one of several views that we use in our log lis products to help operations and engineering teams check",
    "start": "2828350",
    "end": "2834480"
  },
  {
    "text": "and measure incoming data flow we heard from nur an invertebrate earlier about some of these lows this helps us confirm",
    "start": "2834480",
    "end": "2841050"
  },
  {
    "text": "downstream event flow count by region the capacity units by region bytes",
    "start": "2841050",
    "end": "2847650"
  },
  {
    "text": "processing you get the flow details that you need all these are critical insights",
    "start": "2847650",
    "end": "2852750"
  },
  {
    "text": "when monitoring data volume patterns and throughput rates between the NLB and our collectors so how do we test all this",
    "start": "2852750",
    "end": "2864349"
  },
  {
    "text": "there we go so during the proof-of-concept testing phase we took a very conservative",
    "start": "2864440",
    "end": "2870839"
  },
  {
    "start": "2865000",
    "end": "3167000"
  },
  {
    "text": "approach we started with a historical review of all the incoming traffic volume data throughput in performance",
    "start": "2870839",
    "end": "2877230"
  },
  {
    "text": "benchmarks and we establish specific and it will be acceptance criteria from",
    "start": "2877230",
    "end": "2882540"
  },
  {
    "text": "there so going in the engineering team we made a lot of assumptions we expected",
    "start": "2882540",
    "end": "2888300"
  },
  {
    "text": "NLB would perform very well with scalability and performance those would be the core strengths but we needed to",
    "start": "2888300",
    "end": "2893790"
  },
  {
    "text": "prove it out and it'll be probably wouldn't be direct testing performance throughput that means where we were from",
    "start": "2893790",
    "end": "2901200"
  },
  {
    "text": "data coming from route 53 to our collectors how could it beat it there were no network hops in the middle we",
    "start": "2901200",
    "end": "2907410"
  },
  {
    "text": "were about to introduce four hops so the NLB if we could match 90% of what",
    "start": "2907410",
    "end": "2915420"
  },
  {
    "text": "we had in place for direct then that was gonna be a big win for us that was going to be a good trade-off our use case",
    "start": "2915420",
    "end": "2922260"
  },
  {
    "text": "scope was to test both syslog long-lived connections then short live HTTP connections we also needed a balanced",
    "start": "2922260",
    "end": "2929940"
  },
  {
    "text": "comparative testing perspective so we set up three test harness variables",
    "start": "2929940",
    "end": "2936619"
  },
  {
    "text": "route 53 and LB and a generic H a proxy",
    "start": "2937160",
    "end": "2942390"
  },
  {
    "text": "set up just for sanity testing we started with one client sending simulated load to one collector through",
    "start": "2942390",
    "end": "2949770"
  },
  {
    "text": "the NLD to establish a baseline that established the same benchmarks for h8",
    "start": "2949770",
    "end": "2955440"
  },
  {
    "text": "proxy and the direct testing from there we ramped up scaling hundreds of clients tens of collectors adjusting processes",
    "start": "2955440",
    "end": "2963210"
  },
  {
    "text": "and threads to simulate customer profiles in the end the testing results",
    "start": "2963210",
    "end": "2969180"
  },
  {
    "text": "verified that the NAO B could consistently match performance throughput that the direct testing did",
    "start": "2969180",
    "end": "2974430"
  },
  {
    "text": "so that was a little bit of a surprise it had my head scratch and a little bit on that we never expected that",
    "start": "2974430",
    "end": "2981589"
  },
  {
    "text": "so latency was a non-issue the test result differences were negligible and",
    "start": "2981589",
    "end": "2986670"
  },
  {
    "text": "we're talking about microseconds at that ports were non distinguishable in retrospect I would offer up a couple of",
    "start": "2986670",
    "end": "2994080"
  },
  {
    "text": "time saver observations when testing at closing make sure your test harnesses",
    "start": "2994080",
    "end": "3001110"
  },
  {
    "text": "are not configured in a way that our bridge that are prematurely closing the sockets in our case we remove these",
    "start": "3001110",
    "end": "3008700"
  },
  {
    "text": "parameters from our Python scripts that were generating the load so that helped",
    "start": "3008700",
    "end": "3013890"
  },
  {
    "text": "so that was it compromising the test results we let we created a steady-state",
    "start": "3013890",
    "end": "3018990"
  },
  {
    "text": "connection and just let it run in a loop especially with the long live HTTP connections avoid those short term runs",
    "start": "3018990",
    "end": "3026310"
  },
  {
    "text": "I think we tend to get busy when we're trying to test new products we tend to",
    "start": "3026310",
    "end": "3032340"
  },
  {
    "text": "want to get it all done in a couple of days and we put our test iterations at 5 10 15 minutes or less let it run for the",
    "start": "3032340",
    "end": "3039000"
  },
  {
    "text": "day and let it run for two or three days and that's gonna give you a good sample size of what it actually like in",
    "start": "3039000",
    "end": "3044310"
  },
  {
    "text": "production with your architecture TCP that was another big one set the TCP",
    "start": "3044310",
    "end": "3052500"
  },
  {
    "text": "size window very high so it's not a factor you don't want to deal with the",
    "start": "3052500",
    "end": "3057690"
  },
  {
    "text": "organic nature the TCP 3-way handshake getting in the way of your performance for us we set it at 10 million requests",
    "start": "3057690",
    "end": "3064620"
  },
  {
    "text": "per second so that that allows us to just make it a non-factor client-side",
    "start": "3064620",
    "end": "3071130"
  },
  {
    "text": "teeps TCP schedulers that was another one I didn't expect until we got deeper",
    "start": "3071130",
    "end": "3076170"
  },
  {
    "text": "into the testing there are some things that you just can't control on the",
    "start": "3076170",
    "end": "3082080"
  },
  {
    "text": "client side many customers will run QoS and processes and their operating systems and some of these things you'll",
    "start": "3082080",
    "end": "3089490"
  },
  {
    "text": "notice through your testing and they may your test results may fluctuate a little",
    "start": "3089490",
    "end": "3094950"
  },
  {
    "text": "bit as they come in but you should know that that's really as a result of the QoS it's running on those schedulers so",
    "start": "3094950",
    "end": "3100410"
  },
  {
    "text": "that's something that we learned be aware of any back pressure - in your architecture you may be running CAFTA",
    "start": "3100410",
    "end": "3106770"
  },
  {
    "text": "services and things like that that may sometimes show fluctuations and test",
    "start": "3106770",
    "end": "3111780"
  },
  {
    "text": "results you may be using synchronous services that require acknowledgment before further processing that could",
    "start": "3111780",
    "end": "3119280"
  },
  {
    "text": "impact it depending on your architecture tolerance using an asynchronous service",
    "start": "3119280",
    "end": "3124980"
  },
  {
    "text": "configuration is probably the most optimal for performance commonly know is",
    "start": "3124980",
    "end": "3130170"
  },
  {
    "text": "that fire-and-forget approach so I remember many nights when the AWS team",
    "start": "3130170",
    "end": "3135780"
  },
  {
    "text": "and log lee we stayed up doing a lot of saturation testing and we were determined to to get to that point where",
    "start": "3135780",
    "end": "3141840"
  },
  {
    "text": "we knocked over the service in the systems and we actually never found that that limit we never even came close to",
    "start": "3141840",
    "end": "3149400"
  },
  {
    "text": "seeing the saturation limits for NLB and we never knocked over a collector we did had a plateau with events per second so",
    "start": "3149400",
    "end": "3157290"
  },
  {
    "text": "for us it was 200,000 events per second 800 megabits per second per collector",
    "start": "3157290",
    "end": "3162300"
  },
  {
    "text": "and that was good for us so what did we",
    "start": "3162300",
    "end": "3169170"
  },
  {
    "start": "3167000",
    "end": "3316000"
  },
  {
    "text": "learn in summary in summary we were able",
    "start": "3169170",
    "end": "3174180"
  },
  {
    "text": "to maintain very high events per second like we talked about whenever we did the fault tolerance between the load",
    "start": "3174180",
    "end": "3180930"
  },
  {
    "text": "balancers and our collectors it always failed over seamlessly that was very",
    "start": "3180930",
    "end": "3186270"
  },
  {
    "text": "comforting that was one of the main exit criteria requirements for sure there was",
    "start": "3186270",
    "end": "3192150"
  },
  {
    "text": "no throughput latency performance trade-offs again remember we talked early on about comparing what the NLB",
    "start": "3192150",
    "end": "3198780"
  },
  {
    "text": "would give us in comparison to direct testing the latency was a non-factor at",
    "start": "3198780",
    "end": "3203820"
  },
  {
    "text": "that point helpful features you heard",
    "start": "3203820",
    "end": "3209100"
  },
  {
    "text": "Moran talking earlier about you know be preserving the client IP to the back end which is very important particularly in",
    "start": "3209100",
    "end": "3216390"
  },
  {
    "text": "cases where the IP addresses need to be hard-coded into the DNS records customer",
    "start": "3216390",
    "end": "3222120"
  },
  {
    "text": "firewall white listing roles that was a challenge for us when we were sending data directly from route 53 to the",
    "start": "3222120",
    "end": "3229050"
  },
  {
    "text": "collectors and we always had to maintain those those white lists it's a non-issue with NLB",
    "start": "3229050",
    "end": "3234840"
  },
  {
    "text": "and then lastly with scalability again",
    "start": "3234840",
    "end": "3240140"
  },
  {
    "text": "the product horizontally scales very well you're gonna get somewhere between",
    "start": "3240140",
    "end": "3246240"
  },
  {
    "text": "12 to 15 gigabits per second throughput across the zones that was a big win for",
    "start": "3246240",
    "end": "3253050"
  },
  {
    "text": "us we didn't need that much but it's comforting to know that in OB we'll",
    "start": "3253050",
    "end": "3258240"
  },
  {
    "text": "acknowledge that hockey stick and accommodate that traffic as it ramps up it's going to scale with your",
    "start": "3258240",
    "end": "3264400"
  },
  {
    "text": "business growth when we look at our organic growth in terms of customer",
    "start": "3264400",
    "end": "3269410"
  },
  {
    "text": "traffic it was comforting to know that it was going to be able to do that for us the other thing is introducing",
    "start": "3269410",
    "end": "3277090"
  },
  {
    "text": "containers and micro services if you have plans on doing that like la Glee had you know bees going to help you",
    "start": "3277090",
    "end": "3283300"
  },
  {
    "text": "integrate and support these paths so again these are some very important points when you're considering moving",
    "start": "3283300",
    "end": "3290020"
  },
  {
    "text": "from one allow the load balance or product to the next especially and it'll be and this is our story at La Glee for",
    "start": "3290020",
    "end": "3298000"
  },
  {
    "text": "the network load balancer I hope it was interesting thank you [Applause]",
    "start": "3298000",
    "end": "3308130"
  },
  {
    "text": "this is the end of our presentation and thanks for your time but we're going to be around here so if you have any",
    "start": "3308130",
    "end": "3313870"
  },
  {
    "text": "questions feel free to come on thank you",
    "start": "3313870",
    "end": "3318420"
  }
]