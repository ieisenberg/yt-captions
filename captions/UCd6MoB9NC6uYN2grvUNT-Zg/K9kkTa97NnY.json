[
  {
    "text": "- [Instructor] Hello, everyone.",
    "start": "1260",
    "end": "2310"
  },
  {
    "text": "Today, I'll be showcasing how to use",
    "start": "2310",
    "end": "4017"
  },
  {
    "text": "AWS Certificate Manager\nPrivate CA, or ACM Private CA,",
    "start": "4017",
    "end": "8250"
  },
  {
    "text": "to issue certificates to Amazon\nElastic Kubernetes Service,",
    "start": "8250",
    "end": "11460"
  },
  {
    "text": "or EKS, workloads using\nthe cert-manager plugin.",
    "start": "11460",
    "end": "15570"
  },
  {
    "text": "First, I'll provide an overview\nof the cert-manager plugin",
    "start": "15570",
    "end": "18119"
  },
  {
    "text": "and the integration between\nACM Private CA and EKS.",
    "start": "18120",
    "end": "21930"
  },
  {
    "text": "Then we'll look at a brief demo",
    "start": "21930",
    "end": "23250"
  },
  {
    "text": "of how this integration works in practice.",
    "start": "23250",
    "end": "25413"
  },
  {
    "text": "The Private CA Kubernetes\ncert-manager plugin",
    "start": "26580",
    "end": "29070"
  },
  {
    "text": "is an opensource plugin for cert-manager",
    "start": "29070",
    "end": "31170"
  },
  {
    "text": "that offers a secure\ncertificate authority solution",
    "start": "31170",
    "end": "33690"
  },
  {
    "text": "for Kubernetes containers.",
    "start": "33690",
    "end": "35640"
  },
  {
    "text": "ACM Private CA is AWS's fully managed",
    "start": "35640",
    "end": "38340"
  },
  {
    "text": "and highly available private CA service,",
    "start": "38340",
    "end": "40980"
  },
  {
    "text": "and cert-manager is a\nwidely adopted solution",
    "start": "40980",
    "end": "43230"
  },
  {
    "text": "for TLS certificate\nmanagement in Kubernetes.",
    "start": "43230",
    "end": "45813"
  },
  {
    "text": "Customers who use cert-manager",
    "start": "46710",
    "end": "48329"
  },
  {
    "text": "for certificate lifecycle\nmanagement can use this plugin",
    "start": "48330",
    "end": "50970"
  },
  {
    "text": "with ACM Private CA to improve security",
    "start": "50970",
    "end": "53460"
  },
  {
    "text": "over the default cert-manager CA,",
    "start": "53460",
    "end": "55710"
  },
  {
    "text": "which stores keys in plain\ntext in server memory.",
    "start": "55710",
    "end": "58413"
  },
  {
    "text": "Kubernetes containers and applications",
    "start": "59610",
    "end": "61350"
  },
  {
    "text": "use digital certificates to\nprovide secure authentication",
    "start": "61350",
    "end": "64170"
  },
  {
    "text": "and encryption over TLS.",
    "start": "64170",
    "end": "66119"
  },
  {
    "text": "With this plugin, cert-manager\nrequests TLS certificates",
    "start": "66120",
    "end": "68880"
  },
  {
    "text": "from ACM Private CA, a highly available",
    "start": "68880",
    "end": "71219"
  },
  {
    "text": "and auditable managed\nCA that secures CA keys",
    "start": "71220",
    "end": "73980"
  },
  {
    "text": "using FIPS-validated\nhardware security modules,",
    "start": "73980",
    "end": "77160"
  },
  {
    "text": "or HSMs.",
    "start": "77160",
    "end": "78960"
  },
  {
    "text": "Together, cert-manager and\nthe plugin for ACM Private CA",
    "start": "78960",
    "end": "81960"
  },
  {
    "text": "provide certificate automation for TLS",
    "start": "81960",
    "end": "84150"
  },
  {
    "text": "in a range of configurations,\nincluding at the ingress,",
    "start": "84150",
    "end": "86910"
  },
  {
    "text": "on the pod, and mutual TLS between pods.",
    "start": "86910",
    "end": "90330"
  },
  {
    "text": "You can use the ACM Private CA",
    "start": "90330",
    "end": "92040"
  },
  {
    "text": "Kubernetes cert-manager plugin",
    "start": "92040",
    "end": "93960"
  },
  {
    "text": "with Amazon Elastic Kubernetes Service,",
    "start": "93960",
    "end": "96000"
  },
  {
    "text": "a self-managed Kubernetes on\nAWS and Kubernetes on-premise.",
    "start": "96000",
    "end": "100083"
  },
  {
    "text": "If you take a look at this diagram,",
    "start": "102630",
    "end": "104159"
  },
  {
    "text": "you can see there are four\ndifferent ways to terminate TLS",
    "start": "104160",
    "end": "106650"
  },
  {
    "text": "for applications running\non an EKS cluster,",
    "start": "106650",
    "end": "109260"
  },
  {
    "text": "on the load balancer, on\nthe ingress controller,",
    "start": "109260",
    "end": "112110"
  },
  {
    "text": "and directly on the pod.",
    "start": "112110",
    "end": "113940"
  },
  {
    "text": "The fourth way is to use mutual\nTLS, or MTLS, between pods.",
    "start": "113940",
    "end": "117633"
  },
  {
    "text": "In this demo, I'll show you\nhow to issue a certificate",
    "start": "118500",
    "end": "120660"
  },
  {
    "text": "to terminate TLS on\nthe ingress controller.",
    "start": "120660",
    "end": "123480"
  },
  {
    "text": "You can follow along with\nthe steps in this demo,",
    "start": "123480",
    "end": "125850"
  },
  {
    "text": "as well as dive deeper into\nother TLS termination options",
    "start": "125850",
    "end": "128850"
  },
  {
    "text": "in the publicly available\nACM Private CA workshop.",
    "start": "128850",
    "end": "132270"
  },
  {
    "text": "I put the link to this workshop",
    "start": "132270",
    "end": "133620"
  },
  {
    "text": "in the description of this video.",
    "start": "133620",
    "end": "135659"
  },
  {
    "text": "Be aware that if you run the\nworkshop in your own account,",
    "start": "135660",
    "end": "137910"
  },
  {
    "text": "you will, of course, incur charges",
    "start": "137910",
    "end": "139260"
  },
  {
    "text": "for the services you consume.",
    "start": "139260",
    "end": "140823"
  },
  {
    "text": "Now let's take a brief\nlook at how this works.",
    "start": "141870",
    "end": "144170"
  },
  {
    "text": "Now that we're in the AWS\nconsole, let's first take a look",
    "start": "145740",
    "end": "148560"
  },
  {
    "text": "at the resources I've\npre-configured for this demo.",
    "start": "148560",
    "end": "151770"
  },
  {
    "text": "I'll navigate to the\nACM Private CA console,",
    "start": "151770",
    "end": "154530"
  },
  {
    "text": "where we can see the root and\nsubordinate CAs I've created.",
    "start": "154530",
    "end": "157563"
  },
  {
    "text": "We'll be using this subordinate CA",
    "start": "161850",
    "end": "163860"
  },
  {
    "text": "to issue certificates to our EKS cluster.",
    "start": "163860",
    "end": "166353"
  },
  {
    "text": "Now, if we look at the EKS console,",
    "start": "170250",
    "end": "172230"
  },
  {
    "text": "we can see the Kubernetes\ncluster, pca-eks-demo,",
    "start": "172230",
    "end": "176280"
  },
  {
    "text": "that has been pre-created in this account.",
    "start": "176280",
    "end": "178740"
  },
  {
    "text": "It has two worker nodes",
    "start": "178740",
    "end": "180120"
  },
  {
    "text": "in a node group named\npca-eks-demo workers.",
    "start": "180120",
    "end": "184440"
  },
  {
    "text": "Next, I'll switch to the\nCLI and use a command",
    "start": "184440",
    "end": "187320"
  },
  {
    "text": "to install the cert-manager\nadd-on to Kubernetes.",
    "start": "187320",
    "end": "190383"
  },
  {
    "text": "This add-on will allow us\nto automate the management",
    "start": "193410",
    "end": "195690"
  },
  {
    "text": "and issuance of TLS certificates.",
    "start": "195690",
    "end": "197763"
  },
  {
    "text": "Now we need to install\nthe AWS PCA Issuer plugin,",
    "start": "198780",
    "end": "202380"
  },
  {
    "text": "which is an add-on to cert-manager.",
    "start": "202380",
    "end": "204243"
  },
  {
    "text": "First, to do this,",
    "start": "205350",
    "end": "206430"
  },
  {
    "text": "we need to create an\nOpenID Connect provider",
    "start": "206430",
    "end": "209909"
  },
  {
    "text": "for our cluster.",
    "start": "209910",
    "end": "210903"
  },
  {
    "text": "Now, we'll use eksctl to\ncreate an IAM service account",
    "start": "217980",
    "end": "221819"
  },
  {
    "text": "that the PCA Issuer plugin will use.",
    "start": "221820",
    "end": "224073"
  },
  {
    "text": "I'll clear the screen to make\nit a little more readable,",
    "start": "229110",
    "end": "232650"
  },
  {
    "text": "and then we'll use helm to\ninstall the AWS PCA Issuer.",
    "start": "232650",
    "end": "236853"
  },
  {
    "text": "Notice that this command\nalso sets the service account",
    "start": "238350",
    "end": "241380"
  },
  {
    "text": "as the one we created\nin the previous step.",
    "start": "241380",
    "end": "244023"
  },
  {
    "text": "Now I'll run the get pods command",
    "start": "246930",
    "end": "249030"
  },
  {
    "text": "for the namespace, aws-pca-issuer,",
    "start": "249030",
    "end": "251703"
  },
  {
    "text": "and as you can see, we now have a pod",
    "start": "252570",
    "end": "254580"
  },
  {
    "text": "in the ready state running in\nthe aws-pca-issuer namespace.",
    "start": "254580",
    "end": "258363"
  },
  {
    "text": "Now we will use the AWS PCA Issuer plugin",
    "start": "261960",
    "end": "265410"
  },
  {
    "text": "to create a cluster\nissuer, which will be used",
    "start": "265410",
    "end": "268140"
  },
  {
    "text": "with the ACM Private CA\nto issue certificates.",
    "start": "268140",
    "end": "271410"
  },
  {
    "text": "As you can see in the deployment\nfile, we're naming the ARN",
    "start": "271410",
    "end": "275160"
  },
  {
    "text": "of the subordinate CA that I\nshowed earlier in the demo.",
    "start": "275160",
    "end": "278433"
  },
  {
    "text": "I'll use the kubectl\napply command to go ahead",
    "start": "279840",
    "end": "283080"
  },
  {
    "text": "and deploy this YAML file.",
    "start": "283080",
    "end": "285123"
  },
  {
    "text": "Okay, now we've set up our EKS cluster",
    "start": "287430",
    "end": "289800"
  },
  {
    "text": "and prepared it to start\nrequesting certificates.",
    "start": "289800",
    "end": "292620"
  },
  {
    "text": "We need to create an ingress controller.",
    "start": "292620",
    "end": "294693"
  },
  {
    "text": "I'll use the following command\nto install NGINX Ingress.",
    "start": "295890",
    "end": "299223"
  },
  {
    "text": "NGINX Ingress is built",
    "start": "300840",
    "end": "302160"
  },
  {
    "text": "around the Kubernetes Ingress\nresource using a config map",
    "start": "302160",
    "end": "305400"
  },
  {
    "text": "to store the NGINX configuration.",
    "start": "305400",
    "end": "307503"
  },
  {
    "text": "This command also deploys\na network load balancer.",
    "start": "311970",
    "end": "315213"
  },
  {
    "text": "I'll navigate to the EC2\nconsole so we can take a look",
    "start": "316830",
    "end": "320009"
  },
  {
    "text": "at this load balancer that was created.",
    "start": "320010",
    "end": "321960"
  },
  {
    "text": "It's currently in the Provisioning state,",
    "start": "327390",
    "end": "329440"
  },
  {
    "text": "but after a few minutes,\nit should switch to Active.",
    "start": "332310",
    "end": "334910"
  },
  {
    "text": "We need to copy the DNS\nname of this load balancer,",
    "start": "339570",
    "end": "342540"
  },
  {
    "text": "as it will be used in\nour certificate request.",
    "start": "342540",
    "end": "344943"
  },
  {
    "text": "Before we request our certificate,",
    "start": "352260",
    "end": "354210"
  },
  {
    "text": "we'll create a new namespace",
    "start": "354210",
    "end": "355470"
  },
  {
    "text": "that will contain our application",
    "start": "355470",
    "end": "357240"
  },
  {
    "text": "and the secret or\ncertificate that we create.",
    "start": "357240",
    "end": "359522"
  },
  {
    "text": "Next, I'll create a new\nfile called eks-cert.yaml,",
    "start": "379830",
    "end": "383639"
  },
  {
    "text": "where we'll place the information\nfor a certificate request.",
    "start": "383640",
    "end": "386640"
  },
  {
    "text": "Here you can see, I'm placing the DNS name",
    "start": "388620",
    "end": "390870"
  },
  {
    "text": "of that load balancer\nunder the DNS name section",
    "start": "390870",
    "end": "394680"
  },
  {
    "text": "of the certificate request.",
    "start": "394680",
    "end": "396182"
  },
  {
    "text": "We're also naming this eks-cert,",
    "start": "398340",
    "end": "401160"
  },
  {
    "text": "and it uses the namespace we just created",
    "start": "401160",
    "end": "403050"
  },
  {
    "text": "in the previous command.",
    "start": "403050",
    "end": "404250"
  },
  {
    "text": "I'll save this file and exit.",
    "start": "406410",
    "end": "408003"
  },
  {
    "text": "Now we can use the same apply\ncommand we've used before",
    "start": "410340",
    "end": "413370"
  },
  {
    "text": "to go ahead and request\nthis new certificate.",
    "start": "413370",
    "end": "415620"
  },
  {
    "text": "Let's use the get certificate command",
    "start": "418680",
    "end": "420570"
  },
  {
    "text": "to check the status of our certificate.",
    "start": "420570",
    "end": "423210"
  },
  {
    "text": "It should show ready.",
    "start": "423210",
    "end": "424563"
  },
  {
    "text": "We can also use the\ndescribe certificate command",
    "start": "436590",
    "end": "439410"
  },
  {
    "text": "to see more details about\nthis certificate we requested.",
    "start": "439410",
    "end": "442233"
  },
  {
    "text": "You may notice a few things\nin the result of this command.",
    "start": "443640",
    "end": "447033"
  },
  {
    "text": "We can see the DNS name\nof the load balancer",
    "start": "447960",
    "end": "450060"
  },
  {
    "text": "that we put in the certificate request,",
    "start": "450060",
    "end": "452250"
  },
  {
    "text": "as well as the\neks-example-domain, common name,",
    "start": "452250",
    "end": "455490"
  },
  {
    "text": "used again in that certificate\nrequest from earlier.",
    "start": "455490",
    "end": "458103"
  },
  {
    "text": "We can also see that the\ncertificate status is Ready,",
    "start": "459900",
    "end": "464343"
  },
  {
    "text": "and it is up-to-date and has not expired.",
    "start": "465750",
    "end": "467853"
  },
  {
    "text": "You'll also notice that\nthe key algorithm is RSA",
    "start": "468690",
    "end": "472320"
  },
  {
    "text": "and the key length is 2048.",
    "start": "472320",
    "end": "474483"
  },
  {
    "text": "We specified all this in\nour certificate request",
    "start": "475530",
    "end": "478260"
  },
  {
    "text": "as part of that eks-cert.yaml file.",
    "start": "478260",
    "end": "481680"
  },
  {
    "text": "Now we simply need to\ndeploy a demo application",
    "start": "481680",
    "end": "484539"
  },
  {
    "text": "and expose this application\nusing our ingress controller.",
    "start": "485400",
    "end": "488639"
  },
  {
    "text": "This will create a basic\nservice that we can expose",
    "start": "488640",
    "end": "491100"
  },
  {
    "text": "via our ingress controller.",
    "start": "491100",
    "end": "492753"
  },
  {
    "text": "I'll create a new file\nnamed hello-world.yaml.",
    "start": "493680",
    "end": "496350"
  },
  {
    "text": "Now I'll again use kubectl apply\nto deploy this new service.",
    "start": "508350",
    "end": "512552"
  },
  {
    "text": "So far, we've issued our certificate",
    "start": "516540",
    "end": "518639"
  },
  {
    "text": "and we've deployed the demo application.",
    "start": "518640",
    "end": "520800"
  },
  {
    "text": "Now we just need to expose\nthis new application",
    "start": "520800",
    "end": "523110"
  },
  {
    "text": "using a Kubernetes Ingress resource.",
    "start": "523110",
    "end": "525273"
  },
  {
    "text": "We'll create a new file\ncalled example-ingress.yaml,",
    "start": "526350",
    "end": "529652"
  },
  {
    "text": "and add the following content.",
    "start": "530610",
    "end": "532110"
  },
  {
    "text": "We'll add our load balancer's DNS name",
    "start": "533250",
    "end": "535290"
  },
  {
    "text": "under the tls host and rules host field.",
    "start": "535290",
    "end": "538893"
  },
  {
    "text": "Now we just need to save this file,",
    "start": "541080",
    "end": "543480"
  },
  {
    "text": "and go ahead and apply\nthis resource as well.",
    "start": "543480",
    "end": "545730"
  },
  {
    "text": "Okay, our ingress\ncontroller has been created,",
    "start": "552390",
    "end": "555420"
  },
  {
    "text": "and it now has a certificate issued to it",
    "start": "555420",
    "end": "557610"
  },
  {
    "text": "to secure communications with TLS.",
    "start": "557610",
    "end": "561180"
  },
  {
    "text": "And that's it, we've issued a certificate",
    "start": "561180",
    "end": "563160"
  },
  {
    "text": "to our EKS cluster that will be used",
    "start": "563160",
    "end": "564839"
  },
  {
    "text": "to secure communications to\nour applications using TLS,",
    "start": "564840",
    "end": "567930"
  },
  {
    "text": "with TLS terminating at\nour ingress controller.",
    "start": "567930",
    "end": "570899"
  },
  {
    "text": "Thanks for your time, and make sure",
    "start": "570900",
    "end": "572190"
  },
  {
    "text": "to consult the ACM\nPrivate CA documentation",
    "start": "572190",
    "end": "574620"
  },
  {
    "text": "for more information\non issuing certificates",
    "start": "574620",
    "end": "576630"
  },
  {
    "text": "for Kubernetes workloads.",
    "start": "576630",
    "end": "578133"
  }
]