[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "uh good evening everyone um i'm chaitan dhandekar from the aws cloud formation team and",
    "start": "799",
    "end": "6160"
  },
  {
    "text": "this is the best practices session and i have a few members from my team",
    "start": "6160",
    "end": "11599"
  },
  {
    "text": "here and we are not planning to do any dance here but we do a lot of that under the covers the purpose is that",
    "start": "11599",
    "end": "19760"
  },
  {
    "text": "after this session we would love to get take your questions and take your feedback and you can talk",
    "start": "19760",
    "end": "26720"
  },
  {
    "text": "to any of us so i just wanted to introduce my team here and then we'll get started with the best practices session",
    "start": "26720",
    "end": "34079"
  },
  {
    "text": "the goal",
    "start": "36640",
    "end": "44640"
  },
  {
    "start": "37000",
    "end": "37000"
  },
  {
    "text": "thank you i know they work really hard to make this happen the goal of this session is three-fold",
    "start": "44640",
    "end": "51680"
  },
  {
    "text": "first of all you are using cloud formation because you want to reduce the time required and",
    "start": "51680",
    "end": "57120"
  },
  {
    "text": "the effort required to manage infrastructure and applications and i hope some of these best practices",
    "start": "57120",
    "end": "63440"
  },
  {
    "text": "will help you reduce that time and effort even further second",
    "start": "63440",
    "end": "69040"
  },
  {
    "text": "even though cloud formation automates a lot of tasks for you you still need visibility into how cloud",
    "start": "69040",
    "end": "76479"
  },
  {
    "text": "cloud formation does its work and there are some tools here which will allow you to do",
    "start": "76479",
    "end": "82159"
  },
  {
    "text": "to do that and lastly you want to be rest assured",
    "start": "82159",
    "end": "87200"
  },
  {
    "text": "that when you are provisioning a stack updating a stack or deleting it things work as expected and then there",
    "start": "87200",
    "end": "94799"
  },
  {
    "text": "are some best practices in this session which will help you ensure that",
    "start": "94799",
    "end": "101840"
  },
  {
    "text": "when you use cloud formation your workflow might look something like this you design the infrastructure that you",
    "start": "103520",
    "end": "110880"
  },
  {
    "text": "want for the business problem that you're solving then you model that in the templates and",
    "start": "110880",
    "end": "116399"
  },
  {
    "text": "you're also writing application code that will ultimately run in the stacks",
    "start": "116399",
    "end": "121680"
  },
  {
    "text": "and then you create the stacks and you go over that process again and again to continuously improve your",
    "start": "121680",
    "end": "127200"
  },
  {
    "text": "product and this session is going to follow that general workflow",
    "start": "127200",
    "end": "132480"
  },
  {
    "text": "we'll see best practices in each of those stages",
    "start": "132480",
    "end": "137520"
  },
  {
    "text": "one of the first questions that you might have is how do you plan your stacks",
    "start": "138239",
    "end": "144080"
  },
  {
    "text": "should you model your entire architecture into a single stack 20 stacks a thousand stacks",
    "start": "144080",
    "end": "151200"
  },
  {
    "text": "should you use nested stacks ever to answer that question i have a few",
    "start": "151200",
    "end": "158560"
  },
  {
    "text": "patterns here which are used very successfully by some of our customers",
    "start": "158560",
    "end": "164560"
  },
  {
    "text": "the first one is to think in terms of layers and environments when you think about",
    "start": "164560",
    "end": "172000"
  },
  {
    "start": "167000",
    "end": "167000"
  },
  {
    "text": "your aws resources they are they're very different their life cycles are different the base",
    "start": "172000",
    "end": "178239"
  },
  {
    "text": "network is not going to change as often as some of the front-end applications",
    "start": "178239",
    "end": "184080"
  },
  {
    "text": "so if their life cycle is different they probably belong to a different layer of stacks",
    "start": "184080",
    "end": "190319"
  },
  {
    "text": "if the ownership is different if a network admin manages the network stack and a web developer manages the front end",
    "start": "190319",
    "end": "197440"
  },
  {
    "text": "they probably belong to a separate stack and there might be some shared services",
    "start": "197440",
    "end": "203760"
  },
  {
    "text": "which have their own stack so if there is a common database service that is used by multiple applications",
    "start": "203760",
    "end": "210080"
  },
  {
    "text": "you cannot bundle it with a one particular application you have to create a separate stack for it",
    "start": "210080",
    "end": "216480"
  },
  {
    "text": "and each layer could be one stack or multiple stacks based on the complexity once you have",
    "start": "216480",
    "end": "224080"
  },
  {
    "text": "that layered architecture figured out and modeled into templates then you can",
    "start": "224080",
    "end": "229200"
  },
  {
    "text": "easily replicate it in your dev environments or if you are expanding to a new region",
    "start": "229200",
    "end": "235439"
  },
  {
    "text": "in the new region the next principle we see our customers",
    "start": "235439",
    "end": "240879"
  },
  {
    "start": "239000",
    "end": "239000"
  },
  {
    "text": "apply very effectively is service oriented architecture i think",
    "start": "240879",
    "end": "245920"
  },
  {
    "text": "every one of us is familiar with it it's about dividing a big business problem",
    "start": "245920",
    "end": "251280"
  },
  {
    "text": "into manageable parts and each service or that manageable part is a",
    "start": "251280",
    "end": "257840"
  },
  {
    "text": "unit of functionality and has a very clearly defined contract with other parts of the system so if i",
    "start": "257840",
    "end": "265360"
  },
  {
    "text": "imagine a food ordering business they might have a service oriented architect",
    "start": "265360",
    "end": "270639"
  },
  {
    "text": "architecture like this and the good news is when you go to create stacks to manage something",
    "start": "270639",
    "end": "278400"
  },
  {
    "text": "like this these stacks and the and their relationships will look exactly like",
    "start": "278400",
    "end": "283520"
  },
  {
    "text": "this you might have a food catalog catalog stack and a customer db stack",
    "start": "283520",
    "end": "288880"
  },
  {
    "text": "and they also have relation relationships and how do you create those relationships",
    "start": "288880",
    "end": "294240"
  },
  {
    "text": "by using outputs and parameters so if the food catalog stack requires some",
    "start": "294240",
    "end": "300800"
  },
  {
    "text": "customer information then you you can publish the customer db",
    "start": "300800",
    "end": "306800"
  },
  {
    "text": "endpoint from that customer db stack and then pass it on as an input",
    "start": "306800",
    "end": "312000"
  },
  {
    "text": "parameter to the food catalog stack",
    "start": "312000",
    "end": "316400"
  },
  {
    "text": "nested stack is a cloudformation feature it allows you to reference on other",
    "start": "319759",
    "end": "326080"
  },
  {
    "text": "templates inside a given template and when you go and create a stack from that top level template",
    "start": "326080",
    "end": "332720"
  },
  {
    "text": "cloud formation will automatically create a tree of stacks based on the templates reference inside",
    "start": "332720",
    "end": "339039"
  },
  {
    "text": "it what is this good for",
    "start": "339039",
    "end": "344320"
  },
  {
    "text": "a prime use case for nested stacks is reusability to take an example let's say",
    "start": "344320",
    "end": "350479"
  },
  {
    "text": "you have lots of websites which follow a common pattern a common",
    "start": "350479",
    "end": "355520"
  },
  {
    "text": "load balancing and auto scaling pattern obviously you want to maintain that",
    "start": "355520",
    "end": "361280"
  },
  {
    "text": "pattern in one place and use it in all websites so that you don't have to maintain it in",
    "start": "361280",
    "end": "366960"
  },
  {
    "text": "maintain it in each of the website templates you can do that using nested stacks have",
    "start": "366960",
    "end": "372160"
  },
  {
    "text": "a separate template for elb and auto scaling and reference it in each of your",
    "start": "372160",
    "end": "377360"
  },
  {
    "text": "websites and it still gives you some level of customizability because the elb and auto scaling",
    "start": "377360",
    "end": "384479"
  },
  {
    "text": "template accepts parameters can have mappings so we can still customize it to some extent",
    "start": "384479",
    "end": "389919"
  },
  {
    "text": "for each of those websites a second use of nested stacks is role specialization",
    "start": "389919",
    "end": "398400"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "so if you have multiple people in your team you can farm out the work of creating templates",
    "start": "398400",
    "end": "403759"
  },
  {
    "text": "based on their areas of expertise and then still create a combined solution by hitting one",
    "start": "403759",
    "end": "409919"
  },
  {
    "text": "button creating a stack which creates a tree of stacks",
    "start": "409919",
    "end": "414960"
  },
  {
    "text": "using cloud formation is similar to any other software development process",
    "start": "417680",
    "end": "422720"
  },
  {
    "text": "in that you code the templates you try to create stacks you hit errors",
    "start": "422720",
    "end": "428880"
  },
  {
    "text": "you debug those errors and you finally get to what you actually want a running stack",
    "start": "428880",
    "end": "434720"
  },
  {
    "text": "so are there any ways to minimize that time required to create a stack or reduce the errors that you hit i",
    "start": "434720",
    "end": "442080"
  },
  {
    "text": "think there are the first way is to use the validate template api",
    "start": "442080",
    "end": "448479"
  },
  {
    "start": "445000",
    "end": "445000"
  },
  {
    "text": "the validate template api does some basic syntactic validation like making sure the json syntax of your",
    "start": "448479",
    "end": "455280"
  },
  {
    "text": "template is valid it has all the right sections like the parameters section or the resources",
    "start": "455280",
    "end": "460560"
  },
  {
    "text": "section and not an unknown section or that it does not have any circular dependencies",
    "start": "460560",
    "end": "467039"
  },
  {
    "text": "when you are using the console or the aws toolkits for visual studio and visual studio and eclipse this is",
    "start": "467039",
    "end": "474080"
  },
  {
    "text": "done automatically for you but if you are using command line or calling the cloudformation apis directly",
    "start": "474080",
    "end": "480639"
  },
  {
    "text": "or using sdks be sure that you use the validate template api",
    "start": "480639",
    "end": "487120"
  },
  {
    "text": "the next practice is using the parameter types and this is very new we",
    "start": "488479",
    "end": "493520"
  },
  {
    "start": "489000",
    "end": "489000"
  },
  {
    "text": "just launched it last week when we looked at the causes of stack",
    "start": "493520",
    "end": "498800"
  },
  {
    "text": "creation failures what we found is that a vast majority of failures actually happen",
    "start": "498800",
    "end": "505360"
  },
  {
    "text": "because of bad input garbage in garbage out so we decided to launch this feature",
    "start": "505360",
    "end": "511199"
  },
  {
    "text": "which allows you to avoid entry of bad input into the stack when",
    "start": "511199",
    "end": "516240"
  },
  {
    "text": "you create a stack it has two benefits number one having these parameter types",
    "start": "516240",
    "end": "522880"
  },
  {
    "text": "allows the cloud formation console to provide you a much better ui so for example if i'm hosting a web",
    "start": "522880",
    "end": "530000"
  },
  {
    "text": "application inside a vpc i am likely passing in the vpc id or the subnet ids",
    "start": "530000",
    "end": "536080"
  },
  {
    "text": "into the stack as parameters and earlier i had to look up a vpc id",
    "start": "536080",
    "end": "542000"
  },
  {
    "text": "somewhere and then copy and paste it or type it in when i when i went and created a stack in the",
    "start": "542000",
    "end": "548399"
  },
  {
    "text": "console not anymore using these types allows the console",
    "start": "548399",
    "end": "553600"
  },
  {
    "text": "to show you a valid list of vpcs in your account for the for the region",
    "start": "553600",
    "end": "559600"
  },
  {
    "text": "that you are operating in so there is no way you can pass in an invalid vpc id",
    "start": "559600",
    "end": "565200"
  },
  {
    "text": "and this is also useful when you're not using the console let's say you have a continuous integration pipeline",
    "start": "565200",
    "end": "571120"
  },
  {
    "text": "and it is automated to call cloudformation this is still useful because when you use these parameter",
    "start": "571120",
    "end": "577920"
  },
  {
    "text": "types it allows cloud formation to validate parameters",
    "start": "577920",
    "end": "583200"
  },
  {
    "text": "right at the beginning of the stack creation workflow earlier you had to wait a few minutes",
    "start": "583200",
    "end": "590080"
  },
  {
    "text": "until cloud formation went through its regular workflow and actually tried to create an instance",
    "start": "590080",
    "end": "596160"
  },
  {
    "text": "that used some invalid parameter not anymore the parameter if the",
    "start": "596160",
    "end": "602399"
  },
  {
    "text": "parameter is invalid it will be detected just in a few seconds",
    "start": "602399",
    "end": "607440"
  },
  {
    "text": "saving you a lot of time and effort and money",
    "start": "607440",
    "end": "612880"
  },
  {
    "text": "and while we are on the topic of parameter parameters here is another feature you should use",
    "start": "614160",
    "end": "620079"
  },
  {
    "start": "615000",
    "end": "615000"
  },
  {
    "text": "to help your users pass in valid parameter values",
    "start": "620079",
    "end": "625279"
  },
  {
    "text": "in this example this is a this is an example from a template which creates a windows server and the",
    "start": "625279",
    "end": "632959"
  },
  {
    "text": "scenario is that i want to limit the ip addresses from which the windows server could",
    "start": "632959",
    "end": "640240"
  },
  {
    "text": "accept remote desktop connections so i'm passing in cder blocks as a",
    "start": "640240",
    "end": "645760"
  },
  {
    "text": "parameter and using parameter constraints that min length max length and the regex for allowed pattern i can",
    "start": "645760",
    "end": "653680"
  },
  {
    "text": "make sure that the value passed in even though it's a string the value passed in follows the is a",
    "start": "653680",
    "end": "660399"
  },
  {
    "text": "valid cedar",
    "start": "660399",
    "end": "663519"
  },
  {
    "start": "665000",
    "end": "665000"
  },
  {
    "text": "keeping parameters aside one of the most common causes of stack creation",
    "start": "666320",
    "end": "671600"
  },
  {
    "text": "failures is insufficient permissions so make sure that when you give your user permissions",
    "start": "671600",
    "end": "679680"
  },
  {
    "text": "to create cloudformation stacks you also provide them permissions to create all of the stack resources",
    "start": "679680",
    "end": "687040"
  },
  {
    "text": "that are defined in the template now it might be the case that you don't",
    "start": "687040",
    "end": "692320"
  },
  {
    "text": "want to give the user a lot of permissions in that case you can create",
    "start": "692320",
    "end": "697920"
  },
  {
    "text": "an im role give that role permissions to create all of the resources and then have the user sort of request",
    "start": "697920",
    "end": "705839"
  },
  {
    "text": "creation of stacks on by using the identity of the im rules",
    "start": "705839",
    "end": "712560"
  },
  {
    "text": "along a similar vein when you make sure that your account has enough cloud formation",
    "start": "713040",
    "end": "719279"
  },
  {
    "text": "stack limits to for a user to create stacks also make sure that",
    "start": "719279",
    "end": "724720"
  },
  {
    "text": "there is enough quota left for all of the stack resources like the ec2 instance limit",
    "start": "724720",
    "end": "730000"
  },
  {
    "text": "or the rds storage limit",
    "start": "730000",
    "end": "734000"
  },
  {
    "text": "ultimately you are creating the stacks to run an application that drives your",
    "start": "735200",
    "end": "741519"
  },
  {
    "text": "business so how do you bring down that application those application bits onto your stacks",
    "start": "741519",
    "end": "748560"
  },
  {
    "text": "and start running the application there are several ways of doing this our",
    "start": "748560",
    "end": "755040"
  },
  {
    "text": "recommendation is to start with cloud formation in it cloud formation in it is a template",
    "start": "755040",
    "end": "762560"
  },
  {
    "start": "758000",
    "end": "758000"
  },
  {
    "text": "section that allows you to define the software that you want to install",
    "start": "762560",
    "end": "767839"
  },
  {
    "text": "and start running when an instance boots up and it has several benefits it is declarative it is updatable and",
    "start": "767839",
    "end": "775040"
  },
  {
    "text": "you can still bring in tools of your choice like a shell script or chef recipes that might you might",
    "start": "775040",
    "end": "781040"
  },
  {
    "text": "already have and i'm going to go through these benefits very quickly",
    "start": "781040",
    "end": "786720"
  },
  {
    "text": "but there is a much more detailed article available so note down that link at the bottom",
    "start": "786720",
    "end": "794560"
  },
  {
    "text": "to go to that article and throughout the rest of the",
    "start": "794560",
    "end": "799760"
  },
  {
    "text": "presentation you might find these links at the bottom which will take you to more details on",
    "start": "799760",
    "end": "805279"
  },
  {
    "text": "the topics that we are talking about going back to cloud formation in it",
    "start": "805279",
    "end": "811839"
  },
  {
    "text": "it is declarative meaning you tell crowd for cloud formation the state that you want to have the",
    "start": "811839",
    "end": "818959"
  },
  {
    "text": "packages that that you want installed on the instances the users that you want to be created and so",
    "start": "818959",
    "end": "826959"
  },
  {
    "text": "on and so forth without having to worry about writing code that makes that happen",
    "start": "826959",
    "end": "833920"
  },
  {
    "text": "and if you have a highly customized configuration which has to be captured in a script",
    "start": "834399",
    "end": "841680"
  },
  {
    "text": "you can still down download that script using that file section in cloudformation init and then",
    "start": "841680",
    "end": "848800"
  },
  {
    "text": "using the command section to execute that script",
    "start": "848800",
    "end": "853360"
  },
  {
    "text": "it is in it is debuggable it produces log files which can be",
    "start": "854079",
    "end": "860079"
  },
  {
    "text": "retrieved using by ssh into the instances and they could also be streamed out of an instance",
    "start": "860079",
    "end": "867600"
  },
  {
    "text": "if you are familiar with the ec2 user data script you would know that you can download an",
    "start": "868560",
    "end": "876079"
  },
  {
    "text": "application and bootstrap it using the user data script but once the instance starts running you",
    "start": "876079",
    "end": "883279"
  },
  {
    "text": "cannot change that application the reason is the user data script can only be executed",
    "start": "883279",
    "end": "889519"
  },
  {
    "text": "while launching an instance on the other hand if you use cloudformation in it it makes",
    "start": "889519",
    "end": "896240"
  },
  {
    "text": "your application updateable so for example if i want to install an extra package or",
    "start": "896240",
    "end": "903920"
  },
  {
    "text": "an updated updated version of the package on a running stack with a running instance i can simply",
    "start": "903920",
    "end": "910639"
  },
  {
    "text": "update the template and call and update stack on the stack and then the cloud form clear formation",
    "start": "910639",
    "end": "917199"
  },
  {
    "text": "daemon running on your instance will automatically pick up those changes",
    "start": "917199",
    "end": "923760"
  },
  {
    "text": "and update the application",
    "start": "923760",
    "end": "927839"
  },
  {
    "text": "you still have the control to bring in tools of your choice so in this snippet",
    "start": "929759",
    "end": "936480"
  },
  {
    "text": "i'm using cloud formation in it to install chef client and knife and then using a chef recipe",
    "start": "936480",
    "end": "944800"
  },
  {
    "text": "to install the application that i actually want to run on that stack",
    "start": "944800",
    "end": "955839"
  },
  {
    "text": "we support lots of different ways of authentication using iam roles access keys",
    "start": "956000",
    "end": "963920"
  },
  {
    "text": "username and password if you are if you want to download something from github obviously our recommendation is use im",
    "start": "963920",
    "end": "971040"
  },
  {
    "text": "rules wherever you can so to to wrap up this topic of",
    "start": "971040",
    "end": "978000"
  },
  {
    "text": "cloudformation init first of all use it and second when you do",
    "start": "978000",
    "end": "983519"
  },
  {
    "text": "there should be only three things in your data script number one update the cloud formation",
    "start": "983519",
    "end": "990079"
  },
  {
    "text": "scripts number two execute cf and init script",
    "start": "990079",
    "end": "995279"
  },
  {
    "text": "which in turn executes that cloud formation in its section and number three calls cfn signal",
    "start": "995279",
    "end": "1002720"
  },
  {
    "text": "to return the outcome of the application configuration back to the cloudformation service so",
    "start": "1002720",
    "end": "1008639"
  },
  {
    "text": "cloudformation service knows whether to consider that stack create complete or create failed",
    "start": "1008639",
    "end": "1015839"
  },
  {
    "start": "1018000",
    "end": "1018000"
  },
  {
    "text": "back in the old days that means until july of this year",
    "start": "1018880",
    "end": "1025839"
  },
  {
    "text": "you had when some configuration failed you had to ssh into an instance pull out",
    "start": "1026959",
    "end": "1033520"
  },
  {
    "text": "the log files and look at the logs to figure out what's going on very painful but in july we launched cloud watch logs",
    "start": "1033520",
    "end": "1041918"
  },
  {
    "text": "which which can pick up log files and stream them out of ec2 instances and this integrates",
    "start": "1041919",
    "end": "1048799"
  },
  {
    "text": "very well with cloud formation in it so if you are using cloudformationinnet you're going to have the cfn init log file",
    "start": "1048799",
    "end": "1056480"
  },
  {
    "text": "in that configuration you can start the cloudwatch log service the aws logs in the same cloudformation",
    "start": "1056480",
    "end": "1063840"
  },
  {
    "text": "init configuration and have it ship out the cf and init logs back to cloudwatch logs and once that",
    "start": "1063840",
    "end": "1070799"
  },
  {
    "text": "happens you can easily go to cloudwatch logs console and look at the configuration logs by",
    "start": "1070799",
    "end": "1077760"
  },
  {
    "start": "1073000",
    "end": "1073000"
  },
  {
    "text": "instance id or by any other dimension that you want to look that you want to use",
    "start": "1077760",
    "end": "1083200"
  },
  {
    "text": "making it very simple to at least go through the laws",
    "start": "1083200",
    "end": "1088720"
  },
  {
    "text": "you want to keep the stacks running as expected when they when once they are created and not worry",
    "start": "1093280",
    "end": "1098880"
  },
  {
    "text": "about them at all the first best practice to ensure that",
    "start": "1098880",
    "end": "1104960"
  },
  {
    "text": "is to not touch it",
    "start": "1104960",
    "end": "1109840"
  },
  {
    "text": "it's kind of obvious but how do you make sure that it is not touched unintentionally you can protect the",
    "start": "1111120",
    "end": "1118480"
  },
  {
    "start": "1117000",
    "end": "1117000"
  },
  {
    "text": "stack from accidental changes by using iem policies pretty easily let's go back to the",
    "start": "1118480",
    "end": "1125440"
  },
  {
    "text": "original layered architecture example let's say you have a very important network stack with your vpc settings subnet settings",
    "start": "1125440",
    "end": "1133200"
  },
  {
    "text": "that you don't want accidentally changed you when your web developers are creating and deleting web applications",
    "start": "1133200",
    "end": "1139360"
  },
  {
    "text": "you don't want them to click on the network stack and delete it you can do that using by setting up im",
    "start": "1139360",
    "end": "1146400"
  },
  {
    "text": "policy once you have the network stack you can set this im policy which denies",
    "start": "1146400",
    "end": "1152799"
  },
  {
    "text": "anyone access to that network stack to do modification on that network stack and of course when you",
    "start": "1152799",
    "end": "1159600"
  },
  {
    "text": "actually want to do a modification you can always disable this policy and then once the modification is done you can",
    "start": "1159600",
    "end": "1165600"
  },
  {
    "text": "reapply this policy and you can flip it around as well",
    "start": "1165600",
    "end": "1171360"
  },
  {
    "text": "if you have a set of web developers and you want them to touch only web applications you can apply this",
    "start": "1171360",
    "end": "1178000"
  },
  {
    "text": "policy to them and say any stack that they create modify or delete has to follow this pattern",
    "start": "1178000",
    "end": "1185440"
  },
  {
    "text": "and one of the implicit things here is that for setting these policies you need to",
    "start": "1185440",
    "end": "1190720"
  },
  {
    "text": "follow a naming pattern in the stacks",
    "start": "1190720",
    "end": "1194880"
  },
  {
    "text": "so the the best practice we saw earlier is good for protecting",
    "start": "1198080",
    "end": "1203200"
  },
  {
    "text": "resources at the stack level but how do you make sure that individual resources inside the",
    "start": "1203200",
    "end": "1210159"
  },
  {
    "text": "stack are protected as well we'll look at it in a minute but first of all i want to",
    "start": "1210159",
    "end": "1218240"
  },
  {
    "text": "i want to share that changing a stack resource outside of cloud",
    "start": "1218240",
    "end": "1223919"
  },
  {
    "text": "formation is never a good idea for example if you have created a load balancer through a cloudformation",
    "start": "1223919",
    "end": "1230159"
  },
  {
    "text": "template you should not go to the console and change some properties on the load balancer two",
    "start": "1230159",
    "end": "1237120"
  },
  {
    "text": "reasons for that number one you know if you do that then you no longer have version control",
    "start": "1237120",
    "end": "1242799"
  },
  {
    "text": "infrastructure you can no longer look at your templates and be sure that that's what is running in",
    "start": "1242799",
    "end": "1248720"
  },
  {
    "text": "your account and number two cloud formation doesn't know about it",
    "start": "1248720",
    "end": "1254080"
  },
  {
    "text": "so if you change something outside of cloud formation and then come back to cloudformation to",
    "start": "1254080",
    "end": "1259360"
  },
  {
    "text": "run an update stack the update might have unexpected results",
    "start": "1259360",
    "end": "1265039"
  },
  {
    "text": "now we understand that there will be valid situations where you would need to",
    "start": "1265039",
    "end": "1270320"
  },
  {
    "text": "change a stack resource outside of cloud formation if it's middle of the night and if a",
    "start": "1270320",
    "end": "1276159"
  },
  {
    "text": "server is crashing you you might want to go to the console and try a few different things",
    "start": "1276159",
    "end": "1281840"
  },
  {
    "text": "what we ask is that once that emergency is gone make sure that you have a follow-up item",
    "start": "1281840",
    "end": "1288000"
  },
  {
    "text": "to go back undo those ad hoc changes make those changes changes to the template and flow them",
    "start": "1288000",
    "end": "1294000"
  },
  {
    "text": "through cloud formation at least before you do the next stack update",
    "start": "1294000",
    "end": "1300240"
  },
  {
    "text": "going back to how to protect stack resources using im policies there",
    "start": "1301440",
    "end": "1308320"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "are some ways for example if you are protecting any of the ec2 resources including instances",
    "start": "1308320",
    "end": "1315679"
  },
  {
    "text": "security groups vpcs you can use tag-based im policies if you have a",
    "start": "1315679",
    "end": "1322799"
  },
  {
    "text": "group of console users like in this example you can put a policy on them",
    "start": "1322799",
    "end": "1328080"
  },
  {
    "text": "that denies them the right to terminate an instance if the instance has cloud formation tag",
    "start": "1328080",
    "end": "1334400"
  },
  {
    "text": "on it and cloud formation tags any resource automatically with that pattern so",
    "start": "1334400",
    "end": "1340159"
  },
  {
    "text": "as long as that policy exists nobody can change a cloud formation create a resource",
    "start": "1340159",
    "end": "1345280"
  },
  {
    "text": "from the console",
    "start": "1345280",
    "end": "1348159"
  },
  {
    "text": "and one of the obvious things to keep a stack operating is to have a record of why a resource",
    "start": "1350400",
    "end": "1357919"
  },
  {
    "text": "was created in a particular way and a comments are comments are a very",
    "start": "1357919",
    "end": "1363679"
  },
  {
    "text": "good way to do that and you can have template level comments or stack level comments in the",
    "start": "1363679",
    "end": "1369200"
  },
  {
    "text": "description section and you can also have resource level comments by using that metadata section that's available on",
    "start": "1369200",
    "end": "1376080"
  },
  {
    "text": "every resource type",
    "start": "1376080",
    "end": "1379120"
  },
  {
    "text": "how do you update staff update stacks safely our customers use both of these styles",
    "start": "1381360",
    "end": "1389760"
  },
  {
    "text": "very successfully the first one is in place update where you are updating a template",
    "start": "1389760",
    "end": "1394880"
  },
  {
    "text": "and using that template to update an existing stack by calling the update",
    "start": "1394880",
    "end": "1399919"
  },
  {
    "text": "stack api the other style is where you take that updated template and",
    "start": "1399919",
    "end": "1406799"
  },
  {
    "text": "create a completely separate stack from scratch and once that new stack is",
    "start": "1406799",
    "end": "1412799"
  },
  {
    "text": "up and running and working properly you can you switch traffic or whatever workload you are running on the stack",
    "start": "1412799",
    "end": "1418720"
  },
  {
    "text": "to the to that new stack there are merits of both of these methods and you",
    "start": "1418720",
    "end": "1424559"
  },
  {
    "text": "should choose whichever fits your style the best the in-place update",
    "start": "1424559",
    "end": "1429760"
  },
  {
    "text": "is faster obviously because incrementally updating a stack is going",
    "start": "1429760",
    "end": "1435200"
  },
  {
    "text": "to be typically faster than creating a whole new stack from scratch it's cost efficient because you're not",
    "start": "1435200",
    "end": "1440720"
  },
  {
    "text": "creating a duplicate and migrating application state and data",
    "start": "1440720",
    "end": "1447120"
  },
  {
    "text": "that's there in that existing stack is straightforward because you're not changing anything in terms of data or",
    "start": "1447120",
    "end": "1452720"
  },
  {
    "text": "state whereas on the in the other style you need to figure out strategies to migrate",
    "start": "1452720",
    "end": "1458720"
  },
  {
    "text": "application state and data into the new stack possibly by creating a completely separate data stack",
    "start": "1458720",
    "end": "1467360"
  },
  {
    "text": "the the merit of blue green deployment is that you at no point you are touching a",
    "start": "1468000",
    "end": "1473919"
  },
  {
    "text": "working stack if something goes wrong with the new stack you always have that option to immediately fall back",
    "start": "1473919",
    "end": "1479760"
  },
  {
    "text": "to the old stack can you have best of these both worlds",
    "start": "1479760",
    "end": "1487200"
  },
  {
    "text": "you possibly can there are a few best practices which can get you there",
    "start": "1487200",
    "end": "1493440"
  },
  {
    "text": "we recommend that you follow the stack update checklist to make the in-place updates more",
    "start": "1493600",
    "end": "1499039"
  },
  {
    "start": "1494000",
    "end": "1494000"
  },
  {
    "text": "reliable number one is to understand what",
    "start": "1499039",
    "end": "1504080"
  },
  {
    "text": "resources are going to be changed and this obviously means comparing the two templates the original one and the",
    "start": "1504080",
    "end": "1510240"
  },
  {
    "text": "new one for obvious textual differences and it also means make being aware of",
    "start": "1510240",
    "end": "1517919"
  },
  {
    "text": "the refs and get ads because those create resource relationships and when you create one resource",
    "start": "1517919",
    "end": "1523520"
  },
  {
    "text": "it might have an impact on a related resource",
    "start": "1523520",
    "end": "1529840"
  },
  {
    "text": "next is to understand how the update will be performed",
    "start": "1532400",
    "end": "1537520"
  },
  {
    "text": "there are three possibilities depending on the resource type and the property that you're changing",
    "start": "1537520",
    "end": "1543360"
  },
  {
    "text": "the update may might have absolutely no interruption to the resource that you are updating",
    "start": "1543360",
    "end": "1548880"
  },
  {
    "text": "it might have some interruption and in some cases we may have to create a completely new version of the",
    "start": "1548880",
    "end": "1554880"
  },
  {
    "text": "resource and then delete the old one so make sure that you refer to our documentation",
    "start": "1554880",
    "end": "1561520"
  },
  {
    "text": "to find out what kind of update it is going to be and be sure that that is okay for your",
    "start": "1561520",
    "end": "1566799"
  },
  {
    "text": "scenario the next two checks on this checklist",
    "start": "1566799",
    "end": "1572080"
  },
  {
    "text": "are very important from the perspective of avoiding update rollback failed state",
    "start": "1572080",
    "end": "1580880"
  },
  {
    "text": "number one is to make sure that you give that user enough im permissions not only to update",
    "start": "1580880",
    "end": "1587840"
  },
  {
    "text": "the stack but also to do the inverse of that update the reason is if update fails",
    "start": "1587840",
    "end": "1595200"
  },
  {
    "text": "cloudformation wants you to roll back to the last known good state",
    "start": "1595200",
    "end": "1600559"
  },
  {
    "text": "so oftentimes we see cases where there is permission given to go forward but if something fails during an update",
    "start": "1600559",
    "end": "1607760"
  },
  {
    "text": "there are no permissions to go backwards resulting into an update rollback fail state",
    "start": "1607760",
    "end": "1613600"
  },
  {
    "text": "and the next practice is something we just talked a couple of slides ago which is do not",
    "start": "1613600",
    "end": "1620240"
  },
  {
    "text": "change stack resources outside of the stack and then update the stack",
    "start": "1620240",
    "end": "1626159"
  },
  {
    "text": "if you there if there was a case where you had to change a resource outside of the stack make sure that you regularize that",
    "start": "1626159",
    "end": "1632559"
  },
  {
    "text": "change you undo the change outside and put it through cloud formation and we just launched a service yesterday",
    "start": "1632559",
    "end": "1638640"
  },
  {
    "text": "aws config which can help you with that it detects any change to any resource",
    "start": "1638640",
    "end": "1644640"
  },
  {
    "text": "eventually it will be available in all regions for all resources so you you can easily find out what",
    "start": "1644640",
    "end": "1650960"
  },
  {
    "text": "stack resources were changed outside of the stack and there is always cloud former you can",
    "start": "1650960",
    "end": "1659120"
  },
  {
    "text": "use this utility to look at a change resource and actually get a template snippet out",
    "start": "1659120",
    "end": "1665360"
  },
  {
    "text": "of it and then once you have that snippet you can compare the current state of that resource in a",
    "start": "1665360",
    "end": "1671919"
  },
  {
    "text": "template form with the template that it was supposed to be and that way you know if the resource has drifted or not",
    "start": "1671919",
    "end": "1682240"
  },
  {
    "start": "1682000",
    "end": "1682000"
  },
  {
    "text": "even if you are following those best practices for update there might be oversight so what",
    "start": "1682240",
    "end": "1689440"
  },
  {
    "text": "you so how do you avoid",
    "start": "1689440",
    "end": "1694080"
  },
  {
    "text": "an unexpected change because of an oversight let's say you thought that you're not changing a",
    "start": "1694559",
    "end": "1699760"
  },
  {
    "text": "database but it actually got touched and it something got changed",
    "start": "1699760",
    "end": "1704960"
  },
  {
    "text": "stack policies help you to avoid those kinds of accidents the example on the left side is a stack",
    "start": "1704960",
    "end": "1712159"
  },
  {
    "text": "policy which locks all the database resources in a stack",
    "start": "1712159",
    "end": "1717760"
  },
  {
    "text": "during a stack update so if you have that have that policy applied to a stack and then a template comes in which with",
    "start": "1717760",
    "end": "1724320"
  },
  {
    "text": "a database change the update will not happen the example on the right side",
    "start": "1724320",
    "end": "1730000"
  },
  {
    "text": "allows an instance update as long as the update does not result into deleting the",
    "start": "1730000",
    "end": "1735520"
  },
  {
    "text": "old instance and creating a completely new instance and the link at the bottom will show you",
    "start": "1735520",
    "end": "1740960"
  },
  {
    "text": "more details about how to use the stack policies",
    "start": "1740960",
    "end": "1745278"
  },
  {
    "start": "1747000",
    "end": "1747000"
  },
  {
    "text": "rolling updates is a cloud formation feature which allows you to keep an auto scaling group in operation",
    "start": "1749600",
    "end": "1757600"
  },
  {
    "text": "and still update it cloud formation allow cloud formation does that by dividing",
    "start": "1757600",
    "end": "1764480"
  },
  {
    "text": "the auto scaling group into batches so if you are i have an auto scaling group and i want to make an update on it",
    "start": "1764480",
    "end": "1771200"
  },
  {
    "text": "you can use rolling updates to divide that into batches and you can make and cloudformation will",
    "start": "1771200",
    "end": "1778320"
  },
  {
    "text": "make sure that at least one batch is healthy at any given time",
    "start": "1778320",
    "end": "1783679"
  },
  {
    "text": "doing the job that the auto skilling group is supposed to do and we use things like and you can use",
    "start": "1783679",
    "end": "1789840"
  },
  {
    "text": "things like elb health checks or any sort of test metrics that you might have to make sure",
    "start": "1789840",
    "end": "1796640"
  },
  {
    "text": "that when a batch comes up updated it is healthy and then you can signal cloud formation",
    "start": "1796640",
    "end": "1801840"
  },
  {
    "text": "back to tell cloud cloud formation to go ahead and update the next batch",
    "start": "1801840",
    "end": "1807200"
  },
  {
    "text": "and rolling updates as a feature has been available for more than a year so some of you may be familiar with it",
    "start": "1807200",
    "end": "1813120"
  },
  {
    "text": "what's good is we just launched an update which allows you to capture the whole",
    "start": "1813120",
    "end": "1820880"
  },
  {
    "text": "process in a single template in an automated way so you no longer have to put a pass time",
    "start": "1820880",
    "end": "1828399"
  },
  {
    "text": "first of all guess a pause time and put a pause time between two batches of updates you can",
    "start": "1828399",
    "end": "1834720"
  },
  {
    "text": "configure a template to automatically go and check elb to make sure the updated",
    "start": "1834720",
    "end": "1840240"
  },
  {
    "text": "batch is healthy and then signal cloud formation back to go ahead and update the next batch all in one template",
    "start": "1840240",
    "end": "1850720"
  },
  {
    "text": "now cloudformation supports a whole bunch of services we support over 20 aws services today and our",
    "start": "1850720",
    "end": "1858720"
  },
  {
    "text": "intention is to continue expanding support for all aws features and all aws services",
    "start": "1858720",
    "end": "1865760"
  },
  {
    "text": "but what if you have a scenario where you need to",
    "start": "1865760",
    "end": "1872000"
  },
  {
    "text": "provision something that is not yet supported in cloud formation",
    "start": "1872000",
    "end": "1878080"
  },
  {
    "text": "or you want to provision something on premises when you provision a cloud",
    "start": "1878080",
    "end": "1883519"
  },
  {
    "text": "formation stack or you want to provision something with a third party provider",
    "start": "1883519",
    "end": "1888640"
  },
  {
    "text": "when you provision a cloud formation stack how do you do that there are a couple of different patterns that we'll see the first",
    "start": "1888640",
    "end": "1896559"
  },
  {
    "text": "pattern is to leverage stack events let me take an example",
    "start": "1896559",
    "end": "1903200"
  },
  {
    "start": "1897000",
    "end": "1897000"
  },
  {
    "text": "i'm provisioning a web application and i want to use a third party service that gives me web analytics and i want",
    "start": "1903200",
    "end": "1910240"
  },
  {
    "text": "to provision a subscription for that web application whenever i provision a cloud formation stack",
    "start": "1910240",
    "end": "1917200"
  },
  {
    "text": "i can do that using stack events i can have cloudformation provision the web application which is",
    "start": "1917200",
    "end": "1923440"
  },
  {
    "text": "going to produce a bunch of stack events those can be easily delivered cloudformation",
    "start": "1923440",
    "end": "1929600"
  },
  {
    "text": "delivers them to sns topic and you can write a little worker application",
    "start": "1929600",
    "end": "1934799"
  },
  {
    "text": "that picks up those events in this case it will pick up the create complete event for the auto",
    "start": "1934799",
    "end": "1940399"
  },
  {
    "text": "scaling group and then pass in the message or write or execute the code that provisions the",
    "start": "1940399",
    "end": "1948240"
  },
  {
    "text": "tracking id or subscription in that third party service so this is a fairly simple way to",
    "start": "1948240",
    "end": "1954559"
  },
  {
    "text": "achieve that extension but there is no feedback back to cloud",
    "start": "1954559",
    "end": "1959679"
  },
  {
    "text": "formation if the subscription fails on the third party side you won't get any response back right",
    "start": "1959679",
    "end": "1966559"
  },
  {
    "text": "inside your cloudformation stack if you want a tighter integration if you want to treat",
    "start": "1966559",
    "end": "1972640"
  },
  {
    "text": "the external resource more as a first class citizen of your stack then you should use custom resources i'm",
    "start": "1972640",
    "end": "1980000"
  },
  {
    "text": "going to use the same example you have a web application and the third party analytics service",
    "start": "1980000",
    "end": "1988080"
  },
  {
    "start": "1981000",
    "end": "1981000"
  },
  {
    "text": "to use custom resources step one is that that third party service provider has to",
    "start": "1988799",
    "end": "1995600"
  },
  {
    "text": "implement a service capable of understanding create delete and update messages and",
    "start": "1995600",
    "end": "2002480"
  },
  {
    "text": "executing the code that actually goes and provisions that external resource once you have",
    "start": "2002480",
    "end": "2008000"
  },
  {
    "text": "that you can represent that external resource inside a cloud formation template all in one",
    "start": "2008000",
    "end": "2014799"
  },
  {
    "text": "templates and when cloud formation executes that template it will first create the web application",
    "start": "2014799",
    "end": "2020720"
  },
  {
    "text": "and when it sees that custom resource it will send a message out to that",
    "start": "2020720",
    "end": "2025760"
  },
  {
    "text": "service provider and wait for the response when the response comes back in",
    "start": "2025760",
    "end": "2032480"
  },
  {
    "text": "then if it's a success then cloudformation stack creation will go on if it's a failure then you will get a",
    "start": "2032480",
    "end": "2039600"
  },
  {
    "text": "create failed stack so you get to treat the stack and the external resource as one unit of",
    "start": "2039600",
    "end": "2046720"
  },
  {
    "text": "functionality which either succeeds together or fails together",
    "start": "2046720",
    "end": "2052800"
  },
  {
    "text": "now we looked at a lot of things that will make engineers happy how do you make security people happy or",
    "start": "2055359",
    "end": "2061040"
  },
  {
    "text": "how do you get them off of your back really quickly",
    "start": "2061040",
    "end": "2065598"
  },
  {
    "text": "one of the ways to do that is to produce and maintain a lot of data and",
    "start": "2066480",
    "end": "2072839"
  },
  {
    "text": "fortunately we do it for you cloudformation is integrated with aws",
    "start": "2072839",
    "end": "2078079"
  },
  {
    "start": "2075000",
    "end": "2075000"
  },
  {
    "text": "cloudtrail which logs cloudformation api calls and it also logs the calls that cloudformation",
    "start": "2078079",
    "end": "2086079"
  },
  {
    "text": "makes to other services and there is more good news which is cloud trail",
    "start": "2086079",
    "end": "2092000"
  },
  {
    "text": "is integrated with cloud watch logs which allows you to query these logs and also set alarms on them",
    "start": "2092000",
    "end": "2099280"
  },
  {
    "text": "so for example you can set an alarm for which triggers",
    "start": "2099280",
    "end": "2104320"
  },
  {
    "text": "when a particular stack id so if when somebody is trying to delete a particular stack",
    "start": "2104320",
    "end": "2109440"
  },
  {
    "text": "and the deletion attempt attempt fails say 50 times",
    "start": "2109440",
    "end": "2114640"
  },
  {
    "text": "you can always log those stack events into a data warehouse and then query them in any shape or form",
    "start": "2114880",
    "end": "2122640"
  },
  {
    "text": "and while we are on topic of audit and security i want to share two more security best",
    "start": "2122640",
    "end": "2128839"
  },
  {
    "text": "practices number one is there is no reason whatsoever to have secret keys and access keys in",
    "start": "2128839",
    "end": "2135680"
  },
  {
    "text": "your templates anything that you can do with secret keys and access keys should be doable",
    "start": "2135680",
    "end": "2141680"
  },
  {
    "text": "with an im role and it is much more secure and you never have to either pass in or hard code",
    "start": "2141680",
    "end": "2148000"
  },
  {
    "text": "a secret key and access key in a template and even when you need to pass in",
    "start": "2148000",
    "end": "2154079"
  },
  {
    "text": "sensitive information into a stack let's say it's a database stack and you want to pass in",
    "start": "2154079",
    "end": "2159119"
  },
  {
    "text": "the default password you should make sure that that parameter is marked no echo",
    "start": "2159119",
    "end": "2165839"
  },
  {
    "text": "and that tells cloud formation to not surface that data in any other",
    "start": "2165839",
    "end": "2172720"
  },
  {
    "text": "any any logs or data like the stack events",
    "start": "2172720",
    "end": "2177040"
  },
  {
    "text": "the next is for the finance team for a while we have provided you a",
    "start": "2178640",
    "end": "2184640"
  },
  {
    "text": "feature to estimate the cost of running a stack right",
    "start": "2184640",
    "end": "2190240"
  },
  {
    "text": "inside the cloudformation console there is a link to go to the cost estimator and there is also an api",
    "start": "2190240",
    "end": "2196800"
  },
  {
    "text": "that allows you to estimate the cost of a stack the new feature here is the one that",
    "start": "2196800",
    "end": "2204720"
  },
  {
    "text": "allows you to track actual cost of a stack when it's running",
    "start": "2204720",
    "end": "2210079"
  },
  {
    "text": "here is how it works first of all use that link at the bottom",
    "start": "2210079",
    "end": "2215119"
  },
  {
    "start": "2212000",
    "end": "2212000"
  },
  {
    "text": "which will tell you how to set up your monthly cost allocation report with tags enabled on it and once you",
    "start": "2215119",
    "end": "2222400"
  },
  {
    "text": "have that you go to the new feature which is the aws cost explorer",
    "start": "2222400",
    "end": "2228240"
  },
  {
    "text": "and it allows you to slice and dice data in any way you want",
    "start": "2228240",
    "end": "2233760"
  },
  {
    "text": "and it one of the ways you can slice the data is by tags and as you as you know cloudformation",
    "start": "2234560",
    "end": "2241280"
  },
  {
    "text": "tags each of the stack resources and the stack itself with the stack id",
    "start": "2241280",
    "end": "2246400"
  },
  {
    "text": "so you can filter your billing for a given stack and you can get insights like how much",
    "start": "2246400",
    "end": "2253520"
  },
  {
    "text": "that stack cost in a month and also you can look into it into the stack so in this case",
    "start": "2253520",
    "end": "2259119"
  },
  {
    "text": "i can see how much how much of the cost is the ec2 cost and how much of the cost is the rds",
    "start": "2259119",
    "end": "2264880"
  },
  {
    "text": "stack rds cost in one stack",
    "start": "2264880",
    "end": "2270880"
  },
  {
    "text": "now cloudformation is used by by the full breadth of aws customers startups enterprises",
    "start": "2270880",
    "end": "2278640"
  },
  {
    "text": "developers it admins system integrators isvs and there are even more ways",
    "start": "2278640",
    "end": "2286640"
  },
  {
    "text": "of using cloud formation and using it in a very effective way and we obviously",
    "start": "2286640",
    "end": "2292480"
  },
  {
    "text": "don't have time to go over each of those patterns but before ending this session",
    "start": "2292480",
    "end": "2297680"
  },
  {
    "text": "i do want to share one pattern which is becoming particularly popular",
    "start": "2297680",
    "end": "2303200"
  },
  {
    "text": "among our customers of all sizes and all types of businesses which is",
    "start": "2303200",
    "end": "2308800"
  },
  {
    "text": "integrating cloud formation in a devops pipeline now customers want to use devops because",
    "start": "2308800",
    "end": "2316240"
  },
  {
    "start": "2312000",
    "end": "2312000"
  },
  {
    "text": "they want to ship software faster and with less errors and they value cloud formation because",
    "start": "2316240",
    "end": "2323359"
  },
  {
    "text": "it enables devops even on the infrastructure you can up you can templatize the",
    "start": "2323359",
    "end": "2330160"
  },
  {
    "text": "infrastructure that you want to create in aws and then you can apply",
    "start": "2330160",
    "end": "2335359"
  },
  {
    "text": "all of these software engineering principles code reviews revision controls integration testing on your",
    "start": "2335359",
    "end": "2341440"
  },
  {
    "text": "cloudformation templates if you look at their pipeline this is",
    "start": "2341440",
    "end": "2347280"
  },
  {
    "text": "how it typically looks they have a group of application developers and a set of devops engineers or there",
    "start": "2347280",
    "end": "2354960"
  },
  {
    "text": "are many names for them they specialize in creating building block templates",
    "start": "2354960",
    "end": "2360000"
  },
  {
    "text": "vpcs subnets and so on and they also create a curated set of some higher level",
    "start": "2360000",
    "end": "2367680"
  },
  {
    "text": "templates like a generic php template or a generic mongodb template which helps",
    "start": "2367680",
    "end": "2374400"
  },
  {
    "text": "the application developers get a head start in whichever application they are building",
    "start": "2374400",
    "end": "2379839"
  },
  {
    "text": "and both of these groups follow the same tool chain issue tracking using visual studio",
    "start": "2379839",
    "end": "2386160"
  },
  {
    "text": "eclipse any other development tool code repositories which host the application code",
    "start": "2386160",
    "end": "2391760"
  },
  {
    "text": "and also the cloud formation templates and they follow processes like code reviews",
    "start": "2391760",
    "end": "2397359"
  },
  {
    "text": "and they are using continuous integration and that continuous integration server",
    "start": "2397359",
    "end": "2403839"
  },
  {
    "text": "not only builds application packages but it also packages the relevant",
    "start": "2403839",
    "end": "2409200"
  },
  {
    "text": "cloudformation templates with them one of the things to note is that the",
    "start": "2409200",
    "end": "2415359"
  },
  {
    "text": "generic templates go with the infrastructure developers and the application specific templates",
    "start": "2415359",
    "end": "2422000"
  },
  {
    "text": "go with the application developers so if i'm writing an application which needs a dynamodb table",
    "start": "2422000",
    "end": "2427520"
  },
  {
    "text": "that's a very specific requirements so i'm better off keeping that application template close",
    "start": "2427520",
    "end": "2433119"
  },
  {
    "text": "to my application code and once the ci server builds",
    "start": "2433119",
    "end": "2438880"
  },
  {
    "text": "makes a build anytime there is a check in the ci server is going to make a build and then ci server calls cloud formation",
    "start": "2438880",
    "end": "2444960"
  },
  {
    "text": "to first of all use those templates to create a stack and then deploy applications that are",
    "start": "2444960",
    "end": "2451920"
  },
  {
    "text": "built along with the templates and you must be familiar with the ci process",
    "start": "2451920",
    "end": "2458000"
  },
  {
    "text": "where you know you would do that you would do testing and then integration and eventually promote it to",
    "start": "2458000",
    "end": "2464839"
  },
  {
    "text": "production so that's all i have for this session",
    "start": "2464839",
    "end": "2470400"
  },
  {
    "text": "today and i have three requests for you number one please provide us feedback about",
    "start": "2470400",
    "end": "2475599"
  },
  {
    "text": "this session that's the top link the second thing is",
    "start": "2475599",
    "end": "2481040"
  },
  {
    "text": "this is really a two-two-way process i'm sure you have some some best practices that we don't",
    "start": "2481040",
    "end": "2486960"
  },
  {
    "text": "know about and we would love to hear about them share with other customers so please",
    "start": "2486960",
    "end": "2492000"
  },
  {
    "text": "contact us at that twitter handle if you have any best practices and whatever i talked about is documented in",
    "start": "2492000",
    "end": "2499200"
  },
  {
    "text": "our documentation over there thank you",
    "start": "2499200",
    "end": "2505680"
  }
]