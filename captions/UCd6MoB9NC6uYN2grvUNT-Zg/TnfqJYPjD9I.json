[
  {
    "start": "0",
    "end": "330000"
  },
  {
    "text": "hi everyone welcome thank you all for being here today my name is James swinny",
    "start": "599",
    "end": "6879"
  },
  {
    "text": "I am a software development engineer at AWS and I work on the AWS command line",
    "start": "6879",
    "end": "13320"
  },
  {
    "text": "interface as well as the AWS SDK for python also known as Bodo",
    "start": "13320",
    "end": "19000"
  },
  {
    "text": "3 and today I'm going to be talking about automating AWS with the AWS CLI so",
    "start": "19000",
    "end": "26560"
  },
  {
    "text": "I'll show you tips techniques and tools that you can use to automate various AWS",
    "start": "26560",
    "end": "32238"
  },
  {
    "text": "tasks that you might have and I'll be doing this with the AWS CLI so I assume most of you are familiar",
    "start": "32239",
    "end": "40480"
  },
  {
    "text": "with the AWS CLI and have used it before um you know I still remember",
    "start": "40480",
    "end": "45559"
  },
  {
    "text": "tagging the One release of the AWS CLI just over two years ago it was a very",
    "start": "45559",
    "end": "52800"
  },
  {
    "text": "exciting time we were all very excited and we had put a lot of work in",
    "start": "52800",
    "end": "58199"
  },
  {
    "text": "getting to the 1.0 release and we could not wait to see how customers are going",
    "start": "58199",
    "end": "63359"
  },
  {
    "text": "to use the AWS CLI and in those two years we've had a",
    "start": "63359",
    "end": "69520"
  },
  {
    "text": "chance to talk with customers to see how they're using the AWS CLI and in general",
    "start": "69520",
    "end": "74840"
  },
  {
    "text": "we observe two usage modes now the first mode that we generally see people use with the AWS CLI this interactive mode",
    "start": "74840",
    "end": "82479"
  },
  {
    "text": "that's where I have a terminal open I'm running AWS space ec2 space some command",
    "start": "82479",
    "end": "88840"
  },
  {
    "text": "and I might be doing this for number of reasons maybe what I'm doing is exploratory in nature I'm looking for",
    "start": "88840",
    "end": "95159"
  },
  {
    "text": "say um a new service I'm exploring the new Services API I might be debugging or",
    "start": "95159",
    "end": "100680"
  },
  {
    "text": "troubleshooting or perhaps a task that I'm doing just requires a oneliner you know copy a file from my local file",
    "start": "100680",
    "end": "107799"
  },
  {
    "text": "system to an Amazon S3 bucket it's a oneliner in this CLI but we also see this other usage",
    "start": "107799",
    "end": "114680"
  },
  {
    "text": "mode and that's where customers are taking CLI commands and combining them together using the CLI",
    "start": "114680",
    "end": "120680"
  },
  {
    "text": "almost as a toolkit as an SDK to build these higher levels of abstraction that",
    "start": "120680",
    "end": "126159"
  },
  {
    "text": "are useful to them and I don't expect you to be able to read all this but you get the idea that you're combining local commands",
    "start": "126159",
    "end": "133400"
  },
  {
    "text": "with CLI commands to provide some useful functionality and if we think about an",
    "start": "133400",
    "end": "139920"
  },
  {
    "text": "AWS API call in general there's a spectrum where on one end we're making a",
    "start": "139920",
    "end": "145200"
  },
  {
    "text": "single CLI command listing all of my buckets and on the other end",
    "start": "145200",
    "end": "150360"
  },
  {
    "text": "we're writing a full web application that has many components integrates with",
    "start": "150360",
    "end": "155640"
  },
  {
    "text": "various AWS services and has a lot of domain specific logic that is particular",
    "start": "155640",
    "end": "161920"
  },
  {
    "text": "to my business or my application and so what we're going to focus on in this",
    "start": "161920",
    "end": "167319"
  },
  {
    "text": "talk is this area right here I am a big believer in using the right tool for the",
    "start": "167319",
    "end": "173599"
  },
  {
    "text": "job and I think that shell scripts fit an area where it's good to use and I",
    "start": "173599",
    "end": "180599"
  },
  {
    "text": "want to go over what I think makes a good shell script and what we'll try to stick to for this",
    "start": "180599",
    "end": "186799"
  },
  {
    "text": "talk so for me a good shell script is less than 100 lines of Code by that I",
    "start": "186799",
    "end": "192239"
  },
  {
    "text": "mean you know actual commands if we break a line into multiple uh if you break a command into multiple lines and count that as one line and it's",
    "start": "192239",
    "end": "198920"
  },
  {
    "text": "generally things where you're running commands in sequence so run command a run command B run command C or we might",
    "start": "198920",
    "end": "205280"
  },
  {
    "text": "be taking output from one command and figuring out how to pipe that into input of another command and we have",
    "start": "205280",
    "end": "210319"
  },
  {
    "text": "relatively simple domain logic so this is things where like if resource exists take action a otherwise take action b or",
    "start": "210319",
    "end": "217640"
  },
  {
    "text": "if command fails take action a take otherwise take action B and so we'll be looking at Shell scripts that meet these",
    "start": "217640",
    "end": "224439"
  },
  {
    "text": "characteristics here now to get the most out of this talk I'm making a few assumptions",
    "start": "224439",
    "end": "230920"
  },
  {
    "text": "there's a lot of things that I want to show you and so I will not have time to cover things like installation and configuration so I assume you're at",
    "start": "230920",
    "end": "237480"
  },
  {
    "text": "least familiar with the AWS CLI you've installed it configured it hopefully ran a few commands before I also assume",
    "start": "237480",
    "end": "243959"
  },
  {
    "text": "you're familiar with bash um at least the basics and I assume that you have some familiarity with AWS now you don't",
    "start": "243959",
    "end": "251159"
  },
  {
    "text": "have to be an expert in this I will be covering the topics as I as we encounter",
    "start": "251159",
    "end": "256639"
  },
  {
    "text": "them but to give you something a little more concrete if you understand that this first command is showing me my",
    "start": "256639",
    "end": "261880"
  },
  {
    "text": "64-bit instances and you understand the second command say is looking for the",
    "start": "261880",
    "end": "267120"
  },
  {
    "text": "two largest files in my current directory with string CLI so command substitution and piping and then you're",
    "start": "267120",
    "end": "273000"
  },
  {
    "text": "familiar with Amazon ec2 um which is where we're going to spend most of the time for the services then you should be",
    "start": "273000",
    "end": "279520"
  },
  {
    "text": "okay for this talk if not uh there is some good resources here so these slides will be",
    "start": "279520",
    "end": "285080"
  },
  {
    "text": "available after the conference and I have some links here for some additional material there's talks to the previous",
    "start": "285080",
    "end": "291800"
  },
  {
    "text": "reinvents um to two previous reinvent talks a beginner talk and then some more advanced features as well as links to",
    "start": "291800",
    "end": "298280"
  },
  {
    "text": "our installation and configuration guide and the last note is that we will",
    "start": "298280",
    "end": "304360"
  },
  {
    "text": "be in the terminal quite a lot I think that uh the best way to show these",
    "start": "304360",
    "end": "310440"
  },
  {
    "text": "techniques is to actually give you concrete examples and I want to stress here that the whole point behind this",
    "start": "310440",
    "end": "316400"
  },
  {
    "text": "talk is to give you the techniques and the best practices so that you can write your own shell scripts that match uh",
    "start": "316400",
    "end": "322000"
  },
  {
    "text": "whatever needs you have but I will be picking some examples to demonstrate the techniques we're going to look",
    "start": "322000",
    "end": "328160"
  },
  {
    "text": "at okay so now I want to cover some common patterns here and before we do",
    "start": "328160",
    "end": "335319"
  },
  {
    "text": "that I want to have a quick refresher on some of the CLI Basics so I'm not going",
    "start": "335319",
    "end": "341280"
  },
  {
    "text": "to go over a lot of the CLI I just want to go over the key features we're going to be using throughout this talk so that if you're new to the CLI you can still",
    "start": "341280",
    "end": "347479"
  },
  {
    "text": "follow or if you haven't seen these features in a while it's just a quick refresher so the two big ones that we're",
    "start": "347479",
    "end": "352560"
  },
  {
    "text": "going to use are so by default you get Json output and the two things that we're",
    "start": "352560",
    "end": "359080"
  },
  {
    "text": "going to be using is output text so if I do output text hopefully this is something a lot of you have seen before",
    "start": "359080",
    "end": "365160"
  },
  {
    "text": "but you'll notice if you haven't that it's the same data from my Json output",
    "start": "365160",
    "end": "370720"
  },
  {
    "text": "my first command but it's just represented in a tabular format so you have tab separated data with records",
    "start": "370720",
    "end": "377599"
  },
  {
    "text": "separated by new lines so we're going to use that a lot and the other thing that we're going to",
    "start": "377599",
    "end": "383280"
  },
  {
    "text": "use is this query option here",
    "start": "383280",
    "end": "390880"
  },
  {
    "text": "so this allows me again to do a client side filter so if I take this data here and I apply this expression you can see",
    "start": "390880",
    "end": "398400"
  },
  {
    "text": "that it's the same data so us west2 here corresponds to us west2 here and so",
    "start": "398400",
    "end": "403479"
  },
  {
    "text": "forth that I'm just taking that data and reconstructing it in a way that only gives me the data that I",
    "start": "403479",
    "end": "409639"
  },
  {
    "text": "want and one last note here so if I select a specific region let's say I",
    "start": "409639",
    "end": "415120"
  },
  {
    "text": "want to grab that uh first element region name notice here the default is",
    "start": "415120",
    "end": "420759"
  },
  {
    "text": "Json so this is something that I see a lot in sub scripts this is a um common mistake where by default J well Json",
    "start": "420759",
    "end": "427919"
  },
  {
    "text": "strings are double quoted but if I specify output text notice that difference there where",
    "start": "427919",
    "end": "434199"
  },
  {
    "text": "it's not quoted so this string is actually the double quote character followed by E US1 followed by another",
    "start": "434199",
    "end": "441199"
  },
  {
    "text": "double quote character and so if you're trying to feed that into subsequent commands that generally will not do what",
    "start": "441199",
    "end": "446479"
  },
  {
    "text": "you want and so you want to make sure to use output text here so keep those in mind as we cover these",
    "start": "446479",
    "end": "453319"
  },
  {
    "text": "patterns here and we're going to go over uh some key",
    "start": "453319",
    "end": "460440"
  },
  {
    "text": "patterns and these patterns are four patterns that I see most",
    "start": "460560",
    "end": "465840"
  },
  {
    "text": "frequently used in the CLI and if you know these four patterns you can pretty much automate any of the AWS tasks that",
    "start": "465840",
    "end": "472879"
  },
  {
    "text": "you might have and so we'll go through each of these and then after the first two we'll look at a demo and an example and we'll cover the next two",
    "start": "472879",
    "end": "480840"
  },
  {
    "text": "so the first one is the most straightforward this is where I want to take output from one command and feed it to input into another command so um",
    "start": "480840",
    "end": "488360"
  },
  {
    "text": "conceptually if you think of this as the output on the left I'm going to take some specific slot and feed it into out",
    "start": "488360",
    "end": "493960"
  },
  {
    "text": "input on the right so I might run some sort of describe call and then feed that into a run call or a delete call or",
    "start": "493960",
    "end": "500639"
  },
  {
    "text": "something like that and the way you do this if you're familiar with bash it should be pretty straightforward you",
    "start": "500639",
    "end": "506039"
  },
  {
    "text": "might try something like this where I'm using command substitution so the intent here is I want to run an instance and",
    "start": "506039",
    "end": "511720"
  },
  {
    "text": "then tag it as soon as I run it but one of the problems that you'll run into is the air handling is not quite right um",
    "start": "511720",
    "end": "518279"
  },
  {
    "text": "You will either have this command called with no value for resources which would be a parsing error or you'll send",
    "start": "518279",
    "end": "524279"
  },
  {
    "text": "something to ec2 that may not have the right data and you'll get a serers side error so if you're writing a shell",
    "start": "524279",
    "end": "530600"
  },
  {
    "text": "script probably the most common way I see this done is to use this pattern there there's a few ways to do it but",
    "start": "530600",
    "end": "536640"
  },
  {
    "text": "you explicitly call out each thing so you're looking for the instance IDs from run instances and then you're looking",
    "start": "536640",
    "end": "542600"
  },
  {
    "text": "for or and then you use that value and create tags as that resource value and you can imagine here error exit is just",
    "start": "542600",
    "end": "549240"
  },
  {
    "text": "a function a helper function where it prints an error message and then exits and you can also use if you're",
    "start": "549240",
    "end": "555680"
  },
  {
    "text": "familiar with a set- e option in bash you have to be a little careful because there are some caveats there and if you",
    "start": "555680",
    "end": "561399"
  },
  {
    "text": "use this approach it's a little more explicit but in this case you'll get an explicit error if anything",
    "start": "561399",
    "end": "567839"
  },
  {
    "text": "happens and again we're running the query so we're using D- query to grab",
    "start": "567839",
    "end": "572959"
  },
  {
    "text": "the instance ID and we're using output text we're going to be using that a lot anytime we want to feed output into",
    "start": "572959",
    "end": "579640"
  },
  {
    "text": "input so that's something to remember uh so summary here again use",
    "start": "579640",
    "end": "584959"
  },
  {
    "text": "Query uh D- query and output text make sure to handle the error cases and this is for a onetoone mapping of output to",
    "start": "584959",
    "end": "591680"
  },
  {
    "text": "input let's move on to something that um is a little more involved here is where we want to map a list of um something in",
    "start": "591680",
    "end": "599839"
  },
  {
    "text": "and output to n AWS calls so again imagine each of these boxes as an AWS",
    "start": "599839",
    "end": "605040"
  },
  {
    "text": "CLI call and so I might want to do something like list all of my um IM",
    "start": "605040",
    "end": "611160"
  },
  {
    "text": "users and then for each of them I'm going to call some command either add policy or either delete each of those",
    "start": "611160",
    "end": "616839"
  },
  {
    "text": "users and so the way that you can do this is with uh there's two options",
    "start": "616839",
    "end": "622640"
  },
  {
    "text": "first most straight for one is just to use a for Loop in bash so again if you're familiar with bash hopefully this is pretty straightforward for you",
    "start": "622640",
    "end": "630079"
  },
  {
    "text": "and the way that this works is this first command here is going to create line separated output so in this example",
    "start": "630079",
    "end": "636519"
  },
  {
    "text": "it could be user one user two user three and then from that for Loop I'm then",
    "start": "636519",
    "end": "641800"
  },
  {
    "text": "going to call the delete user for each username so another thing that you can",
    "start": "641800",
    "end": "647279"
  },
  {
    "text": "do is use xargs if you haven't seen xargs before this is a way to take read",
    "start": "647279",
    "end": "652920"
  },
  {
    "text": "from standard inputs so of some process that's producing output and map those to",
    "start": "652920",
    "end": "658240"
  },
  {
    "text": "command line parameters and what this is going to do here is I'm using this Dashi option that's a",
    "start": "658240",
    "end": "663760"
  },
  {
    "text": "placeholder so it's saying anytime you see this placeholder and the command you're giving I've been given I will",
    "start": "663760",
    "end": "669200"
  },
  {
    "text": "replace it with each line value here so this will be user one then user two then user three and the reason that this is",
    "start": "669200",
    "end": "676800"
  },
  {
    "text": "nice is that if I have independent tasks so tasks where they don't need to",
    "start": "676800",
    "end": "682000"
  },
  {
    "text": "combine results into a single result and I don't have to worry about if one command fails don't run any of the other",
    "start": "682000",
    "end": "687600"
  },
  {
    "text": "ones I can actually use this Dash P which is Max Pro and it's going to say run 10 of these in parallel at a time so",
    "start": "687600",
    "end": "694279"
  },
  {
    "text": "I will essentially get parallelism for free and if I actually look at the output of something like",
    "start": "694279",
    "end": "699920"
  },
  {
    "text": "PS3 I'll actually see 10 child processes from xrg running at the same time and",
    "start": "699920",
    "end": "705760"
  },
  {
    "text": "you can see this user name filled in so there's user one user two user three and that was from that line output that we",
    "start": "705760",
    "end": "712200"
  },
  {
    "text": "saw earlier so if you're going to do this make sure that you're going to use Dash",
    "start": "712200",
    "end": "719360"
  },
  {
    "text": "I for xargs - P for parallelism if you have independent tasks and the for Loop",
    "start": "719360",
    "end": "725360"
  },
  {
    "text": "is good if you're trying to for Loop over something that isn't exported in your environment so if I create a",
    "start": "725360",
    "end": "730480"
  },
  {
    "text": "function in bash and I don't want to export it then I would have to use a for Loop here instead of XRS and it also is",
    "start": "730480",
    "end": "737000"
  },
  {
    "text": "handling errors here because if there's any error in that first API call then I don't Loop over anything because there's",
    "start": "737000",
    "end": "742760"
  },
  {
    "text": "no output written to standard out Okay so we've looked at the first",
    "start": "742760",
    "end": "749760"
  },
  {
    "text": "two patterns here and I'd like to be a little more concrete",
    "start": "749760",
    "end": "755160"
  },
  {
    "start": "750000",
    "end": "786000"
  },
  {
    "text": "and show you an example let's work through an example here that illustrates these two points",
    "start": "755160",
    "end": "761560"
  },
  {
    "text": "so one of the most common things that I do that I'm going to use as an example is a lot of times I want to have a",
    "start": "761560",
    "end": "767440"
  },
  {
    "text": "development ec2 instance just up and running and I wanted to use the latest Amazon Linux on me and I would ideally",
    "start": "767440",
    "end": "774800"
  },
  {
    "text": "like it to just spin up wait for it to be available um verify the SSA fingerprints and just ssh in and tell me",
    "start": "774800",
    "end": "780920"
  },
  {
    "text": "that it's available so we'll look at an example of how we can use these techniques to build up to that so the",
    "start": "780920",
    "end": "786600"
  },
  {
    "start": "786000",
    "end": "818000"
  },
  {
    "text": "first thing I'm going to do is write a script that gives me the latest Amazon Linux amies and we'll work through how",
    "start": "786600",
    "end": "793519"
  },
  {
    "text": "that looks like I'm just going to have a function here that's going to say list amies and it's going to take a region",
    "start": "793519",
    "end": "800240"
  },
  {
    "text": "name and you're going to provide that region name here and first I'll just go ahead and",
    "start": "800240",
    "end": "805920"
  },
  {
    "text": "Echo the region name and make sure that I have everything set up because the way I'm going to call it is I call list amies with a region and so if I go ahead",
    "start": "805920",
    "end": "813360"
  },
  {
    "text": "and run this make sure we get us West 2 as output okay and now we can start working on the",
    "start": "813360",
    "end": "820240"
  },
  {
    "start": "818000",
    "end": "856000"
  },
  {
    "text": "script so I happen to know that the call that I want is a describe images call so I'm going to go ahead and do describe",
    "start": "820240",
    "end": "827079"
  },
  {
    "text": "images and I'm going to give it filters that says only give me the Amazon Linux amies and I've gone ahead and worked out",
    "start": "827079",
    "end": "834040"
  },
  {
    "text": "what those filters are so I'll just go ahead and walk through them here I want Amazon Linux amies that match this",
    "start": "834040",
    "end": "840680"
  },
  {
    "text": "pattern that are 64-bit hvm EBS root volumes of the new uh gp2 or the general",
    "start": "840680",
    "end": "847480"
  },
  {
    "text": "purpose SSD types and then I'm going to go ahead and provide a region here and this region is",
    "start": "847480",
    "end": "853759"
  },
  {
    "text": "going to be the region that was passed in so if we run this command we'll",
    "start": "853759",
    "end": "858920"
  },
  {
    "text": "actually take a look at the output and we'll see that it has the data that I've",
    "start": "858920",
    "end": "864040"
  },
  {
    "text": "requested which is 64-bit root device EBS gp2 volumes",
    "start": "864040",
    "end": "870399"
  },
  {
    "text": "owners of Amazon and now what I want to do is start seeing how I can make this",
    "start": "870399",
    "end": "875959"
  },
  {
    "text": "more useful for input into other commands like the ec2 instance command that we're going to look at in a",
    "start": "875959",
    "end": "881759"
  },
  {
    "text": "second so now what I'm going to do is use the two things that we had been talking about query and output text so I",
    "start": "881759",
    "end": "890920"
  },
  {
    "start": "883000",
    "end": "911000"
  },
  {
    "text": "need to figure out a query expression that's going to give me the output I want I'll go ahead and say that I want tab separated output and I want to have",
    "start": "890920",
    "end": "898040"
  },
  {
    "text": "say four fields the region the image ID the name and the description so one of the things that",
    "start": "898040",
    "end": "905399"
  },
  {
    "text": "you will run into is you will need to create a query expression that matches this value",
    "start": "905399",
    "end": "911519"
  },
  {
    "text": "here and I want to show you one of the first tools that we're going to look at um this is a tool that allows you to",
    "start": "911519",
    "end": "918000"
  },
  {
    "text": "take Json input and manipulate it to work out what your query expressions are going to be so if I pip install James",
    "start": "918000",
    "end": "924920"
  },
  {
    "text": "path Das terminal by the way that language that being that we've been looking at is called James path and so this will give me a terminal where I can",
    "start": "924920",
    "end": "932279"
  },
  {
    "text": "actually pipe in data so I can say something like describe regions pipe it into JP term and then go ahead and start",
    "start": "932279",
    "end": "939240"
  },
  {
    "text": "working out what that expression should look like so things like regions. region name and I can see how it looks like as",
    "start": "939240",
    "end": "944839"
  },
  {
    "text": "I start working on these Expressions now what I actually have",
    "start": "944839",
    "end": "950240"
  },
  {
    "start": "947000",
    "end": "971000"
  },
  {
    "text": "here if you've noticed my editor is is vim and I have a Vim plugin setup where I can actually go ahead and generate a",
    "start": "950240",
    "end": "956880"
  },
  {
    "text": "sample response here so let me walk through what just happened there I have this E2 describe images call and so I'm",
    "start": "956880",
    "end": "962959"
  },
  {
    "text": "going to highlight it because here I don't have a query option and I want to figure out what that's going to be so",
    "start": "962959",
    "end": "968680"
  },
  {
    "text": "I'm going to highlight this and it will parse out what that command is supposed",
    "start": "968680",
    "end": "973839"
  },
  {
    "start": "971000",
    "end": "1024000"
  },
  {
    "text": "to be and all of these commands have a Json model that describes all of its inputs and all of its outputs and it",
    "start": "973839",
    "end": "980279"
  },
  {
    "text": "will then based on that create what the sample response should be so if you look at this data here notice these are just",
    "start": "980279",
    "end": "986319"
  },
  {
    "text": "sample this is just dummy data so it just miror in the the names here of these structures and using true for",
    "start": "986319",
    "end": "992279"
  },
  {
    "text": "booing that kind of thing but what this lets me do as I'm writing my shelves script is to work out what that",
    "start": "992279",
    "end": "997440"
  },
  {
    "text": "expression should be so I can see that okay I know that I need to grab images and I wanted tab separated output so I'm",
    "start": "997440",
    "end": "1003560"
  },
  {
    "text": "going to have the region name that was provided to me and then I can look here and see that there are a description an image ID and a name",
    "start": "1003560",
    "end": "1012120"
  },
  {
    "text": "so I can go ahead and map those and notice as I'm typing it says null and once I get to the right field it says",
    "start": "1012120",
    "end": "1017519"
  },
  {
    "text": "image ID then I can say name and description so I have this worked out this is the data that I want I see I'm",
    "start": "1017519",
    "end": "1023440"
  },
  {
    "text": "going to get a list of lists and once I exit out of this notice here on line 16 that it filled in my query for me so as",
    "start": "1023440",
    "end": "1029839"
  },
  {
    "text": "I'm working on my shell script I'm able to work out what that is so if I undo that change right and then redo it you can see filled it in there so that's a",
    "start": "1029839",
    "end": "1036280"
  },
  {
    "text": "nice way it didn't make any service calls it used it purely based on the description of the model that it has and it lets me create these shell scripts",
    "start": "1036280",
    "end": "1042558"
  },
  {
    "text": "without having to actually make API calls so if we run this",
    "start": "1042559",
    "end": "1050639"
  },
  {
    "start": "1052000",
    "end": "1080000"
  },
  {
    "text": "we should get tab separated output here make it smaller for just a second so we can see this tab separated",
    "start": "1052880",
    "end": "1061160"
  },
  {
    "text": "output and if you see here let me see so if you see here there's 2015 2014 2015",
    "start": "1061559",
    "end": "1069559"
  },
  {
    "text": "so it's not quite in the order that I want there's also these RC's so what I want to do is sort them real quick get",
    "start": "1069559",
    "end": "1075000"
  },
  {
    "text": "the latest version and then filter out the RC so I can have the latest Amazon Linux on available to",
    "start": "1075000",
    "end": "1080360"
  },
  {
    "start": "1080000",
    "end": "1129000"
  },
  {
    "text": "me so we'll take a look at what that looks like so all I need to do now is enhance",
    "start": "1080360",
    "end": "1088080"
  },
  {
    "text": "that expression and since I've already seen the fields I don't actually need to hop into the James path terminal I know",
    "start": "1088080",
    "end": "1094200"
  },
  {
    "text": "I just need to do a sort and I want to sort the images by the creation date and I know in this case that I want",
    "start": "1094200",
    "end": "1101640"
  },
  {
    "text": "them uh reverse because I want the most recent first so I'm going to go ahead and add a reverse here and then the",
    "start": "1101640",
    "end": "1107280"
  },
  {
    "text": "final thing is that I want to be able B to remove anything that has RC in the name so the way that's going to work is",
    "start": "1107280",
    "end": "1112760"
  },
  {
    "text": "I'm going to have a filter expression that's going to say only include images where it does not contain in the name",
    "start": "1112760",
    "end": "1119039"
  },
  {
    "text": "the string RC let me break that up make it a little easier to read and so now",
    "start": "1119039",
    "end": "1124400"
  },
  {
    "text": "this should have the data that I want if I run this command see here that I have 2015 at the",
    "start": "1124400",
    "end": "1132400"
  },
  {
    "start": "1129000",
    "end": "1151000"
  },
  {
    "text": "top I have 2014 at the bottom if I then want to work with other tools I can say okay let's take the most recent one and",
    "start": "1132400",
    "end": "1138840"
  },
  {
    "text": "give me the Ami ID and then I can use that as a call into run",
    "start": "1138840",
    "end": "1145120"
  },
  {
    "text": "instances and now that we have that all set up there is one other change that I want to",
    "start": "1145120",
    "end": "1151000"
  },
  {
    "text": "make so this gives it to me for a single region what I'd like to do is use one of those things that we saw um for doing a",
    "start": "1151000",
    "end": "1157679"
  },
  {
    "text": "for Loop over multiple API calls and so I'm actually going to say that I want to",
    "start": "1157679",
    "end": "1163360"
  },
  {
    "text": "see the latest zomies for all regions so I'll say for region name in and then I know that I'm going to do describe regions",
    "start": "1163360",
    "end": "1169280"
  },
  {
    "text": "leave query blank and then we'll have text output again and for now I'm just",
    "start": "1169280",
    "end": "1174679"
  },
  {
    "text": "going to Echo the region name make sure that I have everything set up here and I need to figure out that query expression so again I'm going to highlight it know",
    "start": "1174679",
    "end": "1182240"
  },
  {
    "text": "that I want to say regions. region name has a data that I want so I'll go",
    "start": "1182240",
    "end": "1187520"
  },
  {
    "text": "ahead and exit and now if I run this command I should get just the",
    "start": "1187520",
    "end": "1194840"
  },
  {
    "text": "regions and finally I can go ahead and replace this with region name and I should now have a",
    "start": "1194840",
    "end": "1201880"
  },
  {
    "text": "list of all of the latest amies for each region so that's using that second",
    "start": "1201880",
    "end": "1207039"
  },
  {
    "text": "pattern there because I have a function and I'm showing the latest Amazon Linux for each",
    "start": "1207039",
    "end": "1213159"
  },
  {
    "start": "1213000",
    "end": "1302000"
  },
  {
    "text": "region uh now I have all this set up and I want to use this in another script so I'm going",
    "start": "1213159",
    "end": "1219880"
  },
  {
    "text": "to add an option where you can give me a region name and I'll only show you the uh amies for that region or if you don't",
    "start": "1219880",
    "end": "1227600"
  },
  {
    "text": "provide any arguments I'll go ahead and do this Behavior now which will show you all regions this is the last enhancement",
    "start": "1227600",
    "end": "1233360"
  },
  {
    "text": "we're going to make to this so I'm just going to go ahead and write that real quick I'm going to say if you don't provide any arguments then we'll go",
    "start": "1233360",
    "end": "1239200"
  },
  {
    "text": "ahead and do this Loop otherwise we will take a look at let's take a look at",
    "start": "1239200",
    "end": "1248080"
  },
  {
    "text": "the parameter you provided if it's region then we'll go ahead and grab the region name and then we're done with",
    "start": "1248080",
    "end": "1254880"
  },
  {
    "text": "that otherwise we will go ahead and Echo",
    "start": "1254880",
    "end": "1260600"
  },
  {
    "text": "a usage error so we'll just say error usage should be latest amies with an optional",
    "start": "1261640",
    "end": "1267760"
  },
  {
    "text": "region flag okay want write that the standard error and we are all",
    "start": "1267760",
    "end": "1273600"
  },
  {
    "text": "done and then we actually need to run the command so let's put it",
    "start": "1273600",
    "end": "1279360"
  },
  {
    "text": "here okay so now what should happen is if I run this with a region should only",
    "start": "1279400",
    "end": "1287200"
  },
  {
    "text": "get om for that region same thing for us West one and otherwise it'll do it for a",
    "start": "1287200",
    "end": "1292480"
  },
  {
    "text": "loop Okay so we've worked through that example there's another example here and I'm going to go ahead and let this run",
    "start": "1292480",
    "end": "1300000"
  },
  {
    "text": "in the background here and we'll come back to it but I just want to show and I'm not actually going to code this I'm just going to walk through it real quick",
    "start": "1300000",
    "end": "1306320"
  },
  {
    "text": "but I want to show how we can take that tool and then start combining tools together hopefully to give you an idea of what you'll be able to do so now I",
    "start": "1306320",
    "end": "1314360"
  },
  {
    "text": "have a script that says okay let's use that script grab the latest Oni and then launch an ec2 instance but let's do more",
    "start": "1314360",
    "end": "1320760"
  },
  {
    "text": "than that let's wait for the instance to be available let's wait for SSH port to be available and then let's SSH into the",
    "start": "1320760",
    "end": "1327440"
  },
  {
    "text": "instance and you'll see that that's actually the script that I ran here we'll take quite a quick look at the output so it launched the latest Amazon",
    "start": "1327440",
    "end": "1333799"
  },
  {
    "text": "Linux Ami and it's going to wait for it to be in the running State and we'll do a couple of other things that we'll walk through so the way that this works is",
    "start": "1333799",
    "end": "1340840"
  },
  {
    "text": "I'm going to grab the latest region so the environment variable I'm looking for AWS default region otherwise I'm calling",
    "start": "1340840",
    "end": "1347159"
  },
  {
    "text": "AWS configure get region to grab it from the config file so that's one way you can do defaults and then after that I'm",
    "start": "1347159",
    "end": "1352600"
  },
  {
    "text": "going to grab the latest Omi I'm going to print what that value is remember we have tab separated output and then we're",
    "start": "1352600",
    "end": "1358120"
  },
  {
    "text": "going to call launch instance and we'll just take a quick look through launch instance just give you an example of what this does first thing it's going to",
    "start": "1358120",
    "end": "1364760"
  },
  {
    "start": "1359000",
    "end": "1424000"
  },
  {
    "text": "do is find a tag Security Group so it's going to know what instance or what security groups to use with this instance it's just one that I have",
    "start": "1364760",
    "end": "1370799"
  },
  {
    "text": "tagged then we're going to run this run instance call with the image ID we found some fixed values here and I'm grabbing",
    "start": "1370799",
    "end": "1378640"
  },
  {
    "text": "the instance ID next I'm going to tag it and this is a call that we saw earlier and now we",
    "start": "1378640",
    "end": "1385039"
  },
  {
    "text": "arrive at waiters which is something that I want to highlight real quick so there's this command here AWS ec2 weight",
    "start": "1385039",
    "end": "1392080"
  },
  {
    "text": "instance running and what this is going to do is block until the instance associated with the instance ID I",
    "start": "1392080",
    "end": "1398279"
  },
  {
    "text": "provided hits the running state so in the background it's making a describe instance's call it knows where in that",
    "start": "1398279",
    "end": "1404039"
  },
  {
    "text": "response the instance State value is and it's going to check if it matches running and if it doesn't it will sleep",
    "start": "1404039",
    "end": "1410360"
  },
  {
    "text": "for a little bit and then try again so this saves me from having to write all of this logic myself it handles a lot of",
    "start": "1410360",
    "end": "1415960"
  },
  {
    "text": "edge cases and it also can work with multiple instance IDs so in this case I'm using one but I could have done this",
    "start": "1415960",
    "end": "1421520"
  },
  {
    "text": "with multiple instance IDs now once we have that",
    "start": "1421520",
    "end": "1427600"
  },
  {
    "start": "1424000",
    "end": "1542000"
  },
  {
    "text": "done we will go ahead and grab the instance host name so that's the public DNS",
    "start": "1427600",
    "end": "1434559"
  },
  {
    "text": "name we'll wait for that port to be available and once that port's avable available will actually SSH to the",
    "start": "1434559",
    "end": "1440400"
  },
  {
    "text": "instance and I want to go over this real quickly just because there's a little bit to it and we'll see how you can",
    "start": "1440400",
    "end": "1445799"
  },
  {
    "text": "start integrating with some of the local commands um as well as AWS CLI calls so",
    "start": "1445799",
    "end": "1451480"
  },
  {
    "text": "what I want to do if you remember whenever you have a new ec2 instance and you SSH into it the first thing it says is are you sure you want an SSH into it",
    "start": "1451480",
    "end": "1457559"
  },
  {
    "text": "here's the fingerprint and you have to say Yes um you always just type yes and what I want to show is here's a way you",
    "start": "1457559",
    "end": "1463200"
  },
  {
    "text": "can actually verify the fingerprint using some of the SSH commands you have available to you so the next we're going",
    "start": "1463200",
    "end": "1468640"
  },
  {
    "text": "to do you give it the instance ID and host name and we're going to use another waiter so again this is saving us from",
    "start": "1468640",
    "end": "1474440"
  },
  {
    "text": "having to pull we're going to wait for console output to be available once it's available we're going to look at that",
    "start": "1474440",
    "end": "1479720"
  },
  {
    "text": "console output again notice we're using query and output text we're going to look for the fingerprint there then",
    "start": "1479720",
    "end": "1486159"
  },
  {
    "text": "we're going to use an SSH key scan to start looking for the public key we're going to save that to a file and then we",
    "start": "1486159",
    "end": "1492240"
  },
  {
    "text": "have some commands here that are actually going to generate a fingerprint and it's going to show you what that fingerprint is and it Compares it says",
    "start": "1492240",
    "end": "1498440"
  },
  {
    "text": "if the expected one doesn't equal what the actual one is then we'll error out otherwise we'll go ahead and add that",
    "start": "1498440",
    "end": "1505480"
  },
  {
    "text": "instance ID or that public key to our known hosts so that when I SSH onto the",
    "start": "1505480",
    "end": "1511039"
  },
  {
    "text": "instance it will actually tell me that I won't get prompted and I'll just have something available for me and also uh",
    "start": "1511039",
    "end": "1518440"
  },
  {
    "text": "oh and this this command here is just a Mac specific thing this will actually give me a desktop notification when it's",
    "start": "1518440",
    "end": "1524200"
  },
  {
    "text": "ready so if I'm off doing something else once it's available I can actually just go ahead and switch over to the terminal",
    "start": "1524200",
    "end": "1530520"
  },
  {
    "text": "and everything will be ready so that's a script that hopefully gives you some idea of how you can start",
    "start": "1530520",
    "end": "1536640"
  },
  {
    "text": "combining components together um",
    "start": "1536640",
    "end": "1541799"
  },
  {
    "text": "it worked by taking small composable tools and then started to build abstractions onto them based on things",
    "start": "1541799",
    "end": "1548919"
  },
  {
    "text": "that I found useful which is the Amazon Linux latest Amazon Linux Ami the latest security groups that I have tagged all",
    "start": "1548919",
    "end": "1555960"
  },
  {
    "text": "of that data um is very specific to my use case but I'm using these techniques so we saw using query D- query and then",
    "start": "1555960",
    "end": "1562760"
  },
  {
    "text": "D- output text and we also saw an example where um we use the for Loop to",
    "start": "1562760",
    "end": "1568039"
  },
  {
    "text": "grab the latest amies okay go ahead and switch over",
    "start": "1568039",
    "end": "1574159"
  },
  {
    "text": "here looks like they're taking a while oh here we go so I think it's just",
    "start": "1574159",
    "end": "1581080"
  },
  {
    "start": "1578000",
    "end": "1599000"
  },
  {
    "text": "because we have the notifications with the dual screen setup but you notice here that I'm actually now on an ec2 instance so I can run you know AWS",
    "start": "1581080",
    "end": "1588799"
  },
  {
    "text": "commands I have my home/ ec2 user so this command basically set everything up for me and I can now go ahead and start",
    "start": "1588799",
    "end": "1595039"
  },
  {
    "text": "doing some development work okay so that was the first two patterns",
    "start": "1595039",
    "end": "1601440"
  },
  {
    "text": "and hopefully it gives you some ideas of what you might be able to do with that now I want to look at the third and",
    "start": "1601440",
    "end": "1607760"
  },
  {
    "text": "fourth patterns now the third and fourth patterns are a little bit different up",
    "start": "1607760",
    "end": "1614480"
  },
  {
    "text": "until this point I've been saying use output text and use Query but this one's a little bit different the biggest",
    "start": "1614480",
    "end": "1620480"
  },
  {
    "text": "reason is in scripts that are a little more involved sometimes you'll have multiple contexts you want to use values",
    "start": "1620480",
    "end": "1626240"
  },
  {
    "text": "in so for example I'm going to make some call and then I need part of the response for the first part of my script I need the middle part of the response",
    "start": "1626240",
    "end": "1632520"
  },
  {
    "text": "for the next part of the script and then finally I'm going to use the last part for the last part of my script and what I would want to do",
    "start": "1632520",
    "end": "1639320"
  },
  {
    "start": "1637000",
    "end": "1729000"
  },
  {
    "text": "instead here is rather than figure out the query expression UPF front I'm actually going to store this all as a",
    "start": "1639320",
    "end": "1644760"
  },
  {
    "text": "big Json variable here so this can be uh say ec2 instance data here that's just a",
    "start": "1644760",
    "end": "1650240"
  },
  {
    "text": "long Json string and then later on during my script what I'm going to do is say okay now I need to know the volume",
    "start": "1650240",
    "end": "1656039"
  },
  {
    "text": "ID for the first block device and on my instance maybe for EBS snapshots or",
    "start": "1656039",
    "end": "1662120"
  },
  {
    "text": "something then later on in my script I say okay maybe now I need the image ID because I'm doing some Ami related work",
    "start": "1662120",
    "end": "1668640"
  },
  {
    "text": "and then later on in my script finally I need the instance ID and so what's nice about this is it makes it still very",
    "start": "1668640",
    "end": "1675320"
  },
  {
    "text": "easy to read your script you can see okay I have have the image ID that I'm working with I have the instance ID that",
    "start": "1675320",
    "end": "1681200"
  },
  {
    "text": "I'm working with I don't have to do this tabular format where I have to remember the second column is the image ID the fourth is the instance ID it lets me be",
    "start": "1681200",
    "end": "1687640"
  },
  {
    "text": "a little more explicit now in order to do this I'm going to introduce a new tool here and",
    "start": "1687640",
    "end": "1693679"
  },
  {
    "text": "that's this JP command so so far we've been looking at-- query and the main",
    "start": "1693679",
    "end": "1699200"
  },
  {
    "text": "thing with-- query it's this expression language that lets you take Json and filters it down to whatever you want now",
    "start": "1699200",
    "end": "1706159"
  },
  {
    "text": "that's part of the CLI is a query option but the jpcl is the exact same language",
    "start": "1706159",
    "end": "1712159"
  },
  {
    "text": "just as a standalone executable and it allows us to do the query thing that we saw on the previous slide and so for Mac",
    "start": "1712159",
    "end": "1718840"
  },
  {
    "text": "users it's also available for a home brew so you can Brew install it as soon as you uh Brew tap James path James path",
    "start": "1718840",
    "end": "1726080"
  },
  {
    "text": "and I want to show you how you can now use this in your scripts here so the way you would do this is you would make a",
    "start": "1726080",
    "end": "1731120"
  },
  {
    "start": "1729000",
    "end": "1785000"
  },
  {
    "text": "call such as run instances and notice here the big difference is I'm not using output Json I'm or I mean I am using",
    "start": "1731120",
    "end": "1737519"
  },
  {
    "text": "output Json on so I'm not specifying D- output text and I'm going to save this as a",
    "start": "1737519",
    "end": "1742600"
  },
  {
    "text": "variable and once I save that as a variable I now have this query uh function and notice again this is a Json",
    "start": "1742600",
    "end": "1749440"
  },
  {
    "text": "string and if we look at this query function it takes two arguments you give it the instance uh data so this is the",
    "start": "1749440",
    "end": "1756480"
  },
  {
    "text": "Json string and you give it an expression dasu is just saying don't print any double quotes there and now in",
    "start": "1756480",
    "end": "1763120"
  },
  {
    "text": "my shell script I can start doing some things like okay I need the instance ID as a variable or now I need the state.",
    "start": "1763120",
    "end": "1769559"
  },
  {
    "text": "name now I need to find the instance name so that's in the tags list the key that has a value of name grab the first",
    "start": "1769559",
    "end": "1775799"
  },
  {
    "text": "value in that list and this lets me create these shell scripts that are much easier to read here we'll see an example",
    "start": "1775799",
    "end": "1783360"
  },
  {
    "text": "of that in a few moments so if you're going to do this remember use Json output do not use text output save the",
    "start": "1783360",
    "end": "1790919"
  },
  {
    "start": "1785000",
    "end": "1812000"
  },
  {
    "text": "whole thing as a variable so in this case I knew that the instance ID or the instance data wasn't that large and so",
    "start": "1790919",
    "end": "1796679"
  },
  {
    "text": "I'm just holding it as a variable but you can also write it to a temp file if you're concerned about memory usage and",
    "start": "1796679",
    "end": "1803080"
  },
  {
    "text": "then also use the JP command to filter Down results as needed it's the same language as-- query you don't have to",
    "start": "1803080",
    "end": "1808559"
  },
  {
    "text": "learn another language it's um all the exact same thing and then now I want to cover the",
    "start": "1808559",
    "end": "1816039"
  },
  {
    "start": "1812000",
    "end": "1882000"
  },
  {
    "text": "resource exist check so this is another pattern that I see very commonly which is check if a resource exists if it does",
    "start": "1816039",
    "end": "1822159"
  },
  {
    "text": "take action a otherwise take action B and the way that you do this there's three parts essentially what we're going",
    "start": "1822159",
    "end": "1827640"
  },
  {
    "text": "to do is try to create some sort of list and if that list is empty the resource",
    "start": "1827640",
    "end": "1832880"
  },
  {
    "text": "doesn't exist if the list is has something in it then the resource exists and we do that by either giving me the",
    "start": "1832880",
    "end": "1840000"
  },
  {
    "text": "query to run or giving me server side filters and then applying a query and the way that",
    "start": "1840000",
    "end": "1845480"
  },
  {
    "text": "works is that you have",
    "start": "1845480",
    "end": "1851399"
  },
  {
    "text": "oops first you're going to have uh two arguments you give me the command and then also the query to run if you don't",
    "start": "1851399",
    "end": "1858000"
  },
  {
    "text": "we'll just look at the first list in this output and then after that we're going to go ahead and run the command",
    "start": "1858000",
    "end": "1864320"
  },
  {
    "text": "and if that command has any matches or I mean errors we will go ahead and error out and then finally we'll check the",
    "start": "1864320",
    "end": "1870760"
  },
  {
    "text": "length here so if the number of matches is greater than zero then we'll return zero means the resource exists otherwise",
    "start": "1870760",
    "end": "1877200"
  },
  {
    "text": "we'll go ahead and return one saying the resource does not exist and I want to show you some",
    "start": "1877200",
    "end": "1883720"
  },
  {
    "start": "1882000",
    "end": "1903000"
  },
  {
    "text": "examples of how you can use this so for server side filtering this is an example where I want to check if a particular ec2 Security Group exists now would say",
    "start": "1883720",
    "end": "1891919"
  },
  {
    "text": "if resource exists and I give it this command and I give it a serers side filter with a particular tag then I have",
    "start": "1891919",
    "end": "1897720"
  },
  {
    "text": "code path a that says the group exists otherwise I say the group does not",
    "start": "1897720",
    "end": "1903200"
  },
  {
    "start": "1903000",
    "end": "1950000"
  },
  {
    "text": "exist there's also client side filtering so this is an example where the service does not have server side filtering and",
    "start": "1903200",
    "end": "1911200"
  },
  {
    "text": "I'm going to show an example here for instance profiles and here I'm going to provide a query expression that's",
    "start": "1911200",
    "end": "1916600"
  },
  {
    "text": "looking for an instance profile with an instance profile name of Dev ec2 instance and if it does exist then we'll",
    "start": "1916600",
    "end": "1925279"
  },
  {
    "text": "go and print it and say the profile exists otherwise we'll go and say you're missing a profile we can go ahead and",
    "start": "1925279",
    "end": "1930600"
  },
  {
    "text": "call a create for it offer to create it for them whatever else you might",
    "start": "1930600",
    "end": "1936120"
  },
  {
    "text": "have and if you're going to do this remember conceptually what we're doing is taking a list checking if the length",
    "start": "1936120",
    "end": "1941320"
  },
  {
    "text": "is greater than zero and we're going to try to use server side filtering when possible otherwise we're going to use J",
    "start": "1941320",
    "end": "1947480"
  },
  {
    "text": "the James path query thing for client side filtering and we want through that pretty quick but I think a a demo here",
    "start": "1947480",
    "end": "1954840"
  },
  {
    "start": "1950000",
    "end": "2034000"
  },
  {
    "text": "will help solidify some of these things now I'm actually just going to show the code here give you an example of what",
    "start": "1954840",
    "end": "1961320"
  },
  {
    "text": "we're doing so one of the problems that I run into is if I take a look at",
    "start": "1961320",
    "end": "1966600"
  },
  {
    "text": "security groups here and actually let me go ahead and remove",
    "start": "1966600",
    "end": "1972440"
  },
  {
    "text": "or grap out the defaults and SSH so I have three security groups here",
    "start": "1972440",
    "end": "1979279"
  },
  {
    "text": "and the columns here show the group name so that's the First Column and then it shows a group ID and then it shows a",
    "start": "1979279",
    "end": "1986080"
  },
  {
    "text": "description here that's saying that a allows anything in Security Group B you notice for Security Group B it allows",
    "start": "1986080",
    "end": "1991840"
  },
  {
    "text": "anything in C and C allows anything in a and the reason that",
    "start": "1991840",
    "end": "1997200"
  },
  {
    "text": "this will need a a script here is if I actually try to delete the security",
    "start": "1997200",
    "end": "2002880"
  },
  {
    "text": "group and I give it an ID of say the first one",
    "start": "2002880",
    "end": "2008519"
  },
  {
    "text": "it'll get an error and it'll say you have a dependent object and I'll go ahead and try to delete the second one and I'll get an error it says that I",
    "start": "2008519",
    "end": "2014399"
  },
  {
    "text": "have a dependent object so then I think it probably is the third one that I need to start with which is wrong because",
    "start": "2014399",
    "end": "2019679"
  },
  {
    "text": "they're all dependent on each other and what I need to do to actually get this",
    "start": "2019679",
    "end": "2024840"
  },
  {
    "text": "working is I need to delete all of the rules associated with that security group so if I say describe security",
    "start": "2024840",
    "end": "2034159"
  },
  {
    "start": "2034000",
    "end": "2054000"
  },
  {
    "text": "groups there is output here that has IP permission that says what this Security",
    "start": "2034159",
    "end": "2040320"
  },
  {
    "text": "Group is allowed and it's referencing another group ID so what I'm going to need to do is blank out all of these IP",
    "start": "2040320",
    "end": "2046279"
  },
  {
    "text": "permissions and then afterwards I can go ahead and delete it and so we're going to see an example of this third pattern",
    "start": "2046279",
    "end": "2053639"
  },
  {
    "text": "here which is what we used before so notice the dash or the query sorry",
    "start": "2053679",
    "end": "2060200"
  },
  {
    "start": "2054000",
    "end": "2147000"
  },
  {
    "text": "the query function so that's what we looked at in that third example and the way that we're going to use this is",
    "start": "2060200",
    "end": "2065720"
  },
  {
    "text": "we're going to call a describe security groups see if it's there if it is we'll",
    "start": "2065720",
    "end": "2072320"
  },
  {
    "text": "go if it's not we'll go ahead and exit otherwise we'll Echo what the security groups are confirm that they want to",
    "start": "2072320",
    "end": "2078520"
  },
  {
    "text": "delete it and then we'll go ahead and say this is the main logic here notice",
    "start": "2078520",
    "end": "2083919"
  },
  {
    "text": "the usage of query we're going to say how many groups are there for each of them we're going to",
    "start": "2083919",
    "end": "2089200"
  },
  {
    "text": "have extract out the group ID and extract out the IP permissions we're going to revoke the security group",
    "start": "2089200",
    "end": "2095520"
  },
  {
    "text": "Ingress giving it the group ID and then giving it the IP permissions uh and this is a Json document that we're feeding",
    "start": "2095520",
    "end": "2102000"
  },
  {
    "text": "directly into this command and that's our first context there and the second one is going to say okay now that we've",
    "start": "2102000",
    "end": "2107680"
  },
  {
    "text": "done that we can actually go through and delete the security groups so if we run",
    "start": "2107680",
    "end": "2115119"
  },
  {
    "text": "this oh we give it a name so this case it's looking only for security groups with a particular tag we'll go ahead and",
    "start": "2115240",
    "end": "2122160"
  },
  {
    "text": "give me a list and say Here's what you're about to delete are you sure you want to do this and I will go ahead and",
    "start": "2122160",
    "end": "2127280"
  },
  {
    "text": "say yes and you'll see that it's going to do it in two steps it's going to revoke the Ingress rules and then it's going to",
    "start": "2127280",
    "end": "2134079"
  },
  {
    "text": "also remove the security groups and that is an example of how you",
    "start": "2134079",
    "end": "2139200"
  },
  {
    "text": "can use Query functions to be able to do multiple context",
    "start": "2139200",
    "end": "2145920"
  },
  {
    "text": "here switch back over by the way make sure that there's no E2 instances associated with the security groups",
    "start": "2145920",
    "end": "2153400"
  },
  {
    "start": "2147000",
    "end": "2158000"
  },
  {
    "text": "before you revoke them okay so we looked at four patterns here um",
    "start": "2153400",
    "end": "2161000"
  },
  {
    "text": "and if you learn these four patterns there's pretty much all of the AWS tasks that you'll need to automate you'll be",
    "start": "2161000",
    "end": "2166240"
  },
  {
    "text": "able to handle I do want to quickly go over some of the deployment tips here by that I",
    "start": "2166240",
    "end": "2171599"
  },
  {
    "start": "2168000",
    "end": "2183000"
  },
  {
    "text": "mean let's say that you write your script everything's working and then you decide okay I want this to run in Kon or",
    "start": "2171599",
    "end": "2177079"
  },
  {
    "text": "I want this to run in some job Runner these are just a few tips that I've seen people run into that I want to make sure",
    "start": "2177079",
    "end": "2182480"
  },
  {
    "text": "everyone's aware of so from running in cron one of the things to keep in mind is",
    "start": "2182480",
    "end": "2188359"
  },
  {
    "start": "2183000",
    "end": "2189000"
  },
  {
    "text": "is there is some implicit state that the CLI relies on based on who is running the process so I look at home. awsc",
    "start": "2188359",
    "end": "2196119"
  },
  {
    "start": "2189000",
    "end": "2232000"
  },
  {
    "text": "config as well as the credentials file so if I have something set up as my Dev",
    "start": "2196119",
    "end": "2201280"
  },
  {
    "text": "account and I have everything working and then depending on how I set up my KRON job if I'm using crown. D or crown.",
    "start": "2201280",
    "end": "2206920"
  },
  {
    "text": "daily and not the user Chron tab it'll be running potentially as a different user possibly route and so if you're",
    "start": "2206920",
    "end": "2212599"
  },
  {
    "text": "going to do that you have two options you either need to explicitly set these environment variables to some config",
    "start": "2212599",
    "end": "2218680"
  },
  {
    "text": "file that you have set um set up specifically for this Crown job or you just need to make sure that the AWS",
    "start": "2218680",
    "end": "2225560"
  },
  {
    "text": "config exists for whatever user you might be running as",
    "start": "2225560",
    "end": "2231960"
  },
  {
    "text": "and other thing is you'll need to configure a region so the CLI needs",
    "start": "2231960",
    "end": "2237160"
  },
  {
    "start": "2232000",
    "end": "2276000"
  },
  {
    "text": "credentials and it needs a region in order to uh in order to um be able to run",
    "start": "2237160",
    "end": "2244640"
  },
  {
    "text": "command successfully and so this is an example here where I'm using the instance metadata service on ec2 to find",
    "start": "2244640",
    "end": "2250240"
  },
  {
    "text": "the currently configured region and I'm using the AWS configure set command to set my region so I'll either put this in",
    "start": "2250240",
    "end": "2256319"
  },
  {
    "text": "user data when I launch the ec2 instance or I'll put this as part of some sort of initialization script",
    "start": "2256319",
    "end": "2262680"
  },
  {
    "text": "and uh this is a way that you can get all of your cron jobs uh set up so I just wanted to show those two quick tips",
    "start": "2262680",
    "end": "2269200"
  },
  {
    "text": "here um in case you start running into issues when you want to go to deploy these shell Scripts",
    "start": "2269200",
    "end": "2277680"
  },
  {
    "start": "2276000",
    "end": "2378000"
  },
  {
    "text": "okay sorry here so I want to take a brief DeTour for just a quick moment and",
    "start": "2280520",
    "end": "2288079"
  },
  {
    "text": "talk about the community you know one of my favorite parts of working on the AWS CLI and Bodo 3 and the other AWS sdks is",
    "start": "2288079",
    "end": "2296839"
  },
  {
    "text": "the fact that it's all open source it's all developed on GitHub and so we really enjoy when we get contributions from the",
    "start": "2296839",
    "end": "2303119"
  },
  {
    "text": "community we enjoy when we get feature requests or just general feedback and we also really enjoy when customers take",
    "start": "2303119",
    "end": "2310240"
  },
  {
    "text": "our tools and build higher level abstractions on top of that and I want",
    "start": "2310240",
    "end": "2315359"
  },
  {
    "text": "to highlight one particular tool that was written by a Community member who I believe is here today uh don Maron uh he",
    "start": "2315359",
    "end": "2322079"
  },
  {
    "text": "has written a tool called saw if anyone has heard of that or seen that is a great tool it allows you to do things",
    "start": "2322079",
    "end": "2330000"
  },
  {
    "text": "like tab complete or completion as you type it does autoc completion of server side resources for the CLI it does",
    "start": "2330000",
    "end": "2335839"
  },
  {
    "text": "syntax highlighting and fuzzy searching and a lot of really cool stuff that you should check out if you have the",
    "start": "2335839",
    "end": "2342040"
  },
  {
    "text": "chance and I'm mentioning this because turns out that we were also working on",
    "start": "2342040",
    "end": "2347160"
  },
  {
    "text": "something similar and uh we actually had the chance to sit down with Don here at",
    "start": "2347160",
    "end": "2352480"
  },
  {
    "text": "reinvent uh and I am happy to say that we are going to be combining efforts and merging projects we'll be taking um",
    "start": "2352480",
    "end": "2359839"
  },
  {
    "text": "having an official project with all this functionality combined together it's still at the very early stages so I",
    "start": "2359839",
    "end": "2365280"
  },
  {
    "text": "don't have a lot of specific details I don't know the exact um details yet but",
    "start": "2365280",
    "end": "2370359"
  },
  {
    "text": "uh stay tuned it is coming but in the meantime I wanted to leave you with a preview of some of the features that are",
    "start": "2370359",
    "end": "2376960"
  },
  {
    "text": "coming so this is a project we've been working on called the AWS shell and IT addresses one of the",
    "start": "2376960",
    "end": "2384839"
  },
  {
    "start": "2378000",
    "end": "2403000"
  },
  {
    "text": "problems that I didn't really talk about so far in this talk and that's as I've been writing these shell scripts I just",
    "start": "2384839",
    "end": "2390520"
  },
  {
    "text": "knew what commands they were I knew that I needed to call describe images I knew what the filters were I knew had a",
    "start": "2390520",
    "end": "2396040"
  },
  {
    "text": "little bit of help with that plugin to figure out the query Expressions but for the most part I just knew and we want to",
    "start": "2396040",
    "end": "2403880"
  },
  {
    "start": "2403000",
    "end": "2420000"
  },
  {
    "text": "address a way where you can actually make this process more streamlined where I can have some contextual help to tell",
    "start": "2403880",
    "end": "2411040"
  },
  {
    "text": "me what commands I have available and what options I can provide and so the shell provides completion of resources",
    "start": "2411040",
    "end": "2417440"
  },
  {
    "text": "and services that give you a list of things so I can start typing things like ec2 and it shows me all of the commands",
    "start": "2417440",
    "end": "2424720"
  },
  {
    "start": "2420000",
    "end": "2440000"
  },
  {
    "text": "and also notice it pulls up documentation here too so I can see what that command is and so as I start",
    "start": "2424720",
    "end": "2431920"
  },
  {
    "text": "typing thank you there's more so as I start typing run instances",
    "start": "2437040",
    "end": "2443400"
  },
  {
    "start": "2440000",
    "end": "2479000"
  },
  {
    "text": "the docs here if I do dash dash it'll show me what fields are required so I can see here that the image ID is required so I can go ahead and type that",
    "start": "2443400",
    "end": "2450400"
  },
  {
    "text": "and as I start typing that again it'll pull up documentation for me it also does things like I'll put in a value",
    "start": "2450400",
    "end": "2455640"
  },
  {
    "text": "there if I'm picking something like placement and it'll say that it's a structure for the placement for the",
    "start": "2455640",
    "end": "2460920"
  },
  {
    "text": "instance if there's any CLI users that have used a shorthand syntax you know this is actually a shorthand value so if",
    "start": "2460920",
    "end": "2466240"
  },
  {
    "text": "I hit space here it will show me the shorthand syntax but also offer to autocomplete it for me so I can go and",
    "start": "2466240",
    "end": "2471440"
  },
  {
    "text": "hit tab here and let's say in this case I only want you know us West 2A so I can go ahead and do those kind of things",
    "start": "2471440",
    "end": "2478160"
  },
  {
    "text": "there's also a couple of other cool features uh one of the other ones that does you know the CLI commands they're",
    "start": "2478160",
    "end": "2484480"
  },
  {
    "start": "2479000",
    "end": "2514000"
  },
  {
    "text": "very explicitly named you know describe Reserve instance offering it's very clear what command you're running but",
    "start": "2484480",
    "end": "2490760"
  },
  {
    "text": "sometimes you might want a more succinct way to specify that so it does things like fuzzy searching so I can say d r IO",
    "start": "2490760",
    "end": "2498560"
  },
  {
    "text": "describe Reserve instance offering and we'll go ahead and do a fuzzy search here of all of the commands so I can go",
    "start": "2498560",
    "end": "2503599"
  },
  {
    "text": "ahead and just tab complete that same thing if I have like reserved instance",
    "start": "2503599",
    "end": "2508760"
  },
  {
    "text": "offering IDs it will tab complete that and again pull up docs for me and it also lets you do things like",
    "start": "2508760",
    "end": "2517400"
  },
  {
    "start": "2514000",
    "end": "2530000"
  },
  {
    "text": "specify part of one word and part of the next word and the other thing that I want to show here I'll actually run one of these commands that it's just the CLI",
    "start": "2517400",
    "end": "2524720"
  },
  {
    "text": "under the hood so it's just a way to show you and help you figure out what commands you want okay and probably one",
    "start": "2524720",
    "end": "2531160"
  },
  {
    "start": "2530000",
    "end": "2552000"
  },
  {
    "text": "of the really cool things is that if I say like term inst I can see the instance IDs are required and if I go",
    "start": "2531160",
    "end": "2538079"
  },
  {
    "text": "ahead and provide say IDs hit tab here tab completes server side resources so",
    "start": "2538079",
    "end": "2543520"
  },
  {
    "text": "it shows me what uh instance IDs I have available to me so I can go ahead and just tab complete that that was actually",
    "start": "2543520",
    "end": "2549599"
  },
  {
    "text": "the instance ID we just spun up earlier so one of the great things about this also if there's any python",
    "start": "2549599",
    "end": "2555200"
  },
  {
    "start": "2552000",
    "end": "2595000"
  },
  {
    "text": "developers or any uh users of the AWS sdks you know that some of them have a resource model and there's things where",
    "start": "2555200",
    "end": "2561480"
  },
  {
    "text": "it's basically an objectoriented interface where I can say instance. terminate instance. stop that kind of",
    "start": "2561480",
    "end": "2566559"
  },
  {
    "text": "thing and the reason I'm mentioning this is because that model tells us what operations are available on an instance",
    "start": "2566559",
    "end": "2572880"
  },
  {
    "text": "it also tells us how we can describe those instances and the reason this is all relevant is because we can actually",
    "start": "2572880",
    "end": "2578160"
  },
  {
    "text": "take that data and generate server how to do server side completion so any resource that's available in Bodo 3 you",
    "start": "2578160",
    "end": "2584480"
  },
  {
    "text": "can do autoc completion for basically for free so things like ec2 I I can",
    "start": "2584480",
    "end": "2590240"
  },
  {
    "text": "delete users here it does autocomplete for usernames all that kind of stuff and to bring this back to Shell",
    "start": "2590240",
    "end": "2597079"
  },
  {
    "start": "2595000",
    "end": "2610000"
  },
  {
    "text": "scripting for a moment so I have a little more context here to help me figure out what these commands are how I",
    "start": "2597079",
    "end": "2602480"
  },
  {
    "text": "can start running them but now I've figured it out and I want to convert that into a shell script so one of the",
    "start": "2602480",
    "end": "2607720"
  },
  {
    "text": "things you can do here is do aedit and it we'll take all the commands that I've run and open them in an editor",
    "start": "2607720",
    "end": "2613680"
  },
  {
    "start": "2610000",
    "end": "2632000"
  },
  {
    "text": "and so then I can start converting this to a shell script so things like bin bash and then you know start figuring them out maybe call this instance IDs",
    "start": "2613680",
    "end": "2620480"
  },
  {
    "text": "and then replace this with IDs so I can start go ahead and creating my shell script based on what I figured out here",
    "start": "2620480",
    "end": "2626319"
  },
  {
    "text": "then you know save that as my scripts or something like that and go ahead and exit out okay so that's a",
    "start": "2626319",
    "end": "2634359"
  },
  {
    "start": "2632000",
    "end": "2659000"
  },
  {
    "text": "quick preview of some of the things that are coming uh again said will be merging projects it's at the very early stages",
    "start": "2634359",
    "end": "2639800"
  },
  {
    "text": "but look out for it it's going to be very hopefully useful and people will find it um helps them be more productive",
    "start": "2639800",
    "end": "2647880"
  },
  {
    "text": "with the AWS CLI all",
    "start": "2647880",
    "end": "2652599"
  },
  {
    "text": "right",
    "start": "2653599",
    "end": "2656599"
  },
  {
    "start": "2659000",
    "end": "2684000"
  },
  {
    "text": "now that was all the content I wanted to share here's a quick summary we looked at",
    "start": "2659160",
    "end": "2664760"
  },
  {
    "text": "common patterns we looked at some shell script examples by the way all these code samples will be on AWS labs and um",
    "start": "2664760",
    "end": "2671040"
  },
  {
    "text": "this project that I just showed you will also be on AWS Labs we looked at some tips for deployment with Kon and then",
    "start": "2671040",
    "end": "2676440"
  },
  {
    "text": "finally I showed you a couple tools Vim plugin JP term uh the JP executable and",
    "start": "2676440",
    "end": "2681680"
  },
  {
    "text": "then the shell project now please remember to complete your evaluations it's how we can improve",
    "start": "2681680",
    "end": "2688119"
  },
  {
    "start": "2684000",
    "end": "2701000"
  },
  {
    "text": "and do better let us know what you liked what you didn't like um I hope everyone enjoys the rest of the conference and",
    "start": "2688119",
    "end": "2693200"
  },
  {
    "text": "all the activities tonight and once again thank you w",
    "start": "2693200",
    "end": "2700160"
  }
]