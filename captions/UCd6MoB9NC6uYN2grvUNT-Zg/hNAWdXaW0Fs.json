[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "[Music]",
    "start": "610",
    "end": "6080"
  },
  {
    "text": "hello my name is norm a software",
    "start": "6080",
    "end": "8880"
  },
  {
    "text": "engineer on the dotnet team here at",
    "start": "8880",
    "end": "10469"
  },
  {
    "text": "address in this video we're gonna talk",
    "start": "10469",
    "end": "13139"
  },
  {
    "text": "about using Amazon downer to be with",
    "start": "13139",
    "end": "15330"
  },
  {
    "text": "dotnet if you haven't used entity before",
    "start": "15330",
    "end": "17730"
  },
  {
    "text": "it is a no sequel database that doesn't",
    "start": "17730",
    "end": "20369"
  },
  {
    "text": "require you to define a schema you just",
    "start": "20369",
    "end": "22830"
  },
  {
    "text": "defined the keys for your tables it is",
    "start": "22830",
    "end": "25260"
  },
  {
    "text": "also fully managed which means there are",
    "start": "25260",
    "end": "27449"
  },
  {
    "text": "no machines to maintain it is also easy",
    "start": "27449",
    "end": "30300"
  },
  {
    "text": "to scale when you create a table you",
    "start": "30300",
    "end": "32610"
  },
  {
    "text": "just specify the read and write",
    "start": "32610",
    "end": "34110"
  },
  {
    "text": "capacities to reserved for that table",
    "start": "34110",
    "end": "36239"
  },
  {
    "text": "these values can be raised or lowered",
    "start": "36239",
    "end": "38219"
  },
  {
    "text": "after you create the table as the",
    "start": "38219",
    "end": "40410"
  },
  {
    "text": "scaling needs of your tables change",
    "start": "40410",
    "end": "42300"
  },
  {
    "text": "without taking the table offline to use",
    "start": "42300",
    "end": "45379"
  },
  {
    "text": "DynamoDB with your done net applications",
    "start": "45379",
    "end": "47879"
  },
  {
    "text": "you need to add the ATP's SDK DynamoDB",
    "start": "47879",
    "end": "52140"
  },
  {
    "text": "v2 nougat package",
    "start": "52140",
    "end": "53940"
  },
  {
    "text": "the v2 refers to a large service API",
    "start": "53940",
    "end": "57149"
  },
  {
    "text": "change done several years ago the v2",
    "start": "57149",
    "end": "60420"
  },
  {
    "text": "suffix was added to the namespace and",
    "start": "60420",
    "end": "62699"
  },
  {
    "text": "the package to allow applications using",
    "start": "62699",
    "end": "65158"
  },
  {
    "text": "the original API to continue to work",
    "start": "65159",
    "end": "67260"
  },
  {
    "text": "alongside the new service API with the",
    "start": "67260",
    "end": "70409"
  },
  {
    "text": "Dino to be nougat package there are",
    "start": "70409",
    "end": "72000"
  },
  {
    "text": "three different api's you can use to",
    "start": "72000",
    "end": "73979"
  },
  {
    "text": "access Dino DB the first is using this",
    "start": "73979",
    "end": "77369"
  },
  {
    "text": "service client which is what we also",
    "start": "77369",
    "end": "79140"
  },
  {
    "text": "refer as the low-level API this API",
    "start": "79140",
    "end": "82020"
  },
  {
    "text": "provides full access to the done and B",
    "start": "82020",
    "end": "84030"
  },
  {
    "text": "API it does require you to write more",
    "start": "84030",
    "end": "87030"
  },
  {
    "text": "code when accessing derby because you",
    "start": "87030",
    "end": "89490"
  },
  {
    "text": "need to explicitly tell Danny B how to",
    "start": "89490",
    "end": "92549"
  },
  {
    "text": "store every piece of your data",
    "start": "92549",
    "end": "95390"
  },
  {
    "text": "the second API is the document model",
    "start": "95390",
    "end": "98340"
  },
  {
    "text": "with this API you use a document object",
    "start": "98340",
    "end": "100979"
  },
  {
    "text": "to store and retrieve your data this API",
    "start": "100979",
    "end": "103770"
  },
  {
    "text": "works really well when you're storing",
    "start": "103770",
    "end": "105600"
  },
  {
    "text": "unstructured data where each item could",
    "start": "105600",
    "end": "108090"
  },
  {
    "text": "have completely different attributes the",
    "start": "108090",
    "end": "111360"
  },
  {
    "text": "third API is the data model API where",
    "start": "111360",
    "end": "113970"
  },
  {
    "text": "you model your data as dotnet classes",
    "start": "113970",
    "end": "116009"
  },
  {
    "text": "and use a context object to save and",
    "start": "116009",
    "end": "118710"
  },
  {
    "text": "retrieve your data as instances of your",
    "start": "118710",
    "end": "120869"
  },
  {
    "text": "type classes now let's take a look at",
    "start": "120869",
    "end": "124290"
  },
  {
    "text": "these three api's in action here we are",
    "start": "124290",
    "end": "127229"
  },
  {
    "start": "126000",
    "end": "418000"
  },
  {
    "text": "in visual studio and I have a sample",
    "start": "127229",
    "end": "128789"
  },
  {
    "text": "application that is going to use all",
    "start": "128789",
    "end": "130860"
  },
  {
    "text": "three different API so each of these",
    "start": "130860",
    "end": "132870"
  },
  {
    "text": "samples",
    "start": "132870",
    "end": "133410"
  },
  {
    "text": "it's going to store a user in a user's",
    "start": "133410",
    "end": "136410"
  },
  {
    "text": "table and down interview I can create my",
    "start": "136410",
    "end": "138990"
  },
  {
    "text": "users table here in the ATIS explorer by",
    "start": "138990",
    "end": "141210"
  },
  {
    "text": "right-clicking on the note and say",
    "start": "141210",
    "end": "142860"
  },
  {
    "text": "create table specify name is users and",
    "start": "142860",
    "end": "147000"
  },
  {
    "text": "then I needed to find the key for my",
    "start": "147000",
    "end": "149970"
  },
  {
    "text": "table and a key is made up of a hash key",
    "start": "149970",
    "end": "152010"
  },
  {
    "text": "and optionally a range key you would use",
    "start": "152010",
    "end": "155460"
  },
  {
    "text": "a range key if you needed to provide",
    "start": "155460",
    "end": "156990"
  },
  {
    "text": "query capabilities within the scope of a",
    "start": "156990",
    "end": "159180"
  },
  {
    "text": "hash key in this example today I'm just",
    "start": "159180",
    "end": "161610"
  },
  {
    "text": "gonna set a hash key of ID and leave its",
    "start": "161610",
    "end": "164100"
  },
  {
    "text": "type as string we also would define the",
    "start": "164100",
    "end": "167610"
  },
  {
    "text": "region write capacities we want to",
    "start": "167610",
    "end": "169050"
  },
  {
    "text": "reserved for this table I'm just gonna",
    "start": "169050",
    "end": "170730"
  },
  {
    "text": "leave that the default for our demo",
    "start": "170730",
    "end": "171960"
  },
  {
    "text": "today I could continue further in this",
    "start": "171960",
    "end": "174390"
  },
  {
    "text": "wizard to also set up indexes for our",
    "start": "174390",
    "end": "176100"
  },
  {
    "text": "table but we're not gonna do that today",
    "start": "176100",
    "end": "177420"
  },
  {
    "text": "and just push create our tables gonna be",
    "start": "177420",
    "end": "181170"
  },
  {
    "text": "created and we can just start running",
    "start": "181170",
    "end": "183390"
  },
  {
    "text": "through our sample location to see how",
    "start": "183390",
    "end": "184590"
  },
  {
    "text": "that works so I'm gonna push f5 and",
    "start": "184590",
    "end": "188190"
  },
  {
    "text": "we'll step through our code and the",
    "start": "188190",
    "end": "189360"
  },
  {
    "text": "first one you can see is our low-level",
    "start": "189360",
    "end": "190710"
  },
  {
    "text": "sample in the low-level sample we create",
    "start": "190710",
    "end": "194520"
  },
  {
    "text": "our service client which is has all the",
    "start": "194520",
    "end": "197040"
  },
  {
    "text": "api's to die ODB to save an item we're",
    "start": "197040",
    "end": "199770"
  },
  {
    "text": "going to call the put item operation",
    "start": "199770",
    "end": "201330"
  },
  {
    "text": "we're going to use the async version for",
    "start": "201330",
    "end": "203820"
  },
  {
    "text": "the.net sdk we support dotnet framework",
    "start": "203820",
    "end": "205560"
  },
  {
    "text": "and dotnet core and dotnet core we only",
    "start": "205560",
    "end": "208830"
  },
  {
    "text": "support the async up relations so by",
    "start": "208830",
    "end": "210930"
  },
  {
    "text": "coding this in async i can use this same",
    "start": "210930",
    "end": "212940"
  },
  {
    "text": "exact code in both dotnet court and",
    "start": "212940",
    "end": "215580"
  },
  {
    "text": "dotnet framework the put operation takes",
    "start": "215580",
    "end": "219150"
  },
  {
    "text": "in a put item request and here you can",
    "start": "219150",
    "end": "221250"
  },
  {
    "text": "see is how we set our data first we say",
    "start": "221250",
    "end": "224220"
  },
  {
    "text": "which table we want to save our item in",
    "start": "224220",
    "end": "225930"
  },
  {
    "text": "and we create an item which is made up",
    "start": "225930",
    "end": "228750"
  },
  {
    "text": "of a dictionary of string and attribute",
    "start": "228750",
    "end": "230790"
  },
  {
    "text": "values now the attribute value is an",
    "start": "230790",
    "end": "233310"
  },
  {
    "text": "interesting object because that's what",
    "start": "233310",
    "end": "234900"
  },
  {
    "text": "tells that may be how you want to store",
    "start": "234900",
    "end": "236970"
  },
  {
    "text": "your data for example here is a storing",
    "start": "236970",
    "end": "240870"
  },
  {
    "text": "the ID and we're setting the s value on",
    "start": "240870",
    "end": "244170"
  },
  {
    "text": "the attribute value which tells them to",
    "start": "244170",
    "end": "246060"
  },
  {
    "text": "be that we want to store this value as a",
    "start": "246060",
    "end": "248130"
  },
  {
    "text": "string in the system and we've done the",
    "start": "248130",
    "end": "250739"
  },
  {
    "text": "same for first name last name and",
    "start": "250739",
    "end": "252540"
  },
  {
    "text": "address now active we have said we want",
    "start": "252540",
    "end": "256019"
  },
  {
    "text": "to store that as a boolean so we need to",
    "start": "256020",
    "end": "258120"
  },
  {
    "text": "call the bool property number of",
    "start": "258120",
    "end": "261150"
  },
  {
    "text": "children's is a number so even though it",
    "start": "261150",
    "end": "263250"
  },
  {
    "text": "is a string here we're setting the N",
    "start": "263250",
    "end": "265560"
  },
  {
    "text": "value which tells",
    "start": "265560",
    "end": "267120"
  },
  {
    "text": "envy this is a number and that's going",
    "start": "267120",
    "end": "269040"
  },
  {
    "text": "to allow us when we do query operations",
    "start": "269040",
    "end": "270300"
  },
  {
    "text": "to use query operators that are",
    "start": "270300",
    "end": "272639"
  },
  {
    "text": "appropriate for numbers we then have our",
    "start": "272639",
    "end": "277380"
  },
  {
    "text": "interest which is a list it's a list of",
    "start": "277380",
    "end": "279600"
  },
  {
    "text": "attribute values and this is where",
    "start": "279600",
    "end": "281520"
  },
  {
    "text": "things can get interesting because those",
    "start": "281520",
    "end": "283050"
  },
  {
    "text": "attribute values can also have lists and",
    "start": "283050",
    "end": "285150"
  },
  {
    "text": "maps underneath there and you can",
    "start": "285150",
    "end": "286800"
  },
  {
    "text": "imagine how that would be able to extort",
    "start": "286800",
    "end": "288360"
  },
  {
    "text": "more complex structures and our example",
    "start": "288360",
    "end": "291030"
  },
  {
    "text": "here though we're gonna just store a",
    "start": "291030",
    "end": "292139"
  },
  {
    "text": "list of strings so each one of those",
    "start": "292139",
    "end": "293850"
  },
  {
    "text": "attribute values were setting the s",
    "start": "293850",
    "end": "295350"
  },
  {
    "text": "property and then skills we're gonna set",
    "start": "295350",
    "end": "300449"
  },
  {
    "text": "as a map and a map is a dictionary of",
    "start": "300449",
    "end": "303570"
  },
  {
    "text": "string to attribute values and here",
    "start": "303570",
    "end": "305760"
  },
  {
    "text": "we're setting olives as numbers again",
    "start": "305760",
    "end": "309180"
  },
  {
    "text": "you can imagine we could also be using",
    "start": "309180",
    "end": "310919"
  },
  {
    "text": "lists and maps to create complex",
    "start": "310919",
    "end": "312660"
  },
  {
    "text": "structures there let's just go ahead and",
    "start": "312660",
    "end": "315210"
  },
  {
    "text": "step over this and now our item has been",
    "start": "315210",
    "end": "319080"
  },
  {
    "text": "saved in our table in fact if we go back",
    "start": "319080",
    "end": "321210"
  },
  {
    "text": "to our diving Explorer we can see we",
    "start": "321210",
    "end": "323669"
  },
  {
    "text": "have now save our record in the table",
    "start": "323669",
    "end": "327410"
  },
  {
    "text": "now to get our item back out on the",
    "start": "327620",
    "end": "330240"
  },
  {
    "text": "dynamic line we're going to call the get",
    "start": "330240",
    "end": "331770"
  },
  {
    "text": "item operation and it's going to take in",
    "start": "331770",
    "end": "334710"
  },
  {
    "text": "a get item request and we specify the",
    "start": "334710",
    "end": "337979"
  },
  {
    "text": "table name and we're going to turn on",
    "start": "337979",
    "end": "340229"
  },
  {
    "text": "consistent read for our demo application",
    "start": "340229",
    "end": "342810"
  },
  {
    "text": "because in our demo application we want",
    "start": "342810",
    "end": "344849"
  },
  {
    "text": "to be able to read the data that we just",
    "start": "344849",
    "end": "346470"
  },
  {
    "text": "saved if you do not have that",
    "start": "346470",
    "end": "348720"
  },
  {
    "text": "requirement where you don't need to read",
    "start": "348720",
    "end": "349979"
  },
  {
    "text": "data that was just saved you can set",
    "start": "349979",
    "end": "351870"
  },
  {
    "text": "that defaults and by setting that",
    "start": "351870",
    "end": "353669"
  },
  {
    "text": "defaults that cuts in half the Rica",
    "start": "353669",
    "end": "356340"
  },
  {
    "text": "pasady units consumed by your read",
    "start": "356340",
    "end": "358470"
  },
  {
    "text": "operation and then we need to specify",
    "start": "358470",
    "end": "361349"
  },
  {
    "text": "the key this is how we know which item",
    "start": "361349",
    "end": "364139"
  },
  {
    "text": "to load and it is again a hash map or a",
    "start": "364139",
    "end": "366330"
  },
  {
    "text": "dictionary is a dictionary because we",
    "start": "366330",
    "end": "369930"
  },
  {
    "text": "could have specified both a hash key and",
    "start": "369930",
    "end": "371669"
  },
  {
    "text": "a range key in our example we only said",
    "start": "371669",
    "end": "374550"
  },
  {
    "text": "a hash key so it's a dictionary of just",
    "start": "374550",
    "end": "376080"
  },
  {
    "text": "one item and again we're saying it's a",
    "start": "376080",
    "end": "378930"
  },
  {
    "text": "string and passing it our value passed",
    "start": "378930",
    "end": "382440"
  },
  {
    "text": "that and now we've got our item and we",
    "start": "382440",
    "end": "386520"
  },
  {
    "text": "can print that out you look at our",
    "start": "386520",
    "end": "388500"
  },
  {
    "text": "console you can see here is all the data",
    "start": "388500",
    "end": "390449"
  },
  {
    "text": "that we just stored into a baby now to",
    "start": "390449",
    "end": "394169"
  },
  {
    "text": "delete it we just call the delete item",
    "start": "394169",
    "end": "395909"
  },
  {
    "text": "operation and it's like the get where",
    "start": "395909",
    "end": "397950"
  },
  {
    "text": "you pass in a table name and",
    "start": "397950",
    "end": "400530"
  },
  {
    "text": "the key information now our item has",
    "start": "400530",
    "end": "404820"
  },
  {
    "text": "been deleted if we go back and we scan",
    "start": "404820",
    "end": "406440"
  },
  {
    "text": "our table we can see our data has been",
    "start": "406440",
    "end": "408300"
  },
  {
    "text": "removed so that's how you can use the",
    "start": "408300",
    "end": "410580"
  },
  {
    "text": "low-level API to access all of the",
    "start": "410580",
    "end": "412920"
  },
  {
    "text": "features but you do need to specify how",
    "start": "412920",
    "end": "415320"
  },
  {
    "text": "exactly you want to store all the data",
    "start": "415320",
    "end": "416730"
  },
  {
    "text": "on that attribute value next let's take",
    "start": "416730",
    "end": "419610"
  },
  {
    "start": "418000",
    "end": "649000"
  },
  {
    "text": "a look at the document model API so I'm",
    "start": "419610",
    "end": "421230"
  },
  {
    "text": "going to continue running and we'll step",
    "start": "421230",
    "end": "422760"
  },
  {
    "text": "into the next sample on the document",
    "start": "422760",
    "end": "425040"
  },
  {
    "text": "auto sample you can use that by",
    "start": "425040",
    "end": "426540"
  },
  {
    "text": "including the namespace Amazon DynamoDB",
    "start": "426540",
    "end": "429200"
  },
  {
    "text": "v2 document model it still uses the",
    "start": "429200",
    "end": "433290"
  },
  {
    "text": "service client but it wraps around it by",
    "start": "433290",
    "end": "435120"
  },
  {
    "text": "this table object and the table object",
    "start": "435120",
    "end": "438930"
  },
  {
    "text": "is what we use to load up all of our",
    "start": "438930",
    "end": "440880"
  },
  {
    "text": "documents so first we're gonna create",
    "start": "440880",
    "end": "442680"
  },
  {
    "text": "that by calling the load table method",
    "start": "442680",
    "end": "444120"
  },
  {
    "text": "which doesn't load the data it loads all",
    "start": "444120",
    "end": "446700"
  },
  {
    "text": "the metadata for our table it loads the",
    "start": "446700",
    "end": "448680"
  },
  {
    "text": "keys and the indexes that have been",
    "start": "448680",
    "end": "450780"
  },
  {
    "text": "configured for our table we pass in our",
    "start": "450780",
    "end": "453210"
  },
  {
    "text": "service client we tell it what table we",
    "start": "453210",
    "end": "455700"
  },
  {
    "text": "want to load this third property is",
    "start": "455700",
    "end": "458520"
  },
  {
    "text": "telling which conversion album to use",
    "start": "458520",
    "end": "460710"
  },
  {
    "text": "when converting the data from the",
    "start": "460710",
    "end": "462210"
  },
  {
    "text": "document down into that put item request",
    "start": "462210",
    "end": "464040"
  },
  {
    "text": "and setting the values in the attribute",
    "start": "464040",
    "end": "465419"
  },
  {
    "text": "value now the reason we need to set this",
    "start": "465419",
    "end": "467970"
  },
  {
    "text": "is when Donna B first launched it",
    "start": "467970",
    "end": "470430"
  },
  {
    "text": "contains support for strings numbers",
    "start": "470430",
    "end": "472950"
  },
  {
    "text": "sets and binary and so when you were",
    "start": "472950",
    "end": "477000"
  },
  {
    "text": "still boolean x' before in the old",
    "start": "477000",
    "end": "478919"
  },
  {
    "text": "version they were stored as numbers",
    "start": "478919",
    "end": "480750"
  },
  {
    "text": "zeros and ones later diabetes down to be",
    "start": "480750",
    "end": "484620"
  },
  {
    "text": "added support for boolean lists and maps",
    "start": "484620",
    "end": "487729"
  },
  {
    "text": "so to add support for soaring you did",
    "start": "487729",
    "end": "490200"
  },
  {
    "text": "and there we added the new algorithm but",
    "start": "490200",
    "end": "492690"
  },
  {
    "text": "we needed to make sure you set that on",
    "start": "492690",
    "end": "494040"
  },
  {
    "text": "there just say you wanted to use it so",
    "start": "494040",
    "end": "495690"
  },
  {
    "text": "any of your previous code that was",
    "start": "495690",
    "end": "497340"
  },
  {
    "text": "saving the values as numbers would still",
    "start": "497340",
    "end": "499169"
  },
  {
    "text": "be able to access that so here we have",
    "start": "499169",
    "end": "503760"
  },
  {
    "text": "our table object we're gonna start",
    "start": "503760",
    "end": "505050"
  },
  {
    "text": "creating a document annexing the",
    "start": "505050",
    "end": "506640"
  },
  {
    "text": "document we can just use our index or",
    "start": "506640",
    "end": "508919"
  },
  {
    "text": "just set all the values and here we",
    "start": "508919",
    "end": "510780"
  },
  {
    "text": "aren't saying which is a string which is",
    "start": "510780",
    "end": "513240"
  },
  {
    "text": "a number it's just using the types they",
    "start": "513240",
    "end": "514979"
  },
  {
    "text": "are in.net",
    "start": "514979",
    "end": "515640"
  },
  {
    "text": "so here's all our string properties",
    "start": "515640",
    "end": "519380"
  },
  {
    "text": "here's just setting our boolean and our",
    "start": "519380",
    "end": "522479"
  },
  {
    "text": "number and then andres is taking in a",
    "start": "522479",
    "end": "525600"
  },
  {
    "text": "list of strings and that conversion",
    "start": "525600",
    "end": "528270"
  },
  {
    "text": "algorithm is going to go figure out how",
    "start": "528270",
    "end": "530190"
  },
  {
    "text": "to convert those into the attribute",
    "start": "530190",
    "end": "532380"
  },
  {
    "text": "attribute values",
    "start": "532380",
    "end": "534130"
  },
  {
    "text": "data types for our mAb we actually",
    "start": "534130",
    "end": "537040"
  },
  {
    "text": "create another document and set all the",
    "start": "537040",
    "end": "539079"
  },
  {
    "text": "values there and then we set that",
    "start": "539079",
    "end": "540940"
  },
  {
    "text": "document unto the parent document and",
    "start": "540940",
    "end": "542860"
  },
  {
    "text": "that's how maps are done",
    "start": "542860",
    "end": "544470"
  },
  {
    "text": "then to save it on the table we call put",
    "start": "544470",
    "end": "547149"
  },
  {
    "text": "item passing in a document now our",
    "start": "547149",
    "end": "550660"
  },
  {
    "text": "object is saved",
    "start": "550660",
    "end": "551759"
  },
  {
    "text": "and to get it back out on the user table",
    "start": "551759",
    "end": "554470"
  },
  {
    "text": "which is called get item and we pass in",
    "start": "554470",
    "end": "556930"
  },
  {
    "text": "our key information we don't display",
    "start": "556930",
    "end": "559060"
  },
  {
    "text": "what the key is because when we loaded",
    "start": "559060",
    "end": "560889"
  },
  {
    "text": "the table up it pulls in all the",
    "start": "560889",
    "end": "562360"
  },
  {
    "text": "metadata for us so we've got our table",
    "start": "562360",
    "end": "565269"
  },
  {
    "text": "and here's our document and we can print",
    "start": "565269",
    "end": "568089"
  },
  {
    "text": "that out and we can see again it has the",
    "start": "568089",
    "end": "571120"
  },
  {
    "text": "same data as the first demo and then to",
    "start": "571120",
    "end": "574060"
  },
  {
    "text": "delete it we just call the delete item",
    "start": "574060",
    "end": "575800"
  },
  {
    "text": "passing in they value for our key and",
    "start": "575800",
    "end": "578740"
  },
  {
    "text": "our item has been deleted now let's",
    "start": "578740",
    "end": "581050"
  },
  {
    "text": "check out the de tamale pie with this",
    "start": "581050",
    "end": "584949"
  },
  {
    "text": "one we're gonna use typed classes to",
    "start": "584949",
    "end": "587019"
  },
  {
    "text": "represent our data so in here I have",
    "start": "587019",
    "end": "589000"
  },
  {
    "text": "written a class called user that",
    "start": "589000",
    "end": "591970"
  },
  {
    "text": "represents all the data I want to serve",
    "start": "591970",
    "end": "593470"
  },
  {
    "text": "my users table now by default this API",
    "start": "593470",
    "end": "596920"
  },
  {
    "text": "is going to use the name of the class in",
    "start": "596920",
    "end": "598389"
  },
  {
    "text": "the name of the properties to map and",
    "start": "598389",
    "end": "600399"
  },
  {
    "text": "data Ruby but I don't want to create a",
    "start": "600399",
    "end": "602199"
  },
  {
    "text": "class called users for one single user",
    "start": "602199",
    "end": "604540"
  },
  {
    "text": "I just called that user but I can set",
    "start": "604540",
    "end": "606850"
  },
  {
    "text": "this dynamic table attribute to map that",
    "start": "606850",
    "end": "609550"
  },
  {
    "text": "table to this class and the same with",
    "start": "609550",
    "end": "612490"
  },
  {
    "text": "properties here I've renamed my key to",
    "start": "612490",
    "end": "614529"
  },
  {
    "text": "be email and I've added the property to",
    "start": "614529",
    "end": "616660"
  },
  {
    "text": "remap that to the ID property for all",
    "start": "616660",
    "end": "619839"
  },
  {
    "text": "the others I'm just going to use the",
    "start": "619839",
    "end": "621100"
  },
  {
    "text": "default names for those if there's any",
    "start": "621100",
    "end": "623680"
  },
  {
    "text": "properties I don't want to save like",
    "start": "623680",
    "end": "625569"
  },
  {
    "text": "this full name I can add the ignore",
    "start": "625569",
    "end": "627430"
  },
  {
    "text": "property on there and it will not be",
    "start": "627430",
    "end": "628750"
  },
  {
    "text": "persisted to downer to be so let's go",
    "start": "628750",
    "end": "630910"
  },
  {
    "text": "back to the table and see how we use",
    "start": "630910",
    "end": "632079"
  },
  {
    "text": "this user object so first we're going to",
    "start": "632079",
    "end": "635589"
  },
  {
    "text": "create a context object and that takes",
    "start": "635589",
    "end": "637959"
  },
  {
    "text": "in a config and here on the config you",
    "start": "637959",
    "end": "640569"
  },
  {
    "text": "can see I've turned on consistent read",
    "start": "640569",
    "end": "642189"
  },
  {
    "text": "because for our example we're gonna read",
    "start": "642189",
    "end": "644019"
  },
  {
    "text": "de that we just saved and we're gonna",
    "start": "644019",
    "end": "646300"
  },
  {
    "text": "also say we want to use the latest",
    "start": "646300",
    "end": "647920"
  },
  {
    "text": "conversion algorithm next we're going to",
    "start": "647920",
    "end": "650319"
  },
  {
    "text": "create our users object and we're gonna",
    "start": "650319",
    "end": "652329"
  },
  {
    "text": "set all the values just like we would",
    "start": "652329",
    "end": "653620"
  },
  {
    "text": "any other dotnet class using an object",
    "start": "653620",
    "end": "655689"
  },
  {
    "text": "initialization in this case once we've",
    "start": "655689",
    "end": "658630"
  },
  {
    "text": "set that up on our context object we",
    "start": "658630",
    "end": "661300"
  },
  {
    "text": "call save on that let's go ahead and",
    "start": "661300",
    "end": "663279"
  },
  {
    "text": "skip to there and now our object has",
    "start": "663279",
    "end": "665170"
  },
  {
    "text": "been saved the context object used our",
    "start": "665170",
    "end": "667900"
  },
  {
    "text": "to figure out how to store the data back",
    "start": "667900",
    "end": "670510"
  },
  {
    "text": "into down Oh to be and I can get that",
    "start": "670510",
    "end": "672880"
  },
  {
    "text": "back out calling the load method which",
    "start": "672880",
    "end": "676000"
  },
  {
    "text": "takes in the user generic so it knows",
    "start": "676000",
    "end": "678130"
  },
  {
    "text": "which table to go pull that information",
    "start": "678130",
    "end": "680340"
  },
  {
    "text": "and it takes in the key information so",
    "start": "680340",
    "end": "683500"
  },
  {
    "text": "here we step through we have now a fully",
    "start": "683500",
    "end": "686110"
  },
  {
    "text": "loaded user object we can expand out and",
    "start": "686110",
    "end": "688270"
  },
  {
    "text": "you can see here is all of our data and",
    "start": "688270",
    "end": "690300"
  },
  {
    "text": "we can print that out again and see",
    "start": "690300",
    "end": "693790"
  },
  {
    "text": "again we're seeing all that same data",
    "start": "693790",
    "end": "696840"
  },
  {
    "text": "and then to delete it we call the delete",
    "start": "696840",
    "end": "699940"
  },
  {
    "text": "method passing in the generic so we know",
    "start": "699940",
    "end": "702100"
  },
  {
    "text": "which table we're talking about and the",
    "start": "702100",
    "end": "704590"
  },
  {
    "text": "key information and pass that and now",
    "start": "704590",
    "end": "708160"
  },
  {
    "text": "our our user has been deleted so you can",
    "start": "708160",
    "end": "710380"
  },
  {
    "text": "see we have at least three different",
    "start": "710380",
    "end": "711430"
  },
  {
    "text": "api's to be able to access donor to be",
    "start": "711430",
    "end": "713770"
  },
  {
    "text": "depending on your needs now another",
    "start": "713770",
    "end": "715930"
  },
  {
    "text": "common use case that we hear is people",
    "start": "715930",
    "end": "717610"
  },
  {
    "text": "would like to store json documents and",
    "start": "717610",
    "end": "720010"
  },
  {
    "text": "dude i'm to be or get jason tokens back",
    "start": "720010",
    "end": "722380"
  },
  {
    "text": "out so let's take a look at how we can",
    "start": "722380",
    "end": "724360"
  },
  {
    "text": "do that in this other demo i set that as",
    "start": "724360",
    "end": "726790"
  },
  {
    "text": "my start up project and this is a Web",
    "start": "726790",
    "end": "731470"
  },
  {
    "text": "API project and I have a control users",
    "start": "731470",
    "end": "734320"
  },
  {
    "text": "controller and in that controller I'm",
    "start": "734320",
    "end": "738400"
  },
  {
    "text": "going to be used the document model API",
    "start": "738400",
    "end": "740290"
  },
  {
    "text": "on the docket model API you can go get",
    "start": "740290",
    "end": "743110"
  },
  {
    "text": "my document and I'm those documents and",
    "start": "743110",
    "end": "744940"
  },
  {
    "text": "I say to JSON method so this is how you",
    "start": "744940",
    "end": "747280"
  },
  {
    "text": "can convert the data you get from Dino",
    "start": "747280",
    "end": "749020"
  },
  {
    "text": "to be into a JSON document and we can do",
    "start": "749020",
    "end": "752320"
  },
  {
    "text": "the same thing the reverse way so here",
    "start": "752320",
    "end": "755230"
  },
  {
    "text": "if I take in a JSON object on a document",
    "start": "755230",
    "end": "758170"
  },
  {
    "text": "object I can convert that to from JSON",
    "start": "758170",
    "end": "761740"
  },
  {
    "text": "to a document with that static method",
    "start": "761740",
    "end": "763660"
  },
  {
    "text": "from JSON let's go take a look at how",
    "start": "763660",
    "end": "766330"
  },
  {
    "text": "this works I'm going to start this up",
    "start": "766330",
    "end": "769710"
  },
  {
    "text": "and that's loaded I'm going to use",
    "start": "769710",
    "end": "771850"
  },
  {
    "text": "postman to use those api's I've saved a",
    "start": "771850",
    "end": "776470"
  },
  {
    "text": "couple requests here so let's expand",
    "start": "776470",
    "end": "778480"
  },
  {
    "text": "that out and first I want to post a user",
    "start": "778480",
    "end": "782610"
  },
  {
    "text": "so here is I'm going to hit my Web API",
    "start": "782610",
    "end": "786000"
  },
  {
    "text": "the users controller and I'm going to do",
    "start": "786000",
    "end": "788890"
  },
  {
    "text": "a post it's gonna post this button I'm",
    "start": "788890",
    "end": "791800"
  },
  {
    "text": "just gonna send it to JSON to push Send",
    "start": "791800",
    "end": "797100"
  },
  {
    "text": "and you can see here the breakpoint that",
    "start": "797980",
    "end": "800050"
  },
  {
    "text": "I got my JSON object and we're going to",
    "start": "800050",
    "end": "802390"
  },
  {
    "text": "convert that to a document and then",
    "start": "802390",
    "end": "805480"
  },
  {
    "text": "using our users table object we're gonna",
    "start": "805480",
    "end": "807160"
  },
  {
    "text": "go save that in there so we didn't have",
    "start": "807160",
    "end": "808780"
  },
  {
    "text": "to do anything with the data other than",
    "start": "808780",
    "end": "810850"
  },
  {
    "text": "convert it to a document and then save",
    "start": "810850",
    "end": "812410"
  },
  {
    "text": "it in there and then we could get the",
    "start": "812410",
    "end": "816670"
  },
  {
    "text": "same data out the cowl and get and here",
    "start": "816670",
    "end": "819100"
  },
  {
    "text": "on that we're gonna pass in the ID of",
    "start": "819100",
    "end": "820840"
  },
  {
    "text": "the user we want to get we'll do that in",
    "start": "820840",
    "end": "825040"
  },
  {
    "text": "a way P controller here's our user we're",
    "start": "825040",
    "end": "826480"
  },
  {
    "text": "gonna go use that as the key information",
    "start": "826480",
    "end": "828330"
  },
  {
    "text": "pull that out and then we're called the",
    "start": "828330",
    "end": "830890"
  },
  {
    "text": "- Jason on the document to convert that",
    "start": "830890",
    "end": "832810"
  },
  {
    "text": "to a JSON document and you can see is we",
    "start": "832810",
    "end": "837430"
  },
  {
    "text": "got our JSON document back from our web",
    "start": "837430",
    "end": "839770"
  },
  {
    "text": "server using our dyno - BAPI",
    "start": "839770",
    "end": "841680"
  },
  {
    "text": "so there you can see how you can also",
    "start": "841680",
    "end": "843640"
  },
  {
    "text": "use JSON as well and with data to be",
    "start": "843640",
    "end": "845680"
  },
  {
    "text": "there you can see with the three",
    "start": "845680",
    "end": "847690"
  },
  {
    "text": "different API options and the ability to",
    "start": "847690",
    "end": "849550"
  },
  {
    "text": "use JSON you have a lot of options and",
    "start": "849550",
    "end": "851530"
  },
  {
    "text": "how to use donor to be in your done",
    "start": "851530",
    "end": "853270"
  },
  {
    "text": "applications thank you for watching",
    "start": "853270",
    "end": "857500"
  },
  {
    "text": "[Music]",
    "start": "857500",
    "end": "866979"
  }
]