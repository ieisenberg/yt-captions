[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "this video shows the integration of",
    "start": "8780",
    "end": "11190"
  },
  {
    "text": "Amazon DynamoDB with Amazon EMR how do",
    "start": "11190",
    "end": "14790"
  },
  {
    "text": "DynamoDB an EMR work together",
    "start": "14790",
    "end": "17000"
  },
  {
    "text": "EMR lets you create tables using Apache",
    "start": "17000",
    "end": "19590"
  },
  {
    "text": "hive these tables can store data",
    "start": "19590",
    "end": "21840"
  },
  {
    "text": "natively in an EMR cluster or can be",
    "start": "21840",
    "end": "24330"
  },
  {
    "text": "mapped to data stored externally such as",
    "start": "24330",
    "end": "26519"
  },
  {
    "text": "in dynamo DB and Amazon s3 external",
    "start": "26519",
    "end": "30300"
  },
  {
    "text": "tables enable you to migrate data",
    "start": "30300",
    "end": "32700"
  },
  {
    "text": "between dynamo DB and s3 for example you",
    "start": "32700",
    "end": "36420"
  },
  {
    "text": "can export dynamo DB table data to an s3",
    "start": "36420",
    "end": "38820"
  },
  {
    "text": "bucket or load data from s3 to a dynamo",
    "start": "38820",
    "end": "41610"
  },
  {
    "text": "DB table and upload data to a table that",
    "start": "41610",
    "end": "45239"
  },
  {
    "text": "stores the data natively in the EMR",
    "start": "45239",
    "end": "46980"
  },
  {
    "text": "cluster queries on the native data are",
    "start": "46980",
    "end": "49739"
  },
  {
    "text": "more efficient for complex queries",
    "start": "49739",
    "end": "51570"
  },
  {
    "text": "business intelligence reporting or data",
    "start": "51570",
    "end": "54000"
  },
  {
    "text": "mining in the first part of this video",
    "start": "54000",
    "end": "56789"
  },
  {
    "start": "55000",
    "end": "146000"
  },
  {
    "text": "I'll show you how to export data from a",
    "start": "56789",
    "end": "59070"
  },
  {
    "text": "dynamo DB table to an s3 bucket to",
    "start": "59070",
    "end": "62039"
  },
  {
    "text": "export the data we need to create two",
    "start": "62039",
    "end": "63960"
  },
  {
    "text": "external hive tables one of them will",
    "start": "63960",
    "end": "66330"
  },
  {
    "text": "map to the dynamo DB table and another",
    "start": "66330",
    "end": "68670"
  },
  {
    "text": "will map to an s3 bucket where we will",
    "start": "68670",
    "end": "70500"
  },
  {
    "text": "store the data",
    "start": "70500",
    "end": "73040"
  },
  {
    "text": "for the first table we use the create",
    "start": "74040",
    "end": "76350"
  },
  {
    "text": "external table statement which creates a",
    "start": "76350",
    "end": "78570"
  },
  {
    "text": "hive table that points to an existing",
    "start": "78570",
    "end": "80310"
  },
  {
    "text": "dynamodb table the hive table is called",
    "start": "80310",
    "end": "83490"
  },
  {
    "text": "PC dynamodb where PC is short for",
    "start": "83490",
    "end": "86550"
  },
  {
    "text": "product catalog that maps to the",
    "start": "86550",
    "end": "88530"
  },
  {
    "text": "DynamoDB table product catalog the hive",
    "start": "88530",
    "end": "92070"
  },
  {
    "text": "table has the columns ID title ISBN and",
    "start": "92070",
    "end": "95670"
  },
  {
    "text": "other values these columns correspond to",
    "start": "95670",
    "end": "98910"
  },
  {
    "text": "the attributes in the DynamoDB table",
    "start": "98910",
    "end": "101740"
  },
  {
    "text": "now we'll create another external hive",
    "start": "101740",
    "end": "104170"
  },
  {
    "text": "table this time the table will map to an",
    "start": "104170",
    "end": "106570"
  },
  {
    "text": "s3 bucket the external hive table name",
    "start": "106570",
    "end": "109450"
  },
  {
    "text": "is PC s3 and maps to the s3 object my",
    "start": "109450",
    "end": "113350"
  },
  {
    "text": "AWS bucket 1 / catalog again we specify",
    "start": "113350",
    "end": "117460"
  },
  {
    "text": "the column names and their data types",
    "start": "117460",
    "end": "118960"
  },
  {
    "text": "and now we specify row format to request",
    "start": "118960",
    "end": "123340"
  },
  {
    "text": "comma separated values in the resulting",
    "start": "123340",
    "end": "125290"
  },
  {
    "text": "object by following the steps in the",
    "start": "125290",
    "end": "128890"
  },
  {
    "text": "Amazon DynamoDB developer guide I",
    "start": "128890",
    "end": "130840"
  },
  {
    "text": "already have an interactive hive session",
    "start": "130840",
    "end": "132790"
  },
  {
    "text": "running at the end of this video I'll",
    "start": "132790",
    "end": "134739"
  },
  {
    "text": "provide a link to a walkthrough with",
    "start": "134739",
    "end": "136450"
  },
  {
    "text": "step-by-step instructions for you to try",
    "start": "136450",
    "end": "138760"
  },
  {
    "text": "it yourself",
    "start": "138760",
    "end": "139360"
  },
  {
    "text": "for now I'll copy and paste these",
    "start": "139360",
    "end": "141070"
  },
  {
    "text": "statements into a hive session to create",
    "start": "141070",
    "end": "142930"
  },
  {
    "text": "our map tables",
    "start": "142930",
    "end": "145680"
  },
  {
    "start": "146000",
    "end": "181000"
  },
  {
    "text": "now to export our data to Amazon s3 we",
    "start": "146310",
    "end": "149379"
  },
  {
    "text": "use an insert statement which selects",
    "start": "149379",
    "end": "151720"
  },
  {
    "text": "data from the dynamodb table and inserts",
    "start": "151720",
    "end": "154239"
  },
  {
    "text": "it into the s3 bucket through the map",
    "start": "154239",
    "end": "156160"
  },
  {
    "text": "tables",
    "start": "156160",
    "end": "158610"
  },
  {
    "text": "you",
    "start": "164660",
    "end": "166720"
  },
  {
    "text": "when the insert completes the data is",
    "start": "168010",
    "end": "170470"
  },
  {
    "text": "stored in s3 let us verify the resulting",
    "start": "170470",
    "end": "173470"
  },
  {
    "text": "object in the Amazon s3 console notice",
    "start": "173470",
    "end": "177280"
  },
  {
    "text": "the comma separated values",
    "start": "177280",
    "end": "180599"
  },
  {
    "text": "you could import data from Amazon s3 to",
    "start": "181160",
    "end": "183530"
  },
  {
    "text": "a dynamodb table - this is a useful way",
    "start": "183530",
    "end": "186530"
  },
  {
    "text": "to import existing data into a new",
    "start": "186530",
    "end": "188510"
  },
  {
    "text": "DynamoDB table or perform periodic bulk",
    "start": "188510",
    "end": "191390"
  },
  {
    "text": "uploads of data from another application",
    "start": "191390",
    "end": "193520"
  },
  {
    "text": "and with EMR support for scripting you",
    "start": "193520",
    "end": "196310"
  },
  {
    "text": "can save your scripts and run them on a",
    "start": "196310",
    "end": "198140"
  },
  {
    "text": "schedule now in the second half of this",
    "start": "198140",
    "end": "201110"
  },
  {
    "text": "video we'll load the data from the",
    "start": "201110",
    "end": "202910"
  },
  {
    "text": "external table map - dynamodb into a",
    "start": "202910",
    "end": "205640"
  },
  {
    "text": "native hive table and use the power of",
    "start": "205640",
    "end": "207680"
  },
  {
    "text": "hive QL to get the results of a complex",
    "start": "207680",
    "end": "209870"
  },
  {
    "text": "query this query will be executed on the",
    "start": "209870",
    "end": "212600"
  },
  {
    "text": "data stored natively uploading data",
    "start": "212600",
    "end": "215120"
  },
  {
    "text": "consumes some provision throughput in",
    "start": "215120",
    "end": "216800"
  },
  {
    "text": "DynamoDB the queries on the datastore",
    "start": "216800",
    "end": "219170"
  },
  {
    "text": "natively in an EMR cluster don't consume",
    "start": "219170",
    "end": "221750"
  },
  {
    "text": "DynamoDB provision throughput let's try",
    "start": "221750",
    "end": "224600"
  },
  {
    "text": "it we already have an external hive",
    "start": "224600",
    "end": "226580"
  },
  {
    "text": "table map to our dynamo DB product",
    "start": "226580",
    "end": "228530"
  },
  {
    "text": "catalog table now we only need to create",
    "start": "228530",
    "end": "230960"
  },
  {
    "text": "a native hive table where we will load",
    "start": "230960",
    "end": "233150"
  },
  {
    "text": "the data for our query this statement",
    "start": "233150",
    "end": "236120"
  },
  {
    "text": "creates the native hive table notice the",
    "start": "236120",
    "end": "238700"
  },
  {
    "text": "external keyword is not used then upload",
    "start": "238700",
    "end": "242120"
  },
  {
    "text": "the DynamoDB table data into the new",
    "start": "242120",
    "end": "244130"
  },
  {
    "text": "hive table using an insert statement",
    "start": "244130",
    "end": "248260"
  },
  {
    "text": "you",
    "start": "255030",
    "end": "257090"
  },
  {
    "text": "our data is now stored in the new hive",
    "start": "261630",
    "end": "264000"
  },
  {
    "text": "table and we can query the data natively",
    "start": "264000",
    "end": "266280"
  },
  {
    "text": "for example this select statement tells",
    "start": "266280",
    "end": "269340"
  },
  {
    "text": "us the number of products in each",
    "start": "269340",
    "end": "270720"
  },
  {
    "text": "category with this select statement we",
    "start": "270720",
    "end": "274830"
  },
  {
    "text": "are acquiring the data natively in a",
    "start": "274830",
    "end": "276210"
  },
  {
    "text": "hive table and not querying DynamoDB at",
    "start": "276210",
    "end": "278310"
  },
  {
    "text": "all therefore we are not using any",
    "start": "278310",
    "end": "280350"
  },
  {
    "text": "dynamodb provision throughput which can",
    "start": "280350",
    "end": "282840"
  },
  {
    "text": "impact the rest of your application keep",
    "start": "282840",
    "end": "286050"
  },
  {
    "text": "in mind this demonstration uses one",
    "start": "286050",
    "end": "288150"
  },
  {
    "text": "small product catalog table to",
    "start": "288150",
    "end": "289710"
  },
  {
    "text": "illustrate the process of querying data",
    "start": "289710",
    "end": "291180"
  },
  {
    "text": "stored natively and you could also query",
    "start": "291180",
    "end": "293940"
  },
  {
    "text": "the data from its location in Amazon s3",
    "start": "293940",
    "end": "295860"
  },
  {
    "text": "but for big data analysis reading the",
    "start": "295860",
    "end": "298620"
  },
  {
    "text": "data natively is much faster because EMR",
    "start": "298620",
    "end": "301230"
  },
  {
    "text": "is designed and optimized to",
    "start": "301230",
    "end": "302610"
  },
  {
    "text": "cost-effectively process vast amounts of",
    "start": "302610",
    "end": "304980"
  },
  {
    "text": "data across many tables if you'd like to",
    "start": "304980",
    "end": "307890"
  },
  {
    "text": "try these steps for yourself go to the",
    "start": "307890",
    "end": "309960"
  },
  {
    "text": "following URL",
    "start": "309960",
    "end": "312530"
  }
]