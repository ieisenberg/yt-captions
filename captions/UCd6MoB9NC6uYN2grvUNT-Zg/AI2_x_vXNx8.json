[
  {
    "text": "hi all I am Stephen Hebron I am a senior technical account manager at AWS and I",
    "start": "5339",
    "end": "11760"
  },
  {
    "text": "am based out of Philadelphia Pennsylvania welcome to AWS supports you where AWS support experts provide tips",
    "start": "11760",
    "end": "18539"
  },
  {
    "text": "to optimize performance in the cloud lower costs and provide you with best practices and design considerations",
    "start": "18539",
    "end": "26000"
  },
  {
    "text": "joining me today is anupsavares a principal Solutions architect Anup can",
    "start": "26000",
    "end": "32160"
  },
  {
    "text": "you give us a quick introduction absolutely thank you Stephen hi everyone my name is Anup shivadas a principal",
    "start": "32160",
    "end": "38160"
  },
  {
    "text": "Solutions architect here at AWS I've been related with for close to five years now and I'm based out of Virginia",
    "start": "38160",
    "end": "46878"
  },
  {
    "text": "thanks enough today we'll be introducing you to Amazon RDS proxy we will",
    "start": "46920",
    "end": "52320"
  },
  {
    "text": "specifically focus on diving deep and scaling it for modern applications before we get into the details a quick",
    "start": "52320",
    "end": "59100"
  },
  {
    "text": "note to the attendees online feel free to use the chat window on the right side of your screen to let us know where",
    "start": "59100",
    "end": "64860"
  },
  {
    "text": "you're joining us from today and share your thoughts and questions throughout the episode we look forward to hearing",
    "start": "64860",
    "end": "70380"
  },
  {
    "text": "from you we will also provide you with a link to our survey so if you'd like to let us know how we did please click the",
    "start": "70380",
    "end": "76680"
  },
  {
    "text": "link and leave your feedback enough can you walk us through what we're going to be talking about today",
    "start": "76680",
    "end": "82400"
  },
  {
    "text": "absolutely sure so all right so we are going to talk about",
    "start": "82400",
    "end": "88979"
  },
  {
    "text": "a few things today right so the agenda is looking like this um so we'll spend some time in the",
    "start": "88979",
    "end": "94080"
  },
  {
    "text": "beginning to talk about RDX proxy why the service was built right so we we are",
    "start": "94080",
    "end": "100560"
  },
  {
    "text": "customer obsessed and we hear feedback from customers on what are the challenges right so we often heard a",
    "start": "100560",
    "end": "106380"
  },
  {
    "text": "customer's uh feedback around few challenges they have when it comes to scaling app and oftentimes database",
    "start": "106380",
    "end": "112920"
  },
  {
    "text": "becomes a bottleneck so we'll spend some time talking about why the service was built and talk about some of the",
    "start": "112920",
    "end": "118079"
  },
  {
    "text": "challenges customers goes through and then we'll suddenly switch gears and then we'll go deep into RDX proxy we'll",
    "start": "118079",
    "end": "123600"
  },
  {
    "text": "talk about some of the features and all the benefits which the customer is going to get from that uh service",
    "start": "123600",
    "end": "129239"
  },
  {
    "text": "and I know you you all are AWS supports you uh listeners are all excited about",
    "start": "129239",
    "end": "134340"
  },
  {
    "text": "uh demos right so you want to see this in action so we'll have a demo to show what are some of the key benefits of RDX",
    "start": "134340",
    "end": "141060"
  },
  {
    "text": "boxy as good so that's going to be the main agenda for day so with that let's get started",
    "start": "141060",
    "end": "148020"
  },
  {
    "text": "so today's applications Demand right um so now nowadays we are we are seeing",
    "start": "148020",
    "end": "153900"
  },
  {
    "text": "a lot of Trends in serverless applications right powered by AWS Lambda for example and then containers right",
    "start": "153900",
    "end": "160800"
  },
  {
    "text": "you know you have services like eks which is elastic kubernetes service you have ECS or elastic container service to",
    "start": "160800",
    "end": "168180"
  },
  {
    "text": "run your containers so these are some of the trends which we are seeing right you know modern applications are built on",
    "start": "168180",
    "end": "173700"
  },
  {
    "text": "serverless Technologies and containers and whatnot right so if you see uh some",
    "start": "173700",
    "end": "179400"
  },
  {
    "text": "of the demands right uh the key modern applications demands you can see that scalability comes into play all the time",
    "start": "179400",
    "end": "185459"
  },
  {
    "text": "right then comes availability that's again a more kind of a requirement for a model applications all the time and then",
    "start": "185459",
    "end": "192480"
  },
  {
    "text": "last but not the least is is security right so that's the trend which we see all the time some of the demands from these applications which are modern",
    "start": "192480",
    "end": "198780"
  },
  {
    "text": "right in nature so let's take some time to talk about scalability for a while right so if you",
    "start": "198780",
    "end": "204720"
  },
  {
    "text": "kind of think about for a while um the app app tier can scale really really",
    "start": "204720",
    "end": "209879"
  },
  {
    "text": "quickly right so for example uh if you actually build the app tier using Lambda",
    "start": "209879",
    "end": "215340"
  },
  {
    "text": "um so you know invoking 100 000 of Lambda right 100 100 000 of Lambda uh",
    "start": "215340",
    "end": "220799"
  },
  {
    "text": "it's very easy to invoke that right provided you have the right uh you know concurrency models and whatnot invoking",
    "start": "220799",
    "end": "226980"
  },
  {
    "text": "that much lambdas it's it's super easy these days uh but uh if you open 100 000",
    "start": "226980",
    "end": "233280"
  },
  {
    "text": "database connections right then what will happen that's becomes a challenge right you know opening that much",
    "start": "233280",
    "end": "239280"
  },
  {
    "text": "connections at a rapid Cliff right that rapid pays is going to be very challenging right so if you kind of",
    "start": "239280",
    "end": "245819"
  },
  {
    "text": "think right what are some of the uh requirements from a compute perspective for opening up a database connection right so essentially you need to kind of",
    "start": "245819",
    "end": "253319"
  },
  {
    "text": "uh you know uh I mean when you try to open a connection it'll actually requires CPU and memory right and those",
    "start": "253319",
    "end": "259680"
  },
  {
    "text": "are like very precious resources right and so ideally you want CPU and memory uh being used to process your workload",
    "start": "259680",
    "end": "267360"
  },
  {
    "text": "queries so yeah your user quiz right rather than just handling this workload uh database connection so that's again a",
    "start": "267360",
    "end": "273240"
  },
  {
    "text": "big challenge for customers right you know uh you know using precious resources like CPU and memory for handling the connection is not really a",
    "start": "273240",
    "end": "279780"
  },
  {
    "text": "good uh mechanism so that's again a challenge for more an application the second aspect is around availability",
    "start": "279780",
    "end": "285960"
  },
  {
    "text": "right you know uh if you have a database which is set up uh highly available like",
    "start": "285960",
    "end": "291000"
  },
  {
    "text": "multi-az which is uh multi-availability Zone with an AWS so we have this notion called as region and availability zone",
    "start": "291000",
    "end": "297540"
  },
  {
    "text": "so let's say you have a database which is configured with multi-eazy right so whenever there is an issue with one node",
    "start": "297540",
    "end": "303240"
  },
  {
    "text": "one of the primary nodes in the database you actually have a situation where you have a fade over right so you can",
    "start": "303240",
    "end": "308400"
  },
  {
    "text": "actually fail over from one easy to another AC but modern application doesn't really uh you know uh you know",
    "start": "308400",
    "end": "314460"
  },
  {
    "text": "would like normally right that's the demand which you have seen they would like these failovers to be very seamless",
    "start": "314460",
    "end": "321000"
  },
  {
    "text": "and you know it should be handled very gracefully right um so things like queuing up is something which modern",
    "start": "321000",
    "end": "327660"
  },
  {
    "text": "applications look uh demand for rather than just erroring out to the uh to the user so that's again something which is",
    "start": "327660",
    "end": "333720"
  },
  {
    "text": "always uh the customers care about right modern application care about last but not the least the security part right",
    "start": "333720",
    "end": "339539"
  },
  {
    "text": "you know you you the customers are you know requiring you know seamless integration between things like IAM",
    "start": "339539",
    "end": "346320"
  },
  {
    "text": "which is identity and access management all the secrets key aspects Etc they",
    "start": "346320",
    "end": "351419"
  },
  {
    "text": "want it to be very seamless and much more secure right rather than having uh",
    "start": "351419",
    "end": "356460"
  },
  {
    "text": "you know you know gaps and security Etc so these are some of the key demands which we are here from the customer",
    "start": "356460",
    "end": "361979"
  },
  {
    "text": "right so if you look at uh you know the scalability and availability perspective",
    "start": "361979",
    "end": "367020"
  },
  {
    "text": "right what are some of the choices the customer got today so often right as I kind of mentioned um you know when you",
    "start": "367020",
    "end": "373800"
  },
  {
    "text": "open a database connection it needs CPU and memory all the time right so you know if if the app is growing and you",
    "start": "373800",
    "end": "380759"
  },
  {
    "text": "want to have you know you're thinking about scale Etc customers often uh kind of provision this compute resources uh",
    "start": "380759",
    "end": "388020"
  },
  {
    "text": "you know they scale up resources to meet that Demand right you know because you need more CPU and memory to kind of",
    "start": "388020",
    "end": "393720"
  },
  {
    "text": "handle that uh connection connection aspect as well so they kind of try to scale up uh and that's not really",
    "start": "393720",
    "end": "399840"
  },
  {
    "text": "efficient right because you're spending more money on the compute processes uh for for just opening and uh and handling",
    "start": "399840",
    "end": "405180"
  },
  {
    "text": "the connection so that's on the uh on the scalability part right so on the availability part right you know",
    "start": "405180",
    "end": "410759"
  },
  {
    "text": "customers often they they kind of maintain uh failover uh you know failure",
    "start": "410759",
    "end": "416160"
  },
  {
    "text": "handling codes for example right to kind of handle this transient failovers which I mentioned failing over from one easy",
    "start": "416160",
    "end": "422160"
  },
  {
    "text": "to another AC so they kind of build this uh uh kind of complex failover failure conditions which is again a heaviest",
    "start": "422160",
    "end": "428460"
  },
  {
    "text": "trade so uh you know often customers actually run a self-managed proxy so",
    "start": "428460",
    "end": "433919"
  },
  {
    "text": "there are like many open source epoxy which is available for MySQL and Apostle SQL what we have seen is customers kind",
    "start": "433919",
    "end": "440280"
  },
  {
    "text": "of manage the stem cell right um so when you do that uh the problem uh is around",
    "start": "440280",
    "end": "445500"
  },
  {
    "text": "you know deploying it managing it patching it Etc these are some of the overhead which comes with uh you know",
    "start": "445500",
    "end": "451440"
  },
  {
    "text": "self-management right uh and again you need to think about how you make that proxy highly available",
    "start": "451440",
    "end": "456900"
  },
  {
    "text": "right so if you are running a proxy uh yourself self-managed way uh you have to",
    "start": "456900",
    "end": "462539"
  },
  {
    "text": "make it highly available right you have to probably deploy it in multiple azs Etc and very often uh you know you will",
    "start": "462539",
    "end": "469500"
  },
  {
    "text": "end up seeing a situation where that proxy will actually become a single point of failure right so that again",
    "start": "469500",
    "end": "474599"
  },
  {
    "text": "that's again some of the challenges which you have seen and uh you know the situations customers go through today right so again as I kind of mentioned we",
    "start": "474599",
    "end": "482280"
  },
  {
    "text": "kind of work backwards look up from the customer we heard about all these challenges from the customer and that's why we actually built this service",
    "start": "482280",
    "end": "488819"
  },
  {
    "text": "called as RDX proxy right so it's actually helping you skip the heavy lift of uh you know building and managing a",
    "start": "488819",
    "end": "495900"
  },
  {
    "text": "proxy yourself right so RDX proxy it's a fully managed highly available database",
    "start": "495900",
    "end": "501840"
  },
  {
    "text": "proxy for Amazon RDS and Amazon So currently it supports uh you know native",
    "start": "501840",
    "end": "507000"
  },
  {
    "text": "RDS MySQL and postgresql it also supports Amazon Aurora which is again a",
    "start": "507000",
    "end": "512459"
  },
  {
    "text": "database purposeful database which is built from ground up for cloud we support MySQL and poster SQL",
    "start": "512459",
    "end": "518459"
  },
  {
    "text": "compatibility for Aurora so proxy now supports RDS as well as Amazon so it's again fully managed we make sure",
    "start": "518459",
    "end": "525420"
  },
  {
    "text": "it's highly available we take care of all the scaling part it's completely serverless extracted away from you so we",
    "start": "525420",
    "end": "531420"
  },
  {
    "text": "kind of take the heavy lift of maintaining and managing the proxy for you right so at a high level and I'm",
    "start": "531420",
    "end": "536820"
  },
  {
    "text": "going to dive really deep into this in the coming slides at a high level connection pooling fast and seamless",
    "start": "536820",
    "end": "543240"
  },
  {
    "text": "failovers and improved security are the key features of RDX boxing right so",
    "start": "543240",
    "end": "548519"
  },
  {
    "text": "again I'll dive deep into in the later stage but again at a higher level right it's a connection pooling with",
    "start": "548519",
    "end": "554160"
  },
  {
    "text": "multiplexing is is what one of the key features rdxboxy gives you so in the",
    "start": "554160",
    "end": "559560"
  },
  {
    "text": "effect right what we do here is within transactions you know you're aware of database transaction right so uh within",
    "start": "559560",
    "end": "566760"
  },
  {
    "text": "transaction Whenever there are gaps right we kind of take these database connections from the proxy uh to the",
    "start": "566760",
    "end": "573240"
  },
  {
    "text": "database and we reuse them to serve multiple app connections that is connection from the application to the",
    "start": "573240",
    "end": "579000"
  },
  {
    "text": "proxy so we you efficiently the RDX proxy efficiently manage the connect right so when we kind of do this this",
    "start": "579000",
    "end": "585660"
  },
  {
    "text": "actually gives a funneling effect right so wherein you can support a large number of application connections with a",
    "start": "585660",
    "end": "592500"
  },
  {
    "text": "small set of database connections right so we kind of you know open up a proxy will open up a few connections to a",
    "start": "592500",
    "end": "598200"
  },
  {
    "text": "database and then kind of reuse that right so it's very efficient that way it kind of reuses what we do with",
    "start": "598200",
    "end": "603660"
  },
  {
    "text": "multiplexing so that's the key word which we're going to kind of think about when it comes to proxy and during",
    "start": "603660",
    "end": "609060"
  },
  {
    "text": "failures right there's again an additional benefits uh during failovers since RDX proxy is actually sitting",
    "start": "609060",
    "end": "614880"
  },
  {
    "text": "between your application and and the database it's actually able to preserve the connections uh as the failures is",
    "start": "614880",
    "end": "621720"
  },
  {
    "text": "happening right and then resume the connections uh and transactions once the new instance becomes available",
    "start": "621720",
    "end": "628080"
  },
  {
    "text": "so it actually does that by kind of uh going around DNS and I'm actually going to get into a lot more details into this",
    "start": "628080",
    "end": "635220"
  },
  {
    "text": "but again it actually don't rely on the DNS part so you might have heard about DNS and the TTL delays which comes into",
    "start": "635220",
    "end": "641580"
  },
  {
    "text": "play normally when you kind of deal with these uh failovers because it's all DNS entry right after all so uh RDX proxy is",
    "start": "641580",
    "end": "649140"
  },
  {
    "text": "much more efficient it doesn't deal with DNS entries anymore it can actually talk to the instance directly and that",
    "start": "649140",
    "end": "654839"
  },
  {
    "text": "actually gives you a 60 uh you know failover Improvement right so again",
    "start": "654839",
    "end": "659940"
  },
  {
    "text": "we're going to talk more about that but that's again another benefit of rdxbox last but not least on the security side",
    "start": "659940",
    "end": "666300"
  },
  {
    "text": "of things right so with RDX proxy you can actually tell that hey I actually want to enforce IAM authentication to",
    "start": "666300",
    "end": "674160"
  },
  {
    "text": "the proxy so for example if the app is connecting to the proxy you can say that you enforce IM authentication so we can",
    "start": "674160",
    "end": "681360"
  },
  {
    "text": "actually do that um and RDX proxy uh it's integrated very well with uh one of the AWS Security",
    "start": "681360",
    "end": "688860"
  },
  {
    "text": "Services called as Secrets manager so you know all the database username",
    "start": "688860",
    "end": "694019"
  },
  {
    "text": "password Etc is kind of handled by Secrets manager and proxy will make calls to stickers manager to get the",
    "start": "694019",
    "end": "700200"
  },
  {
    "text": "credential as a model right so the entire security right the entire security posture is much more improved",
    "start": "700200",
    "end": "705779"
  },
  {
    "text": "when you use RDX boxing so these are some of the benefits okay and we will dive really deep into proxy and",
    "start": "705779",
    "end": "711360"
  },
  {
    "text": "connection pooling and failures Etc but I want to call out a customer use case",
    "start": "711360",
    "end": "716519"
  },
  {
    "text": "to kind of highlight right why customers are adopting proxy these days so Cloud",
    "start": "716519",
    "end": "722279"
  },
  {
    "text": "Health by VMware Cloud health is a very popular to to help customers optimize the cloud spend AWS spend right and make",
    "start": "722279",
    "end": "729480"
  },
  {
    "text": "sure they are very uh you know optimized when it comes to an operational excellence perspective and cost",
    "start": "729480",
    "end": "734579"
  },
  {
    "text": "optimization so this is a very popular tool used by many AWS customers built by uh VMware",
    "start": "734579",
    "end": "741480"
  },
  {
    "text": "so uh you know when when uh you know uh when Cloud Health migrated their MySQL",
    "start": "741480",
    "end": "748620"
  },
  {
    "text": "databases to Aurora right they actually did a migration uh and uh when they did",
    "start": "748620",
    "end": "753660"
  },
  {
    "text": "that right what what they saw is like you know the applications are opening up a large number of connections open",
    "start": "753660",
    "end": "759720"
  },
  {
    "text": "it's actually opening up a lot of connections and simply putting databases uh you know it's putting the database in",
    "start": "759720",
    "end": "766079"
  },
  {
    "text": "stress right it's beginning up in opening up large number of database connections often will make the database uh into a panic mode right so that was",
    "start": "766079",
    "end": "772980"
  },
  {
    "text": "happening on a consistent basis uh that was during the MySQL databases um",
    "start": "772980",
    "end": "779040"
  },
  {
    "text": "and when uh Cloud Health migrated to Aurora MySQL in this case they actually evaluated RDX proxy and they realized",
    "start": "779040",
    "end": "785700"
  },
  {
    "text": "that proxy has a lot of benefits for them right so during peak time uh they",
    "start": "785700",
    "end": "790800"
  },
  {
    "text": "saw that like you know 90 percent of the connections uh were reduced right you know it was not over overwhelming the",
    "start": "790800",
    "end": "797040"
  },
  {
    "text": "database right the proxy was able to handle connections really well such that you know it's not choking the database",
    "start": "797040",
    "end": "803339"
  },
  {
    "text": "anymore it's not you know uh you know opening up large number of connections with AWS and it's much more efficient that way right so that was very",
    "start": "803339",
    "end": "809940"
  },
  {
    "text": "beneficial for the customer because you know Cloud Health often often tend to open a large number of connections is much more efficient now",
    "start": "809940",
    "end": "816480"
  },
  {
    "text": "the other benefit Cloud Health uh saw was uh it was able to the company was able to you know consolidate a lot of",
    "start": "816480",
    "end": "823740"
  },
  {
    "text": "databases because they were not a you know using a lot of uh you know compute resources uh you know being wasted for",
    "start": "823740",
    "end": "830459"
  },
  {
    "text": "for opening and managing connections they were able to do a lot of consolidations as well right so with RDX",
    "start": "830459",
    "end": "836399"
  },
  {
    "text": "proxy they were able to kind of uh improve on the performance and the scalability aspects as well as they were",
    "start": "836399",
    "end": "841920"
  },
  {
    "text": "able to kind of lower their total operating cost as well right so that's that's a big benefit for",
    "start": "841920",
    "end": "848820"
  },
  {
    "text": "customers right so I just want to highlight the story before we kind of dive deep into into RDX proxies",
    "start": "848820",
    "end": "855540"
  },
  {
    "text": "um so Stephen um you know are there any questions which can address at this time",
    "start": "855540",
    "end": "860700"
  },
  {
    "text": "uh yeah we have uh a couple of questions uh from the chat uh mon Ramon three five",
    "start": "860700",
    "end": "868620"
  },
  {
    "text": "uh seven says how do I authenticate with RDS proxy",
    "start": "868620",
    "end": "874079"
  },
  {
    "text": "yeah so RDX proxy as I kind of mentioned uh it uses uh IAM authentication so you",
    "start": "874079",
    "end": "879839"
  },
  {
    "text": "know traditionally when you use RDX proxy you will use uh the endpoint the proxy endpoint and you actually use IM",
    "start": "879839",
    "end": "886680"
  },
  {
    "text": "authentication for that so you can actually enforce that the database connections are in you know uh you know",
    "start": "886680",
    "end": "892320"
  },
  {
    "text": "is using IM authentication and you use the same mechanism to authenticate to proxy as well so it's it's integrated",
    "start": "892320",
    "end": "898139"
  },
  {
    "text": "with IAM which is int and access management great we've got uh two other questions",
    "start": "898139",
    "end": "903480"
  },
  {
    "text": "The Tech Guy 21 asks how can I use RDS proxy for on-premise Oracle from AWS",
    "start": "903480",
    "end": "910019"
  },
  {
    "text": "Lambda that's a great question so RDX proxy is not supporting uh uh you know so the",
    "start": "910019",
    "end": "916440"
  },
  {
    "text": "sources like on-prem deployments today RDX proxy only support RDS MySQL and",
    "start": "916440",
    "end": "922139"
  },
  {
    "text": "postural SQL we also support Aurora MySQL and poster SQL but more options are coming in the future but at this",
    "start": "922139",
    "end": "928560"
  },
  {
    "text": "time we only support these versions or engines I mentioned okay and I think then that might answer",
    "start": "928560",
    "end": "934860"
  },
  {
    "text": "the other question from Tommy that to May 242 are there hybrid or on-prem",
    "start": "934860",
    "end": "940620"
  },
  {
    "text": "deployment options for RDS uh to clarify meaning can you use uh",
    "start": "940620",
    "end": "947220"
  },
  {
    "text": "RDS and proxy to present to applications on premise not today not today it's not",
    "start": "947220",
    "end": "953339"
  },
  {
    "text": "possibly today great that's all the questions we have at the moment awesome thank you yeah",
    "start": "953339",
    "end": "959639"
  },
  {
    "text": "great questions keep keep them coming so uh let's let's take some time to kind",
    "start": "959639",
    "end": "964800"
  },
  {
    "text": "of dive deep into RDX boxy right I kind of mentioned about multiple terminologies here connection tooling I",
    "start": "964800",
    "end": "970500"
  },
  {
    "text": "mentioned about fast food was Etc let's take some time to kind of dive deep right so before we go that deep I just",
    "start": "970500",
    "end": "976740"
  },
  {
    "text": "want to show you this you know graphical representation uh to help you understand uh where uh RDX proxy sits right within",
    "start": "976740",
    "end": "984540"
  },
  {
    "text": "the entire uh you know with the Android stacked right so for example uh you have your applications which are powered by",
    "start": "984540",
    "end": "991260"
  },
  {
    "text": "let's say for example Lambda or you know containers which are running on eks or ECS right elastic community service or",
    "start": "991260",
    "end": "997980"
  },
  {
    "text": "ECS uh you know or you might be running applications on Ruby and PHP for example",
    "start": "997980",
    "end": "1003740"
  },
  {
    "text": "right um so that's your application stack and and proxy will actually sit in the",
    "start": "1003740",
    "end": "1009740"
  },
  {
    "text": "middle okay so proxy will sit in the middle and it'll give you capabilities like connection pooling seamless",
    "start": "1009740",
    "end": "1014899"
  },
  {
    "text": "failovers improved enhanced security Etc and then the the last part uh is uh you",
    "start": "1014899",
    "end": "1021500"
  },
  {
    "text": "know the slide says the extreme right part is actually the database right so that's where you have your Amazon RDS",
    "start": "1021500",
    "end": "1028040"
  },
  {
    "text": "which is MySQL or host for SQL or you have Aurora which is my SQL and poster SQL compatibility right so that's the uh",
    "start": "1028040",
    "end": "1034160"
  },
  {
    "text": "you know that that's how proxy is actually uh you know uh you know it's actually this is how it's it's laid out",
    "start": "1034160",
    "end": "1041240"
  },
  {
    "text": "right you know proxy sits in the middle between your app and the database right so connection pooling right so I was",
    "start": "1041240",
    "end": "1047900"
  },
  {
    "text": "kind of talking about connection pooling um uh a little bit right and to help understand connection pooling I'm",
    "start": "1047900",
    "end": "1053600"
  },
  {
    "text": "actually uh kind of showing I'm showing you a kind of a very simple representation right so uh what you're",
    "start": "1053600",
    "end": "1059120"
  },
  {
    "text": "seeing here is three connections are coming from the app to the proxy and the proxy is only using one connection to",
    "start": "1059120",
    "end": "1065539"
  },
  {
    "text": "the database right so to kind of simplify the whole thing I actually used three Connections in this case right so",
    "start": "1065539",
    "end": "1071480"
  },
  {
    "text": "here three connections are coming from the app but the proxy is only using one connection so it's actually effectively",
    "start": "1071480",
    "end": "1077480"
  },
  {
    "text": "reusing the connections called time right so you know think about like hundreds and thousands of connections is",
    "start": "1077480",
    "end": "1083179"
  },
  {
    "text": "coming from the app right and proxy able to handle that connections very gracefully with few connections to a",
    "start": "1083179",
    "end": "1089480"
  },
  {
    "text": "database right that's the beauty here connection pooling with multiplexing is what we kind of call uh to kind of reuse",
    "start": "1089480",
    "end": "1096440"
  },
  {
    "text": "this connection right so that's the main benefit and the whole idea is right so what we",
    "start": "1096440",
    "end": "1101720"
  },
  {
    "text": "see oftentimes uh with applications is is that when they open a connection",
    "start": "1101720",
    "end": "1107120"
  },
  {
    "text": "right so for example you are connecting with your database you open a connection yeah what we are seeing is the",
    "start": "1107120",
    "end": "1113240"
  },
  {
    "text": "connections are not always continuously executing a transactions on them right so you might be doing a select right the",
    "start": "1113240",
    "end": "1119120"
  },
  {
    "text": "transaction might do a select it selects select product ID from product table for example right select is being done you",
    "start": "1119120",
    "end": "1126140"
  },
  {
    "text": "get the results back you go back and do some processing and might do an update at a later time right so there is a lot",
    "start": "1126140",
    "end": "1132740"
  },
  {
    "text": "of gaps which which is happening uh when you do a transaction so during these uh you know operations uh when there are",
    "start": "1132740",
    "end": "1140480"
  },
  {
    "text": "gaps right so that's where RDX proxy is smart enough to kind of detect these",
    "start": "1140480",
    "end": "1146240"
  },
  {
    "text": "gaps and use the database connection to serve other application connections so",
    "start": "1146240",
    "end": "1151280"
  },
  {
    "text": "it's very small such a way that you know it's detecting that you know hey this this you know transaction is not doing",
    "start": "1151280",
    "end": "1157160"
  },
  {
    "text": "uh anything at this point of time probably I should be able to take this and then I probably use it for another",
    "start": "1157160",
    "end": "1162500"
  },
  {
    "text": "application connection so that's exactly how RDX proxy does um you know you know sharing right session sharing connection",
    "start": "1162500",
    "end": "1169880"
  },
  {
    "text": "sharing Etc this actually improves application scalability and improves the database",
    "start": "1169880",
    "end": "1175400"
  },
  {
    "text": "efficiency as well right because you're not choking the database anymore proxy is efficiently handling that for you",
    "start": "1175400",
    "end": "1181820"
  },
  {
    "text": "so because smaller set of database connections are shared across multiple app connection this is this is why uh",
    "start": "1181820",
    "end": "1188120"
  },
  {
    "text": "it's it's much more efficient right so based on the database size workload support uh you know workload",
    "start": "1188120",
    "end": "1194000"
  },
  {
    "text": "characteristics we can actually support hundreds and thousands of database connections as need right so there is a",
    "start": "1194000",
    "end": "1199580"
  },
  {
    "text": "notion called a Max Connections in a database uh you know there you know you can actually open up you know hundreds",
    "start": "1199580",
    "end": "1205039"
  },
  {
    "text": "and thousands of connection but proxy will ensure that it's actually used in a very gracefully right rather than just",
    "start": "1205039",
    "end": "1210620"
  },
  {
    "text": "you know putting the database uh in stress right things like that so that's the that's the best part of connection",
    "start": "1210620",
    "end": "1216320"
  },
  {
    "text": "cooling which will actually help you scale the application as well uh I spoke about connection pooling",
    "start": "1216320",
    "end": "1222559"
  },
  {
    "text": "right but there are situations where uh proxy can't be sure that it's actually",
    "start": "1222559",
    "end": "1228500"
  },
  {
    "text": "safe to reuse a database connection all right outside the current session right it cannot determine that you know it's",
    "start": "1228500",
    "end": "1234799"
  },
  {
    "text": "actually safe cases uh it keeps the session on the",
    "start": "1234799",
    "end": "1239840"
  },
  {
    "text": "same connection until the session ends right so this this failback Behavior",
    "start": "1239840",
    "end": "1245419"
  },
  {
    "text": "it's actually a safeguard mechanism and I'm going to tell you why this is a safeguarding action right so this",
    "start": "1245419",
    "end": "1251360"
  },
  {
    "text": "fallback behavior of of making sure that uh it keeps the session on the same connection until the session ends is",
    "start": "1251360",
    "end": "1258020"
  },
  {
    "text": "actually called as pinning okay so pinning is a key terminology which comes with RDX toxic so we spoke about",
    "start": "1258020",
    "end": "1263660"
  },
  {
    "text": "connection pooling with multiplexing this is pinning where it actually maintains the connection",
    "start": "1263660",
    "end": "1268880"
  },
  {
    "text": "for example right if the database is using session State you might be familiar with session state right you",
    "start": "1268880",
    "end": "1274700"
  },
  {
    "text": "know a shopping cart or whatever it is you know you've made it kind of session state so if the database is using session",
    "start": "1274700",
    "end": "1281299"
  },
  {
    "text": "State and if we try to reuse that connection right we use this connection then we will be like kind of leaking",
    "start": "1281299",
    "end": "1288380"
  },
  {
    "text": "that session State and we don't want to do that right so we don't want to leak any uh info from a particular session so",
    "start": "1288380",
    "end": "1295159"
  },
  {
    "text": "that's why there is a safeguard here called as connection pinning right so that's that's the uh that's a feature",
    "start": "1295159",
    "end": "1301340"
  },
  {
    "text": "which we have uh so for the lifetime of the app connection it will be pinned to the database connection right so you'll",
    "start": "1301340",
    "end": "1307280"
  },
  {
    "text": "have a database connection and the entire lifecycle of the app connection uh you know it will be pinned right so",
    "start": "1307280",
    "end": "1313880"
  },
  {
    "text": "that's again a kind of a feedback mechanism to make sure that you know we are not leaking any sensitive uh",
    "start": "1313880",
    "end": "1319280"
  },
  {
    "text": "sessions between between transactions um so uh if you if you don't care about",
    "start": "1319280",
    "end": "1324740"
  },
  {
    "text": "variables being shared between sessions then you probably can actually use a setting call as exclude variable sets",
    "start": "1324740",
    "end": "1330440"
  },
  {
    "text": "and I'm actually going to talk about that in a in the demo as well so you can actually say that you know hey exclude variable sets you don't really care",
    "start": "1330440",
    "end": "1336919"
  },
  {
    "text": "about that and you can actually exclude that for pinning right so these are some of the mechanism which we have to make",
    "start": "1336919",
    "end": "1342080"
  },
  {
    "text": "sure that you know if there are like session state or there are like large queries which are being executed which",
    "start": "1342080",
    "end": "1347720"
  },
  {
    "text": "is greater than 16 KV then we don't uh you know do connection pulling with multiplexing we can kind of think right",
    "start": "1347720",
    "end": "1354140"
  },
  {
    "text": "things like that so there are some criterias very well documented in our documentation as well so you know pinning is also something which comes",
    "start": "1354140",
    "end": "1360679"
  },
  {
    "text": "into play with RDX boxing uh we also uh uh launched a feature we",
    "start": "1360679",
    "end": "1367820"
  },
  {
    "text": "added a feature uh to kind of give you uh something called as read only endpoint for Aurora replicas which",
    "start": "1367820",
    "end": "1375020"
  },
  {
    "text": "actually give you much more scalability right so before kind of talking about read only replica uh endpoint replica",
    "start": "1375020",
    "end": "1381500"
  },
  {
    "text": "let's let's kind of assume kind of you know not just just think about this right you know Aurora you have Arora",
    "start": "1381500",
    "end": "1387140"
  },
  {
    "text": "cluster uh which has a writer and then assume that you know you have multiple read replicas in that particular cluster",
    "start": "1387140",
    "end": "1392960"
  },
  {
    "text": "right so you can actually create up to 15 red replicas in Aurora uh for for scaling or read workloads so assume that",
    "start": "1392960",
    "end": "1399799"
  },
  {
    "text": "you know you have multiple read replicas here right so if you are using the reader endpoint which Aurora gives so",
    "start": "1399799",
    "end": "1405679"
  },
  {
    "text": "use Aurora also gives you a return right and let's say assume that you know there are situations when nodes are down and",
    "start": "1405679",
    "end": "1411559"
  },
  {
    "text": "for a reader right so how does this app gracefully connect right and so it's actually doing load balancing but again",
    "start": "1411559",
    "end": "1417020"
  },
  {
    "text": "if there are situations where you lose a reader reader if you are using connection Aurora reader endpoint then",
    "start": "1417020",
    "end": "1422900"
  },
  {
    "text": "probably that connectivity back right that seamless connection back for that reporting app might not be seamless",
    "start": "1422900",
    "end": "1428240"
  },
  {
    "text": "right so to improve that situation we have this notion called as or a feature called as read-only endpoint index again",
    "start": "1428240",
    "end": "1435500"
  },
  {
    "text": "that's only applicable for Arora right not not the traditional RDS so again as I kind of mentioned right in some cases",
    "start": "1435500",
    "end": "1441620"
  },
  {
    "text": "what our more reader instance uh in your cluster might become unavailable right if so connections that use reader and",
    "start": "1441620",
    "end": "1449480"
  },
  {
    "text": "point for DB proxy can recover more quickly right so that critical ability is much more quicker uh when it comes to",
    "start": "1449480",
    "end": "1456200"
  },
  {
    "text": "read only endpoint for Aurora replica so RDX proxy route connections to only",
    "start": "1456200",
    "end": "1461780"
  },
  {
    "text": "available reader instances in the cluster and is actually aware of the entire class data for topology as well right so it's much more efficient and",
    "start": "1461780",
    "end": "1468320"
  },
  {
    "text": "seamless when it comes to recoverability when you're using uh read-only and point for error replicas rather than using the",
    "start": "1468320",
    "end": "1474200"
  },
  {
    "text": "Aurora read event point right so that's again additional benefit which we have with RDX box",
    "start": "1474200",
    "end": "1480740"
  },
  {
    "text": "so uh yeah so that's again a key benefit which",
    "start": "1480740",
    "end": "1486799"
  },
  {
    "text": "I'm going to kind of uh talk about as well so now we kind of spoke about connection pooling we spoke about uh you",
    "start": "1486799",
    "end": "1493280"
  },
  {
    "text": "know we spoke about pinning we spoke about rerun read only endpoint error replica right so these are some of the",
    "start": "1493280",
    "end": "1498559"
  },
  {
    "text": "scalability aspects which is available now let's talk about um availability aspect right so I kind",
    "start": "1498559",
    "end": "1504860"
  },
  {
    "text": "of spoke about availability as one of the key requirements as well right so uh with RDX proxies actually help you uh",
    "start": "1504860",
    "end": "1512360"
  },
  {
    "text": "improve the availability uh for for the entire app right as well um so when using RDX proxy uh so whenever a",
    "start": "1512360",
    "end": "1519799"
  },
  {
    "text": "failover happens right so I kind of mentioned yeah you know think about narrower cluster with multi-az multiple",
    "start": "1519799",
    "end": "1525440"
  },
  {
    "text": "availability zone right as we have a writer you have a reader if there is a failover situation you can actually",
    "start": "1525440",
    "end": "1530960"
  },
  {
    "text": "promote the reader to a you know a writer so that that is possible today so",
    "start": "1530960",
    "end": "1536299"
  },
  {
    "text": "when prox and using proxy uh whenever failover happens so for any connection that's not actively executing any",
    "start": "1536299",
    "end": "1543500"
  },
  {
    "text": "transaction proxy will preserve that connection right so that's something which you need to remove",
    "start": "1543500",
    "end": "1548900"
  },
  {
    "text": "uh and and the second major advantage is it will it will accept new connections",
    "start": "1548900",
    "end": "1554419"
  },
  {
    "text": "that come in right that's again A major benefit uh it'll allow you to queue up any",
    "start": "1554419",
    "end": "1560179"
  },
  {
    "text": "transaction you may send when the failover is happening so that's again a massive benefit right think about this",
    "start": "1560179",
    "end": "1566299"
  },
  {
    "text": "so you are your app is sending you know it's it's probably writing or reading or whatever it is right I think about that",
    "start": "1566299",
    "end": "1572600"
  },
  {
    "text": "it's it's writing transactions continuously and the failover is happening right you're in the middle of a field over without proxy you",
    "start": "1572600",
    "end": "1579980"
  },
  {
    "text": "essentially have to just you know return the error right away to to the user and you probably have to wait until the the",
    "start": "1579980",
    "end": "1587600"
  },
  {
    "text": "entire failover is done right so there is a notion of rollback and whatnot will happen but in this case proxy will",
    "start": "1587600",
    "end": "1594500"
  },
  {
    "text": "continue to accept new connections that come in uh it will allow you to queue any of those transactions you may send",
    "start": "1594500",
    "end": "1600020"
  },
  {
    "text": "when the failover is happening right so that's the major benefit here so in Arora right the failovers are fast it's",
    "start": "1600020",
    "end": "1606080"
  },
  {
    "text": "relatively fast if you compare traditional RDS you know my SQL poster SQL mariadb whatever it is with Aurora",
    "start": "1606080",
    "end": "1613159"
  },
  {
    "text": "the failures are much more faster right because the way Aurora is built by by you know having this distributed storage",
    "start": "1613159",
    "end": "1620000"
  },
  {
    "text": "and the compute separate we have massive uh you know Innovation which is done to",
    "start": "1620000",
    "end": "1625100"
  },
  {
    "text": "improve that failover times right so ideally in Arora theater was a fast and in general it'll actually happen within",
    "start": "1625100",
    "end": "1630860"
  },
  {
    "text": "10 seconds um but when you are connecting to the Aurora cluster endpoint which is",
    "start": "1630860",
    "end": "1635960"
  },
  {
    "text": "actually a DNS endpoint right so it's actually a DNS end point which which you see the cluster endpoint is actually a DNS end point the order of time we kind",
    "start": "1635960",
    "end": "1643460"
  },
  {
    "text": "of observe you know is is around uh you know 30 seconds that's the trend which you have seen right you know ideally 30",
    "start": "1643460",
    "end": "1649520"
  },
  {
    "text": "seconds the failover happens approximately 20 seconds uh goes in DNS",
    "start": "1649520",
    "end": "1655520"
  },
  {
    "text": "propagation delays right so the whole DNS comes into play here on top of that uh if you have Downstream TTL right TTL",
    "start": "1655520",
    "end": "1663559"
  },
  {
    "text": "is time to live right you know you know TDL comes into play with DNS right uh you know stale entries and things like",
    "start": "1663559",
    "end": "1669740"
  },
  {
    "text": "that uh and or if you have application site connection pools with long-lived",
    "start": "1669740",
    "end": "1674779"
  },
  {
    "text": "connections Etc the downtime below will be larger right the whole downtime window will be larger so RDX proxy",
    "start": "1674779",
    "end": "1682460"
  },
  {
    "text": "connect to a database instance directly and understands or is aware of the",
    "start": "1682460",
    "end": "1687740"
  },
  {
    "text": "cluster topology really well right it's actually able to detect when a failover happens immediately and once Aurora",
    "start": "1687740",
    "end": "1695659"
  },
  {
    "text": "initiate uh it's right and as soon as the new instance is uh available uh it",
    "start": "1695659",
    "end": "1702320"
  },
  {
    "text": "passes any pending transactions that are queued up right so that's the main benefit is actually acting as a queue",
    "start": "1702320",
    "end": "1709179"
  },
  {
    "text": "which is sitting in between your application or database right just queue up transaction once a new uh you know",
    "start": "1709179",
    "end": "1716860"
  },
  {
    "text": "once a new writer comes up it actually passes of transaction so essentially right the latency goes up uh you know",
    "start": "1716860",
    "end": "1724760"
  },
  {
    "text": "for some of those transactions which are in flight but you are not erroring out right away right the latency goes up but",
    "start": "1724760",
    "end": "1731419"
  },
  {
    "text": "again net effect is you're getting 66 percent fast failures right so that's",
    "start": "1731419",
    "end": "1736460"
  },
  {
    "text": "something which which we would like to call out and and kind of demonstrate it right improving the availability aspects",
    "start": "1736460",
    "end": "1744820"
  },
  {
    "text": "again wanted to show you a visual here as well um so we kind of did a benchmarking uh",
    "start": "1744820",
    "end": "1751940"
  },
  {
    "text": "in the in the past internal AWS right and so we actually used uh um you know an RDX boxy endpoint and a",
    "start": "1751940",
    "end": "1758899"
  },
  {
    "text": "cluster endpoint right so we we used uh proxy and you kind of use the direct cluster endpoint and you can see here",
    "start": "1758899",
    "end": "1765919"
  },
  {
    "text": "the one uh which which uses proxy here right that's actually is giving you uh",
    "start": "1765919",
    "end": "1771500"
  },
  {
    "text": "lower client recovery time right which is in milliseconds here so the lower the number much better right so you can see",
    "start": "1771500",
    "end": "1778100"
  },
  {
    "text": "that consistently uh when you kind of use RDX RDS proxy and point you're",
    "start": "1778100",
    "end": "1783440"
  },
  {
    "text": "getting much more seamless uh scale uh you know failover times right so that's again a massive benefit for us",
    "start": "1783440",
    "end": "1791240"
  },
  {
    "text": "um so this is a good time for us to take a quick pause right uh Stephen are there any questions from the audience uh so",
    "start": "1791240",
    "end": "1797240"
  },
  {
    "text": "far yeah there's a couple of questions from the from the chat there's two questions",
    "start": "1797240",
    "end": "1803299"
  },
  {
    "text": "from The Tech Guy 21. what generally is the ratio of Lambda concurrency and",
    "start": "1803299",
    "end": "1808340"
  },
  {
    "text": "connections to uh configure with RDS proxy and then does the RDX proxy",
    "start": "1808340",
    "end": "1814820"
  },
  {
    "text": "replace the data API for Aurora serverless V2",
    "start": "1814820",
    "end": "1820179"
  },
  {
    "text": "that's a good question um RDX proxy I'll take the second question first RDX proxy is available",
    "start": "1820279",
    "end": "1827179"
  },
  {
    "text": "for uh serverless Aurora V2 I don't believe it actually replaces I think",
    "start": "1827179",
    "end": "1833960"
  },
  {
    "text": "these both uh go hand in hand uh data API is for you know getting HTTP",
    "start": "1833960",
    "end": "1840740"
  },
  {
    "text": "access to the database so it pretty much uses HTTP access to the database but from my perspective it'll actually go",
    "start": "1840740",
    "end": "1846620"
  },
  {
    "text": "hand in hand and what was the first question the",
    "start": "1846620",
    "end": "1851779"
  },
  {
    "text": "first question was what's generally the ratio of Lambda concurrency or connections to configure for res proxy",
    "start": "1851779",
    "end": "1858080"
  },
  {
    "text": "it depends on the workload uh there is no generic answer I can kind of uh say here but it's based on the workload uh",
    "start": "1858080",
    "end": "1864679"
  },
  {
    "text": "characteristics you have to test it and see how how this works but the the important thing to know here is uh",
    "start": "1864679",
    "end": "1871640"
  },
  {
    "text": "Lambda can you know based on the concurrency you said it can actually scale rapidly right uh but without proxy",
    "start": "1871640",
    "end": "1878000"
  },
  {
    "text": "if you try to if Lambda Lambda is a classic example where you use RDX box right it's a major use case uh if Lambda",
    "start": "1878000",
    "end": "1885620"
  },
  {
    "text": "all those Lambda are actually making connection to database you essentially will choke the database really really fast because the proxy efficiently",
    "start": "1885620",
    "end": "1893240"
  },
  {
    "text": "opening a few connections and then reusing those connections gracefully is where the benefit comes",
    "start": "1893240",
    "end": "1899600"
  },
  {
    "text": "great thanks for that uh one final question uh before we move on Banner race asks app",
    "start": "1899600",
    "end": "1908299"
  },
  {
    "text": "tier doesn't always directly communicate with the database some use in-memory caches like Dax or redis uh how does RDS",
    "start": "1908299",
    "end": "1915679"
  },
  {
    "text": "proxy communicate in this architecture uh RDX box",
    "start": "1915679",
    "end": "1921700"
  },
  {
    "text": "RDX boxy point in this case right so if you have a different layer probably that's a",
    "start": "1923299",
    "end": "1928880"
  },
  {
    "text": "separate Deep dive which we need to do but but uh and if it's the proxy you need to use the proxy endpoint right so",
    "start": "1928880",
    "end": "1934940"
  },
  {
    "text": "if you are making connection to the database from your app site right then you have to use the RDX box if you have",
    "start": "1934940",
    "end": "1941179"
  },
  {
    "text": "a caching layer in in you know in between there that's a separate discussion altogether but in this case",
    "start": "1941179",
    "end": "1946820"
  },
  {
    "text": "app talking to the database directly uh if if you have proxy in the middle you are essentially using the toxian point",
    "start": "1946820",
    "end": "1953120"
  },
  {
    "text": "in that case gotcha thanks for that uh that's all for the moment",
    "start": "1953120",
    "end": "1958640"
  },
  {
    "text": "questions uh great um great questions uh so let's let's",
    "start": "1958640",
    "end": "1965299"
  },
  {
    "text": "talk about security right so I kind of spoke about security uh a little bit",
    "start": "1965299",
    "end": "1970820"
  },
  {
    "text": "here so again giving you a kind of a representation here and graphical",
    "start": "1970820",
    "end": "1976340"
  },
  {
    "text": "representation so you have your applications and you have your proxy sitting in the middle linear via databases right so um you know ideally",
    "start": "1976340",
    "end": "1983600"
  },
  {
    "text": "the database connections will be using let's say for example username and password Etc uh with with proxy the best",
    "start": "1983600",
    "end": "1990919"
  },
  {
    "text": "part is you can actually make sure that the entire application uh security landscape is much more secure right so",
    "start": "1990919",
    "end": "1997519"
  },
  {
    "text": "you can actually enforce IM authentication with your databases here so when you are creating a proxy you can",
    "start": "1997519",
    "end": "2004539"
  },
  {
    "text": "say that I want to enforce I am authentication right and so you know you you can say that you know all the",
    "start": "2004539",
    "end": "2010659"
  },
  {
    "text": "applications are connecting to the proxy should use IIM authentication so you can kind of essentially enforce that right",
    "start": "2010659",
    "end": "2016419"
  },
  {
    "text": "so that enforce enforcement part is this is much more beneficial from a security aspect right so if you're kind of",
    "start": "2016419",
    "end": "2023080"
  },
  {
    "text": "enforcing that IM authentication um so when the app is actually making a",
    "start": "2023080",
    "end": "2028120"
  },
  {
    "text": "connection to RDX proxy uh it's actually requesting an authentication to token with AWS IIM which is int and access",
    "start": "2028120",
    "end": "2035380"
  },
  {
    "text": "manager as the diagram says here and then behind the scenes the uh IAM will",
    "start": "2035380",
    "end": "2041080"
  },
  {
    "text": "actually work with a service called as STS which is secure open service uh so uh the security service will",
    "start": "2041080",
    "end": "2048099"
  },
  {
    "text": "actually you know as give you when the tokens for you you will actually receive the authentication token and with those",
    "start": "2048099",
    "end": "2053858"
  },
  {
    "text": "tokens uh the app uh you know which which actually established the connection will take the token and then",
    "start": "2053859",
    "end": "2060460"
  },
  {
    "text": "connect to proxy with the IIM token and the validate token right so that's the first part so again just to repeat the",
    "start": "2060460",
    "end": "2067000"
  },
  {
    "text": "app is talking to IM it gets the token and then it takes the token and then establish the connectivity back",
    "start": "2067000",
    "end": "2073000"
  },
  {
    "text": "um to RDX boxing right that might actually help address the earlier question uh in in which we kind of spoke",
    "start": "2073000",
    "end": "2079300"
  },
  {
    "text": "about also as well right so that's the that's the first part so once that the",
    "start": "2079300",
    "end": "2085599"
  },
  {
    "text": "uh the initial uh handshake right this is essentially is happening as handshake right here so once that is done RDX",
    "start": "2085599",
    "end": "2091898"
  },
  {
    "text": "proxy will actually work with Secrets manager and then I'll actually retrieve the secret secret will be retrieved and",
    "start": "2091899",
    "end": "2099520"
  },
  {
    "text": "proxy will connect to the database using that secret which is the username and the password so you essentially will",
    "start": "2099520",
    "end": "2104920"
  },
  {
    "text": "configure database and username and password with Secrets manager and then proxy essentially is just talking to",
    "start": "2104920",
    "end": "2110980"
  },
  {
    "text": "Secrets manager getting that secret and then connecting to the database right so essentially like you know the entire",
    "start": "2110980",
    "end": "2117460"
  },
  {
    "text": "security aspect is much more streamlined here right um so you are able to essentially",
    "start": "2117460",
    "end": "2122880"
  },
  {
    "text": "eliminate passwords embedded in the code again this connection connectivity string or the connection string might uh",
    "start": "2122880",
    "end": "2130180"
  },
  {
    "text": "give you much more details on the questions which was early uh asked as well right so you essentially removing the plane test passwords Etc you are",
    "start": "2130180",
    "end": "2137619"
  },
  {
    "text": "essentially using the token uh you know when you are enforcing IEM uh there is a notion called as assert as",
    "start": "2137619",
    "end": "2143740"
  },
  {
    "text": "well and again that's very well documented in our documentations as well so you're kind of using a third uh here",
    "start": "2143740",
    "end": "2149920"
  },
  {
    "text": "as well when you're using SSL for example so you're essentially removing that password which might be uh exposed",
    "start": "2149920",
    "end": "2156640"
  },
  {
    "text": "right so essentially you are improving the security aspect of of the entire",
    "start": "2156640",
    "end": "2162099"
  },
  {
    "text": "uh proxy connection app to database connection right so if you kind of look",
    "start": "2162099",
    "end": "2167500"
  },
  {
    "text": "at this at a broader layer right so you have your applications which are which are again uh secured by a security group",
    "start": "2167500",
    "end": "2175000"
  },
  {
    "text": "here right so you have a security group let's say you are running a Lambda function or containers or PHP app which",
    "start": "2175000",
    "end": "2181720"
  },
  {
    "text": "is on ec2 you'll have a security group which is kind of protecting that from uh",
    "start": "2181720",
    "end": "2186880"
  },
  {
    "text": "from uh in a craft layer right and then you have your proxy in the middle right so the proxy is also again further",
    "start": "2186880",
    "end": "2193839"
  },
  {
    "text": "supported or secured using a proxy security group right so you can say that",
    "start": "2193839",
    "end": "2199240"
  },
  {
    "text": "accept only connections which are coming from the app security group right so whatever connections are coming from App",
    "start": "2199240",
    "end": "2205119"
  },
  {
    "text": "Security Group allow it for the proxy right and you can also you have all your",
    "start": "2205119",
    "end": "2210280"
  },
  {
    "text": "database right the extreme right side is a database right so you can uh you can also say that the database Security",
    "start": "2210280",
    "end": "2215500"
  },
  {
    "text": "Group should only accept connections if it's actually coming from the proxy right so by having this multiple layers",
    "start": "2215500",
    "end": "2222400"
  },
  {
    "text": "of Defense you can clearly say that you know hey only accept database connections which is coming from the",
    "start": "2222400",
    "end": "2227980"
  },
  {
    "text": "proxy right so essentially you are making the entire security aspects of of the database connection and the entire",
    "start": "2227980",
    "end": "2233619"
  },
  {
    "text": "app uh much more uh seamless and secure here right so what we will do next is we'll get",
    "start": "2233619",
    "end": "2241000"
  },
  {
    "text": "into a demo but before that I want to take a pause Stephen if there are any questions from the audience",
    "start": "2241000",
    "end": "2247078"
  },
  {
    "text": "uh yeah we've got uh one question from The Tech Guy 21 does RDS proxy do health",
    "start": "2247300",
    "end": "2255099"
  },
  {
    "text": "checks on its connection pool internally we",
    "start": "2255099",
    "end": "2261660"
  },
  {
    "text": "you know Health sex and whatnot I'm I don't have visibility into it um but I would I would assume that there",
    "start": "2261940",
    "end": "2268240"
  },
  {
    "text": "are connection uh you know check health checks which we do internally from a proxy uh setup right essentially proxy",
    "start": "2268240",
    "end": "2275020"
  },
  {
    "text": "will maintain connections it'll actually maintain set of connections and then it actually uh uses those connections and",
    "start": "2275020",
    "end": "2281920"
  },
  {
    "text": "it actually makes sure that it's used very uh you know you know effectively uh it uses",
    "start": "2281920",
    "end": "2288760"
  },
  {
    "text": "connection it actually uh Returns the connection to the pool so there is a whole notion called connection pool all",
    "start": "2288760",
    "end": "2294220"
  },
  {
    "text": "together right and it uses the connection and you retrieve the you know you know give back the connection so there is something called as a borrowing",
    "start": "2294220",
    "end": "2300280"
  },
  {
    "text": "uh there is a notion called as boring which comes into play here uh but again the whole thing will be handled",
    "start": "2300280",
    "end": "2306220"
  },
  {
    "text": "efficiently using health successful internally you might be doing Health Service but we don't have that visibility uh abstract away from the",
    "start": "2306220",
    "end": "2312640"
  },
  {
    "text": "user great thanks uh that's all the questions for the moment awesome so",
    "start": "2312640",
    "end": "2320020"
  },
  {
    "text": "um you kind of heard about uh connection pooling multiplexing extra fast followers what we'll do next is we'll",
    "start": "2320020",
    "end": "2325900"
  },
  {
    "text": "take a demo we'll see uh we'll show you I'll show you a demo where you can actually see RDX proxy in action right",
    "start": "2325900",
    "end": "2332500"
  },
  {
    "text": "so the whole theme of the demo is going to be making sure uh proxy is able to give you fast failovers as I promised in",
    "start": "2332500",
    "end": "2339520"
  },
  {
    "text": "in the talk right so that's the core just of the demo here so now let's uh um switch screens and uh uh see this is in",
    "start": "2339520",
    "end": "2347619"
  },
  {
    "text": "action share my screen quickly here",
    "start": "2347619",
    "end": "2353940"
  },
  {
    "text": "all right now you should be able to see my screen so what you see is I'm actually logged",
    "start": "2384040",
    "end": "2391240"
  },
  {
    "text": "into the AWS console here right um so I'm logged into my AWS console I'm showing you my the cluster which I've",
    "start": "2391240",
    "end": "2397540"
  },
  {
    "text": "already configured so uh the cluster called a reader instance and a writer instance so node one here is actually",
    "start": "2397540",
    "end": "2404380"
  },
  {
    "text": "the writer instance right so you can see you're seeing the node one which is right for instance and then I have an O2",
    "start": "2404380",
    "end": "2409780"
  },
  {
    "text": "which is reader instance and you can see that it's actually configured in USBS to a and 2B different azs right so",
    "start": "2409780",
    "end": "2415720"
  },
  {
    "text": "failovers normally uh you know azs right it's dependent on ACS so whenever there",
    "start": "2415720",
    "end": "2420760"
  },
  {
    "text": "is a failover there is an interesting aspect here right there is something called as event subscription so if you",
    "start": "2420760",
    "end": "2425859"
  },
  {
    "text": "want to catch those failover events right failovers is happening reboots are happening you can actually cast those",
    "start": "2425859",
    "end": "2431859"
  },
  {
    "text": "things right so there is a notion called as event subscription which is uh something which you can create so for the demo I'm not going to show you the",
    "start": "2431859",
    "end": "2438579"
  },
  {
    "text": "events or subscription uh so essentially you can actually get a notification right if you want an SMS alert on a",
    "start": "2438579",
    "end": "2444820"
  },
  {
    "text": "failover you can actually uh get a get an email notification or an SMS text if you want right so that's the event",
    "start": "2444820",
    "end": "2451300"
  },
  {
    "text": "subscription which I wanted to highlight for you right so if you look at events for example you can see that uh you know",
    "start": "2451300",
    "end": "2457720"
  },
  {
    "text": "there are multiple events which happened uh for the for the cluster which I created right so you know a failover",
    "start": "2457720",
    "end": "2463180"
  },
  {
    "text": "happened uh DB instance was restarted for example right so all these are events which you can capture right so uh",
    "start": "2463180",
    "end": "2470380"
  },
  {
    "text": "for for the demo what we are going to do is we will use a tool called as Cloud9 which is a cloud-based IDE for running",
    "start": "2470380",
    "end": "2476500"
  },
  {
    "text": "some comebacks right essentially what we're going to do with here so we are going to trigger a failover right so",
    "start": "2476500",
    "end": "2482680"
  },
  {
    "text": "before we trigger a failover we we kind of uh I'm just running a command to make sure I'm able to connect to the insta",
    "start": "2482680",
    "end": "2488920"
  },
  {
    "text": "right so here I do a select motion and an error version I'm able to connect to the cluster which tells me that the",
    "start": "2488920",
    "end": "2494440"
  },
  {
    "text": "cluster is up and health healthy and I'm able to connect right so that's the the First Command which we will do so on the",
    "start": "2494440",
    "end": "2500920"
  },
  {
    "text": "on the second uh Command right we will just use couple of you know you know uh Windows here to make sure you're able to",
    "start": "2500920",
    "end": "2507520"
  },
  {
    "text": "clearly understand so in in one of the other window what we are going to run is we are going to run a python script uh",
    "start": "2507520",
    "end": "2514540"
  },
  {
    "text": "it's a very simple python script uh which is going to be you know I'm going to run it now which which is going to uh",
    "start": "2514540",
    "end": "2522339"
  },
  {
    "text": "say that uh which node I'm connected to right so as you can see here I'm",
    "start": "2522339",
    "end": "2527740"
  },
  {
    "text": "actually connected to the node one right which is the writer instance um at this",
    "start": "2527740",
    "end": "2533260"
  },
  {
    "text": "point of time so node one is the writer instance right so the python is simple",
    "start": "2533260",
    "end": "2540339"
  },
  {
    "text": "it's pretty straightforward it's just you know connecting to the writer instance seamlessly so in the other",
    "start": "2540339",
    "end": "2545859"
  },
  {
    "text": "window what we're going to do is we are actually going to run a CLI command which is uh to just uh trigger a failure",
    "start": "2545859",
    "end": "2553359"
  },
  {
    "text": "right so I'm actually running RDS failover DB cluster command to essentially failover uh trigger a",
    "start": "2553359",
    "end": "2559660"
  },
  {
    "text": "failure rights there are multiple ways where you can trigger a failover but in this case I'm just using a command line",
    "start": "2559660",
    "end": "2565540"
  },
  {
    "text": "tool or a command to run that right so I got a Json which means that the failover is done the failover is completed and if",
    "start": "2565540",
    "end": "2573099"
  },
  {
    "text": "I look at the UI and if I refresh this UI and this is again a UI right it takes",
    "start": "2573099",
    "end": "2578319"
  },
  {
    "text": "time for for the UI to come up with results right um so you know the Json is done so I I'm",
    "start": "2578319",
    "end": "2585099"
  },
  {
    "text": "pretty sure that the failover was triggered so what we will do is rather than looking at the UI we'll actually use this uh you know window to see",
    "start": "2585099",
    "end": "2592240"
  },
  {
    "text": "what's going on right so so we are still connected to the writer instance so remember this node one is our writer",
    "start": "2592240",
    "end": "2598660"
  },
  {
    "text": "instance right now you can see that the connection is closed right so now again",
    "start": "2598660",
    "end": "2604720"
  },
  {
    "text": "I'm just maximizing this now we can see that the connection is closed the failover happened and now node one is",
    "start": "2604720",
    "end": "2612339"
  },
  {
    "text": "the reader and node 2 is the right term right so that's a normal failover uh",
    "start": "2612339",
    "end": "2617680"
  },
  {
    "text": "expected you know whatever you know what happens after a failover this is what you happen right so node one is the",
    "start": "2617680",
    "end": "2623079"
  },
  {
    "text": "right reader now node two is the writer so you can see that there are some DNS tail errors right so I kind of spoke",
    "start": "2623079",
    "end": "2629260"
  },
  {
    "text": "about DNS when I when I kind of talk about failures right so now you see that you know there are DNS failover uh DNS",
    "start": "2629260",
    "end": "2635560"
  },
  {
    "text": "stale situations are there the entire failover taken time is you know more than like 4.7 seconds right so if you",
    "start": "2635560",
    "end": "2641920"
  },
  {
    "text": "kind of look at the whole entire uh you know failover window from the failover to the DNS propagation Etc it's actually",
    "start": "2641920",
    "end": "2649480"
  },
  {
    "text": "more than 10 seconds right and so you know if you kind of look through these numbers you can actually see that it's more than 10 seconds right so the total",
    "start": "2649480",
    "end": "2656680"
  },
  {
    "text": "failover time uh it's actually 10 seconds so as you can see the Note 2 is",
    "start": "2656680",
    "end": "2662020"
  },
  {
    "text": "is the writer now node one is the reader now right so that's essentially what uh",
    "start": "2662020",
    "end": "2668440"
  },
  {
    "text": "you know you can expect right from a failure so now let's exit this terminal and then see how things are if we start",
    "start": "2668440",
    "end": "2676300"
  },
  {
    "text": "using uh an RDX proxy endpoint so in this case right the first failover I did",
    "start": "2676300",
    "end": "2682000"
  },
  {
    "text": "I actually use the cluster endpoint now what we will do is we'll create a proxy",
    "start": "2682000",
    "end": "2687640"
  },
  {
    "text": "to see how proxy is going to make this entire seamless failover experience seamless for you right so again you know",
    "start": "2687640",
    "end": "2695560"
  },
  {
    "text": "I already have epoxy but again we'll just walk through uh creating a proxy right so you essentially will give a",
    "start": "2695560",
    "end": "2700900"
  },
  {
    "text": "name so the name doesn't matter or whatever name you gave it's it's it's the name of the proxy uh it doesn't",
    "start": "2700900",
    "end": "2706960"
  },
  {
    "text": "matter what name you gave the engine compatibility that's the most important part right so you know we support poster",
    "start": "2706960",
    "end": "2713319"
  },
  {
    "text": "SQL and MySQL so as I said so in this case my database cluster is approach to",
    "start": "2713319",
    "end": "2719079"
  },
  {
    "text": "SQL Arora cluster the postgresql so I'm actually using that I can actually say the TTL settings here as well um say",
    "start": "2719079",
    "end": "2725380"
  },
  {
    "text": "that you know hey I'm going to use TTL for connecting to my proxy which is TLS essentially and not details sorry TLS",
    "start": "2725380",
    "end": "2733000"
  },
  {
    "text": "that's also something which you can Define and then you actually choose the database instance right so I kind of",
    "start": "2733000",
    "end": "2739060"
  },
  {
    "text": "showed you the database instance so essentially I will have to choose the database instance here and then there is",
    "start": "2739060",
    "end": "2744220"
  },
  {
    "text": "another notion called as connection pool maximum connection right so assume that you know you have a database with 100",
    "start": "2744220",
    "end": "2749920"
  },
  {
    "text": "you know a thousand connections and you can essentially have multiple RDX proxy as well to that database right so you",
    "start": "2749920",
    "end": "2756460"
  },
  {
    "text": "can say that you know hey the the admin team can get 10 percent of those connections um the HR team can get 20",
    "start": "2756460",
    "end": "2763020"
  },
  {
    "text": "your end users customers can get 80 percent for example right so essentially you can actually control how much",
    "start": "2763020",
    "end": "2769780"
  },
  {
    "text": "database connection the proxy can kind of use right so essentially this is a person which you gave right so in the",
    "start": "2769780",
    "end": "2775599"
  },
  {
    "text": "situations where you have multiple uh you know RDX proxy for the same cluster you can essentially have that",
    "start": "2775599",
    "end": "2781780"
  },
  {
    "text": "the additional option which I mentioned is about reader endpoint right to improve the scalability aspect of reader",
    "start": "2781780",
    "end": "2787660"
  },
  {
    "text": "so you can actually uh you know add a reader and point as well in this in this case so that's again additional feature",
    "start": "2787660",
    "end": "2793300"
  },
  {
    "text": "which is which is available for you right so for the demo I'm not going to use reader endpoint right so we we don't",
    "start": "2793300",
    "end": "2799480"
  },
  {
    "text": "have any read replicas here things like that I'm not showing you any Creator uh scale aspect so that's something which",
    "start": "2799480",
    "end": "2805720"
  },
  {
    "text": "we are not doing it today so I mentioned about pinning right uh you know um pinning is happening in in some",
    "start": "2805720",
    "end": "2812740"
  },
  {
    "text": "situations where it's not safe to reuse the connection so uh that's something which is available and If you if you are",
    "start": "2812740",
    "end": "2818980"
  },
  {
    "text": "okay with uh you know excluding the variable sets uh that you can actually uh set that settings as well right so",
    "start": "2818980",
    "end": "2824319"
  },
  {
    "text": "for the demo we are not doing anything in that in those lines uh I spoke about Secrets manager right",
    "start": "2824319",
    "end": "2830680"
  },
  {
    "text": "so we will select a secret uh you know Secrets manager secret which you have already created so essentially it's a",
    "start": "2830680",
    "end": "2836260"
  },
  {
    "text": "database username and password which is already configured in Secrets manager so that's something which you also will",
    "start": "2836260",
    "end": "2841720"
  },
  {
    "text": "will select so essentially uh the proxy will use those secret to talk to the",
    "start": "2841720",
    "end": "2848079"
  },
  {
    "text": "database right so that's the main advantage here and then there is an IEM role here and we will leave the I",
    "start": "2848079",
    "end": "2854859"
  },
  {
    "text": "enrolled to to be created so essentially the IM role says that you know the proxy is allowed to make the call to Secrets",
    "start": "2854859",
    "end": "2861220"
  },
  {
    "text": "manager right so that's the benefit IM authentication you can say that you know it's required or it's disabled so as I",
    "start": "2861220",
    "end": "2867700"
  },
  {
    "text": "mentioned you can force uh to connect to the RDX proxy using in right so you can",
    "start": "2867700",
    "end": "2873520"
  },
  {
    "text": "actually uh enforce that as needed so in this case I'm kind of making it um disabled here",
    "start": "2873520",
    "end": "2879819"
  },
  {
    "text": "um and kind of uh towards the end uh we are actually making sure some of the subnets are selected you can actually",
    "start": "2879819",
    "end": "2886119"
  },
  {
    "text": "choose a security group um so here I'm just using one which is already created",
    "start": "2886119",
    "end": "2891220"
  },
  {
    "text": "so that's the security group for the proxy that's essentially it right uh you",
    "start": "2891220",
    "end": "2896859"
  },
  {
    "text": "know you kind of create the proxy after you're done uh it takes like you know 10",
    "start": "2896859",
    "end": "2902079"
  },
  {
    "text": "to 15 minutes to create the proxy it takes time it takes uh some time to create the whole thing we need to make",
    "start": "2902079",
    "end": "2907540"
  },
  {
    "text": "sure it's highly available so at the entire data plane control plane operations we are taking care behind the",
    "start": "2907540",
    "end": "2913119"
  },
  {
    "text": "scene so for the demo we will use a one which is already created right so I already have one created so I will be",
    "start": "2913119",
    "end": "2919180"
  },
  {
    "text": "using that uh for the for the demo here so now what we are going to do is again",
    "start": "2919180",
    "end": "2924400"
  },
  {
    "text": "we are going to run the same failover uh python which which was uh connected",
    "start": "2924400",
    "end": "2931240"
  },
  {
    "text": "earlier but in this case we are actually running it with the proxy endpoint so previously if you noticed I actually use",
    "start": "2931240",
    "end": "2938680"
  },
  {
    "text": "the cluster and point but in this case I'm actually using the proxy endpoint right so as you see here again the proxy",
    "start": "2938680",
    "end": "2945220"
  },
  {
    "text": "got an endpoint you can actually create multiple endpoints for the proxy as well you can create a reader endpoint but in",
    "start": "2945220",
    "end": "2950680"
  },
  {
    "text": "this case I'm actually using the one which is already available right so as you see here I am actually connected to",
    "start": "2950680",
    "end": "2956560"
  },
  {
    "text": "node 2 which is the writer right so previously node one was the right failover happened no 2 is right or now",
    "start": "2956560",
    "end": "2962079"
  },
  {
    "text": "and now we'll repeat the same experiment right so you'll actually run the failover command",
    "start": "2962079",
    "end": "2967960"
  },
  {
    "text": "in here to you trigger a fail right so I'm going to run the failover command RDS failover DB cluster I should get a",
    "start": "2967960",
    "end": "2975760"
  },
  {
    "text": "Json on here in this case like our Json which says the failure is done now we'll come back and then we'll kind of monitor",
    "start": "2975760",
    "end": "2982000"
  },
  {
    "text": "the situation right what is going on here you know when are we going to cast that failover right previously if you",
    "start": "2982000",
    "end": "2988000"
  },
  {
    "text": "remember we got DNS tail issues failover took more than you know 10 10 seconds overall right DNS tail protocol",
    "start": "2988000",
    "end": "2995560"
  },
  {
    "text": "uh let's see what's the situation here after connecting to RDX proxy right so I just want to maximize this for you to",
    "start": "2995560",
    "end": "3001980"
  },
  {
    "text": "view uh I'm still connected to node 2 which is the writer failover was triggered now you can see a small blip",
    "start": "3001980",
    "end": "3009119"
  },
  {
    "text": "here right the writer was node two it actually changed to node one right node",
    "start": "3009119",
    "end": "3014819"
  },
  {
    "text": "one is right or now right in the previous case we have DNS tail issues",
    "start": "3014819",
    "end": "3020940"
  },
  {
    "text": "failover took more than 10 seconds overall right into it in this case it's actually you know if",
    "start": "3020940",
    "end": "3028440"
  },
  {
    "text": "you kind of look at the numbers it's actually three seconds per se no DNS tail issues right nothing was there",
    "start": "3028440",
    "end": "3034800"
  },
  {
    "text": "which we what we did we just changed the RDX proxy uh uh endpoint use the RDX",
    "start": "3034800",
    "end": "3041099"
  },
  {
    "text": "boxy endpoint right now node one is the writer no DNS issues nothing as such",
    "start": "3041099",
    "end": "3046200"
  },
  {
    "text": "right so net effect is essentially you're getting 66 to 70 percent uh",
    "start": "3046200",
    "end": "3052559"
  },
  {
    "text": "improvement with failover times right so that's a that's a benefit so just kind of picture this right you know proxy is",
    "start": "3052559",
    "end": "3058619"
  },
  {
    "text": "sitting uh in the middle between your app and the database it's actually able to queue transactions uh for you right",
    "start": "3058619",
    "end": "3065760"
  },
  {
    "text": "that's a major benefit proxy again there was a question earlier kind of caching part right you know proxy doesn't do any",
    "start": "3065760",
    "end": "3071460"
  },
  {
    "text": "caching per se that's not something which proxy does caching in the sense data cache and",
    "start": "3071460",
    "end": "3077280"
  },
  {
    "text": "whatnot right proxy doesn't do that it's essentially trying to you know preserve connections it's efficiently handling",
    "start": "3077280",
    "end": "3082800"
  },
  {
    "text": "connections so that you know you have a net effect of 66 uh person failover uh Improvement right and uh with all these",
    "start": "3082800",
    "end": "3090240"
  },
  {
    "text": "connection pooling and whatnot you're able to kind of scale right let's take a quick pause and uh open up four",
    "start": "3090240",
    "end": "3095880"
  },
  {
    "text": "questions Stephen are you uh uh are we having any questions here yeah we have one other uh question uh",
    "start": "3095880",
    "end": "3104700"
  },
  {
    "text": "from The Tech Guy 21 how can I use cloudwatch to monitor RDS proxy scale",
    "start": "3104700",
    "end": "3110819"
  },
  {
    "text": "yeah so uh RDX proxy uh you know gives you a lot of insights around uh",
    "start": "3110819",
    "end": "3117300"
  },
  {
    "text": "cloudwatch metrics it's mainly around database uh connections uh it talks it talks about uh you know uh failed",
    "start": "3117300",
    "end": "3124380"
  },
  {
    "text": "connections it talks about pinned connections Etc so all those metrics you can actually monitoring using cloudwatch",
    "start": "3124380",
    "end": "3130920"
  },
  {
    "text": "right um so if you kind of look look into the documentation around what are cloudwatch metrics are the Xbox inmate",
    "start": "3130920",
    "end": "3136619"
  },
  {
    "text": "you can clearly see see all those uh you know you know key metrics which we have right database connections how many how",
    "start": "3136619",
    "end": "3143040"
  },
  {
    "text": "many got pinned uh what was the success rate is are there any failures around database connections Etc so they give",
    "start": "3143040",
    "end": "3150000"
  },
  {
    "text": "you a you know a series of metrics uh cloud cloud metrics for you to kind of control so as essentially enrage you to",
    "start": "3150000",
    "end": "3156300"
  },
  {
    "text": "kind of look into the documentation and see which one makes sense but we offer many metrics for you to kind of track",
    "start": "3156300",
    "end": "3162420"
  },
  {
    "text": "the entire health of RDX proxy excellent thank you uh for that",
    "start": "3162420",
    "end": "3167579"
  },
  {
    "text": "demonstration on RDS proxy enough uh everyone today we learned that we looked at Amazon RDS proxy and how you can",
    "start": "3167579",
    "end": "3175260"
  },
  {
    "text": "leverage it to improve connection pooling scaling performance and security of your applications if there are any",
    "start": "3175260",
    "end": "3181140"
  },
  {
    "text": "questions that were not answered today you can post your questions on repost dot AWS where one of our experts can",
    "start": "3181140",
    "end": "3189300"
  },
  {
    "text": "provide you with an answer on your question or your question could be a topic uh in one of our future shows if",
    "start": "3189300",
    "end": "3196559"
  },
  {
    "text": "you have feedback for us please check the chat box on the right for a link to our survey or you can email us at AWS",
    "start": "3196559",
    "end": "3203520"
  },
  {
    "text": "support you at amazon.com we want to hear from you tell us what else you",
    "start": "3203520",
    "end": "3209040"
  },
  {
    "text": "would like to see on the show thanks for joining us at AWS supports you and happy",
    "start": "3209040",
    "end": "3214440"
  },
  {
    "text": "cloud computing thanks everyone",
    "start": "3214440",
    "end": "3220160"
  },
  {
    "text": "[Music]",
    "start": "3221740",
    "end": "3227210"
  }
]