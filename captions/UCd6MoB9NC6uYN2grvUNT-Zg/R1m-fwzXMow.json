[
  {
    "text": "and with that I'll go ahead and hand it over to David thank you Aurora and good morning um so today we're going to",
    "start": "1400",
    "end": "8160"
  },
  {
    "text": "follow up our previous uh webcast with which which covered an introduction to",
    "start": "8160",
    "end": "13519"
  },
  {
    "text": "Red shift um and of course we need to go a lot deeper um to to really look under",
    "start": "13519",
    "end": "19080"
  },
  {
    "text": "the covers and see what's how red shift operates so with me today is uh is viia who's the senior product um development",
    "start": "19080",
    "end": "26679"
  },
  {
    "text": "manager for red shift um and so we're going to take you through um some of the details underneath the hood of best",
    "start": "26679",
    "end": "33160"
  },
  {
    "text": "practice for red shift um now you will have noticed the difference between the invitation and the slide is uh the words",
    "start": "33160",
    "end": "38719"
  },
  {
    "text": "part one what we realized in building this um this content is that and and",
    "start": "38719",
    "end": "44559"
  },
  {
    "text": "with the feedback from a lot of our customers through a support Channel and so on is that uh there is a lot more",
    "start": "44559",
    "end": "50520"
  },
  {
    "text": "that people are uh need to understand to to uh get their head around and and their arms around red shift so we will",
    "start": "50520",
    "end": "57079"
  },
  {
    "text": "be doing a part two it's um it's not a teaser with ending there will be another one um as well as others in the series",
    "start": "57079",
    "end": "63519"
  },
  {
    "text": "so let's just talk about the agenda I'm going to do a very brief introduction I promise and hand it over to viia who's",
    "start": "63519",
    "end": "69400"
  },
  {
    "text": "going to take you through some of the detailed uh architecture and best practices of uh red shift and we'll",
    "start": "69400",
    "end": "75479"
  },
  {
    "text": "we'll leave plenty of time for a Q&A at the end so please queue up your as you as you have questions as they pop into",
    "start": "75479",
    "end": "82840"
  },
  {
    "text": "your head go into the Q&A panel and and type them in there and we'll get to them in in roughly the order that they come",
    "start": "82840",
    "end": "88280"
  },
  {
    "text": "in so quick introduction um database Services is part of the core Foundation Services of AWS um it's it really",
    "start": "88280",
    "end": "96320"
  },
  {
    "text": "comprises the structured scalable high performance storage really for applications so as besides red shift we",
    "start": "96320",
    "end": "102960"
  },
  {
    "text": "have Dynamo DB uh for no SQL high performance non-relational database um",
    "start": "102960",
    "end": "108240"
  },
  {
    "text": "for really extreme scalability and if you watched verer this morning he announced an exciting addition to that",
    "start": "108240",
    "end": "114560"
  },
  {
    "text": "where we uh are releasing local secondary indexes for Dynamo DB RDS uh",
    "start": "114560",
    "end": "120439"
  },
  {
    "text": "is their relational database service managed database service um constantly um adding features I'm supporting Oracle",
    "start": "120439",
    "end": "128599"
  },
  {
    "text": "my SQL and SQL server today and of course elastic cache in memory caching really man manage mem cach D service so",
    "start": "128599",
    "end": "135519"
  },
  {
    "text": "today we're going to focus on red shift and specifically um I want to start with",
    "start": "135519",
    "end": "140959"
  },
  {
    "text": "talking about the objectives the motivations what what um drove what was the design principles when we built red",
    "start": "140959",
    "end": "146879"
  },
  {
    "text": "shift um it was really very simple in a T Market we had to be faster than a row",
    "start": "146879",
    "end": "152959"
  },
  {
    "text": "based store uh which was really a uh lowcost um highquality data warehouse uh",
    "start": "152959",
    "end": "160040"
  },
  {
    "text": "entry level solution for many customers um but it had to be a whole lot cheaper than the existing MPP architectures out",
    "start": "160040",
    "end": "166400"
  },
  {
    "text": "there which are very fast but they're they're also quite expensive um and a lot simpler Simplicity is is a key",
    "start": "166400",
    "end": "172800"
  },
  {
    "text": "attribute and we'll we'll go through some of that and you'll understand if you haven't already um how red shift changes the equation",
    "start": "172800",
    "end": "181200"
  },
  {
    "text": "okay so one an important factor about red shift is the way that it dramatically focuses on the reduction in",
    "start": "182560",
    "end": "188519"
  },
  {
    "text": "IO which is the essential element for a data warehouse so there are a number of attributes here uh of red shift that",
    "start": "188519",
    "end": "195040"
  },
  {
    "text": "enable this first the storage is attached so red shift is only dependent on network and uh Power for its",
    "start": "195040",
    "end": "201519"
  },
  {
    "text": "operations the data block sizes are large which allows us to store remove data between the storage layer and and",
    "start": "201519",
    "end": "208280"
  },
  {
    "text": "the um the instance very quickly in large chunks which is great for those access patterns as large queries um most",
    "start": "208280",
    "end": "215319"
  },
  {
    "text": "important is that it's a columna data store now this is a a",
    "start": "215319",
    "end": "221040"
  },
  {
    "text": "structural uh organization that allows you to put data adjacent on the dis in columnar order and really what that does",
    "start": "221040",
    "end": "227920"
  },
  {
    "text": "it means it's optimized for query patterns that are heavy on the scan which are things like large aggregations",
    "start": "227920",
    "end": "232959"
  },
  {
    "text": "billion row queries things like that um data is compressed largely as a result of that column of storage highly",
    "start": "232959",
    "end": "239400"
  },
  {
    "text": "compressed ible and zone maps is a is a feature which allows us to do block skipping now these why I'm introducing",
    "start": "239400",
    "end": "246000"
  },
  {
    "text": "these because they're actually this this sort of information is very important to understanding how best practices um are",
    "start": "246000",
    "end": "252560"
  },
  {
    "text": "enabled in red shift for making queries and making data ingestion faster zone maps for instance comes into that",
    "start": "252560",
    "end": "258440"
  },
  {
    "text": "heavily when we talk about um the way we sort data uh red shift on top underneath all",
    "start": "258440",
    "end": "265040"
  },
  {
    "text": "that was uh built on optimized Hardware as well um the hardware was built for red shift it's since been made available",
    "start": "265040",
    "end": "271680"
  },
  {
    "text": "in ec2 so you can um you can spin up an hs1 8xl instance and um enjoy uh red",
    "start": "271680",
    "end": "279440"
  },
  {
    "text": "shift is a managed service uses that instance but of course adds a lot more to the to the equation and we'll we'll",
    "start": "279440",
    "end": "284960"
  },
  {
    "text": "go into some of that as well data protection being high amongst that um but as well as a lot of Performance red",
    "start": "284960",
    "end": "291320"
  },
  {
    "text": "shift runs in HPC our fast Network for hyperformance computing and has extremely high dis density so that means",
    "start": "291320",
    "end": "297240"
  },
  {
    "text": "you get a lot lot of bang for the buck when you're using red shift in terms of data storage quantity you can scale with",
    "start": "297240",
    "end": "303720"
  },
  {
    "text": "the instance classes up to 1.6 pyes and you can start as low as a two terabyte",
    "start": "303720",
    "end": "309120"
  },
  {
    "text": "instance Now red shift really is designed to address the gap between data that is generated in organizations and",
    "start": "309120",
    "end": "316039"
  },
  {
    "text": "data that is made available for analysis um this is this is a an Ever widening",
    "start": "316039",
    "end": "321880"
  },
  {
    "text": "Gap and largely as a result of the cost to close that Gap and the effort and",
    "start": "321880",
    "end": "327080"
  },
  {
    "text": "what we mean by that is it it can be EXP expensive to move data from an operational data store into a warehouse",
    "start": "327080",
    "end": "333160"
  },
  {
    "text": "and it can certainly be timec consuming um and that of course has an Associated cost with that and so with that is the",
    "start": "333160",
    "end": "341600"
  },
  {
    "text": "um the limitation that many many customers are faced with with picking and choosing their their premium data as",
    "start": "341600",
    "end": "348520"
  },
  {
    "text": "that that which they will put into the data warehouse so red shift aims to change that equation by in a number of",
    "start": "348520",
    "end": "354319"
  },
  {
    "text": "ways one is to make it super agile and very fast easy to spin up a cluster move data in resize if you need to with just",
    "start": "354319",
    "end": "361880"
  },
  {
    "text": "a few clicks of the Mouse um on the other hand it's also designed to be priced for uh analysis of all of your",
    "start": "361880",
    "end": "369479"
  },
  {
    "text": "data um so really two metrics there 85 cents an hour for on demand will get you a 2 terab instance and of course you",
    "start": "369479",
    "end": "376160"
  },
  {
    "text": "scale it by each of those instances so four 4XL will be four times that number",
    "start": "376160",
    "end": "382199"
  },
  {
    "text": "so that's a low on demand rate rate is great for assessing red shift um for",
    "start": "382199",
    "end": "387280"
  },
  {
    "text": "understanding if it fits your needs um four assistent workloads where red shift is a good fed and uh if you decide to",
    "start": "387280",
    "end": "394319"
  },
  {
    "text": "put your workload into red shift permanently or at least one or three years at a time uh that price comes down",
    "start": "394319",
    "end": "401120"
  },
  {
    "text": "dramatically and what the reserve instance is um allows you to buy uh with",
    "start": "401120",
    "end": "407160"
  },
  {
    "text": "a small upfront payment allow you to buy the rate down so that the net effect um is dramatically reduced so 50 to 70%",
    "start": "407160",
    "end": "414960"
  },
  {
    "text": "reduction compared to the on demand price so that three-year reserved instance gets below $1,000 per terabyte",
    "start": "414960",
    "end": "421000"
  },
  {
    "text": "per year so what I'd like to do now is hand it over to Vidia um who's going to take",
    "start": "421000",
    "end": "426120"
  },
  {
    "text": "you through some of the more technical details of red shift and focus on best practice and we'll come back at the end",
    "start": "426120",
    "end": "431240"
  },
  {
    "text": "and do some Q&A P thank you David and uh welcome to this uh webinar uh so I'm",
    "start": "431240",
    "end": "437960"
  },
  {
    "text": "going to take you through some of the high level architecture of the service as well as some hints and tips and best",
    "start": "437960",
    "end": "443800"
  },
  {
    "text": "practices based on what we have seen as common pitfalls for uh early beginner",
    "start": "443800",
    "end": "448840"
  },
  {
    "text": "users of r shift uh if you've been using this service for a while you probably uh figured out a lot of this on your own",
    "start": "448840",
    "end": "455240"
  },
  {
    "text": "but uh this will give you an overview of the key things to keep in mind as you uh bring your workload to Red",
    "start": "455240",
    "end": "462319"
  },
  {
    "text": "shift um also to level set my slides are not nearly as pretty as David's so it's",
    "start": "462319",
    "end": "467400"
  },
  {
    "text": "going to be uh very BOS and uh content heavy so uh we'll just get through that",
    "start": "467400",
    "end": "472879"
  },
  {
    "text": "uh so let me start with the architecture when you so what is the ret of architecture when you when you go to",
    "start": "472879",
    "end": "478919"
  },
  {
    "text": "the when you go to provision a cluster the first thing uh that you do is specify uh how many how many nodes you",
    "start": "478919",
    "end": "486039"
  },
  {
    "text": "want to use so let's just take a step back uh so ret as a as a service is",
    "start": "486039",
    "end": "491720"
  },
  {
    "text": "composed of a bunch of different clusters uh these clusters are nothing but machines that have the capacity to",
    "start": "491720",
    "end": "498039"
  },
  {
    "text": "communicate with one another and uh it stores your data uh if you drill further",
    "start": "498039",
    "end": "503159"
  },
  {
    "text": "down every cluster is composed of all these nodes and you can think of each",
    "start": "503159",
    "end": "508280"
  },
  {
    "text": "node as an entity that has dedicated CPU uh dedicated memory and some dis uh in",
    "start": "508280",
    "end": "515279"
  },
  {
    "text": "fact drilling even deeper every node uh is further subdivided into a number of",
    "start": "515279",
    "end": "520760"
  },
  {
    "text": "slices and each slice has a dedicated core memory and dis so as a service at a",
    "start": "520760",
    "end": "526800"
  },
  {
    "text": "high level it's a bunch of clusters uh clusters are a set of nodes and nodes are a set of",
    "start": "526800",
    "end": "532600"
  },
  {
    "text": "slices uh furthermore if you look at the nodes themselves there are two types of nodes there is a leader node and there",
    "start": "532600",
    "end": "539279"
  },
  {
    "text": "are a whole bunch of compute nodes when you create a cluster you'll be asked to specify how many compute nodes uh you",
    "start": "539279",
    "end": "546279"
  },
  {
    "text": "would like to provision and based on your storage needs and performance needs you're going to pick a number uh so",
    "start": "546279",
    "end": "552480"
  },
  {
    "text": "every cluster gets one ler node and these two uh types of nodes have very different functions so let's uh look at",
    "start": "552480",
    "end": "558959"
  },
  {
    "text": "each one one at a time so the function for the leader node really is to be the point of uh contact",
    "start": "558959",
    "end": "567680"
  },
  {
    "text": "for the outside world so it communicates with all the clients all the SQL clients it's the single SQL end point for all",
    "start": "567680",
    "end": "573640"
  },
  {
    "text": "the clients uh and within the cluster it plays the role of coordinating among all",
    "start": "573640",
    "end": "579240"
  },
  {
    "text": "the other compute nodes uh to get the job done and there's a specific reason why",
    "start": "579240",
    "end": "585040"
  },
  {
    "text": "we architected it this way this is primarily for security we don't want uh uh since the compute nodes have all your",
    "start": "585040",
    "end": "591200"
  },
  {
    "text": "data we don't want uh anyone from outside uh uh outside AWS to have direct",
    "start": "591200",
    "end": "596600"
  },
  {
    "text": "access to the computer nodes uh there are some exceptions to this of course which which I'll go",
    "start": "596600",
    "end": "601680"
  },
  {
    "text": "through um so so the leader not the SQL endpoint it is postp based so it should",
    "start": "601680",
    "end": "606760"
  },
  {
    "text": "work with uh clients that are uh compatible with that and it also stores all your metadata so when you go in and",
    "start": "606760",
    "end": "613440"
  },
  {
    "text": "Define tables and users and um all the metadata for your database the leader note tracks it and stores",
    "start": "613440",
    "end": "620800"
  },
  {
    "text": "it the other major function for the leader node is to get your queries and",
    "start": "620800",
    "end": "626480"
  },
  {
    "text": "then uh compile them and generate the code that is needed to actually execute them so leader node does this and then",
    "start": "626480",
    "end": "633720"
  },
  {
    "text": "uh ships off uh all the generated code to the compute noes for processing and finally after the",
    "start": "633720",
    "end": "640399"
  },
  {
    "text": "processing is done the leader node still has to collect all the pieces uh do any",
    "start": "640399",
    "end": "646079"
  },
  {
    "text": "kind of final aggregations or any other um uh uh rollup functions and then send",
    "start": "646079",
    "end": "651760"
  },
  {
    "text": "the results back to the back to the end client so fairly important uh set of",
    "start": "651760",
    "end": "657160"
  },
  {
    "text": "actions for the leader not there now let's come to the compute nodes so you can think of the compute nodes as the",
    "start": "657160",
    "end": "663600"
  },
  {
    "text": "storage layer for our cluster so it holds all the data the leader node really does not hold any of the user",
    "start": "663600",
    "end": "669240"
  },
  {
    "text": "data that you enter um so the storage uh the compute nodes hold all your data in columnar format as uh as David",
    "start": "669240",
    "end": "677279"
  },
  {
    "text": "mentioned uh as well as uh one key design point for the compute nodes is we want all the big operations here to",
    "start": "677279",
    "end": "684040"
  },
  {
    "text": "happen in parallel because that's what gives it the scalability so for the compute nodes we",
    "start": "684040",
    "end": "691079"
  },
  {
    "text": "want the queries to process in parallel it's architected to do that uh we want loads to happen in parallel we backup",
    "start": "691079",
    "end": "697920"
  },
  {
    "text": "all your data regularly all of that happens in parallel and so does restore uh I haven't mentioned this here but",
    "start": "697920",
    "end": "704120"
  },
  {
    "text": "even resize happens in parallel so when you when you resize your cluster",
    "start": "704120",
    "end": "709680"
  },
  {
    "text": "essentially a new cluster is created with the new uh number of nodes that you want and the old the compute nodes of",
    "start": "709680",
    "end": "716440"
  },
  {
    "text": "the old and new cluster actually transfer data in parallel to speed up that",
    "start": "716440",
    "end": "721720"
  },
  {
    "text": "operation um Additionally the all the data here is um you have three so",
    "start": "721720",
    "end": "727200"
  },
  {
    "text": "whenever you load data into retri you get three copies uh one is a primary copy that gets onto the compute noes and",
    "start": "727200",
    "end": "734079"
  },
  {
    "text": "to the diss there uh within the cluster itself we actually store a mirror of the",
    "start": "734079",
    "end": "740079"
  },
  {
    "text": "data a secondary copy of the data uh so in fact uh in one of the prior slides",
    "start": "740079",
    "end": "745680"
  },
  {
    "text": "when uh uh when David mentioned that we had an Excel node has 2 terab of storage",
    "start": "745680",
    "end": "751279"
  },
  {
    "text": "it actually has 6 terab of storage in there only two is available for your use uh we use the rest for miroring and",
    "start": "751279",
    "end": "757760"
  },
  {
    "text": "spill space so there is a secondary copy of your data within the cluster and and",
    "start": "757760",
    "end": "763399"
  },
  {
    "text": "the way we distribute that is uh you know there's some smarts around that in having clicks and doing it in a way so",
    "start": "763399",
    "end": "769120"
  },
  {
    "text": "that uh we can recover from failures well so when discs go down we have a nice way of coming back",
    "start": "769120",
    "end": "776040"
  },
  {
    "text": "up um and also we have the and we have the ability to um and",
    "start": "776040",
    "end": "783399"
  },
  {
    "text": "the third copy is actually stored in S3 uh because we take continuous and automatic backups of all your data",
    "start": "783399",
    "end": "790560"
  },
  {
    "text": "automatically um based on certain criteria that we set so there's a primary copy secondary copy and you're back up an",
    "start": "790560",
    "end": "796639"
  },
  {
    "text": "S3 um so you as I talk to the talk through these various things one of the big things is all these nodes have to",
    "start": "796639",
    "end": "803399"
  },
  {
    "text": "communicate with one another one another really well to facilitate this we actually have a 10 G Network that is",
    "start": "803399",
    "end": "810120"
  },
  {
    "text": "used for internode communication that is minimally over subscribed basically that means there is uh little noise there and",
    "start": "810120",
    "end": "817399"
  },
  {
    "text": "you're uh guaranteed of having good bandwidth as the notes communicate with one another uh and one other aspect to",
    "start": "817399",
    "end": "824079"
  },
  {
    "text": "note here is um is the security so I mentioned one of the reasons the leader",
    "start": "824079",
    "end": "829360"
  },
  {
    "text": "node is your only point of contact is because we don't want direct access to compute nodes that have your data uh we",
    "start": "829360",
    "end": "837040"
  },
  {
    "text": "you should also knowe that the leader node in compute nodes are in a VPC and we support uh encryption encryption both",
    "start": "837040",
    "end": "844079"
  },
  {
    "text": "for data that moves in and out as well as encryption at rest for the data that",
    "start": "844079",
    "end": "849240"
  },
  {
    "text": "gets stored within the compute nodes so there's a lot of other uh security features that you can leverage leverage",
    "start": "849240",
    "end": "854880"
  },
  {
    "text": "here as well uh with that let's move to the to",
    "start": "854880",
    "end": "860160"
  },
  {
    "text": "the best practices portion of this um and let's start with ingestion this is",
    "start": "860160",
    "end": "865320"
  },
  {
    "text": "the first operation that you're likely to do uh when you spin up your cluster and the goal here is the best practice",
    "start": "865320",
    "end": "871759"
  },
  {
    "text": "is around is to ensure that when you insert lots of data into ret we want",
    "start": "871759",
    "end": "877320"
  },
  {
    "text": "that to happen in parallel as much as possible and leverage all the compute nodes that are there uh and minimize any",
    "start": "877320",
    "end": "884120"
  },
  {
    "text": "overheads so the so the preferred method here when you're loading in bulk is to",
    "start": "884120",
    "end": "889199"
  },
  {
    "text": "do a copy or use the copy command uh from S3 so we we recommend that you",
    "start": "889199",
    "end": "894759"
  },
  {
    "text": "stage your data in S3 and then use the copy command and when the data gets",
    "start": "894759",
    "end": "899839"
  },
  {
    "text": "loaded it will be loaded into red shift in sorted order if you've specified sort",
    "start": "899839",
    "end": "905040"
  },
  {
    "text": "Keys we also further recommend that you use a single copy command because using multiple commands will only serialize it",
    "start": "905040",
    "end": "911600"
  },
  {
    "text": "and delay it further um and that you split your files in S3 uh split your",
    "start": "911600",
    "end": "918560"
  },
  {
    "text": "data in S3 into multiple multiple files because only then we can do the data load in",
    "start": "918560",
    "end": "923800"
  },
  {
    "text": "parallel uh here is a sample copy command that you see and you can see that uh grabs the files from the S3",
    "start": "923800",
    "end": "931279"
  },
  {
    "text": "bucket my bucket you have to provide some credentials um and the other uh best practice in this area is when you",
    "start": "931279",
    "end": "937639"
  },
  {
    "text": "have large data sets uh please use uh please Gip them and and use that to",
    "start": "937639",
    "end": "943079"
  },
  {
    "text": "improve uh copy performance so this is a recommended way for bulk",
    "start": "943079",
    "end": "948800"
  },
  {
    "text": "loading now there are scenarios and we've had a number of customers where they're not able to do this and they",
    "start": "948800",
    "end": "954639"
  },
  {
    "text": "want to come in through SQL through the leader node to gather data in in to the cluster and this this could be because",
    "start": "954639",
    "end": "960680"
  },
  {
    "text": "they already have it somewhere else uh maybe Dynamo DB or um uh or in fact dyb",
    "start": "960680",
    "end": "967680"
  },
  {
    "text": "will love copy command maybe you have it in EMR or somewhere else where you you want to stream it in this way uh for",
    "start": "967680",
    "end": "973480"
  },
  {
    "text": "those scenarios we recommend that uh if you have to use the insert command then use multi- row inserts as opposed to",
    "start": "973480",
    "end": "980519"
  },
  {
    "text": "Singleton inserts um there is a big overhead for every every statement and",
    "start": "980519",
    "end": "985600"
  },
  {
    "text": "we just want to amortise that over uh getting a number of rows inside and on the on the slide there you see an",
    "start": "985600",
    "end": "992199"
  },
  {
    "text": "example query that you could use to insert multiple rows at a time uh so the point here is try to",
    "start": "992199",
    "end": "998920"
  },
  {
    "text": "avoid as much as possible uh Singleton DML operations insert update delete",
    "start": "998920",
    "end": "1004040"
  },
  {
    "text": "operations on the cluster so that is the second class of things that uh you want to do is bring data in in through the",
    "start": "1004040",
    "end": "1010240"
  },
  {
    "text": "leader node now if you want to just move data around the tables within your cluster then we recommend that you use",
    "start": "1010240",
    "end": "1016600"
  },
  {
    "text": "uh create table as or insert into select uh statements for doing that uh all of",
    "start": "1016600",
    "end": "1022000"
  },
  {
    "text": "this is documented in our guide and uh the syntax should be in the SQL reference U uh for you to look it",
    "start": "1022000",
    "end": "1028360"
  },
  {
    "text": "up uh moving to the next uh I wanted to make a point about U",
    "start": "1028360",
    "end": "1034000"
  },
  {
    "text": "loading from S3 um as if if you've used S3 for a while you'll know that um the",
    "start": "1034000",
    "end": "1040360"
  },
  {
    "text": "S3 in Us East provides eventual consistency and what that means is uh",
    "start": "1040360",
    "end": "1046199"
  },
  {
    "text": "what SV guarantees is you will have have all your data loaded to S3 but there there may be a lag from when you load it",
    "start": "1046199",
    "end": "1053840"
  },
  {
    "text": "in and when it's available uh to be ingested into red shift so and that is only for us East so",
    "start": "1053840",
    "end": "1061880"
  },
  {
    "text": "what we recommend there is um you can do one of two things one you can as soon as",
    "start": "1061880",
    "end": "1068039"
  },
  {
    "text": "you load your files onto S3 uh you can look up the listing object Keys section",
    "start": "1068039",
    "end": "1074200"
  },
  {
    "text": "of the S3 guide and that provides you provides you a procedure to to verify",
    "start": "1074200",
    "end": "1079720"
  },
  {
    "text": "that all the files that you think you loaded are actually available for use um",
    "start": "1079720",
    "end": "1084919"
  },
  {
    "text": "prior to loading into red shift that's number one Additionally you could also choose",
    "start": "1084919",
    "end": "1091360"
  },
  {
    "text": "to get the data into red shift but once it is inside red shift go and query the",
    "start": "1091360",
    "end": "1097080"
  },
  {
    "text": "table uh stdl load commits to ensure that all the files that you intended to",
    "start": "1097080",
    "end": "1102480"
  },
  {
    "text": "get in have actually made it in and this will um this will prevent you from grief later on when you're trying to uh do a",
    "start": "1102480",
    "end": "1109720"
  },
  {
    "text": "query and some data is missing uh and it because it could be because of um uh of",
    "start": "1109720",
    "end": "1115000"
  },
  {
    "text": "of the scenario so this is just a precautionary measure uh it doesn't happen very often but something to keep",
    "start": "1115000",
    "end": "1120640"
  },
  {
    "text": "in mind when you're making large loads all",
    "start": "1120640",
    "end": "1126039"
  },
  {
    "text": "right so moving along with more ingestion best practices I couldn't really these are some miscellaneous",
    "start": "1126039",
    "end": "1132000"
  },
  {
    "text": "things mostly things that we've seen customers do that have caused them pain uh they don't really fall into any",
    "start": "1132000",
    "end": "1137919"
  },
  {
    "text": "category so I'm just going to go through them one by one um as much as I want to talk about what we support I think it's",
    "start": "1137919",
    "end": "1143640"
  },
  {
    "text": "important to uh know what what is it that we don't support so one of the things that we don't support as a single",
    "start": "1143640",
    "end": "1150320"
  },
  {
    "text": "statement is the upsert statement uh something you may be used to so we don't",
    "start": "1150320",
    "end": "1155360"
  },
  {
    "text": "have a single upser statement however you can uh achieve the same effect by",
    "start": "1155360",
    "end": "1160640"
  },
  {
    "text": "following a set of steps essentially you'll have to load your data into a staging table and then do a join with a",
    "start": "1160640",
    "end": "1166919"
  },
  {
    "text": "Target table so you do an upset update command followed by an insert command",
    "start": "1166919",
    "end": "1172000"
  },
  {
    "text": "again the steps are well documented and the other the other thing that has caused confusion is that we do",
    "start": "1172000",
    "end": "1178960"
  },
  {
    "text": "not enforce a primary key constraint um so what that means for you",
    "start": "1178960",
    "end": "1184200"
  },
  {
    "text": "from an injection perspective is if you run the copy command twice on your data you will likely end up with a duplicate",
    "start": "1184200",
    "end": "1190559"
  },
  {
    "text": "copy of your data in your red shift cluster uh so please be mindful of that as you're uh as you're ingesting data",
    "start": "1190559",
    "end": "1197120"
  },
  {
    "text": "into red shift so one of the things the next has to do with the performance of the copy itself",
    "start": "1197120",
    "end": "1203280"
  },
  {
    "text": "so one of the things that is available to you is um to change or address a",
    "start": "1203280",
    "end": "1208919"
  },
  {
    "text": "concurrency uh in the retri cluster um and when you're running intense uh",
    "start": "1208919",
    "end": "1214679"
  },
  {
    "text": "resource intense commands like copy or vacuum uh and you want you want them to",
    "start": "1214679",
    "end": "1219919"
  },
  {
    "text": "uh speed up a little more one of the things that you could do is to change the uh wlm query slot count to a low",
    "start": "1219919",
    "end": "1226720"
  },
  {
    "text": "number and I'm going to talk more about wlm or workload manager further down but",
    "start": "1226720",
    "end": "1231799"
  },
  {
    "text": "essentially what you're doing here is to allow only a few concurrent queries to run three in this case which means that",
    "start": "1231799",
    "end": "1238320"
  },
  {
    "text": "every individual query has more resources uh at its disposal to to",
    "start": "1238320",
    "end": "1243360"
  },
  {
    "text": "complete quickly so that's something you could use for copy um and F and the other aspect of uh performance is after",
    "start": "1243360",
    "end": "1250600"
  },
  {
    "text": "your if when you're doing big changes to your data and you're bringing in a lot of data it's good practice run analyze",
    "start": "1250600",
    "end": "1257720"
  },
  {
    "text": "after that just so your Optimizer has access to the latest statistics that are up to date and your query plans are",
    "start": "1257720",
    "end": "1264280"
  },
  {
    "text": "optimized for your current uh data distribution um if you run into problems",
    "start": "1264280",
    "end": "1270480"
  },
  {
    "text": "as you're running uh running the copy command we have uh we have a couple of things uh we have two ways that you can",
    "start": "1270480",
    "end": "1276919"
  },
  {
    "text": "look it up one is to query our stdl load errors table um to look for errors um",
    "start": "1276919",
    "end": "1284480"
  },
  {
    "text": "and in fact there is a parameter that you can specify while uh with the copy command called Max errors which",
    "start": "1284480",
    "end": "1290159"
  },
  {
    "text": "essentially allows you to ignore U errors in your data and continue with the load uh in spite of them and we've",
    "start": "1290159",
    "end": "1297480"
  },
  {
    "text": "seen so if you know that there are uh likely to be data errors um in your sample set you may want to set this to",
    "start": "1297480",
    "end": "1303559"
  },
  {
    "text": "an appropriate number um and the other way you can look at U errors is also through our console",
    "start": "1303559",
    "end": "1310640"
  },
  {
    "text": "and I have a screenshot in the next uh the next slide uh one thing I want to mention is uh the the character set that",
    "start": "1310640",
    "end": "1316760"
  },
  {
    "text": "we support there's been uh some amount of traffic on the forums regarding this as well we support utf8 only up to three",
    "start": "1316760",
    "end": "1323400"
  },
  {
    "text": "bytes and there are special characters that we don't support uh and these are documented so please do uh take a look",
    "start": "1323400",
    "end": "1330039"
  },
  {
    "text": "at that uh as you're trying to figure out what might have caused problems during your data",
    "start": "1330039",
    "end": "1336880"
  },
  {
    "text": "ingestion so moving on to the next slide um so this is a screenshot of our",
    "start": "1337159",
    "end": "1342919"
  },
  {
    "text": "console um it's not it's not very readable I think I just wanted to put in put in a plug for the the console we do",
    "start": "1342919",
    "end": "1349320"
  },
  {
    "text": "have a fairly uh Rich set of functionality in the console you can use this to view errors uh there is an",
    "start": "1349320",
    "end": "1355240"
  },
  {
    "text": "entire panel that is dedicated to understanding query performance understanding how CPUs are used Etc uh",
    "start": "1355240",
    "end": "1362480"
  },
  {
    "text": "so if you have if you've not done so already please leverage uh the AWS um",
    "start": "1362480",
    "end": "1367640"
  },
  {
    "text": "Management console for red shift uh to to really understand what is going on uh",
    "start": "1367640",
    "end": "1373039"
  },
  {
    "text": "with with the operations and queries that you're running",
    "start": "1373039",
    "end": "1377880"
  },
  {
    "text": "okay so that was all about ingestion uh let's move on to uh figuring out um how",
    "start": "1378919",
    "end": "1385559"
  },
  {
    "text": "we set sort and distribution keys so one of the things with ret ofid it is a managed service so there are very few",
    "start": "1385559",
    "end": "1391480"
  },
  {
    "text": "knobs that you as a customer have to um set in order to get started uh at a high",
    "start": "1391480",
    "end": "1397039"
  },
  {
    "text": "level there are probably three things you're going to do up front one is to figure out how many nodes you need based",
    "start": "1397039",
    "end": "1402720"
  },
  {
    "text": "on how much data you have uh and the other two would be figuring out what your sort keys are for your tables and",
    "start": "1402720",
    "end": "1409120"
  },
  {
    "text": "what your distribution keys are for your table um the the next couple of slides",
    "start": "1409120",
    "end": "1415919"
  },
  {
    "text": "what the intention here is to just help you get started on how you can think about um setting these keys and provide",
    "start": "1415919",
    "end": "1423320"
  },
  {
    "text": "some guidelines on how you would go about doing it the treatment here has been somewhat simplistic and the reason",
    "start": "1423320",
    "end": "1429520"
  },
  {
    "text": "for that is there's some confusion as to how to get started and that's what we're trying to address uh in",
    "start": "1429520",
    "end": "1436279"
  },
  {
    "text": "reality uh it's very possible that the queries and workloads are fairly complex so you have to take into consideration",
    "start": "1436279",
    "end": "1443240"
  },
  {
    "text": "uh other factors beyond uh Beyond just what is here uh so typically when you think",
    "start": "1443240",
    "end": "1449520"
  },
  {
    "text": "about sort and distribution Keys uh you would look for all the join um requirements all the filtering",
    "start": "1449520",
    "end": "1456120"
  },
  {
    "text": "requirements because these determine um how you distribute stuff so that things can be collocated you have to look at",
    "start": "1456120",
    "end": "1462720"
  },
  {
    "text": "the size of your tables and uh why that's important is you know smaller tables can be shipped around nodes and",
    "start": "1462720",
    "end": "1469200"
  },
  {
    "text": "that's still okay but the larger tables you wanted to stay stay put you want to",
    "start": "1469200",
    "end": "1474320"
  },
  {
    "text": "look at the cardinality of your columns if something has a large skew you don't want to distribute on that if it's a if",
    "start": "1474320",
    "end": "1480679"
  },
  {
    "text": "it's like a primary key and it has even skew then then that's a good choice so there are several things to think about",
    "start": "1480679",
    "end": "1486480"
  },
  {
    "text": "and there are likely also going to be uh some tension in um in which key would be",
    "start": "1486480",
    "end": "1492039"
  },
  {
    "text": "better because um because of the complexity of the queries um so some of our more advanced users have uh have",
    "start": "1492039",
    "end": "1499600"
  },
  {
    "text": "actually gone down the path of experimenting with different sort and distribution keys to figure out uh what",
    "start": "1499600",
    "end": "1505360"
  },
  {
    "text": "works for their applications and what works from a business point of view because you may not be able to optimize",
    "start": "1505360",
    "end": "1510960"
  },
  {
    "text": "for all the queries but at least the ones that actually are critical to your business you want to optimize for so",
    "start": "1510960",
    "end": "1517919"
  },
  {
    "text": "with that um uh with that background let's get started on the sort key so the",
    "start": "1517919",
    "end": "1522960"
  },
  {
    "text": "goal for the S key really is to skip over data blocks to minimize to minim IO",
    "start": "1522960",
    "end": "1529600"
  },
  {
    "text": "now David touched on this briefly when he mentioned zone maps So within within",
    "start": "1529600",
    "end": "1535080"
  },
  {
    "text": "the ret of clusters we we maintain uh when you choose to sort on a particular column we maintain the Min and Max",
    "start": "1535080",
    "end": "1542120"
  },
  {
    "text": "values for the blocks um that are stored within that node and this allows us to",
    "start": "1542120",
    "end": "1547440"
  },
  {
    "text": "completely skip over entire data blocks when we know that you're filtering on that and we know the range that you're",
    "start": "1547440",
    "end": "1552640"
  },
  {
    "text": "going after so that's the role of the sord key and you can actually specify more than one sord key if you'd like uh",
    "start": "1552640",
    "end": "1558679"
  },
  {
    "text": "so the way you would go about picking one is to look at all your queries and look for the we CLA or the filtering uh",
    "start": "1558679",
    "end": "1563919"
  },
  {
    "text": "filtering that you do and pick those columns that often get filtered because",
    "start": "1563919",
    "end": "1569399"
  },
  {
    "text": "that allows us to skip over things that are irrelevant to that query very often we see a good sort key",
    "start": "1569399",
    "end": "1575520"
  },
  {
    "text": "would be to uh use this time stamp as a sort key and the reason for that is there is a tendency to query uh data",
    "start": "1575520",
    "end": "1582039"
  },
  {
    "text": "that just came in the last day or the last week uh for bi applications and that typically ends up being a fairly",
    "start": "1582039",
    "end": "1588919"
  },
  {
    "text": "good uh good sword key to go after in terms of tradeoffs when you pick a sword",
    "start": "1588919",
    "end": "1594039"
  },
  {
    "text": "key what we have to do while ingesting data is to sort it uh before we write to disk uh new rols that get added are",
    "start": "1594039",
    "end": "1601399"
  },
  {
    "text": "temporarily stored in a region that is unsorted and the vacuum command will get it into a sorted format so there is an",
    "start": "1601399",
    "end": "1607480"
  },
  {
    "text": "overhead to keeping it sorted um so just be mindful of that as you pick your keys for for",
    "start": "1607480",
    "end": "1614799"
  },
  {
    "text": "sorting so the third thing that you pick so number of number number of nodes start key and the third thing is the",
    "start": "1614880",
    "end": "1620480"
  },
  {
    "text": "distribution key uh the distribution key is used by redshift to figure out how to",
    "start": "1620480",
    "end": "1626520"
  },
  {
    "text": "distribute uh the data for the tables across all the different nodes now if you go back to our architecture one of",
    "start": "1626520",
    "end": "1633120"
  },
  {
    "text": "the things I mentioned is we try very hard to uh engage all the nodes and all the operations and keep things going in",
    "start": "1633120",
    "end": "1639960"
  },
  {
    "text": "parallel um so the distribution key has a couple of um key goals one of course",
    "start": "1639960",
    "end": "1645880"
  },
  {
    "text": "is to distribute the data as evenly as possible possible across the nodes and number two is to minimize data movement",
    "start": "1645880",
    "end": "1652720"
  },
  {
    "text": "among the nodes when we are executing a query uh so for example when we have to do joints and Aggregates it's it's much",
    "start": "1652720",
    "end": "1660240"
  },
  {
    "text": "better to have them happen within a node than to shift them across the network because the network uh cost is fairly",
    "start": "1660240",
    "end": "1666640"
  },
  {
    "text": "high so these are the motivations for uh how you would go about picking a good",
    "start": "1666640",
    "end": "1672000"
  },
  {
    "text": "key um so the best practice around this is the first thing you should look at while trying to figure out your",
    "start": "1672000",
    "end": "1678159"
  },
  {
    "text": "distribution keys look at your uh join uh join classes and figure out what you",
    "start": "1678159",
    "end": "1683480"
  },
  {
    "text": "typically join on um and sometimes you have multiple joins for the same table",
    "start": "1683480",
    "end": "1689080"
  },
  {
    "text": "and then um a good choice would likely be the foreign key of the largest Dimension that you're joining with as a",
    "start": "1689080",
    "end": "1694919"
  },
  {
    "text": "distribution key again the reason that is um that you don't want that to be shipped",
    "start": "1694919",
    "end": "1700399"
  },
  {
    "text": "around now if you're not very heavy on joints but you do have aggregations and group by the next thing you can look at",
    "start": "1700399",
    "end": "1707159"
  },
  {
    "text": "is to look at your group Group by CLA and uh figure out uh and that could be a good column to go after as a",
    "start": "1707159",
    "end": "1713200"
  },
  {
    "text": "distribution key because you can do the operation within the node the aggregation or whatever function you",
    "start": "1713200",
    "end": "1719120"
  },
  {
    "text": "have in place and things to avoid here would be um equality filters or distribution keys",
    "start": "1719120",
    "end": "1726320"
  },
  {
    "text": "because what that will do is when the query comes in you're going to have one node that that fits that criteria and",
    "start": "1726320",
    "end": "1733360"
  },
  {
    "text": "all of that um and you get no benefit from the parallel um from having all",
    "start": "1733360",
    "end": "1738960"
  },
  {
    "text": "these nodes available to you and parallelizing their operation so that would not be a great choice and the",
    "start": "1738960",
    "end": "1745200"
  },
  {
    "text": "other thing is sometimes it's not very obvious even after looking at all of this it's not very obvious what a good",
    "start": "1745200",
    "end": "1750360"
  },
  {
    "text": "distribution key should be uh or maybe you have denormalized tables and you're not doing a lot of Aggregates in that",
    "start": "1750360",
    "end": "1756960"
  },
  {
    "text": "case it's best to uh not specify one because red shift has a default uh distribution scheme where it just uses a",
    "start": "1756960",
    "end": "1764240"
  },
  {
    "text": "round drop in way of Distributing all the data across all the nodes so that's also available to",
    "start": "1764240",
    "end": "1771600"
  },
  {
    "text": "you uh so in this slide you see a sample query that you can run so as you",
    "start": "1772159",
    "end": "1778159"
  },
  {
    "text": "experiment with different Keys one of the things that you want to keep your eye on is uh is this cue of the data",
    "start": "1778159",
    "end": "1784360"
  },
  {
    "text": "this is a query that you can run that goes against the view svv dis usage uh",
    "start": "1784360",
    "end": "1790320"
  },
  {
    "text": "that gives you the distribution of the of the data across all the slices so in this particular example you",
    "start": "1790320",
    "end": "1798360"
  },
  {
    "text": "see that it's fairly well distributed uh you have about the same number of uh uh",
    "start": "1798360",
    "end": "1804039"
  },
  {
    "text": "values across every every slid and this is this is uh highly",
    "start": "1804039",
    "end": "1810080"
  },
  {
    "text": "desirable and here I have an example this is an oversimplified example just to drive home the point of how do you go",
    "start": "1811840",
    "end": "1818559"
  },
  {
    "text": "about looking at your queries um so in this case we have we trying to figure out um the total produce sold in the",
    "start": "1818559",
    "end": "1826399"
  },
  {
    "text": "state of Washington for January and uh the first thing we want to do for",
    "start": "1826399",
    "end": "1832240"
  },
  {
    "text": "a distribution key is to look at the join um the join conditions and over here we have category table being joined",
    "start": "1832240",
    "end": "1839320"
  },
  {
    "text": "with the sales table based on product ID so I like the product ID to be collocated so I picked that for the uh",
    "start": "1839320",
    "end": "1846720"
  },
  {
    "text": "category table um and on the next step we have the franchise table that has um",
    "start": "1846720",
    "end": "1855039"
  },
  {
    "text": "that is joined on the franchise ID so pick that for the distrib key for that and for the sales table I have a choice",
    "start": "1855039",
    "end": "1861120"
  },
  {
    "text": "I could go with product or product ID or franchise ID uh in this case I chose to",
    "start": "1861120",
    "end": "1866320"
  },
  {
    "text": "go with the product ID because product is the largest larger of the two tables and so I want that to be collocated more",
    "start": "1866320",
    "end": "1872240"
  },
  {
    "text": "so than the franchise and finally in the bottom we have U we have a filtering Clause based",
    "start": "1872240",
    "end": "1878600"
  },
  {
    "text": "on the date uh and therefore I'm going to go with that as my sort key uh so",
    "start": "1878600",
    "end": "1884039"
  },
  {
    "text": "fairly simplistic view I know the real life examples are far more complex but at least gets you started on what to",
    "start": "1884039",
    "end": "1890639"
  },
  {
    "text": "look for all right so other uh other things",
    "start": "1890639",
    "end": "1896919"
  },
  {
    "text": "that impact qu performance so so s key distribution key will have an impact on performance the other things um that",
    "start": "1896919",
    "end": "1904480"
  },
  {
    "text": "that we've seen come into play is that uh so the first thing is about encoding so one behavior that we've seen is a lot",
    "start": "1904480",
    "end": "1911519"
  },
  {
    "text": "of customers tend to use the character data type for encoding date and time stamps uh we would strongly encourage",
    "start": "1911519",
    "end": "1918960"
  },
  {
    "text": "you to use the time stamp data type because it's far more efficient uh from a uh processing perspective to use this",
    "start": "1918960",
    "end": "1926679"
  },
  {
    "text": "rather than character so so please uh please change that as possible um and",
    "start": "1926679",
    "end": "1932120"
  },
  {
    "text": "the other one is about constraints so I did mention earlier that we don't enforce primary key constraints uh in",
    "start": "1932120",
    "end": "1937840"
  },
  {
    "text": "fact we don't enforce primary key foreign Kee or uniqueness constraints however we would like you to specify",
    "start": "1937840",
    "end": "1944639"
  },
  {
    "text": "this uh in your definition because uh the optimizer still uses it as hints",
    "start": "1944639",
    "end": "1950679"
  },
  {
    "text": "to generate the query plan so so do specify them uh of course the thing to remember here is that your loading",
    "start": "1950679",
    "end": "1957159"
  },
  {
    "text": "procedures and applications just need to be aware that um these are not enforced so that they can compensate for",
    "start": "1957159",
    "end": "1963480"
  },
  {
    "text": "it uh the next point is about specifying redundant predicates on the S column um",
    "start": "1963480",
    "end": "1970840"
  },
  {
    "text": "this is not a great example but essentially the point I'm trying to make here is that sometimes you have queries",
    "start": "1970840",
    "end": "1977559"
  },
  {
    "text": "where you're joining uh certain tables and filtering and there is an implication that uh there are some",
    "start": "1977559",
    "end": "1984159"
  },
  {
    "text": "redundant filters in play there uh we will not be able to pick it up and the suggestion here really is just to say",
    "start": "1984159",
    "end": "1990799"
  },
  {
    "text": "that if there are implied filter filtering criteria that you see for your queries just go ahead and explicitly",
    "start": "1990799",
    "end": "1996720"
  },
  {
    "text": "specify them as part of your query uh because that can speed things up because we don't have to read through a lot of",
    "start": "1996720",
    "end": "2002600"
  },
  {
    "text": "the io blocks so that's on that point and the last point about about uh Performance",
    "start": "2002600",
    "end": "2009399"
  },
  {
    "text": "Tuning is about uh the workload manager settings so let's uh let's look at the",
    "start": "2009399",
    "end": "2014519"
  },
  {
    "text": "workload manager so so the workload manager well",
    "start": "2014519",
    "end": "2020440"
  },
  {
    "text": "we have one and it essentially allows you to manage and adust uh your query",
    "start": "2020440",
    "end": "2026240"
  },
  {
    "text": "concurrency um so so the workload manager essentially lets you dial up the",
    "start": "2026240",
    "end": "2032080"
  },
  {
    "text": "number of queries that can concurrently be running in your RF cluster uh up to a",
    "start": "2032080",
    "end": "2037480"
  },
  {
    "text": "Max maximum value of 15 uh the default settings I think is set to uh five",
    "start": "2037480",
    "end": "2043000"
  },
  {
    "text": "concurrent queries you can set it up to 15 essentially what happens is all the available resources get divided into as",
    "start": "2043000",
    "end": "2050560"
  },
  {
    "text": "many as um uh into as many number as the number of concurrent queries you want running um and it gets divided equally",
    "start": "2050560",
    "end": "2057839"
  },
  {
    "text": "among all of these all of these groups uh our wlm also allows you to Define",
    "start": "2057839",
    "end": "2063398"
  },
  {
    "text": "user groups and query groups essentially with user groups uh we we identify queries coming from certain users to",
    "start": "2063399",
    "end": "2070118"
  },
  {
    "text": "belong to particular user groups and cue them accordingly um and with query groups you can actually label queries uh",
    "start": "2070119",
    "end": "2077480"
  },
  {
    "text": "and give them labels that uh that point them to a particular query group and directs it to the appropriate uh wmq",
    "start": "2077480",
    "end": "2084520"
  },
  {
    "text": "when it comes in very often the the practical application for having uh uh setting up",
    "start": "2084520",
    "end": "2091760"
  },
  {
    "text": "wlms is to segregate short running and long running queries so you probably",
    "start": "2091760",
    "end": "2097320"
  },
  {
    "text": "have some really large reporting queries that take a long time to run and then",
    "start": "2097320",
    "end": "2102680"
  },
  {
    "text": "some ad hoc queries that are fairly fast uh to process and you don't want to have",
    "start": "2102680",
    "end": "2107720"
  },
  {
    "text": "your uh tiny queries get starved because the other one is just taking way too long so you you'll probably want to set",
    "start": "2107720",
    "end": "2114240"
  },
  {
    "text": "up different cues for these based on their expected execution times so that um you can keep overall throughput at a",
    "start": "2114240",
    "end": "2121480"
  },
  {
    "text": "fairly high level the other way you can use wlm is to help improve performance of indiv",
    "start": "2121480",
    "end": "2127680"
  },
  {
    "text": "idual queries and this is something we touched on with the copy command is you can set this to a low value just so you",
    "start": "2127680",
    "end": "2133640"
  },
  {
    "text": "give uh certain queries uh more resources to complete quickly and uh and",
    "start": "2133640",
    "end": "2138680"
  },
  {
    "text": "get its job done and you may want to do that for uh copy and vacuum and commands like",
    "start": "2138680",
    "end": "2143800"
  },
  {
    "text": "that uh one thing to be aware of um is a lot of the other old TP systems allow a",
    "start": "2143800",
    "end": "2150800"
  },
  {
    "text": "high degree of concurrency uh the architecture for red shrift is really geared towards uh",
    "start": "2150800",
    "end": "2156960"
  },
  {
    "text": "processing large queries with a lot of data in a very short amount of time uh",
    "start": "2156960",
    "end": "2163400"
  },
  {
    "text": "so as you try to adjust these parameters and figure out what is the right values for your system it's also important to",
    "start": "2163400",
    "end": "2169680"
  },
  {
    "text": "keep in mind that you measure the overall throughput of your system and not just um not just the concurrency",
    "start": "2169680",
    "end": "2175720"
  },
  {
    "text": "because um the cluster can process big queries very quickly and U sometimes it",
    "start": "2175720",
    "end": "2181400"
  },
  {
    "text": "might be better to have a lower concurrency setting just so these queries get get through uh then and",
    "start": "2181400",
    "end": "2187760"
  },
  {
    "text": "trying to Max it out so I would say as you make your measurements just keep an eye out for the overall throughput as",
    "start": "2187760",
    "end": "2195520"
  },
  {
    "text": "well um and so we have seen examples where the overall throughput in fact increases when you reduce a concurrency",
    "start": "2195560",
    "end": "2202599"
  },
  {
    "text": "so something to keep in mind all",
    "start": "2202599",
    "end": "2208200"
  },
  {
    "text": "right and here is an here is a screenshot from our Management console that has the wlm uh settings it's fairly",
    "start": "2209000",
    "end": "2216680"
  },
  {
    "text": "simple you just have to set the concurrency and you can go up to 8 Q's total however the concurrency says at 15",
    "start": "2216680",
    "end": "2223200"
  },
  {
    "text": "so all of that has to add up to 15 your default is 1 Q with five concurrent",
    "start": "2223200",
    "end": "2229079"
  },
  {
    "text": "queries and uh beyond the 15 we actually have some slots available to us so that",
    "start": "2229079",
    "end": "2234880"
  },
  {
    "text": "uh we can manage your cluster so you can set up user groups or query groups and",
    "start": "2234880",
    "end": "2240280"
  },
  {
    "text": "um and things will get queued up and routed accordingly as they come in",
    "start": "2240280",
    "end": "2246920"
  },
  {
    "text": "so that pretty much uh uh completes all the best practices that we wanted to",
    "start": "2247800",
    "end": "2253079"
  },
  {
    "text": "cover in this session because we wanted uh quite some time for the Q&A portion the key",
    "start": "2253079",
    "end": "2259040"
  },
  {
    "text": "takeaways uh for uh for this would be to avoid if possible large number of Singleton inserts updates or delete",
    "start": "2259040",
    "end": "2265960"
  },
  {
    "text": "statements they don't do very well um use try to use the copy command for",
    "start": "2265960",
    "end": "2271160"
  },
  {
    "text": "uploading large data sets use gzip and uh split up your copy the the files for",
    "start": "2271160",
    "end": "2276359"
  },
  {
    "text": "the copy command uh use choose your Sal and distribution keys with care and likely this is going",
    "start": "2276359",
    "end": "2282280"
  },
  {
    "text": "to need some amount of experimentation in with different settings to to get the",
    "start": "2282280",
    "end": "2287359"
  },
  {
    "text": "right balance uh and yes please encode your time timestamp data using the time",
    "start": "2287359",
    "end": "2293319"
  },
  {
    "text": "stamp data type that that will have an impact on performance and finally we have a",
    "start": "2293319",
    "end": "2298720"
  },
  {
    "text": "workload manager leverage it if it makes sense and again that will also probably",
    "start": "2298720",
    "end": "2303800"
  },
  {
    "text": "entail some amount of uh experimentation with what what really works for",
    "start": "2303800",
    "end": "2310520"
  },
  {
    "text": "you thank you I think uh we'll go to the Q&A portion of this yeah thank you viia",
    "start": "2311040",
    "end": "2317000"
  },
  {
    "text": "um so just just a quick slide here with more information um we don't really expect you to remember the long URL um",
    "start": "2317000",
    "end": "2323200"
  },
  {
    "text": "but you can just go to at the the AWS homepage documentation redshift uh you",
    "start": "2323200",
    "end": "2330240"
  },
  {
    "text": "can find all the documentation there that the developer guide is in particular the most popular by a long",
    "start": "2330240",
    "end": "2335760"
  },
  {
    "text": "way and both of these links point to that guide so uh please visit there um",
    "start": "2335760",
    "end": "2341760"
  },
  {
    "text": "so we're going to uh just pop up a quick survey so you can give us some feedback and now we're going to launch to",
    "start": "2341760",
    "end": "2347640"
  },
  {
    "text": "questions and we've got other members of the development team here as well so uh let me just uh please if you have a",
    "start": "2347640",
    "end": "2354520"
  },
  {
    "text": "question just refer to it just go to the Q&A tab down the bottom of your screen and um and type in your question we do",
    "start": "2354520",
    "end": "2361440"
  },
  {
    "text": "have a lot of these and we we'll get through them as fast as we can um those that we don't by the way these questions",
    "start": "2361440",
    "end": "2366800"
  },
  {
    "text": "are great this feedback or or questions in general even if we don't get to them what we like to do is take the this sort",
    "start": "2366800",
    "end": "2374000"
  },
  {
    "text": "of information and populate our FAQ so please visit the FAQ it is we do update",
    "start": "2374000",
    "end": "2379520"
  },
  {
    "text": "it regularly um these sort of sessions are great feedback for that for that so let me let me call out the first",
    "start": "2379520",
    "end": "2386319"
  },
  {
    "text": "question um is it possible to change the distribution key on a table that already exists and is populated with",
    "start": "2386319",
    "end": "2393200"
  },
  {
    "text": "data no uh you would have to create a new table with the new distribution key",
    "start": "2393200",
    "end": "2398359"
  },
  {
    "text": "do insert a select and then you can rename the tables back and forth uh to achieve your",
    "start": "2398359",
    "end": "2405240"
  },
  {
    "text": "result great thanks for that is it possible to Define to Define several",
    "start": "2405240",
    "end": "2410800"
  },
  {
    "text": "single sort keys for different fields versus one sort key I'm sorry the questions just",
    "start": "2410800",
    "end": "2417599"
  },
  {
    "text": "disappeared on me versus one sword key including more",
    "start": "2417599",
    "end": "2423440"
  },
  {
    "text": "than one field no red feet only only supports uh one single sort which can be",
    "start": "2423440",
    "end": "2430119"
  },
  {
    "text": "a compound key or a single key we don't have the concept of of secondary indexes",
    "start": "2430119",
    "end": "2435520"
  },
  {
    "text": "or projections or anything like that",
    "start": "2435520",
    "end": "2441800"
  },
  {
    "text": "great sorry the questions are jumping around on me I'm using single node cluster and",
    "start": "2443040",
    "end": "2449520"
  },
  {
    "text": "query performance of my queries sometimes is better on the largest sets of data",
    "start": "2449520",
    "end": "2456520"
  },
  {
    "text": "sorry let me let me try to highlight that um there is no concurrency at the moment could you explain um so the",
    "start": "2458280",
    "end": "2464560"
  },
  {
    "text": "largest sets of data table structures com compression and keys are the same there is no",
    "start": "2464560",
    "end": "2470920"
  },
  {
    "text": "concurrency I I don't think it's immediately obvious um but you know please please uh we we do like to hear",
    "start": "2471040",
    "end": "2477040"
  },
  {
    "text": "directly about these ones if if you do have something that's you're not quite sure of the purpose of these sort of uh",
    "start": "2477040",
    "end": "2482160"
  },
  {
    "text": "best practices is also to help answer a lot of the questions that we've got through the forums and ly to our uh",
    "start": "2482160",
    "end": "2488480"
  },
  {
    "text": "support teams um but if there's something that we haven't covered um feel free to U provide specific detail",
    "start": "2488480",
    "end": "2494680"
  },
  {
    "text": "and we'll we'll get the team to get back to you on that yeah on that one we would have to uh dig in further to look at your tables and see what's going",
    "start": "2494680",
    "end": "2501839"
  },
  {
    "text": "on can you comment on the performance of joints on large table versus using a",
    "start": "2501839",
    "end": "2507240"
  },
  {
    "text": "single denormalized table how does that compare uh well a single doraliz table",
    "start": "2507240",
    "end": "2513280"
  },
  {
    "text": "will have advantage that you don't have a chance to to have a known collocated",
    "start": "2513280",
    "end": "2518480"
  },
  {
    "text": "joint uh and because it's a column on our database you only going to select the columns you need um the problem with",
    "start": "2518480",
    "end": "2525839"
  },
  {
    "text": "that approach is that you force yourself into a a single uh view of your data",
    "start": "2525839",
    "end": "2531319"
  },
  {
    "text": "with a particular predefined joint of your denaly data so if that is acceptable for your project it it is a",
    "start": "2531319",
    "end": "2538440"
  },
  {
    "text": "way to speed up your queries and normally the best the best performance we see on customers is they do a",
    "start": "2538440",
    "end": "2544480"
  },
  {
    "text": "selective denormalization of some columns that join together together that they cannot distribute with the same key",
    "start": "2544480",
    "end": "2550839"
  },
  {
    "text": "uh and that that hybrid approach usually is more helpful because it becomes more flexible over time as you you your",
    "start": "2550839",
    "end": "2557640"
  },
  {
    "text": "business grow or your your your questions from your data changes thank you so here's a question",
    "start": "2557640",
    "end": "2564319"
  },
  {
    "text": "about the workload manager if the if the settings have not been changed and or",
    "start": "2564319",
    "end": "2570000"
  },
  {
    "text": "and the customers only running one query at a time do they get all the all access to all the resources or do they have to",
    "start": "2570000",
    "end": "2576680"
  },
  {
    "text": "change the WM to improve that uh well the CPU power yes it's used every quer",
    "start": "2576680",
    "end": "2582839"
  },
  {
    "text": "tries to use as much as uh availability of the resources available except for memory so one thing you're leaving on",
    "start": "2582839",
    "end": "2589280"
  },
  {
    "text": "the table right now is is the amount of memory I is giv to a which can make",
    "start": "2589280",
    "end": "2594400"
  },
  {
    "text": "different uh significant difference on performance um instead of set your concurrency to one because that would",
    "start": "2594400",
    "end": "2600720"
  },
  {
    "text": "cause you to not be able to run outside the care to check the status of your careage and this kind of stuff uh since",
    "start": "2600720",
    "end": "2606920"
  },
  {
    "text": "the before concurrences five for your particular large queries you should set this this this slot count to a number",
    "start": "2606920",
    "end": "2613520"
  },
  {
    "text": "like three or four and then you use more memory four times memory than usual and you still leave one thread available so",
    "start": "2613520",
    "end": "2620520"
  },
  {
    "text": "you can go log in and see status of your queries or status of your loads and things like that great is it possible to load files",
    "start": "2620520",
    "end": "2628760"
  },
  {
    "text": "directly without going through S3 um so so yeah you could you could",
    "start": "2628760",
    "end": "2634160"
  },
  {
    "text": "come in through Dynamo DB that's that all we copy directly from Dynamo DB",
    "start": "2634160",
    "end": "2639440"
  },
  {
    "text": "tables load to all the nodes then the two ways would currently we support would be Dynamo DB and ns3 yes I think",
    "start": "2639440",
    "end": "2646559"
  },
  {
    "text": "the distinction there is on Parallel load um you can you can of course uh move data into red shift using the SQL",
    "start": "2646559",
    "end": "2652839"
  },
  {
    "text": "Gateway but that will be serial and that's why we ask that you do multi uh multi row inserts if if you do that",
    "start": "2652839",
    "end": "2659040"
  },
  {
    "text": "approach um so that's okay for small sets of data for large sets it's it's better to push them into files on S3 and",
    "start": "2659040",
    "end": "2665359"
  },
  {
    "text": "copy them in so do you have any best practices for moving data from Dynamo DB to Red shift um I might take that",
    "start": "2665359",
    "end": "2673119"
  },
  {
    "text": "one so so copy from Dynamo DB is direct um as it is from S3 um it is it is table",
    "start": "2673119",
    "end": "2680400"
  },
  {
    "text": "level at this stage um so really it really depends on the type of data you've got in Dynamo DB if it's time",
    "start": "2680400",
    "end": "2686800"
  },
  {
    "text": "series for instance you may want to structure your Dynamo DB storage so that you have uh what we call kind of rolling",
    "start": "2686800",
    "end": "2692720"
  },
  {
    "text": "tables where you have a new table for each period And as the data ages um you",
    "start": "2692720",
    "end": "2698200"
  },
  {
    "text": "uh that the throughput allocated against that data can be reduced uh like the right especially the right throughput",
    "start": "2698200",
    "end": "2704520"
  },
  {
    "text": "and that's then available for kind of read and and ingestion into redshift this is a this is a popular use case",
    "start": "2704520",
    "end": "2710880"
  },
  {
    "text": "scenario where red shift is used not only as the analytic store but as the place to Archive Dynamo um data it's",
    "start": "2710880",
    "end": "2717800"
  },
  {
    "text": "also much more much lower cost to drop a dynamoe DB table than to delete all the objects as it is in any database so that",
    "start": "2717800",
    "end": "2725400"
  },
  {
    "text": "most of the best practice tends to be on that side of it we are um moving towards",
    "start": "2725400",
    "end": "2731240"
  },
  {
    "text": "more formal documentation and workshop sessions to um to cover these sort of aspects in more detail thank you for",
    "start": "2731240",
    "end": "2737480"
  },
  {
    "text": "your question um in a typical data warehouse scenario",
    "start": "2737480",
    "end": "2743760"
  },
  {
    "text": "we need to migrate update data from operational databases to redshift nightly however updates and inserts are",
    "start": "2743760",
    "end": "2750599"
  },
  {
    "text": "slow and we would prefer to only migrate the Delta what's the best practice here",
    "start": "2750599",
    "end": "2758160"
  },
  {
    "text": "um so what you could do is to have on the red shift side two tables one for",
    "start": "2758800",
    "end": "2765960"
  },
  {
    "text": "the long-term data like let's say for example 15 days old old and older then a",
    "start": "2765960",
    "end": "2772760"
  },
  {
    "text": "more recent table and those being a smaller table when you load nightly and you do your your vacuum and your and",
    "start": "2772760",
    "end": "2779240"
  },
  {
    "text": "your analyze your queries will go against both tables or if your application can can be configured to",
    "start": "2779240",
    "end": "2785079"
  },
  {
    "text": "know if I'm looking for short-term or long-term queries and over time you can migrate the data to the the re Chief",
    "start": "2785079",
    "end": "2790839"
  },
  {
    "text": "because appending to the end of the table assuming your sword key is by time uh it will always be less expensive and",
    "start": "2790839",
    "end": "2798520"
  },
  {
    "text": "easier to maintain than any other way uh so the likelihood of of updates",
    "start": "2798520",
    "end": "2803839"
  },
  {
    "text": "happening on a data older than x would will decrease over time depending of your business like for normal uh web",
    "start": "2803839",
    "end": "2811000"
  },
  {
    "text": "thing web applications will be like about 15 days or 30 days no more than that thank you so is red shift",
    "start": "2811000",
    "end": "2818559"
  },
  {
    "text": "distribution aware does it support collocated joins yes yes absolutely and",
    "start": "2818559",
    "end": "2824680"
  },
  {
    "text": "that's the point of the distribution case is to ensure that you have as many collocated joints as possible for your",
    "start": "2824680",
    "end": "2831520"
  },
  {
    "text": "uh complex query can you please talk more about red",
    "start": "2831520",
    "end": "2838520"
  },
  {
    "text": "shift's implementation of zone maps we may have covered that after that question was asked but do you want to just quickly talk about the skipping we",
    "start": "2838520",
    "end": "2846559"
  },
  {
    "text": "we talk about it as if it's a zone map just because it's a concept that's familiar to everybody essentially at the",
    "start": "2846559",
    "end": "2852680"
  },
  {
    "text": "node level we store when you sort the key sort sort one of the columns uh we",
    "start": "2852680",
    "end": "2858880"
  },
  {
    "text": "we track the Min and Max values that is stored and we track where it is stored that way when a query comes in and",
    "start": "2858880",
    "end": "2865200"
  },
  {
    "text": "you're filtering on that particular column A we is able to skip over all the stuff not relevant for that query so uh",
    "start": "2865200",
    "end": "2872559"
  },
  {
    "text": "pretty pretty simple uh implementation yeah definitely use your sort case um as much as you can um so question",
    "start": "2872559",
    "end": "2879920"
  },
  {
    "text": "about standard ETL tools such as Talent Informatica or data stage to load the data um yeah so quick quick comment on",
    "start": "2879920",
    "end": "2886880"
  },
  {
    "text": "that uh we we've already announced many uh well several Partners on the ETL and many on the bi side um so on the ETL",
    "start": "2886880",
    "end": "2894599"
  },
  {
    "text": "side both Informatica and Talon have uh actually formally certified their integration with red shift um data stage",
    "start": "2894599",
    "end": "2901880"
  },
  {
    "text": "hasn't yet but all of these are in process uh I think the important point is",
    "start": "2901880",
    "end": "2907359"
  },
  {
    "text": "um you know the red shift is kind of decoupled from the ingestion phase and that you know you you have that SQL",
    "start": "2907359",
    "end": "2914119"
  },
  {
    "text": "Gateway uh but also you have S3 as and that's the preferred way to do even incremental ingestion um because it's",
    "start": "2914119",
    "end": "2921000"
  },
  {
    "text": "just way more efficient um so in general these tools all support that that",
    "start": "2921000",
    "end": "2926200"
  },
  {
    "text": "architecture in that they can output to Del limited files and make that work so",
    "start": "2926200",
    "end": "2931520"
  },
  {
    "text": "um yes if if you need a specific technology that's not mentioned on our web page and we do have a list of those",
    "start": "2931520",
    "end": "2937480"
  },
  {
    "text": "that are certified if it's not there please get in touch with us and and we can work with you so the answer is yes",
    "start": "2937480",
    "end": "2943040"
  },
  {
    "text": "it will probably work you 9 times 99 times out of 100 these work because we've got very standard interfaces",
    "start": "2943040",
    "end": "2949119"
  },
  {
    "text": "certification is a different process where the the vendor who provides the technology needs to walk through a series of certification steps so we're",
    "start": "2949119",
    "end": "2955960"
  },
  {
    "text": "working with them all on that",
    "start": "2955960",
    "end": "2961680"
  },
  {
    "text": "um sorry we had a few people with a couple of problems problems uh is a slice equal to a",
    "start": "2963960",
    "end": "2970680"
  },
  {
    "text": "node so a slice is um you know a node is comprised of several slices and a node",
    "start": "2970680",
    "end": "2977280"
  },
  {
    "text": "can have multiple cores the difference between a node and a slice is a slice is specific to a single core so it has a",
    "start": "2977280",
    "end": "2984119"
  },
  {
    "text": "core and then it has a memory and dis so you can think of as a think think of a",
    "start": "2984119",
    "end": "2989359"
  },
  {
    "text": "slice as a smaller granularity and several of these make up the node great",
    "start": "2989359",
    "end": "2995319"
  },
  {
    "text": "yes and actually the top of the document ation there's a pretty good discussion on architecture there and the notion of",
    "start": "2995319",
    "end": "3000480"
  },
  {
    "text": "a slice is is fairly well explained so we do encourage you to to look at that for more detail another question is it",
    "start": "3000480",
    "end": "3007000"
  },
  {
    "text": "recommended to specify an aggregation column as a distribution key if the data is not evenly distributed distributed",
    "start": "3007000",
    "end": "3013400"
  },
  {
    "text": "across the values in that column no not really not really because",
    "start": "3013400",
    "end": "3018440"
  },
  {
    "text": "you incur the risk of of having that being the fact make your table not be",
    "start": "3018440",
    "end": "3024599"
  },
  {
    "text": "distributed uh in know the same amount of rows on each node so in general with distribution",
    "start": "3024599",
    "end": "3031000"
  },
  {
    "text": "Keys you're going to have some tension between all the different uh things that we talked about so with keeping the data",
    "start": "3031000",
    "end": "3037400"
  },
  {
    "text": "even keeping the joints collocated and having aggregations collocated so um it",
    "start": "3037400",
    "end": "3043720"
  },
  {
    "text": "it's almost in that order you want even distribution you want to focus on the joints and then look at the aggregation",
    "start": "3043720",
    "end": "3049319"
  },
  {
    "text": "right just to add some more color there the reason you want the even distribution is you want to balance out",
    "start": "3049319",
    "end": "3054559"
  },
  {
    "text": "the processing across all your all your notes so if one node is doing more of the work",
    "start": "3054559",
    "end": "3059720"
  },
  {
    "text": "it becomes the bottleneck for for the overall query great thank you um so we did have",
    "start": "3059720",
    "end": "3065920"
  },
  {
    "text": "a question about data Pipeline and and um W didn't we mention it which which is a great Point um",
    "start": "3065920",
    "end": "3072599"
  },
  {
    "text": "so that to that for this this best practice we focus on data ingestion",
    "start": "3072599",
    "end": "3078480"
  },
  {
    "text": "really the direct ingestion from S3 and from we didn't even cover Dynamo DB except to say it's also managed by a",
    "start": "3078480",
    "end": "3084799"
  },
  {
    "text": "similar approach um with data pipeline it facilitates uh more data integration from other sources so data pipeline if",
    "start": "3084799",
    "end": "3092160"
  },
  {
    "text": "you're not aware is a coordination scheduling capability that allows you to um coordinate AWS resources to really",
    "start": "3092160",
    "end": "3098720"
  },
  {
    "text": "minimize cost and um increase but you know through automation by decreasing the amount of effort you're applying to",
    "start": "3098720",
    "end": "3105160"
  },
  {
    "text": "do that as well so that will definitely come up in a um a subsequent webinar that we'll be doing on data integration",
    "start": "3105160",
    "end": "3111559"
  },
  {
    "text": "but great question thank you do you have performance comparison",
    "start": "3111559",
    "end": "3116760"
  },
  {
    "text": "against well in this case SQL Server um the general answer is we don't publish that stuff but we do have plenty of",
    "start": "3116760",
    "end": "3122559"
  },
  {
    "text": "customers who are vocal on that um our general guidance is for a row based data store like SQL server or my SQL or post",
    "start": "3122559",
    "end": "3129319"
  },
  {
    "text": "or Oracle um you will see uh at least a 10x Improvement in performance simply by",
    "start": "3129319",
    "end": "3135319"
  },
  {
    "text": "the nature of columnus storage um gives you that sort of advantage over it for large scan uh queries scan based queries",
    "start": "3135319",
    "end": "3143319"
  },
  {
    "text": "um so yes that's that's something to be expected uh we do we do see a lot higher and our customers are fairly vocal about",
    "start": "3143319",
    "end": "3149480"
  },
  {
    "text": "some of those performance gains as well um is the date type equivalent to",
    "start": "3149480",
    "end": "3156160"
  },
  {
    "text": "time stamp with regard to query performance",
    "start": "3156160",
    "end": "3163839"
  },
  {
    "text": "um not not really the the size of the of the the feud where has storing database",
    "start": "3163839",
    "end": "3169960"
  },
  {
    "text": "is is is different and the granularity is is different so depending if the",
    "start": "3169960",
    "end": "3175160"
  },
  {
    "text": "column is just returned the difference would be minimal if the cre is used for a distribution of data or sort key or",
    "start": "3175160",
    "end": "3181839"
  },
  {
    "text": "distribution key then the difference grows bigger we have to understand which on which position the the column is used",
    "start": "3181839",
    "end": "3189799"
  },
  {
    "text": "and and and and which row that the column makes on during the cery processing to to be a yeah the time",
    "start": "3189799",
    "end": "3196160"
  },
  {
    "text": "stamp will be a higher a higher uh uh granularity uh so it's it's a good sort",
    "start": "3196160",
    "end": "3202079"
  },
  {
    "text": "key if you have one a single sort key if that's part of your problem a regular might not be a very good s key because",
    "start": "3202079",
    "end": "3208280"
  },
  {
    "text": "the the the granity is about a day um so you have to consideration those two",
    "start": "3208280",
    "end": "3214319"
  },
  {
    "text": "things great and so is the 15 query concurrent limit per node or per",
    "start": "3214319",
    "end": "3220040"
  },
  {
    "text": "cluster it's per cluster but isn't that per Q as well it's uh it's across Q's",
    "start": "3220040",
    "end": "3227000"
  },
  {
    "text": "the total across all the q's got it so at a time you can have 15 queries",
    "start": "3227000",
    "end": "3232839"
  },
  {
    "text": "running concurrently within a single cluster great um if doing a star schema do you",
    "start": "3232839",
    "end": "3239920"
  },
  {
    "text": "suggest loading the data into a staging table then doing the rollups into dimensions then insertion into the fact",
    "start": "3239920",
    "end": "3246359"
  },
  {
    "text": "table H well here if if you if you can have",
    "start": "3246359",
    "end": "3252720"
  },
  {
    "text": "your data on S3 already in the shape that you want it to be right uh you you",
    "start": "3252720",
    "end": "3260079"
  },
  {
    "text": "do the you did load straight to your to your St schema tables if you have to do uh your rollups in the data B you can do",
    "start": "3260079",
    "end": "3267000"
  },
  {
    "text": "rollups inside uh red shift from temporary tables which would be very efficient and fast if you match the",
    "start": "3267000",
    "end": "3272359"
  },
  {
    "text": "distribution keys and sort keys of both the rollups and the the original tables",
    "start": "3272359",
    "end": "3277760"
  },
  {
    "text": "uh yeah the it will be a little a fast process of doing that you can even have like a temporary table created to do as",
    "start": "3277760",
    "end": "3283559"
  },
  {
    "text": "a load process to do that as one step so it's not so much dependent upon the whether it's dimensional fact table it's",
    "start": "3283559",
    "end": "3290119"
  },
  {
    "text": "more about how the how much processing the data needs to undergo before so shift is agnostic to the to the fact",
    "start": "3290119",
    "end": "3296799"
  },
  {
    "text": "that these are fact tables and dimension tables okay great are there tools for evaluating performance characteristics",
    "start": "3296799",
    "end": "3303160"
  },
  {
    "text": "and providing suggestions for improvement we have a fair bit of",
    "start": "3303160",
    "end": "3308680"
  },
  {
    "text": "performance uh uh data that we provide as part of the Management console itself",
    "start": "3308680",
    "end": "3314640"
  },
  {
    "text": "uh for individual queries as suppose as I don't know if this is other tools",
    "start": "3314640",
    "end": "3319920"
  },
  {
    "text": "Beyond yeah so I think there there is there are third third party tools um and we'll probably we' probably do something",
    "start": "3319920",
    "end": "3325720"
  },
  {
    "text": "on that Performance Tuning In general um we do have a performance console which is uh great for isolating you know",
    "start": "3325720",
    "end": "3332119"
  },
  {
    "text": "runaway queries and just understanding when a query consumes you know even if it's not consuming too much to",
    "start": "3332119",
    "end": "3338119"
  },
  {
    "text": "understand how much resource the query does consume um so that is that is excellent and there is actually a guide",
    "start": "3338119",
    "end": "3343319"
  },
  {
    "text": "in the book to see if your queries are spilling to dis which is pretty much the most um concern that you should have",
    "start": "3343319",
    "end": "3350160"
  },
  {
    "text": "about a query CU that could be a query problem or it could be a configuration problem um and so if that's occurring",
    "start": "3350160",
    "end": "3356119"
  },
  {
    "text": "then yes you'll definitely have ways of um and guide to improving the performance of those those queries that",
    "start": "3356119",
    "end": "3362400"
  },
  {
    "text": "do and you'll certainly be able to monitor it and and understand where it's where it's going wrong um so we got a couple more time",
    "start": "3362400",
    "end": "3370119"
  },
  {
    "text": "for one or two more do create table as select operations automatically compress",
    "start": "3370119",
    "end": "3376640"
  },
  {
    "text": "columns like copy operations do no it does not no it does not the",
    "start": "3376640",
    "end": "3382920"
  },
  {
    "text": "best way of doing that is for you to uh either pre-create the table uh and and",
    "start": "3382920",
    "end": "3390200"
  },
  {
    "text": "load it after you already defined the compression or load the whole table and analyze compression on the table and you",
    "start": "3390200",
    "end": "3396079"
  },
  {
    "text": "give you the most optimal compression for the table and then recreate the table with the new parameters and the create a select give the same",
    "start": "3396079",
    "end": "3401960"
  },
  {
    "text": "distribution key and the same sort key is very very fast for very large tables got it so can I use the copy command on",
    "start": "3401960",
    "end": "3409200"
  },
  {
    "text": "multiart gzip files also going by the 2 gig file file size best practice",
    "start": "3409200",
    "end": "3414520"
  },
  {
    "text": "guideline is the is is it the raw data file that has to be 2 gig or the compressed Gip file that has to be 2 gig",
    "start": "3414520",
    "end": "3421720"
  },
  {
    "text": "it is the compressed it is it is a best practice related to how S3 works on files uh every file bigger than 2 gig on",
    "start": "3421720",
    "end": "3428880"
  },
  {
    "text": "S3 will have to be break apart to be uploaded or downloaded so it's based on the compressed uh file and you don't you",
    "start": "3428880",
    "end": "3436160"
  },
  {
    "text": "cannot uh copy from a muchart gz files unless the breakage it happens exactly",
    "start": "3436160",
    "end": "3442200"
  },
  {
    "text": "on on a line limit which which won't happen on a gz file",
    "start": "3442200",
    "end": "3447599"
  },
  {
    "text": "great and and on the 2 gig is that actually a limit or it's just a recommended just a recommended yeah so you can you can put bigger but you will",
    "start": "3447599",
    "end": "3453680"
  },
  {
    "text": "get inefficiencies um so 2 gig second is kind of the the optimal rate there for coming data coming out of",
    "start": "3453680",
    "end": "3460920"
  },
  {
    "text": "S3 um what is the recommended approach for loading small numbers of Records",
    "start": "3460920",
    "end": "3466839"
  },
  {
    "text": "under 10,000 accumulate over time and then load at once uh well there there's a",
    "start": "3466839",
    "end": "3474880"
  },
  {
    "text": "kind of a set called to do to load to make a load statement so sometimes I load with 10,000 rows or 100,000 rows",
    "start": "3474880",
    "end": "3481839"
  },
  {
    "text": "will take the same time so with that in mind you have to to choose your latency",
    "start": "3481839",
    "end": "3487559"
  },
  {
    "text": "for the data to be loaded and how time how much time you spend loading the data based off of that right uh uh the the",
    "start": "3487559",
    "end": "3494839"
  },
  {
    "text": "more you B together the loads the more efficient you'll be but then you incude more latency on the data being available",
    "start": "3494839",
    "end": "3500200"
  },
  {
    "text": "on your red shift cluster so it's something you going have to decide in business related and er efficiency you",
    "start": "3500200",
    "end": "3506280"
  },
  {
    "text": "want to want to have on your system great",
    "start": "3506280",
    "end": "3511799"
  },
  {
    "text": "um I don't think we answered that U you mentioned parallel loading",
    "start": "3511799",
    "end": "3518799"
  },
  {
    "text": "during the copy command is there anything that I need to specify or is parallel method invoked automatically",
    "start": "3518799",
    "end": "3525559"
  },
  {
    "text": "the the parallel happens automatically uh the only the only thing that will prevent the load happening parallel if",
    "start": "3525559",
    "end": "3531440"
  },
  {
    "text": "you have a single file to load on S3 you would have uh a a a a good number of",
    "start": "3531440",
    "end": "3537160"
  },
  {
    "text": "files from S3 and then we spread the files per slice to be loaded over time",
    "start": "3537160",
    "end": "3542359"
  },
  {
    "text": "great a quick question do we do tpch benchmarking testing on red shift I mean",
    "start": "3542359",
    "end": "3547960"
  },
  {
    "text": "the answer is absolutely yes we do we publish that no um and the reason is because you know there's a couple of",
    "start": "3547960",
    "end": "3553960"
  },
  {
    "text": "things and I talked about the agility of red shift as well as the cost um with the agility it it allows you to test red",
    "start": "3553960",
    "end": "3560760"
  },
  {
    "text": "shift on your own data set which is way more meaningful than a a third party Benchmark um so often these marks are",
    "start": "3560760",
    "end": "3566520"
  },
  {
    "text": "relied upon uh as a preep to bringing your own data in to make sure that it's",
    "start": "3566520",
    "end": "3572760"
  },
  {
    "text": "at least in the ballpark of performance for you to undertake the cost and effort to even run a proof of concept against",
    "start": "3572760",
    "end": "3579119"
  },
  {
    "text": "your own data set with red shift that's different uh for 85 cents an hour you can spin up a cluster it'll take a few",
    "start": "3579119",
    "end": "3584960"
  },
  {
    "text": "minutes and then apply the best practices for ingestion bring in the data you need and then start quering and",
    "start": "3584960",
    "end": "3590960"
  },
  {
    "text": "and running it and of course you know play with the distribution Keys play with the sort keys and and optimize",
    "start": "3590960",
    "end": "3596240"
  },
  {
    "text": "based on those those data sets that's absolutely the best way to do a proof of concept and the most meaningful statistic you'll get for performance is",
    "start": "3596240",
    "end": "3603000"
  },
  {
    "text": "your own data so thanks for the question I think we have time for a",
    "start": "3603000",
    "end": "3608720"
  },
  {
    "text": "couple more one or two we're actually over let's take one",
    "start": "3608720",
    "end": "3614440"
  },
  {
    "text": "more console",
    "start": "3614440",
    "end": "3617920"
  },
  {
    "text": "stuck what's the best way to get data from RS into red",
    "start": "3623480",
    "end": "3628880"
  },
  {
    "text": "shift well RDS can mean three different databases so",
    "start": "3629160",
    "end": "3635640"
  },
  {
    "text": "uh the the right now we don't have a very good satisfying uh answer to that",
    "start": "3636039",
    "end": "3642920"
  },
  {
    "text": "uh we've seen customers uh write applications that would uh read data",
    "start": "3642920",
    "end": "3648400"
  },
  {
    "text": "from whatever the RS at the base and pipeline uh into red shift I've seen",
    "start": "3648400",
    "end": "3653799"
  },
  {
    "text": "customers dumping their data and loading to S3 and then and then loading into red",
    "start": "3653799",
    "end": "3660079"
  },
  {
    "text": "shift that's the most common way especially if they going to load like a a day or a couple days worth of data",
    "start": "3660079",
    "end": "3665760"
  },
  {
    "text": "from their database into the red shift and they normally create files and do that load that into S3 and then from",
    "start": "3665760",
    "end": "3672680"
  },
  {
    "text": "there to to Red shift which helps them with uh faster loads and also they keep have like a second the date is also",
    "start": "3672680",
    "end": "3679359"
  },
  {
    "text": "stored in a second place as well while they load if they want to revisit data or check any for any issues over time",
    "start": "3679359",
    "end": "3685240"
  },
  {
    "text": "great thanks yes and I think we've got a lot of questions on road map which we which we don't go into we don't talk about futures um but but I I think it's",
    "start": "3685240",
    "end": "3692520"
  },
  {
    "text": "fair to say thematically we'll be uh we're always looking at ways to do better ingestion faster and more",
    "start": "3692520",
    "end": "3698559"
  },
  {
    "text": "versatile so more sources so it's it's safe to say that IDs is is a focus for that sort of activity as well as of",
    "start": "3698559",
    "end": "3704839"
  },
  {
    "text": "course performance of General operations in red shift um you may have understood the theme that performance is a very",
    "start": "3704839",
    "end": "3710280"
  },
  {
    "text": "important part of red shift it's true and we continue to um to work on that it can always be better",
    "start": "3710280",
    "end": "3716760"
  },
  {
    "text": "so with that I think we're out of time uh we're actually over a little bit so I appreciate everyone staying on um thank you for your time um we will uh take all",
    "start": "3716760",
    "end": "3724559"
  },
  {
    "text": "these questions and as I said populate the FAQ for for things that are um recurring so uh stay tuned for more red",
    "start": "3724559",
    "end": "3731079"
  },
  {
    "text": "shift and other webinars from the database team and we'll see you next time thanks very",
    "start": "3731079",
    "end": "3737119"
  },
  {
    "text": "much e",
    "start": "3744839",
    "end": "3748880"
  }
]