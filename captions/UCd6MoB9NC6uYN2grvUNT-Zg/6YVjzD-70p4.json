[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "Welcome to another episode \nof 'Back to Basics'.",
    "start": "5548",
    "end": "8319"
  },
  {
    "text": "I'm Cheryl Joseph, ",
    "start": "8718",
    "end": "9984"
  },
  {
    "text": "and I am a solutions architect \nat Amazon Web Services.",
    "start": "10087",
    "end": "14072"
  },
  {
    "text": "So today I want to talk to you \nregarding some streaming options",
    "start": "15043",
    "end": "19255"
  },
  {
    "text": "to capture item level changes \nin Amazon DynamoDB.",
    "start": "19449",
    "end": "23538"
  },
  {
    "text": "I want to show you \nsome architecture patterns ",
    "start": "24570",
    "end": "27483"
  },
  {
    "text": "to build and event-driven, \nscalable, and a serverless approach",
    "start": "27685",
    "end": "32356"
  },
  {
    "text": "to capture changes \nas they're occurring in a DynamoDB table.",
    "start": "32655",
    "end": "37290"
  },
  {
    "text": "So let me first familiarize you \nwith DynamoDB. ",
    "start": "38331",
    "end": "42050"
  },
  {
    "start": "43000",
    "end": "111000"
  },
  {
    "text": "Amazon DynamoDB is a fully managed, \nno SQL database service ",
    "start": "43727",
    "end": "48757"
  },
  {
    "text": "that provides fast and predictable performance \nwith seamless scalability. ",
    "start": "49096",
    "end": "54479"
  },
  {
    "text": "So similar to other database systems,",
    "start": "55303",
    "end": "57827"
  },
  {
    "text": "DynamoDB stores data and tables.",
    "start": "57998",
    "end": "61458"
  },
  {
    "text": "A table is a collection of data,",
    "start": "62745",
    "end": "65345"
  },
  {
    "text": "and each table contains items. ",
    "start": "65999",
    "end": "68933"
  },
  {
    "text": "An item is a group of attributes. ",
    "start": "70376",
    "end": "72913"
  },
  {
    "text": "So for example, in a customer table, ",
    "start": "74506",
    "end": "77323"
  },
  {
    "text": "each item represents \nan individual customer,",
    "start": "77693",
    "end": "81044"
  },
  {
    "text": "or in a product table,",
    "start": "81802",
    "end": "83286"
  },
  {
    "text": "each item represents an individual product.",
    "start": "84278",
    "end": "87476"
  },
  {
    "text": "Items in DynamoDB \nare similar in many ways ",
    "start": "88133",
    "end": "92343"
  },
  {
    "text": "to rows, records, or tuples \nin other database systems.",
    "start": "92462",
    "end": "97006"
  },
  {
    "text": "When you enable DynamoDB Streams \nin a DynamoDB table,",
    "start": "98216",
    "end": "102196"
  },
  {
    "text": "it writes a stream record,",
    "start": "102724",
    "end": "104477"
  },
  {
    "text": "which contains information ",
    "start": "104716",
    "end": "106439"
  },
  {
    "text": "about every modification \nmade to data items in the table. ",
    "start": "106559",
    "end": "110858"
  },
  {
    "start": "111000",
    "end": "204000"
  },
  {
    "text": "So here are your clients,",
    "start": "112008",
    "end": "114256"
  },
  {
    "text": "and your clients are inserting an item, \na customer, into a DynamoDB table. ",
    "start": "114817",
    "end": "120977"
  },
  {
    "text": "When this happens,",
    "start": "122586",
    "end": "123959"
  },
  {
    "text": "DynamoDB makes this change data capture \navailable in a stream. ",
    "start": "124277",
    "end": "129235"
  },
  {
    "text": "Next one of your clients \nupdates some customer data, ",
    "start": "130627",
    "end": "134784"
  },
  {
    "text": "for example, a phone number. ",
    "start": "135424",
    "end": "137513"
  },
  {
    "text": "And when this happens,",
    "start": "138495",
    "end": "140428"
  },
  {
    "text": "DynamoDB will make the before \nand the after changes",
    "start": "140888",
    "end": "145407"
  },
  {
    "text": "available in a stream. ",
    "start": "145407",
    "end": "147206"
  },
  {
    "text": "When it comes to change data capture,",
    "start": "148739",
    "end": "150809"
  },
  {
    "text": "DynamoDB offers you \ntwo streaming options ",
    "start": "151200",
    "end": "154517"
  },
  {
    "text": "to stream these item level changes. ",
    "start": "154879",
    "end": "157436"
  },
  {
    "text": "The first is DynamoDB Streams,",
    "start": "158599",
    "end": "161629"
  },
  {
    "text": "and the other \nis Amazon Kinesis Data Streams.",
    "start": "162417",
    "end": "165761"
  },
  {
    "text": "DynamoDB Streams has a data retention \nof up to 24 hours",
    "start": "166464",
    "end": "171063"
  },
  {
    "text": "and currently supports two consumers.",
    "start": "171527",
    "end": "174506"
  },
  {
    "text": "Kinesis Data Streams \nhas a data retention of up to one year.",
    "start": "175837",
    "end": "180132"
  },
  {
    "text": "And with enhanced fan-out,",
    "start": "180627",
    "end": "182684"
  },
  {
    "text": "you can currently have \nup to 20 consumers. ",
    "start": "182914",
    "end": "185798"
  },
  {
    "text": "So depending on your use case,",
    "start": "186554",
    "end": "188653"
  },
  {
    "text": "you can pick either DynamoDB Streams,",
    "start": "189033",
    "end": "191555"
  },
  {
    "text": "or Kinesis Data Streams",
    "start": "191784",
    "end": "193548"
  },
  {
    "text": "to stream item level changes \nfrom DynamoDB. ",
    "start": "193925",
    "end": "197433"
  },
  {
    "text": "Now let me show you \nsome end-to-end architecture patterns",
    "start": "198387",
    "end": "201614"
  },
  {
    "text": "using streaming from DynamoDB.",
    "start": "201755",
    "end": "204107"
  },
  {
    "start": "204000",
    "end": "356000"
  },
  {
    "text": "So let's take, for example, ",
    "start": "205406",
    "end": "207255"
  },
  {
    "text": "you have a new product feature launch \nof one of your products,",
    "start": "207255",
    "end": "210880"
  },
  {
    "text": "and your customers \nare providing feedback, ",
    "start": "211636",
    "end": "214272"
  },
  {
    "text": "which is stored in a DynamoDB table. ",
    "start": "214525",
    "end": "216883"
  },
  {
    "text": "Additionally, you'd like to perform",
    "start": "218025",
    "end": "220485"
  },
  {
    "text": "some sentiment analysis on this feedback \nin a decoupled manner. ",
    "start": "220485",
    "end": "224614"
  },
  {
    "text": "In this scenario, ",
    "start": "225838",
    "end": "227280"
  },
  {
    "text": "you can enable DynamoDB Streams ",
    "start": "227793",
    "end": "230057"
  },
  {
    "text": "to capture the changes being made \nin the DynamoDB table. ",
    "start": "230321",
    "end": "234193"
  },
  {
    "text": "And with DynamoDB Streams enabled, ",
    "start": "234840",
    "end": "237491"
  },
  {
    "text": "you can have the AWS Lambda service,",
    "start": "237973",
    "end": "240827"
  },
  {
    "text": "pull the stream \nand invoke a Lambda function.",
    "start": "241104",
    "end": "244243"
  },
  {
    "text": "The Lambda function can then call \nAmazon Comprehend for sentiment analysis",
    "start": "245638",
    "end": "250403"
  },
  {
    "text": "and insert the sentiment response \nin another DynamoDB table.",
    "start": "250792",
    "end": "255113"
  },
  {
    "text": "You can now use this data \nto determine the end user impact ",
    "start": "255761",
    "end": "259985"
  },
  {
    "text": "of your product feature launch. ",
    "start": "260244",
    "end": "262185"
  },
  {
    "text": "So here is another architecture pattern.",
    "start": "263516",
    "end": "266113"
  },
  {
    "text": "You might have a scenario ",
    "start": "266766",
    "end": "268499"
  },
  {
    "text": "where you want to deliver item level changes \nfrom DynamoDB ",
    "start": "268723",
    "end": "273126"
  },
  {
    "text": "to Amazon Aurora or Amazon S3.",
    "start": "273211",
    "end": "276379"
  },
  {
    "text": "In this situation, \nas your clients update DynamoDB, ",
    "start": "277564",
    "end": "281941"
  },
  {
    "text": "your changes are being streamed \ndirectly from DynamoDB ",
    "start": "282741",
    "end": "286160"
  },
  {
    "text": "to Kinesis Data Streams.",
    "start": "286344",
    "end": "287913"
  },
  {
    "text": "Using Kinesis Data Streams \nenables you to use different consumers ",
    "start": "288895",
    "end": "293318"
  },
  {
    "text": "to capture your changes in DynamoDB. ",
    "start": "293599",
    "end": "296176"
  },
  {
    "text": "In this pattern, we have two consumers \nfrom Kinesis Data Streams.",
    "start": "297577",
    "end": "302441"
  },
  {
    "text": "The first is a Lambda function",
    "start": "303769",
    "end": "305861"
  },
  {
    "text": "that will update an Aurora database.",
    "start": "306214",
    "end": "308856"
  },
  {
    "text": "You could also send the record \nfrom Kinesis Data Streams",
    "start": "310006",
    "end": "313733"
  },
  {
    "text": "to Kinesis Data Firehose.",
    "start": "313830",
    "end": "316137"
  },
  {
    "text": "These changes \ncould then be delivered to S3.",
    "start": "317677",
    "end": "321459"
  },
  {
    "text": "And additionally, \nyou can use Amazon Athena ",
    "start": "322059",
    "end": "325778"
  },
  {
    "text": "to query these records. ",
    "start": "325778",
    "end": "327280"
  },
  {
    "text": "In this episode, we explored \nvarious architecture patterns ",
    "start": "328636",
    "end": "332462"
  },
  {
    "text": "to asynchronously \ncapture item level changes ",
    "start": "332673",
    "end": "335919"
  },
  {
    "text": "in DynamoDB,",
    "start": "336118",
    "end": "337275"
  },
  {
    "text": "using DynamoDB Streams,\nKinesis Data Streams",
    "start": "337684",
    "end": "341501"
  },
  {
    "text": "Lambda, and other AWS services. ",
    "start": "341685",
    "end": "344281"
  },
  {
    "text": "Check out the links below for more details, \nand see you next time.",
    "start": "345244",
    "end": "349537"
  }
]