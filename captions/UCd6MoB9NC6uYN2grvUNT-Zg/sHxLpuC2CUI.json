[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "so good afternoon everybody my name is Dougal Valentine thank you very much for",
    "start": "3440",
    "end": "8820"
  },
  {
    "text": "coming to this session hope everyone had a good lunch everyone suitably fed we're gonna be talking about performance",
    "start": "8820",
    "end": "14910"
  },
  {
    "text": "benchmarking on AWS I'm an HPC Solutions Architect as high-performance computing",
    "start": "14910",
    "end": "20580"
  },
  {
    "text": "so I spend a lot of time doing benchmarking a lot of the content I'm going to be talking about today comes",
    "start": "20580",
    "end": "25920"
  },
  {
    "text": "from our benchmarking team who we work closely with I'm also gonna bring up a customer as we go through our slice",
    "start": "25920",
    "end": "32189"
  },
  {
    "text": "today from just eat called Bennie and he's going to talk a little bit more about how they actually do manage marketing in practice so let's get",
    "start": "32189",
    "end": "42059"
  },
  {
    "start": "40000",
    "end": "40000"
  },
  {
    "text": "started the best benchmark for you is your application now I know you've heard",
    "start": "42059",
    "end": "48450"
  },
  {
    "text": "that plenty of times we like to talk about it a lot we have quotes about it on our website but it truly is the best",
    "start": "48450",
    "end": "53940"
  },
  {
    "text": "benchmark there's often times though you cannot do you cannot do your entire",
    "start": "53940",
    "end": "60000"
  },
  {
    "text": "application stack on top of us and so what I'm going to spend time today talking about is when you can use",
    "start": "60000",
    "end": "65100"
  },
  {
    "text": "synthetic benchmarks to identify components in your application and then use those benchmarks to give you an",
    "start": "65100",
    "end": "71189"
  },
  {
    "text": "indication of how you think your application may perform but at the end of the day the best benchmark is still",
    "start": "71189",
    "end": "77040"
  },
  {
    "text": "going to be your application when you're running these benchmarks and the ones we pull out today are just examples it's",
    "start": "77040",
    "end": "83490"
  },
  {
    "text": "really important to understand whether they're giving you absolute results or relative results so an absolute result",
    "start": "83490",
    "end": "89759"
  },
  {
    "text": "would be the amount of work that can get done a relative result would be is it doing more work than the other system",
    "start": "89759",
    "end": "95310"
  },
  {
    "text": "I'm testing different instance types and how much performance are they delivering",
    "start": "95310",
    "end": "100850"
  },
  {
    "text": "is the benchmark a fixed time benchmark or a fixed work benchmark a lot of the",
    "start": "102500",
    "end": "108780"
  },
  {
    "text": "benchmarks are fixed time meaning the more work they do in that time the better other benchmarks that we're gonna",
    "start": "108780",
    "end": "114600"
  },
  {
    "text": "look at they're fixed work meaning the quicker the benchmark runs the better the benchmark is and you have to be very",
    "start": "114600",
    "end": "121079"
  },
  {
    "text": "careful when you're using these benchmarks that you understand what that means sometimes they're gonna run really quick",
    "start": "121079",
    "end": "127049"
  },
  {
    "text": "and that might actually mean it's not running and it's not that it was actually faster and I've seen people who come away with",
    "start": "127049",
    "end": "133290"
  },
  {
    "text": "some awesome results and realize it wasn't running correctly what's different about benchmarking on top of",
    "start": "133290",
    "end": "139769"
  },
  {
    "text": "AWS or on benchmarking on top of a cloud infrastructure than benchmarking on-premise the first thing is you have",
    "start": "139769",
    "end": "145920"
  },
  {
    "text": "an awful lot of variety there's many many instance types many many configurations you can choose and use so",
    "start": "145920",
    "end": "152250"
  },
  {
    "text": "you need to make sure you're focusing in on ones that are relevant to your area of focus for your application now we've",
    "start": "152250",
    "end": "158310"
  },
  {
    "text": "tried to make it easier by having things called instance families and we group them into general purpose and compute",
    "start": "158310",
    "end": "164010"
  },
  {
    "text": "optimized and storage optimized we do hope that you have a little bit of an idea before you start as to whether you",
    "start": "164010",
    "end": "169680"
  },
  {
    "text": "think you're going to be needing something that's very heavy on storage versus something that's very heavy on CPU or maybe a memory optimized platform",
    "start": "169680",
    "end": "176340"
  },
  {
    "text": "the other thing that's different about AWS or top of the cloud is there's going to be some more levels of abstraction",
    "start": "176340",
    "end": "181920"
  },
  {
    "text": "than say an on-premise bare-metal system so you want to take that into consideration with your benchmarks and",
    "start": "181920",
    "end": "187200"
  },
  {
    "text": "run a little bit more you probably be looking at running sort of ten iterations of a test over a couple of",
    "start": "187200",
    "end": "192329"
  },
  {
    "text": "different instances and make sure any variability that may occur is being incorporated in your testing results and",
    "start": "192329",
    "end": "197699"
  },
  {
    "text": "you can use that to make your decisions as to what you're going to use use a good army now what is a good army for me",
    "start": "197699",
    "end": "206370"
  },
  {
    "text": "a good army is one that I understand where it came from that it's current is up-to-date and is going to deliver",
    "start": "206370",
    "end": "211560"
  },
  {
    "text": "expected performance I see a lot of customers testing applications and they have a standard I must use this army and",
    "start": "211560",
    "end": "218549"
  },
  {
    "text": "not realizing that that army doesn't actually have the latest up-to-date kernels or the latest up-to-date",
    "start": "218549",
    "end": "223709"
  },
  {
    "text": "libraries in it and so it's not able to take advantage of the AWS platform the AWS platform is constantly innovating",
    "start": "223709",
    "end": "230519"
  },
  {
    "text": "we're always launching new instance types which means we're also leveraging the latest hardware if you're running an",
    "start": "230519",
    "end": "236400"
  },
  {
    "text": "army that didn't or if you're running an instance type that didn't exist or the CPU didn't exist when the ami was",
    "start": "236400",
    "end": "243659"
  },
  {
    "text": "released or the software was built it's unlikely you're actually leveraging all of the capabilities in that platform so",
    "start": "243659",
    "end": "249780"
  },
  {
    "text": "an army is a really important selection to highlight it a little bit we took",
    "start": "249780",
    "end": "255000"
  },
  {
    "text": "some benchmarks in the benchmarking team and we ran them same binaries same operating system but different flavors",
    "start": "255000",
    "end": "262019"
  },
  {
    "text": "of an army were released out into the AWS world and you can see that the cent to s4 results",
    "start": "262019",
    "end": "267479"
  },
  {
    "text": "are really variable they're all over the place the difference was newer versus newer versus older kernels within the",
    "start": "267479",
    "end": "274139"
  },
  {
    "text": "send to s5 built for release so if you start out with the release that came just at 5.4 there was problems in there",
    "start": "274139",
    "end": "280560"
  },
  {
    "text": "with multi-threaded performance whereas if you did a young upgrade and came to the latest kernel in five four you",
    "start": "280560",
    "end": "286199"
  },
  {
    "text": "actually got those things fixed and so you might think that you're running on the latest you really want to make sure",
    "start": "286199",
    "end": "291330"
  },
  {
    "text": "make sure you've cooled those in so what I'm gonna do now for the sort of the",
    "start": "291330",
    "end": "297900"
  },
  {
    "start": "296000",
    "end": "296000"
  },
  {
    "text": "next set of sections is I'm gonna walk you through some scenarios some tools you could use for doing benchmarking",
    "start": "297900",
    "end": "303240"
  },
  {
    "text": "when you can't use your application so hypothetically we have a CPU based",
    "start": "303240",
    "end": "308870"
  },
  {
    "text": "problem that we need to solve we're looking for what would be the best instance what instance would give me the best CPU performance it's going to be an",
    "start": "308870",
    "end": "316169"
  },
  {
    "text": "integer based problem now at this point I've already made some pretty big assumptions that you've been able to identify that it is an integer based",
    "start": "316169",
    "end": "322650"
  },
  {
    "text": "problem you're trying to solve and I think it's important you do realize that you know when you run these benchmarks",
    "start": "322650",
    "end": "328409"
  },
  {
    "text": "and we're gonna talk about Geekbench and unix Panch and suspense that you know they often just output a number and that",
    "start": "328409",
    "end": "334169"
  },
  {
    "text": "number even if it you know a higher number is better and one of the lower number is better than the other that may not mean your application is going to",
    "start": "334169",
    "end": "340740"
  },
  {
    "text": "run better so you should try and spend a little bit of time understanding which part of the instance or which part of",
    "start": "340740",
    "end": "346650"
  },
  {
    "text": "the infrastructure being provided is important to your application and so this one we have been able to determine it's a it's integer performance so we're",
    "start": "346650",
    "end": "355259"
  },
  {
    "text": "gonna take a look at choosing a benchmark now these are some example",
    "start": "355259",
    "end": "362159"
  },
  {
    "text": "benchmarks I'm not endorsing any benchmark per se these are ones we run often we see a lot of customers running",
    "start": "362159",
    "end": "367949"
  },
  {
    "text": "these benchmarks some of them are open source some of them are commercial they",
    "start": "367949",
    "end": "373229"
  },
  {
    "text": "all give very different results and very different approaches to testing what do we do is walk you through very quickly",
    "start": "373229",
    "end": "378900"
  },
  {
    "text": "how we use them and how we gather the results for those making notes furiously all of the slides will be available",
    "start": "378900",
    "end": "385199"
  },
  {
    "text": "afterwards we will have a YouTube video of this talk and I will be available for Q&A after the talk outside and I will",
    "start": "385199",
    "end": "391860"
  },
  {
    "text": "happily give out business cards to people if they want to get more access to what we're doing with bench",
    "start": "391860",
    "end": "397400"
  },
  {
    "text": "so when you're running these benchmarks it's important to understand whether you have or not a good result and I",
    "start": "397859",
    "end": "404649"
  },
  {
    "text": "mentioned earlier that when you run a test and it outputs the run time of five seconds and then you run it again",
    "start": "404649",
    "end": "410019"
  },
  {
    "text": "outputs three seconds and then two seconds on different instances you need to make sure that's because the instance",
    "start": "410019",
    "end": "415299"
  },
  {
    "text": "is actually faster and not because the benchmark didn't notice it was testing something maybe it skipped over a test",
    "start": "415299",
    "end": "420879"
  },
  {
    "text": "in one of the runs so you really want to pay attention to make sure you are getting a good result from the system",
    "start": "420879",
    "end": "426179"
  },
  {
    "text": "when we run our tests internally and then the advice we give to our customers you want to run them on a multitude of",
    "start": "426179",
    "end": "432549"
  },
  {
    "text": "instance types multiple times you want to understand exactly the coefficient of variance and I'll dig into what that",
    "start": "432549",
    "end": "438669"
  },
  {
    "text": "means a little bit so you can understand whether variability in the platform is going to be present for your particular",
    "start": "438669",
    "end": "443979"
  },
  {
    "text": "application all of the tests we ran for this talk were on a boon to 1304 army",
    "start": "443979",
    "end": "449829"
  },
  {
    "text": "and we ran each test a minimum of four times sometimes we ran them more but a minimum of four times and we ran them",
    "start": "449829",
    "end": "455229"
  },
  {
    "text": "over nine instances in ten instances of those nine instance types so we'll dive",
    "start": "455229",
    "end": "461319"
  },
  {
    "text": "into an actual test so Geekbench it's a free download in 32-bit a commercial",
    "start": "461319",
    "end": "467199"
  },
  {
    "text": "product in 64-bit it's a black box there's no source code you just have to run it and it outputs a number it runs a",
    "start": "467199",
    "end": "474789"
  },
  {
    "text": "single and a multi CPU benchmark so you can test one core or as many cores available in the system it's really easy",
    "start": "474789",
    "end": "481299"
  },
  {
    "text": "to set up and it has a really fast run time it's broken into thirteen integer tests and these integer tests are",
    "start": "481299",
    "end": "487629"
  },
  {
    "text": "actually collected up from different tests around you know the internet and pool together ten floating-point tests",
    "start": "487629",
    "end": "493809"
  },
  {
    "text": "again tests you can look up and determine you know where they come from and for memory tests predominately based",
    "start": "493809",
    "end": "498879"
  },
  {
    "text": "on the stream benchmark now there is no source code to it so you have no idea",
    "start": "498879",
    "end": "504159"
  },
  {
    "text": "how they've constructed this test you do not know any of the parameters you don't know if it's optimized for the latest generation CPUs you don't know how it's",
    "start": "504159",
    "end": "511299"
  },
  {
    "text": "actually been set up so one word of caution just make sure you do have an understanding of whether the benchmarks",
    "start": "511299",
    "end": "516610"
  },
  {
    "text": "are giving you the numbers you're looking for it might be that Geekbench doesn't recognize the CPU on and doesn't leverage those features so the Geekbench",
    "start": "516610",
    "end": "524860"
  },
  {
    "start": "524000",
    "end": "524000"
  },
  {
    "text": "script I'm going to share with you example scripts these are going to be available afterwards don't worry about trying to write them",
    "start": "524860",
    "end": "530330"
  },
  {
    "text": "down but I'm trying to give you some thoughts and methodology around how we do our benchmarking or how we collect benchmarking we want to annotate all of",
    "start": "530330",
    "end": "537890"
  },
  {
    "text": "our results to let us know what instance they ran on what time of day what the test was and how many iterations we ran",
    "start": "537890",
    "end": "544190"
  },
  {
    "text": "and it's nothing complex we're not writing a really fancy testing framework here we're just leveraging some bash",
    "start": "544190",
    "end": "549500"
  },
  {
    "text": "scripts but it means that all of our results are going to be easily possible to run Geekbench it's very simple you",
    "start": "549500",
    "end": "556370"
  },
  {
    "text": "run Geekbench specify no upload so it doesn't upload the results to the gate of the Geekbench website and then I've",
    "start": "556370",
    "end": "562250"
  },
  {
    "text": "got some timing around it a start and an end which is pretty simple naive and then I'm able to work how quick the",
    "start": "562250",
    "end": "568310"
  },
  {
    "text": "benchmark ran so from start to finish and then an output name and I copy that out you also want to upload these as I",
    "start": "568310",
    "end": "575870"
  },
  {
    "text": "personally upload anyway to s3 you want to store these results everywhere keep all of your test results",
    "start": "575870",
    "end": "581060"
  },
  {
    "text": "every time you run a test please save those results somewhere s3 is typically the easiest place to do",
    "start": "581060",
    "end": "586190"
  },
  {
    "text": "that you can come back to these six months later six years later and see",
    "start": "586190",
    "end": "591350"
  },
  {
    "text": "whether things are still consistent whether they've changed it's important to do that so let's take a little bit a",
    "start": "591350",
    "end": "597290"
  },
  {
    "text": "little bit of a look at the results that we got when we're running the Geekbench on AWS what I've done with these results",
    "start": "597290",
    "end": "603530"
  },
  {
    "text": "is I've put them together in a baseline format so I'm actually going to take one system use that as my baseline and",
    "start": "603530",
    "end": "609260"
  },
  {
    "text": "that's going to be the C c28 extra-large and it's been around for a little while so I know that the sort of performance I",
    "start": "609260",
    "end": "615890"
  },
  {
    "text": "expect from that but I've run Geekbench on it and that is my baseline of 1.0 and everything else in the column here for",
    "start": "615890",
    "end": "622610"
  },
  {
    "text": "ratio is a ratio compared to that result and it's that the execution time I also",
    "start": "622610",
    "end": "628520"
  },
  {
    "text": "have a column for the coefficient of variance now the coefficient of variance is the standard deviation divided by the",
    "start": "628520",
    "end": "634820"
  },
  {
    "text": "mean and this is a really interesting way of looking at variant rather than just using standard deviation it gives",
    "start": "634820",
    "end": "640580"
  },
  {
    "text": "me a percentage of variation within my results and I'm looking for a lower number in the coefficients of variance",
    "start": "640580",
    "end": "647000"
  },
  {
    "text": "and if I see a lot of variance in there I want to understand where that's coming from spend some time understanding whether is it the test that's not",
    "start": "647000",
    "end": "654320"
  },
  {
    "text": "performing well why am I seeing this is it the instances is it one instance that's impacted all of my tests or is it",
    "start": "654320",
    "end": "660560"
  },
  {
    "text": "multiple instances that are all with have variants and you should spend some time understanding that I also have a multi",
    "start": "660560",
    "end": "667080"
  },
  {
    "text": "CPU answer in here and you can see in the multi CPU answer that the CC to eight extra large it comes with 16 cores",
    "start": "667080",
    "end": "673590"
  },
  {
    "text": "and so it's actually telling me that I'm getting scaling on that platform for the integer test I'm also seeing a lot more",
    "start": "673590",
    "end": "679589"
  },
  {
    "text": "coefficient of variance and that could tell me a couple of things it could tell me that the systems are not very good",
    "start": "679589",
    "end": "685589"
  },
  {
    "text": "when they run in multi-core it might be I have to be fair the wrong army maybe there's some performance problems in",
    "start": "685589",
    "end": "691020"
  },
  {
    "text": "there it might be the test itself doesn't run very well on multi-core and so it's worth spending some time and I",
    "start": "691020",
    "end": "696630"
  },
  {
    "text": "can tell you that for example Geekbench the reason for this is because not all of the tests are multi-threaded so you",
    "start": "696630",
    "end": "702450"
  },
  {
    "text": "end up seeing a lot of variance because it's flipping from single threaded and multi-threaded tests and you can see the run time here is almost consistently",
    "start": "702450",
    "end": "709560"
  },
  {
    "text": "around two minutes so this is a fixed time benchmark okay so the more it can do in there the result number is",
    "start": "709560",
    "end": "716040"
  },
  {
    "text": "actually meaning faster rather than running shorter when I talk about",
    "start": "716040",
    "end": "721350"
  },
  {
    "text": "understanding run variant so I said dig into the ec2 what I'm doing afterwards is I'm actually taking a look within",
    "start": "721350",
    "end": "727650"
  },
  {
    "text": "that run one specific component the m3 extra-large and drilling down to see what the one CPU ratio is and making",
    "start": "727650",
    "end": "735390"
  },
  {
    "text": "sure that that's all consistent and it's actually the same across all of the instances we tested on you can also see",
    "start": "735390",
    "end": "740970"
  },
  {
    "text": "the coefficients of variance and there is also very flat when I break it out",
    "start": "740970",
    "end": "747089"
  },
  {
    "text": "because I want to see just the integer component we see a little bit more interesting numbers now Geekbench",
    "start": "747089",
    "end": "753210"
  },
  {
    "text": "doesn't actually break down the timing for integer so it's very difficult for me to use geek banished to do that so",
    "start": "753210",
    "end": "758640"
  },
  {
    "text": "I'm not 100% sure whether Geekbench would be the right test at the end of the day for doing just integer in this",
    "start": "758640",
    "end": "763650"
  },
  {
    "text": "part but what you can see is that this the coefficients of variants on the CPU",
    "start": "763650",
    "end": "769020"
  },
  {
    "text": "integer part is very very consistent and so that's showing me that each of those instances is going to give a reliable",
    "start": "769020",
    "end": "774930"
  },
  {
    "text": "result from there so moving from",
    "start": "774930",
    "end": "780900"
  },
  {
    "start": "780000",
    "end": "780000"
  },
  {
    "text": "Geekbench into unix bench unix bench was developed for the byte magazine it was a",
    "start": "780900",
    "end": "786360"
  },
  {
    "text": "benchmark developed originally for some very old sun hardware and it gives you a relative score compared to that sun",
    "start": "786360",
    "end": "792540"
  },
  {
    "text": "hardware so everything is faster than that today and only just and it's going to run 12",
    "start": "792540",
    "end": "799310"
  },
  {
    "text": "workloads it takes about 30 minutes to run and these workloads are broken down into integer floating point system calls",
    "start": "799310",
    "end": "805610"
  },
  {
    "text": "and file system calls it takes a Geo mean of those results and that produces",
    "start": "805610",
    "end": "811400"
  },
  {
    "text": "ace index score so you actually get a score for your system you're going to come out with a number that your system represents it is open source so you can",
    "start": "811400",
    "end": "819500"
  },
  {
    "text": "take a look at what it's running you can actually see how the code is written because of that people have actually developed patches for Geekbench Unix",
    "start": "819500",
    "end": "827030"
  },
  {
    "text": "bench sorry because it doesn't run well over 16 CPUs when they built this the SPARC architecture didn't even have two",
    "start": "827030",
    "end": "833450"
  },
  {
    "text": "CPUs so the fact that we now have 32 and more CPUs and boxes kind of throws it for a bit of curve UNIX pen script that",
    "start": "833450",
    "end": "843200"
  },
  {
    "start": "841000",
    "end": "841000"
  },
  {
    "text": "we use to run this is very server to the last one we make sure that we annotate the outputs so we know where they're",
    "start": "843200",
    "end": "848570"
  },
  {
    "text": "coming from what time how long they took to run the number of copies I want to run so the number of copies I want to",
    "start": "848570",
    "end": "855050"
  },
  {
    "text": "run as a simple graph of the proxy PU info to count the number of processors in the system and then I'm going to run",
    "start": "855050",
    "end": "862100"
  },
  {
    "text": "it it doesn't have a very complex run line it's simply run and then - see for the number of copies now there's two -",
    "start": "862100",
    "end": "868400"
  },
  {
    "text": "C's in here and what this means is I'm going to run this benchmark in two modes I'm gonna run it single CPU first and",
    "start": "868400",
    "end": "874220"
  },
  {
    "text": "then multi CPU second and then we do a probably could be done more elegant or",
    "start": "874220",
    "end": "879740"
  },
  {
    "text": "can graph and said to put that into CSV so we can put into Excel the world heavily used analytics tool that we get",
    "start": "879740",
    "end": "885590"
  },
  {
    "text": "for doing all of our results all of these little charts come from Excel so again we did the same test we did last",
    "start": "885590",
    "end": "892070"
  },
  {
    "text": "time where we took the CC - 8 extra large and use that as the baseline and then we worked out what our CPU ratios",
    "start": "892070",
    "end": "899150"
  },
  {
    "text": "were to the other ones now you can see in here that the c3 is a little bit faster the m3 is also a little bit",
    "start": "899150",
    "end": "906650"
  },
  {
    "text": "faster on the one CPU and the m2 is a little bit slower now I understand",
    "start": "906650",
    "end": "912260"
  },
  {
    "text": "that's because there are different generations of ec2 instances in the c3 that's a compute optimised m3s our",
    "start": "912260",
    "end": "918530"
  },
  {
    "text": "latest general-purpose the m2 is an older memory optimized and because of that with the different clock speeds",
    "start": "918530",
    "end": "924170"
  },
  {
    "text": "they have they end up as giving us different results again I could see my cpu ratios but",
    "start": "924170",
    "end": "930530"
  },
  {
    "text": "they're not scaling the same for this test on the previous test we're seeing a scaling of 16 and then this one we're",
    "start": "930530",
    "end": "936410"
  },
  {
    "text": "only seeing a scaling of 4 on the cc2 and the other ones they're not even going up that much at all and the",
    "start": "936410",
    "end": "942650"
  },
  {
    "text": "coefficient of variance is also all over the place compared to the previous set of tests we ran so either Geekbench",
    "start": "942650",
    "end": "948550"
  },
  {
    "text": "wasn't giving us good numbers or maybe unix bench isn't giving us good numbers but we definitely spend a moment and",
    "start": "948550",
    "end": "953660"
  },
  {
    "text": "work out well what happened why is it why is it different and you notice the runtime we skipped over the runtime is",
    "start": "953660",
    "end": "960380"
  },
  {
    "text": "all consistent on that so the wrong time is the same so this again a fixed amount of time that this test is running it's",
    "start": "960380",
    "end": "965780"
  },
  {
    "text": "the work that's important if I actually take the tests to pieces and you can do this you can actually run individual",
    "start": "965780",
    "end": "971630"
  },
  {
    "start": "967000",
    "end": "967000"
  },
  {
    "text": "components from it and I run just the integer part which is the dry stone to benchmark I actually start to see the",
    "start": "971630",
    "end": "977150"
  },
  {
    "text": "scaling I was looking for I see that when we run on the CC to a tile extra large instant integer only we're seeing",
    "start": "977150",
    "end": "983270"
  },
  {
    "text": "16 or 15 point 5 for scaling on that I also see my coefficient of variance is",
    "start": "983270",
    "end": "988420"
  },
  {
    "text": "significantly lower it's basically bad just under 0 at that point and I also",
    "start": "988420",
    "end": "993710"
  },
  {
    "text": "see that my runtime is really really short 17 or 7 points 1/7 of a minute so",
    "start": "993710",
    "end": "999230"
  },
  {
    "text": "about 10 seconds it's running now the dry stone to benchmark I know if I run",
    "start": "999230",
    "end": "1004600"
  },
  {
    "text": "it independently it can run for for easily 30 minutes no problem at all if I set it up to to really stress the system",
    "start": "1004600",
    "end": "1010840"
  },
  {
    "text": "so I can I already know in here they've modified the benchmark to run very very quickly on purpose but if I dig further",
    "start": "1010840",
    "end": "1017830"
  },
  {
    "text": "into the benchmark I also discover that when you're running UNIX bench even in multi CPU mode so when I asked it to run",
    "start": "1017830",
    "end": "1023770"
  },
  {
    "text": "16 copies it only did it for the tests that support CPU multiple CPUs so it",
    "start": "1023770",
    "end": "1030189"
  },
  {
    "text": "still ran in the background a single threaded file test in a single threaded system called test so those numbers skew",
    "start": "1030190",
    "end": "1036160"
  },
  {
    "text": "the actual performance of the system because they're basically taking away from the multi-threaded performance",
    "start": "1036160",
    "end": "1041920"
  },
  {
    "text": "because if you were doing that truly multi-threaded all of the threads would be doing system calls all the feds we're doing file calls another CPU benchmark",
    "start": "1041920",
    "end": "1050860"
  },
  {
    "start": "1049000",
    "end": "1049000"
  },
  {
    "text": "we spend a lot of time looking at and internally we use quite heavily as well is the spec CPU benchmark now the",
    "start": "1050860",
    "end": "1057550"
  },
  {
    "text": "special CPU benchmark is what's called a competitive mark that means that companies are actually required to publish all of the",
    "start": "1057550",
    "end": "1064340"
  },
  {
    "text": "results how they achieved the results and then the configurations they used it's heavily heavily tested it's",
    "start": "1064340",
    "end": "1072410"
  },
  {
    "text": "commercial you buy a site license to be able to run it and save your environment it's been audited by many many parties",
    "start": "1072410",
    "end": "1078230"
  },
  {
    "text": "to ensure that it is consistent and the numbers that are used from it are very effective and and it comes in source",
    "start": "1078230",
    "end": "1085160"
  },
  {
    "text": "code so you can look at it meaning you can also optimize it and it's perfectly acceptable to take the speck benchmark",
    "start": "1085160",
    "end": "1090470"
  },
  {
    "text": "and modify it to be appropriate for the architects you're testing on so for example the latest Intel systems support",
    "start": "1090470",
    "end": "1096799"
  },
  {
    "text": "AVX you can ensure that you are using a VX when you compile the benchmark for this it's very very customizable there's",
    "start": "1096799",
    "end": "1104450"
  },
  {
    "text": "an awful lot of benchmark components in it it takes about five hours to run the full benchmark and you can go take a",
    "start": "1104450",
    "end": "1110390"
  },
  {
    "text": "look at the results which are published on the spec benchmark website and because they're published it means you",
    "start": "1110390",
    "end": "1115490"
  },
  {
    "text": "can also go and take a look to see how you're comparing your results to another comparable system you can go look up a",
    "start": "1115490",
    "end": "1120500"
  },
  {
    "text": "system with 16 cores and 60 gig and see how it performed or the specific Intel version of CPU there's an awful",
    "start": "1120500",
    "end": "1128360"
  },
  {
    "text": "lot of benchmarks in here I'm just pulling out a little subsection here these are the ones which are going to be focused in around integer performance",
    "start": "1128360",
    "end": "1134870"
  },
  {
    "text": "and of most interest to us and the ones specifically that we ran for for this",
    "start": "1134870",
    "end": "1140090"
  },
  {
    "text": "test was four to nine mcf so quick look at the script I think it's pretty",
    "start": "1140090",
    "end": "1145790"
  },
  {
    "start": "1143000",
    "end": "1143000"
  },
  {
    "text": "repetitive now we get the idea that we annotate first and then run I'm only running one iteration of this and I'm",
    "start": "1145790",
    "end": "1153049"
  },
  {
    "text": "not running the fool 5 hour test I'm just looking for basically a quick answer from from the spec system this",
    "start": "1153049",
    "end": "1159260"
  },
  {
    "text": "one is going to tell me how long it took to execute so this is a fixed work benchmark and so quicker is going to be",
    "start": "1159260",
    "end": "1164540"
  },
  {
    "text": "better again we use the CC 2 as the baseline performance and you can see in",
    "start": "1164540",
    "end": "1173510"
  },
  {
    "text": "here that we're seeing the similar scaling we saw with the Geekbench numbers when it first went up so 16 and",
    "start": "1173510",
    "end": "1178700"
  },
  {
    "text": "the same with the integer numbers inside UNIX bench so this test is confirming for us that the other tests are also",
    "start": "1178700",
    "end": "1185030"
  },
  {
    "text": "giving representative data you can also see the coefficient of variance in these tests is also quite low and",
    "start": "1185030",
    "end": "1193360"
  },
  {
    "text": "the runtime on these tests is much longer than our previous runtimes so this is not something you can just quickly run and get an easy answer like",
    "start": "1193360",
    "end": "1200620"
  },
  {
    "text": "the geek bench or you an expense you're gonna have to be pretty committed to running this to get some numbers out of it the last CPU benchmark I want to talk",
    "start": "1200620",
    "end": "1207610"
  },
  {
    "start": "1206000",
    "end": "1206000"
  },
  {
    "text": "about is going to be sis bench originally designed as a quick system test for my sequel server so it does a",
    "start": "1207610",
    "end": "1212740"
  },
  {
    "text": "whole bunch of different things in there it does a lot of different tests file i/o CPU memory and you can choose",
    "start": "1212740",
    "end": "1218830"
  },
  {
    "text": "whether you want to run each individual one it's actually being used I think right now in another talk the TCO talk",
    "start": "1218830",
    "end": "1224530"
  },
  {
    "text": "to compare CPU performance of different instance types the source code is there so you can build it you have to build it",
    "start": "1224530",
    "end": "1230650"
  },
  {
    "text": "it also means you can see how it's running it is really really simple the defaults will run in seconds that will",
    "start": "1230650",
    "end": "1237130"
  },
  {
    "text": "not give you any useful numbers it would be so quick that a context switch will make a difference so you really want to",
    "start": "1237130",
    "end": "1242260"
  },
  {
    "text": "make sure you understand how you're going to run it take a look at the suspend script that we're using again",
    "start": "1242260",
    "end": "1248740"
  },
  {
    "start": "1245000",
    "end": "1245000"
  },
  {
    "text": "annotator output when we run the suspense we can feed the parameters we want to run so in this case I'm only",
    "start": "1248740",
    "end": "1254500"
  },
  {
    "text": "going to do the CPU tests and I'm gonna be looking for prime numbers integer based and I'm gonna set that to a",
    "start": "1254500",
    "end": "1260710"
  },
  {
    "text": "hundred thousand prime numbers and that's actually going to cause the tests to run for a reasonable amount of time now because it's a time-based test the",
    "start": "1260710",
    "end": "1268030"
  },
  {
    "text": "quicker it runs the more it's doing if we take a look at this our baseline",
    "start": "1268030",
    "end": "1273370"
  },
  {
    "start": "1271000",
    "end": "1271000"
  },
  {
    "text": "again we reuse the Cici to our coefficient of variance is actually pretty low except on the c32 extra large",
    "start": "1273370",
    "end": "1280030"
  },
  {
    "text": "we're seeing an awful lot in there and the runtime is really really short this is the default numbers if I run this",
    "start": "1280030",
    "end": "1285669"
  },
  {
    "text": "with no extra parameters for the CPU test if I tuned it and those are the",
    "start": "1285669",
    "end": "1291580"
  },
  {
    "text": "numbers we set where we actually require a hundred thousand prime numbers we can see now that the scaling is much more in",
    "start": "1291580",
    "end": "1296860"
  },
  {
    "text": "line with what we expect the number of cores is increasing the number of the CPU ratio is increasing as the number of",
    "start": "1296860",
    "end": "1302710"
  },
  {
    "text": "cores increase our coefficient of variance is a lot better it's not perfect on all of them and our run time",
    "start": "1302710",
    "end": "1308200"
  },
  {
    "text": "is significantly longer so we know it's actually doing something now so if you're using suspension you're looking at suspense you definitely want",
    "start": "1308200",
    "end": "1314169"
  },
  {
    "text": "to spend time making sure you're running the whole benchmark",
    "start": "1314169",
    "end": "1318240"
  },
  {
    "text": "so a quick comparison across all of those tests this is really low a little bit too much data to be pulling up on a",
    "start": "1320450",
    "end": "1326840"
  },
  {
    "start": "1321000",
    "end": "1321000"
  },
  {
    "text": "big slide to be honest but we can see in here that eunuchs bench and the eunuchs PACs integer give very different numbers",
    "start": "1326840",
    "end": "1333679"
  },
  {
    "text": "so if it's integer performance that we're looking for in eunuchs bench we want to make sure we call out that specific component and not just rely",
    "start": "1333679",
    "end": "1340039"
  },
  {
    "text": "upon the overall number to give us an indication if we're looking at the suspense default tests again you can see",
    "start": "1340039",
    "end": "1346820"
  },
  {
    "text": "the numbers are very different compared to toons so make sure you're actually calling out the toon results when you do that so moving from CPU into memory",
    "start": "1346820",
    "end": "1356869"
  },
  {
    "start": "1356000",
    "end": "1356000"
  },
  {
    "text": "another hypothetical scenario and I'm probably enough to speed up a bit for our second talk here but the memory",
    "start": "1356869",
    "end": "1363080"
  },
  {
    "text": "based testing those you could use some of the previous benchmarks Geekbench etc but the one we're gonna call out",
    "start": "1363080",
    "end": "1369409"
  },
  {
    "text": "specifically would be stream benchmarking in this scenario we've already determined that we have a lot of memory requirements one wheel drive",
    "start": "1369409",
    "end": "1375759"
  },
  {
    "text": "20,000 megabytes a second of memory bandwidth and what instance would work best like how could we choose an",
    "start": "1375759",
    "end": "1381590"
  },
  {
    "text": "instance that's going to be appropriate for this again we ran all these tests on 1304 ten times nine times you get the",
    "start": "1381590",
    "end": "1388639"
  },
  {
    "start": "1385000",
    "end": "1385000"
  },
  {
    "text": "idea we're very repetitive in this so the stream benchmark is a very commonly",
    "start": "1388639",
    "end": "1394309"
  },
  {
    "start": "1391000",
    "end": "1391000"
  },
  {
    "text": "used benchmark which provides for tests it does a copy scale sum and triad triad",
    "start": "1394309",
    "end": "1400460"
  },
  {
    "text": "is the combination of the copy scale and some for our testing we're probably only interested in triad unless we know",
    "start": "1400460",
    "end": "1406190"
  },
  {
    "text": "specifically we're doing other operations the results are published although they're not very up-to-date not",
    "start": "1406190",
    "end": "1411470"
  },
  {
    "text": "many people are publishing now anymore but they are published if you're interested the other thing that's actually very interesting is people like",
    "start": "1411470",
    "end": "1417139"
  },
  {
    "text": "Intel will actually publish their stream results when they're launching new CPUs so you can see whether you're getting",
    "start": "1417139",
    "end": "1422149"
  },
  {
    "text": "what Intel expects you to get from your platform when you're testing it needs to be built by default runs on one thread",
    "start": "1422149",
    "end": "1427759"
  },
  {
    "text": "per CPU so the more CPUs you have the more it will test the memory bandwidth",
    "start": "1427759",
    "end": "1432859"
  },
  {
    "text": "I personally us internally we use a tool called stream scaling which is an open source project - it will work out the",
    "start": "1432859",
    "end": "1439460"
  },
  {
    "text": "right size of a ray to work on for memory testing the array size within stream has a very is very relative to",
    "start": "1439460",
    "end": "1446989"
  },
  {
    "text": "the performance of stream so when it was originally developed the benchmark operated on a couple of megabytes since",
    "start": "1446989",
    "end": "1452629"
  },
  {
    "text": "then we now have l3 caches that run up to 30 megabytes so if you're doing a two megabyte stream benchmark test you're",
    "start": "1452629",
    "end": "1459120"
  },
  {
    "text": "basically testing the cache you're not actually testing the dims that are in the box so you need to make sure the array actually fits significantly into",
    "start": "1459120",
    "end": "1466170"
  },
  {
    "text": "the box so you want to be using something with a couple of gigabytes sizeof array and there's some there's some ways to work that out appropriately",
    "start": "1466170",
    "end": "1472050"
  },
  {
    "text": "but stream scaling deals with that for us so the scripts are very repetitive we",
    "start": "1472050",
    "end": "1478560"
  },
  {
    "start": "1476000",
    "end": "1476000"
  },
  {
    "text": "do the same you run it you don't actually need to do anything you just specify stream and it will start up and",
    "start": "1478560",
    "end": "1483810"
  },
  {
    "text": "then we output these and publish them and then when we run it with sis bench which is the one that runs the same",
    "start": "1483810",
    "end": "1488910"
  },
  {
    "text": "benchmark we can do some comparison so if I take a look at stream triad",
    "start": "1488910",
    "end": "1494700"
  },
  {
    "start": "1493000",
    "end": "1493000"
  },
  {
    "text": "benchmark and then the output from Geekbench you'll notice that the numbers",
    "start": "1494700",
    "end": "1500010"
  },
  {
    "text": "are not the same and if I take a look at the default numbers they're wildly off and so the numbers from stream triad",
    "start": "1500010",
    "end": "1506880"
  },
  {
    "text": "from stream scaling are what I expect 55 gigabytes a second for a cc to Sandy",
    "start": "1506880",
    "end": "1512250"
  },
  {
    "text": "Bridges is close to what I expect the suspense default looks awful now the",
    "start": "1512250",
    "end": "1518490"
  },
  {
    "text": "reason for that is the suspense defaults",
    "start": "1518490",
    "end": "1523560"
  },
  {
    "text": "are very very small again it's just running inside cache and it's not even exercising any of the cache so you're",
    "start": "1523560",
    "end": "1529770"
  },
  {
    "text": "not going to get numbers that are effective for that and so definitely look at stream scaling if I dig through",
    "start": "1529770",
    "end": "1535110"
  },
  {
    "text": "the numbers my goal was to find something that did 20,000 megabytes a second so 20 gig almost everything",
    "start": "1535110",
    "end": "1541410"
  },
  {
    "text": "except the c3 large would be able to service that request if I was using the",
    "start": "1541410",
    "end": "1546630"
  },
  {
    "text": "numbers on Geekbench triad I would have found myself only looking at one instance so it's important to make sure",
    "start": "1546630",
    "end": "1551730"
  },
  {
    "text": "you're getting the numbers you're looking for testing disk IO now I'm",
    "start": "1551730",
    "end": "1557250"
  },
  {
    "text": "gonna be giving a talk shameless plug tomorrow and 45 minute long talk just on EBS I could spend now another two hours",
    "start": "1557250",
    "end": "1564390"
  },
  {
    "text": "talking about EBS and the different storage options there's a lot to it testing them is also quite complex you",
    "start": "1564390",
    "end": "1570150"
  },
  {
    "text": "need to understand what you're testing but I'll try and give you a little bit here to says I get you started with how you might do that so there's a lot of",
    "start": "1570150",
    "end": "1577500"
  },
  {
    "text": "different configurations to it and a whole bunch of parameters the tests are in do so when you're choosing storage benchmarks try and really understand",
    "start": "1577500",
    "end": "1583680"
  },
  {
    "text": "what is the it's very easy to use if we go through here so okay welcome back",
    "start": "1583680",
    "end": "1591720"
  },
  {
    "start": "1589000",
    "end": "1589000"
  },
  {
    "text": "so benchmarking provision die ops in gp2 if you're gonna be benchmarking that if you're gonna be spending time doing that please you must use an amazon EBS",
    "start": "1591720",
    "end": "1599429"
  },
  {
    "text": "optimized instance if you're not using an EBS optimized instance you're basically not caring about the",
    "start": "1599429",
    "end": "1604650"
  },
  {
    "text": "consistency of the performance because your network bandwidth is going to be shared with your application so that might be web requests coming in or",
    "start": "1604650",
    "end": "1611039"
  },
  {
    "text": "people doing database requests you're sharing the bandwidth and so if you don't get the performance you expect it's because the network isn't the way",
    "start": "1611039",
    "end": "1616679"
  },
  {
    "text": "it should be designed create provisioned IUP's volume attach the volume to the instance pre-warm the volumes",
    "start": "1616679",
    "end": "1622440"
  },
  {
    "text": "pre-warming the volumes is getting rid of that first access penalty so you can drive a lot more performance to it for",
    "start": "1622440",
    "end": "1628140"
  },
  {
    "text": "benchmarking not something you need to do typically in production and then you need to understand the queue length and",
    "start": "1628140",
    "end": "1633510"
  },
  {
    "text": "the latency now network-attached storage means there's a pipe between the instance and the volume the EBS server",
    "start": "1633510",
    "end": "1640289"
  },
  {
    "text": "the queue depth the queue length is the number of i/os that are in there the more iOS you have in there",
    "start": "1640289",
    "end": "1646500"
  },
  {
    "text": "the more you can drive the volume but it also increases your latency and so what I'm calling out here is the fact that is",
    "start": "1646500",
    "end": "1652049"
  },
  {
    "text": "you increase the queue depth you will impact your latency so you need to find the right queue depth and typically means the number of threads running on",
    "start": "1652049",
    "end": "1657929"
  },
  {
    "text": "your system and the amount of work is doing testing disk i/o there's a lot of",
    "start": "1657929",
    "end": "1663809"
  },
  {
    "start": "1661000",
    "end": "1661000"
  },
  {
    "text": "different ways to do it I see a lot of people still doing DD and coffee if you're doing DD and coffee you're",
    "start": "1663809",
    "end": "1668970"
  },
  {
    "text": "actually testing page cache you might as well be testing the l3 memory in the Box again it's not actually testing the disk",
    "start": "1668970",
    "end": "1674490"
  },
  {
    "text": "it's just checking how fast learn extra windows can copy something um the one we use internally when we spend a lot of",
    "start": "1674490",
    "end": "1679590"
  },
  {
    "text": "time on we're working very hard to publish you know how to do an F i/o benchmark is the FIO flexible i/o tester",
    "start": "1679590",
    "end": "1687590"
  },
  {
    "text": "the configurations for it can be a little daunting you can take these away and dig through them but it enables you",
    "start": "1688159",
    "end": "1695460"
  },
  {
    "text": "to do a lot of very controlled parameters including things like direct i/o or the size of file you're testing",
    "start": "1695460",
    "end": "1700740"
  },
  {
    "text": "on how long as you do the test you can do fixed work you could do relative work you can do a whole bunch of stuff in it",
    "start": "1700740",
    "end": "1706200"
  },
  {
    "text": "I advise you all if you're not using FIO today for this testing spend some time and use it just to pull out some of the",
    "start": "1706200",
    "end": "1713669"
  },
  {
    "text": "differences when we're doing the testing and why you should be looking at a real death testing for the the difference is here in time is I do a",
    "start": "1713669",
    "end": "1719789"
  },
  {
    "text": "copy first and you'll see that it says it took fifty nine megabytes a second if I do an RM on that says it did at one",
    "start": "1719789",
    "end": "1725160"
  },
  {
    "text": "point two gigabytes the these numbers are not real and that's why FIO truly gives numbers you can you can rely upon",
    "start": "1725160",
    "end": "1730320"
  },
  {
    "text": "as we go through that if you're moving away from just doing simple i/o testing please make sure you're leveraging",
    "start": "1730320",
    "end": "1736020"
  },
  {
    "text": "things like the CloudWatch metrics that publish it or understanding exactly how many you know or proving also together",
    "start": "1736020",
    "end": "1743400"
  },
  {
    "text": "the larger configuration things like striping etc so to summarize on the benchmarking if you have to do",
    "start": "1743400",
    "end": "1749549"
  },
  {
    "text": "application if you have to do synthetic benchmarking please make sure your practice ting something that's practical",
    "start": "1749549",
    "end": "1754799"
  },
  {
    "text": "for your application you could only use synthetic benchmarks if you're careful choose the best match mark that",
    "start": "1754799",
    "end": "1761010"
  },
  {
    "text": "represent your application know what you're going to be testing for analysis make sure you know what best means make",
    "start": "1761010",
    "end": "1766289"
  },
  {
    "text": "sure you know why you're testing it run enough tests to understand variability a baseline make sure you know what a good",
    "start": "1766289",
    "end": "1772770"
  },
  {
    "text": "result really is and samples keep all of your results please push all of your results to s3 or dynamo or my sequel or",
    "start": "1772770",
    "end": "1779909"
  },
  {
    "text": "something of that nature and with that I'd like to introduce Bennie Johnson from justy Benny's gonna talk us through",
    "start": "1779909",
    "end": "1786539"
  },
  {
    "text": "how they're actually doing application and benchmarking in their environment Thank You Benny thanks for it so",
    "start": "1786539",
    "end": "1797030"
  },
  {
    "text": "Google's literally 15 minutes I'll have to rush uh but so as Dougal said I'm",
    "start": "1797030",
    "end": "1803130"
  },
  {
    "text": "Vinnie Johnson I'm the head of API is it just eat I've got a quick one slide on what just soup is for those you don't",
    "start": "1803130",
    "end": "1809100"
  },
  {
    "text": "know and then I'll get into how we automated our application benchmarking",
    "start": "1809100",
    "end": "1815120"
  },
  {
    "text": "so just eat we're a ecommerce takeaway sites we don't cook takeaway we don't",
    "start": "1815120",
    "end": "1821130"
  },
  {
    "start": "1817000",
    "end": "1817000"
  },
  {
    "text": "deliver takeaway we provide the technology that consumers can order that takeaway from a multitude of restaurants",
    "start": "1821130",
    "end": "1826590"
  },
  {
    "text": "and those restaurants can update consumers on the progress of the orders about two and a half years ago we",
    "start": "1826590",
    "end": "1833010"
  },
  {
    "text": "decided to move out of our data center and into AWS it's about a twelve month long process and after twelve months",
    "start": "1833010",
    "end": "1840299"
  },
  {
    "text": "we'd successfully successfully moved everything from dev to QA to integration to production all into AWS what eight",
    "start": "1840299",
    "end": "1847890"
  },
  {
    "text": "abyss services do we use basically if aw release it someone and just eat we'll",
    "start": "1847890",
    "end": "1852960"
  },
  {
    "text": "find a use for it I'm quite sure right now someone's in the office trying to work out how to use our code deploy so",
    "start": "1852960",
    "end": "1861210"
  },
  {
    "text": "that's just eat forget into how I just want to say through why we were doing",
    "start": "1861210",
    "end": "1866549"
  },
  {
    "text": "automated benchmarking so we're moving out of the data center key we're moving data of us we need to find out what's",
    "start": "1866549",
    "end": "1871769"
  },
  {
    "text": "our instance types to run on there was a lot of sort of manual benchmarking and finding the best instances and stuff like that and that was all fine you know",
    "start": "1871769",
    "end": "1878639"
  },
  {
    "text": "we put it into spreadsheets and wondering what you did win and stuff like this but it became apparent that we",
    "start": "1878639",
    "end": "1886379"
  },
  {
    "text": "really wanted to automate it for getting us the public API as an example this talk and our public API is basically",
    "start": "1886379",
    "end": "1893149"
  },
  {
    "text": "orchestration an authentication layer around our internal API that provides the data out to our apps for iPhone and",
    "start": "1893149",
    "end": "1900029"
  },
  {
    "text": "Android that sort of thing and at the time we weren't able to pilot them so it was very important that when",
    "start": "1900029",
    "end": "1905489"
  },
  {
    "text": "we released application updates to their public API we weren't going to negatively affect the consumers and that's you know if we change the mi or",
    "start": "1905489",
    "end": "1911759"
  },
  {
    "text": "if we change the SDK or who made significant application changes we want to make sure we weren't gonna have a negative impact so it's worth spending",
    "start": "1911759",
    "end": "1918059"
  },
  {
    "text": "the time to automate our benchmarking so what do we need when we're benchmarking we need an own state environment we need",
    "start": "1918059",
    "end": "1925889"
  },
  {
    "text": "a set of tests and we need some metrics so how do we get our non-state environment well at just eat",
    "start": "1925889",
    "end": "1931679"
  },
  {
    "text": "everything's are using CloudFormation we've got our own little bit of custom tooling around the top of it I looked",
    "start": "1931679",
    "end": "1936719"
  },
  {
    "text": "around what are we doing watch out there at the moment that we're using our we're using teamcity that does l our builds",
    "start": "1936719",
    "end": "1942719"
  },
  {
    "text": "and our deploys let's use it to deploy our environments as well so we hooked into team city and from a single click",
    "start": "1942719",
    "end": "1948869"
  },
  {
    "text": "you can launch an entire environment that you would need in your own V PC to run the public API so all the internal",
    "start": "1948869",
    "end": "1955289"
  },
  {
    "text": "API is it needs the Dynamo tables or throughputs all those sort of things are launched for you in an Owen State and we",
    "start": "1955289",
    "end": "1961320"
  },
  {
    "text": "launched what we call sort of development sized stacks so it's the same ec2 instance type that we have in",
    "start": "1961320",
    "end": "1966509"
  },
  {
    "text": "production but only one of each instance we don't run 24 of these that's there's not more interested in when we're benchmarking and we run this all in the",
    "start": "1966509",
    "end": "1973889"
  },
  {
    "text": "same zone because we don't want to have latency on some benchmarking tiers that we don't have in others so that's our",
    "start": "1973889",
    "end": "1979379"
  },
  {
    "text": "environment cool what else do we need we need a set of tests",
    "start": "1979379",
    "end": "1984429"
  },
  {
    "text": "again looked around the company found this tool wept that the website guys been using for their performance until",
    "start": "1984429",
    "end": "1989500"
  },
  {
    "text": "destined I'm sure you've all got your own favorite performance testing tool but you know so we went through okay we",
    "start": "1989500",
    "end": "1995230"
  },
  {
    "text": "need to create a set of tests to test this public API per rail users will be Android the iPhone out what do they do",
    "start": "1995230",
    "end": "2001590"
  },
  {
    "text": "okay they do three searches and then they look at seven menus and they build one basket and they add ten items to",
    "start": "2001590",
    "end": "2007380"
  },
  {
    "text": "this basket and you get an idea of you know the youth the users of your application the use cases of your API now we build those scenarios into this",
    "start": "2007380",
    "end": "2014400"
  },
  {
    "text": "and you know little loops and if statements try to get those averages right and really you're making a best guess and and you don't really want to",
    "start": "2014400",
    "end": "2020610"
  },
  {
    "text": "be guessing so we have a look at the metrics out the other side and a little later on I'll tell you where we get",
    "start": "2020610",
    "end": "2026070"
  },
  {
    "text": "these graphs from an owl but for now what's important the one on the left here is production at a one of our",
    "start": "2026070",
    "end": "2031860"
  },
  {
    "text": "public API instances in production on a Saturday night and the one on the right is the same you know public API instance",
    "start": "2031860",
    "end": "2038279"
  },
  {
    "text": "but during our benchmark testing so you can see them they're not perfect they're not identical but I'm trying to coin a",
    "start": "2038279",
    "end": "2045419"
  },
  {
    "text": "phrase here this comparable load ratios and it's a terrible phrase and if you can think of a better one and tell me at the QA but what we're trying to do here",
    "start": "2045419",
    "end": "2052169"
  },
  {
    "text": "is you know for every six calls to get basket there's two calls to add item or two calls to update item it's it's",
    "start": "2052169",
    "end": "2058470"
  },
  {
    "text": "trying to make sure that we're stressing the API in the right way that we would be in production there's no point putting in you know the",
    "start": "2058470",
    "end": "2064349"
  },
  {
    "text": "same number of overall calls per second if all those are just going to a local cache whereas in production it's calling",
    "start": "2064349",
    "end": "2069419"
  },
  {
    "text": "other API is and going off to dynamo we want to make sure in our performance testing environment we're recreating that same comparable load ratios so now",
    "start": "2069419",
    "end": "2078868"
  },
  {
    "text": "I've got an environment we've got our set of tests what we're looking for now is automating this you know I want this to run everyday you know I'd love to",
    "start": "2078869",
    "end": "2086099"
  },
  {
    "text": "hook it up to our continuous deployment but I don't really you know we run it for about an hour and yeah so we run it",
    "start": "2086099",
    "end": "2091888"
  },
  {
    "text": "nightly and our schedule here is teamcity it will launch our environment",
    "start": "2091889",
    "end": "2097260"
  },
  {
    "text": "and its own feet a VP see all all the incidents they talk about then it'll run the test Runner and all the test agents",
    "start": "2097260",
    "end": "2103380"
  },
  {
    "text": "again all through CloudFormation they'll all launch they fire off run for an hour run all those tests that we set up get",
    "start": "2103380",
    "end": "2109920"
  },
  {
    "text": "the results back store them in s3 so what are these results these are what",
    "start": "2109920",
    "end": "2114960"
  },
  {
    "text": "API methods were called how many times they were called how long they responded well that's useful I mean you know hopefully those",
    "start": "2114960",
    "end": "2121590"
  },
  {
    "text": "fingers haven't changed but realistically for benchmarking you need a lot more metrics than that you know",
    "start": "2121590",
    "end": "2126660"
  },
  {
    "text": "our CPU could be you know under twice as much strain for this new application release and as long as it didn't go over",
    "start": "2126660",
    "end": "2132390"
  },
  {
    "text": "a tipping point at women affected those response time so you might know about it so that's where a next step comes in",
    "start": "2132390",
    "end": "2138180"
  },
  {
    "text": "down the bottom here are results publisher and at this stage we can tear down those features under tear so we can",
    "start": "2138180",
    "end": "2143370"
  },
  {
    "text": "get rid of those tear stations those test runs we don't need those anymore that you know we've utilized them for the our get rid of them and then we go to our monitoring service",
    "start": "2143370",
    "end": "2150060"
  },
  {
    "text": "we don't tear this one down so when I go off forget the metrics of it so I'm just going to sort of dive into what our monitoring server is and how we get",
    "start": "2150060",
    "end": "2155220"
  },
  {
    "text": "metrics are just eight so when we first started moving into AWS it became",
    "start": "2155220",
    "end": "2161580"
  },
  {
    "start": "2158000",
    "end": "2158000"
  },
  {
    "text": "apparent that cloud watch wasn't up to spec for what we needed the retention",
    "start": "2161580",
    "end": "2167190"
  },
  {
    "text": "period the granularity just wasn't what we needed for a production system so I went around looking on the open source",
    "start": "2167190",
    "end": "2173460"
  },
  {
    "text": "market found stats T it's it's it's it's there and basically it aggregates your",
    "start": "2173460",
    "end": "2179550"
  },
  {
    "text": "stats for you I sent over a carbon back-end put some little ten second increments and does some basic system",
    "start": "2179550",
    "end": "2185790"
  },
  {
    "text": "analysis on them in graphite produces nice little graphs that you saw earlier so we can get little pretty lines about",
    "start": "2185790",
    "end": "2191430"
  },
  {
    "text": "whatever metrics we're collecting so this is what we used to collect and display metrics now what sort of metrics",
    "start": "2191430",
    "end": "2197100"
  },
  {
    "text": "we want so this is sort of three types of metric as I see it and that's our application metrics so yeah all those",
    "start": "2197100",
    "end": "2203520"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "initial ones we've talked about a really that you know what was called and how many how many times how long it took but",
    "start": "2203520",
    "end": "2208740"
  },
  {
    "text": "also what that API then did how many calls it made to dynamo how many calls as it made to seek or how long do those",
    "start": "2208740",
    "end": "2214200"
  },
  {
    "text": "take you know I want to hear about all those because I want to know from any expert as my application is using twice",
    "start": "2214200",
    "end": "2220410"
  },
  {
    "text": "as many dynamic calls I want to know that before I release sure I could just release it and when the alarms go off increased its threshold but I'd rather",
    "start": "2220410",
    "end": "2227010"
  },
  {
    "text": "not do it that way you know I'd rather know before I release that it's going to be using twice as much of an other resource so that's our application",
    "start": "2227010",
    "end": "2233550"
  },
  {
    "text": "metrics and then you get our Hardware metrics so we're a dotnet shop at just eat so we're running on Windows Hardware",
    "start": "2233550",
    "end": "2241500"
  },
  {
    "text": "don't don't so how we're matrix were interested in we're Justin you know CPU",
    "start": "2241500",
    "end": "2247140"
  },
  {
    "text": "memory disk queue lengths garbage clip in context with all these sort of things and windows these are all sold in",
    "start": "2247140",
    "end": "2253650"
  },
  {
    "text": "performance monitor so again you know and we're looking on the market found this cool this tool called perf tap it",
    "start": "2253650",
    "end": "2261200"
  },
  {
    "text": "basically just runs every five minutes you know consults its config what metrics are you interested in ships",
    "start": "2261200",
    "end": "2267029"
  },
  {
    "text": "those off to stats d now we wanted these same metrics on all of our instances so this is baked into the a.m. eyes they're",
    "start": "2267029",
    "end": "2272910"
  },
  {
    "text": "using just eat you'll get this by default so tell L application metrics L Hardware metrics but there's also AWS",
    "start": "2272910",
    "end": "2279450"
  },
  {
    "text": "metrics you just can't find anywhere else and for us it's really our DynamoDB throughput and iOS curious queue lengths",
    "start": "2279450",
    "end": "2285019"
  },
  {
    "text": "we looked around couldn't find a tool head to actually write one ourselves this time so it's just a little Ruby",
    "start": "2285019",
    "end": "2290339"
  },
  {
    "text": "cron job that runs on a small Linux box in each sort of EPC I will ship every",
    "start": "2290339",
    "end": "2296579"
  },
  {
    "text": "five minutes all ship these database metrics into our stats for you so never got the three different types of metrics we're interested in",
    "start": "2296579",
    "end": "2302509"
  },
  {
    "text": "we've had our environment we've run our tests now let's start to put those together and see what we can see so",
    "start": "2302509",
    "end": "2308150"
  },
  {
    "text": "again we're using team cities some house turned into a team city talk but",
    "start": "2308150",
    "end": "2314970"
  },
  {
    "text": "basically our results publisher they're seeing going to go off and and look at all the metrics and how does it know",
    "start": "2314970",
    "end": "2320579"
  },
  {
    "text": "what metrics to go off and look at so in github we've got our source we've got",
    "start": "2320579",
    "end": "2325710"
  },
  {
    "text": "all our tests we store those and github with our source so you know for this version the source these are the benchmark tests I was running and we",
    "start": "2325710",
    "end": "2331859"
  },
  {
    "text": "also have a little comma separated file that's just here's all the metrics that I'm interested in for these tests for",
    "start": "2331859",
    "end": "2337079"
  },
  {
    "text": "this version of the code and you can go back at any point in time but you should in theory be able to recreate them and",
    "start": "2337079",
    "end": "2342720"
  },
  {
    "text": "if you're storing information there as well you'll get all the same instance type that you had at that particular time so then our results publisher would",
    "start": "2342720",
    "end": "2349680"
  },
  {
    "text": "go off produce these lovely little grass do some basic statistical analysis find your 90th 95th 99th percentile",
    "start": "2349680",
    "end": "2356450"
  },
  {
    "text": "after seeing Google's talk I'll now add coefficient of variance to this and let",
    "start": "2356450",
    "end": "2361950"
  },
  {
    "text": "go often we can put some hard figures in there in that list of metrics you know these are all the metrics I'm interested in it shouldn't go above this value",
    "start": "2361950",
    "end": "2368249"
  },
  {
    "text": "which shouldn't go below this value that sort of thing but that gets really fiddly I don't wanna be sort of changing that all the time so probably more",
    "start": "2368249",
    "end": "2374640"
  },
  {
    "text": "interested in is what's changed since last on my rareness you know I've just changed the SDK we're using this ran",
    "start": "2374640",
    "end": "2379769"
  },
  {
    "text": "happily yesterday it's raining today what's the difference well so we might use another teamcity feature",
    "start": "2379769",
    "end": "2385230"
  },
  {
    "text": "their statistics page and this is typically you know I believe it was supposed to be used for throwing your",
    "start": "2385230",
    "end": "2390240"
  },
  {
    "text": "build time or your compile time but you know it's just in your build log you just output a little commands and you can get the statistics graphs for you so",
    "start": "2390240",
    "end": "2396470"
  },
  {
    "text": "what we're seeing across the bottom here is a month of benchmark testing nightly",
    "start": "2396470",
    "end": "2401670"
  },
  {
    "text": "on our public API this gets in this graph because we don't benchmark on the weekends and because we don't release on",
    "start": "2401670",
    "end": "2407550"
  },
  {
    "text": "the weekends we're not making change and so could I'm read here you can see one of our methods actually you know",
    "start": "2407550",
    "end": "2413520"
  },
  {
    "text": "decreased it got slower and this broke the build so you can break the build and say you're not allowed to deploy the",
    "start": "2413520",
    "end": "2418890"
  },
  {
    "text": "public API anymore until you fix these metrics and get these values back down to where they should be and from look",
    "start": "2418890",
    "end": "2424950"
  },
  {
    "text": "for days later someone's something to do that and fixed it and we're able to move on so that's how we've done automated",
    "start": "2424950",
    "end": "2431520"
  },
  {
    "text": "benchmarking ayat just eat I've got a few minutes left so I'm going to tell you about stress testing and how a sort",
    "start": "2431520",
    "end": "2438720"
  },
  {
    "text": "of made use of that same infrastructure in those same ideals do stress testing",
    "start": "2438720",
    "end": "2443810"
  },
  {
    "text": "it's basically the stress testing were not doing this automated this is a manual thing we're doing and what we're doing here instead of me just launching",
    "start": "2443810",
    "end": "2450690"
  },
  {
    "text": "all the stacks I need for the public API I'll get the website guys ones as well launch all their steps the call center",
    "start": "2450690",
    "end": "2457020"
  },
  {
    "text": "launch all their sticks and not the development sized ones the proper production size stacks so you know in my",
    "start": "2457020",
    "end": "2462630"
  },
  {
    "text": "VP see I now have an entire replicate of our production size system and I'll use you know the same tests that I have but",
    "start": "2462630",
    "end": "2468930"
  },
  {
    "text": "plus the website guys ones plus the call center guys ones and be able to be able to put our production load so I start",
    "start": "2468930",
    "end": "2475470"
  },
  {
    "text": "putting a thousand orders a minute into the system and it should handle it fine because that's what it was doing on production on Saturday 9:00 and then we",
    "start": "2475470",
    "end": "2483600"
  },
  {
    "text": "start to scale this we get ok what does it look like if I put 1,500 orders a minute you know what components do we need to",
    "start": "2483600",
    "end": "2488790"
  },
  {
    "text": "scale and its usefulness you know there's components in our system that aren't necessarily horizontally scalable",
    "start": "2488790",
    "end": "2494160"
  },
  {
    "text": "and you want to know how much Headroom you've got there you know our Nets not horizontally scalable how many orders a",
    "start": "2494160",
    "end": "2499950"
  },
  {
    "text": "minute is going to take before this becomes a problem okay we've got a better year's worth of growth there that's fine I'm sure",
    "start": "2499950",
    "end": "2506730"
  },
  {
    "text": "AWS will release it as a service before then so the other thing you know you're doing",
    "start": "2506730",
    "end": "2512670"
  },
  {
    "text": "here you fault you want to find those bottle mates but you also sort of look at the pieces you're scaling and try to understand why you're scaling them and",
    "start": "2512670",
    "end": "2518550"
  },
  {
    "text": "so I just got a quick war story on an architectural change we made through stress testing that we didn't expect to",
    "start": "2518550",
    "end": "2524190"
  },
  {
    "text": "you know to come up but it's just something we found so a business logic isn't terribly important here or",
    "start": "2524190",
    "end": "2529740"
  },
  {
    "text": "exciting but you know we've got an order engine it's putting order state change messages there's a SNS topic order state",
    "start": "2529740",
    "end": "2536070"
  },
  {
    "text": "change and the order engines firing down this order has been paid for this order it's been sent to a restaurant this",
    "start": "2536070",
    "end": "2541320"
  },
  {
    "text": "orders now in a kitchen going into their SNS topic and then we've got little workers that want to process and listen",
    "start": "2541320",
    "end": "2546600"
  },
  {
    "text": "to those messages and then respond and do sit and work on them so they know they're on queues hooked up to yes and yes you know it looks fairly typical it",
    "start": "2546600",
    "end": "2552600"
  },
  {
    "text": "looks like you know hopefully what it should and then you know we start scaling twice as many orders so twice as",
    "start": "2552600",
    "end": "2558570"
  },
  {
    "text": "many order engines yeah that makes sense twice as many order Reece indos what well it's only a small percentage of",
    "start": "2558570",
    "end": "2564750"
  },
  {
    "text": "orders that need to be rescind why why we're now running six in three medium order Reese endures like just didn't",
    "start": "2564750",
    "end": "2570540"
  },
  {
    "text": "seem right and when you look into it you can see what what were those order Eason is doing they were spending most of the",
    "start": "2570540",
    "end": "2575820"
  },
  {
    "text": "time reading messages they didn't care about they weren't responding to so we changed the architecture so we had a",
    "start": "2575820",
    "end": "2582060"
  },
  {
    "text": "topic per order state so there's a order unacknowledged states or an order in the",
    "start": "2582060",
    "end": "2587070"
  },
  {
    "text": "kitchen sorry to order in the kitchen topic and each of those queues off each one of those topics and this meant auto",
    "start": "2587070",
    "end": "2593070"
  },
  {
    "text": "rescind it was only ever receiving messages that it needed to rescind so you know I'm I'm sure there's an a",
    "start": "2593070",
    "end": "2598980"
  },
  {
    "text": "Darius white paper that explains exactly this that we just didn't read but you know it's just one of those things that we found through stress testing that",
    "start": "2598980",
    "end": "2606090"
  },
  {
    "text": "Amin saved us money which is always a good thing so that was that's just eight that's how",
    "start": "2606090",
    "end": "2613530"
  },
  {
    "text": "we automated benchmarking that's have used stress testing hopefully that was useful hopefully interesting I'll be",
    "start": "2613530",
    "end": "2620010"
  },
  {
    "text": "available for Q&A afterwards",
    "start": "2620010",
    "end": "2623060"
  }
]