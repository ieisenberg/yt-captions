[
  {
    "start": "0",
    "end": "97000"
  },
  {
    "text": "[Music]",
    "start": "640",
    "end": "4480"
  },
  {
    "text": "hi I'm Madhuri Perry from Amazon Web",
    "start": "4480",
    "end": "7609"
  },
  {
    "text": "Services today I'm going to show you how",
    "start": "7609",
    "end": "10490"
  },
  {
    "text": "containers are a natural fit for Amazon",
    "start": "10490",
    "end": "13129"
  },
  {
    "text": "ec2 spot instances let's level set on",
    "start": "13129",
    "end": "16129"
  },
  {
    "text": "two concepts I will be covering in this",
    "start": "16129",
    "end": "17990"
  },
  {
    "text": "video what are spot instances spot",
    "start": "17990",
    "end": "21170"
  },
  {
    "text": "instances are spare compute capacity in",
    "start": "21170",
    "end": "23630"
  },
  {
    "text": "the AWS club available to you at steep",
    "start": "23630",
    "end": "26300"
  },
  {
    "text": "discount compared to on-demand prices",
    "start": "26300",
    "end": "28730"
  },
  {
    "text": "the only difference between on-demand",
    "start": "28730",
    "end": "31189"
  },
  {
    "text": "instances and spot instances is that",
    "start": "31189",
    "end": "34130"
  },
  {
    "text": "part instances can be interrupted with",
    "start": "34130",
    "end": "36260"
  },
  {
    "text": "two minutes of notification when on",
    "start": "36260",
    "end": "38690"
  },
  {
    "text": "demand needs capacity back Amazon",
    "start": "38690",
    "end": "41180"
  },
  {
    "text": "easiest service enables you to deploy",
    "start": "41180",
    "end": "43820"
  },
  {
    "text": "manage and run container workloads and",
    "start": "43820",
    "end": "46670"
  },
  {
    "text": "easiest cluster has a set of ec2",
    "start": "46670",
    "end": "49700"
  },
  {
    "text": "instances where containers are run by",
    "start": "49700",
    "end": "52040"
  },
  {
    "text": "service scheduler the service scheduler",
    "start": "52040",
    "end": "55070"
  },
  {
    "text": "component of ECS ensures that desired",
    "start": "55070",
    "end": "58130"
  },
  {
    "text": "number of containers are scheduled and",
    "start": "58130",
    "end": "60410"
  },
  {
    "text": "available on the container instances in",
    "start": "60410",
    "end": "62870"
  },
  {
    "text": "the cluster this component replaces any",
    "start": "62870",
    "end": "65990"
  },
  {
    "text": "interrupted containers now let me",
    "start": "65990",
    "end": "69140"
  },
  {
    "text": "demonstrate how easy to spot and ezs can",
    "start": "69140",
    "end": "72350"
  },
  {
    "text": "work together and how easy a service",
    "start": "72350",
    "end": "74840"
  },
  {
    "text": "scheduler manages interruptions let's",
    "start": "74840",
    "end": "77660"
  },
  {
    "text": "begin by creating an easy s service that",
    "start": "77660",
    "end": "80390"
  },
  {
    "text": "has container scheduled across separate",
    "start": "80390",
    "end": "82610"
  },
  {
    "text": "instances we will then proceed to",
    "start": "82610",
    "end": "84860"
  },
  {
    "text": "terminate one of the ec2 spot instances",
    "start": "84860",
    "end": "87650"
  },
  {
    "text": "by triggering a mock interruption and",
    "start": "87650",
    "end": "90380"
  },
  {
    "text": "see how service scheduler handles",
    "start": "90380",
    "end": "93140"
  },
  {
    "text": "interruptions smoothly let's get started",
    "start": "93140",
    "end": "96550"
  },
  {
    "text": "let me show you how to launch the",
    "start": "96550",
    "end": "99020"
  },
  {
    "start": "97000",
    "end": "197000"
  },
  {
    "text": "easiest cluster that is powered by ec2",
    "start": "99020",
    "end": "101510"
  },
  {
    "text": "spot instances to set a PCS cluster in",
    "start": "101510",
    "end": "104479"
  },
  {
    "text": "your AWS account you will begin by",
    "start": "104479",
    "end": "106820"
  },
  {
    "text": "signing in to the AWS management console",
    "start": "106820",
    "end": "109490"
  },
  {
    "text": "with your username and password go to",
    "start": "109490",
    "end": "112430"
  },
  {
    "text": "the easiest console by choosing elastic",
    "start": "112430",
    "end": "115340"
  },
  {
    "text": "container service under compute click on",
    "start": "115340",
    "end": "118850"
  },
  {
    "text": "create cluster button for this video we",
    "start": "118850",
    "end": "121369"
  },
  {
    "text": "will select the ec2 Linux i+ networking",
    "start": "121369",
    "end": "124460"
  },
  {
    "text": "mode this mode will launch a cluster",
    "start": "124460",
    "end": "126830"
  },
  {
    "text": "template that will create the easiest",
    "start": "126830",
    "end": "128509"
  },
  {
    "text": "cluster for you along with V PC sub",
    "start": "128509",
    "end": "131660"
  },
  {
    "text": "and not a scaling group with Linux am i",
    "start": "131660",
    "end": "134650"
  },
  {
    "text": "enter the cluster named as spot ECS",
    "start": "134650",
    "end": "137900"
  },
  {
    "text": "cluster demo and under the provisioning",
    "start": "137900",
    "end": "140630"
  },
  {
    "text": "model select spot choose an instance",
    "start": "140630",
    "end": "143600"
  },
  {
    "text": "type from drop-down and enter number of",
    "start": "143600",
    "end": "146840"
  },
  {
    "text": "instances as three leave other values as",
    "start": "146840",
    "end": "149750"
  },
  {
    "text": "default and choose a key pair that you",
    "start": "149750",
    "end": "152210"
  },
  {
    "text": "would want to use to connect to the ec2",
    "start": "152210",
    "end": "154970"
  },
  {
    "text": "instances with for purposes of this",
    "start": "154970",
    "end": "161690"
  },
  {
    "text": "walkthrough you can leave all VPC fields",
    "start": "161690",
    "end": "164390"
  },
  {
    "text": "as default which will create a brand new",
    "start": "164390",
    "end": "166640"
  },
  {
    "text": "V PC with subnets for your cluster you",
    "start": "166640",
    "end": "169520"
  },
  {
    "text": "could alternatively select the V PC that",
    "start": "169520",
    "end": "172850"
  },
  {
    "text": "has been provisioned prior select the",
    "start": "172850",
    "end": "175790"
  },
  {
    "text": "container instance I am role this is",
    "start": "175790",
    "end": "178310"
  },
  {
    "text": "used by container agents on the ec2",
    "start": "178310",
    "end": "181070"
  },
  {
    "text": "instances to make Amazon ECS API actions",
    "start": "181070",
    "end": "184940"
  },
  {
    "text": "on your behalf select the spots lead I",
    "start": "184940",
    "end": "188270"
  },
  {
    "text": "am role this is used by Amazon easiest",
    "start": "188270",
    "end": "191120"
  },
  {
    "text": "to create spot fleet requests on your",
    "start": "191120",
    "end": "193490"
  },
  {
    "text": "behalf click create now you can see the",
    "start": "193490",
    "end": "199310"
  },
  {
    "start": "197000",
    "end": "284000"
  },
  {
    "text": "easiest cluster creation process when",
    "start": "199310",
    "end": "201800"
  },
  {
    "text": "this completes you can see the spot",
    "start": "201800",
    "end": "204110"
  },
  {
    "text": "fleet request ID in the resources tab of",
    "start": "204110",
    "end": "206690"
  },
  {
    "text": "the cloud formation copy this and",
    "start": "206690",
    "end": "209210"
  },
  {
    "text": "navigate to the dashboard in the left",
    "start": "209210",
    "end": "211820"
  },
  {
    "text": "hand bar click on the spot request let's",
    "start": "211820",
    "end": "214220"
  },
  {
    "text": "paste the SF r ID that we just copy as",
    "start": "214220",
    "end": "217570"
  },
  {
    "text": "we see in the instances tab here these",
    "start": "217570",
    "end": "220760"
  },
  {
    "text": "are the ec2 spot instances that are part",
    "start": "220760",
    "end": "223370"
  },
  {
    "text": "of a cs cluster now notice how each of",
    "start": "223370",
    "end": "226280"
  },
  {
    "text": "these instances has a request ID and",
    "start": "226280",
    "end": "228530"
  },
  {
    "text": "that is the s ir ID short for spot",
    "start": "228530",
    "end": "231680"
  },
  {
    "text": "instance request ID you can also see",
    "start": "231680",
    "end": "234740"
  },
  {
    "text": "here that the number of instances",
    "start": "234740",
    "end": "236450"
  },
  {
    "text": "specified in a CS cluster screen are the",
    "start": "236450",
    "end": "239180"
  },
  {
    "text": "ones that",
    "start": "239180",
    "end": "239910"
  },
  {
    "text": "see a started capacity let's head back",
    "start": "239910",
    "end": "243630"
  },
  {
    "text": "over to the elastic container service",
    "start": "243630",
    "end": "245820"
  },
  {
    "text": "easier screen and see our cluster that",
    "start": "245820",
    "end": "249120"
  },
  {
    "text": "we just created",
    "start": "249120",
    "end": "250260"
  },
  {
    "text": "let scheduler service using a sample",
    "start": "250260",
    "end": "252660"
  },
  {
    "text": "task definition now see that the",
    "start": "252660",
    "end": "254820"
  },
  {
    "text": "containers are running on each of the",
    "start": "254820",
    "end": "256829"
  },
  {
    "text": "ec2 instances to create a service click",
    "start": "256830",
    "end": "260040"
  },
  {
    "text": "on configure service and select the",
    "start": "260040",
    "end": "262230"
  },
  {
    "text": "launch type as ec2 I'm choosing a task",
    "start": "262230",
    "end": "265230"
  },
  {
    "text": "definition here called console sample",
    "start": "265230",
    "end": "267510"
  },
  {
    "text": "app which runs on port 80 click next",
    "start": "267510",
    "end": "274290"
  },
  {
    "text": "step",
    "start": "274290",
    "end": "274580"
  },
  {
    "text": "in the load balancing section choose",
    "start": "274580",
    "end": "277710"
  },
  {
    "text": "none leave the rest of settings as ease",
    "start": "277710",
    "end": "280080"
  },
  {
    "text": "review details and click create service",
    "start": "280080",
    "end": "283730"
  },
  {
    "text": "notice how the tasks are being placed by",
    "start": "283730",
    "end": "286590"
  },
  {
    "text": "service scheduler you notice here that",
    "start": "286590",
    "end": "288990"
  },
  {
    "text": "each of these two copies of the task is",
    "start": "288990",
    "end": "291390"
  },
  {
    "text": "being placed on separate container",
    "start": "291390",
    "end": "293670"
  },
  {
    "text": "instance let's find the spot Fleet ID",
    "start": "293670",
    "end": "296730"
  },
  {
    "text": "that created these two instances by",
    "start": "296730",
    "end": "299130"
  },
  {
    "text": "navigating to the cloud formation",
    "start": "299130",
    "end": "301020"
  },
  {
    "text": "template that was generated to create",
    "start": "301020",
    "end": "303450"
  },
  {
    "text": "the ECS cluster in the resources tab",
    "start": "303450",
    "end": "306330"
  },
  {
    "text": "notice this ECS pot fleet and copy it",
    "start": "306330",
    "end": "309630"
  },
  {
    "text": "let me navigate here to the ec2",
    "start": "309630",
    "end": "312270"
  },
  {
    "text": "dashboard and click on the spot request",
    "start": "312270",
    "end": "315000"
  },
  {
    "text": "link in left hand bar now let's trigger",
    "start": "315000",
    "end": "318810"
  },
  {
    "text": "an interruption to see what happens",
    "start": "318810",
    "end": "321150"
  },
  {
    "text": "by reducing the target capacity by one",
    "start": "321150",
    "end": "325520"
  },
  {
    "text": "the easiest service scheduler component",
    "start": "333090",
    "end": "335949"
  },
  {
    "text": "has been configured to run two copies of",
    "start": "335949",
    "end": "338409"
  },
  {
    "text": "tasks as one of them is lost because of",
    "start": "338409",
    "end": "342009"
  },
  {
    "text": "instance interruption you will notice",
    "start": "342009",
    "end": "344139"
  },
  {
    "text": "that it will replace this lost container",
    "start": "344139",
    "end": "346599"
  },
  {
    "text": "on the ec2 instance by adding one more",
    "start": "346599",
    "end": "349479"
  },
  {
    "text": "on an existing instance let's proceed to",
    "start": "349479",
    "end": "352539"
  },
  {
    "text": "the tasks tab and watch what is",
    "start": "352539",
    "end": "354819"
  },
  {
    "text": "happening while the instance is",
    "start": "354819",
    "end": "356919"
  },
  {
    "text": "terminating you notice that the easiest",
    "start": "356919",
    "end": "359139"
  },
  {
    "text": "instances tab in the cluster shows the",
    "start": "359139",
    "end": "361690"
  },
  {
    "text": "status of training service tasks on the",
    "start": "361690",
    "end": "364300"
  },
  {
    "text": "container instance that are in pending",
    "start": "364300",
    "end": "366250"
  },
  {
    "text": "state are stopped immediately now notice",
    "start": "366250",
    "end": "369159"
  },
  {
    "text": "in the console that the ec2 instance",
    "start": "369159",
    "end": "371590"
  },
  {
    "text": "that was terminated is no longer visible",
    "start": "371590",
    "end": "373810"
  },
  {
    "text": "and also noticed that the service shows",
    "start": "373810",
    "end": "376659"
  },
  {
    "text": "two running tasks this shows how",
    "start": "376659",
    "end": "379419"
  },
  {
    "text": "seamlessly EC a service scheduler was",
    "start": "379419",
    "end": "381969"
  },
  {
    "text": "able to handle the easy to spot instance",
    "start": "381969",
    "end": "385029"
  },
  {
    "text": "interruption in this video I have shown",
    "start": "385029",
    "end": "388150"
  },
  {
    "text": "you how you can use easy to spot for",
    "start": "388150",
    "end": "391060"
  },
  {
    "text": "hosting container workloads on AWS I",
    "start": "391060",
    "end": "393639"
  },
  {
    "text": "have also demonstrated how easy a",
    "start": "393639",
    "end": "396069"
  },
  {
    "text": "service scheduler handles and ensures",
    "start": "396069",
    "end": "398830"
  },
  {
    "text": "that the desired container tasks are",
    "start": "398830",
    "end": "401169"
  },
  {
    "text": "running even if any interruptions occur",
    "start": "401169",
    "end": "403719"
  },
  {
    "text": "to learn more about easy to spot visit",
    "start": "403719",
    "end": "407020"
  },
  {
    "text": "the URL at the end of this video thanks",
    "start": "407020",
    "end": "409629"
  },
  {
    "text": "for watching",
    "start": "409629",
    "end": "412139"
  }
]