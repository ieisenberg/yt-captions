[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "hi everyone my name is Dmitry and I'm a",
    "start": "30",
    "end": "3389"
  },
  {
    "text": "Solutions Architect at Amazon Web",
    "start": "3389",
    "end": "5040"
  },
  {
    "text": "Services today we are going to talk",
    "start": "5040",
    "end": "7560"
  },
  {
    "text": "about getting started with containers on",
    "start": "7560",
    "end": "9990"
  },
  {
    "text": "AWS and what benefits you get using the",
    "start": "9990",
    "end": "13469"
  },
  {
    "text": "platform to run your containerized",
    "start": "13469",
    "end": "15240"
  },
  {
    "text": "applications many of you here have",
    "start": "15240",
    "end": "18330"
  },
  {
    "start": "17000",
    "end": "17000"
  },
  {
    "text": "probably created many applications",
    "start": "18330",
    "end": "20220"
  },
  {
    "text": "before and you are familiar with the",
    "start": "20220",
    "end": "22500"
  },
  {
    "text": "different pieces that go into creating",
    "start": "22500",
    "end": "24150"
  },
  {
    "text": "an application typically if you are",
    "start": "24150",
    "end": "27390"
  },
  {
    "text": "running an interpreted language you are",
    "start": "27390",
    "end": "29519"
  },
  {
    "text": "going to need a runtime engine you have",
    "start": "29519",
    "end": "31800"
  },
  {
    "text": "your actual application code and you",
    "start": "31800",
    "end": "34170"
  },
  {
    "text": "have any dependencies for example if you",
    "start": "34170",
    "end": "37440"
  },
  {
    "text": "are using node.js maybe you are using",
    "start": "37440",
    "end": "39510"
  },
  {
    "text": "NPM install for Python maybe you're",
    "start": "39510",
    "end": "42450"
  },
  {
    "text": "using people often you have a variety of",
    "start": "42450",
    "end": "46110"
  },
  {
    "text": "different dependencies that you need to",
    "start": "46110",
    "end": "48149"
  },
  {
    "text": "install for your code to run and then",
    "start": "48149",
    "end": "51030"
  },
  {
    "text": "you're going to have your configuration",
    "start": "51030",
    "end": "53340"
  },
  {
    "text": "which are the values maybe environment",
    "start": "53340",
    "end": "56100"
  },
  {
    "text": "variables maybe you need to specify how",
    "start": "56100",
    "end": "58379"
  },
  {
    "text": "much CPU or memory you are required and",
    "start": "58379",
    "end": "60899"
  },
  {
    "text": "you are going to be using those",
    "start": "60899",
    "end": "63300"
  },
  {
    "text": "alongside your code as well and as a",
    "start": "63300",
    "end": "65820"
  },
  {
    "text": "whole this four components function as",
    "start": "65820",
    "end": "68430"
  },
  {
    "text": "your application but in running your",
    "start": "68430",
    "end": "71580"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "application there are a variety of",
    "start": "71580",
    "end": "73560"
  },
  {
    "text": "different environments in which you need",
    "start": "73560",
    "end": "75450"
  },
  {
    "text": "to run it so for the local developer",
    "start": "75450",
    "end": "78659"
  },
  {
    "text": "they are developing on their laptops and",
    "start": "78659",
    "end": "80700"
  },
  {
    "text": "we are also have a staging or a QA",
    "start": "80700",
    "end": "84180"
  },
  {
    "text": "environment where code is placed",
    "start": "84180",
    "end": "86009"
  },
  {
    "text": "temporarily while we tested to make sure",
    "start": "86009",
    "end": "88920"
  },
  {
    "text": "that it works maybe there is a",
    "start": "88920",
    "end": "91380"
  },
  {
    "text": "production environment and maybe there",
    "start": "91380",
    "end": "93720"
  },
  {
    "text": "is even on Prem environment with all",
    "start": "93720",
    "end": "96600"
  },
  {
    "text": "four of those environments one problem",
    "start": "96600",
    "end": "99150"
  },
  {
    "text": "that often arises is that there is a",
    "start": "99150",
    "end": "101400"
  },
  {
    "text": "configuration drift or dependency drift",
    "start": "101400",
    "end": "104100"
  },
  {
    "text": "or on-time drift across those four",
    "start": "104100",
    "end": "106799"
  },
  {
    "text": "different environments here is an",
    "start": "106799",
    "end": "109229"
  },
  {
    "text": "example of an application which is being",
    "start": "109229",
    "end": "111600"
  },
  {
    "text": "developed on a local laptop where the",
    "start": "111600",
    "end": "114299"
  },
  {
    "text": "developer is running version 6 of not GS",
    "start": "114299",
    "end": "116549"
  },
  {
    "text": "and there the record runs fantastically",
    "start": "116549",
    "end": "119880"
  },
  {
    "text": "they push it to the staging environment",
    "start": "119880",
    "end": "122640"
  },
  {
    "text": "and on the staging environment when that",
    "start": "122640",
    "end": "125189"
  },
  {
    "text": "environment was set up it was installed",
    "start": "125189",
    "end": "127170"
  },
  {
    "text": "with node version 7 the code still runs",
    "start": "127170",
    "end": "130050"
  },
  {
    "text": "but then when the code gets promoted to",
    "start": "130050",
    "end": "133069"
  },
  {
    "text": "reduction there is a machine on that",
    "start": "133069",
    "end": "134900"
  },
  {
    "text": "production cluster that's been around",
    "start": "134900",
    "end": "136609"
  },
  {
    "text": "for a while longer and it's actually",
    "start": "136609",
    "end": "138920"
  },
  {
    "text": "running north version 4 and everything",
    "start": "138920",
    "end": "141379"
  },
  {
    "text": "breaks so this leads to this question of",
    "start": "141379",
    "end": "144379"
  },
  {
    "text": "why did it work on my machine but it",
    "start": "144379",
    "end": "147499"
  },
  {
    "text": "didn't work in production and when you",
    "start": "147499",
    "end": "150469"
  },
  {
    "text": "encounter an issue like this it's very",
    "start": "150469",
    "end": "152420"
  },
  {
    "text": "disconcerting because it causes you to",
    "start": "152420",
    "end": "154549"
  },
  {
    "text": "lose trust in your deployment lifecycle",
    "start": "154549",
    "end": "156739"
  },
  {
    "text": "and whether or not you'll actually be",
    "start": "156739",
    "end": "158959"
  },
  {
    "text": "able to deliver an application to your",
    "start": "158959",
    "end": "161209"
  },
  {
    "text": "customers so the solution that's been",
    "start": "161209",
    "end": "164480"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "created to help solve this problem is",
    "start": "164480",
    "end": "166310"
  },
  {
    "text": "docker",
    "start": "166310",
    "end": "167060"
  },
  {
    "text": "the purpose of docker is to allow you to",
    "start": "167060",
    "end": "169760"
  },
  {
    "text": "take your runtime engine take your",
    "start": "169760",
    "end": "171919"
  },
  {
    "text": "dependencies and take your code and",
    "start": "171919",
    "end": "173870"
  },
  {
    "text": "package this up into a consistent unit",
    "start": "173870",
    "end": "176569"
  },
  {
    "text": "of deployment and this artifact that you",
    "start": "176569",
    "end": "179299"
  },
  {
    "text": "create as part of your build process is",
    "start": "179299",
    "end": "181849"
  },
  {
    "text": "something that you can deliver to any",
    "start": "181849",
    "end": "183739"
  },
  {
    "text": "machine something that you can run",
    "start": "183739",
    "end": "185900"
  },
  {
    "text": "locally and you will be confident that",
    "start": "185900",
    "end": "187909"
  },
  {
    "text": "it's going to run correctly because it's",
    "start": "187909",
    "end": "190280"
  },
  {
    "text": "going to bring along with it the proper",
    "start": "190280",
    "end": "192980"
  },
  {
    "text": "runtime engine the proper dependencies",
    "start": "192980",
    "end": "195290"
  },
  {
    "text": "and the proper code containers are",
    "start": "195290",
    "end": "198680"
  },
  {
    "text": "similar to hardware virtualization like",
    "start": "198680",
    "end": "201259"
  },
  {
    "text": "Elastic Compute cloud",
    "start": "201259",
    "end": "202569"
  },
  {
    "text": "however instead of partitioning a",
    "start": "202569",
    "end": "205099"
  },
  {
    "text": "machine containers isolate the processes",
    "start": "205099",
    "end": "207650"
  },
  {
    "text": "running on a single operating system",
    "start": "207650",
    "end": "209689"
  },
  {
    "text": "this is a useful concept that lets you",
    "start": "209689",
    "end": "212780"
  },
  {
    "text": "use the operating system kernel to",
    "start": "212780",
    "end": "215449"
  },
  {
    "text": "create multiple isolated user space",
    "start": "215449",
    "end": "217970"
  },
  {
    "text": "processes that can have their own",
    "start": "217970",
    "end": "220000"
  },
  {
    "text": "constraints on them like CPU and memory",
    "start": "220000",
    "end": "223689"
  },
  {
    "text": "the docker CLI makes using containers",
    "start": "223689",
    "end": "226729"
  },
  {
    "text": "easy with comments like docker run",
    "start": "226729",
    "end": "229509"
  },
  {
    "text": "docker images make it easy to define",
    "start": "229509",
    "end": "232340"
  },
  {
    "text": "what runs in a container and versions",
    "start": "232340",
    "end": "235189"
  },
  {
    "text": "the entire application when I actually",
    "start": "235189",
    "end": "239180"
  },
  {
    "text": "go and deploy the docker image it turns",
    "start": "239180",
    "end": "241939"
  },
  {
    "text": "the exact same way on my local laptop",
    "start": "241939",
    "end": "244939"
  },
  {
    "text": "it turns the same way on QA it turns the",
    "start": "244939",
    "end": "248090"
  },
  {
    "text": "same in production and in turns the same",
    "start": "248090",
    "end": "250430"
  },
  {
    "text": "in my own prime environment and so I",
    "start": "250430",
    "end": "252859"
  },
  {
    "text": "have this confidence that the",
    "start": "252859",
    "end": "255079"
  },
  {
    "text": "application I developed on my laptop",
    "start": "255079",
    "end": "257090"
  },
  {
    "text": "that work there is going to work",
    "start": "257090",
    "end": "259159"
  },
  {
    "text": "everywhere in exactly the same way where",
    "start": "259159",
    "end": "261769"
  },
  {
    "text": "I run it you may be thinking this sounds",
    "start": "261769",
    "end": "265550"
  },
  {
    "start": "264000",
    "end": "264000"
  },
  {
    "text": "interesting",
    "start": "265550",
    "end": "266600"
  },
  {
    "text": "but why would I use containers why",
    "start": "266600",
    "end": "269420"
  },
  {
    "text": "builders love containers there are three",
    "start": "269420",
    "end": "272240"
  },
  {
    "text": "benefits of using containers packaging",
    "start": "272240",
    "end": "275530"
  },
  {
    "text": "simple to think about easy to model out",
    "start": "275530",
    "end": "278480"
  },
  {
    "text": "applications and the component level is",
    "start": "278480",
    "end": "281090"
  },
  {
    "text": "as a journey to running microcircuit",
    "start": "281090",
    "end": "283840"
  },
  {
    "text": "distribution with better resources",
    "start": "283840",
    "end": "285830"
  },
  {
    "text": "utilization generally the container",
    "start": "285830",
    "end": "288740"
  },
  {
    "text": "image which encapsulates everything you",
    "start": "288740",
    "end": "290900"
  },
  {
    "text": "need to run your application is stored",
    "start": "290900",
    "end": "293600"
  },
  {
    "text": "in a small very lightweight usually tens",
    "start": "293600",
    "end": "296690"
  },
  {
    "text": "of megabytes for the image that can be",
    "start": "296690",
    "end": "299210"
  },
  {
    "text": "run on nearly any machine in a",
    "start": "299210",
    "end": "301580"
  },
  {
    "text": "repeatable way and utilize the resources",
    "start": "301580",
    "end": "303740"
  },
  {
    "text": "more efficiently by running multiple of",
    "start": "303740",
    "end": "306800"
  },
  {
    "text": "lightweight containers per host and the",
    "start": "306800",
    "end": "310220"
  },
  {
    "text": "next is immutable infrastructure with",
    "start": "310220",
    "end": "312860"
  },
  {
    "text": "the packaging and distribution come a",
    "start": "312860",
    "end": "315110"
  },
  {
    "text": "simple way to run immutable",
    "start": "315110",
    "end": "317180"
  },
  {
    "text": "infrastructure where you can scale up or",
    "start": "317180",
    "end": "319670"
  },
  {
    "text": "down very granularly based on",
    "start": "319670",
    "end": "322220"
  },
  {
    "text": "requirements from here let's start",
    "start": "322220",
    "end": "325850"
  },
  {
    "start": "325000",
    "end": "325000"
  },
  {
    "text": "driving a little bit deeper into AWS",
    "start": "325850",
    "end": "328010"
  },
  {
    "text": "container Agra system and introduce",
    "start": "328010",
    "end": "330020"
  },
  {
    "text": "elastic container service in elastic",
    "start": "330020",
    "end": "332480"
  },
  {
    "text": "container registry and explain how into",
    "start": "332480",
    "end": "335510"
  },
  {
    "text": "how it integrates with the docker and",
    "start": "335510",
    "end": "338270"
  },
  {
    "text": "the reasons why you would use them when",
    "start": "338270",
    "end": "342980"
  },
  {
    "text": "it comes to docker running a single host",
    "start": "342980",
    "end": "345590"
  },
  {
    "text": "is easy if I'm working on my local",
    "start": "345590",
    "end": "348620"
  },
  {
    "text": "machine I have a docker common line",
    "start": "348620",
    "end": "350390"
  },
  {
    "text": "application on machine my machine and I",
    "start": "350390",
    "end": "352670"
  },
  {
    "text": "tabbed okarin and the name of my",
    "start": "352670",
    "end": "355340"
  },
  {
    "text": "container and that docker container",
    "start": "355340",
    "end": "357320"
  },
  {
    "text": "stands up I can drive docker PS to list",
    "start": "357320",
    "end": "360620"
  },
  {
    "text": "all the containers running on my machine",
    "start": "360620",
    "end": "362270"
  },
  {
    "text": "and I can see the list so it's easy for",
    "start": "362270",
    "end": "365600"
  },
  {
    "text": "me to launch containers it's easy to",
    "start": "365600",
    "end": "367670"
  },
  {
    "text": "manage them it's easy to check the",
    "start": "367670",
    "end": "369380"
  },
  {
    "text": "status when those containers on a single",
    "start": "369380",
    "end": "371840"
  },
  {
    "text": "host but running a single host isn't",
    "start": "371840",
    "end": "375560"
  },
  {
    "text": "what you want to do an AWS people use a",
    "start": "375560",
    "end": "378050"
  },
  {
    "text": "platform because they won't run a",
    "start": "378050",
    "end": "380180"
  },
  {
    "text": "variety of hosts and take the full",
    "start": "380180",
    "end": "382250"
  },
  {
    "text": "advantage of the platform and elasticity",
    "start": "382250",
    "end": "384790"
  },
  {
    "text": "they won't run huge clusters of hosts",
    "start": "384790",
    "end": "387980"
  },
  {
    "text": "and we have very large customers that",
    "start": "387980",
    "end": "390890"
  },
  {
    "text": "are using elastic container service to",
    "start": "390890",
    "end": "393380"
  },
  {
    "text": "solve this problem of how do i",
    "start": "393380",
    "end": "395090"
  },
  {
    "text": "distribute my containers across gigantic",
    "start": "395090",
    "end": "397700"
  },
  {
    "text": "clusters",
    "start": "397700",
    "end": "398729"
  },
  {
    "text": "so for example my books is shared with",
    "start": "398729",
    "end": "401430"
  },
  {
    "text": "us the day Iran on 3,500 instances at",
    "start": "401430",
    "end": "404729"
  },
  {
    "text": "peak and we have a customer Bob Fox that",
    "start": "404729",
    "end": "407879"
  },
  {
    "text": "served over a billion requests an hour",
    "start": "407879",
    "end": "410849"
  },
  {
    "text": "using a freed of 1200 instances in the",
    "start": "410849",
    "end": "415439"
  },
  {
    "text": "last couple of years we have seen great",
    "start": "415439",
    "end": "417389"
  },
  {
    "text": "adoption of production use cases on",
    "start": "417389",
    "end": "419430"
  },
  {
    "text": "Amazon ECS our active users are up by",
    "start": "419430",
    "end": "423479"
  },
  {
    "text": "more than 450 percent since 2016 and we",
    "start": "423479",
    "end": "428069"
  },
  {
    "text": "are managing containers across millions",
    "start": "428069",
    "end": "430050"
  },
  {
    "text": "of instances each month in fact we are",
    "start": "430050",
    "end": "433139"
  },
  {
    "text": "witnessing an incredible transition to",
    "start": "433139",
    "end": "435330"
  },
  {
    "text": "containers and customers scaling on",
    "start": "435330",
    "end": "437759"
  },
  {
    "text": "Amazon ECS whether it's Expedia running",
    "start": "437759",
    "end": "441210"
  },
  {
    "text": "its travel platform or the Washington",
    "start": "441210",
    "end": "443339"
  },
  {
    "text": "Post running their software as a service",
    "start": "443339",
    "end": "445919"
  },
  {
    "text": "platform that consists of more than 100",
    "start": "445919",
    "end": "448559"
  },
  {
    "text": "micro services that composed of more",
    "start": "448559",
    "end": "450870"
  },
  {
    "text": "than three thousand containers Amazon",
    "start": "450870",
    "end": "454259"
  },
  {
    "text": "ECS enables these customers to be able",
    "start": "454259",
    "end": "456659"
  },
  {
    "text": "to run containers on large scale here I",
    "start": "456659",
    "end": "461099"
  },
  {
    "text": "want to share a list of some of our",
    "start": "461099",
    "end": "462870"
  },
  {
    "text": "customers and is comprised of many",
    "start": "462870",
    "end": "464759"
  },
  {
    "text": "companies from startups to Fortune 500",
    "start": "464759",
    "end": "468089"
  },
  {
    "text": "companies running tens of millions of",
    "start": "468089",
    "end": "470669"
  },
  {
    "text": "applications worldwide on on AWS using",
    "start": "470669",
    "end": "474419"
  },
  {
    "text": "Amazon ECS and launching hundreds and",
    "start": "474419",
    "end": "477539"
  },
  {
    "text": "millions of containers each week the way",
    "start": "477539",
    "end": "481800"
  },
  {
    "text": "to do this is by using combination of",
    "start": "481800",
    "end": "484110"
  },
  {
    "text": "services on AWS the first one I want to",
    "start": "484110",
    "end": "487770"
  },
  {
    "text": "introduce is elastic container registry",
    "start": "487770",
    "end": "489959"
  },
  {
    "text": "because everything in the container",
    "start": "489959",
    "end": "492029"
  },
  {
    "text": "world starts with an image we starts",
    "start": "492029",
    "end": "496229"
  },
  {
    "text": "with building our Joker images comprised",
    "start": "496229",
    "end": "498930"
  },
  {
    "text": "of multiple layers and bringing them to",
    "start": "498930",
    "end": "501479"
  },
  {
    "text": "a repository elastic container registry",
    "start": "501479",
    "end": "503909"
  },
  {
    "text": "is a fully managed docker container",
    "start": "503909",
    "end": "507539"
  },
  {
    "text": "registry that makes it easy for",
    "start": "507539",
    "end": "509370"
  },
  {
    "text": "developers to store manage and deploy to",
    "start": "509370",
    "end": "512399"
  },
  {
    "text": "occur container images Amazon PCR is",
    "start": "512399",
    "end": "515669"
  },
  {
    "text": "fully integrated with Amazon elastic",
    "start": "515669",
    "end": "518219"
  },
  {
    "text": "container service simplifying your",
    "start": "518219",
    "end": "520440"
  },
  {
    "text": "development to production workflow",
    "start": "520440",
    "end": "522680"
  },
  {
    "text": "Amazon ECR eliminates the need to",
    "start": "522680",
    "end": "525899"
  },
  {
    "text": "operate your own container repositories",
    "start": "525899",
    "end": "528000"
  },
  {
    "text": "or worry about scaling the underlying",
    "start": "528000",
    "end": "530160"
  },
  {
    "text": "infrastructure",
    "start": "530160",
    "end": "531089"
  },
  {
    "text": "Amazon ECR hosts your images in a highly",
    "start": "531089",
    "end": "534120"
  },
  {
    "text": "available and scalable architecture",
    "start": "534120",
    "end": "536059"
  },
  {
    "text": "allowing you to reliably deploy",
    "start": "536059",
    "end": "538199"
  },
  {
    "text": "containers for your applications our",
    "start": "538199",
    "end": "541079"
  },
  {
    "text": "goal with ETR was to enable developers",
    "start": "541079",
    "end": "544079"
  },
  {
    "text": "to use the same familiar docker",
    "start": "544079",
    "end": "546089"
  },
  {
    "text": "push-and-pull api's to store their",
    "start": "546089",
    "end": "548879"
  },
  {
    "text": "container images and we see this product",
    "start": "548879",
    "end": "551999"
  },
  {
    "text": "highly adopted by customers both running",
    "start": "551999",
    "end": "554759"
  },
  {
    "text": "containers on AWS and really across any",
    "start": "554759",
    "end": "557249"
  },
  {
    "text": "environment when we are ready to run our",
    "start": "557249",
    "end": "560279"
  },
  {
    "text": "containers from images that we have in",
    "start": "560279",
    "end": "562199"
  },
  {
    "text": "our registry we move on to elastic",
    "start": "562199",
    "end": "564779"
  },
  {
    "text": "container service that high-level",
    "start": "564779",
    "end": "567870"
  },
  {
    "text": "diagram shows the way to start running",
    "start": "567870",
    "end": "570449"
  },
  {
    "text": "containers in production on AWS elastic",
    "start": "570449",
    "end": "573839"
  },
  {
    "text": "container service is highly scalable",
    "start": "573839",
    "end": "576170"
  },
  {
    "text": "high-performance container registration",
    "start": "576170",
    "end": "578220"
  },
  {
    "text": "system it allows you to easily run and",
    "start": "578220",
    "end": "581160"
  },
  {
    "text": "scale containerized applications on",
    "start": "581160",
    "end": "583050"
  },
  {
    "text": "Amazon Web Services Amazon Elastic",
    "start": "583050",
    "end": "586529"
  },
  {
    "text": "container service eliminates the need",
    "start": "586529",
    "end": "588660"
  },
  {
    "text": "for you to install and operate your own",
    "start": "588660",
    "end": "590759"
  },
  {
    "text": "container registration software manage",
    "start": "590759",
    "end": "593639"
  },
  {
    "text": "and scale a cluster of Buechel machines",
    "start": "593639",
    "end": "595829"
  },
  {
    "text": "or schedule containers on those virtual",
    "start": "595829",
    "end": "598769"
  },
  {
    "text": "machines to ensure we can support every",
    "start": "598769",
    "end": "602490"
  },
  {
    "text": "work toward we have provided containers",
    "start": "602490",
    "end": "604589"
  },
  {
    "text": "running on Amazon ECS deep integration",
    "start": "604589",
    "end": "607620"
  },
  {
    "text": "with the breath of a breeze platform",
    "start": "607620",
    "end": "610050"
  },
  {
    "text": "features and capabilities to make it",
    "start": "610050",
    "end": "612540"
  },
  {
    "text": "easier to run container based",
    "start": "612540",
    "end": "614730"
  },
  {
    "text": "applications in production this",
    "start": "614730",
    "end": "617970"
  },
  {
    "text": "integrations include support for AWS vbc",
    "start": "617970",
    "end": "621269"
  },
  {
    "text": "tasks networking",
    "start": "621269",
    "end": "622290"
  },
  {
    "text": "I am roles and security groups for tasks",
    "start": "622290",
    "end": "625649"
  },
  {
    "text": "load balancer support task auto scaling",
    "start": "625649",
    "end": "628980"
  },
  {
    "text": "and clusters and tasks and cloud watch",
    "start": "628980",
    "end": "631649"
  },
  {
    "text": "metrics and logs we also provide a rich",
    "start": "631649",
    "end": "634949"
  },
  {
    "text": "set of developer tools to make it easier",
    "start": "634949",
    "end": "637589"
  },
  {
    "text": "to build complex applications on AWS",
    "start": "637589",
    "end": "640100"
  },
  {
    "text": "including integration with AWS core",
    "start": "640100",
    "end": "642839"
  },
  {
    "text": "pipeline code build and dcs CLI which",
    "start": "642839",
    "end": "646439"
  },
  {
    "text": "offers a simplified",
    "start": "646439",
    "end": "648120"
  },
  {
    "text": "yet powerful user experience for getting",
    "start": "648120",
    "end": "650490"
  },
  {
    "text": "started with ICS with ICS and outer",
    "start": "650490",
    "end": "654059"
  },
  {
    "text": "scaling customers can run applications",
    "start": "654059",
    "end": "656220"
  },
  {
    "text": "that can easily grow to support cloud",
    "start": "656220",
    "end": "658679"
  },
  {
    "text": "scale applications so this diagram shows",
    "start": "658679",
    "end": "662009"
  },
  {
    "start": "661000",
    "end": "661000"
  },
  {
    "text": "us basic components that go in",
    "start": "662009",
    "end": "664380"
  },
  {
    "text": "Amazon Elastic container service and how",
    "start": "664380",
    "end": "667020"
  },
  {
    "text": "they work together and I'm going to zoom",
    "start": "667020",
    "end": "669570"
  },
  {
    "text": "in on each and highlight each one",
    "start": "669570",
    "end": "672420"
  },
  {
    "text": "explain what it is so to start with we",
    "start": "672420",
    "end": "675660"
  },
  {
    "text": "have a cluster of hosts running on",
    "start": "675660",
    "end": "677700"
  },
  {
    "text": "Amazon ec2 and there are two different",
    "start": "677700",
    "end": "680280"
  },
  {
    "text": "ways that you can run on a cluster of",
    "start": "680280",
    "end": "682680"
  },
  {
    "text": "hosts you can run them directly yourself",
    "start": "682680",
    "end": "685380"
  },
  {
    "text": "if you want to customize for example an",
    "start": "685380",
    "end": "688140"
  },
  {
    "text": "Amazon machine image and a fleet of",
    "start": "688140",
    "end": "689910"
  },
  {
    "text": "Ubuntu machines with a specific",
    "start": "689910",
    "end": "692000"
  },
  {
    "text": "customization or you can use Amazon",
    "start": "692000",
    "end": "694830"
  },
  {
    "text": "Fargate which is a new solution for",
    "start": "694830",
    "end": "696930"
  },
  {
    "text": "running a container in a service manner",
    "start": "696930",
    "end": "698640"
  },
  {
    "text": "you can just give a container to Amazon",
    "start": "698640",
    "end": "701430"
  },
  {
    "text": "and say I would like to run this",
    "start": "701430",
    "end": "703230"
  },
  {
    "text": "container somewhere and Amazon will",
    "start": "703230",
    "end": "705150"
  },
  {
    "text": "provision a machine for you behind the",
    "start": "705150",
    "end": "706710"
  },
  {
    "text": "scenes without your intervention I will",
    "start": "706710",
    "end": "709650"
  },
  {
    "text": "talk about this feature in a few minutes",
    "start": "709650",
    "end": "711480"
  },
  {
    "text": "at the lowest level somewhere you need a",
    "start": "711480",
    "end": "714630"
  },
  {
    "text": "machine to run your container and",
    "start": "714630",
    "end": "716340"
  },
  {
    "text": "whether you are managing that machine",
    "start": "716340",
    "end": "718680"
  },
  {
    "text": "yourself or you're using Amazon Fargate",
    "start": "718680",
    "end": "721200"
  },
  {
    "text": "there is still a machine out there so on",
    "start": "721200",
    "end": "724080"
  },
  {
    "text": "that machine there is an ec2 agent this",
    "start": "724080",
    "end": "726870"
  },
  {
    "text": "agent is what controls what happens on",
    "start": "726870",
    "end": "729690"
  },
  {
    "text": "that machine on your behalf if you want",
    "start": "729690",
    "end": "732660"
  },
  {
    "text": "you to control the machine yourself you",
    "start": "732660",
    "end": "734430"
  },
  {
    "text": "would association to it you would run a",
    "start": "734430",
    "end": "736620"
  },
  {
    "text": "command on it but you don't want to do",
    "start": "736620",
    "end": "739410"
  },
  {
    "text": "that manually especially when you have a",
    "start": "739410",
    "end": "741720"
  },
  {
    "text": "fleet of instances so the EGS agent acts",
    "start": "741720",
    "end": "745530"
  },
  {
    "text": "on your behalf it is consistently",
    "start": "745530",
    "end": "747540"
  },
  {
    "text": "running on that machine and when you",
    "start": "747540",
    "end": "749550"
  },
  {
    "text": "want to do something it does it on your",
    "start": "749550",
    "end": "752010"
  },
  {
    "text": "behalf launch is a container restart set",
    "start": "752010",
    "end": "754680"
  },
  {
    "text": "stupid and fetches starts from it",
    "start": "754680",
    "end": "757730"
  },
  {
    "text": "whatever you need to do it will do it on",
    "start": "757730",
    "end": "761550"
  },
  {
    "text": "your behalf without you need to manually",
    "start": "761550",
    "end": "763710"
  },
  {
    "text": "go into the machine and do it and at the",
    "start": "763710",
    "end": "767490"
  },
  {
    "text": "top level there is an API which is what",
    "start": "767490",
    "end": "770070"
  },
  {
    "text": "you use to interact with the cluster at",
    "start": "770070",
    "end": "772590"
  },
  {
    "text": "the hole and you can get really",
    "start": "772590",
    "end": "774390"
  },
  {
    "text": "high-level comments to this API so that",
    "start": "774390",
    "end": "777120"
  },
  {
    "text": "for example I can say I want to run four",
    "start": "777120",
    "end": "779790"
  },
  {
    "text": "copies of this particular application",
    "start": "779790",
    "end": "781440"
  },
  {
    "text": "container distributed across three",
    "start": "781440",
    "end": "784050"
  },
  {
    "text": "availability zones and I want to run",
    "start": "784050",
    "end": "786210"
  },
  {
    "text": "them on instances that have the",
    "start": "786210",
    "end": "788160"
  },
  {
    "text": "particular type let's say g3 dot star",
    "start": "788160",
    "end": "791400"
  },
  {
    "text": "and Amazon ECS will take that high-level",
    "start": "791400",
    "end": "794550"
  },
  {
    "text": "comment it will check the stage of the",
    "start": "794550",
    "end": "796500"
  },
  {
    "text": "clusters that you have provision",
    "start": "796500",
    "end": "797790"
  },
  {
    "text": "and it will find ways to play those",
    "start": "797790",
    "end": "799860"
  },
  {
    "text": "tasks accordingly on the instances and",
    "start": "799860",
    "end": "802590"
  },
  {
    "text": "to fulfill the comment that you gave to",
    "start": "802590",
    "end": "804450"
  },
  {
    "text": "it the container task is ultimately what",
    "start": "804450",
    "end": "808290"
  },
  {
    "text": "ends up getting placed on the instances",
    "start": "808290",
    "end": "810360"
  },
  {
    "text": "when you ask it to run a container and",
    "start": "810360",
    "end": "812400"
  },
  {
    "text": "the task is basically one step above the",
    "start": "812400",
    "end": "815070"
  },
  {
    "text": "container the container is your",
    "start": "815070",
    "end": "817260"
  },
  {
    "text": "application and the task is your",
    "start": "817260",
    "end": "819390"
  },
  {
    "text": "application plus configuration about how",
    "start": "819390",
    "end": "822540"
  },
  {
    "text": "you want to run your application so for",
    "start": "822540",
    "end": "825300"
  },
  {
    "text": "example what environment variables does",
    "start": "825300",
    "end": "828000"
  },
  {
    "text": "your application needs to operate does",
    "start": "828000",
    "end": "831570"
  },
  {
    "text": "it need disk access does it have a port",
    "start": "831570",
    "end": "833820"
  },
  {
    "text": "that it receives traffic on does it have",
    "start": "833820",
    "end": "836220"
  },
  {
    "text": "any particular limits for reading and",
    "start": "836220",
    "end": "838500"
  },
  {
    "text": "writing files that need to be set so the",
    "start": "838500",
    "end": "841950"
  },
  {
    "text": "task is where you said all these things",
    "start": "841950",
    "end": "844320"
  },
  {
    "text": "about your application container and the",
    "start": "844320",
    "end": "847710"
  },
  {
    "text": "service will communicate with the ECS",
    "start": "847710",
    "end": "849810"
  },
  {
    "text": "agent and place a task onto a machine",
    "start": "849810",
    "end": "853790"
  },
  {
    "text": "Amazon ECS allows you to run and",
    "start": "853790",
    "end": "856530"
  },
  {
    "start": "854000",
    "end": "854000"
  },
  {
    "text": "maintain a specified number or as it's",
    "start": "856530",
    "end": "859590"
  },
  {
    "text": "also called desired count of instances",
    "start": "859590",
    "end": "862980"
  },
  {
    "text": "of a task definition simultaneously in",
    "start": "862980",
    "end": "865590"
  },
  {
    "text": "an ICS cluster this is called a service",
    "start": "865590",
    "end": "868700"
  },
  {
    "text": "if any of your tasks should fail or stop",
    "start": "868700",
    "end": "872400"
  },
  {
    "text": "for any reason the Amazon ECS service",
    "start": "872400",
    "end": "875130"
  },
  {
    "text": "schedule launches another instance of",
    "start": "875130",
    "end": "878340"
  },
  {
    "text": "your task definition to replace it and",
    "start": "878340",
    "end": "880470"
  },
  {
    "text": "maintain the desired count of tasks in",
    "start": "880470",
    "end": "882750"
  },
  {
    "text": "the service the ECS services includes a",
    "start": "882750",
    "end": "886290"
  },
  {
    "text": "load balancer and a task definition to",
    "start": "886290",
    "end": "888960"
  },
  {
    "text": "publish the exposed ports a log balancer",
    "start": "888960",
    "end": "891900"
  },
  {
    "text": "is configured on your behalf and easiest",
    "start": "891900",
    "end": "894360"
  },
  {
    "text": "ex care of correct traffic routing to",
    "start": "894360",
    "end": "896790"
  },
  {
    "text": "the running tasks but the area we have",
    "start": "896790",
    "end": "900210"
  },
  {
    "text": "recently spent a ton of time based on",
    "start": "900210",
    "end": "902670"
  },
  {
    "text": "what we have heard from our customers is",
    "start": "902670",
    "end": "904950"
  },
  {
    "text": "to make containers a fundamental",
    "start": "904950",
    "end": "906690"
  },
  {
    "text": "computer primitive we have done things",
    "start": "906690",
    "end": "909480"
  },
  {
    "text": "like same roles for tasks out of scaling",
    "start": "909480",
    "end": "912150"
  },
  {
    "text": "for tasks and load balancer support for",
    "start": "912150",
    "end": "914280"
  },
  {
    "text": "tasks we took this feedback and have",
    "start": "914280",
    "end": "917670"
  },
  {
    "text": "worked hard over the past few years to",
    "start": "917670",
    "end": "919950"
  },
  {
    "text": "build a technology that works with",
    "start": "919950",
    "end": "921750"
  },
  {
    "text": "Amazon ECS and allows customers to focus",
    "start": "921750",
    "end": "924510"
  },
  {
    "text": "entirely on their applications and work",
    "start": "924510",
    "end": "926970"
  },
  {
    "text": "with their applications directly",
    "start": "926970",
    "end": "928640"
  },
  {
    "text": "at that container or task level and not",
    "start": "928640",
    "end": "931340"
  },
  {
    "text": "worry about infrastructure at all",
    "start": "931340",
    "end": "934240"
  },
  {
    "text": "Amazon Fargate is a new technology to",
    "start": "934240",
    "end": "936980"
  },
  {
    "text": "run containers without the need to",
    "start": "936980",
    "end": "938840"
  },
  {
    "text": "manage underlying infrastructure Fargate",
    "start": "938840",
    "end": "941570"
  },
  {
    "text": "allows you to work in child with the ECS",
    "start": "941570",
    "end": "943820"
  },
  {
    "text": "tasks native EP ice with Fargate you",
    "start": "943820",
    "end": "947000"
  },
  {
    "text": "specify the container image CPU and",
    "start": "947000",
    "end": "949490"
  },
  {
    "text": "memory required transit container in an",
    "start": "949490",
    "end": "952010"
  },
  {
    "text": "ICS task definition and with a single",
    "start": "952010",
    "end": "954620"
  },
  {
    "text": "comment you can run that container in",
    "start": "954620",
    "end": "956930"
  },
  {
    "text": "production with one comment you can",
    "start": "956930",
    "end": "959660"
  },
  {
    "text": "configure to scale that automatically to",
    "start": "959660",
    "end": "961580"
  },
  {
    "text": "tens hundreds or even thousands based on",
    "start": "961580",
    "end": "964730"
  },
  {
    "text": "your requirements and let forget takes",
    "start": "964730",
    "end": "966920"
  },
  {
    "text": "care of everything else",
    "start": "966920",
    "end": "968650"
  },
  {
    "text": "always forget there are no instances to",
    "start": "968650",
    "end": "972380"
  },
  {
    "text": "manage no more batching operating",
    "start": "972380",
    "end": "974420"
  },
  {
    "text": "systems or runtimes with a new task",
    "start": "974420",
    "end": "977330"
  },
  {
    "text": "native API you don't need to worry about",
    "start": "977330",
    "end": "979610"
  },
  {
    "text": "clusters they are there though as an",
    "start": "979610",
    "end": "982610"
  },
  {
    "text": "organization sort of a logic and",
    "start": "982610",
    "end": "984740"
  },
  {
    "text": "security boundary but you don't need to",
    "start": "984740",
    "end": "987410"
  },
  {
    "text": "think about cluster utilization or auto",
    "start": "987410",
    "end": "989780"
  },
  {
    "text": "scaling of compute resources within that",
    "start": "989780",
    "end": "992060"
  },
  {
    "text": "cluster with a resource based pricing",
    "start": "992060",
    "end": "994970"
  },
  {
    "text": "model you only pay for the resources you",
    "start": "994970",
    "end": "997400"
  },
  {
    "text": "provision for each task we think forget",
    "start": "997400",
    "end": "1000880"
  },
  {
    "text": "fundamentally changes how you think",
    "start": "1000880",
    "end": "1002530"
  },
  {
    "text": "about consumption how you will run it",
    "start": "1002530",
    "end": "1004780"
  },
  {
    "text": "and deploy your applications with",
    "start": "1004780",
    "end": "1006730"
  },
  {
    "text": "containers let's now take a look at a",
    "start": "1006730",
    "end": "1010330"
  },
  {
    "start": "1009000",
    "end": "1009000"
  },
  {
    "text": "couple of real-life examples using the",
    "start": "1010330",
    "end": "1012520"
  },
  {
    "text": "components we covered earlier let's say",
    "start": "1012520",
    "end": "1015550"
  },
  {
    "text": "you plan to run several highly available",
    "start": "1015550",
    "end": "1018130"
  },
  {
    "text": "applications across three different",
    "start": "1018130",
    "end": "1019590"
  },
  {
    "text": "availability zones",
    "start": "1019590",
    "end": "1021420"
  },
  {
    "text": "ECS enables you to a personalize your",
    "start": "1021420",
    "end": "1024250"
  },
  {
    "text": "container I store clothes at very high",
    "start": "1024250",
    "end": "1026439"
  },
  {
    "text": "skills no management software to install",
    "start": "1026440",
    "end": "1030760"
  },
  {
    "text": "or worry about it's high availability",
    "start": "1030760",
    "end": "1033390"
  },
  {
    "text": "the cluster management piece enables you",
    "start": "1033390",
    "end": "1036459"
  },
  {
    "text": "to monitor the cluster scale it using",
    "start": "1036459",
    "end": "1038920"
  },
  {
    "text": "auto scaling groups and be able to",
    "start": "1038920",
    "end": "1040900"
  },
  {
    "text": "manage state of the iNSYS in the",
    "start": "1040900",
    "end": "1042910"
  },
  {
    "text": "classroom the placement engine enables",
    "start": "1042910",
    "end": "1046449"
  },
  {
    "text": "you to set rules to target lending your",
    "start": "1046449",
    "end": "1048880"
  },
  {
    "text": "containers on the right instances based",
    "start": "1048880",
    "end": "1051520"
  },
  {
    "text": "on your preferences and then finally the",
    "start": "1051520",
    "end": "1054970"
  },
  {
    "text": "advanced scheduling features help",
    "start": "1054970",
    "end": "1056860"
  },
  {
    "text": "maintain the desired state of the",
    "start": "1056860",
    "end": "1058690"
  },
  {
    "text": "application spawn new containers to",
    "start": "1058690",
    "end": "1061210"
  },
  {
    "text": "automatically",
    "start": "1061210",
    "end": "1062200"
  },
  {
    "text": "to scaling needs and maintaining",
    "start": "1062200",
    "end": "1064360"
  },
  {
    "text": "resiliency by deploying across multiple",
    "start": "1064360",
    "end": "1066850"
  },
  {
    "text": "availability zones while being resource",
    "start": "1066850",
    "end": "1069490"
  },
  {
    "text": "aware of the underlying compute in",
    "start": "1069490",
    "end": "1073840"
  },
  {
    "text": "another scenario we see that there are",
    "start": "1073840",
    "end": "1076000"
  },
  {
    "text": "these additional layers of management",
    "start": "1076000",
    "end": "1078130"
  },
  {
    "text": "you need to be aware of when all you",
    "start": "1078130",
    "end": "1082480"
  },
  {
    "text": "wanted to do is run in containers",
    "start": "1082480",
    "end": "1084990"
  },
  {
    "text": "far get support for ECS enables you to",
    "start": "1084990",
    "end": "1088149"
  },
  {
    "text": "do just they're fully managed",
    "start": "1088149",
    "end": "1090429"
  },
  {
    "text": "orchestration as well as data pipeline",
    "start": "1090429",
    "end": "1092860"
  },
  {
    "text": "experience bringing your focus to",
    "start": "1092860",
    "end": "1094779"
  },
  {
    "text": "containers and to your application not",
    "start": "1094779",
    "end": "1097480"
  },
  {
    "text": "to these multiple moving parts let's",
    "start": "1097480",
    "end": "1101110"
  },
  {
    "text": "talk about the rest of the container",
    "start": "1101110",
    "end": "1102519"
  },
  {
    "text": "ecosystem at reinvent last year we",
    "start": "1102519",
    "end": "1105610"
  },
  {
    "text": "announced a new service to help our",
    "start": "1105610",
    "end": "1107620"
  },
  {
    "text": "customers run could be natus workloads",
    "start": "1107620",
    "end": "1109330"
  },
  {
    "text": "at scale on AWS let's quickly get up to",
    "start": "1109330",
    "end": "1112990"
  },
  {
    "text": "speed with kubernetes kubernetes is an",
    "start": "1112990",
    "end": "1116200"
  },
  {
    "text": "open source continual station system for",
    "start": "1116200",
    "end": "1118690"
  },
  {
    "text": "automated deployments scaling and",
    "start": "1118690",
    "end": "1121149"
  },
  {
    "text": "management of containerized applications",
    "start": "1121149",
    "end": "1123309"
  },
  {
    "text": "and is now maintained by cloud native",
    "start": "1123309",
    "end": "1125620"
  },
  {
    "text": "computing foundation it's a very popular",
    "start": "1125620",
    "end": "1128649"
  },
  {
    "text": "system and the interest to it in a",
    "start": "1128649",
    "end": "1131169"
  },
  {
    "text": "community grows at a rapid pace a lot of",
    "start": "1131169",
    "end": "1134769"
  },
  {
    "text": "our customers asked us about a service",
    "start": "1134769",
    "end": "1136720"
  },
  {
    "text": "that will help them to run kubernetes",
    "start": "1136720",
    "end": "1138490"
  },
  {
    "text": "workloads at massive scale in production",
    "start": "1138490",
    "end": "1140889"
  },
  {
    "text": "without spending time on managing all",
    "start": "1140889",
    "end": "1142929"
  },
  {
    "text": "its components and moving parts we",
    "start": "1142929",
    "end": "1145600"
  },
  {
    "text": "listened and that's why we have built",
    "start": "1145600",
    "end": "1147519"
  },
  {
    "text": "elastic container service for kubernetes",
    "start": "1147519",
    "end": "1149470"
  },
  {
    "text": "or I guess we know how important a",
    "start": "1149470",
    "end": "1152889"
  },
  {
    "text": "well-functioning service is to our",
    "start": "1152889",
    "end": "1154450"
  },
  {
    "text": "customers",
    "start": "1154450",
    "end": "1155200"
  },
  {
    "text": "there are a core set of tenants that we",
    "start": "1155200",
    "end": "1157929"
  },
  {
    "text": "followed which guided our",
    "start": "1157929",
    "end": "1159760"
  },
  {
    "text": "decision-making for how Amazon ideas",
    "start": "1159760",
    "end": "1162039"
  },
  {
    "text": "should work let's talk about the tenants",
    "start": "1162039",
    "end": "1164559"
  },
  {
    "text": "that underpin our design decision for",
    "start": "1164559",
    "end": "1167889"
  },
  {
    "text": "eks it is is a platform for enterprises",
    "start": "1167889",
    "end": "1171700"
  },
  {
    "text": "to run production great workloads it is",
    "start": "1171700",
    "end": "1175000"
  },
  {
    "text": "aims to provide features and management",
    "start": "1175000",
    "end": "1177490"
  },
  {
    "text": "capabilities to allow enterprises to run",
    "start": "1177490",
    "end": "1180220"
  },
  {
    "text": "real workloads",
    "start": "1180220",
    "end": "1181480"
  },
  {
    "text": "at real scale reliability visibility",
    "start": "1181480",
    "end": "1184990"
  },
  {
    "text": "scalability and ease of management are",
    "start": "1184990",
    "end": "1187299"
  },
  {
    "text": "our priorities one of the areas where we",
    "start": "1187299",
    "end": "1190870"
  },
  {
    "text": "are putting in a lot of effort is to",
    "start": "1190870",
    "end": "1193539"
  },
  {
    "text": "availability by",
    "start": "1193539",
    "end": "1195200"
  },
  {
    "text": "default aks is multi-master we run",
    "start": "1195200",
    "end": "1198769"
  },
  {
    "text": "masters across multiple availability",
    "start": "1198769",
    "end": "1200510"
  },
  {
    "text": "zones and we manage your persistence",
    "start": "1200510",
    "end": "1203389"
  },
  {
    "text": "layer for you",
    "start": "1203389",
    "end": "1204730"
  },
  {
    "text": "it is provides a native upstream",
    "start": "1204730",
    "end": "1207889"
  },
  {
    "text": "kubernetes experience and modifications",
    "start": "1207889",
    "end": "1211220"
  },
  {
    "text": "or improvements that you make in your",
    "start": "1211220",
    "end": "1213409"
  },
  {
    "text": "our service must be transparent to the",
    "start": "1213409",
    "end": "1216019"
  },
  {
    "text": "kubernetes end-user this means that your",
    "start": "1216019",
    "end": "1219139"
  },
  {
    "text": "existing kubernetes experience and",
    "start": "1219139",
    "end": "1220909"
  },
  {
    "text": "know-how applies directly to eks your",
    "start": "1220909",
    "end": "1224960"
  },
  {
    "text": "existing your existing applications and",
    "start": "1224960",
    "end": "1227720"
  },
  {
    "text": "investment in Combinator's work right",
    "start": "1227720",
    "end": "1230389"
  },
  {
    "text": "out of the box with yes diaz customers",
    "start": "1230389",
    "end": "1233960"
  },
  {
    "text": "are not forced to use additional AWS",
    "start": "1233960",
    "end": "1236990"
  },
  {
    "text": "services but if they want to the",
    "start": "1236990",
    "end": "1239330"
  },
  {
    "text": "integration are seamless in illuminate",
    "start": "1239330",
    "end": "1241490"
  },
  {
    "text": "and differentiated heavy-lifting we are",
    "start": "1241490",
    "end": "1244580"
  },
  {
    "text": "focused on making contributions to the",
    "start": "1244580",
    "end": "1246769"
  },
  {
    "text": "projects that allow customers to use the",
    "start": "1246769",
    "end": "1249679"
  },
  {
    "text": "AWS components they currently know and",
    "start": "1249679",
    "end": "1252590"
  },
  {
    "text": "love with their applications in",
    "start": "1252590",
    "end": "1254570"
  },
  {
    "text": "Combinator's the other thing our",
    "start": "1254570",
    "end": "1257059"
  },
  {
    "text": "customers care about is integration into",
    "start": "1257059",
    "end": "1259700"
  },
  {
    "text": "the rest of AWS and this is another area",
    "start": "1259700",
    "end": "1262940"
  },
  {
    "text": "where we plan to focus and contribute",
    "start": "1262940",
    "end": "1265190"
  },
  {
    "text": "upstream and the next tenant is that the",
    "start": "1265190",
    "end": "1268880"
  },
  {
    "text": "ETS team actively contributes to the",
    "start": "1268880",
    "end": "1271279"
  },
  {
    "text": "kubernetes project to improve the",
    "start": "1271279",
    "end": "1272990"
  },
  {
    "text": "communities experience for all AWS",
    "start": "1272990",
    "end": "1275539"
  },
  {
    "text": "customers now is the case as the",
    "start": "1275539",
    "end": "1278510"
  },
  {
    "text": "complexity of standing up your own",
    "start": "1278510",
    "end": "1279980"
  },
  {
    "text": "company this control plane is simplified",
    "start": "1279980",
    "end": "1281779"
  },
  {
    "text": "instead of running the communities",
    "start": "1281779",
    "end": "1283730"
  },
  {
    "text": "control plane in your account you",
    "start": "1283730",
    "end": "1285260"
  },
  {
    "text": "connect to a managed combination point",
    "start": "1285260",
    "end": "1287389"
  },
  {
    "text": "in AWS cloud the endpoint abstracts the",
    "start": "1287389",
    "end": "1290690"
  },
  {
    "text": "complexity of the kubernetes control",
    "start": "1290690",
    "end": "1292519"
  },
  {
    "text": "plane your worker nodes can check into a",
    "start": "1292519",
    "end": "1295190"
  },
  {
    "text": "cluster and you can interact with your",
    "start": "1295190",
    "end": "1297440"
  },
  {
    "text": "kubernetes cluster through the tubing",
    "start": "1297440",
    "end": "1299480"
  },
  {
    "text": "you already know and love here I just",
    "start": "1299480",
    "end": "1303889"
  },
  {
    "text": "want to show the AWS container ecosystem",
    "start": "1303889",
    "end": "1306260"
  },
  {
    "text": "on one picture and the very high level",
    "start": "1306260",
    "end": "1308990"
  },
  {
    "text": "flow of starting with running",
    "start": "1308990",
    "end": "1310519"
  },
  {
    "text": "containerized applications at scale you",
    "start": "1310519",
    "end": "1313340"
  },
  {
    "text": "start with choosing an orchestration",
    "start": "1313340",
    "end": "1314990"
  },
  {
    "text": "tool and then make a choice of the",
    "start": "1314990",
    "end": "1317720"
  },
  {
    "text": "launch type and the beauty here is that",
    "start": "1317720",
    "end": "1320929"
  },
  {
    "text": "large types are backward compatible",
    "start": "1320929",
    "end": "1322850"
  },
  {
    "text": "giving you the flexibility and power of",
    "start": "1322850",
    "end": "1325159"
  },
  {
    "text": "running applications in a coexistence",
    "start": "1325159",
    "end": "1326960"
  },
  {
    "text": "mode",
    "start": "1326960",
    "end": "1328220"
  },
  {
    "text": "let me recommend a few resources where",
    "start": "1328220",
    "end": "1330679"
  },
  {
    "text": "you can find great workshops and guides",
    "start": "1330679",
    "end": "1333169"
  },
  {
    "text": "for you to go ahead with building your",
    "start": "1333169",
    "end": "1335450"
  },
  {
    "text": "containerized applications on AWS this",
    "start": "1335450",
    "end": "1338299"
  },
  {
    "text": "hands-on workshops and guides walk you",
    "start": "1338299",
    "end": "1340429"
  },
  {
    "text": "through all the main bits and pieces you",
    "start": "1340429",
    "end": "1342590"
  },
  {
    "text": "will need to run containers at scale on",
    "start": "1342590",
    "end": "1345260"
  },
  {
    "text": "AWS thank you and keep on building",
    "start": "1345260",
    "end": "1351190"
  }
]