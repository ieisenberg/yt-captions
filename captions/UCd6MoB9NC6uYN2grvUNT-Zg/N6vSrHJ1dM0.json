[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "hello everyone my name is Nathan Peck I'm a developer advocate for elastic container service at AWS and today I'm",
    "start": "30",
    "end": "7620"
  },
  {
    "text": "pleased to be here to present a getting started guide to docker and Amazon ECS so the goal of this session is we're",
    "start": "7620",
    "end": "13860"
  },
  {
    "text": "gonna be going over some of the basics of how to use docker what is docker why would I want to use it and then a brief",
    "start": "13860",
    "end": "19230"
  },
  {
    "text": "overview of what ECS is and what the components of it are and then I wouldn't be joined by John",
    "start": "19230",
    "end": "24720"
  },
  {
    "text": "Dominguez from realtor.com and he's gonna talk about the story of how realtor.com was able to start out using",
    "start": "24720",
    "end": "31199"
  },
  {
    "text": "ECS and the lessons that they learned along the way so to start with let's",
    "start": "31199",
    "end": "38730"
  },
  {
    "text": "discuss an introduction to what a container is and what docker is many of",
    "start": "38730",
    "end": "45989"
  },
  {
    "start": "44000",
    "end": "44000"
  },
  {
    "text": "you here have probably created many applications before and you're familiar with the different pieces that go into",
    "start": "45989",
    "end": "51539"
  },
  {
    "text": "creating an application typically if you're running an interpreted language you're gonna need a runtime engine you",
    "start": "51539",
    "end": "58289"
  },
  {
    "text": "have your actual application code you have any dependencies for example if you're using no chess maybe you're using",
    "start": "58289",
    "end": "64170"
  },
  {
    "text": "NPM install for Python maybe you're using pip but you have a variety of different dependencies that you need to",
    "start": "64170",
    "end": "70560"
  },
  {
    "text": "install for your code to run and then you're gonna have your configuration which are the values maybe environment",
    "start": "70560",
    "end": "76439"
  },
  {
    "text": "variables maybe if I use about how much CPU or memory are required and you're",
    "start": "76439",
    "end": "81630"
  },
  {
    "text": "gonna be using those alongside your code as well and as a whole these four components function as your application",
    "start": "81630",
    "end": "89930"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "but in running your application there are a variety of different environments and wish you need to run it so for the",
    "start": "90259",
    "end": "97110"
  },
  {
    "text": "local developer move they're developing on their laptop and we also have a staging or a QA environment where code",
    "start": "97110",
    "end": "104399"
  },
  {
    "text": "is placed temporarily while we test it to make sure that it works maybe as a production environment and maybe there's",
    "start": "104399",
    "end": "109619"
  },
  {
    "text": "even an on-premise environment with all four of these environments one problem that often arises is that there's",
    "start": "109619",
    "end": "116399"
  },
  {
    "text": "configuration drift or dependency drift or runtime drift across those four",
    "start": "116399",
    "end": "122130"
  },
  {
    "text": "different environments so here's an example of an application which is being developed on a local laptop the",
    "start": "122130",
    "end": "128849"
  },
  {
    "text": "developer is running version 6.0 point-o of Jeff and their code runs fantastically",
    "start": "128849",
    "end": "134950"
  },
  {
    "text": "they push it to the staging environment and on the staging environment when that",
    "start": "134950",
    "end": "140410"
  },
  {
    "text": "environment was set up it was installed with node 7.0 point oh the coastal runs but then when that code gets promoted to",
    "start": "140410",
    "end": "146800"
  },
  {
    "text": "production there's a machine on that production cluster that's been around for a while longer and it's actually",
    "start": "146800",
    "end": "152080"
  },
  {
    "text": "running noted 4.0 and everything breaks so this leads to this question of why",
    "start": "152080",
    "end": "157209"
  },
  {
    "text": "did it work on my machine but it didn't work in production and when you encounter an issue like this it's very",
    "start": "157209",
    "end": "162970"
  },
  {
    "text": "disconcerting because it causes you to lose trust in your deployment lifecycle and whether or not you'll actually be",
    "start": "162970",
    "end": "168640"
  },
  {
    "text": "able to deliver an application to your customers so the solution that's been created to help solve this problem is",
    "start": "168640",
    "end": "175300"
  },
  {
    "start": "172000",
    "end": "172000"
  },
  {
    "text": "docker so the purpose of docker is to allow you to take your runtime engine take your dependencies and take your",
    "start": "175300",
    "end": "181570"
  },
  {
    "text": "code and package them up into a consistent unit of deployment and this artifact that you create as part of your",
    "start": "181570",
    "end": "188020"
  },
  {
    "text": "build process is something you can deliver to any machine is something you can run locally and you'll be confident",
    "start": "188020",
    "end": "193870"
  },
  {
    "text": "that it's going to run correctly because it's going to bring along with it the proper runtime engine and the proper",
    "start": "193870",
    "end": "199239"
  },
  {
    "text": "dependencies and the proper code the way a docker image works is this built on a",
    "start": "199239",
    "end": "205450"
  },
  {
    "start": "203000",
    "end": "203000"
  },
  {
    "text": "series of layers and those layers each correspond to a command as part of your build process so this is a diagram that",
    "start": "205450",
    "end": "213070"
  },
  {
    "text": "shows an example of how a container might work we start out with the kernel",
    "start": "213070",
    "end": "218530"
  },
  {
    "text": "and on top of that kernel we have a base image which is adding the system",
    "start": "218530",
    "end": "224769"
  },
  {
    "text": "libraries and dependencies bun - because we want to develop an environment that's",
    "start": "224769",
    "end": "230049"
  },
  {
    "text": "using no GS and engine X we add two layers to that image which correspond to the nodes yes binary and the engine X",
    "start": "230049",
    "end": "236620"
  },
  {
    "text": "binary and then we have a writable layer which we're going to add our application",
    "start": "236620",
    "end": "241690"
  },
  {
    "text": "code to and the finished container image is the sum of all of these different things we've added to it it's kind of",
    "start": "241690",
    "end": "248019"
  },
  {
    "text": "like working with a git repository you commit some code you add some more code commit it s more code commit it and the",
    "start": "248019",
    "end": "254500"
  },
  {
    "text": "final project is the sum of all of those commits once they're added together in a similar way the container image is the",
    "start": "254500",
    "end": "260260"
  },
  {
    "text": "sum of all the layers they've added to image and when you have this image it",
    "start": "260260",
    "end": "267040"
  },
  {
    "text": "allows you have really easy reproducible builds you can rerun these commands at any time to regenerate these layers and",
    "start": "267040",
    "end": "273639"
  },
  {
    "text": "when you take this image it's immutable it serves as a template that you use to launch a container and any container",
    "start": "273639",
    "end": "280419"
  },
  {
    "text": "that you launch it has this top writable layer but when you are done running that",
    "start": "280419",
    "end": "285490"
  },
  {
    "text": "container and you shut it down any changes that you've made no longer persist the reason why this is important",
    "start": "285490",
    "end": "291430"
  },
  {
    "text": "is if you think about the old days perhaps we used to deploy applications to servers and we would do it via FTP",
    "start": "291430",
    "end": "297850"
  },
  {
    "text": "perhaps on some virtual hosts somewhere maybe yeah usually SCP if you're a little Martin SSH access at that time",
    "start": "297850",
    "end": "306250"
  },
  {
    "text": "with those type of deploys what would often happen is you would have to run a command to copy your code in run a",
    "start": "306250",
    "end": "312280"
  },
  {
    "text": "command to install dependency and if something failed along the way if you actually want to go execute that",
    "start": "312280",
    "end": "318419"
  },
  {
    "text": "inversion you had deployed and something was wrong you would needed to rollback and try to get things back to the state",
    "start": "318419",
    "end": "324729"
  },
  {
    "text": "that they were in before you did this deploy and it was often very hard to do so once you've installed a new version",
    "start": "324729",
    "end": "330580"
  },
  {
    "text": "of a binary and I need to hunt down and try to figure out how to get the previous version of that binary and what",
    "start": "330580",
    "end": "337270"
  },
  {
    "text": "could be even worse is if the application had failed badly enough it could have mutated the machine in such a",
    "start": "337270",
    "end": "343180"
  },
  {
    "text": "way that your application was just no longer run on that machine and you would have to start over from scratch and try",
    "start": "343180",
    "end": "348669"
  },
  {
    "text": "provision machine or try to rescue that machine in some way so docker containers changed the game by having this",
    "start": "348669",
    "end": "354280"
  },
  {
    "text": "immutable container image which when you launch it it's ephemeral you can run it you can stop running it and discard it",
    "start": "354280",
    "end": "361419"
  },
  {
    "text": "and run a zipper one and the base machine is just an empty shell that stays the same underneath the hood and",
    "start": "361419",
    "end": "368070"
  },
  {
    "text": "so let's give you this reliability when",
    "start": "368070",
    "end": "373180"
  },
  {
    "text": "I actually go and deploy the docker image it runs the exact same way on my local laptop every one is the same on QA",
    "start": "373180",
    "end": "378580"
  },
  {
    "text": "there was a seam in production and it runs the same in my on-premise environment and so I have this",
    "start": "378580",
    "end": "383680"
  },
  {
    "text": "confidence that the application I developed my local laptop that worked there is going to work everywhere that I",
    "start": "383680",
    "end": "390310"
  },
  {
    "text": "write now at this point it's important to consider the difference between a",
    "start": "390310",
    "end": "395890"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "virtual machine versus a docker container if you've been working within",
    "start": "395890",
    "end": "401260"
  },
  {
    "text": "the database ecosystem you probably use ec2 they're familiar with the concept of an Amazon machine image and AMI",
    "start": "401260",
    "end": "408510"
  },
  {
    "text": "and so you may think well this out those benefits of the docker are sound very",
    "start": "408510",
    "end": "413650"
  },
  {
    "text": "similar to the benefits of a virtual machine such as an ami there's a",
    "start": "413650",
    "end": "419230"
  },
  {
    "text": "difference though and that's that an ami is very heavy weight due to the way it runs there's a lot more overhead",
    "start": "419230",
    "end": "425470"
  },
  {
    "text": "associated with that generally and ami takes more time it's going to be much larger often times an order of Giga",
    "start": "425470",
    "end": "432040"
  },
  {
    "text": "bytes in size a versus a docker image do the way it's designed it can often be in",
    "start": "432040",
    "end": "437740"
  },
  {
    "text": "the range of 50 to 70 megabytes because it's just containing your application binaries and the bare minimum required",
    "start": "437740",
    "end": "444460"
  },
  {
    "text": "to execute those alongside your dependencies so what this allows you to do is you can actually run multiple",
    "start": "444460",
    "end": "449920"
  },
  {
    "text": "containers within a single instance and you can run a lot more of them than you would be able to run virtual machines",
    "start": "449920",
    "end": "455470"
  },
  {
    "text": "with an instance if you're using a VM provider you're probably only gonna be",
    "start": "455470",
    "end": "460570"
  },
  {
    "text": "able to run a few different VMs on a particular instance before you run out of resources and you start to have the issues with containers it's so",
    "start": "460570",
    "end": "467680"
  },
  {
    "text": "lightweight it's almost just like running a process and so you can run 10 15 20 containers easily on a mid-sized",
    "start": "467680",
    "end": "474250"
  },
  {
    "text": "instance and what this means is that you go from a state where you are barely",
    "start": "474250",
    "end": "481240"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "utilizing your instances to be able to densely pack them with applications and fully utilize that instance so to",
    "start": "481240",
    "end": "487600"
  },
  {
    "text": "summarize the benefits of the container and docker it gives you this portable application or effect that runs reliably",
    "start": "487600",
    "end": "494680"
  },
  {
    "text": "everywhere that you want to run so that gives you confidence you'll be able to repeat the build and know that that Cody",
    "start": "494680",
    "end": "501850"
  },
  {
    "text": "develops is actually in run production it allows you to run multiple different applications on the same machine we're",
    "start": "501850",
    "end": "507820"
  },
  {
    "text": "even multiple versions of the exact same application on the same machine in such a way that they don't conflict with each other so this is huge if you're doing",
    "start": "507820",
    "end": "513849"
  },
  {
    "text": "something like upgrading the version of your runtime and you're moving from no Jess 6.0 to node.js 7.0 you can actually",
    "start": "513849",
    "end": "521169"
  },
  {
    "text": "run two containers in parallel and one has no gist 6.0 inside of it in your application code and the other has no Jes 7.0 inside",
    "start": "521169",
    "end": "528380"
  },
  {
    "text": "of it in your application code they're running in parallel they're not conflicting with each other because they're not sharing the route base file",
    "start": "528380",
    "end": "535460"
  },
  {
    "text": "system and then finally the benefit is you get better resource utilization by",
    "start": "535460",
    "end": "540560"
  },
  {
    "text": "packing an instance with multiple containers in order to fully utilize the CPU and memory resources of that machine",
    "start": "540560",
    "end": "547520"
  },
  {
    "text": "and that gives you savings so from here it's time to introduce elastic container",
    "start": "547520",
    "end": "553910"
  },
  {
    "text": "service and explain how it integrates with docker and the reason why you would use elastic container service so when it",
    "start": "553910",
    "end": "563090"
  },
  {
    "start": "561000",
    "end": "561000"
  },
  {
    "text": "comes to docker running a single host is easy if I'm working on my local machine I have a docker command line app on my",
    "start": "563090",
    "end": "570080"
  },
  {
    "text": "machine I type docker run and the name of my container and that docker container starts up I can type docker PS",
    "start": "570080",
    "end": "578260"
  },
  {
    "text": "to list all the documents a nurse running on my machine and I can see a list and so it's easy to launch",
    "start": "578260",
    "end": "584450"
  },
  {
    "text": "containers it's easy to manage them it's easy to check the status when those containers on a single host but running",
    "start": "584450",
    "end": "592220"
  },
  {
    "text": "a single host isn't what you want to do an ATS people use database because you want to run a variety of posts they want",
    "start": "592220",
    "end": "598310"
  },
  {
    "text": "to run a really large cluster of hosts and we have very large customers that",
    "start": "598310",
    "end": "603380"
  },
  {
    "text": "are using elastic container service to solve this problem of how do I distribute my containers across gigantic",
    "start": "603380",
    "end": "608390"
  },
  {
    "text": "clusters so for example map boxes show that they run on thirty five hundred instances at peak and we have a customer",
    "start": "608390",
    "end": "614960"
  },
  {
    "text": "Bob Fox that serves over a billion requests an hour using a fleet of twelve hundred instances the way they do this",
    "start": "614960",
    "end": "623120"
  },
  {
    "start": "621000",
    "end": "621000"
  },
  {
    "text": "is by using Amazon elastic container service so this ayah gram shows the",
    "start": "623120",
    "end": "628460"
  },
  {
    "text": "basic components that go into Amazon elastic container service and how they work together and I'm going to zoom in",
    "start": "628460",
    "end": "633950"
  },
  {
    "text": "on each one and and highlight each one explain what it is so to start with we",
    "start": "633950",
    "end": "640970"
  },
  {
    "start": "640000",
    "end": "640000"
  },
  {
    "text": "have a cluster of hosts running an Amazon ec2 and if you've watched the",
    "start": "640970",
    "end": "646340"
  },
  {
    "text": "keynote this morning you'll know that they're now two different ways that you can run a cluster of hosts you can run",
    "start": "646340",
    "end": "652670"
  },
  {
    "text": "them directly yourself if you want to customize for example an ami and a fleet of Ubuntu machines with a",
    "start": "652670",
    "end": "660870"
  },
  {
    "text": "specific customization or you can use Amazon Fargate which is a new solution for running a container and a server",
    "start": "660870",
    "end": "667860"
  },
  {
    "text": "last manner you can just give a container to Amazon and say I would like to run this container somewhere and",
    "start": "667860",
    "end": "673230"
  },
  {
    "text": "Amazon will provision a machine for you behind the scenes without your intervention but at the lowest level",
    "start": "673230",
    "end": "680970"
  },
  {
    "text": "somewhere you need a machine to run your container and whether you're managing that machine yourself or if you're using Amazon Fargate there's still a machine",
    "start": "680970",
    "end": "687930"
  },
  {
    "text": "there so on that machine there's an EC s",
    "start": "687930",
    "end": "693570"
  },
  {
    "text": "agent this agent is what controls what happens on that machine on your behalf",
    "start": "693570",
    "end": "699089"
  },
  {
    "text": "so you think about if you wanted to control the machine yourself you would SSH in you would run a command on it but",
    "start": "699089",
    "end": "704640"
  },
  {
    "text": "you don't want to do that manually so the eCos agent acts on your behalf is consistently running on that machine and",
    "start": "704640",
    "end": "711079"
  },
  {
    "text": "when you want to do something it does it on your behalf to launch a container restart a container stop with container",
    "start": "711079",
    "end": "716910"
  },
  {
    "text": "fetch stats from the container whatever you need to do it will do it on your behalf without you need to manually go",
    "start": "716910",
    "end": "722610"
  },
  {
    "text": "into the Machine and do it and at the top level there's an API which is what",
    "start": "722610",
    "end": "728399"
  },
  {
    "start": "725000",
    "end": "725000"
  },
  {
    "text": "you use to interact with the cluster as a whole and you can get really high level commands to this API so for",
    "start": "728399",
    "end": "734700"
  },
  {
    "text": "example I can say I want to run four copies of this particular application",
    "start": "734700",
    "end": "739829"
  },
  {
    "text": "container distributed across three availability zones and I want to run them on instances that have the",
    "start": "739829",
    "end": "746790"
  },
  {
    "text": "particular type t2 - t2 dot star and so Amazon ECS will take that high level",
    "start": "746790",
    "end": "753329"
  },
  {
    "text": "command it will check the state of the cluster that you have provisioned and it",
    "start": "753329",
    "end": "759329"
  },
  {
    "text": "will find ways to place those tasks on to instances to fulfill the command that",
    "start": "759329",
    "end": "765060"
  },
  {
    "text": "you gave to it and because it integrates really well with the rest of the ecosystem you can also give it commands",
    "start": "765060",
    "end": "770730"
  },
  {
    "text": "like I want to run this container with a particular I am role and I want to run this other container with another I am",
    "start": "770730",
    "end": "777269"
  },
  {
    "text": "role so this allows you to give different containers access to different resources on your eight Abyss account so",
    "start": "777269",
    "end": "785190"
  },
  {
    "text": "I can talk all day about the API and its features but the thing to take away is that it's a high level API where you",
    "start": "785190",
    "end": "790800"
  },
  {
    "text": "give a sensible command about how you want to run the application and it communicates what the agent instructs the agent what",
    "start": "790800",
    "end": "796530"
  },
  {
    "text": "to do on your behalf the container task is ultimately what ends up getting",
    "start": "796530",
    "end": "801900"
  },
  {
    "start": "798000",
    "end": "798000"
  },
  {
    "text": "placed on the instance when you ask it to run a container and the task is",
    "start": "801900",
    "end": "807120"
  },
  {
    "text": "basically one step above the container the container is your application the",
    "start": "807120",
    "end": "812790"
  },
  {
    "text": "task is your application plus the configuration about how you want to run your application so for example of what",
    "start": "812790",
    "end": "819270"
  },
  {
    "text": "environment variables does your application need to to operate does it need disk ask disk access does",
    "start": "819270",
    "end": "825990"
  },
  {
    "text": "it have a port that it receives traffic on does it have any particular you",
    "start": "825990",
    "end": "831120"
  },
  {
    "text": "limits for reading and writing files that need to be set so the task is where you set all of these things about your",
    "start": "831120",
    "end": "836820"
  },
  {
    "text": "application container and UCS will communicate with the ECS agent and place that task onto a machine and then the",
    "start": "836820",
    "end": "845640"
  },
  {
    "start": "844000",
    "end": "844000"
  },
  {
    "text": "final piece of the puzzle that I want to talk about is the load balancer and this is how you get traffic to your containers so you can run a container",
    "start": "845640",
    "end": "853830"
  },
  {
    "text": "which is just running a job to completion and then exiting but the more interesting scenario is you're actually running a service that you want to keep",
    "start": "853830",
    "end": "860130"
  },
  {
    "text": "running persistently and it's receiving web traffic and so with a load balancer Amazon Elastic container service will",
    "start": "860130",
    "end": "866850"
  },
  {
    "text": "actually configure a load balancer on your behalf as well as place the tasks on two instances in your cluster and",
    "start": "866850",
    "end": "873410"
  },
  {
    "text": "there's a one to one parity between those two things so when an Amazon UCS places a task on time machine it will",
    "start": "873410",
    "end": "879960"
  },
  {
    "text": "also reconfigure the load balancer to direct traffic to that task and so this makes it very easy for you to just give",
    "start": "879960",
    "end": "887430"
  },
  {
    "text": "that command to the API and then trust that traffic will eventually reach that container without needing to go in and",
    "start": "887430",
    "end": "892950"
  },
  {
    "text": "do any manual intervention or configuration of how the traffic gets there so after this brief overview of",
    "start": "892950",
    "end": "900510"
  },
  {
    "start": "898000",
    "end": "898000"
  },
  {
    "text": "the basic fundamental concepts of ECS I want to highlight this CSS design for",
    "start": "900510",
    "end": "906090"
  },
  {
    "text": "many use cases so you can use it for a long-running application by asking Amazon ECS to keep for example three",
    "start": "906090",
    "end": "913350"
  },
  {
    "text": "copies this application running at all times and so if one of them crashes it will restart if a machine is taken out",
    "start": "913350",
    "end": "919980"
  },
  {
    "text": "of your cluster that was hosting a copy of your application it will replay that copy that was lost with and copy of",
    "start": "919980",
    "end": "926610"
  },
  {
    "text": "the application is running on a different machine you can also use ecs for one-time jobs you say I want to run",
    "start": "926610",
    "end": "933390"
  },
  {
    "text": "this particular batch job of this particular ETL job to extract some data",
    "start": "933390",
    "end": "939150"
  },
  {
    "text": "from a database I want to run it one time somewhere in the cluster and don't really care where it runs as long as it",
    "start": "939150",
    "end": "944220"
  },
  {
    "text": "runs you can also run multiple different schedulers inside your cluster so you can have a scheduler which is running a",
    "start": "944220",
    "end": "950850"
  },
  {
    "text": "job once a day once a minute you can run you can have a job which is",
    "start": "950850",
    "end": "956400"
  },
  {
    "text": "running every Friday at 4 o'clock and you can have those running alongside",
    "start": "956400",
    "end": "962450"
  },
  {
    "text": "schedulers which are doing things like keeping an application running persistently the overall cluster has all",
    "start": "962450",
    "end": "969480"
  },
  {
    "text": "these different commands you've given the API and it's finding ways to run all",
    "start": "969480",
    "end": "974730"
  },
  {
    "text": "the things that you've asked it to run efficiently and simultaneously Amazon",
    "start": "974730",
    "end": "982110"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "Elastic container service is also designed for use with other 80-bit services so it integrates really well",
    "start": "982110",
    "end": "987570"
  },
  {
    "text": "really well with elastic load balancing elastic block store for storing data a",
    "start": "987570",
    "end": "992730"
  },
  {
    "text": "virtual private cloud so this allows you to separate out your containers and prevent them from being accessible by",
    "start": "992730",
    "end": "999089"
  },
  {
    "text": "attackers cloud watch all the metrics for CPU and memory and your logs from",
    "start": "999089",
    "end": "1006890"
  },
  {
    "text": "your containers are all going into cloud wash so that you can have full visibility into what's going on in your",
    "start": "1006890",
    "end": "1011960"
  },
  {
    "text": "cluster it integrates really well with Identity and Access Management so this allows you to give different processes",
    "start": "1011960",
    "end": "1019070"
  },
  {
    "text": "that are running on the same machine access to different resources so that your password service for example can",
    "start": "1019070",
    "end": "1024740"
  },
  {
    "text": "access a dynamo DB table the storing your passwords but then your other service is only accessing an s3 bucket",
    "start": "1024740",
    "end": "1030800"
  },
  {
    "text": "and the two different containers are running on the machine will only have access to the specific resource that they require and not global overarching",
    "start": "1030800",
    "end": "1038120"
  },
  {
    "text": "access to everything on your account and then finally it's also integrated with Amazon David S Cloud trail so we have",
    "start": "1038120",
    "end": "1045350"
  },
  {
    "text": "this audible log of everything that's happening your cluster and actions that people have taken to launch things or",
    "start": "1045350",
    "end": "1050780"
  },
  {
    "text": "run things in your cluster and elastic container services designed for massive",
    "start": "1050780",
    "end": "1057350"
  },
  {
    "start": "1053000",
    "end": "1053000"
  },
  {
    "text": "scale so by fully managing the control plane on our side we're able to seamlessly",
    "start": "1057350",
    "end": "1063130"
  },
  {
    "text": "scale up to thousands of hosts and really hundred thousands or even millions of tasks across your cluster",
    "start": "1063130",
    "end": "1069940"
  },
  {
    "text": "and even at that scale you still have this control find gain control and",
    "start": "1069940",
    "end": "1075399"
  },
  {
    "text": "monitoring everything is happening inside of that cluster",
    "start": "1075399",
    "end": "1080398"
  },
  {
    "text": "so now that I've briefly introduced docker I briefly introduced elastic container service I want to bring up",
    "start": "1080429",
    "end": "1086080"
  },
  {
    "text": "John Dominguez from realtor.com and he's gonna be telling us the story of how realtor.com came to use elastic",
    "start": "1086080",
    "end": "1092980"
  },
  {
    "text": "container service and lessons they learned along the way so Thank You",
    "start": "1092980",
    "end": "1101890"
  },
  {
    "text": "Nathan for that awesome introduction to ECS in containers my name is John",
    "start": "1101890",
    "end": "1108460"
  },
  {
    "text": "Dominguez I'm director cloud services for realtor.com excited to be here today",
    "start": "1108460",
    "end": "1113740"
  },
  {
    "text": "to talk to you about our transformational journey and how containers and ECS specifically played a",
    "start": "1113740",
    "end": "1120760"
  },
  {
    "text": "significant role for us realtor.com is",
    "start": "1120760",
    "end": "1126059"
  },
  {
    "text": "part of a family of products that are",
    "start": "1126059",
    "end": "1131370"
  },
  {
    "text": "designed to make all things home simple efficient and enjoyable we offer the",
    "start": "1131370",
    "end": "1137289"
  },
  {
    "text": "most comprehensive source of for sale data among all the competing national sites as well as information tools and",
    "start": "1137289",
    "end": "1144850"
  },
  {
    "text": "professional expertise to help people move confidently through every step of their home journey we are also a key",
    "start": "1144850",
    "end": "1152980"
  },
  {
    "start": "1151000",
    "end": "1151000"
  },
  {
    "text": "part of News Corp which has given us great opportunities to collaborate with",
    "start": "1152980",
    "end": "1158549"
  },
  {
    "text": "other news core business units including Dow Jones news Australia news UK and the",
    "start": "1158549",
    "end": "1165880"
  },
  {
    "text": "real estate Australia group and of course we're part of the largest global",
    "start": "1165880",
    "end": "1171820"
  },
  {
    "text": "digital real estate network so",
    "start": "1171820",
    "end": "1178989"
  },
  {
    "start": "1176000",
    "end": "1176000"
  },
  {
    "text": "realtor.com pioneered digital real-estate 20 years ago it's not",
    "start": "1178989",
    "end": "1186379"
  },
  {
    "text": "unusual for a company that reaches that level of maturity to have a great deal",
    "start": "1186379",
    "end": "1192200"
  },
  {
    "text": "of technical debt as well as legacy systems and those can dramatically",
    "start": "1192200",
    "end": "1197929"
  },
  {
    "text": "affect your product velocity so in 2015",
    "start": "1197929",
    "end": "1202970"
  },
  {
    "text": "we started programmed to transform our technology organization and not just",
    "start": "1202970",
    "end": "1210349"
  },
  {
    "text": "from the standpoint of our technology stack and the product itself but",
    "start": "1210349",
    "end": "1215599"
  },
  {
    "text": "everything about how we produce deliver and support our products and at the",
    "start": "1215599",
    "end": "1222950"
  },
  {
    "text": "center of all of that we put the customer first we required that we now",
    "start": "1222950",
    "end": "1228590"
  },
  {
    "text": "get feedback from the customer and iterate on that feedback to improve the",
    "start": "1228590",
    "end": "1234619"
  },
  {
    "text": "product velocity and quality we also decided at that time to essentially",
    "start": "1234619",
    "end": "1240320"
  },
  {
    "text": "rewrite all of our core products from the ground up we weren't going to take anything from those legacy systems and",
    "start": "1240320",
    "end": "1248029"
  },
  {
    "text": "try to pour it over everything would be built as if it were a greenfield project",
    "start": "1248029",
    "end": "1253539"
  },
  {
    "text": "and we would use DevOps agile and cloud as our people process and technology",
    "start": "1253539",
    "end": "1259070"
  },
  {
    "text": "model we began to evangelize the idea of keeping it simple we had a tendency to",
    "start": "1259070",
    "end": "1267129"
  },
  {
    "text": "build very complex application patterns and very complex systems architectures",
    "start": "1267129",
    "end": "1273519"
  },
  {
    "text": "and that led to those those monolithic applications so rather than thinking",
    "start": "1273519",
    "end": "1279169"
  },
  {
    "text": "about I'm building an application we started to tell people you're building a service it wasn't necessarily from day",
    "start": "1279169",
    "end": "1285499"
  },
  {
    "text": "one you know micro services or the are the hot thing but we definitely wanted",
    "start": "1285499",
    "end": "1290779"
  },
  {
    "text": "people to provide api's to two other business units and and and be service",
    "start": "1290779",
    "end": "1298700"
  },
  {
    "text": "oriented which ultimately did lead to to mark service architectures we also",
    "start": "1298700",
    "end": "1304609"
  },
  {
    "text": "wanted to be cloud first when we were acquired by news core they had a goal of",
    "start": "1304609",
    "end": "1309769"
  },
  {
    "text": "being 75 percent in the cloud we said why stop there we'll just go 100% in the cloud and we chose Amazon as",
    "start": "1309769",
    "end": "1318760"
  },
  {
    "text": "our as our cloud provider as long as we were in Amazon we thought why not utilize all the Amazon platforms we",
    "start": "1318760",
    "end": "1327039"
  },
  {
    "text": "didn't feel that there was there was as much Lockean as people are afraid of because I still own my code and I could",
    "start": "1327039",
    "end": "1334090"
  },
  {
    "text": "still deliver my code wherever I want to deliver my code to so we wanted to",
    "start": "1334090",
    "end": "1339250"
  },
  {
    "text": "utilize the Amazon platforms and of course build immutable infrastructure because we had seen over the years quite",
    "start": "1339250",
    "end": "1345220"
  },
  {
    "text": "a bit of bad drift that occurs in the datacenter now our initial deployments",
    "start": "1345220",
    "end": "1353409"
  },
  {
    "start": "1350000",
    "end": "1350000"
  },
  {
    "text": "into the cloud did not use containers at all we used a build burn also called a",
    "start": "1353409",
    "end": "1361179"
  },
  {
    "text": "bakery model where you essentially start with a base ami that can be either provided by Amazon or by an operational",
    "start": "1361179",
    "end": "1368020"
  },
  {
    "text": "team you build an instance out with your runtime your code your dependencies maybe some of your configuration as well",
    "start": "1368020",
    "end": "1375120"
  },
  {
    "text": "you take that you burn a new ami and that ami becomes your artefact that",
    "start": "1375120",
    "end": "1382450"
  },
  {
    "text": "you're going to deliver across multiple environments it's very simple to deliver",
    "start": "1382450",
    "end": "1388419"
  },
  {
    "text": "those am eyes by updating launch configs and scaling groups then spin up instances you throw an EOB or an al be",
    "start": "1388419",
    "end": "1395860"
  },
  {
    "text": "in front of it and everything works great why would you want to do anything else well as we pointed out earlier",
    "start": "1395860",
    "end": "1403510"
  },
  {
    "text": "there are some problems with just building and burning a.m. eyes the one",
    "start": "1403510",
    "end": "1408730"
  },
  {
    "text": "of the largest ones is that it creates large artifacts very large artifacts and",
    "start": "1408730",
    "end": "1414390"
  },
  {
    "text": "90% of that artifact is the same from one service to the next a single team",
    "start": "1414390",
    "end": "1421510"
  },
  {
    "text": "will start grinding out a.m. eyes multiple times a day it's not long",
    "start": "1421510",
    "end": "1426850"
  },
  {
    "text": "before you have thousands of allies across multiple accounts and you're",
    "start": "1426850",
    "end": "1432220"
  },
  {
    "text": "trying to manage the versioning of all these a.m. eyes you're not quite sure what's inside that ami did they build it",
    "start": "1432220",
    "end": "1439030"
  },
  {
    "text": "from my base ami did they build it from someone else's base am I do we now have drift in the",
    "start": "1439030",
    "end": "1444580"
  },
  {
    "text": "am i itself all of this was was just a nightmare around management and the",
    "start": "1444580",
    "end": "1450640"
  },
  {
    "text": "truth was that ami is only needed to be built once or twice a month when Amazon",
    "start": "1450640",
    "end": "1456130"
  },
  {
    "text": "makes a change or when we found it necessary to make a change to the a mine so the obvious solution was to move to",
    "start": "1456130",
    "end": "1463149"
  },
  {
    "text": "containers because two two and a half years ago but we saw the benefits of",
    "start": "1463149",
    "end": "1470230"
  },
  {
    "text": "using smaller artifacts smaller by orders of magnitude there's less",
    "start": "1470230",
    "end": "1476500"
  },
  {
    "text": "duplication from one service to the next some people argue that there's still",
    "start": "1476500",
    "end": "1481630"
  },
  {
    "text": "quite a bit of duplication because your runtime engine your libraries and etcetera may be the same but it's very small there's plenty of artifact",
    "start": "1481630",
    "end": "1492990"
  },
  {
    "text": "repositories that can help with the management of the docker images you can",
    "start": "1492990",
    "end": "1499299"
  },
  {
    "text": "use ECR you can use docker registry you can use our factory and with the smaller",
    "start": "1499299",
    "end": "1507010"
  },
  {
    "text": "artifact as well as the fact that your cluster may already be running is much",
    "start": "1507010",
    "end": "1514149"
  },
  {
    "text": "faster to do those deployments because you're only launching the tasks you also get better portability you can't move a",
    "start": "1514149",
    "end": "1520179"
  },
  {
    "text": "mice outside Amazon without rebuilding them and you can also use the docker",
    "start": "1520179",
    "end": "1527679"
  },
  {
    "text": "containers on local machines as well and there's a potential for cost savings",
    "start": "1527679",
    "end": "1534669"
  },
  {
    "text": "through better resource management I'll explain that a little bit more in a",
    "start": "1534669",
    "end": "1541000"
  },
  {
    "text": "minute so we spent a lot of time talking",
    "start": "1541000",
    "end": "1548019"
  },
  {
    "start": "1544000",
    "end": "1544000"
  },
  {
    "text": "about the containers we've talked about ecs a little bit but what happens when",
    "start": "1548019",
    "end": "1555399"
  },
  {
    "text": "you have a large organization 500 developers 50 teams 4 different",
    "start": "1555399",
    "end": "1560679"
  },
  {
    "text": "locations five different VPS working on you know dozens of products you get very",
    "start": "1560679",
    "end": "1569559"
  },
  {
    "text": "different business needs and opinions about what the right choice",
    "start": "1569559",
    "end": "1575350"
  },
  {
    "text": "your orchestration layer for container management is we basically had three",
    "start": "1575350",
    "end": "1582100"
  },
  {
    "text": "camps one wanted use kubernetes another wanted to use docker swarm says a couple",
    "start": "1582100",
    "end": "1587710"
  },
  {
    "text": "years ago and the third wanted to use ECS most of the teams that wanted to",
    "start": "1587710",
    "end": "1595090"
  },
  {
    "text": "manage their own were very mature DevOps teams who knew everything about Amazon",
    "start": "1595090",
    "end": "1601180"
  },
  {
    "text": "and would have no problem managing it themselves the teams that were",
    "start": "1601180",
    "end": "1606700"
  },
  {
    "text": "onboarding though wanted to use containers had no interest in managing",
    "start": "1606700",
    "end": "1612100"
  },
  {
    "text": "the orchestration layer and so they wanted to go with with ECS cloud",
    "start": "1612100",
    "end": "1617980"
  },
  {
    "text": "services took the point of view of you know we are here to enable development",
    "start": "1617980",
    "end": "1624910"
  },
  {
    "text": "teams to produce and deliver their product we don't want to get in the way",
    "start": "1624910",
    "end": "1630220"
  },
  {
    "text": "and we're not really sure which one is the best answer it may be that they all",
    "start": "1630220",
    "end": "1636820"
  },
  {
    "text": "are so we kind of let it go out as a bit of a bake-off to see which one would",
    "start": "1636820",
    "end": "1642730"
  },
  {
    "text": "gain traction so the first phase with",
    "start": "1642730",
    "end": "1648160"
  },
  {
    "start": "1646000",
    "end": "1646000"
  },
  {
    "text": "containers on ECS was actually using elastic beanstalk so if you're not",
    "start": "1648160",
    "end": "1655540"
  },
  {
    "text": "familiar with Beanstalk it is an orchestration platform provided by Amazon Web Services as a platform as a",
    "start": "1655540",
    "end": "1663250"
  },
  {
    "text": "service and it adds an additional layer of abstraction to simplify the deployment of code and creation of",
    "start": "1663250",
    "end": "1669130"
  },
  {
    "text": "resources it was traditionally used for actually creating a a source package",
    "start": "1669130",
    "end": "1677500"
  },
  {
    "text": "that you would just give to be in stock and it would launch your friend and web applications and that sort of thing but",
    "start": "1677500",
    "end": "1684970"
  },
  {
    "text": "now supports dr. images and it can manage the ECS task definitions scaling",
    "start": "1684970",
    "end": "1691900"
  },
  {
    "text": "groups CEO bees a Oh bees and and everything else that is required in that stack you only need to provide three",
    "start": "1691900",
    "end": "1700780"
  },
  {
    "text": "artifacts one is is the AMI again it can be an Amazon ami or one that you've",
    "start": "1700780",
    "end": "1708500"
  },
  {
    "text": "built yourself your doctor image of course and then your application",
    "start": "1708500",
    "end": "1713960"
  },
  {
    "text": "configuration is provided either through the elastic beanstalk CLI or through the",
    "start": "1713960",
    "end": "1720740"
  },
  {
    "text": "elastic beanstalk console and the cool thing with the the beanstalk console is that it is a single pane of glass",
    "start": "1720740",
    "end": "1726170"
  },
  {
    "text": "there's one place to go to to configure the entire stack you don't have to jump",
    "start": "1726170",
    "end": "1731900"
  },
  {
    "text": "between different areas you know looking at ec2 looking at cloud watch looking at",
    "start": "1731900",
    "end": "1738380"
  },
  {
    "text": "ECS so that pattern took off like",
    "start": "1738380",
    "end": "1745640"
  },
  {
    "text": "wildfire it was easy to use very low learning curve most of the teams were",
    "start": "1745640",
    "end": "1751700"
  },
  {
    "text": "already familiar in some way with Beanstalk and the cool thing was that the teams now started to share their",
    "start": "1751700",
    "end": "1759920"
  },
  {
    "text": "delivery patterns across those organizational lines now we've got teams of developers actually talking to each",
    "start": "1759920",
    "end": "1766580"
  },
  {
    "text": "other solving a common problem issues were that their deployments were still",
    "start": "1766580",
    "end": "1772910"
  },
  {
    "text": "slow and I have slow in quotes because an amazing thing happens to a developer",
    "start": "1772910",
    "end": "1778640"
  },
  {
    "text": "when they move from on-prem to the cloud slow used to be 24 hours now slow is 10",
    "start": "1778640",
    "end": "1784910"
  },
  {
    "text": "minutes so we still wanted to improve the speed a bit the problem was that for",
    "start": "1784910",
    "end": "1792800"
  },
  {
    "text": "each new task at least elastic Beanstalk launches a new instance you can run",
    "start": "1792800",
    "end": "1797810"
  },
  {
    "text": "multiple tasks per instance but if you've configured it that way and you need one more task it's going to launch",
    "start": "1797810",
    "end": "1802910"
  },
  {
    "text": "two more tasks on where instance and it offers very little what in the way of",
    "start": "1802910",
    "end": "1809390"
  },
  {
    "text": "managing that application density so for those reasons we were running too many systems and we wanted to improve or",
    "start": "1809390",
    "end": "1818690"
  },
  {
    "text": "rather we weren't meeting the requirements of faster deployments and lower cost",
    "start": "1818690",
    "end": "1826150"
  },
  {
    "text": "so then cloud services gets involved and",
    "start": "1827170",
    "end": "1832310"
  },
  {
    "text": "works with several teams who reached out to us and wanted to move away from Beanstalk they weren't sure how so we started by",
    "start": "1832310",
    "end": "1839660"
  },
  {
    "text": "helping them out with the new artifact which is a CloudFormation template so",
    "start": "1839660",
    "end": "1845269"
  },
  {
    "text": "rather than using Bienstock to orchestrate we now use cloud formation networks straight you still have to have",
    "start": "1845269",
    "end": "1851600"
  },
  {
    "text": "your docker image and your your base ami but the difference now is that you're",
    "start": "1851600",
    "end": "1856909"
  },
  {
    "text": "going to describe everything in the stack you've got to have a more complete",
    "start": "1856909",
    "end": "1863299"
  },
  {
    "text": "understanding of all of the elements and primitives that are required but the",
    "start": "1863299",
    "end": "1869179"
  },
  {
    "text": "cool thing then is that you now get much finer control over your application and",
    "start": "1869179",
    "end": "1875649"
  },
  {
    "text": "task placement by using cloud watch and",
    "start": "1875649",
    "end": "1881120"
  },
  {
    "text": "you can now not only capture the Amazon platform telemetry but you can also",
    "start": "1881120",
    "end": "1888200"
  },
  {
    "text": "capture your application telemetry in cloud watch and create custom metrics to",
    "start": "1888200",
    "end": "1895759"
  },
  {
    "text": "then either create cloud watch alarms or cloud watch events which that can then",
    "start": "1895759",
    "end": "1902690"
  },
  {
    "text": "trigger a degree of lambda functions to directly manipulate either ECS or the",
    "start": "1902690",
    "end": "1908509"
  },
  {
    "text": "auto scaling groups so today we're now",
    "start": "1908509",
    "end": "1914659"
  },
  {
    "start": "1912000",
    "end": "1912000"
  },
  {
    "text": "moving towards standardization we have working patterns we have wide adoption",
    "start": "1914659",
    "end": "1920840"
  },
  {
    "text": "of ECS so today all new containerized",
    "start": "1920840",
    "end": "1926269"
  },
  {
    "text": "applications are going to be delivered using ECS is the orchestration layer we",
    "start": "1926269",
    "end": "1931549"
  },
  {
    "text": "have a guild that is focused on the standard delivery pipeline for containerized applications using ECS",
    "start": "1931549",
    "end": "1938289"
  },
  {
    "text": "that guild is comprised of technical leaders and developers from across the",
    "start": "1938289",
    "end": "1944269"
  },
  {
    "text": "entire organization every every location every product team if they're using",
    "start": "1944269",
    "end": "1949669"
  },
  {
    "text": "containers they have representation here and we continue to evolve and improve our utilization of the platform and then",
    "start": "1949669",
    "end": "1956450"
  },
  {
    "text": "share those improvements back to the rest of the organization one of the most",
    "start": "1956450",
    "end": "1961490"
  },
  {
    "text": "recent things we had the opportunity to do was actually play with the new Fargate product",
    "start": "1961490",
    "end": "1968090"
  },
  {
    "text": "it works as advertised and we were able to share that internally with with other",
    "start": "1968090",
    "end": "1973470"
  },
  {
    "text": "teams I think the biggest question was does Fargate invalidate all the things",
    "start": "1973470",
    "end": "1978750"
  },
  {
    "text": "we had done before and the answer is no it doesn't it has its use cases it is is",
    "start": "1978750",
    "end": "1986130"
  },
  {
    "text": "still early it will continue to evolve and we will continue to evolve with it",
    "start": "1986130",
    "end": "1993230"
  },
  {
    "text": "and that's the message that I have for today is evolve don't try to build a",
    "start": "1993230",
    "end": "1999690"
  },
  {
    "text": "perfect platform or process on day 1 you'll get to date 300 and realize you still don't have the perfect platform or",
    "start": "1999690",
    "end": "2006470"
  },
  {
    "text": "process you're better off just getting started and taking sort of a Minimum Viable Product or a minimum viable",
    "start": "2006470",
    "end": "2012740"
  },
  {
    "text": "process approach and then iterating on that elastic Beanstalk is a great way to",
    "start": "2012740",
    "end": "2018920"
  },
  {
    "text": "get started you can still do that today I think the key is to communicate get",
    "start": "2018920",
    "end": "2026300"
  },
  {
    "text": "feedback on the process is the process working is the process working for your for your customer if you're if you're in",
    "start": "2026300",
    "end": "2032600"
  },
  {
    "text": "operations your customer is a developer so you want to get their feedback if you are a developer you should get feedback",
    "start": "2032600",
    "end": "2040070"
  },
  {
    "text": "from other developers who are solving the same problem and they work in the same company and they maybe sit on the",
    "start": "2040070",
    "end": "2046700"
  },
  {
    "text": "other side of the cube all right stand up and talk to people but most importantly find the path that works for",
    "start": "2046700",
    "end": "2053090"
  },
  {
    "text": "you we found the path that worked for us you don't necessarily have to do what we",
    "start": "2053090",
    "end": "2058280"
  },
  {
    "text": "did but if you get started and iterate you'll find that path and you'll find it",
    "start": "2058280",
    "end": "2063409"
  },
  {
    "text": "very quickly so none of this could have happened without the excellent work of",
    "start": "2063410",
    "end": "2070040"
  },
  {
    "text": "our software development teams our systems engineering teams we we love",
    "start": "2070040",
    "end": "2075230"
  },
  {
    "text": "these guys we want more of them so we are hiring you can find all of our job",
    "start": "2075230",
    "end": "2081200"
  },
  {
    "text": "listings on careers that move comm slash jobs search for technology it'll bring",
    "start": "2081200",
    "end": "2087110"
  },
  {
    "text": "up all the jobs that are in all the locations that we have and it changes frequently appreciate guys taking the",
    "start": "2087110",
    "end": "2094370"
  },
  {
    "text": "time to listen to me today I've enjoyed it thank you very much hand it back to Nick we got caught up",
    "start": "2094370",
    "end": "2107040"
  },
  {
    "text": "there for a second so I just want to say thank you everyone for attending we have",
    "start": "2107040",
    "end": "2113130"
  },
  {
    "text": "a lot of exciting announcements coming out on ECS not only dis reinvent but we're continuing to develop this product",
    "start": "2113130",
    "end": "2119100"
  },
  {
    "text": "and make it better for everyone so I encourage you to keep in touch with the team make sure that you follow the ATS",
    "start": "2119100",
    "end": "2127080"
  },
  {
    "text": "tech blog for news about UCS and if you're interested in getting started with UCS I highly recommend looking up",
    "start": "2127080",
    "end": "2133650"
  },
  {
    "text": "on github we have a repository called awesome ECS that has a list of resources that are created by the community and",
    "start": "2133650",
    "end": "2140609"
  },
  {
    "text": "for the community by many different companies that are using UCS and what they've actually done phase open-source",
    "start": "2140609",
    "end": "2147350"
  },
  {
    "text": "tooling example architectures about how they actually operate containers within",
    "start": "2147350",
    "end": "2153930"
  },
  {
    "text": "UCS and so you can use that as a starting point or just something to learn from the code if you're a hands-on",
    "start": "2153930",
    "end": "2159570"
  },
  {
    "text": "learner so thanks a lot for coming today [Applause]",
    "start": "2159570",
    "end": "2168820"
  }
]