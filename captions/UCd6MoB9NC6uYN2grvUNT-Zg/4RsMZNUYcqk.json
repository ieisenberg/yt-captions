[
  {
    "start": "0",
    "end": "57000"
  },
  {
    "text": "all right welcome everyone we're going to go ahead and get started thank you all for coming here we know you have a lot of great choices for talks and we",
    "start": "919",
    "end": "7040"
  },
  {
    "text": "really appreciate you spending some time with us today my name is David dueling this is Ryan Rick we are from Monsanto",
    "start": "7040",
    "end": "14240"
  },
  {
    "text": "which is an agricultural company based in St Louis Missouri uh but we have operations all over the United States",
    "start": "14240",
    "end": "21119"
  },
  {
    "text": "and the world today we are going to be talking about our journey into the cloud and particularly about the last year",
    "start": "21119",
    "end": "28080"
  },
  {
    "text": "where we really started to take a cloud first approach and what do I mean by Cloud first well two things first all",
    "start": "28080",
    "end": "35640"
  },
  {
    "text": "new development and any significant refactoring of existing applications the intent is to go to the cloud and the",
    "start": "35640",
    "end": "42800"
  },
  {
    "text": "second is as we go to the cloud we want to design in a cloud first manner we want to design things so that they are",
    "start": "42800",
    "end": "49520"
  },
  {
    "text": "properly architected for the cloud to work within the constraints and the benefits of the",
    "start": "49520",
    "end": "54920"
  },
  {
    "text": "cloud so what can you expect from the session today we're going to be talking",
    "start": "54920",
    "end": "60280"
  },
  {
    "start": "57000",
    "end": "57000"
  },
  {
    "text": "first about what we're calling our theory of the cloud just some principles that we keep in mind whenever we're",
    "start": "60280",
    "end": "66320"
  },
  {
    "text": "designing things whenever we're doing things uh to make sure that we're as successful as can be and basically these",
    "start": "66320",
    "end": "72680"
  },
  {
    "text": "were aggregated by looking at what people were doing what was working for",
    "start": "72680",
    "end": "77880"
  },
  {
    "text": "them what wasn't working for them and collecting those best practices into just a few simple principles that we",
    "start": "77880",
    "end": "84119"
  },
  {
    "text": "think really help as we're moving to the cloud from there we're going to talk about the infrastructure that we're",
    "start": "84119",
    "end": "91000"
  },
  {
    "text": "instantiating and using to run our Solutions in AWS uh particularly it's not going to be",
    "start": "91000",
    "end": "98280"
  },
  {
    "text": "any surprise to anyone that we're using a microservices type architecture and we're using containerized deployments on",
    "start": "98280",
    "end": "104560"
  },
  {
    "text": "that and so this infrastructure is again kind of a collection of best practices of how you want to inter interact with",
    "start": "104560",
    "end": "110960"
  },
  {
    "text": "that and finally we'll talk about the microservices life cycle how we Aid and",
    "start": "110960",
    "end": "116560"
  },
  {
    "text": "automate development teams in creating microservice projects developing them",
    "start": "116560",
    "end": "122439"
  },
  {
    "text": "testing them deploying them and operating them successfully in the cloud I also will give you a word of warning",
    "start": "122439",
    "end": "129679"
  },
  {
    "text": "Amazon is a little bit particular about the types of images that they allow you to use in these presentations and so uh",
    "start": "129679",
    "end": "137879"
  },
  {
    "text": "the stock images that they gave didn't really fit our needs entirely and so we",
    "start": "137879",
    "end": "142959"
  },
  {
    "text": "mainly Ryan um combine these images in ways that I'm sure they original",
    "start": "142959",
    "end": "149400"
  },
  {
    "text": "creators never intended so you have been warned Ryan thank you all right so who",
    "start": "149400",
    "end": "156160"
  },
  {
    "text": "are we and why should you listen to us um I actually first met dueling back in 2003 so 12 years ago when we were both",
    "start": "156160",
    "end": "163120"
  },
  {
    "text": "at the genome sequencing Center at Washington University and working on projects like the Human Genome Project",
    "start": "163120",
    "end": "168760"
  },
  {
    "text": "and the first cancer genome we actually had pedabytes of data and thousands of cores um before Cloud was a thing right",
    "start": "168760",
    "end": "176120"
  },
  {
    "text": "before AWS even existed so we would really like to to think that scientific",
    "start": "176120",
    "end": "181720"
  },
  {
    "text": "Computing was the original internal Cloud so we've been thinking about these problems for a long",
    "start": "181720",
    "end": "187959"
  },
  {
    "text": "time um and and now we're both Architects at Monsanto but in reality",
    "start": "187959",
    "end": "193200"
  },
  {
    "text": "what we spend most of our days doing and our and our background is as developers so we've each programmed in a in a large",
    "start": "193200",
    "end": "198920"
  },
  {
    "text": "number of languages over the years but today you'll hear us talking about Scala and Scala is actually the new backend",
    "start": "198920",
    "end": "205480"
  },
  {
    "text": "language standard at Monsanto um and our platform it's not written in Scola but it's made to make",
    "start": "205480",
    "end": "211640"
  },
  {
    "text": "it easy to make Scala based microservices applications so at monsant we have a",
    "start": "211640",
    "end": "218640"
  },
  {
    "text": "little bit of a different challenge we don't have uh a single application that we need to scale to 100 million users",
    "start": "218640",
    "end": "225200"
  },
  {
    "text": "instead we have thousands of different applications and we have application development teams all over the world so",
    "start": "225200",
    "end": "230280"
  },
  {
    "text": "not just across the us but also in Mexico and Buenos Aries and Switzerland and they all have completely",
    "start": "230280",
    "end": "237239"
  },
  {
    "text": "different types of applications so for instance we have applications um consumer facing in India which allow",
    "start": "237239",
    "end": "244200"
  },
  {
    "text": "millions of farmers to get agronomic updates um and also try to find better prices uh to sell their crops but we",
    "start": "244200",
    "end": "251159"
  },
  {
    "text": "also have automated seed chippers which take pieces of seeds uh we DNA sequence them and then ship them all around the",
    "start": "251159",
    "end": "256840"
  },
  {
    "text": "world to try to speed up the breeding cycle we have a robotic automated Greenhouse in North Carolina which takes",
    "start": "256840",
    "end": "263639"
  },
  {
    "text": "a multi view hyperspectral images and lots of other measurements of tens of thousands of plants in a very controlled",
    "start": "263639",
    "end": "269280"
  },
  {
    "text": "environment and we also have an Internet of Things platform um that takes realtime data from tractors and Planters",
    "start": "269280",
    "end": "275840"
  },
  {
    "text": "and Harvesters uh all over the world in our field testing pipeline so the challenge is how do we get all of these",
    "start": "275840",
    "end": "281520"
  },
  {
    "text": "application teams uh to the cloud uh in a cohesive",
    "start": "281520",
    "end": "286960"
  },
  {
    "text": "Manner and and that's why we really want this to have this theory of cloud because without that lots of people at",
    "start": "287199",
    "end": "293280"
  },
  {
    "text": "Monsanto might think we can just take our existing applications and existing application uh architecture paradigms",
    "start": "293280",
    "end": "299400"
  },
  {
    "text": "and just forklift them into the cloud right do the same thing we've been doing but do it somewhere else and in this",
    "start": "299400",
    "end": "304800"
  },
  {
    "text": "room we all know that that that doesn't work right the cloud is fundamentally different um but it it Bears sort of",
    "start": "304800",
    "end": "310360"
  },
  {
    "text": "writing that down and we're scientists right so we think about this is you know what is the theory what is the theory of",
    "start": "310360",
    "end": "316240"
  },
  {
    "text": "cloud can we write down what makes a cloud fundamentally different and if we do that what can that tell us about",
    "start": "316240",
    "end": "321520"
  },
  {
    "text": "challenges and opportunities in the cloud and thus what is the optimal sort of cloud",
    "start": "321520",
    "end": "327199"
  },
  {
    "text": "architecture and there are lots of different topics um that we could talk about we really think these five are the",
    "start": "327199",
    "end": "332880"
  },
  {
    "text": "most important differentiators of the cloud versus internal the first is that the cloud is highly automated so we have",
    "start": "332880",
    "end": "339160"
  },
  {
    "text": "software defined everything and that's very different from our internal data center where we have teams of people um",
    "start": "339160",
    "end": "344600"
  },
  {
    "text": "you know racking servers and and swapping out hard drives and what's really interesting we'll talk about is that software is Special Second instead",
    "start": "344600",
    "end": "352039"
  },
  {
    "text": "of making upfront Capital Investments we have the elastic nature of the cloud so this combination of potentially unlimited scale but also a pay as you go",
    "start": "352039",
    "end": "359360"
  },
  {
    "text": "EXP defense model next uh we have the ability to create highly available applications",
    "start": "359360",
    "end": "365400"
  },
  {
    "text": "because we can have multi- server multi-az multi- region deployments and shards and replicas and all that good",
    "start": "365400",
    "end": "371039"
  },
  {
    "text": "stuff right um really interestingly uh is really a",
    "start": "371039",
    "end": "376680"
  },
  {
    "text": "doover for security in the cloud we get to start uh from scratch to create a secure environment um and we'll talk",
    "start": "376680",
    "end": "382440"
  },
  {
    "text": "about how we think about doing that from first principles and lastly really orthogonal to to elasticity and",
    "start": "382440",
    "end": "389199"
  },
  {
    "text": "availabil is horizontal scalability we have the ability to provision more like things at any time so our applications",
    "start": "389199",
    "end": "394720"
  },
  {
    "text": "need to take advantage of that all right so given that that's the way the cloud is different what should",
    "start": "394720",
    "end": "399960"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "we do about it um so we'll talk uh briefly about each of these because the cloud is automated and",
    "start": "399960",
    "end": "406759"
  },
  {
    "text": "software is special what we should be doing is creating higher order automation um so not just first level",
    "start": "406759",
    "end": "412599"
  },
  {
    "text": "automation or using the apis that Amazon has but building automation on top of on top of automation second uh there's lot of",
    "start": "412599",
    "end": "419759"
  },
  {
    "text": "reasons elasticity is valuable but we think the most important one is is not just um taking advantage of it in a",
    "start": "419759",
    "end": "427160"
  },
  {
    "text": "first order way but completely rearc How We Do application life cycle for highly available we have we",
    "start": "427160",
    "end": "434240"
  },
  {
    "text": "get to deploy lots of copies of things right but that doesn't actually make our systems fault tolerant and architecting applications for fault tolerance is very",
    "start": "434240",
    "end": "440560"
  },
  {
    "text": "different security we'll talk about what we call security by construction sort of this idea we stolen from functional",
    "start": "440560",
    "end": "447000"
  },
  {
    "text": "programming uh and then lastly we have the ability to make things horizontally scalable but what does that really mean",
    "start": "447000",
    "end": "452240"
  },
  {
    "text": "and how do we make uh parallel systems out of commodity Hardware so",
    "start": "452240",
    "end": "457319"
  },
  {
    "text": "first really what I hope you take away from this talk and what all of the the practice Parts ding is going to talk",
    "start": "457319",
    "end": "462919"
  },
  {
    "text": "about are about what we call higher order automation or colloquially uh robots building robots at Monsanto so we",
    "start": "462919",
    "end": "470199"
  },
  {
    "text": "think automation is not good enough right we could have some configuration files or some some simple language that",
    "start": "470199",
    "end": "475560"
  },
  {
    "text": "creates um stands up infrastructure in automated way but the real opportunity",
    "start": "475560",
    "end": "480639"
  },
  {
    "text": "is that software is special once we bring something from configuration into software we can write higher order",
    "start": "480639",
    "end": "486120"
  },
  {
    "text": "software that generates that software um or or automates it in another way and then we can stack more and more layers",
    "start": "486120",
    "end": "492479"
  },
  {
    "text": "of automation on top of that automation um so the anti of this game is clearly you know you have to have automated test",
    "start": "492479",
    "end": "498720"
  },
  {
    "text": "and continuous integration and continuous delivery but we really want to set the goal as um we don't want this",
    "start": "498720",
    "end": "504879"
  },
  {
    "text": "automated pipeline to ter terminate and someone getting an alert like we have this automation and then like hey you",
    "start": "504879",
    "end": "510240"
  },
  {
    "text": "need to go push this button or remediate something we want the system to be able to consume uh that that data that it",
    "start": "510240",
    "end": "516159"
  },
  {
    "text": "creates and self-heal um and we also want to build automated tools that help us to make more Automation and so",
    "start": "516159",
    "end": "522560"
  },
  {
    "text": "dueling will talk extensively about what we've done in that in that area on the fault tolerance side our uh application",
    "start": "522560",
    "end": "529720"
  },
  {
    "start": "523000",
    "end": "523000"
  },
  {
    "text": "teams today for good reason uh make a lot of assumptions about how they build applications and so with apologies to",
    "start": "529720",
    "end": "536720"
  },
  {
    "text": "Peter Deutsch um some of those are things like the hardware is reliable the network is reliable the database is",
    "start": "536720",
    "end": "542600"
  },
  {
    "text": "reliable um and that all the other services are available and we live in this Magical Kingdom where everything is secure because it's inside the VPC",
    "start": "542600",
    "end": "550480"
  },
  {
    "text": "right um and at Monsanto internally we spend a lot of money on very expensive",
    "start": "550480",
    "end": "555880"
  },
  {
    "text": "hardware and teams of people to preserve this illusion that that things are infallible right but obviously that's",
    "start": "555880",
    "end": "562000"
  },
  {
    "text": "not what we're going to do in the cloud so we need to build applications differently but first generation Cloud",
    "start": "562000",
    "end": "567800"
  },
  {
    "text": "paradigms uh knew that these were problems they tried to solve some of them um but they tried to push all of",
    "start": "567800",
    "end": "573160"
  },
  {
    "text": "that effort onto the application developer so I'm sure you've seen platforms that are like everything is stateless everything is item potent um",
    "start": "573160",
    "end": "580720"
  },
  {
    "text": "but in real the world is not stateless and item potent right and so we think that we can do better um should all of",
    "start": "580720",
    "end": "588120"
  },
  {
    "text": "these Federated application teams across the globe for monsano should they all have to say like oh I should do retries",
    "start": "588120",
    "end": "594079"
  },
  {
    "text": "and if I do retries I should do exponential back off so that I don't uh you know create more contention and when I do that should I need to add normally",
    "start": "594079",
    "end": "600800"
  },
  {
    "text": "distributed random noise Jitter into my exponential back off like no right those are things we should put into the",
    "start": "600800",
    "end": "606399"
  },
  {
    "text": "platform along with things like um you know if your first generation Cloud",
    "start": "606399",
    "end": "611480"
  },
  {
    "text": "platform assumes everything is stateless it can just blow containers away when it wants to make any changes um but we would actually like to take the effort",
    "start": "611480",
    "end": "617800"
  },
  {
    "text": "to preserve inflight transactions um and do the best we can in a second generation Cloud",
    "start": "617800",
    "end": "624440"
  },
  {
    "start": "623000",
    "end": "623000"
  },
  {
    "text": "platform and when we were looking at the cloud first at monsano um we we did the",
    "start": "624440",
    "end": "630480"
  },
  {
    "text": "cost calculation who said it's going to be more expensive for us to run in AWS than on Prem and actually now we think",
    "start": "630480",
    "end": "636000"
  },
  {
    "text": "the opposite and it's it's because elasticity doesn't just give us this this first order result of oh I don't",
    "start": "636000",
    "end": "642920"
  },
  {
    "text": "have to build for Peak I can have some basil level of capacity and then scale up dynamically with load sure that's",
    "start": "642920",
    "end": "648480"
  },
  {
    "text": "valuable but what we think is really the most valuable is is this redesign of the application development Paradigm so",
    "start": "648480",
    "end": "655079"
  },
  {
    "text": "monsano we typically have Dev prod test postr and some other environment I can't",
    "start": "655079",
    "end": "661440"
  },
  {
    "text": "even remember the name of static environments that we keep up all the time most of which are not being used at",
    "start": "661440",
    "end": "667120"
  },
  {
    "text": "any point in time right so what we really want to get to in the cloud is what we call ephemeral environments if",
    "start": "667120",
    "end": "673200"
  },
  {
    "text": "we have enough automation that we can just stand up a VPC from scratch then I can run any kind of tests um or present",
    "start": "673200",
    "end": "679320"
  },
  {
    "text": "to my customers uh an early version of the software and then blow that away instead of keeping five static",
    "start": "679320",
    "end": "685440"
  },
  {
    "text": "environments up all the time for everything and secondarily um I me Montano is a science-based",
    "start": "685440",
    "end": "692000"
  },
  {
    "text": "company we're built on science and Innovation and the cloud really reduces the transaction cost for people to do",
    "start": "692000",
    "end": "698800"
  },
  {
    "text": "experiments internally in monsano you know if you want a a virtual machine you",
    "start": "698800",
    "end": "704120"
  },
  {
    "text": "can give us a couple thousand dollars and wait a couple weeks and then you get one right but those transaction costs go",
    "start": "704120",
    "end": "709519"
  },
  {
    "text": "to zero in the cloud so we need to make sure that we put automated and self-service systems in place that we",
    "start": "709519",
    "end": "714880"
  },
  {
    "text": "can pass those benefits along to our developers okay so the really exciting one um we",
    "start": "714880",
    "end": "722920"
  },
  {
    "text": "also were slow to get to the Cloud because we thought the cloud is going to be less secure is it secure enough for",
    "start": "722920",
    "end": "728279"
  },
  {
    "text": "our data and now in monsana we have the exact opposite conversation we say we",
    "start": "728279",
    "end": "733920"
  },
  {
    "text": "know we can make the cloud more secure than we could ever possibly hope to have our internal environment remediated",
    "start": "733920",
    "end": "740600"
  },
  {
    "text": "right um and since we get to do it from scratch in this doover in functional",
    "start": "740600",
    "end": "745880"
  },
  {
    "text": "programming uh we have immutable data and immutable variables right you can never read assign things so we have this",
    "start": "745880",
    "end": "751079"
  },
  {
    "text": "concept called uh correct by construction meaning when I new up an object it has to be uh perfectly",
    "start": "751079",
    "end": "757600"
  },
  {
    "text": "realized it's it's perfectly consistent because I don't ever get to change it right um so we want to do the same thing",
    "start": "757600",
    "end": "764440"
  },
  {
    "text": "with security is it possible to create a level of security automation where it's not even possible to express insecure",
    "start": "764440",
    "end": "771800"
  },
  {
    "text": "constructs can we use the type cheer um and and sort of generation time checks to only allow you to create constructs",
    "start": "771800",
    "end": "778800"
  },
  {
    "text": "which are secure and dueling will talk about that so lastly on on the theory",
    "start": "778800",
    "end": "784120"
  },
  {
    "start": "781000",
    "end": "781000"
  },
  {
    "text": "side um we have horizontally scalable and and we think this is really orthogonal from Fault tolerance so those",
    "start": "784120",
    "end": "790240"
  },
  {
    "text": "systems like um that are based on paxos or raft they kind of give this illusion",
    "start": "790240",
    "end": "795920"
  },
  {
    "text": "of having a distributed system the problem is they don't actually scale control they scale everything but",
    "start": "795920",
    "end": "801680"
  },
  {
    "text": "control so we really encourage everyone to go back um and it's not a coincidence that this paper is from Amazon the",
    "start": "801680",
    "end": "806720"
  },
  {
    "text": "original Dynamo paper that this should should really be the gold standard of what a distributed system means um and",
    "start": "806720",
    "end": "813320"
  },
  {
    "text": "that scales out both reads and writes which means things like we you can't have the Master Slave Paradigm um that",
    "start": "813320",
    "end": "819079"
  },
  {
    "text": "you can take out any node and continue to provide scalability so you can't have one you know coordinator and 100 worker",
    "start": "819079",
    "end": "825120"
  },
  {
    "text": "noes that doesn't work either um but a way to formalize this is to say the",
    "start": "825120",
    "end": "831120"
  },
  {
    "text": "overhead cost has to be at most increase constantly when you add another node so the growth is linear um and and only",
    "start": "831120",
    "end": "838199"
  },
  {
    "text": "eventually consistent systems like Dynamo so sort of AP systems in the cap Theory um have those properties and that",
    "start": "838199",
    "end": "846240"
  },
  {
    "text": "imposes new challenges to application developers in that all applications now have to realize that there can be",
    "start": "846240",
    "end": "852240"
  },
  {
    "text": "multiple inconsistent states of the world and they have to merge that data um and commit it back and that's a major",
    "start": "852240",
    "end": "858199"
  },
  {
    "text": "change for applications so that's enough Theory I'm going to turn it over to David to talk about our practice thanks",
    "start": "858199",
    "end": "864000"
  },
  {
    "text": "so as Ryan said we are very aggressive about Automation and in particular of",
    "start": "864000",
    "end": "869279"
  },
  {
    "text": "the things that we want to automate is infrastructure and so why are we interested really in automating",
    "start": "869279",
    "end": "874680"
  },
  {
    "text": "infrastructure Ryan talked a bit about it but what does that really mean on paper well we want each of our",
    "start": "874680",
    "end": "880199"
  },
  {
    "text": "development teams to be able to move at their own pace we don't want them to",
    "start": "880199",
    "end": "885440"
  },
  {
    "text": "have to wait for someone else to instantiate a virtual machine or stand up a database for them or to have to",
    "start": "885440",
    "end": "892120"
  },
  {
    "text": "coordinate with other teams around shared Library updates or framework updates or anything like that we want",
    "start": "892120",
    "end": "898519"
  },
  {
    "text": "them to be be able to manage their infrastructure in an easy good way and",
    "start": "898519",
    "end": "904320"
  },
  {
    "text": "we want them to operate in a true devops model where not only do they own their",
    "start": "904320",
    "end": "910320"
  },
  {
    "text": "stack their solution vertically but they also own it from Cradle to grade from creation to retirement right and so we",
    "start": "910320",
    "end": "917360"
  },
  {
    "text": "want them to be in total control of how they're moving forward uh and to do that",
    "start": "917360",
    "end": "922480"
  },
  {
    "text": "in a good way in a secure way in a way that really addresses all of those principles all the theory of cloud that",
    "start": "922480",
    "end": "929279"
  },
  {
    "text": "talked about we need to automate things because we can't distribute expertise in",
    "start": "929279",
    "end": "934759"
  },
  {
    "text": "every aspect of Highly available fault tolerance secure uh Computing to",
    "start": "934759",
    "end": "940040"
  },
  {
    "text": "everyone instantaneously without something like a lot of automation so what does it look like and how do we",
    "start": "940040",
    "end": "945639"
  },
  {
    "text": "begin to automate the instantiation of hundreds or even thousands of epcs well first let's look at the architecture",
    "start": "945639",
    "end": "951680"
  },
  {
    "text": "that we want to create and as I mentioned earlier this architecture is going to look this diagram is going to",
    "start": "951680",
    "end": "957959"
  },
  {
    "text": "look very similar to diagrams that you've seen in probably seen in other talks here at reinvent because it is",
    "start": "957959",
    "end": "963839"
  },
  {
    "text": "really just an aggregation of best practices of what people are doing to deploy and manage microservices using",
    "start": "963839",
    "end": "970920"
  },
  {
    "text": "doc uh Docker containers uh in AWS and but before I get into the details of",
    "start": "970920",
    "end": "977480"
  },
  {
    "text": "each part of this and we'll do that in the next couple slides where it's not quite so overwhelming uh I do want to",
    "start": "977480",
    "end": "983560"
  },
  {
    "text": "say a little bit about how we approach consuming AWS Services um um you know",
    "start": "983560",
    "end": "989839"
  },
  {
    "text": "initially there was some concern well we don't want to get locked in with AWS uh but we pushed back pretty hard against",
    "start": "989839",
    "end": "996959"
  },
  {
    "text": "that uh idea because really what we don't want to do is re-engineer",
    "start": "996959",
    "end": "1003800"
  },
  {
    "text": "everything AWS has already engineered that's going to take a lot more resources and a lot more time than not",
    "start": "1003800",
    "end": "1009759"
  },
  {
    "text": "some speculative time in the future where we may need to move from one infrastructure as a service provider to",
    "start": "1009759",
    "end": "1015360"
  },
  {
    "text": "another and so we are very aggressive about using native AWS Services where we",
    "start": "1015360",
    "end": "1020560"
  },
  {
    "text": "can and where it makes sense so again this VPC uh this uh design for",
    "start": "1020560",
    "end": "1026319"
  },
  {
    "text": "microservice is a pretty standard first we stand up a VPC a virtual private Cloud our own virtual IP space in uh in",
    "start": "1026319",
    "end": "1034199"
  },
  {
    "text": "the cloud uh and we span that across two availability zones in a single region at",
    "start": "1034199",
    "end": "1040438"
  },
  {
    "text": "present although we're planning to use uh three availability zones and eventually expand to multi-region type",
    "start": "1040439",
    "end": "1046079"
  },
  {
    "text": "deployments through automation uh looking at the far left portion of this slide uh we have the two public subnets",
    "start": "1046079",
    "end": "1053240"
  },
  {
    "text": "one in each availability Zone and that's where our public assets are in each of those subnets there is a network address",
    "start": "1053240",
    "end": "1059240"
  },
  {
    "text": "translation instance or natat instance and all of the egress Network traffic",
    "start": "1059240",
    "end": "1064720"
  },
  {
    "text": "egress from the private subnets out to the larger internet go through those Gat",
    "start": "1064720",
    "end": "1070160"
  },
  {
    "text": "boxes and we have IP table rules on those n boxes to log all that traffic so",
    "start": "1070160",
    "end": "1075720"
  },
  {
    "text": "that we can collect it and analyze it later there's also so a Bastion instance and that's the only SSH Ingress point",
    "start": "1075720",
    "end": "1083400"
  },
  {
    "text": "for the VPC if you need to get to any other host you have to bounce through that Bastion H and then the last in the",
    "start": "1083400",
    "end": "1090720"
  },
  {
    "text": "public subnet are our elastic load balancers and we have one for web traffic and one for our services traffic",
    "start": "1090720",
    "end": "1096799"
  },
  {
    "text": "and those elvs sit in front of our Gateway autoscaling group so in the private subnets again one in each",
    "start": "1096799",
    "end": "1103400"
  },
  {
    "text": "availability Zone we have an autoscaling group for Gateway services and so that's in the middle of the unshaded area right",
    "start": "1103400",
    "end": "1110600"
  },
  {
    "text": "there and on each instance in our Auto scaling in our Gateway Auto scaling",
    "start": "1110600",
    "end": "1115760"
  },
  {
    "text": "group we're running a web Gateway and an API Gateway our web Gateway is engine X",
    "start": "1115760",
    "end": "1121919"
  },
  {
    "text": "and that is essentially uh communicating with our single signon provider and fronting static Assets in S3 so just",
    "start": "1121919",
    "end": "1129760"
  },
  {
    "text": "HTML CSS uh images and JavaScript that's all that's uh coming from there so",
    "start": "1129760",
    "end": "1136880"
  },
  {
    "text": "static single page type loading paradig time and our API Gateway is uh akana's",
    "start": "1136880",
    "end": "1142480"
  },
  {
    "text": "Network director and that is sitting in front of our services that we actually",
    "start": "1142480",
    "end": "1147559"
  },
  {
    "text": "deploy into the Service autoscaling Group which is just to the right of that",
    "start": "1147559",
    "end": "1153000"
  },
  {
    "text": "on the diagram and that's where the actual code the actual Docker containers generated from the code that our",
    "start": "1153000",
    "end": "1159600"
  },
  {
    "text": "solution teams are creating get deployed uh the last thing in the private subnets",
    "start": "1159600",
    "end": "1164960"
  },
  {
    "text": "is our logging and metrics instance and for those we're using elk for uh the",
    "start": "1164960",
    "end": "1170039"
  },
  {
    "text": "elastic search log stash and Cabana for our log sync and we're using Prometheus",
    "start": "1170039",
    "end": "1177080"
  },
  {
    "text": "for metric scraping of our services and the Cabana dashboard and prom Dash are",
    "start": "1177080",
    "end": "1184280"
  },
  {
    "text": "available also through the web Gateway so people can access them from outside",
    "start": "1184280",
    "end": "1189480"
  },
  {
    "text": "the VPC developers and so um finally when you're you're running these Services you need to persist your data",
    "start": "1189480",
    "end": "1196200"
  },
  {
    "text": "and for that we're using postgress uh RDS we really feel like postrest ql is",
    "start": "1196200",
    "end": "1202159"
  },
  {
    "text": "the best kept secret in relational databases um it's it's an awesome product it has great features uh and",
    "start": "1202159",
    "end": "1209400"
  },
  {
    "text": "it's just Rock Solid we really love it and we especially love it in RDS um and then we finally glue all this stuff",
    "start": "1209400",
    "end": "1215720"
  },
  {
    "text": "together with things like uh S3 EBS Imam uh we use a lot of Route 53 both",
    "start": "1215720",
    "end": "1222880"
  },
  {
    "text": "internally into the VPC and for external uh DNS and then uh monitor everything",
    "start": "1222880",
    "end": "1228720"
  },
  {
    "text": "with Cloud watch and cloud trail so this is what it looks like all",
    "start": "1228720",
    "end": "1233960"
  },
  {
    "text": "together and um just to give people a flavor for what you know how packets",
    "start": "1233960",
    "end": "1239679"
  },
  {
    "text": "kind of flow through this system we'll just sort of walk through a simple request so let's say you give um the",
    "start": "1239679",
    "end": "1245640"
  },
  {
    "text": "host name for your endpoint that you've registered in Amazon Route 53 for the",
    "start": "1245640",
    "end": "1251559"
  },
  {
    "text": "web elb to somebody they type that into their browser what happens that uh",
    "start": "1251559",
    "end": "1256880"
  },
  {
    "text": "browser is going to do a DNS look up up it's going to get a c name for the web elb that's going to resolve to one of",
    "start": "1256880",
    "end": "1263400"
  },
  {
    "text": "the IP addresses that are associated with that elb and it's going to send the request that's going to pass through the web elb onto the Gateway layer and",
    "start": "1263400",
    "end": "1271760"
  },
  {
    "text": "specifically an engine X container running in the Gateway layer engine X is",
    "start": "1271760",
    "end": "1276880"
  },
  {
    "text": "going to say um you're hitting me with HTTP on Port 80 uh I'm going to redirect",
    "start": "1276880",
    "end": "1282559"
  },
  {
    "text": "you to Port 443 so we can do secure communication that goes back out to the browser the browser sends uh the new",
    "start": "1282559",
    "end": "1289520"
  },
  {
    "text": "request in over https that hits the elb again hits the engine X Gateway again",
    "start": "1289520",
    "end": "1295559"
  },
  {
    "text": "engine X checks to see if you have an authenticated user in your um you know that token in your headers you don't so",
    "start": "1295559",
    "end": "1302679"
  },
  {
    "text": "it redirects you to our single sign on solution you type in your username and password it bounces you back again",
    "start": "1302679",
    "end": "1308679"
  },
  {
    "text": "through the elb through the engine X the engine X says good you got the uh the header you're on Port 443 I'm going to",
    "start": "1308679",
    "end": "1315880"
  },
  {
    "text": "proxy you to the S3 bucket that is serving the content for this site that as from there you're grabbing the HTML",
    "start": "1315880",
    "end": "1322559"
  },
  {
    "text": "the CSS the images the JavaScript the browser starts to render that page it",
    "start": "1322559",
    "end": "1329760"
  },
  {
    "text": "hits some JavaScript starts to execute it and makes a service call that's going to hit the service elb that's going to",
    "start": "1329760",
    "end": "1335919"
  },
  {
    "text": "go to our API Gateway the API is going to make sure it's a valid request and that it's an authenticated request and",
    "start": "1335919",
    "end": "1341919"
  },
  {
    "text": "then it's going to pass it onto the service layer specifically one of the nodes in the service auto scaling group",
    "start": "1341919",
    "end": "1347640"
  },
  {
    "text": "that is running the service that you're calling that service is going to do what it does either read or write some data",
    "start": "1347640",
    "end": "1353120"
  },
  {
    "text": "to postgress and then respond uh going out and uh so that's sort of how the the",
    "start": "1353120",
    "end": "1359919"
  },
  {
    "text": "request cycle looks in this infrastructure and I should also mention uh we're flexible about how we configure",
    "start": "1359919",
    "end": "1366960"
  },
  {
    "text": "RDS in this environment uh each microservice as you would expect has its own user and schema in the database that",
    "start": "1366960",
    "end": "1374520"
  },
  {
    "text": "it solely controls and it solely accesses um but but if you're concerned",
    "start": "1374520",
    "end": "1380000"
  },
  {
    "text": "about cost you can Multiplex multiple schemas for multiple microsurfaces onto",
    "start": "1380000",
    "end": "1385760"
  },
  {
    "text": "a single RDS interest uh instance if you're more concerned about performance",
    "start": "1385760",
    "end": "1391360"
  },
  {
    "text": "then you can have multiple RDS instances and have just one of each for each microservice so you can imagine uh to",
    "start": "1391360",
    "end": "1399880"
  },
  {
    "text": "instantiate an infrastructure like this could take dozens or even hundreds of Ip uh API calls to AWS or you could use",
    "start": "1399880",
    "end": "1408039"
  },
  {
    "text": "just one one specifically a call to the AWS cloud formation API and if you're not familiar with cloud formation it's",
    "start": "1408039",
    "end": "1415440"
  },
  {
    "text": "basically a way for you to Define what resources you want what are their",
    "start": "1415440",
    "end": "1421039"
  },
  {
    "text": "relationships hand that to Amazon and with one API call create stack it",
    "start": "1421039",
    "end": "1426080"
  },
  {
    "text": "creates those sets of resources which it calls a stack um and the way that you",
    "start": "1426080",
    "end": "1432000"
  },
  {
    "text": "define those resources is with a template which is just a Big Blob of",
    "start": "1432000",
    "end": "1437279"
  },
  {
    "text": "Json and and uh on the right hand side of this slide we see a small snippet of",
    "start": "1437279",
    "end": "1443080"
  },
  {
    "text": "what cloud formation template Json looks like at the very top we're creating an",
    "start": "1443080",
    "end": "1448159"
  },
  {
    "text": "elastic IP address that's that type AWS ec2 EIP elastic IP address uh we give it",
    "start": "1448159",
    "end": "1455679"
  },
  {
    "text": "a name at the top IP address and then give some properties to it we create a security group right before that uh",
    "start": "1455679",
    "end": "1461919"
  },
  {
    "text": "right below that that's that AWS ec2 Security Group uh whose name is instant Security Group and then at the bottom we",
    "start": "1461919",
    "end": "1468080"
  },
  {
    "text": "actually create an ec2 instance that we call web server instance and it's not shown but those would be associated with",
    "start": "1468080",
    "end": "1474360"
  },
  {
    "text": "the um with the security group and with the IP address eventually so we really like cloud",
    "start": "1474360",
    "end": "1481760"
  },
  {
    "text": "formation it's a great way to instantiate arbitrarily complex infrastructures with a single call but",
    "start": "1481760",
    "end": "1488399"
  },
  {
    "text": "we have found that it has two weaknesses uh first it doesn't create a good way",
    "start": "1488399",
    "end": "1494360"
  },
  {
    "text": "for you to create templates from scratch uh at these complicated templates from",
    "start": "1494360",
    "end": "1500120"
  },
  {
    "text": "scratch um there are things like cloudformer and the rele recently announced uh cloud formation designer uh",
    "start": "1500120",
    "end": "1508000"
  },
  {
    "text": "but those are very manual processes manual processes are error prone we want to automate things we want to to think",
    "start": "1508000",
    "end": "1514760"
  },
  {
    "text": "about things at a higher order than that um the second weakness is cloud formation doesn't give you any real way",
    "start": "1514760",
    "end": "1520320"
  },
  {
    "text": "to interact with that stack interact with those resources that you've created",
    "start": "1520320",
    "end": "1525440"
  },
  {
    "text": "once you've spun it up and so those are two areas of that we thought we could improve upon uh because so talking first",
    "start": "1525440",
    "end": "1533919"
  },
  {
    "text": "now about you know creating templates from scratch and doing that in a good way um the template to create this",
    "start": "1533919",
    "end": "1542520"
  },
  {
    "text": "infrastructure is more than 5,000 lines of Json and uh you know if you've ever",
    "start": "1542520",
    "end": "1548399"
  },
  {
    "text": "edited Json by hand you know that you don't want to edit a 5,000 line Json file uh we started doing this initially",
    "start": "1548399",
    "end": "1555279"
  },
  {
    "text": "when we use cloud formation and you know you always for getting a comma somewhere or not closing a you know double quot",
    "start": "1555279",
    "end": "1561840"
  },
  {
    "text": "somewhere and it just became a real problem and so we started to look around for uh tools that would help us to",
    "start": "1561840",
    "end": "1568720"
  },
  {
    "text": "create cloud formation templates uh in a better way and there were a few out there that solved this problem that you",
    "start": "1568720",
    "end": "1575679"
  },
  {
    "text": "know invalid Json but um there were other problems that we would hit relatively frequently that they didn't",
    "start": "1575679",
    "end": "1582080"
  },
  {
    "text": "solve and so we created uh what we call uh the cloud formation template",
    "start": "1582080",
    "end": "1588360"
  },
  {
    "start": "1588000",
    "end": "1588000"
  },
  {
    "text": "generator it's not the most original name in the world but it does give the uh the point across uh plus we tried a",
    "start": "1588360",
    "end": "1595760"
  },
  {
    "text": "bunch of other names and they were already taken so um what is uh the cloud",
    "start": "1595760",
    "end": "1601080"
  },
  {
    "text": "formation template generator as its uh GitHub page says it's a typ safe Scala",
    "start": "1601080",
    "end": "1606360"
  },
  {
    "text": "DSL or domain specific language for uh generating cloud formation templates and",
    "start": "1606360",
    "end": "1612960"
  },
  {
    "text": "the URL for the GitHub page is uh right down there at the bottom and we'll have those at the end too",
    "start": "1612960",
    "end": "1619159"
  },
  {
    "text": "um but uh so what but what does that mean a typesafe Scala DSL for generating",
    "start": "1619159",
    "end": "1624360"
  },
  {
    "text": "Cloud information templates well we it certainly solves the problem of creating valid Json just like the other ones but",
    "start": "1624360",
    "end": "1631679"
  },
  {
    "text": "there are other problems that it solves that the other template generators don't for example referential Integrity so we",
    "start": "1631679",
    "end": "1639720"
  },
  {
    "text": "can just look at an example and walk through to to say what we mean by referential Integrity uh in the top",
    "start": "1639720",
    "end": "1645440"
  },
  {
    "text": "right Orange Box there we're creating a RDS database subnet group that you can",
    "start": "1645440",
    "end": "1651159"
  },
  {
    "text": "see that at the bottom there where it says type is AWS RDS DB subnet group and",
    "start": "1651159",
    "end": "1656520"
  },
  {
    "text": "the um at the top you're giving it a name DB subnet group and then you're listing some properties for it you're",
    "start": "1656520",
    "end": "1661600"
  },
  {
    "text": "defining properties for it and the key property for a database subnet group is",
    "start": "1661600",
    "end": "1667440"
  },
  {
    "text": "that subnet ID section the actual subnets that are part of the group and",
    "start": "1667440",
    "end": "1672840"
  },
  {
    "text": "here you can see these are references to other entities um in the template",
    "start": "1672840",
    "end": "1679279"
  },
  {
    "text": "specifically DB subnet 1 and DB subnet 2 now the other template generators make",
    "start": "1679279",
    "end": "1686640"
  },
  {
    "text": "no attempt to ensure that those references are in any way valid that those things actually Exist Elsewhere in",
    "start": "1686640",
    "end": "1693320"
  },
  {
    "text": "the template our DSL the cloud formation template generator does that what's more",
    "start": "1693320",
    "end": "1700000"
  },
  {
    "text": "looking at the code at the bottom which is actually the DSL for generating it you can see that it's fairly similar has",
    "start": "1700000",
    "end": "1706159"
  },
  {
    "text": "a lot of the same things you give it a name you have a thing called subnet IDs and DB subnet group description just",
    "start": "1706159",
    "end": "1711840"
  },
  {
    "text": "like you have above um but you can see it's more compact it's simpler and it",
    "start": "1711840",
    "end": "1716880"
  },
  {
    "text": "also in addition to making sure that those subnet IDs that are re uh resource",
    "start": "1716880",
    "end": "1722640"
  },
  {
    "text": "ref in that sequence uh not only do they exist but they make sure that it's they",
    "start": "1722640",
    "end": "1728159"
  },
  {
    "text": "are the right type of thing because even cloud formations buil-in template",
    "start": "1728159",
    "end": "1733200"
  },
  {
    "text": "generator makes no attempt to ensure that something you are referencing is of the right type so you could submit a",
    "start": "1733200",
    "end": "1740600"
  },
  {
    "text": "template that had in the subnet IDs an ec2 instance reference or an elb",
    "start": "1740600",
    "end": "1745720"
  },
  {
    "text": "reference or whatever and it would pass the validator for cloud formation it",
    "start": "1745720",
    "end": "1750919"
  },
  {
    "text": "won't pass ours you try to do that with ours it'll say that's not a subnet I'm not creating this template so instead of",
    "start": "1750919",
    "end": "1757720"
  },
  {
    "text": "you instantiating some stack having start spinning up things having it start costing you money",
    "start": "1757720",
    "end": "1764799"
  },
  {
    "text": "only to have it all roll back a get charge for the whole hour though um we we prevent that uh from",
    "start": "1764799",
    "end": "1772440"
  },
  {
    "text": "happening before it even starts and as you can tell it's also less code and less code means less",
    "start": "1772440",
    "end": "1779640"
  },
  {
    "text": "chances for error now before I go to the next slide please do not try to read it",
    "start": "1779640",
    "end": "1786519"
  },
  {
    "text": "okay you'll hurt yourself so I I we only have these examples here to show just",
    "start": "1786519",
    "end": "1792600"
  },
  {
    "start": "1789000",
    "end": "1789000"
  },
  {
    "text": "sort of relative amounts of complexity because another thing that we found when we were creating these templates you",
    "start": "1792600",
    "end": "1797799"
  },
  {
    "text": "know sort of uh using the DSL you know we went from 5,000 lines of Json to you",
    "start": "1797799",
    "end": "1803799"
  },
  {
    "text": "know 3,000 lines of of of Scala um but it's still pretty long and still pretty",
    "start": "1803799",
    "end": "1808880"
  },
  {
    "text": "cumbersome and we found that we we did a lot of things over and over a lot of the same sorts of things there was a lot of",
    "start": "1808880",
    "end": "1814919"
  },
  {
    "text": "boilerplate involved in a lot of things for example here the two orange boxes represent the cloud formation template",
    "start": "1814919",
    "end": "1822000"
  },
  {
    "text": "for an Autos scaling group and it's Associated launch config that's a one toone correspondence that's always there",
    "start": "1822000",
    "end": "1829200"
  },
  {
    "text": "and so you need to make sure that those are referencing each other property and and then properly and you have all the",
    "start": "1829200",
    "end": "1834760"
  },
  {
    "text": "uh the boiler plate and stuff like that and we thought you know we can do better we can create higher order Builder",
    "start": "1834760",
    "end": "1840159"
  },
  {
    "text": "functions in this case ASG for autoscaling group wherein in one call in",
    "start": "1840159",
    "end": "1846159"
  },
  {
    "text": "one function call you're creating both the autoscaling group and its Associated",
    "start": "1846159",
    "end": "1851399"
  },
  {
    "text": "launch config and behind the scenes it's getting rid of boiler plate it's filling that in for you and it's making sure",
    "start": "1851399",
    "end": "1858120"
  },
  {
    "text": "that those things are associated properly so we've created these higher order builders for things like Auto scaling groups elbs elbs associated with",
    "start": "1858120",
    "end": "1866240"
  },
  {
    "text": "autoscaling groups ec2 instances stuff like that so uh so then we you know",
    "start": "1866240",
    "end": "1871799"
  },
  {
    "text": "we're able to get 5,000 lines of Json down to about 2,000 lines of Json uh excuse me of Scala uh and from there we",
    "start": "1871799",
    "end": "1878720"
  },
  {
    "text": "looked at what was left and found that it was mostly related to security groups",
    "start": "1878720",
    "end": "1884440"
  },
  {
    "text": "and so Ryan and I talked back and forth and tried to figure out you know what could we we do to further shrink our",
    "start": "1884440",
    "end": "1891200"
  },
  {
    "text": "chances per error you know reduce the amount of code we have to create to create these templates um and uh we",
    "start": "1891200",
    "end": "1897399"
  },
  {
    "text": "settled on essentially automatically instantiating empty security groups for",
    "start": "1897399",
    "end": "1903240"
  },
  {
    "text": "every resource that can be associated with them so elbs rds's ec2 instances",
    "start": "1903240",
    "end": "1909120"
  },
  {
    "text": "they automatically when you create them they automatically get a security group associated with them and the nice thing",
    "start": "1909120",
    "end": "1915799"
  },
  {
    "text": "about cloud formation is that you can create these empty security groups and then later or elsewhere in",
    "start": "1915799",
    "end": "1922159"
  },
  {
    "text": "the template you can add Ingress and egress rules to them um sort of",
    "start": "1922159",
    "end": "1927519"
  },
  {
    "text": "separately and so we did that and then Ryan took it one step further he said",
    "start": "1927519",
    "end": "1933639"
  },
  {
    "text": "you know how can we make these things easier to read and again don't read the Json it is bad for your health okay but",
    "start": "1933639",
    "end": "1941279"
  },
  {
    "start": "1934000",
    "end": "1934000"
  },
  {
    "text": "go ahead and read the top part that's the DSL Ryan created the Chickenfoot",
    "start": "1941279",
    "end": "1946559"
  },
  {
    "text": "operator uh which basically tells you um you know what is allowed to go",
    "start": "1946559",
    "end": "1953320"
  },
  {
    "text": "where you know it's really easy to read so you can see that the Bastion host is",
    "start": "1953320",
    "end": "1958519"
  },
  {
    "text": "allowed on Port F 5000 to access the elk box same for Nat one and Nat two they",
    "start": "1958519",
    "end": "1964880"
  },
  {
    "text": "can all access the elk boox on Port 5000 so the F the elk boox has an Ingress",
    "start": "1964880",
    "end": "1970360"
  },
  {
    "text": "rule from those three things um that allow on Port 5000 and that's where the",
    "start": "1970360",
    "end": "1975960"
  },
  {
    "text": "log stash happens to be listening for syst log messages right and so you see with these five simple easy to write",
    "start": "1975960",
    "end": "1983279"
  },
  {
    "text": "easy to read easy to understand lines you get these seven security groups Ingress rules that",
    "start": "1983279",
    "end": "1992320"
  },
  {
    "text": "are not easy to read not easy to understand and they're just a pain and they're easy to mess up and if you have",
    "start": "1992320",
    "end": "1998320"
  },
  {
    "text": "a security organization like ours that wants to be able to inspect your SEC uh",
    "start": "1998320",
    "end": "2003720"
  },
  {
    "text": "security groups and Ingress rules and all that sort of stuff in the templates you're instantiating you can better you",
    "start": "2003720",
    "end": "2008760"
  },
  {
    "text": "better believe that when you go to them with something like in that top box they like it a lot more and it goes a lot",
    "start": "2008760",
    "end": "2014000"
  },
  {
    "text": "more quickly that review than the stuff in the bottom box so that kind of covers",
    "start": "2014000",
    "end": "2019320"
  },
  {
    "text": "uh the cloud information template generator and what our solution for creating better templates more reliable",
    "start": "2019320",
    "end": "2025039"
  },
  {
    "text": "templates um so what about interacting with the stacks the those cloud",
    "start": "2025039",
    "end": "2032039"
  },
  {
    "text": "formation resources once they're created for that we created Stacks STX and it's",
    "start": "2032039",
    "end": "2038120"
  },
  {
    "text": "GitHub URL is at the bottom it's just uh Monsanto cstacks and it's what we use to",
    "start": "2038120",
    "end": "2044120"
  },
  {
    "text": "create and manage Cloud information templates in AWS and um there's a lot of commands and",
    "start": "2044120",
    "end": "2049878"
  },
  {
    "text": "we're not going to go through all of them but the documentation the readme on that site is really good uh encourage",
    "start": "2049879",
    "end": "2057158"
  },
  {
    "text": "you all to check it out but basically it allows you to do what you would think you can create Stacks you can delete Stacks but you can also manage the RDS",
    "start": "2057159",
    "end": "2064520"
  },
  {
    "text": "instances you can spin up new ones and get rid of uh old ones inside that VPC that you create you can",
    "start": "2064520",
    "end": "2070679"
  },
  {
    "text": "also do uh you can if you're running in production and you want to turn off the Bastion it can do that for you with the",
    "start": "2070679",
    "end": "2076520"
  },
  {
    "text": "Sleep call uh it can validate templates for you as well um and and various other",
    "start": "2076520",
    "end": "2082839"
  },
  {
    "text": "things and another nice thing that we'll talk about as well is you can it will allow you to SSH into the stack once",
    "start": "2082839",
    "end": "2089320"
  },
  {
    "text": "it's created so what actually happens when you call Stacks create is it just calling cloud formation create stack no",
    "start": "2089320",
    "end": "2097118"
  },
  {
    "text": "CU that wouldn't help you very much right cuz if you uh and if you've ever used cloud formation you know that",
    "start": "2097119",
    "end": "2103200"
  },
  {
    "text": "there's no facility for cloud formation to create uh ec2 SSH keys and if you",
    "start": "2103200",
    "end": "2109320"
  },
  {
    "text": "think about it it makes sense because Amazon does not store them for you the only time you can retrieve them is when",
    "start": "2109320",
    "end": "2115359"
  },
  {
    "text": "you create them because they don't keep them and so if you created one inside a",
    "start": "2115359",
    "end": "2121040"
  },
  {
    "text": "cloud formation template there' be no way to actually get the private key so it would be completely worthless to you",
    "start": "2121040",
    "end": "2126640"
  },
  {
    "text": "soep Stacks in in addition to creating random names for things uh for the",
    "start": "2126640",
    "end": "2132359"
  },
  {
    "text": "templates that it's or for the stacks that it's creating it validates the parameter file it validates the uh the",
    "start": "2132359",
    "end": "2138480"
  },
  {
    "text": "template file um but it also generates a a custom key pair SSH key pair for that",
    "start": "2138480",
    "end": "2145440"
  },
  {
    "text": "stack so that and then saves the private key so you can access that stack later it also creates an S3 bucket for the",
    "start": "2145440",
    "end": "2152040"
  },
  {
    "text": "stack so that any assets that the resources in that stack in that template",
    "start": "2152040",
    "end": "2158400"
  },
  {
    "text": "need can be uploaded to them for them to download once they're created for example our natat boxes monitor each",
    "start": "2158400",
    "end": "2164800"
  },
  {
    "text": "other to see if they're alive and if they sense that one is dead um they take",
    "start": "2164800",
    "end": "2170319"
  },
  {
    "text": "over its route you know they update the route table and then uh restart the other one so when it comes up it can",
    "start": "2170319",
    "end": "2176400"
  },
  {
    "text": "take back over its route so that we don't get a lot of bloat in our user data for our ec2 instances we can just",
    "start": "2176400",
    "end": "2182599"
  },
  {
    "text": "put that script up in that S3 bucket and they can download it from there with the appropriate uh am on uh am uh am rooll",
    "start": "2182599",
    "end": "2190720"
  },
  {
    "text": "for ec2 instances with that so once all that's done then it actually creates the stack and that template that we saw",
    "start": "2190720",
    "end": "2197200"
  },
  {
    "text": "earlier it takes about 10 minutes to create uh once it's created you can just",
    "start": "2197200",
    "end": "2202640"
  },
  {
    "text": "call Stacks connect and it automatically queries AWS for all the IP addresses and everything that it needs it already has",
    "start": "2202640",
    "end": "2209680"
  },
  {
    "text": "that private key and it creates spits out it it it saves off an SSH configuration that also automatically",
    "start": "2209680",
    "end": "2216319"
  },
  {
    "text": "allows you to jump through the Bastion host to get at the other host in the stack and it does that in a secure Way",
    "start": "2216319",
    "end": "2223599"
  },
  {
    "text": "by forwarding your SSH agent so you never have to put your private key into AWS at all it's always just on your",
    "start": "2223599",
    "end": "2230040"
  },
  {
    "text": "local machine and you can uh get to any instance inside that to poke around which is really helpful when you're",
    "start": "2230040",
    "end": "2235560"
  },
  {
    "text": "debugging and developing things um but um there it's not we really like Stacks",
    "start": "2235560",
    "end": "2242599"
  },
  {
    "text": "uh but it's not as safe as it could be cuz while you",
    "start": "2242599",
    "end": "2248839"
  },
  {
    "text": "know in the letter of the law it adheres to the principle of least privilege that",
    "start": "2248839",
    "end": "2254040"
  },
  {
    "text": "is no one in the organization should have permissions to do things uh other",
    "start": "2254040",
    "end": "2259119"
  },
  {
    "text": "than what is required for their job and since we want developers to be able to instantiate uh infrastructure we want",
    "start": "2259119",
    "end": "2265760"
  },
  {
    "text": "them to have those permissions uh it kind of violates the spirit of it because to stand up a stack like the",
    "start": "2265760",
    "end": "2271640"
  },
  {
    "text": "ones that we've talked about in this talk basically requires root access to",
    "start": "2271640",
    "end": "2277520"
  },
  {
    "text": "your AWS account you know cuz it it's spinning up all different kinds of resources it's creating I am roles and",
    "start": "2277520",
    "end": "2283160"
  },
  {
    "text": "and users and all that sort of stuff and so while it strictly adheres to the principle of lease privilege in spirit",
    "start": "2283160",
    "end": "2290079"
  },
  {
    "text": "it basically forces you to give all of your developers the keys to the kingdom in AWS and so we thought about you know",
    "start": "2290079",
    "end": "2297200"
  },
  {
    "text": "how can we uh improve upon that how can we still give developers what they need",
    "start": "2297200",
    "end": "2302359"
  },
  {
    "text": "without you know being completely insecure and so you know we went for",
    "start": "2302359",
    "end": "2308160"
  },
  {
    "text": "higher order automation right so there's this is the theme right so aw uh Amazon",
    "start": "2308160",
    "end": "2314800"
  },
  {
    "text": "has automated infrastructure with AWS they automated AWS with cloud formation",
    "start": "2314800",
    "end": "2320680"
  },
  {
    "text": "we automated cloud formation with stacks and now we are automating Stacks with Stacks as a service okay so now the",
    "start": "2320680",
    "end": "2327839"
  },
  {
    "text": "stacks as a service needs to have permission to create that template but developers just need to be able to",
    "start": "2327839",
    "end": "2333400"
  },
  {
    "text": "authenticate themselves as a developer in Monsanto and then call Stacks as a service and here we have a a web UI for",
    "start": "2333400",
    "end": "2341319"
  },
  {
    "text": "Stacks as a service that we've created but um they're all it's all API driven and we've actually ported Stacks to use",
    "start": "2341319",
    "end": "2348680"
  },
  {
    "text": "the API on the back end now so that um that uh that CLI Avenue is still",
    "start": "2348680",
    "end": "2354640"
  },
  {
    "text": "available to you should you want it um and so here's the screenshot for sort of the create page you select a",
    "start": "2354640",
    "end": "2361640"
  },
  {
    "text": "template and then you give information for your tags and your input parameters for your template um and you might be",
    "start": "2361640",
    "end": "2368760"
  },
  {
    "text": "looking at this and saying let's see uh you're managing cloud formation templates and sort of allowing people to",
    "start": "2368760",
    "end": "2375160"
  },
  {
    "text": "stand them up uh with someone else's credentials that sounds a lot like the AWS service catalog and you're right it",
    "start": "2375160",
    "end": "2382520"
  },
  {
    "text": "does sound a lot like that except ours came first it has a better UI and an",
    "start": "2382520",
    "end": "2388599"
  },
  {
    "text": "API so you can also do things like list so you can list all the currently",
    "start": "2390560",
    "end": "2395960"
  },
  {
    "text": "running stacks um that that are in your account you can click on one of those",
    "start": "2395960",
    "end": "2401359"
  },
  {
    "text": "drill down and get information about tags and the outputs all that sort of stuff and what's more because we have",
    "start": "2401359",
    "end": "2407079"
  },
  {
    "text": "more intimate knowledge of what's going on and what we're doing inside of that stack we can drill down even further and",
    "start": "2407079",
    "end": "2413880"
  },
  {
    "text": "say you know we expect SCD to be running on every host we can interrogate and make sure that it is uh you know and all",
    "start": "2413880",
    "end": "2420800"
  },
  {
    "text": "the other uh services that we know should be running in a stack we um we",
    "start": "2420800",
    "end": "2426200"
  },
  {
    "text": "can uh provide you information on that as well so uh we have about 15 minutes left",
    "start": "2426200",
    "end": "2432839"
  },
  {
    "text": "we're about 40 minutes into the talk um so it's probably a good time to take stock of where we are and what we're",
    "start": "2432839",
    "end": "2439160"
  },
  {
    "text": "doing right we're throwing a lot of information at you I hope it's helpful to you so far uh but remember we have a",
    "start": "2439160",
    "end": "2445960"
  },
  {
    "text": "very uh diverse and distributed it organization and we want all of them to",
    "start": "2445960",
    "end": "2451040"
  },
  {
    "text": "be able to move at their own speed and so we really want to automate as much as we can and we want to give them as as",
    "start": "2451040",
    "end": "2457440"
  },
  {
    "text": "much Independence as they can that's why we are so aggressive around automating the infrastructure and it's also one of",
    "start": "2457440",
    "end": "2464640"
  },
  {
    "text": "the driving motivations for why people choose microservices you want each of those microservices to be able to evolve",
    "start": "2464640",
    "end": "2471800"
  },
  {
    "text": "at its own pace um and so Ryan is going to talk to us a bit more about our",
    "start": "2471800",
    "end": "2477319"
  },
  {
    "text": "approach to microservices all right yes so now that all the uh infrastructure stuff is",
    "start": "2477319",
    "end": "2482400"
  },
  {
    "text": "automated what can we do at the application Level um because that's what I really care about so",
    "start": "2482400",
    "end": "2487839"
  },
  {
    "start": "2486000",
    "end": "2486000"
  },
  {
    "text": "the in case you're not familiar with microservices um the meme at monsano at least is cupcakes not wedding cakes",
    "start": "2487839",
    "end": "2493760"
  },
  {
    "text": "where wedding cake is like your traditional multi-tier application that has lots of functionality and it all shares the same database right and",
    "start": "2493760",
    "end": "2500880"
  },
  {
    "text": "microservices uh are meant to deliver on the broken promises of things like SOA",
    "start": "2500880",
    "end": "2506040"
  },
  {
    "text": "or even like small talk style objects um in that we can build uh systems that are",
    "start": "2506040",
    "end": "2512160"
  },
  {
    "text": "that are truly independent because we impose this extra constraint and that constraint is that they all have their own database and no one is allowed to",
    "start": "2512160",
    "end": "2519040"
  },
  {
    "text": "talk to anyone else's database um you have to go through the API um so so",
    "start": "2519040",
    "end": "2525000"
  },
  {
    "text": "we're asking developers to build to build microservices the problem is we used to say oh you know for every",
    "start": "2525000",
    "end": "2530720"
  },
  {
    "text": "project you make your one wedding cake and now we're like ah like make 200 uh separate microservices um that's a lot",
    "start": "2530720",
    "end": "2537160"
  },
  {
    "text": "of overhead like we've just blown up the overhead of making new projects right even for a small project we have like 10",
    "start": "2537160",
    "end": "2543240"
  },
  {
    "text": "microservices in that project so so clearly we need some automation um and",
    "start": "2543240",
    "end": "2549200"
  },
  {
    "start": "2547000",
    "end": "2547000"
  },
  {
    "text": "just to uh to sort of motivate what you know why we're doing this all in Scala again because this is going to be about Scala microservices there's really two",
    "start": "2549200",
    "end": "2556640"
  },
  {
    "text": "two reasons the first is that we have these Advanced abstractions so if you were to make a list of all the modern",
    "start": "2556640",
    "end": "2563800"
  },
  {
    "text": "stuff that's been invented in programming languages in the last 20 years things like algebraic data types",
    "start": "2563800",
    "end": "2568880"
  },
  {
    "text": "enforced immutability destructuring pattern matching um and then you know type classes and high performance",
    "start": "2568880",
    "end": "2575280"
  },
  {
    "text": "asynchronicity there's not very many Lang languages that can check all of those boxes it's basically Scala and hasal is what we came up with and since",
    "start": "2575280",
    "end": "2582000"
  },
  {
    "text": "we are historically a jvm shop and there are more Scala developers that tilted us um in that direction but really um what",
    "start": "2582000",
    "end": "2590359"
  },
  {
    "text": "drives us to Scala is these Advanced type constraints so the features that David dueling showed you about Cloud",
    "start": "2590359",
    "end": "2596000"
  },
  {
    "text": "information template generator you don't you don't have to know about any of this or see um but the way that it works is",
    "start": "2596000",
    "end": "2602559"
  },
  {
    "text": "with things like f bounded polymorphism uh and these sort of advanced generics and type projections and things that we",
    "start": "2602559",
    "end": "2608440"
  },
  {
    "text": "have in Scala um things that Java will never have right Java eight has lambdas Ray um but it doesn't have it doesn't",
    "start": "2608440",
    "end": "2615359"
  },
  {
    "text": "have these sorts of features and we use those extensively um in cloud formation template gener for instance in all of our libraries it's it's worth noting I",
    "start": "2615359",
    "end": "2621960"
  },
  {
    "text": "guess that when you try to new up something that doesn't uh have that referential transparency we don't give you an error that it's not true it",
    "start": "2621960",
    "end": "2628440"
  },
  {
    "text": "doesn't even compile we canfor that compile time you can't even write to a cloud information uh template that's",
    "start": "2628440",
    "end": "2636040"
  },
  {
    "text": "incorrect so anyway on the application side uh we want to provide uh some automation to make it easy for people to",
    "start": "2636040",
    "end": "2642200"
  },
  {
    "text": "make lots of microservices very rapidly um so we have another service called project as a service which generates new",
    "start": "2642200",
    "end": "2648640"
  },
  {
    "text": "projects for you and its uh schematic outline looks kind of like this so you",
    "start": "2648640",
    "end": "2654160"
  },
  {
    "text": "hit the service we create a new private GitHub repository for you we check out a template and templae it with some values",
    "start": "2654160",
    "end": "2660640"
  },
  {
    "text": "we check it back in as your first check-in we set up a series of Jenkins jobs that do continuous uh integration",
    "start": "2660640",
    "end": "2667520"
  },
  {
    "text": "and continuous deployment package those up in Docker containers push them to our private registry um we Auto blue green",
    "start": "2667520",
    "end": "2674520"
  },
  {
    "text": "deploy that into production then when your service gets deployed we provide it with things like Dynamic service",
    "start": "2674520",
    "end": "2681079"
  },
  {
    "text": "Discovery sort of inspired by nerve and synaps from Airbnb um where you can just connect a local host for any other",
    "start": "2681079",
    "end": "2686400"
  },
  {
    "text": "service and you get it um and also with automated logging and metrics again with elen",
    "start": "2686400",
    "end": "2692680"
  },
  {
    "text": "Prometheus um and of course there's a web app that you can literally use on on your phone which is a form and it has a",
    "start": "2692680",
    "end": "2698720"
  },
  {
    "text": "big red create button with gratuitous like ponies and corn you know success",
    "start": "2698720",
    "end": "2704920"
  },
  {
    "text": "animations because why not um so we we don't want to manage source code",
    "start": "2704920",
    "end": "2710880"
  },
  {
    "start": "2706000",
    "end": "2706000"
  },
  {
    "text": "repositories so we actually use github.com um hosted private repos and",
    "start": "2710880",
    "end": "2716359"
  },
  {
    "text": "really uh we don't just want to have a source code repository we need some semblance of project management and we",
    "start": "2716359",
    "end": "2721559"
  },
  {
    "text": "actually really like GitHub issues um so when when we create your repository you",
    "start": "2721559",
    "end": "2726720"
  },
  {
    "text": "also get a Wiki and you get GitHub issues which we use extensively now um in place of other solutions that have",
    "start": "2726720",
    "end": "2732480"
  },
  {
    "start": "2731000",
    "end": "2731000"
  },
  {
    "text": "too many features um really the work though of project as a service went into uh what",
    "start": "2732480",
    "end": "2738559"
  },
  {
    "text": "we call the simple service template which is it's about as simple as like spt is the simple Scala tool build tool",
    "start": "2738559",
    "end": "2745000"
  },
  {
    "text": "which is to say it's not it's not simple at all unfortunately but it really provides uh the suite of best practices for our",
    "start": "2745000",
    "end": "2752000"
  },
  {
    "text": "developers so in that template we do things like uh we stand up an AA actor system so it's it's obviously completely",
    "start": "2752000",
    "end": "2758880"
  },
  {
    "text": "async and non-blocking we use a spray which is an application container free",
    "start": "2758880",
    "end": "2763960"
  },
  {
    "text": "runtime for creating restful Services we show you how to set that up and and provide some some basic end points we",
    "start": "2763960",
    "end": "2770760"
  },
  {
    "text": "also have integration with Scala test and the AA and spray test kits to show you how to test you know with and",
    "start": "2770760",
    "end": "2776200"
  },
  {
    "text": "without web server with and without a database um we instrument that template",
    "start": "2776200",
    "end": "2782040"
  },
  {
    "text": "uh with these administrative rest endpoints that we'll talk about in a second and we also inject uh these",
    "start": "2782040",
    "end": "2787760"
  },
  {
    "text": "logging and Metric capabilities um into that service so you can just use them the template also provides uh the the",
    "start": "2787760",
    "end": "2794720"
  },
  {
    "text": "logic to do our automatic dockerization and since we're supporting postgress we also uh spit out a vagrant",
    "start": "2794720",
    "end": "2801839"
  },
  {
    "text": "file that has a postgress Docker container running in it so that you can have a local development",
    "start": "2801839",
    "end": "2808720"
  },
  {
    "start": "2808000",
    "end": "2808000"
  },
  {
    "text": "environment um So then whenever you do a check-in we test and build in Jenkin so we programmatically obviously set all",
    "start": "2808720",
    "end": "2815119"
  },
  {
    "text": "those jobs up um and and then we have a standard endpoint uh to create minimal",
    "start": "2815119",
    "end": "2821040"
  },
  {
    "text": "Docker containers so we have a a minimal Debian jvm open jdk I think um Docker",
    "start": "2821040",
    "end": "2827440"
  },
  {
    "text": "container that those projects get injected into and what's really interesting is we don't stop there right we don't just",
    "start": "2827440",
    "end": "2833359"
  },
  {
    "start": "2829000",
    "end": "2829000"
  },
  {
    "text": "like push your container to our repository because we know when you created your microservice which stack",
    "start": "2833359",
    "end": "2839160"
  },
  {
    "text": "that it belongs to and we have all that information in Stacks um so we actually do blue green deployments uh into stacks",
    "start": "2839160",
    "end": "2845240"
  },
  {
    "text": "for you and the first time that you create a service we automatically register it",
    "start": "2845240",
    "end": "2851559"
  },
  {
    "text": "with our API Gateway which is aana right now uh so which provides a catalog of",
    "start": "2851559",
    "end": "2857000"
  },
  {
    "text": "services for all of our developers and it also handles things like ooth and cores and so we set all of that up",
    "start": "2857000",
    "end": "2862480"
  },
  {
    "text": "automatically upon project creation as well um and I want to just briefly run",
    "start": "2862480",
    "end": "2869079"
  },
  {
    "text": "through how we do our Blu green deployments um this pattern might look familiar but it took us a long time to",
    "start": "2869079",
    "end": "2875079"
  },
  {
    "text": "get it right we we started with lots of solutions that were terrible and didn't work at all um so and several of these components are also available on our",
    "start": "2875079",
    "end": "2881599"
  },
  {
    "text": "open source um repository on GitHub and if there's anything that's not open source that you want let us know",
    "start": "2881599",
    "end": "2889240"
  },
  {
    "text": "so this setup in the square with the router Fleet at CD and these two Docker",
    "start": "2889240",
    "end": "2894520"
  },
  {
    "text": "containers registrator and Route updator this exists on every host in that Services autoscaling Group um that",
    "start": "2894520",
    "end": "2900480"
  },
  {
    "text": "dueling was talking about earlier so as you would expect um you make a commit to GitHub",
    "start": "2900480",
    "end": "2907400"
  },
  {
    "text": "that notifies you know over the hook to Jenkins which is going to build your code and assuming it passes it's going to create that Docker container and push",
    "start": "2907400",
    "end": "2913920"
  },
  {
    "text": "it to our private Docker registry which I'm really excited that we don't have to run a box to do that anymore",
    "start": "2913920",
    "end": "2920280"
  },
  {
    "text": "um but what's interesting is then we look in ETD to say does this service exist at all yet um and we use kind of",
    "start": "2920280",
    "end": "2926559"
  },
  {
    "text": "the auto incrementing uh build numbers from Jenkins as a source of uh revisions",
    "start": "2926559",
    "end": "2932000"
  },
  {
    "text": "like versions so they're always increasing um so it doesn't exist so",
    "start": "2932000",
    "end": "2937599"
  },
  {
    "text": "we're going to put a key a pointer from service one to revision one into etcd and we're going to ask we use Fleet",
    "start": "2937599",
    "end": "2944760"
  },
  {
    "text": "to schedule our services so fleet's then going to deploy that container on some random host in the Autos skin group on",
    "start": "2944760",
    "end": "2950440"
  },
  {
    "text": "some random port and the the port is obviously the complicated part we use an",
    "start": "2950440",
    "end": "2955640"
  },
  {
    "text": "open source tool called registrator which it basically spies on Docker events um and so it's going to notice",
    "start": "2955640",
    "end": "2961640"
  },
  {
    "text": "that this Docker container uh was deployed somewhere and it automatically updates ETD to say this list of hosts um",
    "start": "2961640",
    "end": "2968520"
  },
  {
    "text": "for service version one revision one it exists at this host and this",
    "start": "2968520",
    "end": "2973680"
  },
  {
    "text": "port so now if you were to make a request from the outside world or from the inside world it would go to to this",
    "start": "2973680",
    "end": "2979160"
  },
  {
    "text": "router which originally we had this engine X thing um but it turned out we wanted tighter integration with that CD",
    "start": "2979160",
    "end": "2985000"
  },
  {
    "text": "and with um caching and things like that so this is another Scala spray application fully async blah blah and",
    "start": "2985000",
    "end": "2991760"
  },
  {
    "text": "it's available open source um it will redirect you to the container that you would expect by looking it",
    "start": "2991760",
    "end": "2998480"
  },
  {
    "text": "up interest but the interesting part right is if you push another revision things go well it gets pushed to the",
    "start": "2998480",
    "end": "3004240"
  },
  {
    "text": "registry but it notices a service one already exists so it's not going to touch that it's not going to touch that",
    "start": "3004240",
    "end": "3009520"
  },
  {
    "text": "pointer um we're going to ask Fleet to schedule it fleet's going to schedule it somewhere registrator is going to notice",
    "start": "3009520",
    "end": "3015119"
  },
  {
    "text": "and it's going to say hey service one R Vision Two is running on this list of hosts at these",
    "start": "3015119",
    "end": "3021839"
  },
  {
    "text": "ports and if you were to make a request right now you still get the original version unless you pass magical header",
    "start": "3021839",
    "end": "3027559"
  },
  {
    "text": "for testing purposes you can get you can get the othered version okay but the cool part is that we have this uh",
    "start": "3027559",
    "end": "3033240"
  },
  {
    "text": "container we wrote called route updator and what it does it periodically looks through the keys that are in ETD to see",
    "start": "3033240",
    "end": "3039319"
  },
  {
    "text": "if there's a newer revision deployed um of anything that's already been running so here revision two is actually newer",
    "start": "3039319",
    "end": "3045240"
  },
  {
    "text": "than one so it will first call this administrative endpoint smoke test to",
    "start": "3045240",
    "end": "3050319"
  },
  {
    "text": "make sure that your system is up um you might want to check like oh do I is my database up or whatever",
    "start": "3050319",
    "end": "3057200"
  },
  {
    "text": "um is my actor system up is kind of the default and if so it'll update that pointer and so now new traffic is going",
    "start": "3057200",
    "end": "3064040"
  },
  {
    "text": "to go to the new container but inflight transactions to the old container are going to continue to be processed until",
    "start": "3064040",
    "end": "3070319"
  },
  {
    "text": "route updator asks it to shut down and then it's given time to sort of gracefully finish processing all of",
    "start": "3070319",
    "end": "3075359"
  },
  {
    "text": "those transactions um at which point the actor system will be shut down which means the container will be shut down",
    "start": "3075359",
    "end": "3081599"
  },
  {
    "text": "um and registrator will eventually notice that and garbage collect uh service one or vision one out of at CD",
    "start": "3081599",
    "end": "3088440"
  },
  {
    "text": "so it's it's kind of simple uh but we try to make separate components and we used a lot of a lot of other different strategies that that didn't work very",
    "start": "3088440",
    "end": "3094440"
  },
  {
    "text": "well um but we really like this one so lastly the operational aspects of",
    "start": "3094440",
    "end": "3100240"
  },
  {
    "text": "the microservices we have both logging and metrics so obviously we have logs of",
    "start": "3100240",
    "end": "3106400"
  },
  {
    "text": "all the things right service container coros fashionb and we use standard open source tools to do that uh what's more",
    "start": "3106400",
    "end": "3112960"
  },
  {
    "text": "interesting is that we're using standard Scola logging we're writing to Elk but",
    "start": "3112960",
    "end": "3119359"
  },
  {
    "text": "um originally you know the recommendation is dump all of your logs to standard out and use the docker mechanisms to collect them well that",
    "start": "3119359",
    "end": "3124720"
  },
  {
    "text": "doesn't work very well for jvm applications right think of the One log I really want is the stack Trace I need",
    "start": "3124720",
    "end": "3131799"
  },
  {
    "text": "the stack traces when things explode and it's a multi-line thing right so you know why should I dump that to standard",
    "start": "3131799",
    "end": "3138240"
  },
  {
    "text": "out and try to glue it back together we actually log everything as structured Json blobs because we have the luxury of",
    "start": "3138240",
    "end": "3143640"
  },
  {
    "text": "doing that at the application Level um and we we we were using log spout and we actually wrote a system instead to write",
    "start": "3143640",
    "end": "3149960"
  },
  {
    "text": "directly to Elk and that seemed to be more reliable and lastly because we're doing this automatically we can inject",
    "start": "3149960",
    "end": "3155480"
  },
  {
    "text": "things like the container ID and get Hub check-in um into every log message as a",
    "start": "3155480",
    "end": "3160880"
  },
  {
    "text": "as a metadata field in those structured Json blobs and then lastly we want metrics so",
    "start": "3160880",
    "end": "3166640"
  },
  {
    "start": "3163000",
    "end": "3163000"
  },
  {
    "text": "we're using kaymon and Prometheus Prometheus is really cool unfortunately it's not supported by Kayon so we had to",
    "start": "3166640",
    "end": "3172200"
  },
  {
    "text": "write an exporter that preserves those sort of deep um structures of Kayon and",
    "start": "3172200",
    "end": "3177799"
  },
  {
    "text": "gives them to Prometheus and you can have that's open source at spray Kayon metrics and we also have improved tracing then lastly Prometheus is cool",
    "start": "3177799",
    "end": "3185319"
  },
  {
    "text": "but it's not made to be automated of course so we forked all of their containers to make new containers that",
    "start": "3185319",
    "end": "3190480"
  },
  {
    "text": "automatically write the configuration files by clearing at CD you can't make dashboards programmatically so we inject",
    "start": "3190480",
    "end": "3196599"
  },
  {
    "text": "SQL statements into prometheus's database to set you up with uh default",
    "start": "3196599",
    "end": "3201640"
  },
  {
    "text": "dashboards as soon as it creates itself we've cloud formation template generator code to do all this on ec2 EBS RDS and",
    "start": "3201640",
    "end": "3209559"
  },
  {
    "text": "then Prometheus didn't support simple modification service so we contributed a patch um to do that from Prometheus as",
    "start": "3209559",
    "end": "3216280"
  },
  {
    "text": "well so a little time remaining so yeah we'll just uh go quickly through where",
    "start": "3216280",
    "end": "3221400"
  },
  {
    "text": "we see this uh platform going um thanks for sticking with us this long um I",
    "start": "3221400",
    "end": "3227200"
  },
  {
    "start": "3224000",
    "end": "3224000"
  },
  {
    "text": "mentioned before I sort of get into the details of this I just want to say one of the other principles that we have",
    "start": "3227200",
    "end": "3233280"
  },
  {
    "text": "about the code we write is that everything is disposable you know we want to maintain as little code as",
    "start": "3233280",
    "end": "3239240"
  },
  {
    "text": "possible you know that's why we want to consume native AWS Services that's why we're aggressive about using op Source",
    "start": "3239240",
    "end": "3244839"
  },
  {
    "text": "software that's why we're aggressive about open sourcing our software you know we get PRS from other people for",
    "start": "3244839",
    "end": "3250400"
  },
  {
    "text": "our cloud formation template generator and that's great and so when we see something like AWS service catalog when",
    "start": "3250400",
    "end": "3256200"
  },
  {
    "text": "it has an API you better believe we're going to jump on it um you know you may have been wondering why are they doing",
    "start": "3256200",
    "end": "3262200"
  },
  {
    "text": "coros and Docker why aren't they using the ec2 container service it really was n uh around when we started uh but we",
    "start": "3262200",
    "end": "3268960"
  },
  {
    "text": "are going to do that aggressively in the future we'd love to have some new features from AWS around I am so that",
    "start": "3268960",
    "end": "3274920"
  },
  {
    "text": "containers can have roles and that we can restrict RDS roles to vpcs we're going to look at the API Gateway we'd",
    "start": "3274920",
    "end": "3281400"
  },
  {
    "text": "like to get rid of our KN boxes and use the VPC flow logs natively uh when they have cloud formation support and we also",
    "start": "3281400",
    "end": "3288079"
  },
  {
    "text": "want to invert our control for deployment so that instead of a central Jenkins having all the logic the vpcs",
    "start": "3288079",
    "end": "3294280"
  },
  {
    "text": "themselves know what should be deployed there and they can query uh the docker registry uh and then we'd like a little",
    "start": "3294280",
    "end": "3299960"
  },
  {
    "text": "more predictability around cloud formation template generator so please do take away higher order automation",
    "start": "3299960",
    "end": "3306119"
  },
  {
    "start": "3303000",
    "end": "3303000"
  },
  {
    "text": "robots killing uh not killing robots robots making robots either way chaos",
    "start": "3306119",
    "end": "3312319"
  },
  {
    "text": "monkey um and uh you know because we really feel like putting hands in the tools of developers lets them spend more",
    "start": "3312319",
    "end": "3319280"
  },
  {
    "text": "time servicing their customers and innovating than worrying about stuff that's non-differentiating these are the",
    "start": "3319280",
    "end": "3324720"
  },
  {
    "text": "folks that did all the work uh we have a great team we've come a long way in a year thank you all for sticking with us",
    "start": "3324720",
    "end": "3330680"
  },
  {
    "text": "we know it's a lot of information you can find more engine uh find more information at",
    "start": "3330680",
    "end": "3336359"
  },
  {
    "text": "engineering. mono.com",
    "start": "3336359",
    "end": "3340279"
  },
  {
    "text": "remember your evaluations check out uh our colleagues iot Presentation tomorrow morning uh",
    "start": "3342319",
    "end": "3349240"
  },
  {
    "text": "10:15 in Delino 405 uh good stuff building on what was uh there today and if you want a job",
    "start": "3349240",
    "end": "3357319"
  },
  {
    "text": "writing Scala even if it's remotely and you don't want to move to St Louis contact us um and download our open",
    "start": "3357319",
    "end": "3363000"
  },
  {
    "text": "source stuff so thank you thanks",
    "start": "3363000",
    "end": "3368960"
  }
]