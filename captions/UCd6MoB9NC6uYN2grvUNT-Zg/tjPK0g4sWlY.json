[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "[Music]",
    "start": "650",
    "end": "1010"
  },
  {
    "text": "[Applause]",
    "start": "1010",
    "end": "4088"
  },
  {
    "text": "[Music]",
    "start": "4960",
    "end": "11300"
  },
  {
    "text": "hello I'm Islam a cloud support engineer",
    "start": "11300",
    "end": "14820"
  },
  {
    "text": "here at the AWS office in Dublin today",
    "start": "14820",
    "end": "17820"
  },
  {
    "text": "I'm going to show you how to use",
    "start": "17820",
    "end": "19980"
  },
  {
    "text": "amazon89 to analyze your application",
    "start": "19980",
    "end": "22920"
  },
  {
    "text": "load balancer access logs stored in",
    "start": "22920",
    "end": "25680"
  },
  {
    "text": "Amazon simple storage service let's get",
    "start": "25680",
    "end": "28380"
  },
  {
    "text": "started because our application load",
    "start": "28380",
    "end": "31679"
  },
  {
    "start": "31000",
    "end": "66000"
  },
  {
    "text": "balancer logs are partitioned we are",
    "start": "31679",
    "end": "34500"
  },
  {
    "text": "going to create a table that uses",
    "start": "34500",
    "end": "36420"
  },
  {
    "text": "partitions and this demo we'll cover two",
    "start": "36420",
    "end": "39719"
  },
  {
    "text": "options that can be used to create a",
    "start": "39719",
    "end": "41820"
  },
  {
    "text": "partitioned Athena table the first",
    "start": "41820",
    "end": "44280"
  },
  {
    "text": "option is to create a table with",
    "start": "44280",
    "end": "46260"
  },
  {
    "text": "partitions and do the partitions",
    "start": "46260",
    "end": "48600"
  },
  {
    "text": "manually using the alter table add",
    "start": "48600",
    "end": "51120"
  },
  {
    "text": "partition",
    "start": "51120",
    "end": "52379"
  },
  {
    "text": "the second option is to use partition",
    "start": "52379",
    "end": "55140"
  },
  {
    "text": "projection and partition projections",
    "start": "55140",
    "end": "57840"
  },
  {
    "text": "value and locations are calculated from",
    "start": "57840",
    "end": "60480"
  },
  {
    "text": "configuration rather than read from a",
    "start": "60480",
    "end": "62940"
  },
  {
    "text": "repository like the ews blue data",
    "start": "62940",
    "end": "65460"
  },
  {
    "text": "catalog",
    "start": "65460",
    "end": "67200"
  },
  {
    "start": "66000",
    "end": "160000"
  },
  {
    "text": "after logging into the AWS Management",
    "start": "67200",
    "end": "69299"
  },
  {
    "text": "console navigate to the Athena console",
    "start": "69299",
    "end": "72479"
  },
  {
    "text": "in the query editor enter the query to",
    "start": "72479",
    "end": "75900"
  },
  {
    "text": "create the database albgb after the",
    "start": "75900",
    "end": "79260"
  },
  {
    "text": "database is created let's create our",
    "start": "79260",
    "end": "81840"
  },
  {
    "text": "table if you want to create an",
    "start": "81840",
    "end": "84119"
  },
  {
    "text": "application load balancer table that",
    "start": "84119",
    "end": "86220"
  },
  {
    "text": "uses partitions we must Define this",
    "start": "86220",
    "end": "89220"
  },
  {
    "text": "during the preview table statement let's",
    "start": "89220",
    "end": "91979"
  },
  {
    "text": "paste this create table statement in the",
    "start": "91979",
    "end": "94680"
  },
  {
    "text": "query editor you can find this in the",
    "start": "94680",
    "end": "97439"
  },
  {
    "text": "knowledge Central article",
    "start": "97439",
    "end": "100579"
  },
  {
    "text": "as you can see our data is partitioned",
    "start": "100680",
    "end": "104159"
  },
  {
    "text": "on year month and day input regex is",
    "start": "104159",
    "end": "108540"
  },
  {
    "text": "used to define the regular expression to",
    "start": "108540",
    "end": "110939"
  },
  {
    "text": "the serialize the data",
    "start": "110939",
    "end": "112920"
  },
  {
    "text": "and here we are specifying the location",
    "start": "112920",
    "end": "115619"
  },
  {
    "text": "of our logs let's run the query",
    "start": "115619",
    "end": "119399"
  },
  {
    "text": "our table is now created let's view our",
    "start": "119399",
    "end": "122820"
  },
  {
    "text": "data using select query",
    "start": "122820",
    "end": "125759"
  },
  {
    "text": "as you can see the table was created but",
    "start": "125759",
    "end": "129239"
  },
  {
    "text": "still with Zero Records this is because",
    "start": "129239",
    "end": "132300"
  },
  {
    "text": "the partitions are not yet loaded",
    "start": "132300",
    "end": "135420"
  },
  {
    "text": "let's add our partition and check again",
    "start": "135420",
    "end": "138840"
  },
  {
    "text": "for non-hype style partitions we use",
    "start": "138840",
    "end": "141959"
  },
  {
    "text": "outer table art partition to ID",
    "start": "141959",
    "end": "144660"
  },
  {
    "text": "partitions manually our partition rules",
    "start": "144660",
    "end": "147780"
  },
  {
    "text": "added successfully",
    "start": "147780",
    "end": "149580"
  },
  {
    "text": "to check this we can list the partitions",
    "start": "149580",
    "end": "152459"
  },
  {
    "text": "of the table",
    "start": "152459",
    "end": "153959"
  },
  {
    "text": "as you can see the partition was added",
    "start": "153959",
    "end": "156780"
  },
  {
    "text": "and is now ready to be analyzed let's",
    "start": "156780",
    "end": "159780"
  },
  {
    "text": "run an example of query in this query we",
    "start": "159780",
    "end": "163019"
  },
  {
    "start": "160000",
    "end": "234000"
  },
  {
    "text": "are going to list clients in descending",
    "start": "163019",
    "end": "165540"
  },
  {
    "text": "order by the number of times that each",
    "start": "165540",
    "end": "167940"
  },
  {
    "text": "client visited a specified URL",
    "start": "167940",
    "end": "172400"
  },
  {
    "text": "let's open a new query editor Tab and",
    "start": "172920",
    "end": "176160"
  },
  {
    "text": "create the table using partition",
    "start": "176160",
    "end": "177959"
  },
  {
    "text": "projection now",
    "start": "177959",
    "end": "179640"
  },
  {
    "text": "similar to the previous example we have",
    "start": "179640",
    "end": "181920"
  },
  {
    "text": "three partitions integral properties we",
    "start": "181920",
    "end": "184680"
  },
  {
    "text": "Define the type of the partition for",
    "start": "184680",
    "end": "186959"
  },
  {
    "text": "example year of type integer and the",
    "start": "186959",
    "end": "189840"
  },
  {
    "text": "range is from 2021 to 2022 in location",
    "start": "189840",
    "end": "193620"
  },
  {
    "text": "template we Define the pattern of our",
    "start": "193620",
    "end": "196379"
  },
  {
    "text": "data let's run the query",
    "start": "196379",
    "end": "199140"
  },
  {
    "text": "because partition values and locations",
    "start": "199140",
    "end": "202260"
  },
  {
    "text": "are calculated from configuration we",
    "start": "202260",
    "end": "204780"
  },
  {
    "text": "don't need to load partitions every time",
    "start": "204780",
    "end": "207239"
  },
  {
    "text": "let's confirm this and run this query",
    "start": "207239",
    "end": "212239"
  },
  {
    "text": "as you can see our data is ready to be",
    "start": "212340",
    "end": "215459"
  },
  {
    "text": "queried to analyze our elb log we can",
    "start": "215459",
    "end": "219000"
  },
  {
    "text": "run queries on the created Athena table",
    "start": "219000",
    "end": "221159"
  },
  {
    "text": "for example let's find the 10 URLs that",
    "start": "221159",
    "end": "224640"
  },
  {
    "text": "Chrome users accessed most frequently on",
    "start": "224640",
    "end": "227340"
  },
  {
    "text": "20th July 2022.",
    "start": "227340",
    "end": "231180"
  },
  {
    "text": "so now you know how to use Amazon",
    "start": "233640",
    "end": "235739"
  },
  {
    "start": "234000",
    "end": "261000"
  },
  {
    "text": "ethernet to analyze your application",
    "start": "235739",
    "end": "237900"
  },
  {
    "text": "load balancer access logs stored in",
    "start": "237900",
    "end": "240360"
  },
  {
    "text": "Amazon S3 by creating an Athena table",
    "start": "240360",
    "end": "243060"
  },
  {
    "text": "for your application load balancer",
    "start": "243060",
    "end": "245040"
  },
  {
    "text": "Access Loan thanks for watching and",
    "start": "245040",
    "end": "247440"
  },
  {
    "text": "happy cloud computing from all of us",
    "start": "247440",
    "end": "249599"
  },
  {
    "text": "here at AWS",
    "start": "249599",
    "end": "252180"
  },
  {
    "text": "foreign",
    "start": "252180",
    "end": "253830"
  },
  {
    "text": "[Music]",
    "start": "253830",
    "end": "256999"
  },
  {
    "text": "[Music]",
    "start": "259040",
    "end": "262239"
  }
]