[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "ready attending this session for the first session of the day in this session what we're going to do is we're going to",
    "start": "0",
    "end": "5910"
  },
  {
    "text": "talk about serverless technologies and how you could use those in particular use cases the first half of the",
    "start": "5910",
    "end": "13139"
  },
  {
    "text": "discussion you could kind of consider myself as the opening act in some ways is to talk about serverless technologies",
    "start": "13139",
    "end": "20220"
  },
  {
    "text": "and micro services will do an overview of AWS lambda and how you use a double",
    "start": "20220",
    "end": "26310"
  },
  {
    "text": "bass lambda in that architecture API gateway to be able to very easily provision endpoints that your services",
    "start": "26310",
    "end": "34110"
  },
  {
    "text": "could invoke and dynamo DB which is a no sequel database that's a managed service that we're providing and then we're",
    "start": "34110",
    "end": "41370"
  },
  {
    "text": "going to turn it over to Mike Jensen the director of engineering for DNC and he's",
    "start": "41370",
    "end": "46469"
  },
  {
    "text": "going to go through some of the use cases that his team has used in order to leverage things like lambda and dynamo",
    "start": "46469",
    "end": "53190"
  },
  {
    "text": "dB before we dive into service technologies just to talk a little bit",
    "start": "53190",
    "end": "59789"
  },
  {
    "start": "55000",
    "end": "55000"
  },
  {
    "text": "about micro services and what microservices our first off microservices are really a suite of",
    "start": "59789",
    "end": "66020"
  },
  {
    "text": "small services that are all running their self contained so that they all",
    "start": "66020",
    "end": "72720"
  },
  {
    "text": "have a single purpose to do you know single purpose when they're executing one service might be a complex algorithm",
    "start": "72720",
    "end": "80369"
  },
  {
    "text": "another one might be a simple algorithm but there are self-contained services often times you want to architect them",
    "start": "80369",
    "end": "87180"
  },
  {
    "text": "so that they're interacting with each other through lightweight mechanisms so",
    "start": "87180",
    "end": "93450"
  },
  {
    "text": "that invoking the various services is seamless but each of them have their own",
    "start": "93450",
    "end": "98759"
  },
  {
    "text": "data store there each atomic unit operating within the micro services",
    "start": "98759",
    "end": "104159"
  },
  {
    "text": "architecture why a lot of customers running on AWS benefit from",
    "start": "104159",
    "end": "109920"
  },
  {
    "start": "106000",
    "end": "106000"
  },
  {
    "text": "microservices really comes down to things like agility and delivering",
    "start": "109920",
    "end": "115729"
  },
  {
    "text": "capability very very quickly for their customers both both the first time to",
    "start": "115729",
    "end": "121409"
  },
  {
    "text": "market as well as future releases for individual services as they're running",
    "start": "121409",
    "end": "129319"
  },
  {
    "start": "129000",
    "end": "129000"
  },
  {
    "text": "so you know just wanted to set the stage for microservices let's talk a little bit about serverless technologies and",
    "start": "129539",
    "end": "136480"
  },
  {
    "text": "why those are important probably most folks in the room are familiar with virtualization and the concept of",
    "start": "136480",
    "end": "142719"
  },
  {
    "text": "virtual machines with ec2 it's very easy to spin up hundreds thousands of virtual",
    "start": "142719",
    "end": "149950"
  },
  {
    "text": "machines and run very very complex workloads where it was very hard to do",
    "start": "149950",
    "end": "155409"
  },
  {
    "text": "on premises before but with a virtual machine what happens is your abstract and away the hardware and you're running",
    "start": "155409",
    "end": "162250"
  },
  {
    "text": "the OS and the application on top of that OS so the unit of measurement there",
    "start": "162250",
    "end": "167290"
  },
  {
    "text": "is the actual the actual virtual machine with containers another approach that",
    "start": "167290",
    "end": "173859"
  },
  {
    "text": "many folks use the unit of measurement becomes the application or a piece of the application if you have multiple",
    "start": "173859",
    "end": "180189"
  },
  {
    "text": "containers deploying out there abstracts away the hardware and the OS and as",
    "start": "180189",
    "end": "187419"
  },
  {
    "text": "you're scaling and as you're deploying out the containers that becomes the unit",
    "start": "187419",
    "end": "193599"
  },
  {
    "text": "of measurement with oh with serverless",
    "start": "193599",
    "end": "200650"
  },
  {
    "text": "technology the unit of measurement becomes the event function or the actual",
    "start": "200650",
    "end": "206199"
  },
  {
    "text": "business code that you're deploying all you have to do is focus on that business logic and and the rest of the event",
    "start": "206199",
    "end": "214690"
  },
  {
    "start": "212000",
    "end": "212000"
  },
  {
    "text": "handling will will actually execute in",
    "start": "214690",
    "end": "219940"
  },
  {
    "text": "order to execute that runtime environment with with AWS lambda what",
    "start": "219940",
    "end": "228129"
  },
  {
    "text": "happens is you're able to build that code and as that code is executing the",
    "start": "228129",
    "end": "235359"
  },
  {
    "text": "only thing that's charged with an AWS is the execution time of that land of function what that means is you're never",
    "start": "235359",
    "end": "243699"
  },
  {
    "text": "paying for idle and the unit of measurement for lambda is very very small so it keeps costs very low anytime",
    "start": "243699",
    "end": "252459"
  },
  {
    "text": "a new event happens with an AWS that the infrastructure execute that lambda",
    "start": "252459",
    "end": "257889"
  },
  {
    "text": "function for you that event might be things like data being uploaded",
    "start": "257889",
    "end": "262900"
  },
  {
    "text": "to s3 new data getting uploaded to DynamoDB or data put on a camisa stream",
    "start": "262900",
    "end": "268770"
  },
  {
    "text": "you could also invoke lambda through synchronous execution so through things like a api gateway api gateway allows",
    "start": "268770",
    "end": "276820"
  },
  {
    "text": "you to have a restful front end to your lambda function in order to execute execute that logic but at the end it",
    "start": "276820",
    "end": "285400"
  },
  {
    "text": "really makes it very easy to perform things like real-time processing build",
    "start": "285400",
    "end": "290620"
  },
  {
    "text": "scalable web backends and really choreograph or glue systems together so",
    "start": "290620",
    "end": "300510"
  },
  {
    "start": "299000",
    "end": "299000"
  },
  {
    "text": "why is this important or wire folks leveraging serverless technologies the",
    "start": "300510",
    "end": "306070"
  },
  {
    "text": "first off as the name describes you don't have to manage servers yourself",
    "start": "306070",
    "end": "311169"
  },
  {
    "text": "and what that means is you could have quicker time to market and it's much much easier to focus on the business",
    "start": "311169",
    "end": "318940"
  },
  {
    "text": "functions or application and deploy that out quickly to AWS because the unit of",
    "start": "318940",
    "end": "326710"
  },
  {
    "text": "measurement is the function and any time an event happens that function is executed it's very very easy to",
    "start": "326710",
    "end": "333580"
  },
  {
    "text": "continuously scale that could be through restful interface calls and scaling",
    "start": "333580",
    "end": "339460"
  },
  {
    "text": "based on the number of calls being called or it could be a peak in real-time traffic on Kinesis or s3 day",
    "start": "339460",
    "end": "347110"
  },
  {
    "text": "to get pushed out to a bucket but because of the continuous scaling and",
    "start": "347110",
    "end": "352870"
  },
  {
    "text": "the function only executing when it's needed you never pay for that Idol idol",
    "start": "352870",
    "end": "360300"
  },
  {
    "text": "CP or anything like that so what that what that means is it's always being",
    "start": "360300",
    "end": "368110"
  },
  {
    "text": "billed based on the execution or as the lambda function is doing work so the",
    "start": "368110",
    "end": "375610"
  },
  {
    "text": "pricing model within lambda is structured in this way so when when",
    "start": "375610",
    "end": "381880"
  },
  {
    "text": "you're purchasing landa lambda compute it's actually within 100 millisecond",
    "start": "381880",
    "end": "386889"
  },
  {
    "text": "increments and for 1 100 millisecond increment it's 21 micro sense so very",
    "start": "386889",
    "end": "395050"
  },
  {
    "text": "very low cost 2x to lambda in addition to that there's a really generous free tier you're able to",
    "start": "395050",
    "end": "402729"
  },
  {
    "text": "have under the free tier with an AWS have a million requests with over four",
    "start": "402729",
    "end": "409060"
  },
  {
    "text": "hundred thousand gigabytes of compute every month on your accounts and that's",
    "start": "409060",
    "end": "415210"
  },
  {
    "text": "not something that expires within 12 months like some of the other free tier services so very very easy to get",
    "start": "415210",
    "end": "421960"
  },
  {
    "text": "started and start leveraging lambda to",
    "start": "421960",
    "end": "428500"
  },
  {
    "start": "427000",
    "end": "427000"
  },
  {
    "text": "actually deploy your code out to lambda the first thing you know we like to talk to customers about is various languages",
    "start": "428500",
    "end": "435610"
  },
  {
    "text": "that are supported natively within lambda we have support for javascript",
    "start": "435610",
    "end": "440889"
  },
  {
    "text": "through nodejs through java and through python but with lambda you could really",
    "start": "440889",
    "end": "447130"
  },
  {
    "text": "bundle any library you want and deploy it out so you don't have to run lambda within your specific pre-built libraries",
    "start": "447130",
    "end": "454180"
  },
  {
    "text": "you could use all your custom libraries that you want those could be native libraries as well if you want to deploy",
    "start": "454180",
    "end": "460990"
  },
  {
    "text": "that out as that business logic that goes out to the lambda execution engine",
    "start": "460990",
    "end": "467190"
  },
  {
    "text": "to specify how much resources that you want that lambda function to run with there's a very simple knob that you",
    "start": "467190",
    "end": "473949"
  },
  {
    "text": "could turn and that's really how much memory you want that lambda function to have what happens is proportional to the",
    "start": "473949",
    "end": "481630"
  },
  {
    "text": "memory the CPU and network scales with with that with that knob and very very",
    "start": "481630",
    "end": "489010"
  },
  {
    "text": "easy to start calling through either a RNs or through API gateway and these",
    "start": "489010",
    "end": "495970"
  },
  {
    "text": "other venting mechanisms and of course like all the other AWS services all the",
    "start": "495970",
    "end": "503159"
  },
  {
    "text": "authentication and authorization happens through I am Identity and Access Management so you have very fine-grained",
    "start": "503159",
    "end": "510130"
  },
  {
    "text": "control of exactly who could execute the lambda functions and audit that through",
    "start": "510130",
    "end": "515200"
  },
  {
    "text": "things like cloud trail to complement",
    "start": "515200",
    "end": "520959"
  },
  {
    "start": "519000",
    "end": "519000"
  },
  {
    "text": "lambda where it's very easy to encapsulate your business logic and focus on that that unit of code or",
    "start": "520959",
    "end": "528000"
  },
  {
    "text": "business logic we have a sort of managed service called API gateway the AWS API gateway is the",
    "start": "528000",
    "end": "535630"
  },
  {
    "text": "managed service that makes it very very easy to create provision and scale restful endpoints sense it to manage",
    "start": "535630",
    "end": "544959"
  },
  {
    "text": "service it does a lot of features for you and you can do things like define a swagger implementation to as your",
    "start": "544959",
    "end": "551740"
  },
  {
    "text": "endpoint to define the front end for your back n lambda logic some additional",
    "start": "551740",
    "end": "559330"
  },
  {
    "text": "features like a caching layer and nice integration with cloud watch gives you",
    "start": "559330",
    "end": "565720"
  },
  {
    "text": "the ability to optimize the end point as well as monitor the performance of that",
    "start": "565720",
    "end": "571959"
  },
  {
    "text": "fat endpoint some of the additional",
    "start": "571959",
    "end": "578770"
  },
  {
    "start": "577000",
    "end": "577000"
  },
  {
    "text": "features within the API gateway include things like built-in authentication that",
    "start": "578770",
    "end": "583810"
  },
  {
    "text": "you can turn on as well as the ability for customers to extend and provide their own authentication and",
    "start": "583810",
    "end": "590560"
  },
  {
    "text": "authorization for the API gateway that is actually done as a customer through a",
    "start": "590560",
    "end": "596709"
  },
  {
    "text": "lambda function that you could configure within the API gateway there's also powerful features like DDoS protection",
    "start": "596709",
    "end": "604110"
  },
  {
    "text": "throttling if you want to turn it on depending on what back-end resources you're you're executing and provides a",
    "start": "604110",
    "end": "610420"
  },
  {
    "text": "really unified method for front-end for various lambda functions so both API",
    "start": "610420",
    "end": "620260"
  },
  {
    "text": "gateway and lambda are stateless and what that means is there's no state",
    "start": "620260",
    "end": "625450"
  },
  {
    "text": "preserved between executions within those two tiers of the architecture",
    "start": "625450",
    "end": "630750"
  },
  {
    "text": "oftentimes what customers do is use things like DynamoDB to be able to",
    "start": "630750",
    "end": "636579"
  },
  {
    "text": "preserve state for their application some other options include elasticsearch and doing things like leveraging RDS or",
    "start": "636579",
    "end": "644050"
  },
  {
    "text": "a relational database service through a VPC connection but what we're going to focus on this discussion is dynamodb",
    "start": "644050",
    "end": "650730"
  },
  {
    "text": "what DynamoDB is is a no sequel database that's completely managed for you as a",
    "start": "650730",
    "end": "656649"
  },
  {
    "text": "customer it provides a key value look up and we'll dive into what that looks like",
    "start": "656649",
    "end": "662380"
  },
  {
    "text": "within the table definition but the other really powerful thing with the technology is or",
    "start": "662380",
    "end": "669470"
  },
  {
    "text": "with the services that it provides very predictable single-digit millisecond",
    "start": "669470",
    "end": "675080"
  },
  {
    "text": "Lane scene for your requests and that's regardless of the amount of requests you do as well as the scale of data that you",
    "start": "675080",
    "end": "682010"
  },
  {
    "text": "store within DynamoDB and like the other AWS managed services it's very easy to",
    "start": "682010",
    "end": "689750"
  },
  {
    "text": "scale based on your demand and you only pay for what you use within the service",
    "start": "689750",
    "end": "696220"
  },
  {
    "text": "this is a diagram that we like to show that really illustrates the predictable",
    "start": "696580",
    "end": "702680"
  },
  {
    "text": "low latency performance leveraging DynamoDB and what you can see here is the blue chart indicates the number",
    "start": "702680",
    "end": "709040"
  },
  {
    "text": "requests for a particular region over a period of time and the average layin see",
    "start": "709040",
    "end": "715610"
  },
  {
    "text": "that the databases that the managed service is happening at that given point",
    "start": "715610",
    "end": "721220"
  },
  {
    "text": "in time and what you'll notice is as the load increases and decreases on DynamoDB",
    "start": "721220",
    "end": "727610"
  },
  {
    "text": "the lane see stays stays flat slays horizontal since DynamoDB is a managed",
    "start": "727610",
    "end": "738830"
  },
  {
    "text": "no sequel database running within the region for you the service itself is",
    "start": "738830",
    "end": "744680"
  },
  {
    "text": "handling things like durability and availability of the data for you and the",
    "start": "744680",
    "end": "750710"
  },
  {
    "text": "way it does that is when you interact through DynamoDB through the interface it stores the data automatically for you",
    "start": "750710",
    "end": "757880"
  },
  {
    "text": "within at least three availability zones within that region and when you're",
    "start": "757880",
    "end": "764150"
  },
  {
    "text": "reading the data you have the option to specify things like I want to read",
    "start": "764150",
    "end": "769670"
  },
  {
    "text": "either eventually consistent or strongly consistent rates in order for you to get",
    "start": "769670",
    "end": "775040"
  },
  {
    "text": "the data out of the distributed service",
    "start": "775040",
    "end": "780759"
  },
  {
    "start": "781000",
    "end": "781000"
  },
  {
    "text": "within DynamoDB the schema definition or i should say the table definition since",
    "start": "781089",
    "end": "787790"
  },
  {
    "text": "its scheme hillis is is defined based on a key so each item in within DynamoDB",
    "start": "787790",
    "end": "794570"
  },
  {
    "text": "has a key and then with that key you could specify an optional sort key and that's another way of",
    "start": "794570",
    "end": "801240"
  },
  {
    "text": "further defining a unique item in your DynamoDB table within a one key bout you",
    "start": "801240",
    "end": "810030"
  },
  {
    "text": "know with the one item you might have a different set of attributes defined than another set of items that you get that",
    "start": "810030",
    "end": "816780"
  },
  {
    "text": "you store within dynamodb so you don't have to predefine all the different",
    "start": "816780",
    "end": "821790"
  },
  {
    "text": "attributes that you may want to store within the dynamo DB table all you have to do at the table creation time is",
    "start": "821790",
    "end": "828270"
  },
  {
    "text": "defined either the key or the key and the sort key together and the rest of the attributes could be Duff defined as",
    "start": "828270",
    "end": "834960"
  },
  {
    "text": "needed you could also do things like store JSON documents within dynamo dB if",
    "start": "834960",
    "end": "841140"
  },
  {
    "text": "you want to interact with a no sequel database that's more document-oriented rather than key value look up any of the",
    "start": "841140",
    "end": "849780"
  },
  {
    "text": "attributes that you see for the item row you could also define things like a",
    "start": "849780",
    "end": "855270"
  },
  {
    "text": "index on that data to make it very easy to look up and retrieve that data out of",
    "start": "855270",
    "end": "860400"
  },
  {
    "text": "the no sequel database so you know with",
    "start": "860400",
    "end": "868860"
  },
  {
    "text": "those three surfaces together we see some common use cases across our customers that we want to go over the",
    "start": "868860",
    "end": "875460"
  },
  {
    "text": "first really is related to data processing since lambda encapsulate your",
    "start": "875460",
    "end": "881450"
  },
  {
    "start": "877000",
    "end": "877000"
  },
  {
    "text": "captures your business logic into code function that you upload into the service that code could get executed",
    "start": "881450",
    "end": "888060"
  },
  {
    "text": "based on various events so one common use case is when data gets upload to s3",
    "start": "888060",
    "end": "894020"
  },
  {
    "text": "you could indicate to s3 that you want to execute a lambda function whenever",
    "start": "894020",
    "end": "899910"
  },
  {
    "text": "that happens when that function executes so you could do things like resize an",
    "start": "899910",
    "end": "905760"
  },
  {
    "text": "image to create a thumbnail and store that into another key value or a key",
    "start": "905760",
    "end": "910980"
  },
  {
    "text": "space in with an s3 you could do other things like create indexes within",
    "start": "910980",
    "end": "916110"
  },
  {
    "text": "DynamoDB if you're storing additional metadata about your s3 data within dynamo you could do things like index",
    "start": "916110",
    "end": "923790"
  },
  {
    "text": "the elements into elasticsearch any custom processing that you want to do",
    "start": "923790",
    "end": "928860"
  },
  {
    "text": "based on data uploaded to s3 you could also have",
    "start": "928860",
    "end": "934200"
  },
  {
    "text": "things trigger off of DynamoDB streams or Kinesis as a as a data layer data",
    "start": "934200",
    "end": "940290"
  },
  {
    "text": "layer trigger another use case we see",
    "start": "940290",
    "end": "945990"
  },
  {
    "start": "944000",
    "end": "944000"
  },
  {
    "text": "for lambda is based on you know building a scalable back-end since lambda could",
    "start": "945990",
    "end": "951779"
  },
  {
    "text": "be synchronously executed as well as asynchronously executed we see folks",
    "start": "951779",
    "end": "957240"
  },
  {
    "text": "leveraging services like IOT and mobile SDKs in order to to call lambda to",
    "start": "957240",
    "end": "965370"
  },
  {
    "text": "perform that business function that might be through API gateway if you want",
    "start": "965370",
    "end": "970560"
  },
  {
    "text": "to expose that service through a restful interface but it also might be leveraging services like cognito in",
    "start": "970560",
    "end": "977070"
  },
  {
    "text": "order to get a temporary access key to be able to invoke that lambda function directly using our SDKs and then",
    "start": "977070",
    "end": "986760"
  },
  {
    "text": "oftentimes you know for the backend persistent persistence layer you'll notice DynamoDB Illustrated there so",
    "start": "986760",
    "end": "997320"
  },
  {
    "start": "996000",
    "end": "996000"
  },
  {
    "text": "most people are familiar with leveraging s 3 and s 3 is a object storage that you",
    "start": "997320",
    "end": "1002899"
  },
  {
    "text": "could use the store objects with an AWS with an s3 what you could do is you could define a static web hosting to be",
    "start": "1002899",
    "end": "1010699"
  },
  {
    "text": "able to serve out HTML document or HTML pages CSS is JavaScript files various",
    "start": "1010699",
    "end": "1018260"
  },
  {
    "text": "static assets that make that don't change on top of your web tier because",
    "start": "1018260",
    "end": "1023990"
  },
  {
    "text": "of that it's really really powerful to be able to complement that static hosting with an s3 and leverage things",
    "start": "1023990",
    "end": "1031339"
  },
  {
    "text": "like API gateway and lambda together to really build rich web applications without running any ec2 instances under",
    "start": "1031339",
    "end": "1038750"
  },
  {
    "text": "the covers and the way that works is the static content is still served out of s3",
    "start": "1038750",
    "end": "1044209"
  },
  {
    "text": "and then that content could actually be configured to call an API gateway",
    "start": "1044209",
    "end": "1050150"
  },
  {
    "text": "through a restful endpoint to be able to execute that dynamic business logic captured or encapsulated behind lambda",
    "start": "1050150",
    "end": "1057140"
  },
  {
    "text": "and what that allows you to do is really build this scalable web tier very very",
    "start": "1057140",
    "end": "1063590"
  },
  {
    "text": "quickly and and be able to run it without running individual servers and have to",
    "start": "1063590",
    "end": "1069680"
  },
  {
    "text": "provision the server's yourself so so",
    "start": "1069680",
    "end": "1077420"
  },
  {
    "text": "when lambda was was launched as general availability early in 2015 it had a few",
    "start": "1077420",
    "end": "1084650"
  },
  {
    "text": "sir you know it had things like nodejs and it was a really powerful service within by ria vent of 2015 we released",
    "start": "1084650",
    "end": "1093680"
  },
  {
    "text": "some new features based on customer feedback such as support for python and",
    "start": "1093680",
    "end": "1098690"
  },
  {
    "text": "scheduled events and longer running queries or execution code for your",
    "start": "1098690",
    "end": "1106250"
  },
  {
    "text": "lambda function sensory events you'll notice many additional features that we released such as the built-in swagger",
    "start": "1106250",
    "end": "1114170"
  },
  {
    "text": "import one click course setup so courses a feature that allows you to call a",
    "start": "1114170",
    "end": "1120800"
  },
  {
    "text": "restful endpoint when serving data from another source such as s3 and a lot of",
    "start": "1120800",
    "end": "1126530"
  },
  {
    "text": "additional features that allow you to really see the pace of innovation for lambda just like you'll notice for the",
    "start": "1126530",
    "end": "1133280"
  },
  {
    "text": "other AWS services so that was a quick",
    "start": "1133280",
    "end": "1138680"
  },
  {
    "text": "overview of some of the surplice services that AWS provides you know I'm",
    "start": "1138680",
    "end": "1145190"
  },
  {
    "text": "very pleased to welcome Mike Jensen up to the stage here to go over what DNC is doing hey everyone thanks for joining us",
    "start": "1145190",
    "end": "1155030"
  },
  {
    "text": "this morning so yeah I'm Mike I am the director of engineering at the the DNC that means that about 75% of my job is",
    "start": "1155030",
    "end": "1162370"
  },
  {
    "text": "engineering and then another twenty-five percent occasionally I get to do some directory type work so before I began so",
    "start": "1162370",
    "end": "1172040"
  },
  {
    "text": "I'm going to talk about some use cases and some ways we've implemented lambda and DynamoDB in applications some pretty",
    "start": "1172040",
    "end": "1179450"
  },
  {
    "text": "critical applications that we are running right now but before I do that I'm going to give a quick overview of",
    "start": "1179450",
    "end": "1185990"
  },
  {
    "text": "what we do at the DNC and kind of how that differs from campaigns and some of",
    "start": "1185990",
    "end": "1191870"
  },
  {
    "text": "the unique engineering challenges we face here the first the main goal of the",
    "start": "1191870",
    "end": "1197690"
  },
  {
    "text": "dance see is to get Democrats elected up and down the ballot you know that's that's our number one mission this differs",
    "start": "1197690",
    "end": "1204530"
  },
  {
    "text": "significantly from campaigns campaigns have kind of a laser focus on a single candidate but a lot of our work is more",
    "start": "1204530",
    "end": "1211940"
  },
  {
    "text": "at the DNC as more infrastructure building or kind of building the services that help power those campaigns",
    "start": "1211940",
    "end": "1218570"
  },
  {
    "text": "so that they can do have the direct voter contact work on the on the",
    "start": "1218570",
    "end": "1224840"
  },
  {
    "text": "engineering team and on the technology side that that has a number of",
    "start": "1224840",
    "end": "1230350"
  },
  {
    "text": "interesting problems this means that we have to meet campaigns at their level of",
    "start": "1230350",
    "end": "1236480"
  },
  {
    "text": "expertise so when we're dealing with the presidential campaign like the Hillary campaign or the Bernie campaign they",
    "start": "1236480",
    "end": "1242810"
  },
  {
    "text": "have a full engineering staff and they're going to be making use of a lot of our internal API services and some of",
    "start": "1242810",
    "end": "1248960"
  },
  {
    "text": "our external AP is as well when we're dealing with your City Commissioner or",
    "start": "1248960",
    "end": "1254000"
  },
  {
    "text": "your local state Senate campaign they're not going to have an engineering team they're going to have maybe one or two",
    "start": "1254000",
    "end": "1259430"
  },
  {
    "text": "part-time volunteers and we are going to have to build embeddable tools that consume our own AP is that make it",
    "start": "1259430",
    "end": "1266360"
  },
  {
    "text": "really easy for them to drop into their WordPress sites or we may build static sites for them or really whatever it",
    "start": "1266360",
    "end": "1272240"
  },
  {
    "text": "takes to help support these these campaigns so I just wanted to kind of",
    "start": "1272240",
    "end": "1278960"
  },
  {
    "start": "1276000",
    "end": "1276000"
  },
  {
    "text": "harp on why we use AWS at the DNC and I'm going to take a quick detour here so",
    "start": "1278960",
    "end": "1284620"
  },
  {
    "text": "I'm sure you all have heard a million times and you probably use AWS a lot and",
    "start": "1284620",
    "end": "1290330"
  },
  {
    "text": "that's why you're here but we use AWS that the DNC because of this the secure nature of it how stable it is and how",
    "start": "1290330",
    "end": "1297530"
  },
  {
    "text": "scalable it is and the detour I want to make is if you all have seen the news in the past week that the DNC got hacked by",
    "start": "1297530",
    "end": "1305390"
  },
  {
    "text": "the Russians it's just kind of part of our job is we're always kind of a a kind",
    "start": "1305390",
    "end": "1311720"
  },
  {
    "text": "of an attack vector for some external groups but two things to mention there",
    "start": "1311720",
    "end": "1317090"
  },
  {
    "text": "is one most of our technology infrastructure is based on AWS and that",
    "start": "1317090",
    "end": "1323900"
  },
  {
    "text": "meant that that part of our infrastructure was entirely secure through everything the second point I",
    "start": "1323900",
    "end": "1330920"
  },
  {
    "text": "want to make is that we shut down almost all of our internal systems to do a major overhaul",
    "start": "1330920",
    "end": "1336140"
  },
  {
    "text": "on Friday on Friday jun 11 the first news story that came out was on tuesday",
    "start": "1336140",
    "end": "1343970"
  },
  {
    "text": "jun 14th which was four days after we shut down all of our internal systems if",
    "start": "1343970",
    "end": "1350390"
  },
  {
    "text": "you all are familiar with the 24-hour news cycle or the nonstop rate of political news the reason why this",
    "start": "1350390",
    "end": "1356750"
  },
  {
    "text": "didn't become a new story at let's say 50 one on on friday was because well",
    "start": "1356750",
    "end": "1363590"
  },
  {
    "text": "everything was built in AWS and it remains stable through all of our internal outages kind of jumping back to",
    "start": "1363590",
    "end": "1371300"
  },
  {
    "text": "why we use AWS and why we've started using lambda and DynamoDB for a lot of our services is that we really only get",
    "start": "1371300",
    "end": "1377990"
  },
  {
    "text": "one chance at election day a lot of media events they only happen once and we have to be ready to respond to them",
    "start": "1377990",
    "end": "1384500"
  },
  {
    "text": "and all of these services that we build for campaigns have to be available at all times these are two graphs of actual",
    "start": "1384500",
    "end": "1394100"
  },
  {
    "start": "1392000",
    "end": "1392000"
  },
  {
    "text": "traffic we've seen over the past few months we maintain probably around fifty services it goes up and down and it's",
    "start": "1394100",
    "end": "1400910"
  },
  {
    "text": "probably just going to keep going up as we get closer to the election for different campaigns and we never know",
    "start": "1400910",
    "end": "1406940"
  },
  {
    "text": "which one is going to get slammed with traffic we have a lot of ways to expect",
    "start": "1406940",
    "end": "1412700"
  },
  {
    "text": "traffic it's an election day if it's the end of quarter if there was a major media event we can scale up and prepare",
    "start": "1412700",
    "end": "1417920"
  },
  {
    "text": "for that traffic if ten campaigns all of a sudden decide to use one of our matching services and send all of all of",
    "start": "1417920",
    "end": "1425510"
  },
  {
    "text": "their supporters information on that we can't really predict that at at the right time or if a conservative",
    "start": "1425510",
    "end": "1432410"
  },
  {
    "text": "commentator decides to drive all of their listeners to one of our services",
    "start": "1432410",
    "end": "1437660"
  },
  {
    "text": "that is more dynamic and content we can't really predict that either and we just have to be prepared so that we're",
    "start": "1437660",
    "end": "1443360"
  },
  {
    "text": "not going down with any levels of traffic that we're seeing we do this to",
    "start": "1443360",
    "end": "1449630"
  },
  {
    "text": "make sure that all of our applications are performative we do a lot of work to make sure that no matter what traffic we",
    "start": "1449630",
    "end": "1455990"
  },
  {
    "text": "get hit with we are prepared we do a lot of testing we use get flow tagging and",
    "start": "1455990",
    "end": "1461660"
  },
  {
    "text": "jenkins integration testing before we launch anything and then we also have a series of low test before we",
    "start": "1461660",
    "end": "1468540"
  },
  {
    "text": "push even to our staging environment and then push to production we use we use",
    "start": "1468540",
    "end": "1473610"
  },
  {
    "text": "terraform for all of our deployment setup we put as much of our content our",
    "start": "1473610",
    "end": "1479760"
  },
  {
    "text": "static content into s3 we use a lot of auto scaling groups and load balancers",
    "start": "1479760",
    "end": "1486180"
  },
  {
    "text": "and and with all of our newer applications we split those out into micro services that Ben was talking",
    "start": "1486180",
    "end": "1492690"
  },
  {
    "text": "about at the beginning all of our newer applications have a micro service architecture so that we can scale up the",
    "start": "1492690",
    "end": "1498150"
  },
  {
    "text": "part of the application that we need to with the introduction of lambda and DynamoDB these have been great tools for",
    "start": "1498150",
    "end": "1505110"
  },
  {
    "text": "individual parts of our applications to make them more secure and faster and now",
    "start": "1505110",
    "end": "1510480"
  },
  {
    "text": "I'm going to go into some of the use cases we've had with lambda and DynamoDB these are going to be higher level kind",
    "start": "1510480",
    "end": "1517230"
  },
  {
    "text": "of like systems diagrams and going into how we've extrapolated different parts out of these applications but if you",
    "start": "1517230",
    "end": "1522870"
  },
  {
    "text": "want more details just see me after after this talk so this is a this is",
    "start": "1522870",
    "end": "1530100"
  },
  {
    "start": "1527000",
    "end": "1527000"
  },
  {
    "text": "talking about our voter registration application so we built an application for voter registration in in the in 2012",
    "start": "1530100",
    "end": "1537930"
  },
  {
    "text": "this was managed this was built by the Obama campaign more than four years ago this has had more than 25 developers on",
    "start": "1537930",
    "end": "1545400"
  },
  {
    "text": "it and in politics you know people in places change pretty quickly so we have",
    "start": "1545400",
    "end": "1552090"
  },
  {
    "text": "basically no developers who worked on the original application even with even",
    "start": "1552090",
    "end": "1557160"
  },
  {
    "text": "that we were able to contact to figure out what's going on this the old system that we had was very monolithic it was",
    "start": "1557160",
    "end": "1563820"
  },
  {
    "text": "pretty server intensive for one of the most important parts of the processing which was voter registration and voter",
    "start": "1563820",
    "end": "1570660"
  },
  {
    "text": "registration data is the most important data that we can get these are if they",
    "start": "1570660",
    "end": "1575970"
  },
  {
    "text": "are going to a service that we provide and are registering to vote this means that they are direct voters that we can",
    "start": "1575970",
    "end": "1582330"
  },
  {
    "text": "get and if we can turn them out to the polls we can win elections with these voters do what we do with voter",
    "start": "1582330",
    "end": "1589290"
  },
  {
    "text": "registration is we upload it as quickly as possible to van which is another service that campaigns use that that's",
    "start": "1589290",
    "end": "1595800"
  },
  {
    "text": "not managed by us but that's managed externally that's called the voter activation network and they use that for all of their contact contact work we build the",
    "start": "1595800",
    "end": "1603660"
  },
  {
    "text": "kind of the registration connecting pieces and make sure that data can be uploaded into van as quickly as possible",
    "start": "1603660",
    "end": "1608820"
  },
  {
    "text": "but so this was kind of our old infrastructure very basic we just kept",
    "start": "1608820",
    "end": "1615240"
  },
  {
    "text": "building on top of the the court system over and over and over again and it was",
    "start": "1615240",
    "end": "1620700"
  },
  {
    "text": "becoming a problem so so we so we split this out and we split this out into",
    "start": "1620700",
    "end": "1626220"
  },
  {
    "text": "multiple services and the one really the one part for this hotbed i'll talk about is where we added of lambda function",
    "start": "1626220",
    "end": "1634200"
  },
  {
    "text": "right in but before we actually populate the data over to van the reason we did",
    "start": "1634200",
    "end": "1639450"
  },
  {
    "text": "that was because this was one of the more server intensive tasks so we're able to take load off of our servers and",
    "start": "1639450",
    "end": "1646310"
  },
  {
    "text": "so that the the main servers that are handling just general traffic or general voter registration information are",
    "start": "1646310",
    "end": "1653640"
  },
  {
    "text": "completely fine and that process is extrapolated out into that separate function the other reason we used a",
    "start": "1653640",
    "end": "1659850"
  },
  {
    "text": "lambda function for this and we have actually used a queuing sort we use SQS separately is because we no matter what",
    "start": "1659850",
    "end": "1667140"
  },
  {
    "text": "we want to capture this data and we want to make this available to campaigns as soon as possible so if you register to",
    "start": "1667140",
    "end": "1672660"
  },
  {
    "text": "vote and you're able to early vote tomorrow those campaigns want to know that you that they want to be able to",
    "start": "1672660",
    "end": "1678090"
  },
  {
    "text": "contact you as soon as possible and help you turn out so as a backup for any of",
    "start": "1678090",
    "end": "1684810"
  },
  {
    "text": "the services that go down we use SQS and we keep churning through the lambda",
    "start": "1684810",
    "end": "1689880"
  },
  {
    "text": "function over and over again and until we can upload the data and confirm that everything's good yeah that's just made",
    "start": "1689880",
    "end": "1696840"
  },
  {
    "text": "a lot of the data the important data that we want a lot more secure and that makes sure that we have access to a lot",
    "start": "1696840",
    "end": "1702480"
  },
  {
    "text": "quicker the second thing I want to talk about the second use case for lambda",
    "start": "1702480",
    "end": "1708150"
  },
  {
    "start": "1704000",
    "end": "1704000"
  },
  {
    "text": "where we've adopted it is in one of our opposition research setups and",
    "start": "1708150",
    "end": "1714630"
  },
  {
    "text": "opposition research is pretty important to us if you find out the right information on a candidate it can break",
    "start": "1714630",
    "end": "1720930"
  },
  {
    "text": "their campaign and a lot of these systems our researchers are really great",
    "start": "1720930",
    "end": "1725970"
  },
  {
    "text": "but they have to do everything manually they have or they had to they had to watch all these videos on YouTube",
    "start": "1725970",
    "end": "1731690"
  },
  {
    "text": "ually they had to pull this data from web sites manually they had to upload all of this data manually and then",
    "start": "1731690",
    "end": "1737419"
  },
  {
    "text": "transfer it over to a separate database manually that that's a lot of work and they're not really doing the research",
    "start": "1737419",
    "end": "1742669"
  },
  {
    "text": "work instead they're just doing kind of like data entry work so we overhauled",
    "start": "1742669",
    "end": "1748820"
  },
  {
    "text": "this system and made it look a lot more",
    "start": "1748820",
    "end": "1756230"
  },
  {
    "text": "like this now the we have RSS trigger downloads this is using Amazon's API gateway and the lambda function to",
    "start": "1756230",
    "end": "1762889"
  },
  {
    "text": "process data into s3 separately we built a scraper system and we still allow user",
    "start": "1762889",
    "end": "1768470"
  },
  {
    "text": "uploads for data that we can't acquire that way but then we also are able to process the data and get it over into",
    "start": "1768470",
    "end": "1775070"
  },
  {
    "text": "our larger research system more quickly and that means that research researchers",
    "start": "1775070",
    "end": "1780289"
  },
  {
    "text": "aren't duplicating efforts and that as soon as an event happens that data is live and available to them in in the",
    "start": "1780289",
    "end": "1787460"
  },
  {
    "text": "separate system that we build out for them yeah and one of the more important things is that nothing is missed or not",
    "start": "1787460",
    "end": "1794299"
  },
  {
    "text": "because we now have all of these services pulling in data we're not losing anything that could be critical",
    "start": "1794299",
    "end": "1801490"
  },
  {
    "text": "now lamba working with lambda has been pretty great but we have run into a number of issues and kind of the biggest",
    "start": "1801820",
    "end": "1808730"
  },
  {
    "start": "1802000",
    "end": "1802000"
  },
  {
    "text": "one is the the second point that I have there which is the limited error reporting because there's no full",
    "start": "1808730",
    "end": "1814730"
  },
  {
    "text": "debugger in lambda the best way to debug for us has been to run a lot of these lambda scripts locally but then if they",
    "start": "1814730",
    "end": "1821419"
  },
  {
    "text": "fail as lambda functions then we have to run write a series of print statements to figure out why they're failing and",
    "start": "1821419",
    "end": "1827629"
  },
  {
    "text": "then kind of just keep going back and forth reuploading the lambda function its kind of it becomes a trial yeah I",
    "start": "1827629",
    "end": "1833629"
  },
  {
    "text": "guess and check kind of thing with debugging lambda lambda functions",
    "start": "1833629",
    "end": "1838730"
  },
  {
    "text": "sometimes this was a large larger problem for us when we tried most of our",
    "start": "1838730",
    "end": "1845179"
  },
  {
    "text": "applications our rails applications so our developers wanted to write these lambda functions in Ruby we attempted to",
    "start": "1845179",
    "end": "1851899"
  },
  {
    "text": "write these limited functions in EM Ruby and J Ruby and then have them compile to you know python or with M Ruby we used",
    "start": "1851899",
    "end": "1858789"
  },
  {
    "text": "python container for that and okay Ruby obviously Java but",
    "start": "1858789",
    "end": "1864260"
  },
  {
    "text": "we ran into bugs with these lambda functions because of the limited air reporting and because ruby was not",
    "start": "1864260",
    "end": "1870530"
  },
  {
    "text": "natively supported we really couldn't determine what was going on and why the functions were breaking in the end we",
    "start": "1870530",
    "end": "1876470"
  },
  {
    "text": "ended up writing these all in in Python and everything has been working great sense but those were some of the",
    "start": "1876470",
    "end": "1882830"
  },
  {
    "text": "downsides to kind of trying to go down the Ruby rail right there and we did run",
    "start": "1882830",
    "end": "1888410"
  },
  {
    "text": "into some disk space issues I think there it's 512 Meg's on on the instance",
    "start": "1888410",
    "end": "1894980"
  },
  {
    "text": "that lambda spins up some of the data we're processing is gigs of data and we",
    "start": "1894980",
    "end": "1900620"
  },
  {
    "text": "needed to store that temporarily in the in the temp directory and because of those limits we actually had to",
    "start": "1900620",
    "end": "1906940"
  },
  {
    "text": "separately process those manually we created a system for any failed job so",
    "start": "1906940",
    "end": "1912620"
  },
  {
    "text": "that could be recorded and then we could process those separately yeah the next",
    "start": "1912620",
    "end": "1919760"
  },
  {
    "start": "1919000",
    "end": "1919000"
  },
  {
    "text": "thing I'll talk about is donations and how we've used a dynamo DB for this and I just wanted to show this large screen",
    "start": "1919760",
    "end": "1925790"
  },
  {
    "text": "because this is our donation form it's very large that's imposing we have like 16 fields on our donation form every one",
    "start": "1925790",
    "end": "1933170"
  },
  {
    "text": "of which you have to fill out and the reason you have to fill out all those forms is not because we want you to fill",
    "start": "1933170",
    "end": "1940850"
  },
  {
    "text": "out those forms well we kind of do but election law mandates that we collect every single bit of that information so",
    "start": "1940850",
    "end": "1947030"
  },
  {
    "text": "we have to request that information from every single donor and if not electronically then you have to fill out",
    "start": "1947030",
    "end": "1952820"
  },
  {
    "text": "a piece of paper that says everything from your occupation and your employer and all that before you can give us any",
    "start": "1952820",
    "end": "1958790"
  },
  {
    "text": "money but contributions are very very important to our operation we are funded",
    "start": "1958790",
    "end": "1964130"
  },
  {
    "text": "entirely through donations and entirely through people deciding they want to",
    "start": "1964130",
    "end": "1969350"
  },
  {
    "text": "support Democratic causes that means that if we are putting barriers between",
    "start": "1969350",
    "end": "1975860"
  },
  {
    "text": "you contributing to to the DNC we are losing money for our operations so on",
    "start": "1975860",
    "end": "1983120"
  },
  {
    "text": "the engineering team we've done a lot of work to make filling out that form a lot easier and actually clicking the",
    "start": "1983120",
    "end": "1989150"
  },
  {
    "text": "contribute button and the big solution using DynamoDB has to pre-fill as much",
    "start": "1989150",
    "end": "1994970"
  },
  {
    "text": "of the data as we can with hig values and DynamoDB has been perfect for this this is an example if you've",
    "start": "1994970",
    "end": "2002190"
  },
  {
    "text": "donated to the DNC once we stored the information the information that we can store we're not going to store your",
    "start": "2002190",
    "end": "2008159"
  },
  {
    "text": "credit card information we really don't want to save that information anywhere but we will store your you know your",
    "start": "2008159",
    "end": "2013350"
  },
  {
    "text": "first name last name information in a separate secure system and then will populate that data in future fundraising",
    "start": "2013350",
    "end": "2020519"
  },
  {
    "text": "emails this is an example of all my information not my real information filled out into our donation form I now",
    "start": "2020519",
    "end": "2027809"
  },
  {
    "text": "just have to fill out my credit card information and taken away 14 of the",
    "start": "2027809",
    "end": "2032820"
  },
  {
    "text": "fields that you may have had to fill out so as I said DynamoDB is really great",
    "start": "2032820",
    "end": "2039299"
  },
  {
    "text": "for this it's a key value store and we can use hash IDs to quickly look up",
    "start": "2039299",
    "end": "2044700"
  },
  {
    "text": "donor information and pre-fill that data because it's fast and gives us secure access to that data one of the things",
    "start": "2044700",
    "end": "2051419"
  },
  {
    "text": "we've looked at is every fraction of a second it takes for a donation page to load or for a person to fill out a form",
    "start": "2051419",
    "end": "2058378"
  },
  {
    "text": "we are losing money that we that can go to support Democratic causes so having",
    "start": "2058379",
    "end": "2063388"
  },
  {
    "text": "information load quickly is one of our most important tasks DynamoDB has been",
    "start": "2063389",
    "end": "2070230"
  },
  {
    "text": "great for this it's also we've been able to adapt really easily to event-based traffic for example end of quarter we",
    "start": "2070230",
    "end": "2078138"
  },
  {
    "text": "receive a ton of donations major media events we receive a ton of donations it",
    "start": "2078139",
    "end": "2083790"
  },
  {
    "text": "also we can scale up without any downtime even a fraction of a second of downtime so we don't even have to",
    "start": "2083790",
    "end": "2090000"
  },
  {
    "text": "transfer a lot of things when we've scaled up we've had two done quick transfers to different RDS instances or",
    "start": "2090000",
    "end": "2096000"
  },
  {
    "text": "different different tables there it is you know like a few milliseconds where",
    "start": "2096000",
    "end": "2101040"
  },
  {
    "text": "if we get a request that request might fail but with DynamoDB we can just scale",
    "start": "2101040",
    "end": "2106049"
  },
  {
    "text": "right up we actually had an instance a few weeks ago where we saw that traffic",
    "start": "2106049",
    "end": "2112680"
  },
  {
    "text": "was getting higher and so in in a matter of a few minutes we we were prepared for the influx of traffic for donations",
    "start": "2112680",
    "end": "2119970"
  },
  {
    "text": "which is you know great for our operations so a few a few quick",
    "start": "2119970",
    "end": "2125730"
  },
  {
    "start": "2123000",
    "end": "2123000"
  },
  {
    "text": "takeaways from this AWS has been really great for the operational speed of campaigns we have to",
    "start": "2125730",
    "end": "2131380"
  },
  {
    "text": "spond very quickly to any any campaign needs and we have to get applications up",
    "start": "2131380",
    "end": "2137079"
  },
  {
    "text": "and scale up whenever necessary so campaigns are relying on us to do our work and AWS has been great for this",
    "start": "2137079",
    "end": "2144059"
  },
  {
    "text": "lambda and DynamoDB we found some very specific use cases and started integrating these into a number of our",
    "start": "2144059",
    "end": "2150670"
  },
  {
    "text": "legacy applications as we've been refactoring them and we haven't kind of",
    "start": "2150670",
    "end": "2155710"
  },
  {
    "text": "gone all-in on just a complete service architecture for any of our applications yet but we what we have used it what we",
    "start": "2155710",
    "end": "2162400"
  },
  {
    "text": "have done is extrapolate specific functions you know had sunny people like lambda functions into specific",
    "start": "2162400",
    "end": "2168849"
  },
  {
    "text": "operations and run those using lambda and this has been great for stability",
    "start": "2168849",
    "end": "2175720"
  },
  {
    "text": "and scalability the three the use cases that I talked about one was voter registration one was our opposition",
    "start": "2175720",
    "end": "2182319"
  },
  {
    "text": "research and the other was donations these are some of our most critical some of the most critical things that we do",
    "start": "2182319",
    "end": "2188440"
  },
  {
    "text": "at the DNC and we are using lambda and DynamoDB to make sure that they happen and and finally we are pretty excited",
    "start": "2188440",
    "end": "2195549"
  },
  {
    "text": "about a lot of the future integrations we have underway right now we're using DynamoDB for a voter protection service",
    "start": "2195549",
    "end": "2202539"
  },
  {
    "text": "that we're building out which is built with Kinesis to just scream a lot of the the data and track some of the the",
    "start": "2202539",
    "end": "2210069"
  },
  {
    "text": "incident reporting we get and and we have another few other applications that we're looking at using lambda 4 and we",
    "start": "2210069",
    "end": "2217329"
  },
  {
    "text": "more more than likely will so yeah that's uh everything for me so thank you",
    "start": "2217329",
    "end": "2224609"
  },
  {
    "text": "so appreciate everyone taking the time what we'll do is we'll stay up here for a few minutes be able to field any",
    "start": "2232370",
    "end": "2239160"
  },
  {
    "text": "questions you know that folks have but definitely appreciate everyone's taking time to learn a little bit about",
    "start": "2239160",
    "end": "2245490"
  },
  {
    "text": "serverless technologies",
    "start": "2245490",
    "end": "2248450"
  },
  {
    "text": "you",
    "start": "2259850",
    "end": "2261940"
  }
]