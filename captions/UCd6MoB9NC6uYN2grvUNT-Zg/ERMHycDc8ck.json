[
  {
    "text": "hi I'm blah blah's Chano principal",
    "start": "0",
    "end": "2939"
  },
  {
    "text": "database specialist solutions architect",
    "start": "2939",
    "end": "5009"
  },
  {
    "text": "here at AWS and I'm going to show you",
    "start": "5009",
    "end": "7710"
  },
  {
    "text": "how high-availability works in practice",
    "start": "7710",
    "end": "10200"
  },
  {
    "text": "with Amazon Arora I was an Aurora is a",
    "start": "10200",
    "end": "13650"
  },
  {
    "text": "relational database built for the cloud",
    "start": "13650",
    "end": "16080"
  },
  {
    "text": "it combines the performance and",
    "start": "16080",
    "end": "18600"
  },
  {
    "text": "availability of traditional enterprise",
    "start": "18600",
    "end": "21439"
  },
  {
    "text": "databases with the cost-effectiveness",
    "start": "21439",
    "end": "23880"
  },
  {
    "text": "and simplicity of open-source databases",
    "start": "23880",
    "end": "27230"
  },
  {
    "text": "our reader has two versions compatible",
    "start": "27230",
    "end": "31019"
  },
  {
    "text": "with my sequel and Pascua sequel and is",
    "start": "31019",
    "end": "33750"
  },
  {
    "text": "delivered as a managed service that",
    "start": "33750",
    "end": "36840"
  },
  {
    "text": "automates time-consuming administration",
    "start": "36840",
    "end": "39899"
  },
  {
    "text": "tasks such as hardware provisioning",
    "start": "39899",
    "end": "42000"
  },
  {
    "text": "database setup patching and backups one",
    "start": "42000",
    "end": "46860"
  },
  {
    "text": "of the key Aurora features is the",
    "start": "46860",
    "end": "49440"
  },
  {
    "text": "distributed fault tolerant and",
    "start": "49440",
    "end": "51500"
  },
  {
    "text": "self-healing storage system that",
    "start": "51500",
    "end": "53750"
  },
  {
    "text": "automatically scales up to 64 terabytes",
    "start": "53750",
    "end": "57890"
  },
  {
    "text": "our aura has thousands of storage nodes",
    "start": "57890",
    "end": "61440"
  },
  {
    "text": "in each region distributed across three",
    "start": "61440",
    "end": "63870"
  },
  {
    "text": "availability zones the storage is log",
    "start": "63870",
    "end": "67650"
  },
  {
    "text": "structured designed with database",
    "start": "67650",
    "end": "70170"
  },
  {
    "text": "interactions in mind these storage nodes",
    "start": "70170",
    "end": "73560"
  },
  {
    "text": "also continuously stream data changes to",
    "start": "73560",
    "end": "76920"
  },
  {
    "text": "Amazon s3 for backup purposes without",
    "start": "76920",
    "end": "80130"
  },
  {
    "text": "impacting database operations your",
    "start": "80130",
    "end": "83520"
  },
  {
    "text": "storage volume is distributed of many",
    "start": "83520",
    "end": "86360"
  },
  {
    "text": "individual storage nodes Aurora has a",
    "start": "86360",
    "end": "90840"
  },
  {
    "text": "decoupled architecture between storage",
    "start": "90840",
    "end": "94020"
  },
  {
    "text": "and compute a cluster includes a storage",
    "start": "94020",
    "end": "97770"
  },
  {
    "text": "volume and up to 16 database instances",
    "start": "97770",
    "end": "101340"
  },
  {
    "text": "you need at least one database instance",
    "start": "101340",
    "end": "104490"
  },
  {
    "text": "in your cluster that is your writer",
    "start": "104490",
    "end": "107450"
  },
  {
    "text": "similar to the master in a traditional",
    "start": "107450",
    "end": "110460"
  },
  {
    "text": "relational database topology the rest",
    "start": "110460",
    "end": "113880"
  },
  {
    "text": "are readers similar to read replicas in",
    "start": "113880",
    "end": "116969"
  },
  {
    "text": "a more traditional database topology the",
    "start": "116969",
    "end": "120600"
  },
  {
    "text": "difference is that all of the database",
    "start": "120600",
    "end": "122969"
  },
  {
    "text": "instances in a cluster share the same",
    "start": "122969",
    "end": "125549"
  },
  {
    "text": "storage volume and don't have to",
    "start": "125549",
    "end": "128340"
  },
  {
    "text": "maintain their own storage and data",
    "start": "128340",
    "end": "131239"
  },
  {
    "text": "eliminating duplication",
    "start": "131239",
    "end": "133230"
  },
  {
    "text": "work readers can only read from the",
    "start": "133230",
    "end": "136920"
  },
  {
    "text": "storage volume and the writer can change",
    "start": "136920",
    "end": "139349"
  },
  {
    "text": "data you access the database by",
    "start": "139349",
    "end": "143549"
  },
  {
    "text": "connecting to the cluster DNS endpoint",
    "start": "143549",
    "end": "146040"
  },
  {
    "text": "that will always point to the writer DB",
    "start": "146040",
    "end": "149879"
  },
  {
    "text": "instance even when it changes this is",
    "start": "149879",
    "end": "153629"
  },
  {
    "text": "what you use when you need to write or",
    "start": "153629",
    "end": "156000"
  },
  {
    "text": "you need strong read after write",
    "start": "156000",
    "end": "158810"
  },
  {
    "text": "consistency for read operations not",
    "start": "158810",
    "end": "163019"
  },
  {
    "text": "tolerate eventual consistency you can",
    "start": "163019",
    "end": "166140"
  },
  {
    "text": "access the rear instances in a load",
    "start": "166140",
    "end": "170220"
  },
  {
    "text": "balanced round-robin way using the",
    "start": "170220",
    "end": "173519"
  },
  {
    "text": "reader endpoint I mentioned before that",
    "start": "173519",
    "end": "178260"
  },
  {
    "text": "the storage volume is distributed it is",
    "start": "178260",
    "end": "180989"
  },
  {
    "text": "actually segmented in ten gigabyte",
    "start": "180989",
    "end": "183569"
  },
  {
    "text": "chunks called protection groups each",
    "start": "183569",
    "end": "186900"
  },
  {
    "text": "such group contains six copies of the",
    "start": "186900",
    "end": "189840"
  },
  {
    "text": "same data called segments - in each of",
    "start": "189840",
    "end": "194069"
  },
  {
    "text": "three availability zones in a given",
    "start": "194069",
    "end": "196739"
  },
  {
    "text": "region on different storage nodes they",
    "start": "196739",
    "end": "201480"
  },
  {
    "text": "are illustrated here by the different",
    "start": "201480",
    "end": "203280"
  },
  {
    "text": "colored boxes writes and reads use a",
    "start": "203280",
    "end": "206790"
  },
  {
    "text": "quorum model that makes the storage",
    "start": "206790",
    "end": "209190"
  },
  {
    "text": "layer inherently highly available",
    "start": "209190",
    "end": "211579"
  },
  {
    "text": "providing high data durability to your",
    "start": "211579",
    "end": "214620"
  },
  {
    "text": "database our Laura can tolerate failures",
    "start": "214620",
    "end": "218489"
  },
  {
    "text": "of an entire availability zone plus an",
    "start": "218489",
    "end": "221819"
  },
  {
    "text": "additional copy of data without losing",
    "start": "221819",
    "end": "225150"
  },
  {
    "text": "consistency of the data this protects",
    "start": "225150",
    "end": "228599"
  },
  {
    "text": "both from unusual circumstances such as",
    "start": "228599",
    "end": "231750"
  },
  {
    "text": "an availability zone disruption and the",
    "start": "231750",
    "end": "235069"
  },
  {
    "text": "normal background noise of individual",
    "start": "235069",
    "end": "237690"
  },
  {
    "text": "hardware failures so the storage system",
    "start": "237690",
    "end": "241470"
  },
  {
    "text": "ensures your data is safe you ensure",
    "start": "241470",
    "end": "245280"
  },
  {
    "text": "that database is highly available to",
    "start": "245280",
    "end": "247859"
  },
  {
    "text": "your applications you need redundancy at",
    "start": "247859",
    "end": "250949"
  },
  {
    "text": "the computer there too if a writer fails",
    "start": "250949",
    "end": "254310"
  },
  {
    "text": "Aurora simply promotes one of the",
    "start": "254310",
    "end": "256650"
  },
  {
    "text": "available readers as the new writer and",
    "start": "256650",
    "end": "259079"
  },
  {
    "text": "adjust the cluster DNS endpoint as well",
    "start": "259079",
    "end": "262680"
  },
  {
    "text": "as the reader endpoint fail database",
    "start": "262680",
    "end": "265680"
  },
  {
    "text": "instance",
    "start": "265680",
    "end": "266880"
  },
  {
    "text": "automatically replaced this failover",
    "start": "266880",
    "end": "270280"
  },
  {
    "text": "process ensures that our or our stores",
    "start": "270280",
    "end": "272800"
  },
  {
    "text": "access to your database quickly with a",
    "start": "272800",
    "end": "275650"
  },
  {
    "text": "minimum amount of downtime while in the",
    "start": "275650",
    "end": "278980"
  },
  {
    "text": "background and works to replace the",
    "start": "278980",
    "end": "280870"
  },
  {
    "text": "failed database instances and brings it",
    "start": "280870",
    "end": "283120"
  },
  {
    "text": "back online as a reader and because the",
    "start": "283120",
    "end": "287320"
  },
  {
    "text": "storage is shared and log structured",
    "start": "287320",
    "end": "289600"
  },
  {
    "text": "crash recovery processes when the new",
    "start": "289600",
    "end": "292960"
  },
  {
    "text": "writer gets promoted are minimized",
    "start": "292960",
    "end": "295000"
  },
  {
    "text": "resulting in a disruption typically",
    "start": "295000",
    "end": "297220"
  },
  {
    "text": "measured in a few tens of seconds so",
    "start": "297220",
    "end": "300310"
  },
  {
    "text": "let's see how our availability and",
    "start": "300310",
    "end": "302920"
  },
  {
    "text": "failover is working practice of using an",
    "start": "302920",
    "end": "305920"
  },
  {
    "text": "hour on my sequel compatible database",
    "start": "305920",
    "end": "308200"
  },
  {
    "text": "cluster but the processes work similarly",
    "start": "308200",
    "end": "311640"
  },
  {
    "text": "in the prosperous sequel compatible",
    "start": "311640",
    "end": "314800"
  },
  {
    "text": "version as well on screen you will see",
    "start": "314800",
    "end": "318970"
  },
  {
    "text": "an hour on my sequel cluster it is shown",
    "start": "318970",
    "end": "322420"
  },
  {
    "text": "here in the AWS management console for",
    "start": "322420",
    "end": "325630"
  },
  {
    "text": "the RDS service it has two database",
    "start": "325630",
    "end": "329800"
  },
  {
    "text": "instances one is a writer the other one",
    "start": "329800",
    "end": "333400"
  },
  {
    "text": "is a reader they are deployed in two",
    "start": "333400",
    "end": "336760"
  },
  {
    "text": "different availabilities on in this case",
    "start": "336760",
    "end": "340540"
  },
  {
    "text": "the B and C zones of the US Ohio region",
    "start": "340540",
    "end": "345390"
  },
  {
    "text": "this is a typical highly available",
    "start": "345390",
    "end": "348660"
  },
  {
    "text": "configuration both database instances",
    "start": "348660",
    "end": "352360"
  },
  {
    "text": "are of the same size DB r5 for extra",
    "start": "352360",
    "end": "357669"
  },
  {
    "text": "large which is a typical instance size",
    "start": "357669",
    "end": "361120"
  },
  {
    "text": "used by our customers neither small nor",
    "start": "361120",
    "end": "364480"
  },
  {
    "text": "too big this cluster has a workload",
    "start": "364480",
    "end": "368380"
  },
  {
    "text": "running on it ensuring a more accurate",
    "start": "368380",
    "end": "371610"
  },
  {
    "text": "demonstration the workload is a TPCC",
    "start": "371610",
    "end": "374800"
  },
  {
    "text": "like transactional benchmark I am",
    "start": "374800",
    "end": "378610"
  },
  {
    "text": "talking over to the performance insights",
    "start": "378610",
    "end": "381280"
  },
  {
    "text": "dashboard for the writer DB instance",
    "start": "381280",
    "end": "384280"
  },
  {
    "text": "where you can see detailed metrics about",
    "start": "384280",
    "end": "387460"
  },
  {
    "text": "the workload running on this database",
    "start": "387460",
    "end": "389500"
  },
  {
    "text": "instance you can see here internal",
    "start": "389500",
    "end": "394120"
  },
  {
    "text": "engine metrics such as query cache hit",
    "start": "394120",
    "end": "397390"
  },
  {
    "text": "rate",
    "start": "397390",
    "end": "399060"
  },
  {
    "text": "number of rows red or active",
    "start": "399060",
    "end": "401160"
  },
  {
    "text": "transactions but also an aggregate view",
    "start": "401160",
    "end": "407340"
  },
  {
    "text": "of the database load and which weights",
    "start": "407340",
    "end": "410250"
  },
  {
    "text": "are more pronounced Buckton of cluster",
    "start": "410250",
    "end": "415020"
  },
  {
    "text": "view let's test a failover I'm starting",
    "start": "415020",
    "end": "418919"
  },
  {
    "text": "with node 1 as my writer and in a",
    "start": "418919",
    "end": "421889"
  },
  {
    "text": "terminal window I'm going to run a",
    "start": "421889",
    "end": "423720"
  },
  {
    "text": "monitoring script this is a simple",
    "start": "423720",
    "end": "426210"
  },
  {
    "text": "script that connects to the cluster",
    "start": "426210",
    "end": "428250"
  },
  {
    "text": "endpoint which maps to node 1 because",
    "start": "428250",
    "end": "430889"
  },
  {
    "text": "that's the writer and the script simply",
    "start": "430889",
    "end": "433710"
  },
  {
    "text": "just verifies and validates what node is",
    "start": "433710",
    "end": "436290"
  },
  {
    "text": "the writer as you can see in the example",
    "start": "436290",
    "end": "441290"
  },
  {
    "text": "and I'm going to switch back to the",
    "start": "442130",
    "end": "444840"
  },
  {
    "text": "console and trigger a failover selecting",
    "start": "444840",
    "end": "449010"
  },
  {
    "text": "node 1 going to actions failover and",
    "start": "449010",
    "end": "453500"
  },
  {
    "text": "confirming the failover now I'm going to",
    "start": "453500",
    "end": "457440"
  },
  {
    "text": "switch back into my terminal window",
    "start": "457440",
    "end": "459510"
  },
  {
    "text": "where the monitoring script is still",
    "start": "459510",
    "end": "462150"
  },
  {
    "text": "running and I'm going to wait until the",
    "start": "462150",
    "end": "466950"
  },
  {
    "text": "hour or a control plane executes the",
    "start": "466950",
    "end": "469710"
  },
  {
    "text": "failover action now that script can no",
    "start": "469710",
    "end": "475860"
  },
  {
    "text": "longer connect to the database because",
    "start": "475860",
    "end": "477630"
  },
  {
    "text": "the failover is progressing which is",
    "start": "477630",
    "end": "482130"
  },
  {
    "text": "expected and you know it is able to",
    "start": "482130",
    "end": "485910"
  },
  {
    "text": "reconnect back however we see some stale",
    "start": "485910",
    "end": "491010"
  },
  {
    "text": "DNS issues for a couple of seconds as",
    "start": "491010",
    "end": "494130"
  },
  {
    "text": "well so now finally the failover",
    "start": "494130",
    "end": "496440"
  },
  {
    "text": "completes you'll notice that node 2 is",
    "start": "496440",
    "end": "500130"
  },
  {
    "text": "now there writer and I've stopped the",
    "start": "500130",
    "end": "502650"
  },
  {
    "text": "script just so we can look at the data",
    "start": "502650",
    "end": "504300"
  },
  {
    "text": "and you'll notice that it took about",
    "start": "504300",
    "end": "505979"
  },
  {
    "text": "nine seconds for the actual failover to",
    "start": "505979",
    "end": "508620"
  },
  {
    "text": "complete when the database was not",
    "start": "508620",
    "end": "510270"
  },
  {
    "text": "available",
    "start": "510270",
    "end": "511410"
  },
  {
    "text": "but then the skirt was able to connect",
    "start": "511410",
    "end": "513630"
  },
  {
    "text": "again however a few seconds later I was",
    "start": "513630",
    "end": "516570"
  },
  {
    "text": "getting some stale DNS issues now",
    "start": "516570",
    "end": "518880"
  },
  {
    "text": "because the cluster endpoint is a DNS",
    "start": "518880",
    "end": "520830"
  },
  {
    "text": "endpoint maps to an IP address and the",
    "start": "520830",
    "end": "522839"
  },
  {
    "text": "DNS system is distributed this is normal",
    "start": "522839",
    "end": "526200"
  },
  {
    "text": "and can happen so the end-to-end",
    "start": "526200",
    "end": "528990"
  },
  {
    "text": "failover took about to any second",
    "start": "528990",
    "end": "533070"
  },
  {
    "text": "with this method now this is pretty",
    "start": "533070",
    "end": "536279"
  },
  {
    "text": "quick",
    "start": "536279",
    "end": "536880"
  },
  {
    "text": "for most workloads let's switch back to",
    "start": "536880",
    "end": "540089"
  },
  {
    "text": "the console and verify that the failover",
    "start": "540089",
    "end": "543990"
  },
  {
    "text": "is reflected in the console and here it",
    "start": "543990",
    "end": "546779"
  },
  {
    "text": "is no.2 is now the writer so this was a",
    "start": "546779",
    "end": "550800"
  },
  {
    "text": "simple failover just relying on DNS",
    "start": "550800",
    "end": "554509"
  },
  {
    "text": "let's see if we can do better this time",
    "start": "554509",
    "end": "558079"
  },
  {
    "text": "again note one is my writer in the",
    "start": "558079",
    "end": "561360"
  },
  {
    "text": "cluster and I'm going to switch the",
    "start": "561360",
    "end": "563790"
  },
  {
    "text": "terminal window where I'm running a",
    "start": "563790",
    "end": "565470"
  },
  {
    "text": "monitoring script now this time the",
    "start": "565470",
    "end": "567600"
  },
  {
    "text": "monitoring script is a little bit more",
    "start": "567600",
    "end": "569670"
  },
  {
    "text": "intelligent",
    "start": "569670",
    "end": "570660"
  },
  {
    "text": "it has awareness of the topology of the",
    "start": "570660",
    "end": "573480"
  },
  {
    "text": "cluster so the when it connects to the",
    "start": "573480",
    "end": "575610"
  },
  {
    "text": "database it can verify who the writer",
    "start": "575610",
    "end": "578220"
  },
  {
    "text": "node is in the cluster and reconnect if",
    "start": "578220",
    "end": "582569"
  },
  {
    "text": "it's connected to something that's not",
    "start": "582569",
    "end": "584430"
  },
  {
    "text": "the writer so I'm going to get the",
    "start": "584430",
    "end": "587519"
  },
  {
    "text": "script running and it works the same way",
    "start": "587519",
    "end": "590040"
  },
  {
    "text": "as the last one we can see node 1 is the",
    "start": "590040",
    "end": "592050"
  },
  {
    "text": "writer again and I'm going to switch the",
    "start": "592050",
    "end": "596519"
  },
  {
    "text": "console again and trigger a failover I'm",
    "start": "596519",
    "end": "601440"
  },
  {
    "text": "going to confirm the failover action and",
    "start": "601440",
    "end": "605510"
  },
  {
    "text": "switch back to the console and that",
    "start": "605510",
    "end": "610319"
  },
  {
    "text": "monitoring script is still running and",
    "start": "610319",
    "end": "613199"
  },
  {
    "text": "now the database is unavailable the",
    "start": "613199",
    "end": "617220"
  },
  {
    "text": "script cannot connect to the database",
    "start": "617220",
    "end": "620990"
  },
  {
    "text": "and now it's a",
    "start": "623389",
    "end": "626350"
  },
  {
    "text": "to connect again and a failover",
    "start": "626350",
    "end": "629260"
  },
  {
    "text": "completes I'm going to go ahead and stop",
    "start": "629260",
    "end": "633490"
  },
  {
    "text": "the script from running so we can see",
    "start": "633490",
    "end": "635560"
  },
  {
    "text": "what happened is tongue around as you",
    "start": "635560",
    "end": "638440"
  },
  {
    "text": "can see it took a lot less time for the",
    "start": "638440",
    "end": "640930"
  },
  {
    "text": "failover end to end from the perspective",
    "start": "640930",
    "end": "643660"
  },
  {
    "text": "of that client script it only took about",
    "start": "643660",
    "end": "646210"
  },
  {
    "text": "13 seconds when the database was not",
    "start": "646210",
    "end": "648940"
  },
  {
    "text": "available but then when it connected for",
    "start": "648940",
    "end": "652030"
  },
  {
    "text": "the first time it connected actually to",
    "start": "652030",
    "end": "654580"
  },
  {
    "text": "a reader node and detected that detected",
    "start": "654580",
    "end": "658480"
  },
  {
    "text": "that the server role was reader",
    "start": "658480",
    "end": "660270"
  },
  {
    "text": "discovered who the writer is in the",
    "start": "660270",
    "end": "662620"
  },
  {
    "text": "cluster by querying the topology of the",
    "start": "662620",
    "end": "664840"
  },
  {
    "text": "cluster and reconnected immediately to",
    "start": "664840",
    "end": "669280"
  },
  {
    "text": "the correct endpoint this time the",
    "start": "669280",
    "end": "672340"
  },
  {
    "text": "writer endpoint and the failover",
    "start": "672340",
    "end": "675340"
  },
  {
    "text": "end-to-end took only 13 seconds this",
    "start": "675340",
    "end": "678340"
  },
  {
    "text": "timer so you can see how the failover",
    "start": "678340",
    "end": "681160"
  },
  {
    "text": "can be improved by simple intelligence",
    "start": "681160",
    "end": "683980"
  },
  {
    "text": "on the client-side let's verify in the",
    "start": "683980",
    "end": "687580"
  },
  {
    "text": "console that the writer is now node",
    "start": "687580",
    "end": "690700"
  },
  {
    "text": "number 2 and that is correctly reflected",
    "start": "690700",
    "end": "695380"
  },
  {
    "text": "in the console as well let's see if we",
    "start": "695380",
    "end": "699610"
  },
  {
    "text": "can improve the client failover",
    "start": "699610",
    "end": "701290"
  },
  {
    "text": "experience even more and again node",
    "start": "701290",
    "end": "705160"
  },
  {
    "text": "number 1 is the writer in my cluster I",
    "start": "705160",
    "end": "708550"
  },
  {
    "text": "have configured an RDS proxy in front of",
    "start": "708550",
    "end": "712480"
  },
  {
    "text": "my database cluster the proxy has its",
    "start": "712480",
    "end": "717100"
  },
  {
    "text": "own connection endpoint and it sits in",
    "start": "717100",
    "end": "720400"
  },
  {
    "text": "front of the writer instance of the",
    "start": "720400",
    "end": "723070"
  },
  {
    "text": "cluster effectively mitigating some of",
    "start": "723070",
    "end": "726010"
  },
  {
    "text": "the failover downtime by holding",
    "start": "726010",
    "end": "728410"
  },
  {
    "text": "connections open at the client side you",
    "start": "728410",
    "end": "732310"
  },
  {
    "text": "can see that I have configured the",
    "start": "732310",
    "end": "735160"
  },
  {
    "text": "cluster as a target group for the proxy",
    "start": "735160",
    "end": "739260"
  },
  {
    "text": "supply proxy is an intermediary between",
    "start": "739260",
    "end": "742080"
  },
  {
    "text": "the client and the database so let's see",
    "start": "742080",
    "end": "747190"
  },
  {
    "text": "how this works let's switch to the",
    "start": "747190",
    "end": "749350"
  },
  {
    "text": "terminal screen again and start our",
    "start": "749350",
    "end": "752530"
  },
  {
    "text": "simple failover monitoring script again",
    "start": "752530",
    "end": "756100"
  },
  {
    "text": "however this time we're going to use the",
    "start": "756100",
    "end": "759459"
  },
  {
    "text": "proxy endpoint to connect and as",
    "start": "759459",
    "end": "762819"
  },
  {
    "text": "expected the script connects to node",
    "start": "762819",
    "end": "765850"
  },
  {
    "text": "number 1 which is the writer of our",
    "start": "765850",
    "end": "767949"
  },
  {
    "text": "cluster because the proxy effectively",
    "start": "767949",
    "end": "771089"
  },
  {
    "text": "intermediates connections to the writer",
    "start": "771089",
    "end": "773610"
  },
  {
    "text": "in the console",
    "start": "773610",
    "end": "775660"
  },
  {
    "text": "I will initiate another failover and",
    "start": "775660",
    "end": "781110"
  },
  {
    "text": "confirm and going back to the terminal",
    "start": "781110",
    "end": "786730"
  },
  {
    "text": "screen we can see that our monitoring",
    "start": "786730",
    "end": "789399"
  },
  {
    "text": "script continues to run as before it",
    "start": "789399",
    "end": "793420"
  },
  {
    "text": "will take a few seconds to execute a",
    "start": "793420",
    "end": "796269"
  },
  {
    "text": "failover",
    "start": "796269",
    "end": "798720"
  },
  {
    "text": "you",
    "start": "804760",
    "end": "806820"
  },
  {
    "text": "so did you catch that neither did I the",
    "start": "810829",
    "end": "814680"
  },
  {
    "text": "first time let's look a little bit",
    "start": "814680",
    "end": "817230"
  },
  {
    "text": "closer by stopping the script around",
    "start": "817230",
    "end": "820699"
  },
  {
    "text": "second number 33 the script was still",
    "start": "820699",
    "end": "824370"
  },
  {
    "text": "connecting to node number 1 which was",
    "start": "824370",
    "end": "826800"
  },
  {
    "text": "the writer but then immediately after",
    "start": "826800",
    "end": "829860"
  },
  {
    "text": "that it started connecting to numb node",
    "start": "829860",
    "end": "832260"
  },
  {
    "text": "number 2 now the script did not get",
    "start": "832260",
    "end": "836430"
  },
  {
    "text": "disconnected because the proxy held the",
    "start": "836430",
    "end": "839070"
  },
  {
    "text": "connection open until the failover",
    "start": "839070",
    "end": "841560"
  },
  {
    "text": "completed which took about 6 seconds and",
    "start": "841560",
    "end": "846149"
  },
  {
    "text": "in the meantime what the client script",
    "start": "846149",
    "end": "849149"
  },
  {
    "text": "observed was just an increase in the",
    "start": "849149",
    "end": "851910"
  },
  {
    "text": "response latency from when it requested",
    "start": "851910",
    "end": "854790"
  },
  {
    "text": "data from the writer and when the writer",
    "start": "854790",
    "end": "858750"
  },
  {
    "text": "provided the data after the failover so",
    "start": "858750",
    "end": "861990"
  },
  {
    "text": "the failover was a lot more seamless",
    "start": "861990",
    "end": "864750"
  },
  {
    "text": "from the application perspective using",
    "start": "864750",
    "end": "866820"
  },
  {
    "text": "the proxy as an intermediary for the",
    "start": "866820",
    "end": "869519"
  },
  {
    "text": "connection and let's verify that the",
    "start": "869519",
    "end": "872820"
  },
  {
    "text": "console reflects the new writer as well",
    "start": "872820",
    "end": "877040"
  },
  {
    "text": "which it does so you can see how our",
    "start": "877040",
    "end": "880380"
  },
  {
    "text": "services can be used to improve on fail",
    "start": "880380",
    "end": "883920"
  },
  {
    "text": "overs thank you for watching we are",
    "start": "883920",
    "end": "887550"
  },
  {
    "text": "always here to help and you can reach me",
    "start": "887550",
    "end": "890010"
  },
  {
    "text": "for questions at the email address on",
    "start": "890010",
    "end": "892050"
  },
  {
    "text": "the screen",
    "start": "892050",
    "end": "892880"
  },
  {
    "text": "happy cloud computing from all of us",
    "start": "892880",
    "end": "895529"
  },
  {
    "text": "here at AWS",
    "start": "895529",
    "end": "898519"
  }
]