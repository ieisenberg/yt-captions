[
  {
    "start": "0",
    "end": "210000"
  },
  {
    "text": "hi my name is danila and Technical Evangelist in Amazon Web Services thank you for being here and the idea is as",
    "start": "0",
    "end": "7500"
  },
  {
    "text": "soon as we see the slides that I didn't connect so that could be one reason is",
    "start": "7500",
    "end": "17609"
  },
  {
    "text": "to talk about what is happening at the edge what is happening with edge",
    "start": "17609",
    "end": "22680"
  },
  {
    "text": "computing so normally architectures were traditionally like happening only in a",
    "start": "22680",
    "end": "29250"
  },
  {
    "text": "few places now what I am seeing talking with custom is that the architectures that the architecture are",
    "start": "29250",
    "end": "34770"
  },
  {
    "text": "changing are changing over time and are getting more distributed is this something that we can use that our",
    "start": "34770",
    "end": "41010"
  },
  {
    "text": "advantage to create something different something more compelling for our customers so if everything would be",
    "start": "41010",
    "end": "47270"
  },
  {
    "text": "ideal we would just use a client so if I am a developer I create a beautiful game",
    "start": "47270",
    "end": "53460"
  },
  {
    "text": "a beautiful business application running on a client and then I use it using maybe a desktop computer or a tablet or",
    "start": "53460",
    "end": "60300"
  },
  {
    "text": "a smart phone but there are some things that we can do locally on a client so that's why we normally have a server a",
    "start": "60300",
    "end": "67290"
  },
  {
    "text": "back-end implementation and there are a few reasons why we need that those are probably the top reasons why we need a",
    "start": "67290",
    "end": "74360"
  },
  {
    "text": "bikini implementation because we need to share data across multiple users and so",
    "start": "74360",
    "end": "80880"
  },
  {
    "text": "we need maybe something like a data base think for example of a game when you lots of games happen mostly on the",
    "start": "80880",
    "end": "88080"
  },
  {
    "text": "client but then you share your your score so that you can create leaderboard",
    "start": "88080",
    "end": "93150"
  },
  {
    "text": "and compare what you do with your friends or a social network application such as Facebook or Twitter",
    "start": "93150",
    "end": "99600"
  },
  {
    "text": "in that case most of the logic is in the backend in sharing the information across users and the client is a",
    "start": "99600",
    "end": "106079"
  },
  {
    "text": "relatively simple application that is just showing the information of what your friends are posting the second",
    "start": "106079",
    "end": "113100"
  },
  {
    "text": "reason is that you can trust the client if you write a bank application you can't have a button add money on the",
    "start": "113100",
    "end": "119340"
  },
  {
    "text": "client and that's just adding morning to your account you need someone in the backend to verify that this money is",
    "start": "119340",
    "end": "124409"
  },
  {
    "text": "actually moving from one account to the other and the third reason is that you need more power than what is available",
    "start": "124409",
    "end": "130590"
  },
  {
    "text": "on the client so if you're using a desktop or even more if you're using smartphone you maybe need more computing",
    "start": "130590",
    "end": "135840"
  },
  {
    "text": "power more storage capabilities and that's why you need a back-end server that can give you this more power that",
    "start": "135840",
    "end": "143130"
  },
  {
    "text": "you need but my suggestion is always try to put all the possible business logic",
    "start": "143130",
    "end": "148380"
  },
  {
    "text": "that can run on the client on the client itself so even if you're creating a web application leverage on the fact that",
    "start": "148380",
    "end": "154890"
  },
  {
    "text": "all browser can execute locally JavaScript code and think of the browser as a sort of local device that can",
    "start": "154890",
    "end": "162540"
  },
  {
    "text": "execute most of the business logic and only if you need probably one of those three things then go into a back-end API",
    "start": "162540",
    "end": "169440"
  },
  {
    "text": "in an collab became implementation and that's because when you go in the backend you are introducing latency and",
    "start": "169440",
    "end": "176640"
  },
  {
    "text": "you have to be careful on how you're using the the bandwidth you have depending on the application if it's a",
    "start": "176640",
    "end": "181830"
  },
  {
    "text": "streaming application maybe the bandwidth can be the issue if it's a real time application latency can introduce some lag that your users",
    "start": "181830",
    "end": "188640"
  },
  {
    "text": "cannot can notice and to to reduce latency what you can do it you can",
    "start": "188640",
    "end": "194760"
  },
  {
    "text": "choose to put your back-end as close as possible to your users this is the map",
    "start": "194760",
    "end": "201750"
  },
  {
    "text": "of the AWS geographic regions we have 44 availability zones that's clusters of",
    "start": "201750",
    "end": "207600"
  },
  {
    "text": "data centers grouped in 16 geographic regions and the the green singing",
    "start": "207600",
    "end": "213810"
  },
  {
    "start": "210000",
    "end": "210000"
  },
  {
    "text": "science that you see those are the six isms that are coming with another 17 clusters of data centers in the future",
    "start": "213810",
    "end": "222690"
  },
  {
    "text": "so for example you have a region here in London and you can choose your bikini and in London if if your users are in",
    "start": "222690",
    "end": "228900"
  },
  {
    "text": "London that's reducing the latency and improving the experience of your users but if your users are global and are not",
    "start": "228900",
    "end": "235260"
  },
  {
    "text": "all close to the same data center then you can introduce a content delivery network a content delivery network is a",
    "start": "235260",
    "end": "242160"
  },
  {
    "text": "way to distribute your content to your user through some edge locations for",
    "start": "242160",
    "end": "248520"
  },
  {
    "start": "247000",
    "end": "247000"
  },
  {
    "text": "example with with a WS we have Amazon CloudFront with a metro council we have a network of edge location and Regional",
    "start": "248520",
    "end": "255870"
  },
  {
    "text": "Education and this edge location can cache the cache of all content so that when a user is coming from wherever in",
    "start": "255870",
    "end": "262590"
  },
  {
    "text": "the in the world they might find that a cached version of the picture of the",
    "start": "262590",
    "end": "267819"
  },
  {
    "text": "content that they are asking from the client close to where they are so at a much lower latency and we can also use",
    "start": "267819",
    "end": "275500"
  },
  {
    "text": "classroom to optimize no no cacheable content such as purely dynamic content",
    "start": "275500",
    "end": "280750"
  },
  {
    "text": "that's because the TCP protocol is usually having lots of round trips when a user first connects so if you first",
    "start": "280750",
    "end": "287919"
  },
  {
    "text": "connect to an edge location close to you the experience of the user will be much better than going straight to a",
    "start": "287919",
    "end": "293250"
  },
  {
    "text": "centralized location so you can use a CDN to optimize both a dynamic and",
    "start": "293250",
    "end": "298479"
  },
  {
    "text": "Static content and we're starting to improve on our situation so now we have",
    "start": "298479",
    "end": "303550"
  },
  {
    "text": "our client we can catch some content close to the user we can optimize the network but what I'm seeing is that lots",
    "start": "303550",
    "end": "311139"
  },
  {
    "text": "of application now are getting outside of the data center and into the real world so you want to connect your",
    "start": "311139",
    "end": "317139"
  },
  {
    "text": "back-end application not just with the final user but with a network of devices",
    "start": "317139",
    "end": "322539"
  },
  {
    "text": "that can be sensors that collect information from the real world can be a humidity sensor a camera that is",
    "start": "322539",
    "end": "328960"
  },
  {
    "text": "collecting images from a specific location or actuators actuators are",
    "start": "328960",
    "end": "334090"
  },
  {
    "text": "those devices that change the state of the world so for example a smart window that can be open or closed at your",
    "start": "334090",
    "end": "341500"
  },
  {
    "text": "command and now we are we can use AWS IOT to connect those devices if you were",
    "start": "341500",
    "end": "348580"
  },
  {
    "text": "here in the previous session you probably had already a deep dive so I just recap a little bit of how it works",
    "start": "348580",
    "end": "354669"
  },
  {
    "text": "so you can connect your devices using our SDK we manage the authentication authorization and the device gateway can",
    "start": "354669",
    "end": "361599"
  },
  {
    "text": "help you send these messages using the NQ tt protocol this is like a publish and subscribe protocol with a concept of",
    "start": "361599",
    "end": "369370"
  },
  {
    "text": "hierarchical topics well you can publish and if you are interested you can subscribe so for example if I'm",
    "start": "369370",
    "end": "375219"
  },
  {
    "text": "interested if it's raining in some place in the world if a device is there it is publishing this information I can",
    "start": "375219",
    "end": "381550"
  },
  {
    "text": "subscribe and receive the notification if it's raining in Brazil for example and you can use rules to filter these",
    "start": "381550",
    "end": "389080"
  },
  {
    "text": "messages and pass this information to traditional AWS services or you can use",
    "start": "389080",
    "end": "394360"
  },
  {
    "text": "device shadows to keep a state of the device in the cloud so for example going back to the to the smart window that you",
    "start": "394360",
    "end": "401320"
  },
  {
    "text": "open and close these windows as a state it can be open or closed and you can",
    "start": "401320",
    "end": "406780"
  },
  {
    "text": "keep the state in the cloud the advantage is that if the remote window loose network connectivity you still",
    "start": "406780",
    "end": "412600"
  },
  {
    "text": "will know what was the last reported state and you can from your application try to change the state so I want to",
    "start": "412600",
    "end": "419380"
  },
  {
    "text": "open this window and as soon as the window will be connected back to the today Internet if we receive the command",
    "start": "419380",
    "end": "425770"
  },
  {
    "text": "to change its state and get open or closed as you want so this is a whi ut",
    "start": "425770",
    "end": "431230"
  },
  {
    "text": "are very ten thousand meters overview of a SS IOT and what you see is that we are",
    "start": "431230",
    "end": "438190"
  },
  {
    "text": "trying to manage remote with the state of the device we can manage the connectivity of the devices that",
    "start": "438190",
    "end": "443770"
  },
  {
    "text": "normally are coming from a less reliable network because if you have ten thousand cells connected through a network of",
    "start": "443770",
    "end": "450970"
  },
  {
    "text": "buildings is not as much as reliable as anything that is running inside a data",
    "start": "450970",
    "end": "456040"
  },
  {
    "text": "center and you have to manage still a few things so you still will have",
    "start": "456040",
    "end": "461140"
  },
  {
    "text": "latency you still will have connectivity issues you will you will have to manage",
    "start": "461140",
    "end": "467020"
  },
  {
    "text": "the provisioning of what you want to run on those devices the software provisioning and maybe you want to group",
    "start": "467020",
    "end": "472450"
  },
  {
    "text": "these devices together because if you have 100 sensors inside a single building maybe it's nice to have a",
    "start": "472450",
    "end": "478720"
  },
  {
    "text": "single connectivity because they will share the same network so that's why you can introduce a gateway the Gateway can",
    "start": "478720",
    "end": "484960"
  },
  {
    "text": "logically create a manager a group of devices of sensors and actuators and simplify the connectivity with the",
    "start": "484960",
    "end": "491590"
  },
  {
    "text": "backend and eve's were AWS Greengrass that is a newer component of our iot",
    "start": "491590",
    "end": "496660"
  },
  {
    "start": "492000",
    "end": "492000"
  },
  {
    "text": "portfolio enters and can help so with AWS Greengrass you can create a",
    "start": "496660",
    "end": "502090"
  },
  {
    "text": "Greengrass group so a group of devices and a single Greengrass core the core",
    "start": "502090",
    "end": "507340"
  },
  {
    "text": "node is the gateway that can connect those varieties to the cloud the",
    "start": "507340",
    "end": "513460"
  },
  {
    "text": "advantage here is that all the connectivity is happening within the group can survive even if the core loses",
    "start": "513460",
    "end": "519550"
  },
  {
    "text": "the connectivity to the Internet into the cloud for example if you have a smart window here and a sensor that is",
    "start": "519550",
    "end": "526390"
  },
  {
    "text": "telling you if it's raining or not close to this window if the sensor is",
    "start": "526390",
    "end": "532270"
  },
  {
    "text": "collecting the information of rain this can be intercepted by the core that can run some logic understand that with",
    "start": "532270",
    "end": "538390"
  },
  {
    "text": "this level of rain it's better to close the window and send the message back to the windows to close itself if and this",
    "start": "538390",
    "end": "545019"
  },
  {
    "text": "will work even if there is no NIT internet connectivity because it runs within the group and it runs at very low",
    "start": "545019",
    "end": "551950"
  },
  {
    "text": "latency because you don't need to go back to the internet and back to take this smart decision you can just run",
    "start": "551950",
    "end": "559120"
  },
  {
    "text": "everything locally so you can be very reactive any information that you contacting locally you can process this",
    "start": "559120",
    "end": "564490"
  },
  {
    "text": "information you can use of course more advanced algorithm than just saying it's raining or not you can for example use",
    "start": "564490",
    "end": "571140"
  },
  {
    "text": "weather forecast or any advanced algorithms such as machine learning to",
    "start": "571140",
    "end": "576220"
  },
  {
    "text": "take a decision on based on the data you're collecting and act immediately on this change in the state of the world",
    "start": "576220",
    "end": "582730"
  },
  {
    "text": "where this grigoris group is deployed so the main advantages of green grass is",
    "start": "582730",
    "end": "588279"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "that you can have local messaging so door messages that you can exchange between cell source actuators can be",
    "start": "588279",
    "end": "595540"
  },
  {
    "text": "exchanged locally without reaching the internet so they they survive any disconnect Eva T from the from the",
    "start": "595540",
    "end": "602079"
  },
  {
    "text": "network then you can keep locally the state of the device the same thing as",
    "start": "602079",
    "end": "607500"
  },
  {
    "text": "you we have only SS IOT so the state of a window it's open or closed will be",
    "start": "607500",
    "end": "613570"
  },
  {
    "text": "managed locally by the green grass group so you can change and update the state locally and we also have local support",
    "start": "613570",
    "end": "620350"
  },
  {
    "text": "for a SS lambda SS lambda is as a service that allows you to upload a",
    "start": "620350",
    "end": "625390"
  },
  {
    "text": "function and run this function code when this is triggered by some events in this",
    "start": "625390",
    "end": "631930"
  },
  {
    "text": "case a message can trigger the ROM the function that can process the data and take a decision and you can install",
    "start": "631930",
    "end": "637690"
  },
  {
    "text": "Greengrass as a software on your own device that's what I did with this Raspberry Pi that probably you can see",
    "start": "637690",
    "end": "643839"
  },
  {
    "text": "because it's almost hidden between behind my computer or we work with a",
    "start": "643839",
    "end": "649240"
  },
  {
    "text": "network of partners for more industrialized products that embed green grass and now we have an architecture",
    "start": "649240",
    "end": "656320"
  },
  {
    "text": "that starts to be globally deployed we have the client that through a content delivery network can reach the back end",
    "start": "656320",
    "end": "662170"
  },
  {
    "text": "that can collect and process information in a network of devices deployed globally",
    "start": "662170",
    "end": "667430"
  },
  {
    "text": "and here we are trying to manage all those issues that you can have when you start to deploy a distributed",
    "start": "667430",
    "end": "674240"
  },
  {
    "text": "architecture so optimizing the latency the bandwidth manage connectivity and these connections change manage the",
    "start": "674240",
    "end": "681080"
  },
  {
    "text": "state of the devices also software provisioning it's not a centralized",
    "start": "681080",
    "end": "686480"
  },
  {
    "text": "deployment here you have maybe hundreds of devices connected through different networks and you want to keep all them",
    "start": "686480",
    "end": "692300"
  },
  {
    "text": "in sync with the software you want to run on those devices and the idea is",
    "start": "692300",
    "end": "697400"
  },
  {
    "text": "that you need a way to distribute and run custom logic on all of this section",
    "start": "697400",
    "end": "702830"
  },
  {
    "text": "of your architecture it is not a single that can anymore but starts to be distributed and that's where you can use",
    "start": "702830",
    "end": "708380"
  },
  {
    "text": "AWS lambda because the SS lambda can run in the backend and that's what we normally do so if you saw a server",
    "start": "708380",
    "end": "715640"
  },
  {
    "text": "section section here at the loved you you already know how that works but it can be used to build the backend of a",
    "start": "715640",
    "end": "722300"
  },
  {
    "text": "mobile application for example or to process data but you can use lambda also on the on the devices using a SS green",
    "start": "722300",
    "end": "729530"
  },
  {
    "text": "grass and also on the content mill every network using the integration that we have with cloud front so let's focus a",
    "start": "729530",
    "end": "737540"
  },
  {
    "text": "little bit on the gateway so here we want to run lambda function so your code not inside our own data center so now",
    "start": "737540",
    "end": "745130"
  },
  {
    "text": "Negreanu are regions but on a device that is connected and managed to AWS",
    "start": "745130",
    "end": "750440"
  },
  {
    "text": "Greengrass so that's the syntax of the functions so we support multiple languages here and doing this example",
    "start": "750440",
    "end": "758480"
  },
  {
    "start": "751000",
    "end": "751000"
  },
  {
    "text": "with Python but you can use not GS or Java and you can see here that there is",
    "start": "758480",
    "end": "763670"
  },
  {
    "text": "a function and this is an example of long-living function something that you",
    "start": "763670",
    "end": "769790"
  },
  {
    "text": "can't have in certain in the traditional lambda function it's a function that starts on the device and it's always",
    "start": "769790",
    "end": "774860"
  },
  {
    "text": "running and can for example collect data process the data and take action this is a very basic function that is always",
    "start": "774860",
    "end": "782290"
  },
  {
    "text": "calling every five seconds this for this loop here and it's publishing a hello",
    "start": "782290",
    "end": "787370"
  },
  {
    "text": "world sent from Greengrass core running on this platform in this case a linux",
    "start": "787370",
    "end": "792830"
  },
  {
    "text": "raspberry pi platform of course you can put any logic here and have some your",
    "start": "792830",
    "end": "798110"
  },
  {
    "text": "logic running or on a device is a slightly different version of the function this is not long living but",
    "start": "798110",
    "end": "805049"
  },
  {
    "text": "it's triggered by an event for example a message that you receive and then a unit that you have an on-demand function in",
    "start": "805049",
    "end": "811289"
  },
  {
    "text": "this case you have this function handler that when you receive an event for example a message it's triggered and",
    "start": "811289",
    "end": "817619"
  },
  {
    "text": "will basically create an eco message we're sending back a hello world again",
    "start": "817619",
    "end": "823679"
  },
  {
    "text": "to tell you I receive this message I process this information and this is the output so let's see how this works on",
    "start": "823679",
    "end": "830999"
  },
  {
    "text": "this device so if you're familiar with a",
    "start": "830999",
    "end": "836369"
  },
  {
    "text": "de brest lambda you may be already so the lambda console and this is my control in Frankfurt so I I chose",
    "start": "836369",
    "end": "844109"
  },
  {
    "text": "Frankfurt for this deployment and I have those two functions that I just show to you so one function is long run living",
    "start": "844109",
    "end": "850919"
  },
  {
    "text": "it's always every five seconds saying hello world hello world and the second one is interactive is waiting for our",
    "start": "850919",
    "end": "858269"
  },
  {
    "text": "message to arrive and answering with an eco to this message that is received this is the AWS IOT console and here we",
    "start": "858269",
    "end": "866909"
  },
  {
    "text": "have the section for green grass and here we have the green grass group too so I created a group of devices for now",
    "start": "866909",
    "end": "874139"
  },
  {
    "text": "it's along the device is the only one in the group I can click and see the device and here I have the lambda function that",
    "start": "874139",
    "end": "881819"
  },
  {
    "text": "I deploy it on the device and I also have the subscription subscription is",
    "start": "881819",
    "end": "887009"
  },
  {
    "text": "the way you can breach what is happening on the cloud and what is happening within the green grass group in this",
    "start": "887009",
    "end": "894359"
  },
  {
    "text": "case I have a first subscription that is saying that the long-living function the function is called hello world is",
    "start": "894359",
    "end": "901249"
  },
  {
    "text": "allowed to publish information on the on the cloud on the internet only on this",
    "start": "901249",
    "end": "906809"
  },
  {
    "text": "topic you remember we're using MQTT so you have a hierarchy of topics in this",
    "start": "906809",
    "end": "911909"
  },
  {
    "text": "case as an example I have hello and ward but you can create your own hierarchy it can be for example your application your",
    "start": "911909",
    "end": "918359"
  },
  {
    "text": "customers and maybe if you're doing a smart home application you can have all the different rooms of your customer and",
    "start": "918359",
    "end": "925379"
  },
  {
    "text": "inside the device that your customer have in those rooms the second example",
    "start": "925379",
    "end": "930749"
  },
  {
    "text": "is the interactive function here we have two subscription because the function is capable of",
    "start": "930749",
    "end": "936090"
  },
  {
    "text": "publishing information to hello world so this is the second line of the",
    "start": "936090",
    "end": "941130"
  },
  {
    "text": "certification subscription and the third line is telling that also the cloud can reach this function and to trigger this",
    "start": "941130",
    "end": "948029"
  },
  {
    "text": "function using a different topic hello grid graph so if I publish anything here",
    "start": "948029",
    "end": "953610"
  },
  {
    "text": "from the edibles IOT cloud service I'm reaching this function that can process",
    "start": "953610",
    "end": "959100"
  },
  {
    "text": "this information so to are from the green grass group to the cloud and one",
    "start": "959100",
    "end": "965279"
  },
  {
    "text": "is from the cloud to a green grass device this is the way you can bridge the two words so now if I",
    "start": "965279",
    "end": "973380"
  },
  {
    "text": "go back here and I open the test window the test window is basically an MQTT I'm",
    "start": "973380",
    "end": "980760"
  },
  {
    "text": "activity emulator for for for the browser so you don't need to use that normally but I can subscribe to hello /",
    "start": "980760",
    "end": "988770"
  },
  {
    "text": "word it's where I will receive all the information and currently I'm not",
    "start": "988770",
    "end": "994890"
  },
  {
    "text": "receiving anything so I can go on the raspberry pi so this is my raspberry pi",
    "start": "994890",
    "end": "1000290"
  },
  {
    "text": "let's zoom a little bit and normally you",
    "start": "1000290",
    "end": "1005540"
  },
  {
    "text": "will have the green grass software running automatically when the device boots but since this is a demo I can",
    "start": "1005540",
    "end": "1012620"
  },
  {
    "text": "just start the software when I want so I start the green grass daemon on the",
    "start": "1012620",
    "end": "1017630"
  },
  {
    "text": "device it's now starting and if I go back on the on the here we start to",
    "start": "1017630",
    "end": "1025459"
  },
  {
    "text": "receive the hello world from the function that is long-living so every 5 seconds is saying hello world sent from",
    "start": "1025459",
    "end": "1031459"
  },
  {
    "text": "this Linux device this is running on an armed with an ARM processor the the the",
    "start": "1031459",
    "end": "1036860"
  },
  {
    "text": "one coming with the Raspberry Pi and I can also publish information and trigger",
    "start": "1036860",
    "end": "1042438"
  },
  {
    "text": "the other function so if I write green grass here I can publish for example",
    "start": "1042439",
    "end": "1048410"
  },
  {
    "text": "hello from AWS loft so this is the",
    "start": "1048410",
    "end": "1053630"
  },
  {
    "text": "message I'm sending normally it's better to use a standard syntax such as a JSON so that it's easier to manage the",
    "start": "1053630",
    "end": "1060200"
  },
  {
    "text": "messages and if I publish we were receive the the long water so it should",
    "start": "1060200",
    "end": "1069350"
  },
  {
    "text": "come let's me refresh as usually this is the the demo effect its hello",
    "start": "1069350",
    "end": "1077750"
  },
  {
    "text": "green grass and of course I'm not receiving the the echo back but I should",
    "start": "1077750",
    "end": "1086059"
  },
  {
    "text": "be it's a book that the application are publishing on the same topic to simplify the demo so at the hello world one I'm",
    "start": "1086059",
    "end": "1093350"
  },
  {
    "text": "not receiving information now so probably what I should do is to just",
    "start": "1093350",
    "end": "1099740"
  },
  {
    "text": "subscribe again and we are receiving the",
    "start": "1099740",
    "end": "1106910"
  },
  {
    "text": "message every five second and let's test otherwise we can move forward probably",
    "start": "1106910",
    "end": "1113740"
  },
  {
    "text": "okay this is the echo that you see every time I publish we receive this echo back",
    "start": "1113740",
    "end": "1118910"
  },
  {
    "text": "with this different syntax that is I just received this event from with the",
    "start": "1118910",
    "end": "1125270"
  },
  {
    "text": "body of them as such and this is an example of how you can distribute logic",
    "start": "1125270",
    "end": "1130580"
  },
  {
    "text": "and what is importantly here is also the function running here is not something",
    "start": "1130580",
    "end": "1135679"
  },
  {
    "text": "that I needed to install on the device but just from the from the Greengrass",
    "start": "1135679",
    "end": "1140809"
  },
  {
    "text": "console I can create in the group the lambda function I want to use and then I",
    "start": "1140809",
    "end": "1147169"
  },
  {
    "text": "can build a deployment that will deploy all the configuration that I made so the lambda functions the subscription on how",
    "start": "1147169",
    "end": "1153620"
  },
  {
    "text": "they talk from the device to the cloud eventual log collection I'm collecting",
    "start": "1153620",
    "end": "1159410"
  },
  {
    "text": "all the logs automatically on on AWS cloud is managed here and then you do a",
    "start": "1159410",
    "end": "1164750"
  },
  {
    "text": "deployment that will spread your configuration across all the green grass core in this group so this is an example",
    "start": "1164750",
    "end": "1174049"
  },
  {
    "text": "of how you can add logic to the edge and",
    "start": "1174049",
    "end": "1181210"
  },
  {
    "text": "with green grass you get lots of bonus benefit because you can operate offline so if this device was to be connected",
    "start": "1181720",
    "end": "1189170"
  },
  {
    "start": "1185000",
    "end": "1185000"
  },
  {
    "text": "with its own network and I lose Internet connectivity they can step process message take decision and act on the",
    "start": "1189170",
    "end": "1194930"
  },
  {
    "text": "physical world you have a secure communication everything is still encrypted based on mutual authentication with certificates even AWS credentials",
    "start": "1194930",
    "end": "1202730"
  },
  {
    "text": "so this device can access AWS work simple to upload data manage three bucket I don't need to manage the",
    "start": "1202730",
    "end": "1208460"
  },
  {
    "text": "credential the credential is managed through a role that I give through the platform and the credential are automatically rotated and distributed by",
    "start": "1208460",
    "end": "1215290"
  },
  {
    "text": "AWS to the device you can process information locally and the device",
    "start": "1215290",
    "end": "1221630"
  },
  {
    "text": "programming is the same as normal i SS function there's some slightly difference in the SDK but very minor",
    "start": "1221630",
    "end": "1228290"
  },
  {
    "text": "difference and you can really focus on building your application and don't waste time and money on managing all the",
    "start": "1228290",
    "end": "1234380"
  },
  {
    "text": "distribution of the software the security and how you want to connect your devices and one example of a",
    "start": "1234380",
    "end": "1240290"
  },
  {
    "start": "1238000",
    "end": "1238000"
  },
  {
    "text": "Greengrass device but not a lot of people knows that is the AWS noble edge so database noble edge is a storage",
    "start": "1240290",
    "end": "1248390"
  },
  {
    "text": "device that you can request using our console we ship it to you there's 100 terabytes of disk and you can use it to",
    "start": "1248390",
    "end": "1255800"
  },
  {
    "text": "store your data and send it back to the cloud or to take data from the cloud to",
    "start": "1255800",
    "end": "1260840"
  },
  {
    "text": "your data center actually the new version this double-edge is also running",
    "start": "1260840",
    "end": "1266180"
  },
  {
    "text": "Greengrass core inside and it's capable as much as as a quite powerful ec2",
    "start": "1266180",
    "end": "1271880"
  },
  {
    "text": "instance so you can process information with this device and for example phillips",
    "start": "1271880",
    "end": "1277310"
  },
  {
    "start": "1277000",
    "end": "1277000"
  },
  {
    "text": "in the heads with project is a healthcare system that they built connecting patients caregivers and their",
    "start": "1277310",
    "end": "1284510"
  },
  {
    "text": "and the family of the patient together so that the patient can be monitored at all you can process the information you",
    "start": "1284510",
    "end": "1291200"
  },
  {
    "text": "can notify the caregiver if something happens all this information can be integrated and stored on this device so",
    "start": "1291200",
    "end": "1298550"
  },
  {
    "text": "that even if some part of their architecture is losing Internet connectivity they can still store the",
    "start": "1298550",
    "end": "1304580"
  },
  {
    "text": "information and process the information and take action on the information locally another example that I love is",
    "start": "1304580",
    "end": "1311630"
  },
  {
    "text": "the Oregon State University Hetfield marine science center so they",
    "start": "1311630",
    "end": "1318119"
  },
  {
    "text": "collect information to study ocean the ocean so they collect information on a ship in the middle of the ocean and they",
    "start": "1318119",
    "end": "1325080"
  },
  {
    "text": "can use as noble edge to collect this information and normally they should wait until they go back to a good",
    "start": "1325080",
    "end": "1332309"
  },
  {
    "text": "internet connectivity to upload any data or they just have to ship the device back so it takes some time to process",
    "start": "1332309",
    "end": "1338279"
  },
  {
    "text": "this data now they can in real time process pre process this information that they collect in the ocean create a",
    "start": "1338279",
    "end": "1344489"
  },
  {
    "text": "small subset of data that can be much easily uploaded to the cloud as soon as",
    "start": "1344489",
    "end": "1349559"
  },
  {
    "text": "they have some internet connectivity so the way they collect and process information is much faster because this",
    "start": "1349559",
    "end": "1355470"
  },
  {
    "text": "start immediately to process the data and then they can send the results that is of course much smaller than the raw",
    "start": "1355470",
    "end": "1361769"
  },
  {
    "text": "data in the to the cloud as soon as they have even limited connectivity so we saw",
    "start": "1361769",
    "end": "1368159"
  },
  {
    "text": "our architecture is starting to grow let's focus now on what you can add as",
    "start": "1368159",
    "end": "1374940"
  },
  {
    "text": "business logic on the content delivery network so we saw how to run functions on the IOT device now I want to run some",
    "start": "1374940",
    "end": "1381929"
  },
  {
    "text": "business logic not in the backend but in the content delivery network we can do that with what is called AWS lambda at",
    "start": "1381929",
    "end": "1389039"
  },
  {
    "start": "1386000",
    "end": "1386000"
  },
  {
    "text": "age that can help you trigger exactly the same functions that we saw but for a",
    "start": "1389039",
    "end": "1394499"
  },
  {
    "text": "different kind of events so CloudFront as I said is a content delivery network",
    "start": "1394499",
    "end": "1399600"
  },
  {
    "text": "so normally you have this for kind of events that happen you have the end user",
    "start": "1399600",
    "end": "1404820"
  },
  {
    "text": "that is asking for some content that's the viewer request this request can be",
    "start": "1404820",
    "end": "1410580"
  },
  {
    "text": "solved by something in the cache I already have the result of this picture for example and I can send immediately a",
    "start": "1410580",
    "end": "1416549"
  },
  {
    "text": "picture back to the user or if I don't have the picture here because you're the first user that is asking for this",
    "start": "1416549",
    "end": "1422730"
  },
  {
    "text": "picture after it has been updated I can go to the origin that it's your back-end take the new version of the data of the",
    "start": "1422730",
    "end": "1430109"
  },
  {
    "text": "picture for example cache it and send it back all those four steps can now",
    "start": "1430109",
    "end": "1435419"
  },
  {
    "text": "trigger a lambda function that can change the behavior of what you are asking to the to the content delivery",
    "start": "1435419",
    "end": "1442080"
  },
  {
    "text": "network so for example you can connect to our",
    "start": "1442080",
    "end": "1448580"
  },
  {
    "start": "1444000",
    "end": "1444000"
  },
  {
    "text": "region in North Ireland its or in in in Virginia and from there you can create a",
    "start": "1448670",
    "end": "1455660"
  },
  {
    "text": "function and then you can say this function will be triggered by Amazon CloudFront and this will automatically",
    "start": "1455660",
    "end": "1462799"
  },
  {
    "text": "replicate your function to multiple regions and then use by all those edge",
    "start": "1462799",
    "end": "1468470"
  },
  {
    "text": "location that we saw at the beginning spread across the world and you can do something like this this is probably the",
    "start": "1468470",
    "end": "1474770"
  },
  {
    "start": "1473000",
    "end": "1473000"
  },
  {
    "text": "the hello world function that you can build for a content delivery network so",
    "start": "1474770",
    "end": "1480590"
  },
  {
    "text": "I'm receiving an event the event contains the request that the viewer is doing in this case I'm completely not",
    "start": "1480590",
    "end": "1487010"
  },
  {
    "text": "looking after the event but I'm always building the same response that is a HTTP tree or - that's a forward I'm",
    "start": "1487010",
    "end": "1495380"
  },
  {
    "text": "sorry saying I don't have the content look for the content here and this is the location this is the a link to the",
    "start": "1495380",
    "end": "1501500"
  },
  {
    "text": "lambda edge documentation so any requests that this content delivery network will receive very close to the",
    "start": "1501500",
    "end": "1508309"
  },
  {
    "text": "user will be automatically sent back a redirect to this fixed URL something",
    "start": "1508309",
    "end": "1514850"
  },
  {
    "text": "more interesting is this where I still build a fixed response but now I'm not",
    "start": "1514850",
    "end": "1520160"
  },
  {
    "text": "sending a redirect I'm sending an HTTP 200 this is an okay status for HTTP and",
    "start": "1520160",
    "end": "1525799"
  },
  {
    "text": "I'm starting to build a body so this is the body that normally you have on your on your on your browser so for example",
    "start": "1525799",
    "end": "1533960"
  },
  {
    "text": "here I can I can add headers like this is a content type HTML and then put some",
    "start": "1533960",
    "end": "1539570"
  },
  {
    "text": "HTML code here or this can be something that is in front of an API so I can manage part of the logic of your API on",
    "start": "1539570",
    "end": "1547040"
  },
  {
    "text": "the edge very very close to the user and maybe so-called the backend only release",
    "start": "1547040",
    "end": "1552710"
  },
  {
    "text": "it's necessary this is another example it's in our documentation this is the",
    "start": "1552710",
    "end": "1558410"
  },
  {
    "text": "link and it's an example of how you can build an a/b testing environment using",
    "start": "1558410",
    "end": "1564110"
  },
  {
    "text": "lambda @h so by a be testing I mean normally you have you have your users",
    "start": "1564110",
    "end": "1569929"
  },
  {
    "text": "and if you want to introduce a new feature you can split your users in two populations experiment a we receive",
    "start": "1569929",
    "end": "1576770"
  },
  {
    "text": "maybe the current version of your website and experiment B we receive a different version slightly change version of your website",
    "start": "1576770",
    "end": "1583360"
  },
  {
    "text": "and then you can measure which one is preferred by your users normally to build this is not that easy here we are",
    "start": "1583360",
    "end": "1589630"
  },
  {
    "text": "using lambda at the edge and we're using cookies so we are we have a cookie where we can set the value a or B and what we",
    "start": "1589630",
    "end": "1597640"
  },
  {
    "text": "do we look in the request because the cook is sent by the client in any request if the cookies using a fare",
    "start": "1597640",
    "end": "1603790"
  },
  {
    "text": "event a we send in as response the the link that is for experiment a if the",
    "start": "1603790",
    "end": "1610600"
  },
  {
    "text": "value of the cook is experiment B of course we send the version of the content that is for the this other experiment if there is no cookie we can",
    "start": "1610600",
    "end": "1618340"
  },
  {
    "text": "for example send 75% of the user that of the new users to experiment a that's",
    "start": "1618340",
    "end": "1624970"
  },
  {
    "text": "probably my current platform and 25% we send them to experiment B and it's not",
    "start": "1624970",
    "end": "1631270"
  },
  {
    "text": "here because otherwise it would be too small to read but the idea is that you can also set a cookie so that all the",
    "start": "1631270",
    "end": "1636580"
  },
  {
    "text": "next requests that you get from these users you can send you will go on the same experiment avoiding users going",
    "start": "1636580",
    "end": "1643179"
  },
  {
    "text": "from one version of your website to the other that is not nice to manage so this is a basic implementation but it can",
    "start": "1643179",
    "end": "1650679"
  },
  {
    "text": "give you an idea of what you can build so let's see something live so this is",
    "start": "1650679",
    "end": "1658800"
  },
  {
    "text": "this is again the same console that we saw before so it's lambda the lambda",
    "start": "1658800",
    "end": "1665980"
  },
  {
    "text": "console this time I'm not in Frankfurt but I'm using North Virginia it's where you can manage manage the integration",
    "start": "1665980",
    "end": "1674470"
  },
  {
    "text": "with lambda at the age and I have a few functions these functions are the beginning with this funny name are",
    "start": "1674470",
    "end": "1680800"
  },
  {
    "text": "actually the automatic replication of my functions I didn't create those and this is my original function here and it's a",
    "start": "1680800",
    "end": "1688480"
  },
  {
    "text": "slightly different version of what we saw so basically what I'm doing I look in the request if the request is for",
    "start": "1688480",
    "end": "1695650"
  },
  {
    "text": "something reading on my website is slash or slash index dot HTML then I send back",
    "start": "1695650",
    "end": "1702550"
  },
  {
    "text": "exactly the same request so I'm not changing that I'm serving that content if it's anything else then I'm sending a",
    "start": "1702550",
    "end": "1709480"
  },
  {
    "text": "relocation to the lambda at age documentation say no you should read the document",
    "start": "1709480",
    "end": "1714910"
  },
  {
    "text": "for lambda at the edge we can see this working this is my CloudFront",
    "start": "1714910",
    "end": "1720700"
  },
  {
    "text": "distribution so this is the content delivery network and each content delivery network has a domain name that",
    "start": "1720700",
    "end": "1727150"
  },
  {
    "text": "normally you customize with the DNS in this case I'm using the row name so not something very nice to see but it works",
    "start": "1727150",
    "end": "1734260"
  },
  {
    "text": "and if I go here and I just ask for this content I see what it's in my in my in",
    "start": "1734260",
    "end": "1741610"
  },
  {
    "text": "my in my distribution that is a very basic HTML file file saying hello world",
    "start": "1741610",
    "end": "1747520"
  },
  {
    "text": "Danilo was here and if I write index dot HTML I'm still I'm still seeing seeing",
    "start": "1747520",
    "end": "1754690"
  },
  {
    "text": "this file because I'm in the normal path if I write anything else here so for",
    "start": "1754690",
    "end": "1760330"
  },
  {
    "text": "example a lot of garbage this will be intercepted by the the function that is",
    "start": "1760330",
    "end": "1766930"
  },
  {
    "text": "redirected me towards the documentation and of course I can put really anything",
    "start": "1766930",
    "end": "1772090"
  },
  {
    "text": "I want it doesn't care so this is an example of how this works live it's very basic but gives you an",
    "start": "1772090",
    "end": "1779920"
  },
  {
    "text": "idea of of what you can build so let's",
    "start": "1779920",
    "end": "1785380"
  },
  {
    "text": "go back here and see how we can start using all those things together so we",
    "start": "1785380",
    "end": "1792340"
  },
  {
    "start": "1790000",
    "end": "1790000"
  },
  {
    "text": "saw lamb that age so the possibility of running code on the content delivery",
    "start": "1792340",
    "end": "1798370"
  },
  {
    "text": "network and the main advantage here is that is completely global so we are",
    "start": "1798370",
    "end": "1803440"
  },
  {
    "text": "running code very very close to your users you can do complex things here but",
    "start": "1803440",
    "end": "1810430"
  },
  {
    "text": "normally you don't want to run something that takes time otherwise the users can go to the normal back-end here you can",
    "start": "1810430",
    "end": "1815560"
  },
  {
    "text": "do something that can be very quick like the final customization of your content or redirect users to different version",
    "start": "1815560",
    "end": "1821560"
  },
  {
    "text": "of content based on the kind of device it's a smartphone there's a customer of",
    "start": "1821560",
    "end": "1827950"
  },
  {
    "text": "ours that is using similar technologies for example to give render different images depending on the on the screen of",
    "start": "1827950",
    "end": "1835150"
  },
  {
    "text": "the device so every screen is rendering colors differently and if you want to have really exact colors you can have",
    "start": "1835150",
    "end": "1842140"
  },
  {
    "text": "different version of a picture that can be render the correctly on the device since this is",
    "start": "1842140",
    "end": "1848740"
  },
  {
    "text": "surveillance still a SS lambda you don't need to think about scaling we will manage the request for you can be very",
    "start": "1848740",
    "end": "1855940"
  },
  {
    "text": "few requests or lots of requests and you will still pay by the hundreds of milliseconds of execution time of these",
    "start": "1855940",
    "end": "1862360"
  },
  {
    "text": "functions so it's very very cheap if you have if you're starting to build a prototype and then the cost will grow",
    "start": "1862360",
    "end": "1868480"
  },
  {
    "text": "with the scale of your project and you can use it for example to reduce the load to your origin to your the origin",
    "start": "1868480",
    "end": "1875410"
  },
  {
    "text": "is the source of the distribution is your back-end instead of having all your users go in there you can manipulate the",
    "start": "1875410",
    "end": "1881830"
  },
  {
    "text": "content close to them and serve the content very quickly so basic examples are you are right for example you may",
    "start": "1881830",
    "end": "1889750"
  },
  {
    "start": "1885000",
    "end": "1885000"
  },
  {
    "text": "want to rewrite the URL some application they have very ugly URL and this can",
    "start": "1889750",
    "end": "1897010"
  },
  {
    "text": "ever for example an impact on how the content you produces index set by search",
    "start": "1897010",
    "end": "1902860"
  },
  {
    "text": "engines so you can use this to dynamically rewrite in a nice format the URL of your website so internally you",
    "start": "1902860",
    "end": "1910000"
  },
  {
    "text": "don't have any change but on the on the edge we will automatically change the repos to the real URL you can provide",
    "start": "1910000",
    "end": "1918070"
  },
  {
    "text": "access control so we saw the example with the cookie but any any login",
    "start": "1918070",
    "end": "1923380"
  },
  {
    "text": "implementation can be intercepted at the edge and you can block or give access there instead of reaching your data",
    "start": "1923380",
    "end": "1929320"
  },
  {
    "text": "center or the SS cloud you can also do a few remote Network calls not a lot",
    "start": "1929320",
    "end": "1936220"
  },
  {
    "text": "because again if you if it takes a lot of time to do this on the edge on the",
    "start": "1936220",
    "end": "1942190"
  },
  {
    "text": "CDN it doesn't make sense because then you can go to the traditional and for a traditional architecture but for example",
    "start": "1942190",
    "end": "1948580"
  },
  {
    "text": "you can call dynamo DB that is can run in the order of milliseconds and you can",
    "start": "1948580",
    "end": "1953710"
  },
  {
    "text": "get some values that can be used to change the return value that you give to your users you can generate a response",
    "start": "1953710",
    "end": "1962350"
  },
  {
    "text": "that is dynamic based on on where the user is what kind of device the user is",
    "start": "1962350",
    "end": "1967750"
  },
  {
    "text": "using in this moment and all the information that is part of the of the",
    "start": "1967750",
    "end": "1973179"
  },
  {
    "text": "user request as we saw you can build a testing environment where you can test different version of your",
    "start": "1973179",
    "end": "1979040"
  },
  {
    "text": "application and generally speaking you can really personalize the content based on what the user are asking for example",
    "start": "1979040",
    "end": "1986210"
  },
  {
    "text": "you can set a cookie with the specific values that tells you what kind of user is this and then you can use this",
    "start": "1986210",
    "end": "1992420"
  },
  {
    "text": "information to process and optimize the content for the user this is for example",
    "start": "1992420",
    "end": "1998570"
  },
  {
    "text": "what customer vawa's Travelex built it's an open source project is on is on",
    "start": "1998570",
    "end": "2004630"
  },
  {
    "text": "github and what they are interested since they are in the finance industry is security so they are thinking about",
    "start": "2004630",
    "end": "2011440"
  },
  {
    "text": "how to use long at the edge to secure the HTTP headers so that whoever is",
    "start": "2011440",
    "end": "2017410"
  },
  {
    "text": "receiving this information from them can be secure that the content has not been manipulated by for example on men in the",
    "start": "2017410",
    "end": "2023770"
  },
  {
    "text": "middle attacks or nobody's changing the content you are directly connected with end users so we saw this architecture",
    "start": "2023770",
    "end": "2032080"
  },
  {
    "text": "growing today we saw how you can start with a traditional back-end",
    "start": "2032080",
    "end": "2037720"
  },
  {
    "text": "and then add logic close to the devices and close to the CDN and we can use AWS",
    "start": "2037720",
    "end": "2043780"
  },
  {
    "text": "lambda so the same exact programming model to run code everywhere so close to",
    "start": "2043780",
    "end": "2048820"
  },
  {
    "text": "the users on on the device or in the in the cloud and as I said at the beginning",
    "start": "2048820",
    "end": "2055450"
  },
  {
    "text": "my recommendation is try to run the code as close as possible to the user and as",
    "start": "2055450",
    "end": "2060909"
  },
  {
    "text": "close as possible to the devices and especially if you can run something",
    "start": "2060910",
    "end": "2066879"
  },
  {
    "text": "inside the client for example of the device that's even better so run code outside of the client only",
    "start": "2066880",
    "end": "2073330"
  },
  {
    "text": "if you need to have security more power or if you need to share code share data with other users so the idea here is to",
    "start": "2073330",
    "end": "2081730"
  },
  {
    "text": "show how IT architecture are evolving over time so that you can leverage on this and build something different it",
    "start": "2081730",
    "end": "2088659"
  },
  {
    "text": "can improve the customer experience of your users push the business logic as close as possible to the users to the",
    "start": "2088660",
    "end": "2094720"
  },
  {
    "text": "device and the advantage is that you can use the same programming model that it's serverless with the SS lambda so you",
    "start": "2094720",
    "end": "2101140"
  },
  {
    "text": "don't need to think about how to deploy how to manage the scaling organizational security thank you",
    "start": "2101140",
    "end": "2109109"
  },
  {
    "text": "so let's start with the questioning room and then we go on a twitch so is there",
    "start": "2112760",
    "end": "2118200"
  },
  {
    "text": "any question here or we start with twitch now okay so the question is on",
    "start": "2118200",
    "end": "2134760"
  },
  {
    "text": "the order of messages that is exchanged since this is a distributed architecture and also the resilience of the",
    "start": "2134760",
    "end": "2141450"
  },
  {
    "text": "architecture of the la-tso MQTT is a",
    "start": "2141450",
    "end": "2155130"
  },
  {
    "text": "protocol that has different QoS what we support it gives you at least once",
    "start": "2155130",
    "end": "2161940"
  },
  {
    "text": "delivery that is I think the best for a distributed architecture if you want to go beyond at least once normally this",
    "start": "2161940",
    "end": "2169170"
  },
  {
    "text": "can create slowness because you need to manage the state and normally it's what",
    "start": "2169170",
    "end": "2174450"
  },
  {
    "text": "we recommend generally speaking with at least once you know that if you send a message is delivered at least once and",
    "start": "2174450",
    "end": "2180000"
  },
  {
    "text": "if you think of information that is exchanged in your distributed architecture as being it important then",
    "start": "2180000",
    "end": "2186960"
  },
  {
    "text": "you know that this approach works it has an impact on what you exchange it",
    "start": "2186960",
    "end": "2192270"
  },
  {
    "text": "depends on a use case but this is the the default approach then we can eventually see other use cases yeah yeah",
    "start": "2192270",
    "end": "2200160"
  },
  {
    "text": "but yeah this is so it important C is not the standard way we think as human",
    "start": "2200160",
    "end": "2206970"
  },
  {
    "text": "but it's the way we should think in a distributed world for example services",
    "start": "2206970",
    "end": "2212910"
  },
  {
    "text": "such as Amazon s3 already implemented that so if you update and if you create",
    "start": "2212910",
    "end": "2218100"
  },
  {
    "text": "a new object you always see the last version but if you have to date an object you can see the old version for a",
    "start": "2218100",
    "end": "2223110"
  },
  {
    "text": "very little time this this approach is something that is part of distributed architecture and my recommendation is",
    "start": "2223110",
    "end": "2229140"
  },
  {
    "text": "stock start with a little important approach and then eventually talk with us or try to king edge cases as an",
    "start": "2229140",
    "end": "2236640"
  },
  {
    "text": "exception okay so let's go for a fort which so the",
    "start": "2236640",
    "end": "2244689"
  },
  {
    "text": "question is on lambda running in green grass on the Raspberry Pi on the device is the same as lambda age yes or no so",
    "start": "2244689",
    "end": "2252400"
  },
  {
    "text": "the idea here is that the same programming framework runs but you have different events so on on the device",
    "start": "2252400",
    "end": "2258939"
  },
  {
    "text": "normally you receive events from sensors from ak-12 from sensors mainly or from",
    "start": "2258939",
    "end": "2264219"
  },
  {
    "text": "the cloud in lambda age the event you receive are requests from some content and then the response",
    "start": "2264219",
    "end": "2269919"
  },
  {
    "text": "to this request so the syntax and the management is exactly the same but of",
    "start": "2269919",
    "end": "2276309"
  },
  {
    "text": "course you you react to completely different events so probably the logic will not be the same because of",
    "start": "2276309",
    "end": "2282099"
  },
  {
    "text": "different difference it depends and then I have another question as close I'm",
    "start": "2282099",
    "end": "2292299"
  },
  {
    "text": "scrolling in the wrong direction here that's all frontage ok ok so if there's",
    "start": "2292299",
    "end": "2301659"
  },
  {
    "text": "no other questions I am happy to take any anything afterwards and I hope you",
    "start": "2301659",
    "end": "2307239"
  },
  {
    "text": "enjoy the demo and give you no idea I'm building different kind of application thank you",
    "start": "2307239",
    "end": "2312400"
  },
  {
    "text": "[Applause]",
    "start": "2312400",
    "end": "2314939"
  }
]