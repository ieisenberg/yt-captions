[
  {
    "text": "thanks a ton for coming to this late session on Thursday I know you guys are had a long day so greatly appreciate you",
    "start": "0",
    "end": "7830"
  },
  {
    "text": "guys showing up means a lot to us on the service team who've been working pretty",
    "start": "7830",
    "end": "13530"
  },
  {
    "text": "hard to get you guys this service I'll start with a quick introduction my name",
    "start": "13530",
    "end": "18930"
  },
  {
    "text": "is Abhishek Singh I'm the principal product manager in the developer and",
    "start": "18930",
    "end": "24029"
  },
  {
    "text": "management tools organization I lead product management for x-ray and for elastic Beanstalk so today just to give",
    "start": "24029",
    "end": "34170"
  },
  {
    "text": "you guys a quick overview of what we expect from the session we'll start with the overview of the service why we chose",
    "start": "34170",
    "end": "40170"
  },
  {
    "text": "to build a service what the service does what problems it solves we'll look into the concepts that the service provides",
    "start": "40170",
    "end": "47579"
  },
  {
    "text": "we'll talk about the api's and how you can do a lot more with the service using",
    "start": "47579",
    "end": "53910"
  },
  {
    "text": "the api's than you can with the clients today we'll look into the use cases that",
    "start": "53910",
    "end": "59609"
  },
  {
    "text": "the service is built to satisfy and then we'll look at what it takes to get",
    "start": "59609",
    "end": "65369"
  },
  {
    "text": "started using the service we'll do a live demo if technology cooperates and",
    "start": "65369",
    "end": "72360"
  },
  {
    "text": "then we'll talk a little bit about sample applications and documentation",
    "start": "72360",
    "end": "78119"
  },
  {
    "text": "and links of that sort so that you guys can go back and get started with using the service so x-ray was essentially",
    "start": "78119",
    "end": "89100"
  },
  {
    "text": "conceived to solve the problem of debugging applications we started with",
    "start": "89100",
    "end": "97009"
  },
  {
    "text": "essentially development debugging and development if you will where",
    "start": "97009",
    "end": "102270"
  },
  {
    "text": "traditional debugging involves a development environment involves searching through your logs finding the",
    "start": "102270",
    "end": "108270"
  },
  {
    "text": "right pieces to be able to replicate the issue that you're seeing setting breakpoints to stop code execution and",
    "start": "108270",
    "end": "115969"
  },
  {
    "text": "then inspecting the call stack and the variables if you will adding additional log statements if you",
    "start": "115969",
    "end": "122430"
  },
  {
    "text": "haven't captured the appropriate data and then repeating this process until you're able to diagnose the issue that",
    "start": "122430",
    "end": "129030"
  },
  {
    "text": "you have at hand the traditional process of debugging doesn't really scale well in production applications in the cloud",
    "start": "129030",
    "end": "137060"
  },
  {
    "text": "specifically these days with applications being built using a service service oriented model microservices or",
    "start": "137060",
    "end": "143970"
  },
  {
    "text": "server less model if you will it really is tedious repetitive and time-consuming let's also look at",
    "start": "143970",
    "end": "152880"
  },
  {
    "text": "another paradigm shift that's ongoing which is why the xray service is really",
    "start": "152880",
    "end": "157890"
  },
  {
    "text": "important we're seeing more and more of our customers move from monolithic",
    "start": "157890",
    "end": "163190"
  },
  {
    "text": "architectures to service-oriented and server less architectures the applications were originally developed",
    "start": "163190",
    "end": "169440"
  },
  {
    "text": "as monolithic architectures for few benefits and they also had their own drawbacks the move to micro services",
    "start": "169440",
    "end": "176580"
  },
  {
    "text": "essentially addressed a lot of the drawbacks if you will of monolithic architectures but they introduced their",
    "start": "176580",
    "end": "184560"
  },
  {
    "text": "own set of challenges so some of the challenges with micro services architecture with service",
    "start": "184560",
    "end": "191040"
  },
  {
    "text": "architectures is that deploying and managing them can be more time consuming or more work compared to monolithic",
    "start": "191040",
    "end": "197250"
  },
  {
    "text": "applications but that gives you a lot more agility and there's a lot of benefits in moving towards model I",
    "start": "197250",
    "end": "203100"
  },
  {
    "text": "should say micro services or serverless architectures services such as lambda",
    "start": "203100",
    "end": "208459"
  },
  {
    "text": "the ec2 container service elastic beanstalk and cloud formation make it",
    "start": "208459",
    "end": "213690"
  },
  {
    "text": "very easy for you to manage hundreds of services or deploy applications that consist of hundreds of services but it's",
    "start": "213690",
    "end": "220110"
  },
  {
    "text": "still very hard to debug application issues specifically in production applications this is mainly due to cross",
    "start": "220110",
    "end": "227310"
  },
  {
    "text": "service interactions so now you've got a request that originally was processed on a single host traveling across the",
    "start": "227310",
    "end": "234510"
  },
  {
    "text": "network on multiple hosts multiple services you have to keep track of the",
    "start": "234510",
    "end": "239700"
  },
  {
    "text": "piece of data essentially and tied together there's varying log formats so with micro services developers",
    "start": "239700",
    "end": "246360"
  },
  {
    "text": "essentially and organizations have embraced the ability for developers to choose their own application stocks so",
    "start": "246360",
    "end": "252390"
  },
  {
    "text": "you might have a micro service running in Java another one running a node and another one might be running in dotnet",
    "start": "252390",
    "end": "258150"
  },
  {
    "text": "and all of these produce different or varying logs which are very hard to",
    "start": "258150",
    "end": "263510"
  },
  {
    "text": "normalize and collate the third point why debugging in",
    "start": "263510",
    "end": "269800"
  },
  {
    "text": "distributed systems is hard is because collecting aggregating and collating logs at scale is a very difficult",
    "start": "269800",
    "end": "275080"
  },
  {
    "text": "problem you've got a lot of data where you can quickly depending on the number",
    "start": "275080",
    "end": "281440"
  },
  {
    "text": "of requests your application is processing reach into terabytes scale data every single day that you'd collect",
    "start": "281440",
    "end": "287650"
  },
  {
    "text": "if you're collecting every single log line for every single to request that your application gets so what's the",
    "start": "287650",
    "end": "294040"
  },
  {
    "text": "solution to some of these problems AWS x-ray makes it easy to identify",
    "start": "294040",
    "end": "299460"
  },
  {
    "text": "performance bottlenecks and errors and we'll see later in the excuse me",
    "start": "299460",
    "end": "304810"
  },
  {
    "text": "presentation how that how x-ray makes that easy it makes it easy to pinpoint specific",
    "start": "304810",
    "end": "310480"
  },
  {
    "text": "issues so you know exactly which service in your application is causing these issues where those issues are in the",
    "start": "310480",
    "end": "317110"
  },
  {
    "text": "code it makes it easy to identify the impact of these issues on your end users",
    "start": "317110",
    "end": "322540"
  },
  {
    "text": "of the application and finally it enables you to visualize this terse data",
    "start": "322540",
    "end": "328780"
  },
  {
    "text": "a log data if you will so that you can understand it much more simply and it's visual it's very easy to look at a graph",
    "start": "328780",
    "end": "336520"
  },
  {
    "text": "and say this is where the problems at so how does x-ray help so the way the x-ray",
    "start": "336520",
    "end": "344950"
  },
  {
    "text": "service works is you essentially have your application code where you include",
    "start": "344950",
    "end": "350260"
  },
  {
    "text": "our SDK what our SDKs do is they add filters in essence to your application",
    "start": "350260",
    "end": "356890"
  },
  {
    "text": "to capture metadata about requests as they're being processed by your application all of that data is then",
    "start": "356890",
    "end": "363550"
  },
  {
    "text": "sent to our agent which runs on your localhost machine and acts as a local buffer and then that chips it over to",
    "start": "363550",
    "end": "370510"
  },
  {
    "text": "the service or the backend where that data is then stitched together using a unique trace ID for every single request",
    "start": "370510",
    "end": "377070"
  },
  {
    "text": "our SDKs also make it easy for you to propagate these trace IDs as you're making cross service calls as part of",
    "start": "377070",
    "end": "385540"
  },
  {
    "text": "your application once the data has been collected by the service collated and",
    "start": "385540",
    "end": "390610"
  },
  {
    "text": "put together or stitched together I should say into a trace you can then do",
    "start": "390610",
    "end": "395770"
  },
  {
    "text": "things like vo service map which essentially gives you a great call graph of all the services using the",
    "start": "395770",
    "end": "402550"
  },
  {
    "text": "trace data that we just collected so you can look at a service graph for the last five minutes for the last ten minutes",
    "start": "402550",
    "end": "407559"
  },
  {
    "text": "the last five hours the last 24 hours and what that really is is a quick",
    "start": "407559",
    "end": "413080"
  },
  {
    "text": "aggregate way to look at all the trace data that you've collected which could be a terabytes if you will and then",
    "start": "413080",
    "end": "421180"
  },
  {
    "text": "finally the process works somewhat like finding a needle in a haystack so you've",
    "start": "421180",
    "end": "426189"
  },
  {
    "text": "got this aggregate data on your call graph and from there you can continue to click in and dive deeper and find areas",
    "start": "426189",
    "end": "433149"
  },
  {
    "text": "in your application where issues are occurring and then actually get the reasons including error messages",
    "start": "433149",
    "end": "440460"
  },
  {
    "text": "throttling issues things like that and we'll look at both the presentation and",
    "start": "440460",
    "end": "446050"
  },
  {
    "text": "the demo how that happens so as I mentioned you start with our SDK and you",
    "start": "446050",
    "end": "451569"
  },
  {
    "text": "include it in your application available today is the X ray SDK for Java",
    "start": "451569",
    "end": "457360"
  },
  {
    "text": "applications dotnet applications and node.js applications what our SDKs do is",
    "start": "457360",
    "end": "464050"
  },
  {
    "text": "essentially add filters to add automatically capture metadata for calls to AWS services using the AWS SDK we",
    "start": "464050",
    "end": "471999"
  },
  {
    "text": "capture calls to non AWS services over HTTP or HTTPS we also have plugins that",
    "start": "471999",
    "end": "479709"
  },
  {
    "text": "capture data from my sequel and post crash drivers and additionally the AWS",
    "start": "479709",
    "end": "484930"
  },
  {
    "text": "SDK captures data for Amazon DynamoDB and we've also instrumented our SDK to",
    "start": "484930",
    "end": "490749"
  },
  {
    "text": "capture specific information for queues using Amazon sqs what all of this does",
    "start": "490749",
    "end": "497080"
  },
  {
    "text": "for you is essentially enables you to quickly get started without having to manually instrument your code by adding",
    "start": "497080",
    "end": "504219"
  },
  {
    "text": "about seven to ten lines of code depending on how much information you want to capture you can very quickly",
    "start": "504219",
    "end": "510520"
  },
  {
    "text": "start getting this rich data set that we'll look at I talk about the daemon",
    "start": "510520",
    "end": "516599"
  },
  {
    "text": "this is essentially our agent which collects the data from the SDK over UDP",
    "start": "516599",
    "end": "522849"
  },
  {
    "text": "so again everything about this service is built to operate at scale and to do it asynchronously so we want to make",
    "start": "522849",
    "end": "530079"
  },
  {
    "text": "sure that we're introducing minimal additional cost for your applications",
    "start": "530079",
    "end": "535130"
  },
  {
    "text": "both in terms of latency and performance the daemon acts as a local buffer and it",
    "start": "535130",
    "end": "541040"
  },
  {
    "text": "flushes the data to the back end every second or when the buffer gets full the daemons available for the Amazon Linux",
    "start": "541040",
    "end": "547520"
  },
  {
    "text": "ami it's available for RAL Ubuntu OS X and Windows you can run the daemon",
    "start": "547520",
    "end": "553910"
  },
  {
    "text": "pretty much anywhere where you can get AWS credentials so you can do it on your desktop you can do it on pram you could",
    "start": "553910",
    "end": "560870"
  },
  {
    "text": "do it in ec2 you could do it in ECS using docker containers and lambda support is coming soon so that's",
    "start": "560870",
    "end": "567710"
  },
  {
    "text": "something that we're working on so let's talk about the concepts of the service",
    "start": "567710",
    "end": "573560"
  },
  {
    "text": "or what are the basic building blocks if you will so it's a tracing service so",
    "start": "573560",
    "end": "580070"
  },
  {
    "text": "obviously we have a object called a trace the trace represents the end-to-end data that's related to a",
    "start": "580070",
    "end": "586490"
  },
  {
    "text": "single request to your application now a trace always starts at an origin service",
    "start": "586490",
    "end": "591890"
  },
  {
    "text": "so that's the first service in your application that's instrumented and from that point forward all the data that's",
    "start": "591890",
    "end": "597560"
  },
  {
    "text": "related to that particular request is captured as part of that trace and the",
    "start": "597560",
    "end": "603020"
  },
  {
    "text": "reason we're able to do that is because our SDKs automatically inject a trace",
    "start": "603020",
    "end": "608060"
  },
  {
    "text": "header which has a unique trace ID and then it propagates it through various services over HTTP or if you're using",
    "start": "608060",
    "end": "615740"
  },
  {
    "text": "queues using message attributes and SQS queues the data or the trace I should",
    "start": "615740",
    "end": "622460"
  },
  {
    "text": "say is sort of an ephemeral concept in that you don't input a trace into the system what you get out of the system is",
    "start": "622460",
    "end": "629300"
  },
  {
    "text": "a trace what you put into the system are segments segments essentially are",
    "start": "629300",
    "end": "634340"
  },
  {
    "text": "portions of traces that correspond to the metadata that was captured for a single service this essentially allows",
    "start": "634340",
    "end": "641060"
  },
  {
    "text": "us to have individual services sending us segments and then the backend is",
    "start": "641060",
    "end": "646220"
  },
  {
    "text": "essentially stitching all this together and creating the trace for you segments",
    "start": "646220",
    "end": "651410"
  },
  {
    "text": "then consists of sub segments and what sub segments essentially represent are either remote operations that happen as",
    "start": "651410",
    "end": "658370"
  },
  {
    "text": "part of a single service or local compute operations that you want to capture timing information for we also",
    "start": "658370",
    "end": "665570"
  },
  {
    "text": "have a notion of annotations annotations essentially is any arbitrary business data that's",
    "start": "665570",
    "end": "673100"
  },
  {
    "text": "key value pair and you have ten annotations that are indexed so you can",
    "start": "673100",
    "end": "678410"
  },
  {
    "text": "filter on those entity annotations and search based on that data we also have",
    "start": "678410",
    "end": "683510"
  },
  {
    "text": "the capability to put additional metadata if you will that's added to the",
    "start": "683510",
    "end": "689209"
  },
  {
    "text": "trace and is available when you look at a trace but it's not something that you can filter traces on we have a concept",
    "start": "689209",
    "end": "695930"
  },
  {
    "text": "of errors so our SDK essentially anytime there's an error it captures the stack trace and the message and we'll see how",
    "start": "695930",
    "end": "702680"
  },
  {
    "text": "that how it presents that on the UI and we also have a notion of sampling this",
    "start": "702680",
    "end": "710120"
  },
  {
    "text": "is interesting from the perspective that given it's a distributor tracing system",
    "start": "710120",
    "end": "715190"
  },
  {
    "text": "it takes a lot of data if you're Sam if you're not sampling so essentially think",
    "start": "715190",
    "end": "721880"
  },
  {
    "text": "that you're capturing log lines for every single request that you get and as I mentioned earlier you could get",
    "start": "721880",
    "end": "727310"
  },
  {
    "text": "terabytes of data every single day most of that data is practically useless for debugging purposes what you need",
    "start": "727310",
    "end": "734779"
  },
  {
    "text": "essentially is trend information what's going on and if you have issues you can",
    "start": "734779",
    "end": "740240"
  },
  {
    "text": "actually up your sampling rate to 100% and capture 100% of the data for a period of time that's appropriate so it",
    "start": "740240",
    "end": "748850"
  },
  {
    "text": "doesn't make sense to be capturing all the data all the time when it's not necessary one of the other concepts on",
    "start": "748850",
    "end": "756440"
  },
  {
    "text": "sampling in the service is essentially we allow you to do granular sampling so",
    "start": "756440",
    "end": "762110"
  },
  {
    "text": "as the example on the screen shows you can within a single service set up rules to sample different paths differently so",
    "start": "762110",
    "end": "769520"
  },
  {
    "text": "if you have a billing path that is very important to you you can choose to sample that 100% versus if you have a",
    "start": "769520",
    "end": "776029"
  },
  {
    "text": "path that just shows your home page that is not really that important to you or you don't think that it matters to",
    "start": "776029",
    "end": "783740"
  },
  {
    "text": "capture 100% of the data where you can just get trend information you can choose to do a lower sampling rate on",
    "start": "783740",
    "end": "789620"
  },
  {
    "text": "that so let's talk about the API for the",
    "start": "789620",
    "end": "794779"
  },
  {
    "text": "service the x-ray API provides capabilities that",
    "start": "794779",
    "end": "800970"
  },
  {
    "text": "enable you to send segments to the service filter and retrieve trace data and will see the rich filtering",
    "start": "800970",
    "end": "807960"
  },
  {
    "text": "capabilities that we've built into the service one of the things I want to mention is given that we have support",
    "start": "807960",
    "end": "814620"
  },
  {
    "text": "for java.net and nodejs today the API is",
    "start": "814620",
    "end": "820170"
  },
  {
    "text": "actually allow you to send data from any application the SDKs are simply making it easier for you to not have to do the",
    "start": "820170",
    "end": "827670"
  },
  {
    "text": "instrumentation yourself so if somebody's motivated you can definitely go and write your own SDKs for various",
    "start": "827670",
    "end": "834600"
  },
  {
    "text": "languages that you may want to write applications on so we're you're not limited to the SDKs we provide you can",
    "start": "834600",
    "end": "840720"
  },
  {
    "text": "go write your own SDKs using our API we also want to make sure that the raw",
    "start": "840720",
    "end": "846060"
  },
  {
    "text": "trace data is available to you because the way we look at the service is essentially solving the backend problem",
    "start": "846060",
    "end": "852089"
  },
  {
    "text": "of collecting and collating traces and then giving you insights on top of that data so it doesn't make sense for us to",
    "start": "852089",
    "end": "859740"
  },
  {
    "text": "not give you that data back for you to build rich applications or think of use cases that we may not have thought of so",
    "start": "859740",
    "end": "866040"
  },
  {
    "text": "there's a batch get API where you can actually extract all your trace data so you can export it into an elk stock if",
    "start": "866040",
    "end": "872670"
  },
  {
    "text": "you will you can put it in Splunk you could put in other different providers and search and continue to do the things",
    "start": "872670",
    "end": "878610"
  },
  {
    "text": "that you do except you have a very rich normalized set of data that you're capturing as part of this service one of",
    "start": "878610",
    "end": "886620"
  },
  {
    "text": "the other things I want to mention about the API is the x-ray service we",
    "start": "886620",
    "end": "891779"
  },
  {
    "text": "essentially see it as the service that will provide our partners that integrate",
    "start": "891779",
    "end": "897180"
  },
  {
    "text": "with us the ability to look into other AWS services so for example when we have lamda support our partners can then get",
    "start": "897180",
    "end": "905790"
  },
  {
    "text": "very rich information using this API on what the lamda service was doing as part of every call sack how many times did",
    "start": "905790",
    "end": "913320"
  },
  {
    "text": "the lambda function retry what was it do well time for the lambda function all of that information will be available for",
    "start": "913320",
    "end": "918930"
  },
  {
    "text": "our partners and for our customers to build interesting applications and interesting dashboards on and so",
    "start": "918930",
    "end": "928620"
  },
  {
    "text": "let's look at what the api's actually are so it's a fairly simple service we've got four api's you've got put",
    "start": "928620",
    "end": "935370"
  },
  {
    "text": "trace segments that actually takes in a segment document which is JSON data",
    "start": "935370",
    "end": "940560"
  },
  {
    "text": "formatted to a specific schema which we will make available later we have batch",
    "start": "940560",
    "end": "947160"
  },
  {
    "text": "get traces which returns the traces to you in batches so that you can build",
    "start": "947160",
    "end": "952800"
  },
  {
    "text": "applications store that trace data wherever you want we have get service graph which returns the aggregate",
    "start": "952800",
    "end": "958890"
  },
  {
    "text": "service graph as a JSON model so that again you can you don't have to use our visualization if you don't like it you",
    "start": "958890",
    "end": "965070"
  },
  {
    "text": "can take this data and build your own dashboard if you'd like and then we have get trace summaries this is essentially",
    "start": "965070",
    "end": "973430"
  },
  {
    "text": "from our point of view the really rich filtering capabilities where you can go",
    "start": "973430",
    "end": "980160"
  },
  {
    "text": "do things like show me traces that were between service and service B that had HTTP URL starting with the letter foo",
    "start": "980160",
    "end": "988140"
  },
  {
    "text": "and had a status code of 200 for example so you can get very granular in terms of",
    "start": "988140",
    "end": "994830"
  },
  {
    "text": "finding issues or finding specific traces of interest so let's look at what",
    "start": "994830",
    "end": "1001490"
  },
  {
    "text": "a segment documentation or document looks like so as I mentioned you send segments to the service you don't send",
    "start": "1001490",
    "end": "1007520"
  },
  {
    "text": "traces so I've got a minimal example of a segment document so as you can see it has a name for the service it has an ID",
    "start": "1007520",
    "end": "1015110"
  },
  {
    "text": "it has a start time it has a trace ID and it has an end time so that's pretty",
    "start": "1015110",
    "end": "1020540"
  },
  {
    "text": "much the smallest piece of information that you can send to the service and still get meaningful information about",
    "start": "1020540",
    "end": "1026089"
  },
  {
    "text": "the timing of what happened there we also have a concept of in progress traces that let you track asynchronous",
    "start": "1026090",
    "end": "1033410"
  },
  {
    "text": "requests so you can essentially send us a segment from service a and say I've cued my message this request is in",
    "start": "1033410",
    "end": "1040310"
  },
  {
    "text": "progress and we'll show it to you on our UI as something that's in progress and it's pending completion on the other end",
    "start": "1040310",
    "end": "1046910"
  },
  {
    "text": "and when that completion on the other end happens you can then go and mark the in progress trace to false and then that",
    "start": "1046910",
    "end": "1053870"
  },
  {
    "text": "completes the trace so let's look at the use cases",
    "start": "1053870",
    "end": "1060580"
  },
  {
    "text": "so the first use case is obviously visualizing the call graph so in this",
    "start": "1060790",
    "end": "1066280"
  },
  {
    "text": "example you can see I have a to service system I have a front-end that has an API and the API is using the",
    "start": "1066280",
    "end": "1074920"
  },
  {
    "text": "SNS service from AWS to make notifications or send notifications I",
    "start": "1074920",
    "end": "1081340"
  },
  {
    "text": "should say and then we also have a dynamo DB table that we're writing data to now what are the colors on that",
    "start": "1081340",
    "end": "1088330"
  },
  {
    "text": "screen if you will and Werner mentioned it this morning the colors actually",
    "start": "1088330",
    "end": "1093460"
  },
  {
    "text": "represent family of status codes HTTP status codes so what you've got here is",
    "start": "1093460",
    "end": "1099430"
  },
  {
    "text": "green represents the 200 and the 300 family of Status responses you've got orange or yellow which",
    "start": "1099430",
    "end": "1107320"
  },
  {
    "text": "represents the 400 family which we call errors and then you've got red which",
    "start": "1107320",
    "end": "1112330"
  },
  {
    "text": "represents the 500 family of responses which are server-side errors which we call false in the middle of the nodes",
    "start": "1112330",
    "end": "1120520"
  },
  {
    "text": "you've got information about was the average latency from all the traces",
    "start": "1120520",
    "end": "1126280"
  },
  {
    "text": "we've captured as part of that service and then you've got the number of traces or the rate at which we're capturing",
    "start": "1126280",
    "end": "1132370"
  },
  {
    "text": "traces for that service so what I can do",
    "start": "1132370",
    "end": "1137830"
  },
  {
    "text": "on that screen actually is I can click on any of those nodes or services or I can click on any of the edges that are",
    "start": "1137830",
    "end": "1144820"
  },
  {
    "text": "connecting those services so in this case I actually clicked on the front end",
    "start": "1144820",
    "end": "1151000"
  },
  {
    "text": "service so here you see I have all my traces essentially filtered by just the",
    "start": "1151000",
    "end": "1157000"
  },
  {
    "text": "front end service I have a group by capability or aggregation capability on the top and in the demo we look at the",
    "start": "1157000",
    "end": "1163990"
  },
  {
    "text": "different fields we can group by and on the bottom I have a list of traces that match that filter expression that I've",
    "start": "1163990",
    "end": "1171610"
  },
  {
    "text": "entered here in this case show me all traces from service my front-end - dev",
    "start": "1171610",
    "end": "1178170"
  },
  {
    "text": "so in this case I can very quickly switch that grouping to status codes and by looking at the numbers I can see that",
    "start": "1178170",
    "end": "1185290"
  },
  {
    "text": "about 2% of my customers are impacted by 500 family of errors and I can also see",
    "start": "1185290",
    "end": "1192040"
  },
  {
    "text": "that about 49% of my customers are four nines that's on purpose and I'll",
    "start": "1192040",
    "end": "1197170"
  },
  {
    "text": "talk to you guys why I did that for the demo but that error code essentially",
    "start": "1197170",
    "end": "1202750"
  },
  {
    "text": "means that there was a conditional check that failed when the request was sent to the service so here I could click on",
    "start": "1202750",
    "end": "1210430"
  },
  {
    "text": "either the 201 the 4 or 9 or the 500 and further filter the list of traces to",
    "start": "1210430",
    "end": "1215530"
  },
  {
    "text": "only show the traces that match that criteria so we just saw that how easy it",
    "start": "1215530",
    "end": "1222610"
  },
  {
    "text": "is to identify impact on your end users for any given service and to be able to",
    "start": "1222610",
    "end": "1228570"
  },
  {
    "text": "tell what's going on now let's look at identification of performance",
    "start": "1228570",
    "end": "1233650"
  },
  {
    "text": "bottlenecks so in this case I did the same exact thing chose my front end as a",
    "start": "1233650",
    "end": "1238750"
  },
  {
    "text": "service so in this case I'm showing you the filter expression on the top so the filter expression says service my front",
    "start": "1238750",
    "end": "1244630"
  },
  {
    "text": "end - dev US east 1 elastic beanstalk comm and by default we group or",
    "start": "1244630",
    "end": "1251650"
  },
  {
    "text": "aggregate the trace by URL so I can go",
    "start": "1251650",
    "end": "1256720"
  },
  {
    "text": "switch this and say show me all traces that have the URL beginning with remote",
    "start": "1256720",
    "end": "1265300"
  },
  {
    "text": "signup so that's where I'm making my remote call to the API if you will so that's been added to the filter",
    "start": "1265300",
    "end": "1271630"
  },
  {
    "text": "expression as soon as I clicked on that my trace list got filtered at the bottom and then I sorted it by latency so in",
    "start": "1271630",
    "end": "1279910"
  },
  {
    "text": "the latency section you can see that I have a trace that says it's 13 seconds long and there are other traces that say",
    "start": "1279910",
    "end": "1287020"
  },
  {
    "text": "it's 1.7 seconds so this is a really bad API because it's taking a really long time but 13 seconds is just unacceptable",
    "start": "1287020",
    "end": "1295080"
  },
  {
    "text": "right so very quickly I know I have a performance problem so I click on that",
    "start": "1295080",
    "end": "1300850"
  },
  {
    "text": "particular trace and what I get is a timeline view of that exact trace so in",
    "start": "1300850",
    "end": "1307000"
  },
  {
    "text": "this case you can see that my front-end made a call to my API and then in my API",
    "start": "1307000",
    "end": "1312280"
  },
  {
    "text": "I see that I made a call to dynamo and then once the dynamic call succeeded I made a call to sqs now it's very",
    "start": "1312280",
    "end": "1321100"
  },
  {
    "text": "interesting that dynamo calls normally take literally milliseconds so taking 12",
    "start": "1321100",
    "end": "1327100"
  },
  {
    "text": "seconds something is wrong so we'll go and click on that document icon if you will and we",
    "start": "1327100",
    "end": "1334600"
  },
  {
    "text": "have a pop-up that pops up with additional data about that sub segment so this is mana data again that our SDKs",
    "start": "1334600",
    "end": "1340090"
  },
  {
    "text": "are capturing for you with just a single line code change on your application so",
    "start": "1340090",
    "end": "1345910"
  },
  {
    "text": "in this case I move over to the resources tab and very quickly I get great information that the operation on",
    "start": "1345910",
    "end": "1353410"
  },
  {
    "text": "the dynamo DB table was a put item operation the table is in US East one I have a request ID that I can take back",
    "start": "1353410",
    "end": "1360970"
  },
  {
    "text": "to the dynamo DB team if I need to debug this further and then I see retries so",
    "start": "1360970",
    "end": "1367330"
  },
  {
    "text": "this is very interesting I have nine retries before that request actually succeeded so obviously something is",
    "start": "1367330",
    "end": "1375280"
  },
  {
    "text": "going on so let's go ahead and look at a",
    "start": "1375280",
    "end": "1381900"
  },
  {
    "text": "different representation of that error so now I'm filtering by 409s so",
    "start": "1381900",
    "end": "1387700"
  },
  {
    "text": "similarly I go in here and in the case of for our nines as I mentioned it specifically for this demo there's a",
    "start": "1387700",
    "end": "1394240"
  },
  {
    "text": "conditional check that's failing so when I go to the Timeline view I very quickly see these icons that are telling me",
    "start": "1394240",
    "end": "1400780"
  },
  {
    "text": "there's something wrong so I click on those icons and then move to the",
    "start": "1400780",
    "end": "1405790"
  },
  {
    "text": "exceptions tab and guess what that shows me the actual exception that happened on",
    "start": "1405790",
    "end": "1411370"
  },
  {
    "text": "my application while that code was running in production and it gives me the entire stack trace of what happened",
    "start": "1411370",
    "end": "1417460"
  },
  {
    "text": "so looking at this I know that on a particular line in my application the conditional check when I wrote to dynamo",
    "start": "1417460",
    "end": "1424030"
  },
  {
    "text": "dB actually failed so again being able to pinpoint issues exactly to the line",
    "start": "1424030",
    "end": "1429550"
  },
  {
    "text": "of code and being able to then go and fix these issues very quickly is sort of",
    "start": "1429550",
    "end": "1434620"
  },
  {
    "text": "the large value proposition of this service so now let's talk about getting",
    "start": "1434620",
    "end": "1440410"
  },
  {
    "text": "started so we've shown you the cool things you can do with the service let's talk about what it takes for you guys to",
    "start": "1440410",
    "end": "1448000"
  },
  {
    "text": "get started using the service so the first aspect of starting with the",
    "start": "1448000",
    "end": "1453580"
  },
  {
    "text": "service is the installation of the agent now this is a user data script that lets you install this in ec2 Linux",
    "start": "1453580",
    "end": "1461530"
  },
  {
    "text": "systems if you will so simply just downloading the daemon from s3 and then running it we've got ec2 windows support",
    "start": "1461530",
    "end": "1469870"
  },
  {
    "text": "so this is a powershell script you can down essentially run this as a user data script it will do the same exact thing",
    "start": "1469870",
    "end": "1477120"
  },
  {
    "text": "and then on Amazon ECS you can do the same thing with your containers if you",
    "start": "1477120",
    "end": "1484000"
  },
  {
    "text": "want to run this on your desktop you can download the file from s3 and run it on your desktop we have as I mentioned",
    "start": "1484000",
    "end": "1490240"
  },
  {
    "text": "previously support for RAL Lubuntu Mac OSX Amazon Linux windows both as a",
    "start": "1490240",
    "end": "1497200"
  },
  {
    "text": "Windows process and as a Windows service and then in terms of the instrumentation",
    "start": "1497200",
    "end": "1504280"
  },
  {
    "text": "for your application all the data that you saw in the demo or the walkthrough",
    "start": "1504280",
    "end": "1510430"
  },
  {
    "text": "that I just showed you guys is captured by just those changes those code changes in your application so what I've done",
    "start": "1510430",
    "end": "1517300"
  },
  {
    "text": "here is I've added the X ray SDK package to my package JSON I go in and I",
    "start": "1517300",
    "end": "1523240"
  },
  {
    "text": "initialize the extra package and then I put a capture AWS around the AWS SDK",
    "start": "1523240",
    "end": "1529900"
  },
  {
    "text": "that single line essentially lets me capture all calls to all AWS services",
    "start": "1529900",
    "end": "1535510"
  },
  {
    "text": "that are made using SDK clients then I have some configuration where I'm",
    "start": "1535510",
    "end": "1542410"
  },
  {
    "text": "essentially saying configure the ec2 plug-in for the service what that does",
    "start": "1542410",
    "end": "1548050"
  },
  {
    "text": "is essentially tells the SDK to capture the metadata about the instance that's actually running the code so",
    "start": "1548050",
    "end": "1554200"
  },
  {
    "text": "automatically now you've got the ec2 instance ID what a Zeid was running on",
    "start": "1554200",
    "end": "1559420"
  },
  {
    "text": "so if you have an issue you can take this back and say this particular ec2 instance was running my code when this",
    "start": "1559420",
    "end": "1565510"
  },
  {
    "text": "issue happened one of the things that we don't show here is metadata or",
    "start": "1565510",
    "end": "1570640"
  },
  {
    "text": "annotations but you can think of interesting things you can do with metadata and annotations so for example",
    "start": "1570640",
    "end": "1576520"
  },
  {
    "text": "if I was in a Java system and I was part of processing a request I could add",
    "start": "1576520",
    "end": "1582130"
  },
  {
    "text": "metadata around garbage collection so if I if the garbage collector went off I could add a metadata tag that says Oh",
    "start": "1582130",
    "end": "1588610"
  },
  {
    "text": "garbage collection was happening as part of this trace so when somebody goes and looks at that trace they can look at the",
    "start": "1588610",
    "end": "1594460"
  },
  {
    "text": "metadata and it makes sense this garbage collection that's why there's high latency and then",
    "start": "1594460",
    "end": "1601820"
  },
  {
    "text": "we have those two lines on open segments and closed segments which is essentially capturing all the express routes if you",
    "start": "1601820",
    "end": "1607580"
  },
  {
    "text": "will so again very simple fairly easy to do and we want to continue improving",
    "start": "1607580",
    "end": "1614060"
  },
  {
    "text": "this as the service grows we want to make this simpler less essentially",
    "start": "1614060",
    "end": "1619360"
  },
  {
    "text": "friction for you having to go automate or are you having to go instrument your code and automate more of this so that",
    "start": "1619360",
    "end": "1625610"
  },
  {
    "text": "happens automatically okay all right so",
    "start": "1625610",
    "end": "1642350"
  },
  {
    "text": "now let's get to the fun part",
    "start": "1642350",
    "end": "1645340"
  },
  {
    "text": "perfect so essentially what I have here is the same exact graph that you guys",
    "start": "1656480",
    "end": "1662610"
  },
  {
    "text": "saw on the PowerPoint but we're gonna do this live so in this case I have the",
    "start": "1662610",
    "end": "1670260"
  },
  {
    "text": "service graph that you're seeing here is a grenaded over the last five minutes I could choose a different period and then",
    "start": "1670260",
    "end": "1677040"
  },
  {
    "text": "that's aggregated over that period so I'll just stick with five minutes for now and then here I have a bunch of red",
    "start": "1677040",
    "end": "1684390"
  },
  {
    "text": "and yellow I have some yellow here I have all green here so very quickly at a",
    "start": "1684390",
    "end": "1689580"
  },
  {
    "text": "glance I know that there's an issue with my DynamoDB tables I know the name of the table I know the name of my services",
    "start": "1689580",
    "end": "1696480"
  },
  {
    "text": "I know where my services are running so in this case you see ec2 instances and",
    "start": "1696480",
    "end": "1701630"
  },
  {
    "text": "then to start digging into this I click here because that's the service with the",
    "start": "1701630",
    "end": "1708410"
  },
  {
    "text": "most obvious issues if you will so I see that there's two requests or two URLs",
    "start": "1708410",
    "end": "1713880"
  },
  {
    "text": "ones essentially a blank URL so if you run anything on the internet you'll see",
    "start": "1713880",
    "end": "1719100"
  },
  {
    "text": "these a lot you will see services pinging you with different C names that you weren't even aware of that will",
    "start": "1719100",
    "end": "1725610"
  },
  {
    "text": "start showing up here but what I want to do is look at status codes because",
    "start": "1725610",
    "end": "1731250"
  },
  {
    "text": "that's what I'm interested in so here I see 201 409 500s obviously I don't want",
    "start": "1731250",
    "end": "1737010"
  },
  {
    "text": "500 because it's really bad for my customers so I'm going to click on this",
    "start": "1737010",
    "end": "1742940"
  },
  {
    "text": "so what happened right there is automatically we added to the filter",
    "start": "1743510",
    "end": "1748559"
  },
  {
    "text": "expression ACB status is equal to 500 and then what you got here is a list of",
    "start": "1748559",
    "end": "1753990"
  },
  {
    "text": "traces that just represent that set of filter criteria so now I can see that",
    "start": "1753990",
    "end": "1759270"
  },
  {
    "text": "all of these are taking somewhat the same amount of time so let's go ahead and click on one of these and actually",
    "start": "1759270",
    "end": "1765660"
  },
  {
    "text": "learn what's going on so here again I see I have these icons here so that seemed to be okay but that had a problem",
    "start": "1765660",
    "end": "1773429"
  },
  {
    "text": "and then that's where it seems to be the root cause of the issue so again very",
    "start": "1773429",
    "end": "1778830"
  },
  {
    "text": "quickly by looking at this I can tell the error says error caused by provision throughput exceeded",
    "start": "1778830",
    "end": "1785240"
  },
  {
    "text": "so very easily again I know that I have a dynamodb table that I didn't provision",
    "start": "1785240",
    "end": "1791610"
  },
  {
    "text": "with enough I ops that I need to go fix but let's look at the additional data that we're capturing as part of that",
    "start": "1791610",
    "end": "1798420"
  },
  {
    "text": "segment or sub segment if you will so you get some metadata about the segment",
    "start": "1798420",
    "end": "1803730"
  },
  {
    "text": "ID the sub segment ID you have start and end time duration in progress state that",
    "start": "1803730",
    "end": "1809460"
  },
  {
    "text": "we talked about for asynchronous calls we have Erin fault so in this case it was a 500 family of error code so the",
    "start": "1809460",
    "end": "1818730"
  },
  {
    "text": "error state is set to true and then we have response actually it was a 400",
    "start": "1818730",
    "end": "1824700"
  },
  {
    "text": "family so that's why our is true and fault is false and the response status is 400 so again I get the same exact",
    "start": "1824700",
    "end": "1833460"
  },
  {
    "text": "thing and here I can see the number of retries is 10 so anybody who's used the AWS SDK you'll know that the AWS SDK is",
    "start": "1833460",
    "end": "1841650"
  },
  {
    "text": "automatically we try for throttling issues they retry in the node case up to ten times and then they give up so",
    "start": "1841650",
    "end": "1848400"
  },
  {
    "text": "that's what you're seeing here I don't have any annotations or metadata that",
    "start": "1848400",
    "end": "1853740"
  },
  {
    "text": "I've added here but I do have an exception that was captured from the SDK and again I can see that the exception",
    "start": "1853740",
    "end": "1860790"
  },
  {
    "text": "happened on line 71 of my application so you know very easy to get to the bottom",
    "start": "1860790",
    "end": "1866220"
  },
  {
    "text": "of the issue if you will let's go look at some of these other ones where I did",
    "start": "1866220",
    "end": "1872190"
  },
  {
    "text": "add annotations so in this case I'm adding two annotations where what's the theme that my app is using when this",
    "start": "1872190",
    "end": "1878940"
  },
  {
    "text": "user saw the application and did they request preview access to my application",
    "start": "1878940",
    "end": "1884360"
  },
  {
    "text": "so one of the cool use cases regarding that is I can actually go in here and I",
    "start": "1884360",
    "end": "1891330"
  },
  {
    "text": "can see annotation about preview and annotation theme so if I click on this I get all the values that we found for",
    "start": "1891330",
    "end": "1899340"
  },
  {
    "text": "that annotation in the trace so here we see again we're filtering by five",
    "start": "1899340",
    "end": "1905640"
  },
  {
    "text": "hundreds so not very interesting data because we've already found the issue if",
    "start": "1905640",
    "end": "1911070"
  },
  {
    "text": "you will so let's go ahead and change that and now if you look at it it seems",
    "start": "1911070",
    "end": "1917910"
  },
  {
    "text": "like those using the Flatley team happened to get a disproportionately high number or",
    "start": "1917910",
    "end": "1923940"
  },
  {
    "text": "somewhat high number about 13% higher than any of the other teams now this",
    "start": "1923940",
    "end": "1930059"
  },
  {
    "text": "could be that that's the most popular theme if you will it could be that there's something going on with that",
    "start": "1930059",
    "end": "1936150"
  },
  {
    "text": "theme or the CSS but again the service is making it very easy for you if you're adding additional data metadata to get",
    "start": "1936150",
    "end": "1944970"
  },
  {
    "text": "to the business problems of you know if I'm running video for example or I'm",
    "start": "1944970",
    "end": "1950070"
  },
  {
    "text": "running a video service and I have a set of TV's that connect to my service I can",
    "start": "1950070",
    "end": "1955080"
  },
  {
    "text": "add annotations that has the model and the make of the TV and if I have problems I can very quickly using this",
    "start": "1955080",
    "end": "1961620"
  },
  {
    "text": "method find out if it's a particular model of TV or if it's a particular make of TV where all the problems are",
    "start": "1961620",
    "end": "1967830"
  },
  {
    "text": "happening so again being able to sort of very quickly get to the needle in the haystack that's sort of about big value",
    "start": "1967830",
    "end": "1974820"
  },
  {
    "text": "propositions of the service let's quickly look at some of the filter",
    "start": "1974820",
    "end": "1981360"
  },
  {
    "text": "expression capabilities so unfilter expressions we have a fairly rich",
    "start": "1981360",
    "end": "1987510"
  },
  {
    "text": "capability you can do simple things like HTTP URL contains HTTP URL begins with",
    "start": "1987510",
    "end": "1993960"
  },
  {
    "text": "or you can do complicated things like give me traces between service a and",
    "start": "1993960",
    "end": "1999510"
  },
  {
    "text": "service B that resulted in a fault that had an annotation with a key of foo and",
    "start": "1999510",
    "end": "2005480"
  },
  {
    "text": "a value of bar and that took longer than five milliseconds to complete so that's",
    "start": "2005480",
    "end": "2011540"
  },
  {
    "text": "sort of the level of querying capability that you have here to be able to filter and then get really to the crux of the",
    "start": "2011540",
    "end": "2018830"
  },
  {
    "text": "problems that you're running into and so",
    "start": "2018830",
    "end": "2024170"
  },
  {
    "text": "some of the things to quickly review here the SDK automatically captures for",
    "start": "2024170",
    "end": "2031250"
  },
  {
    "text": "example the HTTP status the URL the method the user agent the client IP we",
    "start": "2031250",
    "end": "2037490"
  },
  {
    "text": "have a special user field where you can enter metadata about the users that may be using your application so you can",
    "start": "2037490",
    "end": "2043880"
  },
  {
    "text": "then go filter on that and see if only a particular user is impacted or if there are many users that are impacted we've",
    "start": "2043880",
    "end": "2050810"
  },
  {
    "text": "got the annotations that we talked about and then you've got the ability to do a little bit of graph query if you will",
    "start": "2050810",
    "end": "2057000"
  },
  {
    "text": "where you can say show me traces for a given node or show me traces for connections between certain nodes so",
    "start": "2057000",
    "end": "2069419"
  },
  {
    "text": "let's go back to the service map here and then let's see what's going on here",
    "start": "2069420",
    "end": "2078750"
  },
  {
    "text": "so I've essentially got all my traces I see latency between 25 seconds if you",
    "start": "2078750",
    "end": "2087480"
  },
  {
    "text": "will for errors all the way down actually the numbers aren't there for",
    "start": "2087480",
    "end": "2094290"
  },
  {
    "text": "this problems of live demo if you will but it's interesting that I have a 500",
    "start": "2094290",
    "end": "2100590"
  },
  {
    "text": "response with the same amount of time as a 201 response so let's go quickly take",
    "start": "2100590",
    "end": "2105810"
  },
  {
    "text": "a look at that so everything looks green here except my dynamodb thing looks",
    "start": "2105810",
    "end": "2111450"
  },
  {
    "text": "really long I can again go click on this look at this go to resources and there",
    "start": "2111450",
    "end": "2118140"
  },
  {
    "text": "you go I know very easily that this is happening because I'm retrying a ton of times so again I don't have a problem",
    "start": "2118140",
    "end": "2125370"
  },
  {
    "text": "with my application it's because of retries I need to go solve that retry problem and not spend a ton of time",
    "start": "2125370",
    "end": "2130980"
  },
  {
    "text": "trying to write additional logs capture this data figure it out for myself so",
    "start": "2130980",
    "end": "2136800"
  },
  {
    "text": "making it super simple alright the last",
    "start": "2136800",
    "end": "2143730"
  },
  {
    "text": "thing I want to show you guys in the demo side is the raw data that I talked about so again this is available to you",
    "start": "2143730",
    "end": "2150600"
  },
  {
    "text": "we make it very visible very prominent because we want our customers and our partners to use this what you've got",
    "start": "2150600",
    "end": "2157830"
  },
  {
    "text": "here is essentially a JSON data model that normalizes the trace timing",
    "start": "2157830",
    "end": "2163470"
  },
  {
    "text": "information we've got some exception information that's captured so we'll look at that actually in this case there",
    "start": "2163470",
    "end": "2169860"
  },
  {
    "text": "was no exception so let's quickly find a more interesting trace so I will take",
    "start": "2169860",
    "end": "2176070"
  },
  {
    "text": "the 500",
    "start": "2176070",
    "end": "2181440"
  },
  {
    "text": "then I will just pick any one of those so as you can see here we've got the",
    "start": "2181440",
    "end": "2189160"
  },
  {
    "text": "trace ID of course that's captured there we've got timing information we've got",
    "start": "2189160",
    "end": "2194290"
  },
  {
    "text": "metadata about the service that's automatically added in this case as you can see I added the ec2 plug-in so I get",
    "start": "2194290",
    "end": "2203109"
  },
  {
    "text": "sort of this metadata automatically added to my traces that has the ec2",
    "start": "2203109",
    "end": "2208329"
  },
  {
    "text": "information we're working on plug-ins for other AWS services so like elastic Beanstalk lamda so it will automatically",
    "start": "2208329",
    "end": "2215650"
  },
  {
    "text": "inject additional metadata there I've got an HTTP section that captures data",
    "start": "2215650",
    "end": "2220660"
  },
  {
    "text": "on HTTP requests I've got my annotations here and then I have the sub segments",
    "start": "2220660",
    "end": "2226960"
  },
  {
    "text": "that represent that the calls I should say and then finally I have errors and",
    "start": "2226960",
    "end": "2232990"
  },
  {
    "text": "exceptions so in this case error is set to true and the exception is captured in a normalized fashion so you can very",
    "start": "2232990",
    "end": "2240040"
  },
  {
    "text": "easily use or programmatically I should say go and look at exactly what line of",
    "start": "2240040",
    "end": "2246369"
  },
  {
    "text": "code caused an issue run interesting queries on this and normalize to find out what sort of",
    "start": "2246369",
    "end": "2252430"
  },
  {
    "text": "exceptions you are getting in your system so really some good use cases here of the raw data",
    "start": "2252430",
    "end": "2258150"
  },
  {
    "text": "all right let's quickly switch back and",
    "start": "2258150",
    "end": "2262740"
  },
  {
    "text": "let's see if that works okay so that sort of was an overview of",
    "start": "2265200",
    "end": "2273730"
  },
  {
    "text": "the service we'll talk about pricing quickly the service itself is free",
    "start": "2273730",
    "end": "2280450"
  },
  {
    "text": "during preview so please go ahead and try us out as much as you like",
    "start": "2280450",
    "end": "2286079"
  },
  {
    "text": "after preview the free tier for the service will include the first hundred thousand traces that you record per",
    "start": "2286079",
    "end": "2292900"
  },
  {
    "text": "month that will be free that's not for the first year that's pretty much forever the first million traces that",
    "start": "2292900",
    "end": "2300430"
  },
  {
    "text": "are retrieved from the system or that are queried or scanned as part of the filters are also free per month beyond",
    "start": "2300430",
    "end": "2308319"
  },
  {
    "text": "that the additional charges that you would incur is $5 per million traces that you store in the system per month",
    "start": "2308319",
    "end": "2314380"
  },
  {
    "text": "and again as I mentioned earlier a tres represents a request to your origin service so if you've got a microservices",
    "start": "2314380",
    "end": "2322030"
  },
  {
    "text": "architecture that has a single request that comes in fans out to 25 different",
    "start": "2322030",
    "end": "2328150"
  },
  {
    "text": "services and then comes back and goes out all of that's actually captured as a single trace so that's not 25 traces",
    "start": "2328150",
    "end": "2335440"
  },
  {
    "text": "it's a single trace it's limited to 500 kilobytes so a complete trace end-to-end",
    "start": "2335440",
    "end": "2341740"
  },
  {
    "text": "must be 500 kilobytes given the data that you've seen captured that we showed you it's a lot of data what we have",
    "start": "2341740",
    "end": "2348970"
  },
  {
    "text": "there was barely a few kilobytes and that in terms of scanning or retrieving",
    "start": "2348970",
    "end": "2356470"
  },
  {
    "text": "traces you pay $0.50 per million traces that are scanned or retrieved from the",
    "start": "2356470",
    "end": "2361840"
  },
  {
    "text": "service per month so as I mentioned earlier service is available today",
    "start": "2361840",
    "end": "2368430"
  },
  {
    "text": "please go ahead and sign up for the service there's a forum will get you white listed as soon as possible I have",
    "start": "2368430",
    "end": "2376120"
  },
  {
    "text": "links to documentation and sample applications if you will for both for",
    "start": "2376120",
    "end": "2381460"
  },
  {
    "text": "all three dotnet Java and nodejs and thank you very much for taking time",
    "start": "2381460",
    "end": "2388270"
  },
  {
    "text": "today and being here I wanted to end the session early so that you guys can go and enjoy the party so thanks a ton and",
    "start": "2388270",
    "end": "2395730"
  },
  {
    "text": "please don't forget to complete your evaluations",
    "start": "2395730",
    "end": "2400920"
  }
]