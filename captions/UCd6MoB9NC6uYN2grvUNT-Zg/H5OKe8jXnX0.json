[
  {
    "text": "hello everyone welcome to this demo on",
    "start": "840",
    "end": "3600"
  },
  {
    "text": "how to integrate Amazon API Gateway to",
    "start": "3600",
    "end": "6120"
  },
  {
    "text": "AWS apparenter private services",
    "start": "6120",
    "end": "8940"
  },
  {
    "text": "I am vamsi Pitta I am a Solutions",
    "start": "8940",
    "end": "11160"
  },
  {
    "text": "architect here at AWS",
    "start": "11160",
    "end": "13920"
  },
  {
    "text": "first",
    "start": "13920",
    "end": "15360"
  },
  {
    "text": "we'll see some use cases for this",
    "start": "15360",
    "end": "16980"
  },
  {
    "text": "integration followed by architecture",
    "start": "16980",
    "end": "19140"
  },
  {
    "text": "overview then we'll dive into the demo",
    "start": "19140",
    "end": "21480"
  },
  {
    "text": "itself",
    "start": "21480",
    "end": "23779"
  },
  {
    "text": "for those who are new to app rendered",
    "start": "24840",
    "end": "26699"
  },
  {
    "text": "service it's a managed service which",
    "start": "26699",
    "end": "29340"
  },
  {
    "text": "will let you deploy build and run",
    "start": "29340",
    "end": "32398"
  },
  {
    "text": "containerized web applications and API",
    "start": "32399",
    "end": "35399"
  },
  {
    "text": "services without a need for prior",
    "start": "35399",
    "end": "37739"
  },
  {
    "text": "experience on containers",
    "start": "37739",
    "end": "41000"
  },
  {
    "text": "by using Amazon API Gateway you can",
    "start": "41640",
    "end": "44879"
  },
  {
    "text": "improve security and performance of",
    "start": "44879",
    "end": "47399"
  },
  {
    "text": "private Services running on app Runner",
    "start": "47399",
    "end": "51840"
  },
  {
    "text": "you can take advantage of native",
    "start": "51840",
    "end": "53820"
  },
  {
    "text": "authorization options provided by API",
    "start": "53820",
    "end": "56219"
  },
  {
    "text": "Gateway be it Amazon Cognito integration",
    "start": "56219",
    "end": "60020"
  },
  {
    "text": "or you can also leverage Lambda",
    "start": "60020",
    "end": "63000"
  },
  {
    "text": "authorizer for implementing or",
    "start": "63000",
    "end": "65939"
  },
  {
    "text": "validating our API calls using JWT or um",
    "start": "65939",
    "end": "71820"
  },
  {
    "text": "third-party oauth providers",
    "start": "71820",
    "end": "75439"
  },
  {
    "text": "you can also Implement throttling and",
    "start": "75960",
    "end": "78060"
  },
  {
    "text": "caching for your backend API services",
    "start": "78060",
    "end": "82220"
  },
  {
    "text": "though these use cases are out of scope",
    "start": "82500",
    "end": "84960"
  },
  {
    "text": "for the demo I just specifically want to",
    "start": "84960",
    "end": "87000"
  },
  {
    "text": "call out when and why we would need such",
    "start": "87000",
    "end": "90000"
  },
  {
    "text": "an integration",
    "start": "90000",
    "end": "92659"
  },
  {
    "text": "all right so let's take a quick look at",
    "start": "93479",
    "end": "95340"
  },
  {
    "text": "the architecture",
    "start": "95340",
    "end": "97560"
  },
  {
    "text": "from right to left",
    "start": "97560",
    "end": "99119"
  },
  {
    "text": "we have an apprenter service running",
    "start": "99119",
    "end": "100860"
  },
  {
    "text": "Django application which accepts",
    "start": "100860",
    "end": "102840"
  },
  {
    "text": "incoming traffic only from a VPC",
    "start": "102840",
    "end": "105000"
  },
  {
    "text": "endpoint",
    "start": "105000",
    "end": "106439"
  },
  {
    "text": "will leave Public Access for the",
    "start": "106439",
    "end": "108180"
  },
  {
    "text": "outgoing traffic to the internet",
    "start": "108180",
    "end": "110820"
  },
  {
    "text": "we also have a network load balancer",
    "start": "110820",
    "end": "112740"
  },
  {
    "text": "which is internal and forwards traffic",
    "start": "112740",
    "end": "116040"
  },
  {
    "text": "to app render service via VPC endpoint",
    "start": "116040",
    "end": "120899"
  },
  {
    "text": "we'll use VPC link to connect API",
    "start": "120899",
    "end": "123659"
  },
  {
    "text": "Gateway to the network load balancer",
    "start": "123659",
    "end": "126899"
  },
  {
    "text": "let's switch to the Management console",
    "start": "126899",
    "end": "129360"
  },
  {
    "text": "for the demo I have created a custom VPC",
    "start": "129360",
    "end": "132120"
  },
  {
    "text": "so let's take a quick look at the",
    "start": "132120",
    "end": "134400"
  },
  {
    "text": "resource map",
    "start": "134400",
    "end": "137180"
  },
  {
    "text": "so in this VPC there are a couple of",
    "start": "142560",
    "end": "145500"
  },
  {
    "text": "public subnets and two private subnets",
    "start": "145500",
    "end": "148800"
  },
  {
    "text": "spread across two availability zones",
    "start": "148800",
    "end": "152099"
  },
  {
    "text": "so I'll leverage private subnets for the",
    "start": "152099",
    "end": "155700"
  },
  {
    "text": "VPC endpoints and also the network load",
    "start": "155700",
    "end": "158640"
  },
  {
    "text": "balancer",
    "start": "158640",
    "end": "160620"
  },
  {
    "text": "let's create an app in its service",
    "start": "160620",
    "end": "163800"
  },
  {
    "text": "search for app Runner",
    "start": "163800",
    "end": "167300"
  },
  {
    "text": "now click on create an app on our",
    "start": "169019",
    "end": "171599"
  },
  {
    "text": "service",
    "start": "171599",
    "end": "173580"
  },
  {
    "text": "for the source you can either point it",
    "start": "173580",
    "end": "176400"
  },
  {
    "text": "to a source code repository in GitHub",
    "start": "176400",
    "end": "178860"
  },
  {
    "text": "bitbucket or code combat or you can",
    "start": "178860",
    "end": "181500"
  },
  {
    "text": "leverage container registry either from",
    "start": "181500",
    "end": "183959"
  },
  {
    "text": "Docker Hub or ECR so I'll be using a",
    "start": "183959",
    "end": "187739"
  },
  {
    "text": "sample Django app I pushed to ECR",
    "start": "187739",
    "end": "190440"
  },
  {
    "text": "registry in my own account",
    "start": "190440",
    "end": "192540"
  },
  {
    "text": "but you can use any public images or",
    "start": "192540",
    "end": "195959"
  },
  {
    "text": "custom images in your own environment",
    "start": "195959",
    "end": "200300"
  },
  {
    "text": "for deployment trigger I'll choose",
    "start": "205260",
    "end": "207180"
  },
  {
    "text": "automatic and use an existing service",
    "start": "207180",
    "end": "209640"
  },
  {
    "text": "role for pulling ECR images",
    "start": "209640",
    "end": "214640"
  },
  {
    "text": "let's give it a name",
    "start": "217379",
    "end": "220459"
  },
  {
    "text": "and I'll leave the configuration default",
    "start": "225299",
    "end": "227819"
  },
  {
    "text": "for now",
    "start": "227819",
    "end": "230840"
  },
  {
    "text": "um since Django app listens on Port 8000",
    "start": "231239",
    "end": "234720"
  },
  {
    "text": "I'll update that and leave everything",
    "start": "234720",
    "end": "237060"
  },
  {
    "text": "else to defaults so Auto scaling let's",
    "start": "237060",
    "end": "240120"
  },
  {
    "text": "leave it default even health check",
    "start": "240120",
    "end": "244159"
  },
  {
    "text": "for permissions let's select an instance",
    "start": "245220",
    "end": "248159"
  },
  {
    "text": "role for app Runner",
    "start": "248159",
    "end": "251099"
  },
  {
    "text": "so this role helps in case if you want",
    "start": "251099",
    "end": "253560"
  },
  {
    "text": "to access any other AWS services like S3",
    "start": "253560",
    "end": "256019"
  },
  {
    "text": "dynamodb table or things like that so",
    "start": "256019",
    "end": "258900"
  },
  {
    "text": "this will this is a role attached to the",
    "start": "258900",
    "end": "260940"
  },
  {
    "text": "app Runner instance itself",
    "start": "260940",
    "end": "264680"
  },
  {
    "text": "under networking this is the crucial",
    "start": "267300",
    "end": "269880"
  },
  {
    "text": "part where we will make the service",
    "start": "269880",
    "end": "272000"
  },
  {
    "text": "private so for incoming Network traffic",
    "start": "272000",
    "end": "276120"
  },
  {
    "text": "select private endpoint and we'll have",
    "start": "276120",
    "end": "279479"
  },
  {
    "text": "to create a VPC interface endpoint so",
    "start": "279479",
    "end": "283139"
  },
  {
    "text": "let's do that",
    "start": "283139",
    "end": "286160"
  },
  {
    "text": "give it a name",
    "start": "288060",
    "end": "290960"
  },
  {
    "text": "in the VPC drop down let's select the",
    "start": "307080",
    "end": "309780"
  },
  {
    "text": "custom VPC so I'll select the one which",
    "start": "309780",
    "end": "312120"
  },
  {
    "text": "uh with the site arrange 10.192",
    "start": "312120",
    "end": "316380"
  },
  {
    "text": "security groups let's go with the",
    "start": "316620",
    "end": "319080"
  },
  {
    "text": "default Security Group for now but we'll",
    "start": "319080",
    "end": "321120"
  },
  {
    "text": "have to update the inbound rules to",
    "start": "321120",
    "end": "323699"
  },
  {
    "text": "allow Network load balancer",
    "start": "323699",
    "end": "326060"
  },
  {
    "text": "communicate with the endpoint so we'll",
    "start": "326060",
    "end": "328620"
  },
  {
    "text": "do that after we create the service",
    "start": "328620",
    "end": "332340"
  },
  {
    "text": "first subnets select private subnets so",
    "start": "332340",
    "end": "336240"
  },
  {
    "text": "the way I remember here is",
    "start": "336240",
    "end": "338960"
  },
  {
    "text": "the cider range 20 and 21 these are",
    "start": "338960",
    "end": "342000"
  },
  {
    "text": "private subnets",
    "start": "342000",
    "end": "343500"
  },
  {
    "text": "so let's select these two",
    "start": "343500",
    "end": "347419"
  },
  {
    "text": "and create that endpoint",
    "start": "348960",
    "end": "352440"
  },
  {
    "text": "there are price implications for VPC",
    "start": "352440",
    "end": "354419"
  },
  {
    "text": "endpoints so please take a note of that",
    "start": "354419",
    "end": "358160"
  },
  {
    "text": "once we have the interface endpoint",
    "start": "361979",
    "end": "364100"
  },
  {
    "text": "we'll leave the outgoing Network traffic",
    "start": "364100",
    "end": "367160"
  },
  {
    "text": "as public access",
    "start": "367160",
    "end": "370800"
  },
  {
    "text": "for observability let's turn on AWS",
    "start": "370800",
    "end": "374639"
  },
  {
    "text": "x-ray tracing",
    "start": "374639",
    "end": "377660"
  },
  {
    "text": "and click on next",
    "start": "379020",
    "end": "381300"
  },
  {
    "text": "a quick review we have an image sourced",
    "start": "381300",
    "end": "384479"
  },
  {
    "text": "from Amazon ECR deployment settings to",
    "start": "384479",
    "end": "387600"
  },
  {
    "text": "automatic and have a ECR access role",
    "start": "387600",
    "end": "391560"
  },
  {
    "text": "configured most of the service",
    "start": "391560",
    "end": "393360"
  },
  {
    "text": "configurations were default except the",
    "start": "393360",
    "end": "396539"
  },
  {
    "text": "port which",
    "start": "396539",
    "end": "399300"
  },
  {
    "text": "Django applications lessons on and then",
    "start": "399300",
    "end": "402560"
  },
  {
    "text": "we have a custom networking setup so a",
    "start": "402560",
    "end": "406740"
  },
  {
    "text": "private endpoint for incoming traffic",
    "start": "406740",
    "end": "408300"
  },
  {
    "text": "and",
    "start": "408300",
    "end": "409560"
  },
  {
    "text": "Public Access for outgoing Network",
    "start": "409560",
    "end": "411300"
  },
  {
    "text": "traffic",
    "start": "411300",
    "end": "413220"
  },
  {
    "text": "create and deploy",
    "start": "413220",
    "end": "416060"
  },
  {
    "text": "so while this is going on let's go back",
    "start": "419340",
    "end": "421919"
  },
  {
    "text": "to our security group and update",
    "start": "421919",
    "end": "426539"
  },
  {
    "text": "the inbound rules",
    "start": "426539",
    "end": "429860"
  },
  {
    "text": "let's copy The Cider range of the VPC",
    "start": "431819",
    "end": "435919"
  },
  {
    "text": "folio here select security groups",
    "start": "438900",
    "end": "443599"
  },
  {
    "text": "select the default Security Group for",
    "start": "444120",
    "end": "446039"
  },
  {
    "text": "the VPC",
    "start": "446039",
    "end": "447300"
  },
  {
    "text": "and click on",
    "start": "447300",
    "end": "449280"
  },
  {
    "text": "edit inbound rules",
    "start": "449280",
    "end": "452539"
  },
  {
    "text": "let's add a rule to a love communication",
    "start": "452699",
    "end": "455520"
  },
  {
    "text": "over Port 443",
    "start": "455520",
    "end": "458580"
  },
  {
    "text": "from The Cider range VPC cider range so",
    "start": "458580",
    "end": "462900"
  },
  {
    "text": "we are doing this to a love uh Network",
    "start": "462900",
    "end": "465300"
  },
  {
    "text": "load balancer forward traffic to app",
    "start": "465300",
    "end": "468960"
  },
  {
    "text": "router service through the VPC endpoint",
    "start": "468960",
    "end": "471599"
  },
  {
    "text": "over 443.",
    "start": "471599",
    "end": "474120"
  },
  {
    "text": "it will also do health checks on the",
    "start": "474120",
    "end": "475919"
  },
  {
    "text": "same port",
    "start": "475919",
    "end": "478340"
  },
  {
    "text": "our next step is to create a Target",
    "start": "489660",
    "end": "491699"
  },
  {
    "text": "group for the network load balancer",
    "start": "491699",
    "end": "493440"
  },
  {
    "text": "before I do that let's take a quick look",
    "start": "493440",
    "end": "496380"
  },
  {
    "text": "at app Runner VPC endpoint",
    "start": "496380",
    "end": "500060"
  },
  {
    "text": "under subnets you'll see couple of IP",
    "start": "501479",
    "end": "505139"
  },
  {
    "text": "addresses these are IP addresses",
    "start": "505139",
    "end": "508740"
  },
  {
    "text": "attached to the elastic network",
    "start": "508740",
    "end": "510180"
  },
  {
    "text": "interfaces for the end point within the",
    "start": "510180",
    "end": "513899"
  },
  {
    "text": "private subnets we have attached",
    "start": "513899",
    "end": "516959"
  },
  {
    "text": "so make a note of them we'll be using",
    "start": "516959",
    "end": "518940"
  },
  {
    "text": "them",
    "start": "518940",
    "end": "520320"
  },
  {
    "text": "while creating the target group",
    "start": "520320",
    "end": "523380"
  },
  {
    "text": "so let's go ahead",
    "start": "523380",
    "end": "525120"
  },
  {
    "text": "by creating the target group",
    "start": "525120",
    "end": "529519"
  },
  {
    "text": "I'm in the ec2 dashboard I'll scroll",
    "start": "533519",
    "end": "535800"
  },
  {
    "text": "down to Target groups on the left hand",
    "start": "535800",
    "end": "537600"
  },
  {
    "text": "side",
    "start": "537600",
    "end": "539100"
  },
  {
    "text": "create a new Target group",
    "start": "539100",
    "end": "541980"
  },
  {
    "text": "in this case for the Target type we are",
    "start": "541980",
    "end": "544380"
  },
  {
    "text": "going to select IP addresses",
    "start": "544380",
    "end": "547880"
  },
  {
    "text": "give a Target group name I'm going to",
    "start": "549660",
    "end": "552360"
  },
  {
    "text": "give apprunner",
    "start": "552360",
    "end": "555600"
  },
  {
    "text": "foreign",
    "start": "565680",
    "end": "568680"
  },
  {
    "text": "call choose TCP",
    "start": "569959",
    "end": "572880"
  },
  {
    "text": "over Port 443",
    "start": "572880",
    "end": "576740"
  },
  {
    "text": "select the custom VPC",
    "start": "578760",
    "end": "581760"
  },
  {
    "text": "then you can leave the health checks",
    "start": "581760",
    "end": "583860"
  },
  {
    "text": "default",
    "start": "583860",
    "end": "586339"
  },
  {
    "text": "now this is where we are going to use",
    "start": "589980",
    "end": "592920"
  },
  {
    "text": "the IP addresses of PPC endpoint",
    "start": "592920",
    "end": "596640"
  },
  {
    "text": "so let's go back to the VPC Management",
    "start": "596640",
    "end": "599160"
  },
  {
    "text": "console",
    "start": "599160",
    "end": "601759"
  },
  {
    "text": "copy the IP addresses",
    "start": "602040",
    "end": "605480"
  },
  {
    "text": "and paste it over here",
    "start": "607800",
    "end": "610680"
  },
  {
    "text": "click on ADD ipv4 address and do the",
    "start": "610680",
    "end": "613500"
  },
  {
    "text": "same for another IP address",
    "start": "613500",
    "end": "617300"
  },
  {
    "text": "so once you have both of them over here",
    "start": "620399",
    "end": "623160"
  },
  {
    "text": "click on include as pending below",
    "start": "623160",
    "end": "627560"
  },
  {
    "text": "then click on target group",
    "start": "632160",
    "end": "635899"
  },
  {
    "text": "all right so we have done one step for",
    "start": "637980",
    "end": "640980"
  },
  {
    "text": "load balancing now let's go ahead and",
    "start": "640980",
    "end": "643140"
  },
  {
    "text": "create a load balancer",
    "start": "643140",
    "end": "646459"
  },
  {
    "text": "for the type of load balancer we gonna",
    "start": "650700",
    "end": "653399"
  },
  {
    "text": "need a network load balancer and we'll",
    "start": "653399",
    "end": "655500"
  },
  {
    "text": "make it internal",
    "start": "655500",
    "end": "657060"
  },
  {
    "text": "point it to the Target group we just",
    "start": "657060",
    "end": "658740"
  },
  {
    "text": "created",
    "start": "658740",
    "end": "661100"
  },
  {
    "text": "I'll give it a name as app Runner",
    "start": "664920",
    "end": "669200"
  },
  {
    "text": "internal NLB",
    "start": "669200",
    "end": "673040"
  },
  {
    "text": "for the scheme select internal",
    "start": "674160",
    "end": "678319"
  },
  {
    "text": "VPC let's choose the custom VPC and the",
    "start": "680399",
    "end": "684000"
  },
  {
    "text": "subnets mapping should be private so we",
    "start": "684000",
    "end": "687540"
  },
  {
    "text": "want this to be internal so we'll place",
    "start": "687540",
    "end": "689160"
  },
  {
    "text": "them in uh we'll place this in a private",
    "start": "689160",
    "end": "691560"
  },
  {
    "text": "subnet",
    "start": "691560",
    "end": "693980"
  },
  {
    "text": "okay we have our Basics covered now for",
    "start": "703019",
    "end": "706620"
  },
  {
    "text": "the listeners we have right protocol",
    "start": "706620",
    "end": "709380"
  },
  {
    "text": "already selected but let's change the",
    "start": "709380",
    "end": "712019"
  },
  {
    "text": "port to 443 forwarding traffic to the",
    "start": "712019",
    "end": "715620"
  },
  {
    "text": "Target group we just created",
    "start": "715620",
    "end": "718880"
  },
  {
    "text": "let's take a quick look at the summary",
    "start": "721860",
    "end": "723600"
  },
  {
    "text": "we have a network load balancer which is",
    "start": "723600",
    "end": "727260"
  },
  {
    "text": "internal",
    "start": "727260",
    "end": "729540"
  },
  {
    "text": "um hosted on private subnets forwarding",
    "start": "729540",
    "end": "732660"
  },
  {
    "text": "the traffic to webinar VPC endpoint IP",
    "start": "732660",
    "end": "736079"
  },
  {
    "text": "addresses it's a Target group listening",
    "start": "736079",
    "end": "739079"
  },
  {
    "text": "on a 443",
    "start": "739079",
    "end": "743000"
  },
  {
    "text": "let's go ahead and create the load",
    "start": "744300",
    "end": "745740"
  },
  {
    "text": "balancer",
    "start": "745740",
    "end": "748160"
  },
  {
    "text": "okay now we have the load balancer",
    "start": "753720",
    "end": "755940"
  },
  {
    "text": "status active",
    "start": "755940",
    "end": "757440"
  },
  {
    "text": "Let's uh check how the health checks are",
    "start": "757440",
    "end": "760800"
  },
  {
    "text": "doing for a Target group",
    "start": "760800",
    "end": "764060"
  },
  {
    "text": "okay for both the IP addresses of VPC",
    "start": "766139",
    "end": "769620"
  },
  {
    "text": "endpoint we have a status of healthy so",
    "start": "769620",
    "end": "772019"
  },
  {
    "text": "that looks good we have a load balancer",
    "start": "772019",
    "end": "774240"
  },
  {
    "text": "that is active so let's switch to app",
    "start": "774240",
    "end": "777660"
  },
  {
    "text": "Runner console to make sure the service",
    "start": "777660",
    "end": "780240"
  },
  {
    "text": "is active also",
    "start": "780240",
    "end": "783360"
  },
  {
    "text": "okay this this looks good as well now we",
    "start": "783360",
    "end": "785940"
  },
  {
    "text": "have two more steps left that is to",
    "start": "785940",
    "end": "787920"
  },
  {
    "text": "create a VPC link for the API Gateway",
    "start": "787920",
    "end": "790440"
  },
  {
    "text": "and then create a rest API so let's uh",
    "start": "790440",
    "end": "794459"
  },
  {
    "text": "switch to API Gateway",
    "start": "794459",
    "end": "798560"
  },
  {
    "text": "yeah yeah the first step will go ahead",
    "start": "803700",
    "end": "806880"
  },
  {
    "text": "and create a VPC link",
    "start": "806880",
    "end": "809959"
  },
  {
    "text": "select VPC link for rest apis",
    "start": "814800",
    "end": "817860"
  },
  {
    "text": "give it a name",
    "start": "817860",
    "end": "820940"
  },
  {
    "text": "select the target NLB which is created",
    "start": "837540",
    "end": "840899"
  },
  {
    "text": "and click on create",
    "start": "840899",
    "end": "843800"
  },
  {
    "text": "this will take few minutes so I'm going",
    "start": "844380",
    "end": "846420"
  },
  {
    "text": "to pause the recording over here and",
    "start": "846420",
    "end": "847920"
  },
  {
    "text": "delete it's active",
    "start": "847920",
    "end": "850760"
  },
  {
    "text": "is active now",
    "start": "853440",
    "end": "855120"
  },
  {
    "text": "so let's go ahead and create the rest",
    "start": "855120",
    "end": "857279"
  },
  {
    "text": "API",
    "start": "857279",
    "end": "859880"
  },
  {
    "text": "I'll select a new API give it a name so",
    "start": "868560",
    "end": "871980"
  },
  {
    "text": "this is a Django app so I'll call it the",
    "start": "871980",
    "end": "874680"
  },
  {
    "text": "same",
    "start": "874680",
    "end": "876860"
  },
  {
    "text": "so this is a classic API Gateway but I'm",
    "start": "883740",
    "end": "886079"
  },
  {
    "text": "specifically going to focus on how do we",
    "start": "886079",
    "end": "888680"
  },
  {
    "text": "use a VPC link to forward the request to",
    "start": "888680",
    "end": "892199"
  },
  {
    "text": "the app Runner service",
    "start": "892199",
    "end": "893940"
  },
  {
    "text": "so let's uh create a resource",
    "start": "893940",
    "end": "898760"
  },
  {
    "text": "and then let's add a method",
    "start": "908459",
    "end": "914000"
  },
  {
    "text": "I'll keep it simple let's say any",
    "start": "916560",
    "end": "920360"
  },
  {
    "text": "over here you'll see an option to select",
    "start": "921180",
    "end": "923519"
  },
  {
    "text": "VPC link so let's click that and use",
    "start": "923519",
    "end": "926880"
  },
  {
    "text": "this as a proxy integration",
    "start": "926880",
    "end": "929579"
  },
  {
    "text": "and then I'll say any",
    "start": "929579",
    "end": "933380"
  },
  {
    "text": "select the VPC link we just created",
    "start": "934680",
    "end": "938339"
  },
  {
    "text": "in case if it doesn't show up for you it",
    "start": "938339",
    "end": "941100"
  },
  {
    "text": "will take a while and make sure the VPC",
    "start": "941100",
    "end": "944459"
  },
  {
    "text": "link status is available or active",
    "start": "944459",
    "end": "947519"
  },
  {
    "text": "so then you'll see it in the drop down",
    "start": "947519",
    "end": "951500"
  },
  {
    "text": "endpoint URL this is where we divert the",
    "start": "952620",
    "end": "956880"
  },
  {
    "text": "traffic to the app Runner service so you",
    "start": "956880",
    "end": "960420"
  },
  {
    "text": "can grab the service endpoint",
    "start": "960420",
    "end": "964860"
  },
  {
    "text": "uh I mean I'm back to The Apprentice",
    "start": "964860",
    "end": "967560"
  },
  {
    "text": "service console select the default",
    "start": "967560",
    "end": "970860"
  },
  {
    "text": "domain name from here",
    "start": "970860",
    "end": "973880"
  },
  {
    "text": "paste that in the endpoint URL",
    "start": "976920",
    "end": "979440"
  },
  {
    "text": "and six",
    "start": "979440",
    "end": "982279"
  },
  {
    "text": "so go ahead and deploy the API Gateway",
    "start": "986519",
    "end": "990860"
  },
  {
    "text": "all right so with this uh our setup",
    "start": "998459",
    "end": "1001100"
  },
  {
    "text": "should be complete and we should be able",
    "start": "1001100",
    "end": "1003320"
  },
  {
    "text": "to test it",
    "start": "1003320",
    "end": "1004699"
  },
  {
    "text": "let's go back to resources",
    "start": "1004699",
    "end": "1007519"
  },
  {
    "text": "click on the any method",
    "start": "1007519",
    "end": "1010220"
  },
  {
    "text": "and click test",
    "start": "1010220",
    "end": "1012740"
  },
  {
    "text": "we'll send a test request through a get",
    "start": "1012740",
    "end": "1015139"
  },
  {
    "text": "method",
    "start": "1015139",
    "end": "1016220"
  },
  {
    "text": "click on test",
    "start": "1016220",
    "end": "1019220"
  },
  {
    "text": "there you go we have a successful",
    "start": "1019220",
    "end": "1020959"
  },
  {
    "text": "response from our private Django",
    "start": "1020959",
    "end": "1025040"
  },
  {
    "text": "application running on app Runner",
    "start": "1025040",
    "end": "1026660"
  },
  {
    "text": "service",
    "start": "1026660",
    "end": "1028699"
  },
  {
    "text": "with this we have successfully",
    "start": "1028699",
    "end": "1031418"
  },
  {
    "text": "completed our setup and integration with",
    "start": "1031419",
    "end": "1034220"
  },
  {
    "text": "API Gateway and a private app router",
    "start": "1034220",
    "end": "1037220"
  },
  {
    "text": "service thank you for watching the video",
    "start": "1037220",
    "end": "1039500"
  },
  {
    "text": "Happy building on AWS",
    "start": "1039500",
    "end": "1043480"
  }
]