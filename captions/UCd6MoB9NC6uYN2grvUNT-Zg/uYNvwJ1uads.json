[
  {
    "start": "0",
    "end": "177000"
  },
  {
    "text": "good morning everyone my name is Harsha and upon II I'm a Solutions Architect at AWS been with AWS for five years in this",
    "start": "30",
    "end": "8940"
  },
  {
    "text": "session we'll be diving deep into this is a 200 level session for folks who are",
    "start": "8940",
    "end": "14099"
  },
  {
    "text": "familiar with our compute offerings we will touch on some of the aspects of computer option that you have on AWS and",
    "start": "14099",
    "end": "22980"
  },
  {
    "text": "then we will dive deep into some of those giving you exposing you to some",
    "start": "22980",
    "end": "28439"
  },
  {
    "text": "patterns and deployment and then we will talk about specific use cases so before",
    "start": "28439",
    "end": "37500"
  },
  {
    "text": "I get started here just to give you some piece of information we're doing a series of at scale presentations today",
    "start": "37500",
    "end": "44129"
  },
  {
    "text": "this is the first first of the sessions after compute we will be talking about",
    "start": "44129",
    "end": "50239"
  },
  {
    "text": "security at scale and we will be talking about CICE at scale and management at",
    "start": "50239",
    "end": "55559"
  },
  {
    "text": "scale so if you're interested please attend those sessions and it will give",
    "start": "55559",
    "end": "60780"
  },
  {
    "text": "you a holistic view about all the options we have in terms of deployment",
    "start": "60780",
    "end": "65869"
  },
  {
    "text": "all right for computed scale we have in this session I will be talking about",
    "start": "67820",
    "end": "75080"
  },
  {
    "text": "three different compute patterns on AWS ec2 at scale container set scale several",
    "start": "75080",
    "end": "82619"
  },
  {
    "text": "asset scale and then deployment patterns within those let's start with easy to",
    "start": "82619",
    "end": "91369"
  },
  {
    "text": "five years ago we had one service that is focus on compute it was ec2 still",
    "start": "91369",
    "end": "100590"
  },
  {
    "text": "have ec2 these are the virtual machines that you deploy on AWS for folks who are",
    "start": "100590",
    "end": "106229"
  },
  {
    "text": "familiar with virtualization a lot of transformation has been going on in the",
    "start": "106229",
    "end": "111390"
  },
  {
    "text": "data center world where migrations from mainframe to open systems from open systems there's open systems on bare",
    "start": "111390",
    "end": "118560"
  },
  {
    "text": "metal to data center virtualization through hypervisors which is VMware",
    "start": "118560",
    "end": "124500"
  },
  {
    "text": "based mostly or hyper-v and then eventually cloud-based virtualization",
    "start": "124500",
    "end": "130530"
  },
  {
    "text": "which is easy to in easy you have multiple options in terms of",
    "start": "130530",
    "end": "136960"
  },
  {
    "text": "deployment it's basically their Linux",
    "start": "136960",
    "end": "142330"
  },
  {
    "text": "based virtualization or windows-based and we provided a lot of options in",
    "start": "142330",
    "end": "148450"
  },
  {
    "text": "terms of deployment so to give you a",
    "start": "148450",
    "end": "154030"
  },
  {
    "text": "perspective of how we evolved over time",
    "start": "154030",
    "end": "159270"
  },
  {
    "text": "ec2 instances started with just three instance families and instance types and",
    "start": "159270",
    "end": "165880"
  },
  {
    "text": "over the past few years we now have about 70 instance types and about I think it started off with one instance",
    "start": "165880",
    "end": "173050"
  },
  {
    "text": "family and we scaled to twelve instance families so compute services is at the",
    "start": "173050",
    "end": "181890"
  },
  {
    "start": "177000",
    "end": "177000"
  },
  {
    "text": "heart of transformation journey for a lot of customers it's extremely",
    "start": "181890",
    "end": "188470"
  },
  {
    "text": "important to understand the differences in terms of compute patterns on AWS one is you have the traditional VM model",
    "start": "188470",
    "end": "195640"
  },
  {
    "text": "which is ec2 then you have the container model which is basically ecs elastic",
    "start": "195640",
    "end": "201459"
  },
  {
    "text": "container service and then you have the server list model which is lambda a lot",
    "start": "201459",
    "end": "207730"
  },
  {
    "text": "of customers have leveraged all three different patterns these are not one size fits all based on your workload",
    "start": "207730",
    "end": "214300"
  },
  {
    "text": "necessities whether it's a stateful application or stateless application if you have long processing bad jobs typing",
    "start": "214300",
    "end": "222030"
  },
  {
    "text": "requirements or you want to do distributed computing HPC workloads",
    "start": "222030",
    "end": "227410"
  },
  {
    "text": "based on different patterns different application workloads different characteristics of your application you",
    "start": "227410",
    "end": "233170"
  },
  {
    "text": "may pick and choose different types of computer pattern that's used your application and finally starting from",
    "start": "233170",
    "end": "242680"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "ec2 the journey has evolved and now this is the complete AWS compute business as",
    "start": "242680",
    "end": "248680"
  },
  {
    "text": "of today to the left of you you can see the ec2 instance and it's all the",
    "start": "248680",
    "end": "255010"
  },
  {
    "text": "characteristics that make up the instance operations instead of including ami is the Amazon machine image and then",
    "start": "255010",
    "end": "263200"
  },
  {
    "text": "you have the easy to use and the types of easy to use in terms of spot spot instances or on-demand or",
    "start": "263200",
    "end": "270430"
  },
  {
    "text": "reserved instances and then you have a complete suite of container based",
    "start": "270430",
    "end": "276870"
  },
  {
    "text": "services including easy s which is",
    "start": "276870",
    "end": "282030"
  },
  {
    "text": "elastic container service eks for kubernetes and then you have ECR the",
    "start": "282030",
    "end": "288190"
  },
  {
    "text": "container registry and then moving into the networking we made a lot of advances",
    "start": "288190",
    "end": "293800"
  },
  {
    "text": "in terms of networking within the ec2 fabric you have the VPC constructs you",
    "start": "293800",
    "end": "299920"
  },
  {
    "text": "have the gateway VPC peering and then going into the server list model before",
    "start": "299920",
    "end": "307630"
  },
  {
    "text": "we hit the server list model there was Beanstalk which is basically any another container based a service with which you",
    "start": "307630",
    "end": "314590"
  },
  {
    "text": "can easily deploy on to AWS and finally you have load balancers that you can",
    "start": "314590",
    "end": "320260"
  },
  {
    "text": "take advantage of if you're familiar with on-premise load balancers where you are using your farts for example a lot",
    "start": "320260",
    "end": "326500"
  },
  {
    "text": "of customers use f5g TMS and f 5l TMS for routing both globally and locally",
    "start": "326500",
    "end": "332160"
  },
  {
    "text": "into a data center so you could do easily you can extend that functionality",
    "start": "332160",
    "end": "337750"
  },
  {
    "text": "using e lbs you have two sets of load balancers available to route to your",
    "start": "337750",
    "end": "343270"
  },
  {
    "text": "traffic to the compute engine either network load balancers at the layer four or if you are routing to layer seven it",
    "start": "343270",
    "end": "351100"
  },
  {
    "text": "is application load balancer alb or you still have options for the standard",
    "start": "351100",
    "end": "356470"
  },
  {
    "text": "classic alb so regardless of what I'm trying to explain here is you have a",
    "start": "356470",
    "end": "363400"
  },
  {
    "text": "breadth of options on on Amazon on the AWS platform to extend your workload",
    "start": "363400",
    "end": "370690"
  },
  {
    "text": "necessities and essentially target specifically deploy a particular stack",
    "start": "370690",
    "end": "376120"
  },
  {
    "text": "right now we're going to for this session I'm gonna be focusing on the",
    "start": "376120",
    "end": "381550"
  },
  {
    "text": "three areas the the compute the containers and the server less just to",
    "start": "381550",
    "end": "387100"
  },
  {
    "text": "level set here ec2 is our virtual machine space service suited for big",
    "start": "387100",
    "end": "392800"
  },
  {
    "text": "data workloads to migrate in your enterprise applications to AWS and then",
    "start": "392800",
    "end": "397900"
  },
  {
    "text": "you have containers based solution if you are leveraging microservices on",
    "start": "397900",
    "end": "404719"
  },
  {
    "text": "AWS you would take advantage of either Beanstalk or a suite of ECS eks",
    "start": "404719",
    "end": "412659"
  },
  {
    "text": "deployments and then you have another",
    "start": "412659",
    "end": "417800"
  },
  {
    "text": "implementation is batch that's also based on containers batches leveraged by",
    "start": "417800",
    "end": "423770"
  },
  {
    "text": "financial services industry life sir life sciences again this is another",
    "start": "423770",
    "end": "429499"
  },
  {
    "text": "extension to the container model and then you have function as a service through AWS lambda this is event-driven",
    "start": "429499",
    "end": "435349"
  },
  {
    "text": "programming for customers who don't want to maintain servers to execute small do who still require small amounts of",
    "start": "435349",
    "end": "442520"
  },
  {
    "text": "compute on demand and not have to maintain server infrastructure it W slam",
    "start": "442520",
    "end": "449719"
  },
  {
    "text": "down that which is based on event-driven programming is a very good choice all",
    "start": "449719",
    "end": "456050"
  },
  {
    "text": "right let's dive deep into ECE two it",
    "start": "456050",
    "end": "461300"
  },
  {
    "start": "459000",
    "end": "459000"
  },
  {
    "text": "AWS innovation is at the heart of every single service and the offerings and the",
    "start": "461300",
    "end": "466819"
  },
  {
    "text": "products and features the same thing applies to AC 2 we have started in 2006",
    "start": "466819",
    "end": "475089"
  },
  {
    "text": "onwards we there's grown in scale continuously innovating in terms of",
    "start": "475089",
    "end": "481520"
  },
  {
    "text": "offerings that we have from general purpose instances that we launched to to compute optimized and I Oh optimized and",
    "start": "481520",
    "end": "489469"
  },
  {
    "text": "storage optimized the reason why we developed so many different instance",
    "start": "489469",
    "end": "494539"
  },
  {
    "text": "families is based on the customer feedback like you who have asked us to purpose-built specific virtual machines",
    "start": "494539",
    "end": "500870"
  },
  {
    "text": "for specific tasks why is that important because not all workloads are of the",
    "start": "500870",
    "end": "506809"
  },
  {
    "text": "same type you have cpu-based workloads you may have graphics rendering you may be doing",
    "start": "506809",
    "end": "513740"
  },
  {
    "text": "video streaming and you need specific computation that is suitable for that workload so for that you would use",
    "start": "513740",
    "end": "520610"
  },
  {
    "text": "typically a GPU based instance so that's the evolution of cpu based virtual",
    "start": "520610",
    "end": "526069"
  },
  {
    "text": "machines to GPU based virtual machines and then there is large-scale financial applications that also require",
    "start": "526069",
    "end": "533630"
  },
  {
    "text": "additional hardware acceleration and we provide at a hardware acceleration through FPGA",
    "start": "533630",
    "end": "538850"
  },
  {
    "text": "instances so when you see wide suite of VM options on AWS the reason is",
    "start": "538850",
    "end": "544700"
  },
  {
    "text": "different workload characteristics and different types of CPU and the",
    "start": "544700",
    "end": "550130"
  },
  {
    "text": "processors and then finally we launched the ec2 bare metal at reinvent and we're",
    "start": "550130",
    "end": "555710"
  },
  {
    "text": "going to be talking about that as well so before I explain why we have so many",
    "start": "555710",
    "end": "563930"
  },
  {
    "start": "558000",
    "end": "558000"
  },
  {
    "text": "instance types it's extremely important to understand the evolution on our site why we have developed ec2 instances now",
    "start": "563930",
    "end": "572029"
  },
  {
    "text": "and why should you care so this is this slide I borrowed from a gentleman",
    "start": "572029",
    "end": "577520"
  },
  {
    "text": "Brendan Gregg he's a performance architect at Netflix he put together the chart the reason why this is extremely",
    "start": "577520",
    "end": "585230"
  },
  {
    "text": "important to understand is the evolution of ec2 over time at the top level you can see the Zen PV will like line item",
    "start": "585230",
    "end": "593029"
  },
  {
    "text": "number two you can see these are the PV driver based virtual machines why is it",
    "start": "593029",
    "end": "598100"
  },
  {
    "text": "important for you to understand this is a direct correlation between the driver",
    "start": "598100",
    "end": "603320"
  },
  {
    "text": "set and the chipset that we have on that's powering the ec2 it has a direct",
    "start": "603320",
    "end": "608450"
  },
  {
    "text": "correlation to the performance characteristics that you can gain out of virtual machines so in this case we",
    "start": "608450",
    "end": "615830"
  },
  {
    "text": "started off with PV drivers these are parallel virtual drivers basically what",
    "start": "615830",
    "end": "621020"
  },
  {
    "text": "happens is if your operating system is making hyper calls if it wants to talk to a hardware device like a NIC card or",
    "start": "621020",
    "end": "629240"
  },
  {
    "text": "a storage area of device what happens is those hyper calls get addressed at the",
    "start": "629240",
    "end": "635810"
  },
  {
    "text": "driver domain layer which is basically a hypervisor layer and from hypervisor those calls get delivered to the",
    "start": "635810",
    "end": "643459"
  },
  {
    "text": "hardware layer so there is always a latency aspect when you are rerouting",
    "start": "643459",
    "end": "650630"
  },
  {
    "text": "those requests those hyper calls from operating system to hypervisor and from hypervisor to the bare metal so",
    "start": "650630",
    "end": "657709"
  },
  {
    "text": "the PV drivers were doing okay in terms of handling those interrupts right but",
    "start": "657709",
    "end": "664910"
  },
  {
    "text": "there was a amount of latency and the latency could be anywhere between 10% to 50% of hardware",
    "start": "664910",
    "end": "671120"
  },
  {
    "text": "resources that is consumed by the PV fabric and then over time we launched",
    "start": "671120",
    "end": "676720"
  },
  {
    "text": "each VM based drivers hvm is a hardware virtual machine basically with the",
    "start": "676720",
    "end": "683570"
  },
  {
    "text": "advent of specialized microchips that we have developed what we could do is to",
    "start": "683570",
    "end": "688640"
  },
  {
    "text": "start offloading instead of routing your requests to the hypervisor domain we",
    "start": "688640",
    "end": "695839"
  },
  {
    "text": "started offloading some of those requests directly to the bare metal why is that important for you because networking has always been a bottleneck",
    "start": "695839",
    "end": "702950"
  },
  {
    "text": "for virtual machines and by offloading networking to a specialized network",
    "start": "702950",
    "end": "708410"
  },
  {
    "text": "acceleration card that is directly attached to the box your virtual machine",
    "start": "708410",
    "end": "713600"
  },
  {
    "text": "can talk directly to based on specialized drivers they can directly talk to the to the hardware devices and",
    "start": "713600",
    "end": "720950"
  },
  {
    "text": "with which you will get better performance lower jitter and that is how we are powering HPC workloads and over",
    "start": "720950",
    "end": "728600"
  },
  {
    "text": "time into 2013 we have introduced the alignment of number 5 here the srl we",
    "start": "728600",
    "end": "734209"
  },
  {
    "text": "single rutile virtualization is the technology that we have introduced through which we offloaded that",
    "start": "734209",
    "end": "739220"
  },
  {
    "text": "networking network acceleration so you may be familiar some of you may be",
    "start": "739220",
    "end": "744980"
  },
  {
    "text": "familiar that there is something called enhanced networking so when you enable enhanced networking on the ec2 instances",
    "start": "744980",
    "end": "751310"
  },
  {
    "text": "you are basically telling the operating system to leverage the direct connection to the virtualized hardware NIC card so",
    "start": "751310",
    "end": "759620"
  },
  {
    "text": "after solving that bottleneck with networking we targeted storage so",
    "start": "759620",
    "end": "764779"
  },
  {
    "text": "storage is another area where there is latency when you're doing i/o operations",
    "start": "764779",
    "end": "770240"
  },
  {
    "text": "against your EBS volumes so we extended the exact same framework to storage",
    "start": "770240",
    "end": "776450"
  },
  {
    "text": "layer and we solved that problem by introducing the C 3d type instances",
    "start": "776450",
    "end": "784899"
  },
  {
    "text": "essentially taking advantage of SRA OE to the storage layer so we saw the networking bottleneck we solved this",
    "start": "784899",
    "end": "792110"
  },
  {
    "text": "storage bottleneck and then we introduced at reinvent last year see",
    "start": "792110",
    "end": "798829"
  },
  {
    "text": "five instances and M five instances these are completely based on a new hypervisor",
    "start": "798829",
    "end": "804330"
  },
  {
    "text": "module that we have developed it's no longer based on Xen hypervisor this is KVM core kernel modules that we",
    "start": "804330",
    "end": "811230"
  },
  {
    "text": "have leveraged and we removed the ancillary functions like kaymu and just",
    "start": "811230",
    "end": "820730"
  },
  {
    "text": "created a very lightweight hypervisor so that there is no concept of dom0 dom0",
    "start": "820730",
    "end": "826830"
  },
  {
    "text": "is also referred to as the domain driver so all your hyper calls starting from c5",
    "start": "826830",
    "end": "832800"
  },
  {
    "text": "to m2 m5 and the latest generation servers which are based on the nitrous",
    "start": "832800",
    "end": "838290"
  },
  {
    "text": "system offloads directly to the hardware so it is as good as running your virtual machine",
    "start": "838290",
    "end": "844589"
  },
  {
    "text": "that has direct access to a bare-metal instance so there is no real based on",
    "start": "844589",
    "end": "850830"
  },
  {
    "text": "the performance metrics that was measured by Brendan Gregg at Netflix what he came up with is based on the",
    "start": "850830",
    "end": "857790"
  },
  {
    "text": "numbers he calculated it is less than 1% or less than 2% overhead using the Nitro",
    "start": "857790",
    "end": "864000"
  },
  {
    "text": "system versus Zen which still had up to 40% overhead in terms of managing hyper",
    "start": "864000",
    "end": "870000"
  },
  {
    "text": "calls so that's why this chart is important for you here is just a quick",
    "start": "870000",
    "end": "875490"
  },
  {
    "start": "874000",
    "end": "874000"
  },
  {
    "text": "overview of why this split driver domain model is important so if you're a guest",
    "start": "875490",
    "end": "881220"
  },
  {
    "text": "operating system this is where your virtual machine is running application at layer 7 when your layer layer 7 makes",
    "start": "881220",
    "end": "888690"
  },
  {
    "text": "a network connection call it goes through a network socket connection and the front end driver on the operating",
    "start": "888690",
    "end": "894029"
  },
  {
    "text": "system that number 2 here that's the one that connects to the backend driver which is your hypervisor domain and that",
    "start": "894029",
    "end": "900829"
  },
  {
    "text": "hypervisor domain the dom0 interpret interprets and those hyper calls and",
    "start": "900829",
    "end": "907950"
  },
  {
    "text": "talks to the network device so this was the old-school of implementation and",
    "start": "907950",
    "end": "912959"
  },
  {
    "text": "then what we did is with this or iov we offloaded the driver domain and this is",
    "start": "912959",
    "end": "918180"
  },
  {
    "start": "918000",
    "end": "918000"
  },
  {
    "text": "how now the hyper calls are handled so the advantage of this is these are all",
    "start": "918180",
    "end": "923790"
  },
  {
    "text": "by the way is hvm based I am ice so it is extremely important for you to understand PV a.m. is and hvm a.m. is",
    "start": "923790",
    "end": "931410"
  },
  {
    "text": "are two different methods to which you through which you can launch two instances we strongly encourage and",
    "start": "931410",
    "end": "937440"
  },
  {
    "text": "hvm base diem eyes why is it important because PV drivers do not support",
    "start": "937440",
    "end": "942690"
  },
  {
    "text": "hardware acceleration they don't the that's the disadvantage of PV so on the",
    "start": "942690",
    "end": "948390"
  },
  {
    "text": "HBM side you can take advantage of hardware acceleration meaning these hardware devices like the the networking",
    "start": "948390",
    "end": "956760"
  },
  {
    "text": "chip the the storage all these are virtualized and can be implemented",
    "start": "956760",
    "end": "962700"
  },
  {
    "text": "through a specialized drivers at the OS level so that you can get very high performance so the teams are again if",
    "start": "962700",
    "end": "971730"
  },
  {
    "start": "969000",
    "end": "969000"
  },
  {
    "text": "you have unless you have a specific necessity to either have an application that requires access to bare metal or",
    "start": "971730",
    "end": "978830"
  },
  {
    "text": "due to licensing needs you have to have your application running on bare metal 4",
    "start": "978830",
    "end": "984180"
  },
  {
    "text": "from a performance perspective there is no real reason why you have to run on bare metal we are happy have developed so many",
    "start": "984180",
    "end": "992220"
  },
  {
    "text": "efficiencies into the system that your nitro based virtual machines can deliver",
    "start": "992220",
    "end": "998790"
  },
  {
    "text": "near metal performance by doing the device pass-through so that's all CPU",
    "start": "998790",
    "end": "1005360"
  },
  {
    "start": "1003000",
    "end": "1003000"
  },
  {
    "text": "also it's important to understand the the landscape here there is GPU based and FPGA based instances also like I",
    "start": "1005360",
    "end": "1012500"
  },
  {
    "text": "mentioned earlier GPU again enabling high degree of parallelism you you still",
    "start": "1012500",
    "end": "1018740"
  },
  {
    "text": "have sequential instruction set pass to your CPU level similar to cpu-based",
    "start": "1018740",
    "end": "1025310"
  },
  {
    "text": "instances GPU also have sequential instruction set passed however you have",
    "start": "1025310",
    "end": "1030550"
  },
  {
    "text": "advantage of doing again their GPU has thousands of course there is a degree of",
    "start": "1030550",
    "end": "1036050"
  },
  {
    "text": "parallelism that you can take advantage of this is the reason why a graphics based workloads are recommended to be",
    "start": "1036050",
    "end": "1044020"
  },
  {
    "text": "run on GPU based instances and same thing for but to extend it even further",
    "start": "1044020",
    "end": "1051280"
  },
  {
    "text": "the field programmable gate array the FPGA based instances are massively",
    "start": "1051280",
    "end": "1057050"
  },
  {
    "text": "parallel they they're very flexible though there is no fixed instruction set",
    "start": "1057050",
    "end": "1062270"
  },
  {
    "text": "at the chip level it's field programmable so that means it gives you again or developers much more flexibility in",
    "start": "1062270",
    "end": "1069760"
  },
  {
    "text": "terms of leveraging FPGA and its functionality in summary again use more",
    "start": "1069760",
    "end": "1077140"
  },
  {
    "text": "modern operating systems that can take advantage of these hardware acceleration it's extremely important to understand",
    "start": "1077140",
    "end": "1082600"
  },
  {
    "text": "the drivers again now recommend you to leverage HP M based a Mis for your",
    "start": "1082600",
    "end": "1089770"
  },
  {
    "text": "workloads on AWS definitely leverage enhanced networking for for low latency",
    "start": "1089770",
    "end": "1097810"
  },
  {
    "text": "low jitter high performance in high performance network throughput and it's",
    "start": "1097810",
    "end": "1104830"
  },
  {
    "text": "always important to also do profiling your applications so now extending your is it so once you pick your hypervisor",
    "start": "1104830",
    "end": "1112330"
  },
  {
    "text": "once you amend your AMI and ec2 instances the next thing is operating at",
    "start": "1112330",
    "end": "1118000"
  },
  {
    "text": "scale is obviously meaning you are automating the functionality where you're getting on-demand instance types",
    "start": "1118000",
    "end": "1124360"
  },
  {
    "text": "or on-demand compute options and the best way to implement that at scale is",
    "start": "1124360",
    "end": "1130620"
  },
  {
    "text": "enabling auto scaling at the ec2 layer a lot of enterprise customers have done",
    "start": "1130620",
    "end": "1135640"
  },
  {
    "text": "this seamlessly the idea being you can scale based on the demand spikes one",
    "start": "1135640",
    "end": "1142270"
  },
  {
    "text": "pattern for auto scaling is replacing unhealthy instance types this is also called fleet management in a fleet",
    "start": "1142270",
    "end": "1148900"
  },
  {
    "text": "management scenario what you're doing is you have a set of web servers that are behind a load balancer say your the",
    "start": "1148900",
    "end": "1156820"
  },
  {
    "text": "hypervisor the ec2 hypervisor dies because of a hardware problem or whatever the problem is and then your",
    "start": "1156820",
    "end": "1162220"
  },
  {
    "text": "ec2 instance is no longer routable or it cannot ARP to the network then it cannot",
    "start": "1162220",
    "end": "1168010"
  },
  {
    "text": "ARP to the network obviously it cannot receive traffic what happens then is with ec2 auto scaling features it does a",
    "start": "1168010",
    "end": "1176250"
  },
  {
    "text": "health check on your behalf this is all automated and if there is a unhealthy",
    "start": "1176250",
    "end": "1182200"
  },
  {
    "text": "instance or impaired instance auto scaling group can automatically replace first of all a shutdown the instance the",
    "start": "1182200",
    "end": "1187810"
  },
  {
    "text": "impaired instance and replace it with a healthy instance and register it back to the ELB this gives you that ability to",
    "start": "1187810",
    "end": "1195340"
  },
  {
    "text": "have fleet management in an automated fashion",
    "start": "1195340",
    "end": "1199590"
  },
  {
    "text": "and then the second pattern is dynamic scaling this says this is also extremely",
    "start": "1200620",
    "end": "1206200"
  },
  {
    "text": "important for customers one classic example I can think of is the",
    "start": "1206200",
    "end": "1212799"
  },
  {
    "text": "healthcare.gov rollout oh it made press coverage a lot of issues during the rollout one was the registration during",
    "start": "1212799",
    "end": "1220090"
  },
  {
    "text": "the registration process itself the the system was down and then once the registration was done again there was",
    "start": "1220090",
    "end": "1225760"
  },
  {
    "text": "another event so if you if you look into this type of events it's extremely",
    "start": "1225760",
    "end": "1231340"
  },
  {
    "text": "important to understand the the crux of the problem there was again the",
    "start": "1231340",
    "end": "1236620"
  },
  {
    "text": "inability to scale because of unexpected spike in the workload right to handle",
    "start": "1236620",
    "end": "1242950"
  },
  {
    "text": "situations like that typically what customers would do is you are architecting for peak workload but then",
    "start": "1242950",
    "end": "1248200"
  },
  {
    "text": "if you're architecting for peak workload then there are phases where the workload",
    "start": "1248200",
    "end": "1253270"
  },
  {
    "text": "is not really operating at peak that means your hardware is sitting idle to",
    "start": "1253270",
    "end": "1258370"
  },
  {
    "text": "resolve that in a more TC I mean in a better better better TCO better return",
    "start": "1258370",
    "end": "1264309"
  },
  {
    "text": "on investment the the option is to leverage auto scaling with dynamic scaling option there are multiple ways",
    "start": "1264309",
    "end": "1271059"
  },
  {
    "text": "you can do this you could do based on CPU you can based on a specific time",
    "start": "1271059",
    "end": "1276520"
  },
  {
    "text": "window meaning scale up in the morning get scaled down and the scale is scaled back in in the evening so something like that",
    "start": "1276520",
    "end": "1283049"
  },
  {
    "text": "take advantage of dynamic scaling option again just to recap at scale",
    "start": "1283049",
    "end": "1290559"
  },
  {
    "start": "1286000",
    "end": "1286000"
  },
  {
    "text": "ec2 auto scaling benefits there are three important points here improve fault tolerance this is based on fleet",
    "start": "1290559",
    "end": "1297730"
  },
  {
    "text": "management increase the application availability this is making sure you have the right computing capacity",
    "start": "1297730",
    "end": "1302950"
  },
  {
    "text": "available for your application as as their requirements are and then lower costs",
    "start": "1302950",
    "end": "1308559"
  },
  {
    "text": "how can you lower costs based on again scaling only to meet your actual demand",
    "start": "1308559",
    "end": "1314409"
  },
  {
    "text": "not architecting for peak right all",
    "start": "1314409",
    "end": "1320110"
  },
  {
    "start": "1320000",
    "end": "1320000"
  },
  {
    "text": "right just a quick summary here also an example on how auto scaling works in the",
    "start": "1320110",
    "end": "1325720"
  },
  {
    "text": "first command set you can see the the the way this is actually implemented is you have to first create a launch",
    "start": "1325720",
    "end": "1332320"
  },
  {
    "text": "configuration on auto scaling you'll be defining you in the launch configuration you are a CH key pair your",
    "start": "1332320",
    "end": "1338739"
  },
  {
    "text": "instance ID in this case security groups and then you would define what instance",
    "start": "1338739",
    "end": "1344919"
  },
  {
    "text": "type you want as part of your auto scaling group and then basically",
    "start": "1344919",
    "end": "1350109"
  },
  {
    "text": "associate with that with a with a public IP address if you need so so once you",
    "start": "1350109",
    "end": "1355899"
  },
  {
    "text": "have your launch configuration the next step is to create your auto scaling policy and when you're creating auto",
    "start": "1355899",
    "end": "1362409"
  },
  {
    "text": "scaling group all you are doing is pass the parameter what the launch configuration that you have created in",
    "start": "1362409",
    "end": "1368619"
  },
  {
    "text": "the earlier step and telling auto scaling group to leverage that and register any new instances that were",
    "start": "1368619",
    "end": "1375070"
  },
  {
    "text": "launched as part of a auto scaling with a load with a load balancer so that way it's all automated it's pretty",
    "start": "1375070",
    "end": "1382450"
  },
  {
    "text": "straightforward it doesn't take a lot of coding for this out and you can automate this and",
    "start": "1382450",
    "end": "1388269"
  },
  {
    "text": "include this in your provisioning process be it formation or any other",
    "start": "1388269",
    "end": "1394029"
  },
  {
    "text": "provisioning process that you'd use as long as you are compatible with api's",
    "start": "1394029",
    "end": "1399959"
  },
  {
    "text": "all right just to summarize another",
    "start": "1399959",
    "end": "1405029"
  },
  {
    "text": "topic that we already covered the ec2 natural system we really deeply care",
    "start": "1405029",
    "end": "1411009"
  },
  {
    "text": "about continuous innovation continuous improvement on our on our platform all",
    "start": "1411009",
    "end": "1416139"
  },
  {
    "text": "compute platforms it's a sea Phi m5 give you these are the two new instance types",
    "start": "1416139",
    "end": "1423129"
  },
  {
    "text": "that are based on the new nitra system I already explained to you what the hardware acceleration mean and how the",
    "start": "1423129",
    "end": "1429669"
  },
  {
    "text": "chipset offloading to the network card or the or the storage nvme storage takes",
    "start": "1429669",
    "end": "1436089"
  },
  {
    "text": "advantage of the hardware acceleration the the bottom line for for these",
    "start": "1436089",
    "end": "1441820"
  },
  {
    "text": "instances is there's a anywhere between 25 to 50 percent price for performance",
    "start": "1441820",
    "end": "1447369"
  },
  {
    "text": "improvement based on the previous instance family which was then based we",
    "start": "1447369",
    "end": "1454989"
  },
  {
    "text": "are we have also extended this to this innovation into other instance classes",
    "start": "1454989",
    "end": "1460209"
  },
  {
    "text": "this is the storage optimized instance type you also have this concept of ena",
    "start": "1460209",
    "end": "1465989"
  },
  {
    "text": "typically with with elastic networking interface you get up to ten gigabits per second throughput",
    "start": "1465989",
    "end": "1473740"
  },
  {
    "text": "and then with the ena introduction of ena you can get up to 25 Gbps if you're",
    "start": "1473740",
    "end": "1479800"
  },
  {
    "text": "running in aggregate that in a placement group so extremely powerful you know and",
    "start": "1479800",
    "end": "1485320"
  },
  {
    "text": "also a lot of local storage available and bare metal this is we announced this",
    "start": "1485320",
    "end": "1491170"
  },
  {
    "text": "at reinvent there are two major implementations for bare metal the one",
    "start": "1491170",
    "end": "1497140"
  },
  {
    "text": "is again like I mentioned earlier at the I train census I think this is now generally available I three instances of",
    "start": "1497140",
    "end": "1503740"
  },
  {
    "text": "the metal instances you if you have specific requirements to run on bare",
    "start": "1503740",
    "end": "1510760"
  },
  {
    "text": "metal your application stack you can absolutely do that on ec2 bare metal but",
    "start": "1510760",
    "end": "1515830"
  },
  {
    "text": "the most important implementation has been for targeted for hybrid workloads a lot of my customers the customers I have",
    "start": "1515830",
    "end": "1523150"
  },
  {
    "start": "1516000",
    "end": "1516000"
  },
  {
    "text": "interacted with have some form of virtualization already on Prem most",
    "start": "1523150",
    "end": "1528670"
  },
  {
    "text": "likely it is VMware or some other similar technology so for customers who",
    "start": "1528670",
    "end": "1533800"
  },
  {
    "text": "have VMware and want to extend their VMware functionality into AWS because",
    "start": "1533800",
    "end": "1539230"
  },
  {
    "text": "they've already made significant IT investments and they won't extend that functionality and get the scaling and",
    "start": "1539230",
    "end": "1544270"
  },
  {
    "text": "integration into AWS in a in a use case like that hybrid implementation is the",
    "start": "1544270",
    "end": "1550060"
  },
  {
    "text": "obvious choice for customers because they just cannot lift and shift they want to extend the framework in a more",
    "start": "1550060",
    "end": "1556420"
  },
  {
    "text": "seamless pattern for those types of workloads we have launched at reinvent",
    "start": "1556420",
    "end": "1562110"
  },
  {
    "start": "1557000",
    "end": "1557000"
  },
  {
    "text": "VMware cloud on AWS there are a couple of sessions that is doing that how",
    "start": "1562110",
    "end": "1567820"
  },
  {
    "text": "they're going dive deep into this if you're interested do attend those sessions too but essentially the the",
    "start": "1567820",
    "end": "1573190"
  },
  {
    "text": "crux of it is VMware on AWS is an implementation is a is a partnership",
    "start": "1573190",
    "end": "1578710"
  },
  {
    "text": "with VMware in providing a solution for customers who want to extend their",
    "start": "1578710",
    "end": "1583960"
  },
  {
    "text": "VMware framework into AWS and under the covers VMware stack is taking advantage",
    "start": "1583960",
    "end": "1590200"
  },
  {
    "text": "of the bare metal instances that we have launched one question I often get asked",
    "start": "1590200",
    "end": "1595330"
  },
  {
    "text": "about cut from customers is what if I'm running VMware on top of bare metal",
    "start": "1595330",
    "end": "1600780"
  },
  {
    "text": "are you all doing nested virtualization meaning VMware virtualization and then under the cover si si - no we're not",
    "start": "1600780",
    "end": "1607080"
  },
  {
    "text": "doing nested virtualization it is only ESXi right and we're not doing another",
    "start": "1607080",
    "end": "1612600"
  },
  {
    "text": "layer of hypervisor these are bare metal servers directly available to ESX and",
    "start": "1612600",
    "end": "1618560"
  },
  {
    "text": "VMware is managing those servers meaning the the ESX layer and we are managing",
    "start": "1618560",
    "end": "1624840"
  },
  {
    "text": "the underlying bare metal so there is no latency or order all nested",
    "start": "1624840",
    "end": "1630510"
  },
  {
    "text": "virtualization that will affect your performance the very good advantage for",
    "start": "1630510",
    "end": "1635790"
  },
  {
    "text": "this is you can extend your VMware sddc on to AWS and seamlessly migrate you",
    "start": "1635790",
    "end": "1642360"
  },
  {
    "text": "could literally do a V motion from your safe you if you are in the vSphere interface you can take your virtual",
    "start": "1642360",
    "end": "1649140"
  },
  {
    "text": "machine that is running on VMware and do the motion into the into the AWS side so",
    "start": "1649140",
    "end": "1656130"
  },
  {
    "text": "that way you can actually start scaling better and if you are running into a scaling issue and you need the",
    "start": "1656130",
    "end": "1661950"
  },
  {
    "text": "additional compute capacity you could do that going into FN instances this is the",
    "start": "1661950",
    "end": "1670740"
  },
  {
    "text": "FPGA type instances that we were talking about and the reason why I wanted to highlight this is they during one of the",
    "start": "1670740",
    "end": "1679350"
  },
  {
    "text": "POC s there were they set a new world record for fastest analysis through through FPGA instances getting a hundred",
    "start": "1679350",
    "end": "1686970"
  },
  {
    "text": "genomes processed in a record time that's the kind of see the advantage",
    "start": "1686970",
    "end": "1692820"
  },
  {
    "text": "over over leveraging these types of instances on AWS is not only it gives",
    "start": "1692820",
    "end": "1698820"
  },
  {
    "text": "you the ability to experiment it also gives you ability to fail fast so try experimenting and if you are if",
    "start": "1698820",
    "end": "1705840"
  },
  {
    "text": "something is not working you can quickly iterate and also adjust your workload",
    "start": "1705840",
    "end": "1712500"
  },
  {
    "text": "requirements based on the output that you're getting and you can monitor to a cloud watch integrate that and and be",
    "start": "1712500",
    "end": "1718770"
  },
  {
    "text": "more productive next is the G tween sensors again we there is already a GPU",
    "start": "1718770",
    "end": "1726270"
  },
  {
    "start": "1720000",
    "end": "1720000"
  },
  {
    "text": "based instances so why did we introduce g3 this is even more highly g3 I mean",
    "start": "1726270",
    "end": "1732540"
  },
  {
    "text": "highly graphics driven processing workloads that the customers asked us to develop as another set of functionality",
    "start": "1732540",
    "end": "1740130"
  },
  {
    "text": "so we launched the G tween census in this case Halliburton leveraged the g3 to do seismic exploration a lot of",
    "start": "1740130",
    "end": "1749840"
  },
  {
    "text": "details here in terms of 3d rendering they needed specialized hardware to do",
    "start": "1749840",
    "end": "1754920"
  },
  {
    "text": "that type of high-level 3d rendering and we launched g3 instances that for that exact workload characteristic another",
    "start": "1754920",
    "end": "1766550"
  },
  {
    "text": "evolution this is the p3 instance types again a lot of customers have been",
    "start": "1766550",
    "end": "1772230"
  },
  {
    "text": "asking about hey what do I do with respect to a I and ml type workloads is",
    "start": "1772230",
    "end": "1777300"
  },
  {
    "text": "there any specialized ec2 instances for that we have again they just imagine the",
    "start": "1777300",
    "end": "1783930"
  },
  {
    "text": "scale of the data right I mean there is one point two trillion photos taken in 2017 that's massive scale right they did",
    "start": "1783930",
    "end": "1792270"
  },
  {
    "text": "roughly equates to about five terabytes per person and when you're doing a lot of computations that are specifically",
    "start": "1792270",
    "end": "1800550"
  },
  {
    "text": "for machine learning and artificial intelligence the p3 family is essentially targeted for the stat that",
    "start": "1800550",
    "end": "1807330"
  },
  {
    "text": "type of workload it gives you faster or machine learning training models and also the p3 instances provides up to one",
    "start": "1807330",
    "end": "1815210"
  },
  {
    "text": "petaflop of compute performance extremely performant all right the",
    "start": "1815210",
    "end": "1821340"
  },
  {
    "text": "second pattern here containers why is containers important but does anyone is",
    "start": "1821340",
    "end": "1827190"
  },
  {
    "text": "familiar arrays of fans of aware of containers and okay great back in the",
    "start": "1827190",
    "end": "1833130"
  },
  {
    "text": "day does anyone know solaris containers so solaris containers again i think this",
    "start": "1833130",
    "end": "1840690"
  },
  {
    "text": "was more than ten years ago that was when I was working as a system",
    "start": "1840690",
    "end": "1845700"
  },
  {
    "text": "administrator one not just even before a massive adoption of docker containers",
    "start": "1845700",
    "end": "1852750"
  },
  {
    "text": "one common model was we had a large box they wanted to virtualize multiple",
    "start": "1852750",
    "end": "1858540"
  },
  {
    "text": "operating systems on top of the box right and give a segmentation a piece of",
    "start": "1858540",
    "end": "1864270"
  },
  {
    "text": "the hardware dedicated to that box right so Solaris 10 provided that option for",
    "start": "1864270",
    "end": "1869820"
  },
  {
    "text": "containers that was fantastic you had two options either sparsh route or whole route zones those zones gave had access",
    "start": "1869820",
    "end": "1878039"
  },
  {
    "text": "to the hardware devices but the but the problem was it would still multiple",
    "start": "1878039",
    "end": "1883649"
  },
  {
    "text": "operating systems under the covers right do you still have a operating system and you're running you have the physical",
    "start": "1883649",
    "end": "1890999"
  },
  {
    "text": "bare metal on top of that you have a virtual machine that's running an instance of the operating system docker",
    "start": "1890999",
    "end": "1896759"
  },
  {
    "text": "took that concept of containers and they leveraged it and they made it a hundred",
    "start": "1896759",
    "end": "1902159"
  },
  {
    "text": "times better to container technology and a lot of customers have jumped onto that",
    "start": "1902159",
    "end": "1908340"
  },
  {
    "text": "bandwagon why is that important because not only it gives you a faster DevOps",
    "start": "1908340",
    "end": "1913769"
  },
  {
    "text": "model and but also it gives you ability to host basically run the leverage a lot",
    "start": "1913769",
    "end": "1920580"
  },
  {
    "text": "more applications using the same set of hardware but also give you segmented",
    "start": "1920580",
    "end": "1925879"
  },
  {
    "text": "space so that you are not criss-crossing so based on that feedback that we have",
    "start": "1925879",
    "end": "1932220"
  },
  {
    "text": "received from customers that they want they're already running docker containers on top of your AWS on top of",
    "start": "1932220",
    "end": "1938309"
  },
  {
    "text": "ec2 based on the feature request based on the customer feedback we have",
    "start": "1938309",
    "end": "1943529"
  },
  {
    "text": "launched two services ECS and eks what are these these are",
    "start": "1943529",
    "end": "1950070"
  },
  {
    "text": "basically the control plane for containers control plane meaning you are",
    "start": "1950070",
    "end": "1955769"
  },
  {
    "text": "instead of you managing every single aspect of not only provisioning the",
    "start": "1955769",
    "end": "1961019"
  },
  {
    "text": "hardware but also managing the traffic flow between the containers it is",
    "start": "1961019",
    "end": "1967590"
  },
  {
    "text": "extremely painful to manage this yourself because there is a lot of elements in terms of managing a huge",
    "start": "1967590",
    "end": "1974519"
  },
  {
    "text": "cluster of containers on top of virtual machines so we created a new control",
    "start": "1974519",
    "end": "1979799"
  },
  {
    "text": "plane and we give access to the control plane to you for you to leverage so your",
    "start": "1979799",
    "end": "1985099"
  },
  {
    "text": "interactions with containers on AWS is through that control plane and what we",
    "start": "1985099",
    "end": "1990509"
  },
  {
    "text": "are doing behind the scenes is the orchestration between the containers is offloaded to Amazon so that you can",
    "start": "1990509",
    "end": "1996480"
  },
  {
    "text": "focus on deploying your applications into containers so there are two control plain options one is ECS elastic",
    "start": "1996480",
    "end": "2003890"
  },
  {
    "text": "container service typically most of the docker deployments are leveraging ECS and then for folks who are used to",
    "start": "2003890",
    "end": "2012020"
  },
  {
    "text": "kubernetes this is Google based kubernetes and they want to extend that kubernetes functionality into AWS we",
    "start": "2012020",
    "end": "2019070"
  },
  {
    "text": "launched eks eks essentially the advantage of vks is if you have",
    "start": "2019070",
    "end": "2024670"
  },
  {
    "text": "kubernetes we are managing the master nodes across three availability zones so",
    "start": "2024670",
    "end": "2030860"
  },
  {
    "text": "that you have hide resiliency high durability in terms of your functionality and also availability",
    "start": "2030860",
    "end": "2037490"
  },
  {
    "text": "right uptime so you don't have to do your own H a clustering on your own and then we launched a four gate I will",
    "start": "2037490",
    "end": "2045080"
  },
  {
    "text": "touch on each of those a little bit benefits of containers over virtual machines is basically environment and",
    "start": "2045080",
    "end": "2052129"
  },
  {
    "start": "2046000",
    "end": "2046000"
  },
  {
    "text": "environmental consistency developer productivity why because if you think",
    "start": "2052130",
    "end": "2057440"
  },
  {
    "text": "about it if you are making code changes if you are having a monolithic application and if you have tens and",
    "start": "2057440",
    "end": "2066520"
  },
  {
    "text": "hundreds of subsystems that make up the monolithic application it's very difficult to make configuration changes",
    "start": "2066520",
    "end": "2071990"
  },
  {
    "text": "without breaking anything right so to solve that problem instead of having a monolithic",
    "start": "2071990",
    "end": "2078440"
  },
  {
    "text": "application containers based services based deployment model as has been very",
    "start": "2078440",
    "end": "2084290"
  },
  {
    "text": "popular with developers and to help you with that containers give you that flexibility to quickly iteratively",
    "start": "2084290",
    "end": "2090169"
  },
  {
    "text": "update a service through a micro services strategy and if something is not working out you can do again one of",
    "start": "2090169",
    "end": "2097640"
  },
  {
    "text": "my peers Yuri will be talking about CI CD through which you can actually do dynamic updates on the fly and if in",
    "start": "2097640",
    "end": "2105890"
  },
  {
    "text": "case you're having any issues with a specific service you can quickly in a Bluegreen deployment model you can",
    "start": "2105890",
    "end": "2112250"
  },
  {
    "text": "quickly revert back to previous version a lot of customers who are using",
    "start": "2112250",
    "end": "2118040"
  },
  {
    "start": "2116000",
    "end": "2116000"
  },
  {
    "text": "containers for AWS this is just a small segment I'm showcasing here but what I'm",
    "start": "2118040",
    "end": "2123050"
  },
  {
    "text": "trying to highlight here is did this is primetime this is the enterprise ready enterprise grade a lot of customers are",
    "start": "2123050",
    "end": "2130580"
  },
  {
    "text": "already taking advantage of containers on AWS of course the deployment models are different but on",
    "start": "2130580",
    "end": "2136480"
  },
  {
    "text": "essentially leveraging GCS and eks and the advantage is offload the heavy",
    "start": "2136480",
    "end": "2143339"
  },
  {
    "text": "lifting of managing the clusters and the",
    "start": "2143339",
    "end": "2148990"
  },
  {
    "text": "entire provisioning process to Amazon and you can focus on providing functionality for your users or for your",
    "start": "2148990",
    "end": "2156069"
  },
  {
    "text": "end users so quick overview about dcs here run containers securely inside your",
    "start": "2156069",
    "end": "2164740"
  },
  {
    "text": "V PC this is a this is a great add-on you have your en is attached in the V PC",
    "start": "2164740",
    "end": "2170770"
  },
  {
    "text": "so you have your you don't have to publicly expose your containers you can run you can extend your data center",
    "start": "2170770",
    "end": "2177520"
  },
  {
    "text": "functionality into AWS with say most of the customers that I interacted with have some form of VPN connectivity or",
    "start": "2177520",
    "end": "2183670"
  },
  {
    "text": "have a direct connect from data center into AWS and then I have a VP and",
    "start": "2183670",
    "end": "2188950"
  },
  {
    "text": "overlay to encrypt the traffic end-to-end and once you have the type of functionality what you can do is you",
    "start": "2188950",
    "end": "2195130"
  },
  {
    "text": "could do micro services deployment on AWS and expose your internal users to hit that micro services inside your V PC",
    "start": "2195130",
    "end": "2201730"
  },
  {
    "text": "why is that a important factor because as agencies are looking at leveraging",
    "start": "2201730",
    "end": "2207430"
  },
  {
    "text": "cloud computing InfoSec will often have a lot of questions about how am i",
    "start": "2207430",
    "end": "2213369"
  },
  {
    "text": "inadvertently exposing my traffic or my sensitive data to the Internet you don't",
    "start": "2213369",
    "end": "2219279"
  },
  {
    "text": "want to do that so to extend that functionality into AWS we provide VPC",
    "start": "2219279",
    "end": "2224559"
  },
  {
    "text": "the content the construct of VPC through which you can create private subnets deploy all your workloads into private",
    "start": "2224559",
    "end": "2230020"
  },
  {
    "text": "subnets so these are not routable through the internet these are 1980 RFC 1918 space so it's all internal only",
    "start": "2230020",
    "end": "2237279"
  },
  {
    "text": "your routers can route to that specific segment and tight integration with with",
    "start": "2237279",
    "end": "2244180"
  },
  {
    "text": "native AWS services that's also very good a very important aspect so one key differentiator I want you to understand",
    "start": "2244180",
    "end": "2250750"
  },
  {
    "text": "a lot of questions about what is ZK or where would I use ECS and eks what is",
    "start": "2250750",
    "end": "2255789"
  },
  {
    "text": "the differences between the two is from an eks perspective there is traffic will",
    "start": "2255789",
    "end": "2262569"
  },
  {
    "text": "hit the load balancer the load balancer will send the try to the nodes nodes are the ec2 instances",
    "start": "2262569",
    "end": "2268480"
  },
  {
    "text": "that are behind the scenes and there is an agent running on the nodes that agent will receive the traffic and then send",
    "start": "2268480",
    "end": "2274780"
  },
  {
    "text": "it to your pods in kubernetes so that is pattern one eks pattern two exact same",
    "start": "2274780",
    "end": "2281770"
  },
  {
    "text": "thing users will hit the insert of ELB they will hit a lb application load",
    "start": "2281770",
    "end": "2286809"
  },
  {
    "text": "balancer they a layer seven and there is no forwarding to an agent alb will directly send it to your task",
    "start": "2286809",
    "end": "2293980"
  },
  {
    "text": "notes so so easiest implementation is skipping one step so that's a little bit",
    "start": "2293980",
    "end": "2299829"
  },
  {
    "text": "more tighter integration on AWS side a little bit more functionality more",
    "start": "2299829",
    "end": "2306069"
  },
  {
    "text": "performant and more a bigger advantage in terms of ICS I'm not trying to",
    "start": "2306069",
    "end": "2311349"
  },
  {
    "text": "promote ECS or eks but what I'm trying to give you is to a good understanding but if you have kubernetes",
    "start": "2311349",
    "end": "2317859"
  },
  {
    "text": "implementation the advantage of vks is if you already have invested into kubernetes you can take advantage of",
    "start": "2317859",
    "end": "2324339"
  },
  {
    "text": "that you can pretty much compile the code docker eyes it or or essentially",
    "start": "2324339",
    "end": "2330099"
  },
  {
    "text": "containerize your application on your laptop and during the deployment time you can just deployed it to EE KS so it",
    "start": "2330099",
    "end": "2337450"
  },
  {
    "text": "will be very simple deployment for you and if you're already invested into kubernetes technology you can extend",
    "start": "2337450",
    "end": "2344260"
  },
  {
    "text": "that framework in through eks all right here is a process flow here so basically",
    "start": "2344260",
    "end": "2353319"
  },
  {
    "text": "you will create your container images this is where ECR comes into play right",
    "start": "2353319",
    "end": "2358690"
  },
  {
    "text": "and you are doing the task definitions the second step is defining your application stack and then basically",
    "start": "2358690",
    "end": "2365470"
  },
  {
    "text": "you're launching containers in easy as the third step where you're launching containers you have two options either",
    "start": "2365470",
    "end": "2371290"
  },
  {
    "text": "ec2 or Fargate the difference between the two is if you are going the ec2",
    "start": "2371290",
    "end": "2378910"
  },
  {
    "text": "deployment model then you are responsible for making sure you are giving enough easy to instances to ecs",
    "start": "2378910",
    "end": "2386950"
  },
  {
    "text": "control so that as you our demands are scaling for the application you will have to manually provision servers and",
    "start": "2386950",
    "end": "2393490"
  },
  {
    "text": "give it to ec2 into ECS so that the computations can be for",
    "start": "2393490",
    "end": "2399680"
  },
  {
    "text": "to the test notes registered with easiest with Fargate you don't have to",
    "start": "2399680",
    "end": "2405170"
  },
  {
    "text": "worry about provisioning servers you're still doing the same thing in terms of task definitions but for then when there",
    "start": "2405170",
    "end": "2411950"
  },
  {
    "text": "is more competition necessary ECS well talk to Fargate and forget will Auto provision instances based on your",
    "start": "2411950",
    "end": "2419510"
  },
  {
    "text": "requirements so that's the major difference between easy as deployment model with the ec2 or ECS deployment",
    "start": "2419510",
    "end": "2426680"
  },
  {
    "text": "model with Fargate and basically the",
    "start": "2426680",
    "end": "2431960"
  },
  {
    "start": "2430000",
    "end": "2430000"
  },
  {
    "text": "auto scaling functionality this is also extremely important another minut detail here when you are",
    "start": "2431960",
    "end": "2439190"
  },
  {
    "text": "scaling it at scale there are there with respect to ECS when you are not only you",
    "start": "2439190",
    "end": "2446150"
  },
  {
    "text": "are doing at the alb level the traffic routing but also you can assign IP",
    "start": "2446150",
    "end": "2452839"
  },
  {
    "text": "address to a single task node right so the maximum you can have the maximum number of en is is I believe about 12 en",
    "start": "2452839",
    "end": "2460069"
  },
  {
    "text": "eyes right so you have a limitation there in terms of number of task nodes in case of kubernetes the difference is",
    "start": "2460069",
    "end": "2467170"
  },
  {
    "text": "you can have an e and I as singly and I map to multiple pods so there could be",
    "start": "2467170",
    "end": "2473630"
  },
  {
    "text": "more number of pods leveraging the same e and I whereas on the easier side of",
    "start": "2473630",
    "end": "2478760"
  },
  {
    "text": "the house you will have a single task node assigned to a single en I so I hope that makes it clear for you but another",
    "start": "2478760",
    "end": "2488329"
  },
  {
    "text": "advantage of ECS is for for security",
    "start": "2488329",
    "end": "2493400"
  },
  {
    "text": "conscious customers who want to have fine-grained access control you can",
    "start": "2493400",
    "end": "2498770"
  },
  {
    "text": "assign roles to tasks which is not possible on the ek aside what does that mean why is that important because if",
    "start": "2498770",
    "end": "2505099"
  },
  {
    "text": "your InfoSec says I don't want you to configure I don't want you to key in",
    "start": "2505099",
    "end": "2511160"
  },
  {
    "text": "your credentials directly into the tasks take advantage of I am roles so what",
    "start": "2511160",
    "end": "2516410"
  },
  {
    "text": "what happens in that case is the task nodes will assume role and make a",
    "start": "2516410",
    "end": "2521599"
  },
  {
    "text": "service call to dynamodb or s3 or any other AWS services so that way you're",
    "start": "2521599",
    "end": "2527630"
  },
  {
    "text": "not actually keying in your credentials or into your application itself a very",
    "start": "2527630",
    "end": "2532730"
  },
  {
    "text": "good security so that's the main advantage just to give you an overview so without ECS",
    "start": "2532730",
    "end": "2541310"
  },
  {
    "text": "before easy as the top three boxes that you see there the scheduling the orchestration the cluster management and",
    "start": "2541310",
    "end": "2547160"
  },
  {
    "text": "the placement engine all of this was done by customers themselves it was a that's a very difficult step to do in",
    "start": "2547160",
    "end": "2555320"
  },
  {
    "text": "terms of managing but with TCS again here is the customer example TIBCO has",
    "start": "2555320",
    "end": "2561470"
  },
  {
    "start": "2557000",
    "end": "2557000"
  },
  {
    "text": "implemented a large-scale container placement by by deploying using ECS and",
    "start": "2561470",
    "end": "2569060"
  },
  {
    "text": "of course the result so element of lambda here the bottom line for this",
    "start": "2569060",
    "end": "2574300"
  },
  {
    "text": "specific customer our tip Co for this specific implementation is these reduce their service server footprint by 40",
    "start": "2574300",
    "end": "2581570"
  },
  {
    "text": "percent that's that's a lot of benefit a very good TCO but very good ROI and also",
    "start": "2581570",
    "end": "2589640"
  },
  {
    "text": "cut down on the deployment time why how can that cut down on the deployment time is basically you're doing CI CD all the",
    "start": "2589640",
    "end": "2596270"
  },
  {
    "text": "time in a DevOps model it's no longer a monolithic application where you have to take down just to make a small update",
    "start": "2596270",
    "end": "2602630"
  },
  {
    "text": "right that's the advantage you're more agile and you're the time to market for",
    "start": "2602630",
    "end": "2608210"
  },
  {
    "text": "you will be much faster versus a monolithic application running on a VM so that's the major advantage of running",
    "start": "2608210",
    "end": "2616900"
  },
  {
    "text": "containers so eks like I mentioned already it's a kubernetes managed kubernetes",
    "start": "2616900",
    "end": "2622430"
  },
  {
    "text": "control plane the same the deployment model is pretty straight forward you",
    "start": "2622430",
    "end": "2629000"
  },
  {
    "text": "will provision a cluster and then you develop you deploy your worker nodes worker nodes get instructions from the",
    "start": "2629000",
    "end": "2636380"
  },
  {
    "text": "eks master nodes those three master nodes on the left side those are the ones that the control plane that is",
    "start": "2636380",
    "end": "2642410"
  },
  {
    "text": "managed by Amazon and these three master nodes are if you are familiar with Aurora this is a similar implementation",
    "start": "2642410",
    "end": "2651440"
  },
  {
    "text": "meaning the master star in three different daisies that gives you higher resiliency when you're deploying on",
    "start": "2651440",
    "end": "2657380"
  },
  {
    "text": "it'll be us and here is the example architecture for eks on how it works you",
    "start": "2657380",
    "end": "2665420"
  },
  {
    "text": "can have multiple pods running and the advantage here is like I",
    "start": "2665420",
    "end": "2672860"
  },
  {
    "text": "mentioned in case of eks you can you can leverage the Eni for multiple pots so",
    "start": "2672860",
    "end": "2681110"
  },
  {
    "text": "you can aggregate more pods into the same set of n eyes all right now the",
    "start": "2681110",
    "end": "2689450"
  },
  {
    "text": "switching quickly into several s so we reviewed easy to review the containers",
    "start": "2689450",
    "end": "2694550"
  },
  {
    "text": "and then now it's event-driven programming this is another massive paradigm shift in terms of developer",
    "start": "2694550",
    "end": "2700220"
  },
  {
    "text": "capability to react to events on the fly without managing servers that that's",
    "start": "2700220",
    "end": "2705460"
  },
  {
    "text": "that that's a fantastic option for customers who want to take advantage of",
    "start": "2705460",
    "end": "2710500"
  },
  {
    "text": "several s programming quickly again now from a deployment perspective",
    "start": "2710500",
    "end": "2716560"
  },
  {
    "text": "essentially what you're doing is you're looking for specific events in this case on the left side of the screen you see a",
    "start": "2716560",
    "end": "2722630"
  },
  {
    "text": "blowed code to a WS lambda you are selecting a runtime environment these",
    "start": "2722630",
    "end": "2727850"
  },
  {
    "text": "are pre canned containers that are already created by AWS all you are doing is to take advantage of the container",
    "start": "2727850",
    "end": "2733940"
  },
  {
    "text": "environment behind the scenes we are running containers for you but all all you should care about is running the",
    "start": "2733940",
    "end": "2740480"
  },
  {
    "text": "it's different abstraction later at the end of the day if you think about all three different computer options the VMS",
    "start": "2740480",
    "end": "2747470"
  },
  {
    "text": "are giving you abstraction from hardware the containers are giving you abstraction from the from the virtual",
    "start": "2747470",
    "end": "2753470"
  },
  {
    "text": "machine and the serverless is giving you abstraction from everything below all you care about is in terms of just",
    "start": "2753470",
    "end": "2759560"
  },
  {
    "text": "executing code for a specific event to give you again a lot of customers of",
    "start": "2759560",
    "end": "2765020"
  },
  {
    "text": "enterprise-grade customers are leveraging lambda 4 for wide variety of",
    "start": "2765020",
    "end": "2770810"
  },
  {
    "text": "use cases and they'll give you just a quick overview on so for example if you",
    "start": "2770810",
    "end": "2778100"
  },
  {
    "text": "take a picture and you are uploading to s3 you want say you want to create a thumbnail as part of that process right",
    "start": "2778100",
    "end": "2785480"
  },
  {
    "text": "as long as soon as you upload an object you can trigger again this is what the",
    "start": "2785480",
    "end": "2790610"
  },
  {
    "text": "event-driven programming is all about you can trigger a lambda function that can to take your input file and then",
    "start": "2790610",
    "end": "2798080"
  },
  {
    "text": "process that resize or do whatever it is that's necessary to to",
    "start": "2798080",
    "end": "2803590"
  },
  {
    "text": "create the intended outcome we're doing again a lot of customers who are doing",
    "start": "2803590",
    "end": "2809170"
  },
  {
    "text": "this at scale so if you're wondering about how do you do",
    "start": "2809170",
    "end": "2814500"
  },
  {
    "text": "serverless programming at scale Zillow has done it they take online order is",
    "start": "2814500",
    "end": "2820780"
  },
  {
    "text": "plays and there is a dynamo DB database that is ingesting all these order",
    "start": "2820780",
    "end": "2826600"
  },
  {
    "text": "processing and it triggers a lambda function basically it's taking all those orders that is inserted into your key",
    "start": "2826600",
    "end": "2833500"
  },
  {
    "text": "value pair or a key value database and a lambda function runs the data transformation code and loads the",
    "start": "2833500",
    "end": "2840070"
  },
  {
    "text": "resultant set into a redshift database Y",
    "start": "2840070",
    "end": "2845230"
  },
  {
    "text": "into rich of database to do additional analytics on top of that here's a use",
    "start": "2845230",
    "end": "2850900"
  },
  {
    "text": "case for not a this is another use case batch processing in our in this case",
    "start": "2850900",
    "end": "2857260"
  },
  {
    "text": "it's a Fannie Mae's implementation of grid computing just imagine you can do",
    "start": "2857260",
    "end": "2862600"
  },
  {
    "text": "HPC grid computing at scale using lambda functions and for the folks who are not",
    "start": "2862600",
    "end": "2868450"
  },
  {
    "text": "familiar with this specific workload they in in this particular scenario",
    "start": "2868450",
    "end": "2873880"
  },
  {
    "text": "Fannie Mae was able to scale to up to 30,000 concurrent lambda functions and",
    "start": "2873880",
    "end": "2880240"
  },
  {
    "text": "that's right 30,000 lambda functions so the the idea is a massive amounts of",
    "start": "2880240",
    "end": "2886780"
  },
  {
    "text": "data is ingested into data Lake on s3 and based on the the key space within",
    "start": "2886780",
    "end": "2891850"
  },
  {
    "text": "the s3 it triggers a lambda function and it's doing a of grid computing HPC type",
    "start": "2891850",
    "end": "2898450"
  },
  {
    "text": "grid computing and batch processing on top of this so these are the different",
    "start": "2898450",
    "end": "2905710"
  },
  {
    "text": "patterns at scale I hope you walk away with with a good understanding of VMs",
    "start": "2905710",
    "end": "2912010"
  },
  {
    "text": "containers and server less I will be available in the hallway for any questions thank you all appreciate you",
    "start": "2912010",
    "end": "2919630"
  },
  {
    "text": "coming to this session [Applause]",
    "start": "2919630",
    "end": "2925499"
  }
]