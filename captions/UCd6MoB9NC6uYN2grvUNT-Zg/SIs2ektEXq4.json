[
  {
    "text": "good morning everybody my name is Jim Flanagan this is Norma Johansen and we",
    "start": "1220",
    "end": "7649"
  },
  {
    "text": "are software developers at AWS as developer tools team before we get",
    "start": "7649",
    "end": "12900"
  },
  {
    "text": "started this morning a couple of things we're gonna be showing some code on the screen so now's a good opportunity to",
    "start": "12900",
    "end": "18539"
  },
  {
    "text": "take us there's plenty of seats up front if you want to see in good detail the",
    "start": "18539",
    "end": "24930"
  },
  {
    "text": "other thing is please fill out the feedback give us a review of how we did that's how we tuned the content for next",
    "start": "24930",
    "end": "32730"
  },
  {
    "text": "year when filling out the evaluations please take into account that last night's show is a hard act to follow so",
    "start": "32730",
    "end": "41790"
  },
  {
    "text": "what we're gonna be talking about today is building dotnet applications on top of Amazon Web Services Norma and I are",
    "start": "41790",
    "end": "49620"
  },
  {
    "text": "going to present from the point of view of a small development shop just just the two of us it's like a start-up or a",
    "start": "49620",
    "end": "56250"
  },
  {
    "text": "side project and we are building a social photo sharing application and we",
    "start": "56250",
    "end": "61980"
  },
  {
    "text": "we we think it's really cool we want to run it in the cloud but we want to focus",
    "start": "61980",
    "end": "67110"
  },
  {
    "text": "more on what makes our application cool and interesting rather than you know",
    "start": "67110",
    "end": "72780"
  },
  {
    "text": "more on our application and less about creating and managing cloud resources so",
    "start": "72780",
    "end": "78869"
  },
  {
    "text": "we're gonna be using a elastic beanstalk to make our life easier and we're gonna be using DynamoDB and",
    "start": "78869",
    "end": "84900"
  },
  {
    "text": "and Amazon s3 the other thing we want to do is we want to develop in addition to",
    "start": "84900",
    "end": "91259"
  },
  {
    "text": "the web version of our application a Windows Phone or Windows Store version",
    "start": "91259",
    "end": "96390"
  },
  {
    "text": "of the application so we're gonna show how we can sort of reuse our work in",
    "start": "96390",
    "end": "101939"
  },
  {
    "text": "that process now a side project norm and Jim are going to be using some of the",
    "start": "101939",
    "end": "107340"
  },
  {
    "text": "tools that day job Norman Jim along with our colleagues at David aww us make",
    "start": "107340",
    "end": "114540"
  },
  {
    "text": "we're gonna be coding in C sharp so we're gonna code against the AWS SDK for dotnet",
    "start": "114540",
    "end": "120409"
  },
  {
    "text": "we're gonna be using Visual Studio toolkit for debugging and managing and",
    "start": "120409",
    "end": "127259"
  },
  {
    "text": "inspecting our cloud resources we can use the powershell tools to manage our",
    "start": "127259",
    "end": "134310"
  },
  {
    "text": "resources and do simple scripting tasks and like i mentioned we're going to be using elastic beanstalk and it's",
    "start": "134310",
    "end": "140160"
  },
  {
    "text": "customization features to deploy our application a few words about these",
    "start": "140160",
    "end": "145620"
  },
  {
    "text": "tools since last reinvent you've asked us for the ability to code against win",
    "start": "145620",
    "end": "152069"
  },
  {
    "text": "win phone and win Windows Store applications so we recently just a week",
    "start": "152069",
    "end": "157650"
  },
  {
    "text": "ago released the version two of the AWS SDK for net which supports those",
    "start": "157650",
    "end": "163050"
  },
  {
    "text": "platforms the AWS toolkit for visual studio now supports Visual Studio 2013",
    "start": "163050",
    "end": "168780"
  },
  {
    "text": "and you've asked us for the ability to customize your beanstalk instances and",
    "start": "168780",
    "end": "175440"
  },
  {
    "text": "deploy them more securely and for single instance environments rather than load-balanced environments so we've",
    "start": "175440",
    "end": "180989"
  },
  {
    "text": "added that to the elastic beanstalk container so now norm is going to show",
    "start": "180989",
    "end": "186959"
  },
  {
    "text": "us both give an overview of what our application looks like we're going to dive into how we implemented parts of",
    "start": "186959",
    "end": "194220"
  },
  {
    "text": "the in for the application",
    "start": "194220",
    "end": "197720"
  },
  {
    "text": "in this application we can add comments to our pictures we can also upload other",
    "start": "211849",
    "end": "217709"
  },
  {
    "text": "images as well so cloud Shutts uses DynamoDB and Amazon",
    "start": "217709",
    "end": "226379"
  },
  {
    "text": "s3 we're learning our AV skills on the",
    "start": "226379",
    "end": "231690"
  },
  {
    "text": "flyer so cartridge is going to let the images in s3 and we use down at the beach but",
    "start": "231690",
    "end": "238439"
  },
  {
    "text": "their actual image data and we chose DynamoDB for a couple reasons let's Jim mention we're just a two dev",
    "start": "238439",
    "end": "244860"
  },
  {
    "text": "shop and we just really want to play with the photos and do what we want to make things magical in that we don't want to deal with infrastructure things",
    "start": "244860",
    "end": "251090"
  },
  {
    "text": "so Dino DB we don't have to think about setting up our database server",
    "start": "251090",
    "end": "258120"
  },
  {
    "text": "making sure it's being properly replicated in case it goes down we not something fully managed and that's what",
    "start": "258120",
    "end": "263520"
  },
  {
    "text": "download to be gives us the second reason is again falls back to that we're",
    "start": "263520",
    "end": "268680"
  },
  {
    "text": "just the two dev shop and we want easy scalability we don't want to think about what happens when we grow beyond the",
    "start": "268680",
    "end": "276030"
  },
  {
    "text": "demand of our current database server how do we replace that what do we do about query optimizations and things that we want easy scalability and down",
    "start": "276030",
    "end": "282810"
  },
  {
    "text": "our DB we can basically go in we can say well we think the scalability is now and then once our application becomes that",
    "start": "282810",
    "end": "289860"
  },
  {
    "text": "next big hot application we can just adjust the knob to what the new demand is for our application so how does that",
    "start": "289860",
    "end": "305610"
  },
  {
    "text": "if you work we're mastering the skill I promise",
    "start": "305610",
    "end": "312090"
  },
  {
    "text": "so download BB works like most of the databases where you store all your data in tables tables and dynamic do not have",
    "start": "312090",
    "end": "319030"
  },
  {
    "text": "a fixed schema and for each table you're able to specify how much provision",
    "start": "319030",
    "end": "325180"
  },
  {
    "text": "throughput you want done would be to reserve for that table which goes back to that knob I was talking earlier so",
    "start": "325180",
    "end": "333850"
  },
  {
    "text": "when we create our table we need to define what is the key for the table and DynamoDB keys are broken up into two",
    "start": "333850",
    "end": "339910"
  },
  {
    "text": "parts there's the hash key which is what Dynegy uses to provision your data",
    "start": "339910",
    "end": "345880"
  },
  {
    "text": "across the Dino degree system so it's really important when you choose what is",
    "start": "345880",
    "end": "350979"
  },
  {
    "text": "the attribute that is your hash key that it's something that the data is going to be evenly distributed for best",
    "start": "350979",
    "end": "357400"
  },
  {
    "text": "performance the second part which is optional is called a range key which is",
    "start": "357400",
    "end": "362979"
  },
  {
    "text": "a really useful part in that it lets you be able to do queries on that attribute within the scope of your hash key sorry",
    "start": "362979",
    "end": "376680"
  },
  {
    "text": "so when we create our damnably tables we need to specify what is the read and write capacity for this table and this",
    "start": "377160",
    "end": "384490"
  },
  {
    "text": "is that knob that I mentioned earlier where we can set these values really low and then monitor the usage of it and",
    "start": "384490",
    "end": "391539"
  },
  {
    "text": "adjust these read and write capacities as the demand grows now the dynami",
    "start": "391539",
    "end": "400840"
  },
  {
    "text": "website has a lot of great information on exactly how reading right capacity breakdown but it basically says how much",
    "start": "400840",
    "end": "405940"
  },
  {
    "text": "reason right you can do per second so to help you keep track of how your",
    "start": "405940",
    "end": "412780"
  },
  {
    "text": "application is using data TV Dinah B is gonna push all of its metrics data to cloud watch and in cloud watch you can",
    "start": "412780",
    "end": "420250"
  },
  {
    "text": "set up alarms or you can go and view the graph and you can see how much you're",
    "start": "420250",
    "end": "425380"
  },
  {
    "text": "using of your consumed capacity and then make those appropriate adjustments you can find out hey we've way over",
    "start": "425380",
    "end": "431080"
  },
  {
    "text": "provisioned we can lower those values down or we've under we need to increase the values so what",
    "start": "431080",
    "end": "438320"
  },
  {
    "text": "happens when our application starts trying to read or write beyond what we've provisioned well the service is",
    "start": "438320",
    "end": "446420"
  },
  {
    "text": "going to throw back throttling errors and if you're using any one of the ATS SDKs what they're gonna do is they're",
    "start": "446420",
    "end": "452750"
  },
  {
    "text": "gonna catch those throttling errors and automatically retry them with an exponential back-off and this will get",
    "start": "452750",
    "end": "459830"
  },
  {
    "text": "you through if your application has a quick sudden burst of activity like you can see in this graph or it then goes back to normal but if you're constantly",
    "start": "459830",
    "end": "466910"
  },
  {
    "text": "giving the throttling years that's when again you need to be able to go in and adjust those read/write capacities and",
    "start": "466910",
    "end": "472430"
  },
  {
    "text": "it's important to note when you adjust those table at those values your table is still active so there's no downtime",
    "start": "472430",
    "end": "477920"
  },
  {
    "text": "while dining views of reprovision into this space for that table so let's",
    "start": "477920",
    "end": "483110"
  },
  {
    "text": "switch over to visual studio and we'll show you how you can its roof adjuster you'll create when you're dying to be",
    "start": "483110",
    "end": "488480"
  },
  {
    "text": "tables we're going to use the Explorer a",
    "start": "488480",
    "end": "498980"
  },
  {
    "text": "visual three to explore if you haven't seen it or install that you can download it from our website once you do under",
    "start": "498980",
    "end": "505640"
  },
  {
    "text": "the views menu will be the ad based Explorer menu option under dynamodb we're gonna see all the tables that",
    "start": "505640",
    "end": "512120"
  },
  {
    "text": "we've created for our application we've already got them but let's go ahead and walk through the creation process to see",
    "start": "512120",
    "end": "519229"
  },
  {
    "text": "what that's like so we're gonna recreate the image metadata table and so for our",
    "start": "519229",
    "end": "527030"
  },
  {
    "text": "image metadata table what we're going to do is we're going to use the user ID as the hash key so we're gonna provision",
    "start": "527030",
    "end": "532670"
  },
  {
    "text": "all of the images across the base out for the user ID and then we are going to",
    "start": "532670",
    "end": "538700"
  },
  {
    "text": "optionally turn on a the rank of the range key and set that to image ID so",
    "start": "538700",
    "end": "543770"
  },
  {
    "text": "the full key is going to be the combination of your user ID and the image ID now great feature that Dinah be",
    "start": "543770",
    "end": "550850"
  },
  {
    "text": "added this year is called local secondary indexes in our application we want to be able to get what are the",
    "start": "550850",
    "end": "556280"
  },
  {
    "text": "latest images that users have put in so we're gonna put an index on the upload date field so we can use that to get",
    "start": "556280",
    "end": "563210"
  },
  {
    "text": "those latest images they also just announced yesterday global secondary indexes which we didn't",
    "start": "563210",
    "end": "568709"
  },
  {
    "text": "use yet in our application but there's some great use cases you can use with that as well and down below you can see",
    "start": "568709",
    "end": "577500"
  },
  {
    "text": "there's that read and write capacity we're gonna leave these just at the default since we're still in early development stages and this also just",
    "start": "577500",
    "end": "583680"
  },
  {
    "text": "keeps us in the free tier if we're done with DB we could also turn on some basic cloud watch alarms",
    "start": "583680",
    "end": "591230"
  },
  {
    "text": "since our tables are created we're just gonna cancel that out for now though so",
    "start": "591920",
    "end": "604170"
  },
  {
    "text": "for the.net SDK we actually have three different api's you can use to interact with Diner DB the first api we call is",
    "start": "604170",
    "end": "612720"
  },
  {
    "text": "the low-level API which works like all of the other clients in the.net SDK where there's a client object that",
    "start": "612720",
    "end": "618990"
  },
  {
    "text": "represents the service it's got a method for every one of these service operations and each one of those takes",
    "start": "618990",
    "end": "625649"
  },
  {
    "text": "in a request object and it hands you back a response object and this API works really great if you're trying to",
    "start": "625649",
    "end": "631079"
  },
  {
    "text": "get this close to Dinah B as possible and you want to do things like exactly control how your date is being marshaled",
    "start": "631079",
    "end": "637649"
  },
  {
    "text": "into down on TV the second API we have is called the document model API this",
    "start": "637649",
    "end": "644399"
  },
  {
    "text": "works a lot like dotnet Dictionary where you create these document objects which act a lot like deck dictionaries you set",
    "start": "644399",
    "end": "651810"
  },
  {
    "text": "your fields in there including the hash key and range key in our case it's the user ID in image ID and then using the",
    "start": "651810",
    "end": "657810"
  },
  {
    "text": "table object we can then put those documents in down in TV and get them back out now this API works really well",
    "start": "657810",
    "end": "664649"
  },
  {
    "text": "if the problem you're trying to solve where each item in the table has a different set of attributes on it like a",
    "start": "664649",
    "end": "670829"
  },
  {
    "text": "heterogeneous set of data and then the third API we have is called the objects",
    "start": "670829",
    "end": "677010"
  },
  {
    "text": "persistence model API if this is the API we use in our application is what it",
    "start": "677010",
    "end": "682079"
  },
  {
    "text": "does is it takes dotnet annotated classes that the SDK uses to understand how do I save instances of these classes",
    "start": "682079",
    "end": "689730"
  },
  {
    "text": "inside DynamoDB let's go back to visual studio and see some of the annotated",
    "start": "689730",
    "end": "695279"
  },
  {
    "text": "classes we used for application so our application we care about three different entities we care",
    "start": "695279",
    "end": "702270"
  },
  {
    "text": "about user profiles image metadata and comments let's look at the image",
    "start": "702270",
    "end": "707700"
  },
  {
    "text": "metadata class at the top you can see an annotation that indicates what's the",
    "start": "707700",
    "end": "713910"
  },
  {
    "text": "table I want this class to be stored in it has a public default constructor",
    "start": "713910",
    "end": "718980"
  },
  {
    "text": "which is required so the SDK is able to create instances of this object we then",
    "start": "718980",
    "end": "724650"
  },
  {
    "text": "annotate what is the hash key and range key the user ID in image ID and since we",
    "start": "724650",
    "end": "731130"
  },
  {
    "text": "have upload date as a local secondary index that is annotated as well now all",
    "start": "731130",
    "end": "737070"
  },
  {
    "text": "other public properties will be persisted and entity by default if there's fields that you don't want",
    "start": "737070",
    "end": "743250"
  },
  {
    "text": "persistent and done in a beat you can mark them as ignored which we've done here and we've done that because the",
    "start": "743250",
    "end": "748590"
  },
  {
    "text": "data actually we've written a round dynami fills these fields in during the runtime so let's look at one of our unit",
    "start": "748590",
    "end": "757620"
  },
  {
    "text": "tests to see how you use these classes here in the setup method of our unit",
    "start": "757620",
    "end": "762900"
  },
  {
    "text": "test we create what's called the dynamic dbcontext object and this is sort of the central object you use when working with",
    "start": "762900",
    "end": "768930"
  },
  {
    "text": "the objects persistence model API it contains cache and information about diabetes because it's doing described",
    "start": "768930",
    "end": "775080"
  },
  {
    "text": "tables to kind of understand what's the keys for that and indexes so it's important to hold on to this object and",
    "start": "775080",
    "end": "781110"
  },
  {
    "text": "not recreate it on a per request basis put in a factory or something like that and we look at our test you can see we",
    "start": "781110",
    "end": "788310"
  },
  {
    "text": "just sort of instantiate the instance of our image metadata we said it's fields and then on the context object we call",
    "start": "788310",
    "end": "795480"
  },
  {
    "text": "Save to get back out we can call our load method passing in our hash and range key and then we can also call",
    "start": "795480",
    "end": "802380"
  },
  {
    "text": "delete to remove the object as well",
    "start": "802380",
    "end": "806060"
  },
  {
    "text": "so s3 is the other service we use in our application we use that distort the",
    "start": "813930",
    "end": "819130"
  },
  {
    "text": "actual image files which is where as a great use case for s3 as three is great for just taking a chunk of data in this",
    "start": "819130",
    "end": "825760"
  },
  {
    "text": "case is our images and putting it in a bucket in s3 and s3 can we call it an object and then it's gonna be uniquely",
    "start": "825760",
    "end": "832720"
  },
  {
    "text": "identified in that bucket with a key it's a unique string that you created when you decided to put that object into",
    "start": "832720",
    "end": "839170"
  },
  {
    "text": "s3 another great feature of s3 is that all the objects you put in s3 our URL",
    "start": "839170",
    "end": "845290"
  },
  {
    "text": "Dressel so that we can use those URLs to essentially put into our HTML pages so",
    "start": "845290",
    "end": "850810"
  },
  {
    "text": "we can directly put those link those images in there let's go back to the toolkit and we'll see how we use s3 in",
    "start": "850810",
    "end": "857080"
  },
  {
    "text": "the toolkit under the s3 node we can see",
    "start": "857080",
    "end": "863740"
  },
  {
    "text": "these are the buckets we have for our account we can go ahead and double click those and now bring up the bucket",
    "start": "863740",
    "end": "868840"
  },
  {
    "text": "browser this shows you all the objects that you can have in this bucket and",
    "start": "868840",
    "end": "874690"
  },
  {
    "text": "from here you can upload more download those we could also double click on our image right now and that's gonna pop up",
    "start": "874690",
    "end": "881170"
  },
  {
    "text": "in a browser and this is again using that URL dress able feature with the toolkits doing under the covers is it's",
    "start": "881170",
    "end": "887890"
  },
  {
    "text": "generating a pre signed URL which gives access to that object for a short amount of time using that specific hero and",
    "start": "887890",
    "end": "895330"
  },
  {
    "text": "then the toolkit just hands that URL to the browser and say go open this up and that's that same sort of technique we're",
    "start": "895330",
    "end": "901240"
  },
  {
    "text": "gonna use with our web application so for our application we developed a data",
    "start": "901240",
    "end": "908380"
  },
  {
    "text": "access layer to encapsulate both working with down ODB in Amazon s3 now I just",
    "start": "908380",
    "end": "918330"
  },
  {
    "text": "now as Jim mentioned we want to create a Windows Store app as well Windows Store apps have the requirement that all",
    "start": "923149",
    "end": "929459"
  },
  {
    "text": "operations that go over network must be called asynchronously this is done so",
    "start": "929459",
    "end": "934800"
  },
  {
    "text": "that your applications stay very user responsive so when we use their SDK and",
    "start": "934800",
    "end": "939959"
  },
  {
    "text": "our data access later we only use the asynchronous API from the SDK so we could reuse the code in both platforms",
    "start": "939959",
    "end": "947300"
  },
  {
    "text": "so I'm gonna just want walk through a couple of our methods in our data access layer the first is how we handle the",
    "start": "947300",
    "end": "954180"
  },
  {
    "text": "uploads so the first thing we need to do is we need to create that we're going to upload to s3 and we need that unique s3",
    "start": "954180",
    "end": "961649"
  },
  {
    "text": "key so we create that key by taking the word images and then slash putting in",
    "start": "961649",
    "end": "967620"
  },
  {
    "text": "the users username slash the file name once we have that key we set up a request object and that request object",
    "start": "967620",
    "end": "975300"
  },
  {
    "text": "takes in the bucket we want to put the picture to our unique key and it also",
    "start": "975300",
    "end": "980579"
  },
  {
    "text": "takes that stream which contains the actual binary data of the image we can",
    "start": "980579",
    "end": "985620"
  },
  {
    "text": "also add a progress callback listener which we're going to show off when we get to our Windows Store application and",
    "start": "985620",
    "end": "990949"
  },
  {
    "text": "then using this through client we'll just put that into s3 and then once that's complete we're gonna save the",
    "start": "990949",
    "end": "998009"
  },
  {
    "text": "metadata in the identity to be very similar to how you saw us doing in our unit test earlier so given that sort of",
    "start": "998009",
    "end": "1006800"
  },
  {
    "text": "overview of how we're using those services and so Jim's gonna walk us through now how we're gonna take our application and deploy it to the cloud",
    "start": "1006800",
    "end": "1014889"
  },
  {
    "text": "so we mentioned that we want to get our application into the cloud easily and not have to think too much about the",
    "start": "1014889",
    "end": "1020630"
  },
  {
    "text": "resources that are being created so elastic Beanstalk is a natural choice for this it's going to create all of the",
    "start": "1020630",
    "end": "1028579"
  },
  {
    "text": "resources that we need on our behalf but these resources of the instances and",
    "start": "1028579",
    "end": "1033709"
  },
  {
    "text": "load balancers are for and so forth aren't hidden behind the Beanstalk abstraction you retain full control of",
    "start": "1033709",
    "end": "1040159"
  },
  {
    "text": "all of these resources and it'll also allow us as we're developing in a tight iteration loop to deploy our application",
    "start": "1040159",
    "end": "1047839"
  },
  {
    "text": "directly from visual studio now as we've been developing our",
    "start": "1047839",
    "end": "1053650"
  },
  {
    "text": "application we've we've been giving our application the permissions it needs by putting AWS credentials in the web",
    "start": "1053650",
    "end": "1060190"
  },
  {
    "text": "config file which is fine for development but we don't want to deploy those credentials to elastic Beanstalk",
    "start": "1060190",
    "end": "1066670"
  },
  {
    "text": "for a couple of reasons Norman I want to have a best practice of rotating our credentials every once in a",
    "start": "1066670",
    "end": "1072370"
  },
  {
    "text": "while on a periodic basis so every time we rotate our credentials if they were on our Beanstalk instances we would have",
    "start": "1072370",
    "end": "1079630"
  },
  {
    "text": "to update our application we don't want to do that also we want to sort of limit the blast radius and and not have to",
    "start": "1079630",
    "end": "1086380"
  },
  {
    "text": "worry about where our credentials are so the way we can do that is to use AWS",
    "start": "1086380",
    "end": "1091540"
  },
  {
    "text": "Identity and Access Management to create a role and a role simply describes a set",
    "start": "1091540",
    "end": "1098710"
  },
  {
    "text": "of resources and what actions can be taken upon them so in this simple example we have an s3 bucket that's the",
    "start": "1098710",
    "end": "1105700"
  },
  {
    "text": "bucket for our application and we want to be able to call get object and put object on it for our dynamodb image",
    "start": "1105700",
    "end": "1113020"
  },
  {
    "text": "metadata table we want to be able to call get item and put item so once we've",
    "start": "1113020",
    "end": "1119200"
  },
  {
    "text": "defined a role we can tell elastic Beanstalk to use that role so when it",
    "start": "1119200",
    "end": "1126310"
  },
  {
    "text": "creates our ec2 instances instead of looking in the web.config for our",
    "start": "1126310",
    "end": "1132730"
  },
  {
    "text": "credentials the AWS SDK will see that an instance profile has been created for",
    "start": "1132730",
    "end": "1139210"
  },
  {
    "text": "our instance it will use that instance role to create temporary credentials which are scoped to just the permissions",
    "start": "1139210",
    "end": "1147280"
  },
  {
    "text": "that we gave it and so our application can get to the resources it needs without having to ship credentials out",
    "start": "1147280",
    "end": "1154180"
  },
  {
    "text": "there so now that we have our role defined and our application put together how do we get it into to elastic",
    "start": "1154180",
    "end": "1161710"
  },
  {
    "text": "Beanstalk to do that we go back to visual studio and right click on the web application",
    "start": "1161710",
    "end": "1169450"
  },
  {
    "text": "project and select publish to AWS and this brings up the deployment wizard now",
    "start": "1169450",
    "end": "1175960"
  },
  {
    "text": "there are multiple ways to deploy an application to elastic beanstalk or to attune to the AWS cloud and",
    "start": "1175960",
    "end": "1182780"
  },
  {
    "text": "are gonna focus on elastic beanstalk and so on the next pane will select a name",
    "start": "1182780",
    "end": "1189050"
  },
  {
    "text": "for our application by default it's just our web application name and then we can",
    "start": "1189050",
    "end": "1194960"
  },
  {
    "text": "create an environment now you can have multiple environments for an application you can have a test environment a dev",
    "start": "1194960",
    "end": "1200930"
  },
  {
    "text": "environment production and staging as many environments as you like and you",
    "start": "1200930",
    "end": "1206030"
  },
  {
    "text": "can select here what kind of environment you want this to be since this is our development environment we just need a",
    "start": "1206030",
    "end": "1211550"
  },
  {
    "text": "single instance we don't need to scale up or anything on the next slide you can see we can",
    "start": "1211550",
    "end": "1219680"
  },
  {
    "text": "select the instance size so we just need a micro instance for our purposes today",
    "start": "1219680",
    "end": "1225620"
  },
  {
    "text": "and here's where you select the I am role that we created earlier that's that",
    "start": "1225620",
    "end": "1231230"
  },
  {
    "text": "will give our instances the permissions it needs to use those cloud resources so",
    "start": "1231230",
    "end": "1237830"
  },
  {
    "text": "we're going to skip the rest of this dialogue which has a some advanced configuration and go to the the review",
    "start": "1237830",
    "end": "1244400"
  },
  {
    "text": "screen and this shows us all of the options that we chose we can deploy our",
    "start": "1244400",
    "end": "1250190"
  },
  {
    "text": "application right from here one of the things I want to point out is as Norman I get more sophisticated we want to",
    "start": "1250190",
    "end": "1256430"
  },
  {
    "text": "build a continuous integration system and build system and deploy system and we don't want to have to deploy our",
    "start": "1256430",
    "end": "1261530"
  },
  {
    "text": "application from visuals a studio all the time we can save these settings to a configuration file and use a standalone",
    "start": "1261530",
    "end": "1268730"
  },
  {
    "text": "command line version of this deployment tool to deploy programmatically so let's",
    "start": "1268730",
    "end": "1274760"
  },
  {
    "text": "go ahead and click deploy and you'll see that this causes the web application to",
    "start": "1274760",
    "end": "1281930"
  },
  {
    "text": "get built and after the build phase we upload the bits to elastic Beanstalk and",
    "start": "1281930",
    "end": "1290240"
  },
  {
    "text": "that'll take a couple of seconds this would be the time firstly the long",
    "start": "1290240",
    "end": "1298450"
  },
  {
    "text": "oh yeah la Oh because it's the first build of the morning of course after the",
    "start": "1299180",
    "end": "1304310"
  },
  {
    "text": "party Visual Studio is yes slow well I took my service to the party last night",
    "start": "1304310",
    "end": "1310570"
  },
  {
    "text": "that's that's why we called it live at reinvention so what would happen next is",
    "start": "1312100",
    "end": "1319160"
  },
  {
    "text": "that we would see the events screen for elastic beanstalk and that would show us",
    "start": "1319160",
    "end": "1324500"
  },
  {
    "text": "on the state of our environment and what resources were in the state of being created and what had been created as",
    "start": "1324500",
    "end": "1330860"
  },
  {
    "text": "well as any error messages or warnings that would come up now we took the precaution of launching an environment",
    "start": "1330860",
    "end": "1337340"
  },
  {
    "text": "before the before the talk let's go take a look at what that looks like when the when the deployment is done so this is",
    "start": "1337340",
    "end": "1348470"
  },
  {
    "text": "the environment screen you can see the events you can see that the environment is healthy and up in the upper left hand",
    "start": "1348470",
    "end": "1354620"
  },
  {
    "text": "side is a link that you can just click on the co2 our application and there it",
    "start": "1354620",
    "end": "1364940"
  },
  {
    "text": "is running in the cloud so norm when you loaded that application I noticed",
    "start": "1364940",
    "end": "1370310"
  },
  {
    "text": "something about the performance the thumbnails on the left hand side loaded",
    "start": "1370310",
    "end": "1375650"
  },
  {
    "text": "pretty slowly and I know this is you know a hotel networker or what have you but what's going on there well I didn't",
    "start": "1375650",
    "end": "1385970"
  },
  {
    "text": "spend time coding on optimizing images so I'm just letting the browser okay so",
    "start": "1385970",
    "end": "1391850"
  },
  {
    "text": "those are the full-size images being scaled on on the webpage so we could probably do better than that I have an",
    "start": "1391850",
    "end": "1398030"
  },
  {
    "text": "idea why don't we create a thumbnail sized image of the thumbnail sized of",
    "start": "1398030",
    "end": "1404510"
  },
  {
    "text": "that image right when the user uploads the image yeah I'm just worried no problem that is worried we might block",
    "start": "1404510",
    "end": "1410180"
  },
  {
    "text": "the web process and that might cause us some scalability issues yep but may impinge upon the perceived performance",
    "start": "1410180",
    "end": "1415790"
  },
  {
    "text": "what if we did it sort of like in a side process that was outside the request",
    "start": "1415790",
    "end": "1421580"
  },
  {
    "text": "stream yeah and that's what we want it's sort of a service to take care of that okay here's my idea so the way our",
    "start": "1421580",
    "end": "1427190"
  },
  {
    "text": "application currently works right now is when we upload an image we put the image data in an s3 bucket",
    "start": "1427190",
    "end": "1434010"
  },
  {
    "text": "when we put the image metadata and other associated data in the DynamoDB table let's add a third step let's put a",
    "start": "1434010",
    "end": "1441330"
  },
  {
    "text": "message on a cue that we create with a simple cue service and that message is",
    "start": "1441330",
    "end": "1446460"
  },
  {
    "text": "going to be the hash key and range key of our image in the image metadata table",
    "start": "1446460",
    "end": "1452640"
  },
  {
    "text": "then we can create a worker process which is listening on that cue and when",
    "start": "1452640",
    "end": "1458460"
  },
  {
    "text": "it sees a message come in it uses the the key for our DynamoDB table to get",
    "start": "1458460",
    "end": "1464250"
  },
  {
    "text": "the image metadata and then it uses that to get the bucket and the key name for",
    "start": "1464250",
    "end": "1471120"
  },
  {
    "text": "the full-size image then it crunches on the image to produce a thumbnail size",
    "start": "1471120",
    "end": "1477480"
  },
  {
    "text": "and puts that back in s3 with a prefix of thumbnail and then it we need to tell",
    "start": "1477480",
    "end": "1485310"
  },
  {
    "text": "the web application that there's a thumbnail available because it may not be there by the time the user reloads",
    "start": "1485310",
    "end": "1490890"
  },
  {
    "text": "the page so we update the image metadata table with a thumbnail key for that",
    "start": "1490890",
    "end": "1497550"
  },
  {
    "text": "image and the last thing we need to do is to remove the message from the queue",
    "start": "1497550",
    "end": "1504350"
  },
  {
    "text": "so let's see what this looks like what the what the image processor worker looks like and we've organized this code",
    "start": "1504350",
    "end": "1511080"
  },
  {
    "text": "as a class library which will when we deploy it we'll wrap it as a Windows service but when it during development",
    "start": "1511080",
    "end": "1517680"
  },
  {
    "text": "we'll just wrap it with a console application so we can check it out test it make sure that we're happy with the",
    "start": "1517680",
    "end": "1522720"
  },
  {
    "text": "way that it works so in the processor code the first thing we need to do is",
    "start": "1522720",
    "end": "1528120"
  },
  {
    "text": "set up a few of the clients with the SDK that we're going to use we notice that",
    "start": "1528120",
    "end": "1533400"
  },
  {
    "text": "we just call the constructor for the three clients without any arguments without any credentials that's going to",
    "start": "1533400",
    "end": "1539010"
  },
  {
    "text": "cause the the SDK to go looking for its credentials it's going to look in the web 5 web config not gonna find them",
    "start": "1539010",
    "end": "1545670"
  },
  {
    "text": "it's gonna term into this running on a ec2 instance and then oh i'll use the instance profile to get the credentials",
    "start": "1545670",
    "end": "1552770"
  },
  {
    "text": "and we read a couple of configuration things that will allow us to create an",
    "start": "1552770",
    "end": "1559380"
  },
  {
    "text": "instance of our data access and troller which is the same data access controller that's used by the web",
    "start": "1559380",
    "end": "1565910"
  },
  {
    "text": "application and then we enter a listener loop which will break when we get some",
    "start": "1565910",
    "end": "1571100"
  },
  {
    "text": "kind of cancellation token and we listen on receive message from the queue when",
    "start": "1571100",
    "end": "1577130"
  },
  {
    "text": "we see that there's a message in the queue would pull the message off and we call process message and then when",
    "start": "1577130",
    "end": "1583340"
  },
  {
    "text": "process meshes returns we call delete message so let's let's see what's going",
    "start": "1583340",
    "end": "1589100"
  },
  {
    "text": "on inside the process message method so the first thing process message needs to",
    "start": "1589100",
    "end": "1595220"
  },
  {
    "text": "do is get the hash and range key out of that mess of that message and we just",
    "start": "1595220",
    "end": "1600770"
  },
  {
    "text": "basically comma separated them so we just parse those out and get the user ID and the image ID and then we create an",
    "start": "1600770",
    "end": "1609080"
  },
  {
    "text": "instance of our image metadata using the user ID and an image ID so this is tells",
    "start": "1609080",
    "end": "1616190"
  },
  {
    "text": "us everything we need to know about the image and where to get it we use that data to get the image out of s3 and so",
    "start": "1616190",
    "end": "1626150"
  },
  {
    "text": "that gives us a stream of our image data which we can plug into our resize method",
    "start": "1626150",
    "end": "1631370"
  },
  {
    "text": "which gives us another stream which is the smaller image we put that stream",
    "start": "1631370",
    "end": "1636650"
  },
  {
    "text": "into an s3 put request and so we just stream that back into to s3 so how do we",
    "start": "1636650",
    "end": "1644690"
  },
  {
    "text": "go about updating the image metadata table after this is all done so to do",
    "start": "1644690",
    "end": "1649700"
  },
  {
    "text": "that all we have to do is add a thumbnail key to our image metadata",
    "start": "1649700",
    "end": "1656390"
  },
  {
    "text": "object and then call save on the context on the controller so now that let's",
    "start": "1656390",
    "end": "1667730"
  },
  {
    "text": "let's go ahead and see that in action so we're gonna use our console version of this app fire it up and see if it",
    "start": "1667730",
    "end": "1674540"
  },
  {
    "text": "actually does what we think it does so",
    "start": "1674540",
    "end": "1679730"
  },
  {
    "text": "there it is this listening on the cue but how do we how do we you know without",
    "start": "1679730",
    "end": "1685160"
  },
  {
    "text": "having our application running and putting messages in there how do we test it I have an idea norm why don't you go",
    "start": "1685160",
    "end": "1691070"
  },
  {
    "text": "to the image metadata table and pick an image that we want to test all right so here's there's dynamite if",
    "start": "1691070",
    "end": "1699890"
  },
  {
    "text": "you browser we're just gonna take this bottom on here we need to get I'm gonna just whip over to our favorite editing",
    "start": "1699890",
    "end": "1706310"
  },
  {
    "text": "total notepad I don't know what that was",
    "start": "1706310",
    "end": "1712180"
  },
  {
    "text": "yeah we need are you image lady to user ID comma separated why are you doing it",
    "start": "1716830",
    "end": "1724210"
  },
  {
    "text": "would not be a demo if things didn't happen on the fly like that some reason",
    "start": "1724210",
    "end": "1736610"
  },
  {
    "text": "I've lost the ability to use shortcuts anyways this is what we want to essentially put into our queue so let's",
    "start": "1736610",
    "end": "1743390"
  },
  {
    "text": "open up our queue in the toolkit go",
    "start": "1743390",
    "end": "1749660"
  },
  {
    "text": "ahead and send a message back in the",
    "start": "1749660",
    "end": "1755960"
  },
  {
    "text": "console we can see if we see the message it's generated in a crate vetted image we go back to the image metadata table",
    "start": "1755960",
    "end": "1761840"
  },
  {
    "text": "and we rescan you can see there's that new value nice so why don't you cut and",
    "start": "1761840",
    "end": "1768050"
  },
  {
    "text": "paste the rest of those and put messages well there's all my skill in that we wrote a unit test which is going to scan",
    "start": "1768050",
    "end": "1775550"
  },
  {
    "text": "that table and create messages for each of the rows in that table and put a",
    "start": "1775550",
    "end": "1780680"
  },
  {
    "text": "message on the queue and then we'll fire the console application back up and see",
    "start": "1780680",
    "end": "1788270"
  },
  {
    "text": "we'll give it a stress test with all of the data that we've accumulated so far so we go back to our queue and we refresh we can see here's all our",
    "start": "1788270",
    "end": "1794360"
  },
  {
    "text": "messages sitting there waiting to be processed we could double click and see them in more detail start that console",
    "start": "1794360",
    "end": "1801230"
  },
  {
    "text": "back up and see those things get cranked up",
    "start": "1801230",
    "end": "1805120"
  },
  {
    "text": "receiving Euler's message and generating it's working best nice so that seems to",
    "start": "1809930",
    "end": "1817170"
  },
  {
    "text": "work let's go back and see if it populated the image metadata table for us right and there are all our thumbnail",
    "start": "1817170",
    "end": "1828120"
  },
  {
    "text": "keys so this is a this is a instance of how you can use the visual studio toolkit to test out parts of your",
    "start": "1828120",
    "end": "1835680"
  },
  {
    "text": "overall application without having to build a whole integration around it so",
    "start": "1835680",
    "end": "1841410"
  },
  {
    "text": "you can sort of put messages in queues inspect your buckets and make sure that your application is doing what you think",
    "start": "1841410",
    "end": "1848310"
  },
  {
    "text": "it's supposed to be doing before integrating it all together so now that we have our image processor working we",
    "start": "1848310",
    "end": "1855780"
  },
  {
    "text": "need to update the web application to make sure to have it put those messages in the queue and to do that we're going",
    "start": "1855780",
    "end": "1863040"
  },
  {
    "text": "to add a little bit of code to our upload image method at the very end",
    "start": "1863040",
    "end": "1870480"
  },
  {
    "text": "there why don't you have why don't you put some code in there to update that get my coding hands working see we can",
    "start": "1870480",
    "end": "1876510"
  },
  {
    "text": "do",
    "start": "1876510",
    "end": "1878660"
  },
  {
    "text": "my coding has decided the keyboard is no longer",
    "start": "1883910",
    "end": "1890090"
  },
  {
    "text": "did I button that everybody apparently have to code everything on one line without any spaces anybody think I can",
    "start": "1900390",
    "end": "1908020"
  },
  {
    "text": "do it this is a pearl no we're not doing that",
    "start": "1908020",
    "end": "1914610"
  },
  {
    "text": "one second technical difficulties here",
    "start": "1923370",
    "end": "1928020"
  },
  {
    "text": "but if you restart Visual Studio",
    "start": "1933770",
    "end": "1937789"
  },
  {
    "text": "okay that's three seven if you don't think it happens this isn't actually a live demo we actually recorded us doing",
    "start": "1941250",
    "end": "1948240"
  },
  {
    "text": "this and we're playing it back for you we thought it'd make it more interesting",
    "start": "1948240",
    "end": "1952580"
  },
  {
    "text": "nice right we have the Enter key again good okay you remember the code you're",
    "start": "1966550",
    "end": "1973660"
  },
  {
    "text": "gonna write yeah I forgot it already so we need to use our sqs client and then",
    "start": "1973660",
    "end": "1980050"
  },
  {
    "text": "we want to send a message again we're using all the async methods that we need",
    "start": "1980050",
    "end": "1990400"
  },
  {
    "text": "to have two things we need to have the Q euro you are most likely gonna have this",
    "start": "1990400",
    "end": "1995860"
  },
  {
    "text": "coming through some sort of config file something more fancy than we're gonna do right now but since we're just being",
    "start": "1995860",
    "end": "2001140"
  },
  {
    "text": "quick in the demo we're just gonna take this from the toolkit and drag that out here in the wrong spot so we'll get it",
    "start": "2001140",
    "end": "2006540"
  },
  {
    "text": "there then we need their message body",
    "start": "2006540",
    "end": "2014030"
  },
  {
    "text": "and again our message is with the comma",
    "start": "2015380",
    "end": "2021350"
  },
  {
    "text": "that it's gonna be user ID and image ID",
    "start": "2021350",
    "end": "2032510"
  },
  {
    "text": "and I'm going to use the right variable",
    "start": "2032510",
    "end": "2036650"
  },
  {
    "text": "and building okay everything looks good",
    "start": "2042200",
    "end": "2047940"
  },
  {
    "text": "so now all we need to do to redeploy our web application is to right-click on the",
    "start": "2047940",
    "end": "2053010"
  },
  {
    "text": "the project again but how are we gonna where are we gonna run our our image",
    "start": "2053010",
    "end": "2058530"
  },
  {
    "text": "worker normal well we're just in dev so we don't really want to have a whole other process why we pop it on the same",
    "start": "2058530",
    "end": "2065970"
  },
  {
    "text": "instance that our web application is running on for now yeah okay well our",
    "start": "2065970",
    "end": "2071879"
  },
  {
    "text": "worker service is not part of our web application so it wouldn't naturally get",
    "start": "2071880",
    "end": "2077159"
  },
  {
    "text": "deployed to Beanstalk when we deploy our web application but Beanstalk has the ability to allow you to layer",
    "start": "2077160",
    "end": "2083730"
  },
  {
    "text": "configuration and and customization on top of your ec2 instances we're going to",
    "start": "2083730",
    "end": "2089220"
  },
  {
    "text": "use this mechanism to install download and install our service and make it run",
    "start": "2089220",
    "end": "2095399"
  },
  {
    "text": "on all of the instances well we only have a single instance but you could it would run on all of the instances that's",
    "start": "2095400",
    "end": "2100770"
  },
  {
    "text": "running your application to do that we need to create a folder in our web",
    "start": "2100770",
    "end": "2106550"
  },
  {
    "text": "application called dot EB extensions inside the dot EB extensions folder you",
    "start": "2106550",
    "end": "2112200"
  },
  {
    "text": "can have one or more files with a dot config extension and these are going to",
    "start": "2112200",
    "end": "2117630"
  },
  {
    "text": "be gamal formatted files this is the format that's used across all of elastic beanstalk and this allows us to do",
    "start": "2117630",
    "end": "2127710"
  },
  {
    "text": "things like create files downloaded files install MSI's or anything we need",
    "start": "2127710",
    "end": "2133350"
  },
  {
    "text": "to do in addition you know to our application running so for our example the first key we have here is the files",
    "start": "2133350",
    "end": "2141000"
  },
  {
    "text": "key we're going to create a two line configuration file you can create files by downloading content from a web",
    "start": "2141000",
    "end": "2147510"
  },
  {
    "text": "accessible locations such as s3 we're just going to inline it since it's just a two line file the next key is sources",
    "start": "2147510",
    "end": "2155850"
  },
  {
    "text": "which allows us to download a zip file and unzip it at the specified location here I've created a pre signed URL for",
    "start": "2155850",
    "end": "2163410"
  },
  {
    "text": "all of the bits for our serviceworker and then you can run one or more",
    "start": "2163410",
    "end": "2168510"
  },
  {
    "text": "commands inside this file we're going to use the install util to install our",
    "start": "2168510",
    "end": "2173910"
  },
  {
    "text": "service bit as a service and you can specify tuning things like we're gonna have that",
    "start": "2173910",
    "end": "2180089"
  },
  {
    "text": "command run in our image resizer service directory the next key is services which",
    "start": "2180089",
    "end": "2188299"
  },
  {
    "text": "causes elastic Beanstalk to ensure that ensure that our service is running and",
    "start": "2188299",
    "end": "2195299"
  },
  {
    "text": "then the commands a part of that key says don't try to run the service until this command has run because that",
    "start": "2195299",
    "end": "2201509"
  },
  {
    "text": "wouldn't make any sense it wouldn't be installed and then the last subsection we're using here is option settings you",
    "start": "2201509",
    "end": "2207480"
  },
  {
    "text": "can set all sorts of settings to change the behavior of how elastic Beanstalk",
    "start": "2207480",
    "end": "2213210"
  },
  {
    "text": "works here you can also add a key value pairs to your web config through this",
    "start": "2213210",
    "end": "2218490"
  },
  {
    "text": "mechanism and that's what we're doing here we're adding an s3 bucket and the cue name for our queue so now that we",
    "start": "2218490",
    "end": "2225900"
  },
  {
    "text": "have our Eby extensions a configuration file specified all we need to do is",
    "start": "2225900",
    "end": "2233190"
  },
  {
    "text": "right click on the web application and select republish environment and that",
    "start": "2233190",
    "end": "2239759"
  },
  {
    "text": "brings up the republish it would bring up the republish dialog if we had published our our application but you",
    "start": "2239759",
    "end": "2246150"
  },
  {
    "text": "don't have to fill out any of the options it uses all of the configuration that you had used before so it's just a",
    "start": "2246150",
    "end": "2252299"
  },
  {
    "text": "one-click operation so now that our application is",
    "start": "2252299",
    "end": "2257579"
  },
  {
    "text": "running in the cloud norm is going to show us how to build a Windows Store",
    "start": "2257579",
    "end": "2264180"
  },
  {
    "text": "version of that application",
    "start": "2264180",
    "end": "2267950"
  },
  {
    "text": "so with Donna version two of the SDK which we released just Friday it added",
    "start": "2279340",
    "end": "2285640"
  },
  {
    "text": "support for Windows Store and Windows Phone 8 applications again in the",
    "start": "2285640",
    "end": "2291460"
  },
  {
    "text": "versions of the SDK it only supports the asynchronous version for the api's for",
    "start": "2291460",
    "end": "2297640"
  },
  {
    "text": "Windows Phone 8 we support eleven of the services focusing on the services you mostly want to call from a phone like s3",
    "start": "2297640",
    "end": "2304780"
  },
  {
    "text": "or diner DB or sqs and then the Windows Store version of the SDK does support all of the services like the regular",
    "start": "2304780",
    "end": "2310690"
  },
  {
    "text": "version of the SDK to support all these different platforms of basic regular",
    "start": "2310690",
    "end": "2317320"
  },
  {
    "text": "Windows Windows Phone to start we actually generate different assemblies for each of these different platforms if",
    "start": "2317320",
    "end": "2324970"
  },
  {
    "text": "you were to install our SDK from our website your install folder would look like this where there's a dotnet 4 5 and",
    "start": "2324970",
    "end": "2332020"
  },
  {
    "text": "3 5 folder which contains the regular version of the dotnet SDK that you use for your regular C sharp applications or",
    "start": "2332020",
    "end": "2339820"
  },
  {
    "text": "a speed dotnet applications the difference between these two is that",
    "start": "2339820",
    "end": "2344950"
  },
  {
    "text": "4 or 5 is using the task-based asynchronous pattern and it's also based around the new HTTP client added in",
    "start": "2344950",
    "end": "2351790"
  },
  {
    "text": "dotnet 4 or 5 the 3-5 version is still using the begins in asynchronous pattern",
    "start": "2351790",
    "end": "2357960"
  },
  {
    "text": "then there's also folders that contain the Windows Store and the Windows run Windows Phone version we also still put",
    "start": "2357960",
    "end": "2364960"
  },
  {
    "text": "down a copy of the version 1 SDK for applications that aren't ready to move to version 2 yet so when we were coated",
    "start": "2364960",
    "end": "2373810"
  },
  {
    "text": "our data access layer we did want to reuse all that same code but we did create a separate separate visual studio",
    "start": "2373810",
    "end": "2379090"
  },
  {
    "text": "project that links in the same c-sharp files but it has a couple differences",
    "start": "2379090",
    "end": "2385000"
  },
  {
    "text": "the first difference is is it targets the Windows Store runtime and it's also going to reference the 80s or the",
    "start": "2385000",
    "end": "2392380"
  },
  {
    "text": "Windows Store version of the ADA SSD K so credentials management is something",
    "start": "2392380",
    "end": "2398200"
  },
  {
    "text": "that you need to take special consideration when making applications for these mobile platforms you don't",
    "start": "2398200",
    "end": "2403990"
  },
  {
    "text": "want to embed your credentials where someone might hack your file and take those out you'd also never be able to",
    "start": "2403990",
    "end": "2410170"
  },
  {
    "text": "rotate your credentials as well which is a really good practice to do periodically on our website we've",
    "start": "2410170",
    "end": "2416670"
  },
  {
    "text": "documented a couple strategies you can use to get your credentials securely to your application the first is called web",
    "start": "2416670",
    "end": "2424350"
  },
  {
    "text": "identity Federation which uses an OAuth provider like Facebook to tandel the log",
    "start": "2424350",
    "end": "2429570"
  },
  {
    "text": "on it will generate an OAuth token and then using Amazon security token service generate some short-lived security",
    "start": "2429570",
    "end": "2436710"
  },
  {
    "text": "credentials with a reduced permission 7 another approach you can use is called",
    "start": "2436710",
    "end": "2442650"
  },
  {
    "text": "token vending machine and this is something you would use if you wanted to handle your own custom authentication or",
    "start": "2442650",
    "end": "2449100"
  },
  {
    "text": "maybe handle anonymous logon and our application we used web identity",
    "start": "2449100",
    "end": "2454140"
  },
  {
    "text": "Federation so to take a look let's take a look at the code in our Windows Store application to see how we created our",
    "start": "2454140",
    "end": "2461100"
  },
  {
    "text": "credentials so here in my our class here",
    "start": "2461100",
    "end": "2467580"
  },
  {
    "text": "the first bit of code is going to call some wrapper code I wrote specific to application wrapping around Facebook's",
    "start": "2467580",
    "end": "2473340"
  },
  {
    "text": "API we're not gonna go into depth on that but basically what it's going to do is it's gonna return back this identity",
    "start": "2473340",
    "end": "2479369"
  },
  {
    "text": "object which contains our OA token our user ID and our user name now given that",
    "start": "2479369",
    "end": "2486930"
  },
  {
    "text": "we're gonna call this a Davis logon class that I wrote which again is a more replicas I wrote for this application",
    "start": "2486930",
    "end": "2491940"
  },
  {
    "text": "and what it does is it's going to translate that identity object into some ATS credentials object that our SDK can",
    "start": "2491940",
    "end": "2498420"
  },
  {
    "text": "use let's go and open that class up so",
    "start": "2498420",
    "end": "2504480"
  },
  {
    "text": "what this is gonna do is it's gonna call security token services assume role with web identity which is a very unique",
    "start": "2504480",
    "end": "2510060"
  },
  {
    "text": "method in the SDK and that it takes no credentials to call this method so when we create this tear-jerking service",
    "start": "2510060",
    "end": "2516180"
  },
  {
    "text": "client we actually pass in the native anonymous a device credential object",
    "start": "2516180",
    "end": "2521510"
  },
  {
    "text": "once we have our client object we set up our request and our quest we need to",
    "start": "2521510",
    "end": "2527490"
  },
  {
    "text": "indicate that Facebook is our provider we're gonna give it our token we're",
    "start": "2527490",
    "end": "2533609"
  },
  {
    "text": "gonna name the session with the session ID that we are the user ID we got back from Facebook and then we have to tell",
    "start": "2533609",
    "end": "2539580"
  },
  {
    "text": "what is the role we want to assume to take a look at this role we're gonna login to the web",
    "start": "2539580",
    "end": "2545550"
  },
  {
    "text": "so if we don't yet have support in the SDK for trusted literacy me in the visual studio toolkit or trusted",
    "start": "2545550",
    "end": "2552240"
  },
  {
    "text": "relationships so once we're in the console let's go to the IAM section and",
    "start": "2552240",
    "end": "2563250"
  },
  {
    "text": "I am we're gonna go to roles and you can see here's the the role we set up for",
    "start": "2563250",
    "end": "2568440"
  },
  {
    "text": "our application permissions is going to use the same permissions that our web applications and I can really go into",
    "start": "2568440",
    "end": "2574350"
  },
  {
    "text": "that but I want to show you is the trusted relationships tab in this section",
    "start": "2574350",
    "end": "2579450"
  },
  {
    "text": "it's indicate the trust identity is identifying what is the provider that we're using and this is what's mapping",
    "start": "2579450",
    "end": "2584910"
  },
  {
    "text": "to what I'm passing in the code you see Facebook here and Facebook there in the trusted in it or the condition what that",
    "start": "2584910",
    "end": "2592260"
  },
  {
    "text": "is saying is that the OAuth token that I'm passing in and that assumed role has to be a valid Oh a token for that",
    "start": "2592260",
    "end": "2599280"
  },
  {
    "text": "Facebook application ID which Jim and I created earlier when we went into Facebook and created our application so",
    "start": "2599280",
    "end": "2605210"
  },
  {
    "text": "screenshot service will find it it's a match come back to our code and give us back our access key or secret key and",
    "start": "2605210",
    "end": "2612270"
  },
  {
    "text": "this a token object and from that we can create a Atos credentials object with",
    "start": "2612270",
    "end": "2618450"
  },
  {
    "text": "that we can then hand that off to our sdk and use our sdk as we have been using throughout today's talk but again",
    "start": "2618450",
    "end": "2624840"
  },
  {
    "text": "it's going to be doing that with a reduced permission set and we never had to embed any credentials in our application so let's fire up our Windows",
    "start": "2624840",
    "end": "2632790"
  },
  {
    "text": "Store app and see what it looks like",
    "start": "2632790",
    "end": "2635930"
  },
  {
    "text": "so we have to log on to Facebook right away so we can get that OA token that will pass the security token service to",
    "start": "2640339",
    "end": "2647280"
  },
  {
    "text": "get our credentials and I'm keyboard",
    "start": "2647280",
    "end": "2654329"
  },
  {
    "text": "challenge here",
    "start": "2654329",
    "end": "2657200"
  },
  {
    "text": "it's Bardem but we're doing it on a surface look at the little bitty keyboard just a challenge I'm with it",
    "start": "2661360",
    "end": "2667529"
  },
  {
    "text": "why don't you log in okay I think we're",
    "start": "2669870",
    "end": "2676660"
  },
  {
    "text": "just gonna restart just so we've had enough murphy's issues today",
    "start": "2676660",
    "end": "2681450"
  },
  {
    "text": "you got to get in with the face monster",
    "start": "2691010",
    "end": "2695080"
  },
  {
    "text": "so here's our again our where same application has the same functionality as a web ATS just being in a more",
    "start": "2711700",
    "end": "2717010"
  },
  {
    "text": "Windows Store presentation we can view images we can add comments as well what",
    "start": "2717010",
    "end": "2724900"
  },
  {
    "text": "are you saying about my daughter that's a big gap relatively she was very proud",
    "start": "2724900",
    "end": "2732970"
  },
  {
    "text": "of that Apple we can also upload images as well let's take a let's upload a",
    "start": "2732970",
    "end": "2738670"
  },
  {
    "text": "picture right now and we're gonna take a picture to glorify our last day here at reinvent oh there we go",
    "start": "2738670",
    "end": "2756480"
  },
  {
    "text": "everybody's smile the big waves or anything there Cheers",
    "start": "2756480",
    "end": "2763078"
  },
  {
    "text": "okay so we're gonna add a caption on there and notice that the bottom there's",
    "start": "2766730",
    "end": "2772609"
  },
  {
    "text": "that little gray bar that's that progress culpa our progress I was mentioning we went through the data access layer when Jen uploads that it'll",
    "start": "2772609",
    "end": "2779660"
  },
  {
    "text": "fly right by or I guess we run a hotel Wi-Fi so maybe not so fly by but it",
    "start": "2779660",
    "end": "2785780"
  },
  {
    "text": "makes for a more dramatic demo to watch it in slow motion so the last little bit",
    "start": "2785780",
    "end": "2791240"
  },
  {
    "text": "of code I want to show then is how we hooked up that progress callback so let's go to our upload method in our",
    "start": "2791240",
    "end": "2797210"
  },
  {
    "text": "Windows Store application",
    "start": "2797210",
    "end": "2800260"
  },
  {
    "text": "so here applet method is calling our data access layer it's passing the additional upper operation which is the",
    "start": "2810780",
    "end": "2818040"
  },
  {
    "text": "callback method and the dalles passing that in the SDK went the SDK is gonna do",
    "start": "2818040",
    "end": "2823720"
  },
  {
    "text": "as it writes chunks of data to s3 it's gonna call back on line and with an event argument that tells us how much",
    "start": "2823720",
    "end": "2829780"
  },
  {
    "text": "did it has been written and how much will be written total so in the callback all we have to do is update our progress",
    "start": "2829780",
    "end": "2836050"
  },
  {
    "text": "bar with those values from the event argument that's what we wanted to show",
    "start": "2836050",
    "end": "2843280"
  },
  {
    "text": "you hopefully you've learned a lot of great stuff we've inspired you to come try our tools in SDK you can download",
    "start": "2843280",
    "end": "2848890"
  },
  {
    "text": "our full suite of tools Netsky from our website the SDK is also available through nougat and it is an open source",
    "start": "2848890",
    "end": "2855490"
  },
  {
    "text": "project we hosted on github if you want to add any contributions have any great ideas that should be added to it go",
    "start": "2855490",
    "end": "2861160"
  },
  {
    "text": "there let us know once you try it out let us know what you think you can get a hold of us through our forms or through",
    "start": "2861160",
    "end": "2867910"
  },
  {
    "text": "github and we do also participate through Stack Overflow and I want to mention that we'd like if you would",
    "start": "2867910",
    "end": "2873970"
  },
  {
    "text": "follow us we have a Twitter handle we just started less two weeks ago right and we also run a blog for dotnet and",
    "start": "2873970",
    "end": "2880569"
  },
  {
    "text": "windows development where we talk a lot of these sort of issues that we're talking about today and just one more last plea of please fill in the feedback",
    "start": "2880569",
    "end": "2887230"
  },
  {
    "text": "forms to let us know what you think of our talk so we can improve our talks for next time",
    "start": "2887230",
    "end": "2893730"
  }
]