[
  {
    "text": "and again welcome to today's webcast design for availability our presenter is Brett Holman Solutions architect for",
    "start": "1360",
    "end": "8719"
  },
  {
    "text": "Amazon web services Brett you have the floor thanks",
    "start": "8719",
    "end": "14519"
  },
  {
    "text": "Carri so my name is Brett Holman I'm a Solutions architect with Amazon web services and um you are here to learn",
    "start": "14519",
    "end": "21840"
  },
  {
    "text": "more about designing applications for high availability on AWS we're going to talk today about best practices and",
    "start": "21840",
    "end": "27920"
  },
  {
    "text": "things you need to think about when building a highly a able application on AWS so let's start off with talking about",
    "start": "27920",
    "end": "35160"
  },
  {
    "text": "what is high availability so high availability means different things to different people so let's agree on some",
    "start": "35160",
    "end": "40840"
  },
  {
    "text": "fundamental definitions to get started um ha you know is also implemented",
    "start": "40840",
    "end": "46000"
  },
  {
    "text": "differently based on app architecture and workload so does ha mean that an app",
    "start": "46000",
    "end": "51199"
  },
  {
    "text": "is simply live or reachable or that it's servicing requests with an acceptable level of performance um you know loss of",
    "start": "51199",
    "end": "59399"
  },
  {
    "text": "availability um how do we Define that is that is that um offline or unreachable or partially",
    "start": "59399",
    "end": "66040"
  },
  {
    "text": "available um or slow to use you know do we include planned or unplanned probably",
    "start": "66040",
    "end": "71200"
  },
  {
    "text": "so our goal should be you know no downtime and always available um",
    "start": "71200",
    "end": "78000"
  },
  {
    "text": "so typically costs more to you know make it app ha it's you know there's a",
    "start": "78000",
    "end": "83520"
  },
  {
    "text": "there's a cost for for ha so um you know more cost um probably you know if you're",
    "start": "83520",
    "end": "88960"
  },
  {
    "text": "if you're building out your AR texture correctly means you know you've got a more highly available application so um",
    "start": "88960",
    "end": "94040"
  },
  {
    "text": "a lot of people will talk about their app and say you know we want to build an app to 49 or to 59 well when you talk",
    "start": "94040",
    "end": "99759"
  },
  {
    "text": "about 59 you're talking about five minutes of of um possible downtime per year based on your SLA that you're",
    "start": "99759",
    "end": "105960"
  },
  {
    "text": "defining so to build an app that's more ha you know incurs cost because you need to think a lot more about your",
    "start": "105960",
    "end": "111479"
  },
  {
    "text": "architecture um and the last thing to note here is that you know the higher the level of availability that you're",
    "start": "111479",
    "end": "116960"
  },
  {
    "text": "striving for um the less likely it is that you can going to have human intervention in that you need to automate your processes you need to",
    "start": "116960",
    "end": "123320"
  },
  {
    "text": "automate your deployments you need to you know um Source control all of your deployment code and so on and thoroughly",
    "start": "123320",
    "end": "130399"
  },
  {
    "text": "test that so everything is automated when you deploy it's in a common fashion every",
    "start": "130399",
    "end": "136319"
  },
  {
    "text": "time so um availability is related to a number of factors uh scalability is",
    "start": "136680",
    "end": "141879"
  },
  {
    "text": "important to availability so think about it this way if you've got an application that doesn't scale um and then your",
    "start": "141879",
    "end": "147280"
  },
  {
    "text": "usage goes up you're probably not going to be able to service users you know proficiently um or you know with a good",
    "start": "147280",
    "end": "153640"
  },
  {
    "text": "degree of of success or or a good degree of performance um you might have unhappy users um fault tolerance is also you",
    "start": "153640",
    "end": "160800"
  },
  {
    "text": "know really key to availability um building in uh fault tolerance at multiple levels of your app making sure",
    "start": "160800",
    "end": "167360"
  },
  {
    "text": "you're componentized your app and building out components that um you know are fault tolerant from each other and",
    "start": "167360",
    "end": "172519"
  },
  {
    "text": "that your app is Fault tolerant to a particular component failing as well and fails elegantly um is also an important",
    "start": "172519",
    "end": "178360"
  },
  {
    "text": "concept so ews democratizes High availability we provide multiple tools",
    "start": "178360",
    "end": "183640"
  },
  {
    "text": "to build High availability out on your application you know we provide Concepts like building out know multiple servers",
    "start": "183640",
    "end": "189560"
  },
  {
    "text": "at your different tiers of your application using um redundant data centers um potentially even redundant",
    "start": "189560",
    "end": "194920"
  },
  {
    "text": "regions and buil using fault tolerance services that are already available there are a variety of different capabilities you have on AWS to build",
    "start": "194920",
    "end": "201440"
  },
  {
    "text": "out a highly available application and we're going to talk through those",
    "start": "201440",
    "end": "205799"
  },
  {
    "text": "today so first we're going to talk about AWS Global infrastructure so to put",
    "start": "208680",
    "end": "215439"
  },
  {
    "text": "everybody on the same page so first off AWS is comprised of nine regions and a a",
    "start": "215439",
    "end": "221840"
  },
  {
    "text": "region is a collection of data centers in a in a metropolitan area um we have regions in North America we have three",
    "start": "221840",
    "end": "228439"
  },
  {
    "text": "regions in North America we've got us West Oregon Us West Northern California and Us East Virginia and then we also",
    "start": "228439",
    "end": "234680"
  },
  {
    "text": "have another region called govcloud which is an itar compliant region for servicing government",
    "start": "234680",
    "end": "240239"
  },
  {
    "text": "um itar compliant workloads we also have regions in South America sa Pao Brazil",
    "start": "240239",
    "end": "245680"
  },
  {
    "text": "also in Ireland and Europe we also have regions in Asia in Tokyo Singapore and",
    "start": "245680",
    "end": "251560"
  },
  {
    "text": "Sydney so each region is made up of multiple data centers um or a collection",
    "start": "251560",
    "end": "257560"
  },
  {
    "text": "of data centers and we we commonly refer to those as availability zones and there is a core difference an availability",
    "start": "257560",
    "end": "263080"
  },
  {
    "text": "zone is a data center or a cluster of data centers on a property or a piece of land um and each avail Zone in a region",
    "start": "263080",
    "end": "270400"
  },
  {
    "text": "there's always more than one and there can be um each availability zone is built to be fault tolerant from the other availability zones in the region",
    "start": "270400",
    "end": "276759"
  },
  {
    "text": "they're typically segregated by 5 to 25 miles in distance um there is low",
    "start": "276759",
    "end": "282039"
  },
  {
    "text": "latency um redundant fiber connections between the availability zones um we try our best to build out these availability",
    "start": "282039",
    "end": "288639"
  },
  {
    "text": "zones on redundant power grids and flood planes and so on to make these as most as full tolerant as possible from each",
    "start": "288639",
    "end": "294240"
  },
  {
    "text": "other so um when you talk about availability zones you're talking about um short latencies um and the ability to",
    "start": "294240",
    "end": "301600"
  },
  {
    "text": "build out applications that span multiple availability zones inside of a single",
    "start": "301600",
    "end": "306960"
  },
  {
    "text": "region okay so um next I wanted to talk about the AWS platform stack and",
    "start": "308160",
    "end": "313199"
  },
  {
    "text": "reference model so if you think about building up your application on AWS or on any platform there's a variety of",
    "start": "313199",
    "end": "318639"
  },
  {
    "text": "tools you need you're going to need your your Global infrastructure your colos where you put your racks and so on your",
    "start": "318639",
    "end": "323720"
  },
  {
    "text": "cooling your power um you know AWS um regions and availability zones fit into",
    "start": "323720",
    "end": "329240"
  },
  {
    "text": "that and then there's also the networking that's required between your application you know the the connections to the internet the connections to the",
    "start": "329240",
    "end": "335240"
  },
  {
    "text": "other um elements of your application or other um servers in your architecture then there's the servers",
    "start": "335240",
    "end": "341560"
  },
  {
    "text": "the storage the database Services you require there's the application services like publish subscribe messaging and",
    "start": "341560",
    "end": "347639"
  },
  {
    "text": "queuing and all the other things that you use to build out a um a highly durable and redundant application um and",
    "start": "347639",
    "end": "353360"
  },
  {
    "text": "highly available application lastly there's the deployment Administration tools so AWS has services in each one of",
    "start": "353360",
    "end": "359120"
  },
  {
    "text": "these areas that you can use to help build out a highly available app on",
    "start": "359120",
    "end": "365720"
  },
  {
    "text": "AWS so we talked a little bit about AWS having some building blocks that are",
    "start": "367880",
    "end": "372919"
  },
  {
    "text": "fault tolerant um right off the bat um so over on the left we have these services that are inherently highly",
    "start": "372919",
    "end": "379319"
  },
  {
    "text": "available and fault tolerant um services like our simple sour service or Dynamo DB um where data is replicated around",
    "start": "379319",
    "end": "386199"
  },
  {
    "text": "the region um we also have a couple Global Services like cloudfront in Route",
    "start": "386199",
    "end": "391360"
  },
  {
    "text": "53 cloudfront would be our Global CDN our Global caching Network to deliver content to the the eyeball um Route 53",
    "start": "391360",
    "end": "398319"
  },
  {
    "text": "would be our Global DNS platform we also have uh elastic load balancing which",
    "start": "398319",
    "end": "403360"
  },
  {
    "text": "would give you the ability to deliver and spread traffic um across instances in a region or or web servers in a",
    "start": "403360",
    "end": "410280"
  },
  {
    "text": "region then we have a number of uh application Level services such as queuing service simple queuing service",
    "start": "410280",
    "end": "416800"
  },
  {
    "text": "simple notification service simple email service and simple workflow service which provide you the ability to build",
    "start": "416800",
    "end": "422960"
  },
  {
    "text": "um highly available apps with um fault tolerant services that are built fault tolerant right off the bat you can use",
    "start": "422960",
    "end": "428680"
  },
  {
    "text": "them right off the bat and you don't have to build them on your own and deploy them on servers of your own and make them highly available we also have",
    "start": "428680",
    "end": "435199"
  },
  {
    "text": "other services that are highly available with the correct architecture so services like Amazon ec2 um our elastic",
    "start": "435199",
    "end": "442000"
  },
  {
    "text": "block storage our our relational database service and our virtual private Cloud you know if you deploy these",
    "start": "442000",
    "end": "447199"
  },
  {
    "text": "services in the correct architectures you can make them highly available but on their own um each one of those",
    "start": "447199",
    "end": "454120"
  },
  {
    "text": "typically are are built and deployed in a single availabilities on our single data center so you know we'll talk about",
    "start": "454120",
    "end": "460199"
  },
  {
    "text": "the right architectures and how to deploy a correct architecture using these services to make them highly",
    "start": "460199",
    "end": "466800"
  },
  {
    "text": "available okay so here's a little agenda on what we're going to talk about today as we dive deeper we're going to talk",
    "start": "468720",
    "end": "474120"
  },
  {
    "text": "about designing for failure we're going to talk about designing an an application that spans multiple availabil zones we're going to talk",
    "start": "474120",
    "end": "480159"
  },
  {
    "text": "about how to scale your application we're going to talk about um some self-healing things you can do with your",
    "start": "480159",
    "end": "485199"
  },
  {
    "text": "application and then we're going to talk about loose coupling for your application and um those are the five",
    "start": "485199",
    "end": "490280"
  },
  {
    "text": "main topics we're going to cover today so let's start off by building a highly available system um so we're going to",
    "start": "490280",
    "end": "496280"
  },
  {
    "text": "start off by talking a little bit about what Amazon ec2 is so Amazon ec2 is it",
    "start": "496280",
    "end": "501599"
  },
  {
    "text": "stands for elastic Cloud compute and really what it is is it's our virtual server in the cloud you launch an",
    "start": "501599",
    "end": "507000"
  },
  {
    "text": "elastic Cloud compute or an ec2 instance you're you're launching a a server on AWS in the cloud um you're picking a",
    "start": "507000",
    "end": "514120"
  },
  {
    "text": "region and a data center or availability Zone that you want to launch it in and um you know we have uh many different",
    "start": "514120",
    "end": "520320"
  },
  {
    "text": "sizes of computes you can choose one that fits your needs you know with a specific CPU and memory and dis options",
    "start": "520320",
    "end": "527880"
  },
  {
    "text": "um you can run Windows or Linux on it um you also have the ability to well when",
    "start": "527880",
    "end": "533519"
  },
  {
    "text": "you launch an instance you choose an a machine image or what's called an Amazon machine image or an Ami and or or an Ami",
    "start": "533519",
    "end": "540200"
  },
  {
    "text": "and you typically start off by launching a a base um operating system Ami so it",
    "start": "540200",
    "end": "545720"
  },
  {
    "text": "might be redhead Enterprise Linux or Windows 2012 and um and then you go and you",
    "start": "545720",
    "end": "550839"
  },
  {
    "text": "install your packages you um deploy your source code you might start a patchy up and then um you have the ability to",
    "start": "550839",
    "end": "557440"
  },
  {
    "text": "create a custom Ami or a custom Amazon machine image that um captures all those bits just the way they were and you have",
    "start": "557440",
    "end": "563519"
  },
  {
    "text": "the ability to deploy that and create new servers with it that would launch and have all the packages and source code deployed in a pat running and all",
    "start": "563519",
    "end": "569760"
  },
  {
    "text": "of that so Amazon machine images are a core principle we're going to talk more about that later in the presentation um",
    "start": "569760",
    "end": "576360"
  },
  {
    "text": "so when you launch a compute instance you have full control you are the root um you have the administrator rights you",
    "start": "576360",
    "end": "581440"
  },
  {
    "text": "have um every ec2 instance is deployed in a security group with full firewall control that you you have access to what",
    "start": "581440",
    "end": "587519"
  },
  {
    "text": "you open up to the world and what you keep locked off um you also have um monitoring and metrics that are pushed",
    "start": "587519",
    "end": "593200"
  },
  {
    "text": "to Cloud watch for your ec2 instance so those are some of the core principles about ec2 and we're going to talk more",
    "start": "593200",
    "end": "598480"
  },
  {
    "text": "about each one of them those as we go on all right so um our base uh our base",
    "start": "598480",
    "end": "606320"
  },
  {
    "text": "deployment is deploying an ec2 instance as a web server um you know maybe maybe loading with a patchy and deploying",
    "start": "606320",
    "end": "612600"
  },
  {
    "text": "source code on it we might also start by deploying our database on there um as we want to you know build out a little more",
    "start": "612600",
    "end": "620000"
  },
  {
    "text": "durable we would excuse me um now we're going to launch uh a database server and",
    "start": "620000",
    "end": "625640"
  },
  {
    "text": "we're going to separate our web server from our database server and um you know for to do that we're going to choose",
    "start": "625640",
    "end": "631040"
  },
  {
    "text": "Amazon's relational database service for this example you can launch your own servers on ec2 um your own databases on",
    "start": "631040",
    "end": "636440"
  },
  {
    "text": "ec2 you can run um a variety of different database Technologies on your own on database or on on ec2 but RDS",
    "start": "636440",
    "end": "643720"
  },
  {
    "text": "gives you the ability to use our databases a service for my SQL Oracle or SQL Server we'll talk more about RDS",
    "start": "643720",
    "end": "650920"
  },
  {
    "text": "later in the presentation but um here's a good way to start so then next we're",
    "start": "650920",
    "end": "656240"
  },
  {
    "text": "going to um deploy an elastic IP address to our web server and what that gives us the ability to do is um the reason why",
    "start": "656240",
    "end": "663720"
  },
  {
    "text": "we call that elastic an elastic IP versus a static IP is via API or via the console you have the ability to move",
    "start": "663720",
    "end": "669839"
  },
  {
    "text": "that elastic IP address from one server to another so let's say we're deploying an application like in this case and",
    "start": "669839",
    "end": "675839"
  },
  {
    "text": "we've got a single web server and let's say we've got an app that isn't allowed to horizontally scale we can't run",
    "start": "675839",
    "end": "682240"
  },
  {
    "text": "multiple web servers um the way the soft it might be a legacy app it might be an older app um it has to run on a single",
    "start": "682240",
    "end": "688120"
  },
  {
    "text": "instance well um you know we've got this elastic IP and if that web server were to fail we got the ability to move it",
    "start": "688120",
    "end": "694120"
  },
  {
    "text": "from one um web server to another and you know we're going to next um",
    "start": "694120",
    "end": "702519"
  },
  {
    "text": "attach that elastic IP we're going to we're going to spin up our Route 53 for our DNS we're going to create an a",
    "start": "702519",
    "end": "707839"
  },
  {
    "text": "record that binds www.my website.com and points it to that elastic IP address so",
    "start": "707839",
    "end": "713120"
  },
  {
    "text": "sorry these DNS records will Point your domain name to a particular IP address which then sends the traffic to that EC",
    "start": "713120",
    "end": "718920"
  },
  {
    "text": "E2 instance and then again that ec2 instance connects to the RDS database to serve up your database",
    "start": "718920",
    "end": "726759"
  },
  {
    "text": "queries so um first we're going to talk about designing for failure that was a pretty basic construct there um but we",
    "start": "727680",
    "end": "733639"
  },
  {
    "text": "want to talk about designing for failure so verer Vogal CTO of Amazon said you know at a variety of in a variety of",
    "start": "733639",
    "end": "740360"
  },
  {
    "text": "talks he's done um everything fails all the time and you know I want to just point that out I mean you know Hardware",
    "start": "740360",
    "end": "746639"
  },
  {
    "text": "data centers Network databases services these things all fail they're all known to fail nothing is perfect there's",
    "start": "746639",
    "end": "752040"
  },
  {
    "text": "imperfection in everything um so you know what's key is avoiding single",
    "start": "752040",
    "end": "757320"
  },
  {
    "text": "points of failure in your architecture you want to make sure each sing service is not a single point of failure you want to componentize your service and",
    "start": "757320",
    "end": "765000"
  },
  {
    "text": "you know you want to assume everything fails and work backwards you know design each Service as a black box Loosely couple Services together make each",
    "start": "765000",
    "end": "772399"
  },
  {
    "text": "service highly available and scalable on its own and then make sure your application can handle an individual component failing and and you know the",
    "start": "772399",
    "end": "779680"
  },
  {
    "text": "application won't fail with an individual component failing you you're the application knows how to fail elegantly and um still respond to a user",
    "start": "779680",
    "end": "787519"
  },
  {
    "text": "even though a particular component of a multi-component application architecture fails so we're going to talk through",
    "start": "787519",
    "end": "793480"
  },
  {
    "text": "those Concepts as we go along but your goal should be applications that continue to function no matter",
    "start": "793480",
    "end": "799000"
  },
  {
    "text": "what all right so let's go back to our original example we've got our our DNS server pointing to our ec2 instance",
    "start": "799000",
    "end": "805560"
  },
  {
    "text": "which is then you know using RDS as the database um so let's talk about what",
    "start": "805560",
    "end": "812000"
  },
  {
    "text": "happens if a web server fails you know what what do you do in this case well you know we we bound an elastic IP to it",
    "start": "812000",
    "end": "818320"
  },
  {
    "text": "so we have the ability to launch another ec2 instance and point that elastic IP",
    "start": "818320",
    "end": "823519"
  },
  {
    "text": "address at that new ec2 instance and that ec2 instance when it launches if we used a custom Ami that we captured that",
    "start": "823519",
    "end": "829839"
  },
  {
    "text": "already had the database connection string and had Apache running and everything when we launch that ec2 instance and attach the elastic IP to it",
    "start": "829839",
    "end": "836000"
  },
  {
    "text": "as soon as it's up and running um it has the ability to connect to the database and it starts re receiving traffic from",
    "start": "836000",
    "end": "841480"
  },
  {
    "text": "DNS so you might have had a short downtime but using the custom Ami and using the elastic IP address we",
    "start": "841480",
    "end": "847560"
  },
  {
    "text": "recovered pretty elegantly pretty quick you know maybe a handful of minutes of downtime you know so that's not ideal um",
    "start": "847560",
    "end": "853440"
  },
  {
    "text": "definitely not but if we had an application that can only Deploy on one instance we're pretty good there we did a pretty good job further you know we",
    "start": "853440",
    "end": "859720"
  },
  {
    "text": "could script the standup of the second ec2 instance and the move of the elastic IP address those things are all",
    "start": "859720",
    "end": "865759"
  },
  {
    "text": "available via API so you could write scripts that automatically um you know",
    "start": "865759",
    "end": "871360"
  },
  {
    "text": "via alarming we recognize that the ec2 web server went down um we may capture that message in a queue that alarm that",
    "start": "871360",
    "end": "878759"
  },
  {
    "text": "goes off we may capture that in a queue and we may have a server that responds and is watching that queue and says oh I need to launch a new instance and I need",
    "start": "878759",
    "end": "885480"
  },
  {
    "text": "to go and attach an elastic IP address so we can do things in a semi-automated fashion or we could just have an alarm",
    "start": "885480",
    "end": "890880"
  },
  {
    "text": "and have somebody respond to that alarm by standing up another ec2 instance okay so let's talk about um",
    "start": "890880",
    "end": "898079"
  },
  {
    "text": "storage let's say we had um storage that we really required on that last server and we lost certain files in that last",
    "start": "898079",
    "end": "905000"
  },
  {
    "text": "server we want to be do something that's a little more durable in terms of storage so I'm going to talk a little",
    "start": "905000",
    "end": "910560"
  },
  {
    "text": "bit about what elastic block storage is um elastic block storage is our persistent storage you have the ability",
    "start": "910560",
    "end": "916320"
  },
  {
    "text": "to create a volume from 1 gig to one terabyte in size you mount it as a drive to the instances you format it um it's",
    "start": "916320",
    "end": "922800"
  },
  {
    "text": "private to your instances you have the ability to build this in high performant fashion as well you can say I want to run a very high performance EBS volume",
    "start": "922800",
    "end": "930199"
  },
  {
    "text": "and you have the ability to provision IO to the volume how much IO you want the volume to respond with um also one thing",
    "start": "930199",
    "end": "936680"
  },
  {
    "text": "to note these these storage volumes these EBS storage volumes are replicated within an availability zone so when you",
    "start": "936680",
    "end": "941880"
  },
  {
    "text": "provision an EBS volume you're provisioning let's say a 1 tab um volume of storage you're going to attach to an",
    "start": "941880",
    "end": "947120"
  },
  {
    "text": "instance there is a mirrored volume of that and um if if your primary volume",
    "start": "947120",
    "end": "952920"
  },
  {
    "text": "went down you wouldn't recognize it but we would actually move your your um request over to the other EBS volume and",
    "start": "952920",
    "end": "958600"
  },
  {
    "text": "Vision another volume that mirrors it so so it is a little more durable than a single drive on the floor um and uh",
    "start": "958600",
    "end": "965399"
  },
  {
    "text": "lastly um you have the ability to do backups and snapshots for those particular volumes and create a new volume from any one of those snapshots",
    "start": "965399",
    "end": "971600"
  },
  {
    "text": "so um that's EBS in a",
    "start": "971600",
    "end": "976319"
  },
  {
    "text": "nutshell so um now we're going to attach EBS to our particular web service now we have a persistent storage that lives",
    "start": "977040",
    "end": "984079"
  },
  {
    "text": "outside of the web server and you know if that web server were to fail at any point in time we got persisten storage",
    "start": "984079",
    "end": "989839"
  },
  {
    "text": "that lives you know beyond the life of that particular web server so let's say that um that web server dies what",
    "start": "989839",
    "end": "996319"
  },
  {
    "text": "happens here let's say I've got important data that my web app requires um let's say it might be logging that I'm storing or whatever the case might",
    "start": "996319",
    "end": "1002480"
  },
  {
    "text": "be I need that that data that's on that EBS volume to live and and live on that you know and and be part of the service",
    "start": "1002480",
    "end": "1008839"
  },
  {
    "text": "that you know continues forward so I got the ability now to you know stand up a new ec2 instance um when I stand up that",
    "start": "1008839",
    "end": "1015279"
  },
  {
    "text": "new ec2 instance I can move the EBS volume and the elastic IP address over to that ec2 instance and now I'm um you",
    "start": "1015279",
    "end": "1023120"
  },
  {
    "text": "know I've I've got um a little more availability built into my storage solution that I had originally so you",
    "start": "1023120",
    "end": "1028798"
  },
  {
    "text": "know um where we are right now we're we're still in a very basic architecture this is not something that's highly",
    "start": "1028799",
    "end": "1035038"
  },
  {
    "text": "available not scalable um but you know um shows some of the the starting points",
    "start": "1035039",
    "end": "1040959"
  },
  {
    "text": "of how to build a little bit more availability on your platform than running on a single server so let's move forward",
    "start": "1040959",
    "end": "1048919"
  },
  {
    "text": "okay so next we're going to talk about Amazon elastic load balancing and elastic load balancing um",
    "start": "1048919",
    "end": "1056160"
  },
  {
    "text": "gives you the ability to create a more highly scalable application um you have the ability to distribute or load",
    "start": "1056160",
    "end": "1062640"
  },
  {
    "text": "balance traffic across multiple ec2 instances in multiple availability zones with elastic load balancing so um couple",
    "start": "1062640",
    "end": "1069760"
  },
  {
    "text": "features of elb or elastic load balancing it it scales automatically to handle request so as you as your traffic",
    "start": "1069760",
    "end": "1076159"
  },
  {
    "text": "increases it automatically scales out the the the load balancing as a service to handle your request volume it also",
    "start": "1076159",
    "end": "1083480"
  },
  {
    "text": "you know is self-healing and available it um load balances across multiple instances and multiple availability zones you have the ability to Define",
    "start": "1083480",
    "end": "1090360"
  },
  {
    "text": "health checks such that um the instances it's serving traffic to it can health",
    "start": "1090360",
    "end": "1095919"
  },
  {
    "text": "check those instances and if those instances aren't responding it'll stop serving traffic to those instances it also has the ability to use um session",
    "start": "1095919",
    "end": "1103039"
  },
  {
    "text": "Affinity or session stickiness where um if you are storing session on a server",
    "start": "1103039",
    "end": "1108480"
  },
  {
    "text": "um we can you can set up the elb such that it always sends the same user to the same server instance where their session data is being stored now we",
    "start": "1108480",
    "end": "1115200"
  },
  {
    "text": "always recommend separating session from the server so you can scale out horizontally scale up and scale down",
    "start": "1115200",
    "end": "1121480"
  },
  {
    "text": "your server and you don't have to always send the same user to the same server but if your application requires session stickiness you can do that with the load",
    "start": "1121480",
    "end": "1128080"
  },
  {
    "text": "balancer lastly um the load balancer does support SSL and you can terminate your SSL at the load balancer if you",
    "start": "1128080",
    "end": "1135640"
  },
  {
    "text": "choose okay so um you know here's our base scenario we're going to um make our",
    "start": "1135760",
    "end": "1141720"
  },
  {
    "text": "next step forward and we're going to deploy elastic load balancing so now we're going to be able to scale out the web tier um independently of the other",
    "start": "1141720",
    "end": "1148799"
  },
  {
    "text": "tiers we've got load balancing excuse me we've got load balancing that scales",
    "start": "1148799",
    "end": "1155000"
  },
  {
    "text": "um on its own as a service and now we've got a web tier that scales horizontally as well so we can handle more load and",
    "start": "1155000",
    "end": "1160640"
  },
  {
    "text": "we can also handle um the failure of a particular server um so you know this is",
    "start": "1160640",
    "end": "1165760"
  },
  {
    "text": "a much better use case than before if a web server to grades or if we increase load we have the ability to handle that",
    "start": "1165760",
    "end": "1171000"
  },
  {
    "text": "load with elb Okay so let's talk about elb health",
    "start": "1171000",
    "end": "1177080"
  },
  {
    "text": "checks and how we make this a little bit stronger so EB health checks allow to",
    "start": "1177080",
    "end": "1183039"
  },
  {
    "text": "drop dead or degraded traffic um and no longer send it to instances that are you know that that have passed away or that",
    "start": "1183039",
    "end": "1189240"
  },
  {
    "text": "are are expired um or or that degraded to a point where they shouldn't be receiving traffic so it's pretty easy to",
    "start": "1189240",
    "end": "1195280"
  },
  {
    "text": "set up a health check on an ec2 or sorry on the elastic load balancing service you simply um Define a file on your web",
    "start": "1195280",
    "end": "1203000"
  },
  {
    "text": "server that's going to respond to the health check um in this case we Define check.",
    "start": "1203000",
    "end": "1208080"
  },
  {
    "text": "PHP um and then that that that particular health check could just return a 200 okay say you know it might",
    "start": "1208080",
    "end": "1213960"
  },
  {
    "text": "just return I'm healthy um and return a 200 okay or it could be a deep health check and that is something that's recommended that health check might",
    "start": "1213960",
    "end": "1220720"
  },
  {
    "text": "reach down and make sure it can connect to the database and it will only respond a 200 okay back to the load balancer",
    "start": "1220720",
    "end": "1226640"
  },
  {
    "text": "once um it's actually done a um a connection with the database so you know better practice maybe to do something",
    "start": "1226640",
    "end": "1232559"
  },
  {
    "text": "like that um then you can specify how long you'll give it to respond back in this case we're going to allow it 5",
    "start": "1232559",
    "end": "1237919"
  },
  {
    "text": "Seconds to respond back next we're going to say we're going to do a health check every half minute or every 30 seconds",
    "start": "1237919",
    "end": "1243760"
  },
  {
    "text": "and then we're going to set an unhealthy threshold in this case we set up five um five health checks so if you fail five",
    "start": "1243760",
    "end": "1249159"
  },
  {
    "text": "health checks in a row we're going to deregister that instance from the load balancer and stop sending traffic to it",
    "start": "1249159",
    "end": "1255600"
  },
  {
    "text": "further um if that instance um comes alive again um it's going to have to re",
    "start": "1255600",
    "end": "1261280"
  },
  {
    "text": "respond three times healthy before we send traffic back to it so um so we have the ability to set up an unhealthy",
    "start": "1261280",
    "end": "1267080"
  },
  {
    "text": "threshold and a healthy threshold with the load balancer um and then uh you know how often we check it and what file",
    "start": "1267080",
    "end": "1272640"
  },
  {
    "text": "we check it",
    "start": "1272640",
    "end": "1275120"
  },
  {
    "text": "via all right so now our elb is in place with you know supporting health checks",
    "start": "1278919",
    "end": "1284120"
  },
  {
    "text": "so we you know how how might that look okay so now got an instance or a web server that degrades um what's going",
    "start": "1284120",
    "end": "1291200"
  },
  {
    "text": "to happen in this scenario so you know what'll essentially happen is um that",
    "start": "1291200",
    "end": "1296480"
  },
  {
    "text": "that server is going to be Health checked and um it's going to it might fail a variety of health checks you had",
    "start": "1296480",
    "end": "1301880"
  },
  {
    "text": "the ability to customize and you know use a minimum of two health check failures before you stop serving traffic",
    "start": "1301880",
    "end": "1306960"
  },
  {
    "text": "to that we set it at five after five health checks it's going to be deregistered from the load balancer no",
    "start": "1306960",
    "end": "1312159"
  },
  {
    "text": "longer receive traffic and then um you know uh if that thing comes back to life",
    "start": "1312159",
    "end": "1317360"
  },
  {
    "text": "and starts passing health checks will will start sending a traffic",
    "start": "1317360",
    "end": "1322240"
  },
  {
    "text": "again okay so let's talk about using multiple availability zones so so we built a scenario already where we we um",
    "start": "1323760",
    "end": "1331600"
  },
  {
    "text": "have multiple servers to handle traffic so we can survive a single server failing we're using elb health checks to",
    "start": "1331600",
    "end": "1337320"
  },
  {
    "text": "survive that but you know what happens in the event of a you know a large scale catastrophic event um and you know a",
    "start": "1337320",
    "end": "1343799"
  },
  {
    "text": "data center goes down um you we want our application to be able to be fault across data centers as well so let's",
    "start": "1343799",
    "end": "1349799"
  },
  {
    "text": "start off by talking about the data tier and how we Harden the data tier um so um",
    "start": "1349799",
    "end": "1356320"
  },
  {
    "text": "we talked about using relational database service um or RDS for short and really that's Amazon's database as a",
    "start": "1356320",
    "end": "1363039"
  },
  {
    "text": "service offering um we have uh Oracle MySQL and SQL Server um Ser database",
    "start": "1363039",
    "end": "1370240"
  },
  {
    "text": "instances you can launch and you choose which version of Oracle SQL server or MySQL you launch and um you know it's",
    "start": "1370240",
    "end": "1377240"
  },
  {
    "text": "going to create those for you you actually you know you can say I want to deploy my SQL uh 5.6 or SQL Server 2012",
    "start": "1377240",
    "end": "1383919"
  },
  {
    "text": "and um it's preconfigured with sensible defa to get you started um it's automated patching we do all the dis",
    "start": "1383919",
    "end": "1390799"
  },
  {
    "text": "striping um and and so on for you you set up your backup schedule and your you know um how long you want to save",
    "start": "1390799",
    "end": "1397200"
  },
  {
    "text": "backups and we'll automatically take snapshots for you in the background and you know um we we stripe the discs um",
    "start": "1397200",
    "end": "1403799"
  },
  {
    "text": "you can specify your IO and performance requirements that you need um you can also set up with a failover capabilities",
    "start": "1403799",
    "end": "1410440"
  },
  {
    "text": "um such that you can have a master running with a slave running and another Data Center and synchronous replication",
    "start": "1410440",
    "end": "1415480"
  },
  {
    "text": "happening between them and we're going to talk more about that in the coming slides and how you might utilize that to have a more um redundant and fault",
    "start": "1415480",
    "end": "1422760"
  },
  {
    "text": "tolerant data tier on your application stack okay so now we've deployed um our",
    "start": "1422760",
    "end": "1430880"
  },
  {
    "text": "application and we've deployed it with RDS and we deployed it with synchronous replication between a master and slave",
    "start": "1430880",
    "end": "1436080"
  },
  {
    "text": "database so you can see we're now running our application in multiple availability zones we got availability",
    "start": "1436080",
    "end": "1441120"
  },
  {
    "text": "Zone a and availability Zone B and um we've got a master in availability Zone",
    "start": "1441120",
    "end": "1446320"
  },
  {
    "text": "a and all the reads and writs are going to the master and we're doing synchronous replication to the slave so",
    "start": "1446320",
    "end": "1451400"
  },
  {
    "text": "when we do a right to the master it's automatically writing to the slave and then responding back to the the server that initiated the",
    "start": "1451400",
    "end": "1459200"
  },
  {
    "text": "request okay so let's say that the database Master fails what happens in",
    "start": "1460279",
    "end": "1465559"
  },
  {
    "text": "that case well first the slave is promot to master and then the connection string from the um um that was pointing to the",
    "start": "1465559",
    "end": "1473919"
  },
  {
    "text": "master is then moved over to the slave so um you now have um all of your web",
    "start": "1473919",
    "end": "1480240"
  },
  {
    "text": "server instances pointing to the same connection string which is now connecting to a different instance so DNS is updated it takes about 1 to three",
    "start": "1480240",
    "end": "1487039"
  },
  {
    "text": "minutes for failover to occur so the way we recommend you you you build your application out putting in a back off",
    "start": "1487039",
    "end": "1493559"
  },
  {
    "text": "algorithm such that if you connect try to connect to the database and the database fails you back off off and then try again and then you back off and try",
    "start": "1493559",
    "end": "1499720"
  },
  {
    "text": "again eventually it's going to come back if you're running in multi a it typically takes about 1 to three minutes before the new Master is available and",
    "start": "1499720",
    "end": "1505720"
  },
  {
    "text": "responding to requests um so that would happen then um next um we'll stand up",
    "start": "1505720",
    "end": "1512960"
  },
  {
    "text": "another slave and we'll start synchronously replicating to that other slave back in availability Zone it and",
    "start": "1512960",
    "end": "1518240"
  },
  {
    "text": "so your new slave is provisioned and you're back in a highly available fashion um within a few minutes um",
    "start": "1518240",
    "end": "1524600"
  },
  {
    "text": "running you know multi-az um on your data tier",
    "start": "1524600",
    "end": "1529679"
  },
  {
    "text": "so how hard is it to make these changes or or to stand this up initially it's very easy I mean really all you're doing is when you provision your your database",
    "start": "1530240",
    "end": "1536960"
  },
  {
    "text": "instance you choose multi-az deployment and you know um that's all you need to do specifically to stand up a a a",
    "start": "1536960",
    "end": "1544880"
  },
  {
    "text": "database in AA and ASB and have Master Slave replication very easy this is",
    "start": "1544880",
    "end": "1550120"
  },
  {
    "text": "supported on MySQL and Oracle right now for",
    "start": "1550120",
    "end": "1554159"
  },
  {
    "text": "RDS okay so let's you we've got a data tier now that is um you know resilient",
    "start": "1556000",
    "end": "1561840"
  },
  {
    "text": "and full tolerant across multiple availability zones let's talk about how we might do that on the web tier next so",
    "start": "1561840",
    "end": "1567159"
  },
  {
    "text": "we're going to use um this is the way our application stack looks as of now um",
    "start": "1567159",
    "end": "1572600"
  },
  {
    "text": "we've got a a redundant um uh fault tolerant multi-az RDS solution in place",
    "start": "1572600",
    "end": "1578360"
  },
  {
    "text": "for the data tier but we probably want to do the same thing at the web tier so we're going to deploy the",
    "start": "1578360",
    "end": "1584720"
  },
  {
    "text": "elastic load balancer in front and we're going to now s traffic to um multiple servers and multiple availability zones",
    "start": "1584720",
    "end": "1591640"
  },
  {
    "text": "so we're actually going to have two web servers in each availability Zone and that load balancer is going to round robin the traffic back and forth across",
    "start": "1591640",
    "end": "1598600"
  },
  {
    "text": "instances and um we're going to be serving web traffic out of each availability Zone and now each availability zone is going to point um",
    "start": "1598600",
    "end": "1605919"
  },
  {
    "text": "back to a Master the master database to do its region",
    "start": "1605919",
    "end": "1610720"
  },
  {
    "text": "rights okay so now how do we handle scaling so that's a great architecture um it's fault tolerant um it's a little",
    "start": "1613640",
    "end": "1621440"
  },
  {
    "text": "more highly available but if remember we talked about scalability being a core tenant of building a highly available um",
    "start": "1621440",
    "end": "1627559"
  },
  {
    "text": "application and architecture on AWS so what happens if my application requires scaling um let's say I get to the point",
    "start": "1627559",
    "end": "1634440"
  },
  {
    "text": "where I don't um you know I I've got too much traffic coming in I need to be able to respond to that and my application",
    "start": "1634440",
    "end": "1640520"
  },
  {
    "text": "needs to be able to grow you know we want to be able to respond to that elegantly um we have a service for",
    "start": "1640520",
    "end": "1646279"
  },
  {
    "text": "that and um so you know this is the way our application looks right now um but",
    "start": "1646279",
    "end": "1651600"
  },
  {
    "text": "you know Amazon gives you the ability to um look at metrics um and you can look at",
    "start": "1651600",
    "end": "1659039"
  },
  {
    "text": "those metrics via API or or via the console and the magnifying glass show some of the metrics that are coming out",
    "start": "1659039",
    "end": "1665039"
  },
  {
    "text": "of ec2 you can see the CPU and you can see a variety of different metrics that are available to those you know ec2",
    "start": "1665039",
    "end": "1670840"
  },
  {
    "text": "instances via Cloud watch which is our metric service so Cloud watch plugs into",
    "start": "1670840",
    "end": "1676320"
  },
  {
    "text": "autoscaling and it gives you the ability to scale up or scale down your compute or your web tier or your app tier or any",
    "start": "1676320",
    "end": "1683279"
  },
  {
    "text": "tier of your application um via compute metrics that are coming out of ec2 so um",
    "start": "1683279",
    "end": "1688480"
  },
  {
    "text": "we're going to talk a little bit more about that so um what is autoscaling autoscaling allows the automatic",
    "start": "1688480",
    "end": "1693720"
  },
  {
    "text": "resizing of your compute cluster based upon demand um so the way it works you",
    "start": "1693720",
    "end": "1699200"
  },
  {
    "text": "define um uh an autoscale group you might say I want to have a minimum of",
    "start": "1699200",
    "end": "1704640"
  },
  {
    "text": "four servers in my autoscale group I want to have two in availability Zone a",
    "start": "1704640",
    "end": "1710080"
  },
  {
    "text": "and two in availability Zone B um and I want to scale up by increments of two",
    "start": "1710080",
    "end": "1715519"
  },
  {
    "text": "and I want to scale down by increments of two and then you might say you define a launch config and that launch config",
    "start": "1715519",
    "end": "1721279"
  },
  {
    "text": "would say every time I turn up a new server I want you to use this Ami this custom Ami and I want you to spin it up",
    "start": "1721279",
    "end": "1728720"
  },
  {
    "text": "um on a M1 extr large and I want um",
    "start": "1728720",
    "end": "1733919"
  },
  {
    "text": "these bootstrap commands to be fired off um on uh turn up of the instance and um",
    "start": "1733919",
    "end": "1739679"
  },
  {
    "text": "so that's the way autoscaling works and then lastly you define policies you might Define a scale up and a scale down",
    "start": "1739679",
    "end": "1745679"
  },
  {
    "text": "policy and the way you might do something like that would be to define a policy that use CL uses Cloud watch",
    "start": "1745679",
    "end": "1752000"
  },
  {
    "text": "metrics to scale up and scale down you can further scale up and scale Down based on a schedule if you have a certain time of the day where your",
    "start": "1752000",
    "end": "1758279"
  },
  {
    "text": "application always um sees a spike in demand and then um there's another time in the day where that demand goes back",
    "start": "1758279",
    "end": "1763919"
  },
  {
    "text": "down you might set up a schedule to scale up at a certain time of the Day by X number of servers and then scale down",
    "start": "1763919",
    "end": "1770159"
  },
  {
    "text": "back when you know your load um backs off but if you want to do it organically um based upon demand you can Define",
    "start": "1770159",
    "end": "1776039"
  },
  {
    "text": "policies for scale up and scale down and a policy might be something like when my CPU layer on average hits 80% CPU",
    "start": "1776039",
    "end": "1784279"
  },
  {
    "text": "utilization for over 10 minutes I want to scale up by X number of servers and then my scale down policy might be if my",
    "start": "1784279",
    "end": "1791399"
  },
  {
    "text": "CPU layer um um has utilization lower than 40% for over 10 minutes an",
    "start": "1791399",
    "end": "1797480"
  },
  {
    "text": "aggregate um I want to scale down by two servers so those what are What autoscale policies might look like so then you put",
    "start": "1797480",
    "end": "1804760"
  },
  {
    "text": "those policies in action and um so so here we're we're",
    "start": "1804760",
    "end": "1810600"
  },
  {
    "text": "showing a picture of our our web server tier and it's now aware of the cloudwatch metrics we're going to deploy",
    "start": "1810600",
    "end": "1816519"
  },
  {
    "text": "Auto scaling to that tier so now we have the ability to scale up um and remember you know without scaling our ha solution",
    "start": "1816519",
    "end": "1823120"
  },
  {
    "text": "can be dead in the water at this point if too many requests come in and we can't handle the traffic so this is something that's good to have if you",
    "start": "1823120",
    "end": "1828159"
  },
  {
    "text": "have an application that requires scaling if you have organic growth in your application or you have um users um",
    "start": "1828159",
    "end": "1834320"
  },
  {
    "text": "at different times the day things go up or down you can use Auto scale by policy or Auto scale by schedule to adjust your",
    "start": "1834320",
    "end": "1842240"
  },
  {
    "text": "load okay so now we've got an instance where um our instances are heating up um and they're hitting the policy to scale",
    "start": "1842960",
    "end": "1849320"
  },
  {
    "text": "up so how does that work well um the autoscaling policy",
    "start": "1849320",
    "end": "1854799"
  },
  {
    "text": "fires and it starts launching an instance um of a certain size or a certain instance type based upon a",
    "start": "1854799",
    "end": "1860600"
  },
  {
    "text": "certain Ami you define and again with any commands or bootstrap actions you want to take um during launch of the",
    "start": "1860600",
    "end": "1867919"
  },
  {
    "text": "instance so now um those instances start to deploy and are launched and as soon",
    "start": "1867919",
    "end": "1872960"
  },
  {
    "text": "as those instances Boot and pass a certain number of health checks they get it attached to to the elastic load",
    "start": "1872960",
    "end": "1878679"
  },
  {
    "text": "balancer and registered against the elb and they start receiving traffic so now we're actually delivering traffic to six",
    "start": "1878679",
    "end": "1883919"
  },
  {
    "text": "servers versus four um based upon scaling on CPU",
    "start": "1883919",
    "end": "1889480"
  },
  {
    "text": "utilization okay so now we're in a situation where um you know that that spike in demand has gone down and um you",
    "start": "1889480",
    "end": "1897440"
  },
  {
    "text": "know maybe it's late at night maybe our application has slowed down we're getting less traffic and now our CPU utilization has been below 40% for over",
    "start": "1897440",
    "end": "1904279"
  },
  {
    "text": "10 minutes on average across our our layer or our CPU um or our web tier so now um we've triggered the scale down",
    "start": "1904279",
    "end": "1913360"
  },
  {
    "text": "policy and what happens is two of those instances are registered from the elb so",
    "start": "1913360",
    "end": "1918600"
  },
  {
    "text": "they stop receiving traffic and then autoscaling um terminates those instances and now we're back down to",
    "start": "1918600",
    "end": "1924760"
  },
  {
    "text": "four instances so again this is where it's really um really nice to be um not",
    "start": "1924760",
    "end": "1930240"
  },
  {
    "text": "storing session data on your instances directly storing in another store like a database or a nosql environment or a",
    "start": "1930240",
    "end": "1936600"
  },
  {
    "text": "caching layer um you know or potentially cookies or wherever it may be but storing your session data outside of the",
    "start": "1936600",
    "end": "1942519"
  },
  {
    "text": "actual web server so that you have the ability to organically scale up and scale down um and not be um abandoning",
    "start": "1942519",
    "end": "1948480"
  },
  {
    "text": "sessions during that okay so we're going to talk about",
    "start": "1948480",
    "end": "1953760"
  },
  {
    "text": "scaling at the data tier we talked a lot about um ha at the data tier and being full tolerant but let's talk about",
    "start": "1953760",
    "end": "1959720"
  },
  {
    "text": "scaling at the data tier and a few principles you might use to scale at the data tier first off um RDS has the",
    "start": "1959720",
    "end": "1965559"
  },
  {
    "text": "ability to push button scale so um you have the ability to scale up or scale down in RDS instance um by going to the",
    "start": "1965559",
    "end": "1972600"
  },
  {
    "text": "console and changing the size and hitting deploy um you know again you got a little bit of time where you fail um",
    "start": "1972600",
    "end": "1979919"
  },
  {
    "text": "if if you if you deploy in multi-az You' got um uh the ability to um scale up one instance you still are going to change",
    "start": "1979919",
    "end": "1986000"
  },
  {
    "text": "the connection string and so on um so maybe a small amount of downtime if you're doing this on a single instance",
    "start": "1986000",
    "end": "1991639"
  },
  {
    "text": "um you're probably going to have a little more boot time so you know maybe not ideal so it's good to be running in multi AE where you fail over to a slave",
    "start": "1991639",
    "end": "1998639"
  },
  {
    "text": "when you're actually scaling out um but you have the ability to scale up and scale down your instances um you know",
    "start": "1998639",
    "end": "2004720"
  },
  {
    "text": "very quickly on your data tier so you can now accommodate more reads and writes have more CPU and RAM",
    "start": "2004720",
    "end": "2011159"
  },
  {
    "text": "available to serve requests you also have the ability to um",
    "start": "2011159",
    "end": "2016480"
  },
  {
    "text": "if you're using RDS with mySQL to um scale out read servers so um where you",
    "start": "2016480",
    "end": "2023440"
  },
  {
    "text": "got a Master Slave uh on on my SQL you also have the ability to Define read replicas and you can create up to um",
    "start": "2023440",
    "end": "2030480"
  },
  {
    "text": "five read replicas for a Master Slave combination on uh um Amazon RDS so",
    "start": "2030480",
    "end": "2037519"
  },
  {
    "text": "you find read replicas and those read replicas are kept in sync with the master via MySQL replication and now you",
    "start": "2037519",
    "end": "2043600"
  },
  {
    "text": "can actually um use the um read replicas to point all of your reads from your app",
    "start": "2043600",
    "end": "2049800"
  },
  {
    "text": "tier down to the read replicas and then point your rights to the master so you're taking your reload off of the",
    "start": "2049800",
    "end": "2055638"
  },
  {
    "text": "master and you're actually pushing it down to the read replicas and only your rights are going against the master you could also run all of your reporting an",
    "start": "2055639",
    "end": "2061320"
  },
  {
    "text": "ETL again so as read replic because just the same okay okay so um you know you want",
    "start": "2061320",
    "end": "2068480"
  },
  {
    "text": "to op optimize your master for you know all of your olp transactions um and the",
    "start": "2068480",
    "end": "2073520"
  },
  {
    "text": "read slaves you know you might Point your table scans you're reporting to the read replicas um you can also resize the",
    "start": "2073520",
    "end": "2078839"
  },
  {
    "text": "SLA resize the slaves and you have the ability to um um take a slave and promote it to a standalone server as",
    "start": "2078839",
    "end": "2085200"
  },
  {
    "text": "well um you also have the ability to just turn up a slave for monthly reporting if you want to um you know",
    "start": "2085200",
    "end": "2090440"
  },
  {
    "text": "minimize costs so hey I'm going to do monthly reporting at the end of the month I'm going to stand up a read replica replicate to it do all my",
    "start": "2090440",
    "end": "2096839"
  },
  {
    "text": "reporting and then turn that slave down so um good pattern there for saving",
    "start": "2096839",
    "end": "2102359"
  },
  {
    "text": "money okay so what happens when I've um used RDS or or maybe I'm running my own",
    "start": "2104200",
    "end": "2110320"
  },
  {
    "text": "databases on ec2 and then um I I hit the point where I've I've you I'm running",
    "start": "2110320",
    "end": "2115359"
  },
  {
    "text": "reads um through through another you know like through another mechanism I might be using read replicas I might have a caching mechanism in place for",
    "start": "2115359",
    "end": "2121680"
  },
  {
    "text": "reads um but now my master is um you know saturated with rice so you know at",
    "start": "2121680",
    "end": "2127280"
  },
  {
    "text": "large scale you may run into issues with you know database contention on rights to the master so how do you solve that",
    "start": "2127280",
    "end": "2133160"
  },
  {
    "text": "well we're going to talk about three different ways you might look at that um first we're going to talk about Federation splitting your database into",
    "start": "2133160",
    "end": "2139440"
  },
  {
    "text": "you know splitting your database up based upon function next we'll talk about charting or splitting one data set",
    "start": "2139440",
    "end": "2145839"
  },
  {
    "text": "across multiple hosts and then lastly we'll talk about you know possibilities of MySQL or [Music]",
    "start": "2145839",
    "end": "2152000"
  },
  {
    "text": "nosql okay so first we're going to talk about database Federation so um database f Federation is where you're splitting",
    "start": "2152000",
    "end": "2157800"
  },
  {
    "text": "up database by function or purpose so in this case we might have had one database server running um all of our forums all",
    "start": "2157800",
    "end": "2163960"
  },
  {
    "text": "of our user tables all of our product tables and now we're going to actually segregate those out and run those on",
    "start": "2163960",
    "end": "2169560"
  },
  {
    "text": "different database servers so we might have a master and slave and re a a combination for forums another one for",
    "start": "2169560",
    "end": "2175640"
  },
  {
    "text": "users and another one for products so you know it is hard to do cross functional queries now you might have to",
    "start": "2175640",
    "end": "2181079"
  },
  {
    "text": "do joins via code rather than um things via SQL but you know this delays the need for something like or no SQL for",
    "start": "2181079",
    "end": "2187640"
  },
  {
    "text": "quite a while and saves a lot of complexity you might incur with one of those other Solutions um so you know",
    "start": "2187640",
    "end": "2194119"
  },
  {
    "text": "where this won't help with single huge tables that are growing out of control this helps where you've got you know um",
    "start": "2194119",
    "end": "2200240"
  },
  {
    "text": "reads spread or sorry reads and wrs spread across multiple different areas like forums users and products so if you",
    "start": "2200240",
    "end": "2207480"
  },
  {
    "text": "do have a single huge table that's growing out of control there's a variety of things you can do there um first off",
    "start": "2207480",
    "end": "2212760"
  },
  {
    "text": "we're going to talk about sharding so um what sharding is is where I might might have a let's say I've got a really large",
    "start": "2212760",
    "end": "2218480"
  },
  {
    "text": "users table like in this example here I've got a users table that's grown um beyond the size that I can manage in one",
    "start": "2218480",
    "end": "2224319"
  },
  {
    "text": "database so what I might do is I might split that across three different databases um and uh I might and then my",
    "start": "2224319",
    "end": "2231680"
  },
  {
    "text": "application needs to be aware that maybe I've got users a through L stored in one",
    "start": "2231680",
    "end": "2236920"
  },
  {
    "text": "database and I've got users M through R stored in another database and then I've got users um s through Z stored in a",
    "start": "2236920",
    "end": "2243680"
  },
  {
    "text": "third database and the application um understands when I want to go and write or read from a user um in a particular",
    "start": "2243680",
    "end": "2251000"
  },
  {
    "text": "um I need to go to a particular database like you know Shard A Shard b or Shard C",
    "start": "2251000",
    "end": "2256280"
  },
  {
    "text": "so um there's really no practical limit on scalability here you can create many shards you know and um you can there's a",
    "start": "2256280",
    "end": "2263160"
  },
  {
    "text": "a variety of ways I I articulated a very simple way of sharding but you can you can also Shard by um function or key",
    "start": "2263160",
    "end": "2268760"
  },
  {
    "text": "space um you can also Shard with um a relational database or no SQL and um so",
    "start": "2268760",
    "end": "2274319"
  },
  {
    "text": "you know very common that people Shard out um you know RDS or or any of the um",
    "start": "2274319",
    "end": "2279720"
  },
  {
    "text": "Rd BMS you know um relational database Services you can also Shard out Cassandra or or a lot of those",
    "start": "2279720",
    "end": "2285400"
  },
  {
    "text": "other Solutions and run many shards um to achieve great you know scale at the data tier um lastly I wanted to just",
    "start": "2285400",
    "end": "2292680"
  },
  {
    "text": "mention our Dynamo DB product it is a managed nosql offering and you can grow your table to infinite scale um uh on on",
    "start": "2292680",
    "end": "2301440"
  },
  {
    "text": "Dynamo DB you simply add data to the table and we manage all the um partitioning or starting on the back end",
    "start": "2301440",
    "end": "2307440"
  },
  {
    "text": "based upon the table size and about how many reads and writs you provision and so you actually with Dynamo DB you",
    "start": "2307440",
    "end": "2313920"
  },
  {
    "text": "provision how much I you want in terms of reads and writs per second and as you turn that dial we will repartition your",
    "start": "2313920",
    "end": "2320720"
  },
  {
    "text": "data on the back end automatically for you that it can so that it can accommodate the amount of reads and writes per second you require so great",
    "start": "2320720",
    "end": "2328040"
  },
  {
    "text": "solution for um you know tables that are growing very fast um Dynamo DB uh fills",
    "start": "2328040",
    "end": "2334119"
  },
  {
    "text": "that category very well okay so next we're going to talk about",
    "start": "2334119",
    "end": "2340319"
  },
  {
    "text": "self-healing so we talked about health checks and",
    "start": "2340319",
    "end": "2345280"
  },
  {
    "text": "autoscaling and um you know we're back to our standard web stack with ec2 Autos scale and Cloud watch um let's talk",
    "start": "2345760",
    "end": "2352040"
  },
  {
    "text": "about how this might be self-healing so you know what happens if",
    "start": "2352040",
    "end": "2357599"
  },
  {
    "text": "a node fails you know how do we um hang on excuse me so what happens if a node",
    "start": "2357599",
    "end": "2363200"
  },
  {
    "text": "fails um how do we prevent traffic from getting to it so um you know we set up a health check um and automatically um elb",
    "start": "2363200",
    "end": "2370920"
  },
  {
    "text": "is going to recognize oh that that tra you know not that particular instance is not passing a health check so I'm going",
    "start": "2370920",
    "end": "2376400"
  },
  {
    "text": "to stop serving traffic and then autoscale will recognize that that that particular instance is no longer viable",
    "start": "2376400",
    "end": "2382440"
  },
  {
    "text": "and it will it will terminate that particular instance so Auto scale is going to kill that instance and then you",
    "start": "2382440",
    "end": "2387880"
  },
  {
    "text": "know next um it's going to start Pro reprovision another instance um so Auto scaling will recognize hey I'm supposed",
    "start": "2387880",
    "end": "2393400"
  },
  {
    "text": "to have a fleet of four I've only got a fleet of three I need to launch another instance in availability Zone B so Autos",
    "start": "2393400",
    "end": "2399280"
  },
  {
    "text": "scaling starts replacing that instance in ASB and then once that instance um",
    "start": "2399280",
    "end": "2405119"
  },
  {
    "text": "passes a number of health checks again defined by you um it gets registered against the load balance and starts re",
    "start": "2405119",
    "end": "2411240"
  },
  {
    "text": "receiving traffic again so so you can think of Auto scaling um in terms of you",
    "start": "2411240",
    "end": "2416920"
  },
  {
    "text": "know scaling up or scaling down but you can also think of it just in terms of maintaining a fleet um you know it I'm",
    "start": "2416920",
    "end": "2424079"
  },
  {
    "text": "not I might not be scaling up or scaling down at all all I need to do is just maintain for servers Autos Skilling has",
    "start": "2424079",
    "end": "2429280"
  },
  {
    "text": "the ability in conjunction with elb health checks to you know maintain the fleet so you know Health Checks Plus",
    "start": "2429280",
    "end": "2434800"
  },
  {
    "text": "Auto scaling does equal self-healing and that's a key point to think about all right so let's say um we get",
    "start": "2434800",
    "end": "2442920"
  },
  {
    "text": "into a situation where our application is in a degraded mode um you know the full app we've done all these practices",
    "start": "2442920",
    "end": "2449359"
  },
  {
    "text": "but for some reason our application is in degraded degraded mode you know and again we you know everything fails like",
    "start": "2449359",
    "end": "2454920"
  },
  {
    "text": "we talked about um but you know we've done a lot of practices now that should be guaranteeing that our application is",
    "start": "2454920",
    "end": "2460720"
  },
  {
    "text": "highly available but you know how do we want to respond if if there was a scenario where our application goes into a degraded mode so let's talk through",
    "start": "2460720",
    "end": "2467800"
  },
  {
    "text": "that a little bit okay so Route 53 has a concept called DNS failover so you can",
    "start": "2467800",
    "end": "2474520"
  },
  {
    "text": "um set up a primary um DNS route and a a a secondary DNS route and and then what",
    "start": "2474520",
    "end": "2482280"
  },
  {
    "text": "we're going to do is we're going to stand up a static website on S3 as the backup route for our primary website all",
    "start": "2482280",
    "end": "2488640"
  },
  {
    "text": "right so let's talk about how that looks a little bit so this is a picture of the",
    "start": "2488640",
    "end": "2493960"
  },
  {
    "text": "S3 console here and here what we're doing is we're um building out a static website as a backup in S3 so S3 can be",
    "start": "2493960",
    "end": "2502599"
  },
  {
    "text": "utilized in um as a web server and you can um actually put S3 you can define an",
    "start": "2502599",
    "end": "2508280"
  },
  {
    "text": "S3 bucket and set it up in website mode where it actually is delivering static files and actually acting like a web",
    "start": "2508280",
    "end": "2514200"
  },
  {
    "text": "server for static content so you can see here you can set up an index document in this case it's index.html you can also",
    "start": "2514200",
    "end": "2521440"
  },
  {
    "text": "set up an error document which is called error. HTML and then lastly you know you could have an about us a contact us you",
    "start": "2521440",
    "end": "2527599"
  },
  {
    "text": "could have product pages you can have all sorts of different content that's delivered statically from from S3 so you",
    "start": "2527599",
    "end": "2533119"
  },
  {
    "text": "could have a very nice little backup site that only in a totally catastrophic scenario um you know would be used um",
    "start": "2533119",
    "end": "2540440"
  },
  {
    "text": "but it would still actually provide a you know service to your users might have contact information and so on",
    "start": "2540440",
    "end": "2546680"
  },
  {
    "text": "okay so how does this look well um so what we're going to do is we're going to go into Route 53 and",
    "start": "2546680",
    "end": "2553040"
  },
  {
    "text": "we're going to create a number of record sets we're going to create a record set for the C name for dubdub d.my",
    "start": "2553040",
    "end": "2558280"
  },
  {
    "text": "website.com and it's going to point to our elastic load balancer so we're going to create a c name that points to our",
    "start": "2558280",
    "end": "2564359"
  },
  {
    "text": "our our domain name to our elastic load balancer and the routing policy is going to be failover routing and lastly we're",
    "start": "2564359",
    "end": "2570480"
  },
  {
    "text": "going to Define that per that first record that points to our appstack our Dynamic appstack um that's again and",
    "start": "2570480",
    "end": "2576400"
  },
  {
    "text": "fault tolerant and highly available um we're going to Define that as a record type of primary next we're going to actually we",
    "start": "2576400",
    "end": "2583599"
  },
  {
    "text": "created that S3 static website which you know gives um a pretty nice user experience again it's not Dynamic you",
    "start": "2583599",
    "end": "2589800"
  },
  {
    "text": "can't log in and all of those things but again you know I've got my homepage I got my products pages I got contact us",
    "start": "2589800",
    "end": "2595599"
  },
  {
    "text": "about us all that stuff in my static website and I defined a routing policy of failover as well for dubdub dub.",
    "start": "2595599",
    "end": "2602119"
  },
  {
    "text": "mywebsite.com but I defined a record type of secondary so what happens well in a you know in a case where um you",
    "start": "2602119",
    "end": "2609599"
  },
  {
    "text": "know the DNS you know the DNS Route 53 um you set up a health check against your load balancer where in the case",
    "start": "2609599",
    "end": "2615680"
  },
  {
    "text": "where it actually can't send traffic to that primary um route it's going to actually push traffic to the secondary",
    "start": "2615680",
    "end": "2621559"
  },
  {
    "text": "route and then when that primary route comes back up it's going to start sending traffic back to that primary route where you know to your load",
    "start": "2621559",
    "end": "2627520"
  },
  {
    "text": "balancer so this is a great way to back up your act application it's a little bit of a um you know worst case scenario",
    "start": "2627520",
    "end": "2634440"
  },
  {
    "text": "strategy but you know you're you're actually serving users so it it it works pretty",
    "start": "2634440",
    "end": "2640079"
  },
  {
    "text": "well all right so on to our final topic um loose coupling so you",
    "start": "2640079",
    "end": "2647480"
  },
  {
    "text": "know important to build Loosely coupled systems the looser that you are couple the bigger you can scale the more",
    "start": "2647480",
    "end": "2653559"
  },
  {
    "text": "tolerant you can get and um so for those of you who haven't heard of SOA um SOA",
    "start": "2653559",
    "end": "2659440"
  },
  {
    "text": "stands for service oriented architecture and really it means you know you're going to move services or components",
    "start": "2659440",
    "end": "2664800"
  },
  {
    "text": "into their own tiers or modules you're going to treat each of these as 100% um separate piece of your infrastructure so",
    "start": "2664800",
    "end": "2670920"
  },
  {
    "text": "you can scale these pieces independently of each other so amazon.com and both you",
    "start": "2670920",
    "end": "2676319"
  },
  {
    "text": "know both amazon.com and ews do this and um if you think about amazon.com you there are many components that make up",
    "start": "2676319",
    "end": "2682680"
  },
  {
    "text": "the amazon.com website you've got recommendations engines you've got reviews you've got searches you've got",
    "start": "2682680",
    "end": "2688559"
  },
  {
    "text": "um you know the web tier you've got the products and all these things come together to create a website and all these things are components that you",
    "start": "2688559",
    "end": "2694640"
  },
  {
    "text": "know are able to scale independently of each other and if one of these things fails you still have the rest of the the website working the the website's not",
    "start": "2694640",
    "end": "2701640"
  },
  {
    "text": "going to fail because one piece of the website fails Amazon.com or sorry AWS is",
    "start": "2701640",
    "end": "2706960"
  },
  {
    "text": "the same you know we've got each service inside of AWS represented by a different",
    "start": "2706960",
    "end": "2712040"
  },
  {
    "text": "set of components you know you've got different API endpoints for ec2 and for elb and for all the different services",
    "start": "2712040",
    "end": "2717599"
  },
  {
    "text": "and then even behind the covers you know um AWS you know componentized each one of the things different things you do",
    "start": "2717599",
    "end": "2723359"
  },
  {
    "text": "like you know creates and and reads and all the different things you might want to be doing you know building those as",
    "start": "2723359",
    "end": "2728440"
  },
  {
    "text": "separate building blocks and having them scale out independently is a very key piece of you know letting your",
    "start": "2728440",
    "end": "2734280"
  },
  {
    "text": "infrastructure scale independently and letting you know one thing not impact",
    "start": "2734280",
    "end": "2739960"
  },
  {
    "text": "another okay so you know we're going to talk a little bit more about loose coupling so the looser the looser you're coupled the bigger you can scale um you",
    "start": "2742319",
    "end": "2749400"
  },
  {
    "text": "know it's important to you know have independent components and tiers tier application design these tiers as black",
    "start": "2749400",
    "end": "2754640"
  },
  {
    "text": "boxes or these components as black boxes decouple interactions between them um you know creating Services layers",
    "start": "2754640",
    "end": "2760520"
  },
  {
    "text": "between them you know favor services with built-in redundancy and scalability rather than building your own we looked at the beginning at a number of services",
    "start": "2760520",
    "end": "2767200"
  },
  {
    "text": "that offer um you know ha or fault tolerance right out of the out of the gate um with AWS you know great to use",
    "start": "2767200",
    "end": "2773520"
  },
  {
    "text": "those um don't build your own use you know reuse what you can um one key concept there is Amazon",
    "start": "2773520",
    "end": "2781040"
  },
  {
    "text": "sqs our simple queuing service so we're going to talk briefly about that what it gives you the ability to do is um Define",
    "start": "2781040",
    "end": "2786880"
  },
  {
    "text": "cues and then via API you can place items in the cues and retrieve items from the cues and delete items from the cues um it's highly redone it um you can",
    "start": "2786880",
    "end": "2795160"
  },
  {
    "text": "hit the cues from any of the availability zones in a region your your messages are replicated around the region so um very durable um unlimited",
    "start": "2795160",
    "end": "2802400"
  },
  {
    "text": "number of messages you know scales automatically great service to use and",
    "start": "2802400",
    "end": "2807520"
  },
  {
    "text": "let's talk about this particular use case where we've got a receiver that might be receiving something might be pushing um you know um you then",
    "start": "2807520",
    "end": "2814559"
  },
  {
    "text": "contacting a trans coding unit with which then publishes and notifies and you know it's very linear um and these",
    "start": "2814559",
    "end": "2820079"
  },
  {
    "text": "things Point directly at each other well you know a better way to do that might be to to um decouple these things by",
    "start": "2820079",
    "end": "2826280"
  },
  {
    "text": "putting a queuing service in between and now once the queuing service is in between I can change the order of things I can insert new processes in between I",
    "start": "2826280",
    "end": "2833000"
  },
  {
    "text": "can scale these particular the receiver out versus the transcoder out versus the publisher out separately um and you know",
    "start": "2833000",
    "end": "2840599"
  },
  {
    "text": "again I can reorder my process and so on so here's a real world example of how this might look I might have a user",
    "start": "2840599",
    "end": "2847440"
  },
  {
    "text": "coming in hitting a load balance or hitting a web tier that scales out independently um let's say that the user is posting a video that video may put a",
    "start": "2847440",
    "end": "2854839"
  },
  {
    "text": "message in a transcoding queue and respond to the user saying hey your video has been um uploaded and submitted",
    "start": "2854839",
    "end": "2860079"
  },
  {
    "text": "for you know um processing then you know you've got a transcoding worker group that's working back on the backside",
    "start": "2860079",
    "end": "2866200"
  },
  {
    "text": "grabbing messages out of the queue transcoding those videos and then putting them into a different queue where then there's a batch um another",
    "start": "2866200",
    "end": "2873119"
  },
  {
    "text": "set of workers that's grabbing that that publishing queue and saying okay I need to go collect all the metadata and put",
    "start": "2873119",
    "end": "2878400"
  },
  {
    "text": "it in Dynamo DB and put publish the Assets in S3 and then um once the assets are",
    "start": "2878400",
    "end": "2883960"
  },
  {
    "text": "published I go and you know um flip the flag and turn these things on um and you know make them visible to the users and",
    "start": "2883960",
    "end": "2890240"
  },
  {
    "text": "so then users can actually go and hit my website and see those those particular assets available so that that might be",
    "start": "2890240",
    "end": "2896240"
  },
  {
    "text": "um a workflow a possible workflow for uh a transcoding um you know video delivery",
    "start": "2896240",
    "end": "2903720"
  },
  {
    "text": "workflow all right so let's talk quickly about visibility timeouts well let's say",
    "start": "2904359",
    "end": "2909680"
  },
  {
    "text": "um now first let's say talk about what a visibility timeout is so um let's say I go grab an item out of a queue um I'm a",
    "start": "2909680",
    "end": "2916800"
  },
  {
    "text": "transcoding worker I go grab an item out of a queue I'm processing that item and all of a sudden I die I the instance",
    "start": "2916800",
    "end": "2922280"
  },
  {
    "text": "fails it degrades for whatever reason um well now I'm going to in theory I might lose that item okay well what the",
    "start": "2922280",
    "end": "2929520"
  },
  {
    "text": "visibility timeout says is okay if you grab an item out of a queue and start processing it and then don't go and turn",
    "start": "2929520",
    "end": "2935839"
  },
  {
    "text": "turn around and delete the item um you set the divisibility time out in this case we set it to 10 minutes and in 10",
    "start": "2935839",
    "end": "2941640"
  },
  {
    "text": "minutes that item will pop back into the que since it wasn't deleted and another worker node can grab it and process it so so I actually have some again this is",
    "start": "2941640",
    "end": "2949559"
  },
  {
    "text": "this makes my my transcoding process highly available um I'm not going to lose any items if I don't finish them",
    "start": "2949559",
    "end": "2955119"
  },
  {
    "text": "and delete them they'll get processed by another instance so um how does that look um I",
    "start": "2955119",
    "end": "2961880"
  },
  {
    "text": "grabbed a job and the transcoding worker fails again 10 minutes later that item pops",
    "start": "2961880",
    "end": "2968280"
  },
  {
    "text": "back in the queue in the transcoding queue and then another worker is going to grab",
    "start": "2968280",
    "end": "2975040"
  },
  {
    "text": "that item and finish processing that particular item so okay that works great what about scaling for a back-end",
    "start": "2975040",
    "end": "2981359"
  },
  {
    "text": "process how do I scale a backend process well you also have the ability to scale out your your Fleet in ec2 based upon",
    "start": "2981359",
    "end": "2987920"
  },
  {
    "text": "Cloud W metrics from Amazon sqs so you can use Amazon sqs Cloud met Cloud watch",
    "start": "2987920",
    "end": "2993640"
  },
  {
    "text": "metrics and Autos scaling to scal your materi so let's say your your transcoding queue is just receiving a",
    "start": "2993640",
    "end": "3000000"
  },
  {
    "text": "ton of requests we've got tons of videos to transcode it's very backed up you can actually set up your backend batch",
    "start": "3000000",
    "end": "3006799"
  },
  {
    "text": "process of transcoding workers to Scale based on the Q depth in sqs and that's what you see here we've scaled out many",
    "start": "3006799",
    "end": "3013040"
  },
  {
    "text": "more workers to um catch up or over provision to catch up and get back to normal where our cues get back to a",
    "start": "3013040",
    "end": "3018720"
  },
  {
    "text": "normal length and then maybe we'll set another scale down policy to scale down once our Q gets to a a more reasonable",
    "start": "3018720",
    "end": "3025119"
  },
  {
    "text": "um level Okay so we've talked about a lot of Concepts today we' talked about design",
    "start": "3025119",
    "end": "3031559"
  },
  {
    "text": "for failure we've talked about multiple availability zones we talked about scaling talked about self-healing we",
    "start": "3031559",
    "end": "3036720"
  },
  {
    "text": "talked about loose coupling let's just quickly review those and then wrap up so design for failure um you know we talked",
    "start": "3036720",
    "end": "3043400"
  },
  {
    "text": "about some very simple use cases um you know running a very um single point of failure stack um but putting some means",
    "start": "3043400",
    "end": "3050000"
  },
  {
    "text": "in place let's say we do have a uh an application that can only run on a single server we talked about a couple means for you know having persistent",
    "start": "3050000",
    "end": "3057040"
  },
  {
    "text": "storage being able to move your IP address and so on um so this is again our our base scenario then we talked",
    "start": "3057040",
    "end": "3063079"
  },
  {
    "text": "about okay well we want to be able to scale out and use multiple availability zones to be a little more fault tolerant",
    "start": "3063079",
    "end": "3068400"
  },
  {
    "text": "both at our web tier and our app tier and of course our elastic load balancing tier is fall tolerant right out of the",
    "start": "3068400",
    "end": "3073920"
  },
  {
    "text": "box and we talked about scaling out we talked about scaling out at both the web tier and at the data tier then we talked",
    "start": "3073920",
    "end": "3081319"
  },
  {
    "text": "about um self-healing using health checks in conjunction with Auto scale to replace instances deregister them move",
    "start": "3081319",
    "end": "3088200"
  },
  {
    "text": "them out and turn up a new instance to replace them and then lastly we talked about loose coupling you know using",
    "start": "3088200",
    "end": "3093240"
  },
  {
    "text": "queuing um not building everything so it's point to point you know I'm using sew on your architecture so given that",
    "start": "3093240",
    "end": "3100599"
  },
  {
    "text": "um your goal should be building applications that continue to function and are survivable and are highly",
    "start": "3100599",
    "end": "3106280"
  },
  {
    "text": "available um so again it's all about Choice you've got to balance your cost with your your availability you know and",
    "start": "3106280",
    "end": "3113200"
  },
  {
    "text": "and come up with your own architecture this is just an example um of some tools that you can apply in a variety of",
    "start": "3113200",
    "end": "3118640"
  },
  {
    "text": "different patterns to build a highly available platform that fits your cost profile and your RTO your um and your",
    "start": "3118640",
    "end": "3127000"
  },
  {
    "text": "RPO all right well that's all I have I wanted to provide a few links to our architecture Center to our articles to",
    "start": "3127359",
    "end": "3133119"
  },
  {
    "text": "our blog and to our podcast and given that I'm going to turn it over to",
    "start": "3133119",
    "end": "3138319"
  },
  {
    "text": "questions so uh we've been collecting the questions you have um okay first um",
    "start": "3138319",
    "end": "3145000"
  },
  {
    "text": "is EBS shared between um azs is it similar to RDS so no EBS is not shared",
    "start": "3145000",
    "end": "3150960"
  },
  {
    "text": "between an availability zone so when we talked about um a couple of the services that can be used in a high highly",
    "start": "3150960",
    "end": "3157280"
  },
  {
    "text": "available architecture it can be built highly available and full full tolerant um with EBS you'd want it you know an",
    "start": "3157280",
    "end": "3163400"
  },
  {
    "text": "EBS volume is replicated within that a so there are as a backup volume for it but it's it's within a single",
    "start": "3163400",
    "end": "3169319"
  },
  {
    "text": "availability Zone it's not um across availability zones it is a it is storage in a particular um availability zone or",
    "start": "3169319",
    "end": "3176880"
  },
  {
    "text": "data center um so it is a little bit different",
    "start": "3176880",
    "end": "3183319"
  },
  {
    "text": "okay um so next how can we take advantage of RDS",
    "start": "3184880",
    "end": "3190720"
  },
  {
    "text": "Master Slave using SQL Server um are there built are there any built-in AWS services so um we have a great um white",
    "start": "3190720",
    "end": "3198400"
  },
  {
    "text": "paper on how to do that on SQL Server I I recommend going to aws.amazon.com white papers and it'll talk through um",
    "start": "3198400",
    "end": "3206480"
  },
  {
    "text": "running ec2 or running SQL server on ec2 and actually using SQL Server always on availability groups um and deploying um",
    "start": "3206480",
    "end": "3214079"
  },
  {
    "text": "highly available SQL Server you know using ec2 um instead of",
    "start": "3214079",
    "end": "3220240"
  },
  {
    "text": "RDS um but with with a SQL server on RDS you do have the ability to do point in time restore so you know between snap",
    "start": "3220240",
    "end": "3227040"
  },
  {
    "text": "snapshotting and point in time restore you do have some um you know some things that make it a more available solution",
    "start": "3227040",
    "end": "3233079"
  },
  {
    "text": "but to really get to that um Master slate slave with um automatic failover um please take a look at that white",
    "start": "3233079",
    "end": "3238480"
  },
  {
    "text": "paper that I recommended over on aws.amazon.com papers all right let me look through the",
    "start": "3238480",
    "end": "3247319"
  },
  {
    "text": "questions um what are the actual health checks um yeah you can set them up as",
    "start": "3256280",
    "end": "3261400"
  },
  {
    "text": "pings you can set them up as you know HTTP gets uh and then a specific page so",
    "start": "3261400",
    "end": "3267160"
  },
  {
    "text": "um like I said earlier it is good to customize these um it is good to define a file and you know use an HTP get and",
    "start": "3267160",
    "end": "3273960"
  },
  {
    "text": "then um have that file do a deep health inspection of your application making sure it can hit all the individual components that are required um or or",
    "start": "3273960",
    "end": "3281240"
  },
  {
    "text": "you might fail it you know fail that particular server off if it can't connect to the database um and again you",
    "start": "3281240",
    "end": "3286400"
  },
  {
    "text": "know we showed the S3 backup you know with the the um um Route 53 failover um",
    "start": "3286400",
    "end": "3292720"
  },
  {
    "text": "pushing everything over to S3 while the app stack is down um but you know again you know use use",
    "start": "3292720",
    "end": "3298760"
  },
  {
    "text": "back offs you know try to hit your RDS database um you know keep on backing off and and eventually if you back off um",
    "start": "3298760",
    "end": "3305319"
  },
  {
    "text": "you'll you'll you'll hit the the slave database so is the elv service considered highly available yes um it is",
    "start": "3305319",
    "end": "3312640"
  },
  {
    "text": "it it it's self-healing on its own and it it does scale out as your traffic",
    "start": "3312640",
    "end": "3318559"
  },
  {
    "text": "scales um can you have a load balancer with just one server in the beginning or you need two servers in order to configure the load balancer no you can",
    "start": "3321480",
    "end": "3327680"
  },
  {
    "text": "you can have a load balancer in front of one server um you know and if you don't want to if you want to deploy your app with one server to start and um but you",
    "start": "3327680",
    "end": "3334440"
  },
  {
    "text": "know you're going to scale it out very shortly thereafter um yeah it might it might make sense to actually serve the traffic through a load balancer to start",
    "start": "3334440",
    "end": "3341160"
  },
  {
    "text": "you could also update your DNS later to point to the load balancer and then to the instance um so you could have your",
    "start": "3341160",
    "end": "3347000"
  },
  {
    "text": "your your your DNS pointing to an IP address for a single server and then you could um um deploy the elb in front of",
    "start": "3347000",
    "end": "3354640"
  },
  {
    "text": "your um ec2 instance and have it connect to your ec2 instance and then you'd um update your DNS to point to the load",
    "start": "3354640",
    "end": "3360960"
  },
  {
    "text": "balancer versus the a record to the IP address and then um you know your your",
    "start": "3360960",
    "end": "3366119"
  },
  {
    "text": "ec2 instance is still serving traffic that's cached to the IP address but as as everybody starts raching the new DNS",
    "start": "3366119",
    "end": "3372480"
  },
  {
    "text": "records your traffic will now point to the E and come in VIA that mechanism",
    "start": "3372480",
    "end": "3379680"
  },
  {
    "text": "um can you create reliable snapshots while an ec2 Drive is being used um",
    "start": "3379920",
    "end": "3384960"
  },
  {
    "text": "there are processes and best practices out there um we have um you know articles on how to do that if you look",
    "start": "3384960",
    "end": "3390760"
  },
  {
    "text": "in the forums there are good procedures on how to do that via the different mechanisms you know on Windows or on uh",
    "start": "3390760",
    "end": "3396960"
  },
  {
    "text": "Linux so I'd recommend reading out there um okay so we're at the end of the hour",
    "start": "3396960",
    "end": "3402280"
  },
  {
    "text": "it's 10:00 so um I wanted to thank",
    "start": "3402280",
    "end": "3407240"
  }
]