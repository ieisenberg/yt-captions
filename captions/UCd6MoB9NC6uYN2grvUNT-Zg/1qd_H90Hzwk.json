[
  {
    "start": "0",
    "end": "146000"
  },
  {
    "text": "all right welcome everyone we're going to get started uh we have a lot of content to cover today my name is Danielle grock I'm a manager of",
    "start": "799",
    "end": "6560"
  },
  {
    "text": "solutions architect architecture with AWS and I'm joined here with our customer and partner OCTA and we're",
    "start": "6560",
    "end": "12840"
  },
  {
    "text": "going to talk about development workflows with Docker and ECS so what you can expect from today",
    "start": "12840",
    "end": "20080"
  },
  {
    "text": "first we're going to just review the cicd pipeline and some terminology there we'll talk about how you would use",
    "start": "20080",
    "end": "26880"
  },
  {
    "text": "containers with cicd and then we'll have OCTA engineering talk about how they actually",
    "start": "26880",
    "end": "32238"
  },
  {
    "text": "work every day in ship code and how they do CI with Docker and",
    "start": "32239",
    "end": "37800"
  },
  {
    "text": "ECS so just to get our terminology down so as we know we all want to be doing continuous integration and deployment it",
    "start": "37800",
    "end": "44360"
  },
  {
    "text": "was a big aspect of this burner's uh keynote this morning and of course when you're doing continuous integration when",
    "start": "44360",
    "end": "50520"
  },
  {
    "text": "you check your code in you're going and you're building that code right away if you're doing continuous delivery once",
    "start": "50520",
    "end": "56480"
  },
  {
    "text": "you've done that build you're taking that artifact that gets produced after some testing and you're actually placing",
    "start": "56480",
    "end": "64158"
  },
  {
    "text": "it in some test environment um to be work to be reviewed and whatnot and if",
    "start": "64159",
    "end": "69439"
  },
  {
    "text": "you're actually doing continuous deployment you're actually deploying directly to production continuously and",
    "start": "69439",
    "end": "75759"
  },
  {
    "text": "this is really Nirvana and what we all want to get to and it really makes developers happy and if you're going to",
    "start": "75759",
    "end": "81400"
  },
  {
    "text": "be doing that you also want to have a continuous feedback loop with your monitoring system so that you know and",
    "start": "81400",
    "end": "88280"
  },
  {
    "text": "can understand changes in your environment um just to level set here the difference between a virtual machine",
    "start": "88280",
    "end": "94759"
  },
  {
    "text": "and a container you can think of a container as a lightweight virtual machine that runs on the operating",
    "start": "94759",
    "end": "100079"
  },
  {
    "text": "system um and dacka really enables us to have these containers run um and really",
    "start": "100079",
    "end": "106680"
  },
  {
    "text": "eliminate dependencies and so they can run very nicely um fast and why do we",
    "start": "106680",
    "end": "113000"
  },
  {
    "text": "want to use containers for continuous delivery they really allow us to roll",
    "start": "113000",
    "end": "118840"
  },
  {
    "text": "out features as quick as possible and they allow us to have this reproducible and predictable environment um they can",
    "start": "118840",
    "end": "126200"
  },
  {
    "text": "run on any machine and they are immutable and so they give us this fast",
    "start": "126200",
    "end": "131360"
  },
  {
    "text": "feedback um for our deployments so let's just review the uh",
    "start": "131360",
    "end": "138200"
  },
  {
    "text": "the application life cycle um doing software development so first of course we start with our source code and and",
    "start": "138200",
    "end": "144599"
  },
  {
    "text": "running our s working on our source code and if you're going to do source code with container if you're going change",
    "start": "144599",
    "end": "150560"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "write code with containers first and foremost you're going to be using Docker in the docker toolbox um and you'll defi",
    "start": "150560",
    "end": "157319"
  },
  {
    "text": "Define your application environment with a Docker file here's an example of what",
    "start": "157319",
    "end": "163000"
  },
  {
    "text": "a Docker file might look like this one in particular is a ruby application um",
    "start": "163000",
    "end": "168239"
  },
  {
    "text": "and you can see some of the attributes inside of this if you're going to be running multicontainer applications you're going",
    "start": "168239",
    "end": "175080"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "to use Docker compose um it again you continue to Define your application with",
    "start": "175080",
    "end": "180400"
  },
  {
    "text": "your environment with your Docker file and then you define the services that make up your application in a Docker",
    "start": "180400",
    "end": "187599"
  },
  {
    "text": "compose yaml file and then if you want to start that you just run Docker compose up to start and run that",
    "start": "187599",
    "end": "193840"
  },
  {
    "text": "application now to build your container obviously you can use",
    "start": "193840",
    "end": "199040"
  },
  {
    "text": "something like Jenkins um and in this case we have an ECS plugin for Jenkins",
    "start": "199040",
    "end": "204120"
  },
  {
    "text": "um and you can see in this console um where here I am basically allocating a certain amount of CPU and memory",
    "start": "204120",
    "end": "210360"
  },
  {
    "text": "to my container and then I can produce an build artifact uh again with this",
    "start": "210360",
    "end": "217920"
  },
  {
    "text": "plug-in and post push my image to my ec2",
    "start": "217920",
    "end": "223000"
  },
  {
    "text": "container registry and that's exactly what this can do right",
    "start": "223000",
    "end": "228879"
  },
  {
    "text": "here and the ec2 container registry has a a lot of benefits uh you can set up",
    "start": "228879",
    "end": "234360"
  },
  {
    "start": "229000",
    "end": "229000"
  },
  {
    "text": "security with IM am and it integrates with cloud trail so you can see any actions on your registry and you can",
    "start": "234360",
    "end": "241519"
  },
  {
    "text": "very easily manage and deploy your images um it has very tight integration with ECS so you can deploy your your",
    "start": "241519",
    "end": "249360"
  },
  {
    "text": "images directly from ECR to ECS and it has integration with the docker tool set and most importantly",
    "start": "249360",
    "end": "256280"
  },
  {
    "text": "it's backed by S3 so it's highly available reliable and",
    "start": "256280",
    "end": "261919"
  },
  {
    "text": "durable so the last uh the the next stage in our uh development process is",
    "start": "261919",
    "end": "267880"
  },
  {
    "text": "running tests so tests inside of a container uh you can just do the same",
    "start": "267880",
    "end": "273000"
  },
  {
    "text": "Docker commands that you're used to doing um to execute those tests here's an example a Docker run uh executing a",
    "start": "273000",
    "end": "281160"
  },
  {
    "text": "rake test and you can actually also run tests against your container so you would",
    "start": "281160",
    "end": "287600"
  },
  {
    "text": "start your container running in detached mode and you'd have certain exposed ports for your application and then you",
    "start": "287600",
    "end": "294199"
  },
  {
    "text": "can run a browser test or other kinds of blackb black blackbox test against those",
    "start": "294199",
    "end": "301440"
  },
  {
    "text": "containers so finally we're going to go and deploy with containers so first and formost you can",
    "start": "301440",
    "end": "307960"
  },
  {
    "start": "306000",
    "end": "306000"
  },
  {
    "text": "do that using our ec2 container service which is a highly scalable container",
    "start": "307960",
    "end": "313280"
  },
  {
    "text": "Management Service and it's very easy to manage clusters at scale with ECS it",
    "start": "313280",
    "end": "319639"
  },
  {
    "text": "allows for some flexible container placement and we kind of talked about some new features added to that this",
    "start": "319639",
    "end": "325120"
  },
  {
    "text": "morning and it's integrated with other AWS services and then the API layer is",
    "start": "325120",
    "end": "331520"
  },
  {
    "text": "available for you to make it extensible and some of the ECS concepts",
    "start": "331520",
    "end": "337240"
  },
  {
    "text": "of course you're going to have a cluster that you'll work with and then you'll have ec2 instances that make up that",
    "start": "337240",
    "end": "342600"
  },
  {
    "text": "cluster that those are instances that you still own and you can SSH into if you need to and then of course uh ECS",
    "start": "342600",
    "end": "350600"
  },
  {
    "text": "works with tasks and task definitions um much like you're probably used to with other container Management",
    "start": "350600",
    "end": "358000"
  },
  {
    "start": "358000",
    "end": "358000"
  },
  {
    "text": "Systems you can also also use elastic beant stock to uh deploy your containers",
    "start": "358000",
    "end": "364039"
  },
  {
    "text": "um and this really gives you the benefit of not having to worry about um setting up a three-tier application it's kind of",
    "start": "364039",
    "end": "370120"
  },
  {
    "text": "managed for you um you can have a three-tier application with an elb your",
    "start": "370120",
    "end": "375639"
  },
  {
    "text": "ECS cluster to manage your containers and then that back-end database and monitoring and logging is already",
    "start": "375639",
    "end": "382599"
  },
  {
    "text": "configured for you and of course Docker support for elastic beant stock is a",
    "start": "382599",
    "end": "388319"
  },
  {
    "text": "single container or multicontainer next we have the Amazon ECS CLI this is",
    "start": "388319",
    "end": "397080"
  },
  {
    "text": "actually open source and available on GitHub if you'd like to uh view that and",
    "start": "397080",
    "end": "402599"
  },
  {
    "text": "you can easily create ECS clusters and some supporting resources uh such as ec2",
    "start": "402599",
    "end": "408120"
  },
  {
    "text": "instances to set up your cluster and you can run Docker composed configuration files using the ECS",
    "start": "408120",
    "end": "416440"
  },
  {
    "text": "CLI so just to give you an overview of some continuous delivery workflows before we go and talk about how OCTA",
    "start": "416759",
    "end": "423039"
  },
  {
    "text": "actually does continuous delivery one example is to do continuous delivery to",
    "start": "423039",
    "end": "428560"
  },
  {
    "start": "425000",
    "end": "425000"
  },
  {
    "text": "ECS with Jenkins um in this case right here you can see we have a few steps where first a code push will go and",
    "start": "428560",
    "end": "435479"
  },
  {
    "text": "trigger a build and then Jenkins will go and build that image from source and it",
    "start": "435479",
    "end": "442000"
  },
  {
    "text": "will run um some automated tests as well and then Jenkins goes and pushes uh the",
    "start": "442000",
    "end": "447360"
  },
  {
    "text": "image to the docker registry or you can push also to ECR and then the service basically gets",
    "start": "447360",
    "end": "455319"
  },
  {
    "text": "updated uh through that and and the new image is pulled from the registry and",
    "start": "455319",
    "end": "460759"
  },
  {
    "text": "really the benefit of this is that developers all they have to do is merge into master and then they're done these",
    "start": "460759",
    "end": "467280"
  },
  {
    "text": "the Jenkins build steps can be triggered via web hooks through monitoring or Lambda and you can build your Docker",
    "start": "467280",
    "end": "474319"
  },
  {
    "text": "image via build and publish plug-in",
    "start": "474319",
    "end": "480639"
  },
  {
    "text": "you can also do continuous delivery with ECS using Code Pipeline and so uh in this example here uh what we're doing is",
    "start": "480639",
    "end": "488440"
  },
  {
    "text": "we're using a code push to trigger a Lambda function and this goes and creates a build instance for us and what",
    "start": "488440",
    "end": "496319"
  },
  {
    "text": "this does is then goes and builds our Docker image and pushes it into ECR and",
    "start": "496319",
    "end": "501720"
  },
  {
    "text": "then after that image is built uh it the another Lambda function gets kicked off",
    "start": "501720",
    "end": "507159"
  },
  {
    "text": "to terminate that ec2 instance uh so this is used uh this is done using",
    "start": "507159",
    "end": "513800"
  },
  {
    "text": "Uh custom actions and then another Lambda function simply goes and triggers the uh update to the ECS service to",
    "start": "513800",
    "end": "521880"
  },
  {
    "text": "deploy that new image and this is something where uh it",
    "start": "521880",
    "end": "528000"
  },
  {
    "text": "makes it it is a little bit more complex but it how using those custom actions allows you the flexibility uh to do",
    "start": "528000",
    "end": "534399"
  },
  {
    "text": "whatever whatever steps in your pipeline that you need to do",
    "start": "534399",
    "end": "539720"
  },
  {
    "text": "finally if you're already using uh a third party party platform uh for CI and",
    "start": "539720",
    "end": "544760"
  },
  {
    "text": "CD you can integrate uh with some of our existing uh tool sets such as ECS and",
    "start": "544760",
    "end": "550240"
  },
  {
    "text": "ECR so in this particular example uh this is a diagram where we have uh",
    "start": "550240",
    "end": "555760"
  },
  {
    "text": "someone checking into GitHub and essentially a web hook goes and triggers a build with uh one of our third-party",
    "start": "555760",
    "end": "563240"
  },
  {
    "text": "Partners shippable um and in this case that goes and triggers that build and",
    "start": "563240",
    "end": "568440"
  },
  {
    "text": "then the pushes an image into the ec2 Container registry and then finally um a",
    "start": "568440",
    "end": "574360"
  },
  {
    "text": "notification triggers a deployment uh with shippable formations to go and deploy those new containers on ECS so",
    "start": "574360",
    "end": "582519"
  },
  {
    "text": "the these are some examples of some uh continuous delivery workflows but",
    "start": "582519",
    "end": "587680"
  },
  {
    "text": "actually we're going to have John Todd Chief Architect of OCTA talk about how they do deployment with",
    "start": "587680",
    "end": "595200"
  },
  {
    "text": "ECS awesome thanks Danielle",
    "start": "595200",
    "end": "601120"
  },
  {
    "text": "hi everyone my name is John and I lead the architecture team at OCTA and I'm really excited to be here with Tim head",
    "start": "602720",
    "end": "608920"
  },
  {
    "text": "of our uh developer experience and um productivity team to talk to you guys about how we're using ECS and Docker so",
    "start": "608920",
    "end": "616680"
  },
  {
    "text": "just to give you a little bit of context about what we do at OCTA I thought I'd give you um a brief overview OCTA is",
    "start": "616680",
    "end": "623399"
  },
  {
    "text": "used by millions of people every day to access their applications any",
    "start": "623399",
    "end": "628600"
  },
  {
    "text": "application from any device and so of course we do provide single sign on um we have a",
    "start": "628600",
    "end": "635200"
  },
  {
    "text": "great experience whether you're on a mobile app or in browser um where you can go to a single place and get access",
    "start": "635200",
    "end": "641920"
  },
  {
    "text": "to all the different things you need to be productive with your day but in addition to that we've built a whole",
    "start": "641920",
    "end": "647519"
  },
  {
    "text": "bunch of more functionality on top of that user management um analytics and",
    "start": "647519",
    "end": "653480"
  },
  {
    "text": "compliance directory integration multiactor authentication and mobile device management",
    "start": "653480",
    "end": "659839"
  },
  {
    "text": "and over the last few years we've taken this API first approach to building our product and we've slowly been enabling",
    "start": "659839",
    "end": "667279"
  },
  {
    "text": "more of this functionality that we originally offered to thousands of Enterprise companies and we're now",
    "start": "667279",
    "end": "672880"
  },
  {
    "text": "excited to be offering it to developers so I'm going to really just",
    "start": "672880",
    "end": "678160"
  },
  {
    "start": "676000",
    "end": "676000"
  },
  {
    "text": "barely scratch the surface on what we're able to do here but we'll boil it down into three things OCTA is able to",
    "start": "678160",
    "end": "685000"
  },
  {
    "text": "connect to any data source you could use the OCTA directory um which has thousands of applications",
    "start": "685000",
    "end": "692000"
  },
  {
    "text": "that it's connected to including AWS as your user store or you could connect to",
    "start": "692000",
    "end": "697160"
  },
  {
    "text": "a Federated identity provider your own database perhaps running on Prem behind a firewall active directory or ldap or a",
    "start": "697160",
    "end": "706560"
  },
  {
    "text": "social identity provider next we offer a customizable",
    "start": "706560",
    "end": "712600"
  },
  {
    "text": "login and MFA experience and there's a couple different ways you can go with this you can either directly access our",
    "start": "712600",
    "end": "718519"
  },
  {
    "text": "API or you can use our login widget which gives you the entire flow of both um",
    "start": "718519",
    "end": "724720"
  },
  {
    "text": "logging into OCTA as well as account recovery and a full Suite of MFA offerings including our push verify and",
    "start": "724720",
    "end": "732680"
  },
  {
    "text": "many of the other leading um MFA providers with the click of a button lastly we support all different",
    "start": "732680",
    "end": "740240"
  },
  {
    "text": "types of applications with all the modern identity standards so whether you're trying to create a portal where",
    "start": "740240",
    "end": "746320"
  },
  {
    "text": "you maybe want to allow people to samle into bu different applications or you're trying to create that",
    "start": "746320",
    "end": "752000"
  },
  {
    "text": "accounts.google.com like experience across many different microservice in your architecture using ooth and JWT",
    "start": "752000",
    "end": "760839"
  },
  {
    "text": "tokens with different claims for each application OCT can help you build",
    "start": "760839",
    "end": "766079"
  },
  {
    "text": "that identity is a very complex problem and we've been working on it for seven years we have thousands of Enterprise",
    "start": "766079",
    "end": "772480"
  },
  {
    "text": "customers hundreds of of developer customers using our product please check",
    "start": "772480",
    "end": "777800"
  },
  {
    "text": "us out at developer. do.com we'd love to help you with your identity needs and so",
    "start": "777800",
    "end": "782959"
  },
  {
    "text": "now let's move on to ECS and Docker and why did we choose those two technologies at",
    "start": "782959",
    "end": "789360"
  },
  {
    "start": "789000",
    "end": "789000"
  },
  {
    "text": "OCTA if you look at it it really does boil down to the devops problem and",
    "start": "789360",
    "end": "794480"
  },
  {
    "text": "regardless of how you organize your your your company whether you have a Dev organization and separate Ops or you",
    "start": "794480",
    "end": "800839"
  },
  {
    "text": "call them Dev Ops or you actually have each development organization own their infrastructure and production you still",
    "start": "800839",
    "end": "807519"
  },
  {
    "text": "have these two different conflicting needs on the one hand you're trying to enable agility and change and on the",
    "start": "807519",
    "end": "814320"
  },
  {
    "text": "other hand you're trying to create stability and one of the problems that",
    "start": "814320",
    "end": "820320"
  },
  {
    "text": "we see is that you have this artifact that you need to to eventually ship and",
    "start": "820320",
    "end": "826160"
  },
  {
    "text": "parts of the runtime environment aren't encapsulated that in that artifact so you know in the Java world we saw first",
    "start": "826160",
    "end": "833199"
  },
  {
    "text": "maybe you were shipping some jars and the dependencies were already on the host that it needed to run on then Wars",
    "start": "833199",
    "end": "838800"
  },
  {
    "text": "came out and that wrapped everything up together and fat jars and like spring Boot and drop wizard brought that all",
    "start": "838800",
    "end": "844800"
  },
  {
    "text": "into so that the container was actually inside that environment but we've we've been waiting for a better solution for",
    "start": "844800",
    "end": "850480"
  },
  {
    "text": "this where literally the entire runtime environment could be wrapped up by development tested and have that same",
    "start": "850480",
    "end": "857480"
  },
  {
    "text": "process that you're using development and in CI run in",
    "start": "857480",
    "end": "862759"
  },
  {
    "text": "production and so we knew that we wanted that artifact of De deployment to move",
    "start": "862759",
    "end": "868720"
  },
  {
    "text": "to being a container and that was going to be one of the building blocks of our solution for breaking down this devops",
    "start": "868720",
    "end": "875199"
  },
  {
    "text": "problem another part of that would be continuous integration and we already had a good story there and Tim's going",
    "start": "875199",
    "end": "880839"
  },
  {
    "text": "to tell you a little bit more about what we've done there and then the last thing we needed was something that was going",
    "start": "880839",
    "end": "886560"
  },
  {
    "text": "to help us Place those containers in production so if you think about it you",
    "start": "886560",
    "end": "891800"
  },
  {
    "text": "want to have an abstraction layer between the actual host that your containers are running in and the",
    "start": "891800",
    "end": "898160"
  },
  {
    "text": "definition of those containers themselves so that developers can just say I want so so many of this particular",
    "start": "898160",
    "end": "904680"
  },
  {
    "text": "instance running in production please scale up if CPU goes to a certain level and they don't really care about the",
    "start": "904680",
    "end": "911199"
  },
  {
    "text": "specific host that that it's running on separately Ops wants to be able to go",
    "start": "911199",
    "end": "916519"
  },
  {
    "text": "and up upgrade the kernel or other changes to the underlying host without having to go and coordinate with each",
    "start": "916519",
    "end": "922279"
  },
  {
    "text": "one of the different development teams to redeploy their software that was our goal that was the problem we were trying",
    "start": "922279",
    "end": "927600"
  },
  {
    "text": "to solve we looked at a number of different options from a container perspective we",
    "start": "927600",
    "end": "933480"
  },
  {
    "text": "we chose Docker because we've been using it for a while it had the the most Community engagement but we do still",
    "start": "933480",
    "end": "939360"
  },
  {
    "text": "keep an eye on rocket in terms of cluster schedulers um we liked MOS for a",
    "start": "939360",
    "end": "945279"
  },
  {
    "text": "lot of the bi workloads that we were looking at and kubernetes had an incredible number of features but at the",
    "start": "945279",
    "end": "950600"
  },
  {
    "text": "end of the day if we looked at the minimum viable product that we were trying to ship ECS was able to meet it",
    "start": "950600",
    "end": "956560"
  },
  {
    "text": "we were trying to just deliver stateless servers in production and we've had a",
    "start": "956560",
    "end": "961920"
  },
  {
    "text": "great relationship with Amazon where they're continuing continuing to innovate their product as we start to",
    "start": "961920",
    "end": "967639"
  },
  {
    "text": "use it so we made the bet on ECS at first knowing that it was the easiest thing to get going and so far it's been",
    "start": "967639",
    "end": "974120"
  },
  {
    "text": "really great I'm now going to hand it over to Tim to tell you a little bit about how we're using it with our CI",
    "start": "974120",
    "end": "980680"
  },
  {
    "text": "pipeline thank you thanks John hi everybody my name is Tim I'm on the engineering productivity team at OCTA",
    "start": "980680",
    "end": "988079"
  },
  {
    "text": "and I'm going to tell you a little bit about how we use CI for our infrastructure on E ECS we use Almost",
    "start": "988079",
    "end": "994079"
  },
  {
    "text": "100% Amazon services for what we do and first of all let's talk a little bit about what OCTA engineering does uh we",
    "start": "994079",
    "end": "1001440"
  },
  {
    "text": "have 200 Engineers which are split into many teams all of them have embedded Specialists so we have UI Engineers test",
    "start": "1001440",
    "end": "1008279"
  },
  {
    "text": "Engineers bunch of different kinds of Engineers on each team uh we have one week Sprints and we deploy a production",
    "start": "1008279",
    "end": "1015519"
  },
  {
    "text": "with our core product every week uh sometimes we do do deployments more often than that if there are hot fixes",
    "start": "1015519",
    "end": "1021680"
  },
  {
    "text": "Etc um we have the capability to deploy multiple times a day we try not to do",
    "start": "1021680",
    "end": "1026760"
  },
  {
    "text": "that uh and every merge to master is a potential release candidate we basically",
    "start": "1026760",
    "end": "1032280"
  },
  {
    "text": "need to be ready to do a hot fix or to do a deployment uh whenever we freeze the code whenever we decide that it's",
    "start": "1032280",
    "end": "1038880"
  },
  {
    "text": "time to cut off uh developer work for the week so in order to be able to do this",
    "start": "1038880",
    "end": "1044678"
  },
  {
    "text": "what we have to do is every topic branch has to go through the same amount of rigorous testing as a release candidate",
    "start": "1044679",
    "end": "1051520"
  },
  {
    "text": "as a master branch and in order to do that we have to enforce that all the",
    "start": "1051520",
    "end": "1057640"
  },
  {
    "text": "tests are run before you can merge to the master Branch to the main line and the way we do this is with our ecci",
    "start": "1057640",
    "end": "1065600"
  },
  {
    "text": "system our largest repo runs 33,000 tests and currently takes about 60",
    "start": "1065600",
    "end": "1071160"
  },
  {
    "text": "Minutes to to uh complete the longest suite and you can see there are 22 parallel runs right now uh some of our",
    "start": "1071160",
    "end": "1077480"
  },
  {
    "text": "current work we're hoping to to roll out in the next month should split that up into end parallel runs so that we can",
    "start": "1077480",
    "end": "1082520"
  },
  {
    "text": "basically drive down that 60 Minutes as low as possible uh the smallest repo is you know maybe 100 tests and it takes a",
    "start": "1082520",
    "end": "1088960"
  },
  {
    "text": "few minutes to run uh the developer productivity team that I'm a member of we're responsible for making all this",
    "start": "1088960",
    "end": "1094760"
  },
  {
    "text": "work for the engineering team so that they can move as quickly as possible so the first thing that we're we're trying",
    "start": "1094760",
    "end": "1101159"
  },
  {
    "start": "1099000",
    "end": "1099000"
  },
  {
    "text": "to get for our developers is a good experience they want to have a quick",
    "start": "1101159",
    "end": "1106600"
  },
  {
    "text": "turnaround time they want to have reliable results they want to know that when they push their commits their topic",
    "start": "1106600",
    "end": "1112600"
  },
  {
    "text": "Branch they get back results they know if they broke something in an area of code that they maybe haven't uh touched",
    "start": "1112600",
    "end": "1119880"
  },
  {
    "text": "or they don't know about um Quality we need all the tests to run every time we",
    "start": "1119880",
    "end": "1126840"
  },
  {
    "text": "need our QA Department to know that we're running all the tests um and cost",
    "start": "1126840",
    "end": "1134240"
  },
  {
    "text": "we need to run the infrastructure as cheaply as possible for obvious reasons uh you can't scale if your scaling comes",
    "start": "1134240",
    "end": "1141280"
  },
  {
    "text": "along with a lot of money being spent so we need to get the price down now so",
    "start": "1141280",
    "end": "1146600"
  },
  {
    "text": "that as we grow the the cost doesn't go out of hand and we try to use cloud",
    "start": "1146600",
    "end": "1153120"
  },
  {
    "text": "first uh this enables us to to leave the background the the the work on the",
    "start": "1153120",
    "end": "1159240"
  },
  {
    "text": "servers to The Experts and we get to focus on increasing the velocity of our",
    "start": "1159240",
    "end": "1164559"
  },
  {
    "text": "developers so the problems that we're that we need to solve within within our engineering department",
    "start": "1164559",
    "end": "1170640"
  },
  {
    "text": "within our CI infrastructure are are these so our CI",
    "start": "1170640",
    "end": "1176400"
  },
  {
    "start": "1173000",
    "end": "1173000"
  },
  {
    "text": "was using open-source monolithic applications you can see on this diagram all of the boxes in red those are all",
    "start": "1176400",
    "end": "1183240"
  },
  {
    "text": "individual machines we have to manage we have to deploy we have to do security patches we have to make sure the discs",
    "start": "1183240",
    "end": "1189039"
  },
  {
    "text": "are clean uh we have to do OS upgrades we have to do all kinds of different things on every one of those boxes",
    "start": "1189039",
    "end": "1194600"
  },
  {
    "text": "that's where we were a year ago so a couple of these our git poar our",
    "start": "1194600",
    "end": "1201880"
  },
  {
    "text": "queing system those those have obvious Replacements in Amazon and those have been switched out for aw uh AWS sqs and",
    "start": "1201880",
    "end": "1209480"
  },
  {
    "text": "that was a pretty easy replacement some of the other ones like uh our GLaDOS uh",
    "start": "1209480",
    "end": "1215919"
  },
  {
    "text": "program that actually talked to all the different services and it tried to figure out exactly how many slaves we",
    "start": "1215919",
    "end": "1222840"
  },
  {
    "text": "should run what type of slav should run the environments those slaves had to have and",
    "start": "1222840",
    "end": "1229000"
  },
  {
    "text": "it it was very brittle and so this has been replaced by several Lambda functions and I'll go",
    "start": "1229000",
    "end": "1235440"
  },
  {
    "text": "into detail on those in a little bit so these two are Java applications that",
    "start": "1235440",
    "end": "1240720"
  },
  {
    "text": "we've written there are test reporting applications and a little bit of analytics and those are actually running",
    "start": "1240720",
    "end": "1246600"
  },
  {
    "text": "on ECS in our uh for testing right now and we're rolling that out very",
    "start": "1246600",
    "end": "1251960"
  },
  {
    "text": "soon so the main focus for ECS conversion was our slave pool this this",
    "start": "1251960",
    "end": "1258200"
  },
  {
    "text": "is where we save the most money this is where we run the most machines and this is where we can save the most",
    "start": "1258200",
    "end": "1264200"
  },
  {
    "text": "time so our vision for a new CI system",
    "start": "1264200",
    "end": "1269400"
  },
  {
    "text": "last year was the following we wanted to have clean testing",
    "start": "1269400",
    "end": "1275600"
  },
  {
    "text": "environments you need to isolate your test environments from others parallel runs if you're running multiple tests on",
    "start": "1275600",
    "end": "1281520"
  },
  {
    "text": "one box as well as serial runs if you've run other tests beforehand if you give",
    "start": "1281520",
    "end": "1286559"
  },
  {
    "text": "your developers the amount of itude that we do you will find that they they can",
    "start": "1286559",
    "end": "1291919"
  },
  {
    "text": "change almost anything on the host without realizing it and it's almost impossible at times to get it back to a clean State uh Dynamic worker",
    "start": "1291919",
    "end": "1300240"
  },
  {
    "text": "scaling workers should not be dependent on their build server um they need it",
    "start": "1300240",
    "end": "1306320"
  },
  {
    "text": "needs to scale very quickly you can't wait for 30 minutes for a very complex server to come up and be prepared to run",
    "start": "1306320",
    "end": "1313240"
  },
  {
    "text": "tests um the the number of workers shouldn't impact your main reporting server",
    "start": "1313240",
    "end": "1318880"
  },
  {
    "text": "the the reporting server should be able to scale and not not be affected by the number of",
    "start": "1318880",
    "end": "1324880"
  },
  {
    "text": "workers uh we wanted to move to spot instances for for cost savings anyone",
    "start": "1324880",
    "end": "1330039"
  },
  {
    "text": "who's looked at spot instances knows that you can save many fold on the on the uh per hour costs by using",
    "start": "1330039",
    "end": "1338840"
  },
  {
    "text": "them another thing we wanted to do was versioned testing we wanted our CI system to actually be versioned so that",
    "start": "1340440",
    "end": "1348240"
  },
  {
    "text": "we can change the underlying infrastructure and have that be tied to a release that goes out and be able to",
    "start": "1348240",
    "end": "1356000"
  },
  {
    "text": "run different infrastructure at different times on the same machines without having to worry about setting up",
    "start": "1356000",
    "end": "1362080"
  },
  {
    "text": "a whole new system and then migrating all the changes from that system to the old system or rolling everything over to",
    "start": "1362080",
    "end": "1368279"
  },
  {
    "text": "the new system and we wanted an improved queuing system we wanted one Q centralized not",
    "start": "1368279",
    "end": "1375960"
  },
  {
    "text": "tied to workers just just an empty bucket to put things in and then have",
    "start": "1375960",
    "end": "1381000"
  },
  {
    "text": "all of our workers pull from that that bucket as they could without having it be tied to a specific build server uh we",
    "start": "1381000",
    "end": "1387960"
  },
  {
    "text": "wanted less infrastructure flakiness we wanted to push the development of the",
    "start": "1387960",
    "end": "1393720"
  },
  {
    "text": "environment that tests run in and that software is built in we wanted to push that out to the developers who are",
    "start": "1393720",
    "end": "1400039"
  },
  {
    "text": "actually writing the software so they can develop containers they can develop Docker images Docker files we can push",
    "start": "1400039",
    "end": "1407480"
  },
  {
    "text": "those out into our system and run it without having to spend a lot of time converting and building all these",
    "start": "1407480",
    "end": "1413520"
  },
  {
    "text": "different systems for them so we can focus more on the infrastructure that runs those Docker containers rather than",
    "start": "1413520",
    "end": "1419440"
  },
  {
    "text": "focusing on setting up all the the differences between them and we wanted good privileges for",
    "start": "1419440",
    "end": "1428120"
  },
  {
    "text": "uh so that we could we could have security we could have basically all the teams in our engineering department",
    "start": "1428120",
    "end": "1433799"
  },
  {
    "text": "using the same CI infrastructure and not worry about uh letting security",
    "start": "1433799",
    "end": "1439120"
  },
  {
    "text": "credentials slip from an Ops build to an engineering build for",
    "start": "1439120",
    "end": "1444240"
  },
  {
    "text": "instance so the solutions that we came up with were to you to write a custom",
    "start": "1444240",
    "end": "1449960"
  },
  {
    "text": "reporting app and this is what it looks like and this is our main product and you can see the 22 Suites that run at",
    "start": "1449960",
    "end": "1456640"
  },
  {
    "start": "1451000",
    "end": "1451000"
  },
  {
    "text": "the same time this has our custom uh policies and procedures built in you can",
    "start": "1456640",
    "end": "1462559"
  },
  {
    "text": "do promotions you can do uh builds deployments things like that from in here and then to use ECS and",
    "start": "1462559",
    "end": "1471600"
  },
  {
    "start": "1468000",
    "end": "1468000"
  },
  {
    "text": "Docker so by using ECS and Docker we got immutable and disposable build workers",
    "start": "1473320",
    "end": "1480679"
  },
  {
    "text": "we run them we launch them in a matter of seconds and then we destroy them when we're done we get almost zero cost on",
    "start": "1480679",
    "end": "1488000"
  },
  {
    "text": "weekends I'll show you a graph later we can scale all the way up to as many as",
    "start": "1488000",
    "end": "1493120"
  },
  {
    "text": "we need several hundred and then drop it down to to running nothing on the weekends or or even nothing at lunchtime",
    "start": "1493120",
    "end": "1499279"
  },
  {
    "text": "or nothing at the end of the day sorry um it allows us to maximize",
    "start": "1499279",
    "end": "1506279"
  },
  {
    "text": "the usage of our ec2 instances with our old system we had to run many different",
    "start": "1506279",
    "end": "1511559"
  },
  {
    "text": "types of instances and each type of instance had to have a specific setup so you couldn't actually use one machine",
    "start": "1511559",
    "end": "1518559"
  },
  {
    "text": "for different kinds of tests and with using ECS the only limitations on type",
    "start": "1518559",
    "end": "1524960"
  },
  {
    "text": "of machines that we run are basically uh sources so you can run more tests on a",
    "start": "1524960",
    "end": "1531600"
  },
  {
    "text": "bigger machine and the same Ami can run multiple Docker images and some",
    "start": "1531600",
    "end": "1538520"
  },
  {
    "text": "containers uh can be run for multiple",
    "start": "1538520",
    "end": "1544399"
  },
  {
    "text": "types sorry it's it reformatted um another thing that we get",
    "start": "1544399",
    "end": "1551480"
  },
  {
    "text": "from this is IAM separation so we can use the I am roles that Amazon provides",
    "start": "1551480",
    "end": "1557360"
  },
  {
    "text": "us with to separate the access for different machines based on the cluster that",
    "start": "1557360",
    "end": "1564240"
  },
  {
    "text": "they're running in and so we can run multiple clusters within our CI system uh or with the new functionality it's",
    "start": "1564240",
    "end": "1570159"
  },
  {
    "text": "several months old now but you can uh assign an IM am roll to a specific task",
    "start": "1570159",
    "end": "1575399"
  },
  {
    "text": "and so then specific tasks can run in the same exact cluster but have limited resources uh so that they can't actually",
    "start": "1575399",
    "end": "1581880"
  },
  {
    "text": "access credentials or other things that might be stored in S3 um another thing we had to do in order to to uh make this",
    "start": "1581880",
    "end": "1589039"
  },
  {
    "text": "work is we had to share the docker demon between the host and the containers and",
    "start": "1589039",
    "end": "1595640"
  },
  {
    "text": "this is so that we can actually build Docker images on Docker containers this",
    "start": "1595640",
    "end": "1601640"
  },
  {
    "text": "is very important and I can show you uh how we did that in the uh task definition later another thing that's",
    "start": "1601640",
    "end": "1608080"
  },
  {
    "text": "very important was prefetching large large bits of data so if you have a lot of third party libraries you have a lot",
    "start": "1608080",
    "end": "1613720"
  },
  {
    "text": "of code that you want to use you don't want to keep shoving it into an image and having this having the image bloat",
    "start": "1613720",
    "end": "1619240"
  },
  {
    "text": "so you have a 5 gigabyte image that you're moving around that every time you want to spin one of these up if you're spinning up hundreds or thousands of",
    "start": "1619240",
    "end": "1625320"
  },
  {
    "text": "them a day you don't want to be moving this thing around so what we do is we put things like that we stage them on",
    "start": "1625320",
    "end": "1630760"
  },
  {
    "text": "the hosts so that when the docker containers come up our system looks to see which ones are required for the job",
    "start": "1630760",
    "end": "1636760"
  },
  {
    "text": "that's running and it'll it'll drag them over into the Container so it's just a simple move instead of network uh",
    "start": "1636760",
    "end": "1644240"
  },
  {
    "text": "traffic we also can run multiple containers on one machine and so we can have uh third parties libraries third",
    "start": "1644240",
    "end": "1651720"
  },
  {
    "text": "party services like my SQL reddis things like that we can have those in standard",
    "start": "1651720",
    "end": "1657320"
  },
  {
    "text": "uh containers standard images that we can just spin up for different tests depending on what they",
    "start": "1657320",
    "end": "1663919"
  },
  {
    "text": "need uh when we want to update Docker it's very simple we update our Docker files the docker files go through the CI",
    "start": "1663919",
    "end": "1671360"
  },
  {
    "start": "1664000",
    "end": "1664000"
  },
  {
    "text": "system that that's actually using the docker images to run and it will create",
    "start": "1671360",
    "end": "1676960"
  },
  {
    "text": "new images is and then we can simply push those out by updating the task definition so the CI system builds",
    "start": "1676960",
    "end": "1683519"
  },
  {
    "text": "builds its own replacement uh in or in order to do this well there are several Docker",
    "start": "1683519",
    "end": "1689240"
  },
  {
    "start": "1686000",
    "end": "1686000"
  },
  {
    "text": "conventions that we that we came up with uh the docker files live with the project code so that it's versioned with",
    "start": "1689240",
    "end": "1695360"
  },
  {
    "text": "it so that the images always go along with the code that that built the image the docker we use Docker compose which",
    "start": "1695360",
    "end": "1703240"
  },
  {
    "text": "is very similar to a task definition in all of our projects so if we're developing a new project we'll write a",
    "start": "1703240",
    "end": "1710320"
  },
  {
    "text": "Docker compos file and if you run that Docker compos file it'll spin up a Docker container on your your laptop and",
    "start": "1710320",
    "end": "1718080"
  },
  {
    "text": "it can spin up multiple other ones that are required like the MySQL uh container that I mentioned in the previous slide",
    "start": "1718080",
    "end": "1724760"
  },
  {
    "text": "and you can have the entire environment up and ready to test against now we",
    "start": "1724760",
    "end": "1730600"
  },
  {
    "text": "convert that over into a task definition and then in our CI system we can spin up small constellations of containers",
    "start": "1730600",
    "end": "1738039"
  },
  {
    "text": "which give everything you need build the environment a complex environment for an integration test to",
    "start": "1738039",
    "end": "1744080"
  },
  {
    "text": "run uh all of our library and third party services are in a single repository and this makes one place that",
    "start": "1744080",
    "end": "1750760"
  },
  {
    "text": "we can all share it's all reviewed we we make sure that we don't pull base uh the",
    "start": "1750760",
    "end": "1757919"
  },
  {
    "text": "strict rules around from Clause we don't pull from outside sources for base stalker images we always build off of",
    "start": "1757919",
    "end": "1764039"
  },
  {
    "text": "internally trusted ones that we store in our own Repository uh be that ECR or we use artifactory for some of our project",
    "start": "1764039",
    "end": "1773279"
  },
  {
    "text": "builds and the build actually owns creating the images as mentioned earlier",
    "start": "1773279",
    "end": "1778679"
  },
  {
    "text": "we pushed out building the environments to the developers so that they can build their own environments and write the",
    "start": "1778679",
    "end": "1785720"
  },
  {
    "text": "scripts to to build those containers build those images and then we can just run",
    "start": "1785720",
    "end": "1791399"
  },
  {
    "start": "1791000",
    "end": "1791000"
  },
  {
    "text": "them here's our build process you can see that for at the top topic branches",
    "start": "1791399",
    "end": "1796880"
  },
  {
    "text": "are buil and not stored long term once somebody merges to master in the middle row there",
    "start": "1796880",
    "end": "1802679"
  },
  {
    "text": "then it gets pushed into artifactory or ECR and then once they run a promotion",
    "start": "1802679",
    "end": "1808440"
  },
  {
    "text": "which means they want to release this this version then it gets it searches in ECR or an artifactory finds the",
    "start": "1808440",
    "end": "1815640"
  },
  {
    "text": "Masterbuilt image and then it promotes it and it just moves within the repository to a new location and then",
    "start": "1815640",
    "end": "1821960"
  },
  {
    "text": "that new location is available to our uh conductor deployment app",
    "start": "1821960",
    "end": "1829240"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "so here is part of a task definition and you can see the interesting things about this one are there's there uh resource",
    "start": "1829760",
    "end": "1838360"
  },
  {
    "text": "limitations so we can tell it how much how many resources this task will get when it runs so if you're if you have a",
    "start": "1838360",
    "end": "1844519"
  },
  {
    "text": "larger box you can give it more resources if you want to run multiple containers on one box you might need to",
    "start": "1844519",
    "end": "1849880"
  },
  {
    "text": "give it lesser resources um an interesting thing here is essential true",
    "start": "1849880",
    "end": "1855240"
  },
  {
    "text": "we found that if you want to run multiple contain containers on one machine if you start them all up using",
    "start": "1855240",
    "end": "1860960"
  },
  {
    "text": "the task definition if one of them doesn't start then the other two might actually start up and and try to run",
    "start": "1860960",
    "end": "1867399"
  },
  {
    "text": "against them and so you by putting an essential true it makes sure that all of them are up and running before the task",
    "start": "1867399",
    "end": "1873080"
  },
  {
    "text": "actually begins to run uh also this is how you share your Docker name in so that you can build Docker images from",
    "start": "1873080",
    "end": "1880760"
  },
  {
    "text": "within a Docker container and these volumes that are mounted can be used to access",
    "start": "1880760",
    "end": "1888080"
  },
  {
    "text": "uh stores of large bits of data that are on the host so what did we get by going to this",
    "start": "1888080",
    "end": "1895440"
  },
  {
    "text": "in moving toward our vision so we got clean testing environments Docker images are",
    "start": "1895440",
    "end": "1902440"
  },
  {
    "start": "1897000",
    "end": "1897000"
  },
  {
    "text": "completely fresh every time they spin up and they spin up in seconds literally",
    "start": "1902440",
    "end": "1907720"
  },
  {
    "text": "seconds so when we're done with a test we report back the results to our reporting app and then we just start a",
    "start": "1907720",
    "end": "1916840"
  },
  {
    "text": "new one it starts up in a few seconds and then we start our setup and we're ready to go",
    "start": "1916840",
    "end": "1923440"
  },
  {
    "text": "um it's it's easy for users for our developers to develop their own images",
    "start": "1923440",
    "end": "1928720"
  },
  {
    "text": "and upload them and then we can run them in our system it's much more efficient",
    "start": "1928720",
    "end": "1933880"
  },
  {
    "text": "it uses all of the machines because when something's done running we throw it away and we can run something else on",
    "start": "1933880",
    "end": "1939039"
  },
  {
    "text": "that machine and we get ECR which gives very",
    "start": "1939039",
    "end": "1944159"
  },
  {
    "text": "good access for pulling down images to run and it's it's safe and it's it's",
    "start": "1944159",
    "end": "1949880"
  },
  {
    "text": "very responsive so let's look at how we did Dynamic worker",
    "start": "1949880",
    "end": "1955880"
  },
  {
    "start": "1952000",
    "end": "1952000"
  },
  {
    "text": "scaling we use sqs and SNS to get our",
    "start": "1955880",
    "end": "1961120"
  },
  {
    "text": "job jobs in the queue so when we want to run seven new tests we put we put that",
    "start": "1961120",
    "end": "1966600"
  },
  {
    "text": "test list into sqs there we have Lambda two Lambda functions read that one of them is a",
    "start": "1966600",
    "end": "1972960"
  },
  {
    "text": "scaling function and one of them is a bin packing function now the scaling function will go and look at the",
    "start": "1972960",
    "end": "1978760"
  },
  {
    "text": "existing machines the ec2 hosts that can run that that job and see how many of",
    "start": "1978760",
    "end": "1984519"
  },
  {
    "text": "them are there and then it makes a determination if the buffer is great enough or or or uh too small and it will",
    "start": "1984519",
    "end": "1992200"
  },
  {
    "text": "launch more machines or not launch machines depending on how big the buffer is and then the bin packing machine will",
    "start": "1992200",
    "end": "1998919"
  },
  {
    "text": "actually go and try to shove all of the jobs into the smallest number of slaves so that we can always keep our our slave",
    "start": "1998919",
    "end": "2006639"
  },
  {
    "text": "pools as small as possible and you can see how bin packing works here so when a new job comes in it goes",
    "start": "2006639",
    "end": "2013000"
  },
  {
    "text": "on a new machine and it's running and then that that job",
    "start": "2013000",
    "end": "2019919"
  },
  {
    "text": "finishes that job finishes now when a new job comes with bin packing it's the",
    "start": "2020159",
    "end": "2025960"
  },
  {
    "text": "one on the right where all the jobs are in the in the minimal set of slaves and",
    "start": "2025960",
    "end": "2031480"
  },
  {
    "text": "in the way that ECS naturally works it spreads out the load over as many hosts as possible now when the autoscaling",
    "start": "2031480",
    "end": "2039120"
  },
  {
    "text": "looks and decides to shut down one of the machines it can pick any machine here",
    "start": "2039120",
    "end": "2044720"
  },
  {
    "text": "and often it will shut down a machine that's running one of the jobs so we",
    "start": "2044720",
    "end": "2049878"
  },
  {
    "text": "want to shut down the machine that's not running the job so the way we do that is we deregister the slaves that aren't",
    "start": "2049879",
    "end": "2055320"
  },
  {
    "text": "running jobs and we let them introspect and then shut themselves down when they're no longer running",
    "start": "2055320",
    "end": "2061320"
  },
  {
    "text": "anything here's a chart that shows this one goes up to 120 which before we",
    "start": "2061320",
    "end": "2066960"
  },
  {
    "text": "rolled this out we were running 120 slaves at a time every day all day and",
    "start": "2066960",
    "end": "2072638"
  },
  {
    "text": "then when we rolled this out you can see we're saving almost as much money as we're spending now so we went below 50%",
    "start": "2072639",
    "end": "2079398"
  },
  {
    "text": "of our of our spend before",
    "start": "2079399",
    "end": "2082720"
  },
  {
    "start": "2083000",
    "end": "2083000"
  },
  {
    "text": "that so we use spot instances across all availability zones and we have to",
    "start": "2085079",
    "end": "2090358"
  },
  {
    "text": "manually switch between them and this isn't ideal and so we're planning on",
    "start": "2090359",
    "end": "2095800"
  },
  {
    "text": "trying to move to spot Fleet soon and see if that that helps at all you can",
    "start": "2095800",
    "end": "2100880"
  },
  {
    "text": "see the the variability in our spot instances here the lines at the bottom are what we",
    "start": "2100880",
    "end": "2107079"
  },
  {
    "text": "expect to spend and the spikes are what happens on a pretty frequent basis these are the the notifications from Amazon",
    "start": "2107079",
    "end": "2115119"
  },
  {
    "text": "they tell us when the spot indexes are going to go down and we can actually recue the jobs that are running",
    "start": "2115119",
    "end": "2120240"
  },
  {
    "text": "there so here's how much we've saved you can see the green is what our team",
    "start": "2120240",
    "end": "2125760"
  },
  {
    "text": "spends and we save almost as much as we're spending I think it's 20% of the total spend in our in",
    "start": "2125760",
    "end": "2131800"
  },
  {
    "text": "our greater group here so we also get version jobs by",
    "start": "2131800",
    "end": "2138000"
  },
  {
    "text": "doing this you can see that we have developers checking in changes to the",
    "start": "2138000",
    "end": "2143200"
  },
  {
    "text": "build scripts and this allows them to make changes to the CI infrastructure as they",
    "start": "2143200",
    "end": "2148839"
  },
  {
    "text": "need to to their environments as they need to um this allows us to run different",
    "start": "2148839",
    "end": "2155400"
  },
  {
    "text": "versions of containers task definitions it creates extreme flexibility and cloud",
    "start": "2155400",
    "end": "2161400"
  },
  {
    "text": "formation allows us to set up whole new clusters with different versions in a matter of minutes and we've done this",
    "start": "2161400",
    "end": "2167280"
  },
  {
    "text": "before uh for some of the teams when they needed their own isolated",
    "start": "2167280",
    "end": "2172839"
  },
  {
    "text": "environment so some of the problems that we've run into were Docker early on were Docker containers not launching ECS",
    "start": "2172839",
    "end": "2179240"
  },
  {
    "text": "agents failing Docker containers stopping we solved a lot of these by just uh updating to the latest versions",
    "start": "2179240",
    "end": "2185200"
  },
  {
    "text": "and a lot of that went away over the last few months um we also just use sqs",
    "start": "2185200",
    "end": "2190960"
  },
  {
    "text": "uh feature to recue tasks that have disappeared um and some of the other",
    "start": "2190960",
    "end": "2198160"
  },
  {
    "text": "problems we have are incompatibility with certain Services there are there are a couple things there's a JS unit testing framework that will actually",
    "start": "2198160",
    "end": "2204800"
  },
  {
    "text": "break the kernel uh so we can't test some things on Docker we can't run Windows on Docker very easily um clean",
    "start": "2204800",
    "end": "2213160"
  },
  {
    "text": "up we were filling up the discs Amazon has since enabled cleaning up at a shorter time period and image size was a",
    "start": "2213160",
    "end": "2220680"
  },
  {
    "text": "problem um we solved that by moving large bits of data to the hosts ahead of",
    "start": "2220680",
    "end": "2226400"
  },
  {
    "text": "time and then just having them mounted when we need them or copying the data over when we needed it so these are all",
    "start": "2226400",
    "end": "2233079"
  },
  {
    "text": "of the services that we use in our CI system and this is what it looks like now so almost everything is green the",
    "start": "2233079",
    "end": "2240680"
  },
  {
    "text": "only actual machines that are being used there where we actually have to worry about the the size of the machine and",
    "start": "2240680",
    "end": "2247599"
  },
  {
    "text": "security patches Etc are uh bacon aperture and floner and aperture and",
    "start": "2247599",
    "end": "2254119"
  },
  {
    "text": "floner are being tested running an ECS right now in containers and we use them",
    "start": "2254119",
    "end": "2260319"
  },
  {
    "text": "in our in to roll out a test code before we roll it to the production server and so those will be switching over very",
    "start": "2260319",
    "end": "2266079"
  },
  {
    "text": "soon and bacon is actually uh in elastic bean stock now so it's it's managed as",
    "start": "2266079",
    "end": "2271480"
  },
  {
    "text": "well the the blue square denotes a uh template so that we can launch all of",
    "start": "2271480",
    "end": "2277240"
  },
  {
    "text": "that at once and the yellow is our underlying reporting system so we keep",
    "start": "2277240",
    "end": "2282280"
  },
  {
    "text": "one of those and we can launch as many of the blue ones as we need for different teams so in the future we're looking to",
    "start": "2282280",
    "end": "2290200"
  },
  {
    "text": "use ECS for more services to have the teams just use it for more of our uh products that OCTA is writing we want to",
    "start": "2290200",
    "end": "2298079"
  },
  {
    "text": "allow developers to have more access to the CI system so that they can actually roll everything out without us having to",
    "start": "2298079",
    "end": "2303319"
  },
  {
    "text": "make any changes on the back end currently we still have to uh get in there and work with it and change some",
    "start": "2303319",
    "end": "2308480"
  },
  {
    "text": "stuff in the database and move things around in order to get their new Docker images onto our system and the developer",
    "start": "2308480",
    "end": "2314240"
  },
  {
    "text": "environments are currently using some of those thirdparty images that we talked about and but they are running the same",
    "start": "2314240",
    "end": "2321400"
  },
  {
    "text": "version operating system as our uh CI system and very similar to our production system and so we are trying",
    "start": "2321400",
    "end": "2329440"
  },
  {
    "text": "to keep the developer environments up to date with the CI system so we roll out updates at the same time and the only",
    "start": "2329440",
    "end": "2336119"
  },
  {
    "text": "thing that we have left to do is we'd really like to have the CD containers the CI containers work on the",
    "start": "2336119",
    "end": "2344040"
  },
  {
    "text": "laptops right away but CI has I am access to certain resources that a",
    "start": "2344040",
    "end": "2350480"
  },
  {
    "text": "developer might not so we just need to do some work around making sure that their credentials will work with the containers when they launch them so now",
    "start": "2350480",
    "end": "2358280"
  },
  {
    "text": "I'm going to hand it back to John who's going to talk about the services we're putting in",
    "start": "2358280",
    "end": "2363560"
  },
  {
    "text": "production thanks Tim so I'm going to talk about two things um how we're using",
    "start": "2363560",
    "end": "2368640"
  },
  {
    "text": "ECS in production and and how we you know decided that it was the right thing to do and I'm going to do a little bit",
    "start": "2368640",
    "end": "2373839"
  },
  {
    "text": "of a demo of our of our um tooling so for production we had uh a few",
    "start": "2373839",
    "end": "2380720"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "requirements um that were separate from what we were thinking about internally for CI um we needed to support our",
    "start": "2380720",
    "end": "2386920"
  },
  {
    "text": "multi-az multi- region architecture multi-az you get for free because ECS",
    "start": "2386920",
    "end": "2392280"
  },
  {
    "text": "runs on top of ec2 instances but multi- region meant that we did need to wait for uh ECS to be available in every",
    "start": "2392280",
    "end": "2398880"
  },
  {
    "text": "region that we run in uh Amazon also or OCTA also has a number of different",
    "start": "2398880",
    "end": "2405119"
  },
  {
    "text": "compliance requirements um that basically enforce two different things for us uh enforces that we use lease",
    "start": "2405119",
    "end": "2412400"
  },
  {
    "text": "privilege principle which for us means that we needed the services the I the I",
    "start": "2412400",
    "end": "2418200"
  },
  {
    "text": "am roles that were granted to services to be distinct for each container uh and each service we also needed to continue",
    "start": "2418200",
    "end": "2425680"
  },
  {
    "text": "to have the host to host encryption that we had in place prior to using containers and again because ECS is just",
    "start": "2425680",
    "end": "2432680"
  },
  {
    "text": "built on top of ec2 we get that for free next for deployment support we",
    "start": "2432680",
    "end": "2437720"
  },
  {
    "text": "wanted roll back you get that really easily by just telling the scheduler to go back to the previous version you were at and then we also wanted Canary and",
    "start": "2437720",
    "end": "2445160"
  },
  {
    "text": "and um blue green deployments and that's possible um with the later changes to",
    "start": "2445160",
    "end": "2450400"
  },
  {
    "text": "elb um the application layer elbs that they're offering where you're able to",
    "start": "2450400",
    "end": "2455760"
  },
  {
    "text": "have multi multiple Services behind the same elb um and so whether it's a",
    "start": "2455760",
    "end": "2461599"
  },
  {
    "text": "production and a canary service or it's a blue and a green service both behind the same elb you're able to now do those",
    "start": "2461599",
    "end": "2468520"
  },
  {
    "text": "sorts of orchestrations that you'd like to do um with your containers and lastly and and the most important to us was",
    "start": "2468520",
    "end": "2475240"
  },
  {
    "text": "Zero downtime deployments and at this point this is Mom and apple pie for all of us right we need to ensure that our",
    "start": "2475240",
    "end": "2481359"
  },
  {
    "text": "services are up and running all the time but we wanted to take it a step further right if you look at the state",
    "start": "2481359",
    "end": "2486920"
  },
  {
    "text": "transition diagram for ECS it's pretty complicated there's a lot of different ways that you can change State and we",
    "start": "2486920",
    "end": "2492599"
  },
  {
    "text": "wanted to make sure that across any of these different operations that we might be performing we ensure that our",
    "start": "2492599",
    "end": "2498800"
  },
  {
    "text": "customers aren't seeing errors or failed uh responses so I wrote a small little app",
    "start": "2498800",
    "end": "2505880"
  },
  {
    "text": "called Aries which is named after the beater car I drove in high school and it's a beer app it lets you do things",
    "start": "2505880",
    "end": "2512000"
  },
  {
    "text": "like uh fail health checks or simulate latency or other types of issues you can",
    "start": "2512000",
    "end": "2517240"
  },
  {
    "text": "check it out on GitHub if you're interested there's a container that you could just run and do the same test that we did um the test assumptions we we",
    "start": "2517240",
    "end": "2524839"
  },
  {
    "text": "made uh we used the 1.11 version of the agent and Docker um we're running this",
    "start": "2524839",
    "end": "2530240"
  },
  {
    "text": "on top of an auto scaling Group which is providing the underlying ec2 hosts and",
    "start": "2530240",
    "end": "2535520"
  },
  {
    "text": "uh we're using some of the most aggressive health check thresholds that you can for elb and then most",
    "start": "2535520",
    "end": "2541800"
  },
  {
    "text": "importantly we've enabled connection draining which is incredibly important for all the stuff to work",
    "start": "2541800",
    "end": "2547599"
  },
  {
    "text": "well for our test we did two different types we we generated load 16 threads on",
    "start": "2547599",
    "end": "2554400"
  },
  {
    "text": "an first type was interactive where we just sent the request to the service and have it respond as fast as it possibly",
    "start": "2554400",
    "end": "2560839"
  },
  {
    "text": "could with that we got about 490 requests per second then we also simulated a model that that would be",
    "start": "2560839",
    "end": "2567280"
  },
  {
    "text": "like long polling where you make the request the back end holds it for 10 seconds and then it responds we want to",
    "start": "2567280",
    "end": "2572520"
  },
  {
    "text": "see now if we go through all those different state transitions in that diagram how does ECS",
    "start": "2572520",
    "end": "2577880"
  },
  {
    "text": "do so it did well um most of the operations in fact all the operations",
    "start": "2577880",
    "end": "2583319"
  },
  {
    "text": "that you're going to do in a normal uh day are going to work just as you would expect them to we didn't see any any",
    "start": "2583319",
    "end": "2589280"
  },
  {
    "text": "loss if you look at the the the row at the bottom kill the docker container",
    "start": "2589280",
    "end": "2594440"
  },
  {
    "text": "this is a convoluted scenario we decided hey what would happen if you actually log into the ec2 host and just say",
    "start": "2594440",
    "end": "2600800"
  },
  {
    "text": "Docker kill container ID and I was actually really impressed you know so at 4 90 requests per second only two of",
    "start": "2600800",
    "end": "2608839"
  },
  {
    "text": "them got through before the agent told the elb to take the service out of rotation that's pretty impressive um the",
    "start": "2608839",
    "end": "2616839"
  },
  {
    "text": "other weird thing that we saw was when you actually went and stopped a underlying container instance rather",
    "start": "2616839",
    "end": "2624119"
  },
  {
    "text": "than terminate just stop um it it puts the system into a weird State and I don't know if uh if they've gone and fix",
    "start": "2624119",
    "end": "2630319"
  },
  {
    "text": "this but when you're stopping an instance it's not really clear whether or not your intent is to have it to stay",
    "start": "2630319",
    "end": "2635559"
  },
  {
    "text": "in the cluster cluster because you're going to restart it again later or you're going to actually terminate it",
    "start": "2635559",
    "end": "2640760"
  },
  {
    "text": "but we found that if you stopped and then terminated the instance later that termination never made it back to the",
    "start": "2640760",
    "end": "2646079"
  },
  {
    "text": "cluster and the cluster kept holding on to that instance and it would in fact try to schedule onto it um in at least",
    "start": "2646079",
    "end": "2652599"
  },
  {
    "text": "in the earlier versions of the agent so the one like odd thing I would say is",
    "start": "2652599",
    "end": "2657640"
  },
  {
    "text": "just avoid stopping your your um your instances just prefer using terminate",
    "start": "2657640",
    "end": "2663720"
  },
  {
    "text": "instead then the last thing when you're F your health checks fail obviously you're going to get errors that's when",
    "start": "2663720",
    "end": "2669480"
  },
  {
    "text": "it's your responsibility to keep your application up and running so the way to get those numbers lower there is just by",
    "start": "2669480",
    "end": "2675839"
  },
  {
    "text": "having the right tuning for your health checks so as Tim mentioned um a lot of",
    "start": "2675839",
    "end": "2684480"
  },
  {
    "text": "this workflow uh starts with developers in their git repos defining um a Docker",
    "start": "2684480",
    "end": "2690079"
  },
  {
    "text": "file and a Docker composed file if they're trying to stand up multiple dependencies of the service that they're",
    "start": "2690079",
    "end": "2695680"
  },
  {
    "text": "running but then there's also an application yaml file which declaratively defines a",
    "start": "2695680",
    "end": "2700960"
  },
  {
    "text": "bunch of different aspects of that application it's used for the CI pipeline um and it's also used by",
    "start": "2700960",
    "end": "2707800"
  },
  {
    "text": "conductor to Define how the deployment out to ECS should work and conductor is",
    "start": "2707800",
    "end": "2713079"
  },
  {
    "text": "our our lightweight little application that allows developers to just update versions of code that has been",
    "start": "2713079",
    "end": "2720760"
  },
  {
    "text": "promoted here's a quick look at our yamoo file um at a high level there's kind of two different things there",
    "start": "2721200",
    "end": "2727400"
  },
  {
    "start": "2722000",
    "end": "2722000"
  },
  {
    "text": "there's a definition of components so you might have a UI and a backend component and then you might have some",
    "start": "2727400",
    "end": "2734160"
  },
  {
    "text": "number of tasks that you're able to perform on those components the the yaml document is able",
    "start": "2734160",
    "end": "2740559"
  },
  {
    "text": "to um have properties that get replaced at deploy time and then secrets are",
    "start": "2740559",
    "end": "2745599"
  },
  {
    "text": "never put into this system but instead are pulled by the application at startup time and only kept in",
    "start": "2745599",
    "end": "2752640"
  },
  {
    "text": "memory so now I'd like to just do a quick demo of some of our",
    "start": "2752640",
    "end": "2759079"
  },
  {
    "text": "tooling so in this demo I'm going to have two different personas um one",
    "start": "2760680",
    "end": "2765960"
  },
  {
    "text": "Persona John is going to be a consultant who just got hired at a company called reinvent and um the second Persona is",
    "start": "2765960",
    "end": "2774559"
  },
  {
    "text": "going to be an administrator named Tim who runs it for the",
    "start": "2774559",
    "end": "2781280"
  },
  {
    "text": "organization and let's see if the Wi-Fi Gods will allow this demo to",
    "start": "2781280",
    "end": "2788280"
  },
  {
    "text": "work okay so I just received my credentials to start working as a",
    "start": "2788960",
    "end": "2794160"
  },
  {
    "text": "consultant for the reinvent company and I'm going to log in and I'm walking you through this",
    "start": "2794160",
    "end": "2801240"
  },
  {
    "text": "experience because everything you're seeing here is something that you could put in front of your application without doing any coding because we have a a",
    "start": "2801240",
    "end": "2808160"
  },
  {
    "text": "login experience a widget um and this is the look and Feld of that widget you can customize the CSS Etc so now I'm going",
    "start": "2808160",
    "end": "2815400"
  },
  {
    "text": "to set up um Google Authenticator but you could use this in your app you could pick whatever factors you want to use",
    "start": "2815400",
    "end": "2821720"
  },
  {
    "text": "I'm just doing this to to demo the fact that it's not just a login page and it's",
    "start": "2821720",
    "end": "2827280"
  },
  {
    "text": "not just an account recovery email that you need to be able to send out or an SMS but there's a lot of different steps",
    "start": "2827280",
    "end": "2833400"
  },
  {
    "text": "in a login flow um you know there's the onboarding of an MFA factor which I'm",
    "start": "2833400",
    "end": "2838559"
  },
  {
    "text": "going to do right now there's also the the challenge of an MFA factor and how do you um how do you allow people to",
    "start": "2838559",
    "end": "2844680"
  },
  {
    "text": "reset those as well so all of that's encapsulated in a single page app that we allow you to host and run in front of",
    "start": "2844680",
    "end": "2850680"
  },
  {
    "text": "your application if you want all right so I'm going to finish up this um setup",
    "start": "2850680",
    "end": "2857319"
  },
  {
    "text": "of MFA and I could configure some other",
    "start": "2857319",
    "end": "2862720"
  },
  {
    "text": "factors but I'm not I'm just going to go in so as a as a contractor right now I only have access to GitHub but OCTA",
    "start": "2862720",
    "end": "2869960"
  },
  {
    "text": "enables me um to also self-service access additional applications in my",
    "start": "2869960",
    "end": "2875440"
  },
  {
    "text": "company if um someone's made it available to me so I can go ahead and add bacon and",
    "start": "2875440",
    "end": "2881480"
  },
  {
    "text": "bacon is our UI for cicd and now I've got uh assignment to bacon and I have an account that I can",
    "start": "2881480",
    "end": "2888400"
  },
  {
    "text": "use and access bacon it was that simple now let's fast forward time and say that I I get hired um as an actual full-time",
    "start": "2888400",
    "end": "2896400"
  },
  {
    "text": "employee and so maybe that means that our HR System just moved me into the full-time employee group and then that",
    "start": "2896400",
    "end": "2902920"
  },
  {
    "text": "got synchronized to OCTA and OCTA um puts me into the group that way um I'm GNA simulate that by just going to the",
    "start": "2902920",
    "end": "2909640"
  },
  {
    "text": "full-time employee group here managing people and adding uh John into that",
    "start": "2909640",
    "end": "2915200"
  },
  {
    "text": "group as the administrator and now when I come back to my homepage and re refresh I now have",
    "start": "2915200",
    "end": "2922559"
  },
  {
    "text": "access to all the other applications that are given to full-time employees and OCTA has gone and actually",
    "start": "2922559",
    "end": "2927960"
  },
  {
    "text": "provisioned accounts and all those systems and allow me to to now get access to Amazon Google goto meeting and",
    "start": "2927960",
    "end": "2934319"
  },
  {
    "text": "conductor which is our deployment M uh system so you can see we're mixing in here internal microservices that we've",
    "start": "2934319",
    "end": "2941359"
  },
  {
    "text": "written with um cloud services that we use and this is a model that a lot of us probably have where you have a bunch of",
    "start": "2941359",
    "end": "2948000"
  },
  {
    "text": "applications you're writing yourselves you want a single place to go and authenticate in but it's not just single",
    "start": "2948000",
    "end": "2954280"
  },
  {
    "text": "sign on because you also want your internal applications to get attributes",
    "start": "2954280",
    "end": "2959680"
  },
  {
    "text": "about your users so you can make authorization decisions right so when I go into bacon I want want it to know",
    "start": "2959680",
    "end": "2966200"
  },
  {
    "text": "that I'm in certain groups in Octa so that it can make decisions about whether or not I'm allowed to promote certain",
    "start": "2966200",
    "end": "2972319"
  },
  {
    "text": "artifacts so I'm going to Now log into",
    "start": "2972319",
    "end": "2976839"
  },
  {
    "text": "bacon and in in this uh scenario this is the only part that's actually going over the Wi-Fi which is why it's probably a",
    "start": "2977880",
    "end": "2984400"
  },
  {
    "text": "little bit slow um we're going and doing an SSO into bacon providing it with um a",
    "start": "2984400",
    "end": "2991400"
  },
  {
    "text": "set of claims about my user that OCTA has specifically put together for this",
    "start": "2991400",
    "end": "2998799"
  },
  {
    "text": "application okay so we're in bacon and um bacon is the UI that sits on top of",
    "start": "3000880",
    "end": "3008319"
  },
  {
    "text": "the rest of our CD pipeline uh we're looking at the sage repository right now",
    "start": "3008319",
    "end": "3013880"
  },
  {
    "text": "it has fewer components than what you saw in in the demo that that Tim showed you um we have a backend app in a UI and",
    "start": "3013880",
    "end": "3020920"
  },
  {
    "text": "you can see I've got this JT demo Branch here that I was working on earlier I had a fail",
    "start": "3020920",
    "end": "3026440"
  },
  {
    "text": "um that I needed to fix so I could go in here and download log information for it",
    "start": "3026440",
    "end": "3032040"
  },
  {
    "text": "figure out what the issue is um realize that it was a flaky test that someone else wrote and I can do a selective",
    "start": "3032040",
    "end": "3038760"
  },
  {
    "text": "retry and if that's not uh the fix for it maybe it was actually a bug that I introduced then I can go ahead and fix",
    "start": "3038760",
    "end": "3045400"
  },
  {
    "text": "that bug um rep push a new branch and then I'll have the option to merge and",
    "start": "3045400",
    "end": "3050480"
  },
  {
    "text": "so something that a lot of organizations have a problem with but they don't talk about is the fact that you have flak",
    "start": "3050480",
    "end": "3055640"
  },
  {
    "text": "test right you work in a big environment with lots of different folks changing the code at the same time you're going to have flakiness and so one of the",
    "start": "3055640",
    "end": "3062440"
  },
  {
    "text": "other things we've built in bacon is the ability to track statistics about our tests and understand what their",
    "start": "3062440",
    "end": "3070559"
  },
  {
    "text": "likelihood is of actually uh being being successful and what teams own them and",
    "start": "3070559",
    "end": "3077440"
  },
  {
    "text": "use this to start to track what commit introduced the flakiness for this so that we can use that for",
    "start": "3077440",
    "end": "3084359"
  },
  {
    "text": "assignment the last thing I'll show is just that uh if I click merge I'm able to um put in",
    "start": "3084359",
    "end": "3092040"
  },
  {
    "text": "the jira so we're able to start enforcing some of the things that we require in our environment um that every",
    "start": "3092040",
    "end": "3097599"
  },
  {
    "text": "every change has a jera um it's also pointing out that I haven't squash my commits so encouraging me to do that um",
    "start": "3097599",
    "end": "3105280"
  },
  {
    "text": "and then if I've made enough commits and I'm ready to go and push a deployment I can promote the artifact now in this case I'm not",
    "start": "3105280",
    "end": "3112559"
  },
  {
    "text": "allowed to do that um because the user that I'm trying to do this as doesn't have that capability which is informed",
    "start": "3112559",
    "end": "3119400"
  },
  {
    "text": "by OCTA so what we're demoing here is a UI that's powered by Amazon for its",
    "start": "3119400",
    "end": "3125319"
  },
  {
    "text": "scalability if we have more tests if we need to break these up into smaller",
    "start": "3125319",
    "end": "3130520"
  },
  {
    "text": "chunks so they in aggregate will run faster we can do that and Amazon ECS",
    "start": "3130520",
    "end": "3136240"
  },
  {
    "text": "powers that and then we're using OCTA to enable SSO and and authorization",
    "start": "3136240",
    "end": "3143880"
  },
  {
    "text": "Federation all right so I'm just going to end with a couple thoughts um we had a number of",
    "start": "3144280",
    "end": "3151480"
  },
  {
    "start": "3145000",
    "end": "3145000"
  },
  {
    "text": "feature requests that we we wanted to see in ECS and as the time got closer to coming",
    "start": "3151480",
    "end": "3157480"
  },
  {
    "text": "to this conference more lines started getting drawn through this this slide um",
    "start": "3157480",
    "end": "3162680"
  },
  {
    "text": "it's awesome to see that they've added Dynamic Port mapping which allows us to put multiple of the same service on the",
    "start": "3162680",
    "end": "3169359"
  },
  {
    "text": "same machine uh it's great to see that they've added service autoscaling so that we don't need to start doing that",
    "start": "3169359",
    "end": "3175040"
  },
  {
    "text": "with lambdas ourselves um it was awesome to see the per container I IM roles we'd still like",
    "start": "3175040",
    "end": "3181000"
  },
  {
    "text": "to see per container security groups so that you can lock down your network policy as well on a per container basis",
    "start": "3181000",
    "end": "3188440"
  },
  {
    "text": "and then the announcement earlier today um of the open sourcing of more",
    "start": "3188440",
    "end": "3194880"
  },
  {
    "text": "capabilities around ECS is really exciting but we'd still love to see a bin packing scheduler that doesn't",
    "start": "3194880",
    "end": "3201040"
  },
  {
    "text": "require us to stand up anything else um but it still steps in the right direction dire so that's really",
    "start": "3201040",
    "end": "3207720"
  },
  {
    "text": "awesome lastly some lessons learn and takeaways for you all um if you're not",
    "start": "3207720",
    "end": "3212799"
  },
  {
    "text": "familiar with the ECS config file definitely look at the various options in there in particular the cleanup",
    "start": "3212799",
    "end": "3218520"
  },
  {
    "text": "weight duration is pretty helpful if you like to sleep at night um and the default of one hour is not all that easy",
    "start": "3218520",
    "end": "3226240"
  },
  {
    "text": "it doesn't make it easy for you to uh to get your forensics done um if you're going to wait eight or nine hours before",
    "start": "3226240",
    "end": "3232640"
  },
  {
    "text": "you're going to take a look at it uh We've also found that at times when there were issues with the ECS agent",
    "start": "3232640",
    "end": "3238599"
  },
  {
    "text": "early on turning on debug mode really helped us figure out what the problems were um sometimes they were ours and",
    "start": "3238599",
    "end": "3244200"
  },
  {
    "text": "sometimes not um definitely tune your elb health check right so when we did",
    "start": "3244200",
    "end": "3249319"
  },
  {
    "text": "that test we did find that really the the only place that we were going to have failures for our customers was if",
    "start": "3249319",
    "end": "3254720"
  },
  {
    "text": "our own health checks were failing but you do need to be on top of getting the right tuning for that um upgrading to",
    "start": "3254720",
    "end": "3261640"
  },
  {
    "text": "Docker 1.10 or higher uh has a number of security enhancements including uh",
    "start": "3261640",
    "end": "3267240"
  },
  {
    "text": "allowing your containers to run as non-root users in the event that someone could Escape your container that's a",
    "start": "3267240",
    "end": "3272520"
  },
  {
    "text": "pretty important change um also take away you know Canary and blue green is",
    "start": "3272520",
    "end": "3278440"
  },
  {
    "text": "possible uh if you have multiple Services behind the same elb so I'll just leave you with the fact",
    "start": "3278440",
    "end": "3284960"
  },
  {
    "text": "that we think um ECS is incredibly easy to get up and running we've been really happy with it thus far um the ecosystem",
    "start": "3284960",
    "end": "3292200"
  },
  {
    "text": "is changing all the time and as as we saw even with the requests that we've had Amazon is really keeping Pace with",
    "start": "3292200",
    "end": "3297799"
  },
  {
    "text": "this so we're really excited to see um how it continues to progress and happy to be a partner with you",
    "start": "3297799",
    "end": "3303559"
  },
  {
    "text": "guys so thank you all for coming uh we'll be around here but not taking questions right now but we'll be around",
    "start": "3303559",
    "end": "3309559"
  },
  {
    "text": "here after the presentation uh thanks again and feel free to reach out on Twitter or email if you have questions",
    "start": "3309559",
    "end": "3315520"
  },
  {
    "text": "that way as well",
    "start": "3315520",
    "end": "3322920"
  }
]