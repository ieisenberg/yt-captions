[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "hi everyone I'm mahanta I'm a principal engineer in the automated reasoning",
    "start": "4700",
    "end": "10349"
  },
  {
    "text": "group I'm gonna be talking today about the theory and math underneath the work",
    "start": "10349",
    "end": "16830"
  },
  {
    "text": "in data privacy and security assurance I'm joined today by Dan Peebles and Greg",
    "start": "16830",
    "end": "23310"
  },
  {
    "text": "frescoed or from Bridgewater associates who are gonna talk about their use case and how they've leveraged within their",
    "start": "23310",
    "end": "30119"
  },
  {
    "text": "organization this work that I'm gonna be talking about before we nerd out a few",
    "start": "30119",
    "end": "36030"
  },
  {
    "text": "reminders the slide deck will be available through SlideShare and the talk will be recorded and posted on",
    "start": "36030",
    "end": "41940"
  },
  {
    "text": "YouTube the URLs for both will be in the session catalog so the key takeaways in",
    "start": "41940",
    "end": "54870"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "the talk the scale and diversity of cloud applications today create a need",
    "start": "54870",
    "end": "60899"
  },
  {
    "text": "to automate checks around access control for enterprises this top focuses on the",
    "start": "60899",
    "end": "67110"
  },
  {
    "text": "use of provable security to achieve higher assurance around that automation",
    "start": "67110",
    "end": "72900"
  },
  {
    "text": "at scale in the first part of the talk we'll take a peek under the hood what is",
    "start": "72900",
    "end": "79799"
  },
  {
    "text": "provable security with respect to access control and in the second part of the talk Dan and Greg will talk about very",
    "start": "79799",
    "end": "87240"
  },
  {
    "text": "specific use cases that they've developed in Bridgewater's associates",
    "start": "87240",
    "end": "93560"
  },
  {
    "text": "security is job zero but this is what's turning security and data privacy in the",
    "start": "94220",
    "end": "101280"
  },
  {
    "text": "cloud from an obligation to an advantage because the things that we need to do",
    "start": "101280",
    "end": "107490"
  },
  {
    "text": "for secure for good security we need need for governance for good availability for good operations so the",
    "start": "107490",
    "end": "114990"
  },
  {
    "text": "higher the bar for security the overall goal and the overall governance improves",
    "start": "114990",
    "end": "122369"
  },
  {
    "text": "for cloud which is why it's moving to an advantage and the realities of the",
    "start": "122369",
    "end": "127979"
  },
  {
    "text": "security landscape is changing the customer needs are changing based on the different dimensions and different",
    "start": "127979",
    "end": "135540"
  },
  {
    "text": "dimensions can be there the the data volume the amount of compute required",
    "start": "135540",
    "end": "142739"
  },
  {
    "text": "and all of these scale dimensions are driving in AWS the next generation of",
    "start": "142739",
    "end": "148790"
  },
  {
    "text": "technology and services around data privacy and security assurance our goal",
    "start": "148790",
    "end": "156510"
  },
  {
    "text": "here is to say I want to claim my cloud environment is secure and I can",
    "start": "156510",
    "end": "162690"
  },
  {
    "text": "mathematically prove it and this",
    "start": "162690",
    "end": "167959"
  },
  {
    "start": "166000",
    "end": "166000"
  },
  {
    "text": "provable security plays a role in both parts of this shared responsibility",
    "start": "167959",
    "end": "174300"
  },
  {
    "text": "model a lot of folks have probably seen this where we say AWS is responsible for",
    "start": "174300",
    "end": "180030"
  },
  {
    "text": "security of the cloud while you know we want to partner with the customers for saying what's this",
    "start": "180030",
    "end": "185940"
  },
  {
    "text": "how do we be secure in the cloud and they're there there's ways people can go",
    "start": "185940",
    "end": "192880"
  },
  {
    "text": "and search for approval security in AWS we have a website that gives more examples of how we are achieving",
    "start": "192880",
    "end": "199240"
  },
  {
    "text": "security in the cloud with respect to verifying boot code and other supply",
    "start": "199240",
    "end": "205209"
  },
  {
    "text": "chain verification where crypto protocols but this particular talk is going to focus on security in the cloud",
    "start": "205209",
    "end": "212440"
  },
  {
    "text": "and how we are developing services and technologies to help folks be secure in",
    "start": "212440",
    "end": "218140"
  },
  {
    "text": "the cloud the specific solution that we're going to talk today about is",
    "start": "218140",
    "end": "224970"
  },
  {
    "text": "zelkova so what what is zelkova it's",
    "start": "224970",
    "end": "231150"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "it's a reasoning engine that can soundly tell you answers about access control",
    "start": "231150",
    "end": "238330"
  },
  {
    "text": "which in turn enables checking security best practices compliance requirements",
    "start": "238330",
    "end": "245190"
  },
  {
    "text": "enterprise wide governance checks an example governance check could be hey is",
    "start": "245190",
    "end": "252880"
  },
  {
    "text": "it the case that access is only granted to a set of whitelisted principles or am",
    "start": "252880",
    "end": "258760"
  },
  {
    "text": "i guaranteed that there is no access to requests from a specific IP range so how",
    "start": "258760",
    "end": "269229"
  },
  {
    "text": "would you do it what can it do Val Kovac an audit for these types of tracks it",
    "start": "269229",
    "end": "275919"
  },
  {
    "text": "can check for unintended misconfigurations identify parts of the",
    "start": "275919",
    "end": "282640"
  },
  {
    "text": "policies that lead to violations lead to non-compliance and also detect any",
    "start": "282640",
    "end": "289660"
  },
  {
    "text": "changes that you've made with respect to your configurations with make with respect to your access control and say",
    "start": "289660",
    "end": "296440"
  },
  {
    "text": "oh now you have it you have this unintended privilege escalation based on",
    "start": "296440",
    "end": "301840"
  },
  {
    "text": "the change that you've made to the policy where is this being used there is",
    "start": "301840",
    "end": "308470"
  },
  {
    "text": "this notion of provable security at scale last year there was a feature released in the s3 console with an",
    "start": "308470",
    "end": "316330"
  },
  {
    "text": "orange badge that flag if the s3 bucket policies allowed",
    "start": "316330",
    "end": "322110"
  },
  {
    "text": "unrestricted read or write access to the bucket so this feature is driven by",
    "start": "322110",
    "end": "327520"
  },
  {
    "text": "zelkova a lot of feedback after the release of the feature that the s3 team God and we got was this is great but we",
    "start": "327520",
    "end": "335770"
  },
  {
    "text": "want to be in the situation that we can never create an open bucket so just very",
    "start": "335770",
    "end": "343419"
  },
  {
    "text": "recently there was a launch of the Amazon s3 block public access feature",
    "start": "343419",
    "end": "348639"
  },
  {
    "text": "and here this says that enforces that the buckets don't allow public access",
    "start": "348639",
    "end": "356020"
  },
  {
    "text": "and this feature is available in the CLI the SDK and the console the setting can",
    "start": "356020",
    "end": "362860"
  },
  {
    "text": "be configured either at the bucket level or at the account level another service",
    "start": "362860",
    "end": "370660"
  },
  {
    "start": "368000",
    "end": "368000"
  },
  {
    "text": "where's alko has integrated in is AWS config it provides zelkova driven manage",
    "start": "370660",
    "end": "377410"
  },
  {
    "text": "rules so if you go in the console and search for zelkova it will it will yield",
    "start": "377410",
    "end": "383380"
  },
  {
    "text": "the the rules that are driven by zelkova and it enables you to evaluate changes",
    "start": "383380",
    "end": "389200"
  },
  {
    "text": "to resources whether your access control policy comply with common best practices",
    "start": "389200",
    "end": "395010"
  },
  {
    "text": "some examples are do you have server-side encryption enabled on s3",
    "start": "395010",
    "end": "400599"
  },
  {
    "text": "buckets or are you restricting access to your lambda resources to learn more you",
    "start": "400599",
    "end": "409180"
  },
  {
    "text": "can read about zelkova in the AWS security blog post there is also a peer",
    "start": "409180",
    "end": "416169"
  },
  {
    "text": "reviewed technical paper that goes more into the details of how zelkova works which is published in a conference",
    "start": "416169",
    "end": "423580"
  },
  {
    "text": "called FM cad earlier this year coming",
    "start": "423580",
    "end": "429280"
  },
  {
    "text": "back to what this means for enterprise governance what we've heard from our",
    "start": "429280",
    "end": "435910"
  },
  {
    "text": "customers is zelkova is changing what people thought possible with regards to",
    "start": "435910",
    "end": "442539"
  },
  {
    "text": "assurances around automations of access control checks they can now achieve a",
    "start": "442539",
    "end": "448900"
  },
  {
    "text": "more holistic and accurate representation of access control it's not Oh am i checking",
    "start": "448900",
    "end": "455800"
  },
  {
    "text": "one thing here one there what what is it that I can do or cannot do within",
    "start": "455800",
    "end": "463090"
  },
  {
    "text": "my organization with respect to my threat model with respect to my governance rules and have assurance that",
    "start": "463090",
    "end": "470169"
  },
  {
    "text": "it is correct so you would want to know",
    "start": "470169",
    "end": "475449"
  },
  {
    "start": "472000",
    "end": "472000"
  },
  {
    "text": "okay great what about me what do I want as an AWS customer I'm gonna punt on",
    "start": "475449",
    "end": "481570"
  },
  {
    "text": "that question because Dan and Greg are going to talk about what they have gotten out of zelkova as AWS customers",
    "start": "481570",
    "end": "488740"
  },
  {
    "text": "and how that maps to a lot of the requirements and questions that folks",
    "start": "488740",
    "end": "493750"
  },
  {
    "text": "and this audience will have about it so the title of the talk promised math",
    "start": "493750",
    "end": "501729"
  },
  {
    "text": "so I'm not gonna disappoint folks we are gonna go back to the math and I'm gonna",
    "start": "501729",
    "end": "507490"
  },
  {
    "text": "talk about the underlying math and logic that is driving zelkova and is enabling",
    "start": "507490",
    "end": "514060"
  },
  {
    "text": "this introduce higher assurance I'm",
    "start": "514060",
    "end": "520120"
  },
  {
    "text": "gonna play devil's advocate for the next few minutes a little bit it's based on a",
    "start": "520120",
    "end": "526209"
  },
  {
    "text": "question that I sometimes get from people in security people who have a lot of experience in DevOps and it's a very",
    "start": "526209",
    "end": "533230"
  },
  {
    "text": "reasonable question what does the math and logic get me as a part to the answer",
    "start": "533230",
    "end": "541000"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "for the next few minutes I'm gonna assume a role of a DevOps engineer and I'm gonna write a reg X base scanner to",
    "start": "541000",
    "end": "549100"
  },
  {
    "text": "check whether my s3 bucket provides unrestricted access to to the bucket so",
    "start": "549100",
    "end": "555310"
  },
  {
    "text": "as I start writing my reg ex scanner here's an example policy principle star",
    "start": "555310",
    "end": "560620"
  },
  {
    "text": "action star this is a pattern that I will want to add to my reg ex scanner to check whether or not the policy allows",
    "start": "560620",
    "end": "567430"
  },
  {
    "text": "on prohibited read or write access to my bucket great this is where I start oh",
    "start": "567430",
    "end": "573690"
  },
  {
    "text": "here is a little variation on that it's Starkel and star my my reg ex scanner",
    "start": "575130",
    "end": "582610"
  },
  {
    "text": "needs to be updated I had only said action star okay you know seems simple I can add",
    "start": "582610",
    "end": "588500"
  },
  {
    "text": "that as 3 : star we made another variant",
    "start": "588500",
    "end": "593810"
  },
  {
    "text": "of that well this this is still provides unrestricted access it's still overly",
    "start": "593810",
    "end": "599330"
  },
  {
    "text": "permissive so we're gonna we will update our track let's make things interesting",
    "start": "599330",
    "end": "606970"
  },
  {
    "text": "here let's add a condition a source VPC now this makes it such that it does not",
    "start": "606970",
    "end": "614900"
  },
  {
    "text": "provide unrestricted access because it says only the requests that come from",
    "start": "614900",
    "end": "621320"
  },
  {
    "text": "the source VPC should be allowed so we need to update our reg X scanner and say",
    "start": "621320",
    "end": "626330"
  },
  {
    "text": "if the operator string equals is applied to the condition key source VPC then we",
    "start": "626330",
    "end": "632270"
  },
  {
    "text": "are good our check is fine what happens",
    "start": "632270",
    "end": "638540"
  },
  {
    "text": "if we update the operator in this part of string equals we're saying for all",
    "start": "638540",
    "end": "644180"
  },
  {
    "text": "values string equals we have to now go read into the documentation this starts",
    "start": "644180",
    "end": "649430"
  },
  {
    "text": "to get tricky we have to run a few tests and spoiler alert this is not sufficient",
    "start": "649430",
    "end": "654860"
  },
  {
    "text": "because it operates on a list value and if there is no source VPC set then it will match so now we have to update a",
    "start": "654860",
    "end": "662390"
  },
  {
    "text": "reg scanner to say string equals was fine but for all values is not policy",
    "start": "662390",
    "end": "671000"
  },
  {
    "text": "variables now we're starting to get you know the richness of the features of the",
    "start": "671000",
    "end": "678020"
  },
  {
    "text": "language is making this challenging to write a reg X scanner we have denies and",
    "start": "678020",
    "end": "685670"
  },
  {
    "text": "string like I am is a robust and flexible language making it challenging",
    "start": "685670",
    "end": "691700"
  },
  {
    "text": "to design a sound reg X based scanner and we were just looking at one condition key there are other things to",
    "start": "691700",
    "end": "698990"
  },
  {
    "text": "consider there are other condition keys there are other operators and then there",
    "start": "698990",
    "end": "704150"
  },
  {
    "text": "are other constructs not principle not action the moral of the story is we need",
    "start": "704150",
    "end": "710660"
  },
  {
    "text": "a more principled approach and nothing is more principled than logic",
    "start": "710660",
    "end": "718430"
  },
  {
    "text": "so this is modern symbolic logic which was introduced by an English",
    "start": "718430",
    "end": "723710"
  },
  {
    "text": "mathematician in 1847 and it's the foundation of all modern computing so",
    "start": "723710",
    "end": "733790"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "what is a symbolic logic formula it's built from truth values or constants true and false and variables that have",
    "start": "733790",
    "end": "741320"
  },
  {
    "text": "unknown truth values so here XY and z are variables where we don't know what their truth values are operators such as",
    "start": "741320",
    "end": "748400"
  },
  {
    "text": "and or and not so this formula here says not X or Y and Z which means either X is",
    "start": "748400",
    "end": "758060"
  },
  {
    "text": "false or y&z are true or both are true",
    "start": "758060",
    "end": "763210"
  },
  {
    "start": "763000",
    "end": "763000"
  },
  {
    "text": "so boolean satisfiability checks that if there exists an assignment to the",
    "start": "763210",
    "end": "768440"
  },
  {
    "text": "variables that makes the formula true satisfiable so sad solvers check",
    "start": "768440",
    "end": "773990"
  },
  {
    "text": "satisfiability if they generate an assignment to the variables that make the formula satisfiable so an assignment",
    "start": "773990",
    "end": "782330"
  },
  {
    "text": "such as X is equal to false Y is true Z's false is an assignment that a Sat solver would generate to say oh this",
    "start": "782330",
    "end": "789620"
  },
  {
    "text": "formula is satisfiable here's an example that says oh it is not satisfiable there",
    "start": "789620",
    "end": "797270"
  },
  {
    "text": "is no assignment to X that can ever make this formula true which means it's not",
    "start": "797270",
    "end": "802700"
  },
  {
    "text": "satisfied satisfiable so what's the theoretical importance of satisfiability",
    "start": "802700",
    "end": "808340"
  },
  {
    "start": "805000",
    "end": "805000"
  },
  {
    "text": "checking this was the first np-complete problem identified by Stephen cook in",
    "start": "808340",
    "end": "813910"
  },
  {
    "text": "1971 it means that there is no known algorithm to efficiently determine satisfiability of every possible boolean",
    "start": "813910",
    "end": "821150"
  },
  {
    "text": "formula so this is hard in theory but the good thing for us is we don't care",
    "start": "821150",
    "end": "826430"
  },
  {
    "text": "about every possible boolean formula so the word that's been done in the past",
    "start": "826430",
    "end": "831700"
  },
  {
    "text": "two decades we can leverage to make it efficient in practice so a",
    "start": "831700",
    "end": "837350"
  },
  {
    "start": "835000",
    "end": "835000"
  },
  {
    "text": "generalization of Sat is called SMT satisfiability modular theory and the",
    "start": "837350",
    "end": "843230"
  },
  {
    "text": "boolean variables are replaced by other theories linear and nonlinear arithmetic strings bit vector arrays list",
    "start": "843230",
    "end": "851610"
  },
  {
    "text": "and here you have x squared minus 4 which is satisfiable because if you plug",
    "start": "851610",
    "end": "856769"
  },
  {
    "text": "in the values of 2 or negative 2 for X the formula is true where of modern SMT",
    "start": "856769",
    "end": "864119"
  },
  {
    "start": "862000",
    "end": "862000"
  },
  {
    "text": "solvers been used in a variety of applications in microprocessor verifications aerospace applications",
    "start": "864119",
    "end": "871170"
  },
  {
    "text": "protocol verification and software verification a whole a whole set of applications where the key here is to",
    "start": "871170",
    "end": "879179"
  },
  {
    "text": "take the problem and turn it into an SMT formula so great but what is it that we",
    "start": "879179",
    "end": "887429"
  },
  {
    "text": "built we talked about policies and we talked about solvers and we said zelkova",
    "start": "887429",
    "end": "895800"
  },
  {
    "text": "is an engine and a solution that allows us to reason about access control so how do we go from something that looks like",
    "start": "895800",
    "end": "902730"
  },
  {
    "text": "policies and and goes into looking like solvers the one other aspect of this",
    "start": "902730",
    "end": "911129"
  },
  {
    "text": "thing is here's a policy it's a JSON document it has a set of statements with",
    "start": "911129",
    "end": "916619"
  },
  {
    "text": "allow deny statements and has actions on which resources can be performed so I'm",
    "start": "916619",
    "end": "925110"
  },
  {
    "text": "gonna make a claim that I am policies are as Li is a very natural fit to",
    "start": "925110",
    "end": "931379"
  },
  {
    "text": "logical formulas access is denied by default it is granted by allows",
    "start": "931379",
    "end": "938100"
  },
  {
    "text": "statements and then revoked by explicit deny statements this is a very logical",
    "start": "938100",
    "end": "943529"
  },
  {
    "text": "thing so why do we need a symbolic representation this is the if we wanted",
    "start": "943529",
    "end": "950069"
  },
  {
    "text": "to explicitly enumerate or fuzz or test or pentest all the possible requests",
    "start": "950069",
    "end": "956850"
  },
  {
    "text": "context this is a very very lower bound on the problem space I'm saying what are",
    "start": "956850",
    "end": "963209"
  },
  {
    "text": "the possible set of principles 10 to the 12 AWS accounts now this doesn't even",
    "start": "963209",
    "end": "968429"
  },
  {
    "text": "take into account federated principles or anonymous users about 5000 actions 10",
    "start": "968429",
    "end": "975269"
  },
  {
    "text": "to the 13 resources and here's the kicker infinite number of condition keys",
    "start": "975269",
    "end": "980850"
  },
  {
    "text": "key values so this is not something very kind just fuzz or test and get assurance that",
    "start": "980850",
    "end": "988590"
  },
  {
    "text": "our policies are doing what it's doing so if we take our imagination and say oh",
    "start": "988590",
    "end": "994920"
  },
  {
    "text": "this set represents this infinite request context that we have give in a",
    "start": "994920",
    "end": "1001280"
  },
  {
    "text": "request context it says a hug before this principal action resource is action",
    "start": "1001280",
    "end": "1006650"
  },
  {
    "text": "allowed or for this particular principal action resource access is denied and",
    "start": "1006650",
    "end": "1013150"
  },
  {
    "text": "what we want is we want to ensure that the things that we want allowed are",
    "start": "1013150",
    "end": "1019790"
  },
  {
    "text": "indeed the only things that are allowed so the space of request contest the context is partitioned even in the",
    "start": "1019790",
    "end": "1026990"
  },
  {
    "text": "infinite space partition and things that we want allowed and partitioned into two sets of things we don't want allowed and",
    "start": "1026990",
    "end": "1033110"
  },
  {
    "text": "this is where zelkova comes in Sarkoja says I'm gonna create these boundaries",
    "start": "1033110",
    "end": "1038839"
  },
  {
    "text": "these guardrails this wall that says only the things that you want in the set",
    "start": "1038840",
    "end": "1045860"
  },
  {
    "text": "of context that you are allowed are indeed what's allowed without enumerated",
    "start": "1045860",
    "end": "1051470"
  },
  {
    "text": "the set of request context that you want allowed so coming back so we've we've",
    "start": "1051470",
    "end": "1057260"
  },
  {
    "text": "decided okay it's hard to an almost intractable impossible to evaluate all",
    "start": "1057260",
    "end": "1064280"
  },
  {
    "text": "possible request context so we need this logical representation so how do we encode these policies as logical",
    "start": "1064280",
    "end": "1070970"
  },
  {
    "text": "formulas actually going back here's these here's a policy with to allow",
    "start": "1070970",
    "end": "1077930"
  },
  {
    "text": "statements here's one principal has the s3 get star on a particular resource another principal has also s3 gets star",
    "start": "1077930",
    "end": "1087020"
  },
  {
    "text": "but on an additional resource called secret dot PDF this is what it looks",
    "start": "1087020",
    "end": "1094220"
  },
  {
    "text": "like when it's encoded as logic if you read it Oh principal is this and action",
    "start": "1094220",
    "end": "1101690"
  },
  {
    "text": "is s3 get star on resource manual dot PDF or if my principal is a w7s and my",
    "start": "1101690",
    "end": "1108080"
  },
  {
    "text": "action is s3 get star and resource is manual dot PDF or secret dot PDF then",
    "start": "1108080",
    "end": "1113810"
  },
  {
    "text": "access is allowed so how would I check a governance rule",
    "start": "1113810",
    "end": "1119860"
  },
  {
    "start": "1118000",
    "end": "1118000"
  },
  {
    "text": "or list a valid governance rule is only as a specific principle has s3 get star",
    "start": "1119860",
    "end": "1125500"
  },
  {
    "text": "access to secret dot PDF Zell Cola will translate this into logic and say if the",
    "start": "1125500",
    "end": "1132160"
  },
  {
    "text": "action is s3 get star and resources secret dot PDF then principle is a",
    "start": "1132160",
    "end": "1137170"
  },
  {
    "text": "double your sevens given a policy encoded in an SMT formula and the check",
    "start": "1137170",
    "end": "1145360"
  },
  {
    "text": "as a logical formula is itself the Cova uses an SMT solver underneath it to say",
    "start": "1145360",
    "end": "1151720"
  },
  {
    "text": "your policy is compliant with your governance rule what happens if we",
    "start": "1151720",
    "end": "1157630"
  },
  {
    "text": "change it we change the principle in the second allowed statement to not principle the color will come back and",
    "start": "1157630",
    "end": "1165850"
  },
  {
    "text": "say not compliant and if we look at the second expression in the policy it says",
    "start": "1165850",
    "end": "1171280"
  },
  {
    "text": "principal which is not a w7s has access to secret dot PDF which means pretty",
    "start": "1171280",
    "end": "1178720"
  },
  {
    "text": "much everybody in the universe has access to secret dot PDF so how do we",
    "start": "1178720",
    "end": "1185200"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "integrate it with services one possible workflow is I talked about automated",
    "start": "1185200",
    "end": "1191679"
  },
  {
    "text": "threat modeling check threat mod threat checking you have a config role it fires",
    "start": "1191679",
    "end": "1197170"
  },
  {
    "text": "based on the change to the resource you get an SNS notification it it goes to a",
    "start": "1197170",
    "end": "1203530"
  },
  {
    "text": "lambda which invokes another lambda which is the zelkova lambda and you can check a holistic view of your I am",
    "start": "1203530",
    "end": "1210040"
  },
  {
    "text": "policies your resource policies as 3 SNS sq as kms IOT device defender policies",
    "start": "1210040",
    "end": "1218080"
  },
  {
    "text": "and get a holistic view of access control who is using this we have",
    "start": "1218080",
    "end": "1224830"
  },
  {
    "text": "customers from a variety of verticals from financial services we have Bridgewater's drank dan and Greg are",
    "start": "1224830",
    "end": "1231400"
  },
  {
    "text": "gonna talk about their use case from technology and media company you saw the quote from ville Bengston from Netflix",
    "start": "1231400",
    "end": "1237580"
  },
  {
    "text": "and publishing so it applies everywhere",
    "start": "1237580",
    "end": "1243179"
  },
  {
    "text": "if some people might have seen this wired article about how provable",
    "start": "1244440",
    "end": "1249640"
  },
  {
    "text": "securely is changing the space of what is possible and I'm not gonna go into this",
    "start": "1249640",
    "end": "1257350"
  },
  {
    "text": "because this is where I'm gonna have handed off to Greg and he's gonna be tell you about how's our covers was has",
    "start": "1257350",
    "end": "1264130"
  },
  {
    "text": "been modeled to meet their stringent data privacy and security and compliance requirements so hello everyone so my",
    "start": "1264130",
    "end": "1277690"
  },
  {
    "text": "name is Greg fresca door I'm a security architect at Bridgewater I'm here with my co-conspirator Dan Peebles we're",
    "start": "1277690",
    "end": "1284170"
  },
  {
    "text": "going to talk today a little bit about our experiences with zelkova as neha was",
    "start": "1284170",
    "end": "1289480"
  },
  {
    "text": "saying Bridgewater is an early adapter of zelkova and we're gonna talk today",
    "start": "1289480",
    "end": "1294970"
  },
  {
    "text": "about how that's going but specifically what we're going to talk about is a little bit about like first who is",
    "start": "1294970",
    "end": "1301960"
  },
  {
    "start": "1299000",
    "end": "1299000"
  },
  {
    "text": "Bridgewater and why are we up here talking about Amazon technology and then",
    "start": "1301960",
    "end": "1306970"
  },
  {
    "text": "we're gonna talk a bit about what we wanted to get out of zelkova and you know what we actually were able to get",
    "start": "1306970",
    "end": "1313300"
  },
  {
    "text": "and how that's going and since this is like a 400 level talk we're gonna have",
    "start": "1313300",
    "end": "1318520"
  },
  {
    "text": "to show a little bit of code so we're gonna talk about how to call zelkova programmatically and then we're gonna",
    "start": "1318520",
    "end": "1325000"
  },
  {
    "text": "have to cover two use cases where we can show how to use ELQ over the bill they're kind of like a fancy badge and",
    "start": "1325000",
    "end": "1332140"
  },
  {
    "text": "perimeter checker Dan's gonna do that and then I'm going to talk a little bit later about how to use it to stop",
    "start": "1332140",
    "end": "1338050"
  },
  {
    "text": "exfiltration checking there are three points though that I'd like to get out right in the beginning the first thing",
    "start": "1338050",
    "end": "1344920"
  },
  {
    "text": "is that for as far as Bridgewater is concerned zelkova is the first system that we've been able to find that's been",
    "start": "1344920",
    "end": "1351610"
  },
  {
    "text": "able to give us a formal and methodical way to analyze AWS policies it's not",
    "start": "1351610",
    "end": "1356680"
  },
  {
    "text": "like doing pattern checking it's not doing like up the policy simulator so Cova has a model of how policies are",
    "start": "1356680",
    "end": "1363010"
  },
  {
    "text": "supposed to work and it's solving them and what that allows us to do is ask specific questions about the policies so",
    "start": "1363010",
    "end": "1369790"
  },
  {
    "text": "we can ask things like is this particular principle is it allowed to assume role to something so we can ask",
    "start": "1369790",
    "end": "1375640"
  },
  {
    "text": "specific questions my third point is that zelkova allows us to make hypothetical policies and ask questions",
    "start": "1375640",
    "end": "1382690"
  },
  {
    "text": "about them not ones that are deployed in the AWS but hypothetical ones that were about to deploy so that we're not",
    "start": "1382690",
    "end": "1388870"
  },
  {
    "text": "going to save deploy a vulnerability and we could stop that early okay but before",
    "start": "1388870",
    "end": "1394390"
  },
  {
    "start": "1393000",
    "end": "1393000"
  },
  {
    "text": "we get to that a little bit about Bridgewater so um Bridgewater is the world's largest hedge fund were based in",
    "start": "1394390",
    "end": "1401080"
  },
  {
    "text": "Westport Connecticut and we have about 160 billion dollars of assets that are",
    "start": "1401080",
    "end": "1407049"
  },
  {
    "text": "under management so we're a financial services company we have our clients are 350 of the world's institutional",
    "start": "1407049",
    "end": "1415240"
  },
  {
    "text": "investors they're mostly things like pension funds foundations sovereign wealth funds that invest money with us",
    "start": "1415240",
    "end": "1422679"
  },
  {
    "text": "on behalf of a much larger number of beneficiaries now in order to make all",
    "start": "1422679",
    "end": "1428530"
  },
  {
    "text": "those beneficiaries get given good returns we build models and algorithms",
    "start": "1428530",
    "end": "1435130"
  },
  {
    "text": "that try to model the way the financial system works in the way the global economy works and in order to do that we",
    "start": "1435130",
    "end": "1442840"
  },
  {
    "text": "use a lot of AWS we use a whole fleet of AWS accounts fleet is a nice vague word",
    "start": "1442840",
    "end": "1450220"
  },
  {
    "text": "that my boss maybe use the mask how many accounts to actually are these aren't individual accounts these are system",
    "start": "1450220",
    "end": "1456669"
  },
  {
    "text": "accounts they're used for security partitioning we have a lot of them it would be far would be very impractical",
    "start": "1456669",
    "end": "1463480"
  },
  {
    "text": "for us to try to go and audits a policies or analyze policies in each one",
    "start": "1463480",
    "end": "1469000"
  },
  {
    "text": "of these accounts individually and that's one of the reasons that AWS is going to help so it's alko it's gonna help so what we want like a lot of",
    "start": "1469000",
    "end": "1476380"
  },
  {
    "start": "1472000",
    "end": "1472000"
  },
  {
    "text": "organizations what we're looking to get is the ability to protect the data that we have we want those algorithms and",
    "start": "1476380",
    "end": "1482740"
  },
  {
    "text": "those models we want them kept confidential for our clients we want their personal data kept confidential we",
    "start": "1482740",
    "end": "1488650"
  },
  {
    "text": "don't want to signal the things that we're doing that would allow competitors to front run our trades and in general",
    "start": "1488650",
    "end": "1495730"
  },
  {
    "text": "right what we want is to just be able to keep access control over the data that we have in order to do that we build",
    "start": "1495730",
    "end": "1503559"
  },
  {
    "text": "security controls into all the systems that we deploy into all those accounts and those security controls what we're",
    "start": "1503559",
    "end": "1511059"
  },
  {
    "text": "trying to find is first of all some of those security controls involve I am policies and what we want is to be able",
    "start": "1511059",
    "end": "1518140"
  },
  {
    "text": "to determine whether those I am policies are doing what we want them to do whether the principles that were",
    "start": "1518140",
    "end": "1524830"
  },
  {
    "text": "allowing in the policies are actually the only ones are allowed to take certain actions whether you know certain",
    "start": "1524830",
    "end": "1532450"
  },
  {
    "text": "resources are the only resources that were allowed to access another thing that we want to get is we want to do",
    "start": "1532450",
    "end": "1539200"
  },
  {
    "text": "that we want to verify our policies are working way we want without like unnecessary secondary effects so we",
    "start": "1539200",
    "end": "1545200"
  },
  {
    "text": "don't want to have something happen like we would go and deploy a policy and all of a sudden you would be like a VCC",
    "start": "1545200",
    "end": "1551440"
  },
  {
    "text": "endpoint policy and all of a sudden every single system in the company is cut off from s3 because we made like an",
    "start": "1551440",
    "end": "1557410"
  },
  {
    "text": "error so we don't want to have act that kind of thing happen another thing we'd like is we'd like to be able to analyze",
    "start": "1557410",
    "end": "1563140"
  },
  {
    "text": "our policies in a nice methodical way we have this fleet of accounts we want something where we can apply a certain",
    "start": "1563140",
    "end": "1569410"
  },
  {
    "text": "amount of automation and methodology and say DevOps style so that we can check our accounts and our policies and",
    "start": "1569410",
    "end": "1576040"
  },
  {
    "text": "permissions in a basically of a methodical way and finally we want to do",
    "start": "1576040",
    "end": "1581620"
  },
  {
    "text": "this without a lot of drama we don't want things like some type of scanner",
    "start": "1581620",
    "end": "1586840"
  },
  {
    "text": "that's going to generate a lot of false positives that's gonna page us in the middle of the night and we don't want",
    "start": "1586840",
    "end": "1592570"
  },
  {
    "text": "pager duty or anything like that so we wanted we wanted basically to do it without without a lot of excess false",
    "start": "1592570",
    "end": "1598690"
  },
  {
    "text": "positives or I have this quote up here from our chief security architect Dan Peebles so you're gonna hear from a few",
    "start": "1598690",
    "end": "1604600"
  },
  {
    "text": "minutes and basically what he's saying there is what we want is we want a tool we're gonna run this tool against",
    "start": "1604600",
    "end": "1611680"
  },
  {
    "text": "policies it's going to tell us where we messed up and then we'll fix it that's what we want",
    "start": "1611680",
    "end": "1617130"
  },
  {
    "text": "all right so how does all Cova help us well so Cova allows us to do exactly",
    "start": "1617130",
    "end": "1622780"
  },
  {
    "text": "that we run zelkova against policies we show you a few minutes a couple constraints",
    "start": "1622780",
    "end": "1628360"
  },
  {
    "text": "we run against policies with constraints it tells us where we messed up it tells",
    "start": "1628360",
    "end": "1633640"
  },
  {
    "text": "us where we messed up kind of like in four different ways the first thing is it allows us to detect to certain ways",
    "start": "1633640",
    "end": "1640090"
  },
  {
    "text": "the policies are misconfigured so for example if you take a policy and like accidentally put a star somewhere and",
    "start": "1640090",
    "end": "1646420"
  },
  {
    "text": "allow you know world access so covo will catch that kind of condition and we're going to look at that",
    "start": "1646420",
    "end": "1651770"
  },
  {
    "text": "use cases another thing in cell Cova has it's really cool is when it matches something it identifies what about the",
    "start": "1651770",
    "end": "1659150"
  },
  {
    "text": "policy is being allowed so we're gonna see in a few minutes this thing called a model that it returns it tells us",
    "start": "1659150",
    "end": "1664700"
  },
  {
    "text": "exactly the particular parts of a policy that are going to be allowed or denied access and that allows us to find like",
    "start": "1664700",
    "end": "1670820"
  },
  {
    "text": "if we need to fix something it tells us a little bit about where to go look to fix something another thing it allows us to do is we",
    "start": "1670820",
    "end": "1677090"
  },
  {
    "text": "can check configuration changes before we deploy them because zelkova works on",
    "start": "1677090",
    "end": "1682460"
  },
  {
    "text": "the policies that would give it not just the policies that are inside they're deployed and inside an AWS account we",
    "start": "1682460",
    "end": "1688670"
  },
  {
    "text": "can use it to check a policy before we're going to deploy it in the AWS and that's going to prevent us from",
    "start": "1688670",
    "end": "1694160"
  },
  {
    "text": "deploying something that would say you know a deploy a vulnerability and finally we allows us to go out and audit",
    "start": "1694160",
    "end": "1702350"
  },
  {
    "text": "policies across all of our accounts we can go to the fleet of accounts you know assume role when the accounts collect up",
    "start": "1702350",
    "end": "1707780"
  },
  {
    "text": "all the policies and then added them in mass and in one big swoop okay so before",
    "start": "1707780",
    "end": "1715490"
  },
  {
    "text": "we get to that I want to look through a little bit about how Bridgewater uses zelkova where it uses it we have two",
    "start": "1715490",
    "end": "1722060"
  },
  {
    "text": "workflows one I'm gonna call good and then a little one later called better this is what the good workflow looks",
    "start": "1722060",
    "end": "1727640"
  },
  {
    "text": "like the purple box there that's where we actually call zelkova the way the good workflow works this is",
    "start": "1727640",
    "end": "1733880"
  },
  {
    "text": "kind of like a an assessment type workflow the way it works is in the top",
    "start": "1733880",
    "end": "1739400"
  },
  {
    "text": "center there whenever we're going to deploy a system we have a bunch of security architects - security",
    "start": "1739400",
    "end": "1744470"
  },
  {
    "text": "architects build threat models against the systems that we're going to deploy the the threat model identifies certain",
    "start": "1744470",
    "end": "1751370"
  },
  {
    "text": "helps us identify certain risks that this particular system is going to have we designed security controls that are",
    "start": "1751370",
    "end": "1757910"
  },
  {
    "text": "gonna mitigate those risks some of those security controls or IEM policies and as a result of that we write zelkova",
    "start": "1757910",
    "end": "1764600"
  },
  {
    "text": "constraints that check whether those iam policies are doing what we want so what we have basically is a threat model",
    "start": "1764600",
    "end": "1770570"
  },
  {
    "text": "that's ultimately feeding zelkova constraints into a system that's gonna call zelkova reading from left to right",
    "start": "1770570",
    "end": "1777920"
  },
  {
    "text": "what the good workflow does is every time that we actually apply or deploy a",
    "start": "1777920",
    "end": "1783230"
  },
  {
    "text": "policy into AWS we have some rigors that trigger like events so we have like AWS config rules or cloud",
    "start": "1783230",
    "end": "1790400"
  },
  {
    "text": "watch events and what they do is they tell us hey something changed in AWS better grab that thing and run it",
    "start": "1790400",
    "end": "1795980"
  },
  {
    "text": "against the zelkova rules and see if we found any particular defects so in this workflow every time something gets",
    "start": "1795980",
    "end": "1801440"
  },
  {
    "text": "deployed a policy gets deployed AWS we check it with the body of zelkova",
    "start": "1801440",
    "end": "1806720"
  },
  {
    "text": "constraints that came from threat modeling and if any vulnerabilities were found then what happens is those",
    "start": "1806720",
    "end": "1813080"
  },
  {
    "text": "vulnerabilities go into a remediation tracking system and eventually they get fixed inside of AWS the reason this is",
    "start": "1813080",
    "end": "1819830"
  },
  {
    "text": "called good I say good is because everything that we deploy can get checked this way the problem with it is",
    "start": "1819830",
    "end": "1825890"
  },
  {
    "text": "that what could be made better is that something can get deployed and there's a",
    "start": "1825890",
    "end": "1830930"
  },
  {
    "text": "window of opportunity for the vulnerability to actually be in production so that's what the better",
    "start": "1830930",
    "end": "1836180"
  },
  {
    "text": "workflow is for so what the better workflow is for is that this allows us to stop a deployment before it's",
    "start": "1836180",
    "end": "1843350"
  },
  {
    "text": "actually gone into production what we're doing here it's the same threat modeling and constraints and checking with",
    "start": "1843350",
    "end": "1848960"
  },
  {
    "text": "zelkova that's all the same but what's happening now is instead of instead of",
    "start": "1848960",
    "end": "1855650"
  },
  {
    "text": "checking the policy with cell covo after we deploy it here it becomes part of a",
    "start": "1855650",
    "end": "1861080"
  },
  {
    "text": "deployment plan and every deployment plan deployment plan is checked with",
    "start": "1861080",
    "end": "1866540"
  },
  {
    "text": "cell Cova before we actually apply it so now what happens is if a policy has a",
    "start": "1866540",
    "end": "1871640"
  },
  {
    "text": "defect that's picked up by zelkova instead of being applied in AWS it goes into a vulnerability tracking system",
    "start": "1871640",
    "end": "1877970"
  },
  {
    "text": "where it has to be remediated first and the things that are actually passive cellco vacek's",
    "start": "1877970",
    "end": "1883460"
  },
  {
    "text": "those the ones that get deployed with a to AWS okay now so this like I was",
    "start": "1883460",
    "end": "1890390"
  },
  {
    "start": "1888000",
    "end": "1888000"
  },
  {
    "text": "saying it's a 400 level talk we've got a look a little bit about how to call zelkova so Cova has a restful interface",
    "start": "1890390",
    "end": "1896620"
  },
  {
    "text": "eventually it will have a restful api i say eventually because i've been cautioned to talk about how everything",
    "start": "1896620",
    "end": "1902990"
  },
  {
    "text": "is tentative and subject to change and so i'm just going to say that it will eventually have a restful api it has",
    "start": "1902990",
    "end": "1909440"
  },
  {
    "text": "language bindings that allow us to you know more easily call that restful api",
    "start": "1909440",
    "end": "1915350"
  },
  {
    "text": "and so this is a sketch of what I say like a Botto interface to zelkova would",
    "start": "1915350",
    "end": "1922160"
  },
  {
    "text": "look like now so colas actually it's actually active so we in bridgewater we call it everyday",
    "start": "1922160",
    "end": "1927530"
  },
  {
    "text": "but just be aware that this particular method check policy is not what it will actually probably look like when it when",
    "start": "1927530",
    "end": "1934010"
  },
  {
    "text": "it goes into production okay so parameters to this policy the",
    "start": "1934010",
    "end": "1939770"
  },
  {
    "text": "way we call zelkova is we specify these common three parameters a policy and effect and some constraints everyone's",
    "start": "1939770",
    "end": "1947060"
  },
  {
    "text": "probably recognizes the policy the policy is just the json representation of an ADA policy when I say policy I",
    "start": "1947060",
    "end": "1954680"
  },
  {
    "text": "don't mean just an identity based policy this could be a resource based policy or trust based policy so it's any one of",
    "start": "1954680",
    "end": "1960740"
  },
  {
    "text": "the different types of policies has effects and principles you've probably ever one already recognizes it in the",
    "start": "1960740",
    "end": "1966740"
  },
  {
    "text": "affect in the effect parameter the effect parameter is a token that tells",
    "start": "1966740",
    "end": "1971900"
  },
  {
    "text": "it so Cova what type of query were asking it to perform at this point up there I say allow something there are",
    "start": "1971900",
    "end": "1978260"
  },
  {
    "text": "other types of queries you can I say allows world read ability allows world write ability but today we're only",
    "start": "1978260",
    "end": "1984680"
  },
  {
    "text": "asking cell Cova because examples we're only asking it whether something is allowed so what is it that's something",
    "start": "1984680",
    "end": "1993020"
  },
  {
    "text": "that's allowed that something that's allowed is the constraints so the constraints in the in this call are a",
    "start": "1993020",
    "end": "1999500"
  },
  {
    "text": "another JSON document that lists a set of its kind like a fragment of a policy",
    "start": "1999500",
    "end": "2005080"
  },
  {
    "text": "it lists some actions or principles or resources and what we're asking zelkova",
    "start": "2005080",
    "end": "2010300"
  },
  {
    "text": "here is hazel Cova are any of those constraints permitted by the policy",
    "start": "2010300",
    "end": "2015880"
  },
  {
    "text": "that's up there and so that's how that's how we ask cell Cova and what so Cova is going to do is when we ask it does is",
    "start": "2015880",
    "end": "2022420"
  },
  {
    "text": "that thing allowed so Cova is going to return us a boolean value that says true",
    "start": "2022420",
    "end": "2028720"
  },
  {
    "text": "or false that can sum something in the constraints is allowed by the by the",
    "start": "2028720",
    "end": "2034300"
  },
  {
    "text": "policy so in this particular case right we have a policy that allows s3 get objects and lists buckets and then we",
    "start": "2034300",
    "end": "2041770"
  },
  {
    "text": "have a constraint that's looking for hey is are there any lists all things or put our put or get object Ackles allowed so",
    "start": "2041770",
    "end": "2049870"
  },
  {
    "text": "what do you think well that everyone look at it what would zelkova true or false or any of the constraints",
    "start": "2049870",
    "end": "2055148"
  },
  {
    "text": "allowed by the policy so in this",
    "start": "2055149",
    "end": "2061090"
  },
  {
    "text": "particular case right cell Kovas gonna return false and it's pretty obvious why it returns false right if you look at",
    "start": "2061090",
    "end": "2066128"
  },
  {
    "text": "like list all star that's in the constraints there's nothing up there in the action that looks like list all star",
    "start": "2066129",
    "end": "2071830"
  },
  {
    "text": "soso Cova just gives us a false all right but of course that means that zelkova sometimes returns true but when",
    "start": "2071830",
    "end": "2079358"
  },
  {
    "text": "it returns true it gives us kind of an extra benefit right it's going to give us something back with the true",
    "start": "2079359",
    "end": "2085510"
  },
  {
    "text": "that's called a model the model is a little example it's kind of like a little proof by example of a case where",
    "start": "2085510",
    "end": "2092700"
  },
  {
    "text": "not only is something allowed but here's an example of one of the things that is allowed and that's that thing that",
    "start": "2092700",
    "end": "2098200"
  },
  {
    "text": "allows us to tech parts of a policy that we want to change so here's another a",
    "start": "2098200",
    "end": "2103590"
  },
  {
    "text": "double US policy or in this case we're looking at we have we're out looking for",
    "start": "2103590",
    "end": "2109240"
  },
  {
    "text": "action of s treeless star and get star we have some constraints that are asking is list all star um is it something",
    "start": "2109240",
    "end": "2117070"
  },
  {
    "text": "that's permitted and in this particular case we asked it and zelkova returns true yes and in fact if you look it down",
    "start": "2117070",
    "end": "2124660"
  },
  {
    "text": "at the at the at the actions right we can see that list all star matches up with lists star and so Cova also tells",
    "start": "2124660",
    "end": "2131470"
  },
  {
    "text": "us for example what bucket the the particular the particular action was",
    "start": "2131470",
    "end": "2136840"
  },
  {
    "text": "allowed on something that's kind of curious here is that zelkova returns",
    "start": "2136840",
    "end": "2142119"
  },
  {
    "text": "inside of the green statements green action statement there it says s3 list",
    "start": "2142119",
    "end": "2147130"
  },
  {
    "text": "all there's no actual action right in AWS that's called list all what's",
    "start": "2147130",
    "end": "2153609"
  },
  {
    "text": "happening here is that list all is the solution that the SMT solver gives us",
    "start": "2153609",
    "end": "2159330"
  },
  {
    "text": "zelkova knows about the inventory of actions that are inside of AWS but it",
    "start": "2159330",
    "end": "2165850"
  },
  {
    "text": "returns to us a solution in terms of the policy that we asked about we're asking",
    "start": "2165850",
    "end": "2171850"
  },
  {
    "text": "zelkova are any of these constraints allowed by that policy and in this particular case the match the solution",
    "start": "2171850",
    "end": "2179140"
  },
  {
    "text": "by the SMT solver is list all and what this means is that whenever we call zelkova we're always going to get",
    "start": "2179140",
    "end": "2185590"
  },
  {
    "text": "consistent result regardless of what's going on inside of AWS so for example in AWS if they",
    "start": "2185590",
    "end": "2191440"
  },
  {
    "text": "increase the inventory of actions this query is always going to return to us the same results okay so that gives us",
    "start": "2191440",
    "end": "2200289"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "enough basic cell Cova to be able to talk about two use cases in the first use case dan is going to build us",
    "start": "2200289",
    "end": "2206349"
  },
  {
    "text": "basically I badge for a bucket and a perimeter checker and I'll be back in a little while to talk about musi cell",
    "start": "2206349",
    "end": "2213009"
  },
  {
    "text": "Cova to do to prevent data exfiltration this is Dan Peebles thank you all right",
    "start": "2213009",
    "end": "2223180"
  },
  {
    "text": "thanks Greg yeah I'm gonna talk a bit about about this perimeter checker we",
    "start": "2223180",
    "end": "2229319"
  },
  {
    "text": "click quick thing about myself I'm a softer developer have been about six years of Bridgewater",
    "start": "2229319",
    "end": "2234609"
  },
  {
    "text": "I've actually been longing for zelkova for long a lot longer than its existed I think I've been moaning at our at our",
    "start": "2234609",
    "end": "2242319"
  },
  {
    "text": "account team that it wasn't there until it appeared and then I was very happy and I think became the first first",
    "start": "2242319",
    "end": "2247329"
  },
  {
    "text": "actual external customer for for the Arg tooling so what I'm gonna do here is to",
    "start": "2247329",
    "end": "2253690"
  },
  {
    "text": "talk about the the perimeter scanner which is this looks different from which",
    "start": "2253690",
    "end": "2259150"
  },
  {
    "text": "is in some ways a generalization and in other ways a refinement of these s3",
    "start": "2259150",
    "end": "2265150"
  },
  {
    "text": "badges that they have on the console today and so the idea here is that I am",
    "start": "2265150",
    "end": "2273250"
  },
  {
    "text": "rules everything in AWS it's your your entire account is controlled by my own",
    "start": "2273250",
    "end": "2279309"
  },
  {
    "text": "policies sometimes more visible than others s3 is one example that but there are many others sq ssns your kms keys",
    "start": "2279309",
    "end": "2286420"
  },
  {
    "text": "they all have policies attached to them your principles have policies attached to them we're mostly going to focus on",
    "start": "2286420",
    "end": "2292029"
  },
  {
    "text": "resources here and talk about sort of the getting badges in more places and so",
    "start": "2292029",
    "end": "2298200"
  },
  {
    "text": "what we're going to talk about as a quick example is lambda and kms the thing generalizes to pretty much",
    "start": "2298200",
    "end": "2304119"
  },
  {
    "start": "2299000",
    "end": "2299000"
  },
  {
    "text": "anything that has a policy and there are many many resources to do and the",
    "start": "2304119",
    "end": "2309609"
  },
  {
    "text": "question we want to ask here is can any outsider access our data and the the key distinction here from the the badges on",
    "start": "2309609",
    "end": "2316720"
  },
  {
    "text": "the s3 buckets that are live on the console is the badges are basically saying can all",
    "start": "2316720",
    "end": "2322000"
  },
  {
    "text": "outsiders access her data and we want to talk about any outsiders now any outsiders is in many ways for a sort of",
    "start": "2322000",
    "end": "2328420"
  },
  {
    "text": "security for a conscious organization like Bridgewater and probably many others we care about a lot of insider",
    "start": "2328420",
    "end": "2333549"
  },
  {
    "text": "threats and so our own employees know more about our resources and we also",
    "start": "2333549",
    "end": "2339130"
  },
  {
    "text": "care about any single one of them so if if Gregg turns evil one day for example and he opens up one of our resources to",
    "start": "2339130",
    "end": "2346299"
  },
  {
    "text": "his home AWS account that's just as concerning to us as if it's open to the world now it's it's a little more tricky",
    "start": "2346299",
    "end": "2352720"
  },
  {
    "text": "to to talk about any versus all and and and one of the reasons why this is sort of a a complicated problem is like",
    "start": "2352720",
    "end": "2360339"
  },
  {
    "text": "actually defining what outside means because we want we don't want to say any outsider or any person we want to say",
    "start": "2360339",
    "end": "2366160"
  },
  {
    "text": "any outsider and the definition of outsider will vary from people to people and so one customer might might consider",
    "start": "2366160",
    "end": "2371170"
  },
  {
    "text": "outsiders to be certain set of accounts or if anyone outside that certain certain set of accounts others might and",
    "start": "2371170",
    "end": "2376240"
  },
  {
    "text": "might have other definitions and I'll go more into those definitions later and so this this tool the perimeter checker is",
    "start": "2376240",
    "end": "2381700"
  },
  {
    "text": "not is not just asking can anyone do it but also once we want to know who can do",
    "start": "2381700",
    "end": "2386890"
  },
  {
    "text": "it and what can they do and what can they do it to and so we want to consider the various access patterns there are a",
    "start": "2386890",
    "end": "2392200"
  },
  {
    "text": "lot of different access patterns for AWS resources a lot of them are authenticated but some of them aren't s3",
    "start": "2392200",
    "end": "2398770"
  },
  {
    "text": "as the most obvious example of that API gateways and things can be authenticated a lot of times it happens through",
    "start": "2398770",
    "end": "2406089"
  },
  {
    "text": "networking controls so a lot of things can have a source PPC or source PPC e condition key and we want to catch those",
    "start": "2406089",
    "end": "2412539"
  },
  {
    "text": "because those things get used a lot at Bridgewater and probably other places slider lock checks a lot of a lot of",
    "start": "2412539",
    "end": "2418420"
  },
  {
    "text": "companies do that and a large category that I'll go more into detail about is other AWS services operating on our",
    "start": "2418420",
    "end": "2425230"
  },
  {
    "text": "behalf which has a whole interesting layer of considerations that might not",
    "start": "2425230",
    "end": "2431410"
  },
  {
    "text": "be obvious and and as we've said a few times in Greg and may have said we want",
    "start": "2431410",
    "end": "2438010"
  },
  {
    "text": "excellent signal-to-noise ratio like it's all too easy to write the the pattern-based checker that is sort of",
    "start": "2438010",
    "end": "2444670"
  },
  {
    "text": "conservative and says well you know I'll just call out anything that that I I can't understand but then your your",
    "start": "2444670",
    "end": "2450940"
  },
  {
    "text": "operations people will stop paying attention to your tool because they they say well this thing fired off 500 false positives and most",
    "start": "2450940",
    "end": "2457120"
  },
  {
    "text": "of them are stupid I'm just gonna stop looking so we want we want good signal-to-noise ratio and we also don't want to lose sleep over like a clever",
    "start": "2457120",
    "end": "2464400"
  },
  {
    "text": "adversarial attacker coming up with some policy that would evade the patterns that we've that we've developed because",
    "start": "2464400",
    "end": "2470140"
  },
  {
    "text": "as I said we're concerned about insiders so so what we have here as our example",
    "start": "2470140",
    "end": "2477460"
  },
  {
    "start": "2475000",
    "end": "2475000"
  },
  {
    "text": "is a couple policies there's a KMS key policy and a lambda invoke policy the",
    "start": "2477460",
    "end": "2482470"
  },
  {
    "text": "lamda invoke policy is usually not super visible on the console it's available 3 P is and SDKs I think the console shows",
    "start": "2482470",
    "end": "2489910"
  },
  {
    "text": "it as like a pretty graph of things boxes connecting to one another but it's",
    "start": "2489910",
    "end": "2495010"
  },
  {
    "text": "the same thing it's behind scenes it's non policy it just as I said everything is governed by hiring policies almost",
    "start": "2495010",
    "end": "2500050"
  },
  {
    "text": "everything kms key policies you can find those on the kms console they sort of combine with grants and interesting ways",
    "start": "2500050",
    "end": "2506110"
  },
  {
    "text": "which I won't go into here but add some complication there but I'm gonna sort of",
    "start": "2506110",
    "end": "2512440"
  },
  {
    "text": "walk through what it means to to scan the perimeter of these two policies and so the perimeter we can imagine that",
    "start": "2512440",
    "end": "2518500"
  },
  {
    "text": "these two policies live in an account called three four five I'm not gonna go with full twelve digits for obvious reasons and they have some a couple of",
    "start": "2518500",
    "end": "2528160"
  },
  {
    "text": "allow statements each and I want to phrase a question to zelkova to ask can",
    "start": "2528160",
    "end": "2533740"
  },
  {
    "text": "an outsider access these or do things to them so going back to the constraints",
    "start": "2533740",
    "end": "2539100"
  },
  {
    "start": "2539000",
    "end": "2539000"
  },
  {
    "text": "the constraints thing that Greg showed us this is the constraint I'm gonna hand",
    "start": "2539100",
    "end": "2544210"
  },
  {
    "text": "sell Koba along with the policies which I'm gonna leave out briefly here and say something like not principals so anyone",
    "start": "2544210",
    "end": "2550660"
  },
  {
    "text": "outside of account three four five let me know that as possible so it's actually a very simple question that's one of the things we like about zelkova",
    "start": "2550660",
    "end": "2556990"
  },
  {
    "text": "is it allows us to phrase these questions in a very simple language and show me if it if my policies allow",
    "start": "2556990",
    "end": "2564610"
  },
  {
    "text": "something so let's just look at them real quick so the one on the left has to allow statements the first one is role",
    "start": "2564610",
    "end": "2571810"
  },
  {
    "text": "admin in account three four five that is actually an account three four five so that's a false from zelkova and the",
    "start": "2571810",
    "end": "2577180"
  },
  {
    "text": "second statement is also a false because it's a user power also in three four five so we'd expect zelkova to say basically no the policy on the Left does",
    "start": "2577180",
    "end": "2584500"
  },
  {
    "text": "not allow something now the one on the right is a little more interesting and seems to have regained some",
    "start": "2584500",
    "end": "2591520"
  },
  {
    "text": "invisible characters there but the one on the right is more interesting not because the invisible characters but because of the the second statement the",
    "start": "2591520",
    "end": "2598810"
  },
  {
    "text": "first statement is also in account three four five the second statement is saying",
    "start": "2598810",
    "end": "2604060"
  },
  {
    "text": "allow API gateway to invoke my function and it's a very common use case API gateway plugs into lambda beautifully",
    "start": "2604060",
    "end": "2610360"
  },
  {
    "text": "that's how it works we all use it for a nice server less things but this",
    "start": "2610360",
    "end": "2616630"
  },
  {
    "text": "statement does Alcoa is actually going to say that this statement does allow something outside of three four five and",
    "start": "2616630",
    "end": "2622990"
  },
  {
    "text": "it's true API gateway is presumably not hosted inside my account and so the",
    "start": "2622990",
    "end": "2628510"
  },
  {
    "text": "question now becomes is that okay and so is it okay let people think about it for",
    "start": "2628510",
    "end": "2634180"
  },
  {
    "text": "a while okay you thought and and I'm gonna claim that it's actually not okay",
    "start": "2634180",
    "end": "2639730"
  },
  {
    "text": "and I'm gonna call it a confused deputy problem and this is a word that comes up in various places in security but I'm",
    "start": "2639730",
    "end": "2647470"
  },
  {
    "text": "gonna talk about in this context a little bit and this is a quick sketch of what it means to be confused deputy Bob",
    "start": "2647470",
    "end": "2654010"
  },
  {
    "start": "2652000",
    "end": "2652000"
  },
  {
    "text": "honest Bob allows Alice a deputy to do something to Bob's resource and so",
    "start": "2654010",
    "end": "2659050"
  },
  {
    "text": "grants Alice the permission to act on its behalf and if we look back here a second this is exactly what's happening",
    "start": "2659050",
    "end": "2664780"
  },
  {
    "text": "were the the the whoever wrote this lamda policy a granted API gateway his",
    "start": "2664780",
    "end": "2670840"
  },
  {
    "text": "deputy or her deputy the ability to call his function so the question is then",
    "start": "2670840",
    "end": "2678970"
  },
  {
    "text": "later at some later point in time Alice the API gateway acts on Bob's resource",
    "start": "2678970",
    "end": "2685660"
  },
  {
    "text": "calls the lamda and everything's good so as a naive Bob is actually none the wiser that his his function is",
    "start": "2685660",
    "end": "2692230"
  },
  {
    "text": "misconfigured and at some other point trudy who knows about this miss configuration Trudy the intruder",
    "start": "2692230",
    "end": "2699030"
  },
  {
    "text": "traditional names is actually goes in calls Alice and has Alice act on Trudy's",
    "start": "2699030",
    "end": "2705790"
  },
  {
    "text": "behalf on Bob's resource and so Alice the API gateway in this case is actually",
    "start": "2705790",
    "end": "2711250"
  },
  {
    "text": "confused because trudy is is convincing alice to do the wrong thing and so what",
    "start": "2711250",
    "end": "2719440"
  },
  {
    "text": "I'm going to say here is the it's it's a very common concern in AWS mostly",
    "start": "2719440",
    "end": "2724640"
  },
  {
    "start": "2721000",
    "end": "2721000"
  },
  {
    "text": "called out as such for SDS external idea for assume roles if you're granting a",
    "start": "2724640",
    "end": "2729890"
  },
  {
    "text": "third party partner or something to scan your account that's a very common case but it also applies to AWS services",
    "start": "2729890",
    "end": "2735950"
  },
  {
    "text": "themselves and and there's a lot of different ways for a to be a services to call each other and so I'll go into a",
    "start": "2735950",
    "end": "2741529"
  },
  {
    "text": "little bit of what that is but so for example the the simple email service can",
    "start": "2741529",
    "end": "2748700"
  },
  {
    "text": "call s3 and it's a very common use case it's really fun you just say whenever",
    "start": "2748700",
    "end": "2753829"
  },
  {
    "text": "you receive an email I want it to drop the email in 2-3 bucket and one of the beauties of AWS is that they're a dog",
    "start": "2753829",
    "end": "2760760"
  },
  {
    "text": "food everything and so that s3 bucket doesn't magically grant SCS access to",
    "start": "2760760",
    "end": "2766849"
  },
  {
    "text": "the s3 bucket because it's Amazon it's if I want to see us to be able to do things to my bucket I say hey bucket",
    "start": "2766849",
    "end": "2772160"
  },
  {
    "text": "policy allow us yes into it now that when you say allow that SCS into it SCS",
    "start": "2772160",
    "end": "2777619"
  },
  {
    "text": "is a deputy it is acting on a bunch of customers behaves and if you don't do that properly it'll other people's SES",
    "start": "2777619",
    "end": "2784670"
  },
  {
    "text": "emails into your bucket and that's often not desirable mostly not desirable and there's a lot of other ways in which",
    "start": "2784670",
    "end": "2791660"
  },
  {
    "text": "these things can be woven together like all of them create the sort of beautiful sort of service fabric you can say SES",
    "start": "2791660",
    "end": "2799309"
  },
  {
    "text": "use my kms thing to encrypt these emails that's another nice integration that they have and you can say s3 call my",
    "start": "2799309",
    "end": "2806869"
  },
  {
    "text": "lambda when when an object appears there all of these have policies behind the scenes and all of them are governed by",
    "start": "2806869",
    "end": "2812329"
  },
  {
    "text": "saying that the kms allows the SES to encrypt things and lambda allows the s3",
    "start": "2812329",
    "end": "2818690"
  },
  {
    "text": "bucket to call it and all of these are deputies that can be confused and so in",
    "start": "2818690",
    "end": "2824059"
  },
  {
    "text": "some cases you might not actually care that the the deputies can be confused but you should at least know about it and make that a deliberate thing and",
    "start": "2824059",
    "end": "2829309"
  },
  {
    "text": "measure it against your against your threat model or something like that and there are countless others of these there's um there's all these services",
    "start": "2829309",
    "end": "2836930"
  },
  {
    "text": "glacier secret manager SNS sqs they all have resource policies they can all be",
    "start": "2836930",
    "end": "2841970"
  },
  {
    "text": "configured this way they all plug in very nicely together there's a ton of really cool features of plugging one service into another and and that's a",
    "start": "2841970",
    "end": "2849079"
  },
  {
    "text": "great thing we don't have to create servers and manage servers to to plug these into each one another but on the",
    "start": "2849079",
    "end": "2854569"
  },
  {
    "text": "flip side it's a lot to think about as a security professional you want to you want to make sure that nobody else is calling your your your",
    "start": "2854569",
    "end": "2861859"
  },
  {
    "text": "resources or bad things could happen so what the perimeter scanner does is a",
    "start": "2861859",
    "end": "2867680"
  },
  {
    "start": "2865000",
    "end": "2865000"
  },
  {
    "text": "actually very simple small code base I'm sitting on televizzle Cola because Elko is doing all the heavy lifting and it",
    "start": "2867680",
    "end": "2873829"
  },
  {
    "text": "effectively encodes all of safe safe access patterns for our resources and everything that has a resource policies",
    "start": "2873829",
    "end": "2879859"
  },
  {
    "text": "in there and we encode a whole bunch of sort of idiosyncratic ways in which all",
    "start": "2879859",
    "end": "2887420"
  },
  {
    "text": "these things work and so for example if a service calls sqs your your allow",
    "start": "2887420",
    "end": "2893660"
  },
  {
    "text": "statement must in some way check for source aren't it doesn't have to be a literal check for source aren't you can",
    "start": "2893660",
    "end": "2899059"
  },
  {
    "text": "have a allow everything and deny everything it doesn't check for a source and that's that's one of the beauties of zelkova I don't have to think about that",
    "start": "2899059",
    "end": "2904609"
  },
  {
    "text": "anymore I just say if a service calls SQS source iron must be a known iron pattern from one of my accounts or an",
    "start": "2904609",
    "end": "2910549"
  },
  {
    "text": "account that I trust if it isn't then someone else can drop messages in my sqs queue and probably wreak havoc on my",
    "start": "2910549",
    "end": "2916789"
  },
  {
    "text": "invariants and how my stuff works and if you're concerned about insiders who might know about these sqs cues or even",
    "start": "2916789",
    "end": "2922730"
  },
  {
    "text": "outsiders who might might just be fuzzing things because you can you can throw a lot of fuzzy api calls at at",
    "start": "2922730",
    "end": "2929089"
  },
  {
    "text": "other people's accounts and try to find out what they have you must be checking the source iron otherwise your sqs queue",
    "start": "2929089",
    "end": "2934819"
  },
  {
    "text": "is going to allow someone else to write to it if SES calls s3 or the example i used before the AWS refer condition key",
    "start": "2934819",
    "end": "2941059"
  },
  {
    "text": "must match to known account IDs the refer obviously has a typo in it because it'll always will thanks to HTTP but you",
    "start": "2941059",
    "end": "2948499"
  },
  {
    "text": "must be checking against known account IDs when you allow SES to cholesteric if API call gateway calls lambda it also",
    "start": "2948499",
    "end": "2954980"
  },
  {
    "text": "uses source on and but it masks must match an own arm pattern if it doesn't your lambda is unsafe and so for example",
    "start": "2954980",
    "end": "2961099"
  },
  {
    "text": "in the example I had earlier in that policy the problem there is I created a",
    "start": "2961099",
    "end": "2966230"
  },
  {
    "text": "nice service system that that has an API gateway calling my lambda and Greg finds",
    "start": "2966230",
    "end": "2973069"
  },
  {
    "text": "out about that and sets up his API gateway to call my lambda 2 and so bypasses or any kind of front-end protections I have their bike bypasses",
    "start": "2973069",
    "end": "2979999"
  },
  {
    "text": "parameter validation bypasses custom authorizers all the cool things you can do in API gateway if you don't check for",
    "start": "2979999",
    "end": "2985069"
  },
  {
    "text": "that confuse deputy you're allowing someone to just completely bypass that and probably not what you want and or even",
    "start": "2985069",
    "end": "2991660"
  },
  {
    "text": "if it is okay with you you should know about it if s3 calls came as this is a very different one it will set kms via",
    "start": "2991660",
    "end": "2997810"
  },
  {
    "text": "service to s3 dot star dot Amazon a Davis that will be the region and the",
    "start": "2997810",
    "end": "3002910"
  },
  {
    "text": "important part here for confused deputies is the encryption context s3 arn will be set to two the bucket that",
    "start": "3002910",
    "end": "3009920"
  },
  {
    "text": "called it and there are many many many other examples like these are all documented it's really nice like you can",
    "start": "3009920",
    "end": "3016290"
  },
  {
    "text": "go through the documentation I did it and that's basically how I built this but but I don't want have to think about",
    "start": "3016290",
    "end": "3023220"
  },
  {
    "text": "that like I spend a lot of time staring at at policies I've been doing it for",
    "start": "3023220",
    "end": "3028380"
  },
  {
    "text": "years now and I still mess these things up like when I actually ran this against some of our accounts the first time it found a whole bunch of things that I had",
    "start": "3028380",
    "end": "3034500"
  },
  {
    "text": "written as the IM expert and and it told me that a whole bunch of things that I",
    "start": "3034500",
    "end": "3039780"
  },
  {
    "text": "screwed up that I didn't even realize that screwed up and and so so like don't assume that just because you know I am",
    "start": "3039780",
    "end": "3045360"
  },
  {
    "text": "you're you're getting this right like the the tooling is actually extremely valuable it's found a lot of a lot of really good stuff and as I mentioned",
    "start": "3045360",
    "end": "3052290"
  },
  {
    "text": "earlier like like the definition of outsider will vary from company to company in many cases you'll have a fleet of accounts of unspecified number",
    "start": "3052290",
    "end": "3058460"
  },
  {
    "text": "and but you might also have partners you might have like a third party scanner who's allowed into your account you",
    "start": "3058460",
    "end": "3064800"
  },
  {
    "text": "don't want your people to get paged because that scanners there so we allow to specify what an outsider actually",
    "start": "3064800",
    "end": "3070440"
  },
  {
    "text": "means to you and that'll vary from company to company and also from account to account like my product count probably doesn't want some random trial",
    "start": "3070440",
    "end": "3077490"
  },
  {
    "text": "service getting into it my sandbox accounts mine and so with that I'm going",
    "start": "3077490",
    "end": "3083880"
  },
  {
    "start": "3083000",
    "end": "3083000"
  },
  {
    "text": "to pass back to to Greg who will tell you about another use case thanks Dan",
    "start": "3083880",
    "end": "3091640"
  },
  {
    "text": "so one more use case remember back when I was talking about the better workflow",
    "start": "3096079",
    "end": "3101490"
  },
  {
    "text": "where we could use cell Cova to prevent the deployment of some particular vulnerability and then I am policy what",
    "start": "3101490",
    "end": "3108030"
  },
  {
    "text": "we're going to look at here is how to get cell Cova to answer the question does this an iamb policy I'm about to",
    "start": "3108030",
    "end": "3114240"
  },
  {
    "text": "deploy does it create a risk of an exfiltration does it create an exfiltration vulnerability so in order",
    "start": "3114240",
    "end": "3120810"
  },
  {
    "text": "to do that first I have to have a quick definition of what what I mean by exfiltration let's say that if I have a",
    "start": "3120810",
    "end": "3126329"
  },
  {
    "text": "bucket and the buckets called my corpse stuff if I'm reading and writing on my",
    "start": "3126329",
    "end": "3132060"
  },
  {
    "text": "corp if I'm reading it writing to the my corpse tough bucket that's not an exfiltration risk I'm allowed to do that",
    "start": "3132060",
    "end": "3137490"
  },
  {
    "text": "if I'm reading from some other bucket to stay out on the internet some random s3 bucket that's also not an exfiltration",
    "start": "3137490",
    "end": "3144780"
  },
  {
    "text": "risk there's an escalation risk whenever I'm allowed to write from my corporation",
    "start": "3144780",
    "end": "3150720"
  },
  {
    "text": "to some third-party bucket to some other bucket because I can use that that channel to exfiltrate data and so that's",
    "start": "3150720",
    "end": "3158130"
  },
  {
    "text": "what this is l Cova constrain is looking for it's basically saying hey if there's a policy out there that allows an action",
    "start": "3158130",
    "end": "3165089"
  },
  {
    "text": "other than get object that's a read other than get object to a bucket",
    "start": "3165089",
    "end": "3170220"
  },
  {
    "text": "other than my corpse stuff then this particular policy is creating an exfiltration risk now why would I care",
    "start": "3170220",
    "end": "3176550"
  },
  {
    "text": "about these exfiltration risks suppose I'm developing I'm using open source software I say maybe I guess some Jason",
    "start": "3176550",
    "end": "3183180"
  },
  {
    "text": "hommes some JavaScript library from NPM I'm using server-side JavaScript when I",
    "start": "3183180",
    "end": "3188550"
  },
  {
    "text": "run this particular library all of a sudden there's malware embedded in the library and what it's doing is inside of",
    "start": "3188550",
    "end": "3195750"
  },
  {
    "text": "my account it's exfiltrating data out to some other corporations bucket that would be an example of why I want to",
    "start": "3195750",
    "end": "3202800"
  },
  {
    "text": "guard against having exfiltration I once I want a policy in place that prevents me from writing to third-party buckets",
    "start": "3202800",
    "end": "3209630"
  },
  {
    "text": "okay so here's a policy on the left hand side that actually prevents the",
    "start": "3209630",
    "end": "3217109"
  },
  {
    "text": "exfiltration what it's doing is it's basically saying hey the only buckets on the left the only buckets were allowed",
    "start": "3217109",
    "end": "3223260"
  },
  {
    "text": "to write to our are don't we're allowed to access with s3 is my corpse stuff",
    "start": "3223260",
    "end": "3228599"
  },
  {
    "text": "on the right hand side I have a change to the policy that's on the left and what I've done is I've added an",
    "start": "3228599",
    "end": "3234809"
  },
  {
    "text": "exception for a new bucket called the starport layer bucket what the heck is",
    "start": "3234809",
    "end": "3240299"
  },
  {
    "text": "that thing well this is a great example of how zelkova can help us detect changes they're gonna introduce a",
    "start": "3240299",
    "end": "3246329"
  },
  {
    "text": "vulnerability if if we're using a policy that's like the one on the left one",
    "start": "3246329",
    "end": "3251369"
  },
  {
    "text": "thing that could happen is someone they come around and say well I want to use a new system I want to use say like the",
    "start": "3251369",
    "end": "3256919"
  },
  {
    "text": "elastic container service well they last the container service it uses the elastic container repository to",
    "start": "3256919",
    "end": "3263069"
  },
  {
    "text": "store docker images and the elastic container repository guess where it stores its docker images",
    "start": "3263069",
    "end": "3268919"
  },
  {
    "text": "it stores it in this bucket called star port layer bucket actually it's the suffix but star port layer bucket so",
    "start": "3268919",
    "end": "3275819"
  },
  {
    "text": "what will happen is the East your ECS deployment will fail and someone will come around and say oh I need an",
    "start": "3275819",
    "end": "3282269"
  },
  {
    "text": "exception for this policy I need the exception to allow access to the star port layer bucket and we might",
    "start": "3282269",
    "end": "3289019"
  },
  {
    "text": "be tempted to write the policy like I did on the right hand side if you look at that policy does that policy prevent",
    "start": "3289019",
    "end": "3295769"
  },
  {
    "text": "exfiltration well instead of trying to guess let's just ask cell Cova so Cova",
    "start": "3295769",
    "end": "3302279"
  },
  {
    "text": "looks at the policy and says hey the one on the left the left hand side policy does not allow exfiltration the one on",
    "start": "3302279",
    "end": "3309659"
  },
  {
    "text": "the right does allow exfiltration and why well it says in the model that it",
    "start": "3309659",
    "end": "3314880"
  },
  {
    "text": "returns the model says it's allowing any s3 action to basically a star port layer",
    "start": "3314880",
    "end": "3321390"
  },
  {
    "text": "bucket and so what's happening here is if we could define the way to get zelkova to check that policy before we",
    "start": "3321390",
    "end": "3328469"
  },
  {
    "text": "actually put it into production then we'd be able to prevent a vulnerability from occuring okay so how would we do",
    "start": "3328469",
    "end": "3335219"
  },
  {
    "text": "that or earlier I was showing a comic a workflow where whenever we deploy a system we create a threat model that",
    "start": "3335219",
    "end": "3341579"
  },
  {
    "text": "builds up some basically constraint cell Cova constraints that we're going to check against our policies what we do is",
    "start": "3341579",
    "end": "3348630"
  },
  {
    "text": "we build a library of these constraints for all sorts of different checks for",
    "start": "3348630",
    "end": "3353880"
  },
  {
    "text": "policies that we want to have maintained some of which are saying for example in this case we don't want principles that",
    "start": "3353880",
    "end": "3360150"
  },
  {
    "text": "are outside our corporation to be able to access rs3 buckets there are other constraints to say hey we don't want any",
    "start": "3360150",
    "end": "3365880"
  },
  {
    "text": "we don't want an exfiltration risk we build up a library of these and then what we're going to do is we're gonna",
    "start": "3365880",
    "end": "3372330"
  },
  {
    "start": "3371000",
    "end": "3371000"
  },
  {
    "text": "put that library into a workflow that kind of looks like this what's happening here is on the left hand side whenever",
    "start": "3372330",
    "end": "3379740"
  },
  {
    "text": "we deploy an IEM policy into AWS we do it using a DevOps tile system and the",
    "start": "3379740",
    "end": "3387150"
  },
  {
    "text": "system is based on terraform now if you're not familiar with terraform terraformers kind of like cloud formation except it's kind of",
    "start": "3387150",
    "end": "3393930"
  },
  {
    "text": "cross-platform so think of cloud formation alright whenever we deploy an iamb policy we deploy it with terraform",
    "start": "3393930",
    "end": "3400470"
  },
  {
    "text": "but we require that the terraform be checked in to a development branch of",
    "start": "3400470",
    "end": "3406830"
  },
  {
    "text": "get first everything that's checked into that development branch is scanned by",
    "start": "3406830",
    "end": "3413160"
  },
  {
    "text": "zelkova if the if the policy that's been checked in embedded in the terraform",
    "start": "3413160",
    "end": "3419780"
  },
  {
    "text": "passes the scanning it's promoted into a production branch back in get and then",
    "start": "3419780",
    "end": "3425850"
  },
  {
    "text": "everything from that production branch is deployed into AWS but if zelkova",
    "start": "3425850",
    "end": "3431670"
  },
  {
    "text": "fails the check from the development for that that's from the code that's checked into the development branch then what",
    "start": "3431670",
    "end": "3437370"
  },
  {
    "text": "zelkova does is it kicks the terraform back into Garrett's of Garrett's basically a tracking system it kicks it",
    "start": "3437370",
    "end": "3444360"
  },
  {
    "text": "back in the garret where the developers have to fix it before it will be promoted into the production branch and",
    "start": "3444360",
    "end": "3450360"
  },
  {
    "text": "so what we've done here is we've kind of found a way to implement that better workflow by using a dev and production",
    "start": "3450360",
    "end": "3457710"
  },
  {
    "text": "branch inside of git and Gerrit and we can prevent vulnerabilities in our I M",
    "start": "3457710",
    "end": "3462870"
  },
  {
    "text": "policies from being deployed into production okay so the summarize",
    "start": "3462870",
    "end": "3468630"
  },
  {
    "start": "3466000",
    "end": "3466000"
  },
  {
    "text": "bridgewater we have a lot of security controls some of those security controls involve IEM policies what we what",
    "start": "3468630",
    "end": "3477270"
  },
  {
    "text": "Zhukova gives us is the ability to check those IEM policies in a formal and",
    "start": "3477270",
    "end": "3482280"
  },
  {
    "text": "methodical way zelkova is very thorough what what jehovah does is so Cova never",
    "start": "3482280",
    "end": "3489240"
  },
  {
    "text": "allows a situation where a crafty evil",
    "start": "3489240",
    "end": "3494599"
  },
  {
    "text": "Durer can be crafty and find a way to hide combined not resource not principal",
    "start": "3494599",
    "end": "3501259"
  },
  {
    "text": "statements inside an I am policy and find a way to I trickily get around the",
    "start": "3501259",
    "end": "3506269"
  },
  {
    "text": "South Dakota checker the SMT solver and zelkova is never going to be fooled it's always going to find an answer or a not",
    "start": "3506269",
    "end": "3514309"
  },
  {
    "text": "answer to the query that we're asking and finally what so Kova gives us is the ability to deeply understand the",
    "start": "3514309",
    "end": "3520369"
  },
  {
    "text": "policies that were writing when whenever we deploy a policy we can check it with cell Cova it'll it basically it's kind",
    "start": "3520369",
    "end": "3526220"
  },
  {
    "text": "of like a little game right we kind of propose does this particular policy allow a type of action we ask zelkova it",
    "start": "3526220",
    "end": "3532549"
  },
  {
    "text": "says oh yes and then we understand better about how our policies actually work and so with that I'm going to turn",
    "start": "3532549",
    "end": "3538729"
  },
  {
    "text": "it back over to Neha and she's going to tell you a little bit more so anyway you",
    "start": "3538729",
    "end": "3544970"
  },
  {
    "text": "heard about how we can take provable security and apply it to enterprise wide",
    "start": "3544970",
    "end": "3550970"
  },
  {
    "text": "governance from the use case from Bridgewater but hopefully it resonates across a lot of organizations a lot of",
    "start": "3550970",
    "end": "3557150"
  },
  {
    "text": "enterprises we have a other we have a couple of other talks of one featuring",
    "start": "3557150",
    "end": "3562789"
  },
  {
    "text": "Goldman another one from log me in we're also going to be talking about their use of serkova and their enterprise",
    "start": "3562789",
    "end": "3568069"
  },
  {
    "text": "governance and there is a talk on Thursday that's using provable security",
    "start": "3568069",
    "end": "3573499"
  },
  {
    "text": "but using it for ec2 networks and talking about how its integrated in the inspector service using and answering",
    "start": "3573499",
    "end": "3580099"
  },
  {
    "text": "questions about reach ability of your ec2 networks and if you want more",
    "start": "3580099",
    "end": "3586210"
  },
  {
    "text": "zelkova is available for a private beta please talk to your friendly Account",
    "start": "3586210",
    "end": "3592069"
  },
  {
    "text": "Manager your tam I'm gonna be at the security booth today at 11:30 please come up I'm happy to answer more",
    "start": "3592069",
    "end": "3598369"
  },
  {
    "text": "questions and also there's a huge set of use cases developed by Bridgewater and",
    "start": "3598369",
    "end": "3604339"
  },
  {
    "text": "others in the beta community that folks can use and thank you very much please remember to complete the session",
    "start": "3604339",
    "end": "3611930"
  },
  {
    "text": "survey in your mobile app",
    "start": "3611930",
    "end": "3615130"
  }
]