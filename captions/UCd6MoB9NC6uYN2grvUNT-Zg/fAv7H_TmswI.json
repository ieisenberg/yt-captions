[
  {
    "text": "welcome back everybody we have a very special session for you coming up how to",
    "start": "5250",
    "end": "11370"
  },
  {
    "text": "supercharge your product development with continuous delivery and server lists and it's delivered by one of my",
    "start": "11370",
    "end": "17430"
  },
  {
    "text": "favorite people Alex Castle Bonnie this guy is so smart he makes me dizzy and he's one of the",
    "start": "17430",
    "end": "23100"
  },
  {
    "text": "the serverless experts in our community so pay close attention buy plenty of",
    "start": "23100",
    "end": "28620"
  },
  {
    "text": "good questions in twitch and I think you're gonna be you're in for a treat Alex thank you rob thank you everybody",
    "start": "28620",
    "end": "34680"
  },
  {
    "text": "welcome back to the theater we are live from collision for all of you back home",
    "start": "34680",
    "end": "39870"
  },
  {
    "text": "watching on twitch thanks for a great introduction I'm also pretty jet-lagged so I",
    "start": "39870",
    "end": "45749"
  },
  {
    "text": "apologize in advance I come from Europe so this session is about how to use Robles computing how to use approaches",
    "start": "45749",
    "end": "54210"
  },
  {
    "text": "and and and technologies like C ICD",
    "start": "54210",
    "end": "59839"
  },
  {
    "text": "automation conditional integration and continuous delivery to speed up your development and that's probably one of",
    "start": "59839",
    "end": "65128"
  },
  {
    "text": "the most useful and most interesting advantages and benefits of service",
    "start": "65129",
    "end": "71130"
  },
  {
    "text": "computing itself so just twenty seconds of what I do I'm a software developer",
    "start": "71130",
    "end": "76200"
  },
  {
    "text": "who is a developer here today with us oh well 100% great I'm a developer too I've",
    "start": "76200",
    "end": "82710"
  },
  {
    "text": "done that in a start-up for almost five years and I've been using AWS for a few",
    "start": "82710",
    "end": "87720"
  },
  {
    "text": "years as well until I joined last year as I'm very active in the service community I even organized some events",
    "start": "87720",
    "end": "94230"
  },
  {
    "text": "in the world there is even one here in Toronto called service days so there are more than 30 around the world so if you",
    "start": "94230",
    "end": "100920"
  },
  {
    "text": "are interested if you like the topic make sure you reach out and find out where when it is in your city the agenda",
    "start": "100920",
    "end": "108600"
  },
  {
    "text": "for today is a little bit of background for those of you not completely familiar with the basic concept of service",
    "start": "108600",
    "end": "115590"
  },
  {
    "text": "computing and then we I want to show you some patterns some you know reusable",
    "start": "115590",
    "end": "121050"
  },
  {
    "text": "patterns and interesting things you can do with service some use cases some customer some stories too you know worth",
    "start": "121050",
    "end": "127290"
  },
  {
    "text": "remembering and then I actually talk about continuous delivery and what we internally called safe deployments and",
    "start": "127290",
    "end": "134700"
  },
  {
    "text": "so we can talk about what does it mean be safe when you deploy new code to production and what techniques and tools",
    "start": "134700",
    "end": "141260"
  },
  {
    "text": "and services you can use to make sure you know when you get pushed on Friday evening at 6:00 p.m. that everything",
    "start": "141260",
    "end": "147740"
  },
  {
    "text": "goes all right because that's what we do right and then I have like demo to show",
    "start": "147740",
    "end": "153080"
  },
  {
    "text": "you what happens when things actually go wrong because things go wrong that's why we're here so we want to help you you",
    "start": "153080",
    "end": "158510"
  },
  {
    "text": "know avoid those situations where you have to fix problems on a Friday evening at 7:00 p.m. so let's get started before",
    "start": "158510",
    "end": "166370"
  },
  {
    "text": "we actually get started I want to remind you that you can get all the slights of these AWS theater if you visit this link",
    "start": "166370",
    "end": "173450"
  },
  {
    "text": "you can sign up for this light so even if you are at home and you or not we're not here we couldn't scan your badge you",
    "start": "173450",
    "end": "179690"
  },
  {
    "text": "can still have this light just by signing up at this URL it's a simple landing page for you to get this lights",
    "start": "179690",
    "end": "185390"
  },
  {
    "text": "in the next few days so if you if you attended a few sessions and you want to",
    "start": "185390",
    "end": "190610"
  },
  {
    "text": "have used likes at your disposal on your laptop why not cool so what is service",
    "start": "190610",
    "end": "197270"
  },
  {
    "text": "computing I get this question a lot and the answer has been evolving in the last",
    "start": "197270",
    "end": "203660"
  },
  {
    "text": "three four years it's a mix of things it's about not thinking about servers",
    "start": "203660",
    "end": "209600"
  },
  {
    "text": "it's about using services and thinking about architecture instead of code",
    "start": "209600",
    "end": "214670"
  },
  {
    "text": "components and just writing every single line of code that composes your akita or",
    "start": "214670",
    "end": "219950"
  },
  {
    "text": "your your a software solution it's about using third-party services and delegating to a service instead of",
    "start": "219950",
    "end": "226700"
  },
  {
    "text": "reinventing the wheel every time so so that you can gain agility and speed and move faster by owning less code by",
    "start": "226700",
    "end": "234410"
  },
  {
    "text": "owning less architecture and software and components that can break and that",
    "start": "234410",
    "end": "239570"
  },
  {
    "text": "somebody else will fix for you I don't know for example user authentication user management or queuing systems or",
    "start": "239570",
    "end": "246530"
  },
  {
    "text": "emailing systems like all those things that now are so easy to use with a with an API call why should I should you",
    "start": "246530",
    "end": "253519"
  },
  {
    "text": "reinvent the wheel or implement everything and that's one aw is lambda our function of the service offering",
    "start": "253519",
    "end": "259730"
  },
  {
    "text": "kind of started this sort of service revolution back in 2014 between 2014 and",
    "start": "259730",
    "end": "265850"
  },
  {
    "text": "2015 by providing this computer service that was service for the first",
    "start": "265850",
    "end": "272389"
  },
  {
    "text": "time that could allow you to glue together these services and to build your you know your websites your",
    "start": "272389",
    "end": "279949"
  },
  {
    "text": "backends your data pipelines you know there are all sort of use cases but what",
    "start": "279949",
    "end": "285110"
  },
  {
    "text": "what do we mean by that so there is a weekly a spectrum there is no real",
    "start": "285110",
    "end": "291080"
  },
  {
    "text": "strict line between what is or what isn't service but there are a few straight concept like if you are",
    "start": "291080",
    "end": "297250"
  },
  {
    "text": "connecting SS aging into a server or if you are dealing with docker files that's",
    "start": "297250",
    "end": "302660"
  },
  {
    "text": "probably not service okay the idea is that you have to deal work patch provision or maintain servers or",
    "start": "302660",
    "end": "310250"
  },
  {
    "text": "containers when you work with service and that is a lot of heavy lifting that you have to think about anymore think",
    "start": "310250",
    "end": "317300"
  },
  {
    "text": "about patching the operating system updating libraries patching for security vulnerabilities that come up every few",
    "start": "317300",
    "end": "323479"
  },
  {
    "text": "months they do we take care of that for you basically if you think about when",
    "start": "323479",
    "end": "329150"
  },
  {
    "text": "you when you have instances and virtual machines then you have containers and then you have functions so we talked",
    "start": "329150",
    "end": "335840"
  },
  {
    "text": "about function as a service so all you provide is your business logic your code as our CTO Vernor Vogel said all you",
    "start": "335840",
    "end": "343220"
  },
  {
    "text": "want to write in the future is business logic not you know reinventing the wheel and wasting your time and your develop",
    "start": "343220",
    "end": "350570"
  },
  {
    "text": "resources especially if you are a start-up if you had three developers you don't want them to go and SSH every two",
    "start": "350570",
    "end": "357229"
  },
  {
    "text": "weeks and patch the operating system that's wasted time that they can use to build something either as value to your",
    "start": "357229",
    "end": "363770"
  },
  {
    "text": "customers and to your to your company to your business model and since we take",
    "start": "363770",
    "end": "369169"
  },
  {
    "text": "care of everything below that level everything below your code that means",
    "start": "369169",
    "end": "374419"
  },
  {
    "text": "our commit infrastructure networking security deploying your application to",
    "start": "374419",
    "end": "379849"
  },
  {
    "text": "multiple data centers and multiple availability zones as we call them internally like logical data centers",
    "start": "379849",
    "end": "385669"
  },
  {
    "text": "within the Amazon global network we can take care of a lot of things for you one of the advantages is the high",
    "start": "385669",
    "end": "392000"
  },
  {
    "text": "availability that you get out of that which means you know if you're running a",
    "start": "392000",
    "end": "397969"
  },
  {
    "text": "cluster of machines you have to take care that you know they talk to each other if one something goes down",
    "start": "397969",
    "end": "403110"
  },
  {
    "text": "it will come back up somewhere else in another availability zone or another data center okay we take care of all of",
    "start": "403110",
    "end": "409140"
  },
  {
    "text": "that it means your applications are more available highly available by default and that's just a problem you don't have",
    "start": "409140",
    "end": "416190"
  },
  {
    "text": "to face or think about anymore and another consequence of us managing the infrastructure is that you can scale",
    "start": "416190",
    "end": "423930"
  },
  {
    "text": "down to zero as well as you can scale up to infinity without having to think about all the complexities that usually",
    "start": "423930",
    "end": "431010"
  },
  {
    "text": "comes with the scaling policies and cluster management and so on so scaling",
    "start": "431010",
    "end": "436050"
  },
  {
    "text": "up to infinity is great because I just if you are a start-up or even if you're not it may be you have spiky workloads",
    "start": "436050",
    "end": "441450"
  },
  {
    "text": "very hard to predict but if you're a startup and you're you know you go viral and you get a hundred extra fee",
    "start": "441450",
    "end": "448290"
  },
  {
    "text": "overnight you want to be able to scale quickly without you know hiring more engineers or implementing your solution",
    "start": "448290",
    "end": "455010"
  },
  {
    "text": "that's key especially in a startup while scaling to zero it's also pretty",
    "start": "455010",
    "end": "460590"
  },
  {
    "text": "interesting because if you have spiky workloads you don't want to over provision for six hours thousands of",
    "start": "460590",
    "end": "466680"
  },
  {
    "text": "machines but then you use them only for two hours and you're just wasting sixty percent of your budget there or if",
    "start": "466680",
    "end": "473270"
  },
  {
    "text": "you're a start-up and you have like zero traffic for 40% of the day which happens",
    "start": "473270",
    "end": "479550"
  },
  {
    "text": "I've build startups myself it does happen you don't want to pay a 24/7",
    "start": "479550",
    "end": "485090"
  },
  {
    "text": "server for doing nothing all day just waiting for someone to come so as a",
    "start": "485090",
    "end": "490530"
  },
  {
    "text": "start again you want to build new stuff you want to build new ideas you want to experiment with new features or even",
    "start": "490530",
    "end": "497790"
  },
  {
    "text": "even just have multiple environments like development staging production",
    "start": "497790",
    "end": "502950"
  },
  {
    "text": "without paying for those machines 24/7 here the the model is that you pay on a",
    "start": "502950",
    "end": "508470"
  },
  {
    "text": "hundred millisecond interval basis so if you run your code for a second and a",
    "start": "508470",
    "end": "514020"
  },
  {
    "text": "half that's all you pay if you run your server for two seconds and 16 and 600",
    "start": "514020",
    "end": "519900"
  },
  {
    "text": "milliseconds that's all you pay okay if you run your your functions for 200",
    "start": "519900",
    "end": "525240"
  },
  {
    "text": "milliseconds that's all you pay right and if you think about that even working on cost optimization changes a lot with",
    "start": "525240",
    "end": "532890"
  },
  {
    "text": "service because imagine you're your engines are running for a hundred and ten milliseconds and you can say okay",
    "start": "532890",
    "end": "539890"
  },
  {
    "text": "this function is costing me a little bit no I want to reduce the cost and so you're now paying for 200 milliseconds",
    "start": "539890",
    "end": "546070"
  },
  {
    "text": "because we round it to the next 100 millisecond interval so if you can shave off those 20 milliseconds and go down to",
    "start": "546070",
    "end": "553180"
  },
  {
    "text": "100 or 19.5 or 96 your 1/2 thing your cost just by taking those 20",
    "start": "553180",
    "end": "558279"
  },
  {
    "text": "milliseconds of your individual function execution so thinking about cost thinking about business models thinking",
    "start": "558279",
    "end": "564550"
  },
  {
    "text": "about optimal compute up to musician is a bit different but you loves it to save a lot of money and to be flexible highly",
    "start": "564550",
    "end": "572110"
  },
  {
    "text": "available more secure and cheaper at the same time okay I don't know about you this never happens in IT they can be",
    "start": "572110",
    "end": "578440"
  },
  {
    "text": "faster and cheaper more available in all together okay so I'm pretty excited",
    "start": "578440",
    "end": "583779"
  },
  {
    "text": "about this another point to stress is",
    "start": "583779",
    "end": "589240"
  },
  {
    "text": "that you can finally build architectures that are event-driven okay you can say anything happens in the system like a",
    "start": "589240",
    "end": "595660"
  },
  {
    "text": "new database record a new user signs up or a new file uploaded by my bum mile",
    "start": "595660",
    "end": "602140"
  },
  {
    "text": "application you can react to those events in an event-driven way you can say when this happens run this function",
    "start": "602140",
    "end": "607990"
  },
  {
    "text": "done and then you can potentially orchestrate you know a series of events or functions generating other events and",
    "start": "607990",
    "end": "614740"
  },
  {
    "text": "you think in an event-driven way you don't think about clusters and machines and protocols and ports to open in the",
    "start": "614740",
    "end": "622570"
  },
  {
    "text": "in the V PC and think like that it's a different way of building I think it's more fun as well because again you can",
    "start": "622570",
    "end": "628570"
  },
  {
    "text": "like take these building blocks and design your architectures and put things together what you can build with serval",
    "start": "628570",
    "end": "635290"
  },
  {
    "text": "is so I like to say this that if you ask me a couple years ago I started with",
    "start": "635290",
    "end": "640360"
  },
  {
    "text": "travelers around three years ago now so if you ask me one year ago I would tell",
    "start": "640360",
    "end": "645700"
  },
  {
    "text": "you okay maybe we're getting there but probably I don't know you can do 40",
    "start": "645700",
    "end": "652600"
  },
  {
    "text": "50 60 % of new applications you can build them on servlet there is still in or some edge cases if you ask me today",
    "start": "652600",
    "end": "658720"
  },
  {
    "text": "in the last 12 months a lot of change like security compliance and time",
    "start": "658720",
    "end": "664600"
  },
  {
    "text": "limitations even just the programming languages that you can use on lambda today are",
    "start": "664600",
    "end": "669790"
  },
  {
    "text": "different than a year ago so if you ask me today I'll probably say more than 80 or 90% of applications are a very good",
    "start": "669790",
    "end": "675910"
  },
  {
    "text": "fit for service it could be a website could be an IOT application a back-end for a mobile app it could be a data",
    "start": "675910",
    "end": "681760"
  },
  {
    "text": "processing pipeline you know even how many of you use Domino I was on Alexa here do you have an echo device back",
    "start": "681760",
    "end": "687940"
  },
  {
    "text": "home maybe a few ok Alexa is built on top of a double is lambda as well so every time you talk to it you know the",
    "start": "687940",
    "end": "695220"
  },
  {
    "text": "text is passed to a lambda function that does these state hotels stateless query",
    "start": "695220",
    "end": "702670"
  },
  {
    "text": "or database you know whatever it needs to do that you build your own Alexa skills for example and you know it's a",
    "start": "702670",
    "end": "709060"
  },
  {
    "text": "good fit because it's server less maybe you're not talking to it 6 hours a day maybe you talk to it half an hour late",
    "start": "709060",
    "end": "714490"
  },
  {
    "text": "or 10 minutes a day and you know we want to optimize those compute resources so",
    "start": "714490",
    "end": "719649"
  },
  {
    "text": "there are a lot of interesting tools and even internal AWS services built on top",
    "start": "719649",
    "end": "725920"
  },
  {
    "text": "of lambda so it you know it went from an experiment to a tool that companies of",
    "start": "725920",
    "end": "732579"
  },
  {
    "text": "all sizes you know from startups to enterprises to midsize companies to even",
    "start": "732579",
    "end": "738370"
  },
  {
    "text": "even consultants all sort of companies so maybe you know maybe you know I",
    "start": "738370",
    "end": "743890"
  },
  {
    "text": "Robert how many of you have a Roomba but back home they clean your house well I have a couple of them and you know",
    "start": "743890",
    "end": "749829"
  },
  {
    "text": "whenever they talk to the cloud they're actually talking to AWS lambda and they now have more than 2 million of these",
    "start": "749829",
    "end": "756880"
  },
  {
    "text": "bots around the world that talk to their service back-end and they do more if I",
    "start": "756880",
    "end": "762339"
  },
  {
    "text": "remember correctly more than a thousand deployments of new software every day in",
    "start": "762339",
    "end": "767410"
  },
  {
    "text": "their back-end so I want to show you how you know also iRobot does their",
    "start": "767410",
    "end": "772899"
  },
  {
    "text": "deployment in a CI CD fashion so every team can deploy to production every day multiple times a day in a safe fashion",
    "start": "772899",
    "end": "778480"
  },
  {
    "text": "so let's get there but first let me tell you a bit about some of the patterns that we see some of the different ways",
    "start": "778480",
    "end": "785139"
  },
  {
    "text": "you can use AWS lambda so for example you can now bring basically every code",
    "start": "785139",
    "end": "793389"
  },
  {
    "text": "you want okay when I say bring your own code if I told you bring your own cone a year",
    "start": "793389",
    "end": "799160"
  },
  {
    "text": "ago I would said like no joy yes and go and Python and Java and a couple more",
    "start": "799160",
    "end": "805640"
  },
  {
    "text": "but now you can bring any code okay we have developed a functionality called custom runtimes so if your language is",
    "start": "805640",
    "end": "812420"
  },
  {
    "text": "not supported natively by lambda you can build your own custom runtime that supports your programming language okay",
    "start": "812420",
    "end": "818810"
  },
  {
    "text": "so we have now customers porting their COBOL mainframe into and lambda function",
    "start": "818810",
    "end": "826160"
  },
  {
    "text": "because there is cobble a couple custom runtime they can just reuse whenever they want so it is enabling a lot of",
    "start": "826160",
    "end": "833330"
  },
  {
    "text": "transformation a lot of innovation so there is no more alarm that does not support my programming language excuse",
    "start": "833330",
    "end": "839450"
  },
  {
    "text": "anymore so I just encourage you to play with any language you like when you talk",
    "start": "839450",
    "end": "845240"
  },
  {
    "text": "about resource model you can give it from basically you have a power handle I like to call it so you can go from 128",
    "start": "845240",
    "end": "851720"
  },
  {
    "text": "megabytes of memory up to 3 gigabytes of memory and remember when you give it",
    "start": "851720",
    "end": "857930"
  },
  {
    "text": "more memory you are sugar giving it more compute power and more networking power as well so it's like a power handle",
    "start": "857930",
    "end": "863870"
  },
  {
    "text": "right and we talked about cost optimization before and the most important thing to remember when it",
    "start": "863870",
    "end": "869690"
  },
  {
    "text": "comes to resource is that you know in the traditional world if you want something to go faster you also kind of",
    "start": "869690",
    "end": "876980"
  },
  {
    "text": "need it you need to make it more expensive as well you need to allocate more resources and it's there is no way",
    "start": "876980",
    "end": "882500"
  },
  {
    "text": "it will be more expensive if you want it to run faster or if you need more memory if you need 4 terabytes of RAM ok and it",
    "start": "882500",
    "end": "888710"
  },
  {
    "text": "needs to be more expensive with lambda if we have a workload that runs with",
    "start": "888710",
    "end": "893810"
  },
  {
    "text": "under 28 megabytes of RAM and it takes I don't know 10 seconds if you give it ten times more RAM more memory more power it",
    "start": "893810",
    "end": "901820"
  },
  {
    "text": "will take it 10 times less to run so at the end of the day you're actually paying the same for going 10 times",
    "start": "901820",
    "end": "909470"
  },
  {
    "text": "faster ok that's what I mentioned this never happens in IT so you can just say go faster and you pay the same so I",
    "start": "909470",
    "end": "916910"
  },
  {
    "text": "think about this when you think about allocating the right resources to your functions mmm about authoring about",
    "start": "916910",
    "end": "925070"
  },
  {
    "text": "writing code well there are all sort of IDE support I'm going to show you live how to use our cloud IDE",
    "start": "925070",
    "end": "932570"
  },
  {
    "text": "called cloud 9 so you can just do everything in the browser all the credentials on the authorization",
    "start": "932570",
    "end": "938770"
  },
  {
    "text": "authentication security is a bit simplified of course if you prefer",
    "start": "938770",
    "end": "944330"
  },
  {
    "text": "working offline or working on your local ID there are all sort of plugins and and the toolkits for you know vs code and",
    "start": "944330",
    "end": "950690"
  },
  {
    "text": "IntelliJ and and so on when it comes to monitoring logging you know we kind of",
    "start": "950690",
    "end": "956870"
  },
  {
    "text": "always say it should be a universal right you know so every every time you",
    "start": "956870",
    "end": "962560"
  },
  {
    "text": "console.log in JavaScript or print in fight in Python or you know just every",
    "start": "962560",
    "end": "967730"
  },
  {
    "text": "time you print something in your runtime all this data all these logs are automatically delivered to Amazon Cloud",
    "start": "967730",
    "end": "973850"
  },
  {
    "text": "Watch which is our service for you know logs and metrics and so on and you know",
    "start": "973850",
    "end": "979340"
  },
  {
    "text": "there you just pay for the storage which you know by the megabyte is pretty cheap so I kind of consider that to be almost",
    "start": "979340",
    "end": "986150"
  },
  {
    "text": "free but you know remember that's part of the equation and this is another",
    "start": "986150",
    "end": "992030"
  },
  {
    "text": "important concept your functions try to build them to be stateless okay what",
    "start": "992030",
    "end": "998450"
  },
  {
    "text": "does status mean it means there is no state between one location and the next invocation it should be you know we",
    "start": "998450",
    "end": "1004450"
  },
  {
    "text": "should be able to scale horizontally to as many concurrent function as possible so that you can you can manage up to",
    "start": "1004450",
    "end": "1011350"
  },
  {
    "text": "millions and millions of concurrent API calls or you know whatever your function",
    "start": "1011350",
    "end": "1016840"
  },
  {
    "text": "are doing so try to do that of course you can use local storage in the function runtime of course you can use",
    "start": "1016840",
    "end": "1022930"
  },
  {
    "text": "memory in the function runtime but use that you know for caching use that for",
    "start": "1022930",
    "end": "1028140"
  },
  {
    "text": "reusing objects that are heavy to build or to create or to instantiate but don't",
    "start": "1028140",
    "end": "1033790"
  },
  {
    "text": "use that to mental state because that that's no idea you're probably doing it wrong what",
    "start": "1033790",
    "end": "1039880"
  },
  {
    "text": "about the execution model so there are a few different ways to actually invoke your lambda functions the first one is",
    "start": "1039880",
    "end": "1045610"
  },
  {
    "text": "we call it synchronous and it's synchronous in the sense that the result",
    "start": "1045610",
    "end": "1050740"
  },
  {
    "text": "object of a function is sent back to the entity that kind of generated the",
    "start": "1050740",
    "end": "1055840"
  },
  {
    "text": "initial event and I've mentioned before everything in lambda is an event even an HTTP call is an event to",
    "start": "1055840",
    "end": "1063640"
  },
  {
    "text": "so your lambda function is literally a function in a Python function and no GS function a Java function and that",
    "start": "1063640",
    "end": "1070270"
  },
  {
    "text": "function will receive once invoked an event object and that event will contain",
    "start": "1070270",
    "end": "1075310"
  },
  {
    "text": "you know whatever is the request about could be an HTTP request a new object on this tree a new message on a topic and",
    "start": "1075310",
    "end": "1081220"
  },
  {
    "text": "so on so in the synchronous model you are supposed to return back a response",
    "start": "1081220",
    "end": "1086470"
  },
  {
    "text": "if you fail for any reason we invoke to you is not you know if if the HTTP",
    "start": "1086470",
    "end": "1092110"
  },
  {
    "text": "client if you return and if 500 error you know they request this gun there's no way to retry there's no way to",
    "start": "1092110",
    "end": "1097830"
  },
  {
    "text": "decouple client from server in this case in the asynchronous model though for",
    "start": "1097830",
    "end": "1104410"
  },
  {
    "text": "example if you put a new file on this tree or if you publish a message on a queue or on a topic you know there is a",
    "start": "1104410",
    "end": "1110470"
  },
  {
    "text": "nice difficultly mechanism there so that we can first of all do some retry for",
    "start": "1110470",
    "end": "1117310"
  },
  {
    "text": "you so if the function fails we can retry automatically a couple of times if you fail again you can like put the",
    "start": "1117310",
    "end": "1123820"
  },
  {
    "text": "input event into a dead letter Q we call it it could be a queue or a topic so you",
    "start": "1123820",
    "end": "1129070"
  },
  {
    "text": "can re you know take that event back into the loop eventually for reprocessing but you know the idea is",
    "start": "1129070",
    "end": "1135610"
  },
  {
    "text": "that whoever generated the event the client will plotted the file or the client who created the message into the",
    "start": "1135610",
    "end": "1141190"
  },
  {
    "text": "topic or the queue doesn't need to know who is behind that the coupling mechanism so this is a bit a different",
    "start": "1141190",
    "end": "1148020"
  },
  {
    "text": "way of using lambda but it's kind of the best practices especially if you want to have multiple lambdas working and",
    "start": "1148020",
    "end": "1154540"
  },
  {
    "text": "talking to each other having somewhere or something in between is the best practice there is a third way which is",
    "start": "1154540",
    "end": "1159760"
  },
  {
    "text": "very similar but instead of one event at a time you're given a stream of events so it's stream based think about if",
    "start": "1159760",
    "end": "1166450"
  },
  {
    "text": "you're if you're using Amazon DynamoDB or you're using Amazon Kinesis for real-time data processing so you can",
    "start": "1166450",
    "end": "1174250"
  },
  {
    "text": "connect a lambda function to your database dynamo for example or to your data stream and you will be given new",
    "start": "1174250",
    "end": "1180010"
  },
  {
    "text": "records so every insert every update every delete in the database or every",
    "start": "1180010",
    "end": "1185050"
  },
  {
    "text": "new record in your kin easy stream will be given as a batch and you can choose the batch size so slightly different but",
    "start": "1185050",
    "end": "1191800"
  },
  {
    "text": "it is still kind of a synchronous it's just a different way of providing events to the function API gator is",
    "start": "1191800",
    "end": "1198820"
  },
  {
    "text": "probably one of the most used a double is lambda integration to build API API",
    "start": "1198820",
    "end": "1204880"
  },
  {
    "text": "get it will create a restful interface on top of your functions so you might",
    "start": "1204880",
    "end": "1210130"
  },
  {
    "text": "even have an API with multiple endpoints each endpoint is implemented with a different lambda function in a different",
    "start": "1210130",
    "end": "1216790"
  },
  {
    "text": "programming language so you can you know again the couple what the client sees from what the back end looks like and",
    "start": "1216790",
    "end": "1222880"
  },
  {
    "text": "this is very aligned with the idea of microservices of having multiple teams handling different parts of the system",
    "start": "1222880",
    "end": "1229240"
  },
  {
    "text": "and maybe even in different programming languages but abrogated is not just that it actually gives you DDoS protection it",
    "start": "1229240",
    "end": "1235240"
  },
  {
    "text": "gives you throttling authentication authorization a lot of more advanced features so if you're building api's or",
    "start": "1235240",
    "end": "1242380"
  },
  {
    "text": "WebSocket kind of applications you can check out api gateway so what happens",
    "start": "1242380",
    "end": "1248110"
  },
  {
    "text": "when you have one function and then you start having more functions that maybe talk to each other and build something more you know sophisticated you can end",
    "start": "1248110",
    "end": "1255340"
  },
  {
    "text": "up with 30 50 100 functions some of our biggest customers using lambda have you",
    "start": "1255340",
    "end": "1260470"
  },
  {
    "text": "know hundreds and hundreds of functions talking to each other or talking to queues and other services and maybe some",
    "start": "1260470",
    "end": "1267730"
  },
  {
    "text": "of these functions are reading or writing from a database or maybe they are reading or writing from a queue",
    "start": "1267730",
    "end": "1273670"
  },
  {
    "text": "maybe some of these functions are even communicating with the legacy system in a data center you know maybe connected",
    "start": "1273670",
    "end": "1279430"
  },
  {
    "text": "with the Amazon BBC to your own premises or architecture why not so it can get",
    "start": "1279430",
    "end": "1285580"
  },
  {
    "text": "pretty sophisticated pretty complicated to orchestrate all this complex logic so a couple years ago we have announced",
    "start": "1285580",
    "end": "1293170"
  },
  {
    "text": "this service called Amazon step function AWS step function and we have bundled it",
    "start": "1293170",
    "end": "1299710"
  },
  {
    "text": "with an open source a kind of language that we provide to you to define stage",
    "start": "1299710",
    "end": "1305290"
  },
  {
    "text": "to defines it sorry state machines so what's a state machine it's like a series of states that could be in",
    "start": "1305290",
    "end": "1311980"
  },
  {
    "text": "serious in parallel in loop you can have you can have a fail management you can",
    "start": "1311980",
    "end": "1318490"
  },
  {
    "text": "have branching you can have different branches converging into a last one to take a decision so you can orchestrate",
    "start": "1318490",
    "end": "1324910"
  },
  {
    "text": "your virtual workflows and in this case you're a starting point and then each and every one of these steps",
    "start": "1324910",
    "end": "1331590"
  },
  {
    "text": "can be either a lambda function it could be a wait state or it could be even a",
    "start": "1331590",
    "end": "1336600"
  },
  {
    "text": "direct integration with some other services like writing writing into database or reading from a queue you don't have to write that code once again",
    "start": "1336600",
    "end": "1342899"
  },
  {
    "text": "you can just integrate it so step function is pretty cool I've actually used myself step functions to build a",
    "start": "1342899",
    "end": "1349080"
  },
  {
    "text": "tool for lambda so it's a bit meta it's a bit recursive here but I've built this tool called a SS lambda power tuning so",
    "start": "1349080",
    "end": "1356429"
  },
  {
    "text": "what this does is it wills a state machine that solves a problem for you",
    "start": "1356429",
    "end": "1362970"
  },
  {
    "text": "basically and the problem is how do you set up the optimal memory or power configuration for your lambda functions",
    "start": "1362970",
    "end": "1369330"
  },
  {
    "text": "it's kind of a wild guess or try all of them and see with cheaper with faster",
    "start": "1369330",
    "end": "1374549"
  },
  {
    "text": "which is faster so with this state machine you just provide your function as input and it will run your functions",
    "start": "1374549",
    "end": "1380070"
  },
  {
    "text": "multiple times with different configurations enough times to get statistically relevant data and then it",
    "start": "1380070",
    "end": "1385830"
  },
  {
    "text": "will come back saying hey for your function with this input this is the optimal configuration so you can be data",
    "start": "1385830",
    "end": "1391200"
  },
  {
    "text": "driven you don't have to guess or guesstimate and you can do you know all sort of different orchestrations this is",
    "start": "1391200",
    "end": "1397619"
  },
  {
    "text": "a bit meta again but if you have a complex workflow to orchestrate maybe",
    "start": "1397619",
    "end": "1402840"
  },
  {
    "text": "with human interaction you can have weighting States up to a year so you can do you can build very sophisticated",
    "start": "1402840",
    "end": "1409159"
  },
  {
    "text": "orchestration mechanism but let's get into the actual topic and I don't know what time is it but how much time we",
    "start": "1409159",
    "end": "1416789"
  },
  {
    "text": "have we're good so let's get into that see I see the topic so what do I mean by continuous delivery what do we mean by",
    "start": "1416789",
    "end": "1422700"
  },
  {
    "text": "safe deployments so let me get there idea is we want to deploy new code to",
    "start": "1422700",
    "end": "1430980"
  },
  {
    "text": "production in a safe way without breaking anything but we want to do it fast ly we want to do it every day",
    "start": "1430980",
    "end": "1437220"
  },
  {
    "text": "possible possibly even multiple times a day why because we have maybe 10 developers they own different part of",
    "start": "1437220",
    "end": "1443609"
  },
  {
    "text": "the system different services and they constantly come up with new ideas which is great that's why we hire them but you",
    "start": "1443609",
    "end": "1449489"
  },
  {
    "text": "know then you have to tell them no we deploy only once every two weeks on a Thursday because that's our company",
    "start": "1449489",
    "end": "1456119"
  },
  {
    "text": "policy ok can we do better can we deploy every day can we go to made all of it basically and can we do",
    "start": "1456119",
    "end": "1462840"
  },
  {
    "text": "it in a safe way so that even if you really get push a bug to production you",
    "start": "1462840",
    "end": "1468269"
  },
  {
    "text": "can safely rollback automatically for example so let's get there let's talk",
    "start": "1468269",
    "end": "1473279"
  },
  {
    "text": "about some of these techniques but first of all let's agree on save so how what",
    "start": "1473279",
    "end": "1478889"
  },
  {
    "text": "can you actually do to try to be safe even without too much automation what",
    "start": "1478889",
    "end": "1484559"
  },
  {
    "text": "are the techniques so first of all you know you may want your developers to do pair programming so they help each other",
    "start": "1484559",
    "end": "1490230"
  },
  {
    "text": "they come up with different ideas they you know kind of compensate each other and of course tell them to write unit",
    "start": "1490230",
    "end": "1496139"
  },
  {
    "text": "tests you want to automate the the easy part the the the actual business logic",
    "start": "1496139",
    "end": "1501450"
  },
  {
    "text": "of your services and then you can go a bit better you can say okay let's learn integration tests maybe you have a local",
    "start": "1501450",
    "end": "1507990"
  },
  {
    "text": "emulator you want to emulate the database you want to emulate some integration moving parts but then maybe",
    "start": "1507990",
    "end": "1513570"
  },
  {
    "text": "you want to do also do code reviews okay who doesn't do code reviews you open a pull request your colleagues will review",
    "start": "1513570",
    "end": "1519210"
  },
  {
    "text": "it you know if there is a problem they will probably figure it out and then we can get a bit more better and we can say",
    "start": "1519210",
    "end": "1525600"
  },
  {
    "text": "okay let's automate the integration process let's make sure every time you get pushed something we actually build",
    "start": "1525600",
    "end": "1531869"
  },
  {
    "text": "or compile depending on the language programming language if you're using Java you compile it and that may be you",
    "start": "1531869",
    "end": "1538350"
  },
  {
    "text": "build the artifact so this artifact is ready to be tested maybe by another engineer so you have automated the integration part at least but we can do",
    "start": "1538350",
    "end": "1545999"
  },
  {
    "text": "better we can do continuous delivery so every time this artifact is ready we can take that and deploy to some kind of",
    "start": "1545999",
    "end": "1552869"
  },
  {
    "text": "environment doesn't need to be production it could be a dev environment for the every individual developer or it",
    "start": "1552869",
    "end": "1558539"
  },
  {
    "text": "could be a staging environment for a team can we do better well maybe every time you do that you",
    "start": "1558539",
    "end": "1564659"
  },
  {
    "text": "want to run some actual AWS account integration tests so you are actually",
    "start": "1564659",
    "end": "1571169"
  },
  {
    "text": "running your tests in it the ws account and this is beautiful with server list because every staging or every every",
    "start": "1571169",
    "end": "1579059"
  },
  {
    "text": "stage that you have like dev prod pre prod staging team a team B team C you",
    "start": "1579059",
    "end": "1585090"
  },
  {
    "text": "know everything might have their own staging doesn't cost you anything unless you use it the idea is that if",
    "start": "1585090",
    "end": "1590999"
  },
  {
    "text": "you're not using the system cost you zero so it's really convenient you have even one environment per",
    "start": "1590999",
    "end": "1596140"
  },
  {
    "text": "developer then maybe you want to have some maximum test for your developers",
    "start": "1596140",
    "end": "1602110"
  },
  {
    "text": "for your designers for your you know testing engineers whoever helped you with the manual process of you know",
    "start": "1602110",
    "end": "1607720"
  },
  {
    "text": "doing acceptance and they did you know the mantra that the best thing you can do is continuous deployment okay without",
    "start": "1607720",
    "end": "1615220"
  },
  {
    "text": "any human intervention you have this full pipeline that run tests locally run tests in a dev account if everything is",
    "start": "1615220",
    "end": "1622390"
  },
  {
    "text": "fine deploys to a pre prod account with automated UI testing you know all this",
    "start": "1622390",
    "end": "1627700"
  },
  {
    "text": "stuff and then when you are certain you just deploy to production but can we be a hundred percent sure that if you do",
    "start": "1627700",
    "end": "1634690"
  },
  {
    "text": "all of this no bugs go to production I can tell you no because otherwise I",
    "start": "1634690",
    "end": "1640510"
  },
  {
    "text": "wouldn't be here and we wouldn't build features to help you with all of this complexity so well actually happens is",
    "start": "1640510",
    "end": "1648660"
  },
  {
    "text": "that bugs go to production and this is a 3d illustrative gif of what actually",
    "start": "1648660",
    "end": "1657280"
  },
  {
    "text": "happens okay maybe you're not the operation person doing this you know but when the bug happens it's Friday night",
    "start": "1657280",
    "end": "1663550"
  },
  {
    "text": "at 7:00 you have to go around it and find a way to you know not have too many",
    "start": "1663550",
    "end": "1669880"
  },
  {
    "text": "customers impacted and you know you end up with all sort of interesting work around you know it's not fun it might",
    "start": "1669880",
    "end": "1676480"
  },
  {
    "text": "look like he's the guys having fun is not trust me so sometimes it actually works pretty well you know you just you",
    "start": "1676480",
    "end": "1682780"
  },
  {
    "text": "know it works and you fix it you are the best in the team everybody loves you but",
    "start": "1682780",
    "end": "1688000"
  },
  {
    "text": "you didn't sleep all night so you don't want that to happen you feel good but you don't want that to happen but",
    "start": "1688000",
    "end": "1693640"
  },
  {
    "text": "usually it does not really work okay so no matter what tool you're using no matter how much automation or",
    "start": "1693640",
    "end": "1699880"
  },
  {
    "text": "preparation you have if they wake you up at 3:00 a.m. there is a problem the developer is on vacation it's really",
    "start": "1699880",
    "end": "1706030"
  },
  {
    "text": "hard you are going to fix it real quick so what does SDI CD pipeline actually",
    "start": "1706030",
    "end": "1712990"
  },
  {
    "text": "look like and one cat what can we do to do even better than that so I've",
    "start": "1712990",
    "end": "1718840"
  },
  {
    "text": "mentioned already CI is a continuous integration is taking every update and building an",
    "start": "1718840",
    "end": "1725530"
  },
  {
    "text": "artifact like the build phase maybe you run some unit testing phase they confuse delivery usually you go to",
    "start": "1725530",
    "end": "1732220"
  },
  {
    "text": "production but by production it might be any account it might be a staging account a development account usually",
    "start": "1732220",
    "end": "1739690"
  },
  {
    "text": "it's delivery because there is some sort of human step or a gate that you know somebody has to say this is ok maybe a",
    "start": "1739690",
    "end": "1746470"
  },
  {
    "text": "testing engineer or maybe even the CEO if you are a start-up that's what we did",
    "start": "1746470",
    "end": "1751770"
  },
  {
    "text": "and you know again the mantra is to go straight to production without any human intervention maybe multiple times a day",
    "start": "1751770",
    "end": "1758530"
  },
  {
    "text": "why not that that's their thing big idea for us as a development team so these",
    "start": "1758530",
    "end": "1764860"
  },
  {
    "text": "are the tools that on the a SS platform allow you to do just that and there are",
    "start": "1764860",
    "end": "1770020"
  },
  {
    "text": "a lot of tools but there is a couple of simple ways to put them together and a",
    "start": "1770020",
    "end": "1775600"
  },
  {
    "text": "couple tools that provide you good defaults so for example there is a tool called a service called AWS code star",
    "start": "1775600",
    "end": "1781450"
  },
  {
    "text": "that puts all these services together and gives us the ICD pipeline already configure and map to your lambda",
    "start": "1781450",
    "end": "1787270"
  },
  {
    "text": "functions you know the service or a code commit it's basically like github but on AWS code bill allows you to build and",
    "start": "1787270",
    "end": "1795730"
  },
  {
    "text": "run scripts and tests I'll show you what it looks like code deploy allows you to actually deploy your functions and could",
    "start": "1795730",
    "end": "1802000"
  },
  {
    "text": "pipeline allows you to build the actual deployment pipeline using all these",
    "start": "1802000",
    "end": "1807010"
  },
  {
    "text": "services together if it isn't if it if this isn't enough for you you can even",
    "start": "1807010",
    "end": "1813550"
  },
  {
    "text": "build as we saw before come more cuts complex orchestration maybe using AWS",
    "start": "1813550",
    "end": "1819490"
  },
  {
    "text": "step function there is actually a repository that illustrates how to do that how to use you know and after",
    "start": "1819490",
    "end": "1826260"
  },
  {
    "text": "instead of using code pipeline you can use that functions to customize as you",
    "start": "1826260",
    "end": "1831520"
  },
  {
    "text": "wish your deployment pipeline in a visual way when we do infrastructure as",
    "start": "1831520",
    "end": "1837760"
  },
  {
    "text": "code how many of you are familiar with the infrastructure as code like cloud formation terraform so for all the others infrastructure",
    "start": "1837760",
    "end": "1845110"
  },
  {
    "text": "code is a way to define your applications in a template in a file",
    "start": "1845110",
    "end": "1850600"
  },
  {
    "text": "that can be easily be you to deploy the same application into multiple accounts or multiple regions or",
    "start": "1850600",
    "end": "1857160"
  },
  {
    "text": "multiples you know whatever you want basically so Elba yes we do that with",
    "start": "1857160",
    "end": "1864510"
  },
  {
    "text": "Amazon cloud formation and we have a special kind of flavor of cloud",
    "start": "1864510",
    "end": "1870390"
  },
  {
    "text": "formation that we call AWS Sam which is specifically designed for service so it's still confirmation it allows you to",
    "start": "1870390",
    "end": "1876930"
  },
  {
    "text": "do more with fewer lines of code basically it's all open source and instead of writing these 200 lines of",
    "start": "1876930",
    "end": "1883380"
  },
  {
    "text": "code to define a function basically you end up with 20 which is much better in my opinion so here we are defining a",
    "start": "1883380",
    "end": "1890190"
  },
  {
    "text": "function and we define it as a AWS turbulence function we define where the code is what run time we're using we",
    "start": "1890190",
    "end": "1896490"
  },
  {
    "text": "define what the function can do and then we also define what events can invoke this function in this case we are",
    "start": "1896490",
    "end": "1902250"
  },
  {
    "text": "defining a proxy API so that every API request under a given API will be",
    "start": "1902250",
    "end": "1908430"
  },
  {
    "text": "managed by this lambda function but you know you can map every endpoint every path of your API even every method like",
    "start": "1908430",
    "end": "1916140"
  },
  {
    "text": "get post put to a different lambda function if you want and you know at very low scale that's actually the best",
    "start": "1916140",
    "end": "1921690"
  },
  {
    "text": "practice try to map individual resources and methods to individual function that",
    "start": "1921690",
    "end": "1927330"
  },
  {
    "text": "can scale independently and can be optimized for the specific request",
    "start": "1927330",
    "end": "1933050"
  },
  {
    "text": "so what Sam gives you is a couple like two or three spatial resources as well so you can define a",
    "start": "1933050",
    "end": "1940170"
  },
  {
    "text": "service function you can define a service API you can find a service simple table which is actually a",
    "start": "1940170",
    "end": "1946290"
  },
  {
    "text": "DynamoDB table but you can define it with like three or four lines of llamó or JSON instead of you know 20 or 30 so",
    "start": "1946290",
    "end": "1954060"
  },
  {
    "text": "it's just convenient way of defining your service functions with fewer lines of code this is even a local tool if",
    "start": "1954060",
    "end": "1962040"
  },
  {
    "text": "you're using it all SM to define your application then you can use these awsm CLI it's a CLI terminal tool that allows",
    "start": "1962040",
    "end": "1969600"
  },
  {
    "text": "you to emulate and run lambda on your machine on your laptop a maybe you are offline maybe you want to run unit tests",
    "start": "1969600",
    "end": "1976260"
  },
  {
    "text": "on your machine so Sam will do that for you and we'll use docker under the hood to emulate lambda and API GAE to as well",
    "start": "1976260",
    "end": "1984420"
  },
  {
    "text": "so you can do local API in book and it will use API getting a lambda together on your machine but let's raise",
    "start": "1984420",
    "end": "1992920"
  },
  {
    "text": "a bit safety bar can we do better so we mentioned all the techniques that we can use so what do we need to get beyond",
    "start": "1992920",
    "end": "2000570"
  },
  {
    "text": "that to do even better so yes we want to do infrastructure as code because that's the best practice yes we want to be",
    "start": "2000570",
    "end": "2006960"
  },
  {
    "text": "smart about monitoring about collecting the right metrics about collecting real time live metrics during a deployment so",
    "start": "2006960",
    "end": "2014340"
  },
  {
    "text": "that maybe we can go something if something goes wrong we want to have different data driven strategies to",
    "start": "2014340",
    "end": "2020220"
  },
  {
    "text": "react to what goes wrong if it goes wrong maybe want to even customize maybe",
    "start": "2020220",
    "end": "2028140"
  },
  {
    "text": "with some hooks you know if this happens run this other function or before actually starting the deployment run",
    "start": "2028140",
    "end": "2035640"
  },
  {
    "text": "this other function just you know for third-party tools integration or even just to do even more tests before",
    "start": "2035640",
    "end": "2041970"
  },
  {
    "text": "actually starting the deployments so these are all interesting thing in my",
    "start": "2041970",
    "end": "2047790"
  },
  {
    "text": "opinion the best thing you can do is to have this functionality of automatically",
    "start": "2047790",
    "end": "2052908"
  },
  {
    "text": "rolling back to the previous version of your code as soon as there is some sort",
    "start": "2052909",
    "end": "2058020"
  },
  {
    "text": "of error so you can say hey this is the new code but run it only on 10% of the",
    "start": "2058020",
    "end": "2064858"
  },
  {
    "text": "new traffic coming to this API if anything goes wrong if there is any error during this the first minute",
    "start": "2064859",
    "end": "2071878"
  },
  {
    "text": "rollback for me I don't want to do it just do it for me so that's what this",
    "start": "2071879",
    "end": "2077010"
  },
  {
    "text": "real automation and that gives you like that safety bar so that I can literally get push whatever and in a minute or two",
    "start": "2077010",
    "end": "2084570"
  },
  {
    "text": "it'll be rolled back so at very large scale if you have millions and millions of requests per minute you probably want",
    "start": "2084570",
    "end": "2091080"
  },
  {
    "text": "to allocate not one percent but zero zero one percent to this new code and see if anything happens there's actually",
    "start": "2091080",
    "end": "2096868"
  },
  {
    "text": "what we also do at Amazon and at AWS so you can use code build for that",
    "start": "2096869",
    "end": "2102930"
  },
  {
    "text": "Kolbe it allows you to run your tests and - basically it's like you give it a script you give it a configuration file",
    "start": "2102930",
    "end": "2111330"
  },
  {
    "text": "and you tell it what to do during the build phase ok so the build",
    "start": "2111330",
    "end": "2116520"
  },
  {
    "text": "phase might look like this you have some environment variables you have different phases like okay in the",
    "start": "2116520",
    "end": "2122090"
  },
  {
    "text": "install phase install the dependencies in the build phase do some linting in",
    "start": "2122090",
    "end": "2127310"
  },
  {
    "text": "the build into the actual build phase run some tests and you know when everything is fine go and build the",
    "start": "2127310",
    "end": "2134660"
  },
  {
    "text": "artifact in this case it's using a comment confirmation package to actually create a zip file the artifact of your",
    "start": "2134660",
    "end": "2141500"
  },
  {
    "text": "function so you can customize this of course if you're using Java if using Python this will look a bit different",
    "start": "2141500",
    "end": "2147350"
  },
  {
    "text": "but the idea is that you can you know automate and provide all the different steps in your CI CD pipeline and the",
    "start": "2147350",
    "end": "2154460"
  },
  {
    "text": "best thing is you can there is a feature a functionality of code deploy that integrates with lambda so you can say I",
    "start": "2154460",
    "end": "2161330"
  },
  {
    "text": "want to do a Bluegreen deployment I want to choose from one of these strategies",
    "start": "2161330",
    "end": "2167060"
  },
  {
    "text": "data-driven strategies for example we are going to see the 10% every one",
    "start": "2167060",
    "end": "2173120"
  },
  {
    "text": "minute for example so every minute after the deployment we will allocate 10% more",
    "start": "2173120",
    "end": "2178700"
  },
  {
    "text": "traffic to the new version of our code and if anything goes back it goes wrong we want to rollback automatically so",
    "start": "2178700",
    "end": "2186740"
  },
  {
    "text": "yeah we can call this Bluegreen and you know this is enabled by a functionality of lambda which is called alias traffic",
    "start": "2186740",
    "end": "2192500"
  },
  {
    "text": "shifting so you have this alias is that point to your function two different versions of your code and you can say",
    "start": "2192500",
    "end": "2197870"
  },
  {
    "text": "this Verdes alias is pointing to two different versions in a weighted way so you can say 90% 10% that that's the",
    "start": "2197870",
    "end": "2205040"
  },
  {
    "text": "functionality and code deploy does that for you so this is what it looks like you know the deployment starts you have",
    "start": "2205040",
    "end": "2211670"
  },
  {
    "text": "90% allocated to the previous version of the code and 10% to the new version of the code and you know if everything goes",
    "start": "2211670",
    "end": "2218900"
  },
  {
    "text": "alright you go on and 60 40 and 50 50 and you know at some point 100% of the",
    "start": "2218900",
    "end": "2224450"
  },
  {
    "text": "code of the of the requests are being managed by the new version of your code and you know this like the deployment is",
    "start": "2224450",
    "end": "2230830"
  },
  {
    "text": "succeeded but what happens when things go wrong you know if we build this isn't",
    "start": "2230830",
    "end": "2237020"
  },
  {
    "text": "not for the happy path the happy path is beautiful if we build this is because things break ok so let me show you what",
    "start": "2237020",
    "end": "2243170"
  },
  {
    "text": "happens when things actually break and I hope I have at least yeah we have enough time great so I have a service",
    "start": "2243170",
    "end": "2251030"
  },
  {
    "text": "application it's actually an API it's super simple it's one end point slide can you see at all",
    "start": "2251030",
    "end": "2258359"
  },
  {
    "text": "so it's slash test it's a gat end point let me show you what it does it doesn't",
    "start": "2258359",
    "end": "2263670"
  },
  {
    "text": "do much actually oops wrong here so I'm",
    "start": "2263670",
    "end": "2274619"
  },
  {
    "text": "calling this slash test endpoint and what the end point is doing is just I'll show you the actual code in no js' the",
    "start": "2274619",
    "end": "2281910"
  },
  {
    "text": "end point is reading from a database and coming back okay if everything is alright and KO if something is wrong",
    "start": "2281910",
    "end": "2288210"
  },
  {
    "text": "okay is doing almost nothing but let me show you what the code looks like so",
    "start": "2288210",
    "end": "2294570"
  },
  {
    "text": "first of all I've defined my service application in a llamo file and here I have my service function I'm using node",
    "start": "2294570",
    "end": "2302210"
  },
  {
    "text": "I've my policies I have some environment variables and then I'm defining the",
    "start": "2302210",
    "end": "2307290"
  },
  {
    "text": "event a slash test it's a get method so nothing crazy here but then I've also",
    "start": "2307290",
    "end": "2313109"
  },
  {
    "text": "defined this configuration here which is saying hey use the alive alias when you",
    "start": "2313109",
    "end": "2318420"
  },
  {
    "text": "go to when you deploy use the live alias to do traffic shifting and use the linear 10% every one minute deployment",
    "start": "2318420",
    "end": "2326070"
  },
  {
    "text": "strategy so every meaning we give 10% more and monitor these two alarms and if",
    "start": "2326070",
    "end": "2332760"
  },
  {
    "text": "any of these two alarms comes up with a problem with a with an error rollback",
    "start": "2332760",
    "end": "2338609"
  },
  {
    "text": "okay and that's how you do it as simple as that and down here I'm defining the two alarms as well that basically just",
    "start": "2338609",
    "end": "2346680"
  },
  {
    "text": "monitored the number of errors generated by this new function okay so yeah so the",
    "start": "2346680",
    "end": "2356010"
  },
  {
    "text": "metric name I'm monitoring is errors basically but let me show you the code",
    "start": "2356010",
    "end": "2361109"
  },
  {
    "text": "the code isn't doing really too much so we are initializing some clients we are",
    "start": "2361109",
    "end": "2366359"
  },
  {
    "text": "using dynamodb we are reading a table name from the environment variables we have a little utility to create the",
    "start": "2366359",
    "end": "2372990"
  },
  {
    "text": "response with the status and the body of the response then we have another utility function to actually go and read",
    "start": "2372990",
    "end": "2379260"
  },
  {
    "text": "from DynamoDB it doesn't matter what we are reading for the purposes of this demo but we are reading from database",
    "start": "2379260",
    "end": "2385220"
  },
  {
    "text": "and then we have the actual we call this the handler of your function and the handler comes with an event a context",
    "start": "2385220",
    "end": "2392700"
  },
  {
    "text": "and a callback actually the callback is a bit older I could use a new syntax you know with a sink await and the beautiful",
    "start": "2392700",
    "end": "2399210"
  },
  {
    "text": "new JavaScript stuff this is a bit of an older code base but it doesn't matter so",
    "start": "2399210",
    "end": "2404609"
  },
  {
    "text": "what we're doing is we are preparing the query we are running the query if everything goes right we return yeah if",
    "start": "2404609",
    "end": "2413160"
  },
  {
    "text": "there is an error we return item not found if everything is right we return 200 if there is any problem with the",
    "start": "2413160",
    "end": "2419910"
  },
  {
    "text": "callback we just return 500 okay so that's no business logic almost it's 20",
    "start": "2419910",
    "end": "2426240"
  },
  {
    "text": "lines of actual code so let me show you and Here I am using so if you didn't",
    "start": "2426240",
    "end": "2433920"
  },
  {
    "text": "notice here this is the cloud9 IDE in the cloud I'm not using vs code or",
    "start": "2433920",
    "end": "2440310"
  },
  {
    "text": "anything this is running in the cloud and it comes with you know a CLI I have my terminals here so I've written a",
    "start": "2440310",
    "end": "2447060"
  },
  {
    "text": "couple of script that will help me demonstrate what we're doing so I'm",
    "start": "2447060",
    "end": "2453090"
  },
  {
    "text": "going to pull our endpoint what anyway",
    "start": "2453090",
    "end": "2459510"
  },
  {
    "text": "okay bash scripts Paul and then I need the endpoint in input okay so this",
    "start": "2459510",
    "end": "2467280"
  },
  {
    "text": "script is polling our endpoint may be a few times a second and then I have another script that is tailing a local",
    "start": "2467280",
    "end": "2475440"
  },
  {
    "text": "file with some you know what is the response and I'll lock how long did the",
    "start": "2475440",
    "end": "2480570"
  },
  {
    "text": "response take to come back so just to show you what's going on and now we are going to do a deployment live to see you know",
    "start": "2480570",
    "end": "2486930"
  },
  {
    "text": "what changes during during the deployment so let's imagine that our",
    "start": "2486930",
    "end": "2495230"
  },
  {
    "text": "favorite developer will go and introduce a very nasty bug like that okay that's a",
    "start": "2495230",
    "end": "2504450"
  },
  {
    "text": "very bad bug that's a hundred percent of the times we are going to fail they request no matter what was the input we",
    "start": "2504450",
    "end": "2510690"
  },
  {
    "text": "are just failing okay so this doesn't happen very often if we have pair programming if you have code reviews you",
    "start": "2510690",
    "end": "2517080"
  },
  {
    "text": "probably can avoid this but I want to show you what in the worst case ever we're a hundred percent of the new requests are going to",
    "start": "2517080",
    "end": "2524070"
  },
  {
    "text": "fail okay so this is my new code and what I'm going to do is I'm running",
    "start": "2524070",
    "end": "2529350"
  },
  {
    "text": "another script that's doing the deployment for me and this script is not",
    "start": "2529350",
    "end": "2535170"
  },
  {
    "text": "doing too much it is using some variables packaging creating the",
    "start": "2535170",
    "end": "2540570"
  },
  {
    "text": "artifact and deploying to production okay so I'm not actually integrating everything into SD ICD I'm just you know",
    "start": "2540570",
    "end": "2546930"
  },
  {
    "text": "deploy to production just to show you that you can handle all sort of cases even without a CI CD so let's go and",
    "start": "2546930",
    "end": "2553680"
  },
  {
    "text": "apply to production we have introduced an error we are going to monitor the",
    "start": "2553680",
    "end": "2560970"
  },
  {
    "text": "polling let's see maybe in a few seconds some of the requests we expect roughly",
    "start": "2560970",
    "end": "2567630"
  },
  {
    "text": "10% of these requests to fail right because we are using a 10% every one",
    "start": "2567630",
    "end": "2573750"
  },
  {
    "text": "minute data-driven strategy and we are failing a hundred percent of the times in our new code so at some point it",
    "start": "2573750",
    "end": "2580920"
  },
  {
    "text": "should actually fail let's wait for it so let me show you what's happening under the hood in our AWS account I'm",
    "start": "2580920",
    "end": "2588870"
  },
  {
    "text": "using Amazon cloud formation for the deployment and at some point we're going",
    "start": "2588870",
    "end": "2593970"
  },
  {
    "text": "to see some new events happening so let me see what's going on yeah",
    "start": "2593970",
    "end": "2600780"
  },
  {
    "text": "so this is our stack I'm waiting for yeah so it started already so if I click",
    "start": "2600780",
    "end": "2607470"
  },
  {
    "text": "here I can already see that the deployment has started and we are",
    "start": "2607470",
    "end": "2612660"
  },
  {
    "text": "elevating 10% of the new of the request to our new code indeed if I go back here",
    "start": "2612660",
    "end": "2618720"
  },
  {
    "text": "I see some errors right maybe it's too small to read but what the different",
    "start": "2618720",
    "end": "2624450"
  },
  {
    "text": "lines are saying is internal server error because there are no servers but whatever it serval is right so 10% of",
    "start": "2624450",
    "end": "2633300"
  },
  {
    "text": "the requests are failing and what we expect to happen is that as soon as the",
    "start": "2633300",
    "end": "2638850"
  },
  {
    "text": "cloud watch alarm will raise cloud deploy will automatically go back to our",
    "start": "2638850",
    "end": "2644700"
  },
  {
    "text": "previous version of the code so let's give it another few seconds and as you",
    "start": "2644700",
    "end": "2650250"
  },
  {
    "text": "can see here you can monitor what happened you can you could have a pre-deployment validation a",
    "start": "2650250",
    "end": "2655680"
  },
  {
    "text": "post-deployment validation to run your custom code and as you can see it already happened okay it detected a",
    "start": "2655680",
    "end": "2661530"
  },
  {
    "text": "failure it's telling me the deployment is cancelled to an abort request and if",
    "start": "2661530",
    "end": "2666570"
  },
  {
    "text": "I go back to my polling I'm already hundred percent okay right so is this",
    "start": "2666570",
    "end": "2672750"
  },
  {
    "text": "safe I think it's much safer than what most people do you can integrate it with",
    "start": "2672750",
    "end": "2679230"
  },
  {
    "text": "the CI CD pipeline or you can do it with deploy to production manually so you are free to choose but the best thing is in",
    "start": "2679230",
    "end": "2685680"
  },
  {
    "text": "the worst case even if your new code fails 90% of the time you go back in a minute without any you know waking up",
    "start": "2685680",
    "end": "2691500"
  },
  {
    "text": "somebody which is what usually happens so when a typical use case you want to",
    "start": "2691500",
    "end": "2696780"
  },
  {
    "text": "have zero point zero zero percent of your traffic and you're not failing at the percent of time so depending on your",
    "start": "2696780",
    "end": "2702540"
  },
  {
    "text": "scale you may want to allocate different you know different percentage of your traffic to these new potentially broken",
    "start": "2702540",
    "end": "2709860"
  },
  {
    "text": "version of your applications and let me stop this I have another script that is",
    "start": "2709860",
    "end": "2717720"
  },
  {
    "text": "doing some statistics so I've started",
    "start": "2717720",
    "end": "2722730"
  },
  {
    "text": "polling much earlier then the deployment started so I rough Li 10% of the",
    "start": "2722730",
    "end": "2729240"
  },
  {
    "text": "requests shoot at fade but since we started polling until I stopped polling",
    "start": "2729240",
    "end": "2734490"
  },
  {
    "text": "only 2% of the requests failed so only 13 requests failed in that roughly 60",
    "start": "2734490",
    "end": "2741120"
  },
  {
    "text": "second interval where everything was broken okay I think that's acceptable if it's not if for youth routine requests",
    "start": "2741120",
    "end": "2748170"
  },
  {
    "text": "in a minute is too much you can lower the percentage so that's up to you cool",
    "start": "2748170",
    "end": "2755700"
  },
  {
    "text": "we have a few minutes left and that's all I had for you today I hope you enjoyed breaking production live on",
    "start": "2755700",
    "end": "2761940"
  },
  {
    "text": "stage with me and in a safe way though so thank you for coming",
    "start": "2761940",
    "end": "2767360"
  },
  {
    "text": "so do we have time for questions yes anybody in the audience have a question",
    "start": "2768650",
    "end": "2774930"
  },
  {
    "text": "we'll start with the audience first please raise your hand I'll run the mic over",
    "start": "2774930",
    "end": "2779270"
  },
  {
    "text": "one second is it on",
    "start": "2784030",
    "end": "2788190"
  },
  {
    "text": "we are live yes when do you want to use for a game instead of lambda sorry can",
    "start": "2792490",
    "end": "2798970"
  },
  {
    "text": "you repeat when do you want to use Fargate instead of lambda for gate instead of lambda so for those of you",
    "start": "2798970",
    "end": "2805120"
  },
  {
    "text": "who do not know forget forget some people consider it servile as some people do not basically it's a way to",
    "start": "2805120",
    "end": "2811810"
  },
  {
    "text": "deploy docker containers on Amazon ECS or our managed kubernetes on AWS but",
    "start": "2811810",
    "end": "2819810"
  },
  {
    "text": "instead of managing the cluster you know you don't see the cluster we take care of that for you you only think about",
    "start": "2819810",
    "end": "2825520"
  },
  {
    "text": "docker containers and things like that which is a bit more service than managing the cluster yourself so when do",
    "start": "2825520",
    "end": "2833230"
  },
  {
    "text": "you use for gate instead o of lambda well there are a few use cases that make sense basically if you need more than",
    "start": "2833230",
    "end": "2841930"
  },
  {
    "text": "trigger byte three gigabytes of lambda or of memory for example lambda does not allow you to go beyond that so if you",
    "start": "2841930",
    "end": "2847960"
  },
  {
    "text": "need a terabyte of memory for some reason that might be a better use case or if you need to run your workloads for",
    "start": "2847960",
    "end": "2855310"
  },
  {
    "text": "I know half an hour or five hours you know every lambda invocation as a maximum time out of 15 minutes okay if",
    "start": "2855310",
    "end": "2863470"
  },
  {
    "text": "you have a micro services architecture each individual micro service shouldn't",
    "start": "2863470",
    "end": "2869170"
  },
  {
    "text": "run for more than fifteen minutes so that's the idea but if you have I don't know a video processing use case that",
    "start": "2869170",
    "end": "2875140"
  },
  {
    "text": "you know the only thing you can do is running on a long-running server maybe Fargate is a better use case for it or",
    "start": "2875140",
    "end": "2882150"
  },
  {
    "text": "there are other use cases where you have like operating system dependencies that",
    "start": "2882150",
    "end": "2887200"
  },
  {
    "text": "are specific to I don't know like Fortran or C++ or you know some very",
    "start": "2887200",
    "end": "2892240"
  },
  {
    "text": "custom dependencies that you would need to install in the operating system okay in that case I'm not saying it's",
    "start": "2892240",
    "end": "2897820"
  },
  {
    "text": "impossible I'm saying with lambda it's a bit more work so some other some folks consider for get a better fit for it so",
    "start": "2897820",
    "end": "2904960"
  },
  {
    "text": "you just prepare document you install whatever you want on the operating system and then you just apply to production",
    "start": "2904960",
    "end": "2911010"
  },
  {
    "text": "you run it for an hour five hours or ten seconds with your custom dependencies so in lambda that is possible but you still",
    "start": "2911010",
    "end": "2918540"
  },
  {
    "text": "have some limitation for example on how much how big can you be your deployment",
    "start": "2918540",
    "end": "2923579"
  },
  {
    "text": "package which is like five hundred megabytes or so so for example if you are deploying machine learning models that are 2 gigabytes in size okay that",
    "start": "2923579",
    "end": "2931200"
  },
  {
    "text": "might be a bit tricky with lambda and forget might be a good use case for it so there are use cases as I said before",
    "start": "2931200",
    "end": "2936390"
  },
  {
    "text": "it might be 10 or 15 percent of what's up there left that service isn't",
    "start": "2936390",
    "end": "2941970"
  },
  {
    "text": "handling yeah cool so one of the related conversations that we've been having in",
    "start": "2941970",
    "end": "2948450"
  },
  {
    "text": "twitch is how to work around this 15 minute timeout limit in that's it's a",
    "start": "2948450",
    "end": "2954450"
  },
  {
    "text": "good one so there are different ways to overcome the 15 minutes limitation one",
    "start": "2954450",
    "end": "2959550"
  },
  {
    "text": "is it depends on the use case but if it's a very simple use case you might",
    "start": "2959550",
    "end": "2964829"
  },
  {
    "text": "even want to within the function itself there is a context variable you have the",
    "start": "2964829",
    "end": "2971250"
  },
  {
    "text": "event and the context for every invocation and in the context variable object you can ask it how many",
    "start": "2971250",
    "end": "2978030"
  },
  {
    "text": "milliseconds have I left in this invocation so some people are doing hey",
    "start": "2978030",
    "end": "2983880"
  },
  {
    "text": "when you have less than 5 seconds left in your 15 minutes invocation stop everything you're doing and rain vote",
    "start": "2983880",
    "end": "2990720"
  },
  {
    "text": "yourself and then you can run for another 15 minutes ok it's not ideal and recursion is tricky whatever you do",
    "start": "2990720",
    "end": "2996300"
  },
  {
    "text": "especially with architectures a better way in my opinion would be just to",
    "start": "2996300",
    "end": "3001930"
  },
  {
    "text": "decompose these people this I don't know 25 30 60 minutes of computation into",
    "start": "3001930",
    "end": "3007130"
  },
  {
    "text": "smaller chunks and maybe orchestrate them with the state machine visually to say first do this for five minutes and",
    "start": "3007130",
    "end": "3013339"
  },
  {
    "text": "then split maybe in parallel and run for another six and eight and when they're done go back and do some final",
    "start": "3013339",
    "end": "3019819"
  },
  {
    "text": "computation for ten minutes okay this way is much easier to decompose and to build an orchestration state machine",
    "start": "3019819",
    "end": "3027470"
  },
  {
    "text": "instead of having one function running for a half an hour which you can't so I hope it makes sense for you and if you",
    "start": "3027470",
    "end": "3033740"
  },
  {
    "text": "have other questions I'm here or at the booth later thank you everybody for coming wait what what one quick last",
    "start": "3033740",
    "end": "3038900"
  },
  {
    "text": "question from AK which stem so says would you say that Sam is a same level of maturity as serverless you",
    "start": "3038900",
    "end": "3046140"
  },
  {
    "text": "mean the service framework so that is another good question it depends on what",
    "start": "3046140",
    "end": "3051510"
  },
  {
    "text": "you're doing what you're building and what service you're using what plugins you're using so basically the disturbance framework is a framework",
    "start": "3051510",
    "end": "3057420"
  },
  {
    "text": "that was born maybe more than two two and a half years ago and it really allowed the community to grow really",
    "start": "3057420",
    "end": "3063809"
  },
  {
    "text": "quickly because it solve a lot of challenges for servlet developers Italy as Sam is what I've shown you and it's",
    "start": "3063809",
    "end": "3070049"
  },
  {
    "text": "another framework or better a CloudFormation extension that allows you to do almost the same things only on AWS",
    "start": "3070049",
    "end": "3077339"
  },
  {
    "text": "so there are considerable similar things let's say it really depends on what",
    "start": "3077339",
    "end": "3084780"
  },
  {
    "text": "you're building so if you're using I don't know a special plugin that is available only for service framework and",
    "start": "3084780",
    "end": "3090390"
  },
  {
    "text": "it's not real on Sam you know you might want to stick to the source framework or if you're using other vendors it might",
    "start": "3090390",
    "end": "3096030"
  },
  {
    "text": "be you know a good fit because it supports multiple vendors I haven't seen",
    "start": "3096030",
    "end": "3101790"
  },
  {
    "text": "too many people doing that but you know if you are that that's that's for you if you are only a little yes if it's a new",
    "start": "3101790",
    "end": "3107819"
  },
  {
    "text": "project if you want to use some of the new cool features like safe deployments or some of the new stuff that Sam is",
    "start": "3107819",
    "end": "3113760"
  },
  {
    "text": "integrating as soon as possible when they go live you know I think Sam is getting pretty much mature as well so it",
    "start": "3113760",
    "end": "3121500"
  },
  {
    "text": "depends as usual I would do case by case there is no you know one size fits all",
    "start": "3121500",
    "end": "3127170"
  },
  {
    "text": "decision in my opinion cool thank you again",
    "start": "3127170",
    "end": "3132430"
  },
  {
    "text": "[Applause]",
    "start": "3132430",
    "end": "3135739"
  }
]