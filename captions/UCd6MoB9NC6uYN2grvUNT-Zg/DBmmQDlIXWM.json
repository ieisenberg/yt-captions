[
  {
    "text": "Hi, and welcome to 'This is My Architecture'.",
    "start": "7263",
    "end": "9189"
  },
  {
    "text": "Today, I'm here with Denis from Spryker, hi Denis.",
    "start": "9189",
    "end": "12096"
  },
  {
    "text": "Hi Stephan, thank you for inviting me. ",
    "start": "12241",
    "end": "15049"
  },
  {
    "text": "Welcome, so tell us a bit about what Spryker is doing.",
    "start": "15049",
    "end": "18133"
  },
  {
    "text": "Spryker provides commerce cloud operating system",
    "start": "18733",
    "end": "23842"
  },
  {
    "text": "that is a platform to build\n custom sophisticated business models.",
    "start": "24187",
    "end": "28364"
  },
  {
    "text": "You can find our customers in the business verticals \nlike B2C, B2B, and marketplaces",
    "start": "28794",
    "end": "33305"
  },
  {
    "text": "building new challengers of eBay, \nAlibaba, and even Amazon Marketplace.",
    "start": "33305",
    "end": "37971"
  },
  {
    "text": "Awesome, okay, cool. \nSo what are we looking at today?",
    "start": "37971",
    "end": "41208"
  },
  {
    "text": "Today we'll be looking at ACP\n Application Composition Platform,",
    "start": "41404",
    "end": "45530"
  },
  {
    "text": "which connects 2 worlds, the world of SaaS applications",
    "start": "45530",
    "end": "49178"
  },
  {
    "text": "and the world of PaaS applications built by developers.",
    "start": "49179",
    "end": "53077"
  },
  {
    "text": "Cool, so before we dive into the architecture,",
    "start": "53077",
    "end": "55620"
  },
  {
    "text": "can you please tell us a bit \nabout the scale of what you're building?",
    "start": "55620",
    "end": "58647"
  },
  {
    "text": "Oh, of course.",
    "start": "58647",
    "end": "60239"
  },
  {
    "text": "At the very beginning we aim \nfor 15 million messages",
    "start": "60360",
    "end": "64988"
  },
  {
    "text": "flying everyday.",
    "start": "64988",
    "end": "67046"
  },
  {
    "text": "Considering 200 consumers,",
    "start": "67400",
    "end": "70067"
  },
  {
    "text": "we get about 3 billion messages",
    "start": "70067",
    "end": "73505"
  },
  {
    "text": "that will be consumed and transferred daily.",
    "start": "73505",
    "end": "77504"
  },
  {
    "text": "Awesome. Okay, cool. ",
    "start": "77504",
    "end": "79068"
  },
  {
    "text": "So now can you maybe also tell us a bit \nabout the key players of this architecture ",
    "start": "79068",
    "end": "83174"
  },
  {
    "text": "and then I think we can dive into a business scenario?",
    "start": "83174",
    "end": "85601"
  },
  {
    "text": "Yeah, of course.",
    "start": "85601",
    "end": "87065"
  },
  {
    "text": "So an example of the use case would be, ",
    "start": "87066",
    "end": "90563"
  },
  {
    "text": "when our customers would like \nto use a standard PM system",
    "start": "90563",
    "end": "94106"
  },
  {
    "text": "but at the same time would like to introduce \na very custom product feed or product catalog ",
    "start": "94106",
    "end": "98833"
  },
  {
    "text": "with personalization engine and other features.",
    "start": "98833",
    "end": "101501"
  },
  {
    "text": "Then they would make sure that these 2 applications\n can communicate with each other",
    "start": "101893",
    "end": "106758"
  },
  {
    "text": "and that's where ACP comes to the game.",
    "start": "106759",
    "end": "108974"
  },
  {
    "text": "Understood, so what were the key\n non-functional challenges ",
    "start": "109403",
    "end": "112685"
  },
  {
    "text": "that you had to solve with this platform?",
    "start": "112685",
    "end": "114481"
  },
  {
    "text": "One of the major challenges is account isolation.",
    "start": "114915",
    "end": "118600"
  },
  {
    "text": "Because we want to make sure that not only\nthe tenants are isolated from each other",
    "start": "119001",
    "end": "122275"
  },
  {
    "text": "but also PBCs \nor SaaS applications are also isolated.",
    "start": "122275",
    "end": "126185"
  },
  {
    "text": "But it comes with 2 types of isolation.",
    "start": "126492",
    "end": "129349"
  },
  {
    "text": "One is a cross account isolation, \nbut also regional isolation.",
    "start": "129350",
    "end": "132939"
  },
  {
    "text": "We want to provide a distributed\n system over multiple regions.",
    "start": "132939",
    "end": "136601"
  },
  {
    "text": "Okay, so let's start with the business scenario \nand then dive into the architecture. ",
    "start": "136782",
    "end": "140505"
  },
  {
    "text": "Where do we start?",
    "start": "140540",
    "end": "142073"
  },
  {
    "text": "Usually we start with a message.",
    "start": "142073",
    "end": "144403"
  },
  {
    "text": "If, let's say a PM system on the left side",
    "start": "144404",
    "end": "146978"
  },
  {
    "text": "would like to provide\n the information about price update, ",
    "start": "146978",
    "end": "150069"
  },
  {
    "text": "it will throw a message in the API gateway",
    "start": "150070",
    "end": "153419"
  },
  {
    "text": "that will send it to a Lambda function,",
    "start": "153419",
    "end": "157520"
  },
  {
    "text": "which will play multiple roles in this case.",
    "start": "157865",
    "end": "161464"
  },
  {
    "text": "What are the roles?",
    "start": "161464",
    "end": "162602"
  },
  {
    "text": "The first role is gluing these 2 services",
    "start": "162834",
    "end": "165556"
  },
  {
    "text": "because as you know, not all AWS\n services have direct connectivity.",
    "start": "165556",
    "end": "169341"
  },
  {
    "text": "So this Lambda function will connect API Gateway",
    "start": "169457",
    "end": "172768"
  },
  {
    "text": "and the SNS service, and apply special rules.",
    "start": "172768",
    "end": "177595"
  },
  {
    "text": "In this case will be dynamic rules \ncoming from the DynamoDB,",
    "start": "177595",
    "end": "181318"
  },
  {
    "text": "which we call in Spryker, Application Tenant Registery Service,",
    "start": "181318",
    "end": "184691"
  },
  {
    "text": "which will define what rules will be applied\n to the SNS distribution system.",
    "start": "184691",
    "end": "188767"
  },
  {
    "text": "Okay, so can you tell us \na bit more about the rules",
    "start": "188768",
    "end": "190992"
  },
  {
    "text": "until the message lands on a FIFO topic?",
    "start": "191702",
    "end": "195636"
  },
  {
    "text": "Yeah, of course.",
    "start": "195636",
    "end": "197156"
  },
  {
    "text": "These rules contain information \nabout who should consume this message",
    "start": "197156",
    "end": "201047"
  },
  {
    "text": "and are they authorized doing so?",
    "start": "201047",
    "end": "202991"
  },
  {
    "text": "Okay, so we are doing content based routing here.",
    "start": "202991",
    "end": "205489"
  },
  {
    "text": "- And also before, and we're doing authentication authorization. \n- Exactly.",
    "start": "205490",
    "end": "208967"
  },
  {
    "text": "Okay, so I see you have SNS FIFO here on the diagram.",
    "start": "208967",
    "end": "212206"
  },
  {
    "text": "Why didn't you go for plain SNS \nor a service like EventBridge?",
    "start": "212206",
    "end": "216489"
  },
  {
    "text": "The reason is simple because not all tenant applications ",
    "start": "217086",
    "end": "220644"
  },
  {
    "text": "and also PVC applications are capable \nof non-sequential message processing. ",
    "start": "220644",
    "end": "225645"
  },
  {
    "text": "So we need to make sure that our partners \nand customers are secure on that side ",
    "start": "225645",
    "end": "230658"
  },
  {
    "text": "and we can guarantee \nthe sequence of message delivery.",
    "start": "230658",
    "end": "234090"
  },
  {
    "text": "Awesome. Understood. \nSo the message is here on the topic, so what happens next?",
    "start": "234291",
    "end": "238238"
  },
  {
    "text": "Once this message with rules\n that you have taken from the DynamoDB",
    "start": "238714",
    "end": "242524"
  },
  {
    "text": "come to the SNS FIFO,",
    "start": "242524",
    "end": "244561"
  },
  {
    "text": "it goes to the SQS service",
    "start": "244561",
    "end": "249048"
  },
  {
    "text": "on the tenant side,",
    "start": "249048",
    "end": "251187"
  },
  {
    "text": "where it'll wait until the tenant application \nwill process them asynchronously.",
    "start": "251187",
    "end": "255045"
  },
  {
    "text": "Okay, so then your tenants can read the message\n from the queue and they're good to go. ",
    "start": "255045",
    "end": "258876"
  },
  {
    "text": "- Exactly. \n- Okay, and now,",
    "start": "258877",
    "end": "260946"
  },
  {
    "text": "looking from the tenant side, what's the flow? ",
    "start": "261415",
    "end": "263087"
  },
  {
    "text": "Is it very similar or are there any \nspecial tricks that you're doing?",
    "start": "263087",
    "end": "265954"
  },
  {
    "text": "That's exactly the question \nthat we as architects ask ourselves",
    "start": "266793",
    "end": "270046"
  },
  {
    "text": "and the flow will be very similar \nto what we've seen before. ",
    "start": "270046",
    "end": "273653"
  },
  {
    "text": "The message will come to the API Gateway,",
    "start": "273653",
    "end": "276539"
  },
  {
    "text": "which will hit the Lambda function \nfrom the Lambda function it will go to SNS.",
    "start": "276539",
    "end": "280526"
  },
  {
    "text": "And from SNS it will flow to the SQS service,",
    "start": "280526",
    "end": "285840"
  },
  {
    "text": "on the left side, on the PBC side.",
    "start": "286357",
    "end": "288330"
  },
  {
    "text": "- Oh, I see. \n- This architecture makes sure that our developers ",
    "start": "288330",
    "end": "291194"
  },
  {
    "text": "on both sides work with the same interfaces ",
    "start": "291195",
    "end": "293695"
  },
  {
    "text": "and do not need to learn \nnew technology stacks for just switching sides.",
    "start": "293695",
    "end": "296847"
  },
  {
    "text": "I like that you mentioned developer productivity. ",
    "start": "297364",
    "end": "299671"
  },
  {
    "text": "I would also like to go back\n to our non-functional requirements ",
    "start": "299671",
    "end": "302711"
  },
  {
    "text": "security and also tenant isolation,\n how did you achieve that?",
    "start": "302712",
    "end": "307069"
  },
  {
    "text": "Yeah, basically using the API Gateway",
    "start": "307462",
    "end": "311196"
  },
  {
    "text": "and SNS with dynamic rules,",
    "start": "311196",
    "end": "313446"
  },
  {
    "text": "we can achieve full isolation between the messaging. ",
    "start": "313446",
    "end": "316112"
  },
  {
    "text": "And the base for that is JWT token,",
    "start": "316112",
    "end": "320825"
  },
  {
    "text": "that include information about PBC or a tenant ID ",
    "start": "320825",
    "end": "324173"
  },
  {
    "text": "that will be then used in the routing process.",
    "start": "324173",
    "end": "326547"
  },
  {
    "text": "I see, so you can make sure \nthat the right customer sends the data",
    "start": "326547",
    "end": "331215"
  },
  {
    "text": "and you ensure also that the right consumer\n receives the data.",
    "start": "331215",
    "end": "333863"
  },
  {
    "text": "Exactly. And also that the payload is not disturbed.",
    "start": "333864",
    "end": "336821"
  },
  {
    "text": "I see. Cool. So that's the as is architecture.",
    "start": "336821",
    "end": "339953"
  },
  {
    "text": "I think you're moving forward,\nwhat are the key initiatives",
    "start": "339953",
    "end": "342590"
  },
  {
    "text": "that you're working on to evolve this architecture?",
    "start": "342590",
    "end": "344964"
  },
  {
    "text": "Yeah, thanks for asking. ",
    "start": "344964",
    "end": "346641"
  },
  {
    "text": "As we already discussed, \nthe FIFO mechanisms that we insured",
    "start": "347970",
    "end": "351092"
  },
  {
    "text": "the next step will be to enable those customers and partners",
    "start": "351092",
    "end": "353670"
  },
  {
    "text": "that work and produce applications\n that are not sequence dependent",
    "start": "353670",
    "end": "357293"
  },
  {
    "text": "because it will be much more performant, \nmuch more scalable,",
    "start": "357293",
    "end": "360520"
  },
  {
    "text": "and as well as secure.",
    "start": "360520",
    "end": "363185"
  },
  {
    "text": "Another improvement of this architecture \nwill be introducing the business analytics tools ",
    "start": "363185",
    "end": "368725"
  },
  {
    "text": "because if you imagine the number of messages,",
    "start": "368726",
    "end": "370939"
  },
  {
    "text": "business messages coming from the left and the right side ",
    "start": "370939",
    "end": "373508"
  },
  {
    "text": "we can get a lot more and better prediction \nto our customers and partners.",
    "start": "373795",
    "end": "377505"
  },
  {
    "text": "Okay, I understand. \nWell, thanks for sharing this architecture.",
    "start": "377893",
    "end": "380389"
  },
  {
    "text": "Thanks for asking, thank you.",
    "start": "380945",
    "end": "382865"
  },
  {
    "text": "And thank you for watching 'This is My Architecture'.",
    "start": "383171",
    "end": "385787"
  }
]