[
  {
    "text": "foreign",
    "start": "2580",
    "end": "4760"
  },
  {
    "text": "specialist solution architect and I help",
    "start": "8360",
    "end": "11160"
  },
  {
    "text": "customers to optimize their data models",
    "start": "11160",
    "end": "14460"
  },
  {
    "text": "in terms of performance and cost while",
    "start": "14460",
    "end": "17279"
  },
  {
    "text": "working with Amazon dynamodv in this",
    "start": "17279",
    "end": "20220"
  },
  {
    "text": "short video we're going to discuss",
    "start": "20220",
    "end": "21960"
  },
  {
    "text": "something that is usually overlooked",
    "start": "21960",
    "end": "23640"
  },
  {
    "text": "while customers design new application",
    "start": "23640",
    "end": "26279"
  },
  {
    "text": "access patterns you see the de facto",
    "start": "26279",
    "end": "29580"
  },
  {
    "text": "solution when customers design an",
    "start": "29580",
    "end": "31500"
  },
  {
    "text": "application access pattern is to create",
    "start": "31500",
    "end": "33780"
  },
  {
    "text": "a global secondary index",
    "start": "33780",
    "end": "35760"
  },
  {
    "text": "because Global secondary index will",
    "start": "35760",
    "end": "38100"
  },
  {
    "text": "allow you to query your data using",
    "start": "38100",
    "end": "40020"
  },
  {
    "text": "something different than the partition",
    "start": "40020",
    "end": "41399"
  },
  {
    "text": "key and sort key that we have created",
    "start": "41399",
    "end": "43920"
  },
  {
    "text": "for the best table",
    "start": "43920",
    "end": "45360"
  },
  {
    "text": "gsis are great but in this video I'm",
    "start": "45360",
    "end": "48300"
  },
  {
    "text": "going to show you that sometimes using",
    "start": "48300",
    "end": "50640"
  },
  {
    "text": "an scan operation could be more cost",
    "start": "50640",
    "end": "53160"
  },
  {
    "text": "effective even if your table has",
    "start": "53160",
    "end": "55440"
  },
  {
    "text": "millions of items in the inside of them",
    "start": "55440",
    "end": "59219"
  },
  {
    "text": "let's start by by understanding what",
    "start": "59219",
    "end": "62760"
  },
  {
    "text": "happens behind the scenes with both",
    "start": "62760",
    "end": "64619"
  },
  {
    "text": "operations and also understanding",
    "start": "64619",
    "end": "66600"
  },
  {
    "text": "dynamodb cost components",
    "start": "66600",
    "end": "68880"
  },
  {
    "text": "so Global secondary indexes",
    "start": "68880",
    "end": "71520"
  },
  {
    "text": "will allow you to organize your data",
    "start": "71520",
    "end": "74760"
  },
  {
    "text": "using a different partition key and sore",
    "start": "74760",
    "end": "77280"
  },
  {
    "text": "key than the one that you have selected",
    "start": "77280",
    "end": "79560"
  },
  {
    "text": "on the base table so in this example we",
    "start": "79560",
    "end": "81900"
  },
  {
    "text": "have an orange partition key and sort",
    "start": "81900",
    "end": "83700"
  },
  {
    "text": "key from the best table and we have",
    "start": "83700",
    "end": "85200"
  },
  {
    "text": "chosen in green and and pink the",
    "start": "85200",
    "end": "88680"
  },
  {
    "text": "partition can circle from the GSI",
    "start": "88680",
    "end": "91380"
  },
  {
    "text": "when you create a global secondary index",
    "start": "91380",
    "end": "93780"
  },
  {
    "text": "you have the possibility to choose what",
    "start": "93780",
    "end": "97200"
  },
  {
    "text": "attributes you're going to project if",
    "start": "97200",
    "end": "99180"
  },
  {
    "text": "you want to project only the keys that",
    "start": "99180",
    "end": "101100"
  },
  {
    "text": "means that you predict only the",
    "start": "101100",
    "end": "102420"
  },
  {
    "text": "partition key and circle from the best",
    "start": "102420",
    "end": "104100"
  },
  {
    "text": "table which is required to conserve data",
    "start": "104100",
    "end": "108180"
  },
  {
    "text": "consistency and uniqueness you can",
    "start": "108180",
    "end": "110340"
  },
  {
    "text": "choose to project only some attributes",
    "start": "110340",
    "end": "113040"
  },
  {
    "text": "for example uh you can choose to to",
    "start": "113040",
    "end": "115439"
  },
  {
    "text": "project only attribute 3 for example",
    "start": "115439",
    "end": "118259"
  },
  {
    "text": "or you can choose to predict all the",
    "start": "118259",
    "end": "120540"
  },
  {
    "text": "data that you have in the best table",
    "start": "120540",
    "end": "121920"
  },
  {
    "text": "which will be considered a copy a full",
    "start": "121920",
    "end": "124320"
  },
  {
    "text": "copy of your table data just using a",
    "start": "124320",
    "end": "126240"
  },
  {
    "text": "different partition key and sort key",
    "start": "126240",
    "end": "129360"
  },
  {
    "text": "and so far this is great that means with",
    "start": "129360",
    "end": "132420"
  },
  {
    "text": "a GSI I have unlocked a new way to open",
    "start": "132420",
    "end": "135300"
  },
  {
    "text": "new access patterns and retrieve the",
    "start": "135300",
    "end": "137280"
  },
  {
    "text": "data in using different parameters",
    "start": "137280",
    "end": "139680"
  },
  {
    "text": "however what customers usually forget",
    "start": "139680",
    "end": "141780"
  },
  {
    "text": "about especially while while building",
    "start": "141780",
    "end": "144300"
  },
  {
    "text": "new application access patterns is that",
    "start": "144300",
    "end": "147540"
  },
  {
    "text": "to maintain a GSI the data have to be",
    "start": "147540",
    "end": "151739"
  },
  {
    "text": "copied from the base table to the GSI",
    "start": "151739",
    "end": "156900"
  },
  {
    "text": "if you have projected all your data you",
    "start": "156900",
    "end": "159780"
  },
  {
    "text": "are chosen to predict all the attributes",
    "start": "159780",
    "end": "161400"
  },
  {
    "text": "from the best table you will have a",
    "start": "161400",
    "end": "163440"
  },
  {
    "text": "replica of your table so the storage",
    "start": "163440",
    "end": "165840"
  },
  {
    "text": "will be twice the size and when you",
    "start": "165840",
    "end": "168180"
  },
  {
    "text": "write to the base table you also need to",
    "start": "168180",
    "end": "170160"
  },
  {
    "text": "write into the GSI so instead of writing",
    "start": "170160",
    "end": "172800"
  },
  {
    "text": "once to the table only once you will",
    "start": "172800",
    "end": "174900"
  },
  {
    "text": "have to write twice onto the table and",
    "start": "174900",
    "end": "177420"
  },
  {
    "text": "to the GSI consuming a little bit more",
    "start": "177420",
    "end": "180140"
  },
  {
    "text": "right capacity units",
    "start": "180140",
    "end": "183000"
  },
  {
    "text": "on the other side the s-can operation",
    "start": "183000",
    "end": "185519"
  },
  {
    "text": "will allow you to get all the",
    "start": "185519",
    "end": "188220"
  },
  {
    "text": "information from your table when you",
    "start": "188220",
    "end": "190560"
  },
  {
    "text": "issue the scan API dynamically will",
    "start": "190560",
    "end": "193680"
  },
  {
    "text": "return all the data that is available in",
    "start": "193680",
    "end": "196379"
  },
  {
    "text": "your table",
    "start": "196379",
    "end": "197340"
  },
  {
    "text": "since we might be talking about millions",
    "start": "197340",
    "end": "200280"
  },
  {
    "text": "of items you might need to paginate",
    "start": "200280",
    "end": "203040"
  },
  {
    "text": "Across the results that are returned by",
    "start": "203040",
    "end": "204840"
  },
  {
    "text": "design of the API call",
    "start": "204840",
    "end": "207780"
  },
  {
    "text": "um",
    "start": "207780",
    "end": "208500"
  },
  {
    "text": "and then you the application will need",
    "start": "208500",
    "end": "210720"
  },
  {
    "text": "to condense all of that and you make",
    "start": "210720",
    "end": "213060"
  },
  {
    "text": "something useful with the data that is",
    "start": "213060",
    "end": "214620"
  },
  {
    "text": "returned you can specify filter",
    "start": "214620",
    "end": "216480"
  },
  {
    "text": "conditions instead if if you don't want",
    "start": "216480",
    "end": "218760"
  },
  {
    "text": "to retrieve all of the items you can",
    "start": "218760",
    "end": "220739"
  },
  {
    "text": "tell dynamodv to filter the database on",
    "start": "220739",
    "end": "223379"
  },
  {
    "text": "some of the conditions that for example",
    "start": "223379",
    "end": "225239"
  },
  {
    "text": "we have contains we have its own",
    "start": "225239",
    "end": "227280"
  },
  {
    "text": "parameters greater than something if",
    "start": "227280",
    "end": "229319"
  },
  {
    "text": "some parameter exists there are",
    "start": "229319",
    "end": "231239"
  },
  {
    "text": "different possibilities",
    "start": "231239",
    "end": "232500"
  },
  {
    "text": "and at the end of the day dynamodb will",
    "start": "232500",
    "end": "235379"
  },
  {
    "text": "only return the data that matches the",
    "start": "235379",
    "end": "237420"
  },
  {
    "text": "condition that you have specified in",
    "start": "237420",
    "end": "239099"
  },
  {
    "text": "there however you still pay for the full",
    "start": "239099",
    "end": "241379"
  },
  {
    "text": "read so if your table has 1 million",
    "start": "241379",
    "end": "243299"
  },
  {
    "text": "items you pay for that one million items",
    "start": "243299",
    "end": "245580"
  },
  {
    "text": "even if you have filter",
    "start": "245580",
    "end": "247379"
  },
  {
    "text": "all but one",
    "start": "247379",
    "end": "249420"
  },
  {
    "text": "there are ways to increase the speed of",
    "start": "249420",
    "end": "251280"
  },
  {
    "text": "this kind operation and that you can",
    "start": "251280",
    "end": "253620"
  },
  {
    "text": "specify a worker parameter",
    "start": "253620",
    "end": "256919"
  },
  {
    "text": "in the API call you can divide it by",
    "start": "256919",
    "end": "259260"
  },
  {
    "text": "number of segments so for example you",
    "start": "259260",
    "end": "261479"
  },
  {
    "text": "have four segments that means that your",
    "start": "261479",
    "end": "263759"
  },
  {
    "text": "dynamodb will split the data into four",
    "start": "263759",
    "end": "266340"
  },
  {
    "text": "by four different workers and each",
    "start": "266340",
    "end": "268199"
  },
  {
    "text": "worker will retrieve a portion of that",
    "start": "268199",
    "end": "270060"
  },
  {
    "text": "data since all of that happens in",
    "start": "270060",
    "end": "271979"
  },
  {
    "text": "parallel there the query the the this",
    "start": "271979",
    "end": "274979"
  },
  {
    "text": "kind of operation will execute faster",
    "start": "274979",
    "end": "278280"
  },
  {
    "text": "now you might be thinking",
    "start": "278280",
    "end": "280020"
  },
  {
    "text": "so why is why index is a bad idea",
    "start": "280020",
    "end": "283500"
  },
  {
    "text": "anyways if scan we're talking about",
    "start": "283500",
    "end": "286139"
  },
  {
    "text": "millions of items the index will only",
    "start": "286139",
    "end": "289080"
  },
  {
    "text": "return some few elements and to really",
    "start": "289080",
    "end": "291479"
  },
  {
    "text": "understand the difference between both",
    "start": "291479",
    "end": "293460"
  },
  {
    "text": "of them let's walk through uh to an",
    "start": "293460",
    "end": "295680"
  },
  {
    "text": "example a hypothetical situation so",
    "start": "295680",
    "end": "297960"
  },
  {
    "text": "let's imagine that we have",
    "start": "297960",
    "end": "299699"
  },
  {
    "text": "one kilobyte of data that is written",
    "start": "299699",
    "end": "301560"
  },
  {
    "text": "into dynamodb",
    "start": "301560",
    "end": "303540"
  },
  {
    "text": "we have one million items in our table",
    "start": "303540",
    "end": "306660"
  },
  {
    "text": "and we will be writing two elements per",
    "start": "306660",
    "end": "309600"
  },
  {
    "text": "second",
    "start": "309600",
    "end": "310440"
  },
  {
    "text": "so every time it will be consuming two",
    "start": "310440",
    "end": "312419"
  },
  {
    "text": "right capacity units to write into our",
    "start": "312419",
    "end": "314520"
  },
  {
    "text": "base table",
    "start": "314520",
    "end": "315540"
  },
  {
    "text": "and then we also will be reading only",
    "start": "315540",
    "end": "320400"
  },
  {
    "text": "once per day using a GSI that we have",
    "start": "320400",
    "end": "323759"
  },
  {
    "text": "created and that query will return",
    "start": "323759",
    "end": "326100"
  },
  {
    "text": "around 3000 elements with those 2000",
    "start": "326100",
    "end": "329940"
  },
  {
    "text": "elements we'll be consuming around 1500",
    "start": "329940",
    "end": "332460"
  },
  {
    "text": "uh read capacity units",
    "start": "332460",
    "end": "335460"
  },
  {
    "text": "but what we usually forget is that to",
    "start": "335460",
    "end": "338220"
  },
  {
    "text": "maintain that index will have to pay",
    "start": "338220",
    "end": "341699"
  },
  {
    "text": "two rack capacity units per second",
    "start": "341699",
    "end": "344220"
  },
  {
    "text": "in total that's 5 million two hundred",
    "start": "344220",
    "end": "346440"
  },
  {
    "text": "and fifty six thousand right capacity",
    "start": "346440",
    "end": "348419"
  },
  {
    "text": "units for a day so it's a pretty big",
    "start": "348419",
    "end": "350880"
  },
  {
    "text": "number",
    "start": "350880",
    "end": "351780"
  },
  {
    "text": "and that's something very overlooked",
    "start": "351780",
    "end": "353759"
  },
  {
    "text": "usually overlooked",
    "start": "353759",
    "end": "355740"
  },
  {
    "text": "um on the other side this kind of",
    "start": "355740",
    "end": "357240"
  },
  {
    "text": "operation will just read everything that",
    "start": "357240",
    "end": "358680"
  },
  {
    "text": "you have in there and then you will",
    "start": "358680",
    "end": "360479"
  },
  {
    "text": "filter the information based on what you",
    "start": "360479",
    "end": "362160"
  },
  {
    "text": "need so to understand the difference",
    "start": "362160",
    "end": "363720"
  },
  {
    "text": "what I'm gonna do I'm going to use the",
    "start": "363720",
    "end": "365759"
  },
  {
    "text": "AWS price calculator I'm going to create",
    "start": "365759",
    "end": "368100"
  },
  {
    "text": "an estimate very quickly I'm going to",
    "start": "368100",
    "end": "370500"
  },
  {
    "text": "keep everything by default",
    "start": "370500",
    "end": "372900"
  },
  {
    "text": "when you select Dynamo TV as the service",
    "start": "372900",
    "end": "376880"
  },
  {
    "text": "I'm going to choose on-demand capacity",
    "start": "376979",
    "end": "379259"
  },
  {
    "text": "just because the calculations are easier",
    "start": "379259",
    "end": "381120"
  },
  {
    "text": "to make and then I'm going to leave the",
    "start": "381120",
    "end": "384240"
  },
  {
    "text": "table standard class standard class one",
    "start": "384240",
    "end": "386940"
  },
  {
    "text": "gigabyte storage size 1 million items",
    "start": "386940",
    "end": "389160"
  },
  {
    "text": "per one kilobyte in size is one gigabyte",
    "start": "389160",
    "end": "391979"
  },
  {
    "text": "and then the on-demand write settings",
    "start": "391979",
    "end": "394500"
  },
  {
    "text": "are 2 million per second and sorry two",
    "start": "394500",
    "end": "398520"
  },
  {
    "text": "per second of the median",
    "start": "398520",
    "end": "400919"
  },
  {
    "text": "and the rate settings will be 2 000",
    "start": "400919",
    "end": "403740"
  },
  {
    "text": "elements",
    "start": "403740",
    "end": "405660"
  },
  {
    "text": "per day as we saw it we saw so if we got",
    "start": "405660",
    "end": "409020"
  },
  {
    "text": "the details the total of this one will",
    "start": "409020",
    "end": "411360"
  },
  {
    "text": "be",
    "start": "411360",
    "end": "412400"
  },
  {
    "text": "6.83 cents",
    "start": "412400",
    "end": "414539"
  },
  {
    "text": "for the best table remember what happens",
    "start": "414539",
    "end": "417240"
  },
  {
    "text": "with the GSI since we're predicting all",
    "start": "417240",
    "end": "419460"
  },
  {
    "text": "the attributes we need to include",
    "start": "419460",
    "end": "420960"
  },
  {
    "text": "another 25 cents for the storage on the",
    "start": "420960",
    "end": "423240"
  },
  {
    "text": "GSI and another 6.57 cents for the rides",
    "start": "423240",
    "end": "427560"
  },
  {
    "text": "that are happening on the GSI in total",
    "start": "427560",
    "end": "430199"
  },
  {
    "text": "it will be 13.65 to sustain these",
    "start": "430199",
    "end": "434039"
  },
  {
    "text": "application access pattern that we have",
    "start": "434039",
    "end": "435539"
  },
  {
    "text": "created",
    "start": "435539",
    "end": "436800"
  },
  {
    "text": "let's compare with the scan this kind of",
    "start": "436800",
    "end": "439259"
  },
  {
    "text": "operation would be the same rights",
    "start": "439259",
    "end": "440940"
  },
  {
    "text": "because I'm still writing two times per",
    "start": "440940",
    "end": "442620"
  },
  {
    "text": "second in my base table but on the red",
    "start": "442620",
    "end": "445319"
  },
  {
    "text": "side we have one million of of reads per",
    "start": "445319",
    "end": "448500"
  },
  {
    "text": "day because my table has one million",
    "start": "448500",
    "end": "450300"
  },
  {
    "text": "items I'm just doing an instant",
    "start": "450300",
    "end": "451680"
  },
  {
    "text": "operation once per day",
    "start": "451680",
    "end": "454440"
  },
  {
    "text": "and then one million times 30 it's 30",
    "start": "454440",
    "end": "457979"
  },
  {
    "text": "Millions per month if I do if I run the",
    "start": "457979",
    "end": "460800"
  },
  {
    "text": "numbers you're saying that now the price",
    "start": "460800",
    "end": "463740"
  },
  {
    "text": "has gone to 10.57 we're including we're",
    "start": "463740",
    "end": "468120"
  },
  {
    "text": "paying 3.75",
    "start": "468120",
    "end": "470880"
  },
  {
    "text": "cents on the reads but we don't have an",
    "start": "470880",
    "end": "473819"
  },
  {
    "text": "index to maintain",
    "start": "473819",
    "end": "475380"
  },
  {
    "text": "so if I put it side to side",
    "start": "475380",
    "end": "478940"
  },
  {
    "text": "in total on the GSI I will be expanding",
    "start": "479460",
    "end": "482819"
  },
  {
    "text": "to support the success pattern",
    "start": "482819",
    "end": "484819"
  },
  {
    "text": "13.65 on this kind of operation I will",
    "start": "484819",
    "end": "488160"
  },
  {
    "text": "spend ten dollars and fifty Seven cents",
    "start": "488160",
    "end": "490620"
  },
  {
    "text": "so",
    "start": "490620",
    "end": "491880"
  },
  {
    "text": "here you have it customers usually think",
    "start": "491880",
    "end": "494340"
  },
  {
    "text": "that this kind of operations is a bad",
    "start": "494340",
    "end": "496380"
  },
  {
    "text": "thing to do and this kind of operation",
    "start": "496380",
    "end": "498060"
  },
  {
    "text": "is great because it will give you all",
    "start": "498060",
    "end": "500099"
  },
  {
    "text": "your data you can choose what to do with",
    "start": "500099",
    "end": "501840"
  },
  {
    "text": "that data it makes it difficult when you",
    "start": "501840",
    "end": "504419"
  },
  {
    "text": "have millions of items but you can use",
    "start": "504419",
    "end": "507419"
  },
  {
    "text": "the the multi-threading conditions or",
    "start": "507419",
    "end": "510300"
  },
  {
    "text": "multi-trading options that iwdb offers",
    "start": "510300",
    "end": "512339"
  },
  {
    "text": "so you can split your data and retrieve",
    "start": "512339",
    "end": "514620"
  },
  {
    "text": "that very fast on top of that you can",
    "start": "514620",
    "end": "516899"
  },
  {
    "text": "use filter conditions to only retrieve",
    "start": "516899",
    "end": "519300"
  },
  {
    "text": "the information that you care remember",
    "start": "519300",
    "end": "521039"
  },
  {
    "text": "that behind the scenes you still have to",
    "start": "521039",
    "end": "522599"
  },
  {
    "text": "pay for all the information that was",
    "start": "522599",
    "end": "523979"
  },
  {
    "text": "read that means all the data in your",
    "start": "523979",
    "end": "526740"
  },
  {
    "text": "Amazon dynamodv table",
    "start": "526740",
    "end": "529019"
  },
  {
    "text": "so this is what's an invitation to to",
    "start": "529019",
    "end": "531360"
  },
  {
    "text": "remember that you always need to",
    "start": "531360",
    "end": "533160"
  },
  {
    "text": "consider data velocity when you are",
    "start": "533160",
    "end": "535560"
  },
  {
    "text": "designing your table and your",
    "start": "535560",
    "end": "537779"
  },
  {
    "text": "application access patterns in a",
    "start": "537779",
    "end": "539160"
  },
  {
    "text": "dynamodv table",
    "start": "539160",
    "end": "540480"
  },
  {
    "text": "and don't think that scan operations are",
    "start": "540480",
    "end": "543480"
  },
  {
    "text": "your enemies can operations are great",
    "start": "543480",
    "end": "546019"
  },
  {
    "text": "you just need to understand when is a",
    "start": "546019",
    "end": "549120"
  },
  {
    "text": "good moment to to to include them in",
    "start": "549120",
    "end": "552000"
  },
  {
    "text": "your application access patterns",
    "start": "552000",
    "end": "554580"
  },
  {
    "text": "my name is Esteban Cerna I am a senior",
    "start": "554580",
    "end": "557040"
  },
  {
    "text": "Dynamo DVA specialist and thank you for",
    "start": "557040",
    "end": "559080"
  },
  {
    "text": "watching see you next time",
    "start": "559080",
    "end": "562580"
  }
]