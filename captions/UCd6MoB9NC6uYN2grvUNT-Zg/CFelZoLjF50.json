[
  {
    "text": "hello everyone and welcome to another episode of built on service and this",
    "start": "4279",
    "end": "9540"
  },
  {
    "text": "time we're going to talk a little bit about breaking the monolith today my",
    "start": "9540",
    "end": "14880"
  },
  {
    "text": "name is Ronald we Destin are know I'm gonna be hopefully helping you you know to go through the the process of",
    "start": "14880",
    "end": "21150"
  },
  {
    "text": "breaking a monolith but more importantly here with us we have Angela Wong a",
    "start": "21150",
    "end": "26520"
  },
  {
    "text": "Solutions Architect based out of Chicago Angela would you mind introducing yourself a little bit hi everyone thanks",
    "start": "26520",
    "end": "33480"
  },
  {
    "text": "for joining us today so I'm a Solutions Architect based out of Chicago I've been",
    "start": "33480",
    "end": "39750"
  },
  {
    "text": "working with building applications using step functions since it was launched",
    "start": "39750",
    "end": "45420"
  },
  {
    "text": "pre-event 2016 since then I've always loved the simplicity and clarity it",
    "start": "45420",
    "end": "51300"
  },
  {
    "text": "brings to the service applications so super excited to be here today and show",
    "start": "51300",
    "end": "56430"
  },
  {
    "text": "you how you can build a service up with stuff functions from scratch and",
    "start": "56430",
    "end": "62129"
  },
  {
    "text": "obviously you've done a lot of things but you know one of the more exciting one that you did was creating this media",
    "start": "62129",
    "end": "69060"
  },
  {
    "text": "process workflow reference architecture that's up on github right yeah so we can",
    "start": "69060",
    "end": "77700"
  },
  {
    "text": "actually show you a web app that I built to demonstrate the media application",
    "start": "77700",
    "end": "84299"
  },
  {
    "text": "this is the use case we're going to be looking at today so the the use cases",
    "start": "84299",
    "end": "90209"
  },
  {
    "text": "imagine you have a photo sharing app or your users to upload their favorite cat",
    "start": "90209",
    "end": "95579"
  },
  {
    "text": "pictures or their family photos to your photo sharing app and you want to be",
    "start": "95579",
    "end": "101399"
  },
  {
    "text": "able to first when people upload these pictures index them make something else",
    "start": "101399",
    "end": "107399"
  },
  {
    "text": "so that you can display them on your website you want to be able to use",
    "start": "107399",
    "end": "112880"
  },
  {
    "text": "unless you want to name your automatic view tag was in the image you want to extract metadata things like GPS",
    "start": "112880",
    "end": "120149"
  },
  {
    "text": "coordinates or what device made the picture all these things are part of the",
    "start": "120149",
    "end": "127319"
  },
  {
    "text": "kind of back-end workflow that typically happens when you have a photo sharing",
    "start": "127319",
    "end": "132480"
  },
  {
    "text": "site like the so our topic today is how we can take a",
    "start": "132480",
    "end": "138230"
  },
  {
    "text": "model listing application that does image processing into a micro",
    "start": "138230",
    "end": "144250"
  },
  {
    "text": "service-oriented distributed architecture and leverage set functions",
    "start": "144250",
    "end": "152060"
  },
  {
    "text": "to help us make this process a lot easier that's awesome so just kind of thinking",
    "start": "152060",
    "end": "158090"
  },
  {
    "text": "through the steps I would imagine since you've got a browse button there I can click on browse select the file have it",
    "start": "158090",
    "end": "165920"
  },
  {
    "text": "uploaded and then the server-side code would do a serious a series of steps as",
    "start": "165920",
    "end": "171530"
  },
  {
    "text": "a that's what you spoke about before extracting metadata you know do some",
    "start": "171530",
    "end": "176810"
  },
  {
    "text": "deep learning machine learning magic and then you know it spits out all the",
    "start": "176810",
    "end": "182720"
  },
  {
    "text": "metadata stored in the database so that we can query it from the website right exactly so I'm showing you right now a",
    "start": "182720",
    "end": "190600"
  },
  {
    "text": "the end product of what we're trying to get to by the end of this episode I just",
    "start": "190600",
    "end": "197630"
  },
  {
    "text": "uploaded a picture as you can see here all those processing steps I mentioned",
    "start": "197630",
    "end": "202820"
  },
  {
    "text": "earlier are happening here we see tags that are all back at being generated we",
    "start": "202820",
    "end": "209150"
  },
  {
    "text": "see the GPS coordinate we see the thumbnail that's generated by the",
    "start": "209150",
    "end": "215450"
  },
  {
    "text": "back-end processing okay so let's switch to our cloud 9",
    "start": "215450",
    "end": "221570"
  },
  {
    "text": "environment for those of you who are new to cloud 9 o'clock time it is a cloud",
    "start": "221570",
    "end": "227660"
  },
  {
    "text": "IDE hosted on the on the AWS services right and here Angela and I are going to",
    "start": "227660",
    "end": "235459"
  },
  {
    "text": "be sharing a cloud 9 instance so as I'm typing as I'm typing you'll be able to",
    "start": "235459",
    "end": "241190"
  },
  {
    "text": "see the beautiful elegant code that I have here obviously awesome naming",
    "start": "241190",
    "end": "246560"
  },
  {
    "text": "convention too but you are actually seeing Angela scream so Angela has full",
    "start": "246560",
    "end": "251900"
  },
  {
    "text": "control over what file she is going to present but hopefully I can kind of",
    "start": "251900",
    "end": "256930"
  },
  {
    "text": "real-time co-author a couple of basic code and contribute something through this session so now assuming that we",
    "start": "256930",
    "end": "266150"
  },
  {
    "text": "want build this app from from scratch right so let's let's talk through about the",
    "start": "266150",
    "end": "271520"
  },
  {
    "text": "different things that we want to we want to address here so let me start off in just kind of put in comments the first",
    "start": "271520",
    "end": "277970"
  },
  {
    "text": "step is sounds like you know based on a given image right based on a given image and I'm writing I know Jess code right",
    "start": "277970",
    "end": "287480"
  },
  {
    "text": "here right now so I'm just gonna I'm just gonna create a function that takes an image from somewhere and probably",
    "start": "287480",
    "end": "293450"
  },
  {
    "text": "most likely this is going to be s 3 and I'm going to extract the metadata first",
    "start": "293450",
    "end": "299660"
  },
  {
    "text": "and then I need to figure out if you",
    "start": "299660",
    "end": "305900"
  },
  {
    "text": "know based on the metadata is the file support it or not right so for example",
    "start": "305900",
    "end": "311900"
  },
  {
    "text": "if you upload a text file then I probably want to reject that and stop",
    "start": "311900",
    "end": "317090"
  },
  {
    "text": "the the processing but if it's a valid image file then I probably want to do some deep learning inferences here so",
    "start": "317090",
    "end": "324890"
  },
  {
    "text": "image recognition extract some label out and then store it into a database and",
    "start": "324890",
    "end": "333140"
  },
  {
    "text": "maybe also even a generator generate a thumbnail right and as you see you know",
    "start": "333140",
    "end": "342020"
  },
  {
    "text": "the the example that we're talking about here is specific to media processing but it's kind of it's kind of generic right",
    "start": "342020",
    "end": "348140"
  },
  {
    "text": "like every single program that I could see every single app that I've written in the past I don't know God knows 15",
    "start": "348140",
    "end": "354110"
  },
  {
    "text": "years probably looks something like this right the series of steps that I need to do and you know it's seemingly simple",
    "start": "354110",
    "end": "361700"
  },
  {
    "text": "because one could just assume that I could do something like this I would create a made a bit metadata class where",
    "start": "361700",
    "end": "369440"
  },
  {
    "text": "the function extract given an image will return me some metadata an array of",
    "start": "369440",
    "end": "376820"
  },
  {
    "text": "metadata and maybe I can have a validator class where the function is supported when you pass on the metadata",
    "start": "376820",
    "end": "384650"
  },
  {
    "text": "you can kind of decide whether or not you know this this thing is supported right so if validators is not supported",
    "start": "384650",
    "end": "392000"
  },
  {
    "text": "you know you can do oh you can do something here return let's say",
    "start": "392000",
    "end": "398360"
  },
  {
    "text": "federal an exception I don't know just making things up as we go along and then",
    "start": "398360",
    "end": "403939"
  },
  {
    "text": "if assuming that it is supported then we",
    "start": "403939",
    "end": "411110"
  },
  {
    "text": "will probably do our magic we would",
    "start": "411110",
    "end": "417349"
  },
  {
    "text": "start recognizing the picture pass on the US on the image and I assume you",
    "start": "417349",
    "end": "427939"
  },
  {
    "text": "know this deep learning model will return us a bunch of labels and then we would you know start in the database",
    "start": "427939",
    "end": "435610"
  },
  {
    "text": "meta data store that store pass on the",
    "start": "435610",
    "end": "442569"
  },
  {
    "text": "labels and other stuff and then also",
    "start": "442569",
    "end": "448610"
  },
  {
    "text": "maybe we'll use one more class that generates the thumbnail so in this case",
    "start": "448610",
    "end": "456279"
  },
  {
    "text": "most likely I'm gonna be leveraging you know some of my custom code right pull",
    "start": "456279",
    "end": "462860"
  },
  {
    "text": "in all this classes s libraries so let me just kind of copy paste that cuz I've",
    "start": "462860",
    "end": "468529"
  },
  {
    "text": "got a bunch of library functions already on the left-hand side as you can see you",
    "start": "468529",
    "end": "474469"
  },
  {
    "text": "know under twitch live live I've got all mighty interpreter Image Processor metadata those are just like code that I",
    "start": "474469",
    "end": "480800"
  },
  {
    "text": "that I broke and in some cases in the case of the metadata JavaScript I even",
    "start": "480800",
    "end": "486979"
  },
  {
    "text": "leveraged image magic so and this is a typical monolithic code ie",
    "start": "486979",
    "end": "493039"
  },
  {
    "text": "I have to get all the functionality implemented in a single codebase you",
    "start": "493039",
    "end": "500419"
  },
  {
    "text": "know have all the dependencies resolved in a single process and then every",
    "start": "500419",
    "end": "505430"
  },
  {
    "text": "single step of the way I'm assuming that this is going to be somewhat procedural",
    "start": "505430",
    "end": "510500"
  },
  {
    "text": "step by step right it's one step is completed we go to the next line but",
    "start": "510500",
    "end": "515870"
  },
  {
    "text": "since this is JavaScript it's not as simple as that we want to take advantage",
    "start": "515870",
    "end": "522078"
  },
  {
    "text": "of the synchronous capability of JavaScript so most likely you know your",
    "start": "522079",
    "end": "527959"
  },
  {
    "text": "code is gonna look a little bit more like a chain of promises right so instead of having",
    "start": "527959",
    "end": "533389"
  },
  {
    "text": "extracting the image and then returning it to this variable right here most",
    "start": "533389",
    "end": "538550"
  },
  {
    "text": "likely this extraction is going to run asynchronously and therefore we will get",
    "start": "538550",
    "end": "543560"
  },
  {
    "text": "the file metadata as part of the callback so it kind of looks a little",
    "start": "543560",
    "end": "548959"
  },
  {
    "text": "bit like this file minute and then you",
    "start": "548959",
    "end": "554540"
  },
  {
    "text": "do stuff here right so for those of you who are fairly new to JavaScript all",
    "start": "554540",
    "end": "559610"
  },
  {
    "text": "this means is jitters I'm calling a class that has this function called extract I'm passing the image it may be",
    "start": "559610",
    "end": "566959"
  },
  {
    "text": "this is a reference to an s3 object and then once my extract function is done",
    "start": "566959",
    "end": "572930"
  },
  {
    "text": "which in this case is calling image magic in August and different things synchronously it's going to execute this",
    "start": "572930",
    "end": "579230"
  },
  {
    "text": "call back upon completed and I've got a question on the chat window the use",
    "start": "579230",
    "end": "585889"
  },
  {
    "text": "recognition for the image labels yes we are we are using a recognition there so",
    "start": "585889",
    "end": "592130"
  },
  {
    "text": "if you look at the image the almighty interpreter it has a very very awesome",
    "start": "592130",
    "end": "600220"
  },
  {
    "text": "implementation of just simply calling recognition that's my that's the extent",
    "start": "600220",
    "end": "605420"
  },
  {
    "text": "of my deep learning algorithm a capabilities calling a web service function so let's go back to the next",
    "start": "605420",
    "end": "612199"
  },
  {
    "text": "fjs again so here then once I've got the metadata I will start doing all the",
    "start": "612199",
    "end": "621949"
  },
  {
    "text": "stuff that I was doing before so at this point I've got the metadata and then if",
    "start": "621949",
    "end": "629389"
  },
  {
    "text": "the validator is not supported sorry if the file metadata is not supported then I want to return a reject rights or just",
    "start": "629389",
    "end": "640370"
  },
  {
    "text": "bestest promises promise not reject and",
    "start": "640370",
    "end": "646000"
  },
  {
    "text": "I would say here not supported Gammage",
    "start": "646000",
    "end": "651079"
  },
  {
    "text": "type let's say and then and I could fix",
    "start": "651079",
    "end": "658399"
  },
  {
    "text": "it by being a little bit here I looked at home so convert the next slide to do the same",
    "start": "658399",
    "end": "664910"
  },
  {
    "text": "thing essentially recognize the picture and once it's done I'll get a bunch of",
    "start": "664910",
    "end": "671960"
  },
  {
    "text": "labels and then put this into here yeah",
    "start": "671960",
    "end": "685700"
  },
  {
    "text": "so this is also kind of a necessary step",
    "start": "685700",
    "end": "691100"
  },
  {
    "text": "if we want to move from a monolithic app where everything runs on the same machine to these asynchronous calls",
    "start": "691100",
    "end": "698540"
  },
  {
    "text": "where each of these operations no longer have to happen on the same machine so",
    "start": "698540",
    "end": "704930"
  },
  {
    "text": "it's a network call we make these asynchronous promises call us so that but we can wait for the results to come",
    "start": "704930",
    "end": "712460"
  },
  {
    "text": "back from from the network and each of our components now can be independently",
    "start": "712460",
    "end": "718670"
  },
  {
    "text": "scaled and we can pick different computing platforms or run them in",
    "start": "718670",
    "end": "724550"
  },
  {
    "text": "lambda functions and they don't have to all live on the same machine and share",
    "start": "724550",
    "end": "730040"
  },
  {
    "text": "the same compute resources that's right",
    "start": "730040",
    "end": "735340"
  },
  {
    "text": "I'm just fixing some of the broken references that I have there metadata",
    "start": "735340",
    "end": "742210"
  },
  {
    "text": "store and file yeah okay and then in this case and when I'm storing the",
    "start": "742210",
    "end": "748910"
  },
  {
    "text": "metadata into the database and generating the thumbnail I probably could also do this in parallel right so",
    "start": "748910",
    "end": "755570"
  },
  {
    "text": "in JavaScript I would do something a little bit like this so promised all and",
    "start": "755570",
    "end": "760760"
  },
  {
    "text": "then I would make the call to this line",
    "start": "760760",
    "end": "765890"
  },
  {
    "text": "right here and then also I would make",
    "start": "765890",
    "end": "771080"
  },
  {
    "text": "the call to this line right here and essentially what this does is I'm",
    "start": "771080",
    "end": "777490"
  },
  {
    "text": "executing each one of the function and then only after I got result from both",
    "start": "777490",
    "end": "785660"
  },
  {
    "text": "after both promises are resolved only then I continue one so this is kind of like the",
    "start": "785660",
    "end": "791930"
  },
  {
    "text": "code that most likely we're going to write right if we are building things in",
    "start": "791930",
    "end": "797480"
  },
  {
    "text": "a in a monolithic kind of way where I have you know a single server running",
    "start": "797480",
    "end": "806150"
  },
  {
    "text": "node.js write all this stuff up you know pulling the dependency and then this",
    "start": "806150",
    "end": "812720"
  },
  {
    "text": "code coordinates every single step of the way now unfortunately like you",
    "start": "812720",
    "end": "818090"
  },
  {
    "text": "pointed out before Angela each one of these lines write the extractions and the recognized picture right now it is",
    "start": "818090",
    "end": "824960"
  },
  {
    "text": "all running on a single machine on a single process but in a distributed",
    "start": "824960",
    "end": "831650"
  },
  {
    "text": "system and a micro service kind of approach most likely every single one of those are only web service calls and the",
    "start": "831650",
    "end": "838160"
  },
  {
    "text": "extraction could happen in a smaller machine somewhere else or in a container running on Amazon Elastic complain of",
    "start": "838160",
    "end": "844820"
  },
  {
    "text": "service or elastic kubernetes service you know be all these processes could be running in in small little containers",
    "start": "844820",
    "end": "852110"
  },
  {
    "text": "and therefore in a typical distributed system fashion we want to design for",
    "start": "852110",
    "end": "857120"
  },
  {
    "text": "failure right so every single step of the way you know extraction could fail",
    "start": "857120",
    "end": "862810"
  },
  {
    "text": "the recognizing the picture could fail the storing to the our data store could",
    "start": "862810",
    "end": "869780"
  },
  {
    "text": "fail and we probably want to have that logging error handling retries mechanism",
    "start": "869780",
    "end": "876950"
  },
  {
    "text": "and whatnot so even though right now it's looking fairly clean I think you",
    "start": "876950",
    "end": "882350"
  },
  {
    "text": "know as a as a developer I would be fairly okay with with this code but I",
    "start": "882350",
    "end": "888320"
  },
  {
    "text": "need to kind of make it a little bit more robust so let's say one way of",
    "start": "888320",
    "end": "894710"
  },
  {
    "text": "doing that is in this case where let me",
    "start": "894710",
    "end": "900320"
  },
  {
    "text": "just go to the recognizer function right",
    "start": "900320",
    "end": "905840"
  },
  {
    "text": "here I would probably have something like oh I would probably have something",
    "start": "905840",
    "end": "914390"
  },
  {
    "text": "like this right so if I if I call recognize picture",
    "start": "914390",
    "end": "920410"
  },
  {
    "text": "successful then this should execute but if there's an error I will need to do",
    "start": "920410",
    "end": "927519"
  },
  {
    "text": "something else and this is where it gets tricky because like I said before I probably want to do some vlogging I want",
    "start": "927519",
    "end": "934750"
  },
  {
    "text": "to do some retrying I want to retry the retry right he's one we trying at some",
    "start": "934750",
    "end": "941199"
  },
  {
    "text": "point I need to give up so that I don't introduce you know a denial of service",
    "start": "941199",
    "end": "946269"
  },
  {
    "text": "attack to the downstream downstream services I probably also have to do",
    "start": "946269",
    "end": "951689"
  },
  {
    "text": "exponential fall back right I need to",
    "start": "951689",
    "end": "961660"
  },
  {
    "text": "make sure that if I retry the next second you know I probably would want to",
    "start": "961660",
    "end": "966790"
  },
  {
    "text": "wait longer if the service is still failing you know maybe I'll wait until two seconds for second eight seconds",
    "start": "966790",
    "end": "973720"
  },
  {
    "text": "such that I don't introduce you know even more loads on the services that are having issues and then you know many",
    "start": "973720",
    "end": "982209"
  },
  {
    "text": "other concerns right maybe even you know put things into dead letter T or",
    "start": "982209",
    "end": "990160"
  },
  {
    "text": "something you know if if I if I can't seem to process the message so there's a",
    "start": "990160",
    "end": "999250"
  },
  {
    "text": "bunch of stuff here now to make things worse you know every single one of these",
    "start": "999250",
    "end": "1005399"
  },
  {
    "text": "lines like metadata store and general thumbnail and extraction may have a slightly different policy right",
    "start": "1005399",
    "end": "1011670"
  },
  {
    "text": "different sets of compensating transaction in the case of you know",
    "start": "1011670",
    "end": "1017009"
  },
  {
    "text": "recognizing picture we don't have to do any compensating transaction but in the case of a database or you know you might",
    "start": "1017009",
    "end": "1023579"
  },
  {
    "text": "want to roll back certain thing so this error handling code will probably need",
    "start": "1023579",
    "end": "1030178"
  },
  {
    "text": "to happen in every single line where we were making a call outside the process",
    "start": "1030179",
    "end": "1037500"
  },
  {
    "text": "so I probably would have something like that here I would probably would have some fun you",
    "start": "1037500",
    "end": "1043589"
  },
  {
    "text": "know something like that here and it just kind of complicates a little bit",
    "start": "1043589",
    "end": "1048929"
  },
  {
    "text": "now is there anything that you think I can improve on this piece of",
    "start": "1048929",
    "end": "1054380"
  },
  {
    "text": "code Angela yeah so great question so as I think back to my software engineering",
    "start": "1054380",
    "end": "1060320"
  },
  {
    "text": "days I spent maybe 90% of the time actually handling errors rather than",
    "start": "1060320",
    "end": "1066350"
  },
  {
    "text": "writing the code for for the happy case and so given the complexity with all the",
    "start": "1066350",
    "end": "1073400"
  },
  {
    "text": "different things I can go wrong in your application when you break a modification into a distributed",
    "start": "1073400",
    "end": "1081280"
  },
  {
    "text": "microservices model where each my service can fail and as always and as Ron pointed out based on the kind of",
    "start": "1081280",
    "end": "1088490"
  },
  {
    "text": "error you get you would make different decisions of what to retry what to",
    "start": "1088490",
    "end": "1094580"
  },
  {
    "text": "rollback how many times you retry and maybe for a certain in these cases you",
    "start": "1094580",
    "end": "1101030"
  },
  {
    "text": "sent user a notification in other cases you put things in your debt later q.i your code will get more and more",
    "start": "1101030",
    "end": "1108140"
  },
  {
    "text": "complicated as you try to think of all the ways that your your different micro",
    "start": "1108140",
    "end": "1113240"
  },
  {
    "text": "service could fail and you want to make your code reliable icer this is where",
    "start": "1113240",
    "end": "1118490"
  },
  {
    "text": "step function is kind of best with this design force you make the a lot of this",
    "start": "1118490",
    "end": "1123560"
  },
  {
    "text": "a lot easier and before I dive into showing you what step function looks",
    "start": "1123560",
    "end": "1130280"
  },
  {
    "text": "like I've made a diagram to kind of give you a sense of when you think about step",
    "start": "1130280",
    "end": "1136250"
  },
  {
    "text": "functions where it fits in the application architecture so when we talk",
    "start": "1136250",
    "end": "1141620"
  },
  {
    "text": "about distributed Micra services and I made about an editable question comes up",
    "start": "1141620",
    "end": "1147740"
  },
  {
    "text": "is how do you put the coordination logic where do you put it there are a few",
    "start": "1147740",
    "end": "1154160"
  },
  {
    "text": "options that we can consider so the first one is very simple it's on this",
    "start": "1154160",
    "end": "1161540"
  },
  {
    "text": "client you can put this coordination logic on the client side so he's safe you're developing in mobile or web",
    "start": "1161540",
    "end": "1167540"
  },
  {
    "text": "application it's normal to put a lot of the code of calling different API",
    "start": "1167540",
    "end": "1173300"
  },
  {
    "text": "services on the client itself the benefit of this is you can do good",
    "start": "1173300",
    "end": "1180040"
  },
  {
    "text": "reactive experience for the user so maybe if one of the services you can still display the results from",
    "start": "1180040",
    "end": "1186929"
  },
  {
    "text": "the other services and have a graceful degradation for the user but the",
    "start": "1186929",
    "end": "1192990"
  },
  {
    "text": "downside of this approach is if that doesn't work for every single use case",
    "start": "1192990",
    "end": "1198210"
  },
  {
    "text": "sometimes you don't want to expose the internal interfaces between your back-end services to external clients so",
    "start": "1198210",
    "end": "1207540"
  },
  {
    "text": "just to kind of you know make sure that people are following their you know we are talking about let's say you know in",
    "start": "1207540",
    "end": "1214290"
  },
  {
    "text": "a if you have a web application maybe the shopping cart functionality is driven by service a the catalog",
    "start": "1214290",
    "end": "1221190"
  },
  {
    "text": "functionality is driven by service B such that if the shopping cart system are having issues if there's nothing",
    "start": "1221190",
    "end": "1228630"
  },
  {
    "text": "stopping the user from stale browsing the catalog and having a look at the details because they are independent",
    "start": "1228630",
    "end": "1234600"
  },
  {
    "text": "services that are consumed aggregated by your react few app or angular app right",
    "start": "1234600",
    "end": "1242150"
  },
  {
    "text": "yeah that's exactly right now so that's one way of coordinating different micro",
    "start": "1242150",
    "end": "1248429"
  },
  {
    "text": "services is kind of the the brain of what service would call happens on the",
    "start": "1248429",
    "end": "1253500"
  },
  {
    "text": "client side another very common and awesome architecture is actually a more",
    "start": "1253500",
    "end": "1260220"
  },
  {
    "text": "pub/sub model in this case let's say if you were processing orders from your",
    "start": "1260220",
    "end": "1266370"
  },
  {
    "text": "users you could have service a process order make some database calls once it's",
    "start": "1266370",
    "end": "1273780"
  },
  {
    "text": "done send the results to message bus the message bus might be implemented using",
    "start": "1273780",
    "end": "1279679"
  },
  {
    "text": "SQS or SNS topics once that message",
    "start": "1279679",
    "end": "1285150"
  },
  {
    "text": "catches the event bus then you can have additional services subscribe to those events and that it will take take those",
    "start": "1285150",
    "end": "1293309"
  },
  {
    "text": "events and then process the next stage for the for the user maybe in this case",
    "start": "1293309",
    "end": "1298710"
  },
  {
    "text": "it's calling your fulfillment center to trigger the actual shipping of the",
    "start": "1298710",
    "end": "1305400"
  },
  {
    "text": "product and another service that does billing for the user all these different",
    "start": "1305400",
    "end": "1311100"
  },
  {
    "text": "services could then publish events once that's finished and the subsequent",
    "start": "1311100",
    "end": "1316560"
  },
  {
    "text": "pickup events from there yeah this is this is the classic microservices kind of implementation where service a",
    "start": "1316560",
    "end": "1323430"
  },
  {
    "text": "service B service C are done by you know separate themes you know many of you",
    "start": "1323430",
    "end": "1330390"
  },
  {
    "text": "probably have heard about this ethos of - pizza theme at Amazon right so each",
    "start": "1330390",
    "end": "1335820"
  },
  {
    "text": "one of the theme hopefully can only be fed by you know two pizzas got like",
    "start": "1335820",
    "end": "1340920"
  },
  {
    "text": "small agile can I beam and each one of those theme has the service owns the",
    "start": "1340920",
    "end": "1347130"
  },
  {
    "text": "service owns the operational excellence of the service and then you know the way",
    "start": "1347130",
    "end": "1352440"
  },
  {
    "text": "the service aid service being service seen talks to one another hopefully is very loosely coupled in such a way that",
    "start": "1352440",
    "end": "1358740"
  },
  {
    "text": "you can kind of you know deploy and and improve on your service independently in",
    "start": "1358740",
    "end": "1364770"
  },
  {
    "text": "this case you're relying on a mediator and event bus like thing to coordinate",
    "start": "1364770",
    "end": "1372060"
  },
  {
    "text": "those or through the choreograph those sequences yeah so there's lots of",
    "start": "1372060",
    "end": "1378390"
  },
  {
    "text": "benefits to this approach however when you're just starting to break up your",
    "start": "1378390",
    "end": "1383580"
  },
  {
    "text": "model is to distribute micro services there is lots of complexity with this",
    "start": "1383580",
    "end": "1388920"
  },
  {
    "text": "pops up model if you have complex logic like for example service see depends on",
    "start": "1388920",
    "end": "1396480"
  },
  {
    "text": "service B and service e happening at the same time and joining the results or you",
    "start": "1396480",
    "end": "1402210"
  },
  {
    "text": "have branching logic you have when there's different errors as we talked",
    "start": "1402210",
    "end": "1407400"
  },
  {
    "text": "about you have to kind of have conditional branching logic based on other areas another thing is when",
    "start": "1407400",
    "end": "1415320"
  },
  {
    "text": "something happens with something we're all happened with a message I guess processed through this chain of events",
    "start": "1415320",
    "end": "1423350"
  },
  {
    "text": "maybe the message got lost or maybe got mishandled and to be able to",
    "start": "1423350",
    "end": "1428400"
  },
  {
    "text": "troubleshoot it takes a lot of complexity because there's not a single place where the processing logic happens",
    "start": "1428400",
    "end": "1435960"
  },
  {
    "text": "everything is distributed to each component sorry it can be in it can be",
    "start": "1435960",
    "end": "1442770"
  },
  {
    "text": "very complex to to understand what's going on when you have high ten teams are",
    "start": "1442770",
    "end": "1450480"
  },
  {
    "text": "publishing messages to each other and you're trying to figure out what went wrong I was stage yeah I can imagine",
    "start": "1450480",
    "end": "1457960"
  },
  {
    "text": "like especially when you're starting out right like in many cases you start in",
    "start": "1457960",
    "end": "1463150"
  },
  {
    "text": "one single team maybe decides to create a couple of micro-services and suddenly",
    "start": "1463150",
    "end": "1469750"
  },
  {
    "text": "you have this kind of extra overhead than one needs to do to just kind of make sure that you know the micro",
    "start": "1469750",
    "end": "1475330"
  },
  {
    "text": "services are chained the right way exactly so that's why when you're when",
    "start": "1475330",
    "end": "1483250"
  },
  {
    "text": "you're just starting out there's a another great option for coordinating your micro-services and placing the",
    "start": "1483250",
    "end": "1491169"
  },
  {
    "text": "logic of the orchestration which is to have a centralized Orchestrator model",
    "start": "1491169",
    "end": "1497559"
  },
  {
    "text": "and this this will be something that happen on the server side where it's in charge of making sure calling service a",
    "start": "1497559",
    "end": "1504970"
  },
  {
    "text": "and calling service B and C at the same time joining the results passing on to the next service so in this model",
    "start": "1504970",
    "end": "1512890"
  },
  {
    "text": "because the entire processing logic is centralized in one place it's very easy",
    "start": "1512890",
    "end": "1519549"
  },
  {
    "text": "to reason about the complexity it's slower than a pub set model and when you",
    "start": "1519549",
    "end": "1526360"
  },
  {
    "text": "try to think about how to implement a central Orchestrator kind of architecture you could for example put",
    "start": "1526360",
    "end": "1533590"
  },
  {
    "text": "all those coordination logic in your node.js or Java code itself or the other",
    "start": "1533590",
    "end": "1542080"
  },
  {
    "text": "approach is to upload it to a workflow orchestration engine like step functions",
    "start": "1542080",
    "end": "1548490"
  },
  {
    "text": "and the benefit of using something like that functions is first of all you get",
    "start": "1548490",
    "end": "1553690"
  },
  {
    "text": "all the coordination framework abstracted away from your actual business logic of it happens before",
    "start": "1553690",
    "end": "1560890"
  },
  {
    "text": "beasts see happens after amb so you can define your topology of your workflow",
    "start": "1560890",
    "end": "1568210"
  },
  {
    "text": "independent actually implementing the codes to make",
    "start": "1568210",
    "end": "1573450"
  },
  {
    "text": "these service calls sir sub function itself is also a thermalized service which means you don't have to manage any",
    "start": "1573450",
    "end": "1580740"
  },
  {
    "text": "servers that would be running this orchestration logic it would be in charge of maintaining States making sure",
    "start": "1580740",
    "end": "1588660"
  },
  {
    "text": "the orchestrator is highly available the data that is being passed between services are durably stored so all that",
    "start": "1588660",
    "end": "1596640"
  },
  {
    "text": "good stuff so I did I've got a question here so one is can I avoid server-side orchestration",
    "start": "1596640",
    "end": "1605010"
  },
  {
    "text": "completely first you know the nice thing about the client-side orchestration is that graceful degradation and right like",
    "start": "1605010",
    "end": "1611220"
  },
  {
    "text": "I've served one service goes down you're not in fact that other parts of the site just kind of lights up and people can",
    "start": "1611220",
    "end": "1618120"
  },
  {
    "text": "still use it can I just a void having a server-side you know coordinator or Orchestrator altogether so what would be",
    "start": "1618120",
    "end": "1626790"
  },
  {
    "text": "the alternative just calling everything from the client-side yeah so so the one",
    "start": "1626790",
    "end": "1635730"
  },
  {
    "text": "one problem with calling everything from the client-side is you don't always necessarily want to externalize all",
    "start": "1635730",
    "end": "1644760"
  },
  {
    "text": "yours back-end services so in some example maybe you have API that you're",
    "start": "1644760",
    "end": "1651300"
  },
  {
    "text": "exposing to you a third party partner you don't necessarily want them to have all the access to individual back-end",
    "start": "1651300",
    "end": "1660000"
  },
  {
    "text": "service logic that make up your micro service of juice shield that away from",
    "start": "1660000",
    "end": "1668820"
  },
  {
    "text": "your client other times you might just want to provide a simple service so that",
    "start": "1668820",
    "end": "1676020"
  },
  {
    "text": "the client doesn't have to worry about how it works internally it also is a",
    "start": "1676020",
    "end": "1681420"
  },
  {
    "text": "cause of an encapsulation so that for the client only knows is I'm talking to",
    "start": "1681420",
    "end": "1687750"
  },
  {
    "text": "an image processing service it does all the things I needed to do and I just got",
    "start": "1687750",
    "end": "1693120"
  },
  {
    "text": "a result at the end of it so god I think okay these cases for both client-side sir let's orchestration and I can",
    "start": "1693120",
    "end": "1700140"
  },
  {
    "text": "imagine how in our shopping cart you know ecommerce website scenario you probably don't want to expose your",
    "start": "1700140",
    "end": "1706200"
  },
  {
    "text": "inventory shipping service right without going through a payment gateway step",
    "start": "1706200",
    "end": "1712410"
  },
  {
    "text": "before him yeah that makes sense now I",
    "start": "1712410",
    "end": "1719360"
  },
  {
    "text": "think I guess the code that I drove you know that no D is JavaScript ad it's",
    "start": "1719360",
    "end": "1725520"
  },
  {
    "text": "kind of similar to the orchestrator kind of pattern right where this piece of",
    "start": "1725520",
    "end": "1731160"
  },
  {
    "text": "code right really is keeping track of all the different promises or all the",
    "start": "1731160",
    "end": "1736800"
  },
  {
    "text": "different and synchronous calls to each one of the potential web services yeah",
    "start": "1736800",
    "end": "1743850"
  },
  {
    "text": "so in this exactly so in this step functions world you can actually convert",
    "start": "1743850",
    "end": "1748980"
  },
  {
    "text": "all this orchestration logic from code into the step function State language is",
    "start": "1748980",
    "end": "1756630"
  },
  {
    "text": "which is a JSON way of basic defining these sequences of steps that make up",
    "start": "1756630",
    "end": "1762630"
  },
  {
    "text": "your application logic so to make it more understandable let me take you to",
    "start": "1762630",
    "end": "1770280"
  },
  {
    "text": "the step functions console we can actually take a look at the state",
    "start": "1770280",
    "end": "1776760"
  },
  {
    "text": "machine which is basically a blueprint or a template of the point where you",
    "start": "1776760",
    "end": "1784650"
  },
  {
    "text": "define the the specs that make up your application workflow and here's an",
    "start": "1784650",
    "end": "1791130"
  },
  {
    "text": "example of image processing workflow that kind of mirrors what we just saw in",
    "start": "1791130",
    "end": "1797040"
  },
  {
    "text": "the notes j/s application so on the left hand side you can see the JSON",
    "start": "1797040",
    "end": "1803160"
  },
  {
    "text": "definition of the various steps that make up this image processing procedure",
    "start": "1803160",
    "end": "1808950"
  },
  {
    "text": "on the right hand side you can actually get a diagram generated from the json",
    "start": "1808950",
    "end": "1815220"
  },
  {
    "text": "dos definition which is again another plus of using step functions is you get",
    "start": "1815220",
    "end": "1821460"
  },
  {
    "text": "this visualization out of the box to help you understand the move",
    "start": "1821460",
    "end": "1827380"
  },
  {
    "text": "what's happening with and how you're different not micro-services are communicating and triggering one another",
    "start": "1827380",
    "end": "1836040"
  },
  {
    "text": "so as you can see here we'll start with maybe the extract metadata stage we can",
    "start": "1836040",
    "end": "1842860"
  },
  {
    "text": "have conditional logic that does a improve allocation check of whether the",
    "start": "1842860",
    "end": "1848950"
  },
  {
    "text": "image type is supported model just like what we did here in our validator code",
    "start": "1848950",
    "end": "1858540"
  },
  {
    "text": "we can have additional steps to transform the metadata to call recognition and generate genre seminole",
    "start": "1858540",
    "end": "1865270"
  },
  {
    "text": "and things could happen in parallel and after all this processing is done we can",
    "start": "1865270",
    "end": "1871240"
  },
  {
    "text": "index all the metadata retracted into a database",
    "start": "1871240",
    "end": "1876630"
  },
  {
    "text": "so the question Angela someone is wondering that diagram looks kind of",
    "start": "1876630",
    "end": "1882220"
  },
  {
    "text": "neat right especially for documentation purposes is there a way that we spark that out you know the the diagram that",
    "start": "1882220",
    "end": "1889540"
  },
  {
    "text": "it generates yeah a great question so at this point the step functions service",
    "start": "1889540",
    "end": "1897340"
  },
  {
    "text": "the only way to access the diagram is by going to the console we've heard of some",
    "start": "1897340",
    "end": "1903490"
  },
  {
    "text": "customers that actually uses a headless browser in a lambda function to actually",
    "start": "1903490",
    "end": "1910360"
  },
  {
    "text": "take a screen shot off the fragment so so that's one way of going about it the",
    "start": "1910360",
    "end": "1916480"
  },
  {
    "text": "other way is just to really go to this step functions console and take a look",
    "start": "1916480",
    "end": "1921940"
  },
  {
    "text": "at the visualization from there yeah actually make it even you can zoom in",
    "start": "1921940",
    "end": "1928780"
  },
  {
    "text": "zoom out especially it comes really handy when you actually have a huge",
    "start": "1928780",
    "end": "1933840"
  },
  {
    "text": "diagram with many many steps I've seen step functions with hundreds of steps so",
    "start": "1933840",
    "end": "1941110"
  },
  {
    "text": "it can get really complex the realization really helps you to understand what's going on yeah exciting",
    "start": "1941110",
    "end": "1950080"
  },
  {
    "text": "that's a potential cool JavaScript project I think they're just half of me they just make that functionality as a",
    "start": "1950080",
    "end": "1956680"
  },
  {
    "text": "library that and can leverage there to be that'll be cool I think yeah if somebody listening",
    "start": "1956680",
    "end": "1963039"
  },
  {
    "text": "wants to put that a say as a project",
    "start": "1963039",
    "end": "1968440"
  },
  {
    "text": "onto the server less out people that would be awesome add to these staff",
    "start": "1968440",
    "end": "1976149"
  },
  {
    "text": "functions user community so let me show you example of actually kicking off one",
    "start": "1976149",
    "end": "1982389"
  },
  {
    "text": "of these image processing workflows so",
    "start": "1982389",
    "end": "1987700"
  },
  {
    "text": "in order to start the execution of a given workflow we need to give it some input payloads so in our case since",
    "start": "1987700",
    "end": "1996850"
  },
  {
    "text": "we're processing images and the images are stored on s3 what we need is the Aster bucket and the key name of the",
    "start": "1996850",
    "end": "2004590"
  },
  {
    "text": "image so let me copy from my editor over",
    "start": "2004590",
    "end": "2010320"
  },
  {
    "text": "here and you can actually specify an",
    "start": "2010320",
    "end": "2015600"
  },
  {
    "text": "execution ID and you can also leave that out if you live without live that out",
    "start": "2015600",
    "end": "2021799"
  },
  {
    "text": "these step functions service will automatically ID for you so you can",
    "start": "2021799",
    "end": "2027120"
  },
  {
    "text": "track the specific execution and for specific inputs that you passing mm-hmm",
    "start": "2027120",
    "end": "2035010"
  },
  {
    "text": "get this started and it's really cool because everything here is color color",
    "start": "2035010",
    "end": "2041730"
  },
  {
    "text": "coded so you can see which step is actually in progress you can actually watch this stained machine progress",
    "start": "2041730",
    "end": "2050158"
  },
  {
    "text": "throughout this workflow and looks like everything just finished successfully",
    "start": "2050159",
    "end": "2055770"
  },
  {
    "text": "with all the green lighting up another cool thing of this realization is also",
    "start": "2055770",
    "end": "2062669"
  },
  {
    "text": "when you have branching logic sort for some cases maybe depending on the input you might take a different execution",
    "start": "2062669",
    "end": "2068368"
  },
  {
    "text": "path this relation can help you see which execution path you took if there's",
    "start": "2068369",
    "end": "2075179"
  },
  {
    "text": "error that happened that state will be marked as the failed state and you can",
    "start": "2075179",
    "end": "2080550"
  },
  {
    "text": "see it's marked as read and you can click on the individual state of that",
    "start": "2080550",
    "end": "2088440"
  },
  {
    "text": "that is failed or succeeded you can take a look at what are the",
    "start": "2088440",
    "end": "2093898"
  },
  {
    "text": "exact input that got passed into this step well what's the output of this step",
    "start": "2093899",
    "end": "2099480"
  },
  {
    "text": "and if there was any exceptions you can also look at it here so it's very handy",
    "start": "2099480",
    "end": "2104849"
  },
  {
    "text": "when you're developing applications it's law's simpler than if you were to do",
    "start": "2104849",
    "end": "2112320"
  },
  {
    "text": "everything in a huge monolithic application because we just join you",
    "start": "2112320",
    "end": "2118950"
  },
  {
    "text": "know what and and angela is showing here is AWS step functions and really we're",
    "start": "2118950",
    "end": "2124980"
  },
  {
    "text": "kind of showing it showing an alternative implementation to the very rudimentary nodejs code that I wrote to",
    "start": "2124980",
    "end": "2134310"
  },
  {
    "text": "coordinate all this various little steps Angela so earlier on when we just kind",
    "start": "2134310",
    "end": "2140970"
  },
  {
    "text": "of started with we had questions around monolithic lambdas and essentially what",
    "start": "2140970",
    "end": "2146160"
  },
  {
    "text": "we're saying is what if that piece of code that I wrote right that calls",
    "start": "2146160",
    "end": "2151800"
  },
  {
    "text": "extraction after their mission metadata doing the image type check and then record you know sending the web start is",
    "start": "2151800",
    "end": "2157950"
  },
  {
    "text": "called the recognition waiting for it and all that is encapsulated in a lambda that's kind of still serverless right",
    "start": "2157950",
    "end": "2165440"
  },
  {
    "text": "what would be the benefit of going down that monolithic lambda approach versus",
    "start": "2165440",
    "end": "2171960"
  },
  {
    "text": "you know using speck functions to coordinate all these calls yeah so with",
    "start": "2171960",
    "end": "2178020"
  },
  {
    "text": "the if you were to put all that coordination logic inside a lambda function if it's fairly simple logic",
    "start": "2178020",
    "end": "2186540"
  },
  {
    "text": "like I could see it being if it's a manageable amount of logic is totally",
    "start": "2186540",
    "end": "2193859"
  },
  {
    "text": "doable but there's a few more benefits if you were to kind of move to a more distributed with step functions so first",
    "start": "2193859",
    "end": "2201510"
  },
  {
    "text": "of all so the code that's doing the coordination now doesn't doesn't live in",
    "start": "2201510",
    "end": "2207780"
  },
  {
    "text": "a lambda function which means you're not paying for the time that it's executing so when you think about a piece of",
    "start": "2207780",
    "end": "2215609"
  },
  {
    "text": "coordination logic most of the time is just wait sending up sending outs requests I'm",
    "start": "2215609",
    "end": "2221280"
  },
  {
    "text": "waiting for the response so the code itself is not really doing much and it's really just sitting",
    "start": "2221280",
    "end": "2226990"
  },
  {
    "text": "idle us flying off firing off requests and waiting for responses so one of the",
    "start": "2226990",
    "end": "2234820"
  },
  {
    "text": "benefits you get is kind of the cost savings of not having something that's",
    "start": "2234820",
    "end": "2240570"
  },
  {
    "text": "just sitting there to make requests and I'm waiting the other benefit is really",
    "start": "2240570",
    "end": "2247410"
  },
  {
    "text": "as we will see later on each of these steps you can configure by using a few",
    "start": "2247410",
    "end": "2255490"
  },
  {
    "text": "lines of JSON configuration you can configure things like exponential retry",
    "start": "2255490",
    "end": "2261790"
  },
  {
    "text": "you can configure error caching logic as part of the topology of yours of your",
    "start": "2261790",
    "end": "2269320"
  },
  {
    "text": "workflow this makes it much simpler to deal with things like error handling or",
    "start": "2269320",
    "end": "2274600"
  },
  {
    "text": "retries compared to if you were to write and everything inside the code itself",
    "start": "2274600",
    "end": "2281890"
  },
  {
    "text": "because every in every step kind of is all way of failing and your code will",
    "start": "2281890",
    "end": "2288330"
  },
  {
    "text": "get a lot more complex if you have ten steps each step can have ten different",
    "start": "2288330",
    "end": "2294250"
  },
  {
    "text": "ways of filling yeah and I guess just to add on that I can imagine that you know",
    "start": "2294250",
    "end": "2299800"
  },
  {
    "text": "if this if these steps took or takes less than five minutes then you know it",
    "start": "2299800",
    "end": "2305710"
  },
  {
    "text": "fits into the maximum runtime of I made up your slam that function right you could do it that way but in this case",
    "start": "2305710",
    "end": "2312760"
  },
  {
    "text": "obviously you are not constrained often over all five minutes duration right you",
    "start": "2312760",
    "end": "2318340"
  },
  {
    "text": "can spend much longer I would imagine probably even days or months or or however you like it to be yeah so that's",
    "start": "2318340",
    "end": "2327400"
  },
  {
    "text": "another great thing about step function sorry so each execution can spend up to a year for execution time so we have",
    "start": "2327400",
    "end": "2335050"
  },
  {
    "text": "customers that leverage step functions for a mix of maybe human type of tasks",
    "start": "2335050",
    "end": "2342190"
  },
  {
    "text": "along with automated tasks that are performed by computers and so this is",
    "start": "2342190",
    "end": "2348820"
  },
  {
    "text": "not limited to coordinating services I've made up of London functions as well",
    "start": "2348820",
    "end": "2354880"
  },
  {
    "text": "as a lot of running tasks or things that are waiting for human inputs like human",
    "start": "2354880",
    "end": "2361090"
  },
  {
    "text": "wants to approve a certain stage before you move on to the next now the state",
    "start": "2361090",
    "end": "2366670"
  },
  {
    "text": "progression you know the estate off these executions is that durable in a",
    "start": "2366670",
    "end": "2372430"
  },
  {
    "text": "sense that my piece of code right if something if we're still waiting on a",
    "start": "2372430",
    "end": "2378520"
  },
  {
    "text": "result from one of the webservice and then for one reason or another that machine went down right for losses",
    "start": "2378520",
    "end": "2386440"
  },
  {
    "text": "connectivity or or whatever that may be then suddenly we have to retry the whole",
    "start": "2386440",
    "end": "2392620"
  },
  {
    "text": "thing we have to start from step one again because we're not storing the state of the executions anywhere with",
    "start": "2392620",
    "end": "2399700"
  },
  {
    "text": "step functions is every single step progression you know persistent into a",
    "start": "2399700",
    "end": "2406450"
  },
  {
    "text": "durable store yeah so definitely every single step as we can see here the input",
    "start": "2406450",
    "end": "2412840"
  },
  {
    "text": "and outputs and for at each execution where it is currently at in the workflow",
    "start": "2412840",
    "end": "2419200"
  },
  {
    "text": "all of those states is durably stored and check pointed by the step function",
    "start": "2419200",
    "end": "2424240"
  },
  {
    "text": "service it's if you're familiar with the amazon a little bit resolve",
    "start": "2424240",
    "end": "2430810"
  },
  {
    "text": "I read your model so all of this data is stored across multiple availability zones so even if one of these services",
    "start": "2430810",
    "end": "2439120"
  },
  {
    "text": "would fail or even if one of the server's in the back end fail all of",
    "start": "2439120",
    "end": "2444400"
  },
  {
    "text": "this state is stored in across availability zones which means any",
    "start": "2444400",
    "end": "2451600"
  },
  {
    "text": "service can pick up where it left off and continue with the execution so going",
    "start": "2451600",
    "end": "2464620"
  },
  {
    "text": "back to this example execution we just showed in the second step functions call",
    "start": "2464620",
    "end": "2470410"
  },
  {
    "text": "so you can actually also see the entire event history of Holland at each step",
    "start": "2470410",
    "end": "2476710"
  },
  {
    "text": "take took and it also helps you to figure out if one of my workflows is",
    "start": "2476710",
    "end": "2482710"
  },
  {
    "text": "taking a long time we're in this workflow get the bottle",
    "start": "2482710",
    "end": "2487900"
  },
  {
    "text": "that come for you can see the state transition happens between each step so very handy as you",
    "start": "2487900",
    "end": "2496170"
  },
  {
    "text": "are trying to operationalize monitor and look at for every input that went into",
    "start": "2496170",
    "end": "2503550"
  },
  {
    "text": "my system what are the difference that we took and if there's errors where that",
    "start": "2503550",
    "end": "2509940"
  },
  {
    "text": "ever happened and where are the details so it's all very easily identifiable in",
    "start": "2509940",
    "end": "2516030"
  },
  {
    "text": "the UI itself now all of this information is also available through the staff functions API so you can also",
    "start": "2516030",
    "end": "2523080"
  },
  {
    "text": "export it to your favorite log monitoring or analytics platform that",
    "start": "2523080",
    "end": "2529680"
  },
  {
    "text": "you like as well awesome oh can we indeed show me and how",
    "start": "2529680",
    "end": "2534750"
  },
  {
    "text": "I can you know potentially convert all my JavaScript code into a step function",
    "start": "2534750",
    "end": "2542400"
  },
  {
    "text": "Orchestrator yeah so let's get started converting our codes from this into",
    "start": "2542400",
    "end": "2551190"
  },
  {
    "text": "something that looks like this in step functions now to get started because",
    "start": "2551190",
    "end": "2557340"
  },
  {
    "text": "we're gonna create a new state machine in the step function console itself and",
    "start": "2557340",
    "end": "2562860"
  },
  {
    "text": "so if you look here there's a few options for help you get in started you",
    "start": "2562860",
    "end": "2568890"
  },
  {
    "text": "can pick one of the templates that gets you started quickly so it has some of",
    "start": "2568890",
    "end": "2574050"
  },
  {
    "text": "the different constructs examples built-in so for us to get started let's",
    "start": "2574050",
    "end": "2581940"
  },
  {
    "text": "start with the hollow world example and when you create a step functions using",
    "start": "2581940",
    "end": "2588120"
  },
  {
    "text": "the console so we need to give it a name so I say let's call this twitch breaking",
    "start": "2588120",
    "end": "2595940"
  },
  {
    "text": "on the load you will also need the I am role so this is the role that's used by",
    "start": "2595940",
    "end": "2603300"
  },
  {
    "text": "the step function service you know to invoke lambda functions on your behalf",
    "start": "2603300",
    "end": "2608660"
  },
  {
    "text": "so I created one right before this episode to cause safer same machine role",
    "start": "2608660",
    "end": "2614700"
  },
  {
    "text": "us East one and if you're interested in kind of seeing what this role is",
    "start": "2614700",
    "end": "2619950"
  },
  {
    "text": "actually made whether permissions associated with it this is actually creative using",
    "start": "2619950",
    "end": "2625619"
  },
  {
    "text": "CloudFormation so we have all of our you",
    "start": "2625619",
    "end": "2631829"
  },
  {
    "text": "can click on text editor yeah new text editor 8/8 yeah thanks for the",
    "start": "2631829",
    "end": "2639030"
  },
  {
    "text": "help so this is a confirmation template that we defined this the I am role with",
    "start": "2639030",
    "end": "2645329"
  },
  {
    "text": "as you can see here the permissions for this role is to invoke any lambda",
    "start": "2645329",
    "end": "2650849"
  },
  {
    "text": "functions and the assumed rural policy here is for the state machine or stair",
    "start": "2650849",
    "end": "2657720"
  },
  {
    "text": "function service to be able to assume this role to involve lambda functions",
    "start": "2657720",
    "end": "2663380"
  },
  {
    "text": "yeah and for those who are new to AWS essentially I am I am is a needy",
    "start": "2663380",
    "end": "2669750"
  },
  {
    "text": "security construct for all the different resources within AWS what it can and",
    "start": "2669750",
    "end": "2675660"
  },
  {
    "text": "cannot do so in this case we're ramping permission for step functions to invoke you know any lambda functions but in",
    "start": "2675660",
    "end": "2682950"
  },
  {
    "text": "your face rather you want to limit it to specific ones that you're using yeah so",
    "start": "2682950",
    "end": "2689609"
  },
  {
    "text": "let's go started with kind of drafting our first stay machine definition so as",
    "start": "2689609",
    "end": "2695670"
  },
  {
    "text": "you can see here is pretty straightforward JSON for comments let's",
    "start": "2695670",
    "end": "2700859"
  },
  {
    "text": "give it something descriptive about what this workflow will do it's called an",
    "start": "2700859",
    "end": "2706230"
  },
  {
    "text": "image processing workflow and then the",
    "start": "2706230",
    "end": "2711869"
  },
  {
    "text": "bulk of the state machine definition is actually listing the different steps",
    "start": "2711869",
    "end": "2717240"
  },
  {
    "text": "that make up your application so in this example let's start with our first step",
    "start": "2717240",
    "end": "2723630"
  },
  {
    "text": "which is extracts image metadata so",
    "start": "2723630",
    "end": "2729180"
  },
  {
    "text": "every step has a unique name within the state machine so that's how you can reference which states connect to which",
    "start": "2729180",
    "end": "2737510"
  },
  {
    "text": "which subsequent stage and you will see",
    "start": "2737510",
    "end": "2743010"
  },
  {
    "text": "here also we have a starting start at node this this is basically a pointer",
    "start": "2743010",
    "end": "2748470"
  },
  {
    "text": "that tell us functions where's the starting point which is the first step that the",
    "start": "2748470",
    "end": "2754059"
  },
  {
    "text": "execution engine should start with unless as you make changes in this",
    "start": "2754059",
    "end": "2759789"
  },
  {
    "text": "editor you can actually click the refresh button here to actually see visualize what you're typing on the left",
    "start": "2759789",
    "end": "2767559"
  },
  {
    "text": "you make sure that it's what you expected the flow to be on the right",
    "start": "2767559",
    "end": "2772900"
  },
  {
    "text": "hand side in the visualization side so",
    "start": "2772900",
    "end": "2778089"
  },
  {
    "text": "for every state that you create in state machine in stop functions there's type",
    "start": "2778089",
    "end": "2783759"
  },
  {
    "text": "associated with it so the state the state language is is very much similar",
    "start": "2783759",
    "end": "2791170"
  },
  {
    "text": "to kind of a rich t-shirt programming language with constructs like a",
    "start": "2791170",
    "end": "2798150"
  },
  {
    "text": "conditional logic it has things like forking and joining it has things like",
    "start": "2798150",
    "end": "2804119"
  },
  {
    "text": "every try handling try catch finally type of logic and so what's the what the",
    "start": "2804119",
    "end": "2812349"
  },
  {
    "text": "this pass type we're using here is basically a way for you to mock or stub",
    "start": "2812349",
    "end": "2818259"
  },
  {
    "text": "a particular step sir before you actually implement this with actual with",
    "start": "2818259",
    "end": "2825039"
  },
  {
    "text": "actual code that does the image extraction we can actually step out this particular step so we can formulate the",
    "start": "2825039",
    "end": "2833079"
  },
  {
    "text": "structure of our workflow without having to actually do the implementation when I",
    "start": "2833079",
    "end": "2840009"
  },
  {
    "text": "talk to customers they also find this feature and super helpful to when you have a team of engineers that want to",
    "start": "2840009",
    "end": "2846959"
  },
  {
    "text": "implement different parts of your your workflow first define the the individual",
    "start": "2846959",
    "end": "2853930"
  },
  {
    "text": "steps that make up this this workflow and once you define the different steps",
    "start": "2853930",
    "end": "2860499"
  },
  {
    "text": "and the interfaces between each step you can easily just give your developers a",
    "start": "2860499",
    "end": "2866559"
  },
  {
    "text": "sprint task to actually implement the individual steps later so it's great way",
    "start": "2866559",
    "end": "2871569"
  },
  {
    "text": "to kind of to also make your team more easily collect to make your team",
    "start": "2871569",
    "end": "2878650"
  },
  {
    "text": "collaboratory zhilie bylaw bridging step functions so once we have a past pro tip number",
    "start": "2878650",
    "end": "2886750"
  },
  {
    "text": "one use fast dates for mocking states right that's pretty cool yeah exactly so",
    "start": "2886750",
    "end": "2893470"
  },
  {
    "text": "when you actually do a stub or mock past date you can actually also dictate the",
    "start": "2893470",
    "end": "2901450"
  },
  {
    "text": "outputs that will be generated by this particular past state so in this case",
    "start": "2901450",
    "end": "2906960"
  },
  {
    "text": "since we're J extracting image metadata let's give it a example outputs to be",
    "start": "2906960",
    "end": "2914079"
  },
  {
    "text": "able to tell us so after the states that we got some information about this image",
    "start": "2914079",
    "end": "2920049"
  },
  {
    "text": "maybe we extracted the format to be JPEG and the last piece that's always present",
    "start": "2920049",
    "end": "2926349"
  },
  {
    "text": "in every state definition is either a marker that says this is the end of your",
    "start": "2926349",
    "end": "2934150"
  },
  {
    "text": "state machine execution or if there's subsequent steps to it",
    "start": "2934150",
    "end": "2940420"
  },
  {
    "text": "pointer to the next step so for for this points at this point that's just create",
    "start": "2940420",
    "end": "2946510"
  },
  {
    "text": "a single state machine with a single step and everything looks good on the",
    "start": "2946510",
    "end": "2953829"
  },
  {
    "text": "right so let's create our state machine so once you create a state machine you",
    "start": "2953829",
    "end": "2959349"
  },
  {
    "text": "can immediately start testing it out get since that way you only have a mock",
    "start": "2959349",
    "end": "2966309"
  },
  {
    "text": "state in our desk in our definition right now we can actually just test it",
    "start": "2966309",
    "end": "2971380"
  },
  {
    "text": "with empty input as you can see here we",
    "start": "2971380",
    "end": "2976960"
  },
  {
    "text": "give the inputs to be empty JSON and we can see the output that passes that is",
    "start": "2976960",
    "end": "2983920"
  },
  {
    "text": "generated after this workflow has passed through the state were defined now now",
    "start": "2983920",
    "end": "2992319"
  },
  {
    "text": "that we have a structure for a single state here wrong can you help us convert",
    "start": "2992319",
    "end": "3000390"
  },
  {
    "text": "our first part of our application into a lambda functions words because you need",
    "start": "3000390",
    "end": "3005970"
  },
  {
    "text": "that as a lambda function to execute on right so let's let's switch back to cloud nine and",
    "start": "3005970",
    "end": "3012450"
  },
  {
    "text": "I'm going to if you notice we are working on the top left folders they",
    "start": "3012450",
    "end": "3017760"
  },
  {
    "text": "wrote which life I'm going to go into that folder if you don't mind expanding",
    "start": "3017760",
    "end": "3024180"
  },
  {
    "text": "the Bosch window Angela so you can see it okay all right so I'm going to where",
    "start": "3024180",
    "end": "3034290"
  },
  {
    "text": "are we now we are in environment so I'm gonna go into the twitch life folder and",
    "start": "3034290",
    "end": "3040290"
  },
  {
    "text": "this is indeed our folder there I'm gonna create a new lambda application or",
    "start": "3040290",
    "end": "3047280"
  },
  {
    "text": "a lambda function I'm just gonna use Sam Sam and it run time and I'm gonna use",
    "start": "3047280",
    "end": "3052760"
  },
  {
    "text": "nodejs 8.10 for those of you who are new to Sam Sam is a collection of features",
    "start": "3052760",
    "end": "3061200"
  },
  {
    "text": "and functionality available on github a WMS service application model it has a lot of cool features including the CLI",
    "start": "3061200",
    "end": "3067820"
  },
  {
    "text": "capability to just kind of you know easily start a new application and",
    "start": "3067820",
    "end": "3072980"
  },
  {
    "text": "define your functions and whatnot so now I have the SAP app on the folder and one",
    "start": "3072980",
    "end": "3080730"
  },
  {
    "text": "of the files one of the function that's created is called hello world so I'm",
    "start": "3080730",
    "end": "3086430"
  },
  {
    "text": "gonna rename the hello world world to our function called extract metadata on",
    "start": "3086430",
    "end": "3094620"
  },
  {
    "text": "the app I'm going to it has a",
    "start": "3094620",
    "end": "3100110"
  },
  {
    "text": "boilerplate code here and for those of you who are new to lambda essentially",
    "start": "3100110",
    "end": "3105300"
  },
  {
    "text": "what it does is you know every time the lambda function is triggered by something it will execute the code this",
    "start": "3105300",
    "end": "3113100"
  },
  {
    "text": "code right here right so in this case it's making a web service call to Axios",
    "start": "3113100",
    "end": "3119270"
  },
  {
    "text": "but it could be anything and the way in which you pass on parameters are through",
    "start": "3119270",
    "end": "3124980"
  },
  {
    "text": "the event object or context object and once it's finished you're expected to you know call the callback function",
    "start": "3124980",
    "end": "3130920"
  },
  {
    "text": "there and because it's notjust 8.10 you see also that a synchronous keyword",
    "start": "3130920",
    "end": "3136200"
  },
  {
    "text": "there but just for simplicity we're gonna using promises so in this case like we",
    "start": "3136200",
    "end": "3144610"
  },
  {
    "text": "said earlier we wanna we want to convert our extract metadata function into",
    "start": "3144610",
    "end": "3154440"
  },
  {
    "text": "lambda hacker so we aren't going to just simply do this we're going to first",
    "start": "3154440",
    "end": "3165030"
  },
  {
    "text": "import the metadata which is metadata",
    "start": "3165030",
    "end": "3171570"
  },
  {
    "text": "wire is one folder down no two folders",
    "start": "3171570",
    "end": "3178900"
  },
  {
    "text": "down so extract metadata assign that and then go to live and then made a data so",
    "start": "3178900",
    "end": "3185920"
  },
  {
    "text": "that's the right place and then I cook them do this bar metadata",
    "start": "3185920",
    "end": "3193620"
  },
  {
    "text": "oh so this needs to be the same promise",
    "start": "3193620",
    "end": "3201400"
  },
  {
    "text": "this code right which is kind of look a little bit like this metadata extract",
    "start": "3201400",
    "end": "3212160"
  },
  {
    "text": "the image and then once I'm done I'm going to get the file metadata back",
    "start": "3212160",
    "end": "3219450"
  },
  {
    "text": "extract that metadata and then I'm gonna pass on the result into my callback and",
    "start": "3219450",
    "end": "3227980"
  },
  {
    "text": "the callback takes two parameters one is if there's an error and there's no hair it's know that we're going to pass on",
    "start": "3227980",
    "end": "3234580"
  },
  {
    "text": "the object itself at this point I don't have the image right so I'm gonna get",
    "start": "3234580",
    "end": "3244540"
  },
  {
    "text": "the image from the event object and in this case I'm gonna get it from SRC key",
    "start": "3244540",
    "end": "3251650"
  },
  {
    "text": "and",
    "start": "3251650",
    "end": "3254549"
  },
  {
    "text": "I'm just gonna construct an utter JSON object here and that's our C bucket",
    "start": "3258410",
    "end": "3273670"
  },
  {
    "text": "that's kind of it right so in essence here I'm getting all the parameters from this object key and",
    "start": "3275829",
    "end": "3282259"
  },
  {
    "text": "bucket and then I'm gonna pass on this image reference into my metadata and",
    "start": "3282259",
    "end": "3288949"
  },
  {
    "text": "extract just to make sure that it's packaged correctly and all that I'm going to copy across the library",
    "start": "3288949",
    "end": "3295819"
  },
  {
    "text": "function into our extract metadata here just to make sure that it is referenced",
    "start": "3295819",
    "end": "3304130"
  },
  {
    "text": "properly so it doesn't have to go out from the folder actually it looks kind",
    "start": "3304130",
    "end": "3313489"
  },
  {
    "text": "of a little bit more like this now and what you notice here is I'm not putting my implementation inside the lambda",
    "start": "3313489",
    "end": "3320209"
  },
  {
    "text": "function right so the implementation of the extraction of the metadata is still",
    "start": "3320209",
    "end": "3326859"
  },
  {
    "text": "pretty much encapsulated in that into that library and I'm just kind of making",
    "start": "3326859",
    "end": "3332599"
  },
  {
    "text": "a call to the the library function so",
    "start": "3332599",
    "end": "3338390"
  },
  {
    "text": "once I'm done I've got it here if I want to sound allows me to test it locally",
    "start": "3338390",
    "end": "3344209"
  },
  {
    "text": "and all that I think you know just for the purpose of the of the session I'm",
    "start": "3344209",
    "end": "3350059"
  },
  {
    "text": "just gonna cut it short I'm just gonna deploy it right away I'm pretty confident on those changes so let's package the one thing one",
    "start": "3350059",
    "end": "3362029"
  },
  {
    "text": "suggestion here is just to keep things consistent I've been using a three key",
    "start": "3362029",
    "end": "3369019"
  },
  {
    "text": "and s3 bucket and the lambda event so we can write just quickly change this to a",
    "start": "3369019",
    "end": "3376009"
  },
  {
    "text": "strictly thank you and then if we go to",
    "start": "3376009",
    "end": "3381019"
  },
  {
    "text": "the back path of the Apple and run I just need to change the name so the",
    "start": "3381019",
    "end": "3386930"
  },
  {
    "text": "reason resources I'm gonna call it extract metadata it should be calling our applique s and",
    "start": "3386930",
    "end": "3393490"
  },
  {
    "text": "the function is called lambda handler not just 8.10 we don't need any",
    "start": "3393490",
    "end": "3398530"
  },
  {
    "text": "environment variables we can just keep it there we don't need to expose it from",
    "start": "3398530",
    "end": "3404230"
  },
  {
    "text": "API gateway in this case so I'm just going to remove that and I'm going to",
    "start": "3404230",
    "end": "3409839"
  },
  {
    "text": "keep the you know what I don't I don't",
    "start": "3409839",
    "end": "3414849"
  },
  {
    "text": "need the outputs I'm just gonna keep the",
    "start": "3414849",
    "end": "3419640"
  },
  {
    "text": "the name of the a RM and the IM role I just want to make sure the name is",
    "start": "3419970",
    "end": "3426150"
  },
  {
    "text": "consistent all right something like that",
    "start": "3426150",
    "end": "3432450"
  },
  {
    "text": "I'm not seeing the changes you're making by the way Oh looking on the same file",
    "start": "3433349",
    "end": "3442650"
  },
  {
    "text": "[Music] yeah that is interesting maybe just",
    "start": "3442650",
    "end": "3452109"
  },
  {
    "text": "convenient one maybe the or if you want to close the file and open it kick it",
    "start": "3452109",
    "end": "3459430"
  },
  {
    "text": "off yes okay now no looks great okay and",
    "start": "3459430",
    "end": "3467460"
  },
  {
    "text": "then the where's the I am role think I",
    "start": "3467460",
    "end": "3474700"
  },
  {
    "text": "messed up a little bit just okay so let",
    "start": "3474700",
    "end": "3483970"
  },
  {
    "text": "me also change the code URI to match the file folder name that you'll be renamed",
    "start": "3483970",
    "end": "3490690"
  },
  {
    "text": "here",
    "start": "3490690",
    "end": "3493170"
  },
  {
    "text": "strikes I think that's I think that's pretty much it so what I've done so far",
    "start": "3497640",
    "end": "3503279"
  },
  {
    "text": "is this is a Sam template file right what I'm doing is I'm just you know",
    "start": "3503279",
    "end": "3510529"
  },
  {
    "text": "declaring the lambda function pointing to the code that is in the subfolder",
    "start": "3510529",
    "end": "3517859"
  },
  {
    "text": "extract metadata the handler is act of J s the function is lambda handler the",
    "start": "3517859",
    "end": "3522869"
  },
  {
    "text": "runtime is no Jessie 410 and I think that's pretty much it so I'm going to now go to the console I I think he also",
    "start": "3522869",
    "end": "3531239"
  },
  {
    "text": "needs the permissions here for the lambda function oh yeah that's true",
    "start": "3531239",
    "end": "3537150"
  },
  {
    "text": "that's true let's do that so let's see what role do",
    "start": "3537150",
    "end": "3550200"
  },
  {
    "text": "we need so I think I'm just going to use",
    "start": "3550200",
    "end": "3556650"
  },
  {
    "text": "the the default role which kind of looks a little bit like this alright so it is",
    "start": "3556650",
    "end": "3568589"
  },
  {
    "text": "essentially just a don't need so if",
    "start": "3568589",
    "end": "3585839"
  },
  {
    "text": "you're watching this so when whenever you needs kind of to look at a reference of what the same template format looks",
    "start": "3585839",
    "end": "3592650"
  },
  {
    "text": "like you can easily go to github lookup ews sound I think by default if you",
    "start": "3592650",
    "end": "3602670"
  },
  {
    "text": "don't specify any role power rules it would give you the lavender trust role",
    "start": "3602670",
    "end": "3608999"
  },
  {
    "text": "by default so let's let's just try and see if that works",
    "start": "3608999",
    "end": "3614690"
  },
  {
    "text": "we have lots of Jumbo's on the down",
    "start": "3618359",
    "end": "3624880"
  },
  {
    "text": "websites so I just miss type so now I'm",
    "start": "3624880",
    "end": "3634660"
  },
  {
    "text": "at the console I'm going to package the",
    "start": "3634660",
    "end": "3640140"
  },
  {
    "text": "llamo file which is Sam package and blue",
    "start": "3640140",
    "end": "3645760"
  },
  {
    "text": "dot yeah mole oh my in the wrong folder I think I'm in wrong folder",
    "start": "3645760",
    "end": "3653549"
  },
  {
    "text": "yeah I'm put yellow files there so now I'm gonna package it up hello world",
    "start": "3654180",
    "end": "3665549"
  },
  {
    "text": "looks like we didn't change the color I can make this change right now oh okay I",
    "start": "3665549",
    "end": "3674710"
  },
  {
    "text": "thought you didn't maybe I overdid it okay hi now I'm just going to deploy it",
    "start": "3674710",
    "end": "3683799"
  },
  {
    "text": "so now I'm gonna call Sam deploy and I'm going to call the compiled confirmation",
    "start": "3683799",
    "end": "3692440"
  },
  {
    "text": "file that Sam already prepared so in this case the code is already uploaded to s3 and I'm just gonna call this pack",
    "start": "3692440",
    "end": "3700960"
  },
  {
    "text": "name extract metadata and the capabilities or CloudFormation it's just",
    "start": "3700960",
    "end": "3708059"
  },
  {
    "text": "capability a there's quite a bit of parameters here but in essence you know",
    "start": "3708059",
    "end": "3713980"
  },
  {
    "text": "it's pretty much the same parameters that you will be using for most of the",
    "start": "3713980",
    "end": "3719619"
  },
  {
    "text": "most of the time memory size it's invalid Oh cuz it's string and not integer I'll",
    "start": "3719619",
    "end": "3726819"
  },
  {
    "text": "just quickly do that again",
    "start": "3726819",
    "end": "3731130"
  },
  {
    "text": "so right now what it's doing is it's going into our roundup function the",
    "start": "3732930",
    "end": "3740980"
  },
  {
    "text": "color I went back to",
    "start": "3740980",
    "end": "3744450"
  },
  {
    "text": "you wanna try again absolutely",
    "start": "3750140",
    "end": "3755329"
  },
  {
    "text": "good boy it's still seeing",
    "start": "3765920",
    "end": "3775069"
  },
  {
    "text": "let's switch the console and see if it's creating it properly okay let's go to",
    "start": "3787280",
    "end": "3794400"
  },
  {
    "text": "the confirmation console loading up right now mm-hmm",
    "start": "3794400",
    "end": "3800480"
  },
  {
    "text": "it's crate complete yep successful therapy I'm gonna function",
    "start": "3800540",
    "end": "3808010"
  },
  {
    "text": "under consults we'll take a look at this function that was just launched good eye",
    "start": "3808010",
    "end": "3815670"
  },
  {
    "text": "view the the code that we just deployed in the lambda concert here it looks good",
    "start": "3815670",
    "end": "3821070"
  },
  {
    "text": "so now what we've done there is we've taken out a small piece of my original",
    "start": "3821070",
    "end": "3828420"
  },
  {
    "text": "monolithic code based wrap it inside a lambda handler and deploy it as a lambda",
    "start": "3828420",
    "end": "3835080"
  },
  {
    "text": "function so that now we can call it from our step function yeah so to to make",
    "start": "3835080",
    "end": "3840420"
  },
  {
    "text": "this looks like it doesn't have the permission to read from nice three so",
    "start": "3840420",
    "end": "3847770"
  },
  {
    "text": "I'm going to make one more change in our sound template so we can serve the",
    "start": "3847770",
    "end": "3853380"
  },
  {
    "text": "lambda function will have access to read from s3 so let me just get the syntax",
    "start": "3853380",
    "end": "3863160"
  },
  {
    "text": "from one of the examples on the sound github page good point so instead of ICS",
    "start": "3863160",
    "end": "3873210"
  },
  {
    "text": "we'll be looking at a street cat object mm-hmm is it objects or objects",
    "start": "3873210",
    "end": "3880800"
  },
  {
    "text": "nature object resource that looks right",
    "start": "3880800",
    "end": "3887690"
  },
  {
    "text": "we can redeploy our done the function using the same commands that's gone just",
    "start": "3887690",
    "end": "3893490"
  },
  {
    "text": "run that went successfully and then some",
    "start": "3893490",
    "end": "3899100"
  },
  {
    "text": "deployed",
    "start": "3899100",
    "end": "3901550"
  },
  {
    "text": "so if you imagine we probably want to do this for all the other lambdas and",
    "start": "3905780",
    "end": "3911070"
  },
  {
    "text": "obviously we don't want you to watch the paint dry if you know cooking show style",
    "start": "3911070",
    "end": "3917400"
  },
  {
    "text": "we've deployed all the other ones for you so you know we we want to make sure that we we focus on the step function",
    "start": "3917400",
    "end": "3926370"
  },
  {
    "text": "side of things too so let's go back and look at the lambda function I mean",
    "start": "3926370",
    "end": "3933630"
  },
  {
    "text": "refresh just puts out an e we can check",
    "start": "3933630",
    "end": "3946740"
  },
  {
    "text": "the I'm role that's associated with the lambda function here that's coach it",
    "start": "3946740",
    "end": "3954230"
  },
  {
    "text": "looks like I don't have permission to that why did you go ahead over to these",
    "start": "3956510",
    "end": "3963060"
  },
  {
    "text": "that function cut so while I do that yeah all right so now this is the",
    "start": "3963060",
    "end": "3969660"
  },
  {
    "text": "exciting part where we actually hook up our lambda function with this with our staff functions structure that we have",
    "start": "3969660",
    "end": "3976950"
  },
  {
    "text": "already started with so let me go to edit this state machine definition and",
    "start": "3976950",
    "end": "3983790"
  },
  {
    "text": "now since we have Malanda function that can do metadata structure for us I'm",
    "start": "3983790",
    "end": "3989700"
  },
  {
    "text": "going to change the past type change the state type from past to actual task type",
    "start": "3989700",
    "end": "3996690"
  },
  {
    "text": "this is the type that will actually allows you to call either a lambda",
    "start": "3996690",
    "end": "4002870"
  },
  {
    "text": "function or have workers running on ec2 or docker images you see yes to actually",
    "start": "4002870",
    "end": "4010010"
  },
  {
    "text": "get a piece of work from from state machine and perform the task so this is",
    "start": "4010010",
    "end": "4016760"
  },
  {
    "text": "where the the work actually happens is here the use of tasks 8 so as you can",
    "start": "4016760",
    "end": "4023990"
  },
  {
    "text": "see here we get in red because we're no longer we kind of lender just inject the",
    "start": "4023990",
    "end": "4030410"
  },
  {
    "text": "results what we want is actually have the lambda function extract the metadata for us so in order to define",
    "start": "4030410",
    "end": "4038779"
  },
  {
    "text": "what lambda function this state will be calling what we need is a resource note",
    "start": "4038779",
    "end": "4044630"
  },
  {
    "text": "here and it actually has some autocomplete functionality so we can",
    "start": "4044630",
    "end": "4051769"
  },
  {
    "text": "pick the lambda function that we just created going back so this this time the",
    "start": "4051769",
    "end": "4062959"
  },
  {
    "text": "function that is called extracts metadata all blah so let me look for that in our autocomplete drop-down it",
    "start": "4062959",
    "end": "4073249"
  },
  {
    "text": "looks like this one so this is the",
    "start": "4073249",
    "end": "4079299"
  },
  {
    "text": "lambda function that we just deployed through confirmation and Sam so refresh",
    "start": "4079299",
    "end": "4088069"
  },
  {
    "text": "the relation here and everything looks good and let's do a save and now we're",
    "start": "4088069",
    "end": "4098900"
  },
  {
    "text": "ready to test out our state machine with this single lambda stage that make it",
    "start": "4098900",
    "end": "4106460"
  },
  {
    "text": "mix up our workflow we may we may have",
    "start": "4106460",
    "end": "4111710"
  },
  {
    "text": "to revert to our cooking show hidden in the oven lambda function",
    "start": "4111710",
    "end": "4116980"
  },
  {
    "text": "Angela because I think I've forgot to include a few packages inside this",
    "start": "4116980",
    "end": "4125480"
  },
  {
    "text": "recommender data because extra metadata relies on the image magic I will need to do a few more steps to package up that",
    "start": "4125480",
    "end": "4132440"
  },
  {
    "text": "lambda so do you wanna so that we don't get held up on this one you want to revert to using the lambda that's hidden",
    "start": "4132440",
    "end": "4140480"
  },
  {
    "text": "in the oven yeah let's do that just to save some time for users basically what",
    "start": "4140480",
    "end": "4147349"
  },
  {
    "text": "we would have done to include those packages is basically using NPM to",
    "start": "4147349",
    "end": "4154068"
  },
  {
    "text": "install those dependencies into the same directory here and repackage our lambda",
    "start": "4154069",
    "end": "4159588"
  },
  {
    "text": "function to redeploy to say save you",
    "start": "4159589",
    "end": "4164809"
  },
  {
    "text": "time from actually seeing us redeploy the lambda function I'm just going to",
    "start": "4164809",
    "end": "4172009"
  },
  {
    "text": "added this to use one of the lambda functions that we already created that's if we know it's working properly so I",
    "start": "4172010",
    "end": "4180060"
  },
  {
    "text": "mean you pick this one here and say okay",
    "start": "4180060",
    "end": "4187710"
  },
  {
    "text": "now we have this state machine defined let's retake off this state machine and",
    "start": "4187710",
    "end": "4198020"
  },
  {
    "text": "let's see what it comes back okay now",
    "start": "4198020",
    "end": "4207660"
  },
  {
    "text": "we've got a green execution so if we look at the output of this state we see",
    "start": "4207660",
    "end": "4213830"
  },
  {
    "text": "lots of different metadata being extracted using the image magic library",
    "start": "4213830",
    "end": "4219690"
  },
  {
    "text": "and we included in our lambda function things like resolutions formatting size",
    "start": "4219690",
    "end": "4227540"
  },
  {
    "text": "image statistics active information like geo coordinates all the good stuff here",
    "start": "4227540",
    "end": "4237800"
  },
  {
    "text": "so you might want to slow down on the scrolling Angela okay now now now we",
    "start": "4242650",
    "end": "4254870"
  },
  {
    "text": "have a basic flam the basic snap function with a single lambda step we",
    "start": "4254870",
    "end": "4260480"
  },
  {
    "text": "can look at exporting more of the logic from our from our node.js application",
    "start": "4260480",
    "end": "4268040"
  },
  {
    "text": "into our step functions so one of the key things we talked about the benefit",
    "start": "4268040",
    "end": "4275140"
  },
  {
    "text": "now if we go back to look at the metadata extraction library will notice",
    "start": "4280070",
    "end": "4287740"
  },
  {
    "text": "first certain kind of inputs it will actually so a error called image",
    "start": "4287740",
    "end": "4294980"
  },
  {
    "text": "identifier now this is the error type that gets thrown when the image magic",
    "start": "4294980",
    "end": "4302300"
  },
  {
    "text": "library encounters the file type they cannot recognize and so in this case if",
    "start": "4302300",
    "end": "4308150"
  },
  {
    "text": "we think back to our application we want to be able to reject this image end and",
    "start": "4308150",
    "end": "4314330"
  },
  {
    "text": "stop the further processing maybe in this case you want to handle the error",
    "start": "4314330",
    "end": "4319520"
  },
  {
    "text": "show the user a notification as maybe you want to clean up the image or the",
    "start": "4319520",
    "end": "4325010"
  },
  {
    "text": "file that can be processed in s3 so let's see how we can do error caching",
    "start": "4325010",
    "end": "4331820"
  },
  {
    "text": "inside line in our step functions so in",
    "start": "4331820",
    "end": "4339230"
  },
  {
    "text": "order to add the arrow Cashion logic let me show you this page which is the",
    "start": "4339230",
    "end": "4347020"
  },
  {
    "text": "Amazon State language spec that gives you a complete documentation on all the",
    "start": "4347020",
    "end": "4353660"
  },
  {
    "text": "different constructs supported by the state language from the different type",
    "start": "4353660",
    "end": "4359540"
  },
  {
    "text": "of states to the different error handling constructs in this case let's",
    "start": "4359540",
    "end": "4365680"
  },
  {
    "text": "dive into the error handling section and if we look at some of these examples",
    "start": "4365680",
    "end": "4371150"
  },
  {
    "text": "here so here's a a good demonstration of how you would define error handling try",
    "start": "4371150",
    "end": "4378710"
  },
  {
    "text": "catch retry logic for one of your states that make up the state machine so we see",
    "start": "4378710",
    "end": "4386180"
  },
  {
    "text": "here a catch segment where you can that you can call different error types and",
    "start": "4386180",
    "end": "4393110"
  },
  {
    "text": "you can say if error equals this error or this other error you can say then",
    "start": "4393110",
    "end": "4399500"
  },
  {
    "text": "instead of going down the normal execution path you've got a tree branch off to let's say a specific States that",
    "start": "4399500",
    "end": "4407420"
  },
  {
    "text": "you built forever handling and this is what we're going to do for our",
    "start": "4407420",
    "end": "4412460"
  },
  {
    "text": "image identifier so let me copy this over here and go back to our definition",
    "start": "4412460",
    "end": "4421900"
  },
  {
    "text": "so this goes back to a question that was asked maybe about 15 minutes before you",
    "start": "4422860",
    "end": "4428570"
  },
  {
    "text": "know how would you know about all the properties of all the syntax in this JSON to tell step functions what to do",
    "start": "4428570",
    "end": "4434930"
  },
  {
    "text": "and I think that website that resource have to spaced it on the on twitch on the chat window to you know there's the",
    "start": "4434930",
    "end": "4442640"
  },
  {
    "text": "state language dotnet slash backup HTML gives you a lot of the all the different",
    "start": "4442640",
    "end": "4449770"
  },
  {
    "text": "syntax but also a lot of different examples so you know in many different cases it's as simple as just copying",
    "start": "4449770",
    "end": "4456710"
  },
  {
    "text": "pasting things and tweaking it for your exact kind of purpose yeah thanks for",
    "start": "4456710",
    "end": "4463190"
  },
  {
    "text": "that wrong and so as we can see here now if now there are use cases if we",
    "start": "4463190",
    "end": "4469610"
  },
  {
    "text": "encounter this specific particular earth that we define in a lambda function we've actually catch the specific error",
    "start": "4469610",
    "end": "4476360"
  },
  {
    "text": "and handle it in our state machine so in this case we're going to have a",
    "start": "4476360",
    "end": "4481790"
  },
  {
    "text": "different state specifically for handling the error and we can also make",
    "start": "4481790",
    "end": "4487940"
  },
  {
    "text": "this into a mock placeholder state and",
    "start": "4487940",
    "end": "4495580"
  },
  {
    "text": "we can say here the error successfully",
    "start": "4495580",
    "end": "4502960"
  },
  {
    "text": "handled and this is also an end state so",
    "start": "4502960",
    "end": "4508220"
  },
  {
    "text": "we branch into this segment this will also terminate these machine",
    "start": "4508220",
    "end": "4514250"
  },
  {
    "text": "execution now we need to point our catch",
    "start": "4514250",
    "end": "4519670"
  },
  {
    "text": "clause to use that states you encounter",
    "start": "4519670",
    "end": "4526280"
  },
  {
    "text": "this specific error so when we when i refresh the page you can see here so in the normal situation the when we got to",
    "start": "4526280",
    "end": "4535160"
  },
  {
    "text": "this metadata stage oh there's a typo - notice",
    "start": "4535160",
    "end": "4540370"
  },
  {
    "text": "we will directly go to finish the state machine and counter this specific error",
    "start": "4540370",
    "end": "4547840"
  },
  {
    "text": "we can have a specific error handler for this this image type error so let me",
    "start": "4547840",
    "end": "4554860"
  },
  {
    "text": "save this and we can test this out so first let me try the image a file that I",
    "start": "4554860",
    "end": "4565750"
  },
  {
    "text": "uploaded to our s3 bucket that's actually a txt file but I mistakenly",
    "start": "4565750",
    "end": "4571620"
  },
  {
    "text": "saved it as a jpg extension so the user might have a false file that they thinks",
    "start": "4571620",
    "end": "4580480"
  },
  {
    "text": "are imaged by actually are not so just simply that we have this test inputs",
    "start": "4580480",
    "end": "4589570"
  },
  {
    "text": "right here I'm going to try it out here",
    "start": "4589570",
    "end": "4594869"
  },
  {
    "text": "and as you can see that error got cuts by the this error handler here and this",
    "start": "4596490",
    "end": "4605020"
  },
  {
    "text": "second error handling stay guy votes and if we go back to try a actual normal",
    "start": "4605020",
    "end": "4613180"
  },
  {
    "text": "image",
    "start": "4613180",
    "end": "4615720"
  },
  {
    "text": "we should be able to see this execution go directly to finish without getting",
    "start": "4624270",
    "end": "4632650"
  },
  {
    "text": "caught in the error handling stage that's cool so in just two lines of code",
    "start": "4632650",
    "end": "4639160"
  },
  {
    "text": "you can catch different errors for different types of errors and have",
    "start": "4639160",
    "end": "4645340"
  },
  {
    "text": "different handling logic based on it another part of error handling is to do",
    "start": "4645340",
    "end": "4651340"
  },
  {
    "text": "retries for certain errors that for example transit errors or things like",
    "start": "4651340",
    "end": "4657310"
  },
  {
    "text": "maybe you got throttled by the lambda service those up several scenarios you want to implement exponential retry and",
    "start": "4657310",
    "end": "4665620"
  },
  {
    "text": "the best way to do that is also using this retry phrase here and as you can",
    "start": "4665620",
    "end": "4678280"
  },
  {
    "text": "see we have different parameters you can you can configure for your retry objects",
    "start": "4678280",
    "end": "4684640"
  },
  {
    "text": "you can define for exponential retry the initial waste state the wait time before",
    "start": "4684640",
    "end": "4691030"
  },
  {
    "text": "you retry again the back of exponential components the rate and the number of",
    "start": "4691030",
    "end": "4699220"
  },
  {
    "text": "max attempts so let me copy this over here to back to our state machines so in",
    "start": "4699220",
    "end": "4707530"
  },
  {
    "text": "this scenario what we want to do is for the case of this image identify error we",
    "start": "4707530",
    "end": "4714670"
  },
  {
    "text": "don't want to do any retry so we want to directly go to the catch face and for",
    "start": "4714670",
    "end": "4721900"
  },
  {
    "text": "any other error that we don't expect we're going to retry up to three times",
    "start": "4721900",
    "end": "4727980"
  },
  {
    "text": "so what we can do is as is forth we're",
    "start": "4727980",
    "end": "4734080"
  },
  {
    "text": "going to define for the image identify error we're going to say Maxo times zero so we will not be",
    "start": "4734080",
    "end": "4741400"
  },
  {
    "text": "retried every counter this error for any other use case which we have a catch-all",
    "start": "4741400",
    "end": "4747880"
  },
  {
    "text": "phrase cuts States all we're going to retry for up to three times",
    "start": "4747880",
    "end": "4755840"
  },
  {
    "text": "it's just they're gonna you know pause on this and seeing what what we're what",
    "start": "4755840",
    "end": "4760980"
  },
  {
    "text": "we are doing here essentially if we're invoking a lambda function right extract",
    "start": "4760980",
    "end": "4766170"
  },
  {
    "text": "image metadata the lambda function throws an error throws an exception when",
    "start": "4766170",
    "end": "4772620"
  },
  {
    "text": "it finds a specific kind of case in this case if the file type is not of certain type right and then we're basically",
    "start": "4772620",
    "end": "4779370"
  },
  {
    "text": "matching the exception name with a in",
    "start": "4779370",
    "end": "4785100"
  },
  {
    "text": "step function and decide which path or what we want to do next base on that",
    "start": "4785100",
    "end": "4790290"
  },
  {
    "text": "exception that's right and we also have a try catch finally type of scenario",
    "start": "4790290",
    "end": "4798810"
  },
  {
    "text": "where if it's any other error type that gets thrown by the lambda function or",
    "start": "4798810",
    "end": "4804990"
  },
  {
    "text": "something happened with a lunch function execution we can do exponential retry",
    "start": "4804990",
    "end": "4810720"
  },
  {
    "text": "for any other type of errors so sweeps not all I'm guessing it's a magic",
    "start": "4810720",
    "end": "4816960"
  },
  {
    "text": "keyword that step function knows that this is for everything else right yeah",
    "start": "4816960",
    "end": "4823380"
  },
  {
    "text": "so exactly so when you have a more specific error type it will the when the",
    "start": "4823380",
    "end": "4829140"
  },
  {
    "text": "stang machine engine runs it will first try to match the most more specific",
    "start": "4829140",
    "end": "4834660"
  },
  {
    "text": "error in this case the image identifier and if this if the error type didn't",
    "start": "4834660",
    "end": "4840450"
  },
  {
    "text": "match this error then it will match these states that all catch all magic",
    "start": "4840450",
    "end": "4847230"
  },
  {
    "text": "board and if you want to see kind of what all the magic words stephane supports it's also defined in",
    "start": "4847230",
    "end": "4854670"
  },
  {
    "text": "our state language spec page yeah this",
    "start": "4854670",
    "end": "4860220"
  },
  {
    "text": "is really cool I know but you know in in the real world obviously you know every",
    "start": "4860220",
    "end": "4865410"
  },
  {
    "text": "single step probably relies on different types of inputs or maybe there's even like you know some translation that",
    "start": "4865410",
    "end": "4872010"
  },
  {
    "text": "needs to happen you know in a subsequent step when we're extracting the metadata my recognition function right my deep",
    "start": "4872010",
    "end": "4880260"
  },
  {
    "text": "learning mission step doesn't need you know GPS",
    "start": "4880260",
    "end": "4886210"
  },
  {
    "text": "coordinates it just needs the images what can we do here to kind of translate from one input and output to the next so",
    "start": "4886210",
    "end": "4893380"
  },
  {
    "text": "that we can make sure that we're passing the right inputs to these subsequent steps yeah great question so step",
    "start": "4893380",
    "end": "4901180"
  },
  {
    "text": "functions actually have a really handy feature for you to do some processing",
    "start": "4901180",
    "end": "4906310"
  },
  {
    "text": "off the payloads when you pass the payload between one step to the next",
    "start": "4906310",
    "end": "4912160"
  },
  {
    "text": "subsequent step to make it easier for you to understand actually draw out some",
    "start": "4912160",
    "end": "4917730"
  },
  {
    "text": "diagrams here as well so the the part of the feature that we're talking about is",
    "start": "4917730",
    "end": "4924239"
  },
  {
    "text": "referred to in step functions as input and output processing so the idea is",
    "start": "4924239",
    "end": "4931390"
  },
  {
    "text": "usually you have a state you have inputs and the state itself generates some",
    "start": "4931390",
    "end": "4936610"
  },
  {
    "text": "outputs what's the input and outputs processing feature of step functions",
    "start": "4936610",
    "end": "4943360"
  },
  {
    "text": "allow you to do is to define different filters and operations on these inputs",
    "start": "4943360",
    "end": "4949090"
  },
  {
    "text": "and outputs so you can manipulate them to match what the actual serve",
    "start": "4949090",
    "end": "4956040"
  },
  {
    "text": "microservices require or produces now so to answer your question so for example",
    "start": "4956040",
    "end": "4963489"
  },
  {
    "text": "one of my micro services for image recognition for example it doesn't need",
    "start": "4963489",
    "end": "4969040"
  },
  {
    "text": "to know about the output of some of my previous steps of the GPS coordinates or",
    "start": "4969040",
    "end": "4976840"
  },
  {
    "text": "other additional info that we extracted earlier so what we can do is leverage",
    "start": "4976840",
    "end": "4982900"
  },
  {
    "text": "the feature called input path which happens which is a way to filter out",
    "start": "4982900",
    "end": "4989500"
  },
  {
    "text": "certain notes of the JSON payload so that only that part of the JSON payload",
    "start": "4989500",
    "end": "4997030"
  },
  {
    "text": "gets a free pass into the lambda function that calls recognition so to",
    "start": "4997030",
    "end": "5003270"
  },
  {
    "text": "visualize this a little bit better so say that our original inputs to this day",
    "start": "5003270",
    "end": "5008580"
  },
  {
    "text": "was going to be this JSON dump in here we have two fields as our key and",
    "start": "5008580",
    "end": "5016190"
  },
  {
    "text": "by default if you don't specify the input path parameter for your state it",
    "start": "5016370",
    "end": "5022500"
  },
  {
    "text": "will default to a dollar sign which is a common JSON path expression that",
    "start": "5022500",
    "end": "5029010"
  },
  {
    "text": "basically is a selector to select the entire JSON so when when you have a",
    "start": "5029010",
    "end": "5035150"
  },
  {
    "text": "dollar sign or a default input path with what this will do is pass the entire",
    "start": "5035150",
    "end": "5042230"
  },
  {
    "text": "JSON payload into the state",
    "start": "5042230",
    "end": "5047000"
  },
  {
    "text": "alternatively you can use the JSON path which is a common way of specifying a",
    "start": "5047330",
    "end": "5054780"
  },
  {
    "text": "particular node within a JSON document by using a dollar sign dot syntax to say",
    "start": "5054780",
    "end": "5061290"
  },
  {
    "text": "oh I actually only need the node that's referenced by the asteroid key part of",
    "start": "5061290",
    "end": "5068070"
  },
  {
    "text": "this JSON so when you specify the input path the dollar sign is Turkey what end",
    "start": "5068070",
    "end": "5074430"
  },
  {
    "text": "up getting passed into the state is just the value of the answer key so this is",
    "start": "5074430",
    "end": "5081360"
  },
  {
    "text": "really helpful when you think about there might be different interfaces for your micro service that you want to keep",
    "start": "5081360",
    "end": "5087570"
  },
  {
    "text": "consistent but sometimes the output of a previous step might not match exactly",
    "start": "5087570",
    "end": "5094020"
  },
  {
    "text": "the endpoint of the next step and so this is one way you can actually filter out only the part that's required by a",
    "start": "5094020",
    "end": "5101640"
  },
  {
    "text": "particular state and only pass that into your stick that particular processing",
    "start": "5101640",
    "end": "5107310"
  },
  {
    "text": "step it also kind of keeps your code and logic clean clean because now by",
    "start": "5107310",
    "end": "5114780"
  },
  {
    "text": "limiting the amount of information that one of your staff has access to you can",
    "start": "5114780",
    "end": "5119790"
  },
  {
    "text": "avoid kind of building dependencies of things that your code shouldn't be rely",
    "start": "5119790",
    "end": "5127650"
  },
  {
    "text": "upon just because it has the access to those data yeah and I guess planning",
    "start": "5127650",
    "end": "5134040"
  },
  {
    "text": "this out is important right if this is almost kind of like what is the contract of your micro Service such that you know",
    "start": "5134040",
    "end": "5140730"
  },
  {
    "text": "you can create a robust reusability reusable micro services yeah that's",
    "start": "5140730",
    "end": "5146670"
  },
  {
    "text": "exactly right so since around the topic of input path another really useful feature is is the",
    "start": "5146670",
    "end": "5156320"
  },
  {
    "text": "result path feature that happens to process the output of a particular state",
    "start": "5156320",
    "end": "5163010"
  },
  {
    "text": "now let's continue our example with this this input path input path here so we",
    "start": "5163010",
    "end": "5173760"
  },
  {
    "text": "now we have a state the stage let's say produces this output type PNG type is",
    "start": "5173760",
    "end": "5180539"
  },
  {
    "text": "PNG and if we use a default configuration which again is a dollar",
    "start": "5180539",
    "end": "5187709"
  },
  {
    "text": "sign we will get is for the year for the output of this entire state is going to",
    "start": "5187709",
    "end": "5193769"
  },
  {
    "text": "just be the output of say are not in the function sometimes are most of the time",
    "start": "5193769",
    "end": "5200699"
  },
  {
    "text": "actually when I write some state machines I find it extremely helpful if I can not only get the output of my",
    "start": "5200699",
    "end": "5208409"
  },
  {
    "text": "lambda function should be passed on to my next processing step but also to get",
    "start": "5208409",
    "end": "5214769"
  },
  {
    "text": "the original input that was passed into my first lambda function so in this case",
    "start": "5214769",
    "end": "5220469"
  },
  {
    "text": "for example my Futurist processing steps now only wants to know that the the type",
    "start": "5220469",
    "end": "5226709"
  },
  {
    "text": "of the image is PNG but it also wants to know the s3 bucket has repeat that was passed in in the beginning as the",
    "start": "5226709",
    "end": "5234510"
  },
  {
    "text": "payload for this state machine so what you can do is leverage result path and",
    "start": "5234510",
    "end": "5241409"
  },
  {
    "text": "if you specify dollar sign dot metadata for example what this will do is to",
    "start": "5241409",
    "end": "5249809"
  },
  {
    "text": "actually have a joining of your JSON to join the original input with the output",
    "start": "5249809",
    "end": "5257010"
  },
  {
    "text": "that was produced by your lambda function and the name of that outputs",
    "start": "5257010",
    "end": "5263780"
  },
  {
    "text": "part portion of your mouse points will be defined by a result path so in this",
    "start": "5263780",
    "end": "5271199"
  },
  {
    "text": "case we called it dollar sign of metadata's and you can see the metadata fields here in our eventual outputs to",
    "start": "5271199",
    "end": "5279809"
  },
  {
    "text": "include the output of the lambda function that make sense",
    "start": "5279809",
    "end": "5287270"
  },
  {
    "text": "great so yeah we can actually do this in our state machine definition as well so",
    "start": "5287270",
    "end": "5294750"
  },
  {
    "text": "let me quickly add this to our definition and you can see it happened",
    "start": "5294750",
    "end": "5303660"
  },
  {
    "text": "in action it's a result path let's call",
    "start": "5303660",
    "end": "5310170"
  },
  {
    "text": "this extracted kind of data and we can",
    "start": "5310170",
    "end": "5318870"
  },
  {
    "text": "click Save so now if we start a new execution with our image",
    "start": "5318870",
    "end": "5327740"
  },
  {
    "text": "once this finish executing right now if",
    "start": "5337760",
    "end": "5343190"
  },
  {
    "text": "we click on the states will notice now we saw in the output of the state not",
    "start": "5343190",
    "end": "5349430"
  },
  {
    "text": "only we have the extracting metadata as its own jason note in our output payload",
    "start": "5349430",
    "end": "5356120"
  },
  {
    "text": "we also see the original inputs of the s3 bucket and answer key so the our",
    "start": "5356120",
    "end": "5361780"
  },
  {
    "text": "further processing steps can take advantage of both these information that",
    "start": "5361780",
    "end": "5367250"
  },
  {
    "text": "are available for further processing awesome so for sure sorry",
    "start": "5367250",
    "end": "5377200"
  },
  {
    "text": "so in the interest of time I won't be showing you writing the same machine",
    "start": "5377200",
    "end": "5383150"
  },
  {
    "text": "definition for every step along this on this application so let me just quickly",
    "start": "5383150",
    "end": "5393320"
  },
  {
    "text": "show you and the the end result of after we defined our entire flow what that",
    "start": "5393320",
    "end": "5400520"
  },
  {
    "text": "looks like and walk you through the final output and you can kind of see how",
    "start": "5400520",
    "end": "5408230"
  },
  {
    "text": "this is all put together yeah I was about to say you know let's take the time machine out and fast forward so you",
    "start": "5408230",
    "end": "5415790"
  },
  {
    "text": "can kind of discuss some of the cool features here but you know one thing to point out I guess you know what we've",
    "start": "5415790",
    "end": "5421550"
  },
  {
    "text": "what we're doing so far it's kind of like take a step by step approach right so you know we built a step function",
    "start": "5421550",
    "end": "5427850"
  },
  {
    "text": "built the lambda hook it up you know introduced error handling and retries",
    "start": "5427850",
    "end": "5433040"
  },
  {
    "text": "and all that but in reality I think most most of the time what I find myself doing is I would model everything using",
    "start": "5433040",
    "end": "5439910"
  },
  {
    "text": "pass States I would deploy all the lambda in one go or hopefully you",
    "start": "5439910",
    "end": "5445190"
  },
  {
    "text": "already have those kind of functions and then start hooking it up that way it just feels a little bit faster and then",
    "start": "5445190",
    "end": "5451310"
  },
  {
    "text": "the retry some catch obviously something that you can kind of tweak along the way because there's nothing stopping you",
    "start": "5451310",
    "end": "5457010"
  },
  {
    "text": "from thinking through just the span of use cases modeling it out testing it out making sure everything is working and",
    "start": "5457010",
    "end": "5463430"
  },
  {
    "text": "then thinking through from an operational standpoint you know how many retries what is the what are the",
    "start": "5463430",
    "end": "5468920"
  },
  {
    "text": "policies as the next subsequent step Angela I've got a great question here you know we",
    "start": "5468920",
    "end": "5476090"
  },
  {
    "text": "mentioned before about micro sip micro-service reuse you know how do we avoid the potential pitfall of you",
    "start": "5476090",
    "end": "5484340"
  },
  {
    "text": "change one thing and you break essentially everything right so for example if I want to roll out a new",
    "start": "5484340",
    "end": "5491440"
  },
  {
    "text": "extract image metadata and I need I need it to introduce some changes in the",
    "start": "5491440",
    "end": "5497150"
  },
  {
    "text": "contract maybe renaming the inputs or renaming the outputs any any tips there I've got",
    "start": "5497150",
    "end": "5502850"
  },
  {
    "text": "a couple of in my mind but I thought you know you probably also have opinions on",
    "start": "5502850",
    "end": "5508130"
  },
  {
    "text": "this yeah I love to hear what you thought SAR for me when I think about keeping the compatibility when you when",
    "start": "5508130",
    "end": "5517010"
  },
  {
    "text": "you push out different versions of your your code in this diagram of a",
    "start": "5517010",
    "end": "5522530"
  },
  {
    "text": "combination of lambda functions and step functions usually the recommendation I",
    "start": "5522530",
    "end": "5529310"
  },
  {
    "text": "think this it's more actually general and clickable is try your best to make",
    "start": "5529310",
    "end": "5534680"
  },
  {
    "text": "things backward-compatible so let's say you're introduced so the easiest case is",
    "start": "5534680",
    "end": "5540740"
  },
  {
    "text": "you're introducing a new field and your other customers can just ignore that new",
    "start": "5540740",
    "end": "5546050"
  },
  {
    "text": "field and so when your so that's kind of the best case if you can make things",
    "start": "5546050",
    "end": "5551360"
  },
  {
    "text": "backward compatible then that makes it a lot easier for the subsequent steps to",
    "start": "5551360",
    "end": "5557810"
  },
  {
    "text": "follow and if you're making a change that is not backward-compatible thinking",
    "start": "5557810",
    "end": "5563930"
  },
  {
    "text": "of doing it in phases so that's for every every change you push think about",
    "start": "5563930",
    "end": "5569180"
  },
  {
    "text": "the order of how you deploy them so that you always make sure the consumer of",
    "start": "5569180",
    "end": "5574970"
  },
  {
    "text": "your API can take both the the old and the new version of your your event",
    "start": "5574970",
    "end": "5583370"
  },
  {
    "text": "formats before you actually change the the producer of the data so that would",
    "start": "5583370",
    "end": "5589940"
  },
  {
    "text": "be one way of doing it the other way of thinking about this is because",
    "start": "5589940",
    "end": "5596000"
  },
  {
    "text": "everything here is it is basically infrastructure eyes code so",
    "start": "5596000",
    "end": "5603260"
  },
  {
    "text": "the other approach is to just completely come create a new stack they say using a",
    "start": "5603260",
    "end": "5608900"
  },
  {
    "text": "Bluegreen type of deployment so that you can actually build a version - of all",
    "start": "5608900",
    "end": "5616520"
  },
  {
    "text": "your different components that make up your application and when you're happy",
    "start": "5616520",
    "end": "5621739"
  },
  {
    "text": "with testing the new version that makes up the new stack just switch your traffic holds them to the new version",
    "start": "5621739",
    "end": "5629930"
  },
  {
    "text": "that way you don't have to think about all this particular component changed how do I make sure the back backward",
    "start": "5629930",
    "end": "5637010"
  },
  {
    "text": "compatibility is there so so that that would be my thoughts to that question yeah I know that that makes complete",
    "start": "5637010",
    "end": "5642680"
  },
  {
    "text": "sense I think what you mentioned before around making the contract of your micro",
    "start": "5642680",
    "end": "5648890"
  },
  {
    "text": "service immutable it's an important concept in general right just like micro-service best practices once you",
    "start": "5648890",
    "end": "5655190"
  },
  {
    "text": "publish a contract you almost want to you know always keep it immutable if you",
    "start": "5655190",
    "end": "5660470"
  },
  {
    "text": "won't need to publish new contract you know do your best to try and still honor the previous contract on the lambda",
    "start": "5660470",
    "end": "5668030"
  },
  {
    "text": "level obviously there's lambda versioning you know aliases and there's a level of extraction or a layer of",
    "start": "5668030",
    "end": "5676520"
  },
  {
    "text": "indirection there that you can leverage there you also mentioned about maybe introducing a layer of indirection from",
    "start": "5676520",
    "end": "5683210"
  },
  {
    "text": "a step functions than a set point right if you if we're treating a state machine like this a definition as immutable that",
    "start": "5683210",
    "end": "5690170"
  },
  {
    "text": "we can also have multiple version of a step function but also keep in mind that let's say for example if you have a",
    "start": "5690170",
    "end": "5696620"
  },
  {
    "text": "long-running step function that expands you know days or weeks once you",
    "start": "5696620",
    "end": "5702550"
  },
  {
    "text": "initiated it'll take the definition off the state machine as how you define it at that",
    "start": "5702550",
    "end": "5709220"
  },
  {
    "text": "point right when you have step function version one and you are stuck on step three and you modify that state machine",
    "start": "5709220",
    "end": "5716870"
  },
  {
    "text": "you're not gonna you know we're not going to modify all the state machines",
    "start": "5716870",
    "end": "5724460"
  },
  {
    "text": "that are already in flight so you have that also kind of level of backward",
    "start": "5724460",
    "end": "5730250"
  },
  {
    "text": "compatibility there yeah so exactly that's right sir if you have an",
    "start": "5730250",
    "end": "5736070"
  },
  {
    "text": "in-flight execution for your state machine even if you change the",
    "start": "5736070",
    "end": "5741380"
  },
  {
    "text": "definition during the process it won't change what's actually currently in",
    "start": "5741380",
    "end": "5747170"
  },
  {
    "text": "flight it will only be any new executions that are started after the",
    "start": "5747170",
    "end": "5752510"
  },
  {
    "text": "updates we'll get the updated definition mm-hmm so with with the with this final",
    "start": "5752510",
    "end": "5761450"
  },
  {
    "text": "state you know where we are essentially half converted all my JavaScript code",
    "start": "5761450",
    "end": "5767719"
  },
  {
    "text": "into step functions and we've extracted out all the different pieces of codes into separate lambda functions you're",
    "start": "5767719",
    "end": "5775610"
  },
  {
    "text": "doing a couple of interesting thing here you want to take us through a couple of those cool stuff that you're doing like",
    "start": "5775610",
    "end": "5783170"
  },
  {
    "text": "parallel and and you know concurrent execution and why not yeah definitely",
    "start": "5783170",
    "end": "5788360"
  },
  {
    "text": "certs so we've kind of dived a lot on to our first states where we have a",
    "start": "5788360",
    "end": "5794180"
  },
  {
    "text": "combination of caching different errors during retries but there are also lots",
    "start": "5794180",
    "end": "5800989"
  },
  {
    "text": "of other interesting constructs that you can use to compose your to model your",
    "start": "5800989",
    "end": "5806900"
  },
  {
    "text": "application logic so so once us so the next state here is we call in troy state",
    "start": "5806900",
    "end": "5814430"
  },
  {
    "text": "which allows you to have conditional branch and logic based on the input so",
    "start": "5814430",
    "end": "5819620"
  },
  {
    "text": "again here we're doing a content by comparing the extracted metadata of the",
    "start": "5819620",
    "end": "5827000"
  },
  {
    "text": "image to see oh it's this JPEG or PNG in Fitness then we can move on to the",
    "start": "5827000",
    "end": "5832880"
  },
  {
    "text": "furthest processing steps otherwise also put that reject that image into and have",
    "start": "5832880",
    "end": "5840080"
  },
  {
    "text": "the not supported image type stay to handle that error and so we talked about",
    "start": "5840080",
    "end": "5847700"
  },
  {
    "text": "kind of using input path and result paths to help you go Mendel the JSON",
    "start": "5847700",
    "end": "5854180"
  },
  {
    "text": "into a format that's supported by your lambda function or microservices but",
    "start": "5854180",
    "end": "5860600"
  },
  {
    "text": "sometimes you need to do a lot more than just simple JSON selecting",
    "start": "5860600",
    "end": "5866600"
  },
  {
    "text": "particular notes or joining two JSON documents if you need to do more complex",
    "start": "5866600",
    "end": "5871970"
  },
  {
    "text": "and I'm JSON transformations our recommendations you can actually do that",
    "start": "5871970",
    "end": "5877670"
  },
  {
    "text": "in a a one lambda function which is what we're doing here",
    "start": "5877670",
    "end": "5883000"
  },
  {
    "text": "prepare the the payload for the other processing stages into a formats that",
    "start": "5883000",
    "end": "5889310"
  },
  {
    "text": "those micro-services take you can actually write a very simple lambda function all he does is do some JSON",
    "start": "5889310",
    "end": "5895850"
  },
  {
    "text": "transformation mm-hmm so now once we once we are prepared I'm metadata to be",
    "start": "5895850",
    "end": "5902960"
  },
  {
    "text": "consumed by the further micro-services this this part is interesting so we're",
    "start": "5902960",
    "end": "5910250"
  },
  {
    "text": "using the parallel States for staff functions so this allows you to if you",
    "start": "5910250",
    "end": "5916970"
  },
  {
    "text": "have multiple services that don't depend on each other you can leverage parallelization and run them at the same",
    "start": "5916970",
    "end": "5923660"
  },
  {
    "text": "time so you can get your results a lot faster than you're doing it in the procedural fashion so this is kind of",
    "start": "5923660",
    "end": "5931520"
  },
  {
    "text": "how you define the multiple branches that make up your parallel processing and as you can see here when you define",
    "start": "5931520",
    "end": "5938540"
  },
  {
    "text": "a parallel state every single branch that you that makes up the parallel",
    "start": "5938540",
    "end": "5944990"
  },
  {
    "text": "state itself almost looks like a meanies that functions so you can actually nest",
    "start": "5944990",
    "end": "5951550"
  },
  {
    "text": "almost a as a state machine within the same machine if you were to do a",
    "start": "5951550",
    "end": "5957770"
  },
  {
    "text": "parallel type of workflow so you can have for each branch of a parallel state",
    "start": "5957770",
    "end": "5965570"
  },
  {
    "text": "you can have a starting point and you have multiple states that make up that the branch and you can you will have an",
    "start": "5965570",
    "end": "5971840"
  },
  {
    "text": "end state of that particular branch as you couldn't yes you can imagine you have many of these different branches",
    "start": "5971840",
    "end": "5979100"
  },
  {
    "text": "all happening in parallel so so far we've been showing the audience you know",
    "start": "5979100",
    "end": "5985520"
  },
  {
    "text": "how to start execution from the console but obviously in reality and if",
    "start": "5985520",
    "end": "5990890"
  },
  {
    "text": "something will call it and that something is most likely you know a api gateway if you're exposing this",
    "start": "5990890",
    "end": "5997780"
  },
  {
    "text": "thing as an API or another lambda function how would you go about executing this programmatically Angela",
    "start": "5997780",
    "end": "6005300"
  },
  {
    "text": "yeah so there's a few different options so if we go back to our web app example",
    "start": "6005300",
    "end": "6012179"
  },
  {
    "text": "what we're doing here is actually as part of uploading the image to s3 we",
    "start": "6012179",
    "end": "6019349"
  },
  {
    "text": "have my event trigger configured on the s3 bucket so I can show you here so if",
    "start": "6019349",
    "end": "6034469"
  },
  {
    "text": "we go to the bucket properties panel we can see the events for the answer bucket",
    "start": "6034469",
    "end": "6039869"
  },
  {
    "text": "being configured and this actually triggers a lambda function that starts a",
    "start": "6039869",
    "end": "6047460"
  },
  {
    "text": "new execution for the steam machine by calling the step functions API so that's",
    "start": "6047460",
    "end": "6055530"
  },
  {
    "text": "one approach is to to do kind of an event-driven model where you have any",
    "start": "6055530",
    "end": "6061590"
  },
  {
    "text": "upload or right to the table trigger event and that events then can be",
    "start": "6061590",
    "end": "6068340"
  },
  {
    "text": "processed by a lambda function that then triggers state machine another way to do",
    "start": "6068340",
    "end": "6074340"
  },
  {
    "text": "it is through college events so call your watch events is AWS and of",
    "start": "6074340",
    "end": "6080659"
  },
  {
    "text": "general event bus of everything that's happening across different services so",
    "start": "6080659",
    "end": "6087329"
  },
  {
    "text": "one example might be you have you're creating EBS snapshots for you just for",
    "start": "6087329",
    "end": "6096119"
  },
  {
    "text": "your backup purposes and you can actually trigger a step step function state machine that's being triggered by",
    "start": "6096119",
    "end": "6104010"
  },
  {
    "text": "that cloud watch events that this EBS snapshot has finished and the staff",
    "start": "6104010",
    "end": "6110940"
  },
  {
    "text": "functions can then do multiple things they can for example create a cross region copy of your abs snapshot you can",
    "start": "6110940",
    "end": "6119300"
  },
  {
    "text": "clean up any old snapshot so you no longer need coordinating a complete multi-step",
    "start": "6119300",
    "end": "6126720"
  },
  {
    "text": "process of your IT automation based on different things triggered in your",
    "start": "6126720",
    "end": "6131770"
  },
  {
    "text": "environments using the integration between cloud watch events and stop functions then after that the biggest",
    "start": "6131770",
    "end": "6141580"
  },
  {
    "text": "kind of common use case of triggering stop functions actually fronting it with",
    "start": "6141580",
    "end": "6146980"
  },
  {
    "text": "API gateway there's also integration between API gateway and staff functions",
    "start": "6146980",
    "end": "6152350"
  },
  {
    "text": "so you can actually call API gateway you can use your preferred method of authentication and authorization and a",
    "start": "6152350",
    "end": "6160870"
  },
  {
    "text": "lot of different external clients to trigger that function executions you",
    "start": "6160870",
    "end": "6168550"
  },
  {
    "text": "through a REST API hosted on the API gateway service so I just want to make",
    "start": "6168550",
    "end": "6174640"
  },
  {
    "text": "sure that you know we I got that right so the API gateway use case is probably very common right because we can model",
    "start": "6174640",
    "end": "6181180"
  },
  {
    "text": "lots of this microservice coordination on the server side using step function did you mention before around",
    "start": "6181180",
    "end": "6187530"
  },
  {
    "text": "subscribing events from glob watch I guess I could I could think of a simple",
    "start": "6187530",
    "end": "6192820"
  },
  {
    "text": "kind of polling mechanics right just like using clock watch timer and spinning up step function to do certain",
    "start": "6192820",
    "end": "6198700"
  },
  {
    "text": "things but what you mentioned before around ID automation or infrastructure automation and using step functions to",
    "start": "6198700",
    "end": "6205630"
  },
  {
    "text": "define those stuff that's kind of cool that's kind of like a DevOps use case",
    "start": "6205630",
    "end": "6211390"
  },
  {
    "text": "for step functions yeah so we have lots of reference architectures on our AWS",
    "start": "6211390",
    "end": "6217690"
  },
  {
    "text": "blog so one of them is actually the process I just described so if you look",
    "start": "6217690",
    "end": "6224890"
  },
  {
    "text": "for step functions you have spec shots we have a reference architecture that",
    "start": "6224890",
    "end": "6232450"
  },
  {
    "text": "actually shows you using step functions to do the EBS snapshot management our",
    "start": "6232450",
    "end": "6238690"
  },
  {
    "text": "processes I just described we also have a different blog post on our website",
    "start": "6238690",
    "end": "6243700"
  },
  {
    "text": "that uses step functions to help you with the deployments traffic shifting",
    "start": "6243700",
    "end": "6252480"
  },
  {
    "text": "control when you actually deploy new code to your lambda functions sir we can also",
    "start": "6252480",
    "end": "6259130"
  },
  {
    "text": "find that blog post that share it with you on the on our chat window here yeah",
    "start": "6259130",
    "end": "6270730"
  },
  {
    "text": "another cool reference architecture here is one of our one of our community",
    "start": "6272110",
    "end": "6279440"
  },
  {
    "text": "leaders to know AWS colleague s Walla actually built this staff functions tool",
    "start": "6279440",
    "end": "6286550"
  },
  {
    "text": "to able to turn your lambda functions so you can execute a lot of function in",
    "start": "6286550",
    "end": "6292190"
  },
  {
    "text": "parallel you come open memory settings and figure out the best most optimal",
    "start": "6292190",
    "end": "6299110"
  },
  {
    "text": "memory setting for your lambda functions so there's also things you can do here",
    "start": "6299110",
    "end": "6304460"
  },
  {
    "text": "with stop functions I've got another",
    "start": "6304460",
    "end": "6309740"
  },
  {
    "text": "question Angela so so far we've been showing modifying our step functions in",
    "start": "6309740",
    "end": "6315800"
  },
  {
    "text": "the console and there's a lot of I can see a lot of benefit to this right we've got the syntax highlighting you've got",
    "start": "6315800",
    "end": "6323360"
  },
  {
    "text": "the autocomplete even Auto completing the lambda functions are available for me",
    "start": "6323360",
    "end": "6328610"
  },
  {
    "text": "so that's super helpful I've got the WYSIWYG editor or preview on the right where I can kind of see the model but in",
    "start": "6328610",
    "end": "6335720"
  },
  {
    "text": "reality hopefully you know people are using C icd convenience integration and",
    "start": "6335720",
    "end": "6341870"
  },
  {
    "text": "continuous deployment server what we do we would be probably writing this JSON",
    "start": "6341870",
    "end": "6347120"
  },
  {
    "text": "in our favorite IDE like laugh 9 or you know any code editor out there on my",
    "start": "6347120",
    "end": "6353810"
  },
  {
    "text": "local machine I would check it in to get and then all these things are gonna be",
    "start": "6353810",
    "end": "6359210"
  },
  {
    "text": "deployed automatically for me what's the story there what can I do to deploy that from a CI",
    "start": "6359210",
    "end": "6365180"
  },
  {
    "text": "CD pipeline yeah so a great question so the call so itself is perfect when",
    "start": "6365180",
    "end": "6371450"
  },
  {
    "text": "you're just getting started with a service you want to get an interactive experience seeing visualizing your state",
    "start": "6371450",
    "end": "6377750"
  },
  {
    "text": "state machine on them on the right-hand side you can get syntax highlighting however",
    "start": "6377750",
    "end": "6382760"
  },
  {
    "text": "in reality when you are kind of more fluent with the service you want to do everything in the C sed fashion and so",
    "start": "6382760",
    "end": "6390050"
  },
  {
    "text": "what you can do with step functions being part of your Sin City and version",
    "start": "6390050",
    "end": "6395180"
  },
  {
    "text": "control pipeline is to actually use confirmation to deploy your subconscious",
    "start": "6395180",
    "end": "6402680"
  },
  {
    "text": "alongside with the lambda functions that it's made up of so we actually have in",
    "start": "6402680",
    "end": "6410570"
  },
  {
    "text": "our documentation page we have a step-by-step tutorial of showing you how",
    "start": "6410570",
    "end": "6417050"
  },
  {
    "text": "you can set up a confirmation template and we can also walk you through here for a little bit and so if we go back to",
    "start": "6417050",
    "end": "6425210"
  },
  {
    "text": "the call from some template that we just",
    "start": "6425210",
    "end": "6431270"
  },
  {
    "text": "got started with here we can actually add st. our same machine into our",
    "start": "6431270",
    "end": "6439430"
  },
  {
    "text": "confirmation template or you can deploy the lot of the functions along with the step functions at the same time so we go",
    "start": "6439430",
    "end": "6447200"
  },
  {
    "text": "back to this documentation example here we're defining the lambda role than the",
    "start": "6447200",
    "end": "6453290"
  },
  {
    "text": "on the function itself then we need this part to define the admiral used by the",
    "start": "6453290",
    "end": "6461020"
  },
  {
    "text": "step function itself to call lambda functions so we can actually just paste",
    "start": "6461020",
    "end": "6467000"
  },
  {
    "text": "this section here into our confirmation slash tap Sam template so again here you",
    "start": "6467000",
    "end": "6476270"
  },
  {
    "text": "see the type here is that I am role this is the role we're going to reference when we create the state step functions",
    "start": "6476270",
    "end": "6483800"
  },
  {
    "text": "itself within confirmation so here we",
    "start": "6483800",
    "end": "6491510"
  },
  {
    "text": "can in our documentation we actually show example of how you can define a step function state machine within",
    "start": "6491510",
    "end": "6498200"
  },
  {
    "text": "confirmation I've let me make this bigger so you can see here the type of",
    "start": "6498200",
    "end": "6505460"
  },
  {
    "text": "this resource would be step functions thing and you can actually inline the",
    "start": "6505460",
    "end": "6510830"
  },
  {
    "text": "definition string the JSON definition that we've been working on into the",
    "start": "6510830",
    "end": "6517280"
  },
  {
    "text": "confirmation template itself another cool thing here is remember earlier when",
    "start": "6517280",
    "end": "6525030"
  },
  {
    "text": "we when we hooked up these stat functions with the lambdas lambda would under functions we deployed that we had",
    "start": "6525030",
    "end": "6533520"
  },
  {
    "text": "to type in the ARL manually as part of our definition so here what we can do is",
    "start": "6533520",
    "end": "6539310"
  },
  {
    "text": "instead using a pointer function within the confirmation template so it will",
    "start": "6539310",
    "end": "6546060"
  },
  {
    "text": "automatically replace the lambda functions placeholder here with the",
    "start": "6546060",
    "end": "6552180"
  },
  {
    "text": "actual lambda AR n that's generated by the confirmation right so I guess in",
    "start": "6552180",
    "end": "6558000"
  },
  {
    "text": "this case if you're versioning strategy is to have a single confirmation that",
    "start": "6558000",
    "end": "6564989"
  },
  {
    "text": "version the step function and all the dependent lambda functions together you",
    "start": "6564989",
    "end": "6570960"
  },
  {
    "text": "can then just rely on this string replace the substitute to hook all those",
    "start": "6570960",
    "end": "6576680"
  },
  {
    "text": "different pieces together right you deploy the lambda functions deploy the step functions and then confirmation",
    "start": "6576680",
    "end": "6582630"
  },
  {
    "text": "will also link up all the the new function that you just deploy yes right",
    "start": "6582630",
    "end": "6588449"
  },
  {
    "text": "so if we let say we copy over this piece of the definition into our confirmation",
    "start": "6588449",
    "end": "6596330"
  },
  {
    "text": "and instead of the placeholder here we're going to use our actual definition",
    "start": "6596330",
    "end": "6604320"
  },
  {
    "text": "that we just worked on says llamo we",
    "start": "6604320",
    "end": "6610380"
  },
  {
    "text": "have to get the spacing right",
    "start": "6610380",
    "end": "6613639"
  },
  {
    "text": "so the placeholder lambda AR n will call our extracting metadata on the function",
    "start": "6617720",
    "end": "6627170"
  },
  {
    "text": "substitution will match our lambda function right right and so with this we",
    "start": "6628550",
    "end": "6634920"
  },
  {
    "text": "can actually do another sound package and some deploy yeah and in this case",
    "start": "6634920",
    "end": "6644070"
  },
  {
    "text": "we're not just deploying the lambda but also deploying the step functions together in a in a single deployment",
    "start": "6644070",
    "end": "6650130"
  },
  {
    "text": "package that's super cool we've got another question Angela so how",
    "start": "6650130",
    "end": "6657300"
  },
  {
    "text": "what is the best way to integrate step functions with non-land tasks so you",
    "start": "6657300",
    "end": "6664530"
  },
  {
    "text": "know this specific question is about you know let's say running the actual",
    "start": "6664530",
    "end": "6669840"
  },
  {
    "text": "fastener container but I guess you know I can make the question slightly more general what if my worker is an",
    "start": "6669840",
    "end": "6677550"
  },
  {
    "text": "on-premises workload you know it's a it's a Java app running on premises what's what's the story there",
    "start": "6677550",
    "end": "6683600"
  },
  {
    "text": "yeah so again that's a great question so the way that you can actually integrate",
    "start": "6683600",
    "end": "6690270"
  },
  {
    "text": "non lambda or non serverless components into your step functions workflow it's",
    "start": "6690270",
    "end": "6696300"
  },
  {
    "text": "very straightforward so if we go back to our definition and we talked about",
    "start": "6696300",
    "end": "6703250"
  },
  {
    "text": "having a task state here to to actually refer to a lambda function so the state",
    "start": "6703250",
    "end": "6709740"
  },
  {
    "text": "machine can call on the function you can actually instead of calling a task a lot",
    "start": "6709740",
    "end": "6716520"
  },
  {
    "text": "in the function you can also call what we call an activity task so activity",
    "start": "6716520",
    "end": "6721860"
  },
  {
    "text": "task is a different type that's supported by the step functions task",
    "start": "6721860",
    "end": "6727170"
  },
  {
    "text": "state that allows you to have a fleet of workers whether that's on premise or",
    "start": "6727170",
    "end": "6733050"
  },
  {
    "text": "that's on an ec2 or on docker containers that can actually pull against this",
    "start": "6733050",
    "end": "6738420"
  },
  {
    "text": "activity and whatever there's work to do when the same machine reaches this step",
    "start": "6738420",
    "end": "6746240"
  },
  {
    "text": "all the workers who all the workers was pulling against this",
    "start": "6746240",
    "end": "6751610"
  },
  {
    "text": "activity we'll get a token that says oh here there's a piece of work for you to",
    "start": "6751610",
    "end": "6757100"
  },
  {
    "text": "do here's an image that you need to process and the worker is once against this task open can process the event on",
    "start": "6757100",
    "end": "6764510"
  },
  {
    "text": "premise or in the docker container once it's finished it will you would write",
    "start": "6764510",
    "end": "6769880"
  },
  {
    "text": "your code to report back your results of the processing back to step functions",
    "start": "6769880",
    "end": "6777770"
  },
  {
    "text": "along with the task token so it identifies which execution you're running against and these sub functions",
    "start": "6777770",
    "end": "6786230"
  },
  {
    "text": "will take that and mark this step is complete and move on to coordinates to",
    "start": "6786230",
    "end": "6791270"
  },
  {
    "text": "the next column yeah that makes that make sense them so it's it it's a similar pattern that you would do if you are leveraging things",
    "start": "6791270",
    "end": "6798890"
  },
  {
    "text": "like Amazon sqx right where you have that item in the queue let your worker",
    "start": "6798890",
    "end": "6805640"
  },
  {
    "text": "pull the the particular work items and once you finish you say step function",
    "start": "6805640",
    "end": "6812810"
  },
  {
    "text": "I'm done you know do whatever you need to do next same thing that worker could be hosted anywhere you know he doesn't",
    "start": "6812810",
    "end": "6819290"
  },
  {
    "text": "have to be you know in AWS even you know maybe it's even your laptop as long as",
    "start": "6819290",
    "end": "6825500"
  },
  {
    "text": "you have the right permissions and and security controls one more thing to add",
    "start": "6825500",
    "end": "6834650"
  },
  {
    "text": "there so similar to alum the function you can have retry retry blocks you can",
    "start": "6834650",
    "end": "6840380"
  },
  {
    "text": "have catch arracacha of blocks very similar to for Malanda function you can",
    "start": "6840380",
    "end": "6847340"
  },
  {
    "text": "also do that for activity test so you can make sure your all your different",
    "start": "6847340",
    "end": "6852620"
  },
  {
    "text": "error cases are handled properly right and it's really just popping the right work item back in the queue such that",
    "start": "6852620",
    "end": "6858740"
  },
  {
    "text": "hopefully other workers can pick it up that's right awesome so I think we've gone through a",
    "start": "6858740",
    "end": "6865700"
  },
  {
    "text": "lot here and we're almost using up the entire two hours and thank you so much",
    "start": "6865700",
    "end": "6872090"
  },
  {
    "text": "for you know the people who have stuck around with us for the last two hours you know so far we've seen",
    "start": "6872090",
    "end": "6880030"
  },
  {
    "text": "you know a monolith that I grow based on no js' and coordinating a bunch of",
    "start": "6880030",
    "end": "6886090"
  },
  {
    "text": "microservices or coordinating but bunch of coat using promises and then we kind",
    "start": "6886090",
    "end": "6892780"
  },
  {
    "text": "of slowly extract out some of the functionality to lambda functions and",
    "start": "6892780",
    "end": "6897790"
  },
  {
    "text": "kind of transition across our coordinating code into a step function",
    "start": "6897790",
    "end": "6904920"
  },
  {
    "text": "define state machine which is kind of cool and and hopefully that gives some",
    "start": "6904920",
    "end": "6912970"
  },
  {
    "text": "insights to you know what what it takes for for you guys to break some of your",
    "start": "6912970",
    "end": "6918070"
  },
  {
    "text": "monolith into a slightly more microservices architecture I know a couple of our cool customers have have",
    "start": "6918070",
    "end": "6925030"
  },
  {
    "text": "done have gone through the same Angela do you have any any mentions and you",
    "start": "6925030",
    "end": "6930850"
  },
  {
    "text": "know interesting stories there yeah so I highly recommend you checking out one of",
    "start": "6930850",
    "end": "6937150"
  },
  {
    "text": "the blog posts written by our customer Yelp so they actually performed a",
    "start": "6937150",
    "end": "6943060"
  },
  {
    "text": "similar migration from a monolithic application to a more Mike Mike",
    "start": "6943060",
    "end": "6948640"
  },
  {
    "text": "reservist driven architecture using step functions and so their story is written",
    "start": "6948640",
    "end": "6954070"
  },
  {
    "text": "here they talked about pulling their application for subscription accounts",
    "start": "6954070",
    "end": "6960790"
  },
  {
    "text": "billing process into into a my set function state machine so originally",
    "start": "6960790",
    "end": "6967960"
  },
  {
    "text": "they have this batch processing workflow where they look at accounting batches",
    "start": "6967960",
    "end": "6974920"
  },
  {
    "text": "and process them through a set of",
    "start": "6974920",
    "end": "6980050"
  },
  {
    "text": "servers they have by luck by pulling them into step functions they got a lot",
    "start": "6980050",
    "end": "6985750"
  },
  {
    "text": "better parallelization so instead of doing a batch workload they actually",
    "start": "6985750",
    "end": "6992080"
  },
  {
    "text": "started with a stop function state machine with just a single state really",
    "start": "6992080",
    "end": "6997570"
  },
  {
    "text": "interesting and they were they were they were able to benefit from even a very simple state machine like",
    "start": "6997570",
    "end": "7004020"
  },
  {
    "text": "and eventually breaking it up into further processing steps and their",
    "start": "7004020",
    "end": "7010230"
  },
  {
    "text": "continued to working to work on breaking their pollinating applications further",
    "start": "7010230",
    "end": "7015360"
  },
  {
    "text": "and have stopped functions help them with parallel parallelism help with",
    "start": "7015360",
    "end": "7022850"
  },
  {
    "text": "handling errors and success different scenarios so yeah definitely",
    "start": "7022850",
    "end": "7028950"
  },
  {
    "text": "try to recommend checking this out and we can share this link to the twitch",
    "start": "7028950",
    "end": "7034470"
  },
  {
    "text": "chat window as well yeah and one of the benefit that I don't think we mentioned",
    "start": "7034470",
    "end": "7039870"
  },
  {
    "text": "before was you know all these things are running server list so you know in a",
    "start": "7039870",
    "end": "7045690"
  },
  {
    "text": "sense that my node.js application code all those wasted cycles right just",
    "start": "7045690",
    "end": "7050820"
  },
  {
    "text": "waiting for the work to get done and I am and I'm paying for it you know if it's if that's an ec2 machine I'm paying",
    "start": "7050820",
    "end": "7058170"
  },
  {
    "text": "for a running ec2 machine just to coordinate the work while it's not doing anything on its own",
    "start": "7058170",
    "end": "7064020"
  },
  {
    "text": "whereas with step function you know it works based on state changes now I think",
    "start": "7064020",
    "end": "7069780"
  },
  {
    "text": "with we've got a github repo to where people can find all the code that you",
    "start": "7069780",
    "end": "7077400"
  },
  {
    "text": "see today interesting enough if you click on the workshops link it has all",
    "start": "7077400",
    "end": "7084480"
  },
  {
    "text": "the instructions for you to try and go through the step on your own and learn a little bit more about Amazon safe",
    "start": "7084480",
    "end": "7091110"
  },
  {
    "text": "language so if you are so inclined to reproduce some of those things that we",
    "start": "7091110",
    "end": "7098190"
  },
  {
    "text": "talked about today please go ahead and and check out our lambda we run",
    "start": "7098190",
    "end": "7103800"
  },
  {
    "text": "architecture and image recognition we're always constantly look for in a pull request so if you have new ideas on",
    "start": "7103800",
    "end": "7109530"
  },
  {
    "text": "how to extend this project please reach out to us on the github repo you know Angela and a lot of the different people",
    "start": "7109530",
    "end": "7116970"
  },
  {
    "text": "at AWS you know pay into it again hopefully you enjoy today's built on",
    "start": "7116970",
    "end": "7122610"
  },
  {
    "text": "server less I hope but we get to see you guys or the next session okay thank you",
    "start": "7122610",
    "end": "7130730"
  },
  {
    "text": "Angela",
    "start": "7131069",
    "end": "7133969"
  }
]