[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "hi everyone i'm jerry hargrove the",
    "start": "1120",
    "end": "3120"
  },
  {
    "text": "amazon light sound developer advocate",
    "start": "3120",
    "end": "5200"
  },
  {
    "text": "in this video i'm going to show you how",
    "start": "5200",
    "end": "7040"
  },
  {
    "text": "easy it is to deploy an nginx reverse",
    "start": "7040",
    "end": "9360"
  },
  {
    "text": "proxy",
    "start": "9360",
    "end": "9920"
  },
  {
    "text": "using amazon lights out containers",
    "start": "9920",
    "end": "12960"
  },
  {
    "text": "in this video i'll show you how to",
    "start": "12960",
    "end": "14639"
  },
  {
    "text": "create a new container service in amazon",
    "start": "14639",
    "end": "16560"
  },
  {
    "text": "light sale",
    "start": "16560",
    "end": "17520"
  },
  {
    "text": "how to build an nginx reverse proxy",
    "start": "17520",
    "end": "19600"
  },
  {
    "text": "container and a simple flask application",
    "start": "19600",
    "end": "21920"
  },
  {
    "text": "to act as a web server",
    "start": "21920",
    "end": "23439"
  },
  {
    "text": "and then how to deploy both containers",
    "start": "23439",
    "end": "25599"
  },
  {
    "text": "to your container service",
    "start": "25599",
    "end": "27279"
  },
  {
    "text": "for more information about other helpful",
    "start": "27279",
    "end": "29119"
  },
  {
    "text": "light cell tutorials",
    "start": "29119",
    "end": "30400"
  },
  {
    "text": "please read the description that",
    "start": "30400",
    "end": "31679"
  },
  {
    "text": "accompanies this video",
    "start": "31679",
    "end": "34160"
  },
  {
    "start": "34000",
    "end": "176000"
  },
  {
    "text": "let's get started to begin",
    "start": "34160",
    "end": "37840"
  },
  {
    "text": "log into your aws account and navigate",
    "start": "37840",
    "end": "39680"
  },
  {
    "text": "to the light cell web console",
    "start": "39680",
    "end": "45680"
  },
  {
    "text": "from here open the containers tab",
    "start": "45680",
    "end": "49520"
  },
  {
    "text": "and create a new container service",
    "start": "49920",
    "end": "53760"
  },
  {
    "text": "a container service requires a location",
    "start": "53840",
    "end": "56160"
  },
  {
    "text": "a capacity and a name",
    "start": "56160",
    "end": "58879"
  },
  {
    "text": "the location of your container service",
    "start": "58879",
    "end": "60879"
  },
  {
    "text": "determines which aws region the service",
    "start": "60879",
    "end": "63120"
  },
  {
    "text": "will be in",
    "start": "63120",
    "end": "64478"
  },
  {
    "text": "choosing a location for your container",
    "start": "64479",
    "end": "66080"
  },
  {
    "text": "service is just like choosing a location",
    "start": "66080",
    "end": "68400"
  },
  {
    "text": "for a light sale instance or other aws",
    "start": "68400",
    "end": "70840"
  },
  {
    "text": "resource",
    "start": "70840",
    "end": "72640"
  },
  {
    "text": "you might choose a particular region",
    "start": "72640",
    "end": "74479"
  },
  {
    "text": "because it's close to your users and",
    "start": "74479",
    "end": "76080"
  },
  {
    "text": "will reduce latency",
    "start": "76080",
    "end": "78000"
  },
  {
    "text": "or you might choose a particular region",
    "start": "78000",
    "end": "80080"
  },
  {
    "text": "because you have data sovereignty or",
    "start": "80080",
    "end": "81759"
  },
  {
    "text": "other regional requirements",
    "start": "81759",
    "end": "83680"
  },
  {
    "text": "i'm going to choose the aws oregon",
    "start": "83680",
    "end": "85280"
  },
  {
    "text": "region because it's the closest region",
    "start": "85280",
    "end": "86960"
  },
  {
    "text": "to my actual location",
    "start": "86960",
    "end": "88479"
  },
  {
    "text": "and i'm the only user",
    "start": "88479",
    "end": "91600"
  },
  {
    "text": "the capacity of your container service",
    "start": "92560",
    "end": "94240"
  },
  {
    "text": "determines how much power and scale your",
    "start": "94240",
    "end": "96079"
  },
  {
    "text": "service will have",
    "start": "96079",
    "end": "97600"
  },
  {
    "text": "the power of your service is defined by",
    "start": "97600",
    "end": "99439"
  },
  {
    "text": "the number of virtual cpus and the",
    "start": "99439",
    "end": "101200"
  },
  {
    "text": "amount of memory associated with each",
    "start": "101200",
    "end": "103119"
  },
  {
    "text": "node in the service",
    "start": "103119",
    "end": "106000"
  },
  {
    "text": "the scale of your service is defined by",
    "start": "106000",
    "end": "107840"
  },
  {
    "text": "the number of nodes it has",
    "start": "107840",
    "end": "109680"
  },
  {
    "text": "the power and scale that you need is",
    "start": "109680",
    "end": "111680"
  },
  {
    "text": "determined by the requirements of your",
    "start": "111680",
    "end": "113360"
  },
  {
    "text": "particular application",
    "start": "113360",
    "end": "115280"
  },
  {
    "text": "i'm going to go with a single nano node",
    "start": "115280",
    "end": "117040"
  },
  {
    "text": "for my first container service which i",
    "start": "117040",
    "end": "118799"
  },
  {
    "text": "know doesn't require much capacity",
    "start": "118799",
    "end": "122479"
  },
  {
    "text": "it's important to know that if your",
    "start": "122479",
    "end": "124159"
  },
  {
    "text": "capacity requirements change later on",
    "start": "124159",
    "end": "126399"
  },
  {
    "text": "you can very easily return and update",
    "start": "126399",
    "end": "128399"
  },
  {
    "text": "both the power and scale of your",
    "start": "128399",
    "end": "130000"
  },
  {
    "text": "container service",
    "start": "130000",
    "end": "132959"
  },
  {
    "text": "the name of your service should follow",
    "start": "134080",
    "end": "135520"
  },
  {
    "text": "the documented naming guidelines and",
    "start": "135520",
    "end": "137200"
  },
  {
    "text": "provided constraints",
    "start": "137200",
    "end": "138560"
  },
  {
    "text": "this name will become part of the",
    "start": "138560",
    "end": "139840"
  },
  {
    "text": "default domain name for your container",
    "start": "139840",
    "end": "141520"
  },
  {
    "text": "service",
    "start": "141520",
    "end": "142000"
  },
  {
    "text": "so it needs to be dns compliant",
    "start": "142000",
    "end": "145120"
  },
  {
    "text": "i'm going to use my first service",
    "start": "145120",
    "end": "148879"
  },
  {
    "text": "finally review your container service",
    "start": "150319",
    "end": "152400"
  },
  {
    "text": "configuration",
    "start": "152400",
    "end": "153519"
  },
  {
    "text": "make any changes if you need to and then",
    "start": "153519",
    "end": "156160"
  },
  {
    "text": "create the container service",
    "start": "156160",
    "end": "159599"
  },
  {
    "text": "after a few minutes your container",
    "start": "159680",
    "end": "161280"
  },
  {
    "text": "service will be provisioned and ready",
    "start": "161280",
    "end": "162879"
  },
  {
    "text": "for use",
    "start": "162879",
    "end": "165280"
  },
  {
    "text": "from the container service page you can",
    "start": "165280",
    "end": "167360"
  },
  {
    "text": "create and review deployments to the",
    "start": "167360",
    "end": "169040"
  },
  {
    "text": "service change the services capacity",
    "start": "169040",
    "end": "172080"
  },
  {
    "text": "administer custom domains and view",
    "start": "172080",
    "end": "174800"
  },
  {
    "text": "service metrics",
    "start": "174800",
    "end": "177680"
  },
  {
    "start": "176000",
    "end": "390000"
  },
  {
    "text": "now that you've created your container",
    "start": "177840",
    "end": "179360"
  },
  {
    "text": "service i'll show you how to create and",
    "start": "179360",
    "end": "181040"
  },
  {
    "text": "push docker containers to your light",
    "start": "181040",
    "end": "182720"
  },
  {
    "text": "cell service from the command line",
    "start": "182720",
    "end": "184640"
  },
  {
    "text": "before you get started you'll need to",
    "start": "184640",
    "end": "186400"
  },
  {
    "text": "install docker the aws command line",
    "start": "186400",
    "end": "188879"
  },
  {
    "text": "interface",
    "start": "188879",
    "end": "189519"
  },
  {
    "text": "or cli and the light cell control plugin",
    "start": "189519",
    "end": "192400"
  },
  {
    "text": "to your system",
    "start": "192400",
    "end": "193760"
  },
  {
    "text": "also i'm using visual studio code in a",
    "start": "193760",
    "end": "196480"
  },
  {
    "text": "linux instance to create and push",
    "start": "196480",
    "end": "198239"
  },
  {
    "text": "containers to light cell",
    "start": "198239",
    "end": "200000"
  },
  {
    "text": "depending on your system and tools the",
    "start": "200000",
    "end": "202080"
  },
  {
    "text": "ui and commands you see",
    "start": "202080",
    "end": "203680"
  },
  {
    "text": "might differ i'm going to build two",
    "start": "203680",
    "end": "205920"
  },
  {
    "text": "containers the backend web server",
    "start": "205920",
    "end": "207599"
  },
  {
    "text": "container",
    "start": "207599",
    "end": "208239"
  },
  {
    "text": "using python flask and the reverse proxy",
    "start": "208239",
    "end": "211440"
  },
  {
    "text": "using nginx let's start with the web",
    "start": "211440",
    "end": "214000"
  },
  {
    "text": "server container",
    "start": "214000",
    "end": "215360"
  },
  {
    "text": "to build the web server container you'll",
    "start": "215360",
    "end": "217120"
  },
  {
    "text": "need three files the application code",
    "start": "217120",
    "end": "219599"
  },
  {
    "text": "a python requirements file and the",
    "start": "219599",
    "end": "221519"
  },
  {
    "text": "docker file",
    "start": "221519",
    "end": "222720"
  },
  {
    "text": "let's look at each one of these briefly",
    "start": "222720",
    "end": "224560"
  },
  {
    "text": "and then we'll build the container",
    "start": "224560",
    "end": "227040"
  },
  {
    "text": "the application code defines the minimal",
    "start": "227040",
    "end": "228799"
  },
  {
    "text": "flask application",
    "start": "228799",
    "end": "231360"
  },
  {
    "text": "it first imports the flask class and",
    "start": "231360",
    "end": "233519"
  },
  {
    "text": "creates an instance of the class",
    "start": "233519",
    "end": "236080"
  },
  {
    "text": "next the route decorator tells flask",
    "start": "236080",
    "end": "238480"
  },
  {
    "text": "what url should trigger our function",
    "start": "238480",
    "end": "240640"
  },
  {
    "text": "in this case the root directory that's",
    "start": "240640",
    "end": "243120"
  },
  {
    "text": "it",
    "start": "243120",
    "end": "244640"
  },
  {
    "text": "the requirements text file specifies the",
    "start": "244640",
    "end": "247120"
  },
  {
    "text": "python packages that are required by the",
    "start": "247120",
    "end": "249280"
  },
  {
    "text": "application",
    "start": "249280",
    "end": "250720"
  },
  {
    "text": "for this minimal flask application",
    "start": "250720",
    "end": "252480"
  },
  {
    "text": "there's really only one package required",
    "start": "252480",
    "end": "254319"
  },
  {
    "text": "and that's flask itself",
    "start": "254319",
    "end": "257519"
  },
  {
    "text": "the docker file specifies how the",
    "start": "257919",
    "end": "259919"
  },
  {
    "text": "container image should be built",
    "start": "259919",
    "end": "262400"
  },
  {
    "text": "the from instruction initializes a new",
    "start": "262400",
    "end": "264720"
  },
  {
    "text": "build stage",
    "start": "264720",
    "end": "265600"
  },
  {
    "text": "and sets the base image we're using an",
    "start": "265600",
    "end": "268000"
  },
  {
    "text": "alpine variant to keep image sizes small",
    "start": "268000",
    "end": "272320"
  },
  {
    "text": "the exposed instruction lets users of",
    "start": "272639",
    "end": "274560"
  },
  {
    "text": "this image know that the container will",
    "start": "274560",
    "end": "276000"
  },
  {
    "text": "be listening on port 5000 the default",
    "start": "276000",
    "end": "278479"
  },
  {
    "text": "flask",
    "start": "278479",
    "end": "278960"
  },
  {
    "text": "port the remainder of the instructions",
    "start": "278960",
    "end": "282400"
  },
  {
    "text": "set the working directory",
    "start": "282400",
    "end": "284000"
  },
  {
    "text": "install dependencies and copy the main",
    "start": "284000",
    "end": "286240"
  },
  {
    "text": "application code",
    "start": "286240",
    "end": "288800"
  },
  {
    "text": "building the container is as simple as",
    "start": "288800",
    "end": "290479"
  },
  {
    "text": "running docker build in the same",
    "start": "290479",
    "end": "292160"
  },
  {
    "text": "directory as the docker file",
    "start": "292160",
    "end": "293840"
  },
  {
    "text": "and providing a tag so we can reference",
    "start": "293840",
    "end": "295680"
  },
  {
    "text": "it later",
    "start": "295680",
    "end": "298240"
  },
  {
    "text": "after the container is built push it to",
    "start": "298800",
    "end": "300800"
  },
  {
    "text": "the light cell service you created",
    "start": "300800",
    "end": "302560"
  },
  {
    "text": "with the push container image command",
    "start": "302560",
    "end": "304400"
  },
  {
    "text": "provided by the light cell cli plugin",
    "start": "304400",
    "end": "307680"
  },
  {
    "text": "this command includes the name of the",
    "start": "307680",
    "end": "309199"
  },
  {
    "text": "container service you created in the",
    "start": "309199",
    "end": "310720"
  },
  {
    "text": "previous section",
    "start": "310720",
    "end": "311840"
  },
  {
    "text": "as well as the tag for the container",
    "start": "311840",
    "end": "313600"
  },
  {
    "text": "image you just built",
    "start": "313600",
    "end": "315759"
  },
  {
    "text": "this command stores the container image",
    "start": "315759",
    "end": "317600"
  },
  {
    "text": "with your container service",
    "start": "317600",
    "end": "319039"
  },
  {
    "text": "and now you can reference it by its",
    "start": "319039",
    "end": "320560"
  },
  {
    "text": "unique id when you create a deployment",
    "start": "320560",
    "end": "324000"
  },
  {
    "text": "to build the reverse proxy container",
    "start": "324000",
    "end": "325919"
  },
  {
    "text": "you'll need two files the proxy",
    "start": "325919",
    "end": "327520"
  },
  {
    "text": "configuration",
    "start": "327520",
    "end": "328720"
  },
  {
    "text": "and the docker file let's look at each",
    "start": "328720",
    "end": "330720"
  },
  {
    "text": "one of those briefly",
    "start": "330720",
    "end": "332639"
  },
  {
    "text": "the configuration file specifies a",
    "start": "332639",
    "end": "334639"
  },
  {
    "text": "simple reverse proxy",
    "start": "334639",
    "end": "336160"
  },
  {
    "text": "that listens on port 80 and forwards all",
    "start": "336160",
    "end": "338400"
  },
  {
    "text": "requests to the flask server",
    "start": "338400",
    "end": "341520"
  },
  {
    "text": "the flask server and port are specified",
    "start": "341520",
    "end": "344000"
  },
  {
    "text": "at runtime and substituted into the",
    "start": "344000",
    "end": "346000"
  },
  {
    "text": "configuration file then",
    "start": "346000",
    "end": "349520"
  },
  {
    "text": "the docker file specifies how the",
    "start": "349680",
    "end": "351600"
  },
  {
    "text": "container image should be built",
    "start": "351600",
    "end": "353680"
  },
  {
    "text": "the from instruction initializes a new",
    "start": "353680",
    "end": "355759"
  },
  {
    "text": "build stage",
    "start": "355759",
    "end": "356800"
  },
  {
    "text": "and sets the base image we're using an",
    "start": "356800",
    "end": "359120"
  },
  {
    "text": "alpine variant of the nginx master image",
    "start": "359120",
    "end": "361840"
  },
  {
    "text": "to keep image sizes small the copy",
    "start": "361840",
    "end": "364400"
  },
  {
    "text": "instruction copies the configuration",
    "start": "364400",
    "end": "366240"
  },
  {
    "text": "file to the appropriate location",
    "start": "366240",
    "end": "368479"
  },
  {
    "text": "at runtime it will be modified to",
    "start": "368479",
    "end": "370240"
  },
  {
    "text": "include the flask server name and port",
    "start": "370240",
    "end": "373039"
  },
  {
    "text": "building the nginx container follows the",
    "start": "373039",
    "end": "374880"
  },
  {
    "text": "same process as before",
    "start": "374880",
    "end": "376639"
  },
  {
    "text": "run docker build in the same directory",
    "start": "376639",
    "end": "378479"
  },
  {
    "text": "as the dockerfile and provide a tag so",
    "start": "378479",
    "end": "380479"
  },
  {
    "text": "it can be referenced later",
    "start": "380479",
    "end": "382400"
  },
  {
    "text": "after the container has been built push",
    "start": "382400",
    "end": "384560"
  },
  {
    "text": "it to the light cell service using the",
    "start": "384560",
    "end": "386000"
  },
  {
    "text": "light cell push container image command",
    "start": "386000",
    "end": "389919"
  },
  {
    "start": "390000",
    "end": "655000"
  },
  {
    "text": "now that the service has been created",
    "start": "391120",
    "end": "392800"
  },
  {
    "text": "and container image is built",
    "start": "392800",
    "end": "394400"
  },
  {
    "text": "will return to the light cell console to",
    "start": "394400",
    "end": "396160"
  },
  {
    "text": "deploy your container service",
    "start": "396160",
    "end": "399039"
  },
  {
    "text": "back on the container service page a new",
    "start": "399039",
    "end": "401199"
  },
  {
    "text": "tab has appeared called images",
    "start": "401199",
    "end": "403280"
  },
  {
    "text": "this is where you can view and",
    "start": "403280",
    "end": "404479"
  },
  {
    "text": "administer the images stored with your",
    "start": "404479",
    "end": "406240"
  },
  {
    "text": "light cell container service",
    "start": "406240",
    "end": "408080"
  },
  {
    "text": "here you'll see the two images you just",
    "start": "408080",
    "end": "410000"
  },
  {
    "text": "created and pushed from the command line",
    "start": "410000",
    "end": "414160"
  },
  {
    "text": "on the container service page open the",
    "start": "414880",
    "end": "416960"
  },
  {
    "text": "deployments tab and create a new",
    "start": "416960",
    "end": "418880"
  },
  {
    "text": "deployment",
    "start": "418880",
    "end": "420960"
  },
  {
    "text": "a deployment is a set of specifications",
    "start": "420960",
    "end": "422960"
  },
  {
    "text": "for the container workload",
    "start": "422960",
    "end": "424319"
  },
  {
    "text": "that you want to launch in your",
    "start": "424319",
    "end": "425759"
  },
  {
    "text": "container service",
    "start": "425759",
    "end": "428000"
  },
  {
    "text": "a deployment can include up to 10",
    "start": "428000",
    "end": "429759"
  },
  {
    "text": "containers and each container has a name",
    "start": "429759",
    "end": "432240"
  },
  {
    "text": "an image and a configuration option for",
    "start": "432240",
    "end": "435039"
  },
  {
    "text": "this video you'll be deploying two",
    "start": "435039",
    "end": "436880"
  },
  {
    "text": "containers to your service",
    "start": "436880",
    "end": "438160"
  },
  {
    "text": "the nginx proxy container and the flask",
    "start": "438160",
    "end": "440720"
  },
  {
    "text": "web server container",
    "start": "440720",
    "end": "442160"
  },
  {
    "text": "first we'll configure the proxy",
    "start": "442160",
    "end": "443599"
  },
  {
    "text": "container the name of your container",
    "start": "443599",
    "end": "445520"
  },
  {
    "text": "should follow the appropriate naming",
    "start": "445520",
    "end": "446880"
  },
  {
    "text": "guidelines",
    "start": "446880",
    "end": "447759"
  },
  {
    "text": "and should be something descriptive that",
    "start": "447759",
    "end": "449360"
  },
  {
    "text": "allows you to identify your container",
    "start": "449360",
    "end": "451280"
  },
  {
    "text": "later",
    "start": "451280",
    "end": "452080"
  },
  {
    "text": "i'm going to use proxy as the name but",
    "start": "452080",
    "end": "454080"
  },
  {
    "text": "others would be useful as well",
    "start": "454080",
    "end": "455680"
  },
  {
    "text": "like web or nginx source container",
    "start": "455680",
    "end": "459360"
  },
  {
    "text": "images can come from a public repository",
    "start": "459360",
    "end": "461360"
  },
  {
    "text": "like docker hub",
    "start": "461360",
    "end": "462479"
  },
  {
    "text": "or can be images that you've created and",
    "start": "462479",
    "end": "464400"
  },
  {
    "text": "stored with your container service",
    "start": "464400",
    "end": "466479"
  },
  {
    "text": "for the proxy choose the nginx container",
    "start": "466479",
    "end": "469680"
  },
  {
    "text": "built",
    "start": "469680",
    "end": "470080"
  },
  {
    "text": "in the previous step you can also",
    "start": "470080",
    "end": "472160"
  },
  {
    "text": "provide optional configuration like",
    "start": "472160",
    "end": "474080"
  },
  {
    "text": "launch commands",
    "start": "474080",
    "end": "474960"
  },
  {
    "text": "environment variables and open ports for",
    "start": "474960",
    "end": "477599"
  },
  {
    "text": "the container",
    "start": "477599",
    "end": "478960"
  },
  {
    "text": "these dynamic options allow you to",
    "start": "478960",
    "end": "480720"
  },
  {
    "text": "provide configuration information to",
    "start": "480720",
    "end": "482720"
  },
  {
    "text": "your container when it is created",
    "start": "482720",
    "end": "484800"
  },
  {
    "text": "for the proxy container you don't need",
    "start": "484800",
    "end": "486400"
  },
  {
    "text": "to specify a launch command",
    "start": "486400",
    "end": "488240"
  },
  {
    "text": "but will need to add several environment",
    "start": "488240",
    "end": "490840"
  },
  {
    "text": "variables",
    "start": "490840",
    "end": "492000"
  },
  {
    "text": "the output directory lets nginx know",
    "start": "492000",
    "end": "494000"
  },
  {
    "text": "where to put the resulting configuration",
    "start": "494000",
    "end": "496080"
  },
  {
    "text": "file",
    "start": "496080",
    "end": "496639"
  },
  {
    "text": "after replacing the flask server name",
    "start": "496639",
    "end": "498720"
  },
  {
    "text": "and port variables in the config file",
    "start": "498720",
    "end": "500560"
  },
  {
    "text": "with the actual values",
    "start": "500560",
    "end": "503280"
  },
  {
    "text": "the server name and port for the flask",
    "start": "503280",
    "end": "505280"
  },
  {
    "text": "server are used by nginx to forward",
    "start": "505280",
    "end": "507440"
  },
  {
    "text": "requests on port 80 to the flask web",
    "start": "507440",
    "end": "509599"
  },
  {
    "text": "server",
    "start": "509599",
    "end": "510479"
  },
  {
    "text": "both containers will be running on the",
    "start": "510479",
    "end": "512000"
  },
  {
    "text": "same node in the service so we use",
    "start": "512000",
    "end": "513760"
  },
  {
    "text": "localhost",
    "start": "513760",
    "end": "514640"
  },
  {
    "text": "and flask listens on port 5000.",
    "start": "514640",
    "end": "520399"
  },
  {
    "text": "in addition we'll specify which port the",
    "start": "520399",
    "end": "522240"
  },
  {
    "text": "proxy is listening on",
    "start": "522240",
    "end": "523599"
  },
  {
    "text": "port 80.",
    "start": "523599",
    "end": "526320"
  },
  {
    "text": "next we'll configure the flask container",
    "start": "527120",
    "end": "529440"
  },
  {
    "text": "provide a unique name for this container",
    "start": "529440",
    "end": "531279"
  },
  {
    "text": "and specify the image the container",
    "start": "531279",
    "end": "533040"
  },
  {
    "text": "should use in this case the flask image",
    "start": "533040",
    "end": "536000"
  },
  {
    "text": "that you created in the previous section",
    "start": "536000",
    "end": "539760"
  },
  {
    "text": "next specify the configuration for the",
    "start": "540959",
    "end": "542800"
  },
  {
    "text": "container including the run command any",
    "start": "542800",
    "end": "544720"
  },
  {
    "text": "environment variables and open ports",
    "start": "544720",
    "end": "548240"
  },
  {
    "text": "our flask app uses the flask run command",
    "start": "548240",
    "end": "550800"
  },
  {
    "text": "and also needs to know where the flask",
    "start": "550800",
    "end": "552800"
  },
  {
    "text": "app is located",
    "start": "552800",
    "end": "554720"
  },
  {
    "text": "in addition we'll specify the port the",
    "start": "554720",
    "end": "556399"
  },
  {
    "text": "flask app is listing on",
    "start": "556399",
    "end": "557920"
  },
  {
    "text": "port 5000 public endpoints allow end",
    "start": "557920",
    "end": "561200"
  },
  {
    "text": "users or consumers of your service to",
    "start": "561200",
    "end": "563200"
  },
  {
    "text": "reach it from the internet",
    "start": "563200",
    "end": "564959"
  },
  {
    "text": "when you specify a public endpoint",
    "start": "564959",
    "end": "566800"
  },
  {
    "text": "lightsail will create a secure public",
    "start": "566800",
    "end": "568680"
  },
  {
    "text": "https endpoint for your service that is",
    "start": "568680",
    "end": "571279"
  },
  {
    "text": "accessible",
    "start": "571279",
    "end": "572000"
  },
  {
    "text": "from the internet through the default",
    "start": "572000",
    "end": "573839"
  },
  {
    "text": "domain name",
    "start": "573839",
    "end": "576160"
  },
  {
    "text": "because you have more than one container",
    "start": "576160",
    "end": "577680"
  },
  {
    "text": "in your service that has open ports",
    "start": "577680",
    "end": "579519"
  },
  {
    "text": "you can choose from any of these",
    "start": "579519",
    "end": "580880"
  },
  {
    "text": "containers to act as your public",
    "start": "580880",
    "end": "582320"
  },
  {
    "text": "endpoint",
    "start": "582320",
    "end": "583040"
  },
  {
    "text": "but you can only have one public",
    "start": "583040",
    "end": "584560"
  },
  {
    "text": "endpoint per container service at a time",
    "start": "584560",
    "end": "587519"
  },
  {
    "text": "for example the flask web server could",
    "start": "587519",
    "end": "589760"
  },
  {
    "text": "act as the public endpoint completely",
    "start": "589760",
    "end": "591440"
  },
  {
    "text": "bypassing the nginx proxy if we wanted",
    "start": "591440",
    "end": "594000"
  },
  {
    "text": "that can be useful when debugging for",
    "start": "594000",
    "end": "596080"
  },
  {
    "text": "this app select the proxy container to",
    "start": "596080",
    "end": "598160"
  },
  {
    "text": "act as the endpoint",
    "start": "598160",
    "end": "599760"
  },
  {
    "text": "this ensures requests will be routed to",
    "start": "599760",
    "end": "601600"
  },
  {
    "text": "the proxy first",
    "start": "601600",
    "end": "602800"
  },
  {
    "text": "which will then forward to the flask",
    "start": "602800",
    "end": "604480"
  },
  {
    "text": "container",
    "start": "604480",
    "end": "606880"
  },
  {
    "text": "after configuring your containers in the",
    "start": "606880",
    "end": "608640"
  },
  {
    "text": "endpoint you can now create your",
    "start": "608640",
    "end": "610079"
  },
  {
    "text": "deployment",
    "start": "610079",
    "end": "612639"
  },
  {
    "text": "creating your deployment will take just",
    "start": "612800",
    "end": "614240"
  },
  {
    "text": "a few minutes",
    "start": "614240",
    "end": "616079"
  },
  {
    "text": "during creation you can monitor the",
    "start": "616079",
    "end": "617920"
  },
  {
    "text": "progress of your deployment here on the",
    "start": "617920",
    "end": "619519"
  },
  {
    "text": "service page",
    "start": "619519",
    "end": "620720"
  },
  {
    "text": "and by viewing the service logs",
    "start": "620720",
    "end": "624399"
  },
  {
    "text": "once your service has been deployed you",
    "start": "626480",
    "end": "628560"
  },
  {
    "text": "can visit the public endpoint with your",
    "start": "628560",
    "end": "630160"
  },
  {
    "text": "browser by clicking on the link on the",
    "start": "630160",
    "end": "631839"
  },
  {
    "text": "service page",
    "start": "631839",
    "end": "633120"
  },
  {
    "text": "here you can verify that both the nginx",
    "start": "633120",
    "end": "635120"
  },
  {
    "text": "proxy and the flask server have been",
    "start": "635120",
    "end": "637040"
  },
  {
    "text": "deployed correctly",
    "start": "637040",
    "end": "638320"
  },
  {
    "text": "and are accepting traffic from the",
    "start": "638320",
    "end": "640000"
  },
  {
    "text": "internet",
    "start": "640000",
    "end": "642160"
  },
  {
    "text": "once you've verified your container",
    "start": "642160",
    "end": "643600"
  },
  {
    "text": "service is operating correctly and",
    "start": "643600",
    "end": "645120"
  },
  {
    "text": "you're finished with it",
    "start": "645120",
    "end": "646320"
  },
  {
    "text": "you can easily delete your light cell",
    "start": "646320",
    "end": "647839"
  },
  {
    "text": "container service and all resources",
    "start": "647839",
    "end": "650000"
  },
  {
    "text": "associated with it",
    "start": "650000",
    "end": "651200"
  },
  {
    "text": "including deployments and save container",
    "start": "651200",
    "end": "653279"
  },
  {
    "text": "images",
    "start": "653279",
    "end": "655760"
  },
  {
    "start": "655000",
    "end": "706000"
  },
  {
    "text": "in this video i've shown you how easy it",
    "start": "656079",
    "end": "657920"
  },
  {
    "text": "is to deploy an nginx reverse proxy in",
    "start": "657920",
    "end": "660160"
  },
  {
    "text": "the cloud using amazon lights out",
    "start": "660160",
    "end": "661920"
  },
  {
    "text": "containers",
    "start": "661920",
    "end": "663120"
  },
  {
    "text": "i demonstrated how to create a new",
    "start": "663120",
    "end": "664640"
  },
  {
    "text": "container service how to build and push",
    "start": "664640",
    "end": "666800"
  },
  {
    "text": "containers",
    "start": "666800",
    "end": "667519"
  },
  {
    "text": "and how to deploy containers using both",
    "start": "667519",
    "end": "669680"
  },
  {
    "text": "the light cell web console",
    "start": "669680",
    "end": "671360"
  },
  {
    "text": "and from the command line amazon lights",
    "start": "671360",
    "end": "674079"
  },
  {
    "text": "out containers is an easy way to get",
    "start": "674079",
    "end": "675680"
  },
  {
    "text": "started with cloud containers",
    "start": "675680",
    "end": "677279"
  },
  {
    "text": "particularly for startups developers and",
    "start": "677279",
    "end": "679519"
  },
  {
    "text": "hobbyists taking their first steps into",
    "start": "679519",
    "end": "681600"
  },
  {
    "text": "containerization",
    "start": "681600",
    "end": "684079"
  },
  {
    "text": "you can use amazon lightsaber containers",
    "start": "684079",
    "end": "685839"
  },
  {
    "text": "to learn about containers in the cloud",
    "start": "685839",
    "end": "687760"
  },
  {
    "text": "to gain experience managing containers",
    "start": "687760",
    "end": "689760"
  },
  {
    "text": "in the cloud and you can do so with",
    "start": "689760",
    "end": "691680"
  },
  {
    "text": "light cell's simplified container",
    "start": "691680",
    "end": "693360"
  },
  {
    "text": "orchestration",
    "start": "693360",
    "end": "695360"
  },
  {
    "text": "for more information about lightsaber",
    "start": "695360",
    "end": "696800"
  },
  {
    "text": "containers please visit the lightsup",
    "start": "696800",
    "end": "698720"
  },
  {
    "text": "product page",
    "start": "698720",
    "end": "700839"
  },
  {
    "text": "thanks",
    "start": "700839",
    "end": "703839"
  }
]