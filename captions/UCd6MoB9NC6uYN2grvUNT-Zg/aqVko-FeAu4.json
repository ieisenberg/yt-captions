[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "Welcome to 'Back to Basics.'\nI'm Simon Carter,",
    "start": "5387",
    "end": "7463"
  },
  {
    "text": "and I'm here today \nto talk about reference data",
    "start": "7463",
    "end": "9580"
  },
  {
    "text": "and how to manage it centrally \nwithout introducing performance headaches.",
    "start": "9580",
    "end": "13198"
  },
  {
    "text": "So firstly, let's talk about \nwhat we mean by reference data.",
    "start": "13198",
    "end": "16375"
  },
  {
    "start": "17000",
    "end": "60000"
  },
  {
    "text": "Reference data is non-user data \nthat comes from outside the application,",
    "start": "17103",
    "end": "21213"
  },
  {
    "text": "and is generally considered \npart of the configuration of the application.",
    "start": "21213",
    "end": "24879"
  },
  {
    "text": "Examples include countries, \nstate names and abbreviations,",
    "start": "24879",
    "end": "28594"
  },
  {
    "text": "IDD dialing codes, public holidays,\n supported currencies, service codes, and types.",
    "start": "28594",
    "end": "34557"
  },
  {
    "text": "It can also include\n the content of UI drop down lists,",
    "start": "34557",
    "end": "37313"
  },
  {
    "text": "such as the various delivery options for postage.",
    "start": "37313",
    "end": "39926"
  },
  {
    "text": "It's important for reference data requests \nto have very low latency, but also low cost.",
    "start": "39926",
    "end": "45038"
  },
  {
    "text": "Your application looks at reference data \nfor most interactions,",
    "start": "45038",
    "end": "48170"
  },
  {
    "text": "such as when displaying web pages, \nand validating transactions.",
    "start": "48170",
    "end": "51716"
  },
  {
    "text": "The example we're going to look at today\n is validating IDD codes,",
    "start": "51760",
    "end": "55496"
  },
  {
    "text": "so when the user enters their country, \nyou can default the right IDD code for their phone number.",
    "start": "55496",
    "end": "60055"
  },
  {
    "start": "60000",
    "end": "90000"
  },
  {
    "text": "As reference data \ntends to be slowly changing,",
    "start": "61068",
    "end": "64000"
  },
  {
    "text": "it can be tempting \nto hard code it wherever it's needed.",
    "start": "64000",
    "end": "66864"
  },
  {
    "text": "This approach is super fast, \nbut it costs more for",
    "start": "66864",
    "end": "69802"
  },
  {
    "text": "multiple copies of the data have to be stored\n in each container or virtual machine.",
    "start": "69802",
    "end": "74259"
  },
  {
    "text": "In large applications, I've actually seen reference data \ngrow to over 100 megabytes,",
    "start": "74259",
    "end": "78161"
  },
  {
    "text": "so this is not a good approach.",
    "start": "78161",
    "end": "79752"
  },
  {
    "text": "It's also hard to maintain,\n when reference data changes, it requires a code deployment",
    "start": "79974",
    "end": "84336"
  },
  {
    "text": "and all code deployments need to change \nat exactly the same time to avoid inconsistent behavior.",
    "start": "84336",
    "end": "89325"
  },
  {
    "text": "I really don't recommend this pattern.",
    "start": "89325",
    "end": "91342"
  },
  {
    "start": "90000",
    "end": "109000"
  },
  {
    "text": "The simple approach is to store reference data \nin one place, the back end database.",
    "start": "91801",
    "end": "96404"
  },
  {
    "text": "As reference data volume grows, \nit needs ever-increasing cash",
    "start": "96404",
    "end": "100014"
  },
  {
    "text": "to provide a low latency response time.",
    "start": "100014",
    "end": "102343"
  },
  {
    "text": "It's tempting to be able to rely \non the back end database,",
    "start": "102343",
    "end": "105434"
  },
  {
    "text": "scaling memory and CPU \nwhenever you need to.",
    "start": "105434",
    "end": "107974"
  },
  {
    "text": "But you really end up spending way more\n than you have to with this approach.",
    "start": "107974",
    "end": "111148"
  },
  {
    "text": "You could add a database read replica \nand segregate reads from writes.",
    "start": "112015",
    "end": "115851"
  },
  {
    "text": "But this doubles the cost of your data tier \nwithout really addressing the underlying problem.",
    "start": "115851",
    "end": "120608"
  },
  {
    "text": "So while reference data does change slowly, \nsuch as when countries split or join,",
    "start": "121006",
    "end": "125701"
  },
  {
    "text": "it also needs to change\n in response to operational events.",
    "start": "125701",
    "end": "128657"
  },
  {
    "text": "Imagine your delivery partner \nis suddenly unable to deliver,",
    "start": "128990",
    "end": "132077"
  },
  {
    "text": "and you need to change the UI drop down options \nfor delivery for parcels.",
    "start": "132077",
    "end": "136366"
  },
  {
    "start": "134000",
    "end": "197000"
  },
  {
    "text": "So we have these core reasons \nof how to manage our reference data.",
    "start": "136695",
    "end": "140162"
  },
  {
    "text": "We want to maintain it centrally, \nwe want to segregate reference data from transactional data.",
    "start": "140162",
    "end": "144695"
  },
  {
    "text": "And we don't wanna hard code it.",
    "start": "144695",
    "end": "146176"
  },
  {
    "text": "Another key reason for that\n is change control processes in enterprise,",
    "start": "146176",
    "end": "149663"
  },
  {
    "text": "are very time-consuming for code changes, \nbut very lightweight for reference data changes.",
    "start": "149663",
    "end": "154299"
  },
  {
    "text": "The best way in AWS \nto manage a reference data store",
    "start": "155165",
    "end": "158517"
  },
  {
    "text": "is with Amazon ElasticCache for Redis.",
    "start": "158517",
    "end": "161487"
  },
  {
    "text": "ElasticCache is a fully managed,\n scalable, in memory data store with extreme performance.",
    "start": "162323",
    "end": "167678"
  },
  {
    "text": "It provides most read or write operations \nin less than a millisecond,",
    "start": "168147",
    "end": "171599"
  },
  {
    "text": "and support hundreds of thousands of requests\n per second from a single instance,",
    "start": "171599",
    "end": "175582"
  },
  {
    "text": "and hundreds of millions of operations per second \nwithin a cluster.",
    "start": "175582",
    "end": "179175"
  },
  {
    "text": "So while ElasticCache is often used \nas a look aside cache in front of a database,",
    "start": "179468",
    "end": "184848"
  },
  {
    "text": "in this example, we're going to use\nElasticCache as the database.",
    "start": "184848",
    "end": "188380"
  },
  {
    "text": "ElasticCache for Redis \nallows us to use arrays, lists and sets,",
    "start": "188777",
    "end": "192474"
  },
  {
    "text": "which are perfect for lookups, UI elements, \ncodes and other simple data.",
    "start": "192475",
    "end": "196980"
  },
  {
    "text": "Now let's look at an end-to-end architecture \nthat leverages ElasticCache for Redis.",
    "start": "196980",
    "end": "201265"
  },
  {
    "start": "197000",
    "end": "236000"
  },
  {
    "text": "In this approach, \nwhen a microservice needs reference data,",
    "start": "202321",
    "end": "205389"
  },
  {
    "text": "it typically fetches\nit directly from ElasticCache.",
    "start": "205389",
    "end": "207892"
  },
  {
    "text": "Deployed in a highly available configuration, \nit automatically recovers from the loss of a node.",
    "start": "208463",
    "end": "213624"
  },
  {
    "text": "Request for non-reference data \ncontinues to be served by the back end database.",
    "start": "213766",
    "end": "217832"
  },
  {
    "text": "If you're after performance, \nyou'll still want to segregate reads from writes with a replica.",
    "start": "217887",
    "end": "222217"
  },
  {
    "text": "Although this architecture is super simple,",
    "start": "222538",
    "end": "224720"
  },
  {
    "text": "it shows how you can achieve impressive performance \njust by segregating different data types.",
    "start": "224720",
    "end": "229461"
  },
  {
    "text": "Remember, ElasticCache is suited \nto all kinds of fast moving data",
    "start": "229715",
    "end": "233469"
  },
  {
    "text": "such as user sessions, leaderboards, \nand geolocations",
    "start": "233469",
    "end": "237090"
  },
  {
    "start": "236000",
    "end": "251000"
  },
  {
    "text": "and data that needs to expire, \nsuch as credit card data.",
    "start": "237091",
    "end": "240349"
  },
  {
    "text": "Okay, here's my hot tips.",
    "start": "240763",
    "end": "242329"
  },
  {
    "text": "For critical workloads, \nyou want to deploy ElasticCache in cluster mode,",
    "start": "242948",
    "end": "246642"
  },
  {
    "text": "so that you can recover \nin the event of a node failure.",
    "start": "246642",
    "end": "249142"
  },
  {
    "text": "Also, if you're unsure\n how much storage space you need,",
    "start": "249391",
    "end": "252203"
  },
  {
    "start": "251000",
    "end": "274000"
  },
  {
    "text": "make sure you provision 50% headroom,",
    "start": "252293",
    "end": "254367"
  },
  {
    "text": "so you can always resize \non the fly without interruptions.",
    "start": "254367",
    "end": "257675"
  },
  {
    "text": "For monitoring, \nyou want to make sure you get alerts",
    "start": "258316",
    "end": "260802"
  },
  {
    "text": "if CPU goes above 90%,\nor if freeable memory drops below 100 megabytes.",
    "start": "260802",
    "end": "265755"
  },
  {
    "text": "Look out for any usage of swap \nbecause that will dramatically lower your performance.",
    "start": "265755",
    "end": "269774"
  },
  {
    "text": "Look out for cache misses.",
    "start": "270073",
    "end": "271588"
  },
  {
    "text": "That means your application \nis looking for reference data that doesn't exist.",
    "start": "271588",
    "end": "275555"
  },
  {
    "start": "274000",
    "end": "299000"
  },
  {
    "text": "And make sure that cache evictions are always zero. \nYou don't want things being removed from your cache.",
    "start": "275886",
    "end": "280701"
  },
  {
    "text": "Depending on your process\n for loading reference data,",
    "start": "281082",
    "end": "283634"
  },
  {
    "text": "you'll either want hourly backups, \nor deployment process that populates the data.",
    "start": "283634",
    "end": "287789"
  },
  {
    "text": "Amazon ElasticCache for Redis allows you \nto segregate reference data from transactional data,",
    "start": "288854",
    "end": "293482"
  },
  {
    "text": "and achieve both performance and scale \nwith cloud architectures.",
    "start": "293482",
    "end": "297172"
  },
  {
    "text": "Check out the links below for more details,\nand see you next time.",
    "start": "297172",
    "end": "300764"
  }
]