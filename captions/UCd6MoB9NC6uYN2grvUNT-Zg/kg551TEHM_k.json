[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "hi welcome to the session on building",
    "start": "0",
    "end": "2429"
  },
  {
    "text": "high performance apps within memory data",
    "start": "2429",
    "end": "4770"
  },
  {
    "text": "I am Ganesh Raja and I'm a specialist",
    "start": "4770",
    "end": "7410"
  },
  {
    "text": "Solutions Architect for data analytics",
    "start": "7410",
    "end": "9690"
  },
  {
    "text": "on the AWS platform in this session let",
    "start": "9690",
    "end": "12840"
  },
  {
    "text": "us look at how Redis can help you build",
    "start": "12840",
    "end": "14849"
  },
  {
    "text": "a leaderboard we will also see some",
    "start": "14849",
    "end": "17279"
  },
  {
    "text": "common use cases that we use customers",
    "start": "17279",
    "end": "19770"
  },
  {
    "text": "using Redis for and I will show you a",
    "start": "19770",
    "end": "22859"
  },
  {
    "text": "demo of the leaderboard as far",
    "start": "22859",
    "end": "25039"
  },
  {
    "start": "25000",
    "end": "41000"
  },
  {
    "text": "milliseconds have become the new",
    "start": "25039",
    "end": "26939"
  },
  {
    "text": "microseconds every customer wants the",
    "start": "26939",
    "end": "29640"
  },
  {
    "text": "latency to be reduced the only way to",
    "start": "29640",
    "end": "31859"
  },
  {
    "text": "successfully reduce this latency is by",
    "start": "31859",
    "end": "34380"
  },
  {
    "text": "storing and processing the data in",
    "start": "34380",
    "end": "36390"
  },
  {
    "text": "memory and this is really where Amazon",
    "start": "36390",
    "end": "38969"
  },
  {
    "text": "ElastiCache fits in Amazon ElastiCache",
    "start": "38969",
    "end": "42030"
  },
  {
    "start": "41000",
    "end": "76000"
  },
  {
    "text": "offers fully managed Redis and memcache",
    "start": "42030",
    "end": "44700"
  },
  {
    "text": "and allows you to seamlessly deploy",
    "start": "44700",
    "end": "47489"
  },
  {
    "text": "operate and scale popular open source",
    "start": "47489",
    "end": "50760"
  },
  {
    "text": "compatible in-memory data stores Amazon",
    "start": "50760",
    "end": "54570"
  },
  {
    "text": "Elastic cache is fully managed Xero",
    "start": "54570",
    "end": "56879"
  },
  {
    "text": "administration no racking stacking",
    "start": "56879",
    "end": "59070"
  },
  {
    "text": "failover that you have to worry about",
    "start": "59070",
    "end": "61440"
  },
  {
    "text": "and it is hardened by Amazon and what it",
    "start": "61440",
    "end": "64470"
  },
  {
    "text": "means is we have some engineers who are",
    "start": "64470",
    "end": "66420"
  },
  {
    "text": "involved with the open source Redis",
    "start": "66420",
    "end": "68369"
  },
  {
    "text": "product and they are constantly looking",
    "start": "68369",
    "end": "70619"
  },
  {
    "text": "at the engine and we enhance those areas",
    "start": "70619",
    "end": "72990"
  },
  {
    "text": "that we feel better serve our customers",
    "start": "72990",
    "end": "75479"
  },
  {
    "text": "lettuce today is the most popular key",
    "start": "75479",
    "end": "78540"
  },
  {
    "text": "value store in the market and the reason",
    "start": "78540",
    "end": "80580"
  },
  {
    "text": "it is because it has a variety of",
    "start": "80580",
    "end": "82979"
  },
  {
    "text": "different features it's a Swiss Army",
    "start": "82979",
    "end": "85229"
  },
  {
    "text": "knife it has a variety of different data",
    "start": "85229",
    "end": "87630"
  },
  {
    "text": "structures so if you are a developer a",
    "start": "87630",
    "end": "89939"
  },
  {
    "text": "lot of these ring a bell to you hashmaps",
    "start": "89939",
    "end": "93000"
  },
  {
    "text": "lists sets and sorted sets it's very",
    "start": "93000",
    "end": "96270"
  },
  {
    "text": "intuitive concerning how you use it it",
    "start": "96270",
    "end": "98939"
  },
  {
    "text": "is in fact I'd like to think of the API",
    "start": "98939",
    "end": "101700"
  },
  {
    "text": "is genius because it's very rich in",
    "start": "101700",
    "end": "104280"
  },
  {
    "text": "capability but synthetically it's very",
    "start": "104280",
    "end": "106770"
  },
  {
    "text": "predictable and effortless to use other",
    "start": "106770",
    "end": "109409"
  },
  {
    "text": "things that make red is very interesting",
    "start": "109409",
    "end": "111689"
  },
  {
    "text": "is that it's a support for a chain so",
    "start": "111689",
    "end": "114450"
  },
  {
    "text": "you can have a master or primary or",
    "start": "114450",
    "end": "116939"
  },
  {
    "text": "multiple primaries in a clustered",
    "start": "116939",
    "end": "118740"
  },
  {
    "text": "environment and you can failover in the",
    "start": "118740",
    "end": "120899"
  },
  {
    "text": "even of a failed scenario another cool",
    "start": "120899",
    "end": "123600"
  },
  {
    "text": "feature is it has is the transaction",
    "start": "123600",
    "end": "126180"
  },
  {
    "text": "support so you can exclude various",
    "start": "126180",
    "end": "128459"
  },
  {
    "text": "commands in a transaction block Amazon",
    "start": "128459",
    "end": "132120"
  },
  {
    "text": "ElastiCache fully supports",
    "start": "132120",
    "end": "133830"
  },
  {
    "text": "the open-source version of Redis so from",
    "start": "133830",
    "end": "136320"
  },
  {
    "text": "a synthetical standpoint and a protocol",
    "start": "136320",
    "end": "138570"
  },
  {
    "text": "standpoint it's a drop-in replacement",
    "start": "138570",
    "end": "141210"
  },
  {
    "text": "with no code change if you are already",
    "start": "141210",
    "end": "143850"
  },
  {
    "text": "using Redis there is always more right",
    "start": "143850",
    "end": "147030"
  },
  {
    "start": "145000",
    "end": "191000"
  },
  {
    "text": "so the things that Redis has it has Lua",
    "start": "147030",
    "end": "150240"
  },
  {
    "text": "scripts",
    "start": "150240",
    "end": "150840"
  },
  {
    "text": "so you can break in business logic that",
    "start": "150840",
    "end": "154020"
  },
  {
    "text": "you can call and reference within your",
    "start": "154020",
    "end": "156180"
  },
  {
    "text": "Redis cluster there is geospatial",
    "start": "156180",
    "end": "158370"
  },
  {
    "text": "capability geospatial set a particular",
    "start": "158370",
    "end": "160950"
  },
  {
    "text": "assorted set that supports longitude and",
    "start": "160950",
    "end": "163800"
  },
  {
    "text": "latitude this is great for mobile",
    "start": "163800",
    "end": "165900"
  },
  {
    "text": "applications where maybe you are passing",
    "start": "165900",
    "end": "168120"
  },
  {
    "text": "location-based information to the cloud",
    "start": "168120",
    "end": "170100"
  },
  {
    "text": "and Redis you are looking for points of",
    "start": "170100",
    "end": "173340"
  },
  {
    "text": "interest that you want to serve to your",
    "start": "173340",
    "end": "174930"
  },
  {
    "text": "end users there is pub/sub capabilities",
    "start": "174930",
    "end": "177660"
  },
  {
    "text": "so this allows you to build chart",
    "start": "177660",
    "end": "179850"
  },
  {
    "text": "applications and notification systems",
    "start": "179850",
    "end": "181860"
  },
  {
    "text": "and it's just built into Redis so there",
    "start": "181860",
    "end": "184380"
  },
  {
    "text": "is nothing that you need to turn on",
    "start": "184380",
    "end": "185970"
  },
  {
    "text": "there is no additional cost and all",
    "start": "185970",
    "end": "188190"
  },
  {
    "text": "these features are available now in",
    "start": "188190",
    "end": "190020"
  },
  {
    "text": "elastic cache lettis comes in two",
    "start": "190020",
    "end": "192540"
  },
  {
    "text": "different flavors there is two different",
    "start": "192540",
    "end": "194700"
  },
  {
    "text": "topologies the first one is vertically",
    "start": "194700",
    "end": "197070"
  },
  {
    "text": "scaled environment and what that means",
    "start": "197070",
    "end": "199680"
  },
  {
    "text": "is you have one primary and your entire",
    "start": "199680",
    "end": "202680"
  },
  {
    "text": "ski space which is 16384 hash slots they",
    "start": "202680",
    "end": "207510"
  },
  {
    "text": "live in that one key space and so what",
    "start": "207510",
    "end": "210269"
  },
  {
    "text": "this means is all your data can fit to",
    "start": "210269",
    "end": "213150"
  },
  {
    "text": "the largest size of the node and in this",
    "start": "213150",
    "end": "215880"
  },
  {
    "text": "case would be an r4 16x large which is",
    "start": "215880",
    "end": "219360"
  },
  {
    "text": "four hundred and seven gigabytes and the",
    "start": "219360",
    "end": "221459"
  },
  {
    "text": "replicas have the entire copy of all the",
    "start": "221459",
    "end": "223739"
  },
  {
    "text": "data what we provide you is a primary",
    "start": "223739",
    "end": "226800"
  },
  {
    "text": "endpoint your application could point to",
    "start": "226800",
    "end": "229200"
  },
  {
    "text": "that primary endpoint you also have",
    "start": "229200",
    "end": "231390"
  },
  {
    "text": "replica endpoints and if there was a",
    "start": "231390",
    "end": "233700"
  },
  {
    "text": "failover",
    "start": "233700",
    "end": "234510"
  },
  {
    "text": "what would happen if we could take that",
    "start": "234510",
    "end": "236790"
  },
  {
    "text": "primary endpoint and we propagate that",
    "start": "236790",
    "end": "239310"
  },
  {
    "text": "one of the replicas so we do the DNS map",
    "start": "239310",
    "end": "242850"
  },
  {
    "text": "for you with custard mode enabled it is",
    "start": "242850",
    "end": "245670"
  },
  {
    "text": "primarily a horizontally scaled",
    "start": "245670",
    "end": "247680"
  },
  {
    "text": "environment so you have up to 15 shots a",
    "start": "247680",
    "end": "250830"
  },
  {
    "text": "shot is made up of a primary and zero to",
    "start": "250830",
    "end": "253650"
  },
  {
    "text": "Phi replicas and each one of these shots",
    "start": "253650",
    "end": "256669"
  },
  {
    "text": "essentially won't a portion of that key",
    "start": "256669",
    "end": "259350"
  },
  {
    "text": "space so it's a hash slot range and a",
    "start": "259350",
    "end": "262229"
  },
  {
    "text": "default distribution would be to divide",
    "start": "262229",
    "end": "264300"
  },
  {
    "text": "the hash slots across the number of",
    "start": "264300",
    "end": "266310"
  },
  {
    "text": "shots that you have",
    "start": "266310",
    "end": "267630"
  },
  {
    "text": "so that mostly is the difference between",
    "start": "267630",
    "end": "269370"
  },
  {
    "text": "crustal mode enabled and disabled now",
    "start": "269370",
    "end": "273330"
  },
  {
    "start": "273000",
    "end": "385000"
  },
  {
    "text": "there are other differences so let us",
    "start": "273330",
    "end": "275820"
  },
  {
    "text": "recap a few other things between",
    "start": "275820",
    "end": "277230"
  },
  {
    "text": "clustered mode enabled and disabled if a",
    "start": "277230",
    "end": "280530"
  },
  {
    "text": "failover standpoint because there is no",
    "start": "280530",
    "end": "283410"
  },
  {
    "text": "DNS involved custom mode enabled is much",
    "start": "283410",
    "end": "286710"
  },
  {
    "text": "faster so if you care about failover",
    "start": "286710",
    "end": "289230"
  },
  {
    "text": "speeds then custom mode enabled makes a",
    "start": "289230",
    "end": "292020"
  },
  {
    "text": "lot of sense because a failover may take",
    "start": "292020",
    "end": "295290"
  },
  {
    "text": "somewhere in the neighborhood of 15 to",
    "start": "295290",
    "end": "297420"
  },
  {
    "text": "30 seconds and remember this is on an",
    "start": "297420",
    "end": "300090"
  },
  {
    "text": "individual shot so you imagine you have",
    "start": "300090",
    "end": "302760"
  },
  {
    "text": "three shots and you add a failure on one",
    "start": "302760",
    "end": "305760"
  },
  {
    "text": "of them only 33.3% of your data is",
    "start": "305760",
    "end": "309630"
  },
  {
    "text": "affected and if you wanted to reduce",
    "start": "309630",
    "end": "312330"
  },
  {
    "text": "that blast radius even further all you",
    "start": "312330",
    "end": "315210"
  },
  {
    "text": "would do is add additional shots the",
    "start": "315210",
    "end": "318600"
  },
  {
    "text": "other difference here is with respect to",
    "start": "318600",
    "end": "320700"
  },
  {
    "text": "performance because you have the ability",
    "start": "320700",
    "end": "323160"
  },
  {
    "text": "to have many shots you have the ability",
    "start": "323160",
    "end": "326130"
  },
  {
    "text": "to write too many primaries at the same",
    "start": "326130",
    "end": "328590"
  },
  {
    "text": "time because again a short conscious of",
    "start": "328590",
    "end": "331050"
  },
  {
    "text": "a primary and it associated replicas so",
    "start": "331050",
    "end": "333840"
  },
  {
    "text": "from a writing from a reading",
    "start": "333840",
    "end": "335880"
  },
  {
    "text": "perspective you have more nodes to",
    "start": "335880",
    "end": "338220"
  },
  {
    "text": "interact with so it is performance is",
    "start": "338220",
    "end": "340620"
  },
  {
    "text": "going to be far greater than cluster",
    "start": "340620",
    "end": "343500"
  },
  {
    "text": "mode disabled the other noticeable",
    "start": "343500",
    "end": "346290"
  },
  {
    "text": "difference here would also be storage",
    "start": "346290",
    "end": "349110"
  },
  {
    "text": "because you have more nodes and your",
    "start": "349110",
    "end": "351960"
  },
  {
    "text": "data is spread across many primaries you",
    "start": "351960",
    "end": "355320"
  },
  {
    "text": "can have 6 plus terabytes worth of data",
    "start": "355320",
    "end": "357450"
  },
  {
    "text": "and cluster mode enable topology the one",
    "start": "357450",
    "end": "361080"
  },
  {
    "text": "trade-off here is cost running cluster",
    "start": "361080",
    "end": "364440"
  },
  {
    "text": "mode enabled may be more expensive",
    "start": "364440",
    "end": "366170"
  },
  {
    "text": "because you have more nodes however you",
    "start": "366170",
    "end": "370020"
  },
  {
    "text": "are architecting using cluster mode",
    "start": "370020",
    "end": "372210"
  },
  {
    "text": "enabled you are selecting smaller size",
    "start": "372210",
    "end": "374790"
  },
  {
    "text": "nodes versus you know a larger node but",
    "start": "374790",
    "end": "378330"
  },
  {
    "text": "the cost is indeed more expensive with",
    "start": "378330",
    "end": "380100"
  },
  {
    "text": "cluster mode enabled so that would be",
    "start": "380100",
    "end": "382470"
  },
  {
    "text": "your trade off Amazon Elastic",
    "start": "382470",
    "end": "386670"
  },
  {
    "start": "385000",
    "end": "422000"
  },
  {
    "text": "cash-in-transit encryption is an",
    "start": "386670",
    "end": "388680"
  },
  {
    "text": "optional feature that allows you to",
    "start": "388680",
    "end": "390720"
  },
  {
    "text": "increase the security of your data at",
    "start": "390720",
    "end": "393450"
  },
  {
    "text": "its most vulnerable points when it's in",
    "start": "393450",
    "end": "396900"
  },
  {
    "text": "transit from one location to another",
    "start": "396900",
    "end": "399020"
  },
  {
    "text": "because there is some processing",
    "start": "399020",
    "end": "401520"
  },
  {
    "text": "to encrypt and decrypt the data at the",
    "start": "401520",
    "end": "404400"
  },
  {
    "text": "endpoints enabling any transit",
    "start": "404400",
    "end": "407039"
  },
  {
    "text": "encryption can have some performance",
    "start": "407039",
    "end": "409110"
  },
  {
    "text": "impact elasti cash-in-transit implements",
    "start": "409110",
    "end": "413099"
  },
  {
    "text": "the following features encrypted",
    "start": "413099",
    "end": "415470"
  },
  {
    "text": "connections encrypted replication server",
    "start": "415470",
    "end": "418319"
  },
  {
    "text": "authentication and client authentication",
    "start": "418319",
    "end": "421970"
  },
  {
    "text": "there are many usage patterns for Redis",
    "start": "421970",
    "end": "425210"
  },
  {
    "start": "422000",
    "end": "441000"
  },
  {
    "text": "session management and database caching",
    "start": "425210",
    "end": "428160"
  },
  {
    "text": "are common use cases but it will also",
    "start": "428160",
    "end": "430979"
  },
  {
    "text": "see read is used for pub/sub IOT and",
    "start": "430979",
    "end": "434069"
  },
  {
    "text": "leaderboards in the next few slides we",
    "start": "434069",
    "end": "437220"
  },
  {
    "text": "will see how our customers are using",
    "start": "437220",
    "end": "439349"
  },
  {
    "text": "Redis Amazon Elastic cache for Redis is",
    "start": "439349",
    "end": "443729"
  },
  {
    "start": "441000",
    "end": "475000"
  },
  {
    "text": "an excellent choice for implementing a",
    "start": "443729",
    "end": "446009"
  },
  {
    "text": "highly available distributed and secure",
    "start": "446009",
    "end": "449250"
  },
  {
    "text": "in memory cache to decrease access",
    "start": "449250",
    "end": "452130"
  },
  {
    "text": "latency increased throughput and ease",
    "start": "452130",
    "end": "455039"
  },
  {
    "text": "the load of your relational or no sequel",
    "start": "455039",
    "end": "458250"
  },
  {
    "text": "databases and applications elastic cache",
    "start": "458250",
    "end": "461610"
  },
  {
    "text": "can serve frequently requested items at",
    "start": "461610",
    "end": "464580"
  },
  {
    "text": "sub millisecond response times and",
    "start": "464580",
    "end": "466620"
  },
  {
    "text": "enables you to quickly scale for ir",
    "start": "466620",
    "end": "469830"
  },
  {
    "text": "workloads without growing the costlier",
    "start": "469830",
    "end": "472590"
  },
  {
    "text": "back-end databases when you catch no",
    "start": "472590",
    "end": "476610"
  },
  {
    "start": "475000",
    "end": "493000"
  },
  {
    "text": "sequel stores you can lower your cost",
    "start": "476610",
    "end": "479039"
  },
  {
    "text": "and get a better performance for",
    "start": "479039",
    "end": "481409"
  },
  {
    "text": "retrieval of data Redis can act as a",
    "start": "481409",
    "end": "484590"
  },
  {
    "text": "cage for many no sequel stores including",
    "start": "484590",
    "end": "487500"
  },
  {
    "text": "elastic search Cassandra MongoDB etc use",
    "start": "487500",
    "end": "493800"
  },
  {
    "start": "493000",
    "end": "579000"
  },
  {
    "text": "Amazon ElastiCache for Redis with",
    "start": "493800",
    "end": "496349"
  },
  {
    "text": "streaming solutions such as Apache Kafka",
    "start": "496349",
    "end": "498840"
  },
  {
    "text": "and Amazon Kinesis as an in-memory data",
    "start": "498840",
    "end": "502110"
  },
  {
    "text": "store to ingest process and analyze",
    "start": "502110",
    "end": "505130"
  },
  {
    "text": "real-time data with sub millisecond",
    "start": "505130",
    "end": "507930"
  },
  {
    "text": "latency you will continue to build your",
    "start": "507930",
    "end": "511080"
  },
  {
    "text": "data platform on s3 but there may be",
    "start": "511080",
    "end": "514020"
  },
  {
    "text": "requirements for transient information",
    "start": "514020",
    "end": "516390"
  },
  {
    "text": "to be stored in a fast data layer and",
    "start": "516390",
    "end": "519360"
  },
  {
    "text": "that is where Redis shines elastic cache",
    "start": "519360",
    "end": "523140"
  },
  {
    "text": "is an ideal choice for real-time",
    "start": "523140",
    "end": "525390"
  },
  {
    "text": "analytics use cases such as social media",
    "start": "525390",
    "end": "528149"
  },
  {
    "text": "ad targeting personalization IOT and",
    "start": "528149",
    "end": "532440"
  },
  {
    "text": "time series data analytics",
    "start": "532440",
    "end": "535310"
  },
  {
    "text": "we have organizations who are building a",
    "start": "535310",
    "end": "538320"
  },
  {
    "text": "solution where they want certain",
    "start": "538320",
    "end": "540180"
  },
  {
    "text": "organizations to purchase maybe",
    "start": "540180",
    "end": "542340"
  },
  {
    "text": "different packages of how many times you",
    "start": "542340",
    "end": "545400"
  },
  {
    "text": "can call a specific API this is bundled",
    "start": "545400",
    "end": "548910"
  },
  {
    "text": "in a package type of deal and in what",
    "start": "548910",
    "end": "551310"
  },
  {
    "text": "they will do is in their API that the",
    "start": "551310",
    "end": "554220"
  },
  {
    "text": "end user will consume they will make a",
    "start": "554220",
    "end": "556620"
  },
  {
    "text": "call out to Redis to check if a",
    "start": "556620",
    "end": "559350"
  },
  {
    "text": "particular counter has reached a",
    "start": "559350",
    "end": "562110"
  },
  {
    "text": "threshold and start throttling the",
    "start": "562110",
    "end": "564480"
  },
  {
    "text": "consumer here they use Redis for speed",
    "start": "564480",
    "end": "568740"
  },
  {
    "text": "and they also use Redis here because you",
    "start": "568740",
    "end": "571560"
  },
  {
    "text": "don't pay for all those requests so it",
    "start": "571560",
    "end": "574320"
  },
  {
    "text": "makes a lot of sense to do something",
    "start": "574320",
    "end": "576060"
  },
  {
    "text": "like this using Redis to demonstrate",
    "start": "576060",
    "end": "579990"
  },
  {
    "text": "some benefits of Redis we will build a",
    "start": "579990",
    "end": "582510"
  },
  {
    "text": "sample sales analytics dashboard using",
    "start": "582510",
    "end": "585480"
  },
  {
    "text": "Amazon Elastic cash as well as several",
    "start": "585480",
    "end": "588360"
  },
  {
    "text": "other AWS services we are creating this",
    "start": "588360",
    "end": "591720"
  },
  {
    "text": "leaderboard for a ecommerce website this",
    "start": "591720",
    "end": "595470"
  },
  {
    "text": "website is using databases heavily and",
    "start": "595470",
    "end": "598590"
  },
  {
    "text": "they don't want to load any new",
    "start": "598590",
    "end": "601080"
  },
  {
    "text": "application on the database the",
    "start": "601080",
    "end": "605190"
  },
  {
    "text": "e-commerce website is a high-volume",
    "start": "605190",
    "end": "607500"
  },
  {
    "text": "website and the business needs real-time",
    "start": "607500",
    "end": "610110"
  },
  {
    "text": "sales analytics for the current R and de",
    "start": "610110",
    "end": "612600"
  },
  {
    "text": "the business is latency sensitive and",
    "start": "612600",
    "end": "615780"
  },
  {
    "text": "wants the dashboards to display the",
    "start": "615780",
    "end": "618150"
  },
  {
    "text": "leaderboards in real time the metrics",
    "start": "618150",
    "end": "622620"
  },
  {
    "text": "the business users are interested in our",
    "start": "622620",
    "end": "625110"
  },
  {
    "text": "daily order count unique items sold",
    "start": "625110",
    "end": "627930"
  },
  {
    "text": "product leader words etc a sample",
    "start": "627930",
    "end": "633210"
  },
  {
    "start": "632000",
    "end": "653000"
  },
  {
    "text": "dashboard is shown here the data in this",
    "start": "633210",
    "end": "636240"
  },
  {
    "text": "dashboard is populated from Redis the",
    "start": "636240",
    "end": "638760"
  },
  {
    "text": "data shown here is exactly how we store",
    "start": "638760",
    "end": "642300"
  },
  {
    "text": "this data in Redis so there is no",
    "start": "642300",
    "end": "644550"
  },
  {
    "text": "additional computation to show this data",
    "start": "644550",
    "end": "647090"
  },
  {
    "text": "we will see what types we use to store",
    "start": "647090",
    "end": "650280"
  },
  {
    "text": "this data in the demo many stores can",
    "start": "650280",
    "end": "654510"
  },
  {
    "start": "653000",
    "end": "673000"
  },
  {
    "text": "achieve this but we chose Redis mainly",
    "start": "654510",
    "end": "657480"
  },
  {
    "text": "for the millisecond latency for the",
    "start": "657480",
    "end": "659250"
  },
  {
    "text": "leaderboard Genesis analytics does not",
    "start": "659250",
    "end": "662100"
  },
  {
    "text": "store the data and also the queries",
    "start": "662100",
    "end": "664260"
  },
  {
    "text": "become quite complex on the other hand",
    "start": "664260",
    "end": "667040"
  },
  {
    "text": "elastic search would be",
    "start": "667040",
    "end": "668819"
  },
  {
    "text": "computationally intensive to perform",
    "start": "668819",
    "end": "671009"
  },
  {
    "text": "complex queries the order system writes",
    "start": "671009",
    "end": "674819"
  },
  {
    "start": "673000",
    "end": "696000"
  },
  {
    "text": "orders that are generated into a Kinesis",
    "start": "674819",
    "end": "677609"
  },
  {
    "text": "stream Kenneth streams provide a",
    "start": "677609",
    "end": "680009"
  },
  {
    "text": "scalable way to process near real-time",
    "start": "680009",
    "end": "682979"
  },
  {
    "text": "data lambda functions can consume this",
    "start": "682979",
    "end": "686429"
  },
  {
    "text": "data in batches and process them in our",
    "start": "686429",
    "end": "689819"
  },
  {
    "text": "case we use the lambda functions to",
    "start": "689819",
    "end": "692220"
  },
  {
    "text": "update various Redis keys that will",
    "start": "692220",
    "end": "694679"
  },
  {
    "text": "generate the dashboard we use a darker",
    "start": "694679",
    "end": "697559"
  },
  {
    "start": "696000",
    "end": "721000"
  },
  {
    "text": "eyes duplication running on AWS Fargate",
    "start": "697559",
    "end": "700289"
  },
  {
    "text": "which would serve the dashboard this",
    "start": "700289",
    "end": "702869"
  },
  {
    "text": "application connects to Redis cluster",
    "start": "702869",
    "end": "704519"
  },
  {
    "text": "and reads the data and displays a",
    "start": "704519",
    "end": "707459"
  },
  {
    "text": "dashboard the website uses a socket",
    "start": "707459",
    "end": "710369"
  },
  {
    "text": "connection to the darker application and",
    "start": "710369",
    "end": "712769"
  },
  {
    "text": "provides updates in real-time to the",
    "start": "712769",
    "end": "715410"
  },
  {
    "text": "dashboard let us look at this demo to",
    "start": "715410",
    "end": "718439"
  },
  {
    "text": "see what is powering this dashboard let",
    "start": "718439",
    "end": "721829"
  },
  {
    "start": "721000",
    "end": "734000"
  },
  {
    "text": "us login to the Redis cluster this",
    "start": "721829",
    "end": "724229"
  },
  {
    "text": "cluster is running in u.s. West Oregon",
    "start": "724229",
    "end": "726359"
  },
  {
    "text": "so let us go to the elastic cache",
    "start": "726359",
    "end": "728100"
  },
  {
    "text": "console to obtain the cluster endpoint",
    "start": "728100",
    "end": "730410"
  },
  {
    "text": "and the port on which the elastic cache",
    "start": "730410",
    "end": "732660"
  },
  {
    "text": "is running we will use the Redis CLI on",
    "start": "732660",
    "end": "736049"
  },
  {
    "start": "734000",
    "end": "751000"
  },
  {
    "text": "the terminal to connect to the cluster",
    "start": "736049",
    "end": "738449"
  },
  {
    "text": "using the cluster endpoint and port that",
    "start": "738449",
    "end": "740939"
  },
  {
    "text": "we obtain from the console we can have a",
    "start": "740939",
    "end": "744389"
  },
  {
    "text": "look at all the keys that are stored in",
    "start": "744389",
    "end": "746279"
  },
  {
    "text": "this Redis cluster by typing the",
    "start": "746279",
    "end": "748109"
  },
  {
    "text": "commands keys star to get the list of",
    "start": "748109",
    "end": "751470"
  },
  {
    "start": "751000",
    "end": "764000"
  },
  {
    "text": "keys if you notice we have a key per day",
    "start": "751470",
    "end": "755100"
  },
  {
    "text": "and also key for popular order items",
    "start": "755100",
    "end": "758600"
  },
  {
    "text": "these values directly power the",
    "start": "758600",
    "end": "761970"
  },
  {
    "text": "dashboard let us now look at the",
    "start": "761970",
    "end": "765419"
  },
  {
    "start": "764000",
    "end": "828000"
  },
  {
    "text": "dashboard and see what data is getting",
    "start": "765419",
    "end": "767819"
  },
  {
    "text": "populated on the dashboard if you look",
    "start": "767819",
    "end": "772499"
  },
  {
    "text": "at it on the right-hand side you would",
    "start": "772499",
    "end": "774989"
  },
  {
    "text": "see a connected not connected button",
    "start": "774989",
    "end": "778499"
  },
  {
    "text": "which basically means is my dashboard",
    "start": "778499",
    "end": "781129"
  },
  {
    "text": "connected to the application to receive",
    "start": "781129",
    "end": "784589"
  },
  {
    "text": "data from the application via sockets",
    "start": "784589",
    "end": "787439"
  },
  {
    "text": "now that it is connected we can look at",
    "start": "787439",
    "end": "790919"
  },
  {
    "text": "the data and see that each of those",
    "start": "790919",
    "end": "794059"
  },
  {
    "text": "corresponding boxes on the dashboard",
    "start": "794059",
    "end": "797779"
  },
  {
    "text": "corresponds to exactly the Redis keys",
    "start": "797779",
    "end": "800939"
  },
  {
    "text": "that we saw",
    "start": "800939",
    "end": "802830"
  },
  {
    "text": "example the all-time most popular is the",
    "start": "802830",
    "end": "806280"
  },
  {
    "text": "sorted set in Redis which allows us to",
    "start": "806280",
    "end": "809400"
  },
  {
    "text": "score each member in the set and",
    "start": "809400",
    "end": "811740"
  },
  {
    "text": "retrieve the data in a sorted order you",
    "start": "811740",
    "end": "815070"
  },
  {
    "text": "can look at the type of a particular",
    "start": "815070",
    "end": "818270"
  },
  {
    "text": "Redis key by typing the command Redis",
    "start": "818270",
    "end": "821550"
  },
  {
    "text": "and key we will now go back to the",
    "start": "821550",
    "end": "826020"
  },
  {
    "text": "command line and open up our lambda",
    "start": "826020",
    "end": "828600"
  },
  {
    "start": "828000",
    "end": "843000"
  },
  {
    "text": "function to see what happens inside the",
    "start": "828600",
    "end": "831720"
  },
  {
    "text": "lambda function the lambda function will",
    "start": "831720",
    "end": "834980"
  },
  {
    "text": "consume records Jenna generated on a",
    "start": "834980",
    "end": "837960"
  },
  {
    "text": "Kinesis stream and they update the",
    "start": "837960",
    "end": "841340"
  },
  {
    "text": "greatest keys in real time so orders",
    "start": "841340",
    "end": "847620"
  },
  {
    "text": "would be generated and be pushed into",
    "start": "847620",
    "end": "850290"
  },
  {
    "text": "the Kenna stream and then once the data",
    "start": "850290",
    "end": "852540"
  },
  {
    "text": "is in the Kinesis stream the data would",
    "start": "852540",
    "end": "854880"
  },
  {
    "text": "be picked up by the lambda function",
    "start": "854880",
    "end": "856530"
  },
  {
    "text": "would be processed and greatest api's",
    "start": "856530",
    "end": "859950"
  },
  {
    "text": "will be called to update the sets one of",
    "start": "859950",
    "end": "863640"
  },
  {
    "text": "the Redis API is that we call is",
    "start": "863640",
    "end": "865310"
  },
  {
    "text": "updating the z set the sorted set which",
    "start": "865310",
    "end": "868590"
  },
  {
    "text": "I am highlighting here now let us go",
    "start": "868590",
    "end": "871680"
  },
  {
    "text": "back to the dashboard to see how these",
    "start": "871680",
    "end": "873480"
  },
  {
    "text": "records have changed the dashboard you",
    "start": "873480",
    "end": "876030"
  },
  {
    "text": "notice that we are constantly having a",
    "start": "876030",
    "end": "878820"
  },
  {
    "text": "flow of data coming in and the data is",
    "start": "878820",
    "end": "881190"
  },
  {
    "text": "constantly getting updated on the",
    "start": "881190",
    "end": "883380"
  },
  {
    "text": "dashboard in this demo you saw how Redis",
    "start": "883380",
    "end": "886920"
  },
  {
    "text": "could be used to power a real-time",
    "start": "886920",
    "end": "888930"
  },
  {
    "text": "dashboard so if you want to take a",
    "start": "888930",
    "end": "892110"
  },
  {
    "start": "890000",
    "end": "916000"
  },
  {
    "text": "second to think about your data from a",
    "start": "892110",
    "end": "894390"
  },
  {
    "text": "temperature god the hot data would be",
    "start": "894390",
    "end": "897000"
  },
  {
    "text": "that data that you access most",
    "start": "897000",
    "end": "898890"
  },
  {
    "text": "frequently and if you thought about the",
    "start": "898890",
    "end": "901890"
  },
  {
    "text": "characteristics of the odd data what you",
    "start": "901890",
    "end": "904500"
  },
  {
    "text": "would want it to be is the ability to",
    "start": "904500",
    "end": "906660"
  },
  {
    "text": "support incredibly high request rates",
    "start": "906660",
    "end": "909660"
  },
  {
    "text": "very very low latency and that's",
    "start": "909660",
    "end": "912300"
  },
  {
    "text": "basically where Amazon ElastiCache fits",
    "start": "912300",
    "end": "914730"
  },
  {
    "text": "and as data volume grows and sort of the",
    "start": "914730",
    "end": "917910"
  },
  {
    "text": "data starts getting warmer and colder",
    "start": "917910",
    "end": "920130"
  },
  {
    "text": "you will see other data stores kind of",
    "start": "920130",
    "end": "922890"
  },
  {
    "text": "fit in if you are building a data",
    "start": "922890",
    "end": "925320"
  },
  {
    "text": "platform essentially what you want to do",
    "start": "925320",
    "end": "928500"
  },
  {
    "text": "is you want to think about your data",
    "start": "928500",
    "end": "930750"
  },
  {
    "text": "access patterns and you want to utilize",
    "start": "930750",
    "end": "933390"
  },
  {
    "text": "the different data stores and data bases",
    "start": "933390",
    "end": "936420"
  },
  {
    "text": "that make sense for that specific data",
    "start": "936420",
    "end": "938880"
  },
  {
    "text": "volume and access patterns some caching",
    "start": "938880",
    "end": "943980"
  },
  {
    "start": "943000",
    "end": "1040000"
  },
  {
    "text": "tips the first step understand the",
    "start": "943980",
    "end": "947130"
  },
  {
    "text": "frequency of change of the underlying",
    "start": "947130",
    "end": "949080"
  },
  {
    "text": "data and what is the impact of providing",
    "start": "949080",
    "end": "951980"
  },
  {
    "text": "stale data if the impact is high then be",
    "start": "951980",
    "end": "956430"
  },
  {
    "text": "conservative if there is a minimal",
    "start": "956430",
    "end": "958830"
  },
  {
    "text": "impact use your best judgment here and",
    "start": "958830",
    "end": "961590"
  },
  {
    "text": "work with your database administrators",
    "start": "961590",
    "end": "964230"
  },
  {
    "text": "and your business owners to understand",
    "start": "964230",
    "end": "967080"
  },
  {
    "text": "what value makes sense second tip set",
    "start": "967080",
    "end": "972510"
  },
  {
    "text": "the appropriate details that match the",
    "start": "972510",
    "end": "974970"
  },
  {
    "text": "frequency of data change third tip",
    "start": "974970",
    "end": "978960"
  },
  {
    "text": "choose the proper eviction policies that",
    "start": "978960",
    "end": "982350"
  },
  {
    "text": "align with the application requirements",
    "start": "982350",
    "end": "986030"
  },
  {
    "text": "fourth tip isolate for the purpose like",
    "start": "986030",
    "end": "989970"
  },
  {
    "text": "database cache and QK don't have them in",
    "start": "989970",
    "end": "993330"
  },
  {
    "text": "a single cluster fifth step main cache",
    "start": "993330",
    "end": "998370"
  },
  {
    "text": "freshness by doing right through this",
    "start": "998370",
    "end": "1001880"
  },
  {
    "text": "will also ensure you don't serve stale",
    "start": "1001880",
    "end": "1005090"
  },
  {
    "text": "data to your users sixth tip test test",
    "start": "1005090",
    "end": "1011180"
  },
  {
    "text": "test it is critical you performance test",
    "start": "1011180",
    "end": "1014810"
  },
  {
    "text": "and size your clusters appropriately",
    "start": "1014810",
    "end": "1018520"
  },
  {
    "text": "seventh step create alarms so that you",
    "start": "1018520",
    "end": "1022190"
  },
  {
    "text": "are notified of bad performance cache",
    "start": "1022190",
    "end": "1025069"
  },
  {
    "text": "hits and misses eighth tip work backward",
    "start": "1025070",
    "end": "1030620"
  },
  {
    "text": "from failure always test the resiliency",
    "start": "1030620",
    "end": "1033439"
  },
  {
    "text": "of the application using the failover",
    "start": "1033440",
    "end": "1035660"
  },
  {
    "text": "API is provided by ElastiCache to gain",
    "start": "1035660",
    "end": "1039890"
  },
  {
    "text": "hands-on experience with AWS please",
    "start": "1039890",
    "end": "1042680"
  },
  {
    "start": "1040000",
    "end": "1070000"
  },
  {
    "text": "please watch our extraction Alvira",
    "start": "1042680",
    "end": "1045939"
  },
  {
    "text": "self-paced labs you can also attend our",
    "start": "1045940",
    "end": "1049370"
  },
  {
    "text": "instructor-led classes and learn how to",
    "start": "1049370",
    "end": "1052010"
  },
  {
    "text": "design deploy and operate highly",
    "start": "1052010",
    "end": "1055610"
  },
  {
    "text": "available cost-effective and secure",
    "start": "1055610",
    "end": "1058610"
  },
  {
    "text": "applications on AWS you can get more",
    "start": "1058610",
    "end": "1062000"
  },
  {
    "text": "info by visiting the URL HTTP",
    "start": "1062000",
    "end": "1065570"
  },
  {
    "text": "aws.amazon.com slash training",
    "start": "1065570",
    "end": "1069890"
  },
  {
    "text": "AWS also has a wide partner ecosystem to",
    "start": "1069890",
    "end": "1073309"
  },
  {
    "start": "1070000",
    "end": "1091000"
  },
  {
    "text": "help you focus on your success and take",
    "start": "1073309",
    "end": "1076100"
  },
  {
    "text": "the full advantage of all the business",
    "start": "1076100",
    "end": "1078230"
  },
  {
    "text": "benefits that AWS has to offer learn",
    "start": "1078230",
    "end": "1080990"
  },
  {
    "text": "more about how APN partners can help you",
    "start": "1080990",
    "end": "1083650"
  },
  {
    "text": "find the right APN partners for your",
    "start": "1083650",
    "end": "1086330"
  },
  {
    "text": "needs by visiting the AWS AP & booth at",
    "start": "1086330",
    "end": "1089540"
  },
  {
    "text": "our showcase thank you for attending the",
    "start": "1089540",
    "end": "1092660"
  },
  {
    "start": "1091000",
    "end": "1104000"
  },
  {
    "text": "session we hope you found it interesting",
    "start": "1092660",
    "end": "1094780"
  },
  {
    "text": "do provide us with your feedback and let",
    "start": "1094780",
    "end": "1098030"
  },
  {
    "text": "us know how we can improve the event",
    "start": "1098030",
    "end": "1100250"
  },
  {
    "text": "experience for you in the future",
    "start": "1100250",
    "end": "1104350"
  }
]