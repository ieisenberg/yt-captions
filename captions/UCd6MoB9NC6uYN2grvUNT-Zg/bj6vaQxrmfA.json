[
  {
    "text": "hello everybody thanks for coming to this session on being more productive with the AWS SDK for Java my name is",
    "start": "3120",
    "end": "9080"
  },
  {
    "text": "Jason fulam I'm a Java developer with AWS developer resources I've been working with Amazon for about seven",
    "start": "9080",
    "end": "14839"
  },
  {
    "text": "years now and have been lucky enough to work with AWS for about the past four years building tools for Java developers",
    "start": "14839",
    "end": "21160"
  },
  {
    "text": "such as the AWS SDK for Java and the AWS toolkit for eclipse",
    "start": "21160",
    "end": "27880"
  },
  {
    "text": "uh we've only got one goal for the next hour that we have together so it should be pretty simple I'm going to show you",
    "start": "30560",
    "end": "35719"
  },
  {
    "text": "guys how to do more with the SDK and less time and with less code that you guys have to write test debug and",
    "start": "35719",
    "end": "42520"
  },
  {
    "text": "maintain I know that sounds like a tall order but we're going to be able to easily accomplish that by taking a tour",
    "start": "42520",
    "end": "47600"
  },
  {
    "text": "through some of the more advanced features in the",
    "start": "47600",
    "end": "51160"
  },
  {
    "text": "SDK for the purpose of this talk we're going to kind of split the SDK into two layers and we're starting at this bottom",
    "start": "53359",
    "end": "60519"
  },
  {
    "text": "layer of the SDK where we provide support for over two dozen different AWS",
    "start": "60519",
    "end": "65760"
  },
  {
    "text": "Services each one of those Services has a corresponding client class and that client provides a uh a direct mapping of",
    "start": "65760",
    "end": "72640"
  },
  {
    "text": "the services API uh it's essentially a Java binding for the services",
    "start": "72640",
    "end": "77920"
  },
  {
    "text": "API and uh because it's a one toone mapping anything that the service provides any functionality any feature",
    "start": "77920",
    "end": "84360"
  },
  {
    "text": "is really easy to exercise through these clients and of course Beyond just the",
    "start": "84360",
    "end": "89479"
  },
  {
    "text": "binding of the services API these clients also provide a lot of best practices that we've learned over the years so things like uh secure request",
    "start": "89479",
    "end": "96920"
  },
  {
    "text": "authentication for the various AWS signing protocols uh super fast and efficient uh",
    "start": "96920",
    "end": "102680"
  },
  {
    "text": "response and request processing is one of the things that we're always uh keeping an eye on and also things like",
    "start": "102680",
    "end": "108320"
  },
  {
    "text": "response handling uh error responses throttling making sure we're retrying those and uh backing off appropriately",
    "start": "108320",
    "end": "114840"
  },
  {
    "text": "between RS but where we're really going to be spending our time in this session is on",
    "start": "114840",
    "end": "121560"
  },
  {
    "text": "the higher level of the SDK this upper level and all of this is built on top of the lower level clients that we just saw",
    "start": "121560",
    "end": "128440"
  },
  {
    "text": "so any of this is possible with a lower level clients but using these higher level apis is how you can really gain a",
    "start": "128440",
    "end": "134200"
  },
  {
    "text": "lot more productivity with the SDK the big difference between the low-level clients and these higher level",
    "start": "134200",
    "end": "140440"
  },
  {
    "text": "apis is that the lowlevel clients try to map the services API directly whereas",
    "start": "140440",
    "end": "146160"
  },
  {
    "text": "these higher level apis take come at the problem from a different direction and try to solve one really common uh",
    "start": "146160",
    "end": "152319"
  },
  {
    "text": "scenario that developers have to face when building an application on AWS and make it as simple as possible so",
    "start": "152319",
    "end": "158840"
  },
  {
    "text": "unfortunately we don't have time to go through all the high level apis but we're going to give you a little tour and go through three or four of them",
    "start": "158840",
    "end": "165159"
  },
  {
    "text": "just to give you an idea of some of the things that's uh exposed through these higher level apis there's support for",
    "start": "165159",
    "end": "170959"
  },
  {
    "text": "working with S3 uh data uploading and downloading data we'll get to play with that today there's support for working",
    "start": "170959",
    "end": "177680"
  },
  {
    "text": "with data in Dynamo DB which we'll also get get to play with um there's some encryption tools that are really neat",
    "start": "177680",
    "end": "182920"
  },
  {
    "text": "that we'll get to see too and uh some of the stuff that we won't see is for example the policy API some of you might",
    "start": "182920",
    "end": "189560"
  },
  {
    "text": "have worked with policies already for uh bucket life cycles or for IM users and",
    "start": "189560",
    "end": "195000"
  },
  {
    "text": "if you have you probably know that it's kind of painful to work with these big long Blobs of Json and build those up manually so the policy API gives you a",
    "start": "195000",
    "end": "202720"
  },
  {
    "text": "programmatic way to build those up and it's just kind of a little more expressive than having those big blobs of text",
    "start": "202720",
    "end": "210519"
  },
  {
    "text": "uh the big thing really to take away from this slide though is that if you know what's in these high level apis and",
    "start": "210760",
    "end": "216640"
  },
  {
    "text": "you know how to leverage them then you can really be a lot more productive with the SDK it's going to save you a lot of time and a lot of code as",
    "start": "216640",
    "end": "225080"
  },
  {
    "text": "well so let's get started with the first higher level API that we're looking at today and this is Amazon S3 transfer",
    "start": "227080",
    "end": "234120"
  },
  {
    "text": "manager um have any of you already used transfer manager before heard of it awesome cool so we got lots of new",
    "start": "234120",
    "end": "240680"
  },
  {
    "text": "people to learn transfer manager uh transfer manager provides asynchronous management of your uploads and downloads",
    "start": "240680",
    "end": "247040"
  },
  {
    "text": "between your application and Amazon S3 and in addition to that kind of nice really easy to ous asynchronous",
    "start": "247040",
    "end": "253599"
  },
  {
    "text": "interface you also get these really nice management tools for checking the progress of your transfers being updated",
    "start": "253599",
    "end": "260040"
  },
  {
    "text": "as your transfer progresses along or changes state uh the ability to cancel transfers a lot of things that really",
    "start": "260040",
    "end": "265400"
  },
  {
    "text": "fit nicely into uh well- behaving applications",
    "start": "265400",
    "end": "270800"
  },
  {
    "text": "uh I wanted to start with transfer manager for a couple different reasons the first one is that this is one of the",
    "start": "272160",
    "end": "277280"
  },
  {
    "text": "apis that we just use a ton both inside of Amazon and inside of AWS developer resources um it's really easy to use the",
    "start": "277280",
    "end": "284919"
  },
  {
    "text": "asynchronous management uh the fact that you can start a transfer and it will run in a background pool of threads uh just",
    "start": "284919",
    "end": "291720"
  },
  {
    "text": "fits so nicely into so many different types of applications for example one of the big uis that we maintain on my team",
    "start": "291720",
    "end": "298360"
  },
  {
    "text": "is the AWS toolkit for E clips and uh all the work we do with S3 to transfer files to uh show progress dialogues",
    "start": "298360",
    "end": "305520"
  },
  {
    "text": "allow users to cancel the transfers um all of that comes directly from transfer manager and uh really makes it easy to",
    "start": "305520",
    "end": "312080"
  },
  {
    "text": "use in that context the second reason that I wanted to start with transfer manager is that",
    "start": "312080",
    "end": "318280"
  },
  {
    "text": "it's a good example of how these higher level apis really take a complex problem",
    "start": "318280",
    "end": "324240"
  },
  {
    "text": "and put a really simple interface on it so just moving bits between your application in S3 seems like something",
    "start": "324240",
    "end": "331160"
  },
  {
    "text": "that's pretty simple at first but the deeper you get into the problem the more you find that um there are some",
    "start": "331160",
    "end": "337039"
  },
  {
    "text": "interesting GES along the way and some error cases uh some error cases that maybe don't come up that often but are",
    "start": "337039",
    "end": "342919"
  },
  {
    "text": "really critical to be handled uh correctly if you want a well- behaving application um and even more importantly",
    "start": "342919",
    "end": "350280"
  },
  {
    "text": "there are some opportunities for optimizations one of those examples is",
    "start": "350280",
    "end": "355560"
  },
  {
    "text": "um the way that we can update or upload uh data to Amazon S3 there's a couple",
    "start": "355560",
    "end": "361960"
  },
  {
    "text": "different approaches in the S3 API for uploading the data one of them is the traditional Single part upload and this",
    "start": "361960",
    "end": "368720"
  },
  {
    "text": "newer one is multi-part upload some of you guys might have already heard of the multi-part upload process and Single",
    "start": "368720",
    "end": "374280"
  },
  {
    "text": "part uploads uh the mo both of those have really great advantages and they're more",
    "start": "374280",
    "end": "379720"
  },
  {
    "text": "appropriate for different scenarios for different types of uploads but it's a little tricky to know exactly when you",
    "start": "379720",
    "end": "385120"
  },
  {
    "text": "should be using which uh process and that's a great example of something that transer manager handles completely",
    "start": "385120",
    "end": "390919"
  },
  {
    "text": "seamlessly for you the interface to transfer manager is really as simple as upload and download and underneath that",
    "start": "390919",
    "end": "397960"
  },
  {
    "text": "you guys are getting all this great error handling you're getting uh this great um selection of the right",
    "start": "397960",
    "end": "403440"
  },
  {
    "text": "algorithm that's going to be best for the data you're uploading and um along with that you get some better error",
    "start": "403440",
    "end": "408639"
  },
  {
    "text": "handling and some of these uh throughput optimizations so whenever possible",
    "start": "408639",
    "end": "415360"
  },
  {
    "text": "transfer manager is going to break your upload up into individual parts and use the multi-part upload process when it",
    "start": "415360",
    "end": "421560"
  },
  {
    "text": "makes sense for your upload data and that has a couple of really nice effects the first one being is that we can",
    "start": "421560",
    "end": "428759"
  },
  {
    "text": "often transfer those multiple Parts in parallel to give your application better throughput and if you're uploading maybe",
    "start": "428759",
    "end": "435720"
  },
  {
    "text": "a 5 gigabyte file for example and you have a socket problem or an IO problem along the way you don't have to trash",
    "start": "435720",
    "end": "442039"
  },
  {
    "text": "all of the work that you've uploaded you get to just upload the um or retransmit that one individual part so again you're",
    "start": "442039",
    "end": "448440"
  },
  {
    "text": "going to get better error hand handling you're going to get better performance from using transfer manager uh so now that you guys know",
    "start": "448440",
    "end": "455199"
  },
  {
    "text": "what transfer manager is Let's uh jump over to eclipse and uh play with it a little",
    "start": "455199",
    "end": "460840"
  },
  {
    "text": "bit okay so over in Eclipse here we've got a really simple swing application",
    "start": "465720",
    "end": "471039"
  },
  {
    "text": "this is actually based on one of the samples that we ship with the SDK so if you guys think this is uh interesting",
    "start": "471039",
    "end": "476840"
  },
  {
    "text": "you want to know more about transfer manager you want to play with it more just download the STK zip check out the samples directory and you can find",
    "start": "476840",
    "end": "483199"
  },
  {
    "text": "pretty much this exact same code and um you can play with transfer manager some more and see some of these",
    "start": "483199",
    "end": "489319"
  },
  {
    "text": "features that we're playing with I'm going to go ahead and run this app just so that we can see what it does",
    "start": "489319",
    "end": "495479"
  },
  {
    "text": "and then we'll hop into the code and see how it does",
    "start": "495479",
    "end": "499280"
  },
  {
    "text": "it oops so we've got our little swing window here we've got a progress bar and we've got a button",
    "start": "503639",
    "end": "509960"
  },
  {
    "text": "the button hooked up to a file Chooser lets us pick a file and then as soon as we select this file transfer",
    "start": "509960",
    "end": "516760"
  },
  {
    "text": "manager is going to start uploading that to Amazon S3 now I've got some wire",
    "start": "516760",
    "end": "521919"
  },
  {
    "text": "logging turned on so you guys can see down in the console view that we're actually transferring data but you guys",
    "start": "521919",
    "end": "527279"
  },
  {
    "text": "probably noticed that this progress bar isn't filling up yet that's one of the tasks we're going to work on in just a couple minutes and see if we can hook",
    "start": "527279",
    "end": "532760"
  },
  {
    "text": "that up using the transfer manager apis",
    "start": "532760",
    "end": "537240"
  },
  {
    "text": "so down here in our code that's using transfer manager before we get to transfer manager I want to take a quick",
    "start": "546079",
    "end": "551600"
  },
  {
    "text": "sidet track and talk a little bit about uh credentials and credential management there are some nice tools in the SDK",
    "start": "551600",
    "end": "557680"
  },
  {
    "text": "that can make managing your credentials a little bit easier and more consistent among your uh different applications uh",
    "start": "557680",
    "end": "563200"
  },
  {
    "text": "and I want to make sure you guys have seen those and uh know some of their benefits so in this example you can see",
    "start": "563200",
    "end": "570000"
  },
  {
    "text": "we're using a class path properties file credentials provider um while that is a mouthful to say it's really very easy to",
    "start": "570000",
    "end": "576480"
  },
  {
    "text": "use and it means that a property file is going to be loaded from the class path with your",
    "start": "576480",
    "end": "581640"
  },
  {
    "text": "credentials so this is an example of a a very easy to use implementation of a",
    "start": "581640",
    "end": "586920"
  },
  {
    "text": "credentials provider it's already in the SDK for you use if you guys have a um",
    "start": "586920",
    "end": "592040"
  },
  {
    "text": "different stages for example maybe gamma beta prod stages for your applications you probably want to use different",
    "start": "592040",
    "end": "598000"
  },
  {
    "text": "credentials in those stages to keep your application and your data isolated uh this is would this would be really easy",
    "start": "598000",
    "end": "604200"
  },
  {
    "text": "to have your deployment process slide in different properties files on your application's class path uh to get that",
    "start": "604200",
    "end": "610440"
  },
  {
    "text": "nice separation and have your credentials just pulled in pretty easily but if you don't like this one",
    "start": "610440",
    "end": "616880"
  },
  {
    "text": "there's a number of different credentials providers uh so this is the main",
    "start": "616880",
    "end": "622880"
  },
  {
    "text": "interface adabs credentials provider and you can see in typ Hier Key View these",
    "start": "622880",
    "end": "628519"
  },
  {
    "text": "are all the different implementations that are provided by the SDK we already saw class paath properties file",
    "start": "628519",
    "end": "634480"
  },
  {
    "text": "credentials provider there are implementations to load credentials from the os's environment variables from the",
    "start": "634480",
    "end": "640839"
  },
  {
    "text": "jvm system properties and there's also this uh credentials provider chain which",
    "start": "640839",
    "end": "646480"
  },
  {
    "text": "is used by default in all the default Constructors for the uh SDK clients that we saw in the lower level it's going to",
    "start": "646480",
    "end": "652519"
  },
  {
    "text": "first attempt to look in some of these system properties environment variables and then the last step in the chain is",
    "start": "652519",
    "end": "658680"
  },
  {
    "text": "probably my favorite credentials provider this is one of the ones that we've recently added to the SDK that will load your credentials directly from",
    "start": "658680",
    "end": "665680"
  },
  {
    "text": "ec2 instance that you're running on so some of you might already know about these IM roles in ec2 where you can have",
    "start": "665680",
    "end": "672160"
  },
  {
    "text": "ec2 deliver your credentials securely to the instances that you're running on it's a really fantastic way to",
    "start": "672160",
    "end": "677959"
  },
  {
    "text": "distribute your credentials especially if you're running your application on ec2 instances um your credentials are",
    "start": "677959",
    "end": "684279"
  },
  {
    "text": "there are ready waiting for your application to pick them up all of the AWS sdks will load them seamlessly",
    "start": "684279",
    "end": "689839"
  },
  {
    "text": "without developers really having to do anything or think about credentials and of course if none of",
    "start": "689839",
    "end": "696200"
  },
  {
    "text": "these credential providers do the the right strategy that you guys are looking for uh it's very easy to implement this",
    "start": "696200",
    "end": "702320"
  },
  {
    "text": "interface yourself and in fact that's exactly what we do inside Amazon we have a standard implementation of credentials",
    "start": "702320",
    "end": "708720"
  },
  {
    "text": "provider uh it's been blessed by security it's uh consistent among all the applications that our developers use",
    "start": "708720",
    "end": "714600"
  },
  {
    "text": "internally and it means that developers don't ever have to worry about credentials it's all integrated with our",
    "start": "714600",
    "end": "720160"
  },
  {
    "text": "in-house Key Management Systems Security's happy because everyone's using the Blessed security version and",
    "start": "720160",
    "end": "725639"
  },
  {
    "text": "it's really just one less thing to worry about in the applications so now that we know how to",
    "start": "725639",
    "end": "732519"
  },
  {
    "text": "get our credentials uh in order to use transfer manager we just construct a new instance passing in those credentials",
    "start": "732519",
    "end": "739120"
  },
  {
    "text": "some of you can probably read this note uh it's important to realize that transfer manager manages this pool of",
    "start": "739120",
    "end": "744920"
  },
  {
    "text": "threads for you so you wouldn't want to create a new transfer manager instance for every upload you're going to do",
    "start": "744920",
    "end": "750320"
  },
  {
    "text": "because that's uh going to be spinning up these new thread Poes and probably a little wasteful for most applications you can simply share one instance of",
    "start": "750320",
    "end": "757160"
  },
  {
    "text": "transfer manager uh you could certainly use multiple we have some applications that partition resources a little bit",
    "start": "757160",
    "end": "762839"
  },
  {
    "text": "and use multiple instances of transfer manager uh but for the most part and in our app we're just going to use one",
    "start": "762839",
    "end": "769600"
  },
  {
    "text": "instance so we create our transfer manager object and then we reference it",
    "start": "769600",
    "end": "774639"
  },
  {
    "text": "down here in our button listener so in our button Handler you can see we are opening a file Chooser",
    "start": "774639",
    "end": "781000"
  },
  {
    "text": "letting the user pick a file and then we are just calling the upload operation we",
    "start": "781000",
    "end": "786040"
  },
  {
    "text": "create this put object request specify the S3 bucket where we want to upload our object to the key under which we",
    "start": "786040",
    "end": "792440"
  },
  {
    "text": "want to store it in S3 and the file we want to upload and uh then after that we just pass it to transfer manager um and",
    "start": "792440",
    "end": "799240"
  },
  {
    "text": "tell transfer manager to start uploading it now I mentioned before the",
    "start": "799240",
    "end": "804639"
  },
  {
    "text": "asynchronous nature of transfer manager and so that means that this upload oper operation is going to immediately return",
    "start": "804639",
    "end": "810920"
  },
  {
    "text": "us an upload object it's not going to sit there and block and wait for the upload to uh actually",
    "start": "810920",
    "end": "816839"
  },
  {
    "text": "transfer and uh we're not using this upload anywhere in our code right now but we're going to see uh we're going to",
    "start": "816839",
    "end": "822240"
  },
  {
    "text": "explore the API a little bit and see if we can hook up that progress bar using it so this instance right here of upload",
    "start": "822240",
    "end": "829959"
  },
  {
    "text": "is just an instance of the upload interface and you guys can see that",
    "start": "829959",
    "end": "836079"
  },
  {
    "text": "there's really not a whole lot in this interface so the vast majority of the functionality is all contained in the",
    "start": "836079",
    "end": "841800"
  },
  {
    "text": "transfer interface which gives you uh the ability to manage uploads and downloads in the same way which is nice",
    "start": "841800",
    "end": "848440"
  },
  {
    "text": "so let's hop over to transfer and see uh what we can do with uploads and",
    "start": "848440",
    "end": "853759"
  },
  {
    "text": "downloads so this is the transfer interface the very first thing we see is that we have some information about what",
    "start": "854199",
    "end": "861079"
  },
  {
    "text": "state the transfer is in there's a numeration for different states uh we can see if the transfer is waiting maybe",
    "start": "861079",
    "end": "866680"
  },
  {
    "text": "the thread pool that we're sharing is uh full of other resources other transfers already in progress so maybe the our",
    "start": "866680",
    "end": "872920"
  },
  {
    "text": "upload is waiting or it could be in progress completed canceled or",
    "start": "872920",
    "end": "878959"
  },
  {
    "text": "failed if our upload hasn't finished yet we can ask if it's done and uh if not we",
    "start": "878959",
    "end": "885360"
  },
  {
    "text": "can block if we want to and wait for its completion there's another method if we're just concerned with getting the",
    "start": "885360",
    "end": "891240"
  },
  {
    "text": "actual exception that happens we just want to block and wait for that that's available too and in some metadata and",
    "start": "891240",
    "end": "897399"
  },
  {
    "text": "description we talked about state but where I really want to show you guys and kind of play with in this demo is",
    "start": "897399",
    "end": "903360"
  },
  {
    "text": "these progress tools because I think this is uh certainly been really useful for us and I think can be useful in your",
    "start": "903360",
    "end": "908399"
  },
  {
    "text": "applications as well so these last three methods all deal with progress for",
    "start": "908399",
    "end": "913480"
  },
  {
    "text": "transfers and the first to Simply deal with adding and removing progress listeners and this progress listener",
    "start": "913480",
    "end": "919199"
  },
  {
    "text": "interface is again super simple it's just got one method for you to implement",
    "start": "919199",
    "end": "924680"
  },
  {
    "text": "and this is going to give you a really easy call back from the SDK or from transfer manag to let you know how your",
    "start": "924680",
    "end": "930199"
  },
  {
    "text": "transfer is uh moving along making different progress events so as your transfer progresses",
    "start": "930199",
    "end": "936759"
  },
  {
    "text": "along your call your implementation is going to get calls from transfer manager and you've got some uh the ability to",
    "start": "936759",
    "end": "943399"
  },
  {
    "text": "tell what's going on you can tell if your transfer is started if it's failed or started or excuse me even canceled",
    "start": "943399",
    "end": "949880"
  },
  {
    "text": "you also have some nice granularity into those multi-part uploads that we talked about so if you do want to see when",
    "start": "949880",
    "end": "954920"
  },
  {
    "text": "individual parts are making progress you can see that here as well um and one of the big pieces of information that you",
    "start": "954920",
    "end": "960920"
  },
  {
    "text": "get from progress event is how many bytes have been transferred and this is going to be essentially the Delta of",
    "start": "960920",
    "end": "966720"
  },
  {
    "text": "bytes that have transferred or how many bytes have been transferred since you were last notified about a progress",
    "start": "966720",
    "end": "972920"
  },
  {
    "text": "event so that was progress event we just saw and this progress listener interface",
    "start": "972920",
    "end": "978079"
  },
  {
    "text": "where we can register to receive these call backs as our transfers progress",
    "start": "978079",
    "end": "983680"
  },
  {
    "text": "alone so those are the first two methods we just saw this last method lets us",
    "start": "984639",
    "end": "989759"
  },
  {
    "text": "directly ask transfers for their progress and this transfer progress just tells us uh how many bytes have been",
    "start": "989759",
    "end": "996880"
  },
  {
    "text": "transferred so far and how many bytes are involved in this transfer total and then there's a nice little utility method down here to get a quick",
    "start": "996880",
    "end": "1005639"
  },
  {
    "text": "percentage so now that we've seen progress listener progress events and how we can ask uploads for their",
    "start": "1006240",
    "end": "1011639"
  },
  {
    "text": "progress let's go back to our demo code and see if we can hook up that progress bar",
    "start": "1011639",
    "end": "1018440"
  },
  {
    "text": "so we saw how we can add those progress listeners directly to the transfer objects and if we know we want that",
    "start": "1021800",
    "end": "1027720"
  },
  {
    "text": "ahead of time we can also pass those progress listeners in through this put object",
    "start": "1027720",
    "end": "1033120"
  },
  {
    "text": "request so we're just going to set a progress listener and I'm just going to create a new Anonymous uh intype for",
    "start": "1033120",
    "end": "1040319"
  },
  {
    "text": "Progress listener and then inside this progress",
    "start": "1040319",
    "end": "1046839"
  },
  {
    "text": "change method this is our hook into the progress changes of those transfers now all we really care to do",
    "start": "1046839",
    "end": "1054360"
  },
  {
    "text": "is update that uh the progress bar so we're just going to set the",
    "start": "1054360",
    "end": "1060080"
  },
  {
    "text": "value and we could grab this information from the progress event and keep track of it over time but it's really easy",
    "start": "1060080",
    "end": "1066520"
  },
  {
    "text": "just to ask the upload how far it is so we've got a reference to our",
    "start": "1066520",
    "end": "1071679"
  },
  {
    "text": "upload and we will just get the progress and get the percent",
    "start": "1071679",
    "end": "1077000"
  },
  {
    "text": "transferred and that's really all we have have to do to hook up that progress bar so we've added a progress listener",
    "start": "1077000",
    "end": "1082919"
  },
  {
    "text": "implementation that's going to get call backs as the progress moves along for the transfer and every time the transfer",
    "start": "1082919",
    "end": "1088480"
  },
  {
    "text": "progresses we're just going to update the progress bar with the progress so now that we've added that",
    "start": "1088480",
    "end": "1094960"
  },
  {
    "text": "let's run our code again and see how it",
    "start": "1094960",
    "end": "1098520"
  },
  {
    "text": "does we'll just select the same file that we were using before",
    "start": "1104000",
    "end": "1110200"
  },
  {
    "text": "we should still see our output going along in the console window and then as expected we also see our progress bar filling up",
    "start": "1110320",
    "end": "1116400"
  },
  {
    "text": "correctly so really with just a couple lines of code we're able to get that information from the progress get those",
    "start": "1116400",
    "end": "1121880"
  },
  {
    "text": "callbacks from transfer manager letting us know that the progress is moving along and uh report that through the",
    "start": "1121880",
    "end": "1129280"
  },
  {
    "text": "UI there are still a few more features in transfer manager that we're not going to play with today there are some more",
    "start": "1131039",
    "end": "1136840"
  },
  {
    "text": "advanced features around recursive file uploads and downloads between your application and S3 um I definitely",
    "start": "1136840",
    "end": "1143400"
  },
  {
    "text": "encourage you guys to play with transfer manager the UI or the interface is super easy to use it's essentially upload and",
    "start": "1143400",
    "end": "1150120"
  },
  {
    "text": "download and that's it um so definitely check out transfer manager it's one of our favorite apis and I hope you guys",
    "start": "1150120",
    "end": "1156240"
  },
  {
    "text": "enjoy playing with it too you said the cont how do you that oh yeah actually so",
    "start": "1156240",
    "end": "1161679"
  },
  {
    "text": "if we go down to this put object request if you've used the lower level S3 client",
    "start": "1161679",
    "end": "1166960"
  },
  {
    "text": "this is actually the same object from there so we can set",
    "start": "1166960",
    "end": "1172159"
  },
  {
    "text": "our um we can set the metadata the object metadata and that has all that information content type content",
    "start": "1172159",
    "end": "1178679"
  },
  {
    "text": "disposition um any custom user metadata that you guys want to store with the object you still have access to do all",
    "start": "1178679",
    "end": "1184400"
  },
  {
    "text": "that as",
    "start": "1184400",
    "end": "1186640"
  },
  {
    "text": "well okay so that was transfer manager our first API the next one that we're going to be",
    "start": "1191720",
    "end": "1197520"
  },
  {
    "text": "looking at is uh another S3 utility that we use really heavily as well uh the",
    "start": "1197520",
    "end": "1202640"
  },
  {
    "text": "Amazon S3 encryption client the Amazon S3 encryption client",
    "start": "1202640",
    "end": "1207799"
  },
  {
    "text": "is really an industrial strength client side encryption tool that has the",
    "start": "1207799",
    "end": "1212919"
  },
  {
    "text": "identical interface as the Amazon S3 client so to break that down um I call",
    "start": "1212919",
    "end": "1218200"
  },
  {
    "text": "this industrial strength because this is our standard solution for encrypting data that we store at Amazon if we're",
    "start": "1218200",
    "end": "1224200"
  },
  {
    "text": "dealing with sensitive data that needs to be encrypted and we're storing it in S3 and a Java applic this is exactly the",
    "start": "1224200",
    "end": "1229880"
  },
  {
    "text": "same code that we're using at Amazon and we pump tons of data through this client",
    "start": "1229880",
    "end": "1236520"
  },
  {
    "text": "um the uh the next point about this was this is a client side tool and that's really important to understand is that",
    "start": "1236520",
    "end": "1242520"
  },
  {
    "text": "all the encryption and decryption is happening on the fly on the client side so that gives you a really strong",
    "start": "1242520",
    "end": "1248640"
  },
  {
    "text": "security guarantee knowing that your unencrypted sensitive data is never leaving your",
    "start": "1248640",
    "end": "1254360"
  },
  {
    "text": "application and finally the last point about encryption uh the encryption client is that its interface is exactly",
    "start": "1254360",
    "end": "1260480"
  },
  {
    "text": "the same as the S3 client it really implements the same interface Amazon S3 if you know how to use the S3 client you",
    "start": "1260480",
    "end": "1267000"
  },
  {
    "text": "can use the encryption client already and uh just to demonstrate that a little bit more we've got a little",
    "start": "1267000",
    "end": "1273039"
  },
  {
    "text": "demo here where we are working just with the regular S3 client uh this again is based on one of",
    "start": "1273039",
    "end": "1279559"
  },
  {
    "text": "the samples from the SDK if you're curious about this open up the samples directory in the SDK and you can play",
    "start": "1279559",
    "end": "1284840"
  },
  {
    "text": "with this one some more all we're doing here is creating a bucket uploading some of our uh super",
    "start": "1284840",
    "end": "1291120"
  },
  {
    "text": "secret sensitive data from AWS and then uh downloading it again so this is",
    "start": "1291120",
    "end": "1297159"
  },
  {
    "text": "starting off just with the regular Amazon S3 client I'll go ahead and run this and uh we can check out the console",
    "start": "1297159",
    "end": "1302480"
  },
  {
    "text": "output again and uh we're getting this output on the console from uh Apache HTTP",
    "start": "1302480",
    "end": "1310480"
  },
  {
    "text": "client's wire logging which is extremely helpful if you do want to see more about the messages being passed between the",
    "start": "1310480",
    "end": "1317159"
  },
  {
    "text": "AWS SDK and AWS and see exactly the headers payloads that are being passed",
    "start": "1317159",
    "end": "1322559"
  },
  {
    "text": "along um if you're curious about it you want to know more or you're having some sort of problem you think your request",
    "start": "1322559",
    "end": "1327880"
  },
  {
    "text": "isn't being processed correctly turning on that logging is really easy with the SDK and it's a great tool to see exactly",
    "start": "1327880",
    "end": "1334039"
  },
  {
    "text": "uh what's happening the interaction so we've got all our payloads here we can see our super",
    "start": "1334039",
    "end": "1340400"
  },
  {
    "text": "secret sensitive AWS data here being sent across the wire now I don't want",
    "start": "1340400",
    "end": "1345640"
  },
  {
    "text": "any of you guys to think for a minute that we're just sending this in the clear this is all still going over an SSL connection so it's not like we're",
    "start": "1345640",
    "end": "1352400"
  },
  {
    "text": "just transmitting this data over um in clear text all the SDK is default to",
    "start": "1352400",
    "end": "1357919"
  },
  {
    "text": "sending everything over https um so you do have that level of security built in but I'm willing to bet that every single",
    "start": "1357919",
    "end": "1364600"
  },
  {
    "text": "one of you has some sort of data that you guys would feel more comfortable with or your customers would at least uh",
    "start": "1364600",
    "end": "1370120"
  },
  {
    "text": "if it were being handled with a stronger security guarantee guaranteeing that your unencrypted data is never even",
    "start": "1370120",
    "end": "1375279"
  },
  {
    "text": "leaving your application um there's certainly a whole number of things that could happen not the least of which is human error where",
    "start": "1375279",
    "end": "1382320"
  },
  {
    "text": "if maybe a team member messes up permissions and suddenly your data in S3 is World readable uh providing this",
    "start": "1382320",
    "end": "1388480"
  },
  {
    "text": "extra layer of transformation is a great way to mitigate those risks so that was the S3 client let's",
    "start": "1388480",
    "end": "1394960"
  },
  {
    "text": "take a look at how we change this to the encryption client and really all I'm going to do is change this",
    "start": "1394960",
    "end": "1401640"
  },
  {
    "text": "Constructor so the first thing I have to do is of course make it use the S3 encryption client we're still going to",
    "start": "1402880",
    "end": "1408279"
  },
  {
    "text": "pass pass in our credentials but we do have to pass in one more piece of",
    "start": "1408279",
    "end": "1413158"
  },
  {
    "text": "information and this is just the encryption materials that are driving the encryption process I'm going to get into a lot more detail on how these uh",
    "start": "1416640",
    "end": "1423400"
  },
  {
    "text": "encryption materials are used but for now you can just know that this is an asymmetric key pair that is driving the",
    "start": "1423400",
    "end": "1429120"
  },
  {
    "text": "encryption process so we've just changed this one",
    "start": "1429120",
    "end": "1435720"
  },
  {
    "text": "Constructor I'll run uh the code again and we can see how the output",
    "start": "1435720",
    "end": "1440960"
  },
  {
    "text": "changes and uh so before where we directly saw our Amazon AWS information now we can see that it's all being",
    "start": "1444679",
    "end": "1451400"
  },
  {
    "text": "encrypted and uh the great thing about this is that it's really the exact same thing as the S3 client API your",
    "start": "1451400",
    "end": "1457600"
  },
  {
    "text": "application never even needs to know that it's working with the encryption client it just uses that interface and all this encryption and decryption",
    "start": "1457600",
    "end": "1463960"
  },
  {
    "text": "happens on the Fly automatically",
    "start": "1463960",
    "end": "1467919"
  },
  {
    "text": "so now let's talk a little bit more about how the encryption client Works where those encryption materials come from and uh the process that's going on",
    "start": "1470840",
    "end": "1477919"
  },
  {
    "text": "beneath the APA but before we can talk too much",
    "start": "1477919",
    "end": "1483799"
  },
  {
    "text": "about it I just want to take 30 seconds to review asymmetric encryption and symmetric encryption in case you guys",
    "start": "1483799",
    "end": "1489279"
  },
  {
    "text": "haven't uh touched that for a while symmetric key encryption of course uh you have one symmetric key use it to",
    "start": "1489279",
    "end": "1495919"
  },
  {
    "text": "encrypt your data and then going the other way use it to decrypt your data so that's kind of the symmetric nature of",
    "start": "1495919",
    "end": "1501840"
  },
  {
    "text": "it asymmetric key encryption of course has two parts your public key and your private key you use one to encrypt and",
    "start": "1501840",
    "end": "1508200"
  },
  {
    "text": "then you have to have the other part to decrypt and uh we're using a pretty common cryptography approach here called",
    "start": "1508200",
    "end": "1514559"
  },
  {
    "text": "envelope encryption where we're going to combine symmetric key encryption and asymmetric key encryption to kind of get",
    "start": "1514559",
    "end": "1520240"
  },
  {
    "text": "the best of both worlds symmetri key encryption has these really great properties where it's going to be really",
    "start": "1520240",
    "end": "1525760"
  },
  {
    "text": "fast and we really want that because we're uploading lots of data to S3 we can't buffer all that in memory and uh",
    "start": "1525760",
    "end": "1532520"
  },
  {
    "text": "do the encryption in memory we've got to do it all on the fly so that's why we like um the symmetric encryption for",
    "start": "1532520",
    "end": "1538559"
  },
  {
    "text": "that and asymmetric encryption just has some really nice properties around uh splitting up those that key pair into",
    "start": "1538559",
    "end": "1544640"
  },
  {
    "text": "two parts so that you can give one person the ability to encrypt but not decrypt and vice",
    "start": "1544640",
    "end": "1551520"
  },
  {
    "text": "versa so inside your application you've really got two things that you're responsible for uh it's of course your",
    "start": "1554200",
    "end": "1560559"
  },
  {
    "text": "unencrypted sensitive data that you want to protect and the master key that you're using to drive this encryption",
    "start": "1560559",
    "end": "1568279"
  },
  {
    "text": "process and like I said before this master key is your encryption materials it's typically an asymmetric key",
    "start": "1568279",
    "end": "1574080"
  },
  {
    "text": "although there are options to use other um types of keys in the SDK but we're not actually going to use",
    "start": "1574080",
    "end": "1580520"
  },
  {
    "text": "that key to encrypt our data as you're going to see in a minute what we're going to do instead is for every upload",
    "start": "1580520",
    "end": "1586559"
  },
  {
    "text": "that you're using uh the sryt client for every object you're uploading to S3 and encrypting we're going to generate a",
    "start": "1586559",
    "end": "1593039"
  },
  {
    "text": "onetime use symmetric key that we call the envelope encryption key and this is actually what we're going to use to",
    "start": "1593039",
    "end": "1599120"
  },
  {
    "text": "encrypt our data as it goes up to S3 and that's where we get the nice benefits of symmetric key encryption because we're",
    "start": "1599120",
    "end": "1605000"
  },
  {
    "text": "going to be able to do this on the Fly very quickly so the envelope key encrypts are",
    "start": "1605000",
    "end": "1612360"
  },
  {
    "text": "data data is stored in S3 encrypted and then we have to deal with this envelope key somehow so we're going to store the",
    "start": "1612360",
    "end": "1619799"
  },
  {
    "text": "envelope key in S3 alongside the object as as object metadata but we don't want",
    "start": "1619799",
    "end": "1625200"
  },
  {
    "text": "to store it un encrypted of course so that's where the master encryption key comes in um and we are using the",
    "start": "1625200",
    "end": "1631159"
  },
  {
    "text": "asymmetric uh Master encryption key to encrypt the envelope key and store that with the object metadata so if you kind",
    "start": "1631159",
    "end": "1637679"
  },
  {
    "text": "of think through that in reverse the first thing we do is download the object metadata when we want to decrypt an object we use our master key to decrypt",
    "start": "1637679",
    "end": "1644880"
  },
  {
    "text": "the envelope key and then once we have the envelope key we just stream down the data and decrypt it on the",
    "start": "1644880",
    "end": "1650320"
  },
  {
    "text": "Fly having this uh kind of combination this uh abstraction on top of the uh the",
    "start": "1650320",
    "end": "1655960"
  },
  {
    "text": "key that you're using to encrypt the data also has some other nice properties if for some reason your master",
    "start": "1655960",
    "end": "1661760"
  },
  {
    "text": "encryption materials are compromised then you don't have to necessarily pull down all of your objects or all of your",
    "start": "1661760",
    "end": "1667880"
  },
  {
    "text": "you know gigs and gigs of data that are encrypted decrypt them and then re-encrypt them with a uh new key",
    "start": "1667880",
    "end": "1675039"
  },
  {
    "text": "instead if you know that just the uh master key was compromised you can download the object uh metadata to get",
    "start": "1675039",
    "end": "1681519"
  },
  {
    "text": "the encrypted envelope key just decrypt the envelope key and then re-encrypt that with a new set of credentials um or",
    "start": "1681519",
    "end": "1688399"
  },
  {
    "text": "if you have key rotation policies at your company um this is another kind of nice advantage of that extra layer of",
    "start": "1688399",
    "end": "1694240"
  },
  {
    "text": "abstraction on top um there's a little bit more to the",
    "start": "1694240",
    "end": "1699320"
  },
  {
    "text": "encryption client of course than we're not covering today there are some great articles on our site that go into more",
    "start": "1699320",
    "end": "1704880"
  },
  {
    "text": "depth on where these encryption materials come from and explain expl some hooks that you guys can use to",
    "start": "1704880",
    "end": "1710960"
  },
  {
    "text": "integrate with any in-house Key Management Systems so again just like we saw for credentials this is exactly what",
    "start": "1710960",
    "end": "1717519"
  },
  {
    "text": "we do at Amazon we have one system internally that manages all of our secret keys and developers don't ever",
    "start": "1717519",
    "end": "1723640"
  },
  {
    "text": "really have to touch secret keys so again developers are happy because this is easy for them to deal with and",
    "start": "1723640",
    "end": "1729240"
  },
  {
    "text": "security is happy because developers aren't touching the encryption Keys um so if you are interested in more",
    "start": "1729240",
    "end": "1735679"
  },
  {
    "text": "of the encryption key or encryption process definitely find the article on the S3 client on our site and it goes in",
    "start": "1735679",
    "end": "1741440"
  },
  {
    "text": "a lot more detail about implementing that and integrating it with",
    "start": "1741440",
    "end": "1745880"
  },
  {
    "text": "systems",
    "start": "1748200",
    "end": "1751200"
  },
  {
    "text": "yes5 tag um the md5 E tags gets a little bit complicated yeah that's a good",
    "start": "1753960",
    "end": "1760200"
  },
  {
    "text": "question we will store the original md5 for you as part of the object metadata",
    "start": "1760200",
    "end": "1766720"
  },
  {
    "text": "so if you are using that and you want to get those client side Integrity checks when you download um you can still use",
    "start": "1766720",
    "end": "1772640"
  },
  {
    "text": "that information the SDK will still use that information to do the client side checks so you do you're right the data",
    "start": "1772640",
    "end": "1779279"
  },
  {
    "text": "is transforming so the E tag has changed but we are keeping some of the original",
    "start": "1779279",
    "end": "1784720"
  },
  {
    "text": "md5 for the unencrypted data around for you for some of the same purposes that people use the",
    "start": "1784720",
    "end": "1790519"
  },
  {
    "text": "eags um if you have a different use case than just the um client side verification happy to talk about it",
    "start": "1790519",
    "end": "1795919"
  },
  {
    "text": "afterwards um I know people are using the eex for all sorts of stuff no",
    "start": "1795919",
    "end": "1801880"
  },
  {
    "text": "problem uh I'm sure that by this point in the conference every single one of you has heard about Dynamo DB uh it's",
    "start": "1802200",
    "end": "1808600"
  },
  {
    "text": "our brand new nosql fully managed database service that gives you fast and predictable performance and this is one",
    "start": "1808600",
    "end": "1815600"
  },
  {
    "text": "of the newer pieces of the SDK one of the newer high level apis and it's one of the ones that we have been",
    "start": "1815600",
    "end": "1821399"
  },
  {
    "text": "particularly excited about we've had a chance to play with Dynamo during its development not only our team but all",
    "start": "1821399",
    "end": "1827000"
  },
  {
    "text": "around Amazon and build lots of different applications and see how they perform how we want to use them in our",
    "start": "1827000",
    "end": "1832679"
  },
  {
    "text": "Java applications and we very quickly noticed that we were building a lot of the same code over and over to Marshall",
    "start": "1832679",
    "end": "1839080"
  },
  {
    "text": "the data from our Java objects into Dynamo DB objects so for any of you that have ever",
    "start": "1839080",
    "end": "1844840"
  },
  {
    "text": "used hibernate or any other jpa implementation I'm sure you already know where I'm going um this is going to be instantly familiar to you uh we this",
    "start": "1844840",
    "end": "1852679"
  },
  {
    "text": "Dynamo DB object mapper in the SDK allows you to annotate your Java objects",
    "start": "1852679",
    "end": "1858200"
  },
  {
    "text": "and then use this Dynamo DB mapper class to save them into Dynamo to load them to",
    "start": "1858200",
    "end": "1863360"
  },
  {
    "text": "run scans and queries and uh use a not use a lot of nice features from",
    "start": "1863360",
    "end": "1870240"
  },
  {
    "text": "Dynamo so here we've got another piece of sample code we've got a inner type",
    "start": "1871399",
    "end": "1876960"
  },
  {
    "text": "called user that we've annotated already for use with the object mapper and then down here we've got a",
    "start": "1876960",
    "end": "1883360"
  },
  {
    "text": "main method where we're using the we're creating some of those uh user objects we're saving them to Dynamo and showing",
    "start": "1883360",
    "end": "1889480"
  },
  {
    "text": "how we use that Dynamo DB mapper class so let's start with user and show",
    "start": "1889480",
    "end": "1896519"
  },
  {
    "text": "how we get this class ready for use for the object mapper and all it takes is",
    "start": "1896519",
    "end": "1901559"
  },
  {
    "text": "really knowing four different annotations that's all we have to use in order to annotate this class and get it",
    "start": "1901559",
    "end": "1906760"
  },
  {
    "text": "ready to go with the mapper the first annotation we need is Dynamo DB table this is required for any",
    "start": "1906760",
    "end": "1914360"
  },
  {
    "text": "uh any class that you want to use with a mapper uh you just need to specify the table name where these entities are",
    "start": "1914360",
    "end": "1919519"
  },
  {
    "text": "being stored and loaded from and these next two annotations are",
    "start": "1919519",
    "end": "1925519"
  },
  {
    "text": "both on the ID member of this class now when you create a table with",
    "start": "1925519",
    "end": "1931919"
  },
  {
    "text": "Dynamo this is not like a traditional uh relational database table where you have to fully specify your schema UPF front",
    "start": "1931919",
    "end": "1939519"
  },
  {
    "text": "uh instead all you have to specify up front are your key attributes so that Dynamo can set up um an index for those",
    "start": "1939519",
    "end": "1945919"
  },
  {
    "text": "and so that the SDK knows how to quickly look up these entities so we're just telling the SDK",
    "start": "1945919",
    "end": "1952240"
  },
  {
    "text": "here that our ID member is our hash key uh hash key is essentially a a unique",
    "start": "1952240",
    "end": "1958720"
  },
  {
    "text": "primary key for our entity there's also range Keys supported by Dynamo DB and supported by the object mapper but we're",
    "start": "1958720",
    "end": "1965320"
  },
  {
    "text": "not using those in this example so this first annotation Dynamo DB hash key lets the mapper know this is",
    "start": "1965320",
    "end": "1972000"
  },
  {
    "text": "our hash key attribute and this next one is not actually required it just is is",
    "start": "1972000",
    "end": "1977960"
  },
  {
    "text": "kind of a little more convenient it tells the SDK go ahead and fill in on the client side a unique value for this",
    "start": "1977960",
    "end": "1983720"
  },
  {
    "text": "ID uh so that we don't have to worry about it in our code and then this fourth annotation",
    "start": "1983720",
    "end": "1990399"
  },
  {
    "text": "that we need is Dynamo DB attribute and we just slap this on any of the members that we actually want uh included in the",
    "start": "1990399",
    "end": "1997399"
  },
  {
    "text": "marshalling when uh data from java is loaded into Dynamo DB and vice",
    "start": "1997399",
    "end": "2002600"
  },
  {
    "text": "versa so that's really all it took is four annotations to get this class ready to use with the Dynamo DB",
    "start": "2002600",
    "end": "2009039"
  },
  {
    "text": "mapper going down into our main method where we're using the mapper you can see",
    "start": "2009039",
    "end": "2014159"
  },
  {
    "text": "of course we always start by getting our credentials we are in this example there's a number of ways to create these",
    "start": "2014159",
    "end": "2020360"
  },
  {
    "text": "Dynamo DB mappers we're creating a client because we're using it to also make sure our table is created and then",
    "start": "2020360",
    "end": "2026600"
  },
  {
    "text": "we're passing it into the mapper object so once we have this mapper object all we have to do is call save",
    "start": "2026600",
    "end": "2033039"
  },
  {
    "text": "and load to save these objects into Dynamo so you can see we're creating a user we're saving him in and uh printing",
    "start": "2033039",
    "end": "2040519"
  },
  {
    "text": "out the user we created then we're loading him and showing that it's actually all the same",
    "start": "2040519",
    "end": "2046720"
  },
  {
    "text": "data so we'll open up our console here and run",
    "start": "2046919",
    "end": "2051878"
  },
  {
    "text": "this so as you can see the same data that we're pushing into Dynamo we're loading into this uh the same entity",
    "start": "2052440",
    "end": "2059280"
  },
  {
    "text": "into a new variable and showing that it's all the same data coming back so working with this really simplified a",
    "start": "2059280",
    "end": "2065638"
  },
  {
    "text": "lot of those applications that we were writing and side when we're playing with Dynamo um you kind of have this common",
    "start": "2065639",
    "end": "2071118"
  },
  {
    "text": "pattern of storing Java objects into Dynamo DB table and uh it's just really",
    "start": "2071119",
    "end": "2076480"
  },
  {
    "text": "convenient to use instead of going down to the low-l client all the time so this isn't all that the object",
    "start": "2076480",
    "end": "2083839"
  },
  {
    "text": "mapper does you can also run scans on your data you can query your data and there's a couple more attributes",
    "start": "2083839",
    "end": "2089440"
  },
  {
    "text": "including one more that I want to show you guys so this pattern that we're using here is we're loading an entity",
    "start": "2089440",
    "end": "2096000"
  },
  {
    "text": "from Dynamo we're altering it locally and then we are saving it back to Dynamo",
    "start": "2096000",
    "end": "2101440"
  },
  {
    "text": "and one of the worst things that could happen what we really don't want to have happen is for two pieces of code to be",
    "start": "2101440",
    "end": "2107480"
  },
  {
    "text": "editing the same entity at the same time and essentially it's a race condition",
    "start": "2107480",
    "end": "2112920"
  },
  {
    "text": "where one piece of code gets to save its changes back and uh the other piece of code gets to save its changes and",
    "start": "2112920",
    "end": "2118400"
  },
  {
    "text": "overwrite the first piece potentially so as you can imagine this would be a nightmare to debug there's",
    "start": "2118400",
    "end": "2124520"
  },
  {
    "text": "not going to be any logging information or any really clues about what happened other than strange behavior in your",
    "start": "2124520",
    "end": "2129880"
  },
  {
    "text": "system what we really want is for the system to somehow tell us that we're trying to save back the scale data that",
    "start": "2129880",
    "end": "2136920"
  },
  {
    "text": "we made uh alterations or changes to an older version of an entity and uh that",
    "start": "2136920",
    "end": "2142720"
  },
  {
    "text": "we don't want to save it back we want to be stopped somehow so the s or the object mapper provides another",
    "start": "2142720",
    "end": "2148400"
  },
  {
    "text": "annotation we can use to enable this optimistic locking feature and I'm going to see if we can",
    "start": "2148400",
    "end": "2155119"
  },
  {
    "text": "add that real quick to our users class so we're going to add a new field here a",
    "start": "2155119",
    "end": "2161760"
  },
  {
    "text": "new member called version and I'm going to generate uh getter and a Setter for",
    "start": "2161760",
    "end": "2168359"
  },
  {
    "text": "version then all we have to do is use this Dynamo DB version attribute",
    "start": "2168359",
    "end": "2175160"
  },
  {
    "text": "annotation and that tells the object mapper that this is the field we're using for optimistic locking and",
    "start": "2175160",
    "end": "2181720"
  },
  {
    "text": "whenever we try to save entities back to Dynamo DB the SDK is going to alter the request a little bit so that we send",
    "start": "2181720",
    "end": "2188760"
  },
  {
    "text": "along this conditional Clause that says only apply this update only apply these changes to this data if this is still",
    "start": "2188760",
    "end": "2195640"
  },
  {
    "text": "the latest version of the data so let's try to trigger this now that we've turned on this optimistic",
    "start": "2195640",
    "end": "2202040"
  },
  {
    "text": "locking feature and this will be a little artificial for this demo you guys can",
    "start": "2202040",
    "end": "2207760"
  },
  {
    "text": "imagine maybe we have multiple threads or different applications they're editing the same entity at",
    "start": "2207760",
    "end": "2212839"
  },
  {
    "text": "once but let's say our first piece of code is changing",
    "start": "2212839",
    "end": "2218040"
  },
  {
    "text": "the state of this entity we've already got these two variables user and new user that reference the same entity so",
    "start": "2218040",
    "end": "2224160"
  },
  {
    "text": "we'll use them and this first piece of code is changing this user",
    "start": "2224160",
    "end": "2230760"
  },
  {
    "text": "to uh an invalid status and now let's say we've got",
    "start": "2230760",
    "end": "2237920"
  },
  {
    "text": "another application or a thread somewhere that is working on the same entity at the same",
    "start": "2237920",
    "end": "2243440"
  },
  {
    "text": "time and uh has a version of The Entity before this status change has been made",
    "start": "2243440",
    "end": "2250200"
  },
  {
    "text": "so he's changing this guy's name to Bob let's say and then he's trying to save",
    "start": "2250200",
    "end": "2255920"
  },
  {
    "text": "this object back so without this optimistic locking",
    "start": "2255920",
    "end": "2261800"
  },
  {
    "text": "feature this is a raise condition one of these guys is going to win one's going to lose this first guy is going to make",
    "start": "2261800",
    "end": "2267319"
  },
  {
    "text": "his update to change the status and then the second guy is going to come along and he's got this older version before",
    "start": "2267319",
    "end": "2272680"
  },
  {
    "text": "the status change and he's just going to blow away the uh the first change that was made um so you can imagine that just",
    "start": "2272680",
    "end": "2278640"
  },
  {
    "text": "being a nightmare to debug but with optimistic locking turned",
    "start": "2278640",
    "end": "2284359"
  },
  {
    "text": "on when we run this code instead we're going to get an error from the",
    "start": "2284359",
    "end": "2290440"
  },
  {
    "text": "SDK so you can see we got this exception return from Dynamo DB this is on line 98",
    "start": "2290720",
    "end": "2297839"
  },
  {
    "text": "and that's when we try to save this second piece of data so this is when we have stale data we made changes to it",
    "start": "2297839",
    "end": "2304240"
  },
  {
    "text": "the data in Dynamo DB is no longer um the same version is this one and that's when Dynamo DB is going to give us this",
    "start": "2304240",
    "end": "2311319"
  },
  {
    "text": "error message of conditional check failed exception and that's our applications Quee that uh we're not",
    "start": "2311319",
    "end": "2317640"
  },
  {
    "text": "working with the most recent data anymore that we need to drop this check out the latest version apply our edits",
    "start": "2317640",
    "end": "2323800"
  },
  {
    "text": "again and then uh attempt to make that change",
    "start": "2323800",
    "end": "2328240"
  },
  {
    "text": "again so that is everything we have for Dynamo there's a couple more features in there um also another great API in the",
    "start": "2328920",
    "end": "2335280"
  },
  {
    "text": "SDK um I definitely encourage you to check this one out especially if you're curious about Dynamo it's a really great",
    "start": "2335280",
    "end": "2340520"
  },
  {
    "text": "way to get started with Dynamo and uh play with it and build something really quickly",
    "start": "2340520",
    "end": "2346119"
  },
  {
    "text": "too um that's a good question I think um we basically just followed some of the",
    "start": "2349920",
    "end": "2355359"
  },
  {
    "text": "other examples that we were seeing out with other third party tools um",
    "start": "2355359",
    "end": "2360880"
  },
  {
    "text": "annotating the getter allows you to do maybe virtual uh members if you don't",
    "start": "2360880",
    "end": "2366720"
  },
  {
    "text": "have a member that backs it or if you want to do some sort of data transformation on",
    "start": "2366720",
    "end": "2372119"
  },
  {
    "text": "it good",
    "start": "2372119",
    "end": "2375318"
  },
  {
    "text": "question and then last but certainly not least oh sorry sir yeah of",
    "start": "2380359",
    "end": "2388280"
  },
  {
    "text": "course Dynamo does not have support for transactions right",
    "start": "2390720",
    "end": "2395720"
  },
  {
    "text": "now yes sir awesome yes",
    "start": "2396319",
    "end": "2405839"
  },
  {
    "text": "yeah mobile that's exactly correct yeah the Android SDK um the question was uh",
    "start": "2406359",
    "end": "2412640"
  },
  {
    "text": "this demo is showed for Android is this um is the code compatible do we work with the Android uh trans or excuse me",
    "start": "2412640",
    "end": "2419079"
  },
  {
    "text": "um Dynamo mapper the same way that we do with the Java SDK and the answer is yes uh the Android SDK is kind of a",
    "start": "2419079",
    "end": "2425760"
  },
  {
    "text": "transformation of the Java SD DK it's um just changed ever so slightly so it fits",
    "start": "2425760",
    "end": "2430880"
  },
  {
    "text": "in with some of the libraries that are already in Android um to kind of prune down some of the third party dependencies and just make it uh kind of",
    "start": "2430880",
    "end": "2437640"
  },
  {
    "text": "ready to go on",
    "start": "2437640",
    "end": "2440200"
  },
  {
    "text": "Android um I Heard conditional updates and that's Alles oh batch updates um what about batch update are",
    "start": "2442839",
    "end": "2450000"
  },
  {
    "text": "they suppor in the object mapper yes question",
    "start": "2450000",
    "end": "2457440"
  },
  {
    "text": "um yeah that's a good question I think that's something that we could still provide as well at this point if we wanted to we started with these just to",
    "start": "2460720",
    "end": "2467040"
  },
  {
    "text": "see how it was going to work out we didn't want to be limited by jpa or be forced to implement all the jpa things",
    "start": "2467040",
    "end": "2472359"
  },
  {
    "text": "uh jpa jpa functions there are certainly some parts of jpa that don't make sense for Dynamo um so that's why we wanted to",
    "start": "2472359",
    "end": "2479119"
  },
  {
    "text": "just be a little more explicit about that awesome why you guys choose",
    "start": "2479119",
    "end": "2487480"
  },
  {
    "text": "um so we actually um so the question was is this uh are we compatible with jpa do we use jpa annotations and the answer is",
    "start": "2487480",
    "end": "2494640"
  },
  {
    "text": "we actually didn't choose jpa um we're not we use our own annotations so we're",
    "start": "2494640",
    "end": "2500240"
  },
  {
    "text": "not really um choosing jpa over jdo does that make sense",
    "start": "2500240",
    "end": "2507520"
  },
  {
    "text": "awesome uh so last but not least oh sorry sir",
    "start": "2507520",
    "end": "2512920"
  },
  {
    "text": "yes Integrity checking feature that a single",
    "start": "2514119",
    "end": "2519960"
  },
  {
    "text": "J um that will work in an entire system over as many machines as you want the",
    "start": "2519960",
    "end": "2525319"
  },
  {
    "text": "client side is coordinating with the service side the functionality those conditions are applied on the service so",
    "start": "2525319",
    "end": "2532040"
  },
  {
    "text": "that's why um it will work in a in a distributed system um any more Dynamo DB questions",
    "start": "2532040",
    "end": "2538200"
  },
  {
    "text": "let's save to the end just so we can get through Java mail but I'm of course happy to answer them uh so Java mail uh some of you",
    "start": "2538200",
    "end": "2544839"
  },
  {
    "text": "might have heard of Amazon simple email service this uh launched a little while back but it's been a really nice simple",
    "start": "2544839",
    "end": "2551839"
  },
  {
    "text": "service with a small API very easy to use and uh we wanted to expose this",
    "start": "2551839",
    "end": "2557160"
  },
  {
    "text": "through the SDK not only through the lower level client but through something a little more familiar to developers and",
    "start": "2557160",
    "end": "2563920"
  },
  {
    "text": "this was uh really fun for us to build with Java mail because it was such a great fit for simple email",
    "start": "2563920",
    "end": "2570480"
  },
  {
    "text": "service so uh we chose to use Java mail because",
    "start": "2570480",
    "end": "2576079"
  },
  {
    "text": "it's a standard API which we always like developers already know Java or Java mail there's tons of documentation for",
    "start": "2576079",
    "end": "2582760"
  },
  {
    "text": "it there's great tutorials for Java mail out there so it was a really nice fit to bring the AWS apis into Java mail and",
    "start": "2582760",
    "end": "2590000"
  },
  {
    "text": "enable people to start using the AWS apis without even really having to learn the apis and just use the apis that",
    "start": "2590000",
    "end": "2597040"
  },
  {
    "text": "they're already used to using we've got one more piece of code",
    "start": "2597040",
    "end": "2603599"
  },
  {
    "text": "for you guys um this is just an example of how you can use the Amazon simple email",
    "start": "2603599",
    "end": "2609319"
  },
  {
    "text": "service in conjunction with Java mail to send mail through the AWS",
    "start": "2609319",
    "end": "2614599"
  },
  {
    "text": "platform we need to set up a couple of session properties we need to let the Java Mail system know that we're using",
    "start": "2614599",
    "end": "2620640"
  },
  {
    "text": "the AWS Java mail provider setting the mail transport protocol passing in our credentials of course so we can make",
    "start": "2620640",
    "end": "2626960"
  },
  {
    "text": "those request and then from there it's essentially using the Java mail API creating messages uh setting the body in",
    "start": "2626960",
    "end": "2634880"
  },
  {
    "text": "all the fields and the messages and this this is a really great way to use Simple email service whether you want to send a",
    "start": "2634880",
    "end": "2640400"
  },
  {
    "text": "couple of emails or thousands of emails simple email service really has a lot of strengths with bulk email sending and um",
    "start": "2640400",
    "end": "2647640"
  },
  {
    "text": "Java mail just fits really nicely with that as",
    "start": "2647640",
    "end": "2651559"
  },
  {
    "text": "well so thank you guys for coming I hope that everybody learned at least one thing that they're able to take back and",
    "start": "2657200",
    "end": "2662480"
  },
  {
    "text": "use to be more productive to get more out of the sdks um I would also really really",
    "start": "2662480",
    "end": "2667839"
  },
  {
    "text": "encourage you guys to connect with us the AWS SDK developers on the forums and other developers we monitor the forums",
    "start": "2667839",
    "end": "2674000"
  },
  {
    "text": "every day we're active on there we love talking to you guys it's one of the big perks of our jobs is being able to connect with customers like that um and",
    "start": "2674000",
    "end": "2680480"
  },
  {
    "text": "we take it very seriously if you have problems feedback suggestions we love hearing from people on the phones um a",
    "start": "2680480",
    "end": "2686520"
  },
  {
    "text": "second even uh another great way to connect with us is through our code on GitHub all the sdks are completely open",
    "start": "2686520",
    "end": "2693000"
  },
  {
    "text": "source if you go to our GitHub page you can find everything in the SDK all the source code you can find all the source",
    "start": "2693000",
    "end": "2699200"
  },
  {
    "text": "code for the adabs toolkit for eclipse and a ton of other really cool projects that we're working on in developer",
    "start": "2699200",
    "end": "2706160"
  },
  {
    "text": "resources uh so thanks again for coming we still got a couple of minutes for questions",
    "start": "2706559",
    "end": "2712319"
  }
]