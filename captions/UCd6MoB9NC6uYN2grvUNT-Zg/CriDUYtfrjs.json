[
  {
    "text": "all right ready to rock and roll thank you for coming I know there's a lot of choice there's a lot of choice",
    "start": "3760",
    "end": "10480"
  },
  {
    "text": "there's so many things going on uh but I hope this will be useful so let's go um who am I and why",
    "start": "10480",
    "end": "20840"
  },
  {
    "text": "am I here for so I managed the cloud platform team at Netflix and really uh",
    "start": "20840",
    "end": "27080"
  },
  {
    "text": "what I'm going to talk about is I've contributed to many OSS components you might have heard of Netflix OSS uh it's",
    "start": "27080",
    "end": "34480"
  },
  {
    "text": "pretty popular out there but really uh the main thing is though that I've been",
    "start": "34480",
    "end": "39559"
  },
  {
    "text": "through so many production outages and that's really what it uh you know the learnings that we learned from",
    "start": "39559",
    "end": "46079"
  },
  {
    "text": "all of these production outages is what we put into back into our software and we've open- sourced it so that we could",
    "start": "46079",
    "end": "51960"
  },
  {
    "text": "share it with the community um you might think big deal what happens if Netflix",
    "start": "51960",
    "end": "57440"
  },
  {
    "text": "goes down right that's what I thought but man you just have to look at the Twitter feed uh you will be so upset cuz",
    "start": "57440",
    "end": "65518"
  },
  {
    "text": "you're at the restaurant just trying to have dinner in peas but your kids are not going to let you cuz Netflix is down",
    "start": "65519",
    "end": "72439"
  },
  {
    "text": "so that creates an argument and it leads to divorce and too many bad things",
    "start": "72439",
    "end": "77560"
  },
  {
    "text": "happen so really uh Netflix has to be up and running all the time and to for it",
    "start": "77560",
    "end": "84400"
  },
  {
    "text": "to be up up and running all the time with high availability at the scale at which we are running we got to have have",
    "start": "84400",
    "end": "90079"
  },
  {
    "text": "a good architecture right so I'll talk about the evolution of where we started",
    "start": "90079",
    "end": "95720"
  },
  {
    "text": "where we are at now and there's a big road map which I'll cover as",
    "start": "95720",
    "end": "100759"
  },
  {
    "text": "well so here's the agenda we'll talk about Netflix its background and its Evolution",
    "start": "100759",
    "end": "108119"
  },
  {
    "text": "and monolithic apps what do they really mean right what are the characteristics of a monolithic app then why did we",
    "start": "108119",
    "end": "115119"
  },
  {
    "text": "Embrace microservices what are these um so we'll go through some of those",
    "start": "115119",
    "end": "120439"
  },
  {
    "text": "and believe me there are challenges in a microservices architecture especially when you have to run it at the scale Ed",
    "start": "120439",
    "end": "126360"
  },
  {
    "text": "which we do um and then the backbone of a microservices architecture is really",
    "start": "126360",
    "end": "131560"
  },
  {
    "text": "the interprocess communication the communication that you have to do between each of these uh Target Services",
    "start": "131560",
    "end": "138400"
  },
  {
    "text": "um we've open sourced a bunch of libraries again what's new uh so I'll talk a bit about that and",
    "start": "138400",
    "end": "146400"
  },
  {
    "text": "then finally if you got time hopefully we'll do some takeaways question and answers how does that sound good all",
    "start": "146400",
    "end": "153560"
  },
  {
    "text": "right let's go Netflix [Music] Evolution before we go uh really uh it's",
    "start": "153560",
    "end": "161680"
  },
  {
    "text": "it's about scale if there was no scale it's life is very easy right uh it's",
    "start": "161680",
    "end": "167080"
  },
  {
    "text": "very easy uh I think a lot of people already know this but it's very repeating at peak in the United States",
    "start": "167080",
    "end": "175000"
  },
  {
    "text": "onethird of all internet traffic is Netflix right so we've got upwards of 50 million",
    "start": "175000",
    "end": "182599"
  },
  {
    "text": "subscribers uh we handle about 2 billion API requests on our Edge service per day",
    "start": "182599",
    "end": "189400"
  },
  {
    "text": "uh in fact we are such a big microservices shop that we've got more than 500 microservices for what you see",
    "start": "189400",
    "end": "196120"
  },
  {
    "text": "as netflix.com is essentially powered by hundreds and hundreds of",
    "start": "196120",
    "end": "201400"
  },
  {
    "text": "microservices and I got more than 30 engineering teams not odd engineering",
    "start": "201400",
    "end": "206599"
  },
  {
    "text": "teams but 30 odd engineering teams um so",
    "start": "206599",
    "end": "212599"
  },
  {
    "text": "Evolution about 2008 I'm going to say we were in our own data center ages ago right I mean everybody's",
    "start": "212599",
    "end": "220120"
  },
  {
    "text": "on the public Cloud these days but back in the days we had our own private Data Center and the architecture that we had",
    "start": "220120",
    "end": "225360"
  },
  {
    "text": "at the time is what I call as a monolithic architecture uh anybody can recognize what this building",
    "start": "225360",
    "end": "232439"
  },
  {
    "text": "is it's Burge Al Dubai or so it's in Dubai and that's the way to scale a",
    "start": "232439",
    "end": "238959"
  },
  {
    "text": "monolithic uh application you kind of keep building on top and top and top it's like a vertically scaled service",
    "start": "238959",
    "end": "245319"
  },
  {
    "text": "right and circuit 2010 is when we embraced the public Cloud Amazon in fact",
    "start": "245319",
    "end": "251480"
  },
  {
    "text": "uh and I think we were one of the very first uh or one of the first 10 or so big internet scale companies to embrace",
    "start": "251480",
    "end": "258880"
  },
  {
    "text": "AWS and we took that as an opportunity to go to service oriented architecture",
    "start": "258880",
    "end": "264560"
  },
  {
    "text": "and that's the evolution that I'll take you through in the rest of the talk",
    "start": "264560",
    "end": "270520"
  },
  {
    "text": "so monolithic app what's what are the characteristics of a monolithic app uh",
    "start": "270520",
    "end": "276120"
  },
  {
    "text": "the way I look at it I kind of tend to think in terms of pictures a monolithic",
    "start": "276120",
    "end": "281720"
  },
  {
    "text": "app is like a train uh with many cars on it right or wagons if you prefer from an",
    "start": "281720",
    "end": "287919"
  },
  {
    "text": "architectural point of view this is what it would look like um essentially at",
    "start": "287919",
    "end": "293120"
  },
  {
    "text": "Netflix we support about 1,000 device types device types are things like Xbox PS3 your browsers",
    "start": "293120",
    "end": "300240"
  },
  {
    "text": "DVD players what have you right and they come through so it all were deployed on",
    "start": "300240",
    "end": "305960"
  },
  {
    "text": "one single monolithic application every code that you could think of was in that",
    "start": "305960",
    "end": "311080"
  },
  {
    "text": "one single War file for those familiar with the Tomcat deployment which was backed Again by one single Oracle",
    "start": "311080",
    "end": "318360"
  },
  {
    "text": "database right U that was the monolithic architecture we embraced nothing bad",
    "start": "318360",
    "end": "323560"
  },
  {
    "text": "about it at the scale which we were at and 2008 that was the perfectly right thing to do all right and if you are",
    "start": "323560",
    "end": "330520"
  },
  {
    "text": "there now Perhaps it is the right thing to do for you so what Happ so the pros",
    "start": "330520",
    "end": "336400"
  },
  {
    "text": "of that architecture for us was that it's got good ide support you could just",
    "start": "336400",
    "end": "341639"
  },
  {
    "text": "fire up your Eclipse your intellig and your whole entire code base is right",
    "start": "341639",
    "end": "346680"
  },
  {
    "text": "there very easy to look at all the apis you know life is good um all your calls",
    "start": "346680",
    "end": "352800"
  },
  {
    "text": "are essentially in memory calls so really it's computationally fast good um",
    "start": "352800",
    "end": "358600"
  },
  {
    "text": "it's pretty easy to scale out horizontally CU essentially you just got one application you just have to clone",
    "start": "358600",
    "end": "364960"
  },
  {
    "text": "it however many times you need and you're good to go and you really need just one Central operations team right",
    "start": "364960",
    "end": "373160"
  },
  {
    "text": "so these are all good things you know pretty happy customer and if that's where you're at good nothing wrong with",
    "start": "373160",
    "end": "380080"
  },
  {
    "text": "that right but as the organization grows as you hire a lot more people it's",
    "start": "380080",
    "end": "386880"
  },
  {
    "text": "natural that teams will be formed right uh and as time progresses what happens",
    "start": "386880",
    "end": "392280"
  },
  {
    "text": "is that your code base literally grows like that uh that's when things start",
    "start": "392280",
    "end": "398800"
  },
  {
    "text": "getting interesting right uh so an evolution of a m monolithic application what happens",
    "start": "398800",
    "end": "405560"
  },
  {
    "text": "is that you will hire from many different other companies and if you",
    "start": "405560",
    "end": "410680"
  },
  {
    "text": "were a Java shop this person would go well I used to use R I used to use python in my previous company why not I",
    "start": "410680",
    "end": "417280"
  },
  {
    "text": "mean that's the right thing to use so it becomes difficult ult for all of these folks to contribute to that one single",
    "start": "417280",
    "end": "423520"
  },
  {
    "text": "code base which perhaps is in Java or whatever other languages that he use um",
    "start": "423520",
    "end": "429240"
  },
  {
    "text": "the other thing that tends to happen is that these components over a period of time get entangled in each other as",
    "start": "429240",
    "end": "436680"
  },
  {
    "text": "described in this diagram right has that happened to you has happened to us",
    "start": "436680",
    "end": "443759"
  },
  {
    "text": "um gradually over a period of time everything naturally gravitates in in this way you form form small tees and",
    "start": "443759",
    "end": "451199"
  },
  {
    "text": "these tees for all intents and purposes will have their own characteristics as described by this",
    "start": "451199",
    "end": "457479"
  },
  {
    "text": "particular train analogy here right and the other thing that happens is as you",
    "start": "457479",
    "end": "462919"
  },
  {
    "text": "grow your code base and as the number of teams increases your deployment cycle",
    "start": "462919",
    "end": "468120"
  },
  {
    "text": "will really go bigger a because of a large large code base the amount of",
    "start": "468120",
    "end": "473520"
  },
  {
    "text": "things that you have to test even if you touch one tiny code is a lot right and",
    "start": "473520",
    "end": "479280"
  },
  {
    "text": "we have 15 20 30 teams they all move at their own pace and really people will be",
    "start": "479280",
    "end": "485240"
  },
  {
    "text": "like no no I'm not ready yet you got to wait so typically a monolithic application tends to have days if not",
    "start": "485240",
    "end": "492720"
  },
  {
    "text": "weeks of deployment Cycles um these are all characteristics in terms of scaling",
    "start": "492720",
    "end": "498919"
  },
  {
    "text": "I said it was easy to scale because essentially it's just a single copy and you just have to clone it any number of",
    "start": "498919",
    "end": "505080"
  },
  {
    "text": "times however please do note that it's a difficult to scale it in an",
    "start": "505080",
    "end": "510400"
  },
  {
    "text": "undifferentiated manner in other words if your product catalog component is more popular and is taking a lot of",
    "start": "510400",
    "end": "516518"
  },
  {
    "text": "requests you cannot scale that differently from your customer service component right um so that's the aspect",
    "start": "516519",
    "end": "524360"
  },
  {
    "text": "of scaling when it comes to availability that's when things start getting really interesting so at this",
    "start": "524360",
    "end": "531760"
  },
  {
    "text": "point I'd like to tell you a story what happened back in 2008 this is a story where I said that a",
    "start": "531760",
    "end": "538680"
  },
  {
    "text": "single Miss missing semicolon brought down the whole netflix.com site for",
    "start": "538680",
    "end": "545320"
  },
  {
    "text": "hours all it was missing was a single semicolon so the story is that um we had",
    "start": "545320",
    "end": "551680"
  },
  {
    "text": "we stored our movie reviews uh in Oracle and at the time we had to display this",
    "start": "551680",
    "end": "557480"
  },
  {
    "text": "in various devices where HTML was not the first class citizen like PS3 or Xbox",
    "start": "557480",
    "end": "563000"
  },
  {
    "text": "or something so this enterprising developer thought of coming up with his own syntax in order to format you know",
    "start": "563000",
    "end": "569920"
  },
  {
    "text": "bold and italics the movie reviews content and for some reason he chose",
    "start": "569920",
    "end": "575160"
  },
  {
    "text": "semicolon as the parser delimiter to determine this some other enterprising",
    "start": "575160",
    "end": "580839"
  },
  {
    "text": "developer used a tool that did not have a semicolon in it so if you are familiar",
    "start": "580839",
    "end": "586800"
  },
  {
    "text": "with the tomat architecture which has like a preconfigured limit of 200 threads a request would land up on the",
    "start": "586800",
    "end": "593680"
  },
  {
    "text": "thread and the thread would try to go load the movie review data cannot find a",
    "start": "593680",
    "end": "598760"
  },
  {
    "text": "semicolon would keep going on an infinite Loop very soon in seconds really all your 200 tat threads are dead",
    "start": "598760",
    "end": "607040"
  },
  {
    "text": "in the water right so the whole site went down so really a single missing",
    "start": "607040",
    "end": "612120"
  },
  {
    "text": "semicolon brought down the whole site for hours together um I kind of liken it",
    "start": "612120",
    "end": "619040"
  },
  {
    "text": "to this picture here so if you really think about it even if one of the wagons or your cars of a train go down you kind",
    "start": "619040",
    "end": "626120"
  },
  {
    "text": "of have to Halt the entire train you simply cannot proceed and that's when",
    "start": "626120",
    "end": "631480"
  },
  {
    "text": "you really really start thinking so what's the Tipping Point The Tipping Point to me before you move to a",
    "start": "631480",
    "end": "637760"
  },
  {
    "text": "microservices like architecture is if you got an organizational growth essentially with multiple teams um and",
    "start": "637760",
    "end": "645200"
  },
  {
    "text": "each of these team would have diverse functionalities and features and characteristics and behavior and",
    "start": "645200",
    "end": "651360"
  },
  {
    "text": "personality um and you reach a bottleneck in your deployment architecture when you go okay I'm done",
    "start": "651360",
    "end": "659040"
  },
  {
    "text": "with this I really need better availability that's perhaps the time you",
    "start": "659040",
    "end": "664120"
  },
  {
    "text": "should start thinking of microservices now how many people here",
    "start": "664120",
    "end": "670000"
  },
  {
    "text": "actually use uh microservices oh a lot that is good that",
    "start": "670000",
    "end": "675839"
  },
  {
    "text": "is good um so let's talk about microservices one of the main challenges",
    "start": "675839",
    "end": "680880"
  },
  {
    "text": "really of what are microservices kind of overheard in a previous conference so",
    "start": "680880",
    "end": "687160"
  },
  {
    "text": "hipster SOA and I like the definition that's a good one um but before we U",
    "start": "687160",
    "end": "694839"
  },
  {
    "text": "what's the difference between an S SOA and a microservices is it just old wine in a new bottle",
    "start": "694839",
    "end": "701720"
  },
  {
    "text": "uh let's define it in the following way let's define what is not a microservice",
    "start": "701720",
    "end": "707480"
  },
  {
    "text": "and I've been asked this question many number of times what do you mean by microservice could it have like 100",
    "start": "707480",
    "end": "713880"
  },
  {
    "text": "python uh lines is that a microservice if I go beyond 100 python lines is that not a microservice anymore um",
    "start": "713880",
    "end": "721720"
  },
  {
    "text": "microservices are not defined at least in my book in terms of Team size how many developers are contributing to it",
    "start": "721720",
    "end": "728120"
  },
  {
    "text": "how many lines of code it has or how many number of apis or endpoint that it publishes uh something a heavier service",
    "start": "728120",
    "end": "735680"
  },
  {
    "text": "doesn't automatically become a mega service and a lighter one doesn't become a micro Service uh so that's what it's",
    "start": "735680",
    "end": "742399"
  },
  {
    "text": "not about to me what it is about and I kind of paraphrase perhaps Adrien cockr",
    "start": "742399",
    "end": "747800"
  },
  {
    "text": "Martin Fowler and others microservices are about many many many",
    "start": "747800",
    "end": "754040"
  },
  {
    "text": "smaller lightweight Services um that adhere to the single responsibility",
    "start": "754040",
    "end": "760800"
  },
  {
    "text": "principle which is do one thing just one thing but do it right right and they are",
    "start": "760800",
    "end": "768560"
  },
  {
    "text": "independently managed in other words if in the previous train diagram there's an engineer perhaps on in the engine and",
    "start": "768560",
    "end": "775240"
  },
  {
    "text": "he's driving the whole train in the microservices each individual team responsible for a small service is",
    "start": "775240",
    "end": "782240"
  },
  {
    "text": "should manage it independently and that leads us to the devops model right there",
    "start": "782240",
    "end": "787560"
  },
  {
    "text": "another buzzword going on I'm going to drop quite a few buzzwords in the talk as we go",
    "start": "787560",
    "end": "792920"
  },
  {
    "text": "um so it again goes back to the good old Unix philosophy which is write programs",
    "start": "792920",
    "end": "799399"
  },
  {
    "text": "that do one thing and do it well and make them such that they can work together to do a better H good for I",
    "start": "799399",
    "end": "807079"
  },
  {
    "text": "don't know of any Unix command or program that could uh print out all the",
    "start": "807079",
    "end": "812199"
  },
  {
    "text": "misspelled words in a document however you can string together a set of small",
    "start": "812199",
    "end": "817399"
  },
  {
    "text": "unix commands and can come up with that big nice uh program that gives you",
    "start": "817399",
    "end": "823440"
  },
  {
    "text": "misspelled words in a document right so think about microservices in a similar",
    "start": "823440",
    "end": "829360"
  },
  {
    "text": "Manner and if you go back to the train analogy it kind of goes like this yes you can still do the same thing in a",
    "start": "829360",
    "end": "836040"
  },
  {
    "text": "monolithic application but notice that they are tightly coupled to each other",
    "start": "836040",
    "end": "841360"
  },
  {
    "text": "that's the key word tightly coupled as opposed to a microservices architecture",
    "start": "841360",
    "end": "847560"
  },
  {
    "text": "which we go away from the train model we go to the cars model in which every",
    "start": "847560",
    "end": "853199"
  },
  {
    "text": "single service is specialized there are some services that have characteristics of going pretty fast others are pickup",
    "start": "853199",
    "end": "860680"
  },
  {
    "text": "trucks and others are wagon whatever right so each with a different purposes",
    "start": "860680",
    "end": "866079"
  },
  {
    "text": "again revisiting the old model of Monolithic applications everything is baked into a single application right in",
    "start": "866079",
    "end": "874240"
  },
  {
    "text": "a microservices architecture the same application will be split up into",
    "start": "874240",
    "end": "880720"
  },
  {
    "text": "multiple Services each with its own responsibility right so this is one of",
    "start": "880720",
    "end": "885800"
  },
  {
    "text": "the architectural pattern which is you got a load balancer elbs perhaps and then you got a API Gateway at Netflix we",
    "start": "885800",
    "end": "893279"
  },
  {
    "text": "call it the edge Gateway or the API Gateway and which is backed by a lot of",
    "start": "893279",
    "end": "898480"
  },
  {
    "text": "hundreds and hundreds of microservices right another characteristics of",
    "start": "898480",
    "end": "903720"
  },
  {
    "text": "microservice is that each of these Services tend to have their own databases remember the previous one was",
    "start": "903720",
    "end": "911279"
  },
  {
    "text": "just one article database the next one each service is backed by its own",
    "start": "911279",
    "end": "916839"
  },
  {
    "text": "database so we defined what is a microservice but why why would we want",
    "start": "916839",
    "end": "923120"
  },
  {
    "text": "to go to the microservices architecture it's because it gives you faster and",
    "start": "923120",
    "end": "929880"
  },
  {
    "text": "simpler deployment uh and roll backs each individual team can follow its own",
    "start": "929880",
    "end": "936759"
  },
  {
    "text": "path its own timeline in order to deploy your services if a particular service is",
    "start": "936759",
    "end": "942560"
  },
  {
    "text": "better uh written in Python you got that opportunity uh if it's better written in",
    "start": "942560",
    "end": "948199"
  },
  {
    "text": "Java well so be it so it gives you the right of language to choose the right tool for the right service um it does",
    "start": "948199",
    "end": "955399"
  },
  {
    "text": "buy you greater resiliency uh as in Fault isol if one of your microservice goes",
    "start": "955399",
    "end": "962199"
  },
  {
    "text": "down it's okay your whole site is not down just that one functionality is down",
    "start": "962199",
    "end": "968120"
  },
  {
    "text": "hence it gives you better availability only if architected right",
    "start": "968120",
    "end": "973319"
  },
  {
    "text": "I'll I'll explain how all right but before I proceed let's put",
    "start": "973319",
    "end": "979199"
  },
  {
    "text": "this picture in our mind capture it in our mind the concept of service dependency",
    "start": "979199",
    "end": "985839"
  },
  {
    "text": "graph okay uh service dependency graph is for every call path that your API",
    "start": "985839",
    "end": "992880"
  },
  {
    "text": "Gateway handles it perhaps depends on N number of Target Services right",
    "start": "992880",
    "end": "998440"
  },
  {
    "text": "dependency Services which in turn depend on other services so that this",
    "start": "998440",
    "end": "1004079"
  },
  {
    "text": "particular thing is a definition of a service dependency graph so with that Concept in mind let's now go through",
    "start": "1004079",
    "end": "1011600"
  },
  {
    "text": "challenges so now you're on board now you want to use microservices what",
    "start": "1011600",
    "end": "1016639"
  },
  {
    "text": "really are the challenges of microservices and believe me there are many many many we could have an entire",
    "start": "1016639",
    "end": "1022399"
  },
  {
    "text": "conference just on microservices challenges yeah all right but the good news is these have Solutions these have",
    "start": "1022399",
    "end": "1030720"
  },
  {
    "text": "Solutions so don't fear we we'll walk through some of them all right so let's go through them what are",
    "start": "1030720",
    "end": "1037959"
  },
  {
    "text": "the challenges again going back to that picture monolithic versus microservices",
    "start": "1037959",
    "end": "1044038"
  },
  {
    "text": "architecture instead of building vertically you kind of go into a suburban sprawl right multiple small",
    "start": "1044039",
    "end": "1050559"
  },
  {
    "text": "buildings spread across what it really means is that when you give this freedom to your teams when",
    "start": "1050559",
    "end": "1057559"
  },
  {
    "text": "you build individualized cars unless you define the rules of the road traffic",
    "start": "1057559",
    "end": "1062919"
  },
  {
    "text": "book or your DMV booklet you're going to land up in chaos I can guarantee you that all right how let's go through some",
    "start": "1062919",
    "end": "1070919"
  },
  {
    "text": "of this issues polyglot ecosystem one of the pros of a microservices architecture",
    "start": "1070919",
    "end": "1076640"
  },
  {
    "text": "is that it allows you as a service owner to develop in Java python nodejs or",
    "start": "1076640",
    "end": "1083200"
  },
  {
    "text": "whichever one right so you're talking multiple languages here however that",
    "start": "1083200",
    "end": "1088840"
  },
  {
    "text": "creates a problem as far as operational homogeneity goes because each of these have",
    "start": "1088840",
    "end": "1094919"
  },
  {
    "text": "different Frameworks and it becomes very difficult from an operational point of view to know understand what's going on",
    "start": "1094919",
    "end": "1100200"
  },
  {
    "text": "in the overall ecosystem right so what do we do the concept that we",
    "start": "1100200",
    "end": "1107159"
  },
  {
    "text": "came up with is this concept of side cars essentially at Netflix we open",
    "start": "1107159",
    "end": "1112320"
  },
  {
    "text": "source Prana diptanu here open source Prana last week um and what it is is the",
    "start": "1112320",
    "end": "1118039"
  },
  {
    "text": "concept is pretty simple it's okay for your main application to be written in",
    "start": "1118039",
    "end": "1123120"
  },
  {
    "text": "Java python R nodejs what have you however to keep operational homogeneity",
    "start": "1123120",
    "end": "1130000"
  },
  {
    "text": "you could deploy Prana alongside as a sidecar or as an agent if you will that",
    "start": "1130000",
    "end": "1136080"
  },
  {
    "text": "provides all the platform services to your ecosystem what are platform",
    "start": "1136080",
    "end": "1141240"
  },
  {
    "text": "Services things like configuration Management Service Discovery metrics",
    "start": "1141240",
    "end": "1146320"
  },
  {
    "text": "those sort of things right so sidecar is your friend if you Embrace microservices",
    "start": "1146320",
    "end": "1153159"
  },
  {
    "text": "architecture another challenge is service Discovery when you got one monolithic application there's just you",
    "start": "1153159",
    "end": "1160600"
  },
  {
    "text": "there's nobody else to talk to it's all good it's all fine even if you have two three four 5 10 Services it's okay you",
    "start": "1160600",
    "end": "1168600"
  },
  {
    "text": "can you can still name them I've got two kids and it's not too difficult to remember their names right um however",
    "start": "1168600",
    "end": "1176360"
  },
  {
    "text": "when you Embrace a micros Services architecture you now got hundreds and hundreds of services and more keep",
    "start": "1176360",
    "end": "1182919"
  },
  {
    "text": "propping up every day in a big organization like ours how do you even keep track of Who's Who right that's",
    "start": "1182919",
    "end": "1190320"
  },
  {
    "text": "where service Discovery becomes important so at Netflix we again this is",
    "start": "1190320",
    "end": "1196120"
  },
  {
    "text": "a theme we open source everything we do so we open source Eureka which is a service Discovery uh software what it",
    "start": "1196120",
    "end": "1204919"
  },
  {
    "text": "does is essentially says that every time an instance comes up it says hey I'm an",
    "start": "1204919",
    "end": "1210159"
  },
  {
    "text": "instance I'm coming up on behalf of actually I'm a account service instance using Ami X Version Y coming up on Port",
    "start": "1210159",
    "end": "1220120"
  },
  {
    "text": "8007 yada yada y these are metadatas associated with that instance and it",
    "start": "1220120",
    "end": "1225720"
  },
  {
    "text": "registers itself with a single registry called right and that helps other services to",
    "start": "1225720",
    "end": "1232840"
  },
  {
    "text": "discover all the other the rest of the ecosystem so that's UA that's your friend so if you Embrace microservices",
    "start": "1232840",
    "end": "1239960"
  },
  {
    "text": "architecture you would need some sort of a discovery or mechanism we use Eureka",
    "start": "1239960",
    "end": "1245840"
  },
  {
    "text": "there are other choices console and a few others come to",
    "start": "1245840",
    "end": "1251760"
  },
  {
    "text": "mind okay so that was the challenge of service Discovery moving on chattiness",
    "start": "1251840",
    "end": "1257679"
  },
  {
    "text": "and fan out what do I mean by that when you have a single monolithic application",
    "start": "1257679",
    "end": "1263559"
  },
  {
    "text": "the one user request that lands up on your application is really the only request but when you have",
    "start": "1263559",
    "end": "1269320"
  },
  {
    "text": "microservices one single request that lands up on your API Gateway fans out into many many many",
    "start": "1269320",
    "end": "1276679"
  },
  {
    "text": "requests to your microservices so that creates chattiness in the case of Netflix like I said we handle about 2",
    "start": "1276679",
    "end": "1282760"
  },
  {
    "text": "billion requests per day well that goes into 20 billion 25 billion other",
    "start": "1282760",
    "end": "1288080"
  },
  {
    "text": "requests in the internal ecosystem right that's a lot of different um calls out",
    "start": "1288080",
    "end": "1294400"
  },
  {
    "text": "to what's the solution solution is perhaps to use server caching so instead",
    "start": "1294400",
    "end": "1301039"
  },
  {
    "text": "of uh putting load on your target Services why not cache that data so first make a call to a distributed",
    "start": "1301039",
    "end": "1307760"
  },
  {
    "text": "caching system like m cach t right and much faster reduces the load on your",
    "start": "1307760",
    "end": "1313600"
  },
  {
    "text": "target service that's one pattern another pattern would be a little bit more advanced",
    "start": "1313600",
    "end": "1319320"
  },
  {
    "text": "what you can do is you can capture the results from each of these Services kind",
    "start": "1319320",
    "end": "1324360"
  },
  {
    "text": "of like a composed or materialized view if you will and then store that in your MIM casd copy right again reduces the",
    "start": "1324360",
    "end": "1331960"
  },
  {
    "text": "load on your target Ser dependency Services by a lot moving forward bottlenecks and",
    "start": "1331960",
    "end": "1340559"
  },
  {
    "text": "hotpots what are they imagine again remember I said we need to keep the service dependency graph in our mind",
    "start": "1340559",
    "end": "1347640"
  },
  {
    "text": "this is one service dependency graph in which app service X Y and Z they all",
    "start": "1347640",
    "end": "1353720"
  },
  {
    "text": "depend on user account service okay so what happens in this scenario is that",
    "start": "1353720",
    "end": "1359320"
  },
  {
    "text": "every single request that goes to the application translates into four",
    "start": "1359320",
    "end": "1364600"
  },
  {
    "text": "requests to the user account service so essentially that creates a bottleneck that creates a hotspot for that",
    "start": "1364600",
    "end": "1370559"
  },
  {
    "text": "particular service right what's the solution well one of the solutions is to",
    "start": "1370559",
    "end": "1377120"
  },
  {
    "text": "Simply capture the very first application that makes a request into user user account service could just",
    "start": "1377120",
    "end": "1384400"
  },
  {
    "text": "simply keep that data and pass that data around as HTTP headers right so now there are two good",
    "start": "1384400",
    "end": "1392520"
  },
  {
    "text": "things that happen a you will reduce the load on user account service B you will",
    "start": "1392520",
    "end": "1399720"
  },
  {
    "text": "reduce the dependencies and that's a very good thing to do in microservices try your best to depend on as few depend",
    "start": "1399720",
    "end": "1408880"
  },
  {
    "text": "Services as possible all right another challenge",
    "start": "1408880",
    "end": "1414520"
  },
  {
    "text": "payload serialization so typically what happens in a microservices architecture you kind",
    "start": "1414520",
    "end": "1420600"
  },
  {
    "text": "of daisy chain your requests right service a depends on service B which",
    "start": "1420600",
    "end": "1425760"
  },
  {
    "text": "needs to call service C which blah blah blah right so what happens there is that",
    "start": "1425760",
    "end": "1431440"
  },
  {
    "text": "the overall response time increases and it especially increases and creates problems if you use different",
    "start": "1431440",
    "end": "1438520"
  },
  {
    "text": "serialization mechanism yeah so if you use AO and another service responds back in XML",
    "start": "1438520",
    "end": "1445200"
  },
  {
    "text": "another one tries to do Json now you have to pay the overload um overhead of",
    "start": "1445200",
    "end": "1451000"
  },
  {
    "text": "actually deserializing it and serializing it deserializing it serializing it so that's a you know",
    "start": "1451000",
    "end": "1458279"
  },
  {
    "text": "tough choice so one of the ideas uh is to just embrace you know a single",
    "start": "1458279",
    "end": "1464720"
  },
  {
    "text": "serialization format because these are micros services in the back end nobody needs to care",
    "start": "1464720",
    "end": "1470559"
  },
  {
    "text": "about you know a Json or an XML API choose one and go with it it produces",
    "start": "1470559",
    "end": "1476559"
  },
  {
    "text": "your overall you know uh serialization overhead dependency management we talked",
    "start": "1476559",
    "end": "1483799"
  },
  {
    "text": "a lot about dependencies right target dependencies it's a challenge to manage",
    "start": "1483799",
    "end": "1488919"
  },
  {
    "text": "the dependencies what do I mean by that um in a microservices architecture your",
    "start": "1488919",
    "end": "1495840"
  },
  {
    "text": "application the one on the top depends on many many Target dependency services",
    "start": "1495840",
    "end": "1501640"
  },
  {
    "text": "in this diagram A B C all the way to R remember earlier in the talk I said one",
    "start": "1501640",
    "end": "1508279"
  },
  {
    "text": "single semicolon brought down the all of Netflix site you would you would think",
    "start": "1508279",
    "end": "1514600"
  },
  {
    "text": "embracing microservices architecture would make us much more available and",
    "start": "1514600",
    "end": "1519640"
  },
  {
    "text": "better not true not true how because even if you",
    "start": "1519640",
    "end": "1524679"
  },
  {
    "text": "got one Rogue dependency service in this case dep dependency ey the same thing",
    "start": "1524679",
    "end": "1530480"
  },
  {
    "text": "can happen which is your user request threads can block and go uh latent on",
    "start": "1530480",
    "end": "1537039"
  },
  {
    "text": "talking to that one dependency service and pretty soon all of your threads are occupied just talking to that one",
    "start": "1537039",
    "end": "1543520"
  },
  {
    "text": "dependency service so you're host what's the",
    "start": "1543520",
    "end": "1549120"
  },
  {
    "text": "solution again what's the theme we've open source yet another Library called historics so if you are familiar with",
    "start": "1549120",
    "end": "1556200"
  },
  {
    "text": "distributed systems concept like circuit Breakers retries bulkheading fall back",
    "start": "1556200",
    "end": "1562240"
  },
  {
    "text": "that's what his provides you with so what's the concept it's pretty simple and so what we do is we take all of",
    "start": "1562240",
    "end": "1569720"
  },
  {
    "text": "these calls to the dependency services and create threat spools uh uh thread pools specific to that dependency",
    "start": "1569720",
    "end": "1576799"
  },
  {
    "text": "service so in this particular case five threads are allocated to talk to dependency I so if dependency I goes",
    "start": "1576799",
    "end": "1583799"
  },
  {
    "text": "south it's okay it's only five threads right the rest of your ecosystem rest of",
    "start": "1583799",
    "end": "1590360"
  },
  {
    "text": "your threads are doing just fine so Hy is your friend when it comes to guarding",
    "start": "1590360",
    "end": "1596279"
  },
  {
    "text": "your uh guarding yourself from your dependency Services scaling",
    "start": "1596279",
    "end": "1603480"
  },
  {
    "text": "dependencies another challenge what happens is that let's",
    "start": "1603480",
    "end": "1608799"
  },
  {
    "text": "assume you got 100 requests per second coming into your application right um",
    "start": "1608799",
    "end": "1614600"
  },
  {
    "text": "what if the load changes and now you got 200 request per second you have to scale your particular",
    "start": "1614600",
    "end": "1622279"
  },
  {
    "text": "application of course what about your services what about your target Services they need to be scaled up as well right",
    "start": "1622279",
    "end": "1629520"
  },
  {
    "text": "so what happen so what we do at at Netflix is we use AWS Autos scaling and",
    "start": "1629520",
    "end": "1636440"
  },
  {
    "text": "that's your friend why because if you configure AWS",
    "start": "1636440",
    "end": "1642520"
  },
  {
    "text": "asgs with RPS or with CPU load average as and when the load on your particular",
    "start": "1642520",
    "end": "1649640"
  },
  {
    "text": "Target service increases it's going to autoscale itself right so now you got a well orchestrated system um which allows",
    "start": "1649640",
    "end": "1657320"
  },
  {
    "text": "you to scale up and down as your load increases or decreases for those that are",
    "start": "1657320",
    "end": "1663320"
  },
  {
    "text": "sufficiently Advanced we've blogged about predictive autoscaling right it's different from",
    "start": "1663320",
    "end": "1669559"
  },
  {
    "text": "reactive autoscaling predictive especially if you're company has got very high scale and it follows a certain",
    "start": "1669559",
    "end": "1675919"
  },
  {
    "text": "pattern in the case of Netflix even ings are peak time right daytime is not as",
    "start": "1675919",
    "end": "1682279"
  },
  {
    "text": "much weekends are peak time right so there's a trend and scryer uh and we",
    "start": "1682279",
    "end": "1688200"
  },
  {
    "text": "blogged about it what it does is it predicts what the scale is going to be 5 minutes from now and scale up the",
    "start": "1688200",
    "end": "1694519"
  },
  {
    "text": "instances accordingly so go look up scrier on the tech blog load",
    "start": "1694519",
    "end": "1700720"
  },
  {
    "text": "balancers interesting topic right when when you have a microservices",
    "start": "1700720",
    "end": "1706600"
  },
  {
    "text": "architecture you got choices you can have elbs perhaps fronting each of your microservices but the challenge is since",
    "start": "1706600",
    "end": "1714240"
  },
  {
    "text": "you got hundreds of microservices you will really need to configure hundreds of corresponding elbs right that's",
    "start": "1714240",
    "end": "1721720"
  },
  {
    "text": "that's one thing so that's just the way to create elbs and um what we've done at Netflix",
    "start": "1721720",
    "end": "1728519"
  },
  {
    "text": "is we've put these marks of load balancing on the client side so we have",
    "start": "1728519",
    "end": "1734039"
  },
  {
    "text": "this uh open source library for IPC called ribbon which I'm going to talk about and it's got a built-in smart load",
    "start": "1734039",
    "end": "1741000"
  },
  {
    "text": "balancer which load balances request across each of these microservices and it's specially well",
    "start": "1741000",
    "end": "1748200"
  },
  {
    "text": "tuned for AWS what it does is it looks at statistics in terms of the request",
    "start": "1748200",
    "end": "1753960"
  },
  {
    "text": "that have been outstanding to each of these instances in the cloud Zone a Zone B Zone C and it employs statistical",
    "start": "1753960",
    "end": "1760799"
  },
  {
    "text": "inference to know which zones to award which instances to aoid and so you get",
    "start": "1760799",
    "end": "1767159"
  },
  {
    "text": "the you know benefits of doing a client side load balancer via the open source",
    "start": "1767159",
    "end": "1772279"
  },
  {
    "text": "Library called ribbon so to summarize on the load",
    "start": "1772279",
    "end": "1777360"
  },
  {
    "text": "balancer the best practice is to use the elbs on your public Edge API gateways",
    "start": "1777360",
    "end": "1783240"
  },
  {
    "text": "and for your internal mure or backend microservices you can employ client side",
    "start": "1783240",
    "end": "1788480"
  },
  {
    "text": "load balancing right service dependency visualization",
    "start": "1788480",
    "end": "1794600"
  },
  {
    "text": "that's another challenge why is that a challenge if you are anything like Netflix you got hundreds and hundreds of",
    "start": "1794600",
    "end": "1802440"
  },
  {
    "text": "microservices it's kind of like Where is Waldo right where are you in the picture",
    "start": "1802440",
    "end": "1808279"
  },
  {
    "text": "way over there um if you are a developer you would want to answer the following",
    "start": "1808279",
    "end": "1813320"
  },
  {
    "text": "questions how many dependencies does my service have what's the call volume are",
    "start": "1813320",
    "end": "1818720"
  },
  {
    "text": "there any dependency Services running hot remember the user account Hots spot that I talked about so these are",
    "start": "1818720",
    "end": "1824200"
  },
  {
    "text": "questions you need to answer and the first thing you really need to do is to have a good service dependency",
    "start": "1824200",
    "end": "1830760"
  },
  {
    "text": "visualization tool else you'll be like the cat trying to unravel the threads in the ball so what",
    "start": "1830760",
    "end": "1838720"
  },
  {
    "text": "we've done at Netflix is we've invested in a service visualization tool and we call it salp and it gives you a much",
    "start": "1838720",
    "end": "1846399"
  },
  {
    "text": "simplified view of your service dependency graph in this particular example there's an edge service talking",
    "start": "1846399",
    "end": "1852360"
  },
  {
    "text": "to a Gateway and you can hover on the edge between the notes and you can find out what what is the call volume how",
    "start": "1852360",
    "end": "1859279"
  },
  {
    "text": "many requests are going through what's the average latency what's the median you know what's the 99 percentile",
    "start": "1859279",
    "end": "1864960"
  },
  {
    "text": "latency these are good tools to have this is a small demo of an actual",
    "start": "1864960",
    "end": "1871600"
  },
  {
    "text": "Netflix dependency graph um the service names have been anonymized and what you",
    "start": "1871600",
    "end": "1877880"
  },
  {
    "text": "can do is you can hover over the edge one of those you know dark blue things or there when you click on them you will",
    "start": "1877880",
    "end": "1884360"
  },
  {
    "text": "get the call volume between these two notes uh so on and and so forth another thing that happens in the microservices",
    "start": "1884360",
    "end": "1891000"
  },
  {
    "text": "architecture is which service caused the failure when things go south in a",
    "start": "1891000",
    "end": "1896600"
  },
  {
    "text": "monolithic application you know there's only one application but in a microservices any of these hundreds of",
    "start": "1896600",
    "end": "1903639"
  },
  {
    "text": "micros service could have been the culprit typically it's going to be a blaming game now ask him I don't know",
    "start": "1903639",
    "end": "1909519"
  },
  {
    "text": "maybe it's him maybe it's his service right so really what you need to do is",
    "start": "1909519",
    "end": "1914559"
  },
  {
    "text": "it becomes difficult to grip through hundreds and hundreds of machines with logs what you need is a distributed GP",
    "start": "1914559",
    "end": "1922039"
  },
  {
    "text": "set of a system or you can use a log event Pipeline and you could use AWS",
    "start": "1922039",
    "end": "1927720"
  },
  {
    "text": "kindnesses or we open sourced another system um again this is the internal",
    "start": "1927720",
    "end": "1932880"
  },
  {
    "text": "Netflix distributed GP system called biopsis it's capable of doing a GP on",
    "start": "1932880",
    "end": "1938440"
  },
  {
    "text": "all of your log files across thousands of AWS instances that's one way to do it",
    "start": "1938440",
    "end": "1945480"
  },
  {
    "text": "another way is via Netflix zuro so you pipe you essentially pipe all of your",
    "start": "1945480",
    "end": "1950799"
  },
  {
    "text": "log events through the single Pipeline and then you use Hadoop or any of the other realtime analysis tools to to",
    "start": "1950799",
    "end": "1958960"
  },
  {
    "text": "understand where the problem is in a micros service so where are we we talked about",
    "start": "1958960",
    "end": "1965320"
  },
  {
    "text": "Challen a few challenges we talked some of the solutions so what are the best",
    "start": "1965320",
    "end": "1970559"
  },
  {
    "text": "practices let's go through some of the best practices one best practice is to",
    "start": "1970559",
    "end": "1977279"
  },
  {
    "text": "isolate each of your micros service and AWS Security Group is your friend when",
    "start": "1977279",
    "end": "1982840"
  },
  {
    "text": "you own a micros service you want to make sure that you cannot will not get dossed right by your own infrastructure",
    "start": "1982840",
    "end": "1990159"
  },
  {
    "text": "uh you need to guard yourself from who can talk to your particular service so",
    "start": "1990159",
    "end": "1995480"
  },
  {
    "text": "use the AWS security groups as one way to do that that's one best practice",
    "start": "1995480",
    "end": "2000720"
  },
  {
    "text": "another one is test your resiliency that is a definite good best",
    "start": "2000720",
    "end": "2006760"
  },
  {
    "text": "practice I'm going to quote Ben Franklin here he said there are only two things certain in life death and taxes I'm",
    "start": "2006760",
    "end": "2015840"
  },
  {
    "text": "going to add to that and say there are actually three things certain in life death taxes and outages in production",
    "start": "2015840",
    "end": "2024559"
  },
  {
    "text": "guaranteed right so what you need to do is test the resiliency of your services",
    "start": "2024559",
    "end": "2031279"
  },
  {
    "text": "test them for latency test them for errors test them for what happens if an entire dependency service goes away",
    "start": "2031279",
    "end": "2038679"
  },
  {
    "text": "earlier today there was a talk um and Josh and NES colleagues of mine talked about fit so the concept there is what",
    "start": "2038679",
    "end": "2047480"
  },
  {
    "text": "happens if a particular service is not available in this case let's assume that",
    "start": "2047480",
    "end": "2052878"
  },
  {
    "text": "the three um Services lined up in red are not available what does that mean",
    "start": "2052879",
    "end": "2058839"
  },
  {
    "text": "for your ecosystem it's an important question to answer so fit is the talk that Nar Josh",
    "start": "2058839",
    "end": "2066480"
  },
  {
    "text": "gave earlier today for the how many people attended that awesome for those that did not",
    "start": "2066480",
    "end": "2072000"
  },
  {
    "text": "again the videos and the presentation will be available so I highly recommend to go through that",
    "start": "2072000",
    "end": "2078240"
  },
  {
    "text": "content Simon Army anybody here has not heard of Netflix chaos",
    "start": "2078240",
    "end": "2084599"
  },
  {
    "text": "monkey all right so pretty much everyone knows about it so again employ San Army",
    "start": "2084599",
    "end": "2090000"
  },
  {
    "text": "to make sure that your microservices architecture can withstand all sorts of",
    "start": "2090000",
    "end": "2095240"
  },
  {
    "text": "failures and be highly available all right good dependency management tool or",
    "start": "2095240",
    "end": "2101839"
  },
  {
    "text": "deployment management tool anybody heard of Netflix",
    "start": "2101839",
    "end": "2107440"
  },
  {
    "text": "Asgard all right so Asgard is the open source tool we use in order to do U",
    "start": "2107520",
    "end": "2112960"
  },
  {
    "text": "deployment and management and it's got really a lot of good uh Concepts built",
    "start": "2112960",
    "end": "2118000"
  },
  {
    "text": "in into it Concepts like Canary red black pushes these are all your friend",
    "start": "2118000",
    "end": "2123280"
  },
  {
    "text": "when you a friend when you deploy a microservices based architecture",
    "start": "2123280",
    "end": "2128560"
  },
  {
    "text": "yeah so now we talked about I mean so far we talked about some best practices",
    "start": "2128560",
    "end": "2134200"
  },
  {
    "text": "earlier I mentioned that interprocess communication is the backbone of a microservices architecture so let's go a",
    "start": "2134200",
    "end": "2140520"
  },
  {
    "text": "little bit deeper into interprocess communication so at Netflix interprocess communication is a",
    "start": "2140520",
    "end": "2148800"
  },
  {
    "text": "pretty meaty area and if you look at this uh thing on the left hand side you will see ribbon and you'll see a few",
    "start": "2148800",
    "end": "2156119"
  },
  {
    "text": "components there I'll talk about them on this right hand side you'll see Server right interprocess communication is",
    "start": "2156119",
    "end": "2161839"
  },
  {
    "text": "nothing but communication between a client and a server as we discussed earlier Eureka is the service registry",
    "start": "2161839",
    "end": "2169200"
  },
  {
    "text": "and ribbon the client consults Eureka to get a list of instances that it can talk to uh if it",
    "start": "2169200",
    "end": "2176319"
  },
  {
    "text": "wants to Target a particular server and it employs its load balancer uh in order",
    "start": "2176319",
    "end": "2181640"
  },
  {
    "text": "to pick the right service to talk to and all the resilient features that we talked about caching remember caching",
    "start": "2181640",
    "end": "2188760"
  },
  {
    "text": "that's provided by EV cache remember the circuit breaker the fall tolerance logic",
    "start": "2188760",
    "end": "2194720"
  },
  {
    "text": "all of that is provided by hiss so that really is a simplified picture if you will of our inter process",
    "start": "2194720",
    "end": "2202079"
  },
  {
    "text": "communication and we employ Apache HTTP client uh which does H you know mostly",
    "start": "2202079",
    "end": "2209160"
  },
  {
    "text": "rest calls between client and server we were we are happy with this",
    "start": "2209160",
    "end": "2214760"
  },
  {
    "text": "architecture but there's one thing that we wanted to improve and that's",
    "start": "2214760",
    "end": "2220160"
  },
  {
    "text": "throughput when you em Embrace microservices architecture remember there's going to be a fan out right you",
    "start": "2220160",
    "end": "2227319"
  },
  {
    "text": "have to talk to n number of dependency Services if you talk to these services in a Serial fashion you're going to",
    "start": "2227319",
    "end": "2234160"
  },
  {
    "text": "increase your overall response time it's better to make make these calls in an",
    "start": "2234160",
    "end": "2239560"
  },
  {
    "text": "asynchronous manner perhaps as a badge call right um for anybody that's uh done",
    "start": "2239560",
    "end": "2247119"
  },
  {
    "text": "asyn synchronous programming if you know about Java Futures and what they call as call back",
    "start": "2247119",
    "end": "2253319"
  },
  {
    "text": "hell right that's a difficult uh load to bear so what we've done is we came up",
    "start": "2253319",
    "end": "2260440"
  },
  {
    "text": "with this new stack called IPC 2.0 stack and essentially instead of going with",
    "start": "2260440",
    "end": "2265920"
  },
  {
    "text": "the blocking architecture we've gone completely reactive so instead of Apache HTTP client we now built another open-",
    "start": "2265920",
    "end": "2274319"
  },
  {
    "text": "source uh offering called as RX NTI on top of the popular nety uh library and",
    "start": "2274319",
    "end": "2280480"
  },
  {
    "text": "it allows us to do reactive extension pattern so what does it mean in reality",
    "start": "2280480",
    "end": "2287119"
  },
  {
    "text": "what it really means is that we now give you more options than just HTTP",
    "start": "2287119",
    "end": "2293319"
  },
  {
    "text": "you could do UDP web sockets ssse any of these right so it's a completely reactive architecture so when you're",
    "start": "2293319",
    "end": "2300240"
  },
  {
    "text": "doing microservices asynchronous batch operations are your friend and",
    "start": "2300240",
    "end": "2306520"
  },
  {
    "text": "reactive architecture is a fantastic architecture um to go through so why is",
    "start": "2306520",
    "end": "2312040"
  },
  {
    "text": "it why is this important it's important from a performance or throughput point of view because when you have a threaded",
    "start": "2312040",
    "end": "2318359"
  },
  {
    "text": "in one of the variations that I show over here um the Tomcat threaded model",
    "start": "2318359",
    "end": "2323400"
  },
  {
    "text": "has got a certain characteristics in terms of the number of requests that it can process essentially the throughput of the system it's been shown by many",
    "start": "2323400",
    "end": "2331839"
  },
  {
    "text": "benchmarks that if you Embrace a event Loop based system such as nodejs or net",
    "start": "2331839",
    "end": "2338000"
  },
  {
    "text": "you can almost double the throughput and that's a good thing why is that a good",
    "start": "2338000",
    "end": "2343640"
  },
  {
    "text": "thing because that allows you to reduce your ec2 footprint by quite a",
    "start": "2343640",
    "end": "2349560"
  },
  {
    "text": "bit right it more money in your pocket and so so reactive extensions are your",
    "start": "2349560",
    "end": "2356000"
  },
  {
    "text": "friend so if you look at ribbon 2.0 or Kon 2.0 these embrace the reactive",
    "start": "2356000",
    "end": "2362200"
  },
  {
    "text": "extensions pattern and it's good for your microservices architecture",
    "start": "2362200",
    "end": "2368400"
  },
  {
    "text": "so here's an example of a code of how it looks like it's pretty simple pretty",
    "start": "2368599",
    "end": "2373960"
  },
  {
    "text": "simple all you're doing here is defining a service called as a movie service and remember we talked about caching we",
    "start": "2373960",
    "end": "2380880"
  },
  {
    "text": "talked about historics so it's all annotation based all you're saying is that I need to talk to that rest URI",
    "start": "2380880",
    "end": "2387880"
  },
  {
    "text": "there called users user ID recommendations and in case that call does not go through uh use the fallback",
    "start": "2387880",
    "end": "2396240"
  },
  {
    "text": "Handler that I annotated there and oh by the way before you make that call please",
    "start": "2396240",
    "end": "2402920"
  },
  {
    "text": "verify that it's not in the cash if it's in the cache I would prefer to get it from the cache right everything that we",
    "start": "2402920",
    "end": "2410000"
  },
  {
    "text": "talked about in the previous slides all of that can be accomplished with just a",
    "start": "2410000",
    "end": "2415200"
  },
  {
    "text": "few annotations and three or four lines of code um pretty simple right so Netflix",
    "start": "2415200",
    "end": "2422480"
  },
  {
    "text": "OSS as as we've talked about we've open source quite a few of these libraries and frame Frameworks and you can",
    "start": "2422480",
    "end": "2429880"
  },
  {
    "text": "leverage them too you can leverage them too it's all on",
    "start": "2429880",
    "end": "2435119"
  },
  {
    "text": "GitHub uh a few that we went through today was Eureka for service registry",
    "start": "2435119",
    "end": "2440319"
  },
  {
    "text": "Carion for uh as a server server container ribbon for IPC client hric",
    "start": "2440319",
    "end": "2446640"
  },
  {
    "text": "Aras Servo there's about 40 or 48 I can't even keep track anymore quite a",
    "start": "2446640",
    "end": "2451800"
  },
  {
    "text": "few uh anybody attended russland talk on Netflix Osos and docker",
    "start": "2451800",
    "end": "2458119"
  },
  {
    "text": "okay if you haven't attended that talk it was just an hour ago I highly recommend that you catch the video or",
    "start": "2458119",
    "end": "2463880"
  },
  {
    "text": "presentation later on it shows how you can within 10 minutes 10 minutes it's all it'll take for you to take all of",
    "start": "2463880",
    "end": "2471280"
  },
  {
    "text": "these and put it on your laptop and give it to run that's it all right so please",
    "start": "2471280",
    "end": "2476839"
  },
  {
    "text": "go take a look at that talk so there are quite a few other talks of you know at",
    "start": "2476839",
    "end": "2482079"
  },
  {
    "text": "here at reinvent um again I highly recommend that you follow through and and see",
    "start": "2482079",
    "end": "2487960"
  },
  {
    "text": "what they have to offer takeaways finally why are we here for so",
    "start": "2487960",
    "end": "2496319"
  },
  {
    "text": "the takeaways are monolithic applications are good nothing wrong with them if your organization is in the",
    "start": "2496319",
    "end": "2502920"
  },
  {
    "text": "place in which that's the right architecture for you good to go however",
    "start": "2502920",
    "end": "2508200"
  },
  {
    "text": "microservices architecture has its own pros and benefits there are challenges",
    "start": "2508200",
    "end": "2513800"
  },
  {
    "text": "as well right it's not easy there are challenges the good news is that these challenges",
    "start": "2513800",
    "end": "2520119"
  },
  {
    "text": "have got easy solutions right and quite a few of these Solutions are open sourced especially by",
    "start": "2520119",
    "end": "2526280"
  },
  {
    "text": "Netflix and you can just embrace them the other important thing is that we have to be thankful to AWS as the public",
    "start": "2526280",
    "end": "2533720"
  },
  {
    "text": "Cloud offering because quite a few of these things are very difficult to achieve in a private data center things",
    "start": "2533720",
    "end": "2540240"
  },
  {
    "text": "like provisioning on demand provisioning things like autoscaling security groups",
    "start": "2540240",
    "end": "2545800"
  },
  {
    "text": "what whatever right and number of components that's been out there makes it much more easier to embrace",
    "start": "2545800",
    "end": "2551680"
  },
  {
    "text": "microservices compared to doing it in your own data center without these features so that's really the takeaway",
    "start": "2551680",
    "end": "2559160"
  },
  {
    "text": "and there's a lot of information out there in these links Tech blog.",
    "start": "2559160",
    "end": "2565440"
  },
  {
    "text": "netflix.com has got a lot of articles on the various architectural principles that we talked about all the open source",
    "start": "2565440",
    "end": "2573040"
  },
  {
    "text": "software is available on netflix. github.io um again if you are",
    "start": "2573040",
    "end": "2578319"
  },
  {
    "text": "particularly interested in microservices I recommend going through Martin Fowler's website there there's quite a",
    "start": "2578319",
    "end": "2585800"
  },
  {
    "text": "few and we've got a Netflix Booth downstairs and please come talk to us I",
    "start": "2585800",
    "end": "2591280"
  },
  {
    "text": "know this talk talked about a lot of different points and we are out there hanging out just to answer questions so",
    "start": "2591280",
    "end": "2598119"
  },
  {
    "text": "we're not there to sell Netflix service right uh I believe you're all using it",
    "start": "2598119",
    "end": "2604040"
  },
  {
    "text": "already so we're there to talk Tech we're there to talk Tech we'll be more",
    "start": "2604040",
    "end": "2609079"
  },
  {
    "text": "than happy to talk Tech I know I'm between you and the pub crawl um and if",
    "start": "2609079",
    "end": "2614720"
  },
  {
    "text": "you are doing the pub crawl as well I would love to chat with you diptanu any of your colleagues who are kind of",
    "start": "2614720",
    "end": "2619839"
  },
  {
    "text": "wearing the same kind of shirt today come grab us and more than happy to uh answer your questions so in the last few",
    "start": "2619839",
    "end": "2626720"
  },
  {
    "text": "minutes that we've got we can take some questions um any",
    "start": "2626720",
    "end": "2631880"
  },
  {
    "text": "questions yes sir",
    "start": "2631880",
    "end": "2636039"
  },
  {
    "text": "thank you thank you",
    "start": "2637839",
    "end": "2643280"
  }
]