[
  {
    "text": "hi there and welcome to today's AWS webinar Journey Through the cloud my name is Ryan and I'm a technical",
    "start": "640",
    "end": "6240"
  },
  {
    "text": "evangelist at AWS and I'm going to be your host for today's webinar and today's webinar is entitled powerful web",
    "start": "6240",
    "end": "12160"
  },
  {
    "text": "applications and specifically we're going to look at how you build such things in AWS and the journey webinar",
    "start": "12160",
    "end": "19640"
  },
  {
    "text": "that we're going to take you through um is really about looking at common use cases and common patterns that customers",
    "start": "19640",
    "end": "26760"
  },
  {
    "text": "have used to deploy their applications into the cloud and these form great stepping stones for you on your own",
    "start": "26760",
    "end": "33040"
  },
  {
    "text": "Journey so you can learn from other customers um implementations and pick up some best practice to bootstrap your own",
    "start": "33040",
    "end": "39559"
  },
  {
    "text": "projects and when we talk about building powerful web applications really this is about a common application type the",
    "start": "39559",
    "end": "46559"
  },
  {
    "text": "classic end tier web application and what we're going to do is summarize today some of the technical best",
    "start": "46559",
    "end": "51960"
  },
  {
    "text": "practice from customer projects um Binding Together many of the use cases that we see and the technologies that we",
    "start": "51960",
    "end": "58600"
  },
  {
    "text": "see in our customer B on what we'd consider a Mainstay of many Greenfield projects that web application and we're",
    "start": "58600",
    "end": "65400"
  },
  {
    "text": "going to draw upon some of the Technologies some of the concepts that we've discussed in previous journey",
    "start": "65400",
    "end": "71920"
  },
  {
    "text": "webinars and bind this together today in an agenda um which looks at some of the drivers behind why we need to create",
    "start": "71920",
    "end": "79240"
  },
  {
    "text": "powerful web applications some of the business and technological pushes that driv us in a particular direction and",
    "start": "79240",
    "end": "85320"
  },
  {
    "text": "we're going to describe the the rules if you like for how you build these applications and how you achieve",
    "start": "85320",
    "end": "91520"
  },
  {
    "text": "architectural success and we'll litter the webinar along the way with some customer",
    "start": "91520",
    "end": "97079"
  },
  {
    "text": "examples so without further Ado what do your users really want and what causes us to think about building really",
    "start": "97079",
    "end": "103360"
  },
  {
    "text": "powerful web applications well users want a fast and performant experience so it's very um",
    "start": "103360",
    "end": "111159"
  },
  {
    "text": "common knowledge and there's many different research um papers out there that will talk about the speed at which you respond to your customers will",
    "start": "111159",
    "end": "117680"
  },
  {
    "text": "dictate how uh long they stay around if you're slow they will go so responding",
    "start": "117680",
    "end": "123079"
  },
  {
    "text": "very fast being a generally consistent performing web application will keep your users happy and um satisfy their",
    "start": "123079",
    "end": "130879"
  },
  {
    "text": "need for a a a good On Demand fast experience and of course that web",
    "start": "130879",
    "end": "136840"
  },
  {
    "text": "application that they're accessing um should always be on and it should be accessible from anywhere there shouldn't be any dead spots on where they're",
    "start": "136840",
    "end": "142840"
  },
  {
    "text": "traveling maybe with a mobile phone and that application should always be available um there's nothing worse than",
    "start": "142840",
    "end": "148879"
  },
  {
    "text": "coming to a website and finding that it's it's not available or it's giving an HTTP 500 error or something",
    "start": "148879",
    "end": "156360"
  },
  {
    "text": "similar modern users of web applications also look for highly personalized and",
    "start": "157400",
    "end": "163440"
  },
  {
    "text": "Rich applications they expect even after the first visit maybe to an application site that their experiences customized",
    "start": "163440",
    "end": "171280"
  },
  {
    "text": "tailored to them that the Insight that the a provider of that service has drawn from their interactions has driven the",
    "start": "171280",
    "end": "178680"
  },
  {
    "text": "next stage of of presentation of pages or suggestions to them on a site so",
    "start": "178680",
    "end": "184440"
  },
  {
    "text": "personalized and Rich experiences are becoming the norm and of course users expect lots of",
    "start": "184440",
    "end": "190760"
  },
  {
    "text": "new features all of the time they expect things to be constantly innovating on behalf of them they expect new cool",
    "start": "190760",
    "end": "197519"
  },
  {
    "text": "fresh features to be delivered to them on a regular cycle not waiting months or",
    "start": "197519",
    "end": "202799"
  },
  {
    "text": "years to get refreshes of applications in those cases they'll s the application will seem stale and those users tend to",
    "start": "202799",
    "end": "209360"
  },
  {
    "text": "walk so all of this brings us to a powerful web application so satisfying those four",
    "start": "209360",
    "end": "215560"
  },
  {
    "text": "needs is what I will try and describe a set of rules around for you today as a reference material so that you can maybe",
    "start": "215560",
    "end": "222599"
  },
  {
    "text": "take some of those rules and Implement them in your own web applications so how do we do that",
    "start": "222599",
    "end": "228560"
  },
  {
    "text": "building powerful web applications a rule book so here are the rules and I'm going to step through six main rules and",
    "start": "228560",
    "end": "235319"
  },
  {
    "text": "there'll be some sub rules along the way as well so rule one is about servic all",
    "start": "235319",
    "end": "240560"
  },
  {
    "text": "web requests so it sounds obvious but make sure requests can get to your front door",
    "start": "240560",
    "end": "248480"
  },
  {
    "text": "so if you think about how an application is built and how a general web request is served the first thing we're going to",
    "start": "248480",
    "end": "255040"
  },
  {
    "text": "get is a request that's going to query a DNS service to try and find an address for the application of where you're",
    "start": "255040",
    "end": "260519"
  },
  {
    "text": "hosting from and that DNS will therefore point to your application but if that DNS service isn't working and your",
    "start": "260519",
    "end": "267360"
  },
  {
    "text": "clients can't resolve you then it doesn't really matter the efforts that you put into scaling your application or",
    "start": "267360",
    "end": "274320"
  },
  {
    "text": "making your data highly available becomes irrelevant because simply the request won't find you so making",
    "start": "274320",
    "end": "280919"
  },
  {
    "text": "requests get to your front door um in the context of AWS is all about the use of a service called Route",
    "start": "280919",
    "end": "287000"
  },
  {
    "text": "53 so Route 53 is our DNS service and",
    "start": "287000",
    "end": "292120"
  },
  {
    "text": "it's a globally provided service from all the edge locations that you may be familiar with uh where we serve for",
    "start": "292120",
    "end": "297479"
  },
  {
    "text": "example our cloudfront content from it's a highly scalable service and it's got some very nice features such as latency",
    "start": "297479",
    "end": "304000"
  },
  {
    "text": "based routing it integrates with other services like cloudfront S3 and ec2 and",
    "start": "304000",
    "end": "309560"
  },
  {
    "text": "integrates with I but the big thing about this is that it gives you a 100%",
    "start": "309560",
    "end": "314960"
  },
  {
    "text": "available SLA so if you check out the SLA at Route 53s SL on the Amazon",
    "start": "314960",
    "end": "320039"
  },
  {
    "text": "website you'll see that we provide a a response guarantee that we're going to respond to every request that comes at",
    "start": "320039",
    "end": "326440"
  },
  {
    "text": "us so in this way you can be sure that if someone comes comes and tries to find your front door the DNS service of Route",
    "start": "326440",
    "end": "333520"
  },
  {
    "text": "53 will direct you to the application where you're serving your content",
    "start": "333520",
    "end": "339199"
  },
  {
    "text": "from the next part of that is that when they do get to your front door um make sure that you open it when they arrive",
    "start": "339199",
    "end": "346280"
  },
  {
    "text": "so this is all about a standard um ha High availability high performance",
    "start": "346280",
    "end": "351600"
  },
  {
    "text": "architectural pattern that you'll find in many of our materials on our architectural best practice papers on",
    "start": "351600",
    "end": "357479"
  },
  {
    "text": "our website and it starts with the use of availability zones within a region",
    "start": "357479",
    "end": "363479"
  },
  {
    "text": "and the use of elastic load balancing across instances in those availability zones so shown here I've actually got",
    "start": "363479",
    "end": "370080"
  },
  {
    "text": "two regions and in each region the patterns the same I have an elastic load balancer shown in blue load balancing",
    "start": "370080",
    "end": "376680"
  },
  {
    "text": "across four instances in Orange two in each availability Zone in this case",
    "start": "376680",
    "end": "382440"
  },
  {
    "text": "within a region so my application servers are spread across availability zones which um imply that they are in",
    "start": "382440",
    "end": "389759"
  },
  {
    "text": "physically distinct uh facilities and the the load is load balanced to by a regional service the elastic load",
    "start": "389759",
    "end": "396560"
  },
  {
    "text": "balancer and by repeating that pattern in multiple regions around the world I can achieve a global coverage um and a",
    "start": "396560",
    "end": "404360"
  },
  {
    "text": "very high availability application deployment that ensures that when people do come knocking on our front door in",
    "start": "404360",
    "end": "409560"
  },
  {
    "text": "this case our Route 53 directing to our elastic load balances that our application servers will be available to",
    "start": "409560",
    "end": "416240"
  },
  {
    "text": "respond to that request the next rule rule 1 C is of course most",
    "start": "416240",
    "end": "423879"
  },
  {
    "text": "applications have some sort of data behind the scenes to drive the the response that's formed to the user so",
    "start": "423879",
    "end": "430400"
  },
  {
    "text": "rule 1 C is have the data to form a response so if we extend this pattern in",
    "start": "430400",
    "end": "435879"
  },
  {
    "text": "the diagram below um to include databases then our best practice would",
    "start": "435879",
    "end": "441840"
  },
  {
    "text": "look at us using something like relational database service for MySQL or Oracle or",
    "start": "441840",
    "end": "447639"
  },
  {
    "text": "mssql so the RDS wraps a database as a managed service and it provides for",
    "start": "447639",
    "end": "453080"
  },
  {
    "text": "things like MySQL and Oracle Master Slave replication across multiple availability zones and then across",
    "start": "453080",
    "end": "459400"
  },
  {
    "text": "regions you can Implement synchronization techniques so that you're synchronizing or sharding data",
    "start": "459400",
    "end": "464840"
  },
  {
    "text": "across multiple regions in the world and this way that you can be ensure that you have the data to form a response because",
    "start": "464840",
    "end": "471479"
  },
  {
    "text": "you have a a backbone or a data layer that is highly available in the event of",
    "start": "471479",
    "end": "476960"
  },
  {
    "text": "a problem um the relational data database service will flip your um DNS",
    "start": "476960",
    "end": "483120"
  },
  {
    "text": "entry for the database endpoint and promote a slave to a",
    "start": "483120",
    "end": "488240"
  },
  {
    "text": "master so rule two um service requests as fast as",
    "start": "489159",
    "end": "495560"
  },
  {
    "text": "possible so part of this again falls back on Route 53 so one of the features",
    "start": "495840",
    "end": "500919"
  },
  {
    "text": "of Route 53 is the ability for it to choose the fastest route to a given endpoint so servicing requests as fast",
    "start": "500919",
    "end": "508039"
  },
  {
    "text": "as possible in this case we mean going to a region where we're serving our application servers from that is closest",
    "start": "508039",
    "end": "514680"
  },
  {
    "text": "so as a request comes in hits Route 53 Route 53 will choose the fastest route",
    "start": "514680",
    "end": "519959"
  },
  {
    "text": "to that given user for performing a response in this case directing or returning a DNS entry for region a which",
    "start": "519959",
    "end": "527720"
  },
  {
    "text": "is giving the fastest response from Route 53 to the low balancer so the DNS entry returned when this case could be",
    "start": "527720",
    "end": "534200"
  },
  {
    "text": "for example Singapore if we're hosting in a Singapore region for somebody in Asia Pac could be Sydney if they in",
    "start": "534200",
    "end": "540880"
  },
  {
    "text": "Australia so you can spread your application servers around regions in the globe and use Route 53 to ensure",
    "start": "540880",
    "end": "546959"
  },
  {
    "text": "that wherever your users are particularly you have a global user base you have the best possible response",
    "start": "546959",
    "end": "552000"
  },
  {
    "text": "times for that user another rule rule 2B is offload",
    "start": "552000",
    "end": "558440"
  },
  {
    "text": "your application servers your application servers need to be doing the tasks that are most relevant to the",
    "start": "558440",
    "end": "563880"
  },
  {
    "text": "application and nothing more so any tasks that are are wasting clock cycle",
    "start": "563880",
    "end": "569560"
  },
  {
    "text": "on delivering say static content should be offloaded and cloudfront is a way",
    "start": "569560",
    "end": "575120"
  },
  {
    "text": "that you can front those application servers and distribute your content to Edge locations for the best possible",
    "start": "575120",
    "end": "581640"
  },
  {
    "text": "response at the same time you will be offloading your application",
    "start": "581640",
    "end": "587480"
  },
  {
    "text": "servers um from performing those tasks and therefore you can probably scale",
    "start": "588160",
    "end": "593399"
  },
  {
    "text": "back those server uh clusters so in this diagram here I've got cloudfront",
    "start": "593399",
    "end": "598440"
  },
  {
    "text": "fronting a load balancer in this case fronting an autoscaling group with some",
    "start": "598440",
    "end": "604839"
  },
  {
    "text": "instances in it which is serving my Dynamic content so we can see serve from ec2 is my PHP content which is",
    "start": "604839",
    "end": "612240"
  },
  {
    "text": "dynamically generated now cloudfront is also here serving static content which",
    "start": "612240",
    "end": "618040"
  },
  {
    "text": "I've stored in S3 so S3 being the simple storage service where I can store things with very high durability um a right",
    "start": "618040",
    "end": "625680"
  },
  {
    "text": "once read many web service so ideal for hosting this sort of content content and we can see that cloudfront I put a rule",
    "start": "625680",
    "end": "632160"
  },
  {
    "text": "there which is saying SL imagesstar shall be served from An Origin in this case S3 whereas star PHP",
    "start": "632160",
    "end": "640880"
  },
  {
    "text": "is served from my load balancer and my cluster within ec2 then cloud from will distribute that content to wherever my",
    "start": "640880",
    "end": "647200"
  },
  {
    "text": "Edge location users happen to be so first request from somebody in London would make a request to the origin",
    "start": "647200",
    "end": "652639"
  },
  {
    "text": "server and then from that point forward that pop in London would host the content locally and therefore subsequent",
    "start": "652639",
    "end": "658839"
  },
  {
    "text": "request get a very fast response the beauty of uh things like cloudfront is",
    "start": "658839",
    "end": "663959"
  },
  {
    "text": "that you can front this with a single C name such as my site.com and you can Implement such a pattern with very low",
    "start": "663959",
    "end": "670320"
  },
  {
    "text": "impact to your application behind the scenes with that sort of",
    "start": "670320",
    "end": "674959"
  },
  {
    "text": "pattern so looking at that a bit differently in terms of offloading the application load and therefore meeting",
    "start": "677440",
    "end": "683040"
  },
  {
    "text": "our rule which is to do things as fast as possible so focusing our application servers on the tasks that they need to",
    "start": "683040",
    "end": "688079"
  },
  {
    "text": "be doing generating dynamic content without cloudfront we might have a cluster of six instances and they may",
    "start": "688079",
    "end": "693800"
  },
  {
    "text": "under be under load and firing off know CPU um utilization requests or alarms",
    "start": "693800",
    "end": "699320"
  },
  {
    "text": "through something like cloudwatch with cloudfront we can offload some of that",
    "start": "699320",
    "end": "704480"
  },
  {
    "text": "processing and the serving of that web content onto cloudfront and we'll be using a an optimized Network between",
    "start": "704480",
    "end": "710720"
  },
  {
    "text": "cloudfront Edge locations and ec2 and we can scale down the number of servers that we're using to serve the response",
    "start": "710720",
    "end": "717320"
  },
  {
    "text": "so here RDS and I've got my app server was on top I've reduced from six to three and I've introduced S3 and Cloud",
    "start": "717320",
    "end": "722839"
  },
  {
    "text": "front into the mix so all in all I can generally improve the performance of my response time and I can offload server",
    "start": "722839",
    "end": "730240"
  },
  {
    "text": "load and therefore reduce some costs so a comparative chart with no CDN I would have a response time that's high and a",
    "start": "730240",
    "end": "736760"
  },
  {
    "text": "server load that's high I can then use CDN for my static content only and get a series of gains but with cloudfront I",
    "start": "736760",
    "end": "743920"
  },
  {
    "text": "can also front Dynamic content and have very very low ttls or even ttls are zero",
    "start": "743920",
    "end": "749000"
  },
  {
    "text": "on Dynamic pages and simply Leverage The optimized TCP Network between Edge and",
    "start": "749000",
    "end": "754279"
  },
  {
    "text": "backend servers and offload some of TCP creation and tear down that will result",
    "start": "754279",
    "end": "759920"
  },
  {
    "text": "in a lower utilization on CPU on the servers behind the",
    "start": "759920",
    "end": "765000"
  },
  {
    "text": "scenes another thing rule 2C is cach it if you can so you can be in a situation",
    "start": "765320",
    "end": "772320"
  },
  {
    "text": "where you're scaling databases to a very high level in order to handle the request rate that's hitting them um if",
    "start": "772320",
    "end": "778760"
  },
  {
    "text": "you find yourself in the situations you want to serve commonly or frequently requested and slow changing data from a",
    "start": "778760",
    "end": "785440"
  },
  {
    "text": "scalable cache and in this case a mcash d managed framework called elasticache",
    "start": "785440",
    "end": "790920"
  },
  {
    "text": "so shown in the diagram here I fronted my RDS master and slave with an",
    "start": "790920",
    "end": "796720"
  },
  {
    "text": "in-memory cache built on elastic cache that spread across availability zones and here I've got automatically created",
    "start": "796720",
    "end": "802560"
  },
  {
    "text": "four instances in each availability Zone that's going to front commonly accessed content and therefore I can reduce the",
    "start": "802560",
    "end": "808560"
  },
  {
    "text": "load on the database server and improve the overall performance of my application because I'm going to get a",
    "start": "808560",
    "end": "813920"
  },
  {
    "text": "much faster hit from elasticache than I will from a database so cach it if you",
    "start": "813920",
    "end": "821199"
  },
  {
    "text": "can rule 2D is um around the performance of databases and the latency that we may",
    "start": "821199",
    "end": "828560"
  },
  {
    "text": "get from requests that we can't cache so shown here as a chart where I have database query performance versus scale",
    "start": "828560",
    "end": "836759"
  },
  {
    "text": "and with a relational database or any database a desired um consistency and predictability on performance is the",
    "start": "836759",
    "end": "842839"
  },
  {
    "text": "straight line I've shown there so regardless of the scale of my data or the database that I'm operating at I",
    "start": "842839",
    "end": "848560"
  },
  {
    "text": "want to get a consistent database query performance so that I can predict how my application will perform for end users",
    "start": "848560",
    "end": "855759"
  },
  {
    "text": "but what actually happens is as I scale my database as my my data sets get larger the number of Records in my",
    "start": "855759",
    "end": "861560"
  },
  {
    "text": "databases grows the indexes grow around that I actually get degraded performance",
    "start": "861560",
    "end": "866959"
  },
  {
    "text": "with scale and the challenges that we have in terms of bridging that gap of things like how do we Shard our",
    "start": "866959",
    "end": "872720"
  },
  {
    "text": "databases implementing data caching where we can the provisioning of multiple clusters of databases and the",
    "start": "872720",
    "end": "878880"
  },
  {
    "text": "management of those clusters and the fault management or the fault uh diagnosis when something goes wrong it",
    "start": "878880",
    "end": "884759"
  },
  {
    "text": "becomes an increasingly difficult operations task to manage large scale relational",
    "start": "884759",
    "end": "889839"
  },
  {
    "text": "databases this is where Dynamo DB comes in so Dynamite DB is our um managed",
    "start": "889839",
    "end": "895880"
  },
  {
    "text": "nosql data store that gives consistent low latency at very large scales with",
    "start": "895880",
    "end": "902320"
  },
  {
    "text": "zero admin so predictable performance and single digigit latencies for certain data structures so it's a nosql store so",
    "start": "902320",
    "end": "910040"
  },
  {
    "text": "essentially a key Value Store um non-relational so you have to think differently about your data models but",
    "start": "910040",
    "end": "915920"
  },
  {
    "text": "where you have hotspots in your data structures you can consider using a Dynamo table because you can provision",
    "start": "915920",
    "end": "923519"
  },
  {
    "text": "the amount of throughput that you require so it could be that you start off with five reads writes per second",
    "start": "923519",
    "end": "929319"
  },
  {
    "text": "and we will provision the right Hardware behind the scenes and charge your data across a Dynamo service running on SSD",
    "start": "929319",
    "end": "936759"
  },
  {
    "text": "drives to maintain the desired throughput if you then want a 100 read",
    "start": "936759",
    "end": "942079"
  },
  {
    "text": "writes per second a th000 10,000 you can simply dial up the capacity and pay for",
    "start": "942079",
    "end": "947360"
  },
  {
    "text": "that provision through put and we will do all the work of managing the cluster behind the scenes delivering average",
    "start": "947360",
    "end": "953440"
  },
  {
    "text": "single digigit millisecond service side latencies so you can be sure that for those hotpots on your data structures",
    "start": "953440",
    "end": "959120"
  },
  {
    "text": "that are getting hit a lot and are very latency sensitive that your end users won't feel the impact of a degrading",
    "start": "959120",
    "end": "965079"
  },
  {
    "text": "performance on a relational structure okay so that's rule one and two rule three is handle requests at any",
    "start": "965079",
    "end": "973279"
  },
  {
    "text": "scale so we've managed to serve the requests we're serving them as fast as possible when they hit us now scale",
    "start": "973279",
    "end": "980199"
  },
  {
    "text": "starts to come many hundreds of thousands of users we need to handle them at any scale so rule 3A is scale up so this",
    "start": "980199",
    "end": "988959"
  },
  {
    "text": "this is a way that you can buy a lot of time in your architectures starting with small instances and then simply choosing",
    "start": "988959",
    "end": "994959"
  },
  {
    "text": "a larger instance as the need dictates so there's a whole range of instance types that you can choose from um and",
    "start": "994959",
    "end": "1001759"
  },
  {
    "text": "indeed there's there's more than my slide is already out of date because we have um new second generation class of",
    "start": "1001759",
    "end": "1007920"
  },
  {
    "text": "instances being released in the US soon to come to Europe where we have changing the the ratios between CPU and memory um",
    "start": "1007920",
    "end": "1014959"
  },
  {
    "text": "and you can even choose instances backed with SSD drives on the local ephemeral storage so scale up on ec2",
    "start": "1014959",
    "end": "1022959"
  },
  {
    "text": "instances of course you can scale out so where your architecture enables you to",
    "start": "1022959",
    "end": "1028839"
  },
  {
    "text": "do so we would encourage you to scale out because you can take advantage of things like autoscaling so Autos scaling",
    "start": "1028839",
    "end": "1035918"
  },
  {
    "text": "is the ability for the servers behind a particular workload to expand in number",
    "start": "1035919",
    "end": "1041640"
  },
  {
    "text": "or contract based upon the demand being placed upon that cluster so shown here is a an autoscaling group has a minimum",
    "start": "1041640",
    "end": "1049880"
  },
  {
    "text": "size of four that could expand to a maximum size of 200 based upon some sort",
    "start": "1049880",
    "end": "1055039"
  },
  {
    "text": "of trigger and the triggers can be varying so they could be based upon alarm metrics from cloudwatch they could",
    "start": "1055039",
    "end": "1061880"
  },
  {
    "text": "be custom metrics written for your application or they could be by schedule for example so scaling out by",
    "start": "1061880",
    "end": "1068840"
  },
  {
    "text": "autoscaling you could initiate a simple CLI call and set the desired capacity of",
    "start": "1068840",
    "end": "1074440"
  },
  {
    "text": "your cluster so maybe you see from your monitoring Frameworks that your load is is increasing and you want to add 20%",
    "start": "1074440",
    "end": "1081520"
  },
  {
    "text": "more capacity to your server pool a single CLI command will do that you",
    "start": "1081520",
    "end": "1086799"
  },
  {
    "text": "could have a schedule that every Friday night your application is is heavily loaded and on a Saturday morning it's",
    "start": "1086799",
    "end": "1092760"
  },
  {
    "text": "not so you could double your capacity on a Friday lunchtime and then half your capacity on a Saturday morning for",
    "start": "1092760",
    "end": "1099159"
  },
  {
    "text": "example or by policy and this is the dynamic aspect of Auto scaling so this is responding to changing conditions so",
    "start": "1099159",
    "end": "1106200"
  },
  {
    "text": "following say cloudwatch metrics maybe a a CPU across a cluster or it could be",
    "start": "1106200",
    "end": "1112280"
  },
  {
    "text": "latency as seen from an elastic load balancer as that starts to degrade add more um servers to the cluster to",
    "start": "1112280",
    "end": "1120039"
  },
  {
    "text": "perform the particular task in hand and Autos scaling also feeds into higher availability because autoscaling Works",
    "start": "1120039",
    "end": "1126799"
  },
  {
    "text": "across availability zones it can rebalance the number of servers that you have in any availability Zone to ensure",
    "start": "1126799",
    "end": "1132679"
  },
  {
    "text": "that you have an even spread of capacity so how that works is that if an availability Zone has a problem let's",
    "start": "1132679",
    "end": "1139280"
  },
  {
    "text": "say I had 10 servers across two availability zones Auto balancing will ensure that 10 servers exist in this",
    "start": "1139280",
    "end": "1147080"
  },
  {
    "text": "remaining single availability Zone by starting five new ones in that availability Zone and when availability",
    "start": "1147080",
    "end": "1153480"
  },
  {
    "text": "zones U come back up and I have two available to me again autoscaling will rebalance and put five in each for you",
    "start": "1153480",
    "end": "1160799"
  },
  {
    "text": "so it'll always ensure that you have the right capacity but always ensure that it's balanced as well as possible across",
    "start": "1160799",
    "end": "1166200"
  },
  {
    "text": "availability zones for ha so examples preemptive scaling which",
    "start": "1166200",
    "end": "1172080"
  },
  {
    "text": "I've discussed regular scaling on schedule um Dynamic scalings sqsq dep",
    "start": "1172080",
    "end": "1178360"
  },
  {
    "text": "for example average CPU load EB latency and of course the auto rebalancing I've just",
    "start": "1178360",
    "end": "1185280"
  },
  {
    "text": "mentioned another aspect of scaling um in AWS is the ability to dial up",
    "start": "1185559",
    "end": "1192159"
  },
  {
    "text": "capacity so I mentioned Dynamo DB being able to provision a certain capacity",
    "start": "1192159",
    "end": "1198320"
  },
  {
    "text": "behind a table by selecting a desired rate that you might wish to achieve um",
    "start": "1198320",
    "end": "1204360"
  },
  {
    "text": "and behind the scenes we will going and provision the right amount of hardware and do the right amount of sharding to ensure that you can achieve that",
    "start": "1204360",
    "end": "1211120"
  },
  {
    "text": "provision capacity is about dialing it up so a simple knob which you can tune to give you the capacity you require and",
    "start": "1211120",
    "end": "1218360"
  },
  {
    "text": "you will pay for that capacity regardless of whether you use it or not so different from maybe scaling up where",
    "start": "1218360",
    "end": "1223440"
  },
  {
    "text": "you only pay for the instances that are being run at any particular time um and you're not paying for the maximum amount",
    "start": "1223440",
    "end": "1229360"
  },
  {
    "text": "of an Autos scaling group for example provision capacity gives you the ability and the Comfort to set a level that you",
    "start": "1229360",
    "end": "1235080"
  },
  {
    "text": "wish something to perform at and that extends also to the elastic Block store which is the um the volumes behind ec2",
    "start": "1235080",
    "end": "1242799"
  },
  {
    "text": "instances and behind relational database service so if you have particular intensive workflows that require",
    "start": "1242799",
    "end": "1249840"
  },
  {
    "text": "consistency in the provisioned io against dis volumes you can provision iops on a volume um and then you can",
    "start": "1249840",
    "end": "1256960"
  },
  {
    "text": "stripe those volumes and Achieve very High IO rates against um EBS block",
    "start": "1256960",
    "end": "1263880"
  },
  {
    "text": "stores so Shazam is a customer example so popular music um recognition and",
    "start": "1264400",
    "end": "1269600"
  },
  {
    "text": "tagging sites so during the Super Bowl um they talked about using Dynamo DB to",
    "start": "1269600",
    "end": "1275880"
  },
  {
    "text": "handle unprecedented demand and Dynamo DB operated at over 500,000 rights per",
    "start": "1275880",
    "end": "1281840"
  },
  {
    "text": "second and they also drove an EMR cluster an elastic map produce which we'll talk about later in this this",
    "start": "1281840",
    "end": "1287919"
  },
  {
    "text": "webinar to more than 1 million rights per second um so capacity that they couldn't have brought online with a",
    "start": "1287919",
    "end": "1294760"
  },
  {
    "text": "traditional facility they were simply able to dial up and then have that capacity available to them a few minutes",
    "start": "1294760",
    "end": "1301320"
  },
  {
    "text": "later once the scaleout operation are completed and their table was provisioned at the new levels that they",
    "start": "1301320",
    "end": "1307240"
  },
  {
    "text": "required so a huge amount of capacity brought on on Tab which they could dial",
    "start": "1307240",
    "end": "1312320"
  },
  {
    "text": "back down again once the demand um went past so truly highs scale nosql database",
    "start": "1312320",
    "end": "1320360"
  },
  {
    "text": "so rules 1 two and three really dealt with fundamentals of",
    "start": "1320600",
    "end": "1325720"
  },
  {
    "text": "architecture and how to uh ensure that we service requests when they hits how to do that as fast as possible and to do",
    "start": "1325720",
    "end": "1332559"
  },
  {
    "text": "that at any scale rule four moves us into more subtle architectural um",
    "start": "1332559",
    "end": "1339600"
  },
  {
    "text": "patterns and methods which lead upon our last journey of the webinar service which is simplifying architecture with",
    "start": "1339600",
    "end": "1346200"
  },
  {
    "text": "services so rather than installing ing things and um managing those and",
    "start": "1346200",
    "end": "1351360"
  },
  {
    "text": "therefore spending a lot of time managing what we call undifferentiated heavy lifting such as installing",
    "start": "1351360",
    "end": "1356919"
  },
  {
    "text": "middleware software into your application server environments managing those ensuring those scale um you can",
    "start": "1356919",
    "end": "1363919"
  },
  {
    "text": "flip that ratio of 7030 to spending more time on your business by letting the",
    "start": "1363919",
    "end": "1370360"
  },
  {
    "text": "cloud provider in this case AWS take on the management of common infrastructure",
    "start": "1370360",
    "end": "1375600"
  },
  {
    "text": "um from computes but also to Software so that you can actually spend time configuring Cloud assets as opposed to",
    "start": "1375600",
    "end": "1382480"
  },
  {
    "text": "doing all the fundamental undifferentiated heavy lifting installing managing monitoring those Frameworks so more time focusing on your",
    "start": "1382480",
    "end": "1389159"
  },
  {
    "text": "business or your application by simplifying your architecture through the use of services rather than",
    "start": "1389159",
    "end": "1394640"
  },
  {
    "text": "installing a running software so some of those services that I've I've mentioned already a relational",
    "start": "1394640",
    "end": "1400919"
  },
  {
    "text": "database service and Dynamo DB so rather than install a database on an ec2",
    "start": "1400919",
    "end": "1406320"
  },
  {
    "text": "instance deal with the um the backups the snapshotting of that database deal",
    "start": "1406320",
    "end": "1412080"
  },
  {
    "text": "with the high availability clustering and the monitoring for event of failover you can simply use database as a service",
    "start": "1412080",
    "end": "1418799"
  },
  {
    "text": "so choose to start and instance of a particular size running a particular database platform version and tick the",
    "start": "1418799",
    "end": "1424919"
  },
  {
    "text": "box to say haa and tick the box to say I'll have 35 days worth of backup history please and we'll take care of",
    "start": "1424919",
    "end": "1431799"
  },
  {
    "text": "all the management of that database for you and just provide you with an endpoint that you can consume in your apps likewise Dy DB takes away the the",
    "start": "1431799",
    "end": "1440880"
  },
  {
    "text": "management of large scale clusters for no SQL stores so whereas you might be installing a Cassandra or cluster",
    "start": "1440880",
    "end": "1448400"
  },
  {
    "text": "and you're going to have to scale that cluster manage many many instances in the cloud for dealing with running that",
    "start": "1448400",
    "end": "1454640"
  },
  {
    "text": "database Dynamo DB simply gives you a simple interface with desired throughput capacity and will take care of the fully",
    "start": "1454640",
    "end": "1461600"
  },
  {
    "text": "distributed nature of that cluster the fault tolerant architecture the resharding and management of the",
    "start": "1461600",
    "end": "1467200"
  },
  {
    "text": "performance of those index to give you consistent throughput but there are other services",
    "start": "1467200",
    "end": "1472760"
  },
  {
    "text": "that can uh really help you um simplify architecture improve overall reliability",
    "start": "1472760",
    "end": "1478600"
  },
  {
    "text": "and availability too because services such as sqs operate fundamentally at a",
    "start": "1478600",
    "end": "1483640"
  },
  {
    "text": "regional level so sqs is a queing service and q's are very common for",
    "start": "1483640",
    "end": "1488880"
  },
  {
    "text": "decoupling application components in your applications um ability for you to deposit a message in a queue and have",
    "start": "1488880",
    "end": "1495399"
  },
  {
    "text": "that read at some other point in time and have that Q reliably hold that message for you such that if end points",
    "start": "1495399",
    "end": "1502679"
  },
  {
    "text": "go down the que persists and things um can be restarted so a q becomes a fundamental um reliable store of a",
    "start": "1502679",
    "end": "1510520"
  },
  {
    "text": "critical piece of transactional information in many applications so that Q needs to be highly available and",
    "start": "1510520",
    "end": "1515720"
  },
  {
    "text": "reliable so rather than you install clusters of service to manage cues you can use Amazon sqs and at a very low",
    "start": "1515720",
    "end": "1522480"
  },
  {
    "text": "price point achieve the same sort of reliability as you achieve with S3 for your messages that the passing between",
    "start": "1522480",
    "end": "1529159"
  },
  {
    "text": "application nodes so highly reliable Regional level message store and you simply put and get messages from the",
    "start": "1529159",
    "end": "1535880"
  },
  {
    "text": "cues um simple workflow expands upon that so rather than maybe just doing Simple step processes where we deposit a",
    "start": "1535880",
    "end": "1543039"
  },
  {
    "text": "message from one application to another vir Q we might want to control decisions such as the content of that message",
    "start": "1543039",
    "end": "1549600"
  },
  {
    "text": "might drive moving to application A or B to do particularly different jobs as part of a workflow and simple workflow",
    "start": "1549600",
    "end": "1556720"
  },
  {
    "text": "enables you to take all the process cing State out of your application endpoints",
    "start": "1556720",
    "end": "1562360"
  },
  {
    "text": "and put them again into a regional service that's highly reliable so that state persists for long running",
    "start": "1562360",
    "end": "1568120"
  },
  {
    "text": "transactions and you implement a simple deci process which will decide what task should be done when under what",
    "start": "1568120",
    "end": "1574600"
  },
  {
    "text": "conditions so simple process logic defined in your favorite programming language as opposed to something like",
    "start": "1574600",
    "end": "1580120"
  },
  {
    "text": "bpml which is sophisticated hard to understand and",
    "start": "1580120",
    "end": "1585600"
  },
  {
    "text": "complicated um other services cloud search replaces the need for you to install maybe an open search framework",
    "start": "1585720",
    "end": "1592360"
  },
  {
    "text": "in the cloud so this is built upon the Amazon A9 search engine and you can simply start a search domain upload some",
    "start": "1592360",
    "end": "1598760"
  },
  {
    "text": "documents to an endpoint and have them indexed in the way that you choose and then you search against an endpoint and",
    "start": "1598760",
    "end": "1604080"
  },
  {
    "text": "get some Json results and this again is an elastic service that grows as the demand for searches increases so you can",
    "start": "1604080",
    "end": "1611600"
  },
  {
    "text": "get consistent performance out of search so search a very common use case um in many web",
    "start": "1611600",
    "end": "1616799"
  },
  {
    "text": "applications but at the back end of applications we also have the need to do some analysis and with have powerful web",
    "start": "1616799",
    "end": "1623720"
  },
  {
    "text": "applications with many users and many transactions hitting us a time we can generate very very large click logs or",
    "start": "1623720",
    "end": "1631279"
  },
  {
    "text": "application logs out the back end of them and gaining insight into those can be tricky in a timely fashion an elastic",
    "start": "1631279",
    "end": "1637000"
  },
  {
    "text": "map produce is a service that wraps Hadoop the uh framework for doing um",
    "start": "1637000",
    "end": "1642760"
  },
  {
    "text": "large scale parallel operations on data sets and we'll talk about Hadoop a bit later on",
    "start": "1642760",
    "end": "1649200"
  },
  {
    "text": "so SmugMug is an example of a company that uses Cloud search and uses Cloud search fundamentally to drive their",
    "start": "1649200",
    "end": "1656080"
  },
  {
    "text": "image sharing application so it's a game-changing technology um their CEO and chief geek talks about it about them",
    "start": "1656080",
    "end": "1662279"
  },
  {
    "text": "saving many months of re architecture and development Time by going with Cloud search with its simple endpoints as",
    "start": "1662279",
    "end": "1668559"
  },
  {
    "text": "opposed to managing and installing an open search cluster in their environment um everyone knows what a search box",
    "start": "1668559",
    "end": "1674919"
  },
  {
    "text": "looks like so this is SmugMug searching for Paris um and here we can see results for images from Paris and just like if",
    "start": "1674919",
    "end": "1682360"
  },
  {
    "text": "you went to Amazon retail site you would see search results with facets and",
    "start": "1682360",
    "end": "1687720"
  },
  {
    "text": "categories here my facets on photographs are the apertures and the number of",
    "start": "1687720",
    "end": "1692880"
  },
  {
    "text": "photos with different aperture settings can be seen there and you can achieve similar sort of facetting um and",
    "start": "1692880",
    "end": "1699559"
  },
  {
    "text": "grouping of of documents for a simple web interface for cloud",
    "start": "1699559",
    "end": "1705360"
  },
  {
    "text": "search Okay so we've simplified our architecture so rather than installing",
    "start": "1705640",
    "end": "1710919"
  },
  {
    "text": "pieces of software and managing the availability reliability and scale of those pieces of software we've pushed",
    "start": "1710919",
    "end": "1716760"
  },
  {
    "text": "common tasks into cloud services and consumed them on a same basis as we might consume an ec2 instance the next",
    "start": "1716760",
    "end": "1724080"
  },
  {
    "text": "rule for really powerful applications is where we start getting sophisticated around the operational management of the",
    "start": "1724080",
    "end": "1730519"
  },
  {
    "text": "application so automat operational management and everything is",
    "start": "1730519",
    "end": "1736640"
  },
  {
    "text": "programmable so within AWS everything is wrapped as a nice web service API and",
    "start": "1736640",
    "end": "1743399"
  },
  {
    "text": "those apis are wrapped via CLI command line interfaces um your favorite",
    "start": "1743399",
    "end": "1748600"
  },
  {
    "text": "programming language apis will expose them sdks and indeed our console is",
    "start": "1748600",
    "end": "1754080"
  },
  {
    "text": "built upon those same apis so you can access everything programmatically um and you can therefore achieve",
    "start": "1754080",
    "end": "1761000"
  },
  {
    "text": "sophisticated levels of automation with relative ease whether it be in your favorite scripting language or your",
    "start": "1761000",
    "end": "1767039"
  },
  {
    "text": "favorite programming langu language you can consider the AWS resource set as um",
    "start": "1767039",
    "end": "1774080"
  },
  {
    "text": "as transient and as accessible as instantiating an object in your code so when you need a server you can create",
    "start": "1774080",
    "end": "1780840"
  },
  {
    "text": "one programmatically when you're done with it you can destroy it programmatically and that drives um a",
    "start": "1780840",
    "end": "1786200"
  },
  {
    "text": "number of um philosophical changes in in how you consider compute and",
    "start": "1786200",
    "end": "1792120"
  },
  {
    "text": "architectures and what first of those is that you should think disposable if you like oneclick deployment so building",
    "start": "1792120",
    "end": "1799519"
  },
  {
    "text": "upon that ability to automate everything is a framework called cloud formation and I've drawn this out in this rule",
    "start": "1799519",
    "end": "1805039"
  },
  {
    "text": "because cloud formation lets you specify a complex set of resources that can be",
    "start": "1805039",
    "end": "1810960"
  },
  {
    "text": "created in a transactional way so it might be that you create a cloud formation template which is a a load",
    "start": "1810960",
    "end": "1818279"
  },
  {
    "text": "balancer with a series of application servers behind it caching servers and some DNS registrations and this could be",
    "start": "1818279",
    "end": "1825679"
  },
  {
    "text": "a unit of scaling and a very complicated application and that cloud formation template you could choose then to deploy",
    "start": "1825679",
    "end": "1833080"
  },
  {
    "text": "um that stack that stack set of components in a region and an availability Zone Around The World On",
    "start": "1833080",
    "end": "1839159"
  },
  {
    "text": "Demand on click or via programmatic call and when you're done with it you can throw that stack away and all those",
    "start": "1839159",
    "end": "1845240"
  },
  {
    "text": "resources get taken back and this is indeed the way that that many customers deploy very",
    "start": "1845240",
    "end": "1851720"
  },
  {
    "text": "sophisticated units of scaling Beyond a simple server there can be many hundreds of servers in a single stack and when",
    "start": "1851720",
    "end": "1859039"
  },
  {
    "text": "they're done with it they can dispose of it so think disposable oneclick deployments and cloud formation is a",
    "start": "1859039",
    "end": "1864200"
  },
  {
    "text": "great tool for you to achieve that next sort of rule around",
    "start": "1864200",
    "end": "1870880"
  },
  {
    "text": "operational management is design for failure um and Implement self-healing so",
    "start": "1870880",
    "end": "1876080"
  },
  {
    "text": "there's a number of techniques that you should consider to enable you to design",
    "start": "1876080",
    "end": "1881679"
  },
  {
    "text": "um and understand and accommodate failures but also to recover from them when they happen so boot strapping your",
    "start": "1881679",
    "end": "1888440"
  },
  {
    "text": "instances is the first kind of part of this so when an instance starts up um",
    "start": "1888440",
    "end": "1894279"
  },
  {
    "text": "get that instance to ask who am I what should I be doing what's my role within this architecture and then get that",
    "start": "1894279",
    "end": "1900440"
  },
  {
    "text": "instance to be configured dynamically upon receiving the an to that question and you can achieve this through the",
    "start": "1900440",
    "end": "1906399"
  },
  {
    "text": "metadata service within AWS with bootstrapping scripts that you install and bake into an Ami and for maybe",
    "start": "1906399",
    "end": "1913080"
  },
  {
    "text": "pulling configuration files or application content from S3 and classically this is what we call",
    "start": "1913080",
    "end": "1919120"
  },
  {
    "text": "bootstrapping another pile of Designing for failure is using the minimum pool size of Auto scaling so even if this is",
    "start": "1919120",
    "end": "1926200"
  },
  {
    "text": "one server put in an autoscaling group of minimum one maximum one then if any",
    "start": "1926200",
    "end": "1931799"
  },
  {
    "text": "health check fails from an ec2 perspective on the instance Autos scaling will take that out of the pool",
    "start": "1931799",
    "end": "1937919"
  },
  {
    "text": "and will replace it based upon the autoscaling configuration so it could just be a simple like for like",
    "start": "1937919",
    "end": "1943120"
  },
  {
    "text": "replacement to ensure that you always have a minimum set of capacity available so automatic",
    "start": "1943120",
    "end": "1948519"
  },
  {
    "text": "restarting or creating new resources throwing the old one away adding a new Fresh one and then Cloud watch is your",
    "start": "1948519",
    "end": "1955960"
  },
  {
    "text": "monitoring framework to enable you to know what's going on and then to drive those automated actions so autoscaling",
    "start": "1955960",
    "end": "1962399"
  },
  {
    "text": "could respond to it you could take actions to uh initiate cloud formation scripts and and various different",
    "start": "1962399",
    "end": "1968679"
  },
  {
    "text": "sophistications even getting into the worlds of Chef and puppets as Frameworks that you might install on instances to",
    "start": "1968679",
    "end": "1974600"
  },
  {
    "text": "to drive cookbooks and recipes um and a very commonly talked about",
    "start": "1974600",
    "end": "1981840"
  },
  {
    "text": "example nowadays is the Netflix chaos monkey the Netflix really take those principles to the extreme in that they",
    "start": "1981840",
    "end": "1990000"
  },
  {
    "text": "have an open-source um software agent which they've they've released called",
    "start": "1990000",
    "end": "1995080"
  },
  {
    "text": "chaos monkey that essentially runs around their environment and causes Havoc pulls things apart stops instances",
    "start": "1995080",
    "end": "2002039"
  },
  {
    "text": "destroys processes takes databases out um and it engenders a a design",
    "start": "2002039",
    "end": "2007360"
  },
  {
    "text": "philosophy and anyone that's writing application code for Netflix to think that that monkey could be running across",
    "start": "2007360",
    "end": "2012799"
  },
  {
    "text": "your code and turning it off at some point so they need to think about when service owners deploy parts of the",
    "start": "2012799",
    "end": "2017840"
  },
  {
    "text": "Netflix framework is how will my service respond in the event of a failure or a degraded performance and they're",
    "start": "2017840",
    "end": "2023960"
  },
  {
    "text": "designing from that up front such that the overall Global architecture of Netflix is highly fault tolerant and can",
    "start": "2023960",
    "end": "2030360"
  },
  {
    "text": "survive failers which happen all the time at very large scale statistically",
    "start": "2030360",
    "end": "2036080"
  },
  {
    "text": "if something will happen once in a million if you're operating at a significantly High scale web application",
    "start": "2036080",
    "end": "2041679"
  },
  {
    "text": "it will happen more often than not lastly rule six is about leveraging",
    "start": "2041679",
    "end": "2049079"
  },
  {
    "text": "some unique properties of the cloud so Cloud brings some fresh things to the game that we can leverage to make our",
    "start": "2049079",
    "end": "2055079"
  },
  {
    "text": "architectures more powerful and also to drive that satisfaction cycle back to our",
    "start": "2055079",
    "end": "2060320"
  },
  {
    "text": "users so optimizing costs is one of the things you can choose different instances to get different jobs done so",
    "start": "2060320",
    "end": "2066839"
  },
  {
    "text": "think about the density of compute you can get out of a particular instance type to drive a particular workload so",
    "start": "2066839",
    "end": "2073200"
  },
  {
    "text": "you might consider cluster computes to do encoding a videos versus you might just standard use the standard medium",
    "start": "2073200",
    "end": "2079560"
  },
  {
    "text": "instances to deliver a fleet of web servers to handle a particular task and there's different instance families and",
    "start": "2079560",
    "end": "2085720"
  },
  {
    "text": "shown here is a selection of them from high memories might be good for caching servers so mix and match the different",
    "start": "2085720",
    "end": "2092440"
  },
  {
    "text": "instance types to drive a particular type of workload but also those Heights can be",
    "start": "2092440",
    "end": "2098560"
  },
  {
    "text": "acquired in different ways so classic on demand Computing starts at 2 cents an",
    "start": "2098560",
    "end": "2103680"
  },
  {
    "text": "hour which is a page you go price for uh a Linux instance you grab it you pay for",
    "start": "2103680",
    "end": "2109359"
  },
  {
    "text": "that per hour and when you're done with it you stop paying um so great flexibility around the consumption of",
    "start": "2109359",
    "end": "2115079"
  },
  {
    "text": "computes but many servers base level servers within an environment will be running all the time and expected to be",
    "start": "2115079",
    "end": "2121440"
  },
  {
    "text": "on 24 by7 in this case you can reduce costs by reserving that capacity so a",
    "start": "2121440",
    "end": "2127720"
  },
  {
    "text": "billing mechanism in AWS allows you to purchase a reserved instance on a one or threeyear term so you pay a little bit",
    "start": "2127720",
    "end": "2134040"
  },
  {
    "text": "up front but then you receive a significant hourly discount um so you can achieve some fantastic rois by doing",
    "start": "2134040",
    "end": "2141160"
  },
  {
    "text": "this and this is a billing mechanism that layers when you're running a server of that particular type you'll receive",
    "start": "2141160",
    "end": "2146520"
  },
  {
    "text": "that discount then on the far right there we have spot instances so this is the ability for you to bid on unused ecq",
    "start": "2146520",
    "end": "2155880"
  },
  {
    "text": "capacity whose price for that capacity varies based upon the SL supply and demand being being put on that",
    "start": "2155880",
    "end": "2162720"
  },
  {
    "text": "particular instance type so great for use cases where you'll have flexibility",
    "start": "2162720",
    "end": "2168079"
  },
  {
    "text": "in when you might get the instances for requirement or that are only Fe feasible at a different economic rate so might be",
    "start": "2168079",
    "end": "2174880"
  },
  {
    "text": "very large scale load testing you want thousands of small instances to hit your website to simulate some user load you",
    "start": "2174880",
    "end": "2181160"
  },
  {
    "text": "can achieve that with spot instances at a much reduced price so a way of layering these",
    "start": "2181160",
    "end": "2187599"
  },
  {
    "text": "instance types reserved instances for things that always running on demand for the middle section of variability and",
    "start": "2187599",
    "end": "2194240"
  },
  {
    "text": "then for exceptional cases it might not happen that often you spot to soak up that extra demand",
    "start": "2194240",
    "end": "2201280"
  },
  {
    "text": "load I mentioned earlier elastic map produce and elastic map produce um",
    "start": "2201280",
    "end": "2206640"
  },
  {
    "text": "really allows you to drive upon those cost equations and Achieve analysis that",
    "start": "2206640",
    "end": "2211839"
  },
  {
    "text": "isn't feasible within a sort of normal classic fixed cluster size that you might have in your traditional data",
    "start": "2211839",
    "end": "2217599"
  },
  {
    "text": "sensors so elastic map produces the ability for you to split a computational task across many nodes many instances",
    "start": "2217599",
    "end": "2224800"
  },
  {
    "text": "and then aggregate the results back together afterwards to give you some sort of insight and it scales on a",
    "start": "2224800",
    "end": "2230400"
  },
  {
    "text": "pretty much linear basis so the more instances I add to a a map ruce cluster",
    "start": "2230400",
    "end": "2236359"
  },
  {
    "text": "the quicker I'll get the job done um and if you think about um you know having S3",
    "start": "2236359",
    "end": "2241960"
  },
  {
    "text": "as a source of data such as click clog analysis so you think about understanding what people have done on",
    "start": "2241960",
    "end": "2247319"
  },
  {
    "text": "your your web application by un by interrogating the logs you might have terabytes of log that you wish to",
    "start": "2247319",
    "end": "2254359"
  },
  {
    "text": "analyze that's only feasible if you can apply a significant amount of horsepower",
    "start": "2254359",
    "end": "2260240"
  },
  {
    "text": "to maybe do a simple computational counting task or some task across those",
    "start": "2260240",
    "end": "2265280"
  },
  {
    "text": "very large log files in which case you can deposit the logs into something like S3 you can write a very simple piece of",
    "start": "2265280",
    "end": "2271160"
  },
  {
    "text": "code in your favorite language and drop that into elastic map produce and elastic map produce will then go and",
    "start": "2271160",
    "end": "2276960"
  },
  {
    "text": "create a cluster with a distributed file system behind it that will enable you to",
    "start": "2276960",
    "end": "2282319"
  },
  {
    "text": "run that task across pieces of the data so we'll pull the data in spread it across many instances and then",
    "start": "2282319",
    "end": "2288760"
  },
  {
    "text": "afterwards we'll aggregate the results and output it back into say S3 but you can also then query that distributed",
    "start": "2288760",
    "end": "2294839"
  },
  {
    "text": "data set across the distributed file system and when the job's done that whole cluster will be",
    "start": "2294839",
    "end": "2300640"
  },
  {
    "text": "destroyed now think about the the cost Dynamic um because it scales linearly I",
    "start": "2300640",
    "end": "2306160"
  },
  {
    "text": "might have four instances is assigned to a job and that duration let's say takes 14 hours to do a particular task um and",
    "start": "2306160",
    "end": "2314560"
  },
  {
    "text": "that cost let's say we're using um an instance on on demand four instances at 40 hours and let's say for the sake of",
    "start": "2314560",
    "end": "2320720"
  },
  {
    "text": "argument that instance cost me 50 cents it will cost me $28 to run that job over",
    "start": "2320720",
    "end": "2325760"
  },
  {
    "text": "14 hours now if I add Five Spot instances to that um because I'm near",
    "start": "2325760",
    "end": "2332000"
  },
  {
    "text": "linear here I'm kind of doubling the capacity that I have behind um this job",
    "start": "2332000",
    "end": "2338040"
  },
  {
    "text": "I can expect the duration to take half as long so they're about 7 hours instead now the cost of this would be my",
    "start": "2338040",
    "end": "2345040"
  },
  {
    "text": "existing um price of on demand but for half the time so four instances at 7",
    "start": "2345040",
    "end": "2350240"
  },
  {
    "text": "hours at 50 is $14 and then my spot let's assume that my spot price is half",
    "start": "2350240",
    "end": "2356119"
  },
  {
    "text": "the on demand price and quite often it's significantly less than that so you can get far greater savings on the spot",
    "start": "2356119",
    "end": "2362800"
  },
  {
    "text": "Market um for example I think the last time I looked at cluster computes with $2.79 on demand and 56 on the spot",
    "start": "2362800",
    "end": "2371119"
  },
  {
    "text": "market so significant savings but in this example adding spot instances at",
    "start": "2371119",
    "end": "2377200"
  },
  {
    "text": "that half price gives me a total price of $22.75 and I get the job done in half",
    "start": "2377200",
    "end": "2384000"
  },
  {
    "text": "the time so I've paid less and I've got it done quicker okay so very unique",
    "start": "2384000",
    "end": "2389960"
  },
  {
    "text": "property of cloud in particular when we start thinking about paralyzation of jobs now this enables you to analyze",
    "start": "2389960",
    "end": "2396359"
  },
  {
    "text": "very large data set in a time frame that's feasible to actually do something with them so Yelp is a a popular um",
    "start": "2396359",
    "end": "2404560"
  },
  {
    "text": "city-based Yellow Pages that's coming to Europe quite um significantly at the moment it's growing in in size they run",
    "start": "2404560",
    "end": "2410720"
  },
  {
    "text": "about 200 of these elastic map produce jobs per day processing 300 three terabytes of data that's kicking out of",
    "start": "2410720",
    "end": "2417359"
  },
  {
    "text": "their web application servers so just dragging those logs into an EMR running continual Cycles on the drops to",
    "start": "2417359",
    "end": "2423480"
  },
  {
    "text": "generate content which sits behind their app servers so generating lists things",
    "start": "2423480",
    "end": "2428720"
  },
  {
    "text": "like autocomplete lists as people type on the search boxes spelling suggestions in their search boxes taking review",
    "start": "2428720",
    "end": "2435520"
  },
  {
    "text": "highlights Snippets and generating them into static content to drive their web app um doing analysis about who viewed",
    "start": "2435520",
    "end": "2442040"
  },
  {
    "text": "what also viewed this so they can generate those suggestions to users and also looking at things like top searches",
    "start": "2442040",
    "end": "2448240"
  },
  {
    "text": "and driving the adverts to place okay so fundamental driving a very you know dynamic application by taking these log",
    "start": "2448240",
    "end": "2455160"
  },
  {
    "text": "files churning them with with significant compute capacity to get them done in a time that makes sense to drop",
    "start": "2455160",
    "end": "2460640"
  },
  {
    "text": "them back into the app to make things feel very Dynamic another thing that you can get",
    "start": "2460640",
    "end": "2467040"
  },
  {
    "text": "with um the cloud is that you can get a supercomputer back end when you need it and drawing upon that the idea with",
    "start": "2467040",
    "end": "2472599"
  },
  {
    "text": "elastic map produce you can have thousands of nodes in elastic map produce cluster um if you need to do",
    "start": "2472599",
    "end": "2478200"
  },
  {
    "text": "some very computationally intensive tasks you can also generate highly interconnected um algorithms that run",
    "start": "2478200",
    "end": "2484480"
  },
  {
    "text": "across the supercomputer back end because our clust the compu instances operate in network placement groups so",
    "start": "2484480",
    "end": "2490440"
  },
  {
    "text": "that means that every node has full 10 gig full bisected network access to",
    "start": "2490440",
    "end": "2495480"
  },
  {
    "text": "every other node so they can pass messages between each other with with ease and very low latency and each of",
    "start": "2495480",
    "end": "2501119"
  },
  {
    "text": "these nodes can be significant in size so 60 gig ram 80 ec2 compute units so",
    "start": "2501119",
    "end": "2506280"
  },
  {
    "text": "you can run big compute tasks on ec2 and then when you're done with doing that",
    "start": "2506280",
    "end": "2511720"
  },
  {
    "text": "you can throw them away so common use cases for this might be um rendering image rendering visual izations uh",
    "start": "2511720",
    "end": "2518359"
  },
  {
    "text": "encodings and so on as well as scientific research okay so these are my rules",
    "start": "2518359",
    "end": "2524680"
  },
  {
    "text": "rules one through to six servicing all re requests um making sure that I serve them as fast as possible at any scale",
    "start": "2524680",
    "end": "2532560"
  },
  {
    "text": "simplifying my architecture for the use of services not installing and managing my own software automating everything so",
    "start": "2532560",
    "end": "2538760"
  },
  {
    "text": "that I can run this thing from you know the my iPhone um on the way home from",
    "start": "2538760",
    "end": "2544079"
  },
  {
    "text": "work and then to leverage some unique Cloud properties to drive insights and and some unique things from a cost",
    "start": "2544079",
    "end": "2550359"
  },
  {
    "text": "perspective and a performance perspective by using cloud services so circling back to what your",
    "start": "2550359",
    "end": "2557800"
  },
  {
    "text": "users want um they want a fast performant experience get that through elastic utility and capacity on demand",
    "start": "2557800",
    "end": "2565200"
  },
  {
    "text": "from AWS they want and always on accessible anywhere experience highly",
    "start": "2565200",
    "end": "2570280"
  },
  {
    "text": "available Global coverage regions availability zones architectural best practice Auto scaling to do balancing",
    "start": "2570280",
    "end": "2576839"
  },
  {
    "text": "across say it they want lots of new features all of the time so the ability",
    "start": "2576839",
    "end": "2583720"
  },
  {
    "text": "to do highly agile operations and automate things like the roll out of new application versions on a consistent and",
    "start": "2583720",
    "end": "2589760"
  },
  {
    "text": "continual basis um with AWS Automation and personalized and Rich web",
    "start": "2589760",
    "end": "2595200"
  },
  {
    "text": "application and experience costeffective storage of vast amounts of data that then can drive big data analytics with",
    "start": "2595200",
    "end": "2602400"
  },
  {
    "text": "things like Hadoop or cluster compute instances to drive the Insight um to give that highly personalized experience",
    "start": "2602400",
    "end": "2609319"
  },
  {
    "text": "from a user even after a very few interactions with your web applications so that's the rule book that I want to",
    "start": "2609319",
    "end": "2615480"
  },
  {
    "text": "deliver today hopefully you found that of value and it certainly covers most of the questions that people will ask us um",
    "start": "2615480",
    "end": "2622359"
  },
  {
    "text": "in various levels of how do I achieve this or how should I do that so gives you some best practice and drops some",
    "start": "2622359",
    "end": "2627480"
  },
  {
    "text": "some application services in the mix for you to consider if you want to um think about how all of those concepts are",
    "start": "2627480",
    "end": "2634119"
  },
  {
    "text": "applied there a great example of NASA TV so NASA TV use Route 53 to globally",
    "start": "2634119",
    "end": "2639839"
  },
  {
    "text": "distribute content across the world they're using multi- regions and multi availability zones they're using elastic",
    "start": "2639839",
    "end": "2645920"
  },
  {
    "text": "load balancing across multiple instances um they're using Cloud front to to offload content for delivering media and",
    "start": "2645920",
    "end": "2653359"
  },
  {
    "text": "they're using cloud formation to deliver big sophisticated Stacks which they units of scaling so they Encompass all",
    "start": "2653359",
    "end": "2660359"
  },
  {
    "text": "these things together and it's a an interesting example it's um not your classic web application but it's streaming media many you know eyeballs",
    "start": "2660359",
    "end": "2668040"
  },
  {
    "text": "on the the new content that comes back from the Curiosity Rover from Mars so if you want to find out more do",
    "start": "2668040",
    "end": "2674599"
  },
  {
    "text": "go to our aws.amazon.com website um you can obviously sign up to a free tier um and you can consume so a",
    "start": "2674599",
    "end": "2681559"
  },
  {
    "text": "lot of those services that I've discussed and have a play with them within that free tier you'll find architectural best practice white papers",
    "start": "2681559",
    "end": "2687880"
  },
  {
    "text": "up there um and also you'll find our next events so we have a a webinar on",
    "start": "2687880",
    "end": "2693359"
  },
  {
    "text": "cost optimization as our last in the journey series but if if you're looking for previous webinars you can search our",
    "start": "2693359",
    "end": "2699880"
  },
  {
    "text": "YouTube channel if you search for the journey through the cloud series you'll find all of these webinars um all",
    "start": "2699880",
    "end": "2705480"
  },
  {
    "text": "recorded for you to watch On Demand so thank you very much for joining us today um I hope you found it useful and",
    "start": "2705480",
    "end": "2711480"
  },
  {
    "text": "hopefully we'll meet any of you next week on our next webinar",
    "start": "2711480",
    "end": "2716960"
  }
]