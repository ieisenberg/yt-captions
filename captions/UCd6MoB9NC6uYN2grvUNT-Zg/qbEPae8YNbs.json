[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "welcome everyone hopefully that was a good break",
    "start": "89",
    "end": "5879"
  },
  {
    "text": "I am Brent Langston I have to look at the slide to remember what my name is I",
    "start": "5879",
    "end": "11670"
  },
  {
    "text": "work on the the containers team for AWS so my job is developer advocate and that",
    "start": "11670",
    "end": "19740"
  },
  {
    "text": "means I go around and I talk to startups I talk to large enterprises I talk to",
    "start": "19740",
    "end": "25500"
  },
  {
    "text": "developers and find out how are they using containers what are their pain",
    "start": "25500",
    "end": "32189"
  },
  {
    "text": "points what can we do to make their life easier I especially identify with developers",
    "start": "32189",
    "end": "38430"
  },
  {
    "text": "because well I've been one I've been in the sre world I've been a developer I've",
    "start": "38430",
    "end": "46500"
  },
  {
    "start": "41000",
    "end": "98000"
  },
  {
    "text": "been an Operations person I've helped build tumblr Spotify cloud passage and",
    "start": "46500",
    "end": "53969"
  },
  {
    "text": "hi Oscar comm which is a healthcare startup out of New York City so I've",
    "start": "53969",
    "end": "60780"
  },
  {
    "text": "been doing this for a little while and I've been using containers not the whole",
    "start": "60780",
    "end": "65820"
  },
  {
    "text": "way because they weren't that popular but as soon as I started seeing you know",
    "start": "65820",
    "end": "72420"
  },
  {
    "text": "what the possibilities were especially around packaging software I really got interested in it it made my life a lot",
    "start": "72420",
    "end": "79590"
  },
  {
    "text": "easier it made the lives of my fellow developers a lot easier and so you know",
    "start": "79590",
    "end": "86070"
  },
  {
    "text": "I sort of developed this this keen interest this passion around around containers so joining the containers",
    "start": "86070",
    "end": "93540"
  },
  {
    "text": "teams seem like a natural fit so in this talk what we're going to be taking a",
    "start": "93540",
    "end": "100409"
  },
  {
    "text": "look at is what are the various components available to you if you're",
    "start": "100409",
    "end": "105990"
  },
  {
    "text": "using ECS you know a lot of times ECS gets compared to other orchestrators",
    "start": "105990",
    "end": "114329"
  },
  {
    "text": "you know used to docker swarm you know I can run docker whatever on my laptop and",
    "start": "114329",
    "end": "121530"
  },
  {
    "text": "I can put that on an instance so you know how does ECS make things better",
    "start": "121530",
    "end": "127429"
  },
  {
    "text": "today kubernetes is quite popular so we get a lot of comparison questions",
    "start": "127429",
    "end": "133110"
  },
  {
    "text": "about kubernetes there's also Mae sews there's also rancher and and things like",
    "start": "133110",
    "end": "139380"
  },
  {
    "text": "that so you know what I want you to understand at the end of this talk is just what is the ECS ecosystem like and",
    "start": "139380",
    "end": "146760"
  },
  {
    "text": "what what do you get with it does anyone here use ECS specifically today raise",
    "start": "146760",
    "end": "154770"
  },
  {
    "text": "your hand awesome not very many so I think the vast majority of you guys are in the",
    "start": "154770",
    "end": "160260"
  },
  {
    "text": "right room what do you use just call out what do you use to orchestrate today",
    "start": "160260",
    "end": "166850"
  },
  {
    "text": "what's that kubernetes okay how about is",
    "start": "167330",
    "end": "172860"
  },
  {
    "text": "anyone just using their config management tools maybe chef or ansible",
    "start": "172860",
    "end": "178709"
  },
  {
    "text": "and you are launching I see hand in the back you're launching containers you",
    "start": "178709",
    "end": "185070"
  },
  {
    "text": "know on a per instance basis maybe instance types yeah this is very common",
    "start": "185070",
    "end": "191100"
  },
  {
    "text": "roadmap you know you start off with config management configuring instances and then you move on to using that same",
    "start": "191100",
    "end": "199980"
  },
  {
    "text": "config management to you know create instance types and then launch specific",
    "start": "199980",
    "end": "206160"
  },
  {
    "text": "containers on those instance types and you can go pretty far with that when it comes to then doing a deploy you know",
    "start": "206160",
    "end": "213810"
  },
  {
    "text": "the next version of your container however what you'll run into is you know",
    "start": "213810",
    "end": "220019"
  },
  {
    "text": "you have to go make a config update you know a chef change or you know some kind",
    "start": "220019",
    "end": "227519"
  },
  {
    "text": "of new parameter passed into an ansible playbook or something like that it's not",
    "start": "227519",
    "end": "233040"
  },
  {
    "text": "it's not impossible it's certainly even probably considered easy but it's not",
    "start": "233040",
    "end": "238290"
  },
  {
    "text": "super developer friendly either so one of the one of the things that containers",
    "start": "238290",
    "end": "243989"
  },
  {
    "text": "has sort of brought to the table along with easy packaging is easy deployment",
    "start": "243989",
    "end": "250620"
  },
  {
    "text": "and being able to put more tools for deployment back into the developers",
    "start": "250620",
    "end": "257220"
  },
  {
    "text": "hands so the developers can more or less deploy whenever they want or as their",
    "start": "257220",
    "end": "263430"
  },
  {
    "text": "code changes it means they can do a lot more sting they can do a lot more a lot more",
    "start": "263430",
    "end": "270380"
  },
  {
    "text": "sort of trial and error and they can push out code faster and they don't have",
    "start": "270380",
    "end": "275940"
  },
  {
    "text": "to necessarily involve the global config management system and get you know",
    "start": "275940",
    "end": "280980"
  },
  {
    "text": "approvals and and that kind of thing so in this talk we're going to be taking a",
    "start": "280980",
    "end": "286080"
  },
  {
    "text": "look at using an Orchestrator I highly recommend using any Orchestrator over",
    "start": "286080",
    "end": "292230"
  },
  {
    "text": "config management it's the next evolution of sort of the road that you're on not that you've done anything",
    "start": "292230",
    "end": "298050"
  },
  {
    "text": "wrong I think it's great but now you see what the limitations are so moving on to",
    "start": "298050",
    "end": "304050"
  },
  {
    "text": "an Orchestrator is certainly useful ECS is a very popular one and available to",
    "start": "304050",
    "end": "310890"
  },
  {
    "text": "you for free at a W us so we'll be looking at how to",
    "start": "310890",
    "end": "316280"
  },
  {
    "text": "do deploys how to ensure availability cost optimization we'll look at the",
    "start": "316280",
    "end": "323730"
  },
  {
    "text": "options that you have available to you we'll be looking at scaling and then",
    "start": "323730",
    "end": "329130"
  },
  {
    "text": "we'll be looking at monitoring and logging so we're going to go through all of these and and hit each point and sort",
    "start": "329130",
    "end": "337470"
  },
  {
    "text": "of show you an example of this in action at the end I'll point you to a website",
    "start": "337470",
    "end": "345450"
  },
  {
    "text": "that hopefully can recreate a lot of this for you and you know let you have",
    "start": "345450",
    "end": "352380"
  },
  {
    "text": "kind of a sample application and a sample cluster that you can poke at and and try out all this stuff and then",
    "start": "352380",
    "end": "359760"
  },
  {
    "text": "you'll be able to go and you know emulate that with your own code at your own pace okay so what are some of the",
    "start": "359760",
    "end": "367800"
  },
  {
    "start": "365000",
    "end": "643000"
  },
  {
    "text": "key components of ECS ECS is our Orchestrator but what else is there you",
    "start": "367800",
    "end": "373200"
  },
  {
    "text": "know it's it's one thing to just say you know with RDS for example if you're",
    "start": "373200",
    "end": "378300"
  },
  {
    "text": "going to use RDS what do you get well you get a database and you get to pick a flavor but ultimately you're getting a",
    "start": "378300",
    "end": "385290"
  },
  {
    "text": "database right and everyone knows how to use a database with ECS on the other hand you're just sort of that's the",
    "start": "385290",
    "end": "392250"
  },
  {
    "text": "starting point you're getting an Orchestrator but you should pair that",
    "start": "392250",
    "end": "397380"
  },
  {
    "text": "with additional components and so knowing what those are super useful ECS is a control plane",
    "start": "397380",
    "end": "406340"
  },
  {
    "text": "there aren't versions of ECS so if you're familiar with kubernetes or any",
    "start": "406340",
    "end": "411750"
  },
  {
    "text": "of the other orchestrators when you launch them there's a master control",
    "start": "411750",
    "end": "416849"
  },
  {
    "text": "plane and then there's a data plane which is where all of your containers",
    "start": "416849",
    "end": "422189"
  },
  {
    "text": "run you manage both and then anytime there's an update that comes out it's on",
    "start": "422189",
    "end": "427830"
  },
  {
    "text": "you to for to perform that update and depending on the orchestrator the",
    "start": "427830",
    "end": "433319"
  },
  {
    "text": "procedure for that can be complicated involved or maybe simple but there's a",
    "start": "433319",
    "end": "441479"
  },
  {
    "text": "procedure nonetheless with ECS there is no update there is no new version we",
    "start": "441479",
    "end": "448229"
  },
  {
    "text": "update the version in the background and you are always just using whatever the latest version of the control plane is",
    "start": "448229",
    "end": "454680"
  },
  {
    "text": "so we're just providing you an API and you are telling us through task",
    "start": "454680",
    "end": "460800"
  },
  {
    "text": "definitions how to deploy which apps where what how they need to be secured",
    "start": "460800",
    "end": "467669"
  },
  {
    "text": "and stuff like that and then we through our control plane will talk to your",
    "start": "467669",
    "end": "474449"
  },
  {
    "text": "clusters so your clusters are the data plane you bring instances and you",
    "start": "474449",
    "end": "480449"
  },
  {
    "text": "configure them to be part of a nice es cluster and then we are able to through",
    "start": "480449",
    "end": "485759"
  },
  {
    "text": "the agent able to talk directly to those instances and instruct them on which",
    "start": "485759",
    "end": "491669"
  },
  {
    "text": "containers to run where if we see that a container has died will relaunch it etc",
    "start": "491669",
    "end": "498889"
  },
  {
    "text": "of course you heard about far gate so far gate is the the option that you have",
    "start": "498979",
    "end": "506580"
  },
  {
    "text": "available to you for not managing the data plane either so with ECS you never manage the control",
    "start": "506580",
    "end": "514529"
  },
  {
    "text": "plane you don't have to worry about it and now you don't have to worry about the data plane either and again think",
    "start": "514529",
    "end": "520320"
  },
  {
    "text": "about updates you know when what was the exploit that just came out a month ago",
    "start": "520320",
    "end": "526920"
  },
  {
    "text": "that I can't think of the name off the top of my head it just left me",
    "start": "526920",
    "end": "532590"
  },
  {
    "text": "everyone had to update their instances had to do kernel updates had to do you",
    "start": "532590",
    "end": "537810"
  },
  {
    "text": "know pet new patches of software update a.m. eyes etc so when that when that was",
    "start": "537810",
    "end": "545010"
  },
  {
    "text": "announced it was days of work for companies with Fargate for example we",
    "start": "545010",
    "end": "552270"
  },
  {
    "text": "simply patched for you and so when you launched your next round of containers",
    "start": "552270",
    "end": "558180"
  },
  {
    "text": "maybe it was just your next deploy suddenly you were protected again and you didn't have to do any work on your",
    "start": "558180",
    "end": "564960"
  },
  {
    "text": "own so having a managed data plane can be very useful the way I like to think",
    "start": "564960",
    "end": "571890"
  },
  {
    "text": "about it is if there's something that allows me to get a competitive edge by",
    "start": "571890",
    "end": "579000"
  },
  {
    "text": "me running whatever myself then I'll do it myself if on the other hand I can't",
    "start": "579000",
    "end": "585630"
  },
  {
    "text": "gain a competitive edge by running my own instances running my own operating system then why bother it's just extra",
    "start": "585630",
    "end": "594240"
  },
  {
    "text": "work for nothing additional I want to focus on running my application I don't",
    "start": "594240",
    "end": "600210"
  },
  {
    "text": "want to focus on running the operating system and making changes at the operating system level so I tend to",
    "start": "600210",
    "end": "607920"
  },
  {
    "text": "favor Fargate however if you know there's something that you need maybe",
    "start": "607920",
    "end": "614820"
  },
  {
    "text": "it's GPUs you know you need to be able to make fast calculations and the way",
    "start": "614820",
    "end": "621570"
  },
  {
    "text": "you've coded your application you can take advantage of GPUs well that's gonna give you a competitive edge run your own",
    "start": "621570",
    "end": "627690"
  },
  {
    "text": "instances with ECS every cluster is a hybrid cluster so you can launch Fargate",
    "start": "627690",
    "end": "633990"
  },
  {
    "text": "tasks you can launch ec2 based tasks it doesn't matter they're all in the same cluster they can",
    "start": "633990",
    "end": "640410"
  },
  {
    "text": "all communicate with each other so when we're talking about components the ECS",
    "start": "640410",
    "end": "646860"
  },
  {
    "start": "643000",
    "end": "726000"
  },
  {
    "text": "component it's good to break down you know like what do I have to do and what does AWS do for me so I have a few",
    "start": "646860",
    "end": "654750"
  },
  {
    "text": "slides on this for the various components and you can see what does AWS",
    "start": "654750",
    "end": "660810"
  },
  {
    "text": "take care of at the top and then what do I have to take care of at the bottom and what I want is for the stuff at the",
    "start": "660810",
    "end": "668750"
  },
  {
    "text": "bottom to either not exist I want to minimize the things that I have to do or I want those things to give me some",
    "start": "668750",
    "end": "677210"
  },
  {
    "text": "competitive advantage right so when it comes to ECS the control plane AWS takes",
    "start": "677210",
    "end": "685640"
  },
  {
    "text": "care of all of the security for it patching it making sure that it's updated it does all of the monitoring to",
    "start": "685640",
    "end": "692330"
  },
  {
    "text": "make sure that the service itself is healthy it is highly available it scales",
    "start": "692330",
    "end": "698150"
  },
  {
    "text": "well and of course we're paying for it you don't it's no extra cost for you",
    "start": "698150",
    "end": "703670"
  },
  {
    "text": "what does that leave for you to worry about deploys it it means that you are",
    "start": "703670",
    "end": "710060"
  },
  {
    "text": "out there ready to trigger a deploy of your next applicate of your next version",
    "start": "710060",
    "end": "715460"
  },
  {
    "text": "of your application so that's something that you know rolling out updates that's a competitive advantage for you so",
    "start": "715460",
    "end": "722440"
  },
  {
    "text": "definitely this is the right balance for ECR we take care of monitoring",
    "start": "722440",
    "end": "731410"
  },
  {
    "start": "726000",
    "end": "786000"
  },
  {
    "text": "availability scaling patching you take care of again deployment making sure",
    "start": "731410",
    "end": "738230"
  },
  {
    "text": "your images are pushed the cost control you pay based on the space that you take",
    "start": "738230",
    "end": "745280"
  },
  {
    "text": "up so we give you tools lifecycle policies is one tool that we launched in",
    "start": "745280",
    "end": "750860"
  },
  {
    "text": "2017 we give you tools to help you manage that space but ultimately it's up",
    "start": "750860",
    "end": "756620"
  },
  {
    "text": "to you to decide I want to pay for this much or I want to pay for that much and",
    "start": "756620",
    "end": "762640"
  },
  {
    "text": "you can clean out images as as you're willing and then of course security we",
    "start": "762640",
    "end": "769430"
  },
  {
    "text": "provide you with our back we provide you with iam integration but it's up to you",
    "start": "769430",
    "end": "774800"
  },
  {
    "text": "to create those linkages and and specify that this instance is allowed to talk to",
    "start": "774800",
    "end": "781760"
  },
  {
    "text": "that ECR repository",
    "start": "781760",
    "end": "786130"
  },
  {
    "start": "786000",
    "end": "851000"
  },
  {
    "text": "The Container instances themselves this is again where you will have the most responsibility you can build your own",
    "start": "787210",
    "end": "793840"
  },
  {
    "text": "a.m. eyes you can use a pre created ami that we provide you but ultimately",
    "start": "793840",
    "end": "801010"
  },
  {
    "text": "nearly all responsibility for this layer is on you",
    "start": "801010",
    "end": "806650"
  },
  {
    "text": "so you deploy these a.m. eyes you patch them you scale them up or down paying",
    "start": "806650",
    "end": "814150"
  },
  {
    "text": "for them and managing those costs is up to you monitoring availability security all up",
    "start": "814150",
    "end": "821290"
  },
  {
    "text": "to you so this is where the most work for you exists now when you think about",
    "start": "821290",
    "end": "827020"
  },
  {
    "text": "every other orchestration platform there will have been more work on the other",
    "start": "827020",
    "end": "832330"
  },
  {
    "text": "slides for you this would still be the same with Fargate how much of this goes",
    "start": "832330",
    "end": "838390"
  },
  {
    "text": "away I mean think again think about that when it comes to paying for Fargate factor in",
    "start": "838390",
    "end": "844240"
  },
  {
    "text": "that most of these responsibilities go away and you don't have to worry about",
    "start": "844240",
    "end": "849760"
  },
  {
    "text": "them anymore so container instances we do provide you building blocks for",
    "start": "849760",
    "end": "856360"
  },
  {
    "start": "851000",
    "end": "1176000"
  },
  {
    "text": "managing your responsibilities so when it comes to deploying of course you can use cloud formation infrastructure as",
    "start": "856360",
    "end": "863290"
  },
  {
    "text": "code is highly recommended the way that we do it natively is cloud formation you can also use terraform you can use chef",
    "start": "863290",
    "end": "870070"
  },
  {
    "text": "you can use ansible salt all of those are at your disposal they all make use",
    "start": "870070",
    "end": "877210"
  },
  {
    "text": "of the sdk so you can write your own if you want you know i've i've known people who write their own go apps to launch",
    "start": "877210",
    "end": "886350"
  },
  {
    "text": "resources so that's certainly up to you security for our back type applications",
    "start": "886350",
    "end": "893320"
  },
  {
    "text": "or our back type access we have I am for auditing we have inspector for analyzing",
    "start": "893320",
    "end": "901150"
  },
  {
    "text": "we have VPC flow logs and then we have additional you know security offerings",
    "start": "901150",
    "end": "906760"
  },
  {
    "text": "everything that is available through ec2 or to an ec2 instance you can do with an",
    "start": "906760",
    "end": "912700"
  },
  {
    "text": "ECS instance also patching the standard practice is to update your AMI and then",
    "start": "912700",
    "end": "919780"
  },
  {
    "text": "roll new a.m. eyes has anyone ever heard of immutable infrastructure really only",
    "start": "919780",
    "end": "927850"
  },
  {
    "text": "three hands okay so immutable infrastructure doesn't mean that your infrastructure is read-only what it",
    "start": "927850",
    "end": "933880"
  },
  {
    "text": "really means is that you're that you don't mutate your infrastructure so as",
    "start": "933880",
    "end": "940240"
  },
  {
    "text": "you are using your instances if there's a change that you need to make you don't",
    "start": "940240",
    "end": "945910"
  },
  {
    "text": "go to each instance and make that small change you bake that change into a new",
    "start": "945910",
    "end": "952540"
  },
  {
    "text": "AMI perhaps and then you launch new a Mis and replace the old AM eyes the",
    "start": "952540",
    "end": "958089"
  },
  {
    "text": "great thing about that is everything is completely replaceable from zero to where you are I don't know if you've",
    "start": "958089",
    "end": "964269"
  },
  {
    "text": "ever been using I pick on chef for this a lot because I've used it in the past",
    "start": "964269",
    "end": "970120"
  },
  {
    "text": "I've used puppet 2 but there are times where you get to a point where whatever",
    "start": "970120",
    "end": "975399"
  },
  {
    "text": "you did years ago you can't do anymore so there's no way for you to start from",
    "start": "975399",
    "end": "981490"
  },
  {
    "text": "zero and get to current you have to you know it's or it's very difficult to do",
    "start": "981490",
    "end": "987040"
  },
  {
    "text": "it in an automated way so there's always like these weird hoops that you have to run through I remember at tumblr we used",
    "start": "987040",
    "end": "995800"
  },
  {
    "text": "to have to run puppet three times because there was nothing magic about three but one one time didn't usually",
    "start": "995800",
    "end": "1002519"
  },
  {
    "text": "get all the work done and the second time would get more stuff done and then the third time would finally get",
    "start": "1002519",
    "end": "1010050"
  },
  {
    "text": "everything done I see people smiling I know that they do the same thing so this",
    "start": "1010050",
    "end": "1015180"
  },
  {
    "text": "is not that unusual but if you're doing if you're using a process for immutable",
    "start": "1015180",
    "end": "1020790"
  },
  {
    "text": "infrastructure this is not likely going to be your problem so what your problem",
    "start": "1020790",
    "end": "1027600"
  },
  {
    "text": "is going to be is how do I manage rotating out all of my instances how do",
    "start": "1027600",
    "end": "1032970"
  },
  {
    "text": "I do it in a safe way and how do I do it slow enough that it doesn't damage my",
    "start": "1032970",
    "end": "1039120"
  },
  {
    "text": "application but fast enough that I can respond to some kind of security issue in a reasonable time frame so we give",
    "start": "1039120",
    "end": "1046770"
  },
  {
    "text": "you of course all of the tools that you need to do that kind of stuff but it's still up to you to do it for monitoring",
    "start": "1046770",
    "end": "1053700"
  },
  {
    "text": "we have watch cloud watch is native to the AWS platform you can monitor all kinds of",
    "start": "1053700",
    "end": "1059530"
  },
  {
    "text": "services with it so it stands to reason is that this is the best case monitoring",
    "start": "1059530",
    "end": "1065500"
  },
  {
    "text": "solution for you and then scaling Auto scale groups again it's just like you'd scale ec2 instances you can scale ECS",
    "start": "1065500",
    "end": "1073000"
  },
  {
    "text": "instances there is something that is nice when you're using ECS when you're",
    "start": "1073000",
    "end": "1081250"
  },
  {
    "text": "using ECS what you care about from the instance perspective you care",
    "start": "1081250",
    "end": "1087070"
  },
  {
    "text": "about CPU and memory primarily and then occasionally you'll care about disk",
    "start": "1087070",
    "end": "1092890"
  },
  {
    "text": "space most of the time you're running stateless and stateless applications and",
    "start": "1092890",
    "end": "1098140"
  },
  {
    "text": "disk space doesn't really matter but occasionally like I've seen a bill processor for example that creates a",
    "start": "1098140",
    "end": "1104410"
  },
  {
    "text": "bunch of PDFs so the application itself is stateless but it writes out files",
    "start": "1104410",
    "end": "1109930"
  },
  {
    "text": "that that it then you know mails out so there is some sort of ephemeral state",
    "start": "1109930",
    "end": "1117490"
  },
  {
    "text": "necessary so disk space is important in that case but if you're a web service or something like that then it's probably",
    "start": "1117490",
    "end": "1125470"
  },
  {
    "text": "not necessary to care about disk what you care about though then a CPU and memory well CPU for all of our four docker and",
    "start": "1125470",
    "end": "1133870"
  },
  {
    "text": "for all the orchestrators you're able to over commit so the you know the the",
    "start": "1133870",
    "end": "1139450"
  },
  {
    "text": "possibility of you running out of it is low I mean you can still run out of it",
    "start": "1139450",
    "end": "1146110"
  },
  {
    "text": "but you'll know well ahead of time because you can over commit you can't over commit on memory though",
    "start": "1146110",
    "end": "1151810"
  },
  {
    "text": "so it's not uncommon to run out of resources and the first resource that",
    "start": "1151810",
    "end": "1157540"
  },
  {
    "text": "you tend to run out of is memory so one tip you know pay attention to your cloud",
    "start": "1157540",
    "end": "1164620"
  },
  {
    "text": "watch alarms and your memory utilization and auto scale based on memory and then",
    "start": "1164620",
    "end": "1171910"
  },
  {
    "text": "of course cost control you can do spot flee you can do reserved instances",
    "start": "1171910",
    "end": "1177090"
  },
  {
    "start": "1176000",
    "end": "1255000"
  },
  {
    "text": "okay so tasks and containers when it comes to running your application you",
    "start": "1177090",
    "end": "1185020"
  },
  {
    "text": "build a task definition and the task definition you then provide to ECS and that describes the task that",
    "start": "1185020",
    "end": "1193549"
  },
  {
    "text": "you want to run you can then also couple that with a service definition and the",
    "start": "1193549",
    "end": "1199309"
  },
  {
    "text": "service definition describes how you want to run that task so the task definition might be you know I need to",
    "start": "1199309",
    "end": "1206960"
  },
  {
    "text": "run this container and maybe this engine X container as a sidecar you know so my",
    "start": "1206960",
    "end": "1214610"
  },
  {
    "text": "web application and engine X application the service definition then might be I",
    "start": "1214610",
    "end": "1219770"
  },
  {
    "text": "need to have at minimum six of these spread across three availability zones",
    "start": "1219770",
    "end": "1225880"
  },
  {
    "text": "and ideally not even sitting on the same instance so if I have if I have three",
    "start": "1225880",
    "end": "1233059"
  },
  {
    "text": "instances in each of the three availability zones nine instances total if I launch six containers I should end",
    "start": "1233059",
    "end": "1240710"
  },
  {
    "text": "up with six instances each running one of my task definitions you guys follow",
    "start": "1240710",
    "end": "1246860"
  },
  {
    "text": "that if not come back for the afternoon session on advanced scheduling and",
    "start": "1246860",
    "end": "1252169"
  },
  {
    "text": "that's exactly the kind of thing we'll be looking at okay so deployment what are the options",
    "start": "1252169",
    "end": "1260929"
  },
  {
    "start": "1255000",
    "end": "1393000"
  },
  {
    "text": "for you to build your task definitions and get them running on ECS of course there's the console if you're just",
    "start": "1260929",
    "end": "1267740"
  },
  {
    "text": "starting out I highly recommend using the console it steps you through the",
    "start": "1267740",
    "end": "1274100"
  },
  {
    "text": "required information and shows you the optional information it has help it has",
    "start": "1274100",
    "end": "1279860"
  },
  {
    "text": "some details so this is how you learn what you need to provide what you need",
    "start": "1279860",
    "end": "1285860"
  },
  {
    "text": "to know and what you need to tell us however this should not be what you do",
    "start": "1285860",
    "end": "1291320"
  },
  {
    "text": "for production so if you're building development this is great this this teaches you but then once you've learned",
    "start": "1291320",
    "end": "1298130"
  },
  {
    "text": "that the items that you need to know move on to doing something that's a",
    "start": "1298130",
    "end": "1304250"
  },
  {
    "text": "little bit more reproducible even if it's scripting at least that's something",
    "start": "1304250",
    "end": "1309350"
  },
  {
    "text": "that's reproducible save your steps and a script be able to rerun your script you can also take a look at terraform",
    "start": "1309350",
    "end": "1315620"
  },
  {
    "text": "cloud formation or any of the similar products and be able to reproduce your",
    "start": "1315620",
    "end": "1324010"
  },
  {
    "text": "environment the environment that I built most recently it's completely",
    "start": "1324010",
    "end": "1330430"
  },
  {
    "text": "reproducible running one command it's actually through our Jenkins server we",
    "start": "1330430",
    "end": "1336370"
  },
  {
    "text": "would push a button fill in the developers name and the developer would get their own environment built for them",
    "start": "1336370",
    "end": "1342100"
  },
  {
    "text": "start to finish it took about 20 minutes but doing it by hand always took way",
    "start": "1342100",
    "end": "1348910"
  },
  {
    "text": "longer so automating and building out using",
    "start": "1348910",
    "end": "1354570"
  },
  {
    "text": "code is definitely highly recommended so",
    "start": "1354570",
    "end": "1359700"
  },
  {
    "text": "by using code they are your deployment will be repeatable it will be auditable",
    "start": "1359700",
    "end": "1366910"
  },
  {
    "text": "and then it will be self documenting as long as someone is reading is able to read the code they'll be able to",
    "start": "1366910",
    "end": "1372850"
  },
  {
    "text": "understand what's going on so you don't necessarily have to write a large volume of documentation to explain",
    "start": "1372850",
    "end": "1380530"
  },
  {
    "text": "every step because today's tools especially something like terraform is super easy to read so you just start at",
    "start": "1380530",
    "end": "1388210"
  },
  {
    "text": "the top read to the bottom and you can have a good understanding of what's going on cloud formation is the built-in",
    "start": "1388210",
    "end": "1396810"
  },
  {
    "start": "1393000",
    "end": "1424000"
  },
  {
    "text": "language of AWS so this is very hard to",
    "start": "1396810",
    "end": "1402250"
  },
  {
    "text": "read sorry you'll be getting a copy of these slides so don't worry about it and in fact there's nothing super super",
    "start": "1402250",
    "end": "1409450"
  },
  {
    "text": "critical on this slide for you to understand but just know that it's it's",
    "start": "1409450",
    "end": "1415590"
  },
  {
    "text": "documenting it's self documenting so there's a description for every single section and you can see the parts that",
    "start": "1415590",
    "end": "1423010"
  },
  {
    "text": "will be built okay so now it's time to deploy down at the bottom you can see",
    "start": "1423010",
    "end": "1430810"
  },
  {
    "start": "1424000",
    "end": "1501000"
  },
  {
    "text": "that we are running create stack so we're using cloud formation and we are",
    "start": "1430810",
    "end": "1437340"
  },
  {
    "text": "creating a stack that's found in this file so the last file that we were just",
    "start": "1437340",
    "end": "1443680"
  },
  {
    "text": "looking at describes the stack and then we're going to pass that in to cloud formation cloud formation on our behalf",
    "start": "1443680",
    "end": "1450460"
  },
  {
    "text": "is then going to go and create all of the reason at AWS it can create V pcs subnets",
    "start": "1450460",
    "end": "1457840"
  },
  {
    "text": "routers NAT gateways you know security groups all the things that you need it",
    "start": "1457840",
    "end": "1464480"
  },
  {
    "text": "can launch instances create Auto scale groups everything that you need to be able to launch an ACS cluster cloud",
    "start": "1464480",
    "end": "1471230"
  },
  {
    "text": "formation can do I do absolutely everything through cloud formation when",
    "start": "1471230",
    "end": "1477919"
  },
  {
    "text": "you want to update maybe you've made a change to your stack the in gamal so you",
    "start": "1477919",
    "end": "1484159"
  },
  {
    "text": "can just run update stack and this will sort of analyze the parts that are the",
    "start": "1484159",
    "end": "1490549"
  },
  {
    "text": "same look find the parts that have changed and then go out to whatever component you've changed and initiate",
    "start": "1490549",
    "end": "1498379"
  },
  {
    "text": "that change at AWS when you need to create a new environment because you",
    "start": "1498379",
    "end": "1505399"
  },
  {
    "text": "aren't making tiny changes that get you from point A to point B to Point C to",
    "start": "1505399",
    "end": "1511490"
  },
  {
    "text": "point D you're making changes to the whole stack all at once all you have to",
    "start": "1511490",
    "end": "1517129"
  },
  {
    "text": "do is create stack right and launch it with a new parameter but use the exact",
    "start": "1517129",
    "end": "1523429"
  },
  {
    "text": "same template that you used before and you will get a current copy of the stack",
    "start": "1523429",
    "end": "1528889"
  },
  {
    "text": "you don't have to then enumerate each change after that ECR so from the",
    "start": "1528889",
    "end": "1538179"
  },
  {
    "start": "1534000",
    "end": "1577000"
  },
  {
    "text": "command line perspective you can just run create repository or cloud formation",
    "start": "1538179",
    "end": "1545750"
  },
  {
    "text": "perspective you can create an ECR repository does anyone here use ECR",
    "start": "1545750",
    "end": "1552710"
  },
  {
    "text": "today I think there was a data dog survey and ECR is now the second most",
    "start": "1552710",
    "end": "1559850"
  },
  {
    "text": "popular it's the first most popular private repository second most popular",
    "start": "1559850",
    "end": "1565659"
  },
  {
    "text": "repository period right behind docker hub so I would expect docker hub to be",
    "start": "1565659",
    "end": "1571009"
  },
  {
    "text": "the biggest obviously but then it's interesting that ECR is right behind it",
    "start": "1571009",
    "end": "1577240"
  },
  {
    "start": "1577000",
    "end": "1668000"
  },
  {
    "text": "so with ECR we integrated it with I am",
    "start": "1577240",
    "end": "1582500"
  },
  {
    "text": "but we need the native tooling to be able to actually off Kate and the native way is docker login",
    "start": "1582500",
    "end": "1589470"
  },
  {
    "text": "docker login just use a simple username and password but we wanted something a",
    "start": "1589470",
    "end": "1594900"
  },
  {
    "text": "little bit more stringent so what we do is we integrate it with I am and then I",
    "start": "1594900",
    "end": "1601890"
  },
  {
    "text": "am will issue you temporary credentials that are good for 18 hours I think I",
    "start": "1601890",
    "end": "1608280"
  },
  {
    "text": "can't remember exactly so you can get those credentials by running AWS ECR get",
    "start": "1608280",
    "end": "1615780"
  },
  {
    "text": "log in the syntax that you see up on the first line here is using bash command",
    "start": "1615780",
    "end": "1622110"
  },
  {
    "text": "substitution so basically what we're doing is launching a new shell running AWS ECR get login and passing the output",
    "start": "1622110",
    "end": "1630300"
  },
  {
    "text": "which is the docker login command to our current shell so we're running docker",
    "start": "1630300",
    "end": "1636030"
  },
  {
    "text": "login and the long username and the long password in our current shell in an",
    "start": "1636030",
    "end": "1641970"
  },
  {
    "text": "automated way after you've done that you're authenticated to ECR and you can",
    "start": "1641970",
    "end": "1647760"
  },
  {
    "text": "run standard docker commands docker pull docker push etc if you want to automate",
    "start": "1647760",
    "end": "1654320"
  },
  {
    "text": "this credential handling we actually have an ECR credential helper that you",
    "start": "1654320",
    "end": "1660900"
  },
  {
    "text": "can launch on your instances so that will take care of grabbing those I am",
    "start": "1660900",
    "end": "1666330"
  },
  {
    "text": "credentials for you so building your ECS",
    "start": "1666330",
    "end": "1672330"
  },
  {
    "start": "1668000",
    "end": "1687000"
  },
  {
    "text": "cluster again the command-line way AWS ECS create cluster or the cloud",
    "start": "1672330",
    "end": "1678900"
  },
  {
    "text": "formation way ECS cluster and then you just give it a name pre prod if if that's what you want",
    "start": "1678900",
    "end": "1685950"
  },
  {
    "text": "to name things the container instances this graph is kind of scary-looking I",
    "start": "1685950",
    "end": "1694470"
  },
  {
    "start": "1687000",
    "end": "1844000"
  },
  {
    "text": "think but I think if you've ever used ec2 instances and you've ever built your",
    "start": "1694470",
    "end": "1699809"
  },
  {
    "text": "own VPC you probably only are shocked a little bit and then you're and then you",
    "start": "1699809",
    "end": "1705059"
  },
  {
    "text": "start to look at it and that's it's normal it's what you look it's what it looks like so what we have are this is a",
    "start": "1705059",
    "end": "1713160"
  },
  {
    "text": "V PC and inside the V PC we have to availability zones you know",
    "start": "1713160",
    "end": "1720060"
  },
  {
    "text": "I tend to prefer three but this is just showing us - probably just to keep it less scary looking we have an",
    "start": "1720060",
    "end": "1727080"
  },
  {
    "text": "application load balancer we have not gateway in points in each of our in each",
    "start": "1727080",
    "end": "1732240"
  },
  {
    "text": "of our availability zones and then we have our instances I think the only thing that I would point out here that",
    "start": "1732240",
    "end": "1739170"
  },
  {
    "text": "that took me a while to realize there are public subnets and private subnets",
    "start": "1739170",
    "end": "1745550"
  },
  {
    "text": "just in the back of your mind file away I never put instances on public subnets",
    "start": "1745550",
    "end": "1751530"
  },
  {
    "text": "I only terminate load balancers and NAT gateways and other things that need",
    "start": "1751530",
    "end": "1757310"
  },
  {
    "text": "internet access I terminate those on public subnets and all of my resources",
    "start": "1757310",
    "end": "1763620"
  },
  {
    "text": "go on private subnets so that's what this graphic shows us here the instances are all on private subnets how do they",
    "start": "1763620",
    "end": "1770040"
  },
  {
    "text": "get out they get out through the NAT gateway so they have to route to the public subnet and talk to their NAT",
    "start": "1770040",
    "end": "1777030"
  },
  {
    "text": "gateway and then the NAT gateway lets them exit and then how does traffic get into them into into the applications",
    "start": "1777030",
    "end": "1784350"
  },
  {
    "text": "nothing talks directly to the instance in this arrangement that's the beauty of it but you don't have public IP",
    "start": "1784350",
    "end": "1790530"
  },
  {
    "text": "addresses on your instances so you have an additional layer of security that way",
    "start": "1790530",
    "end": "1795890"
  },
  {
    "text": "so how do you get traffic in well you route it through the application load balancer the application load balancer",
    "start": "1795890",
    "end": "1802650"
  },
  {
    "text": "receives the traffic and then turns around and sends it to the correct container so now you can have container",
    "start": "1802650",
    "end": "1808650"
  },
  {
    "text": "workloads that are publicly exposed running right alongside container workloads that might not take any",
    "start": "1808650",
    "end": "1815340"
  },
  {
    "text": "inbound traffic so you know there might be some batch processing happening right",
    "start": "1815340",
    "end": "1820620"
  },
  {
    "text": "alongside your web front-end because of this you're able to take advantage of",
    "start": "1820620",
    "end": "1827880"
  },
  {
    "text": "increased densities you're able to save costs by running fewer instances and then your instances are even more common",
    "start": "1827880",
    "end": "1836220"
  },
  {
    "text": "you don't have special instances that are in public subnets and other instances that are in private subnets so",
    "start": "1836220",
    "end": "1845550"
  },
  {
    "start": "1844000",
    "end": "1885000"
  },
  {
    "text": "I think this is just kind of going over what we looked at in Bound traffic comes in through the application load balancer",
    "start": "1845550",
    "end": "1851610"
  },
  {
    "text": "that's the only path that traffic has to come in so we can do additional things this graph doesn't",
    "start": "1851610",
    "end": "1857639"
  },
  {
    "text": "necessarily show like route our traffic through a laughs we can use a web",
    "start": "1857639",
    "end": "1862980"
  },
  {
    "text": "application framework and we can ensure that the traffic that's coming in is genuine is has the correct",
    "start": "1862980",
    "end": "1871440"
  },
  {
    "text": "you know fields filled out with the correct with the expected inputs and",
    "start": "1871440",
    "end": "1877249"
  },
  {
    "text": "then pass it into our application we can do all kinds of cool stuff like that and",
    "start": "1877249",
    "end": "1882539"
  },
  {
    "text": "then for outbound traffic we go out through in at gateways and from this if",
    "start": "1882539",
    "end": "1890549"
  },
  {
    "start": "1885000",
    "end": "1920000"
  },
  {
    "text": "we want to we can use VPC flow logs we can analyze what's able to exit etc if",
    "start": "1890549",
    "end": "1897690"
  },
  {
    "text": "you're in a regulated industry maybe you actually want to control the traffic that is going out and only allow certain",
    "start": "1897690",
    "end": "1904950"
  },
  {
    "text": "kinds of destinations so you could replace NAT gateways with proxies and",
    "start": "1904950",
    "end": "1910289"
  },
  {
    "text": "then you can you know have very advanced filtering set up for the the outbound",
    "start": "1910289",
    "end": "1917039"
  },
  {
    "text": "traffic and where it's allowed to talk to for logging we have a great service",
    "start": "1917039",
    "end": "1923610"
  },
  {
    "start": "1920000",
    "end": "1994000"
  },
  {
    "text": "called cloud watch logs and we have deep integration directly with cloud watch logs so you can have all of your",
    "start": "1923610",
    "end": "1929549"
  },
  {
    "text": "container instances logged directly to that and I'll tell you the here's what I tell developers when you're building",
    "start": "1929549",
    "end": "1936629"
  },
  {
    "text": "your container log to standard out don't try and get all you know fancy and and",
    "start": "1936629",
    "end": "1943110"
  },
  {
    "text": "set up logging to a syslog server or anything like that you're in a container for a reason",
    "start": "1943110",
    "end": "1948749"
  },
  {
    "text": "containers are uniform so every application should just be written to log to standard out then what we can do",
    "start": "1948749",
    "end": "1956369"
  },
  {
    "text": "is we can take those standard out logs from your container and we can ship",
    "start": "1956369",
    "end": "1961619"
  },
  {
    "text": "those wherever we actually want logs to go that might be a syslog server",
    "start": "1961619",
    "end": "1967499"
  },
  {
    "text": "somewhere that might be cloud watch logs it might be flu you know fluent D to",
    "start": "1967499",
    "end": "1972539"
  },
  {
    "text": "some other you know elk stack or something like that there's all kinds of",
    "start": "1972539",
    "end": "1977549"
  },
  {
    "text": "options but it all starts with log to standard out so just you know as a",
    "start": "1977549",
    "end": "1983159"
  },
  {
    "text": "developer be in that habit if you aren't the developer but you talk to developers teach them log to",
    "start": "1983159",
    "end": "1989610"
  },
  {
    "text": "standard out in your container and life should be good after that now if you",
    "start": "1989610",
    "end": "1996690"
  },
  {
    "start": "1994000",
    "end": "2015000"
  },
  {
    "text": "want to see some reference architecture that sets all of this kind of kind of",
    "start": "1996690",
    "end": "2002210"
  },
  {
    "text": "stuff up check out our AWS labs ECS wrath arch cloud formation and this is",
    "start": "2002210",
    "end": "2009950"
  },
  {
    "text": "cloud formation that will build an entire stock for you okay",
    "start": "2009950",
    "end": "2020390"
  },
  {
    "start": "2015000",
    "end": "2109000"
  },
  {
    "text": "so let's build an application this is a hypothetical application you can go away",
    "start": "2020390",
    "end": "2027110"
  },
  {
    "text": "after this and build this if you want or you can just apply these concepts to your own application so our our",
    "start": "2027110",
    "end": "2035170"
  },
  {
    "text": "application is a tweet collector so think about what we need we'll need some",
    "start": "2035170",
    "end": "2042200"
  },
  {
    "text": "kind of thing that will go out and read from Twitter we'll need something that",
    "start": "2042200",
    "end": "2049399"
  },
  {
    "text": "will write tweets that that it collects into our storage and then ideally we'll",
    "start": "2049400",
    "end": "2056210"
  },
  {
    "text": "actually have some kind of pipeline set up so that we don't lose data if anything should ever go wrong we build",
    "start": "2056210",
    "end": "2062840"
  },
  {
    "text": "for failure so if our tweet collector finds a tweet we don't want it to necessarily pass it straight to a tweet",
    "start": "2062840",
    "end": "2069740"
  },
  {
    "text": "archiver because what if the tweet archiver is down so how do we deal with that kind of failure so we're gonna do",
    "start": "2069740",
    "end": "2077300"
  },
  {
    "text": "that with Kinesis firehose we're going to write our tweets into firehose and",
    "start": "2077300",
    "end": "2084500"
  },
  {
    "text": "then from there we can actually set fire hose to log directly to s3",
    "start": "2084500",
    "end": "2091190"
  },
  {
    "text": "we can also have the elk stock the AWS",
    "start": "2091190",
    "end": "2097340"
  },
  {
    "text": "elastic search service as a target and then we can process these tweets real",
    "start": "2097340",
    "end": "2104750"
  },
  {
    "text": "time using AWS lambda so we can do all kinds of cool things with it so there is",
    "start": "2104750",
    "end": "2112340"
  },
  {
    "start": "2109000",
    "end": "2174000"
  },
  {
    "text": "a I forgot there is a micro service and RPC framework that twitch created",
    "start": "2112340",
    "end": "2119320"
  },
  {
    "text": "if you do decide you want to write this definitely check out this RPC framework",
    "start": "2119320",
    "end": "2125230"
  },
  {
    "text": "it basically lets you use RPC for",
    "start": "2125230",
    "end": "2131790"
  },
  {
    "text": "talking between your micro services so this instead of using rest this just",
    "start": "2131790",
    "end": "2139360"
  },
  {
    "text": "makes it a lot easier for you to pass data from one service to another again a",
    "start": "2139360",
    "end": "2148390"
  },
  {
    "text": "little bit hard to read but basically you can write a spec on the data that you're going to be passing you can",
    "start": "2148390",
    "end": "2156100"
  },
  {
    "text": "generate a client and a server for that data and then pass the information from",
    "start": "2156100",
    "end": "2162970"
  },
  {
    "text": "from service a to service B from our collector to our archiver it's limited to go for today but there",
    "start": "2162970",
    "end": "2170110"
  },
  {
    "text": "should be more languages supported later so the tweet collector this is by the",
    "start": "2170110",
    "end": "2177250"
  },
  {
    "start": "2174000",
    "end": "2213000"
  },
  {
    "text": "way available on github so if you wanted to run this read it edit it whatever",
    "start": "2177250",
    "end": "2182730"
  },
  {
    "text": "you're going to be able to do that again links will be provided in the slideshow",
    "start": "2182730",
    "end": "2188160"
  },
  {
    "text": "so it's written in go it uses the Twitter API and it takes as environment",
    "start": "2188160",
    "end": "2194980"
  },
  {
    "text": "variables search terms that you're going to be looking for on Twitter anything that it finds it's going to then write",
    "start": "2194980",
    "end": "2201610"
  },
  {
    "text": "out to its archive endpoint for you to be able to run this of course you'll need to attach an iam role that allows",
    "start": "2201610",
    "end": "2208990"
  },
  {
    "text": "it to write to that archive endpoint the",
    "start": "2208990",
    "end": "2214180"
  },
  {
    "text": "archiver again also written in go hosts the RPC server that the collector talks",
    "start": "2214180",
    "end": "2221830"
  },
  {
    "text": "to and then it sends tweets to Kinesis using the AWS sdk so it's environment",
    "start": "2221830",
    "end": "2230170"
  },
  {
    "text": "variable is basically the Kinesis stream name so these two things together will",
    "start": "2230170",
    "end": "2236110"
  },
  {
    "text": "collect and then write every tweet that matches your search term what might you",
    "start": "2236110",
    "end": "2243370"
  },
  {
    "text": "want to or what might a developer workflow look like with this you can run it locally and you can have one",
    "start": "2243370",
    "end": "2250630"
  },
  {
    "text": "container talking to the next container do all of your testing it logs to standard out it logs the standard error",
    "start": "2250630",
    "end": "2257490"
  },
  {
    "text": "it can use your local AWS credentials for talking to Kinesis fire hose once",
    "start": "2257490",
    "end": "2264430"
  },
  {
    "text": "you have this up and running locally if you're if you think okay I'm ready push it so the containers themselves",
    "start": "2264430",
    "end": "2272620"
  },
  {
    "text": "because their containers the way they run on your laptop should be basically the same as the way they run in",
    "start": "2272620",
    "end": "2279610"
  },
  {
    "text": "production with the possible exceptions being what environment variables you",
    "start": "2279610",
    "end": "2284740"
  },
  {
    "text": "pass in so you would deploy to ECS with cloud formation that is provided logs",
    "start": "2284740",
    "end": "2291310"
  },
  {
    "text": "instead of because they're going to standard out in standard error we collect those and we ship them on to",
    "start": "2291310",
    "end": "2296920"
  },
  {
    "text": "cloud watch logs and then you would need of course the IAM role for talking to",
    "start": "2296920",
    "end": "2303460"
  },
  {
    "text": "the fire hose so instead of your local AWS credentials on the left you'd be",
    "start": "2303460",
    "end": "2308650"
  },
  {
    "text": "using an iam role on the right and then you'd have metrics available T for the",
    "start": "2308650",
    "end": "2314830"
  },
  {
    "text": "container runtime in cloud watch this",
    "start": "2314830",
    "end": "2320080"
  },
  {
    "start": "2319000",
    "end": "2387000"
  },
  {
    "text": "project this is the URL for it so if you want to if this sounds like something you want to try definitely check it out",
    "start": "2320080",
    "end": "2329010"
  },
  {
    "text": "if you want to take it further remember we mentioned real time processing with lambda you can actually pass in every -",
    "start": "2329010",
    "end": "2337300"
  },
  {
    "text": "every time we archive to s3 that can trigger a lambda and so this lambda we",
    "start": "2337300",
    "end": "2342340"
  },
  {
    "text": "you can do something cool like sentiment analysis is this tweet positive or is",
    "start": "2342340",
    "end": "2347350"
  },
  {
    "text": "this tweet negative so maybe you're searching for your company name or your company hashtag and you want to find out",
    "start": "2347350",
    "end": "2353020"
  },
  {
    "text": "you know like am i over all receiving good tweets or am i over all receiving bad tweets at one of my startups we were",
    "start": "2353020",
    "end": "2361900"
  },
  {
    "text": "small enough we were just getting started but we actually had a dashboard on our screen at the office that was",
    "start": "2361900",
    "end": "2368200"
  },
  {
    "text": "number of days since a negative tweet and if we could go 30 days then we would",
    "start": "2368200",
    "end": "2373510"
  },
  {
    "text": "we would have a party we always looked for reasons to have parties so we made",
    "start": "2373510",
    "end": "2379510"
  },
  {
    "text": "it once it was awesome but yeah it's it's sentiment analysis is pretty cool",
    "start": "2379510",
    "end": "2384550"
  },
  {
    "text": "for doing little little things like that what else do we need for production",
    "start": "2384550",
    "end": "2390280"
  },
  {
    "start": "2387000",
    "end": "2419000"
  },
  {
    "text": "well you've built all this infrastructure how do you know how much",
    "start": "2390280",
    "end": "2395950"
  },
  {
    "text": "am i spending am i able to do this cheaper so cost optimization is",
    "start": "2395950",
    "end": "2401680"
  },
  {
    "text": "something that I personally find very exciting I love being able to build",
    "start": "2401680",
    "end": "2409600"
  },
  {
    "text": "something and then start to crank it down and make it as small as it can be",
    "start": "2409600",
    "end": "2415060"
  },
  {
    "text": "while still having all of the functionality that I need so two tools",
    "start": "2415060",
    "end": "2420940"
  },
  {
    "text": "that you can use to make this happen one reserved instances and to spot pricing",
    "start": "2420940",
    "end": "2429090"
  },
  {
    "text": "by the way auto-scaling I should have mentioned third tool scale-up when you",
    "start": "2429090",
    "end": "2434380"
  },
  {
    "text": "need to have a lot of capacity don't forget to scale back down when that capacity subsides so if you're an",
    "start": "2434380",
    "end": "2441400"
  },
  {
    "text": "e-commerce site Black Friday is very popular in the u.s. you know scale up",
    "start": "2441400",
    "end": "2447070"
  },
  {
    "text": "Auto scale and then scale back down when the traffic subsides but even more than",
    "start": "2447070",
    "end": "2453520"
  },
  {
    "text": "doing that reserved instances does anyone here already use reserved",
    "start": "2453520",
    "end": "2459160"
  },
  {
    "text": "instances few hands okay it's I like to describe this as handy bit complicated",
    "start": "2459160",
    "end": "2466870"
  },
  {
    "text": "you know you there's all kinds of there's sort of a graduation of savings that you have available to you you want",
    "start": "2466870",
    "end": "2474760"
  },
  {
    "text": "to prepay for everything upfront your savings is bigger you want to commit to three years your savings is bigger you",
    "start": "2474760",
    "end": "2481450"
  },
  {
    "text": "want to prepay nothing up front and only commit to one year your savings is smaller but they're still savings so",
    "start": "2481450",
    "end": "2487870"
  },
  {
    "text": "it's nice to be able to have that kind of flexibility and then of course if you do this you still can scale up and pay",
    "start": "2487870",
    "end": "2496360"
  },
  {
    "text": "on-demand pricing for anything that you didn't pre plan for so I would set",
    "start": "2496360",
    "end": "2502090"
  },
  {
    "text": "reserved instances as sort of a bare minimum I know I'm always going to have",
    "start": "2502090",
    "end": "2507780"
  },
  {
    "text": "thirty instances but sometimes I need three hundred so you know those rare",
    "start": "2507780",
    "end": "2513160"
  },
  {
    "text": "occasions when I need three hundred I'm paying on-demand pricing and hopefully because I'm getting all that traffic",
    "start": "2513160",
    "end": "2519670"
  },
  {
    "text": "it's paying for it you know it's covering my costs if I'm an e-commerce site I'm making huge sales that's",
    "start": "2519670",
    "end": "2526839"
  },
  {
    "text": "awesome if on the other hand I need to go from thirty to thirty five I'm not",
    "start": "2526839",
    "end": "2533410"
  },
  {
    "text": "paying that much more I'm still you know seeing a decent cost savings because",
    "start": "2533410",
    "end": "2538480"
  },
  {
    "text": "I've done reserved instances for the vast majority now what I actually prefer",
    "start": "2538480",
    "end": "2544510"
  },
  {
    "text": "to do I like flexibility and reserved instances tend to lock me into at least",
    "start": "2544510",
    "end": "2549640"
  },
  {
    "text": "a year commitment so what I really like is spot and spot fleet does anyone here do spot priced",
    "start": "2549640",
    "end": "2555970"
  },
  {
    "text": "instances very few okay cool so let me",
    "start": "2555970",
    "end": "2561220"
  },
  {
    "text": "tell you how spot price works the spot market if you are let's for round",
    "start": "2561220",
    "end": "2568240"
  },
  {
    "text": "numbers sake let's say that you you like to use instances that cost a dollar an hour so the only problem is you don't",
    "start": "2568240",
    "end": "2576309"
  },
  {
    "text": "want to pay a dollar an hour that's a lot so spot pricing gives you the option",
    "start": "2576309",
    "end": "2582819"
  },
  {
    "text": "of bidding less money for that same kind",
    "start": "2582819",
    "end": "2588280"
  },
  {
    "start": "2584000",
    "end": "2643000"
  },
  {
    "text": "of instance and if we have excess capacity then what we do is we look at",
    "start": "2588280",
    "end": "2594430"
  },
  {
    "text": "we rank all of the bids starting from the highest bid to the lowest bid and",
    "start": "2594430",
    "end": "2599650"
  },
  {
    "text": "then we take all of our capacity our excess capacity and we start to fill",
    "start": "2599650",
    "end": "2605530"
  },
  {
    "text": "those orders so if you bid I personally like to bid the on-demand price so I'll",
    "start": "2605530",
    "end": "2611380"
  },
  {
    "text": "bid a dollar even though I'm hoping to save money what happens is as as they",
    "start": "2611380",
    "end": "2617859"
  },
  {
    "text": "reach my slot in the rankings if I get an instance great I have that",
    "start": "2617859",
    "end": "2624160"
  },
  {
    "text": "instance for for an hour and I get to run my workloads when they reach the",
    "start": "2624160",
    "end": "2629859"
  },
  {
    "text": "bottom whatever that last person that got an instance bid that's what everyone",
    "start": "2629859",
    "end": "2635349"
  },
  {
    "text": "pays so if we get down to the point where that this person bid a dime for a",
    "start": "2635349",
    "end": "2641589"
  },
  {
    "text": "dollar instance then great everyone that got an instance pays a dime an hour so",
    "start": "2641589",
    "end": "2647950"
  },
  {
    "start": "2643000",
    "end": "2765000"
  },
  {
    "text": "you get to save a ton of money by doing that I always do this",
    "start": "2647950",
    "end": "2653230"
  },
  {
    "text": "or workloads that are not cust not user facing not customer facing so not my",
    "start": "2653230",
    "end": "2658570"
  },
  {
    "text": "front ends batch workloads that I can manage to go a few minutes without and then I even consider doing this for",
    "start": "2658570",
    "end": "2666700"
  },
  {
    "text": "front-end workloads depending on the application so my last company we ran a",
    "start": "2666700",
    "end": "2671890"
  },
  {
    "text": "hundred percent on spot and there's a second sort of verse to this that's",
    "start": "2671890",
    "end": "2677290"
  },
  {
    "text": "called spot fleet where you can actually say you know all I really care about is",
    "start": "2677290",
    "end": "2682570"
  },
  {
    "text": "getting CPU and memory I don't care what instance type right or I have a variety",
    "start": "2682570",
    "end": "2687970"
  },
  {
    "text": "of instance types that I can spread my load across so by doing that I am",
    "start": "2687970",
    "end": "2694650"
  },
  {
    "text": "unlikely to be outbid on all the instance types that I can possibly use",
    "start": "2694650",
    "end": "2699760"
  },
  {
    "text": "so I'll use older m2 instance types I'll use seats III instance types you know",
    "start": "2699760",
    "end": "2707410"
  },
  {
    "text": "stuff that a lot of people don't tend to use these days I'll bid on those I'll",
    "start": "2707410",
    "end": "2713140"
  },
  {
    "text": "also include c4 c5 s I'll have a very wide variety of instances that I'll bid",
    "start": "2713140",
    "end": "2719320"
  },
  {
    "text": "on and I'll bid whatever the market rate is generally there will always be",
    "start": "2719320",
    "end": "2724510"
  },
  {
    "text": "something for me and so even if I get outbid on c5 s and I lose a c5 and in an",
    "start": "2724510",
    "end": "2731650"
  },
  {
    "text": "availability zone that's no big deal those workloads those containers they",
    "start": "2731650",
    "end": "2736690"
  },
  {
    "text": "can die off they'll get replaced by ECS that's the beauty of containers right you can bring up replacements in a few",
    "start": "2736690",
    "end": "2743619"
  },
  {
    "text": "seconds so because of that I can go a few seconds with capacity shifting",
    "start": "2743619",
    "end": "2749710"
  },
  {
    "text": "around from one instance to another and I can get you know between 60 and 90 percent savings so that's the beauty of",
    "start": "2749710",
    "end": "2757660"
  },
  {
    "text": "spa pricing and it lets you be super flexible and you aren't committed long term I think I just said all of this",
    "start": "2757660",
    "end": "2769540"
  },
  {
    "start": "2765000",
    "end": "2881000"
  },
  {
    "text": "ok so multiple ECS clusters because ECS",
    "start": "2769540",
    "end": "2774640"
  },
  {
    "text": "itself doesn't cost you anything as from the control plane perspective having",
    "start": "2774640",
    "end": "2779650"
  },
  {
    "text": "multiple clusters is also handy and doesn't cost you anything so you're able to build a cluster for",
    "start": "2779650",
    "end": "2787030"
  },
  {
    "text": "development fleet and then build a different cluster for production and you",
    "start": "2787030",
    "end": "2792700"
  },
  {
    "text": "can pass in you know different environment variables and stuff like that you know based on am i running in",
    "start": "2792700",
    "end": "2799930"
  },
  {
    "text": "production or am i running in development in production I might need six of front end application and",
    "start": "2799930",
    "end": "2806680"
  },
  {
    "text": "development I might only need one because of that I might need fewer smaller instances in my development",
    "start": "2806680",
    "end": "2812260"
  },
  {
    "text": "cluster all spot priced and in my production cluster I might need a few",
    "start": "2812260",
    "end": "2819580"
  },
  {
    "text": "more bigger instances to handle the extra capacity and maybe there I'm very",
    "start": "2819580",
    "end": "2824740"
  },
  {
    "text": "conservative and I pay on demand rates my last job we built out ECS and every",
    "start": "2824740",
    "end": "2832510"
  },
  {
    "text": "developer got their own cluster so they were able to push code they were able to",
    "start": "2832510",
    "end": "2838630"
  },
  {
    "text": "tie it to their own code branches and then you know as they committed that",
    "start": "2838630",
    "end": "2844210"
  },
  {
    "text": "code automatically got deployed out on to their own cluster and then for from a",
    "start": "2844210",
    "end": "2849220"
  },
  {
    "text": "like product perspective our product team would want to see you know the the",
    "start": "2849220",
    "end": "2854590"
  },
  {
    "text": "application the the additional feature that they've added want to see it live",
    "start": "2854590",
    "end": "2859660"
  },
  {
    "text": "so they would everyone would have their own endpoint that they would be able to connect to and see what was this",
    "start": "2859660",
    "end": "2865510"
  },
  {
    "text": "developer working on just go to Brent dot dev dot my company comm and the",
    "start": "2865510",
    "end": "2873550"
  },
  {
    "text": "product team would be able to get in and poke around and see yeah this looks good approved and we just shipped that",
    "start": "2873550",
    "end": "2878980"
  },
  {
    "text": "container scaling so scaling ec2 or ECS",
    "start": "2878980",
    "end": "2886480"
  },
  {
    "text": "instances automatically you can use auto scaling groups for this this is the best",
    "start": "2886480",
    "end": "2891520"
  },
  {
    "text": "way to do this auto scaling can be based on CPU utilization it's always based on",
    "start": "2891520",
    "end": "2898360"
  },
  {
    "text": "a cloud watch alarm the cloud watch alarm can be CPU utilization memory utilization I like the memory",
    "start": "2898360",
    "end": "2905740"
  },
  {
    "text": "utilization one it could also be just some random you know custom cloud watch",
    "start": "2905740",
    "end": "2912130"
  },
  {
    "text": "metric that you've started shipping maybe you don't want more than seven containers running on an instance so",
    "start": "2912130",
    "end": "2919000"
  },
  {
    "text": "when you start to see that every can every instance in your fleet has seven scale-up I mean you can do all kinds of",
    "start": "2919000",
    "end": "2926369"
  },
  {
    "text": "interesting custom things like that so the this is what it looks like for",
    "start": "2926369",
    "end": "2933700"
  },
  {
    "start": "2930000",
    "end": "2948000"
  },
  {
    "text": "scaling above 75% memory threshold it's really really simple when memory",
    "start": "2933700",
    "end": "2939070"
  },
  {
    "text": "reservation is above 75% for probably more than one consecutive period",
    "start": "2939070",
    "end": "2945580"
  },
  {
    "text": "scale-up application auto scaling means",
    "start": "2945580",
    "end": "2951580"
  },
  {
    "start": "2948000",
    "end": "2984000"
  },
  {
    "text": "scaling the containers so scaling the service definition as you're building a",
    "start": "2951580",
    "end": "2957820"
  },
  {
    "text": "service you can define you see up at the top auto scaling and then the minimum",
    "start": "2957820",
    "end": "2965260"
  },
  {
    "text": "number of tasks the desired and the maximum number of tasks just like with instances minimum desired maximum this",
    "start": "2965260",
    "end": "2972910"
  },
  {
    "text": "is for containers minimum desired and maximum and it's tasks so a task might",
    "start": "2972910",
    "end": "2979420"
  },
  {
    "text": "be multiple containers and again this is",
    "start": "2979420",
    "end": "2987760"
  },
  {
    "start": "2984000",
    "end": "3013000"
  },
  {
    "text": "always just going to be based on a cloud watch alarm so a custom alarm this could",
    "start": "2987760",
    "end": "2995230"
  },
  {
    "text": "be throughput from the load balancer is one of my favorite ones to do I'll test",
    "start": "2995230",
    "end": "3000270"
  },
  {
    "text": "an application measure what what throughput it's capable of and then as I",
    "start": "3000270",
    "end": "3005760"
  },
  {
    "text": "get to around 80 percent of that average I will scale up what do you have",
    "start": "3005760",
    "end": "3015000"
  },
  {
    "start": "3013000",
    "end": "3067000"
  },
  {
    "text": "available to you for security so with security of course with the instances",
    "start": "3015000",
    "end": "3020849"
  },
  {
    "text": "you'll need to be patching instances which I hope means for you you're gonna",
    "start": "3020849",
    "end": "3026130"
  },
  {
    "text": "adopt immutable infrastructure so that might mean either baking your own custom",
    "start": "3026130",
    "end": "3031290"
  },
  {
    "text": "ami built build that into your automation Packer is great for doing",
    "start": "3031290",
    "end": "3036630"
  },
  {
    "text": "that or it might mean grabbing the latest version of our AMI",
    "start": "3036630",
    "end": "3042450"
  },
  {
    "text": "that's my preferred way to do it I think once you've started baking all of the intelligence into the container then the",
    "start": "3042450",
    "end": "3049349"
  },
  {
    "text": "underlying operating system is really meaningless so just use a generic one",
    "start": "3049349",
    "end": "3054360"
  },
  {
    "text": "provided to you that you know is going to be compatible so the AWS container or",
    "start": "3054360",
    "end": "3060870"
  },
  {
    "text": "the AWS instance for that is great",
    "start": "3060870",
    "end": "3065720"
  },
  {
    "start": "3067000",
    "end": "3152000"
  },
  {
    "text": "patching containers so as you're building your container how do you know you're running the latest code how do",
    "start": "3067550",
    "end": "3074160"
  },
  {
    "text": "you know you have libraries that aren't vulnerable to certain you know exploits",
    "start": "3074160",
    "end": "3080570"
  },
  {
    "text": "there are services that'll do this for you twist lock is just one aqua sack has",
    "start": "3080570",
    "end": "3085770"
  },
  {
    "text": "one cloud passage has one I can't think of there's another one that I've been",
    "start": "3085770",
    "end": "3091470"
  },
  {
    "text": "using but build it into your CI CD workflow so this is just an example of",
    "start": "3091470",
    "end": "3098070"
  },
  {
    "text": "Jenkins for example building your container and then once it's built your image it passes it on to twist lock",
    "start": "3098070",
    "end": "3104880"
  },
  {
    "text": "twist lock will scan it and figure out you know I'm using whatever ruby gem",
    "start": "3104880",
    "end": "3110760"
  },
  {
    "text": "that's vulnerable for for you know these eight exploits and it'll notify you of",
    "start": "3110760",
    "end": "3116280"
  },
  {
    "text": "that what's even better though is you know an exploit may not have been",
    "start": "3116280",
    "end": "3122220"
  },
  {
    "text": "discovered and twistlock can can keep track of everything that you have currently running and it'll know you",
    "start": "3122220",
    "end": "3130050"
  },
  {
    "text": "know as soon as a vulnerability is discovered it can alert you that hey your can your front end container is",
    "start": "3130050",
    "end": "3136490"
  },
  {
    "text": "vulnerable to this you should consider patching it and so you can go in update",
    "start": "3136490",
    "end": "3141960"
  },
  {
    "text": "whatever pip whatever gym whatever library you need to update and rebuild",
    "start": "3141960",
    "end": "3147870"
  },
  {
    "text": "your container with a newer version it also helps to minimize what you put in",
    "start": "3147870",
    "end": "3155400"
  },
  {
    "start": "3152000",
    "end": "3249000"
  },
  {
    "text": "the container so building small containers helps from a speed",
    "start": "3155400",
    "end": "3161040"
  },
  {
    "text": "perspective you have to download less so your deploys will be faster but also that sort of surface area that has to be",
    "start": "3161040",
    "end": "3169110"
  },
  {
    "text": "scanned by twistlock and alerted on is smaller so if you're using less libraries then there's less of a chance",
    "start": "3169110",
    "end": "3175770"
  },
  {
    "text": "for you to be outdated and less of a chance for one of those to become vulnerable so this is just an example of",
    "start": "3175770",
    "end": "3182940"
  },
  {
    "text": "a docker file that is as about as minimal as you can get we starting from scratch does anyone build",
    "start": "3182940",
    "end": "3189519"
  },
  {
    "text": "containers today that start from scratch awesome what language do you use for",
    "start": "3189519",
    "end": "3194710"
  },
  {
    "text": "that is it go yeah so go and Java are two that are great for this see I actually",
    "start": "3194710",
    "end": "3201910"
  },
  {
    "text": "have started using crystal and you can build scratch containers there as well",
    "start": "3201910",
    "end": "3207700"
  },
  {
    "text": "so anything that's compiled especially statically compiled consider starting",
    "start": "3207700",
    "end": "3215529"
  },
  {
    "text": "with a scratch container and building from there I don't know if you guys have also heard of or not but multistage",
    "start": "3215529",
    "end": "3221890"
  },
  {
    "text": "builds are pretty handy so a lot of times you can have a big container with",
    "start": "3221890",
    "end": "3226990"
  },
  {
    "text": "all of your development tools and then you compile and that compiled artifact",
    "start": "3226990",
    "end": "3232630"
  },
  {
    "text": "can be copied into a scratch container and so you you can still have all the",
    "start": "3232630",
    "end": "3237880"
  },
  {
    "text": "tooling that you need for tests for you know for everything and then what you're",
    "start": "3237880",
    "end": "3243730"
  },
  {
    "text": "left with is a single artifact I am rolls this falls into the security",
    "start": "3243730",
    "end": "3252640"
  },
  {
    "start": "3249000",
    "end": "3298000"
  },
  {
    "text": "category also you can bind iam roles to container instances but what that is",
    "start": "3252640",
    "end": "3259690"
  },
  {
    "text": "going to do is it means every container running on that instance is going to",
    "start": "3259690",
    "end": "3265000"
  },
  {
    "text": "have that set of permissions so we actually don't like doing that what we prefer is for you to bind iam roles to",
    "start": "3265000",
    "end": "3272710"
  },
  {
    "text": "the task and that way when the task launches that one task has the",
    "start": "3272710",
    "end": "3277839"
  },
  {
    "text": "permissions necessary so you'd get isolation if something compromises a different container running on the same",
    "start": "3277839",
    "end": "3284859"
  },
  {
    "text": "host it can't take over the credentials from the task that has the ability to",
    "start": "3284859",
    "end": "3291250"
  },
  {
    "text": "write to your database for example so you get a lot better isolation by by",
    "start": "3291250",
    "end": "3296380"
  },
  {
    "text": "doing this monitoring and logging cloud watch built-in natively supported you",
    "start": "3296380",
    "end": "3304779"
  },
  {
    "start": "3298000",
    "end": "3357000"
  },
  {
    "text": "log to standard out we can ship those to cloud watch automatically we have",
    "start": "3304779",
    "end": "3310140"
  },
  {
    "text": "monitoring available for CPU utilization for alb request rates error rates",
    "start": "3310140",
    "end": "3318900"
  },
  {
    "text": "latency you know all the all the good stuff all built in available for you to use if on",
    "start": "3318900",
    "end": "3326520"
  },
  {
    "text": "the other hand you like using third-party tools like for example Prometheus very popular in the",
    "start": "3326520",
    "end": "3333330"
  },
  {
    "text": "kubernetes space maybe you have some kubernetes you have some ECS you want to",
    "start": "3333330",
    "end": "3339240"
  },
  {
    "text": "ship everything to one dashboard you can do that with ECS exporter so this is",
    "start": "3339240",
    "end": "3345360"
  },
  {
    "text": "just an open source project and what I can do is export metrics out of your ECS",
    "start": "3345360",
    "end": "3351810"
  },
  {
    "text": "cluster and into a Prometheus service",
    "start": "3351810",
    "end": "3357290"
  },
  {
    "start": "3357000",
    "end": "3396000"
  },
  {
    "text": "logging with cloud watch logs the the thing to note here is log configuration",
    "start": "3357320",
    "end": "3362790"
  },
  {
    "text": "log driver AWS logs that's all you have to set in your task definition and by",
    "start": "3362790",
    "end": "3368930"
  },
  {
    "text": "setting that you're able to then ship those standard out logs to cloud watch",
    "start": "3368930",
    "end": "3375900"
  },
  {
    "text": "logs if you want to do something more custom you have additional log drivers",
    "start": "3375900",
    "end": "3381120"
  },
  {
    "text": "available to you and by using one of these then you'll be able to configure you know that logging service so this is",
    "start": "3381120",
    "end": "3392970"
  },
  {
    "text": "what cloud watch logs looks like and of course there are metric filters with",
    "start": "3392970",
    "end": "3398730"
  },
  {
    "start": "3396000",
    "end": "3432000"
  },
  {
    "text": "cloud watch logs so a lot of people of this is tracking error rates you know so",
    "start": "3398730",
    "end": "3405150"
  },
  {
    "text": "I can actually extract out all of my 500s and track the rate of 500s using",
    "start": "3405150",
    "end": "3411990"
  },
  {
    "text": "this kind of metric filter and I can see you know that I've gone from maybe with",
    "start": "3411990",
    "end": "3418080"
  },
  {
    "text": "it with a deploy I've gone from 0 to 24 per second that's probably significant I",
    "start": "3418080",
    "end": "3425430"
  },
  {
    "text": "need to look at that deploy and figure out what's wrong and maybe roll it back",
    "start": "3425430",
    "end": "3432050"
  },
  {
    "start": "3432000",
    "end": "3600000"
  },
  {
    "text": "if you want to know anything about ECS there is a github project by my coworker",
    "start": "3432080",
    "end": "3438210"
  },
  {
    "text": "Nathan Peck it's called awesome ECS definitely check it out it has all",
    "start": "3438210",
    "end": "3443910"
  },
  {
    "text": "clinkz to all kinds of resources that you can sort of dive into",
    "start": "3443910",
    "end": "3450470"
  },
  {
    "text": "and learn all kinds of stuff about ECS one last thing I want to show you don't",
    "start": "3450470",
    "end": "3460940"
  },
  {
    "text": "have chrome running",
    "start": "3460940",
    "end": "3463869"
  },
  {
    "text": "ECS workshop comm I mentioned that at the end I guess that doesn't come across",
    "start": "3466540",
    "end": "3477590"
  },
  {
    "text": "the screen",
    "start": "3477590",
    "end": "3480220"
  },
  {
    "text": "you",
    "start": "3483820",
    "end": "3485880"
  },
  {
    "text": "there we go so ECS workshop comm is a",
    "start": "3489420",
    "end": "3496630"
  },
  {
    "text": "workshop that I wrote and what this does is it sort of walks you through building",
    "start": "3496630",
    "end": "3502890"
  },
  {
    "text": "everything that we just talked about using cloud formation but using a tool that generates cloud formation for you",
    "start": "3502890",
    "end": "3510520"
  },
  {
    "text": "so the cloud formation that you end up with is like I don't know 15 stacks it's",
    "start": "3510520",
    "end": "3515950"
  },
  {
    "text": "thousands of lines of cloud formation but what you have to write yourself is",
    "start": "3515950",
    "end": "3521400"
  },
  {
    "text": "maybe ten lines so it's it's awesome from that perspective it's called mu and",
    "start": "3521400",
    "end": "3528250"
  },
  {
    "text": "it's by one of our partners stella Junt it's an open source project but what you",
    "start": "3528250",
    "end": "3534250"
  },
  {
    "text": "can do is use this tool to build an entire ECS stack launch your",
    "start": "3534250",
    "end": "3541180"
  },
  {
    "text": "applications onto it so I wrote some applications to sort of demonstrate running a front-end and a couple of",
    "start": "3541180",
    "end": "3548380"
  },
  {
    "text": "back-end api's and what you get when you deploy this application is this graphic",
    "start": "3548380",
    "end": "3555040"
  },
  {
    "text": "right here so you'll see traffic flowing through",
    "start": "3555040",
    "end": "3560230"
  },
  {
    "text": "your VPC hitting all of your endpoints is it like what I think I don't know",
    "start": "3560230",
    "end": "3572800"
  },
  {
    "text": "what the stag forma never heard of it so I don't know if it's like it or not but",
    "start": "3572800",
    "end": "3577900"
  },
  {
    "text": "what this does is it actually generates cloud formation for you and at any point if you feel like you want to walk away",
    "start": "3577900",
    "end": "3584710"
  },
  {
    "text": "from this tool all you're doing all you have left is cloud formation so it there's nothing there's no database that",
    "start": "3584710",
    "end": "3592240"
  },
  {
    "text": "has to be maintained there's nothing that ties you to continuing to use this tool I can show you the console if you",
    "start": "3592240",
    "end": "3599650"
  },
  {
    "text": "want I",
    "start": "3599650",
    "end": "3602130"
  },
  {
    "text": "but on my screen here so I'll have to look up",
    "start": "3608450",
    "end": "3613480"
  },
  {
    "text": "so for this is a cluster that I've built using this tool and I have four services",
    "start": "3616670",
    "end": "3624300"
  },
  {
    "text": "deployed to with nine running tasks its ec2 based right now when you do the",
    "start": "3624300",
    "end": "3630240"
  },
  {
    "text": "workshop you'll be doing it using Fargate so you'll see you know there's",
    "start": "3630240",
    "end": "3635840"
  },
  {
    "text": "almost no difference in how you manage things and then the tool itself I said",
    "start": "3635840",
    "end": "3644160"
  },
  {
    "text": "was mu so it gives you kind of a developer experience too so for example",
    "start": "3644160",
    "end": "3651060"
  },
  {
    "text": "I've deployed a front-end application here and if I want to see the logs I can",
    "start": "3651060",
    "end": "3657270"
  },
  {
    "text": "just run Muser vus logs - F and I'm looking at the acceptance",
    "start": "3657270",
    "end": "3664320"
  },
  {
    "text": "cluster it's like my staging cluster and I can see the logs for my application this is a rails app and it spits out",
    "start": "3664320",
    "end": "3671130"
  },
  {
    "text": "errors from time to time and I can see you know traffic flowing and this will",
    "start": "3671130",
    "end": "3677280"
  },
  {
    "text": "just follow my logs if I want to deploy the latest version of my container",
    "start": "3677280",
    "end": "3683070"
  },
  {
    "text": "there's a meu command for that if I want to push a new image there's a meu",
    "start": "3683070",
    "end": "3688170"
  },
  {
    "text": "command for that so all of this you can see and build for yourself using ECS",
    "start": "3688170",
    "end": "3696180"
  },
  {
    "text": "workshop and I encourage you to check it out it walks you through the",
    "start": "3696180",
    "end": "3701820"
  },
  {
    "text": "prerequisites that you'll need and everything that everything that it shows",
    "start": "3701820",
    "end": "3707790"
  },
  {
    "text": "you there's a copy-paste button that you can just you know copy and paste this into your terminal and what I wanted was",
    "start": "3707790",
    "end": "3714870"
  },
  {
    "text": "for you to be able to get up and running very quickly without having to know a lot and then be able to go back and deep",
    "start": "3714870",
    "end": "3721380"
  },
  {
    "text": "dive what did this build take a look at cloud formation take a look at ECS take",
    "start": "3721380",
    "end": "3726660"
  },
  {
    "text": "a look at cloud watch logs etc and sort of dive in everything that was built",
    "start": "3726660",
    "end": "3732270"
  },
  {
    "text": "here was what we talked about today it's all best practices and you can use this sort of as a model to try and follow and",
    "start": "3732270",
    "end": "3739440"
  },
  {
    "text": "then if you decide to adopt the tool into your own workflow you can certainly do that too I encourage that but even if",
    "start": "3739440",
    "end": "3746490"
  },
  {
    "text": "you don't this will still give you an idea of how should it look and you can",
    "start": "3746490",
    "end": "3751500"
  },
  {
    "text": "have a best this is stack built yes sir",
    "start": "3751500",
    "end": "3758070"
  },
  {
    "text": "soon the question is when will far gate be available in Central Europe and the answer is soon all right all right",
    "start": "3758490",
    "end": "3773170"
  },
  {
    "text": "that's the end of my talk thank you guys for hanging in and if there are any more questions feel free to come hit me up",
    "start": "3773170",
    "end": "3781000"
  },
  {
    "text": "we'll be getting started in about five minutes with the next talk about eks",
    "start": "3781000",
    "end": "3786220"
  },
  {
    "text": "thank you [Applause]",
    "start": "3786220",
    "end": "3794260"
  }
]