[
  {
    "text": "all right good looks like almost everyone's made it in through the line thank you very much for uh your interest in hearing a little bit about the ec2",
    "start": "1640",
    "end": "8440"
  },
  {
    "text": "container service my name is Chris barklay and uh glad that you're able to come here to the summit today um hope",
    "start": "8440",
    "end": "15320"
  },
  {
    "text": "that uh you've you've had a good day this is the last session of the day and then uh uh there'll be a little bit more",
    "start": "15320",
    "end": "20840"
  },
  {
    "text": "activity over in the uh the booth areas and we'll be there too um so please feel free to come on by and hear a little bit",
    "start": "20840",
    "end": "27599"
  },
  {
    "text": "more about ECS um in this session I'm going to talk a little bit about why containers have become so popular um why",
    "start": "27599",
    "end": "33920"
  },
  {
    "text": "we built the ec2 container service some common ways that we're seeing customers using containers on ECS and some",
    "start": "33920",
    "end": "40160"
  },
  {
    "text": "demonstrations that show you a little bit more about the service so on to Containers uh",
    "start": "40160",
    "end": "46520"
  },
  {
    "text": "containers are similar to hardware virtualization like ec2 however instead of partitioning a machine containers",
    "start": "46520",
    "end": "52760"
  },
  {
    "text": "isolate the processes that are running on a single operating system um who here in the audience has used Docker or or",
    "start": "52760",
    "end": "59000"
  },
  {
    "text": "heard of it yeah okay good so um this probably won't be too new to you so we'll kind of blow",
    "start": "59000",
    "end": "64360"
  },
  {
    "text": "through this um but um uh containers are a pretty useful concept especially um if you want to be able to use the the",
    "start": "64360",
    "end": "70280"
  },
  {
    "text": "operating system kernel to create multiple isolated um user space processes that can have constraints on",
    "start": "70280",
    "end": "75600"
  },
  {
    "text": "them like CPU and memory and um the docker CLI is has been really nice in",
    "start": "75600",
    "end": "81400"
  },
  {
    "text": "that it um gives you makes using containers much easier uh with command like Docker run and um Docker images",
    "start": "81400",
    "end": "89360"
  },
  {
    "text": "similarly make it easy to Define what runs inside your container and versions the entire application and these",
    "start": "89360",
    "end": "95560"
  },
  {
    "text": "Concepts enable container automation so you're able to Define your application build and share the application and then",
    "start": "95560",
    "end": "101840"
  },
  {
    "text": "deploy that the image so you might be thinking well this sounds pretty interesting but why would",
    "start": "101840",
    "end": "108680"
  },
  {
    "text": "I want to use containers well there's four key benefits to using containers the first one is the containers are",
    "start": "108680",
    "end": "115320"
  },
  {
    "text": "portable the image is consistent and it's immutable so no matter where you run it or when you start it it's the",
    "start": "115320",
    "end": "122520"
  },
  {
    "text": "same this means that um the de this makes the development life cycle a whole bunch",
    "start": "122520",
    "end": "127800"
  },
  {
    "text": "easier an image works the same on your developer's desktop and then the same in production whether you start it today or",
    "start": "127800",
    "end": "134560"
  },
  {
    "text": "you scale your environment tomorrow so there's no surprises the entire application is",
    "start": "134560",
    "end": "140560"
  },
  {
    "text": "self-contained the image is now the version and which makes appointments and scaling a lot easier because the image",
    "start": "140560",
    "end": "146519"
  },
  {
    "text": "includes your dependencies the other thing about portability that I think is pretty cool is that Docker images are usually really",
    "start": "146519",
    "end": "153160"
  },
  {
    "text": "small so they're usually in the tens of megabytes for the image and so that makes it super",
    "start": "153160",
    "end": "159440"
  },
  {
    "text": "sharable the second benefit is that containers are flexible you can create",
    "start": "160239",
    "end": "165360"
  },
  {
    "text": "clean reproducible and modular environments using containers so whereas in the past you might have had multiple",
    "start": "165360",
    "end": "171040"
  },
  {
    "text": "processes that would be on the same operating system for example maybe your Ruby um uh application server caching",
    "start": "171040",
    "end": "178080"
  },
  {
    "text": "log pushing now you can have microservices that make it easy to decouple those applications into",
    "start": "178080",
    "end": "184440"
  },
  {
    "text": "smaller chunks and those smaller chunks reduce complexity and let your teams move faster than they could have before",
    "start": "184440",
    "end": "191239"
  },
  {
    "text": "while still running the processes on the same host so a good example of this is that you have reduced Library conflicts",
    "start": "191239",
    "end": "198000"
  },
  {
    "text": "so if you have two processes that both use the same library but maybe one ends up needing to use a different version of",
    "start": "198000",
    "end": "204000"
  },
  {
    "text": "that library now if they're running into two different containers on the same host that's isolated you don't have to",
    "start": "204000",
    "end": "209200"
  },
  {
    "text": "worry about that this streamlines both code deployment and infrastructure",
    "start": "209200",
    "end": "215640"
  },
  {
    "text": "management the third benefit is that Docker containers are fast and by simply",
    "start": "216280",
    "end": "221480"
  },
  {
    "text": "stating that Docker images start fast would probably sell the technology a little bit short because speeds apparent",
    "start": "221480",
    "end": "226920"
  },
  {
    "text": "in both the performance characteristics of starting an image as well as the application life cycle and deployment",
    "start": "226920",
    "end": "232519"
  },
  {
    "text": "benefits so yes containers start quickly because the operating system is already running but every container can be a",
    "start": "232519",
    "end": "238480"
  },
  {
    "text": "single-threaded development stream so you have less interdependencies and you also have operational benefits for",
    "start": "238480",
    "end": "244879"
  },
  {
    "text": "example you can have it manage your base image and all the updates there and then",
    "start": "244879",
    "end": "250120"
  },
  {
    "text": "your developers just do new Docker builds and they can focus on their application without having to worry",
    "start": "250120",
    "end": "255239"
  },
  {
    "text": "about all those dependencies making it a lot faster for development and",
    "start": "255239",
    "end": "261199"
  },
  {
    "text": "release the fourth benefit is efficiency containers are efficient because you can allocate exactly the resources you want",
    "start": "262120",
    "end": "268919"
  },
  {
    "text": "the specific CP specific Ram the discs the network and since it shares the same operating",
    "start": "268919",
    "end": "274520"
  },
  {
    "text": "system kernel in libraries containers use less resources than if you running the same processes on different virtual",
    "start": "274520",
    "end": "280199"
  },
  {
    "text": "machines so it's just a different way of getting",
    "start": "280199",
    "end": "284400"
  },
  {
    "text": "isolation so how would you actually use containers in a deployment pipeline well",
    "start": "285360",
    "end": "290440"
  },
  {
    "text": "I mean the first way where you'd probably start off is your Ops Team would create certified base images and",
    "start": "290440",
    "end": "295520"
  },
  {
    "text": "those base images would start from operating systems and the operating system dis roads available in uh places",
    "start": "295520",
    "end": "301400"
  },
  {
    "text": "like Docker Hub and then they would augment those base images with all the necessary patches and utilities that",
    "start": "301400",
    "end": "306440"
  },
  {
    "text": "they might have so maybe it's um security agents and things like that that they require you to run on on your",
    "start": "306440",
    "end": "312600"
  },
  {
    "text": "um applications those base images can then be used to create utility containers for",
    "start": "312600",
    "end": "318960"
  },
  {
    "text": "example like a loging container a ruby container MySQL Etc and then your developers use those",
    "start": "318960",
    "end": "325919"
  },
  {
    "text": "containers on their laptops to build in their source code they do this by creating a container image using a",
    "start": "325919",
    "end": "331319"
  },
  {
    "text": "manifest file which is called a Docker file that can be versioned and",
    "start": "331319",
    "end": "337039"
  },
  {
    "text": "shared and then you can customize that image at runtime using environment variables for example you can use the",
    "start": "337039",
    "end": "343039"
  },
  {
    "text": "same image in a development or test environment and customize the database endpoint that it points",
    "start": "343039",
    "end": "349960"
  },
  {
    "text": "at so let's kind of show this uh in action let me show you a quick demonstration for folks that may not",
    "start": "350000",
    "end": "355720"
  },
  {
    "text": "have used um Docker yet so let me go ahead and I'll bring up up my my CLI",
    "start": "355720",
    "end": "361440"
  },
  {
    "text": "find my mouse",
    "start": "361440",
    "end": "364440"
  },
  {
    "text": "here oops lost my terminal move that back",
    "start": "367840",
    "end": "373160"
  },
  {
    "text": "over it's not going to help we all know we have to log in as a",
    "start": "376039",
    "end": "381560"
  },
  {
    "text": "with the right username",
    "start": "381560",
    "end": "384960"
  },
  {
    "text": "all right so let me go ahead and uh boriz my window a little bit here oops",
    "start": "414039",
    "end": "420720"
  },
  {
    "text": "and hopefully you guys can see this with the font size um so basically what I'm going to do is um I'm going to um get",
    "start": "422599",
    "end": "430680"
  },
  {
    "text": "clone um a repository I have so we have a a sample application that's um that's",
    "start": "430680",
    "end": "435960"
  },
  {
    "text": "running here um that we're going to run and uh it's available on on AWS labs and it's basically a simple PHP application",
    "start": "435960",
    "end": "443440"
  },
  {
    "text": "and inside here I have my my source which is basically a pretty simple uh uh",
    "start": "443440",
    "end": "450000"
  },
  {
    "text": "web page that that displays a welcome message and um I have a Docker file",
    "start": "450000",
    "end": "455080"
  },
  {
    "text": "that's in here that I'm going to use to to build it so for folks that haven't actually seen what a Docker file does um",
    "start": "455080",
    "end": "460520"
  },
  {
    "text": "as I mentioned um basically uh the process here is it's my manifest for what I want built into my image and so",
    "start": "460520",
    "end": "467360"
  },
  {
    "text": "I'm going to start from an auntu 124 uh base image and then I'm going to perform a number of different actions to get the",
    "start": "467360",
    "end": "473560"
  },
  {
    "text": "image to my desired state so I'm going to go ahead and do things like installing Apache and and PHP um I'm",
    "start": "473560",
    "end": "479599"
  },
  {
    "text": "going to go ahead and um add my source directory here so this is where the source code is uh I'm going to go ahead",
    "start": "479599",
    "end": "485720"
  },
  {
    "text": "and and uh run a couple um operations and then I'm going to go ahead and expose Port 80 uh to the world so that",
    "start": "485720",
    "end": "492159"
  },
  {
    "text": "people can actually see uh what I'm doing so let's go ahead and",
    "start": "492159",
    "end": "498120"
  },
  {
    "text": "um get cloned my repository that would help actually if I grab",
    "start": "498479",
    "end": "503560"
  },
  {
    "text": "my contr C there so let's go ahead",
    "start": "503560",
    "end": "510879"
  },
  {
    "text": "and oops so we can kind of see that my my repost down here and so the first step",
    "start": "510879",
    "end": "517680"
  },
  {
    "text": "that I want to do is I'm going to go ahead and and uh build um from my Docker",
    "start": "517680",
    "end": "524039"
  },
  {
    "text": "file thank",
    "start": "526160",
    "end": "529360"
  },
  {
    "text": "you oops and we do need a DOT okay so I'm building my uh my image for my",
    "start": "537560",
    "end": "543160"
  },
  {
    "text": "Docker file and so it's going through all the steps that I just showed you in that Docker file and cre to create the image and you see the nice little CLI",
    "start": "543160",
    "end": "550760"
  },
  {
    "text": "that um docker's provided that makes it pretty simple for us to to build an image and then I'm going to go ahead and",
    "start": "550760",
    "end": "556320"
  },
  {
    "text": "run that image so it's going through each of the steps here and every single step creates",
    "start": "556320",
    "end": "562519"
  },
  {
    "text": "a new image so so basically you have uh a set of images which are then independently um um aggregated um for",
    "start": "562519",
    "end": "569640"
  },
  {
    "text": "when you run your final",
    "start": "569640",
    "end": "572519"
  },
  {
    "text": "container so one of the the pieces that I had put up there um when I asked it to",
    "start": "575959",
    "end": "581120"
  },
  {
    "text": "build was I created the image and a repository name and then I put colon and I tagged it with V1 so you can actually",
    "start": "581120",
    "end": "588560"
  },
  {
    "text": "tag and version your your images in the same way as you might your your source code",
    "start": "588560",
    "end": "595480"
  },
  {
    "text": "and then the next step is I'll go ahead and and run this uh this Docker image locally so um that's kind of the the",
    "start": "607480",
    "end": "614040"
  },
  {
    "text": "sort of typical pattern you might have a developer do is they're creating in their local sandbox they're they're",
    "start": "614040",
    "end": "620519"
  },
  {
    "text": "iterating on their source code and then they're going to go ahead and and create local Docker images and uh they could uh",
    "start": "620519",
    "end": "625920"
  },
  {
    "text": "then push their their source and uh and there could be an automated build process that that pushes that same um",
    "start": "625920",
    "end": "631880"
  },
  {
    "text": "that same Docker image um to to production or to staging",
    "start": "631880",
    "end": "637800"
  },
  {
    "text": "environments okay so now my image is built so I'll go ahead and do a Docker",
    "start": "639120",
    "end": "645440"
  },
  {
    "text": "run and so that's going to go ahead and start up my Docker image and so now I'll go ahead and just in my um my",
    "start": "652920",
    "end": "661480"
  },
  {
    "text": "browser grab the IP address of my instance and let's take a look at what",
    "start": "667200",
    "end": "673760"
  },
  {
    "text": "we've built so voila so that's kind of the",
    "start": "673760",
    "end": "680120"
  },
  {
    "text": "steps you would go through in order to create your first Docker image so pretty straightforward uh pretty easy um I",
    "start": "680120",
    "end": "686880"
  },
  {
    "text": "think uh demonstrates just the Simplicity of being able to create um a a very simple uh",
    "start": "686880",
    "end": "694240"
  },
  {
    "text": "application much as you might be doing today um and again that's a nice repeatable process that uh you can Fork",
    "start": "694240",
    "end": "700720"
  },
  {
    "text": "off and uh have other developers on the team do",
    "start": "700720",
    "end": "707040"
  },
  {
    "text": "so the wrong",
    "start": "707040",
    "end": "710519"
  },
  {
    "text": "place so the docker C is really great and pretty powerful if you want to run run containers on your laptop um but",
    "start": "714560",
    "end": "722480"
  },
  {
    "text": "it's challenging to scale that to thousands of containers now suddenly you're managing a cluster and the",
    "start": "722480",
    "end": "728639"
  },
  {
    "text": "cluster management can be pretty hard so you need a way to intelligently place your containers on the hosts that have",
    "start": "728639",
    "end": "734639"
  },
  {
    "text": "the resources that you need and you and you need to know the state of everything in your system so for example what",
    "start": "734639",
    "end": "741720"
  },
  {
    "text": "instances have the available resources like the memory and ports that my container needs how do I know if a",
    "start": "741720",
    "end": "747240"
  },
  {
    "text": "container dies how how do I hook up to resources like elastic load balancing",
    "start": "747240",
    "end": "752639"
  },
  {
    "text": "how do I extend whatever system I use into my deployment pipelines third party",
    "start": "752639",
    "end": "757880"
  },
  {
    "text": "schedulers or what have you and so these are the sorts of questions we were hearing from customers that were trying to run containers on ec2 and those are",
    "start": "757880",
    "end": "765839"
  },
  {
    "text": "the questions we wanted to answer with Amazon ECS so we spoke with customers who are",
    "start": "765839",
    "end": "771480"
  },
  {
    "text": "trying to run Docker containers and felt we can make it a lot easier and that's what drove us to launch the ec2",
    "start": "771480",
    "end": "777079"
  },
  {
    "text": "container service EC has four key benefits for your for users the first is that running mod",
    "start": "777079",
    "end": "785079"
  },
  {
    "text": "distributed applications on a cluster really requires two key ingredients reliable State Management and flexible",
    "start": "785079",
    "end": "792560"
  },
  {
    "text": "scheduling and these are challenging problems to solve and Amazon ECS handles the complexity of cluster and container",
    "start": "792560",
    "end": "799639"
  },
  {
    "text": "management so you don't have to install and operate your own cluster management infrastructure at Amazon we've built a",
    "start": "799639",
    "end": "805760"
  },
  {
    "text": "number of core distributed systems that Primitives that that can actually meet our needs for running our internal",
    "start": "805760",
    "end": "811959"
  },
  {
    "text": "services and we've built Amazon ECS on top of those Primitives we then expose",
    "start": "811959",
    "end": "818279"
  },
  {
    "text": "all the State Management to you behind a simple set of apis so you're able to get the details about all the instances in",
    "start": "818279",
    "end": "824519"
  },
  {
    "text": "your cluster and all the containers that are running on those instances Amazon ECS apis respond really",
    "start": "824519",
    "end": "830560"
  },
  {
    "text": "quickly whether you have a cluster with just one instance in a few containers or a dynamic cluster with thousands of",
    "start": "830560",
    "end": "837240"
  },
  {
    "text": "containers so what's auler well auler understands the needs",
    "start": "837240",
    "end": "844160"
  },
  {
    "text": "of your system that is the work that needs to be done to satisfy uh things like running an application or starting",
    "start": "844160",
    "end": "850519"
  },
  {
    "text": "a container that needs 200 megabytes of RAM and Port 80 and looks to efficiently satisfy those",
    "start": "850519",
    "end": "857199"
  },
  {
    "text": "requests it then submits the request to the scheduler the cluster State manager rather and it requests that that",
    "start": "857199",
    "end": "864560"
  },
  {
    "text": "resource and since ECS provides optimistic concurrency control you can",
    "start": "864560",
    "end": "869759"
  },
  {
    "text": "actually have multiple schedulers that are operating at the same time so the cluster management will confirm that the",
    "start": "869759",
    "end": "875320"
  },
  {
    "text": "resource is available and then commit it to that scheduler the scheduler can listen for events from the cluster manager and take",
    "start": "875320",
    "end": "882759"
  },
  {
    "text": "action such as maintaining the availability of your applications it can also interact with other resources like elastic load balancing Amazon ECS has",
    "start": "882759",
    "end": "890600"
  },
  {
    "text": "two schedulers that help you find the optimal Place image Place excuse me instance placement based on resource",
    "start": "890600",
    "end": "896160"
  },
  {
    "text": "needs and isolation policies we have create service and run task that we'll describe in a little more detail and ECS",
    "start": "896160",
    "end": "903560"
  },
  {
    "text": "also provides the cluster State management information allowing you to integrate your own custom scheduler or thirdparty schedulers as",
    "start": "903560",
    "end": "912279"
  },
  {
    "text": "well the fourth benefit is that we designed Amazon ECS to work really well with the services you're used to and",
    "start": "912279",
    "end": "918680"
  },
  {
    "text": "that you use you can set up each cluster in its own virtual private cloud and use",
    "start": "918680",
    "end": "923720"
  },
  {
    "text": "security groups to control network access to your ec2 instances you can store persistent",
    "start": "923720",
    "end": "928959"
  },
  {
    "text": "information using EBS and you can Route traffic to Containers using EOB cloud trail integration captures every API",
    "start": "928959",
    "end": "935720"
  },
  {
    "text": "access for security analysis and resource change",
    "start": "935720",
    "end": "940360"
  },
  {
    "text": "tracking the fourth big benefit is that Amazon ECS can be easily integrated or extended through a simple set of apis",
    "start": "941360",
    "end": "949000"
  },
  {
    "text": "ECS provides complete visibility and control into your AWS resources so you can easily integrate and use your own",
    "start": "949000",
    "end": "954959"
  },
  {
    "text": "container scheduler or connect ECS um with your existing software development",
    "start": "954959",
    "end": "960240"
  },
  {
    "text": "process for example continuous integration and Delivery Systems and today we actually launched a Blog that",
    "start": "960240",
    "end": "966360"
  },
  {
    "text": "describes how to use a a simple CD process using Jenkins to create Docker",
    "start": "966360",
    "end": "971600"
  },
  {
    "text": "images and deploy those images to ECS our container agent is also fully",
    "start": "971600",
    "end": "976720"
  },
  {
    "text": "open source and available on GitHub and we look forward to hearing your input and PLL requests for",
    "start": "976720",
    "end": "983399"
  },
  {
    "text": "that during the preview we've seen a number of patterns emerge from our early users",
    "start": "984240",
    "end": "990639"
  },
  {
    "text": "one pattern is using ECS for long running applications and services Docker is a natural for this pattern it",
    "start": "990639",
    "end": "997160"
  },
  {
    "text": "supports any application in any language you define everything that's contained in the image using a Docker file which",
    "start": "997160",
    "end": "1003279"
  },
  {
    "text": "ends up being a a manifest of the image so you don't have any more of those oops I made a tweak that I forgot to document",
    "start": "1003279",
    "end": "1009959"
  },
  {
    "text": "situations because everything's there documented in the Manifest which is checked into your source code",
    "start": "1009959",
    "end": "1015600"
  },
  {
    "text": "repository your images then then become a versed artifact as well as you saw I can create I can tag an image with with",
    "start": "1015600",
    "end": "1021800"
  },
  {
    "text": "a particular version so the Jenkins Blog shows how when Jenkins creates an image it tags it with a with a unique version",
    "start": "1021800",
    "end": "1028839"
  },
  {
    "text": "before it uploads it to uh dockerhub and that can be stored in a repository",
    "start": "1028839",
    "end": "1034400"
  },
  {
    "text": "just like source code and so you can then store and ship your Docker images uh around uh through your various",
    "start": "1034400",
    "end": "1041160"
  },
  {
    "text": "environments or uh to to various developers in the team and you're testing and deploying the same artifacts",
    "start": "1041160",
    "end": "1047319"
  },
  {
    "text": "so when Jenkins or whatever build system you're using builds the docker image you can deploy that Docker image into your",
    "start": "1047319",
    "end": "1053600"
  },
  {
    "text": "staging environment and then when that passes all your integration tests you can deploy that same image into",
    "start": "1053600",
    "end": "1060360"
  },
  {
    "text": "production you can also decompose your application into microservices so you",
    "start": "1060360",
    "end": "1065520"
  },
  {
    "text": "can decouple deployments even more and reduce conflicts and then as we talked about",
    "start": "1065520",
    "end": "1070600"
  },
  {
    "text": "containers simplify deployment stateless servers are are natural with Docker and each deployment is a new set of containers so as I'm scaling up my",
    "start": "1070600",
    "end": "1077960"
  },
  {
    "text": "application or deploying a new uh version of my application I'm just deploying those those containers and",
    "start": "1077960",
    "end": "1083120"
  },
  {
    "text": "they look exactly the same whether I'm deploying them today or deploying them tomorrow this also decreas decreases the",
    "start": "1083120",
    "end": "1090159"
  },
  {
    "text": "risk of uh of change because roll back is simple because I have a versioned image that I can roll back to uh",
    "start": "1090159",
    "end": "1096679"
  },
  {
    "text": "updating to my images becomes U pretty simple and straightforward and we'll show you that in the next",
    "start": "1096679",
    "end": "1103600"
  },
  {
    "text": "demonstration the next pattern we've heard from users is batch jobs instead of a dedicated pool of resources for",
    "start": "1105200",
    "end": "1111120"
  },
  {
    "text": "each job now you can use a shared pool for multiple jobs to increase your efficiency especially for short-lived",
    "start": "1111120",
    "end": "1117120"
  },
  {
    "text": "diversity processes for example corsera is using ECS to handle automatic raing",
    "start": "1117120",
    "end": "1122840"
  },
  {
    "text": "of programming assignments those assignments come in and are placed onto the cluster and they run inside of a",
    "start": "1122840",
    "end": "1128679"
  },
  {
    "text": "container that can then be disposed of in the instance immediately reused by another container so the compute",
    "start": "1128679",
    "end": "1135159"
  },
  {
    "text": "resources that you're using those are your ec2 instances can use autoscaling spot dedicated and reserved instances to",
    "start": "1135159",
    "end": "1143080"
  },
  {
    "text": "give you the resource mix that you prefer so let's go through the",
    "start": "1143080",
    "end": "1149240"
  },
  {
    "text": "components of the ec2 container service and then we'll go into a demonstration of what we've uh what we",
    "start": "1149240",
    "end": "1155679"
  },
  {
    "text": "have so the the first thing to start off with is a container instance these are the ec2 instances that have been checked",
    "start": "1155679",
    "end": "1161640"
  },
  {
    "text": "into your cluster you own them you can SSH into them um you you're in complete",
    "start": "1161640",
    "end": "1166679"
  },
  {
    "text": "control of your your ec2 instances we use Docker as part of this and we",
    "start": "1166679",
    "end": "1172360"
  },
  {
    "text": "include uh an Ami that is uh pre-baked that you can use um there's also thirdparty amies from uh people like",
    "start": "1172360",
    "end": "1179159"
  },
  {
    "text": "coros that you can use with the ec2 container service um and it has the our our Ami has Docker and our agent",
    "start": "1179159",
    "end": "1185840"
  },
  {
    "text": "pre-installed and our agent processes the commands from the ec2 container service uh for example starting",
    "start": "1185840",
    "end": "1192480"
  },
  {
    "text": "containers and stopping containers and then is aware of all the resources that are being utilized as I mentioned it's all open",
    "start": "1192480",
    "end": "1198919"
  },
  {
    "text": "source and available on GitHub and we certainly love to to see your feedback on",
    "start": "1198919",
    "end": "1204559"
  },
  {
    "text": "that the next uh uh piece of ECS is is a cluster and a cluster is a collection of",
    "start": "1205200",
    "end": "1210559"
  },
  {
    "text": "resources basically the instances and the containers that are running on it um",
    "start": "1210559",
    "end": "1215679"
  },
  {
    "text": "you can have multiple availability zones in your cluster it's just really a a bucket of resources for you to use and",
    "start": "1215679",
    "end": "1222760"
  },
  {
    "text": "it's dynamically scalable so a common pattern we see is people using autoscaling to scale your cluster up and",
    "start": "1222760",
    "end": "1228159"
  },
  {
    "text": "down as as your needs um increase or decrease and you can segment clusters for particular purposes for example you",
    "start": "1228159",
    "end": "1234440"
  },
  {
    "text": "could have a development cluster and a staging cluster uh you could use clusters for various",
    "start": "1234440",
    "end": "1240360"
  },
  {
    "text": "teams the third concept is Task definitions this is how you model your application a task definition lets you",
    "start": "1241960",
    "end": "1248720"
  },
  {
    "text": "define the containers that you want to run together on a particular instance a",
    "start": "1248720",
    "end": "1253760"
  },
  {
    "text": "task definition also lets you specify Docker Concepts like links so you can Network um between your containers that",
    "start": "1253760",
    "end": "1259400"
  },
  {
    "text": "you're running on the instance it also lets you specify things like volumes so if your containers need",
    "start": "1259400",
    "end": "1264919"
  },
  {
    "text": "to have persistent storage task definitions are tracked by name and revision just like your source",
    "start": "1264919",
    "end": "1272240"
  },
  {
    "text": "code so the demonstration that I'm going to show you uses two containers in addition to the PHP app that I",
    "start": "1272240",
    "end": "1278679"
  },
  {
    "text": "demonstrated earlier I have a time of day app that I've will interface with my PHP app over a shared volume the time of",
    "start": "1278679",
    "end": "1285520"
  },
  {
    "text": "day app writes the time every second in the PHP app reads it and displays",
    "start": "1285520",
    "end": "1290640"
  },
  {
    "text": "it so here's what a Tas definition looks like let me go through in a little bit",
    "start": "1290640",
    "end": "1295919"
  },
  {
    "text": "more uh detail here you can specify resources like CPU and memory ports and",
    "start": "1295919",
    "end": "1301520"
  },
  {
    "text": "volumes for each container you can specify the command that needs to be run when the container starts and then the",
    "start": "1301520",
    "end": "1307240"
  },
  {
    "text": "essential flag specifies whether the task should fail if the container stops running so if I have multiple containers",
    "start": "1307240",
    "end": "1313520"
  },
  {
    "text": "that are running in a task and some of them need to need to be running you would mark them as essential",
    "start": "1313520",
    "end": "1320520"
  },
  {
    "text": "you also specify the docker image to use for the",
    "start": "1320559",
    "end": "1324520"
  },
  {
    "text": "container and that image can come from Docker Hub or or any Docker registry both public and private",
    "start": "1326320",
    "end": "1334440"
  },
  {
    "text": "repos so once you have a task definition defined then the next thing to do is to schedule it and so you want to schedule",
    "start": "1334840",
    "end": "1340799"
  },
  {
    "text": "on an instance that has available resources once you've scheduled it then",
    "start": "1340799",
    "end": "1346320"
  },
  {
    "text": "you have a task one or more tasks so a task is an instantiation of a task definition you can have a task with just",
    "start": "1346320",
    "end": "1352880"
  },
  {
    "text": "one container or up to 10 that work together on a single machine for example you could have",
    "start": "1352880",
    "end": "1358120"
  },
  {
    "text": "engine X in front of rails or redus behind rails and so you can run tasks on your",
    "start": "1358120",
    "end": "1363520"
  },
  {
    "text": "container instances as many tasks as can fit on that container instance based on the available",
    "start": "1363520",
    "end": "1369919"
  },
  {
    "text": "resources ECS has two apis that we give you for scheduling runtask is our is a",
    "start": "1371520",
    "end": "1377559"
  },
  {
    "text": "simple uh API that lets you randomly Place tasks in a spot that fits it's",
    "start": "1377559",
    "end": "1382799"
  },
  {
    "text": "good for short-lived containers like batch jobs today we announced the ability to",
    "start": "1382799",
    "end": "1389760"
  },
  {
    "text": "create Services the service scheduler is good for long running applications you reference the task definition and an",
    "start": "1389760",
    "end": "1396960"
  },
  {
    "text": "account of how many tasks you want to run and optionally an elastic load",
    "start": "1396960",
    "end": "1402600"
  },
  {
    "text": "balancer the load balancer then routes traffic across your containers so you have tasks that that",
    "start": "1402880",
    "end": "1409760"
  },
  {
    "text": "started up the instances are added to the load balancer as the tasks are stopped we remove the those from the",
    "start": "1409760",
    "end": "1416320"
  },
  {
    "text": "load balancer we also used the elb health check to know if the task is is healthy",
    "start": "1416320",
    "end": "1422559"
  },
  {
    "text": "or not so if a task stops running and or an elb health check fails then we'll go",
    "start": "1422559",
    "end": "1428159"
  },
  {
    "text": "ahead and restart the task for you so the service scheduler always tries to have the number of uh tasks running",
    "start": "1428159",
    "end": "1434600"
  },
  {
    "text": "healthy that you've requested you can also use this as a very simple way for doing Simple service",
    "start": "1434600",
    "end": "1440919"
  },
  {
    "text": "Discovery so you can use the list and describe apis to find the services and find the EBS associated with those",
    "start": "1440919",
    "end": "1447360"
  },
  {
    "text": "services and then you can use that as a means from for one service to talk to another",
    "start": "1447360",
    "end": "1453440"
  },
  {
    "text": "service the other thing you can do with Services is you can update them for example you could scale it up or down I",
    "start": "1454360",
    "end": "1460200"
  },
  {
    "text": "can take a service start with five add say I want 10 and it'll add five more I can then take it down to three and it'll",
    "start": "1460200",
    "end": "1466399"
  },
  {
    "text": "it'll take seven away I can also update it to deploy new versions so I can reference a new task",
    "start": "1466399",
    "end": "1473960"
  },
  {
    "text": "definition revision and the service will stop the tasks that were running the previous revision and start tasks",
    "start": "1473960",
    "end": "1480720"
  },
  {
    "text": "running the new revision all the while it's still interfacing with elb if you've asked it",
    "start": "1480720",
    "end": "1485960"
  },
  {
    "text": "to use elb so it'll drain the connections before it stops the",
    "start": "1485960",
    "end": "1490720"
  },
  {
    "text": "task so let's go ahead and and take you through a demonstration of uh these cont Concepts so typical user workflow that",
    "start": "1494480",
    "end": "1501799"
  },
  {
    "text": "comes to Amazon ECS uh today you'd probably come to the Management console that we launched today which I'll show",
    "start": "1501799",
    "end": "1507760"
  },
  {
    "text": "you you want to run a service you're going to need to start up a pool of instances and those again are the",
    "start": "1507760",
    "end": "1513480"
  },
  {
    "text": "container instances on which you're going to be running your tasks going to create a task definition",
    "start": "1513480",
    "end": "1519600"
  },
  {
    "text": "so that's the Manifest for the the T the containers you want to run together on a particular instance so we're declaring",
    "start": "1519600",
    "end": "1526799"
  },
  {
    "text": "our resources going to go ahead and create a service and I'm going to reference an elastic load balancer and then tell how many of",
    "start": "1526799",
    "end": "1534240"
  },
  {
    "text": "these I want to run and then ECS will go ahead and start this up for me so let's",
    "start": "1534240",
    "end": "1539520"
  },
  {
    "text": "go ahead and take you",
    "start": "1539520",
    "end": "1542760"
  },
  {
    "text": "through don't need our command line for right now instead why don't we go ahead and come over to our ECS Management",
    "start": "1548120",
    "end": "1554120"
  },
  {
    "text": "console so um folks that have tried ECS before you probably used the CLI um so I'm happy to announce",
    "start": "1554120",
    "end": "1562279"
  },
  {
    "text": "that we've launched a Management console today which um you know augments this the CLI certainly makes it pretty easy",
    "start": "1562279",
    "end": "1567880"
  },
  {
    "text": "to come and take a look at what's running inside your cluster uh I'm running out of Tokyo today because we also launched uh an endpoint in Tokyo so",
    "start": "1567880",
    "end": "1575679"
  },
  {
    "text": "now we have uh four regions that we support um in addition to us East uh one",
    "start": "1575679",
    "end": "1581559"
  },
  {
    "text": "and US West 2 so that's uh Portland we also support Dublin and and now Tokyo",
    "start": "1581559",
    "end": "1588840"
  },
  {
    "text": "um so this um cluster is is pretty boring it has uh no Services no tasks U",
    "start": "1588840",
    "end": "1594640"
  },
  {
    "text": "but I do have a nice pool of instances um so we can kind of see here that I have 10 instances and uh we can see the",
    "start": "1594640",
    "end": "1601360"
  },
  {
    "text": "ec2 instances uh which ones are uh are actually connected looks like I have an ec2 instance that's not connected uh",
    "start": "1601360",
    "end": "1608440"
  },
  {
    "text": "we'll see how that all works out um with my service um and the next step I probably want to do is show you the task",
    "start": "1608440",
    "end": "1615080"
  },
  {
    "text": "definitions so ahead of time I went ahead and created um a task definition for my demonstration I have two",
    "start": "1615080",
    "end": "1622080"
  },
  {
    "text": "revisions here let's go ahead and we'll take a look at the latest revision and we can see that um I can",
    "start": "1622080",
    "end": "1628720"
  },
  {
    "text": "just take a look at um at things at my task definition uh through the the UI",
    "start": "1628720",
    "end": "1634279"
  },
  {
    "text": "both in a Json format as well as in a a clickable format and if I wanted to",
    "start": "1634279",
    "end": "1639520"
  },
  {
    "text": "create a new revision I can just click that button and I can make edits here in the the",
    "start": "1639520",
    "end": "1646600"
  },
  {
    "text": "Builder uh or in the Json",
    "start": "1646600",
    "end": "1650158"
  },
  {
    "text": "so one thing I might want to do is um go ahead and and start",
    "start": "1652799",
    "end": "1657880"
  },
  {
    "text": "up a new service so let's go ahead and create ourselves a service and I'm going",
    "start": "1657880",
    "end": "1663760"
  },
  {
    "text": "to go ahead and use the revision two of my my demo and let's just call this my Summit demo and let's go ahead and start",
    "start": "1663760",
    "end": "1672880"
  },
  {
    "text": "up we'll start up six tasks and I do want to use uh elb so I'm going to go",
    "start": "1672880",
    "end": "1679600"
  },
  {
    "text": "ahead and select an elb that I I created ahead of time and uh I only have one container that I've exposed ports out of",
    "start": "1679600",
    "end": "1686000"
  },
  {
    "text": "the two that I have in my task definition so I'm only seeing the one with the exposed ports I'm going to go ahead and select that and then the last",
    "start": "1686000",
    "end": "1693320"
  },
  {
    "text": "thing I have to do is um is uh get a service role so for those of you familiar with uh identity and access",
    "start": "1693320",
    "end": "1699000"
  },
  {
    "text": "management roles um the service needs a role that it can use in order to uh work",
    "start": "1699000",
    "end": "1704440"
  },
  {
    "text": "on our behalf uh to do things like uh managing the elastic load balancer for me so I'm going to go ahead and select",
    "start": "1704440",
    "end": "1710880"
  },
  {
    "text": "that and go ahead and create the service and so now I've requested uh we",
    "start": "1710880",
    "end": "1717360"
  },
  {
    "text": "can see the desired count is six so I I've requested that that uh six start running and uh that I I have zero",
    "start": "1717360",
    "end": "1724720"
  },
  {
    "text": "pending and zero running let's go ahead and refresh and uh see how we're doing so the service scheduler is going to go",
    "start": "1724720",
    "end": "1730360"
  },
  {
    "text": "ahead and start those tasks and so they go into pending which means that um",
    "start": "1730360",
    "end": "1735799"
  },
  {
    "text": "we're asking the the instances that have capacity uh if they can start running",
    "start": "1735799",
    "end": "1740840"
  },
  {
    "text": "these for us and uh if we were to click into any of these tasks I can get a little more details about it so I can see for example what ec2 instance it's",
    "start": "1740840",
    "end": "1748320"
  },
  {
    "text": "running on in fact it's already running now um I can see the the status of the containers so for example one of my",
    "start": "1748320",
    "end": "1756159"
  },
  {
    "text": "containers could possibly fail it'd be so this is a way I could take a look and see that um I can see uh details like",
    "start": "1756159",
    "end": "1763279"
  },
  {
    "text": "the uh the endpoint um so gives me a bunch of information that could be",
    "start": "1763279",
    "end": "1769559"
  },
  {
    "text": "useful um so now I know that I have all these these tasks running and uh I can",
    "start": "1769559",
    "end": "1775159"
  },
  {
    "text": "now take a look at my load balancer um and let's take a look at the",
    "start": "1775159",
    "end": "1780760"
  },
  {
    "text": "instances in here and we can see that we have some",
    "start": "1780760",
    "end": "1785960"
  },
  {
    "text": "instance IDs that have been added so that's good to see uh they look like they're in service that's always good as",
    "start": "1785960",
    "end": "1791240"
  },
  {
    "text": "well so now I can take a look at this load balancer endpoint and let's see if my application's actually running",
    "start": "1791240",
    "end": "1799799"
  },
  {
    "text": "and so here we go and so now you can see kind of that additional piece that I didn't have in my earlier demo because I",
    "start": "1808360",
    "end": "1813640"
  },
  {
    "text": "just had my one container running I have a time of day and so if I were to uh refresh this we can see the time uh is",
    "start": "1813640",
    "end": "1820880"
  },
  {
    "text": "in fact moving forward as my uh busy box app continues to write the time of day",
    "start": "1820880",
    "end": "1826120"
  },
  {
    "text": "into my shared volume that my uh PHP app is now reading from so we have our service up and",
    "start": "1826120",
    "end": "1834039"
  },
  {
    "text": "running and if I want to to scale it let's go ahead and we'll add a little",
    "start": "1834039",
    "end": "1840919"
  },
  {
    "text": "more and watch what happens and at the same time I'm going to go ahead",
    "start": "1840919",
    "end": "1848640"
  },
  {
    "text": "and update my image so we can see the two pending",
    "start": "1848640",
    "end": "1854120"
  },
  {
    "text": "there so why don't I go ahead and I'll start up a new C session and we'll",
    "start": "1854120",
    "end": "1859159"
  },
  {
    "text": "update my image in some",
    "start": "1859159",
    "end": "1862880"
  },
  {
    "text": "way so let me just go ahead and start up another",
    "start": "1864519",
    "end": "1870320"
  },
  {
    "text": "CLI so we'll go ahead and change into our",
    "start": "1882240",
    "end": "1887960"
  },
  {
    "text": "so if we want to we can go ahead and maybe we want to have a couple extra exclamation points after our",
    "start": "1894200",
    "end": "1900799"
  },
  {
    "text": "congratulations and we'll go ahead and uh do our our Docker build",
    "start": "1901679",
    "end": "1906960"
  },
  {
    "text": "again taking care actually to type everything",
    "start": "1908279",
    "end": "1913519"
  },
  {
    "text": "right and I'll call this I'll tag this with version two oops and of course need the the dot to",
    "start": "1913600",
    "end": "1920679"
  },
  {
    "text": "reference my Docker file and it's in that directory above so",
    "start": "1920679",
    "end": "1926799"
  },
  {
    "text": "we'll go ahead and um and start that and we can see that it actually goes through a couple of my steps pretty fast so it",
    "start": "1926799",
    "end": "1931840"
  },
  {
    "text": "uh really quickly ran through the first few steps because I've already cached those images on this machine on when I previously did a Docker build the things",
    "start": "1931840",
    "end": "1938760"
  },
  {
    "text": "that it's doing differently is that um it had to add the source back into VAR www because I updated the the source and",
    "start": "1938760",
    "end": "1945320"
  },
  {
    "text": "so the steps after this are going to be uh run again so so now I'm building my image and the",
    "start": "1945320",
    "end": "1951919"
  },
  {
    "text": "The Next Step I'm going to need to do once the image is built is push that up to my Docker repository while this is happening why don't I go ahead and and",
    "start": "1951919",
    "end": "1958240"
  },
  {
    "text": "check on the status of U my my tasks that I asked to to run so now we can see",
    "start": "1958240",
    "end": "1964080"
  },
  {
    "text": "that I indeed have uh the eight tasks that I I requested I'm going to go ahead and uh bump that back down to",
    "start": "1964080",
    "end": "1972840"
  },
  {
    "text": "six and what I'm going to do is go to my task definition down",
    "start": "1972840",
    "end": "1979840"
  },
  {
    "text": "here and let's go ahead and create a new revision and you guys probably know what I'm going to do here I'm going to go",
    "start": "1980720",
    "end": "1986679"
  },
  {
    "text": "ahead and instead of just pulling from the head I should probably be pulling from the actual revision that I want so",
    "start": "1986679",
    "end": "1994200"
  },
  {
    "text": "I'm going to update it to use revision two going to go ahead and create that new revision so now I have a a task",
    "start": "1994200",
    "end": "2001559"
  },
  {
    "text": "definition revision three let's go back to our service",
    "start": "2001559",
    "end": "2009120"
  },
  {
    "text": "and take a look at the build status over here still",
    "start": "2011720",
    "end": "2016638"
  },
  {
    "text": "building this is a good uh a good demonstration of uh the power of",
    "start": "2023840",
    "end": "2029000"
  },
  {
    "text": "different instance sizes um T T1 micros would not be the the best thing to use",
    "start": "2029000",
    "end": "2034360"
  },
  {
    "text": "for your build machines",
    "start": "2034360",
    "end": "2037799"
  },
  {
    "text": "so coming back over here let's just take a look we have our desired count at at six running counts now back to six so I",
    "start": "2053359",
    "end": "2060358"
  },
  {
    "text": "successfully went ahead and and uh decommission those uh waiting for the connections to drain of course there",
    "start": "2060359",
    "end": "2065679"
  },
  {
    "text": "probably aren't that many connections to drain but um the connection draining is kind of a nice little feature there as well so let's go ahead and we're going",
    "start": "2065679",
    "end": "2071800"
  },
  {
    "text": "to do a Docker push um so with Docker we need to push this image to dockerhub so",
    "start": "2071800",
    "end": "2077599"
  },
  {
    "text": "I'm going to go ahead and take the My Demo V2 and get it off my machine and actually push it up to Docker Hub so I",
    "start": "2077599",
    "end": "2084679"
  },
  {
    "text": "can I can use it um elsewhere so it's going to go ahead and",
    "start": "2084679",
    "end": "2090000"
  },
  {
    "text": "and push that um and then I can come over here and update my",
    "start": "2090000",
    "end": "2095599"
  },
  {
    "text": "service so I was using revision two now I want to use revision",
    "start": "2095599",
    "end": "2101480"
  },
  {
    "text": "three let's just make sure that it's all up there we'll wait for it to be done pushing",
    "start": "2101480",
    "end": "2108440"
  },
  {
    "text": "here we go so let's go ahead and we'll update our",
    "start": "2135400",
    "end": "2140160"
  },
  {
    "text": "service so scrolling down to see the tasks um another nice thing about the service scheduler is we have an event",
    "start": "2142960",
    "end": "2148520"
  },
  {
    "text": "stream here and so you can see what's going on with the service schedule so we can see for example um you know that we",
    "start": "2148520",
    "end": "2154680"
  },
  {
    "text": "we stopped the two tasks when I asked it to to um go from 8 to 6 um drain",
    "start": "2154680",
    "end": "2160000"
  },
  {
    "text": "connections um and now you you'll start seeing events on starting up the new task and so let's just take a look here",
    "start": "2160000",
    "end": "2166920"
  },
  {
    "text": "we can see the that we have a couple still running revision three some that are running revision uh excuse me two so",
    "start": "2166920",
    "end": "2173960"
  },
  {
    "text": "it's in the process of of updating um those tasks uh for me so gives you a",
    "start": "2173960",
    "end": "2179400"
  },
  {
    "text": "nice sense for how you can do deployments now using the service scheduler um",
    "start": "2179400",
    "end": "2186880"
  },
  {
    "text": "so if we were to go over to uh we have a couple version version threes running so",
    "start": "2187720",
    "end": "2193319"
  },
  {
    "text": "now if if you're impatient you can uh you know start start refreshing and uh hopefully you'll catch one of the the",
    "start": "2193319",
    "end": "2200400"
  },
  {
    "text": "new ones that's running revision",
    "start": "2200400",
    "end": "2203920"
  },
  {
    "text": "three still a lot run with version two I guess",
    "start": "2213720",
    "end": "2219520"
  },
  {
    "text": "see if I can catch one at least and my load",
    "start": "2231200",
    "end": "2237760"
  },
  {
    "text": "balancer there's always going Direct",
    "start": "2243960",
    "end": "2248560"
  },
  {
    "text": "now so we don't keep you guys waiting for the whole thing uh we can at least go direct and uh take a look at one of",
    "start": "2265079",
    "end": "2270400"
  },
  {
    "text": "my containers hopefully",
    "start": "2270400",
    "end": "2274119"
  },
  {
    "text": "almost all the way there there we go thank",
    "start": "2292760",
    "end": "2300920"
  },
  {
    "text": "you all right so thanks for the patience",
    "start": "2301400",
    "end": "2307680"
  },
  {
    "text": "um the nice thing though too about uh ECS is that um uh if if there are uh",
    "start": "2307680",
    "end": "2314119"
  },
  {
    "text": "it's not just about the the deployments and keeping your containers running um it's also about the state of of the",
    "start": "2314119",
    "end": "2320400"
  },
  {
    "text": "containers container instances themselves too so um if we were to shut down some of the instances that that are",
    "start": "2320400",
    "end": "2327400"
  },
  {
    "text": "running in that cluster um the service scheduler would see that those uh not only the container instances were gone",
    "start": "2327400",
    "end": "2332520"
  },
  {
    "text": "but the containers themselves were unhealthy it would try to find a place to start up tasks so it always has your",
    "start": "2332520",
    "end": "2337560"
  },
  {
    "text": "desired count so hopefully that gives you a good overview of of the service scheduler and and how that",
    "start": "2337560",
    "end": "2344920"
  },
  {
    "text": "works so Auto so Autos scaling um so sounds like we're uh we're ready to get into our uh our",
    "start": "2345640",
    "end": "2353640"
  },
  {
    "text": "Q&A which is fine um so um hopefully that gives you a good overview uh of",
    "start": "2354560",
    "end": "2360119"
  },
  {
    "text": "Amazon ECS happy to take questions so we already had a a preemptive uh thread",
    "start": "2360119",
    "end": "2365200"
  },
  {
    "text": "here that uh that uh wants to about uh autoscaling so there's two places you can uh you can autoscale um with ECS you",
    "start": "2365200",
    "end": "2372800"
  },
  {
    "text": "can autoscale your container instances and that works just like um Autos scaling does today so you can use metrics that you want in order to scale",
    "start": "2372800",
    "end": "2379520"
  },
  {
    "text": "your cluster up and down and then there's um scaling your container instances themselves inside your your",
    "start": "2379520",
    "end": "2384839"
  },
  {
    "text": "your service and so uh we don't have Auto scaling as part of the this version of the service scheduler but you",
    "start": "2384839",
    "end": "2391480"
  },
  {
    "text": "certainly could use metrics to uh with with cloudwatch to identify constraints",
    "start": "2391480",
    "end": "2397040"
  },
  {
    "text": "inside your service like CPU or or memory utilization and then you could just adjust the the service definition",
    "start": "2397040",
    "end": "2403040"
  },
  {
    "text": "to increase the the count of uh of tasks that you're running in your service yes",
    "start": "2403040",
    "end": "2410040"
  },
  {
    "text": "sir price um Amazon ECS is uh free you only pay for the resources that you're",
    "start": "2410040",
    "end": "2415960"
  },
  {
    "text": "using so the ec2 instances the load balancers and that sort of thing",
    "start": "2415960",
    "end": "2422599"
  },
  {
    "text": "yes private Docker registry so we support private Docker Registries today um there's um some documentation about",
    "start": "2422839",
    "end": "2429560"
  },
  {
    "text": "how you'd set it up um but it's a pretty straightforward to set up and you can uh pull images from private Docker",
    "start": "2429560",
    "end": "2437440"
  },
  {
    "text": "Registries yeah that's it's integrated uh today you can use for example a private repositor repository on doer Hub",
    "start": "2437440",
    "end": "2444319"
  },
  {
    "text": "with ECF oh are you asking if we have our own oh sorry yeah we don't have our own private registry",
    "start": "2444319",
    "end": "2452000"
  },
  {
    "text": "yet right thank you for the feedback yeah we certainly appreciate the feedback on uh things that were missing",
    "start": "2452240",
    "end": "2458160"
  },
  {
    "text": "um we're actively listening so folks that are uh if you want to give us feedback in the forums uh we use that",
    "start": "2458160",
    "end": "2464280"
  },
  {
    "text": "feedback to prioritize our road map so appreciate the input on on a private Docker registry thank you y I have a",
    "start": "2464280",
    "end": "2469359"
  },
  {
    "text": "question yes so what about failure response rate say you're pushing out a",
    "start": "2469359",
    "end": "2475160"
  },
  {
    "text": "build and in the first few instances you see oh no that's a bad build and you want to cut it is there a quick way to",
    "start": "2475160",
    "end": "2482480"
  },
  {
    "text": "like pull the plug on pushing out a bad build yeah I mean so you you can",
    "start": "2482480",
    "end": "2489040"
  },
  {
    "text": "definitely uh right now the the deployment happens basically in in bulk it starts to um start new tasks as it's",
    "start": "2489040",
    "end": "2497920"
  },
  {
    "text": "as a stopping tasks if you are monitoring and you're seeing that those new tasks are are looking bad you can",
    "start": "2497920",
    "end": "2503319"
  },
  {
    "text": "just go and update the the service to point to your previous task definition revision and it'll just stop the process",
    "start": "2503319",
    "end": "2509480"
  },
  {
    "text": "and take care of the ones that it hasn't gotten to yet thank you I have a second question but let other people ask first",
    "start": "2509480",
    "end": "2515760"
  },
  {
    "text": "uh just a question are you able able to resolve container linking across uh ECS instances so container linking across",
    "start": "2515760",
    "end": "2522359"
  },
  {
    "text": "instances so as I mentioned with the service you now have some very basic service Discovery capabilities so what",
    "start": "2522359",
    "end": "2528119"
  },
  {
    "text": "that gives you is you can reference through the describe apis um a the the",
    "start": "2528119",
    "end": "2534599"
  },
  {
    "text": "name of the service that you want to link to and then you can get the elb for that and then you would point to that elb and the elb is what would reference",
    "start": "2534599",
    "end": "2541720"
  },
  {
    "text": "uh the containers that you'd need to route to or You' want to route to that that's what's available today um if you're in in more along that we'd love",
    "start": "2541720",
    "end": "2548960"
  },
  {
    "text": "to hear your feedback question yes so does the containers work",
    "start": "2548960",
    "end": "2554240"
  },
  {
    "text": "only with the elb or would it also work with third party load balancers um so today the service scheduler is",
    "start": "2554240",
    "end": "2560079"
  },
  {
    "text": "integrated with elb um you could definitely use other uh load balancing approaches if you wanted to um using",
    "start": "2560079",
    "end": "2566880"
  },
  {
    "text": "things like uh sidecar containers um but today the the integration that we've",
    "start": "2566880",
    "end": "2572079"
  },
  {
    "text": "done with the service scheduler is with lb thanks uh question so you mentioned",
    "start": "2572079",
    "end": "2579280"
  },
  {
    "text": "uh you guys are not supporting Auto skating right now uh does that mean you",
    "start": "2579280",
    "end": "2584359"
  },
  {
    "text": "are not Auto skating uh instance or you not support Autos scaling containers",
    "start": "2584359",
    "end": "2589960"
  },
  {
    "text": "within instance yes yeah my my followup question is uh are you guys using uh uh",
    "start": "2589960",
    "end": "2597040"
  },
  {
    "text": "container custom manag manager tool like kuet cets or you have sort of in-housing",
    "start": "2597040",
    "end": "2604079"
  },
  {
    "text": "Technology how do you handle out of capacity problem for example on a certain instance there are you know",
    "start": "2604079",
    "end": "2610760"
  },
  {
    "text": "short of resources so that I cannot spin off more more containers you know things",
    "start": "2610760",
    "end": "2616319"
  },
  {
    "text": "like that so so those are all related with auto scaling so you are mentioning you are not supporting Auto scaling uh",
    "start": "2616319",
    "end": "2622880"
  },
  {
    "text": "contain let me take your first question if you don't mind so um the first question is auto scaling so uh to",
    "start": "2622880",
    "end": "2628480"
  },
  {
    "text": "clarify that we do support Auto scaling of your container instances those are ec2 instances and you can use spot",
    "start": "2628480",
    "end": "2634000"
  },
  {
    "text": "reserved instances Auto scaling uh what we don't have yet yet is autoscaling the containers but you can certainly use",
    "start": "2634000",
    "end": "2640559"
  },
  {
    "text": "cloudwatch alarms to give a give yourself an alarm and you can scale up and down your service so that's kind of",
    "start": "2640559",
    "end": "2645720"
  },
  {
    "text": "how you do it today um it's good to hear though that you might want autoscaling uh containers and and so uh that",
    "start": "2645720",
    "end": "2651839"
  },
  {
    "text": "feedback is helpful the second question you had was are we using something like kubernetes and um as I mentioned um one",
    "start": "2651839",
    "end": "2658800"
  },
  {
    "text": "of the key values of of ECS is that you don't actually have to run any cluster management software and in fact we built",
    "start": "2658800",
    "end": "2665599"
  },
  {
    "text": "ECS on top of some primi that we use to run the AWS business and so we actually",
    "start": "2665599",
    "end": "2671160"
  },
  {
    "text": "uh provide through very simple list and describe apis the full state of your cluster and you don't have to worry",
    "start": "2671160",
    "end": "2676920"
  },
  {
    "text": "about scaling that um that cluster management software that's all handled for you behind the scenes so no we don't",
    "start": "2676920",
    "end": "2682800"
  },
  {
    "text": "use kubernetes behind the scenes we're actually using Amazon developed software",
    "start": "2682800",
    "end": "2687880"
  },
  {
    "text": "yes there are downside and upsider the upsider is of course you you hide those details so people don't need to deal",
    "start": "2687880",
    "end": "2693680"
  },
  {
    "text": "with those those details but uh the the the downside side is that's lack of",
    "start": "2693680",
    "end": "2698800"
  },
  {
    "text": "control a lot of people want more control you know okay yeah maybe we can uh we can get additional",
    "start": "2698800",
    "end": "2706319"
  },
  {
    "text": "feedback thanks deac yes shall I use Chef or doer with Amazon Chef or doer um",
    "start": "2716400",
    "end": "2724640"
  },
  {
    "text": "gosh that sounds like a different session actually uh chef chef versus Docker uh I'm not sure I'm going to even",
    "start": "2724640",
    "end": "2730160"
  },
  {
    "text": "touch that um yeah I mean look you could actually use both if you wanted to I don't know if you've seen uh Packer from",
    "start": "2730160",
    "end": "2736640"
  },
  {
    "text": "Hashi Corp but it supports the ability to use uh Chef recipes to create Docker",
    "start": "2736640",
    "end": "2742160"
  },
  {
    "text": "images so I mean you could use both if you wanted I suppose I want to use as my as few as possible and get things done",
    "start": "2742160",
    "end": "2748880"
  },
  {
    "text": "so what's Vision what's your vision yeah that's that's that's probably more than we can do in a Q&A but it's a good",
    "start": "2748880",
    "end": "2754599"
  },
  {
    "text": "question and maybe afterwards we can have a talk I have a tricky one so as a medical",
    "start": "2754599",
    "end": "2761800"
  },
  {
    "text": "company we have to process patients data with",
    "start": "2761800",
    "end": "2767359"
  },
  {
    "text": "Hipp compliant environments so will Amazon cover Hipp compliance with container services",
    "start": "2767359",
    "end": "2776720"
  },
  {
    "text": "with uh is as we have covered single tency EBS uh encryption and so on sure",
    "start": "2776720",
    "end": "2784160"
  },
  {
    "text": "yeah I mean so it depends kind of with with all compliance stuff there's a little bit of um um you know how you're",
    "start": "2784160",
    "end": "2790240"
  },
  {
    "text": "using the service so if you're not storing any patient information in ECS then all you're using is ec2 and um but",
    "start": "2790240",
    "end": "2797880"
  },
  {
    "text": "um you we can talk more about your particular compliance needs uh with some of our essays that are uh fully skilled",
    "start": "2797880",
    "end": "2803680"
  },
  {
    "text": "up on on talking about compliance questions okay thank you sure u a lot of",
    "start": "2803680",
    "end": "2809720"
  },
  {
    "text": "the demos today were very good but they were very manual is there a way to have",
    "start": "2809720",
    "end": "2815200"
  },
  {
    "text": "more automation of the pipeline yeah so great question as I mentioned we have a Blog on um using uh creating a a",
    "start": "2815200",
    "end": "2822079"
  },
  {
    "text": "CI pipeline using Jenkins and uh there's actually quite a number of of pipelines for for build automation for um for",
    "start": "2822079",
    "end": "2828599"
  },
  {
    "text": "Docker images um that basically you know take a you know push to get uh build um",
    "start": "2828599",
    "end": "2834720"
  },
  {
    "text": "build the image push it to a Docker repository and then the docker repository can can uh trigger a um a",
    "start": "2834720",
    "end": "2840960"
  },
  {
    "text": "service update and so that's uh actually what the blog today uh shows and um",
    "start": "2840960",
    "end": "2846280"
  },
  {
    "text": "probably should have shown it um during my demo today",
    "start": "2846280",
    "end": "2851119"
  },
  {
    "text": "thanks um I'm wondering about elastic bean stock I know I don't really know anything about it other than it supports",
    "start": "2851359",
    "end": "2857359"
  },
  {
    "text": "Docker containers how does this compare to that sure yes so Docker um and beanock is uh runs on top of ECS so Bean",
    "start": "2857359",
    "end": "2865559"
  },
  {
    "text": "Stock's great if you have an application pattern that um def fits the beanock model so if you're um focused as an",
    "start": "2865559",
    "end": "2872480"
  },
  {
    "text": "appdev and you don't really want to worry about the details of how things are working underneath the cover beanock",
    "start": "2872480",
    "end": "2877839"
  },
  {
    "text": "is a great model it it takes care of provisioning the butt load balancer for you sets up the auto scaling groups you",
    "start": "2877839",
    "end": "2882920"
  },
  {
    "text": "know just handles all the the stuff underneath the covers um if you need more control then you could come down",
    "start": "2882920",
    "end": "2888760"
  },
  {
    "text": "and use ECS so that's kind of The quick summary so being stck is using ECS yes",
    "start": "2888760",
    "end": "2893839"
  },
  {
    "text": "cool thank you uh my next question came back around uh how do you allocate resource so if I",
    "start": "2893839",
    "end": "2902119"
  },
  {
    "text": "have a bunch of large instances and a bunch of container and I have a container model that say I can fit four",
    "start": "2902119",
    "end": "2908240"
  },
  {
    "text": "containers on a box and I deploy 10 containers does it put one container on",
    "start": "2908240",
    "end": "2913680"
  },
  {
    "text": "each box or does it start filling one box up with four containers before moving to the next one yep great",
    "start": "2913680",
    "end": "2919480"
  },
  {
    "text": "question there's a lot of different uh scheduling algorithms out there um what we use today is pretty basic it's it's",
    "start": "2919480",
    "end": "2925760"
  },
  {
    "text": "it's a random placement algorithm um but there's there's a whole bunch of schedulers out there and as Deo mentioned one of the nice things about",
    "start": "2925760",
    "end": "2931920"
  },
  {
    "text": "ECS is you can integrate third party schedulers in fact we have a Blog that talks about how you can integrate with",
    "start": "2931920",
    "end": "2938520"
  },
  {
    "text": "misos um schedulers so if you uh if you want to use a third party scheduler or even write your own because you have a a",
    "start": "2938520",
    "end": "2945240"
  },
  {
    "text": "great scheduling algorithm you've been using then then you can integrate with ECS and use ECS for the the cluster",
    "start": "2945240",
    "end": "2950359"
  },
  {
    "text": "management and and the container placement thank you sure uh you mentioned uh blue green uh",
    "start": "2950359",
    "end": "2959040"
  },
  {
    "text": "uh in your presentation yeah and in the demo I didn't see uh see that so is that",
    "start": "2959040",
    "end": "2964359"
  },
  {
    "text": "just a future feature and well I mean so you could you could do blue blue green if you wanted to so the way I would do",
    "start": "2964359",
    "end": "2969680"
  },
  {
    "text": "blue green is I would create a second service so let's call you know service service blue and service Green and uh",
    "start": "2969680",
    "end": "2976319"
  },
  {
    "text": "you use the same elb and uh in service blue you you'd go from whatever you're running X to Zero",
    "start": "2976319",
    "end": "2983720"
  },
  {
    "text": "um and in in service Green you'd go from zero to X um and you could do that um in",
    "start": "2983720",
    "end": "2989000"
  },
  {
    "text": "phases so that that's a basic way you could do it uh yourself um you know it would be Auto pretty pretty manual today",
    "start": "2989000",
    "end": "2996480"
  },
  {
    "text": "um um but we could certainly imagine um you creating additional automation around that so is I mean do you guys",
    "start": "2996480",
    "end": "3003319"
  },
  {
    "text": "have any specific plans to to roll out something like that I can't comment on",
    "start": "3003319",
    "end": "3008599"
  },
  {
    "text": "any plans specifically but um as I mentioned we we definitely are really eager to get feedback from customers we",
    "start": "3008599",
    "end": "3013920"
  },
  {
    "text": "got a lot of great feedback during the preview and and we used that to to deliver the features that you saw today and so uh if blue green is an important",
    "start": "3013920",
    "end": "3021240"
  },
  {
    "text": "one please uh do let us know thank you thank you so is",
    "start": "3021240",
    "end": "3027240"
  },
  {
    "text": "uh beant stalk one instance per container meaning if I ran multiple if I",
    "start": "3027240",
    "end": "3033359"
  },
  {
    "text": "scaled out my beant stalk I'm going to get multiple instances I'm sorry if you scale down here if I use Bean stalk with",
    "start": "3033359",
    "end": "3039040"
  },
  {
    "text": "a container will I have one instance per container so today beanock supports one",
    "start": "3039040",
    "end": "3044960"
  },
  {
    "text": "container um one set of containers so one task um so a task definition remember is the set of containers you",
    "start": "3044960",
    "end": "3051280"
  },
  {
    "text": "want to run together on an instance today beanock supports one task per per instance so it's a lot more expensive",
    "start": "3051280",
    "end": "3057960"
  },
  {
    "text": "then um well it depends on how you're sizing I mean so it's it's tailored for",
    "start": "3057960",
    "end": "3063599"
  },
  {
    "text": "running a particular workload on on an instance so you could pick an instance size that matches your workload um but",
    "start": "3063599",
    "end": "3070079"
  },
  {
    "text": "again it's it's that's that's the pattern that they have today if you want more a little more flexibility then you could use ECS and you could put multiple",
    "start": "3070079",
    "end": "3077520"
  },
  {
    "text": "tasks on a particular container okay and can I link E2 classic with this does it have to run in",
    "start": "3077520",
    "end": "3082799"
  },
  {
    "text": "VPC um so it's I'll say it's highly recommended to work in V VPC um can I",
    "start": "3082799",
    "end": "3089680"
  },
  {
    "text": "run say the ECS in VPC and have classic ec2 talk to the elbs yeah through",
    "start": "3089680",
    "end": "3094920"
  },
  {
    "text": "Classic Link yeah yes you can okay great thank you very much really",
    "start": "3094920",
    "end": "3101799"
  },
  {
    "text": "appreciate your attendance",
    "start": "3101799",
    "end": "3105280"
  }
]