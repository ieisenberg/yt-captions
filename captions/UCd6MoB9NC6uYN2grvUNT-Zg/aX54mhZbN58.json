[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "thank you for joining us for the first session after the Keynotes uh my name is Andy Mo and I'm joined by my colleague",
    "start": "320",
    "end": "6600"
  },
  {
    "text": "VAV lanu we're Solutions Architects down in the Southern California territory so",
    "start": "6600",
    "end": "12440"
  },
  {
    "text": "welcome to Deep dive into Blu green de deployments on",
    "start": "12440",
    "end": "18080"
  },
  {
    "start": "18000",
    "end": "18000"
  },
  {
    "text": "AWS so deploying software has its challenges and risks so we're here to help you mitigate those risks through",
    "start": "19080",
    "end": "26560"
  },
  {
    "text": "the use of blue green deployments so you'll see examples of common blue green patterns and learn to",
    "start": "26560",
    "end": "33800"
  },
  {
    "text": "Leverage The automation capabilities of AWS to streamline your",
    "start": "33800",
    "end": "39000"
  },
  {
    "text": "deployments the data tier is a crucial uh portion of your application so you'll learn some best practices and",
    "start": "39000",
    "end": "46000"
  },
  {
    "text": "considerations for how to handle those during your blue green deployments and",
    "start": "46000",
    "end": "51280"
  },
  {
    "text": "of course we want to make sure you're doing this as cost effectively as",
    "start": "51280",
    "end": "57038"
  },
  {
    "start": "57000",
    "end": "57000"
  },
  {
    "text": "possible so the concept of blue green is is not new but it's not commonly seen in",
    "start": "57960",
    "end": "64119"
  },
  {
    "text": "traditional environments and that's mainly due to the cost and effort required to provision the additional",
    "start": "64119",
    "end": "72600"
  },
  {
    "text": "resources so as you think about your deployments you want to try and favor",
    "start": "72600",
    "end": "79520"
  },
  {
    "text": "Solutions that'll reduce downtime handle dependencies and be able to coordinate",
    "start": "79520",
    "end": "84720"
  },
  {
    "text": "your workloads a lot better so this this list may not be a",
    "start": "84720",
    "end": "91759"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "surprise to any of you and you may have spent many nights and weekends dealing with these failures and issues so",
    "start": "91759",
    "end": "98280"
  },
  {
    "text": "through the use of blue green we want to help you mitigate these",
    "start": "98280",
    "end": "103439"
  },
  {
    "text": "risks so let's talk about how blue green coupled with AWS services and",
    "start": "105240",
    "end": "111159"
  },
  {
    "text": "tools can help in these situations so the idea behind blue green",
    "start": "111159",
    "end": "118799"
  },
  {
    "start": "116000",
    "end": "116000"
  },
  {
    "text": "is simple you have your blue environment which is your production environment carrying live traffic and in parallel",
    "start": "118799",
    "end": "126240"
  },
  {
    "text": "what we're going to do is provision is green environment which is identical in nature only it's running a different",
    "start": "126240",
    "end": "132400"
  },
  {
    "text": "version of your code the deployment aspect is simply being able to route",
    "start": "132400",
    "end": "137440"
  },
  {
    "text": "your production traffic from the blue environment to the green environment and if you encounter any issues along the",
    "start": "137440",
    "end": "144080"
  },
  {
    "text": "way you have the ability to roll back quickly and easily so some examples of",
    "start": "144080",
    "end": "150239"
  },
  {
    "text": "the traffic switch capabilities you can use DNS and load balancing and you'll see this in the patterns as we uh",
    "start": "150239",
    "end": "157879"
  },
  {
    "text": "progress through in the presentation so looking at the blue and green environments we're going to refer",
    "start": "157879",
    "end": "163120"
  },
  {
    "text": "to environments quite a bit throughout the presentation and we Define environments as you know where where",
    "start": "163120",
    "end": "170200"
  },
  {
    "text": "things have changed and what you need to do to make those changes live in",
    "start": "170200",
    "end": "175959"
  },
  {
    "text": "production so for example this could be a small component of your application or it could be as wide as a full tier of",
    "start": "175959",
    "end": "183040"
  },
  {
    "text": "your application so here are just some",
    "start": "183040",
    "end": "189040"
  },
  {
    "start": "187000",
    "end": "187000"
  },
  {
    "text": "examples of tools in the AWS ecosystem that you can leverage to to help scope",
    "start": "189040",
    "end": "194400"
  },
  {
    "text": "your environment so for example if you're a type of organization that operates a golden image you can use",
    "start": "194400",
    "end": "200879"
  },
  {
    "text": "Golden amies and deploy those out into production using things like autoscaling",
    "start": "200879",
    "end": "206200"
  },
  {
    "text": "groups now on the other end of the spectrum you've got a wider uh scope",
    "start": "206200",
    "end": "212040"
  },
  {
    "text": "which is with uh AWS cloud formation so with AWS cloud formation you're able to",
    "start": "212040",
    "end": "217879"
  },
  {
    "text": "describe all the AWS resources you need for your particular stack and this could",
    "start": "217879",
    "end": "223720"
  },
  {
    "text": "be anywhere from networking to ec2 instances security groups and with cloud formation you can coordinate the",
    "start": "223720",
    "end": "231239"
  },
  {
    "text": "deployment of multiple services at",
    "start": "231239",
    "end": "236239"
  },
  {
    "start": "237000",
    "end": "237000"
  },
  {
    "text": "once so as you think about how you Scope your environments you want to think",
    "start": "237920",
    "end": "243120"
  },
  {
    "text": "about your software development life cycle think about the goals of your organization current and even where you",
    "start": "243120",
    "end": "249840"
  },
  {
    "text": "want to be down the road so things like your application architecture are you tightly coupled are you Loosely coupled",
    "start": "249840",
    "end": "257199"
  },
  {
    "text": "um these will factor in you know which tools you want to use for your particular case at the organizational",
    "start": "257199",
    "end": "264160"
  },
  {
    "text": "level you want to think about okay do am I the type of organization that deploys very frequently are you deploying daily",
    "start": "264160",
    "end": "271000"
  },
  {
    "text": "or maybe you deploy every two weeks from a risk and complexity perspective you want to think about the",
    "start": "271000",
    "end": "277520"
  },
  {
    "text": "effective your changes you know do you augment your process based on whether it's a minor or major version or maybe",
    "start": "277520",
    "end": "284039"
  },
  {
    "text": "it's a simple patch to your application there a lot there's a lot of variance that's that's the overall point",
    "start": "284039",
    "end": "291639"
  },
  {
    "text": "right and you want to look at these factors to basically pick the right tool for the",
    "start": "291639",
    "end": "298560"
  },
  {
    "text": "job so it is possible to do blue green in",
    "start": "298560",
    "end": "305080"
  },
  {
    "start": "299000",
    "end": "299000"
  },
  {
    "text": "traditional on-prem environments but there's a lot of heavy lifting a lot of capital expense and there's a lot of",
    "start": "305080",
    "end": "311680"
  },
  {
    "text": "capacity planning to really do it well and with AWS you have a breath of",
    "start": "311680",
    "end": "316960"
  },
  {
    "text": "services you've got a utility based billing model that allows you to move fast and cost effectively Implement blue",
    "start": "316960",
    "end": "323639"
  },
  {
    "text": "green patterns at scale so with that I'll turn it over to Vlad who's going to",
    "start": "323639",
    "end": "329080"
  },
  {
    "text": "launch into the patterns that we'll talk about on AWS hey thanks Sandy and",
    "start": "329080",
    "end": "334319"
  },
  {
    "text": "welcome everybody so when we're talking about blue green deployment patterns on AWS a couple of things to understand is",
    "start": "334319",
    "end": "340840"
  },
  {
    "text": "that there's really not a one-size fitall kind of solution right so what",
    "start": "340840",
    "end": "346240"
  },
  {
    "text": "you want to do is and what we've prepared today here is a couple of patterns that illustrate very well the",
    "start": "346240",
    "end": "353400"
  },
  {
    "text": "type of considerations around environment boundaries that Andy was talking about and the type of",
    "start": "353400",
    "end": "358880"
  },
  {
    "text": "considerations around risk mitigation but before we go on so what",
    "start": "358880",
    "end": "364360"
  },
  {
    "start": "363000",
    "end": "363000"
  },
  {
    "text": "you'll see here is six patterns that we've picked up that we see most commonly implemented on AWS and top to",
    "start": "364360",
    "end": "371680"
  },
  {
    "text": "bottom you'll see that the environment boundary gradually gets narrower right you're starting for something that might be a full application tier and going",
    "start": "371680",
    "end": "378919"
  },
  {
    "text": "down to something very specific much more granular and left to right you'll",
    "start": "378919",
    "end": "384800"
  },
  {
    "text": "see commonalities between patterns that affect architectures where you deploy",
    "start": "384800",
    "end": "390400"
  },
  {
    "text": "around with instances versus container based architectures so let's start there is a",
    "start": "390400",
    "end": "397560"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "Common Thread around all these so and that is your environment automation when",
    "start": "397560",
    "end": "403080"
  },
  {
    "text": "you're looking at those deployment risks that and you kind of talk briefly about before you'll notice that some of them",
    "start": "403080",
    "end": "409759"
  },
  {
    "text": "such as the uh human erir risks the infrastructure failure risk the",
    "start": "409759",
    "end": "415360"
  },
  {
    "text": "deployment process risk they're not necessarily mitigated by the deployment pth pattern itself they're more",
    "start": "415360",
    "end": "421440"
  },
  {
    "text": "mitigated by the strength of the automation platform that you're choosing so something like cloud formation is is",
    "start": "421440",
    "end": "429000"
  },
  {
    "text": "the most comprehensive automation platform you can use so you can deploy",
    "start": "429000",
    "end": "434319"
  },
  {
    "text": "Stacks really from Nuts and Bolts from the networking configuration all the way up to the software configuration and",
    "start": "434319",
    "end": "441000"
  },
  {
    "text": "furthermore you can use something like cloud formation to control higher level",
    "start": "441000",
    "end": "446680"
  },
  {
    "text": "Automation Services such as elastic beant stock or the elastic container",
    "start": "446680",
    "end": "452080"
  },
  {
    "text": "service or opsw works or Auto scaling or you can even roll your",
    "start": "452080",
    "end": "457759"
  },
  {
    "text": "own and the key is to take advantage of these automation platforms as much as",
    "start": "457759",
    "end": "463720"
  },
  {
    "text": "possible to mitigate your deployment risks so with that in mind let's look at",
    "start": "463720",
    "end": "469400"
  },
  {
    "start": "467000",
    "end": "467000"
  },
  {
    "text": "what is probably the traditional blue green deployment pattern so in this",
    "start": "469400",
    "end": "474560"
  },
  {
    "text": "example we're starting with a current application we call it the blue environment right",
    "start": "474560",
    "end": "480319"
  },
  {
    "text": "for illustration purposes I picked up elastic beant stock right you can do",
    "start": "480319",
    "end": "486199"
  },
  {
    "text": "similar with opsworks or rolling your own automation framework as well and we've picked up a web tier environment",
    "start": "486199",
    "end": "493680"
  },
  {
    "text": "for elastic beanock now on purpose I left the database and the data tier considerations out of the environment",
    "start": "493680",
    "end": "500360"
  },
  {
    "text": "we'll address this a little bit later and you also have a DNS endpoint",
    "start": "500360",
    "end": "505560"
  },
  {
    "text": "at the top that resolves to your load balancer of your web tier so when we're starting the deployment",
    "start": "505560",
    "end": "511840"
  },
  {
    "text": "we're deploying a new version of the application a new bean stock environment",
    "start": "511840",
    "end": "517080"
  },
  {
    "text": "we call it a green environment and then we start trickling",
    "start": "517080",
    "end": "523320"
  },
  {
    "text": "some traffic over there that gives us the ability to test the green stack you",
    "start": "523320",
    "end": "528399"
  },
  {
    "text": "might choose 1% 10% or you might do even some testing before you even start",
    "start": "528399",
    "end": "536040"
  },
  {
    "text": "trickling in production traffic what this gives you is we call this is Canary",
    "start": "536040",
    "end": "541120"
  },
  {
    "text": "analysis so the idea is to test ahead of shifting a large load of your traffic",
    "start": "541120",
    "end": "548040"
  },
  {
    "text": "over to your green to your new version that gives you the ability to test the functional aspects of your application",
    "start": "548040",
    "end": "553720"
  },
  {
    "text": "and gives you the ability to start testing the performance of it and we continue to gradually test traffic and",
    "start": "553720",
    "end": "560360"
  },
  {
    "text": "cut over tra traffic while we're monitoring the environments to ensure that they are",
    "start": "560360",
    "end": "567079"
  },
  {
    "text": "operating correctly they're oper the performance meets expectation as you're",
    "start": "567079",
    "end": "573120"
  },
  {
    "text": "increasing the load on your green environment now if something breaks all you have to do is switch things back",
    "start": "573120",
    "end": "580680"
  },
  {
    "text": "turn the dial the other way around and move shift traffic back to the blue",
    "start": "580680",
    "end": "586640"
  },
  {
    "text": "environment and what that gives you is essentially it limits your blast radius in in during the deployment",
    "start": "586640",
    "end": "593800"
  },
  {
    "text": "process because only a portion of uh your users will be affected and ideally it's going to be very small",
    "start": "593800",
    "end": "601560"
  },
  {
    "text": "portion and then finally we're all fully sending all the traffic over to the",
    "start": "601560",
    "end": "607480"
  },
  {
    "text": "green environment and then we can dispose of the green the blue one and stop paying for",
    "start": "607480",
    "end": "613200"
  },
  {
    "text": "it now from an automation perspective we can use cloud formation to model this",
    "start": "613200",
    "end": "618920"
  },
  {
    "start": "614000",
    "end": "614000"
  },
  {
    "text": "entire environment and deployment have an example a really high level template",
    "start": "618920",
    "end": "624000"
  },
  {
    "text": "over there we package the application the blue application version",
    "start": "624000",
    "end": "629600"
  },
  {
    "text": "the blue environment resources the blue DNS endpoint all of them into a single",
    "start": "629600",
    "end": "636079"
  },
  {
    "text": "template we can Version Control this template we can add all the supporting resources such as VPC",
    "start": "636079",
    "end": "643160"
  },
  {
    "text": "subnets Security Group configuration IM IM roles all of those can be captured into the same template and version",
    "start": "643160",
    "end": "650160"
  },
  {
    "text": "controlled as you're changing your environments and we can use higher level",
    "start": "650160",
    "end": "657480"
  },
  {
    "text": "services like in this example obor or elastic beant stop and model those with",
    "start": "657480",
    "end": "663079"
  },
  {
    "text": "our cloud formation template now when we're ready to launch the green environment we simply update the",
    "start": "663079",
    "end": "669200"
  },
  {
    "text": "template add the green resources to it and then update the cloud formation",
    "start": "669200",
    "end": "674399"
  },
  {
    "text": "stack and cloud formation will provision all those green resources for us the key",
    "start": "674399",
    "end": "680760"
  },
  {
    "start": "680000",
    "end": "680000"
  },
  {
    "text": "question then becomes is how quickly can you shift traffic over now we talked",
    "start": "680760",
    "end": "687160"
  },
  {
    "text": "about elastic beant stock it has a very simple swap environment feature where you just flip the DNS end points it's",
    "start": "687160",
    "end": "694360"
  },
  {
    "text": "simple but it's all or nothing right it doesn't give you the sort of can Canary analysis uh ability or the ability to",
    "start": "694360",
    "end": "702519"
  },
  {
    "text": "control the traffic very well right so what we want to do instead is use Amazon route 253 weighted DNS switching and at",
    "start": "702519",
    "end": "710680"
  },
  {
    "text": "that point we can have a granular control over our traffic switch one thing to keep in mind though",
    "start": "710680",
    "end": "717600"
  },
  {
    "text": "when we're dealing with DNS is we need to factor in the DNS time to",
    "start": "717600",
    "end": "723440"
  },
  {
    "text": "live so that is essentially the amount of time your DNS client will cash the",
    "start": "723440",
    "end": "729880"
  },
  {
    "text": "results of a DNS query until it asks the Upstream DNS servers for updated IP",
    "start": "729880",
    "end": "736880"
  },
  {
    "text": "addresses right so that builds up a reaction time which is the time to live",
    "start": "736880",
    "end": "742160"
  },
  {
    "text": "times the number of DNS caches that are in your path plus the Route 53",
    "start": "742160",
    "end": "748079"
  },
  {
    "text": "propagation time which means that realistically even if you make a switch the traffic is not going to be flowing",
    "start": "748079",
    "end": "754519"
  },
  {
    "text": "instantly according to the waiting that you're giving it right and the other",
    "start": "754519",
    "end": "759760"
  },
  {
    "text": "aspect of it you might have Legacy DNS clients or misbehaving clients that",
    "start": "759760",
    "end": "765440"
  },
  {
    "text": "completely ignore your DNS caching uh specification so at that",
    "start": "765440",
    "end": "771120"
  },
  {
    "text": "point really that means that when you're shifting traffic to your green",
    "start": "771120",
    "end": "776880"
  },
  {
    "text": "environment it's going to be slower than and there's going to be a delay between",
    "start": "776880",
    "end": "782279"
  },
  {
    "text": "when you change your waiting and when you see the traffic switching on the flip side if you have a roll back",
    "start": "782279",
    "end": "790440"
  },
  {
    "text": "need doing the same thing back it's also going to take some time and there's going to be some complexity there so you",
    "start": "790440",
    "end": "797040"
  },
  {
    "text": "got to factor that in Additionally you got to factor in that if you use",
    "start": "797040",
    "end": "802160"
  },
  {
    "text": "autoscaling and elbs those need time to scale out and you need measurable",
    "start": "802160",
    "end": "807279"
  },
  {
    "text": "metrics to actually keep keep track of the health and the performance of your deployment things like at the load",
    "start": "807279",
    "end": "813839"
  },
  {
    "text": "balcer level the latency gives you an idea of the type of user experience your",
    "start": "813839",
    "end": "819639"
  },
  {
    "text": "customers are seeing during the deployment The Surge Q length will tell you how many requests are queued up at",
    "start": "819639",
    "end": "825920"
  },
  {
    "text": "the load balance are waiting to be serviced if the queue grows too much you're going to have a spillover where",
    "start": "825920",
    "end": "832600"
  },
  {
    "text": "the load bouncer stops um stops actually accepting those requests right and then",
    "start": "832600",
    "end": "838040"
  },
  {
    "text": "you have to look at the backend connection errors to have indications as far as how your backend servers are",
    "start": "838040",
    "end": "845160"
  },
  {
    "text": "behaving are they overloaded are they scaling at the right rate and finally",
    "start": "845160",
    "end": "850519"
  },
  {
    "text": "you also may have your own application metrics and your own deployment",
    "start": "850519",
    "end": "855560"
  },
  {
    "text": "goals so taking a little bit look and combining those two together let's look",
    "start": "855560",
    "end": "862399"
  },
  {
    "text": "at the automation piece this is a kind of an expanded view of the DNS",
    "start": "862399",
    "end": "867600"
  },
  {
    "text": "endpoint Cloud for snippet you'll see that we have a waiting there part of",
    "start": "867600",
    "end": "874639"
  },
  {
    "text": "your our stack part of our different blue and green end points and you're going to start with an initial waiting",
    "start": "874639",
    "end": "881000"
  },
  {
    "text": "information but really for Simplicity I hardcoded the values in when you're actually doing the deployment you",
    "start": "881000",
    "end": "887199"
  },
  {
    "text": "probably want to use template parameters right so you don't have to update the template every time you shift the",
    "start": "887199",
    "end": "893079"
  },
  {
    "text": "traffic over you want to just use parameters and then use the same template and just update the",
    "start": "893079",
    "end": "899920"
  },
  {
    "text": "stack so let's see how this Stacks up so it's great for mitigating risks around",
    "start": "899920",
    "end": "905720"
  },
  {
    "start": "901000",
    "end": "901000"
  },
  {
    "text": "the application issues around application performance because of the gradual nature of the traffic shift",
    "start": "905720",
    "end": "911440"
  },
  {
    "text": "because of the fact that you have Canary analysis um people and processors",
    "start": "911440",
    "end": "917440"
  },
  {
    "text": "infrastructurist those really depend on your automation platform more than anything at that point if you use",
    "start": "917440",
    "end": "923160"
  },
  {
    "text": "something like cloud formation or elastic beant stock you can significantly improve your risk mitigation on those as well but from a",
    "start": "923160",
    "end": "930279"
  },
  {
    "text": "roll back perspective there's a weak spot there because you have to deal with DNS time to lift",
    "start": "930279",
    "end": "936360"
  },
  {
    "text": "complexities so let's remove that out of the solution the next pattern is similar",
    "start": "936360",
    "end": "943399"
  },
  {
    "start": "941000",
    "end": "941000"
  },
  {
    "text": "but what we're doing is we're taking the load balancer out of the environment boundary right so the envir the load",
    "start": "943399",
    "end": "951040"
  },
  {
    "text": "balancer is not part of the environment boundary is not part of the deployment remains fixed and instead we're",
    "start": "951040",
    "end": "957000"
  },
  {
    "text": "narrowing the environment boundary to the Autos scaling group to the so the deployment involves just",
    "start": "957000",
    "end": "964759"
  },
  {
    "text": "essentially provisioning a new green Autos scaling group in addition to the blue one",
    "start": "964759",
    "end": "970040"
  },
  {
    "text": "now you probably won't be able to use Auto elastic beant in this example we're",
    "start": "970040",
    "end": "975319"
  },
  {
    "text": "actually controlling controlling the load balancer and Autos scaling groups directly in this case but you can still",
    "start": "975319",
    "end": "981920"
  },
  {
    "text": "deploy this using cloud formation so we start with our current",
    "start": "981920",
    "end": "987759"
  },
  {
    "text": "blue Auto scale SC in group we deploy and scale out a new green autoscaling group and we test the stack at this",
    "start": "987759",
    "end": "995000"
  },
  {
    "text": "point you can use a secondary load balancer to test for functional issues and then you register the green",
    "start": "995000",
    "end": "1002000"
  },
  {
    "text": "autoscaling group with the same load balancer and it will start receiving traffic immediately and then you start",
    "start": "1002000",
    "end": "1008319"
  },
  {
    "text": "growing that Autos scaling group until you reach desire capacity and you start",
    "start": "1008319",
    "end": "1014360"
  },
  {
    "text": "removing instances out of the blue one now there's two ways you can do that that you can either you know scale in",
    "start": "1014360",
    "end": "1020639"
  },
  {
    "text": "the blue autoscaling Group which will terminate instances or you can take them you can use autoscaling standby feature",
    "start": "1020639",
    "end": "1027640"
  },
  {
    "text": "to take those instances out of the current processing put place them into",
    "start": "1027640",
    "end": "1033038"
  },
  {
    "text": "standby that way they're still there they're not receiving traffic but if you need to roll back it's a quicker roll",
    "start": "1033039",
    "end": "1038319"
  },
  {
    "text": "back so finally when everything is done and all your instances are uh",
    "start": "1038319",
    "end": "1045480"
  },
  {
    "text": "decommissioned you can remove the old uh autoscaling group so how does this",
    "start": "1045480",
    "end": "1052240"
  },
  {
    "start": "1051000",
    "end": "1051000"
  },
  {
    "text": "work so this relies on very specific behaviors around autoscaling groups behind load balancer so when you have a",
    "start": "1052240",
    "end": "1058720"
  },
  {
    "text": "load balancer you can register one or more ec2 instances with it and you can register one or more Autos scaling",
    "start": "1058720",
    "end": "1065160"
  },
  {
    "text": "groups with it elastic load balancing also uses a",
    "start": "1065160",
    "end": "1070559"
  },
  {
    "text": "least outstanding request algorithms which by default will favor your green",
    "start": "1070559",
    "end": "1075840"
  },
  {
    "text": "Autos scan group the moment you actually register that low Autos Skilling group with the low bouncer those instance low",
    "start": "1075840",
    "end": "1083280"
  },
  {
    "text": "elb will start sending traffic to those instances and it'll continue favoring",
    "start": "1083280",
    "end": "1088720"
  },
  {
    "text": "sending requests to those instances until kind of the overall level of requests on all your instances blue or",
    "start": "1088720",
    "end": "1094919"
  },
  {
    "text": "green is about even and that and it also has connection draining",
    "start": "1094919",
    "end": "1100600"
  },
  {
    "text": "capabilities so you stop gracefully receiving requests on your blue",
    "start": "1100600",
    "end": "1107640"
  },
  {
    "text": "instances as you terminate them or as you take them out into standby that means that it's a better user experience",
    "start": "1107640",
    "end": "1114600"
  },
  {
    "text": "better end user experience you want to of course make sure that you scale out the green a",
    "start": "1114600",
    "end": "1120960"
  },
  {
    "text": "Autos scaling group before you register it to the load balancer and we talked briefly about",
    "start": "1120960",
    "end": "1127640"
  },
  {
    "text": "putting instances into standby so the idea is as the example command over there is when you take an instance put",
    "start": "1127640",
    "end": "1133960"
  },
  {
    "text": "it into standby the low benser stop sending traffic to it the loow",
    "start": "1133960",
    "end": "1139240"
  },
  {
    "text": "autoscaling group will shrink by the number of instances you're placing into standby but the instances are still",
    "start": "1139240",
    "end": "1145919"
  },
  {
    "text": "running so in the event of a roll back you can always take them out of standby and put",
    "start": "1145919",
    "end": "1152679"
  },
  {
    "text": "them back into the Autos scaling group and you don't have that delay of autoscaling provisioning new resources",
    "start": "1152679",
    "end": "1159799"
  },
  {
    "text": "which might entail configuration of your application on your side so there it's a faster roll back that",
    "start": "1159799",
    "end": "1167240"
  },
  {
    "text": "way so reviewing kind of how this pattern works it's great at detecting",
    "start": "1167240",
    "end": "1173880"
  },
  {
    "start": "1168000",
    "end": "1168000"
  },
  {
    "text": "application issues it also handles performance application performance very well because you can manage the traffic",
    "start": "1173880",
    "end": "1180600"
  },
  {
    "text": "split but it's less granular realistically your traffic split is going to be handled by a unit that is",
    "start": "1180600",
    "end": "1186720"
  },
  {
    "text": "your instance by how many instances you add or remove so your granularity level is going to be the instance in this case",
    "start": "1186720",
    "end": "1193600"
  },
  {
    "text": "it's also great uh great at managing infrastructure failures due to Autos scaling in we don't have the DNS",
    "start": "1193600",
    "end": "1199880"
  },
  {
    "text": "complexities to deal with Okay so let's remove reduce the",
    "start": "1199880",
    "end": "1206559"
  },
  {
    "text": "environment boundary even further so at this point we're swapping launch",
    "start": "1206559",
    "end": "1212080"
  },
  {
    "start": "1209000",
    "end": "1209000"
  },
  {
    "text": "configurations so the launch configuration for the folks that don't know what that is it's essentially a",
    "start": "1212080",
    "end": "1217880"
  },
  {
    "text": "blueprint that Autos scaling uses to spin up new instances and add them to the group so each autoscaling group has",
    "start": "1217880",
    "end": "1226720"
  },
  {
    "text": "exactly one at attached assigned to it at any time so when you substitute it",
    "start": "1226720",
    "end": "1232919"
  },
  {
    "text": "any new instances that get provisioned will be provisioned by the using the new uh launch configuration so we do",
    "start": "1232919",
    "end": "1240919"
  },
  {
    "text": "exactly that we swap out the launch configuration with a newer one corresponding to our green application",
    "start": "1240919",
    "end": "1246520"
  },
  {
    "text": "version now we scale out the auto scaling group to essentially twice the",
    "start": "1246520",
    "end": "1252200"
  },
  {
    "text": "size to ensure that we have enough capacity on the green side to handle your load and then we start shrinking",
    "start": "1252200",
    "end": "1258799"
  },
  {
    "text": "back the Autos scaling group once that's done and start removing instances out of",
    "start": "1258799",
    "end": "1264159"
  },
  {
    "text": "it now autoscaling will generally remove instances with the oldest launch configuration first which is what makes",
    "start": "1264159",
    "end": "1272159"
  },
  {
    "text": "this work and which is reducing your blue application uh environment",
    "start": "1272159",
    "end": "1278000"
  },
  {
    "text": "footprint and again we can always take those instances out and place them into",
    "start": "1278000",
    "end": "1284760"
  },
  {
    "text": "standby and once we're done we're we have only green instances left in our",
    "start": "1284760",
    "end": "1290320"
  },
  {
    "start": "1290000",
    "end": "1290000"
  },
  {
    "text": "autoscaling group so let's talk a little bit about launch configurations so there are",
    "start": "1290320",
    "end": "1297600"
  },
  {
    "text": "blueprints that autoscaling uses for instance provisioning when you scale out or",
    "start": "1297600",
    "end": "1303480"
  },
  {
    "text": "replace failed instances it will use whatever the current launch configuration you have specified for",
    "start": "1303480",
    "end": "1309400"
  },
  {
    "text": "that group is which means it makes it work with the green one but when you scale back in it will remove all the old",
    "start": "1309400",
    "end": "1315919"
  },
  {
    "text": "ones all the launch instances with all this launch configuration first but it will also try to keep the capacity in",
    "start": "1315919",
    "end": "1324200"
  },
  {
    "text": "all availability zones that you're operating under even so if you're starting with a fleet that's uneven",
    "start": "1324200",
    "end": "1330919"
  },
  {
    "text": "where you have more instances in one availability Zone than in the other ones that there is a there's a chance that",
    "start": "1330919",
    "end": "1337200"
  },
  {
    "text": "autoscaling in that desire to keep everything even will terminate some of your green instanes too so if you have",
    "start": "1337200",
    "end": "1343720"
  },
  {
    "text": "uneven fleets you might need to handle that manually by add compensating you",
    "start": "1343720",
    "end": "1349080"
  },
  {
    "text": "know by adding new instances or removing manually old inst old instances to keep",
    "start": "1349080",
    "end": "1355279"
  },
  {
    "text": "that even balance and like I said before we can use temporarily remove those",
    "start": "1355279",
    "end": "1361360"
  },
  {
    "text": "instances from the Autos scaling group from a review perspective this",
    "start": "1361360",
    "end": "1367600"
  },
  {
    "start": "1365000",
    "end": "1365000"
  },
  {
    "text": "pattern um there's some complexities around detecting of errors in your",
    "start": "1367600",
    "end": "1373720"
  },
  {
    "text": "applications or performance because you have a heterogeneous Fleet you end up with an Autos scaling group that has",
    "start": "1373720",
    "end": "1378880"
  },
  {
    "text": "instances with blue from the blue environment and from the green one so at that point you have to rely a lot more",
    "start": "1378880",
    "end": "1386159"
  },
  {
    "text": "on your application Level metrics to detect errors and detect performance",
    "start": "1386159",
    "end": "1391559"
  },
  {
    "text": "issues and you want to cor correlate that to infrastructure metrics to find out where those issues are what they are",
    "start": "1391559",
    "end": "1397919"
  },
  {
    "text": "and how to compensate for those types of things or whether you need to do a roll back it's great on the other hand for R",
    "start": "1397919",
    "end": "1404919"
  },
  {
    "text": "back capabilities it does give you a couple of options there for example you can put instances back into standby if",
    "start": "1404919",
    "end": "1412039"
  },
  {
    "text": "you've Ed that method or you can just configure a new launch configuration and",
    "start": "1412039",
    "end": "1417600"
  },
  {
    "text": "go through the whole deployment process again so there's a couple of options on",
    "start": "1417600",
    "end": "1422919"
  },
  {
    "text": "the other hand from a cost perspective because you initially scale out to essentially twice your",
    "start": "1422919",
    "end": "1428200"
  },
  {
    "text": "size you from a cost optimization perspective you're going to be over provisioned for a little bit longer than",
    "start": "1428200",
    "end": "1434360"
  },
  {
    "text": "compared to the other methods that we discussed and now Andy is going to talk a little bit about the patterns around",
    "start": "1434360",
    "end": "1442400"
  },
  {
    "text": "ECS container service all right thanks",
    "start": "1442400",
    "end": "1447480"
  },
  {
    "text": "Ved okay so what if we're running containers uh so Docker containers are",
    "start": "1447480",
    "end": "1452840"
  },
  {
    "start": "1450000",
    "end": "1450000"
  },
  {
    "text": "great because they preserve the Fidelity of your environments you know whether they start at your developer workstation",
    "start": "1452840",
    "end": "1459400"
  },
  {
    "text": "and make their way into production so the patterns that I'm going to talk about will illustrate how to take these",
    "start": "1459400",
    "end": "1467360"
  },
  {
    "text": "containers and deploy them out into a fleet of ec2 instances which we'll call",
    "start": "1467360",
    "end": "1472399"
  },
  {
    "text": "the container instances themselves so the two things to be mindful of here is we're going to reference task",
    "start": "1472399",
    "end": "1478600"
  },
  {
    "text": "definitions and task definitions will declare your resource requirements and",
    "start": "1478600",
    "end": "1484480"
  },
  {
    "text": "identify the container version that you'd like to deploy and the other concept is the ECS service so the ECS",
    "start": "1484480",
    "end": "1491520"
  },
  {
    "text": "service will essentially prepare a longstanding um process it'll deploy TX",
    "start": "1491520",
    "end": "1497799"
  },
  {
    "text": "tasks to your container instances and watch out for the health of these uh running",
    "start": "1497799",
    "end": "1505000"
  },
  {
    "start": "1507000",
    "end": "1507000"
  },
  {
    "text": "containers all right so the first pattern we'll talk about takes us back to the classic DNS pattern so here we're",
    "start": "1507200",
    "end": "1514880"
  },
  {
    "text": "going to be shuttling traffic from a blue EB end point to a green EB end",
    "start": "1514880",
    "end": "1520159"
  },
  {
    "text": "point so here you see you have your ECS service we'll call the blue environment",
    "start": "1520159",
    "end": "1525960"
  },
  {
    "text": "made up of a task definition and an elb end point what we'll do is we'll create a",
    "start": "1525960",
    "end": "1532200"
  },
  {
    "text": "new ECS service the green ECS service register a new task definition create a",
    "start": "1532200",
    "end": "1537799"
  },
  {
    "text": "new elb endpoint and Associate it together with the ECS green",
    "start": "1537799",
    "end": "1543480"
  },
  {
    "text": "service when it's time to deploy we simply update the Route 53 Alias record",
    "start": "1543480",
    "end": "1550360"
  },
  {
    "text": "to Route the traffic from the blue environment to the green and note here that we're actually doing a full cut",
    "start": "1550360",
    "end": "1556559"
  },
  {
    "text": "over um you could could still do the weighted DNS that Vlad had talked about",
    "start": "1556559",
    "end": "1562919"
  },
  {
    "text": "earlier so once you've determined that the green environment is is live and functioning properly you can remove the",
    "start": "1562919",
    "end": "1570159"
  },
  {
    "text": "blue resources or you could use it to Stage the next version of your application depending on how quickly you",
    "start": "1570159",
    "end": "1576360"
  },
  {
    "text": "push changes out so Vlad had Illustrated how to do",
    "start": "1576360",
    "end": "1582320"
  },
  {
    "text": "this with cloud formation I'm going to take a different approach and illustrate it with the AWS CLI tool which will",
    "start": "1582320",
    "end": "1588399"
  },
  {
    "text": "update the ECS Service as well as your Route 53 uh Alias record so the first",
    "start": "1588399",
    "end": "1594760"
  },
  {
    "text": "step we'll take here we're going to register a new task definition and as you can see we pass in this Json object",
    "start": "1594760",
    "end": "1601240"
  },
  {
    "text": "on the right and you'll see the image we're referencing a version two of the",
    "start": "1601240",
    "end": "1607279"
  },
  {
    "text": "docker container in the Second Step we're going to create your ECS service and it's",
    "start": "1607279",
    "end": "1613159"
  },
  {
    "text": "going to be a green ECS service web service version two we're going to load in the task definition that we created",
    "start": "1613159",
    "end": "1620159"
  },
  {
    "text": "just before and we're going to reference the load balancer endpoint you know specially designed for the green",
    "start": "1620159",
    "end": "1628760"
  },
  {
    "text": "environment and then the third step we'll update the r 53 record to update",
    "start": "1628760",
    "end": "1634679"
  },
  {
    "text": "your uh Target for your Alias record to point to the green",
    "start": "1634679",
    "end": "1641480"
  },
  {
    "start": "1643000",
    "end": "1643000"
  },
  {
    "text": "EB so just to review this pattern um the app application issues are detectable",
    "start": "1643320",
    "end": "1650039"
  },
  {
    "text": "because you can do either a full cut over or you can do the weighted Canary analysis as well so you can take your",
    "start": "1650039",
    "end": "1655559"
  },
  {
    "text": "time with this approach and really test fully and be sure that your applications are running as expected from an",
    "start": "1655559",
    "end": "1663279"
  },
  {
    "text": "application P performance perspective you're dealing with a fully scaled up green environment so you have all the",
    "start": "1663279",
    "end": "1669840"
  },
  {
    "text": "same amount of containers deployed into your uh Crosser Fleet the only thing to be mindful of you want to make sure your",
    "start": "1669840",
    "end": "1676279"
  },
  {
    "text": "elb is warm so since you're you haven't introduced any traffic if you do a full cut over you may want to call on support",
    "start": "1676279",
    "end": "1683360"
  },
  {
    "text": "and have them pre-warm your EB for you that way it's prepared to support the production traffic um alternatively too",
    "start": "1683360",
    "end": "1690279"
  },
  {
    "text": "with ECS you can actually autoscale your ECS service um the amount of tasks that are",
    "start": "1690279",
    "end": "1696440"
  },
  {
    "text": "deployed into your environment so if you haven't checked it out we actually released a blog entry that talks about how you can tie in cloudwatch metrics to",
    "start": "1696440",
    "end": "1704880"
  },
  {
    "text": "your EB performance and use Lambda to essentially update your desired task count for your ECS",
    "start": "1704880",
    "end": "1712000"
  },
  {
    "text": "service from a people and process perspective I mean we're dealing with just the simple DNS switch over so it's",
    "start": "1712000",
    "end": "1718519"
  },
  {
    "text": "a quite simple process and again you can take your time throughout your uh release",
    "start": "1718519",
    "end": "1724200"
  },
  {
    "text": "process infrastructure failure isn't necessarily um mitigated by the pattern",
    "start": "1724200",
    "end": "1730159"
  },
  {
    "text": "so what we recommend is to use either cloudwatch metrics or use an Autos",
    "start": "1730159",
    "end": "1735640"
  },
  {
    "text": "scaling group to manage your the Fleet size and the health of your Fleet",
    "start": "1735640",
    "end": "1741120"
  },
  {
    "text": "altoe from a roll back perspective we're dealing with DNS so you do have the same complexities that Vlad had talked about",
    "start": "1741120",
    "end": "1747600"
  },
  {
    "text": "earlier and you know the later patterns that we talk about will introduce elb and it'll be um you know a better roll",
    "start": "1747600",
    "end": "1754600"
  },
  {
    "text": "back capability overall and for a cost perspective you know we're dealing with two fully scaled up environments so your",
    "start": "1754600",
    "end": "1761640"
  },
  {
    "text": "resource the resource requirement for your container instances is essentially double but again this gives you the",
    "start": "1761640",
    "end": "1768720"
  },
  {
    "text": "ability to fully test out both en U your new green",
    "start": "1768720",
    "end": "1774200"
  },
  {
    "start": "1775000",
    "end": "1775000"
  },
  {
    "text": "environment all right so going on to the second pattern so this pattern is going to be very similar to the first um the",
    "start": "1775240",
    "end": "1782480"
  },
  {
    "text": "only major difference is we're going to leverage the same elb end point and allow load balancing to essentially",
    "start": "1782480",
    "end": "1789799"
  },
  {
    "text": "migrate to traffic from the blue environment to the green so again we're going to start out with a blue ECS",
    "start": "1789799",
    "end": "1796320"
  },
  {
    "text": "service we're going to register a new task definition that's going to um identify",
    "start": "1796320",
    "end": "1802720"
  },
  {
    "text": "the new container image and we're going to Loop this in with a new green service only this time we're going to leverage",
    "start": "1802720",
    "end": "1808039"
  },
  {
    "text": "the same elb so once the service is deployed into",
    "start": "1808039",
    "end": "1814720"
  },
  {
    "text": "the environment you can incrementally scale up the ECS service by updating the",
    "start": "1814720",
    "end": "1819960"
  },
  {
    "text": "task count and you can also decrement the blue ECS service when you're happy",
    "start": "1819960",
    "end": "1827799"
  },
  {
    "text": "with the uh green Services performance so you have very granular control how you scale up the green environment how",
    "start": "1827799",
    "end": "1834760"
  },
  {
    "text": "you scale down your blue environment so you've already seen how",
    "start": "1834760",
    "end": "1840399"
  },
  {
    "start": "1838000",
    "end": "1838000"
  },
  {
    "text": "to register a task definition in the last step so I'll just focus on the create service aspect and again we're",
    "start": "1840399",
    "end": "1845880"
  },
  {
    "text": "creating a new service registering the new Tas um refer referencing the new Tas",
    "start": "1845880",
    "end": "1851360"
  },
  {
    "text": "definition and this time we're going to reference the blue elb that was that's already in production",
    "start": "1851360",
    "end": "1858080"
  },
  {
    "text": "and also notice that the desired count is at one so we're going to slowly introduce the green ECS service into the",
    "start": "1858080",
    "end": "1864519"
  },
  {
    "text": "environment and you know Accord test accordingly and then scale it up and scale down as",
    "start": "1864519",
    "end": "1870159"
  },
  {
    "text": "necessary so you can use the ECS update service call to scale up the green",
    "start": "1870159",
    "end": "1875559"
  },
  {
    "text": "service and then you can reduce the blue service to a desired count of zero when you're ready to decommission the",
    "start": "1875559",
    "end": "1882159"
  },
  {
    "text": "blue so this is very similar to the swapping of E asgs behind an elastic",
    "start": "1882159",
    "end": "1888200"
  },
  {
    "text": "load balancer now since you are going to have coexisting versions this make your application can",
    "start": "1888200",
    "end": "1895039"
  },
  {
    "start": "1896000",
    "end": "1896000"
  },
  {
    "text": "coexist so reviewing this pattern um application issues again Canary analysis",
    "start": "1896559",
    "end": "1903000"
  },
  {
    "text": "it happens by default so you have the ability to fully test and migrate at",
    "start": "1903000",
    "end": "1908080"
  },
  {
    "text": "your own pace looking at application performance you're dealing with an already warm elb",
    "start": "1908080",
    "end": "1914960"
  },
  {
    "text": "so this gives you the benefit of being able to just perform your deployments not have to worry about calling support and",
    "start": "1914960",
    "end": "1921360"
  },
  {
    "text": "scheduling the pre-warm and again you can look at um scaling your ECS service",
    "start": "1921360",
    "end": "1927960"
  },
  {
    "text": "using the the cloudwatch metrics and Lambda capabilities I spoke about in the last",
    "start": "1927960",
    "end": "1934399"
  },
  {
    "text": "pattern from a process perspective it does involve a few more steps because you have to scale up and down the uh",
    "start": "1934399",
    "end": "1941279"
  },
  {
    "text": "green and blue environments but again this does give you more granularity in terms of your traffic",
    "start": "1941279",
    "end": "1948519"
  },
  {
    "text": "switch infrastructure failure again you want to use cloud watch metrics and Autos scaling groups to manage your ECS",
    "start": "1948519",
    "end": "1955320"
  },
  {
    "text": "Fleet and the roll back since we're not dealing with DNS and we're letting elb essentially take over um it's very",
    "start": "1955320",
    "end": "1963159"
  },
  {
    "text": "convenient and the roll back capabilities definitely Excel compared to the last pattern now with ECS ECS",
    "start": "1963159",
    "end": "1970480"
  },
  {
    "text": "services will take care of the registration and deregistration of tasks from your elb automatically",
    "start": "1970480",
    "end": "1977760"
  },
  {
    "text": "uh when you actually go to set up your ECS service you'll see that you can reference the elb endpoint and it has",
    "start": "1977760",
    "end": "1983080"
  },
  {
    "text": "the IM roles to to essentially update accordingly from a cost perspective you",
    "start": "1983080",
    "end": "1989639"
  },
  {
    "text": "don't necessarily need uh a full environment to run both to run both",
    "start": "1989639",
    "end": "1995080"
  },
  {
    "text": "services and you can incrementally scale up and down um accordingly and it'll",
    "start": "1995080",
    "end": "2000480"
  },
  {
    "text": "naturally decommission blue resources and replace it with a green",
    "start": "2000480",
    "end": "2005960"
  },
  {
    "text": "resource so this final pattern actually",
    "start": "2005960",
    "end": "2011559"
  },
  {
    "text": "highlights a built-in capability for blue green deployments with the ECS service and this is going to accomplish",
    "start": "2011559",
    "end": "2019399"
  },
  {
    "text": "this essentially by replacing the task definition for the ECS service",
    "start": "2019399",
    "end": "2025080"
  },
  {
    "text": "itself so you start with your blue task definition which is in your current ECS",
    "start": "2025080",
    "end": "2030760"
  },
  {
    "text": "service and you're going to create a green revision of that same task",
    "start": "2030760",
    "end": "2035960"
  },
  {
    "text": "definition now to ISS to start off the deployment you're going to update your ECS service",
    "start": "2035960",
    "end": "2042960"
  },
  {
    "text": "and it will naturally deploy the Tas definition to an available container instance now remember in order for this",
    "start": "2042960",
    "end": "2049760"
  },
  {
    "text": "pattern to work you need to have at least one available container inance otherwise ECS will essentially wait",
    "start": "2049760",
    "end": "2056720"
  },
  {
    "text": "around for a new resource to pop up once you have that green test",
    "start": "2056720",
    "end": "2063320"
  },
  {
    "text": "deployed it will in a rolling fashion continue to deploy the green resources out and it will slowly deregister and",
    "start": "2063320",
    "end": "2071079"
  },
  {
    "text": "drain the connections from your blue task",
    "start": "2071079",
    "end": "2076480"
  },
  {
    "text": "definition so here we're going to focus on the update service again um here you're going to reference a new task",
    "start": "2078480",
    "end": "2084760"
  },
  {
    "text": "definition that you created which will be the green uh revision and note it has a very generic name we call Web tier now",
    "start": "2084760",
    "end": "2092158"
  },
  {
    "text": "ECS by default if you create a task definition of the same name it will naturally create a new re revision and",
    "start": "2092159",
    "end": "2099720"
  },
  {
    "text": "it will manage that for you so if you do an update it will always choose the latest revision of the task definition",
    "start": "2099720",
    "end": "2106680"
  },
  {
    "text": "unless you mention otherwise so after you've issued this update service command you can use",
    "start": "2106680",
    "end": "2113400"
  },
  {
    "text": "describe services to monitor your progress so here in the output you see",
    "start": "2113400",
    "end": "2119079"
  },
  {
    "text": "there's a Services section that references the new green task definition that we've created and you can see that",
    "start": "2119079",
    "end": "2125760"
  },
  {
    "text": "it has web web tier colon 2 which is indicating the second",
    "start": "2125760",
    "end": "2131839"
  },
  {
    "text": "revision also important in the output is the deployment section so here you'll",
    "start": "2131839",
    "end": "2137119"
  },
  {
    "text": "actually see that there are there are multiple deployments in play the green task definition is marked as primary",
    "start": "2137119",
    "end": "2143880"
  },
  {
    "text": "meaning ECS will respect that and slowly issue that out into your container",
    "start": "2143880",
    "end": "2149000"
  },
  {
    "text": "instances and you see that the blue test def definition is still marked as",
    "start": "2149000",
    "end": "2155800"
  },
  {
    "text": "active also important in the describ services section is the events so here you can as",
    "start": "2155800",
    "end": "2163560"
  },
  {
    "text": "you do your update you can monitor for any sort of Errors you can also see the",
    "start": "2163560",
    "end": "2168680"
  },
  {
    "text": "process as a register's new tasks deregister tasks and determines when",
    "start": "2168680",
    "end": "2174760"
  },
  {
    "text": "your task is at a steady",
    "start": "2174760",
    "end": "2178520"
  },
  {
    "start": "2179000",
    "end": "2179000"
  },
  {
    "text": "state so looking at this pattern we see that from an application issues perspective you don't necessarily have",
    "start": "2180000",
    "end": "2186319"
  },
  {
    "text": "the same Canary analysis capabilities but if you're going to be pushing A lot of changes very frequently this may be a",
    "start": "2186319",
    "end": "2192240"
  },
  {
    "text": "moot point and this may benefit your organization Pace a lot better um from",
    "start": "2192240",
    "end": "2197520"
  },
  {
    "text": "an application performance perspective again you're dealing with an already warm elb even though you don't have the",
    "start": "2197520",
    "end": "2204520"
  },
  {
    "text": "granular traffic management ECS handles that for you process perspective ECS automates",
    "start": "2204520",
    "end": "2212359"
  },
  {
    "text": "the deployment of the new task definition out into your container environment",
    "start": "2212359",
    "end": "2217480"
  },
  {
    "text": "so it's very easy and very convenient from an infrastructure failure perspective again deal with use",
    "start": "2217480",
    "end": "2225119"
  },
  {
    "text": "cloudwatch metrics and auto scaling to essentially manage your Fleet roll back",
    "start": "2225119",
    "end": "2231000"
  },
  {
    "text": "no DNS elb and ECS automates the whole thing so it's very uh very quick for",
    "start": "2231000",
    "end": "2236880"
  },
  {
    "text": "roll back capabilities and from cost perspective you only need plus one resource uh from",
    "start": "2236880",
    "end": "2244440"
  },
  {
    "text": "a container instance perspective in order to off this whole process and ECS will manage the whole rolling deployment",
    "start": "2244440",
    "end": "2251160"
  },
  {
    "text": "process for you so with that turn it over to Vlad to talk about your scheme of changes yeah",
    "start": "2251160",
    "end": "2258319"
  },
  {
    "text": "thanks Andy so until now we deliberately only talked about kind of stateless services so services that don't maintain",
    "start": "2258319",
    "end": "2265760"
  },
  {
    "text": "data don't store any data but what what happens if you actually have to manage",
    "start": "2265760",
    "end": "2270800"
  },
  {
    "text": "and do a blue green deployment that factors in state changes or you have to do factors in databases or you have to",
    "start": "2270800",
    "end": "2277800"
  },
  {
    "text": "do a schema change right so the easiest way to do it is and the one that we the",
    "start": "2277800",
    "end": "2284200"
  },
  {
    "start": "2281000",
    "end": "2281000"
  },
  {
    "text": "process that we see most commonly implemented is to decouple the schema",
    "start": "2284200",
    "end": "2289599"
  },
  {
    "text": "changes from your code changes realistically really this means that the",
    "start": "2289599",
    "end": "2294920"
  },
  {
    "text": "database is outside of your environment boundary and not strictly part of your blue green deployment right and you have",
    "start": "2294920",
    "end": "2302079"
  },
  {
    "text": "two options you either make the database schema changes first and and in that",
    "start": "2302079",
    "end": "2307920"
  },
  {
    "text": "case you know the database itself you know the old code needs to",
    "start": "2307920",
    "end": "2314560"
  },
  {
    "text": "use the new schema so you want to make sure that it's backwards compatible or",
    "start": "2314560",
    "end": "2319680"
  },
  {
    "text": "you can make the schema changes at the end after the de blue green deployment complete means that your green",
    "start": "2319680",
    "end": "2327400"
  },
  {
    "text": "application has to have backwards comp compatibility to be able to talk to the old database for a while and",
    "start": "2327400",
    "end": "2334599"
  },
  {
    "text": "realistically if your changes are more complex you might decide to combine those two methods together and have some",
    "start": "2334599",
    "end": "2340400"
  },
  {
    "text": "schema changes at the beginning and some schema changes at the end now there's a",
    "start": "2340400",
    "end": "2345839"
  },
  {
    "text": "trade-off there you know you buy Simplicity for increased deployment risk",
    "start": "2345839",
    "end": "2352240"
  },
  {
    "text": "because you know there you know if you make the changes to your schema right and then your application doesn't work",
    "start": "2352240",
    "end": "2358800"
  },
  {
    "text": "with the new schema that's bad right so what we want to do is in this kind of a",
    "start": "2358800",
    "end": "2364720"
  },
  {
    "text": "situation this puts a significant more emphasis on your software development",
    "start": "2364720",
    "end": "2371359"
  },
  {
    "text": "life cycle before the actual production deployment process itself so if you have a strong testing",
    "start": "2371359",
    "end": "2378079"
  },
  {
    "text": "phase a strong QA phase that weeds out some of those issues around um you",
    "start": "2378079",
    "end": "2384839"
  },
  {
    "text": "around potential schema issues and you're testing your applications beforehand well you can mitigate this",
    "start": "2384839",
    "end": "2391480"
  },
  {
    "text": "risk significantly so this is great because you have to only work with a single",
    "start": "2391480",
    "end": "2397720"
  },
  {
    "text": "database and all the environments talk to the same database but what if your SC",
    "start": "2397720",
    "end": "2403400"
  },
  {
    "text": "schema changes can't be decoupled right or you're deploying across regions where",
    "start": "2403400",
    "end": "2409359"
  },
  {
    "text": "your blue environment is in one AWS regions and the green environment is another AWS region so realistically in",
    "start": "2409359",
    "end": "2416920"
  },
  {
    "text": "that kind of a scenario your database tier is going to be inside your environment boundary will be part of",
    "start": "2416920",
    "end": "2423760"
  },
  {
    "start": "2417000",
    "end": "2417000"
  },
  {
    "text": "your blue green deployment so each one of those environments are going to have their own data",
    "start": "2423760",
    "end": "2430560"
  },
  {
    "text": "stores and you need to coordinate data changes across the stacks because your",
    "start": "2430560",
    "end": "2435680"
  },
  {
    "text": "blue environment needs to have the most upto-date data just in case you need to roll back and your green environment",
    "start": "2435680",
    "end": "2442040"
  },
  {
    "text": "needs to have most upto-date data because it's going to become your new production",
    "start": "2442040",
    "end": "2448319"
  },
  {
    "text": "environment right and at that point you also have to factor in consistency so if you're dealing with data replication and",
    "start": "2448319",
    "end": "2455000"
  },
  {
    "text": "data synchronization if you have an eventual consistency model in your data that's going to help",
    "start": "2455000",
    "end": "2462720"
  },
  {
    "text": "things significantly so here's an example of that a very generic pattern what we do",
    "start": "2462720",
    "end": "2469240"
  },
  {
    "text": "is we have a central aggregator of Central right operations right so",
    "start": "2469240",
    "end": "2474560"
  },
  {
    "text": "instead of each environment talk during the deployment process talking to their own database they're going to talk to",
    "start": "2474560",
    "end": "2480119"
  },
  {
    "text": "essential CU for example this can be easily implemented with something like elastic beant stock with a worker team",
    "start": "2480119",
    "end": "2486359"
  },
  {
    "text": "here and there's a worker application behind that cue that takes those changes and pushes them to",
    "start": "2486359",
    "end": "2493119"
  },
  {
    "text": "the databases of each environment in their own schema format now there's a couple of things you need to factor in",
    "start": "2493119",
    "end": "2498960"
  },
  {
    "text": "when you do this first of all you need to start with a common set of data Baseline set for both environments how",
    "start": "2498960",
    "end": "2506680"
  },
  {
    "text": "you do that depends on the type of database that you're using right so if you're using something for example",
    "start": "2506680",
    "end": "2511760"
  },
  {
    "text": "Amazon RDS you can use Snapshot you can use cross region or you know read",
    "start": "2511760",
    "end": "2517480"
  },
  {
    "text": "replicas to actually achieve that common set of data initially before the",
    "start": "2517480",
    "end": "2522520"
  },
  {
    "text": "deployment starts or if you use Dynamo DB you can use update streams and our",
    "start": "2522520",
    "end": "2527920"
  },
  {
    "text": "cross region replication applications to make sure that you have tables that are in sync and have a the same data in both",
    "start": "2527920",
    "end": "2535880"
  },
  {
    "text": "on both sides and you have to actually you know factor in in your application some kind of flag that switches and",
    "start": "2535880",
    "end": "2543079"
  },
  {
    "text": "tells the application to okay now we're starting a deployment and don't talk directly to your database talk to that",
    "start": "2543079",
    "end": "2549760"
  },
  {
    "text": "Central rights aggregator for the duration of that deployment so it it has",
    "start": "2549760",
    "end": "2555119"
  },
  {
    "text": "some you know it has some internal you know code changes that need to be done",
    "start": "2555119",
    "end": "2560880"
  },
  {
    "text": "and of course you have to account for data lag and latency and things like that now the good news is that you can",
    "start": "2560880",
    "end": "2567760"
  },
  {
    "text": "simplify the sum in certain situations so you can have your green application for example write to both databases",
    "start": "2567760",
    "end": "2575760"
  },
  {
    "start": "2570000",
    "end": "2570000"
  },
  {
    "text": "right during the deployment process you know and then you'll have an asynchronous process that moves your",
    "start": "2575760",
    "end": "2581760"
  },
  {
    "text": "data changes from the blue database that the blue application made to your green",
    "start": "2581760",
    "end": "2587440"
  },
  {
    "text": "database as well now this is great if there's a mismatch in consistency",
    "start": "2587440",
    "end": "2592520"
  },
  {
    "text": "requirement for example your old application version is older has needs for strong consistency but your new",
    "start": "2592520",
    "end": "2599720"
  },
  {
    "text": "application doesn't right it's tolerant for um eventual consistency another",
    "start": "2599720",
    "end": "2606839"
  },
  {
    "text": "option is to just let each application write to the its own database right and be completely",
    "start": "2606839",
    "end": "2613839"
  },
  {
    "text": "isolated completely independent there's no code changes that you have to do to factor in the deployment process itself",
    "start": "2613839",
    "end": "2621240"
  },
  {
    "text": "and then essentially that centralized system that Aggregates the rights and pushes this through you're pushing it",
    "start": "2621240",
    "end": "2626880"
  },
  {
    "text": "down a level and it's a synchronous it's behind the scenes where it takes the changes from one from your blue",
    "start": "2626880",
    "end": "2633000"
  },
  {
    "text": "environments and pushes them to the green one takes the changes from the green one and pushes it to the blue one",
    "start": "2633000",
    "end": "2638359"
  },
  {
    "text": "it allows you to fully decouple your blue and green environment an example",
    "start": "2638359",
    "end": "2643960"
  },
  {
    "text": "that I have here is achieved using Dynamo DB tables with streams and triggers and Lambda functions for",
    "start": "2643960",
    "end": "2650480"
  },
  {
    "text": "example you have a blue application that talks to a Dynamo DB table a blue one",
    "start": "2650480",
    "end": "2656640"
  },
  {
    "text": "Dynamo specific table that publishes a stream like gets read by Lambda function",
    "start": "2656640",
    "end": "2662960"
  },
  {
    "text": "that applies the same changes in your green table that is uh associated with",
    "start": "2662960",
    "end": "2668079"
  },
  {
    "text": "your green stack now the opposite flow obviously also has to be implemented",
    "start": "2668079",
    "end": "2674119"
  },
  {
    "text": "similarly and you don't have to necessarily use Dynamo DB you could potentially achieve similar stuff with",
    "start": "2674119",
    "end": "2680520"
  },
  {
    "text": "if you're using third party databases some of their toolings around consider you know database triggers for example",
    "start": "2680520",
    "end": "2685640"
  },
  {
    "text": "for relational databases or a custom application as",
    "start": "2685640",
    "end": "2691520"
  },
  {
    "text": "well so in summary what we've preferred is diagram",
    "start": "2691520",
    "end": "2696599"
  },
  {
    "start": "2694000",
    "end": "2694000"
  },
  {
    "text": "here we um so we can show you kind of how these patterns stack to each other",
    "start": "2696599",
    "end": "2703000"
  },
  {
    "text": "the key takeaway here is not that necessarily one of them is worse or better than the other right the key",
    "start": "2703000",
    "end": "2710079"
  },
  {
    "text": "takeaway is that some of these patterns May apply to certain use cases and certain workloads better you know you",
    "start": "2710079",
    "end": "2716680"
  },
  {
    "text": "might be fine with the Simplicity of DNS switching in certain scenarios especially if you apply if you don't",
    "start": "2716680",
    "end": "2723119"
  },
  {
    "text": "apply uh don't do deployments very fre frequently or if you do them very frequently you might want something that",
    "start": "2723119",
    "end": "2729280"
  },
  {
    "text": "doesn't have to factor in all the complexities around DNS time to live and finally there's always going to",
    "start": "2729280",
    "end": "2737520"
  },
  {
    "start": "2735000",
    "end": "2735000"
  },
  {
    "text": "be risks associated with deployment so you want to mitigate and control those right we talk to customers and we hear",
    "start": "2737520",
    "end": "2744200"
  },
  {
    "text": "the story a lot where um you know customers are afraid",
    "start": "2744200",
    "end": "2750240"
  },
  {
    "text": "of deployments or they're shying away from them the idea is it becomes a vicious cycle you know because you delay",
    "start": "2750240",
    "end": "2756319"
  },
  {
    "text": "deployment you accumulate more changes because you have more changes the risk of that deployment and complexity of it",
    "start": "2756319",
    "end": "2763280"
  },
  {
    "text": "increases and that makes you postpone deployment even more so you end up in that kind of a vicious cycle so one of",
    "start": "2763280",
    "end": "2770160"
  },
  {
    "text": "the things you want to do is use deployment and automation Frameworks they can help you mitigate process and",
    "start": "2770160",
    "end": "2776720"
  },
  {
    "text": "human error risks if you're deploying right now with a 20 step kind of manual checklist that your developers your",
    "start": "2776720",
    "end": "2782880"
  },
  {
    "text": "operation staff has to go through to actually make sure that they hit all the spots for your application to be deployed that's problematic because they",
    "start": "2782880",
    "end": "2789880"
  },
  {
    "text": "you know they can missteps or they there's misconfigurations that can happen so anything that can be scripted",
    "start": "2789880",
    "end": "2795160"
  },
  {
    "text": "and automatically deployed will mitigate a lot of your risks on that front and",
    "start": "2795160",
    "end": "2800599"
  },
  {
    "text": "you want to also get comfortable with deployment so practice using production",
    "start": "2800599",
    "end": "2805720"
  },
  {
    "text": "like replicas let your staff practice frequently and use AWS and use the",
    "start": "2805720",
    "end": "2811480"
  },
  {
    "text": "advantages that AWS affords you to do that you can quickly provision resources",
    "start": "2811480",
    "end": "2816880"
  },
  {
    "text": "and you can easily turn them off once you're done with those resources so you",
    "start": "2816880",
    "end": "2822319"
  },
  {
    "text": "can practice frequently and in you know increase your confidence in",
    "start": "2822319",
    "end": "2828800"
  },
  {
    "text": "deployments and with that thank you very much for listening to us we're going to start accepting questions right",
    "start": "2828800",
    "end": "2835760"
  },
  {
    "text": "[Applause] now",
    "start": "2835760",
    "end": "2843440"
  }
]