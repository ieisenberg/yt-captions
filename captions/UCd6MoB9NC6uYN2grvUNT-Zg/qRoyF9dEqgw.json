[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "In this video, you’ll learn about Amazon \nKinesis Data Firehose, a fully managed",
    "start": "82",
    "end": "4406"
  },
  {
    "text": "service that reliably captures, transforms, \nand delivers streaming data to data lakes,",
    "start": "4407",
    "end": "8902"
  },
  {
    "text": "data stores, and analytics services.",
    "start": "8902",
    "end": "10938"
  },
  {
    "start": "12000",
    "end": "90000"
  },
  {
    "text": "To get started, let’s review \nhow data is streamed.",
    "start": "12072",
    "end": "14504"
  },
  {
    "text": "At a very basic level, all stream \nprocessing applications include five stages.",
    "start": "15046",
    "end": "19313"
  },
  {
    "text": "The process begins with data generated \nby multiple sources, or producers.",
    "start": "20457",
    "end": "24232"
  },
  {
    "text": "These sources may include mobile \nSDKs, IoT devices, click stream",
    "start": "24763",
    "end": "28492"
  },
  {
    "text": "products, or application logs that \nproduce real-time data at high velocity.",
    "start": "28492",
    "end": "32153"
  },
  {
    "text": "Second is stream ingestion, when data \nfrom tens of thousands of data sources",
    "start": "33297",
    "end": "37062"
  },
  {
    "text": "is collected and ingested in real time.",
    "start": "37062",
    "end": "39109"
  },
  {
    "text": "This stage may include value-add \nprocesses such as authentication or throttling.",
    "start": "39661",
    "end": "43531"
  },
  {
    "text": "This layer can also filter \nout data from poor sources.",
    "start": "43940",
    "end": "46574"
  },
  {
    "text": "The third stage is stream storage.",
    "start": "47801",
    "end": "49584"
  },
  {
    "text": "Data is stored in the order \nreceived for a set duration.",
    "start": "49942",
    "end": "52607"
  },
  {
    "text": "The fourth stage, stream processing, is when \nthe stored data is analyzed to gain insights.",
    "start": "53750",
    "end": "58515"
  },
  {
    "text": "Records are always read in the \norder in which they are received,",
    "start": "58975",
    "end": "61475"
  },
  {
    "text": "which makes stream processing \ndifferent from other types of processing.",
    "start": "61475",
    "end": "64328"
  },
  {
    "text": "The final stage is to send the processed \ndata to a destination, such as a data lake,",
    "start": "65524",
    "end": "69739"
  },
  {
    "text": "data warehouse, or database, \nwhere it can be held longer term",
    "start": "69739",
    "end": "72572"
  },
  {
    "text": "for analysis or auditing purposes.",
    "start": "72572",
    "end": "74496"
  },
  {
    "text": "Within this overall flow, Kinesis Data \nFirehose covers stream ingestion,",
    "start": "75580",
    "end": "79441"
  },
  {
    "text": "storage, processing, and destination delivery.",
    "start": "79441",
    "end": "81938"
  },
  {
    "text": "It provides near real-time streaming \nextract, transform, and load (ETL)",
    "start": "82438",
    "end": "86459"
  },
  {
    "text": "processing for any data, at \nany scale, and at low cost.",
    "start": "86459",
    "end": "89826"
  },
  {
    "start": "90000",
    "end": "158000"
  },
  {
    "text": "Let’s take a closer look at the ETL process.",
    "start": "90876",
    "end": "93192"
  },
  {
    "text": "Sources of streaming data include \nAWS service logs, IoT device data,",
    "start": "94224",
    "end": "98346"
  },
  {
    "text": "clickstream data, and enterprise \napplications, among many others.",
    "start": "98346",
    "end": "101609"
  },
  {
    "text": "Stream ingestion options include AWS \nSDK, and Amazon Kinesis Data Streams.",
    "start": "102334",
    "end": "107132"
  },
  {
    "text": "For logs generated by distributed \napplications, you can also use Amazon",
    "start": "107777",
    "end": "111443"
  },
  {
    "text": "Kinesis Agent or open-source \nagents such as Fluent Bit.",
    "start": "111443",
    "end": "114553"
  },
  {
    "text": "Stream storage and processing are \nhandled by Kinesis Data Firehose,",
    "start": "115625",
    "end": "119003"
  },
  {
    "text": "which can perform two \ntypes of transformations.",
    "start": "119003",
    "end": "121177"
  },
  {
    "text": "You can use a Lambda function to do \ncustom transformations, or use built-in",
    "start": "121636",
    "end": "125007"
  },
  {
    "text": "transformation capabilities such as data \nformat conversion or dynamic partitioning.",
    "start": "125007",
    "end": "129112"
  },
  {
    "text": "Kinesis Data Firehose also supports \nother capabilities such as buffering,",
    "start": "129797",
    "end": "133443"
  },
  {
    "text": "compression, and encryption of data.",
    "start": "133443",
    "end": "135153"
  },
  {
    "text": "Stream destination options supported \nby Kinesis Data Firehose include",
    "start": "136308",
    "end": "139842"
  },
  {
    "text": "Amazon S3, Amazon Redshift, Amazon \nOpenSearch, and Amazon API Gateway,",
    "start": "139842",
    "end": "145037"
  },
  {
    "text": "as well as many third-party destinations.",
    "start": "145037",
    "end": "147320"
  },
  {
    "text": "Kinesis Data Firehose enables \na wide variety of use cases.",
    "start": "148300",
    "end": "151502"
  },
  {
    "text": "These include click-stream, log, and \nIoT analytics, along with offline event",
    "start": "151728",
    "end": "155885"
  },
  {
    "text": "analysis and network security monitoring.",
    "start": "155885",
    "end": "158146"
  },
  {
    "start": "158000",
    "end": "237000"
  },
  {
    "text": "Let’s go over some of the benefits \nof using Kinesis Data Firehose.",
    "start": "159382",
    "end": "162349"
  },
  {
    "text": "Creating a pipeline using \nKinesis Data Firehose is easy.",
    "start": "163053",
    "end": "165995"
  },
  {
    "text": "With just a few clicks, you can create a \ndelivery stream, select your destination,",
    "start": "166384",
    "end": "170176"
  },
  {
    "text": "and start streaming real-time data.",
    "start": "170176",
    "end": "171922"
  },
  {
    "text": "With Kinesis Data Firehose, your delivery\nstreams automatically scale up to handle",
    "start": "172587",
    "end": "176371"
  },
  {
    "text": "gigabytes per second, maintaining \ndata latency at levels you specify.",
    "start": "176371",
    "end": "180313"
  },
  {
    "text": "Kinesis Data Firehose synchronously \nreplicates data across three facilities in",
    "start": "181232",
    "end": "184917"
  },
  {
    "text": "an AWS Region, providing high availability",
    "start": "184917",
    "end": "187482"
  },
  {
    "text": "and durability for the data as it is \ntransported to the destinations.",
    "start": "187482",
    "end": "190914"
  },
  {
    "text": "Kinesis Data Firehose is seamlessly \nintegrated with more than 30 AWS",
    "start": "191609",
    "end": "195185"
  },
  {
    "text": "services and streaming destinations, making\nit easy to ingest and deliver streaming data.",
    "start": "195185",
    "end": "199467"
  },
  {
    "text": "Kinesis Data Firehose handles data loss\nand data corruption scenarios through",
    "start": "200693",
    "end": "204237"
  },
  {
    "text": "automatic retries and provides data buffering \nand transformation capabilities with no code",
    "start": "204237",
    "end": "208775"
  },
  {
    "text": "development or maintenance required.",
    "start": "208775",
    "end": "210631"
  },
  {
    "text": "And finally, with Kinesis Data Firehose, you \npay only for the amount of data you ingest.",
    "start": "211265",
    "end": "215656"
  },
  {
    "text": "There are no minimum fees \nor upfront commitments.",
    "start": "215942",
    "end": "218305"
  },
  {
    "text": "Amazon Kinesis Data Firehose buffers \nincoming streaming data for a specified",
    "start": "219438",
    "end": "223208"
  },
  {
    "text": "period of time or to a specified volume \nbefore delivering it to its destination.",
    "start": "223208",
    "end": "227042"
  },
  {
    "text": "The buffer is flushed to the destination\n upon whichever threshold is hit first.",
    "start": "227665",
    "end": "231306"
  },
  {
    "text": "Buffering helps to avoid small files in \nAmazon S3 and reduce high storage costs.",
    "start": "232125",
    "end": "236507"
  },
  {
    "text": "Kinesis Data Firehose can convert the \nformat of your input data from JSON to",
    "start": "237579",
    "end": "241174"
  },
  {
    "text": "Apache Parquet or Apache ORC \nbefore storing the data in Amazon S3.",
    "start": "241174",
    "end": "245650"
  },
  {
    "text": "Parquet and ORC are columnar data \nformats that save space and enable",
    "start": "246170",
    "end": "249497"
  },
  {
    "text": "faster queries compared to \nrow-oriented formats like JSON.",
    "start": "249497",
    "end": "252653"
  },
  {
    "text": "If you want to convert from an input \nformat other than JSON, such as",
    "start": "253593",
    "end": "256346"
  },
  {
    "text": "comma-separated values (CSV) or \nstructured text, you can use an inline AWS",
    "start": "256346",
    "end": "261397"
  },
  {
    "text": "Lambda function to transform it to JSON first.",
    "start": "261397",
    "end": "263859"
  },
  {
    "start": "264000",
    "end": "295000"
  },
  {
    "text": "Kinesis Data Firehose also \nsupports dynamic partitioning.",
    "start": "264972",
    "end": "267858"
  },
  {
    "text": "This enables you to continuously \npartition streaming data using keys",
    "start": "268370",
    "end": "271237"
  },
  {
    "text": "within the data and then deliver \nthe data grouped by these keys into",
    "start": "271237",
    "end": "274054"
  },
  {
    "text": "corresponding Amazon S3 prefixes.",
    "start": "274054",
    "end": "276366"
  },
  {
    "text": "In this example, the user has partitioned the \ndata based on customer ID, year, month, and day.",
    "start": "277194",
    "end": "282020"
  },
  {
    "text": "The data is delivered into \nspecified Amazon S3 prefixes",
    "start": "282572",
    "end": "285440"
  },
  {
    "text": "within the configured bucket.",
    "start": "285441",
    "end": "286752"
  },
  {
    "text": "Partitioning your data minimizes the \namount of data scanned, optimizes",
    "start": "287681",
    "end": "290960"
  },
  {
    "text": "performance, and reduces costs of \nyour analytics queries on Amazon S3.",
    "start": "290960",
    "end": "294901"
  },
  {
    "start": "295000",
    "end": "309000"
  },
  {
    "text": "Kinesis Data Firehose also allows you \nto configure your stream with a Lambda",
    "start": "296139",
    "end": "299453"
  },
  {
    "text": "function to transform incoming source \ndata before delivering it to its destination.",
    "start": "299453",
    "end": "303507"
  },
  {
    "text": "You can use existing Lambda blueprints\nfor this purpose, or write custom code to",
    "start": "304181",
    "end": "307598"
  },
  {
    "text": "transform your source data.",
    "start": "307598",
    "end": "309068"
  },
  {
    "start": "309000",
    "end": "343000"
  },
  {
    "text": "You can monitor Kinesis Data Firehose \nusing several different Amazon features.",
    "start": "310243",
    "end": "313723"
  },
  {
    "text": "Kinesis Data Firehose sends Amazon \nCloudWatch logs and custom metrics with",
    "start": "314356",
    "end": "318151"
  },
  {
    "text": "detailed monitoring for each delivery stream.",
    "start": "318152",
    "end": "320430"
  },
  {
    "text": "Kinesis Agent publishes custom \nCloudWatch metrics to help assess",
    "start": "321462",
    "end": "324405"
  },
  {
    "text": "whether the agent is working as expected.",
    "start": "324405",
    "end": "326357"
  },
  {
    "text": "Kinesis Data Firehose uses AWS CloudTrail to \nlog API calls and store the data in an Amazon",
    "start": "327204",
    "end": "332553"
  },
  {
    "text": "S3 bucket, and to maintain API call history.",
    "start": "332553",
    "end": "335430"
  },
  {
    "text": "You can learn more about this topic in \nthe description and links for this video.",
    "start": "336238",
    "end": "339333"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "339456",
    "end": "341432"
  }
]