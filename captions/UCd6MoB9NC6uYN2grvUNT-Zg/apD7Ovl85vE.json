[
  {
    "start": "0",
    "end": "149000"
  },
  {
    "text": "okay I made Recaro from Netflix cloud architect and we have Roslyn mission",
    "start": "1129",
    "end": "7170"
  },
  {
    "text": "book with us as well who's the director of the engineering for the cloud platform team I'm going to start off and",
    "start": "7170",
    "end": "13250"
  },
  {
    "text": "Rosen's gonna take it about halfway through run to the end so we're going to",
    "start": "13250",
    "end": "20010"
  },
  {
    "text": "talk about the Netflix open source toolkit all of the different tools we've built there are something like 35",
    "start": "20010",
    "end": "26640"
  },
  {
    "text": "different things that we've built over than open source in the last two years and we're gonna do it from the point of view of a startup that has a problem so",
    "start": "26640",
    "end": "35309"
  },
  {
    "text": "let's say your startup that just got funded you're going to have more developers more customers now you need",
    "start": "35309",
    "end": "41129"
  },
  {
    "text": "high availability maybe going to go global but your snack currently looks like this you know there's sort of Ruby",
    "start": "41129",
    "end": "47489"
  },
  {
    "text": "on Rails stuck it in one-one zone and it's just sitting there and you've got a few customers trying to",
    "start": "47489",
    "end": "52680"
  },
  {
    "text": "get into it what you really need is something that looks more like this with lots more customers spread all over the",
    "start": "52680",
    "end": "58800"
  },
  {
    "text": "world giving it to regional load balancers multiples own multiple region replication underneath and Anna",
    "start": "58800",
    "end": "64680"
  },
  {
    "text": "complicated-looking you know micro services architecture underneath so how",
    "start": "64680",
    "end": "71640"
  },
  {
    "text": "do we bridge those two inside each zone this is a list you know your traffic",
    "start": "71640",
    "end": "78240"
  },
  {
    "text": "comes in and there are lots of different services that are serving here and you have memcache Cassandra Web Services s3",
    "start": "78240",
    "end": "83400"
  },
  {
    "text": "buckets the whole thing looks much more complicated we want to help you get there and Netflix OSS we're kind of all",
    "start": "83400",
    "end": "90180"
  },
  {
    "text": "the pieces you need to get to global scale its apache license cloud native open source platform and it's up on",
    "start": "90180",
    "end": "96090"
  },
  {
    "text": "github the problem is we gave everyone technical indigestion how many people",
    "start": "96090",
    "end": "101970"
  },
  {
    "text": "read the Netflix tech blog posts right how many people have bunches that they haven't right got around to reading yet",
    "start": "101970",
    "end": "107759"
  },
  {
    "text": "because you know we released four or five of them in a week and you can't keep up and there's that one looked interesting with you cocky there's just",
    "start": "107759",
    "end": "113909"
  },
  {
    "text": "too much stuff so with this is what our github site looked like until a week or two ago we",
    "start": "113909",
    "end": "120780"
  },
  {
    "text": "just changed it to make it a bit easier so now we've got categories because they're kind of here we were stealing",
    "start": "120780",
    "end": "126719"
  },
  {
    "text": "the graphics from our user interface obviously from the regular Netflix site so now we've got availability and all",
    "start": "126719",
    "end": "131910"
  },
  {
    "text": "the different categories as if they were shonduras so you can figure out any I'm interested in some particular aspect and",
    "start": "131910",
    "end": "138370"
  },
  {
    "text": "these are the projects that are related to that and there's a better getting getting started information there too",
    "start": "138370",
    "end": "144010"
  },
  {
    "text": "and some links but and we'll walk through there getting started process next so this is this is what you have to",
    "start": "144010",
    "end": "151210"
  },
  {
    "start": "149000",
    "end": "149000"
  },
  {
    "text": "do first of all we have our account setup in a certain way so you know they",
    "start": "151210",
    "end": "156550"
  },
  {
    "text": "make it you know it's not the only way you could do it but at least it gives you a baseline for the way we think about running our AWS accounts we want",
    "start": "156550",
    "end": "165490"
  },
  {
    "text": "to get at security and access management setup properly then the account management tools go in asgard to deploy",
    "start": "165490",
    "end": "171730"
  },
  {
    "text": "in ice for cost monetary animator Amanita to automate baking a.m. eyes",
    "start": "171730",
    "end": "177960"
  },
  {
    "text": "then we have a service registry called Eureka and we put in a searchable",
    "start": "177960",
    "end": "183040"
  },
  {
    "text": "account history called adder and I'll get a bit more into that a bit more later but it's a very powerful way to to",
    "start": "183040",
    "end": "188620"
  },
  {
    "text": "track everything that happens in an account next thing is you're going to want to do dynamic configuration",
    "start": "188620",
    "end": "193960"
  },
  {
    "text": "management you know be able to tweak a variable change a timeout and a feature on or off and have that scoped across",
    "start": "193960",
    "end": "200290"
  },
  {
    "text": "your system so that's what our caius does you obviously need to store some data so I'll talk about the Cassandra",
    "start": "200290",
    "end": "207250"
  },
  {
    "text": "tools we have a stone axe which is our Java client library priam that is used",
    "start": "207250",
    "end": "212830"
  },
  {
    "text": "to manage cassandra and Evie cache that's our a memcache D management layer",
    "start": "212830",
    "end": "219090"
  },
  {
    "text": "then you're going to want to route traffic into this system this is where Roslin's going to take over because he's",
    "start": "219090",
    "end": "225280"
  },
  {
    "text": "giving a talk later this afternoon that's particularly about this point but denominators for DNS management as all",
    "start": "225280",
    "end": "231850"
  },
  {
    "text": "is an API proxy management tier ribbon is the client-side calling outbound",
    "start": "231850",
    "end": "238860"
  },
  {
    "text": "libraries and carry on is the sort of base server that you call into and all of that different parts of the framework",
    "start": "238860",
    "end": "246300"
  },
  {
    "text": "once you've got it working you need to break it so we have the simian army which runs the somebody probably heard",
    "start": "246300",
    "end": "253180"
  },
  {
    "text": "of the chaos monkey that's just one member of that and hysterics for making protected calls with a circuit breaker",
    "start": "253180",
    "end": "260079"
  },
  {
    "text": "pattern so you can call dependencies that you don't trust and manage the reliability of them and",
    "start": "260080",
    "end": "265700"
  },
  {
    "text": "turbine for monitoring those circuit breakers with one-second updates in real time and then develop a Productivity",
    "start": "265700",
    "end": "272150"
  },
  {
    "text": "tools if you've ever run into log4j logging storms blitz 4j fixes a lot of",
    "start": "272150",
    "end": "277820"
  },
  {
    "text": "the problems there garbage collection visualization PI theaters for building",
    "start": "277820",
    "end": "283340"
  },
  {
    "text": "dashboards it's sort of Twitter bootstrap and a whole bunch of things and we're glued together and rx Java for",
    "start": "283340",
    "end": "289910"
  },
  {
    "text": "doing functional reactive programming and then if you're getting once you've built your system you're generating a",
    "start": "289910",
    "end": "296090"
  },
  {
    "text": "lot of big data you want to process it so we have a genie which is our Hadoop platform as a service that we used to",
    "start": "296090",
    "end": "302450"
  },
  {
    "text": "manage lots of EMR clusters and if you're using Pig we have a visualization",
    "start": "302450",
    "end": "308900"
  },
  {
    "text": "system called lipstick for that so put lipstick on a pig there we go and to get",
    "start": "308900",
    "end": "314270"
  },
  {
    "text": "you started there are three different sample applications the RSS reader that we built on our site acne err that was",
    "start": "314270",
    "end": "321590"
  },
  {
    "text": "built by IBM and flux capacitor was built by Chris frankly and so what will",
    "start": "321590",
    "end": "327920"
  },
  {
    "text": "tell you how to how to find those and they all cover slightly different things so that's the step by step then they go",
    "start": "327920",
    "end": "333950"
  },
  {
    "text": "through and show you what those actually look like the first thing how do we set up our accounts well this is this is",
    "start": "333950",
    "end": "341300"
  },
  {
    "start": "340000",
    "end": "340000"
  },
  {
    "text": "sort of an abstract way of doing it we have four different accounts AWS accounts there's the dev test build",
    "start": "341300",
    "end": "347210"
  },
  {
    "text": "account that's where all of the build system deploys code that's the only place we deploy code the only way we get",
    "start": "347210",
    "end": "353660"
  },
  {
    "text": "code to the production account is by moving an ami that's been pre-built baked with all the bits on it into the",
    "start": "353660",
    "end": "359840"
  },
  {
    "text": "production account okay so we only ever build code in one place and everything runs there and there's sort of a",
    "start": "359840",
    "end": "365420"
  },
  {
    "text": "complete working copy of Netflix or whatever you're building in this dev test build account as God helps you",
    "start": "365420",
    "end": "371630"
  },
  {
    "text": "manage different developers so they don't will stomp on each other and you can route traffic around it with tagging and things like that so then the",
    "start": "371630",
    "end": "378050"
  },
  {
    "text": "production account is running you've got all your nice customer traffic coming into it you want to do backups of",
    "start": "378050",
    "end": "383150"
  },
  {
    "text": "production so the way we do backups we take Cassandra and we take all of the backups from there if you're using my",
    "start": "383150",
    "end": "388970"
  },
  {
    "text": "sequel you can do RDS backups to s3 there's a contributed opens Netflix OSS",
    "start": "388970",
    "end": "394280"
  },
  {
    "text": "tool for doing that and you copy them into a separate account which is set up to just be for",
    "start": "394280",
    "end": "401180"
  },
  {
    "text": "s3 there's actually no code running in it it's just an account to hold s3 and you can kind of lock in the door and",
    "start": "401180",
    "end": "407270"
  },
  {
    "text": "throw away the keys you set it up so that you can write to it and read to it from your production account but and",
    "start": "407270",
    "end": "414319"
  },
  {
    "text": "you've set the override thing so you get version so you can't delete something by overwriting it so anything you put there",
    "start": "414319",
    "end": "419659"
  },
  {
    "text": "will always be there when you put like a 90-day term and you know time out to sort of remove things after a while it's",
    "start": "419659",
    "end": "425449"
  },
  {
    "text": "a very powerful thing because you know one of the possible things that might happen is you get account compromised or",
    "start": "425449",
    "end": "430610"
  },
  {
    "text": "some you know some rogue employee or whatever somebody gets into your account they could maybe get into your",
    "start": "430610",
    "end": "436580"
  },
  {
    "text": "production account this is a very safe way of storing your archive storing your data without having to go to tape and",
    "start": "436580",
    "end": "442400"
  },
  {
    "text": "you can archive off into glassier from it if you want you can set up whatever bucket policies you want so then we also",
    "start": "442400",
    "end": "448819"
  },
  {
    "text": "have an auditable account that's about you know on our scale that the auditing account is a few hundred machines the",
    "start": "448819",
    "end": "456169"
  },
  {
    "text": "production accounts tens of thousands of machines so that but this auto account is the only place we put Sox compliance",
    "start": "456169",
    "end": "462139"
  },
  {
    "text": "stuff and you know we're gonna be see I thinks that you're in scope for audience and compliance so you make that as small",
    "start": "462139",
    "end": "468080"
  },
  {
    "text": "as possible so that you don't have a snit so that you can do all of your regular you know agile or whatever you",
    "start": "468080",
    "end": "473270"
  },
  {
    "text": "want to do in the per main production account again they're doing backups and then the neat trick we have is every",
    "start": "473270",
    "end": "479060"
  },
  {
    "text": "weekend we take those backups and we restore them to the test account so we we just overwrite whatever the databases",
    "start": "479060",
    "end": "485210"
  },
  {
    "text": "in test had over the weekend when most of the testers aren't there and you come in on Monday and there is the last",
    "start": "485210",
    "end": "491360"
  },
  {
    "text": "week's production data sitting there to run all of your tests again so it's kind of a nice cycle it proves that you do",
    "start": "491360",
    "end": "497300"
  },
  {
    "text": "have backups because if it fails over the weekends like oh yeah we don't have backups of that that's kind of those",
    "start": "497300",
    "end": "502999"
  },
  {
    "text": "stupid things you want to avoid so this is it's not you know it's obviously many ways of setting it up but we're not to",
    "start": "502999",
    "end": "508339"
  },
  {
    "text": "focus on now is this dev test build account and what we put in that we use",
    "start": "508339",
    "end": "514610"
  },
  {
    "text": "the two-factor authentication to keep our accounts secure we use I am to do delegated minimum privilege this is just",
    "start": "514610",
    "end": "520818"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "basic hygiene but if you if you don't get the security setup right at the beginning correctly it's hard to build",
    "start": "520819",
    "end": "526250"
  },
  {
    "text": "it's hard to add in later so you should always treat for security is a very foundational thing",
    "start": "526250",
    "end": "531530"
  },
  {
    "text": "first thing you do is set everything up in a secure pattern and they get people to build within that pattern it's just",
    "start": "531530",
    "end": "538550"
  },
  {
    "text": "way too hard to to go the other way and we a security group to control which service can call which other service so",
    "start": "538550",
    "end": "544970"
  },
  {
    "text": "that's the basic setup you want to log into these machines so and we want it to",
    "start": "544970",
    "end": "550850"
  },
  {
    "text": "be ordered that you're doing that so we set up a Bastian machine some kind of gateway and get all the developers to",
    "start": "550850",
    "end": "556340"
  },
  {
    "start": "552000",
    "end": "552000"
  },
  {
    "text": "log into that and that machine knows how to pseudo into any machine in the cloud and you you can audit who logged in",
    "start": "556340",
    "end": "563660"
  },
  {
    "text": "where and the way that we set up our security groups the machines in the cloud can't log into each other so the",
    "start": "563660",
    "end": "569690"
  },
  {
    "text": "only way you can get from a piece of you know a file or whatever from one machine to another machine you know do sideways",
    "start": "569690",
    "end": "575120"
  },
  {
    "text": "copies you come back to the Bastian copier they copy it back out so you can actually get a much cleaner view of",
    "start": "575120",
    "end": "580910"
  },
  {
    "text": "what's actually happening and the interactions that that individual engineers are having with individual",
    "start": "580910",
    "end": "586250"
  },
  {
    "text": "machines so this is particularly useful in this order in account I was talking about to follow this model and really stick to it okay so turning an",
    "start": "586250",
    "end": "595220"
  },
  {
    "text": "infrastructure we want to build up a few images that to get started with and",
    "start": "595220",
    "end": "602260"
  },
  {
    "text": "Peter who's sitting down here with the Yellow Jacket on has has contributed a whole bunch of things he has this little",
    "start": "602260",
    "end": "608380"
  },
  {
    "start": "606000",
    "end": "606000"
  },
  {
    "text": "answers for for for AWS startup that he's been doing and he's are also",
    "start": "608380",
    "end": "614990"
  },
  {
    "text": "entries in the Netflix client price that would be talking about tomorrow in the keynote we've built some he's built",
    "start": "614990",
    "end": "623870"
  },
  {
    "text": "pre-built ami is for as garden a laminator at a Eureka and Simeon Army so you can just go if you've got an",
    "start": "623870",
    "end": "629840"
  },
  {
    "text": "existing set up you just want to build put a door in your system you can do to go pull these a.m. eyes launch them",
    "start": "629840",
    "end": "635090"
  },
  {
    "text": "yourself and then you have that facility so this is a great contribution but went",
    "start": "635090",
    "end": "640490"
  },
  {
    "text": "a bit further than that he built cloud formation templates so you can just walk through and it will install everything set up all the security groups and",
    "start": "640490",
    "end": "647180"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "basically create everything for you for these five different tools so we're",
    "start": "647180",
    "end": "652490"
  },
  {
    "text": "going to do a walk-through for Asgard so this is step by step if you can't get Asgard running following this then okay",
    "start": "652490",
    "end": "658070"
  },
  {
    "text": "I got it oK you've get the template you clone the",
    "start": "658070",
    "end": "663230"
  },
  {
    "text": "repo you log in on the console go to the page then you create a new stack and",
    "start": "663230",
    "end": "671690"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "select the template you can say as guard there it is then you want to create the",
    "start": "671690",
    "end": "677480"
  },
  {
    "start": "676000",
    "end": "676000"
  },
  {
    "text": "stack and you have to give the IP address and keys to get access to that your IP address because you want to be",
    "start": "677480",
    "end": "684440"
  },
  {
    "text": "able to log into it then you could create the stack this step you just skip",
    "start": "684440",
    "end": "689770"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "then you confirm that and then you sit back and watch and machines appear and",
    "start": "689770",
    "end": "694820"
  },
  {
    "start": "693000",
    "end": "693000"
  },
  {
    "text": "things happen and it's sort of you know wait for a little bit and a few minutes later it's done and on this page there's",
    "start": "694820",
    "end": "701810"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "this it says public dns public dearness",
    "start": "701810",
    "end": "708140"
  },
  {
    "text": "this is the address that's the address of the machine that just got started so you want to stick that in your browser",
    "start": "708140",
    "end": "713210"
  },
  {
    "text": "and go visit it and then you see as god this is the startup screen and as god",
    "start": "713210",
    "end": "718910"
  },
  {
    "start": "715000",
    "end": "715000"
  },
  {
    "text": "needs to know what your a your account credentials are because it's going to be running you know creating stuff for you",
    "start": "718910",
    "end": "724040"
  },
  {
    "text": "so you enter that and then it comes up and this is it this is now you can see",
    "start": "724040",
    "end": "729350"
  },
  {
    "start": "726000",
    "end": "726000"
  },
  {
    "text": "along the top you can go you know just create an ELB create a simple DB do RDS",
    "start": "729350",
    "end": "735710"
  },
  {
    "text": "go you know create stuff yeah but then you can give this to your developers and they don't have to see the account key anymore alright so we set this up",
    "start": "735710",
    "end": "742910"
  },
  {
    "text": "because we wanted to have something that's scaled and something that was more developer focused than the the AWS",
    "start": "742910",
    "end": "748610"
  },
  {
    "text": "portal which is a little more operationally focused and you tend to get this split where the tooling really is a little bit in the requirements a",
    "start": "748610",
    "end": "754910"
  },
  {
    "text": "little bit different but what we do with this is we use red-black deployments so what we'll do and this is all built into",
    "start": "754910",
    "end": "761360"
  },
  {
    "start": "758000",
    "end": "758000"
  },
  {
    "text": "it we'll use an order scaling group to run one version of our code and then we'll create a new order and you build a",
    "start": "761360",
    "end": "767930"
  },
  {
    "text": "new ami for the new code and we'll bring that into into production by starting up an order scale group and then we use",
    "start": "767930",
    "end": "774800"
  },
  {
    "text": "this page to flip the traffic between them so we'll we'll turn on traffic to the new code turn it off to the nucleoli",
    "start": "774800",
    "end": "781010"
  },
  {
    "text": "and leave the old one running for a while so if it blows up a few hours later or anything goes wrong we can just",
    "start": "781010",
    "end": "787040"
  },
  {
    "text": "go into this and in a few seconds and tell the EO bees to switch the traffic to the old code generally we use this with stateless",
    "start": "787040",
    "end": "793570"
  },
  {
    "text": "services and most of our service layers are stateless all our state is in Cassandra or memcache these are keeping",
    "start": "793570",
    "end": "799000"
  },
  {
    "text": "that that boundary is another good sort of you know architectural hygiene kind of thing so this lets us run really fast",
    "start": "799000",
    "end": "807790"
  },
  {
    "text": "with continuous deployment every developer is deploying their own code to production using this and you pay for it",
    "start": "807790",
    "end": "813010"
  },
  {
    "text": "to test first but then we have their workflows that will take it into production as well and we can if",
    "start": "813010",
    "end": "818650"
  },
  {
    "text": "anything goes wrong you can flip back to the offline so it's a it you can run really fast and when you get a mistake",
    "start": "818650",
    "end": "823660"
  },
  {
    "text": "it's a really small mistake you can recover from really quickly and we have sort of one second monitoring tools for",
    "start": "823660",
    "end": "828970"
  },
  {
    "text": "tracking that what's actually going on in these services as well okay so you're",
    "start": "828970",
    "end": "835630"
  },
  {
    "text": "deploying stuff you want to know how much it costs so we have ice this is runs off the detailed billing",
    "start": "835630",
    "end": "841660"
  },
  {
    "start": "839000",
    "end": "839000"
  },
  {
    "text": "records interface that AWS came out with last year it's got hourly data we tagged",
    "start": "841660",
    "end": "846940"
  },
  {
    "text": "it we slice it we generally we generate a report that goes to each manager of Netflix you know for the stuff that we",
    "start": "846940",
    "end": "853720"
  },
  {
    "text": "apportion to their team so you go to a weekly report kind of thing out of this that we do but the tool itself is a",
    "start": "853720",
    "end": "859720"
  },
  {
    "text": "we've been developing for quite a while internally and and it's got a lot of functionality you want to get this",
    "start": "859720",
    "end": "866320"
  },
  {
    "text": "running and fortunate it's a little more complicated we can't do an ami for this because we used high charts as their GUI",
    "start": "866320",
    "end": "872370"
  },
  {
    "start": "872000",
    "end": "872000"
  },
  {
    "text": "to do little charts and that's not that's available but it's got a more restrictive license and we can't package",
    "start": "872370",
    "end": "878800"
  },
  {
    "text": "it and put it out for anyone to use but if you have high charts anyway or you were a non-commercial use you can just",
    "start": "878800",
    "end": "884980"
  },
  {
    "text": "grab it they give it to open on commercial and then you build out you know that there's a bunch of recipes on",
    "start": "884980",
    "end": "891550"
  },
  {
    "text": "github for how to put it together and how to go and run it out so it's a little bit more complex we're working",
    "start": "891550",
    "end": "897310"
  },
  {
    "text": "eventually to take out high charts and put in something else that is completely open-source and if you want to help us",
    "start": "897310",
    "end": "902800"
  },
  {
    "text": "do that we were very happy you know this is all open source we all help each other so if you really want to use it",
    "start": "902800",
    "end": "907990"
  },
  {
    "text": "and you don't like high charts go fix it fix it yourself so I build pipelines",
    "start": "907990",
    "end": "913750"
  },
  {
    "text": "based on Jenkins we use that internally but we also use it externally and cloudBees run a",
    "start": "913750",
    "end": "919510"
  },
  {
    "text": "Jenkins public pipeline and one of the nice things is that they provide free",
    "start": "919510",
    "end": "924670"
  },
  {
    "text": "use of that service for building open-source projects so if you look at our github",
    "start": "924670",
    "end": "929829"
  },
  {
    "text": "site and you give us if you throw a pull request into on one of our projects if you create a pull request cloudy's",
    "start": "929829",
    "end": "936720"
  },
  {
    "text": "automatically gets notified that there's a pull request automatically does a build runs all the sale to all the",
    "start": "936720",
    "end": "942910"
  },
  {
    "text": "testing and whatever and if it passes the tests then we get notified the engineer that owns that project or the",
    "start": "942910",
    "end": "948339"
  },
  {
    "text": "committers get notified that a a pull request passed everything and is built",
    "start": "948339",
    "end": "954009"
  },
  {
    "text": "and we should go look at it if you throw some code in there that doesn't pass the tests we just we don't",
    "start": "954009",
    "end": "959350"
  },
  {
    "text": "even hear about it so you have to get through some tests maybe you have to rewrite the tests but so this is a nice",
    "start": "959350",
    "end": "966939"
  },
  {
    "text": "system and it's the basis of a lot of our automation so it's been talking",
    "start": "966939",
    "end": "972850"
  },
  {
    "text": "about baking a mice we have a fairly sophisticated way of doing that it's a pluggable fairly generic build system",
    "start": "972850",
    "end": "980199"
  },
  {
    "text": "tool it's written in Python it mounts a a volume and basically it takes an",
    "start": "980199",
    "end": "987249"
  },
  {
    "text": "existing base ami which is usually a linux build that you keep up-to-date with you know patches and things it",
    "start": "987249",
    "end": "993850"
  },
  {
    "text": "takes that and then duplicates it into an e amounted BBS volume and sort of two routes in and then adds all the",
    "start": "993850",
    "end": "999999"
  },
  {
    "text": "different packages and things like that and then snapshots that volume out into an ami so it's an efficient way it's a",
    "start": "999999",
    "end": "1007230"
  },
  {
    "text": "long-running process but it sits there spinning off AM is that a custom built to do whatever you want them to do and",
    "start": "1007230",
    "end": "1013949"
  },
  {
    "text": "once we got these ermes we can make one machine out of it or we can make a thousand machines out of it you just say",
    "start": "1013949",
    "end": "1019259"
  },
  {
    "text": "you know the autoscaler just fill in the number tell it what to do so if you want to do this again there's a CloudFormation recipe and there are AMAs",
    "start": "1019259",
    "end": "1026399"
  },
  {
    "text": "pre-built a.m. eyes for it there's a",
    "start": "1026399",
    "end": "1032808"
  },
  {
    "text": "when you're in the cloud and everything's dynamic you have to be able to find a service so I want to look up an IV cache service but I don't know",
    "start": "1032809",
    "end": "1040529"
  },
  {
    "start": "1036000",
    "end": "1036000"
  },
  {
    "text": "what the ec2 blah blah blah URL is for it and the instances so what I have is",
    "start": "1040529",
    "end": "1045569"
  },
  {
    "text": "this idea of an application on our service so I need a service registry so when the Evie cache instance itself",
    "start": "1045569",
    "end": "1051510"
  },
  {
    "text": "comes up it tells Eureka our service registry hey I exist here's a bunch of metadata about me his",
    "start": "1051510",
    "end": "1057600"
  },
  {
    "text": "IP address his all kinds of info you know what ports I'm listening to what kind of things I'm doing in this case it",
    "start": "1057600",
    "end": "1063000"
  },
  {
    "text": "would be you can you have one one two one one reaches the memcache D port as well as the Tomcat server that we use",
    "start": "1063000",
    "end": "1068700"
  },
  {
    "text": "for managing on the unarmed M caches so that comes up Eureka now has an entry for that and",
    "start": "1068700",
    "end": "1076320"
  },
  {
    "text": "everyone now goes and asks Eureka so where is everybody give me a map of the world and what you get back is at some",
    "start": "1076320",
    "end": "1083009"
  },
  {
    "text": "point these are the eb cache instances that are in this zone these are the ones that are in this zone you can see here",
    "start": "1083009",
    "end": "1088080"
  },
  {
    "text": "we have some in 1c and so and one in 1d so there's a bunch of them scattered around they pull them in and you can",
    "start": "1088080",
    "end": "1094590"
  },
  {
    "text": "then see what you're doing and you can find them and you have sort of an in-memory lookup that's being refreshed",
    "start": "1094590",
    "end": "1100649"
  },
  {
    "text": "every 30 seconds for where everything else is again there's a ami or you can",
    "start": "1100649",
    "end": "1107159"
  },
  {
    "text": "use cloud formation to start this the way this is built it's actually a tomcat server with a rest interface you can go",
    "start": "1107159",
    "end": "1114600"
  },
  {
    "text": "connect to it with just about anything we have a Eureka client library that talks to it but the server then",
    "start": "1114600",
    "end": "1119850"
  },
  {
    "start": "1117000",
    "end": "1117000"
  },
  {
    "text": "replicates it so in each zone you're running in you run a copy of eureka and you configure them to cross replicate so",
    "start": "1119850",
    "end": "1126120"
  },
  {
    "text": "the way this works is on the Left we have an application service that's just come up that's we're going to register",
    "start": "1126120",
    "end": "1131159"
  },
  {
    "text": "with the server to say I exist with the discovery service and it's going to renew it every 30 seconds saying I'm",
    "start": "1131159",
    "end": "1138000"
  },
  {
    "text": "still here and I'm taking track I'm ready to take traffic I'm half healthy or it could or you could be saying I'm not ready to take traffic yet my may I",
    "start": "1138000",
    "end": "1144899"
  },
  {
    "text": "exist but my my code is initialized yet and then that data is then replicated to",
    "start": "1144899",
    "end": "1154019"
  },
  {
    "text": "the other zones so then you've got the people trying to call that service the client three clients at the bottom they",
    "start": "1154019",
    "end": "1160259"
  },
  {
    "text": "talk to Eureka they have a this map of the world that tells them where everything is and they can call across to call that service so that's that's",
    "start": "1160259",
    "end": "1167639"
  },
  {
    "text": "how it works we're not going there's no intermediate layer it's not like a sort of kind of Heroku Cloud Foundry kind of",
    "start": "1167639",
    "end": "1173850"
  },
  {
    "text": "thing where there's this messaging layer that you talk to that mysteriously pops out somewhere else this is just HTTP",
    "start": "1173850",
    "end": "1180179"
  },
  {
    "text": "access directly to the endpoint on the instance but this is the mechanism used",
    "start": "1180179",
    "end": "1185399"
  },
  {
    "text": "for finding everything and if we can make a little more efficient because we don't just publish this is the URL",
    "start": "1185399",
    "end": "1191340"
  },
  {
    "text": "we would with DNS we actually published much much more metadata which zone am I in what's my actual IP address so we can",
    "start": "1191340",
    "end": "1197759"
  },
  {
    "text": "look we can actually short-circuit DNS lookups and things like that because we can just go straight to the to the IP",
    "start": "1197759",
    "end": "1203190"
  },
  {
    "text": "address so one of the things that that",
    "start": "1203190",
    "end": "1209059"
  },
  {
    "text": "the service registry does is is is track or everything you've got running but it",
    "start": "1209059",
    "end": "1214080"
  },
  {
    "text": "changes over time and then there's all the Amazon entities then they're changing over time and then you're",
    "start": "1214080",
    "end": "1219659"
  },
  {
    "text": "looking at some problem that happened last week that you're trying to diagnose what really happened and half the machines aren't here anymore and those",
    "start": "1219659",
    "end": "1226470"
  },
  {
    "text": "services are all different and there's different versions and so the question becomes what is the state of the Machine",
    "start": "1226470",
    "end": "1231960"
  },
  {
    "text": "of the entire environment a week ago or a month ago or yesterday or five minutes ago and what you can normally get is the",
    "start": "1231960",
    "end": "1239580"
  },
  {
    "text": "state of it now so Edda is a service that basically think of is a time stamped Delta store it does describe",
    "start": "1239580",
    "end": "1247950"
  },
  {
    "text": "calls against all of those Amazon things that you have you know instances yo B's order scaling groups all of those things",
    "start": "1247950",
    "end": "1254970"
  },
  {
    "text": "it just runs described over and over again and then it looks to see whether the previous copy had previous described",
    "start": "1254970",
    "end": "1261899"
  },
  {
    "text": "reserve return was the same or different than if it's different it stores the new one with a timestamp and keeps the old",
    "start": "1261899",
    "end": "1267720"
  },
  {
    "text": "one so now I've got eight eight complete history of the state of my cloud and",
    "start": "1267720",
    "end": "1272970"
  },
  {
    "text": "this is a very very simple concept but it's incredibly powerful one because we have monkeys running against this like",
    "start": "1272970",
    "end": "1279210"
  },
  {
    "text": "janitor monkey is cleaning up things that aren't in use that it haven't been in use for a week and we know because we",
    "start": "1279210",
    "end": "1284279"
  },
  {
    "text": "have the history you can build all kinds of automation on top of this but it's and security things like that you know",
    "start": "1284279",
    "end": "1290820"
  },
  {
    "text": "there's quite often you want to find out things like some says there's an IP address that was like spamming my",
    "start": "1290820",
    "end": "1297269"
  },
  {
    "text": "account yesterday it's one of yours I think and you go ok well let's look that up here's let's find all the instances that",
    "start": "1297269",
    "end": "1304259"
  },
  {
    "text": "have ever had this specific public IP address and you get back a JSON array that has them and you can go and drag in",
    "start": "1304259",
    "end": "1310379"
  },
  {
    "text": "and get more information about these but this is the basic thing this is since zero since the dawn of time in this",
    "start": "1310379",
    "end": "1316080"
  },
  {
    "text": "account this is all of the instances that whoever had that IP address and it's like those kinds of things are very",
    "start": "1316080",
    "end": "1321450"
  },
  {
    "text": "useful and then showing the most recent change of security there's a bunch of different things it's",
    "start": "1321450",
    "end": "1327000"
  },
  {
    "text": "a htdp sort of query language this version that's currently up there I think is is the first version we put up",
    "start": "1327000",
    "end": "1333690"
  },
  {
    "text": "there has MongoDB behind it because that's kind of a JSON indexed database that's what the is good at",
    "start": "1333690",
    "end": "1339800"
  },
  {
    "text": "internally we're using one that's using elasticsearch and I'm not sure if we've out say we've updated the site yet I",
    "start": "1339800",
    "end": "1345420"
  },
  {
    "text": "should go check but yeah those are kind of it's a indexable search searchable",
    "start": "1345420",
    "end": "1350700"
  },
  {
    "text": "system that accumulates a bunch of JSON at you with with the new announcement",
    "start": "1350700",
    "end": "1356940"
  },
  {
    "text": "this morning of the auditing of API is that's interesting because it gives you the API who called which API it doesn't",
    "start": "1356940",
    "end": "1363450"
  },
  {
    "start": "1361000",
    "end": "1361000"
  },
  {
    "text": "and this gives you the state history so it might be interesting to cross-correlate going to look at how we",
    "start": "1363450",
    "end": "1368490"
  },
  {
    "text": "can combine editor with the the new was it cloud okay so now we want to look at",
    "start": "1368490",
    "end": "1379020"
  },
  {
    "text": "properties we have a console where you can go and say here's the scope within this region I want to set this property",
    "start": "1379020",
    "end": "1385320"
  },
  {
    "text": "to this value and in Europe I want to set it to a different value say it's an s3 bucket endpoint and I want the",
    "start": "1385320",
    "end": "1391080"
  },
  {
    "text": "European endpoints to go here and the US wants to go here so those kinds of things it's the same code it's the same",
    "start": "1391080",
    "end": "1396840"
  },
  {
    "text": "ami but I'm not baking things in and I haven't got a little XML files lurking on them on the date on the hard drive",
    "start": "1396840",
    "end": "1402690"
  },
  {
    "text": "I'm I'm dynamically loading all these properties it's a bit more sophisticated",
    "start": "1402690",
    "end": "1408780"
  },
  {
    "text": "in there it's based on this composite configuration so that there's a layer and after layer so you can put defaults",
    "start": "1408780",
    "end": "1415410"
  },
  {
    "start": "1412000",
    "end": "1412000"
  },
  {
    "text": "in there and the default sort of snack up and you've got run time is persistence the system we've got here",
    "start": "1415410",
    "end": "1423470"
  },
  {
    "text": "approach to that console I showed you this that we haven't actually got around to open sourcing it yet this one but",
    "start": "1423470",
    "end": "1432300"
  },
  {
    "text": "we'll get there this is based on this pie theus console building sort of tools tools",
    "start": "1432300",
    "end": "1437490"
  },
  {
    "text": "create the we've got and the version that's currently open sourced used a",
    "start": "1437490",
    "end": "1443490"
  },
  {
    "text": "simple DB or dynamo DB to hold all of the data but your property information because that's a trivial way of doing it",
    "start": "1443490",
    "end": "1449610"
  },
  {
    "text": "and it's one of the first things you want to bring up so you don't you want to configure your databases using this so you end",
    "start": "1449610",
    "end": "1455049"
  },
  {
    "text": "the circular dependency if you have to install a database to control a database right we use Cassandra a version of this",
    "start": "1455049",
    "end": "1463929"
  },
  {
    "text": "that uses Cassandra because we want multi-region support so we have European US kind of things so data storage lots",
    "start": "1463929",
    "end": "1475210"
  },
  {
    "text": "of options here Asgard has direct support for creating RDS my sequel",
    "start": "1475210",
    "end": "1480419"
  },
  {
    "start": "1479000",
    "end": "1479000"
  },
  {
    "text": "instances DynamoDB is a great place to start particularly if you're that",
    "start": "1480419",
    "end": "1485710"
  },
  {
    "text": "startup I was talking about at the beginning and you're starting small DynamoDB is is very simple to set up",
    "start": "1485710",
    "end": "1492369"
  },
  {
    "text": "scales up for a very low cost base like if you only are doing a very small amount of traffic it will call you if it",
    "start": "1492369",
    "end": "1497559"
  },
  {
    "text": "cost you very little and it's only when you get to enough traffic to be you know several instances worth of capacity that",
    "start": "1497559",
    "end": "1505809"
  },
  {
    "text": "Cassandra really kicks in so the sort of a cost curve for DynamoDB that's sort of a little bit steeper than Cassandra but",
    "start": "1505809",
    "end": "1512230"
  },
  {
    "text": "there's a crossover point at which it becomes worth running cassandra rather than DynamoDB and that's where you know",
    "start": "1512230",
    "end": "1518109"
  },
  {
    "text": "you've got you know more than a handful of machines in a cluster to be to keep them busy we're now at the point with we",
    "start": "1518109",
    "end": "1524019"
  },
  {
    "text": "have thousands of machines running Cassandra and 60 different clusters and 40 of them are multi region it's kind of",
    "start": "1524019",
    "end": "1529269"
  },
  {
    "text": "looking more crazy but that I think is a different talk this week so Cassandra",
    "start": "1529269",
    "end": "1535269"
  },
  {
    "text": "has this nice thing that it's now portable so you could actually have one Cassandra cluster in your data center",
    "start": "1535269",
    "end": "1541749"
  },
  {
    "text": "one on one type of cloud one in another region one another cloud it doesn't matter and it'll be replication across all of",
    "start": "1541749",
    "end": "1547299"
  },
  {
    "text": "them we're doing it currently between the East Coast and the west coast and Rosalyn will talk more about that",
    "start": "1547299",
    "end": "1552450"
  },
  {
    "text": "it also supports incremental immutable backups the way Cassandra writes to disk",
    "start": "1552450",
    "end": "1557559"
  },
  {
    "text": "it writes immutable files that don't get modified we pick those up and we put them in s3 that's how that backup to s3",
    "start": "1557559",
    "end": "1563259"
  },
  {
    "text": "thing works and Priam does that for us so Priam is the deployment automation for Cassandra so we can create a Sandra",
    "start": "1563259",
    "end": "1571149"
  },
  {
    "text": "cluster that's arbitrarily large in about ten minutes per region so you have to click a bit again different region to",
    "start": "1571149",
    "end": "1577809"
  },
  {
    "text": "set it up because we're setting it up in three zones so in 20 minutes we actually created a 200 terabyte 96 node cluster",
    "start": "1577809",
    "end": "1586809"
  },
  {
    "text": "across between Oregon and Virginia for benchmarking you know that was 20 minutes work and 20 minutes before it",
    "start": "1586809",
    "end": "1593530"
  },
  {
    "text": "was actually running and we could write stuff to it sorry not 20 minutes work it's 20 minutes the elapsed time from deciding",
    "start": "1593530",
    "end": "1598870"
  },
  {
    "text": "to do it to having it and that's because as the nodes come up priam self organizes them into a cluster this is",
    "start": "1598870",
    "end": "1606760"
  },
  {
    "text": "Priya it's a tomcat server that runs alongside Cassandra on every instance it's fully distributed there's no central master",
    "start": "1606760",
    "end": "1613059"
  },
  {
    "text": "coordination every node figures it out for itself what to do it's a s3 based backup bootstrapping token assignments",
    "start": "1613059",
    "end": "1620770"
  },
  {
    "start": "1616000",
    "end": "1616000"
  },
  {
    "text": "automated centralized configuration management it pulls out the Cassandra monitoring data and makes that available",
    "start": "1620770",
    "end": "1625929"
  },
  {
    "text": "to you easily and we put the underlying config for this in simple DB because",
    "start": "1625929",
    "end": "1632080"
  },
  {
    "text": "that's what we were using when we first did that and that will automatically let you create a Cassandra cluster in a single region because simple DB scoped",
    "start": "1632080",
    "end": "1638980"
  },
  {
    "text": "to a region and we actually have a special hand-built Cassandra cluster at Netflix which we call the turtle cluster",
    "start": "1638980",
    "end": "1644950"
  },
  {
    "text": "because of turtles all the way down you have to have something at the bobbin and that is for multi region so our global",
    "start": "1644950",
    "end": "1651250"
  },
  {
    "text": "Cassandra clusters synchronize using a special-purpose cassandra cluster that's used to coordinate all the tokens and",
    "start": "1651250",
    "end": "1657190"
  },
  {
    "text": "get stitch everything together but there's no calls across there you just start a bunch of machines with the same",
    "start": "1657190",
    "end": "1662470"
  },
  {
    "text": "cluster name in Europe as they are in the US and it says oh this is own multi-region Cassandra cluster and just",
    "start": "1662470",
    "end": "1668890"
  },
  {
    "text": "forms it it's it's very very slick okay",
    "start": "1668890",
    "end": "1674200"
  },
  {
    "start": "1673000",
    "end": "1673000"
  },
  {
    "text": "client side Aston acts at which we spell",
    "start": "1674200",
    "end": "1679300"
  },
  {
    "text": "a 6x internally a lot of the time because most was can't spell it reliably it's the son of the brother of Cassandra",
    "start": "1679300",
    "end": "1688150"
  },
  {
    "text": "is the brother of Cassandra's Hector and that was a previous version of the client library that we that this was",
    "start": "1688150",
    "end": "1693880"
  },
  {
    "text": "developed from anyway and the manager of",
    "start": "1693880",
    "end": "1698890"
  },
  {
    "text": "our database Cassandra team is actually Greek so he can pronounce all these",
    "start": "1698890",
    "end": "1704170"
  },
  {
    "text": "things correctly but we named we we took the naming scheme previous procedure to",
    "start": "1704170",
    "end": "1709510"
  },
  {
    "text": "him so this is a nice abstraction model it works really well this is one of the most popular Netflix OSS projects if you",
    "start": "1709510",
    "end": "1716590"
  },
  {
    "text": "find people using Java clients with Cassandra a large proportion of them now using a",
    "start": "1716590",
    "end": "1722880"
  },
  {
    "text": "stern axis that is the core of that it's token aware so it optimizes the calls in",
    "start": "1722880",
    "end": "1728820"
  },
  {
    "text": "to call the nodes that have the data instead of calling a random node and letting Cassandra figure it out",
    "start": "1728820",
    "end": "1734299"
  },
  {
    "text": "lots of useful recipes so let's look at the recipes this is where it really starts to get powerful what we found was",
    "start": "1734299",
    "end": "1740700"
  },
  {
    "text": "our developers were reinventing the same thing over and over again and it took them a few times to get it right each",
    "start": "1740700",
    "end": "1745740"
  },
  {
    "text": "time so listen well let's do it once let's have a distributed roam lock algorithm that is everyone uses and if",
    "start": "1745740",
    "end": "1752610"
  },
  {
    "text": "we find a bug in it there we fix it and everyone gets the fix and we're not independently reinventing these patterns",
    "start": "1752610",
    "end": "1757830"
  },
  {
    "text": "so we have rowlocks uniqueness constraints the chunked and multi-threaded large file storage means",
    "start": "1757830",
    "end": "1764220"
  },
  {
    "text": "that you could actually used Cassandra to replace s3 for things like you know multi-gigabyte sized files because",
    "start": "1764220",
    "end": "1771090"
  },
  {
    "text": "normally when you try writing a huge object into a database it blows up the one node it's trying to hash that that",
    "start": "1771090",
    "end": "1776850"
  },
  {
    "text": "token to what this does is it chunks it into lots and lots of little things so it's like if you used to s3 it's the",
    "start": "1776850",
    "end": "1782940"
  },
  {
    "text": "multi-part write multi-part read model it's that except for Cassandra with built-in multi-threading so you can",
    "start": "1782940",
    "end": "1789330"
  },
  {
    "text": "create an arbitrary large piece of data it'll spread evenly around the Cassandra cluster nodes and you can just scale it",
    "start": "1789330",
    "end": "1796320"
  },
  {
    "text": "up works very well durable message queue is another one that we wanted some behavior that was a",
    "start": "1796320",
    "end": "1802440"
  },
  {
    "text": "little different to sqs like you can build a queue here that never throws anything away because sq has a tie now",
    "start": "1802440",
    "end": "1807720"
  },
  {
    "text": "you know after a while some period of time your data will disappear if you don't want that to happen you can build",
    "start": "1807720",
    "end": "1813659"
  },
  {
    "text": "a durable message queue with whatever syntax you want so we built that but there's a few patterns that you run into",
    "start": "1813659",
    "end": "1819809"
  },
  {
    "text": "to do with tombstones and things that you have to record okay",
    "start": "1819809",
    "end": "1825720"
  },
  {
    "text": "the Eevee cache I've mentioned as well so this is memcache D in the backend and then we have this little thing on the",
    "start": "1825720",
    "end": "1832049"
  },
  {
    "text": "side which is managing talking to Eureka and this and declaring that it's there so that's the service side but the the",
    "start": "1832049",
    "end": "1839580"
  },
  {
    "text": "EB cache servers but then from the client side code what we published is something that you would use as a",
    "start": "1839580",
    "end": "1845309"
  },
  {
    "text": "developer and you say I just want to remember this thing here's the key here's the value I just want to store it the way you set",
    "start": "1845309",
    "end": "1852149"
  },
  {
    "text": "up a particular cache the UV cash library will automatically replicate that data for you to three",
    "start": "1852149",
    "end": "1858470"
  },
  {
    "text": "zones so now I've got three 3mm caches one per zone and when you do a lookup it",
    "start": "1858470",
    "end": "1864320"
  },
  {
    "text": "will look in the current zone so you get low latency requests there's no cross zone traffic for memcache because your",
    "start": "1864320",
    "end": "1870619"
  },
  {
    "text": "data is right there but when you do writes which are usually less frequent you you write across region now it's not",
    "start": "1870619",
    "end": "1877190"
  },
  {
    "text": "it's the eccentric volatile cache or the ephemeral volatile cache for Evie",
    "start": "1877190",
    "end": "1883419"
  },
  {
    "text": "there's no consistency guarantees here for write files you know the data isn't there but it",
    "start": "1883419",
    "end": "1889039"
  },
  {
    "text": "works this is for in memory session state kind of things that are that are pretty quick and if you really care",
    "start": "1889039",
    "end": "1895159"
  },
  {
    "text": "about the stuff arriving and being more consistent then you use Cassandra with its various quorum modes to get the",
    "start": "1895159",
    "end": "1901190"
  },
  {
    "text": "reliable read and write so that's that now I'm gonna switch over to Rosalyn",
    "start": "1901190",
    "end": "1908269"
  },
  {
    "text": "it's going to talk about routing customers to code and take us on out okay all right so you build up all this",
    "start": "1908269",
    "end": "1920210"
  },
  {
    "text": "infrastructure eventually you're gonna have to fill fulfill customer requests and let's talk about routing your",
    "start": "1920210",
    "end": "1926809"
  },
  {
    "text": "customer traffic layer by layer it all starts with DNS now DNS you typically",
    "start": "1926809",
    "end": "1932629"
  },
  {
    "text": "have couple of uses of DNS one you want to query the DNS information and two you want to control it and in order to",
    "start": "1932629",
    "end": "1940159"
  },
  {
    "text": "control it you typically go to your DNS providers UI console and you have to do",
    "start": "1940159",
    "end": "1945259"
  },
  {
    "text": "some voodoo magic incantations in order to make things work and the specific",
    "start": "1945259",
    "end": "1950629"
  },
  {
    "text": "voodoo depends on your specific DNS providers and so what we build we build",
    "start": "1950629",
    "end": "1955940"
  },
  {
    "text": "this denominator library that actually abstracts you away from your provider specific implementation it currently",
    "start": "1955940",
    "end": "1962539"
  },
  {
    "text": "supports various providers including AWS route 53 ultra DNS dying and it allows",
    "start": "1962539",
    "end": "1969649"
  },
  {
    "text": "you to do was your read and write operations in a very clean either man line or API API way and this way",
    "start": "1969649",
    "end": "1978780"
  },
  {
    "start": "1971000",
    "end": "1971000"
  },
  {
    "text": "no matter who you use or if you decide to switch you still use the very same interface and basically all of your",
    "start": "1978780",
    "end": "1984720"
  },
  {
    "text": "developers and your organization's can do it you don't need a specialist in order to perform such operation at",
    "start": "1984720",
    "end": "1990990"
  },
  {
    "text": "Netflix we actually use the nominator library for resiliency purposes as well we don't want dns to be our single point",
    "start": "1990990",
    "end": "1997919"
  },
  {
    "text": "of failure and so if we need to make a changes in either one of these in case of any type of certainly drastic failure",
    "start": "1997919",
    "end": "2006919"
  },
  {
    "text": "if we need to make DNS change we use the library in order to enact such changes in this diagram you see that the next",
    "start": "2006919",
    "end": "2014690"
  },
  {
    "text": "layer down is our dual API outer and what it really is dual is a very scalable very robust",
    "start": "2014690",
    "end": "2021400"
  },
  {
    "start": "2018000",
    "end": "2018000"
  },
  {
    "text": "smart routing layer and it's got fairly complex execution engine inside you're",
    "start": "2021400",
    "end": "2027590"
  },
  {
    "text": "able to apply dynamically create a dynamically executed groovy script as a",
    "start": "2027590",
    "end": "2033440"
  },
  {
    "text": "pre and post filters what it means is that before your request is handled you",
    "start": "2033440",
    "end": "2038780"
  },
  {
    "text": "can apply certain filter based on certain criteria during the execution you can apply a certain filter and post",
    "start": "2038780",
    "end": "2044480"
  },
  {
    "text": "execution you can do the same and we use the smart routing layer for many many purposes definitely for resiliency",
    "start": "2044480",
    "end": "2051648"
  },
  {
    "text": "purposes we have a talk later today on that we use it to try and X very very",
    "start": "2051649",
    "end": "2057919"
  },
  {
    "text": "rapid iterations of experimentation for very quick tweaks to UI and user",
    "start": "2057919",
    "end": "2063020"
  },
  {
    "text": "experience this way we don't actually have to do full releases and code pushes our UI UI designers can very quickly",
    "start": "2063020",
    "end": "2070220"
  },
  {
    "text": "write a script at full tweak the behavior just right and then see what what the results are so this is we'll",
    "start": "2070220",
    "end": "2078560"
  },
  {
    "text": "definitely learn more about it at one of our later talks next layer down",
    "start": "2078560",
    "end": "2084169"
  },
  {
    "text": "is your client server communication now as your startup grows and especially if",
    "start": "2084169",
    "end": "2090138"
  },
  {
    "start": "2089000",
    "end": "2089000"
  },
  {
    "text": "you embrace this server service-oriented architecture you're going to develop tens perhaps",
    "start": "2090139",
    "end": "2095388"
  },
  {
    "text": "hundreds of different applications the most important part of client-server communication is that all your",
    "start": "2095389",
    "end": "2101150"
  },
  {
    "text": "applications talk the same language otherwise you're going to have a fairly nested situation in your hands if",
    "start": "2101150",
    "end": "2106700"
  },
  {
    "text": "application a talks application be using one method that application be talks the application see using another and so on and so far it's",
    "start": "2106700",
    "end": "2114410"
  },
  {
    "text": "pretty soon you're gonna get into pretty unmanageable situation where if your application a he stopped two",
    "start": "2114410",
    "end": "2120200"
  },
  {
    "text": "applications II now I needs to learn a brand new language or even worse if you want to start developing a new",
    "start": "2120200",
    "end": "2125510"
  },
  {
    "text": "application that depends on for others you have to learn four different languages how to speak to them and so we",
    "start": "2125510",
    "end": "2130730"
  },
  {
    "text": "definitely don't want that we want a common client-server communication mechanism and this is what ribbon library is for all of our applications",
    "start": "2130730",
    "end": "2138440"
  },
  {
    "text": "talk talk to each other using the ribbon library and in addition to providing a common interface it also provides a",
    "start": "2138440",
    "end": "2144620"
  },
  {
    "text": "common expected behavior for such client-server communications it allows you to to know what to expect if you are",
    "start": "2144620",
    "end": "2151370"
  },
  {
    "text": "getting errors timeouts etc it also comes with variety of load balancers",
    "start": "2151370",
    "end": "2156920"
  },
  {
    "text": "built in it uses eureka system to get the view of the world and then use that view of the world to balance the",
    "start": "2156920",
    "end": "2163340"
  },
  {
    "text": "requests appropriately one of the most useful balancers that we use internally is called zone a very load balancer now",
    "start": "2163340",
    "end": "2170270"
  },
  {
    "text": "zone of a load balancer I want to make it clear it's not the same as though affinity it's very natural for you to",
    "start": "2170270",
    "end": "2175880"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "feel that if my instance of application a is in zone a I want a call to my",
    "start": "2175880",
    "end": "2181640"
  },
  {
    "text": "dependency in zone a as well and that's all fine and great when your dependency",
    "start": "2181640",
    "end": "2186650"
  },
  {
    "text": "works however let's say your dependency server suddenly become unresponsive it's",
    "start": "2186650",
    "end": "2193130"
  },
  {
    "text": "writing garbage collection or otherwise erroring out what's going to happen if",
    "start": "2193130",
    "end": "2199250"
  },
  {
    "text": "you use just peers of an affinity you just going to throw more and more and more load to the cluster that's already",
    "start": "2199250",
    "end": "2204440"
  },
  {
    "text": "becoming a healthy especially if you have very aggressive retry policy so",
    "start": "2204440",
    "end": "2209930"
  },
  {
    "text": "zone aware load balancer takes the health of your dependencies individual zones into account and so it's gonna",
    "start": "2209930",
    "end": "2216740"
  },
  {
    "text": "it's gonna throw more traffic towards the zones that are more healthy and less traffic towards the zone that are less",
    "start": "2216740",
    "end": "2222860"
  },
  {
    "text": "healthy and we've proven that this load balancer works really well in our chaos",
    "start": "2222860",
    "end": "2228110"
  },
  {
    "text": "gorilla situations where we take out the whole zone I will talk more about it a little bit later on the server side the",
    "start": "2228110",
    "end": "2236210"
  },
  {
    "start": "2234000",
    "end": "2234000"
  },
  {
    "text": "common server side component is carry on again start in start-up life you always",
    "start": "2236210",
    "end": "2242690"
  },
  {
    "text": "fighting against time you always need to deliver a feature you always need to get the next round of funding you don't want",
    "start": "2242690",
    "end": "2248690"
  },
  {
    "text": "your developers spending time writing boilerplate code over and over and over again and so what Korean allows you to",
    "start": "2248690",
    "end": "2255740"
  },
  {
    "text": "do is takes care of all these common pieces of infrastructure for you on the server side so if you're a developer you",
    "start": "2255740",
    "end": "2261319"
  },
  {
    "text": "need to develop a new service and you start with a Korean internally known as base server because everything for us is",
    "start": "2261319",
    "end": "2266660"
  },
  {
    "text": "based on that it takes care of really basic things for you it does all the bootstrapping dependency and life's like",
    "start": "2266660",
    "end": "2272780"
  },
  {
    "text": "lifecycle management it connects to service registry it lasts Eureka now that exists it connects through to our",
    "start": "2272780",
    "end": "2281540"
  },
  {
    "text": "case through the property and allows you to manage it via the property console it has hooks for monkey testing which is",
    "start": "2281540",
    "end": "2288170"
  },
  {
    "text": "the funnest part and it also has an already pre-configured Status page for its status information health check",
    "start": "2288170",
    "end": "2294890"
  },
  {
    "text": "services configuration etc so all of the things that are typically you need to implement for whatever service you do it",
    "start": "2294890",
    "end": "2301490"
  },
  {
    "text": "already has so this is an example of its status page it shows you its environment",
    "start": "2301490",
    "end": "2308450"
  },
  {
    "text": "shows its eureka metadata information even exposes the jmx console the best",
    "start": "2308450",
    "end": "2313880"
  },
  {
    "text": "bit especially for the developers that are getting used to the SOA it comes with its own very small hello world",
    "start": "2313880",
    "end": "2320119"
  },
  {
    "text": "application and so what you can do you can just take that as a start start modifying hello world you off to the",
    "start": "2320119",
    "end": "2326660"
  },
  {
    "text": "races now even in a start up",
    "start": "2326660",
    "end": "2331810"
  },
  {
    "text": "availability is very important and that Netflix will definitely take availability very seriously our internal",
    "start": "2331810",
    "end": "2337369"
  },
  {
    "text": "goal is to have four nines of availability which if you do the math leaves you less than 53 minutes of",
    "start": "2337369",
    "end": "2343329"
  },
  {
    "text": "downtime for a year so in order to ensure that your system is available you",
    "start": "2343329",
    "end": "2350150"
  },
  {
    "text": "have to break it the choice is yours no matter how much you test either users",
    "start": "2350150",
    "end": "2355849"
  },
  {
    "text": "will break it or you do it yourself and again the choice is yours do you want a system to break a three o'clock",
    "start": "2355849",
    "end": "2361910"
  },
  {
    "text": "in the morning on Saturday when hardly anybody is available or at least in the right state of mind or do you want to do",
    "start": "2361910",
    "end": "2367579"
  },
  {
    "text": "it Monday through Friday 9:00 to 3:00 this is where simian army built a variety of monkeys probably the",
    "start": "2367579",
    "end": "2374020"
  },
  {
    "text": "most famous member of the army scarce monkey and it does what exactly exactly",
    "start": "2374020",
    "end": "2379990"
  },
  {
    "text": "what a name seems to say it kills instances at random each of our",
    "start": "2379990",
    "end": "2385150"
  },
  {
    "text": "application owners can configure it how aggressively or conservatively it wants instances of its application to be",
    "start": "2385150",
    "end": "2391660"
  },
  {
    "text": "killed but Monday through Friday at random because we don't want people to prepare for it instances will die and we want to make",
    "start": "2391660",
    "end": "2398680"
  },
  {
    "text": "sure that our application service groups are resilient to that that new instance just gonna spin up that there is no",
    "start": "2398680",
    "end": "2404680"
  },
  {
    "text": "state that crept up into the system and user doesn't even notice now initially",
    "start": "2404680",
    "end": "2410380"
  },
  {
    "text": "we were running chaos monkey only on our status applications because it that's the easiest state is hard as recently as",
    "start": "2410380",
    "end": "2416980"
  },
  {
    "text": "last months we actually enabled chaos monkey to run our Cassandra clusters and it runs in test and production I just",
    "start": "2416980",
    "end": "2424510"
  },
  {
    "text": "want to make it clear it runs Monday through Friday it kills our stateful instances and it works especially if you",
    "start": "2424510",
    "end": "2435160"
  },
  {
    "text": "run fast you can accumulate some garbage you can run a quick experiment you're",
    "start": "2435160",
    "end": "2440770"
  },
  {
    "text": "going to forget that instance or a cluster that you created there you're going to create a whole bunch of data on s3 or pump it into SQS and you're gonna",
    "start": "2440770",
    "end": "2448120"
  },
  {
    "text": "leave it there because your mind is gonna be preoccupied what's what's next you need to deploy you need to experiment need to troubleshoot over",
    "start": "2448120",
    "end": "2453970"
  },
  {
    "text": "time garbage will accumulate and garbage will contribute to your bottom coastline for that we have janitor monkey it",
    "start": "2453970",
    "end": "2461620"
  },
  {
    "text": "automatically finds and either loads automatically recycles unused instances",
    "start": "2461620",
    "end": "2466990"
  },
  {
    "text": "aSG's a.m. eyes etc we find it incredibly useful this way our developers don't have to spend any time",
    "start": "2466990",
    "end": "2473590"
  },
  {
    "text": "doing the cleanup that automation can conformity monkey is another member of",
    "start": "2473590",
    "end": "2479740"
  },
  {
    "text": "our simian army it's arguably also extremely useful it finds an alert or",
    "start": "2479740",
    "end": "2486790"
  },
  {
    "start": "2484000",
    "end": "2484000"
  },
  {
    "text": "sometimes auto corrects discrepancies between different versions of your applications a mais configuration",
    "start": "2486790",
    "end": "2494830"
  },
  {
    "text": "sometimes different configuration aren't purpose for example many of our SJS g's are configured to read from different",
    "start": "2494830",
    "end": "2501280"
  },
  {
    "text": "three or Cassandre in EU versus in us however sometimes it's unintentional",
    "start": "2501280",
    "end": "2506890"
  },
  {
    "text": "sometimes you meant to deploy the same piece of code in in two regions and yet",
    "start": "2506890",
    "end": "2512470"
  },
  {
    "text": "somehow one of the deployments fail without your knowledge conformity monkey will detect such",
    "start": "2512470",
    "end": "2518410"
  },
  {
    "text": "discrepancy and will alert you if you're running two different versions of the of the same application unintentionally and",
    "start": "2518410",
    "end": "2523960"
  },
  {
    "text": "then you can either take corrective action or reconfigure the monkey to actually do the corrective action for you now at Netflix our motto motto is",
    "start": "2523960",
    "end": "2532870"
  },
  {
    "text": "fail fast recover fast and this is where hystrix circuit breaker library comes in really really handy this is a diagram of",
    "start": "2532870",
    "end": "2540520"
  },
  {
    "start": "2535000",
    "end": "2535000"
  },
  {
    "text": "our api service and it's dependent at the time I think it was dependent on 17 other services in turn each of those 17",
    "start": "2540520",
    "end": "2548650"
  },
  {
    "text": "other services but it was dependent on others now if you think that each of those services provides you with 99%",
    "start": "2548650",
    "end": "2554700"
  },
  {
    "text": "availability but then you multiply all of them together overall that doesn't",
    "start": "2554700",
    "end": "2559960"
  },
  {
    "text": "look very good if you have enough dependencies your overall availability is going to be low double-digit",
    "start": "2559960",
    "end": "2565630"
  },
  {
    "text": "sometimes single digits that's completely unacceptable and so what you want to do is to architect your system",
    "start": "2565630",
    "end": "2571570"
  },
  {
    "text": "in such a way that your applications are isolated and protected that any one or multiple service dependency failure will",
    "start": "2571570",
    "end": "2579700"
  },
  {
    "text": "not result in a loss of user of quality experience and that's exactly what hystrix library allows you to do if we",
    "start": "2579700",
    "end": "2587830"
  },
  {
    "text": "dissect in a little bit more detail for each of your dependency calls which you inherently cannot trust you're able to",
    "start": "2587830",
    "end": "2594130"
  },
  {
    "text": "decide whether such call is synchronous or asynchronous you are able to decide what to do in a case of failure will you",
    "start": "2594130",
    "end": "2601660"
  },
  {
    "start": "2600000",
    "end": "2600000"
  },
  {
    "text": "just propagate the error up will you retry it in that case what's your retry timeout and how many or will you provide",
    "start": "2601660",
    "end": "2608950"
  },
  {
    "text": "a fallback experience and you're able to do it at granularity for each of those calls and together with a ribbon library",
    "start": "2608950",
    "end": "2615520"
  },
  {
    "text": "this is a very powerful tool because as you create a new dependency you just",
    "start": "2615520",
    "end": "2620830"
  },
  {
    "text": "wrap it in a history circuit breaker and that's it you are protected from that new dependency failure you don't need to",
    "start": "2620830",
    "end": "2626440"
  },
  {
    "text": "go and figure out all possible corner cases that this managed written together with a history library",
    "start": "2626440",
    "end": "2633190"
  },
  {
    "start": "2632000",
    "end": "2632000"
  },
  {
    "text": "we actually open source that turbine dashboard it's a real-time view into your service health and its dependencies",
    "start": "2633190",
    "end": "2640810"
  },
  {
    "text": "you will see such information as the volume of the calls that you sending to dependencies just in case if you're",
    "start": "2640810",
    "end": "2646420"
  },
  {
    "text": "having a thundering heard going through you will see the relative health you will see which circuit breakers that are",
    "start": "2646420",
    "end": "2651430"
  },
  {
    "text": "open which ones are closed and you can very quickly figure out how how your system is healthy overall all of this",
    "start": "2651430",
    "end": "2659140"
  },
  {
    "text": "together provides really powerful tools to improve transparency first of all and",
    "start": "2659140",
    "end": "2664720"
  },
  {
    "text": "then improve your availability once you start using them again in a startup life",
    "start": "2664720",
    "end": "2670930"
  },
  {
    "text": "time is precious and so what you really want to do is maximize your developers time focusing in your application and",
    "start": "2670930",
    "end": "2677020"
  },
  {
    "text": "nothing else and so any tools that improve developer productivity are a",
    "start": "2677020",
    "end": "2682570"
  },
  {
    "text": "godsend now tell me if that happened to you ever you have a system running in",
    "start": "2682570",
    "end": "2688480"
  },
  {
    "text": "production suddenly part of a whole of that system become unhealthy one of your developers says not a problem I'll",
    "start": "2688480",
    "end": "2694960"
  },
  {
    "start": "2689000",
    "end": "2689000"
  },
  {
    "text": "enable debug logging and we'll figure out what's going on and by virtue of to enabling debug logging brings the whole",
    "start": "2694960",
    "end": "2701349"
  },
  {
    "text": "system down because the increased load that debug generated basically took the",
    "start": "2701349",
    "end": "2706390"
  },
  {
    "text": "system over the tipping point we had a few of those and so we developed blitz for J on top of look for j2 to make the",
    "start": "2706390",
    "end": "2714880"
  },
  {
    "text": "looking better and more asynchronous what bliss for J does it does better handling of the messages during the",
    "start": "2714880",
    "end": "2720310"
  },
  {
    "text": "storms exactly during the times when you need those log messages when you need to see them it replaces all the synchronous",
    "start": "2720310",
    "end": "2726790"
  },
  {
    "text": "operations in locks or J with a more appropriate and current data structures that you can call asynchronously it",
    "start": "2726790",
    "end": "2734170"
  },
  {
    "text": "provides you with extreme configurability at runtime you're able to change the appenders modify records",
    "start": "2734170",
    "end": "2740440"
  },
  {
    "text": "patterns as you see fit and most importantly it isolates your application threads from the logging threads so even",
    "start": "2740440",
    "end": "2747369"
  },
  {
    "text": "if they in a event were you sending obscene amount of information to the logging and there is a backlog your application performance will not be",
    "start": "2747369",
    "end": "2753190"
  },
  {
    "text": "affected anybody who ever developed in Java knows that at some point or another",
    "start": "2753190",
    "end": "2760240"
  },
  {
    "start": "2759000",
    "end": "2759000"
  },
  {
    "text": "you're gonna have to deal with which collection at some point your memory footprint will be large enough that your garbage collection will no",
    "start": "2760240",
    "end": "2766799"
  },
  {
    "text": "longer be unnoticeable and for such situations we developed a garbage collection visualizer or GC vis we find",
    "start": "2766799",
    "end": "2774779"
  },
  {
    "text": "it extremely convenient many where a system runs with tens or high tens gigabytes of memory and so we don't in",
    "start": "2774779",
    "end": "2783539"
  },
  {
    "text": "any of our systems we don't want to stop the world type of garbage collection and so what G series allows you to do is",
    "start": "2783539",
    "end": "2788849"
  },
  {
    "text": "very quickly channel fairly row and detail and really non human eye readable",
    "start": "2788849",
    "end": "2796009"
  },
  {
    "text": "JVM information into such graphs and then what you can do is very quickly iterate ok if I make this configuration",
    "start": "2796009",
    "end": "2803789"
  },
  {
    "text": "change to JVM or if I make this code change to my application how does my GGC profile change you can very quickly",
    "start": "2803789",
    "end": "2811109"
  },
  {
    "text": "figure out the causality what actually causes your GC issues you very very",
    "start": "2811109",
    "end": "2816420"
  },
  {
    "text": "quickly can iterate and get clarity of what's going on fix the issue and move on now most of a time developer work on",
    "start": "2816420",
    "end": "2825559"
  },
  {
    "text": "production systems on something that's user facing fulfills user needs some",
    "start": "2825559",
    "end": "2831779"
  },
  {
    "text": "part of the time they have to spend developing tooling so they can actually get inside and perhaps operational",
    "start": "2831779",
    "end": "2837359"
  },
  {
    "text": "insight or data insight into the applications that they actually develop what we found is that without good",
    "start": "2837359",
    "end": "2844799"
  },
  {
    "text": "framework each developer each team would end up creating their own set of tooling sometimes that will overlap sometimes",
    "start": "2844799",
    "end": "2851130"
  },
  {
    "text": "that would be duplication of work and so that's why we created this framework called Pathak paisius it's another Greek",
    "start": "2851130",
    "end": "2857339"
  },
  {
    "text": "name for some famous Greek explorer apparently it's a tooling framework and",
    "start": "2857339",
    "end": "2862470"
  },
  {
    "text": "it's also based on a whole bunch of other open-source components such as Jews and Jersey and d3 that allows you",
    "start": "2862470",
    "end": "2869609"
  },
  {
    "text": "very quickly this very minimal effort create really powerful dashboards this example that you see here is one of our",
    "start": "2869609",
    "end": "2875819"
  },
  {
    "text": "dashboards for Cassandra clusters this way we can actually get a unified view of 60-some clusters throughout all at",
    "start": "2875819",
    "end": "2881730"
  },
  {
    "text": "the same time we can see their health we can see whether we're running any maintenance operations repairs compactions doubling etc the same",
    "start": "2881730",
    "end": "2890460"
  },
  {
    "text": "framework allows you to create very quickly your data insight for example if you want to explore data",
    "start": "2890460",
    "end": "2896490"
  },
  {
    "text": "adjuster into a three or simple DB or Cassandra or you want to create a really powerful entry forms for example rks the",
    "start": "2896490",
    "end": "2904380"
  },
  {
    "text": "configuration management console was created in literally minutes using this framework so we find this the framework",
    "start": "2904380",
    "end": "2912210"
  },
  {
    "text": "very useful because you never know when you're going to need to create a new tool might as well get something that works for you and really really fast",
    "start": "2912210",
    "end": "2920210"
  },
  {
    "text": "functional reactive programming is the programming paradigm that's really been gaining popularity many of our",
    "start": "2920420",
    "end": "2928230"
  },
  {
    "text": "developers were inspired by work done at Microsoft by Eric Meyer creating original version of our X and c-sharp",
    "start": "2928230",
    "end": "2933960"
  },
  {
    "start": "2929000",
    "end": "2929000"
  },
  {
    "text": "and so they created an open sourced rx Java which is the Java you can also use",
    "start": "2933960",
    "end": "2939720"
  },
  {
    "text": "it in Scala version of the functional reactive approach if you've done multi-threaded",
    "start": "2939720",
    "end": "2944880"
  },
  {
    "text": "concurrent programming you know that it's very easy to get to a situation where you actually lose data consistency",
    "start": "2944880",
    "end": "2950609"
  },
  {
    "text": "or you get yourself in a deadlock situation functional reactive takes a much simpler approach to concurrency it",
    "start": "2950609",
    "end": "2958500"
  },
  {
    "text": "using observable pattern to create a single state upon which you that you can",
    "start": "2958500",
    "end": "2964230"
  },
  {
    "text": "create higher-level objects for composition but it all inherently concurrent and then you can you you can",
    "start": "2964230",
    "end": "2970890"
  },
  {
    "text": "really specify things like when when you have a call into observable do you can do return from a cache do you go to and",
    "start": "2970890",
    "end": "2978140"
  },
  {
    "text": "remote resource and all of that instead",
    "start": "2978140",
    "end": "2983640"
  },
  {
    "text": "of using your familiar threads and multi-threading and locking all that fun is Adrienne mentioned you know Big Data",
    "start": "2983640",
    "end": "2995310"
  },
  {
    "text": "is a hot topic these days but really even if you're a small start-up very soon you're gonna accumulate enough data",
    "start": "2995310",
    "end": "3000800"
  },
  {
    "text": "that you'll want to analyze very typically that's done using Hadoop MapReduce or similar tools you may be",
    "start": "3000800",
    "end": "3009260"
  },
  {
    "start": "3007000",
    "end": "3007000"
  },
  {
    "text": "running EMR on Amazon you may be running combination of Hadoop clusters at Netflix we always constantly run some",
    "start": "3009260",
    "end": "3014810"
  },
  {
    "text": "sort of analytics jobs now for the people who you want to analyze data you",
    "start": "3014810",
    "end": "3021260"
  },
  {
    "text": "don't want them to become Hadoop experts in per se right they just want to send the queries and the",
    "start": "3021260",
    "end": "3027150"
  },
  {
    "text": "to get their data they shouldn't care how many clusters you're running underneath is one cluster healthy one",
    "start": "3027150",
    "end": "3033480"
  },
  {
    "text": "cluster and healthy they shouldn't care how big the cluster is and for that purpose we created geni which is our",
    "start": "3033480",
    "end": "3039390"
  },
  {
    "text": "Hadoop as a service and it abstracts not just to do but also hive and big big",
    "start": "3039390",
    "end": "3045150"
  },
  {
    "text": "jobs it obstructs it with one very simple API and this data API you're able",
    "start": "3045150",
    "end": "3052650"
  },
  {
    "text": "to submit your job schedule your job to run at certain point in time and get",
    "start": "3052650",
    "end": "3059100"
  },
  {
    "text": "your results without actually and needing to understand how this infrastructure look underneath and that",
    "start": "3059100",
    "end": "3065130"
  },
  {
    "text": "frees up the people who run analytics to only care about analytics really focus on their core competency of their job",
    "start": "3065130",
    "end": "3072510"
  },
  {
    "text": "without being distracted by all mechanics and journeys similarly a pig is a very popular query language for",
    "start": "3072510",
    "end": "3079920"
  },
  {
    "start": "3076000",
    "end": "3076000"
  },
  {
    "text": "Hadoop they applied some lipstick to it and whatever it is it's basically a really powerful visualization on top of",
    "start": "3079920",
    "end": "3087480"
  },
  {
    "text": "some super complex big queries what we got to the point where some of the big words that our analytics people needed",
    "start": "3087480",
    "end": "3094530"
  },
  {
    "text": "to run for multi-page very very complex structured code it was just impossible",
    "start": "3094530",
    "end": "3099960"
  },
  {
    "text": "to maintain and debug business world is visualization it's a very intuitive and you can very quickly find inefficiencies",
    "start": "3099960",
    "end": "3106980"
  },
  {
    "text": "or errors in your big queries before you actually had to go and run 24 hour job",
    "start": "3106980",
    "end": "3112500"
  },
  {
    "text": "just to find out that the data out was garbage all right so these are most of",
    "start": "3112500",
    "end": "3120060"
  },
  {
    "text": "the components that we open-source so far and some of them may be easier to adapt than the others but how do you put",
    "start": "3120060",
    "end": "3125370"
  },
  {
    "text": "the whole thing together how do you make it work for you there are several applications that provide you with a blueprint makes it much easier to start",
    "start": "3125370",
    "end": "3131820"
  },
  {
    "text": "one we open-source the sample application of RSS reader it's fairly",
    "start": "3131820",
    "end": "3136860"
  },
  {
    "start": "3132000",
    "end": "3132000"
  },
  {
    "text": "simple but don't let simplicity fool you it actually pulls in a lot of the complex infrastructure together and show",
    "start": "3136860",
    "end": "3143250"
  },
  {
    "text": "you how it interacts in a fully functional application it uses eureka service to tell where the services are",
    "start": "3143250",
    "end": "3150120"
  },
  {
    "text": "it uses Arceus to do the configuration it uses hystrix to provide availability and resiliency against",
    "start": "3150120",
    "end": "3156619"
  },
  {
    "text": "dependency failures are in and so on and so forth it's probably the best project",
    "start": "3156619",
    "end": "3161990"
  },
  {
    "text": "to start on if you just ramping up on Netflix open source components it's gonna give you step-by-step entry points",
    "start": "3161990",
    "end": "3170750"
  },
  {
    "text": "into understanding how the whole ecosystem really works there are a couple of others that were created by third parties one was created by Chris",
    "start": "3170750",
    "end": "3177950"
  },
  {
    "text": "frag Lee who used to work at Netflix it's called flux capacitor and it's a great mashup application that uses",
    "start": "3177950",
    "end": "3183260"
  },
  {
    "text": "pretty much everything that we open-source so far but we open-source something new he incorporated it into a",
    "start": "3183260",
    "end": "3188420"
  },
  {
    "text": "flux so again it's sometimes just you want to give a snippet of how to use a",
    "start": "3188420",
    "end": "3193970"
  },
  {
    "text": "component that's one great example another good example was made by IBM so",
    "start": "3193970",
    "end": "3199130"
  },
  {
    "text": "they had this fake airline reservation application called Acme Air and what they've done they've substituted a lot",
    "start": "3199130",
    "end": "3205400"
  },
  {
    "text": "of in-house build components with a Netflix OSS once and then they run a whole bunch of benchmarks to show how it",
    "start": "3205400",
    "end": "3211640"
  },
  {
    "text": "scales and for us everything has to scale to a web scale because we handle pretty insane amount of traffic from",
    "start": "3211640",
    "end": "3216890"
  },
  {
    "text": "time to time and so again that's that's an interesting application with some some good use cases of many of our",
    "start": "3216890",
    "end": "3223640"
  },
  {
    "text": "components you should go and check it out we don't we don't ask people who use",
    "start": "3223640",
    "end": "3231079"
  },
  {
    "text": "it to tell us that they use it it's all free available and github some companies get back to us and actually thanked us",
    "start": "3231079",
    "end": "3236329"
  },
  {
    "text": "for open sourcing some of these components and these are some of the companies that actually wanted to have",
    "start": "3236329",
    "end": "3241430"
  },
  {
    "text": "their logo on our open source site might find some of these logos familiar so in",
    "start": "3241430",
    "end": "3248299"
  },
  {
    "text": "takeaway startup is always fighting against time your velocity and your",
    "start": "3248299",
    "end": "3254450"
  },
  {
    "text": "agility is your advantage you can use netflix open source components to make your startup scale go",
    "start": "3254450",
    "end": "3261740"
  },
  {
    "text": "faster or actually reinvent your your enterprise we definitely want to hear",
    "start": "3261740",
    "end": "3267230"
  },
  {
    "text": "from you if you use it what you think of it we do encourage you to contribute to it we hope that together we can build an",
    "start": "3267230",
    "end": "3273680"
  },
  {
    "text": "ecosystem that will strengthen all of these make them evolve and everybody it's from that you can stop by our",
    "start": "3273680",
    "end": "3281480"
  },
  {
    "text": "boasted enough the at the show floor and if you want to talk talk to us about any specific components if you like this",
    "start": "3281480",
    "end": "3288530"
  },
  {
    "text": "talk we actually have a whole bunch of more Netflix talks happening today tomorrow and Friday we're going to be",
    "start": "3288530",
    "end": "3295040"
  },
  {
    "text": "talking about the Big Data multi-regional resiliency monitoring at",
    "start": "3295040",
    "end": "3300260"
  },
  {
    "text": "Netflix kale and a whole bunch of other things so encourage you to check it out alright so on behalf of all Netflix team",
    "start": "3300260",
    "end": "3307820"
  },
  {
    "text": "that participated in an open sourcing I want to thank you and we are looking to",
    "start": "3307820",
    "end": "3313010"
  },
  {
    "text": "your feedback",
    "start": "3313010",
    "end": "3315310"
  }
]