[
  {
    "start": "0",
    "end": "13000"
  },
  {
    "text": "my name is Marco and I'm here to talk to you about server less computing so let's",
    "start": "3760",
    "end": "10269"
  },
  {
    "text": "take a look at the evolution of cloud computing towards serverless systems it all started when ADA police was born",
    "start": "10269",
    "end": "17170"
  },
  {
    "start": "13000",
    "end": "13000"
  },
  {
    "text": "2006 now 10 years ago so with the public cloud you have the ability with Amazon",
    "start": "17170",
    "end": "23440"
  },
  {
    "text": "ec2 Elastic Compute cloud to provision any number of virtual servers in minutes",
    "start": "23440",
    "end": "28779"
  },
  {
    "text": "you can deploy one you can deploy a thousand like Netflix 50,000 of them pay",
    "start": "28779",
    "end": "34149"
  },
  {
    "text": "by the hour and remember to get rid of them when you don't need them with",
    "start": "34149",
    "end": "40030"
  },
  {
    "text": "virtual servers running on ec2 you install your application in the server",
    "start": "40030",
    "end": "45280"
  },
  {
    "text": "this may sound normal but that's how you do it's over it so server still requires",
    "start": "45280",
    "end": "50559"
  },
  {
    "text": "you to manage your server as you do so you run your applications there if you",
    "start": "50559",
    "end": "56920"
  },
  {
    "text": "need more capacity well it's a better idea to deploy more service than to run different pieces of code two totally",
    "start": "56920",
    "end": "63549"
  },
  {
    "text": "different things on the same server make it confusing at some point and then containers came along so now a couple of",
    "start": "63549",
    "end": "70030"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "years ago docker made container technology really popular well containers were there in the linux",
    "start": "70030",
    "end": "76030"
  },
  {
    "text": "kernel already earlier nobody knew how to use them so doko made it easy",
    "start": "76030",
    "end": "82200"
  },
  {
    "text": "containers are really nice and cool because what you can do is you can slice and dice those easy two instances even",
    "start": "82200",
    "end": "89110"
  },
  {
    "text": "smaller even more granular to get an even better utilization of your ec2",
    "start": "89110",
    "end": "94930"
  },
  {
    "text": "instances you still have your pool of easy to capacity your server pool but it's trivial 20 to scale the number of",
    "start": "94930",
    "end": "102370"
  },
  {
    "text": "easy two instances in your dacha pool with auto scaling for example and then",
    "start": "102370",
    "end": "108100"
  },
  {
    "text": "the docker containers can fully utilize the resources available on ec2 instances like number of CPU cores some other",
    "start": "108100",
    "end": "116470"
  },
  {
    "text": "benefits of containers they spin up really quickly in less than a second typically and then there's the immutable",
    "start": "116470",
    "end": "124210"
  },
  {
    "text": "infrastructure so that's really important with docker containers the same exact binaries dependencies and",
    "start": "124210",
    "end": "131969"
  },
  {
    "text": "configurations that you have in your development environment are taken to the testing environment",
    "start": "131969",
    "end": "137530"
  },
  {
    "text": "and then finally in production doesn't matter what is the underlying infrastructure doko containers abstract",
    "start": "137530",
    "end": "143290"
  },
  {
    "text": "that away and if you produce data then well you may produce some data within",
    "start": "143290",
    "end": "148690"
  },
  {
    "text": "the container and of course it's a good idea to move it out like Alex was showing us in the previous example so",
    "start": "148690",
    "end": "153970"
  },
  {
    "text": "you can actually store it and analyze it centrally so that's container based computing running on ec2 next evolution",
    "start": "153970",
    "end": "162459"
  },
  {
    "start": "160000",
    "end": "160000"
  },
  {
    "text": "step a year ago we announced a de polis lambda a server less compute system what",
    "start": "162459",
    "end": "170470"
  },
  {
    "text": "is server less computing well then you can really think of data plus cloud as this amorphous cloud where you simply",
    "start": "170470",
    "end": "177760"
  },
  {
    "text": "run your code at the end of the day you don't really care about the server's you",
    "start": "177760",
    "end": "183400"
  },
  {
    "text": "need it then you need it them to run your applications but then you have to do server management you had to think",
    "start": "183400",
    "end": "189819"
  },
  {
    "text": "about things like scalability capacity management high availability durability load balancing to these instances etc at",
    "start": "189819",
    "end": "197319"
  },
  {
    "text": "the end of the day all you need to do is call your code and run it and when you",
    "start": "197319",
    "end": "203350"
  },
  {
    "text": "run your code your code is producing pieces of data producing new data and",
    "start": "203350",
    "end": "208540"
  },
  {
    "text": "analyzing existing data depending on the application so that is servile as computing you don't see the servers you",
    "start": "208540",
    "end": "215560"
  },
  {
    "text": "don't honestly care what happens you just want to run your code and work on",
    "start": "215560",
    "end": "221110"
  },
  {
    "text": "data so what is a depressed lambda lambda is the latest compute service",
    "start": "221110",
    "end": "227890"
  },
  {
    "text": "that lets you do server less computing you can think about lambda as giving you the opportunity to make a micro service",
    "start": "227890",
    "end": "235660"
  },
  {
    "text": "easily without servers so you have server less computing an event-driven",
    "start": "235660",
    "end": "241810"
  },
  {
    "text": "scale what does that mean it means that lambda will kick off your code execution",
    "start": "241810",
    "end": "248380"
  },
  {
    "text": "right when need it in milliseconds at any scale it doesn't matter if that function that you write that one thing",
    "start": "248380",
    "end": "254950"
  },
  {
    "text": "you write your code has to run once a month to make some may be reporting or a",
    "start": "254950",
    "end": "260019"
  },
  {
    "text": "million times per hour lambda will scale the system and run your code at any",
    "start": "260019",
    "end": "265419"
  },
  {
    "text": "scale in milliseconds and then the billing you are built at hundred",
    "start": "265419",
    "end": "270490"
  },
  {
    "text": "millisecond in krementz of compute time very very granular peeling what can you do with",
    "start": "270490",
    "end": "277190"
  },
  {
    "text": "lambda you bring your own code to the cloud and that's all you need to worry about there's a really simple resource",
    "start": "277190",
    "end": "284240"
  },
  {
    "text": "model how you can boost more capacity to your code execution also it to you soon there are many ways of invoking lambda",
    "start": "284240",
    "end": "290960"
  },
  {
    "text": "well not that many to you'll see them soon and of course for security you need",
    "start": "290960",
    "end": "296690"
  },
  {
    "text": "to have granular security least privilege principle so what you actually",
    "start": "296690",
    "end": "302690"
  },
  {
    "text": "do is that you author you write your code you deploy it to lambda lambda runs",
    "start": "302690",
    "end": "308300"
  },
  {
    "text": "your code when need it and then remember that lambda functions are stateless think of them as kind of soap bubbles",
    "start": "308300",
    "end": "315200"
  },
  {
    "text": "that appear when your code has to run and that the bubble is burst when the execution is done so if you need to keep",
    "start": "315200",
    "end": "321410"
  },
  {
    "text": "a state somewhere like a shopping cart for customer put that persistent state",
    "start": "321410",
    "end": "326720"
  },
  {
    "text": "somewhere else for example in dynamo dB maybe elastic ass and if you want to",
    "start": "326720",
    "end": "333170"
  },
  {
    "text": "store data store it in databases or storage like Amazon s3 and lambda gives",
    "start": "333170",
    "end": "338630"
  },
  {
    "text": "you of course monitoring and logging capabilities so you see what's going on and you can debug your applications",
    "start": "338630",
    "end": "344770"
  },
  {
    "text": "let's take a look at some features of lambda starting with versioning so of course when you develop your lambda",
    "start": "344770",
    "end": "349910"
  },
  {
    "start": "348000",
    "end": "348000"
  },
  {
    "text": "function you will have new versions that is quite a simple operation all you need",
    "start": "349910",
    "end": "355460"
  },
  {
    "text": "to do is upload your quote make changes to that code any time either in your development environment or in the lambda",
    "start": "355460",
    "end": "362030"
  },
  {
    "text": "console itself directly and the last update wins for the latest version so",
    "start": "362030",
    "end": "367280"
  },
  {
    "text": "you start with this piece of code that's as high as the output you make a new version of the court that now says x and",
    "start": "367280",
    "end": "374180"
  },
  {
    "text": "that becomes the latest one that lambda runs however at any time you can refer",
    "start": "374180",
    "end": "381050"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "to the previous versions of your code so you can go back to one numbers are be",
    "start": "381050",
    "end": "386960"
  },
  {
    "text": "difficult to remember so what you can do is you can use labels you can always refer to dollar latest that runs the",
    "start": "386960",
    "end": "394760"
  },
  {
    "text": "absolutely latest version of your code or specific version numbers if you",
    "start": "394760",
    "end": "400220"
  },
  {
    "text": "remember them or names this is maybe better you can use late",
    "start": "400220",
    "end": "405730"
  },
  {
    "start": "403000",
    "end": "403000"
  },
  {
    "text": "aliases so you can have a production label and you move that label always to",
    "start": "405730",
    "end": "410900"
  },
  {
    "text": "the version of the lambda function that is right now the production system and development and testing have their own",
    "start": "410900",
    "end": "416330"
  },
  {
    "text": "labels with likely a newer version of that function these are the two ways of",
    "start": "416330",
    "end": "423680"
  },
  {
    "start": "422000",
    "end": "422000"
  },
  {
    "text": "executing your lambda function so remember you just have your code you give it to the service and then lambda",
    "start": "423680",
    "end": "429470"
  },
  {
    "text": "runs it when when does it run it the version on the left is a synchronous execution where an event that happens in",
    "start": "429470",
    "end": "437660"
  },
  {
    "text": "AWS in one of the other services trickers your code execution in lambda like you can configure that if I have a",
    "start": "437660",
    "end": "446150"
  },
  {
    "text": "new file in my s3 bucket like my customer uploads a new file start the",
    "start": "446150",
    "end": "451460"
  },
  {
    "text": "lambda function immediately and that lambda function will be triggered the moment that new file hits the s3 bucket",
    "start": "451460",
    "end": "457580"
  },
  {
    "text": "and thus whatever your function does like virus scanning image processing whatever or backing up the file the",
    "start": "457580",
    "end": "466030"
  },
  {
    "text": "other way of calling lambda functions is synchronous execution where you call the",
    "start": "466030",
    "end": "471380"
  },
  {
    "text": "lambda function programmatically from your code and the easiest way to do that is to use the ADA place SDK for your",
    "start": "471380",
    "end": "478490"
  },
  {
    "text": "language and then create a lambda client or object and just call the function",
    "start": "478490",
    "end": "483890"
  },
  {
    "text": "with the name of the function and version if you want and then of course you should return the values back to the",
    "start": "483890",
    "end": "490130"
  },
  {
    "text": "caller but in this case lambda is basically a virtual supercomputer",
    "start": "490130",
    "end": "495500"
  },
  {
    "text": "running that function of your coat anytime you need it at any scale so",
    "start": "495500",
    "end": "501830"
  },
  {
    "text": "imagine having constrained devices like IOT devices mobile devices they have a supercomputer executing those heavy",
    "start": "501830",
    "end": "508669"
  },
  {
    "text": "functions with lambda and you don't run any servers in the background in the back end so let's take a look at some",
    "start": "508669",
    "end": "515120"
  },
  {
    "text": "serverless design patterns how our customers have started innovating using lambda the first one is surveillance web",
    "start": "515120",
    "end": "522080"
  },
  {
    "start": "520000",
    "end": "520000"
  },
  {
    "text": "applications a dynamic website which stores data has a database remembers",
    "start": "522080",
    "end": "527630"
  },
  {
    "text": "things and lets your users interact with the website so dynamic how could we implement that you don't need a web",
    "start": "527630",
    "end": "535010"
  },
  {
    "text": "server necessarily to deliver web content to your customers because you can deliver it directly from amazon",
    "start": "535010",
    "end": "541040"
  },
  {
    "text": "s3 simple storage service and if you put cloud front our content delivery network",
    "start": "541040",
    "end": "546290"
  },
  {
    "text": "in front of s3 you can even accelerate and cash the delivery delivery of your",
    "start": "546290",
    "end": "551660"
  },
  {
    "text": "web application like JavaScript CSS whatever enemies to your customers from",
    "start": "551660",
    "end": "556699"
  },
  {
    "text": "a nearby its location so you use s3 maybe with cloud front to deliver it to",
    "start": "556699",
    "end": "561709"
  },
  {
    "text": "a customer machine and then the code is running the web application like javascript is running on your customer",
    "start": "561709",
    "end": "568009"
  },
  {
    "text": "machine and there's a function call that points to lambda that's it and using",
    "start": "568009",
    "end": "574370"
  },
  {
    "text": "amazon api gateway you can turn the lambda function into a restful HTTP json",
    "start": "574370",
    "end": "582290"
  },
  {
    "text": "api so then you call lambda functions",
    "start": "582290",
    "end": "587480"
  },
  {
    "text": "and if the lambda function has to remember something the lambda function can use other services like dynamo DP",
    "start": "587480",
    "end": "593959"
  },
  {
    "text": "for storing state s3 for storing files etc no more death by PowerPoint for the",
    "start": "593959",
    "end": "600319"
  },
  {
    "text": "time being let's see the first demo let's do exactly that let's make a dynamic web application where we deliver",
    "start": "600319",
    "end": "607910"
  },
  {
    "start": "602000",
    "end": "602000"
  },
  {
    "text": "the application to the laptop my laptop from s3 and then if we click certain buttons you will see them soon they are",
    "start": "607910",
    "end": "614629"
  },
  {
    "text": "pointing to AP ice we find by the Amazon API gateway that in turn passed the",
    "start": "614629",
    "end": "620329"
  },
  {
    "text": "requested Apple s lambda and lambda uses dynamo DP and simple notification",
    "start": "620329",
    "end": "625579"
  },
  {
    "text": "service in the background so let's go to the demo here we go so this is the ADA",
    "start": "625579",
    "end": "633589"
  },
  {
    "text": "police console and here you can see that we have grouped our services by type of",
    "start": "633589",
    "end": "640009"
  },
  {
    "text": "service here we have to compute services and our latest baby for compute is here lambda but let's start in s3 let's first",
    "start": "640009",
    "end": "648829"
  },
  {
    "text": "deliver the web application to my laptop which is now the customer this is the pocket industry where we have uploaded",
    "start": "648829",
    "end": "655850"
  },
  {
    "text": "the web application normally those files are private but I have set the public",
    "start": "655850",
    "end": "660920"
  },
  {
    "text": "bit on in the definition of these files in the properties so we can deliver these to customers using HTTPS so here",
    "start": "660920",
    "end": "669559"
  },
  {
    "text": "is the link I've selected the index dot HTML of this replica an s3 gives us a nice link and you can",
    "start": "669559",
    "end": "676280"
  },
  {
    "text": "make that nink link significantly nicer by using amazon route 53 so you can map",
    "start": "676280",
    "end": "682100"
  },
  {
    "text": "your domain and host name to this link like my web application on my blog com",
    "start": "682100",
    "end": "687860"
  },
  {
    "text": "because this happens to be a block so let's now click this link and bang what happened was that s3 delivered the",
    "start": "687860",
    "end": "695210"
  },
  {
    "text": "content to my laptop but let's be sure of that so let's take a look at the",
    "start": "695210",
    "end": "700250"
  },
  {
    "text": "network debugging this is a 300-level season and let's reload this application",
    "start": "700250",
    "end": "705770"
  },
  {
    "text": "I click reload and we look at what my firefox browser was doing you can see",
    "start": "705770",
    "end": "710900"
  },
  {
    "text": "that it downloaded stuff but all the stuff came from s3 so s 3 delivers this",
    "start": "710900",
    "end": "718460"
  },
  {
    "text": "application to this particular client so this is a simple block but it has a couple of buttons loading existing",
    "start": "718460",
    "end": "726620"
  },
  {
    "text": "comments if we there are any and then creating a new blog post how do those work let's take a look at the source",
    "start": "726620",
    "end": "735040"
  },
  {
    "text": "this is the source of that page and let me find the interesting bit here is the",
    "start": "735040",
    "end": "743930"
  },
  {
    "text": "API URL so there's a variable here variable I cannot pronounce that that",
    "start": "743930",
    "end": "751130"
  },
  {
    "text": "points as you can see to the API gateway and when do we actually use it if",
    "start": "751130",
    "end": "757460"
  },
  {
    "text": "somebody clicks the load button this piece of code is run API URL is called",
    "start": "757460",
    "end": "765490"
  },
  {
    "text": "with / get all posts method aha so here",
    "start": "765490",
    "end": "771680"
  },
  {
    "text": "we actually if we click the button load posts we call the api get all posts",
    "start": "771680",
    "end": "777800"
  },
  {
    "text": "where is that here I now switch the",
    "start": "777800",
    "end": "783620"
  },
  {
    "text": "console to the Amazon API gateway and you can see here that I have an API",
    "start": "783620",
    "end": "788960"
  },
  {
    "text": "called lambda microservice so let's click that API and see how it has been",
    "start": "788960",
    "end": "794240"
  },
  {
    "text": "defined so here in API gateway I have my API it has two methods get and post get",
    "start": "794240",
    "end": "802940"
  },
  {
    "text": "all posts from my block and create a new blog post how do they work let me click on this",
    "start": "802940",
    "end": "808730"
  },
  {
    "text": "get and we deep dive into the configuration of this get method of this",
    "start": "808730",
    "end": "814400"
  },
  {
    "text": "API what really happens if somebody calls this get this happens we received",
    "start": "814400",
    "end": "821060"
  },
  {
    "text": "the method request from the customer in this case my life my laptop it calls a",
    "start": "821060",
    "end": "826550"
  },
  {
    "text": "lambda function called get all posts here in the in the right hand corner and",
    "start": "826550",
    "end": "831770"
  },
  {
    "text": "any response coming back from the lambda function is passed straight back to the client so the API gateway is calling a",
    "start": "831770",
    "end": "840020"
  },
  {
    "text": "particular lambda function let me click now this lambda function and open a new",
    "start": "840020",
    "end": "845150"
  },
  {
    "text": "tab and go to the lambda console what is this function what are we actually calling so if somebody clicks the button",
    "start": "845150",
    "end": "853400"
  },
  {
    "text": "get all posts lambda execute this piece of code it creates a dynamo DB client so",
    "start": "853400",
    "end": "861770"
  },
  {
    "text": "the lambda function creates a dynamo DB client force particular table lambda",
    "start": "861770",
    "end": "867200"
  },
  {
    "text": "demo posts and then it makes a database query it will try to get the items in",
    "start": "867200",
    "end": "873440"
  },
  {
    "text": "the dynamo DB table and if everything is fine and happy happy lambda will then",
    "start": "873440",
    "end": "879110"
  },
  {
    "text": "return the fetched items from the dynamo DB table back to the JavaScript running",
    "start": "879110",
    "end": "885380"
  },
  {
    "text": "my laptop when does this lambda function executes when we call it does it have an",
    "start": "885380",
    "end": "892460"
  },
  {
    "text": "API endpoint yes implemented by API gateway so this is the lambda console we",
    "start": "892460",
    "end": "897770"
  },
  {
    "text": "can see that we have an API for this function and there's monitoring so we",
    "start": "897770",
    "end": "903890"
  },
  {
    "text": "can look at that later than I've executed it before the session when Alex was talking and the average execution",
    "start": "903890",
    "end": "910640"
  },
  {
    "text": "time was 1.4 seconds in this case so let's actually see if that works we go",
    "start": "910640",
    "end": "915920"
  },
  {
    "text": "back here and I click the button load comments and we also want to see what",
    "start": "915920",
    "end": "921470"
  },
  {
    "text": "happens on the network level I click load comments and something came here",
    "start": "921470",
    "end": "928640"
  },
  {
    "text": "hello Singapore so we got a response now the block is showing us that indeed",
    "start": "928640",
    "end": "933920"
  },
  {
    "text": "there is an item in our block and when we look at the network details we were just talking to",
    "start": "933920",
    "end": "940400"
  },
  {
    "text": "api gateway and labia gateway then executed this particular lambda",
    "start": "940400",
    "end": "946280"
  },
  {
    "text": "functions it was called one more time and remember the lambda function went to dynamo DP so let's go to dynamo DP and",
    "start": "946280",
    "end": "952940"
  },
  {
    "text": "verify that we indeed have this block and three there yes we do so this is the",
    "start": "952940",
    "end": "958310"
  },
  {
    "text": "table in dynamo DP and you can see that we have hello Singapore here and it's the only item in this database table",
    "start": "958310",
    "end": "965500"
  },
  {
    "text": "that's good there's a second button in the same block page here post a new",
    "start": "965500",
    "end": "972710"
  },
  {
    "text": "comment hi there servers are so last",
    "start": "972710",
    "end": "979130"
  },
  {
    "text": "season so let me write a new blog post comment servers are so last season and I",
    "start": "979130",
    "end": "986210"
  },
  {
    "text": "click post and we see what happens in the network level we can see that again",
    "start": "986210",
    "end": "991850"
  },
  {
    "text": "we are just calling the API gateway we have a new comment hide their service or",
    "start": "991850",
    "end": "999620"
  },
  {
    "text": "so last season and I also want to show you what happened on my phone let me",
    "start": "999620",
    "end": "1006340"
  },
  {
    "text": "briefly show you my phone screen that's me that's not my phone here is my phone",
    "start": "1006340",
    "end": "1017430"
  },
  {
    "text": "bum so something came to my phone screen just now amazon mobile push which is",
    "start": "1017430",
    "end": "1023230"
  },
  {
    "text": "just the name of my application on the phone side somebody posted on your comment hi there service also last",
    "start": "1023230",
    "end": "1028600"
  },
  {
    "text": "season so what did the lambda function actually do when i click this create a",
    "start": "1028600",
    "end": "1033970"
  },
  {
    "text": "new blog post button we seem to have received the message on my phone let's go to lambda now let's investigate a bit",
    "start": "1033970",
    "end": "1040839"
  },
  {
    "text": "I go to my list of functions there is a function called create a new blog post let's see what this code looks like here",
    "start": "1040839",
    "end": "1051960"
  },
  {
    "text": "what happens is that the piece of code lambda function makes a dynamo DP client",
    "start": "1052500",
    "end": "1058390"
  },
  {
    "text": "again and people are blocking that's good thank you your posting new comments",
    "start": "1058390",
    "end": "1063520"
  },
  {
    "text": "i love it and the lambda function also makes an SNS client simple notification",
    "start": "1063520",
    "end": "1069130"
  },
  {
    "text": "service client so what this code does is that it puts the new block items into the same table",
    "start": "1069130",
    "end": "1077190"
  },
  {
    "text": "database put and if that is successful it will also publish the comment using",
    "start": "1077190",
    "end": "1083110"
  },
  {
    "text": "Amazon SNS simple notification service and I have subscribed my phone to this",
    "start": "1083110",
    "end": "1088360"
  },
  {
    "text": "particular topic in SNS that's why I got the phone receipts and let's go to dynamo DPS see what kind of stuff you",
    "start": "1088360",
    "end": "1094780"
  },
  {
    "text": "guys have been posting there so I will refresh the table and there's one more",
    "start": "1094780",
    "end": "1100000"
  },
  {
    "text": "comment hi mark hello probably somebody here could be somebody with us streaming",
    "start": "1100000",
    "end": "1106750"
  },
  {
    "text": "video somewhere else so you can see that the comments went there to the database table so that in a nutshell is a short",
    "start": "1106750",
    "end": "1113920"
  },
  {
    "text": "example brief example of a dynamic web application service for everything we",
    "start": "1113920",
    "end": "1121390"
  },
  {
    "text": "used in this particular demo runs without us having to manage any servers and it's also virtually unlimited scale",
    "start": "1121390",
    "end": "1129010"
  },
  {
    "text": "for its of these services in use let's take a look at some more design patterns",
    "start": "1129010",
    "end": "1134380"
  },
  {
    "text": "what can you do with lambda server less pourers say you have a message skewed as a matter what is the message queue SQS",
    "start": "1134380",
    "end": "1141010"
  },
  {
    "text": "or something else lambda has a timer function now people call it the Crone lambda so that is there so you can set",
    "start": "1141010",
    "end": "1147520"
  },
  {
    "text": "your lambda function to execute at regular intervals and check if you have stuff that you need to do many people",
    "start": "1147520",
    "end": "1155050"
  },
  {
    "text": "use lambda to process log file so maybe Alex estore could have been one slide I'm kidding where you have to cloud",
    "start": "1155050",
    "end": "1162730"
  },
  {
    "text": "what's locks coming in lambda eats them num num num and then puts them somewhere else like DynamoDB s 30 redshift this is",
    "start": "1162730",
    "end": "1172150"
  },
  {
    "start": "1171000",
    "end": "1171000"
  },
  {
    "text": "quite interesting I think this is like a complex adaptive system many of the sophisticated cloud applications are",
    "start": "1172150",
    "end": "1178720"
  },
  {
    "text": "complex adaptive systems they are self healing they are detecting changes by",
    "start": "1178720",
    "end": "1184300"
  },
  {
    "text": "themselves without humans having to interact in operations so let's say that we our system whatever running in a",
    "start": "1184300",
    "end": "1191170"
  },
  {
    "text": "topless triggers a cloud what's alarm something is happening we have reached some threshold or something has failed",
    "start": "1191170",
    "end": "1197820"
  },
  {
    "text": "well we can send a notification with SNS have lambda triggered and the lambda",
    "start": "1197820",
    "end": "1204580"
  },
  {
    "text": "function can actually interact with the infrastructure and the application",
    "start": "1204580",
    "end": "1209950"
  },
  {
    "text": "itself like split oak in easy stream or spin up more docker containers etc so",
    "start": "1209950",
    "end": "1218080"
  },
  {
    "text": "you can have lambda look at what's going on with your solution and react and fix",
    "start": "1218080",
    "end": "1224559"
  },
  {
    "text": "things automatically interesting you can also of course forward ada place events",
    "start": "1224559",
    "end": "1230950"
  },
  {
    "start": "1228000",
    "end": "1228000"
  },
  {
    "text": "the external endpoint so you collect the events notify call lambda function and",
    "start": "1230950",
    "end": "1236170"
  },
  {
    "text": "maybe send it to if there if this then that so then your Philips hue lamp can turn red if something goes funky in your",
    "start": "1236170",
    "end": "1243460"
  },
  {
    "text": "system one example people do this a lot social coding especially startups they",
    "start": "1243460",
    "end": "1249790"
  },
  {
    "start": "1246000",
    "end": "1246000"
  },
  {
    "text": "use a slack channel so somebody says something funny is luck I made this new piece of code it's cool lambda can read",
    "start": "1249790",
    "end": "1256330"
  },
  {
    "text": "it and test your code is it's really cool by the way about testing lambda",
    "start": "1256330",
    "end": "1262660"
  },
  {
    "start": "1261000",
    "end": "1261000"
  },
  {
    "text": "functions when you're developing lambda you are developing code so lambda is not just an engines run your code you also",
    "start": "1262660",
    "end": "1269860"
  },
  {
    "text": "developing on lambda so shouldn't you test your lambda functions yes so",
    "start": "1269860",
    "end": "1275400"
  },
  {
    "text": "somebody's coding the lambda functions he or she puts them in github or",
    "start": "1275400",
    "end": "1280750"
  },
  {
    "text": "whatever repository new version of the lambda function that can notify trickle",
    "start": "1280750",
    "end": "1286150"
  },
  {
    "text": "lambda and lambda can create the lambda function so using lambda to run another",
    "start": "1286150",
    "end": "1292420"
  },
  {
    "text": "lambda function in testing mode automated testing lambda calling lambda",
    "start": "1292420",
    "end": "1297730"
  },
  {
    "text": "lambda inception is it spinning you see",
    "start": "1297730",
    "end": "1304179"
  },
  {
    "start": "1300000",
    "end": "1300000"
  },
  {
    "text": "okay this is really popular with lambda real-time analytics processing you'll",
    "start": "1304179",
    "end": "1311230"
  },
  {
    "text": "generate your data with web server so IOT devices whatever you push them into kinis is just like Alex was showing",
    "start": "1311230",
    "end": "1317530"
  },
  {
    "text": "earlier lambda function is eating the records from Kinesis yum yum yum and then putting them somewhere so real-time",
    "start": "1317530",
    "end": "1325690"
  },
  {
    "text": "analysis let's do that as the next demo but before the next demo I talk you through one more slide lambda v pc one",
    "start": "1325690",
    "end": "1333790"
  },
  {
    "start": "1327000",
    "end": "1327000"
  },
  {
    "text": "of the really highly requested features after we launched lambda so that's there now you can have your lambda functions",
    "start": "1333790",
    "end": "1341320"
  },
  {
    "text": "operate within your virtual private cloud very nice so let's do that the",
    "start": "1341320",
    "end": "1347710"
  },
  {
    "text": "previous example as a lesser demo let's do real-time analytics of twitter twitter is now now our data source",
    "start": "1347710",
    "end": "1355120"
  },
  {
    "start": "1349000",
    "end": "1349000"
  },
  {
    "text": "because there's a lot of tweets so let's do this let's start pushing the tweets",
    "start": "1355120",
    "end": "1360279"
  },
  {
    "text": "from Twitter into Kinesis have a lambda function that is eating those tweets those record synkinesis pushing them to",
    "start": "1360279",
    "end": "1367840"
  },
  {
    "text": "elasticsearch and then using capanna to visualize and just because we shoot we",
    "start": "1367840",
    "end": "1373750"
  },
  {
    "text": "run it in VPC that's all private cloud what should we analyze well this I was",
    "start": "1373750",
    "end": "1379149"
  },
  {
    "text": "thinking of this hmm we need something that generates a lot of tweets so why not see which one is more popular Bieber",
    "start": "1379149",
    "end": "1386769"
  },
  {
    "text": "or Miley yes some people say the same artist with makeup and without makeup",
    "start": "1386769",
    "end": "1393509"
  },
  {
    "text": "but which one is which so let's see the demo real-time analytics of Bieber vs",
    "start": "1393509",
    "end": "1399850"
  },
  {
    "text": "Miley popularity using Kinesis lambda elasticsearch so for this one I sweets",
    "start": "1399850",
    "end": "1406230"
  },
  {
    "text": "and my laptop decides not to sleep I switch to my other browser there we go",
    "start": "1406230",
    "end": "1417370"
  },
  {
    "text": "just a second go to Chrome so here we have a keen easy stream I have a Kinesis",
    "start": "1417370",
    "end": "1423730"
  },
  {
    "text": "dream that is called Twitter demo stream right now there's nothing happening in it because we are not pushing any tweets",
    "start": "1423730",
    "end": "1429820"
  },
  {
    "text": "to the stream but we have a keen easy stream ready to accept the tweets if you will what happens if somebody puts",
    "start": "1429820",
    "end": "1436720"
  },
  {
    "text": "tweets in the skin is a stream well for that we have a lambda function here i have a lambda function called Twitter",
    "start": "1436720",
    "end": "1443769"
  },
  {
    "text": "demo elasticsearch what does it do when is it triggered whenever there are",
    "start": "1443769",
    "end": "1449440"
  },
  {
    "text": "tweets in this skin AZ stream called Twitter demo stream those tweets will automatically trigger the execution of",
    "start": "1449440",
    "end": "1456669"
  },
  {
    "text": "this lambda function and by the way you can configure the bats eyes in this case",
    "start": "1456669",
    "end": "1462429"
  },
  {
    "text": "I've configured that 10 tweets will trigger one execution of the lambda",
    "start": "1462429",
    "end": "1467769"
  },
  {
    "text": "function if you make the bat size one every single tweet will generate a lambda function execution so you can",
    "start": "1467769",
    "end": "1474100"
  },
  {
    "text": "play with that this one I tested it a bit earlier but",
    "start": "1474100",
    "end": "1479840"
  },
  {
    "text": "recently it hasn't been running what does it actually do what does this",
    "start": "1479840",
    "end": "1484880"
  },
  {
    "text": "lambda function do well first of all it",
    "start": "1484880",
    "end": "1491150"
  },
  {
    "text": "takes the record from Kinesis so this lambda function when there are 10 tweets",
    "start": "1491150",
    "end": "1496310"
  },
  {
    "text": "in the Kinesis dream this lambda function will execute it will get the tweets as an event and then first it",
    "start": "1496310",
    "end": "1503420"
  },
  {
    "text": "will parse these events it will get these events and parse them as a tweet so we have taken some of the some of the",
    "start": "1503420",
    "end": "1514130"
  },
  {
    "text": "parameters from the tweet like the tweet ID to date the text of the tweet the country where the tweet came from into",
    "start": "1514130",
    "end": "1520430"
  },
  {
    "text": "hashtags these are there so we are parsing that tweet into a JSON document",
    "start": "1520430",
    "end": "1527000"
  },
  {
    "text": "and then finally I put them into the elastic search system which I'm running",
    "start": "1527000",
    "end": "1533750"
  },
  {
    "text": "in VPC so if you look at the IP address space here definitely a private IP address space so this is running within",
    "start": "1533750",
    "end": "1539660"
  },
  {
    "text": "my VPC so the lambda function takes the tweets and just feeds them into elasticsearch why because then we can",
    "start": "1539660",
    "end": "1547160"
  },
  {
    "text": "use keep honor that you saw if you will hear leave it with Alex for a real-time",
    "start": "1547160",
    "end": "1553010"
  },
  {
    "text": "dashboard visualization no data yet so we need to start having data I have one",
    "start": "1553010",
    "end": "1559190"
  },
  {
    "text": "easy to instance here with a very simple client note say application that has the",
    "start": "1559190",
    "end": "1564800"
  },
  {
    "text": "Twitter client Twitter SDK and the ADA policy SDK so when we use this app it",
    "start": "1564800",
    "end": "1570320"
  },
  {
    "text": "will subscribe to certain tweets receive them from Twitter and post them to kinases so let's do that first we ask",
    "start": "1570320",
    "end": "1580610"
  },
  {
    "text": "for bieber tweets so now we tap into the twitter feed for justin bieber and then",
    "start": "1580610",
    "end": "1588080"
  },
  {
    "text": "let's also do Miley start another one for Miley there now we have two clients",
    "start": "1588080",
    "end": "1594020"
  },
  {
    "text": "running starting to request those tweets on Twitter they call the Kinesis Kinesis when it has 10 tweets will trigger the",
    "start": "1594020",
    "end": "1600950"
  },
  {
    "text": "lambda function and then post them to elasticsearch and then we should start seeing them here",
    "start": "1600950",
    "end": "1607879"
  },
  {
    "text": "there there we go so let's give it a while to see Justin was first verse me",
    "start": "1607879",
    "end": "1613819"
  },
  {
    "text": "smiley there she is miss iris is coming along who is more popular be perverse a",
    "start": "1613819",
    "end": "1620149"
  },
  {
    "text": "smiley remember the Celia the persons are the more tweets they generate so who",
    "start": "1620149",
    "end": "1626389"
  },
  {
    "text": "is currently more silly green is Bieber blue is Miley they are declining in",
    "start": "1626389",
    "end": "1634099"
  },
  {
    "text": "popularity this is very very concerning yes paper is doing something silly now",
    "start": "1634099",
    "end": "1640039"
  },
  {
    "text": "Miley still quite quiet maybe see sleeping people is doing something now",
    "start": "1640039",
    "end": "1645159"
  },
  {
    "text": "it's definitely trending and no it was a",
    "start": "1645159",
    "end": "1650479"
  },
  {
    "text": "false alarm maybe he just went to McDonald's or something but when we look",
    "start": "1650479",
    "end": "1656029"
  },
  {
    "text": "at this craft we can see that definitely at the moment mr. justing paper is",
    "start": "1656029",
    "end": "1662229"
  },
  {
    "text": "significantly more popular than Miley hunterdon oh look you Miley heard that",
    "start": "1662229",
    "end": "1668709"
  },
  {
    "text": "cease firing back must be night time in the u.s. they're not so many tweets",
    "start": "1668709",
    "end": "1674809"
  },
  {
    "text": "we've only handle about 70 Plus tweet so far but what you can see here as well in",
    "start": "1674809",
    "end": "1680059"
  },
  {
    "text": "this keep on a desk for is that we also look visualizing other things like the top 10 hashtags what do we have here",
    "start": "1680059",
    "end": "1686139"
  },
  {
    "text": "Bieber oh my god a tap on the summit st",
    "start": "1686139",
    "end": "1691539"
  },
  {
    "text": "some of you are tweeting with a topless summit SG excellent very good audience",
    "start": "1691539",
    "end": "1700639"
  },
  {
    "text": "reaction love it let's see the final tally actually I would say that they are",
    "start": "1700639",
    "end": "1707179"
  },
  {
    "text": "neck-and-neck they are equally silly so there we go if we now look at the lambda",
    "start": "1707179",
    "end": "1712699"
  },
  {
    "text": "function monitoring we should see that it has been triggered more recently there we go so during this demo this",
    "start": "1712699",
    "end": "1719599"
  },
  {
    "text": "lambda function has now been executed 51 times and the average duration of the",
    "start": "1719599",
    "end": "1726589"
  },
  {
    "text": "lambda function has been 21 milliseconds not that bad right so navarrete in 21",
    "start": "1726589",
    "end": "1733069"
  },
  {
    "text": "milliseconds lambda has gone to Kinesis taken the records of being given to",
    "start": "1733069",
    "end": "1738169"
  },
  {
    "text": "records more technically correct pass the records and poster to elasticsearch impact seas of 10 21",
    "start": "1738169",
    "end": "1744860"
  },
  {
    "text": "milliseconds not too bad and that happens within VPC virtual private cloud",
    "start": "1744860",
    "end": "1749980"
  },
  {
    "text": "so that was my Hailey versus Bieber thank you for the hashtag available as",
    "start": "1749980",
    "end": "1755600"
  },
  {
    "text": "summit Singapore as cool then a word on resource sizing so you have a lambda",
    "start": "1755600",
    "end": "1761120"
  },
  {
    "start": "1757000",
    "end": "1757000"
  },
  {
    "text": "function easy to make easy to run no service de minutes but how much power do you give to that lambda function will",
    "start": "1761120",
    "end": "1767390"
  },
  {
    "text": "use it test it of course and when you run your lambda function you can look at the log output because the log output",
    "start": "1767390",
    "end": "1773150"
  },
  {
    "text": "will tell you you had 128 megabytes of RAM but you only used 14 megabytes so",
    "start": "1773150",
    "end": "1779660"
  },
  {
    "text": "definitely you have enough memory if you need to increase ram in the lambda",
    "start": "1779660",
    "end": "1784670"
  },
  {
    "text": "console you can just drop down from a menu and have 256 512 1.5 gigs and as",
    "start": "1784670",
    "end": "1791780"
  },
  {
    "text": "you increase memory you're also increasing equivalent compute power to",
    "start": "1791780",
    "end": "1798530"
  },
  {
    "text": "that function so just test it and make sure that you don't use too much but that you have enough for your function",
    "start": "1798530",
    "end": "1804980"
  },
  {
    "text": "easy to see in the logging and then last word on economics lambda is definitely",
    "start": "1804980",
    "end": "1811520"
  },
  {
    "start": "1808000",
    "end": "1808000"
  },
  {
    "text": "extremely economical because you never ever pay for servers sitting there doing",
    "start": "1811520",
    "end": "1816740"
  },
  {
    "text": "nothing so imagine how you would implement the micro service without lambda you would have at least two",
    "start": "1816740",
    "end": "1823430"
  },
  {
    "text": "servers running so you have redundancy never run just one of something that's a single point of failure to servers",
    "start": "1823430",
    "end": "1830360"
  },
  {
    "text": "running 24-7 waiting for stuff to happen at night holidays weekends contrast that",
    "start": "1830360",
    "end": "1838580"
  },
  {
    "text": "to lambda which will only execute your coat exactly when your code has to run and then you're billed at 100 milli",
    "start": "1838580",
    "end": "1845180"
  },
  {
    "text": "second increments and by the way every customer every month has a million",
    "start": "1845180",
    "end": "1850880"
  },
  {
    "text": "requests free with lambda so go and try it out please so to summarize the",
    "start": "1850880",
    "end": "1858860"
  },
  {
    "text": "evolution of cloud computing salon something like this first you had pets like servers you gave them names then",
    "start": "1858860",
    "end": "1864950"
  },
  {
    "text": "you gave them IEDs in their ears they turn into cattle with easy to stretching",
    "start": "1864950",
    "end": "1870260"
  },
  {
    "text": "your imagination a bit docker containers are sheep okay and then finally lambda functions are",
    "start": "1870260",
    "end": "1877210"
  },
  {
    "text": "like burgers they are bite-size chunks of code and compute power and to saw",
    "start": "1877210",
    "end": "1882460"
  },
  {
    "text": "this development time will win hope you enjoyed it thank you very much",
    "start": "1882460",
    "end": "1888450"
  }
]