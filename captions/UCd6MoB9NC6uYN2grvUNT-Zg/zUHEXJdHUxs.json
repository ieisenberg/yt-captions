[
  {
    "text": "- [Instructor] In this\nvideo, you'll see how",
    "start": "480",
    "end": "2100"
  },
  {
    "text": "to enhance query performance using",
    "start": "2100",
    "end": "4048"
  },
  {
    "text": "AWS Glue Data Catalog Statistics.",
    "start": "4049",
    "end": "7052"
  },
  {
    "text": "With this capability, you can\nintegrate column statistics",
    "start": "7920",
    "end": "11100"
  },
  {
    "text": "for AWS Glue tables with\nAWS Analytics Services",
    "start": "11100",
    "end": "15270"
  },
  {
    "text": "to accelerate query performance\nand gain cost savings.",
    "start": "15270",
    "end": "18843"
  },
  {
    "text": "In this demo, we'll use AWS Glue Crawler",
    "start": "20100",
    "end": "22920"
  },
  {
    "text": "to crawl an Amazon S3\nbucket, extract the metadata,",
    "start": "22920",
    "end": "26460"
  },
  {
    "text": "and store it in the AWS Glue Data Catalog.",
    "start": "26460",
    "end": "29432"
  },
  {
    "text": "Next, we'll generate\ncomprehensive column statistics",
    "start": "30720",
    "end": "33450"
  },
  {
    "text": "for the crawled data.",
    "start": "33450",
    "end": "34563"
  },
  {
    "text": "Finally, we'll run\nqueries in Amazon Athena",
    "start": "35880",
    "end": "38220"
  },
  {
    "text": "and Amazon Redshift Spectrum\nto evaluate the impact",
    "start": "38220",
    "end": "41700"
  },
  {
    "text": "of the column statistics\non query performance.",
    "start": "41700",
    "end": "44313"
  },
  {
    "text": "The following diagram illustrates\nthe solution architecture",
    "start": "45660",
    "end": "48540"
  },
  {
    "text": "that will be implemented\nin this demonstration.",
    "start": "48540",
    "end": "51420"
  },
  {
    "text": "Now let's get started.",
    "start": "51420",
    "end": "52563"
  },
  {
    "text": "To begin, let's review a few resources",
    "start": "57480",
    "end": "59940"
  },
  {
    "text": "that we've already set up.",
    "start": "59940",
    "end": "62010"
  },
  {
    "text": "This Amazon S3 public bucket\ncontains a three terabyte",
    "start": "62010",
    "end": "66090"
  },
  {
    "text": "industry standard TPCDS dataset.",
    "start": "66090",
    "end": "69363"
  },
  {
    "text": "We've already created an AWS Glue crawler",
    "start": "70740",
    "end": "73350"
  },
  {
    "text": "to extract the data and\nstore it in a database.",
    "start": "73350",
    "end": "75963"
  },
  {
    "text": "Here we can see the crawler properties,",
    "start": "77220",
    "end": "79740"
  },
  {
    "text": "including the IAM role and database name.",
    "start": "79740",
    "end": "82473"
  },
  {
    "text": "Our S3 bucket has been\nconfigured as the data source.",
    "start": "85110",
    "end": "88143"
  },
  {
    "text": "Notice that we've already run the crawler.",
    "start": "90930",
    "end": "93030"
  },
  {
    "text": "Here we can see the table\nand partition changes",
    "start": "94290",
    "end": "96630"
  },
  {
    "text": "performed for the first run.",
    "start": "96630",
    "end": "98283"
  },
  {
    "text": "These are all the tables that\nwere created in the database.",
    "start": "101760",
    "end": "104710"
  },
  {
    "text": "We've created a second crawler",
    "start": "105870",
    "end": "107310"
  },
  {
    "text": "to generate an identical database",
    "start": "107310",
    "end": "109229"
  },
  {
    "text": "that will create column statistics in.",
    "start": "109230",
    "end": "111810"
  },
  {
    "text": "This will allow us to\ncompare query performance",
    "start": "111810",
    "end": "114149"
  },
  {
    "text": "between the two databases\nlater in this demo.",
    "start": "114150",
    "end": "116733"
  },
  {
    "text": "Let's see how to generate\ncolumn statistics",
    "start": "118050",
    "end": "119940"
  },
  {
    "text": "for a table in that other database.",
    "start": "119940",
    "end": "121893"
  },
  {
    "text": "We can generate statistics for all columns",
    "start": "123240",
    "end": "125430"
  },
  {
    "text": "or for specific columns that\nwe want to use in our queries.",
    "start": "125430",
    "end": "128380"
  },
  {
    "text": "In this case, we'll select all columns.",
    "start": "129660",
    "end": "131643"
  },
  {
    "text": "Row sampling can be used when the dataset",
    "start": "132930",
    "end": "135299"
  },
  {
    "text": "is potentially large and\napproximate results are acceptable.",
    "start": "135300",
    "end": "139110"
  },
  {
    "text": "In this case, we'll\ngenerate column statistics",
    "start": "139110",
    "end": "141780"
  },
  {
    "text": "for all rows to ensure accuracy.",
    "start": "141780",
    "end": "144243"
  },
  {
    "text": "Next, we'll choose an existing IAM role",
    "start": "145530",
    "end": "147990"
  },
  {
    "text": "that has access to create\ndata from our S3 bucket.",
    "start": "147990",
    "end": "151113"
  },
  {
    "text": "Now, let's generate the statistics.",
    "start": "152460",
    "end": "154233"
  },
  {
    "text": "This tab shows the name\nand type of each column,",
    "start": "158640",
    "end": "161310"
  },
  {
    "text": "along with the default\nstatistics that were computed.",
    "start": "161310",
    "end": "163959"
  },
  {
    "text": "For example, we can see\nthe CC company name column",
    "start": "165270",
    "end": "167850"
  },
  {
    "text": "has a string data type.",
    "start": "167850",
    "end": "169323"
  },
  {
    "text": "The average length, distinct values,",
    "start": "170670",
    "end": "172890"
  },
  {
    "text": "and max length statistics\nwere generated by default.",
    "start": "172890",
    "end": "176103"
  },
  {
    "text": "Next, let's navigate to the\nAmazon Athena Query Editor",
    "start": "177420",
    "end": "181110"
  },
  {
    "text": "to evaluate the impact\nof the column statistics",
    "start": "181110",
    "end": "183750"
  },
  {
    "text": "on query performance.",
    "start": "183750",
    "end": "185163"
  },
  {
    "text": "To get a baseline of how\nlong the query takes,",
    "start": "186480",
    "end": "189030"
  },
  {
    "text": "we've run a query on our database",
    "start": "189030",
    "end": "190590"
  },
  {
    "text": "that doesn't contain any statistics.",
    "start": "190590",
    "end": "192573"
  },
  {
    "text": "The total query runtime was 37.6 seconds.",
    "start": "197730",
    "end": "200972"
  },
  {
    "text": "The planning time was about three seconds,",
    "start": "202290",
    "end": "204510"
  },
  {
    "text": "and the execution time\nwas about 34 seconds.",
    "start": "204510",
    "end": "207392"
  },
  {
    "text": "We've run the same query on the database",
    "start": "210420",
    "end": "212340"
  },
  {
    "text": "containing the column statistics.",
    "start": "212340",
    "end": "214203"
  },
  {
    "text": "The data pane shows that statistics",
    "start": "215550",
    "end": "217470"
  },
  {
    "text": "have been computed for\neach of these tables",
    "start": "217470",
    "end": "219660"
  },
  {
    "text": "and includes timestamps for\nwhen they were last analyzed.",
    "start": "219660",
    "end": "222903"
  },
  {
    "text": "The same information is shown",
    "start": "224310",
    "end": "225630"
  },
  {
    "text": "for the columns within each table.",
    "start": "225630",
    "end": "227403"
  },
  {
    "text": "For this query, the total\nruntime was 13.8 seconds,",
    "start": "229440",
    "end": "233250"
  },
  {
    "text": "which is more than a 50%\nimprovement in query performance.",
    "start": "233250",
    "end": "236613"
  },
  {
    "text": "The planning time increased\nbecause the cost-based optimizer",
    "start": "238320",
    "end": "241620"
  },
  {
    "text": "looks at multiple query\nplans before it selects",
    "start": "241620",
    "end": "244200"
  },
  {
    "text": "the most cost optimized\none, but the execution time",
    "start": "244200",
    "end": "247349"
  },
  {
    "text": "was reduced to only eight seconds.",
    "start": "247350",
    "end": "250103"
  },
  {
    "text": "Next, let's navigate to\nthe Redshift Query Editor",
    "start": "250103",
    "end": "253410"
  },
  {
    "text": "to continue our performance testing.",
    "start": "253410",
    "end": "255363"
  },
  {
    "text": "Again, we've already run a baseline query",
    "start": "256680",
    "end": "258600"
  },
  {
    "text": "on the database without column statistics.",
    "start": "258600",
    "end": "261180"
  },
  {
    "text": "The total elapsed time\nwas more than 158 seconds.",
    "start": "261180",
    "end": "264693"
  },
  {
    "text": "We've also run the same\nquery on the database",
    "start": "266070",
    "end": "268200"
  },
  {
    "text": "containing column statistics.",
    "start": "268200",
    "end": "270510"
  },
  {
    "text": "This query only took 55 seconds,",
    "start": "270510",
    "end": "272850"
  },
  {
    "text": "which again is more than a 50% improvement",
    "start": "272850",
    "end": "275670"
  },
  {
    "text": "in query performance.",
    "start": "275670",
    "end": "276993"
  },
  {
    "text": "You've just seen how to\nenhance query performance",
    "start": "279960",
    "end": "282270"
  },
  {
    "text": "using AWS Glue Data Catalog Statistics.",
    "start": "282270",
    "end": "285603"
  },
  {
    "text": "You can learn more about this topic",
    "start": "286980",
    "end": "288480"
  },
  {
    "text": "in the description and\nlinks for this video.",
    "start": "288480",
    "end": "291300"
  },
  {
    "text": "Thanks for watching, now\nit's your turn to try.",
    "start": "291300",
    "end": "293943"
  }
]