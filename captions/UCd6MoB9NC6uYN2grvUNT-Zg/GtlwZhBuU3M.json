[
  {
    "start": "0",
    "end": "300000"
  },
  {
    "text": "agile ninjaness yes all right good afternoon everyone um",
    "start": "640",
    "end": "6399"
  },
  {
    "text": "thank you very much joel so for the next sort of 90 minutes or so i'm going to share with you some some",
    "start": "6399",
    "end": "12000"
  },
  {
    "text": "tips and some tricks uh to help you architect and to deploy manage your",
    "start": "12000",
    "end": "18000"
  },
  {
    "text": "applications on top of aws uh so",
    "start": "18000",
    "end": "24240"
  },
  {
    "text": "first part of the agenda i'm going to take a closer look at auto scaling take a look at some of the things that we can do with it so basically auto",
    "start": "24240",
    "end": "30880"
  },
  {
    "text": "scaling is a way that we can scale out and scale in our ec2 resources on aws",
    "start": "30880",
    "end": "37600"
  },
  {
    "text": "uh in in response to changing environmental conditions so it could be",
    "start": "37600",
    "end": "42879"
  },
  {
    "text": "the case of increased load on your website you need to provision additional web servers or application servers and",
    "start": "42879",
    "end": "49280"
  },
  {
    "text": "you sort of you know provision them and they scale out and then when you don't need to have so much capacity you scale back in",
    "start": "49280",
    "end": "58640"
  },
  {
    "text": "the second topic we'll take a look at is around deploying resources so i'll share",
    "start": "58640",
    "end": "63680"
  },
  {
    "text": "with you some sort of tips and tricks there of more effectively or efficiently uh deploying your resources so i'll be",
    "start": "63680",
    "end": "70080"
  },
  {
    "text": "talking about one of our newest services called cloudformation and how you can use that in combination with the likes",
    "start": "70080",
    "end": "75759"
  },
  {
    "text": "of puppet or share for other sort of os based management tools to sort of have a more agile deployment",
    "start": "75759",
    "end": "82560"
  },
  {
    "text": "environment uh number three is about accessing resources from either ec2 or from mobile",
    "start": "82560",
    "end": "90240"
  },
  {
    "text": "devices and what i'm really going to focus on here is sort of security and manageability",
    "start": "90240",
    "end": "97840"
  },
  {
    "text": "i'll then move on to talking about uh tracking and identification of those resources uh and we'll talk about a new",
    "start": "98960",
    "end": "106399"
  },
  {
    "text": "feature called uh tagging which we can use to uh to associate tags with these",
    "start": "106399",
    "end": "111920"
  },
  {
    "text": "resources and finally we'll cover one of the topics that i get asked most about which",
    "start": "111920",
    "end": "117920"
  },
  {
    "text": "is how do we scale data databases and while i will touch briefly on those sql databases predominantly here the",
    "start": "117920",
    "end": "124719"
  },
  {
    "text": "talk will be around relational databases i'm going to try and be the database agnostic today uh what i want you to",
    "start": "124719",
    "end": "131200"
  },
  {
    "text": "sort of keep in the back of your mind is that you know if i occasionally talk about mysql or postgres or oracle i mean",
    "start": "131200",
    "end": "137680"
  },
  {
    "text": "the same kind of techniques can be used with the likes of you know microsoft sql server as well",
    "start": "137680",
    "end": "143840"
  },
  {
    "text": "so the idea is it'll help you go from potentially an environment that looks something like this so where we have",
    "start": "144640",
    "end": "150959"
  },
  {
    "text": "maybe sort of static inelastic tiers as we can see here we've got a static",
    "start": "150959",
    "end": "156800"
  },
  {
    "text": "web tier consisting of three web servers we have a load balancer in front of those web servers um but there's no",
    "start": "156800",
    "end": "162879"
  },
  {
    "text": "means to sort of scale out and scale back in we also have one database server connected to it's been that's being used",
    "start": "162879",
    "end": "169760"
  },
  {
    "text": "by this architecture um potentially you may have some potentially some inefficient operations",
    "start": "169760",
    "end": "176400"
  },
  {
    "text": "as well um and obviously there's going to be very very sort of different degrees of inefficiency or efficiency in",
    "start": "176400",
    "end": "183840"
  },
  {
    "text": "your operations uh you may be dealing with your aws credentials in a less than ideal secure",
    "start": "183840",
    "end": "191200"
  },
  {
    "text": "manner so sometimes i hear of people baking in their aws credentials into their amis as",
    "start": "191200",
    "end": "198480"
  },
  {
    "text": "you will see later on that's probably not the the best thing to do",
    "start": "198480",
    "end": "203920"
  },
  {
    "text": "uh hopefully transforming you know your applications your architectures into ones where we do have these elastic",
    "start": "203920",
    "end": "210959"
  },
  {
    "text": "scalable tiers okay so as you can see here we're going to be using auto scaling to give us that",
    "start": "210959",
    "end": "216799"
  },
  {
    "text": "flexibility that scalability at that web applications here are we're more efficiently using",
    "start": "216799",
    "end": "223280"
  },
  {
    "text": "resources because we can scale back in we're not paying for resources that we're not actually using",
    "start": "223280",
    "end": "229760"
  },
  {
    "text": "i will look to integrate the likes of cloud formation into your deployment",
    "start": "230319",
    "end": "235519"
  },
  {
    "text": "tool set to give you a more efficient means to deploy those resources",
    "start": "235519",
    "end": "241840"
  },
  {
    "text": "uh and also i'll share with you some let's say better practices for working with aws credentials uh in uh in",
    "start": "242159",
    "end": "250319"
  },
  {
    "text": "relation to you know how we actually get those out onto our ec2 instances",
    "start": "250319",
    "end": "256880"
  },
  {
    "text": "so ultimately helping you go from you know an environment that maybe could do with some optimization",
    "start": "256880",
    "end": "263600"
  },
  {
    "text": "to one where you're able to do more in less time are you able to deliver greater",
    "start": "263600",
    "end": "269600"
  },
  {
    "text": "results with fewer resources you're able to greatly increase the",
    "start": "269600",
    "end": "275040"
  },
  {
    "text": "manageability of your infrastructure and really treat it like like we interact with objects inside of",
    "start": "275040",
    "end": "281040"
  },
  {
    "text": "programming languages so it's brilliant to be able to say i'd like to have these aws resources and just be able to create",
    "start": "281040",
    "end": "286800"
  },
  {
    "text": "them and destroy them at will ah to improve security as well",
    "start": "286800",
    "end": "294000"
  },
  {
    "text": "and hopefully you know it'll be happy days okay so let's start with the first",
    "start": "294000",
    "end": "300800"
  },
  {
    "start": "300000",
    "end": "480000"
  },
  {
    "text": "section of the day which is auto scaling",
    "start": "300800",
    "end": "304720"
  },
  {
    "text": "so auto scaling basically as i've already said is a means for us to scale out and to scale in our ec2 resources",
    "start": "306080",
    "end": "316400"
  },
  {
    "text": "the minimum that we need to do to define or declare for for auto scaling in aws",
    "start": "319280",
    "end": "324800"
  },
  {
    "text": "is two things the first thing is what's called a launch configuration group and the launch configuration group",
    "start": "324800",
    "end": "331520"
  },
  {
    "text": "allows us to specify the properties of new instances as they are added to our",
    "start": "331520",
    "end": "337360"
  },
  {
    "text": "auto scaling group so let's take a look at a bit of code and i'm going to do well at least",
    "start": "337360",
    "end": "343039"
  },
  {
    "text": "attempt to do a live uh demonstration today assuming that the sort of uh the the live demonstration tiki gods are you",
    "start": "343039",
    "end": "350160"
  },
  {
    "text": "know in favor of what i'm doing and we'll see what we can do so the first thing you'll see here is",
    "start": "350160",
    "end": "355360"
  },
  {
    "text": "when we're creating these large configuration groups we need to give it a name in this case here i'm calling mine widgets incorporated very",
    "start": "355360",
    "end": "362240"
  },
  {
    "text": "imaginative i know that's what i'm going to use uh the second thing that we need to do",
    "start": "362240",
    "end": "367840"
  },
  {
    "text": "is to specify the amazon machine image that we want to base all new ec2",
    "start": "367840",
    "end": "373680"
  },
  {
    "text": "instances on so an amazon machine images think of it like a golden template for your ec2",
    "start": "373680",
    "end": "380400"
  },
  {
    "text": "instance and the final thing that we need to specify is the instance type",
    "start": "380400",
    "end": "386960"
  },
  {
    "text": "so the instance type is as of today you know one of over a dozen different ec2 instances that we have um you know",
    "start": "386960",
    "end": "394720"
  },
  {
    "text": "ranging from very small ec2 instances such as the t1 micro here to very very",
    "start": "394720",
    "end": "399919"
  },
  {
    "text": "large sort of you know dual core sort of new halem processor based uh instance types",
    "start": "399919",
    "end": "406800"
  },
  {
    "text": "in addition to those three mandatory parameters there are also several optional parameters",
    "start": "406800",
    "end": "413599"
  },
  {
    "text": "uh just a few of these i'll just touch on so we can actually have detailed monitoring with cloud watch so",
    "start": "413599",
    "end": "419039"
  },
  {
    "text": "cloudwatch is our service which allows us to monitor what's going on at the hypervisor layer",
    "start": "419039",
    "end": "425280"
  },
  {
    "text": "uh we're able to embed a private key into our ec2 instances",
    "start": "425280",
    "end": "430800"
  },
  {
    "text": "so we can specify that key upon upon boot um we can also specify a custom security",
    "start": "430800",
    "end": "438800"
  },
  {
    "text": "group that we wish that our auto scaling instances to be part of and finally",
    "start": "438800",
    "end": "445360"
  },
  {
    "text": "a particularly useful parameter is user data and this is a really good way for us to pass in",
    "start": "445360",
    "end": "451520"
  },
  {
    "text": "our information into the ec2 instance as it's booting up are making the configuration dynamic",
    "start": "451520",
    "end": "458720"
  },
  {
    "text": "okay so this links very nicely into your puppets and your chefs and allows us to sort of hook into those systems",
    "start": "458720",
    "end": "466319"
  },
  {
    "text": "okay let's take a look at a quick demonstration just bear with me for a second",
    "start": "466319",
    "end": "474280"
  },
  {
    "start": "480000",
    "end": "660000"
  },
  {
    "text": "okay good all right so what we're going to do here is",
    "start": "483520",
    "end": "489599"
  },
  {
    "text": "what i'm going to do first is i'm going to basically create a new launch configuration group and sort of as i go through the slides i'll sort of build",
    "start": "489599",
    "end": "495840"
  },
  {
    "text": "out my order scaling so that you can see what's happening and actually see ec2 instances being created",
    "start": "495840",
    "end": "501599"
  },
  {
    "text": "live fingers crossed um as we go through so",
    "start": "501599",
    "end": "507840"
  },
  {
    "text": "the only additional parameter here uh in addition to what i've just sort of shared with you and",
    "start": "507840",
    "end": "514159"
  },
  {
    "text": "is the region so um",
    "start": "514159",
    "end": "519760"
  },
  {
    "text": "i'm actually working on an instance here based in japan um just because i actually have you know",
    "start": "519760",
    "end": "526640"
  },
  {
    "text": "environments that i use inside of singapore for demonstrations um and what i'm doing here let's make",
    "start": "526640",
    "end": "532480"
  },
  {
    "text": "this bigger let's make that bigger",
    "start": "532480",
    "end": "539519"
  },
  {
    "text": "okay cool there we go okay so what i've just done now is i've",
    "start": "542560",
    "end": "549360"
  },
  {
    "text": "created my launch configuration i specified my ami there i specified my instance type and i specified the region",
    "start": "549360",
    "end": "555440"
  },
  {
    "text": "in which i want to create this launch configuration okay the next thing i want to do is i want to",
    "start": "555440",
    "end": "562320"
  },
  {
    "text": "hop back to my presentation",
    "start": "562320",
    "end": "566080"
  },
  {
    "text": "and the next thing i need to do is actually create an auto scaling group so the auto scaling group is where i define",
    "start": "569120",
    "end": "576560"
  },
  {
    "text": "the region that i sorry the availability zones that i want to be able to spread my auto scaling group across",
    "start": "576560",
    "end": "583600"
  },
  {
    "text": "and it's also where i link back into that launch configuration that i just created",
    "start": "583600",
    "end": "589279"
  },
  {
    "text": "and it's also where i specify limits so for example what's the minimum number of instances i should have inside of my",
    "start": "589279",
    "end": "594959"
  },
  {
    "text": "auto scaling group or what's the maximum number of instances inside of that and one useful trick which you may or may",
    "start": "594959",
    "end": "600880"
  },
  {
    "text": "not be aware of is even if you don't want to scale up and scale down your autoscaling group",
    "start": "600880",
    "end": "607120"
  },
  {
    "text": "it's quite common for people to create a group with a minimum size of one and a maximum size of one",
    "start": "607120",
    "end": "613360"
  },
  {
    "text": "because if that single instance inside of your group is terminated for any",
    "start": "613360",
    "end": "618560"
  },
  {
    "text": "particular reason auto scaling will automatically replace it for you okay",
    "start": "618560",
    "end": "625760"
  },
  {
    "text": "so let's actually now build out this auto scaling group",
    "start": "626160",
    "end": "632760"
  },
  {
    "text": "um",
    "start": "641120",
    "end": "644120"
  },
  {
    "text": "i've got a few t-shirts here so can anybody tell me what's about to happen",
    "start": "650560",
    "end": "656839"
  },
  {
    "start": "660000",
    "end": "960000"
  },
  {
    "text": "so you can nominate who else can get this in really they're mine next to you there you go",
    "start": "664160",
    "end": "669600"
  },
  {
    "text": "cool so let's actually see if that really is what's happened",
    "start": "669600",
    "end": "675680"
  },
  {
    "text": "so let's go to here and um just in case you haven't used the",
    "start": "675680",
    "end": "681200"
  },
  {
    "text": "command line interface that i'm using today this is basically our cli toolset so all the things that i'm doing today",
    "start": "681200",
    "end": "687120"
  },
  {
    "text": "we can actually do via an api call whether it be you know php java python.net whatever i'm just using the",
    "start": "687120",
    "end": "693360"
  },
  {
    "text": "cli tools just because they pretty much you know i can use them on a windows machine i can use them on a linux machine",
    "start": "693360",
    "end": "699279"
  },
  {
    "text": "very easily so let's get to here and let's see which instances are",
    "start": "699279",
    "end": "706000"
  },
  {
    "text": "available in that region as part of an auto-scaling group and you can see four of them have i been",
    "start": "706000",
    "end": "711839"
  },
  {
    "text": "lying to well what you'll see is two of these instances actually belong",
    "start": "711839",
    "end": "718079"
  },
  {
    "text": "to a different auto scaling group so i have a demo or a scaling group and then i have two of these uh you know widgets",
    "start": "718079",
    "end": "724959"
  },
  {
    "text": "incorporated by order scaling groups sorry instances okay so auto scaling",
    "start": "724959",
    "end": "730480"
  },
  {
    "text": "seems to be working okay so far right",
    "start": "730480",
    "end": "736720"
  },
  {
    "text": "moving on okay so i only specified the minimum um",
    "start": "736720",
    "end": "745200"
  },
  {
    "text": "parameters there but there are some other parameters that we can specify a one of of notes here is called the grace",
    "start": "745200",
    "end": "751839"
  },
  {
    "text": "period so the grace period is the time that it takes of the the the time that the the load",
    "start": "751839",
    "end": "759120"
  },
  {
    "text": "balancer would give the instance in effect to come up initialize itself before it starts to do",
    "start": "759120",
    "end": "765760"
  },
  {
    "text": "health checks so if you can imagine you had like say a web or an application server that took a few minutes to sort",
    "start": "765760",
    "end": "771120"
  },
  {
    "text": "of boot up be configured install some software etc you don't want to do a health check on it",
    "start": "771120",
    "end": "777360"
  },
  {
    "text": "for maybe the first few minutes because you know it's always going to fail so by specifying a grace period of say",
    "start": "777360",
    "end": "783279"
  },
  {
    "text": "you know 180 seconds that gives you a few minutes of grace before you start doing those",
    "start": "783279",
    "end": "789360"
  },
  {
    "text": "health checks we can specify a health check type",
    "start": "789360",
    "end": "796959"
  },
  {
    "text": "one very powerful use of auto scaling is when it's done in combination with a load balancer so we have a service",
    "start": "797040",
    "end": "802560"
  },
  {
    "text": "called the elastic load balancing service the elb and when instances sort of added to the auto",
    "start": "802560",
    "end": "809360"
  },
  {
    "text": "scaling group we can automatically place them behind the load balancer which is",
    "start": "809360",
    "end": "814880"
  },
  {
    "text": "very very useful the reason being is that um over time",
    "start": "814880",
    "end": "821600"
  },
  {
    "text": "obviously your customers all of them are actually hitting that load balancer under the load balancer is distributing the load amongst the available back-end",
    "start": "821600",
    "end": "828720"
  },
  {
    "text": "web application servers uh placement groups that's only relevant",
    "start": "828720",
    "end": "834560"
  },
  {
    "text": "if we're talking about clusters and finally vpc so um your vpc virtual",
    "start": "834560",
    "end": "840160"
  },
  {
    "text": "private cloud we mentioned several times already today the key thing about vpc is that it gives",
    "start": "840160",
    "end": "845839"
  },
  {
    "text": "you more control over your network topology so if you want to create separate subnets have network access",
    "start": "845839",
    "end": "851519"
  },
  {
    "text": "control lists have control over your security groups both incoming and outbound sorry and",
    "start": "851519",
    "end": "857360"
  },
  {
    "text": "outgoing then now vpc will allow you to do that",
    "start": "857360",
    "end": "862320"
  },
  {
    "text": "okay so there are three basic types of auto scaling",
    "start": "864000",
    "end": "869360"
  },
  {
    "text": "the first type is called manual scaling it doesn't sound very automatic to me at first",
    "start": "869360",
    "end": "875199"
  },
  {
    "text": "um so let's take a closer look so imagine that that we have",
    "start": "875199",
    "end": "882240"
  },
  {
    "text": "two web servers running and we need to scale them up to three",
    "start": "882240",
    "end": "887440"
  },
  {
    "text": "um what we can do if we've established our auto scaling",
    "start": "887440",
    "end": "893920"
  },
  {
    "text": "group and our minimum and maximum limits are within that new bound or that new",
    "start": "893920",
    "end": "899600"
  },
  {
    "text": "value that you want to specify you can actually use the air set desired capacity and actually move it up to",
    "start": "899600",
    "end": "905920"
  },
  {
    "text": "three instances okay so let's uh let's see this in action",
    "start": "905920",
    "end": "913120"
  },
  {
    "text": "so let's go here",
    "start": "913120",
    "end": "918160"
  },
  {
    "text": "we go",
    "start": "919600",
    "end": "922680"
  },
  {
    "text": "okay so if we now take a look and see what's happening",
    "start": "939519",
    "end": "945199"
  },
  {
    "text": "oops",
    "start": "946160",
    "end": "949160"
  },
  {
    "text": "we should see in a moment an additional instance being added to the widgets incorporated",
    "start": "956959",
    "end": "962959"
  },
  {
    "text": "scaling group and there we are",
    "start": "962959",
    "end": "968959"
  },
  {
    "text": "so it's actually in the pending state okay okay",
    "start": "968959",
    "end": "974320"
  },
  {
    "text": "cool and then if we wish we can then change that once again so for example i'll just",
    "start": "974320",
    "end": "980639"
  },
  {
    "text": "specify that back down to two now one thing it's important is when we",
    "start": "980639",
    "end": "986000"
  },
  {
    "text": "are changing the capacity in particular when we are coming down it is going to",
    "start": "986000",
    "end": "991560"
  },
  {
    "text": "non-deterministically choose or which instance to power down",
    "start": "991560",
    "end": "996959"
  },
  {
    "text": "so it does not power down the last instance to start okay",
    "start": "996959",
    "end": "1002720"
  },
  {
    "text": "um the the powering down or termination of an",
    "start": "1002720",
    "end": "1007839"
  },
  {
    "text": "instance inside of an auto scaling group it is actually a clean power down so we will actually execute like a",
    "start": "1007839",
    "end": "1014160"
  },
  {
    "text": "shutdown minus h now type of if on a linux machine or the equivalent of windows um but what i would say is when",
    "start": "1014160",
    "end": "1020639"
  },
  {
    "text": "you're designing architecting your systems they should obviously be kind of architected for",
    "start": "1020639",
    "end": "1026640"
  },
  {
    "text": "for failure and failure doesn't always happen in a nice controlled way okay",
    "start": "1026640",
    "end": "1032880"
  },
  {
    "text": "so let's have a look to see if we have we're actually scaling down",
    "start": "1032880",
    "end": "1039399"
  },
  {
    "text": "there we go so it's in the terminating state okay cool and um you know everything i'm",
    "start": "1042000",
    "end": "1048079"
  },
  {
    "text": "doing now we can actually you know view and see from the from the management console as well uh in terms of",
    "start": "1048079",
    "end": "1053840"
  },
  {
    "text": "interacting with auto scaling groups as of today auto scaling is only available uh programmatically sorry um",
    "start": "1053840",
    "end": "1061360"
  },
  {
    "text": "visually let's say through the elastic beanstalk service that we have inside of the management console",
    "start": "1061360",
    "end": "1068960"
  },
  {
    "text": "okay moving on so that's manual scaling um why is manual scaling useful well",
    "start": "1068960",
    "end": "1076000"
  },
  {
    "text": "you noticed here that the only thing i needed to do was specify the number of instances that i wanted to scale up or",
    "start": "1076000",
    "end": "1082320"
  },
  {
    "text": "scale down this is a lot quicker than just doing an ec2 you know your run instances followed by a lot of",
    "start": "1082320",
    "end": "1089520"
  },
  {
    "text": "optional parameters the tech the second type of auto scaling we have is what's called scheduled based",
    "start": "1089520",
    "end": "1096480"
  },
  {
    "text": "scaling so with schedule based scaling",
    "start": "1096480",
    "end": "1102559"
  },
  {
    "text": "um what we can do is it's a bit like manual scaling but we say change the capacity or change the limits at a given",
    "start": "1102559",
    "end": "1109120"
  },
  {
    "text": "point and date in the future so where this is useful is imagine if you had an application and it was",
    "start": "1109120",
    "end": "1116160"
  },
  {
    "text": "currently in a private beta so you had a relatively restricted number of users on your system",
    "start": "1116160",
    "end": "1122559"
  },
  {
    "text": "but you knew that monday morning at 9 00 am you're actually going to put it into production and you expected a",
    "start": "1122559",
    "end": "1128400"
  },
  {
    "text": "significant step increase in in load on the system well you know if we set up the auto",
    "start": "1128400",
    "end": "1134400"
  },
  {
    "text": "scaling rules properly the system will actually adapt to changing load",
    "start": "1134400",
    "end": "1139840"
  },
  {
    "text": "but sometimes if it's a very very significant step increase it's actually good to proactively scale up your",
    "start": "1139840",
    "end": "1145520"
  },
  {
    "text": "infrastructure ready for it so this is basically how we would look",
    "start": "1145520",
    "end": "1150880"
  },
  {
    "text": "to use the schedule based scaling and it's very similar to you know using",
    "start": "1150880",
    "end": "1155919"
  },
  {
    "text": "the the manual scaling but the key difference here is that we're actually specifying a date and time and that date",
    "start": "1155919",
    "end": "1161360"
  },
  {
    "text": "and time is in our utc format okay",
    "start": "1161360",
    "end": "1167679"
  },
  {
    "text": "the third type of auto scaling which in my view is the most interesting is what's called policy based scaling",
    "start": "1167679",
    "end": "1175679"
  },
  {
    "text": "so let's take a look at this example so imagine that we have",
    "start": "1175679",
    "end": "1181280"
  },
  {
    "text": "we have a network architecture we have we're currently running with two",
    "start": "1181280",
    "end": "1186480"
  },
  {
    "text": "web servers our web servers are sitting inside of auto scaling group they're sitting behind the low bouncer",
    "start": "1186480",
    "end": "1193440"
  },
  {
    "text": "we have our users and we're also using the amazon's route 53 service our dns",
    "start": "1193440",
    "end": "1198880"
  },
  {
    "text": "based service uh to to manage our dns zones at 6am in the morning and what we find",
    "start": "1198880",
    "end": "1205520"
  },
  {
    "text": "is that two web servers are sufficient to handle all of the production traffic",
    "start": "1205520",
    "end": "1211200"
  },
  {
    "text": "fast forward to 8 am it's now 8 o'clock in the morning and we've had an increase in the number of",
    "start": "1211200",
    "end": "1216640"
  },
  {
    "text": "users there's an increase in the amount of load in our system and those two web servers there now let's just say that",
    "start": "1216640",
    "end": "1222720"
  },
  {
    "text": "the average cpu across them is 80",
    "start": "1222720",
    "end": "1228000"
  },
  {
    "text": "with a suitable scaling policy in oil scaling we can say",
    "start": "1229840",
    "end": "1235280"
  },
  {
    "text": "add an additional instance when the average load gets to 80",
    "start": "1235280",
    "end": "1240880"
  },
  {
    "text": "and what we can see here is that we've actually started up an instance as soon as that instance has passed the",
    "start": "1240880",
    "end": "1246960"
  },
  {
    "text": "health check and the health check could be as simple as you know is the web server returning a page on on port 80. it could be that",
    "start": "1246960",
    "end": "1253600"
  },
  {
    "text": "simple providing the health check has passed we can now start load balancing",
    "start": "1253600",
    "end": "1259120"
  },
  {
    "text": "traffic from that load balancer to those back-end web servers and the load that was previously just",
    "start": "1259120",
    "end": "1264799"
  },
  {
    "start": "1260000",
    "end": "1560000"
  },
  {
    "text": "being shared across two web servers is now being shared across three yes questions",
    "start": "1264799",
    "end": "1272519"
  },
  {
    "text": "okay good question so the there are two so we can we trigger based on data",
    "start": "1283840",
    "end": "1290400"
  },
  {
    "text": "that's contained inside of cloud watch so cloudwatch is our monitoring system okay the metrics such as cpu those that",
    "start": "1290400",
    "end": "1297679"
  },
  {
    "text": "will actually be coming from um actually that's one of the the default or available metrics for ec2",
    "start": "1297679",
    "end": "1305440"
  },
  {
    "text": "however if you wanted to and we'll cover this later if you wanted to monitor and trigger based on metrics that are not",
    "start": "1305440",
    "end": "1311919"
  },
  {
    "text": "natively available such as the actual memory utilization inside of an ec2",
    "start": "1311919",
    "end": "1317360"
  },
  {
    "text": "instance uh then we can use what's called custom metrics and you can actually push that data from the instance into cloudwatch",
    "start": "1317360",
    "end": "1325120"
  },
  {
    "text": "and then use that for your auto scaling okay so that's 8 am in the morning we're",
    "start": "1325120",
    "end": "1330799"
  },
  {
    "text": "now up to three web servers let's fast forward to the end of the day so end of the day um the number of users is starting to",
    "start": "1330799",
    "end": "1337039"
  },
  {
    "text": "sort of um to to quieten down the average utilization maybe across these three servers is now 30 percent",
    "start": "1337039",
    "end": "1344559"
  },
  {
    "text": "uh in with with economies uh trying to run a very cost efficient infrastructure in mind what we're going",
    "start": "1344559",
    "end": "1351280"
  },
  {
    "text": "to do is have another auto scaling policy which is to scale down so when average utilization gets to 30",
    "start": "1351280",
    "end": "1358559"
  },
  {
    "text": "then to remove an instance from our scaling group which is what we do",
    "start": "1358559",
    "end": "1364480"
  },
  {
    "text": "and now we only have two websites okay",
    "start": "1364480",
    "end": "1370039"
  },
  {
    "text": "just to sort of summarize there you know policy-based scaling is all about changing the number of instances in response to changing environmental",
    "start": "1374480",
    "end": "1380960"
  },
  {
    "text": "conditions the primary reason is you know to be able to adapt that system to changing conditions such as increased",
    "start": "1380960",
    "end": "1387120"
  },
  {
    "text": "load but it's also really important to scale down to save money um environment the environmental data is",
    "start": "1387120",
    "end": "1395200"
  },
  {
    "text": "provided by cloudwatch and data that's not natively available gets pushed into cloudwatch via custom metrics",
    "start": "1395200",
    "end": "1403360"
  },
  {
    "text": "in order to do our policy-based scaling we need to use two components the first one is a policy itself and the second",
    "start": "1403360",
    "end": "1409520"
  },
  {
    "text": "one is an alarm and i'll go through those in detail in a moment",
    "start": "1409520",
    "end": "1415799"
  },
  {
    "text": "okay so we've already created our launch configuration group which tells us the",
    "start": "1416000",
    "end": "1422480"
  },
  {
    "text": "ec2 instance type to use and the ami to use we've created our auto scaling group",
    "start": "1422480",
    "end": "1427840"
  },
  {
    "text": "which tells us the availability zones that we want to scale into and set some limits in place",
    "start": "1427840",
    "end": "1434080"
  },
  {
    "text": "the next thing we need to look at is actually create a scaling policy and it's this simple example here we",
    "start": "1434080",
    "end": "1439760"
  },
  {
    "text": "have my scaling policy it's a scale-up policy policy we then associate it with",
    "start": "1439760",
    "end": "1447120"
  },
  {
    "text": "the widgets incorporated scaling group which we created in the previous step",
    "start": "1447120",
    "end": "1452320"
  },
  {
    "text": "and the type of scaling operation that we want to execute is a scale up so it's an adjustment of plus one",
    "start": "1452320",
    "end": "1460399"
  },
  {
    "text": "as soon as we have the policy the next thing to do is actually create an alarm so i'm going to create here an alarm",
    "start": "1462640",
    "end": "1469200"
  },
  {
    "text": "that's used for a high cpu utilization across my entire auto scaling group",
    "start": "1469200",
    "end": "1476080"
  },
  {
    "text": "and i'm going to use the greater than threshold comparison operator because obviously you want to",
    "start": "1476080",
    "end": "1482400"
  },
  {
    "text": "scale up i i'm going to use a period of 600",
    "start": "1482400",
    "end": "1488159"
  },
  {
    "text": "seconds there so this is when the average over 10 minutes is greater than the threshold of 80",
    "start": "1488159",
    "end": "1496480"
  },
  {
    "text": "i want to initiate or call upon that policy that i",
    "start": "1496480",
    "end": "1501600"
  },
  {
    "text": "just created okay and that policy will add an additional instance to my auto scaling group",
    "start": "1501600",
    "end": "1508400"
  },
  {
    "text": "you can obviously imagine that if we were doing this for the scale down pretty much the",
    "start": "1508400",
    "end": "1513440"
  },
  {
    "text": "threshold would change from 80 to 30 we would use a less than threshold",
    "start": "1513440",
    "end": "1519200"
  },
  {
    "text": "metric and our policy in the previous slide would simply be one of",
    "start": "1519200",
    "end": "1524720"
  },
  {
    "text": "adjustment equals minus one okay so",
    "start": "1524720",
    "end": "1530480"
  },
  {
    "text": "that's that",
    "start": "1530480",
    "end": "1533039"
  },
  {
    "text": "okay so the question was already asked but i'll just quickly go through it again so if we need to scale based on a",
    "start": "1535600",
    "end": "1540960"
  },
  {
    "text": "metric that's not available in cloudwatch we can either do manual based scaling",
    "start": "1540960",
    "end": "1547360"
  },
  {
    "text": "or schedule based scaling or my preference is to use custom metrics",
    "start": "1547360",
    "end": "1555480"
  },
  {
    "text": "so providing that you can um obtain the data via a script or by some",
    "start": "1557600",
    "end": "1564480"
  },
  {
    "start": "1560000",
    "end": "1860000"
  },
  {
    "text": "automated means in actual fact it doesn't need to be automated if you wanted to you could have one of your system administrators you know entering",
    "start": "1564480",
    "end": "1570880"
  },
  {
    "text": "the data into cloudwatch manually it doesn't matter but providing you can get the data in there",
    "start": "1570880",
    "end": "1576159"
  },
  {
    "text": "you can actually not just use it for auto scaling but you can also visualize it too as we'll see in a",
    "start": "1576159",
    "end": "1582840"
  },
  {
    "text": "moment so in this case here what we're doing is we're creating a custom metric for memory",
    "start": "1582840",
    "end": "1589520"
  },
  {
    "text": "so we specify a namespace and this is an arbitrary description uh in this case",
    "start": "1589520",
    "end": "1595840"
  },
  {
    "text": "here i'm just i'm talking about a linux machine but once again this could be system forward slash windows it really",
    "start": "1595840",
    "end": "1601760"
  },
  {
    "text": "is up to you we're going to specify a metric name of memory and it's basically going to refer",
    "start": "1601760",
    "end": "1607679"
  },
  {
    "text": "to memory utilization going to specify dimension",
    "start": "1607679",
    "end": "1613600"
  },
  {
    "text": "and the reason why i'm doing this is because i would like to use this custom metric not just for one single host but",
    "start": "1613600",
    "end": "1619919"
  },
  {
    "text": "potentially for all of my ec2 instances okay so",
    "start": "1619919",
    "end": "1625120"
  },
  {
    "text": "this information is being pushed from host post one",
    "start": "1625120",
    "end": "1630320"
  },
  {
    "text": "and the value for the utilization at this point in time is 60.",
    "start": "1630320",
    "end": "1635760"
  },
  {
    "text": "okay as soon as that data is pushed into cloudwatch i'm able to visualize the",
    "start": "1635760",
    "end": "1642240"
  },
  {
    "text": "data using the um the graphical tools inside of the amazon the aws management",
    "start": "1642240",
    "end": "1648399"
  },
  {
    "text": "console okay in addition to that i can also programmatically pull the data out of it",
    "start": "1648399",
    "end": "1654640"
  },
  {
    "text": "out of cloudwatch using our apis and even push it into some third-party monitoring",
    "start": "1654640",
    "end": "1660480"
  },
  {
    "text": "graphing tools as required",
    "start": "1660480",
    "end": "1664600"
  },
  {
    "text": "so um we've defined",
    "start": "1674000",
    "end": "1679039"
  },
  {
    "text": "our new metric but now how do we use it in our alarms and in our policy well very simply",
    "start": "1679039",
    "end": "1685840"
  },
  {
    "text": "so what i've done here is i've just highlighted the difference in us using or creating a metric",
    "start": "1685840",
    "end": "1692399"
  },
  {
    "text": "alarm for a custom metric versus a standard one and as you can see here i've given the",
    "start": "1692399",
    "end": "1699600"
  },
  {
    "text": "i've given the uh the allow a name of my high memory alarm because obviously it's referring to a memory based alarm",
    "start": "1699600",
    "end": "1707279"
  },
  {
    "text": "i specify the the metric name of memory we have to specify the name space again",
    "start": "1707279",
    "end": "1713360"
  },
  {
    "text": "and obviously that has to match what i used in my previous slide and oops",
    "start": "1713360",
    "end": "1718960"
  },
  {
    "text": "and that's basically it so what i have here is an auto scaling rule that states when the average c",
    "start": "1718960",
    "end": "1724240"
  },
  {
    "text": "average memory across my group gets to 80 percent can cause a scale-up operation",
    "start": "1724240",
    "end": "1731039"
  },
  {
    "text": "okay so um what i'm going to talk about now is sort of managing session in that sort of",
    "start": "1732320",
    "end": "1737600"
  },
  {
    "text": "web application here because obviously as we sort of scale up and",
    "start": "1737600",
    "end": "1742640"
  },
  {
    "text": "scale down our infrastructure we need to be aware of what the implications are for our users and our session state",
    "start": "1742640",
    "end": "1752200"
  },
  {
    "text": "yes sure um",
    "start": "1754640",
    "end": "1758520"
  },
  {
    "text": "yeah so scaling up policies from order scaling is not possible right now however what you could do is",
    "start": "1773440",
    "end": "1780960"
  },
  {
    "text": "um it is it would be possible for you to say monitor a cloud what a cloud watch",
    "start": "1780960",
    "end": "1786799"
  },
  {
    "text": "metric and write a small bit of script a bit of code which would basically stop your",
    "start": "1786799",
    "end": "1792880"
  },
  {
    "text": "running ec2 instance change the instance type and then start it up again so technically it's possible viable to",
    "start": "1792880",
    "end": "1799120"
  },
  {
    "text": "scripting but not out of the box",
    "start": "1799120",
    "end": "1803240"
  },
  {
    "text": "good question so the question was if we modify the launch instance configuration group",
    "start": "1808480",
    "end": "1815520"
  },
  {
    "text": "um do instances get terminated and replaced by our new amis",
    "start": "1815520",
    "end": "1820880"
  },
  {
    "text": "or instance types or whatever was that with the question yeah um",
    "start": "1820880",
    "end": "1825679"
  },
  {
    "text": "correct yes you can so the way to do it is this you don't you can't modify a launch configuration once it's created",
    "start": "1826320",
    "end": "1833440"
  },
  {
    "text": "what you do is you create a new launch configuration group with your larger ec2 instance type in",
    "start": "1833440",
    "end": "1839600"
  },
  {
    "text": "and then associate that with the existing auto scaling group and then if you wish then you can",
    "start": "1839600",
    "end": "1845919"
  },
  {
    "text": "terminate your ec2 instances which belong to the original launch configuration group and",
    "start": "1845919",
    "end": "1852080"
  },
  {
    "text": "then they will be replaced",
    "start": "1852080",
    "end": "1855640"
  },
  {
    "text": "right yes that's that's a good question so um we like to talk about averages because",
    "start": "1870480",
    "end": "1876080"
  },
  {
    "text": "obviously as you're always getting ta gets big that's what you're really interested in um but it's also useful to set up",
    "start": "1876080",
    "end": "1882960"
  },
  {
    "text": "alarms which notify your sysops team if you have an instance that you know for example you've wrote",
    "start": "1882960",
    "end": "1888720"
  },
  {
    "text": "some codes maybe like a memory leak or it's gone into a bit of a bit of a black hole in terms of cpu utilization so what",
    "start": "1888720",
    "end": "1896159"
  },
  {
    "text": "you can do is set up a little scaling sorry an alarm or alert it says if any of my instances have a cpu utilization",
    "start": "1896159",
    "end": "1903360"
  },
  {
    "text": "greater than 90 or 95 send a notification message to the sysadmin team to investigate so that's more of a",
    "start": "1903360",
    "end": "1910320"
  },
  {
    "text": "manual thing so you can investigate potentially kill it off and then let all the scaling look after the job of",
    "start": "1910320",
    "end": "1915679"
  },
  {
    "text": "skimming and growing yep",
    "start": "1915679",
    "end": "1920039"
  },
  {
    "text": "to that instance",
    "start": "1932480",
    "end": "1935840"
  },
  {
    "text": "but one very quick way is to actually terminate it um the second way is to make it fail the health check",
    "start": "1947120",
    "end": "1954000"
  },
  {
    "text": "so if it was running a web service and you really wanted to sort of take it out of service you could stop the web service if you",
    "start": "1954000",
    "end": "1959440"
  },
  {
    "text": "wanted to but what we try to do with our scaling is we want to try and build a",
    "start": "1959440",
    "end": "1965039"
  },
  {
    "text": "fault tolerant almost self-healing infrastructure so often it's just as easy to terminate the",
    "start": "1965039",
    "end": "1971840"
  },
  {
    "text": "instance which is problematic and just quickly replace it or what you could do is take a snapshot of",
    "start": "1971840",
    "end": "1978799"
  },
  {
    "text": "the instance such that you can then investigate it at a point in time in the future to see",
    "start": "1978799",
    "end": "1985200"
  },
  {
    "text": "what the actual problem was um but then replace it into in your running production system because the",
    "start": "1985200",
    "end": "1991039"
  },
  {
    "text": "key thing about production is you want to get things up and running as quickly as possible and you want to continue to sort of meet your business slas",
    "start": "1991039",
    "end": "1998320"
  },
  {
    "text": "does that answer your question or okay all right so um session affinity so i",
    "start": "1998320",
    "end": "2005039"
  },
  {
    "text": "mean nothing new here about session affinity we can do this on regular load balances the good news is we can",
    "start": "2005039",
    "end": "2010320"
  },
  {
    "text": "actually have session stickiness session affinity with uh inside of the elastic load balancing service too",
    "start": "2010320",
    "end": "2017279"
  },
  {
    "text": "um the elastic glow balance of the elb can either generate its own",
    "start": "2017279",
    "end": "2023919"
  },
  {
    "text": "um session tokens okay or it can actually uh use session",
    "start": "2023919",
    "end": "2030480"
  },
  {
    "text": "stickiness based on application level or generated token okay",
    "start": "2030480",
    "end": "2036080"
  },
  {
    "text": "so that will ensure that if a user has been interacting with a given web server that contains you know the user state",
    "start": "2036080",
    "end": "2043360"
  },
  {
    "text": "then for the remainder of the session the user will be directed back to that web server",
    "start": "2043360",
    "end": "2048960"
  },
  {
    "text": "uh what if i use say secure protocols um how can i actually look inside and see those tokens can i still do session",
    "start": "2050000",
    "end": "2056720"
  },
  {
    "text": "affinity and session stickiness well the answer is yes you can um and the way to do this is you",
    "start": "2056720",
    "end": "2063280"
  },
  {
    "text": "terminate the connection on the load balancer first of all so now the uh the traffic is not",
    "start": "2063280",
    "end": "2068960"
  },
  {
    "text": "encrypted we can now actually peek inside and see actually look at those session tokens",
    "start": "2068960",
    "end": "2074720"
  },
  {
    "text": "if there's a requirement then to have encryption all the way through back to your back-end web server what you can do",
    "start": "2074720",
    "end": "2081919"
  },
  {
    "text": "and this was a feature that we introduced several months back was to re-encrypt the traffic from the loan",
    "start": "2081919",
    "end": "2086960"
  },
  {
    "text": "balancer back to the back end web service so we can actually have encryption all the way through",
    "start": "2086960",
    "end": "2092398"
  },
  {
    "text": "and have session affinity with secure protocols",
    "start": "2092399",
    "end": "2097639"
  },
  {
    "text": "to your ec2 your web server",
    "start": "2115119",
    "end": "2119200"
  },
  {
    "text": "um yes absolutely it would yes yes so the the tokens are generated",
    "start": "2122640",
    "end": "2128640"
  },
  {
    "text": "typically by your application",
    "start": "2128640",
    "end": "2131838"
  },
  {
    "text": "can generate its own token yes uh actually it's a good question i'll",
    "start": "2136320",
    "end": "2141839"
  },
  {
    "text": "take that away and get back to",
    "start": "2141839",
    "end": "2144960"
  },
  {
    "start": "2160000",
    "end": "2220000"
  },
  {
    "text": "53 is our global low balancing service um sorry sorry rough 53 is our dns based",
    "start": "2165359",
    "end": "2170800"
  },
  {
    "text": "service uh we recently introduced a global wall balancing component to it so what you could do is imagine you have",
    "start": "2170800",
    "end": "2177200"
  },
  {
    "text": "two load balancers one in the us and one in singapore depending on where your geographically closest to the traffic",
    "start": "2177200",
    "end": "2183760"
  },
  {
    "text": "can be directed to that load balancer there's no way that we can as of today certainly um kind of manage stake",
    "start": "2183760",
    "end": "2190480"
  },
  {
    "text": "globally between ec2 instances sitting by the low balancer in the us and the same thing",
    "start": "2190480",
    "end": "2195520"
  },
  {
    "text": "over in names singapore um that the application",
    "start": "2195520",
    "end": "2201920"
  },
  {
    "text": "talks to um and because they've got different complaints around three yes the",
    "start": "2201920",
    "end": "2206960"
  },
  {
    "text": "potential that all five are going to go and fight for those",
    "start": "2206960",
    "end": "2212000"
  },
  {
    "text": "i correct yes correct",
    "start": "2212000",
    "end": "2216800"
  },
  {
    "start": "2220000",
    "end": "2340000"
  },
  {
    "text": "uh although for the for the initial connection but after the",
    "start": "2222880",
    "end": "2228240"
  },
  {
    "text": "initial connection is done obviously then you will interact with the dns record that's provided back to",
    "start": "2228240",
    "end": "2233440"
  },
  {
    "text": "you yes yes correct but the key thing is there is",
    "start": "2233440",
    "end": "2239440"
  },
  {
    "text": "that we don't send you somewhere else you know exactly once you've established your session and you've cased that local",
    "start": "2239440",
    "end": "2244800"
  },
  {
    "text": "dns record you're good to go okay so um where we're where was i so now let's",
    "start": "2244800",
    "end": "2251119"
  },
  {
    "text": "take a look at what happens during this scale down event so scaling off is relatively straightforward",
    "start": "2251119",
    "end": "2256560"
  },
  {
    "text": "we're adding new resources we're not really you know um removing any sort of session state or anything like that",
    "start": "2256560",
    "end": "2263680"
  },
  {
    "text": "um let's have a look go back to the example where at 7 pm and evening the load across the our web here is now say",
    "start": "2263680",
    "end": "2271119"
  },
  {
    "text": "um law and we decide to remove an instance from that web tier",
    "start": "2271119",
    "end": "2277599"
  },
  {
    "text": "if we are storing all of our sessions on that web server then obviously we're going to lose those user sessions and",
    "start": "2277599",
    "end": "2283599"
  },
  {
    "text": "then they will have to re-establish the session not usually a good thing",
    "start": "2283599",
    "end": "2290160"
  },
  {
    "text": "so what can we do well what we want to try and do here is take all of the state outside",
    "start": "2290160",
    "end": "2296880"
  },
  {
    "text": "of our auto scaling tier so",
    "start": "2296880",
    "end": "2301920"
  },
  {
    "text": "there are a few ways that we can do this um but here's one way so we have a a service called elastic",
    "start": "2301920",
    "end": "2309200"
  },
  {
    "text": "cache it's a memcache compliant in-memory caching database",
    "start": "2309200",
    "end": "2314880"
  },
  {
    "text": "and what we can do is in in addition to maybe storing the state locally inside of our web servers",
    "start": "2314880",
    "end": "2321040"
  },
  {
    "text": "we can also keep a copy in elastic cache so in the event where one of those web",
    "start": "2321040",
    "end": "2327040"
  },
  {
    "text": "servers is terminated either intentionally or even accidentally um we haven't lost the user's session",
    "start": "2327040",
    "end": "2333440"
  },
  {
    "text": "data they don't have to re-establish",
    "start": "2333440",
    "end": "2337560"
  },
  {
    "text": "so just very briefly take a look at how this would work inside of say apache tomcat",
    "start": "2340880",
    "end": "2347200"
  },
  {
    "text": "um you know i'd say inside of tomcat would install the memcache session uh manager on each of the tomcat servers",
    "start": "2347200",
    "end": "2354320"
  },
  {
    "text": "we configure the memcache daemon on each one of those tomcat servers to store a local copy of the of the session state",
    "start": "2354320",
    "end": "2362160"
  },
  {
    "text": "and in addition to that store a copy inside of elastic cache so in the event where the user session",
    "start": "2362160",
    "end": "2368960"
  },
  {
    "text": "is not available on a local machine it would actually go out and interrogate or or request",
    "start": "2368960",
    "end": "2375440"
  },
  {
    "text": "the session state to be provided by the elastic cache service okay",
    "start": "2375440",
    "end": "2381680"
  },
  {
    "text": "now this can be used with or without session affinity i mean the arguments for using it with session infinite",
    "start": "2381680",
    "end": "2388320"
  },
  {
    "text": "affinity would be that we would minimize the number of interactions with the elastic cache service",
    "start": "2388320",
    "end": "2396520"
  },
  {
    "text": "i had a question the other day of well you know instead of saying apache tomcat what if i wanted to use this with microsoft technologies well you know",
    "start": "2398880",
    "end": "2405760"
  },
  {
    "start": "2400000",
    "end": "2460000"
  },
  {
    "text": "absolutely we can do exactly the same thing with exactly the same techniques",
    "start": "2405760",
    "end": "2411838"
  },
  {
    "text": "okay so that covers auto scaling so let's move on to deploying our",
    "start": "2412400",
    "end": "2418480"
  },
  {
    "text": "resources in aws so what i'll do now is i'm going to share with you a few techniques and",
    "start": "2418480",
    "end": "2424240"
  },
  {
    "text": "tricks for um sort of improving the way that we can deploy our resources and we're gonna fundamentally sort of focus",
    "start": "2424240",
    "end": "2429920"
  },
  {
    "text": "on the cloud formation service so most people when they start using aws",
    "start": "2429920",
    "end": "2436880"
  },
  {
    "text": "they start here and this is the aws management console",
    "start": "2436880",
    "end": "2442480"
  },
  {
    "text": "after that they'll probably install the the api tools so basically",
    "start": "2442720",
    "end": "2448560"
  },
  {
    "text": "the tools that i'm using here on my ec2 instance",
    "start": "2448560",
    "end": "2453839"
  },
  {
    "text": "and you know you may be using these tools like puppet and shift which are great tools to allow you to to um",
    "start": "2456400",
    "end": "2463119"
  },
  {
    "start": "2460000",
    "end": "2520000"
  },
  {
    "text": "you know to configure and automate the the deployment and the configuration of",
    "start": "2463119",
    "end": "2468160"
  },
  {
    "text": "your actual operating systems okay but can we do better can we is there any",
    "start": "2468160",
    "end": "2474640"
  },
  {
    "text": "room for improvement well i believe there is and you know the solution here is cloud",
    "start": "2474640",
    "end": "2480319"
  },
  {
    "text": "formation so cloud information what it allows you to do is predictably create",
    "start": "2480319",
    "end": "2486480"
  },
  {
    "text": "and manage a collection of aws resources and it allows you to do that via a simple text based uh file or a",
    "start": "2486480",
    "end": "2494240"
  },
  {
    "text": "text-based template okay it kind of brings the level of flexibility and control",
    "start": "2494240",
    "end": "2500160"
  },
  {
    "text": "to all of your aws resources that kind of puppet and chef bring to the operating system",
    "start": "2500160",
    "end": "2505680"
  },
  {
    "text": "okay so to make things easier for you to use we actually came out with a repository",
    "start": "2505680",
    "end": "2512560"
  },
  {
    "text": "of cloud formation templates and using these templates what we can do",
    "start": "2512560",
    "end": "2519040"
  },
  {
    "text": "is you first of all define what the application architecture stack will look like so you know whether you're going to",
    "start": "2519040",
    "end": "2525119"
  },
  {
    "text": "have a load balancer whether you're going to have a security group whether you're going to use the vpc the",
    "start": "2525119",
    "end": "2530400"
  },
  {
    "text": "amis that you want to use storage that you want to attach when you want to use elastic ip addresses everything",
    "start": "2530400",
    "end": "2537838"
  },
  {
    "text": "what you can then do is incorporate parameters into your cloudformation template so what it allows you to do is",
    "start": "2538319",
    "end": "2546000"
  },
  {
    "text": "deploy a stack maybe for development on a stack for test obviously there's going",
    "start": "2546000",
    "end": "2551280"
  },
  {
    "text": "to be some subtle differences there maybe your development environment will use a different vpc or a different",
    "start": "2551280",
    "end": "2557760"
  },
  {
    "text": "set of subnets you then deploy",
    "start": "2557760",
    "end": "2563040"
  },
  {
    "text": "you know new instances of that stack based on your template",
    "start": "2563040",
    "end": "2569200"
  },
  {
    "text": "and more recently we introduced a new a tool called cloud format and what cloud",
    "start": "2570560",
    "end": "2576400"
  },
  {
    "text": "format allows you to do is you're able to point it at a group of resources and it will actually generate",
    "start": "2576400",
    "end": "2583599"
  },
  {
    "text": "the cloud formation template for you so i'm going to go through a demonstration in a few minutes fingers",
    "start": "2583599",
    "end": "2589599"
  },
  {
    "text": "crossed and hopefully at the end of it we should actually get a template which is representative of the resources that",
    "start": "2589599",
    "end": "2595839"
  },
  {
    "text": "actually have",
    "start": "2595839",
    "end": "2598319"
  },
  {
    "text": "before we do that let's take a look at a simple extract from a cloud formation template",
    "start": "2601200",
    "end": "2607920"
  },
  {
    "text": "so what you can see here is an extract from a a cloud formation template that's",
    "start": "2607920",
    "end": "2614880"
  },
  {
    "text": "defining a load balancer so the first thing that we do with the load balancer is we specify the",
    "start": "2614880",
    "end": "2620720"
  },
  {
    "text": "availability zones that we wish the load balancer to be able to lower bounce traffic to",
    "start": "2620720",
    "end": "2626640"
  },
  {
    "text": "we specify the the cookie policy so in the session affinity",
    "start": "2626640",
    "end": "2632480"
  },
  {
    "text": "we specify the one or more ports that we wish the load balancer to listen on",
    "start": "2633520",
    "end": "2639440"
  },
  {
    "text": "and then route traffic to on the back end you know instances",
    "start": "2639440",
    "end": "2644480"
  },
  {
    "start": "2640000",
    "end": "2700000"
  },
  {
    "text": "so as you can see here we're listening on port 80 i'll be forwarding the traffic back through to port 80 on the",
    "start": "2644480",
    "end": "2650160"
  },
  {
    "text": "back end and then finally we specify a health check so this is a very simple health",
    "start": "2650160",
    "end": "2656480"
  },
  {
    "text": "check all we're doing is basically looking at looking at port 80.",
    "start": "2656480",
    "end": "2662720"
  },
  {
    "text": "uh we specify things like uh healthy thresholds and unhealthy thresholds and what those are are we",
    "start": "2662720",
    "end": "2670079"
  },
  {
    "text": "need to have two positive tests be successful for us to deem an instance to be healthy",
    "start": "2670079",
    "end": "2677119"
  },
  {
    "text": "and we need to have five um tests fail for us today and instance",
    "start": "2677119",
    "end": "2682319"
  },
  {
    "text": "to be unhealthy um",
    "start": "2682319",
    "end": "2687359"
  },
  {
    "text": "and then we have some intervals and timeouts etc specified as well so for example the interval there is we do the",
    "start": "2687359",
    "end": "2692960"
  },
  {
    "text": "health check every 10 seconds and the timeout is if the instance hasn't responded within",
    "start": "2692960",
    "end": "2698640"
  },
  {
    "text": "five seconds we're going to class it as fail okay",
    "start": "2698640",
    "end": "2705280"
  },
  {
    "text": "so the last time i had to deploy a physical environment that involved",
    "start": "2705280",
    "end": "2713119"
  },
  {
    "text": "creating network subnets involved creating you know ipsec vpn tunnels",
    "start": "2713119",
    "end": "2720400"
  },
  {
    "text": "i involved deploying you know servers getting them wrapped and stacked it took weeks",
    "start": "2720400",
    "end": "2727040"
  },
  {
    "text": "using aws and cloud formation what we can do is we can actually deploy a vpc with",
    "start": "2727040",
    "end": "2733280"
  },
  {
    "text": "multiple subnets auto scaling group and a load balancer in only a few minutes",
    "start": "2733280",
    "end": "2738720"
  },
  {
    "text": "now let's see if we can make it happen today right",
    "start": "2738720",
    "end": "2746440"
  },
  {
    "text": "okay so what i'm going to do is go to the us",
    "start": "2747119",
    "end": "2753440"
  },
  {
    "text": "mission",
    "start": "2754079",
    "end": "2756400"
  },
  {
    "text": "so i'll start from the template screen or template page on our",
    "start": "2759680",
    "end": "2764960"
  },
  {
    "start": "2760000",
    "end": "2820000"
  },
  {
    "text": "on our website and i'll go through to our sample templates",
    "start": "2764960",
    "end": "2770480"
  },
  {
    "text": "if i scroll down you'll see here at the top of the the templates page we've actually got several templates for",
    "start": "2772960",
    "end": "2778960"
  },
  {
    "text": "oops make it a bit bigger uh for you know microsoft windows servers so we have a template here for",
    "start": "2778960",
    "end": "2784800"
  },
  {
    "text": "sharepoint one for active directory so this isn't just for linux and real sort of agile flexible operating systems this",
    "start": "2784800",
    "end": "2791440"
  },
  {
    "text": "includes windows as well we can do some really cool stuff so what we'll do here is we'll take a",
    "start": "2791440",
    "end": "2798240"
  },
  {
    "text": "look at the vpc with multiple subnets so",
    "start": "2798240",
    "end": "2803838"
  },
  {
    "text": "what i'll do is i'll kick off the cloud formation template build and then we'll actually step through the template to",
    "start": "2804480",
    "end": "2810000"
  },
  {
    "text": "see what's going on as the environment is being built out so launching the stack is as simple as",
    "start": "2810000",
    "end": "2815760"
  },
  {
    "text": "this launch stack",
    "start": "2815760",
    "end": "2821119"
  },
  {
    "start": "2820000",
    "end": "2880000"
  },
  {
    "text": "okay so it's going to use the the cloud",
    "start": "2824319",
    "end": "2830560"
  },
  {
    "text": "formation template is actually stored on top of s3 so our simple storage service",
    "start": "2830560",
    "end": "2837359"
  },
  {
    "text": "i'll give the stack a name so let's leave it as is so vpc with two subnets",
    "start": "2837359",
    "end": "2842400"
  },
  {
    "text": "you continue the number of instance counts so this is",
    "start": "2842400",
    "end": "2848880"
  },
  {
    "text": "going to be the number of instances that we will launch into our private subnet inside of the vpc at the time that we",
    "start": "2848880",
    "end": "2855359"
  },
  {
    "text": "launch it i'll choose four",
    "start": "2855359",
    "end": "2860960"
  },
  {
    "text": "and i'm going to leave it as an m1 small so this is one of our smaller ec2 instance types",
    "start": "2861359",
    "end": "2867920"
  },
  {
    "text": "to continue all looks good",
    "start": "2867920",
    "end": "2874079"
  },
  {
    "text": "and now you continue so what it'll do now is it will go away and actually create all of the resources",
    "start": "2874079",
    "end": "2880559"
  },
  {
    "start": "2880000",
    "end": "2940000"
  },
  {
    "text": "that we're about to see in step in sequence and actually deploy the entire",
    "start": "2880559",
    "end": "2885599"
  },
  {
    "text": "infrastructure so let me hop back to my slides for a moment",
    "start": "2885599",
    "end": "2891200"
  },
  {
    "text": "and here's a picture that i prepared earlier so what we're about to do is actually build out something that looks like this so we're using the virtual",
    "start": "2891200",
    "end": "2898079"
  },
  {
    "text": "private cloud the vpc um i lied slightly there's going to be no route 53 there um it's going to be a bit",
    "start": "2898079",
    "end": "2904559"
  },
  {
    "text": "simpler than that we will deploy elastic load balancer inside of our public subnet so this is",
    "start": "2904559",
    "end": "2909680"
  },
  {
    "text": "going to be a in a 10 0 0 0 4 24 subnet and then",
    "start": "2909680",
    "end": "2915359"
  },
  {
    "text": "behind that we're going to have a series of web servers inside of a private subnet now those web servers are only",
    "start": "2915359",
    "end": "2922480"
  },
  {
    "text": "accessible from the elastic load balancer they don't have a public ip address they only have private ip",
    "start": "2922480",
    "end": "2929520"
  },
  {
    "text": "addresses and sort of fit behind the elastic load balancer",
    "start": "2929520",
    "end": "2934559"
  },
  {
    "text": "okay let's take a close look at the actual template",
    "start": "2934559",
    "end": "2940119"
  },
  {
    "start": "2940000",
    "end": "3000000"
  },
  {
    "text": "okay so inside of a cloud formation template at the top",
    "start": "2946079",
    "end": "2952720"
  },
  {
    "text": "you need a binoculars from the back to see that let's make it bigger",
    "start": "2953359",
    "end": "2958400"
  },
  {
    "text": "how's that it's probably as good as i can do um so what we have here is the top a series of",
    "start": "2959680",
    "end": "2966160"
  },
  {
    "text": "parameters and there are two parameters that it was asking us for so one is the instance type",
    "start": "2966160",
    "end": "2971839"
  },
  {
    "text": "and then which is specified here um by default it's going to select an m1",
    "start": "2971839",
    "end": "2977760"
  },
  {
    "text": "small we can see that and then in addition to that we can it asks us for an instance count",
    "start": "2977760",
    "end": "2986078"
  },
  {
    "text": "and by default it was set equal to one now one of the things that cloud formation allows us to do is set up a",
    "start": "2987280",
    "end": "2993760"
  },
  {
    "text": "series of mapping functions and why these are useful or interesting is that for example if i were to deploy",
    "start": "2993760",
    "end": "3001040"
  },
  {
    "start": "3000000",
    "end": "3060000"
  },
  {
    "text": "this transformation template inside of say singapore then the amazon machine images and their",
    "start": "3001040",
    "end": "3008160"
  },
  {
    "text": "respective ids there would be different to what they would be in say japan or",
    "start": "3008160",
    "end": "3013599"
  },
  {
    "text": "the us so we need to have some way to map between a region say u.s",
    "start": "3013599",
    "end": "3019920"
  },
  {
    "text": "east and the respective ami to use whether it be 32 bay or 64",
    "start": "3019920",
    "end": "3025760"
  },
  {
    "text": "so that's why we have these mapping functions and then what we have is this whole",
    "start": "3025760",
    "end": "3030960"
  },
  {
    "text": "series of resources now the first resource that we see here is around actually creating the vpc",
    "start": "3030960",
    "end": "3037520"
  },
  {
    "text": "so what we're going to do is create a we're going to use a class b our subnet",
    "start": "3037520",
    "end": "3043280"
  },
  {
    "text": "for our vpc um vpc as of today can be as big as a class b so you should have plenty of",
    "start": "3043280",
    "end": "3048960"
  },
  {
    "text": "scope there for deploying your uh your architectures and in addition to that what we're going",
    "start": "3048960",
    "end": "3055040"
  },
  {
    "text": "to do is we will create a public subnet so as you saw earlier i had a class c",
    "start": "3055040",
    "end": "3060240"
  },
  {
    "start": "3060000",
    "end": "3120000"
  },
  {
    "text": "subnet for my public subnet and i'm going to create a public subnet to place my elastic load balancer inside",
    "start": "3060240",
    "end": "3066800"
  },
  {
    "text": "of i then create an internet gateway this is the means by which all my",
    "start": "3066800",
    "end": "3073839"
  },
  {
    "text": "resources in the public subnet can talk to the internet",
    "start": "3073839",
    "end": "3078880"
  },
  {
    "text": "i'll just quickly scan through some of these so we have a public routing table we set up routes",
    "start": "3079920",
    "end": "3086800"
  },
  {
    "text": "we associate that route routing table with the subnet",
    "start": "3086800",
    "end": "3092000"
  },
  {
    "text": "and then what we do is create a whole series of access control lists so we're now specifying what type of traffic is",
    "start": "3092400",
    "end": "3098400"
  },
  {
    "text": "able to flow you know between our various subnets and here we're basically creating some",
    "start": "3098400",
    "end": "3104720"
  },
  {
    "text": "we're allowing you know port 80 to flow inbound port 80 to our public network",
    "start": "3104720",
    "end": "3112480"
  },
  {
    "text": "scan down in addition to our public network we're",
    "start": "3113599",
    "end": "3119839"
  },
  {
    "text": "also going to create a private subnet specifying the uh",
    "start": "3119839",
    "end": "3126400"
  },
  {
    "start": "3120000",
    "end": "3180000"
  },
  {
    "text": "the network range here and then once again we create a routing table and a series of access control",
    "start": "3126400",
    "end": "3133760"
  },
  {
    "text": "lists for that private subnet",
    "start": "3133760",
    "end": "3138040"
  },
  {
    "text": "so now we have our vpc we have a private and we have our public subnet the next thing we need to do now is start to place resources inside of those um those",
    "start": "3141200",
    "end": "3149119"
  },
  {
    "text": "subnets so we now create an elastic wall balancer um we're going to use we're going to",
    "start": "3149119",
    "end": "3154800"
  },
  {
    "text": "listen on port 80 and then we're going to route that traffic through to the back end web servers on port 80.",
    "start": "3154800",
    "end": "3161680"
  },
  {
    "text": "we specify a health check so it's going to be an interval of 90",
    "start": "3161680",
    "end": "3167200"
  },
  {
    "text": "seconds i'm going to specify a timeout of 60 seconds in order for an instance to be deemed",
    "start": "3167200",
    "end": "3173599"
  },
  {
    "text": "healthy needs to pass three um successful health checks for it to be",
    "start": "3173599",
    "end": "3178880"
  },
  {
    "text": "deemed unhealthy needs to fail five you obviously have full control over that",
    "start": "3178880",
    "end": "3184480"
  },
  {
    "start": "3180000",
    "end": "3240000"
  },
  {
    "text": "we specify security groups so in addition to having these network acls which restrict traffic flow between",
    "start": "3184480",
    "end": "3190000"
  },
  {
    "text": "subnets we can also specify at an even more granular level what kind of traffic can flow between um some between",
    "start": "3190000",
    "end": "3197200"
  },
  {
    "text": "security groups inside of our um our architecture",
    "start": "3197200",
    "end": "3202559"
  },
  {
    "text": "so we're defining this uh in this case here we're defining a web server group this is going to be an auto",
    "start": "3202640",
    "end": "3209200"
  },
  {
    "text": "scanning group inside of that auto scaling group we're going to have our",
    "start": "3209200",
    "end": "3214319"
  },
  {
    "text": "web server instances we see our launch configuration here so",
    "start": "3214319",
    "end": "3220079"
  },
  {
    "text": "that might seem familiar to you based on the launch config that i created using the command line earlier",
    "start": "3220079",
    "end": "3227440"
  },
  {
    "text": "and then finally we have an outputs section so the output section basically gets",
    "start": "3231440",
    "end": "3236880"
  },
  {
    "text": "provided or presented to you inside of the management console once your stack has been created and the reason why",
    "start": "3236880",
    "end": "3243200"
  },
  {
    "text": "that's useful is because imagine as part of your deployment you want to know things like what's the",
    "start": "3243200",
    "end": "3248559"
  },
  {
    "text": "elastic load balancer's name or what's what are the eips the elastic ip addresses that i created there'll be",
    "start": "3248559",
    "end": "3254000"
  },
  {
    "text": "variables which are only generated or created during the stack deployment process itself",
    "start": "3254000",
    "end": "3259440"
  },
  {
    "text": "so the way that we can obtain that information is via the output section",
    "start": "3259440",
    "end": "3264720"
  },
  {
    "text": "so let's hop back to the management console and do refresh",
    "start": "3264720",
    "end": "3270240"
  },
  {
    "text": "okay so this is the stack that we created",
    "start": "3276839",
    "end": "3285400"
  },
  {
    "text": "okay so scroll down to the bottom um when you deploy a stack",
    "start": "3294000",
    "end": "3300559"
  },
  {
    "start": "3300000",
    "end": "3360000"
  },
  {
    "text": "what you'll see is as the stack is being created the events",
    "start": "3300559",
    "end": "3305920"
  },
  {
    "text": "section of the actual this the stack um will start to show what's happening",
    "start": "3305920",
    "end": "3312000"
  },
  {
    "text": "so the first thing that we look to do is to we have a message here saying we're creating the",
    "start": "3312000",
    "end": "3318079"
  },
  {
    "text": "actual stack the next thing we see is that we're actually creating the vpc",
    "start": "3318079",
    "end": "3323359"
  },
  {
    "text": "after the vpc has been established we start to create the public subnet so you can see how this matches up to what we",
    "start": "3323359",
    "end": "3328880"
  },
  {
    "text": "saw inside of the template file itself and then if everything goes well right",
    "start": "3328880",
    "end": "3334319"
  },
  {
    "text": "at the top we will see that the stack creation was actually successful okay",
    "start": "3334319",
    "end": "3340480"
  },
  {
    "text": "so if we hop to the output section the output section here provides us with",
    "start": "3340480",
    "end": "3346160"
  },
  {
    "text": "the elastic load balancer url that was created during the whole process",
    "start": "3346160",
    "end": "3351680"
  },
  {
    "text": "so um the instances probably haven't passed the health check yet but i'll open it anyway",
    "start": "3351680",
    "end": "3358318"
  },
  {
    "text": "yeah so what this is telling me is the elastic load balancer is up and running but the instances sitting behind it",
    "start": "3359359",
    "end": "3365599"
  },
  {
    "start": "3360000",
    "end": "3420000"
  },
  {
    "text": "haven't passed the health check just yet so what we'll do is we'll come back to this in a bit and i'll go on and talk",
    "start": "3365599",
    "end": "3371280"
  },
  {
    "text": "about something else yes",
    "start": "3371280",
    "end": "3376680"
  },
  {
    "text": "yeah so well there's two things you can do well one is i would personally like to either use cloud format and it's too",
    "start": "3383119",
    "end": "3390160"
  },
  {
    "text": "long to demonstrate right now to say these are the resources i'm interested in give me a template that's",
    "start": "3390160",
    "end": "3396079"
  },
  {
    "text": "representative of them uh the other thing that i would love to do is actually take one of those templates the changes that i needed to",
    "start": "3396079",
    "end": "3402880"
  },
  {
    "text": "make and then use that",
    "start": "3402880",
    "end": "3407000"
  },
  {
    "start": "3420000",
    "end": "3480000"
  },
  {
    "text": "well you don't have to launch an entire you know duplicate of your infrastructure you just launch whatever",
    "start": "3422559",
    "end": "3428079"
  },
  {
    "text": "the template basically says yes exactly",
    "start": "3428079",
    "end": "3433680"
  },
  {
    "text": "okay so let's take a look at cloud four",
    "start": "3435680",
    "end": "3441880"
  },
  {
    "text": "okay so let's go to here",
    "start": "3449280",
    "end": "3456520"
  },
  {
    "text": "uh",
    "start": "3468240",
    "end": "3471240"
  },
  {
    "start": "3480000",
    "end": "3540000"
  },
  {
    "text": "okay so what we'll do i mean cloudformer this tool that allows you to",
    "start": "3485680",
    "end": "3491520"
  },
  {
    "text": "generate a template based on existing resources is itself",
    "start": "3491520",
    "end": "3496720"
  },
  {
    "text": "a cloud formation template what we'll do is actually deploy a simple ruby based web server",
    "start": "3496720",
    "end": "3503280"
  },
  {
    "text": "which will which will then allow you to sort of select the resources that you're interested in so let's kick this off",
    "start": "3503280",
    "end": "3509520"
  },
  {
    "text": "i'll leave the the default option as is",
    "start": "3509520",
    "end": "3514480"
  },
  {
    "text": "continue",
    "start": "3514720",
    "end": "3517720"
  },
  {
    "text": "ah i've already got one here's what i prepared earlier so actually i started one up the other day um",
    "start": "3528799",
    "end": "3535040"
  },
  {
    "text": "save us some time so what i can do is if i go to my output",
    "start": "3535040",
    "end": "3540559"
  },
  {
    "start": "3540000",
    "end": "3599000"
  },
  {
    "text": "section i see here i have a nice url to my ruby web server",
    "start": "3540559",
    "end": "3546318"
  },
  {
    "text": "ah so okay so the first thing you see with the",
    "start": "3550799",
    "end": "3556799"
  },
  {
    "text": "cloud cloudformer is it allows you to select the region that you're interested in so for the purpose of this test i'll",
    "start": "3556799",
    "end": "3562640"
  },
  {
    "text": "just say use say us east create template",
    "start": "3562640",
    "end": "3569960"
  },
  {
    "text": "okay so the next thing we do is actually give the template that we're about to create a name so it could be aws",
    "start": "3573920",
    "end": "3580799"
  },
  {
    "text": "summit now we're able to space specifying resource name filters so imagine that we",
    "start": "3580799",
    "end": "3586720"
  },
  {
    "text": "have associated the tag of let's say",
    "start": "3586720",
    "end": "3591839"
  },
  {
    "text": "example.com with all of my resources for a given project",
    "start": "3591839",
    "end": "3598000"
  },
  {
    "text": "and what i can then do is it will actually then only restrict its view to only resources with those given tags",
    "start": "3598000",
    "end": "3606160"
  },
  {
    "text": "so just do continue i can now select the dns resources that i that i would want so in this case here",
    "start": "3606160",
    "end": "3613359"
  },
  {
    "text": "i'll choose a aws workshop resource that i previously created",
    "start": "3613359",
    "end": "3618798"
  },
  {
    "text": "i can choose my network resources so i'll choose this elb elastic ip address",
    "start": "3619440",
    "end": "3627319"
  },
  {
    "text": "some compute resources",
    "start": "3629280",
    "end": "3632400"
  },
  {
    "text": "configuration storage and storage includes elastic block storage volumes it includes",
    "start": "3634400",
    "end": "3641359"
  },
  {
    "text": "a database instances it also includes s3 buckets as well",
    "start": "3641359",
    "end": "3646720"
  },
  {
    "text": "so security groups",
    "start": "3650160",
    "end": "3653880"
  },
  {
    "text": "other bits and bobs include things like sqs queues and simpledb domains",
    "start": "3656480",
    "end": "3664078"
  },
  {
    "text": "uh some operational things like for example auto scaling groups",
    "start": "3664240",
    "end": "3670760"
  },
  {
    "text": "and then you continue and it's a little bit difficult to see but",
    "start": "3672400",
    "end": "3679040"
  },
  {
    "text": "what you can see here is that based on all the resources that i selected through that process it's now",
    "start": "3679040",
    "end": "3686319"
  },
  {
    "text": "created a cloud formation template for me so you know we still have a long way to go with this it's kind of constantly",
    "start": "3686319",
    "end": "3692799"
  },
  {
    "text": "evolving over time but i can see how this is going to be a really powerful way for us to very quickly say hey these are my resources",
    "start": "3692799",
    "end": "3699040"
  },
  {
    "text": "give me a template that is representative of them yes",
    "start": "3699040",
    "end": "3704200"
  },
  {
    "text": "quickly extremely very difficult to just work",
    "start": "3712000",
    "end": "3720000"
  },
  {
    "text": "what we were going to do is",
    "start": "3720880",
    "end": "3725078"
  },
  {
    "text": "no so workforce service is an orchestration service what you can do is you can actually call",
    "start": "3736480",
    "end": "3742720"
  },
  {
    "text": "you you can actually have um inside of a cloud formation template you can call other cloud information stacks",
    "start": "3742720",
    "end": "3748799"
  },
  {
    "text": "so that might be a way for you to in effect do like a divide and conquer strategy so break it up to some small",
    "start": "3748799",
    "end": "3754799"
  },
  {
    "text": "more bite size of components so i'll potentially look at that yeah um",
    "start": "3754799",
    "end": "3763319"
  },
  {
    "text": "so thanks for reminding me so aws visual studio like give you more of a visual easy to use approach to building out these these",
    "start": "3778319",
    "end": "3784880"
  },
  {
    "text": "templates so yeah thank you for mentioning that okay so um",
    "start": "3784880",
    "end": "3791039"
  },
  {
    "text": "let's hop back to the slides let's go here",
    "start": "3791039",
    "end": "3797839"
  },
  {
    "text": "cool okay um mindful of time so let's let's let's move on um what i'll do now is",
    "start": "3798559",
    "end": "3805359"
  },
  {
    "text": "actually share with you some sort of techniques and some strategies for securely accessing your ec",
    "start": "3805359",
    "end": "3810880"
  },
  {
    "text": "your aws resources from inside of ec2 and also from mobile devices",
    "start": "3810880",
    "end": "3816559"
  },
  {
    "text": "so um imagine the scenario we need to provide access to dynamodb",
    "start": "3816559",
    "end": "3822160"
  },
  {
    "text": "from an ec2 instance",
    "start": "3822160",
    "end": "3826240"
  },
  {
    "text": "so option number one baking aws credentials into the ami",
    "start": "3827440",
    "end": "3834880"
  },
  {
    "text": "um by baking in those credentials what you're basically doing is obviously those credentials give you full access to all of your aws resources",
    "start": "3835359",
    "end": "3843839"
  },
  {
    "text": "uh if the ami or the ec2 instance is either compromised or you accidentally share it with somebody um then in effect",
    "start": "3843839",
    "end": "3851119"
  },
  {
    "text": "that person has access to your to your resources and rotating the credentials involves",
    "start": "3851119",
    "end": "3857440"
  },
  {
    "text": "rebuilding the ami so as you would expect you know there are",
    "start": "3857440",
    "end": "3862559"
  },
  {
    "text": "some improvements that we need to do here not just from a security perspective but also from a manageability perspective",
    "start": "3862559",
    "end": "3870078"
  },
  {
    "text": "so introducing identity and access management um what iam allows you to do is securely",
    "start": "3870559",
    "end": "3876960"
  },
  {
    "text": "control user access to your aws resources",
    "start": "3876960",
    "end": "3882400"
  },
  {
    "text": "so iem allows you to create a series of users and groups and roles and what you could potentially do is",
    "start": "3883359",
    "end": "3889359"
  },
  {
    "text": "create a user which only has access to add new entries to say dynamo db",
    "start": "3889359",
    "end": "3895200"
  },
  {
    "text": "so that sounds like a very positive step so option number two is to do exactly",
    "start": "3895200",
    "end": "3900480"
  },
  {
    "text": "what we did in option number one but instead use ian well we certainly improved the security",
    "start": "3900480",
    "end": "3906799"
  },
  {
    "text": "of this solution because now we have a far far restricted um you know",
    "start": "3906799",
    "end": "3912240"
  },
  {
    "text": "access to our resources but rotating those credentials still",
    "start": "3912240",
    "end": "3917280"
  },
  {
    "text": "requires rebuilding the ami so i think there's certainly some room for improvement there still to go",
    "start": "3917280",
    "end": "3925359"
  },
  {
    "text": "so option number three an option number three is an option that's commonly used today and it's actually good you know pretty solid practice as well",
    "start": "3925760",
    "end": "3932400"
  },
  {
    "text": "and that is to pass in your iam credentials as the instance is booting up via user data",
    "start": "3932400",
    "end": "3940880"
  },
  {
    "text": "so rotating the iem credentials no longer",
    "start": "3942960",
    "end": "3949440"
  },
  {
    "text": "involves us having to rebuild the ami because they're never part of the amazon machine image",
    "start": "3949440",
    "end": "3956798"
  },
  {
    "text": "however we still need to think of a way of how we're going to rotate those credentials you know if we need to rotate them as part of our regular sort",
    "start": "3957680",
    "end": "3964400"
  },
  {
    "text": "of security best practices and the final thing to consider is",
    "start": "3964400",
    "end": "3970640"
  },
  {
    "text": "any user on that ec2 instance which has access to this url has access to your metadata so",
    "start": "3970640",
    "end": "3977440"
  },
  {
    "text": "potentially has access to your ian credentials",
    "start": "3977440",
    "end": "3982160"
  },
  {
    "text": "so let's take a look at option number four so option number four is to have a two-stage lookup of those iam",
    "start": "3982720",
    "end": "3988880"
  },
  {
    "text": "credentials and instead of passing in your iam credentials as the instance is booting",
    "start": "3988880",
    "end": "3994640"
  },
  {
    "text": "up what we can do is pass in a pre-signed",
    "start": "3994640",
    "end": "4000480"
  },
  {
    "text": "time-based url to s3 and s3 contains those high-end",
    "start": "4000480",
    "end": "4006240"
  },
  {
    "text": "credentials um that allows the instance to download those credentials",
    "start": "4006240",
    "end": "4011839"
  },
  {
    "text": "and then you know if the instance if the instance is say compromised after",
    "start": "4011839",
    "end": "4016880"
  },
  {
    "text": "that url expires basically no longer has access to the details or data on s3",
    "start": "4016880",
    "end": "4023839"
  },
  {
    "text": "so it certainly has improved security but it complicates our auto scaling",
    "start": "4023839",
    "end": "4029440"
  },
  {
    "text": "option number five and this is what i'm seeing most often in the field right now is it's to use your",
    "start": "4029440",
    "end": "4035599"
  },
  {
    "text": "config management system whether it be puppet chef cf engine or something else to actually manage those ian credentials",
    "start": "4035599",
    "end": "4041839"
  },
  {
    "text": "and push and rotate them",
    "start": "4041839",
    "end": "4046039"
  },
  {
    "text": "okay so that's how we secure access from ec2",
    "start": "4048079",
    "end": "4053520"
  },
  {
    "text": "to our other aws resources but what do we do with mobile devices",
    "start": "4053520",
    "end": "4060400"
  },
  {
    "text": "so the first option with a mobile device is to use exactly the same technique but in this case now is to have a separate",
    "start": "4060960",
    "end": "4067039"
  },
  {
    "text": "ian user for every single mobile device that's not going to scale",
    "start": "4067039",
    "end": "4072799"
  },
  {
    "text": "um obviously with mobile-based applications we can have tens or hundreds of thousands of mobile devices",
    "start": "4072799",
    "end": "4078319"
  },
  {
    "text": "and users so we need to think of a way around this and the the iam team have come up with a",
    "start": "4078319",
    "end": "4085359"
  },
  {
    "text": "solution and the solution is by using temporary security tokens",
    "start": "4085359",
    "end": "4091839"
  },
  {
    "text": "and these are time-based these provide time-based access to mobile devices",
    "start": "4091839",
    "end": "4097120"
  },
  {
    "text": "to our aws resources so this is typically how it's used",
    "start": "4097120",
    "end": "4103359"
  },
  {
    "text": "we would have our mobile devices interacting with a session proxy",
    "start": "4103359",
    "end": "4108880"
  },
  {
    "text": "the device will authenticate with that session proxy the session proxy would request a token",
    "start": "4110640",
    "end": "4117520"
  },
  {
    "text": "for the device from the aws security token service pass the token back to the device",
    "start": "4117520",
    "end": "4125278"
  },
  {
    "text": "oops and then the device can interact with that service for the time duration at",
    "start": "4125279",
    "end": "4132000"
  },
  {
    "text": "which the token is valid and one of the good things about this is that we can have",
    "start": "4132000",
    "end": "4137838"
  },
  {
    "text": "you know hundreds of thousands or millions of devices in effect using the same iam user account",
    "start": "4137839",
    "end": "4144400"
  },
  {
    "text": "or user but with obviously having different session tokens",
    "start": "4144400",
    "end": "4149600"
  },
  {
    "text": "okay well now let's take a look at um",
    "start": "4150239",
    "end": "4156640"
  },
  {
    "text": "tracking and identification so what we want to try and avoid is",
    "start": "4156640",
    "end": "4162960"
  },
  {
    "text": "having resources everywhere and things becoming imagined so you know what i'm going to share with you now is some",
    "start": "4162960",
    "end": "4169199"
  },
  {
    "text": "techniques to help you avoid an unmanageable environment so one of the things i'd first like to",
    "start": "4169199",
    "end": "4175520"
  },
  {
    "text": "talk about is uh tags so we came out with this um the ability for you to tag your",
    "start": "4175520",
    "end": "4181440"
  },
  {
    "text": "resources okay so associate an effect like a yellow posted sticky note to say",
    "start": "4181440",
    "end": "4187440"
  },
  {
    "text": "this ebs volume here is uh owned by this given production system or this ec2",
    "start": "4187440",
    "end": "4193679"
  },
  {
    "text": "instance is a dns server or this ec2 instance has a fully qualified domain name of you know",
    "start": "4193679",
    "end": "4199199"
  },
  {
    "text": "myhost.example.com tags can be associated either by the command line api call or through the",
    "start": "4199199",
    "end": "4206640"
  },
  {
    "text": "management console the most common task or the most common",
    "start": "4206640",
    "end": "4212159"
  },
  {
    "text": "tag to use is a tag for names okay so typically people use the fully qualified domain name uh for the for the name tag",
    "start": "4212159",
    "end": "4222000"
  },
  {
    "text": "once you've associated a tag with your instance or instances what you can do",
    "start": "4224239",
    "end": "4230400"
  },
  {
    "text": "is use some of the filter tools to say well share with me all of the ec2 instances",
    "start": "4230400",
    "end": "4235760"
  },
  {
    "text": "that have a a type of production or have a type of production or say a type of",
    "start": "4235760",
    "end": "4243280"
  },
  {
    "text": "belong to the example.com project let's say okay and you can filter out those",
    "start": "4243280",
    "end": "4248640"
  },
  {
    "text": "instances either using the management console or using the command line tools",
    "start": "4248640",
    "end": "4254880"
  },
  {
    "text": "uh here's a simple example of how to associate a tag with an ami and ec2",
    "start": "4257280",
    "end": "4262800"
  },
  {
    "text": "instance and in this case here what we're going to do is associate the tag of web server",
    "start": "4262800",
    "end": "4268880"
  },
  {
    "text": "with those two resources and also associate the stack of production so whether it be stack or type",
    "start": "4268880",
    "end": "4275679"
  },
  {
    "text": "whatever works for you it's just a it's just basically a simple association",
    "start": "4275679",
    "end": "4281678"
  },
  {
    "text": "uh one another useful thing is we can associate tags with instances in an auto scaling group so this is before they've",
    "start": "4282000",
    "end": "4287920"
  },
  {
    "text": "even been created so if you have a an architecture that has multiple",
    "start": "4287920",
    "end": "4293679"
  },
  {
    "text": "tiers and components things like the database tier tends to be more static",
    "start": "4293679",
    "end": "4299280"
  },
  {
    "text": "obviously your web application t is going to be more dynamic and grow and shrink so it's good to have a way that",
    "start": "4299280",
    "end": "4304480"
  },
  {
    "text": "we can associate tags with these resources even even before they're even going to be launched",
    "start": "4304480",
    "end": "4311960"
  },
  {
    "text": "um",
    "start": "4334480",
    "end": "4337480"
  },
  {
    "text": "because there's nothing stopping you associating the same time with multiple ami so it kind of gets a bit confusing that's actually what i would like to do",
    "start": "4350800",
    "end": "4359280"
  },
  {
    "text": "right i guess it's because there's a there's not a one-to-one mapping there's a one-to-one mapping going the other way",
    "start": "4362800",
    "end": "4370120"
  },
  {
    "text": "today so the tools are actually being obviously as we added new features to aws the tools are obviously you know",
    "start": "4384320",
    "end": "4390960"
  },
  {
    "text": "evolving to to keep up with that as well and um we also work closely with our partners to ensure that",
    "start": "4390960",
    "end": "4397040"
  },
  {
    "text": "their tool sets are evolving very very closely as well",
    "start": "4397040",
    "end": "4401760"
  },
  {
    "text": "specifically which part of well cloudwatch is more focused on once again if cloudwash is focused on",
    "start": "4405840",
    "end": "4413199"
  },
  {
    "text": "resources so you know when i visit your time in the future where you have you know cloudwatch reporting on the",
    "start": "4413199",
    "end": "4419920"
  },
  {
    "text": "tags as well possibly who knows okay",
    "start": "4419920",
    "end": "4426320"
  },
  {
    "text": "um so just briefly finishing off here i've got about say five or six minutes left as of today the number of resources that",
    "start": "4426320",
    "end": "4433920"
  },
  {
    "text": "you can associate with the tag are included here so things like vpc",
    "start": "4433920",
    "end": "4439360"
  },
  {
    "text": "subnets you know images instances security groups etc um",
    "start": "4439360",
    "end": "4445360"
  },
  {
    "text": "as time goes by we're adding more and more taggable resources um so",
    "start": "4445360",
    "end": "4451120"
  },
  {
    "text": "watch this space finally the last few minutes that i have",
    "start": "4451120",
    "end": "4456400"
  },
  {
    "text": "i'd like to briefly cover with you some techniques for scaling databases",
    "start": "4456400",
    "end": "4461920"
  },
  {
    "text": "we have two types of database available to us or two sort of large categorizations of",
    "start": "4463120",
    "end": "4468239"
  },
  {
    "text": "database first of all we have no sql databases so things like you know mango cassandra",
    "start": "4468239",
    "end": "4474719"
  },
  {
    "text": "um couchdb are things like simpledb and dynamodb which are our own managed nosql",
    "start": "4474719",
    "end": "4481679"
  },
  {
    "text": "databases and then on the right-hand side we have more traditional enterprise yes",
    "start": "4481679",
    "end": "4488800"
  },
  {
    "text": "so dynamodb was based on an original paper written by called um",
    "start": "4491920",
    "end": "4496960"
  },
  {
    "text": "called dynamo so one of our contributors was actually verna vogels he was one of the one of the contributors to the",
    "start": "4496960",
    "end": "4502159"
  },
  {
    "text": "actual academic paper so it's based on that in a similar way to cassandra is based on dynamo the paper",
    "start": "4502159",
    "end": "4509800"
  },
  {
    "text": "on the right hand side we have more traditional relational databases so obviously data is stored in a more structured manner",
    "start": "4513360",
    "end": "4520239"
  },
  {
    "text": "um obviously scaling databases is easier if those databases are managed because",
    "start": "4520239",
    "end": "4528159"
  },
  {
    "text": "somebody else has to worry about scaling okay one of the things i really like about dynamodb is i don't have to figure out",
    "start": "4528159",
    "end": "4534480"
  },
  {
    "text": "how to distribute data on the backend storage system to make it scale to 100 000 concurrent reading rights",
    "start": "4534480",
    "end": "4541920"
  },
  {
    "text": "that's the responsibility of the the dynamodb team inside of aws",
    "start": "4541920",
    "end": "4548320"
  },
  {
    "text": "uh while talking about managed databases in the relational database space we also have the relational database of service",
    "start": "4548320",
    "end": "4556080"
  },
  {
    "text": "rds and that comes in three flavors we have microsoft sql server we have oracle and",
    "start": "4556080",
    "end": "4561199"
  },
  {
    "text": "we also have mysql okay",
    "start": "4561199",
    "end": "4566880"
  },
  {
    "text": "so um step one in scaling a database really is more around availability than",
    "start": "4566880",
    "end": "4572080"
  },
  {
    "text": "it is about scalability um but i kind of get a bit um i have to be honest it's case of",
    "start": "4572080",
    "end": "4578400"
  },
  {
    "text": "until you have solid predictable availability in your",
    "start": "4578400",
    "end": "4583600"
  },
  {
    "text": "database here it seems almost like putting the the horse before the cart to look at sort of scalability so if you",
    "start": "4583600",
    "end": "4590239"
  },
  {
    "text": "really if scalability is an issue so usually is availability so the first thing we can do in terms of availability",
    "start": "4590239",
    "end": "4596400"
  },
  {
    "text": "is to consider either synchronous or asynchronous replication from a master database server over to a over to a",
    "start": "4596400",
    "end": "4603120"
  },
  {
    "text": "slave now you can do this using you know your um your regular uh relational databases",
    "start": "4603120",
    "end": "4610000"
  },
  {
    "text": "mysql oracle sql server one of the nice things about the",
    "start": "4610000",
    "end": "4615280"
  },
  {
    "text": "relational database service is that we have a we have synchronous replications that synchronous",
    "start": "4615280",
    "end": "4621360"
  },
  {
    "text": "in to both oracle and mysql that's out of the box",
    "start": "4621360",
    "end": "4626400"
  },
  {
    "text": "so it's a simple api call and you instantly get a synchronous slave",
    "start": "4626400",
    "end": "4631600"
  },
  {
    "text": "and to set that up yourself actually involves a significant amount of effort um",
    "start": "4631600",
    "end": "4638640"
  },
  {
    "text": "step number two is around optimization so um somebody once told me",
    "start": "4638640",
    "end": "4644239"
  },
  {
    "text": "um so if i have like a poorly written application and i place it in the cloud and my problem is going to disappear",
    "start": "4644239",
    "end": "4649360"
  },
  {
    "text": "nope you know still insist on good practice so make sure we're using indexing of tables make sure that we",
    "start": "4649360",
    "end": "4655760"
  },
  {
    "text": "write efficient queries and finally you know if if you have all data that can be archived away we'll",
    "start": "4655760",
    "end": "4661600"
  },
  {
    "text": "move it out of your primary database step number three is around using larger",
    "start": "4661600",
    "end": "4668640"
  },
  {
    "text": "ec2 instance types so this is the easy scaling option it's scale up okay which",
    "start": "4668640",
    "end": "4674239"
  },
  {
    "text": "is the option that a lot of people do before they look at some of more of the more complex options",
    "start": "4674239",
    "end": "4681360"
  },
  {
    "text": "so as of today we have over you know over a dozen different ec2",
    "start": "4682480",
    "end": "4687520"
  },
  {
    "text": "instance types so when you're finding that you're maybe you're maxing out cpu memory in your database here we'll",
    "start": "4687520",
    "end": "4693520"
  },
  {
    "text": "simply go to the next ec2 instance type up",
    "start": "4693520",
    "end": "4698239"
  },
  {
    "text": "okay this is where it gets interesting so step number four is around caching so",
    "start": "4699360",
    "end": "4704880"
  },
  {
    "text": "if we find that we're having a lot of queries common queries hitting our database and in effect introducing",
    "start": "4704880",
    "end": "4711360"
  },
  {
    "text": "unnecessary sort of load what we can look to do is use an in-memory cache to store the results for those previews and",
    "start": "4711360",
    "end": "4719040"
  },
  {
    "text": "that's basically what the likes of elastic cache do so elastic cache or you can use memcache or use third-party",
    "start": "4719040",
    "end": "4726560"
  },
  {
    "text": "you know memory caching databases such as redis or others on ec2 um",
    "start": "4726560",
    "end": "4732159"
  },
  {
    "text": "we saw earlier how we could use elastic cache to cache the session data for our web tier what we're",
    "start": "4732159",
    "end": "4738880"
  },
  {
    "text": "doing now is using it to cache the queries between our web our application",
    "start": "4738880",
    "end": "4744400"
  },
  {
    "text": "tier and the database here and typically the way that these work is",
    "start": "4744400",
    "end": "4750960"
  },
  {
    "text": "you'll create your sql query you'll create your key and then what you'll do is you will look",
    "start": "4750960",
    "end": "4757600"
  },
  {
    "text": "in the cache first to see is the result that's associated with the key already there",
    "start": "4757600",
    "end": "4763840"
  },
  {
    "text": "if it is simply return it if it's not query the database return the result and",
    "start": "4763840",
    "end": "4770080"
  },
  {
    "text": "update the cache so the next time you have to look to do perform the query the results already in",
    "start": "4770080",
    "end": "4775520"
  },
  {
    "text": "the cache and it hasn't had to touch the database",
    "start": "4775520",
    "end": "4780000"
  },
  {
    "text": "step number five is scaling out now the first scale out step that we",
    "start": "4782159",
    "end": "4788640"
  },
  {
    "text": "probably look at would be to use read replicas so we can have multiple read replicas with the",
    "start": "4788640",
    "end": "4795360"
  },
  {
    "text": "relational database service if you're rolling your own relational database you can also use read replicas yourself",
    "start": "4795360",
    "end": "4801920"
  },
  {
    "text": "and what that allows us to do is modify our application now to use a connection pool",
    "start": "4801920",
    "end": "4807760"
  },
  {
    "text": "so instead of all of our reads hitting the master database some of our reads can actually now be taken away and hit",
    "start": "4807760",
    "end": "4814239"
  },
  {
    "text": "our read replicas what we do have to think about though is which of our reads have to be",
    "start": "4814239",
    "end": "4820400"
  },
  {
    "text": "synchronous and which of our reads can be asynchronous so what i mean here is the read replicate typically lags behind",
    "start": "4820400",
    "end": "4828560"
  },
  {
    "text": "the master server by a small amount so for the majority of cases we can point",
    "start": "4828560",
    "end": "4835040"
  },
  {
    "text": "our our reads as our read replicas but if you can imagine if we're doing transactions around sort of you know",
    "start": "4835040",
    "end": "4842239"
  },
  {
    "text": "updates to account data maybe financial type of data we need to make sure that",
    "start": "4842239",
    "end": "4847280"
  },
  {
    "text": "our reads are in sync with our rights and the last yes",
    "start": "4847280",
    "end": "4855199"
  },
  {
    "text": "in terms of security groups no in terms of right prevention yeah so so that's a good question um the",
    "start": "4862159",
    "end": "4869360"
  },
  {
    "text": "read replicas with the rds service cannot receive any rights we can only perform reads against them",
    "start": "4869360",
    "end": "4877920"
  },
  {
    "text": "and the last step and the last slide or two of my presentation is around scale out so with all large scale",
    "start": "4879360",
    "end": "4887360"
  },
  {
    "text": "web-based applications at some point you need to look to shard your database",
    "start": "4887360",
    "end": "4894400"
  },
  {
    "text": "the key to sharding is to choose a primary key or a key that's sensible so for example things like customer data is",
    "start": "4894639",
    "end": "4902480"
  },
  {
    "text": "a good kind of key if you're dealing with customer records",
    "start": "4902480",
    "end": "4906960"
  },
  {
    "text": "we then use that that chart key as a means to spread the data across multiple database",
    "start": "4907760",
    "end": "4914400"
  },
  {
    "text": "servers and i highly recommend when we look at charting that we look to take a",
    "start": "4914400",
    "end": "4921040"
  },
  {
    "text": "two-stage approach to charting because over time the number of database servers",
    "start": "4921040",
    "end": "4926480"
  },
  {
    "text": "that we use in the shard may actually grow maybe two three four etcetera so this is where we can use things like",
    "start": "4926480",
    "end": "4931679"
  },
  {
    "text": "dynamo db to store a a record of customer id",
    "start": "4931679",
    "end": "4937040"
  },
  {
    "text": "x uses a shard of say three so that when we look to determine which database to",
    "start": "4937040",
    "end": "4942320"
  },
  {
    "text": "use we do customer id modulus3 and that tells us which database server to go to",
    "start": "4942320",
    "end": "4949040"
  },
  {
    "text": "okay all right that's me just about on time so thank you very much",
    "start": "4949040",
    "end": "4956520"
  },
  {
    "text": "you",
    "start": "4958719",
    "end": "4960800"
  }
]