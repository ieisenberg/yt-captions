[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "Hello, welcome to another episode of",
    "start": "4401",
    "end": "6628"
  },
  {
    "text": "'Back to Basics'.",
    "start": "6628",
    "end": "7923"
  },
  {
    "text": "My name is Hareesh Singireddy.",
    "start": "7923",
    "end": "9538"
  },
  {
    "text": "I'm a Solutions Architect here at AWS.",
    "start": "9538",
    "end": "11791"
  },
  {
    "text": "Today we are going to talk about",
    "start": "12213",
    "end": "13698"
  },
  {
    "text": "managing and protecting secret information",
    "start": "13698",
    "end": "16850"
  },
  {
    "text": "needed for your applications to perform its function.",
    "start": "16850",
    "end": "19849"
  },
  {
    "text": "This information could be your database passwords,",
    "start": "19849",
    "end": "22889"
  },
  {
    "text": "your IAM access keys, your SSH keys,",
    "start": "22889",
    "end": "25768"
  },
  {
    "text": "or any other information your application needs",
    "start": "25768",
    "end": "28421"
  },
  {
    "text": "to perform its regular function.",
    "start": "28422",
    "end": "30405"
  },
  {
    "text": "Here I want to call out two best practices from the",
    "start": "30818",
    "end": "33532"
  },
  {
    "start": "32000",
    "end": "48000"
  },
  {
    "text": "AWS Well-Architected Framework security pillar.",
    "start": "33532",
    "end": "36586"
  },
  {
    "text": "The first one is, Store & Retrieve these secured secrets.",
    "start": "36586",
    "end": "40632"
  },
  {
    "text": "The second one is, Audit & Rotate these secrets securely",
    "start": "40632",
    "end": "44653"
  },
  {
    "text": "and frequently.",
    "start": "44653",
    "end": "46126"
  },
  {
    "text": "Let's take a common scenario.",
    "start": "46657",
    "end": "48370"
  },
  {
    "start": "48000",
    "end": "69000"
  },
  {
    "text": "You have an application that needs to communicate",
    "start": "48370",
    "end": "50850"
  },
  {
    "text": "with the database.",
    "start": "50850",
    "end": "51949"
  },
  {
    "text": "So to open a connection to the database,",
    "start": "51950",
    "end": "54030"
  },
  {
    "text": "it needs database connection information, ",
    "start": "54030",
    "end": "56266"
  },
  {
    "text": "like the database server name, database port number,",
    "start": "56266",
    "end": "59171"
  },
  {
    "text": "and secret information like database username",
    "start": "59172",
    "end": "61956"
  },
  {
    "text": "and database password.",
    "start": "61956",
    "end": "63265"
  },
  {
    "text": "So let's take a look at the architectural considerations first.",
    "start": "63265",
    "end": "66983"
  },
  {
    "text": "So there are a few things that you need to ",
    "start": "67610",
    "end": "69102"
  },
  {
    "start": "69000",
    "end": "107000"
  },
  {
    "text": "ask yourself.",
    "start": "69102",
    "end": "70502"
  },
  {
    "text": "First, where do you store these secrets securely?",
    "start": "70502",
    "end": "73366"
  },
  {
    "text": "Second, how does your application get access",
    "start": "73768",
    "end": "76863"
  },
  {
    "text": "to these secrets?",
    "start": "76863",
    "end": "78100"
  },
  {
    "text": "Third, how often do you rotate these secrets?",
    "start": "78100",
    "end": "81191"
  },
  {
    "text": "And finally, when you rotate these secrets,",
    "start": "81191",
    "end": "83700"
  },
  {
    "text": "how does your application know about the latest",
    "start": "83700",
    "end": "86148"
  },
  {
    "text": "version of these secrets?",
    "start": "86149",
    "end": "87590"
  },
  {
    "text": "AWS Secrets Manager lets you store text",
    "start": "87590",
    "end": "90529"
  },
  {
    "text": "in the protected data portion of the secret.",
    "start": "90529",
    "end": "92850"
  },
  {
    "text": "In this scenario, these could be your database username,",
    "start": "93416",
    "end": "96235"
  },
  {
    "text": "password and all of the database connection information.",
    "start": "96235",
    "end": "99403"
  },
  {
    "text": "And data protection is a key security best practice.",
    "start": "99825",
    "end": "102937"
  },
  {
    "text": "Always encrypt data at rest.",
    "start": "102937",
    "end": "105213"
  },
  {
    "text": "To achieve this, Secrets Manager encrypts",
    "start": "105213",
    "end": "108221"
  },
  {
    "text": "the protected text of a secret by using",
    "start": "108221",
    "end": "111174"
  },
  {
    "text": "AWS Key Management Service or KMS.",
    "start": "111174",
    "end": "114274"
  },
  {
    "text": "You can either use the default CMK for Secrets Manager",
    "start": "114274",
    "end": "118056"
  },
  {
    "text": "or you can use a customer-created CMK.",
    "start": "118056",
    "end": "121250"
  },
  {
    "text": "A common anti-pattern that we see is",
    "start": "121250",
    "end": "123880"
  },
  {
    "text": "hard-coding credentials in your application source code.",
    "start": "123880",
    "end": "126742"
  },
  {
    "text": "It's not a good idea because if somebody has access to",
    "start": "126742",
    "end": "129603"
  },
  {
    "text": "your application source code, they now have ",
    "start": "129603",
    "end": "131694"
  },
  {
    "text": "access to your data.",
    "start": "131694",
    "end": "133024"
  },
  {
    "text": "AWS Secrets Manager allows for",
    "start": "133024",
    "end": "135524"
  },
  {
    "start": "135000",
    "end": "160000"
  },
  {
    "text": "programmatic retrieval of secrets. ",
    "start": "135524",
    "end": "137632"
  },
  {
    "text": "So, to retrieve secrets you simply replace",
    "start": "137632",
    "end": "140422"
  },
  {
    "text": "plain text secrets with code to pull in those secrets",
    "start": "140422",
    "end": "143422"
  },
  {
    "text": "at runtime using Secrets Manager APIs.",
    "start": "143422",
    "end": "145963"
  },
  {
    "text": "You can also use AWS IAM permission policies",
    "start": "145963",
    "end": "149260"
  },
  {
    "text": "to control access to your secret.",
    "start": "149260",
    "end": "151142"
  },
  {
    "text": "So in this scenario, you can attach a policy ",
    "start": "151142",
    "end": "153592"
  },
  {
    "text": "to the role used by your application",
    "start": "153592",
    "end": "155358"
  },
  {
    "text": "to give it read-only permissions on the database secrets.",
    "start": "155358",
    "end": "158408"
  },
  {
    "text": "And as I mentioned earlier, data protection is very important.",
    "start": "159031",
    "end": "162556"
  },
  {
    "start": "160000",
    "end": "185000"
  },
  {
    "text": "Secrets Manager by default only accepts requests from",
    "start": "162920",
    "end": "166470"
  },
  {
    "text": "hosts using open standard TLS and",
    "start": "166470",
    "end": "168784"
  },
  {
    "text": "perfect forward secrecy.",
    "start": "168784",
    "end": "170173"
  },
  {
    "text": "And also ensures encryption of your secret ",
    "start": "170443",
    "end": "172806"
  },
  {
    "text": "while in transit.",
    "start": "172806",
    "end": "174137"
  },
  {
    "text": "Now that storage and retrieval of the secret is set up,",
    "start": "174137",
    "end": "177590"
  },
  {
    "text": "let's take a look at the second security best practice,",
    "start": "177590",
    "end": "179969"
  },
  {
    "text": "which is Audit & Rotate the secrets periodically.",
    "start": "179969",
    "end": "183245"
  },
  {
    "text": "Periodic rotation of secrets is really important",
    "start": "184192",
    "end": "186999"
  },
  {
    "start": "185000",
    "end": "236000"
  },
  {
    "text": "from a security perspective.",
    "start": "186999",
    "end": "188879"
  },
  {
    "text": "If you don't change your secrets for a long period of time",
    "start": "188879",
    "end": "191383"
  },
  {
    "text": "the secrets become more likely to be compromised.",
    "start": "191383",
    "end": "194235"
  },
  {
    "text": "As a security best practice we recommend that",
    "start": "194700",
    "end": "196899"
  },
  {
    "text": "you regularly rotate your credentials.",
    "start": "196899",
    "end": "199006"
  },
  {
    "text": "You can configure Secrets Manager ",
    "start": "199893",
    "end": "201764"
  },
  {
    "text": "to automatically rotate without any manual intervention",
    "start": "201764",
    "end": "205518"
  },
  {
    "text": "and on a specified schedule.",
    "start": "205518",
    "end": "207578"
  },
  {
    "text": "Secrets Manager uses AWS Lambda functions",
    "start": "207578",
    "end": "210341"
  },
  {
    "text": "to rotate the credentials.",
    "start": "210341",
    "end": "211784"
  },
  {
    "text": "Secrets Manager, out of the box, comes fully configured",
    "start": "212806",
    "end": "216283"
  },
  {
    "text": "and ready to use rotation support for ",
    "start": "216283",
    "end": "218265"
  },
  {
    "text": "Amazon RDS Databases, Amazon Aurora,",
    "start": "218265",
    "end": "221517"
  },
  {
    "text": "Amazon DocumentDB and Amazon Redshift.",
    "start": "221517",
    "end": "224565"
  },
  {
    "text": "If you need to rotate credentials for any other service ",
    "start": "225085",
    "end": "227967"
  },
  {
    "text": "than what I just mentioned, you can also",
    "start": "227967",
    "end": "230170"
  },
  {
    "text": "define and implement rotation using a custom",
    "start": "230171",
    "end": "232790"
  },
  {
    "text": "AWS Lambda function.",
    "start": "232790",
    "end": "234314"
  },
  {
    "text": "Since your application is already configured ",
    "start": "234794",
    "end": "236875"
  },
  {
    "start": "236000",
    "end": "245000"
  },
  {
    "text": "to pull the latest credentials, it will get the latest credentials",
    "start": "236875",
    "end": "240076"
  },
  {
    "text": "next time it tries to access the database.",
    "start": "240076",
    "end": "242361"
  },
  {
    "text": "So if we take a look at the high level overview of the pattern,",
    "start": "243652",
    "end": "246491"
  },
  {
    "start": "245000",
    "end": "275000"
  },
  {
    "text": "you store your credentials in Secrets Manager,",
    "start": "246492",
    "end": "248862"
  },
  {
    "text": "Secrets Manager will take care off the rotation",
    "start": "248862",
    "end": "251177"
  },
  {
    "text": "and maintaining the latest set of credentials for you.",
    "start": "251177",
    "end": "254336"
  },
  {
    "text": "And your application always pulls the latest set of",
    "start": "254336",
    "end": "257103"
  },
  {
    "text": "credentials from Secrets Manager at runtime.",
    "start": "257103",
    "end": "259833"
  },
  {
    "text": "And all of this is happening securely",
    "start": "259833",
    "end": "261988"
  },
  {
    "text": "and automatically.",
    "start": "261988",
    "end": "263243"
  },
  {
    "text": "There you have it.",
    "start": "263451",
    "end": "264455"
  },
  {
    "text": "Check out the resources below for more details",
    "start": "264455",
    "end": "267108"
  },
  {
    "text": "and thanks for tuning in.",
    "start": "267108",
    "end": "268743"
  }
]