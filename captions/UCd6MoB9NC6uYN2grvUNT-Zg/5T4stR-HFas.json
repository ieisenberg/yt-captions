[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "welcome everyone welcome to the session",
    "start": "620",
    "end": "5850"
  },
  {
    "text": "ERC three-one-seven application performance management or APM on AWS my",
    "start": "5850",
    "end": "13259"
  },
  {
    "text": "name is Marcus Ortiz I'm a Solutions Architect out of Houston Texas working",
    "start": "13259",
    "end": "18359"
  },
  {
    "text": "with enterprise customers I've been with AWS for a little bit over a year right",
    "start": "18359",
    "end": "24840"
  },
  {
    "text": "now but before that I've been developing designing deploying and monitoring",
    "start": "24840",
    "end": "31470"
  },
  {
    "text": "applications on the platform for the past five years so hopefully I can share some experience with you so before we",
    "start": "31470",
    "end": "39570"
  },
  {
    "text": "move forward I like to have an idea how many developers we have here nice",
    "start": "39570",
    "end": "47430"
  },
  {
    "text": "how many architects sees up sees admins",
    "start": "47430",
    "end": "54750"
  },
  {
    "text": "or DevOps or support guys cool thanks so",
    "start": "54750",
    "end": "62640"
  },
  {
    "text": "what can you expect from the session this is a 300 level session we'll start",
    "start": "62640",
    "end": "69450"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "looking at some industry trends in monitoring today more specifically application monitoring why APM is",
    "start": "69450",
    "end": "77310"
  },
  {
    "text": "important hopefully most of you guys are already convinced about this but for",
    "start": "77310",
    "end": "83430"
  },
  {
    "text": "those that are not we're going to talk about that then we're going to move into the how how can you perform in implement",
    "start": "83430",
    "end": "90479"
  },
  {
    "text": "APM on AWS using tools such as cloud watch for custom metrics cloud watch",
    "start": "90479",
    "end": "96479"
  },
  {
    "text": "logs either as x-rays so you can get meaningful insights about their",
    "start": "96479",
    "end": "102090"
  },
  {
    "text": "applications and react upon those then we're going to move for our demo we're",
    "start": "102090",
    "end": "107250"
  },
  {
    "text": "gonna put it all together all those concepts together and we're gonna have a demo the demo is gonna play it out of a",
    "start": "107250",
    "end": "113880"
  },
  {
    "text": "video here but the content of that demo is already on a github repo so I",
    "start": "113880",
    "end": "119189"
  },
  {
    "text": "strongly encourage you guys to go there clone the repo try it out in your own a that rest accounts and let us know how",
    "start": "119189",
    "end": "126719"
  },
  {
    "text": "it works out then we're going to wrap it up by discussing some of the best practices when implementing APM",
    "start": "126719",
    "end": "133920"
  },
  {
    "text": "on AWS so the whole purpose of this talk is like to give you an idea of how to",
    "start": "133920",
    "end": "139620"
  },
  {
    "text": "use the different services to implement APM on AWS we're not gonna be extensively describing what cloud watch",
    "start": "139620",
    "end": "146940"
  },
  {
    "text": "is what x-ray is but even if you guys don't have an idea what those services does we're going to do a quick overview",
    "start": "146940",
    "end": "153390"
  },
  {
    "text": "before we actually use them on the demo so why EPM is important that's simple",
    "start": "153390",
    "end": "163819"
  },
  {
    "start": "159000",
    "end": "159000"
  },
  {
    "text": "every application is unique there are just too many variables that make every",
    "start": "163819",
    "end": "170459"
  },
  {
    "text": "single application unique so we use different programming languages different frameworks they have external",
    "start": "170459",
    "end": "177450"
  },
  {
    "text": "dependencies different libraries they have different performance requirements",
    "start": "177450",
    "end": "182550"
  },
  {
    "text": "and constraints you might have different architectures from monolithic stew three-tier web apps containers or server",
    "start": "182550",
    "end": "190019"
  },
  {
    "text": "less you might talk to external services on a synchronous or asynchronous ways or",
    "start": "190019",
    "end": "196019"
  },
  {
    "text": "you might use different protocols to talk to those services like requesting them spools but they subscribe how do",
    "start": "196019",
    "end": "202440"
  },
  {
    "text": "you take all our data to consideration to monitor applications so a lot of",
    "start": "202440",
    "end": "208890"
  },
  {
    "text": "times when I talk to customers and colleagues I see a lot of people monitoring their application just by",
    "start": "208890",
    "end": "215130"
  },
  {
    "text": "using this those custom infrastructure metrics such as CPU utilization memory",
    "start": "215130",
    "end": "221160"
  },
  {
    "text": "disk i/o Network IO that's just not enough because every single application",
    "start": "221160",
    "end": "227459"
  },
  {
    "text": "is different so I'm a big sports fan so I like to do an analogy let's say you",
    "start": "227459",
    "end": "232560"
  },
  {
    "text": "are a general manager of a basketball team and you just monitoring your application with custom with",
    "start": "232560",
    "end": "239640"
  },
  {
    "text": "infrastructure metrics that's kind of like as you as a GM the only formation that we have available",
    "start": "239640",
    "end": "245730"
  },
  {
    "text": "about our team is the partial score for each game in the season after each quarter so how can you get insights",
    "start": "245730",
    "end": "253260"
  },
  {
    "text": "about your team to make it better to trade players and Watson for now if you",
    "start": "253260",
    "end": "258570"
  },
  {
    "text": "have custom metrics carefully thought for your application workload now the",
    "start": "258570",
    "end": "264210"
  },
  {
    "text": "game changes is like as a GM now you have the player stats through the",
    "start": "264210",
    "end": "269320"
  },
  {
    "text": "games you have the team ranking so you know how your team is playing against the best offensive team of the league",
    "start": "269320",
    "end": "275410"
  },
  {
    "text": "against the best defensive teams on the league so it's a whole new game so it's really really important to have custom",
    "start": "275410",
    "end": "283300"
  },
  {
    "text": "metrics out of your applications right how many of you guys are running",
    "start": "283300",
    "end": "290280"
  },
  {
    "text": "applications on AWS that you have access to the source code so you build that and",
    "start": "290280",
    "end": "295810"
  },
  {
    "text": "deploy that how many of you guys have lettuce applications that you don't want",
    "start": "295810",
    "end": "302020"
  },
  {
    "text": "to touch that hold how many of you guys are running third-party application that",
    "start": "302020",
    "end": "307660"
  },
  {
    "text": "you just don't have access to the source code so you cannot introduce custom metrics right we're going to try to",
    "start": "307660",
    "end": "313300"
  },
  {
    "text": "cover some of those scenarios here but the world thing to take out of this presentation if you want you're going to",
    "start": "313300",
    "end": "319300"
  },
  {
    "text": "take one thing is like we need custom metrics right but more important than",
    "start": "319300",
    "end": "324550"
  },
  {
    "text": "having testing metrics is choosing meaningful metrics so as a GM of my",
    "start": "324550",
    "end": "331420"
  },
  {
    "text": "basketball team it's awesome to have all of those stats that I talk about but like if I choose wrong stats such as",
    "start": "331420",
    "end": "337930"
  },
  {
    "text": "like how many steps are players making during a game or how many times the players jumping it's meaningful right so",
    "start": "337930",
    "end": "345640"
  },
  {
    "text": "you really to think carefully when you're about let's say to introduce custom mattress into your application",
    "start": "345640",
    "end": "351820"
  },
  {
    "text": "what are the key performance indicators or KPIs that you like to measure across",
    "start": "351820",
    "end": "358390"
  },
  {
    "text": "a period of time on your application and how can you introduce those and make those available on AWS so whenever we",
    "start": "358390",
    "end": "369430"
  },
  {
    "start": "367000",
    "end": "367000"
  },
  {
    "text": "talk about monitoring with customers I always make these classes do you think",
    "start": "369430",
    "end": "374440"
  },
  {
    "text": "you really know your application so and then I have several follow-up question",
    "start": "374440",
    "end": "380290"
  },
  {
    "text": "searches do you know what are the infrastructure changes impacting what",
    "start": "380290",
    "end": "386260"
  },
  {
    "text": "are the impact refer structure changes to your application like if you change ec2 instance type or ABS volume how does",
    "start": "386260",
    "end": "392680"
  },
  {
    "text": "that impact your application what are the bottlenecks on your application and when you have a bottleneck where on the",
    "start": "392680",
    "end": "399790"
  },
  {
    "text": "stack is that is that on the application layer is that of the persistence layer and if",
    "start": "399790",
    "end": "405310"
  },
  {
    "text": "it's on the application layer what specific module or sub-module or method",
    "start": "405310",
    "end": "410500"
  },
  {
    "text": "or function is causing that how does our application behaves with different",
    "start": "410500",
    "end": "416080"
  },
  {
    "text": "traffic volumes if you have spikes or if you have like a huge volume of traffic",
    "start": "416080",
    "end": "422229"
  },
  {
    "text": "coming in you know in a continuous way how does your application behaves do you have a specific module of your",
    "start": "422229",
    "end": "427660"
  },
  {
    "text": "application that is affected more than other does that depend on the input programs that are being same as request",
    "start": "427660",
    "end": "434500"
  },
  {
    "text": "your applications where and how you out of scale your application oftentimes we",
    "start": "434500",
    "end": "441130"
  },
  {
    "text": "see people selecting metrics such as network out or CPU utilization for their",
    "start": "441130",
    "end": "447910"
  },
  {
    "text": "auto scaling group but again this is not a one size fit all so let's say you have",
    "start": "447910",
    "end": "453669"
  },
  {
    "text": "an application that is a background daemon that is consuming an in-memory queue so it's pretty much okay for you",
    "start": "453669",
    "end": "461169"
  },
  {
    "text": "to have like 75 to 95 percent utilization on CPU for Deb workload as",
    "start": "461169",
    "end": "467139"
  },
  {
    "text": "long as you're not growing that queue size right so you want to make sure you're not over provisioning ec2",
    "start": "467139",
    "end": "474550"
  },
  {
    "text": "instances so you pay for what you need so maybe putting a metric of CP utilization with a threshold of 75",
    "start": "474550",
    "end": "481840"
  },
  {
    "text": "percent is not the best metric for triggering out of scaling maybe you want to do a custom metric",
    "start": "481840",
    "end": "488050"
  },
  {
    "text": "which is the queue size and you want to make sure that queue size is as close to zero as possible and if it grows out of",
    "start": "488050",
    "end": "495340"
  },
  {
    "text": "a specific threshold then you start scaling out your application right how",
    "start": "495340",
    "end": "500710"
  },
  {
    "text": "does your application behaves as you release new versions like nowadays a lot",
    "start": "500710",
    "end": "505780"
  },
  {
    "text": "of people are doing C ICD DevOps agile development life cycles so people are",
    "start": "505780",
    "end": "512110"
  },
  {
    "text": "delivering new versions like several times a day how is your bottlenecks are they improving are you reducing latency",
    "start": "512110",
    "end": "518979"
  },
  {
    "text": "as you as you introduce new versions are you introducing higher error rates with",
    "start": "518979",
    "end": "524770"
  },
  {
    "text": "new versions if you change a persistent layer on your stack or something like that error rates what are the error",
    "start": "524770",
    "end": "531279"
  },
  {
    "text": "rates of your application are they to a specific soup service or sub-module",
    "start": "531279",
    "end": "536660"
  },
  {
    "text": "or their title specific technology stack that you're using your application all of those classes should be able to",
    "start": "536660",
    "end": "543800"
  },
  {
    "text": "answer if you have the right metrics in place so bottom line is that you cannot",
    "start": "543800",
    "end": "550490"
  },
  {
    "text": "manage what you don't know and if you don't measure it you don't know it if",
    "start": "550490",
    "end": "557660"
  },
  {
    "text": "you don't know it you cannot manage that so again custom metrics whenever possible so",
    "start": "557660",
    "end": "565990"
  },
  {
    "start": "566000",
    "end": "566000"
  },
  {
    "text": "hopefully everyone is on the same page like we need to monitor application on a",
    "start": "567280",
    "end": "572420"
  },
  {
    "text": "tailored way we need to select proper KPIs or custom metrics that make sense",
    "start": "572420",
    "end": "577970"
  },
  {
    "text": "for us to act upon those but what else is changing in monetary nowadays",
    "start": "577970",
    "end": "584680"
  },
  {
    "text": "applications are getting more complex every single day they're being deployed",
    "start": "584680",
    "end": "590510"
  },
  {
    "text": "in a distributed way they talk lots of protocols with lots of external services",
    "start": "590510",
    "end": "595550"
  },
  {
    "text": "how do you take all of that into place when you're monitoring application",
    "start": "595550",
    "end": "601570"
  },
  {
    "text": "applications are more and more dynamic maybe like we have some cases where",
    "start": "601720",
    "end": "606800"
  },
  {
    "text": "something that you're morning three minutes ago or seconds ago doesn't even exist anymore for instance",
    "start": "606800",
    "end": "613070"
  },
  {
    "text": "lender functions containers or even ec2 instances you have another scaling group you have a",
    "start": "613070",
    "end": "619370"
  },
  {
    "text": "spike in traffic so you created a new instance that new instance receive a",
    "start": "619370",
    "end": "624590"
  },
  {
    "text": "request that trigger an error and you need that lob on that instance but you",
    "start": "624590",
    "end": "630350"
  },
  {
    "text": "scale back in and that instance doesn't exist anymore how do you access that log how do you do root cause analyses there",
    "start": "630350",
    "end": "639130"
  },
  {
    "text": "last but not least we have an increasing business impact coming from the",
    "start": "639130",
    "end": "645320"
  },
  {
    "text": "applications more and more lots of companies they say I'm not a tech",
    "start": "645320",
    "end": "650540"
  },
  {
    "text": "company at the core but they're leveraging technology applications and",
    "start": "650540",
    "end": "655640"
  },
  {
    "text": "automations to achieve their business goals so more and more applications are",
    "start": "655640",
    "end": "662290"
  },
  {
    "text": "very close to their business goals that means that it's even more Orton to properly monitor dose with the",
    "start": "662290",
    "end": "670170"
  },
  {
    "text": "right matrix right okay so we talk about the why APN now we're getting to the how",
    "start": "670170",
    "end": "678210"
  },
  {
    "text": "do you do APM on AWS right we're going to be talking here mainly about three",
    "start": "678210",
    "end": "684990"
  },
  {
    "text": "technologies on AWS first is how can you send custom metrics to cloud watch what",
    "start": "684990",
    "end": "692399"
  },
  {
    "text": "is a metric by the way it's just a measure of an event it's a value over time for instance it can be a counter it",
    "start": "692399",
    "end": "699570"
  },
  {
    "text": "can be throughput every rate request rate and so forth so how can we leverage",
    "start": "699570",
    "end": "706140"
  },
  {
    "text": "cloud watch within our applications to send metrics custom metrics to cloud",
    "start": "706140",
    "end": "712350"
  },
  {
    "text": "watch then we need to leverage logs so",
    "start": "712350",
    "end": "717899"
  },
  {
    "text": "nowadays we have several pieces of applications running everywhere how do you aggregate all those logs in the same",
    "start": "717899",
    "end": "724350"
  },
  {
    "text": "place so you can query those how can you create custom metrics out of logs I",
    "start": "724350",
    "end": "730770"
  },
  {
    "text": "asked you guys a little bit earlier today like if you have a third party software that you cannot change the",
    "start": "730770",
    "end": "736709"
  },
  {
    "text": "source code or if you have latest application that people develop 15 years ago they're not even in the company",
    "start": "736709",
    "end": "742560"
  },
  {
    "text": "anymore no one wants to touch that home to instrument adding custom metrics how can",
    "start": "742560",
    "end": "748290"
  },
  {
    "text": "you create custom metrics out of logs so if you know pretty much the log format",
    "start": "748290",
    "end": "754080"
  },
  {
    "text": "in the lock patterns we have technologies on cloud watch logs that enables you to create custom metrics out",
    "start": "754080",
    "end": "761040"
  },
  {
    "text": "of those logs and last but not least important we're going to talk about how",
    "start": "761040",
    "end": "767850"
  },
  {
    "text": "can you how can you see in tracing information by using AWS x-ray so a de",
    "start": "767850",
    "end": "774420"
  },
  {
    "text": "Bresse x-ray provides you trace information so if you have a spike on the response time of a specific request",
    "start": "774420",
    "end": "781709"
  },
  {
    "text": "for specific service why be like let's say the average response time was like",
    "start": "781709",
    "end": "787110"
  },
  {
    "text": "10 milliseconds and out of a sudden it took like 10 seconds ok you know you had a spike but the question is where's the",
    "start": "787110",
    "end": "794370"
  },
  {
    "text": "bottleneck so the x-ray trace will let you know that",
    "start": "794370",
    "end": "799890"
  },
  {
    "text": "and and you also have like a service map so nowadays we have like distributed",
    "start": "799890",
    "end": "805620"
  },
  {
    "text": "application micro services architecture you interact you with a lot of AWS",
    "start": "805620",
    "end": "810779"
  },
  {
    "text": "services as well so x-ray provides you like a service map so you can see what",
    "start": "810779",
    "end": "816600"
  },
  {
    "text": "services are being directly called by your end-users and when they're called which services they interact with we're",
    "start": "816600",
    "end": "824550"
  },
  {
    "text": "gonna see all that in the demo so let's start with the first things we're going",
    "start": "824550",
    "end": "831269"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "to talk about sending custom metrics to cloud watch the challenge we want to",
    "start": "831269",
    "end": "837510"
  },
  {
    "text": "send custom metrics to cloud watch but to do that we need to call a put metric data which is a synchronous HTTP request",
    "start": "837510",
    "end": "845490"
  },
  {
    "text": "right so with that if every time our application is running let's say you",
    "start": "845490",
    "end": "851370"
  },
  {
    "text": "want to register a counter or you want to register how long that specific operation took and you need to send an",
    "start": "851370",
    "end": "857310"
  },
  {
    "text": "HTTP call to cloud watch API and wait for that request response so you can start doing things again you're",
    "start": "857310",
    "end": "863519"
  },
  {
    "text": "introducing lots of latency at your application it's just not feasible it doesn't work what is the solution use a",
    "start": "863519",
    "end": "873029"
  },
  {
    "text": "UDP daemon using a UDP agent like collect D and open source one that's the",
    "start": "873029",
    "end": "878640"
  },
  {
    "text": "one we're gonna use in the demo we have log stash as well they have input plug-ins for UDP and output plugins such",
    "start": "878640",
    "end": "886800"
  },
  {
    "text": "to sending that information to cloud watch and we have some links on the bottom of the slide for those and how",
    "start": "886800",
    "end": "893850"
  },
  {
    "text": "does it look like if you want to introduce that your application so let's say you have your AWS account and you",
    "start": "893850",
    "end": "899730"
  },
  {
    "start": "894000",
    "end": "894000"
  },
  {
    "text": "have any situations and your application is running on that ec2 users all you",
    "start": "899730",
    "end": "905100"
  },
  {
    "text": "need to do is to install a UDP daemon and that can be like and this is a very",
    "start": "905100",
    "end": "910500"
  },
  {
    "text": "common pattern with third-party vendors on on the APN space as well we're not",
    "start": "910500",
    "end": "916860"
  },
  {
    "text": "reinventing the wheel here so as your application is running it's generating metrics and reporting those metrics by",
    "start": "916860",
    "end": "924630"
  },
  {
    "text": "sending UDP requests to a local agent installed on that same box that UDP",
    "start": "924630",
    "end": "930750"
  },
  {
    "text": "request is fire-and-forget so you you you're virtually not introducing any late and since your application",
    "start": "930750",
    "end": "937490"
  },
  {
    "text": "right in reality you're introducing microseconds of delays maybe one or two milliseconds which is totally fine for",
    "start": "937490",
    "end": "945200"
  },
  {
    "text": "most of the applications right then behind the scenes the daemon is a",
    "start": "945200",
    "end": "951170"
  },
  {
    "text": "synchronously collecting all that information call it put metric data and",
    "start": "951170",
    "end": "956660"
  },
  {
    "text": "sending all of that information to cloud watch and now you can see all of those beautiful custom metrics right so with",
    "start": "956660",
    "end": "964760"
  },
  {
    "text": "this architecture you decouple metric aggregation from API and API calls from",
    "start": "964760",
    "end": "970460"
  },
  {
    "text": "your application logic so application keeps running as fast as you can and all its doing sending metrics to a local",
    "start": "970460",
    "end": "977740"
  },
  {
    "text": "agent through UDP and again fire-and-forget so we don't introduce latency into your code the same thing",
    "start": "977740",
    "end": "987200"
  },
  {
    "text": "can run outside of an AWS account so you can run that say on your own Prem environment as long as that application",
    "start": "987200",
    "end": "994339"
  },
  {
    "text": "is on a server that has internet access and it has the right credentials to talk",
    "start": "994339",
    "end": "999950"
  },
  {
    "text": "to your cloud watch API it's exactly the same set up you're gonna make your",
    "start": "999950",
    "end": "1007390"
  },
  {
    "text": "metrics available into cloud watch and then your support sees that mean and DevOps team can just log in through the",
    "start": "1007390",
    "end": "1014170"
  },
  {
    "text": "management console or using our API to consume those metrics how now let's say",
    "start": "1014170",
    "end": "1023620"
  },
  {
    "start": "1020000",
    "end": "1020000"
  },
  {
    "text": "you cannot have access to the source code or you don't want to change the source code being that a legacy",
    "start": "1023620",
    "end": "1030520"
  },
  {
    "text": "application or you have a third party application how can you create custom",
    "start": "1030520",
    "end": "1036100"
  },
  {
    "text": "metrics out of logs so when we talk about laws we'll have those challenges",
    "start": "1036100",
    "end": "1042130"
  },
  {
    "text": "how you can get all of those logs for all of those instances into a central location how can you work I've all that",
    "start": "1042130",
    "end": "1049950"
  },
  {
    "text": "and how can you make custom metrics out of logs since you don't have source code",
    "start": "1049950",
    "end": "1056080"
  },
  {
    "text": "access to instrument that code the solution is to use cloud watch logs",
    "start": "1056080",
    "end": "1063340"
  },
  {
    "text": "agent ploud watch logs agent architecture we're gonna talk about this exactly now",
    "start": "1063340",
    "end": "1070720"
  },
  {
    "text": "so pretty much the same architecture as before so you'll have your application",
    "start": "1070720",
    "end": "1076600"
  },
  {
    "text": "running on your AWS account for for example on an ec2 instance and as your",
    "start": "1076600",
    "end": "1084310"
  },
  {
    "text": "application is running it's generating log data it's logging to log files right",
    "start": "1084310",
    "end": "1090000"
  },
  {
    "text": "that can be your application your custom application third party application or the Atlantis application then all you do",
    "start": "1090000",
    "end": "1097300"
  },
  {
    "text": "is use so-called watch logs agent and when you install cloud watch logs agent",
    "start": "1097300",
    "end": "1102490"
  },
  {
    "text": "you tell it okay I need you to monitor those logs and what it does is like",
    "start": "1102490",
    "end": "1107650"
  },
  {
    "text": "whenever new lines are being written to those log files it's listening for that",
    "start": "1107650",
    "end": "1112780"
  },
  {
    "text": "and getting that information in order to send it to cloud watch logs so your",
    "start": "1112780",
    "end": "1119410"
  },
  {
    "text": "application logs exactly as it does should today to log files and behind-the-scene cloud watch logs is",
    "start": "1119410",
    "end": "1124870"
  },
  {
    "text": "getting those new log lines aggregating that data and sending that by through",
    "start": "1124870",
    "end": "1131410"
  },
  {
    "text": "our HTTP calls in a total decouple way so you don't introduce any more latencies in your application as well so",
    "start": "1131410",
    "end": "1140410"
  },
  {
    "text": "no need to change your code and the same thing can be run on on your own Prem",
    "start": "1140410",
    "end": "1146680"
  },
  {
    "text": "environment so as long as you have internet access and the right credentials to talk to your address account you can star called watch logs",
    "start": "1146680",
    "end": "1153730"
  },
  {
    "text": "agent on your on the field or on your own Prem environment and everything",
    "start": "1153730",
    "end": "1158830"
  },
  {
    "text": "every setup is the same then your CSR sees that mean DevOps or support people",
    "start": "1158830",
    "end": "1164260"
  },
  {
    "text": "can access those logs through the console or through the api's we're going",
    "start": "1164260",
    "end": "1169300"
  },
  {
    "text": "to take questions after so fine so you",
    "start": "1169300",
    "end": "1174820"
  },
  {
    "start": "1172000",
    "end": "1172000"
  },
  {
    "text": "stall called watch logs you make the logs available on cloud watch on your AWS account then how do you create",
    "start": "1174820",
    "end": "1181780"
  },
  {
    "text": "metrics once the logs are available so you use a feature called metric filter",
    "start": "1181780",
    "end": "1187300"
  },
  {
    "text": "so once the logs are available you can create you can select ok for this log",
    "start": "1187300",
    "end": "1192340"
  },
  {
    "text": "group or for this log stream I want to create those metric filters so whenever",
    "start": "1192340",
    "end": "1198100"
  },
  {
    "text": "a logline that matches a specific pattern I want to generate this metric",
    "start": "1198100",
    "end": "1205090"
  },
  {
    "text": "with this name in this value right he works for space delimited logs in",
    "start": "1205090",
    "end": "1210520"
  },
  {
    "text": "JSON log files and just to give you guys an example on the left-hand side here we",
    "start": "1210520",
    "end": "1218169"
  },
  {
    "text": "have cloud watch logs all your logs are arriving because cloud watch logs agent",
    "start": "1218169",
    "end": "1223720"
  },
  {
    "text": "is sending those then on the right-hand side on bullet number one you specify",
    "start": "1223720",
    "end": "1231299"
  },
  {
    "text": "you specify a future pattern that is I want to all the lines that match this",
    "start": "1231299",
    "end": "1237370"
  },
  {
    "text": "pattern I want to create matrix out of those then you can select the logs that",
    "start": "1237370",
    "end": "1242650"
  },
  {
    "text": "are already there or you can copy and paste on that text area custom logs that",
    "start": "1242650",
    "end": "1248440"
  },
  {
    "text": "you might have just to test if your pattern is working so once you click that bullet number two their test",
    "start": "1248440",
    "end": "1254890"
  },
  {
    "text": "pattern you're gonna hit you're gonna see some examples of matches from the logs on",
    "start": "1254890",
    "end": "1260110"
  },
  {
    "text": "that text area and then you click on the link show results you see a table of the",
    "start": "1260110",
    "end": "1265210"
  },
  {
    "text": "matches and those are the values that you have available for creating metrics",
    "start": "1265210",
    "end": "1271590"
  },
  {
    "text": "for example let's say I have this following log file here notice that",
    "start": "1271590",
    "end": "1276850"
  },
  {
    "start": "1272000",
    "end": "1272000"
  },
  {
    "text": "these a lot of customers think that they cannot create custom metrics out of logs",
    "start": "1276850",
    "end": "1282220"
  },
  {
    "text": "that don't have exactly the same format in every single line so for example web",
    "start": "1282220",
    "end": "1288220"
  },
  {
    "text": "servers like apache or nginx if you look at their access log that you can",
    "start": "1288220",
    "end": "1293470"
  },
  {
    "text": "configure those to have always the same format for every single line like client IP HTTP verb response code and",
    "start": "1293470",
    "end": "1301090"
  },
  {
    "text": "whatsoever notice that these log file have different formats for instance if you look at the info lines they're",
    "start": "1301090",
    "end": "1308080"
  },
  {
    "text": "reporting two values and if you look at the error lines they're reporting an error message so let's say you want to",
    "start": "1308080",
    "end": "1314710"
  },
  {
    "text": "get those values for the info lines all you to do is create the following a",
    "start": "1314710",
    "end": "1320820"
  },
  {
    "text": "filter pattern and then you say I want everything that is info so this is the",
    "start": "1320820",
    "end": "1326530"
  },
  {
    "text": "match that you're gonna have so now you have the values for a specific item count or elapse of time for a specific",
    "start": "1326530",
    "end": "1333460"
  },
  {
    "text": "task that you can use to plot that over time by using cloud watch so you're",
    "start": "1333460",
    "end": "1340270"
  },
  {
    "text": "making cloud watch custom metrics out of your log files the same thing the same",
    "start": "1340270",
    "end": "1346840"
  },
  {
    "text": "logs but now you want to process error messages maybe you want to count for error rates so just filter for error and",
    "start": "1346840",
    "end": "1354490"
  },
  {
    "text": "these are the values that you have and if we're talking about like an example of a JSON file that we might have the",
    "start": "1354490",
    "end": "1362020"
  },
  {
    "text": "future pattern changes a little bit so basically select the variable or the key and the value then you have the matches",
    "start": "1362020",
    "end": "1369670"
  },
  {
    "text": "and you can pretty much access any field on that JSON document by using their",
    "start": "1369670",
    "end": "1375130"
  },
  {
    "text": "keys one another good feature when we",
    "start": "1375130",
    "end": "1380710"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "talk about cloud watch logs is lock subscription so basically again you",
    "start": "1380710",
    "end": "1385930"
  },
  {
    "text": "setup your your application your cell called watch locks agent all the logs are arriving in your AWS account so now",
    "start": "1385930",
    "end": "1393670"
  },
  {
    "text": "you can set up subscription to those locks for instance to send them to Amazon Elastic search so a lot of",
    "start": "1393670",
    "end": "1400420"
  },
  {
    "text": "customers do this to keep hot and warm data there so they can do free text",
    "start": "1400420",
    "end": "1407560"
  },
  {
    "text": "search for root cause analysis or troubleshooting or support right once",
    "start": "1407560",
    "end": "1413260"
  },
  {
    "text": "that data is now cold let's say after 30 60 90 days you can delete that from",
    "start": "1413260",
    "end": "1420250"
  },
  {
    "text": "cloud from elasticsearch or you can dump that to s3 and that s3 bucket will have",
    "start": "1420250",
    "end": "1425350"
  },
  {
    "text": "a lifecycle policy that will move that through glacier and the rest all you guys know you can also subscribe that",
    "start": "1425350",
    "end": "1432130"
  },
  {
    "text": "lock to a lambda function and the reason is why you might want to do that is like",
    "start": "1432130",
    "end": "1438490"
  },
  {
    "text": "if you want to do if you want to implement complex parsing logics before",
    "start": "1438490",
    "end": "1443830"
  },
  {
    "text": "creating your matrix there might not be easy enough to do on the metric filters",
    "start": "1443830",
    "end": "1449410"
  },
  {
    "text": "so let's say you have several values but you want to create a specific custom matrix that would do calculations based",
    "start": "1449410",
    "end": "1456520"
  },
  {
    "text": "on those values to generate a final value so you might want to use the function for that or you might want",
    "start": "1456520",
    "end": "1463649"
  },
  {
    "text": "to look for specific log entries and values and whenever a match happens you",
    "start": "1463649",
    "end": "1469559"
  },
  {
    "text": "want to interact with other AWS services let's say to write something - and SQS queue or write something to a dynamodb",
    "start": "1469559",
    "end": "1476850"
  },
  {
    "text": "table whatever you want to do you also you might want to do anything else that",
    "start": "1476850",
    "end": "1482580"
  },
  {
    "text": "you can do through coding you might want to do that on a lambda function so let's say you have a specific log values then",
    "start": "1482580",
    "end": "1490260"
  },
  {
    "text": "whenever the match e happens you want to call your internal ticketing system or",
    "start": "1490260",
    "end": "1495690"
  },
  {
    "text": "you want to call your notification system so you can call that through the land of friction as well I want to call",
    "start": "1495690",
    "end": "1503970"
  },
  {
    "text": "out as well CloudWatch dashboards most of our customers have some third-party",
    "start": "1503970",
    "end": "1510330"
  },
  {
    "text": "monetary solutions but even if you do so I strongly encourage them whenever you",
    "start": "1510330",
    "end": "1516000"
  },
  {
    "text": "do you deliver your application try to deliver some custom metrics and cloud",
    "start": "1516000",
    "end": "1521460"
  },
  {
    "text": "wash that cloud watch dashboards as well because then it makes it easier for support people see that means or other",
    "start": "1521460",
    "end": "1528779"
  },
  {
    "text": "teams to figure out what are important things that they might want to monitor into your application so let's say you",
    "start": "1528779",
    "end": "1535230"
  },
  {
    "text": "have a template dashboard that has like 50 metrics there and it might make sense",
    "start": "1535230",
    "end": "1540720"
  },
  {
    "text": "for a specific support team just to get ten of those but they get a big picture they can copy and paste that dashboard",
    "start": "1540720",
    "end": "1548370"
  },
  {
    "text": "for their owner for their own users and they can tailor that dashboard for their needs right so we can basically monitor",
    "start": "1548370",
    "end": "1555600"
  },
  {
    "text": "multiple resources in a single view you can cross match custom metrics with",
    "start": "1555600",
    "end": "1561049"
  },
  {
    "text": "custom address metrics like in situ metrics or let's say kinis this range metrics whatever services you're using",
    "start": "1561049",
    "end": "1567630"
  },
  {
    "text": "and you can also monitor resources to spread across different regions as well",
    "start": "1567630",
    "end": "1573240"
  },
  {
    "text": "it doesn't need to be oh if I create a dashboard in Us East one I can only",
    "start": "1573240",
    "end": "1578610"
  },
  {
    "text": "monitor resources that are running on that region no that's not the case so we",
    "start": "1578610",
    "end": "1585179"
  },
  {
    "text": "talked about sending custom metrics through UDP or logging bloodlines so I",
    "start": "1585179",
    "end": "1591539"
  },
  {
    "text": "thought it would be interesting to show up some latency benchmark with this is a ruby",
    "start": "1591539",
    "end": "1598050"
  },
  {
    "text": "script that I wrote and again it's available in the wrapper so basically you pass an input paren in",
    "start": "1598050",
    "end": "1605370"
  },
  {
    "text": "this case I'm passing like a median if you don't pass I guess the d4 is a hundred thousand but basically when you",
    "start": "1605370",
    "end": "1612060"
  },
  {
    "text": "run this script what its gonna do let's say I'm passing a median here it's gonna log a million lines in the log file and",
    "start": "1612060",
    "end": "1620010"
  },
  {
    "text": "calculate the time that it took and after that is going to send a million",
    "start": "1620010",
    "end": "1625110"
  },
  {
    "text": "UDP packages to their local UDP agent and and calculate how many time it took",
    "start": "1625110",
    "end": "1630780"
  },
  {
    "text": "so I run that on a t2 micro the UDP oops",
    "start": "1630780",
    "end": "1638160"
  },
  {
    "text": "sending 1 million log lines took seven",
    "start": "1638160",
    "end": "1643380"
  },
  {
    "text": "point four seconds for UDP and writing that one meeting logs log lines on the",
    "start": "1643380",
    "end": "1650400"
  },
  {
    "text": "log took fifteen point five seconds if you scale up that eases to an M form",
    "start": "1650400",
    "end": "1656220"
  },
  {
    "text": "large UDP takes four point three seconds in logging takes thirteen point ninety",
    "start": "1656220",
    "end": "1663720"
  },
  {
    "text": "two seconds I know there's a lot of variables that influence things like that like what programming language",
    "start": "1663720",
    "end": "1670020"
  },
  {
    "text": "you're using what logging framework is using but usually sending metrics",
    "start": "1670020",
    "end": "1675660"
  },
  {
    "text": "through UDP if you can't will be faster than logging lines because also when",
    "start": "1675660",
    "end": "1681000"
  },
  {
    "text": "you're logging log a lot of things not only watch your need like you lock time stance you're not you log the severity",
    "start": "1681000",
    "end": "1687450"
  },
  {
    "text": "and a few other variables and on the other hand when you're sending UDP packages you're basically sending the",
    "start": "1687450",
    "end": "1694230"
  },
  {
    "text": "timestamp the the metric name or ID and the VAT itself last but not least a the",
    "start": "1694230",
    "end": "1703830"
  },
  {
    "start": "1701000",
    "end": "1701000"
  },
  {
    "text": "rest x-ray so let's say we have here an application that is running behind API",
    "start": "1703830",
    "end": "1710490"
  },
  {
    "text": "gateway so my users interact with that through the mobile phone send the request to api gateway that then calls",
    "start": "1710490",
    "end": "1717930"
  },
  {
    "text": "the lambda function that interacts let's say with dynamodb and SQS on sqs queue",
    "start": "1717930",
    "end": "1724370"
  },
  {
    "text": "so x-ray we call trace the whole end-to-end",
    "start": "1724370",
    "end": "1729990"
  },
  {
    "text": "interaction from the user sending the request until the response gets back to",
    "start": "1729990",
    "end": "1735150"
  },
  {
    "text": "the user that's what we call a trace within a trace we can have segments so one",
    "start": "1735150",
    "end": "1741840"
  },
  {
    "text": "segment can be the API Gator interaction another segment can be the lambda",
    "start": "1741840",
    "end": "1747990"
  },
  {
    "text": "function logic and within a segment we can have sub segments so let's say our",
    "start": "1747990",
    "end": "1755160"
  },
  {
    "text": "lambda function execution has two sub segments which is interacting with sqs and interacting with diamond so why is",
    "start": "1755160",
    "end": "1762990"
  },
  {
    "text": "that important so again getting back to that spike on the response time so let's",
    "start": "1762990",
    "end": "1768300"
  },
  {
    "text": "say the response time is a spiky if I have that trace information I know that a specific method on my API",
    "start": "1768300",
    "end": "1776040"
  },
  {
    "text": "is taking a long time to process but now I can go and x-ray and say where is the",
    "start": "1776040",
    "end": "1781080"
  },
  {
    "text": "bottleneck is there my lambda function logic parsing input params is that",
    "start": "1781080",
    "end": "1786440"
  },
  {
    "text": "interacting with sqs or is that interacting with dynamo if it's DynamoDB",
    "start": "1786440",
    "end": "1792120"
  },
  {
    "text": "that is taking long maybe I have the wrong indexes maybe I have the wrong capacity units or in the profusion that",
    "start": "1792120",
    "end": "1798900"
  },
  {
    "text": "so you have a quick insight about that and this is what it looks like on an",
    "start": "1798900",
    "end": "1805530"
  },
  {
    "text": "x-ray so on the top you have like okay your operation took these amount of time and the sub tests they took those those",
    "start": "1805530",
    "end": "1813420"
  },
  {
    "text": "amount of times so you can quickly identify bottlenecks here and that's that's priceless especially when you are",
    "start": "1813420",
    "end": "1820560"
  },
  {
    "text": "on an emergency or on a case then you need faster response usually I see a lot",
    "start": "1820560",
    "end": "1825930"
  },
  {
    "text": "of customers say oh I have a spike here I need to go to the log lines and see oh let me see the timestamp when I started",
    "start": "1825930",
    "end": "1832740"
  },
  {
    "text": "that operation was t0 and then a lot of log lines were logged and then I finally have a t1 here what",
    "start": "1832740",
    "end": "1839700"
  },
  {
    "text": "is the difference okay it's taking five seconds now where's the bottle bottleneck in between that so it takes a lot of time",
    "start": "1839700",
    "end": "1846780"
  },
  {
    "text": "it just doesn't scale and also he provides you like a service graph that",
    "start": "1846780",
    "end": "1853770"
  },
  {
    "start": "1849000",
    "end": "1849000"
  },
  {
    "text": "gives you like a site on the fly in real time what what are the services that are",
    "start": "1853770",
    "end": "1860820"
  },
  {
    "text": "being directly called by your end user so you can have that you have the users on the left-hand side there and each one",
    "start": "1860820",
    "end": "1867870"
  },
  {
    "text": "of those circles are services right so you have two services that are exposed to your end-users and whenever they call",
    "start": "1867870",
    "end": "1875130"
  },
  {
    "text": "those services they call all other internal services right so you have you have some mini sites of which services",
    "start": "1875130",
    "end": "1882000"
  },
  {
    "text": "call each other and not only that inside each circle you have the average execution time for that service and on",
    "start": "1882000",
    "end": "1890010"
  },
  {
    "text": "the caller's of the circle you can get a feeling of error rates so if you have a",
    "start": "1890010",
    "end": "1895650"
  },
  {
    "text": "circle that is all green that means you have zero errors but if you have a circle that has more yellows or more",
    "start": "1895650",
    "end": "1901830"
  },
  {
    "text": "reds that means you have greater error rates there that gives you like a quick",
    "start": "1901830",
    "end": "1907260"
  },
  {
    "text": "insight just by looking at that map or the graph about how things are going on",
    "start": "1907260",
    "end": "1913160"
  },
  {
    "start": "1913000",
    "end": "1913000"
  },
  {
    "text": "so how do you use x-ray into your apps so we talked about using sending custom",
    "start": "1913160",
    "end": "1919290"
  },
  {
    "text": "metrics your UDP daemon we talked about using sending your logs to cloud watch by using cloud watch logs agent how do",
    "start": "1919290",
    "end": "1926790"
  },
  {
    "text": "you send data how do you send tracing information to x-ray same scenario you",
    "start": "1926790",
    "end": "1934140"
  },
  {
    "text": "have your application running on an ec2 instance on your AWS account you install",
    "start": "1934140",
    "end": "1942360"
  },
  {
    "text": "the x-ray daemon by the way for those of you running for instance lamda the x-ray",
    "start": "1942360",
    "end": "1947400"
  },
  {
    "text": "daemon is available for land as well so the same logic applies into the code what is the easiest way to send tracing",
    "start": "1947400",
    "end": "1955530"
  },
  {
    "text": "data to x-ray use the x-ray SDK the",
    "start": "1955530",
    "end": "1960690"
  },
  {
    "text": "x-ray provides SDKs for nodejs Java and Python I don't know if they",
    "start": "1960690",
    "end": "1968430"
  },
  {
    "text": "release something new but I think that's it so far and then I see a lot of customers say hey I cannot use x-ray",
    "start": "1968430",
    "end": "1975030"
  },
  {
    "text": "because I'm using let's say Ruby and it doesn't have an x-ray SDK yet that's not",
    "start": "1975030",
    "end": "1983070"
  },
  {
    "text": "an excuse because that UDP daemon if you use the SDK all the SDK is going to be",
    "start": "1983070",
    "end": "1989580"
  },
  {
    "text": "doing is generating that JSON payload that you need to send through UDP to that day but you can",
    "start": "1989580",
    "end": "1995970"
  },
  {
    "text": "generate that payload yourself as well and that's exactly what I'm going to be doing on the demo here so I have my",
    "start": "1995970",
    "end": "2002000"
  },
  {
    "text": "application running and as it's running it's interacting with the services and I'm taking a measuring all the time it",
    "start": "2002000",
    "end": "2009410"
  },
  {
    "text": "takes to interact with dynamo or with sqs or whatsoever and at the end of that",
    "start": "2009410",
    "end": "2014960"
  },
  {
    "text": "cycle I mount that JSON that is expected by the x-ray daemon that's well",
    "start": "2014960",
    "end": "2020390"
  },
  {
    "text": "documented on the x-ray documentation and I send that through UDP again the",
    "start": "2020390",
    "end": "2025610"
  },
  {
    "text": "same concept firing forget you're not introducing latency into your code and behind the scenes the daemon will be",
    "start": "2025610",
    "end": "2033110"
  },
  {
    "text": "decoupling that tracing aggregation API calls from an application calling the HTTP API and sending that trace",
    "start": "2033110",
    "end": "2039950"
  },
  {
    "text": "information your AWS account you can run exactly that same thing on print or any",
    "start": "2039950",
    "end": "2047540"
  },
  {
    "text": "environment that has internet access and the right credentials to talk to your AWS account then yourse is our support",
    "start": "2047540",
    "end": "2056540"
  },
  {
    "text": "and let's see that mean guys can go in and check that Tracy and service map information or either consume those to",
    "start": "2056540",
    "end": "2063919"
  },
  {
    "text": "the api's so demo time these damn is",
    "start": "2063920",
    "end": "2069740"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "available on a github repo we're going to display the URL soon but let's put it all together",
    "start": "2069740",
    "end": "2075350"
  },
  {
    "text": "let's do custom metrics through UDP let's do logging and sending logs to fob",
    "start": "2075350",
    "end": "2081379"
  },
  {
    "text": "watch logs creating custom metrics out of those logs and send tracing",
    "start": "2081380",
    "end": "2087320"
  },
  {
    "text": "information so let's say I have my ec2 instance running on my a device account I'm gonna install all those three Damons",
    "start": "2087320",
    "end": "2096290"
  },
  {
    "text": "collect D to receive metrics or UDP x-ray daemon to receive JSON payload",
    "start": "2096290",
    "end": "2102470"
  },
  {
    "text": "information about my tracing and cloud watch logs agent to monitor my",
    "start": "2102470",
    "end": "2108080"
  },
  {
    "text": "application logs so we can send those logs through to to our AWS account then",
    "start": "2108080",
    "end": "2114440"
  },
  {
    "text": "I have my application and this is the cellular code of that application so all",
    "start": "2114440",
    "end": "2120110"
  },
  {
    "text": "that application does it runs on a loop and the first two is just calculating P factorial number",
    "start": "2120110",
    "end": "2127520"
  },
  {
    "text": "of 5,000 and then is calculating on the second line the thirty-fifth",
    "start": "2127520",
    "end": "2133490"
  },
  {
    "text": "number on the fibonacci sequence these are just examples to consume some CPU",
    "start": "2133490",
    "end": "2138560"
  },
  {
    "text": "and have some test being done and then we log those metrics to log files that",
    "start": "2138560",
    "end": "2145580"
  },
  {
    "text": "are being listened by cloud watch agents we send those metrics on how long it",
    "start": "2145580",
    "end": "2151550"
  },
  {
    "text": "took to execute to calculate the factorial and fibonacci tests we send",
    "start": "2151550",
    "end": "2158600"
  },
  {
    "text": "that through collecting and we send trace information regarding all of those",
    "start": "2158600",
    "end": "2164270"
  },
  {
    "text": "segments and sub segments execution time so you can clearly see what is the",
    "start": "2164270",
    "end": "2170270"
  },
  {
    "text": "bottleneck in this execution loop then behind the scenes those demos will be",
    "start": "2170270",
    "end": "2176930"
  },
  {
    "text": "sending that information to cloud watch API or the X ray API so you can see your",
    "start": "2176930",
    "end": "2184430"
  },
  {
    "text": "logs have custom metrics and have tracing information there so demo time",
    "start": "2184430",
    "end": "2191330"
  },
  {
    "text": "so this demo is on github under the ADA addressed labs we have lots of cool",
    "start": "2191330",
    "end": "2199640"
  },
  {
    "text": "demos under AWS labs and lots of customer doesn't know that so if you go to github.com and look for addressed",
    "start": "2199640",
    "end": "2207440"
  },
  {
    "text": "labs once you get into the ada address labs page just search for the wrapper cloud watch - x ray - a p.m. - demo and",
    "start": "2207440",
    "end": "2217970"
  },
  {
    "text": "you should see that so let's see working",
    "start": "2217970",
    "end": "2225940"
  },
  {
    "text": "okay",
    "start": "2237349",
    "end": "2240349"
  },
  {
    "text": "okay so for the sake of time I'm not gonna run this live and I have a video that I",
    "start": "2247870",
    "end": "2255550"
  },
  {
    "text": "recorded but again I strongly encourage all of you to test it out or just clone the rapper follow the instructions and",
    "start": "2255550",
    "end": "2261880"
  },
  {
    "text": "you can run that on your own eighth address accounts you shouldn't take more than 10 minutes to set this up and start",
    "start": "2261880",
    "end": "2268180"
  },
  {
    "text": "running so we need to define the I am",
    "start": "2268180",
    "end": "2273370"
  },
  {
    "text": "roles so if you go to that github repo you have clear instructions and that is",
    "start": "2273370",
    "end": "2279550"
  },
  {
    "text": "the two that I am easy to roll needs to have the right policies in place so the",
    "start": "2279550",
    "end": "2286600"
  },
  {
    "text": "application can want send matrix to cloud watch choose and blocks throughout",
    "start": "2286600",
    "end": "2291820"
  },
  {
    "text": "watch logs and three sent Tracy information to x-ray so what I'm doing",
    "start": "2291820",
    "end": "2297910"
  },
  {
    "text": "here is creating an easy to roll just",
    "start": "2297910",
    "end": "2306460"
  },
  {
    "text": "give it a name and some description then",
    "start": "2306460",
    "end": "2314770"
  },
  {
    "text": "I'm gonna look for that role so I can attach some policies to that and if you",
    "start": "2314770",
    "end": "2322960"
  },
  {
    "text": "look at the readme we have the specific information about what kind of policies we need for each one of x-ray called",
    "start": "2322960",
    "end": "2331150"
  },
  {
    "text": "watch logs and cloud watch matrix I had already created those so I'm just attaching that to the row and I'm just",
    "start": "2331150",
    "end": "2341410"
  },
  {
    "text": "expanding to show how what those policies look like they're exactly how",
    "start": "2341410",
    "end": "2347770"
  },
  {
    "text": "they're described on the repo",
    "start": "2347770",
    "end": "2351030"
  },
  {
    "text": "now you create the ec2 instance so I",
    "start": "2354000",
    "end": "2359220"
  },
  {
    "text": "just use the latest linux ami it can be a teacher micro I select the V PC and",
    "start": "2359220",
    "end": "2365490"
  },
  {
    "text": "the subnet that I want to run that on and the only trick here is to make sure you select the proper I am role that we",
    "start": "2365490",
    "end": "2372090"
  },
  {
    "text": "just created and attach those policies otherwise you won't be able to send that information to call watch and x-ray then",
    "start": "2372090",
    "end": "2381300"
  },
  {
    "text": "we just add a name tag and we put that",
    "start": "2381300",
    "end": "2393060"
  },
  {
    "text": "on a security group that will allow us to SSH the bots",
    "start": "2393060",
    "end": "2399589"
  },
  {
    "text": "after a few minutes it's gonna show up",
    "start": "2404380",
    "end": "2410069"
  },
  {
    "text": "of course here we added that so it's running now you can SSH to that ec2",
    "start": "2410580",
    "end": "2420940"
  },
  {
    "text": "instance to resolve the application so you just copy and paste those commands",
    "start": "2420940",
    "end": "2428070"
  },
  {
    "text": "and what we're doing here we're installing all the packages that are",
    "start": "2428100",
    "end": "2433360"
  },
  {
    "text": "needed all those x-ray agent well watch logs agent collect the agent and we are",
    "start": "2433360",
    "end": "2439960"
  },
  {
    "text": "also cloning the rap hole and installing the application itself and of course configuring all those agents to work",
    "start": "2439960",
    "end": "2446890"
  },
  {
    "text": "properly",
    "start": "2446890",
    "end": "2449220"
  },
  {
    "text": "so once the application finishes installation you will automatically create this log group for you with two",
    "start": "2470730",
    "end": "2478470"
  },
  {
    "text": "metric filters the metric filters again is what can create custom metrics out of",
    "start": "2478470",
    "end": "2484829"
  },
  {
    "text": "logs for you and it will create the cloud watch dashboard for you and I'm",
    "start": "2484829",
    "end": "2490140"
  },
  {
    "text": "gonna pause here just to explain what we're doing here so on the left hand side we have on the upper left it's how",
    "start": "2490140",
    "end": "2497880"
  },
  {
    "text": "long we're gonna be plotting how long is it taking to execute the factorial",
    "start": "2497880",
    "end": "2503130"
  },
  {
    "text": "method in seconds and on the left bottom we're gonna we're gonna plot how long",
    "start": "2503130",
    "end": "2508619"
  },
  {
    "text": "it's taking to calculate the thirty-fifth number on the Fibonacci sequence these values are coming from my application",
    "start": "2508619",
    "end": "2515780"
  },
  {
    "text": "sending those over UDP to collect and collect descending data cloud watch on",
    "start": "2515780",
    "end": "2522930"
  },
  {
    "text": "the right hand side we're plotting exactly those the same values but now",
    "start": "2522930",
    "end": "2528420"
  },
  {
    "text": "those values are coming out of the application logs then the cloud watch logs agent are getting that and sending",
    "start": "2528420",
    "end": "2535500"
  },
  {
    "text": "to cloud watch logs and then my metric filters are creating metrics out of my",
    "start": "2535500",
    "end": "2541800"
  },
  {
    "text": "logs arriving on cloud watch logs so that's just to give you the feeling how do you create custom metrics one way or",
    "start": "2541800",
    "end": "2549030"
  },
  {
    "text": "another",
    "start": "2549030",
    "end": "2551089"
  },
  {
    "text": "again that latency benchmark you can run that as well it's under samples latency",
    "start": "2555410",
    "end": "2565640"
  },
  {
    "text": "then latency dot RB again it's a ruby script all it does it get is get a",
    "start": "2565640",
    "end": "2571859"
  },
  {
    "text": "number as an input and will log as many lines as you ass in the log file and",
    "start": "2571859",
    "end": "2577680"
  },
  {
    "text": "will send as many package as you pass through UDP and report by the end how",
    "start": "2577680",
    "end": "2582810"
  },
  {
    "text": "long it took to log and how long it took to send those packages through UDP so",
    "start": "2582810",
    "end": "2587849"
  },
  {
    "text": "you can kind of get the feeling of latency introduced into the application so we go to the root folder of the",
    "start": "2587849",
    "end": "2594270"
  },
  {
    "text": "application we just list there's no logs",
    "start": "2594270",
    "end": "2601470"
  },
  {
    "text": "on the logs folder that means we didn't on anything yet so we just run the latency test in this case it's gonna run",
    "start": "2601470",
    "end": "2608430"
  },
  {
    "text": "for I guess a hundred thousand log lines and one hundred thousand UDP packages",
    "start": "2608430",
    "end": "2613710"
  },
  {
    "text": "and you can see one point four against Europe on 85 and just to show that I'm",
    "start": "2613710",
    "end": "2619650"
  },
  {
    "text": "actually logging that if you take a look at the log on the beginning of the log and at the end of the log we're actually",
    "start": "2619650",
    "end": "2628410"
  },
  {
    "text": "really logging that so you can run that latency demo as well so running the",
    "start": "2628410",
    "end": "2634140"
  },
  {
    "text": "application once the application is is tall you just go to the root folder of",
    "start": "2634140",
    "end": "2640350"
  },
  {
    "text": "that and all of those instructions are on the readme file the git repo then you execute that on the background because",
    "start": "2640350",
    "end": "2646950"
  },
  {
    "text": "we want to leave the application running so it's always generating information for us so I'm just checking the logs",
    "start": "2646950",
    "end": "2655890"
  },
  {
    "text": "because I just started the application so my application is running on a loop and generating logs and ok let me just",
    "start": "2655890",
    "end": "2669840"
  },
  {
    "text": "get back ok I want to pause here because this is the line that we're interested about so whenever we have my underscore",
    "start": "2669840",
    "end": "2678030"
  },
  {
    "text": "app dot matrix that is the flag to tell hey we're reporting metrics in this log",
    "start": "2678030",
    "end": "2684150"
  },
  {
    "text": "line here and then I say hey factorial is taking these amount of seconds to execute and Fibonacci took one point",
    "start": "2684150",
    "end": "2691980"
  },
  {
    "text": "forty nine seconds to execute so those are the values that we're going to retrieve from cloud watch logs to create",
    "start": "2691980",
    "end": "2698820"
  },
  {
    "text": "test and metrics by using the metric filters so my application is running my",
    "start": "2698820",
    "end": "2708900"
  },
  {
    "text": "application is finally running here we just want to check that those demos are",
    "start": "2708900",
    "end": "2715740"
  },
  {
    "text": "sent information so if I tell the collecti log we can see that every 20",
    "start": "2715740",
    "end": "2721140"
  },
  {
    "text": "seconds every 30 seconds now I have",
    "start": "2721140",
    "end": "2727830"
  },
  {
    "text": "every 20 seconds it's sending aggregating those metrics and sending that to cloud watch i just configure",
    "start": "2727830",
    "end": "2734040"
  },
  {
    "text": "those demos to report that you production environment you might not want to have these kind of information",
    "start": "2734040",
    "end": "2740010"
  },
  {
    "text": "so you're not over logging then we're going to tail the law called watch logs agent",
    "start": "2740010",
    "end": "2745170"
  },
  {
    "text": "so as logs are being written by my application it's every five seconds configured to get those new log lines",
    "start": "2745170",
    "end": "2751740"
  },
  {
    "text": "and report and send those to cloud watch logs and finally we'll tail the x-ray",
    "start": "2751740",
    "end": "2762840"
  },
  {
    "text": "daemon to make sure that it's actually receiving payload trace information in",
    "start": "2762840",
    "end": "2769650"
  },
  {
    "text": "sending that to x-ray so this is my application running and send the information for all those three demons",
    "start": "2769650",
    "end": "2778940"
  },
  {
    "text": "now we can go back to the logs and we have our log group that is created when",
    "start": "2781610",
    "end": "2787620"
  },
  {
    "text": "you saw the app now we have that ec2 instance number and you can see that the logs are arriving there and you can",
    "start": "2787620",
    "end": "2795210"
  },
  {
    "text": "lively tale those and if you compare the SSH session with the one on the console",
    "start": "2795210",
    "end": "2800550"
  },
  {
    "text": "the time difference is like five seconds because I can figure the log it logged agent to send data every five seconds",
    "start": "2800550",
    "end": "2807930"
  },
  {
    "text": "you can configure that again for that same law group I have two metric filters",
    "start": "2807930",
    "end": "2814640"
  },
  {
    "text": "that I create the filter pattern to actually filter for those metric lines",
    "start": "2814640",
    "end": "2821700"
  },
  {
    "text": "and create custom metrics out of those values on those lines",
    "start": "2821700",
    "end": "2827480"
  },
  {
    "text": "so if I click test pattern I see some results that are matching and I can use",
    "start": "2827480",
    "end": "2834210"
  },
  {
    "text": "those variables v1 and v2 to create my metrics so I can give a metric name space metric name and value and now",
    "start": "2834210",
    "end": "2842280"
  },
  {
    "text": "those metrics are available for me to use for example on the dashboard",
    "start": "2842280",
    "end": "2848660"
  },
  {
    "text": "the same thing for the other metric we're just selecting the different values and that's how you create custom",
    "start": "2852350",
    "end": "2860100"
  },
  {
    "text": "metrics out of logs on cloud watch logs",
    "start": "2860100",
    "end": "2864980"
  },
  {
    "text": "now if we go to into the dashboard to actually see those metrics we need to",
    "start": "2877940",
    "end": "2887900"
  },
  {
    "text": "select the proper time window so if we go and select I guess the last five",
    "start": "2887900",
    "end": "2894230"
  },
  {
    "text": "minutes 15 minutes those metrics are there and they're matching because we",
    "start": "2894230",
    "end": "2901100"
  },
  {
    "text": "are reporting the same values through UDP or through the logs so when you look",
    "start": "2901100",
    "end": "2906290"
  },
  {
    "text": "you can see the timestamp the value of the metric name so that kind of gives you an idea of how would you introduce",
    "start": "2906290",
    "end": "2912920"
  },
  {
    "text": "custom metrics and make those available to cloud watch being that through a UDP",
    "start": "2912920",
    "end": "2918830"
  },
  {
    "text": "agent instrument in your code or taking those values out of your application logs",
    "start": "2918830",
    "end": "2925900"
  },
  {
    "text": "so if we go to x-ray it slowly the service map since my application is only",
    "start": "2938820",
    "end": "2945750"
  },
  {
    "text": "a standalone application there's no external services it's interacting with I just see one circle and everything is",
    "start": "2945750",
    "end": "2953820"
  },
  {
    "text": "green because I'm not reporting any errors and inside that I see the average execution time on my application if I",
    "start": "2953820",
    "end": "2962130"
  },
  {
    "text": "click the circle you can see a nice char and if you click view traces then you",
    "start": "2962130",
    "end": "2968310"
  },
  {
    "text": "can see the traces of the application and that's exactly what we're gonna do",
    "start": "2968310",
    "end": "2975350"
  },
  {
    "text": "we'll look for the latest traces so which is let's say probably the last 5",
    "start": "2975350",
    "end": "2981350"
  },
  {
    "text": "minutes or 1 minute and we select the most recent trace as an example and once",
    "start": "2981350",
    "end": "2988860"
  },
  {
    "text": "you click that trace on the top line you can see the overall execution time and we can spot on see that Fibonacci is by",
    "start": "2988860",
    "end": "2997590"
  },
  {
    "text": "far my largest bottleneck on this execution here right that's that's",
    "start": "2997590",
    "end": "3003050"
  },
  {
    "text": "extremely helpful when you're troubleshooting or under pressure instead of going to log files to figure",
    "start": "3003050",
    "end": "3008660"
  },
  {
    "text": "that out then you can click on the certain the segments or sub segments to",
    "start": "3008660",
    "end": "3013790"
  },
  {
    "text": "get more information so you can have metadata be sent you can have exception stack traces piece and it's all a matter",
    "start": "3013790",
    "end": "3020540"
  },
  {
    "text": "of adding that to that JSON payload understanding through UDP and you can",
    "start": "3020540",
    "end": "3026990"
  },
  {
    "text": "check the other sub segment as well and see exactly the same information I think",
    "start": "3026990",
    "end": "3032870"
  },
  {
    "text": "I put like in the annotations what is the input parameter and passing through to those methods Fibonacci and the",
    "start": "3032870",
    "end": "3039740"
  },
  {
    "text": "factorial if I had an exception I could plot the stack trace so I can have the stack trace right here as well and this",
    "start": "3039740",
    "end": "3046640"
  },
  {
    "text": "is the raw data this is the JSON payload that the application is mounting",
    "start": "3046640",
    "end": "3052010"
  },
  {
    "text": "dynamically and sending through UDP this is all documented on the x-ray",
    "start": "3052010",
    "end": "3059410"
  },
  {
    "text": "documentation and this is what actually does the x-ray SDK does for you if",
    "start": "3059410",
    "end": "3065120"
  },
  {
    "text": "you're using a programming language that there has an x-ray SDK you",
    "start": "3065120",
    "end": "3070340"
  },
  {
    "text": "use that so you don't need to implement creating that JSON file but if you're using a programming language that",
    "start": "3070340",
    "end": "3076010"
  },
  {
    "text": "doesn't have an x-ray SDK yet you can do it yourself and that's exactly what the",
    "start": "3076010",
    "end": "3081650"
  },
  {
    "text": "dam is doing so to terminate the",
    "start": "3081650",
    "end": "3092510"
  },
  {
    "text": "environment we just delete we stop the application we shut down the ec2",
    "start": "3092510",
    "end": "3098120"
  },
  {
    "text": "instance we delete the logs so we don't pay for that and we delete the dashboard",
    "start": "3098120",
    "end": "3104470"
  },
  {
    "text": "not today but probably by the end of the week all of those manual things that I'm",
    "start": "3104470",
    "end": "3110780"
  },
  {
    "text": "doing here on this demo will not be needed because we're gonna be releasing a confirmation template for the demo as",
    "start": "3110780",
    "end": "3116900"
  },
  {
    "text": "well so if you check like today that's probably not gonna be there but if you check by the end of the week it's it",
    "start": "3116900",
    "end": "3123410"
  },
  {
    "text": "will be there so I stopped the application it's not logging anything yet anything anymore just make sure we",
    "start": "3123410",
    "end": "3137570"
  },
  {
    "text": "go back to the AWS account let's close this will delete the logs I",
    "start": "3137570",
    "end": "3144740"
  },
  {
    "text": "don't need those logs it's just a demo just a test I don't want to be paying for that so we delete that and we delete",
    "start": "3144740",
    "end": "3152930"
  },
  {
    "text": "the dashboard as well",
    "start": "3152930",
    "end": "3155770"
  },
  {
    "text": "so this is the demo let me switch back",
    "start": "3162980",
    "end": "3169329"
  },
  {
    "text": "so again the demo URL is here please try",
    "start": "3171070",
    "end": "3176510"
  },
  {
    "text": "it out let me know what you think in some best practices on a the brass so",
    "start": "3176510",
    "end": "3183950"
  },
  {
    "start": "3180000",
    "end": "3180000"
  },
  {
    "text": "again it's really important to have custom metrics centralized logs Tracey",
    "start": "3183950",
    "end": "3189790"
  },
  {
    "text": "information and service map with x-ray helps a lot as well but best practices",
    "start": "3189790",
    "end": "3196430"
  },
  {
    "text": "for implementing APM on AWS design your applications to report custom metrics",
    "start": "3196430",
    "end": "3202550"
  },
  {
    "text": "and when you do that choose meaningful metrics that will bring value to you use a new DP daemon",
    "start": "3202550",
    "end": "3211940"
  },
  {
    "text": "whenever you can to send those metrics so you don't introduce latency into your code plan carefully your logging and",
    "start": "3211940",
    "end": "3220400"
  },
  {
    "text": "metric strategy you don't want to over send metrics or over log or send lots of",
    "start": "3220400",
    "end": "3226670"
  },
  {
    "text": "log that you don't use the cloud watch so you might have to plan ahead of time do you want to log different things into",
    "start": "3226670",
    "end": "3233060"
  },
  {
    "text": "different log files do you want to have a specific log file just for metrics or not things like that use x-ray for",
    "start": "3233060",
    "end": "3241550"
  },
  {
    "text": "distributed Tracey and troubleshooting",
    "start": "3241550",
    "end": "3245650"
  },
  {
    "text": "the Liebherr cloud watch dashboards alarms and self-healing automations as",
    "start": "3248170",
    "end": "3253849"
  },
  {
    "text": "part of your application so as you move on on the APM journey on AWS start by",
    "start": "3253849",
    "end": "3260150"
  },
  {
    "text": "introducing custom metrics into your application once you have that the lever",
    "start": "3260150",
    "end": "3265790"
  },
  {
    "text": "application with the dashboard so you can share meaningful information about how to maintain how to support and how",
    "start": "3265790",
    "end": "3273050"
  },
  {
    "text": "to monitor that application with other teams once you have that you might want to go a step further to set up called watch",
    "start": "3273050",
    "end": "3279650"
  },
  {
    "text": "alarms that might notify someone whenever a metric for us or threshold",
    "start": "3279650",
    "end": "3285170"
  },
  {
    "text": "for instance but what you really want to do is go a step further and do self-healing automation so whenever you",
    "start": "3285170",
    "end": "3291890"
  },
  {
    "text": "have a specific error happening that is triggered by a trash being crossed by a custom metric you",
    "start": "3291890",
    "end": "3297870"
  },
  {
    "text": "might call let's say a lambda code to fix that that error before your users",
    "start": "3297870",
    "end": "3302970"
  },
  {
    "text": "even see that or before you you pick someone from the support team at 2:00",
    "start": "3302970",
    "end": "3308040"
  },
  {
    "text": "a.m. in the morning so there's a lot of things that can be automated and improve performance of your of your team be",
    "start": "3308040",
    "end": "3316200"
  },
  {
    "text": "aware of service limits such as bhoot log events put metric data portray",
    "start": "3316200",
    "end": "3322230"
  },
  {
    "text": "segments put telemetric record those are API calls to cloud watch an x-ray so",
    "start": "3322230",
    "end": "3327960"
  },
  {
    "text": "usually they have limits let's say you can only call them 5 times a second so",
    "start": "3327960",
    "end": "3333360"
  },
  {
    "text": "if you have several application hundreds of application sending log information",
    "start": "3333360",
    "end": "3338850"
  },
  {
    "text": "to cloud watch logs using cloud watch logs agent and they're running only parallel you might reach those service",
    "start": "3338850",
    "end": "3345990"
  },
  {
    "text": "limits so you need to carefully plan for that so talk to your AWS senior",
    "start": "3345990",
    "end": "3351330"
  },
  {
    "text": "Technical Account Manager Solutions Architect or the service scene because you really don't want to get into those",
    "start": "3351330",
    "end": "3356550"
  },
  {
    "text": "limits leverage AWS service metric",
    "start": "3356550",
    "end": "3361950"
  },
  {
    "text": "together with your own custom metrics so on your dashboard it might make sense to plot not only your custom metrics but",
    "start": "3361950",
    "end": "3369420"
  },
  {
    "text": "CPU utilization for instance if you're using Kinesis Keynesian matrix provided",
    "start": "3369420",
    "end": "3374670"
  },
  {
    "text": "on cloud watch as well if you use RDS or dynamo DB so it's not only your custom",
    "start": "3374670",
    "end": "3380610"
  },
  {
    "text": "matrix they are really really important but they're they're even more meaningful",
    "start": "3380610",
    "end": "3385650"
  },
  {
    "text": "when you cross match them and plot them together with other metrics available it's all about monitoring application",
    "start": "3385650",
    "end": "3391980"
  },
  {
    "text": "logic as well as all of the stack that you're using in your application so to",
    "start": "3391980",
    "end": "3399030"
  },
  {
    "start": "3397000",
    "end": "3397000"
  },
  {
    "text": "close out I would like to remember all of you that everything fails all the time so if you have the right matrix in",
    "start": "3399030",
    "end": "3406530"
  },
  {
    "text": "place you can do better monitoring you can catch errors before your user does it you have better customers happier",
    "start": "3406530",
    "end": "3414690"
  },
  {
    "text": "customers happier bosses everyone will be happy I put you some resources here",
    "start": "3414690",
    "end": "3420600"
  },
  {
    "start": "3418000",
    "end": "3418000"
  },
  {
    "text": "with some nice damage that you can also try out on the APM space really really",
    "start": "3420600",
    "end": "3428550"
  },
  {
    "text": "good stuff I encourage you guys to look at and again complete the evaluations you can",
    "start": "3428550",
    "end": "3434459"
  },
  {
    "start": "3432000",
    "end": "3432000"
  },
  {
    "text": "we can only always bring better contents for you and thanks a lot I'm going to",
    "start": "3434459",
    "end": "3439769"
  },
  {
    "text": "take questions and comments by the hallway thank you [Applause]",
    "start": "3439769",
    "end": "3448719"
  }
]