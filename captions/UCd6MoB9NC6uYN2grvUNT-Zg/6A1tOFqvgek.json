[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "嗨，大家好\n我们来自耐克 我们今天想谈谈 关于我们如何将\nDynamoDB 用于大规模生产",
    "start": "1867",
    "end": "8300"
  },
  {
    "text": "我叫 Zack Owens 我是耐克首席架构师 我帮助团队在他们的\n云原生应用程序上取得成功",
    "start": "8667",
    "end": "14132"
  },
  {
    "text": "我叫 Adam Farrell 我是耐克的首席\n软件开发员 主要支持我们的耐克\n跑步和训练体验",
    "start": "14933",
    "end": "23866"
  },
  {
    "start": "26000",
    "end": "78000"
  },
  {
    "text": "所以我们想先介绍\n一些背景 并谈谈我们的\nDynamoDB 之旅 当我们开始\n我们的云迁移之时",
    "start": "26500",
    "end": "32232"
  },
  {
    "text": "我们并没有从 DynamoDB 开始\n但是我们差不多 到了大规模使用\nDynamoDB 的阶段",
    "start": "32467",
    "end": "39267"
  },
  {
    "text": "然后我们再谈谈\n关于推出 耐克的流量模式\n非常有趣",
    "start": "39800",
    "end": "44500"
  },
  {
    "text": "我们一旦推出鞋子\n就会看到大量的流量涌入 因此在数据工程方面\n就能产生很多含义",
    "start": "44967",
    "end": "50733"
  },
  {
    "text": "我们使用 DynamoDB\n解决了很多挑战 然后 Adam 将\n谈论 Achievements 这是我们的活动平台上的\n一个功能",
    "start": "50867",
    "end": "58833"
  },
  {
    "text": "允许跑步者或教练\n赢得成就、个人最佳 这是一项 DynamoDB\n内置在云中的服务",
    "start": "59100",
    "end": "65966"
  },
  {
    "text": "然后 Adam 会谈谈\n时区 这是关于从 Cassandra\n迁移到 DynamoDB 的故事",
    "start": "66567",
    "end": "71967"
  },
  {
    "text": "实际上我们已经从迁移中\n获得了相当多的好处",
    "start": "72133",
    "end": "75567"
  },
  {
    "start": "78000",
    "end": "110000"
  },
  {
    "text": "所以让我们首先看看 DynamoDB\n如何帮助耐克实现其目标",
    "start": "78967",
    "end": "83467"
  },
  {
    "text": "耐克的使命宣言重点\n在于创新和激励 因为那是\n我们帮助运动员 发挥最大潜力的方式",
    "start": "84667",
    "end": "90800"
  },
  {
    "text": "耐克相信\n只要您有身体 您就能成为运动员 并且，作为耐克\n数字工程团队成员",
    "start": "91267",
    "end": "97133"
  },
  {
    "text": "我们想通过我们的数字\n体验为我们的运动员服务 这些数字体验中\n的一些例子",
    "start": "97767",
    "end": "103233"
  },
  {
    "text": "包括我们的 Nike Running\n和 Training Club 应用程序 以及我们的 SNKRS 应用程序\n和我们的 Nike.com",
    "start": "103367",
    "end": "108833"
  },
  {
    "start": "110000",
    "end": "163000"
  },
  {
    "text": "为了服务\n这些数字体验 我们拥有广泛的微服务\n作为所有这些功能的基础",
    "start": "111133",
    "end": "116533"
  },
  {
    "text": "如果考虑任何像\nNike.com 一样的体验 都需要大量的后端工作",
    "start": "116833",
    "end": "122067"
  },
  {
    "text": "例如库存\n产品数据 结账\n所有这些服务",
    "start": "122200",
    "end": "127066"
  },
  {
    "text": "都必须具备 那么我们做的实际上是\n拥有广泛的微服务平台 在平台上，我们能够\n分解我们所有的问题",
    "start": "127300",
    "end": "134100"
  },
  {
    "text": "并将问题独立部署\n进入微服务 我们主要通过 AWS\n完成这些工作",
    "start": "134500",
    "end": "141433"
  },
  {
    "text": "所以不管是计算\n在其中我们使用 EC2 Containers、Lambda",
    "start": "141600",
    "end": "147099"
  },
  {
    "text": "甚至我们的海量数据\n诸如在 S3 上使用 Glue 和 EMR 显然还有数据库\n比如 RDS",
    "start": "147900",
    "end": "154633"
  },
  {
    "text": "Neptune、Elasticsearch\n当然还有 DynamoDB 所有这些都有助于我们的微服务\n来对数字体验服务",
    "start": "154767",
    "end": "161167"
  },
  {
    "text": "这确实是我们使命的核心 但是一开始我们\n并不是这么做的 开始时我们没有\n微服务架构",
    "start": "161367",
    "end": "167667"
  },
  {
    "start": "163000",
    "end": "333000"
  },
  {
    "text": "我们最初的数字体验\n就是 Nike.com 所以这是传统的\n电商堆栈",
    "start": "169200",
    "end": "174300"
  },
  {
    "text": "在其中我们基本上使用的是\n现成的 Oracle 产品 并建立自己的单体 用于实际的\n前端体验",
    "start": "174467",
    "end": "181800"
  },
  {
    "text": "所以我们把这两个运行的单体 建立在传统的\n数据中心/托管设施中",
    "start": "181967",
    "end": "186933"
  },
  {
    "text": "我们发现随之带来了\n很多挑战 我敢肯定听众里有人\n曾经在单体上工作过",
    "start": "187867",
    "end": "194167"
  },
  {
    "text": "它们通常很难扩展 通常只能垂直地\n扩展单体 而无法横向扩展",
    "start": "194300",
    "end": "200067"
  },
  {
    "text": "并且，实际上我们发现\n在根据业务需求 扩展时，遇到了挑战 随着时间的流逝，\n我们需要越来越多的体验",
    "start": "201133",
    "end": "208400"
  },
  {
    "text": "不只是 Nike.com\n已经开始出现其它形式 例如 Nike Run Club 应用程序\nTraining Club 应用程序、SNKRS 应用程序",
    "start": "209000",
    "end": "215733"
  },
  {
    "text": "以及我们一些其它的移动体验 所以这需要很多功能调配工作 而使用我们的单体，我们\n未必能够以可扩展的方式完成",
    "start": "215867",
    "end": "222567"
  },
  {
    "text": "另外，我们正在进行\n这些大型部署工作 我们会将大概六个月内的\n更改归类在一起",
    "start": "223867",
    "end": "230500"
  },
  {
    "text": "然后一次全部部署\n这带来了很多问题 这简直是\n巨大的灾难",
    "start": "230900",
    "end": "236900"
  },
  {
    "text": "如果您把所有这些更改\n在同一时间进行部署 您知道，那一天就像",
    "start": "238000",
    "end": "244400"
  },
  {
    "text": "\"糟糕，六个月前的那件事\n刚刚造成生产中断了\" 真的很难确定\n是哪里出了问题",
    "start": "244567",
    "end": "250933"
  },
  {
    "text": "所以在2013年，我们\n彻底厌倦了这种单体",
    "start": "252533",
    "end": "257567"
  },
  {
    "text": "类型的操作模型 所以我们开始\n在云中重建功能 我们开始将存在于\n我们的单体中的功能",
    "start": "258133",
    "end": "265400"
  },
  {
    "text": "使用云原生服务\n移动到云中 所以我们在这种\n混合云模型中运营",
    "start": "265867",
    "end": "271067"
  },
  {
    "text": "但有一些功能仍然\n在数据中心单体中 而另一些功能\n在我们的微服务架构中",
    "start": "271200",
    "end": "276933"
  },
  {
    "text": "我们一直对此进行重复 划出更多的功能 但是在这个阶段\n我们还不一定成熟",
    "start": "277300",
    "end": "284300"
  },
  {
    "text": "我们只是简单体会了\n一下云原生时代 我们仍然进行\n一些手动部署",
    "start": "284933",
    "end": "290733"
  },
  {
    "text": "我记得那个时候\n我们使用电子表格 列出了所有的部署步骤\n简直了",
    "start": "290867",
    "end": "295133"
  },
  {
    "text": "但是现在，2015年左右\n我们真的开始成为 一个成熟的\n云优先组织",
    "start": "295900",
    "end": "301733"
  },
  {
    "text": "业务真正强有力到\n可以说 \"好，我们要迅速交付这个东西 使用云原生服务我们\n就可以很快地创建\"",
    "start": "301867",
    "end": "308833"
  },
  {
    "text": "因此，我们实际上可以 快速地进行扩展\n那是大概在2015年左右",
    "start": "309033",
    "end": "314233"
  },
  {
    "text": "我们的工作包括\n自动化 CI/CD 通道 我们采取自动化的核心原则",
    "start": "314367",
    "end": "320700"
  },
  {
    "text": "而且我们实际上以\n更快的速度开始部署 因此，如果能将这些事自动化 就能以一种",
    "start": "321100",
    "end": "328167"
  },
  {
    "text": "少得多又更好的方式\n减少自己用于恢复的时间",
    "start": "328300",
    "end": "330800"
  },
  {
    "start": "333000",
    "end": "383000"
  },
  {
    "text": "因此，当耐克迁移到云端 我们确保每项服务\n实施了四项核心原则",
    "start": "334100",
    "end": "339200"
  },
  {
    "text": "第一，响应能力必须好 需要快速为我们的运动员\n提供高品质的体验",
    "start": "339733",
    "end": "344333"
  },
  {
    "text": "我们的 API 需要\n快速、具韧性 确保顾客不会错过锻炼\n或超级抢手产品",
    "start": "344933",
    "end": "352133"
  },
  {
    "text": "在生产中始终会\n发生失败或错误 而我们的服务需要\n妥善地进行处理",
    "start": "352600",
    "end": "357133"
  },
  {
    "text": "还有具弹性\n与我们的运动员一起扩展 这项服务应该能够\n动态调整他们的能力",
    "start": "357800",
    "end": "363200"
  },
  {
    "text": "以所需的规模运行 还必须可观察 我们的运动员发现的问题\n需要进行快速诊断",
    "start": "363333",
    "end": "369966"
  },
  {
    "text": "我们的服务需要记录\n运动员数据的 处理方式，以便了解\n任何可能的问题",
    "start": "370533",
    "end": "376567"
  },
  {
    "text": "这些核心原则将\n贯穿在我们的谈话中 您将会看到这些原则\n如何影响我们的决定",
    "start": "377300",
    "end": "382167"
  },
  {
    "start": "383000",
    "end": "539000"
  },
  {
    "text": "除了这些原则\n我们需要一个开始的方向 所以我们开始时\n我们在这些数据中心单体中",
    "start": "384267",
    "end": "390500"
  },
  {
    "text": "进行了大量投资\n所以我们最初设想 也许我们可以\n将它们放在云中 然后从那里开始",
    "start": "390633",
    "end": "396833"
  },
  {
    "text": "我们很快发现\n我们仍然要在运营时 遭遇在数据中心中\n遇到的相同挑战 真的只能垂直扩展",
    "start": "397633",
    "end": "402733"
  },
  {
    "text": "我们并没有利用到 我们通过云获得的\n部分横向扩展能力 您知道，我们可以快速部署\n并迅速扩大规模",
    "start": "402867",
    "end": "411033"
  },
  {
    "text": "但我们无法善加利用 我们也无法善加利用\n多可用区体系结构 可以提供的\n部分容错保证",
    "start": "411167",
    "end": "418432"
  },
  {
    "text": "所以我们说不打算去\n提升还是转型 我们只打算构建\n云原生服务 这确实是一笔大投资\n并且完全重新改写了",
    "start": "418900",
    "end": "425933"
  },
  {
    "text": "我们在后端\n运营的方式 我们只是要集中精力\n构建良好的云原生服务",
    "start": "426067",
    "end": "431900"
  },
  {
    "text": "所以进行这项工作时\n显然需要数据库 来支持这些微服务 所以我们非常希望能有\n云原生数据库解决方案",
    "start": "432367",
    "end": "439733"
  },
  {
    "text": "所以首先\n我们就尝试了 Cassandra Cassandra 显然是\n基于十多年前的",
    "start": "440100",
    "end": "445133"
  },
  {
    "text": "Dynamo 文献 所以具有\n非常好的横向可扩展性 在吞吐量和数据存储\n两方面都是",
    "start": "445267",
    "end": "452100"
  },
  {
    "text": "这对我们极具吸引力 我们是全球知名大品牌\n而且我们有很多用户 所以我们有很多数据存储需求",
    "start": "452300",
    "end": "458633"
  },
  {
    "text": "也有大量的吞吐量需求 所以 Cassandra 实际上\n非常适合我们的许多用例",
    "start": "458767",
    "end": "463133"
  },
  {
    "text": "另外我们的一些用例\n从缓存中受益匪浅 这就是我们使用 Couchbase 的地方",
    "start": "464033",
    "end": "468966"
  },
  {
    "text": "Couchbase 具有出色的缓存层 可提供对高度频繁访问的数据\n真正的快速访问",
    "start": "469167",
    "end": "474732"
  },
  {
    "text": "产品数据之类的东西\n在此非常适合 因为很多人都在抢购某一个产品时 就是个产品数据",
    "start": "474900",
    "end": "481000"
  },
  {
    "text": "我们还说过数据库\n不会在微服务之间 被共享 所以这确实是\n微服务架构的核心原则",
    "start": "481700",
    "end": "487667"
  },
  {
    "text": "使得数据库能够 完全独立于\n该微服务以外 这也确实是\n一项关键推动力",
    "start": "487833",
    "end": "493633"
  },
  {
    "text": "使我们能够迁移到其它数据库\n解决方案，甚至不同的实施环境 而且，如果在类似\n运营模式的单体中",
    "start": "493767",
    "end": "503633"
  },
  {
    "text": "各功能可共享数据库表 这就是它们整合的方式 但是在我们的微服务架构中\n我们特别提到",
    "start": "505933",
    "end": "512500"
  },
  {
    "text": "唯一与服务互动的方式\n是通过其 REST API 或来自该服务的事件",
    "start": "512733",
    "end": "517266"
  },
  {
    "text": "所以这是我们数据库技术\n的一个核心原则 在这段时间里，我们还\n采用了 DevOps 模型",
    "start": "518233",
    "end": "524532"
  },
  {
    "text": "其中每个团队各自拥有\n其生产服务 所以从运营\n或开发而言",
    "start": "524700",
    "end": "530833"
  },
  {
    "text": "他们负责全部 而且还包括数据库 所以我们的团队实际上负责\n这些 Cassandra",
    "start": "530967",
    "end": "536833"
  },
  {
    "text": "和 Couchbase 集群的\n运营维护 所以当我们开始构建时\n我们的团队越来越多",
    "start": "536967",
    "end": "543567"
  },
  {
    "start": "539000",
    "end": "669000"
  },
  {
    "text": "我们发现，\n很多早期采用 Cassandra 然后进行深挖\n的团队",
    "start": "543900",
    "end": "549600"
  },
  {
    "text": "实际上发现了\n正确的调配设置 正确的构造之类的 他们确实具备了\n必要的部落知识",
    "start": "549733",
    "end": "556133"
  },
  {
    "text": "但是随着我们团队的增加 较新的团队不一定具备\n与 Cassandra 或 Couchbase 相关的生产经验",
    "start": "556333",
    "end": "562433"
  },
  {
    "text": "所以这成为一个瓶颈 这些团队是\n某个方面的专家，没错",
    "start": "562733",
    "end": "568233"
  },
  {
    "text": "但却最终在\n故障排除等方面 变成了瓶颈 我们很想授权团队\n以一种 DevOps 类型的方式",
    "start": "569133",
    "end": "575967"
  },
  {
    "text": "真正负责投入生产\n的部分工作 所以这真的\n很有挑战性 与我们的 DevOps\n概念有些相反",
    "start": "576100",
    "end": "586032"
  },
  {
    "text": "维护也变得\n极具挑战性 因为我们是 DevOps 团队 团队负责\n进行实际运营",
    "start": "587500",
    "end": "593633"
  },
  {
    "text": "这包括调配、补丁、升级、备份、还原 流水线的每个部分",
    "start": "593800",
    "end": "600000"
  },
  {
    "text": "他们也必须\n在必要的操作步骤中 对运行错误负责",
    "start": "600367",
    "end": "605633"
  },
  {
    "text": "这些实际上浪费了\n我们工程团队的时间 因此他们无法创建功能",
    "start": "606833",
    "end": "612233"
  },
  {
    "text": "增加功能或例如\n尝试一些很棒的东西 他们必须花时间\n操作数据库",
    "start": "612400",
    "end": "617700"
  },
  {
    "text": "这不是我们团队\n想做的事情 另一件具有\n挑战性的事情是 我们很多集群最终被\n超额配置但未充分利用",
    "start": "618000",
    "end": "625500"
  },
  {
    "text": "所以在很多情况下\n为了数据持久性 和可用性需求\n我们需要超额配置 但实际上我们发现\n仅仅在调配设置上",
    "start": "625733",
    "end": "633133"
  },
  {
    "text": "就浪费了一大笔钱 所以我们查看某个集群，会说： \"噢，在整个集群中\n只用了1％的磁盘，太少了",
    "start": "633267",
    "end": "641100"
  },
  {
    "text": "我们在这里也许能省点钱\" 然后一般情况下\n可观察性",
    "start": "641867",
    "end": "646767"
  },
  {
    "text": "也很难解决 所以我们有些团队\n读取量很大 也有团队编写量很大",
    "start": "646900",
    "end": "651767"
  },
  {
    "text": "一些团队希望以特定的方式\n调配 Cassandra 所以对于我们的\n一些处理这些问题",
    "start": "652000",
    "end": "657032"
  },
  {
    "text": "以应对这些可观察性\n问题的共享团队而言 真的很具挑战性",
    "start": "657167",
    "end": "662067"
  },
  {
    "text": "总体上\n我们发现 Cassandra 和 Couchbase 真的不是非常适合\n我们的组织",
    "start": "662900",
    "end": "669032"
  },
  {
    "start": "669000",
    "end": "725000"
  },
  {
    "text": "所以我想谈谈\n某个我们从 Cassandra 和 Couchbase 整体\n迁移过来的例子",
    "start": "669767",
    "end": "674833"
  },
  {
    "text": "我想谈谈产品发布 我想回头谈谈关于耐克的\n一件事，就是产品发布 当我们发布产品时\n我们采用新风格",
    "start": "675300",
    "end": "682900"
  },
  {
    "text": "或新的颜色方式来将\n我们的产品 第一次推向市场 诸如 Air Jordan Retros 之类的产品",
    "start": "683033",
    "end": "689867"
  },
  {
    "text": "当迈克尔·乔丹打篮球时 这款鞋就非常受欢迎 和当时相比\n这些产品在今天可能更受欢迎",
    "start": "690000",
    "end": "696699"
  },
  {
    "text": "例如，Adam 穿着 AJ1... Rookie of the Years\n是在 SNKRS 上赢来的",
    "start": "697533",
    "end": "703467"
  },
  {
    "text": "我想是几年前\n还是几个星期前？ -是的\n-是的，好！我穿着一双",
    "start": "703600",
    "end": "708700"
  },
  {
    "text": "Air VaporMax，是的\n也有在 SNKRS 上售卖 这些就是产品发布会",
    "start": "709133",
    "end": "714467"
  },
  {
    "text": "因此，当我们发布产品时\n我们每周会发布多次 一年中的每周都会发布",
    "start": "714600",
    "end": "720167"
  },
  {
    "text": "这是令人兴奋的时刻 我们的设计师在场\n将产品推向市场",
    "start": "720367",
    "end": "724900"
  },
  {
    "start": "725000",
    "end": "798000"
  },
  {
    "text": "所以我想\n从消费者的角度谈一谈 这就是 SNKRS\n代表我们的高品质体验",
    "start": "726033",
    "end": "732899"
  },
  {
    "text": "我们在此发布\n我们最受关注的产品 所以这是您首先\n看到产品之处 每次发布都从炒作开始",
    "start": "733067",
    "end": "739199"
  },
  {
    "text": "所以我们的流程实际上是\n发布内容 发布图像 并预先发布产品文案",
    "start": "739333",
    "end": "745233"
  },
  {
    "text": "实际情况是人们会进行分享\n因为他们喜欢 他们会发到 Instagram 上\n发到 Twitter 上",
    "start": "746267",
    "end": "751967"
  },
  {
    "text": "并在运动鞋爱好者论坛上发帖\n等等等等 所以消费者对这些产品\n需求非常大",
    "start": "752267",
    "end": "758032"
  },
  {
    "text": "而且因为很多产品\n很受欢迎，对吧？ 结果变成我们的挑战 实际情况是\n在这种体验中",
    "start": "758933",
    "end": "765267"
  },
  {
    "text": "您实际上可以选择\n接收推送通知 因此，当我们发布产品时\n您实际上可以在 产品被发布的同时收到推送\n以便您购买",
    "start": "765400",
    "end": "772167"
  },
  {
    "text": "而且我们的许多运动鞋迷\n都知道产品会销售一空 所以他们知道必须及时 进行购买",
    "start": "772500",
    "end": "778200"
  },
  {
    "text": "然后从浏览到结账\n付款，所有这些服务 SNKRS 中的每个接触点",
    "start": "779067",
    "end": "784433"
  },
  {
    "text": "都接触到我们的\n微服务架构 所以这对于体验\n实际上十分关键 就是完全可支持云",
    "start": "784600",
    "end": "791233"
  },
  {
    "text": "这给了我们在\n扩展及能够快速迭代 方面的许多功能",
    "start": "791567",
    "end": "797533"
  },
  {
    "start": "798000",
    "end": "851000"
  },
  {
    "text": "如果您了解\n关于运动鞋迷的话 您就知道他们有多热情 所以我们的产品\n有着大量的需求",
    "start": "799200",
    "end": "805399"
  },
  {
    "text": "其中很多产品都超级枪手 还有很多我们的消费者\n非常希望在产品 发布时就立即购买\n因为知道很快就会卖光",
    "start": "805567",
    "end": "812200"
  },
  {
    "text": "在我们以数字形式\n发布产品之前 我们会看到\n在商店前面排起长队",
    "start": "813300",
    "end": "818200"
  },
  {
    "text": "您必须排队等候，\n可能还要冒着寒冷 比如在星期六早上\n排队等待",
    "start": "818333",
    "end": "824367"
  },
  {
    "text": "而且您可能最后还是买不到产品 但今天，运动鞋爱好者们实际上\n可以在星期六早上7点起床",
    "start": "824500",
    "end": "829766"
  },
  {
    "text": "然后点击 \"购买\"\n这样容易多了 通过这种方式我们实际上\n可以为更多的人服务",
    "start": "829900",
    "end": "834300"
  },
  {
    "text": "在这段时间内，我们确实\n看到了最大的流量增长 所以因为我们要为\n每一个人服务",
    "start": "835633",
    "end": "841367"
  },
  {
    "text": "那么发布会一开始 我们就会立即看到\n大量涌入的流量 这也带来了围绕数据库\n和服务本身的",
    "start": "841533",
    "end": "848067"
  },
  {
    "text": "具体的工程挑战 我想告诉您\n具体的样子",
    "start": "848200",
    "end": "853333"
  },
  {
    "start": "851000",
    "end": "907000"
  },
  {
    "text": "这是一个示例发布 我们在上午7点推出产品",
    "start": "853700",
    "end": "858633"
  },
  {
    "text": "在之前您能\n看到 Nike.com 的流量 因此，由于峰值如此之大\n这使 Nike.com 的流量",
    "start": "859000",
    "end": "865567"
  },
  {
    "text": "看起来几乎为零 但 Nike.com 是全世界\n电子商务的顶级网站之一 所以流量绝对不是零",
    "start": "865700",
    "end": "871800"
  },
  {
    "text": "而是仍在服务成千上万个人 即使在这张图上\n看起来像零",
    "start": "871933",
    "end": "875600"
  },
  {
    "text": "所以您看到的是\n发布实际上发生在7点 我可以告诉您\n这个峰值是",
    "start": "877033",
    "end": "884167"
  },
  {
    "text": "Nike.com\n基线流量的数百倍 所以我们看到\n流量的大量增加 然后您将看到\n曲线下降",
    "start": "884300",
    "end": "891133"
  },
  {
    "text": "这就是我们售罄的时候 所以当我们卖完\n我们的核心鞋码时 可以看到很多时候\n顾客就停止购买了",
    "start": "891267",
    "end": "898433"
  },
  {
    "text": "因为我们缺货了 再次强调，我们在每天、一年中\n的每周都能多次看到这种情况",
    "start": "898567",
    "end": "904300"
  },
  {
    "text": "所以我们得专门为这个问题\n找出技术方案 在数据库配置方面\n这是我们必须要做的",
    "start": "904700",
    "end": "910867"
  },
  {
    "start": "907000",
    "end": "982000"
  },
  {
    "text": "我们必须为这个高峰做好准备\n而且我们必须增加顶部空间 我们想要每个来\n获得我们体验的人",
    "start": "911033",
    "end": "916800"
  },
  {
    "text": "都能获得良好的体验 我们不想出错\n不想出现超时 因为顾客会以为\n\"糟糕，我买不到这个产品了",
    "start": "917033",
    "end": "923700"
  },
  {
    "text": "可能全卖光了\" 所以我们必须要保证 顾客可以登入\n并完成整个过程",
    "start": "923833",
    "end": "930700"
  },
  {
    "text": "因此，从 Cassandra 的角度来看 我们必须在如此之\n高的水平上进行配置 在此我们显然\n存在大量的浪费",
    "start": "931967",
    "end": "939667"
  },
  {
    "text": "所以在发布之后 我们只需要这种容量\n维持大约八分钟 然后就是\n这个空白期",
    "start": "939800",
    "end": "946167"
  },
  {
    "text": "我们在此浪费资金 而且这实际上是这张图中\n相当大的一部分，对吧？",
    "start": "946633",
    "end": "950633"
  },
  {
    "text": "所以我们必须具备\n多余的容量 这也意味着\n我们必须 非常好地预测 我们必须知道\n高峰将会是什么水平",
    "start": "951767",
    "end": "958567"
  },
  {
    "text": "我们也必须知道 Cassandra 需要什么\n配置水平 如果您对 Cassandra 有所了解\n您就知道这非常具有挑战性",
    "start": "958700",
    "end": "964266"
  },
  {
    "text": "在那个集群中\n发生了很多 各种波动、复制 以及各种各样的\n配置选项",
    "start": "964400",
    "end": "969800"
  },
  {
    "text": "压缩之类的 所以实际上这条线\n貌似不太切实 但的确证明了一点",
    "start": "969933",
    "end": "976100"
  },
  {
    "text": "对于 Cassandra 的调配\n我们真的需要足够的容量 这实际上是非常具有挑战性的",
    "start": "976233",
    "end": "981333"
  },
  {
    "start": "982000",
    "end": "1037000"
  },
  {
    "text": "所以很多团队很希望\n有管理的体验 他们想要他们的数据库\n需要那种功能",
    "start": "982333",
    "end": "989200"
  },
  {
    "text": "但他们也需要扩展 他们需要简化操作 这就是他们迁移到 DynamoDB\n的原因，许多团队都这样做了",
    "start": "989533",
    "end": "995967"
  },
  {
    "text": "所以像产品发布之类的团队\n处理流量大量涌入的 还是产品数据团队\n他们处理",
    "start": "996133",
    "end": "1001600"
  },
  {
    "text": "获取有关产品 图像、文案\n价格等等信息的请求",
    "start": "1001900",
    "end": "1006200"
  },
  {
    "text": "甚至结账和付款\n都会送达支付处理器 并实际创建新订单",
    "start": "1007167",
    "end": "1011833"
  },
  {
    "text": "所有这些团队都迁移到了\nDynamoDB，特别是围绕产品发布 所以产品发布属于关键时刻",
    "start": "1012633",
    "end": "1018867"
  },
  {
    "text": "我们需要足够的规模\n和足够的配置 才能满足\n我们消费者的需求",
    "start": "1019267",
    "end": "1023899"
  },
  {
    "text": "所以总体来说\n各团队卸下了 群集维护的负担 他们不必再经过\nEC2 控制台并扩展规模",
    "start": "1025300",
    "end": "1032533"
  },
  {
    "text": "通过迁移到 DynamoDB\n来进行处理，也卸下了负担 而当我们研究 DynamoDB 时，\n我们做的第一件事",
    "start": "1033633",
    "end": "1039700"
  },
  {
    "start": "1037000",
    "end": "1162000"
  },
  {
    "text": "就是查看了我们的数据模型 所以我们回顾我们的老 Cassandra 和\nCouchbase 数据模型时，我们会说",
    "start": "1039833",
    "end": "1044466"
  },
  {
    "text": "\"Dynamo 的哪些功能集 会适合这些数据模型\n和我们的需求？\"",
    "start": "1045300",
    "end": "1050132"
  },
  {
    "text": "我们发现\nDynamoDB 功能集 实际上真的很丰富\n并解决了我们的很多问题",
    "start": "1050767",
    "end": "1056433"
  },
  {
    "text": "所以我想特别点出\n其中的几个 第一个是全局二级索引 全局二级索引\n让您能通过",
    "start": "1056867",
    "end": "1063533"
  },
  {
    "text": "与您的表不同的 HASH 和 RANGE 键\n来查询数据 所以这实际上 通过基本复制允许使用\n多个不同的",
    "start": "1063733",
    "end": "1069733"
  },
  {
    "text": "有效查询模式 在 Cassandra 和 Couchbase 中 这些会有点挑战性 因此，使用 Couchbase\n您必须写入两次",
    "start": "1070533",
    "end": "1077533"
  },
  {
    "text": "这是您唯一的选择 但如果是 Cassandra\n可使用物化视图等工具 或者您可以有多个表",
    "start": "1077667",
    "end": "1083467"
  },
  {
    "text": "但是所有这些都涉及\n很多代码或过程 而我们并不一定\n愿意进行管理",
    "start": "1083700",
    "end": "1089632"
  },
  {
    "text": "所以 GSI 也可以在\n创建表之后进行应用 所以我可以在我的 DynamoDB\n表中拥有 PB 级的数据",
    "start": "1090667",
    "end": "1096466"
  },
  {
    "text": "然后我只需进行一次\nAPI 调用即可进行索引 简直不可思议 但是，没错，这个功能\n让我们能快速发展",
    "start": "1096833",
    "end": "1103100"
  },
  {
    "text": "我们的数据模型 所以很多团队\n都在利用它 还有条件更新和部分更新",
    "start": "1103233",
    "end": "1108900"
  },
  {
    "text": "所以在项目级别的\n条件和部分更新 可以为您提供互斥性\n和细粒度锁定",
    "start": "1109100",
    "end": "1114567"
  },
  {
    "text": "Adam 会在 Achievements\n部分讨论这一点 且特别围绕为什么\n我们在 Achievements 中需要它",
    "start": "1115067",
    "end": "1120000"
  },
  {
    "text": "但是对于发布\n我们对于此功能通常需要的 是对于我们的\n公平算法的互斥性",
    "start": "1120400",
    "end": "1125600"
  },
  {
    "text": "所以我们实际上使用\n条件和部分更新 进行重复数据项目的删除\n这真的很有趣",
    "start": "1126033",
    "end": "1131800"
  },
  {
    "text": "此外，DynamoDB 模型允许我们\n具有灵活的架构演变 我们再也不需要\n在生产数据库",
    "start": "1133300",
    "end": "1139233"
  },
  {
    "text": "集群上实际运行超表 我们可以简单地更改代码来读写\nDynamoDB 中的新的列",
    "start": "1139367",
    "end": "1144399"
  },
  {
    "text": "或属性 因此，只需更改一个代码\n就可以开始写入新属性",
    "start": "1144667",
    "end": "1149867"
  },
  {
    "text": "之前，我们本来需要\n设置并运行一个替代表 并为此运行脚本",
    "start": "1150500",
    "end": "1155333"
  },
  {
    "text": "但现在有了 DynamoDB\n就能简单地更改代码 并开始读取和写入\n我的新属性",
    "start": "1155533",
    "end": "1160433"
  },
  {
    "text": "一项极其强大的功能 我也想向您展示\n我们的数据模型之一",
    "start": "1160700",
    "end": "1165667"
  },
  {
    "start": "1162000",
    "end": "1226000"
  },
  {
    "text": "使用 NoSQL 数据存储 要非常谨慎地选择键 不应该使用热点",
    "start": "1166033",
    "end": "1171833"
  },
  {
    "text": "而且要确保\n一切尽可能散开 您希望使用 DynamoDB\n的横向可扩展性优势",
    "start": "1171967",
    "end": "1178200"
  },
  {
    "text": "其中很重要的是键选择 所以在这种情况下\n在左边您看到",
    "start": "1178500",
    "end": "1182567"
  },
  {
    "text": "基本上是主键 由两个逻辑键组成，而在\nCassandra 上则是列",
    "start": "1184033",
    "end": "1190100"
  },
  {
    "text": "因此，用户 ID 列\n和发布 ID 列 组合在一起\n形成 HASH 键",
    "start": "1190367",
    "end": "1195233"
  },
  {
    "text": "因此，在 DynamoDB 中\n您必须要使用字符串连接 以达到同样的效果",
    "start": "1196233",
    "end": "1200600"
  },
  {
    "text": "从 Cassandra 迁移到 Dynamo 时\n并非所有都是免费的 但是在这种情况下\n其实很简单",
    "start": "1201433",
    "end": "1206867"
  },
  {
    "text": "可以采用两个逻辑属性\n字符串将它们连接在一起 就能达到同样的效果",
    "start": "1207000",
    "end": "1211632"
  },
  {
    "text": "另外，可以看到\n左边有一系列属性 并未在右侧指定 所以如果一个属性\n没有出现在键上",
    "start": "1212433",
    "end": "1219899"
  },
  {
    "text": "则不需要在模式中指定 这对于进化您的\n数据模型非常有用",
    "start": "1220033",
    "end": "1225067"
  },
  {
    "start": "1226000",
    "end": "1284000"
  },
  {
    "text": "但是发布的真正关键 是横向、上和下\n的扩展能力",
    "start": "1227467",
    "end": "1231933"
  },
  {
    "text": "所以之前我们本来需要\n改变 EC2 容量 用于 Cassandra 和 Couchbase 群集",
    "start": "1232567",
    "end": "1237632"
  },
  {
    "text": "我们将必须\n以正确的顺序完成 以保证我们\n不失去可用性 也不会丢失数据\n这极具挑战性",
    "start": "1238167",
    "end": "1245833"
  },
  {
    "text": "必须在复制侧\n协调必要的流量 用于 Cassandra 集群 以确保不丢失数据",
    "start": "1246233",
    "end": "1252667"
  },
  {
    "text": "但是有了 DynamoDB\n在请求级别即可轻松 增加和减少容量",
    "start": "1253467",
    "end": "1258000"
  },
  {
    "text": "因此对于容量单位 可以指明\n将要在表中 实际具备多少吞吐量",
    "start": "1258567",
    "end": "1264700"
  },
  {
    "text": "这通常是可以保证的 因此，当调配100个单位时\n将获得100个单位的容量",
    "start": "1264833",
    "end": "1269933"
  },
  {
    "text": "这就表明我们\n不需要再为 空闲容量付费\n我们可以在非常精细的",
    "start": "1271233",
    "end": "1276632"
  },
  {
    "text": "粒度水平上，为一个容量单元\n支付很少的费用 这样我们就可以\n随意上下扩展",
    "start": "1276800",
    "end": "1282732"
  },
  {
    "start": "1284000",
    "end": "1338000"
  },
  {
    "text": "但是对于发布\n我们绝对需要容量规划 我们需要了解\n什么时候发布产品",
    "start": "1285267",
    "end": "1290367"
  },
  {
    "text": "何时达到流量高峰 我们的容量需求 所以我们并没有\n卸下这项任务的负担",
    "start": "1290500",
    "end": "1297000"
  },
  {
    "text": "但真的很容易 我们通过读取和写入\n容量单位进行扩展 因此，某个团队可能需要\n大量读取，以及很多读取单位",
    "start": "1297633",
    "end": "1304399"
  },
  {
    "text": "而另一个团队可能要大量写入\n也需要很多写入单位 实际上我们可以在非常\n精细粒度的水平上",
    "start": "1304767",
    "end": "1310233"
  },
  {
    "text": "在表和索引两个方面\n做到这一点 为此我们可以实际使用\n历史数据 所以我们用了内置\nCloudWatch 指标",
    "start": "1310867",
    "end": "1317667"
  },
  {
    "text": "以实际跟踪容量\n随时间推移的情况 我们知道已调配了什么\n消耗了什么",
    "start": "1317967",
    "end": "1322833"
  },
  {
    "text": "而且我们知道\n所看到的那种结果 对于发布\n不同的流量模式 我们也可以进行实验",
    "start": "1323333",
    "end": "1329100"
  },
  {
    "text": "实际上我们所做的是\n可以运行模拟流量 并查看 DynamoDB 表的功能\n实际上相当不错",
    "start": "1329233",
    "end": "1334800"
  },
  {
    "text": "在精细粒度水平上\n您可以看到所需的吞吐量 但是我们对于发布\n我们不能依靠",
    "start": "1335433",
    "end": "1342267"
  },
  {
    "start": "1338000",
    "end": "1403000"
  },
  {
    "text": "自动扩展 因此，当您看到之前的\n图表时，您会看到 这个安静的时期\n然后是巨大的增长",
    "start": "1342667",
    "end": "1348967"
  },
  {
    "text": "所以自动扩展的速度\n无法对此做出实际反应 因此我们必须使用预扩展 使用预扩展时\n我们可以一次设定",
    "start": "1349200",
    "end": "1357300"
  },
  {
    "text": "扩展到达的规模 我们通过使用相同的应用程序\n自动扩展服务来达成这一目的 DynamoDB 自动扩展\n已经使用这一方法",
    "start": "1357667",
    "end": "1363967"
  },
  {
    "text": "所以我们需要制定\n我们的容量计划 我们增加一些顶部空间\n并将其设置为新的最低要求",
    "start": "1364267",
    "end": "1369433"
  },
  {
    "text": "所以在产品发布之前\n比如6点45分，我们会说 \"扩展规模\"",
    "start": "1369767",
    "end": "1375600"
  },
  {
    "text": "就在发布之前 所以我们能够拥有\n发布所需的容量 来令其成功发生",
    "start": "1375967",
    "end": "1382300"
  },
  {
    "text": "所以在发布中实际上\n我们有优势 所以我们实际上知道\n高峰何时会发生 这样我们可以提前\n安排这些事",
    "start": "1383067",
    "end": "1388567"
  },
  {
    "text": "我们也仍然可以利用\n自动扩展功能 我们仍然在\n增加最大值 目的是如果发现\n意外的流量涌入",
    "start": "1390533",
    "end": "1399167"
  },
  {
    "text": "就还能使自动扩展\n到高于最小值 但是我们敏锐地\n发现了热键的问题",
    "start": "1399400",
    "end": "1407299"
  },
  {
    "start": "1403000",
    "end": "1469000"
  },
  {
    "text": "我们有很多案例 我们需要在单键上的\n高吞吐量 比如产品数据之类的",
    "start": "1407500",
    "end": "1413367"
  },
  {
    "text": "如果有很多人的时候 例如美国 想要购买某款产品",
    "start": "1413600",
    "end": "1418800"
  },
  {
    "text": "所有人都在访问该\n特定产品 ID 的产品数据 那么我们就出现了\n一个固有的热键问题",
    "start": "1419200",
    "end": "1424867"
  },
  {
    "text": "因此，使用 Cassandra\n和 Couchbase 时 在这一点上有所缓解 这两个系统有一些节点内\n缓存功能",
    "start": "1425500",
    "end": "1430233"
  },
  {
    "text": "因此 Cassandra 具有行缓存功能 其在内存中\n可缓存四行 而 Couchbase 具有\n已经内置的强大缓存层",
    "start": "1430933",
    "end": "1437967"
  },
  {
    "text": "这样我们还是可以有热节点\n我们的节点还是很热 但我们还是会缓解",
    "start": "1438500",
    "end": "1443567"
  },
  {
    "text": "我们所看到的\n一些热键问题 而且通过 DynamoDB\n我们面对可能的节流 在 DynamoDB 中，他们的方法是\n表的总容量除以",
    "start": "1443700",
    "end": "1452033"
  },
  {
    "text": "其所具有的\n总分区数 所以得到的是\n基本上在有热键时的 每分区节流",
    "start": "1452167",
    "end": "1458267"
  },
  {
    "text": "这实际上在很多情况下\n非常普遍 产品数据、定价、图像等等\n在发布期间",
    "start": "1459000",
    "end": "1465600"
  },
  {
    "text": "像所有这些案例一样\n我们会看到这些出现高吞吐量 所以我们首先达成\n的是 CDN 层",
    "start": "1466133",
    "end": "1472966"
  },
  {
    "start": "1469000",
    "end": "1533000"
  },
  {
    "text": "CDN 是在每个\nAPI 调用之前 这显然是可以开始\n缓存内容的地方",
    "start": "1473533",
    "end": "1478800"
  },
  {
    "text": "而且因为我们有\n微服务架构 所以我们缓存的是\n非常小的数据 产品数据可以有\n不同的缓存 TTL",
    "start": "1479833",
    "end": "1486900"
  },
  {
    "text": "就像产品价格一样 并且我们在 CDN 层缓存\n完整 HTP 响应",
    "start": "1487033",
    "end": "1493467"
  },
  {
    "text": "这对于变化速度慢的资源\n十分有用，对吧？ 产品文字在发布的\n生命周期中不改变",
    "start": "1494867",
    "end": "1502333"
  },
  {
    "text": "CDN 由被称为\n存在点的 多个数据中心组成 所以世界各地\n有许多数据中心",
    "start": "1503733",
    "end": "1510300"
  },
  {
    "text": "而具有最接近用户的\n这些存在点 我们在发布期间看到的是 在发布开始时\n我们仍然看到流量激增",
    "start": "1510533",
    "end": "1517733"
  },
  {
    "text": "因此，在发布开始时\n我们看到每个 CDN 数据中心 的突发流量到了我们的微服务层",
    "start": "1518067",
    "end": "1523900"
  },
  {
    "text": "然后迸发到 table 那一层 所以我们不能完全依靠 CDN\n来减轻我们的热键问题",
    "start": "1524333",
    "end": "1532367"
  },
  {
    "start": "1533000",
    "end": "1604000"
  },
  {
    "text": "而传统的方法\n是使用一个端缓存 端缓存就是有点像",
    "start": "1534033",
    "end": "1539466"
  },
  {
    "text": "实际在内存中\n缓存一些数据 供您使用的分布式\nMemcached 或 Redis 集群",
    "start": "1539633",
    "end": "1545333"
  },
  {
    "text": "实际上，团队必须决定 我要通过缓存\n进行读取吗？ 我要通过缓存\n进行写入吗？",
    "start": "1546867",
    "end": "1552433"
  },
  {
    "text": "我的缓存策略是什么？ 他们必须在其微服务中\n编写这段代码 所以他们必须\n做很多工作",
    "start": "1552567",
    "end": "1558433"
  },
  {
    "text": "就只是为了缓存一些值 在计算机科学中\n两个最困难的问题 是命名事物\n缓存失效和差一错误",
    "start": "1558567",
    "end": "1566500"
  },
  {
    "text": "在这种情况下，每个团队\n都需要做缓存失效 缓存失效\n对于我们顾客的体验 不受打扰\n非常重要",
    "start": "1567200",
    "end": "1573967"
  },
  {
    "text": "所以能想到的案例\n是库存 如果我们在体验中\n对您保证 9号鞋有货",
    "start": "1574567",
    "end": "1580632"
  },
  {
    "text": "但您开始点击然后\n单击了\"购买\" 但却已经无货可买\n那真是非常糟糕的体验",
    "start": "1580900",
    "end": "1585700"
  },
  {
    "text": "在这种情况下确实需要\n缓存失效策略快速进行 而且顾客能尽快\n得到最新信息",
    "start": "1585933",
    "end": "1591900"
  },
  {
    "text": "这一点的确也非常重要 因此，通过端缓存来完成\n确实具有挑战性",
    "start": "1592167",
    "end": "1598700"
  },
  {
    "text": "在更新您的缓存时\n可使用类似 DynamoDB 流来完成 但是仍然有\n这种滞后发生",
    "start": "1598833",
    "end": "1604132"
  },
  {
    "start": "1604000",
    "end": "1649000"
  },
  {
    "text": "接下来我们要谈的是\n一个非常简单的解决方案 我们可使用 DynamoDB Accelerator\n也叫 DAX",
    "start": "1604467",
    "end": "1610100"
  },
  {
    "text": "DAX 在数据库表的前面 为您执行正确的\n缓存逻辑",
    "start": "1610533",
    "end": "1614967"
  },
  {
    "text": "它会通过行为\n执行读取和写入 向 DynamoDB 中\n写入一个项目时 它会在写入完成后\n立即缓存在项目缓存中",
    "start": "1615633",
    "end": "1623200"
  },
  {
    "text": "而在缓存未命中时，实际上\n也将值缓存在内存中 这减轻了\n我们的一些热键问题",
    "start": "1623633",
    "end": "1630400"
  },
  {
    "text": "所以当我们有一个热键\n并且我们更新热键时 我们看到缓存实际上\n很快就在写操作上被换出",
    "start": "1630567",
    "end": "1637400"
  },
  {
    "text": "DAX 实际上能非常有效地\n帮助疏解发布流量 特别是爆发状态",
    "start": "1638967",
    "end": "1643667"
  },
  {
    "text": "所以，换我了 现在我想换个话题 谈谈成就服务",
    "start": "1648067",
    "end": "1654833"
  },
  {
    "start": "1649000",
    "end": "1743000"
  },
  {
    "text": "但首先\n我需要给出一些背景 并且谈谈我们的\n运动活动应用",
    "start": "1655767",
    "end": "1660600"
  },
  {
    "text": "2016年，耐克发布并重新设计了\n我们的体育活动应用程序 该应用程序完全是云原生的",
    "start": "1662167",
    "end": "1668200"
  },
  {
    "text": "您的私人教练程序，Nike Training Club\n也叫 NTC 您理想的跑步伙伴，\nNike Run Club 也叫 NRC",
    "start": "1668533",
    "end": "1676167"
  },
  {
    "text": "以前这些体验都是 由单体形式的\n软件堆栈提供的 由一系列 Oracle RAC 和\n一致性服务器提供支持",
    "start": "1677100",
    "end": "1684567"
  },
  {
    "text": "由于 RAC 是一个关系数据库 它需要不时被停机\n以进行维护",
    "start": "1685200",
    "end": "1690733"
  },
  {
    "text": "我们通常会在流量少\n的时候进行这项工作 通常是在晚上",
    "start": "1690867",
    "end": "1695000"
  },
  {
    "text": "但是随着耐克成长为全球品牌 这些低流量时段\n也开始减少",
    "start": "1696000",
    "end": "1701400"
  },
  {
    "text": "所以很难找到机会进行维修 还有由于这个平台的内存缓存\n使用的是 Coherence",
    "start": "1701533",
    "end": "1709367"
  },
  {
    "text": "用于跟踪状态 并实际上用于在单个\n运动员的数据被处理时",
    "start": "1709800",
    "end": "1715367"
  },
  {
    "text": "把数据锁定 如您所想\n这些锁定很有争议 因为后台进程\n处理所有数据",
    "start": "1716367",
    "end": "1722767"
  },
  {
    "text": "然后导致很多瓶颈\n而且极大地限制了吞吐量",
    "start": "1723000",
    "end": "1727133"
  },
  {
    "text": "由于这些原因还有\nZack 提到的其它原因 我们没有从单体 提升并转型\n任何服务",
    "start": "1728500",
    "end": "1733933"
  },
  {
    "text": "但这并不意味着\n所有功能最初都被包括在 我们的云原生应用的\n在第一个版本中",
    "start": "1734500",
    "end": "1740267"
  },
  {
    "text": "其中一项就是 Achievements 因此，在我们的运动活动应用中\n有这个叫 Achievements 的功能",
    "start": "1740733",
    "end": "1747100"
  },
  {
    "start": "1743000",
    "end": "1815000"
  },
  {
    "text": "这种方式让我们的运动员\n保持积极性 无论是刚开始跑\n第一英里 还是第五次马拉松 耐克希望为运动员加油",
    "start": "1747333",
    "end": "1754000"
  },
  {
    "text": "但是在以前的\n单体软件堆栈中 个人成就\n通过代码实施",
    "start": "1754700",
    "end": "1759967"
  },
  {
    "text": "正如 Zack 所说 部署周期\n是六个月 因此，部署新成就\n是一个极端的挑战",
    "start": "1761900",
    "end": "1768700"
  },
  {
    "text": "所以为了解决这些问题 团队设计了\n两项关键服务 规则引擎，将允许\n来自世界各地的团队",
    "start": "1769200",
    "end": "1777933"
  },
  {
    "text": "定义定制的\n本地化成就 将各种过滤器\n用到运动员活动数据上",
    "start": "1778067",
    "end": "1783800"
  },
  {
    "text": "只需单击几下即可完成 然后是 Ingest 服务 负责处理接收到的\n实时活动数据的功能",
    "start": "1784000",
    "end": "1791033"
  },
  {
    "text": "通过应用创建的规则\n来确定 运动员是否有资格\n获得成就 并将其持久化到数据库中",
    "start": "1791433",
    "end": "1796833"
  },
  {
    "text": "另外是可观察性 成为了这些服务的\n核心原则 它们使用了分布式跟踪\n实现这一原则",
    "start": "1798000",
    "end": "1806200"
  },
  {
    "text": "分布式跟踪也是\n一个有意思的话题 我稍后会提到",
    "start": "1811167",
    "end": "1814567"
  },
  {
    "start": "1815000",
    "end": "1864000"
  },
  {
    "text": "因此为了向规则引擎\nIngest 服务提供动力 团队出于多种原因\n决定使用 DynamoDB",
    "start": "1816333",
    "end": "1822500"
  },
  {
    "text": "首先，其可扩展 DynamoDB 每秒可以\n处理数千个请求 其耐用性好\n无需在深夜",
    "start": "1823033",
    "end": "1830300"
  },
  {
    "text": "的低流量期间\n更新数据库或打补丁 同时弹性良好",
    "start": "1830433",
    "end": "1835433"
  },
  {
    "text": "允许数据大小增加\n而无需干预 而且具有成本效益 由于具有伸缩能力",
    "start": "1835600",
    "end": "1841132"
  },
  {
    "text": "成就只需为\n使用到的部分付费 同时具备可观察性\nDynamoDB 向 CloudWatch 的报告",
    "start": "1841267",
    "end": "1848267"
  },
  {
    "text": "让团队确切知道\n生产中的实际情况 并在出现问题时\n设置告警",
    "start": "1848500",
    "end": "1854033"
  },
  {
    "text": "以及有条件的更新 对于 DynamoDB API 中的内容\n您可以执行带条件的更新",
    "start": "1854800",
    "end": "1859667"
  },
  {
    "text": "而 Achievements 服务用\n这个来获得乐观锁",
    "start": "1859867",
    "end": "1863632"
  },
  {
    "text": "但首先我们看看\n什么叫乐观锁？ 就是一种维持\n您记录的状态的方法",
    "start": "1865333",
    "end": "1871399"
  },
  {
    "text": "通过用版本号\n进行标注来实现 同时处理\n到一个成就的",
    "start": "1871633",
    "end": "1877033"
  },
  {
    "text": "多个更新时\n并发成为一个大问题 特别是你只是要保持那个单条记录时\n更是这样",
    "start": "1877500",
    "end": "1884033"
  },
  {
    "text": "所以在此我们看到\n两项成就 Ingest 服务 两者都在\n同时读取",
    "start": "1885000",
    "end": "1890933"
  },
  {
    "text": "版本1的新年成就 现在，排在顶端的\n比排在底端的更快地",
    "start": "1891067",
    "end": "1896500"
  },
  {
    "text": "完成了更新 把这个版本更新成第2版本\n并写入数据库",
    "start": "1896767",
    "end": "1902000"
  },
  {
    "text": "现在我们看到排在底端的\n想要更新记录 把这个版本更新成第2版本\n并尝试这样做",
    "start": "1902633",
    "end": "1909299"
  },
  {
    "text": "但是使用条件更新 API 时\n实际上却失败了 因为表格中的版本\n不再是1",
    "start": "1909833",
    "end": "1915367"
  },
  {
    "text": "已更新为2 所以让我们看看\n使用 Achievements 服务时",
    "start": "1915533",
    "end": "1921300"
  },
  {
    "start": "1918000",
    "end": "2061000"
  },
  {
    "text": "条件更新中会发生什么事 想像一下，几个月\n来您一直训练 您已经准备好开始跑步",
    "start": "1921533",
    "end": "1926732"
  },
  {
    "text": "您要以最快速度\n跑完马拉松 总距离是26.2英里",
    "start": "1926867",
    "end": "1932367"
  },
  {
    "text": "耐克要庆祝\n这个成就 所以在步骤1中，在13.1英里时\n看到了来自应用程序的更新",
    "start": "1932833",
    "end": "1939667"
  },
  {
    "text": "在步骤2中，我们看到顶端的\n这个 Ingest 服务 开始处理更新 在步骤2中，我们看到来自\n应用程序的另一个更新",
    "start": "1941200",
    "end": "1948800"
  },
  {
    "text": "就是把这个活动\n更新成26.2英里 在步骤3中\n我们看到这两种 Ingest服务",
    "start": "1948967",
    "end": "1954567"
  },
  {
    "text": "都在处理数据 我们现在看到底端的那个服务\n已处理完了",
    "start": "1954700",
    "end": "1959700"
  },
  {
    "text": "比顶端的\n略快一点 然后把您新的最快马拉松成就\n写入 DynamoDB",
    "start": "1959833",
    "end": "1967700"
  },
  {
    "text": "但是顶端的那个服务\n还没有处理完 因此，在步骤5中，我们看到\n13.1英里的更新",
    "start": "1968933",
    "end": "1976933"
  },
  {
    "text": "被写回了 Dynamo 但却已经覆盖了运动员\n现在最快的马拉松时间",
    "start": "1977633",
    "end": "1983467"
  },
  {
    "text": "因为系统不知道这件事 所以在步骤5中 我们看到底端服务\n完成了任务",
    "start": "1983600",
    "end": "1989367"
  },
  {
    "text": "在步骤6中，顶端服务\n完成了任务 这基本上是\n最后写入者获胜的模型",
    "start": "1989667",
    "end": "1995933"
  },
  {
    "text": "并不能确保\n数据的一致性 这可能会为\n我们的跑步者带来 糟糕的体验",
    "start": "1996300",
    "end": "2001467"
  },
  {
    "text": "所以现在让我们\n将条件更新用于 该过程 在步骤1中，我们再次\n看到13.1英里的更新",
    "start": "2002967",
    "end": "2008967"
  },
  {
    "text": "在步骤2中，我们再次\n看到顶端服务读取内容",
    "start": "2009833",
    "end": "2013967"
  },
  {
    "text": "该成就的版本1 以及26.2英里的\n另一个更新",
    "start": "2015033",
    "end": "2020033"
  },
  {
    "text": "步骤3，我们现在看到\n底端服务在处理其数据时 又比较快",
    "start": "2020400",
    "end": "2025300"
  },
  {
    "text": "把最快的马拉松\n成就写入了 现在顶端服务尝试写入\nDynamoDB，但没有成功",
    "start": "2025567",
    "end": "2032167"
  },
  {
    "text": "因为底端服务\n已经进行了更新 底端服务已完成工作\n工作完成了，就继续下一步",
    "start": "2032433",
    "end": "2040800"
  },
  {
    "text": "在步骤5中\n我们看到该消息的重新处理 并且记录不再更新",
    "start": "2040933",
    "end": "2048167"
  },
  {
    "text": "因为它收到了\n26.2英里的新信息 在步骤6中，两项服务\n都已经处理完了",
    "start": "2048433",
    "end": "2055066"
  },
  {
    "text": "运动员的\n数据正确 耐克为您庆祝\n最快的马拉松时间",
    "start": "2055200",
    "end": "2061067"
  },
  {
    "start": "2061000",
    "end": "2139000"
  },
  {
    "text": "我们并不是说在\n实施成就服务时 没有面临挑战",
    "start": "2063100",
    "end": "2067667"
  },
  {
    "text": "行的大小是我们遇到的挑战之一 所以我们 Achievements 服务\n中的其中一列 实际上还挺大的",
    "start": "2068167",
    "end": "2073967"
  },
  {
    "text": "而读写能力\n与记录大小相关 较大的记录可以很快消耗\n您可能没有计划过的",
    "start": "2074433",
    "end": "2081700"
  },
  {
    "text": "额外容量单位 那么，团队对此提出了\n一个很好的解决方案 他们只是简单地 G-压缩了列",
    "start": "2081833",
    "end": "2088167"
  },
  {
    "text": "通过简单的代码更改\n他们能够重写改写那一列 并以极快的速度\n移除读取",
    "start": "2088700",
    "end": "2093833"
  },
  {
    "text": "和写入容量单位 我们遇到的另一个挑战\n就是 DAX",
    "start": "2094200",
    "end": "2098667"
  },
  {
    "text": "我们尝试将 DAX\n用于成就 而发布成功地\n在生产中使用了DAX",
    "start": "2099333",
    "end": "2105233"
  },
  {
    "text": "但是他们的数据访问方式\n以及数据大小 具有很大差异",
    "start": "2105733",
    "end": "2110700"
  },
  {
    "text": "发布需要大量读取\n很多小的记录 而成就是平均\n97％的读取和3％的写入",
    "start": "2111933",
    "end": "2119200"
  },
  {
    "text": "但记录也较大 而且我们的访问模式\n非常分散",
    "start": "2119500",
    "end": "2124599"
  },
  {
    "text": "可能导致\n大量缓存颠簸 因此随着 DAX 群集指标\n可见度的降低",
    "start": "2124733",
    "end": "2130233"
  },
  {
    "text": "团队决定重新\n制定表架构 通过添加第二张表\n来推动",
    "start": "2130600",
    "end": "2135667"
  },
  {
    "text": "Achievements 服务的\n新功能开发 同时，Achievements 在一年多的时间内",
    "start": "2136233",
    "end": "2141933"
  },
  {
    "text": "一直在运行\n并取得了巨大的成功 加上团队的努力工作 单体在今年早些时候\n才终于能被关闭",
    "start": "2142067",
    "end": "2149000"
  },
  {
    "text": "但这当然并不算完成了\n我们的云之旅 这只是完成了一章",
    "start": "2149867",
    "end": "2154233"
  },
  {
    "start": "2154000",
    "end": "2173000"
  },
  {
    "text": "Achievements 是我们开始使用\nDynamoDB 的一个例子 但是那些没有\n从一开始就使用",
    "start": "2155267",
    "end": "2161033"
  },
  {
    "text": "Dynamo 的服务呢？ 记得 Zack 提到一些\n团队迅速转向云 并使用 Cassandra 作为他们的\n数据存储，我们就是其中之一",
    "start": "2161200",
    "end": "2169233"
  },
  {
    "text": "我们最早迁移到云的\n服务之一是时区服务 正如 Zack 所说",
    "start": "2169667",
    "end": "2175867"
  },
  {
    "start": "2173000",
    "end": "2229000"
  },
  {
    "text": "在计算机科学中有\n两个最困难的问题 缓存无效\n差一命名",
    "start": "2176267",
    "end": "2182400"
  },
  {
    "text": "我想添加第三个问题\n那就是时间 处理时间非常困难",
    "start": "2182800",
    "end": "2188533"
  },
  {
    "text": "所以要解决这种情况\n我们的团队创建了时区服务 基本上是一个 Web 服务\n当用户或运动员在",
    "start": "2189433",
    "end": "2197800"
  },
  {
    "text": "世界各地移动时\n存储他们的时区变动情况 运动员完成锻炼后\n应用程序就会",
    "start": "2197933",
    "end": "2205100"
  },
  {
    "text": "显示运动员所在世界上的位置的时区\n然后数据在必要时 让平台为运动员提供\n调整后时区的数据",
    "start": "2205233",
    "end": "2211432"
  },
  {
    "text": "但是所有数据都\n存储在 UTC 时区 以便调试和处理",
    "start": "2211633",
    "end": "2217667"
  },
  {
    "text": "时区使用了 Cassandra\n这是一个很棒的数据存储系统 可以扩展以便处理\n非常大的流量负载",
    "start": "2218633",
    "end": "2225000"
  },
  {
    "text": "但是自从时区在2016年\n推出以来，我们学到了很多 那就是我们是一个 DevOps 团队\n而 Cassandra 是",
    "start": "2226100",
    "end": "2233900"
  },
  {
    "start": "2229000",
    "end": "2261000"
  },
  {
    "text": "简单说来，团队成员\n必须应对的 最费力耗时的任务 成本不断上升",
    "start": "2234033",
    "end": "2240033"
  },
  {
    "text": "随着团队增加群集\n来适应不断增长的数据量 EC2 成本也跟着不断上升",
    "start": "2240167",
    "end": "2245700"
  },
  {
    "text": "还有 Cassandra 版本要升级 就像滚雪球一样\n很容易就占据",
    "start": "2247233",
    "end": "2254600"
  },
  {
    "text": "生产团队成员一周的时间\n来推送该代码 还有一个特别具有挑战性的事件\n就是 EC2 的下线通知",
    "start": "2254733",
    "end": "2262067"
  },
  {
    "start": "2261000",
    "end": "2316000"
  },
  {
    "text": "EC2 下线通知 是由于亚马逊的\n硬件功能不正常 或者他们想将其下线",
    "start": "2263633",
    "end": "2269533"
  },
  {
    "text": "想象一下，您在办公桌旁 正在编写一些代码\n随时待命 您的轮转十分顺畅",
    "start": "2270300",
    "end": "2275733"
  },
  {
    "text": "但是，突然 叮 来了一封电子邮件\n通知你 EC2 准备下线了 对于我们所有其它的\n云服务，这很容易",
    "start": "2276567",
    "end": "2283733"
  },
  {
    "text": "团队可以让\n我们的自动扩展小组 为我们完成工作 但是 Cassandra 不同",
    "start": "2284267",
    "end": "2289800"
  },
  {
    "text": "您转到 AWS 控制台\n然后 EC2，然后去到事件那边 希望您不会看到\n一个 Cassandra 节点",
    "start": "2290433",
    "end": "2295867"
  },
  {
    "text": "而且您的轮转非常顺利 所以现在该花上几个小时\n仔细阅读运营手册",
    "start": "2296933",
    "end": "2302967"
  },
  {
    "text": "了解如何在集群中\n更换节点 团队从其它服务中获得了使用\nDynamoDB 的经验",
    "start": "2303267",
    "end": "2310333"
  },
  {
    "text": "考虑到 Cassandra 和\nDynamoDB 都是 NoSQL 数据存储\n团队希望进行迁移",
    "start": "2310600",
    "end": "2315500"
  },
  {
    "start": "2316000",
    "end": "2356000"
  },
  {
    "text": "因此，左侧的架构\n来自 Cassandra 里面包括用户 ID\n时间戳",
    "start": "2317267",
    "end": "2324233"
  },
  {
    "text": "时区 ID 、元数据\n对吧？ 在右边，我们看看\n什么是 Dynamo",
    "start": "2324367",
    "end": "2330233"
  },
  {
    "text": "架构更简单 通过灵活的架构演化 在这种情况下我们实际上\n只需要指定两列",
    "start": "2330633",
    "end": "2339200"
  },
  {
    "text": "正如 Zack 所说\n这里的主键 在 Cassandra 那边\n我们有用户ID和时间戳 我们同样也只需要在 Dynamo 那边\n指明这些",
    "start": "2339533",
    "end": "2348099"
  },
  {
    "text": "而我们不必指定\n其它任何列 这都是由于灵活的\n模式演化",
    "start": "2349200",
    "end": "2355333"
  },
  {
    "start": "2356000",
    "end": "2415000"
  },
  {
    "text": "那么我们如何迁移这些数据？ 所以我们设置了服务\n执行双重写入",
    "start": "2357900",
    "end": "2363533"
  },
  {
    "text": "我们先写入 DynamoDB 一旦我们确定\n一切就绪 然后我们转到步骤2",
    "start": "2364100",
    "end": "2370300"
  },
  {
    "text": "所以在步骤2中\n我们实际上执行了迁移 使用不同技术\n的组合",
    "start": "2371200",
    "end": "2376167"
  },
  {
    "text": "来自 AWS Labs 的\nAWS EMR、Spark DynamoDB Spark Connector",
    "start": "2376300",
    "end": "2382400"
  },
  {
    "text": "花了大约\n三天时间 迁移所有这些数据 之后，我们验证了数据\n然后我们转到步骤3",
    "start": "2382767",
    "end": "2389900"
  },
  {
    "text": "所以在步骤3中 我们将读取模式改为\n从 DynamoDB 读取",
    "start": "2390700",
    "end": "2397500"
  },
  {
    "text": "所以我们仍在进行双重写入\n以防万一出问题 还是万一\n我们没有做对",
    "start": "2398633",
    "end": "2403599"
  },
  {
    "text": "一旦我们确定\n一切就绪 我们转到步骤4 在步骤4中\n我们从Cassandra 中完全删除",
    "start": "2404400",
    "end": "2410533"
  },
  {
    "text": "来自代码库的代码 并从生产那边\n完全移除了 EC2 实例",
    "start": "2410667",
    "end": "2414533"
  },
  {
    "start": "2415000",
    "end": "2446000"
  },
  {
    "text": "所以我们想回顾一下\n刚刚做的事情 我们发现了一些\n很有趣的东西",
    "start": "2416667",
    "end": "2422300"
  },
  {
    "text": "由于 DynamoDB 我们的整体数据库成本\n降低了98％",
    "start": "2423200",
    "end": "2428467"
  },
  {
    "text": "没错，我们仅花费了用于 Cassandra 的\n2％的资金 就能够做到这一点",
    "start": "2429233",
    "end": "2434633"
  },
  {
    "text": "而在迁移后\n不放弃任何东西 还有我们管理时区\n群集的 DevOps",
    "start": "2434767",
    "end": "2440233"
  },
  {
    "text": "从以小时甚至几天为单位\n进行衡量变成了仅仅几分钟",
    "start": "2440633",
    "end": "2445267"
  },
  {
    "start": "2446000",
    "end": "2461000"
  },
  {
    "text": "因此 DynamoDB 成为了\n耐克的新默认设置 DynamoDB 对于时区、成就\n团队和耐克来说都十分重大",
    "start": "2447300",
    "end": "2455900"
  },
  {
    "text": "所以不管是\n从头重新开始 还是从使用现有的\n数据存储开始 您都应考虑 DynamoDB",
    "start": "2456100",
    "end": "2460667"
  },
  {
    "start": "2461000",
    "end": "2524000"
  },
  {
    "text": "正如我们所见证的\nDynamoDB 让我们可以扩展 因此对于产品发布，这意味着\n扩大我们的峰值吞吐量",
    "start": "2461833",
    "end": "2469100"
  },
  {
    "text": "也许对于时区之类的东西\n在可以随我们扩展的 数据存储本身周边\n也有很多可扩展性需求",
    "start": "2469700",
    "end": "2476367"
  },
  {
    "text": "总的来说，DynamoDB\n实际上也允许我们的组织扩展 因此我们可以更快地添加团队",
    "start": "2477200",
    "end": "2483432"
  },
  {
    "text": "他们不必操作\n数据库集群 他们可以轻松地调配\nDynamo 表 我们花费更少的时间在\n扩展数据库上",
    "start": "2483567",
    "end": "2490100"
  },
  {
    "text": "更多的时间在为我们的体验\n创建服务和功能上 我们可以代表我们的\n运动员不断创新",
    "start": "2490233",
    "end": "2499099"
  },
  {
    "text": "而不必做\n数据库维护 在幕后 亚马逊 Dynamo 团队\n也可以代表我们进行创新",
    "start": "2499300",
    "end": "2505467"
  },
  {
    "text": "我们在生产中\n看到的新功能 可以很快全面\n投入使用 所以无论是大概\n在一两年前",
    "start": "2506033",
    "end": "2512967"
  },
  {
    "text": "已发布的 DAX 还是备份、调整后的容量\nTTL，还是新发布的交易",
    "start": "2513433",
    "end": "2519233"
  },
  {
    "text": "这些令人兴奋的东西 我们都可以在这些功能推出时\n加以利用",
    "start": "2519367",
    "end": "2523432"
  },
  {
    "start": "2524000",
    "end": "2558000"
  },
  {
    "text": "您可以在 Medium 上找到我们\nmedium.com/nikeengineering",
    "start": "2525600",
    "end": "2530633"
  },
  {
    "text": "我们大约每月一次\n在那里发布博客 我想特别强调的两篇文章之一\n是 Nick Monroe 写的",
    "start": "2531367",
    "end": "2537433"
  },
  {
    "text": "他是耐克公司的首席工程师 他写了一篇很棒的\n关于分布式追踪的文章 真正地展示了",
    "start": "2537567",
    "end": "2543100"
  },
  {
    "text": "如何为您的服务\n增加可观察性 第二篇是耐克副总裁\nCourtney Kissler 写的",
    "start": "2543233",
    "end": "2549633"
  },
  {
    "text": "文中谈论了她如何\n在繁忙的世界中 让她的技能以及知识\n始终保持最新",
    "start": "2549800",
    "end": "2554533"
  },
  {
    "text": "好的，谢谢 我们会在前面回答问题 请记得在移动应用中\n填写反馈调查",
    "start": "2559133",
    "end": "2564033"
  },
  {
    "text": "非常感谢",
    "start": "2564167",
    "end": "2565200"
  }
]